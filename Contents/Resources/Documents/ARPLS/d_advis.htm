<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-2219"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/DBMS_ADVISOR"></a><title>DBMS_ADVISOR</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1086"/>
<meta name="dcterms.created" content="2016-09-02T5:36:5Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database PL/SQL Packages and Types Reference"/>
<meta name="dcterms.identifier" content="E41829-07"/>
<meta name="dcterms.isVersionOf" content="ARPLS"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="d_advrwr.htm" title="Previous" type="text/html"/>
<link rel="Next" href="d_alert.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41829-07.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">23/290</span> <!-- End Header -->
<div id="ARPLS350" class="chapter"><a id="CIHIGAED"></a>
<h1 class="chapter"><span class="secnum">19</span> DBMS_ADVISOR</h1>
<p><code dir="ltr">DBMS_ADVISOR</code> is part of the server manageability suite of advisors, a set of expert systems that identifies and helps resolve performance problems relating to database server components.</p>
<p>Some advisors have their own packages. For these advisors, Oracle recommends that you use the advisor-specific package rather than <code dir="ltr">DBMS_ADVISOR</code>. Each of the following advisors has its own package, tailored to its specific functionality:</p>
<ul>
<li>
<p>Automatic Database Diagnostic Monitor (<code dir="ltr">DBMS_ADDM</code>)</p>
</li>
<li>
<p>SQL Performance Analyzer (<code dir="ltr">DBMS_SQLPA</code>)</p>
</li>
<li>
<p>SQL Repair Advisor (<code dir="ltr">DBMS_SQLDIAG</code>)</p>
</li>
<li>
<p>SQL Tuning Advisor (<code dir="ltr">DBMS_SQLTUNE</code>)</p>
</li>
<li>
<p>Compression Advisor (<code dir="ltr">DBMS_COMPRESSION.GET_COMPRESSION_RATIO</code>)</p>
</li>
</ul>
<p>SQL Access Advisor and Segment Advisor are the only advisors with common use cases for <code dir="ltr">DBMS_ADVISOR</code>. Undo Advisor and Compression Advisor do not support <code dir="ltr">DBMS_ADVISOR</code> subprograms.</p>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<ul>
<li>
<p><a class="olink ADMIN01401" href="../ADMIN/schema.htm#ADMIN01401"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> to learn about Segment Advisor</p>
</li>
<li>
<p><a class="olink TDPPT" href="../TDPPT/toc.htm"><span class="italic">Oracle Database 2 Day + Performance Tuning Guide</span></a> for information regarding how to use SQL Access Advisor in Enterprise Manager</p>
</li>
<li>
<p><a class="olink TGSQL" href="../TGSQL/toc.htm"><span class="italic">Oracle Database SQL Tuning Guide</span></a> for information regarding SQL Access Advisor</p>
</li>
</ul>
</div>
<p>This chapter contains the following topics:</p>
<ul>
<li>
<p><a href="#CIHCBIEE">Using DBMS_ADVISOR</a></p>
<ul>
<li>
<p>Deprecated Subprograms</p>
</li>
<li>
<p>Security Model</p>
</li>
</ul>
</li>
<li>
<p><a href="#CHDCBHFJ">Summary of DBMS_ADVISOR Subprograms</a></p>
</li>
</ul>
<div class="refentry"><a id="CIHCBIEE"></a>
<div id="ARPLS65083" class="refsect1">
<h2 class="refsect1"><a id="sthref194"></a>Using DBMS_ADVISOR</h2>
<p>This section contains topics which relate to using the <code dir="ltr">DBMS_ADVISOR</code> package.</p>
<ul>
<li>
<p><a href="#CIHEABIJ">Deprecated Subprograms</a></p>
</li>
<li>
<p><a href="#CHDBHGFE">Security Model</a></p>
</li>
</ul>
<div id="ARPLS72206" class="refsect2"><a id="CIHEABIJ"></a>
<h3 class="refsect2">Deprecated Subprograms</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle recommends that you do not use deprecated procedures in new applications. Support for deprecated features is for backward compatibility only.</div>
<p>The following subprograms are deprecated with Oracle Database 11<span class="italic">g</span>:</p>
<ul>
<li>
<p><a href="#i1010471">ADD_SQLWKLD_REF Procedure</a></p>
</li>
<li>
<p><a href="#i1010608">CREATE_SQLWKLD Procedure</a></p>
</li>
<li>
<p><a href="#i1014034">DELETE_SQLWKLD Procedure</a></p>
</li>
<li>
<p><a href="#i1011747">DELETE_SQLWKLD_REF Procedure</a></p>
</li>
<li>
<p><a href="#i1010722">DELETE_SQLWKLD_STATEMENT Procedures</a></p>
</li>
<li>
<p><a href="#i1012244">IMPORT_SQLWKLD_SCHEMA Procedure</a></p>
</li>
<li>
<p><a href="#i1010878">IMPORT_SQLWKLD_SQLCACHE Procedure</a></p>
</li>
<li>
<p><a href="#i1012305">IMPORT_SQLWKLD_STS Procedure</a></p>
</li>
<li>
<p><a href="#i1012320">IMPORT_SQLWKLD_SUMADV Procedure</a></p>
</li>
<li>
<p><a href="#i1012335">IMPORT_SQLWKLD_USER Procedure</a></p>
</li>
<li>
<p><a href="#CIHHHDCJ">RESET_SQLWKLD Procedure</a></p>
</li>
<li>
<p><a href="#i1011237">SET_SQLWKLD_PARAMETER Procedures</a></p>
</li>
<li>
<p><a href="#i1011550">UPDATE_SQLWKLD_ATTRIBUTES Procedure</a></p>
</li>
<li>
<p><a href="#i1011486">UPDATE_SQLWKLD_STATEMENT Procedure</a></p>
</li>
</ul>
</div>
<!-- class="refsect2" -->
<div id="ARPLS65084" class="refsect2"><a id="CHDBHGFE"></a>
<h3 class="refsect2">Security Model</h3>
<p><a id="i1006394"></a>The <code dir="ltr">ADVISOR</code> privilege is required to use this package.</p>
</div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CHDCBHFJ"></a>
<div id="ARPLS65085" class="refsect1">
<h2 class="refsect1">Summary of DBMS_ADVISOR Subprograms</h2>
<p><a href="#CHDEGCBJ">Table 19-1</a> summarizes the subprograms in this package. The <code dir="ltr">Used in</code> column lists advisors relevant for each subprogram, but excludes ADDM, SQL Performance Analyzer, SQL Repair Advisor, and SQL Tuning Advisor because these advisors have their own packages.</p>
<div id="ARPLS65086" class="tblformal">
<p class="titleintable"><a id="sthref195"></a><a id="CHDEGCBJ"></a>Table 19-1 DBMS_ADVISOR Package Subprograms</p>
<table class="cellalignment4330" title=" DBMS_ADVISOR Package Subprograms" summary="This table lists the DBMS_ADVISOR subprograms in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t4">Subprogram</th>
<th class="cellalignment4328" id="r1c2-t4">Description</th>
<th class="cellalignment4328" id="r1c3-t4">Used in</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t4" headers="r1c1-t4">
<p><a href="#i1010471">ADD_SQLWKLD_REF Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r2c1-t4 r1c2-t4">
<p>Adds a workload reference to an Advisor task (Caution: Deprecated Subprogram)</p>
</td>
<td class="cellalignment4329" headers="r2c1-t4 r1c3-t4">
<p>SQL Access Advisor</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t4" headers="r1c1-t4">
<p><a href="#i1010507">ADD_SQLWKLD_STATEMENT Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r3c1-t4 r1c2-t4">
<p>Adds a single statement to a workload</p>
</td>
<td class="cellalignment4329" headers="r3c1-t4 r1c3-t4">
<p>SQL Access Advisor</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t4" headers="r1c1-t4">
<p><a href="#CIHHGIAJ">ADD_STS_REF Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r4c1-t4 r1c2-t4">
<p>Establishes a link between the current SQL Access Advisor task and a SQL tuning set</p>
</td>
<td class="cellalignment4329" headers="r4c1-t4 r1c3-t4">
<p>SQL Access Advisor</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t4" headers="r1c1-t4">
<p><a href="#i1001164">CANCEL_TASK Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r5c1-t4 r1c2-t4">
<p>Cancels a currently executing task operation</p>
</td>
<td class="cellalignment4329" headers="r5c1-t4 r1c3-t4">
<p>Segment Advisor, SQL Access Advisor</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t4" headers="r1c1-t4">
<p><a href="#CIHHBECG">COPY_SQLWKLD_TO_STS Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r6c1-t4 r1c2-t4">
<p>Copies the contents of a SQL workload object to a SQL tuning set</p>
</td>
<td class="cellalignment4329" headers="r6c1-t4 r1c3-t4">
<p>SQL Access Advisor</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t4" headers="r1c1-t4">
<p><a href="#i1010465">CREATE_FILE Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r7c1-t4 r1c2-t4">
<p>Creates an external file from a PL/SQL CLOB variable, which is useful for creating scripts and reports</p>
</td>
<td class="cellalignment4329" headers="r7c1-t4 r1c3-t4">
<p>SQL Access Advisor</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t4" headers="r1c1-t4">
<p><a href="#i1017650">CREATE_OBJECT Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r8c1-t4 r1c2-t4">
<p>Creates a new task object</p>
</td>
<td class="cellalignment4329" headers="r8c1-t4 r1c3-t4">
<p>Segment Advisor</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t4" headers="r1c1-t4">
<p><a href="#i1010608">CREATE_SQLWKLD Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r9c1-t4 r1c2-t4">
<p>Creates a new workload object (Caution: Deprecated Subprogram)</p>
</td>
<td class="cellalignment4329" headers="r9c1-t4 r1c3-t4">
<p>SQL Access Advisor</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t4" headers="r1c1-t4">
<p><a href="#i1001232">CREATE_TASK Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r10c1-t4 r1c2-t4">
<p>Creates a new Advisor task in the repository</p>
</td>
<td class="cellalignment4329" headers="r10c1-t4 r1c3-t4">
<p>Segment Advisor, SQL Access Advisor</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t4" headers="r1c1-t4">
<p><a href="#i1014034">DELETE_SQLWKLD Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r11c1-t4 r1c2-t4">
<p>Deletes an entire workload object (Caution: Deprecated Subprogram)</p>
</td>
<td class="cellalignment4329" headers="r11c1-t4 r1c3-t4">
<p>SQL Access Advisor</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t4" headers="r1c1-t4">
<p><a href="#i1011747">DELETE_SQLWKLD_REF Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r12c1-t4 r1c2-t4">
<p>Deletes an entire workload object (Caution: Deprecated Subprogram)</p>
</td>
<td class="cellalignment4329" headers="r12c1-t4 r1c3-t4">
<p>SQL Access Advisor</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t4" headers="r1c1-t4">
<p><a href="#i1010722">DELETE_SQLWKLD_STATEMENT Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r13c1-t4 r1c2-t4">
<p>Deletes one or more statements from a workload (Caution: Deprecated Subprogram)</p>
</td>
<td class="cellalignment4329" headers="r13c1-t4 r1c3-t4">
<p>SQL Access Advisor</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t4" headers="r1c1-t4">
<p><a href="#CIHDFCBE">DELETE_STS_REF Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r14c1-t4 r1c2-t4">
<p>Removes a link between the current SQL Access Advisor task and a SQL tuning set object</p>
</td>
<td class="cellalignment4329" headers="r14c1-t4 r1c3-t4">
<p>SQL Access Advisor</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r15c1-t4" headers="r1c1-t4">
<p><a href="#i1004958">DELETE_TASK Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r15c1-t4 r1c2-t4">
<p>Deletes the specified task from the repository</p>
</td>
<td class="cellalignment4329" headers="r15c1-t4 r1c3-t4">
<p>SQL Access Advisor</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r16c1-t4" headers="r1c1-t4">
<p><a href="#CIHDFJHD">EXECUTE_TASK Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r16c1-t4 r1c2-t4">
<p>Executes the specified task</p>
</td>
<td class="cellalignment4329" headers="r16c1-t4 r1c3-t4">
<p>Segment Advisor, SQL Access Advisor</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r17c1-t4" headers="r1c1-t4">
<p><a href="#i1012416">GET_REC_ATTRIBUTES Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r17c1-t4 r1c2-t4">
<p>Retrieves specific recommendation attributes from a task</p>
</td>
<td class="cellalignment4329" headers="r17c1-t4 r1c3-t4">
<p>SQL Access Advisor</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r18c1-t4" headers="r1c1-t4">
<p><a href="#BCFDFJDJ">GET_TASK_REPORT Function</a></p>
</td>
<td class="cellalignment4329" headers="r18c1-t4 r1c2-t4">
<p>Creates and returns a report for the specified task</p>
</td>
<td class="cellalignment4329" headers="r18c1-t4 r1c3-t4">&nbsp;</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r19c1-t4" headers="r1c1-t4">
<p><a href="#i1012023">GET_TASK_SCRIPT Function</a></p>
</td>
<td class="cellalignment4329" headers="r19c1-t4 r1c2-t4">
<p>Creates and returns an executable SQL script of the Advisor task&#39;s recommendations in a buffer</p>
</td>
<td class="cellalignment4329" headers="r19c1-t4 r1c3-t4">
<p>SQL Access Advisor</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r20c1-t4" headers="r1c1-t4">
<p><a href="#BCFFIEAE">IMPLEMENT_TASK Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r20c1-t4 r1c2-t4">
<p>Implements the recommendations for a task</p>
</td>
<td class="cellalignment4329" headers="r20c1-t4 r1c3-t4">
<p>SQL Access Advisor</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r21c1-t4" headers="r1c1-t4">
<p><a href="#i1012244">IMPORT_SQLWKLD_SCHEMA Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r21c1-t4 r1c2-t4">
<p>Imports data into a workload from the current SQL cache (Caution: Deprecated Subprogram)</p>
</td>
<td class="cellalignment4329" headers="r21c1-t4 r1c3-t4">
<p>SQL Access Advisor</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r22c1-t4" headers="r1c1-t4">
<p><a href="#i1010878">IMPORT_SQLWKLD_SQLCACHE Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r22c1-t4 r1c2-t4">
<p>Imports data into a workload from the current SQL cache (Caution: Deprecated Subprogram)</p>
</td>
<td class="cellalignment4329" headers="r22c1-t4 r1c3-t4">
<p>SQL Access Advisor</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r23c1-t4" headers="r1c1-t4">
<p><a href="#i1012305">IMPORT_SQLWKLD_STS Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r23c1-t4 r1c2-t4">
<p>Imports data from a SQL tuning set into a SQL workload data object (Caution: Deprecated Subprogram)</p>
</td>
<td class="cellalignment4329" headers="r23c1-t4 r1c3-t4">
<p>SQL Access Advisor</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r24c1-t4" headers="r1c1-t4">
<p><a href="#i1012320">IMPORT_SQLWKLD_SUMADV Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r24c1-t4 r1c2-t4">
<p>Imports data into a workload from the current SQL cache (Caution: Deprecated Subprogram)</p>
</td>
<td class="cellalignment4329" headers="r24c1-t4 r1c3-t4">
<p>SQL Access Advisor</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r25c1-t4" headers="r1c1-t4">
<p><a href="#i1012335">IMPORT_SQLWKLD_USER Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r25c1-t4 r1c2-t4">
<p>Imports data into a workload from the current SQL cache (Caution: Deprecated Subprogram)</p>
</td>
<td class="cellalignment4329" headers="r25c1-t4 r1c3-t4">
<p>SQL Access Advisor</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r26c1-t4" headers="r1c1-t4">
<p><a href="#i1012149">INTERRUPT_TASK Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r26c1-t4 r1c2-t4">
<p>Stops a currently executing task, ending its operations as it would at a normal exit, so that the recommendations are visible</p>
</td>
<td class="cellalignment4329" headers="r26c1-t4 r1c3-t4">
<p>Segment Advisor, SQL Access Advisor</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r27c1-t4" headers="r1c1-t4">
<p><a href="#CIHGAHCJ">MARK_RECOMMENDATION Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r27c1-t4 r1c2-t4">
<p>Sets the <code dir="ltr">annotation_status</code> for a particular recommendation</p>
</td>
<td class="cellalignment4329" headers="r27c1-t4 r1c3-t4">
<p>Segment Advisor, SQL Access Advisor</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r28c1-t4" headers="r1c1-t4">
<p><a href="#i1011111">QUICK_TUNE Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r28c1-t4 r1c2-t4">
<p>Performs an analysis on a single SQL statement</p>
</td>
<td class="cellalignment4329" headers="r28c1-t4 r1c3-t4">
<p>SQL Access Advisor</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r29c1-t4" headers="r1c1-t4">
<p><a href="#CIHHHDCJ">RESET_SQLWKLD Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r29c1-t4 r1c2-t4">
<p>Resets a workload to its initial starting point (Caution: Deprecated Subprogram)</p>
</td>
<td class="cellalignment4329" headers="r29c1-t4 r1c3-t4">
<p>SQL Access Advisor</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r30c1-t4" headers="r1c1-t4">
<p><a href="#i1001339">RESET_TASK Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r30c1-t4 r1c2-t4">
<p>Resets a task to its initial state</p>
</td>
<td class="cellalignment4329" headers="r30c1-t4 r1c3-t4">
<p>Segment Advisor, SQL Access Advisor</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r31c1-t4" headers="r1c1-t4">
<p><a href="#i1011235">SET_DEFAULT_SQLWKLD_PARAMETER Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r31c1-t4 r1c2-t4">
<p>Imports data into a workload from schema evidence</p>
</td>
<td class="cellalignment4329" headers="r31c1-t4 r1c3-t4">
<p>SQL Access Advisor</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r32c1-t4" headers="r1c1-t4">
<p><a href="#i1011236">SET_DEFAULT_TASK_PARAMETER Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r32c1-t4 r1c2-t4">
<p>Modifies a default task parameter</p>
</td>
<td class="cellalignment4329" headers="r32c1-t4 r1c3-t4">
<p>Segment Advisor, SQL Access Advisor</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r33c1-t4" headers="r1c1-t4">
<p><a href="#i1011237">SET_SQLWKLD_PARAMETER Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r33c1-t4 r1c2-t4">
<p>Sets the value of a workload parameter</p>
</td>
<td class="cellalignment4329" headers="r33c1-t4 r1c3-t4">
<p>SQL Access Advisor</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r34c1-t4" headers="r1c1-t4">
<p><a href="#i1001341">SET_TASK_PARAMETER Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r34c1-t4 r1c2-t4">
<p>Sets the specified task parameter value</p>
</td>
<td class="cellalignment4329" headers="r34c1-t4 r1c3-t4">
<p>Segment Advisor, SQL Access Advisor</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r35c1-t4" headers="r1c1-t4">
<p><a href="#i1001342">TUNE_MVIEW Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r35c1-t4 r1c2-t4">
<p>Shows how to decompose a materialized view into two or more materialized views or to restate the materialized view in a way that is more advantageous for fast refresh and query rewrite</p>
</td>
<td class="cellalignment4329" headers="r35c1-t4 r1c3-t4">
<p>SQL Access Advisor</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r36c1-t4" headers="r1c1-t4">
<p><a href="#i1017783">UPDATE_OBJECT Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r36c1-t4 r1c2-t4">
<p>Updates a task object</p>
</td>
<td class="cellalignment4329" headers="r36c1-t4 r1c3-t4">
<p>Segment Advisor</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r37c1-t4" headers="r1c1-t4">
<p><a href="#i1003104">UPDATE_REC_ATTRIBUTES Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r37c1-t4 r1c2-t4">
<p>Updates an existing recommendation for the specified task</p>
</td>
<td class="cellalignment4329" headers="r37c1-t4 r1c3-t4">
<p>SQL Access Advisor</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r38c1-t4" headers="r1c1-t4">
<p><a href="#i1011550">UPDATE_SQLWKLD_ATTRIBUTES Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r38c1-t4 r1c2-t4">
<p>Updates a workload object</p>
</td>
<td class="cellalignment4329" headers="r38c1-t4 r1c3-t4">
<p>SQL Access Advisor</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r39c1-t4" headers="r1c1-t4">
<p><a href="#i1011486">UPDATE_SQLWKLD_STATEMENT Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r39c1-t4 r1c2-t4">
<p>Updates one or more SQL statements in a workload</p>
</td>
<td class="cellalignment4329" headers="r39c1-t4 r1c3-t4">
<p>SQL Access Advisor</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r40c1-t4" headers="r1c1-t4">
<p><a href="#CHDHDCCB">UPDATE_TASK_ATTRIBUTES Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r40c1-t4 r1c2-t4">
<p>Updates a task&#39;s attributes</p>
</td>
<td class="cellalignment4329" headers="r40c1-t4 r1c3-t4">
<p>Segment Advisor, SQL Access Advisor</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="ARPLS65087" class="refsect2"><a id="i1010471"></a>
<h3 class="refsect2"><a id="sthref196"></a>ADD_SQLWKLD_REF Procedure</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
This procedure is deprecated starting in Oracle Database 11<span class="italic">g</span>.</div>
<p>This procedure establishes a link between the current SQL Access Advisor task and a SQL Workload object. The link allows an advisor task to access interesting data for doing an analysis. The link also provides a stable view of the data. Once a connection between a SQL Access Advisor task and a SQL Workload object is made, the workload is protected from removal or modification.</p>
<p>Users should use <code dir="ltr">ADD_STS_REF</code> instead of <code dir="ltr">ADD_SQLWKLD_REF</code> for all SQL tuning set-based advisor runs. This function is only provided for backward compatibility.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref197"></a>Syntax</p>
<pre dir="ltr">DBMS_ADVISOR.ADD_SQLWKLD_REF (
   task_name              IN VARCHAR2,
   workload_name          IN VARCHAR2,
   is_sts                 IN NUMBER :=0);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref198"></a>Parameters</p>
<div id="ARPLS65088" class="tblformal">
<p class="titleintable"><a id="sthref199"></a><a id="sthref200"></a>Table 19-2 ADD_SQLWKLD_REF Procedure Parameters</p>
<table class="cellalignment4330" title="ADD_SQLWKLD_REF Procedure Parameters" summary="This table describes the parameters of DBMS_ADVISOR.ADD_SQLWKLD_REF." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t6">Parameter</th>
<th class="cellalignment4328" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t6" headers="r1c1-t6">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t6 r1c2-t6">
<p>The SQL Access Advisor task name that uniquely identifies an existing task.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t6" headers="r1c1-t6">
<p><code dir="ltr">workload_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t6 r1c2-t6">
<p>The name of the workload object to be linked. Once a object has been linked to a task, it becomes read-only and cannot be deleted. There is no limit to the number of links to workload objects. To remove the link to the workload object, use the procedure <code dir="ltr">DELETE_REFERENCE</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t6" headers="r1c1-t6">
<p><code dir="ltr">is_sts</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t6 r1c2-t6">
<p>Indicates the type of workload source. Possible values are:</p>
<ul>
<li>
<p>0 - SQL workload object</p>
</li>
<li>
<p>1 - SQL tuning set</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref201"></a>Examples</p>
<pre dir="ltr">DECLARE
  task_id NUMBER;
  task_name VARCHAR2(30);
  workload_name VARCHAR2(30);
BEGIN
  task_name := &#39;My Task&#39;;
  workload_name := &#39;My Workload&#39;;

  DBMS_ADVISOR.CREATE_TASK(DBMS_ADVISOR.SQLACCESS_ADVISOR, task_id, task_name);
  DBMS_ADVISOR.ADD_SQLWKLD_REF(task_name, workload_name, 1);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65089" class="refsect2"><a id="i1010507"></a>
<h3 class="refsect2"><a id="sthref202"></a>ADD_SQLWKLD_STATEMENT Procedure</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
This procedure is deprecated starting in Oracle Database 11<span class="italic">g</span>.</div>
<p>This procedure adds a single statement to the specified workload.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref203"></a>Syntax</p>
<pre dir="ltr">DBMS_ADVISOR.ADD_SQLWKLD_STATEMENT (
   workload_name          IN VARCHAR2,
   module                 IN VARCHAR2,
   action                 IN VARCHAR2,
   cpu_time               IN NUMBER := 0,
   elapsed_time           IN NUMBER := 0,
   disk_reads             IN NUMBER := 0,
   buffer_gets            IN NUMBER := 0,
   rows_processed         IN NUMBER := 0,
   optimizer_cost         IN NUMBER := 0,
   executions             IN NUMBER := 1,
   priority               IN NUMBER := 2,
   last_execution_date    IN DATE := &#39;SYSDATE&#39;,
   stat_period            IN NUMBER := 0,
   username               IN VARCHAR2,
   sql_text               IN CLOB);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref204"></a>Parameters</p>
<div id="ARPLS65090" class="tblformal">
<p class="titleintable"><a id="sthref205"></a><a id="sthref206"></a>Table 19-3 ADD_SQLWKLD_STATEMENT Procedure Parameters&nbsp;</p>
<table class="cellalignment4330" title="ADD_SQLWKLD_STATEMENT Procedure Parameters&nbsp;" summary="This table describes the parameters of DBMS_ADVISOR.ADD_SQLWKLD_STATEMENT." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t8">Parameter</th>
<th class="cellalignment4328" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t8" headers="r1c1-t8">
<p><code dir="ltr">workload_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t8 r1c2-t8">
<p>The workload name that uniquely identifies an existing workload.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t8" headers="r1c1-t8">
<p><code dir="ltr">module</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t8 r1c2-t8">
<p>An optional business application module that will be associated with the SQL statement.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t8" headers="r1c1-t8">
<p><code dir="ltr">action</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t8 r1c2-t8">
<p>An optional application action that will be associated with the SQL statement.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t8" headers="r1c1-t8">
<p><code dir="ltr">cpu_time</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t8 r1c2-t8">
<p>The total CPU time in seconds that is consumed by the SQL statement.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t8" headers="r1c1-t8">
<p><code dir="ltr">elapsed_time</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t8 r1c2-t8">
<p>The total elapsed time in seconds that is consumed by the SQL statement.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t8" headers="r1c1-t8">
<p><code dir="ltr">disk_reads</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t8 r1c2-t8">
<p>The total disk-read operations that are consumed by the SQL statement.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t8" headers="r1c1-t8">
<p><code dir="ltr">buffer_gets</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t8 r1c2-t8">
<p>The total buffer-get operations that are consumed by the SQL statement.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t8" headers="r1c1-t8">
<p><code dir="ltr">rows_processed</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t8 r1c2-t8">
<p>The average number of rows processed by the SQL statement.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t8" headers="r1c1-t8">
<p><code dir="ltr">optimizer_cost</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t8 r1c2-t8">
<p>The optimizer&#39;s calculated cost value.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t8" headers="r1c1-t8">
<p><code dir="ltr">executions</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t8 r1c2-t8">
<p>The total execution count by the SQL statement. This value should be greater than zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t8" headers="r1c1-t8">
<p><code dir="ltr">priority</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t8 r1c2-t8">
<p>The relative priority of the SQL statement. The value must be one of the following: 1-<code dir="ltr">HIGH</code>, 2-<code dir="ltr">MEDIUM</code>, or 3-<code dir="ltr">LOW</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t8" headers="r1c1-t8">
<p><code dir="ltr">last_execution_date</code></p>
</td>
<td class="cellalignment4329" headers="r13c1-t8 r1c2-t8">
<p>The date and time at which the SQL statement last executed. If the value is <code dir="ltr">NULL</code>, then the current date and time will be used.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t8" headers="r1c1-t8">
<p><code dir="ltr">stat_period</code></p>
</td>
<td class="cellalignment4329" headers="r14c1-t8 r1c2-t8">
<p>Time interval in seconds from which statement statistics were calculated.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r15c1-t8" headers="r1c1-t8">
<p><code dir="ltr">username</code></p>
</td>
<td class="cellalignment4329" headers="r15c1-t8 r1c2-t8">
<p>The Oracle user name that executed the SQL statement. Because a user name is an Oracle identifier, the <code dir="ltr">username</code> value must be entered exactly as it is stored in the server. For example, if the user <code dir="ltr">SCOTT</code> is the executing user, then you must provide the user identifier <code dir="ltr">SCOTT</code> in all uppercase letters. It will not recognize the user <code dir="ltr">scott</code> as a match for <code dir="ltr">SCOTT</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r16c1-t8" headers="r1c1-t8">
<p><code dir="ltr">sql_text</code></p>
</td>
<td class="cellalignment4329" headers="r16c1-t8 r1c2-t8">
<p>The complete SQL statement. To increase the quality of a recommendation, the SQL statement should not contain bind variables.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref207"></a>Usage Notes</p>
<p>A workload cannot be modified or deleted if it is currently referenced by an active task. A task is considered active if it is not in its initial state. See <a href="#i1001339">RESET_TASK Procedure</a> for directions on setting a task to its initial state.</p>
<p>The <code dir="ltr">ADD_SQLWKLD_STATEMENT</code> procedure accepts several parameters that may be ignored by the caller. <code dir="ltr">cpu_time</code>, <code dir="ltr">elapsed_time</code>, <code dir="ltr">disk_reads</code>, <code dir="ltr">buffer_gets</code>, and <code dir="ltr">optimizer_cost</code> are only used to sort workload data when actual analysis occurs, so actual values are only necessary when the <code dir="ltr">order_list</code> task parameter references a particular statistic.To determine what statistics to provide when adding a new SQL statement to a workload, examine or set the task parameter <code dir="ltr">order_list</code>. The <code dir="ltr">order_list</code> parameter accepts any combination of the keys: <code dir="ltr">buffer_gets</code>, <code dir="ltr">optimizer_cost</code>, <code dir="ltr">cpu_time</code>, <code dir="ltr">disk_reads</code>, <code dir="ltr">elapsed_time</code>, <code dir="ltr">executions</code>, and <code dir="ltr">priority</code>. A typical setting of <code dir="ltr">priority</code>, <code dir="ltr">optimizer_cost</code> would indicate the SQL Access Advisor will sort the workload data by <code dir="ltr">priority</code> and <code dir="ltr">optimizer_cost</code> and process the highest cost statements first. Any statements added to the workload would need to include appropriate <code dir="ltr">priority</code> and <code dir="ltr">optimizer_cost</code> values. All other statistics can be defaulted or set to zero.For the statistical keys referenced by the <code dir="ltr">order_list</code> task parameter, the actual parameter values should be reasonably accurate since they will be compared to other statements in the workload. If the caller is unable to estimate values, choose values that would determine its importance relative to other statements in the workload. For example, if the current statement is considered the most critical query in your business, then an appropriate value would be anything greater than all other values for the same statistic found in the workload.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref208"></a>Examples</p>
<pre dir="ltr">DECLARE
  workload_name VARCHAR2(30);
BEGIN
  workload_name := &#39;My Workload&#39;;

  DBMS_ADVISOR.CREATE_SQLWKLD(workload_name, &#39;My Workload&#39;);
  DBMS_ADVISOR.ADD_SQLWKLD_STATEMENT(workload_name, &#39;MONTHLY&#39;, &#39;ROLLUP&#39;,
                                     100,400,5041,103,640445,680000,2,
                                     1,SYSDATE,1,&#39;SH&#39;,&#39;SELECT AVG(amount_sold) FROM sh.sales&#39;);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65091" class="refsect2"><a id="CIHHGIAJ"></a>
<h3 class="refsect2">ADD_STS_REF Procedure</h3>
<p>This procedure establishes a link between the current SQL Access Advisor task and a SQL tuning set. The link enables an advisor task to access data for the purpose of doing an analysis. The link also provides a stable view of the data. Once a connection between a SQL Access Advisor task and a SQL tuning set is made, the STS is protected from removal or modification.</p>
<p>Use <code dir="ltr">ADD_STS_REF</code> for any STS-based advisor runs. The older method of using <code dir="ltr">ADD_SQLWKLD_REF</code> with parameter <code dir="ltr">IS_STS=1</code> is only supported for backward compatibility. Furthermore, the <code dir="ltr">ADD_STS_REF</code> function accepts a SQL tuning set owner name, whereas <code dir="ltr">ADD_SQLWKLD_REF</code> does not.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref209"></a>Syntax</p>
<pre dir="ltr">DBMS_ADVISOR.ADD_STS_REF(
  task_name       IN VARCHAR2 NOT NULL,
  sts_owner       IN VARCHAR2,
  workload_name   IN VARCHAR2 NOT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref210"></a>Parameters</p>
<div id="ARPLS65092" class="tblformal">
<p class="titleintable"><a id="sthref211"></a><a id="sthref212"></a>Table 19-4 ADD_STS_REF Procedure Parameters</p>
<table class="cellalignment4330" title="ADD_STS_REF Procedure Parameters" summary="ADD_STS_REF Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t9">Parameter</th>
<th class="cellalignment4328" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t9" headers="r1c1-t9">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t9 r1c2-t9">
<p>The SQL Access Advisor task name that uniquely identifies an existing task.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t9" headers="r1c1-t9">
<p><code dir="ltr">sts_owner</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t9 r1c2-t9">
<p>The owner of the SQL tuning set. The value of this parameter may be <code dir="ltr">NULL</code>, in which case the advisor assumes the SQL tuning set to be owned by the currently logged-in user.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t9" headers="r1c1-t9">
<p><code dir="ltr">workload_name</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t9 r1c2-t9">
<p>The name of the workload to be linked. A workload consists of one or more SQL statements, plus statistics and attributes that fully describe each statement. The database stores a workload as a SQL tuning set.</p>
<p>After a workload has been linked to a task, it becomes read-only and cannot be deleted.</p>
<p>There is no limit to the number of links to workloads.</p>
<p>To remove the link to the workload, use the procedure <code dir="ltr">DBMS_ADVISOR.DELETE_STS_REF</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref213"></a>Examples</p>
<pre dir="ltr">DBMS_ADVISOR.ADD_STS_REF (&#39;My Task&#39;, &#39;SCOTT&#39;, &#39;My Workload&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65093" class="refsect2"><a id="i1001164"></a>
<h3 class="refsect2"><a id="sthref214"></a>CANCEL_TASK Procedure</h3>
<p>This procedure causes a currently executing operation to terminate. This call does a soft interrupt. It will not break into a low-level database access call like a hard interrupt such as <code dir="ltr">Ctrl-C</code>. The SQL Access Advisor periodically checks for soft interrupts and acts appropriately. As a result, this operation may take a few seconds to respond to a call.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref215"></a>Syntax</p>
<pre dir="ltr">DBMS_ADVISOR.CANCEL_TASK (
   task_name      IN  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref216"></a>Parameters</p>
<div id="ARPLS65094" class="tblformal">
<p class="titleintable"><a id="sthref217"></a><a id="sthref218"></a>Table 19-5 CANCEL_TASK Procedure Parameter</p>
<table class="cellalignment4330" title="CANCEL_TASK Procedure Parameter" summary="This table describes the parameters of DBMS_ADVISOR.CANCEL_TASK." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t10">Parameter</th>
<th class="cellalignment4328" id="r1c2-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t10" headers="r1c1-t10">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t10 r1c2-t10">
<p>A valid Advisor task name that uniquely identifies an existing task.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref219"></a>Usage Notes</p>
<p>A cancel command restores the task to its condition prior to the start of the cancelled operation. Therefore, a cancelled task or data object cannot be resumed.</p>
<p>Because all Advisor task procedures are synchronous, to cancel an operation, you must use a separate database session.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref220"></a>Examples</p>
<pre dir="ltr">DECLARE
  task_id NUMBER;
  task_name VARCHAR2(30);
  workload_name VARCHAR2(30);
BEGIN
  task_name := &#39;My Task&#39;;
  workload_name := &#39;My Workload&#39;;

  DBMS_ADVISOR.CREATE_TASK(DBMS_ADVISOR.SQLACCESS_ADVISOR, task_id, task_name);
  DBMS_ADVISOR.CANCEL_TASK(&#39;My Task&#39;);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65095" class="refsect2"><a id="CIHHBECG"></a>
<h3 class="refsect2">COPY_SQLWKLD_TO_STS Procedure</h3>
<p>This procedure copies the contents of a SQL workload object to a SQL tuning set.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref221"></a>Syntax</p>
<p>To use this procedure, the caller must have privileges to create and modify a SQL tuning set.</p>
<pre dir="ltr">DBMS_ADVISOR.COPY_SQLWKLD_TO_STS (
   workload_name         IN VARCHAR2,
   sts_name              IN VARCHAR2,
   import_mode           IN VARCHAR2 := &#39;NEW&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref222"></a>Parameters</p>
<div id="ARPLS65096" class="tblformal">
<p class="titleintable"><a id="sthref223"></a><a id="sthref224"></a>Table 19-6 COPY_SQLWKLD_TO_STS Procedure Parameter</p>
<table class="cellalignment4330" title="COPY_SQLWKLD_TO_STS Procedure Parameter" summary="COPY_SQLWKLD_TO_STS" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t11">Parameter</th>
<th class="cellalignment4328" id="r1c2-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t11" headers="r1c1-t11">
<p><code dir="ltr">workload_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t11 r1c2-t11">
<p>The SQL Workload object name to copy.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t11" headers="r1c1-t11">
<p><code dir="ltr">sts_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t11 r1c2-t11">
<p>The SQL tuning set name into which the SQL Workload object will be copied.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t11" headers="r1c1-t11">
<p><code dir="ltr">import_mode</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t11 r1c2-t11">
<p>Specifies the handling of the target SQL tuning set. Possible values are:</p>
<ul>
<li>
<p><code dir="ltr">APPEND</code></p>
<p>Causes SQL Workload data to be appended to the target SQL tuning set.</p>
</li>
<li>
<p><code dir="ltr">NEW</code></p>
<p>Indicates the SQL tuning set can only contain the copied contents. If the SQL tuning set exists and has data, an error will be reported.</p>
</li>
<li>
<p><code dir="ltr">REPLACE</code></p>
<p>Causes any existing data in the target SQL tuning set to be purged prior to the workload copy.</p>
</li>
</ul>
<p>In all cases, if the specified SQL tuning set does not exist, it will be created.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref225"></a>Usage Notes</p>
<p>To use this procedure, the caller must have privileges to create and modify a SQL tuning set.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref226"></a>Examples</p>
<pre dir="ltr">BEGIN
   DBMS_ADVISOR.COPY_SQLWKLD_TO_STS(&#39;MY_OLD_WORKLOAD&#39;, &#39;MY_NEW_STS&#39;, &#39;NEW&#39;);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65097" class="refsect2"><a id="i1010465"></a>
<h3 class="refsect2"><a id="sthref227"></a>CREATE_FILE Procedure</h3>
<p>This procedure creates an external file from a PL/SQL <code dir="ltr">CLOB</code> variable, which is used for creating scripts and reports. <code dir="ltr">CREATE_FILE</code> accepts a <code dir="ltr">CLOB</code> input parameter and writes the character string contents to the specified file.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref228"></a>Syntax</p>
<pre dir="ltr">DBMS_ADVISOR.CREATE_FILE (
   buffer       IN  CLOB,
   location     IN  VARCHAR2,
   filename     IN  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref229"></a>Parameters</p>
<div id="ARPLS65098" class="tblformal">
<p class="titleintable"><a id="sthref230"></a><a id="sthref231"></a>Table 19-7 CREATE_FILE Procedure Parameters</p>
<table class="cellalignment4330" title="CREATE_FILE Procedure Parameters" summary="This table describes the parameters of DBMS_ADVISOR.CREATE_FILE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t12">Parameter</th>
<th class="cellalignment4328" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t12" headers="r1c1-t12">
<p><code dir="ltr">buffer</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t12 r1c2-t12">
<p>A <code dir="ltr">CLOB</code> buffer containing report or script information.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t12" headers="r1c1-t12">
<p><code dir="ltr">location</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t12 r1c2-t12">
<p>Specifies the directory that will contain the new file. You must use the directory alias as defined by the <code dir="ltr">CREATE</code> <code dir="ltr">DIRECTORY</code> statement. The Advisor will translate the alias into the actual directory location.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t12" headers="r1c1-t12">
<p><code dir="ltr">filename</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t12 r1c2-t12">
<p>Specifies the output file to receive the script commands. The filename can only contain the name and an optional file type of the form <code dir="ltr">filename.filetype</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref232"></a>Usage Notes</p>
<p>All formatting must be embedded within the <code dir="ltr">CLOB</code>.</p>
<p>The Oracle server restricts file access within Oracle Stored Procedures. This means that file locations and names must adhere to the known file permissions in the server.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref233"></a>Examples</p>
<pre dir="ltr">CREATE DIRECTORY MY_DIR as &#39;/homedir/user4/gssmith&#39;;
GRANT READ,WRITE ON DIRECTORY MY_DIR TO PUBLIC;

DECLARE
  task_id NUMBER;
  task_name VARCHAR2(30);
  workload_name VARCHAR2(30);
BEGIN
  task_name := &#39;My Task&#39;;
  workload_name := &#39;My Workload&#39;;

  DBMS_ADVISOR.CREATE_TASK(DBMS_ADVISOR.SQLACCESS_ADVISOR, task_id, task_name);
  DBMS_ADVISOR.CREATE_SQLWKLD(workload_name, &#39;My Workload&#39;);
  DBMS_ADVISOR.ADD_SQLWKLD_REF(task_name, workload_name);
  DBMS_ADVISOR.ADD_SQLWKLD_STATEMENT(workload_name, &#39;MONTHLY&#39;, &#39;ROLLUP&#39;,
                                     100,400,5041,103,640445,680000,2,
                                     1,SYSDATE,1,&#39;SH&#39;,&#39;SELECT AVG(amount_sold)
                                     FROM sh.sales&#39;);
  DBMS_ADVISOR.EXECUTE_TASK(task_name);
  DBMS_ADVISOR.CREATE_FILE(DBMS_ADVISOR.GET_TASK_SCRIPT(task_name),
    &#39;MY_DIR&#39;,&#39;script.sql&#39;);

END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65099" class="refsect2"><a id="i1017650"></a>
<h3 class="refsect2"><a id="sthref234"></a>CREATE_OBJECT Procedure</h3>
<p>This procedure creates a new task object.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref235"></a>Syntax</p>
<pre dir="ltr">DBMS_ADVISOR.CREATE_OBJECT (
   task_name         IN VARCHAR2,
   object_type       IN VARCHAR2,
   attr1             IN VARCHAR2 :=  NULL,
   attr2             IN VARCHAR2 :=  NULL,
   attr3             IN VARCHAR2 :=  NULL,
   attr4             IN CLOB     :=  NULL,
   object_id         OUT NUMBER);

DBMS_ADVISOR.CREATE_OBJECT (
   task_name         IN VARCHAR2,
   object_type       IN VARCHAR2,
   attr1             IN VARCHAR2 :=  NULL,
   attr2             IN VARCHAR2 :=  NULL,
   attr3             IN VARCHAR2 :=  NULL,
   attr4             IN CLOB     :=  NULL,
   attr5             IN VARCHAR2 :=  NULL,
   object_id         OUT NUMBER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref236"></a>Parameters</p>
<div id="ARPLS65100" class="tblformal">
<p class="titleintable"><a id="sthref237"></a><a id="sthref238"></a>Table 19-8 CREATE_OBJECT Procedure Parameters</p>
<table class="cellalignment4330" title="CREATE_OBJECT Procedure Parameters" summary="This table describes the parameters of DBMS_ADVISOR.CREATE_OBJECT." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t13">Parameter</th>
<th class="cellalignment4328" id="r1c2-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t13" headers="r1c1-t13">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t13 r1c2-t13">
<p>A valid Advisor task name that uniquely identifies an existing task.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t13" headers="r1c1-t13">
<p><code dir="ltr">object_type</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t13 r1c2-t13">
<p>Specifies the external object type.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t13" headers="r1c1-t13">
<p><code dir="ltr">attr1</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t13 r1c2-t13">
<p>Advisor-specific data.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t13" headers="r1c1-t13">
<p><code dir="ltr">attr2</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t13 r1c2-t13">
<p>Advisor-specific data.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t13" headers="r1c1-t13">
<p><code dir="ltr">attr3</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t13 r1c2-t13">
<p>Advisor-specific data.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t13" headers="r1c1-t13">
<p><code dir="ltr">attr4</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t13 r1c2-t13">
<p>Advisor-specific data.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t13" headers="r1c1-t13">
<p><code dir="ltr">attr5</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t13 r1c2-t13">
<p>Advisor-specific data.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t13" headers="r1c1-t13">
<p><code dir="ltr">object_id</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t13 r1c2-t13">
<p>The advisor-assigned object identifier.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>The attribute parameters have different values depending upon the object type. See <a class="olink ADMIN01401" href="../ADMIN/schema.htm#ADMIN01401"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> for details regarding these parameters and object types.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref239"></a>Return Values</p>
<p>Returns the new object identifier.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref240"></a>Usage Notes</p>
<p>Task objects are typically used as input data for a particular advisor. Segment advice can be generated at the object, segment, or tablespace level. If for the object level, advice is generated on all partitions of the object (if the object is partitioned). The advice is not cascaded to any dependent objects. If for the segment level, advice can be obtained on a single segment, such as the partition or subpartition of a table, index, or <code dir="ltr">LOB</code> column. If for a tablespace level, target advice for every segment in the tablespace will be generated.</p>
<p>See <a class="olink ADMIN01401" href="../ADMIN/schema.htm#ADMIN01401"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> for further information regarding the Segment Advisor.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref241"></a>Examples</p>
<pre dir="ltr">DECLARE
  task_id NUMBER;
  task_name VARCHAR2(30);
  obj_id NUMBER;
BEGIN
  task_name := &#39;My Task&#39;;

  DBMS_ADVISOR.CREATE_TASK(DBMS_ADVISOR.SQLACCESS_ADVISOR, task_id, task_name);
  DBMS_ADVISOR.CREATE_OBJECT (task_name,&#39;SQL&#39;,NULL,NULL,NULL,
                              &#39;SELECT * FROM SH.SALES&#39;,obj_id);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65101" class="refsect2"><a id="i1010608"></a>
<h3 class="refsect2"><a id="sthref242"></a>CREATE_SQLWKLD Procedure</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
This procedure is deprecated starting in Oracle Database 11<span class="italic">g</span>.</div>
<p>This procedure creates a new private SQL Workload object for the user. A SQL Workload object manages a SQL workload on behalf of the SQL Access Advisor. A SQL Workload object must exist prior to performing any other SQL Workload operations, such as importing or updating SQL statements.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref243"></a>Syntax</p>
<pre dir="ltr">DBMS_ADVISOR.CREATE_SQLWKLD (
   workload_name            IN OUT VARCHAR2,
   description              IN VARCHAR2 := NULL,
   template                 IN VARCHAR2 := NULL,
   is_template              IN VARCHAR2 := &#39;FALSE&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref244"></a>Parameters</p>
<div id="ARPLS65102" class="tblformal">
<p class="titleintable"><a id="sthref245"></a><a id="sthref246"></a>Table 19-9 CREATE_SQLWKLD Procedure Parameters</p>
<table class="cellalignment4330" title="CREATE_SQLWKLD Procedure Parameters" summary="This table describes the parameters of DBMS_ADVISOR.CREATE_SQLWKLD." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t15">Parameter</th>
<th class="cellalignment4328" id="r1c2-t15">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t15" headers="r1c1-t15">
<p><code dir="ltr">workload_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t15 r1c2-t15">
<p>A name that uniquely identifies the created workload. If not specified, the system will generate a unique name. Names can be up to 30 characters long.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t15" headers="r1c1-t15">
<p><code dir="ltr">description</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t15 r1c2-t15">
<p>Specifies an optional workload description. Descriptions can be up to 256 characters.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t15" headers="r1c1-t15">
<p><code dir="ltr">template</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t15 r1c2-t15">
<p>An optional SQL Workload name of an existing workload data object or data object template.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t15" headers="r1c1-t15">
<p><code dir="ltr">is_template</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t15 r1c2-t15">
<p>An optional value that enables you to set the newly created workload as a template. Valid values are <code dir="ltr">TRUE</code> and <code dir="ltr">FALSE</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref247"></a>Return Values</p>
<p>The SQL Access Advisor returns a unique workload object identifier number that must be used for subsequent activities within the new SQL Workload object.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref248"></a>Usage Notes</p>
<p>By default, workload objects are created using built-in default settings. To create a workload using the parameter settings of an existing workload or workload template, the user may specify an existing workload name.</p>
<p>After a SQL Workload object is present, it can then be referenced by one or more SQL Access Advisor tasks using the <code dir="ltr">ADD_SQLWKLD_REF</code> procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref249"></a>Examples</p>
<pre dir="ltr">DECLARE
  workload_name VARCHAR2(30);
BEGIN
  workload_name := &#39;My Workload&#39;;

  DBMS_ADVISOR.CREATE_SQLWKLD(workload_name, &#39;My Workload&#39;);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65103" class="refsect2"><a id="i1001232"></a>
<h3 class="refsect2"><a id="sthref250"></a>CREATE_TASK Procedures</h3>
<p>This procedure creates a new Advisor task in the repository.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref251"></a>Syntax</p>
<pre dir="ltr">DBMS_ADVISOR.CREATE_TASK (
   advisor_name          IN VARCHAR2,
   task_id               OUT NUMBER,
   task_name             IN OUT VARCHAR2,
   task_desc             IN VARCHAR2 := NULL,
   template              IN VARCHAR2 := NULL,
   is_template           IN VARCHAR2 := &#39;FALSE&#39;,
   how_created           IN VARCHAR2 := NULL);

DBMS_ADVISOR.CREATE_TASK (
   advisor_name          IN VARCHAR2,
   task_name             IN VARCHAR2,
   task_desc             IN VARCHAR2 := NULL,
   template              IN VARCHAR2 := NULL,
   is_template           IN VARCHAR2 := &#39;FALSE&#39;,
   how_created           IN VARCHAR2 := NULL);

DBMS_ADVISOR.CREATE_TASK (
   parent_task_name      IN VARCHAR2,
   rec_id                IN NUMBER,
   task_id               OUT NUMBER,
   task_name             IN OUT VARCHAR2,
   task_desc             IN VARCHAR2,
   template              IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref252"></a>Parameters</p>
<div id="ARPLS65104" class="tblformal">
<p class="titleintable"><a id="sthref253"></a><a id="sthref254"></a>Table 19-10 CREATE_TASK Procedure Parameters</p>
<table class="cellalignment4330" title="CREATE_TASK Procedure Parameters" summary="This table describes the parameters of DBMS_ADVISOR.CREATE_TASK." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t16">Parameter</th>
<th class="cellalignment4328" id="r1c2-t16">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t16" headers="r1c1-t16">
<p><code dir="ltr">advisor_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t16 r1c2-t16">
<p>Specifies the unique advisor name as defined in the view <code dir="ltr">DBA_ADVISOR_DEFINITIONS</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t16" headers="r1c1-t16">
<p><code dir="ltr">task_id</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t16 r1c2-t16">
<p>A number that uniquely identifies the created task. The number is generated by the procedure and returned to the user.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t16" headers="r1c1-t16">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t16 r1c2-t16">
<p>Specifies a new task name. Names must be unique among all tasks for the user.</p>
<p>When using the second form of the <code dir="ltr">CREATE_TASK</code> syntax listed above (with <code dir="ltr">OUT</code>), a unique name can be generated. Names can be up to 30 characters long.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t16" headers="r1c1-t16">
<p><code dir="ltr">task_desc</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t16 r1c2-t16">
<p>Specifies an optional task description. Descriptions can be up to 256 characters in length.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t16" headers="r1c1-t16">
<p><code dir="ltr">template</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t16 r1c2-t16">
<p>An optional task name of an existing task or task template. To specify built-in SQL Access Advisor templates, use the template name as described earlier.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t16" headers="r1c1-t16">
<p><code dir="ltr">is_template</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t16 r1c2-t16">
<p>An optional value that allows the user to set the newly created task as template. Valid values are: <code dir="ltr">TRUE</code> and <code dir="ltr">FALSE</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t16" headers="r1c1-t16">
<p><code dir="ltr">how_created</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t16 r1c2-t16">
<p>An optional value that identifies how the source was created.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref255"></a>Return Values</p>
<p>Returns a unique task ID number and a unique task name if one is not specified.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref256"></a>Usage Notes</p>
<p>A task must be associated with an advisor, and once the task has been created, it is permanently associated with the original advisor. By default, tasks are created using built-in default settings. To create a task using the parameter settings of an existing task or task template, the user may specify an existing task name.</p>
<p>For the SQL Access Advisor, use the identifier <code dir="ltr">DBMS_ADVISOR.SQLACCESS_ADVISOR</code> as the <code dir="ltr">advisor_name</code>.</p>
<p>The SQL Access Advisor provides three built-in task templates, using the following constants:</p>
<ul>
<li>
<p><code dir="ltr">DBMS_ADVISOR.SQLACCESS_OLTP</code></p>
<p>Parameters are preset to favor an OLTP application environment.</p>
</li>
<li>
<p><code dir="ltr">DBMS_ADVISOR.SQLACCESS_WAREHOUSE</code></p>
<p>Parameters are preset to favor a data warehouse application environment.</p>
</li>
<li>
<p><code dir="ltr">DBMS_ADVISOR.SQLACCESS_GENERAL</code></p>
<p>Parameters are preset to favor a hybrid application environment where both OLTP and data warehouse operations may occur. For the SQL Access Advisor, this is the default template.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref257"></a>Examples</p>
<pre dir="ltr">DECLARE
  task_id NUMBER;
  task_name VARCHAR2(30);
BEGIN
  task_name := &#39;My Task&#39;;
  DBMS_ADVISOR.CREATE_TASK(DBMS_ADVISOR.SQLACCESS_ADVISOR, task_id, task_name);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65105" class="refsect2"><a id="i1014034"></a>
<h3 class="refsect2"><a id="sthref258"></a>DELETE_SQLWKLD Procedure</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
This procedure is deprecated starting in Oracle Database 11<span class="italic">g</span>.</div>
<p>This procedure deletes an existing SQL Workload object from the repository.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref259"></a>Syntax</p>
<pre dir="ltr">DBMS_ADVISOR.DELETE_SQLWKLD (
   workload_name        IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref260"></a>Parameters</p>
<div id="ARPLS65106" class="tblformal">
<p class="titleintable"><a id="sthref261"></a><a id="sthref262"></a>Table 19-11 DELETE_SQLWKLD Procedure Parameters</p>
<table class="cellalignment4330" title="DELETE_SQLWKLD Procedure Parameters" summary="This table describes the parameters of DBMS_ADVISOR.DELETE_SQLWKLD." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t18">Parameter</th>
<th class="cellalignment4328" id="r1c2-t18">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t18" headers="r1c1-t18">
<p><code dir="ltr">workload_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t18 r1c2-t18">
<p>The workload object name that uniquely identifies an existing workload. The wildcard <code dir="ltr">%</code> is supported as a <code dir="ltr">WORKLOAD_NAME</code>. The rules of use are identical to the <code dir="ltr">LIKE</code> operator. For example, to delete all tasks for the current user, use the wildcard <code dir="ltr">%</code> as the <code dir="ltr">WORKLOAD_NAME</code>. If a wildcard is provided, the <code dir="ltr">DELETE_SQLWKLD</code> operation will not delete any workloads marked as <code dir="ltr">READ_ONLY</code> or <code dir="ltr">TEMPLATE</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref263"></a>Usage Notes</p>
<p>A workload cannot be modified or deleted if it is currently referenced by an active task. A task is considered active if it is not in its initial state. See the <a href="#i1001339">RESET_TASK Procedure</a> to set a task to its initial state.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref264"></a>Examples</p>
<pre dir="ltr">DECLARE
  workload_name VARCHAR2(30);
BEGIN
  workload_name := &#39;My Workload&#39;;

  DBMS_ADVISOR.CREATE_SQLWKLD(workload_name, &#39;My Workload&#39;);
  DBMS_ADVISOR.DELETE_SQLWKLD(workload_name);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65107" class="refsect2"><a id="i1011747"></a>
<h3 class="refsect2"><a id="sthref265"></a>DELETE_SQLWKLD_REF Procedure</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
This procedure is deprecated starting in Oracle Database 11<span class="italic">g</span>.</div>
<p>This procedure removes a link between the current SQL Access task and a SQL Workload data object.</p>
<p>Use <code dir="ltr">DELETE_STS_REF</code> instead of <code dir="ltr">DELETE_SQLWKLD_REF</code> for all SQL tuning set-based advisor runs. This function is only provided for backward compatibility.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref266"></a>Syntax</p>
<pre dir="ltr">DBMS_ADVISOR.DELETE_SQLWKLD_REF (
   task_name              IN VARCHAR2,
   workload_name          IN VARCHAR2,
   is_sts                 IN NUMBER :=0);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref267"></a>Parameters</p>
<div id="ARPLS65108" class="tblformal">
<p class="titleintable"><a id="sthref268"></a><a id="sthref269"></a>Table 19-12 DELETE_SQLWKLD_REF Procedure Parameters</p>
<table class="cellalignment4330" title="DELETE_SQLWKLD_REF Procedure Parameters" summary="This table describes the parameters of DBMS_ADVISOR.DELETE_SQLWKLD_REF." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t20">Parameter</th>
<th class="cellalignment4328" id="r1c2-t20">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t20" headers="r1c1-t20">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t20 r1c2-t20">
<p>The SQL Access task name that uniquely identifies an existing task.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t20" headers="r1c1-t20">
<p><code dir="ltr">workload_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t20 r1c2-t20">
<p>The name of the workload object to be unlinked. The wildcard <code dir="ltr">%</code> is supported as a <code dir="ltr">workload_name</code>. The rules of use are identical to the <code dir="ltr">LIKE</code> operator. For example, to remove all links to workload objects, use the wildcard <code dir="ltr">%</code> as the <code dir="ltr">workload_name</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t20" headers="r1c1-t20">
<p><code dir="ltr">is_sts</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t20 r1c2-t20">
<p>Indicates the type of workload source. Possible values are:</p>
<ul>
<li>
<p>0 - SQL workload object</p>
</li>
<li>
<p>1 - SQL tuning set</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref270"></a>Examples</p>
<pre dir="ltr">DECLARE
  task_id NUMBER;
  task_name VARCHAR2(30);
  workload_name VARCHAR2(30);
BEGIN
  task_name := &#39;My Task&#39;;
  workload_name := &#39;My Workload&#39;;

  DBMS_ADVISOR.CREATE_TASK(DBMS_ADVISOR.SQLACCESS_ADVISOR, task_id, task_name);
  DBMS_ADVISOR.ADD_SQLWKLD_REF(task_name, workload_name);
  DBMS_ADVISOR.DELETE_SQLWKLD_REF(task_name, workload_name);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65109" class="refsect2"><a id="i1010722"></a>
<h3 class="refsect2"><a id="sthref271"></a>DELETE_SQLWKLD_STATEMENT Procedures</h3>
<p>This procedure has been deprecated.</p>
<p>This procedure deletes one or more statements from a workload.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref272"></a>Syntax</p>
<pre dir="ltr">DBMS_ADVISOR.DELETE_SQLWKLD_STATEMENT (
   workload_name        IN VARCHAR2,
   sql_id               IN NUMBER);

DBMS_ADVISOR.DELETE_SQLWKLD_STATEMENT (
   workload_name        IN VARCHAR2,
   search               IN VARCHAR2,
   deleted              OUT NUMBER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref273"></a>Parameters</p>
<div id="ARPLS65110" class="tblformal">
<p class="titleintable"><a id="sthref274"></a><a id="sthref275"></a>Table 19-13 DELETE_SQLWKLD_STATEMENT Procedure Parameters</p>
<table class="cellalignment4330" title="DELETE_SQLWKLD_STATEMENT Procedure Parameters" summary="This table describes the parameters of DBMS_ADVISOR.DELETE_SQLWKLD_STATEMENT." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t21">Parameter</th>
<th class="cellalignment4328" id="r1c2-t21">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t21" headers="r1c1-t21">
<p><code dir="ltr">workload_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t21 r1c2-t21">
<p>The workload object name that uniquely identifies an existing workload.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t21" headers="r1c1-t21">
<p><code dir="ltr">sql_id</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t21 r1c2-t21">
<p>The Advisor-generated identifier number that is assigned to the statement. To specify all workload statements, use the constant <code dir="ltr">ADVISOR_ALL</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t21" headers="r1c1-t21">
<p><code dir="ltr">search</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t21 r1c2-t21">
<p>Disabled.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t21" headers="r1c1-t21">
<p><code dir="ltr">deleted</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t21 r1c2-t21">
<p>Returns the number of statements deleted by the searched deleted operation.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref276"></a>Usage Notes</p>
<p>A workload cannot be modified or deleted if it is currently referenced by an active task. A task is considered active if it is not in its initial state. See the <a href="#i1001339">RESET_TASK Procedure</a> to set a task to its initial state.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref277"></a>Examples</p>
<pre dir="ltr">DECLARE
  workload_name VARCHAR2(30);
  deleted NUMBER;
  id NUMBER;
BEGIN
  workload_name := &#39;My Workload&#39;;

  DBMS_ADVISOR.CREATE_SQLWKLD(workload_name, &#39;My Workload&#39;);
  DBMS_ADVISOR.ADD_SQLWKLD_STATEMENT(workload_name, &#39;YEARLY&#39;, &#39;ROLLUP&#39;,
                                     100,400,5041,103,640445,680000,2,
                                     1,SYSDATE,1,&#39;SH&#39;,&#39;SELECT AVG(amount_sold)
                                     FROM sh.sales&#39;);

   SELECT sql_id INTO id FROM USER_ADVISOR_SQLW_STMTS
   WHERE workload_name = &#39;My Workload&#39;;

  DBMS_ADVISOR.DELETE_SQLWKLD_STATEMENT(workload_name, id);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65111" class="refsect2"><a id="CIHDFCBE"></a>
<h3 class="refsect2">DELETE_STS_REF Procedure</h3>
<p>This procedure removes a link between the current SQL Access Advisor task and a SQL tuning set.Use <code dir="ltr">DELETE_STS_REF</code> for any STS-based advisor runs. The older method of using <code dir="ltr">DELETE_SQLWKLD_REF</code> with parameter <code dir="ltr">IS_STS=1</code> is only supported for backward compatibility. Furthermore, the <code dir="ltr">DELETE_STS_REF</code> function accepts an STS owner name, whereas <code dir="ltr">DELETE_SQLWKLD_REF</code> does not.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref278"></a>Syntax</p>
<pre dir="ltr">DBMS_ADVISOR.DELETE_STS_REF (
  task_name      IN VARCHAR2 NOT NULL,
  sts_owner      IN VARCHAR2,
  workload_name  IN VARCHAR2 NOT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref279"></a>Parameters</p>
<div id="ARPLS65112" class="tblformal">
<p class="titleintable"><a id="sthref280"></a><a id="sthref281"></a>Table 19-14 DELETE_STS_REF Procedure Parameters</p>
<table class="cellalignment4330" title="DELETE_STS_REF Procedure Parameters" summary="DELETE_STS_REF Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t22">Parameter</th>
<th class="cellalignment4328" id="r1c2-t22">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t22" headers="r1c1-t22">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t22 r1c2-t22">
<p>The SQL Access Advisor task name that uniquely identifies an existing task.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t22" headers="r1c1-t22">
<p><code dir="ltr">sts_owner</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t22 r1c2-t22">
<p>The owner of the SQL tuning set. The value of this parameter may be <code dir="ltr">NULL</code>, in which case the advisor assumes the SQL tuning set to be owned by the currently logged-in user.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t22" headers="r1c1-t22">
<p><code dir="ltr">workload_name</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t22 r1c2-t22">
<p>The name of the workload to be unlinked. A workload consists of one or more SQL statements, plus statistics and attributes that fully describe each statement. The database stores a workload as a SQL tuning set.</p>
<p>The wildcard <code dir="ltr">%</code> is supported as a workload name. The rules of use are identical to the SQL <code dir="ltr">LIKE</code> operator. For example, to remove all links to SQL tuning set objects, use the wildcard <code dir="ltr">%</code> as the <code dir="ltr">STS_NAME</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref282"></a>Examples</p>
<pre dir="ltr">DBMS_ADVISOR.DELETE_STS_REF (&#39;My task&#39;, &#39;SCOTT&#39;, &#39;My workload&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65113" class="refsect2"><a id="i1004958"></a>
<h3 class="refsect2"><a id="sthref283"></a>DELETE_TASK Procedure</h3>
<p>This procedure deletes an existing task from the repository.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref284"></a>Syntax</p>
<pre dir="ltr">DBMS_ADVISOR.DELETE_TASK (
   task_name          IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref285"></a>Parameters</p>
<div id="ARPLS65114" class="tblformal">
<p class="titleintable"><a id="sthref286"></a><a id="sthref287"></a>Table 19-15 DELETE_TASK Procedure Parameters</p>
<table class="cellalignment4330" title="DELETE_TASK Procedure Parameters" summary="This table describes the parameters of DBMS_ADVISOR.DELETE_TASK." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t23">Parameter</th>
<th class="cellalignment4328" id="r1c2-t23">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t23" headers="r1c1-t23">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t23 r1c2-t23">
<p>A single Advisor task name that will be deleted from the repository.</p>
<p>The wildcard <code dir="ltr">%</code> is supported as a <code dir="ltr">TASK_NAME</code>. The rules of use are identical to the <code dir="ltr">LIKE</code> operator. For example, to delete all tasks for the current user, use the wildcard <code dir="ltr">%</code> as the <code dir="ltr">TASK_NAME</code>.</p>
<p>If a wildcard is provided, the <code dir="ltr">DELETE_TASK</code> operation will not delete any tasks marked as <code dir="ltr">READ_ONLY</code> or <code dir="ltr">TEMPLATE</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref288"></a>Examples</p>
<pre dir="ltr">DECLARE
  task_id NUMBER;
  task_name VARCHAR2(30);
BEGIN
  task_name := &#39;My Task&#39;;

  DBMS_ADVISOR.CREATE_TASK(DBMS_ADVISOR.SQLACCESS_ADVISOR, task_id, task_name);
  DBMS_ADVISOR.DELETE_TASK(task_name);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65115" class="refsect2"><a id="CIHDFJHD"></a>
<h3 class="refsect2"><a id="sthref289"></a>EXECUTE_TASK Procedure</h3>
<p>This procedure performs the Advisor analysis or evaluation for the specified task. The procedure is overloaded.</p>
<p>The execution-related arguments are optional and you do not need to set them for advisors that do not allow their tasks to be executed multiple times.</p>
<p>Advisors can execute a task multiple times and use the results for further processing and analysis.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref290"></a>Syntax</p>
<pre dir="ltr">DBMS_ADVISOR.EXECUTE_TASK (
   task_name          IN VARCHAR2);

DBMS_ADVISOR.EXECUTE_TASK (
   task_name         IN VARCHAR2,
   execution_type    IN VARCHAR2             := NULL,
   execution_name    IN VARCHAR2             := NULL,
   execution_params  IN dbms_advisor.argList := NULL,
   execution_desc    IN VARCHAR2             := NULL,
RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref291"></a>Parameters</p>
<div id="ARPLS65116" class="tblformal">
<p class="titleintable"><a id="sthref292"></a><a id="sthref293"></a>Table 19-16 EXECUTE_TASK Procedure Parameters</p>
<table class="cellalignment4330" title="EXECUTE_TASK Procedure Parameters" summary="This table describes the parameters of DBMS_ADVISOR.EXECUTE_TASK." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t24">Parameter</th>
<th class="cellalignment4328" id="r1c2-t24">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t24" headers="r1c1-t24">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t24 r1c2-t24">
<p>The task name that uniquely identifies an existing task.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t24" headers="r1c1-t24">
<p><code dir="ltr">execution_type</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t24 r1c2-t24">
<p>The type of action to be performed by the function. If <code dir="ltr">NULL</code>, it will default to the value of the <code dir="ltr">DEFAULT_EXECUTION_TYPE</code> parameter.</p>
<p>As an example, the SQL Performance Analyzer accepts the following possible values:</p>
<ul>
<li>
<p><code dir="ltr">EXPLAIN PLAN</code>: Generate an explain plan for a SQL statement. This is similar to an <code dir="ltr">EXPLAIN</code> <code dir="ltr">PLAN</code> command. The resulting plans will be stored in the advisor framework in association with the task.</p>
</li>
<li>
<p><code dir="ltr">TEST EXECUTE</code>: Test execute the SQL statement and collect its execute plan and statistics. The resulting plans and statistics are stored in the advisor framework.</p>
</li>
<li>
<p><code dir="ltr">ANALYZE PERFORMANCE</code>: Analyze and compare two versions of SQL performance data. The performance data is generated by test executing a SQL statement or generating its explain plan.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t24" headers="r1c1-t24">
<p><code dir="ltr">execution_name</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t24 r1c2-t24">
<p>A name to qualify and identify an execution. If not specified, it will be generated by the Advisor and returned by function.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t24" headers="r1c1-t24">
<p><code dir="ltr">execution_params</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t24 r1c2-t24">
<p>A list of parameters (name, value) for the specified execution. Note that execution parameters are real task parameters, but they affect only the execution they are specified for.</p>
<p>As an example, consider the following:</p>
<pre dir="ltr">DBMS_ADVISOR.ARGLIST(&#39;time_limit&#39;, 12, &#39;username&#39;, &#39;hr&#39;)
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t24" headers="r1c1-t24">
<p><code dir="ltr">execution_desc</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t24 r1c2-t24">
<p>A 256-length string describing the execution.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref294"></a>Usage Notes</p>
<p>Task execution is a synchronous operation. Control will not be returned to the caller until the operation has completed, or a user-interrupt was detected.</p>
<p>Upon return, you can check the <code dir="ltr">DBA_ADVISOR_LOG</code> table for the execution status.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref295"></a>Examples</p>
<pre dir="ltr">DECLARE
  task_id NUMBER;
  task_name VARCHAR2(30);
  workload_name VARCHAR2(30);
BEGIN
  task_name := &#39;My Task&#39;;
  workload_name := &#39;My Workload&#39;;

  DBMS_ADVISOR.CREATE_TASK(DBMS_ADVISOR.SQLACCESS_ADVISOR, task_id, task_name);
  DBMS_ADVISOR.ADD_SQLWKLD_REF(task_name, workload_name);
  DBMS_ADVISOR.EXECUTE_TASK(task_name);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65117" class="refsect2"><a id="i1012416"></a>
<h3 class="refsect2"><a id="sthref296"></a>GET_REC_ATTRIBUTES Procedure</h3>
<p>This procedure retrieves a specified attribute of a new object as recommended by Advisor analysis.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref297"></a>Syntax</p>
<pre dir="ltr">DBMS_ADVISOR.GET_REC_ATTRIBUTES (
   workload_name         IN VARCHAR2,
   rec_id                IN NUMBER,
   action_id             IN NUMBER,
   attribute_name        IN VARCHAR2,
   value                 OUT VARCHAR2,
   owner_name            IN VARCHAR2 := NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref298"></a>Parameters</p>
<div id="ARPLS65118" class="tblformal">
<p class="titleintable"><a id="sthref299"></a><a id="sthref300"></a>Table 19-17 GET_REC_ATTRIBUTES Procedure Parameters</p>
<table class="cellalignment4330" title="GET_REC_ATTRIBUTES Procedure Parameters" summary="This table describes the parameters of DBMS_ADVISOR.GET_REC_ATTRIBUTES." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t25">Parameter</th>
<th class="cellalignment4328" id="r1c2-t25">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t25" headers="r1c1-t25">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t25 r1c2-t25">
<p>The task name that uniquely identifies an existing task.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t25" headers="r1c1-t25">
<p><code dir="ltr">rec_id</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t25 r1c2-t25">
<p>The Advisor-generated identifier number that is assigned to the recommendation.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t25" headers="r1c1-t25">
<p><code dir="ltr">action_id</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t25 r1c2-t25">
<p>The Advisor-generated action identifier that is assigned to the particular command.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t25" headers="r1c1-t25">
<p><code dir="ltr">attribute_name</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t25 r1c2-t25">
<p>Specifies the attribute to change.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t25" headers="r1c1-t25">
<p><code dir="ltr">value</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t25 r1c2-t25">
<p>The buffer to receive the requested attribute value.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t25" headers="r1c1-t25">
<p><code dir="ltr">owner_name</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t25 r1c2-t25">
<p>Optional owner name of the target task. This permits access to task data not owned by the current user.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref301"></a>Return Values</p>
<p>The requested attribute value is returned in the <code dir="ltr">VALUE</code> argument.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref302"></a>Examples</p>
<pre dir="ltr">DECLARE
  task_id NUMBER;
  task_name VARCHAR2(30);
  workload_name VARCHAR2(30);
  attribute VARCHAR2(100);
BEGIN
  task_name := &#39;My Task&#39;;
  workload_name := &#39;My Workload&#39;;
  DBMS_ADVISOR.CREATE_TASK(DBMS_ADVISOR.SQLACCESS_ADVISOR, task_id, task_name);
  DBMS_ADVISOR.CREATE_SQLWKLD(workload_name, &#39;My Workload&#39;);
  DBMS_ADVISOR.ADD_SQLWKLD_REF(task_name, workload_name);
  DBMS_ADVISOR.ADD_SQLWKLD_STATEMENT(workload_name, &#39;MONTHLY&#39;, &#39;ROLLUP&#39;,
                                     100,400,5041,103,640445,680000,2,
                                     1,SYSDATE,1,&#39;SH&#39;,&#39;SELECT AVG(amount_sold)
                                     FROM sh.sales WHERE promo_id = 10&#39;);
  DBMS_ADVISOR.EXECUTE_TASK(task_name);
  DBMS_ADVISOR.GET_REC_ATTRIBUTES(task_name, 1, 1, &#39;NAME&#39;, attribute);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65119" class="refsect2"><a id="BCFDFJDJ"></a>
<h3 class="refsect2"><a id="sthref303"></a>GET_TASK_REPORT Function</h3>
<p>This function creates and returns a report for the specified task.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref304"></a>Syntax</p>
<pre dir="ltr">DBMS_ADVISOR.GET_TASK_REPORT (
   task_name      IN VARCHAR2,
   type           IN VARCHAR2 := &#39;TEXT&#39;,
   level          IN VARCHAR2 := &#39;TYPICAL&#39;,
   section        IN VARCHAR2 := &#39;ALL&#39;,
   owner_name     IN VARCHAR2 := NULL,
   execution_name IN VARCHAR2 := NULL,
   object_id      IN NUMBER   := NULL)
RETURN CLOB;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref305"></a>Parameters</p>
<div id="ARPLS65120" class="tblformal">
<p class="titleintable"><a id="sthref306"></a><a id="sthref307"></a>Table 19-18 GET_TASK_REPORT Function Parameters</p>
<table class="cellalignment4330" title="GET_TASK_REPORT Function Parameters" summary="This table describes the parameters of DBMS_ADVISOR.GET_TASK_REPORT." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t26">Parameter</th>
<th class="cellalignment4328" id="r1c2-t26">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t26" headers="r1c1-t26">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t26 r1c2-t26">
<p>The name of the task from which the script will be created.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t26" headers="r1c1-t26">
<p><code dir="ltr">type</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t26 r1c2-t26">
<p>The only valid value is <code dir="ltr">TEXT</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t26" headers="r1c1-t26">
<p><code dir="ltr">level</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t26 r1c2-t26">
<p>The possible values are <code dir="ltr">BASIC</code>, <code dir="ltr">TYPICAL</code>, and <code dir="ltr">ALL</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t26" headers="r1c1-t26">
<p><code dir="ltr">section</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t26 r1c2-t26">
<p>Advisor-specific report sections.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t26" headers="r1c1-t26">
<p><code dir="ltr">owner_name</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t26 r1c2-t26">
<p>Owner of the task. If specified, the system will check to see if the current user has read privileges to the task data.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t26" headers="r1c1-t26">
<p><code dir="ltr">execution_name</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t26 r1c2-t26">
<p>An identifier of a specific execution of the task. It is needed only for advisors that allow their tasks to be executed multiple times.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t26" headers="r1c1-t26">
<p><code dir="ltr">object_id</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t26 r1c2-t26">
<p>An identifier of an advisor object that can be targeted by the script.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref308"></a>Return Values</p>
<p>Returns the buffer receiving the script.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65121" class="refsect2"><a id="i1012023"></a>
<h3 class="refsect2"><a id="sthref309"></a>GET_TASK_SCRIPT Function</h3>
<p>This function creates a SQL*Plus-compatible SQL script and sends the output to file. The script will contain all of the accepted recommendations from the specified task.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref310"></a>Syntax</p>
<pre dir="ltr">DBMS_ADVISOR.GET_TASK_SCRIPT (
   task_name          IN VARCHAR2
   type               IN VARCHAR2 := &#39;IMPLEMENTATION&#39;,
   rec_id             IN NUMBER   := NULL,
   act_id             IN NUMBER   := NULL,
   owner_name         IN VARCHAR2 := NULL,
   execution_name     IN VARCHAR2 := NULL,
   object_id          IN NUMBER   := NULL)
RETURN CLOB;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref311"></a>Parameters</p>
<div id="ARPLS65122" class="tblformal">
<p class="titleintable"><a id="sthref312"></a><a id="sthref313"></a>Table 19-19 GET_TASK_SCRIPT Function Parameters</p>
<table class="cellalignment4330" title="GET_TASK_SCRIPT Function Parameters" summary="This table describes the parameters of DBMS_ADVISOR.GET_TASK_SCRIPT." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t27">Parameter</th>
<th class="cellalignment4328" id="r1c2-t27">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t27" headers="r1c1-t27">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t27 r1c2-t27">
<p>The task name that uniquely identifies an existing task.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t27" headers="r1c1-t27">
<p><code dir="ltr">type</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t27 r1c2-t27">
<p>Specifies the type of script to generate. The possible values are <code dir="ltr">IMPLEMENTATION</code> and <code dir="ltr">UNDO</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t27" headers="r1c1-t27">
<p><code dir="ltr">rec_id</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t27 r1c2-t27">
<p>An optional recommendation identifier number that can be used to extract a subset of the implementation script.</p>
<p>A zero or the value <code dir="ltr">DBMS_ADVISOR.ADVISOR_ALL</code> indicates all accepted recommendations would be included. The default is to include all accepted recommendations for the task.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t27" headers="r1c1-t27">
<p><code dir="ltr">act_id</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t27 r1c2-t27">
<p>Optional action identifier number that can be used to extract a single action as a DDL command.</p>
<p>A zero or the value <code dir="ltr">DBMS_ADVISOR.ADVISOR_ALL</code> indicates all actions for the recommendation would be included. The default is to include all actions for a recommendation.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t27" headers="r1c1-t27">
<p><code dir="ltr">owner_name</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t27 r1c2-t27">
<p>An optional task owner name.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t27" headers="r1c1-t27">
<p><code dir="ltr">execution_name</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t27 r1c2-t27">
<p>An identifier of a specific execution of the task. It is needed only for advisors that allow their tasks to be executed multiple times.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t27" headers="r1c1-t27">
<p><code dir="ltr">object_id</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t27 r1c2-t27">
<p>An identifier of an advisor object that can be targeted by the script.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref314"></a>Return Values</p>
<p>Returns the script as a <code dir="ltr">CLOB</code> buffer.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref315"></a>Usage Notes</p>
<p>Though the script is ready to execute, Oracle recommends that the user review the script for acceptable locations for new materialized views and indexes.</p>
<p>For a recommendation to appear in a generated script, it must be marked as accepted.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref316"></a>Examples</p>
<pre dir="ltr">DECLARE
  task_id NUMBER;
  task_name VARCHAR2(30);
  workload_name VARCHAR2(30);
  buf CLOB;
BEGIN
  task_name := &#39;My Task&#39;;
  workload_name := &#39;My Workload&#39;;

  DBMS_ADVISOR.CREATE_TASK(DBMS_ADVISOR.SQLACCESS_ADVISOR, task_id, task_name);
  DBMS_ADVISOR.CREATE_SQLWKLD(workload_name, &#39;My Workload&#39;);
  DBMS_ADVISOR.ADD_SQLWKLD_REF(task_name, workload_name);
  DBMS_ADVISOR.ADD_SQLWKLD_STATEMENT(workload_name, &#39;MONTHLY&#39;, &#39;ROLLUP&#39;,
                                     100,400,5041,103,640445,680000,2,
                                     1,SYSDATE,1,&#39;SH&#39;,&#39;SELECT AVG(amount_sold)
                                     FROM sh.sales&#39;);
  DBMS_ADVISOR.EXECUTE_TASK(task_name);
    buf := DBMS_ADVISOR.GET_TASK_SCRIPT(task_name);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65123" class="refsect2"><a id="BCFFIEAE"></a>
<h3 class="refsect2"><a id="sthref317"></a>IMPLEMENT_TASK Procedure</h3>
<p>This procedure implements the recommendations of the specified task.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref318"></a>Syntax</p>
<pre dir="ltr">DBMS_ADVISOR.IMPLEMENT_TASK (
   task_name          IN VARCHAR2,
   rec_id             IN NUMBER := NULL,
   exit_on_error      IN BOOLEAN := NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref319"></a>Parameters</p>
<div id="ARPLS65124" class="tblformal">
<p class="titleintable"><a id="sthref320"></a><a id="sthref321"></a>Table 19-20 IMPLEMENT_TASK Procedure Parameters</p>
<table class="cellalignment4330" title="IMPLEMENT_TASK Procedure Parameters" summary="This table describes the parameters of DBMS_ADVISOR.CREATE_FILE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t28">Parameter</th>
<th class="cellalignment4328" id="r1c2-t28">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t28" headers="r1c1-t28">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t28 r1c2-t28">
<p>The name of the task.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t28" headers="r1c1-t28">
<p><code dir="ltr">rec_id</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t28 r1c2-t28">
<p>An optional recommendation ID.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t28" headers="r1c1-t28">
<p><code dir="ltr">exit_on_error</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t28 r1c2-t28">
<p>An optional boolean to exit on the first error.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65125" class="refsect2"><a id="i1012244"></a>
<h3 class="refsect2"><a id="sthref322"></a>IMPORT_SQLWKLD_SCHEMA Procedure</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
This procedure is deprecated starting in Oracle Database 11<span class="italic">g</span>.</div>
<p>This procedure constructs and loads a SQL workload based on schema evidence. The workload is also referred to as a hypothetical workload.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref323"></a>Syntax</p>
<pre dir="ltr">DBMS_ADVISOR.IMPORT_SQLWKLD_SCHEMA (
   workload_name         IN VARCHAR2,
   import_mode           IN VARCHAR2 := &#39;NEW&#39;,
   priority              IN NUMBER := 2,
   saved_rows            OUT NUMBER,
   failed_rows           OUT NUMBER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref324"></a>Parameters</p>
<div id="ARPLS65126" class="tblformal">
<p class="titleintable"><a id="sthref325"></a><a id="sthref326"></a>Table 19-21 IMPORT_SQLWKLD_SCHEMA Procedure Parameters</p>
<table class="cellalignment4330" title="IMPORT_SQLWKLD_SCHEMA Procedure Parameters" summary="This table describes the parameters of DBMS_ADVISOR.IMPORT_SQLWKLD_SCHEMA." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t30">Parameter</th>
<th class="cellalignment4328" id="r1c2-t30">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t30" headers="r1c1-t30">
<p><code dir="ltr">workload_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t30 r1c2-t30">
<p>The workload object name that uniquely identifies an existing workload.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t30" headers="r1c1-t30">
<p><code dir="ltr">import_mode</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t30 r1c2-t30">
<p>Specifies the action to be taken when storing the workload. Possible values are:</p>
<ul>
<li>
<p><code dir="ltr">APPEND</code> Indicates that the collected workload will be added to any existing workload in the task.</p>
</li>
<li>
<p><code dir="ltr">NEW</code> Indicates that the collected workload will be the exclusive workload for the task. If an existing workload is found, an exception will be thrown.</p>
</li>
<li>
<p><code dir="ltr">REPLACE</code> Indicates the collected workload will be the exclusive workload for the task. If an existing workload is found, it will be deleted prior to saving the new workload.</p>
</li>
</ul>
<p>The default value is <code dir="ltr">NEW</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t30" headers="r1c1-t30">
<p><code dir="ltr">priority</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t30 r1c2-t30">
<p>Specifies the application priority for each statement that is saved in the workload object. The value must be one of the following: 1-<code dir="ltr">HIGH</code>, 2-<code dir="ltr">MEDIUM</code>, or 3-<code dir="ltr">LOW</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t30" headers="r1c1-t30">
<p><code dir="ltr">failed_rows</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t30 r1c2-t30">
<p>Returns the number or rows that were not saved due to syntax or validation errors</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t30" headers="r1c1-t30">
<p><code dir="ltr">saved_rows</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t30 r1c2-t30">
<p>Returns the number of rows actually saved in the repository.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref327"></a>Return Values</p>
<p>This call returns the number of rows saved and failed as output parameters.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref328"></a>Usage Notes</p>
<p>To successfully import a hypothetical workload, the target schemas must contain dimensions.</p>
<p>If the <code dir="ltr">VALID_TABLE_LIST</code> parameter is not set, the search space may become very large and require a significant amount of time to complete. Oracle recommends that you limit your search space to specific set of tables.</p>
<p>If a task contains valid recommendations from a prior run, adding or modifying task will mark the task as invalid, preventing the viewing and reporting of potentially valuable recommendation data.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref329"></a>Examples</p>
<pre dir="ltr">DECLARE
  workload_name VARCHAR2(30);
  saved NUMBER;
  failed NUMBER;
BEGIN
  workload_name := &#39;My Workload&#39;;

  DBMS_ADVISOR.CREATE_SQLWKLD(workload_name, &#39;My Workload&#39;);
  DBMS_ADVISOR.SET_SQLWKLD_PARAMETER(workload_name,&#39;VALID_TABLE_LIST&#39;,&#39;SH.%&#39;);
  DBMS_ADVISOR.IMPORT_SQLWKLD_SCHEMA(workload_name, &#39;REPLACE&#39;, 1, saved,
     failed);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65127" class="refsect2"><a id="i1010878"></a>
<h3 class="refsect2"><a id="sthref330"></a>IMPORT_SQLWKLD_SQLCACHE Procedure</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
This procedure is deprecated starting in Oracle Database 11<span class="italic">g</span>.</div>
<p>This procedure creates a SQL workload from the current contents of the server&#39;s SQL cache.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref331"></a>Syntax</p>
<pre dir="ltr">DBMS_ADVISOR.IMPORT_SQLWKLD_SQLCACHE (
   workload_name         IN VARCHAR2,
   import_mode           IN VARCHAR2 := &#39;NEW&#39;,
   priority              IN NUMBER := 2,
   saved_rows            OUT NUMBER,
   failed_rows           OUT NUMBER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref332"></a>Parameters</p>
<div id="ARPLS65128" class="tblformal">
<p class="titleintable"><a id="sthref333"></a><a id="sthref334"></a>Table 19-22 IMPORT_SQLWKLD_SQLCACHE Procedure Parameters</p>
<table class="cellalignment4330" title="IMPORT_SQLWKLD_SQLCACHE Procedure Parameters" summary="This table describes the parameters of DBMS_ADVISOR.IMPORT_SQLWKLD_SQLCACHE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t32">Parameter</th>
<th class="cellalignment4328" id="r1c2-t32">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t32" headers="r1c1-t32">
<p><code dir="ltr">workload_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t32 r1c2-t32">
<p>The workload object name that uniquely identifies an existing workload.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t32" headers="r1c1-t32">
<p><code dir="ltr">import_mode</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t32 r1c2-t32">
<p>Specifies the action to be taken when storing the workload. Possible values are:</p>
<ul>
<li>
<p><code dir="ltr">APPEND</code> Indicates that the collected workload will be added to any existing workload in the task.</p>
</li>
<li>
<p><code dir="ltr">NEW</code> Indicates that the collected workload will be the exclusive workload for the task. If an existing workload is found, an exception will be thrown.</p>
</li>
<li>
<p><code dir="ltr">REPLACE</code> Indicates the collected workload will be the exclusive workload for the task. If an existing workload is found, it will be deleted prior to saving the new workload.</p>
</li>
</ul>
<p>The default value is <code dir="ltr">NEW</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t32" headers="r1c1-t32">
<p><code dir="ltr">priority</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t32 r1c2-t32">
<p>Specifies the application priority for each statement that is saved in the workload object. The value must be one of the following 1-<code dir="ltr">HIGH</code>, 2-<code dir="ltr">MEDIUM</code>, or 3-<code dir="ltr">LOW</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t32" headers="r1c1-t32">
<p><code dir="ltr">saved_rows</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t32 r1c2-t32">
<p>Returns the number of rows saved as output parameters.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t32" headers="r1c1-t32">
<p><code dir="ltr">failed_rows</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t32 r1c2-t32">
<p>Returns the number of rows that were not saved due to syntax or validation errors.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref335"></a>Return Values</p>
<p>This call returns the number of rows saved and failed as output parameters.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref336"></a>Usage Notes</p>
<p>A workload cannot be modified or deleted if it is currently referenced by an active task. A task is considered active if it is not in its initial state. See <a href="#i1001339">RESET_TASK Procedure</a> to set a task to its initial state.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref337"></a>Examples</p>
<pre dir="ltr">DECLARE
  workload_name VARCHAR2(30);
  saved NUMBER;
  failed NUMBER;
BEGIN
  workload_name := &#39;My Workload&#39;;

  DBMS_ADVISOR.CREATE_SQLWKLD(workload_name, &#39;My Workload&#39;);
  DBMS_ADVISOR.SET_SQLWKLD_PARAMETER(workload_name,&#39;VALID_TABLE_LIST&#39;,&#39;SH.%&#39;);
  DBMS_ADVISOR.IMPORT_SQLWKLD_SQLCACHE(workload_name, &#39;REPLACE&#39;, 1, saved,
     failed);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65129" class="refsect2"><a id="i1012305"></a>
<h3 class="refsect2"><a id="sthref338"></a>IMPORT_SQLWKLD_STS Procedure</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
This procedure is deprecated starting in Oracle Database 11<span class="italic">g</span>.</div>
<p>This procedure loads a SQL workload from an existing SQL tuning set. A SQL tuning set is typically created from the server workload repository using various time and data filters.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref339"></a>Syntax</p>
<pre dir="ltr">DBMS_ADVISOR.IMPORT_SQLWKLD_STS (
   workload_name         IN VARCHAR2,
   sts_name              IN VARCHAR2,
   import_mode           IN VARCHAR2 := &#39;NEW&#39;,
   priority              IN NUMBER := 2,
   saved_rows            OUT NUMBER,
   failed_rows           OUT NUMBER);
</pre>
<pre dir="ltr">DBMS_ADVISOR.IMPORT_SQLWKLD_STS (
   workload_name         IN VARCHAR2,
   sts_owner             IN VARCHAR2,
   sts_name              IN VARCHAR2,
   import_mode           IN VARCHAR2 := &#39;NEW&#39;,
   priority              IN NUMBER := 2,
   saved_rows            OUT NUMBER,
   failed_rows           OUT NUMBER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref340"></a>Parameters</p>
<div id="ARPLS65130" class="tblformal">
<p class="titleintable"><a id="sthref341"></a><a id="sthref342"></a>Table 19-23 IMPORT_SQLWKLD_STS Procedure Parameters</p>
<table class="cellalignment4330" title="IMPORT_SQLWKLD_STS Procedure Parameters" summary="This table describes the parameters of DBMS_ADVISOR.IMPORT_SQLWKLD_STS." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t34">Parameter</th>
<th class="cellalignment4328" id="r1c2-t34">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t34" headers="r1c1-t34">
<p><code dir="ltr">workload_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t34 r1c2-t34">
<p>The workload object name that uniquely identifies an existing workload.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t34" headers="r1c1-t34">
<p><code dir="ltr">sts_owner</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t34 r1c2-t34">
<p>The optional owner of the SQL tuning set.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t34" headers="r1c1-t34">
<p><code dir="ltr">sts_name</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t34 r1c2-t34">
<p>The name of an existing SQL tuning set workload from which the data will be imported. If the <code dir="ltr">sts_owner</code> value is not provided, the owner will default to the current user.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t34" headers="r1c1-t34">
<p><code dir="ltr">import_mode</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t34 r1c2-t34">
<p>Specifies the action to be taken when storing the workload. Possible values are:</p>
<ul>
<li>
<p><code dir="ltr">APPEND</code> Indicates that the collected workload will be added to any existing workload in the task.</p>
</li>
<li>
<p><code dir="ltr">NEW</code> Indicates that the collected workload will be the exclusive workload for the task. If an existing workload is found, an exception will be thrown.</p>
</li>
<li>
<p><code dir="ltr">REPLACE</code> Indicates the collected workload will be the exclusive workload for the task. If an existing workload is found, it will be deleted prior to saving the new workload.</p>
</li>
</ul>
<p>The default value is <code dir="ltr">NEW</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t34" headers="r1c1-t34">
<p><code dir="ltr">priority</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t34 r1c2-t34">
<p>Specifies the application priority for each statement that is saved in the workload object. The value must be one of the following: 1-<code dir="ltr">HIGH</code>, 2-<code dir="ltr">MEDIUM</code>, or 3-<code dir="ltr">LOW</code>. The default value is 2.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t34" headers="r1c1-t34">
<p><code dir="ltr">saved_rows</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t34 r1c2-t34">
<p>Returns the number of rows actually saved in the repository.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t34" headers="r1c1-t34">
<p><code dir="ltr">failed_rows</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t34 r1c2-t34">
<p>Returns the number of rows that were not saved due to syntax or validation errors.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref343"></a>Return Values</p>
<p>This call returns the number of rows saved and failed as output parameters.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref344"></a>Usage Notes</p>
<p>A workload cannot be modified or deleted if it is currently referenced by an active task. A task is considered active if it is not in its initial state. See <a href="#i1001339">RESET_TASK Procedure</a> to set a task to its initial state.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref345"></a>Examples</p>
<pre dir="ltr">DECLARE
  workload_name VARCHAR2(30);
  saved NUMBER;
  failed NUMBER;
BEGIN
  workload_name := &#39;My Workload&#39;;

  DBMS_ADVISOR.CREATE_SQLWKLD(workload_name, &#39;My Workload&#39;);
  DBMS_ADVISOR.SET_SQLWKLD_PARAMETER(workload_name,&#39;VALID_TABLE_LIST&#39;,&#39;SH.%&#39;);
  DBMS_ADVISOR.IMPORT_SQLWKLD_STS(workload_name, &#39;MY_SQLSET&#39;, &#39;REPLACE&#39;, 1,
     saved, failed);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65131" class="refsect2"><a id="i1012320"></a>
<h3 class="refsect2"><a id="sthref346"></a>IMPORT_SQLWKLD_SUMADV Procedure</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
This procedure is deprecated starting in Oracle Database 11<span class="italic">g</span>.</div>
<p>This procedure collects a SQL workload from a Summary Advisor workload. This procedure is intended to assist Oracle9<span class="italic">i</span> Database Summary Advisor users in the migration to SQL Access Advisor.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref347"></a>Syntax</p>
<pre dir="ltr">DBMS_ADVISOR.IMPORT_SQLWKLD_SUMADV (
   workload_name         IN VARCHAR2,
   import_mode           IN VARCHAR2 := &#39;NEW&#39;,
   priority              IN NUMBER := 2,
   sumadv_id             IN NUMBER,
   saved_rows            OUT NUMBER,
   failed_rows           OUT NUMBER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref348"></a>Parameters</p>
<div id="ARPLS65132" class="tblformal">
<p class="titleintable"><a id="sthref349"></a><a id="sthref350"></a>Table 19-24 IMPORT_SQLWKLD_SUMADV Procedure Parameters</p>
<table class="cellalignment4330" title="IMPORT_SQLWKLD_SUMADV Procedure Parameters" summary="This table describes the parameters of DBMS_ADVISOR.IMPORT_SQLWKLD_SUMADV." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t36">Parameter</th>
<th class="cellalignment4328" id="r1c2-t36">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t36" headers="r1c1-t36">
<p><code dir="ltr">workload_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t36 r1c2-t36">
<p>The workload object name that uniquely identifies an existing workload.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t36" headers="r1c1-t36">
<p><code dir="ltr">import_mode</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t36 r1c2-t36">
<p>Specifies the action to be taken when storing the workload. Possible values are:</p>
<ul>
<li>
<p><code dir="ltr">APPEND</code> Indicates that the collected workload will be added to any existing workload in the task.</p>
</li>
<li>
<p><code dir="ltr">NEW</code> Indicates that the collected workload will be the exclusive workload for the task. If an existing workload is found, an exception will be thrown.</p>
</li>
<li>
<p><code dir="ltr">REPLACE</code> Indicates the collected workload will be the exclusive workload for the task. If an existing workload is found, it will be deleted prior to saving the new workload.</p>
</li>
</ul>
<p>The default value is <code dir="ltr">NEW</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t36" headers="r1c1-t36">
<p><code dir="ltr">priority</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t36 r1c2-t36">
<p>Specifies the default application priority for each statement that is saved in the workload object. If a Summary Advisor workload statement contains a priority of zero, the default priority will be applied. If the workload statement contains a valid priority, then the Summary Advisor priority will be converted to a comparable SQL Access Advisor priority. The value must be one of the following:</p>
<p>1-<code dir="ltr">HIGH</code>, 2-<code dir="ltr">MEDIUM</code>, or 3-<code dir="ltr">LOW</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t36" headers="r1c1-t36">
<p><code dir="ltr">sumadv_id</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t36 r1c2-t36">
<p>Specifies the Summary Advisor workload identifier number.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t36" headers="r1c1-t36">
<p><code dir="ltr">saved_rows</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t36 r1c2-t36">
<p>Returns the number of rows actually saved in the repository.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t36" headers="r1c1-t36">
<p><code dir="ltr">failed_rows</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t36 r1c2-t36">
<p>Returns the number of rows that were not saved due to syntax or validation errors.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref351"></a>Return Values</p>
<p>This call returns the number of rows saved and failed as output parameters.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref352"></a>Usage Notes</p>
<p>A workload cannot be modified or deleted if it is currently referenced by an active task. A task is considered active if it is not in its initial state. See <a href="#i1001339">RESET_TASK Procedure</a> to set a task to its initial state.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref353"></a>Examples</p>
<pre dir="ltr">DECLARE
  workload_name VARCHAR2(30);
  saved NUMBER;
  failed NUMBER;
  sumadv_id NUMBER;
BEGIN
  workload_name := &#39;My Workload&#39;;
  sumadv_id := 394;

  DBMS_ADVISOR.CREATE_SQLWKLD(workload_name, &#39;My Workload&#39;);
  DBMS_ADVISOR.SET_SQLWKLD_PARAMETER(workload_name,&#39;VALID_TABLE_LIST&#39;,&#39;SH.%&#39;);
  DBMS_ADVISOR.IMPORT_SQLWKLD_SUMADV(workload_name, &#39;REPLACE&#39;, 1, sumadv_id,
    saved, failed);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65133" class="refsect2"><a id="i1012335"></a>
<h3 class="refsect2"><a id="sthref354"></a>IMPORT_SQLWKLD_USER Procedure</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
This procedure is deprecated starting in Oracle Database 11<span class="italic">g</span>.</div>
<p>This procedure collects a SQL workload from a specified user table.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref355"></a>Syntax</p>
<pre dir="ltr">DBMS_ADVISOR.IMPORT_SQLWKLD_USER (
   workload_name         IN VARCHAR2,
   import_mode           IN VARCHAR2 := &#39;NEW&#39;,
   owner_name            IN VARCHAR2,
   table_name            IN VARCHAR2,
   saved_rows            OUT NUMBER,
   failed_rows           OUT NUMBER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref356"></a>Parameters</p>
<div id="ARPLS65134" class="tblformal">
<p class="titleintable"><a id="sthref357"></a><a id="sthref358"></a>Table 19-25 IMPORT_SQLWKLD_USER Procedure Parameters</p>
<table class="cellalignment4330" title=" IMPORT_SQLWKLD_USER Procedure Parameters" summary="This table describes the parameters of DBMS_ADVISOR.IMPORT_SQLWKLD_USER." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t38">Parameter</th>
<th class="cellalignment4328" id="r1c2-t38">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t38" headers="r1c1-t38">
<p><code dir="ltr">workload_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t38 r1c2-t38">
<p>The workload object name that uniquely identifies an existing workload.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t38" headers="r1c1-t38">
<p><code dir="ltr">import_mode</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t38 r1c2-t38">
<p>Specifies the action to be taken when storing the workload. Possible values are:</p>
<ul>
<li>
<p><code dir="ltr">APPEND</code> Indicates that the collected workload will be added to any existing workload in the task.</p>
</li>
<li>
<p><code dir="ltr">NEW</code> Indicates that the collected workload will be the exclusive workload for the task. If an existing workload is found, an exception will be thrown.</p>
</li>
<li>
<p><code dir="ltr">REPLACE</code> Indicates the collected workload will be the exclusive workload for the task. If an existing workload is found, it will be deleted prior to saving the new workload.</p>
</li>
</ul>
<p>The default value is <code dir="ltr">NEW</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t38" headers="r1c1-t38">
<p><code dir="ltr">owner_name</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t38 r1c2-t38">
<p>Specifies the owner name of the table or view from which workload data will be collected.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t38" headers="r1c1-t38">
<p><code dir="ltr">table_name</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t38 r1c2-t38">
<p>Specifies the name of the table or view from which workload data will be collected.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t38" headers="r1c1-t38">
<p><code dir="ltr">saved_rows</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t38 r1c2-t38">
<p>Returns the number of rows actually saved in the workload object.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t38" headers="r1c1-t38">
<p><code dir="ltr">failed_rows</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t38 r1c2-t38">
<p>Returns the number of rows that were not saved due to syntax or validation errors.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref359"></a>Return Values</p>
<p>This call returns the number of rows saved and failed as output parameters.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref360"></a>Usage Notes</p>
<p>A workload cannot be modified or deleted if it is currently referenced by an active task. A task is considered active if it is not in its initial state. See <a href="#i1001339">RESET_TASK Procedure</a> to set a task to its initial state.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref361"></a>Examples</p>
<pre dir="ltr">DECLARE
  workload_name VARCHAR2(30);
  saved NUMBER;
  failed NUMBER;
BEGIN
  workload_name := &#39;My Workload&#39;;

  DBMS_ADVISOR.CREATE_SQLWKLD(workload_name, &#39;My Workload&#39;);
  DBMS_ADVISOR.SET_SQLWKLD_PARAMETER(workload_name,&#39;VALID_TABLE_LIST&#39;,&#39;SH.%&#39;);
  DBMS_ADVISOR.IMPORT_SQLWKLD_USER(workload_name, &#39;REPLACE&#39;, &#39;SH&#39;, 
    &#39;USER_WORKLOAD&#39;, saved, failed);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65135" class="refsect2"><a id="i1012149"></a>
<h3 class="refsect2"><a id="sthref362"></a>INTERRUPT_TASK Procedure</h3>
<p>This procedure stops a currently executing task. The task will end its operations as it would at a normal exit. The user will be able to access any recommendations that exist to this point.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref363"></a>Syntax</p>
<pre dir="ltr">DBMS_ADVISOR.INTERRUPT_TASK (
   task_name          IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref364"></a>Parameters</p>
<div id="ARPLS65136" class="tblformal">
<p class="titleintable"><a id="sthref365"></a><a id="sthref366"></a>Table 19-26 INTERRUPT_TASK Procedure Parameters</p>
<table class="cellalignment4330" title="INTERRUPT_TASK Procedure Parameters" summary="This table describes the parameters of DBMS_ADVISOR.INTERRUPT_TASK." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t39">Parameter</th>
<th class="cellalignment4328" id="r1c2-t39">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t39" headers="r1c1-t39">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t39 r1c2-t39">
<p>A single Advisor task name that will be interrupted.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref367"></a>Examples</p>
<pre dir="ltr">DECLARE
  task_id NUMBER;
  task_name VARCHAR2(30);
BEGIN
  task_name := &#39;My Task&#39;;

  DBMS_ADVISOR.CREATE_TASK(DBMS_ADVISOR.SQLACCESS_ADVISOR, task_id, task_name);
  DBMS_ADVISOR.EXECUTE_TASK(task_name);
END;
/
</pre>
<p>While this session is executing its task, you can interrupt the task from a second session using the following statement:</p>
<pre dir="ltr">BEGIN
  DBMS_ADVISOR.INTERRUPT_TASK(&#39;My Task&#39;);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65137" class="refsect2"><a id="CIHGAHCJ"></a>
<h3 class="refsect2"><a id="sthref368"></a>MARK_RECOMMENDATION Procedure</h3>
<p>This procedure marks a recommendation for import or implementation.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref369"></a>Syntax</p>
<pre dir="ltr">DBMS_ADVISOR.MARK_RECOMMENDATION (
   task_name          IN VARCHAR2
   id                 IN NUMBER,
   action             IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref370"></a>Parameters</p>
<div id="ARPLS65138" class="tblformal">
<p class="titleintable"><a id="sthref371"></a><a id="sthref372"></a>Table 19-27 MARK_RECOMMENDATION Procedure Parameters</p>
<table class="cellalignment4330" title="MARK_RECOMMENDATION Procedure Parameters" summary="This table describes the parameters of DBMS_ADVISOR.MARK_RECOMMENDATION." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t40">Parameter</th>
<th class="cellalignment4328" id="r1c2-t40">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t40" headers="r1c1-t40">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t40 r1c2-t40">
<p>Name of the task.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t40" headers="r1c1-t40">
<p><code dir="ltr">id</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t40 r1c2-t40">
<p>The recommendation identifier number assigned by the Advisor.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t40" headers="r1c1-t40">
<p><code dir="ltr">action</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t40 r1c2-t40">
<p>The recommendation action setting. The possible actions are:</p>
<ul>
<li>
<p><code dir="ltr">ACCEPT</code> Marks the recommendation as accepted. With this setting, the recommendation will appear in implementation and undo scripts.</p>
</li>
<li>
<p><code dir="ltr">IGNORE</code> Marks the recommendation as ignore. With this setting, the recommendation will not appear in an implementation or undo script.</p>
</li>
<li>
<p><code dir="ltr">REJECT</code> Marks the recommendation as rejected. With this setting, the recommendation will not appear in any implementation or undo scripts.</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref373"></a>Usage Notes</p>
<p>For a recommendation to be implemented, it must be marked as accepted. By default, all recommendations are considered accepted and will appear in any generated scripts.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref374"></a>Examples</p>
<pre dir="ltr">DECLARE
  task_id NUMBER;
  task_name VARCHAR2(30);
  workload_name VARCHAR2(30);
  attribute VARCHAR2(100);
  rec_id NUMBER;
BEGIN
  task_name := &#39;My Task&#39;;
  workload_name := &#39;My Workload&#39;;

  DBMS_ADVISOR.CREATE_TASK(DBMS_ADVISOR.SQLACCESS_ADVISOR, task_id, task_name);
  DBMS_ADVISOR.CREATE_SQLWKLD(workload_name, &#39;My Workload&#39;);
  DBMS_ADVISOR.ADD_SQLWKLD_REF(task_name, workload_name);
  DBMS_ADVISOR.ADD_SQLWKLD_STATEMENT(workload_name, &#39;MONTHLY&#39;, &#39;ROLLUP&#39;,
                                     100,400,5041,103,640445,680000,2,
                                     1,SYSDATE,1,&#39;SH&#39;,&#39;SELECT AVG(amount_sold)
                                     FROM sh.sales WHERE promo_id = 10&#39;);
  DBMS_ADVISOR.EXECUTE_TASK(task_name);

  rec_id := 1;
  DBMS_ADVISOR.MARK_RECOMMENDATION(task_name, rec_id, &#39;REJECT&#39;);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65139" class="refsect2"><a id="i1011111"></a>
<h3 class="refsect2"><a id="sthref375"></a>QUICK_TUNE Procedure</h3>
<p>This procedure performs an analysis and generates recommendations for a single SQL statement.</p>
<p>This provides a shortcut method of all necessary operations to analyze the specified SQL statement. The operation creates a task using the specified task name. The task will be created using a specified Advisor task template. Finally, the task will be executed and the results will be saved in the repository.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref376"></a>Syntax</p>
<pre dir="ltr">DBMS_ADVISOR.QUICK_TUNE (
   advisor_name           IN VARCHAR2,
   task_name              IN VARCHAR2,
   attr1                  IN CLOB,
   attr2                  IN VARCHAR2 := NULL,
   attr3                  IN NUMBER := NULL,
   task_or_template       IN VARCHAR2 := NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref377"></a>Parameters</p>
<div id="ARPLS65140" class="tblformal">
<p class="titleintable"><a id="sthref378"></a><a id="sthref379"></a>Table 19-28 QUICK_TUNE Procedure Parameters</p>
<table class="cellalignment4330" title="QUICK_TUNE Procedure Parameters" summary="This table describes the parameters of DBMS_ADVISOR.QUICK_TUNE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t41">Parameter</th>
<th class="cellalignment4328" id="r1c2-t41">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t41" headers="r1c1-t41">
<p><code dir="ltr">advisor_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t41 r1c2-t41">
<p>Name of the Advisor that will perform the analysis.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t41" headers="r1c1-t41">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t41 r1c2-t41">
<p>Name of the task.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t41" headers="r1c1-t41">
<p><code dir="ltr">attr1</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t41 r1c2-t41">
<p>Advisor-specific attribute in the form of a <code dir="ltr">CLOB</code> variable.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t41" headers="r1c1-t41">
<p><code dir="ltr">attr2</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t41 r1c2-t41">
<p>Advisor-specific attribute in the form of a <code dir="ltr">VARCHAR2</code> variable.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t41" headers="r1c1-t41">
<p><code dir="ltr">attr3</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t41 r1c2-t41">
<p>Advisor-specific attribute in the form of a <code dir="ltr">NUMBER</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t41" headers="r1c1-t41">
<p><code dir="ltr">task_or_template</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t41 r1c2-t41">
<p>An optional task name of an existing task or task template.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref380"></a>Usage Notes</p>
<p>If indicated by the user, the final recommendations can be implemented by the procedure.</p>
<p>The task will be created using either a specified SQL Access task template or the built-in default template of <code dir="ltr">SQLACCESS_GENERAL</code>. The workload will only contain the specified statement, and all task parameters will be defaulted.</p>
<p><code dir="ltr">attr1</code> must be the single SQL statement to tune. For the SQL Access Advisor, <code dir="ltr">attr2</code> is the user who would execute the single statement. If omitted, the current user will be used.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref381"></a>Examples</p>
<pre dir="ltr">DECLARE
  task_name VARCHAR2(30);
BEGIN
  task_name := &#39;My Task&#39;;

  DBMS_ADVISOR.QUICK_TUNE(DBMS_ADVISOR.SQLACCESS_ADVISOR, task_name,
                  &#39;SELECT AVG(amount_sold) FROM sh.sales WHERE promo_id=10&#39;);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65141" class="refsect2"><a id="CIHHHDCJ"></a>
<h3 class="refsect2"><a id="sthref382"></a>RESET_SQLWKLD Procedure</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
This procedure is deprecated starting in Oracle Database 11<span class="italic">g</span>.</div>
<p>This procedure resets a workload to its initial starting point. This has the effect of removing all journal messages, log messages, and recalculating necessary volatility and usage statistics.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref383"></a>Syntax</p>
<pre dir="ltr">DBMS_ADVISOR.RESET_SQLWKLD (
   workload_name        IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref384"></a>Parameters</p>
<div id="ARPLS65142" class="tblformal">
<p class="titleintable"><a id="sthref385"></a><a id="sthref386"></a>Table 19-29 RESET_SQLWKLD Procedure Parameters</p>
<table class="cellalignment4330" title="RESET_SQLWKLD Procedure Parameters" summary="This table describes the parameters of DBMS_ADVISOR.RESET_SQLWKLD." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t43">Parameter</th>
<th class="cellalignment4328" id="r1c2-t43">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t43" headers="r1c1-t43">
<p><code dir="ltr">workload_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t43 r1c2-t43">
<p>The SQL Workload object name that uniquely identifies an existing workload.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref387"></a>Usage Notes</p>
<p><code dir="ltr">RESET_SQLWKLD</code> should be executed after any workload adjustments such as adding or removing SQL statements.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref388"></a>Examples</p>
<pre dir="ltr">DECLARE
  workload_name VARCHAR2(30);
BEGIN
  workload_name := &#39;My Workload&#39;;

  DBMS_ADVISOR.CREATE_SQLWKLD(workload_name, &#39;My Workload&#39;);
  DBMS_ADVISOR.ADD_SQLWKLD_STATEMENT(workload_name, &#39;MONTHLY&#39;, &#39;ROLLUP&#39;,
                                     100,400,5041,103,640445,680000,2,
                                     1,SYSDATE,1,&#39;SH&#39;,&#39;SELECT AVG(amount_sold)
                                     FROM sh.sales WHERE promo_id = 10&#39;);

  DBMS_ADVISOR.RESET_SQLWKLD(workload_name);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65143" class="refsect2"><a id="i1001339"></a>
<h3 class="refsect2"><a id="sthref389"></a>RESET_TASK Procedure</h3>
<p>This procedure re-initializes the metadata for the specified task. The task status will be set to <code dir="ltr">INITIAL</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref390"></a>Syntax</p>
<pre dir="ltr">DBMS_ADVISOR.RESET_TASK (
   task_name          IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref391"></a>Parameters</p>
<div id="ARPLS65144" class="tblformal">
<p class="titleintable"><a id="sthref392"></a><a id="sthref393"></a>Table 19-30 RESET_TASK Procedure Parameters</p>
<table class="cellalignment4330" title="RESET_TASK Procedure Parameters" summary="This table describes the parameters of DBMS_ADVISOR.RESET_TASK." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t44">Parameter</th>
<th class="cellalignment4328" id="r1c2-t44">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t44" headers="r1c1-t44">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t44 r1c2-t44">
<p>The task name that uniquely identifies an existing task.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref394"></a>Examples</p>
<pre dir="ltr">DECLARE
  task_id NUMBER;
  task_name VARCHAR2(30);
  workload_name VARCHAR2(30);
BEGIN
  task_name := &#39;My Task&#39;;
  workload_name := &#39;My Workload&#39;;

  DBMS_ADVISOR.CREATE_TASK(DBMS_ADVISOR.SQLACCESS_ADVISOR, task_id, task_name);
  DBMS_ADVISOR.ADD_SQLWKLD_REF(task_name, workload_name);
  DBMS_ADVISOR.EXECUTE_TASK(task_name);
  DBMS_ADVISOR.RESET_TASK(task_name);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65145" class="refsect2"><a id="i1011235"></a>
<h3 class="refsect2"><a id="sthref395"></a>SET_DEFAULT_SQLWKLD_PARAMETER Procedures</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
This procedure is deprecated starting in Oracle Database 11<span class="italic">g</span>.</div>
<p>This procedure modifies the default value for a user parameter within a SQL Workload object or SQL Workload object template. A user parameter is a simple variable that stores various attributes that affect workload collection, tuning decisions and reporting. When a default value is changed for a parameter, workload objects will inherit the new value when they are created.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref396"></a>Syntax</p>
<pre dir="ltr">DBMS_ADVISOR.SET_DEFAULT_SQLWKLD_PARAMETER (
   parameter            IN VARCHAR2,
   value                IN VARCHAR2);

DBMS_ADVISOR.SET_DEFAULT_SQLWKLD_PARAMETER (
   parameter            IN VARCHAR2,
   value                IN NUMBER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref397"></a>Parameters</p>
<div id="ARPLS65146" class="tblformal">
<p class="titleintable"><a id="sthref398"></a><a id="sthref399"></a>Table 19-31 SET_DEFAULT_SQLWKLD_PARAMETER Procedure Parameters</p>
<table class="cellalignment4330" title="SET_DEFAULT_SQLWKLD_PARAMETER Procedure Parameters" summary="This table describes the parameters of DBMS_ADVISOR.SET_DEFAULT_SQLWKLD_PARAMETER." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t46">Parameter</th>
<th class="cellalignment4328" id="r1c2-t46">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t46" headers="r1c1-t46">
<p><code dir="ltr">parameter</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t46 r1c2-t46">
<p>The name of the data parameter to be modified. Parameter names are not case sensitive. Parameter names are unique to the workload object type, but not necessarily unique to all workload object types. Various object types may use the same parameter name for different purposes.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t46" headers="r1c1-t46">
<p><code dir="ltr">value</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t46 r1c2-t46">
<p>The value of the specified parameter. The value can be specified as a string or a number. If the value is <code dir="ltr">DBMS_ADVISOR.DEFAULT</code>, the value will be reset to the default value.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref400"></a>Usage Notes</p>
<p>A parameter will only affect operations that modify the workload collection. Therefore, parameters should be set prior to importing or adding new SQL statements to a workload. If a parameter is set after data has been placed in a workload object, it will have no effect on the existing data.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref401"></a>Examples</p>
<pre dir="ltr">BEGIN
  DBMS_ADVISOR.SET_DEFAULT_SQLWKLD_PARAMETER(&#39;VALID_TABLE_LIST&#39;,&#39;SH.%&#39;);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65147" class="refsect2"><a id="i1011236"></a>
<h3 class="refsect2"><a id="sthref402"></a>SET_DEFAULT_TASK_PARAMETER Procedures</h3>
<p>This procedure modifies the default value for a user parameter within a task or a template. A user parameter is a simple variable that stores various attributes that affect various Advisor operations. When a default value is changed for a parameter, tasks will inherit the new value when they are created.</p>
<p>A default task is different from a regular task. The default value is the initial value that will be inserted into a newly created task, while setting a task parameter with <code dir="ltr">SET_TASK_PARAMETER</code> sets the local value only. Thus, <code dir="ltr">SET_DEFAULT_TASK_PARAMETER</code> has no effect on an existing task.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref403"></a>Syntax</p>
<pre dir="ltr">DBMS_ADVISOR.SET_DEFAULT_TASK_PARAMETER (
   advisor_name        IN VARCHAR2
   parameter           IN VARCHAR2,
   value               IN VARCHAR2);

DBMS_ADVISOR.SET_DEFAULT_TASK_PARAMETER (
   advisor_name        IN VARCHAR2
   parameter           IN VARCHAR2,
   value               IN NUMBER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref404"></a>Parameters</p>
<div id="ARPLS65148" class="tblformal">
<p class="titleintable"><a id="sthref405"></a><a id="sthref406"></a>Table 19-32 SET_DEFAULT_TASK_PARAMETER Procedure Parameters</p>
<table class="cellalignment4330" title="SET_DEFAULT_TASK_PARAMETER Procedure Parameters" summary="This table describes the parameters of DBMS_ADVISOR.SET_DEFAULT_TASK_PARAMETER." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t47">Parameter</th>
<th class="cellalignment4328" id="r1c2-t47">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t47" headers="r1c1-t47">
<p><code dir="ltr">advisor_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t47 r1c2-t47">
<p>Specifies the unique advisor name as defined in the view <code dir="ltr">DBA_ADVISOR_DEFINITIONS</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t47" headers="r1c1-t47">
<p><code dir="ltr">parameter</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t47 r1c2-t47">
<p>The name of the task parameter to be modified. Parameter names are not case sensitive. Parameter names are unique to the task type, but not necessarily unique to all task types. Various task types may use the same parameter name for different purposes.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t47" headers="r1c1-t47">
<p><code dir="ltr">value</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t47 r1c2-t47">
<p>The value of the specified task parameter. The value can be specified as a string or a number.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref407"></a>Examples</p>
<pre dir="ltr">BEGIN
  DBMS_ADVISOR.SET_DEFAULT_TASK_PARAMETER(DBMS_ADVISOR.SQLACCESS_ADVISOR,
   &#39;VALID_TABLE_LIST&#39;, &#39;SH.%&#39;);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65149" class="refsect2"><a id="i1011237"></a>
<h3 class="refsect2"><a id="sthref408"></a>SET_SQLWKLD_PARAMETER Procedures</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
This procedure is deprecated starting in Oracle Database 11<span class="italic">g</span>.</div>
<p>This procedure modifies a user parameter within a SQL Workload object or SQL Workload object template. A user parameter is a simple variable that stores various attributes that affect workload collection, tuning decisions and reporting.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref409"></a>Syntax</p>
<pre dir="ltr">DBMS_ADVISOR.SET_SQLWKLD_PARAMETER (
   workload_name        IN VARCHAR2,
   parameter            IN VARCHAR2,
   value                IN VARCHAR2);

DBMS_ADVISOR.SET_SQLWKLD_PARAMETER (
   workload_name        IN VARCHAR2,
   parameter            IN VARCHAR2,
   value                IN NUMBER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref410"></a>Parameters</p>
<div id="ARPLS65150" class="tblformal">
<p class="titleintable"><a id="sthref411"></a><a id="sthref412"></a>Table 19-33 SET_SQLWKLD_PARAMETER Procedure Parameters</p>
<table class="cellalignment4330" title="SET_SQLWKLD_PARAMETER Procedure Parameters" summary="This table describes the parameters of DBMS_ADVISOR.SET_SQLWKLD_PARAMETER." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t49">Parameter</th>
<th class="cellalignment4328" id="r1c2-t49">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t49" headers="r1c1-t49">
<p><code dir="ltr">workload_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t49 r1c2-t49">
<p>The SQL Workload object name that uniquely identifies an existing workload.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t49" headers="r1c1-t49">
<p><code dir="ltr">parameter</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t49 r1c2-t49">
<p>The name of the data parameter to be modified. Parameter names are not case sensitive.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t49" headers="r1c1-t49">
<p><code dir="ltr">value</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t49 r1c2-t49">
<p>The value of the specified parameter. The value can be specified as a string or a number. If the value is <code dir="ltr">DBMS_ADVISOR.DEFAULT</code>, the value will be reset to the default value.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref413"></a>Usage Notes</p>
<p>A parameter will only affect operations that modify the workload collection. Therefore, parameters should be set prior to importing or adding new SQL statements to a workload. If a parameter is set after data has been placed in a workload object, it will have no effect on the existing data.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref414"></a>Examples</p>
<pre dir="ltr">DECLARE
  workload_name VARCHAR2(30);
BEGIN
  workload_name := &#39;My Workload&#39;;

  DBMS_ADVISOR.CREATE_SQLWKLD(workload_name, &#39;My Workload&#39;);
  DBMS_ADVISOR.SET_SQLWKLD_PARAMETER(workload_name, &#39;VALID_TABLE_LIST&#39;,&#39;SH.%&#39;);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65151" class="refsect2"><a id="i1001341"></a>
<h3 class="refsect2"><a id="sthref415"></a>SET_TASK_PARAMETER Procedure</h3>
<p>This procedure modifies a user parameter within an Advisor task or a template. A user parameter is a simple variable that stores various attributes that affect workload collection, tuning decisions and reporting.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref416"></a>Syntax</p>
<pre dir="ltr">DBMS_ADVISOR.SET_TASK_PARAMETER (
   task_name           IN VARCHAR2
   parameter           IN VARCHAR2,
   value               IN VARCHAR2);

DBMS_ADVISOR.SET_TASK_PARAMETER (
   task_name           IN VARCHAR2
   parameter           IN VARCHAR2,
   value               IN NUMBER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref417"></a>Parameters</p>
<div id="ARPLS65152" class="tblformal">
<p class="titleintable"><a id="sthref418"></a><a id="sthref419"></a>Table 19-34 SET_TASK_PARAMETER Procedure Parameters</p>
<table class="cellalignment4330" title="SET_TASK_PARAMETER Procedure Parameters" summary="This table describes the parameters of DBMS_ADVISOR.SET_TASK_PARAMETER." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t50">Parameter</th>
<th class="cellalignment4328" id="r1c2-t50">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t50" headers="r1c1-t50">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t50 r1c2-t50">
<p>The Advisor task name that uniquely identifies an existing task.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t50" headers="r1c1-t50">
<p><code dir="ltr">parameter</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t50 r1c2-t50">
<p>The name of the task parameter to be modified. Parameter names are not case sensitive. Parameter names are unique to the task type, but not necessarily unique to all task types. Various task types may use the same parameter name for different purposes.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t50" headers="r1c1-t50">
<p><code dir="ltr">value</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t50 r1c2-t50">
<p>The value of the specified task parameter. The value can be specified as a string or a number. If the value is <code dir="ltr">DEFAULT</code>, the value will be reset to the default value.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref420"></a>Usage Notes</p>
<p>A task cannot be modified unless it is in its initial state. See <a href="#i1001339">RESET_TASK Procedure</a> to set a task to its initial state. See your Advisor-specific documentation for further information on using this procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref421"></a>SQL Access Advisor Task Parameters</p>
<p><a href="#CIHDIEAB">Table 19-35</a> lists SQL Access Advisor task parameters.</p>
<div id="ARPLS65153" class="tblformalwidemax">
<p class="titleintable"><a id="sthref422"></a><a id="CIHDIEAB"></a>Table 19-35 SQL Access Advisor Task Parameters</p>
<table class="cellalignment4327" title="SQL Access Advisor Task Parameters" summary="This table lists the SQL Access Advisor Task parameters in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t51">Parameter</th>
<th class="cellalignment4328" id="r1c2-t51">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t51" headers="r1c1-t51">
<p><code dir="ltr">ANALYSIS_SCOPE</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t51 r1c2-t51">
<p>A comma-separated list that specifies the tuning artifacts to consider during analysis.</p>
<p>The possible values are:</p>
<ul>
<li>
<p><code dir="ltr">ALL</code> Short name for specifying <code dir="ltr">INDEX</code>, <code dir="ltr">MVIEW</code>, <code dir="ltr">TABLE</code>, and <code dir="ltr">PARTITION</code>.</p>
</li>
<li>
<p><code dir="ltr">EVALUATION</code> Causes a read-only evaluation of the specified workload. No new recommendations will be made. Can only be specified alone.</p>
</li>
<li>
<p><code dir="ltr">INDEX</code> Allows the SQL Access Advisor to recommend index structure changes.</p>
</li>
<li>
<p><code dir="ltr">MVIEW</code> Allows the SQL Access Advisor to recommend materialized view and log changes.</p>
</li>
<li>
<p><code dir="ltr">PARTITION</code> Allows the SQL Access Advisor to recommend partition options. Use this in conjunction with the <code dir="ltr">INDEX</code>, <code dir="ltr">MVIEW</code>, and <code dir="ltr">TABLE</code> options.</p>
</li>
<li>
<p><code dir="ltr">TABLE</code> Allows the SQL Access Advisor to make base-table recommendations. In this release, the only base-table recommendation is partitioning.</p>
</li>
</ul>
<p>Using the new keywords, the following combinations are valid:</p>
<ul>
<li>
<p><code dir="ltr">INDEX</code></p>
</li>
<li>
<p><code dir="ltr">MVIEW</code></p>
</li>
<li>
<p><code dir="ltr">INDEX</code>, <code dir="ltr">PARTITION</code></p>
</li>
<li>
<p><code dir="ltr">INDEX</code>, <code dir="ltr">MVIEW</code>, <code dir="ltr">PARTITION</code></p>
</li>
<li>
<p><code dir="ltr">INDEX</code>, <code dir="ltr">TABLE</code>, <code dir="ltr">PARTITION</code></p>
</li>
<li>
<p><code dir="ltr">MVIEW</code>, <code dir="ltr">PARTITION</code></p>
</li>
<li>
<p><code dir="ltr">MIVEW</code>, <code dir="ltr">TABLE</code>, <code dir="ltr">PARTITION</code></p>
</li>
<li>
<p><code dir="ltr">INDEX</code>, <code dir="ltr">MVIEW</code>, <code dir="ltr">TABLE</code>, <code dir="ltr">PARTITION</code></p>
</li>
<li>
<p><code dir="ltr">TABLE</code>, <code dir="ltr">PARTITION</code></p>
</li>
<li>
<p><code dir="ltr">EVALUATION</code></p>
</li>
</ul>
<p>The default value is <code dir="ltr">INDEX</code>. The datatype is <code dir="ltr">STRINGLIST</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t51" headers="r1c1-t51">
<p><code dir="ltr">CREATION_COST</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t51 r1c2-t51">
<p>When set to <code dir="ltr">true</code> (default), the SQL Access Advisor will weigh the cost of creation of the access structure (index or materialized view) against the frequency of the query and potential improvement in the query execution time. When set to <code dir="ltr">false</code>, the cost of creation is ignored. The datatype is <code dir="ltr">STRING</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t51" headers="r1c1-t51">
<p><code dir="ltr">DAYS_TO_EXPIRE</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t51 r1c2-t51">
<p>Specifies the expiration time in days for the current SQL Access Advisor task. The value is relative to the last modification date. Once the task expires, it will become a candidate for removal by an automatic purge operation.</p>
<p>Specifies the expiration time in days for the current Access Advisor task. The value is relative to the last modification date. The datatype is <code dir="ltr">NUMBER</code>.</p>
<p>Once the task expires, it becomes a candidate for removal by an automatic purge operation.</p>
<p>The possible values are:</p>
<ul>
<li>
<p>an integer in the range of 0 to 2147483647</p>
</li>
<li>
<p><code dir="ltr">ADVISOR_UNLIMITED</code></p>
</li>
<li>
<p><code dir="ltr">ADVISOR_UNUSED</code></p>
</li>
</ul>
<p>The default value is 30.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t51" headers="r1c1-t51">
<p><code dir="ltr">DEF_EM_TEMPLATE</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t51 r1c2-t51">
<p>Contains the default task or template name from which the Enterprise Manager SQL Access Advisor Wizard reads its initial values.</p>
<p>The default value is <code dir="ltr">SQLACCESS_EMTASK</code>. The datatype is <code dir="ltr">STRING</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t51" headers="r1c1-t51">
<p><code dir="ltr">DEF_INDEX_OWNER</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t51 r1c2-t51">
<p>Specifies the default owner for new index recommendations. When a script is created, this value will be used to qualify the index name.</p>
<p>Possible values are:</p>
<ul>
<li>
<p>Existing schema name. Quoted identifiers are supported.</p>
</li>
<li>
<p><code dir="ltr">ADVISOR_UNUSED</code></p>
</li>
</ul>
<p>The default value is <code dir="ltr">ADVISOR_UNUSED</code>. The datatype is <code dir="ltr">STRING</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t51" headers="r1c1-t51">
<p><code dir="ltr">DEF_INDEX_TABLESPACE</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t51 r1c2-t51">
<p>Specifies the default tablespace for new index recommendations. When a script is created, this value will be used to specify a tablespace clause.</p>
<p>Possible values are:</p>
<ul>
<li>
<p>Existing tablespace name. Quoted identifiers are supported.</p>
</li>
<li>
<p><code dir="ltr">ADVISOR_UNUSED</code> No tablespace clause will be present in the script for indexes.</p>
</li>
</ul>
<p>The default value is <code dir="ltr">ADVISOR_UNUSED</code>. The datatype is <code dir="ltr">STRING</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t51" headers="r1c1-t51">
<p><code dir="ltr">DEF_MVIEW_OWNER</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t51 r1c2-t51">
<p>Specifies the default owner for new materialized view recommendations. When a script is created, this value will be used to qualify the materialized view name.</p>
<p>Possible values are:</p>
<ul>
<li>
<p>Existing schema name. Quoted identifiers are supported.</p>
</li>
<li>
<p><code dir="ltr">ADVISOR_UNUSED</code></p>
</li>
</ul>
<p>The default value is <code dir="ltr">ADVISOR_UNUSED</code>. The datatype is <code dir="ltr">STRING</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t51" headers="r1c1-t51">
<p><code dir="ltr">DEF_MVIEW_TABLESPACE</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t51 r1c2-t51">
<p>Specifies the default tablespace for new materialized view recommendations. When a script is created, this value will be used to specify a tablespace clause.</p>
<p>Possible values are</p>
<ul>
<li>
<p>Existing tablespace name. Quoted identifiers are supported.</p>
</li>
<li>
<p><code dir="ltr">ADVISOR_UNUSED</code>. No tablespace clause will be present in the script for materialized view logs.</p>
</li>
</ul>
<p>The default value is <code dir="ltr">ADVISOR_UNUSED</code>. The datatype is <code dir="ltr">STRING</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t51" headers="r1c1-t51">
<p><code dir="ltr">DEF_MVLOG_TABLSPACE</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t51 r1c2-t51">
<p>Specifies the default tablespace for new materialized view log recommendations. When a script is created, this value will be used to specify a tablespace clause.</p>
<p>Possible values are:</p>
<ul>
<li>
<p>Existing tablespace name. Quoted identifiers are supported.</p>
</li>
<li>
<p><code dir="ltr">ADVISOR_UNUSED</code>. No tablespace clause will be present in the script for materialized view logs.</p>
</li>
</ul>
<p>The default value is <code dir="ltr">ADVISOR_UNUSED</code>. The datatype is <code dir="ltr">STRING</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t51" headers="r1c1-t51">
<p><code dir="ltr">DEF_PARTITION_TABLESPACE</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t51 r1c2-t51">
<p>Specifies the default tablespace for new partitioning recommendations. When a script is created, this value will be used to specify a tablespace clause.</p>
<p>Possible values are:</p>
<ul>
<li>
<p>Existing tablespace name. Quoted identifiers are supported.</p>
</li>
<li>
<p><code dir="ltr">ADVISOR_UNUSED</code>. No tablespace clause will be present in the script for materialized views.</p>
</li>
</ul>
<p>The default value is <code dir="ltr">ADVISOR_UNUSED</code>. The datatype is <code dir="ltr">STRING</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t51" headers="r1c1-t51">
<p><code dir="ltr">DML_VOLATILITY</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t51 r1c2-t51">
<p>When set to <code dir="ltr">TRUE</code>, the SQL Access Advisor will consider the impact of index maintenance and materialized view refresh in determining the recommendations. It will limit the access structure recommendations involving columns or tables that are frequently updated. For example, if there are too many DML statements on a column, then it may favor a B-tree index over a bitmap index on that column. For this process to be effective, the workload must include DML (insert/update/delete/merge/direct path inserts) statements that represent the update behavior of the application. The datatype is <code dir="ltr">STRING</code>.</p>
<p>See the related parameter <code dir="ltr">refresh_mode</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t51" headers="r1c1-t51">
<p><code dir="ltr">END_TIME</code></p>
</td>
<td class="cellalignment4329" headers="r13c1-t51 r1c2-t51">
<p>Specifies an end time for selecting SQL statements. If the statement did not execute on or before the specified time, it will not be processed.</p>
<p>Each date must be in the standard Oracle form of MM-DD-YYYY HH24:MI:SS, where:</p>
<ul>
<li>
<p>DD is the numeric date</p>
</li>
<li>
<p>MM is the numeric month</p>
</li>
<li>
<p>YYYY is the numeric year</p>
</li>
<li>
<p>HH is the hour in 24 hour format</p>
</li>
<li>
<p>MI is the minute</p>
</li>
<li>
<p>SS is the second</p>
</li>
</ul>
<p>The datatype is <code dir="ltr">STRING</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t51" headers="r1c1-t51">
<p><code dir="ltr">EVALUATION_ONLY</code></p>
</td>
<td class="cellalignment4329" headers="r14c1-t51 r1c2-t51">
<p>This parameter is maintained for backward compatibility. All values will be translated and placed into the <code dir="ltr">ANALYSIS_SCOPE</code> task parameter.</p>
<p>If set to <code dir="ltr">TRUE</code>, causes SQL Access Advisor to analyze the workload, but only comment on how well the current configuration is supporting it. No tuning recommendations will be generated.</p>
<p>Possible values are:</p>
<ul>
<li>
<p><code dir="ltr">FALSE</code></p>
</li>
<li>
<p><code dir="ltr">TRUE</code></p>
</li>
</ul>
<p>The default value is <code dir="ltr">FALSE</code>. The datatype is <code dir="ltr">STRING</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r15c1-t51" headers="r1c1-t51">
<p><code dir="ltr">EXECUTION_TYPE</code></p>
</td>
<td class="cellalignment4329" headers="r15c1-t51 r1c2-t51">
<p>This parameter is maintained for backward compatibility. All values will be translated and placed into the <code dir="ltr">ANALYSIS_SCOPE</code> task parameter.</p>
<p>The translated values are:</p>
<ul>
<li>
<p><code dir="ltr">FULL</code> =&gt; <code dir="ltr">FULL</code></p>
</li>
<li>
<p><code dir="ltr">INDEX_ONLY</code> =&gt; <code dir="ltr">INDEX</code></p>
</li>
<li>
<p><code dir="ltr">MVIEW_ONLY</code> =&gt; <code dir="ltr">MVIEW</code></p>
</li>
<li>
<p><code dir="ltr">MVIEW_LOG_ONLY</code> =&gt; <code dir="ltr">MVIEW_LOG_ONLY</code></p>
</li>
</ul>
<p>The type of recommendations that is desired. Possible values:</p>
<ul>
<li>
<p><code dir="ltr">FULL</code> All supported recommendation types will be considered.</p>
</li>
<li>
<p><code dir="ltr">INDEX_ONLY</code> The SQL Access Advisor will only consider index solutions as recommendations.</p>
</li>
<li>
<p><code dir="ltr">MVIEW_ONLY</code> The SQL Access Advisor will consider materialized view and materialized view log solutions as recommendations.</p>
</li>
<li>
<p><code dir="ltr">MVIEW_LOG_ONLY</code> The SQL Access Advisor will only consider materialized view log solutions as recommendations.</p>
</li>
</ul>
<p>The default value is <code dir="ltr">FULL</code>. The datatype is <code dir="ltr">STRINGLIST</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r16c1-t51" headers="r1c1-t51">
<p><code dir="ltr">IMPLEMENT_EXIT_ON_ERROR</code></p>
</td>
<td class="cellalignment4329" headers="r16c1-t51 r1c2-t51">
<p>When performing an <code dir="ltr">IMPLEMENT_TASK</code> operation, this parameter will control behavior when an action fails to implement. If set to <code dir="ltr">TRUE</code>, <code dir="ltr">IMPLEMENT_TASK</code> will stop on the first unexpected error.</p>
<p>The possible values are:</p>
<ul>
<li>
<p><code dir="ltr">TRUE</code></p>
</li>
<li>
<p><code dir="ltr">FALSE</code></p>
</li>
</ul>
<p>The default value is <code dir="ltr">TRUE</code>. The datatype is <code dir="ltr">STRING</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r17c1-t51" headers="r1c1-t51">
<p><code dir="ltr">INDEX_NAME_TEMPLATE</code></p>
</td>
<td class="cellalignment4329" headers="r17c1-t51 r1c2-t51">
<p>Specifies the method by which new index names are formed.</p>
<p>If the <span class="italic">TASK_ID</span> is omitted from the template, names generated by two concurrently executing SQL Access Advisor tasks may conflict and cause undesirable effects. So it is recommended that you include the <span class="italic">TASK_ID</span> in the template. Once formatted, the maximum size of a name is 30 characters.</p>
<p>Valid keywords are:</p>
<ul>
<li>
<p>Any literal value up to 22 characters.</p>
</li>
<li>
<p><code dir="ltr">TABLE</code> Causes the parent table name to be substituted into the index name. If the name is too long, it will be trimmed to fit.</p>
</li>
<li>
<p><code dir="ltr">TASK_ID</code> Causes the current task identifier number to be inserted in hexadecimal form.</p>
</li>
<li>
<p><code dir="ltr">SEQ</code> Causes a sequence number to be inserted in hexadecimal form. Because this number is used to guarantee uniqueness, it is a required token.</p>
</li>
</ul>
<p>The default template is <code dir="ltr"><span class="codeinlineitalic">table</span></code><code dir="ltr">_IDX$$_</code><code dir="ltr"><span class="codeinlineitalic">task_idsequence</span></code>. The datatype is <code dir="ltr">STRING</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r18c1-t51" headers="r1c1-t51">
<p><code dir="ltr">INVALID_ACTION_LIST</code></p>
</td>
<td class="cellalignment4329" headers="r18c1-t51 r1c2-t51">
<p>Contains a fully qualified list of actions that are not eligible for processing in a SQL workload object. The list elements are comma-delimited, and quoted names are supported.</p>
<p>An action can be any string. If an action is not quoted, it will be changed to uppercase lettering and stripped of leading and trailing spaces. An action string is not scanned for correctness.</p>
<p>During a task execution, if a SQL statement&#39;s action matches a name in the action list, it will not be processed by the task. An action name is case sensitive.</p>
<p>The possible values are:</p>
<ul>
<li>
<p>single action</p>
</li>
<li>
<p>comma-delimited action list</p>
</li>
<li>
<p><code dir="ltr">ADVISOR_UNUSED</code></p>
</li>
</ul>
<p>The default value is <code dir="ltr">ADVISOR_UNUSED</code>. The datatype is <code dir="ltr">STRINGLIST</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r19c1-t51" headers="r1c1-t51">
<p><code dir="ltr">INVALID_MODULE_LIST</code></p>
</td>
<td class="cellalignment4329" headers="r19c1-t51 r1c2-t51">
<p>Contains a fully qualified list of modules that are not eligible for processing in a SQL workload object. The list elements are comma-delimited, and quoted names are supported.</p>
<p>A module can be any string. If a module is not quoted, it will be changed to uppercase lettering and stripped of leading and trailing spaces. A module string is not scanned for correctness.</p>
<p>During a task execution, if a SQL statement&#39;s module matches a name in the list, it will not be processed by the task. A module name is case sensitive.</p>
<p>The possible values are:</p>
<ul>
<li>
<p>single application</p>
</li>
<li>
<p>comma-delimited module list</p>
</li>
<li>
<p><code dir="ltr">ADVISOR_UNUSED</code></p>
</li>
</ul>
<p>The default value is <code dir="ltr">ADVISOR_UNUSED</code>. The datatype is <code dir="ltr">STRINGLIST</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r20c1-t51" headers="r1c1-t51">
<p><code dir="ltr">INVALID_SQLSTRING_LIST</code></p>
</td>
<td class="cellalignment4329" headers="r20c1-t51 r1c2-t51">
<p>Contains a fully qualified list of text strings that are not eligible for processing in a SQL workload object. The list elements are comma-delimited, and quoted values are supported.</p>
<p>A SQL string can be any string. If a string is not quoted, it will be changed to uppercase lettering and stripped of leading and trailing spaces. A SQL string is not scanned for correctness.</p>
<p>During a task execution, if a SQL statement contains a string in the SQL string list, it will not be processed by the task.</p>
<p>The possible values are:</p>
<ul>
<li>
<p>single string</p>
</li>
<li>
<p>comma-delimited string list</p>
</li>
<li>
<p><code dir="ltr">ADVISOR_UNUSED</code></p>
</li>
</ul>
<p>The default value is <code dir="ltr">ADVISOR_UNUSED</code>. The datatype is <code dir="ltr">STRINGLIST</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r21c1-t51" headers="r1c1-t51">
<p><code dir="ltr">INVALID_USERNAME_LIST</code></p>
</td>
<td class="cellalignment4329" headers="r21c1-t51 r1c2-t51">
<p>Contains a fully qualified list of user names that are not eligible for processing in a SQL workload object. The list elements are comma-delimited, and quoted names are supported.</p>
<p>During a task execution, if a SQL statement&#39;s user name matches a name in the user name list, it will not be processed by the task. A user name is not case sensitive unless it is quoted.</p>
<p>The possible values are:</p>
<ul>
<li>
<p>single user name</p>
</li>
<li>
<p>comma-delimited user name list</p>
</li>
<li>
<p><code dir="ltr">ADVISOR_UNUSED</code></p>
</li>
</ul>
<p>The default value is <code dir="ltr">ADVISOR_UNUSED</code>. The datatype is <code dir="ltr">STRINGLIST</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r22c1-t51" headers="r1c1-t51">
<p><code dir="ltr">JOURNALING</code></p>
</td>
<td class="cellalignment4329" headers="r22c1-t51 r1c2-t51">
<p>Controls the logging of messages to the journal (<code dir="ltr">DBA_ADVISOR_JOURNAL</code> and <code dir="ltr">USER_ADVISOR_JOURNAL</code> views). The higher the setting, the more information is logged to the journal.</p>
<p>Possible values are:</p>
<ul>
<li>
<p><code dir="ltr">UNUSED</code>: no journal messages</p>
</li>
<li>
<p><code dir="ltr">FATAL</code>: explanation of fatal conditions</p>
</li>
<li>
<p><code dir="ltr">ERROR</code>: explanation of errors</p>
</li>
<li>
<p><code dir="ltr">WARNING</code>: explanation of warnings</p>
</li>
<li>
<p><code dir="ltr">INFORMATION</code>: information message</p>
</li>
<li>
<p><code dir="ltr">INFORMATION2</code>: common information</p>
</li>
<li>
<p><code dir="ltr">INFORMATION3</code>: common information</p>
</li>
<li>
<p><code dir="ltr">INFORMATION4</code>: common information</p>
</li>
<li>
<p><code dir="ltr">INFORMATION5</code>: common information</p>
</li>
<li>
<p><code dir="ltr">INFORMATION6</code>: common information</p>
</li>
</ul>
<p>Each journal value represents all recorded messages at that level or lower. For example, when choosing <code dir="ltr">WARNING</code>, all messages marked <code dir="ltr">WARNING</code> as well as <code dir="ltr">ERROR</code> and <code dir="ltr">FATAL</code> will be recorded in the repository.</p>
<p><code dir="ltr">INFORMATION6</code> represents the most thorough message recording and <code dir="ltr">UNUSED</code> is the least.</p>
<p>The default value is <code dir="ltr">INFORMATION</code>. The datatype is <code dir="ltr">NUMBER</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r23c1-t51" headers="r1c1-t51">
<p><code dir="ltr">LIMITED_PARTITION_SCHEMES</code></p>
</td>
<td class="cellalignment4329" headers="r23c1-t51 r1c2-t51">
<p>User can suggest that the Partition Expert cut off the number of partitioning schemes to investigate. This can help with cutting down the run time of the advisor.</p>
<p>Possible values are:</p>
<ul>
<li>
<p>An integer in the range of 1 to 10</p>
</li>
<li>
<p><code dir="ltr">ADVISOR_UNUSED</code></p>
</li>
</ul>
<p>The default value is <code dir="ltr">ADVISOR_UNUSED</code>. The datatype is <code dir="ltr">NUMBER</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r24c1-t51" headers="r1c1-t51">
<p><code dir="ltr">MAX_NUMBER_PARTITIONS</code></p>
</td>
<td class="cellalignment4329" headers="r24c1-t51 r1c2-t51">
<p>Limits the number of partitions the advisor will recommend for any base table, index, or materialized view.</p>
<p>Possible values are:</p>
<ul>
<li>
<p>An integer in the range of 1 to 4294967295</p>
</li>
<li>
<p><code dir="ltr">ADVISOR_UNLIMITED</code></p>
</li>
<li>
<p><code dir="ltr">ADVISOR_UNUSED</code></p>
</li>
</ul>
<p>The default value is <code dir="ltr">ADVISOR_UNLIMITED</code>. The datatype is <code dir="ltr">NUMBER</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r25c1-t51" headers="r1c1-t51">
<p><code dir="ltr">MODE</code></p>
</td>
<td class="cellalignment4329" headers="r25c1-t51 r1c2-t51">
<p>Specifies the mode by which Access Advisor will operate during an analysis.</p>
<p>Valid values are:</p>
<ul>
<li>
<p><code dir="ltr">LIMITED</code> Indicates the Advisor will attempt to a quick job by limiting the search-space of candidate recommendations, and correspondingly, the results may be of a low quality.</p>
</li>
<li>
<p><code dir="ltr">COMPREHENSIVE</code> Indicates the Advisor will search a large pool of candidates that may take long to run, but the resulting recommendations will be of the highest quality.</p>
</li>
</ul>
<p>The default value is <code dir="ltr">COMPREHENSIVE</code>. The datatype is <code dir="ltr">STRING</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r26c1-t51" headers="r1c1-t51">
<p><code dir="ltr">MVIEW_NAME_TEMPLATE</code></p>
</td>
<td class="cellalignment4329" headers="r26c1-t51 r1c2-t51">
<p>Specifies the method by which new materialized view names are formed.</p>
<p>If the <span class="italic">TASK_ID</span> is omitted from the template, names generated by two concurrently executing SQL Access Advisor tasks may conflict and cause undesirable effects. So it is recommended that you include the <span class="italic">TASK_ID</span> in the template.</p>
<p>The format is any combination of keyword tokens and literals. However, once formatted, the maximum size of a name is 30 characters.</p>
<p>Valid tokens are:</p>
<ul>
<li>
<p>Any literal value up to 22 characters.</p>
</li>
<li>
<p><span class="italic">TASK_ID</span> Causes the current task identifier number to be inserted in hexadecimal form.</p>
</li>
<li>
<p><span class="italic">SEQ</span> Causes a sequence number to be inserted in hexadecimal form. Because this number is used to guarantee uniqueness, it is a required token.</p>
</li>
</ul>
<p>The default template is: <code dir="ltr">MV$$_</code><code dir="ltr"><span class="codeinlineitalic">task_idsequence</span></code>. The datatype is <code dir="ltr">STRING</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r27c1-t51" headers="r1c1-t51">
<p><code dir="ltr">ORDER_LIST</code></p>
</td>
<td class="cellalignment4329" headers="r27c1-t51 r1c2-t51">
<p>This parameter has been deprecated.</p>
<p>Contains the primary natural order in which the Access Advisor processes workload elements during the analysis operation. To determine absolute natural order, Access Advisor sorts the workload using <code dir="ltr">ORDER_LIST</code> values. A comma must separate multiple order keys.</p>
<p>Possible values are:</p>
<ul>
<li>
<p><code dir="ltr">BUFFER_GETS</code> Sets the order using the SQL statement&#39;s buffer-get count value.</p>
</li>
<li>
<p><code dir="ltr">CPU_TIME</code> Sets the order using the SQL statement&#39;s CPU time value.</p>
</li>
<li>
<p><code dir="ltr">DISK_READS</code> Sets the order using the SQL statement&#39;s disk-read count value.</p>
</li>
<li>
<p><code dir="ltr">ELAPSED_TIME</code> Sets the order using the SQL statement&#39;s elapsed time value.</p>
</li>
<li>
<p><code dir="ltr">EXECUTIONS</code> Sets the order using the SQL statement&#39;s execution frequency value.</p>
</li>
<li>
<p><code dir="ltr">OPTIMIZER_COST</code> Sets the order using the SQL statement&#39;s optimizer cost value.</p>
</li>
<li>
<p><code dir="ltr">I/O</code> Sets the order using the SQL statement&#39;s I/O count value.</p>
</li>
<li>
<p><code dir="ltr">PRIORITY</code> Sets the order using the user-supplied business priority value.</p>
</li>
</ul>
<p>All values are accessed in descending order, where a high value is considered more interesting than a low value.</p>
<p>The default value is <code dir="ltr">PRIORITY</code>, <code dir="ltr">OPTIMIZER_COST</code>. The datatype is <code dir="ltr">STRINGLIST</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r28c1-t51" headers="r1c1-t51">
<p><code dir="ltr">PARTITION_NAME_TEMPLATE</code></p>
</td>
<td class="cellalignment4329" headers="r28c1-t51 r1c2-t51">
<p>Specifies the method by which new partition names are formed. The format is any combination of keyword tokens and literals. However, once formatted, the maximum size of a name is 30 characters.</p>
<p>Valid tokens are:</p>
<ul>
<li>
<p>Any literal value up to 22 characters.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">table</span></code> - Causes the parent table name to be substituted into the partition name. If the name is too long, it will be trimmed to fit.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">task_id</span></code> - Causes the current task identifier number to be inserted in hexadecimal form.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">sequence</span></code> - Causes a sequence number to be inserted in hexadecimal form. Because this number is used to guarantee uniqueness, it is a required token.</p>
</li>
</ul>
<p>The default template is <code dir="ltr">PTN$$_</code><code dir="ltr"><span class="codeinlineitalic">table_task_idsequence</span></code>. The datatype is <code dir="ltr">STRING</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r29c1-t51" headers="r1c1-t51">
<p><code dir="ltr">PARTITIONING_GOAL</code></p>
</td>
<td class="cellalignment4329" headers="r29c1-t51 r1c2-t51">
<p>Specifies the approach used to make partitioning recommendations. One possible value is <code dir="ltr">PERFORMANCE</code>, which is the default. The datatype is <code dir="ltr">STRING</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r30c1-t51" headers="r1c1-t51">
<p><code dir="ltr">PARTITIONING_TYPES</code></p>
</td>
<td class="cellalignment4329" headers="r30c1-t51 r1c2-t51">
<p>Specifies the type of partitioning used. Possible values are <code dir="ltr">RANGE</code> and <code dir="ltr">HASH</code>. The datatype is <code dir="ltr">STRING</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r31c1-t51" headers="r1c1-t51">
<p><code dir="ltr">RANKING_MEASURE</code></p>
</td>
<td class="cellalignment4329" headers="r31c1-t51 r1c2-t51">
<p>Contains the primary natural order in which the SQL Access Advisor processes workload elements during the analysis operation. To determine absolute natural order, SQL Access Advisor sorts the workload using <code dir="ltr">RANKING_MEASURE</code> values. A comma must separate multiple order keys.</p>
<p>Possible values are:</p>
<ul>
<li>
<p><code dir="ltr">BUFFER_GETS</code> Sets the order using the SQL statement&#39;s buffer-get count value.</p>
</li>
<li>
<p><code dir="ltr">CPU_TIME</code> Sets the order using the SQL statement&#39;s CPU time value.</p>
</li>
<li>
<p><code dir="ltr">DISK_READS</code> Sets the order using the SQL statement&#39;s disk-read count value.</p>
</li>
<li>
<p><code dir="ltr">ELAPSED_TIME</code> Sets the order using the SQL statement&#39;s elapsed time value.</p>
</li>
<li>
<p><code dir="ltr">EXECUTIONS</code> Sets the order using the SQL statement&#39;s elapsed time value.</p>
</li>
<li>
<p><code dir="ltr">OPTIMIZER_COST</code> Sets the order using the SQL statement&#39;s optimizer cost value.</p>
</li>
<li>
<p><code dir="ltr">PRIORITY</code> Sets the order using the user-supplied business priority value.</p>
</li>
</ul>
<p>All values are accessed in descending order, where a high value is considered more interesting than a low value.</p>
<p>The default value is <code dir="ltr">PRIORITY</code>, <code dir="ltr">OPTIMIZER_COST</code>. The datatype is <code dir="ltr">STRINGLIST</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r32c1-t51" headers="r1c1-t51">
<p><code dir="ltr">RECOMMEND_MV_EXACT_TEXT_MATCH</code></p>
</td>
<td class="cellalignment4329" headers="r32c1-t51 r1c2-t51">
<p>When considering candidate materialized views, exact text match solutions will only be included if this parameter contains <code dir="ltr">TRUE</code>.</p>
<p>The possible values are:</p>
<ul>
<li>
<p><code dir="ltr">TRUE</code></p>
</li>
<li>
<p><code dir="ltr">FALSE</code></p>
</li>
</ul>
<p>The default value is <code dir="ltr">TRUE</code>. The datatype is <code dir="ltr">STRING</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r33c1-t51" headers="r1c1-t51">
<p><code dir="ltr">RECOMMENDED_TABLESPACES</code></p>
</td>
<td class="cellalignment4329" headers="r33c1-t51 r1c2-t51">
<p>Allows the SQL Access Advisor to recommend optimal tablespaces for any partitioning scheme. If this is not set, the SQL Access Advisor will simply recommend a partitioning method but give no advice on physical storage.</p>
<p>Possible values are:</p>
<ul>
<li>
<p><code dir="ltr">TRUE</code></p>
</li>
<li>
<p><code dir="ltr">FALSE</code> (the default)</p>
</li>
</ul>
<p>The datatype is <code dir="ltr">STRING</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r34c1-t51" headers="r1c1-t51">
<p><code dir="ltr">REFRESH_MODE</code></p>
</td>
<td class="cellalignment4329" headers="r34c1-t51 r1c2-t51">
<p>Specifies whether materialized views are refreshed <code dir="ltr">ON_DEMAND</code> or <code dir="ltr">ON_COMMIT</code>. This will be used to weigh the impact of materialized view refresh when the parameter <code dir="ltr">dml_volatility</code> is set to <code dir="ltr">TRUE</code>.</p>
<p>Possible values are:</p>
<ul>
<li>
<p><code dir="ltr">ON_DEMAND</code></p>
</li>
<li>
<p><code dir="ltr">ON_COMMIT</code></p>
</li>
</ul>
<p>The default value is <code dir="ltr">ON_DEMAND</code>. The datatype is <code dir="ltr">STRING</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r35c1-t51" headers="r1c1-t51">
<p><code dir="ltr">REPORT_DATE_FORMAT</code></p>
</td>
<td class="cellalignment4329" headers="r35c1-t51 r1c2-t51">
<p>This is the default date and time formatting template. The default format is <code dir="ltr">DD/MM/YYYYHH24:MI</code>. The datatype is <code dir="ltr">STRING</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r36c1-t51" headers="r1c1-t51">
<p><code dir="ltr">SHOW_RETAINS</code></p>
</td>
<td class="cellalignment4329" headers="r36c1-t51 r1c2-t51">
<p>Controls the display of <code dir="ltr">RETAIN</code> actions within an implementation script and the SQL Access Advisor wizard.</p>
<p>The possible values are:</p>
<ul>
<li>
<p><code dir="ltr">TRUE</code></p>
</li>
<li>
<p><code dir="ltr">FALSE</code></p>
</li>
</ul>
<p>The default value is <code dir="ltr">TRUE</code>. The datatype is <code dir="ltr">STRING</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r37c1-t51" headers="r1c1-t51">
<p><code dir="ltr">SQL_LIMIT</code></p>
</td>
<td class="cellalignment4329" headers="r37c1-t51 r1c2-t51">
<p>Specifies the number of SQL statements to be analyzed. The <code dir="ltr">SQL_LIMIT</code> filter is applied after all other filters have been applied. For example, if only statements referencing the table foo.bar are to be accepted, the <code dir="ltr">SQL_LIMIT</code> value will be only apply to those statements.</p>
<p>When used in conjunction with the parameter <code dir="ltr">ORDER_LIST</code>, SQL Access Advisor will process the most interesting SQL statements by ordering the statements according to the specified sort keys.</p>
<p>The possible values are:</p>
<ul>
<li>
<p>an integer in the range of 1 to 2147483647</p>
</li>
<li>
<p><code dir="ltr">ADVISOR_UNLIMITED</code></p>
</li>
<li>
<p><code dir="ltr">ADVISOR_UNUSED</code></p>
</li>
</ul>
<p>The default value is <code dir="ltr">ADVISOR_UNUSED</code>. The datatype is <code dir="ltr">NUMBER</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r38c1-t51" headers="r1c1-t51">
<p><code dir="ltr">START_TIME</code></p>
</td>
<td class="cellalignment4329" headers="r38c1-t51 r1c2-t51">
<p>Specifies a start time for selecting SQL statements. If the statement did not execute on or before the specified time, it will not be processed.</p>
<p>Each date must be in the standard Oracle form of MM-DD-YYYY HH24:MI:SS, where:</p>
<ul>
<li>
<p>DD is the numeric date</p>
</li>
<li>
<p>MM is the numeric month</p>
</li>
<li>
<p>YYYY is the numeric year</p>
</li>
<li>
<p>HH is the hour in 24 hour format</p>
</li>
<li>
<p>MI is the minute</p>
</li>
<li>
<p>SS is the second</p>
</li>
</ul>
<p>The datatype is <code dir="ltr">STRING</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r39c1-t51" headers="r1c1-t51">
<p><code dir="ltr">STORAGE_CHANGE</code></p>
</td>
<td class="cellalignment4329" headers="r39c1-t51 r1c2-t51">
<p>Contains the amount of space adjustment that can be consumed by SQL Access Advisor recommendations. Zero or negative values are only permitted if the workload scope is marked as <code dir="ltr">FULL</code>.</p>
<p>When the SQL Access Advisor produces a set of recommendations, the resultant physical structures must be able to fit into the budgeted space. A space budget is computed by adding the <code dir="ltr">STORAGE_CHANGE</code> value to the space quantity currently used by existing access structures. A negative <code dir="ltr">STORAGE_CHANGE</code> value may force SQL Access Advisor to remove existing structures in order to shrink space demand.</p>
<p>Possible values:</p>
<ul>
<li>
<p>Any valid integer including negative values, zero and positive values.</p>
</li>
</ul>
<p>The default value is <code dir="ltr">ADVISOR_UNLIMITED</code>. The datatype is <code dir="ltr">NUMBER</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r40c1-t51" headers="r1c1-t51">
<p><code dir="ltr">TIME_LIMIT</code></p>
</td>
<td class="cellalignment4329" headers="r40c1-t51 r1c2-t51">
<p>Specifies the time in minutes that the SQL Access Advisor can use to perform an analysis operation. If the SQL Access Advisor reaches a specified recommendation quality or all input data has been analyzed, processing will terminate regardless of any remaining time.</p>
<p>Possible values:</p>
<ul>
<li>
<p>An integer in the range of 1 to 10,000</p>
</li>
<li>
<p><code dir="ltr">ADVISOR_UNLIMITED</code></p>
</li>
</ul>
<p>The default value is 720 (12 hours). The datatype is <code dir="ltr">NUMBER</code>.</p>
<p>Note that specifying <code dir="ltr">ADVISOR_UNLIMITED</code> has the same effect as setting the parameter to the maximum of 10,000 (about one week). The SQL Access Advisor will never run for more than 10,000 minutes.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r41c1-t51" headers="r1c1-t51">
<p><code dir="ltr">VALID_ACTION_LIST</code></p>
</td>
<td class="cellalignment4329" headers="r41c1-t51 r1c2-t51">
<p>Contains a fully qualified list of actions that are eligible for processing in a SQL workload object. The list elements are comma-delimited, and quoted names are supported.</p>
<p>An action can be any string. If an action is not quoted, it will be changed to uppercase lettering and stripped of leading and trailing spaces. An action string is not scanned for correctness.</p>
<p>During a task execution, if a SQL statement&#39;s action does not match a name in the action list, it will not be processed by the task. An action name is case sensitive.</p>
<p>The possible values are:</p>
<ul>
<li>
<p>single action</p>
</li>
<li>
<p>comma-delimited action list</p>
</li>
<li>
<p><code dir="ltr">ADVISOR_UNUSED</code></p>
</li>
</ul>
<p>The default value is <code dir="ltr">ADVISOR_UNUSED</code>. The datatype is <code dir="ltr">STRINGLIST</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r42c1-t51" headers="r1c1-t51">
<p><code dir="ltr">VALID_MODULE_LIST</code></p>
</td>
<td class="cellalignment4329" headers="r42c1-t51 r1c2-t51">
<p>Contains a fully qualified list of application modules that are eligible for processing in a SQL workload object. The list elements are comma-delimited, and quoted names are supported.</p>
<p>A module can be any string. If a module is not quoted, it will be changed to uppercase lettering and stripped of leading and trailing spaces. A module string is not scanned for correctness.</p>
<p>During a task execution, if a SQL statement&#39;s module does not match a name in the module list, it will not be processed by the task. A module name is case sensitive.</p>
<p>The possible values are:</p>
<ul>
<li>
<p>single application</p>
</li>
<li>
<p>comma-delimited module list</p>
</li>
<li>
<p><code dir="ltr">ADVISOR_UNUSED</code></p>
</li>
</ul>
<p>The default value is <code dir="ltr">ADVISOR_UNUSED</code>. The datatype is <code dir="ltr">STRINGLIST</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r43c1-t51" headers="r1c1-t51">
<p><code dir="ltr">VALID_SQLSTRING_LIST</code></p>
</td>
<td class="cellalignment4329" headers="r43c1-t51 r1c2-t51">
<p>Contains a fully qualified list of text strings that are eligible for processing in a SQL workload object. The list elements are comma-delimited, and quoted names are supported.</p>
<p>A SQL string can be any string. If a string is not quoted, it will be changed to uppercase lettering and stripped of leading and trailing spaces. A SQL string is not scanned for correctness.</p>
<p>During a task execution, if a SQL statement does not contain string in the SQL string list, it will not be processed by the task.</p>
<p>The possible values are:</p>
<ul>
<li>
<p>single string</p>
</li>
<li>
<p>comma-delimited string list</p>
</li>
<li>
<p><code dir="ltr">ADVISOR_UNUSED</code></p>
</li>
</ul>
<p>The default value is <code dir="ltr">ADVISOR_UNUSED</code>. The datatype is <code dir="ltr">STRINGLIST</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r44c1-t51" headers="r1c1-t51">
<p><code dir="ltr">VALID_TABLE_LIST</code></p>
</td>
<td class="cellalignment4329" headers="r44c1-t51 r1c2-t51">
<p>Contains a fully qualified list of tables that are eligible for tuning. The list elements are comma-delimited, and quoted identifiers are supported. Wildcard specifications are supported for tables. The default value is all tables within the user&#39;s scope are eligible for tuning. Supported wildcard character is <code dir="ltr">%</code>. A <code dir="ltr">%</code> wildcard matches any set of consecutive characters.</p>
<p>When a SQL statement is processed, it will not be accepted unless at least one referenced table is specified in the valid table list. If the list is unused, then all table references within a SQL statement are considered valid.</p>
<p>The valid syntax for a table reference is:</p>
<ul>
<li>
<p><code dir="ltr">schema.table</code></p>
</li>
<li>
<p><code dir="ltr">schema</code></p>
</li>
<li>
<p><code dir="ltr">schema.%</code> (equivalent to <code dir="ltr">schema</code>)</p>
</li>
<li>
<p>comma-delimited action list</p>
</li>
<li>
<p><code dir="ltr">ADVISOR_UNUSED</code></p>
</li>
</ul>
<p>The possible values are:</p>
<ul>
<li>
<p>single table reference</p>
</li>
<li>
<p>comma-delimited reference list</p>
</li>
<li>
<p><code dir="ltr">ADVISOR_UNUSED</code></p>
</li>
</ul>
<p>The default value is <code dir="ltr">ADVISOR_UNUSED</code>. The datatype is <code dir="ltr">TABLELIST</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r45c1-t51" headers="r1c1-t51">
<p><code dir="ltr">VALID_USERNAME_LIST</code></p>
</td>
<td class="cellalignment4329" headers="r45c1-t51 r1c2-t51">
<p>Contains a fully qualified list of user names that are eligible for processing in a SQL workload object. The list elements are comma-delimited, and quoted names are supported.</p>
<p>During a task execution, if a SQL statement&#39;s user name does not match a name in the user name list, it will not be processed by the task. A user name is not case sensitive unless it is quoted.</p>
<p>The possible values are:</p>
<ul>
<li>
<p>single user name</p>
</li>
<li>
<p>comma-delimited user name list</p>
</li>
<li>
<p><code dir="ltr">ADVISOR_UNUSED</code></p>
</li>
</ul>
<p>The default value is <code dir="ltr">ADVISOR_UNUSED</code>. The datatype is <code dir="ltr">STRINGLIST</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r46c1-t51" headers="r1c1-t51">
<p><code dir="ltr">WORKLOAD_SCOPE</code></p>
</td>
<td class="cellalignment4329" headers="r46c1-t51 r1c2-t51">
<p>Describes the level of application coverage the workload represents. Possible values are <code dir="ltr">FULL</code> and <code dir="ltr">PARTIAL</code>.</p>
<p><code dir="ltr">FULL</code> Should be used if the workload contains all interesting application SQL statements for the targeted tables.</p>
<p><code dir="ltr">PARTIAL</code> (default) Should be used if the workload contains anything less than a full representation of the interesting application SQL statements for the targeted tables.</p>
<p>The datatype is <code dir="ltr">STRING</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformalwidemax" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref423"></a>Segment Advisor Parameters</p>
<p><a href="#CIHEDBIB">Table 19-36</a> lists the input task parameters that can be set in the Segment Advisor using the <code dir="ltr">SET_TASK_PARAMETER</code> procedure.</p>
<div id="ARPLS65154" class="tblformal">
<p class="titleintable"><a id="sthref424"></a><a id="CIHEDBIB"></a>Table 19-36 Segment Advisor Task Parameters</p>
<table class="cellalignment4330" title="Segment Advisor Task Parameters" summary="Segment Advisor Task Parameters" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t52">Parameter</th>
<th class="cellalignment4328" id="r1c2-t52">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t52" headers="r1c1-t52">
<p><code dir="ltr">MODE</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t52 r1c2-t52">
<p>The data to use for analysis. The default value is <code dir="ltr">COMPREHENSIVE</code>, and the possible values are:</p>
<ul>
<li>
<p><code dir="ltr">LIMITED</code>: Analysis restricted to statistics available in the Automatic Workload Repository</p>
</li>
<li>
<p><code dir="ltr">COMPREHENSIVE</code>: Analysis based on sampling and Automatic Workload Repository statistics</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t52" headers="r1c1-t52">
<p><code dir="ltr">TIME_LIST</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t52 r1c2-t52">
<p>The time limit for which the Advisor should run. It is specified in seconds, and the default and possible values are <code dir="ltr">UNLIMITED</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t52" headers="r1c1-t52">
<p><code dir="ltr">RECOMMEND_ALL</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t52 r1c2-t52">
<p>Whether to generate recommendations for all segments.</p>
<p>The default value is <code dir="ltr">TRUE</code>. If set to <code dir="ltr">TRUE</code>, it generates recommendations all segments specified by the user. If set to <code dir="ltr">FALSE</code>, it generates recommendations for only those objects that are eligible for shrink.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref425"></a>Examples</p>
<pre dir="ltr">DECLARE
  task_id NUMBER;
  task_name VARCHAR2(30);
BEGIN
  task_name := &#39;My Task&#39;;

   DBMS_ADVISOR.CREATE_TASK(DBMS_ADVISOR.SQLACCESS_ADVISOR, task_id, task_name);
   DBMS_ADVISOR.SET_TASK_PARAMETER(task_name, &#39;VALID_TABLELIST&#39;,
      &#39;SH.%,SCOTT.EMP&#39;);
END;
/
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref426"></a>Undo Advisor Task Parameters</p>
<p><a href="#CIHIFJIE">Table 19-37</a> lists the input task parameters that can be set in the Undo Advisor using the <code dir="ltr">SET_TASK_PARAMETER</code> procedure.</p>
<div id="ARPLS65155" class="tblformal">
<p class="titleintable"><a id="sthref427"></a><a id="CIHIFJIE"></a>Table 19-37 Undo Advisor Task Parameters</p>
<table class="cellalignment4330" title="Undo Advisor Task Parameters" summary="Undo Advisor Task Parameters" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t53">Parameter</th>
<th class="cellalignment4328" id="r1c2-t53">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t53" headers="r1c1-t53">
<p><code dir="ltr">TARGET_OBJECTS</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t53 r1c2-t53">
<p>The undo tablespace of the system. There is no default value, and the possible value is <code dir="ltr">UNDO_TBS</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t53" headers="r1c1-t53">
<p><code dir="ltr">START_SNAPSHOT</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t53 r1c2-t53">
<p>The starting time for the system to perform analysis using the snapshot numbers in the AWR repository. There is no default value and the possible values are the valid snapshot numbers in the AWR repository.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t53" headers="r1c1-t53">
<p><code dir="ltr">END_SNAPSHOT</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t53 r1c2-t53">
<p>The ending time for the system to perform analysis using the snapshot numbers in the AWR repository. There is no default value and the possible values are the valid snapshot numbers in the AWR repository.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t53" headers="r1c1-t53">
<p><code dir="ltr">BEGIN_TIME_SEC</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t53 r1c2-t53">
<p>The number of seconds between the beginning time of the period and now. Describes a period of time for the system to perform analysis. <code dir="ltr">BEGIN_TIME_SEC</code> should be greater than <code dir="ltr">END_TIME_SEC</code>. There is no default value and the possible values are any positive integer.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t53" headers="r1c1-t53">
<p><code dir="ltr">END_TIME_SEC</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t53 r1c2-t53">
<p>The number of seconds between the ending time of the period and now. <code dir="ltr">END_TIME_SEC</code> should be less than <code dir="ltr">BEGIN_TIME_SEC</code>. There is no default value and the possible values are any positive integer.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref428"></a>Examples</p>
<pre dir="ltr">DECLARE
   tname  VARCHAR2(30);
   oid    NUMBER;
   BEGIN
     DBMS_ADVISOR.CREATE_TASK(&#39;Undo Advisor&#39;, tid, tname, &#39;Undo Advisor Task&#39;);
     DBMS_ADVISOR.CREATE_OBJECT(tname, &#39;UNDO_TBS&#39;, null, null, null, &#39;null&#39;, oid);
     DBMS_ADVISOR.SET_TASK_PARAMETER(tname, &#39;TARGET_OBJECTS&#39;, oid);
     DBMS_ADVISOR.SET_TASK_PARAMETER(tname, &#39;START_SNAPSHOT&#39;, 1);
     DBMS_ADVISOR.SET_TASK_PARAMETER(tname, &#39;END_SNAPSHOT&#39;, 2);
     DBMS_ADVISOR.EXECUTE_TASK(tname);
   END;
/
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref429"></a>Automatic Database Diagnostic Monitor (ADDM) Task Parameters</p>
<p><a href="#CIHBEBIA">Table 19-38</a> lists the input task parameters that can be set in ADDM using the <code dir="ltr">SET_TASK_PARAMETER</code> procedure. See <a class="olink TGDBA" href="../TGDBA/toc.htm"><span class="italic">Oracle Database Performance Tuning Guide</span></a> for more information on using these parameters.</p>
<div id="ARPLS65156" class="tblformal">
<p class="titleintable"><a id="sthref430"></a><a id="CIHBEBIA"></a>Table 19-38 ADDM Task Parameters</p>
<table class="cellalignment4330" title="ADDM Task Parameters" summary="ADDM Task Parameters" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t54">Parameter</th>
<th class="cellalignment4328" id="r1c2-t54">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t54" headers="r1c1-t54">
<p><code dir="ltr">START_SNAPSHOT</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t54 r1c2-t54">
<p>The starting time for the system to perform analysis using the snapshot numbers in the AWR repository. There is no default value, and the possible values are the valid snapshot numbers in the AWR repository.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t54" headers="r1c1-t54">
<p><code dir="ltr">END_SNAPSHOT</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t54 r1c2-t54">
<p>The ending time for the system to perform analysis using the snapshot numbers in the AWR repository. There is no default value, and the possible values are the valid snapshot numbers in the AWR repository.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t54" headers="r1c1-t54">
<p><code dir="ltr">DB_ID</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t54 r1c2-t54">
<p>The database for <code dir="ltr">START_SNAPSHOT</code> and <code dir="ltr">END_SNAPSHOT</code>. The default value is the current database ID.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t54" headers="r1c1-t54">
<p><code dir="ltr">INSTANCE</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t54 r1c2-t54">
<p>The instance for <code dir="ltr">START_SNAPSHOT</code> and <code dir="ltr">END_SNAPSHOT</code>. The default value is 0 or <code dir="ltr">UNUSED</code>, and the possible values are all positive integers. By default, all instances are analyzed.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t54" headers="r1c1-t54">
<p><code dir="ltr">INSTANCES</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t54 r1c2-t54">
<p>If the <code dir="ltr">INSTANCE</code> parameter has been set, <code dir="ltr">INSTANCES</code> is ignored. The default value is <code dir="ltr">UNUSED</code>, and the possible values are comma-separated list of instance numbers (for example, &#34;1, 3, 5&#34;). By default, all instances are analyzed.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t54" headers="r1c1-t54">
<p><code dir="ltr">DBIO_EXPECTED</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t54 r1c2-t54">
<p>The average time to read the database block in microseconds. The default value is 10 milliseconds, and the possible values are system-dependent.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref431"></a>Examples</p>
<p>The following creates and executes an ADDM task for the current database and an AWR snapshot range between 19 and 26. Note that this example will analyze all instances, whether you have only one or an Oracle RAC database.</p>
<pre dir="ltr">DECLARE
   tid     NUMBER;
   tname VARCHAR2(30) := &#39;ADDM_TEST&#39;;
BEGIN
   DBMS_ADVISOR.CREATE_TASK(&#39;ADDM&#39;, tid, tname, &#39;my test&#39;);
   DBMS_ADVISOR.SET_TASK_PARAMETER(tname, &#39;START_SNAPSHOT&#39;, &#39;19&#39;);
   DBMS_ADVISOR.SET_TASK_PARAMETER(tname, &#39;END_SNAPSHOT&#39;, &#39;26&#39;);
   DBMS_ADVISOR.EXECUTE_TASK(tname);
END;
/
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink TGDBA" href="../TGDBA/toc.htm"><span class="italic">Oracle Database Performance Tuning Guide</span></a> for more information regarding ADDM usage</p>
</li>
<li>
<p>The <a href="d_addm.htm#CACIFHFA">DBMS_ADDM</a> package for details on how to create and execute ADDM tasks</p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref432"></a>SQL Tuning Advisor Task Parameters</p>
<p>See the <a href="d_sqltun.htm#CHDGAJCI">DBMS_SQLTUNE</a> package and <a class="olink TGSQL577" href="../TGSQL/tgsql_sqltune.htm#TGSQL577"><span class="italic">Oracle Database SQL Tuning Guide</span></a> for more information.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65157" class="refsect2"><a id="i1001342"></a>
<h3 class="refsect2"><a id="sthref433"></a>TUNE_MVIEW Procedure</h3>
<p>This procedure shows how to decompose a materialized view into two or more materialized views and to restate the materialized view in a way that is more advantageous for fast refresh and query rewrite. It also shows how to fix materialized view logs and to enable query rewrite.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref434"></a>Syntax</p>
<pre dir="ltr">DBMS_ADVISOR.TUNE_MVIEW (
   task_name IN OUT VARCHAR2, 
   mv_create_stmt IN [CLOB | VARCHAR2]);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref435"></a>Parameters</p>
<div id="ARPLS65158" class="tblformal">
<p class="titleintable"><a id="sthref436"></a><a id="sthref437"></a>Table 19-39 TUNE_MVIEW Procedure Parameters</p>
<table class="cellalignment4330" title="TUNE_MVIEW Procedure Parameters" summary="This table describes the parameters of DBMS_ADVISOR.TUNE_MVIEW." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t56">Parameter</th>
<th class="cellalignment4328" id="r1c2-t56">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t56" headers="r1c1-t56">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t56 r1c2-t56">
<p>The task name for looking up the results in a catalog view. If not specified, the system will generate a name and return.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t56" headers="r1c1-t56">
<p><code dir="ltr">mv_create_stmt</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t56 r1c2-t56">
<p>The original materialized view creation statement.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink TGSQL591" href="../TGSQL/tgsql_sqlaccess.htm#TGSQL591"><span class="italic">Oracle Database SQL Tuning Guide</span></a> for more information about using the <code dir="ltr">TUNE_MVIEW</code> procedure</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref438"></a>Usage Notes</p>
<p>Executing <code dir="ltr">TUNE_MVIEW</code> generates two sets of output results: one is for <code dir="ltr">CREATE</code> implementation and the other is for undoing the <code dir="ltr">CREATE</code> <code dir="ltr">MATERIALIZED</code> <code dir="ltr">VIEW</code> implementation. The output results are accessible through <code dir="ltr">USER_TUNE_MVIEW</code> and <code dir="ltr">DBA_TUNE_MVIEW</code> views. You can also use <code dir="ltr">DBMS_ADVISOR.GET_TASK_SCRIPT</code> and <code dir="ltr">DBMS_ADVISOR.CREATE_FILE</code> to output the <code dir="ltr">TUNE_MVIEW</code> results into a script file for later execution.</p>
<p class="subhead2"><a id="ARPLS65159"></a>USER_TUNE_MVIEW and DBA_TUNE_MVIEW Views</p>
<p>These views are to get the result after executing the <code dir="ltr">TUNE_MVIEW</code> procedure.</p>
<div id="ARPLS65160" class="tblformal">
<p class="titleintable"><a id="sthref439"></a><a id="sthref440"></a>Table 19-40 USER_TUNE_MVIEW and DBA_TUNE_MVIEW Views</p>
<table class="cellalignment4330" title="USER_TUNE_MVIEW and DBA_TUNE_MVIEW Views" summary="This table describes the parameters of DBMS_ADVISOR.USER_TUNE_MVIEW." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t58">Column Name</th>
<th class="cellalignment4328" id="r1c2-t58">Column Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t58" headers="r1c1-t58">
<p><code dir="ltr">OWNER</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t58 r1c2-t58">
<p>The materialized view owner&#39;s name.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t58" headers="r1c1-t58">
<p><code dir="ltr">TASK_NAME</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t58 r1c2-t58">
<p>The task name as a key to access the set of recommendations</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t58" headers="r1c1-t58">
<p><code dir="ltr">SCRIPT_TYPE</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t58 r1c2-t58">
<p>Recommendation ID used to indicate the row is for <code dir="ltr">IMPLEMENTATION</code> or <code dir="ltr">UNDO</code> script.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t58" headers="r1c1-t58">
<p><code dir="ltr">ACTION_ID</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t58 r1c2-t58">
<p>Action ID used as the command order number.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t58" headers="r1c1-t58">
<p><code dir="ltr">STATEMENT</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t58 r1c2-t58">
<p>For <code dir="ltr">TUNE_MVIEW</code> output, this column represents the following statements, and includes statement properties such as <code dir="ltr">REFRESH</code> and <code dir="ltr">REWRITE</code> options:</p>
<ul>
<li>
<p><code dir="ltr">CREATE MATERIALIZED VIEW LOG</code></p>
</li>
<li>
<p><code dir="ltr">ALTER MATERIALIZED VIEW LOG FORCE</code></p>
</li>
<li>
<p><code dir="ltr">[CREATE | DROP] MATERIALIZED VIEW</code></p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref441"></a>Examples</p>
<pre dir="ltr">name VARCHAR2(30);
DBMS_ADVISOR.TUNE_MVIEW.(name, &#39;SELECT AVG(C1) FROM my_fact_table WHERE c10 = 7&#39;);
</pre>
<p>The following is an example to show how to use <code dir="ltr">TUNE_MVIEW</code> to optimize a <code dir="ltr">CREATE</code> <code dir="ltr">MATERIALIZED</code> <code dir="ltr">VIEW</code> statement:</p>
<pre dir="ltr">NAME VARCHAR2(30) := &#39;my_tune_mview_task&#39;;
EXECUTE DBMS_ADVISOR.TUNE_MVIEW (name, &#39;CREATE MATERIALIZED VIEW MY_MV
REFRESH FAST AS SELECT C2, AVG(C1) FROM MY_FACT_TABLE WHERE C10 = 7
GROUP BY C2&#39;);
</pre>
<p>You can view the <code dir="ltr">CREATE</code> output results by querying <code dir="ltr">USER_TUNE_MVIEW</code> or <code dir="ltr">DBA_TUNE_MVIEW</code> as the following example:</p>
<pre dir="ltr">SELECT * FROM USER_TUNE_MVIEW WHERE TASK_NAME=&#39;my_tune_mview_task&#39; AND
SCRIPT_TYPE=&#39;CREATE&#39;;
</pre>
<p>Alternatively, you can save the output results in an external script file as in the following example:</p>
<pre dir="ltr">CREATE DIRECTORY TUNE_RESULTS AS  &#39;&#39;/myscript_dir&#39;&#39; ; 
GRANT READ, WRITE ON DIRECTORY TUNE_RESULTS TO PUBLIC; 
EXECUTE DBMS_ADVISOR.CREATE_FILE(DBMS_ADVISOR.GET_TASK_SCRIPT(&#39;my_tune_mview_task&#39;), -
&#39;/homes/tune&#39;,&#39;my_tune_mview_create.sql&#39;);
</pre>
<p>The preceding statement will save the <code dir="ltr">CREATE</code> output results in <code dir="ltr">/myscript_dir/my_tune_mview_create.sql</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65161" class="refsect2"><a id="i1017783"></a>
<h3 class="refsect2"><a id="sthref442"></a>UPDATE_OBJECT Procedure</h3>
<p>This procedure updates an existing task object. Task objects are typically used as input data for a particular advisor. Segment advice can be generated at the object, segment, or tablespace level.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref443"></a>Syntax</p>
<pre dir="ltr">DBMS_ADVISOR.UPDATE_OBJECT (
   task_name       IN VARCHAR2
   object_id       IN NUMBER,
   attr1           IN VARCHAR2 := NULL,
   attr2           IN VARCHAR2 := NULL,
   attr3           IN VARCHAR2 := NULL,
   attr4           IN CLOB := NULL,
   attr5           IN VARCHAR2 := NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref444"></a>Parameters</p>
<div id="ARPLS65162" class="tblformal">
<p class="titleintable"><a id="sthref445"></a><a id="sthref446"></a>Table 19-41 UPDATE_OBJECT Procedure Parameters</p>
<table class="cellalignment4330" title="UPDATE_OBJECT Procedure Parameters" summary="This table describes the parameters of DBMS_ADVISOR.UPDATE_OBJECT." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t59">Parameter</th>
<th class="cellalignment4328" id="r1c2-t59">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t59" headers="r1c1-t59">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t59 r1c2-t59">
<p>A valid advisor task name that uniquely identifies an existing task.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t59" headers="r1c1-t59">
<p><code dir="ltr">object_id</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t59 r1c2-t59">
<p>The advisor-assigned object identifier.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t59" headers="r1c1-t59">
<p><code dir="ltr">attr1</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t59 r1c2-t59">
<p>Advisor-specific data. If set to <code dir="ltr">NULL</code>, there will be no effect on the target object.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t59" headers="r1c1-t59">
<p><code dir="ltr">attr2</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t59 r1c2-t59">
<p>Advisor-specific data. If set to <code dir="ltr">NULL</code>, there will be no effect on the target object.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t59" headers="r1c1-t59">
<p><code dir="ltr">attr3</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t59 r1c2-t59">
<p>Advisor-specific data. If set to <code dir="ltr">NULL</code>, there will be no effect on the target object.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t59" headers="r1c1-t59">
<p><code dir="ltr">attr4</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t59 r1c2-t59">
<p>Advisor-specific data. If set to <code dir="ltr">NULL</code>, there will be no effect on the target object.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t59" headers="r1c1-t59">
<p><code dir="ltr">attr5</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t59 r1c2-t59">
<p>Advisor-specific data. If set to null, there will be no effect on the target object.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>The attribute parameters have different values depending upon the object type. See <a class="olink ADMIN01401" href="../ADMIN/schema.htm#ADMIN01401"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> for details regarding these parameters and object types.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref447"></a>Usage Notes</p>
<p>If for the object level, advice is generated on all partitions of the object (if the object is partitioned). The advice is not cascaded to any dependent objects. If for the segment level, advice can be obtained on a single segment, such as the partition or subpartition of a table, index, or lob column. If for a tablespace level, target advice for every segment in the tablespace will be generated.</p>
<p>See <a class="olink ADMIN01401" href="../ADMIN/schema.htm#ADMIN01401"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> for further information regarding the Segment Advisor.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref448"></a>Examples</p>
<pre dir="ltr">DECLARE
  task_id NUMBER;
  task_name VARCHAR2(30);
  obj_id NUMBER;
BEGIN
  task_name := &#39;My Task&#39;;

  DBMS_ADVISOR.CREATE_TASK(DBMS_ADVISOR.SQLACCESS_ADVISOR, task_id, task_name);
  DBMS_ADVISOR.CREATE_OBJECT (task_name,&#39;SQL&#39;,NULL,NULL,NULL,
                              &#39;SELECT * FROM SH.SALES&#39;,obj_id);
  DBMS_ADVISOR.UPDATE_OBJECT (task_name, obj_id,NULL,NULL,NULL,
                              &#39;SELECT count(*) FROM SH.SALES&#39;);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65163" class="refsect2"><a id="i1003104"></a>
<h3 class="refsect2"><a id="sthref449"></a>UPDATE_REC_ATTRIBUTES Procedure</h3>
<p>This procedure updates the owner, name, and tablespace for a recommendation.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref450"></a>Syntax</p>
<pre dir="ltr">DBMS_ADVISOR.UPDATE_REC_ATTRIBUTES (
   task_name            IN VARCHAR2
   rec_id               IN NUMBER,
   action_id            IN NUMBER,
   attribute_name       IN VARCHAR2,
   value                IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref451"></a>Parameters</p>
<div id="ARPLS65164" class="tblformal">
<p class="titleintable"><a id="sthref452"></a><a id="sthref453"></a>Table 19-42 UPDATE_REC_ATTRIBUTES Procedure Parameters</p>
<table class="cellalignment4330" title="UPDATE_REC_ATTRIBUTES Procedure Parameters" summary="This table describes the parameters of DBMS_ADVISOR.UPDATE_REC_ATTRIBUTES." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t60">Parameter</th>
<th class="cellalignment4328" id="r1c2-t60">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t60" headers="r1c1-t60">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t60 r1c2-t60">
<p>The task name that uniquely identifies an existing task.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t60" headers="r1c1-t60">
<p><code dir="ltr">rec_id</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t60 r1c2-t60">
<p>The Advisor-generated identifier number that is assigned to the recommendation.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t60" headers="r1c1-t60">
<p><code dir="ltr">action_id</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t60 r1c2-t60">
<p>The Advisor-generated action identifier that is assigned to the particular command.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t60" headers="r1c1-t60">
<p><code dir="ltr">attribute_name</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t60 r1c2-t60">
<p>Name of the attribute to be changed. The valid values are:</p>
<ul>
<li>
<p><code dir="ltr">owner</code> The new owner of the object.</p>
</li>
<li>
<p><code dir="ltr">name</code> The new name of the object.</p>
</li>
<li>
<p><code dir="ltr">tablespace</code> The new tablespace for the object.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t60" headers="r1c1-t60">
<p><code dir="ltr">value</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t60 r1c2-t60">
<p>Specifies the new value for the recommendation attribute.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref454"></a>Usage Notes</p>
<p>Recommendation attributes cannot be modified unless the task has successfully executed.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref455"></a>Examples</p>
<pre dir="ltr">DECLARE
  task_id NUMBER;
  task_name VARCHAR2(30);
  workload_name VARCHAR2(30);
  attribute VARCHAR2(100);
BEGIN
  task_name := &#39;My Task&#39;;
  workload_name := &#39;My Workload&#39;;

  DBMS_ADVISOR.CREATE_TASK(DBMS_ADVISOR.SQLACCESS_ADVISOR, task_id, task_name);
  DBMS_ADVISOR.CREATE_SQLWKLD(workload_name, &#39;My Workload&#39;);
  DBMS_ADVISOR.ADD_SQLWKLD_REF(task_name, workload_name);
  DBMS_ADVISOR.ADD_SQLWKLD_STATEMENT(workload_name, &#39;MONTHLY&#39;, &#39;ROLLUP&#39;,
                                     100,400,5041,103,640445,680000,2,
                                     1,SYSDATE,1,&#39;SH&#39;,&#39;SELECT AVG(amount_sold)
                                     FROM sh.sales WHERE promo_id = 10&#39;);
  DBMS_ADVISOR.EXECUTE_TASK(task_name);

attribute := &#39;SH&#39;;

  DBMS_ADVISOR.UPDATE_REC_ATTRIBUTES(task_name, 1, 3, &#39;OWNER&#39;, attribute);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65165" class="refsect2"><a id="i1011550"></a>
<h3 class="refsect2"><a id="sthref456"></a>UPDATE_SQLWKLD_ATTRIBUTES Procedure</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
This procedure is deprecated starting in Oracle Database 11<span class="italic">g</span>.</div>
<p>This procedure changes various attributes of a SQL Workload object or template.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref457"></a>Syntax</p>
<pre dir="ltr">DBMS_ADVISOR.UPDATE_SQLWKLD_ATTRIBUTES (
   workload_name        IN VARCHAR2,
   new_name             IN VARCHAR2 := NULL,
   description          IN VARCHAR2 := NULL,
   read_only            IN VARCHAR2 := NULL,
   is_template          IN VARCHAR2 := NULL,
   how_created          IN VARCHAR2 := NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref458"></a>Parameters</p>
<div id="ARPLS65166" class="tblformal">
<p class="titleintable"><a id="sthref459"></a><a id="sthref460"></a>Table 19-43 UPDATE_SQLWKLD_ATTRIBUTES Procedure Parameters</p>
<table class="cellalignment4330" title="UPDATE_SQLWKLD_ATTRIBUTES Procedure Parameters" summary="This table describes the parameters of DBMS_ADVISOR.UPDATE_SQLWKLD_ATTRIBUTES." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t62">Parameter</th>
<th class="cellalignment4328" id="r1c2-t62">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t62" headers="r1c1-t62">
<p><code dir="ltr">workload_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t62 r1c2-t62">
<p>The workload object name that uniquely identifies an existing workload.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t62" headers="r1c1-t62">
<p><code dir="ltr">new_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t62 r1c2-t62">
<p>The new workload object name. If the value is <code dir="ltr">NULL</code> or contains the value <code dir="ltr">ADVISOR_UNUSED</code>, the workload will not be renamed. A task name can be up to 30 characters long.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t62" headers="r1c1-t62">
<p><code dir="ltr">description</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t62 r1c2-t62">
<p>A new workload description. If the value is <code dir="ltr">NULL</code> or contains the value <code dir="ltr">ADVISOR_UNUSED</code>, the description will not be changed. Names can be up to 256 characters long.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t62" headers="r1c1-t62">
<p><code dir="ltr">read_only</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t62 r1c2-t62">
<p>Set to <code dir="ltr">TRUE</code> so it cannot be changed.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t62" headers="r1c1-t62">
<p><code dir="ltr">is_template</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t62 r1c2-t62">
<p><code dir="ltr">TRUE</code> if workload is to be used as a template.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t62" headers="r1c1-t62">
<p><code dir="ltr">how_created</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t62 r1c2-t62">
<p>Indicates a source application name that initiated the workload creation. If the value is <code dir="ltr">NULL</code> or contains the value <code dir="ltr">ADVISOR_UNUSED</code>, the source will not be changed.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref461"></a>Examples</p>
<pre dir="ltr">DECLARE
  workload_name VARCHAR2(30);
BEGIN
  workload_name := &#39;My Workload&#39;;

  DBMS_ADVISOR.CREATE_SQLWKLD(workload_name, &#39;My Workload&#39;);
  DBMS_ADVISOR.ADD_SQLWKLD_STATEMENT(workload_name, &#39;MONTHLY&#39;, &#39;ROLLUP&#39;,
                                     100,400,5041,103,640445,680000,2,
                                     1,SYSDATE,1,&#39;SH&#39;,&#39;SELECT AVG(amount_sold)
                                     FROM sh.sales WHERE promo_id = 10&#39;);
  DBMS_ADVISOR.UPDATE_SQLWKLD_ATTRIBUTES(workload_name,&#39;New workload name&#39;);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65167" class="refsect2"><a id="i1011486"></a>
<h3 class="refsect2"><a id="sthref462"></a>UPDATE_SQLWKLD_STATEMENT Procedure</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
This procedure is deprecated starting in Oracle Database 11<span class="italic">g</span>.</div>
<p>This procedure updates an existing SQL statement in a specified SQL workload.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref463"></a>Syntax</p>
<pre dir="ltr">DBMS_ADVISOR.UPDATE_SQLWKLD_STATEMENT (
   workload_name     IN VARCHAR2,
   sql_id            IN NUMBER,
   application       IN VARCHAR2 := NULL,
   action            IN VARCHAR2 := NULL,
   priority          IN NUMBER := NULL,
   username          IN VARCHAR2 := NULL);

DBMS_ADVISOR.UPDATE_SQLWKLD_STATEMENT (
   workload_name     IN VARCHAR2,
   search            IN VARCHAR2,
   updated           OUT NUMBER,
   application       IN VARCHAR2 := NULL,
   action            IN VARCHAR2 := NULL,
   priority          IN NUMBER := NULL,
   username          IN VARCHAR2 := NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref464"></a>Parameters</p>
<div id="ARPLS65168" class="tblformal">
<p class="titleintable"><a id="sthref465"></a><a id="sthref466"></a>Table 19-44 UPDATE_SQLWKLD_STATEMENT Procedure Parameters</p>
<table class="cellalignment4330" title="UPDATE_SQLWKLD_STATEMENT Procedure Parameters" summary="This table describes the parameters of DBMS_ADVISOR.UPDATE_SQLWKLD_STATEMENT." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t64">Parameter</th>
<th class="cellalignment4328" id="r1c2-t64">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t64" headers="r1c1-t64">
<p><code dir="ltr">workload_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t64 r1c2-t64">
<p>The SQL Workload object name that uniquely identifies an existing workload.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t64" headers="r1c1-t64">
<p><code dir="ltr">sql_id</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t64 r1c2-t64">
<p>The Advisor-generated identifier number that is assigned to the statement. To specify all workload statements, use the constant <code dir="ltr">DBMS_ADVISOR.ADVISOR_ALL</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t64" headers="r1c1-t64">
<p><code dir="ltr">updated</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t64 r1c2-t64">
<p>Returns the number of statements changed by a searched update.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t64" headers="r1c1-t64">
<p><code dir="ltr">application</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t64 r1c2-t64">
<p>Specifies a business application name that will be associated with the SQL statement. If the value is <code dir="ltr">NULL</code> or contains the value <code dir="ltr">ADVISOR_UNUSED</code>, then the column will not be updated in the repository.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t64" headers="r1c1-t64">
<p><code dir="ltr">action</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t64 r1c2-t64">
<p>Specifies the application action for the statement. If the value is <code dir="ltr">NULL</code> or contains the value <code dir="ltr">ADVISOR_UNUSED</code>, then the column will not be updated in the repository.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t64" headers="r1c1-t64">
<p><code dir="ltr">priority</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t64 r1c2-t64">
<p>The relative priority of the SQL statement. The value must be one of the following: 1 - <code dir="ltr">HIGH</code>, 2 - <code dir="ltr">MEDIUM</code>, or 3 - <code dir="ltr">LOW</code>.</p>
<p>If the value is <code dir="ltr">NULL</code> or contains the value <code dir="ltr">ADVISOR_UNUSED</code>, then the column will not be updated in the repository.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t64" headers="r1c1-t64">
<p><code dir="ltr">username</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t64 r1c2-t64">
<p>The Oracle user name that executed the SQL statement. If the value is <code dir="ltr">NULL</code> or contains the value <code dir="ltr">ADVISOR_UNUSED</code>, then the column will not be updated in the repository.</p>
<p>Because a user name is an Oracle identifier, the <code dir="ltr">username</code> value must be entered exactly like it is stored in the database. For example, if the user <code dir="ltr">SCOTT</code> is the executing user, then you must provide the user identifier <code dir="ltr">SCOTT</code> in all uppercase letters. The database does not recognize the user <code dir="ltr">scott</code> as a match for <code dir="ltr">SCOTT</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t64" headers="r1c1-t64">
<p><code dir="ltr">search</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t64 r1c2-t64">
<p>Disabled.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref467"></a>Usage Notes</p>
<p>A workload cannot be modified or deleted if it is currently referenced by an active task. A task is considered active if it is not in its initial state. See <a href="#i1001339">RESET_TASK Procedure</a> to set a task to its initial state.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref468"></a>Examples</p>
<pre dir="ltr">DECLARE
  workload_name VARCHAR2(30);
  updated NUMBER;
  id NUMBER;
BEGIN
  workload_name := &#39;My Workload&#39;;

  DBMS_ADVISOR.CREATE_SQLWKLD(workload_name, &#39;My Workload&#39;);
  DBMS_ADVISOR.ADD_SQLWKLD_STATEMENT(workload_name, &#39;MONTHLY&#39;, &#39;ROLLUP&#39;,
                                     100,400,5041,103,640445,680000,2,
                                     1,SYSDATE,1,&#39;SH&#39;,&#39;SELECT AVG(amount_sold)
                                     FROM sh.sales WHERE promo_id = 10&#39;);

   SELECT sql_id INTO id FROM USER_ADVISOR_SQLW_STMTS
   WHERE workload_name = &#39;My Workload&#39;;

  DBMS_ADVISOR.UPDATE_SQLWKLD_STATEMENT(workload_name, id);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65169" class="refsect2"><a id="CHDHDCCB"></a>
<h3 class="refsect2"><a id="sthref469"></a>UPDATE_TASK_ATTRIBUTES Procedure</h3>
<p>This procedure changes various attributes of a task or a task template.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref470"></a>Syntax</p>
<pre dir="ltr">DBMS_ADVISOR.UPDATE_TASK_ATTRIBUTES (
   task_name          IN VARCHAR2
   new_name           IN VARCHAR2 := NULL,
   description        IN VARCHAR2 := NULL,
   read_only          IN VARCHAR2 := NULL,
   is_template        IN VARCHAR2 := NULL,
   how_created        IN VARCHAR2 := NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref471"></a>Parameters</p>
<div id="ARPLS65170" class="tblformal">
<p class="titleintable"><a id="sthref472"></a><a id="sthref473"></a>Table 19-45 UPDATE_TASK_ATTRIBUTES Procedure Parameters</p>
<table class="cellalignment4330" title="UPDATE_TASK_ATTRIBUTES Procedure Parameters" summary="This table describes the parameters of DBMS_ADVISOR.UPDATE_TASK_ATTRIBUTES." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t65">Parameter</th>
<th class="cellalignment4328" id="r1c2-t65">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t65" headers="r1c1-t65">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t65 r1c2-t65">
<p>The Advisor task name that uniquely identifies an existing task.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t65" headers="r1c1-t65">
<p><code dir="ltr">new_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t65 r1c2-t65">
<p>The new Advisor task name. If the value is <code dir="ltr">NULL</code> or contains the value <code dir="ltr">ADVISOR_UNUSED</code>, the task will not be renamed. A task name can be up to 30 characters long.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t65" headers="r1c1-t65">
<p><code dir="ltr">description</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t65 r1c2-t65">
<p>A new task description. If the value is <code dir="ltr">NULL</code> or contains the value <code dir="ltr">ADVISOR_UNUSED</code>, the description will not be changed. Names can be up to 256 characters long.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t65" headers="r1c1-t65">
<p><code dir="ltr">read_only</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t65 r1c2-t65">
<p>Sets the task to read-only. Possible values are: <code dir="ltr">TRUE</code> and <code dir="ltr">FALSE</code>.</p>
<p>If the value is <code dir="ltr">NULL</code> or contains the value <code dir="ltr">ADVISOR_UNUSED</code>, the setting will not be changed.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t65" headers="r1c1-t65">
<p><code dir="ltr">is_template</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t65 r1c2-t65">
<p>Marks the task as a template. Physically, there is no difference between a task and a template; however, a template cannot be executed. Possible values are: <code dir="ltr">TRUE</code> and <code dir="ltr">FALSE</code>. If the value is <code dir="ltr">NULL</code> or contains the value <code dir="ltr">ADVISOR_UNUSED</code>, the setting will not be changed.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t65" headers="r1c1-t65">
<p><code dir="ltr">how_created</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t65 r1c2-t65">
<p>Indicates a source application name that initiated the task creation. If the value is <code dir="ltr">NULL</code> or contains the value <code dir="ltr">ADVISOR_UNUSED</code>, the source will not be changed.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref474"></a>Examples</p>
<pre dir="ltr">DECLARE
  task_id NUMBER;
  task_name VARCHAR2(30);
BEGIN
  task_name := &#39;My Task&#39;;

  DBMS_ADVISOR.CREATE_TASK(DBMS_ADVISOR.SQLACCESS_ADVISOR, task_id, task_name);
  DBMS_ADVISOR.UPDATE_TASK_ATTRIBUTES(task_name,&#39;New Task Name&#39;);
  DBMS_ADVISOR.UPDATE_TASK_ATTRIBUTES(&#39;New Task Name&#39;,NULL,&#39;New description&#39;);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4320">
<tr>
<td class="cellalignment4329">
<table class="cellalignment4325">
<tr>
<td class="cellalignment4324"><a href="d_advrwr.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4324"><a href="d_alert.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4332">
<table class="cellalignment4323">
<tr>
<td class="cellalignment4324"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4324"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4324"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4324"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4324"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4324"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>