<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-2239"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/DBMS_CQ_NOTIFICATION"></a><title>DBMS_CQ_NOTIFICATION</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1086"/>
<meta name="dcterms.created" content="2016-09-02T5:36:10Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database PL/SQL Packages and Types Reference"/>
<meta name="dcterms.identifier" content="E41829-07"/>
<meta name="dcterms.isVersionOf" content="ARPLS"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="d_connection_pool.htm" title="Previous" type="text/html"/>
<link rel="Next" href="d_credential.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41829-07.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">42/290</span> <!-- End Header -->
<div id="ARPLS201" class="chapter"><a id="BABEECBE"></a>
<h1 class="chapter"><span class="secnum">38</span> DBMS_CQ_NOTIFICATION</h1>
<p><a id="sthref1668"></a><code dir="ltr">The DBMS_CQ_NOTIFICATION</code> package is part of the database change notification feature that provides the functionality to create registration on queries designated by a client application and so to receive notifications in response to DML or DDL changes on the objects associated with the queries. The notifications are published by the database when the DML or DDL transaction commits.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADFNS018" href="../ADFNS/adfns_cqn.htm#ADFNS018"><span class="italic">Oracle Database Development Guide</span></a> regarding implementing database change notification.</div>
<p>This chapter contains the following topics:</p>
<ul>
<li>
<p><a href="#CIHFIIHC">Using DBMS_CQ_NOTIFICATION</a></p>
<ul>
<li>
<p>Overview</p>
</li>
<li>
<p>Security Model</p>
</li>
<li>
<p>Constants</p>
</li>
<li>
<p>Operational Notes</p>
</li>
<li>
<p>Examples</p>
</li>
</ul>
</li>
<li>
<p><a href="#CIHDAGEC">Data Structures</a></p>
<ul>
<li>
<p>OBJECT Types</p>
</li>
</ul>
</li>
<li>
<p><a href="#CIHFGBCF">Summary of DBMS_CQ_NOTIFICATION Subprograms</a></p>
</li>
</ul>
<div class="refentry"><a id="CIHFIIHC"></a>
<div id="ARPLS65634" class="refsect1">
<h2 class="refsect1">Using DBMS_CQ_NOTIFICATION</h2>
<ul>
<li>
<p><a href="#CIHGBIDH">Overview</a></p>
</li>
<li>
<p><a href="#CIHHAGFD">Security Model</a></p>
</li>
<li>
<p><a href="#CIHHBEAH">Constants</a></p>
</li>
<li>
<p><a href="#CIHCDIJF">Operational Notes</a></p>
</li>
<li>
<p><a href="#CHDFEFAA">Examples</a></p>
</li>
</ul>
<div id="ARPLS65635" class="refsect2"><a id="CIHGBIDH"></a>
<h3 class="refsect2">Overview</h3>
<p><code dir="ltr">The DBMS_CQ_NOTIFICATION</code> package provides PL/SQL based registration interfaces. A client can use this interface to create registrations on queries based on objects of interest and specify a PL/SQL callback handler to receive notifications. In case of object level registration, when a transaction changes any of the objects associated with the registered queries and |COMMIT|s, the PL/SQL callback, specified during registration for those objects, is invoked. The application can define client-specific processing inside the implementation of its PL/SQL callback handler.</p>
<p>The interface lets you define a registration block (using a mechanism similar to a <code dir="ltr">BEGIN-END</code> block). The recipient of notifications namely the name of the PL/SQL callback handler and a few other registration properties like time-outs can be specified during the BEGIN phase. Any queries executed subsequently (inside the registration block) are considered &#34;interesting queries&#34; and objects referenced by those queries during query execution are registered. The registration is completed by <code dir="ltr">END</code>ing the registration block.The registration block lets you create new registrations or add objects to existing registrations.</p>
<p>When a registration is created through the PL/SQL interface, a unique registration ID is assigned to the registration by the RDBMS. The client application can use the registration ID to keep track of registrations created by it. When a notification is published by the RDBMS, the registration ID will be part of the notification.</p>
<p class="subhead2"><a id="ARPLS65636"></a>Typical Applications</p>
<p>This functionality is useful for example to applications that cache query result sets on mostly read-only objects in the mid-tier to avoid network round trips to the database. Such an application can create a registration on the queries it is interested in caching. On changes to objects referenced inside those queries, the database publishes a notification when the underlying transaction commits. In response to the notification, the mid-tier application can refresh its cache by re-executing the query/queries.</p>
</div>
<!-- class="refsect2" -->
<div id="ARPLS65637" class="refsect2"><a id="CIHHAGFD"></a>
<h3 class="refsect2">Security Model</h3>
<p><code dir="ltr">The DBMS_CQ_NOTIFICATION</code> package requires that the user have the <code dir="ltr">CHANGE</code> <code dir="ltr">NOTIFICATION</code> system privilege in order to receive notifications, and be granted <code dir="ltr">EXECUTE</code> privilege on the <code dir="ltr">DBMS_CQ_NOTIFICATION</code> package.</p>
<p>In addition the user is required to have <code dir="ltr">SELECT</code> or <code dir="ltr">READ</code> privileges on all objects to be registered. Note that if the <code dir="ltr">SELECT</code> or <code dir="ltr">READ</code> privilege on an object was granted at the time of registration creation but lost subsequently (due to a revoke), then the registration will be purged and a notification to that effect will be published.</p>
</div>
<!-- class="refsect2" -->
<div id="ARPLS65638" class="refsect2"><a id="CIHHBEAH"></a>
<h3 class="refsect2">Constants</h3>
<p>The <code dir="ltr">DBMS_CQ_NOTIFICATION</code> package uses the constants shown in <a href="#CIHHIGIG">Table 38-1</a>. The constants are used as flag parameters either during registration or when received during the notification.</p>
<p>The <code dir="ltr">DBMS_CQ_NOTIFICATION</code> package has sets of constants:</p>
<ul>
<li>
<p><code dir="ltr">EVENT_STARTUP</code>, <code dir="ltr">EVENT_SHUTDOWN</code>, <code dir="ltr">EVENT_SHUTDOWN_ANY</code>, <code dir="ltr">EVENT_DEREG</code> describe the type of the notification published by the database.</p>
</li>
<li>
<p><code dir="ltr">INSERTOP</code>, <code dir="ltr">DELETEOP</code>, <code dir="ltr">UPDATEOP</code>, <code dir="ltr">ALTEROP</code>, <code dir="ltr">DROPOP</code> and <code dir="ltr">UNKNOWNOP</code> describe the type of operation on a table (during a notification published by the database).</p>
</li>
<li>
<p><code dir="ltr">QOS_RELIABLE</code>, <code dir="ltr">QOS_DEREG_NFY</code>, <code dir="ltr">QOS_ROWIDs</code> describe registration Quality of Service properties that the client requires. These are specified during registration.</p>
</li>
</ul>
<div id="ARPLS65639" class="tblformal">
<p class="titleintable"><a id="sthref1669"></a><a id="CIHHIGIG"></a>Table 38-1 DBMS_CQ_NOTIFICATION Constants</p>
<table class="cellalignment4330" title="DBMS_CQ_NOTIFICATION Constants" summary="This table describes the Constants used by DBMS_CHANGE_NOTIFICATION subprograms." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t3">Name</th>
<th class="cellalignment4328" id="r1c2-t3">Type</th>
<th class="cellalignment4328" id="r1c3-t3">Value</th>
<th class="cellalignment4328" id="r1c4-t3">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t3" headers="r1c1-t3">
<p><code dir="ltr">ALL_OPERATIONS</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t3 r1c2-t3">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t3 r1c3-t3">
<p><code dir="ltr">0</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t3 r1c4-t3">
<p>Interested in being notified on all operations, specified as a parameter during registration</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t3" headers="r1c1-t3">
<p><code dir="ltr">ALL_ROWS</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t3 r1c2-t3">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t3 r1c3-t3">
<p><code dir="ltr">1</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t3 r1c4-t3">
<p>All rows within the table may have been potentially modified</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t3" headers="r1c1-t3">
<p><code dir="ltr">EVENT_STARTUP</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t3 r1c2-t3">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t3 r1c3-t3">
<p><code dir="ltr">1</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t3 r1c4-t3">
<p>Instance startup notification</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t3" headers="r1c1-t3">
<p><code dir="ltr">EVENT_SHUTDOWN</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t3 r1c2-t3">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t3 r1c3-t3">
<p><code dir="ltr">2</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t3 r1c4-t3">
<p>Instance shutdown notification</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t3" headers="r1c1-t3">
<p><code dir="ltr">EVENT_SHUTDOWN_ANY</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t3 r1c2-t3">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t3 r1c3-t3">
<p><code dir="ltr">3</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t3 r1c4-t3">
<p>Any instance shutdown when running Oracle Real Application Clusters (Oracle RAC)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t3" headers="r1c1-t3">
<p><code dir="ltr">EVENT_DEREG</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t3 r1c2-t3">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t3 r1c3-t3">
<p><code dir="ltr">5</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t3 r1c4-t3">
<p>Registration has been removed</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t3" headers="r1c1-t3">
<p><code dir="ltr">EVENT_OBJCHANGE</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t3 r1c2-t3">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t3 r1c3-t3">
<p><code dir="ltr">6</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t3 r1c4-t3">
<p>Notification for object change</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t3" headers="r1c1-t3">
<p><code dir="ltr">EVENT_QUERYCHANGE</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t3 r1c2-t3">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t3 r1c3-t3">
<p><code dir="ltr">7</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t3 r1c4-t3">
<p>Notification for query result set change</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t3" headers="r1c1-t3">
<p><code dir="ltr">INSERTOP</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t3 r1c2-t3">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t3 r1c3-t3">
<p><code dir="ltr">2</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t3 r1c4-t3">
<p>Insert operation</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t3" headers="r1c1-t3">
<p><code dir="ltr">UPDATEOP</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t3 r1c2-t3">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t3 r1c3-t3">
<p><code dir="ltr">4</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t3 r1c4-t3">
<p>Update operation</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t3" headers="r1c1-t3">
<p><code dir="ltr">DELETEOP</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t3 r1c2-t3">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t3 r1c3-t3">
<p><code dir="ltr">8</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t3 r1c4-t3">
<p>Delete operation</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t3" headers="r1c1-t3">
<p><code dir="ltr">ALTEROP</code></p>
</td>
<td class="cellalignment4329" headers="r13c1-t3 r1c2-t3">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r13c1-t3 r1c3-t3">
<p><code dir="ltr">16</code></p>
</td>
<td class="cellalignment4329" headers="r13c1-t3 r1c4-t3">
<p>Table altered</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t3" headers="r1c1-t3">
<p><code dir="ltr">DROPOP</code></p>
</td>
<td class="cellalignment4329" headers="r14c1-t3 r1c2-t3">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r14c1-t3 r1c3-t3">
<p><code dir="ltr">32</code></p>
</td>
<td class="cellalignment4329" headers="r14c1-t3 r1c4-t3">
<p>Table dropped</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r15c1-t3" headers="r1c1-t3">
<p><code dir="ltr">UNKNOWNOP</code></p>
</td>
<td class="cellalignment4329" headers="r15c1-t3 r1c2-t3">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r15c1-t3 r1c3-t3">
<p><code dir="ltr">64</code></p>
</td>
<td class="cellalignment4329" headers="r15c1-t3 r1c4-t3">
<p>Unknown operation</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r16c1-t3" headers="r1c1-t3">
<p><code dir="ltr">QOS_RELIABLE</code></p>
</td>
<td class="cellalignment4329" headers="r16c1-t3 r1c2-t3">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r16c1-t3 r1c3-t3">
<p><code dir="ltr">1</code></p>
</td>
<td class="cellalignment4329" headers="r16c1-t3 r1c4-t3">
<p>Reliable or persistent notification. Also implies that the notifications will be inserted into the persistent storage atomically with the committing transaction that results in an object change.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r17c1-t3" headers="r1c1-t3">
<p><code dir="ltr">QOS_DEREG_NFY</code></p>
</td>
<td class="cellalignment4329" headers="r17c1-t3 r1c2-t3">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r17c1-t3 r1c3-t3">
<p><code dir="ltr">2</code></p>
</td>
<td class="cellalignment4329" headers="r17c1-t3 r1c4-t3">
<p>Purge registration on first notification</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r18c1-t3" headers="r1c1-t3">
<p><code dir="ltr">QOS_ROWIDS</code></p>
</td>
<td class="cellalignment4329" headers="r18c1-t3 r1c2-t3">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r18c1-t3 r1c3-t3">
<p><code dir="ltr">4</code></p>
</td>
<td class="cellalignment4329" headers="r18c1-t3 r1c4-t3">
<p>Require rowids of modified rows</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r19c1-t3" headers="r1c1-t3">
<p><code dir="ltr">QOS_QUERY</code></p>
</td>
<td class="cellalignment4329" headers="r19c1-t3 r1c2-t3">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r19c1-t3 r1c3-t3">
<p><code dir="ltr">8</code></p>
</td>
<td class="cellalignment4329" headers="r19c1-t3 r1c4-t3">
<p>Register at query granularity</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r20c1-t3" headers="r1c1-t3">
<p><code dir="ltr">QOS_BEST_EFFORT</code></p>
</td>
<td class="cellalignment4329" headers="r20c1-t3 r1c2-t3">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r20c1-t3 r1c3-t3">
<p><code dir="ltr">16</code></p>
</td>
<td class="cellalignment4329" headers="r20c1-t3 r1c4-t3">
<p>Best effort evaluation</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r21c1-t3" headers="r1c1-t3">
<p><code dir="ltr">NTFN_GROUPING_CLASS_TIME</code></p>
</td>
<td class="cellalignment4329" headers="r21c1-t3 r1c2-t3">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r21c1-t3 r1c3-t3">
<p><code dir="ltr">1</code></p>
</td>
<td class="cellalignment4329" headers="r21c1-t3 r1c4-t3">
<p>Group notifications by time</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r22c1-t3" headers="r1c1-t3">
<p><code dir="ltr">NTFN_GROUPING_TYPE_SUMMARY</code></p>
</td>
<td class="cellalignment4329" headers="r22c1-t3 r1c2-t3">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r22c1-t3 r1c3-t3">
<p><code dir="ltr">1</code></p>
</td>
<td class="cellalignment4329" headers="r22c1-t3 r1c4-t3">
<p>Summary grouping of notifications</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r23c1-t3" headers="r1c1-t3">
<p><code dir="ltr">NTFN_GROUPING_TYPE_LAST</code></p>
</td>
<td class="cellalignment4329" headers="r23c1-t3 r1c2-t3">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r23c1-t3 r1c3-t3">
<p><code dir="ltr">2</code></p>
</td>
<td class="cellalignment4329" headers="r23c1-t3 r1c4-t3">
<p>Last notification in the group</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r24c1-t3" headers="r1c1-t3">
<p><code dir="ltr">NTFN_GROUPING_FOREVER</code></p>
</td>
<td class="cellalignment4329" headers="r24c1-t3 r1c2-t3">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r24c1-t3 r1c3-t3">
<p><code dir="ltr">-1</code></p>
</td>
<td class="cellalignment4329" headers="r24c1-t3 r1c4-t3">
<p>Repeat notifications forever</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65640" class="refsect2"><a id="CIHCDIJF"></a>
<h3 class="refsect2">Operational Notes</h3>
<p>With regard to object level registration:</p>
<ul>
<li>
<p>The notifications are published by the database when a transaction changes the registered objects and <code dir="ltr">COMMIT</code>s.</p>
</li>
<li>
<p>All objects referenced in the queries executed inside the registration block starting from the previous <code dir="ltr">NEW_REG_START</code> or <code dir="ltr">ENABLE_REG</code> to <code dir="ltr">REG_END</code> are considered interesting objects and added to the registration.</p>
</li>
</ul>
<p>With regard to query result change registration:</p>
<ul>
<li>
<p>The notifications are published by the database when a transaction changes the result set of the registered query and <code dir="ltr">COMMIT</code>s.</p>
</li>
</ul>
<p class="subhead2"><a id="ARPLS65641"></a>Troubleshooting</p>
<p>If you have created a registration and seem to not receive notifications when the underlying tables are changed, please check the following.</p>
<ul>
<li>
<p>Is the <code dir="ltr">job_queue_processes</code> parameter set to a nonzero value? This parameter needs to be configured to a nonzero value in order to receive PL/SQL notifications through the handler.</p>
</li>
<li>
<p>Are the registrations being created as a non-<code dir="ltr">SYS</code> user?</p>
</li>
<li>
<p>If you are attempting DML changes on the registered object, are you <code dir="ltr">COMMIT</code>ing the transaction? Please note that the notifications are transactional and will be generated when the transaction <code dir="ltr">COMMIT</code>s.</p>
</li>
<li>
<p>It maybe possible that there are run-time errors during the execution of the PL/SQL callback due to implementation errors. If so, they would be logged to the trace file of the <code dir="ltr">JOBQ</code> process that attempts to execute the procedure. The trace file would be usually named &lt;<code dir="ltr">ORACLE_SID</code>&gt;<code dir="ltr">_j*_</code>&lt;<code dir="ltr">PID</code>&gt;.<code dir="ltr">trc</code>. &#39;</p>
<p>For example, if the ORACLE_SID is &#39;dbs1&#39; and the process is 12483, the trace file might be named &#39;<code dir="ltr">dbs1_j000_12483</code>.<code dir="ltr">trc</code>.</p>
<p>Suppose a registration is created with &#39;<code dir="ltr">chnf_callback</code> as the notification handler and with <code dir="ltr">registration_id</code> 100. Let us suppose the user forgets to define the <code dir="ltr">chnf_callback</code> procedure. Then the <code dir="ltr">JOBQ</code> trace file might contain a message of the following form.</p>
<pre dir="ltr">Runtime error during execution of PL/SQL cbk chnf_callback for reg CHNF100
   Error in PLSQL notification of msgid:
   Queue : 
   Consumer Name :
   PLSQL function :chnf_callback
   Exception Occured, Error msg:
   ORA-00604: error occurred at recursive SQL level 2
   ORA-06550: line 1, column 7: 
   PLS-00201: identifier &#39;CHNF_CALLBACK&#39; must be declared
   ORA-06550: line 1, column 7:
   PL/SQL: Statement ignored 
</pre></li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
For more information about troubleshooting Database Change Notification, see <a class="olink ADFNS1020" href="../ADFNS/adfns_cqn.htm#ADFNS1020"><span class="italic">Oracle Database Development Guide</span></a>.</div>
</div>
<!-- class="refsect2" -->
<div id="ARPLS73675" class="refsect2"><a id="CHDFEFAA"></a>
<h3 class="refsect2">Examples</h3>
<p class="subhead2"><a id="ARPLS73676"></a>Object Change Registration Example</p>
<p>Suppose that a mid-tier application has a lot of queries on the <code dir="ltr">HR</code>.<code dir="ltr">EMPLOYEES</code> table. If the <code dir="ltr">EMPLOYEES</code> table is infrequently updated, it can obtain better performance by caching rows from the table because that would avoid a round-trip to the backend database server and server side execution latency. Let us assume that the application has implemented a mid-tier HTTP listener that listens for notifications and updates the mid-tier cache in response to a notification.</p>
<p>The <code dir="ltr">DBMS_CQ_NOTIFICATION</code> package can be utilized in this scenario to send notifications about changes to the table by means of the following steps:</p>
<ol>
<li>
<p>Implement a mid-tier listener component of the cache management system (for example, using HTTP) that listens to notification messages sent from the database and refreshes the mid-tier cache in response to the notification.</p>
</li>
<li>
<p>Create a server side stored procedure to process notifications</p>
<pre dir="ltr">CONNECT system;
Enter password: <span class="italic">password</span>
GRANT CHANGE NOTIFICATION TO hr;
GRANT EXECUTE ON DBMS_CQ_NOTIFICATION TO hr;
 
Rem Enable job queue processes to receive notifications.
ALTER SYSTEM SET &#34;job_queue_processes&#34;=2;
 
CONNECT hr;
Enter password: <span class="italic">password</span>
Rem Create a table to record notification events
CREATE TABLE nfevents(regid number, event_type number);
 
Rem create a table to record changes to registered tables
CREATE TABLE nftablechanges(regid number, table_name varchar2(100),
                            table_operation number);
 
Rem create a table to record rowids of changed rows.
CREATE TABLE nfrowchanges(regid number, table_name varchar2(100), 
                          row_id varchar2(30));
 
Rem Create a PL/SQL callback handler to process notifications.
CREATE OR REPLACE PROCEDURE chnf_callback(ntfnds IN SYS.CHNF$_DESC) IS
   regid           NUMBER;
   tbname          VARCHAR2(60);
   event_type      NUMBER;
   numtables       NUMBER;
   operation_type  NUMBER;
   numrows         NUMBER;
   row_id          VARCHAR2(20);
 BEGIN
     regid      := ntfnds.registration_id;
     numtables  := ntfnds.numtables;
     event_type := ntfnds.event_type;
 
  INSERT INTO nfevents VALUES(regid, event_type);
  IF (event_type = DBMS_CQ_NOTIFICATION.EVENT_OBJCHANGE) THEN
    FOR i IN 1..numtables LOOP
      tbname          := ntfnds.table_desc_array(i).table_name;
      operation_type  := ntfnds.table_desc_array(I). Opflags;
      INSERT INTO nftablechanges VALUES(regid, tbname, operation_type);
      /* Send the table name and operation_type to client side listener using UTL_HTTP */
      /* If interested in the rowids, obtain them as follows */
      IF (bitand(operation_type, DBMS_CQ_NOTIFICATION.ALL_ROWS) = 0) THEN
        numrows := ntfnds.table_desc_array(i).numrows;
      ELSE 
        numrows :=0;   /* ROWID INFO NOT AVAILABLE */
      END IF;
      
      /* The body of the loop is not executed when numrows is ZERO */
      FOR j IN 1..numrows LOOP
          Row_id := ntfnds.table_desc_array(i).row_desc_array(j).row_id;
          INSERT INTO nfrowchanges VALUES(regid, tbname, Row_id);
         /* optionally Send out row_ids to client side listener using UTL_HTTP; */
      END LOOP;
      
    END LOOP;
  END IF;
  COMMIT;
END;
/ 
</pre>
<p>In Step 2 we can send as much information about the invalidation as the mid-tier application needs based on the information obtained from the notification descriptor.</p>
<p class="synopsis">Notes</p>
<ol>
<li>
<p>In the above example, a registration was created on the <code dir="ltr">EMPLOYEES</code> table with &#39;<code dir="ltr">chnf_callback</code>&#39; as the PL/SQL handler for notifications. During registration, the client specified reliable notifications (<code dir="ltr">QOS_RELIABLE</code>) and rowid notifications (<code dir="ltr">QOS_ROWIDS</code>)</p>
</li>
<li>
<p>The handler accesses the table descriptor array from the notification descriptor only if the notification type is of <code dir="ltr">EVENT_OBJCHANGE</code>. In all other cases (e.g <code dir="ltr">EVENT_DEREG</code>, <code dir="ltr">EVENT_SHUTDOWN</code>), the table descriptor array should not be accessed.</p>
</li>
<li>
<p>The handler accesses the row descriptor array from the table notification descriptor only if the <code dir="ltr">ALL_ROWS</code> bit is not set in the table operation flag. If the <code dir="ltr">ALL_ROWS</code> bit is set in the table operation flag, then it means that all rows within the table may have been potentially modified. In addition to operations like <code dir="ltr">TRUNCATE</code> that affect all rows in the tables, this bit may also be set if individual rowids have been rolled up into a FULL table invalidation.</p>
<p>This can occur if too many rows were modified on a given table in a single transaction (more than 80) or the total shared memory consumption due to rowids on the RDBMS is determined too large (exceeds 1% of the dynamic shared pool size). In this case, the recipient must conservatively assume that the entire table has been invalidated and the callback/application must be able to handle this condition.</p>
<p>Also note that the implementation of the user defined callback is up to the developer. In the above example, the callback was used to record event details into database tables. The application can additionally send the notification details to a mid-tier <code dir="ltr">HTTP</code> listener of its cache management system (as in the example) using <code dir="ltr">UTL_HTTP</code>. The listener could then refresh its cache by querying from the back-end database.</p>
</li>
</ol>
</li>
<li>
<p>Create a registrations on the tables that we wish to be notified about. We pass in the previously defined procedure name (<code dir="ltr">chnf_callback</code>) as the name of the server side PL/SQL procedure to be executed when a notification is generated.</p>
<pre dir="ltr">Rem Create a REGISTRATION on the EMPLOYEES TABLE    
DECLARE
  REGDS      SYS.CHNF$_REG_INFO;
  regid      NUMBER;
  mgr_id     NUMBER;
  dept_id    NUMBER;
  qosflags   NUMBER;
BEGIN
 qosflags := DBMS_CQ_NOTIFICATION.QOS_RELIABLE +
         DBMS_CQ_NOTIFICATION.QOS_ROWIDS;
REGDS := SYS.CHNF$_REG_INFO (&#39;chnf_callback&#39;, qosflags, 0,0,0);
regid := DBMS_CQ_NOTIFICATION.NEW_REG_START (REGDS); 
SELECT manager_id INTO mgr_id FROM EMPLOYEES WHERE employee_id = 200;
DBMS_CQ_NOTIFICATION.REG_END;
END;
/
</pre>
<p>Once the registration is created in Step 3 above, the server side PL/SQL procedure defined in Step 2 is executed in response to any <code dir="ltr">COMMIT</code>ted changes to the <code dir="ltr">HR</code>.<code dir="ltr">EMPLOYEES</code> table. As an example, let us assume that the following update is performed on the employees table.</p>
<pre dir="ltr">UPDATE employees SET salary=salary*1.05 WHERE employee_id=203;COMMIT;
</pre>
<p>Once the notification is processed, you will find rows which might look like the following in the <code dir="ltr">nfevents</code>, <code dir="ltr">nftablechanges</code> and <code dir="ltr">nfrowchanges</code> tables.</p>
<pre dir="ltr">SQL&gt; SELECT * FROM nfevents;
 
     REGID     EVENT_TYPE
---------------------------
     20045          6
 
 
SQL&gt; SELECT * FROM nftablechanges;
 
  REGID      TABLE_NAME         TABLE_OPERATION
-------------------------------------------
  20045      HR.EMPLOYEES            4
 

SQL&gt; select * from nfrowchanges;
 
    REGID      TABLE_NAME          ROW_ID
------------------------------------------------------
    20045     HR.EMPLOYEES    AAAKB/AABAAAJ8zAAF

</pre></li>
</ol>
<p class="subhead2"><a id="ARPLS73677"></a>Query Result Change Registration Example</p>
<ol>
<li>
<p>Creating a Callback</p>
<pre dir="ltr">CONNECT system;
Enter password: <span class="italic">password</span>
GRANT CHANGE NOTIFICATION TO hr;
GRANT EXECUTE ON DBMS_CQ_NOTIFICATION TO hr;
CONNECT hr;
Enter password: <span class="italic">password</span>
Rem Create a table to record notification events
CREATE TABLE nfevents(regid NUMBER, event_type NUMBER);

Rem Create a table to record notification queries
CREATE TABLE nfqueries (qid NUMBER, qop NUMBER);

Rem Create a table to record changes to registered tables
CREATE TABLE nftablechanges(
       qid                NUMBER,
       table_name         VARCHAR2(100),
       table_operation    NUMBER);

Rem Create a table to record rowids of changed rows.
CREATE TABLE nfrowchanges(
       qid                NUMBER,
       table_name         VARCHAR2(100),
       row_id             VARCHAR2(2000));
 
 
CREATE OR REPLACE PROCEDURE chnf_callback
  (ntfnds IN CQ_NOTIFICATION$_DESCRIPTOR)
IS
  regid           NUMBER;
  tbname          VARCHAR2(60);
  event_type      NUMBER;
  numtables       NUMBER;
  operation_type  NUMBER;
  numrows         NUMBER;
  row_id          VARCHAR2(2000);
  numqueries      NUMBER;
  qid NUMBER;
  qop NUMBER;

BEGIN
  regid := ntfnds.registration_id;
  event_type := ntfnds.event_type;
  INSERT INTO nfevents VALUES(regid, event_type);
  numqueries :=0;
  IF (event_type = DBMS_CQ_NOTIFICATION.EVENT_QUERYCHANGE) THEN
      numqueries := ntfnds.query_desc_array.count;
      FOR i in 1..numqueries LOOP
         qid := ntfnds.QUERY_DESC_ARRAY(i).queryid;
         qop := ntfnds.QUERY_DESC_ARRAY(i).queryop;
         INSERT INTO nfqueries VALUES(qid, qop);
         numtables := 0;
         numtables := ntfnds.QUERY_DESC_ARRAY(i).table_desc_array.count;
         FOR j IN 1..numtables LOOP
           tbname := ntfnds.QUERY_DESC_ARRAY(i).table_desc_array(j).table_name;
           operation_type := ntfnds.QUERY_DESC_ARRAY(i).table_desc_array(j).Opflags;
           INSERT INTO nftablechanges VALUES(qid, tbname, operation_type);
           IF (bitand(operation_type, DBMS_CQ_NOTIFICATION.ALL_ROWS) = 0)
           THEN
             numrows := ntfnds.query_desc_array(i).table_desc_array(j).numrows;
           ELSE
             numrows :=0;   /* ROWID INFO NOT AVAILABLE */
           END IF;
 
            /* The body of the loop is not executed when numrows is ZERO */
            FOR k IN 1..numrows LOOP
               Row_id := ntfnds.query_desc_array(i).table_desc_array(j).row_desc_array(k).row_id;
               INSERT INTO nfrowchanges VALUES(qid, tbname, Row_id);
               
            END LOOP;  /* loop over rows */
         END LOOP;     /* loop over tables */
       END LOOP;        /* loop over queries */
  END IF;
  COMMIT;
END;
/

</pre></li>
<li>
<p>Creates a query registration</p>
<pre dir="ltr">DECLARE
  reginfo    cq_notification$_reg_info;
  mgr_id     NUMBER;
  dept_id    NUMBER;
  v_cursor   SYS_REFCURSOR;
  regid      NUMBER;
  qosflags   NUMBER;  

BEGIN
  /* Register two queries for result-set-change notifications: */

  /* 1. Construct registration information.
        &#39;chnf_callback&#39; is name of notification handler.
        QOS_QUERY specifies result-set-change notifications. */
 
   qosflags := DBMS_CQ_NOTIFICATION.QOS_QUERY + 
               DBMS_CQ_NOTIFICATION.QOS_ROWIDS;

   reginfo := cq_notification$_reg_info(&#39;chnf_callback&#39;, qosflags,0, 0, 0);
 
  /* 2. Create registration */
 
        regid := DBMS_CQ_NOTIFICATION.NEW_REG_START(reginfo);
 
        OPEN v_cursor FOR 
           SELECT DBMS_CQ_NOTIFICATION.CQ_NOTIFICATION_QUERYID, manager_id
           FROM HR.employees
           WHERE employee_id = 7902;
        CLOSE v_cursor;
 
       OPEN v_cursor for
        SELECT DBMS_CQ_NOTIFICATION.CQ_NOTIFICATION_QUERYID, department_id
        FROM HR.departments
        WHERE department_name = &#39;IT&#39;;
       CLOSE v_cursor;
 
  DBMS_CQ_NOTIFICATION.REG_END;
END;
/
</pre></li>
<li>
<p>After creating the query registrations, the output from <code dir="ltr">USER_CQ_NOTIFICATION_QUERIES</code> would appear as follows.</p>
<pre dir="ltr">SQL&gt; SELECT queryid, regid, to_char(querytext) 
     FROM user_cq_notification_queries;
 
   QUERYID      REGID
---------- ----------
TO_CHAR(QUERYTEXT)
--------------------------------------------------------------------------------
        22         41
 SELECT HR.DEPARTMENTS.DEPARTMENT_ID  FROM HR.DEPARTMENTS  WHERE HR.DEPARTMENTS.
DEPARTMENT_NAME  = &#39;IT&#39;
 
        21         41
 SELECT HR.EMPLOYEES.MANAGER_ID  FROM HR.EMPLOYEES  WHERE HR.EMPLOYEES.EMPLOYEE_
ID  = 7902
 
 
Now, let us perform an UPDATE that changes the result of the query with queryid 22
by renaming the department with name &#39;IT&#39; to FINANCE.
 
SQL&gt;  update departments set department_name = &#39;FINANCE&#39; where department_name = &#39;IT&#39;;
 
1 row updated.
 
SQL&gt; commit;
 
Commit complete.
 
Now we can query the notifications that we recorded in the callback.
 
SQL&gt; select * from nfevents;
 
     REGID EVENT_TYPE
---------- ----------
        61          7
 
 
Event type 7 corresponds to EVENT_QUERYCHANGE
 
SQL&gt; select * from nfqueries;
 
       QID        QOP
---------- ----------
        42          7
 
Event type 7 corresponds to EVENT_QUERYCHANGE
 
SQL&gt; select * from nftablechanges;
SQL&gt; select * from nftablechanges;
 
     REGID
----------
TABLE_NAME
--------------------------------------------------------------------------------
TABLE_OPERATION
---------------
        42
HR.DEPARTMENTS
              4
 
 
TABLE_OPERATION 4 corresponds to UPDATEOP
 
SQL&gt; select * from nfrowchanges;
     REGID
----------
TABLE_NAME
--------------------------------------------------------------------------------
ROW_ID
--------------------------------------------------------------------------------
        61
HR.DEPARTMENTS
AAANkdAABAAALinAAF
</pre></li>
</ol>
</div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CIHDAGEC"></a>
<div id="ARPLS65645" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">Data Structures</h2>
<p>The <code dir="ltr">DBMS_CQ_NOTIFICATION</code> package defines the following <code dir="ltr">OBJECT</code> types.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="CIHIHEHD"></a>OBJECT Types</p>
<ul>
<li>
<p><a href="#CIHBBFDD">CQ_NOTIFICATION$_DESCRIPTOR Object Type</a></p>
</li>
<li>
<p><a href="#CHDBCCFD">CQ_NOTIFICATION$_QUERY Object Type</a></p>
</li>
<li>
<p><a href="#CHDFIIAH">CQ_NOTIFICATION$_QUERY_ARRAY Object (Array) Type</a></p>
</li>
<li>
<p><a href="#CHDDHHIB">CQ_NOTIFICATION$_TABLE Object Type</a></p>
</li>
<li>
<p><a href="#CIHDFDJA">CQ_NOTIFICATION$_TABLE_ARRAY Object (Array) Type</a></p>
</li>
<li>
<p><a href="#CHDHECCB">CQ_NOTIFICATION$_ROW Object Type</a></p>
</li>
<li>
<p><a href="#CHDEJFIE">CQ_NOTIFICATION$_ROW_ARRAY Object (Array) Type</a></p>
</li>
<li>
<p><a href="#CIHCGCBD">CQ_NOTIFICATION$_REG_INFO Object Type</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div id="ARPLS65646" class="refsect2"><a id="CIHBBFDD"></a>
<h3 class="refsect2"><a id="sthref1670"></a>CQ_NOTIFICATION$_DESCRIPTOR Object Type</h3>
<p>This is the top level change notification descriptor type. It is a synonym for the <code dir="ltr">SYS.CHNF$_DESC</code> type.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1671"></a>Syntax</p>
<pre dir="ltr">TYPE SYS.CHNF$_DESC IS OBJECT(
   registration_id    NUMBER,
   transaction_id     RAW(8),
   dbname             VARCHAR2(30),
   event_type         NUMBER,
   numtables          NUMBER,
   table_desc_array   CQ_NOTIFICATION$_TABLE_ARRAY,
   query_desc_array   CQ_NOTIFICATION$_QUERY_ARRAY);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1672"></a>Attributes</p>
<div id="ARPLS65647" class="tblformal">
<p class="titleintable"><a id="sthref1673"></a><a id="sthref1674"></a>Table 38-2 CQ_NOTIFICATION$_DESCRIPTOR Object Type</p>
<table class="cellalignment4330" title="CQ_NOTIFICATION$_DESCRIPTOR Object Type" summary="This table liststhe attributes of the CHNF$_DESC object type and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t5">Attribute</th>
<th class="cellalignment4328" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t5" headers="r1c1-t5">
<p><code dir="ltr">registration_id</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t5 r1c2-t5">
<p>Registration ID returned during registration</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t5" headers="r1c1-t5">
<p><code dir="ltr">transaction_id</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t5 r1c2-t5">
<p>Transaction ID. <code dir="ltr">transaction_id</code> of the transaction that made the change. Will be <code dir="ltr">NULL</code> unless the event_type is <code dir="ltr">EVENT_OBJCHANGE</code> or <code dir="ltr">EVENT_QUERYCHANGE</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t5" headers="r1c1-t5">
<p><code dir="ltr">dbname</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t5 r1c2-t5">
<p>Name of database</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t5" headers="r1c1-t5">
<p><code dir="ltr">event_type</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t5 r1c2-t5">
<p>Database event associated with the notification. Can be one of <code dir="ltr">EVENT_OBJCHANGE</code> (change to a registered object), <code dir="ltr">EVENT_STARTUP</code>, or <code dir="ltr">EVENT_QUERYCHANGE</code>, <code dir="ltr">EVENT_SHUTDOWN</code> or <code dir="ltr">EVENT_DEREG</code> (registration has been removed due to a timeout or other reason)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t5" headers="r1c1-t5">
<p><code dir="ltr">numtables</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t5 r1c2-t5">
<p>Number of modified tables. Will be <code dir="ltr">NULL</code> unless the <code dir="ltr">event_type</code> is <code dir="ltr">EVENT_OBJCHANGE</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t5" headers="r1c1-t5">
<p><code dir="ltr">table_desc_array</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t5 r1c2-t5">
<p>Array of table descriptors. Will be <code dir="ltr">NULL</code> unless the <code dir="ltr">event_type</code> is <code dir="ltr">EVENT_OBJCHANGE</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t5" headers="r1c1-t5">
<p><code dir="ltr">query_desc_array</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t5 r1c2-t5">
<p>Array of queries changed. This will be <code dir="ltr">NULL</code> unless event_type is <code dir="ltr">EVENT_QUERYCHANGE</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65648" class="refsect2"><a id="CHDBCCFD"></a>
<h3 class="refsect2"><a id="sthref1675"></a>CQ_NOTIFICATION$_QUERY Object Type</h3>
<p>The object type describes the changes to a query result caused by an event such as a transaction commit. An array of <code dir="ltr">CQ_NOTIFICATION$_QUERY</code> descriptors is embedded inside the top level notification descriptor (<code dir="ltr">CQ_NOTIFICATION$_DESCRIPTOR</code>) for events of type <code dir="ltr">EVENT_QUERYCHANGE</code>. The array corresponds to the <code dir="ltr">SET</code> of queryids which were invalidated as a result of the event.</p>
<p>This is a synonym for the base type <code dir="ltr">SYS.CHNF$_QDESC</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1676"></a>Syntax</p>
<pre dir="ltr">TYPE SYS.CHNF$_QDESC IS OBJECT (
  queryid            NUMBER,
  queryop            NUMBER,
  table_desc_array   CQ_NOTIFICATION$_TABLE_ARRAY);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1677"></a>Attributes</p>
<div id="ARPLS65649" class="tblformal">
<p class="titleintable"><a id="sthref1678"></a><a id="sthref1679"></a>Table 38-3 TYPE SYS.CQ_NOTIFICATION$_QUERY Object Type</p>
<table class="cellalignment4330" title="TYPE SYS.CQ_NOTIFICATION$_QUERY Object Type" summary="This table describes the fields of the Object Type CQ_NOTIFICATION$_QUERY and briefly describes them" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t6">Attribute</th>
<th class="cellalignment4328" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t6" headers="r1c1-t6">
<p><code dir="ltr">queryid</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t6 r1c2-t6">
<p>QueryId of the changed query</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t6" headers="r1c1-t6">
<p><code dir="ltr">queryop</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t6 r1c2-t6">
<p>Operation describing change to the query</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t6" headers="r1c1-t6">
<p><code dir="ltr">table_desc_array</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t6 r1c2-t6">
<p>Array of table changes which contributed to the query Result Set change</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65650" class="refsect2"><a id="CHDFIIAH"></a>
<h3 class="refsect2"><a id="sthref1680"></a>CQ_NOTIFICATION$_QUERY_ARRAY Object (Array) Type</h3>
<p>This type corresponds to an array of <code dir="ltr">CQ_NOTIFICATION$_QUERY</code> objects. It is a synonym for the <code dir="ltr">SYS.CHNF$_QUERY_ARRAY</code> type.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1681"></a>Syntax</p>
<pre dir="ltr">TYPE CQ_NOTIFICATION$_TABLE_ARRAY IS VARRAY (1073741824) OF CQ_NOTIFICATION$_TABLE;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65651" class="refsect2"><a id="CHDDHHIB"></a>
<h3 class="refsect2"><a id="sthref1682"></a>CQ_NOTIFICATION$_TABLE Object Type</h3>
<p>This descriptor type describes a change to a table and is embedded inside the top level change notification descriptor type for events of type <code dir="ltr">EVENT_OBJCHANGE</code> For query result set changes (event type will be set to <code dir="ltr">EVENT_QUERYCHANGE</code>), the array of table descriptors is embedded inside each query change descriptor.</p>
<p>Note that this is a synonym for the type <code dir="ltr">previously named SYS.CHNF$_TDESC</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1683"></a>Syntax</p>
<pre dir="ltr">TYPE SYS.CHNF$_TDESC IS OBJECT (
  opflags            NUMBER,
  table_name         VARCHAR2(2*M_IDEN+1),
  numrows            NUMBER,
  row_desc_array     CQ_NOTIFICATION$_ROW_ARRAY)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1684"></a>Attributes</p>
<div id="ARPLS65652" class="tblformal">
<p class="titleintable"><a id="sthref1685"></a><a id="sthref1686"></a>Table 38-4 TYPE SYS.CQ_NOTIFICATION$_TABLE Object Type</p>
<table class="cellalignment4330" title="TYPE SYS.CQ_NOTIFICATION$_TABLE Object Type" summary="This table describes the fields of the Object Type SYS.CQ_NOTIFICATION$_TABLE and briefly describes them" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t7">Attribute</th>
<th class="cellalignment4328" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t7" headers="r1c1-t7">
<p>opflags</p>
</td>
<td class="cellalignment4329" headers="r2c1-t7 r1c2-t7">
<p>Table level operation flags. This is a flag field (bit-vector) that describes the operations that occurred on the table. It can be an <code dir="ltr">OR</code> of the following bit fields - <code dir="ltr">INSERTOP</code>, <code dir="ltr">UPDATEOP</code>, <code dir="ltr">DELETEOP</code>, <code dir="ltr">DROPOP</code>, <code dir="ltr">ALTEROP</code>, <code dir="ltr">ALL_ROWS</code>. If the <code dir="ltr">ALL_ROWS</code> (0x1) bit is set it means that either the entire table is modified (for example, <code dir="ltr">DELETE</code> * <code dir="ltr">FROM</code> <code dir="ltr">t</code>) or row level granularity of information is not requested or not available in the notification and the receiver has to conservatively assume that the entire table has been invalidated.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t7" headers="r1c1-t7">
<p><code dir="ltr">table_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t7 r1c2-t7">
<p>Name of modified table</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t7" headers="r1c1-t7">
<p><code dir="ltr">numrows</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t7 r1c2-t7">
<p>Number of modified rows within the table. numrows will be <code dir="ltr">NULL</code> and hence should not be accessed if the <code dir="ltr">ALL_ROWS</code> bit is set in the table change descriptor.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t7" headers="r1c1-t7">
<p><code dir="ltr">row_desc_array</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t7 r1c2-t7">
<p>Array of row descriptors. This field will be <code dir="ltr">NULL</code> if the <code dir="ltr">ALL_ROWS</code> bit is set in <code dir="ltr">opflags</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65653" class="refsect2"><a id="CIHDFDJA"></a>
<h3 class="refsect2"><a id="sthref1687"></a>CQ_NOTIFICATION$_TABLE_ARRAY Object (Array) Type</h3>
<p>This type corresponds to an array of <code dir="ltr">CQ_NOTIFICATION$_TABLE</code> objects. It is a synonym for the <code dir="ltr">SYS.CHNF$_TDESC_ARRAY</code> type.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1688"></a>Syntax</p>
<pre dir="ltr">TYPE CQ_NOTIFICATION$_TABLE_ARRAY IS VARRAY (1073741824) OF CQ_NOTIFICATION$_TABLE;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65654" class="refsect2"><a id="CHDHECCB"></a>
<h3 class="refsect2"><a id="sthref1689"></a>CQ_NOTIFICATION$_ROW Object Type</h3>
<p>An array of <code dir="ltr">CQ_NOTIFICATION$_ROW</code> is embedded inside a <code dir="ltr">CQ_NOTIFICATION$_TABLE</code> (table change descriptor) if the <code dir="ltr">QOS_ROWIDS</code> option was chosen at the time of registration and the <code dir="ltr">ALL_ROWS</code> bit is not set in the <code dir="ltr">opflags</code> field of the table change descriptor.</p>
<p>Note that this is a synonym for the type <code dir="ltr">previously named</code> <code dir="ltr">SYS.CHNF$_RDESC</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1690"></a>Syntax</p>
<pre dir="ltr">TYPE SYS.CHNF$_RDESC IS OBJECT (
  opflags            NUMBER,
  row_id             VARCAHR2 (2000));
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1691"></a>Attributes</p>
<div id="ARPLS65655" class="tblformal">
<p class="titleintable"><a id="sthref1692"></a><a id="sthref1693"></a>Table 38-5 TYPE SYS.CQ_NOTIFICATION$_ROW Object Type</p>
<table class="cellalignment4330" title="TYPE SYS.CQ_NOTIFICATION$_ROW Object Type" summary="This table describes the fields of the Object Type SYS.CQ_NOTIFICATION$_ROW and briefly describes them" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t8">Attribute</th>
<th class="cellalignment4328" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t8" headers="r1c1-t8">
<p>opflags</p>
</td>
<td class="cellalignment4329" headers="r2c1-t8 r1c2-t8">
<p>Row level operation flags. The flag field (bit vector) describes the operations in the row (could be <code dir="ltr">INSERTOP</code>, <code dir="ltr">UPDATEOP</code> or <code dir="ltr">DELETEOP</code>).</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t8" headers="r1c1-t8">
<p><code dir="ltr">row_id</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t8 r1c2-t8">
<p>The rowid of the modified row</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65656" class="refsect2"><a id="CHDEJFIE"></a>
<h3 class="refsect2">CQ_NOTIFICATION$_ROW_ARRAY Object (Array) Type</h3>
<p>This object type corresponds to an array of <code dir="ltr">CQ_NOTIFICATION$_ROW</code> objects and is embedded inside the <code dir="ltr">CQ_NOTIFICATION$_TABLE</code> if <code dir="ltr">QOS_ROWIDS</code> was specified during registration and the <code dir="ltr">ALL_ROWS</code> bit is not set in the <code dir="ltr">opflags</code> field of the table change descriptor.</p>
<p>This type is a synonym for the <code dir="ltr">SYS.CHNF$_RDESC_ARRAY</code> type.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1694"></a>Syntax</p>
<pre dir="ltr">TYPE CQ_NOTIFICATION$_ROW_ARRAY IS VARRAY (1073741824) OF CQ_NOTIFICATION$_ROW;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65657" class="refsect2"><a id="CIHCGCBD"></a>
<h3 class="refsect2"><a id="sthref1695"></a>CQ_NOTIFICATION$_REG_INFO Object Type</h3>
<p>The object type describes the attributes associated with creating a new registration. It is a synonym for the type <code dir="ltr">previously named</code> <code dir="ltr">SYS.CHNF$_REG_INFO</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1696"></a>Syntax</p>
<pre dir="ltr">TYPE SYS.CHNF$_REG_INFO IS OBJECT (
  callback                        VARCHAR2(20),
  quosflags                       NUMBER,
  timeout                         NUMBER,
  operations_filter               NUMBER,
  transaction_lag                 NUMBER,
  ntfn_grouping_class             NUMBER,
  ntfn_grouping_value             NUMBER,
  ntfn_grouping_type              NUMBER,
  ntfn_grouping_start_time        TIMESTAMP WITH TIME ZONE,
  ntfn_grouping_repeat_count      NUMBER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1697"></a>Attributes</p>
<div id="ARPLS65658" class="tblformal">
<p class="titleintable"><a id="sthref1698"></a><a id="sthref1699"></a>Table 38-6 TYPE CQ_NOTIFICATION$_REG_INFO Object Type</p>
<table class="cellalignment4330" title="TYPE CQ_NOTIFICATION$_REG_INFO Object Type" summary="This table describes the fields of the Object Type CQ_NOTIFICATION$_REG_INFO and briefly describes them" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t9">Attribute</th>
<th class="cellalignment4328" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t9" headers="r1c1-t9">
<p><code dir="ltr">callback</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t9 r1c2-t9">
<p>Name of the server side PL/SQL procedure to be executed on a notification. Prototype is <code dir="ltr">&lt;call_backname&gt;(ntfnds IN SYS.chnf$_desc)</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t9" headers="r1c1-t9">
<p><code dir="ltr">qosflags</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t9 r1c2-t9">
<p>Quality of service flags. Can be set to an <code dir="ltr">OR</code> of the following values:</p>
<ul>
<li>
<p><code dir="ltr">QOS_RELIABLE</code> (<code dir="ltr">0x1</code>): Notifications are reliable (persistent) and survive instance death. This means that on an instance death in an Oracle RAC cluster, surviving instances will be able to deliver any queued invalidations. Similarly, pending invalidations can be delivered on instance restart, in a single instance configuration. The disadvantage is that there is a CPU cost/ latency involved in inserting the invalidation message to a persistent store. If this parameter is false, then server side CPU and latency are minimized, because invalidations are buffered into an in memory queue but the client could lose invalidation messages on an instance shutdown.</p>
</li>
<li>
<p><code dir="ltr">QOS_DEREG_NFY</code> (<code dir="ltr">0x2</code>): The registration will be expunged on the first notification</p>
</li>
<li>
<p><code dir="ltr">QOS_ROWIDS</code> (<code dir="ltr">0x4</code>): The notification needs to include information about the rowids that were modified</p>
</li>
<li>
<p><code dir="ltr">QOS_QUERY</code> <code dir="ltr">(0x8)</code>: specifies query result change notification as opposed to object change notification</p>
</li>
<li>
<p><code dir="ltr">QOS_BEST_EFFORt</code> <code dir="ltr">(0x16)</code>: can register simplified versions of queries and minimizes evaluation with some false positives.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t9" headers="r1c1-t9">
<p><code dir="ltr">timeout</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t9 r1c2-t9">
<p>If set to a nonzero value, specifies the time in seconds after which the registration is automatically expunged by the database. If zero / <code dir="ltr">NULL</code>, the registration lives until explicitly deregistered. Note that the <code dir="ltr">timeout</code> option can be combined with the purge on notification (QOS_DEREG_NFY) option as well.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t9" headers="r1c1-t9">
<p><code dir="ltr">operations_filter</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t9 r1c2-t9">
<p>if nonzero, specifies a filter to be selectively notified on certain operations. These flags can be used to filter based on specific operation types:</p>
<ul>
<li>
<p>0: Notify on all operations (<code dir="ltr">DBMS_CQ_NOTIFICATION</code>.<code dir="ltr">ALL_OPERATIONS</code>)</p>
</li>
<li>
<p>0x2: Notify on every <code dir="ltr">INSERT</code> (<code dir="ltr">DBMS_CQ_NOTIFICATION</code>.<code dir="ltr">INSERTOP</code>)</p>
</li>
<li>
<p>0x4: Notify on every <code dir="ltr">UPDATE</code> (<code dir="ltr">DBMS_CQ_NOTIFICATION</code>.<code dir="ltr">UPDATEOP</code>)</p>
</li>
<li>
<p>0x8: Notify on every <code dir="ltr">DELETE</code> (<code dir="ltr">DBMS_CQ_NOTIFICATION</code>.<code dir="ltr">DELETEOP</code>)</p>
</li>
</ul>
<p>A combination of operations can be specified by using a bitwise <code dir="ltr">OR</code>.</p>
<p>Caution: This parameter will be honored for object level registrations but ignored for query result change registrations. To implement notification flow control in 11g, the applications can use the &#34;<code dir="ltr">GROUPING</code> notification&#34; option.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t9" headers="r1c1-t9">
<p><code dir="ltr">transaction_lag</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t9 r1c2-t9">
<p>Lag between consecutive notifications in units of transactions. Can be used to specify the number of transactions/database changes, by which the client is willing to lag behind the database. If 0, it means that the client needs to receive an invalidation message as soon as it is generated.</p>
<p><span class="bold">Caution</span>: This parameter will be honored for object level registrations but ignored for query result change notification registrations.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t9" headers="r1c1-t9">
<p><code dir="ltr">ntfn_grouping_class</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t9 r1c2-t9">
<p>When grouping notifications, the class based on which the group is derived. Currently, the only allowed value is <code dir="ltr">DBMS_CQ_NOTIFICATION</code>.<code dir="ltr">NTFN_GROUPING_CLASS_TIME</code> by which notifications are grouped by time.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t9" headers="r1c1-t9">
<p><code dir="ltr">ntfn_grouping_value</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t9 r1c2-t9">
<p>The grouping value. This describes the time interval that defines the group in seconds. For example, if this were set to 900, it would mean that notifications that were generated in each 15 minute interval would be grouped together.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t9" headers="r1c1-t9">
<p><code dir="ltr">ntfn_grouping_type</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t9 r1c2-t9">
<p>The type of grouping desired. It can be one of two allowed values</p>
<ul>
<li>
<p><code dir="ltr">DBMS_CQ_NOTIFICATION</code>.<code dir="ltr">NTFN_GROUPING_TYPE_SUMMARY</code> - all notifications in the group are summarized into a single notification</p>
</li>
<li>
<p><code dir="ltr">DBMS_CQ_NOTIFICATION</code>.<code dir="ltr">NTFN_GROUPING_TYPE_LAST</code> - only the last notification in the group is published and the earlier ones discarded</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t9" headers="r1c1-t9">
<p><code dir="ltr">ntfn_grouping_start_time</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t9 r1c2-t9">
<p>When to start generating notifications. If specified as <code dir="ltr">NULL</code>, it defaults to the current system generated time.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t9" headers="r1c1-t9">
<p><code dir="ltr">ntfn_grouping_repeat_count</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t9 r1c2-t9">
<p>How many times the notification should be repeated. Set this to <code dir="ltr">DBMS_CQ_NOTIFICATION</code>.<code dir="ltr">NTFN_GROUPING_FOREVER</code> to receive notifications for the life time of the registration. Set to a nonzero value if only a certain number of notifications are desired for the life time of the registration.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1700"></a>Usage Notes</p>
<ul>
<li>
<p>The type declaration incorporates three other alternative constructors. In the first case all other parameters default to their default values.</p>
<pre dir="ltr">TYPE CQ_NOTIFICATION$_REG_INFO IS OBJECT (
  callback                        VARCHAR2(20),
  quosflags                       NUMBER,
  timeout                         NUMBER);
</pre>
<p>The second option applies to the type constructor defined in a previous release, and which is retained for backward compatibility:</p>
<pre dir="ltr">TYPE CQ_NOTIFICATION$_REG_INFO IS OBJECT (
  callback                        VARCHAR2(20),
  quosflags                       NUMBER,
  timeout                         NUMBER,
  operations_filter               NUMBER,
  transaction_lag                 NUMBER);
</pre>
<p>The third definition contains all the members of the type except <code dir="ltr">transaction_lag</code> which is being deprecated:</p>
<pre dir="ltr">TYPE CQ_NOTIFICATION$_REG_INFO IS OBJECT (
  callback                        VARCHAR2(20),
  quosflags                       NUMBER,
  timeout                         NUMBER,
  operations_filter               NUMBER,
  ntfn_grouping_class             NUMBER,
  ntfn_grouping_value             NUMBER,
  ntfn_grouping_type              NUMBER,
  ntfn_grouping_start_time        TIMESTAMP WITH TIME ZONE,
  ntfn_grouping_repeat_count      NUMBER);
</pre></li>
<li>
<p>In response to a database change, the server side PL/SQL procedure specified by &#34;callback&#34; is executed. The PL/SQL procedure name has to be specified in the format <code dir="ltr">s</code><code dir="ltr">chema_name.procedure_name</code>. The procedure must have the following signature:</p>
<pre dir="ltr">PROCEDURE &lt;procedure_name&gt;(ntfnds IN SYS.chnf$_desc)
</pre>
<p><code dir="ltr">CHNF$_DESC</code> describes the change notification descriptor.</p>
</li>
<li>
<p>The init.ora parameter <code dir="ltr">job_queue_processes</code> must be set to a nonzero value to receive PL/SQL notifications, because the specified procedure is executed inside a job queue process when a notification is generated.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CIHFGBCF"></a>
<div id="ARPLS65659" class="refsect1">
<h2 class="refsect1">Summary of DBMS_CQ_NOTIFICATION Subprograms</h2>
<div id="ARPLS65660" class="tblformal">
<p class="titleintable"><a id="sthref1701"></a><a id="sthref1702"></a>Table 38-7 DBMS_CQ_NOTIFICATION Package Subprograms</p>
<table class="cellalignment4330" title=" DBMS_CQ_NOTIFICATION Package Subprograms" summary="This table lists the DBMS_CHANGE_NOTIFICATION subprograms in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t10">Subprogram</th>
<th class="cellalignment4328" id="r1c2-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t10" headers="r1c1-t10">
<p><a href="#CIHEDDIB">CQ_NOTIFICATION_QUERYID Function</a></p>
</td>
<td class="cellalignment4329" headers="r2c1-t10 r1c2-t10">
<p>Returns the queryid of the most recent query that was attempted to be registered in a registration block</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t10" headers="r1c1-t10">
<p><a href="#CHDGHEBB">DEREGISTER Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r3c1-t10 r1c2-t10">
<p>De-subscribes the client with the supplied registration identifier (ID)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t10" headers="r1c1-t10">
<p><a href="#CIHDAAAF">ENABLE_REG Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r4c1-t10 r1c2-t10">
<p>Begins a registration block using an existing registration identifier (ID)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t10" headers="r1c1-t10">
<p><a href="#CIHDJEJF">NEW_REG_START Function</a></p>
</td>
<td class="cellalignment4329" headers="r5c1-t10 r1c2-t10">
<p>Begins a new registration block</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t10" headers="r1c1-t10">
<p><a href="#CIHGIACA">REG_END Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r6c1-t10 r1c2-t10">
<p>Ends the registration boundary</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t10" headers="r1c1-t10">
<p><a href="#CHDDIFDI">SET_ROWID_THRESHOLD Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r7c1-t10 r1c2-t10">
<p>Configures the maximum number of rows of a table published in a change notification if the rows of the table are modified in a transaction</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="ARPLS65661" class="refsect2"><a id="CIHEDDIB"></a>
<h3 class="refsect2"><a id="sthref1703"></a>CQ_NOTIFICATION_QUERYID Function</h3>
<p>This function returns the queryid of the most recent query that was attempted to be registered in a registration block.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1704"></a>Syntax</p>
<pre dir="ltr">DBMS_CQ_NOTIFICATION.CQ_NOTIFICATION_QUERYID
 RETURN NUMBER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1705"></a>Return Values</p>
<p>Returns the queryid of the most recently registered query.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65662" class="refsect2"><a id="CHDGHEBB"></a>
<h3 class="refsect2"><a id="sthref1706"></a>DEREGISTER Procedure</h3>
<p>This procedure desubscribes the client with the specified registration identifier (ID).</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1707"></a>Syntax</p>
<pre dir="ltr">DBMS_CQ_NOTIFICATION.DEREGISTER (
  regid IN NUMBER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1708"></a>Parameters</p>
<div id="ARPLS65663" class="tblformal">
<p class="titleintable"><a id="sthref1709"></a><a id="sthref1710"></a>Table 38-8 DEREGISTER Procedure Parameters</p>
<table class="cellalignment4330" title="DEREGISTER Procedure Parameters" summary="This table describes the parameters of DBMS_CHANGE_NOTIFICATION.DEREGISTER." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t11">Parameter</th>
<th class="cellalignment4328" id="r1c2-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t11" headers="r1c1-t11">
<p><code dir="ltr">regid</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t11 r1c2-t11">
<p>Client registration ID</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1711"></a>Usage Notes</p>
<p>Only the user that created the registration (or the <code dir="ltr">SYS</code> user) will be able to desubscribe the registration.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65664" class="refsect2"><a id="CIHDAAAF"></a>
<h3 class="refsect2">ENABLE_REG Procedure</h3>
<p>This procedure adds objects to an existing registration identifier (ID). It is similar to the interface for creating a new registration, except that it takes an existing <code dir="ltr">regid</code> to which to add objects.Subsequent execution of queries causes the objects referenced in the queries to be added to the specified <code dir="ltr">regid</code>, and the registration is completed on invoking the <a href="#CIHGIACA">REG_END Procedure</a>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1712"></a>Syntax</p>
<pre dir="ltr">DBMS_CQ_NOTIFICATION.ENABLE_REG (  
  regid IN NUMBER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1713"></a>Parameters</p>
<div id="ARPLS65665" class="tblformal">
<p class="titleintable"><a id="sthref1714"></a><a id="sthref1715"></a>Table 38-9 ENABLE_REG Procedure Parameters</p>
<table class="cellalignment4330" title="ENABLE_REG Procedure Parameters" summary="This table describes the parameters of DBMS_CHANGE_NOTIFICATION.ENABLE_REG." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t12">Parameter</th>
<th class="cellalignment4328" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t12" headers="r1c1-t12">
<p><code dir="ltr">regid</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t12 r1c2-t12">
<p>Client registration ID</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1716"></a>Usage Notes</p>
<p>Only the user that created the registration will be able to add further objects to the registration.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65666" class="refsect2"><a id="CIHDJEJF"></a>
<h3 class="refsect2">NEW_REG_START Function</h3>
<p>This procedure begins a new registration block. Any objects referenced by queries executed within the registration block are considered interesting objects and added to the registration. The registration block ends upon calling the <code dir="ltr">REG_END</code> procedure.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1717"></a>Syntax</p>
<pre dir="ltr">DBMS_CQ_NOTIFICATION.NEW_REG_START (  
  regds IN sys.chnf$_reg_info)
 RETURN NUMBER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1718"></a>Parameters</p>
<div id="ARPLS65667" class="tblformal">
<p class="titleintable"><a id="sthref1719"></a><a id="sthref1720"></a>Table 38-10 NEW_REG_START Function Parameters</p>
<table class="cellalignment4330" title="NEW_REG_START Function Parameters" summary="This table describes the parameters of DBMS_CHANGE_NOTIFICATION.NEW_REG_START." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t13">Parameter</th>
<th class="cellalignment4328" id="r1c2-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t13" headers="r1c1-t13">
<p><code dir="ltr">sys.chnf$_reg_info</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t13 r1c2-t13">
<p>Registration descriptor describing the notification handler and other properties of the registration</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1721"></a>Return Values</p>
<p>The procedure returns a registration-id which is a unique integer assigned by the database to this registration. The registration-id will be echoed back in every notification received for this registration.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1722"></a>Usage Notes</p>
<ul>
<li>
<p>The only operations permitted inside a registration block are queries (the ones the user wishes to register). DML and DDL operations are not permitted.</p>
</li>
<li>
<p>The registration block is a session property and implicitly terminates upon exiting the session. While the registration block is a session property, the registration itself is a persistent database entity. Once created, the registration survives until explicitly deregistered by the client application or timed-out or removed by the database for some other reason (such as loss of privileges).</p>
</li>
<li>
<p>The user must have the <code dir="ltr">CHANGE NOTIFICATION</code> system privilege and <code dir="ltr">SELECT</code> or <code dir="ltr">READ</code> privileges on any objects to be registered.</p>
</li>
<li>
<p>The <code dir="ltr">SYS</code> user will not be permitted to create new registrations.</p>
</li>
<li>
<p>Nesting of registration block is not permitted.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65668" class="refsect2"><a id="CIHGIACA"></a>
<h3 class="refsect2">REG_END Procedure</h3>
<p>This procedure marks the end of the registration block. No newly executed queries are tracked.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1723"></a>Syntax</p>
<pre dir="ltr">DBMS_CQ_NOTIFICATION.REG_END;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS73678" class="refsect2"><a id="CHDDIFDI"></a>
<h3 class="refsect2"><a id="sthref1724"></a>SET_ROWID_THRESHOLD Procedure</h3>
<p>This procedure configures the maximum number of rows of a table published in a change notification if the rows of the table are modified in a transaction.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1725"></a>Syntax</p>
<pre dir="ltr">DBMS_CQ_NOTIFICATION.SET_ROWID_THRESHOLD (  
  tbname     IN  VARCHAR2,
  threshold  IN  NUMBER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1726"></a>Parameters</p>
<div id="ARPLS73679" class="tblformal">
<p class="titleintable"><a id="sthref1727"></a><a id="sthref1728"></a>Table 38-11 SET_ROWID_THRESHOLD Procedure Parameters</p>
<table class="cellalignment4330" title="SET_ROWID_THRESHOLD Procedure Parameters" summary="This table describes the parameters of DBMS_CHANGE_NOTIFICATION.SET_ROWID_THRESHOLD." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t14">Parameter</th>
<th class="cellalignment4328" id="r1c2-t14">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t14" headers="r1c1-t14">
<p><code dir="ltr">tbname</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t14 r1c2-t14">
<p>Table name qualified by the schema name in the form <code dir="ltr">schemaname.tablename</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t14" headers="r1c1-t14">
<p><code dir="ltr">threshold</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t14 r1c2-t14">
<p>Maximum number of modified rows of the table to be published in the change notification</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1729"></a>Usage Notes</p>
<ul>
<li>
<p>The table needs to be registered for change notification either at object change granularity or at query result set granularity.</p>
</li>
<li>
<p>The threshold set by means of this subprogram applies to that instance only and does not persist across instance startup/shutdown.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4320">
<tr>
<td class="cellalignment4329">
<table class="cellalignment4325">
<tr>
<td class="cellalignment4324"><a href="d_connection_pool.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4324"><a href="d_credential.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4332">
<table class="cellalignment4323">
<tr>
<td class="cellalignment4324"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4324"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4324"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4324"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4324"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4324"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>