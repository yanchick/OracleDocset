<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-2482"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/UTL_NLA"></a><title>UTL_NLA</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1086"/>
<meta name="dcterms.created" content="2016-09-02T5:37:14Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database PL/SQL Packages and Types Reference"/>
<meta name="dcterms.identifier" content="E41829-07"/>
<meta name="dcterms.isVersionOf" content="ARPLS"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="u_match.htm" title="Previous" type="text/html"/>
<link rel="Next" href="u_raw.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41829-07.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">263/290</span> <!-- End Header -->
<div id="ARPLS224" class="chapter"><a id="CIABEFIJ"></a>
<h1 class="chapter"><span class="secnum">259</span> UTL_NLA</h1>
<p>The <code dir="ltr"><a id="sthref19058"></a>UTL_NLA</code> package exposes a subset of the BLAS and LAPACK (Version 3.0) operations on vectors and matrices represented as <code dir="ltr">VARRAY</code>s.</p>
<p>This chapter contains the following topics:</p>
<ul>
<li>
<p><a href="#CIACEBCC">Using UTL_NLA</a></p>
<ul>
<li>
<p>Overview</p>
</li>
<li>
<p>Rules and Limits</p>
</li>
<li>
<p>Security Model</p>
</li>
</ul>
</li>
<li>
<p><a href="#CIAGFDIB">Subprogram Groups</a></p>
<ul>
<li>
<p>BLAS Level 1 (Vector-Vector Operations) Subprograms</p>
</li>
<li>
<p>BLAS Level 2 (Matrix-Vector Operations) Subprograms</p>
</li>
<li>
<p>BLAS Level 3 (Matrix-Matrix Operations) Subprograms</p>
</li>
<li>
<p>LAPACK Driver Routines (Linear Equations) Subprograms</p>
</li>
<li>
<p>LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</p>
</li>
</ul>
</li>
<li>
<p><a href="#CIAFDJJA">Summary of UTL_NLA Subprograms</a></p>
</li>
</ul>
<div class="refentry"><a id="CIACEBCC"></a>
<div id="ARPLS71223" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">Using UTL_NLA</h2>
<p>This section contains topics which relate to using the <code dir="ltr">UTL_NLA</code> package.</p>
<ul>
<li>
<p><a href="#CIAGIDEJ">Overview</a></p>
</li>
<li>
<p><a href="#CIAHIAJI">Rules and Limits</a></p>
</li>
<li>
<p><a href="#CIABFEJH">Security Model</a></p>
</li>
</ul>
<div id="ARPLS71224" class="refsect2"><a id="CIAGIDEJ"></a>
<h3 class="refsect2">Overview</h3>
<p>The <code dir="ltr">UTL_NLA</code> package exposes a subset of the BLAS (Basic Linear Algebra Subprograms) and LAPACK (Linear Algebra PACKage) (Version 3.0) operations on vectors and matrices represented as <code dir="ltr">VARRAY</code>s.</p>
<p class="subhead2"><a id="ARPLS71225"></a>Standards</p>
<p>For more information on the BLAS and LAPACK standards see</p>
<br/>
<code dir="ltr"><a href="http://www.netlib.org/blas/">http://www.netlib.org/blas/</a></code><br/>
<code dir="ltr"><a href="http://www.netlib.org/lapack/">http://www.netlib.org/lapack/</a></code>
<p class="subhead2"><a id="ARPLS71226"></a>Required Expertise</p>
<p>Users of this package are expected to have a sound grasp of linear algebra in general and of the BLAS and LAPACK libraries in particular.</p>
<p class="subhead2"><a id="ARPLS71227"></a>Implementation</p>
<p>The mapping between BLAS and LAPACK procedures and their corresponding PL/SQL calls is one-to-one.</p>
<ul>
<li>
<p>All BLAS functions have the <code dir="ltr">BLAS_</code> prefix (for example, the <a href="#CIAJHJHD">BLAS_ASUM Functions</a>). The subroutines and functions in BLAS are mapped to PL/SQL procedures and functions, respectively.</p>
</li>
<li>
<p>All LAPACK functions have the <code dir="ltr">LAPACK_</code> prefix (for example, the <a href="#CIABIIEB">LAPACK_GBSV Procedures</a>). The subroutines in LAPACK are mapped to PL/SQL procedures. Procedures that perform the same operation but differ only on the datatype of the arguments have the same overloaded names.</p>
</li>
</ul>
<p>The mapping between BLAS and LAPACK procedure parameters and those of their corresponding PL/SQL subprograms is almost one-to-one.</p>
<ul>
<li>
<p>Also in the PL/SQL interface for LAPACK, all <code dir="ltr">/work/</code> arguments have been removed. The <code dir="ltr">UTL_NLA</code> package manages the allocation and de-allocation of all work areas required by the libraries.</p>
</li>
<li>
<p>A new optional parameter, <code dir="ltr">pack</code>, has been added to the end of each LAPACK procedure that specifies if the matrix has been linearized in the row-major or column-major (default) format.</p>
</li>
</ul>
</div>
<!-- class="refsect2" -->
<div id="ARPLS71228" class="refsect2"><a id="CIAHIAJI"></a>
<h3 class="refsect2">Rules and Limits</h3>
<p>Vectors and matrices are stored in <code dir="ltr">VARRAY</code>s with a maximum size of one million entries. Given this restriction, <code dir="ltr">UTL_NLA</code> vectors can be up to one million entries but matrices need to be of size RxC &lt;= 1,000,000.</p>
</div>
<!-- class="refsect2" -->
<div id="ARPLS73299" class="refsect2"><a id="CIABFEJH"></a>
<h3 class="refsect2">Security Model</h3>
<p>The <code dir="ltr">UTL_NLA</code> package is owned by user <code dir="ltr">SYS</code> and is installed as part of database installation. Execution privilege on the package is granted to public. The routines in the package are run with invokers&#39; rights (run with the privileges of the current user).</p>
</div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CIAGFDIB"></a>
<div id="ARPLS71229" class="refsect1">
<h2 class="refsect1">Subprogram Groups</h2>
<ul>
<li>
<p><a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a></p>
</li>
<li>
<p><a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a></p>
</li>
<li>
<p><a href="#CIAIJHCF">BLAS Level 3 (Matrix-Matrix Operations) Subprograms</a></p>
</li>
<li>
<p><a href="#CIAFBCIJ">LAPACK Driver Routines (Linear Equations) Subprograms</a></p>
</li>
<li>
<p><a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a></p>
</li>
</ul>
<div id="ARPLS71230" class="refsect2"><a id="i1025881"></a>
<h3 class="refsect2"><a id="sthref19059"></a>BLAS Level 1 (Vector-Vector Operations) Subprograms</h3>
<div id="ARPLS71231" class="tblformal">
<p class="titleintable"><a id="sthref19060"></a><a id="CIHFJBED"></a>Table 259-1 BLAS Level 1 (Vector-Vector Operations) Subprograms</p>
<table class="cellalignment4330" title=" BLAS Level 1 (Vector-Vector Operations) Subprograms" summary="This table lists the DBMS_ADVISOR SQLAccess Advisor subprograms in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t2">Subprogram</th>
<th class="cellalignment4328" id="r1c2-t2">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t2" headers="r1c1-t2">
<p><a href="#CIAJHJHD">BLAS_ASUM Functions</a></p>
</td>
<td class="cellalignment4329" headers="r2c1-t2 r1c2-t2">
<p>Computes the sum of the absolute values of the vector components</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t2" headers="r1c1-t2">
<p><a href="#CIAJDJEJ">BLAS_AXPY Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r3c1-t2 r1c2-t2">
<p>Copies <code dir="ltr">alpha</code>*<code dir="ltr">X</code> + <code dir="ltr">Y</code> into vector <code dir="ltr">Y</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t2" headers="r1c1-t2">
<p><a href="#CIAIGABI">BLAS_COPY Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r4c1-t2 r1c2-t2">
<p>Copies the contents of vector <code dir="ltr">X</code> to vector <code dir="ltr">Y</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t2" headers="r1c1-t2">
<p><a href="#CIAICFIG">BLAS_DOT Functions</a></p>
</td>
<td class="cellalignment4329" headers="r5c1-t2 r1c2-t2">
<p>Returns the dot (scalar) product of two vectors <code dir="ltr">X</code> and <code dir="ltr">Y</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t2" headers="r1c1-t2">
<p><a href="#CIAIGEAJ">BLAS_IAMAX Functions</a></p>
</td>
<td class="cellalignment4329" headers="r6c1-t2 r1c2-t2">
<p>Computes the index of the first element of a vector that has the largest absolute value</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t2" headers="r1c1-t2">
<p><a href="#CIAJEIAC">BLAS_NRM2 Functions</a></p>
</td>
<td class="cellalignment4329" headers="r7c1-t2 r1c2-t2">
<p>Computes the vector 2-norm (Euclidean norm)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t2" headers="r1c1-t2">
<p><a href="#CIAGCADG">BLAS_ROT Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r8c1-t2 r1c2-t2">
<p>Returns the plane rotation of points</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t2" headers="r1c1-t2">
<p><a href="#CIAFGGDH">BLAS_ROTG Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r9c1-t2 r1c2-t2">
<p>Returns the Givens rotation of points</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t2" headers="r1c1-t2">
<p><a href="#CIAIBBHJ">BLAS_SCAL Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r10c1-t2 r1c2-t2">
<p>Scales a vector by a constant</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t2" headers="r1c1-t2">
<p><a href="#CIADBHFG">BLAS_SWAP Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r11c1-t2 r1c2-t2">
<p>Swaps the contents of two vectors each of size n</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71232" class="refsect2"><a id="CIACEIDA"></a>
<h3 class="refsect2"><a id="sthref19061"></a>BLAS Level 2 (Matrix-Vector Operations) Subprograms</h3>
<div id="ARPLS71233" class="tblformal">
<p class="titleintable"><a id="sthref19062"></a><a id="sthref19063"></a>Table 259-2 BLAS Level 2 (Matrix-Vector Operations) Subprograms</p>
<table class="cellalignment4330" title=" BLAS Level 2 (Matrix-Vector Operations) Subprograms" summary="This table lists the DBMS_ADVISOR SQLAccess Advisor subprograms in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t3">Subprogram</th>
<th class="cellalignment4328" id="r1c2-t3">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t3" headers="r1c1-t3">
<p><a href="#CIADGCFJ">BLAS_GBMV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r2c1-t3 r1c2-t3">
<p>Performs the matrix-vector operation <code dir="ltr">y := alpha*A*x + beta*y</code> or <code dir="ltr">y := alpha*A&#39;*x + beta*y</code> where <code dir="ltr">alpha</code> and <code dir="ltr">beta</code> are scalars, <code dir="ltr">x</code> and <code dir="ltr">y</code> are vectors and <code dir="ltr">A</code> is an <code dir="ltr">m</code> by <code dir="ltr">n</code> band matrix, with <code dir="ltr">kl</code> sub-diagonals and <code dir="ltr">ku</code> super-diagonals</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t3" headers="r1c1-t3">
<p><a href="#CIAFEAFG">BLAS_GEMV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r3c1-t3 r1c2-t3">
<p>Performs the matrix-vector operations <code dir="ltr">y := alpha*A*x + beta*y</code> or <code dir="ltr">y := alpha*A&#39;*x + beta*y</code> where <code dir="ltr">alpha</code> and <code dir="ltr">beta</code> are scalars, <code dir="ltr">x</code> and <code dir="ltr">y</code> are vectors and <code dir="ltr">A</code> is an <code dir="ltr">m</code> by <code dir="ltr">n</code> matrix</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t3" headers="r1c1-t3">
<p><a href="#CIAEIJCI">BLAS_GER Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r4c1-t3 r1c2-t3">
<p>Performs a rank 1 operation <code dir="ltr">A := alpha*x*y&#39; + A</code> where <code dir="ltr">alpha</code> is a scalar, <code dir="ltr">x</code> is an <code dir="ltr">m</code> element vector, <code dir="ltr">y</code> is an n element vector and <code dir="ltr">A</code> is an <code dir="ltr">m</code> by <code dir="ltr">n</code> matrix</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t3" headers="r1c1-t3">
<p><a href="#CIABHIIE">BLAS_SBMV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r5c1-t3 r1c2-t3">
<p>Performs a matrix-vector operation <code dir="ltr">y := alpha*A*x + beta*y</code> where <code dir="ltr">alpha</code> and <code dir="ltr">beta</code> are scalars, <code dir="ltr">x</code> and <code dir="ltr">y</code> are n element vectors and <code dir="ltr">A</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> symmetric band matrix, with <code dir="ltr">k</code> super-diagonals</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t3" headers="r1c1-t3">
<p><a href="#CIAGFAGC">BLAS_SPMV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r6c1-t3 r1c2-t3">
<p>Performs a matrix-vector operation <code dir="ltr">y := alpha*A*x + beta*y</code> where <code dir="ltr">alpha</code> and <code dir="ltr">beta</code> are scalars, <code dir="ltr">x</code> and <code dir="ltr">y</code> are <code dir="ltr">n</code> element vectors and <code dir="ltr">A</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> symmetric matrix, supplied in packed form</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t3" headers="r1c1-t3">
<p><a href="#CIAIECGG">BLAS_SPR Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r7c1-t3 r1c2-t3">
<p>Performs a symmetric rank 1 operation <code dir="ltr">A := alpha*x*x&#39; + A</code> where <code dir="ltr">alpha</code> is a real scalar, <code dir="ltr">x</code> is an <code dir="ltr">n</code> element vector, and <code dir="ltr">A</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> symmetric matrix, supplied in packed form</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t3" headers="r1c1-t3">
<p><a href="#CIACHFGD">BLAS_SPR2 Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r8c1-t3 r1c2-t3">
<p>Performs a symmetric rank 2 operation <code dir="ltr">A := alpha*x*y&#39; + alpha*y*x&#39; +A</code> where <code dir="ltr">alpha</code> is a scalar, <code dir="ltr">x</code> and <code dir="ltr">y</code> are <code dir="ltr">n</code> element vectors, and <code dir="ltr">A</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> symmetric matrix, supplied in packed form</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t3" headers="r1c1-t3">
<p><a href="#CIABHIIE">BLAS_SBMV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r9c1-t3 r1c2-t3">
<p>Performs a matrix-vector operation <code dir="ltr">y := alpha*A*x + beta*y</code> where <code dir="ltr">alpha</code> and <code dir="ltr">beta</code> are scalars, <code dir="ltr">x</code> and <code dir="ltr">y</code> are n element vectors and <code dir="ltr">A</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> symmetric band matrix, with <code dir="ltr">k</code> super-diagonals</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t3" headers="r1c1-t3">
<p><a href="#CIAEAJDG">BLAS_SYMV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r10c1-t3 r1c2-t3">
<p>Performs a matrix-vector operation <code dir="ltr">y := alpha*A*x + beta*y</code> where <code dir="ltr">alpha</code> and <code dir="ltr">beta</code> are scalars, <code dir="ltr">x</code> and <code dir="ltr">y</code> are <code dir="ltr">n</code> element vectors and <code dir="ltr">A</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> symmetric matrix</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t3" headers="r1c1-t3">
<p><a href="#CIAFBJAJ">BLAS_SYR Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r11c1-t3 r1c2-t3">
<p>Performs a symmetric rank 1 operation <code dir="ltr">A := alpha*x*x&#39; + A</code> where <code dir="ltr">alpha</code> is a real scalar, <code dir="ltr">x</code> is an <code dir="ltr">n</code> element vector, and <code dir="ltr">A</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> symmetric matrix</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t3" headers="r1c1-t3">
<p><a href="#CIAHBHJB">BLAS_SYR2 Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r12c1-t3 r1c2-t3">
<p>Performs a symmetric rank 2 operation <code dir="ltr">A := alpha*x*y&#39; + alpha*y*x&#39; + A</code> where <code dir="ltr">alpha</code> is a scalar, <code dir="ltr">x</code> and <code dir="ltr">y</code> are <code dir="ltr">n</code> element vectors, and <code dir="ltr">A</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> symmetric matrix</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t3" headers="r1c1-t3">
<p><a href="#CIAFEEGF">BLAS_TBMV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r13c1-t3 r1c2-t3">
<p>Performs a matrix-vector operation <code dir="ltr">x := A*x</code> or <code dir="ltr">A&#39;*x = b</code> where <code dir="ltr">x</code> is an <code dir="ltr">n</code> element vector and <code dir="ltr">A</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> unit, or non-unit, upper or lower triangular band matrix, with <code dir="ltr">(k + 1)</code> diagonals</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t3" headers="r1c1-t3">
<p><a href="#CIACICEE">BLAS_TBSV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r14c1-t3 r1c2-t3">
<p>Solves one of the systems of equation <code dir="ltr">A*x = b</code> or <code dir="ltr">A&#39;*x = b</code> where <code dir="ltr">b</code> and <code dir="ltr">x</code> are <code dir="ltr">n</code> element vectors and <code dir="ltr">A</code> is an <code dir="ltr">n</code> by n unit, or non-unit, upper or lower triangular band matrix, with <code dir="ltr">(k + 1)</code> diagonals</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r15c1-t3" headers="r1c1-t3">
<p><a href="#CIAIFFDD">BLAS_TPMV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r15c1-t3 r1c2-t3">
<p>Performs a matrix-vector operation <code dir="ltr">x := A*x</code> or <code dir="ltr">x := A&#39;*x</code> where <code dir="ltr">x</code> is an <code dir="ltr">n</code> element vector and <code dir="ltr">A</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> unit, or non-unit, upper or lower triangular matrix, supplied in packed form</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r16c1-t3" headers="r1c1-t3">
<p><a href="#CIACJJHC">BLAS_TPSV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r16c1-t3 r1c2-t3">
<p>Solves one of the systems of equation <code dir="ltr">A*x = b</code> or <code dir="ltr">A&#39;*x = b</code> where <code dir="ltr">b</code> and <code dir="ltr">x</code> are <code dir="ltr">n</code> element vectors and <code dir="ltr">A</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> unit, or non-unit, upper or lower triangular matrix, supplied in packed form</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r17c1-t3" headers="r1c1-t3">
<p><a href="#CIAHFEBJ">BLAS_TRMV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r17c1-t3 r1c2-t3">
<p>Performs a matrix-vector operation <code dir="ltr">x := A*x</code> or <code dir="ltr">x := A&#39;*x</code> where <code dir="ltr">x</code> is an <code dir="ltr">n</code> element vector and <code dir="ltr">A</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> unit, or non-unit, upper or lower triangular matrix</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r18c1-t3" headers="r1c1-t3">
<p><a href="#CIABJIEI">BLAS_TRSV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r18c1-t3 r1c2-t3">
<p>Solves one of the systems of equation <code dir="ltr">A*x = b</code> or <code dir="ltr">A&#39;*x = b</code> where <code dir="ltr">b</code> and <code dir="ltr">x</code> are <code dir="ltr">n</code> element vectors and <code dir="ltr">A</code> is an n by <code dir="ltr">n</code> unit, or non-unit, upper or lower triangular matrix</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71234" class="refsect2"><a id="CIAIJHCF"></a>
<h3 class="refsect2"><a id="sthref19064"></a>BLAS Level 3 (Matrix-Matrix Operations) Subprograms</h3>
<div id="ARPLS71235" class="tblformal">
<p class="titleintable"><a id="sthref19065"></a><a id="sthref19066"></a>Table 259-3 BLAS Level 3 (Matrix-Matrix Operations) Subprograms</p>
<table class="cellalignment4330" title=" BLAS Level 3 (Matrix-Matrix Operations) Subprograms" summary="This table lists the DBMS_ADVISOR SQLAccess Advisor subprograms in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t4">Subprogram</th>
<th class="cellalignment4328" id="r1c2-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t4" headers="r1c1-t4">
<p><a href="#CIACCFIJ">BLAS_GEMM Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r2c1-t4 r1c2-t4">
<p>Performs one of the matrix-vector operations <code dir="ltr">C := alpha*op(A)*op(B) + beta*C</code> where <code dir="ltr">op(X) is one of op(X) = X or op(X) = X&#39;</code> where <code dir="ltr">alpha</code> and <code dir="ltr">beta</code> are scalars, and <code dir="ltr">A</code>, <code dir="ltr">B</code> and <code dir="ltr">C</code> are matrices, with <code dir="ltr">op(A)</code> an <code dir="ltr">m</code> by <code dir="ltr">k</code> matrix, <code dir="ltr">op(B)</code> a <code dir="ltr">k</code> by <code dir="ltr">n</code> matrix and <code dir="ltr">C</code> an <code dir="ltr">m</code> by <code dir="ltr">n</code> matrix</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t4" headers="r1c1-t4">
<p><a href="#CIAHABIJ">BLAS_SYMM Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r3c1-t4 r1c2-t4">
<p>Performs one of the matrix-vector operations <code dir="ltr">C := alpha*A*B + beta*C</code> or <code dir="ltr">C := alpha*B*A + beta*C</code> where <code dir="ltr">alpha</code> and <code dir="ltr">beta</code> are scalars, <code dir="ltr">A</code> is a symmetric matrix, and <code dir="ltr">B</code> and <code dir="ltr">C</code> are <code dir="ltr">m</code> by <code dir="ltr">n</code> matrices</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t4" headers="r1c1-t4">
<p><a href="#CIAJFDDD">BLAS_SYR2K Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r4c1-t4 r1c2-t4">
<p>Performs one of the symmetric rank2 k operations <code dir="ltr">C := alpha*A*B&#39; + alpha*B*A&#39; + beta*C</code> or <code dir="ltr">C := alpha*A&#39;*B + alpha*B&#39;*A + beta*C</code> where <code dir="ltr">alpha</code> and <code dir="ltr">beta</code> are scalars, <code dir="ltr">C</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> symmetric matrix and <code dir="ltr">A</code> and <code dir="ltr">B</code> are <code dir="ltr">n</code> by <code dir="ltr">k</code> matrices in the first case and <code dir="ltr">k</code> by <code dir="ltr">n</code> matrices in the second case</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t4" headers="r1c1-t4">
<p><a href="#CIABCBAG">BLAS_SYRK Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r5c1-t4 r1c2-t4">
<p>Performs one of the symmetric rank <code dir="ltr">k</code> operations <code dir="ltr">C := alpha*A*A&#39; + beta*C</code> or <code dir="ltr">C := alpha*A&#39;*A + beta*C</code> where <code dir="ltr">alpha</code> and <code dir="ltr">beta</code> are scalars, <code dir="ltr">C</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> symmetric matrix and <code dir="ltr">A</code> is an <code dir="ltr">n</code> by <code dir="ltr">k</code> matrix in the first case and a <code dir="ltr">k</code> by <code dir="ltr">n</code> matrix in the second case</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t4" headers="r1c1-t4">
<p><a href="#CIAEJGDI">BLAS_TRMM Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r6c1-t4 r1c2-t4">
<p>Performs one of the matrix-vector operations <code dir="ltr">B := alpha*op(A)*B</code> or <code dir="ltr">B := alpha*B*op(A)</code> where <code dir="ltr">alpha</code> is a scalar, <code dir="ltr">B</code> is an <code dir="ltr">m</code> by <code dir="ltr">n</code> matrix, <code dir="ltr">A</code> is a unit, or non-unit, upper or lower triangular matrix and <code dir="ltr">op(A)</code> is one of two alternatives</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t4" headers="r1c1-t4">
<p><a href="#CIAHHHFD">BLAS_TRSM Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r7c1-t4 r1c2-t4">
<p>Performs one of the matrix-vector operations <code dir="ltr">op(A)*X = alpha*B</code> or <code dir="ltr">X*op(A) = alpha*B</code> where <code dir="ltr">alpha</code> is a scalar, <code dir="ltr">X</code> and <code dir="ltr">B</code> are <code dir="ltr">m</code> by <code dir="ltr">n</code> matrices, <code dir="ltr">A</code> is a unit, or non-unit, upper or lower triangular matrix, <code dir="ltr">op(A)</code> is one of two alternatives. The matrix <code dir="ltr">X</code> is overwritten on <code dir="ltr">B</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71236" class="refsect2"><a id="CIAFBCIJ"></a>
<h3 class="refsect2"><a id="sthref19067"></a>LAPACK Driver Routines (Linear Equations) Subprograms</h3>
<div id="ARPLS71237" class="tblformal">
<p class="titleintable"><a id="sthref19068"></a><a id="sthref19069"></a>Table 259-4 LAPACK Driver Routines (Linear Equations) Subprograms</p>
<table class="cellalignment4330" title=" LAPACK Driver Routines (Linear Equations) Subprograms" summary="This table lists the LAPACK Driver Routines (Linear Equations) subprograms in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t5">Subprogram</th>
<th class="cellalignment4328" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t5" headers="r1c1-t5">
<p><a href="#CIABIIEB">LAPACK_GBSV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r2c1-t5 r1c2-t5">
<p>This procedure computes the solution to a real system of linear equations <code dir="ltr">a * x = b</code> where <code dir="ltr">a</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> matrix and <code dir="ltr">x</code> and <code dir="ltr">b</code> are <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> matrices. The <code dir="ltr">LU</code> decomposition with partial pivoting and row interchanges is used to factor <code dir="ltr">A</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t5" headers="r1c1-t5">
<p><a href="#CIAFDDCG">LAPACK_GESV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r3c1-t5 r1c2-t5">
<p>This procedure computes the solution to a real system of linear equations <code dir="ltr">a * x = b</code> where <code dir="ltr">a</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> matrix and <code dir="ltr">x</code> and <code dir="ltr">b</code> are <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> matrices. The <code dir="ltr">LU</code> decomposition with partial pivoting and row interchanges is used to factor <code dir="ltr">A</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t5" headers="r1c1-t5">
<p><a href="#CIAFDEJI">LAPACK_GTSV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r4c1-t5 r1c2-t5">
<p>This procedure solves the equation <code dir="ltr">a * x = b</code> where <code dir="ltr">a</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> tridiagonal matrix, by Gaussian elimination with partial pivoting.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t5" headers="r1c1-t5">
<p><a href="#CIAJHJBC">LAPACK_PBSV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r5c1-t5 r1c2-t5">
<p>This procedure computes the solution to a real system of linear equations <code dir="ltr">a * x = b</code> where <code dir="ltr">a</code> is an n by n symmetric positive definite band matrix and <code dir="ltr">x</code> and <code dir="ltr">b</code> are <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> matrices. The Cholesky decomposition is used to factor <code dir="ltr">A</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t5" headers="r1c1-t5">
<p><a href="#CIAGDCGG">LAPACK_POSV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r6c1-t5 r1c2-t5">
<p>This procedure computes the solution to a real system of linear equations <code dir="ltr">a * x = b</code> where <code dir="ltr">a</code> is an n by n symmetric positive definite matrix and <code dir="ltr">x</code> and <code dir="ltr">b</code> are <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> matrices. The Cholesky decomposition is used to factor <code dir="ltr">A</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t5" headers="r1c1-t5">
<p><a href="#CIAGICJH">LAPACK_PPSV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r7c1-t5 r1c2-t5">
<p>This procedure computes the solution to a real system of linear equations <code dir="ltr">a * x = b</code> where <code dir="ltr">a</code> is an n by n symmetric positive definite matrix stored in packed format and <code dir="ltr">x</code> and <code dir="ltr">b</code> are <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> matrices. The Cholesky decomposition is used to factor <code dir="ltr">A</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t5" headers="r1c1-t5">
<p><a href="#CIAEJBEG">LAPACK_PTSV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r8c1-t5 r1c2-t5">
<p>This procedure computes the solution to a real system of linear equations <code dir="ltr">a * x = b</code> where <code dir="ltr">a</code> is an n by n symmetric positive definite tridiagonal matrix, and <code dir="ltr">x</code> and <code dir="ltr">b</code> are <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> matrices.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t5" headers="r1c1-t5">
<p><a href="#CIAEDCDH">LAPACK_SPSV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r9c1-t5 r1c2-t5">
<p>This procedure computes the solution to a real system of linear equations <code dir="ltr">a * x = b</code> where <code dir="ltr">a</code> is an n by n symmetric matrix stored in packed format, and <code dir="ltr">x</code> and <code dir="ltr">b</code> are <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> matrices. The diagonal pivoting method is used to factor <code dir="ltr">A</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t5" headers="r1c1-t5">
<p><a href="#CIADGGFJ">LAPACK_SYSV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r10c1-t5 r1c2-t5">
<p>This procedure computes the solution to a real system of linear equations <code dir="ltr">a * x = b</code> where <code dir="ltr">a</code> is an n by n symmetric matrix, and <code dir="ltr">x</code> and <code dir="ltr">b</code> are <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> matrices. The diagonal pivoting method is used to factor <code dir="ltr">A</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71238" class="refsect2"><a id="CIAFGFFC"></a>
<h3 class="refsect2"><a id="sthref19070"></a>LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</h3>
<div id="ARPLS71239" class="tblformal">
<p class="titleintable"><a id="sthref19071"></a><a id="sthref19072"></a>Table 259-5 LAPACK Driver Routines (LLS and Eigenvalue Problems)</p>
<table class="cellalignment4330" title="LAPACK Driver Routines (LLS and Eigenvalue Problems)" summary="This table lists the LAPACK Driver Routines (LLS and Eigenvalue) subprograms in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t6">Subprogram</th>
<th class="cellalignment4328" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t6" headers="r1c1-t6">
<p><a href="#CIADGHHA">LAPACK_GEES Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r2c1-t6 r1c2-t6">
<p>Computes for an <code dir="ltr">n</code> by <code dir="ltr">n</code> real nonsymmetric matrix <code dir="ltr">A</code>, the eigenvalues, the real Schur form <code dir="ltr">T</code>, and, optionally, the matrix of Schur vectors <code dir="ltr">Z</code>. This gives the Schur factorization <code dir="ltr">A = Z*T*(Z**T)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t6" headers="r1c1-t6">
<p><a href="#CIADEDBA">LAPACK_GEEV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r3c1-t6 r1c2-t6">
<p>Computes for an <code dir="ltr">n</code> by <code dir="ltr">n</code> real nonsymmetric matrix <code dir="ltr">A</code>, the eigenvalues and, optionally, the left and/or right eigenvectors.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t6" headers="r1c1-t6">
<p><a href="#CIADBIAE">LAPACK_GELS Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r4c1-t6 r1c2-t6">
<p>Solves overdetermined or underdetermined real linear systems involving an <code dir="ltr">m</code> by <code dir="ltr">n</code> matrix <code dir="ltr">A</code>, or its transpose, using a <code dir="ltr">QR</code> or <code dir="ltr">LQ</code> factorization of <code dir="ltr">A</code>. It is assumed that <code dir="ltr">A</code> has full rank.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t6" headers="r1c1-t6">
<p><a href="#CIAJBIGH">LAPACK_GESDD Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r5c1-t6 r1c2-t6">
<p>Computes the singular value decomposition (SVD) of a real <code dir="ltr">m</code> by <code dir="ltr">n</code> matrix <code dir="ltr">A</code>, optionally computing the left and right singular vectors. If singular vectors are desired, it uses a divide-and-conquer algorithm that makes mild assumptions about floating point arithmetic.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t6" headers="r1c1-t6">
<p><a href="#CIAFBFFI">LAPACK_GESVD Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r6c1-t6 r1c2-t6">
<p>Computes the singular value decomposition (SVD) of a real <code dir="ltr">m</code> by <code dir="ltr">n</code> matrix <code dir="ltr">A</code>, optionally computing the left and/or right singular vectors. The SVD is written <code dir="ltr">A = U * SIGMA * transpose(V)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t6" headers="r1c1-t6">
<p><a href="#CIAIJDGB">LAPACK_SBEV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r7c1-t6 r1c2-t6">
<p>Computes all the eigenvalues and, optionally, eigenvectors of a real symmetric band matrix <code dir="ltr">A</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t6" headers="r1c1-t6">
<p><a href="#CIAHJDIJ">LAPACK_SBEVD Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r8c1-t6 r1c2-t6">
<p>Ccomputes all the eigenvalues and, optionally, eigenvectors of a real symmetric matrix <code dir="ltr">A</code>. If eigenvectors are desired, it uses a divide and conquer algorithm that makes mild assumptions about floating point arithmetic.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t6" headers="r1c1-t6">
<p><a href="#CIADGJII">LAPACK_SPEV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r9c1-t6 r1c2-t6">
<p>Computes all the eigenvalues and, optionally, eigenvectors of a real symmetric matrix <code dir="ltr">A</code> in packed storage</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t6" headers="r1c1-t6">
<p><a href="#CIABDIAF">LAPACK_SPEVD Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r10c1-t6 r1c2-t6">
<p>Computes all the eigenvalues and, optionally, eigenvectors of a real symmetric matrix <code dir="ltr">A</code> in packed storage. If eigenvectors are desired, it uses a divide and conquer algorithm that makes mild assumptions about floating point arithmetic.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t6" headers="r1c1-t6">
<p><a href="#CIAGEJCI">LAPACK_STEV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r11c1-t6 r1c2-t6">
<p>Computes all eigenvalues and, optionally, eigenvectors of a real symmetric tridiagonal matrix <code dir="ltr">A</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t6" headers="r1c1-t6">
<p><a href="#CIAHFFCC">LAPACK_STEVD Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r12c1-t6 r1c2-t6">
<p>Computes all eigenvalues and, optionally, eigenvectors of a real symmetric tridiagonal matrix <code dir="ltr">A</code>. If eigenvectors are desired, it uses a divide and conquer algorithm that makes mild assumptions about floating point arithmetic.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t6" headers="r1c1-t6">
<p><a href="#CIAIDIGJ">LAPACK_SYEV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r13c1-t6 r1c2-t6">
<p>Computes all eigenvalues and, optionally, eigenvectors of a real symmetric matrix <code dir="ltr">A</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t6" headers="r1c1-t6">
<p><a href="#CIAGBGGH">LAPACK_SYEVD Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r14c1-t6 r1c2-t6">
<p>Computes all the eigenvalues and, optionally, eigenvectors of a real symmetric matrix <code dir="ltr">A</code>. If eigenvectors are desired, it uses a divide and conquer algorithm that makes mild assumptions about floating point arithmetic.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CIAFDJJA"></a>
<div id="ARPLS71240" class="refsect1">
<h2 class="refsect1">Summary of UTL_NLA Subprograms</h2>
<div id="ARPLS71241" class="tblformal">
<p class="titleintable"><a id="sthref19073"></a><a id="sthref19074"></a>Table 259-6 UTL_NLA Package Subprograms</p>
<table class="cellalignment4330" title="UTL_NLA Package Subprograms" summary="This table lists the UTL_MAIL subprograms in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t7">Subprogram</th>
<th class="cellalignment4328" id="r1c2-t7">Description</th>
<th class="cellalignment4328" id="r1c3-t7">Group</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t7" headers="r1c1-t7">
<p><a href="#CIAJHJHD">BLAS_ASUM Functions</a></p>
</td>
<td class="cellalignment4329" headers="r2c1-t7 r1c2-t7">
<p>Computes the sum of the absolute values of the vector components</p>
</td>
<td class="cellalignment4329" headers="r2c1-t7 r1c3-t7">
<p><a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t7" headers="r1c1-t7">
<p><a href="#CIAJDJEJ">BLAS_AXPY Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r3c1-t7 r1c2-t7">
<p>Copies <code dir="ltr">alpha</code>*<code dir="ltr">X</code> + <code dir="ltr">Y</code> into vector <code dir="ltr">Y</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t7 r1c3-t7">
<p><a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t7" headers="r1c1-t7">
<p><a href="#CIAIGABI">BLAS_COPY Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r4c1-t7 r1c2-t7">
<p>Copies the contents of vector <code dir="ltr">X</code> to vector <code dir="ltr">Y</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t7 r1c3-t7">
<p><a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t7" headers="r1c1-t7">
<p><a href="#CIAICFIG">BLAS_DOT Functions</a></p>
</td>
<td class="cellalignment4329" headers="r5c1-t7 r1c2-t7">
<p>Returns the dot (scalar) product of two vectors <code dir="ltr">X</code> and <code dir="ltr">Y</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t7 r1c3-t7">
<p><a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t7" headers="r1c1-t7">
<p><a href="#CIADGCFJ">BLAS_GBMV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r6c1-t7 r1c2-t7">
<p>Performs the matrix-vector operation <code dir="ltr">y := alpha*A*x + beta*y</code> or <code dir="ltr">y := alpha*A&#39;*x + beta*y</code> where <code dir="ltr">alpha</code> and <code dir="ltr">beta</code> are scalars, <code dir="ltr">x</code> and <code dir="ltr">y</code> are vectors and <code dir="ltr">A</code> is an <code dir="ltr">m</code> by <code dir="ltr">n</code> band matrix, with <code dir="ltr">kl</code> sub-diagonals and <code dir="ltr">ku</code> super-diagonals</p>
</td>
<td class="cellalignment4329" headers="r6c1-t7 r1c3-t7">
<p><a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t7" headers="r1c1-t7">
<p><a href="#CIACCFIJ">BLAS_GEMM Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r7c1-t7 r1c2-t7">
<p>Performs one of the matrix-vector operations where <code dir="ltr">alpha</code> and <code dir="ltr">beta</code> are scalars, and <code dir="ltr">A</code>, <code dir="ltr">B</code> and <code dir="ltr">C</code> are matrices, with <code dir="ltr">op(A)</code> an <code dir="ltr">m</code> by <code dir="ltr">k</code> matrix, <code dir="ltr">op(B)</code> a <code dir="ltr">k</code> by <code dir="ltr">n</code> matrix and <code dir="ltr">C</code> an <code dir="ltr">m</code> by <code dir="ltr">n</code> matrix</p>
</td>
<td class="cellalignment4329" headers="r7c1-t7 r1c3-t7">
<p><a href="#CIAIJHCF">BLAS Level 3 (Matrix-Matrix Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t7" headers="r1c1-t7">
<p><a href="#CIAFEAFG">BLAS_GEMV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r8c1-t7 r1c2-t7">
<p>Performs the matrix-vector operations <code dir="ltr">y := alpha*A*x + beta*y</code> or <code dir="ltr">y := alpha*A&#39;*x + beta*y</code> where <code dir="ltr">alpha</code> and <code dir="ltr">beta</code> are scalars, <code dir="ltr">x</code> and <code dir="ltr">y</code> are vectors and <code dir="ltr">A</code> is an <code dir="ltr">m</code> by <code dir="ltr">n</code> matrix</p>
</td>
<td class="cellalignment4329" headers="r8c1-t7 r1c3-t7">
<p><a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t7" headers="r1c1-t7">
<p><a href="#CIAEIJCI">BLAS_GER Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r9c1-t7 r1c2-t7">
<p>Performs a rank 1 operation <code dir="ltr">A := alpha*x*y&#39; + A</code> where <code dir="ltr">alpha</code> is a scalar, <code dir="ltr">x</code> is an <code dir="ltr">m</code> element vector, <code dir="ltr">y</code> is an n element vector and <code dir="ltr">A</code> is an <code dir="ltr">m</code> by <code dir="ltr">n</code> matrix</p>
</td>
<td class="cellalignment4329" headers="r9c1-t7 r1c3-t7">
<p><a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t7" headers="r1c1-t7">
<p><a href="#CIAIGEAJ">BLAS_IAMAX Functions</a></p>
</td>
<td class="cellalignment4329" headers="r10c1-t7 r1c2-t7">
<p>Computes the index of the first element of a vector that has the largest absolute value</p>
</td>
<td class="cellalignment4329" headers="r10c1-t7 r1c3-t7">
<p><a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t7" headers="r1c1-t7">
<p><a href="#CIAJEIAC">BLAS_NRM2 Functions</a></p>
</td>
<td class="cellalignment4329" headers="r11c1-t7 r1c2-t7">
<p>Computes the vector 2-norm (Euclidean norm)</p>
</td>
<td class="cellalignment4329" headers="r11c1-t7 r1c3-t7">
<p><a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t7" headers="r1c1-t7">
<p><a href="#CIAGCADG">BLAS_ROT Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r12c1-t7 r1c2-t7">
<p>Returns the plane rotation of points</p>
</td>
<td class="cellalignment4329" headers="r12c1-t7 r1c3-t7">
<p><a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t7" headers="r1c1-t7">
<p><a href="#CIAFGGDH">BLAS_ROTG Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r13c1-t7 r1c2-t7">
<p>Returns the Givens rotation of points</p>
</td>
<td class="cellalignment4329" headers="r13c1-t7 r1c3-t7">
<p><a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t7" headers="r1c1-t7">
<p><a href="#CIABHIIE">BLAS_SBMV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r14c1-t7 r1c2-t7">
<p>Performs a matrix-vector operation <code dir="ltr">y := alpha*A*x + beta*y</code> where <code dir="ltr">alpha</code> and <code dir="ltr">beta</code> are scalars, <code dir="ltr">x</code> and <code dir="ltr">y</code> are n element vectors and <code dir="ltr">A</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> symmetric band matrix, with <code dir="ltr">k</code> super-diagonals</p>
</td>
<td class="cellalignment4329" headers="r14c1-t7 r1c3-t7">
<p><a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r15c1-t7" headers="r1c1-t7">
<p><a href="#CIAIBBHJ">BLAS_SCAL Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r15c1-t7 r1c2-t7">
<p>Scales a vector by a constant</p>
</td>
<td class="cellalignment4329" headers="r15c1-t7 r1c3-t7">
<p><a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r16c1-t7" headers="r1c1-t7">
<p><a href="#CIAGFAGC">BLAS_SPMV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r16c1-t7 r1c2-t7">
<p>Performs a matrix-vector operation <code dir="ltr">y := alpha*A*x + beta*y</code> where <code dir="ltr">alpha</code> and <code dir="ltr">beta</code> are scalars, <code dir="ltr">x</code> and <code dir="ltr">y</code> are <code dir="ltr">n</code> element vectors and <code dir="ltr">A</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> symmetric matrix, supplied in packed form</p>
</td>
<td class="cellalignment4329" headers="r16c1-t7 r1c3-t7">
<p><a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r17c1-t7" headers="r1c1-t7">
<p><a href="#CIAIECGG">BLAS_SPR Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r17c1-t7 r1c2-t7">
<p>Performs a symmetric rank 1 operation <code dir="ltr">A := alpha*x*x&#39; + A</code> where <code dir="ltr">alpha</code> is a real scalar, <code dir="ltr">x</code> is an <code dir="ltr">n</code> element vector, and <code dir="ltr">A</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> symmetric matrix, supplied in packed form</p>
</td>
<td class="cellalignment4329" headers="r17c1-t7 r1c3-t7">
<p><a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r18c1-t7" headers="r1c1-t7">
<p><a href="#CIACHFGD">BLAS_SPR2 Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r18c1-t7 r1c2-t7">
<p>Performs a symmetric rank 2 operation where <code dir="ltr">alpha</code> is a scalar, <code dir="ltr">x</code> and <code dir="ltr">y</code> are <code dir="ltr">n</code> element vectors, and <code dir="ltr">A</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> symmetric matrix, supplied in packed form</p>
</td>
<td class="cellalignment4329" headers="r18c1-t7 r1c3-t7">
<p><a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r19c1-t7" headers="r1c1-t7">
<p><a href="#CIADBHFG">BLAS_SWAP Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r19c1-t7 r1c2-t7">
<p>Swaps the contents of two vectors each of size n</p>
</td>
<td class="cellalignment4329" headers="r19c1-t7 r1c3-t7">
<p><a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r20c1-t7" headers="r1c1-t7">
<p><a href="#CIAHABIJ">BLAS_SYMM Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r20c1-t7 r1c2-t7">
<p>Performs one of the matrix-vector operations where <code dir="ltr">alpha</code> and <code dir="ltr">beta</code> are scalars, <code dir="ltr">A</code> is a symmetric matrix, and <code dir="ltr">B</code> and <code dir="ltr">C</code> are <code dir="ltr">m</code> by <code dir="ltr">n</code> matrices</p>
</td>
<td class="cellalignment4329" headers="r20c1-t7 r1c3-t7">
<p><a href="#CIAIJHCF">BLAS Level 3 (Matrix-Matrix Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r21c1-t7" headers="r1c1-t7">
<p><a href="#CIAEAJDG">BLAS_SYMV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r21c1-t7 r1c2-t7">
<p>Performs a matrix-vector operation where <code dir="ltr">alpha</code> and <code dir="ltr">beta</code> are scalars, <code dir="ltr">x</code> and <code dir="ltr">y</code> are <code dir="ltr">n</code> element vectors and <code dir="ltr">A</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> symmetric matrix</p>
</td>
<td class="cellalignment4329" headers="r21c1-t7 r1c3-t7">
<p><a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r22c1-t7" headers="r1c1-t7">
<p><a href="#CIAFBJAJ">BLAS_SYR Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r22c1-t7 r1c2-t7">
<p>Performs a symmetric rank 1 operation where <code dir="ltr">alpha</code> is a real scalar, <code dir="ltr">x</code> is an <code dir="ltr">n</code> element vector, and <code dir="ltr">A</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> symmetric matrix</p>
</td>
<td class="cellalignment4329" headers="r22c1-t7 r1c3-t7">
<p><a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r23c1-t7" headers="r1c1-t7">
<p><a href="#CIAHBHJB">BLAS_SYR2 Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r23c1-t7 r1c2-t7">
<p>Performs a symmetric rank 2 operation where <code dir="ltr">alpha</code> is a scalar, <code dir="ltr">x</code> and <code dir="ltr">y</code> are <code dir="ltr">n</code> element vectors, and <code dir="ltr">A</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> symmetric matrix</p>
</td>
<td class="cellalignment4329" headers="r23c1-t7 r1c3-t7">
<p><a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r24c1-t7" headers="r1c1-t7">
<p><a href="#CIAJFDDD">BLAS_SYR2K Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r24c1-t7 r1c2-t7">
<p>Performs one of the symmetric rank2 k operations where <code dir="ltr">alpha</code> and <code dir="ltr">beta</code> are scalars, <code dir="ltr">C</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> symmetric matrix and <code dir="ltr">A</code> and <code dir="ltr">B</code> are <code dir="ltr">n</code> by <code dir="ltr">k</code> matrices in the first case and <code dir="ltr">k</code> by <code dir="ltr">n</code> matrices in the second case</p>
</td>
<td class="cellalignment4329" headers="r24c1-t7 r1c3-t7">
<p><a href="#CIAIJHCF">BLAS Level 3 (Matrix-Matrix Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r25c1-t7" headers="r1c1-t7">
<p><a href="#CIABCBAG">BLAS_SYRK Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r25c1-t7 r1c2-t7">
<p>Performs one of the symmetric rank <code dir="ltr">k</code> operations where <code dir="ltr">alpha</code> and <code dir="ltr">beta</code> are scalars, <code dir="ltr">C</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> symmetric matrix and <code dir="ltr">A</code> is an <code dir="ltr">n</code> by <code dir="ltr">k</code> matrix in the first case and a <code dir="ltr">k</code> by <code dir="ltr">n</code> matrix in the second case</p>
</td>
<td class="cellalignment4329" headers="r25c1-t7 r1c3-t7">
<p><a href="#CIAIJHCF">BLAS Level 3 (Matrix-Matrix Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r26c1-t7" headers="r1c1-t7">
<p><a href="#CIAFEEGF">BLAS_TBMV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r26c1-t7 r1c2-t7">
<p>Performs a matrix-vector operation where <code dir="ltr">x</code> is an <code dir="ltr">n</code> element vector and <code dir="ltr">A</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> unit, or non-unit, upper or lower triangular band matrix, with <code dir="ltr">(k + 1)</code> diagonals</p>
</td>
<td class="cellalignment4329" headers="r26c1-t7 r1c3-t7">
<p><a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r27c1-t7" headers="r1c1-t7">
<p><a href="#CIACICEE">BLAS_TBSV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r27c1-t7 r1c2-t7">
<p>Solves one of the systems of equation where <code dir="ltr">b</code> and <code dir="ltr">x</code> are <code dir="ltr">n</code> element vectors and <code dir="ltr">A</code> is an <code dir="ltr">n</code> by n unit, or non-unit, upper or lower triangular band matrix, with <code dir="ltr">(k + 1)</code> diagonals</p>
</td>
<td class="cellalignment4329" headers="r27c1-t7 r1c3-t7">
<p><a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r28c1-t7" headers="r1c1-t7">
<p><a href="#CIAIFFDD">BLAS_TPMV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r28c1-t7 r1c2-t7">
<p>Performs a matrix-vector operation where <code dir="ltr">x</code> is an <code dir="ltr">n</code> element vector and <code dir="ltr">A</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> unit, or non-unit, upper or lower triangular matrix, supplied in packed form</p>
</td>
<td class="cellalignment4329" headers="r28c1-t7 r1c3-t7">
<p><a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r29c1-t7" headers="r1c1-t7">
<p><a href="#CIACJJHC">BLAS_TPSV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r29c1-t7 r1c2-t7">
<p>Solves one of the systems of equation where <code dir="ltr">b</code> and <code dir="ltr">x</code> are <code dir="ltr">n</code> element vectors and <code dir="ltr">A</code> is an <code dir="ltr">n</code> by n unit, or non-unit, upper or lower triangular matrix, supplied in packed form</p>
</td>
<td class="cellalignment4329" headers="r29c1-t7 r1c3-t7">
<p><a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r30c1-t7" headers="r1c1-t7">
<p><a href="#CIAEJGDI">BLAS_TRMM Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r30c1-t7 r1c2-t7">
<p>Performs one of the matrix-vector operations where<code dir="ltr">alpha</code> is a scalar, <code dir="ltr">B</code> is an <code dir="ltr">m</code> by <code dir="ltr">n</code> matrix, <code dir="ltr">A</code> is a unit, or non-unit, upper or lower triangular matrix and <code dir="ltr">op(A)</code> is one of two alternatives</p>
</td>
<td class="cellalignment4329" headers="r30c1-t7 r1c3-t7">
<p><a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r31c1-t7" headers="r1c1-t7">
<p><a href="#CIAHFEBJ">BLAS_TRMV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r31c1-t7 r1c2-t7">
<p>Performs a matrix-vector operation where <code dir="ltr">x</code> is an <code dir="ltr">n</code> element vector and <code dir="ltr">A</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> unit, or non-unit, upper or lower triangular matrix</p>
</td>
<td class="cellalignment4329" headers="r31c1-t7 r1c3-t7">
<p><a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r32c1-t7" headers="r1c1-t7">
<p><a href="#CIAHHHFD">BLAS_TRSM Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r32c1-t7 r1c2-t7">
<p>Performs one of the matrix-vector operations <code dir="ltr">op( A )*X = alpha*B</code> or <code dir="ltr">X*op(A) = alpha*B</code> where <code dir="ltr">alpha</code> is a scalar, <code dir="ltr">X</code> and <code dir="ltr">B</code> are <code dir="ltr">m</code> by <code dir="ltr">n</code> matrices, <code dir="ltr">A</code> is a unit, or non-unit, upper or lower triangular matrix, <code dir="ltr">op(A)</code> is one of two alternatives. The matrix <code dir="ltr">X</code> is overwritten on <code dir="ltr">B</code></p>
</td>
<td class="cellalignment4329" headers="r32c1-t7 r1c3-t7">
<p><a href="#CIAIJHCF">BLAS Level 3 (Matrix-Matrix Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r33c1-t7" headers="r1c1-t7">
<p><a href="#CIABJIEI">BLAS_TRSV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r33c1-t7 r1c2-t7">
<p>Solves one of the systems of equation where <code dir="ltr">b</code> and <code dir="ltr">x</code> are <code dir="ltr">n</code> element vectors and <code dir="ltr">A</code> is an n by <code dir="ltr">n</code> unit, or non-unit, upper or lower triangular matrix</p>
</td>
<td class="cellalignment4329" headers="r33c1-t7 r1c3-t7">
<p><a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r34c1-t7" headers="r1c1-t7">
<p><a href="#CIABIIEB">LAPACK_GBSV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r34c1-t7 r1c2-t7">
<p>This procedure computes the solution to a real system of linear equations <code dir="ltr">a * x = b</code> where <code dir="ltr">a</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> matrix and <code dir="ltr">x</code> and <code dir="ltr">b</code> are <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> matrices. The <code dir="ltr">LU</code> decomposition with partial pivoting and row interchanges is used to factor <code dir="ltr">A</code>.</p>
</td>
<td class="cellalignment4329" headers="r34c1-t7 r1c3-t7">
<p><a href="#CIAFBCIJ">LAPACK Driver Routines (Linear Equations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r35c1-t7" headers="r1c1-t7">
<p><a href="#CIADGHHA">LAPACK_GEES Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r35c1-t7 r1c2-t7">
<p>Computes for an <code dir="ltr">n</code> by <code dir="ltr">n</code> real nonsymmetric matrix <code dir="ltr">A</code>, the eigenvalues, the real Schur form <code dir="ltr">T</code>, and, optionally, the matrix of Schur vectors <code dir="ltr">Z</code>. This gives the Schur factorization <code dir="ltr">A = Z*T*(Z**T)</code>.</p>
</td>
<td class="cellalignment4329" headers="r35c1-t7 r1c3-t7">
<p><a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r36c1-t7" headers="r1c1-t7">
<p><a href="#CIADEDBA">LAPACK_GEEV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r36c1-t7 r1c2-t7">
<p>Computes for an <code dir="ltr">n</code> by <code dir="ltr">n</code> real nonsymmetric matrix <code dir="ltr">A</code>, the eigenvalues and, optionally, the left and/or right eigenvectors.</p>
</td>
<td class="cellalignment4329" headers="r36c1-t7 r1c3-t7">
<p><a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r37c1-t7" headers="r1c1-t7">
<p><a href="#CIADBIAE">LAPACK_GELS Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r37c1-t7 r1c2-t7">
<p>Solves overdetermined or underdetermined real linear systems involving an <code dir="ltr">m</code> by <code dir="ltr">n</code> matrix <code dir="ltr">A</code>, or its transpose, using a <code dir="ltr">QR</code> or <code dir="ltr">LQ</code> factorization of <code dir="ltr">A</code>. It is assumed that <code dir="ltr">A</code> has full rank.</p>
</td>
<td class="cellalignment4329" headers="r37c1-t7 r1c3-t7">
<p><a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r38c1-t7" headers="r1c1-t7">
<p><a href="#CIAJBIGH">LAPACK_GESDD Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r38c1-t7 r1c2-t7">
<p>Computes the singular value decomposition (SVD) of a real <code dir="ltr">m</code> by <code dir="ltr">n</code> matrix <code dir="ltr">A</code>, optionally computing the left and right singular vectors. If singular vectors are desired, it uses a divide-and-conquer algorithm that makes mild assumptions about floating point arithmetic.</p>
</td>
<td class="cellalignment4329" headers="r38c1-t7 r1c3-t7">
<p><a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r39c1-t7" headers="r1c1-t7">
<p><a href="#CIAFDDCG">LAPACK_GESV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r39c1-t7 r1c2-t7">
<p>This procedure computes the solution to a real system of linear equations <code dir="ltr">a * x = b</code> where <code dir="ltr">a</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> matrix and <code dir="ltr">x</code> and <code dir="ltr">b</code> are <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> matrices. The <code dir="ltr">LU</code> decomposition with partial pivoting and row interchanges is used to factor <code dir="ltr">A</code>.</p>
</td>
<td class="cellalignment4329" headers="r39c1-t7 r1c3-t7">
<p><a href="#CIAFBCIJ">LAPACK Driver Routines (Linear Equations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r40c1-t7" headers="r1c1-t7">
<p><a href="#CIAFBFFI">LAPACK_GESVD Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r40c1-t7 r1c2-t7">
<p>Computes the singular value decomposition (SVD) of a real <code dir="ltr">m</code> by <code dir="ltr">n</code> matrix <code dir="ltr">A</code>, optionally computing the left and/or right singular vectors. The SVD is written <code dir="ltr">A = U * SIGMA * transpose(V)</code>.</p>
</td>
<td class="cellalignment4329" headers="r40c1-t7 r1c3-t7">
<p><a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r41c1-t7" headers="r1c1-t7">
<p><a href="#CIAFDEJI">LAPACK_GTSV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r41c1-t7 r1c2-t7">
<p>This procedure solves the equation <code dir="ltr">a * x = b</code> where <code dir="ltr">a</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> tridiagonal matrix, by Gaussian elimination with partial pivoting.</p>
</td>
<td class="cellalignment4329" headers="r41c1-t7 r1c3-t7">
<p><a href="#CIAFBCIJ">LAPACK Driver Routines (Linear Equations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r42c1-t7" headers="r1c1-t7">
<p><a href="#CIAJHJBC">LAPACK_PBSV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r42c1-t7 r1c2-t7">
<p>This procedure computes the solution to a real system of linear equations <code dir="ltr">a * x = b</code> where <code dir="ltr">a</code> is an n by n symmetric positive definite band matrix and <code dir="ltr">x</code> and <code dir="ltr">b</code> are <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> matrices. The Cholesky decomposition is used to factor <code dir="ltr">A</code>.</p>
</td>
<td class="cellalignment4329" headers="r42c1-t7 r1c3-t7">
<p><a href="#CIAFBCIJ">LAPACK Driver Routines (Linear Equations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r43c1-t7" headers="r1c1-t7">
<p><a href="#CIAGDCGG">LAPACK_POSV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r43c1-t7 r1c2-t7">
<p>This procedure computes the solution to a real system of linear equations <code dir="ltr">a * x = b</code> where <code dir="ltr">a</code> is an n by n symmetric positive definite matrix and <code dir="ltr">x</code> and <code dir="ltr">b</code> are <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> matrices. The Cholesky decomposition is used to factor <code dir="ltr">A</code>.</p>
</td>
<td class="cellalignment4329" headers="r43c1-t7 r1c3-t7">
<p><a href="#CIAFBCIJ">LAPACK Driver Routines (Linear Equations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r44c1-t7" headers="r1c1-t7">
<p><a href="#CIAGICJH">LAPACK_PPSV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r44c1-t7 r1c2-t7">
<p>This procedure computes the solution to a real system of linear equations <code dir="ltr">a * x = b</code> where <code dir="ltr">a</code> is an n by n symmetric positive definite matrix stored in packed format and <code dir="ltr">x</code> and <code dir="ltr">b</code> are <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> matrices. The Cholesky decomposition is used to factor <code dir="ltr">A</code>.</p>
</td>
<td class="cellalignment4329" headers="r44c1-t7 r1c3-t7">
<p><a href="#CIAFBCIJ">LAPACK Driver Routines (Linear Equations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r45c1-t7" headers="r1c1-t7">
<p><a href="#CIAEJBEG">LAPACK_PTSV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r45c1-t7 r1c2-t7">
<p>This procedure computes the solution to a real system of linear equations <code dir="ltr">a * x = b</code> where <code dir="ltr">a</code> is an n by n symmetric positive definite tridiagonal matrix, and <code dir="ltr">x</code> and <code dir="ltr">b</code> are <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> matrices.</p>
</td>
<td class="cellalignment4329" headers="r45c1-t7 r1c3-t7">
<p><a href="#CIAFBCIJ">LAPACK Driver Routines (Linear Equations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r46c1-t7" headers="r1c1-t7">
<p><a href="#CIAIJDGB">LAPACK_SBEV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r46c1-t7 r1c2-t7">
<p>Computes all the eigenvalues and, optionally, eigenvectors of a real symmetric band matrix <code dir="ltr">A</code></p>
</td>
<td class="cellalignment4329" headers="r46c1-t7 r1c3-t7">
<p><a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r47c1-t7" headers="r1c1-t7">
<p><a href="#CIAHJDIJ">LAPACK_SBEVD Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r47c1-t7 r1c2-t7">
<p>Ccomputes all the eigenvalues and, optionally, eigenvectors of a real symmetric matrix <code dir="ltr">A</code>. If eigenvectors are desired, it uses a divide and conquer algorithm that makes mild assumptions about floating point arithmetic.</p>
</td>
<td class="cellalignment4329" headers="r47c1-t7 r1c3-t7">
<p><a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r48c1-t7" headers="r1c1-t7">
<p><a href="#CIADGJII">LAPACK_SPEV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r48c1-t7 r1c2-t7">
<p>Computes all the eigenvalues and, optionally, eigenvectors of a real symmetric matrix <code dir="ltr">A</code> in packed storage</p>
</td>
<td class="cellalignment4329" headers="r48c1-t7 r1c3-t7">
<p><a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r49c1-t7" headers="r1c1-t7">
<p><a href="#CIABDIAF">LAPACK_SPEVD Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r49c1-t7 r1c2-t7">
<p>Computes all the eigenvalues and, optionally, eigenvectors of a real symmetric matrix <code dir="ltr">A</code> in packed storage. If eigenvectors are desired, it uses a divide and conquer algorithm that makes mild assumptions about floating point arithmetic.</p>
</td>
<td class="cellalignment4329" headers="r49c1-t7 r1c3-t7">
<p><a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r50c1-t7" headers="r1c1-t7">
<p><a href="#CIAEDCDH">LAPACK_SPSV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r50c1-t7 r1c2-t7">
<p>This procedure computes the solution to a real system of linear equations <code dir="ltr">a * x = b</code> where <code dir="ltr">a</code> is an n by n symmetric matrix stored in packed format, and <code dir="ltr">x</code> and <code dir="ltr">b</code> are <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> matrices. The diagonal pivoting method is used to factor <code dir="ltr">A</code>.</p>
</td>
<td class="cellalignment4329" headers="r50c1-t7 r1c3-t7">
<p><a href="#CIAFBCIJ">LAPACK Driver Routines (Linear Equations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r51c1-t7" headers="r1c1-t7">
<p><a href="#CIAGEJCI">LAPACK_STEV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r51c1-t7 r1c2-t7">
<p>Computes all eigenvalues and, optionally, eigenvectors of a real symmetric tridiagonal matrix <code dir="ltr">A</code></p>
</td>
<td class="cellalignment4329" headers="r51c1-t7 r1c3-t7">
<p><a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r52c1-t7" headers="r1c1-t7">
<p><a href="#CIAHFFCC">LAPACK_STEVD Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r52c1-t7 r1c2-t7">
<p>Computes all eigenvalues and, optionally, eigenvectors of a real symmetric tridiagonal matrix <code dir="ltr">A</code>. If eigenvectors are desired, it uses a divide and conquer algorithm that makes mild assumptions about floating point arithmetic.</p>
</td>
<td class="cellalignment4329" headers="r52c1-t7 r1c3-t7">
<p><a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r53c1-t7" headers="r1c1-t7">
<p><a href="#CIAGBGGH">LAPACK_SYEVD Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r53c1-t7 r1c2-t7">
<p>Computes all the eigenvalues and, optionally, eigenvectors of a real symmetric matrix <code dir="ltr">A</code>. If eigenvectors are desired, it uses a divide and conquer algorithm that makes mild assumptions about floating point arithmetic.</p>
</td>
<td class="cellalignment4329" headers="r53c1-t7 r1c3-t7">
<p><a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r54c1-t7" headers="r1c1-t7">
<p><a href="#CIADGGFJ">LAPACK_SYSV Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r54c1-t7 r1c2-t7">
<p>This procedure computes the solution to a real system of linear equations <code dir="ltr">a * x = b</code> where <code dir="ltr">a</code> is an n by n symmetric matrix, and <code dir="ltr">x</code> and <code dir="ltr">b</code> are <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> matrices. The diagonal pivoting method is used to factor <code dir="ltr">A</code>.</p>
</td>
<td class="cellalignment4329" headers="r54c1-t7 r1c3-t7">
<p><a href="#CIAFBCIJ">LAPACK Driver Routines (Linear Equations) Subprograms</a></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="ARPLS71242" class="refsect2"><a id="CIAJHJHD"></a>
<h3 class="refsect2"><a id="sthref19075"></a>BLAS_ASUM Functions</h3>
<p>This procedure computes the sum of the absolute values of the vector components.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19076"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.BLAS_ASUM (
   n      IN       POSITIVEN,
   x      IN       UTL_NLA_ARRAY_DBL,
   incx   IN       POSITIVEN)
 RETURN BINARY_DOUBLE;
</pre>
<pre dir="ltr">UTL_NLA.BLAS_ASUM (
   n      IN       POSITIVEN,
   alpha  IN       SCALAR_DOUBLE,
   x      IN       UTL_NLA_ARRAY_FLT)
 RETURN BINARY_FLOAT
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19077"></a>Parameters</p>
<div id="ARPLS71243" class="tblformal">
<p class="titleintable"><a id="sthref19078"></a><a id="sthref19079"></a>Table 259-7 BLAS_ASUM Function Parameters</p>
<table class="cellalignment4330" title="BLAS_ASUM Function Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t9">Parameter</th>
<th class="cellalignment4328" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t9" headers="r1c1-t9">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t9 r1c2-t9">
<p>Specifies the number of elements of the vectors <code dir="ltr">x</code> and <code dir="ltr">y</code>. <code dir="ltr">n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t9" headers="r1c1-t9">
<p><code dir="ltr">x</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t9 r1c2-t9">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of dimension at least</p>
<pre dir="ltr">( 1 + ( n - 1 )*abs( incx ) )
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t9" headers="r1c1-t9">
<p><code dir="ltr">incx</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t9 r1c2-t9">
<p>Specifies the increment for the elements of <code dir="ltr">x</code>. <code dir="ltr">incx</code> must not be zero.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71244" class="refsect2"><a id="CIAJDJEJ"></a>
<h3 class="refsect2"><a id="sthref19080"></a>BLAS_AXPY Procedures</h3>
<p>This procedure copies <code dir="ltr">alpha</code>*<code dir="ltr">X</code> + <code dir="ltr">Y</code> into vector <code dir="ltr">Y</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19081"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.BLAS_AXPY (
   n      IN       POSITIVEN,
   alpha  IN       SCALAR_DOUBLE,
   x      IN       UTL_NLA_ARRAY_DBL,
   incx   IN       POSITIVEN,
   y      IN OUT   UTL_NLA_ARRAY_DBL,
   incy   IN       POSITIVEN);
</pre>
<pre dir="ltr">UTL_NLA.BLAS_AXPY (
   n      IN       POSITIVEN,
   alpha  IN       SCALAR_DOUBLE,
   x      IN       UTL_NLA_ARRAY_FLT,
   incx   IN       POSITIVEN,
   y      IN OUT   UTL_NLA_ARRAY_FLT,
   incy   IN       POSITIVEN);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19082"></a>Parameters</p>
<div id="ARPLS71245" class="tblformal">
<p class="titleintable"><a id="sthref19083"></a><a id="sthref19084"></a>Table 259-8 BLAS_AXPY Procedure Parameters</p>
<table class="cellalignment4330" title="BLAS_AXPY Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t11">Parameter</th>
<th class="cellalignment4328" id="r1c2-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t11" headers="r1c1-t11">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t11 r1c2-t11">
<p>Specifies the number of elements of the vectors <code dir="ltr">x</code> and <code dir="ltr">y</code>. <code dir="ltr">n</code> must be at least zero. &nbsp;</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t11" headers="r1c1-t11">
<p><code dir="ltr">alpha</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t11 r1c2-t11">
<p>Specifies the scalar alpha.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t11" headers="r1c1-t11">
<p><code dir="ltr">x</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t11 r1c2-t11">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of <code dir="ltr">dimension</code> at least</p>
<pre dir="ltr">( 1 + ( n - 1 )*abs( incx ) )
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t11" headers="r1c1-t11">
<p><code dir="ltr">incx</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t11 r1c2-t11">
<p>Specifies the increment for the elements of <code dir="ltr">x</code>. <code dir="ltr">incx</code> must not be zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t11" headers="r1c1-t11">
<p><code dir="ltr">y</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t11 r1c2-t11">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of <code dir="ltr">DIMENSION</code> at least</p>
<pre dir="ltr">( 1 + ( n - 1 )*abs( incy) )
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t11" headers="r1c1-t11">
<p><code dir="ltr">incy</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t11 r1c2-t11">
<p>Specifies the increment for the elements of <code dir="ltr">y</code>. <code dir="ltr">incy</code> must not be zero.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71246" class="refsect2"><a id="CIAIGABI"></a>
<h3 class="refsect2"><a id="sthref19085"></a>BLAS_COPY Procedures</h3>
<p>This procedure copies the contents of vector <code dir="ltr">X</code> to vector <code dir="ltr">Y</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19086"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.BLAS_COPY (
   n     IN     POSITIVEN,
   x     IN     UTL_NLA_ARRAY_DBL,
   incx  IN     POSITIVEN,
   y     IN OUT UTL_NLA_ARRAY_DBL,
   incy  IN     POSITIVEN);
</pre>
<pre dir="ltr">UTL_NLA.BLAS_COPY (
   n     IN     POSITIVEN,
   x     IN     UTL_NLA_ARRAY_FLT,
   incx  IN     POSITIVEN,
   y     IN OUT UTL_NLA_ARRAY_FLT,
   incy  IN     POSITIVEN);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19087"></a>Parameters</p>
<div id="ARPLS71247" class="tblformal">
<p class="titleintable"><a id="sthref19088"></a><a id="sthref19089"></a>Table 259-9 BLAS_COPY Procedure Parameters</p>
<table class="cellalignment4330" title="BLAS_COPY Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t13">Parameter</th>
<th class="cellalignment4328" id="r1c2-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t13" headers="r1c1-t13">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t13 r1c2-t13">
<p>Specifies the number of elements of the vectors <code dir="ltr">x</code> and <code dir="ltr">y</code>. <code dir="ltr">n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t13" headers="r1c1-t13">
<p><code dir="ltr">x</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t13 r1c2-t13">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of <code dir="ltr">dimension</code> at least</p>
<pre dir="ltr">( 1 + ( n - 1 )*abs( incx ) )
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t13" headers="r1c1-t13">
<p><code dir="ltr">incx</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t13 r1c2-t13">
<p>Specifies the increment for the elements of <code dir="ltr">x</code>. <code dir="ltr">incx</code> must not be zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t13" headers="r1c1-t13">
<p><code dir="ltr">y</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t13 r1c2-t13">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of dimension at least</p>
<pre dir="ltr">( 1 + ( n - 1 )*abs( incy) )
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t13" headers="r1c1-t13">
<p><code dir="ltr">incy</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t13 r1c2-t13">
<p>Specifies the increment for the elements of <code dir="ltr">y</code>. <code dir="ltr">incy</code> must not be zero.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71248" class="refsect2"><a id="CIAICFIG"></a>
<h3 class="refsect2"><a id="sthref19090"></a>BLAS_DOT Functions</h3>
<p>This function returns the dot (scalar) product of two vectors <code dir="ltr">X</code> and <code dir="ltr">Y</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19091"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.BLAS_DOT (
   n     IN   POSITIVEN,
   x     IN   UTL_NLA_ARRAY_DBL,
   incx  IN   POSITIVEN,
   y     IN   UTL_NLA_ARRAY_DBL,
   incy  IN   POSITIVEN) 
  RETURN BINARY_DOUBLE;
</pre>
<pre dir="ltr">UTL_NLA.BLAS_DOT (
   n     IN   POSITIVEN,
   x     IN   UTL_NLA_ARRAY_FLT,
   incx  IN   POSITIVEN,
   y     IN   UTL_NLA_ARRAY_FLT,
   incy  IN   POSITIVEN) 
  RETURN BINARY_FLOAT;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19092"></a>Parameters</p>
<div id="ARPLS71249" class="tblformal">
<p class="titleintable"><a id="sthref19093"></a><a id="sthref19094"></a>Table 259-10 BLAS_DOT Function Parameters</p>
<table class="cellalignment4330" title="BLAS_DOT Function Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t15">Parameter</th>
<th class="cellalignment4328" id="r1c2-t15">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t15" headers="r1c1-t15">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t15 r1c2-t15">
<p>Specifies the number of elements of the vectors <code dir="ltr">x</code> and <code dir="ltr">y</code>. <code dir="ltr">n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t15" headers="r1c1-t15">
<p><code dir="ltr">x</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t15 r1c2-t15">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of dimension at least</p>
<pre dir="ltr"> ( 1 + ( n - 1 )*abs( incx ) )
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t15" headers="r1c1-t15">
<p><code dir="ltr">incx</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t15 r1c2-t15">
<p>Specifies the increment for the elements of <code dir="ltr">x</code>. <code dir="ltr">incx</code> must not be zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t15" headers="r1c1-t15">
<p><code dir="ltr">y</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t15 r1c2-t15">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of dimension at least</p>
<pre dir="ltr">( 1 + ( n - 1 )*abs( incy) )
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t15" headers="r1c1-t15">
<p><code dir="ltr">incy</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t15 r1c2-t15">
<p>Specifies the increment for the elements of <code dir="ltr">y</code>. <code dir="ltr">incy</code> must not be zero.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71250" class="refsect2"><a id="CIADGCFJ"></a>
<h3 class="refsect2"><a id="sthref19095"></a>BLAS_GBMV Procedures</h3>
<p>This procedure performs one of the matrix-vector operations</p>
<pre dir="ltr">y := alpha*A*x + beta*y
</pre>
<p>or</p>
<pre dir="ltr">y := alpha*A&#39;*x + beta*y
</pre>
<p>where <code dir="ltr">alpha</code> and <code dir="ltr">beta</code> are scalars, <code dir="ltr">x</code> and <code dir="ltr">y</code> are vectors and <code dir="ltr">A</code> is an <code dir="ltr">m</code> by <code dir="ltr">n</code> band matrix, with <code dir="ltr">kl</code> sub-diagonals and <code dir="ltr">ku</code> super-diagonals.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19096"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.BLAS_GEMV (
   trans  IN      flag,
   m      IN      POSITIVEN,   n      IN      POSITIVEN,
   kl     IN      NATURALN,
   ku     IN      NATURALN,
   alpha  IN      SCALAR_DOUBLE,
   a      IN      UTL_NLA_ARRAY_DBL,
   lda    IN      POSITIVEN,
   x      IN      UTL_NLA_ARRAY_DBL,
   incx   IN      POSITIVEN,
   beta   IN      SCALAR_DOUBLE,
   y      IN OUT  UTL_NLA_ARRAY_DBL,
   incy   IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.BLAS_GEMV (
   trans  IN      flag,
   m      IN      POSITIVEN,
   n      IN      POSITIVEN,
   kl     IN      NATURALN,
   ku     IN      NATURALN,
   alpha  IN      SCALAR_FLOAT,
   a      IN      UTL_NLA_ARRAY_FLT,
   lda    IN      POSITIVEN,
   x      IN      UTL_NLA_ARRAY_FLT,
   incx   IN      POSITIVEN,
   beta   IN      SCALAR_FLOAT,
   y      IN OUT  UTL_NLA_ARRAY_FLT,
   incy   IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19097"></a>Parameters</p>
<div id="ARPLS71251" class="tblformal">
<p class="titleintable"><a id="sthref19098"></a><a id="sthref19099"></a>Table 259-11 BLAS_GBMV Procedure Parameters</p>
<table class="cellalignment4330" title="BLAS_GBMV Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t17">Parameter</th>
<th class="cellalignment4328" id="r1c2-t17">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t17" headers="r1c1-t17">
<p><code dir="ltr">trans</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t17 r1c2-t17">
<p>Specifies the operation to be performed:</p>
<ul>
<li>
<p><code dir="ltr">trans</code> = &#39;<code dir="ltr">N</code>&#39; or &#39;<code dir="ltr">n</code>&#39;<code dir="ltr">y</code> := <code dir="ltr">alpha</code>*<code dir="ltr">A</code>*<code dir="ltr">x</code> + <code dir="ltr">beta</code>*<code dir="ltr">y</code></p>
</li>
<li>
<p><code dir="ltr">trans</code> = <code dir="ltr">&#39;T&#39;</code> or <code dir="ltr">&#39;t&#39;</code><code dir="ltr">y</code> := <code dir="ltr">alpha</code>*<code dir="ltr">A</code>&#39;*<code dir="ltr">x</code> + <code dir="ltr">beta</code>*<code dir="ltr">y</code></p>
</li>
<li>
<p><code dir="ltr">trans</code> = &#39;<code dir="ltr">C</code>&#39; or &#39;<code dir="ltr">c</code>&#39;<code dir="ltr">y</code> := <code dir="ltr">alpha</code>*<code dir="ltr">A</code>&#39;*<code dir="ltr">x</code> + <code dir="ltr">beta</code>*<code dir="ltr">y</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t17" headers="r1c1-t17">
<p><code dir="ltr">m</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t17 r1c2-t17">
<p>Specifies the number of rows of the matrix A. <code dir="ltr">m</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t17" headers="r1c1-t17">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t17 r1c2-t17">
<p>Specifies the number of columns of the matrix A. <code dir="ltr">n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t17" headers="r1c1-t17">
<p><code dir="ltr">kl</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t17 r1c2-t17">
<p>Specifies the number of sub-diagonals of the matrix <code dir="ltr">A</code>. <code dir="ltr">kl</code> must satisfy <code dir="ltr">0. le. kl</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t17" headers="r1c1-t17">
<p>ku</p>
</td>
<td class="cellalignment4329" headers="r6c1-t17 r1c2-t17">
<p>Specifies the number of super-diagonals of the matrix <code dir="ltr">A</code>. <code dir="ltr">ku</code> must satisfy <code dir="ltr">0 .le. ku</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t17" headers="r1c1-t17">
<p><code dir="ltr">alpha</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t17 r1c2-t17">
<p><code dir="ltr">SCALAR_FLOAT</code>/<code dir="ltr">DOUBLE</code>. Specifies the scalar alpha.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t17" headers="r1c1-t17">
<p><code dir="ltr">a</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t17 r1c2-t17">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of <code dir="ltr">DIMENSION (lda,n)</code>.</p>
<p>Before entry, the leading <code dir="ltr">(kl</code> + <code dir="ltr">ku</code> + 1) by <code dir="ltr">n</code> part of the array <code dir="ltr">A</code> must contain the matrix of coefficients, supplied column by column, with the leading diagonal of the matrix in row <code dir="ltr">(ku+1)</code> of the array, the first super-diagonal starting at position 2 in row <code dir="ltr">ku</code>, the first sub-diagonal starting at position 1 in row<code dir="ltr">(ku+2)</code>, and so on.</p>
<p>Elements in the array <code dir="ltr">A</code> that do not correspond to elements in the band matrix (such as the top left <code dir="ltr">ku</code> by <code dir="ltr">ku</code> triangle) are not referenced.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t17" headers="r1c1-t17">
<p><code dir="ltr">lda</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t17 r1c2-t17">
<p>Specifies the first dimension of <code dir="ltr">a</code> as declared in the calling (sub) program. <code dir="ltr">lda</code> must be at least <code dir="ltr">(kl+ku+1)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t17" headers="r1c1-t17">
<p><code dir="ltr">x</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t17 r1c2-t17">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of dimension at least</p>
<pre dir="ltr">( 1 + ( n - 1 )*abs( incx ) )
</pre>
<p>when <code dir="ltr">trans</code> = &#39;<code dir="ltr">&#39;N&#39;</code> or <code dir="ltr">&#39;n&#39;</code> and at least</p>
<pre dir="ltr">( 1 + ( m - 1 )*abs( incx ) )
</pre>
<p>otherwise. Before entry, the incremented array <code dir="ltr">X</code> must contain the vector <code dir="ltr">x</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t17" headers="r1c1-t17">
<p><code dir="ltr">incx</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t17 r1c2-t17">
<p>Specifies the increment for the elements of <code dir="ltr">x</code>. Must not be zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t17" headers="r1c1-t17">
<p><code dir="ltr">beta</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t17 r1c2-t17">
<p><code dir="ltr">SCALAR_FLOAT</code>/<code dir="ltr">DOUBLE</code>. Specifies the scalar beta. When <code dir="ltr">beta</code> is supplied as zero then <code dir="ltr">y</code> need not be set on input.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t17" headers="r1c1-t17">
<p><code dir="ltr">y</code></p>
</td>
<td class="cellalignment4329" headers="r13c1-t17 r1c2-t17">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of <code dir="ltr">dimension</code> at least</p>
<pre dir="ltr">( 1 + ( m - 1 )*abs( incy ) ) 
</pre>
<p>when <code dir="ltr">trans</code> = <code dir="ltr">&#39;N&#39;</code> or <code dir="ltr">&#39;n&#39;</code> and at least</p>
<pre dir="ltr">(1+(n-1)*abs(incy))
</pre>
<p>otherwise. Before entry with <code dir="ltr">beta</code> nonzero, the incremented array <code dir="ltr">Y</code> must contain the vector <code dir="ltr">y</code>. On exit, <code dir="ltr">Y</code> is overwritten by the updated vector <code dir="ltr">y</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t17" headers="r1c1-t17">
<p><code dir="ltr">incy</code></p>
</td>
<td class="cellalignment4329" headers="r14c1-t17 r1c2-t17">
<p>Specifies the increment for the elements of <code dir="ltr">y</code>. Must not be zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r15c1-t17" headers="r1c1-t17">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r15c1-t17 r1c2-t17">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>&#39;<code dir="ltr">C</code>&#39;: column-major (default)</p>
</li>
<li>
<p>&#39;<code dir="ltr">R</code>&#39;: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71252" class="refsect2"><a id="CIACCFIJ"></a>
<h3 class="refsect2"><a id="sthref19100"></a>BLAS_GEMM Procedures</h3>
<p>This procedure performs one of the matrix-matrix operations</p>
<pre dir="ltr">C := alpha*op( A )*op( B ) + beta*C
</pre>
<p>where <code dir="ltr">op(X)</code> is one of</p>
<pre dir="ltr">op(X) = X 
</pre>
<p>or</p>
<pre dir="ltr">op(X) = X&#39;
</pre>
<p>where <code dir="ltr">alpha</code> and <code dir="ltr">beta</code> are scalars, and <code dir="ltr">A</code>, <code dir="ltr">B</code> and <code dir="ltr">C</code> are matrices, with <code dir="ltr">op(A)</code> an <code dir="ltr">m</code> by <code dir="ltr">k</code> matrix, <code dir="ltr">op(B)</code> a <code dir="ltr">k</code> by <code dir="ltr">n</code> matrix and <code dir="ltr">C</code> an <code dir="ltr">m</code> by <code dir="ltr">n</code> matrix.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAIJHCF">BLAS Level 3 (Matrix-Matrix Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19101"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.BLAS_GEMM (
   transa IN      flag,
   transb IN      flag,
   m      IN      POSITIVEN,
   n      IN      POSITIVEN,
   k      IN      POSITIVEN,
   alpha  IN      SCALAR_DOUBLE,
   a      IN      UTL_NLA_ARRAY_DBL,
   lda    IN      POSITIVEN,
   b      IN      UTL_NLA_ARRAY_DBL,
   ldb    IN      POSITIVEN,
   beta   IN      SCALAR_DOUBLE,
   c      IN OUT  UTL_NLA_ARRAY_DBL,
   ldc    IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.BLAS_GEMM (
   transa IN      flag,
   transb IN      flag,
   m      IN      POSITIVEN,
   n      IN      POSITIVEN,
   k      IN      POSITIVEN,
   alpha  IN      SCALAR_FLOAT,
   a      IN      UTL_NLA_ARRAY_FLT,
   lda    IN      POSITIVEN,
   b      IN      UTL_NLA_ARRAY_FLT,
   ldb    IN      POSITIVEN,
   beta   IN      SCALAR_FLOAT,
   c      IN OUT  UTL_NLA_ARRAY_FLT,
   ldc    IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19102"></a>Parameters</p>
<div id="ARPLS71253" class="tblformal">
<p class="titleintable"><a id="sthref19103"></a><a id="sthref19104"></a>Table 259-12 BLAS_GEMM Procedure Parameters</p>
<table class="cellalignment4330" title="BLAS_GEMM Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t19">Parameter</th>
<th class="cellalignment4328" id="r1c2-t19">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t19" headers="r1c1-t19">
<p><code dir="ltr">transa</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t19 r1c2-t19">
<p>Specifies the form of <code dir="ltr">op(A)</code> to be used in the matrix multiplication as follows:</p>
<ul>
<li>
<p><code dir="ltr">transa</code> = <code dir="ltr">&#39;N&#39;</code> or <code dir="ltr">&#39;n&#39;</code> : <code dir="ltr">op(A) = &#39;A&#39;</code></p>
</li>
<li>
<p><code dir="ltr">transa</code> = <code dir="ltr">&#39;T&#39;</code> or <code dir="ltr">&#39;t&#39;</code> : <code dir="ltr">op(A) = &#39;A&#39;</code></p>
</li>
<li>
<p><code dir="ltr">transa</code> = <code dir="ltr">&#39;C&#39;</code> or <code dir="ltr">&#39;c&#39;</code> : <code dir="ltr">op(A) = &#39;A&#39;</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t19" headers="r1c1-t19">
<p><code dir="ltr">transb</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t19 r1c2-t19">
<p>Specifies the form of <code dir="ltr">op</code><code dir="ltr">(B)</code> to be used in the matrix multiplication as follows:</p>
<ul>
<li>
<p><code dir="ltr">transb</code> = <code dir="ltr">&#39;N&#39;</code> or <code dir="ltr">&#39;n&#39;</code> : <code dir="ltr">op(B) = B</code></p>
</li>
<li>
<p><code dir="ltr">transb</code> =<code dir="ltr">&#39;T&#39;</code> or <code dir="ltr">&#39;t&#39;</code> : <code dir="ltr">op(B) = B&#39;</code></p>
</li>
<li>
<p><code dir="ltr">transb</code> = <code dir="ltr">&#39;C&#39;</code> or <code dir="ltr">&#39;c&#39;</code>: <code dir="ltr">op(B) = B&#39;</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t19" headers="r1c1-t19">
<p><code dir="ltr">m</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t19 r1c2-t19">
<p>Specifies the number of rows of the matrix <code dir="ltr">op</code><code dir="ltr">(A)</code> and of the matrix <code dir="ltr">C</code>. <code dir="ltr">m</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t19" headers="r1c1-t19">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t19 r1c2-t19">
<p>Specifies the number of columns of the matrix <code dir="ltr">op</code><code dir="ltr">(B)</code> and of the matrix <code dir="ltr">C</code>. <code dir="ltr">n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t19" headers="r1c1-t19">
<p>k</p>
</td>
<td class="cellalignment4329" headers="r6c1-t19 r1c2-t19">
<p>Specifies the rows of the matrix <code dir="ltr">op(A)</code> and the number of columns of the matrix <code dir="ltr">op(B)</code>. <code dir="ltr">k</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t19" headers="r1c1-t19">
<p><code dir="ltr">alpha</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t19 r1c2-t19">
<p><code dir="ltr">SCALAR_FLOAT</code>/<code dir="ltr">DOUBLE</code>. Specifies the scalar alpha.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t19" headers="r1c1-t19">
<p><code dir="ltr">a</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t19 r1c2-t19">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of <code dir="ltr">DIMENSION</code> <code dir="ltr">(lda, ka)</code> where <code dir="ltr">ka</code> is <code dir="ltr">k</code> when <code dir="ltr">transa</code> = <code dir="ltr">&#39;N&#39;</code> or <code dir="ltr">&#39;n&#39;</code>, and is <code dir="ltr">m</code> otherwise. Before entry with <code dir="ltr">transa</code> = <code dir="ltr">&#39;N&#39;</code> or <code dir="ltr">&#39;n&#39;</code>, the leading <code dir="ltr">m</code> by <code dir="ltr">k</code> part of the array <code dir="ltr">A</code> must contain the matrix <code dir="ltr">A</code>, otherwise the leading <code dir="ltr">k</code> by <code dir="ltr">m</code> part of the array <code dir="ltr">A</code> must contain the matrix <code dir="ltr">A</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t19" headers="r1c1-t19">
<p><code dir="ltr">lda</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t19 r1c2-t19">
<p>Specifies the first dimension of <code dir="ltr">a</code> as declared in the calling (sub) program. When <code dir="ltr">transa = &#39;N&#39; or &#39;n&#39;, lda</code> must be at least <code dir="ltr">max (1,k)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t19" headers="r1c1-t19">
<p><code dir="ltr">b</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t19 r1c2-t19">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of <code dir="ltr">DIMENSION (lda, kb)</code> where <code dir="ltr">kb</code> is <code dir="ltr">n</code> when <code dir="ltr">transb</code> = &#39;<code dir="ltr">&#39;N&#39;</code> or <code dir="ltr">&#39;n&#39;</code>, and is <code dir="ltr">k</code> otherwise. Before entry with <code dir="ltr">transb</code> = <code dir="ltr">&#39;N&#39;</code> or <code dir="ltr">&#39;n&#39;</code>, the leading <code dir="ltr">k</code> by <code dir="ltr">n</code> part of the array <code dir="ltr">b</code> must contain the matrix <code dir="ltr">B</code>, otherwise the leading <code dir="ltr">n</code> by <code dir="ltr">k</code> part of the array<code dir="ltr">b</code> must contain the matrix <code dir="ltr">B</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t19" headers="r1c1-t19">
<p><code dir="ltr">ldb</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t19 r1c2-t19">
<p>Specifies the first dimension of <code dir="ltr">b</code> as declared in the calling (sub) program. <code dir="ltr">When transb = &#39;N&#39; or &#39;n&#39;, ldb</code> must be at least <code dir="ltr">max (1, n)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t19" headers="r1c1-t19">
<p><code dir="ltr">beta</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t19 r1c2-t19">
<p><code dir="ltr">SCALAR_FLOAT</code>/<code dir="ltr">DOUBLE</code>. Specifies the scalar beta. When <code dir="ltr">beta</code> is supplied as zero then <code dir="ltr">c</code> need not be set on input.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t19" headers="r1c1-t19">
<p>c</p>
</td>
<td class="cellalignment4329" headers="r13c1-t19 r1c2-t19">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of <code dir="ltr">DIMENSION</code> (ldc, n). Before entry, the leading <code dir="ltr">m</code> by <code dir="ltr">n</code> part of the array <code dir="ltr">C</code> must contain the matrix <code dir="ltr">C</code>, except when beta is zero, in which case <code dir="ltr">C</code> need not be set on entry. On exit, the array<code dir="ltr">C</code> is overwritten by the <code dir="ltr">m</code> by <code dir="ltr">n</code> matrix <code dir="ltr">(alpha*op(A)*op(B) + beta*C)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t19" headers="r1c1-t19">
<p><code dir="ltr">ldc</code></p>
</td>
<td class="cellalignment4329" headers="r14c1-t19 r1c2-t19">
<p>Specifies the first dimension of <code dir="ltr">C</code> as declared in the calling (sub) program. <code dir="ltr">ldc</code> must be at least <code dir="ltr">max(1, m)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r15c1-t19" headers="r1c1-t19">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r15c1-t19 r1c2-t19">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>&#39;<code dir="ltr">C</code>&#39;: column-major (default)</p>
</li>
<li>
<p>&#39;<code dir="ltr">R</code>&#39;: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71254" class="refsect2"><a id="CIAFEAFG"></a>
<h3 class="refsect2"><a id="sthref19105"></a>BLAS_GEMV Procedures</h3>
<p>This procedure performs one of the matrix-vector operations</p>
<pre dir="ltr">y := alpha*A*x + beta*y
</pre>
<p>or</p>
<pre dir="ltr">y := alpha*A&#39;*x + beta*y
</pre>
<p>where <code dir="ltr">alpha</code> and <code dir="ltr">beta</code> are scalars, <code dir="ltr">x</code> and <code dir="ltr">y</code> are vectors and <code dir="ltr">A</code> is an <code dir="ltr">m</code> by <code dir="ltr">n</code> matrix.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19106"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.BLAS_GEMV (
   trans  IN      flag,
   m      IN      POSITIVEN,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_DOUBLE,
   a      IN      UTL_NLA_ARRAY_DBL,
   lda    IN      POSITIVEN,
   x      IN      UTL_NLA_ARRAY_DBL,
   incx   IN      POSITIVEN,
   beta   IN      SCALAR_DOUBLE,
   y      IN OUT  UTL_NLA_ARRAY_DBL,
   incy   IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.BLAS_GEMV (
   trans  IN      flag,
   m      IN      POSITIVEN,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_FLOAT,
   a      IN      UTL_NLA_ARRAY_FLT,
   lda    IN      POSITIVEN,
   x      IN      UTL_NLA_ARRAY_FLT,
   incx   IN      POSITIVEN,
   beta   IN      SCALAR_FLOAT,
   y      IN OUT  UTL_NLA_ARRAY_FLT,
   incy   IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19107"></a>Parameters</p>
<div id="ARPLS71255" class="tblformal">
<p class="titleintable"><a id="sthref19108"></a><a id="sthref19109"></a>Table 259-13 BLAS_GEMV Procedure Parameters</p>
<table class="cellalignment4330" title="BLAS_GEMV Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t21">Parameter</th>
<th class="cellalignment4328" id="r1c2-t21">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t21" headers="r1c1-t21">
<p><code dir="ltr">trans</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t21 r1c2-t21">
<p>Specifies the operation to be performed:</p>
<ul>
<li>
<p><code dir="ltr">trans</code> = <code dir="ltr">&#39;N&#39;</code> or <code dir="ltr">&#39;n&#39;</code>,<code dir="ltr">y</code> := <code dir="ltr">alpha</code>*<code dir="ltr">A</code>*<code dir="ltr">x</code> + <code dir="ltr">beta</code>*<code dir="ltr">y</code></p>
</li>
<li>
<p><code dir="ltr">trans</code> = <code dir="ltr">&#39;T&#39;</code> or <code dir="ltr">&#39;t&#39;</code><code dir="ltr">y</code> := <code dir="ltr">alpha</code>*<code dir="ltr">A</code>&#39;*<code dir="ltr">x</code> + <code dir="ltr">beta</code>*<code dir="ltr">y</code></p>
</li>
<li>
<p><code dir="ltr">trans</code> = &#39;<code dir="ltr">C</code>&#39; or &#39;<code dir="ltr">c</code>&#39;<code dir="ltr">y</code> := <code dir="ltr">alpha</code>*<code dir="ltr">A</code>&#39;*<code dir="ltr">x</code> + <code dir="ltr">beta</code>*<code dir="ltr">y</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t21" headers="r1c1-t21">
<p><code dir="ltr">m</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t21 r1c2-t21">
<p>Specifies the number of rows of the matrix A. <code dir="ltr">m</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t21" headers="r1c1-t21">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t21 r1c2-t21">
<p>Specifies the number of columns of the matrix A. <code dir="ltr">n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t21" headers="r1c1-t21">
<p><code dir="ltr">alpha</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t21 r1c2-t21">
<p><code dir="ltr">SCALAR_FLOAT</code>/<code dir="ltr">DOUBLE</code>. Specifies the scalar alpha.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t21" headers="r1c1-t21">
<p><code dir="ltr">a</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t21 r1c2-t21">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of <code dir="ltr">DIMENSION</code> (lda, <code dir="ltr">n</code>). Before entry, the leading <code dir="ltr">m</code> by <code dir="ltr">n</code> part of the array <code dir="ltr">a</code> must contain the matrix of coefficients.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t21" headers="r1c1-t21">
<p><code dir="ltr">lda</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t21 r1c2-t21">
<p>Specifies the first dimension of <code dir="ltr">a</code> as declared in the calling (sub) program. <code dir="ltr">lda</code> must be at least <code dir="ltr">max</code>(1, <code dir="ltr">m</code>).</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t21" headers="r1c1-t21">
<p><code dir="ltr">x</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t21 r1c2-t21">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of dimension at least</p>
<pre dir="ltr">( 1 + ( n - 1 )*abs( incx ) ) 
</pre>
<p>when <code dir="ltr">trans</code> = &#39;<code dir="ltr">&#39;N&#39;</code> or <code dir="ltr">&#39;n&#39;</code> and at least</p>
<pre dir="ltr">(1+(m-1)*abs(incx))
</pre>
<p>otherwise. Before entry, the incremented array <code dir="ltr">X</code> must contain the vector <code dir="ltr">x</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t21" headers="r1c1-t21">
<p><code dir="ltr">incx</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t21 r1c2-t21">
<p>Specifies the increment for the elements of <code dir="ltr">x</code>. Must not be zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t21" headers="r1c1-t21">
<p><code dir="ltr">beta</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t21 r1c2-t21">
<p><code dir="ltr">SCALAR_FLOAT</code>/<code dir="ltr">DOUBLE</code>. Specifies the scalar beta. When <code dir="ltr">beta</code> is supplied as zero then <code dir="ltr">y</code> need not be set on input.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t21" headers="r1c1-t21">
<p><code dir="ltr">y</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t21 r1c2-t21">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of dimension at least</p>
<pre dir="ltr">( 1 + ( m - 1 )*abs( incy ) )
</pre>
<p>when <code dir="ltr">trans</code> = <code dir="ltr">&#39;N&#39;</code> or <code dir="ltr">&#39;n&#39;</code> and at least</p>
<pre dir="ltr">( 1 + ( n - 1 )*abs( incy ) ) 
</pre>
<p>otherwise. Before entry with <code dir="ltr">beta</code> nonzero, the incremented array <code dir="ltr">Y</code> must contain the vector <code dir="ltr">y</code>. On exit, <code dir="ltr">Y</code> is overwritten by the updated vector <code dir="ltr">y</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t21" headers="r1c1-t21">
<p><code dir="ltr">incy</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t21 r1c2-t21">
<p>Specifies the increment for the elements of <code dir="ltr">y</code>. Must not be zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t21" headers="r1c1-t21">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r13c1-t21 r1c2-t21">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>&#39;<code dir="ltr">C</code>&#39;: column-major (default)</p>
</li>
<li>
<p>&#39;<code dir="ltr">R</code>&#39;: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71256" class="refsect2"><a id="CIAEIJCI"></a>
<h3 class="refsect2"><a id="sthref19110"></a>BLAS_GER Procedures</h3>
<p>This procedure performs the rank 1 operation</p>
<pre dir="ltr">A := alpha*x*y&#39; + A
</pre>
<p>where <code dir="ltr">alpha</code> is a scalar, <code dir="ltr">x</code> is an <code dir="ltr">m</code> element vector, <code dir="ltr">y</code> is an n element vector and <code dir="ltr">A</code> is an <code dir="ltr">m</code> by <code dir="ltr">n</code> matrix.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19111"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.BLAS_GER (
   m      IN      POSITIVEN,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_DBL,
   x      IN OUT  UTL_NLA_ARRAY_DBL,
   incx   IN      POSITIVEN,
   y      IN      UTL_NLA_ARRAY_DBL,
   incy   IN      POSITIVEN,
   a      IN OUT  UTL_NLA_ARRAY_DBL,
   lda    IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.BLAS_GER (
   m      IN      POSITIVEN,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_FLT,
   x      IN OUT  UTL_NLA_ARRAY_FLT,
   incx   IN      POSITIVEN,
   y      IN      UTL_NLA_ARRAY_FLT,
   incy   IN      POSITIVEN,
   a      IN OUT  UTL_NLA_ARRAY_FLT,
   lda    IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19112"></a>Parameters</p>
<div id="ARPLS71257" class="tblformal">
<p class="titleintable"><a id="sthref19113"></a><a id="sthref19114"></a>Table 259-14 BLAS_GER Procedure Parameters</p>
<table class="cellalignment4330" title="BLAS_GER Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t23">Parameter</th>
<th class="cellalignment4328" id="r1c2-t23">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t23" headers="r1c1-t23">
<p><code dir="ltr">m</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t23 r1c2-t23">
<p>Specifies the number of rows of the matrix <code dir="ltr">A</code>. <code dir="ltr">m</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t23" headers="r1c1-t23">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t23 r1c2-t23">
<p>Specifies the number of columns of the matrix <code dir="ltr">A</code>. <code dir="ltr">n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t23" headers="r1c1-t23">
<p><code dir="ltr">alpha</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t23 r1c2-t23">
<p>Specifies the scalar alpha.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t23" headers="r1c1-t23">
<p><code dir="ltr">x</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t23 r1c2-t23">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of dimension at least</p>
<pre dir="ltr">( 1 + ( m - 1 )*abs( incx ) )
</pre>
<p>Before entry, the incremented array <code dir="ltr">X</code> must contain the m element vector <code dir="ltr">x</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t23" headers="r1c1-t23">
<p><code dir="ltr">incx</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t23 r1c2-t23">
<p>Specifies the increment for the elements of <code dir="ltr">x</code>. incx must not be zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t23" headers="r1c1-t23">
<p><code dir="ltr">y</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t23 r1c2-t23">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of dimension at least</p>
<pre dir="ltr">( 1 + ( n - 1 )*abs( incy ) )
</pre>
<p>Before entry, the incremented array <code dir="ltr">Y</code> must contain the m element vector y.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t23" headers="r1c1-t23">
<p><code dir="ltr">incy</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t23 r1c2-t23">
<p>Specifies the increment for the elements of <code dir="ltr">y</code>. incx must not be zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t23" headers="r1c1-t23">
<p><code dir="ltr">a</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t23 r1c2-t23">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of <code dir="ltr">DIMENSION</code> (<code dir="ltr">lda</code>, <code dir="ltr">n</code>).</p>
<p>Before entry, the leading <code dir="ltr">m</code> by <code dir="ltr">n</code> part of the array <code dir="ltr">a</code> must contain the matrix of coefficients. On exit, <code dir="ltr">a</code> is overwritten by the updated matrix.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t23" headers="r1c1-t23">
<p><code dir="ltr">lda</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t23 r1c2-t23">
<p>Specifies the first dimension of <code dir="ltr">a</code> as declared in the calling (sub) program. <code dir="ltr">lda</code> must be at least</p>
<pre dir="ltr">max( 1, m )
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t23" headers="r1c1-t23">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t23 r1c2-t23">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>&#39;<code dir="ltr">C</code>&#39;: column-major (default)</p>
</li>
<li>
<p>&#39;<code dir="ltr">R</code>&#39;: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71258" class="refsect2"><a id="CIAIGEAJ"></a>
<h3 class="refsect2"><a id="sthref19115"></a>BLAS_IAMAX Functions</h3>
<p>This function computes the index of first element of a vector that has the largest absolute value.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19116"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.BLAS_IAMAX (
   n     IN   POSITIVEN,
   x     IN   UTL_NLA_ARRAY_DBL,
   incx  IN   POSITIVEN,
  RETURN POSITIVEN;
</pre>
<pre dir="ltr">UTL_NLA.BLAS_IAMAX (
   n     IN   POSITIVEN,
   x     IN   UTL_NLA_ARRAY_FLT,
   incx  IN   POSITIVEN,
  RETURN POSITIVEN;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19117"></a>Parameters</p>
<div id="ARPLS71259" class="tblformal">
<p class="titleintable"><a id="sthref19118"></a><a id="sthref19119"></a>Table 259-15 BLAS_IAMAX Function Parameters</p>
<table class="cellalignment4330" title="BLAS_IAMAX Function Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t25">Parameter</th>
<th class="cellalignment4328" id="r1c2-t25">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t25" headers="r1c1-t25">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t25 r1c2-t25">
<p>Specifies the number of elements of the vectors <code dir="ltr">x</code> and <code dir="ltr">y</code>. <code dir="ltr">n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t25" headers="r1c1-t25">
<p><code dir="ltr">x</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t25 r1c2-t25">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of <code dir="ltr">DIMENSION</code> at least</p>
<pre dir="ltr">( 1 + ( n - 1 )*abs( incx ) )
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t25" headers="r1c1-t25">
<p><code dir="ltr">incx</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t25 r1c2-t25">
<p>Specifies the increment for the elements of <code dir="ltr">x</code>. <code dir="ltr">incx</code> must not be zero.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71260" class="refsect2"><a id="CIAJEIAC"></a>
<h3 class="refsect2"><a id="sthref19120"></a>BLAS_NRM2 Functions</h3>
<p>This function computes the vector 2-norm (Euclidean norm).</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19121"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.BLAS_NRM2 (
   n     IN   POSITIVEN,
   x     IN   UTL_NLA_ARRAY_DBL,
   incx  IN   POSITIVEN)
  RETURN BINARY_DOUBLE;
</pre>
<pre dir="ltr">UTL_NLA.BLAS_NRM2 (
   n     IN   POSITIVEN,
   x     IN   UTL_NLA_ARRAY_FLT,
   incx  IN   POSITIVEN)
  RETURN BINARY_FLOAT;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19122"></a>Parameters</p>
<div id="ARPLS71261" class="tblformal">
<p class="titleintable"><a id="sthref19123"></a><a id="sthref19124"></a>Table 259-16 BLAS_NRM2 Function Parameters</p>
<table class="cellalignment4330" title="BLAS_NRM2 Function Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t27">Parameter</th>
<th class="cellalignment4328" id="r1c2-t27">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t27" headers="r1c1-t27">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t27 r1c2-t27">
<p>Specifies the number of elements of the vectors <code dir="ltr">x</code> and <code dir="ltr">y</code>. <code dir="ltr">n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t27" headers="r1c1-t27">
<p><code dir="ltr">x</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t27 r1c2-t27">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of dimension at least</p>
<pre dir="ltr">( 1 + ( n - 1 )*abs( incx ) )
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t27" headers="r1c1-t27">
<p><code dir="ltr">incx</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t27 r1c2-t27">
<p>Specifies the increment for the elements of <code dir="ltr">x</code>. <code dir="ltr">incx</code> must not be zero.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71262" class="refsect2"><a id="CIAGCADG"></a>
<h3 class="refsect2"><a id="sthref19125"></a>BLAS_ROT Procedures</h3>
<p>This procedure returns the plane rotation of points.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19126"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.BLAS_ROT (
   n      IN      POSITIVEN,
   x      IN OUT  UTL_NLA_ARRAY_DBL,
   incx   IN      POSITIVEN,
   y      IN OUT  UTL_NLA_ARRAY_DBL,
   incy   IN      POSITIVEN,
   c      IN      SCALAR_DOUBLE,
   s      IN      SCALAR_DOUBLE);
</pre>
<pre dir="ltr">UTL_NLA.BLAS_ROT (
   n      IN      POSITIVEN,
   x      IN OUT  UTL_NLA_ARRAY_FLT,
   incx   IN      POSITIVEN,
   y      IN OUT  UTL_NLA_ARRAY_FLT,
   incy   IN      POSITIVEN,
   c      IN      SCALAR_DOUBLE,
   s      IN      SCALAR_DOUBLE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19127"></a>Parameters</p>
<div id="ARPLS71263" class="tblformal">
<p class="titleintable"><a id="sthref19128"></a><a id="sthref19129"></a>Table 259-17 BLAS_ROT Procedure Parameters</p>
<table class="cellalignment4330" title="BLAS_ROT Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t29">Parameter</th>
<th class="cellalignment4328" id="r1c2-t29">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t29" headers="r1c1-t29">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t29 r1c2-t29">
<p>Specifies the number of elements of the vectors <code dir="ltr">x</code> and <code dir="ltr">y</code>. <code dir="ltr">n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t29" headers="r1c1-t29">
<p><code dir="ltr">x</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t29 r1c2-t29">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of dimension at least</p>
<pre dir="ltr">(1+(n-1)* abs(incx))
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t29" headers="r1c1-t29">
<p><code dir="ltr">incx</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t29 r1c2-t29">
<p>Specifies the increment for the elements of <code dir="ltr">x</code>. <code dir="ltr">incx</code> must not be zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t29" headers="r1c1-t29">
<p><code dir="ltr">y</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t29 r1c2-t29">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of <code dir="ltr">DIMENSION</code> at least</p>
<pre dir="ltr">(1+(n-1)*abs(incy))
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t29" headers="r1c1-t29">
<p><code dir="ltr">incy</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t29 r1c2-t29">
<p>Specifies the increment for the elements of <code dir="ltr">y</code>. <code dir="ltr">incy</code> must not be zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t29" headers="r1c1-t29">
<p><code dir="ltr">c</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t29 r1c2-t29">
<p><code dir="ltr">SCALAR_FLOAT</code>/<code dir="ltr">DOUBLE</code>.Specifies the scalar C.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t29" headers="r1c1-t29">
<p><code dir="ltr">s</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t29 r1c2-t29">
<p><code dir="ltr">SCALAR_FLOAT</code>/<code dir="ltr">DOUBLE</code>.Specifies the scalar S.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71264" class="refsect2"><a id="CIAFGGDH"></a>
<h3 class="refsect2"><a id="sthref19130"></a>BLAS_ROTG Procedures</h3>
<p>This procedure returns the Givens rotation of points.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19131"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.BLAS_ROTG (
   a   IN OUT   SCALAR_DOUBLE,
   b   IN OUT   SCALAR_DOUBLE,
   c   IN OUT   SCALAR_DOUBLE,
   s   IN OUT   SCALAR_DOUBLE);
</pre>
<pre dir="ltr">UTL_NLA.BLAS_ROTG (
   a   IN OUT   SCALAR_FLOAT,
   b   IN OUT   SCALAR_FLOAT,
   c   IN OUT   SCALAR_FLOAT,
   s   IN OUT   SCALAR_FLOAT);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19132"></a>Parameters</p>
<div id="ARPLS71265" class="tblformal">
<p class="titleintable"><a id="sthref19133"></a><a id="sthref19134"></a>Table 259-18 BLAS_ROTG Procedure Parameters</p>
<table class="cellalignment4330" title="BLAS_ROTG Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t31">Parameter</th>
<th class="cellalignment4328" id="r1c2-t31">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t31" headers="r1c1-t31">
<p><code dir="ltr">a</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t31 r1c2-t31">
<p><code dir="ltr">SCALAR_FLOAT</code>/<code dir="ltr">DOUBLE</code>. Specifies the scalar A.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t31" headers="r1c1-t31">
<p><code dir="ltr">b</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t31 r1c2-t31">
<p><code dir="ltr">SCALAR_FLOAT</code>/<code dir="ltr">DOUBLE</code>. Specifies the scalar B.&nbsp;</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t31" headers="r1c1-t31">
<p><code dir="ltr">c</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t31 r1c2-t31">
<p><code dir="ltr">SCALAR_FLOAT</code>/<code dir="ltr">DOUBLE</code>. Specifies the scalar C.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t31" headers="r1c1-t31">
<p><code dir="ltr">s</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t31 r1c2-t31">
<p><code dir="ltr">SCALAR_FLOAT</code>/<code dir="ltr">DOUBLE</code>. Specifies the scalar S.&nbsp;</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71266" class="refsect2"><a id="CIAIBBHJ"></a>
<h3 class="refsect2"><a id="sthref19135"></a>BLAS_SCAL Procedures</h3>
<p>This procedure scales a vector by a constant.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19136"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.BLAS_SCAL (
   n      IN  POSITIVEN,
   alpha  IN  SCALAR_DOUBLE,
   x      IN  OUT UTL_NLA_ARRAY_DBL,
   incx   IN  POSITIVEN);
</pre>
<pre dir="ltr">UTL_NLA.BLAS_SCAL (
   n      IN  POSITIVEN,
   alpha  IN  SCALAR_FLOAT,
   x      IN  OUT UTL_NLA_ARRAY_FLT,
   incx   IN  POSITIVEN);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19137"></a>Parameters</p>
<div id="ARPLS71267" class="tblformal">
<p class="titleintable"><a id="sthref19138"></a><a id="sthref19139"></a>Table 259-19 BLAS_SCAL Procedure Parameters</p>
<table class="cellalignment4330" title="BLAS_SCAL Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t33">Parameter</th>
<th class="cellalignment4328" id="r1c2-t33">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t33" headers="r1c1-t33">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t33 r1c2-t33">
<p>Specifies the number of elements of the vectors <code dir="ltr">x</code> and <code dir="ltr">y</code>. <code dir="ltr">n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t33" headers="r1c1-t33">
<p><code dir="ltr">alpha</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t33 r1c2-t33">
<p>Specifies the scalar alpha.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t33" headers="r1c1-t33">
<p><code dir="ltr">x</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t33 r1c2-t33">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of dimension at least</p>
<pre dir="ltr">(1+(n-1)*abs(incx))
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t33" headers="r1c1-t33">
<p><code dir="ltr">incx</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t33 r1c2-t33">
<p>Specifies the increment for the elements of <code dir="ltr">x</code>. <code dir="ltr">incx</code> must not be zero.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71268" class="refsect2"><a id="CIAGFAGC"></a>
<h3 class="refsect2"><a id="sthref19140"></a>BLAS_SPMV Procedures</h3>
<p>This procedure performs the matrix-vector operation</p>
<pre dir="ltr">y := alpha*A*x + beta*y
</pre>
<p>where <code dir="ltr">alpha</code> and <code dir="ltr">beta</code> are scalars, <code dir="ltr">x</code> and <code dir="ltr">y</code> are n element vectors and <code dir="ltr">A</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> symmetric matrix, supplied in packed form.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19141"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.BLAS_SPMV (
   uplo   IN      flag,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_DOUBLE,
   ap     IN      UTL_NLA_ARRAY_DBL,
   x      IN      UTL_NLA_ARRAY_DBL,
   incx   IN      POSITIVEN,
   beta   IN      SCALAR_DOUBLE,
   y      IN OUT  UTL_NLA_ARRAY_DBL,
   incy   IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.BLAS_SPMV (
   uplo   IN      flag,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_FLOAT,
   ap      IN     UTL_NLA_ARRAY_FLT,
   x      IN      UTL_NLA_ARRAY_FLT,
   incx   IN      POSITIVEN,
   beta   IN      SCALAR_FLOAT,
   y      IN OUT  UTL_NLA_ARRAY_FLT,
   incy   IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19142"></a>Parameters</p>
<div id="ARPLS71269" class="tblformal">
<p class="titleintable"><a id="sthref19143"></a><a id="sthref19144"></a>Table 259-20 BLAS_SPMV Procedure Parameters</p>
<table class="cellalignment4330" title="BLAS_SPMV Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t35">Parameter</th>
<th class="cellalignment4328" id="r1c2-t35">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t35" headers="r1c1-t35">
<p><code dir="ltr">uplo</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t35 r1c2-t35">
<p>Specifies the upper or lower triangular part of the matrix A is supplied in the packed array <code dir="ltr">AP</code>:</p>
<ul>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>. The upper triangular part of <code dir="ltr">A</code> is supplied in <code dir="ltr">AP</code>.</p>
</li>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code>. The lower triangular part of <code dir="ltr">A</code> is supplied in <code dir="ltr">AP</code>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t35" headers="r1c1-t35">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t35 r1c2-t35">
<p>Specifies the order of the matrix <code dir="ltr">A</code>. <code dir="ltr">n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t35" headers="r1c1-t35">
<p><code dir="ltr">alpha</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t35 r1c2-t35">
<p><code dir="ltr">SCALAR_FLOAT</code>/<code dir="ltr">DOUBLE</code>. Specifies the scalar alpha.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t35" headers="r1c1-t35">
<p><code dir="ltr">ap</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t35 r1c2-t35">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of dimension at least</p>
<pre dir="ltr">((n*(n+1))/2)
</pre>
<p>Before entry with <code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>, the array <code dir="ltr">ap</code> must contain the upper triangular part of the symmetric matrix packed sequentially, column by column, so that <code dir="ltr">ap(1)</code> contains <code dir="ltr">a(1,1)</code>, <code dir="ltr">ap(2)</code> and <code dir="ltr">ap(3)</code> contain <code dir="ltr">a(1,2)</code> and <code dir="ltr">a(2,2)</code> respectively, and so on.</p>
<p>Before entry with <code dir="ltr">uplo = &#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code>, the array <code dir="ltr">ap</code> must contain the lower triangular part of the symmetric matrix packed sequentially, column by column, so that <code dir="ltr">ap(1)</code> contains, <code dir="ltr">ap(2)</code> and <code dir="ltr">ap(3)</code> contain <code dir="ltr">a(2,1)</code> and <code dir="ltr">a(3,1)</code> respectively, and so on.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t35" headers="r1c1-t35">
<p><code dir="ltr">x</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t35 r1c2-t35">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of dimension at least</p>
<pre dir="ltr">(1+(n-1)*abs(incx))
</pre>
<p>Before entry, the incremented array <code dir="ltr">X</code> must contain the n element vector <code dir="ltr">x</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t35" headers="r1c1-t35">
<p><code dir="ltr">incx</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t35 r1c2-t35">
<p>Specifies the increment for the elements of <code dir="ltr">x</code>. Must not be zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t35" headers="r1c1-t35">
<p><code dir="ltr">beta</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t35 r1c2-t35">
<p><code dir="ltr">SCALAR_FLOAT</code>/<code dir="ltr">DOUBLE</code>. Specifies the scalar beta. When <code dir="ltr">beta</code> is supplied as zero then <code dir="ltr">Y</code> need not be set on input.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t35" headers="r1c1-t35">
<p><code dir="ltr">y</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t35 r1c2-t35">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of dimension at leasT</p>
<pre dir="ltr">(1+(n-1)*abs(incy))
</pre>
<p>Before entry, the incremented array <code dir="ltr">Y</code> must contain the n element vector <code dir="ltr">y</code>. On exit, <code dir="ltr">Y</code> is overwritten by the updated vector <code dir="ltr">y</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t35" headers="r1c1-t35">
<p><code dir="ltr">incy</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t35 r1c2-t35">
<p>Specifies the increment for the elements of <code dir="ltr">y</code>. Must not be zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t35" headers="r1c1-t35">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t35 r1c2-t35">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>&#39;<code dir="ltr">C</code>&#39;: column-major (default)</p>
</li>
<li>
<p>&#39;<code dir="ltr">R</code>&#39;: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71270" class="refsect2"><a id="CIAIECGG"></a>
<h3 class="refsect2"><a id="sthref19145"></a>BLAS_SPR Procedures</h3>
<p>This procedure performs the rank 1 operation</p>
<pre dir="ltr">A := alpha*x*x&#39; + A
</pre>
<p>where <code dir="ltr">alpha</code> is a real scalar, <code dir="ltr">x</code> is an <code dir="ltr">n</code> element vector, and <code dir="ltr">A</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> symmetric matrix, supplied in packed form.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19146"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.BLAS_SPR (
   uplo   IN      flag,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_DBL,
   x      IN OUT  UTL_NLA_ARRAY_DBL,
   incx   IN      POSITIVEN,
   ap     IN OUT  UTL_NLA_ARRAY_DBL,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.BLAS_SPR (
   uplo   IN      flag,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_FLT,
   x      IN OUT  UTL_NLA_ARRAY_FLT,
   incx   IN      POSITIVEN,
   ap     IN OUT  UTL_NLA_ARRAY_FLT,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19147"></a>Parameters</p>
<div id="ARPLS71271" class="tblformal">
<p class="titleintable"><a id="sthref19148"></a><a id="sthref19149"></a>Table 259-21 BLAS_SPR Procedure Parameters</p>
<table class="cellalignment4330" title="BLAS_SPR Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t37">Parameter</th>
<th class="cellalignment4328" id="r1c2-t37">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t37" headers="r1c1-t37">
<p><code dir="ltr">uplo</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t37 r1c2-t37">
<p>Specifies whether the upper or lower triangular part of the matrix <code dir="ltr">A</code> is supplied in the packed array <code dir="ltr">ap</code>:</p>
<ul>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>: The upper triangular part of <code dir="ltr">A</code> is supplied in <code dir="ltr">ap</code>.</p>
</li>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code> : The lower triangular part of <code dir="ltr">A</code> is supplied in <code dir="ltr">ap</code>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t37" headers="r1c1-t37">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t37 r1c2-t37">
<p>Specifies the order of the matrix <code dir="ltr">A</code>. <code dir="ltr">n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t37" headers="r1c1-t37">
<p><code dir="ltr">alpha</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t37 r1c2-t37">
<p>Specifies the scalar alpha.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t37" headers="r1c1-t37">
<p><code dir="ltr">x</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t37 r1c2-t37">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of dimension at least</p>
<pre dir="ltr">(1+(n-1)*abs(incx))
</pre>
<p>Before entry, the incremented array <code dir="ltr">X</code> must contain the m element vector <code dir="ltr">x</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t37" headers="r1c1-t37">
<p><code dir="ltr">incx</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t37 r1c2-t37">
<p>Specifies the increment for the elements of <code dir="ltr">x</code>. <code dir="ltr">incx</code> must not be zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t37" headers="r1c1-t37">
<p><code dir="ltr">a</code><code dir="ltr">p</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t37 r1c2-t37">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of dimension at least</p>
<pre dir="ltr">((n*(n +1))/2)
</pre>
<p>Before entry with <code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>, the array <code dir="ltr">ap</code> must contain the upper triangular part of the symmetric matrix packed sequentially, column by column, so that <code dir="ltr">ap(1)</code> contains <code dir="ltr">a(1,1)</code>, <code dir="ltr">ap(2)</code> and <code dir="ltr">ap(3)</code> contain <code dir="ltr">a(1,2)</code> and <code dir="ltr">a(2,2)</code> respectively, and so on. On exit, the array <code dir="ltr">ap</code> is overwritten by the upper triangular part of the updated matrix.</p>
<p>Before entry with <code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code>, the array <code dir="ltr">ap</code> must contain the lower triangular part of the symmetric matrix packed sequentially, column by column, so that ap(1) contains <code dir="ltr">a(1,1)</code>, <code dir="ltr">ap(2)</code> and <code dir="ltr">ap(3)</code> contain <code dir="ltr">a(2,1)</code> and <code dir="ltr">a(3,1)</code> respectively, and so on. On exit, the array <code dir="ltr">ap</code> is overwritten by the lower triangular part of the updated matrix</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t37" headers="r1c1-t37">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t37 r1c2-t37">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>&#39;<code dir="ltr">C</code>&#39;: column-major (default)</p>
</li>
<li>
<p>&#39;<code dir="ltr">R</code>&#39;: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71272" class="refsect2"><a id="CIACHFGD"></a>
<h3 class="refsect2"><a id="sthref19150"></a>BLAS_SPR2 Procedures</h3>
<p>This procedure performs the rank 2 operation</p>
<pre dir="ltr">A := alpha*x*y&#39; + alpha*y*x&#39; +A
</pre>
<p>where <code dir="ltr">alpha</code> is a scalar, <code dir="ltr">x</code> and <code dir="ltr">y</code> are <code dir="ltr">n</code> element vectors, and <code dir="ltr">A</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> symmetric matrix, supplied in packed form.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19151"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.BLAS_SPR2 (
   uplo   IN      flag,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_DBL,
   x      IN      UTL_NLA_ARRAY_DBL,
   incx   IN      POSITIVEN,
   y      IN      UTL_NLA_ARRAY_DBL,
   incy   IN      POSITIVEN,
   a      IN OUT  UTL_NLA_ARRAY_DBL,
   lda    IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.BLAS_SPR2 (
   uplo   IN      flag,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_FLT,
   x      IN      UTL_NLA_ARRAY_FLT,
   incx   IN      POSITIVEN,
   y      IN      UTL_NLA_ARRAY_FLT,
   incy   IN      POSITIVEN,
   a      IN OUT  UTL_NLA_ARRAY_FLT,
   lda    IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19152"></a>Parameters</p>
<div id="ARPLS71273" class="tblformal">
<p class="titleintable"><a id="sthref19153"></a><a id="sthref19154"></a>Table 259-22 BLAS_SPR2 Procedure Parameters</p>
<table class="cellalignment4330" title="BLAS_SPR2 Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t39">Parameter</th>
<th class="cellalignment4328" id="r1c2-t39">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t39" headers="r1c1-t39">
<p><code dir="ltr">uplo</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t39 r1c2-t39">
<p>Specifies whether the upper or lower triangular part of the matrix <code dir="ltr">A</code> is supplied in the packed array <code dir="ltr">ap</code> :</p>
<ul>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code> : The upper triangular part of <code dir="ltr">A</code> is supplied in <code dir="ltr">ap</code>.</p>
</li>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code> : The lower triangular part of <code dir="ltr">A</code> is supplied in <code dir="ltr">ap</code>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t39" headers="r1c1-t39">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t39 r1c2-t39">
<p>Specifies the order of the matrix <code dir="ltr">A</code>. <code dir="ltr">n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t39" headers="r1c1-t39">
<p><code dir="ltr">alpha</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t39 r1c2-t39">
<p>Specifies the scalar alpha.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t39" headers="r1c1-t39">
<p><code dir="ltr">x</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t39 r1c2-t39">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of dimension at least</p>
<pre dir="ltr">(1+(n-1)*abs(incx))
</pre>
<p>Before entry, the incremented array <code dir="ltr">X</code> must contain the m element vector <code dir="ltr">x</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t39" headers="r1c1-t39">
<p><code dir="ltr">incx</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t39 r1c2-t39">
<p>Specifies the increment for the elements of <code dir="ltr">x</code>. <code dir="ltr">incx</code> must not be zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t39" headers="r1c1-t39">
<p><code dir="ltr">y</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t39 r1c2-t39">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of dimension at least</p>
<pre dir="ltr">(1+(n-1)*abs(incy))
</pre>
<p>Before entry, the incremented array <code dir="ltr">X</code> must contain the m element vector <code dir="ltr">y</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t39" headers="r1c1-t39">
<p><code dir="ltr">incy</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t39 r1c2-t39">
<p>Specifies the increment for the elements of <code dir="ltr">y</code>. <code dir="ltr">incy</code> must not be zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t39" headers="r1c1-t39">
<p><code dir="ltr">ap</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t39 r1c2-t39">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of dimension at least</p>
<pre dir="ltr">((n*(n+1))/2)
</pre>
<p>Before entry with <code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>, the array <code dir="ltr">ap</code> must contain the upper triangular part of the symmetric matrix packed sequentially, column by column, so that <code dir="ltr">ap(1)</code> contains <code dir="ltr">ap(1)</code> contains <code dir="ltr">a(1,1)</code>, <code dir="ltr">ap(2)</code> and <code dir="ltr">ap(3)</code> contain <code dir="ltr">a(1,2)</code> and <code dir="ltr">a(2,2)</code> respectively, and so on. On exit, the array <code dir="ltr">ap</code> is overwritten by the upper triangular part of the updated matrix.</p>
<p>Before entry with <code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code>, the array <code dir="ltr">ap</code> must contain the lower triangular part of the symmetric matrix packed sequentially, column by column, so that ap(1) contains <code dir="ltr">a(1,1)</code>, <code dir="ltr">ap(2)</code> and <code dir="ltr">ap(3)</code> contain <code dir="ltr">a(2,1)</code> and <code dir="ltr">a(3,1)</code> respectively, and so on. On exit, the array <code dir="ltr">ap</code> is overwritten by the lower triangular part of the updated matrix</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t39" headers="r1c1-t39">
<p><code dir="ltr">lda</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t39 r1c2-t39">
<p>Specifies the first dimension of <code dir="ltr">a</code> as declared in the calling (sub) program. <code dir="ltr">lda</code> must be at least <code dir="ltr">(k + 1)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t39" headers="r1c1-t39">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t39 r1c2-t39">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>&#39;<code dir="ltr">C</code>&#39;: column-major (default)</p>
</li>
<li>
<p>&#39;<code dir="ltr">R</code>&#39;: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71274" class="refsect2"><a id="CIABHIIE"></a>
<h3 class="refsect2"><a id="sthref19155"></a>BLAS_SBMV Procedures</h3>
<p>This procedure performs the matrix-vector operation</p>
<pre dir="ltr">y := alpha*A*x + beta*y
</pre>
<p>where <code dir="ltr">alpha</code> and <code dir="ltr">beta</code> are scalars, <code dir="ltr">x</code> and <code dir="ltr">y</code> are n element vectors and <code dir="ltr">A</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> symmetric band matrix, with <code dir="ltr">k</code> super-diagonals.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19156"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.BLAS_SBMV (
   uplo   IN      flag,
   n      IN      POSITIVEN,
   k      IN      NATURALN,
   alpha  IN      SCALAR_DOUBLE,
   a      IN      UTL_NLA_ARRAY_DBL,
   lda    IN      POSITIVEN,
   x      IN      UTL_NLA_ARRAY_DBL,
   incx   IN      POSITIVEN,
   beta   IN      SCALAR_DOUBLE,
   y      IN OUT  UTL_NLA_ARRAY_DBL,
   incy   IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.BLAS_SBMV (
   uplo   IN      flag,
   n      IN      POSITIVEN,
   k      IN      NATURALN,
   alpha  IN      SCALAR_FLOAT,
   a      IN      UTL_NLA_ARRAY_FLT,
   lda    IN      POSITIVEN,
   x      IN      UTL_NLA_ARRAY_FLT,
   incx   IN      POSITIVEN,
   beta   IN      SCALAR_FLOAT,
   y      IN OUT  UTL_NLA_ARRAY_FLT,
   incy   IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19157"></a>Parameters</p>
<div id="ARPLS71275" class="tblformal">
<p class="titleintable"><a id="sthref19158"></a><a id="sthref19159"></a>Table 259-23 BLAS_SBMV Procedure Parameters</p>
<table class="cellalignment4330" title="BLAS_SBMV Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t41">Parameter</th>
<th class="cellalignment4328" id="r1c2-t41">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t41" headers="r1c1-t41">
<p><code dir="ltr">uplo</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t41 r1c2-t41">
<p>Specifies whether the upper or lower triangular part of the band matrix <code dir="ltr">A</code> is being supplied:</p>
<ul>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>. The upper triangular part of <code dir="ltr">A</code> is supplied.</p>
</li>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code>. The lower triangular part of <code dir="ltr">A</code> is supplied.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t41" headers="r1c1-t41">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t41 r1c2-t41">
<p>Specifies the order of the matrix <code dir="ltr">A</code>. <code dir="ltr">n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t41" headers="r1c1-t41">
<p><code dir="ltr">k</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t41 r1c2-t41">
<p>Specifies the number of super-diagonals of the matrix <code dir="ltr">A</code>. <code dir="ltr">k</code> must satisfy <code dir="ltr">0 .le. k</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t41" headers="r1c1-t41">
<p><code dir="ltr">alpha</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t41 r1c2-t41">
<p><code dir="ltr">SCALAR_FLOAT</code>/<code dir="ltr">DOUBLE</code>. Specifies the scalar alpha.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t41" headers="r1c1-t41">
<p><code dir="ltr">a</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t41 r1c2-t41">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of <code dir="ltr">DIMENSION (lda,n)</code>.</p>
<p>Before entry with <code dir="ltr">uplo = &#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>, the leading <code dir="ltr">(k+1)</code> by <code dir="ltr">n</code> part of the array <code dir="ltr">A</code> must contain the upper triangular band part of the symmetric matrix, supplied column by column, with the leading diagonal of the matrix in row <code dir="ltr">(k+1)</code> of the array, the first super-diagonal starting at position 2 in row<code dir="ltr">k</code>, and so on. The top left <code dir="ltr">k</code> by k triangle of the array <code dir="ltr">A</code> is not referenced.</p>
<p>Before entry with <code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code>, the leading <code dir="ltr">(k+1)</code> by n part of the array A must contain the lower triangular band part of the symmetric matrix, supplied column by column, with the leading diagonal of the matrix in row 1 of the array, the first sub-diagonal starting at position 1 in row 2, and so on. The bottom right <code dir="ltr">k</code> by <code dir="ltr">k</code> triangle of the array <code dir="ltr">A</code> is not referenced.</p>
<p>Unchanged on exit</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t41" headers="r1c1-t41">
<p><code dir="ltr">lda</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t41 r1c2-t41">
<p>Specifies the first dimension of <code dir="ltr">a</code> as declared in the calling (sub) program. <code dir="ltr">lda</code> must be at least <code dir="ltr">(k + 1)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t41" headers="r1c1-t41">
<p><code dir="ltr">x</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t41 r1c2-t41">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of dimension at least</p>
<pre dir="ltr">(1+(n-1)*abs(incx))
</pre>
<p>Before entry, the incremented array <code dir="ltr">X</code> must contain the n element vector <code dir="ltr">x</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t41" headers="r1c1-t41">
<p><code dir="ltr">incx</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t41 r1c2-t41">
<p>Specifies the increment for the elements of <code dir="ltr">x</code>. Must not be zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t41" headers="r1c1-t41">
<p><code dir="ltr">beta</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t41 r1c2-t41">
<p><code dir="ltr">SCALAR_FLOAT</code>/<code dir="ltr">DOUBLE</code>. Specifies the scalar beta.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t41" headers="r1c1-t41">
<p><code dir="ltr">y</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t41 r1c2-t41">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of dimension at least</p>
<pre dir="ltr">(1+(n-1)*abs(incy))
</pre>
<p>Before entry, the incremented array <code dir="ltr">Y</code> must contain the n element vector <code dir="ltr">y</code>. On exit, <code dir="ltr">Y</code> is overwritten by the updated vector <code dir="ltr">y</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t41" headers="r1c1-t41">
<p><code dir="ltr">incy</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t41 r1c2-t41">
<p>Specifies the increment for the elements of <code dir="ltr">y</code>. Must not be zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t41" headers="r1c1-t41">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r13c1-t41 r1c2-t41">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>&#39;<code dir="ltr">C</code>&#39;: column-major (default)</p>
</li>
<li>
<p>&#39;<code dir="ltr">R</code>&#39;: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71276" class="refsect2"><a id="CIADBHFG"></a>
<h3 class="refsect2"><a id="sthref19160"></a>BLAS_SWAP Procedures</h3>
<p>This procedure swaps the contents of two vectors each of size n.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19161"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.BLAS_SWAP (
   n     IN     POSITIVEN,
   x     IN OUT UTL_NLA_ARRAY_DBL,
   incx  IN     POSITIVEN,
   y     IN OUT UTL_NLA_ARRAY_DBL,
   incy  IN     POSITIVEN);
</pre>
<pre dir="ltr">UTL_NLA.BLAS_SWAP (
   n     IN     POSITIVEN,
   x     IN OUT UTL_NLA_ARRAY_FLT,
   incx  IN     POSITIVEN,
   y     IN OUT UTL_NLA_ARRAY_FLT,
   incy  IN     POSITIVEN);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19162"></a>Parameters</p>
<div id="ARPLS71277" class="tblformal">
<p class="titleintable"><a id="sthref19163"></a><a id="sthref19164"></a>Table 259-24 BLAS_SWAP Procedure Parameters</p>
<table class="cellalignment4330" title="BLAS_SWAP Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t42">Parameter</th>
<th class="cellalignment4328" id="r1c2-t42">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t42" headers="r1c1-t42">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t42 r1c2-t42">
<p>Specifies the number of elements of the vectors <code dir="ltr">x</code> and <code dir="ltr">y</code>. <code dir="ltr">n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t42" headers="r1c1-t42">
<p><code dir="ltr">x</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t42 r1c2-t42">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of <code dir="ltr">dimension</code> at least</p>
<pre dir="ltr">(1+(n-1)*abs(incx))
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t42" headers="r1c1-t42">
<p><code dir="ltr">incx</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t42 r1c2-t42">
<p>Specifies the increment for the elements of <code dir="ltr">x</code>. <code dir="ltr">incx</code> must not be zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t42" headers="r1c1-t42">
<p><code dir="ltr">y</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t42 r1c2-t42">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of <code dir="ltr">DIMENSION</code> at least</p>
<pre dir="ltr">(1+(n-1)*abs(incy))
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t42" headers="r1c1-t42">
<p><code dir="ltr">incy</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t42 r1c2-t42">
<p>Specifies the increment for the elements of <code dir="ltr">y</code>. <code dir="ltr">incy</code> must not be zero.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71278" class="refsect2"><a id="CIAHABIJ"></a>
<h3 class="refsect2"><a id="sthref19165"></a>BLAS_SYMM Procedures</h3>
<p>This procedure performs one of the matrix-matrix operations</p>
<pre dir="ltr">C := alpha*A*B + beta*C
</pre>
<p>or</p>
<pre dir="ltr">C := alpha*B*A + beta*C
</pre>
<p>where <code dir="ltr">alpha</code> and <code dir="ltr">beta</code> are scalars, <code dir="ltr">A</code> is a symmetric matrix, and <code dir="ltr">B</code> and <code dir="ltr">C</code> are <code dir="ltr">m</code> by <code dir="ltr">n</code> matrices.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAIJHCF">BLAS Level 3 (Matrix-Matrix Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19166"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.BLAS_SYMM (
   side   IN      flag,
   uplo   IN      flag,
   m      IN      POSITIVEN,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_DOUBLE,
   a      IN      UTL_NLA_ARRAY_DBL,
   lda    IN      POSITIVEN,
   b      IN      UTL_NLA_ARRAY_DBL,
   ldb    IN      POSITIVEN,
   beta   IN      SCALAR_DOUBLE,
   c      IN OUT  UTL_NLA_ARRAY_DBL,
   ldc    IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.BLAS_SYMM (
   side   IN      flag,
   uplo   IN      flag,
   m      IN      POSITIVEN,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_FLOAT,
   a      IN      UTL_NLA_ARRAY_FLT,
   lda    IN      POSITIVEN,
   b      IN      UTL_NLA_ARRAY_FLT,
   ldb    IN      POSITIVEN,
   beta   IN      SCALAR_FLOAT,
   c      IN OUT  UTL_NLA_ARRAY_FLT,
   ldc    IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19167"></a>Parameters</p>
<div id="ARPLS71279" class="tblformal">
<p class="titleintable"><a id="sthref19168"></a><a id="sthref19169"></a>Table 259-25 BLAS_SYMM Procedure Parameters</p>
<table class="cellalignment4330" title="BLAS_SYMM Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t44">Parameter</th>
<th class="cellalignment4328" id="r1c2-t44">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t44" headers="r1c1-t44">
<p><code dir="ltr">side</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t44 r1c2-t44">
<p>Specifies whether the symmetric matrix <code dir="ltr">A</code> appears on the left or right in the operation:</p>
<ul>
<li>
<p><code dir="ltr">side</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code> : <code dir="ltr">C := alpha*A*B + beta*C</code></p>
</li>
<li>
<p><code dir="ltr">side</code> = <code dir="ltr">&#39;R&#39;</code> or <code dir="ltr">&#39;r&#39;</code> : <code dir="ltr">C := alpha*B*A + beta*C</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t44" headers="r1c1-t44">
<p><code dir="ltr">uplo</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t44 r1c2-t44">
<p>Specifies whether the upper or lower triangular part of the array <code dir="ltr">A</code> is to be referenced:</p>
<ul>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code> : Only the upper triangular part of the symmetric matrix is to be referenced.</p>
</li>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code> : Only the lower triangular part of the symmetric matrix is to be referenced.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t44" headers="r1c1-t44">
<p><code dir="ltr">m</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t44 r1c2-t44">
<p>Specifies the number of rows of the matrix <code dir="ltr">C</code>. <code dir="ltr">m</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t44" headers="r1c1-t44">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t44 r1c2-t44">
<p>Specifies the number of columns of the matrix <code dir="ltr">C</code>. <code dir="ltr">n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t44" headers="r1c1-t44">
<p><code dir="ltr">alpha</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t44 r1c2-t44">
<p><code dir="ltr">SCALAR_FLOAT</code>/<code dir="ltr">DOUBLE</code>. Specifies the scalar alpha.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t44" headers="r1c1-t44">
<p><code dir="ltr">a</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t44 r1c2-t44">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of <code dir="ltr">DIMENSION (lda,ka)</code> where <code dir="ltr">ka</code> is <code dir="ltr">m</code> when <code dir="ltr">side</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code>, and is <code dir="ltr">n</code> otherwise.</p>
<p>Before entry with <code dir="ltr">side</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code>, the leading <code dir="ltr">m</code> by <code dir="ltr">m</code> part of the array <code dir="ltr">A</code> must contain the symmetric matrix, such that when <code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>, the leading <code dir="ltr">m</code> by <code dir="ltr">m</code> upper triangular part of the array <code dir="ltr">A</code> must contain the upper triangular part of the symmetric matrix and the strictly lower triangular part of <code dir="ltr">A</code> is not referenced, and when <code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code>, the leading <code dir="ltr">m</code> by <code dir="ltr">m</code> lower triangular part of the array <code dir="ltr">A</code> must contain the lower triangular part of the symmetric matrix and the strictly upper triangular part of <code dir="ltr">A</code> is not referenced.</p>
<p>Before entry with <code dir="ltr">side</code> = &#39;<code dir="ltr">R</code>&#39; or &#39;r&#39;, the <code dir="ltr">n</code> by <code dir="ltr">n</code> part of the array <code dir="ltr">A</code> must contain the symmetric matrix, such that when <code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>, the leading <code dir="ltr">n</code> by <code dir="ltr">n</code> upper triangular part of the array <code dir="ltr">A</code> must contain the upper triangular part of the symmetric matrix and the strictly lower triangular part of A is not referenced, and when <code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code>, the leading <code dir="ltr">n</code> by <code dir="ltr">n</code> lower triangular part of the array <code dir="ltr">A</code> must contain the lower triangular part of the symmetric matrix and the strictly upper triangular part of <code dir="ltr">A</code> is not referenced.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t44" headers="r1c1-t44">
<p><code dir="ltr">lda</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t44 r1c2-t44">
<p>Specifies the first dimension of <code dir="ltr">a</code> as declared in the calling (sub) program. When side = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code>, <code dir="ltr">lda</code> must be at least <code dir="ltr">max(1,m)</code>, otherwise <code dir="ltr">lda</code> must be at least <code dir="ltr">max(1,n)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t44" headers="r1c1-t44">
<p><code dir="ltr">b</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t44 r1c2-t44">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of <code dir="ltr">DIMENSION (ldb,n)</code>.</p>
<p>Before entry, the leading <code dir="ltr">m</code> by <code dir="ltr">n</code> part of the array <code dir="ltr">B</code> must contain the matrix <code dir="ltr">B</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t44" headers="r1c1-t44">
<p><code dir="ltr">ldb</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t44 r1c2-t44">
<p>Specifies the first dimension of <code dir="ltr">b</code> as declared in the calling (sub) program. <code dir="ltr">ldb</code> must be at least <code dir="ltr">max(1,m)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t44" headers="r1c1-t44">
<p><code dir="ltr">beta</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t44 r1c2-t44">
<p><code dir="ltr">SCALAR_FLOAT</code>/<code dir="ltr">DOUBLE</code>. Specifies the scalar beta. When <code dir="ltr">beta</code> is supplied as zero then <code dir="ltr">c</code> need not be set on input.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t44" headers="r1c1-t44">
<p>c</p>
</td>
<td class="cellalignment4329" headers="r12c1-t44 r1c2-t44">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of <code dir="ltr">DIMENSION (ldc,n)</code>. Before entry, the leading <code dir="ltr">m</code> by <code dir="ltr">n</code> part of the array <code dir="ltr">C</code> must contain the matrix <code dir="ltr">C</code>, except when beta is zero, in which case <code dir="ltr">C</code> need not be set on entry. On exit, the array <code dir="ltr">C</code> is overwritten by the <code dir="ltr">m</code> by <code dir="ltr">n</code> updated matrix.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t44" headers="r1c1-t44">
<p><code dir="ltr">ldc</code></p>
</td>
<td class="cellalignment4329" headers="r13c1-t44 r1c2-t44">
<p>Specifies the first dimension of <code dir="ltr">C</code> as declared in the calling (sub) program. <code dir="ltr">ldc</code> must be at least <code dir="ltr">max (1,m)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t44" headers="r1c1-t44">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r14c1-t44 r1c2-t44">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>&#39;<code dir="ltr">C</code>&#39;: column-major (default)</p>
</li>
<li>
<p>&#39;<code dir="ltr">R</code>&#39;: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71280" class="refsect2"><a id="CIAEAJDG"></a>
<h3 class="refsect2"><a id="sthref19170"></a>BLAS_SYMV Procedures</h3>
<p>This procedure performs the matrix-vector operation</p>
<pre dir="ltr">y := alpha*A*x + beta*y
</pre>
<p>where <code dir="ltr">alpha</code> and <code dir="ltr">beta</code> are scalars, <code dir="ltr">x</code> and <code dir="ltr">y</code> are <code dir="ltr">n</code> element vectors and <code dir="ltr">A</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> symmetric matrix.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19171"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.BLAS_SYMV (
   uplo   IN      flag,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_DOUBLE,
   a      IN      UTL_NLA_ARRAY_DBL,
   lda    IN      POSITIVEN,
   x      IN      UTL_NLA_ARRAY_DBL,
   incx   IN      POSITIVEN,
   beta   IN      SCALAR_DOUBLE,
   y      IN OUT  UTL_NLA_ARRAY_DBL,
   incy   IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.BLAS_SYMV (
   uplo   IN      flag,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_FLOAT,
   a      IN      UTL_NLA_ARRAY_FLT,
   lda    IN      POSITIVEN,
   x      IN      UTL_NLA_ARRAY_FLT,
   incx   IN      POSITIVEN,
   beta   IN      SCALAR_FLOAT,
   y      IN OUT  UTL_NLA_ARRAY_FLT,
   incy   IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19172"></a>Parameters</p>
<div id="ARPLS71281" class="tblformal">
<p class="titleintable"><a id="sthref19173"></a><a id="sthref19174"></a>Table 259-26 BLAS_SYMV Procedure Parameters</p>
<table class="cellalignment4330" title="BLAS_SYMV Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t46">Parameter</th>
<th class="cellalignment4328" id="r1c2-t46">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t46" headers="r1c1-t46">
<p><code dir="ltr">uplo</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t46 r1c2-t46">
<p>Specifies whether the upper or lower triangular part of the array <code dir="ltr">A</code> is to be referenced:</p>
<ul>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code>or <code dir="ltr">&#39;u&#39;</code>. Only the upper triangular part of<code dir="ltr">A</code> is to be referenced.</p>
</li>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code>. Only the lower triangular part of <code dir="ltr">A</code> is to be referenced.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t46" headers="r1c1-t46">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t46 r1c2-t46">
<p>Specifies the order of the matrix <code dir="ltr">A</code>. <code dir="ltr">n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t46" headers="r1c1-t46">
<p><code dir="ltr">alpha</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t46 r1c2-t46">
<p><code dir="ltr">SCALAR_FLOAT</code>/<code dir="ltr">DOUBLE</code>. Specifies the scalar alpha.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t46" headers="r1c1-t46">
<p><code dir="ltr">a</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t46 r1c2-t46">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of <code dir="ltr">DIMENSION (lda,n)</code>. Before entry with <code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>, the leading <code dir="ltr">n</code> by <code dir="ltr">n</code> upper triangular part of the array <code dir="ltr">A</code> must contain the upper triangular part of the symmetric matrix and the strictly lower triangular part of <code dir="ltr">A</code> is not referenced.</p>
<p>Before entry with <code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code>, the leading <code dir="ltr">n</code> by <code dir="ltr">n</code> lower triangular part of the array A must contain the lower triangular part of the symmetric matrix and the strictly upper triangular part of <code dir="ltr">A</code> is not referenced.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t46" headers="r1c1-t46">
<p><code dir="ltr">lda</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t46 r1c2-t46">
<p>Specifies the first dimension of <code dir="ltr">a</code> as declared in the calling (sub) program. <code dir="ltr">lda</code> must be at least <code dir="ltr">max(1,n)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t46" headers="r1c1-t46">
<p><code dir="ltr">x</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t46 r1c2-t46">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of dimension at least</p>
<pre dir="ltr">(1+(n-1)*abs(incx))
</pre>
<p>Before entry, the incremented array <code dir="ltr">X</code> must contain the n element vector <code dir="ltr">x</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t46" headers="r1c1-t46">
<p><code dir="ltr">incx</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t46 r1c2-t46">
<p>Specifies the increment for the elements of <code dir="ltr">x</code>. Must not be zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t46" headers="r1c1-t46">
<p><code dir="ltr">beta</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t46 r1c2-t46">
<p><code dir="ltr">SCALAR_FLOAT</code>/<code dir="ltr">DOUBLE</code>. Specifies the scalar beta. When <code dir="ltr">beta</code> is supplied as zero then <code dir="ltr">y</code> need not be set on input.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t46" headers="r1c1-t46">
<p><code dir="ltr">y</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t46 r1c2-t46">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of dimension at least</p>
<pre dir="ltr">(1+(n-1)*abs(incy))
</pre>
<p>Before entry, the incremented array <code dir="ltr">Y</code> must contain the n element vector <code dir="ltr">y</code>. On exit, <code dir="ltr">Y</code> is overwritten by the updated vector <code dir="ltr">y</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t46" headers="r1c1-t46">
<p><code dir="ltr">incy</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t46 r1c2-t46">
<p>Specifies the increment for the elements of <code dir="ltr">y</code>. Must not be zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t46" headers="r1c1-t46">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t46 r1c2-t46">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>&#39;<code dir="ltr">C</code>&#39;: column-major (default)</p>
</li>
<li>
<p>&#39;<code dir="ltr">R</code>&#39;: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71282" class="refsect2"><a id="CIAFBJAJ"></a>
<h3 class="refsect2"><a id="sthref19175"></a>BLAS_SYR Procedures</h3>
<p>This procedure performs the rank 1 operation</p>
<pre dir="ltr">A := alpha*x*x&#39; + A
</pre>
<p>where <code dir="ltr">alpha</code> is a real scalar, <code dir="ltr">x</code> is an <code dir="ltr">n</code> element vector, and <code dir="ltr">A</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> symmetric matrix.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19176"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.BLAS_SYR (
   uplo   IN      flag,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_DBL,
   x      IN OUT  UTL_NLA_ARRAY_DBL,
   incx   IN      POSITIVEN,
   a      IN OUT  UTL_NLA_ARRAY_DBL,
   lda    IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.BLAS_SYR (
   uplo   IN      flag,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_FLT,
   x      IN OUT  UTL_NLA_ARRAY_FLT,
   incx   IN      POSITIVEN,
   a      IN OUT  UTL_NLA_ARRAY_FLT,
   lda    IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19177"></a>Parameters</p>
<div id="ARPLS71283" class="tblformal">
<p class="titleintable"><a id="sthref19178"></a><a id="sthref19179"></a>Table 259-27 BLAS_SYR Procedure Parameters</p>
<table class="cellalignment4330" title="BLAS_SYR Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t48">Parameter</th>
<th class="cellalignment4328" id="r1c2-t48">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t48" headers="r1c1-t48">
<p><code dir="ltr">uplo</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t48 r1c2-t48">
<p>Specifies whether the upper or lower triangular part of the array <code dir="ltr">A</code> is to be referenced:</p>
<ul>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code>or <code dir="ltr">&#39;u&#39;</code> : Only the upper triangular part of <code dir="ltr">A</code> is to be referenced.</p>
</li>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code>or <code dir="ltr">&#39;l&#39;</code> : Only the lower triangular part of A is to be referenced.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t48" headers="r1c1-t48">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t48 r1c2-t48">
<p>Specifies the order of the matrix <code dir="ltr">A</code>. <code dir="ltr">n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t48" headers="r1c1-t48">
<p><code dir="ltr">alpha</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t48 r1c2-t48">
<p>Specifies the scalar alpha. &nbsp;</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t48" headers="r1c1-t48">
<p><code dir="ltr">x</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t48 r1c2-t48">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of dimension at least</p>
<pre dir="ltr">(1+(n-1)*abs(incx))
</pre>
<p>Before entry, the incremented array <code dir="ltr">X</code> must contain the m element vector <code dir="ltr">x</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t48" headers="r1c1-t48">
<p><code dir="ltr">incx</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t48 r1c2-t48">
<p>Specifies the increment for the elements of <code dir="ltr">x</code>. <code dir="ltr">incx</code> must not be zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t48" headers="r1c1-t48">
<p><code dir="ltr">a</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t48 r1c2-t48">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of <code dir="ltr">DIMENSION</code> <code dir="ltr">(lda, n)</code></p>
<p>Before entry with <code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>, the leading <code dir="ltr">n</code> by <code dir="ltr">n</code> upper triangular part of the array <code dir="ltr">A</code> must contain the upper triangular part of the symmetric matrix and the strictly lower triangular part of <code dir="ltr">A</code> is not referenced. On exit, the upper triangular part of the array <code dir="ltr">A</code> is overwritten by the upper triangular part of the updated matrix.</p>
<p>Before entry with <code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code>, the leading <code dir="ltr">n</code> by <code dir="ltr">n</code> lower triangular part of the array <code dir="ltr">A</code> must contain the lower triangular part of the symmetric matrix and the strictly upper triangular part of <code dir="ltr">A</code> is not referenced. On exit, the lower triangular part of the array A is overwritten by the lower triangular part of the updated matrix.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t48" headers="r1c1-t48">
<p><code dir="ltr">lda</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t48 r1c2-t48">
<p>Specifies the first dimension of <code dir="ltr">a</code> as declared in the calling (sub) program. <code dir="ltr">lda</code> must be at least</p>
<pre dir="ltr">max( 1, n )
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t48" headers="r1c1-t48">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t48 r1c2-t48">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>&#39;<code dir="ltr">C</code>&#39;: column-major (default)</p>
</li>
<li>
<p>&#39;<code dir="ltr">R</code>&#39;: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71284" class="refsect2"><a id="CIAHBHJB"></a>
<h3 class="refsect2"><a id="sthref19180"></a>BLAS_SYR2 Procedures</h3>
<p>This procedure performs the rank 2 operation</p>
<pre dir="ltr">A := alpha*x*y&#39; + alpha*y*x&#39; + A
</pre>
<p>where <code dir="ltr">alpha</code> is a scalar, <code dir="ltr">x</code> and <code dir="ltr">y</code> are <code dir="ltr">n</code> element vectors, and <code dir="ltr">A</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> symmetric matrix.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19181"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.BLAS_SYR2 (
   uplo   IN      flag,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_DBL,
   x      IN      UTL_NLA_ARRAY_DBL,
   incx   IN      POSITIVEN,
   y      IN      UTL_NLA_ARRAY_DBL,
   incy   IN      POSITIVEN,
   a      IN OUT  UTL_NLA_ARRAY_DBL,
   lda    IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.BLAS_SYR2 (
   uplo   IN      flag,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_FLT,
   x      IN      UTL_NLA_ARRAY_FLT,
   incx   IN      POSITIVEN,
   y      IN      UTL_NLA_ARRAY_FLT,
   incy   IN      POSITIVEN,
   a      IN OUT  UTL_NLA_ARRAY_FLT,
   lda    IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19182"></a>Parameters</p>
<div id="ARPLS71285" class="tblformal">
<p class="titleintable"><a id="sthref19183"></a><a id="sthref19184"></a>Table 259-28 BLAS_SYR2 Procedure Parameters</p>
<table class="cellalignment4330" title="BLAS_SYR2 Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t50">Parameter</th>
<th class="cellalignment4328" id="r1c2-t50">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t50" headers="r1c1-t50">
<p><code dir="ltr">uplo</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t50 r1c2-t50">
<p>Specifies whether the upper or lower triangular part of the array <code dir="ltr">A</code> is to be referenced:</p>
<ul>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code> : Only the upper triangular part of <code dir="ltr">A</code> is to be referenced.</p>
</li>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code> : Only the lower triangular part of <code dir="ltr">A</code> is to be referenced.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t50" headers="r1c1-t50">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t50 r1c2-t50">
<p>Specifies the order of the matrix <code dir="ltr">A</code>. <code dir="ltr">n</code> must be at least zero. &nbsp;</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t50" headers="r1c1-t50">
<p><code dir="ltr">alpha</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t50 r1c2-t50">
<p>Specifies the scalar alpha. &nbsp;</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t50" headers="r1c1-t50">
<p><code dir="ltr">x</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t50 r1c2-t50">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of dimension at least</p>
<pre dir="ltr">( 1 + ( n - 1 )*abs( incx ) )
</pre>
<p>Before entry, the incremented array <code dir="ltr">X</code> must contain the m element vector <code dir="ltr">x</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t50" headers="r1c1-t50">
<p><code dir="ltr">incx</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t50 r1c2-t50">
<p>Specifies the increment for the elements of <code dir="ltr">x</code>. <code dir="ltr">incx</code> must not be zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t50" headers="r1c1-t50">
<p><code dir="ltr">y</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t50 r1c2-t50">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of dimension at least</p>
<pre dir="ltr">( 1 + ( n - 1 )*abs( incy ) )
</pre>
<p>Before entry, the incremented array <code dir="ltr">Y</code> must contain the m element vector <code dir="ltr">y</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t50" headers="r1c1-t50">
<p><code dir="ltr">incy</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t50 r1c2-t50">
<p>Specifies the increment for the elements of <code dir="ltr">y</code>. <code dir="ltr">incy</code> must not be zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t50" headers="r1c1-t50">
<p><code dir="ltr">a</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t50 r1c2-t50">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of <code dir="ltr">DIMENSION</code> <code dir="ltr">(lda, n)</code></p>
<p>With <code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>, the leading <code dir="ltr">n</code> by <code dir="ltr">n</code> upper triangular part of the array <code dir="ltr">A</code> must contain the upper triangular part of the symmetric matrix and the strictly lower triangular part of <code dir="ltr">A</code> is not referenced. On exit, the upper triangular part of the array <code dir="ltr">A</code> is overwritten by the upper triangular part of the updated matrix.</p>
<p>With <code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code>, the leading <code dir="ltr">n</code> by <code dir="ltr">n</code> lower triangular part of the array <code dir="ltr">A</code> must contain the lower triangular part of the symmetric matrix and the strictly upper triangular part of <code dir="ltr">A</code> is not referenced. On exit, the lower triangular part of the array A is overwritten by the lower triangular part of the updated matrix.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t50" headers="r1c1-t50">
<p><code dir="ltr">lda</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t50 r1c2-t50">
<p>Specifies the first dimension of <code dir="ltr">a</code> as declared in the calling (sub) program. <code dir="ltr">lda</code> must be at least</p>
<pre dir="ltr">max( 1, n )
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t50" headers="r1c1-t50">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t50 r1c2-t50">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>&#39;<code dir="ltr">C</code>&#39;: column-major (default)</p>
</li>
<li>
<p>&#39;<code dir="ltr">R</code>&#39;: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71286" class="refsect2"><a id="CIAJFDDD"></a>
<h3 class="refsect2">BLAS_SYR2K Procedures</h3>
<p>This procedure performs one of the symmetric rank2 k operations</p>
<pre dir="ltr">C := alpha*A*B&#39; + alpha*B*A&#39; + beta*C
</pre>
<p>or</p>
<pre dir="ltr">C := alpha*A&#39;*B + alpha*B&#39;*A + beta*C
</pre>
<p>where <code dir="ltr">alpha</code> and <code dir="ltr">beta</code> are scalars, <code dir="ltr">C</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> symmetric matrix and <code dir="ltr">A</code> and <code dir="ltr">B</code> are <code dir="ltr">n</code> by <code dir="ltr">k</code> matrices in the first case and <code dir="ltr">k</code> by <code dir="ltr">n</code> matrices in the second case.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAIJHCF">BLAS Level 3 (Matrix-Matrix Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19185"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.BLAS_SYR2K (
   uplo   IN      flag,
   trans  IN      flag,
   n      IN      POSITIVEN,
   k      IN      POSITIVEN,
   alpha  IN      SCALAR_DOUBLE,
   a      IN      UTL_NLA_ARRAY_DBL,
   lda    IN      POSITIVEN,
   b      IN      UTL_NLA_ARRAY_DBL,
   ldb    IN      POSITIVEN,
   beta   IN      SCALAR_DOUBLE,
   c      IN OUT  UTL_NLA_ARRAY_DBL,
   ldc    IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.BLAS_SYR2K (
   uplo   IN      flag,
   trans  IN      flag,
   n      IN      POSITIVEN,
   k      IN      POSITIVEN,
   alpha  IN      SCALAR_FLOAT,
   a      IN      UTL_NLA_ARRAY_FLT,
   lda    IN      POSITIVEN,
   b      IN OUT  UTL_NLA_ARRAY_FLT,
   ldb    IN      POSITIVEN,
   beta   IN      SCALAR_FLOAT,
   c      IN OUT  UTL_NLA_ARRAY_FLT,
   ldc    IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19186"></a>Parameters</p>
<div id="ARPLS71287" class="tblformal">
<p class="titleintable"><a id="sthref19187"></a><a id="sthref19188"></a>Table 259-29 BLAS_SYR2K Procedure Parameters</p>
<table class="cellalignment4330" title="BLAS_SYR2K Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t52">Parameter</th>
<th class="cellalignment4328" id="r1c2-t52">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t52" headers="r1c1-t52">
<p><code dir="ltr">uplo</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t52 r1c2-t52">
<p>Specifies whether the upper or lower triangular part of the array <code dir="ltr">C</code> is to be referenced:</p>
<ul>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code> : Only the upper triangular part of <code dir="ltr">C</code> is to be referenced.</p>
</li>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code> : Only the lower triangular part of <code dir="ltr">C</code> is to be referenced.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t52" headers="r1c1-t52">
<p><code dir="ltr">trans</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t52 r1c2-t52">
<p>Specifies the operations to be performed:</p>
<ul>
<li>
<p><code dir="ltr">trans</code> = <code dir="ltr">&#39;N&#39;</code> or <code dir="ltr">&#39;n&#39;C</code> : <code dir="ltr">C := alpha*A*B&#39; + alpha*B*A&#39; + beta*C</code></p>
</li>
<li>
<p><code dir="ltr">trans</code> = <code dir="ltr">&#39;T&#39;</code> or <code dir="ltr">&#39;t&#39;C</code> : <code dir="ltr">C := alpha*A&#39;*B + alpha*B&#39;*A + beta*C</code></p>
</li>
<li>
<p><code dir="ltr">trans</code> = <code dir="ltr">&#39;C&#39;</code> or <code dir="ltr">&#39;c&#39;C</code> : <code dir="ltr">C := alpha*A&#39;*B + alpha*B&#39;*A + beta*C</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t52" headers="r1c1-t52">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t52 r1c2-t52">
<p>Specifies the order of matrix <code dir="ltr">C</code>. <code dir="ltr">n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t52" headers="r1c1-t52">
<p><code dir="ltr">k</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t52 r1c2-t52">
<p>On entry with <code dir="ltr">trans</code> = <code dir="ltr">&#39;N&#39;</code> or <code dir="ltr">&#39;n&#39;</code>, <code dir="ltr">k</code> specifies the number of columns of the matrices <code dir="ltr">A</code> and <code dir="ltr">B</code>. On entry with <code dir="ltr">trans</code> = <code dir="ltr">&#39;T&#39;</code> or <code dir="ltr">&#39;t&#39;</code> or <code dir="ltr">trans</code> = <code dir="ltr">&#39;C&#39;</code> or <code dir="ltr">&#39;c&#39;</code>, <code dir="ltr">k</code> specifies the number of rows of the matrices <code dir="ltr">A</code> and <code dir="ltr">B</code>. <code dir="ltr">k</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t52" headers="r1c1-t52">
<p><code dir="ltr">alpha</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t52 r1c2-t52">
<p><code dir="ltr">SCALAR_FLOAT</code>/<code dir="ltr">DOUBLE</code>. Specifies the scalar alpha.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t52" headers="r1c1-t52">
<p><code dir="ltr">a</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t52 r1c2-t52">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of <code dir="ltr">DIMENSION</code> <code dir="ltr">(lda,ka)</code> where <code dir="ltr">kb</code> is <code dir="ltr">k</code> when <code dir="ltr">trans</code> = <code dir="ltr">&#39;N&#39;</code> or <code dir="ltr">&#39;n&#39;</code>, and is <code dir="ltr">n</code> otherwise.</p>
<p>Before entry with <code dir="ltr">trans</code> = <code dir="ltr">&#39;N&#39;</code> or <code dir="ltr">&#39;n&#39;</code>, the leading <code dir="ltr">n</code> by<code dir="ltr">k</code> part of the array <code dir="ltr">A</code> must contain the matrix <code dir="ltr">A</code>, otherwise the leading <code dir="ltr">k</code> by <code dir="ltr">n</code> part of the array <code dir="ltr">A</code> must contain the matrix <code dir="ltr">A</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t52" headers="r1c1-t52">
<p><code dir="ltr">lda</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t52 r1c2-t52">
<p>Specifies the first dimension of <code dir="ltr">a</code> as declared in the calling (sub) program. When <code dir="ltr">trans = &#39;N&#39; or &#39;n&#39;</code>, <code dir="ltr">lda</code> must be at least<code dir="ltr">max(1,n)</code>, otherwise <code dir="ltr">lda</code> must be at least <code dir="ltr">max(1,k)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t52" headers="r1c1-t52">
<p><code dir="ltr">b</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t52 r1c2-t52">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of <code dir="ltr">DIMENSION</code> <code dir="ltr">(lda,kb)</code> where <code dir="ltr">kb</code> is <code dir="ltr">k</code> when <code dir="ltr">trans</code> = <code dir="ltr">&#39;N&#39;</code> or <code dir="ltr">&#39;n&#39;</code>, and is <code dir="ltr">n</code> otherwise.</p>
<p>Before entry with <code dir="ltr">trans</code> = <code dir="ltr">&#39;N&#39;</code> or <code dir="ltr">&#39;n&#39;</code>, the leading <code dir="ltr">n</code> by<code dir="ltr">k</code> part of the array <code dir="ltr">B</code> must contain the matrix <code dir="ltr">B</code>, otherwise the leading <code dir="ltr">k</code> by <code dir="ltr">n</code> part of the array <code dir="ltr">B</code> must contain the matrix B.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t52" headers="r1c1-t52">
<p><code dir="ltr">ldb</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t52 r1c2-t52">
<p>Specifies the first dimension of <code dir="ltr">b</code> as declared in the calling (sub) program. When <code dir="ltr">trans = &#39;N&#39; or &#39;n&#39;</code>, <code dir="ltr">ldb</code> must be at least <code dir="ltr">max</code> <code dir="ltr">(1,n)</code>, otherwise <code dir="ltr">ldb</code> must be at least <code dir="ltr">max</code> <code dir="ltr">(1,k)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t52" headers="r1c1-t52">
<p><code dir="ltr">beta</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t52 r1c2-t52">
<p><code dir="ltr">SCALAR_FLOAT</code>/<code dir="ltr">DOUBLE</code>. Specifies the scalar beta.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t52" headers="r1c1-t52">
<p>c</p>
</td>
<td class="cellalignment4329" headers="r12c1-t52 r1c2-t52">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of <code dir="ltr">DIMENSION (ldc,n)</code>.</p>
<p>Before entry with <code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>, the leading <code dir="ltr">n</code> by <code dir="ltr">n</code> upper triangular part of the array <code dir="ltr">C</code> must contain the upper triangular part of the symmetric matrix and the strictly lower triangular part of <code dir="ltr">C</code> is not referenced. On exit, the upper triangular part of the array <code dir="ltr">C</code> is overwritten by the upper triangular part of the updated matrix.</p>
<p>Before entry with <code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code>, the leading n by n lower triangular part of the array <code dir="ltr">C</code> must contain the lower triangular part of the symmetric matrix and the strictly upper triangular part of <code dir="ltr">C</code> is not referenced. On exit, the lower triangular part of the array <code dir="ltr">C</code> is overwritten by the lower triangular part of the updated matrix.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t52" headers="r1c1-t52">
<p><code dir="ltr">ldc</code></p>
</td>
<td class="cellalignment4329" headers="r13c1-t52 r1c2-t52">
<p>Specifies the first dimension of <code dir="ltr">C</code> as declared in the calling (sub) program. <code dir="ltr">ldc</code> must be at least <code dir="ltr">max(1,n)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t52" headers="r1c1-t52">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r14c1-t52 r1c2-t52">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>&#39;<code dir="ltr">C</code>&#39;: column-major (default)</p>
</li>
<li>
<p>&#39;<code dir="ltr">R</code>&#39;: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71288" class="refsect2"><a id="CIABCBAG"></a>
<h3 class="refsect2"><a id="sthref19189"></a>BLAS_SYRK Procedures</h3>
<p>This procedure performs one of the symmetric rank k operations</p>
<pre dir="ltr">C := alpha*A*A&#39; + beta*C
</pre>
<p>or</p>
<pre dir="ltr">C := alpha*A&#39;*A + beta*C
</pre>
<p>where <code dir="ltr">alpha</code> and <code dir="ltr">beta</code> are scalars, <code dir="ltr">C</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> symmetric matrix and<code dir="ltr">A</code> is an <code dir="ltr">n</code> by <code dir="ltr">k</code> matrix in the first case and a <code dir="ltr">k</code> by<code dir="ltr">n</code> matrix in the second case.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAIJHCF">BLAS Level 3 (Matrix-Matrix Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19190"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.BLAS_SYRK (
   uplo   IN      flag,
   trans  IN      flag,
   n      IN      POSITIVEN,
   k      IN      POSITIVEN,
   alpha  IN      SCALAR_DOUBLE,
   a      IN      UTL_NLA_ARRAY_DBL,
   lda    IN      POSITIVEN,
   beta   IN      SCALAR_DOUBLE,
   c      IN OUT  UTL_NLA_ARRAY_DBL,
   ldc    IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.BLAS_SYRK (
   uplo   IN      flag,
   trans  IN      flag,
   n      IN      POSITIVEN,
   k      IN      POSITIVEN,
   alpha  IN      SCALAR_FLOAT,
   a      IN      UTL_NLA_ARRAY_FLT,
   lda    IN      POSITIVEN,
   beta   IN      SCALAR_FLOAT,
   c      IN OUT  UTL_NLA_ARRAY_DBL,
   ldc    IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19191"></a>Parameters</p>
<div id="ARPLS71289" class="tblformal">
<p class="titleintable"><a id="sthref19192"></a><a id="sthref19193"></a>Table 259-30 BLAS_SYRK Procedure Parameters</p>
<table class="cellalignment4330" title="BLAS_SYRK Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t54">Parameter</th>
<th class="cellalignment4328" id="r1c2-t54">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t54" headers="r1c1-t54">
<p><code dir="ltr">uplo</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t54 r1c2-t54">
<p>Specifies whether the upper or lower triangular part of the array <code dir="ltr">C</code> is to be referenced:</p>
<ul>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code> : Only the upper triangular part of <code dir="ltr">C</code> is to be referenced.</p>
</li>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code> : Only the lower triangular part of <code dir="ltr">C</code> is to be referenced.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t54" headers="r1c1-t54">
<p><code dir="ltr">trans</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t54 r1c2-t54">
<p>Specifies the operations to be performed:</p>
<ul>
<li>
<p><code dir="ltr">trans</code> = <code dir="ltr">&#39;N&#39;</code> or <code dir="ltr">&#39;n&#39;</code> : <code dir="ltr">C := alpha*A*A&#39; + beta*C</code></p>
</li>
<li>
<p><code dir="ltr">trans</code> = <code dir="ltr">&#39;T&#39;</code> or <code dir="ltr">&#39;t&#39;</code> : <code dir="ltr">C := alpha*A&#39;*A + beta*C</code></p>
</li>
<li>
<p><code dir="ltr">trans</code> =<code dir="ltr">&#39;C&#39;</code> or <code dir="ltr">&#39;c&#39;</code> : <code dir="ltr">C := alpha*A&#39;*A + beta*C</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t54" headers="r1c1-t54">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t54 r1c2-t54">
<p>Specifies the order of matrix <code dir="ltr">C</code>. <code dir="ltr">n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t54" headers="r1c1-t54">
<p><code dir="ltr">k</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t54 r1c2-t54">
<p>On entry with <code dir="ltr">trans</code> = <code dir="ltr">&#39;N&#39;</code> or <code dir="ltr">&#39;n&#39;</code>, <code dir="ltr">k</code> specifies the number of columns of the matrix <code dir="ltr">A</code>. On entry with <code dir="ltr">trans</code> = <code dir="ltr">&#39;T&#39;</code> or <code dir="ltr">&#39;t&#39;</code> or <code dir="ltr">trans</code> = <code dir="ltr">&#39;C&#39;</code> or <code dir="ltr">&#39;c&#39;</code>, <code dir="ltr">k</code> specifies the number of rows of the matrix <code dir="ltr">A</code>. <code dir="ltr">k</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t54" headers="r1c1-t54">
<p><code dir="ltr">alpha</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t54 r1c2-t54">
<p><code dir="ltr">SCALAR_FLOAT</code>/<code dir="ltr">DOUBLE</code>. Specifies the scalar alpha.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t54" headers="r1c1-t54">
<p><code dir="ltr">a</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t54 r1c2-t54">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of <code dir="ltr">DIMENSION (lda,ka)</code> where <code dir="ltr">ka</code> is k when <code dir="ltr">trans</code> = <code dir="ltr">&#39;N&#39;</code> or <code dir="ltr">&#39;n&#39;</code>, and is <code dir="ltr">n</code> otherwise.</p>
<p>Before entry with <code dir="ltr">trans</code> = <code dir="ltr">&#39;N&#39;</code> or <code dir="ltr">&#39;n&#39;</code>, the leading <code dir="ltr">n</code> by<code dir="ltr">k</code> part of the array <code dir="ltr">A</code> must contain the matrix <code dir="ltr">A</code>, otherwise the leading <code dir="ltr">k</code> by <code dir="ltr">n</code> part of the array <code dir="ltr">A</code> must contain the matrix A.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t54" headers="r1c1-t54">
<p><code dir="ltr">lda</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t54 r1c2-t54">
<p>Specifies the first dimension of <code dir="ltr">a</code> as declared in the calling (sub) program. When <code dir="ltr">trans = &#39;N&#39; or &#39;n&#39;</code>, <code dir="ltr">lda</code> must be at least <code dir="ltr">max(1,n)</code>, otherwise<code dir="ltr">lda</code> must be at least <code dir="ltr">max(1,k)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t54" headers="r1c1-t54">
<p><code dir="ltr">beta</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t54 r1c2-t54">
<p><code dir="ltr">SCALAR_FLOAT</code>/<code dir="ltr">DOUBLE</code>. Specifies the scalar beta.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t54" headers="r1c1-t54">
<p>c</p>
</td>
<td class="cellalignment4329" headers="r10c1-t54 r1c2-t54">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of <code dir="ltr">DIMENSION (ldc,n)</code>.</p>
<p>Before entry with <code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>, the leading <code dir="ltr">n</code> by <code dir="ltr">n</code> upper triangular part of the array <code dir="ltr">C</code> must contain the upper triangular part of the symmetric matrix and the strictly lower triangular part of <code dir="ltr">C</code> is not referenced. On exit, the upper triangular part of the array <code dir="ltr">C</code> is overwritten by the upper triangular part of the updated matrix.</p>
<p>Before entry with <code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code>, the leading n by n lower triangular part of the array <code dir="ltr">C</code> must contain the lower triangular part of the symmetric matrix and the strictly upper triangular part of <code dir="ltr">C</code> is not referenced. On exit, the lower triangular part of the array <code dir="ltr">C</code> is overwritten by the lower triangular part of the updated matrix.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t54" headers="r1c1-t54">
<p><code dir="ltr">ldc</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t54 r1c2-t54">
<p>Specifies the first dimension of <code dir="ltr">C</code> as declared in the calling (sub) program. <code dir="ltr">ldc</code> must be at least <code dir="ltr">max(1,n)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t54" headers="r1c1-t54">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t54 r1c2-t54">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>&#39;<code dir="ltr">C</code>&#39;: column-major (default)</p>
</li>
<li>
<p>&#39;<code dir="ltr">R</code>&#39;: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71290" class="refsect2"><a id="CIAFEEGF"></a>
<h3 class="refsect2"><a id="sthref19194"></a>BLAS_TBMV Procedures</h3>
<p>This procedure performs the matrix-vector operations</p>
<pre dir="ltr">x := A*x
</pre>
<p>or</p>
<pre dir="ltr">x := A&#39;*x
</pre>
<p>where <code dir="ltr">x</code> is an <code dir="ltr">n</code> element vector and <code dir="ltr">A</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> unit, or non-unit, upper or lower triangular band matrix, with <code dir="ltr">(k+1)</code> diagonals.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19195"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.BLAS_TBMV (
   uplo   IN      flag,
   trans  IN      flag,
   diag   IN      flag,
   n      IN      POSITIVEN,
   k      IN      NATURALN,
   a      IN      UTL_NLA_ARRAY_DBL,
   lda    IN      POSITIVEN,
   x      IN OUT  UTL_NLA_ARRAY_DBL,
   incx   IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.BLAS_TBMV (
   uplo   IN      flag,
   trans  IN      flag,
   diag   IN      flag,
   n      IN      POSITIVEN,
   k      IN      NATURALN,
   a      IN      UTL_NLA_ARRAY_FLT,
   lda    IN      POSITIVEN,
   x      IN OUT  UTL_NLA_ARRAY_FLT,
   incx   IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19196"></a>Parameters</p>
<div id="ARPLS71291" class="tblformal">
<p class="titleintable"><a id="sthref19197"></a><a id="sthref19198"></a>Table 259-31 BLAS_TBMV Procedure Parameters</p>
<table class="cellalignment4330" title="BLAS_TBMV Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t56">Parameter</th>
<th class="cellalignment4328" id="r1c2-t56">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t56" headers="r1c1-t56">
<p><code dir="ltr">uplo</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t56 r1c2-t56">
<p>Specifies whether the matrix is an upper or lower triangular matrix:</p>
<ul>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>. <code dir="ltr">A</code> is an upper triangular matrix.</p>
</li>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code>. <code dir="ltr">A</code> is a lower triangular matrix.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t56" headers="r1c1-t56">
<p><code dir="ltr">trans</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t56 r1c2-t56">
<p>Specifies the operation to be performed:</p>
<ul>
<li>
<p><code dir="ltr">trans</code> = <code dir="ltr">&#39;N&#39;</code> or <code dir="ltr">&#39;n&#39;</code><code dir="ltr">x</code> := <code dir="ltr">A</code>*x</p>
</li>
<li>
<p><code dir="ltr">trans</code> = <code dir="ltr">&#39;T&#39;</code> or <code dir="ltr">&#39;t&#39;x := A&#39;*x</code></p>
</li>
<li>
<p><code dir="ltr">trans</code> = <code dir="ltr">&#39;C&#39;</code> or <code dir="ltr">&#39;c&#39;x := A&#39;*x</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t56" headers="r1c1-t56">
<p><code dir="ltr">diag</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t56 r1c2-t56">
<p>Specifies whether or not <code dir="ltr">A</code> is unit triangular:</p>
<ul>
<li>
<p><code dir="ltr">diag</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>. A is assumed to be unit triangular.</p>
</li>
<li>
<p><code dir="ltr">diag</code> = <code dir="ltr">&#39;N&#39;</code> or <code dir="ltr">&#39;n&#39;</code>. <code dir="ltr">A</code> is not assumed to be unit triangular.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t56" headers="r1c1-t56">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t56 r1c2-t56">
<p>Specifies the order of the matrix <code dir="ltr">A</code>. <code dir="ltr">n</code> must be at least zero. &nbsp;</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t56" headers="r1c1-t56">
<p><code dir="ltr">k</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t56 r1c2-t56">
<p>Specifies whether or not <code dir="ltr">A</code> is unit triangular:</p>
<ul>
<li>
<p>with <code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>, <code dir="ltr">K</code> specifies the number of super-diagonals of the matrix <code dir="ltr">A</code>.</p>
</li>
<li>
<p>with <code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code>, <code dir="ltr">K</code> specifies the number of sub-diagonals of the matrix <code dir="ltr">A</code>.</p>
</li>
</ul>
<p>K must satisfy <code dir="ltr">0 .le. k</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t56" headers="r1c1-t56">
<p><code dir="ltr">a</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t56 r1c2-t56">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of <code dir="ltr">DIMENSION</code> ( <code dir="ltr">lda</code>, <code dir="ltr">n</code> ).</p>
<p>Before entry with <code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>, the leading <code dir="ltr">(k+1)</code> by <code dir="ltr">n</code> part of the array <code dir="ltr">A</code> must contain the upper triangular band part of the matrix of coefficients, supplied column by column, with the leading diagonal of the matrix in row<code dir="ltr">(k+1)</code> of the array, the first super-diagonal starting at position 2 in row <code dir="ltr">k</code>, and so on. The top left <code dir="ltr">k</code> by <code dir="ltr">k</code> triangle of the array <code dir="ltr">A</code> is not referenced.</p>
<p>Before entry with <code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code>, the leading <code dir="ltr">(k+1)</code> by <code dir="ltr">n</code> part of the array <code dir="ltr">A</code> must contain the lower triangular band part of the matrix of coefficients, supplied column by column, with the leading diagonal of the matrix in row 1 of the array, the first sub-diagonal starting at position 1 in row 2, and so on. The bottom right <code dir="ltr">k</code> by <code dir="ltr">k</code> triangle of the array <code dir="ltr">A</code> is not referenced.</p>
<p>Note that when <code dir="ltr">diag</code> = &#39;<code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>, the elements of the array <code dir="ltr">A</code> corresponding to the diagonal elements of the matrix are not referenced, but are assumed to be unity.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t56" headers="r1c1-t56">
<p><code dir="ltr">lda</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t56 r1c2-t56">
<p>Specifies the first dimension of <code dir="ltr">a</code> as declared in the calling (sub) program. <code dir="ltr">lda</code> must be at least <code dir="ltr">(k+1)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t56" headers="r1c1-t56">
<p><code dir="ltr">x</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t56 r1c2-t56">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of dimension at least <code dir="ltr">(1+(n-1)*abs(incx))</code>. Before entry, the incremented array <code dir="ltr">X</code> must contain the <code dir="ltr">n</code> element vector <code dir="ltr">x</code>. On exit, <code dir="ltr">X</code> is overwritten with the transformed vector <code dir="ltr">x</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t56" headers="r1c1-t56">
<p><code dir="ltr">incx</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t56 r1c2-t56">
<p>Specifies the increment for the elements of <code dir="ltr">x</code>. Must not be zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t56" headers="r1c1-t56">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t56 r1c2-t56">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>&#39;<code dir="ltr">C</code>&#39;: column-major (default)</p>
</li>
<li>
<p>&#39;<code dir="ltr">R</code>&#39;: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71292" class="refsect2"><a id="CIACICEE"></a>
<h3 class="refsect2"><a id="sthref19199"></a>BLAS_TBSV Procedures</h3>
<p>This procedure solves one of the systems of equations</p>
<pre dir="ltr">A*x = b
</pre>
<p>or</p>
<pre dir="ltr">A&#39;*x = b
</pre>
<p>where <code dir="ltr">b</code> and <code dir="ltr">x</code> are <code dir="ltr">n</code> element vectors and <code dir="ltr">A</code> is an <code dir="ltr">n</code> by n unit, or non-unit, upper or lower triangular band matrix, with <code dir="ltr">(k+1)</code> diagonals.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19200"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.BLAS_TBSV (
   uplo   IN      flag,
   trans  IN      flag,
   diag   IN      flag,
   n      IN      POSITIVEN,
   k      IN      NATURALN,
   a      IN      UTL_NLA_ARRAY_DBL,
   lda    IN      POSITIVEN,
   x      IN OUT  UTL_NLA_ARRAY_DBL,
   incx   IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.BLAS_STBSV (
   uplo   IN      flag,
   trans  IN      flag,
   diag   IN      flag,
   n      IN      POSITIVEN,
   k      IN      NATURALN,
   a      IN      UTL_NLA_ARRAY_FLT,
   lda    IN      POSITIVEN,
   x      IN OUT  UTL_NLA_ARRAY_FLT,
   incx   IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19201"></a>Parameters</p>
<div id="ARPLS71293" class="tblformal">
<p class="titleintable"><a id="sthref19202"></a><a id="sthref19203"></a>Table 259-32 BLAS_TBSV Procedure Parameters</p>
<table class="cellalignment4330" title="BLAS_TBSV Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t58">Parameter</th>
<th class="cellalignment4328" id="r1c2-t58">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t58" headers="r1c1-t58">
<p><code dir="ltr">uplo</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t58 r1c2-t58">
<p>Specifies whether the matrix is an upper or lower triangular matrix:</p>
<ul>
<li>
<p><code dir="ltr">uplo</code> = &#39;<code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>. <code dir="ltr">A</code> is an upper triangular matrix.</p>
</li>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code>. <code dir="ltr">A</code> is a lower triangular matrix.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t58" headers="r1c1-t58">
<p><code dir="ltr">trans</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t58 r1c2-t58">
<p>Specifies the equations to be solved:</p>
<ul>
<li>
<p><code dir="ltr">trans</code> = <code dir="ltr">&#39;N&#39;</code> or <code dir="ltr">&#39;n : &#39;A*x = b</code></p>
</li>
<li>
<p><code dir="ltr">trans</code> = <code dir="ltr">&#39;T&#39;</code> or <code dir="ltr">&#39;t&#39;: A&#39;*x = b</code></p>
</li>
<li>
<p><code dir="ltr">trans</code> = &#39;<code dir="ltr">C&#39;</code> or <code dir="ltr">&#39;c&#39;: A&#39;*x = b</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t58" headers="r1c1-t58">
<p><code dir="ltr">diag</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t58 r1c2-t58">
<p>Specifies whether or not <code dir="ltr">A</code> is unit triangular:</p>
<ul>
<li>
<p><code dir="ltr">diag</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code> : A is assumed to be unit triangular.</p>
</li>
<li>
<p><code dir="ltr">diag</code> = <code dir="ltr">&#39;N&#39;</code> or <code dir="ltr">&#39;n&#39;</code> : <code dir="ltr">A</code> is not assumed to be unit triangular.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t58" headers="r1c1-t58">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t58 r1c2-t58">
<p>Specifies the order of the matrix <code dir="ltr">A</code>. <code dir="ltr">n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t58" headers="r1c1-t58">
<p><code dir="ltr">k</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t58 r1c2-t58">
<p>Specifies whether or not <code dir="ltr">A</code> is unit triangular:</p>
<ul>
<li>
<p>with <code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>, <code dir="ltr">K</code> specifies the number of super-diagonals of the matrix <code dir="ltr">A</code>.</p>
</li>
<li>
<p>with <code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code>, <code dir="ltr">K</code> specifies the number of sub-diagonals of the matrix <code dir="ltr">A</code>.</p>
</li>
</ul>
<p>K must satisfy <code dir="ltr">0 .le. k</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t58" headers="r1c1-t58">
<p><code dir="ltr">a</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t58 r1c2-t58">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of <code dir="ltr">DIMENSION (lda,n)</code>.</p>
<p>Before entry with <code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>, the leading <code dir="ltr">(k+1)</code> by <code dir="ltr">n</code> part of the array <code dir="ltr">A</code> must contain the upper triangular band part of the matrix of coefficients, supplied column by column, with the leading diagonal of the matrix in row <code dir="ltr">(k+1)</code> of the array, the first super-diagonal starting at position 2 in row <code dir="ltr">k</code>, and so on. The top left <code dir="ltr">k</code> by <code dir="ltr">k</code> triangle of the array <code dir="ltr">A</code> is not referenced.</p>
<p>Before entry with <code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code>, the leading <code dir="ltr">(k+1)</code> by <code dir="ltr">n</code> part of the array <code dir="ltr">A</code> must contain the lower triangular band part of the matrix of coefficients, supplied column by column, with the leading diagonal of the matrix in row 1 of the array, the first sub-diagonal starting at position 1 in row 2, and so on. The bottom right <code dir="ltr">k</code> by <code dir="ltr">k</code> triangle of the array <code dir="ltr">A</code> is not referenced.</p>
<p>Note that when <code dir="ltr">diag</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>, the elements of the array <code dir="ltr">A</code> corresponding to the diagonal elements of the matrix are not referenced, but are assumed to be unity.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t58" headers="r1c1-t58">
<p><code dir="ltr">lda</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t58 r1c2-t58">
<p>On entry, <code dir="ltr">lda</code> specifies the first dimension of <code dir="ltr">A</code> as declared in the calling (sub) program. <code dir="ltr">lda</code> must be at least <code dir="ltr">(k+1)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t58" headers="r1c1-t58">
<p><code dir="ltr">x</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t58 r1c2-t58">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of dimension at least</p>
<pre dir="ltr">( 1 + ( n - 1 ) *abs( incx ) )
</pre>
<p>Before entry, the incremented array <code dir="ltr">X</code> must contain the <code dir="ltr">n</code> element right-hand side vector <code dir="ltr">b</code>.</p>
<p>On exit, <code dir="ltr">X</code> is overwritten with the solution vector <code dir="ltr">x</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t58" headers="r1c1-t58">
<p><code dir="ltr">incx</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t58 r1c2-t58">
<p>Specifies the increment for the elements of <code dir="ltr">x</code>. <code dir="ltr">incx</code> must not be zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t58" headers="r1c1-t58">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t58 r1c2-t58">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>&#39;<code dir="ltr">C</code>&#39;: column-major (default)</p>
</li>
<li>
<p>&#39;<code dir="ltr">R</code>&#39;: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19204"></a>Usage Notes</p>
<p>No test for singularity or near-singularity is included in this routine. Such tests must be performed before calling this routine.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71294" class="refsect2"><a id="CIAIFFDD"></a>
<h3 class="refsect2"><a id="sthref19205"></a>BLAS_TPMV Procedures</h3>
<p>This procedure performs the matrix-vector operations</p>
<pre dir="ltr">x := A*x
</pre>
<p>or</p>
<pre dir="ltr">x := A&#39;*x
</pre>
<p>where <code dir="ltr">x</code> is an <code dir="ltr">n</code> element vector and <code dir="ltr">A</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> unit, or non-unit, upper or lower triangular matrix, supplied in packed form.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19206"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.BLAS_TPMV (
   uplo   IN      flag,
   trans  IN      flag,
   diag   IN      flag,
   n      IN      POSITIVEN,
   ap     IN      UTL_NLA_ARRAY_DBL,
   x      IN OUT  UTL_NLA_ARRAY_DBL,
   incx   IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.BLAS_TBMV (
   uplo   IN      flag,
   trans  IN      flag,
   diag   IN      flag,
   n      IN      POSITIVEN,
   ap     IN      UTL_NLA_ARRAY_FLT,
   x      IN OUT  UTL_NLA_ARRAY_FLT,
   incx   IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19207"></a>Parameters</p>
<div id="ARPLS71295" class="tblformal">
<p class="titleintable"><a id="sthref19208"></a><a id="sthref19209"></a>Table 259-33 BLAS_TPMV Procedure Parameters</p>
<table class="cellalignment4330" title="BLAS_TPMV Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t60">Parameter</th>
<th class="cellalignment4328" id="r1c2-t60">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t60" headers="r1c1-t60">
<p><code dir="ltr">uplo</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t60 r1c2-t60">
<p>Specifies whether the matrix is an upper or lower triangular matrix:</p>
<ul>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>. <code dir="ltr">A</code> is an upper triangular matrix.</p>
</li>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code>. <code dir="ltr">A</code> is a lower triangular matrix.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t60" headers="r1c1-t60">
<p><code dir="ltr">trans</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t60 r1c2-t60">
<p>Specifies the operation to e performed:</p>
<ul>
<li>
<p><code dir="ltr">trans</code> = <code dir="ltr">&#39;N&#39;</code> or <code dir="ltr">&#39;n&#39;</code><code dir="ltr">x</code> := <code dir="ltr">A*x</code></p>
</li>
<li>
<p><code dir="ltr">trans</code> = <code dir="ltr">&#39;T&#39;</code> or <code dir="ltr">&#39;t&#39;x := A&#39;*x</code></p>
</li>
<li>
<p><code dir="ltr">trans</code> = <code dir="ltr">&#39;C&#39;</code> or <code dir="ltr">&#39;c&#39;x := A&#39;*x</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t60" headers="r1c1-t60">
<p><code dir="ltr">diag</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t60 r1c2-t60">
<p>Specifies whether or not <code dir="ltr">A</code> is unit triangular:</p>
<ul>
<li>
<p><code dir="ltr">diag</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>. A is assumed to be unit triangular.</p>
</li>
<li>
<p><code dir="ltr">diag</code> = <code dir="ltr">&#39;N&#39;</code> or <code dir="ltr">&#39;n&#39;</code>. <code dir="ltr">A</code> is not assumed to be unit triangular.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t60" headers="r1c1-t60">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t60 r1c2-t60">
<p>Specifies the order of the matrix <code dir="ltr">A</code>. <code dir="ltr">n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t60" headers="r1c1-t60">
<p><code dir="ltr">ap</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t60 r1c2-t60">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of <code dir="ltr">DIMENSION (lda,n)</code>.</p>
<p>Before entry with <code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>, the leading <code dir="ltr">(k+1)</code> by <code dir="ltr">n</code> part of the array <code dir="ltr">A</code> must contain the upper triangular band part of the matrix of coefficients, supplied column by column, with the leading diagonal of the matrix in row <code dir="ltr">(k+1)</code> of the array, the first super-diagonal starting at position 2 in row <code dir="ltr">k</code>, and so on. The top left <code dir="ltr">k</code> by <code dir="ltr">k</code> triangle of the array <code dir="ltr">A</code> is not referenced.</p>
<p>Before entry with <code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code>, the leading <code dir="ltr">(k+1)</code> by <code dir="ltr">n</code> part of the array <code dir="ltr">A</code> must contain the lower triangular band part of the matrix of coefficients, supplied column by column, with the leading diagonal of the matrix in row 1 of the array, the first sub-diagonal starting at position 1 in row 2, and so on. The bottom right <code dir="ltr">k</code> by <code dir="ltr">k</code> triangle of the array <code dir="ltr">A</code> is not referenced.</p>
<p>Note that when <code dir="ltr">diag</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>, the elements of the array <code dir="ltr">A</code> corresponding to the diagonal elements of the matrix are not referenced, but are assumed to be unity.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t60" headers="r1c1-t60">
<p><code dir="ltr">x</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t60 r1c2-t60">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of dimension at least <code dir="ltr">(1+(n-1)*abs(incx))</code>. Before entry, the incremented array <code dir="ltr">X</code> must contain the <code dir="ltr">n</code> element vector <code dir="ltr">x</code>. On exit, <code dir="ltr">X</code> is overwritten with the transformed vector <code dir="ltr">x</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t60" headers="r1c1-t60">
<p><code dir="ltr">incx</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t60 r1c2-t60">
<p>Specifies the increment for the elements of <code dir="ltr">x</code>. Must not be zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t60" headers="r1c1-t60">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t60 r1c2-t60">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>&#39;<code dir="ltr">C</code>&#39;: column-major (default)</p>
</li>
<li>
<p>&#39;<code dir="ltr">R</code>&#39;: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71296" class="refsect2"><a id="CIACJJHC"></a>
<h3 class="refsect2"><a id="sthref19210"></a>BLAS_TPSV Procedures</h3>
<p>This procedure solves one of the systems of equations</p>
<pre dir="ltr">A*x = b
</pre>
<p>or</p>
<pre dir="ltr">A&#39;*x = b
</pre>
<p>where <code dir="ltr">b</code> and <code dir="ltr">x</code> are <code dir="ltr">n</code> element vectors and <code dir="ltr">A</code> is an <code dir="ltr">n</code> by n unit, or non-unit, upper or lower triangular matrix, supplied in packed form.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19211"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.BLAS_TPSV (
   uplo   IN      flag,
   trans  IN      flag,
   diag   IN      flag,
   n      IN      POSITIVEN,
   ap     IN      UTL_NLA_ARRAY_DBL,
   x      IN OUT  UTL_NLA_ARRAY_DBL,
   incx   IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.BLAS_TPSV (
   uplo   IN      flag,
   trans  IN      flag,
   diag   IN      flag,
   n      IN      POSITIVEN,
   ap     IN      UTL_NLA_ARRAY_FLT,
   x      IN OUT  UTL_NLA_ARRAY_FLT,
   incx   IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19212"></a>Parameters</p>
<div id="ARPLS71297" class="tblformal">
<p class="titleintable"><a id="sthref19213"></a><a id="sthref19214"></a>Table 259-34 BLAS_TPSV Procedure Parameters</p>
<table class="cellalignment4330" title="BLAS_TPSV Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t62">Parameter</th>
<th class="cellalignment4328" id="r1c2-t62">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t62" headers="r1c1-t62">
<p><code dir="ltr">uplo</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t62 r1c2-t62">
<p>Specifies whether the matrix is an upper or lower triangular matrix:</p>
<ul>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code> : <code dir="ltr">A</code> is an upper triangular matrix.</p>
</li>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code> : <code dir="ltr">A</code> is a lower triangular matrix.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t62" headers="r1c1-t62">
<p><code dir="ltr">trans</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t62 r1c2-t62">
<p>Specifies the operation to be performed:</p>
<ul>
<li>
<p><code dir="ltr">trans</code> = <code dir="ltr">&#39;N&#39;</code> or <code dir="ltr">&#39;n&#39; : A*x = b</code></p>
</li>
<li>
<p><code dir="ltr">trans</code> = <code dir="ltr">&#39;T&#39;</code> or <code dir="ltr">&#39;t&#39; : A&#39;*x = b</code></p>
</li>
<li>
<p><code dir="ltr">trans</code> = &#39;<code dir="ltr">C&#39;</code> or <code dir="ltr">&#39;c&#39; : A&#39;*x = b</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t62" headers="r1c1-t62">
<p><code dir="ltr">diag</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t62 r1c2-t62">
<p>Specifies whether or not <code dir="ltr">A</code> is unit triangular:</p>
<ul>
<li>
<p><code dir="ltr">diag</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code> : <code dir="ltr">A</code> is assumed to be unit triangular.</p>
</li>
<li>
<p><code dir="ltr">diag</code> = <code dir="ltr">&#39;N&#39;</code> or <code dir="ltr">&#39;n&#39;</code> : <code dir="ltr">&#39;A</code> is not assumed to be unit triangular.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t62" headers="r1c1-t62">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t62 r1c2-t62">
<p>Specifies the order of the matrix <code dir="ltr">A</code>. <code dir="ltr">n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t62" headers="r1c1-t62">
<p><code dir="ltr">ap</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t62 r1c2-t62">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of dimension at least</p>
<pre dir="ltr">((n*(n+1))/2)
</pre>
<p>Before entry with <code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>, the array <code dir="ltr">ap</code> must contain the upper triangular matrix packed sequentially, column by column, so that <code dir="ltr">ap(1)</code> contains <code dir="ltr">a(1,1)</code>, <code dir="ltr">ap(2)</code> and <code dir="ltr">ap(3)</code> contain <code dir="ltr">a(1,2)</code> and <code dir="ltr">a(2,2)</code> respectively, and so on.</p>
<p>Before entry with <code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code>, the array <code dir="ltr">ap</code> must contain the lower triangular matrix packed sequentially, column by column, so that <code dir="ltr">ap(1)</code> contains <code dir="ltr">a(1,1)</code>, <code dir="ltr">ap(2)</code> and <code dir="ltr">ap(3)</code> contain <code dir="ltr">a(2,1)</code> and <code dir="ltr">a(3,1)</code> respectively, and so on.</p>
<p>Note that when <code dir="ltr">diag</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>, the diagonal elements of <code dir="ltr">A</code> are not referenced, but are assumed to be unity.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t62" headers="r1c1-t62">
<p><code dir="ltr">x</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t62 r1c2-t62">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of dimension at least</p>
<pre dir="ltr">( 1 + ( n - 1 ) *abs( incx ) )
</pre>
<p>Before entry, the incremented array <code dir="ltr">X</code> must contain the <code dir="ltr">n</code> element right-hand side vector <code dir="ltr">b</code>. On exit, <code dir="ltr">X</code> is overwritten with the solution vector <code dir="ltr">x</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t62" headers="r1c1-t62">
<p><code dir="ltr">incx</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t62 r1c2-t62">
<p>Specifies the increment for the elements of <code dir="ltr">x</code>. <code dir="ltr">incx</code> must not be zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t62" headers="r1c1-t62">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t62 r1c2-t62">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>&#39;<code dir="ltr">C</code>&#39;: column-major (default)</p>
</li>
<li>
<p>&#39;<code dir="ltr">R</code>&#39;: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19215"></a>Usage Notes</p>
<p>No test for singularity or near-singularity is included in this routine. Such tests must be performed before calling this routine.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71298" class="refsect2"><a id="CIAEJGDI"></a>
<h3 class="refsect2"><a id="sthref19216"></a>BLAS_TRMM Procedures</h3>
<p>This procedure performs one of the matrix-matrix operations</p>
<pre dir="ltr">B := alpha*op( A )*B
</pre>
<p>or</p>
<pre dir="ltr">B := alpha*B*op( A )
</pre>
<p>where <code dir="ltr">alpha</code> is a scalar, <code dir="ltr">B</code> is an <code dir="ltr">m</code> by <code dir="ltr">n</code> matrix, <code dir="ltr">A</code> is a unit, or non-unit, upper or lower triangular matrix and <code dir="ltr">op(A)</code> is one of</p>
<pre dir="ltr">op( A ) = A
</pre>
<p>or</p>
<pre dir="ltr">op( A ) = A&#39;
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAIJHCF">BLAS Level 3 (Matrix-Matrix Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19217"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.BLAS_TRMM (
   side   IN      flag,
   uplo   IN      flag,
   transa IN      flag,
   diag   IN      flag,
   m      IN      POSITIVEN,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_DOUBLE,
   a      IN      UTL_NLA_ARRAY_DBL,
   lda    IN      POSITIVEN,
   b      IN OUT  UTL_NLA_ARRAY_DBL,
   ldb    IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.BLAS_TRMM (
   side   IN      flag,
   uplo   IN      flag,
   transa IN      flag,
   diag   IN      flag,
   m      IN      POSITIVEN,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_FLOAT,
   a      IN      UTL_NLA_ARRAY_FLT,
   lda    IN      POSITIVEN,
   b      IN OUT  UTL_NLA_ARRAY_FLT,
   ldb    IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19218"></a>Parameters</p>
<div id="ARPLS71299" class="tblformal">
<p class="titleintable"><a id="sthref19219"></a><a id="sthref19220"></a>Table 259-35 BLAS_TRMM Procedure Parameters</p>
<table class="cellalignment4330" title="BLAS_TRMM Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t64">Parameter</th>
<th class="cellalignment4328" id="r1c2-t64">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t64" headers="r1c1-t64">
<p><code dir="ltr">side</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t64 r1c2-t64">
<p>Specifies whether the symmetric matrix <code dir="ltr">A</code> appears on the left or right in the operation:</p>
<ul>
<li>
<p><code dir="ltr">side</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code> : <code dir="ltr">B := alpha*op(A)*B</code></p>
</li>
<li>
<p><code dir="ltr">side</code> = <code dir="ltr">&#39;R&#39;</code> or <code dir="ltr">&#39;r&#39;</code> : <code dir="ltr">B := alpha*B*op(A)</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t64" headers="r1c1-t64">
<p><code dir="ltr">uplo</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t64 r1c2-t64">
<p>Specifies whether the upper or lower triangular part of the array <code dir="ltr">A</code> is to be referenced:</p>
<ul>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code> : <code dir="ltr">A</code> is an upper triangular matrix.</p>
</li>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code>&#39; : <code dir="ltr">A</code> is a lower triangular matrix.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t64" headers="r1c1-t64">
<p><code dir="ltr">transa</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t64 r1c2-t64">
<p>Specifies the form of <code dir="ltr">op</code><code dir="ltr">(A)</code> to be used in the matrix multiplication as follows:</p>
<ul>
<li>
<p><code dir="ltr">transa</code> = <code dir="ltr">&#39;N&#39;</code> or <code dir="ltr">&#39;n&#39;</code> : <code dir="ltr">op(A) = A</code></p>
</li>
<li>
<p><code dir="ltr">transa</code> = <code dir="ltr">&#39;T&#39;</code> or <code dir="ltr">&#39;t&#39;</code> : <code dir="ltr">op(A) = A&#39;</code></p>
</li>
<li>
<p><code dir="ltr">transa</code> =<code dir="ltr">&#39;C&#39;</code> or <code dir="ltr">&#39;c&#39;</code> : <code dir="ltr">op(A) = A&#39;</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t64" headers="r1c1-t64">
<p><code dir="ltr">diag</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t64 r1c2-t64">
<p>Specifies whether or not <code dir="ltr">A</code> is unit triangular:</p>
<ul>
<li>
<p><code dir="ltr">diag</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>. <code dir="ltr">A</code> is assumed to be unit triangular.</p>
</li>
<li>
<p><code dir="ltr">diag</code> = <code dir="ltr">&#39;N&#39;</code> or <code dir="ltr">&#39;n&#39;</code>. <code dir="ltr">A</code> is not assumed to be unit triangular.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t64" headers="r1c1-t64">
<p><code dir="ltr">m</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t64 r1c2-t64">
<p>Specifies the number of rows of the <code dir="ltr">B</code>. <code dir="ltr">m</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t64" headers="r1c1-t64">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t64 r1c2-t64">
<p>Specifies the number of columns of <code dir="ltr">B</code>. <code dir="ltr">n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t64" headers="r1c1-t64">
<p><code dir="ltr">alpha</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t64 r1c2-t64">
<p><code dir="ltr">SCALAR_FLOAT</code>/<code dir="ltr">DOUBLE</code>. Specifies the scalar alpha. When <code dir="ltr">alpha</code> is zero then <code dir="ltr">A</code> is not referenced and <code dir="ltr">B</code> need not be set before entry.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t64" headers="r1c1-t64">
<p><code dir="ltr">a</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t64 r1c2-t64">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of <code dir="ltr">DIMENSION (lda,k)</code> where <code dir="ltr">k</code> is m when <code dir="ltr">side</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code>, and is <code dir="ltr">n</code> when <code dir="ltr">side</code> = &#39;<code dir="ltr">&#39;R&#39;</code> or <code dir="ltr">&#39;r&#39;</code>.</p>
<p>Before entry with <code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code> , the leading <code dir="ltr">k</code> by <code dir="ltr">k</code> upper triangular part of the array <code dir="ltr">A</code> must contain the upper triangular matrix, and the strictly lower triangular part of A is not referenced.</p>
<p>Before entry with <code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code>, the leading <code dir="ltr">k</code> by<code dir="ltr">k</code> lower triangular part of the array <code dir="ltr">A</code> must contain the lower triangular matrix and the strictly upper triangular part of <code dir="ltr">A</code> is not referenced.</p>
<p>Note that when <code dir="ltr">diag</code> = &#39;<code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>, the diagonal elements of <code dir="ltr">A</code> are not referenced either, but are assumed to be unity.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t64" headers="r1c1-t64">
<p><code dir="ltr">lda</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t64 r1c2-t64">
<p>Specifies the first dimension of <code dir="ltr">a</code> as declared in the calling (sub) program. When <code dir="ltr">side = &#39;L&#39; or &#39;l&#39;</code>, <code dir="ltr">lda</code> must be at least <code dir="ltr">max(1,m)</code>, otherwise <code dir="ltr">lda</code> must be at least <code dir="ltr">max(1,n)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t64" headers="r1c1-t64">
<p><code dir="ltr">b</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t64 r1c2-t64">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of <code dir="ltr">DIMENSION (ldb,n)</code>.</p>
<p>Before entry, the leading <code dir="ltr">m</code> by <code dir="ltr">n</code> part of the array <code dir="ltr">B</code> must contain the matrix <code dir="ltr">B</code>, and on exit is overwritten by the transformed matrix.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t64" headers="r1c1-t64">
<p><code dir="ltr">ldb</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t64 r1c2-t64">
<p>Specifies the first dimension of <code dir="ltr">b</code> as declared in the calling (sub) program. <code dir="ltr">ldb</code> must be at least <code dir="ltr">max(1,m)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t64" headers="r1c1-t64">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r13c1-t64 r1c2-t64">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>&#39;<code dir="ltr">C</code>&#39;: column-major (default)</p>
</li>
<li>
<p>&#39;<code dir="ltr">R</code>&#39;: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71300" class="refsect2"><a id="CIAHFEBJ"></a>
<h3 class="refsect2"><a id="sthref19221"></a>BLAS_TRMV Procedures</h3>
<p>This procedure performs the matrix-vector operations</p>
<pre dir="ltr">x := A*x
</pre>
<p>or</p>
<pre dir="ltr">x := A&#39;*x
</pre>
<p>where <code dir="ltr">x</code> is an <code dir="ltr">n</code> element vector and <code dir="ltr">A</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> unit, or non-unit, upper or lower triangular matrix.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19222"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.BLAS_TRMV (
   uplo   IN      flag,
   trans  IN      flag,
   diag   IN      flag,
   n      IN      POSITIVEN,
   a      IN      UTL_NLA_ARRAY_DBL,
   lda    IN      POSITIVEN,
   x      IN OUT  UTL_NLA_ARRAY_DBL,
   incx   IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.BLAS_TRMV (
   uplo   IN      flag,
   trans  IN      flag,
   diag   IN      flag,
   n      IN      POSITIVEN,
   a      IN      UTL_NLA_ARRAY_FLT,
   lda    IN      POSITIVEN,
   x      IN OUT  UTL_NLA_ARRAY_FLT,
   incx   IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19223"></a>Parameters</p>
<div id="ARPLS71301" class="tblformal">
<p class="titleintable"><a id="sthref19224"></a><a id="sthref19225"></a>Table 259-36 BLAS_TRMV Procedure Parameters</p>
<table class="cellalignment4330" title="BLAS_TRMV Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t66">Parameter</th>
<th class="cellalignment4328" id="r1c2-t66">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t66" headers="r1c1-t66">
<p><code dir="ltr">uplo</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t66 r1c2-t66">
<p>Specifies whether the matrix is an upper or lower triangular matrix:</p>
<ul>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>. <code dir="ltr">A</code> is an upper triangular matrix.</p>
</li>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code>. <code dir="ltr">A</code> is a lower triangular matrix.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t66" headers="r1c1-t66">
<p><code dir="ltr">trans</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t66 r1c2-t66">
<p>Specifies the operation to be performed:</p>
<ul>
<li>
<p><code dir="ltr">trans</code> = <code dir="ltr">&#39;N&#39;</code> or <code dir="ltr">&#39;n&#39;</code><code dir="ltr">x</code> := <code dir="ltr">A</code>*x</p>
</li>
<li>
<p><code dir="ltr">trans</code>= <code dir="ltr">&#39;T&#39;</code> or <code dir="ltr">&#39;t&#39;x := A&#39;*x</code></p>
</li>
<li>
<p><code dir="ltr">trans</code> = <code dir="ltr">&#39;C&#39;</code> or <code dir="ltr">&#39;c&#39;x := A&#39;*x</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t66" headers="r1c1-t66">
<p><code dir="ltr">diag</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t66 r1c2-t66">
<p>Specifies whether or not <code dir="ltr">A</code> is unit triangular:</p>
<ul>
<li>
<p><code dir="ltr">diag</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>. A is assumed to be unit triangular.</p>
</li>
<li>
<p><code dir="ltr">diag</code> = <code dir="ltr">&#39;N&#39;</code> or <code dir="ltr">&#39;n&#39;</code>. <code dir="ltr">A</code> is not assumed to be unit triangular.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t66" headers="r1c1-t66">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t66 r1c2-t66">
<p>Specifies the order of the matrix <code dir="ltr">A</code>. <code dir="ltr">n</code> must be at least zero. &nbsp;</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t66" headers="r1c1-t66">
<p><code dir="ltr">a</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t66 r1c2-t66">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of <code dir="ltr">DIMENSION</code> (<code dir="ltr">lda</code>, <code dir="ltr">n</code> ).</p>
<p>Before entry with <code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>, the leading <code dir="ltr">n</code> by <code dir="ltr">n</code> upper triangular part of the array <code dir="ltr">A</code> must contain the upper triangular matrix and the strictly lower triangular part of <code dir="ltr">A</code> is not referenced.</p>
<p>Before entry with <code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code>, the leading <code dir="ltr">n</code> by <code dir="ltr">n</code> lower triangular part of the array <code dir="ltr">A</code> must contain the lower triangular matrix and the strictly upper triangular part of <code dir="ltr">A</code> is not referenced.</p>
<p>Note that when <code dir="ltr">diag</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>, the diagonal elements of <code dir="ltr">A</code> are not referenced either, but are assumed to be unity</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t66" headers="r1c1-t66">
<p><code dir="ltr">lda</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t66 r1c2-t66">
<p>Specifies the first dimension of <code dir="ltr">a</code> as declared in the calling (sub) program. <code dir="ltr">lda</code> must be at least <code dir="ltr">max(1,n)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t66" headers="r1c1-t66">
<p><code dir="ltr">x</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t66 r1c2-t66">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of dimension at least<code dir="ltr">(1+(n-1)*as(incx))</code>. Before entry, the incremented array <code dir="ltr">X</code> must contain the <code dir="ltr">n</code> element vector <code dir="ltr">x</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t66" headers="r1c1-t66">
<p><code dir="ltr">incx</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t66 r1c2-t66">
<p>Specifies the increment for the elements of <code dir="ltr">x</code>. Must not be zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t66" headers="r1c1-t66">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t66 r1c2-t66">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>&#39;<code dir="ltr">C</code>&#39;: column-major (default)</p>
</li>
<li>
<p>&#39;<code dir="ltr">R</code>&#39;: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71302" class="refsect2"><a id="CIAHHHFD"></a>
<h3 class="refsect2"><a id="sthref19226"></a>BLAS_TRSM Procedures</h3>
<p>This procedure performs one of the matrix-matrix operations</p>
<pre dir="ltr">op( A )*X = alpha*B
</pre>
<p>or</p>
<pre dir="ltr">X*op( A ) = alpha*B
</pre>
<p>where <code dir="ltr">alpha</code> is a scalar, <code dir="ltr">X</code> and <code dir="ltr">B</code> are <code dir="ltr">m</code> by <code dir="ltr">n</code> matrices, <code dir="ltr">A</code> is a unit, or non-unit, upper or lower triangular matrix and <code dir="ltr">op(A)</code> is one of</p>
<pre dir="ltr">op( A ) = A
</pre>
<p>or</p>
<pre dir="ltr">op( A ) = A&#39;
</pre>
<p>The matrix <code dir="ltr">X</code> is overwritten on <code dir="ltr">B</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAIJHCF">BLAS Level 3 (Matrix-Matrix Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19227"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.BLAS_TRSM (
   side   IN      flag,
   uplo   IN      flag,
   transa IN      flag,
   diag   IN      flag,
   m      IN      POSITIVEN,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_DOUBLE,
   a      IN      UTL_NLA_ARRAY_DBL,
   lda    IN      POSITIVEN,
   b      IN OUT  UTL_NLA_ARRAY_DBL,
   ldb    IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.BLAS_TRSM (
   side   IN      flag,
   uplo   IN      flag,
   transa IN      flag,
   diag   IN      flag,
   m      IN      POSITIVEN,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_FLOAT,
   a      IN      UTL_NLA_ARRAY_FLT,
   lda    IN      POSITIVEN,
   b      IN OUT  UTL_NLA_ARRAY_FLT,
   ldb    IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19228"></a>Parameters</p>
<div id="ARPLS71303" class="tblformal">
<p class="titleintable"><a id="sthref19229"></a><a id="sthref19230"></a>Table 259-37 BLAS_TRSM Procedure Parameters</p>
<table class="cellalignment4330" title="BLAS_TRSM Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t68">Parameter</th>
<th class="cellalignment4328" id="r1c2-t68">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t68" headers="r1c1-t68">
<p><code dir="ltr">side</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t68 r1c2-t68">
<p>Specifies whether the symmetric matrix <code dir="ltr">A</code> appears on the left or right in the operation:</p>
<ul>
<li>
<p><code dir="ltr">side</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code> : <code dir="ltr">op(A)*X = alpha*B</code></p>
</li>
<li>
<p><code dir="ltr">side</code> = &#39;<code dir="ltr">R</code>&#39; or &#39;r&#39; : <code dir="ltr">X*op(A) = alpha*B</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t68" headers="r1c1-t68">
<p><code dir="ltr">uplo</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t68 r1c2-t68">
<p>Specifies whether the upper or lower triangular part of the array <code dir="ltr">A</code> is to be referenced:</p>
<ul>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code> : <code dir="ltr">A</code> is an upper triangular matrix.</p>
</li>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code> : <code dir="ltr">A</code> is a lower triangular matrix.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t68" headers="r1c1-t68">
<p><code dir="ltr">transa</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t68 r1c2-t68">
<p>Specifies the form of <code dir="ltr">op</code><code dir="ltr">(A)</code> to be used in the matrix multiplication as follows:</p>
<ul>
<li>
<p><code dir="ltr">transa</code> = <code dir="ltr">&#39;N&#39;</code> or <code dir="ltr">&#39;n&#39;</code> : <code dir="ltr">op(A) = A</code></p>
</li>
<li>
<p><code dir="ltr">transa</code> =<code dir="ltr">&#39;T&#39;</code> or <code dir="ltr">&#39;t&#39;</code> : <code dir="ltr">op(A) = A&#39;</code></p>
</li>
<li>
<p><code dir="ltr">transa</code> = &#39;<code dir="ltr">C</code>&#39; or &#39;<code dir="ltr">c</code>&#39; : <code dir="ltr">op(A) = A&#39;</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t68" headers="r1c1-t68">
<p><code dir="ltr">diag</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t68 r1c2-t68">
<p>Specifies whether or not <code dir="ltr">A</code> is unit triangular:</p>
<ul>
<li>
<p><code dir="ltr">diag</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>. <code dir="ltr">A</code> is assumed to be unit triangular.</p>
</li>
<li>
<p><code dir="ltr">diag</code> = <code dir="ltr">&#39;N&#39;</code> or <code dir="ltr">&#39;n&#39;</code>. <code dir="ltr">A</code> is not assumed to be unit triangular.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t68" headers="r1c1-t68">
<p><code dir="ltr">m</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t68 r1c2-t68">
<p>Specifies the number of rows of the <code dir="ltr">B</code>. <code dir="ltr">m</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t68" headers="r1c1-t68">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t68 r1c2-t68">
<p>Specifies the number of columns of <code dir="ltr">B</code>. <code dir="ltr">n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t68" headers="r1c1-t68">
<p><code dir="ltr">alpha</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t68 r1c2-t68">
<p><code dir="ltr">SCALAR_FLOAT</code>/<code dir="ltr">DOUBLE</code>. Specifies the scalar alpha. When <code dir="ltr">alpha</code> is zero then <code dir="ltr">A</code> is not referenced and <code dir="ltr">B</code> need not be set before entry.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t68" headers="r1c1-t68">
<p><code dir="ltr">a</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t68 r1c2-t68">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of <code dir="ltr">DIMENSION</code> (lda, <code dir="ltr">k</code>) where <code dir="ltr">k</code> is <code dir="ltr">m</code> when <code dir="ltr">side</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code>, and is <code dir="ltr">n</code> when <code dir="ltr">side</code> = &#39;<code dir="ltr">R</code>&#39; or <code dir="ltr">&#39;r&#39;</code>.</p>
<p>Before entry with <code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>, the leading <code dir="ltr">k</code> by <code dir="ltr">k</code> upper triangular part of the array <code dir="ltr">A</code> must contain the upper triangular matrix, and the strictly lower triangular part of <code dir="ltr">A</code> is not referenced.</p>
<p>Before entry with <code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code>, the leading <code dir="ltr">k</code> by <code dir="ltr">k</code> lower triangular part of the array <code dir="ltr">A</code> must contain the lower triangular matrix and the strictly upper triangular part of <code dir="ltr">A</code> is not referenced.</p>
<p>Note that when <code dir="ltr">diag</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>, the diagonal elements of <code dir="ltr">A</code> are not referenced either, but are assumed to be unity.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t68" headers="r1c1-t68">
<p><code dir="ltr">lda</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t68 r1c2-t68">
<p>Specifies the first dimension of <code dir="ltr">a</code> as declared in the calling (sub) program. When <code dir="ltr">side = &#39;L&#39; or &#39;l&#39;</code>, <code dir="ltr">lda</code> must be at least <code dir="ltr">max</code>(1, <code dir="ltr">m</code>), otherwise <code dir="ltr">lda</code> must be at least <code dir="ltr">max</code> (1, <code dir="ltr">n</code>).</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t68" headers="r1c1-t68">
<p><code dir="ltr">b</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t68 r1c2-t68">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of <code dir="ltr">DIMENSION</code> (ldb, <code dir="ltr">n</code>).</p>
<p>Before entry, the leading <code dir="ltr">m</code> by <code dir="ltr">n</code> part of the array <code dir="ltr">B</code> must contain the matrix <code dir="ltr">B</code>, and on exit is overwritten by the solution matrix <code dir="ltr">X</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t68" headers="r1c1-t68">
<p><code dir="ltr">ldb</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t68 r1c2-t68">
<p>Specifies the first dimension of <code dir="ltr">b</code> as declared in the calling (sub) program. <code dir="ltr">ldb</code> must be at least <code dir="ltr">max</code>(1, <code dir="ltr">m</code>).</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t68" headers="r1c1-t68">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r13c1-t68 r1c2-t68">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>&#39;<code dir="ltr">C</code>&#39;: column-major (default)</p>
</li>
<li>
<p>&#39;<code dir="ltr">R</code>&#39;: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71304" class="refsect2"><a id="CIABJIEI"></a>
<h3 class="refsect2"><a id="sthref19231"></a>BLAS_TRSV Procedures</h3>
<p>This procedure solves one of the systems of equations</p>
<pre dir="ltr">A*x = b
</pre>
<p>or</p>
<pre dir="ltr">A&#39;*x = b
</pre>
<p>where <code dir="ltr">b</code> and <code dir="ltr">x</code> are <code dir="ltr">n</code> element vectors and <code dir="ltr">A</code> is an n by <code dir="ltr">n</code> unit, or non-unit, upper or lower triangular matrix.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19232"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.BLAS_TRSV (
   uplo   IN      flag,
   trans  IN      flag,
   diag   IN      flag,
   n      IN      POSITIVEN,
   a      IN      UTL_NLA_ARRAY_DBL,
   lda    IN      POSITIVEN,
   x      IN OUT  UTL_NLA_ARRAY_DBL,
   incx   IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.BLAS_TRSV (
   uplo   IN      flag,
   trans  IN      flag,
   diag   IN      flag,
   n      IN      POSITIVEN,
   a      IN      UTL_NLA_ARRAY_FLT,
   lda    IN      POSITIVEN,
   x      IN OUT  UTL_NLA_ARRAY_FLT,
   incx   IN      POSITIVEN,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19233"></a>Parameters</p>
<div id="ARPLS71305" class="tblformal">
<p class="titleintable"><a id="sthref19234"></a><a id="sthref19235"></a>Table 259-38 BLAS_TRSV Procedure Parameters</p>
<table class="cellalignment4330" title="BLAS_TRSV Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t70">Parameter</th>
<th class="cellalignment4328" id="r1c2-t70">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t70" headers="r1c1-t70">
<p><code dir="ltr">uplo</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t70 r1c2-t70">
<p>Specifies whether the matrix is an upper or lower triangular matrix:</p>
<ul>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>. <code dir="ltr">A</code> is an upper triangular matrix.</p>
</li>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code>. <code dir="ltr">A</code> is a lower triangular matrix.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t70" headers="r1c1-t70">
<p><code dir="ltr">trans</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t70 r1c2-t70">
<p>Specifies the operation to be performed:</p>
<ul>
<li>
<p><code dir="ltr">trans</code> = <code dir="ltr">&#39;N&#39;</code> or <code dir="ltr">&#39;n&#39;A*x = b</code></p>
</li>
<li>
<p><code dir="ltr">trans</code> = <code dir="ltr">&#39;T&#39;</code> or <code dir="ltr">&#39;t&#39;A&#39;*x = b</code></p>
</li>
<li>
<p><code dir="ltr">trans</code> = &#39;<code dir="ltr">C&#39;</code> or <code dir="ltr">&#39;c&#39;A&#39;*x = b</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t70" headers="r1c1-t70">
<p><code dir="ltr">diag</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t70 r1c2-t70">
<p>Specifies whether or not <code dir="ltr">A</code> is unit triangular:</p>
<ul>
<li>
<p><code dir="ltr">diag</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>. A is assumed to be unit triangular.</p>
</li>
<li>
<p><code dir="ltr">diag</code> = <code dir="ltr">&#39;N&#39;</code> or <code dir="ltr">&#39;n&#39;</code>. <code dir="ltr">A</code> is not assumed to be unit triangular.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t70" headers="r1c1-t70">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t70 r1c2-t70">
<p>Specifies the order of the matrix <code dir="ltr">A</code>. <code dir="ltr">n</code> must be at least zero. &nbsp;</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t70" headers="r1c1-t70">
<p><code dir="ltr">a</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t70 r1c2-t70">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of <code dir="ltr">DIMENSION</code> (<code dir="ltr">lda</code>, <code dir="ltr">n</code>).</p>
<p>Before entry with <code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>, the leading <code dir="ltr">n</code> by <code dir="ltr">n</code> upper triangular part of the array <code dir="ltr">A</code> must contain the upper triangular matrix and the strictly lower triangular part of <code dir="ltr">A</code> is not referenced.</p>
<p>Before entry with <code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> or <code dir="ltr">&#39;l&#39;</code>, the leading <code dir="ltr">n</code> by <code dir="ltr">n</code> lower triangular part of the array <code dir="ltr">A</code> must contain the lower triangular matrix and the strictly upper triangular part of <code dir="ltr">A</code> is not referenced.</p>
<p>Note that when <code dir="ltr">diag</code> = <code dir="ltr">&#39;U&#39;</code> or <code dir="ltr">&#39;u&#39;</code>, the diagonal elements of <code dir="ltr">A</code> are not referenced either, but are assumed to be unity.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t70" headers="r1c1-t70">
<p><code dir="ltr">lda</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t70 r1c2-t70">
<p>Specifies the first dimension of <code dir="ltr">A</code> as declared in the calling (sub) program. <code dir="ltr">lda</code> must be at least <code dir="ltr">max</code>(1, n).</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t70" headers="r1c1-t70">
<p><code dir="ltr">x</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t70 r1c2-t70">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL</code> of dimension at least</p>
<pre dir="ltr">(1 + (n - 1) * abs (incx))
</pre>
<p>Before entry, the incremented array <code dir="ltr">X</code> must contain the <code dir="ltr">n</code> element right-hand side vector <code dir="ltr">b</code>. On exit, <code dir="ltr">X</code> is overwritten with the solution vector <code dir="ltr">x</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t70" headers="r1c1-t70">
<p><code dir="ltr">incx</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t70 r1c2-t70">
<p>Specifies the increment for the elements of <code dir="ltr">x</code>. Must not be zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t70" headers="r1c1-t70">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t70 r1c2-t70">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>&#39;<code dir="ltr">C</code>&#39;: column-major (default)</p>
</li>
<li>
<p>&#39;<code dir="ltr">R</code>&#39;: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19236"></a>Usage Notes</p>
<p>No test for singularity or near-singularity is included in this routine. Such tests must be performed before calling this routine.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71306" class="refsect2"><a id="CIABIIEB"></a>
<h3 class="refsect2"><a id="sthref19237"></a>LAPACK_GBSV Procedures</h3>
<p>This procedure computes the solution to a real system of linear equations</p>
<pre dir="ltr">a * x = b
</pre>
<p>where <code dir="ltr">a</code> is a band matrix of order <code dir="ltr">n</code> with <code dir="ltr">kl</code> sub diagonals and <code dir="ltr">ku</code> superdiagonals, and <code dir="ltr">x</code> and <code dir="ltr">b</code> are <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> matrices.</p>
<p>The <code dir="ltr">LU</code> decomposition with partial pivoting and row interchanges is used to factor <code dir="ltr">A</code> as</p>
<pre dir="ltr">a = L * U
</pre>
<p>where L is a product of permutation and unit lower triangular matrices with kl sub diagonals, and <code dir="ltr">U</code> is upper triangular with <code dir="ltr">kl+ku</code> superdiagonals. The factored form of <code dir="ltr">a</code> is then used to solve the system of equations</p>
<pre dir="ltr">a * x = b
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFBCIJ">LAPACK Driver Routines (Linear Equations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19238"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.LAPACK_GBSV (
   n      IN      POSITIVEN,
   kl     IN      NATURALN,
   ku     IN      NATURALN,
   nrhs   IN      POSITIVEN,
   ab     IN OUT  UTL_NLA_ARRAY_DBL,
   ldab   IN      POSITIVEN,
   ipiv   IN OUT  UTL_NLA_ARRAY_INT,
   b      IN OUT  UTL_NLA_ARRAY_DBL,
   ldb    IN      POSITIVEN,
   info   OUT  INTEGER,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.LAPACK_GBSV (
   n      IN      POSITIVEN,
   kl     IN      NATURALN,
   ku     IN      NATURALN,
   nrhs   IN      POSITIVEN,
   ab     IN OUT  UTL_NLA_ARRAY_FLT,
   ldab   IN      POSITIVEN,
   ipiv   IN OUT  UTL_NLA_ARRAY_INT,
   b      IN OUT  UTL_NLA_ARRAY_FLT,
   ldb    IN      POSITIVEN,
   info   OUT  INTEGER,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19239"></a>Parameters</p>
<div id="ARPLS71307" class="tblformal">
<p class="titleintable"><a id="sthref19240"></a><a id="sthref19241"></a>Table 259-39 LAPACK_GBSV Procedure Parameters</p>
<table class="cellalignment4330" title="LAPACK_GBSV Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t72">Parameter</th>
<th class="cellalignment4328" id="r1c2-t72">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t72" headers="r1c1-t72">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t72 r1c2-t72">
<p>The number of linear equations, equivalent to the order of the matrix<code dir="ltr">a</code> .<code dir="ltr">n &gt;= 0</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t72" headers="r1c1-t72">
<p><code dir="ltr">kl</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t72 r1c2-t72">
<p>The number of sub diagonals within the band of a. <code dir="ltr">kl &gt;= 0.</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t72" headers="r1c1-t72">
<p><code dir="ltr">ku</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t72 r1c2-t72">
<p>The number of superdiagonals within the band of <code dir="ltr">a</code> . <code dir="ltr">ku &gt;= 0.</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t72" headers="r1c1-t72">
<p><code dir="ltr">nrhs</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t72 r1c2-t72">
<p>The number of right-hand sides, which is the number of columns of the matrix <code dir="ltr">b</code>. <code dir="ltr">nrhs &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t72" headers="r1c1-t72">
<p><code dir="ltr">ab</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t72 r1c2-t72">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL, DIMENSION (ldab, n)</code>.</p>
<p>On entry, the matrix a in band storage, in rows <code dir="ltr">kl+1</code> to <code dir="ltr">2*kl+ku+1</code>; rows <code dir="ltr">1</code> to <code dir="ltr">kl</code> of the array need not be set. The <code dir="ltr">j</code>-th column of A is stored in the <code dir="ltr">j</code>-th column of the array <code dir="ltr">ab</code>:</p>
<p><code dir="ltr">ab(kl+ku+1+i-j,j) = a(i,j)</code> for <code dir="ltr">max(1,j-ku)&lt;=i&lt;=min(n,j+kl)</code></p>
<p>On exit, details of the factorization: <code dir="ltr">U</code> is stored as an upper triangular band matrix with <code dir="ltr">kl+ku</code> superdiagonals in rows <code dir="ltr">1</code> to <code dir="ltr">KL+KU+1</code>, and the multipliers used during the factorization are stored in rows:</p>
<p><code dir="ltr">kl+ku+2</code> to <code dir="ltr">2*kl+ku+1</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t72" headers="r1c1-t72">
<p><code dir="ltr">ldab</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t72 r1c2-t72">
<p>The leading dimension of the array ab.</p>
<p><code dir="ltr">ldab &gt;= 2*kl+ku+1</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t72" headers="r1c1-t72">
<p><code dir="ltr">ipiv</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t72 r1c2-t72">
<p><code dir="ltr">INTEGER</code> array, <code dir="ltr">DIMENSION (n)</code>.</p>
<p>The pivot indices that define the permutation matrix <code dir="ltr">P</code>; row <code dir="ltr">i</code>of the matrix was interchanged with row <code dir="ltr">ipiv(i)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t72" headers="r1c1-t72">
<p><code dir="ltr">b</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t72 r1c2-t72">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL, DIMENSION (ldb, nrhs)</code>.</p>
<p>On entry, the <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> matrix of right hand side matrix <code dir="ltr">b</code>.</p>
<p>On exit, if <code dir="ltr">info = 0</code> , the <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> solution matrix <code dir="ltr">X</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t72" headers="r1c1-t72">
<p><code dir="ltr">ldb</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t72 r1c2-t72">
<p>The leading dimension of the array b.</p>
<p><code dir="ltr">ldb &gt;= max(1,n)</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t72" headers="r1c1-t72">
<p><code dir="ltr">info</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t72 r1c2-t72">
<ul>
<li>
<p><code dir="ltr">= 0</code> : successful exit</p>
</li>
<li>
<p><code dir="ltr">&lt; 0</code> : if <code dir="ltr">info = -i</code> , the <code dir="ltr">i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code dir="ltr">&gt; 0</code> : if <code dir="ltr">info = i</code>, <code dir="ltr">U(i,i)</code> is exactly zero. The factorization has been completed, but the factor <code dir="ltr">U</code> is exactly singular, and the solution has not been computed</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t72" headers="r1c1-t72">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t72 r1c2-t72">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>&#39;<code dir="ltr">C</code>&#39;: column-major (default)</p>
</li>
<li>
<p>&#39;<code dir="ltr">R</code>&#39;: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71308" class="refsect2"><a id="CIADGHHA"></a>
<h3 class="refsect2"><a id="sthref19242"></a>LAPACK_GEES Procedures</h3>
<p>This procedure computes for an <code dir="ltr">n</code> by <code dir="ltr">n</code> real nonsymmetric matrix <code dir="ltr">A</code>, the eigenvalues, the real Schur form <code dir="ltr">T</code>, and, optionally, the matrix of Schur vectors <code dir="ltr">Z</code>. This gives the Schur factorization <code dir="ltr">A = Z*T*(Z**T)</code>.</p>
<p>A matrix is in real Schur form if it is upper quasi-triangular with <code dir="ltr">1</code> by <code dir="ltr">1</code> and <code dir="ltr">2</code> by <code dir="ltr">2</code> blocks. <code dir="ltr">2</code> by <code dir="ltr">2</code> blocks will be standardized in the form</p>
<p><code dir="ltr">[ a b ]</code></p>
<p><code dir="ltr">[ c a ]</code></p>
<p>where <code dir="ltr">b*c &lt; 0</code>. The eigenvalues of such a block are <code dir="ltr">a +- sqrt(bc)</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19243"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.LAPACK_GEES (
   jobvs   IN       flag,
   n       IN       POSITIVEN,
   a       IN  OUT  UTL_NLA_ARRAY_DBL,
   lda     IN       POSITIVEN,
   wr      IN OUT   UTL_NLA_ARRAY_DBL,
   wi      IN OUT   UTL_NLA_ARRAY_DBL,
   vs      IN OUT   UTL_NLA_ARRAY_DBL,
   ldvs    IN       POSITIVEN,
   info    OUT      INTEGER,
   pack    IN       flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.LAPACK_GEES (
   jobvs   IN       flag,
   n       IN       POSITIVEN,
   a       IN OUT   UTL_NLA_ARRAY_FLT,
   lda     IN       POSITIVEN,
   wr      IN       OUT UTL_NLA_ARRAY_FLT,
   wi      IN       OUT UTL_NLA_ARRAY_FLT,
   vs      IN OUT   UTL_NLA_ARRAY_FLT,
   ldvs    IN       POSITIVEN,
   info    OUT      integer,
   pack    IN       flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19244"></a>Parameters</p>
<div id="ARPLS71309" class="tblformal">
<p class="titleintable"><a id="sthref19245"></a><a id="sthref19246"></a>Table 259-40 LAPACK_GEES Procedure Parameters</p>
<table class="cellalignment4330" title="LAPACK_GEES Procedure Parameters" summary="This table describes the Parameters of the UTL_NLA.LAPACK_GEES subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t74">Parameter</th>
<th class="cellalignment4328" id="r1c2-t74">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t74" headers="r1c1-t74">
<p><code dir="ltr">jobz</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t74 r1c2-t74">
<ul>
<li>
<p><code dir="ltr">&#39;N&#39;</code>: Schur vectors are not computed.</p>
</li>
<li>
<p><code dir="ltr">&#39;V&#39;</code>: Schur vectors are computed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t74" headers="r1c1-t74">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t74 r1c2-t74">
<p>The order of the matrix <code dir="ltr">a. N &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t74" headers="r1c1-t74">
<p>a</p>
</td>
<td class="cellalignment4329" headers="r4c1-t74 r1c2-t74">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT/DBL</code>, <code dir="ltr">DIMENSION (lda, n)</code>.</p>
<ul>
<li>
<p>On entry, the <code dir="ltr">n</code> by <code dir="ltr">n</code> matrix <code dir="ltr">A</code>.</p>
</li>
<li>
<p>On exit, <code dir="ltr">A</code> has been overwritten by its real Schur form <code dir="ltr">T</code>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t74" headers="r1c1-t74">
<p><code dir="ltr">lda</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t74 r1c2-t74">
<p>The leading dimension of the array <code dir="ltr">a. lda &gt;= max(1,n)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t74" headers="r1c1-t74">
<p><code dir="ltr">wr</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t74 r1c2-t74">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT/DBL</code>, <code dir="ltr">DIMENSION (n)</code>.</p>
<p><code dir="ltr">wr</code> and <code dir="ltr">wi</code> contain the real and imaginary parts respectively of the computed eigenvalues in the same order that they appear on the diagonal of the output Schur form <code dir="ltr">T</code>. Complex conjugate pairs of eigenvalues will appear consecutively with the eigenvalue having the positive imaginary part first.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t74" headers="r1c1-t74">
<p><code dir="ltr">wi</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t74 r1c2-t74">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT/DBL</code>, <code dir="ltr">DIMENSION (ldz, n)</code>.</p>
<p><code dir="ltr">wr</code> and <code dir="ltr">wi</code> contain the real and imaginary parts respectively of the computed eigenvalues in the same order that they appear on the diagonal of the output Schur form <code dir="ltr">T</code>. Complex conjugate pairs of eigenvalues will appear consecutively with the eigenvalue having the positive imaginary part first.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t74" headers="r1c1-t74">
<p><code dir="ltr">vs</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t74 r1c2-t74">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT/DBL</code>, <code dir="ltr">DIMENSION (n)</code>.</p>
<ul>
<li>
<p>If <code dir="ltr">jobvs = &#39;V&#39;</code>, <code dir="ltr">vs</code> contains the orthogonal matrix <code dir="ltr">Z</code> of Schur vectors.</p>
</li>
<li>
<p>If <code dir="ltr">jobvs = &#39;N&#39;</code>, <code dir="ltr">vs</code> is not referenced.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t74" headers="r1c1-t74">
<p><code dir="ltr">ldvs</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t74 r1c2-t74">
<p>The leading dimension of the array <code dir="ltr">vs</code>. <code dir="ltr">VS. ldvs &gt;= 1</code>. If <code dir="ltr">jobvs = &#39;V&#39;</code>, <code dir="ltr">ldvs &gt;= N</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t74" headers="r1c1-t74">
<p><code dir="ltr">info</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t74 r1c2-t74">
<ul>
<li>
<p><code dir="ltr">= 0</code> : successful exit</p>
</li>
<li>
<p><code dir="ltr">&lt; 0</code> : if <code dir="ltr">info = -i</code>, the <code dir="ltr">i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code dir="ltr">&gt; 0</code> : if <code dir="ltr">info = i</code>, and <code dir="ltr">i</code> is <code dir="ltr">&lt;= N</code>: the QR algorithm failed to compute all the eigenvalues. Elements <code dir="ltr">1:ILO-1</code> and <code dir="ltr">i+1:N</code> of <code dir="ltr">wr</code> and <code dir="ltr">wi</code> contain those eigenvalues which have converged. If <code dir="ltr">jobvs = &#39;V&#39;</code>, <code dir="ltr">vs</code> contains the matrix which reduces <code dir="ltr">A</code> to its partially converged Schur form.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t74" headers="r1c1-t74">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t74 r1c2-t74">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p><code dir="ltr">&#39;C&#39;</code>: column-major (default)</p>
</li>
<li>
<p><code dir="ltr">&#39;R&#39;</code>: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71310" class="refsect2"><a id="CIADBIAE"></a>
<h3 class="refsect2"><a id="sthref19247"></a>LAPACK_GELS Procedures</h3>
<p>This procedure solves overdetermined or underdetermined real linear systems involving an <code dir="ltr">m</code> by <code dir="ltr">n</code> matrix <code dir="ltr">A</code>, or its transpose, using a <code dir="ltr">QR</code> or <code dir="ltr">LQ</code> factorization of <code dir="ltr">A</code>. It is assumed that <code dir="ltr">A</code> has full rank.</p>
<p>The following options are provided:</p>
<ol>
<li>
<p>If <code dir="ltr">TRANS = &#39;N&#39;</code> and <code dir="ltr">m &gt;= n</code>: find the least squares solution of an overdetermined system, that is, solve the least squares problem.</p>
<pre dir="ltr">minimize || B - A*X ||
</pre></li>
<li>
<p>If <code dir="ltr">TRANS = &#39;N&#39;</code> and <code dir="ltr">m &lt; n</code>: find the minimum norm solution of an underdetermined system <code dir="ltr">A * X = B</code>.</p>
</li>
<li>
<p>If <code dir="ltr">TRANS = &#39;T&#39;</code> and <code dir="ltr">m &gt;= n</code>: find the minimum norm solution of an undetermined system <code dir="ltr">A**T * X = B</code>.</p>
</li>
<li>
<p>If <code dir="ltr">TRANS = &#39;T&#39;</code> and <code dir="ltr">m &lt; n</code>: find the least squares solution of an overdetermined system, that is, solve the least squares problem <code dir="ltr">minimize || B - A**T * X ||</code>.</p>
</li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19248"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.LAPACK_GELS (
   trans   IN       flag,
   m       IN       POSITIVEN,
   n       IN       POSITIVEN,
   nrhs    IN       POSITIVEN,
   a       IN OUT   UTL_NLA_ARRAY_DBL,
   lda     IN       POSITIVEN,
   b       IN OUT   UTL_NLA_ARRAY_DBL,
   ldb     IN       POSITIVEN,
   info    OUT      INTEGER,
   pack    IN       flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.LAPACK_GELS (
  trans    IN       flag,
  m        IN       POSITIVEN,
  n        IN       POSITIVEN,
  nrhs     IN       POSITIVEN,
  a        IN OUT   UTL_NLA_ARRAY_FLT,
  lda      IN       POSITIVEN,
  b        IN OUT   UTL_NLA_ARRAY_FLT,
  ldb      IN       POSITIVEN,
  info     OUT      INTEGER,
  pack     IN       flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19249"></a>Parameters</p>
<div id="ARPLS71311" class="tblformal">
<p class="titleintable"><a id="sthref19250"></a><a id="sthref19251"></a>Table 259-41 LAPACK_GELS Procedure Parameters</p>
<table class="cellalignment4330" title="LAPACK_GELS Procedure Parameters" summary="This table describes the Parameters of the UTL_NLA.LAPACK_GELS subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t76">Parameter</th>
<th class="cellalignment4328" id="r1c2-t76">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t76" headers="r1c1-t76">
<p><code dir="ltr">trans</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t76 r1c2-t76">
<ul>
<li>
<p><code dir="ltr">CHARACTER = &#39;N&#39;</code>: The linear system involves <code dir="ltr">A</code>.</p>
</li>
<li>
<p><code dir="ltr">CHARACTER = &#39;T&#39;</code>: The linear system involves <code dir="ltr">A**T</code> .</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t76" headers="r1c1-t76">
<p><code dir="ltr">m</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t76 r1c2-t76">
<p>The number of rows of the matrix <code dir="ltr">a. M &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t76" headers="r1c1-t76">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t76 r1c2-t76">
<p>The number of columns of the matrix <code dir="ltr">a. N &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t76" headers="r1c1-t76">
<p><code dir="ltr">nrhs</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t76 r1c2-t76">
<p>The number of right-hand sides, which is the number of columns of the matrix <code dir="ltr">b</code>and <code dir="ltr">x.nrhs &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t76" headers="r1c1-t76">
<p><code dir="ltr">a</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t76 r1c2-t76">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL, DIMENSION (lda, n)</code>.</p>
<p>On entry, the matrix <code dir="ltr">b</code> of right hand side vectors, stored columnwise; <code dir="ltr">b</code> is <code dir="ltr">m</code> by <code dir="ltr">nrhs</code> if <code dir="ltr">TRANS = &#39;N&#39;</code>, or <code dir="ltr">n</code> by <code dir="ltr">nrhs</code>if <code dir="ltr">trans = &#39;T&#39;</code>.</p>
<p>On exit, if <code dir="ltr">m &gt;= n</code>, <code dir="ltr">a</code> is overwritten by details of its <code dir="ltr">QR</code> factorization as returned by <code dir="ltr">SGEQRF</code>. If <code dir="ltr">m &lt; n</code>, <code dir="ltr">A</code> is overwritten by details of its <code dir="ltr">LQ</code> factorization as returned by <code dir="ltr">SGELQF</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t76" headers="r1c1-t76">
<p><code dir="ltr">lda</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t76 r1c2-t76">
<p>The leading dimension of the array <code dir="ltr">A</code>. <code dir="ltr">lda &gt;= max(1,m)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t76" headers="r1c1-t76">
<p><code dir="ltr">b</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t76 r1c2-t76">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT/DBL</code>, <code dir="ltr">DIMENSION (ldb, nrhs)</code>.</p>
<p>On entry, the matrix <code dir="ltr">b</code> of right hand side vectors, stored columnwise. <code dir="ltr">b</code> is <code dir="ltr">m</code> <code dir="ltr">bynrhs</code> if <code dir="ltr">trans = &#39;n&#39;</code>, or <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> if <code dir="ltr">trans = &#39;T&#39;</code>.</p>
<p>On exit, <code dir="ltr">b</code> is overwritten by the solution vectors, stored columnwise:</p>
<ul>
<li>
<p>If <code dir="ltr">trans = &#39;n&#39;</code> and <code dir="ltr">m &gt;= n</code>, rows 1 to n of <code dir="ltr">b</code> contain the least squares solution vectors; the residual sum of squares for the solution in each column is given by the sum of squares of elements <code dir="ltr">n+1</code> to <code dir="ltr">m</code> in that column.</p>
</li>
<li>
<p>If <code dir="ltr">trans = &#39;n&#39;</code> and <code dir="ltr">m &lt; n</code>, rows 1 to <code dir="ltr">n</code> of <code dir="ltr">b</code> contain the minimum norm solution vectors.</p>
</li>
<li>
<p>If <code dir="ltr">trans = &#39;T&#39;</code> and <code dir="ltr">m &gt;= n</code>, rows 1 to <code dir="ltr">m</code> of <code dir="ltr">b</code> contain the minimum norm solution vectors.</p>
</li>
<li>
<p>If <code dir="ltr">trans = &#39;T&#39;</code> and <code dir="ltr">m &lt; n</code>, rows 1 to <code dir="ltr">m</code> of <code dir="ltr">b</code> contain the least squares solution vectors; the residual sum of squares for the solution in each column is given by the sum of squares of elements <code dir="ltr">m+1</code> to <code dir="ltr">n</code> in that column.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t76" headers="r1c1-t76">
<p><code dir="ltr">ldb</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t76 r1c2-t76">
<p>The leading dimension of the array <code dir="ltr">b</code>.</p>
<p><code dir="ltr">ldb &gt;= max(1,m,n)</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t76" headers="r1c1-t76">
<p><code dir="ltr">info</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t76 r1c2-t76">
<ul>
<li>
<p><code dir="ltr">= 0</code> : successful exit</p>
</li>
<li>
<p><code dir="ltr">&lt; 0</code> : if <code dir="ltr">info = -i</code>, the <code dir="ltr">i</code>-th argument had an illegal value</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t76" headers="r1c1-t76">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t76 r1c2-t76">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p><code dir="ltr">&#39;C&#39;</code>: column-major (default)</p>
</li>
<li>
<p><code dir="ltr">&#39;R&#39;</code>: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71312" class="refsect2"><a id="CIAJBIGH"></a>
<h3 class="refsect2"><a id="sthref19252"></a>LAPACK_GESDD Procedures</h3>
<p>This procedures computes the singular value decomposition (SVD) of a real <code dir="ltr">m</code> by <code dir="ltr">n</code> matrix <code dir="ltr">A</code>, optionally computing the left and right singular vectors. If singular vectors are desired, it uses a divide-and-conquer algorithm that makes mild assumptions about floating point arithmetic.</p>
<p>The SVD is written</p>
<pre dir="ltr">A = U * SIGMA * transpose(V)
</pre>
<p>where SIGMA is an <code dir="ltr">m</code> by <code dir="ltr">n</code> matrix which is zero except for its <code dir="ltr">min(m,n)</code> diagonal elements, <code dir="ltr">U</code> is an<code dir="ltr">m</code> by <code dir="ltr">m</code> orthogonal matrix, and <code dir="ltr">V</code> is an<code dir="ltr">n</code> by <code dir="ltr">n</code> orthogonal matrix. The diagonal elements of SIGMA are the singular values of <code dir="ltr">A</code>, they are real and non-negative, and are returned in descending order. The first <code dir="ltr">min(m,n)</code> columns of <code dir="ltr">U</code> and <code dir="ltr">V</code> are the left and right singular vectors of <code dir="ltr">A</code>.</p>
<p>Note that the routine returns <code dir="ltr">V**T</code>, not <code dir="ltr">V</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19253"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.LAPACK_GESDD (
   jobz   IN       flag,
   m      IN       POSITIVEN,
   n      IN       POSITIVEN,
   a      IN OUT   UTL_NLA_ARRAY_DBL,
   lda    IN       POSITIVEN,
   s      IN OUT   UTL_NLA_ARRAY_DBL,
   u      IN OUT   UTL_NLA_ARRAY_DBL,
   ldu    IN       POSITIVEN,
   vt     IN OUT   UTL_NLA_ARRAY_DBL,
   ldvt   IN       POSITIVEN,
   info   OUT      INTEGER,
   pack   IN       flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.LAPACK_GESDD (
   jobz   IN       flag,
   m      IN       POSITIVEN,
   n      IN       POSITIVEN,
   a      IN OUT   UTL_NLA_ARRAY_FLT,
   lda    IN       POSITIVEN,
   s      IN OUT   UTL_NLA_ARRAY_FLT,
   u      IN OUT   UTL_NLA_ARRAY_FLT,
   ldu    IN       POSITIVEN,
   vt     IN OUT   UTL_NLA_ARRAY_FLT,
   ldvt   IN       POSITIVEN,
   info   OUT      INTEGER,
   pack   IN       flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19254"></a>Parameters</p>
<div id="ARPLS71313" class="tblformal">
<p class="titleintable"><a id="sthref19255"></a><a id="sthref19256"></a>Table 259-42 LAPACK_GESDD Procedure Parameters</p>
<table class="cellalignment4330" title="LAPACK_GESDD Procedure Parameters" summary="This table describes the Parameters of the UTL_NLA.LAPACK_GESDD subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t78">Parameter</th>
<th class="cellalignment4328" id="r1c2-t78">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t78" headers="r1c1-t78">
<p><code dir="ltr">jobz</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t78 r1c2-t78">
<p>Specifies options for computing all or part of the matrix <code dir="ltr">U</code>:</p>
<ul>
<li>
<p><code dir="ltr">&#39;A&#39;</code>: All <code dir="ltr">m</code> columns of <code dir="ltr">u</code> and all <code dir="ltr">n</code> rows of <code dir="ltr">V**T</code> are returned in arrays <code dir="ltr">u</code> and <code dir="ltr">vt</code>.</p>
</li>
<li>
<p><code dir="ltr">&#39;S&#39;</code>: The first <code dir="ltr">min(m,n)</code> columns of <code dir="ltr">u</code> and the first <code dir="ltr">min(m,n)</code> rows of <code dir="ltr">V**T</code> are returned in the arrays <code dir="ltr">u</code> and vt.</p>
</li>
<li>
<p><code dir="ltr">&#39;O&#39;</code>: The first <code dir="ltr">min(m,n)</code> columns of <code dir="ltr">u</code> (the left singular vectors) are overwritten on the array <code dir="ltr">a</code>. <code dir="ltr">jobu</code> and jobvt cannot both be &#39;O</p>
</li>
<li>
<p><code dir="ltr">&#39;N&#39;</code>: No columns of <code dir="ltr">u</code> (no left singular vectors) are computed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t78" headers="r1c1-t78">
<p><code dir="ltr">m</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t78 r1c2-t78">
<p>The order of the matrix <code dir="ltr">a. m &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t78" headers="r1c1-t78">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t78 r1c2-t78">
<p>The order of the matrix <code dir="ltr">a. n &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t78" headers="r1c1-t78">
<p><code dir="ltr">a</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t78 r1c2-t78">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT/DBL</code>, <code dir="ltr">DIMENSION (lda, n)</code>.</p>
<p>On entry, the <code dir="ltr">n</code> by <code dir="ltr">n</code> matrix <code dir="ltr">A</code>.</p>
<p>On exit:</p>
<ul>
<li>
<p>If <code dir="ltr">jobz = &#39;O&#39;</code>, <code dir="ltr">a</code> is overwritten with the first <code dir="ltr">min(m,n)</code> columns of <code dir="ltr">u</code> (the left singular vectors, stored columnwise).</p>
</li>
<li>
<p>If <code dir="ltr">m &gt;= n</code>, <code dir="ltr">a</code> is overwritten with the first <code dir="ltr">m</code> rows of <code dir="ltr">V**T</code> (the right singular vectors, stored rowwise).</p>
</li>
<li>
<p>If <code dir="ltr">jobz .ne. &#39;O&#39;</code>, the contents of <code dir="ltr">a</code> are destroyed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t78" headers="r1c1-t78">
<p><code dir="ltr">lda</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t78 r1c2-t78">
<p>The leading dimension of the array <code dir="ltr">a. lda &gt;= max(1,m)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t78" headers="r1c1-t78">
<p><code dir="ltr">s</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t78 r1c2-t78">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT/DBL</code>, <code dir="ltr">DIMENSION (min(m,n))</code>.</p>
<p>The singular values of <code dir="ltr">a</code>, sorted so that <code dir="ltr">S(i) &gt;= S(i+1)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t78" headers="r1c1-t78">
<p><code dir="ltr">u</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t78 r1c2-t78">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT/DBL</code>. <code dir="ltr">ucol = m</code> if <code dir="ltr">jobz = &#39;A&#39;</code> or <code dir="ltr">jobz = &#39;O&#39;</code> and <code dir="ltr">m &lt; n</code>; <code dir="ltr">ucol = min(m,n)</code> if <code dir="ltr">jobz = &#39;S&#39;</code>.</p>
<ul>
<li>
<p>If <code dir="ltr">jobz = &#39;A&#39;</code> or <code dir="ltr">jobz = &#39;O&#39;</code> and <code dir="ltr">m &lt; n</code>, <code dir="ltr">u</code> contains the <code dir="ltr">m</code> by <code dir="ltr">m</code> orthogonal matrix <code dir="ltr">u</code>.</p>
</li>
<li>
<p>If <code dir="ltr">jobz = &#39;S&#39;</code>, <code dir="ltr">u</code> contains the first <code dir="ltr">min(m,n)</code> columns of u (the left singular vectors, stored columnwise).</p>
</li>
<li>
<p>If <code dir="ltr">jobz = &#39;O&#39;</code> and <code dir="ltr">m &gt;= n</code>, or <code dir="ltr">jobz = &#39;n&#39;</code>, <code dir="ltr">u</code> is not referenced.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t78" headers="r1c1-t78">
<p><code dir="ltr">ldu</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t78 r1c2-t78">
<p>The leading dimension of the array <code dir="ltr">U. ldu &gt;= 1.</code> If <code dir="ltr">jobz = &#39;S&#39;</code> or <code dir="ltr">&#39;A&#39;</code>,or <code dir="ltr">jobz = &#39;O&#39;</code> and <code dir="ltr">m &lt; n</code>, <code dir="ltr">ldu &gt;= m</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t78" headers="r1c1-t78">
<p><code dir="ltr">vt</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t78 r1c2-t78">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT/DBL</code>, <code dir="ltr">DIMENSION (ldvt, n)</code>.</p>
<ul>
<li>
<p>If <code dir="ltr">jobz = &#39;A&#39;</code> or <code dir="ltr">jobz = &#39;O&#39;</code> and <code dir="ltr">m &gt;= n</code>, <code dir="ltr">vt</code> contains the <code dir="ltr">n by n</code> orthogonal matrix <code dir="ltr">V**T</code>.</p>
</li>
<li>
<p>If <code dir="ltr">jobz = &#39;S&#39;,</code> <code dir="ltr">vt</code> contains the first <code dir="ltr">min(m,n)</code> rows of <code dir="ltr">V**T</code> (the right singular vectors, stored rowwise).</p>
</li>
<li>
<p>If <code dir="ltr">jobz = &#39;O&#39;</code> and <code dir="ltr">m &lt; n</code>, or <code dir="ltr">jobz = &#39;N&#39;</code>, <code dir="ltr">vt</code> is not referenced.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t78" headers="r1c1-t78">
<p><code dir="ltr">ldvt</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t78 r1c2-t78">
<p>The leading dimension of the array <code dir="ltr">vt</code>. <code dir="ltr">ldvt &gt;= 1</code>.</p>
<ul>
<li>
<p>If <code dir="ltr">jobz = &#39;A&#39;</code>, or <code dir="ltr">jobz = &#39;O&#39;</code> and <code dir="ltr">m &gt;= n</code>, <code dir="ltr">ldvt &gt;= n</code>.</p>
</li>
<li>
<p>If <code dir="ltr">jobz = &#39;S&#39;</code>, <code dir="ltr">ldvt &gt;= min(m,n)</code>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t78" headers="r1c1-t78">
<p><code dir="ltr">info</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t78 r1c2-t78">
<ul>
<li>
<p><code dir="ltr">= 0</code> : successful exit</p>
</li>
<li>
<p><code dir="ltr">&lt; 0</code> : If <code dir="ltr">info = -i</code>, the <code dir="ltr">i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code dir="ltr">&gt; 0</code> : SBDSDC did not converge, updating process failed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t78" headers="r1c1-t78">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r13c1-t78 r1c2-t78">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p><code dir="ltr">&#39;C&#39;</code>: column-major (default)</p>
</li>
<li>
<p><code dir="ltr">&#39;R&#39;</code>: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71314" class="refsect2"><a id="CIAFDDCG"></a>
<h3 class="refsect2"><a id="sthref19257"></a>LAPACK_GESV Procedures</h3>
<p>This procedure computes the solution to a real system of linear equations</p>
<pre dir="ltr">a * x = b
</pre>
<p>where <code dir="ltr">a</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> matrix and <code dir="ltr">x</code> and <code dir="ltr">b</code> are <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> matrices.</p>
<p>The <code dir="ltr">LU</code> decomposition with partial pivoting and row interchanges is used to factor <code dir="ltr">A</code> as</p>
<pre dir="ltr">a = P * L * U
</pre>
<p>where <code dir="ltr">P</code> is a permutation matrix, <code dir="ltr">L</code> is unit lower triangular, and <code dir="ltr">U</code> is upper triangular. The factored form of <code dir="ltr">a</code> is then used to solve the system of equations</p>
<pre dir="ltr">a * x = b
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFBCIJ">LAPACK Driver Routines (Linear Equations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19258"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.LAPACK_GESV (
   n      IN      POSITIVEN,
   nrhs   IN      POSITIVEN,
   a      IN OUT  UTL_NLA_ARRAY_DBL,
   lda    IN      POSITIVEN,
   ipiv   IN OUT  UTL_NLA_ARRAY_INT,
   b      IN OUT  UTL_NLA_ARRAY_DBL,
   ldb    IN      POSITIVEN,
   info      OUT  INTEGER,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.LAPACK_GESV (
   n      IN      POSITIVEN,
   nrhs   IN      POSITIVEN,
   a      IN OUT  UTL_NLA_ARRAY_FLT,
   lda    IN      POSITIVEN,
   ipiv   IN OUT  UTL_NLA_ARRAY_INT,
   b      IN OUT  UTL_NLA_ARRAY_FLT,
   ldb    IN      POSITIVEN,
   info      OUT  INTEGER,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19259"></a>Parameters</p>
<div id="ARPLS71315" class="tblformal">
<p class="titleintable"><a id="sthref19260"></a><a id="sthref19261"></a>Table 259-43 LAPACK_GESV Procedure Parameters</p>
<table class="cellalignment4330" title="LAPACK_GESV Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t80">Parameter</th>
<th class="cellalignment4328" id="r1c2-t80">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t80" headers="r1c1-t80">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t80 r1c2-t80">
<p>The number of linear equations, equivalent to the order of the matrix <code dir="ltr">a</code>. <code dir="ltr">n &gt;= 0</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t80" headers="r1c1-t80">
<p><code dir="ltr">nrhs</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t80 r1c2-t80">
<p>The number of right-hand sides, which is the number of columns of the matrix <code dir="ltr">b</code>. <code dir="ltr">nrhs &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t80" headers="r1c1-t80">
<p><code dir="ltr">a</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t80 r1c2-t80">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL, DIMENSION (lda, n)</code>.</p>
<p>On entry, the <code dir="ltr">n</code> by <code dir="ltr">n</code> coefficient matrix <code dir="ltr">a</code>.</p>
<p>On exit, the factors <code dir="ltr">L</code> and <code dir="ltr">U</code> from the factorization <code dir="ltr">a = P*L*U</code>; the unit diagonal elements of <code dir="ltr">L</code> are not stored.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t80" headers="r1c1-t80">
<p><code dir="ltr">lda</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t80 r1c2-t80">
<p>The leading dimension of the array a.</p>
<p><code dir="ltr">lda &gt;= max(1,n)</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t80" headers="r1c1-t80">
<p><code dir="ltr">ipiv</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t80 r1c2-t80">
<p><code dir="ltr">INTEGER</code> array, <code dir="ltr">DIMENSION (n)</code>.</p>
<p>The pivot indices that define the permutation matrix <code dir="ltr">P</code>; row <code dir="ltr">i</code>of the matrix was interchanged with row <code dir="ltr">ipiv(i)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t80" headers="r1c1-t80">
<p><code dir="ltr">b</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t80 r1c2-t80">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL, DIMENSION (ldb, nrhs)</code>.</p>
<p>On entry, the <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> matrix of right hand side matrix <code dir="ltr">b</code>.</p>
<p>On exit, if <code dir="ltr">info = 0</code> , the <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> solution matrix <code dir="ltr">X</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t80" headers="r1c1-t80">
<p><code dir="ltr">ldb</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t80 r1c2-t80">
<p>The leading dimension of the array <code dir="ltr">b</code>.</p>
<p><code dir="ltr">ldb &gt;= max(1,n)</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t80" headers="r1c1-t80">
<p><code dir="ltr">info</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t80 r1c2-t80">
<ul>
<li>
<p><code dir="ltr">= 0</code> : successful exit</p>
</li>
<li>
<p><code dir="ltr">&lt; 0</code> : if <code dir="ltr">info = -i</code> , the <code dir="ltr">i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code dir="ltr">&gt; 0</code> : if <code dir="ltr">info = i</code>, <code dir="ltr">U(i,i)</code> is exactly zero. The factorization has been completed, but the factor <code dir="ltr">U</code> is exactly singular, so the solution could not be computed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t80" headers="r1c1-t80">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t80 r1c2-t80">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>&#39;<code dir="ltr">C</code>&#39;: column-major (default)</p>
</li>
<li>
<p>&#39;<code dir="ltr">R</code>&#39;: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71316" class="refsect2"><a id="CIAFBFFI"></a>
<h3 class="refsect2"><a id="sthref19262"></a>LAPACK_GESVD Procedures</h3>
<p>This procedures computes the singular value decomposition (SVD) of a real <code dir="ltr">m</code> by <code dir="ltr">n</code> matrix <code dir="ltr">A</code>, optionally computing the left and/or right singular vectors. The SVD is written</p>
<pre dir="ltr">A = U * SIGMA * transpose(V)
</pre>
<p>where SIGMA is an <code dir="ltr">m</code> by <code dir="ltr">n</code> matrix which is zero except for its <code dir="ltr">min(m,n)</code> diagonal elements, <code dir="ltr">U</code> is an<code dir="ltr">m</code> by <code dir="ltr">m</code> orthogonal matrix, and <code dir="ltr">V</code> is an<code dir="ltr">n</code> by <code dir="ltr">n</code> orthogonal matrix. The diagonal elements of SIGMA are the singular values of <code dir="ltr">A</code>, they are real and non-negative, and are returned in descending order. The first <code dir="ltr">min(m,n)</code> columns of <code dir="ltr">U</code> and <code dir="ltr">V</code> are the left and right singular vectors of <code dir="ltr">A</code>.</p>
<p>Note that the routine returns <code dir="ltr">V**T</code>, not <code dir="ltr">V</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19263"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.LAPACK_GESVD (
   jobu   IN       flag,
   jobvt  IN       flag,
   m      IN       POSITIVEN,
   n      IN       POSITIVEN,
   a      IN OUT   UTL_NLA_ARRAY_DBL,
   lda    IN       POSITIVEN,
   s      IN OUT   UTL_NLA_ARRAY_DBL,
   u      IN OUT   UTL_NLA_ARRAY_DBL,
   ldu    IN       POSITIVEN,
   vt     IN OUT   UTL_NLA_ARRAY_DBL,
   ldvt   IN       POSITIVEN,
   info   OUT      INTEGER,
   pack   IN       flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.LAPACK_GESVD (
   jobu   IN       flag,
   jobvt  IN       flag,
   m      IN       POSITIVEN,
   n      IN       POSITIVEN,
   a      IN OUT   UTL_NLA_ARRAY_FLT,
   lda    IN       POSITIVEN,
   s      IN OUT   UTL_NLA_ARRAY_FLT,
   u      IN OUT   UTL_NLA_ARRAY_FLT,
   ldu    IN       POSITIVEN,
   vt     IN OUT   UTL_NLA_ARRAY_FLT,
   ldvt   IN       POSITIVEN,
   info   OUT      INTEGER,
   pack   IN       flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19264"></a>Parameters</p>
<div id="ARPLS71317" class="tblformal">
<p class="titleintable"><a id="sthref19265"></a><a id="sthref19266"></a>Table 259-44 LAPACK_GESVD Procedure Parameters</p>
<table class="cellalignment4330" title="LAPACK_GESVD Procedure Parameters" summary="This table describes the Parameters of the UTL_NLA.LAPACK_GESVD subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t82">Parameter</th>
<th class="cellalignment4328" id="r1c2-t82">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t82" headers="r1c1-t82">
<p><code dir="ltr">jobu</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t82 r1c2-t82">
<p>Specifies options for computing all or part of the matrix <code dir="ltr">U</code>:</p>
<ul>
<li>
<p><code dir="ltr">&#39;A&#39;</code>: All <code dir="ltr">m</code> columns of <code dir="ltr">U</code> are returned in array <code dir="ltr">U</code>.</p>
</li>
<li>
<p><code dir="ltr">&#39;S&#39;</code>: The first <code dir="ltr">min(m,n)</code> columns of <code dir="ltr">U</code> (the left singular vectors) are returned in the array <code dir="ltr">U</code>.</p>
</li>
<li>
<p><code dir="ltr">&#39;O&#39;</code>: The first <code dir="ltr">min(m,n)</code> columns of <code dir="ltr">U</code> (the left singular vectors) are overwritten on the array <code dir="ltr">a</code>. <code dir="ltr">jobu</code> and jobvt cannot both be <code dir="ltr">&#39;O&#39;</code></p>
</li>
<li>
<p><code dir="ltr">&#39;N&#39;</code>: No columns of <code dir="ltr">U</code> (no left singular vectors) are computed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t82" headers="r1c1-t82">
<p><code dir="ltr">jobvt</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t82 r1c2-t82">
<p>Specifies options for computing all or part of the matrix <code dir="ltr">V**T</code>:</p>
<ul>
<li>
<p><code dir="ltr">&#39;A&#39;</code>: All <code dir="ltr">n</code> rows of <code dir="ltr">V**T</code> are returned in the array <code dir="ltr">vt</code>.</p>
</li>
<li>
<p><code dir="ltr">&#39;S&#39;</code>: The first min(m,n) rows of V**T (the right singular vectors) are returned in the array <code dir="ltr">vt</code>.</p>
</li>
<li>
<p><code dir="ltr">&#39;O&#39;</code>: The first min(m,n) rows of <code dir="ltr">V**T</code> (the right singular vectors) are overwritten on the array <code dir="ltr">a</code>. <code dir="ltr">jobvt</code> and <code dir="ltr">jobu</code> cannot both be &#39;O&#39;.</p>
</li>
<li>
<p><code dir="ltr">&#39;N&#39;</code>: No rows of <code dir="ltr">V**T</code> (no right singular vectors) are computed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t82" headers="r1c1-t82">
<p><code dir="ltr">m</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t82 r1c2-t82">
<p>The order of the matrix <code dir="ltr">a. M &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t82" headers="r1c1-t82">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t82 r1c2-t82">
<p>The order of the matrix <code dir="ltr">a. N &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t82" headers="r1c1-t82">
<p><code dir="ltr">a</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t82 r1c2-t82">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT/DBL</code>, <code dir="ltr">DIMENSION (lda, n)</code>.</p>
<p>On entry, the <code dir="ltr">n</code> by <code dir="ltr">n</code> matrix <code dir="ltr">A</code>.</p>
<p>On exit:</p>
<ul>
<li>
<p>If <code dir="ltr">jobu = &#39;O&#39;</code>, <code dir="ltr">A</code> is overwritten with the first <code dir="ltr">min(m,n)</code> columns of <code dir="ltr">U</code> (the left singular vectors, stored columnwise);</p>
</li>
<li>
<p>If <code dir="ltr">jobvt = &#39;O&#39;</code>, <code dir="ltr">A</code> is overwritten with the first <code dir="ltr">min(m,n)</code> rows of <code dir="ltr">V**T</code> (the right singular vectors, stored rowwise);</p>
</li>
<li>
<p>If <code dir="ltr">jobu.ne.&#39;O&#39;</code> and <code dir="ltr">jobvt.ne.&#39;O&#39;</code>, the contents of <code dir="ltr">A</code> are destroyed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t82" headers="r1c1-t82">
<p><code dir="ltr">lda</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t82 r1c2-t82">
<p>The leading dimension of the array <code dir="ltr">a. lda &gt;= max(1,n)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t82" headers="r1c1-t82">
<p><code dir="ltr">s</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t82 r1c2-t82">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT/DBL</code>, <code dir="ltr">DIMENSION (min(m,n))</code>.</p>
<p>The singular values of <code dir="ltr">A</code>, sorted so that <code dir="ltr">S(i) &gt;= S(i+1)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t82" headers="r1c1-t82">
<p><code dir="ltr">u</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t82 r1c2-t82">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT/DBL</code>, <code dir="ltr">DIMENSION (ldu,ucol).(ldu,m)</code>if <code dir="ltr">jobu = &#39;A&#39;</code> or <code dir="ltr">(ldu,min(m,n))</code> if <code dir="ltr">jobu = &#39;S&#39;</code>.</p>
<ul>
<li>
<p>If <code dir="ltr">jobu = &#39;A&#39;</code>, <code dir="ltr">U</code> contains the <code dir="ltr">m</code> by <code dir="ltr">m</code> orthogonal matrix <code dir="ltr">U</code>.</p>
</li>
<li>
<p>If <code dir="ltr">jobu = &#39;S&#39;</code>, <code dir="ltr">U</code> contains the first <code dir="ltr">min(m,n)</code> columns of <code dir="ltr">U</code> (the left singular vectors, stored columnwise).</p>
</li>
<li>
<p>If <code dir="ltr">jobu = &#39;N&#39;</code> or <code dir="ltr">&#39;O&#39;</code>, <code dir="ltr">U</code> is not referenced.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t82" headers="r1c1-t82">
<p><code dir="ltr">ldu</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t82 r1c2-t82">
<p>The leading dimension of the array <code dir="ltr">U. ldu &gt;= 1.</code> If <code dir="ltr">jobu = &#39;S&#39;</code> or &#39;<code dir="ltr">a&#39;</code>, <code dir="ltr">ldu &gt;= m</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t82" headers="r1c1-t82">
<p><code dir="ltr">vt</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t82 r1c2-t82">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT/DBL</code>, <code dir="ltr">DIMENSION (ldvt, n)</code>.</p>
<ul>
<li>
<p>If <code dir="ltr">jobvt = &#39;A&#39;</code>, <code dir="ltr">vt</code> contains the <code dir="ltr">n</code> by <code dir="ltr">n</code> orthogonal matrix <code dir="ltr">V**T</code>.</p>
</li>
<li>
<p>If <code dir="ltr">jobvt = &#39;S&#39;</code>, <code dir="ltr">vt</code> contains the first min(m,n) rows of <code dir="ltr">V**T</code> (the right singular vectors, stored rowwise).</p>
</li>
<li>
<p>If <code dir="ltr">jobvt = &#39;N&#39;</code> or <code dir="ltr">&#39;O&#39;</code>, <code dir="ltr">vt</code> is not referenced.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t82" headers="r1c1-t82">
<p><code dir="ltr">ldvt</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t82 r1c2-t82">
<p>The leading dimension of the array <code dir="ltr">vt</code>. <code dir="ltr">ldvt &gt;= 1</code>.</p>
<ul>
<li>
<p>If <code dir="ltr">jobvt = &#39;A&#39;</code>, <code dir="ltr">ldvt &gt;= n</code>.</p>
</li>
<li>
<p>If <code dir="ltr">jobvt = &#39;S&#39;</code>, <code dir="ltr">ldvt &gt;= min(m,n)</code>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t82" headers="r1c1-t82">
<p><code dir="ltr">info</code></p>
</td>
<td class="cellalignment4329" headers="r13c1-t82 r1c2-t82">
<ul>
<li>
<p><code dir="ltr">= 0</code> : successful exit</p>
</li>
<li>
<p><code dir="ltr">&lt; 0</code> : If <code dir="ltr">info = -i</code>, the <code dir="ltr">i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code dir="ltr">&gt; 0</code> : If SBDSQR did not converge, <code dir="ltr">info</code> specifies how many superdiagonals of an intermediate bidiagonal form B did not converge to zero.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t82" headers="r1c1-t82">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r14c1-t82 r1c2-t82">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p><code dir="ltr">&#39;C&#39;</code>: column-major (default)</p>
</li>
<li>
<p><code dir="ltr">&#39;R&#39;</code>: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71318" class="refsect2"><a id="CIADEDBA"></a>
<h3 class="refsect2"><a id="sthref19267"></a>LAPACK_GEEV Procedures</h3>
<p>This procedures computes for an <code dir="ltr">n</code> by <code dir="ltr">n</code> real nonsymmetric matrix <code dir="ltr">A</code>, the eigenvalues and, optionally, the left and/or right eigenvectors.</p>
<ul>
<li>
<p>The right eigenvector <code dir="ltr">v(j)</code> of <code dir="ltr">A</code> satisfies <code dir="ltr">A * v(j) = lambda(j) * v(j)</code> where <code dir="ltr">lambda(j)</code> is its eigenvalue.</p>
</li>
<li>
<p>The left eigenvector <code dir="ltr">u(j)</code> of <code dir="ltr">A</code> satisfies <code dir="ltr">u(j)**H * A = lambda(j) * u(j)**H</code> where <code dir="ltr">u(j)**H</code> denotes the conjugate transpose of <code dir="ltr">u(j)</code>.</p>
</li>
</ul>
<p>The computed eigenvectors are normalized to have Euclidean norm equal to <code dir="ltr">1</code> and largest component real.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19268"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.LAPACK_GEEV (
   jobvl   IN      flag,
   jobvr   IN      flag,
   n       IN      POSITIVEN,
   a       IN OUT  UTL_NLA_ARRAY_DBL,
   lda     IN      POSITIVEN,
   wr      IN OUT  UTL_NLA_ARRAY_DBL,
   wi      IN OUT  UTL_NLA_ARRAY_DBL,
   vl      IN OUT  UTL_NLA_ARRAY_DBL,
   ldvl    IN      POSITIVEN,
   vr      IN OUT  UTL_NLA_ARRAY_DBL,
   ldvr    IN      POSITIVEN,
   info    OUT     INTEGER,
   pack    IN      flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.LAPACK_GEEV (
   jobvl   IN      flag,
   jobvr   IN      flag,
   n       IN      POSITIVEN,
   a       IN OUT  UTL_NLA_ARRAY_FLT,
   lda     IN      POSITIVEN,
   wr      IN OUT  UTL_NLA_ARRAY_FLT,
   wi      IN OUT  UTL_NLA_ARRAY_FLT,
   vl      IN OUT  UTL_NLA_ARRAY_FLT,
   ldvl    IN      POSITIVEN,
   vr      IN OUT  UTL_NLA_ARRAY_FLT,
   ldvr    IN      POSITIVEN,
   info    OUT     INTEGER,
   pack    IN      flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19269"></a>Parameters</p>
<div id="ARPLS71319" class="tblformal">
<p class="titleintable"><a id="sthref19270"></a><a id="sthref19271"></a>Table 259-45 LAPACK_GEEV Procedure Parameters</p>
<table class="cellalignment4330" title="LAPACK_GEEV Procedure Parameters" summary="This table describes the Parameters of the UTL_NLA.LAPACK_GEEV subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t84">Parameter</th>
<th class="cellalignment4328" id="r1c2-t84">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t84" headers="r1c1-t84">
<p><code dir="ltr">jobvl</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t84 r1c2-t84">
<ul>
<li>
<p><code dir="ltr">&#39;N&#39;</code>: Left eigenvectors of <code dir="ltr">A</code> are not computed.</p>
</li>
<li>
<p><code dir="ltr">&#39;V&#39;</code>: Left eigenvectors of <code dir="ltr">A</code> are computed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t84" headers="r1c1-t84">
<p><code dir="ltr">jobvr</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t84 r1c2-t84">
<ul>
<li>
<p><code dir="ltr">&#39;N&#39;</code>: Right eigenvectors of <code dir="ltr">A</code> are not computed.</p>
</li>
<li>
<p><code dir="ltr">&#39;V&#39;</code>: Right eigenvectors of <code dir="ltr">A</code> are computed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t84" headers="r1c1-t84">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t84 r1c2-t84">
<p>The order of the matrix <code dir="ltr">a. N &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t84" headers="r1c1-t84">
<p><code dir="ltr">a</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t84 r1c2-t84">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT/DBL</code>, <code dir="ltr">DIMENSION (lda, n)</code>.</p>
<ul>
<li>
<p>On entry, the <code dir="ltr">n</code> by <code dir="ltr">n</code> matrix <code dir="ltr">A</code>.</p>
</li>
<li>
<p>On exit, <code dir="ltr">A</code> has been overwritten.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t84" headers="r1c1-t84">
<p><code dir="ltr">lda</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t84 r1c2-t84">
<p>The leading dimension of the array <code dir="ltr">a. lda &gt;= max(1,n)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t84" headers="r1c1-t84">
<p><code dir="ltr">wr</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t84 r1c2-t84">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT/DBL</code>, <code dir="ltr">DIMENSION (n)</code>.</p>
<p><code dir="ltr">wr</code> and <code dir="ltr">wi</code> contain the real and imaginary parts respectively of the computed eigenvalues. Complex conjugate pairs of eigenvalues will appear consecutively with the eigenvalue having the positive imaginary part first.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t84" headers="r1c1-t84">
<p><code dir="ltr">wi</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t84 r1c2-t84">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT/DBL</code>, <code dir="ltr">DIMENSION (ldz, n)</code>.</p>
<p><code dir="ltr">wr</code> and <code dir="ltr">wi</code> contain the real and imaginary parts respectively of the computed eigenvalues. Complex conjugate pairs of eigenvalues will appear consecutively with the eigenvalue having the positive imaginary part first.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t84" headers="r1c1-t84">
<p><code dir="ltr">vl</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t84 r1c2-t84">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT/DBL</code>, <code dir="ltr">DIMENSION (n)</code>.</p>
<ul>
<li>
<p>If <code dir="ltr">jobvl = &#39;V&#39;</code>, the left eigenvectors <code dir="ltr">u(j)</code> are stored one after another in the columns of <code dir="ltr">vl</code>, in the same order as their eigenvalues.</p>
</li>
<li>
<p>If <code dir="ltr">jobvs = &#39;N&#39;</code>, <code dir="ltr">vl</code> is not referenced.</p>
</li>
<li>
<p>If the <code dir="ltr">j</code>-th eigenvalue is real, then <code dir="ltr">u(j) = VL(:,j)</code>, the <code dir="ltr">j</code>-th column of <code dir="ltr">vl</code>.</p>
</li>
<li>
<p>If the <code dir="ltr">j</code>-th and <code dir="ltr">(j+1)-st</code> eigenvalues form a complex conjugate pair, then <code dir="ltr">u(j) = VL(:,j) + i*VL(:,j+1)</code> and <code dir="ltr">u(j+1) = VL(:,j) - i*VL(:,j+1)</code>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t84" headers="r1c1-t84">
<p><code dir="ltr">ldv1</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t84 r1c2-t84">
<p>The leading dimension of the array <code dir="ltr">vl</code>. <code dir="ltr">ldvl &gt;= 1. If jobvl = &#39;v&#39;</code>, <code dir="ltr">ldvl &gt;= n</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t84" headers="r1c1-t84">
<p><code dir="ltr">vr</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t84 r1c2-t84">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT/DBL</code>, <code dir="ltr">DIMENSION (ldvr, n)</code>.</p>
<ul>
<li>
<p>If <code dir="ltr">jobvr = &#39;V&#39;</code>, the right eigenvectors <code dir="ltr">v(j)</code> are stored one after another in the columns of <code dir="ltr">vr</code>, in the same order as their eigenvalues..</p>
</li>
<li>
<p>If <code dir="ltr">jobvr = &#39;N&#39;</code>, <code dir="ltr">vr</code> is not referenced.</p>
</li>
<li>
<p>If the <code dir="ltr">j</code>-th eigenvalue is real, then <code dir="ltr">v(j) = VR(:,j)</code>, the <code dir="ltr">j</code>-th column of <code dir="ltr">vr</code>.</p>
</li>
<li>
<p>If the <code dir="ltr">j</code>-th and <code dir="ltr">(j+1)-st</code> eigenvalues form a complex conjugate pair, then <code dir="ltr">v(j) = VR(:,j) + i*VR(:,j+1)</code> and <code dir="ltr">v(j+1) = VR(:,j) - i*VR(:,j+1)</code>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t84" headers="r1c1-t84">
<p><code dir="ltr">ldvr</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t84 r1c2-t84">
<p>The leading dimension of the array <code dir="ltr">vr</code>. <code dir="ltr">vr.ldvr &gt;= 1</code>. If <code dir="ltr">jobvr = &#39;V&#39;</code>, <code dir="ltr">ldvr &gt;= N</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t84" headers="r1c1-t84">
<p><code dir="ltr">info</code></p>
</td>
<td class="cellalignment4329" headers="r13c1-t84 r1c2-t84">
<ul>
<li>
<p><code dir="ltr">= 0</code> : successful exit</p>
</li>
<li>
<p><code dir="ltr">&lt; 0</code> : if <code dir="ltr">info = -i</code>, the <code dir="ltr">i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code dir="ltr">&gt; 0</code> : if <code dir="ltr">info = i</code>, and <code dir="ltr">i</code> is <code dir="ltr">&lt;= N</code>: the QR algorithm failed to compute all the eigenvalues, and no eigenvectors have been computed. Elements <code dir="ltr">i+1:N</code> of <code dir="ltr">wr</code> and <code dir="ltr">wi</code> contain eigenvalues which have converged..</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t84" headers="r1c1-t84">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r14c1-t84 r1c2-t84">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p><code dir="ltr">&#39;C&#39;</code>: column-major (default)</p>
</li>
<li>
<p><code dir="ltr">&#39;R&#39;</code>: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71320" class="refsect2"><a id="CIAFDEJI"></a>
<h3 class="refsect2"><a id="sthref19272"></a>LAPACK_GTSV Procedures</h3>
<p>This procedure solves the equation</p>
<pre dir="ltr">a * x = b
</pre>
<p>where <code dir="ltr">a</code> is an <code dir="ltr">n</code> by <code dir="ltr">n</code> tridiagonal matrix, by Gaussian elimination with partial pivoting.</p>
<p>Note that the equation <code dir="ltr">a&#39;*x = b</code> may be solved by interchanging the order of the arguments <code dir="ltr">du</code> and <code dir="ltr">dl</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFBCIJ">LAPACK Driver Routines (Linear Equations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19273"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.LAPACK_GTSV (
   n      IN      POSITIVEN,
   nrhs   IN      POSITIVEN,
   dl     IN OUT  UTL_NLA_ARRAY_DBL,
   d      IN OUT  UTL_NLA_ARRAY_DBL,
   du     IN OUT  UTL_NLA_ARRAY_DBL,
   b      IN OUT  UTL_NLA_ARRAY_DBL,
   ldb    IN      POSITIVEN,
   info      OUT  INTEGER,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.LAPACK_GTSV (
   n      IN      POSITIVEN,
   nrhs   IN      POSITIVEN,
   dl     IN OUT  UTL_NLA_ARRAY_FLT,
   d      IN OUT  UTL_NLA_ARRAY_FLT,
   du     IN OUT  UTL_NLA_ARRAY_FLT,
   b      IN OUT  UTL_NLA_ARRAY_FLT,
   ldb    IN      POSITIVEN,
   info      OUT  INTEGER,
   pack   IN      flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19274"></a>Parameters</p>
<div id="ARPLS71321" class="tblformal">
<p class="titleintable"><a id="sthref19275"></a><a id="sthref19276"></a>Table 259-46 LAPACK_GTSV Procedure Parameters</p>
<table class="cellalignment4330" title="LAPACK_GTSV Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t86">Parameter</th>
<th class="cellalignment4328" id="r1c2-t86">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t86" headers="r1c1-t86">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t86 r1c2-t86">
<p>The order of the matrix <code dir="ltr">a</code> .<code dir="ltr">n &gt;= 0</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t86" headers="r1c1-t86">
<p><code dir="ltr">nrhs</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t86 r1c2-t86">
<p>The number of right-hand sides, which is the number of columns of the matrix <code dir="ltr">b</code>. <code dir="ltr">nrhs &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t86" headers="r1c1-t86">
<p><code dir="ltr">dl</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t86 r1c2-t86">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL, DIMENSION (n-1)</code>.</p>
<p>On entry, <code dir="ltr">dl</code> must contain the <code dir="ltr">(n-1)</code> sub-diagonal elements of <code dir="ltr">a</code>.</p>
<p>On exit, <code dir="ltr">dl</code> is overwritten by the <code dir="ltr">(n-2)</code> elements of the second super-diagonal of the upper triangular matrix <code dir="ltr">U</code> from the <code dir="ltr">LU</code> factorization of <code dir="ltr">a</code>, in <code dir="ltr">dl(1), ..., dl(n-2)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t86" headers="r1c1-t86">
<p><code dir="ltr">d</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t86 r1c2-t86">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL, DIMENSION (n)</code>.</p>
<p>On entry, <code dir="ltr">d</code> must contain the diagonal elements of <code dir="ltr">a</code>.</p>
<p>On exit, <code dir="ltr">d</code> is overwritten by the n diagonal elements of <code dir="ltr">U</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t86" headers="r1c1-t86">
<p><code dir="ltr">du</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t86 r1c2-t86">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL, DIMENSION (n-1)</code>.</p>
<p>On entry, <code dir="ltr">du</code> must contain the <code dir="ltr">(n-1)</code>super-diagonal elements of <code dir="ltr">a</code>.</p>
<p>On exit, <code dir="ltr">du</code> is overwritten by the <code dir="ltr">(n-1)</code> elements of the first super-diagonal of <code dir="ltr">U</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t86" headers="r1c1-t86">
<p><code dir="ltr">b</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t86 r1c2-t86">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL, DIMENSION (LDB, nrhs)</code>.</p>
<p>On entry, the <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> matrix of right hand side matrix <code dir="ltr">b</code>.</p>
<p>On exit, if <code dir="ltr">info = 0</code>, the <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> solution matrix <code dir="ltr">X</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t86" headers="r1c1-t86">
<p><code dir="ltr">ldb</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t86 r1c2-t86">
<p>The leading dimension of the array b.</p>
<p><code dir="ltr">ldb &gt;= max (1, n)</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t86" headers="r1c1-t86">
<p><code dir="ltr">info</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t86 r1c2-t86">
<ul>
<li>
<p><code dir="ltr">= 0</code> : successful exit</p>
</li>
<li>
<p><code dir="ltr">&lt; 0</code> : if <code dir="ltr">info = -i</code> , the <code dir="ltr">i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code dir="ltr">&gt; 0</code> : if <code dir="ltr">info = i</code>, <code dir="ltr">U(i,i)</code> is exactly zero, and the solution has not been computed. The factorization has not been completed unless <code dir="ltr">i = n</code>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t86" headers="r1c1-t86">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t86 r1c2-t86">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>&#39;<code dir="ltr">C</code>&#39;: column-major (default)</p>
</li>
<li>
<p>&#39;<code dir="ltr">R</code>&#39;: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71322" class="refsect2"><a id="CIAJHJBC"></a>
<h3 class="refsect2"><a id="sthref19277"></a>LAPACK_PBSV Procedures</h3>
<p>This procedure computes the solution to a real system of linear equations</p>
<pre dir="ltr">a * x = b
</pre>
<p>where <code dir="ltr">a</code> is an n by n symmetric positive definite band matrix and <code dir="ltr">x</code> and <code dir="ltr">b</code> are <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> matrices.</p>
<p>The Cholesky decomposition is used to factor <code dir="ltr">A</code> as</p>
<p><code dir="ltr">A = U**T*U</code> if <code dir="ltr">UPLO =&#39;U&#39;</code></p>
<p>or</p>
<p><code dir="ltr">A = L * L**T</code> if <code dir="ltr">UPLO = &#39;L&#39;</code></p>
<p>where <code dir="ltr">U</code> is an upper triangular matrix and <code dir="ltr">L</code> is a lower triangular matrix. The factored form of <code dir="ltr">A</code> is then used to solve the system of equations <code dir="ltr">A * X = B</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFBCIJ">LAPACK Driver Routines (Linear Equations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19278"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.LAPACK_PBSV (
uplo       IN      flag,
n          IN      POSITIVEN,
kd         IN      NATURALN,
nrhs       IN      POSITIVEN,
ab         IN OUT  UTL_NLA_ARRAY_DBL,
ldab       IN      POSITIVEN,
b          IN OUT  UTL_NLA_ARRAY_DBL,
ldb        IN      POSITIVEN,
info       OUT     INTEGER,
pack       IN      flag DEFAULT &#39;C&#39;);
    
</pre>
<pre dir="ltr">UTL_NLA.LAPACK_PBSV (
uplo      IN      flag,
n         IN      POSITIVEN,
kd        IN      NATURALN,
nrhs      IN      POSITIVEN,
ab        IN OUT  UTL_NLA_ARRAY_FLT,
ldab      IN      POSITIVEN,
b         IN OUT  UTL_NLA_ARRAY_FLT,
ldb       IN      POSITIVEN,
info      OUT     INTEGER,
pack      IN      flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19279"></a>Parameters</p>
<div id="ARPLS71323" class="tblformal">
<p class="titleintable"><a id="sthref19280"></a><a id="sthref19281"></a>Table 259-47 LAPACK_PBSV Procedure Parameters</p>
<table class="cellalignment4330" title="LAPACK_PBSV Procedure Parameters" summary="This table describes the Parameters of the UTL_NLA.LAPACK_PPSV subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t88">Parameter</th>
<th class="cellalignment4328" id="r1c2-t88">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t88" headers="r1c1-t88">
<p><code dir="ltr">uplo</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t88 r1c2-t88">
<ul>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code>. Upper triangular of <code dir="ltr">A</code> is stored.</p>
</li>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code>. Lower triangular of <code dir="ltr">A</code> is stored.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t88" headers="r1c1-t88">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t88 r1c2-t88">
<p>The number of linear equations, that is, the order of the matrix <code dir="ltr">a</code> .<code dir="ltr">n &gt;= 0</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t88" headers="r1c1-t88">
<p><code dir="ltr">kd</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t88 r1c2-t88">
<p>The number of superdiagonals of the matrix <code dir="ltr">A</code> if <code dir="ltr">uplo = &#39;U&#39;</code>, or the number of subdiagonals if <code dir="ltr">UPLO = &#39;L&#39;. KD &gt;= 0.</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t88" headers="r1c1-t88">
<p><code dir="ltr">nrhs</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t88 r1c2-t88">
<p>The number of right-hand sides, which is the number of columns of the matrix <code dir="ltr">b</code>. <code dir="ltr">nrhs &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t88" headers="r1c1-t88">
<p><code dir="ltr">ab</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t88 r1c2-t88">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL, DIMENSION (ldab, n)</code>.</p>
<p>On entry, the upper or lower triangle of the symmetric band matrix <code dir="ltr">a</code>, stored in the first <code dir="ltr">kd+1</code> rows of the array. The <code dir="ltr">j</code>-th column of <code dir="ltr">a</code> is stored in the <code dir="ltr">j</code>-th column of the array <code dir="ltr">ab</code> is as follows:</p>
<ul>
<li>
<p>if <code dir="ltr">uplo = &#39;U&#39;</code>, <code dir="ltr">AB(KD+1+i-j,j) = A(i,j) for max(1,j-KD)&lt;=i&lt;=j;</code></p>
</li>
<li>
<p><code dir="ltr">if uplo = &#39;L&#39;</code>, <code dir="ltr">AB(1+i-j,j) = A(i,j) for j&lt;=i&lt;=min(N,j+KD)</code></p>
</li>
</ul>
<p>.See below for further details.On exit, if <code dir="ltr">info = 0</code>, the triangular factor <code dir="ltr">U</code> or <code dir="ltr">L</code> from the Cholesky factorization <code dir="ltr">A = U**T*U</code> or <code dir="ltr">A = L*L**T</code> of the bandmatrix <code dir="ltr">A</code>, in the same storage format as <code dir="ltr">a</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t88" headers="r1c1-t88">
<p><code dir="ltr">ldab</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t88 r1c2-t88">
<p>The leading dimension of the array <code dir="ltr">ab</code>.</p>
<p><code dir="ltr">ldb &gt;= kd+1</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t88" headers="r1c1-t88">
<p><code dir="ltr">b</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t88 r1c2-t88">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL, DIMENSION (ldb, nrhs)</code>.</p>
<p>On entry, the <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> matrix of right hand side matrix <code dir="ltr">b</code>.</p>
<p>On exit, if <code dir="ltr">info = 0</code> , the <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> solution matrix <code dir="ltr">X</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t88" headers="r1c1-t88">
<p><code dir="ltr">ldb</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t88 r1c2-t88">
<p>The leading dimension of the array <code dir="ltr">b</code>.</p>
<p><code dir="ltr">ldb &gt;= max(1,n)</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t88" headers="r1c1-t88">
<p><code dir="ltr">info</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t88 r1c2-t88">
<ul>
<li>
<p><code dir="ltr">= 0</code> : successful exit</p>
</li>
<li>
<p><code dir="ltr">&lt; 0</code> : if <code dir="ltr">info = -i</code> , the <code dir="ltr">i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code dir="ltr">&gt; 0</code> : if <code dir="ltr">info = i</code>, the leading minor of order <code dir="ltr">i</code> of <code dir="ltr">a</code> is not positive definite, so the factorization could not be completed, and the solution has not been computed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t88" headers="r1c1-t88">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t88 r1c2-t88">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>&#39;<code dir="ltr">C</code>&#39;: column-major (default)</p>
</li>
<li>
<p>&#39;<code dir="ltr">R</code>&#39;: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71324" class="refsect2"><a id="CIAGDCGG"></a>
<h3 class="refsect2"><a id="sthref19282"></a>LAPACK_POSV Procedures</h3>
<p>This procedure computes the solution to a real system of linear equations</p>
<pre dir="ltr">a * x = b
</pre>
<p>where <code dir="ltr">a</code> is an n by n symmetric positive definite matrix and <code dir="ltr">x</code> and <code dir="ltr">b</code> are <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> matrices.</p>
<p>The Cholesky decomposition is used to factor <code dir="ltr">A</code> as</p>
<p><code dir="ltr">A = U**T* U</code> if <code dir="ltr">uplo = &#39;U&#39;</code></p>
<p>or</p>
<p><code dir="ltr">A = L * L**T</code> if <code dir="ltr">UPLO = &#39;L&#39;</code></p>
<p>where <code dir="ltr">U</code> is an upper triangular matrix and <code dir="ltr">L</code> is a lower triangular matrix. The factored form of <code dir="ltr">A</code> is then used to solve the system of equations <code dir="ltr">A * X = B</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFBCIJ">LAPACK Driver Routines (Linear Equations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19283"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.LAPACK_POSV (
   uplo      IN      flag,
   n         IN      POSITIVEN,
   nrhs      IN      POSITIVEN,
   a         IN OUT  UTL_NLA_ARRAY_DBL,
   lda       IN      POSITIVEN,
   b         IN OUT  UTL_NLA_ARRAY_DBL,
   ldb       IN      POSITIVEN,
   info      OUT     INTEGER,
   pack      IN      flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.LAPACK_POSV (
   uplo      IN      flag,
   n         IN      POSITIVEN,
   nrhs      IN      POSITIVEN,
   a         IN OUT  UTL_NLA_ARRAY_FLT,
   lda       IN      POSITIVEN,
   b         IN OUT  UTL_NLA_ARRAY_FLT,
   ldb       IN      POSITIVEN,
   info      OUT     INTEGER,
   pack      IN      flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19284"></a>Parameters</p>
<div id="ARPLS71325" class="tblformal">
<p class="titleintable"><a id="sthref19285"></a><a id="sthref19286"></a>Table 259-48 LAPACK_POSV Procedure Parameters</p>
<table class="cellalignment4330" title="LAPACK_POSV Procedure Parameters" summary="This table describes the Parameters of the UTL_NLA.LAPACK_POSV subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t90">Parameter</th>
<th class="cellalignment4328" id="r1c2-t90">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t90" headers="r1c1-t90">
<p><code dir="ltr">uplo</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t90 r1c2-t90">
<ul>
<li>
<p><code dir="ltr">uplo</code> = &#39;U&#39;. Upper triangular of <code dir="ltr">A</code> is stored.</p>
</li>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code>. Lower triangular of <code dir="ltr">A</code> is stored.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t90" headers="r1c1-t90">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t90 r1c2-t90">
<p>The number of linear equations, that is, the order of the matrix <code dir="ltr">a</code> .<code dir="ltr">n &gt;= 0</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t90" headers="r1c1-t90">
<p><code dir="ltr">nrhs</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t90 r1c2-t90">
<p>The number of right-hand sides, which is the number of columns of the matrix <code dir="ltr">b</code>. <code dir="ltr">nrhs &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t90" headers="r1c1-t90">
<p><code dir="ltr">a</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t90 r1c2-t90">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL, DIMENSION (lda, n)</code>.</p>
<p>If <code dir="ltr">uplo = &#39;U&#39;</code>, the leading NRHS <code dir="ltr">n</code> by <code dir="ltr">n</code> upper triangular part of <code dir="ltr">a</code> contains the upper NRHS triangular part of the matrix A, and the strictly lower NRHS triangular part of A is not referenced.</p>
<p>If <code dir="ltr">uplo</code> = &#39;<code dir="ltr">&#39;L&#39;</code>, then rhs leading <code dir="ltr">n</code> by <code dir="ltr">n</code> lower triangular part of a contains the lower nrhs triangular part of the matrix a, and the strictly upper nrhs triangular part of a is not referenced.</p>
<p>On exit, if <code dir="ltr">info</code> = 0, the factor <code dir="ltr">U</code> or <code dir="ltr">L</code> from the Cholesky factorization <code dir="ltr">A = U**T*U</code> or <code dir="ltr">A = L*L**T</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t90" headers="r1c1-t90">
<p><code dir="ltr">lda</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t90 r1c2-t90">
<p>The leading dimension of the array a.</p>
<p><code dir="ltr">lda &gt;= max (1, n)</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t90" headers="r1c1-t90">
<p><code dir="ltr">b</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t90 r1c2-t90">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL, DIMENSION (ldb, nrhs)</code>.</p>
<p>On entry, the <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> matrix of right hand side matrix <code dir="ltr">b</code>.</p>
<p>On exit, if <code dir="ltr">info = 0</code> , the <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> solution matrix <code dir="ltr">X</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t90" headers="r1c1-t90">
<p><code dir="ltr">ldb</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t90 r1c2-t90">
<p>The leading dimension of the array b.</p>
<p><code dir="ltr">ldb &gt;= max(1,n)</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t90" headers="r1c1-t90">
<p><code dir="ltr">info</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t90 r1c2-t90">
<ul>
<li>
<p><code dir="ltr">= 0</code> : successful exit</p>
</li>
<li>
<p><code dir="ltr">&lt; 0</code> : if <code dir="ltr">info = -i</code> , the <code dir="ltr">i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code dir="ltr">&gt; 0</code> : if <code dir="ltr">info = i</code>, the leading minor of order i of <code dir="ltr">a</code> is not positive definite, so the factorization could not be completed, and the solution has not been computed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t90" headers="r1c1-t90">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t90 r1c2-t90">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>&#39;<code dir="ltr">C</code>&#39;: column-major (default)</p>
</li>
<li>
<p>&#39;<code dir="ltr">R</code>&#39;: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71326" class="refsect2"><a id="CIAGICJH"></a>
<h3 class="refsect2"><a id="sthref19287"></a>LAPACK_PPSV Procedures</h3>
<p>This procedure computes the solution to a real system of linear equations</p>
<pre dir="ltr">a * x = b
</pre>
<p>where <code dir="ltr">a</code> is an n by n symmetric positive definite matrix stored in packed format and <code dir="ltr">x</code> and <code dir="ltr">b</code> are <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> matrices.</p>
<p>The Cholesky decomposition is used to factor <code dir="ltr">A</code> as</p>
<p><code dir="ltr">A = U**T* U</code> if <code dir="ltr">UPLO = &#39;U&#39;</code></p>
<p>or</p>
<p><code dir="ltr">A = L * L**T</code> if <code dir="ltr">UPLO = &#39;L&#39;</code></p>
<p>where <span class="bold">U</span> is an upper triangular matrix and <code dir="ltr">L</code> is a lower triangular matrix. The factored form of <code dir="ltr">A</code> is then used to solve the system of equations <code dir="ltr">A * X = B</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFBCIJ">LAPACK Driver Routines (Linear Equations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19288"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.LAPACK_PPSV (
   uplo      IN      flag,
   n         IN      POSITIVEN,
   nrhs      IN      POSITIVEN,
   ap        IN OUT  UTL_NLA_ARRAY_DBL,
   b         IN OUT  UTL_NLA_ARRAY_DBL,
   ldb       IN      POSITIVEN,
   info      OUT     INTEGER,
   pack      IN      flag DEFAULT &#39;C&#39;);
    
</pre>
<pre dir="ltr">UTL_NLA.LAPACK_PPSV (
   uplo      IN      flag,
   n         IN      POSITIVEN,
   nrhs      IN      POSITIVEN,
   ap        IN OUT  UTL_NLA_ARRAY_FLT,
   b         IN OUT  UTL_NLA_ARRAY_FLT,
   ldb       IN      POSITIVEN,
   info      OUT     INTEGER,
   pack      IN      flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19289"></a>Parameters</p>
<div id="ARPLS71327" class="tblformal">
<p class="titleintable"><a id="sthref19290"></a><a id="sthref19291"></a>Table 259-49 LAPACK_PPSV Procedure Parameters</p>
<table class="cellalignment4330" title="LAPACK_PPSV Procedure Parameters" summary="This table describes the Parameters of the UTL_NLA.LAPACK_PPSV subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t92">Parameter</th>
<th class="cellalignment4328" id="r1c2-t92">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t92" headers="r1c1-t92">
<p><code dir="ltr">uplo</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t92 r1c2-t92">
<ul>
<li>
<p><code dir="ltr">uplo = &#39;U&#39;</code> . Upper triangular of <code dir="ltr">A</code> is stored.</p>
</li>
<li>
<p><code dir="ltr">uplo = &#39;L&#39;</code>. Lower triangular of <code dir="ltr">A</code> is stored.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t92" headers="r1c1-t92">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t92 r1c2-t92">
<p>The number of linear equations, that is, the order of the matrix <code dir="ltr">a</code> .<code dir="ltr">n &gt;= 0</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t92" headers="r1c1-t92">
<p><code dir="ltr">nrhs</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t92 r1c2-t92">
<p>The number of right-hand sides, which is the number of columns of the matrix <code dir="ltr">b</code>. <code dir="ltr">nrhs &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t92" headers="r1c1-t92">
<p><code dir="ltr">ap</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t92 r1c2-t92">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL, DIMENSION (n*(n+1)/2)</code>.</p>
<p>On entry, the upper or lower triangle of the symmetric matrix <code dir="ltr">a</code>, packed columnwise in a linear array. The <code dir="ltr">j</code>-th column of <code dir="ltr">a</code> is stored in the array ap as follows:</p>
<p>If <code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code>, <code dir="ltr">AP(i + (j-1)*j/2) = A(i,j) for 1&lt;=i&lt;=j;</code></p>
<p>If <code dir="ltr">uplo</code> = &#39;<code dir="ltr">L</code>&#39;, <code dir="ltr">AP(i + (j-1)*(2n-j)/2) = A(i,j) for j&lt;=i&lt;=n;</code></p>
<p>On exit, if <code dir="ltr">info</code> = 0, the factor <code dir="ltr">U</code> or <code dir="ltr">&#39;L&#39;</code> from the Cholesky factorization <code dir="ltr">A = U**T*U</code> or <code dir="ltr">A = L*L**T</code> in the same storage format as <code dir="ltr">A</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t92" headers="r1c1-t92">
<p><code dir="ltr">b</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t92 r1c2-t92">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL, DIMENSION (ldb, nrhs)</code>.</p>
<p>On entry, the <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> matrix of right hand side matrix <code dir="ltr">b</code>.</p>
<p>On exit, if <code dir="ltr">info = 0</code> , the <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> solution matrix <code dir="ltr">X</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t92" headers="r1c1-t92">
<p><code dir="ltr">ldb</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t92 r1c2-t92">
<p>The leading dimension of the array b.</p>
<p><code dir="ltr">ldb &gt;= max(1,n)</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t92" headers="r1c1-t92">
<p><code dir="ltr">info</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t92 r1c2-t92">
<ul>
<li>
<p><code dir="ltr">= 0</code> : successful exit</p>
</li>
<li>
<p><code dir="ltr">&lt; 0</code> : if <code dir="ltr">info = -i</code> , the <code dir="ltr">i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code dir="ltr">&gt; 0</code> : if <code dir="ltr">info = i</code>, the leading minor of order i of <code dir="ltr">a</code> is not positive definite, so the factorization could not be completed, and the solution has not been computed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t92" headers="r1c1-t92">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t92 r1c2-t92">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>&#39;<code dir="ltr">C</code>&#39;: column-major (default)</p>
</li>
<li>
<p>&#39;<code dir="ltr">R</code>&#39;: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71328" class="refsect2"><a id="CIAEJBEG"></a>
<h3 class="refsect2"><a id="sthref19292"></a>LAPACK_PTSV Procedures</h3>
<p>This procedure computes the solution to a real system of linear equations</p>
<pre dir="ltr">a * x = b
</pre>
<p>where <code dir="ltr">a</code> is an n by n symmetric positive definite tridiagonal matrix, and <code dir="ltr">x</code> and <code dir="ltr">b</code> are n by <code dir="ltr">nrhs</code> matrices.</p>
<p><code dir="ltr">a</code> is factored as <code dir="ltr">A = L*D*L**T</code>, and the factored form of a is then used to solve the system of equations.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFBCIJ">LAPACK Driver Routines (Linear Equations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19293"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.LAPACK_PTSV (
   n      IN       POSITIVEN,
   nrhs   IN       POSITIVEN,
   d      IN OUT   UTL_NLA_ARRAY_DBL,
   e      IN OUT   UTL_NLA_ARRAY_DBL,
   b      IN OUT   UTL_NLA_ARRAY_DBL,
   ldb    IN       POSITIVEN,
   info   OUT      INTEGER,
   pack   IN       flag  DEFAULT &#39;C&#39;);
 
</pre>
<pre dir="ltr">UTL_NLA.LAPACK_PTSV (
   n      IN       POSITIVEN,
   nrhs   IN       POSITIVEN,
   d      IN OUT   UTL_NLA_ARRAY_FLT,
   e      IN OUT   UTL_NLA_ARRAY_FLT,
   b      IN OUT   UTL_NLA_ARRAY_FLT,
   ldb    IN       POSITIVEN,
   info   OUT      INTEGER,
   pack   IN       flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19294"></a>Parameters</p>
<div id="ARPLS71329" class="tblformal">
<p class="titleintable"><a id="sthref19295"></a><a id="sthref19296"></a>Table 259-50 LAPACK_PTSV Procedure Parameters</p>
<table class="cellalignment4330" title="LAPACK_PTSV Procedure Parameters" summary="This table describes the Parameters of the UTL_NLA.LAPACK_PTSV subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t94">Parameter</th>
<th class="cellalignment4328" id="r1c2-t94">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t94" headers="r1c1-t94">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t94 r1c2-t94">
<p>The order of the matrix <code dir="ltr">a. N &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t94" headers="r1c1-t94">
<p><code dir="ltr">nrhs</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t94 r1c2-t94">
<p>The number of right-hand sides, which is the number of columns of the matrix <code dir="ltr">b</code>. <code dir="ltr">nrhs &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t94" headers="r1c1-t94">
<p><code dir="ltr">d</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t94 r1c2-t94">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL, DIMENSION (n)</code>.</p>
<p>On entry, the <code dir="ltr">n</code> diagonal elements of the tridiagonal matrix <code dir="ltr">a</code>.</p>
<p>On exit, the <code dir="ltr">n</code> diagonal elements of the diagonal matrix <code dir="ltr">d</code> from the factorization <code dir="ltr">A = L*D*L**T</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t94" headers="r1c1-t94">
<p><code dir="ltr">e</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t94 r1c2-t94">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL, DIMENSION (n-1)</code>.</p>
<p>On entry, the <code dir="ltr">(n-1)</code> subdiagonal elements of the tridiagonal matrix <code dir="ltr">a</code>.</p>
<p>On exit, the <code dir="ltr">(n-1)</code> diagonal elements of the unit bidiagonal factor <code dir="ltr">L</code> from the factorization <code dir="ltr">A = L*D*L**T</code> of <code dir="ltr">a</code>.(<code dir="ltr">e</code> can also be regarded as the superdiagonal of the unit bidiagonal factor <code dir="ltr">U</code> from the <code dir="ltr">U**T*D*U</code> factorization of <code dir="ltr">a</code>)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t94" headers="r1c1-t94">
<p><code dir="ltr">b</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t94 r1c2-t94">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL, DIMENSION (ldb, nrhs)</code>.</p>
<p>On entry, the <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> matrix of right hand side matrix <code dir="ltr">b</code>.</p>
<p>On exit, if <code dir="ltr">info = 0</code> , the <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> solution matrix <code dir="ltr">X</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t94" headers="r1c1-t94">
<p><code dir="ltr">ldb</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t94 r1c2-t94">
<p>The leading dimension of the array <code dir="ltr">b</code>.</p>
<p><code dir="ltr">ldb &gt;= max(1,n)</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t94" headers="r1c1-t94">
<p><code dir="ltr">info</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t94 r1c2-t94">
<ul>
<li>
<p><code dir="ltr">= 0</code> : successful exit</p>
</li>
<li>
<p><code dir="ltr">&lt; 0</code> : if <code dir="ltr">info = -i</code> , the <code dir="ltr">i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code dir="ltr">&gt; 0</code> : if <code dir="ltr">info = i</code>, the leading minor of order <code dir="ltr">i</code> of <code dir="ltr">a</code> is not positive definite, so the factorization could not be completed, and the solution has not been computed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t94" headers="r1c1-t94">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t94 r1c2-t94">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p><code dir="ltr">&#39;C&#39;</code>: column-major (default)</p>
</li>
<li>
<p><code dir="ltr">&#39;R&#39;</code>: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71330" class="refsect2"><a id="CIAIJDGB"></a>
<h3 class="refsect2"><a id="sthref19297"></a>LAPACK_SBEV Procedures</h3>
<p>This procedure computes all the eigenvalues and, optionally, eigenvectors of a real symmetric band matrix <code dir="ltr">A</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19298"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.LAPACK_SBEV (
   jobz     IN      flag,
   uplo     IN      flag,
   n        IN      POSITIVEN,
   kd       IN      NATURALN,
   ab       IN OUT  UTL_NLA_ARRAY_DBL,
   ldab     IN      POSITIVEN,
   w        IN OUT  UTL_NLA_ARRAY_DBL,
   z        IN OUT  UTL_NLA_ARRAY_DBL,
   ldz       IN      POSITIVEN,
   info     OUT     INTEGER,
   pack     IN      flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.LAPACK_SBEV (
   jobz     IN      flag,
   uplo     IN      flag,
   n        IN      POSITIVEN,
   kd       IN      NATURALN,
   ab       IN OUT  UTL_NLA_ARRAY_FLT,
   ldab     IN      POSITIVEN,
   w        IN OUT  UTL_NLA_ARRAY_FLT,
   z        IN OUT  UTL_NLA_ARRAY_FLT,
   ldz      IN      POSITIVEN,
   info     OUT     INTEGER,
   pack     IN      flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19299"></a>Parameters</p>
<div id="ARPLS71331" class="tblformal">
<p class="titleintable"><a id="sthref19300"></a><a id="sthref19301"></a>Table 259-51 LAPACK_SBEV Procedure Parameters</p>
<table class="cellalignment4330" title="LAPACK_SBEV Procedure Parameters" summary="This table describes the Parameters of the UTL_NLA.LAPACK_SBEV subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t96">Parameter</th>
<th class="cellalignment4328" id="r1c2-t96">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t96" headers="r1c1-t96">
<p><code dir="ltr">jobz</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t96 r1c2-t96">
<ul>
<li>
<p><code dir="ltr">&#39;N&#39;</code>: Compute eigenvalues only.</p>
</li>
<li>
<p><code dir="ltr">&#39;V&#39;</code>: Compute eigenvalues and eigenvectors.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t96" headers="r1c1-t96">
<p><code dir="ltr">uplo</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t96 r1c2-t96">
<ul>
<li>
<p><code dir="ltr">&#39;U&#39;</code>: Upper triangle of A is stored.</p>
</li>
<li>
<p><code dir="ltr">&#39;L&#39;</code>: Lower triangle of A is stored.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t96" headers="r1c1-t96">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t96 r1c2-t96">
<p>The order of the matrix <code dir="ltr">a. N &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t96" headers="r1c1-t96">
<p><code dir="ltr">kd</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t96 r1c2-t96">
<p>The number of superdiagonals of the matrix <code dir="ltr">A</code> if <code dir="ltr">uplo = &#39;U&#39;,</code> or the number of subdiagonals if <code dir="ltr">uplo = &#39;L&#39;</code>. <code dir="ltr">kd &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t96" headers="r1c1-t96">
<p><code dir="ltr">ab</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t96 r1c2-t96">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL, DIMENSION (ldab, n)</code>.</p>
<p>On entry, the upper or lower triangle of the symmetric band matrix <code dir="ltr">A</code> stored in the first <code dir="ltr">kd+1</code> rows of the array. The <code dir="ltr">j</code>-th column of <code dir="ltr">A</code> is stored in the <code dir="ltr">j</code>-th column of the array <code dir="ltr">ab</code>:</p>
<ul>
<li>
<p>If <code dir="ltr">uplo = &#39;U&#39;</code>, <code dir="ltr">ab(kd+1+i-j,j) = a(i,j)</code> for <code dir="ltr">max(1,j-kd)&lt;=i&lt;=j</code>.</p>
</li>
<li>
<p>If <code dir="ltr">uplo = &#39;L&#39;</code>, <code dir="ltr">AB(1+i-j,j) = A(i,j)</code> for <code dir="ltr">j&lt;=i&lt;=min(n,j+kd)</code>.</p>
</li>
</ul>
<p>On exit, <code dir="ltr">ab</code> is overwritten by values generated during the reduction to tridiagonal form:</p>
<ul>
<li>
<p>If <code dir="ltr">uplo = &#39;U&#39;</code>, the diagonal and first superdiagonal of the tridiagonal matrix <code dir="ltr">T</code> are returned in rows <code dir="ltr">kd</code> and <code dir="ltr">kd+1</code> of <code dir="ltr">ab</code>.</p>
</li>
<li>
<p>If <code dir="ltr">uplo = &#39;L&#39;</code>, the diagonal and first subdiagonal of <code dir="ltr">T</code> are returned in the first two rows of <code dir="ltr">ab</code>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t96" headers="r1c1-t96">
<p><code dir="ltr">ldab</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t96 r1c2-t96">
<p>The leading dimension of the array <code dir="ltr">ab. ldab &gt;= kd + 1</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t96" headers="r1c1-t96">
<p><code dir="ltr">w</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t96 r1c2-t96">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT/DBL</code>, <code dir="ltr">DIMENSION (n)</code>.</p>
<p>If <code dir="ltr">info = 0</code>, the eigenvalues in ascending order.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t96" headers="r1c1-t96">
<p><code dir="ltr">z</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t96 r1c2-t96">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT/DBL</code>, <code dir="ltr">DIMENSION (n)</code>.</p>
<ul>
<li>
<p>If <code dir="ltr">jobz = &#39;V&#39;</code>, then if <code dir="ltr">info = 0</code>, <code dir="ltr">z</code> contains the orthonormal eigenvectors of the matrix <code dir="ltr">A</code>, with the <code dir="ltr">i</code>-th column of <code dir="ltr">z</code> holding the eigenvector associated with <code dir="ltr">w(i)</code>.</p>
</li>
<li>
<p>If <code dir="ltr">jobz = &#39;N&#39;</code>, then <code dir="ltr">z</code> is not referenced.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t96" headers="r1c1-t96">
<p><code dir="ltr">ldz</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t96 r1c2-t96">
<p>The leading dimension of the array <code dir="ltr">z</code>. <code dir="ltr">ldz &gt;= 1</code>, and if <code dir="ltr">jobz = &#39;v&#39;</code>, <code dir="ltr">ldz &gt;= max(1,n)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t96" headers="r1c1-t96">
<p><code dir="ltr">info</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t96 r1c2-t96">
<ul>
<li>
<p><code dir="ltr">= 0</code> : successful exit</p>
</li>
<li>
<p><code dir="ltr">&lt; 0</code> : if <code dir="ltr">info = -i</code>, the <code dir="ltr">i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code dir="ltr">&gt; 0</code> : if <code dir="ltr">info = i</code>, the algorithm failed to converge; <code dir="ltr">i</code> off-diagonal elements of an intermediate tridiagonal form did not converge to zero</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t96" headers="r1c1-t96">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t96 r1c2-t96">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p><code dir="ltr">&#39;C&#39;</code>: column-major (default)</p>
</li>
<li>
<p><code dir="ltr">&#39;R&#39;</code>: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71332" class="refsect2"><a id="CIAHJDIJ"></a>
<h3 class="refsect2"><a id="sthref19302"></a>LAPACK_SBEVD Procedures</h3>
<p>This procedure computes all the eigenvalues and, optionally, eigenvectors of a real symmetric matrix <code dir="ltr">A</code>. If eigenvectors are desired, it uses a divide and conquer algorithm that makes mild assumptions about floating point arithmetic.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19303"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.LAPACK_SBEVD (
   jobz     IN      flag,
   uplo     IN      flag,
   n        IN      POSITIVEN,
   kd       IN      NATURALN,
   ab       IN OUT  UTL_NLA_ARRAY_DBL,
   ldab     IN      POSITIVEN,
   w        IN OUT  UTL_NLA_ARRAY_DBL,
   z        IN OUT  UTL_NLA_ARRAY_DBL,
   ldz       IN      POSITIVEN,
   info     OUT     INTEGER,
   pack     IN      flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.LAPACK_SBEVD (
   jobz     IN      flag,
   uplo     IN      flag,
   n        IN      POSITIVEN,
   kd       IN      NATURALN,
   ab       IN OUT  UTL_NLA_ARRAY_FLT,
   ldab     IN      POSITIVEN,
   w        IN OUT  UTL_NLA_ARRAY_FLT,
   z        IN OUT  UTL_NLA_ARRAY_FLT,
   ldz      IN      POSITIVEN,
   info     OUT     INTEGER,
   pack     IN      flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19304"></a>Parameters</p>
<div id="ARPLS71333" class="tblformal">
<p class="titleintable"><a id="sthref19305"></a><a id="sthref19306"></a>Table 259-52 LAPACK_SBEVD Procedure Parameters</p>
<table class="cellalignment4330" title="LAPACK_SBEVD Procedure Parameters" summary="This table describes the Parameters of the UTL_NLA.LAPACK_SBEVD subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t98">Parameter</th>
<th class="cellalignment4328" id="r1c2-t98">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t98" headers="r1c1-t98">
<p><code dir="ltr">jobz</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t98 r1c2-t98">
<ul>
<li>
<p><code dir="ltr">&#39;N&#39;</code>: Compute eigenvalues only.</p>
</li>
<li>
<p><code dir="ltr">&#39;V&#39;</code>: Compute eigenvalues and eigenvectors.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t98" headers="r1c1-t98">
<p><code dir="ltr">uplo</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t98 r1c2-t98">
<ul>
<li>
<p><code dir="ltr">&#39;U&#39;</code>: Upper triangle of A is stored.</p>
</li>
<li>
<p><code dir="ltr">&#39;L&#39;</code>: Lower triangle of A is stored.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t98" headers="r1c1-t98">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t98 r1c2-t98">
<p>The order of the matrix <code dir="ltr">a. N &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t98" headers="r1c1-t98">
<p><code dir="ltr">kd</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t98 r1c2-t98">
<p>The number of superdiagonals of the matrix <code dir="ltr">A</code> if <code dir="ltr">uplo = &#39;U&#39;</code>, or the number of subdiagonals if <code dir="ltr">uplo = &#39;L&#39;</code>. <code dir="ltr">kd &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t98" headers="r1c1-t98">
<p><code dir="ltr">ab</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t98 r1c2-t98">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL, DIMENSION (ldab, n)</code>.</p>
<p>On entry, the upper or lower triangle of the symmetric band matrix <code dir="ltr">A</code> stored in the first <code dir="ltr">kd+1</code> rows of the array. The <code dir="ltr">j</code>-th column of <code dir="ltr">A</code> is stored in the <code dir="ltr">j</code>-th column of the array <code dir="ltr">ab</code>:</p>
<ul>
<li>
<p>If <code dir="ltr">uplo = &#39;U&#39;</code>, <code dir="ltr">ab(kd+1+i-j,j) = a(i,j)</code> for <code dir="ltr">max(1,j-kd)&lt;=i&lt;=j</code>.</p>
</li>
<li>
<p>If <code dir="ltr">uplo = &#39;L&#39;</code>, <code dir="ltr">AB(1+i-j,j) = A(i,j)</code> for <code dir="ltr">j&lt;=i&lt;=min(n,j+kd)</code>.</p>
</li>
</ul>
<p>On exit, <code dir="ltr">ab</code> is overwritten by values generated during the reduction to tridiagonal form:</p>
<ul>
<li>
<p>If <code dir="ltr">uplo = &#39;U&#39;</code>, the diagonal and first superdiagonal of the tridiagonal matrix <code dir="ltr">T</code> are returned in rows <code dir="ltr">kd</code> and <code dir="ltr">kd+1</code> of <code dir="ltr">ab</code>.</p>
</li>
<li>
<p>If <code dir="ltr">uplo = &#39;L&#39;</code>, the diagonal and first subdiagonal of <code dir="ltr">T</code> are returned in the first two rows of <code dir="ltr">ab</code>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t98" headers="r1c1-t98">
<p><code dir="ltr">ldab</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t98 r1c2-t98">
<p>The leading dimension of the array <code dir="ltr">ab. ldab &gt;= kd + 1</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t98" headers="r1c1-t98">
<p><code dir="ltr">w</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t98 r1c2-t98">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT/DBL</code>, <code dir="ltr">DIMENSION (ldz,n)</code>.</p>
<p>If <code dir="ltr">info = 0</code>, the eigenvalues in ascending order.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t98" headers="r1c1-t98">
<p><code dir="ltr">z</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t98 r1c2-t98">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT/DBL</code>, <code dir="ltr">DIMENSION (n)</code>.</p>
<ul>
<li>
<p>If <code dir="ltr">jobz = &#39;V&#39;</code>, then if <code dir="ltr">info = 0</code>, <code dir="ltr">z</code> contains the orthonormal eigenvectors of the matrix <code dir="ltr">A</code>, with the <code dir="ltr">i</code>-th column of <code dir="ltr">z</code> holding the eigenvector associated with <code dir="ltr">w(i)</code>.</p>
</li>
<li>
<p>If <code dir="ltr">jobz = &#39;N&#39;</code>, then <code dir="ltr">z</code> is not referenced.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t98" headers="r1c1-t98">
<p><code dir="ltr">ldz</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t98 r1c2-t98">
<p>The leading dimension of the array <code dir="ltr">z</code>. <code dir="ltr">ldz &gt;= 1</code>, and if <code dir="ltr">jobz = &#39;v&#39;</code>, <code dir="ltr">ldz &gt;= max(1,n)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t98" headers="r1c1-t98">
<p><code dir="ltr">info</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t98 r1c2-t98">
<ul>
<li>
<p><code dir="ltr">= 0</code> : successful exit</p>
</li>
<li>
<p><code dir="ltr">&lt; 0</code> : if <code dir="ltr">info = -i</code>, the <code dir="ltr">i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code dir="ltr">&gt; 0</code> : if <code dir="ltr">info = i</code>, the algorithm failed to converge; <code dir="ltr">i</code> off-diagonal elements of an intermediate tridiagonal form did not converge to zero</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t98" headers="r1c1-t98">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t98 r1c2-t98">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p><code dir="ltr">&#39;C&#39;</code>: column-major (default)</p>
</li>
<li>
<p><code dir="ltr">&#39;R&#39;</code>: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71334" class="refsect2"><a id="CIADGJII"></a>
<h3 class="refsect2"><a id="sthref19307"></a>LAPACK_SPEV Procedures</h3>
<p>This procedure computes all the eigenvalues and, optionally, eigenvectors of a real symmetric matrix <code dir="ltr">A</code> in packed storage.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19308"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.LAPACK_SPEV (
   jobz     IN      flag,
   uplo     IN      flag,
   n        IN      POSITIVEN,
   ap       IN OUT  UTL_NLA_ARRAY_DBL,
   w        IN OUT  UTL_NLA_ARRAY_DBL,
   z        IN OUT  UTL_NLA_ARRAY_DBL,
   ldz      IN      POSITIVEN,
   info     OUT     INTEGER,
   pack     IN      flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.LAPACK_SPEV (
   jobz     IN      flag,
   uplo     IN      flag,
   n        IN      POSITIVEN,
   ap       IN OUT  UTL_NLA_ARRAY_FLT,
   w        IN OUT  UTL_NLA_ARRAY_FLT,
   z        IN OUT  UTL_NLA_ARRAY_FLT,
   ldz      IN      POSITIVEN,
   info     OUT     INTEGER,
   pack     IN      flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19309"></a>Parameters</p>
<div id="ARPLS71335" class="tblformal">
<p class="titleintable"><a id="sthref19310"></a><a id="sthref19311"></a>Table 259-53 LAPACK_SPEV Procedure Parameters</p>
<table class="cellalignment4330" title="LAPACK_SPEV Procedure Parameters" summary="This table describes the Parameters of the UTL_NLA.LAPACK_SPEV subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t100">Parameter</th>
<th class="cellalignment4328" id="r1c2-t100">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t100" headers="r1c1-t100">
<p><code dir="ltr">jobz</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t100 r1c2-t100">
<ul>
<li>
<p><code dir="ltr">&#39;N&#39;</code>: Compute eigenvalues only.</p>
</li>
<li>
<p><code dir="ltr">&#39;V&#39;</code>: Compute eigenvalues and eigenvectors.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t100" headers="r1c1-t100">
<p><code dir="ltr">uplo</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t100 r1c2-t100">
<ul>
<li>
<p><code dir="ltr">&#39;U&#39;</code>: Upper triangle of <code dir="ltr">A</code> is stored.</p>
</li>
<li>
<p><code dir="ltr">&#39;L&#39;</code>: Lower triangle of A is stored.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t100" headers="r1c1-t100">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t100 r1c2-t100">
<p>The order of the matrix <code dir="ltr">a. N &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t100" headers="r1c1-t100">
<p><code dir="ltr">ap</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t100 r1c2-t100">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL, DIMENSION (n*(n+1)/2)</code>.</p>
<p>On entry, the upper or lower triangle of the symmetric matrix <code dir="ltr">a</code> packed columnwise in a linear array. The <code dir="ltr">j</code>-th column of a is stored in the array <code dir="ltr">ap</code>:</p>
<ul>
<li>
<p>If <code dir="ltr">uplo = &#39;U&#39;</code>, <code dir="ltr">ap(i + (j-1)*j/2) = a(i,j) for 1&lt;=i&lt;=j</code>.</p>
</li>
<li>
<p>If <code dir="ltr">uplo = &#39;L&#39;</code>, <code dir="ltr">ap(i + (j-1)*(2*n-j)/2) = a(i,j) for j&lt;=i&lt;=n</code>.</p>
</li>
</ul>
<p>On exit, <code dir="ltr">ap</code> is overwritten by values generated during the reduction to tridiagonal form:</p>
<ul>
<li>
<p>If <code dir="ltr">uplo = &#39;U&#39;</code>, the diagonal and first superdiagonal of the tridiagonal matrix <code dir="ltr">T</code> overwrite the corresponding elements of <code dir="ltr">A</code>.</p>
</li>
<li>
<p>If <code dir="ltr">uplo = &#39;L&#39;</code>, the diagonal and first subdiagonal of <code dir="ltr">T</code> overwrite the corresponding elements of <code dir="ltr">A</code>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t100" headers="r1c1-t100">
<p><code dir="ltr">w</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t100 r1c2-t100">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT/DBL</code>, <code dir="ltr">DIMENSION (n)</code>.</p>
<p>If <code dir="ltr">info = 0</code>, the eigenvalues in ascending order.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t100" headers="r1c1-t100">
<p><code dir="ltr">z</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t100 r1c2-t100">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT/DBL</code>, <code dir="ltr">DIMENSION (ldz,n)</code>.</p>
<ul>
<li>
<p>If <code dir="ltr">jobz = &#39;V&#39;</code>, then if <code dir="ltr">info = 0</code>, <code dir="ltr">z</code> contains the orthonormal eigenvectors of the matrix <code dir="ltr">A</code>, with the <code dir="ltr">i</code>-th column of <code dir="ltr">z</code> holding the eigenvector associated with <code dir="ltr">w(i)</code>.</p>
</li>
<li>
<p>If <code dir="ltr">jobz = &#39;N&#39;</code>, then <code dir="ltr">z</code> is not referenced.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t100" headers="r1c1-t100">
<p><code dir="ltr">ldz</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t100 r1c2-t100">
<p>The leading dimension of the array <code dir="ltr">z</code>. <code dir="ltr">ldz &gt;= 1</code>, and if <code dir="ltr">jobz = &#39;v&#39;</code>, <code dir="ltr">ldz &gt;= max(1,n)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t100" headers="r1c1-t100">
<p><code dir="ltr">info</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t100 r1c2-t100">
<ul>
<li>
<p><code dir="ltr">= 0</code> : successful exit</p>
</li>
<li>
<p><code dir="ltr">&lt; 0</code> : if <code dir="ltr">info = -i</code>, the <code dir="ltr">i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code dir="ltr">&gt; 0</code> : if <code dir="ltr">info = i</code>, the algorithm failed to converge; <code dir="ltr">i</code> off-diagonal elements of an intermediate tridiagonal form did not converge to zero</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t100" headers="r1c1-t100">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t100 r1c2-t100">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p><code dir="ltr">&#39;C&#39;</code>: column-major (default)</p>
</li>
<li>
<p><code dir="ltr">&#39;R&#39;</code>: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71336" class="refsect2"><a id="CIABDIAF"></a>
<h3 class="refsect2"><a id="sthref19312"></a>LAPACK_SPEVD Procedures</h3>
<p>This procedure computes all the eigenvalues and, optionally, eigenvectors of a real symmetric matrix <code dir="ltr">A</code> in packed storage. If eigenvectors are desired, it uses a divide and conquer algorithm. The divide and conquer algorithm makes very mild assumptions about floating point arithmetic.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19313"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.LAPACK_SPEVD (
   jobz     IN      flag,
   uplo     IN      flag,
   n        IN      POSITIVEN,
   ap       IN OUT  UTL_NLA_ARRAY_DBL,
   w        IN OUT  UTL_NLA_ARRAY_DBL,
   z        IN OUT  UTL_NLA_ARRAY_DBL,
   ldz       IN      POSITIVEN,
   info     OUT     INTEGER,
   pack     IN      flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.LAPACK_SPEVD (
   jobz     IN      flag,
   uplo     IN      flag,
   n        IN      POSITIVEN,
   ap       IN OUT  UTL_NLA_ARRAY_FLT,
   w        IN OUT  UTL_NLA_ARRAY_FLT,
   z        IN OUT  UTL_NLA_ARRAY_FLT,
   ldz      IN      POSITIVEN,
   info     OUT     INTEGER,
   pack     IN      flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19314"></a>Parameters</p>
<div id="ARPLS71337" class="tblformal">
<p class="titleintable"><a id="sthref19315"></a><a id="sthref19316"></a>Table 259-54 LAPACK_SPEVD Procedure Parameters</p>
<table class="cellalignment4330" title="LAPACK_SPEVD Procedure Parameters" summary="This table describes the Parameters of the UTL_NLA.LAPACK_SPEVD subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t102">Parameter</th>
<th class="cellalignment4328" id="r1c2-t102">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t102" headers="r1c1-t102">
<p><code dir="ltr">jobz</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t102 r1c2-t102">
<ul>
<li>
<p><code dir="ltr">&#39;N&#39;</code>: Compute eigenvalues only.</p>
</li>
<li>
<p><code dir="ltr">&#39;V&#39;</code>: Compute eigenvalues and eigenvectors.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t102" headers="r1c1-t102">
<p><code dir="ltr">uplo</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t102 r1c2-t102">
<ul>
<li>
<p><code dir="ltr">&#39;U&#39;</code>: Upper triangle of A is stored.</p>
</li>
<li>
<p><code dir="ltr">&#39;L&#39;</code>: Lower triangle of A is stored.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t102" headers="r1c1-t102">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t102 r1c2-t102">
<p>The order of the matrix <code dir="ltr">a. N &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t102" headers="r1c1-t102">
<p><code dir="ltr">ap</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t102 r1c2-t102">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL, DIMENSION (n*(n+1)/2)</code>.</p>
<p>On entry, the upper or lower triangle of the symmetric matrix <code dir="ltr">a</code> packed columnwise in a linear array. The <code dir="ltr">j</code>-th column of a is stored in the array <code dir="ltr">ap</code>:</p>
<ul>
<li>
<p>If <code dir="ltr">uplo = &#39;U&#39;</code>, <code dir="ltr">ap(i + (j-1)*j/2) = a(i,j) for 1&lt;=i&lt;=j</code>.</p>
</li>
<li>
<p>If <code dir="ltr">uplo = &#39;L&#39;</code>, <code dir="ltr">ap(i + (j-1)*(2*n-j)/2) = a(i,j) for j&lt;=i&lt;=n</code>.</p>
</li>
</ul>
<p>On exit, <code dir="ltr">ap</code> is overwritten by values generated during the reduction to tridiagonal form:</p>
<ul>
<li>
<p>If <code dir="ltr">uplo = &#39;U&#39;</code>, the diagonal and first superdiagonal of the tridiagonal matrix <code dir="ltr">T</code> overwrite the corresponding elements of <code dir="ltr">A</code>.</p>
</li>
<li>
<p>If <code dir="ltr">uplo = &#39;L&#39;</code>, the diagonal and first subdiagonal of <code dir="ltr">T</code> overwrite the corresponding elements of <code dir="ltr">A</code>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t102" headers="r1c1-t102">
<p><code dir="ltr">w</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t102 r1c2-t102">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT/DBL</code>, <code dir="ltr">DIMENSION (n)</code>.</p>
<p>If <code dir="ltr">info = 0</code>, the eigenvalues in ascending order.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t102" headers="r1c1-t102">
<p><code dir="ltr">z</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t102 r1c2-t102">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT/DBL</code>, <code dir="ltr">DIMENSION (ldz,n)</code>.</p>
<ul>
<li>
<p>If <code dir="ltr">jobz = &#39;V&#39;</code>, then if <code dir="ltr">info = 0</code>, <code dir="ltr">z</code> contains the orthonormal eigenvectors of the matrix <code dir="ltr">A</code>, with the <code dir="ltr">i</code>-th column of <code dir="ltr">z</code> holding the eigenvector associated with <code dir="ltr">w(i)</code>.</p>
</li>
<li>
<p>If <code dir="ltr">jobz = &#39;N&#39;</code>, then <code dir="ltr">z</code> is not referenced.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t102" headers="r1c1-t102">
<p><code dir="ltr">ldz</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t102 r1c2-t102">
<p>The leading dimension of the array <code dir="ltr">z</code>. <code dir="ltr">ldz &gt;= 1</code>, and if <code dir="ltr">jobz = &#39;v&#39;</code>, <code dir="ltr">ldz &gt;= max(1,n)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t102" headers="r1c1-t102">
<p><code dir="ltr">info</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t102 r1c2-t102">
<ul>
<li>
<p><code dir="ltr">= 0</code> : successful exit</p>
</li>
<li>
<p><code dir="ltr">&lt; 0</code> : if <code dir="ltr">info = -i</code>, the <code dir="ltr">i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code dir="ltr">&gt; 0</code> : if <code dir="ltr">info = i</code>, the algorithm failed to converge; <code dir="ltr">i</code> off-diagonal elements of an intermediate tridiagonal form did not converge to zero</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t102" headers="r1c1-t102">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t102 r1c2-t102">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p><code dir="ltr">&#39;C&#39;</code>: column-major (default)</p>
</li>
<li>
<p><code dir="ltr">&#39;R&#39;</code>: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71338" class="refsect2"><a id="CIAEDCDH"></a>
<h3 class="refsect2"><a id="sthref19317"></a>LAPACK_SPSV Procedures</h3>
<p>This procedure computes the solution to a real system of linear equations</p>
<pre dir="ltr">a * x = b
</pre>
<p>where <code dir="ltr">a</code> is an n by n symmetric matrix stored in packed format, and <code dir="ltr">x</code> and <code dir="ltr">b</code> are n by nrhs matrices.</p>
<p>The diagonal pivoting method is used to factor <code dir="ltr">A</code> as</p>
<p><code dir="ltr">A = U * D * U**T</code>, if <code dir="ltr">UPLO = &#39;U&#39;</code></p>
<p>or</p>
<p><code dir="ltr">A = L * D * L**T</code>, if <code dir="ltr">UPLO = &#39;L&#39;</code></p>
<p>where <code dir="ltr">U</code> (or <code dir="ltr">L</code>) is a product of permutation and unit upper (lower) triangular matrices, and <code dir="ltr">D</code> is symmetric and block diagonal with 1 by 1 and 2 by 2 diagonal blocks. The factored form of <code dir="ltr">A</code> is then used to solve the system of equations <code dir="ltr">A * X = B.</code></p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFBCIJ">LAPACK Driver Routines (Linear Equations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19318"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.LAPACK_SPSV (
   uplo    IN      flag,
   n       IN      POSITIVEN,
   nrhs    IN      POSITIVEN,
   ap      IN OUT  UTL_NLA_ARRAY_DBL,
   ipiv    IN OUT  UTL_NLA_ARRAY_INT,
   b       IN OUT  UTL_NLA_ARRAY_DBL,
   ldb     IN      POSITIVEN,
   info    OUT     INTEGER,
   pack    IN      flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.LAPACK_SPSV (
   uplo   IN       flag,
   n      IN       POSITIVEN,
   nrhs   IN       POSITIVEN,
   ap     IN OUT   UTL_NLA_ARRAY_FLT,
   ipiv   IN OUT   UTL_NLA_ARRAY_INT,
   b      IN OUT   UTL_NLA_ARRAY_FLT,
   ldb    IN       POSITIVEN,
   info   OUT      INTEGER,
   pack   IN       flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19319"></a>Parameters</p>
<div id="ARPLS71339" class="tblformal">
<p class="titleintable"><a id="sthref19320"></a><a id="sthref19321"></a>Table 259-55 LAPACK_SPSV Procedure Parameters</p>
<table class="cellalignment4330" title="LAPACK_SPSV Procedure Parameters" summary="This table describes the Parameters of the UTL_NLA.LAPACK_SPSV subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t104">Parameter</th>
<th class="cellalignment4328" id="r1c2-t104">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t104" headers="r1c1-t104">
<p><code dir="ltr">uplo</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t104 r1c2-t104">
<ul>
<li>
<p><code dir="ltr">uplo = &#39;U&#39;</code>. Upper triangular of <code dir="ltr">A</code> is stored.</p>
</li>
<li>
<p><code dir="ltr">uplo = &#39;L&#39;</code> . Lower triangular of <code dir="ltr">A</code> is stored.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t104" headers="r1c1-t104">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t104 r1c2-t104">
<p>The number of linear equations, which is the order of the matrix <code dir="ltr">a. N &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t104" headers="r1c1-t104">
<p><code dir="ltr">nrhs</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t104 r1c2-t104">
<p>The number of right-hand sides, which is the number of columns of the matrix <code dir="ltr">b</code>. <code dir="ltr">nrhs &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t104" headers="r1c1-t104">
<p><code dir="ltr">ap</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t104 r1c2-t104">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL, DIMENSION (n*(n+1)/2)</code>.</p>
<p>On entry, the upper or lower triangle of the symmetric matrix <code dir="ltr">A</code>, packed columnwise in a linear array. The <code dir="ltr">j</code>-th column of <code dir="ltr">A</code> is stored in the array <code dir="ltr">ap</code> as follows:</p>
<ul>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code>: <code dir="ltr">AP(i + (j-1)*j/2) = A(i,j)</code> for <code dir="ltr">1&lt;=i&lt;=j</code></p>
</li>
<li>
<p><code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> : <code dir="ltr">AP(i + (j-1)*(2n-j)/2) = A(i,j)</code> for <code dir="ltr">j&lt;=i&lt;=n</code></p>
</li>
</ul>
<p>See below for further details.</p>
<p>On exit, the block diagonal matrix <code dir="ltr">D</code> and the multipliers used to obtain the factor <code dir="ltr">U</code> or <code dir="ltr">L</code> from the factorization <code dir="ltr">A = U*D*U**T or A = L*D*L**T</code> as computed by <code dir="ltr">SSPTRF</code>, stored as a packed triangular matrix in the same storage format as <code dir="ltr">A</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t104" headers="r1c1-t104">
<p><code dir="ltr">ipiv</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t104 r1c2-t104">
<p><code dir="ltr">INTEGER array</code><code dir="ltr">, DIMENSION (n)</code>.</p>
<p>Details of the interchanges and the block structure of <code dir="ltr">d</code>, as determined by <code dir="ltr">SSPTRF</code>.</p>
<ul>
<li>
<p>If <code dir="ltr">ipiv(k) &gt; 0</code>, then rows and columns <code dir="ltr">k</code> and <code dir="ltr">ipiv(k)</code> were interchanged, and <code dir="ltr">d(k,k)</code> is a 1 by1 diagonal block.</p>
</li>
<li>
<p>If <code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code> and <code dir="ltr">ipiv(k) = ipiv(k-1) &lt; 0</code>, then rows and columns <code dir="ltr">k-1</code> and <code dir="ltr">-ipiv(k)</code> were interchanged and <code dir="ltr">d(k-1:k,k-1:k)</code> is a 2 by 2 diagonal block.</p>
</li>
<li>
<p>If <code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> and <code dir="ltr">ipiv(k) = ipiv(k+1) &lt; 0</code>, then rows and columns <code dir="ltr">k+1</code> and <code dir="ltr">-ipiv(k)</code> were interchanged and <code dir="ltr">d(k:k+1,k:k+1)</code> is a 2 by 2 diagonal block.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t104" headers="r1c1-t104">
<p><code dir="ltr">b</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t104 r1c2-t104">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT/DBL</code><code dir="ltr">, DIMENSION (ldb, nrhs)</code>.</p>
<p>On entry, the <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> right hand side matrix <code dir="ltr">b</code>.</p>
<p>On exit, if <code dir="ltr">info = 0</code> , the <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> solution matrix <code dir="ltr">X</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t104" headers="r1c1-t104">
<p><code dir="ltr">ldb</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t104 r1c2-t104">
<p>The leading dimension of the array <code dir="ltr">b</code>.</p>
<p><code dir="ltr">ldb &gt;= max(1,n)</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t104" headers="r1c1-t104">
<p><code dir="ltr">info</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t104 r1c2-t104">
<ul>
<li>
<p><code dir="ltr">= 0</code> : successful exit</p>
</li>
<li>
<p><code dir="ltr">&lt; 0</code> : if <code dir="ltr">info = -i</code>, the <code dir="ltr">i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code dir="ltr">&gt; 0</code> : if <code dir="ltr">info = i</code>, <code dir="ltr">d(i,i)</code> is exactly zero. The factorization has been completed, but the block diagonal matrix <code dir="ltr">d</code> is exactly singular, so the solution could not be computed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t104" headers="r1c1-t104">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t104 r1c2-t104">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p><code dir="ltr">&#39;C&#39;</code>: column-major (default)</p>
</li>
<li>
<p><code dir="ltr">&#39;R&#39;</code>: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71340" class="refsect2"><a id="CIAGEJCI"></a>
<h3 class="refsect2"><a id="sthref19322"></a>LAPACK_STEV Procedures</h3>
<p>This procedure computes all eigenvalues and, optionally, eigenvectors of a real symmetric tridiagonal matrix <code dir="ltr">A</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19323"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.LAPACK_STEV (
   jobz     IN      flag,
   n        IN      POSITIVEN,
   d        IN OUT  UTL_NLA_ARRAY_DBL,
   e        IN OUT  UTL_NLA_ARRAY_DBL,
   z        IN OUT  UTL_NLA_ARRAY_DBL,
   ldz      IN      POSITIVEN,
   info     OUT     INTEGER,
   pack     IN      flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.LAPACK_STEV (
   jobz     IN      flag,
   n        IN      POSITIVEN,
   d        IN OUT  UTL_NLA_ARRAY_FLT,
   e        IN OUT  UTL_NLA_ARRAY_FLT,
   z        IN OUT  UTL_NLA_ARRAY_FLT,
   ldz      IN      POSITIVEN,
   info     OUT     INTEGER,
   pack     IN      flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19324"></a>Parameters</p>
<div id="ARPLS71341" class="tblformal">
<p class="titleintable"><a id="sthref19325"></a><a id="sthref19326"></a>Table 259-56 LAPACK_STEV Procedure Parameters</p>
<table class="cellalignment4330" title="LAPACK_STEV Procedure Parameters" summary="This table describes the Parameters of the UTL_NLA.LAPACK_STEV subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t106">Parameter</th>
<th class="cellalignment4328" id="r1c2-t106">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t106" headers="r1c1-t106">
<p><code dir="ltr">jobz</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t106 r1c2-t106">
<ul>
<li>
<p><code dir="ltr">&#39;N&#39;</code>: Compute eigenvalues only.</p>
</li>
<li>
<p><code dir="ltr">&#39;V&#39;</code>: Compute eigenvalues and eigenvectors.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t106" headers="r1c1-t106">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t106 r1c2-t106">
<p>The order of the matrix <code dir="ltr">a. N &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t106" headers="r1c1-t106">
<p><code dir="ltr">d</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t106 r1c2-t106">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT/DBL</code>, <code dir="ltr">DIMENSION (n)</code>.</p>
<ul>
<li>
<p>On entry, the <code dir="ltr">n</code> diagonal elements of the tridiagonal matrix <code dir="ltr">A</code>.</p>
</li>
<li>
<p>On exit, if <code dir="ltr">info = 0</code>, the eigenvalues in ascending order.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t106" headers="r1c1-t106">
<p>e</p>
</td>
<td class="cellalignment4329" headers="r5c1-t106 r1c2-t106">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT/DBL</code>, <code dir="ltr">DIMENSION (n)</code>.</p>
<ul>
<li>
<p>On entry, the <code dir="ltr">(n-1)</code> subdiagonal elements of the tridiagonal matrix <code dir="ltr">A</code>, stored in elements 1 to <code dir="ltr">n-1</code> of <code dir="ltr">e</code>. <code dir="ltr">e(n)</code> need not be set, but is used by the subprogram.</p>
</li>
<li>
<p>On exit, the contents of <code dir="ltr">e</code> are destroyed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t106" headers="r1c1-t106">
<p><code dir="ltr">z</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t106 r1c2-t106">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT/DBL</code>, <code dir="ltr">DIMENSION (ldz, n)</code>.</p>
<ul>
<li>
<p>If <code dir="ltr">jobz = &#39;V&#39;</code>, then if <code dir="ltr">info = 0</code>, <code dir="ltr">z</code> contains the orthonormal eigenvectors of the matrix <code dir="ltr">A</code>, with the <code dir="ltr">i</code>-th column of <code dir="ltr">z</code> holding the eigenvector associated with <code dir="ltr">d(i)</code>.</p>
</li>
<li>
<p>If <code dir="ltr">jobz = &#39;N&#39;</code>, then <code dir="ltr">z</code> is not referenced.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t106" headers="r1c1-t106">
<p><code dir="ltr">ldz</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t106 r1c2-t106">
<p>The leading dimension of the array <code dir="ltr">z</code>. <code dir="ltr">ldz &gt;= 1</code>, and if <code dir="ltr">jobz = &#39;v&#39;</code>, <code dir="ltr">ldz &gt;= max(1,n)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t106" headers="r1c1-t106">
<p><code dir="ltr">info</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t106 r1c2-t106">
<ul>
<li>
<p><code dir="ltr">= 0</code> : successful exit</p>
</li>
<li>
<p><code dir="ltr">&lt; 0</code> : if <code dir="ltr">info = -i</code>, the <code dir="ltr">i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code dir="ltr">&gt; 0</code> : if <code dir="ltr">info = i</code>, the algorithm failed to converge; <code dir="ltr">i</code> off-diagonal elements of an intermediate tridiagonal form did not converge to zero</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t106" headers="r1c1-t106">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t106 r1c2-t106">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p><code dir="ltr">&#39;C&#39;</code>: column-major (default)</p>
</li>
<li>
<p><code dir="ltr">&#39;R&#39;</code>: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71342" class="refsect2"><a id="CIAHFFCC"></a>
<h3 class="refsect2"><a id="sthref19327"></a>LAPACK_STEVD Procedures</h3>
<p>This procedure computes all eigenvalues and, optionally, eigenvectors of a real symmetric tridiagonal matrix. If eigenvectors are desired, it uses a divide and conquer algorithm that makes mild assumptions about floating point arithmetic.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19328"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.LAPACK_STEVD (
   jobz     IN      flag,
   n        IN      POSITIVEN,
   d        IN OUT  UTL_NLA_ARRAY_DBL,
   e        IN OUT  UTL_NLA_ARRAY_DBL,
   z        IN OUT  UTL_NLA_ARRAY_DBL,
   ldz      IN      POSITIVEN,
   info     OUT     INTEGER,
   pack     IN      flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.LAPACK_STEVD(
   jobz     IN      flag,
   n        IN      POSITIVEN,
   d        IN OUT  UTL_NLA_ARRAY_FLT,
   e        IN OUT  UTL_NLA_ARRAY_FLT,
   z        IN OUT  UTL_NLA_ARRAY_FLT,
   ldz      IN      POSITIVEN,
   info     OUT     INTEGER,
   pack     IN      flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19329"></a>Parameters</p>
<div id="ARPLS71343" class="tblformal">
<p class="titleintable"><a id="sthref19330"></a><a id="sthref19331"></a>Table 259-57 LAPACK_STEVD Procedure Parameters</p>
<table class="cellalignment4330" title="LAPACK_STEVD Procedure Parameters" summary="This table describes the Parameters of the UTL_NLA.LAPACK_STEVD subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t108">Parameter</th>
<th class="cellalignment4328" id="r1c2-t108">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t108" headers="r1c1-t108">
<p><code dir="ltr">jobz</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t108 r1c2-t108">
<ul>
<li>
<p><code dir="ltr">&#39;N&#39;</code>: Compute eigenvalues only.</p>
</li>
<li>
<p><code dir="ltr">&#39;V&#39;</code>: Compute eigenvalues and eigenvectors.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t108" headers="r1c1-t108">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t108 r1c2-t108">
<p>The order of the matrix <code dir="ltr">a. N &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t108" headers="r1c1-t108">
<p><code dir="ltr">d</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t108 r1c2-t108">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT/DBL</code>, <code dir="ltr">DIMENSION (n)</code>.</p>
<ul>
<li>
<p>On entry, the <code dir="ltr">n</code> diagonal elements of the tridiagonal matrix <code dir="ltr">A</code>.</p>
</li>
<li>
<p>On exit, if <code dir="ltr">info = 0</code>, the eigenvalues in ascending order.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t108" headers="r1c1-t108">
<p>e</p>
</td>
<td class="cellalignment4329" headers="r5c1-t108 r1c2-t108">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT/DBL</code>, <code dir="ltr">DIMENSION (n)</code>.</p>
<ul>
<li>
<p>On entry, the <code dir="ltr">(n-1)</code> subdiagonal elements of the tridiagonal matrix <code dir="ltr">A</code>, stored in elements <code dir="ltr">1</code> to <code dir="ltr">n-1</code> of <code dir="ltr">e</code>. <code dir="ltr">e(n)</code> need not be set, but is used by the subprogram.</p>
</li>
<li>
<p>On exit, the contents of <code dir="ltr">e</code> are destroyed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t108" headers="r1c1-t108">
<p><code dir="ltr">z</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t108 r1c2-t108">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT/DBL</code>, <code dir="ltr">DIMENSION (ldz, n)</code>.</p>
<ul>
<li>
<p>If <code dir="ltr">jobz = &#39;V&#39;</code>, then if <code dir="ltr">info = 0</code>, <code dir="ltr">z</code> contains the orthonormal eigenvectors of the matrix <code dir="ltr">A</code>, with the <code dir="ltr">i</code>-th column of <code dir="ltr">z</code> holding the eigenvector associated with <code dir="ltr">d(i)</code>.</p>
</li>
<li>
<p>If <code dir="ltr">jobz = &#39;N&#39;</code>, then <code dir="ltr">z</code> is not referenced.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t108" headers="r1c1-t108">
<p><code dir="ltr">ldz</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t108 r1c2-t108">
<p>The leading dimension of the array <code dir="ltr">z</code>. <code dir="ltr">ldz &gt;= 1</code>, and if <code dir="ltr">jobz = &#39;v&#39;</code>, <code dir="ltr">ldz &gt;= max(1,n)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t108" headers="r1c1-t108">
<p><code dir="ltr">info</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t108 r1c2-t108">
<ul>
<li>
<p><code dir="ltr">= 0</code> : successful exit</p>
</li>
<li>
<p><code dir="ltr">&lt; 0</code> : if <code dir="ltr">info = -i</code>, the <code dir="ltr">i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code dir="ltr">&gt; 0</code> : if <code dir="ltr">info = i</code>, the algorithm failed to converge; <code dir="ltr">i</code> off-diagonal elements of an intermediate tridiagonal form did not converge to zero</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t108" headers="r1c1-t108">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t108 r1c2-t108">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p><code dir="ltr">&#39;C&#39;</code>: column-major (default)</p>
</li>
<li>
<p><code dir="ltr">&#39;R&#39;</code>: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71344" class="refsect2"><a id="CIAIDIGJ"></a>
<h3 class="refsect2"><a id="sthref19332"></a>LAPACK_SYEV Procedures</h3>
<p>This procedure computes all eigenvalues and, optionally, eigenvectors of a real symmetric matrix <code dir="ltr">A</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19333"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.LAPACK_SYEV (
   jobz     IN      flag,
   uplo     IN      flag,
   n        IN      POSITIVEN,
   a        IN OUT  UTL_NLA_ARRAY_DBL,
   lda      IN      POSITIVEN,
   w        IN OUT  UTL_NLA_ARRAY_DBL,
   info     OUT     INTEGER,
   pack     IN      flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.LAPACK_SYEV (
   jobz     IN      flag,
   uplo     IN      flag,
   n        IN      POSITIVEN,
   a        IN OUT  UTL_NLA_ARRAY_FLT,
   lda      IN      POSITIVEN,
   w        IN OUT  UTL_NLA_ARRAY_FLT,
   info     OUT     INTEGER,
   pack     IN      flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19334"></a>Parameters</p>
<div id="ARPLS71345" class="tblformal">
<p class="titleintable"><a id="sthref19335"></a><a id="sthref19336"></a>Table 259-58 LAPACK_SYEV Procedure Parameters</p>
<table class="cellalignment4330" title="LAPACK_SYEV Procedure Parameters" summary="This table describes the Parameters of the UTL_NLA.LAPACK_SYEV subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t110">Paramete</th>
<th class="cellalignment4328" id="r1c2-t110">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t110" headers="r1c1-t110">
<p><code dir="ltr">jobz</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t110 r1c2-t110">
<ul>
<li>
<p><code dir="ltr">&#39;N&#39;</code>: Compute eigenvalues only.</p>
</li>
<li>
<p><code dir="ltr">&#39;V&#39;</code>: Compute eigenvalues and eigenvectors.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t110" headers="r1c1-t110">
<p><code dir="ltr">uplo</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t110 r1c2-t110">
<ul>
<li>
<p><code dir="ltr">&#39;U&#39;</code>: Upper triangle of A is stored.</p>
</li>
<li>
<p><code dir="ltr">&#39;L&#39;</code>: Upper triangle of A is stored.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t110" headers="r1c1-t110">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t110 r1c2-t110">
<p>The order of the matrix <code dir="ltr">a. N &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t110" headers="r1c1-t110">
<p><code dir="ltr">a</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t110 r1c2-t110">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL, DIMENSION (lda, n)</code>.</p>
<p>On entry, the symmetric matrix <code dir="ltr">a</code>:</p>
<ul>
<li>
<p>If <code dir="ltr">uplo = &#39;U&#39;</code>, the leading <code dir="ltr">n</code> by <code dir="ltr">n</code> upper triangular part of <code dir="ltr">a</code> contains the upper triangular part of the matrix <code dir="ltr">a</code>.</p>
</li>
<li>
<p>If <code dir="ltr">uplo = &#39;L&#39;</code>, the leading <code dir="ltr">n</code> by<code dir="ltr">n</code> lower triangular part of <code dir="ltr">a</code> contains the lower triangular part of the matrix <code dir="ltr">a</code>.</p>
</li>
</ul>
<p>On exit:</p>
<ul>
<li>
<p>If <code dir="ltr">jobz = &#39;V&#39;</code>, then if <code dir="ltr">info = 0</code>, <code dir="ltr">a</code> contains the orthonormal eigenvectors of the matrix <code dir="ltr">a</code>.</p>
</li>
<li>
<p>If <code dir="ltr">jobz = &#39;N&#39;</code>, then on exit the lower triangle (if <code dir="ltr">uplo = &#39;L&#39;</code>) or the upper triangle (if <code dir="ltr">uplo=&#39;U&#39;</code>) of <code dir="ltr">a</code>, including the diagonal, is destroyed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t110" headers="r1c1-t110">
<p><code dir="ltr">lda</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t110 r1c2-t110">
<p>The leading dimension of the array <code dir="ltr">a</code>. <code dir="ltr">lda &gt;= max(1,n)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t110" headers="r1c1-t110">
<p><code dir="ltr">w</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t110 r1c2-t110">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT/DBL</code>, <code dir="ltr">DIMENSION (n)</code>.</p>
<p>If <code dir="ltr">info = 0</code>, the eigenvalues in ascending order.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t110" headers="r1c1-t110">
<p><code dir="ltr">info</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t110 r1c2-t110">
<ul>
<li>
<p><code dir="ltr">= 0</code> : successful exit</p>
</li>
<li>
<p><code dir="ltr">&lt; 0</code> : if <code dir="ltr">info = -i</code>, the <code dir="ltr">i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code dir="ltr">&gt; 0</code> : if <code dir="ltr">info = i</code>, the algorithm failed to converge; <code dir="ltr">i</code> off-diagonal elements of an intermediate tridiagonal form did not converge to zero</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t110" headers="r1c1-t110">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t110 r1c2-t110">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p><code dir="ltr">&#39;C&#39;</code>: column-major (default)</p>
</li>
<li>
<p><code dir="ltr">&#39;R&#39;</code>: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71346" class="refsect2"><a id="CIAGBGGH"></a>
<h3 class="refsect2"><a id="sthref19337"></a>LAPACK_SYEVD Procedures</h3>
<p>This procedure computes all eigenvalues and, optionally, eigenvectors of a real symmetric matrix <code dir="ltr">A</code>. If eigenvectors are desired, it uses a divide and conquer algorithm that makes mild assumptions about floating point arithmetic.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19338"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.LAPACK_SYEVD (
</pre>
<pre dir="ltr">   jobz     IN      flag,
   uplo     IN      flag,
   n        IN      POSITIVEN,
   a        IN OUT  UTL_NLA_ARRAY_DBL,
   lda      IN      POSITIVEN,
   w        IN OUT  UTL_NLA_ARRAY_DBL,
   info     OUT     INTEGER,
   pack     IN      flag DEFAULT &#39;C&#39;);

UTL_NLA.LAPACK_SYEVD (
   jobz     IN      flag,
   uplo     IN      flag,
   n        IN      POSITIVEN,
   a        IN OUT  UTL_NLA_ARRAY_FLT,
   lda      IN      POSITIVEN,
   w        IN OUT  UTL_NLA_ARRAY_FLT,
   info     OUT     INTEGER,
   pack     IN      flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19339"></a>Parameters</p>
<div id="ARPLS71347" class="tblformal">
<p class="titleintable"><a id="sthref19340"></a><a id="sthref19341"></a>Table 259-59 LAPACK_SYEVD Procedure Parameters</p>
<table class="cellalignment4330" title="LAPACK_SYEVD Procedure Parameters" summary="This table describes the Parameters of the UTL_NLA.LAPACK_SYEVD subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t112">Parameter</th>
<th class="cellalignment4328" id="r1c2-t112">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t112" headers="r1c1-t112">
<p><code dir="ltr">jobz</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t112 r1c2-t112">
<ul>
<li>
<p><code dir="ltr">&#39;N&#39;</code>: Compute eigenvalues only.</p>
</li>
<li>
<p><code dir="ltr">&#39;V&#39;</code>: Compute eigenvalues and eigenvectors.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t112" headers="r1c1-t112">
<p><code dir="ltr">uplo</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t112 r1c2-t112">
<ul>
<li>
<p><code dir="ltr">&#39;U&#39;</code> : Upper triangle of A is stored.</p>
</li>
<li>
<p><code dir="ltr">&#39;L&#39;</code>: Upper triangle of A is stored.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t112" headers="r1c1-t112">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t112 r1c2-t112">
<p>The order of the matrix <code dir="ltr">a. N &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t112" headers="r1c1-t112">
<p><code dir="ltr">a</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t112 r1c2-t112">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL, DIMENSION (lda, n)</code>.</p>
<p>On entry, the symmetric matrix <code dir="ltr">a</code>:</p>
<ul>
<li>
<p>If <code dir="ltr">uplo = &#39;U&#39;</code>, the leading <code dir="ltr">n</code> by <code dir="ltr">n</code> upper triangular part of <code dir="ltr">a</code> contains the upper triangular part of the matrix <code dir="ltr">a</code>.</p>
</li>
<li>
<p>If <code dir="ltr">uplo = &#39;L&#39;</code>, the leading <code dir="ltr">n</code> by<code dir="ltr">n</code> lower triangular part of <code dir="ltr">a</code> contains the lower triangular part of the matrix <code dir="ltr">a</code>.</p>
</li>
</ul>
<p>On exit:</p>
<ul>
<li>
<p>If <code dir="ltr">jobz = &#39;V&#39;</code>, then if <code dir="ltr">info = 0</code>, <code dir="ltr">a</code> contains the orthonormal eigenvectors of the matrix <code dir="ltr">a</code>.</p>
</li>
<li>
<p>If <code dir="ltr">jobz = &#39;N&#39;</code>, then on exit the lower triangle (if <code dir="ltr">uplo = &#39;L&#39;</code>) or the upper triangle (if <code dir="ltr">uplo = &#39;U&#39;</code>) of <code dir="ltr">a</code>, including the diagonal, is destroyed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t112" headers="r1c1-t112">
<p><code dir="ltr">lda</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t112 r1c2-t112">
<p>The leading dimension of the array <code dir="ltr">a</code>. <code dir="ltr">lda &gt;= max(1,n)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t112" headers="r1c1-t112">
<p><code dir="ltr">w</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t112 r1c2-t112">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT/DBL</code>, <code dir="ltr">DIMENSION (n)</code>.</p>
<p>If <code dir="ltr">info = 0</code>, the eigenvalues in ascending order.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t112" headers="r1c1-t112">
<p><code dir="ltr">info</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t112 r1c2-t112">
<ul>
<li>
<p><code dir="ltr">= 0</code> : successful exit</p>
</li>
<li>
<p><code dir="ltr">&lt; 0</code> : if <code dir="ltr">info = -i</code>, the <code dir="ltr">i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code dir="ltr">&gt; 0</code> : if <code dir="ltr">info = i</code>, the algorithm failed to converge; <code dir="ltr">i</code> off-diagonal elements of an intermediate tridiagonal form did not converge to zero</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t112" headers="r1c1-t112">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t112 r1c2-t112">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p><code dir="ltr">&#39;C&#39;</code>: column-major (default)</p>
</li>
<li>
<p><code dir="ltr">&#39;R&#39;</code>: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71348" class="refsect2"><a id="CIADGGFJ"></a>
<h3 class="refsect2"><a id="sthref19342"></a>LAPACK_SYSV Procedures</h3>
<p>This procedure computes the solution to a real system of linear equations</p>
<pre dir="ltr">a * x = b
</pre>
<p>where <code dir="ltr">a</code> is an n by n symmetric matrix, and <code dir="ltr">x</code> and <code dir="ltr">b</code> are n by nrhs matrices.</p>
<p>The diagonal pivoting method is used to factor <code dir="ltr">A</code> as</p>
<p><code dir="ltr">A = U * D * U**T</code>, if <code dir="ltr">UPLO = &#39;U&#39;</code></p>
<p>or</p>
<p><code dir="ltr">A = L * D * L**T</code>, if <code dir="ltr">UPLO = &#39;L&#39;</code></p>
<p>where <code dir="ltr">U</code> (or <code dir="ltr">L</code>) is a product of permutation and unit upper (lower) triangular matrices, and <code dir="ltr">D</code> is symmetric and block diagonal with 1 by 1 and 2 by 2 diagonal blocks. The factored form of <code dir="ltr">A</code> is then used to solve the system of equations <code dir="ltr">A * X = B.</code></p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFBCIJ">LAPACK Driver Routines (Linear Equations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19343"></a>Syntax</p>
<pre dir="ltr">UTL_NLA.LAPACK_SYSV (
   uplo    IN      flag,
   n       IN      POSITIVEN,
   nrhs    IN      POSITIVEN,
   a       IN OUT  UTL_NLA_ARRAY_DBL,
   lda     IN      POSITIVEN,
   ipiv    IN OUT  UTL_NLA_ARRAY_INT,
   b       IN OUT  UTL_NLA_ARRAY_DBL,
   ldb     IN      POSITIVEN,
   info    OUT     INTEGER,
   pack    IN      flag DEFAULT &#39;C&#39;);
</pre>
<pre dir="ltr">UTL_NLA.LAPACK_SYSV (
   uplo   IN       flag,
   n      IN       POSITIVEN,
   nrhs   IN       POSITIVEN,
   a      IN OUT   UTL_NLA_ARRAY_FLT,
   lda    IN       POSITIVEN,
   ipiv   IN OUT   UTL_NLA_ARRAY_INT,
   b      IN OUT   UTL_NLA_ARRAY_FLT,
   ldb    IN       POSITIVEN,
   info   OUT      INTEGER,
   pack   IN       flag DEFAULT &#39;C&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19344"></a>Parameters</p>
<div id="ARPLS71349" class="tblformal">
<p class="titleintable"><a id="sthref19345"></a><a id="sthref19346"></a>Table 259-60 LAPACK_SYSV Procedure Parameters</p>
<table class="cellalignment4330" title="LAPACK_SYSV Procedure Parameters" summary="This table describes the Parameters of the UTL_NLA.LAPACK_SYSV subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t114">Parameter</th>
<th class="cellalignment4328" id="r1c2-t114">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t114" headers="r1c1-t114">
<p><code dir="ltr">uplo</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t114 r1c2-t114">
<ul>
<li>
<p><code dir="ltr">uplo = &#39;U&#39;</code>. Upper triangular of <code dir="ltr">A</code> is stored.</p>
</li>
<li>
<p><code dir="ltr">uplo = &#39;L&#39;</code> . Lower triangular of <code dir="ltr">A</code> is stored.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t114" headers="r1c1-t114">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t114 r1c2-t114">
<p>The number of linear equations, which is the order of the matrix <code dir="ltr">a. N &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t114" headers="r1c1-t114">
<p><code dir="ltr">nrhs</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t114 r1c2-t114">
<p>The number of right-hand sides, which is the number of columns of the matrix <code dir="ltr">b</code>. <code dir="ltr">nrhs &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t114" headers="r1c1-t114">
<p><code dir="ltr">a</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t114 r1c2-t114">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT</code>/<code dir="ltr">DBL, DIMENSION (n-1)</code>.</p>
<p>On entry, the symmetric matrix <code dir="ltr">a</code>. If <code dir="ltr">UPLO</code> = <code dir="ltr">&#39;U&#39;</code>, the leading n by n upper triangular part of a contains the upper triangular part of the matrix <code dir="ltr">a</code>, and the strictly lower triangular part of a is not referenced. If <code dir="ltr">uplo = &#39;L&#39;</code>, the leading n by n lower triangular part of a contains the lower triangular part of the matrix <code dir="ltr">a</code>, and the strictly upper triangular part of <code dir="ltr">a</code> is not referenced.</p>
<p>On exit, if <code dir="ltr">info</code> = 0, the block diagonal matrix <code dir="ltr">d</code> and the multipliers used to obtain the factor <code dir="ltr">U</code> or <code dir="ltr">L</code> from the factorization <code dir="ltr">A = U*D*U**T</code> or <code dir="ltr">A = L*D*L**T</code> as computed by <code dir="ltr">SSYTRF</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t114" headers="r1c1-t114">
<p><code dir="ltr">lda</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t114 r1c2-t114">
<p>The leading dimension of the array <code dir="ltr">a</code>.</p>
<p><code dir="ltr">lda &gt;= max(1,n)</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t114" headers="r1c1-t114">
<p><code dir="ltr">ipiv</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t114 r1c2-t114">
<p><code dir="ltr">INTEGER array</code><code dir="ltr">, DIMENSION (ldb, nrhs)</code>.</p>
<p>Details of the interchanges and the block structure of <code dir="ltr">d</code>, as determined by <code dir="ltr">SSYTRF</code>.</p>
<ul>
<li>
<p>If <code dir="ltr">ipiv(k) &gt; 0</code>, then rows and columns <code dir="ltr">k</code> and <code dir="ltr">ipiv(k)</code> were interchanged, and <code dir="ltr">d(k,k)</code> is a 1 by1 diagonal block.</p>
</li>
<li>
<p>If <code dir="ltr">uplo</code> = <code dir="ltr">&#39;U&#39;</code> and <code dir="ltr">ipiv(k) = ipiv(k-1) &lt; 0</code>, then rows and columns <code dir="ltr">k-1</code> and <code dir="ltr">-ipiv(k)</code> were interchanged and <code dir="ltr">d(k-1:k,k-1:k)</code> is a 2 by 2 diagonal block.</p>
</li>
<li>
<p>If <code dir="ltr">uplo</code> = <code dir="ltr">&#39;L&#39;</code> and <code dir="ltr">ipiv(k) = ipiv(k+1) &lt; 0,</code> then rows and columns <code dir="ltr">k+1</code> and <code dir="ltr">-ipiv(k)</code> were interchanged and <code dir="ltr">d(k:k+1,k:k+1)</code> is a 2 by 2 diagonal block.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t114" headers="r1c1-t114">
<p><code dir="ltr">b</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t114 r1c2-t114">
<p><code dir="ltr">UTL_NLA_ARRAY_FLT/DBL</code><code dir="ltr">, DIMENSION (ldb, nrhs)</code>.</p>
<p>On entry, the <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> matrix of right hand side matrix <code dir="ltr">b</code>.</p>
<p>On exit, if <code dir="ltr">info = 0</code> , the <code dir="ltr">n</code> by <code dir="ltr">nrhs</code> solution matrix <code dir="ltr">X</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t114" headers="r1c1-t114">
<p><code dir="ltr">ldb</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t114 r1c2-t114">
<p>The leading dimension of the array <code dir="ltr">b</code>.</p>
<p><code dir="ltr">ldb &gt;= max(1,n)</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t114" headers="r1c1-t114">
<p><code dir="ltr">info</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t114 r1c2-t114">
<ul>
<li>
<p><code dir="ltr">= 0</code> : successful exit</p>
</li>
<li>
<p><code dir="ltr">&lt; 0</code> : if <code dir="ltr">info = -i</code> , the <code dir="ltr">i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code dir="ltr">&gt; 0</code> : if <code dir="ltr">info</code> = <code dir="ltr">i, d(i,i)</code> is exactly zero. The factorization has been completed, but the block diagonal matrix <code dir="ltr">d</code> is exactly singular, so the solution could not be computed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t114" headers="r1c1-t114">
<p><code dir="ltr">pack</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t114 r1c2-t114">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p><code dir="ltr">&#39;C&#39;</code>: column-major (default)</p>
</li>
<li>
<p><code dir="ltr">&#39;R&#39;</code>: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4320">
<tr>
<td class="cellalignment4329">
<table class="cellalignment4325">
<tr>
<td class="cellalignment4324"><a href="u_match.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4324"><a href="u_raw.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4332">
<table class="cellalignment4323">
<tr>
<td class="cellalignment4324"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4324"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4324"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4324"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4324"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4324"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>