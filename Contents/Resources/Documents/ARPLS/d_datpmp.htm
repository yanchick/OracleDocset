<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-2247"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/DBMS_DATAPUMP"></a><title>DBMS_DATAPUMP</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1086"/>
<meta name="dcterms.created" content="2016-09-02T5:36:16Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database PL/SQL Packages and Types Reference"/>
<meta name="dcterms.identifier" content="E41829-07"/>
<meta name="dcterms.isVersionOf" content="ARPLS"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="d_dmtran.htm" title="Previous" type="text/html"/>
<link rel="Next" href="d_dbfs_content.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41829-07.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">51/290</span> <!-- End Header -->
<div id="ARPLS356" class="chapter"><a id="BABHBEHH"></a> <a id="i1007277"></a>
<h1 class="chapter"><span class="secnum">47</span> DBMS_DATAPUMP</h1>
<p>The <code dir="ltr">DBMS_DATAPUMP</code> package<a id="sthref2865"></a> is used to move all, or part of, a database between databases, including both data and metadata.</p>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<a class="olink SUTIL" href="../SUTIL/toc.htm"><span class="italic">Oracle Database Utilities</span></a> for more information on the concepts behind the <code dir="ltr">DBMS_DATAPUMP</code> API, how it works, and how it is implemented in the Data Pump Export and Import utilities</div>
<p>This chapter contains the following topics:</p>
<ul>
<li>
<p><a href="#BABEDDCF">Using DBMS_DATAPUMP</a></p>
<ul>
<li>
<p>Overview</p>
</li>
<li>
<p>Security Model</p>
</li>
<li>
<p>Constants</p>
</li>
</ul>
</li>
<li>
<p><a href="#BABCAJEB">Data Structures</a></p>
<ul>
<li>
<p>Data Structures - Object Types</p>
</li>
</ul>
</li>
<li>
<p><a href="#BABGCGAB">Summary of DBMS_DATAPUMP Subprograms</a></p>
</li>
</ul>
<div class="refentry"><a id="BABEDDCF"></a>
<div id="ARPLS630" class="refsect1">
<h2 class="refsect1">Using DBMS_DATAPUMP</h2>
<p>This section contains topics that relate to using the <code dir="ltr">DBMS_DATAPUMP</code> package.</p>
<ul>
<li>
<p><a href="#i1011569">Overview</a></p>
</li>
<li>
<p><a href="#i1007621">Security Model</a></p>
</li>
<li>
<p><a href="#BABDHDEA">Constants</a></p>
</li>
</ul>
<div id="ARPLS66010" class="refsect2"><a id="i1011569"></a>
<h3 class="refsect2">Overview</h3>
<p>The support and functionality provided by <code dir="ltr">DBMS_DATAPUMP</code> is as follows:</p>
<ul>
<li>
<p>The source and target databases can have different hardware, operating systems, character sets, time zones, and versions.</p>
</li>
<li>
<p>All object types and datatypes existing in Oracle Database 11<span class="italic">g</span> and higher are supported.</p>
</li>
<li>
<p>Data and metadata can be transferred between databases without using any intermediary files.</p>
</li>
<li>
<p>A subset of a database can be moved based upon object type and names of objects.</p>
</li>
<li>
<p>Schema names, data file names, tablespace names, and data can be transformed at import time.</p>
</li>
<li>
<p>Previously aborted export and import jobs can be restarted without duplicating or omitting any data or metadata from the original job.</p>
</li>
<li>
<p>The resources applied to an export or import job can be modified.</p>
</li>
<li>
<p>Data in an Oracle proprietary format can be unloaded and loaded.</p>
</li>
</ul>
</div>
<!-- class="refsect2" -->
<div id="ARPLS66011" class="refsect2"><a id="i1007621"></a>
<h3 class="refsect2">Security Model</h3>
<p>Security for the <code dir="ltr">DBMS_DATAPUMP</code> package is implemented through roles.</p>
<div id="ARPLS66012" class="refsect3"><a id="sthref2866"></a>
<h4 class="refsect3">Roles</h4>
<p>The <code dir="ltr">DATAPUMP_EXP_FULL_DATABASE</code> and <code dir="ltr">DATAPUMP_IMP_FULL_DATABASE</code> roles<a id="sthref2867"></a> allow privileged users to take full advantage of the API. The Data Pump API will use these roles to determine whether privileged application roles should be assigned to the processes comprising the job.</p>
<div id="ARPLS66013" class="refsect4"><a id="sthref2868"></a>
<h5 class="refsect4">DATAPUMP_EXP_FULL_DATABASE</h5>
<p>The <code dir="ltr">DATAPUMP_EXP_FULL_DATABASE</code> role affects only Export operations. It allows users running these operations to do the following:</p>
<ul>
<li>
<p>Perform the operation outside of the scope of their schema</p>
</li>
<li>
<p>Monitor jobs that were initiated by another user</p>
</li>
<li>
<p>Export objects (for example, TABLESPACE definitions) that unprivileged users cannot reference</p>
</li>
</ul>
<p>Although the <code dir="ltr">SYS</code> schema does not have the <code dir="ltr">DATAPUMP_EXP_FULL_DATABASE</code> role assigned to it, all security checks performed by Data Pump that require the <code dir="ltr">DATAPUMP_EXP_FULL_DATABASE</code> role will also grant access to the <code dir="ltr">SYS</code> schema.</p>
<br/></div>
<!-- class="refsect4" -->
<div id="ARPLS66014" class="refsect4"><a id="sthref2869"></a>
<h5 class="refsect4">DATAPUMP_IMP_FULL_DATABASE</h5>
<p>The <code dir="ltr">DATAPUMP_IMP_FULL_DATABASE</code> role affects only Import and SQL_FILE operations. It allows users running these operations to do the following:</p>
<ul>
<li>
<p>Perform the operation outside of the scope of their schema</p>
</li>
<li>
<p>Monitor jobs that were initiated by another user</p>
</li>
<li>
<p>Import objects (for example, DIRECTORY definitions) that unprivileged users cannot create</p>
</li>
</ul>
<p>Although the <code dir="ltr">SYS</code> schema does not have the <code dir="ltr">DATAPUMP_IMP_FULL_DATABASE</code> role assigned to it, all security checks performed by Data Pump that require the <code dir="ltr">DATAPUMP_IMP_FULL_DATABASE</code> role will also grant access to the <code dir="ltr">SYS</code> schema.</p>
<br/></div>
<!-- class="refsect4" --></div>
<!-- class="refsect3" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66015" class="refsect2"><a id="BABDHDEA"></a>
<h3 class="refsect2">Constants</h3>
<p>There are several public constants defined for use with the <code dir="ltr">DBMS_DATAPUMP</code>.<code dir="ltr">GET_STATUS</code> procedure. All such constants are defined as part of the <code dir="ltr">DBMS_DATAPUMP</code> package. Any references to these constants must be prefixed by <code dir="ltr">DBMS_DATAPUMP</code>. and followed by the symbols in the following lists:</p>
<div id="ARPLS66016" class="refsect3"><a id="sthref2870"></a>
<h4 class="refsect3">Mask Bit Definitions</h4>
<p>The following mask bit definitions are used for controlling the return of data through the <code dir="ltr">DBMS_DATAPUMP</code>.<code dir="ltr">GET_STATUS</code> procedure.</p>
<ul>
<li>
<p><code dir="ltr">KU$_STATUS_WIP</code> <code dir="ltr">CONSTANT BINARY_INTEGER := 1</code>;</p>
</li>
<li>
<p><code dir="ltr">KU$_STATUS_JOB_DESC</code> <code dir="ltr">CONSTANT BINARY_INTEGER := 2;</code></p>
</li>
<li>
<p><code dir="ltr">KU$_STATUS_JOB_STATUS</code> <code dir="ltr">CONSTANT BINARY_INTEGER := 4;</code></p>
</li>
<li>
<p><code dir="ltr">KU$_STATUS_JOB_ERROR</code> <code dir="ltr">CONSTANT BINARY_INTEGER := 8;</code></p>
</li>
</ul>
</div>
<!-- class="refsect3" -->
<div id="ARPLS66017" class="refsect3"><a id="sthref2871"></a>
<h4 class="refsect3">Dump File Type Definitions</h4>
<p>The following definitions are used for identifying types of dump files returned through the <code dir="ltr">DBMS_DATAPUMP</code>.<code dir="ltr">GET_STATUS</code> procedure.</p>
<ul>
<li>
<p><code dir="ltr">KU$_DUMPFILE_TYPE_DISK</code> <code dir="ltr">CONSTANT BINARY_INTEGER := 0;</code></p>
</li>
<li>
<p><code dir="ltr">KU$_DUMPFILE_TYPE_TEMPLATE CONSTANT BINARY_INTEGER := 3;</code></p>
</li>
</ul>
</div>
<!-- class="refsect3" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="BABCAJEB"></a>
<div id="ARPLS66018" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">Data Structures</h2>
<p>The <code dir="ltr">DBMS_DATAPUMP</code> package defines <code dir="ltr">OBJECT</code> types. The types<a id="sthref2872"></a> described in this section are defined in the <code dir="ltr">SYS</code> schema for use by the <code dir="ltr">GET_STATUS</code> function. <span class="italic">The way in which these types are defined and used may be different than what you are accustomed to. Be sure to read this section carefully.</span></p>
<p>The collection of types defined for use with the <code dir="ltr">GET_STATUS</code> procedure are version-specific and include version information in the names of the types. Once introduced, these types will always be provided and supported in future versions of Oracle Database and will not change. However, in future releases of Oracle Database, new versions of these types might be created that provide new or different information. The new versions of these types will have different version information embedded in the type names.</p>
<p>For example, in Oracle Database 12<span class="italic">c</span>, Release 1 (12.1), there is a <code dir="ltr">sys.ku$_Status1210</code> type, and in the next Oracle Database release, there could be a <code dir="ltr">sys.ku$_Status1310</code> type defined. Both types could be used with the <code dir="ltr">GET_STATUS</code> procedure.</p>
<p>Public synonyms have been defined for each of the types used with the <code dir="ltr">GET_STATUS</code> procedure. This makes it easier to use the types and means that you do not have to be concerned with changes to the actual type names or schemas where they reside. Oracle recommends that you use these synonyms whenever possible.</p>
<p>For each of the types, there is a version-specific synonym and a generic synonym. For example, the version-specific synonym <code dir="ltr">ku$_Status1210</code> is defined for the <code dir="ltr">sys.ku$_Status1210</code> type.</p>
<p>The generic synonym always describes the latest version of that type. For example, in Oracle Database 12<span class="italic">c</span>, Release 1 (12.1), the generic synonym <code dir="ltr">ku$_Status</code> is defined as <code dir="ltr">ku$_Status1210</code>. In a future release, there might be a <code dir="ltr">ku$_Status1310</code> synonym for <code dir="ltr">sys.ku$Status1310</code>. Because the <code dir="ltr">ku$_Status</code> generic synonym always points to the latest definition, it would then point to <code dir="ltr">ku$_Status1310</code> rather than to <code dir="ltr">ku$_Status1210</code>.</p>
<p>The choice of whether to use version-specific synonyms or generic synonyms makes a significant difference in how you work. Using version-specific names protects your code from changes in future releases of Oracle Database because those types will continue to exist and be supported. However, access to new information will require code changes to use new synonym names for each of the types. Using the generic names implies that you always want the latest definition of the types and are prepared to deal with changes in different releases of Oracle Database.</p>
<p>When the version of Oracle Database that you are using changes, any C code that accesses types through generic synonym names will need to be recompiled.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Languages other than PL/SQL must ensure that their type definitions are properly aligned with the version-specific definitions.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i997417">GET_STATUS Procedure</a> for additional information about how types are used</div>
<div id="ARPLS66019" class="refsect2"><a id="BABJJAFC"></a>
<h3 class="refsect2">Data Structures - Object Types</h3>
<p>The <code dir="ltr">DBMS_DATAPUMP</code> package defines the following kinds of <code dir="ltr">OBJECT</code> types:</p>
<ul>
<li>
<p><a href="#BABGIEDD">Worker Status Types</a></p>
</li>
<li>
<p><a href="#BABEIDHG">Log Entry and Error Types</a></p>
</li>
<li>
<p><a href="#BABECDHA">Job Status Types</a></p>
</li>
<li>
<p><a href="#BABGEIEJ">Job Description Types</a></p>
</li>
<li>
<p><a href="#BABEEBFB">Status Types</a></p>
</li>
</ul>
<div id="ARPLS66020" class="refsect3"><a id="BABGIEDD"></a>
<h4 class="refsect3">Worker Status Types</h4>
<p>The worker status types describe what each worker process in a job is doing. The schema, object name, and object type of an object being processed will be provided. For workers processing user data, the partition name for a partitioned table (if any), the number of bytes processed in the partition, and the number of rows processed in the partition are also returned. Workers processing metadata provide status on the last object that was processed. No status for idle threads is returned.</p>
<p>The <code dir="ltr">percent_done</code> refers to the amount completed for the current data item being processed. It is not updated for metadata objects.</p>
<p>The worker status types are defined as follows:</p>
<pre dir="ltr">CREATE TYPE sys.ku$_WorkerStatus1010 AS OBJECT
        (
                worker_number     NUMBER,       -- Worker process identifier
                process_name      VARCHAR2(30), -- Worker process name
                state             VARCHAR2(30), -- Worker process state
                schema            VARCHAR2(30), -- Schema name
                name              VARCHAR2(4000),-- Object name
                object_type       VARCHAR2(200),-- Object type
                partition         VARCHAR2(30), -- Partition name
                completed_objects NUMBER,       -- Completed number of objects
                total_objects     NUMBER,       -- Total number of objects
                completed_rows    NUMBER,       -- Number of rows completed
                completed_bytes   NUMBER,       -- Number of bytes completed
                percent_done      NUMBER        -- Percent done current object
        )
</pre>
<pre dir="ltr">CREATE OR REPLACE PUBLIC SYNONYM ku$_WorkerStatus1010
  FOR sys.ku$_WorkerStatus1010;
</pre>
<pre dir="ltr">CREATE TYPE sys.ku$_WorkerStatus1020 AS OBJECT
        (
                worker_number     NUMBER,       -- Worker process identifier
                process_name      VARCHAR2(30), -- Worker process name
                state             VARCHAR2(30), -- Worker process state
                schema            VARCHAR2(30), -- Schema name
                name              VARCHAR2(4000),-- Object name
                object_type       VARCHAR2(200),-- Object type
                partition         VARCHAR2(30), -- Partition name
                completed_objects NUMBER,       -- Completed number of objects
                total_objects     NUMBER,       -- Total number of objects
                completed_rows    NUMBER,       -- Number of rows completed
                completed_bytes   NUMBER,       -- Number of bytes completed
                percent_done      NUMBER,       -- Percent done current object
                degree            NUMBER        -- Degree of parallelism
        )
</pre>
<pre dir="ltr">CREATE OR REPLACE PUBLIC SYNONYM ku$_WorkerStatus1020
  FOR sys.ku$_WorkerStatus1020;
</pre>
<pre dir="ltr">CREATE TYPE sys.ku$_WorkerStatus1120 AS OBJECT
        (
                worker_number     NUMBER,       -- Worker process identifier
                process_name      VARCHAR2(30), -- Worker process name
                state             VARCHAR2(30), -- Worker process state
                schema            VARCHAR2(30), -- Schema name
                name              VARCHAR2(4000),-- Object name
                object_type       VARCHAR2(200),-- Object type
                partition         VARCHAR2(30), -- Partition name
                completed_objects NUMBER,       -- Completed number of objects
                total_objects     NUMBER,       -- Total number of objects
                completed_rows    NUMBER,       -- Number of rows completed
                completed_bytes   NUMBER,       -- Number of bytes completed
                percent_done      NUMBER,       -- Percent done current object
                degree            NUMBER,       -- Degree of parallelism
                instance_id       NUMBER        -- Instance ID where running
        )
</pre>
<pre dir="ltr">CREATE OR REPLACE PUBLIC SYNONYM ku$_WorkerStatus1120
  FOR sys.ku$_WorkerStatus1120;
</pre>
<pre dir="ltr">CREATE TYPE sys.ku$_WorkerStatus1210 AS OBJECT
        (
                worker_number     NUMBER,       -- Worker process identifier
                process_name      VARCHAR2(30), -- Worker process name
                state             VARCHAR2(30), -- Worker process state
                schema            VARCHAR2(30), -- Schema name
                name              VARCHAR2(4000),-- Object name
                object_type       VARCHAR2(200),-- Object type
                partition         VARCHAR2(30), -- Partition name
                completed_objects NUMBER,       -- Completed number of objects
                total_objects     NUMBER,       -- Total number of objects
                completed_rows    NUMBER,       -- Number of rows completed
                completed_bytes   NUMBER,       -- Number of bytes completed
                percent_done      NUMBER,       -- Percent done current object
                degree            NUMBER,       -- Degree of parallelism
                instance_id       NUMBER,       -- Instance ID where running
                instance_name     VARCHAR2(60), -- Instance Name where running
                host_name         VARCHAR2(64)  -- Host name where running
        )
</pre>
<pre dir="ltr">CREATE OR REPLACE PUBLIC SYNONYM ku$_WorkerStatus1210
  FOR sys.ku$_WorkerStatus1210;
 
CREATE OR REPLACE PUBLIC SYNONYM ku$_WorkerStatus FOR ku$_WorkerStatus1210;
 
CREATE TYPE sys.ku$_WorkerStatusList1010 AS TABLE OF sys.ku$_WorkerStatus1010
CREATE TYPE sys.ku$_WorkerStatusList1020 AS TABLE OF sys.ku$_WorkerStatus1020
CREATE TYPE sys.ku$_WorkerStatusList1120 AS TABLE OF sys.ku$_WorkerStatus1120
CREATE TYPE sys.ku$_WorkerStatusList1210 AS TABLE OF sys.ku$_WorkerStatus1210
 
CREATE OR REPLACE PUBLIC SYNONYM ku$_WorkerStatusList1010
  FOR sys.ku$_WorkerStatusList1010;
CREATE OR REPLACE PUBLIC SYNONYM ku$_WorkerStatusList1020
  FOR sys.ku$_WorkerStatusList1020;
CREATE OR REPLACE PUBLIC SYNONYM ku$_WorkerStatusList1120
  FOR sys.ku$_WorkerStatusList1120;
CREATE OR REPLACE PUBLIC SYNONYM ku$_WorkerStatusList1210
  FOR sys.ku$_WorkerStatusList1210;
 
CREATE OR REPLACE PUBLIC SYNONYM ku$_WorkerStatusList
  FOR ku$_WorkerStatusList1210;
</pre></div>
<!-- class="refsect3" -->
<div id="ARPLS66021" class="refsect3"><a id="BABEIDHG"></a>
<h4 class="refsect3">Log Entry and Error Types</h4>
<p>These types provide informational and error text to attached clients and the log stream. The <code dir="ltr">ku$LogLine.errorNumber</code> type is set to <code dir="ltr">NULL</code> for informational messages but is specified for error messages. Each log entry may contain several lines of text messages.</p>
<p>The log entry and error types are defined as follows:</p>
<pre dir="ltr">CREATE TYPE sys.ku$_LogLine1010 AS OBJECT (
               logLineNumber   NUMBER,
               errorNumber     NUMBER,
               LogText         VARCHAR2(2000))
 
CREATE OR REPLACE PUBLIC SYNONYM ku$_LogLine1010 FOR sys.ku$_LogLine1010;
CREATE OR REPLACE PUBLIC SYNONYM ku$_LogLine1020 FOR sys.ku$_LogLine1010;
CREATE OR REPLACE PUBLIC SYNONYM ku$_LogLine FOR ku$_LogLine1010;
CREATE TYPE sys.ku$_LogEntry1010 AS TABLE OF sys.ku$_LogLine1010
 
CREATE OR REPLACE PUBLIC SYNONYM ku$_LogEntry1010 FOR sys.ku$_LogEntry1010;
CREATE OR REPLACE PUBLIC SYNONYM ku$_LogEntry1020 FOR sys.ku$_LogEntry1010;
CREATE OR REPLACE PUBLIC SYNONYM ku$_LogEntry FOR ku$_LogEntry1010;
</pre></div>
<!-- class="refsect3" -->
<div id="ARPLS66022" class="refsect3"><a id="BABECDHA"></a>
<h4 class="refsect3">Job Status Types</h4>
<p>The job status type returns status about a job. Usually, the status concerns a running job but it could also be about a stopped job when a client attaches. It is typically requested at attach time, when the client explicitly requests status from interactive mode and every N seconds when the client has requested status periodically.</p>
<p>The job status types are defined as follows (<code dir="ltr">percent_done</code> applies to data only):</p>
<pre dir="ltr">CREATE TYPE sys.ku$_JobStatus1010 IS OBJECT
        (
                job_name        VARCHAR2(30),           -- Name of the job
                operation       VARCHAR2(30),           -- Current operation
                job_mode        VARCHAR2(30),           -- Current mode
                bytes_processed NUMBER,                 -- Bytes so far
                total_bytes     NUMBER,                 -- Total bytes for job
                percent_done    NUMBER,                 -- Percent done
                degree          NUMBER,                 -- Of job parallelism
                error_count     NUMBER,                 -- #errors so far
                state           VARCHAR2(30),           -- Current job state
                phase           NUMBER,                 -- Job phase
                restart_count   NUMBER,                 -- #Job restarts
                worker_status_list ku$_WorkerStatusList1010, -- For (non-idle)
                                                        -- job worker processes
                files           ku$_DumpFileSet1010     -- Dump file info
        )
 
CREATE OR REPLACE PUBLIC SYNONYM ku$_JobStatus1010 FOR sys.ku$_JobStatus1010;
</pre>
<pre dir="ltr">CREATE TYPE sys.ku$_JobStatus1020 IS OBJECT
        (
                job_name        VARCHAR2(30),           -- Name of the job
                operation       VARCHAR2(30),           -- Current operation
                job_mode        VARCHAR2(30),           -- Current mode
                bytes_processed NUMBER,                 -- Bytes so far
                total_bytes     NUMBER,                 -- Total bytes for job
                percent_done    NUMBER,                 -- Percent done
                degree          NUMBER,                 -- Of job parallelism
                error_count     NUMBER,                 -- #errors so far
                state           VARCHAR2(30),           -- Current job state
                phase           NUMBER,                 -- Job phase
                restart_count   NUMBER,                 -- #Job restarts
                worker_status_list ku$_WorkerStatusList1020, -- For (non-idle)
                                                        -- job worker processes
                files           ku$_DumpFileSet1010     -- Dump file info
        )
 
CREATE OR REPLACE PUBLIC SYNONYM ku$_JobStatus1020 FOR sys.ku$_JobStatus1020;
</pre>
<pre dir="ltr">CREATE TYPE sys.ku$_JobStatus1120 IS OBJECT
        (
                job_name        VARCHAR2(30),           -- Name of the job
                operation       VARCHAR2(30),           -- Current operation
                job_mode        VARCHAR2(30),           -- Current mode
                bytes_processed NUMBER,                 -- Bytes so far
                total_bytes     NUMBER,                 -- Total bytes for job
                percent_done    NUMBER,                 -- Percent done
                degree          NUMBER,                 -- Of job parallelism
                error_count     NUMBER,                 -- #errors so far
                state           VARCHAR2(30),           -- Current job state
                phase           NUMBER,                 -- Job phase
                restart_count   NUMBER,                 -- #Job restarts
                worker_status_list ku$_WorkerStatusList1120, -- For (non-idle)
                                                        -- job worker processes
                        files           ku$_DumpFileSet1010     -- Dump file info
        )
 
CREATE OR REPLACE PUBLIC SYNONYM ku$_JobStatus1120 FOR sys.ku$_JobStatus1120;
</pre>
<pre dir="ltr">CREATE TYPE sys.ku$_JobStatus1210 IS OBJECT
        (
                job_name        VARCHAR2(30),           -- Name of the job
                operation       VARCHAR2(30),           -- Current operation
                job_mode        VARCHAR2(30),           -- Current mode
                bytes_processed NUMBER,                 -- Bytes so far
                total_bytes     NUMBER,                 -- Total bytes for job
                percent_done    NUMBER,                 -- Percent done
                degree          NUMBER,                 -- Of job parallelism
                error_count     NUMBER,                 -- #errors so far
                state           VARCHAR2(30),           -- Current job state
                phase           NUMBER,                 -- Job phase
                restart_count   NUMBER,                 -- #Job restarts
                worker_status_list ku$_WorkerStatusList1210, -- For (non-idle)
                                                        -- job worker processes
                files           ku$_DumpFileSet1010     -- Dump file info
        )
 
CREATE OR REPLACE PUBLIC SYNONYM ku$_JobStatus1210 FOR sys.ku$_JobStatus1210;
 
CREATE OR REPLACE PUBLIC SYNONYM ku$_JobStatus FOR ku$_JobStatus1210;
</pre></div>
<!-- class="refsect3" -->
<div id="ARPLS66023" class="refsect3"><a id="BABGEIEJ"></a>
<h4 class="refsect3">Job Description Types</h4>
<p>The job description type holds all the environmental information about the job such as parameter settings and dump file set members. There are a couple of subordinate types required as well.</p>
<p>The job description types are defined as follows:</p>
<pre dir="ltr">CREATE TYPE sys.ku$_JobDesc1010 IS OBJECT
        (
                job_name        VARCHAR2(30),           -- The job name
                guid            RAW(16),                -- The job GUID
                operation       VARCHAR2(30),           -- Current operation
                job_mode        VARCHAR2(30),           -- Current mode
                remote_link     VARCHAR2(4000),         -- DB link, if any
                owner           VARCHAR2(30),           -- Job owner
                instance        VARCHAR2(16),           -- The instance name
                db_version      VARCHAR2(30),           -- Version of objects
                creator_privs   VARCHAR2(30),           -- Privs of job
                start_time      DATE,                   -- This job start time
                max_degree      NUMBER,                 -- Max. parallelism
                log_file        VARCHAR2(4000),         -- Log file name
                sql_file        VARCHAR2(4000),         -- SQL file name
                params          ku$_ParamValues1010     -- Parameter list
        )
 
CREATE OR REPLACE PUBLIC SYNONYM ku$_JobDesc1010 FOR sys.ku$_JobDesc1010;
</pre>
<pre dir="ltr">CREATE TYPE sys.ku$_JobDesc1020 IS OBJECT
        (
                job_name        VARCHAR2(30),           -- The job name
                guid            RAW(16),                -- The job GUID
                operation       VARCHAR2(30),           -- Current operation
                job_mode        VARCHAR2(30),           -- Current mode
                remote_link     VARCHAR2(4000),         -- DB link, if any
                owner           VARCHAR2(30),           -- Job owner
                platform        VARCHAR2(101),          -- Current job platform
                exp_platform    VARCHAR2(101),          -- Export platform
                global_name     VARCHAR2(4000),         -- Current global name
                exp_global_name VARCHAR2(4000),         -- Export global name
                instance        VARCHAR2(16),           -- The instance name
                db_version      VARCHAR2(30),           -- Version of objects
                exp_db_version  VARCHAR2(30),           -- Export version
                scn             NUMBER,                 -- Job SCN   
                creator_privs   VARCHAR2(30),           -- Privs of job
                start_time      DATE,                   -- This job start time
                exp_start_time  DATE,                   -- Export start time
                term_reason     NUMBER,                 -- Job termination code
                max_degree      NUMBER,                 -- Max. parallelism
                log_file        VARCHAR2(4000),         -- Log file name
                sql_file        VARCHAR2(4000),         -- SQL file name
                params          ku$_ParamValues1010     -- Parameter list
        )
 
CREATE OR REPLACE PUBLIC SYNONYM ku$_JobDesc1020 FOR sys.ku$_JobDesc1020;
</pre>
<pre dir="ltr">CREATE TYPE sys.ku$_JobDesc1210 IS OBJECT
        (
                job_name        VARCHAR2(30),           -- The job name
                guid            RAW(16),                -- The job GUID
                operation       VARCHAR2(30),           -- Current operation
                job_mode        VARCHAR2(30),           -- Current mode
                remote_link     VARCHAR2(4000),         -- DB link, if any
                owner           VARCHAR2(30),           -- Job owner
                platform        VARCHAR2(101),          -- Current job platform
                exp_platform    VARCHAR2(101),          -- Export platform
                global_name     VARCHAR2(4000),         -- Current global name
                exp_global_name VARCHAR2(4000),         -- Export global name
                instance        VARCHAR2(16),           -- The instance name
                db_version      VARCHAR2(30),           -- Cur. server software version
                exp_db_version  VARCHAR2(30),           -- Export svr. software version
                job_version     VARCHAR2(30),           -- Negotiated data version
                scn             NUMBER,                 -- Job SCN   
                creator_privs   VARCHAR2(30),           -- Privs of job
                start_time      DATE,                   -- This job start time
                exp_start_time  DATE,                   -- Export start time
                term_reason     NUMBER,                 -- Job termination code
                max_degree      NUMBER,                 -- Max. parallelism
                timezone        VARCHAR2(64),           -- Cur. server timezone
                exp_timezone    VARCHAR2(64),           -- Exp. server timezone
                tstz_version    NUMBER,                 -- Cur. server timezone version
                exp_tstz_version NUMBER,                -- Exp. server timezone
                endianness      VARCHAR2(16),           -- Cur. platform&#39;s endianness
                exp_endianness  VARCHAR2(16),           -- Exp. platform&#39;s endianness
-- endianness is &#39;BIG&#39; or &#39;LITTLE&#39;
                charset         VARCHAR2(28),           -- Cur. server charset
                exp_charset     VARCHAR2(28),           -- Exp. server charset
                ncharset        VARCHAR2(28),           -- Cur. server national charset
                exp_ncharset    VARCHAR2(28),           -- Exp. server national charset
                log_file        VARCHAR2(4000),         -- Log file name
                sql_file        VARCHAR2(4000),         -- SQL file name
                params          ku$_ParamValues1010     -- Parameter list
        )
 
CREATE OR REPLACE PUBLIC SYNONYM ku$_JobDesc1210 FOR sys.ku$_JobDesc1210;
 
CREATE OR REPLACE PUBLIC SYNONYM ku$_JobDesc FOR ku$_JobDesc1210;
</pre></div>
<!-- class="refsect3" -->
<div id="ARPLS66024" class="refsect3"><a id="BABEEBFB"></a>
<h4 class="refsect3">Status Types</h4>
<p>The status type is an aggregate of some the previous types defined and is the return value for the <code dir="ltr">GET_STATUS</code> call. The mask attribute indicates which types of information are being returned to the caller. It is created by a client&#39;s shadow process from information it retrieves off the status queue or directly from the master table.</p>
<p>For errors, the <code dir="ltr">ku$_LogEntry</code> that is returned has already had its log lines ordered for proper output. That is, the original <code dir="ltr">ku$_LogEntry</code> objects have been ordered from outermost context to innermost.</p>
<p>The status types are defined as follows:</p>
<pre dir="ltr">CREATE TYPE sys.ku$_Status1010 IS OBJECT
        (
                mask            NUMBER,           -- Status types present
                wip             ku$_LogEntry1010, -- Work in progress
                job_description ku$_JobDesc1010,  -- Complete job description
                job_status      ku$_JobStatus1010,-- Detailed job status
                error           ku$_LogEntry1010  -- Multi-level context errors
        )
 
CREATE OR REPLACE PUBLIC SYNONYM ku$_Status1010 FOR sys.ku$_Status1010;
 
CREATE TYPE sys.ku$_Status1020 IS OBJECT
        (
                mask            NUMBER,           -- Status types present
                wip             ku$_LogEntry1010, -- Work in progress
                job_description ku$_JobDesc1020,  -- Complete job description
                job_status      ku$_JobStatus1020,-- Detailed job status
                error           ku$_LogEntry1010  -- Multi-level context errors
        )
 
CREATE OR REPLACE PUBLIC SYNONYM ku$_Status1020 FOR sys.ku$_Status1020;
 
CREATE TYPE sys.ku$_Status1120 IS OBJECT
        (
                mask            NUMBER,           -- Status types present
                wip             ku$_LogEntry1010, -- Work in progress
                job_description ku$_JobDesc1020,  -- Complete job description
                job_status      ku$_JobStatus1120,-- Detailed job status
                error           ku$_LogEntry1010  -- Multi-level context errors
        )
 
CREATE OR REPLACE PUBLIC SYNONYM ku$_Status1120 FOR sys.ku$_Status1120;
 
CREATE TYPE sys.ku$_Status1210 IS OBJECT
        (
                mask            NUMBER,           -- Status types present
                wip             ku$_LogEntry1010, -- Work in progress
                job_description ku$_JobDesc1210,  -- Complete job description
                job_status      ku$_JobStatus1210,-- Detailed job status
                error           ku$_LogEntry1010  -- Multi-level context errors
        )
 
CREATE OR REPLACE PUBLIC SYNONYM ku$_Status1210 FOR sys.ku$_Status1210;
 
CREATE OR REPLACE PUBLIC SYNONYM ku$_Status FOR ku$_Status1210;
</pre></div>
<!-- class="refsect3" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="BABGCGAB"></a>
<div id="ARPLS631" class="refsect1">
<h2 class="refsect1">Summary of DBMS_DATAPUMP Subprograms</h2>
<div id="ARPLS66025" class="tblformal">
<p class="titleintable"><a id="sthref2873"></a><a id="sthref2874"></a>Table 47-1 DBMS_DATAPUMP Package Subprograms</p>
<table class="cellalignment4330" title="DBMS_DATAPUMP Package Subprograms" summary="This table lists the DBMS_DATAPUMP subprograms in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t5">Subprogram</th>
<th class="cellalignment4328" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t5" headers="r1c1-t5">
<p><a href="#i997139">ADD_FILE Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r2c1-t5 r1c2-t5">
<p>Adds dump files to the dump file set for an Export, Import, or SQL_FILE operation. In addition to dump files, other types of files can also be added by using the <code dir="ltr">FILETYPE</code> parameter provided with this procedure.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t5" headers="r1c1-t5">
<p><a href="#i997216">ATTACH Function</a></p>
</td>
<td class="cellalignment4329" headers="r3c1-t5 r1c2-t5">
<p>Used to gain access to a Data Pump job that is in the Defining, Executing, Idling, or Stopped state</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t5" headers="r1c1-t5">
<p><a href="#i997260">DATA_FILTER Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r4c1-t5 r1c2-t5">
<p>Specifies restrictions on the rows that are to be retrieved</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t5" headers="r1c1-t5">
<p><a href="#CEGFJHIC">DATA_REMAP Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r5c1-t5 r1c2-t5">
<p>Specifies transformations to be applied to column data as it is exported from, or imported into, a database.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t5" headers="r1c1-t5">
<p><a href="#i997382">DETACH Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r6c1-t5 r1c2-t5">
<p>Specifies that the user has no further interest in using the handle</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t5" headers="r1c1-t5">
<p><a href="#BABJBADB">GET_DUMPFILE_INFO Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r7c1-t5 r1c2-t5">
<p>Retrieves information about a specified dump file</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t5" headers="r1c1-t5">
<p><a href="#i997417">GET_STATUS Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r8c1-t5 r1c2-t5">
<p>Monitors the status of a job or waits for the completion of a job or for more details on API errors</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t5" headers="r1c1-t5">
<p><a href="#i997488">LOG_ENTRY Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r9c1-t5 r1c2-t5">
<p>Inserts a message into the log file</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t5" headers="r1c1-t5">
<p><a href="#BABJACDG">METADATA_FILTER Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r10c1-t5 r1c2-t5">
<p>Provides filters that allow you to restrict the items that are included in a job</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t5" headers="r1c1-t5">
<p><a href="#i1007115">METADATA_REMAP Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r11c1-t5 r1c2-t5">
<p>Specifies a remapping to be applied to objects as they are processed in the specified job</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t5" headers="r1c1-t5">
<p><a href="#i1006886">METADATA_TRANSFORM Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r12c1-t5 r1c2-t5">
<p>Specifies transformations to be applied to objects as they are processed in the specified job</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t5" headers="r1c1-t5">
<p><a href="#i997806">OPEN Function</a></p>
</td>
<td class="cellalignment4329" headers="r13c1-t5 r1c2-t5">
<p>Declares a new job using the Data Pump API, the handle returned being used as a parameter for calls to all other procedures (but not to the <code dir="ltr">ATTACH</code> function)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t5" headers="r1c1-t5">
<p><a href="#i1011791">SET_PARALLEL Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r14c1-t5 r1c2-t5">
<p>Adjusts the degree of parallelism within a job</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r15c1-t5" headers="r1c1-t5">
<p><a href="#i1011813">SET_PARAMETER Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r15c1-t5 r1c2-t5">
<p>Specifies job-processing options</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r16c1-t5" headers="r1c1-t5">
<p><a href="#i998298">START_JOB Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r16c1-t5 r1c2-t5">
<p>Begins or resumes execution of a job</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r17c1-t5" headers="r1c1-t5">
<p><a href="#i998351">STOP_JOB Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r17c1-t5 r1c2-t5">
<p>Terminates a job, but optionally, preserves the state of the job</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r18c1-t5" headers="r1c1-t5">
<p><a href="#BABJHGAC">WAIT_FOR_JOB Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r18c1-t5 r1c2-t5">
<p>Runs a job until it either completes normally or stops for some other reason</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="ARPLS66026" class="refsect2"><a id="i997139"></a>
<h3 class="refsect2">ADD_FILE Procedure<a id="sthref2875"></a></h3>
<p>This procedure adds files to the dump file set for an Export, Import, or SQL_FILE operation or specifies the log file or the output file for a SQL_FILE operation.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2876"></a>Syntax</p>
<pre dir="ltr">DBMS_DATAPUMP.ADD_FILE (
   handle     IN NUMBER,
   filename   IN VARCHAR2,
   directory  IN VARCHAR2,
   filesize   IN VARCHAR2 DEFAULT NULL,
   filetype   IN NUMBER DEFAULT DBMS_DATAPUMP.KU$_FILE_TYPE_DUMP_FILE,
   reusefile  IN NUMBER DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2877"></a>Parameters</p>
<div id="ARPLS66027" class="tblformal">
<p class="titleintable"><a id="sthref2878"></a><a id="sthref2879"></a>Table 47-2 ADD_FILE Procedure Parameters</p>
<table class="cellalignment4330" title="ADD_FILE Procedure Parameters" summary="his table describes the parameters of DBMS_DATAPUMP.ADD_FILE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t6">Parameter</th>
<th class="cellalignment4328" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t6" headers="r1c1-t6">
<p><code dir="ltr">handle</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t6 r1c2-t6">
<p>The handle of a job. The current session must have previously attached to the handle through a call to either the <code dir="ltr">OPEN</code> or <code dir="ltr">ATTACH</code> function.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t6" headers="r1c1-t6">
<p><code dir="ltr">filename</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t6 r1c2-t6">
<p>The name of the file being added. <code dir="ltr">filename</code> must be a simple filename without any directory path information. For dump files, the <code dir="ltr">filename</code> can include a substitution variable, <code dir="ltr">%U</code>, which indicates that multiple files may be generated with the specified <code dir="ltr">filename</code> as a template. The <code dir="ltr">%U</code> is expanded in the resulting file names into a two-character, fixed-width, incrementing integer starting at 01. For example, the dump filename of <code dir="ltr">export%U</code> would cause <code dir="ltr">export01</code>, <code dir="ltr">export02</code>, <code dir="ltr">export03</code>, and so on, to be created depending on how many files are needed to perform the export. For filenames containing the <code dir="ltr">%</code> character, the <code dir="ltr">%</code> must be represented as <code dir="ltr">%%</code> to avoid ambiguity. Any <code dir="ltr">%</code> in a filename must be followed by either a <code dir="ltr">%</code> or a <code dir="ltr">U</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t6" headers="r1c1-t6">
<p><code dir="ltr">directory</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t6 r1c2-t6">
<p>The name of a directory object within the database that is used to locate <code dir="ltr">filename</code>. A <code dir="ltr">directory</code> must be specified. See the Data Pump Export chapter in <a class="olink SUTIL" href="../SUTIL/toc.htm"><span class="italic">Oracle Database Utilities</span></a> for information about the <code dir="ltr">DIRECTORY</code> command-line parameter.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t6" headers="r1c1-t6">
<p><code dir="ltr">filesize</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t6 r1c2-t6">
<p>The size of the dump file that is being added. It may be specified as the number of bytes, number of kilobytes (if followed by K), number of megabytes (if followed by M), number of gigabytes (if followed by G) or number of terabytes (if followed by T). An Export operation will write no more than the specified number of bytes to the file. Once the file is full, it will be closed. If there is insufficient space on the device to write the specified number of bytes, the Export operation will fail, but it can be restarted. If not specified, <code dir="ltr">filesize</code> will default to an unlimited size. For Import and SQL_FILE operations, <code dir="ltr">filesize</code> is ignored. The minimum value for <code dir="ltr">filesize</code> is ten times the default Data Pump block size, which is 4 kilobytes. A <code dir="ltr">filesize</code> can only be specified for dump files.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t6" headers="r1c1-t6">
<p><code dir="ltr">filetype</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t6 r1c2-t6">
<p>The type of the file to be added. The legal values are as follows and must be preceded by <code dir="ltr">DBMS_DATAPUMP.</code>:</p>
<ul>
<li>
<p><code dir="ltr">KU$_FILE_TYPE_DUMP_FILE</code> (dump file for a job)</p>
</li>
<li>
<p><code dir="ltr">KU$_FILE_TYPE_LOG_FILE</code> (log file for a job)</p>
</li>
<li>
<p><code dir="ltr">KU$_FILE_TYPE_SQL_FILE</code> (output for <code dir="ltr">SQL_FILE</code> job)</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t6" headers="r1c1-t6">
<p><code dir="ltr">reusefile</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t6 r1c2-t6">
<p>If 0, a preexisting file will cause an error. If 1, a preexisting file will be overwritten. If NULL, the default action for the file type will be applied (that is, dump files will not be overwritten). This parameter should only be non-NULL for dump files. The <code dir="ltr">reusefile</code> parameter is restricted to export jobs.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2880"></a>Exceptions</p>
<ul>
<li>
<p><code dir="ltr">INVALID_HANDLE</code>. The specified handle is not attached to a Data Pump job.</p>
</li>
<li>
<p><code dir="ltr">INVALID_ARGVAL</code>. An invalid value was supplied for an input parameter.</p>
</li>
<li>
<p><code dir="ltr">INVALID_STATE</code>. The job is completing, or the job is past the defining state for an import or SQL_FILE job or is past the defining state for LOG and SQL files.</p>
</li>
<li>
<p><code dir="ltr">INVALID_OPERATION</code>. A dump file was specified for a Network Import or <code dir="ltr">ESTIMATE_ONLY</code> export operation.</p>
</li>
<li>
<p><code dir="ltr">SUCCESS_WITH_INFO</code>. The procedure succeeded, but further information is available through the <code dir="ltr">GET_STATUS</code> procedure.</p>
</li>
<li>
<p><code dir="ltr">NO_SUCH_JOB</code>. The specified job does not exist.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2881"></a>Usage Notes</p>
<ul>
<li>
<p>Adds files to a Data Pump job. Three types of files may be added to jobs: Dump files to contain the data that is being moved, log files to record the messages associated with an operation, and SQL files to record the output of a SQL_FILE operation. Log and SQL files will overwrite previously existing files. Dump files will never overwrite previously existing files. Instead, an error will be generated.</p>
</li>
<li>
<p>Import and SQL_FILE operations require that all dump files be specified during the definition phase of the job. For Export operations, dump files can be added at any time. For example, if the user ascertains that the file space is running low during an Export, additional dump files may be added through this API. If the specified dump file already exists for an Export operation and <code dir="ltr">reusefile</code> is not set to 1, an error will be returned.</p>
</li>
<li>
<p>For Export operations, the parallelism setting should be less than or equal to the number of dump files in the dump file set. If there are not enough dump files, the job will not be able to maximize parallelism to the degree specified by the <code dir="ltr">SET_PARALLEL</code> procedure.</p>
</li>
<li>
<p>For Import operations, the parallelism setting should also be less than or equal to the number of dump files in the dump file set. If there are not enough dump files, the performance will not be optimal as multiple threads of execution try to access the same dump file.</p>
</li>
<li>
<p>If the substitution variable (<code dir="ltr">%U</code>) is included in a filename, multiple dump files may be specified through a single call to <code dir="ltr">ADD_FILE</code>. For Export operations, the new dump files will be created as they are needed. Enough dump files will be created to allow all of the processes specified by the current <code dir="ltr">SET_PARALLEL</code> value to be active. If one of the dump files fills, it will be closed and a new dump file (with a new generated name) will be created to take its place. If multiple <code dir="ltr">ADD_FILE</code>s with substitution variables have been specified for dump files in a job, they will be used to generate dump files in a round robin fashion. For example, if <code dir="ltr">expa%U</code>, <code dir="ltr">expb%U</code> and <code dir="ltr">expc%U</code> were all specified for a job having a parallelism of 6, the initial dump files created would look like: <code dir="ltr">expa01</code>, <code dir="ltr">expb01</code>, <code dir="ltr">expc01</code>, <code dir="ltr">expa02</code>, <code dir="ltr">expb02</code>, and <code dir="ltr">expc02</code>.</p>
</li>
<li>
<p>If presented with dump file specifications, <code dir="ltr">expa%U</code>, <code dir="ltr">expb%U</code> and <code dir="ltr">expc%U</code>, an Import or SQL_FILE operation will begin by attempting to open the dump files, <code dir="ltr">expa01</code>, <code dir="ltr">expb01</code>, and <code dir="ltr">expc01.</code>If the dump file containing the master table is not found in this set, the operation will expand its search for dump files by incrementing the substitution variable and looking up the new filenames (for example, <code dir="ltr">expa02</code>, <code dir="ltr">expb02</code>, and <code dir="ltr">expc02</code>). The DataPump API will keep expanding the search until it locates the dump file containing the master table. If the DataPump API determines that the dump file does not exist or is not part of the current dump set at any iteration, the DataPump API will stop incrementing the substitution variable for the dump file specification that was in error. Once the master table is found, the master table will be used to ascertain when all of dump files in the dump file set have been located.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66028" class="refsect2"><a id="i997216"></a>
<h3 class="refsect2">ATTACH Function<a id="sthref2882"></a></h3>
<p>This function gains access to a previously-created job.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2883"></a>Syntax</p>
<pre dir="ltr">DBMS_DATAPUMP.ATTACH(
   job_name    IN VARCHAR2 DEFAULT NULL,
   job_owner    IN VARCHAR2 DEFAULT NULL) 
 RETURN NUMBER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2884"></a>Parameters</p>
<div id="ARPLS66029" class="tblformal">
<p class="titleintable"><a id="sthref2885"></a><a id="sthref2886"></a>Table 47-3 ATTACH Function Parameters</p>
<table class="cellalignment4330" title="ATTACH Function Parameters" summary="This table describes the parameters of DBMS_DATAPUMP.ATTACH." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t7">Parameter</th>
<th class="cellalignment4328" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t7" headers="r1c1-t7">
<p><code dir="ltr">job_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t7 r1c2-t7">
<p>The name of the job. The default is the job name owned by the user who is specified in the <code dir="ltr">job_owner</code> parameter (assuming that user has only one job in the Defining, Executing, or Idling states).</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t7" headers="r1c1-t7">
<p><code dir="ltr">job_owner</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t7 r1c2-t7">
<p>The user who originally started the job. If NULL, the value defaults to the owner of the current session. To specify a job owner other than yourself, you must have either the <code dir="ltr">DATAPUMP_EXP_FULL_DATABASE</code> role (for export operations) or the <code dir="ltr">DATAPUMP_IMP_FULL_DATABASE</code> role (for import and SQL_FILE operations). Being a privileged user allows you to monitor another user&#39;s job, but you cannot restart another user&#39;s job.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2887"></a>Return Values</p>
<p>An opaque handle for the job. This handle is used as input to the following procedures: <code dir="ltr">ADD_FILE</code>, <code dir="ltr">DATA_FILTER</code>, <code dir="ltr">DETACH</code>, <code dir="ltr">GET_STATUS</code>, <code dir="ltr">LOG_ENTRY</code>, <code dir="ltr">METADATA_FILTER</code>, <code dir="ltr">METADATA_REMAP</code>, <code dir="ltr">METADATA_TRANSFORM</code>, <code dir="ltr">SET_PARALLEL</code>, <code dir="ltr">SET_PARAMETER,START_JOB</code>, <code dir="ltr">STOP_JOB</code>, and <code dir="ltr">WAIT_FOR_JOB</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2888"></a>Exceptions</p>
<ul>
<li>
<p><code dir="ltr">INVALID_ARGVAL</code>. An invalid value was supplied for an input parameter.</p>
</li>
<li>
<p><code dir="ltr">OBJECT_NOT_FOUND</code>. The specified job no longer exists or the user specified a job owned by another schema, but the user did not have the <code dir="ltr">DATAPUMP_EXP_FULL_DATABASE</code> or <code dir="ltr">DATAPUMP_IMP_FULL_DATABASE</code> role.</p>
</li>
<li>
<p><code dir="ltr">SUCCESS_WITH_INFO</code>. The function succeeded, but further information is available through the <code dir="ltr">GET_STATUS</code> procedure.</p>
</li>
<li>
<p><code dir="ltr">NO_SUCH_JOB</code>. The specified job does not exist.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2889"></a>Usage Notes</p>
<ul>
<li>
<p>If the job was in the Stopped state, the job is placed into the Idling state. Once the <code dir="ltr">ATTACH</code> succeeds, you can monitor the progress of the job or control the job. The stream of <code dir="ltr">KU$_STATUS_WIP</code> and <code dir="ltr">KU$_STATUS_JOB_ERROR</code> messages returned through the <code dir="ltr">GET_STATUS</code> procedure will be returned to the newly attached job starting at the approximate time of the client&#39;s attachment. There will be no repeating of status and error messages that were processed before the client attached to a job.</p>
</li>
<li>
<p>If you want to perform a second attach to a job, you must do so from a different session.</p>
</li>
<li>
<p>If the <code dir="ltr">ATTACH</code> fails, use a null handle in a subsequent call to <code dir="ltr">GET_STATUS</code> for more information about the failure.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66030" class="refsect2"><a id="i997260"></a>
<h3 class="refsect2">DATA_FILTER Procedures<a id="sthref2890"></a></h3>
<p>This procedure specifies restrictions on the rows that are to be retrieved.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2891"></a>Syntax</p>
<pre dir="ltr">DBMS_DATAPUMP.DATA_FILTER (
   handle      IN NUMBER,
   name        IN VARCHAR2,
   value       IN NUMBER,
   table_name  IN VARCHAR2 DEFAULT NULL,
   schema_name IN VARCHAR2 DEFAULT NULL);

DBMS_DATAPUMP.DATA_FILTER(
   handle      IN NUMBER,
   name        IN VARCHAR2,
   value       IN VARCHAR2,
   table_name  IN VARCHAR2 DEFAULT NULL,
   schema_name IN VARCHAR2 DEFAULT NULL);

DBMS_DATAPUMP.DATA_FILTER(
   handle      IN NUMBER,
   name        IN VARCHAR2,
   value       IN CLOB,
   table_name  IN VARCHAR2 DEFAULT NULL,
   schema_name IN VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2892"></a>Parameters</p>
<div id="ARPLS66031" class="tblformal">
<p class="titleintable"><a id="sthref2893"></a><a id="sthref2894"></a>Table 47-4 DATA_FILTER Procedure Parameters</p>
<table class="cellalignment4330" title="DATA_FILTER Procedure Parameters" summary="This table describes the parameters of DBMS_DATAPUMP.DATA_FILTER." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t8">Parameter</th>
<th class="cellalignment4328" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t8" headers="r1c1-t8">
<p><code dir="ltr">handle</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t8 r1c2-t8">
<p>The handle that is returned from the <code dir="ltr">OPEN</code> function</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t8" headers="r1c1-t8">
<p><code dir="ltr">name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t8 r1c2-t8">
<p>The name of the filter</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t8" headers="r1c1-t8">
<p><code dir="ltr">value</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t8 r1c2-t8">
<p>The value of the filter</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t8" headers="r1c1-t8">
<p><code dir="ltr">table_name</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t8 r1c2-t8">
<p>The name of the table on which the data filter is applied. If no table name is supplied, the filter applies to all tables in the job.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t8" headers="r1c1-t8">
<p><code dir="ltr">schema_name</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t8 r1c2-t8">
<p>The name of the schema that owns the table on which the filter is applied. If no schema name is specified, the filter applies to all schemas in the job. If you supply a schema name you must also supply a table name.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2895"></a>Exceptions</p>
<ul>
<li>
<p><code dir="ltr">INVALID_ARGVAL</code>. There can be several reasons for this message:</p>
<ul>
<li>
<p>A bad filter name is specified</p>
</li>
<li>
<p>The mode is <code dir="ltr">TRANSPORTABLE</code>, which does not support data filters</p>
</li>
<li>
<p>The specified table does not exist</p>
</li>
<li>
<p>The filter has already been set for the specified values of <code dir="ltr">schema_name</code> and <code dir="ltr">table_name</code></p>
</li>
</ul>
</li>
<li>
<p><code dir="ltr">INVALID_STATE</code>. The user called <code dir="ltr">DATA_FILTER</code> when the job was not in the Defining state.</p>
</li>
<li>
<p><code dir="ltr">INCONSISTENT_ARGS</code>. The <code dir="ltr">value</code> parameter is missing or its datatype does not match the filter name. Or a schema name was supplied, but not a table name.</p>
</li>
<li>
<p><code dir="ltr">PRIVILEGE_ERROR</code>. A schema name was supplied, but the user did not have the <code dir="ltr">DATAPUMP_EXP_FULL_DATABASE</code> or <code dir="ltr">DATAPUMP_IMP_FULL_DATABASE</code> role.</p>
</li>
<li>
<p><code dir="ltr">SUCCESS_WITH_INFO</code>. The procedure succeeded, but further information is available through the <code dir="ltr">GET_STATUS</code> procedure.</p>
</li>
<li>
<p><code dir="ltr">NO_SUCH_JOB</code>. The specified job does not exist.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2896"></a>Usage Notes</p>
<ul>
<li>
<p>Each data filter can only appear once in each table (for example, you cannot supply multiple <code dir="ltr">SUBQUERY</code> filters to a table) or once in each job. If different filters using the same name are applied to both a particular table and to the whole job, the filter parameter supplied for the specific table will take precedence.</p>
<p>With the exception of the <code dir="ltr">INCLUDE_ROWS</code> filter, data filters are not supported on tables having nested tables or domain indexes defined upon them. Data filters are not supported in jobs performed in Transportable Tablespace mode.</p>
<p>The available data filters are described in <a href="#BABCJGAB">Table 47-5</a>.</p>
</li>
</ul>
<div id="ARPLS66032" class="tblformal">
<p class="titleintable"><a id="sthref2897"></a><a id="BABCJGAB"></a>Table 47-5 Data Filters</p>
<table class="cellalignment4330" title="Data Filters" summary="This table describes the Summary of DBMS_DATAPUMP Data Filters." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t9">Name</th>
<th class="cellalignment4328" id="r1c2-t9">Datatype</th>
<th class="cellalignment4328" id="r1c3-t9">Operations that Support Filter</th>
<th class="cellalignment4328" id="r1c4-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t9" headers="r1c1-t9">
<p><code dir="ltr">INCLUDE_ROWS</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t9 r1c2-t9">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t9 r1c3-t9">
<p>EXPORT, IMPORT</p>
</td>
<td class="cellalignment4329" headers="r2c1-t9 r1c4-t9">
<p>If nonzero, this filter specifies that user data for the specified table should be included in the job. The default is 1.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t9" headers="r1c1-t9">
<p><code dir="ltr">PARTITION_EXPR</code></p>
<p><code dir="ltr">PARTITION_LIST</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t9 r1c2-t9">
<p><code dir="ltr">TEXT</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t9 r1c3-t9">
<p>EXPORT, IMPORT</p>
</td>
<td class="cellalignment4329" headers="r3c1-t9 r1c4-t9">
<p>For Export jobs, these filters specify which partitions are unloaded from the database. For Import jobs, they specify which table partitions are loaded into the database. Partition names are included in the job if their names satisfy the specified expression (for <code dir="ltr">PARTITION_EXPR</code>) or are included in the list (for <code dir="ltr">PARTITION_LIST</code>). Whereas the expression version of the filter offers more flexibility, the list version provides for full validation of the partition names.</p>
<p>Double quotation marks around partition names are required only if the partition names contain special characters.</p>
<p><code dir="ltr">PARTITION_EXPR</code> is not supported on jobs across a network link.</p>
<p>Default=All partitions are processed</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t9" headers="r1c1-t9">
<p><code dir="ltr">SAMPLE</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t9 r1c2-t9">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t9 r1c3-t9">
<p>EXPORT, IMPORT</p>
</td>
<td class="cellalignment4329" headers="r4c1-t9 r1c4-t9">
<p>For Export jobs, specifies a percentage for sampling the data blocks to be moved. This filter allows subsets of large tables to be extracted for testing purposes.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t9" headers="r1c1-t9">
<p><code dir="ltr">SUBQUERY</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t9 r1c2-t9">
<p><code dir="ltr">TEXT</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t9 r1c3-t9">
<p>EXPORT, IMPORT</p>
</td>
<td class="cellalignment4329" headers="r5c1-t9 r1c4-t9">
<p>Specifies a subquery that is added to the end of the <code dir="ltr">SELECT</code> statement for the table. If you specify a <code dir="ltr">WHERE</code> clause in the subquery, you can restrict the rows that are selected. Specifying an <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> clause orders the rows dumped in the export which improves performance when migrating from heap-organized tables to index-organized tables.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66033" class="refsect2"><a id="CEGFJHIC"></a>
<h3 class="refsect2">DATA_REMAP Procedure</h3>
<p>This procedure specifies transformations to be applied to column data as it is exported from, or imported into, a database.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2898"></a>Syntax</p>
<pre dir="ltr">DBMS_DATAPUMP.DATA_REMAP(
   handle          IN NUMBER,
   name            IN VARCHAR2,
   table_name      IN VARCHAR2,
   column          IN VARCHAR2,
   remap_function  IN VARCHAR2),
   schema          IN VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2899"></a>Parameters</p>
<div id="ARPLS66034" class="tblformal">
<p class="titleintable"><a id="sthref2900"></a><a id="sthref2901"></a>Table 47-6 DATA_REMAP Procedure Parameters</p>
<table class="cellalignment4330" title="DATA_REMAP Procedure Parameters" summary="DATA_REMAP parameters" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t10">Parameter</th>
<th class="cellalignment4328" id="r1c2-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t10" headers="r1c1-t10">
<p><code dir="ltr">handle</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t10 r1c2-t10">
<p>The handle of the current job. The current session must have previously attached to the handle through a call to an <code dir="ltr">OPEN</code> function.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t10" headers="r1c1-t10">
<p><code dir="ltr">name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t10 r1c2-t10">
<p>The name of the remap</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t10" headers="r1c1-t10">
<p><code dir="ltr">table_name</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t10 r1c2-t10">
<p>The table containing the column to be remapped</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t10" headers="r1c1-t10">
<p><code dir="ltr">column</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t10 r1c2-t10">
<p>The name of the column to be remapped</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t10" headers="r1c1-t10">
<p><code dir="ltr">remap_function</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t10 r1c2-t10">
<p>The meaning of remap_function is dependent upon the value of name. See <a href="#CHDHJFCB">Table 47-7</a> for a list of possible names.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t10" headers="r1c1-t10">
<p><code dir="ltr">schema</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t10 r1c2-t10">
<p>The schema containing the column to be remapped. If NULL, the remapping applies to all schemas moved in the job that contain the specified table.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2902"></a>Exceptions</p>
<ul>
<li>
<p><code dir="ltr">INVALID_ARGVAL</code>. The mode is transportable (which does not support data modifications) or it has specified that no data to be included in the job. An invalid remap name was supplied.</p>
</li>
<li>
<p><code dir="ltr">INVALID_OPERATION</code>. Data remaps are only supported for Export and Import operations.</p>
</li>
<li>
<p><code dir="ltr">INVALID_STATE</code>. The <code dir="ltr">DATA_REMAP</code> procedure was called after the job started (that is, it was not in the defining state).</p>
</li>
<li>
<p><code dir="ltr">NO_SUCH_JOB</code>. The job handle is no longer valid.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2903"></a>Usage Notes</p>
<ul>
<li>
<p>The <code dir="ltr">DATA_REMAP</code> procedure is only supported for Export and Import operations. It allows you to manipulate user data being exported or imported. The <code dir="ltr">name</code> of the remap determines the remap operation to be performed.</p>
</li>
<li>
<p>For export operations, you might wish to define a data remap to obscure sensitive data such as credit card numbers from a dump file, but leave the remainder of the data so that it can be read. To accomplish this, the remapping should convert each unique source number into a distinct generated number. So that the mapping is consistent across the dump file set, the same function should be called for every column that contains the credit card number.</p>
</li>
<li>
<p>For import operations, you might wish to define a data remap to reset the primary key when data is being merged into an existing table that contains colliding primary keys. A single remapping function should be provided for all columns defining or referencing the primary key to ensure that remapping is consistent.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
If the called function uses package state variables, then to ensure that remapping is performed consistently across all tables, the job should be run with a SET_PARALLEL value of 1 and no restart operations should be performed.</div>
<p>The Data Remap functions are listed in <a href="#CHDHJFCB">Table 47-7</a>.</p>
<div id="ARPLS66035" class="tblformal">
<p class="titleintable"><a id="sthref2904"></a><a id="CHDHJFCB"></a>Table 47-7 Names of Data Remap Functions</p>
<table class="cellalignment4330" title="Names of Data Remap Functions" summary="Data Remaps" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t12">Name</th>
<th class="cellalignment4328" id="r1c2-t12">Meaning of <code dir="ltr">remap_function</code></th>
<th class="cellalignment4328" id="r1c3-t12">Meaning</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t12" headers="r1c1-t12">
<p><code dir="ltr">COLUMN_FUNCTION</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t12 r1c2-t12">
<p>String having the format:</p>
<p><code dir="ltr">[schema.]package.function</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t12 r1c3-t12">
<p>The <code dir="ltr">name</code> parameter references a PL/SQL package function which is called to modify the data for the specified column. The function accepts a single parameter, which has the same datatype as the remapped column, and returns a value having the same datatype as the remapped column. Note that the default for the schema is the schema of the user performing the export.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66036" class="refsect2"><a id="i997382"></a>
<h3 class="refsect2">DETACH Procedure<a id="sthref2905"></a></h3>
<p>This procedure specifies that the user has no further interest in using the handle.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2906"></a>Syntax</p>
<pre dir="ltr">DBMS_DATAPUMP.DETACH(
   handle  IN NUMBER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2907"></a>Parameters</p>
<div id="ARPLS66037" class="tblformal">
<p class="titleintable"><a id="sthref2908"></a><a id="sthref2909"></a>Table 47-8 DETACH Procedure Parameters</p>
<table class="cellalignment4330" title="DETACH Procedure Parameters" summary="This table describes the parameters of DBMS_DATAPUMP.DETACH." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t13">Parameter</th>
<th class="cellalignment4328" id="r1c2-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t13" headers="r1c1-t13">
<p><code dir="ltr">handle</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t13 r1c2-t13">
<p>The handle of the job. The current session must have previously attached to the handle through a call to either an <code dir="ltr">OPEN</code> or <code dir="ltr">ATTACH</code> function.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2910"></a>Exceptions</p>
<ul>
<li>
<p><code dir="ltr">INVALID_HANDLE</code>. The specified handle is not attached to a Data Pump job.</p>
</li>
<li>
<p><code dir="ltr">SUCCESS_WITH_INFO</code>. The procedure succeeded, but further information is available through the <code dir="ltr">GET_STATUS</code> procedure.</p>
</li>
<li>
<p><code dir="ltr">NO_SUCH_JOB</code>. The specified job does not exist.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2911"></a>Usage Notes</p>
<ul>
<li>
<p>Through this call, you specify that you have no further interest in using the handle. Resources associated with a completed job cannot be reclaimed until all users are detached from the job. An implicit detach from a handle is performed when the user&#39;s session is exited or aborted. An implicit detach from a handle is also performed upon the expiration of the timeout associated with a <code dir="ltr">STOP_JOB</code> that was applied to the job referenced by the handle. All previously allocated <code dir="ltr">DBMS_DATAPUMP</code> handles are released when an instance is restarted.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66038" class="refsect2"><a id="BABJBADB"></a>
<h3 class="refsect2">GET_DUMPFILE_INFO<a id="sthref2912"></a> Procedure</h3>
<p>This procedure retrieves information about a specified dump file.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2913"></a>Syntax</p>
<pre dir="ltr">DBMS_DATAPUMP.GET_DUMPFILE_INFO(
   filename    IN VARCHAR2,
   directory   IN VARCHAR2,
   info_table  OUT ku$_dumpfile_info,
   filetype    OUT NUMBER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2914"></a>Parameters</p>
<div id="ARPLS66039" class="tblformal">
<p class="titleintable"><a id="sthref2915"></a><a id="sthref2916"></a>Table 47-9 GET_DUMPFILE_INFO Procedure Parameters</p>
<table class="cellalignment4330" title="GET_DUMPFILE_INFO Procedure Parameters" summary="This table describes the parameters for the GET_DUMPFILE_INFO procedure." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t14">Parameter</th>
<th class="cellalignment4328" id="r1c2-t14">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t14" headers="r1c1-t14">
<p><code dir="ltr">filename</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t14 r1c2-t14">
<p>A simple filename with no directory path information</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t14" headers="r1c1-t14">
<p><code dir="ltr">directory</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t14 r1c2-t14">
<p>A directory object that specifies where the file can be found</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t14" headers="r1c1-t14">
<p><code dir="ltr">info_table</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t14 r1c2-t14">
<p>A PL/SQL table for storing information about the dump file</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t14" headers="r1c1-t14">
<p><code dir="ltr">filetype</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t14 r1c2-t14">
<p>The type of file (Data Pump dump file, original Export dump file, external tables dump file, or unknown)</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2917"></a>Exceptions</p>
<p>The <code dir="ltr">GET_DUMPFILE_INFO</code> procedure is a utility routine that operates outside the context of any Data Pump job. Exceptions are handled differently for this procedure than for procedures associated in some way with a Data Pump job. A full exception stack should be available directly, without the need to call the <code dir="ltr">GET_STATUS</code> procedure to retrieve the detailed information. The exception for this procedure is as follows:</p>
<ul>
<li>
<p><code dir="ltr">NO_DUMPFILE_INFO</code>. Unable to retrieve dump file information as specified.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2918"></a>Usage Notes</p>
<p>You can use the <code dir="ltr">GET_DUMPFILE_INFO</code> procedure to request information about a specific file. If the file is not recognized as any type of dump file, then a filetype of 0 (zero) is returned and the dump file info_table remains empty.</p>
<p>A filetype value of 1 indicates a Data Pump dump file. A filetype value of 2 indicates an original Export dump file. A filetype value of 3 indicates an external tables dump file. In all cases, the dump file info_table will be populated with information retrieved from the dump file header. Rows of this table consist of item code and value pairs, where the item code indicates the type of information and the value column is a <code dir="ltr">VARCHAR2</code> containing the actual data (converted to a string in some cases). The table is defined as follows:</p>
<pre dir="ltr">CREATE TYPE sys.ku$_dumpfile_item IS OBJECT (
                item_code       NUMBER,           -- Identifies header item
                value           VARCHAR2(2048)    -- Text string value)/
 
GRANT EXECUTE ON sys.ku$_dumpfile_item TO PUBLIC; 
CREATE OR REPLACE PUBLIC SYNONYM ku$_dumpfile_item FOR sys.ku$_dumpfile_item;
 
CREATE TYPE sys.ku$_dumpfile_info AS TABLE OF sys.ku$_dumpfile_item/
 
GRANT EXECUTE ON sys.ku$_dumpfile_info TO PUBLIC; 
CREATE OR REPLACE PUBLIC SYNONYM ku$_dumpfile_info FOR sys.ku$_dumpfile_info;
 
</pre>
<p>The item codes, which can easily be extended to provide more information as needed, are currently defined as shown in <a href="#CEGHFABA">Table 47-10</a> (prepended with the package name, <code dir="ltr">DBMS_DATAPUMP</code>.). Assume the following with regard to these item codes:</p>
<ul>
<li>
<p>Unless otherwise stated, all item codes may be returned only for Oracle Data Pump and external tables dump files (filetypes 1 and 3).</p>
</li>
<li>
<p>Unless otherwise stated, all item codes have been available since Oracle Database 10<span class="italic">g</span> Release 2 (10.2).</p>
</li>
</ul>
<div id="ARPLS74534" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref2919"></a><a id="CEGHFABA"></a>Table 47-10 Item Codes For the DBMS_DATAPUMP.GET_DUMPFILE_INFO Procedure</p>
<table class="cellalignment4327" title="Item Codes For the DBMS_DATAPUMP.GET_DUMPFILE_INFO Procedure" summary="DBMS_DATAPUMP item codes" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t15">Item Code</th>
<th class="cellalignment4328" id="r1c2-t15">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t15" headers="r1c1-t15">
<p><code dir="ltr">KU$_DFHDR_FILE_VERSION</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t15 r1c2-t15">
<p>The internal file version of the dump file.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t15" headers="r1c1-t15">
<p><code dir="ltr">KU$_DFHDR_MASTER_PRESENT</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t15 r1c2-t15">
<p>If the Data Pump master table is present in the dump file, then the value for this item code is 1; otherwise the value is 0. Returned only for filetype 1.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t15" headers="r1c1-t15">
<p><code dir="ltr">KU$_DFHDR_GUID</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t15 r1c2-t15">
<p>A unique identifier assigned to the Data Pump export job or the external tables unload job that produced the dump file. For a multifile dump set, each file in the set has the same value for this item code.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t15" headers="r1c1-t15">
<p><code dir="ltr">KU$_DFHDR_FILE_NUMBER</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t15 r1c2-t15">
<p>A numeric identifier assigned to the dump file.Each dump file in a multifile dump set has its own identifier, unique only within the dump set.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t15" headers="r1c1-t15">
<p><code dir="ltr">KU$_DFHDR_CHARSET_ID</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t15 r1c2-t15">
<p>A numeric code that represents the character set in use at the source system when the dump file was created.</p>
<p>Returned for all filetypes.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t15" headers="r1c1-t15">
<p><code dir="ltr">KU$_DFHDR_CREATION_DATE</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t15 r1c2-t15">
<p>The date and time that the dump file was created.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t15" headers="r1c1-t15">
<p><code dir="ltr">KU$_DFHDR_FLAGS</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t15 r1c2-t15">
<p>Internal flag values.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t15" headers="r1c1-t15">
<p><code dir="ltr">KU$_DFHDR_JOB_NAME</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t15 r1c2-t15">
<p>The name assigned to the export job that created the dump file.</p>
<p>Returned only for filetype 1.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t15" headers="r1c1-t15">
<p><code dir="ltr">KU$_DFHDR_PLATFORM</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t15 r1c2-t15">
<p>The operating system name of the source system on which the dump file was created.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t15" headers="r1c1-t15">
<p><code dir="ltr">KU$_DFHDR_INSTANCE</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t15 r1c2-t15">
<p>The instance name of the source system on which the dump file was created.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t15" headers="r1c1-t15">
<p><code dir="ltr">KU$_DFHDR_LANGUAGE</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t15 r1c2-t15">
<p>The language name that corresponds to the character set of the source system where the export dump file was created.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t15" headers="r1c1-t15">
<p><code dir="ltr">KU$_DFHDR_BLOCKSIZE</code></p>
</td>
<td class="cellalignment4329" headers="r13c1-t15 r1c2-t15">
<p>The blocksize, in bytes, of the dump file.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t15" headers="r1c1-t15">
<p><code dir="ltr">KU$_DFHDR_DIRPATH</code></p>
</td>
<td class="cellalignment4329" headers="r14c1-t15 r1c2-t15">
<p>If direct path mode was used when the dump file was created, then the value for this item code is 1, otherwise the value is 0.</p>
<p>Returned only for filetype 2.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r15c1-t15" headers="r1c1-t15">
<p><code dir="ltr">KU$_DFHDR_METADATA_COMPRESSED</code></p>
</td>
<td class="cellalignment4329" headers="r15c1-t15 r1c2-t15">
<p>If the system metadata is stored in the dump file in compressed format, then the value for this item code is 1, otherwise the value is 0.</p>
<p>Returned only for filetype 1.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r16c1-t15" headers="r1c1-t15">
<p><code dir="ltr">KU$_DFHDR_DB_VERSION</code></p>
</td>
<td class="cellalignment4329" headers="r16c1-t15 r1c2-t15">
<p>The database job version used to create the dump file.</p>
<p>Returned for all filetypes.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r17c1-t15" headers="r1c1-t15">
<p><code dir="ltr">KU$_DFHDR_MASTER_PIECE_COUNT</code></p>
</td>
<td class="cellalignment4329" headers="r17c1-t15 r1c2-t15">
<p>The Data Pump master table may be split into multiple pieces and written to multiple dump files in the set, one piece per file. The value returned for this item code indicates the number of dump files that contain pieces of the master table. The value for this item code is only meaningful if the Data Pump master table is present in the dump file, as indicated by the item code <code dir="ltr">KU$_DFHDR_MASTER_PRESENT</code>.</p>
<p>Returned only for filetype 1.</p>
<p>Only available since Oracle Database 11<span class="italic">g</span> Release 1 (11.1).</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r18c1-t15" headers="r1c1-t15">
<p><code dir="ltr">KU$_DFHDR_MASTER_PIECE_NUMBER</code></p>
</td>
<td class="cellalignment4329" headers="r18c1-t15 r1c2-t15">
<p>The Data Pump master table may be split into multiple pieces and written to multiple dump files in the set, one piece per file. The value returned for this item code indicates which master table piece is contained in the dump file. The value for this item code is only meaningful if the Data Pump master table is present in the dump file, as indicated by the item code <code dir="ltr">KU$_DFHDR_MASTER_PRESENT</code>.</p>
<p>Returned only for filetype 1.</p>
<p>Only available since Oracle Database 11<span class="italic">g</span> Release 1 (11.1).</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r19c1-t15" headers="r1c1-t15">
<p><code dir="ltr">KU$_DFHDR_DATA_COMPRESSED</code></p>
</td>
<td class="cellalignment4329" headers="r19c1-t15 r1c2-t15">
<p>If the table data is stored in the dump file in compressed format, then the value for this item code is 1, otherwise the value is 0.</p>
<p>Only available since Oracle Database 11<span class="italic">g</span> Release 1 (11.1).</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r20c1-t15" headers="r1c1-t15">
<p><code dir="ltr">KU$_DFHDR_METADATA_ENCRYPTED</code></p>
</td>
<td class="cellalignment4329" headers="r20c1-t15 r1c2-t15">
<p>If the system metadata is stored in the dump file in encrypted format, then the value for this item code is 1, otherwise the value is 0.</p>
<p>Returned only for filetype 1.</p>
<p>Only available since Oracle Database 11<span class="italic">g</span> Release 1 (11.1).</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r21c1-t15" headers="r1c1-t15">
<p><code dir="ltr">KU$_DFHDR_DATA_ENCRYPTED</code></p>
</td>
<td class="cellalignment4329" headers="r21c1-t15 r1c2-t15">
<p>If the table data is stored in the dump file in encrypted format, then the value for this item code is 1, otherwise the value is 0.</p>
<p>Only available since Oracle Database 11<span class="italic">g</span> Release 1 (11.1).</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r22c1-t15" headers="r1c1-t15">
<p><code dir="ltr">KU$_DFHDR_COLUMNS_ENCRYPTED</code></p>
</td>
<td class="cellalignment4329" headers="r22c1-t15 r1c2-t15">
<p>If encrypted column data is stored in the dump file in encrypted format, then the value for this item code is 1, otherwise the value is 0.</p>
<p>Returned only for filetype 1.</p>
<p>Only available since Oracle Database 11<span class="italic">g</span> Release 1 (11.1).</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r23c1-t15" headers="r1c1-t15">
<p><code dir="ltr">KU$_DFHDR_ENCRYPTION_MODE</code></p>
</td>
<td class="cellalignment4329" headers="r23c1-t15 r1c2-t15">
<p>The encryption mode indicates whether a user-provided password or the Oracle Encryption Wallet was used to encrypt data written to the dump file. The possible values returned for this item code are:</p>
<ul>
<li>
<p><code dir="ltr">KU$_DFHDR_ENCMODE_NONE</code></p>
<p>No data was written to the dump file in encrypted format.</p>
</li>
<li>
<p><code dir="ltr">KU$_DFHDR_ENCMODE_PASSWORD</code></p>
<p>Data was written to the dump file in encrypted format using a provided password.</p>
</li>
<li>
<p><code dir="ltr">KU$_DFHDR_ENCMODE_DUAL</code></p>
<p>Data was written to the dump file in encrypted format using both a provided password as well as an Oracle Encryption Wallet.</p>
</li>
<li>
<p><code dir="ltr">KU$_DFHDR_ENCMODE_TRANS</code></p>
<p>Data was written to the dump file in encrypted format transparently using an Oracle Encryption Wallet.</p>
</li>
</ul>
<p>Only available since Oracle Database 11<span class="italic">g</span> Release 1 (11.1).</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r24c1-t15" headers="r1c1-t15">
<p><code dir="ltr">KU$_DFHDR_COMPRESSION_ALG</code></p>
</td>
<td class="cellalignment4329" headers="r24c1-t15 r1c2-t15">
<p>The compression algorithm used when writing system metadata and/or table data to the dump file in compressed format. The possible values returned for this item code are:</p>
<ul>
<li>
<p><code dir="ltr">KU$_DFHDR_CMPALG_NONE</code></p>
<p>No data was written to the dump file in compressed format.</p>
</li>
<li>
<p><code dir="ltr">KU$_DFHDR_CMPALG_BASIC</code></p>
<p>Data was written to the dump file in compressed format using an internal algorithm. This is the default algorithm used since Oracle Database 10<span class="italic">g</span> Release 2 (10.2).</p>
</li>
<li>
<p><code dir="ltr">KU$_DFHDR_CMPALG_LOW</code></p>
<p>Data was written to the dump file in compressed format using the <code dir="ltr">LOW</code> algorithm.</p>
</li>
<li>
<p><code dir="ltr">KU$_DFHDR_CMPALG_MEDIUM</code></p>
<p>Data was written to the dump file in compressed format using the <code dir="ltr">MEDIUM</code> algorithm.</p>
</li>
<li>
<p><code dir="ltr">KU$_DFHDR_CMPALG_HIGH</code></p>
<p>Data was written to the dump file in compressed format using the <code dir="ltr">HIGH</code> algorithm.</p>
</li>
</ul>
<p>Only available since Oracle Database 12<span class="italic">c</span> Release 1 (12.1).</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformalwide" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66040" class="refsect2"><a id="i997417"></a>
<h3 class="refsect2">GET_STATUS Procedure<a id="sthref2920"></a></h3>
<p>This procedure monitors the status of a job or waits for the completion of a job.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2921"></a>Syntax</p>
<pre dir="ltr">DBMS_DATAPUMP.GET_STATUS(
   handle    IN NUMBER,
   mask      IN BINARY_INTEGER,
   timeout   IN NUMBER DEFAULT NULL,
   job_state OUT VARCHAR2,
   status    OUT ku$_Status);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2922"></a>Parameters</p>
<div id="ARPLS66041" class="tblformal">
<p class="titleintable"><a id="sthref2923"></a><a id="sthref2924"></a>Table 47-11 GET_STATUS Procedure Parameters</p>
<table class="cellalignment4330" title="GET_STATUS Procedure Parameters" summary="This table describes the parameters of DBMS_DATAPUMP.GET_STATUS." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t16">Parameter</th>
<th class="cellalignment4328" id="r1c2-t16">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t16" headers="r1c1-t16">
<p><code dir="ltr">handle</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t16 r1c2-t16">
<p>The handle of a job. The current session must have previously attached to the handle through a call to either the <code dir="ltr">OPEN</code> or <code dir="ltr">ATTACH</code> function. A null handle can be used to retrieve error information after <code dir="ltr">OPEN</code> and <code dir="ltr">ATTACH</code> failures.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t16" headers="r1c1-t16">
<p><code dir="ltr">mask</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t16 r1c2-t16">
<p>A bit mask that indicates which of four types of information to return:</p>
<ul>
<li>
<p><code dir="ltr">KU$_STATUS_WIP</code></p>
</li>
<li>
<p><code dir="ltr">KU$_STATUS_JOB_DESC</code></p>
</li>
<li>
<p><code dir="ltr">KU$_STATUS_JOB_STATUS</code></p>
</li>
<li>
<p><code dir="ltr">KU$_STATUS_JOB_ERROR</code></p>
</li>
</ul>
<p>Each status has a numerical value. You can request multiple types of information by adding together different combinations of values. See <a href="#BABJJAFC">Data Structures - Object Types</a>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t16" headers="r1c1-t16">
<p><code dir="ltr">timeout</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t16 r1c2-t16">
<p>Maximum number of seconds to wait before returning to the user. A value of 0 requests an immediate return. A value of -1 requests an infinite wait. If <code dir="ltr">KU$_STATUS_WIP</code> or <code dir="ltr">KU$_STATUS_JOB_ERROR</code> information is requested and becomes available during the timeout period, then the procedure returns before the timeout period is over.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t16" headers="r1c1-t16">
<p><code dir="ltr">job_state</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t16 r1c2-t16">
<p>Current state of the job. If only the job state is needed, it is much more efficient to use this parameter than to retrieve the full <code dir="ltr">ku$_Status</code> structure.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t16" headers="r1c1-t16">
<p><code dir="ltr">status</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t16 r1c2-t16">
<p>A ku$_Status is returned. The ku$_Status mask indicates what kind of information is included. This could be none if only <code dir="ltr">KU$_STATUS_WIP</code> or <code dir="ltr">KU$_STATUS_JOB_ERROR</code> information is requested and the timeout period expires.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2925"></a>Exceptions</p>
<ul>
<li>
<p><code dir="ltr">INVALID_HANDLE</code>. The specified handle is not attached to a Data Pump job.</p>
</li>
<li>
<p><code dir="ltr">INVALID_VALUE</code>. The mask or timeout contains an illegal value.</p>
</li>
<li>
<p><code dir="ltr">SUCCESS_WITH_INFO</code>. The procedure succeeded, but further information is available through the <code dir="ltr">GET_STATUS</code> procedure.</p>
</li>
<li>
<p><code dir="ltr">NO_SUCH_JOB</code>. The specified job does not exist.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2926"></a>Usage Notes</p>
<p>The <code dir="ltr">GET_STATUS</code> procedure is used to monitor the progress of an ongoing job and to receive error notification. You can request various type of information using the mask parameter. The <code dir="ltr">KU$_STATUS_JOB_DESC</code> and <code dir="ltr">KU$_STATUS_JOB_STATUS</code> values are classified as synchronous information because the information resides in the master table. The <code dir="ltr">KU$_STATUS_WIP</code> and <code dir="ltr">KU$_STATUS_JOB_ERROR</code> values are classified as asynchronous because the messages that embody these types of information can be generated at any time by various layers in the Data Pump architecture.</p>
<ul>
<li>
<p>If synchronous information <code dir="ltr"><span class="codeinlineitalic">only</span></code> is requested, the interface will ignore the timeout parameter and simply return the requested information.</p>
</li>
<li>
<p>If asynchronous information is requested, the interface will wait a <code dir="ltr"><span class="codeinlineitalic">maximum</span></code> of timeout seconds before returning to the client. If a message of the requested asynchronous information type is received, the call will complete prior to timeout seconds. If synchronous information was also requested, it will be returned whenever the procedure returns.</p>
</li>
<li>
<p>If the <code dir="ltr">job_state</code> returned by <code dir="ltr">GET_STATUS</code> does not indicate a terminating job, it is possible that the job could still terminate before the next call to <code dir="ltr">GET_STATUS</code>. This would result in an <code dir="ltr">INVALID_HANDLE</code> exception. Alternatively, the job could terminate during the call to <code dir="ltr">GET_STATUS</code>, which would result in a <code dir="ltr">NO_SUCH_JOB</code> exception. Callers should be prepared to handle these cases.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2927"></a>Error Handling</p>
<p>There are two types of error scenarios that need to be handled using the <code dir="ltr">GET_STATUS</code> procedure:</p>
<ul>
<li>
<p>Errors resulting from other procedure calls: For example, the <code dir="ltr">SET_PARAMETER</code> procedure may produce an <code dir="ltr">INCONSISTENT_ARGS</code> exception. The client should immediately call <code dir="ltr">GET_STATUS</code> with <code dir="ltr">mask=8</code> (errors) and <code dir="ltr">timeout=0</code>. The returned ku$_Status.error will contain a ku$_LogEntry that describes the inconsistency in more detail.</p>
</li>
<li>
<p>Errors resulting from events asynchronous to the client(s): An example might be <code dir="ltr">Table</code> <code dir="ltr">already</code> <code dir="ltr">exists</code> when trying to create a table. The <code dir="ltr">ku$_Status.error</code> will contain a <code dir="ltr">ku$_LogEntry</code> with all error lines (from all processing layers that added context about the error) properly ordered.</p>
</li>
</ul>
<p>After a job has begun, a client&#39;s main processing loop will typically consist of a call to <code dir="ltr">GET_STATUS</code> with an infinite timeout (-1) &#34;listening&#34; for <code dir="ltr">KU$_STATUS_WIP</code> and <code dir="ltr">KU$_STATUS_JOB_ERROR</code> messages. If status was requested, then <code dir="ltr">JOB_STATUS</code> information will also be in the request.</p>
<p>When the ku$_Status is interpreted, the following guidelines should be used:</p>
<ul>
<li>
<p><code dir="ltr">ku$_Status.ku$_JobStatus.percent_done</code> refers only to the amount of data that has been processed in a job. Metadata is not considered in the calculation. It is determined using the following formulas:</p>
<ul>
<li>
<p>EXPORT or network IMPORT--<code dir="ltr">(bytes_processed/estimated_bytes) * 100</code></p>
</li>
<li>
<p>IMPORT--<code dir="ltr">(bytes_processed/total_expected_bytes) * 100</code></p>
</li>
<li>
<p>SQL_FILE or estimate-only EXPORT--<code dir="ltr">0.00</code> if not done or <code dir="ltr">100</code>.<code dir="ltr">00</code> if done</p>
</li>
</ul>
<p>The effects of the <code dir="ltr">QUERY</code> and <code dir="ltr">PARTITION_EXPR</code> data filters are not considered in computing <code dir="ltr">percent_done</code>.</p>
<p>It is expected that the status returned will be transformed by the caller into more user-friendly status. For example, when percent done is not zero, an estimate of completion time could be produced using the following formula:</p>
<pre dir="ltr">((SYSDATE - start time) / ku$_Status.ku$_JobStatus.percent_done) * 100
</pre></li>
<li>
<p>The caller should not use <code dir="ltr">ku$_Status.ku$_JobStatus.percent_done</code> for determining whether the job has completed. Instead, the caller should only rely on the state of the job as found in <code dir="ltr">job_state</code>.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66042" class="refsect2"><a id="i997488"></a>
<h3 class="refsect2">LOG_ENTRY Procedure<a id="sthref2928"></a></h3>
<p>This procedure inserts a message into the log file.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2929"></a>Syntax</p>
<pre dir="ltr">DBMS_DATAPUMP.LOG_ENTRY(
   handle         IN NUMBER,
   message        IN VARCHAR2
   log_file_only  IN NUMBER DEFAULT 0);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2930"></a>Parameters</p>
<div id="ARPLS66043" class="tblformal">
<p class="titleintable"><a id="sthref2931"></a><a id="sthref2932"></a>Table 47-12 LOG_ENTRY Procedure Parameters</p>
<table class="cellalignment4330" title="LOG_ENTRY Procedure Parameters" summary="This table describes the parameters of DBMS_DATAPUMP.LOG_ENTRY." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t17">Parameter</th>
<th class="cellalignment4328" id="r1c2-t17">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t17" headers="r1c1-t17">
<p><code dir="ltr">handle</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t17 r1c2-t17">
<p>The handle of a job. The current session must have previously attached to the handle through a call to either the <code dir="ltr">OPEN</code> or <code dir="ltr">ATTACH</code> function.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t17" headers="r1c1-t17">
<p><code dir="ltr">message</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t17 r1c2-t17">
<p>A text line to be added to the log file</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t17" headers="r1c1-t17">
<p><code dir="ltr">log_file_only</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t17 r1c2-t17">
<p>Specified text should be written only to the log file. It should not be returned in <code dir="ltr">GET_STATUS</code> work-in-progress (<code dir="ltr">KU$_STATUS_WIP</code>) messages.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2933"></a>Exceptions</p>
<ul>
<li>
<p><code dir="ltr">INVALID_HANDLE</code>. The specified handle is not attached to a Data Pump job.</p>
</li>
<li>
<p><code dir="ltr">SUCCESS_WITH_INFO</code>. The procedure succeeded, but further information is available through the <code dir="ltr">GET_STATUS</code> procedure.</p>
</li>
<li>
<p><code dir="ltr">NO_SUCH_JOB</code>. The specified job does not exist.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2934"></a>Usage Notes</p>
<p>The message is added to the log file. If <code dir="ltr">log_file_only</code> is zero (the default), the message is also broadcast as a <code dir="ltr">KU$_STATUS_WIP</code> message through the <code dir="ltr">GET_STATUS</code> procedure to all users attached to the job.</p>
<p>The <code dir="ltr">LOG_ENTRY</code> procedure allows applications to tailor the log stream to match the abstractions provided by the application. For example, the command-line interface supports <code dir="ltr">INCLUDE</code> and <code dir="ltr">EXCLUDE</code> parameters defined by the user. Identifying these values as calls to the underlying <code dir="ltr">METADATA_FILTER</code> procedure would be confusing to users. Instead, the command-line interface can enter text into the log describing the settings for the <code dir="ltr">INCLUDE</code> and <code dir="ltr">EXCLUDE</code> parameters.</p>
<p>Lines entered in the log stream from <code dir="ltr">LOG_ENTRY</code> are prefixed by the string, &#34;<code dir="ltr">;;;</code> &#34;</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66044" class="refsect2"><a id="BABJACDG"></a>
<h3 class="refsect2">METADATA_FILTER Procedure<a id="sthref2935"></a></h3>
<p>This procedure provides filters that allow you to restrict the items that are included in a job.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2936"></a>Syntax</p>
<pre dir="ltr">DBMS_DATAPUMP.METADATA_FILTER(
   handle       IN NUMBER,
   name         IN VARCHAR2,
   value        IN VARCHAR2,
   object_path  IN VARCHAR2 DEFAULT NULL);

DBMS_DATAPUMP.METADATA_FILTER(
   handle       IN NUMBER,
   name         IN VARCHAR2,
   value        IN CLOB,
   object_path  IN VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2937"></a>Parameters</p>
<div id="ARPLS66045" class="tblformal">
<p class="titleintable"><a id="sthref2938"></a><a id="sthref2939"></a>Table 47-13 METADATA_FILTER Procedure Parameters</p>
<table class="cellalignment4330" title="METADATA_FILTER Procedure Parameters" summary="This table describes the parameters of DBMS_DATAPUMP.METADATA_FILTER." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t18">Parameter</th>
<th class="cellalignment4328" id="r1c2-t18">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t18" headers="r1c1-t18">
<p><code dir="ltr">handle</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t18 r1c2-t18">
<p>The handle returned from the <code dir="ltr">OPEN</code> function</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t18" headers="r1c1-t18">
<p><code dir="ltr">name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t18 r1c2-t18">
<p>The name of the filter. See <a href="#BABDDDEF">Table 47-14</a> for descriptions of the available filters.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t18" headers="r1c1-t18">
<p><code dir="ltr">value</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t18 r1c2-t18">
<p>The value of the filter</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t18" headers="r1c1-t18">
<p><code dir="ltr">object_path</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t18 r1c2-t18">
<p>The object path to which the filter applies. If the default is used, the filter applies to all applicable objects. Lists of the object paths supported for each mode are contained in the catalog views for <code dir="ltr">DATABASE_EXPORT_OBJECTS</code>, <code dir="ltr">SCHEMA_EXPORT_OBJECTS</code>, and <code dir="ltr">TABLE_EXPORT_OBJECTS</code>. (Note that the <code dir="ltr">TABLE_EXPORT_OBJECTS</code> view is applicable to both Table and Tablespace mode because their object paths are the same.)</p>
<p>For an import operation, object paths reference the mode used to create the dump file rather than the mode being used for the import.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p><a href="#BABDDDEF">Table 47-14</a> describes the name, the object type, and the meaning of the filters available with the <code dir="ltr">METADATA_FILTER</code> procedure. The datatype for all the filters is a text expression. All operations support all filters.</p>
<div id="ARPLS66046" class="tblformal">
<p class="titleintable"><a id="sthref2940"></a><a id="BABDDDEF"></a>Table 47-14 Filters Provided by METADATA_FILTER Procedure</p>
<table class="cellalignment4330" title="Filters Provided by METADATA_FILTER Procedure" summary="his table describes Filters Provided by the METADATA_FILTER Procedure." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t19">Name</th>
<th class="cellalignment4328" id="r1c2-t19">Object Type</th>
<th class="cellalignment4328" id="r1c3-t19">Meaning</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t19" headers="r1c1-t19">
<p><code dir="ltr">NAME_EXPR</code></p>
<p><code dir="ltr">NAME_LIST</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t19 r1c2-t19">
<p>Named objects</p>
</td>
<td class="cellalignment4329" headers="r2c1-t19 r1c3-t19">
<p>Defines which object names are included in the job. You use the object type parameter to limit the filter to a particular object type.</p>
<p>For Table mode, identifies which tables are to be processed.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t19" headers="r1c1-t19">
<p><code dir="ltr">SCHEMA_EXPR</code></p>
<p><code dir="ltr">SCHEMA_LIST</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t19 r1c2-t19">
<p>Schema objects</p>
</td>
<td class="cellalignment4329" headers="r3c1-t19 r1c3-t19">
<p>Restricts the job to objects whose owning schema name is satisfied by the expression.</p>
<p>For Table mode, only a single <code dir="ltr">SCHEMA_EXPR</code> filter is supported. If specified, it must only specify a single schema (for example, <code dir="ltr">&#39;IN (&#39;&#39;SCOTT&#39;&#39;)&#39;)</code>.</p>
<p>For Schema mode, identifies which users are to be processed.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t19" headers="r1c1-t19">
<p><code dir="ltr">TABLESPACE_EXPR</code></p>
<p><code dir="ltr">TABLESPACE_LIST</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t19 r1c2-t19">
<p><code dir="ltr">TABLE, CLUSTER, INDEX, ROLLBACK_SEGMENT</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t19 r1c3-t19">
<p>Restricts the job to objects stored in a tablespace whose name is satisfied by the expression.</p>
<p>For Tablespace mode, identifies which tablespaces are to be processed. If a partition of an object is stored in the tablespace, the entire object is added to the job.</p>
<p>For Transportable mode, identifies which tablespaces are to be processed. If a table has a single partition in the tablespace set, all partitions must be in the tablespace set. An index is not included within the tablespace set unless all of its partitions are in the tablespace set. A domain index is not included in the tablespace set unless all of its secondary objects are included in the tablespace set.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t19" headers="r1c1-t19">
<p><code dir="ltr">INCLUDE_PATH_EXPR</code></p>
<p><code dir="ltr">INCLUDE_PATH_LIST</code></p>
<p><code dir="ltr">EXCLUDE_PATH_EXPR</code></p>
<p><code dir="ltr">EXCLUDE_PATH_LIST</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t19 r1c2-t19">
<p>All</p>
</td>
<td class="cellalignment4329" headers="r5c1-t19 r1c3-t19">
<p>Defines which object paths are included in, or excluded from, the job. You use these filters to select only certain object types from the database or dump file set. Objects of paths satisfying the condition are included (<code dir="ltr">INCLUDE_PATH_*</code>) or excluded (<code dir="ltr">EXCLUDE_PATH_*</code>) from the operation. The <code dir="ltr">object_path</code> parameter is not supported for these filters.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t19" headers="r1c1-t19">
<p><code dir="ltr">EXCLUDE_TABLES</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t19 r1c2-t19">
<p><code dir="ltr">TABLE_EXPORT</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t19 r1c3-t19">
<p>Specifies that no tables are to be exported.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t19" headers="r1c1-t19">
<p><code dir="ltr">VIEWS_AS_TABLES</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t19 r1c2-t19">
<p><code dir="ltr">TABLE_EXPORT</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t19 r1c3-t19">
<p>A comma-separated list of views to be exported as tables:</p>
<p>[schema_name.]view_name[:table_name]</p>
<p>The filter can be called multiple times with multiple values and all values get added to a list. All views on the list are exported as tables.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2941"></a>Exceptions</p>
<ul>
<li>
<p><code dir="ltr">INVALID_HANDLE</code>. The specified handle is not attached to a Data Pump job.</p>
</li>
<li>
<p><code dir="ltr">INVALID_ARGVAL</code>. This exception can indicate any of the following conditions:</p>
<ul>
<li>
<p>An <code dir="ltr">object_path</code> was specified for an <code dir="ltr">INCLUDE_PATH_EXPR</code> or <code dir="ltr">EXCLUDE_PATH_EXPR</code> filter.</p>
</li>
<li>
<p>The specified <code dir="ltr">object_path</code> is not supported for the current mode.</p>
</li>
<li>
<p>The <code dir="ltr">SCHEMA_EXPR</code> filter specified multiple schemas for a Table mode job.</p>
</li>
</ul>
</li>
<li>
<p><code dir="ltr">INVALID_STATE</code>. The user called the <code dir="ltr">METADATA_FILTER</code> procedure after the job left the defining state.</p>
</li>
<li>
<p><code dir="ltr">INCONSISTENT_ARGS</code>. The filter value is of the wrong datatype or is missing.</p>
</li>
<li>
<p><code dir="ltr">SUCCESS_WITH_INFO</code>. The procedure succeeded but further information is available through the <code dir="ltr">GET_STATUS</code> procedure.</p>
</li>
<li>
<p><code dir="ltr">NO_SUCH_JOB</code>. The specified job does not exist.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2942"></a>Usage Notes</p>
<ul>
<li>
<p>Metadata filters identify a set of objects to be included or excluded from a Data Pump operation. Except for <code dir="ltr">EXCLUDE_PATH_EXPR</code> and <code dir="ltr">INCLUDE_PATH_EXPR</code>, dependent objects of an identified object will be processed along with the identified object. For example, if an index is identified for inclusion by a filter, grants upon that index will also be included by the filter. Likewise, if a table is excluded by a filter, then indexes, constraints, grants and triggers upon the table will also be excluded by the filter.</p>
</li>
<li>
<p>Two versions of each filter are supported: SQL expression and List. The SQL expression version of the filters offer maximum flexibility for identifying objects (for example the use of LIKE to support use of wild cards). The names of the expression filters are as follows:</p>
<ul>
<li>
<p><code dir="ltr">NAME_EXPR</code></p>
</li>
<li>
<p><code dir="ltr">SCHEMA_EXPR</code></p>
</li>
<li>
<p><code dir="ltr">TABLESPACE_EXPR</code></p>
</li>
<li>
<p><code dir="ltr">INCLUDE_PATH_EXPR</code></p>
</li>
<li>
<p><code dir="ltr">EXCLUDE_PATH_EXPR</code></p>
</li>
</ul>
<p>The list version of the filters allow maximum validation of the filter. An error will be reported if one of the elements in the filter is not found within the source database (for Export and network-based jobs) or is not found within the dump file (for file-based Import and SQLFILE jobs). The names of the list filters are as follows:</p>
<ul>
<li>
<p><code dir="ltr">NAME_LIST</code></p>
</li>
<li>
<p><code dir="ltr">SCHEMA_LIST</code></p>
</li>
<li>
<p><code dir="ltr">TABLESPACE_LIST</code></p>
</li>
<li>
<p><code dir="ltr">INCLUDE_PATH_LIST</code></p>
</li>
<li>
<p><code dir="ltr">EXCLUDE_PATH_LIST</code></p>
</li>
</ul>
</li>
<li>
<p>Filters allow a user to restrict the items that are included in a job. For example, a user could request a full export, but without Package Specifications or Package Bodies.</p>
</li>
<li>
<p>If multiple filters are specified for a object type, they are implicitly &#39;ANDed&#39; together (that is, objects participating in the job must pass all of the filters applied to their object types).</p>
</li>
<li>
<p>The same filter name can be specified multiple times within a job. For example, specifying <code dir="ltr">NAME_EXPR as &#39;!=&#39;&#39;EMP&#39;&#39;&#39;</code> and <code dir="ltr">NAME_EXPR as &#39;!=&#39;&#39;DEPT&#39;&#39;&#39;</code> on a Table mode export would produce a file set containing all of the tables except for <code dir="ltr">EMP</code> and <code dir="ltr">DEPT</code>.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66047" class="refsect2"><a id="i1007115"></a>
<h3 class="refsect2">METADATA_REMAP Procedure</h3>
<p>This procedure<a id="sthref2943"></a> specifies a remapping to be applied to objects as they are processed in the specified job.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2944"></a>Syntax</p>
<pre dir="ltr">DBMS_DATAPUMP.METADATA_REMAP (
   handle      IN NUMBER,
   name        IN VARCHAR2,
   old_value   IN VARCHAR2,
   value       IN VARCHAR2,
   object_type IN VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2945"></a>Parameters</p>
<div id="ARPLS66048" class="tblformal">
<p class="titleintable"><a id="sthref2946"></a><a id="sthref2947"></a>Table 47-15 METADATA_REMAP Procedure Parameters</p>
<table class="cellalignment4330" title="METADATA_REMAP Procedure Parameters" summary="This table describes the parameters of DBMS_DATAPUMP.METADATA_REMAP." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t20">Parameter</th>
<th class="cellalignment4328" id="r1c2-t20">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t20" headers="r1c1-t20">
<p><code dir="ltr">handle</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t20 r1c2-t20">
<p>The handle for the current job. The current session must have previously attached to the handle through a call to the <code dir="ltr">OPEN</code> function.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t20" headers="r1c1-t20">
<p><code dir="ltr">name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t20 r1c2-t20">
<p>The name of the remap. See <a href="#BABDJGDI">Table 47-16</a> for descriptions of the available remaps.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t20" headers="r1c1-t20">
<p><code dir="ltr">old_value</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t20 r1c2-t20">
<p>Specifies which value in the dump file set should be reset to <code dir="ltr">value</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t20" headers="r1c1-t20">
<p><code dir="ltr">value</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t20 r1c2-t20">
<p>The value of the parameter for the remap. This signifies the new value that <code dir="ltr">old_value</code> should be translated into.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t20" headers="r1c1-t20">
<p><code dir="ltr">object_type</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t20 r1c2-t20">
<p>Designates the object type to which the remap applies. The list of object types supported for each mode are contained in the <code dir="ltr">DATABASE_EXPORT_OBJECTS</code>, <code dir="ltr">SCHEMA_EXPORT_OBJECTS</code>, <code dir="ltr">TABLE_EXPORT_OBJECTS</code>, and <code dir="ltr">TABLESPACE_EXPORT_OBJECTS</code> catalog views.</p>
<p>By default, the remap applies to all applicable objects within the job. The <code dir="ltr">object_type</code> parameter allows a caller to specify different parameters for different object types within a job. Remaps that explicitly specify an object type override remaps that apply to all object types.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p><a href="#BABDJGDI">Table 47-16</a> describes the remaps provided by the <code dir="ltr">METADATA_REMAP</code> procedure.</p>
<div id="ARPLS66049" class="tblformal">
<p class="titleintable"><a id="sthref2948"></a><a id="BABDJGDI"></a>Table 47-16 Remaps Provided by the METADATA_REMAP Procedure</p>
<table class="cellalignment4330" title="Remaps Provided by the METADATA_REMAP Procedure" summary="This table describes Remaps Provided by the METADATA_REMAP Procedure." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t21">Name</th>
<th class="cellalignment4328" id="r1c2-t21">Datatype</th>
<th class="cellalignment4328" id="r1c3-t21">Object Type</th>
<th class="cellalignment4328" id="r1c4-t21">Meaning</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t21" headers="r1c1-t21">
<p><code dir="ltr">REMAP_SCHEMA</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t21 r1c2-t21">
<p><code dir="ltr">TEXT</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t21 r1c3-t21">
<p>Schema objects</p>
</td>
<td class="cellalignment4329" headers="r2c1-t21 r1c4-t21">
<p>Any schema object in the job that matches the <code dir="ltr">object_type</code> parameter and was located in the <code dir="ltr">old_value</code> schema will be moved to the <code dir="ltr">value</code> schema.</p>
<p>Privileged users can perform unrestricted schema remaps.</p>
<p>Nonprivileged users can perform schema remaps only if their schema is the target schema of the remap.</p>
<p>For example, <code dir="ltr">SCOTT</code> can remap his <code dir="ltr">BLAKE&#39;s</code> objects to <code dir="ltr">SCOTT</code>, but <code dir="ltr">SCOTT</code> cannot remap <code dir="ltr">SCOTT&#39;s</code> objects to <code dir="ltr">BLAKE</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t21" headers="r1c1-t21">
<p><code dir="ltr">REMAP_TABLESPACE</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t21 r1c2-t21">
<p><code dir="ltr">TEXT</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t21 r1c3-t21">
<p><code dir="ltr">TABLE, INDEX, ROLLBACK_SEGMENT, MATERIALIZED_VIEW, MATERIALIZED_VIEW_LOG,TABLE_SPACE</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t21 r1c4-t21">
<p>Any storage segment in the job that matches the <code dir="ltr">object_type</code> parameter and was located in the <code dir="ltr">old_value</code> tablespace will be relocated to the <code dir="ltr">value</code> tablespace.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t21" headers="r1c1-t21">
<p><code dir="ltr">REMAP_DATAFILE</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t21 r1c2-t21">
<p><code dir="ltr">TEXT</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t21 r1c3-t21">
<p><code dir="ltr">LIBRARY, TABLESPACE, DIRECTORY</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t21 r1c4-t21">
<p>Any data file reference in the job that matches the <code dir="ltr">object_type</code> parameter and referenced the <code dir="ltr">old_value</code> data file will be redefined to use the <code dir="ltr">value</code> data file.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t21" headers="r1c1-t21">
<p><code dir="ltr">REMAP_TABLE</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t21 r1c2-t21">
<p><code dir="ltr">TEXT</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t21 r1c3-t21">
<p><code dir="ltr">TABLE</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t21 r1c4-t21">
<p>Any reference to a table in the job that matches the <code dir="ltr">old_value</code> table name will be replaced with the <code dir="ltr">value</code> table name. The <code dir="ltr">old_value</code> parameter may refer to a partition such as <code dir="ltr">employees.low</code>. This allows names for tables constructed the by <code dir="ltr">PARTITION_OPTIONS=DEPARTITION</code> parameter to be specified by the user.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2949"></a>Exceptions</p>
<ul>
<li>
<p><code dir="ltr">INVALID_HANDLE</code>. The specified handle is not attached to a Data Pump job.</p>
</li>
<li>
<p><code dir="ltr">INVALID_ARGVAL</code>. This message can indicate any of the following:</p>
<ul>
<li>
<p>The job&#39;s mode does not include the specified <code dir="ltr">object_type</code>.</p>
</li>
<li>
<p>The remap has already been specified for the specified <code dir="ltr">old_value</code> and <code dir="ltr">object_type</code>.</p>
</li>
</ul>
</li>
<li>
<p><code dir="ltr">INVALID_OPERATION</code>. Remaps are only supported for SQL_FILE and Import operations. The job&#39;s operation was Export, which does not support the use of metadata remaps.</p>
</li>
<li>
<p><code dir="ltr">INVALID_STATE</code>. The user called <code dir="ltr">METADATA_REMAP</code> after the job had started (that is, the job was not in the defining state).</p>
</li>
<li>
<p><code dir="ltr">INCONSISTENT_ARGS</code>. There was no <code dir="ltr">value</code> supplied or it was of the wrong datatype for the remap.</p>
</li>
<li>
<p><code dir="ltr">PRIVILEGE_ERROR</code>. A nonprivileged user attempted to do a <code dir="ltr">REMAP_SCHEMA</code> to a different user&#39;s schema or a <code dir="ltr">REMAP_DATAFILE</code>.</p>
</li>
<li>
<p><code dir="ltr">SUCCESS_WITH_INFO</code>. The procedure succeeded, but further information is available through the <code dir="ltr">GET_STATUS</code> procedure.</p>
</li>
<li>
<p><code dir="ltr">NO_SUCH_JOB</code>. The specified job does not exist.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2950"></a>Usage Notes</p>
<ul>
<li>
<p>The <code dir="ltr">METADATA_REMAP</code> procedure is only supported for Import and SQL_FILE operations. It enables you to apply commonly desired, predefined remappings to the definition of objects as part of the transfer. If you need remaps that are not supported within this procedure, you should do a preliminary SQL_FILE operation to produce a SQL script corresponding to the dump file set. By editing the DDL directly and then executing it, you can produce any remappings that you need.</p>
</li>
<li>
<p>Transforms for the DataPump API are a subset of the remaps implemented by the <code dir="ltr">DBMS_METADATA</code>.<code dir="ltr">SET_TRANSFORM_PARAMETER</code> API. Multiple remaps can be defined for a single job. However, each remap defined must be unique according its parameters. That is, two remaps cannot specify conflicting or redundant remaps.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66050" class="refsect2"><a id="i1006886"></a>
<h3 class="refsect2">METADATA_TRANSFORM Procedure</h3>
<p>This procedure<a id="sthref2951"></a> specifies transformations to be applied to objects as they are processed in the specified job.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2952"></a>Syntax</p>
<pre dir="ltr">DBMS_DATAPUMP.METADATA_TRANSFORM (
   handle      IN NUMBER,
   name        IN VARCHAR2,
   value       IN VARCHAR2,
   object_type IN VARCHAR2 DEFAULT NULL);
</pre>
<pre dir="ltr">DBMS_DATAPUMP.METADATA_TRANSFORM (
   handle      IN NUMBER,
   name        IN VARCHAR2,
   value       IN NUMBER,
   object_type IN VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2953"></a>Parameters</p>
<div id="ARPLS66051" class="tblformal">
<p class="titleintable"><a id="sthref2954"></a><a id="sthref2955"></a>Table 47-17 METADATA_TRANSFORM Procedure Parameters</p>
<table class="cellalignment4330" title="METADATA_TRANSFORM Procedure Parameters" summary="This table describes the parameters of DBMS_DATAPUMP.METADATA_TRANSFORM." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t22">Parameter</th>
<th class="cellalignment4328" id="r1c2-t22">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t22" headers="r1c1-t22">
<p><code dir="ltr">handle</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t22 r1c2-t22">
<p>The handle for the current job. The current session must have previously attached to the handle through a call to the <code dir="ltr">OPEN</code> function.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t22" headers="r1c1-t22">
<p><code dir="ltr">name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t22 r1c2-t22">
<p>The name of the transformation. See <a href="#BABBGGJD">Table 47-18</a> for descriptions of the available transforms.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t22" headers="r1c1-t22">
<p><code dir="ltr">value</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t22 r1c2-t22">
<p>The value of the parameter for the transform</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t22" headers="r1c1-t22">
<p><code dir="ltr">object_type</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t22 r1c2-t22">
<p>Designates the object type to which the transform applies. The list of object types supported for each mode are contained in the <code dir="ltr">DATABASE_EXPORT_OBJECTS</code>, <code dir="ltr">SCHEMA_EXPORT_OBJECTS</code>, <code dir="ltr">TABLE_EXPORT_OBJECTS</code>, and <code dir="ltr">TABLESPACE_EXPORT_OBJECTS</code> catalog views.</p>
<p>By default, the transform applies to all applicable objects within the job. The <code dir="ltr">object_type</code> parameter allows a caller to specify different transform parameters for different object types within a job. Transforms that explicitly specify an object type override transforms that apply to all object types.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p><a href="#BABBGGJD">Table 47-18</a> describes the transforms provided by the <code dir="ltr">METADATA_TRANSFORM</code> procedure.</p>
<div id="ARPLS66052" class="tblformal">
<p class="titleintable"><a id="sthref2956"></a><a id="BABBGGJD"></a>Table 47-18 Transforms Provided by the METADATA_TRANFORM Procedure</p>
<table class="cellalignment4330" title="Transforms Provided by the METADATA_TRANFORM Procedure" summary="This table describes Transforms Provided by the METADATA_TRANFORM Procedure." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t23">Name</th>
<th class="cellalignment4328" id="r1c2-t23">Datatype</th>
<th class="cellalignment4328" id="r1c3-t23">Object Type</th>
<th class="cellalignment4328" id="r1c4-t23">Meaning</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t23" headers="r1c1-t23">
<p><code dir="ltr">DISABLE_ARCHIVE_LOGGING</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t23 r1c2-t23">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t23 r1c3-t23">
<p><code dir="ltr">TABLE</code></p>
<p><code dir="ltr">INDEX</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t23 r1c4-t23">
<p>Specifies whether to disable archive logging for specified object types during import.</p>
<p>A value of zero (<code dir="ltr">FALSE</code>) is the default. It specifies that archive logging will take place. This is the default behavior if this transform parameter is not specified.</p>
<p>A non-zero (<code dir="ltr">TRUE</code>) value disables archive logging for the specified object types before data is loaded during import. If no object type is specified, then archive logging is disabled for both TABLE and INDEX object types. All other object types processed during data pump import are logged.</p>
<p><span class="bold">Note:</span> If the database is in <code dir="ltr">FORCE LOGGING</code> mode, then the <code dir="ltr">DISABLE_ARCHIVE_LOGGING</code> transform does not disable logging when indexes and tables are created.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t23" headers="r1c1-t23">
<p><code dir="ltr">INMEMORY</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t23 r1c2-t23">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t23 r1c3-t23">
<p><code dir="ltr">TABLE</code></p>
<p><code dir="ltr">TABLESPACE</code></p>
<p><code dir="ltr">MATERIALIZED</code> <code dir="ltr">VIEWS</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t23 r1c4-t23">
<p>The <code dir="ltr">INMEMORY</code> transform is related to the In-Memory Column Store (IM column store), an optional area in the SGA that stores whole tables, table partitions, and individual columns in a compressed columnar format.</p>
<p>If a non-zero value (<code dir="ltr">TRUE</code>) is specified on import, then Data Pump generates an IM clause that preserves the IM setting those objects had at export time. This is the default.</p>
<p>If a value of zero (<code dir="ltr">FALSE</code>) is specified on import, then Data Pump does not include an IM clause for any objects.</p>
<p><span class="bold">Note</span>: The <code dir="ltr">INMEMORY</code> transform is available only in Oracle Database 12<span class="italic">c</span> Release 1 (12.1.0.2) or higher.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t23" headers="r1c1-t23">
<p><code dir="ltr">INMEMORY_CLAUSE</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t23 r1c2-t23">
<p><code dir="ltr">TEXT</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t23 r1c3-t23">
<p><code dir="ltr">TABLE</code></p>
<p><code dir="ltr">TABLESPACE</code></p>
<p><code dir="ltr">MATERIALIZED VIEWS</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t23 r1c4-t23">
<p>The <code dir="ltr">INMEMORY_CLAUSE</code> transform is related to the In-Memory Column Store (IM column store), an optional area in the SGA that stores whole tables, table partitions, and individual columns in a compressed columnar format.</p>
<p>When you specify this transform, Data Pump uses the contents of the string as the IM clause for all objects being imported that have an IM clause in their DDL. This transform is useful when you want to override the IM clause for an object in the dump file.</p>
<p><span class="bold">Note</span>: The <code dir="ltr">INMEMORY_CLAUSE</code> transform is available only in Oracle Database 12<span class="italic">c</span> Release (12.1.0.2) or higher.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t23" headers="r1c1-t23">
<p><code dir="ltr">LOB_STORAGE</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t23 r1c2-t23">
<p><code dir="ltr">TEXT</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t23 r1c3-t23">
<p><code dir="ltr">TABLE</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t23 r1c4-t23">
<p>Specifies the storage type to use for LOB segments. The options are as follows:</p>
<ul>
<li>
<p><code dir="ltr">SECUREFILE</code> - LOB storage is returned as <code dir="ltr">SECUREFILE</code></p>
</li>
<li>
<p><code dir="ltr">BASICFILE</code> - LOB storage is returned as <code dir="ltr">BASICFILE</code></p>
</li>
<li>
<p><code dir="ltr">DEFAULT</code> - The keyword (<code dir="ltr">SECUREFILE</code> or <code dir="ltr">BASICFILE</code>) is omitted in the <code dir="ltr">LOB STORE AS</code> clause.</p>
</li>
<li>
<p><code dir="ltr">NO_CHANGE</code> - LOB segments are created with the same storage they had in the source database. This is the default.</p>
</li>
</ul>
<p>Specifying this transform changes the LOB storage for all tables in the job, including tables that provide storage for materialized views.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t23" headers="r1c1-t23">
<p><code dir="ltr">OID</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t23 r1c2-t23">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t23 r1c3-t23">
<p><code dir="ltr">TYPE</code></p>
<p><code dir="ltr">TABLE</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t23 r1c4-t23">
<p>If zero, inhibits the assignment of the exported OID during type or table creation. Instead, a new OID will be assigned.</p>
<p>Use of this transform on Object Tables will cause breakage in REF columns that point to the table.</p>
<p>Defaults to 1.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t23" headers="r1c1-t23">
<p><code dir="ltr">PCTSPACE</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t23 r1c2-t23">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t23 r1c3-t23">
<p><code dir="ltr">TABLE</code></p>
<p><code dir="ltr">INDEX</code></p>
<p><code dir="ltr">TABLESPACE</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t23 r1c4-t23">
<p>Specifies a percentage multiplier used to alter extent allocations and data file sizes. Used to shrink large tablespaces for testing purposes.</p>
<p>Defaults to 100.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t23" headers="r1c1-t23">
<p><code dir="ltr">SEGMENT_ATTRIBUTES</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t23 r1c2-t23">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t23 r1c3-t23">
<p><code dir="ltr">TABLE, INDEX</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t23 r1c4-t23">
<p>If nonzero (<code dir="ltr">TRUE</code>), emit storage segment parameters.</p>
<p>Defaults to 1.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t23" headers="r1c1-t23">
<p><code dir="ltr">SEGMENT_CREATION</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t23 r1c2-t23">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t23 r1c3-t23">
<p><code dir="ltr">TABLE</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t23 r1c4-t23">
<p>If nonzero (<code dir="ltr">TRUE</code>), the SQL <code dir="ltr">SEGMENT CREATION</code> clause is added to the <code dir="ltr">CREATE TABLE</code> statement. That is, the <code dir="ltr">CREATE TABLE</code> statement will explicitly say either <code dir="ltr">SEGMENT CREATION DEFERRED</code> or <code dir="ltr">SEGMENT CREATION IMMEDIATE</code>.</p>
<p>If the value is <code dir="ltr">FALSE</code>, then the <code dir="ltr">SEGMENT CREATION</code> clause is omitted from the <code dir="ltr">CREATE TABLE</code> statement. Set this parameter to <code dir="ltr">FALSE</code> to use the default segment creation attributes for the table(s) being loaded.</p>
<p>Defaults to nonzero (<code dir="ltr">TRUE</code>).</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t23" headers="r1c1-t23">
<p><code dir="ltr">STORAGE</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t23 r1c2-t23">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t23 r1c3-t23">
<p><code dir="ltr">TABLE</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t23 r1c4-t23">
<p>If <code dir="ltr">nonzero</code> <code dir="ltr">(TRUE)</code>, emit storage clause. (Ignored if <code dir="ltr">SEGMENT_ATTRIBUTES</code> is <code dir="ltr">zero</code>.)</p>
<p>Defaults to nonzero (<code dir="ltr">TRUE)</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t23" headers="r1c1-t23">
<p><code dir="ltr">TABLE_COMPRESSION_CLAUSE</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t23 r1c2-t23">
<p><code dir="ltr">TEXT</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t23 r1c3-t23">
<p><code dir="ltr">TABLE</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t23 r1c4-t23">
<p>Specifies a table compression clause (for example, <code dir="ltr">COMPRESS BASIC</code>) to use when the table is created.</p>
<p>Specify <code dir="ltr">NONE</code> to omit the table compression clause. The table will have the default compression for the tablespace.</p>
<p>Specifying this transform changes the compression type for all tables in the job, including tables that provide storage for materialized views.</p>
<p>See <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about table compression options and syntax.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2957"></a>Exceptions</p>
<ul>
<li>
<p><code dir="ltr">INVALID_HANDLE</code>. The specified handle is not attached to a Data Pump job.</p>
</li>
<li>
<p><code dir="ltr">INVALID_ARGVAL</code>. This message can indicate any of the following:</p>
<ul>
<li>
<p>The mode is transportable, which doesn&#39;t support transforms.</p>
</li>
<li>
<p>The job&#39;s mode does not include the specified <code dir="ltr">object_type</code>.</p>
</li>
<li>
<p>The transform has already been specified for the specified <code dir="ltr">value</code> and <code dir="ltr">object_type</code>.</p>
</li>
</ul>
</li>
<li>
<p><code dir="ltr">INVALID_OPERATION</code>. Transforms are only supported for SQL_FILE and Import operations. The job&#39;s operation was Export which does not support the use of metadata transforms.</p>
</li>
<li>
<p><code dir="ltr">INVALID_STATE</code>. The user called <code dir="ltr">METADATA_TRANSFORM</code> after the job had started (that is, the job was not in the defining state).</p>
</li>
<li>
<p><code dir="ltr">INCONSISTENT_ARGS</code>. There was no <code dir="ltr">value</code> supplied or it was of the wrong datatype for the transform.</p>
</li>
<li>
<p><code dir="ltr">PRIVILEGE_ERROR</code>. A nonprivileged user attempted to do a <code dir="ltr">REMAP_SCHEMA</code> to a different user&#39;s schema or a <code dir="ltr">REMAP_DATAFILE</code>.</p>
</li>
<li>
<p><code dir="ltr">SUCCESS_WITH_INFO</code>. The procedure succeeded, but further information is available through the <code dir="ltr">GET_STATUS</code> procedure.</p>
</li>
<li>
<p><code dir="ltr">NO_SUCH_JOB</code>. The specified job does not exist.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2958"></a>Usage Notes</p>
<ul>
<li>
<p>The <code dir="ltr">METADATA_TRANSFORM</code> procedure is only supported for Import and SQL_FILE operations. It enables you to apply commonly desired, predefined transformations to the definition of objects as part of the transfer. If you need transforms that are not supported within this procedure, you should do a preliminary SQL_FILE operation to produce a SQL script corresponding to the dump file set. By editing the DDL directly and then executing it, you can produce any transformations that you need.</p>
</li>
<li>
<p>Transforms for the DataPump API are a subset of the transforms implemented by the <code dir="ltr">DBMS_METADATA</code>.<code dir="ltr">SET_TRANSFORM_PARAMETER</code> API. Multiple transforms can be defined for a single job. However, each transform defined must be unique according its parameters. That is, two transforms cannot specify conflicting or redundant transformations.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66053" class="refsect2"><a id="i997806"></a>
<h3 class="refsect2">OPEN Function<a id="sthref2959"></a></h3>
<p>This function is used to declare a new job using the Data Pump API. The handle that is returned is used as a parameter for calls to all other procedures (but not to the <code dir="ltr">ATTACH</code> function).</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2960"></a>Syntax</p>
<pre dir="ltr">DBMS_DATAPUMP.OPEN (
   operation    IN VARCHAR2,
   job_mode         IN VARCHAR2,
   remote_link  IN VARCHAR2 DEFAULT NULL,
   job_name     IN VARCHAR2 DEFAULT NULL,
   version      IN VARCHAR2 DEFAULT &#39;COMPATIBLE&#39;)
 RETURN NUMBER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2961"></a>Parameters</p>
<div id="ARPLS66054" class="tblformal">
<p class="titleintable"><a id="sthref2962"></a><a id="sthref2963"></a>Table 47-19 OPEN Function Parameters</p>
<table class="cellalignment4330" title="OPEN Function Parameters" summary="This table describes the parameters of DBMS_DATAPUMP.OPEN." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t24">Parameter</th>
<th class="cellalignment4328" id="r1c2-t24">Meaning</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t24" headers="r1c1-t24">
<p><code dir="ltr">operation</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t24 r1c2-t24">
<p>The type of operation to be performed. <a href="#BABDCFDD">Table 47-20</a> contains descriptions of valid operation types.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t24" headers="r1c1-t24">
<p><code dir="ltr">job_mode</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t24 r1c2-t24">
<p>The scope of the operation to be performed. <a href="#BABBDEHD">Table 47-21</a> contains descriptions of valid modes. Specifying NULL generates an error.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t24" headers="r1c1-t24">
<p><code dir="ltr">remote_link</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t24 r1c2-t24">
<p>If the value of this parameter is non-null, it provides the name of a database link to the remote database that will be the source of data and metadata for the current job.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t24" headers="r1c1-t24">
<p><code dir="ltr">job_name</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t24 r1c2-t24">
<p>The name of the job. The name is limited to 30 characters; it will be truncated if more than 30 characters are used. It may consist of printable characters and spaces. It is implicitly qualified by the schema of the user executing the <code dir="ltr">OPEN</code> function and must be unique to that schema (that is, there cannot be other Data Pump jobs using the same name).</p>
<p>The name is used to identify the job both within the API and with other database components such as identifying the job in the <code dir="ltr">DBA_RESUMABLE</code> view if the job becomes suspended through lack of resources. If no name is supplied, a system generated name will be provided for the job in the following format: <code dir="ltr">&#34;SYS_&lt;OPERATION&gt;_&lt;MODE&gt;_%N&#34;.</code></p>
<p>The default job name is formed where <code dir="ltr">%N</code> expands to a two-digit incrementing integer starting at &#39;<code dir="ltr">01</code>&#39; (for example, &#34;<code dir="ltr">SYS_IMPORT_FULL_03</code>&#34;). The name supplied for the job will also be used to name the master table and other resources associated with the job.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t24" headers="r1c1-t24">
<p><code dir="ltr">version</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t24 r1c2-t24">
<p>The version of database objects to be extracted. This option is only valid for Export, network Import, and SQL_FILE operations. Database objects or attributes that are incompatible with the version will not be extracted. Legal values for this parameter are as follows:</p>
<ul>
<li>
<p><code dir="ltr">COMPATIBLE</code> - (default) the version of the metadata corresponds to the database compatibility level and the compatibility release level for feature (as given in the <code dir="ltr">V$COMPATIBILITY</code> view). Database compatibility must be set to 9.2 or higher.</p>
</li>
<li>
<p><code dir="ltr">LATEST</code> - the version of the metadata corresponds to the database version.</p>
</li>
<li>
<p>A specific database version, for example, &#39;11.0.0&#39;.</p>
<p>Specify a value of 12 to allow all existing database features, components, and options to be exported from Oracle Database 11<span class="italic">g</span> release 2 (11.2.0.3) or later into an Oracle Database 12 <span class="italic">c</span> Release 1 (12.1) (either a multitenant container database (CDB) or a non-CDB).</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p><a href="#BABDCFDD">Table 47-20</a> describes the valid operation types for the <code dir="ltr">OPEN</code> function.</p>
<div id="ARPLS66055" class="tblformal">
<p class="titleintable"><a id="sthref2964"></a><a id="BABDCFDD"></a>Table 47-20 Valid Operation Types for the OPEN Function</p>
<table class="cellalignment4330" title="Valid Operation Types for the OPEN Function" summary="This table describes Valid Operation Types for the OPEN Procedure." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t25">Operation</th>
<th class="cellalignment4328" id="r1c2-t25">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t25" headers="r1c1-t25">
<p><code dir="ltr">EXPORT</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t25 r1c2-t25">
<p>Saves data and metadata to a dump file set or obtains an estimate of the size of the data for an operation.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t25" headers="r1c1-t25">
<p><code dir="ltr">IMPORT</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t25 r1c2-t25">
<p>Restores data and metadata from a dump file set or across a database link.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t25" headers="r1c1-t25">
<p><code dir="ltr">SQL_FILE</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t25 r1c2-t25">
<p>Displays the metadata within a dump file set, or from across a network link, as a SQL script. The location of the SQL script is specified through the <code dir="ltr">ADD_FILE</code> procedure.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p><a href="#BABBDEHD">Table 47-21</a> describes the valid modes for the <code dir="ltr">OPEN</code> function.</p>
<div id="ARPLS66056" class="tblformal">
<p class="titleintable"><a id="sthref2965"></a><a id="BABBDEHD"></a>Table 47-21 Valid Modes for the OPEN Function</p>
<table class="cellalignment4330" title="Valid Modes for the OPEN Function" summary="This table describes Valid Modes for the OPEN Procedure." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t26">Mode</th>
<th class="cellalignment4328" id="r1c2-t26">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t26" headers="r1c1-t26">
<p><code dir="ltr">FULL</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t26 r1c2-t26">
<p>Operates on the full database or full dump file set except for Oracle Database internal schemas. (Some tables from Oracle Database internal schemas may be registered to be exported and imported in full operations in order to provide consistent metadata during import.)</p>
<p>The <code dir="ltr">TRANSPORTABLE</code> parameter can be set to <code dir="ltr">ALWAYS</code> during a full database export in order to move data via transportable tablespaces rather than in the Data Pump dump file.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t26" headers="r1c1-t26">
<p><code dir="ltr">SCHEMA</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t26 r1c2-t26">
<p>Operates on a set of selected schemas. Defaults to the schema of the current user. All objects in the selected schemas are processed. In <code dir="ltr">SCHEMA</code> mode, you cannot specify Oracle-internal schemas (for example, <code dir="ltr">SYS</code>, <code dir="ltr">XDB</code>, <code dir="ltr">ORDSYS</code>, <code dir="ltr">MDSYS</code>, <code dir="ltr">CTXSYS</code>, <code dir="ltr">ORDPLUGINS</code>, or <code dir="ltr">LBACSYS</code>).</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t26" headers="r1c1-t26">
<p><code dir="ltr">TABLE</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t26 r1c2-t26">
<p>Operates on a set of selected tables. Defaults to all of the tables in the current user&#39;s schema. Only tables and their dependent objects are processed.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t26" headers="r1c1-t26">
<p><code dir="ltr">TABLESPACE</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t26 r1c2-t26">
<p>Operates on a set of selected tablespaces. No defaulting is performed. Tables that have storage in the specified tablespaces are processed in the same manner as in Table mode.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t26" headers="r1c1-t26">
<p><code dir="ltr">TRANSPORTABLE</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t26 r1c2-t26">
<p>Operates on metadata for tables (and their dependent objects) within a set of selected tablespaces to perform a transportable tablespace export/import.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2966"></a>Return Values</p>
<ul>
<li>
<p>An opaque handle for the job. This handle is used as input to the following procedures: <code dir="ltr">ADD_FILE</code>, <code dir="ltr">CREATE_JOB_VIEW</code>, <code dir="ltr">DATA_FILTER</code>, <code dir="ltr">DETACH</code>, <code dir="ltr">GET_STATUS</code>, <code dir="ltr">LOG_ENTRY</code>, <code dir="ltr">LOG_ERROR,METADATA_FILTER</code>, <code dir="ltr">METADATA_REMAP</code>, <code dir="ltr">METADATA_TRANSFORM</code>, <code dir="ltr">SET_PARALLEL,SET_PARAMETER</code>, <code dir="ltr">START_JOB,STOP_JOB,</code> and <code dir="ltr">WAIT_FOR_JOB</code></p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2967"></a>Exceptions</p>
<ul>
<li>
<p><code dir="ltr">INVALID_ARGVAL</code>. An invalid <code dir="ltr">operation</code> or <code dir="ltr">mode</code> was specified. A NULL or invalid value was supplied for an input parameter. The error message text identifies the parameter.</p>
</li>
<li>
<p><code dir="ltr">JOB_EXISTS</code>. A table already exists with the specified job name.</p>
</li>
<li>
<p><code dir="ltr">PRIVILEGE_ERROR</code>. The user does not have the necessary privileges or roles to use the specified mode.</p>
</li>
<li>
<p><code dir="ltr">INTERNAL_ERROR</code>. The job was created under the wrong schema or the master table was of the wrong format.</p>
</li>
<li>
<p><code dir="ltr">SUCCESS_WITH_INFO</code>. The function succeeded, but further information is available through the <code dir="ltr">GET_STATUS</code> procedure.</p>
</li>
<li>
<p><code dir="ltr">NO_SUCH_JOB</code>. The specified job does not exist.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2968"></a>Usage Notes</p>
<ul>
<li>
<p>When the job is created, a master table is created for the job under the caller&#39;s schema within the caller&#39;s default tablespace. A handle referencing the job is returned that attaches the current session to the job. Once attached, the handle remains valid until either an explicit or implicit detach occurs. The handle is only valid in the caller&#39;s session. Other handles can be attached to the same job from a different session by using the <code dir="ltr">ATTACH</code> function.</p>
</li>
<li>
<p>If the call to the <code dir="ltr">OPEN</code> function fails, call the <code dir="ltr">GET_STATUS</code> procedure with a null handle to retrieve additional information about the failure.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66057" class="refsect2"><a id="i1011791"></a>
<h3 class="refsect2">SET_PARALLEL Procedure<a id="sthref2969"></a></h3>
<p>This procedure adjusts the degree of parallelism within a job.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2970"></a>Syntax</p>
<pre dir="ltr">DBMS_DATAPUMP.SET_PARALLEL(
   handle      IN NUMBER,
   degree      IN NUMBER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2971"></a>Parameters</p>
<div id="ARPLS66058" class="tblformal">
<p class="titleintable"><a id="sthref2972"></a><a id="sthref2973"></a>Table 47-22 SET_PARALLEL Procedure Parameters</p>
<table class="cellalignment4330" title="SET_PARALLEL Procedure Parameters" summary="This table describes the parameters of DBMS_DATAPUMP.SET_PARALLEL." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t27">Parameter</th>
<th class="cellalignment4328" id="r1c2-t27">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t27" headers="r1c1-t27">
<p><code dir="ltr">handle</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t27 r1c2-t27">
<p>The handle of a job. The current session must have previously attached to the handle through a call to either the <code dir="ltr">OPEN</code> or <code dir="ltr">ATTACH</code> function.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t27" headers="r1c1-t27">
<p><code dir="ltr">degree</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t27 r1c2-t27">
<p>The maximum number of worker processes that can be used for the job. You use this parameter to adjust the amount of resources used for a job.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2974"></a>Exceptions</p>
<ul>
<li>
<p><code dir="ltr">INVALID_HANDLE</code>. The specified handle is not attached to a Data Pump job.</p>
</li>
<li>
<p><code dir="ltr">INVALID_OPERATION</code>. The <code dir="ltr">SET_PARALLEL</code> procedure is only valid for export and import operations.</p>
</li>
<li>
<p><code dir="ltr">INVALID_ARGVAL</code>. An invalid value was supplied for an input parameter.</p>
</li>
<li>
<p><code dir="ltr">SUCCESS_WITH_INFO</code>. The procedure succeeded, but further information is available through the <code dir="ltr">GET_STATUS</code> procedure.</p>
</li>
<li>
<p><code dir="ltr">NO_SUCH_JOB</code>. The specified job does not exist.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2975"></a>Usage Notes</p>
<ul>
<li>
<p>The <code dir="ltr">SET_PARALLEL</code> procedure is only available in the Enterprise Edition of the Oracle database.</p>
</li>
<li>
<p>The <code dir="ltr">SET_PARALLEL</code> procedure can be executed by any session attached to a job. The job must be in one of the following states: Defining, Idling, or Executing.</p>
</li>
<li>
<p>The effect of decreasing the degree of parallelism may be delayed because ongoing work needs to find an orderly completion point before <code dir="ltr">SET_PARALLEL</code> can take effect.</p>
</li>
<li>
<p>Decreasing the parallelism will not result in fewer worker processes associated with the job. It will only decrease the number of worker processes that will be executing at any given time.</p>
</li>
<li>
<p>Increasing the parallelism will take effect immediately if there is work that can be performed in parallel.</p>
</li>
<li>
<p>The degree of parallelism requested by a user may be decreased based upon settings in the resource manager or through limitations introduced by the <code dir="ltr">PROCESSES</code> or <code dir="ltr">SESSIONS</code> initialization parameters in the <code dir="ltr">init</code>.<code dir="ltr">ora</code> file.</p>
</li>
<li>
<p>To parallelize an Export job to a degree of <code dir="ltr"><span class="codeinlineitalic">n</span></code>, the user should supply <code dir="ltr"><span class="codeinlineitalic">n</span></code> files in the dump file set or specify a substitution variable in a file specification. Otherwise, some of the worker processes will be idle while waiting for files.</p>
</li>
<li>
<p>SQL_FILE operations always operate with a degree of 1. Jobs running in the Transportable mode always operate with a degree of 1.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66059" class="refsect2"><a id="i1011813"></a>
<h3 class="refsect2">SET_PARAMETER Procedures<a id="sthref2976"></a></h3>
<p>This procedure is used to specify job-processing options.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2977"></a>Syntax</p>
<pre dir="ltr">DBMS_DATAPUMP.SET_PARAMETER(
   handle       IN NUMBER,
   name         IN VARCHAR2,
   value        IN VARCHAR2);

DBMS_DATAPUMP.SET_PARAMETER (
   handle      IN NUMBER,
   name        IN VARCHAR2,
   value       IN NUMBER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2978"></a>Parameters</p>
<div id="ARPLS66060" class="tblformal">
<p class="titleintable"><a id="sthref2979"></a><a id="sthref2980"></a>Table 47-23 SET_PARAMETER Procedure Parameters</p>
<table class="cellalignment4330" title="SET_PARAMETER Procedure Parameters" summary="This table describes the parameters of DBMS_DATAPUMP.SET_PARAMETER." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t28">Parameter</th>
<th class="cellalignment4328" id="r1c2-t28">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t28" headers="r1c1-t28">
<p><code dir="ltr">handle</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t28 r1c2-t28">
<p>The handle of a job. The current session must have previously attached to the handle through a call to the <code dir="ltr">OPEN</code> function.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t28" headers="r1c1-t28">
<p><code dir="ltr">name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t28 r1c2-t28">
<p>The name of the parameter. <a href="#BABDECJE">Table 47-24</a> describes the valid parameter names.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t28" headers="r1c1-t28">
<p><code dir="ltr">value</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t28 r1c2-t28">
<p>The value for the specified parameter</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p><a href="#BABDECJE">Table 47-24</a> describes the valid options for the <code dir="ltr">name</code> parameter of the <code dir="ltr">SET_PARAMETER</code> procedure.</p>
<div id="ARPLS66061" class="tblformalwide">
<p class="titleintable"><a id="sthref2981"></a><a id="BABDECJE"></a>Table 47-24 Valid Options for the name Parameter in the SET_PARAMETER Procedure</p>
<table class="cellalignment4327" title="Valid Options for the name Parameter in the SET_PARAMETER Procedure" summary="This table describes Valid Options for the name Parameter in the SET_PARAMETER Procedure." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t29">Parameter Name</th>
<th class="cellalignment4328" id="r1c2-t29">Datatype</th>
<th class="cellalignment4328" id="r1c3-t29">Supported Operations</th>
<th class="cellalignment4328" id="r1c4-t29">Meaning</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t29" headers="r1c1-t29">
<p><code dir="ltr">CLIENT_COMMAND</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t29 r1c2-t29">
<p><code dir="ltr">TEXT</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t29 r1c3-t29">
<p>All</p>
</td>
<td class="cellalignment4329" headers="r2c1-t29 r1c4-t29">
<p>An opaque string used to describe the current operation from the client&#39;s perspective. The command-line procedures will use this string to store the original command used to invoke the job.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t29" headers="r1c1-t29">
<p><code dir="ltr">COMPRESSION</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t29 r1c2-t29">
<p><code dir="ltr">TEXT</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t29 r1c3-t29">
<p>Export</p>
</td>
<td class="cellalignment4329" headers="r3c1-t29 r1c4-t29">
<p>Allows you to trade off the size of the dump file set versus the time it takes to perform export and import operations.</p>
<p>The <code dir="ltr">DATA_ONLY</code> option compresses only user data in the dump file set.</p>
<p>The <code dir="ltr">METADATA_ONLY</code> option compresses only metadata in the dump file set.</p>
<p>The <code dir="ltr">ALL</code> option compresses both user data and metadata.</p>
<p>The <code dir="ltr">NONE</code> option stores the dump file set in an uncompressed format.</p>
<p>The <code dir="ltr">METADATA_ONLY</code> and <code dir="ltr">NONE</code> options require a job version of 10.2 or later. All other options require a job version of 11.1 or later.</p>
<p>Default=<code dir="ltr">METADATA_ONLY</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t29" headers="r1c1-t29">
<p><code dir="ltr">COMPRESSION_ALGORITHM</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t29 r1c2-t29">
<p><code dir="ltr">TEXT</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t29 r1c3-t29">
<p>Export</p>
</td>
<td class="cellalignment4329" headers="r4c1-t29 r1c4-t29">
<p>Indicates the compression algorithm is to be used when compressing dump file data. The choices are as follows:</p>
<ul>
<li>
<p><code dir="ltr">BASIC</code>--Offers a good combination of compression ratios and speed; the algorithm used is the same as in previous versions of Oracle Data Pump.</p>
</li>
<li>
<p><code dir="ltr">LOW</code>---Least impact on backup throughput and suited for environments where CPU resources are the limiting factor.</p>
</li>
<li>
<p><code dir="ltr">MEDIUM</code>---Recommended for most environments. This option, like the <code dir="ltr">BASIC</code> option, provides a good combination of compression ratios and speed, but it uses a different algorithm than <code dir="ltr">BASIC</code>.</p>
</li>
<li>
<p><code dir="ltr">HIGH</code>--Best suited for exports over slower networks where the limiting factor is network speed.</p>
</li>
</ul>
<p>To use this feature, the <code dir="ltr">COMPATIBLE</code> initialization parameter must be set to at least 12.0.0.</p>
<p>This feature requires that the Oracle Advanced Compression option be enabled.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t29" headers="r1c1-t29">
<p><code dir="ltr">DATA_ACCESS_METHOD</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t29 r1c2-t29">
<p><code dir="ltr">TEXT</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t29 r1c3-t29">
<p>Export and Import</p>
</td>
<td class="cellalignment4329" headers="r5c1-t29 r1c4-t29">
<p>Allows you to specify an alternative method to unload data if the default method does not work for some reason. The choices are <code dir="ltr">AUTOMATIC</code>, <code dir="ltr">DIRECT_PATH</code>, or <code dir="ltr">EXTERNAL_TABLE</code>. Oracle recommends that you use the default option (<code dir="ltr">AUTOMATIC</code>) whenever possible because it allows Data Pump to automatically select the most efficient method.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t29" headers="r1c1-t29">
<p><code dir="ltr">DATA_OPTIONS</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t29 r1c2-t29">
<p>Number</p>
</td>
<td class="cellalignment4329" headers="r6c1-t29 r1c3-t29">
<p>Export and Import</p>
</td>
<td class="cellalignment4329" headers="r6c1-t29 r1c4-t29">
<p>A bitmask to supply special options for processing the job. The possible values are as follows:</p>
<ul>
<li>
<p><code dir="ltr">KU$_DATAOPT_SKIP_CONST_ERR</code></p>
</li>
<li>
<p><code dir="ltr">KU$_DATAOPT_XMLTYPE_CLOB</code></p>
</li>
<li>
<p><code dir="ltr">KU$_DATAOPT_DISABL_APPEND_HINT</code></p>
</li>
</ul>
<p>Export supports the value <code dir="ltr">KU$_DATAOPT_XMLTYPE_CLOB</code>. This option stores compressed <code dir="ltr">XMLType</code> columns in the dump file in <code dir="ltr">CLOB</code> format rather than as XML documents.</p>
<p><span class="bold">Note</span>: <code dir="ltr">XMLType</code> stored as <code dir="ltr">CLOB</code> is deprecated as of Oracle Database 12c Release 1 (12.1).</p>
<p>Import supports the value <code dir="ltr">KU$_DATAOPT_SKIP_CONST_ERR</code>. This option specifies that if constraint violations occur while data is being imported into user tables, the rows that cause the violations will be rejected and the load will continue. If this option is not set, a constraint error will abort the loading of the entire partition (or table for unpartitioned tables). Setting this option may affect performance, especially for pre-existing tables with unique indexes or constraints.</p>
<p>Import also supports the value <code dir="ltr">KU$_DATAOPT_DISABL_APPEND_HINT</code>. This option prevents the append hint from being applied to the data load. Disabling the <code dir="ltr">APPEND</code> hint can be useful if there is a small set of data objects to load that already exist in the database and some other application may be concurrently accessing one or more of the data objects.</p>
<p>Use of this parameter requires that the <code dir="ltr">version</code> on the <code dir="ltr">OPEN</code> function be set to 11.1 or later.</p>
<p>Default=0</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t29" headers="r1c1-t29">
<p><code dir="ltr">ENCRYPTION</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t29 r1c2-t29">
<p><code dir="ltr">TEXT</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t29 r1c3-t29">
<p>Export</p>
</td>
<td class="cellalignment4329" headers="r7c1-t29 r1c4-t29">
<p>Specifies what to encrypt in the dump file set, as follows:</p>
<p><code dir="ltr">ALL</code> enables encryption for all data and metadata in the export operation.</p>
<p><code dir="ltr">DATA_ONLY</code> specifies that only data is written to the dump file set in encrypted format.</p>
<p><code dir="ltr">ENCRYPTED_COLUMNS_ONLY</code> specifies that only encrypted columns are written to the dump file set in encrypted format.</p>
<p><code dir="ltr">METADATA_ONLY</code> specifies that only metadata is written to the dump file set in encrypted format.</p>
<p><code dir="ltr">NONE</code> specifies that no data is written to the dump file set in encrypted format.</p>
<p>This parameter requires a job version of 11.1 or later.</p>
<p>The default value depends upon the combination of encryption-related parameters that are used. To enable encryption, either <code dir="ltr">ENCRYPTION</code> or <code dir="ltr">ENCRYPTION_PASSWORD</code> or both, must be specified. If only <code dir="ltr">ENCRYPTION_PASSWORD</code> is specified, then <code dir="ltr">ENCRYPTION</code> defaults to <code dir="ltr">ALL</code>. If neither <code dir="ltr">ENCRYPTION</code> nor <code dir="ltr">ENCRYPTION_PASSWORD</code> is specified, then <code dir="ltr">ENCRYPTION</code> defaults to <code dir="ltr">NONE</code>.</p>
<p>To specify <code dir="ltr">ALL</code>, <code dir="ltr">DATA_ONLY</code>, or <code dir="ltr">METADATA_ONLY</code>, the <code dir="ltr">COMPATIBLE</code> initialization parameter must be set to at least 11.1.</p>
<p><span class="bold">NOTE</span>: If the data being exported includes SecureFiles that you want to be encrypted, then you must specify <code dir="ltr">ENCRYPTION=ALL</code> to encrypt the entire dump file set. Encryption of the entire dump file set is the only way to achieve encryption security for SecureFiles during a Data Pump export operation.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t29" headers="r1c1-t29">
<p><code dir="ltr">ENCRYPTION_ALGORITHM</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t29 r1c2-t29">
<p><code dir="ltr">TEXT</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t29 r1c3-t29">
<p>Export</p>
</td>
<td class="cellalignment4329" headers="r8c1-t29 r1c4-t29">
<p>Identifies which cryptographic algorithm should be used to perform encryption. Possible values are <code dir="ltr">AES128</code>, <code dir="ltr">AES192</code>, and <code dir="ltr">AES256</code>.</p>
<p>The <code dir="ltr">ENCRYPTION_ALGORITHM</code> parameter requires that you also specify either <code dir="ltr">ENCRYPTION</code> or <code dir="ltr">ENCRYPTION_PASSWORD</code>; otherwise an error is returned. See <a class="olink ASOAG9578" href="../ASOAG/introduction-to-transparent-data-encryption.htm#ASOAG9578"><span class="italic">Oracle Database Advanced Security Guide</span></a> for information about encryption algorithms.</p>
<p>This parameter requires a job version of 11.1 or later.</p>
<p>Default=<code dir="ltr">AES128</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t29" headers="r1c1-t29">
<p><code dir="ltr">ENCRYPTION_MODE</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t29 r1c2-t29">
<p><code dir="ltr">TEXT</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t29 r1c3-t29">
<p>Export</p>
</td>
<td class="cellalignment4329" headers="r9c1-t29 r1c4-t29">
<p>Identifies the types of security used for encryption and decryption. The values are as follows:</p>
<p><code dir="ltr">PASSWORD</code> requires that you provide a password when creating encrypted dump file sets. You will need to provide the same password when you import the dump file set. <code dir="ltr">PASSWORD</code> mode requires that you also specify the <code dir="ltr">ENCRYPTION_PASSWORD</code> parameter. The <code dir="ltr">PASSWORD</code> mode is best suited for cases in which the dump file set will be imported into a different or remote database, but which must remain secure in transit.</p>
<p><code dir="ltr">TRANSPARENT</code> allows an encrypted dump file set to be created without any intervention from a database administrator (DBA), provided the required Oracle Encryption Wallet is available. Therefore, the <code dir="ltr">ENCRYPTION_PASSWORD</code> parameter is not required, and will in fact, cause an error if it is used in <code dir="ltr">TRANSPARENT</code> mode. This encryption mode is best suited for cases in which the dump file set will be imported into the same database from which it was exported.</p>
<p><code dir="ltr">DUAL</code> creates a dump file set that can later be imported using either the Oracle Encryption Wallet or the password that was specified with the <code dir="ltr">ENCRYPTION_PASSWORD</code> parameter. <code dir="ltr">DUAL</code> mode is best suited for cases in which the dump file set will be imported on-site using the Oracle Encryption Wallet, but which may also need to be imported offsite where the Oracle Encryption Wallet is not available.</p>
<p>When you use the <code dir="ltr">ENCRYPTION_MODE</code> parameter, you must also use either the <code dir="ltr">ENCRYPTION</code> or <code dir="ltr">ENCRYPTION_PASSWORD</code> parameter. Otherwise, an error is returned.</p>
<p>To use <code dir="ltr">DUAL</code> or <code dir="ltr">TRANSPARENT</code> mode, the <code dir="ltr">COMPATIBLE</code> initialization parameter must be set to at least 11.1.</p>
<p>The default mode depends on which other encryption-related parameters are used. If only <code dir="ltr">ENCRYPTION</code> is specified, then the default mode is <code dir="ltr">TRANSPARENT</code>. If <code dir="ltr">ENCRYPTION_PASSWORD</code> is specified and the Oracle Encryption Wallet is open, then the default is <code dir="ltr">DUAL</code>. If <code dir="ltr">ENCRYPTION_PASSWORD</code> is specified and the Oracle Encryption Wallet is closed, then the default is <code dir="ltr">PASSWORD</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t29" headers="r1c1-t29">
<p><code dir="ltr">ENCRYPTION_PASSWORD</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t29 r1c2-t29">
<p><code dir="ltr">TEXT</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t29 r1c3-t29">
<p>Export and Import</p>
</td>
<td class="cellalignment4329" headers="r10c1-t29 r1c4-t29">
<p>For export operations, this parameter is required if <code dir="ltr">ENCRYPTION_MODE</code> is set to either <code dir="ltr">PASSWORD</code> or <code dir="ltr">DUAL</code>. It is also required for transportable export/import operations (job mode=<code dir="ltr">FULL</code> and <code dir="ltr">TRANSPORTABLE=ALWAYS</code>) when the database includes either encrypted tablespaces or tables with encrypted columns.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t29" headers="r1c1-t29">
<p><code dir="ltr">ESTIMATE</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t29 r1c2-t29">
<p><code dir="ltr">TEXT</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t29 r1c3-t29">
<p>Export and Import</p>
</td>
<td class="cellalignment4329" headers="r11c1-t29 r1c4-t29">
<p>Specifies that the estimate method for the size of the tables should be performed before starting the job.</p>
<p>If <code dir="ltr">BLOCKS</code>, a size estimate for the user tables is calculated using the count of blocks allocated to the user tables.</p>
<p>If <code dir="ltr">STATISTICS</code>, a size estimate for the user tables is calculated using the statistics associated with each table. If no statistics are available for a table, the size of the table is estimated using <code dir="ltr">BLOCKS</code>.</p>
<p>The <code dir="ltr">ESTIMATE</code> parameter cannot be used in Transportable Tablespace mode.</p>
<p>Default=<code dir="ltr">BLOCKS</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t29" headers="r1c1-t29">
<p><code dir="ltr">ESTIMATE_ONLY</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t29 r1c2-t29">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t29 r1c3-t29">
<p>Export</p>
</td>
<td class="cellalignment4329" headers="r12c1-t29 r1c4-t29">
<p>Specifies that only the estimation portion of an export job should be performed. This option is useful for estimating the size of dump files when the size of the export is unknown.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t29" headers="r1c1-t29">
<p><code dir="ltr">FLASHBACK_SCN</code></p>
</td>
<td class="cellalignment4329" headers="r13c1-t29 r1c2-t29">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment4329" headers="r13c1-t29 r1c3-t29">
<p>Export and network Import</p>
</td>
<td class="cellalignment4329" headers="r13c1-t29 r1c4-t29">
<p>System change number (SCN) to serve as transactionally consistent point for reading user data. If neither <code dir="ltr">FLASHBACK_SCN</code> nor <code dir="ltr">FLASHBACK_TIME</code> is specified, there will be no transactional consistency between partitions, except for logical standby databases and Streams targets. <code dir="ltr">FLASHBACK_SCN</code> is not supported in Transportable mode.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t29" headers="r1c1-t29">
<p><code dir="ltr">FLASHBACK_TIME</code></p>
</td>
<td class="cellalignment4329" headers="r14c1-t29 r1c2-t29">
<p><code dir="ltr">TEXT</code></p>
</td>
<td class="cellalignment4329" headers="r14c1-t29 r1c3-t29">
<p>Export and network Import</p>
</td>
<td class="cellalignment4329" headers="r14c1-t29 r1c4-t29">
<p>Either the date and time used to determine a consistent point for reading user data or a string of the form <code dir="ltr">TO_TIMESTAMP(...)</code>.</p>
<p>If neither <code dir="ltr">FLASHBACK_SCN</code> nor <code dir="ltr">FLASHBACK_TIME</code> is specified, there will be no transactional consistency between partitions.</p>
<p><code dir="ltr">FLASHBACK_SCN</code> and <code dir="ltr">FLASHBACK_TIME</code> cannot both be specified for the same job. <code dir="ltr">FLASHBACK_TIME</code> is not supported in Transportable mode.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r15c1-t29" headers="r1c1-t29">
<p><code dir="ltr">INCLUDE_METADATA</code></p>
</td>
<td class="cellalignment4329" headers="r15c1-t29 r1c2-t29">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment4329" headers="r15c1-t29 r1c3-t29">
<p>Export and Import</p>
</td>
<td class="cellalignment4329" headers="r15c1-t29 r1c4-t29">
<p>If nonzero, metadata for objects will be moved in addition to user table data.</p>
<p>If zero, metadata for objects will not moved. This parameter converts an Export operation into an unload of user data and an Import operation into a load of user data.</p>
<p><code dir="ltr">INCLUDE_METADATA</code> is not supported in Transportable mode.</p>
<p>Default=1</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r16c1-t29" headers="r1c1-t29">
<p><code dir="ltr">KEEP_MASTER</code></p>
</td>
<td class="cellalignment4329" headers="r16c1-t29 r1c2-t29">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment4329" headers="r16c1-t29 r1c3-t29">
<p>Export and Import</p>
</td>
<td class="cellalignment4329" headers="r16c1-t29 r1c4-t29">
<p>Specifies whether the master table should be deleted or retained at the end of a Data Pump job that completes successfully. The master table is automatically retained for jobs that do not complete successfully.</p>
<p>Default=0.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r17c1-t29" headers="r1c1-t29">
<p><code dir="ltr">LOGTIME</code></p>
</td>
<td class="cellalignment4329" headers="r17c1-t29 r1c2-t29">
<p><code dir="ltr">TEXT</code></p>
</td>
<td class="cellalignment4329" headers="r17c1-t29 r1c3-t29">
<p>Export and Import</p>
</td>
<td class="cellalignment4329" headers="r17c1-t29 r1c4-t29">
<p>Specifies that messages displayed during export and import operations be timestamped. Valid options are as follows:</p>
<ul>
<li>
<p><code dir="ltr">NONE</code>--No timestamps on status or log file messages (this is the default)</p>
</li>
<li>
<p><code dir="ltr">STATUS</code>--Timestamps on status messages only</p>
</li>
<li>
<p><code dir="ltr">LOGFILE</code>--Timestamps on log file messages only</p>
</li>
<li>
<p><code dir="ltr">ALL</code>--Timestamps on both status and log file messages</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r18c1-t29" headers="r1c1-t29">
<p><code dir="ltr">MASTER_ONLY</code></p>
</td>
<td class="cellalignment4329" headers="r18c1-t29 r1c2-t29">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment4329" headers="r18c1-t29 r1c3-t29">
<p>Import</p>
</td>
<td class="cellalignment4329" headers="r18c1-t29 r1c4-t29">
<p>Indicates whether to import just the master table and then stop the job so that the contents of the master table can be examined.</p>
<p>Default=0.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r19c1-t29" headers="r1c1-t29">
<p><code dir="ltr">METRICS</code></p>
</td>
<td class="cellalignment4329" headers="r19c1-t29 r1c2-t29">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment4329" headers="r19c1-t29 r1c3-t29">
<p>Export and Import</p>
</td>
<td class="cellalignment4329" headers="r19c1-t29 r1c4-t29">
<p>Indicates whether additional information about the job should be reported to the Data Pump log file.</p>
<p>Default=0.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r20c1-t29" headers="r1c1-t29">
<p><code dir="ltr">PARTITION_OPTIONS</code></p>
</td>
<td class="cellalignment4329" headers="r20c1-t29 r1c2-t29">
<p><code dir="ltr">TEXT</code></p>
</td>
<td class="cellalignment4329" headers="r20c1-t29 r1c3-t29">
<p>Import</p>
</td>
<td class="cellalignment4329" headers="r20c1-t29 r1c4-t29">
<p>Specifies how partitioned tables should be handled during an import operation. The options are as follows:</p>
<p><code dir="ltr">NONE</code> means that partitioning is reproduced on the target database as it existed in the source database.</p>
<p><code dir="ltr">DEPARTITION</code> means that each partition or subpartition that contains storage in the job is reproduced as a separate unpartitioned table. Intermediate partitions that are subpartitioned are not re-created (although their subpartitions are converted into tables). The names of the resulting tables are system-generated from the original table names and partition names unless the name is overridden by the <code dir="ltr">REMAP_TABLE</code> metadata transform.</p>
<p><code dir="ltr">MERGE</code> means that each partitioned table is re-created in the target database as an unpartitioned table. The data from all of the source partitions is merged into a single storage segment. This option is not supported for transportable jobs or when the <code dir="ltr">TRANSPORTABLE</code> parameter is set to <code dir="ltr">ALWAYS</code>.</p>
<p>This parameter requires a job version of 11.1 or later.</p>
<p>Default=<code dir="ltr">NONE</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r21c1-t29" headers="r1c1-t29">
<p><code dir="ltr">REUSE_DATAFILES</code></p>
</td>
<td class="cellalignment4329" headers="r21c1-t29 r1c2-t29">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment4329" headers="r21c1-t29 r1c3-t29">
<p>Import</p>
</td>
<td class="cellalignment4329" headers="r21c1-t29 r1c4-t29">
<p>Specifies whether the import job should reuse existing data files for tablespace creation.</p>
<p>Default=0.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r22c1-t29" headers="r1c1-t29">
<p><code dir="ltr">SKIP_UNUSABLE_INDEXES</code></p>
</td>
<td class="cellalignment4329" headers="r22c1-t29 r1c2-t29">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment4329" headers="r22c1-t29 r1c3-t29">
<p>Import</p>
</td>
<td class="cellalignment4329" headers="r22c1-t29 r1c4-t29">
<p>If nonzero, rows will be inserted into tables having unusable indexes. <code dir="ltr">SKIP_UNUSABLE_INDEXES</code> is not supported in Transportable mode.</p>
<p>Default=1</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r23c1-t29" headers="r1c1-t29">
<p><code dir="ltr">SOURCE_EDITION</code></p>
</td>
<td class="cellalignment4329" headers="r23c1-t29 r1c2-t29">
<p><code dir="ltr">TEXT</code></p>
</td>
<td class="cellalignment4329" headers="r23c1-t29 r1c3-t29">
<p>Export and network Import</p>
</td>
<td class="cellalignment4329" headers="r23c1-t29 r1c4-t29">
<p>The application edition that will be used for determining the objects that will be unloaded for export and for network import.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r24c1-t29" headers="r1c1-t29">
<p><code dir="ltr">STREAMS_CONFIGURATION</code></p>
</td>
<td class="cellalignment4329" headers="r24c1-t29 r1c2-t29">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment4329" headers="r24c1-t29 r1c3-t29">
<p>Import</p>
</td>
<td class="cellalignment4329" headers="r24c1-t29 r1c4-t29">
<p>Specifies whether to import any Streams metadata that may be present in the export dump file.</p>
<p>Default=1.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r25c1-t29" headers="r1c1-t29">
<p><code dir="ltr">TABLE_EXISTS_ACTION</code></p>
</td>
<td class="cellalignment4329" headers="r25c1-t29 r1c2-t29">
<p><code dir="ltr">TEXT</code></p>
</td>
<td class="cellalignment4329" headers="r25c1-t29 r1c3-t29">
<p>Import</p>
</td>
<td class="cellalignment4329" headers="r25c1-t29 r1c4-t29">
<p>Specifies the action to be performed when data is loaded into a preexisting table. The possible actions are: <code dir="ltr">TRUNCATE</code>, <code dir="ltr">REPLACE</code>, <code dir="ltr">APPEND</code>, and <code dir="ltr">SKIP</code>.</p>
<p>If <code dir="ltr">INCLUDE_METADATA=0</code>, only <code dir="ltr">TRUNCATE</code> and <code dir="ltr">APPEND</code> are supported.</p>
<p>If <code dir="ltr">TRUNCATE</code>, rows are removed from a preexisting table before inserting rows from the Import.</p>
<p>Note that if <code dir="ltr">TRUNCATE</code> is specified on tables referenced by foreign key constraints, the <code dir="ltr">TRUNCATE</code> will be modified into a <code dir="ltr">REPLACE</code>.</p>
<p>If <code dir="ltr">REPLACE</code>, preexisting tables are replaced with new definitions. Before creating the new table, the old table is dropped.</p>
<p>If <code dir="ltr">APPEND</code>, new rows are added to the existing rows in the table.</p>
<p>If <code dir="ltr">SKIP</code>, the preexisting table is left unchanged.</p>
<p><code dir="ltr">TABLE_EXISTS_ACTION</code> is not supported in Transportable mode.</p>
<p>The default is <code dir="ltr">SKIP</code> if metadata is included in the import. The default is <code dir="ltr">APPEND</code> if <code dir="ltr">INCLUDE_METADATA</code> is set to 0.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r26c1-t29" headers="r1c1-t29">
<p><code dir="ltr">TABLESPACE_DATAFILE</code></p>
</td>
<td class="cellalignment4329" headers="r26c1-t29 r1c2-t29">
<p><code dir="ltr">TEXT</code></p>
</td>
<td class="cellalignment4329" headers="r26c1-t29 r1c3-t29">
<p>Import</p>
</td>
<td class="cellalignment4329" headers="r26c1-t29 r1c4-t29">
<p>Specifies the full file specification for a data file in the transportable tablespace set. <code dir="ltr">TABLESPACE_DATAFILE</code> is only valid for transportable mode imports.</p>
<p><code dir="ltr">TABLESPACE_DATAFILE</code> can be specified multiple times, but the value specified for each occurrence must be different.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r27c1-t29" headers="r1c1-t29">
<p><code dir="ltr">TARGET_EDITION</code></p>
</td>
<td class="cellalignment4329" headers="r27c1-t29 r1c2-t29">
<p><code dir="ltr">TEXT</code></p>
</td>
<td class="cellalignment4329" headers="r27c1-t29 r1c3-t29">
<p>Import</p>
</td>
<td class="cellalignment4329" headers="r27c1-t29 r1c4-t29">
<p>The application edition that will be used for determining where the objects will be loaded for import and for network import.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r28c1-t29" headers="r1c1-t29">
<p><code dir="ltr">TRANSPORTABLE</code></p>
</td>
<td class="cellalignment4329" headers="r28c1-t29 r1c2-t29">
<p><code dir="ltr">TEXT</code></p>
</td>
<td class="cellalignment4329" headers="r28c1-t29 r1c3-t29">
<p>Export (and network import or full-mode import)</p>
</td>
<td class="cellalignment4329" headers="r28c1-t29 r1c4-t29">
<p>This option is for export operations done in table mode, and also for full-mode imports and network imports. It allows the data to be moved using transportable tablespaces.</p>
<p>In table-mode storage segments in the moved tablespaces that are not associated with the parent schemas (tables) will be reclaimed at import time. If individual partitions are selected in a table-mode job, only the tablespaces referenced by those partitions will be moved. During import, the moved partitions can only be reconstituted as tables by using the <code dir="ltr">PARTITION_OPTIONS=DEPARTITION</code> parameter.</p>
<p>Use of the <code dir="ltr">TRANSPORTABLE</code> parameter prohibits the subsequent import of the dump file into a database at a lower version or using different character sets. Additionally, the data files may need to be converted if the target database is on a different platform.</p>
<p>In table-mode, the <code dir="ltr">TRANSPORTABLE</code> parameter is not allowed if a network link is supplied on the <code dir="ltr">OPEN</code> call.</p>
<p>The possible values for this parameter are as follows:</p>
<p><code dir="ltr">ALWAYS</code> - data is always moved by moving data files. This option is valid only for table mode and full mode.</p>
<p><code dir="ltr">NEVER</code> - data files are never used for copying user data</p>
<p>This parameter requires a job version of 11.1 or later</p>
<p>This parameter requires a job version of 12.1 or later when the job mode is FULL.</p>
<p>Default=<code dir="ltr">NEVER</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r29c1-t29" headers="r1c1-t29">
<p><code dir="ltr">TTS_FULL_CHECK</code></p>
</td>
<td class="cellalignment4329" headers="r29c1-t29 r1c2-t29">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment4329" headers="r29c1-t29 r1c3-t29">
<p>Export</p>
</td>
<td class="cellalignment4329" headers="r29c1-t29 r1c4-t29">
<p>If nonzero, verifies that a transportable tablespace set has no dependencies (specifically, IN pointers) on objects outside the set, and vice versa. Only valid for Transportable mode Exports.</p>
<p>Default=0</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r30c1-t29" headers="r1c1-t29">
<p><code dir="ltr">USER_METADATA</code></p>
</td>
<td class="cellalignment4329" headers="r30c1-t29 r1c2-t29">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment4329" headers="r30c1-t29 r1c3-t29">
<p>Export and network Import</p>
</td>
<td class="cellalignment4329" headers="r30c1-t29 r1c4-t29">
<p>For schema-mode operations, specifies that the metadata to re-create the users&#39; schemas (for example, privilege grants to the exported schemas) should also be part of the operation if set to nonzero. Users must be privileged to explicitly set this parameter.</p>
<p>The <code dir="ltr">USER_METADATA</code> parameter cannot be used in Table, Tablespace, or Transportable Tablespace mode.</p>
<p>Default=1 if user has <code dir="ltr">DATAPUMP_EXP_FULL_DATABASE</code> role; 0 otherwise.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformalwide" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2982"></a>Exceptions</p>
<ul>
<li>
<p><code dir="ltr">INVALID_HANDLE</code>. The specified handle is not attached to a Data Pump job.</p>
</li>
<li>
<p><code dir="ltr">INVALID_ARGVAL</code>. This exception could be due to any of the following causes:</p>
<ul>
<li>
<p>An invalid name was supplied for an input parameter</p>
</li>
<li>
<p>The wrong datatype was used for <code dir="ltr">value</code></p>
</li>
<li>
<p>A <code dir="ltr">value</code> was not supplied</p>
</li>
<li>
<p>The supplied <code dir="ltr">value</code> was not allowed for the specified parameter name</p>
</li>
<li>
<p>A flashback parameter had been established after a different flashback parameter had already been established</p>
</li>
<li>
<p>A parameter was specified that did not support duplicate definitions</p>
</li>
</ul>
</li>
<li>
<p><code dir="ltr">INVALID_OPERATION</code>. The operation specified is invalid in this context.</p>
</li>
<li>
<p><code dir="ltr">INVALID_STATE</code>. The specified job is not in the Defining state.</p>
</li>
<li>
<p><code dir="ltr">INCONSISTENT_ARGS</code>. Either the specified parameter is not supported for the current operation type or it is not supported for the current mode.</p>
</li>
<li>
<p><code dir="ltr">PRIVILEGE_ERROR</code>. The user does not have the <code dir="ltr">DATAPUMP_EXP_FULL_DATABASE</code> or <code dir="ltr">DATAPUMP_IMP_FULL_DATABASE</code> role required for the specified parameter.</p>
</li>
<li>
<p><code dir="ltr">SUCCESS_WITH_INFO</code>. The procedure succeeded, but further information is available through the <code dir="ltr">GET_STATUS</code> procedure.</p>
</li>
<li>
<p><code dir="ltr">NO_SUCH_JOB</code>. The specified job does not exist.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2983"></a>Usage Notes</p>
<ul>
<li>
<p>The <code dir="ltr">SET_PARAMETER</code> procedure is used to specify optional features for the current job. See <a href="#BABDECJE">Table 47-24</a> for a list of supported options.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66062" class="refsect2"><a id="i998298"></a>
<h3 class="refsect2">START_JOB Procedure<a id="sthref2984"></a></h3>
<p>This procedure begins or resumes execution of a job.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2985"></a>Syntax</p>
<pre dir="ltr">DBMS_DATAPUMP.START_JOB (
   handle       IN NUMBER,
   skip_current    IN  NUMBER DEFAULT 0,
   abort_step      IN  NUMBER DEFAULT 0,
   cluster_ok      IN  NUMBER DEFAULT 1,
   service_name    IN  VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2986"></a>Parameters</p>
<div id="ARPLS66063" class="tblformal">
<p class="titleintable"><a id="sthref2987"></a><a id="sthref2988"></a>Table 47-25 START_JOB Procedure Parameters</p>
<table class="cellalignment4330" title="START_JOB Procedure Parameters" summary="This table describes the parameters of DBMS_DATAPUMP.START_JOB." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t30">Parameter</th>
<th class="cellalignment4328" id="r1c2-t30">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t30" headers="r1c1-t30">
<p><code dir="ltr">handle</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t30 r1c2-t30">
<p>The handle of a job. The current session must have previously attached to the handle through a call to either the <code dir="ltr">OPEN</code> or <code dir="ltr">ATTACH</code> function.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t30" headers="r1c1-t30">
<p><code dir="ltr">skip_current</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t30 r1c2-t30">
<p>If nonzero, causes actions that were &#39;in progress&#39; on a previous execution of the job to be skipped when the job restarts. The skip will only be honored for Import jobs. This mechanism allows the user to skip actions that trigger fatal bugs and cause the premature termination of a job. Multiple actions can be skipped on a restart. The log file will identify which actions are skipped. If a domain index was being processed, all pieces of the domain index are skipped even if the error occurred in only a subcomponent of the domain index.</p>
<p>A description of the actions skipped is entered into the log file. <code dir="ltr">skip_current</code> is ignored for the initial <code dir="ltr">START_JOB</code> in a job.</p>
<p>If zero, no data or metadata is lost upon a restart.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t30" headers="r1c1-t30">
<p><code dir="ltr">abort_step</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t30 r1c2-t30">
<p>Value must be 0. Inserting values other than 0 into this argument will have unintended consequences.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t30" headers="r1c1-t30">
<p><code dir="ltr">cluster_ok</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t30 r1c2-t30">
<p>If = 0, all workers are started on the current instance. Otherwise, workers are started on instances usable by the job.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t30" headers="r1c1-t30">
<p><code dir="ltr">service_name</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t30 r1c2-t30">
<p>If specified, indicates a service name used to constrain the job to specific instances or to a specific resource group.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2989"></a>Exceptions</p>
<ul>
<li>
<p><code dir="ltr">INVALID_HANDLE</code>. The specified handle is not attached to a Data Pump job.</p>
</li>
<li>
<p><code dir="ltr">INVALID_STATE</code>. The causes of this exception can be any of the following:</p>
<ul>
<li>
<p>No files have been defined for an Export, non-network Import, or SQL_FILE job</p>
</li>
<li>
<p>An <code dir="ltr">ADD_FILE</code> procedure has not been called to define the output for a <code dir="ltr">SQL_FILE</code> job</p>
</li>
<li>
<p>A <code dir="ltr">TABLESPACE_DATAFILE</code> parameter has not been defined for a Transportable Import job</p>
</li>
<li>
<p>A <code dir="ltr">TABLESPACE_EXPR</code> metadata filter has not been defined for a Transportable or Tablespace mode Export or Network job</p>
</li>
<li>
<p>The dump file set on an Import or SQL_FILE job was either incomplete or missing a master table specification</p>
</li>
</ul>
</li>
<li>
<p><code dir="ltr">INVALID_OPERATION</code>. Unable to restore master table from a dump file set.</p>
</li>
<li>
<p><code dir="ltr">INTERNAL_ERROR</code>. An inconsistency was detected when the job was started. Additional information may be available through the <code dir="ltr">GET_STATUS</code> procedure.</p>
</li>
<li>
<p><code dir="ltr">SUCCESS_WITH_INFO</code>. The procedure succeeded, but further information is available through the <code dir="ltr">GET_STATUS</code> procedure.</p>
</li>
<li>
<p><code dir="ltr">NO_SUCH_JOB</code>. The specified job does not exist.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2990"></a>Usage Notes</p>
<ul>
<li>
<p>When this procedure is called to request that the corresponding job be started or restarted, the state of the job is changed from either the Defining or Idling state to the Executing state.</p>
</li>
<li>
<p>If the <code dir="ltr">SET_PARALLEL</code> procedure was not called prior to the <code dir="ltr">START_JOB</code> procedure, the initial level of parallelism used in the job will be 1. If <code dir="ltr">SET_PARALLEL</code> was called prior to the job starting, the <code dir="ltr">degree</code> specified by the last <code dir="ltr">SET_PARALLEL</code> call determines the parallelism for the job. On restarts, the parallelism is determined by the previous parallel setting for the job, unless it is overridden by another <code dir="ltr">SET_PARALLEL</code> call.</p>
</li>
<li>
<p>To restart a stopped job, an <code dir="ltr">ATTACH</code> function must be performed prior to executing the <code dir="ltr">START_JOB</code> procedure.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66064" class="refsect2"><a id="i998351"></a>
<h3 class="refsect2">STOP_JOB Procedure<a id="sthref2991"></a></h3>
<p>This procedure terminates a job, but optionally, preserves the state of the job.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2992"></a>Syntax</p>
<pre dir="ltr">DBMS_DATAPUMP.STOP_JOB (
   handle      IN NUMBER,
   immediate   IN NUMBER DEFAULT 0,
   keep_master IN NUMBER DEFAULT NULL,
   delay       IN NUMBER DEFAULT 60);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2993"></a>Parameters</p>
<div id="ARPLS66065" class="tblformal">
<p class="titleintable"><a id="sthref2994"></a><a id="sthref2995"></a>Table 47-26 STOP_JOB Procedure Parameters</p>
<table class="cellalignment4330" title="STOP_JOB Procedure Parameters" summary="This table describes the parameters of DBMS_DATAPUMP.STOP_JOB." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t31">Parameter</th>
<th class="cellalignment4328" id="r1c2-t31">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t31" headers="r1c1-t31">
<p><code dir="ltr">handle</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t31 r1c2-t31">
<p>The handle of a job. The current session must have previously attached to the handle through a call to either the <code dir="ltr">OPEN</code> or <code dir="ltr">ATTACH</code> function. At the end of the procedure, the user is detached from the handle.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t31" headers="r1c1-t31">
<p><code dir="ltr">immediate</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t31 r1c2-t31">
<p>If nonzero, the worker processes are aborted immediately. This halts the job quickly, but parts of the job will have to be rerun if the job is ever restarted.</p>
<p>If zero, the worker processes are allowed to complete their current work item (either metadata or table data) before they are terminated. The job is placed in a Stop Pending state while the workers finish their current work.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t31" headers="r1c1-t31">
<p><code dir="ltr">keep_master</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t31 r1c2-t31">
<p>If nonzero, the master table is retained when the job is stopped. If zero, the master table is dropped when the job is stopped. If the master table is dropped, the job will not be restartable. If the master table is dropped during an export job, the created dump files are deleted.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t31" headers="r1c1-t31">
<p><code dir="ltr">delay</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t31 r1c2-t31">
<p>The number of seconds to wait until other attached sessions are forcibly detached. The delay allows other sessions attached to the job to be notified that a stop has been performed. The job keeps running until either all clients have detached or the delay has been satisfied. If no delay is specified, then the default delay is 60 seconds. If a shorter delay is used, clients might not be able to retrieve the final messages for the job through the <code dir="ltr">GET_STATUS</code> procedure.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2996"></a>Exceptions</p>
<ul>
<li>
<p><code dir="ltr">INVALID_HANDLE</code>. The specified handle is not attached to a Data Pump job.</p>
</li>
<li>
<p><code dir="ltr">INVALID</code> <code dir="ltr">STATE</code>. The job is already in the process of being stopped or completed.</p>
</li>
<li>
<p><code dir="ltr">SUCCESS_WITH_INFO</code>. The procedure succeeded, but further information is available through the <code dir="ltr">GET_STATUS</code> procedure.</p>
</li>
<li>
<p><code dir="ltr">NO_SUCH_JOB</code>. The specified job does not exist.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2997"></a>Usage Notes</p>
<ul>
<li>
<p>This procedure is used to request that the corresponding job stop executing.</p>
</li>
<li>
<p>The termination of a job that is in an Executing state may take several minutes to complete in an orderly fashion.</p>
</li>
<li>
<p>For jobs in the Defining, Idling, or Completing states, this procedure is functionally equivalent to the <code dir="ltr">DETACH</code> procedure.</p>
</li>
<li>
<p>Once a job is stopped, it can be restarted using the <code dir="ltr">ATTACH</code> function and <code dir="ltr">START_JOB</code> procedures, provided the master table and the dump file set are left intact.</p>
</li>
<li>
<p>If the <code dir="ltr">KEEP_MASTER</code> parameter is not specified, and the job is in the Defining state or has a mode of Transportable, the master table is dropped. Otherwise, the master table is retained.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66066" class="refsect2"><a id="BABJHGAC"></a>
<h3 class="refsect2">WAIT_FOR_JOB<a id="sthref2998"></a> Procedure</h3>
<p>This procedure runs a job until it either completes normally or stops for some other reason.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2999"></a>Syntax</p>
<pre dir="ltr">DBMS_DATAPUMP.WAIT_FOR_JOB (
  handle      IN   NUMBER,
  job_state   OUT  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3000"></a>Parameters</p>
<div id="ARPLS66067" class="tblformal">
<p class="titleintable"><a id="sthref3001"></a><a id="sthref3002"></a>Table 47-27 WAIT_FOR_JOB Procedure Parameters</p>
<table class="cellalignment4330" title="WAIT_FOR_JOB Procedure Parameters" summary="This table describes the parameters for the WAIT_FOR_JOB procedure." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t32">Parameter</th>
<th class="cellalignment4328" id="r1c2-t32">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t32" headers="r1c1-t32">
<p><code dir="ltr">handle</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t32 r1c2-t32">
<p>The handle of the job. The current session must have previously attached to the handle through a call to either the <code dir="ltr">OPEN</code> or <code dir="ltr">ATTACH</code> function. At the end of the procedure, the user is detached from the handle.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t32" headers="r1c1-t32">
<p><code dir="ltr">job_state</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t32 r1c2-t32">
<p>The state of the job when it has stopped executing; either <code dir="ltr">STOPPED</code> or <code dir="ltr">COMPLETED</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3003"></a>Exceptions</p>
<ul>
<li>
<p><code dir="ltr">SUCCESS_WITH_INFO</code>. The procedure succeeded, but further information is available through the <code dir="ltr">GET_STATUS</code> API.</p>
</li>
<li>
<p><code dir="ltr">INVALID_HANDLE</code>. The job handle is no longer valid.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3004"></a>Usage Notes</p>
<p>This procedure provides the simplest mechanism for waiting for the completion of a Data Pump job. The job should be started before calling <code dir="ltr">WAIT_FOR_JOB</code>. When <code dir="ltr">WAIT_FOR_JOB</code> returns, the job will no longer be executing. If the job completed normally, the final status will be <code dir="ltr">COMPLETED</code>. If the job stopped executing because of a <code dir="ltr">STOP_JOB</code> request or an internal error, the final status will be <code dir="ltr">STOPPED</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4320">
<tr>
<td class="cellalignment4329">
<table class="cellalignment4325">
<tr>
<td class="cellalignment4324"><a href="d_dmtran.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4324"><a href="d_dbfs_content.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4332">
<table class="cellalignment4323">
<tr>
<td class="cellalignment4324"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4324"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4324"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4324"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4324"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4324"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>