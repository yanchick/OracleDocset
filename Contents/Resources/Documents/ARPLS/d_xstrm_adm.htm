<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-2405"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/DBMS_XSTREAM_ADM"></a><title>DBMS_XSTREAM_ADM</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1086"/>
<meta name="dcterms.created" content="2016-09-02T5:37:3Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database PL/SQL Packages and Types Reference"/>
<meta name="dcterms.identifier" content="E41829-07"/>
<meta name="dcterms.isVersionOf" content="ARPLS"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="d_xslpro.htm" title="Previous" type="text/html"/>
<link rel="Next" href="d_xstrm_auth.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41829-07.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">208/290</span> <!-- End Header -->
<div id="ARPLS73643" class="chapter"><a id="CACJEJGH"></a>
<h1 class="chapter"><span class="secnum">204</span> DBMS_XSTREAM_ADM</h1>
<p><a id="sthref16115"></a><a id="sthref16116"></a>This <code dir="ltr">DBMS_XSTREAM_ADM</code> package provides interfaces for streaming database changes between an Oracle database and other systems. XStream enables applications to stream out or stream in database changes.</p>
<p>This chapter contains the following topic:</p>
<ul>
<li>
<p><a href="#CACCGEBH">Using DBMS_XSTREAM_ADM</a></p>
<ul>
<li>
<p>Overview</p>
</li>
<li>
<p>Security Model</p>
</li>
<li>
<p>Operational Notes</p>
</li>
</ul>
</li>
<li>
<p><a href="#CACJHGFB">Summary of DBMS_XSTREAM_ADM Subprograms</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink XSTRM" href="../XSTRM/toc.htm"><span class="italic">Oracle Database XStream Guide</span></a></p>
</li>
<li>
<p><a class="olink LNOCI" href="../LNOCI/toc.htm"><span class="italic">Oracle Call Interface Programmer&#39;s Guide</span></a></p>
</li>
<li>
<p><a class="olink STXJV" href="../STXJV/toc.htm"><span class="italic">Oracle Database XStream Java API Reference</span></a></p>
</li>
</ul>
</div>
<div class="refentry"><a id="CACCGEBH"></a>
<div id="ARPLS70183" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">Using DBMS_XSTREAM_ADM</h2>
<p>This section contains topics which relate to using the <code dir="ltr">DBMS_XSTREAM_ADM</code> package.</p>
<ul>
<li>
<p><a href="#CACCECHG">Overview</a></p>
</li>
<li>
<p><a href="#CACCADJE">Security Model</a></p>
</li>
<li>
<p><a href="#CACCHJJC">Operational Notes</a></p>
</li>
</ul>
<div id="ARPLS70184" class="refsect2"><a id="CACCECHG"></a>
<h3 class="refsect2">Overview</h3>
<p>The package provides interfaces for configuring outbound servers that stream database changes from an Oracle database to other systems. The package also provides interfaces for configuring inbound servers that stream database changes from other systems to an Oracle database. In both cases, the database changes are encapsulated in logical change records (LCRs). Also, the other systems can be Oracle systems or a non-Oracle systems, such as non-Oracle databases or file systems.</p>
<p>XStream outbound servers can stream out LCRs from an Oracle database programmatically using C or Java. After receiving the LCRs, the other system can process them in any customized way. For example, the other system can save the contents of the LCRs to a file, send the LCRs to an Oracle database through an XStream inbound server, or generate SQL statements and execute them on any Oracle or non-Oracle databases.</p>
<p>XStream inbound servers accept LCRs from another system and either apply them to an Oracle database or process them in a customized way using apply handlers.</p>
<p>XStream can be used in a multitenant container database (CDB). A CDB is an Oracle database that includes zero, one, or many user-created pluggable databases (PDBs).</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink XSTRM1087" href="../XSTRM/xstrm_xout_cncpt.htm#XSTRM1087"><span class="italic">Oracle Database XStream Guide, Chapter 4, &#34;XStream Out&#34;</span></a></p>
</li>
<li>
<p><a class="olink XSTRM" href="../XSTRM/toc.htm"><span class="italic">Oracle Database XStream Guide</span></a></p>
</li>
<li>
<p><a class="olink CNCPT89233" href="../CNCPT/part_consol.htm#CNCPT89233"><span class="italic">Oracle Database Concepts</span></a> for more information about CDBs and PDBs</p>
</li>
</ul>
</div>
</div>
<!-- class="refsect2" -->
<div id="ARPLS70185" class="refsect2"><a id="CACCADJE"></a>
<h3 class="refsect2">Security Model<a id="sthref16117"></a><a id="sthref16118"></a><a id="sthref16119"></a></h3>
<p>To ensure that the user who runs the subprograms in this package has the necessary privileges, configure an XStream administrator and connect as the XStream administrator when using this package.</p>
<p>An administrator must be granted the <code dir="ltr">DBA</code> role when the administrator is performing any of the following actions:</p>
<ul>
<li>
<p>Running the <code dir="ltr">ADD_OUTBOUND</code> procedure while connected as a user that is different from the configured connect user for an outbound server</p>
</li>
<li>
<p>Running the <code dir="ltr">ALTER_OUTBOUND</code> procedure to change the capture user for a capture process or the connect user for an outbound server</p>
</li>
<li>
<p>Running the <code dir="ltr">CREATE_OUTBOUND</code> procedure, because this procedure creates a capture process</p>
</li>
<li>
<p>Running the <code dir="ltr">ALTER_INBOUND</code> procedure to change the apply user for an inbound server</p>
</li>
<li>
<p>Running the <code dir="ltr">ADD_INBOUND</code> procedure while connected as a user that is different from the configured apply user for an inbound server</p>
</li>
</ul>
<p>When the administrator does not need to perform the preceding tasks, the <code dir="ltr">DBA</code> role is not required.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="d_xstrm_auth.htm#BABCADCJ">GRANT_ADMIN_PRIVILEGE Procedure</a></p>
</li>
<li>
<p><a class="olink XSTRM1111" href="../XSTRM/xstrm_xout_cncpt.htm#XSTRM1111"><span class="italic">Oracle Database XStream Guide, Chapter 4, &#34;XStream Out and Security&#34;</span></a> for more information about XStream and security.</p>
</li>
</ul>
</div>
</div>
<!-- class="refsect2" -->
<div id="ARPLS72453" class="refsect2"><a id="CACCHJJC"></a>
<h3 class="refsect2">Operational Notes</h3>
<p>Some subprograms in the <code dir="ltr">DBMS_APPLY_ADM</code> package can manage XStream outbound servers, and some subprograms in the <code dir="ltr">DBMS_APPLY_ADM</code> package can manage XStream inbound servers.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="d_apply.htm#BGBBCABB">Chapter 23, &#34;DBMS_APPLY_ADM&#34;</a> for details about which subprograms can manage outbound servers and inbound servers</div>
</div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" -->
<div class="refentry"><a id="CACJHGFB"></a>
<div id="ARPLS70186" class="refsect1">
<h2 class="refsect1">Summary of DBMS_XSTREAM_ADM Subprograms</h2>
<div id="ARPLS70187" class="tblformal">
<p class="titleintable"><a id="sthref16120"></a><a id="sthref16121"></a>Table 204-1 DBMS_XSTREAM_ADM Package Subprograms</p>
<table class="cellalignment4330" title="DBMS_XSTREAM_ADM Package Subprograms" summary="This table lists the DBMS_XSTREAM_ADM subprograms in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t6">Subprogram</th>
<th class="cellalignment4328" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t6" headers="r1c1-t6">
<p><a href="#CHDJFCFI">ADD_COLUMN Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r2c1-t6 r1c2-t6">
<p>Either adds or removes a declarative rule-based transformation which adds a column to a row logical change record (row LCR) that satisfies the specified rule</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t6" headers="r1c1-t6">
<p><a href="#CHDFHEEI">ADD_GLOBAL_PROPAGATION_RULES Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r3c1-t6 r1c2-t6">
<p>Either adds global rules to the positive rule set for a propagation, or adds global rules to the negative rule set for a propagation, and creates the specified propagation if it does not exist</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t6" headers="r1c1-t6">
<p><a href="#CHDIEFAG">ADD_GLOBAL_RULES Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r4c1-t6 r1c2-t6">
<p>Adds global rules to either the positive or negative rule set of a capture process or apply process, and creates the specified capture process or apply process if it does not exist</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t6" headers="r1c1-t6">
<p><a href="#CACCCAJJ">ADD_OUTBOUND Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r5c1-t6 r1c2-t6">
<p>Creates an XStream outbound server that dequeues LCRs from the specified queue</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t6" headers="r1c1-t6">
<p><a href="#CHDFJBBC">ADD_SCHEMA_PROPAGATION_RULES Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r6c1-t6 r1c2-t6">
<p>Either adds schema rules to the positive rule set for a propagation, or adds schema rules to the negative rule set for a propagation, and creates the specified propagation if it does not exist</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t6" headers="r1c1-t6">
<p><a href="#CHDEHIHG">ADD_SCHEMA_RULES Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r7c1-t6 r1c2-t6">
<p>Adds rules to a rule set of XStream clients.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t6" headers="r1c1-t6">
<p><a href="#CACFEEIC">ADD_SUBSET_OUTBOUND_RULES Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r8c1-t6 r1c2-t6">
<p>Adds subset rules to an outbound server configuration</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t6" headers="r1c1-t6">
<p><a href="#CHDICIJJ">ADD_SUBSET_PROPAGATION_RULES Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r9c1-t6 r1c2-t6">
<p>Adds subset rules to the positive rule set for a propagation, and creates the specified propagation if it does not exist</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t6" headers="r1c1-t6">
<p><a href="#CHDGEGBB">ADD_SUBSET_RULES Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r10c1-t6 r1c2-t6">
<p>Adds subset rules to the positive rule set of a capture process or apply process, and creates the specified capture process or apply process if it does not exist</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t6" headers="r1c1-t6">
<p><a href="#CHDHAGHE">ADD_TABLE_PROPAGATION_RULES Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r11c1-t6 r1c2-t6">
<p>Either adds table rules to the positive rule set for a propagation, or adds table rules to the negative rule set for a propagation, and creates the specified propagation if it does not exist</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t6" headers="r1c1-t6">
<p><a href="#CHDBDCDG">ADD_TABLE_RULES Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r12c1-t6 r1c2-t6">
<p>This procedure adds rules to a rule set of an XStream client.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t6" headers="r1c1-t6">
<p><a href="#CACHIFDH">ALTER_INBOUND Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r13c1-t6 r1c2-t6">
<p>Modifies an XStream inbound server</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t6" headers="r1c1-t6">
<p><a href="#CACEFHHB">ALTER_OUTBOUND Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r14c1-t6 r1c2-t6">
<p>Modifies an XStream outbound server</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r15c1-t6" headers="r1c1-t6">
<p><a href="#CACEGCGG">CREATE_INBOUND Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r15c1-t6 r1c2-t6">
<p>Creates an XStream inbound server and its queue</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r16c1-t6" headers="r1c1-t6">
<p><a href="#CACBHJDD">CREATE_OUTBOUND Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r16c1-t6 r1c2-t6">
<p>Creates an XStream outbound server, queue, and capture process to enable XStream client applications to stream out Oracle database changes encapsulated in LCRs</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r17c1-t6" headers="r1c1-t6">
<p><a href="#CHDIJJEC">DELETE_COLUMN Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r17c1-t6 r1c2-t6">
<p>Either adds or removes a declarative rule-based transformation which deletes a column from a row LCR that satisfies the specified rule</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r18c1-t6" headers="r1c1-t6">
<p><a href="#CACBGICJ">DROP_INBOUND Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r18c1-t6 r1c2-t6">
<p>Removes an inbound server configuration</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r19c1-t6" headers="r1c1-t6">
<p><a href="#CACICJHG">DROP_OUTBOUND Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r19c1-t6 r1c2-t6">
<p>Removes an outbound server configuration</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r20c1-t6" headers="r1c1-t6">
<p><a href="#CIAHCHJD">ENABLE_GG_XSTREAM_FOR_STREAMS Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r20c1-t6 r1c2-t6">
<p>Enables XStream performance optimizations for Oracle Streams components</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r21c1-t6" headers="r1c1-t6">
<p><a href="#CHDDIGJF">GET_MESSAGE_TRACKING Function</a></p>
</td>
<td class="cellalignment4329" headers="r21c1-t6 r1c2-t6">
<p>Returns the tracking label for the current session</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r22c1-t6" headers="r1c1-t6">
<p><a href="#CHDJEBGF">GET_TAG Function</a></p>
</td>
<td class="cellalignment4329" headers="r22c1-t6 r1c2-t6">
<p>Gets the binary tag for all redo entries generated by the current session</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r23c1-t6" headers="r1c1-t6">
<p><a href="#CIABJEJF">IS_GG_XSTREAM_FOR_STREAMS Function</a></p>
</td>
<td class="cellalignment4329" headers="r23c1-t6 r1c2-t6">
<p>Returns <code dir="ltr">TRUE</code> if XStream performance optimizations are enabled for Oracle Streams components, or returns <code dir="ltr">FALSE</code> if XStream performance optimizations are disabled for Oracle Streams components</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r24c1-t6" headers="r1c1-t6">
<p><a href="#CHDHEBJB">KEEP_COLUMNS Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r24c1-t6 r1c2-t6">
<p>Either adds or removes a declarative rule-based transformation which keeps a list of columns in a row LCR that satisfies the specified rule</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r25c1-t6" headers="r1c1-t6">
<p><a href="#CHDEDACG">MERGE_STREAMS Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r25c1-t6 r1c2-t6">
<p>Merges a stream flowing from one capture process with a stream flowing from another capture process</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r26c1-t6" headers="r1c1-t6">
<p><a href="#CHDFDGBC">MERGE_STREAMS_JOB Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r26c1-t6 r1c2-t6">
<p>Determines whether the original capture process and the cloned capture are within the specified merge threshold and, if they are, runs the <code dir="ltr">MERGE_STREAMS</code> procedure to merge the two streams</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r27c1-t6" headers="r1c1-t6">
<p><a href="#CHDDAGED">PURGE_SOURCE_CATALOG Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r27c1-t6 r1c2-t6">
<p>Removes all Oracle Streams data dictionary information at the local database for the specified object</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r28c1-t6" headers="r1c1-t6">
<p><a href="#CHDDGCAC">RECOVER_OPERATION Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r28c1-t6 r1c2-t6">
<p>Provides options for a split and merge operation that stopped because it encountered an error. This procedure either rolls forward the operation, rolls back the operation, or purges all of the metadata about the operation.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r29c1-t6" headers="r1c1-t6">
<p><a href="#CHDBHEAC">REMOVE_QUEUE Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r29c1-t6 r1c2-t6">
<p>Removes the specified <code dir="ltr">ANYDATA</code> queue</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r30c1-t6" headers="r1c1-t6">
<p><a href="#CHDJFHCE">REMOVE_RULE Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r30c1-t6 r1c2-t6">
<p>Removes the specified rule or all rules from the rule set associated with the specified capture process, apply process, or propagation.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r31c1-t6" headers="r1c1-t6">
<p><a href="#CACHABED">REMOVE_SUBSET_OUTBOUND_RULES Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r31c1-t6 r1c2-t6">
<p>Removes subset rules from an outbound server configuration</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r32c1-t6" headers="r1c1-t6">
<p><a href="#CHDJBFGH">REMOVE_XSTREAM_CONFIGURATION Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r32c1-t6 r1c2-t6">
<p>Removes the XStream configuration at the local database</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r33c1-t6" headers="r1c1-t6">
<p><a href="#CHDJIGAC">RENAME_COLUMN Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r33c1-t6 r1c2-t6">
<p>Either adds or removes a declarative rule-based transformation which renames a column in a row LCR that satisfies the specified rule</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r34c1-t6" headers="r1c1-t6">
<p><a href="#CHDEHAJI">RENAME_SCHEMA Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r34c1-t6 r1c2-t6">
<p>Either adds or removes a declarative rule-based transformation which renames a schema in a row LCR that satisfies the specified rule</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r35c1-t6" headers="r1c1-t6">
<p><a href="#CHDDBCIB">RENAME_TABLE Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r35c1-t6 r1c2-t6">
<p>Either adds or removes a declarative rule-based transformation which renames a table in a row LCR that satisfies the specified rule</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r36c1-t6" headers="r1c1-t6">
<p><a href="#CHDFIHCA">SET_MESSAGE_TRACKING Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r36c1-t6 r1c2-t6">
<p>Sets the tracking label for logical change records (LCRs) produced by the current session</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r37c1-t6" headers="r1c1-t6">
<p><a href="#CHDJAHAF">SET_PARAMETER Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r37c1-t6 r1c2-t6">
<p>Sets a parameter for an outbound server, an inbound server, or an outbound server&#39;s capture process</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r38c1-t6" headers="r1c1-t6">
<p><a href="#CHDIJDFJ">SET_TAG Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r38c1-t6 r1c2-t6">
<p>Sets the binary tag for all redo entries subsequently generated by the current session</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r39c1-t6" headers="r1c1-t6">
<p><a href="#CHDFIFAA">SET_UP_QUEUE Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r39c1-t6 r1c2-t6">
<p>Creates a queue table and a queue for use with the capture, propagate, and apply functionality of XStream</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r40c1-t6" headers="r1c1-t6">
<p><a href="#CHDHGCJB">SPLIT_STREAMS Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r40c1-t6 r1c2-t6">
<p>Splits one stream flowing from a capture process off from all of the other streams flowing from the capture process</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r41c1-t6" headers="r1c1-t6">
<p><a href="#CHDFHIGF">START_OUTBOUND Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r41c1-t6 r1c2-t6">
<p>Starts an XStream outbound server</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r42c1-t6" headers="r1c1-t6">
<p><a href="#CHDIJEIF">STOP_OUTBOUND Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r42c1-t6 r1c2-t6">
<p>Stops an XStream outbound server</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
All subprograms commit unless specified otherwise.</div>
<div id="ARPLS74027" class="refsect2"><a id="CHDJFCFI"></a>
<h3 class="refsect2">ADD_COLUMN Procedure<a id="sthref16122"></a><a id="sthref16123"></a></h3>
<p>This procedure either adds or removes a declarative rule-based transformation which adds a column to a row logical change record (row LCR) that satisfies the specified rule.</p>
<p>For the transformation to be performed when the specified rule evaluates to <code dir="ltr">TRUE</code>, the rule must be in the positive rule set of an XStream client. XStream clients include capture processes, propagations, and apply processes.</p>
<p>This procedure is overloaded. The <code dir="ltr">column_value</code> and <code dir="ltr">column_function</code> parameters are mutually exclusive.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p><code dir="ltr">ADD_COLUMN</code> transformations cannot add columns of the following data types: <code dir="ltr">BLOB</code>, <code dir="ltr">CLOB</code>, <code dir="ltr">NCLOB</code>, <code dir="ltr">BFILE</code>, <code dir="ltr">LONG</code>, <code dir="ltr">LONG</code> <code dir="ltr">RAW</code>, <code dir="ltr">ROWID</code>, user-defined types (including object types, <code dir="ltr">REF</code>s, varrays, nested tables), and Oracle-supplied types (including any types, XML types, spatial types, and media types).</p>
</li>
<li>
<p>Declarative transformations can transform row LCRs only. Therefore, a DML rule must be specified when you run this procedure. If a DDL rule is specified, then the procedure raises an error.</p>
</li>
</ul>
</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink XSTRM72752" href="../XSTRM/xstrm_gen_cncpt.htm#XSTRM72752"><span class="italic">Oracle Database XStream Guide</span></a> for more information about declarative rule-based transformations</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16124"></a>Syntax</p>
<pre dir="ltr">DBMS_XSTREAM_ADM.ADD_COLUMN(
   rule_name     IN  VARCHAR2,
   table_name    IN  VARCHAR2,
   column_name   IN  VARCHAR2,
   column_value  IN  ANYDATA,
   value_type    IN  VARCHAR2     DEFAULT &#39;NEW&#39;,
   step_number   IN  NUMBER       DEFAULT 0,
   operation     IN  VARCHAR2     DEFAULT &#39;ADD&#39;);
</pre>
<pre dir="ltr">DBMS_XSTREAM_ADM.ADD_COLUMN(
   rule_name        IN  VARCHAR2,
   table_name       IN  VARCHAR2,
   column_name      IN  VARCHAR2,
   column_function  IN  VARCHAR2,
   value_type       IN  VARCHAR2     DEFAULT &#39;NEW&#39;,
   step_number      IN  NUMBER       DEFAULT 0,
   operation        IN  VARCHAR2     DEFAULT &#39;ADD&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16125"></a>Parameters</p>
<div id="ARPLS74028" class="tblformal">
<p class="titleintable"><a id="sthref16126"></a><a id="sthref16127"></a>Table 204-2 ADD_COLUMN Procedure Parameters</p>
<table class="cellalignment4330" title="ADD_COLUMN Procedure Parameters " summary="This table describes the Parameters of DBMS_XSTREAM_ADM.ADD_COLUMN subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t10">Parameter</th>
<th class="cellalignment4328" id="r1c2-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t10" headers="r1c1-t10">
<p><code dir="ltr">rule_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t10 r1c2-t10">
<p>The name of the rule, specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">rule_name</span></code>. If <code dir="ltr">NULL</code>, then the procedure raises an error.</p>
<p>For example, to specify a rule in the <code dir="ltr">hr</code> schema named <code dir="ltr">employees12</code>, enter <code dir="ltr">hr.employees12</code>. If the schema is not specified, then the current user is the default.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t10" headers="r1c1-t10">
<p><code dir="ltr">table_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t10 r1c2-t10">
<p>The name of the table to which the column is added in the row LCR, specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">object_name</span></code>. For example, <code dir="ltr">hr.employees</code>. If the schema is not specified, then the current user is the default.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t10" headers="r1c1-t10">
<p><code dir="ltr">column_name</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t10 r1c2-t10">
<p>The name of the column added to each row LCR that satisfies the rule.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t10" headers="r1c1-t10">
<p><code dir="ltr">column_value</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t10 r1c2-t10">
<p>The value of the added column. Specify the appropriate <code dir="ltr">ANYDATA</code> function for the column datatype and the column value. For example, if the datatype of the column being added is <code dir="ltr">NUMBER</code> and the value is <code dir="ltr">NULL</code>, then specify the <code dir="ltr">ANYDATA.ConvertNumber(NULL)</code> function.</p>
<p>This parameter cannot be specified if the <code dir="ltr">column_function</code> parameter is specified.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t10" headers="r1c1-t10">
<p><code dir="ltr">column_function</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t10 r1c2-t10">
<p>Either the <code dir="ltr">&#39;SYSDATE&#39;</code> or the <code dir="ltr">&#39;SYSTIMESTAMP&#39;</code> SQL function.</p>
<p>The <code dir="ltr">&#39;SYSDATE&#39;</code> SQL function places the current date and time set for the operating system on which the database resides. The datatype of the returned value is <code dir="ltr">DATE</code>, and the format returned depends on the value of the <code dir="ltr">NLS_DATE_FORMAT</code> initialization parameter.</p>
<p>The <code dir="ltr">&#39;SYSTIMESTAMP&#39;</code> SQL function returns the system date, including fractional seconds and time zone, of the system on which the database resides. The return type is <code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code>.</p>
<p>The function executes when the rule evaluates to <code dir="ltr">TRUE</code>.</p>
<p>This parameter cannot be specified if the <code dir="ltr">column_value</code> parameter is specified.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t10" headers="r1c1-t10">
<p><code dir="ltr">value_type</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t10 r1c2-t10">
<p>Specify <code dir="ltr">&#39;NEW&#39;</code> to add the column to the new values in the row LCR.</p>
<p>Specify <code dir="ltr">&#39;OLD&#39;</code> to add the column to the old values in the row LCR.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t10" headers="r1c1-t10">
<p><code dir="ltr">step_number</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t10 r1c2-t10">
<p>The order of execution of the transformation.</p>
<p><span class="bold">See Also:</span> <a class="olink XSTRM72754" href="../XSTRM/xstrm_gen_cncpt.htm#XSTRM72754"><span class="italic">Oracle Database XStream Guide</span></a> for more information about transformation ordering</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t10" headers="r1c1-t10">
<p><code dir="ltr">operation</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t10 r1c2-t10">
<p>Specify <code dir="ltr">&#39;ADD&#39;</code> to add the transformation to the rule.</p>
<p>Specify <code dir="ltr">&#39;REMOVE&#39;</code> to remove the transformation from the rule.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16128"></a>Usage Notes</p>
<p>When <code dir="ltr">&#39;REMOVE&#39;</code> is specified for the <code dir="ltr">operation</code> parameter, all of the add column declarative rule-based transformations for the specified rule are removed that match the specified <code dir="ltr">table_name</code>, <code dir="ltr">column_name</code>, and <code dir="ltr">step_number</code> parameters. Nulls specified for these parameters act as wildcards. The following table lists the behavior of the <code dir="ltr">ADD_COLUMN</code> procedures when one or more of these parameters is <code dir="ltr">NULL</code>:</p>
<div class="inftblinformal">
<table class="cellalignment4327" title="Remove Behavior for the ADD_COLUMN Procedure" summary="This table describes the behavior of the ADD_COLUMN procedure when the operation parameter is set to REMOVE and various other procedure parameters are set to NULL." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t11">table_name</th>
<th class="cellalignment4328" id="r1c2-t11">column_name</th>
<th class="cellalignment4328" id="r1c3-t11">step_number</th>
<th class="cellalignment4328" id="r1c4-t11">Result</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t11" headers="r1c1-t11"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r2c1-t11 r1c2-t11"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r2c1-t11 r1c3-t11"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r2c1-t11 r1c4-t11">Remove all add column transformations for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t11" headers="r1c1-t11"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r3c1-t11 r1c2-t11"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r3c1-t11 r1c3-t11">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r3c1-t11 r1c4-t11">Remove all add column transformations with the specified <code dir="ltr">step_number</code> for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t11" headers="r1c1-t11"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r4c1-t11 r1c2-t11">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r4c1-t11 r1c3-t11">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r4c1-t11 r1c4-t11">Remove all add column transformations with the specified <code dir="ltr">column_name</code> and <code dir="ltr">step_number</code> for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t11" headers="r1c1-t11">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r5c1-t11 r1c2-t11"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r5c1-t11 r1c3-t11"><code dir="ltr">non-NULL</code></td>
<td class="cellalignment4329" headers="r5c1-t11 r1c4-t11">Remove all add column transformations with the specified <code dir="ltr">table_name</code> and <code dir="ltr">step_number</code> for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t11" headers="r1c1-t11"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r6c1-t11 r1c2-t11"><code dir="ltr">non-NULL</code></td>
<td class="cellalignment4329" headers="r6c1-t11 r1c3-t11"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r6c1-t11 r1c4-t11">Remove all add column transformations with the specified <code dir="ltr">column_name</code> for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t11" headers="r1c1-t11">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r7c1-t11 r1c2-t11">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r7c1-t11 r1c3-t11"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r7c1-t11 r1c4-t11">Remove all add column transformations with the specified <code dir="ltr">table_name</code> and <code dir="ltr">column_name</code> for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t11" headers="r1c1-t11">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r8c1-t11 r1c2-t11"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r8c1-t11 r1c3-t11"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r8c1-t11 r1c4-t11">Remove all add column transformations with the specified <code dir="ltr">table_name</code> for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t11" headers="r1c1-t11">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r9c1-t11 r1c2-t11">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r9c1-t11 r1c3-t11">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r9c1-t11 r1c4-t11">Remove all add column transformations with the specified <code dir="ltr">table_name</code>, <code dir="ltr">column_name</code>, and <code dir="ltr">step_number</code> for the specified rule.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS74029" class="refsect2"><a id="CHDFHEEI"></a>
<h3 class="refsect2">ADD_GLOBAL_PROPAGATION_RULES Procedure<a id="sthref16129"></a><a id="sthref16130"></a><a id="sthref16131"></a><a id="sthref16132"></a></h3>
<p>This procedure either adds global rules to the positive rule set for a propagation, or adds global rules to the negative rule set for a propagation, and creates the specified propagation if it does not exist.</p>
<p>This procedure is overloaded. One version of this procedure contains two <code dir="ltr">OUT</code> parameters, and the other does not.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16133"></a>Syntax</p>
<pre dir="ltr">DBMS_XSTREAM_ADM.ADD_GLOBAL_PROPAGATION_RULES(
   streams_name            IN   VARCHAR2  DEFAULT NULL,
   source_queue_name       IN   VARCHAR2,
   destination_queue_name  IN   VARCHAR2,
   include_dml             IN   BOOLEAN   DEFAULT TRUE,
   include_ddl             IN   BOOLEAN   DEFAULT FALSE,
   include_tagged_lcr      IN   BOOLEAN   DEFAULT FALSE,
   source_database         IN   VARCHAR2  DEFAULT NULL,
   dml_rule_name           OUT  VARCHAR2,
   ddl_rule_name           OUT  VARCHAR2,
   inclusion_rule          IN   BOOLEAN   DEFAULT TRUE,
   and_condition           IN   VARCHAR2  DEFAULT NULL,
   queue_to_queue          IN   BOOLEAN   DEFAULT NULL);

DBMS_XSTREAM_ADM.ADD_GLOBAL_PROPAGATION_RULES(
   streams_name            IN   VARCHAR2  DEFAULT NULL,
   source_queue_name       IN   VARCHAR2,
   destination_queue_name  IN   VARCHAR2,
   include_dml             IN   BOOLEAN   DEFAULT TRUE,
   include_ddl             IN   BOOLEAN   DEFAULT FALSE,
   include_tagged_lcr      IN   BOOLEAN   DEFAULT FALSE,
   source_database         IN   VARCHAR2  DEFAULT NULL,
   inclusion_rule          IN   BOOLEAN   DEFAULT TRUE,
   and_condition           IN   VARCHAR2  DEFAULT NULL,
   queue_to_queue          IN   BOOLEAN   DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16134"></a>Parameters</p>
<div id="ARPLS74030" class="tblformal">
<p class="titleintable"><a id="sthref16135"></a><a id="sthref16136"></a>Table 204-3 ADD_GLOBAL_PROPAGATION_RULES Procedure Parameters</p>
<table class="cellalignment4330" title="ADD_GLOBAL_PROPAGATION_RULES Procedure Parameters " summary="This table describes the Parameters of DBMS_XSTREAM_ADM.ADD_GLOBAL_PROPAGATION_RULES subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t12">Parameter</th>
<th class="cellalignment4328" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t12" headers="r1c1-t12">
<p><code dir="ltr">streams_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t12 r1c2-t12">
<p>The name of the propagation. Do not specify an owner.</p>
<p>If the specified propagation does not exist, then the procedure creates it automatically.</p>
<p>If <code dir="ltr">NULL</code> and a propagation exists for the same source queue and destination queue (including database link), then the procedure uses this propagation.</p>
<p>If <code dir="ltr">NULL</code> and no propagation exists for the same source queue and destination queue (including database link), then the procedure creates a propagation automatically with a system-generated name.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t12" headers="r1c1-t12">
<p><code dir="ltr">source_queue_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t12 r1c2-t12">
<p>The name of the source queue, specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">queue_name</span></code>. The current database must contain the source queue, and the queue must be <code dir="ltr">ANYDATA</code> type.</p>
<p>For example, to specify a source queue named <code dir="ltr">streams_queue</code> in the <code dir="ltr">strmadmin</code> schema, enter <code dir="ltr">strmadmin.streams_queue</code> for this parameter.</p>
<p>If the schema is not specified, then the current user is the default.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t12" headers="r1c1-t12">
<p><code dir="ltr">destination_queue_name</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t12 r1c2-t12">
<p>The name of the destination queue, including a database link, specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">queue_name</span></code><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">@dblink_name</span></code><code dir="ltr">]</code>, if the destination queue is in a remote database. The queue must be <code dir="ltr">ANYDATA</code> type.</p>
<p>For example, to specify a destination queue named <code dir="ltr">streams_queue</code> in the <code dir="ltr">strmadmin</code> schema and use a database link named <code dir="ltr">dbs2.net</code>, enter <code dir="ltr">strmadmin.streams_queue@dbs2.net</code> for this parameter.</p>
<p>If the schema is not specified, then the current user is the default.</p>
<p>If the database link is omitted, then the procedure uses the global name of the current database, and the source queue and destination queue must be in the same database.</p>
<p><span class="bold">Note:</span> Connection qualifiers are not allowed.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t12" headers="r1c1-t12">
<p><code dir="ltr">include_dml</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t12 r1c2-t12">
<p>If <code dir="ltr">TRUE</code>, then the procedure creates a rule for DML changes. If <code dir="ltr">FALSE</code>, then the procedure does not create a DML rule. <code dir="ltr">NULL</code> is not permitted.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t12" headers="r1c1-t12">
<p><code dir="ltr">include_ddl</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t12 r1c2-t12">
<p>If <code dir="ltr">TRUE</code>, then the procedure creates a rule for DDL changes. If <code dir="ltr">FALSE</code>, then the procedure does not create a DDL rule. <code dir="ltr">NULL</code> is not permitted.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t12" headers="r1c1-t12">
<p><code dir="ltr">include_tagged_lcr</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t12 r1c2-t12">
<p>If <code dir="ltr">TRUE</code>, then the procedure does not add a condition regarding Oracle Streams tags to the generated rules. Therefore, these rules can evaluate to <code dir="ltr">TRUE</code> regardless of whether a logical change record (LCR) has a non-<code dir="ltr">NULL</code> tag. If the rules are added to the positive rule set for the propagation, then an LCR is always considered for propagation, regardless of whether it has a non-<code dir="ltr">NULL</code> tag. If the rules are added to a positive rule set, then setting this parameter to <code dir="ltr">TRUE</code> is appropriate for a full (for example, standby) copy of a database. If the rules are added to the negative rule set for the propagation, then whether an LCR is discarded does not depend on the tag for the LCR.</p>
<p>If <code dir="ltr">FALSE</code>, then the procedure adds a condition to each generated rule that causes the rule to evaluate to <code dir="ltr">TRUE</code> only if an LCR has a <code dir="ltr">NULL</code> Oracle Streams tag. If the rules are added to the positive rule set for the propagation, then an LCR is considered for propagation only when the LCR contains a <code dir="ltr">NULL</code> tag. If the rules are added to a positive rule set, then setting this parameter to <code dir="ltr">FALSE</code> might be appropriate in update-anywhere configurations to avoid sending a change back to its source database. If the rules are added to the negative rule set for the propagation, then an LCR can be discarded only if it has a <code dir="ltr">NULL</code> tag.</p>
<p>Usually, specify <code dir="ltr">TRUE</code> for this parameter if the <code dir="ltr">inclusion_rule</code> parameter is set to <code dir="ltr">FALSE</code>.</p>
<p><span class="bold">See Also:</span> <a class="olink STREP008" href="../STREP/rep_tags.htm#STREP008"><span class="italic">Oracle Streams Replication Administrator&#39;s Guide</span></a> for more information about tags</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t12" headers="r1c1-t12">
<p><code dir="ltr">source_database</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t12 r1c2-t12">
<p>The global name of the source database. The source database is where the changes originated. If <code dir="ltr">NULL</code>, then the procedure does not add a condition regarding the source database to the generated rules.</p>
<p>If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify <code dir="ltr">DBS1</code> and the domain is <code dir="ltr">.NET</code>, then the procedure specifies <code dir="ltr">DBS1.NET</code> automatically.</p>
<p>Oracle recommends that you specify a source database for propagation rules.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t12" headers="r1c1-t12">
<p><code dir="ltr">dml_rule_name</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t12 r1c2-t12">
<p>If <code dir="ltr">include_dml</code> is <code dir="ltr">TRUE</code>, then this parameter contains the DML rule name.</p>
<p>If <code dir="ltr">include_dml</code> is <code dir="ltr">FALSE</code>, then this parameter contains a <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t12" headers="r1c1-t12">
<p><code dir="ltr">ddl_rule_name</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t12 r1c2-t12">
<p>If <code dir="ltr">include_ddl</code> is <code dir="ltr">TRUE</code>, then this parameter contains the DDL rule name.</p>
<p>If <code dir="ltr">include_ddl</code> is <code dir="ltr">FALSE</code>, then this parameter contains a <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t12" headers="r1c1-t12">
<p><code dir="ltr">inclusion_rule</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t12 r1c2-t12">
<p>If <code dir="ltr">inclusion_rule</code> is <code dir="ltr">TRUE</code>, then the procedure adds the rules to the positive rule set for the propagation.</p>
<p>If <code dir="ltr">inclusion_rule</code> is <code dir="ltr">FALSE</code>, then the procedure adds the rules to the negative rule set for the propagation.</p>
<p>In either case, the system creates the rule set if it does not exist.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t12" headers="r1c1-t12">
<p><code dir="ltr">and_condition</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t12 r1c2-t12">
<p>If non-<code dir="ltr">NULL</code>, appends the specified condition to the system-generated rule condition using an <code dir="ltr">AND</code> clause in the following way:</p>
<pre dir="ltr">(<span class="italic">system_condition</span>) AND (<span class="italic">and_condition</span>)
</pre>
<p>The variable in the specified condition must be <code dir="ltr">:lcr</code>. For example, to specify that the global rules generated by the procedure evaluate to <code dir="ltr">TRUE</code> only if the Oracle Streams tag is the hexadecimal equivalent of <code dir="ltr">&#39;02&#39;</code>, specify the following condition:</p>
<pre dir="ltr">:lcr.get_tag() = HEXTORAW(&#39;&#39;02&#39;&#39;)
</pre>
<p>The <code dir="ltr">:lcr</code> in the specified condition is converted to <code dir="ltr">:dml</code> or <code dir="ltr">:ddl</code>, depending on the rule that is being generated. If you are specifying an LCR member subprogram that is dependent on the LCR type (row or DDL), then make sure the procedure only generates the appropriate rule.</p>
<p>Specifically, if you specify an LCR member subprogram that is valid only for row LCRs, then specify <code dir="ltr">TRUE</code> for the <code dir="ltr">include_dml</code> parameter and <code dir="ltr">FALSE</code> for the <code dir="ltr">include_ddl</code> parameter. If you specify an LCR member subprogram that is valid only for DDL LCRs, then specify <code dir="ltr">FALSE</code> for the <code dir="ltr">include_dml</code> parameter and <code dir="ltr">TRUE</code> for the <code dir="ltr">include_ddl</code> parameter.</p>
<p><span class="bold">See Also:</span> <a href="t_lcr.htm#BABGGBHF">Chapter 275, &#34;Logical Change Record TYPEs&#34;</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t12" headers="r1c1-t12">
<p><code dir="ltr">queue_to_queue</code></p>
</td>
<td class="cellalignment4329" headers="r13c1-t12 r1c2-t12">
<p>If <code dir="ltr">TRUE</code> or <code dir="ltr">NULL</code>, then a new propagation created by this procedure is a queue to queue propagation. A queue-to-queue propagation always has its own propagation job and uses a service for automatic failover when the destination queue is a buffered queue in an Oracle Real Application Clusters (Oracle RAC) database.</p>
<p>If <code dir="ltr">FALSE</code>, then a new propagation created by this procedure is a queue-to-dblink propagation. A queue-to-dblink propagation can share a propagation job with other propagations that use the same database link and does not support automatic failover in an Oracle RAC environment.</p>
<p>The procedure cannot change the queue to queue property of an exiting propagation. If the specified propagation exists, then the procedure behaves in the following way for each setting:</p>
<ul>
<li>
<p>If <code dir="ltr">TRUE</code> and the specified propagation is not a queue to queue propagation, then the procedure raises an error.</p>
</li>
<li>
<p>If <code dir="ltr">FALSE</code> and the specified propagation is a queue to queue propagation, then the procedure raises an error.</p>
</li>
<li>
<p>If <code dir="ltr">NULL</code>, then the procedure does not change the queue to queue property of the propagation.</p>
</li>
</ul>
<p><span class="bold">See Also:</span> <a class="olink STRMS155" href="../STRMS/strms_prop.htm#STRMS155"><span class="italic">Oracle Streams Concepts and Administration</span></a> for more information about queue-to-queue propagations</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16137"></a>Usage Notes</p>
<p>This procedure configures propagation using the current user. Only one propagation is allowed between a particular source queue and destination queue.</p>
<p>This procedure creates DML and DDL rules automatically based on <code dir="ltr">include_dml</code> and <code dir="ltr">include_ddl</code> parameter values, respectively. Each rule has a system-generated rule name that consists of the database name with a sequence number appended to it. The sequence number is used to avoid naming conflicts. If the database name plus the sequence number is too long, then the database name is truncated. A propagation uses the rules for filtering.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16138"></a>Examples</p>
<p>The following is an example of a global rule condition created for DML changes:</p>
<pre dir="ltr">(:dml.is_null_tag() = &#39;Y&#39; and :dml.get_source_database_name() = &#39;DBS1.NET&#39; )
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS74031" class="refsect2"><a id="CHDIEFAG"></a>
<h3 class="refsect2">ADD_GLOBAL_RULES Procedure<a id="sthref16139"></a><a id="sthref16140"></a><a id="sthref16141"></a><a id="sthref16142"></a><a id="sthref16143"></a><a id="sthref16144"></a><a id="sthref16145"></a></h3>
<p>This procedure adds rules to a rule set of one of the following types of XStream clients:</p>
<ul>
<li>
<p>When the <code dir="ltr">streams_type</code> parameter is set to <code dir="ltr">capture</code>, this procedure adds capture process rules for capturing changes to an entire database.</p>
<p>This procedure creates the specified capture process if it does not exist.</p>
</li>
<li>
<p>When the <code dir="ltr">streams_type</code> parameter is set to <code dir="ltr">apply</code> and the <code dir="ltr">streams_name</code> parameter specifies the name of an apply process, outbound server, or inbound server, this procedure adds apply rules for applying all logical change records (LCRs) it receives. The rules can specify that the LCRs must be from a particular source database.</p>
<p>This procedure creates an apply process if no apply process, outbound server, or inbound server exists with the specified <code dir="ltr">streams_name</code>. This procedure can add rules to an outbound server or inbound server, but it cannot create an outbound server or inbound server.</p>
</li>
</ul>
<p>This procedure is overloaded. One version of this procedure contains two <code dir="ltr">OUT</code> parameters, and the other does not.</p>
<div class="infobox-note">
<p class="notep1">Caution:</p>
If you add global rules to the positive rule set for a capture process, then make sure you add rules to the negative capture process rule set to exclude database objects that are not support by Oracle Streams. Query the <code dir="ltr">DBA_STREAMS_UNSUPPORTED</code> data dictionary view to determine which database objects are not supported by Oracle Streams. If unsupported database objects are not excluded, then capture errors will result.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16146"></a>Syntax</p>
<pre dir="ltr">DBMS_XSTREAM_ADM.ADD_GLOBAL_RULES(
   streams_type           IN   VARCHAR2,
   streams_name           IN   VARCHAR2  DEFAULT NULL,
   queue_name             IN   VARCHAR2  DEFAULT &#39;streams_queue&#39;,
   include_dml            IN   BOOLEAN   DEFAULT TRUE,
   include_ddl            IN   BOOLEAN   DEFAULT FALSE,
   include_tagged_lcr     IN   BOOLEAN   DEFAULT FALSE,
   source_database        IN   VARCHAR2  DEFAULT NULL,
   dml_rule_name          OUT  VARCHAR2,
   ddl_rule_name          OUT  VARCHAR2,
   inclusion_rule         IN   BOOLEAN   DEFAULT TRUE,
   and_condition          IN   VARCHAR2  DEFAULT NULL,
   source_root_name       IN   VARCHAR2  DEFAULT NULL,
   source_container_name  IN   VARCHAR2  DEFAULT NULL);

DBMS_XSTREAM_ADM.ADD_GLOBAL_RULES(
   streams_type           IN   VARCHAR2,
   streams_name           IN   VARCHAR2  DEFAULT NULL,
   queue_name             IN   VARCHAR2  DEFAULT &#39;streams_queue&#39;,
   include_dml            IN   BOOLEAN   DEFAULT TRUE,
   include_ddl            IN   BOOLEAN   DEFAULT FALSE,
   include_tagged_lcr     IN   BOOLEAN   DEFAULT FALSE,
   source_database        IN   VARCHAR2  DEFAULT NULL,
   inclusion_rule         IN   BOOLEAN   DEFAULT TRUE,
   and_condition          IN   VARCHAR2  DEFAULT NULL,
   source_root_name       IN   VARCHAR2  DEFAULT NULL,
   source_container_name  IN   VARCHAR2  DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16147"></a>Parameters</p>
<div id="ARPLS74032" class="tblformal">
<p class="titleintable"><a id="sthref16148"></a><a id="sthref16149"></a>Table 204-4 ADD_GLOBAL_RULES Procedure Parameters</p>
<table class="cellalignment4330" title="ADD_GLOBAL_RULES Procedure Parameters" summary="This table describes the Parameters of DBMS_XSTREAM_ADM.ADD_GLOBAL_RULES subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t14">Parameter</th>
<th class="cellalignment4328" id="r1c2-t14">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t14" headers="r1c1-t14">
<p><code dir="ltr">streams_type</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t14 r1c2-t14">
<p>The type of XStream client:</p>
<ul>
<li>
<p>Specify <code dir="ltr">capture</code> for a capture process.</p>
</li>
<li>
<p>Specify <code dir="ltr">apply</code> for an apply process.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t14" headers="r1c1-t14">
<p><code dir="ltr">streams_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t14 r1c2-t14">
<p>The name of the capture process or apply process. Do not specify an owner.</p>
<p>If <code dir="ltr">NULL</code>, if <code dir="ltr">streams_type</code> is <code dir="ltr">capture</code>, and if one relevant capture process for the queue exists, then the relevant XStream client is used. If no relevant XStream client exists for the queue, then an XStream client is created automatically with a system-generated name. If <code dir="ltr">NULL</code> and multiple XStream clients of the specified <code dir="ltr">streams_type</code> for the queue exist, then the procedure raises an error.</p>
<p>If <code dir="ltr">NULL</code>, if <code dir="ltr">streams_type</code> is <code dir="ltr">apply</code>, and if one relevant apply process exists, then the procedure uses the relevant apply process. The relevant apply process is identified in one of the following ways:</p>
<ul>
<li>
<p>If one existing apply process has the source database specified in <code dir="ltr">source_database</code> and uses the queue specified in <code dir="ltr">queue_name</code>, then the procedure uses this apply process.</p>
</li>
<li>
<p>If <code dir="ltr">source_database</code> is <code dir="ltr">NULL</code> and one existing apply process is using the queue specified in <code dir="ltr">queue_name</code>, then the procedure uses this apply process.</p>
</li>
</ul>
<p>If <code dir="ltr">NULL</code> and no relevant apply process exists, then the procedure creates an apply process automatically with a system-generated name.</p>
<p>If <code dir="ltr">NULL</code> and multiple relevant apply processes exist, then the procedure raises an error.</p>
<p>Each apply process must have a unique name.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t14" headers="r1c1-t14">
<p><code dir="ltr">queue_name</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t14 r1c2-t14">
<p>The name of the local queue, specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">queue_name</span></code>. The current database must contain the queue, and the queue must be <code dir="ltr">ANYDATA</code> type.</p>
<p>For example, to specify a queue named <code dir="ltr">streams_queue</code> in the <code dir="ltr">strmadmin</code> schema, enter <code dir="ltr">strmadmin.streams_queue</code> for this parameter. If the schema is not specified, then the current user is the default.</p>
<p>For capture process rules, this is the queue into which a capture process enqueues LCRs. For outbound server rules, this is the queue from which the outbound server dequeues LCRs. For inbound server rules, this is the queue into which an inbound server enqueues error transactions.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t14" headers="r1c1-t14">
<p><code dir="ltr">include_dml</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t14 r1c2-t14">
<p>If <code dir="ltr">TRUE</code>, then the procedure creates a rule for DML changes. If <code dir="ltr">FALSE</code>, then the procedure does not create a DML rule. <code dir="ltr">NULL</code> is not permitted.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t14" headers="r1c1-t14">
<p><code dir="ltr">include_ddl</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t14 r1c2-t14">
<p>If <code dir="ltr">TRUE</code>, then the procedure creates a rule for DDL changes. If <code dir="ltr">FALSE</code>, then the procedure does not create a DDL rule. <code dir="ltr">NULL</code> is not permitted.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t14" headers="r1c1-t14">
<p><code dir="ltr">include_tagged_lcr</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t14 r1c2-t14">
<p>If <code dir="ltr">TRUE</code>, then the procedure does not add a condition regarding Oracle Streams tags to the generated rules. Therefore, these rules can evaluate to <code dir="ltr">TRUE</code> regardless of whether a redo entry or LCR has a non-<code dir="ltr">NULL</code> tag. If the rules are added to the positive rule set for the process, then a redo entry is always considered for capture, and an LCR is always considered for apply, regardless of whether the redo entry or LCR has a non-<code dir="ltr">NULL</code> tag. If the rules are added to a positive rule set, then setting this parameter to <code dir="ltr">TRUE</code> is appropriate for a full (for example, standby) copy of a database. If the rules are added to the negative rule set for the process, then whether a redo entry or LCR is discarded does not depend on the tag.</p>
<p>If <code dir="ltr">FALSE</code>, then the procedure adds a condition to each generated rule that causes the rule to evaluate to <code dir="ltr">TRUE</code> only if a redo entry or LCR has a <code dir="ltr">NULL</code> Oracle Streams tag. If the rules are added to the positive rule set for the process, then a redo entry is considered for capture, and an LCR is considered for apply, only when the redo entry or LCR contains a <code dir="ltr">NULL</code> tag. If the rules are added to a positive rule set, then setting this parameter to <code dir="ltr">FALSE</code> might be appropriate in update-anywhere configurations to avoid sending a change back to its source database. If the rules are added to the negative rule set for the process, then a redo entry or LCR can be discarded only if it has a <code dir="ltr">NULL</code> tag.</p>
<p>Usually, specify <code dir="ltr">TRUE</code> for this parameter if the <code dir="ltr">inclusion_rule</code> parameter is set to <code dir="ltr">FALSE</code>.</p>
<p><span class="bold">See Also:</span> <a class="olink STREP008" href="../STREP/rep_tags.htm#STREP008"><span class="italic">Oracle Streams Replication Administrator&#39;s Guide</span></a> for more information about tags</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t14" headers="r1c1-t14">
<p><code dir="ltr">source_database</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t14 r1c2-t14">
<p>The global name of the source database. If <code dir="ltr">NULL</code>, then the procedure does not add a condition regarding the source database to the generated rules.</p>
<p>For capture process rules, specify <code dir="ltr">NULL</code> or the global name of the local database if you are creating a capture process locally at the source database. If you are adding rules to a downstream capture process rule set at a downstream database, then specify the source database of the changes that will be captured.</p>
<p>For apply process rules, specify the source database of the changes that will be applied by the apply process. The source database is the database where the changes originated. If an apply process applies captured LCRs, then the apply process can apply LCRs from only one capture process at one source database.</p>
<p>In a CDB, specify the global name of the container to which the rules pertain. The container can be the root or a PDB. For example, <code dir="ltr">mycdb.example.com</code> or <code dir="ltr">hrpdb.example.com</code>. See <a class="olink XSTRM72988" href="../XSTRM/xstrm_gen_cncpt.htm#XSTRM72988"><span class="italic">Oracle Database XStream Guide</span></a> for more information about setting this parameter in a CDB.</p>
<p>If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify <code dir="ltr">DBS1</code> and the domain is <code dir="ltr">.NET</code>, then the procedure specifies <code dir="ltr">DBS1.NET</code> automatically.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t14" headers="r1c1-t14">
<p><code dir="ltr">dml_rule_name</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t14 r1c2-t14">
<p>If <code dir="ltr">include_dml</code> is <code dir="ltr">TRUE</code>, then this parameter contains the DML rule name.</p>
<p>If <code dir="ltr">include_dml</code> is <code dir="ltr">FALSE</code>, then this parameter contains a <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t14" headers="r1c1-t14">
<p><code dir="ltr">ddl_rule_name</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t14 r1c2-t14">
<p>If <code dir="ltr">include_ddl</code> is <code dir="ltr">TRUE</code>, then this parameter contains the DDL rule name.</p>
<p>If <code dir="ltr">include_ddl</code> is <code dir="ltr">FALSE</code>, then this parameter contains a <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t14" headers="r1c1-t14">
<p><code dir="ltr">inclusion_rule</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t14 r1c2-t14">
<p>If <code dir="ltr">inclusion_rule</code> is <code dir="ltr">TRUE</code>, then the procedure adds the rules to the positive rule set for the XStream client.</p>
<p>If <code dir="ltr">inclusion_rule</code> is <code dir="ltr">FALSE</code>, then the procedure adds the rules to the negative rule set for the XStream client.</p>
<p>In either case, the system creates the rule set if it does not exist.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t14" headers="r1c1-t14">
<p><code dir="ltr">and_condition</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t14 r1c2-t14">
<p>If non-<code dir="ltr">NULL</code>, appends the specified condition to the system-generated rule condition using an <code dir="ltr">AND</code> clause in the following way:</p>
<pre dir="ltr">(<span class="italic">system_condition</span>) AND (<span class="italic">and_condition</span>)
</pre>
<p>The variable in the specified condition must be <code dir="ltr">:lcr</code>. For example, to specify that the global rules generated by the procedure evaluate to <code dir="ltr">TRUE</code> only if the Oracle Streams tag is the hexadecimal equivalent of <code dir="ltr">&#39;02&#39;</code>, specify the following condition:</p>
<pre dir="ltr">:lcr.get_tag() = HEXTORAW(&#39;&#39;02&#39;&#39;)
</pre>
<p>The <code dir="ltr">:lcr</code> in the specified condition is converted to <code dir="ltr">:dml</code> or <code dir="ltr">:ddl</code>, depending on the rule that is being generated. If you are specifying an LCR member subprogram that is dependent on the LCR type (row or DDL), then make sure this procedure only generates the appropriate rule.</p>
<p>Specifically, if you specify an LCR member subprogram that is valid only for row LCRs, then specify <code dir="ltr">TRUE</code> for the <code dir="ltr">include_dml</code> parameter and <code dir="ltr">FALSE</code> for the <code dir="ltr">include_ddl</code> parameter. If you specify an LCR member subprogram that is valid only for DDL LCRs, then specify <code dir="ltr">FALSE</code> for the <code dir="ltr">include_dml</code> parameter and <code dir="ltr">TRUE</code> for the <code dir="ltr">include_ddl</code> parameter.</p>
<p><span class="bold">See Also:</span> <a href="t_lcr.htm#BABGGBHF">Chapter 275, &#34;Logical Change Record TYPEs&#34;</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t14" headers="r1c1-t14">
<p><code dir="ltr">source_root_name</code></p>
</td>
<td class="cellalignment4329" headers="r13c1-t14 r1c2-t14">
<p>The global name of the root in the source CDB. For example, <code dir="ltr">mycdb.example.com</code>.</p>
<p>If this parameter is <code dir="ltr">NULL</code>, then the global name of the root in the local CDB is used. If you are configuring downstream capture, then this parameter must be a non-<code dir="ltr">NULL</code> value, and it must specify the global name of the root in the remote source CDB. See <a class="olink XSTRM72988" href="../XSTRM/xstrm_gen_cncpt.htm#XSTRM72988"><span class="italic">Oracle Database XStream Guide</span></a> for more information about setting this parameter in a CDB.</p>
<p>If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify <code dir="ltr">DBS1</code> and the domain is <code dir="ltr">EXAMPLE.COM</code>, then the procedure specifies <code dir="ltr">DBS1.EXAMPLE.COM</code> automatically.</p>
<p><span class="bold">Note:</span> This parameter only applies to a CDB.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t14" headers="r1c1-t14">
<p><code dir="ltr">source_container_name</code></p>
</td>
<td class="cellalignment4329" headers="r14c1-t14 r1c2-t14">
<p>The short name of the source container. The container can be the root or a PDB. For example, <code dir="ltr">CDB$ROOT</code> or <code dir="ltr">hrpdb</code>. See <a class="olink XSTRM72988" href="../XSTRM/xstrm_gen_cncpt.htm#XSTRM72988"><span class="italic">Oracle Database XStream Guide</span></a> for more information about setting this parameter in a CDB.</p>
<p><span class="bold">Note:</span> This parameter only applies to a CDB.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16150"></a>Usage Notes</p>
<p>This procedure creates DML and DDL rules automatically based on <code dir="ltr">include_dml</code> and <code dir="ltr">include_ddl</code> parameter values, respectively. Each rule has a system-generated rule name that consists of the database name with a sequence number appended to it. The sequence number is used to avoid naming conflicts. If the database name plus the sequence number is too long, then the database name is truncated. A capture process or apply process uses the rules for filtering.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#CACCHJJC">&#34;Operational Notes&#34;</a></p>
</li>
<li>
<p><a href="#CACCADJE">&#34;Security Model&#34;</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16151"></a>Examples</p>
<p>The following is an example of a global rule condition created for DML changes:</p>
<pre dir="ltr">(:dml.is_null_tag() = &#39;Y&#39; and :dml.get_source_database_name() = &#39;DBS1.NET&#39; )
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS70188" class="refsect2"><a id="CACCCAJJ"></a>
<h3 class="refsect2">ADD_OUTBOUND Procedure<a id="sthref16152"></a></h3>
<p>This procedure creates an XStream outbound server that dequeues LCRs from the specified queue. The outbound server streams out the LCRs to an XStream client application.</p>
<p>This procedure creates neither a capture process nor a queue. To create an outbound server, a capture process, and a queue with one procedure call, use the <a href="#CACBHJDD">CREATE_OUTBOUND Procedure</a>.</p>
<p>To create the capture process individually, use one of the following packages:</p>
<ul>
<li>
<p><code dir="ltr">DBMS_XSTREAM_ADM</code></p>
</li>
<li>
<p><code dir="ltr">DBMS_CAPTURE_ADM</code></p>
</li>
</ul>
<p>To create a queue individually, use the <code dir="ltr">SET_UP_QUEUE</code> procedure in the <code dir="ltr">DBMS_XSTREAM_ADM</code> package.</p>
<p>This procedure is overloaded. One <code dir="ltr">table_names</code> parameter is type <code dir="ltr">VARCHAR2</code> and the other <code dir="ltr">table_names</code> parameter is type <code dir="ltr">DBMS_UTILITY.UNCL_ARRAY</code>. Also, one <code dir="ltr">schema_names</code> parameter is type <code dir="ltr">VARCHAR2</code> and the other <code dir="ltr">schema_names</code> parameter is type <code dir="ltr">DBMS_UTILITY.UNCL_ARRAY</code>. These parameters enable you to enter the lists of tables and schemas in different ways and are mutually exclusive.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>A client application can create multiple sessions. Each session can attach to only one outbound server, and each outbound server can serve only one session at a time. However, different client application sessions can connect to different outbound servers. See <a class="olink LNOCI" href="../LNOCI/toc.htm"><span class="italic">Oracle Call Interface Programmer&#39;s Guide</span></a> and <a class="olink STXJV" href="../STXJV/toc.htm"><span class="italic">Oracle Database XStream Java API Reference</span></a> for information about attaching to an outbound server.</p>
</li>
<li>
<p>This procedure enables the outbound server that it creates.</p>
</li>
<li>
<p>Starting with Oracle Database 11<span class="italic">g</span> Release 2 (11.2.0.2), the <code dir="ltr">capture_name</code>, <code dir="ltr">start_scn</code>, and <code dir="ltr">start_time</code> parameters are included in this procedure.</p>
</li>
</ul>
</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16153"></a>Syntax</p>
<pre dir="ltr">DBMS_XSTREAM_ADM.ADD_OUTBOUND(
   server_name            IN  VARCHAR2,
   queue_name             IN  VARCHAR2   DEFAULT NULL,
   source_database        IN  VARCHAR2   DEFAULT NULL,
   table_names            IN  DBMS_UTILITY.UNCL_ARRAY,
   schema_names           IN  DBMS_UTILITY.UNCL_ARRAY,
   connect_user           IN  VARCHAR2   DEFAULT NULL,
   comment                IN  VARCHAR2   DEFAULT NULL,
   capture_name           IN  VARCHAR2   DEFAULT NULL,
   start_scn              IN  NUMBER     DEFAULT NULL,
   start_time             IN  TIMESTAMP  DEFAULT NULL,
   include_dml            IN  BOOLEAN   DEFAULT TRUE,
   include_ddl            IN  BOOLEAN   DEFAULT FALSE,
   source_root_name       IN  VARCHAR2  DEFAULT NULL,
   source_container_name  IN  VARCHAR2  DEFAULT NULL);

DBMS_XSTREAM_ADM.ADD_OUTBOUND(
   server_name            IN  VARCHAR2,
   queue_name             IN  VARCHAR2   DEFAULT NULL,
   source_database        IN  VARCHAR2   DEFAULT NULL,
   table_names            IN  VARCHAR2   DEFAULT NULL,
   schema_names           IN  VARCHAR2   DEFAULT NULL,
   connect_user           IN  VARCHAR2   DEFAULT NULL,
   comment                IN  VARCHAR2   DEFAULT NULL,
   capture_name           IN  VARCHAR2   DEFAULT NULL,
   start_scn              IN  NUMBER     DEFAULT NULL,
   start_time             IN  TIMESTAMP  DEFAULT NULL,
   include_dml            IN  BOOLEAN   DEFAULT TRUE,
   include_ddl            IN  BOOLEAN   DEFAULT FALSE,
   source_root_name       IN  VARCHAR2  DEFAULT NULL,
   source_container_name  IN  VARCHAR2  DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16154"></a>Parameters</p>
<div id="ARPLS70189" class="tblformal">
<p class="titleintable"><a id="sthref16155"></a><a id="sthref16156"></a>Table 204-5 ADD_OUTBOUND Procedure Parameters</p>
<table class="cellalignment4330" title="ADD_OUTBOUND Procedure Parameters" summary="This table describes the parameters of DBMS_XSTREAM_ADM.ADD_OUTBOUND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t17">Parameter</th>
<th class="cellalignment4328" id="r1c2-t17">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t17" headers="r1c1-t17">
<p><code dir="ltr">server_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t17 r1c2-t17">
<p>The name of the outbound server being created. A <code dir="ltr">NULL</code> specification is not allowed. Do not specify an owner.</p>
<p>The specified name must not match the name of an existing outbound server, inbound server, apply process, or messaging client.</p>
<p><span class="bold">Note:</span> The <code dir="ltr">server_name</code> setting cannot exceed 30 bytes, and it cannot be altered after the outbound server is created.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t17" headers="r1c1-t17">
<p><code dir="ltr">queue_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t17 r1c2-t17">
<p>The name of the local queue from which the outbound server dequeues LCRs, specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">queue_name</span></code>. The current database must contain the queue, and the queue must be <code dir="ltr">ANYDATA</code> type.</p>
<p>For example, to specify a queue named <code dir="ltr">xstream_queue</code> in the <code dir="ltr">xstrmadmin</code> schema, enter <code dir="ltr">xstrmadmin.xstream_queue</code> for this parameter. If the schema is not specified, then the current user is the default.</p>
<p>If <code dir="ltr">NULL</code>, the procedure raises an error.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t17" headers="r1c1-t17">
<p><code dir="ltr">source_database</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t17 r1c2-t17">
<p>The global name of the source database. If <code dir="ltr">NULL</code>, then the procedure does not add a condition regarding the source database to the generated rules.</p>
<p>In a CDB, specify the global name of the container to which the rules pertain. The container can be the root or a PDB. For example, <code dir="ltr">mycdb.example.com</code> or <code dir="ltr">hrpdb.example.com</code>. See <a class="olink XSTRM72988" href="../XSTRM/xstrm_gen_cncpt.htm#XSTRM72988"><span class="italic">Oracle Database XStream Guide</span></a> for more information about setting this parameter in a CDB.</p>
<p>If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify <code dir="ltr">DBS1</code> and the domain is <code dir="ltr">.NET</code>, then the procedure specifies <code dir="ltr">DBS1.NET</code> automatically.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t17" headers="r1c1-t17">
<p><code dir="ltr">table_names</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t17 r1c2-t17">
<p>The tables for which data manipulation language (DML) and data definition language (DDL) changes are streamed out to the XStream client application. The tables can be specified in the following ways:</p>
<ul>
<li>
<p>Comma-delimited list of type <code dir="ltr">VARCHAR2</code>.</p>
</li>
<li>
<p>A PL/SQL associative array of type <code dir="ltr">DBMS_UTILITY.UNCL_ARRAY</code>, where each element is the name of a table. Specify the first table in position 1. The last position must be <code dir="ltr">NULL</code>.</p>
</li>
</ul>
<p>Each table should be specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">table_name</span></code>. For example, you can specify <code dir="ltr">hr.employees</code>. If the schema is not specified, then the current user is the default.</p>
<p><span class="bold">See Also:</span> <a href="#CACBEBBH">&#34;Usage Notes&#34;</a> for more information about this parameter</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t17" headers="r1c1-t17">
<p><code dir="ltr">schema_names</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t17 r1c2-t17">
<p>The schemas for which DML and DDL changes are streamed out to the XStream client application. The schemas can be specified in the following ways:</p>
<ul>
<li>
<p>Comma-delimited list of type <code dir="ltr">VARCHAR2</code>.</p>
</li>
<li>
<p>A PL/SQL associative array of type <code dir="ltr">DBMS_UTILITY.UNCL_ARRAY</code>, where each element is the name of a schema. Specify the first schema in position 1. The last position must be <code dir="ltr">NULL</code>.</p>
</li>
</ul>
<p><span class="bold">Note:</span> This procedure does not concatenate the <code dir="ltr">schema_names</code> parameter with the <code dir="ltr">table_names</code> parameter. To specify tables, enter fully qualified table names in the <code dir="ltr">table_names</code> parameter (<code dir="ltr"><span class="codeinlineitalic">schema_name.table_name</span></code>).</p>
<p><span class="bold">See Also:</span> <a href="#CACBEBBH">&#34;Usage Notes&#34;</a> for more information about this parameter</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t17" headers="r1c1-t17">
<p><code dir="ltr">connect_user</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t17 r1c2-t17">
<p>The user who can attach to the specified outbound server to retrieve the LCR stream. The client application must attach to the outbound server as the specified connect user. See <a href="#CACBHJDD">&#34;CREATE_OUTBOUND Procedure&#34;</a> for information about the privileges required by a connect user.</p>
<p>If <code dir="ltr">NULL</code>, then the current user is the default.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t17" headers="r1c1-t17">
<p><code dir="ltr">comment</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t17 r1c2-t17">
<p>An optional comment associated with the outbound server.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t17" headers="r1c1-t17">
<p><code dir="ltr">capture_name</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t17 r1c2-t17">
<p>The name of the capture process configured to capture changes for the outbound server. Do not specify an owner.</p>
<p>If the specified name matches the name of an existing capture process for another outbound server, then the procedure uses the existing capture process and adds the rules for capturing changes to the database to the positive capture process rule set.</p>
<p>If the specified name matches the name of an existing capture process for an apply process, then an error is raised.</p>
<p>If the specified name does not match the name of an existing capture process, then an error is raised.</p>
<p>If <code dir="ltr">NULL</code>, then the outbound server is created without a capture process.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t17" headers="r1c1-t17">
<p><code dir="ltr">start_scn</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t17 r1c2-t17">
<p>A valid system change number (SCN) for the database from which the capture process starts capturing changes.</p>
<p>If the <code dir="ltr">capture_name</code> parameter is <code dir="ltr">NULL</code>, then this parameter is ignored.</p>
<p>If <code dir="ltr">NULL</code> and the <code dir="ltr">capture_name</code> parameter is non-<code dir="ltr">NULL</code>, then the start SCN of the capture process is not changed.</p>
<p>An error is returned if an invalid SCN is specified.</p>
<p>The <code dir="ltr">start_scn</code> and <code dir="ltr">start_time</code> parameters are mutually exclusive.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t17" headers="r1c1-t17">
<p><code dir="ltr">start_time</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t17 r1c2-t17">
<p>A valid time from which the capture process starts capturing changes.</p>
<p>If the <code dir="ltr">capture_name</code> parameter is <code dir="ltr">NULL</code>, then this parameter is ignored.</p>
<p>If <code dir="ltr">NULL</code> and the <code dir="ltr">capture_name</code> parameter is non-<code dir="ltr">NULL</code>, then the start SCN of the capture process is not changed.</p>
<p>The <code dir="ltr">start_scn</code> and <code dir="ltr">start_time</code> parameters are mutually exclusive.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t17" headers="r1c1-t17">
<p><code dir="ltr">include_dml</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t17 r1c2-t17">
<p>If <code dir="ltr">TRUE</code>, then the procedure creates a rule for DML changes. If <code dir="ltr">FALSE</code>, then the procedure does not create a DML rule. <code dir="ltr">NULL</code> is not permitted.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t17" headers="r1c1-t17">
<p><code dir="ltr">include_ddl</code></p>
</td>
<td class="cellalignment4329" headers="r13c1-t17 r1c2-t17">
<p>If <code dir="ltr">TRUE</code>, then the procedure creates a rule for DDL changes. If <code dir="ltr">FALSE</code>, then the procedure does not create a DDL rule. <code dir="ltr">NULL</code> is not permitted.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t17" headers="r1c1-t17">
<p><code dir="ltr">source_root_name</code></p>
</td>
<td class="cellalignment4329" headers="r14c1-t17 r1c2-t17">
<p>The global name of the root in the source CDB. For example, <code dir="ltr">mycdb.example.com</code>.</p>
<p>If this parameter is <code dir="ltr">NULL</code>, then the global name of the root in the local CDB is used. If you are configuring downstream capture, then this parameter must be a non-<code dir="ltr">NULL</code> value, and it must specify the global name of the root in the remote source CDB. See <a class="olink XSTRM72988" href="../XSTRM/xstrm_gen_cncpt.htm#XSTRM72988"><span class="italic">Oracle Database XStream Guide</span></a> for more information about setting this parameter in a CDB.</p>
<p>If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify <code dir="ltr">DBS1</code> and the domain is <code dir="ltr">EXAMPLE.COM</code>, then the procedure specifies <code dir="ltr">DBS1.EXAMPLE.COM</code> automatically.</p>
<p><span class="bold">Note:</span> This parameter only applies to a CDB.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r15c1-t17" headers="r1c1-t17">
<p><code dir="ltr">source_container_name</code></p>
</td>
<td class="cellalignment4329" headers="r15c1-t17 r1c2-t17">
<p>The short name of the source container. The container can be the root or a PDB. For example, <code dir="ltr">CDB$ROOT</code> or <code dir="ltr">hrpdb</code>. See <a class="olink XSTRM72988" href="../XSTRM/xstrm_gen_cncpt.htm#XSTRM72988"><span class="italic">Oracle Database XStream Guide</span></a> for more information about setting this parameter in a CDB.</p>
<p><span class="bold">Note:</span> This parameter only applies to a CDB.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="CACBEBBH"></a>Usage Notes</p>
<p>The following list describes the behavior of the outbound server for various combinations of the <code dir="ltr">table_names</code> and <code dir="ltr">schema_names</code> parameters:</p>
<ul>
<li>
<p>If both the <code dir="ltr">table_names</code> and <code dir="ltr">schema_names</code> parameters are <code dir="ltr">NULL</code> or empty, then the outbound server streams all DML and DDL changes to the client application.</p>
<p>This procedure is overloaded. The <code dir="ltr">table_names</code> and <code dir="ltr">schema_names</code> parameters are defaulted to <code dir="ltr">NULL</code>. Do not specify <code dir="ltr">NULL</code> for both <code dir="ltr">table_names</code> and <code dir="ltr">schema_names</code> in the same call; otherwise, error <code dir="ltr">PLS-00307</code> is returned.</p>
</li>
<li>
<p>If both the <code dir="ltr">table_names</code> and <code dir="ltr">schema_names</code> parameters are specified, then the outbound server streams DML and DDL changes for the specified tables and schemas.</p>
</li>
<li>
<p>If the <code dir="ltr">table_names</code> parameter is specified and the <code dir="ltr">schema_names</code> parameter is <code dir="ltr">NULL</code> or empty, then the outbound server streams DML and DDL changes for the specified tables.</p>
</li>
<li>
<p>If the <code dir="ltr">table_names</code> parameter is <code dir="ltr">NULL</code> or empty and the <code dir="ltr">schema_names</code> parameter is specified, then the outbound server streams DML and DDL changes for the specified schemas.</p>
</li>
</ul>
<p>For the procedure that uses the <code dir="ltr">DBMS_UTILITY.UNCL_ARRAY</code> type for the <code dir="ltr">table_names</code> and <code dir="ltr">schema_names</code> parameters, both parameters must be specified. To specify only tables, the <code dir="ltr">schema_names</code> parameter must be specified and empty. To specify only schemas, the <code dir="ltr">table_names</code> parameter must be specified and empty.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
An empty array includes one <code dir="ltr">NULL</code> entry.</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS74033" class="refsect2"><a id="CHDFJBBC"></a>
<h3 class="refsect2">ADD_SCHEMA_PROPAGATION_RULES Procedure<a id="sthref16157"></a><a id="sthref16158"></a><a id="sthref16159"></a><a id="sthref16160"></a></h3>
<p>This procedure either adds schema rules to the positive rule set for a propagation, or adds schema rules to the negative rule set for a propagation, and creates the specified propagation if it does not exist.</p>
<p>This procedure is overloaded. One version of this procedure contains two <code dir="ltr">OUT</code> parameters, and the other does not.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16161"></a>Syntax</p>
<pre dir="ltr">DBMS_XSTREAM_ADM.ADD_SCHEMA_PROPAGATION_RULES(
   schema_name             IN   VARCHAR2,
   streams_name            IN   VARCHAR2  DEFAULT NULL,
   source_queue_name       IN   VARCHAR2,
   destination_queue_name  IN   VARCHAR2,
   include_dml             IN   BOOLEAN   DEFAULT TRUE,
   include_ddl             IN   BOOLEAN   DEFAULT FALSE,
   include_tagged_lcr      IN   BOOLEAN   DEFAULT FALSE,
   source_database         IN   VARCHAR2  DEFAULT NULL,
   dml_rule_name           OUT  VARCHAR2,
   ddl_rule_name           OUT  VARCHAR2,
   inclusion_rule          IN   BOOLEAN   DEFAULT TRUE,
   and_condition           IN   VARCHAR2  DEFAULT NULL,
   queue_to_queue          IN   BOOLEAN   DEFAULT NULL);

DBMS_XSTREAM_ADM.ADD_SCHEMA_PROPAGATION_RULES(
   schema_name             IN   VARCHAR2,
   streams_name            IN   VARCHAR2  DEFAULT NULL,
   source_queue_name       IN   VARCHAR2,
   destination_queue_name  IN   VARCHAR2,
   include_dml             IN   BOOLEAN   DEFAULT TRUE,
   include_ddl             IN   BOOLEAN   DEFAULT FALSE,
   include_tagged_lcr      IN   BOOLEAN   DEFAULT FALSE,
   source_database         IN   VARCHAR2  DEFAULT NULL,
   inclusion_rule          IN   BOOLEAN   DEFAULT TRUE,
   and_condition           IN   VARCHAR2  DEFAULT NULL,
   queue_to_queue          IN   BOOLEAN   DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16162"></a>Parameters</p>
<div id="ARPLS74034" class="tblformal">
<p class="titleintable"><a id="sthref16163"></a><a id="sthref16164"></a>Table 204-6 ADD_SCHEMA_PROPAGATION_RULES Procedure Parameters</p>
<table class="cellalignment4330" title="ADD_SCHEMA_PROPAGATION_RULES Procedure Parameters " summary="This table describes the Parameters of DBMS_XSTREAM_ADM.ADD_SCHEMA_PROPAGATION_RULES subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t19">Parameter</th>
<th class="cellalignment4328" id="r1c2-t19">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t19" headers="r1c1-t19">
<p><code dir="ltr">schema_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t19 r1c2-t19">
<p>The name of the schema. For example, <code dir="ltr">hr</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t19" headers="r1c1-t19">
<p><code dir="ltr">streams_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t19 r1c2-t19">
<p>The name of the propagation. Do not specify an owner.</p>
<p>If the specified propagation does not exist, then the procedure creates it automatically.</p>
<p>If <code dir="ltr">NULL</code> and a propagation exists for the same source queue and destination queue (including database link), then the procedure uses this propagation.</p>
<p>If <code dir="ltr">NULL</code> and no propagation exists for the same source queue and destination queue (including database link), then the procedure creates a propagation automatically with a system-generated name.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t19" headers="r1c1-t19">
<p><code dir="ltr">source_queue_name</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t19 r1c2-t19">
<p>The name of the source queue, specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">queue_name</span></code>. The current database must contain the source queue, and the queue must be <code dir="ltr">ANYDATA</code> type.</p>
<p>For example, to specify a source queue named <code dir="ltr">streams_queue</code> in the <code dir="ltr">strmadmin</code> schema, enter <code dir="ltr">strmadmin.streams_queue</code> for this parameter.</p>
<p>If the schema is not specified, then the current user is the default.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t19" headers="r1c1-t19">
<p><code dir="ltr">destination_queue_name</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t19 r1c2-t19">
<p>The name of the destination queue, including a database link, specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">queue_name</span></code><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">@dblink_name</span></code><code dir="ltr">]</code>, if the destination queue is in a remote database. The queue must be <code dir="ltr">ANYDATA</code> type.</p>
<p>For example, to specify a destination queue named <code dir="ltr">streams_queue</code> in the <code dir="ltr">strmadmin</code> schema and use a database link named <code dir="ltr">dbs2.net</code>, enter <code dir="ltr">strmadmin.streams_queue@dbs2.net</code> for this parameter.</p>
<p>If the schema is not specified, then the current user is the default.</p>
<p>If the database link is omitted, then the procedure uses the global name of the current database, and the source queue and destination queue must be in the same database.</p>
<p><span class="bold">Note:</span> Connection qualifiers are not allowed.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t19" headers="r1c1-t19">
<p><code dir="ltr">include_dml</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t19 r1c2-t19">
<p>If <code dir="ltr">TRUE</code>, then the procedure creates a rule for DML changes. If <code dir="ltr">FALSE</code>, then the procedure does not create a DML rule. <code dir="ltr">NULL</code> is not permitted.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t19" headers="r1c1-t19">
<p><code dir="ltr">include_ddl</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t19 r1c2-t19">
<p>If <code dir="ltr">TRUE</code>, then the procedure creates a rule for DDL changes. If <code dir="ltr">FALSE</code>, then the procedure does not create a DDL rule. <code dir="ltr">NULL</code> is not permitted.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t19" headers="r1c1-t19">
<p><code dir="ltr">include_tagged_lcr</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t19 r1c2-t19">
<p>If <code dir="ltr">TRUE</code>, then the procedure does not add a condition regarding Oracle Streams tags to the generated rules. Therefore, these rules can evaluate to <code dir="ltr">TRUE</code> regardless of whether a logical change record (LCR) has a non-<code dir="ltr">NULL</code> tag. If the rules are added to the positive rule set for the propagation, then an LCR is always considered for propagation, regardless of whether it has a non-<code dir="ltr">NULL</code> tag. If the rules are added to a positive rule set, then setting this parameter to <code dir="ltr">TRUE</code> is appropriate for a full (for example, standby) copy of a database. If the rules are added to the negative rule set for the propagation, then whether an LCR is discarded does not depend on the tag for the LCR.</p>
<p>If <code dir="ltr">FALSE</code>, then the procedure adds a condition to each generated rule that causes the rule to evaluate to <code dir="ltr">TRUE</code> only if an LCR has a <code dir="ltr">NULL</code> Oracle Streams tag. If the rules are added to the positive rule set for the propagation, then an LCR is considered for propagation only when the LCR contains a <code dir="ltr">NULL</code> tag. If the rules are added to a positive rule set, then setting this parameter to <code dir="ltr">FALSE</code> might be appropriate in update-anywhere configurations to avoid sending a change back to its source database. If the rules are added to the negative rule set for the propagation, then an LCR can be discarded only if it has a <code dir="ltr">NULL</code> tag.</p>
<p>Usually, specify <code dir="ltr">TRUE</code> for this parameter if the <code dir="ltr">inclusion_rule</code> parameter is set to <code dir="ltr">FALSE</code>.</p>
<p><span class="bold">See Also:</span> <a class="olink STREP008" href="../STREP/rep_tags.htm#STREP008"><span class="italic">Oracle Streams Replication Administrator&#39;s Guide</span></a> for more information about tags</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t19" headers="r1c1-t19">
<p><code dir="ltr">source_database</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t19 r1c2-t19">
<p>The global name of the source database. The source database is where the change originated. If <code dir="ltr">NULL</code>, then the procedure does not add a condition regarding the source database to the generated rules.</p>
<p>If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify <code dir="ltr">DBS1</code> and the domain is <code dir="ltr">.NET</code>, then the procedure specifies <code dir="ltr">DBS1.NET</code> automatically.</p>
<p>Oracle recommends that you specify a source database for propagation rules.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t19" headers="r1c1-t19">
<p><code dir="ltr">dml_rule_name</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t19 r1c2-t19">
<p>If <code dir="ltr">include_dml</code> is <code dir="ltr">TRUE</code>, then this parameter contains the DML rule name.</p>
<p>If <code dir="ltr">include_dml</code> is <code dir="ltr">FALSE</code>, then this parameter contains a <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t19" headers="r1c1-t19">
<p><code dir="ltr">ddl_rule_name</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t19 r1c2-t19">
<p>If <code dir="ltr">include_ddl</code> is <code dir="ltr">TRUE</code>, then this parameter contains the DDL rule name.</p>
<p>If <code dir="ltr">include_ddl</code> is <code dir="ltr">FALSE</code>, then this parameter contains a <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t19" headers="r1c1-t19">
<p><code dir="ltr">inclusion_rule</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t19 r1c2-t19">
<p>If <code dir="ltr">inclusion_rule</code> is <code dir="ltr">TRUE</code>, then the procedure adds the rules to the positive rule set for the propagation.</p>
<p>If <code dir="ltr">inclusion_rule</code> is <code dir="ltr">FALSE</code>, then the procedure adds the rules to the negative rule set for the propagation.</p>
<p>In either case, the system creates the rule set if it does not exist.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t19" headers="r1c1-t19">
<p><code dir="ltr">and_condition</code></p>
</td>
<td class="cellalignment4329" headers="r13c1-t19 r1c2-t19">
<p>If non-<code dir="ltr">NULL</code>, appends the specified condition to the system-generated rule condition using an <code dir="ltr">AND</code> clause in the following way:</p>
<pre dir="ltr">(<span class="italic">system_condition</span>) AND (<span class="italic">and_condition</span>)
</pre>
<p>The variable in the specified condition must be <code dir="ltr">:lcr</code>. For example, to specify that the schema rules generated by the procedure evaluate to <code dir="ltr">TRUE</code> only if the Oracle Streams tag is the hexadecimal equivalent of <code dir="ltr">&#39;02&#39;</code>, specify the following condition:</p>
<pre dir="ltr">:lcr.get_tag() = HEXTORAW(&#39;&#39;02&#39;&#39;)
</pre>
<p>The <code dir="ltr">:lcr</code> in the specified condition is converted to <code dir="ltr">:dml</code> or <code dir="ltr">:ddl</code>, depending on the rule that is being generated. If you are specifying an LCR member subprogram that is dependent on the LCR type (row or DDL), then make sure this procedure only generates the appropriate rule.</p>
<p>Specifically, if you specify an LCR member subprogram that is valid only for row LCRs, then specify <code dir="ltr">TRUE</code> for the <code dir="ltr">include_dml</code> parameter and <code dir="ltr">FALSE</code> for the <code dir="ltr">include_ddl</code> parameter. If you specify an LCR member subprogram that is valid only for DDL LCRs, then specify <code dir="ltr">FALSE</code> for the <code dir="ltr">include_dml</code> parameter and <code dir="ltr">TRUE</code> for the <code dir="ltr">include_ddl</code> parameter.</p>
<p><span class="bold">See Also:</span> <a href="t_lcr.htm#BABGGBHF">Chapter 275, &#34;Logical Change Record TYPEs&#34;</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t19" headers="r1c1-t19">
<p><code dir="ltr">queue_to_queue</code></p>
</td>
<td class="cellalignment4329" headers="r14c1-t19 r1c2-t19">
<p>If <code dir="ltr">TRUE</code> or <code dir="ltr">NULL</code>, then a new propagation created by this procedure is a queue to queue propagation. A queue-to-queue propagation always has its own propagation job and uses a service for automatic failover when the destination queue is a buffered queue in an Oracle Real Application Clusters (Oracle RAC) database.</p>
<p>If <code dir="ltr">FALSE</code>, then a new propagation created by this procedure is a queue-to-dblink propagation. A queue-to-dblink propagation can share a propagation job with other propagations that use the same database link and does not support automatic failover in an Oracle RAC environment.</p>
<p>This procedure cannot change the queue to queue property of an exiting propagation. If the specified propagation exists, then the procedure behaves in the following way for each setting:</p>
<ul>
<li>
<p>If <code dir="ltr">TRUE</code> and the specified propagation is not a queue to queue propagation, then the procedure raises an error.</p>
</li>
<li>
<p>If <code dir="ltr">FALSE</code> and the specified propagation is a queue to queue propagation, then the procedure raises an error.</p>
</li>
<li>
<p>If <code dir="ltr">NULL</code>, then the procedure does not change the queue to queue property of the propagation.</p>
</li>
</ul>
<p><span class="bold">See Also:</span> <a class="olink STRMS155" href="../STRMS/strms_prop.htm#STRMS155"><span class="italic">Oracle Streams Concepts and Administration</span></a> for more information about queue-to-queue propagations</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16165"></a>Usage Notes</p>
<p>This procedure configures propagation using the current user. Only one propagation is allowed between a particular source queue and destination queue.</p>
<p>This procedure creates DML and DDL rules automatically based on <code dir="ltr">include_dml</code> and <code dir="ltr">include_ddl</code> parameter values, respectively. Each rule has a system-generated rule name that consists of the schema name with a sequence number appended to it. The sequence number is used to avoid naming conflicts. If the schema name plus the sequence number is too long, then the schema name is truncated. A propagation uses the rules for filtering.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16166"></a>Examples</p>
<p>The following is an example of a schema rule condition created for DML changes:</p>
<pre dir="ltr">((:dml.get_object_owner() = &#39;HR&#39;) and :dml.is_null_tag() = &#39;Y&#39; 
and :dml.get_source_database_name() = &#39;DBS1.NET&#39; )
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS74035" class="refsect2"><a id="CHDEHIHG"></a>
<h3 class="refsect2">ADD_SCHEMA_RULES Procedure<a id="sthref16167"></a><a id="sthref16168"></a><a id="sthref16169"></a><a id="sthref16170"></a><a id="sthref16171"></a><a id="sthref16172"></a><a id="sthref16173"></a></h3>
<p>This procedures adds rules to a rule set of one of the following types of XStream clients:</p>
<ul>
<li>
<p>When the <code dir="ltr">streams_type</code> parameter is set to <code dir="ltr">capture</code>, this procedure adds capture process rules for capturing changes to a specified schema.</p>
<p>This procedure creates the specified capture process if it does not exist.</p>
</li>
<li>
<p>When the <code dir="ltr">streams_type</code> parameter is set to <code dir="ltr">apply</code> and the <code dir="ltr">streams_name</code> parameter specifies the name of an apply process, outbound server, or inbound server, this procedure adds apply rules for applying logical change records (LCRs) that contain changes to a specified schema. The rules can specify that the LCRs must be from a particular source database.</p>
<p>This procedure creates an apply process if no apply process, outbound server, or inbound server exists with the specified <code dir="ltr">streams_name</code>. This procedure can add rules to an outbound server or inbound server, but it cannot create an outbound server or inbound server.</p>
</li>
</ul>
<p>This procedure is overloaded. One version of this procedure contains two <code dir="ltr">OUT</code> parameters, and the other does not.</p>
<div class="infobox-note">
<p class="notep1">Caution:</p>
If you add schema rules to the positive rule set for a capture process, then make sure you add rules to the negative capture process rule set to exclude database objects in the schema that are not support by Oracle Streams. Query the <code dir="ltr">DBA_STREAMS_UNSUPPORTED</code> data dictionary view to determine which database objects are not supported by Oracle Streams. If unsupported database objects are not excluded, then capture errors will result.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16174"></a>Syntax</p>
<pre dir="ltr">DBMS_XSTREAM_ADM.ADD_SCHEMA_RULES(
   schema_name            IN   VARCHAR2,
   streams_type           IN   VARCHAR2,
   streams_name           IN   VARCHAR2  DEFAULT NULL,
   queue_name             IN   VARCHAR2  DEFAULT &#39;streams_queue&#39;,
   include_dml            IN   BOOLEAN   DEFAULT TRUE,
   include_ddl            IN   BOOLEAN   DEFAULT FALSE,
   include_tagged_lcr     IN   BOOLEAN   DEFAULT FALSE,
   source_database        IN   VARCHAR2  DEFAULT NULL,
   dml_rule_name          OUT  VARCHAR2,
   ddl_rule_name          OUT  VARCHAR2,
   inclusion_rule         IN   BOOLEAN   DEFAULT TRUE,
   and_condition          IN   VARCHAR2  DEFAULT NULL,
   source_root_name       IN  VARCHAR2  DEFAULT NULL,
   source_container_name  IN  VARCHAR2  DEFAULT NULL);

DBMS_XSTREAM_ADM.ADD_SCHEMA_RULES(
   schema_name            IN   VARCHAR2,
   streams_type           IN   VARCHAR2,
   streams_name           IN   VARCHAR2  DEFAULT NULL,
   queue_name             IN   VARCHAR2  DEFAULT &#39;streams_queue&#39;,
   include_dml            IN   BOOLEAN   DEFAULT TRUE,
   include_ddl            IN   BOOLEAN   DEFAULT FALSE,
   include_tagged_lcr     IN   BOOLEAN   DEFAULT FALSE,
   source_database        IN   VARCHAR2  DEFAULT NULL,
   inclusion_rule         IN   BOOLEAN   DEFAULT TRUE,
   and_condition          IN   VARCHAR2  DEFAULT NULL,
   source_root_name       IN  VARCHAR2  DEFAULT NULL,
   source_container_name  IN  VARCHAR2  DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16175"></a>Parameters</p>
<div id="ARPLS74036" class="tblformal">
<p class="titleintable"><a id="sthref16176"></a><a id="sthref16177"></a>Table 204-7 ADD_SCHEMA_RULES Procedure Parameters</p>
<table class="cellalignment4330" title="ADD_SCHEMA_RULES Procedure Parameters" summary="This table describes the Parameters of DBMS_XSTREAM_ADM.ADD_SCHEMA_RULES subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t21">Parameter</th>
<th class="cellalignment4328" id="r1c2-t21">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t21" headers="r1c1-t21">
<p><code dir="ltr">schema_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t21 r1c2-t21">
<p>The name of the schema. For example, <code dir="ltr">hr</code>.</p>
<p>You can specify a schema that does not yet exist, because Oracle Streams does not validate the existence of the schema.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t21" headers="r1c1-t21">
<p><code dir="ltr">streams_type</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t21 r1c2-t21">
<p>The type of XStream client:</p>
<ul>
<li>
<p>Specify <code dir="ltr">capture</code> for a capture process.</p>
</li>
<li>
<p>Specify <code dir="ltr">apply</code> for an apply process.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t21" headers="r1c1-t21">
<p><code dir="ltr">streams_name</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t21 r1c2-t21">
<p>The name of the capture process or apply process. Do not specify an owner.</p>
<p>If <code dir="ltr">NULL</code>, if <code dir="ltr">streams_type</code> is <code dir="ltr">capture</code>, and if one relevant capture process for the queue exists, then the relevant XStream client is used. If no relevant XStream client exists for the queue, then an XStream client is created automatically with a system-generated name. If <code dir="ltr">NULL</code> and multiple XStream clients of the specified <code dir="ltr">streams_type</code> for the queue exist, then the procedure raises an error.</p>
<p>If <code dir="ltr">NULL</code>, if <code dir="ltr">streams_type</code> is <code dir="ltr">apply</code>, and if one relevant apply process exists, then the procedure uses the relevant apply process. The relevant apply process is identified in one of the following ways:</p>
<ul>
<li>
<p>If one existing apply process has the source database specified in <code dir="ltr">source_database</code> and uses the queue specified in <code dir="ltr">queue_name</code>, then the procedure uses this apply process.</p>
</li>
<li>
<p>If <code dir="ltr">source_database</code> is <code dir="ltr">NULL</code> and one existing apply process is using the queue specified in <code dir="ltr">queue_name</code>, then the procedure uses this apply process.</p>
</li>
</ul>
<p>If <code dir="ltr">NULL</code> and no relevant apply process exists, then the procedure creates an apply process automatically with a system-generated name.</p>
<p>If <code dir="ltr">NULL</code> and multiple relevant apply processes exist, then the procedure raises an error.</p>
<p>Each apply process must have a unique name.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t21" headers="r1c1-t21">
<p><code dir="ltr">queue_name</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t21 r1c2-t21">
<p>The name of the local queue, specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">queue_name</span></code>. The current database must contain the queue, and the queue must be <code dir="ltr">ANYDATA</code> type.</p>
<p>For example, to specify a queue named <code dir="ltr">streams_queue</code> in the <code dir="ltr">strmadmin</code> schema, enter <code dir="ltr">strmadmin.streams_queue</code> for this parameter. If the schema is not specified, then the current user is the default.</p>
<p>For capture process rules, this is the queue into which a capture process enqueues LCRs. For outbound server rules, this is the queue from which the outbound server dequeues LCRs. For inbound server rules, this is the queue into which an inbound server enqueues error transactions.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t21" headers="r1c1-t21">
<p><code dir="ltr">include_dml</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t21 r1c2-t21">
<p>If <code dir="ltr">TRUE</code>, then the procedure creates a rule for DML changes. If <code dir="ltr">FALSE</code>, then the procedure does not create a DML rule. <code dir="ltr">NULL</code> is not permitted.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t21" headers="r1c1-t21">
<p><code dir="ltr">include_ddl</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t21 r1c2-t21">
<p>If <code dir="ltr">TRUE</code>, then the procedure creates a rule for DDL changes. If <code dir="ltr">FALSE</code>, then the procedure does not create a DDL rule. <code dir="ltr">NULL</code> is not permitted.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t21" headers="r1c1-t21">
<p><code dir="ltr">include_tagged_lcr</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t21 r1c2-t21">
<p>If <code dir="ltr">TRUE</code>, then the procedure does not add a condition regarding Oracle Streams tags to the generated rules. Therefore, these rules can evaluate to <code dir="ltr">TRUE</code> regardless of whether a redo entry or LCR has a non-<code dir="ltr">NULL</code> tag. If the rules are added to the positive rule set for the process, then a redo entry is always considered for capture, and an LCR is always considered for apply, regardless of whether the redo entry or LCR has a non-<code dir="ltr">NULL</code> tag. If the rules are added to a positive rule set, then setting this parameter to <code dir="ltr">TRUE</code> is appropriate for a full (for example, standby) copy of a database. If the rules are added to the negative rule set for the process, then whether a redo entry or LCR is discarded does not depend on the tag.</p>
<p>If <code dir="ltr">FALSE</code>, then the procedure adds a condition to each generated rule that causes the rule to evaluate to <code dir="ltr">TRUE</code> only if a redo entry or LCR has a <code dir="ltr">NULL</code> Oracle Streams tag. If the rules are added to the positive rule set for the process, then a redo entry is considered for capture, and an LCR is considered for apply, only when the redo entry or LCR contains a <code dir="ltr">NULL</code> tag. If the rules are added to a positive rule set, then setting this parameter to <code dir="ltr">FALSE</code> might be appropriate in update-anywhere configurations to avoid sending a change back to its source database. If the rules are added to the negative rule set for the process, then a redo entry or LCR can be discarded only if it has a <code dir="ltr">NULL</code> tag.</p>
<p>Usually, specify <code dir="ltr">TRUE</code> for this parameter if the <code dir="ltr">inclusion_rule</code> parameter is set to <code dir="ltr">FALSE</code>.</p>
<p><span class="bold">See Also:</span> <a class="olink STREP008" href="../STREP/rep_tags.htm#STREP008"><span class="italic">Oracle Streams Replication Administrator&#39;s Guide</span></a> for more information about tags</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t21" headers="r1c1-t21">
<p><code dir="ltr">source_database</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t21 r1c2-t21">
<p>The global name of the source database. If <code dir="ltr">NULL</code>, then the procedure does not add a condition regarding the source database to the generated rules.</p>
<p>For capture process rules, specify <code dir="ltr">NULL</code> or the global name of the local database if you are creating a capture process locally at the source database. If you are adding rules to a downstream capture process rule set at a downstream database, then specify the source database of the changes that will be captured.</p>
<p>For apply process rules, specify the source database of the changes that will be applied by the apply process. The source database is the database where the changes originated. If an apply process applies captured LCRs, then the apply process can apply LCRs from only one capture process at one source database.</p>
<p>In a CDB, specify the global name of the container to which the rules pertain. The container can be the root or a PDB. For example, <code dir="ltr">mycdb.example.com</code> or <code dir="ltr">hrpdb.example.com</code>. See <a class="olink XSTRM72988" href="../XSTRM/xstrm_gen_cncpt.htm#XSTRM72988"><span class="italic">Oracle Database XStream Guide</span></a> for more information about setting this parameter in a CDB.</p>
<p>If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify <code dir="ltr">DBS1</code> and the domain is <code dir="ltr">.NET</code>, then the procedure specifies <code dir="ltr">DBS1.NET</code> automatically.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t21" headers="r1c1-t21">
<p><code dir="ltr">dml_rule_name</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t21 r1c2-t21">
<p>If <code dir="ltr">include_dml</code> is <code dir="ltr">TRUE</code>, then this parameter contains the DML rule name.</p>
<p>If <code dir="ltr">include_dml</code> is <code dir="ltr">FALSE</code>, then this parameter contains a <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t21" headers="r1c1-t21">
<p><code dir="ltr">ddl_rule_name</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t21 r1c2-t21">
<p>If <code dir="ltr">include_ddl</code> is <code dir="ltr">TRUE</code>, then this parameter contains the DDL rule name.</p>
<p>If <code dir="ltr">include_ddl</code> is <code dir="ltr">FALSE</code>, then this parameter contains a <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t21" headers="r1c1-t21">
<p><code dir="ltr">inclusion_rule</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t21 r1c2-t21">
<p>If <code dir="ltr">inclusion_rule</code> is <code dir="ltr">TRUE</code>, then the procedure adds the rules to the positive rule set for the XStream client.</p>
<p>If <code dir="ltr">inclusion_rule</code> is <code dir="ltr">FALSE</code>, then the procedure adds the rules to the negative rule set for the XStream client.</p>
<p>In either case, the system creates the rule set if it does not exist.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t21" headers="r1c1-t21">
<p><code dir="ltr">and_condition</code></p>
</td>
<td class="cellalignment4329" headers="r13c1-t21 r1c2-t21">
<p>If non-<code dir="ltr">NULL</code>, appends the specified condition to the system-generated rule condition using an <code dir="ltr">AND</code> clause in the following way:</p>
<pre dir="ltr">(<span class="italic">system_condition</span>) AND (<span class="italic">and_condition</span>)
</pre>
<p>The variable in the specified condition must be <code dir="ltr">:lcr</code>. For example, to specify that the schema rules generated by the procedure evaluate to <code dir="ltr">TRUE</code> only if the Oracle Streams tag is the hexadecimal equivalent of <code dir="ltr">&#39;02&#39;</code>, specify the following condition:</p>
<pre dir="ltr">:lcr.get_tag() = HEXTORAW(&#39;&#39;02&#39;&#39;)
</pre>
<p>The <code dir="ltr">:lcr</code> in the specified condition is converted to <code dir="ltr">:dml</code> or <code dir="ltr">:ddl</code>, depending on the rule that is being generated. If you are specifying an LCR member subprogram that is dependent on the LCR type (row or DDL), then make sure this procedure only generates the appropriate rule.</p>
<p>Specifically, if you specify an LCR member subprogram that is valid only for row LCRs, then specify <code dir="ltr">TRUE</code> for the <code dir="ltr">include_dml</code> parameter and <code dir="ltr">FALSE</code> for the <code dir="ltr">include_ddl</code> parameter. If you specify an LCR member subprogram that is valid only for DDL LCRs, then specify <code dir="ltr">FALSE</code> for the <code dir="ltr">include_dml</code> parameter and <code dir="ltr">TRUE</code> for the <code dir="ltr">include_ddl</code> parameter.</p>
<p><span class="bold">See Also:</span> <a href="t_lcr.htm#BABGGBHF">Chapter 275, &#34;Logical Change Record TYPEs&#34;</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t21" headers="r1c1-t21">
<p><code dir="ltr">source_root_name</code></p>
</td>
<td class="cellalignment4329" headers="r14c1-t21 r1c2-t21">
<p>The global name of the root in the source CDB. For example, <code dir="ltr">mycdb.example.com</code>.</p>
<p>If this parameter is <code dir="ltr">NULL</code>, then the global name of the root in the local CDB is used. If you are configuring downstream capture, then this parameter must be a non-<code dir="ltr">NULL</code> value, and it must specify the global name of the root in the remote source CDB. See <a class="olink XSTRM72988" href="../XSTRM/xstrm_gen_cncpt.htm#XSTRM72988"><span class="italic">Oracle Database XStream Guide</span></a> for more information about setting this parameter in a CDB.</p>
<p>If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify <code dir="ltr">DBS1</code> and the domain is <code dir="ltr">EXAMPLE.COM</code>, then the procedure specifies <code dir="ltr">DBS1.EXAMPLE.COM</code> automatically.</p>
<p><span class="bold">Note:</span> This parameter only applies to a CDB.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r15c1-t21" headers="r1c1-t21">
<p><code dir="ltr">source_container_name</code></p>
</td>
<td class="cellalignment4329" headers="r15c1-t21 r1c2-t21">
<p>The short name of the source container. The container can be the root or a PDB. For example, <code dir="ltr">CDB$ROOT</code> or <code dir="ltr">hrpdb</code>. See <a class="olink XSTRM72988" href="../XSTRM/xstrm_gen_cncpt.htm#XSTRM72988"><span class="italic">Oracle Database XStream Guide</span></a> for more information about setting this parameter in a CDB.</p>
<p><span class="bold">Note:</span> This parameter only applies to a CDB.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16178"></a>Usage Notes</p>
<p>This procedure creates DML and DDL rules automatically based on <code dir="ltr">include_dml</code> and <code dir="ltr">include_ddl</code> parameter values, respectively. Each rule has a system-generated rule name that consists of the schema name with a sequence number appended to it. The sequence number is used to avoid naming conflicts. If the schema name plus the sequence number is too long, then the schema name is truncated. A capture process or apply process uses the rules for filtering.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#CACCHJJC">&#34;Operational Notes&#34;</a></p>
</li>
<li>
<p><a href="#CACCADJE">&#34;Security Model&#34;</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16179"></a>Examples</p>
<p>The following is an example of a schema rule condition created for DML changes:</p>
<pre dir="ltr">((:dml.get_object_owner() = &#39;HR&#39;) and :dml.is_null_tag() = &#39;Y&#39; 
and :dml.get_source_database_name() = &#39;DBS1.NET&#39; )
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS70190" class="refsect2"><a id="CACFEEIC"></a>
<h3 class="refsect2">ADD_SUBSET_OUTBOUND_RULES Procedure<a id="sthref16180"></a></h3>
<p>This procedure adds subset rules to an outbound server configuration. Subset rules instruct the outbound server to stream out a subset of the changes to the specified tables. Outbound servers can stream out a subset of both rows and columns.</p>
<p>This procedure is overloaded. One <code dir="ltr">column_list</code> parameter is type <code dir="ltr">VARCHAR2</code> and the other <code dir="ltr">column_list</code> parameter is type <code dir="ltr">DBMS_UTILITY.LNAME_ARRAY</code>. These parameters enable you to enter the list of columns in different ways and are mutually exclusive.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This procedure does not add rules to the outbound server&#39;s capture process.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16181"></a>Syntax</p>
<pre dir="ltr">DBMS_XSTREAM_ADM.ADD_SUBSET_OUTBOUND_RULES(
   server_name      IN VARCHAR2,
   table_name       IN VARCHAR2,
   condition        IN VARCHAR2  DEFAULT NULL,
   column_list      IN DBMS_UTILITY.LNAME_ARRAY,
   keep             IN BOOLEAN   DEFAULT TRUE,
   source_database  IN VARCHAR2  DEFAULT NULL);

DBMS_XSTREAM_ADM.ADD_SUBSET_OUTBOUND_RULES(
   server_name      IN VARCHAR2,
   table_name       IN VARCHAR2,
   condition        IN VARCHAR2  DEFAULT NULL,
   column_list      IN VARCHAR2  DEFAULT NULL,
   keep             IN BOOLEAN   DEFAULT TRUE,
   source_database  IN VARCHAR2  DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16182"></a>Parameters</p>
<div id="ARPLS70191" class="tblformal">
<p class="titleintable"><a id="sthref16183"></a><a id="sthref16184"></a>Table 204-8 ADD_SUBSET_OUTBOUND_RULES Procedure Parameters</p>
<table class="cellalignment4330" title="ADD_SUBSET_OUTBOUND_RULES Procedure Parameters" summary="This table describes the parameters of DBMS_XSTREAM_ADM.ADD_SUBSET_OUTBOUND_RULES subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t24">Parameter</th>
<th class="cellalignment4328" id="r1c2-t24">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t24" headers="r1c1-t24">
<p><code dir="ltr">server_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t24 r1c2-t24">
<p>The name of the outbound server to which rules are being added. Specify an existing outbound server. Do not specify an owner.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t24" headers="r1c1-t24">
<p><code dir="ltr">table_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t24 r1c2-t24">
<p>The name of the table specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">object_name</span></code>. For example, you can specify <code dir="ltr">hr.employees</code>. If the schema is not specified, then the current user is the default.</p>
<p>If the outbound server configuration uses a local capture process, then the table must exist at the local source database. If the outbound server configuration uses a downstream capture process, then the table must exist at both the source database and at the downstream capture database.</p>
<p>The specified table cannot have any LOB, <code dir="ltr">LONG</code>, or <code dir="ltr">LONG</code> <code dir="ltr">RAW</code> columns currently or in the future.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t24" headers="r1c1-t24">
<p><code dir="ltr">condition</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t24 r1c2-t24">
<p>The subset condition. Specify this condition similar to the way you specify conditions in a <code dir="ltr">WHERE</code> clause in SQL.</p>
<p>For example, to specify rows in the <code dir="ltr">hr.employees</code> table where the <code dir="ltr">salary</code> is greater than <code dir="ltr">4000</code> and the <code dir="ltr">job_id</code> is <code dir="ltr">SA_MAN</code>, enter the following as the condition:</p>
<p><code dir="ltr">&#39; salary &gt; 4000 and job_id = &#39;&#39;SA_MAN&#39;&#39; &#39;</code></p>
<p>If <code dir="ltr">NULL</code>, then the procedure raises an error.</p>
<p><span class="bold">Note:</span> The quotation marks in the preceding example are all single quotation marks.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t24" headers="r1c1-t24">
<p><code dir="ltr">column_list</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t24 r1c2-t24">
<p>The list of columns either to include in the outbound server configuration or to exclude from the outbound server configuration. Whether the columns are included or excluded depends on the setting for the <code dir="ltr">keep</code> parameter.</p>
<p>The columns can be specified in the following ways:</p>
<ul>
<li>
<p>Comma-delimited list of type <code dir="ltr">VARCHAR2</code>.</p>
</li>
<li>
<p>A PL/SQL associative array of type <code dir="ltr">DBMS_UTILITY.LNAME_ARRAY</code>, where each element is the name of a column. Specify the first column in position 1. The last position must be <code dir="ltr">NULL</code>.</p>
</li>
</ul>
<p>To include or exclude all of the columns in a table, specify each column in the table in the list or array.</p>
<p>If <code dir="ltr">NULL</code>, then the procedure raises an error.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t24" headers="r1c1-t24">
<p><code dir="ltr">keep</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t24 r1c2-t24">
<p>If <code dir="ltr">TRUE</code>, then the columns specified in the <code dir="ltr">column_list</code> parameter are kept as part of the outbound server configuration. Therefore, changes to these columns that satisfy the condition in the <code dir="ltr">condition</code> parameter are streamed to the outbound server&#39;s client application.</p>
<p>If <code dir="ltr">FALSE</code>, then the columns specified in the <code dir="ltr">column_list</code> parameter are excluded from the outbound server configuration. Therefore, changes to these columns are not streamed to the outbound server&#39;s client application.</p>
<p><span class="bold">See Also:</span> <a href="#CACBDGGD">&#34;Usage Notes&#34;</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t24" headers="r1c1-t24">
<p><code dir="ltr">source_database</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t24 r1c2-t24">
<p>The global name of the container where the specified <code dir="ltr">table_names</code> and <code dir="ltr">schema_names</code> are located.</p>
<p>If non-<code dir="ltr">NULL</code>, then a condition is added to the outbound server&#39;s rules to filter the LCRs based on the global name of the source database. If <code dir="ltr">NULL</code>, then the procedure does not add a condition regarding the source database to the generated rules.</p>
<p>In a CDB, specify the global name of the container to which the rules pertain. The container can be the root or a PDB. For example, <code dir="ltr">mycdb.example.com</code> or <code dir="ltr">hrpdb.example.com</code>. See <a class="olink XSTRM72988" href="../XSTRM/xstrm_gen_cncpt.htm#XSTRM72988"><span class="italic">Oracle Database XStream Guide</span></a> for more information about setting this parameter in a CDB.</p>
<p>If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify <code dir="ltr">DBS1</code> and the domain is <code dir="ltr">EXAMPLE.COM</code>, then the procedure specifies <code dir="ltr">DBS1.EXAMPLE.COM</code> automatically.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="CACBDGGD"></a>Usage Notes</p>
<p>When the <code dir="ltr">keep</code> parameter is set to <code dir="ltr">TRUE</code>, this procedure creates a keep columns declarative rule-based transformation for the columns listed in <code dir="ltr">column_list</code>.</p>
<p>When the <code dir="ltr">keep</code> parameter is set to <code dir="ltr">FALSE</code>, this procedure creates a delete column declarative rule-based transformation for each column listed in <code dir="ltr">column_list</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink XSTRM72752" href="../XSTRM/xstrm_gen_cncpt.htm#XSTRM72752"><span class="italic">Oracle Database XStream Guide</span></a> for information about declarative rule-based transformations</div>
</div>
<!-- class="refsect2" -->
<div id="ARPLS74037" class="refsect2"><a id="CHDICIJJ"></a>
<h3 class="refsect2">ADD_SUBSET_PROPAGATION_RULES Procedure<a id="sthref16185"></a><a id="sthref16186"></a><a id="sthref16187"></a><a id="sthref16188"></a><a id="sthref16189"></a><a id="sthref16190"></a></h3>
<p>This procedures adds propagation rules that propagate the logical change records (LCRs) related to a subset of the rows in the specified table in a source queue to a destination queue, and creates the specified propagation if it does not exist.</p>
<p>This procedure is overloaded. One version of this procedure contains three <code dir="ltr">OUT</code> parameters, and the other does not.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16191"></a>Syntax</p>
<pre dir="ltr">DBMS_XSTREAM_ADM.ADD_SUBSET_PROPAGATION_RULES(
   table_name               IN   VARCHAR2,
   dml_condition            IN   VARCHAR2,
   streams_name             IN   VARCHAR2  DEFAULT NULL,
   source_queue_name        IN   VARCHAR2,
   destination_queue_name   IN   VARCHAR2,
   include_tagged_lcr       IN   BOOLEAN   DEFAULT FALSE,
   source_database          IN   VARCHAR2  DEFAULT NULL,
   insert_rule_name         OUT  VARCHAR2,
   update_rule_name         OUT  VARCHAR2,
   delete_rule_name         OUT  VARCHAR2,
   queue_to_queue           IN   BOOLEAN   DEFAULT NULL);

DBMS_XSTREAM_ADM.ADD_SUBSET_PROPAGATION_RULES(
   table_name               IN   VARCHAR2,
   dml_condition            IN   VARCHAR2,
   streams_name             IN   VARCHAR2  DEFAULT NULL,
   source_queue_name        IN   VARCHAR2,
   destination_queue_name   IN   VARCHAR2,
   include_tagged_lcr       IN   BOOLEAN   DEFAULT FALSE,
   source_database          IN   VARCHAR2  DEFAULT NULL,
   queue_to_queue           IN   BOOLEAN   DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16192"></a>Parameters</p>
<div id="ARPLS74038" class="tblformal">
<p class="titleintable"><a id="sthref16193"></a><a id="sthref16194"></a>Table 204-9 ADD_SUBSET_PROPAGATION_RULES Procedure Parameters</p>
<table class="cellalignment4330" title="ADD_SUBSET_PROPAGATION_RULES Procedure Parameters" summary="This table describes the Parameters of DBMS_XSTREAM_ADM.ADD_SUBSET_PROPAGATION_RULES subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t26">Parameter</th>
<th class="cellalignment4328" id="r1c2-t26">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t26" headers="r1c1-t26">
<p><code dir="ltr">table_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t26 r1c2-t26">
<p>The name of the table specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">object_name</span></code>. For example, <code dir="ltr">hr.employees</code>. If the schema is not specified, then the current user is the default.</p>
<p>The specified table must exist in the same database as the propagation. Also, the specified table cannot have any LOB, <code dir="ltr">LONG</code>, <code dir="ltr">LONG</code> <code dir="ltr">RAW</code>, or <code dir="ltr">XMLType</code> columns currently or in the future.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t26" headers="r1c1-t26">
<p><code dir="ltr">dml_condition</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t26 r1c2-t26">
<p>The subset condition. Specify this condition similar to the way you specify conditions in a <code dir="ltr">WHERE</code> clause in SQL.</p>
<p>For example, to specify rows in the <code dir="ltr">hr.employees</code> table where the <code dir="ltr">salary</code> is greater than <code dir="ltr">4000</code> and the <code dir="ltr">job_id</code> is <code dir="ltr">SA_MAN</code>, enter the following as the condition:</p>
<p><code dir="ltr">&#39; salary &gt; 4000 and job_id = &#39;&#39;SA_MAN&#39;&#39; &#39;</code></p>
<p><span class="bold">Note:</span> The quotation marks in the preceding example are all single quotation marks.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t26" headers="r1c1-t26">
<p><code dir="ltr">streams_name</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t26 r1c2-t26">
<p>The name of the propagation. Do not specify an owner.</p>
<p>If the specified propagation does not exist, then the procedure creates it automatically.</p>
<p>If <code dir="ltr">NULL</code> and a propagation exists for the same source queue and destination queue (including database link), then the procedure uses this propagation.</p>
<p>If <code dir="ltr">NULL</code> and no propagation exists for the same source queue and destination queue (including database link), then the procedure creates a propagation automatically with a system-generated name.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t26" headers="r1c1-t26">
<p><code dir="ltr">source_queue_name</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t26 r1c2-t26">
<p>The name of the source queue, specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">queue_name</span></code>. The current database must contain the source queue, and the queue must be <code dir="ltr">ANYDATA</code> type.</p>
<p>For example, to specify a source queue named <code dir="ltr">streams_queue</code> in the <code dir="ltr">strmadmin</code> schema, enter <code dir="ltr">strmadmin.streams_queue</code> for this parameter.</p>
<p>If the schema is not specified, then the current user is the default.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t26" headers="r1c1-t26">
<p><code dir="ltr">destination_queue_name</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t26 r1c2-t26">
<p>The name of the destination queue, including a database link, specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">queue_name</span></code><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">@dblink_name</span></code><code dir="ltr">]</code>, if the destination queue is in a remote database. The queue must be <code dir="ltr">ANYDATA</code> type.</p>
<p>For example, to specify a destination queue named <code dir="ltr">streams_queue</code> in the <code dir="ltr">strmadmin</code> schema and use a database link named <code dir="ltr">dbs2.net</code>, enter <code dir="ltr">strmadmin.streams_queue@dbs2.net</code> for this parameter.</p>
<p>If the schema is not specified, then the current user is the default.</p>
<p>If the database link is omitted, then the procedure uses the global name of the current database, and the source queue and destination queue must be in the same database.</p>
<p><span class="bold">Note:</span> Connection qualifiers are not allowed.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t26" headers="r1c1-t26">
<p><code dir="ltr">include_tagged_lcr</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t26 r1c2-t26">
<p>If <code dir="ltr">TRUE</code>, then an LCR is always considered for propagation, regardless of whether it has a non-<code dir="ltr">NULL</code> tag. This setting is appropriate for a full (for example, standby) copy of a database.</p>
<p>If <code dir="ltr">FALSE</code>, then an LCR is considered for propagation only when the LCR contains a <code dir="ltr">NULL</code> tag. A setting of <code dir="ltr">FALSE</code> is often specified in update-anywhere configurations to avoid sending a change back to its source database.</p>
<p><span class="bold">See Also:</span> <a class="olink STREP008" href="../STREP/rep_tags.htm#STREP008"><span class="italic">Oracle Streams Replication Administrator&#39;s Guide</span></a> for more information about tags</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t26" headers="r1c1-t26">
<p><code dir="ltr">source_database</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t26 r1c2-t26">
<p>The global name of the source database. The source database is where the change originated. If <code dir="ltr">NULL</code>, then the procedure does not add a condition regarding the source database to the generated rules.</p>
<p>If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify <code dir="ltr">DBS1</code> and the domain is <code dir="ltr">.NET</code>, then the procedure specifies <code dir="ltr">DBS1.NET</code> automatically.</p>
<p>Oracle recommends that you specify a source database for propagation rules.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t26" headers="r1c1-t26">
<p><code dir="ltr">insert_rule_name</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t26 r1c2-t26">
<p>Contains the system-generated <code dir="ltr">INSERT</code> rule name. This rule handles inserts and updates that must be converted into inserts.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t26" headers="r1c1-t26">
<p><code dir="ltr">update_rule_name</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t26 r1c2-t26">
<p>Contains the system-generated <code dir="ltr">UPDATE</code> rule name. This rule handles updates that remain updates.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t26" headers="r1c1-t26">
<p><code dir="ltr">delete_rule_name</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t26 r1c2-t26">
<p>Contains the system-generated <code dir="ltr">DELETE</code> rule name. This rule handles deletes and updates that must be converted into deletes</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t26" headers="r1c1-t26">
<p><code dir="ltr">queue_to_queue</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t26 r1c2-t26">
<p>If <code dir="ltr">TRUE</code> or <code dir="ltr">NULL</code>, then a new propagation created by this procedure is a queue to queue propagation. A queue-to-queue propagation always has its own propagation job and uses a service for automatic failover when the destination queue is a buffered queue in an Oracle Real Application Clusters (Oracle RAC) database.</p>
<p>If <code dir="ltr">FALSE</code>, then a new propagation created by this procedure is a queue-to-dblink propagation. A queue-to-dblink propagation can share a propagation job with other propagations that use the same database link and does not support automatic failover in an Oracle RAC environment.</p>
<p>This procedure cannot change the queue to queue property of an exiting propagation. If the specified propagation exists, then the procedure behaves in the following way for each setting:</p>
<ul>
<li>
<p>If <code dir="ltr">TRUE</code> and the specified propagation is not a queue to queue propagation, then the procedure raises an error.</p>
</li>
<li>
<p>If <code dir="ltr">FALSE</code> and the specified propagation is a queue to queue propagation, then the procedure raises an error.</p>
</li>
<li>
<p>If <code dir="ltr">NULL</code>, then the procedure does not change the queue to queue property of the propagation.</p>
</li>
</ul>
<p><span class="bold">See Also:</span> <a class="olink STRMS155" href="../STRMS/strms_prop.htm#STRMS155"><span class="italic">Oracle Streams Concepts and Administration</span></a> for more information about queue-to-queue propagations</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16195"></a>Usage Notes</p>
<p>This procedure configures propagation using the current user. Only one propagation is allowed between a particular source queue and destination queue.</p>
<p>Running this procedure generates three rules for the specified propagation: one for <code dir="ltr">INSERT</code> statements, one for <code dir="ltr">UPDATE</code> statements, and one for <code dir="ltr">DELETE</code> statements. For <code dir="ltr">INSERT</code> and <code dir="ltr">DELETE</code> statements, only row LCRs that satisfy the condition specified for the <code dir="ltr">dml_condition</code> parameter are propagated. For <code dir="ltr">UPDATE</code> statements, the following variations are possible:</p>
<ul>
<li>
<p>If both the new and old values in a row LCR satisfy the specified <code dir="ltr">dml_condition</code>, then the row LCR is propagated without any changes.</p>
</li>
<li>
<p>If neither the new or old values in a row LCR satisfy the specified <code dir="ltr">dml_condition</code>, then the row LCR is not propagated.</p>
</li>
<li>
<p>If the old values for a row LCR satisfy the specified <code dir="ltr">dml_condition</code>, but the new values do not, then the update row LCR is converted into a delete row LCR.</p>
</li>
<li>
<p>If the new values for a row LCR satisfy the specified <code dir="ltr">dml_condition</code>, but the old values do not, then the update row LCR is converted to an insert row LCR.</p>
</li>
</ul>
<p>When an update is converted into an insert or a delete, it is called row migration.</p>
<p>A propagation uses the rules for filtering. If the propagation does not have a positive rule set, then the procedure creates a positive rule set automatically, and the rules for propagating changes to the table are added to the positive rule set. A subset rule can be added to positive rule set only, not to a negative rule set. Other rules in an existing positive rule set for the propagation are not affected. Additional rules can be added using either the <code dir="ltr">DBMS_XSTREAM_ADM</code> package or the <code dir="ltr">DBMS_RULE_ADM</code> package.</p>
<p>Rules for <code dir="ltr">INSERT</code>, <code dir="ltr">UPDATE</code>, and <code dir="ltr">DELETE</code> statements are created automatically when you run this procedure, and these rules are given a system-generated rule name. Each rule has a system-generated rule name that consists of the table name with a sequence number appended to it. The sequence number is used to avoid naming conflicts. If the table name plus the sequence number is too long, then the table name is truncated. The <code dir="ltr">ADD_SUBSET_RULES</code> procedure is overloaded, and the system-generated rule names for <code dir="ltr">INSERT</code>, <code dir="ltr">UPDATE</code>, and <code dir="ltr">DELETE</code> statements are returned.</p>
<p>When you create propagation subset rules for a table, you should create an unconditional supplemental log group at the source database with all the columns in the table. Supplemental logging is required if an update must be converted to an insert. The propagation rule must have all the column values to be able to perform this conversion correctly.</p>
<div class="infobox-note">
<p class="notep1">Attention:</p>
Subset rules should only reside in positive rule sets. You should not add subset rules to negative rule sets. Doing so might have unpredictable results because row migration would not be performed on LCRs that are not discarded by the negative rule set.</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16196"></a>Examples</p>
<p>The following is an example of a rule condition created for filtering a row LCR containing an update operation when the <code dir="ltr">dml_condition</code> is <code dir="ltr">region_id&nbsp;=&nbsp;2</code>, the <code dir="ltr">table_name</code> is <code dir="ltr">hr.regions</code>, and the <code dir="ltr">source_database</code> is <code dir="ltr">dbs1.net</code>:</p>
<pre dir="ltr">:dml.get_object_owner()=&#39;HR&#39; AND :dml.get_object_name()=&#39;REGIONS&#39; 
AND :dml.is_null_tag()=&#39;Y&#39; AND :dml.get_source_database_name()=&#39;DBS1.NET&#39; 
AND :dml.get_command_type()=&#39;UPDATE&#39; 
AND (:dml.get_value(&#39;NEW&#39;,&#39;&#34;REGION_ID&#34;&#39;) IS NOT NULL) 
AND (:dml.get_value(&#39;OLD&#39;,&#39;&#34;REGION_ID&#34;&#39;) IS NOT NULL) 
AND (:dml.get_value(&#39;OLD&#39;,&#39;&#34;REGION_ID&#34;&#39;).AccessNumber()=2) 
AND (:dml.get_value(&#39;NEW&#39;,&#39;&#34;REGION_ID&#34;&#39;).AccessNumber()=2)
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS74039" class="refsect2"><a id="CHDGEGBB"></a>
<h3 class="refsect2">ADD_SUBSET_RULES Procedure<a id="sthref16197"></a><a id="sthref16198"></a><a id="sthref16199"></a><a id="sthref16200"></a><a id="sthref16201"></a><a id="sthref16202"></a><a id="sthref16203"></a><a id="sthref16204"></a><a id="sthref16205"></a></h3>
<p>This procedure adds rules to a rule set of one of the following types of XStream clients:</p>
<ul>
<li>
<p>When the <code dir="ltr">streams_type</code> parameter is set to <code dir="ltr">capture</code>, this procedure adds capture process rules for capturing changes to a subset of rows in a specified table.</p>
<p>This procedure creates the specified capture process if it does not exist.</p>
</li>
<li>
<p>When the <code dir="ltr">streams_type</code> parameter is set to <code dir="ltr">apply</code> and the <code dir="ltr">streams_name</code> parameter specifies the name of an apply process, outbound server, or inbound server, this procedure adds apply rules for applying logical change records (LCRs) that contain changes to a subset of rows in a specified table. The rules can specify that the LCRs must be from a particular source database.</p>
<p>This procedure creates an apply process if no apply process, outbound server, or inbound server exists with the specified <code dir="ltr">streams_name</code>. This procedure can add rules to an outbound server or inbound server, but it cannot create an outbound server or inbound server.</p>
</li>
</ul>
<p>This procedure is overloaded. One version of this procedure contains three <code dir="ltr">OUT</code> parameters, and the other does not.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16206"></a>Syntax</p>
<pre dir="ltr">DBMS_XSTREAM_ADM.ADD_SUBSET_RULES(
   table_name             IN   VARCHAR2,
   dml_condition          IN   VARCHAR2,
   streams_type           IN   VARCHAR2 DEFAULT &#39;apply&#39;,
   streams_name           IN   VARCHAR2 DEFAULT NULL,
   queue_name             IN   VARCHAR2 DEFAULT &#39;streams_queue&#39;,
   include_tagged_lcr     IN   BOOLEAN  DEFAULT FALSE,
   source_database        IN   VARCHAR2 DEFAULT NULL,
   insert_rule_name       OUT  VARCHAR2,
   update_rule_name       OUT  VARCHAR2,
   delete_rule_name       OUT  VARCHAR2,
   source_root_name       IN  VARCHAR2  DEFAULT NULL,
   source_container_name  IN  VARCHAR2  DEFAULT NULL);

DBMS_XSTREAM_ADM.ADD_SUBSET_RULES(
   table_name             IN   VARCHAR2,
   dml_condition          IN   VARCHAR2,
   streams_type           IN   VARCHAR2 DEFAULT &#39;apply&#39;,
   streams_name           IN   VARCHAR2 DEFAULT NULL,
   queue_name             IN   VARCHAR2 DEFAULT &#39;streams_queue&#39;,
   include_tagged_lcr     IN   BOOLEAN  DEFAULT FALSE,
   source_database        IN   VARCHAR2 DEFAULT NULL,
   source_root_name       IN  VARCHAR2  DEFAULT NULL,
   source_container_name  IN  VARCHAR2  DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16207"></a>Parameters</p>
<div id="ARPLS74040" class="tblformal">
<p class="titleintable"><a id="sthref16208"></a><a id="sthref16209"></a>Table 204-10 ADD_SUBSET_RULES Procedure Parameters</p>
<table class="cellalignment4330" title="ADD_SUBSET_RULES Procedure Parameters" summary="This table describes the Parameters of DBMS_XSTREAM_ADM.ADD_SUBSET_RULES subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t28">Parameter</th>
<th class="cellalignment4328" id="r1c2-t28">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t28" headers="r1c1-t28">
<p><code dir="ltr">table_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t28 r1c2-t28">
<p>The name of the table specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">object_name</span></code>. For example, <code dir="ltr">hr.employees</code>. If the schema is not specified, then the current user is the default.</p>
<p>The specified table must exist in the same database as the capture process or apply process. Also, the specified table cannot have any LOB, <code dir="ltr">LONG</code>, <code dir="ltr">LONG</code> <code dir="ltr">RAW</code>, or <code dir="ltr">XMLType</code> columns currently or in the future.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t28" headers="r1c1-t28">
<p><code dir="ltr">dml_condition</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t28 r1c2-t28">
<p>The subset condition. Specify this condition similar to the way you specify conditions in a <code dir="ltr">WHERE</code> clause in SQL.</p>
<p>For example, to specify rows in the <code dir="ltr">hr.employees</code> table where the <code dir="ltr">salary</code> is greater than <code dir="ltr">4000</code> and the <code dir="ltr">job_id</code> is <code dir="ltr">SA_MAN</code>, enter the following as the condition:</p>
<p><code dir="ltr">&#39; salary &gt; 4000 and job_id = &#39;&#39;SA_MAN&#39;&#39; &#39;</code></p>
<p><span class="bold">Note:</span> The quotation marks in the preceding example are all single quotation marks.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t28" headers="r1c1-t28">
<p><code dir="ltr">streams_type</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t28 r1c2-t28">
<p>The type of XStream client:</p>
<ul>
<li>
<p>Specify <code dir="ltr">capture</code> for a capture process.</p>
</li>
<li>
<p>Specify <code dir="ltr">apply</code> for an apply process.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t28" headers="r1c1-t28">
<p><code dir="ltr">streams_name</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t28 r1c2-t28">
<p>The name of the capture process or apply process. Do not specify an owner.</p>
<p>If <code dir="ltr">NULL</code>, if <code dir="ltr">streams_type</code> is <code dir="ltr">capture</code>, and if one relevant capture process for the queue exists, then the procedure uses the relevant XStream client. If no relevant XStream client exists for the queue, then the procedure creates an XStream client automatically with a system-generated name. If <code dir="ltr">NULL</code> and multiple XStream clients of the specified <code dir="ltr">streams_type</code> for the queue exist, then the procedure raises an error.</p>
<p>If <code dir="ltr">NULL</code>, if <code dir="ltr">streams_type</code> is <code dir="ltr">apply</code>, and if one relevant apply process exists, then the procedure uses the relevant apply process. The relevant apply process is identified in one of the following ways:</p>
<ul>
<li>
<p>If one existing apply process has the source database specified in <code dir="ltr">source_database</code> and uses the queue specified in <code dir="ltr">queue_name</code>, then the procedure uses this apply process.</p>
</li>
<li>
<p>If <code dir="ltr">source_database</code> is <code dir="ltr">NULL</code> and one existing apply process is using the queue specified in <code dir="ltr">queue_name</code>, then the procedure uses this apply process.</p>
</li>
</ul>
<p>If <code dir="ltr">NULL</code> and no relevant apply process exists, then the procedure creates an apply process automatically with a system-generated name.</p>
<p>If <code dir="ltr">NULL</code> and multiple relevant apply processes exist, then the procedure raises an error.</p>
<p>Each apply process must have a unique name.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t28" headers="r1c1-t28">
<p><code dir="ltr">queue_name</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t28 r1c2-t28">
<p>The name of the local queue, specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">queue_name</span></code>. The current database must contain the queue, and the queue must be <code dir="ltr">ANYDATA</code> type.</p>
<p>For example, to specify a queue named <code dir="ltr">streams_queue</code> in the <code dir="ltr">strmadmin</code> schema, enter <code dir="ltr">strmadmin.streams_queue</code> for this parameter. If the schema is not specified, then the current user is the default.</p>
<p>For capture process rules, this is the queue into which a capture process enqueues LCRs. For outbound server rules, this is the queue from which the outbound server dequeues LCRs. For inbound server rules, this is the queue into which an inbound server enqueues error transactions.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t28" headers="r1c1-t28">
<p><code dir="ltr">include_tagged_lcr</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t28 r1c2-t28">
<p>If <code dir="ltr">TRUE</code>, then the XStream client performs its action regardless of the tag:</p>
<ul>
<li>
<p>A redo entry is always considered for capture by a capture process, regardless of whether the redo entry has a non-<code dir="ltr">NULL</code> tag.</p>
</li>
<li>
<p>An LCR is always considered for apply by an apply process, regardless of whether redo entry or LCR has a non-<code dir="ltr">NULL</code> tag.</p>
</li>
</ul>
<p>If <code dir="ltr">FALSE</code>, then an XStream client performs its action only when the tag is <code dir="ltr">NULL</code>:</p>
<ul>
<li>
<p>A redo entry is considered for capture by a capture process only when the redo entry contains a <code dir="ltr">NULL</code> tag.</p>
</li>
<li>
<p>An LCR is considered for apply by an apply process only if the LCR contains a <code dir="ltr">NULL</code> tag.</p>
</li>
</ul>
<p>A setting of <code dir="ltr">FALSE</code> is often specified in update-anywhere configurations to avoid sending a change back to its source database.</p>
<p><span class="bold">See Also:</span> <a class="olink STREP008" href="../STREP/rep_tags.htm#STREP008"><span class="italic">Oracle Streams Replication Administrator&#39;s Guide</span></a> for more information about tags</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t28" headers="r1c1-t28">
<p><code dir="ltr">source_database</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t28 r1c2-t28">
<p>The global name of the source database. If <code dir="ltr">NULL</code>, then the procedure does not add a condition regarding the source database to the generated rules.</p>
<p>For capture process rules, specify <code dir="ltr">NULL</code> or the global name of the local database if you are creating a capture process locally at the source database. If you are adding rules to a downstream capture process rule set at a downstream database, then specify the source database of the changes that will be captured.</p>
<p>For apply process rules, specify the source database of the changes that will be applied by the apply process. The source database is the database where the changes originated. If an apply process applies captured LCRs, then the apply process can apply LCRs from only one capture process at one source database.</p>
<p>In a CDB, specify the global name of the container to which the rules pertain. The container can be the root or a PDB. For example, <code dir="ltr">mycdb.example.com</code> or <code dir="ltr">hrpdb.example.com</code>. See <a class="olink XSTRM72988" href="../XSTRM/xstrm_gen_cncpt.htm#XSTRM72988"><span class="italic">Oracle Database XStream Guide</span></a> for more information about setting this parameter in a CDB.</p>
<p>If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify <code dir="ltr">DBS1</code> and the domain is <code dir="ltr">.NET</code>, then the procedure specifies <code dir="ltr">DBS1.NET</code> automatically.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t28" headers="r1c1-t28">
<p><code dir="ltr">insert_rule_name</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t28 r1c2-t28">
<p>Contains the system-generated <code dir="ltr">INSERT</code> rule name. This rule handles inserts and updates that must be converted into inserts.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t28" headers="r1c1-t28">
<p><code dir="ltr">update_rule_name</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t28 r1c2-t28">
<p>Contains the system-generated <code dir="ltr">UPDATE</code> rule name. This rule handles updates that remain updates.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t28" headers="r1c1-t28">
<p><code dir="ltr">delete_rule_name</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t28 r1c2-t28">
<p>Contains the system-generated <code dir="ltr">DELETE</code> rule name. This rule handles deletes and updates that must be converted into deletes</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t28" headers="r1c1-t28">
<p><code dir="ltr">source_root_name</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t28 r1c2-t28">
<p>The global name of the root in the source CDB. For example, <code dir="ltr">mycdb.example.com</code>.</p>
<p>If this parameter is <code dir="ltr">NULL</code>, then the global name of the root in the local CDB is used. If you are configuring downstream capture, then this parameter must be a non-<code dir="ltr">NULL</code> value, and it must specify the global name of the root in the remote source CDB. See <a class="olink XSTRM72988" href="../XSTRM/xstrm_gen_cncpt.htm#XSTRM72988"><span class="italic">Oracle Database XStream Guide</span></a> for more information about setting this parameter in a CDB.</p>
<p>If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify <code dir="ltr">DBS1</code> and the domain is <code dir="ltr">EXAMPLE.COM</code>, then the procedure specifies <code dir="ltr">DBS1.EXAMPLE.COM</code> automatically.</p>
<p><span class="bold">Note:</span> This parameter only applies to a CDB.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t28" headers="r1c1-t28">
<p><code dir="ltr">source_container_name</code></p>
</td>
<td class="cellalignment4329" headers="r13c1-t28 r1c2-t28">
<p>The short name of the source container. The container can be the root or a PDB. For example, <code dir="ltr">CDB$ROOT</code> or <code dir="ltr">hrpdb</code>. See <a class="olink XSTRM72988" href="../XSTRM/xstrm_gen_cncpt.htm#XSTRM72988"><span class="italic">Oracle Database XStream Guide</span></a> for more information about setting this parameter in a CDB.</p>
<p><span class="bold">Note:</span> This parameter only applies to a CDB.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16210"></a>Usage Notes</p>
<p>Running this procedure generates three rules for the specified capture process or apply process: one for <code dir="ltr">INSERT</code> statements, one for <code dir="ltr">UPDATE</code> statements, and one for <code dir="ltr">DELETE</code> statements. For <code dir="ltr">INSERT</code> and <code dir="ltr">DELETE</code> statements, only DML changes that satisfy the condition specified for the <code dir="ltr">dml_condition</code> parameter are captured or applied. For <code dir="ltr">UPDATE</code> statements, the following variations are possible:</p>
<ul>
<li>
<p>If both the new and old values in a DML change satisfy the specified <code dir="ltr">dml_condition</code>, then the DML change is captured or applied without any changes.</p>
</li>
<li>
<p>If neither the new or old values in a DML change satisfy the specified <code dir="ltr">dml_condition</code>, then the DML change is not captured or applied.</p>
</li>
<li>
<p>If the old values for a DML change satisfy the specified <code dir="ltr">dml_condition</code>, but the new values do not, then the DML change is converted into a delete.</p>
</li>
<li>
<p>If the new values for a DML change satisfy the specified <code dir="ltr">dml_condition</code>, but the old values do not, then the DML change is converted to an insert.</p>
</li>
</ul>
<p>When an update is converted into an insert or a delete, it is called row migration.</p>
<p>A capture process or apply process uses the rules for filtering. If the XStream client does not have a positive rule set, then this procedure creates a positive rule set automatically, and adds the rules for the table to the positive rule set. A subset rule can be added to positive rule set only, not to a negative rule set. Other rules in an existing rule set for the process are not affected. Additional rules can be added using either the <code dir="ltr">DBMS_XSTREAM_ADM</code> package or the <code dir="ltr">DBMS_RULE_ADM</code> package.</p>
<p>Rules for <code dir="ltr">INSERT</code>, <code dir="ltr">UPDATE</code>, and <code dir="ltr">DELETE</code> statements are created automatically when you run this procedure, and these rules are given a system-generated rule name. Each rule has a system-generated rule name that consists of the table name with a sequence number appended to it. The sequence number is used to avoid naming conflicts. If the table name plus the sequence number is too long, then the table name is truncated. The <code dir="ltr">ADD_SUBSET_RULES</code> procedure is overloaded, and the system-generated rule names for <code dir="ltr">INSERT</code>, <code dir="ltr">UPDATE</code>, and <code dir="ltr">DELETE</code> statements are returned.</p>
<div class="infobox-note">
<p class="notep1">Attention:</p>
Subset rules should only reside in positive rule sets. You should not add subset rules to negative rule sets. Doing so might have unpredictable results because row migration would not be performed on LCRs that are not discarded by the negative rule set.</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16211"></a>Examples</p>
<p>The following is an example of a rule condition created for filtering DML changes containing an update operation when the <code dir="ltr">dml_condition</code> is <code dir="ltr">region_id&nbsp;=&nbsp;2</code>, the <code dir="ltr">table_name</code> is <code dir="ltr">hr.regions</code>, and the <code dir="ltr">source_database</code> is <code dir="ltr">dbs1.net</code>:</p>
<pre dir="ltr">:dml.get_object_owner()=&#39;HR&#39; AND :dml.get_object_name()=&#39;REGIONS&#39; 
AND :dml.is_null_tag()=&#39;Y&#39; AND :dml.get_source_database_name()=&#39;DBS1.NET&#39; 
AND :dml.get_command_type()=&#39;UPDATE&#39; 
AND (:dml.get_value(&#39;NEW&#39;,&#39;&#34;REGION_ID&#34;&#39;) IS NOT NULL) 
AND (:dml.get_value(&#39;OLD&#39;,&#39;&#34;REGION_ID&#34;&#39;) IS NOT NULL) 
AND (:dml.get_value(&#39;OLD&#39;,&#39;&#34;REGION_ID&#34;&#39;).AccessNumber()=2) 
AND (:dml.get_value(&#39;NEW&#39;,&#39;&#34;REGION_ID&#34;&#39;).AccessNumber()=2)
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS74041" class="refsect2"><a id="CHDHAGHE"></a>
<h3 class="refsect2">ADD_TABLE_PROPAGATION_RULES Procedure<a id="sthref16212"></a><a id="sthref16213"></a><a id="sthref16214"></a><a id="sthref16215"></a></h3>
<p>This procedures adds table rules to the positive rule set for a propagation, or adds table rules to the negative rule set for a propagation, and creates the specified propagation if it does not exist.</p>
<p>This procedure is overloaded. One version of this procedure contains two <code dir="ltr">OUT</code> parameters, and the other does not.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16216"></a>Syntax</p>
<pre dir="ltr">DBMS_XSTREAM_ADM.ADD_TABLE_PROPAGATION_RULES(
   table_name              IN   VARCHAR2,
   streams_name            IN   VARCHAR2  DEFAULT NULL,
   source_queue_name       IN   VARCHAR2,
   destination_queue_name  IN   VARCHAR2,
   include_dml             IN   BOOLEAN   DEFAULT TRUE,
   include_ddl             IN   BOOLEAN   DEFAULT FALSE,
   include_tagged_lcr      IN   BOOLEAN   DEFAULT FALSE,
   source_database         IN   VARCHAR2  DEFAULT NULL,
   dml_rule_name           OUT  VARCHAR2,
   ddl_rule_name           OUT  VARCHAR2,
   inclusion_rule          IN   BOOLEAN   DEFAULT TRUE,
   and_condition           IN   VARCHAR2  DEFAULT NULL,
   queue_to_queue          IN   BOOLEAN   DEFAULT NULL);

DBMS_XSTREAM_ADM.ADD_TABLE_PROPAGATION_RULES(
   table_name              IN   VARCHAR2,
   streams_name            IN   VARCHAR2  DEFAULT NULL,
   source_queue_name       IN   VARCHAR2,
   destination_queue_name  IN   VARCHAR2,
   include_dml             IN   BOOLEAN   DEFAULT TRUE,
   include_ddl             IN   BOOLEAN   DEFAULT FALSE,
   include_tagged_lcr      IN   BOOLEAN   DEFAULT FALSE,
   source_database         IN   VARCHAR2  DEFAULT NULL,
   inclusion_rule          IN   BOOLEAN   DEFAULT TRUE,
   and_condition           IN   VARCHAR2  DEFAULT NULL,
   queue_to_queue          IN   BOOLEAN   DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16217"></a>Parameters</p>
<div id="ARPLS74042" class="tblformal">
<p class="titleintable"><a id="sthref16218"></a><a id="sthref16219"></a>Table 204-11 ADD_TABLE_PROPAGATION_RULES Procedure Parameters</p>
<table class="cellalignment4330" title="ADD_TABLE_PROPAGATION_RULES Procedure Parameters" summary="This table describes the Parameters of DBMS_XSTREAM_ADM.ADD_TABLE_PROPAGATION_RULES subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t30">Parameter</th>
<th class="cellalignment4328" id="r1c2-t30">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t30" headers="r1c1-t30">
<p><code dir="ltr">table_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t30 r1c2-t30">
<p>The name of the table specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">table_name</span></code>. For example, <code dir="ltr">hr.employees</code>. If the schema is not specified, then the current user is the default.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t30" headers="r1c1-t30">
<p><code dir="ltr">streams_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t30 r1c2-t30">
<p>The name of the propagation. Do not specify an owner.</p>
<p>If the specified propagation does not exist, then the procedure creates it automatically.</p>
<p>If <code dir="ltr">NULL</code> and a propagation exists for the same source queue and destination queue (including database link), then the procedure uses this propagation.</p>
<p>If <code dir="ltr">NULL</code> and no propagation exists for the same source queue and destination queue (including database link), then the procedure creates a propagation automatically with a system-generated name.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t30" headers="r1c1-t30">
<p><code dir="ltr">source_queue_name</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t30 r1c2-t30">
<p>The name of the source queue, specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">queue_name</span></code>. The current database must contain the source queue, and the queue must be <code dir="ltr">ANYDATA</code> type.</p>
<p>For example, to specify a source queue named <code dir="ltr">streams_queue</code> in the <code dir="ltr">strmadmin</code> schema, enter <code dir="ltr">strmadmin.streams_queue</code> for this parameter.</p>
<p>If the schema is not specified, then the current user is the default.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t30" headers="r1c1-t30">
<p><code dir="ltr">destination_queue_name</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t30 r1c2-t30">
<p>The name of the destination queue, including a database link, specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">queue_name</span></code><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">@dblink_name</span></code><code dir="ltr">]</code>, if the destination queue is in a remote database. The queue must be <code dir="ltr">ANYDATA</code> type.</p>
<p>For example, to specify a destination queue named <code dir="ltr">streams_queue</code> in the <code dir="ltr">strmadmin</code> schema and use a database link named <code dir="ltr">dbs2.net</code>, enter <code dir="ltr">strmadmin.streams_queue@dbs2.net</code> for this parameter.</p>
<p>If the schema is not specified, then the current user is the default.</p>
<p>If the database link is omitted, then the procedure uses the global name of the current database, and the source queue and destination queue must be in the same database.</p>
<p><span class="bold">Note:</span> Connection qualifiers are not allowed.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t30" headers="r1c1-t30">
<p><code dir="ltr">include_dml</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t30 r1c2-t30">
<p>If <code dir="ltr">TRUE</code>, then the procedure creates a rule for DML changes. If <code dir="ltr">FALSE</code>, then the procedure does not create a DML rule. <code dir="ltr">NULL</code> is not permitted.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t30" headers="r1c1-t30">
<p><code dir="ltr">include_ddl</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t30 r1c2-t30">
<p>If <code dir="ltr">TRUE</code>, then the procedure creates a rule for DDL changes. If <code dir="ltr">FALSE</code>, then the procedure does not create a DDL rule. <code dir="ltr">NULL</code> is not permitted.</p>
<p>The generated rule evaluates to <code dir="ltr">TRUE</code> for any DDL change that operates on the table or on an object that is part of the table, such as an index or trigger on the table. The rule evaluates to <code dir="ltr">FALSE</code> for any DDL change that either does not refer to the table or refers to the table in a subordinate way. For example, the rule evaluates to <code dir="ltr">FALSE</code> for changes that create synonyms or views based on the table. The rule also evaluates to <code dir="ltr">FALSE</code> for a change to a PL/SQL subprogram that refers to the table.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t30" headers="r1c1-t30">
<p><code dir="ltr">include_tagged_lcr</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t30 r1c2-t30">
<p>If <code dir="ltr">TRUE</code>, then the procedure does not add a condition regarding Oracle Streams tags to the generated rules. Therefore, these rules can evaluate to <code dir="ltr">TRUE</code> regardless of whether a logical change record (LCR) has a non-<code dir="ltr">NULL</code> tag. If the rules are added to the positive rule set for the propagation, then an LCR is always considered for propagation, regardless of whether it has a non-<code dir="ltr">NULL</code> tag. If the rules are added to a positive rule set, then setting this parameter to <code dir="ltr">TRUE</code> is appropriate for a full (for example, standby) copy of a database. If the rules are added to the negative rule set for the propagation, then whether an LCR is discarded does not depend on the tag for the LCR.</p>
<p>If <code dir="ltr">FALSE</code>, then the procedure adds a condition to each generated rule that causes the rule to evaluate to <code dir="ltr">TRUE</code> only if an LCR has a <code dir="ltr">NULL</code> Oracle Streams tag. If the rules are added to the positive rule set for the propagation, then an LCR is considered for propagation only when the LCR contains a <code dir="ltr">NULL</code> tag. If the rules are added to a positive rule set, then setting this parameter to <code dir="ltr">FALSE</code> might be appropriate in update-anywhere configurations to avoid sending a change back to its source database. If the rules are added to the negative rule set for the propagation, then an LCR can be discarded only if it has a <code dir="ltr">NULL</code> tag.</p>
<p>Usually, specify <code dir="ltr">TRUE</code> for this parameter if the <code dir="ltr">inclusion_rule</code> parameter is set to <code dir="ltr">FALSE</code>.</p>
<p><span class="bold">See Also:</span> <a class="olink STREP008" href="../STREP/rep_tags.htm#STREP008"><span class="italic">Oracle Streams Replication Administrator&#39;s Guide</span></a> for more information about tags</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t30" headers="r1c1-t30">
<p><code dir="ltr">source_database</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t30 r1c2-t30">
<p>The global name of the source database. The source database is where the change originated. If <code dir="ltr">NULL</code>, then the procedure does not add a condition regarding the source database to the generated rules.</p>
<p>If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify <code dir="ltr">DBS1</code> and the domain is <code dir="ltr">.NET</code>, then the procedure specifies <code dir="ltr">DBS1.NET</code> automatically.</p>
<p>Oracle recommends that you specify a source database for propagation rules.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t30" headers="r1c1-t30">
<p><code dir="ltr">dml_rule_name</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t30 r1c2-t30">
<p>If <code dir="ltr">include_dml</code> is <code dir="ltr">TRUE</code>, then this parameter contains the DML rule name.</p>
<p>If <code dir="ltr">include_dml</code> is <code dir="ltr">FALSE</code>, then this parameter contains a <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t30" headers="r1c1-t30">
<p><code dir="ltr">ddl_rule_name</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t30 r1c2-t30">
<p>If <code dir="ltr">include_ddl</code> is <code dir="ltr">TRUE</code>, then this parameter contains the DDL rule name.</p>
<p>If <code dir="ltr">include_ddl</code> is <code dir="ltr">FALSE</code>, then this parameter contains a <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t30" headers="r1c1-t30">
<p><code dir="ltr">inclusion_rule</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t30 r1c2-t30">
<p>If <code dir="ltr">inclusion_rule</code> is <code dir="ltr">TRUE</code>, then the procedure adds the rules to the positive rule set for the propagation.</p>
<p>If <code dir="ltr">inclusion_rule</code> is <code dir="ltr">FALSE</code>, then the procedure adds the rules to the negative rule set for the propagation.</p>
<p>In either case, the system creates the rule set if it does not exist.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t30" headers="r1c1-t30">
<p><code dir="ltr">and_condition</code></p>
</td>
<td class="cellalignment4329" headers="r13c1-t30 r1c2-t30">
<p>If non-<code dir="ltr">NULL</code>, appends the specified condition to the system-generated rule condition using an <code dir="ltr">AND</code> clause in the following way:</p>
<pre dir="ltr">(<span class="italic">system_condition</span>) AND (<span class="italic">and_condition</span>)
</pre>
<p>The variable in the specified condition must be <code dir="ltr">:lcr</code>. For example, to specify that the table rules generated by the procedure evaluate to <code dir="ltr">TRUE</code> only if the Oracle Streams tag is the hexadecimal equivalent of <code dir="ltr">&#39;02&#39;</code>, specify the following condition:</p>
<pre dir="ltr">:lcr.get_tag() = HEXTORAW(&#39;&#39;02&#39;&#39;)
</pre>
<p>The <code dir="ltr">:lcr</code> in the specified condition is converted to <code dir="ltr">:dml</code> or <code dir="ltr">:ddl</code>, depending on the rule that is being generated. If you are specifying an LCR member subprogram that is dependent on the LCR type (row or DDL), then make sure this procedure only generates the appropriate rule.</p>
<p>Specifically, if you specify an LCR member subprogram that is valid only for row LCRs, then specify <code dir="ltr">TRUE</code> for the <code dir="ltr">include_dml</code> parameter and <code dir="ltr">FALSE</code> for the <code dir="ltr">include_ddl</code> parameter. If you specify an LCR member subprogram that is valid only for DDL LCRs, then specify <code dir="ltr">FALSE</code> for the <code dir="ltr">include_dml</code> parameter and <code dir="ltr">TRUE</code> for the <code dir="ltr">include_ddl</code> parameter.</p>
<p><span class="bold">See Also:</span> <a href="t_lcr.htm#BABGGBHF">Chapter 275, &#34;Logical Change Record TYPEs&#34;</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t30" headers="r1c1-t30">
<p><code dir="ltr">queue_to_queue</code></p>
</td>
<td class="cellalignment4329" headers="r14c1-t30 r1c2-t30">
<p>If <code dir="ltr">TRUE</code> or <code dir="ltr">NULL</code>, then a new propagation created by this procedure is a queue to queue propagation. A queue-to-queue propagation always has its own propagation job and uses a service for automatic failover when the destination queue is a buffered queue in an Oracle Real Application Clusters (Oracle RAC) database.</p>
<p>If <code dir="ltr">FALSE</code>, then a new propagation created by this procedure is a queue-to-dblink propagation. A queue-to-dblink propagation can share a propagation job with other propagations that use the same database link and does not support automatic failover in an Oracle RAC environment.</p>
<p>This procedure cannot change the queue to queue property of an exiting propagation. If the specified propagation exists, then the procedure behaves in the following way for each setting:</p>
<ul>
<li>
<p>If <code dir="ltr">TRUE</code> and the specified propagation is not a queue to queue propagation, then the procedure raises an error.</p>
</li>
<li>
<p>If <code dir="ltr">FALSE</code> and the specified propagation is a queue to queue propagation, then the procedure raises an error.</p>
</li>
<li>
<p>If <code dir="ltr">NULL</code>, then the procedure does not change the queue to queue property of the propagation.</p>
</li>
</ul>
<p><span class="bold">See Also:</span> <a class="olink STRMS155" href="../STRMS/strms_prop.htm#STRMS155"><span class="italic">Oracle Streams Concepts and Administration</span></a> for more information about queue-to-queue propagations</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16220"></a>Usage Notes</p>
<p>This procedure configures propagation using the current user. Only one propagation is allowed between a particular source queue and destination queue.</p>
<p>This procedure creates DML and DDL rules automatically based on <code dir="ltr">include_dml</code> and <code dir="ltr">include_ddl</code> parameter values, respectively. Each rule has a system-generated rule name that consists of the table name with a sequence number appended to it. The sequence number is used to avoid naming conflicts. If the table name plus the sequence number is too long, then the table name is truncated. A propagation uses the rules for filtering.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16221"></a>Examples</p>
<p>The following is an example of a table rule condition created for filtering DML statements:</p>
<pre dir="ltr">(((:dml.get_object_owner() = &#39;HR&#39; and :dml.get_object_name() = &#39;LOCATIONS&#39;)) 
and :dml.is_null_tag() = &#39;Y&#39; and :dml.get_source_database_name() = &#39;DBS1.NET&#39; )
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS74043" class="refsect2"><a id="CHDBDCDG"></a>
<h3 class="refsect2">ADD_TABLE_RULES Procedure<a id="sthref16222"></a><a id="sthref16223"></a><a id="sthref16224"></a><a id="sthref16225"></a><a id="sthref16226"></a><a id="sthref16227"></a><a id="sthref16228"></a></h3>
<p>This procedure adds rules to a rule set of one of the following types of XStream clients:</p>
<ul>
<li>
<p>When the <code dir="ltr">streams_type</code> parameter is set to <code dir="ltr">capture</code>, this procedure adds capture process rules for capturing changes to a specified table.</p>
<p>This procedure creates the specified capture process if it does not exist.</p>
</li>
<li>
<p>When the <code dir="ltr">streams_type</code> parameter is set to <code dir="ltr">apply</code> and the <code dir="ltr">streams_name</code> parameter specifies the name of an apply process, outbound server, or inbound server, this procedure adds apply rules for applying logical change records (LCRs) that contain changes to a specified table. The rules can specify that the LCRs must be from a particular source database.</p>
<p>This procedure creates an apply process if no apply process, outbound server, or inbound server exists with the specified <code dir="ltr">streams_name</code>. This procedure can add rules to an outbound server or inbound server, but it cannot create an outbound server or inbound server.</p>
</li>
</ul>
<p>This procedure is overloaded. One version of this procedure contains two <code dir="ltr">OUT</code> parameters, and the other does not.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16229"></a>Syntax</p>
<pre dir="ltr">DBMS_XSTREAM_ADM.ADD_TABLE_RULES(
   table_name             IN   VARCHAR2,
   streams_type           IN   VARCHAR2,
   streams_name           IN   VARCHAR2  DEFAULT NULL,
   queue_name             IN   VARCHAR2  DEFAULT &#39;streams_queue&#39;,
   include_dml            IN   BOOLEAN   DEFAULT TRUE,
   include_ddl            IN   BOOLEAN   DEFAULT FALSE,
   include_tagged_lcr     IN   BOOLEAN   DEFAULT FALSE,
   source_database        IN   VARCHAR2  DEFAULT NULL,
   dml_rule_name          OUT  VARCHAR2,
   ddl_rule_name          OUT  VARCHAR2,
   inclusion_rule         IN   BOOLEAN   DEFAULT TRUE,
   and_condition          IN   VARCHAR2  DEFAULT NULL,
   source_root_name       IN  VARCHAR2   DEFAULT NULL,
   source_container_name  IN  VARCHAR2   DEFAULT NULL);

DBMS_XSTREAM_ADM.ADD_TABLE_RULES(
   table_name             IN   VARCHAR2,
   streams_type           IN   VARCHAR2,
   streams_name           IN   VARCHAR2  DEFAULT NULL,
   queue_name             IN   VARCHAR2  DEFAULT &#39;streams_queue&#39;,
   include_dml            IN   BOOLEAN   DEFAULT TRUE,
   include_ddl            IN   BOOLEAN   DEFAULT FALSE,
   include_tagged_lcr     IN   BOOLEAN   DEFAULT FALSE,
   source_database        IN   VARCHAR2  DEFAULT NULL,
   inclusion_rule         IN   BOOLEAN   DEFAULT TRUE,
   and_condition          IN   VARCHAR2  DEFAULT NULL,
   source_root_name       IN  VARCHAR2   DEFAULT NULL,
   source_container_name  IN  VARCHAR2   DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16230"></a>Parameters</p>
<div id="ARPLS74044" class="tblformal">
<p class="titleintable"><a id="sthref16231"></a><a id="sthref16232"></a>Table 204-12 ADD_TABLE_RULES Procedure Parameters</p>
<table class="cellalignment4330" title="ADD_TABLE_RULES Procedure Parameters" summary="This table describes the Parameters of DBMS_XSTREAM_ADM.ADD_TABLE_RULES subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t31">Parameter</th>
<th class="cellalignment4328" id="r1c2-t31">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t31" headers="r1c1-t31">
<p><code dir="ltr">table_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t31 r1c2-t31">
<p>The name of the table specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">object_name</span></code>. For example, <code dir="ltr">hr.employees</code>. If the schema is not specified, then the current user is the default.</p>
<p>You can specify a table that does not yet exist, because Oracle Streams does not validate the existence of the table.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t31" headers="r1c1-t31">
<p><code dir="ltr">streams_type</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t31 r1c2-t31">
<p>The type of XStream client:</p>
<ul>
<li>
<p>Specify <code dir="ltr">capture</code> for a capture process.</p>
</li>
<li>
<p>Specify <code dir="ltr">apply</code> for an apply process.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t31" headers="r1c1-t31">
<p><code dir="ltr">streams_name</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t31 r1c2-t31">
<p>The name of the capture process or apply process. Do not specify an owner.</p>
<p>If <code dir="ltr">NULL</code>, if <code dir="ltr">streams_type</code> is <code dir="ltr">capture</code>, and if one relevant capture process for the queue exists, then the procedure uses the relevant XStream client. If no relevant XStream client exists for the queue, then the procedure creates an XStream client automatically with a system-generated name. If <code dir="ltr">NULL</code> and multiple XStream clients of the specified <code dir="ltr">streams_type</code> for the queue exist, then the procedure raises an error.</p>
<p>If <code dir="ltr">NULL</code>, if <code dir="ltr">streams_type</code> is <code dir="ltr">apply</code>, and if one relevant apply process exists, then the procedure uses the relevant apply process. The relevant apply process is identified in one of the following ways:</p>
<ul>
<li>
<p>If one existing apply process has the source database specified in <code dir="ltr">source_database</code> and uses the queue specified in <code dir="ltr">queue_name</code>, then the procedure uses this apply process.</p>
</li>
<li>
<p>If <code dir="ltr">source_database</code> is <code dir="ltr">NULL</code> and one existing apply process is using the queue specified in <code dir="ltr">queue_name</code>, then the procedure uses this apply process.</p>
</li>
</ul>
<p>If <code dir="ltr">NULL</code> and no relevant apply process exists, then the procedure creates an apply process automatically with a system-generated name.</p>
<p>If <code dir="ltr">NULL</code> and multiple relevant apply processes exist, then the procedure raises an error.</p>
<p>Each apply process must have a unique name.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t31" headers="r1c1-t31">
<p><code dir="ltr">queue_name</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t31 r1c2-t31">
<p>The name of the local queue, specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">queue_name</span></code>. The current database must contain the queue, and the queue must be <code dir="ltr">ANYDATA</code> type.</p>
<p>For example, to specify a queue named <code dir="ltr">streams_queue</code> in the <code dir="ltr">strmadmin</code> schema, enter <code dir="ltr">strmadmin.streams_queue</code> for this parameter. If the schema is not specified, then the current user is the default.</p>
<p>For capture process rules, this is the queue into which a capture process enqueues LCRs. For outbound server rules, this is the queue from which the outbound server dequeues LCRs. For inbound server rules, this is the queue into which an inbound server enqueues error transactions.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t31" headers="r1c1-t31">
<p><code dir="ltr">include_dml</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t31 r1c2-t31">
<p>If <code dir="ltr">TRUE</code>, then the procedure creates a DML rule for DML changes. If <code dir="ltr">FALSE</code>, then the procedure does not create a DML rule. <code dir="ltr">NULL</code> is not permitted.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t31" headers="r1c1-t31">
<p><code dir="ltr">include_ddl</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t31 r1c2-t31">
<p>If <code dir="ltr">TRUE</code>, then the procedure creates a DDL rule for DDL changes. If <code dir="ltr">FALSE</code>, then the procedure does not create a DDL rule. <code dir="ltr">NULL</code> is not permitted.</p>
<p>The generated rule evaluates to <code dir="ltr">TRUE</code> for any DDL change that operates on the table or on an object that is part of the table, such as an index or trigger on the table. The rule evaluates to <code dir="ltr">FALSE</code> for any DDL change that either does not refer to the table or refers to the table in a subordinate way. For example, the rule evaluates to <code dir="ltr">FALSE</code> for changes that create synonyms or views based on the table. The rule also evaluates to <code dir="ltr">FALSE</code> for a change to a PL/SQL subprogram that refers to the table.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t31" headers="r1c1-t31">
<p><code dir="ltr">include_tagged_lcr</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t31 r1c2-t31">
<p>If <code dir="ltr">TRUE</code>, then the procedure does not add a condition regarding Oracle Streams tags to the generated rules. Therefore, these rules can evaluate to <code dir="ltr">TRUE</code> regardless of whether a redo entry, session, or LCR has a non-<code dir="ltr">NULL</code> tag. If the rules are added to the positive rule set for the XStream client, then the XStream client performs its action regardless of the tag:</p>
<ul>
<li>
<p>A redo entry is always considered for capture by a capture process, regardless of whether the redo entry has a non-<code dir="ltr">NULL</code> tag.</p>
</li>
<li>
<p>An LCR is always considered for apply by an apply process, regardless of whether redo entry or LCR has a non-<code dir="ltr">NULL</code> tag.</p>
</li>
</ul>
<p>If the rules are added to a positive rule set, then setting this parameter to <code dir="ltr">TRUE</code> is appropriate for a full (for example, standby) copy of a database. If the rules are added to the negative rule set for the XStream client, then whether a database change is discarded does not depend on the tag.</p>
<p>If <code dir="ltr">FALSE</code>, then the procedure adds a condition to each generated rule that causes the rule to evaluate to <code dir="ltr">TRUE</code> only if a redo entry, session, or LCR has a <code dir="ltr">NULL</code> Oracle Streams tag. If the rules are added to the positive rule set for an XStream client, then the XStream client performs its action only when the tag is <code dir="ltr">NULL</code>:</p>
<ul>
<li>
<p>A redo entry is considered for capture by a capture process only when the redo entry contains a <code dir="ltr">NULL</code> tag.</p>
</li>
<li>
<p>An LCR is considered for apply by an apply process only if the LCR contains a <code dir="ltr">NULL</code> tag.</p>
</li>
</ul>
<p>If the rules are added to a positive rule set, then setting this parameter to <code dir="ltr">FALSE</code> might be appropriate in update-anywhere configurations to avoid sending a change back to its source database. If the rules are added to the negative rule set for the XStream client, then a database change can be discarded only if it has a <code dir="ltr">NULL</code> tag.</p>
<p>A setting of <code dir="ltr">FALSE</code> is often specified in update-anywhere configurations to avoid sending a change back to its source database.</p>
<p>Usually, specify <code dir="ltr">TRUE</code> for this parameter if the <code dir="ltr">inclusion_rule</code> parameter is set to <code dir="ltr">FALSE</code>.</p>
<p><span class="bold">See Also:</span> <a class="olink STREP008" href="../STREP/rep_tags.htm#STREP008"><span class="italic">Oracle Streams Replication Administrator&#39;s Guide</span></a> for more information about tags</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t31" headers="r1c1-t31">
<p><code dir="ltr">source_database</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t31 r1c2-t31">
<p>The global name of the source database. If <code dir="ltr">NULL</code>, then the procedure does not add a condition regarding the source database to the generated rules.</p>
<p>For capture process rules, specify <code dir="ltr">NULL</code> or the global name of the local database if you are creating a capture process locally at the source database. If you are adding rules to a downstream capture process rule set at a downstream database, then specify the source database of the changes that will be captured.</p>
<p>For apply process rules, specify the source database of the changes that will be applied by the apply process. The source database is the database where the changes originated. If an apply process applies captured LCRs, then the apply process can apply LCRs from only one capture process at one source database.</p>
<p>In a CDB, specify the global name of the container to which the rules pertain. The container can be the root or a PDB. For example, <code dir="ltr">mycdb.example.com</code> or <code dir="ltr">hrpdb.example.com</code>. See <a class="olink XSTRM72988" href="../XSTRM/xstrm_gen_cncpt.htm#XSTRM72988"><span class="italic">Oracle Database XStream Guide</span></a> for more information about setting this parameter in a CDB.</p>
<p>If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify <code dir="ltr">DBS1</code> and the domain is <code dir="ltr">.NET</code>, then the procedure specifies <code dir="ltr">DBS1.NET</code> automatically.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t31" headers="r1c1-t31">
<p><code dir="ltr">dml_rule_name</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t31 r1c2-t31">
<p>If <code dir="ltr">include_dml</code> is <code dir="ltr">TRUE</code>, then this parameter contains the DML rule name.</p>
<p>If <code dir="ltr">include_dml</code> is <code dir="ltr">FALSE</code>, then this parameter contains a <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t31" headers="r1c1-t31">
<p><code dir="ltr">ddl_rule_name</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t31 r1c2-t31">
<p>If <code dir="ltr">include_ddl</code> is <code dir="ltr">TRUE</code>, then this parameter contains the DDL rule name.</p>
<p>If <code dir="ltr">include_ddl</code> is <code dir="ltr">FALSE</code>, then this parameter contains a <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t31" headers="r1c1-t31">
<p><code dir="ltr">inclusion_rule</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t31 r1c2-t31">
<p>If <code dir="ltr">inclusion_rule</code> is <code dir="ltr">TRUE</code>, then the procedure adds the rules to the positive rule set for the XStream client.</p>
<p>If <code dir="ltr">inclusion_rule</code> is <code dir="ltr">FALSE</code>, then the procedure adds the rules to the negative rule set for the XStream client.</p>
<p>In either case, the system creates the rule set if it does not exist.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t31" headers="r1c1-t31">
<p><code dir="ltr">and_condition</code></p>
</td>
<td class="cellalignment4329" headers="r13c1-t31 r1c2-t31">
<p>If non-<code dir="ltr">NULL</code>, appends the specified condition to the system-generated rule condition using an <code dir="ltr">AND</code> clause in the following way:</p>
<pre dir="ltr">(<span class="italic">system_condition</span>) AND (<span class="italic">and_condition</span>)
</pre>
<p>The variable in the specified condition must be <code dir="ltr">:lcr</code>. For example, to specify that the table rules generated by the procedure evaluate to <code dir="ltr">TRUE</code> only if the Oracle Streams tag is the hexadecimal equivalent of <code dir="ltr">&#39;02&#39;</code>, specify the following condition:</p>
<pre dir="ltr">:lcr.get_tag() = HEXTORAW(&#39;&#39;02&#39;&#39;)
</pre>
<p>The <code dir="ltr">:lcr</code> in the specified condition is converted to <code dir="ltr">:dml</code> or <code dir="ltr">:ddl</code>, depending on the rule that is being generated. If you are specifying an LCR member subprogram that is dependent on the LCR type (row or DDL), then make sure this procedure only generates the appropriate rule.</p>
<p>Specifically, if you specify an LCR member subprogram that is valid only for row LCRs, then specify <code dir="ltr">TRUE</code> for the <code dir="ltr">include_dml</code> parameter and <code dir="ltr">FALSE</code> for the <code dir="ltr">include_ddl</code> parameter. If you specify an LCR member subprogram that is valid only for DDL LCRs, then specify <code dir="ltr">FALSE</code> for the <code dir="ltr">include_dml</code> parameter and <code dir="ltr">TRUE</code> for the <code dir="ltr">include_ddl</code> parameter.</p>
<p><span class="bold">See Also:</span> <a href="t_lcr.htm#BABGGBHF">Chapter 275, &#34;Logical Change Record TYPEs&#34;</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t31" headers="r1c1-t31">
<p><code dir="ltr">source_root_name</code></p>
</td>
<td class="cellalignment4329" headers="r14c1-t31 r1c2-t31">
<p>The global name of the root in the source CDB. For example, <code dir="ltr">mycdb.example.com</code>.</p>
<p>If this parameter is <code dir="ltr">NULL</code>, then the global name of the root in the local CDB is used. If you are configuring downstream capture, then this parameter must be a non-<code dir="ltr">NULL</code> value, and it must specify the global name of the root in the remote source CDB. See <a class="olink XSTRM72988" href="../XSTRM/xstrm_gen_cncpt.htm#XSTRM72988"><span class="italic">Oracle Database XStream Guide</span></a> for more information about setting this parameter in a CDB.</p>
<p>If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify <code dir="ltr">DBS1</code> and the domain is <code dir="ltr">EXAMPLE.COM</code>, then the procedure specifies <code dir="ltr">DBS1.EXAMPLE.COM</code> automatically.</p>
<p><span class="bold">Note:</span> This parameter only applies to a CDB.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r15c1-t31" headers="r1c1-t31">
<p><code dir="ltr">source_container_name</code></p>
</td>
<td class="cellalignment4329" headers="r15c1-t31 r1c2-t31">
<p>The short name of the source container. The container can be the root or a PDB. For example, <code dir="ltr">CDB$ROOT</code> or <code dir="ltr">hrpdb</code>. See <a class="olink XSTRM72988" href="../XSTRM/xstrm_gen_cncpt.htm#XSTRM72988"><span class="italic">Oracle Database XStream Guide</span></a> for more information about setting this parameter in a CDB.</p>
<p><span class="bold">Note:</span> This parameter only applies to a CDB.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16233"></a>Usage Notes</p>
<p>This procedure creates DML and DDL rules automatically based on <code dir="ltr">include_dml</code> and <code dir="ltr">include_ddl</code> parameter values, respectively. Each rule has a system-generated rule name that consists of the table name with a sequence number appended to it. The sequence number is used to avoid naming conflicts. If the table name plus the sequence number is too long, then the table name is truncated. A capture process or apply process uses the rules for filtering.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#CACCHJJC">&#34;Operational Notes&#34;</a></p>
</li>
<li>
<p><a href="#CACCADJE">&#34;Security Model&#34;</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16234"></a>Examples</p>
<p>The following is an example of a table rule condition created for DML changes:</p>
<pre dir="ltr">(((:dml.get_object_owner() = &#39;HR&#39; and :dml.get_object_name() = &#39;LOCATIONS&#39;)) 
and :dml.is_null_tag() = &#39;Y&#39; and :dml.get_source_database_name() = &#39;DBS1.NET&#39; )
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS70192" class="refsect2"><a id="CACHIFDH"></a>
<h3 class="refsect2">ALTER_INBOUND Procedure<a id="sthref16235"></a></h3>
<p>This procedure modifies an XStream inbound server.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16236"></a>Syntax</p>
<pre dir="ltr">DBMS_XSTREAM_ADM.ALTER_INBOUND(
   server_name IN VARCHAR2,
   apply_user  IN VARCHAR2  DEFAULT NULL,  
   comment     IN VARCHAR2  DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16237"></a>Parameters</p>
<div id="ARPLS70193" class="tblformal">
<p class="titleintable"><a id="sthref16238"></a><a id="sthref16239"></a>Table 204-13 ALTER_INBOUND Procedure Parameters</p>
<table class="cellalignment4330" title="ALTER_INBOUND Procedure Parameters" summary="This table describes the parameters of DBMS_XSTREAM_ADM.ALTER_INBOUND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t33">Parameter</th>
<th class="cellalignment4328" id="r1c2-t33">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t33" headers="r1c1-t33">
<p><code dir="ltr">server_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t33 r1c2-t33">
<p>The name of the inbound server being altered. Specify an existing inbound server. Do not specify an owner.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t33" headers="r1c1-t33">
<p><code dir="ltr">apply_user</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t33 r1c2-t33">
<p>The user who applies all DML and DDL changes that satisfy the inbound server rule sets, who runs user-defined apply handlers, and who runs custom rule-based transformations configured for inbound server rules.</p>
<p>The client application must attach to the inbound server as the apply user.</p>
<p>Specify a user to change the apply user. In this case, the user who invokes the <code dir="ltr">ALTER_INBOUND</code> procedure must be granted the <code dir="ltr">DBA</code> role. Only the <code dir="ltr">SYS</code> user can set the <code dir="ltr">apply_user</code> to <code dir="ltr">SYS</code>.</p>
<p>If <code dir="ltr">NULL</code>, then the apply user is not changed.</p>
<p>See <a href="#CACEGCGG">&#34;CREATE_INBOUND Procedure&#34;</a> for information about the required privileges for an apply user.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t33" headers="r1c1-t33">
<p><code dir="ltr">comment</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t33 r1c2-t33">
<p>An optional comment associated with the inbound server.</p>
<p>If non-<code dir="ltr">NULL</code>, then the specified comment replaces the existing comment.</p>
<p>If <code dir="ltr">NULL</code>, then the existing comment is not changed.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS70194" class="refsect2"><a id="CACEFHHB"></a>
<h3 class="refsect2">ALTER_OUTBOUND Procedure<a id="sthref16240"></a></h3>
<p>This procedure modifies an XStream outbound server configuration.</p>
<p>This procedure always alters the specified outbound server. This procedure can also alter the outbound server&#39;s capture process when either of the following conditions is met:</p>
<ul>
<li>
<p>The capture process was created by the <code dir="ltr">CREATE_OUTBOUND</code> procedure in this package.</p>
</li>
<li>
<p>The queue used by the capture process was created by the <code dir="ltr">CREATE_OUTBOUND</code> procedure.</p>
</li>
</ul>
<p>To check whether this procedure can alter the outbound server&#39;s capture process, query the <code dir="ltr">CAPTURE_NAME</code> column in the <code dir="ltr">ALL_XSTREAM_OUTBOUND</code> view. When the name of the capture process appears in the <code dir="ltr">CAPTURE_NAME</code> column of this view, the <code dir="ltr">ALTER_OUTBOUND</code> procedure can manage the capture process&#39;s rules or change the capture user for the capture process. When the <code dir="ltr">CAPTURE_NAME</code> column of this view is <code dir="ltr">NULL</code>, the <code dir="ltr">ALTER_OUTBOUND</code> procedure cannot manage the capture process.</p>
<p>This procedure is overloaded. One <code dir="ltr">table_names</code> parameter is type <code dir="ltr">VARCHAR2</code> and the other <code dir="ltr">table_names</code> parameter is type <code dir="ltr">DBMS_UTILITY.UNCL_ARRAY</code>. Also, one <code dir="ltr">schema_names</code> parameter is type <code dir="ltr">VARCHAR2</code> and the other <code dir="ltr">schema_names</code> parameter is type <code dir="ltr">DBMS_UTILITY.UNCL_ARRAY</code>. These parameters enable you to enter the list of tables and schemas in different ways and are mutually exclusive.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Starting with Oracle Database 11<span class="italic">g</span> Release 2 (11.2.0.2), the <code dir="ltr">start_scn</code> and <code dir="ltr">start_time</code> parameters are included in this procedure.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16241"></a>Syntax</p>
<pre dir="ltr">DBMS_XSTREAM_ADM.ALTER_OUTBOUND(
   server_name           IN VARCHAR2,
   table_names           IN DBMS_UTILITY.UNCL_ARRAY,
   schema_names          IN DBMS_UTILITY.UNCL_ARRAY,
   add                   IN BOOLEAN    DEFAULT TRUE,
   capture_user          IN VARCHAR2   DEFAULT NULL,
   connect_user          IN VARCHR2    DEFAULT NULL,
   comment               IN VARCHAR2   DEFAULT NULL,
   inclusion_rule        IN BOOLEAN    DEFAULT TRUE,
   start_scn             IN NUMBER     DEFAULT NULL,
   start_time            IN TIMESTAMP  DEFAULT NULL,
   include_dml           IN BOOLEAN    DEFAULT TRUE,
   include_ddl           IN BOOLEAN    DEFAULT FALSE,
   source_database       IN VARCHAR2   DEFAULT NULL,
   source_container_name IN VARCHAR2   DEFAULT NULL);

DBMS_XSTREAM_ADM.ALTER_OUTBOUND(
   server_name           IN VARCHAR2,
   table_names           IN VARCHAR2   DEFAULT NULL,
   schema_names          IN VARCHAR2   DEFAULT NULL,
   add                   IN BOOLEAN    DEFAULT TRUE,
   capture_user          IN VARCHAR2   DEFAULT NULL,
   connect_user          IN VARCHAR2   DEFAULT NULL,
   comment               IN VARCHAR2   DEFAULT NULL,
   inclusion_rule        IN BOOLEAN    DEFAULT TRUE,
   start_scn             IN NUMBER     DEFAULT NULL,
   start_time            IN TIMESTAMP  DEFAULT NULL,
   include_dml           IN BOOLEAN    DEFAULT TRUE,
   include_ddl           IN BOOLEAN    DEFAULT FALSE,
   source_database       IN VARCHAR2   DEFAULT NULL,
   source_container_name IN VARCHAR2   DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16242"></a>Parameters</p>
<div id="ARPLS70195" class="tblformal">
<p class="titleintable"><a id="sthref16243"></a><a id="sthref16244"></a>Table 204-14 ALTER_OUTBOUND Procedure Parameters</p>
<table class="cellalignment4330" title="ALTER_OUTBOUND Procedure Parameters" summary="This table describes the parameters of DBMS_XSTREAM_ADM.ALTER_OUTBOUND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t35">Parameter</th>
<th class="cellalignment4328" id="r1c2-t35">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t35" headers="r1c1-t35">
<p><code dir="ltr">server_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t35 r1c2-t35">
<p>The name of the outbound server being altered. Specify an existing outbound server. Do not specify an owner.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t35" headers="r1c1-t35">
<p><code dir="ltr">table_names</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t35 r1c2-t35">
<p>The tables that are either added to or removed from the XStream Out configuration. Whether the tables are added or removed depends on the setting for the <code dir="ltr">add</code> parameter.</p>
<p>The tables can be specified in the following ways:</p>
<ul>
<li>
<p>Comma-delimited list of type <code dir="ltr">VARCHAR2</code>.</p>
</li>
<li>
<p>A PL/SQL associative array of type <code dir="ltr">DBMS_UTILITY.UNCL_ARRAY</code>, where each element is the name of a table. Specify the first table in position 1. The last position must be <code dir="ltr">NULL</code>.</p>
</li>
</ul>
<p>Each table should be specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">table_name</span></code>. For example, <code dir="ltr">hr.employees</code>. If the schema is not specified, then the current user is the default.</p>
<p><span class="bold">See Also:</span> <a href="#CIAHDHCE">&#34;Usage Notes&#34;</a> for more information about this parameter</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t35" headers="r1c1-t35">
<p><code dir="ltr">schema_names</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t35 r1c2-t35">
<p>The schemas that are either added to or removed from the XStream Out configuration. Whether the schemas are added or removed depends on the setting for the <code dir="ltr">add</code> parameter.</p>
<p>The schemas can be specified in the following ways:</p>
<ul>
<li>
<p>Comma-delimited list of type <code dir="ltr">VARCHAR2</code>.</p>
</li>
<li>
<p>A PL/SQL associative array of type <code dir="ltr">DBMS_UTILITY.UNCL_ARRAY</code>, where each element is the name of a schema. Specify the first schema in position 1. The last position must be <code dir="ltr">NULL</code>.</p>
</li>
</ul>
<p><span class="bold">Note:</span> This procedure does not concatenate the <code dir="ltr">schema_names</code> parameter with the <code dir="ltr">table_names</code> parameter. To specify tables, enter fully qualified table names in the <code dir="ltr">table_names</code> parameter (<code dir="ltr"><span class="codeinlineitalic">schema_name.table_name</span></code>).</p>
<p><span class="bold">See Also:</span> <a href="#CIAHDHCE">&#34;Usage Notes&#34;</a> for more information about this parameter</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t35" headers="r1c1-t35">
<p><code dir="ltr">add</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t35 r1c2-t35">
<p>If <code dir="ltr">TRUE</code>, then the procedure adds to the XStream Out configuration the tables specified in the <code dir="ltr">table_names</code> parameter and the schemas specified in the <code dir="ltr">schema_names</code> parameter.</p>
<p>If <code dir="ltr">FALSE</code>, then the procedure removes from the XStream Out configuration the tables specified in the <code dir="ltr">table_names</code> parameter and the schemas specified in the <code dir="ltr">schema_names</code> parameter.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t35" headers="r1c1-t35">
<p><code dir="ltr">capture_user</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t35 r1c2-t35">
<p>The user in whose security domain a capture process captures changes that satisfy its rule sets and runs custom rule-based transformations configured for capture process rules.</p>
<p>Specify a user to change the capture user. In this case, the user who invokes the <code dir="ltr">ALTER_OUTBOUND</code> procedure must be granted the <code dir="ltr">DBA</code> role. Only the <code dir="ltr">SYS</code> user can set the <code dir="ltr">capture_user</code> to <code dir="ltr">SYS</code>.</p>
<p>If <code dir="ltr">NULL</code>, then the capture user is not changed.</p>
<p>If you change the capture user, then this procedure grants the new capture user enqueue privilege on the queue used by the capture process and configures the user as a secure queue user.</p>
<p>Ensure that the capture user is granted the other required privileges. See <a href="#CACBHJDD">&#34;CREATE_OUTBOUND Procedure&#34;</a> for information about the privileges required by a capture user.</p>
<p>The capture process is stopped and restarted automatically when you change the value of this parameter.</p>
<p><span class="bold">Note:</span> If the capture user for a capture process is dropped using <code dir="ltr">DROP</code> <code dir="ltr">USER&nbsp;.&nbsp;.&nbsp;.&nbsp;</code> <code dir="ltr">CASCADE</code>, then the capture process is also dropped automatically.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t35" headers="r1c1-t35">
<p><code dir="ltr">connect_user</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t35 r1c2-t35">
<p>The user who can attach to the specified outbound server to retrieve the change stream. The XStream client application must attach to the outbound server as the specified connect user.</p>
<p>Specify a user to change the connect user. In this case, the user who invokes the <code dir="ltr">ALTER_OUTBOUND</code> procedure must be granted the <code dir="ltr">DBA</code> role. Only the <code dir="ltr">SYS</code> user can set the <code dir="ltr">connect_user</code> to <code dir="ltr">SYS</code>.</p>
<p>If <code dir="ltr">NULL</code>, then the connect user is not changed.</p>
<p>If you change the connect user, then this procedure grants the new connect user dequeue privileges on the queue used by the outbound server and configures the user as a secure queue user.</p>
<p>Ensure that the connect user is granted the other required privileges. See <a href="#CACBHJDD">&#34;CREATE_OUTBOUND Procedure&#34;</a> for information about the privileges required by a connect user.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t35" headers="r1c1-t35">
<p><code dir="ltr">comment</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t35 r1c2-t35">
<p>An optional comment associated with the outbound server.</p>
<p>If non-<code dir="ltr">NULL</code>, then the specified comment replaces the existing comment.</p>
<p>If <code dir="ltr">NULL</code>, then the existing comment is not changed.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t35" headers="r1c1-t35">
<p><code dir="ltr">inclusion_rule</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t35 r1c2-t35">
<p>If <code dir="ltr">TRUE</code> and the <code dir="ltr">add</code> parameter is set to <code dir="ltr">TRUE</code>, then the procedure adds rules for the tables specified in the <code dir="ltr">table_names</code> parameter and the schemas specified in the <code dir="ltr">schema_names</code> parameter to the positive rule sets in the XStream Out configuration. When rules for tables and schemas are in positive rule sets, the XStream Out configuration streams DML and DDL changes to the tables and schemas out to the client application.</p>
<p>If <code dir="ltr">TRUE</code> and the <code dir="ltr">add</code> parameter is set to <code dir="ltr">FALSE</code>, then the procedure removes rules for the tables specified in the <code dir="ltr">table_names</code> parameter and the schemas specified in the <code dir="ltr">schema_names</code> parameter from the positive rule sets in the XStream Out configuration.</p>
<p>If <code dir="ltr">FALSE</code> and the <code dir="ltr">add</code> parameter is set to <code dir="ltr">TRUE</code>, then the procedure adds rules for the tables specified in the <code dir="ltr">table_names</code> parameter and the schemas specified in the <code dir="ltr">schema_names</code> parameter to the negative rule sets in the XStream Out configuration. When rules for tables and schemas are in negative rule sets, the XStream Out configuration does not stream changes to the tables and schemas out to the client application.</p>
<p>If <code dir="ltr">FALSE</code> and the <code dir="ltr">add</code> parameter is set to <code dir="ltr">FALSE</code>, then the procedure removes rules for the tables specified in the <code dir="ltr">table_names</code> parameter and the schemas specified in the <code dir="ltr">schema_names</code> parameter from the negative rule sets in the XStream Out configuration.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t35" headers="r1c1-t35">
<p><code dir="ltr">start_scn</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t35 r1c2-t35">
<p>A valid SCN for the database from which the capture process starts capturing changes. To be valid, the SCN value must be greater than or equal to the first SCN for the capture process.</p>
<p>If a valid SCN is specified, then the capture process captures changes from the specified SCN when it is restarted.</p>
<p>An error is returned if an invalid SCN is specified.</p>
<p>If <code dir="ltr">NULL</code> and the <code dir="ltr">start_time</code> parameter is <code dir="ltr">NULL</code>, then the start SCN is not changed.</p>
<p>If <code dir="ltr">NULL</code> and the <code dir="ltr">start_time</code> parameter is non-<code dir="ltr">NULL</code>, then the start SCN is changed to match the specified start time.</p>
<p>The <code dir="ltr">start_scn</code> and <code dir="ltr">start_time</code> parameters are mutually exclusive.</p>
<p><span class="bold">Note:</span> If the capture process is enabled, then the <code dir="ltr">ALTER_OUTBOUND</code> procedure automatically stops and restarts the capture process when the <code dir="ltr">start_scn</code> parameter is non-<code dir="ltr">NULL</code>. If the capture process is disabled, then the <code dir="ltr">ALTER_OUTBOUND</code> procedure automatically starts the capture process when the <code dir="ltr">start_scn</code> parameter is non-<code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t35" headers="r1c1-t35">
<p><code dir="ltr">start_time</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t35 r1c2-t35">
<p>A valid time from which the capture process starts capturing changes. To be valid, the time must correspond to an SCN value that is greater than or equal to the first SCN for the capture process.</p>
<p>If a valid time is specified, then the capture process captures changes from the specified time when it is restarted.</p>
<p>An error is returned if an invalid time is specified.</p>
<p>If <code dir="ltr">NULL</code> and the <code dir="ltr">start_scn</code> parameter is <code dir="ltr">NULL</code>, then the start time is not changed.</p>
<p>If <code dir="ltr">NULL</code> and the <code dir="ltr">start_scn</code> parameter is non-<code dir="ltr">NULL</code>, then the start time is changed to match the specified start SCN.</p>
<p>The <code dir="ltr">start_scn</code> and <code dir="ltr">start_time</code> parameters are mutually exclusive.</p>
<p><span class="bold">Note:</span> If the capture process is enabled, then the <code dir="ltr">ALTER_OUTBOUND</code> procedure automatically stops and restarts the capture process when the <code dir="ltr">start_time</code> parameter is non-<code dir="ltr">NULL</code>. If the capture process is disabled, then the <code dir="ltr">ALTER_OUTBOUND</code> procedure automatically starts the capture process when the <code dir="ltr">start_time</code> parameter is non-<code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t35" headers="r1c1-t35">
<p><code dir="ltr">include_dml</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t35 r1c2-t35">
<p>If <code dir="ltr">TRUE</code>, then the procedure creates a DML rule for DML changes. If <code dir="ltr">FALSE</code>, then the procedure does not create a DML rule. <code dir="ltr">NULL</code> is not permitted.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t35" headers="r1c1-t35">
<p><code dir="ltr">include_ddl</code></p>
</td>
<td class="cellalignment4329" headers="r13c1-t35 r1c2-t35">
<p>If <code dir="ltr">TRUE</code>, then the procedure creates a DDL rule for DDL changes. If <code dir="ltr">FALSE</code>, then the procedure does not create a DDL rule. <code dir="ltr">NULL</code> is not permitted.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t35" headers="r1c1-t35">
<p><code dir="ltr">source_database</code></p>
</td>
<td class="cellalignment4329" headers="r14c1-t35 r1c2-t35">
<p>The global name of the container where the specified <code dir="ltr">table_names</code> and <code dir="ltr">schema_names</code> are located.</p>
<p>If <code dir="ltr">source_database</code> is non-<code dir="ltr">NULL</code>, then a condition is added to the outbound server&#39;s rules to filter the LCRs based on the global name of the source database.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r15c1-t35" headers="r1c1-t35">
<p><code dir="ltr">source_container_name</code></p>
</td>
<td class="cellalignment4329" headers="r15c1-t35 r1c2-t35">
<p>The short name of the source container. The container can be the root or a PDB. For example, <code dir="ltr">CDB$ROOT</code> or <code dir="ltr">hrpdb</code>. See <a class="olink XSTRM72988" href="../XSTRM/xstrm_gen_cncpt.htm#XSTRM72988"><span class="italic">Oracle Database XStream Guide</span></a> for more information about setting this parameter in a CDB.</p>
<p><span class="bold">Note:</span> This parameter only applies to a CDB.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="CIAHDHCE"></a>Usage Notes</p>
<p>The following list describes the behavior of the outbound server for various combinations of the <code dir="ltr">table_names</code> and <code dir="ltr">schema_names</code> parameters:</p>
<ul>
<li>
<p>If both the <code dir="ltr">table_names</code> and <code dir="ltr">schema_names</code> parameters are <code dir="ltr">NULL</code> or empty, then no rules are changed for the XStream Out configuration.</p>
<p>This procedure is overloaded. The <code dir="ltr">table_names</code> and <code dir="ltr">schema_names</code> parameters are defaulted to <code dir="ltr">NULL</code>. Do not specify <code dir="ltr">NULL</code> for both <code dir="ltr">table_names</code> and <code dir="ltr">schema_names</code> in the same call; otherwise, error <code dir="ltr">PLS-00307</code> is returned.</p>
</li>
<li>
<p>If both the <code dir="ltr">table_names</code> and <code dir="ltr">schema_names</code> parameters are specified, then the rules for the tables and schemas are added to or removed from the XStream Out configuration, depending on the setting of the <code dir="ltr">add</code> parameter.</p>
</li>
<li>
<p>If the <code dir="ltr">table_names</code> parameter is specified and the <code dir="ltr">schema_names</code> parameter is <code dir="ltr">NULL</code> or empty, then the rules for the tables are added to or removed from the XStream Out configuration, depending on the setting of the <code dir="ltr">add</code> parameter. The existing rules for schemas are not changed for the XStream Out configuration.</p>
</li>
<li>
<p>If the <code dir="ltr">table_names</code> parameter is <code dir="ltr">NULL</code> or empty and the <code dir="ltr">schema_names</code> parameter is specified, then the rules for the schemas are added to or removed from the XStream Out configuration, depending on the setting of the <code dir="ltr">add</code> parameter. The existing rules for tables are not changed for the XStream Out configuration.</p>
</li>
</ul>
<p>For the procedure that uses the <code dir="ltr">DBMS_UTILITY.UNCL_ARRAY</code> type for the <code dir="ltr">table_names</code> and <code dir="ltr">schema_names</code> parameters, both parameters must be specified. To specify only tables, the <code dir="ltr">schema_names</code> parameter must be specified and empty. To specify only schemas, the <code dir="ltr">table_names</code> parameter must be specified and empty.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
An empty array includes one <code dir="ltr">NULL</code> entry.</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS70196" class="refsect2"><a id="CACEGCGG"></a>
<h3 class="refsect2">CREATE_INBOUND Procedure<a id="sthref16245"></a></h3>
<p>This procedure creates an XStream inbound server and its queue.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
A client application can create multiple sessions. Each session can attach to only one inbound server, and each inbound server can serve only one session at a time. However, different client application sessions can connect to different inbound servers. See <a class="olink LNOCI" href="../LNOCI/toc.htm"><span class="italic">Oracle Call Interface Programmer&#39;s Guide</span></a> and <a class="olink STXJV" href="../STXJV/toc.htm"><span class="italic">Oracle Database XStream Java API Reference</span></a> for information about attaching to an inbound server.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16246"></a>Syntax</p>
<pre dir="ltr">DBMS_XSTREAM_ADM.CREATE_INBOUND(
   server_name IN VARCHAR2,
   queue_name  IN VARCHAR2,
   apply_user  IN VARCHAR2  DEFAULT NULL,  
   comment     IN VARCHAR2  DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16247"></a>Parameters</p>
<div id="ARPLS70197" class="tblformal">
<p class="titleintable"><a id="sthref16248"></a><a id="sthref16249"></a>Table 204-15 CREATE_INBOUND Procedure Parameters</p>
<table class="cellalignment4330" title="CREATE_INBOUND Procedure Parameters" summary="This table describes the parameters of DBMS_XSTREAM_ADM.CREATE_INBOUND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t38">Parameter</th>
<th class="cellalignment4328" id="r1c2-t38">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t38" headers="r1c1-t38">
<p><code dir="ltr">server_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t38 r1c2-t38">
<p>The name of the inbound server being created. A <code dir="ltr">NULL</code> specification is not allowed. Do not specify an owner.</p>
<p>The specified name must not match the name of an existing outbound server, inbound server, apply process, or messaging client.</p>
<p><span class="bold">Note:</span> The <code dir="ltr">server_name</code> setting cannot exceed 30 bytes, and it cannot be altered after the inbound server is created.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t38" headers="r1c1-t38">
<p><code dir="ltr">queue_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t38 r1c2-t38">
<p>The name of the local queue used by the inbound server, specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">queue_name</span></code>.</p>
<p>If the specified queue exists, then it is used. If the specified queue does not exist, then the procedure creates it.</p>
<p>For example, to specify a queue named <code dir="ltr">xstream_queue</code> in the <code dir="ltr">xstrmadmin</code> schema, enter <code dir="ltr">xstrmadmin.xstream_queue</code> for this parameter. If the schema is not specified, then the current user is the default.</p>
<p><span class="bold">Note:</span> An inbound server&#39;s queue is used only to store error transactions.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t38" headers="r1c1-t38">
<p><code dir="ltr">apply_user</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t38 r1c2-t38">
<p>The apply user. If <code dir="ltr">NULL</code>, then the current user is the default.</p>
<p>The client application must attach to the inbound server as the apply user.</p>
<p>The apply user is the user in whose security domain an inbound server evaluates whether LCRs satisfy its rule sets, applies DML and DDL changes directly to database objects, runs custom rule-based transformations configured for inbound server rules, and runs apply handlers configured for the inbound server. This user must have the necessary privileges to perform these actions. This procedure grants the apply user dequeue privileges on the queue used by the inbound server and configures the user as a secure queue user.</p>
<p>In addition to the privileges granted by this procedure, you must grant the following privileges to the apply user:</p>
<ul>
<li>
<p>The necessary privileges to perform DML and DDL changes on the apply objects</p>
</li>
<li>
<p><code dir="ltr">EXECUTE</code> privilege on the rule sets used by the inbound server</p>
</li>
<li>
<p><code dir="ltr">EXECUTE</code> privilege on all rule-based transformation functions used in the rule set</p>
</li>
<li>
<p><code dir="ltr">EXECUTE</code> privilege on all apply handler procedures</p>
</li>
</ul>
<p>You can grant these privileges directly to the apply user, or you can grant them through roles.</p>
<p>In addition, the apply user must be granted <code dir="ltr">EXECUTE</code> privilege on all packages, including Oracle supplied packages, that are invoked in subprograms run by the inbound server. These privileges must be granted directly to the apply user. They cannot be granted through roles.</p>
<p><span class="bold">Note:</span> If the apply user for an inbound server is dropped using <code dir="ltr">DROP</code> <code dir="ltr">USER&nbsp;.&nbsp;.&nbsp;.&nbsp;</code> <code dir="ltr">CASCADE</code>, then the inbound server is also dropped automatically.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t38" headers="r1c1-t38">
<p><code dir="ltr">comment</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t38 r1c2-t38">
<p>An optional comment associated with the inbound server.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16250"></a>Usage Notes</p>
<p>By default, an inbound server does not use rules or rule sets. Therefore, an inbound server applies all of the LCRs sent to it by an XStream client application. However, to filter the LCRs sent to an inbound server, you can add rules and rule sets to an inbound server using the <code dir="ltr">DBMS_XSTREAM_ADM</code> and <code dir="ltr">DBMS_RULE_ADM</code> packages.</p>
<p>In a CDB, you can execute the <code dir="ltr">CREATE_INBOUND</code> procedure from either the root or a PDB. The inbound server is restricted to receiving LCRs from one source database and only applying the changes to its local container. If the inbound server is at the root level, then the apply user must be a common user.</p>
</div>
<!-- class="refsubsect" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink XSTRM72743" href="../XSTRM/xstrm_gen_cncpt.htm#XSTRM72743"><span class="italic">Oracle Database XStream Guide</span></a></div>
</div>
<!-- class="refsect2" -->
<div id="ARPLS70198" class="refsect2"><a id="CACBHJDD"></a>
<h3 class="refsect2">CREATE_OUTBOUND Procedure<a id="sthref16251"></a></h3>
<p>This procedure creates an XStream outbound server, queue, and capture process to enable client applications to stream out Oracle database changes.</p>
<p>This procedure is overloaded. One <code dir="ltr">table_names</code> parameter is type <code dir="ltr">VARCHAR2</code> and the other <code dir="ltr">table_names</code> parameter is type <code dir="ltr">DBMS_UTILITY.UNCL_ARRAY</code>. Also, one <code dir="ltr">schema_names</code> parameter is type <code dir="ltr">VARCHAR2</code> and the other <code dir="ltr">schema_names</code> parameter is type <code dir="ltr">DBMS_UTILITY.UNCL_ARRAY</code>. These parameters enable you to enter the list of tables and schemas in different ways and are mutually exclusive.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>A client application can create multiple sessions. Each session can attach to only one outbound server, and each outbound server can serve only one session at a time. However, different client application sessions can connect to different outbound servers. See &#34;OCIXStreamOutAttach()&#34; in the <a class="olink LNOCI" href="../LNOCI/toc.htm"><span class="italic">Oracle Call Interface Programmer&#39;s Guide</span></a> and <a class="olink STXJV" href="../STXJV/toc.htm"><span class="italic">Oracle Database XStream Java API Reference</span></a> for information about attaching to an outbound server.</p>
</li>
<li>
<p>If the <code dir="ltr">capture_name</code> parameter is <code dir="ltr">NULL</code>, then this procedure automatically generates a name for the capture process that it creates.</p>
</li>
<li>
<p>This procedure automatically generates a name for the queue that it creates.</p>
</li>
<li>
<p>This procedure enables both the capture process and outbound server that it creates.</p>
</li>
<li>
<p>Starting with Oracle Database 11<span class="italic">g</span> Release 2 (11.2.0.2), the <code dir="ltr">capture_name</code> parameter is included in this procedure.</p>
</li>
</ul>
</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16252"></a>Syntax</p>
<pre dir="ltr">DBMS_XSTREAM_ADM.CREATE_OUTBOUND(
   server_name            IN VARCHAR2,
   source_database        IN VARCHAR2  DEFAULT NULL,
   table_names            IN DBMS_UTILITY.UNCL_ARRAY,
   schema_names           IN DBMS_UTILITY.UNCL_ARRAY,
   capture_user           IN VARCHAR2  DEFAULT NULL,
   connect_user           IN VARCHAR2  DEFAULT NULL,
   comment                IN VARCHAR2  DEFAULT NULL,
   capture_name           IN VARCHAR2  DEFAULT NULL,
   include_dml            IN BOOLEAN   DEFAULT TRUE,
   include_ddl            IN BOOLEAN   DEFAULT FALSE,
   source_root_name       IN  VARCHAR2   DEFAULT NULL,
   source_container_name  IN  VARCHAR2   DEFAULT NULL);

DBMS_XSTREAM_ADM.CREATE_OUTBOUND(
   server_name            IN VARCHAR2,
   source_database        IN VARCHAR2  DEFAULT NULL,
   table_names            IN VARCHAR2  DEFAULT NULL,
   schema_names           IN VARCHAR2  DEFAULT NULL,
   capture_user           IN VARCHAR2  DEFAULT NULL,
   connect_user           IN VARCHAR2  DEFAULT NULL,
   comment                IN VARCHAR2  DEFAULT NULL,
   capture_name           IN VARCHAR2  DEFAULT NULL,
   include_dml            IN BOOLEAN   DEFAULT TRUE,
   include_ddl            IN BOOLEAN   DEFAULT FALSE,
   source_root_name       IN  VARCHAR2   DEFAULT NULL,
   source_container_name  IN  VARCHAR2   DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16253"></a>Parameters</p>
<div id="ARPLS70199" class="tblformal">
<p class="titleintable"><a id="sthref16254"></a><a id="sthref16255"></a>Table 204-16 CREATE_OUTBOUND Procedure Parameters</p>
<table class="cellalignment4330" title="CREATE_OUTBOUND Procedure Parameters" summary="This table describes the parameters of DBMS_XSTREAM_ADM.CREATE_OUTBOUND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t41">Parameter</th>
<th class="cellalignment4328" id="r1c2-t41">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t41" headers="r1c1-t41">
<p><code dir="ltr">server_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t41 r1c2-t41">
<p>The name of the outbound server being created. A <code dir="ltr">NULL</code> specification is not allowed. Do not specify an owner.</p>
<p>The specified name must not match the name of an existing outbound server, inbound server, apply process, or messaging client.</p>
<p><span class="bold">Note:</span> The <code dir="ltr">server_name</code> setting cannot exceed 30 bytes, and it cannot be altered after the outbound server is created.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t41" headers="r1c1-t41">
<p><code dir="ltr">source_database</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t41 r1c2-t41">
<p>The global name of the source database. The source database is where the changes to be captured originated.</p>
<p>If non-<code dir="ltr">NULL</code>, then a condition is added to the outbound server&#39;s rules to filter the LCRs based on the global name of the source database. If <code dir="ltr">NULL</code>, then the procedure does not add a condition regarding the source database to the generated rules.</p>
<p>In a CDB, specify the global name of the container to which the rules pertain. The container can be the root or a PDB. For example, <code dir="ltr">mycdb.example.com</code> or <code dir="ltr">hrpdb.example.com</code>. See <a class="olink XSTRM72988" href="../XSTRM/xstrm_gen_cncpt.htm#XSTRM72988"><span class="italic">Oracle Database XStream Guide</span></a> for more information about setting this parameter in a CDB.</p>
<p>In a non-CDB, if non-<code dir="ltr">NULL</code> and the specified name is different from the global name of the current database, then downstream capture is assumed. In this case, configure the transmission of redo data from the source database to the downstream database before running the <code dir="ltr">CREATE_OUTBOUND</code> procedure. See <a class="olink XSTRM1561" href="../XSTRM/xstrm_xout_config.htm#XSTRM1561"><span class="italic">Oracle Database XStream Guide</span></a> for instructions.</p>
<p>If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify <code dir="ltr">DBS1</code> and the domain is <code dir="ltr">EXAMPLE.COM</code>, then the procedure specifies <code dir="ltr">DBS1.EXAMPLE.COM</code> automatically.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t41" headers="r1c1-t41">
<p><code dir="ltr">table_names</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t41 r1c2-t41">
<p>The tables for which DML and DDL changes are streamed out to the XStream client application. The tables can be specified in the following ways:</p>
<ul>
<li>
<p>Comma-delimited list of type <code dir="ltr">VARCHAR2</code>.</p>
</li>
<li>
<p>A PL/SQL associative array of type <code dir="ltr">DBMS_UTILITY.UNCL_ARRAY</code>, where each element is the name of a table. Specify the first table in position 1. The last position must be <code dir="ltr">NULL</code>.</p>
</li>
</ul>
<p>Each table should be specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">table_name</span></code>. For example, <code dir="ltr">hr.employees</code>. If the schema is not specified, then the current user is the default.</p>
<p><span class="bold">See Also:</span> <a href="#CACIGGJI">&#34;Usage Notes&#34;</a> for more information about this parameter</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t41" headers="r1c1-t41">
<p><code dir="ltr">schema_names</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t41 r1c2-t41">
<p>The schemas for which DML and DDL changes are streamed out to the XStream client application. The schemas can be specified in the following ways:</p>
<ul>
<li>
<p>Comma-delimited list of type <code dir="ltr">VARCHAR2</code>.</p>
</li>
<li>
<p>A PL/SQL associative array of type <code dir="ltr">DBMS_UTILITY.UNCL_ARRAY</code>, where each element is the name of a schema. Specify the first schema in position 1. The last position must be <code dir="ltr">NULL</code>.</p>
</li>
</ul>
<p><span class="bold">Note:</span> This procedure does not concatenate the <code dir="ltr">schema_names</code> parameter with the <code dir="ltr">table_names</code> parameter. To specify tables, enter fully qualified table names in the <code dir="ltr">table_names</code> parameter (<code dir="ltr"><span class="codeinlineitalic">schema_name.table_name</span></code>).</p>
<p><span class="bold">See Also:</span> <a href="#CACIGGJI">&#34;Usage Notes&#34;</a> for more information about this parameter</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t41" headers="r1c1-t41">
<p><code dir="ltr">capture_user</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t41 r1c2-t41">
<p>The user in whose security domain a capture process captures changes that satisfy its rule sets and runs custom rule-based transformations configured for capture process rules. If <code dir="ltr">NULL</code>, then the current user is the default.</p>
<p>This procedure grants the capture user enqueue privilege on the queue used by the capture process and configures the user as a secure queue user.</p>
<p>In addition, ensure that the capture user has the following privileges:</p>
<ul>
<li>
<p><code dir="ltr">EXECUTE</code> privilege on the rule sets used by the capture process</p>
</li>
<li>
<p><code dir="ltr">EXECUTE</code> privilege on all rule-based transformation functions used in the positive rule set</p>
</li>
</ul>
<p>You can grant these privileges directly to the apply user, or you can grant them through roles.</p>
<p>In addition, the capture user must be granted <code dir="ltr">EXECUTE</code> privilege on all packages, including Oracle supplied packages, that are invoked in rule-based transformations run by the capture process. These privileges must be granted directly to the capture user. They cannot be granted through roles.</p>
<p>Only a user who is granted the <code dir="ltr">DBA</code> role can set a capture user. Only the <code dir="ltr">SYS</code> user can set the <code dir="ltr">capture_user</code> to <code dir="ltr">SYS</code>.</p>
<p>A capture user does not require privileges on a database object to capture changes made to it. The capture process can pass these changes to a custom rule-based transformation function. Therefore, ensure that you consider security implications when you configure a capture process.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t41" headers="r1c1-t41">
<p><code dir="ltr">connect_user</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t41 r1c2-t41">
<p>The user who can attach to the specified outbound server to retrieve the change stream. The client application must attach to the outbound server as the specified connect user.</p>
<p>If <code dir="ltr">NULL</code>, then the current user is the default.</p>
<p>The connect user is the user in whose security domain an outbound server evaluates LCRs against its rule sets and runs custom rule-based transformations configured for outbound server rules. This user must have the necessary privileges to perform these actions. This procedure grants the connect user dequeue privileges on the queue used by the outbound server and configures the user as a secure queue user.</p>
<p>In addition to the privileges granted by this procedure, grant the following privileges to the connect user:</p>
<ul>
<li>
<p><code dir="ltr">EXECUTE</code> privilege on the rule sets used by the outbound server</p>
</li>
<li>
<p><code dir="ltr">EXECUTE</code> privilege on all rule-based transformation functions used in the rule set</p>
</li>
</ul>
<p>You can grant these privileges directly to the connect user, or you can grant them through roles.</p>
<p>In addition, the connect user must be granted <code dir="ltr">EXECUTE</code> privilege on all packages, including Oracle supplied packages, that are invoked in subprograms run by the outbound server. These privileges must be granted directly to the apply user. They cannot be granted through roles.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t41" headers="r1c1-t41">
<p><code dir="ltr">comment</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t41 r1c2-t41">
<p>An optional comment associated with the outbound server.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t41" headers="r1c1-t41">
<p><code dir="ltr">capture_name</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t41 r1c2-t41">
<p>The name of the capture process configured to capture changes for the outbound server. Do not specify an owner.</p>
<p>The capture process must not exist. If the specified name matches the name of an existing capture process, then an error is raised.</p>
<p>If the name does not match the name of an existing capture process, then the procedure creates a new capture process with the specified name.</p>
<p>If <code dir="ltr">NULL</code>, then the system creates a new capture process with a system-generated name.</p>
<p><span class="bold">Note:</span> The capture process name cannot be altered after the capture process is created.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t41" headers="r1c1-t41">
<p><code dir="ltr">include_dml</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t41 r1c2-t41">
<p>If <code dir="ltr">TRUE</code>, then the procedure creates a DML rule for DML changes. If <code dir="ltr">FALSE</code>, then the procedure does not create a DML rule. <code dir="ltr">NULL</code> is not permitted.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t41" headers="r1c1-t41">
<p><code dir="ltr">include_ddl</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t41 r1c2-t41">
<p>If <code dir="ltr">TRUE</code>, then the procedure creates a DDL rule for DDL changes. If <code dir="ltr">FALSE</code>, then the procedure does not create a DDL rule. <code dir="ltr">NULL</code> is not permitted.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t41" headers="r1c1-t41">
<p><code dir="ltr">source_root_name</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t41 r1c2-t41">
<p>The global name of the root in the source CDB. For example, <code dir="ltr">mycdb.example.com</code>.</p>
<p>If this parameter is <code dir="ltr">NULL</code>, then the global name of the root in the local CDB is used. If you are configuring downstream capture, then this parameter must be a non-<code dir="ltr">NULL</code> value, and it must specify the global name of the root in the remote source CDB. See <a class="olink XSTRM72988" href="../XSTRM/xstrm_gen_cncpt.htm#XSTRM72988"><span class="italic">Oracle Database XStream Guide</span></a> for more information about setting this parameter in a CDB.</p>
<p>If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify <code dir="ltr">DBS1</code> and the domain is <code dir="ltr">EXAMPLE.COM</code>, then the procedure specifies <code dir="ltr">DBS1.EXAMPLE.COM</code> automatically.</p>
<p><span class="bold">Note:</span> This parameter only applies to a CDB.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t41" headers="r1c1-t41">
<p><code dir="ltr">source_container_name</code></p>
</td>
<td class="cellalignment4329" headers="r13c1-t41 r1c2-t41">
<p>The short name of the source container. The container can be the root or a PDB. For example, <code dir="ltr">CDB$ROOT</code> or <code dir="ltr">hrpdb</code>. See <a class="olink XSTRM72988" href="../XSTRM/xstrm_gen_cncpt.htm#XSTRM72988"><span class="italic">Oracle Database XStream Guide</span></a> for more information about setting this parameter in a CDB.</p>
<p><span class="bold">Note:</span> This parameter only applies to a CDB.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="CACIGGJI"></a>Usage Notes</p>
<p>The following list describes the behavior of the outbound server for various combinations of the <code dir="ltr">table_names</code> and <code dir="ltr">schema_names</code> parameters:</p>
<ul>
<li>
<p>If both the <code dir="ltr">table_names</code> and <code dir="ltr">schema_names</code> parameters are <code dir="ltr">NULL</code> or empty, then the outbound server streams all DML and DDL changes to the client application.</p>
<p>This procedure is overloaded. The <code dir="ltr">table_names</code> and <code dir="ltr">schema_names</code> parameters are defaulted to <code dir="ltr">NULL</code>. Do not specify <code dir="ltr">NULL</code> for both <code dir="ltr">table_names</code> and <code dir="ltr">schema_names</code> in the same call; otherwise, error <code dir="ltr">PLS-00307</code> is returned.</p>
</li>
<li>
<p>If both the <code dir="ltr">table_names</code> and <code dir="ltr">schema_names</code> parameters are specified, then the outbound server streams DML and DDL changes for the specified tables and schemas.</p>
</li>
<li>
<p>If the <code dir="ltr">table_names</code> parameter is specified and the <code dir="ltr">schema_names</code> parameter is <code dir="ltr">NULL</code> or empty, then the outbound server streams DML and DDL changes for the specified tables.</p>
</li>
<li>
<p>If the <code dir="ltr">table_names</code> parameter is <code dir="ltr">NULL</code> or empty and the <code dir="ltr">schema_names</code> parameter is specified, then the outbound server streams DML and DDL changes for the specified schema.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<p>For the procedure that uses the <code dir="ltr">DBMS_UTILITY.UNCL_ARRAY</code> type for the <code dir="ltr">table_names</code> and <code dir="ltr">schema_names</code> parameters, both parameters must be specified. To specify only tables, the <code dir="ltr">schema_names</code> parameter must be specified and empty. To specify only schemas, the <code dir="ltr">table_names</code> parameter must be specified and empty.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
An empty array includes one <code dir="ltr">NULL</code> entry.</div>
</div>
<!-- class="refsect2" -->
<div id="ARPLS74045" class="refsect2"><a id="CHDIJJEC"></a>
<h3 class="refsect2">DELETE_COLUMN Procedure<a id="sthref16256"></a><a id="sthref16257"></a></h3>
<p>This procedure either adds or removes a declarative rule-based transformation which deletes a column from a row logical change record (LCR) that satisfies the specified rule.</p>
<p>For the transformation to be performed when the specified rule evaluates to <code dir="ltr">TRUE</code>, the rule must be in the positive rule set of an XStream client. XStream clients include capture processes, propagations, and apply processes.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>The <code dir="ltr">DELETE_COLUMN</code> procedure supports the same data types supported by Oracle Streams capture processes.</p>
</li>
<li>
<p>The <code dir="ltr">DELETE_COLUMN</code> procedure is useful when you want to delete a relatively small number of columns in a row LCR. To delete most of the columns in a row LCR and keep a relatively small number of columns, consider using the <code dir="ltr">KEEP_COLUMNS</code> procedure in this package.</p>
</li>
<li>
<p>Declarative transformations can transform row LCRs only. Therefore, a DML rule must be specified when you run this procedure. If a DDL rule is specified, then the procedure raises an error.</p>
</li>
</ul>
</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink XSTRM" href="../XSTRM/toc.htm"><span class="italic">Oracle Database XStream Guide</span></a> for more information about declarative rule-based transformations and about the data types supported by capture processes</p>
</li>
<li>
<p><a href="#CHDHEBJB">KEEP_COLUMNS Procedure</a></p>
</li>
</ul>
</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16258"></a>Syntax</p>
<pre dir="ltr">DBMS_XSTREAM_ADM.DELETE_COLUMN(
   rule_name     IN  VARCHAR2,
   table_name    IN  VARCHAR2,
   column_name   IN  VARCHAR2,
   value_type    IN  VARCHAR2   DEFAULT &#39;*&#39;,
   step_number   IN  NUMBER     DEFAULT 0,
   operation     IN  VARCHAR2   DEFAULT &#39;ADD&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16259"></a>Parameters</p>
<div id="ARPLS74046" class="tblformal">
<p class="titleintable"><a id="sthref16260"></a><a id="sthref16261"></a>Table 204-17 DELETE_COLUMN Procedure Parameters</p>
<table class="cellalignment4330" title="DELETE_COLUMN Procedure Parameters " summary="This table describes the Parameters of DBMS_XSTREAM_ADM.DELETE_COLUMN subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t45">Parameter</th>
<th class="cellalignment4328" id="r1c2-t45">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t45" headers="r1c1-t45">
<p><code dir="ltr">rule_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t45 r1c2-t45">
<p>The name of the rule, specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">rule_name</span></code>. If <code dir="ltr">NULL</code>, then the procedure raises an error.</p>
<p>For example, to specify a rule in the <code dir="ltr">hr</code> schema named <code dir="ltr">employees12</code>, enter <code dir="ltr">hr.employees12</code>. If the schema is not specified, then the current user is the default.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t45" headers="r1c1-t45">
<p><code dir="ltr">table_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t45 r1c2-t45">
<p>The name of the table from which the column is deleted in the row LCR, specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">object_name</span></code>. For example, <code dir="ltr">hr.employees</code>. If the schema is not specified, then the current user is the default.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t45" headers="r1c1-t45">
<p><code dir="ltr">column_name</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t45 r1c2-t45">
<p>The name of the column deleted from each row LCR that satisfies the rule.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t45" headers="r1c1-t45">
<p><code dir="ltr">value_type</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t45 r1c2-t45">
<p>Specify <code dir="ltr">&#39;NEW&#39;</code> to delete the column from the new values in the row LCR.</p>
<p>Specify <code dir="ltr">&#39;OLD&#39;</code> to delete the column from the old values in the row LCR.</p>
<p>Specify <code dir="ltr">&#39;*&#39;</code> to delete the column from both the old and new values in the row LCR.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t45" headers="r1c1-t45">
<p><code dir="ltr">step_number</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t45 r1c2-t45">
<p>The order of execution of the transformation.</p>
<p><span class="bold">See Also:</span> <a class="olink XSTRM72754" href="../XSTRM/xstrm_gen_cncpt.htm#XSTRM72754"><span class="italic">Oracle Database XStream Guide</span></a> for more information about transformation ordering</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t45" headers="r1c1-t45">
<p><code dir="ltr">operation</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t45 r1c2-t45">
<p>Specify <code dir="ltr">&#39;ADD&#39;</code> to add the transformation to the rule.</p>
<p>Specify <code dir="ltr">&#39;REMOVE&#39;</code> to remove the transformation from the rule.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16262"></a>Usage Notes</p>
<p>When <code dir="ltr">&#39;REMOVE&#39;</code> is specified for the <code dir="ltr">operation</code> parameter, all of the delete column declarative rule-based transformations for the specified rule are removed that match the specified <code dir="ltr">table_name</code>, <code dir="ltr">column_name</code>, and <code dir="ltr">step_number</code> parameters. Nulls specified for these parameters act as wildcards. The following table lists the behavior of the <code dir="ltr">DELETE_COLUMN</code> procedure when one or more of these parameters is <code dir="ltr">NULL</code>:</p>
<div class="inftblinformal">
<table class="cellalignment4327" title="Remove Behavior for the DELETE_COLUMN Procedure" summary="This table describes the behavior of the DELETE_COLUMN procedure when the operation parameter is set to REMOVE and various other procedure parameters are set to NULL." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t46">table_name</th>
<th class="cellalignment4328" id="r1c2-t46">column_name</th>
<th class="cellalignment4328" id="r1c3-t46">step_number</th>
<th class="cellalignment4328" id="r1c4-t46">Result</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t46" headers="r1c1-t46"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r2c1-t46 r1c2-t46"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r2c1-t46 r1c3-t46"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r2c1-t46 r1c4-t46">Remove all delete column transformations for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t46" headers="r1c1-t46"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r3c1-t46 r1c2-t46"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r3c1-t46 r1c3-t46">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r3c1-t46 r1c4-t46">Remove all delete column transformations with the specified <code dir="ltr">step_number</code> for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t46" headers="r1c1-t46"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r4c1-t46 r1c2-t46">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r4c1-t46 r1c3-t46">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r4c1-t46 r1c4-t46">Remove all delete column transformations with the specified <code dir="ltr">column_name</code> and <code dir="ltr">step_number</code> for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t46" headers="r1c1-t46">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r5c1-t46 r1c2-t46"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r5c1-t46 r1c3-t46"><code dir="ltr">non-NULL</code></td>
<td class="cellalignment4329" headers="r5c1-t46 r1c4-t46">Remove all delete column transformations with the specified <code dir="ltr">table_name</code> and <code dir="ltr">step_number</code> for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t46" headers="r1c1-t46"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r6c1-t46 r1c2-t46"><code dir="ltr">non-NULL</code></td>
<td class="cellalignment4329" headers="r6c1-t46 r1c3-t46"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r6c1-t46 r1c4-t46">Remove all delete column transformations with the specified <code dir="ltr">column_name</code> for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t46" headers="r1c1-t46">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r7c1-t46 r1c2-t46">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r7c1-t46 r1c3-t46"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r7c1-t46 r1c4-t46">Remove all delete column transformations with the specified <code dir="ltr">table_name</code> and <code dir="ltr">column_name</code> for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t46" headers="r1c1-t46">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r8c1-t46 r1c2-t46"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r8c1-t46 r1c3-t46"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r8c1-t46 r1c4-t46">Remove all delete column transformations with the specified <code dir="ltr">table_name</code> for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t46" headers="r1c1-t46">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r9c1-t46 r1c2-t46">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r9c1-t46 r1c3-t46">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r9c1-t46 r1c4-t46">Remove all delete column transformations with the specified <code dir="ltr">table_name</code>, <code dir="ltr">column_name</code>, and <code dir="ltr">step_number</code> for the specified rule.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS70200" class="refsect2"><a id="CACBGICJ"></a>
<h3 class="refsect2">DROP_INBOUND Procedure<a id="sthref16263"></a></h3>
<p>This procedure removes an inbound server configuration.</p>
<p>This procedure always removes the specified inbound server. This procedure also removes the queue for the inbound server if all of the following conditions are met:</p>
<ul>
<li>
<p>One call to the <code dir="ltr">CREATE_INBOUND</code> procedure created the queue.</p>
</li>
<li>
<p>The inbound server is the only subscriber to the queue.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CACEGCGG">&#34;CREATE_INBOUND Procedure&#34;</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16264"></a>Syntax</p>
<pre dir="ltr">DBMS_XSTREAM_ADM.DROP_INBOUND(
   server_name IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16265"></a>Parameters</p>
<div id="ARPLS70201" class="tblformal">
<p class="titleintable"><a id="sthref16266"></a><a id="sthref16267"></a>Table 204-18 DROP_INBOUND Procedure Parameters</p>
<table class="cellalignment4330" title="DROP_INBOUND Procedure Parameters" summary="This table describes the parameters of DBMS_XSTREAM_ADM.DROP_INBOUND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t48">Parameter</th>
<th class="cellalignment4328" id="r1c2-t48">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t48" headers="r1c1-t48">
<p><code dir="ltr">server_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t48 r1c2-t48">
<p>The name of the inbound server being removed. Specify an existing inbound server. Do not specify an owner.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS70202" class="refsect2"><a id="CACICJHG"></a>
<h3 class="refsect2">DROP_OUTBOUND Procedure<a id="sthref16268"></a></h3>
<p>This procedure removes an outbound server configuration.</p>
<p>This procedure always drops the specified outbound server. This procedure also drops the queue used by the outbound server if both of the following conditions are met:</p>
<ul>
<li>
<p>The queue was created by the <code dir="ltr">CREATE_OUTBOUND</code> procedure in this package.</p>
</li>
<li>
<p>The outbound server is the only subscriber to the queue.</p>
</li>
</ul>
<p>If either one of the preceding conditions is not met, then the <code dir="ltr">DROP_OUTBOUND</code> procedure only drops the outbound server. It does not drop the queue.</p>
<p>This procedure also drops the capture process for the outbound server if both of the following conditions are met:</p>
<ul>
<li>
<p>The procedure can drop the outbound server&#39;s queue.</p>
</li>
<li>
<p>The capture process was created by the <code dir="ltr">CREATE_OUTBOUND</code> procedure.</p>
</li>
</ul>
<p>If the procedure can drop the queue but cannot manage the capture process, then it drops the queue without dropping the capture process.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#CACCCAJJ">&#34;ADD_OUTBOUND Procedure&#34;</a></p>
</li>
<li>
<p><a href="#CACBHJDD">&#34;CREATE_OUTBOUND Procedure&#34;</a></p>
</li>
</ul>
</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16269"></a>Syntax</p>
<pre dir="ltr">DBMS_XSTREAM_ADM.DROP_OUTBOUND(
   server_name IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16270"></a>Parameters</p>
<div id="ARPLS70203" class="tblformal">
<p class="titleintable"><a id="sthref16271"></a><a id="sthref16272"></a>Table 204-19 DROP_OUTBOUND Procedure Parameters</p>
<table class="cellalignment4330" title="DROP_OUTBOUND Procedure Parameters" summary="This table describes the parameters of DBMS_XSTREAM_ADM.DROP_OUTBOUND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t50">Parameter</th>
<th class="cellalignment4328" id="r1c2-t50">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t50" headers="r1c1-t50">
<p><code dir="ltr">server_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t50 r1c2-t50">
<p>The name of the outbound server being removed. Specify an existing outbound server. Do not specify an owner.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS73644" class="refsect2"><a id="CIAHCHJD"></a>
<h3 class="refsect2">ENABLE_GG_XSTREAM_FOR_STREAMS Procedure<a id="sthref16273"></a></h3>
<p>This procedure enables XStream optimizations and performance optimizations for Oracle Streams components.</p>
<p>This procedure is intended for users of Oracle Streams who want to enable XStream optimizations and optimizations. For example, you can enable the optimizations for an Oracle Streams replication configuration that uses capture processes and apply processes to replicate changes between Oracle databases.</p>
<p>These capabilities and optimizations are enabled automatically for XStream components, such as outbound servers, inbound servers, and capture processes that send changes to outbound servers. It is not necessary to run this procedure for XStream components.</p>
<p>When XStream optimizations are enabled, Oracle Streams components can stream ID key LCRs and sequence LCRs. The XStream performance optimizations improve efficiency in various areas, including:</p>
<ul>
<li>
<p>LCR processing</p>
</li>
<li>
<p>Handling large transactions</p>
</li>
<li>
<p>DML execution during apply</p>
</li>
<li>
<p>Dependency computation and scheduling</p>
</li>
<li>
<p>Capture process parallelism</p>
</li>
</ul>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16274"></a>Syntax</p>
<pre dir="ltr">DBMS_XSTREAM_ADM.ENABLE_GG_XSTREAM_FOR_STREAMS(
   enable IN BOOLEAN  TRUE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16275"></a>Parameters</p>
<div id="ARPLS73645" class="tblformal">
<p class="titleintable"><a id="sthref16276"></a><a id="sthref16277"></a>Table 204-20 ENABLE_GG_XSTREAM_FOR_STREAMS Procedure Parameters</p>
<table class="cellalignment4330" title="ENABLE_GG_XSTREAM_FOR_STREAMS Procedure Parameters" summary="This table describes the parameters of DBMS_XSTREAM_ADM.ENABLE_GG_XSTREAM_FOR_STREAMS subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t51">Parameter</th>
<th class="cellalignment4328" id="r1c2-t51">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t51" headers="r1c1-t51">
<p><code dir="ltr">enable</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t51 r1c2-t51">
<p>If <code dir="ltr">TRUE</code>, then enable XStream performance optimizations for Oracle Streams components.</p>
<p>If <code dir="ltr">FALSE</code>, then disable XStream performance optimizations for Oracle Streams components.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16278"></a>Usage Notes</p>
<p>The following usage notes apply to this procedure:</p>
<ul>
<li>
<p>When you run this procedure, all capture processes and apply processes are restarted.</p>
</li>
<li>
<p>After you run this procedure, the <code dir="ltr">PURPOSE</code> column in the following views displays <code dir="ltr">XStream</code> <code dir="ltr">Streams</code>:</p>
<ul>
<li>
<p><code dir="ltr">ALL_APPLY</code></p>
</li>
<li>
<p><code dir="ltr">DBA_APPLY</code></p>
</li>
<li>
<p><code dir="ltr">ALL_CAPTURE</code></p>
</li>
<li>
<p><code dir="ltr">DBA_CAPTURE</code></p>
</li>
</ul>
</li>
<li>
<p>A license for the Oracle GoldenGate product is required to enable XStream performance optimizations for Oracle Streams components.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#CIABJEJF">IS_GG_XSTREAM_FOR_STREAMS Function</a></p>
</li>
<li>
<p><a class="olink XSTRM72545" href="../XSTRM/xstrm_intro.htm#XSTRM72545"><span class="italic">Oracle Database XStream Guide, Chapter 1, Prerequisites for XStream&#34;</span></a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect2" -->
<div id="ARPLS74770" class="refsect2"><a id="CHDDIGJF"></a>
<h3 class="refsect2">GET_MESSAGE_TRACKING Function<a id="sthref16279"></a><a id="sthref16280"></a><a id="sthref16281"></a><a id="sthref16282"></a></h3>
<p>Returns the tracking label for the current session.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDFIHCA">SET_MESSAGE_TRACKING Procedure</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16283"></a>Syntax</p>
<pre dir="ltr">DBMS_STREAMS_ADM.GET_MESSAGE_TRACKING
RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS74771" class="refsect2"><a id="CHDJEBGF"></a>
<h3 class="refsect2">GET_TAG Function<a id="sthref16284"></a><a id="sthref16285"></a></h3>
<p>This function gets the binary tag for all redo entries generated by the current session.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#CHDIJDFJ">&#34;SET_TAG Procedure&#34;</a></p>
</li>
<li>
<p><a class="olink STREP008" href="../STREP/rep_tags.htm#STREP008"><span class="italic">Oracle Streams Replication Administrator&#39;s Guide</span></a> for more information about tags</p>
</li>
</ul>
</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16286"></a>Syntax</p>
<pre dir="ltr">DBMS_STREAMS_ADM.GET_TAG
RETURN RAW;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16287"></a>Examples</p>
<p>The following example illustrates how to display the current logical change record (LCR) tag as output:</p>
<pre dir="ltr">SET SERVEROUTPUT ON
DECLARE
   raw_tag RAW(2000);
BEGIN
   raw_tag := DBMS_STREAMS_ADM.GET_TAG();
   DBMS_OUTPUT.PUT_LINE(&#39;Tag Value = &#39; || RAWTOHEX(raw_tag));
END;
/
</pre>
<p>You can also display the value by querying the <code dir="ltr">DUAL</code> view:</p>
<pre dir="ltr">SELECT DBMS_STREAMS_ADM.GET_TAG FROM DUAL; 
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS73646" class="refsect2"><a id="CIABJEJF"></a>
<h3 class="refsect2">IS_GG_XSTREAM_FOR_STREAMS Function<a id="sthref16288"></a></h3>
<p>This function returns <code dir="ltr">TRUE</code> if XStream performance optimizations are enabled for Oracle Streams components, or this function returns <code dir="ltr">FALSE</code> if XStream performance optimizations are disabled for Oracle Streams components.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAHCHJD">&#34;ENABLE_GG_XSTREAM_FOR_STREAMS Procedure&#34;</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16289"></a>Syntax</p>
<pre dir="ltr">DBMS_XSTREAM_ADM.IS_GG_XSTREAM_FOR_STREAMS
RETURN BOOLEAN;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS74047" class="refsect2"><a id="CHDHEBJB"></a>
<h3 class="refsect2">KEEP_COLUMNS Procedure<a id="sthref16290"></a><a id="sthref16291"></a></h3>
<p>This procedure either adds or removes a declarative rule-based transformation which keeps a list of columns in a row logical change record (LCR) that satisfies the specified rule. The transformation deletes columns that are not in the list from the row LCR.</p>
<p>For the transformation to be performed when the specified rule evaluates to <code dir="ltr">TRUE</code>, the rule must be in the positive rule set of an XStream client. XStream clients include capture processes, propagations, and apply processes.</p>
<p>This procedure is overloaded. The <code dir="ltr">column_list</code> parameter is type <code dir="ltr">VARCHAR2</code> and the <code dir="ltr">column_table</code> parameter is type <code dir="ltr">DBMS_UTILITY.LNAME_ARRAY</code>. These parameters enable you to enter the list of columns in different ways and are mutually exclusive.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>The <code dir="ltr">KEEP_COLUMNS</code> procedure supports the same data types supported by Oracle Streams capture processes.</p>
</li>
<li>
<p>The <code dir="ltr">KEEP_COLUMNS</code> procedure is useful when you want to keep a relatively small number of columns in a row LCR. To keep most of the columns in a row LCR and delete a relatively small number of columns, consider using the <code dir="ltr">DELETE_COLUMN</code> procedure in this package.</p>
</li>
<li>
<p>Declarative transformations can transform row LCRs only. Therefore, a DML rule must be specified when you run this procedure. If a DDL rule is specified, then the procedure raises an error.</p>
</li>
</ul>
</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink XSTRM" href="../XSTRM/toc.htm"><span class="italic">Oracle Database XStream Guide</span></a> for more information about declarative rule-based transformations and about the data types supported by Oracle Streams capture processes</p>
</li>
<li>
<p><a href="#CHDIJJEC">DELETE_COLUMN Procedure</a></p>
</li>
</ul>
</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16292"></a>Syntax</p>
<pre dir="ltr">DBMS_XSTREAM_ADM.KEEP_COLUMNS(
   rule_name     IN  VARCHAR2,
   table_name    IN  VARCHAR2,
   column_list   IN  VARCHAR2,
   value_type    IN  VARCHAR2 DEFAULT &#39;*&#39;,
   step_number   IN  NUMBER DEFAULT 0,
   operation     IN  VARCHAR2 DEFAULT &#39;ADD&#39;);

DBMS_XSTREAM_ADM.KEEP_COLUMNS(
   rule_name     IN  VARCHAR2,
   table_name    IN  VARCHAR2,
   column_table  IN  DBMS_UTILITY.LNAME_ARRAY,
   value_type    IN  VARCHAR2 DEFAULT &#39;*&#39;,
   step_number   IN  NUMBER DEFAULT 0,
   operation     IN  VARCHAR2 DEFAULT &#39;ADD&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16293"></a>Parameters</p>
<div id="ARPLS74048" class="tblformal">
<p class="titleintable"><a id="sthref16294"></a><a id="sthref16295"></a>Table 204-21 KEEP_COLUMNS Procedure Parameters</p>
<table class="cellalignment4330" title="KEEP_COLUMNS Procedure Parameters " summary="This table describes the Parameters of DBMS_XSTREAM_ADM.KEEP_COLUMNS subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t58">Parameter</th>
<th class="cellalignment4328" id="r1c2-t58">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t58" headers="r1c1-t58">
<p><code dir="ltr">rule_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t58 r1c2-t58">
<p>The name of the rule, specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">rule_name</span></code>. If <code dir="ltr">NULL</code>, then the procedure raises an error.</p>
<p>For example, to specify a rule in the <code dir="ltr">hr</code> schema named <code dir="ltr">employees12</code>, enter <code dir="ltr">hr.employees12</code>. If the schema is not specified, then the current user is the default.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t58" headers="r1c1-t58">
<p><code dir="ltr">table_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t58 r1c2-t58">
<p>The name of the table for which the columns are kept in the row LCR, specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">object_name</span></code>. For example, <code dir="ltr">hr.employees</code>. If the schema is not specified, then the current user is the default.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t58" headers="r1c1-t58">
<p><code dir="ltr">column_list</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t58 r1c2-t58">
<p>The names of the columns kept for each row LCR that satisfies the rule. Specify a comma-delimited list of type <code dir="ltr">VARCHAR2</code>. The transformation removes columns that are not in the list from the row LCR.</p>
<p>If this parameter is set to <code dir="ltr">NULL</code>, and the <code dir="ltr">column_table</code> parameter is also set to <code dir="ltr">NULL</code>, then the procedure raises an error.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t58" headers="r1c1-t58">
<p><code dir="ltr">column_table</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t58 r1c2-t58">
<p>The names of the columns kept for each row LCR that satisfies the rule. Specify a PL/SQL associative array of type <code dir="ltr">DBMS_UTILITY.LNAME_ARRAY</code>, where each element is the name of a column. The first schema should be in position 1. The last position must be <code dir="ltr">NULL</code>.</p>
<p>The transformation removes columns that are not in the table from the row LCR.</p>
<p>If this parameter is set to <code dir="ltr">NULL</code>, and the <code dir="ltr">column_list</code> parameter is also set to <code dir="ltr">NULL</code>, then the procedure raises an error.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t58" headers="r1c1-t58">
<p><code dir="ltr">value_type</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t58 r1c2-t58">
<p>Specify <code dir="ltr">&#39;NEW&#39;</code> to keep the columns in the new values in the row LCR.</p>
<p>Specify <code dir="ltr">&#39;OLD&#39;</code> to keep the columns in the old values in the row LCR.</p>
<p>Specify <code dir="ltr">&#39;*&#39;</code> to keep the columns in both the old and new values in the row LCR.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t58" headers="r1c1-t58">
<p><code dir="ltr">step_number</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t58 r1c2-t58">
<p>The order of execution of the transformation.</p>
<p><span class="bold">See Also:</span> <a class="olink XSTRM72754" href="../XSTRM/xstrm_gen_cncpt.htm#XSTRM72754"><span class="italic">Oracle Database XStream Guide</span></a> for more information about transformation ordering</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t58" headers="r1c1-t58">
<p><code dir="ltr">operation</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t58 r1c2-t58">
<p>Specify <code dir="ltr">&#39;ADD&#39;</code> to add the transformation to the rule.</p>
<p>Specify <code dir="ltr">&#39;REMOVE&#39;</code> to remove the transformation from the rule.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16296"></a>Usage Notes</p>
<p>When <code dir="ltr">&#39;REMOVE&#39;</code> is specified for the <code dir="ltr">operation</code> parameter, all of the keep columns declarative rule-based transformations for the specified rule are removed that match the specified <code dir="ltr">table_name</code>, <code dir="ltr">column_list</code>, <code dir="ltr">column_table</code>, and <code dir="ltr">step_number</code> parameters. Nulls specified for these parameters act as wildcards. The following table lists the behavior of the <code dir="ltr">KEEP_COLUMNS</code> procedure when one or more of these parameters is <code dir="ltr">NULL</code>:</p>
<div class="inftblinformal">
<table class="cellalignment4327" title="Remove Behavior for the KEEP_COLUMNS Procedure" summary="This table describes the behavior of the KEEP_COLUMNS procedure when the operation parameter is set to REMOVE and various other procedure parameters are set to NULL." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t59">table_name</th>
<th class="cellalignment4328" id="r1c2-t59">column_list/column_table</th>
<th class="cellalignment4328" id="r1c3-t59">step_number</th>
<th class="cellalignment4328" id="r1c4-t59">Result</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t59" headers="r1c1-t59"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r2c1-t59 r1c2-t59"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r2c1-t59 r1c3-t59"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r2c1-t59 r1c4-t59">Remove all keep columns transformations for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t59" headers="r1c1-t59"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r3c1-t59 r1c2-t59"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r3c1-t59 r1c3-t59">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r3c1-t59 r1c4-t59">Remove all keep columns transformations with the specified <code dir="ltr">step_number</code> for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t59" headers="r1c1-t59"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r4c1-t59 r1c2-t59">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r4c1-t59 r1c3-t59">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r4c1-t59 r1c4-t59">Remove all keep columns transformations with the specified <code dir="ltr">column_list</code>/<code dir="ltr">column_table</code> and <code dir="ltr">step_number</code> for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t59" headers="r1c1-t59">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r5c1-t59 r1c2-t59"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r5c1-t59 r1c3-t59">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r5c1-t59 r1c4-t59">Remove all keep columns transformations with the specified <code dir="ltr">table_name</code> and <code dir="ltr">step_number</code> for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t59" headers="r1c1-t59"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r6c1-t59 r1c2-t59">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r6c1-t59 r1c3-t59"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r6c1-t59 r1c4-t59">Remove all keep columns transformations with the specified <code dir="ltr">column_list</code>/<code dir="ltr">column_table</code> for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t59" headers="r1c1-t59">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r7c1-t59 r1c2-t59">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r7c1-t59 r1c3-t59"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r7c1-t59 r1c4-t59">Remove all keep columns transformations with the specified <code dir="ltr">table_name</code> and <code dir="ltr">column_list</code>/<code dir="ltr">column_table</code> for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t59" headers="r1c1-t59">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r8c1-t59 r1c2-t59"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r8c1-t59 r1c3-t59"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r8c1-t59 r1c4-t59">Remove all keep columns transformations with the specified <code dir="ltr">table_name</code> for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t59" headers="r1c1-t59">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r9c1-t59 r1c2-t59">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r9c1-t59 r1c3-t59">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r9c1-t59 r1c4-t59">Remove all keep columns transformations with the specified <code dir="ltr">table_name</code>, <code dir="ltr">column_list</code>/<code dir="ltr">column_table</code>, and <code dir="ltr">step_number</code> for the specified rule.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS74049" class="refsect2"><a id="CHDEDACG"></a>
<h3 class="refsect2">MERGE_STREAMS Procedure<a id="sthref16297"></a><a id="sthref16298"></a><a id="sthref16299"></a></h3>
<p>This procedure merges a stream that is flowing from one capture process with a stream that is flowing from another capture process.</p>
<p>Typically, this procedure is used to merge two streams that were split using the <code dir="ltr">SPLIT_STREAMS</code> procedure in this package. The <code dir="ltr">SPLIT_STREAMS</code> procedure clones components of the original stream when it splits the streams. Therefore, the information in this section uses the following terminology:</p>
<ul>
<li>
<p>The stream before it was split off has the original queue, original capture process, and original propagation.</p>
</li>
<li>
<p>The stream that was split off by the <code dir="ltr">SPLIT_STREAMS</code> procedure has a cloned queue, cloned capture process, and cloned propagation.</p>
</li>
</ul>
<p>This procedure is called by the <code dir="ltr">MERGE_STREAMS_JOB</code> procedure. The <code dir="ltr">MERGE_STREAMS_JOB</code> procedure determines whether the streams are within a user-specified merge threshold so that the streams can be merged safely. If the streams are not within the merge threshold, then the <code dir="ltr">MERGE_STREAMS_JOB</code> procedure does nothing. Typically, it is best to run the <code dir="ltr">MERGE_STREAMS_JOB</code> procedure instead of running the <code dir="ltr">MERGE_STREAMS</code> procedure directly.</p>
<p>However, you can choose to run the <code dir="ltr">MERGE_STREAMS</code> procedure directly when the following conditions are met:</p>
<ul>
<li>
<p>The problem at the destination of the split stream has been corrected, and the destination queue can accept changes.</p>
</li>
<li>
<p>The cloned capture process used by the split stream is started and is capturing changes.</p>
</li>
<li>
<p>The apply process at the destination database is applying the changes captured by the cloned capture process.</p>
</li>
<li>
<p>The <code dir="ltr">CAPTURE_MESSAGE_CREATE_TIME</code> in the <code dir="ltr">GV$STREAMS_CAPTURE</code> view of the cloned capture process has caught up to, or nearly caught up to, the <code dir="ltr">CAPTURE_MESSAGE_CREATE_TIME</code> of the original capture process. The cloned capture process might never completely catch up to the original capture process. Therefore, you can merge the split stream when the cloned capture process has nearly caught up to the original capture process.</p>
</li>
</ul>
<p>The <code dir="ltr">MERGE_STREAMS</code> procedure performs the following actions:</p>
<ol>
<li>
<p>Stops the cloned capture process.</p>
</li>
<li>
<p>Stops the original capture process.</p>
</li>
<li>
<p>Copies the cloned propagation back to the original propagation. The propagation has the same name as the original propagation after it is copied back.</p>
</li>
<li>
<p>Starts the original capture process from the lower SCN value of these two SCN values:</p>
<ul>
<li>
<p>The acknowledged SCN of the cloned propagation.</p>
</li>
<li>
<p>The lowest acknowledged SCN of the other propagations that propagate changes captured by the original capture process.</p>
</li>
</ul>
<p>When the original capture process is started, it might recapture changes that it already captured, or it might capture changes that were already captured by the cloned capture process. In either case, the relevant apply processes will discard any duplicate changes they receive.</p>
</li>
<li>
<p>Drops the cloned propagation.</p>
</li>
<li>
<p>Drops the cloned capture process.</p>
</li>
<li>
<p>Drops the cloned queue.</p>
</li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="d_streams_adm.htm#CDECACGG">MERGE_STREAMS Procedure</a></p>
</li>
<li>
<p><a href="#CHDHGCJB">SPLIT_STREAMS Procedure</a></p>
</li>
</ul>
</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16300"></a>Syntax</p>
<pre dir="ltr">DBMS_XSTREAM_ADM.MERGE_STREAMS(
   cloned_propagation_name  IN  VARCHAR2,
   propagation_name         IN  VARCHAR2  DEFAULT NULL,
   queue_name               IN  VARCHAR2  DEFAULT NULL,
   perform_actions          IN  BOOLEAN   DEFAULT TRUE,
   script_name              IN  VARCHAR2  DEFAULT NULL,
   script_directory_object  IN  VARCHAR2  DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16301"></a>Parameters</p>
<div id="ARPLS74050" class="tblformal">
<p class="titleintable"><a id="sthref16302"></a><a id="sthref16303"></a>Table 204-22 MERGE_STREAMS Procedure Parameters</p>
<table class="cellalignment4330" title="MERGE_STREAMS Procedure Parameters" summary="This table describes the Parameters of DBMS_XSTREAM_ADM.MERGE_STREAMS subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t61">Parameter</th>
<th class="cellalignment4328" id="r1c2-t61">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t61" headers="r1c1-t61">
<p><code dir="ltr">cloned_propagation_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t61 r1c2-t61">
<p>The name of the cloned propagation used by the stream that was split off from the original stream using the <code dir="ltr">SPLIT_STREAMS</code> procedure. The name of the cloned propagation also identifies the cloned queue and capture process used by the cloned propagation.</p>
<p>You must specify an existing propagation name. Do not specify an owner.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t61" headers="r1c1-t61">
<p><code dir="ltr">propagation_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t61 r1c2-t61">
<p>The name of the propagation that is merged back to the original stream.</p>
<p>If <code dir="ltr">NULL</code>, then the name of the original propagation in the original stream is used. Specify <code dir="ltr">NULL</code> only if the streams were split using the <code dir="ltr">SPLIT_STREAMS</code> procedure.</p>
<p>Specify a non-<code dir="ltr">NULL</code> value to use a name that is different from the original propagation name or if you are merging two streams that were not split by the <code dir="ltr">SPLIT_STREAMS</code> procedure.</p>
<p>If a non-<code dir="ltr">NULL</code> value is specified, then an error is raised under either of the following conditions:</p>
<ul>
<li>
<p>The queue specified in the <code dir="ltr">queue_name</code> parameter does not exist.</p>
</li>
<li>
<p>The queue specified in the <code dir="ltr">queue_name</code> parameter exists but is not used by a capture process.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t61" headers="r1c1-t61">
<p><code dir="ltr">queue_name</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t61 r1c2-t61">
<p>The name of the queue that is the source queue for the propagation that is merged back.</p>
<p>If <code dir="ltr">NULL</code>, then the existing, original queue is the source queue for the propagation that is merged back. Specify <code dir="ltr">NULL</code> only if the streams were split using the <code dir="ltr">SPLIT_STREAMS</code> procedure.</p>
<p>Specify a non-<code dir="ltr">NULL</code> value if you are merging two streams that were not split by the <code dir="ltr">SPLIT_STREAMS</code> procedure. Specify the name of the existing queue used by the capture process that will capture changes in the merged stream.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t61" headers="r1c1-t61">
<p><code dir="ltr">perform_actions</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t61 r1c2-t61">
<p>If <code dir="ltr">TRUE</code>, then the procedure performs the necessary actions to merge the streams directly.</p>
<p>If <code dir="ltr">FALSE</code>, then the procedure does not perform the necessary actions to merge the streams directly.</p>
<p>Specify <code dir="ltr">FALSE</code> when this procedure is generating a script that you can edit and then run. The procedure raises an error if you specify <code dir="ltr">FALSE</code> and either of the following parameters is <code dir="ltr">NULL</code>:</p>
<ul>
<li>
<p><code dir="ltr">script_name</code></p>
</li>
<li>
<p><code dir="ltr">script_directory_object</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t61" headers="r1c1-t61">
<p><code dir="ltr">script_name</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t61 r1c2-t61">
<p>If non-<code dir="ltr">NULL</code> and the <code dir="ltr">perform_actions</code> parameter is <code dir="ltr">FALSE</code>, then specify the name of the script generated by this procedure. The script contains all of the statements used to merge the streams. If a file with the specified script name exists in the specified directory for the <code dir="ltr">script_directory_object</code> parameter, then the procedure appends the statements to the existing file.</p>
<p>If non-<code dir="ltr">NULL</code> and the <code dir="ltr">perform_actions</code> parameter is <code dir="ltr">TRUE</code>, then the procedure generates the specified script and performs the actions to split the stream directly.</p>
<p>If <code dir="ltr">NULL</code> and the <code dir="ltr">perform_actions</code> parameter is <code dir="ltr">TRUE</code>, then the procedure performs the actions to merge the streams directly and does not generate a script.</p>
<p>If <code dir="ltr">NULL</code> and the <code dir="ltr">perform_actions</code> parameter is <code dir="ltr">FALSE</code>, then the procedure raises an error.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t61" headers="r1c1-t61">
<p><code dir="ltr">script_directory_object</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t61 r1c2-t61">
<p>The directory object for the directory on the local computer system into which the generated script is placed.</p>
<p>If the <code dir="ltr">script_name</code> parameter is <code dir="ltr">NULL</code>, then the procedure ignores this parameter and does not generate a script.</p>
<p>If <code dir="ltr">NULL</code> and the <code dir="ltr">script_name</code> parameter is non-<code dir="ltr">NULL</code>, then the procedure raises an error.</p>
<p><span class="bold">Note:</span> The specified directory object cannot point to an Oracle Automatic Storage Management (ASM) disk group.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16304"></a>Usage Notes</p>
<p>You can use the <code dir="ltr">MERGE_STREAMS</code> procedure to merge two streams that were not split using the <code dir="ltr">SPLIT_STREAMS</code> procedure. Merging streams in this way can save resources and improve performance when a single database is running two or more capture processes.</p>
<p>The <code dir="ltr">DBA_STREAMS_SPLIT_MERGE</code> view contains information about split and merge operations.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS74051" class="refsect2"><a id="CHDFDGBC"></a>
<h3 class="refsect2">MERGE_STREAMS_JOB Procedure<a id="sthref16305"></a><a id="sthref16306"></a><a id="sthref16307"></a></h3>
<p>This procedure determines whether the original capture process and the cloned capture process are within the specified merge threshold. If they are within the merge threshold, then this procedure runs the <code dir="ltr">MERGE_STREAMS</code> procedure to merge the two streams.</p>
<p>Typically, this procedure is used to merge two streams that were split using the <code dir="ltr">SPLIT_STREAMS</code> procedure in this package. The <code dir="ltr">SPLIT_STREAMS</code> procedure clones components of the original stream when it splits the streams. Therefore, the information in this section uses the following terminology:</p>
<ul>
<li>
<p>The stream before it was split off has the original queue, original capture process, and original propagation.</p>
</li>
<li>
<p>The stream that was split off by the <code dir="ltr">SPLIT_STREAMS</code> procedure has a cloned queue, cloned capture process, and cloned propagation.</p>
</li>
</ul>
<p>If the <code dir="ltr">auto_merge_threshold</code> parameter was set to a positive number in the <code dir="ltr">SPLIT_STREAMS</code> procedure that split the streams, then a merge job runs the <code dir="ltr">MERGE_STREAMS_JOB</code> procedure automatically according to its schedule. The schedule name is specified for the <code dir="ltr">schedule_name</code> parameter, and the merge job name is specified for the <code dir="ltr">merge_job_name</code> parameter when the <code dir="ltr">MERGE_STREAMS_JOB</code> procedure is run automatically. The merge job and its schedule were created by the <code dir="ltr">SPLIT_STREAMS</code> procedure.</p>
<p>If the <code dir="ltr">auto_merge_threshold</code> parameter was set to <code dir="ltr">NULL</code> or <code dir="ltr">0</code> (zero) in the <code dir="ltr">SPLIT_STREAMS</code> procedure that split the streams, then you can run the <code dir="ltr">MERGE_STREAMS_JOB</code> procedure manually. In this case, it is not run automatically.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#CHDEDACG">MERGE_STREAMS Procedure</a></p>
</li>
<li>
<p><a href="#CHDHGCJB">SPLIT_STREAMS Procedure</a></p>
</li>
<li>
<p><a class="olink STREP144" href="../STREP/man_gen_rep.htm#STREP144"><span class="italic">Oracle Streams Replication Administrator&#39;s Guide</span></a> for instructions on using the <code dir="ltr">MERGE_STREAMS_JOB</code> procedure</p>
</li>
</ul>
</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16308"></a>Syntax</p>
<pre dir="ltr">DBMS_XSTREAM_ADM.MERGE_STREAMS_JOB(
   cloned_propagation_name IN VARCHAR2,
   propagation_name        IN VARCHAR2 DEFAULT NULL,
   queue_name              IN VARCHAR2 DEFAULT NULL,
   merge_threshold         IN NUMBER,
   schedule_name           IN VARCHAR2 DEFAULT NULL,
   merge_job_name          IN VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16309"></a>Parameters</p>
<div id="ARPLS74052" class="tblformal">
<p class="titleintable"><a id="sthref16310"></a><a id="sthref16311"></a>Table 204-23 MERGE_STREAMS_JOB Procedure Parameters</p>
<table class="cellalignment4330" title="MERGE_STREAMS_JOB Procedure Parameters" summary="This table describes the Parameters of DBMS_XSTREAM_ADM.MERGE_STREAMS_JOB subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t63">Parameter</th>
<th class="cellalignment4328" id="r1c2-t63">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t63" headers="r1c1-t63">
<p><code dir="ltr">cloned_propagation_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t63 r1c2-t63">
<p>The name of the cloned propagation used by the stream that was split off from the original stream using the <code dir="ltr">SPLIT_STREAMS</code> procedure. The name of the cloned propagation also identifies the cloned queue and capture process used by the cloned propagation.</p>
<p>You must specify an existing propagation name. Do not specify an owner.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t63" headers="r1c1-t63">
<p><code dir="ltr">propagation_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t63 r1c2-t63">
<p>The name of the propagation that is merged back to the original stream.</p>
<p>If <code dir="ltr">NULL</code>, then the name of the original propagation in the original stream is used. Specify <code dir="ltr">NULL</code> only if the streams were split using the <code dir="ltr">SPLIT_STREAMS</code> procedure.</p>
<p>Specify a non-<code dir="ltr">NULL</code> value to use a name that is different from the original propagation name or if you are merging two streams that were not split by the <code dir="ltr">SPLIT_STREAMS</code> procedure.</p>
<p>If a non-<code dir="ltr">NULL</code> value is specified, then an error is raised under either of the following conditions:</p>
<ul>
<li>
<p>The queue specified in the <code dir="ltr">queue_name</code> parameter does not exist.</p>
</li>
<li>
<p>The queue specified in the <code dir="ltr">queue_name</code> parameter exists but is not used by a capture process.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t63" headers="r1c1-t63">
<p><code dir="ltr">queue_name</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t63 r1c2-t63">
<p>The name of the queue that is the source queue for the propagation that is merged back.</p>
<p>If <code dir="ltr">NULL</code>, then the existing, original queue is the source queue for the propagation that is merged back. Specify <code dir="ltr">NULL</code> only if the streams were split using the <code dir="ltr">SPLIT_STREAMS</code> procedure.</p>
<p>Specify a non-<code dir="ltr">NULL</code> value if you are merging two streams that were not split by the <code dir="ltr">SPLIT_STREAMS</code> procedure. Specify the name of the existing queue used by the capture process that will capture changes in the merged stream.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t63" headers="r1c1-t63">
<p><code dir="ltr">merge_threshold</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t63 r1c2-t63">
<p>The merge threshold in seconds.</p>
<p>The value of the <code dir="ltr">CAPTURE_MESSAGE_CREATE_TIME</code> column for each capture process in the <code dir="ltr">GV$STREAMS_CAPTURE</code> dynamic performance view determines whether the streams are merged.</p>
<p>Specifically, if the difference, in seconds, between the <code dir="ltr">CAPTURE_MESSAGE_CREATE_TIME</code> of the cloned capture process and the original capture process is less than or equal to the value specified for this parameter, then this procedure runs the <code dir="ltr">MERGE_STREAMS</code> procedure to merge the streams. If the difference is greater than the value specified by this parameter, then this procedure does nothing.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t63" headers="r1c1-t63">
<p><code dir="ltr">schedule_name</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t63 r1c2-t63">
<p>The name of the schedule for the merge job.</p>
<p>If <code dir="ltr">NULL</code>, then no schedule name is specified. Typically, you set this parameter to <code dir="ltr">NULL</code> when the <code dir="ltr">auto_merge_threshold</code> parameter was set to <code dir="ltr">NULL</code> or <code dir="ltr">0</code> (zero) in the <code dir="ltr">SPLIT_STREAMS</code> procedure that split the streams.</p>
<p>Specify <code dir="ltr">NULL</code> if you run this procedure manually.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t63" headers="r1c1-t63">
<p><code dir="ltr">merge_job_name</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t63 r1c2-t63">
<p>The name of the job that merges the streams.</p>
<p>If <code dir="ltr">NULL</code>, then no merge job name is specified. Typically, you set this parameter to <code dir="ltr">NULL</code> when the <code dir="ltr">auto_merge_threshold</code> parameter was set to <code dir="ltr">NULL</code> or <code dir="ltr">0</code> (zero) in the <code dir="ltr">SPLIT_STREAMS</code> procedure that split the streams.</p>
<p>Specify <code dir="ltr">NULL</code> if you run this procedure manually.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16312"></a>Usage Notes</p>
<p>You can use the <code dir="ltr">MERGE_STREAMS_JOB</code> procedure to merge two streams that were not split using the <code dir="ltr">SPLIT_STREAMS</code> procedure. Merging streams in this way can save resources and improve performance when a single database is running two or more capture processes.</p>
<p>After the <code dir="ltr">MERGE_STREAMS_JOB</code> procedure completes, you can query the <code dir="ltr">DBA_CAPTURE</code> and <code dir="ltr">DBA_PROPAGATION</code> views to determine whether the streams were merged. If the streams were merged, then the cloned capture process and cloned propagation do not appear in these views.</p>
<p>If the streams were merged and the <code dir="ltr">schedule_name</code> and <code dir="ltr">merge_job_name</code> parameters were non-<code dir="ltr">NULL</code>, then the specified schedule and merge job are deleted automatically.</p>
<p>The <code dir="ltr">DBA_STREAMS_SPLIT_MERGE</code> view contains information about split and merge operations.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS74053" class="refsect2"><a id="CHDDAGED"></a>
<h3 class="refsect2">PURGE_SOURCE_CATALOG Procedure<a id="sthref16313"></a><a id="sthref16314"></a><a id="sthref16315"></a></h3>
<p>This procedure removes all Oracle Streams data dictionary information at the local database for the specified object. You can use this procedure to remove Oracle Streams metadata that is not needed currently and will not be needed in the future.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16316"></a>Syntax</p>
<pre dir="ltr">DBMS_XSTREAM_ADM.PURGE_SOURCE_CATALOG(
   source_database     IN  VARCHAR2,
   source_object_name  IN  VARCHAR2,
   source_object_type  IN  VARCHAR2,
   source_root_name    IN  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16317"></a>Parameters</p>
<div id="ARPLS74054" class="tblformal">
<p class="titleintable"><a id="sthref16318"></a><a id="sthref16319"></a>Table 204-24 PURGE_SOURCE_CATALOG Procedure Parameters</p>
<table class="cellalignment4330" title="PURGE_SOURCE_CATALOG Procedure Parameters" summary="This table describes the Parameters of DBMS_XSTREAM_ADM.PURGE_SOURCE_CATALOG subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t64">Parameter</th>
<th class="cellalignment4328" id="r1c2-t64">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t64" headers="r1c1-t64">
<p><code dir="ltr">source_database</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t64 r1c2-t64">
<p>In a non-CDB, specify the global name of the source database containing the database object.</p>
<p>In a CDB, specify the global name of the container containing the database object. The container can be the root or a PDB.</p>
<p>If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify <code dir="ltr">DBS1</code> and the domain is <code dir="ltr">.NET</code>, then the procedure specifies <code dir="ltr">DBS1.NET</code> automatically.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t64" headers="r1c1-t64">
<p><code dir="ltr">source_object_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t64 r1c2-t64">
<p>The name of the object specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">object_name</span></code>. For example, <code dir="ltr">hr.employees</code>. If the schema is not specified, then the current user is the default.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t64" headers="r1c1-t64">
<p><code dir="ltr">source_object_type</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t64 r1c2-t64">
<p>Type of the object. Currently, <code dir="ltr">TABLE</code> is the only possible object type.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t64" headers="r1c1-t64">
<p><code dir="ltr">source_root_name</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t64 r1c2-t64">
<p>The global name of the source root containing the object in a CDB. The source root is where the changes being captured originated in a CDB.</p>
<p>If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify <code dir="ltr">DBS1</code> and the domain is <code dir="ltr">EXAMPLE.COM</code>, then the procedure specifies <code dir="ltr">DBS1.EXAMPLE.COM</code> automatically.</p>
<p>If the <code dir="ltr">source_root_name</code> parameter is <code dir="ltr">NULL</code>, then the global name of the local root is the default.</p>
<p><span class="bold">Note:</span> This parameter only applies to a CDB.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16320"></a>Usage Notes</p>
<p>The global name of the source database containing the object must be specified for the <code dir="ltr">source_database</code> parameter. If the current database is not the source database for the object, then the procedure removes data dictionary information about the object from the current database, not the source database.</p>
<p>For example, suppose changes to the <code dir="ltr">hr.employees</code> table at the <code dir="ltr">dbs1.net</code> source database are being applied to the <code dir="ltr">hr.employees</code> table at the <code dir="ltr">dbs2.net</code> destination database. Also, suppose <code dir="ltr">hr.employees</code> at <code dir="ltr">dbs2.net</code> is not a source at all. In this case, specifying <code dir="ltr">dbs2.net</code> as the <code dir="ltr">source_database</code> for this table results in an error. However, specifying <code dir="ltr">dbs1.net</code> as the <code dir="ltr">source_database</code> for this table while running the <code dir="ltr">PURGE_SOURCE_CATALOG</code> procedure at the <code dir="ltr">dbs2.net</code> database removes data dictionary information about the table at <code dir="ltr">dbs2.net</code>.</p>
<p>Do not run this procedure at a database if either of the following conditions is true:</p>
<ul>
<li>
<p>Logical change records (LCRs) captured by the capture process for the object are or might be applied locally without reinstantiating the object.</p>
</li>
<li>
<p>LCRs captured by the capture process for the object are or might be forwarded by the database without reinstantiating the object.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
These conditions do not apply to LCRs that were not created by the capture process. That is, these conditions do not apply to user-created LCRs.</div>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS74456" class="refsect2"><a id="CHDDGCAC"></a>
<h3 class="refsect2">RECOVER_OPERATION Procedure<a id="sthref16321"></a></h3>
<p>This procedure provides options for split and merge operations that stopped because they encountered an errors. This procedure either rolls forward the operation, rolls back the operation, or purges all of the metadata about the operation. Split and merge operations might be run in an XStream Out environment in which multiple outbound servers use the same capture process.</p>
<p>This procedure only can perform these actions for split and merge operations using the <code dir="ltr">split_threshold</code> and <code dir="ltr">merge_threshold</code> capture process parameters set to non-<code dir="ltr">NULL</code> values to enable automatic split and merge.</p>
<p>Information about the operation is stored in the following data dictionary views when the operation is in process:</p>
<ul>
<li>
<p><a class="olink REFRN23545" href="../REFRN/GUID-AE694110-3EC9-49E7-BDA9-EFAF283C7D77.htm#REFRN23545"><code dir="ltr">DBA_RECOVERABLE_SCRIPT</code></a></p>
</li>
<li>
<p><a class="olink REFRN23548" href="../REFRN/GUID-A9D0BD9D-44BD-4CC6-966A-1C9740DAD037.htm#REFRN23548"><code dir="ltr">DBA_RECOVERABLE_SCRIPT_PARAMS</code></a></p>
</li>
<li>
<p><a class="olink REFRN23546" href="../REFRN/GUID-0BC6927B-C58D-4252-BA83-43C55FA8A19E.htm#REFRN23546"><code dir="ltr">DBA_RECOVERABLE_SCRIPT_BLOCKS</code></a></p>
</li>
<li>
<p><a class="olink REFRN23547" href="../REFRN/GUID-9CAB8ECE-B0BA-4E13-8242-8A31AE2336B5.htm#REFRN23547"><code dir="ltr">DBA_RECOVERABLE_SCRIPT_ERRORS</code></a></p>
</li>
</ul>
<p>The data dictionary views are populated at the database that contains the capture process.</p>
<p>When the operation completes successfully, metadata about the operation is moved from the <code dir="ltr">DBA_RECOVERABLE_SCRIPT</code> view to the <a class="olink REFRN23755" href="../REFRN/GUID-F0381E5D-7C94-4770-A5B2-C1630025F348.htm#REFRN23755"><code dir="ltr">DBA_RECOVERABLE_SCRIPT_HIST</code></a> view. The other views, <code dir="ltr">DBA_RECOVERABLE_SCRIPT_PARAMS</code>, <code dir="ltr">DBA_RECOVERABLE_SCRIPT_BLOCKS</code>, and <code dir="ltr">DBA_RECOVERABLE_SCRIPT_ERRORS</code>, retain information about the operation until it is purged automatically after 30 days.</p>
<p>When one of these operations encounters an error and stops, metadata about the operation remains in these views. In this case, you can either roll forward, roll back, or purge the metadata about the operation using the <code dir="ltr">RECOVER_OPERATION</code> procedure. If you choose to roll forward the operation, then correct conditions that caused the errors reported in <code dir="ltr">DBA_RECOVERABLE_SCRIPT_ERRORS</code> before proceeding.</p>
<p>Run the <code dir="ltr">RECOVER_OPERATION</code> procedure at the database that contains the capture process.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
To run the <code dir="ltr">RECOVER_OPERATION</code> procedure, both databases must be Oracle Database 10<span class="italic">g</span> Release 2 or later databases.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STREP149" href="../STREP/man_gen_rep.htm#STREP149"></a>
<ul>
<li>
<p><a href="#CHDHGCJB">&#34;SPLIT_STREAMS Procedure&#34;</a></p>
</li>
<li>
<p><a href="#CHDEDACG">&#34;MERGE_STREAMS Procedure&#34;</a></p>
</li>
<li>
<p><a href="#CHDFDGBC">&#34;MERGE_STREAMS_JOB Procedure&#34;</a></p>
</li>
<li>
<p><span class="italic">Oracle Streams Replication Administrator&#39;s Guide</span></p>
</li>
</ul>
</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16322"></a>Syntax</p>
<pre dir="ltr">DBMS_XSTREAM_ADM.RECOVER_OPERATION(
   script_id       IN  RAW,
   operation_mode  IN  VARCHAR2  DEFAULT &#39;FORWARD&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16323"></a>Parameters</p>
<div id="ARPLS74457" class="tblformal">
<p class="titleintable"><a id="sthref16324"></a><a id="sthref16325"></a>Table 204-25 RECOVER_OPERATION Procedure Parameters</p>
<table class="cellalignment4330" title="RECOVER_OPERATION Procedure Parameters" summary="This table describes the Parameters of DBMS_XSTREAM_ADM.RECOVER_OPERATION subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t68">Parameter</th>
<th class="cellalignment4328" id="r1c2-t68">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t68" headers="r1c1-t68">
<p><code dir="ltr">script_id</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t68 r1c2-t68">
<p>The operation id of the operation that is being rolled forward, rolled back, or purged. Query the <code dir="ltr">SCRIPT_ID</code> column of the <code dir="ltr">DBA_RECOVERABLE_SCRIPT</code> data dictionary view to determine the operation id.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t68" headers="r1c1-t68">
<p><code dir="ltr">operation_mode</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t68 r1c2-t68">
<p>If <code dir="ltr">FORWARD</code>, then the procedure rolls forward the operation. Specify <code dir="ltr">FORWARD</code> to try to complete the operation.</p>
<p>If <code dir="ltr">ROLLBACK</code>, then the procedure rolls back all of the actions performed in the operation. If the rollback is successful, then this option also moves the metadata about the operation from the <code dir="ltr">DBA_RECOVERABLE_SCRIPT</code> view to the <code dir="ltr">DBA_RECOVERABLE_SCRIPT_HIST</code> view. The other views retain information about the operation for 30 days.</p>
<p>If <code dir="ltr">PURGE</code>, then the procedure moves the metadata about the operation from the <code dir="ltr">DBA_RECOVERABLE_SCRIPT</code> view to the <code dir="ltr">DBA_RECOVERABLE_SCRIPT_HIST</code> view without rolling the operation back. The other views retain information about the operation for 30 days.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS74055" class="refsect2"><a id="CHDBHEAC"></a>
<h3 class="refsect2">REMOVE_QUEUE Procedure<a id="sthref16326"></a><a id="sthref16327"></a><a id="sthref16328"></a><a id="sthref16329"></a></h3>
<p>This procedure removes the specified <code dir="ltr">ANYDATA</code> queue.</p>
<p>Specifically, this procedure performs the following actions:</p>
<ol>
<li>
<p>Waits until all current enqueue and dequeue transactions commit.</p>
</li>
<li>
<p>Stops the queue, which means that no further enqueues into the queue or dequeues from the queue are allowed.</p>
</li>
<li>
<p>Drops the queue.</p>
</li>
<li>
<p>If the <code dir="ltr">drop_unused_queue_table</code> parameter is set to <code dir="ltr">TRUE</code>, then drops the queue table if it is empty and no other queues are using it.</p>
</li>
<li>
<p>If the <code dir="ltr">cascade</code> parameter is set to <code dir="ltr">TRUE</code>, then drops all of the XStream clients that are using the queue.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The specified queue must be a <code dir="ltr">ANYDATA</code> queue.</div>
</li>
</ol>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16330"></a>Syntax</p>
<pre dir="ltr">DBMS_XSTREAM_ADM.REMOVE_QUEUE(
   queue_name               IN  VARCHAR2,
   cascade                  IN  BOOLEAN  DEFAULT FALSE,
   drop_unused_queue_table  IN  BOOLEAN  DEFAULT TRUE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16331"></a>Parameters</p>
<div id="ARPLS74056" class="tblformal">
<p class="titleintable"><a id="sthref16332"></a><a id="sthref16333"></a>Table 204-26 REMOVE_QUEUE Procedure Parameters</p>
<table class="cellalignment4330" title="REMOVE_QUEUE Procedure Parameters" summary="This table describes the Parameters of DBMS_XSTREAM_ADM.REMOVE_QUEUE subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t70">Parameter</th>
<th class="cellalignment4328" id="r1c2-t70">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t70" headers="r1c1-t70">
<p><code dir="ltr">queue_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t70 r1c2-t70">
<p>The name of the queue to remove, specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">queue_name</span></code>. For example, <code dir="ltr">strmadmin.streams_queue</code>. If the schema is not specified, then the current user is the default.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t70" headers="r1c1-t70">
<p><code dir="ltr">cascade</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t70 r1c2-t70">
<p>If <code dir="ltr">TRUE</code>, then the procedure drops any XStream clients that use the queue.</p>
<p>If <code dir="ltr">FALSE</code>, then the procedure raises an error if there are any XStream clients that use the queue. Before you run this procedure with the <code dir="ltr">cascade</code> parameter set to <code dir="ltr">FALSE</code>, make sure no XStream clients are using the queue currently.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t70" headers="r1c1-t70">
<p><code dir="ltr">drop_unused_queue_table</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t70 r1c2-t70">
<p>If <code dir="ltr">TRUE</code> and the queue table for the queue is empty, then the procedure drops the queue table. The queue table is not dropped if it contains any messages or if it is used by another queue.</p>
<p>If <code dir="ltr">FALSE</code>, then the procedure does not drop the queue table.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS74057" class="refsect2"><a id="CHDJFHCE"></a>
<h3 class="refsect2">REMOVE_RULE Procedure<a id="sthref16334"></a><a id="sthref16335"></a><a id="sthref16336"></a><a id="sthref16337"></a><a id="sthref16338"></a></h3>
<p>This procedure removes the specified rule or all rules from the rule set associated with the specified capture process, apply process, or propagation.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If a rule was automatically created by the system, and you want to drop the rule, then you should use this procedure to remove the rule instead of the <code dir="ltr">DBMS_RULE_ADM.DROP_RULE</code> procedure. If you use the <code dir="ltr">DBMS_RULE_ADM.DROP_RULE</code> procedure, then some metadata about the rule might remain.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16339"></a>Syntax</p>
<pre dir="ltr">DBMS_XSTREAM_ADM.REMOVE_RULE(
   rule_name         IN  VARCHAR2,
   streams_type      IN  VARCHAR2,
   streams_name      IN  VARCHAR2,
   drop_unused_rule  IN  BOOLEAN  DEFAULT TRUE,
   inclusion_rule    IN  BOOLEAN  DEFAULT TRUE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16340"></a>Parameters</p>
<div id="ARPLS74058" class="tblformal">
<p class="titleintable"><a id="sthref16341"></a><a id="sthref16342"></a>Table 204-27 REMOVE_RULE Procedure Parameters</p>
<table class="cellalignment4330" title="REMOVE_RULE Procedure Parameters" summary="This table describes the Parameters of DBMS_XSTREAM_ADM.REMOVE_RULE subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t72">Parameter</th>
<th class="cellalignment4328" id="r1c2-t72">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t72" headers="r1c1-t72">
<p><code dir="ltr">rule_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t72 r1c2-t72">
<p>The name of the rule to remove, specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">rule_name</span></code>. If <code dir="ltr">NULL</code>, then the procedure removes all rules from the specified capture process, apply process, or propagation rule set.</p>
<p>For example, to specify a rule in the <code dir="ltr">hr</code> schema named <code dir="ltr">prop_rule1</code>, enter <code dir="ltr">hr.prop_rule1</code>. If the schema is not specified, then the current user is the default.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t72" headers="r1c1-t72">
<p><code dir="ltr">streams_type</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t72 r1c2-t72">
<p>The type of XStream client:</p>
<ul>
<li>
<p>Specify <code dir="ltr">capture</code> for a capture process.</p>
</li>
<li>
<p>Specify <code dir="ltr">propagation</code> for a propagation.</p>
</li>
<li>
<p>Specify <code dir="ltr">apply</code> for an apply process.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t72" headers="r1c1-t72">
<p><code dir="ltr">streams_name</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t72 r1c2-t72">
<p>The name of the XStream client, which can be a capture process, propagation, or apply process. Do not specify an owner.</p>
<p>If the specified XStream client does not exist, but there is metadata in the data dictionary that associates the rule with this client, then the procedure removes the metadata.</p>
<p>If the specified XStream client does not exist, and there is no metadata in the data dictionary that associates the rule with this client, then the procedure raises an error.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t72" headers="r1c1-t72">
<p><code dir="ltr">drop_unused_rule</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t72 r1c2-t72">
<p>If <code dir="ltr">TRUE</code> and the rule is not in any rule set, then the procedure drops the rule from the database.</p>
<p>If <code dir="ltr">TRUE</code> and the rule exists in any rule set, then the procedure does not drop the rule from the database.</p>
<p>If <code dir="ltr">FALSE</code>, then the procedure does not drop the rule from the database.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t72" headers="r1c1-t72">
<p><code dir="ltr">inclusion_rule</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t72 r1c2-t72">
<p>If <code dir="ltr">inclusion_rule</code> is <code dir="ltr">TRUE</code>, then the procedure removes the rule from the positive rule set for the XStream client.</p>
<p>If <code dir="ltr">inclusion_rule</code> is <code dir="ltr">FALSE</code>, then the procedure removes the rule from the negative rule set for the XStream client.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS70204" class="refsect2"><a id="CACHABED"></a>
<h3 class="refsect2">REMOVE_SUBSET_OUTBOUND_RULES Procedure<a id="sthref16343"></a></h3>
<p>This procedure removes subset rules from an outbound server configuration.</p>
<p>The names of the specified insert, update, and delete rules must match those generated by the <code dir="ltr">ADD_SUBSET_OUTBOUND_RULES</code> procedure. To view the rule names for subset rules, run the following query:</p>
<pre dir="ltr">SELECT RULE_OWNER, SUBSETTING_OPERATION, RULE_NAME 
   FROM ALL_XSTREAM_RULES 
   WHERE SUBSETTING_OPERATION IS NOT NULL;
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>This procedure removes the declarative rule-based transformation associated with each rule it removes.</p>
</li>
<li>
<p>This procedure does not remove rules from the outbound server&#39;s capture process.</p>
</li>
</ul>
</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CACFEEIC">&#34;ADD_SUBSET_OUTBOUND_RULES Procedure&#34;</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16344"></a>Syntax</p>
<pre dir="ltr">DBMS_XSTREAM_ADM.REMOVE_SUBSET_OUTBOUND_RULES(
   server_name      IN VARCHAR2,
   insert_rule_name IN VARCHAR2, 
   update_rule_name IN VARCHAR2, 
   delete_rule_name IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS74059" class="refsect2"><a id="CHDJBFGH"></a>
<h3 class="refsect2">REMOVE_XSTREAM_CONFIGURATION Procedure<a id="sthref16345"></a><a id="sthref16346"></a></h3>
<p>This procedure removes the XStream configuration at the local database.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16347"></a>Syntax</p>
<pre dir="ltr">DBMS_XSTREAM_ADM.REMOVE_XSTREAM_CONFIGURATION(
   container IN VARCHAR2  DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16348"></a>Parameters</p>
<div id="ARPLS74772" class="tblformal">
<p class="titleintable"><a id="sthref16349"></a><a id="sthref16350"></a>Table 204-28 REMOVE_XSTREAM_CONFIGURATION Procedure Parameters</p>
<table class="cellalignment4330" title="REMOVE_XSTREAM_CONFIGURATION Procedure Parameters" summary="This table describes the parameters of DBMS_XSTREAM_ADM.REMOVE_XSTREAM_CONFIGURATION subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t75">Parameter</th>
<th class="cellalignment4328" id="r1c2-t75">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t75" headers="r1c1-t75">
<p><code dir="ltr">container</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t75 r1c2-t75">
<p>If <code dir="ltr">CURRENT</code>, then the XStream configuration is removed from the current container. <code dir="ltr">CURRENT</code> can be specified while connected to the root or to a PDB in a CDB.</p>
<p>If <code dir="ltr">ALL</code>, then the XStream configuration is removed from all of the containers in the CDB. To specify <code dir="ltr">ALL</code>, the procedure must be invoked in the root.</p>
<p>If a container name, then the XStream configuration is removed from the specified container. To specify root, use <code dir="ltr">CDB$ROOT</code> while connected to the root. To specify a PDB, the procedure must be invoked in the root.</p>
<p><span class="bold">Note:</span> This parameter only applies to a CDB.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16351"></a>Usage Notes</p>
<p>Specifically, this procedure performs the following actions at the local database:</p>
<ul>
<li>
<p>Drops all capture processes</p>
</li>
<li>
<p>If any tables have been prepared for instantiation, then aborts preparation for instantiation for the table using the <code dir="ltr">ABORT_TABLE_INSTANTIATION</code> procedure in the <code dir="ltr">DBMS_CAPTURE_ADM</code> package</p>
</li>
<li>
<p>If any schemas have been prepared for instantiation, then aborts preparation for instantiation for the schema using the <code dir="ltr">ABORT_SCHEMA_INSTANTIATION</code> procedure in the <code dir="ltr">DBMS_CAPTURE_ADM</code> package</p>
</li>
<li>
<p>If the database has been prepared for instantiation, then aborts preparation for instantiation for the database using the <code dir="ltr">ABORT_GLOBAL_INSTANTIATION</code> procedure in the <code dir="ltr">DBMS_CAPTURE_ADM</code> package</p>
</li>
<li>
<p>Drops propagations that were created using either the <code dir="ltr">DBMS_XSTREAM_ADM</code> package or the <code dir="ltr">DBMS_PROPAGATION_ADM</code> package. Before a propagation is dropped, its propagation job is disabled. Does not drop propagations that were created using the <code dir="ltr">DBMS_AQADM</code> package.</p>
</li>
<li>
<p>Disables all propagation jobs used by propagations</p>
</li>
<li>
<p>Drops all apply processes. If there are apply errors in the error queue for an apply process, then this procedure deletes these apply errors before it drops the apply process.</p>
</li>
<li>
<p>Removes specifications for DDL handlers used by apply processes, but does not delete the PL/SQL procedures used by these handlers</p>
</li>
<li>
<p>Removes specifications for message handlers used by apply processes, but does not delete the PL/SQL procedures used by these handlers</p>
</li>
<li>
<p>Removes specifications for precommit handlers used by apply processes, but does not delete the PL/SQL procedures used by these handlers</p>
</li>
<li>
<p>Removes the instantiation SCN and ignore SCN for each apply object and schema and for the entire database</p>
</li>
<li>
<p>Removes messaging clients</p>
</li>
<li>
<p>Unsets message notification specifications that were set using the <code dir="ltr">SET_MESSAGE_NOTIFICATION</code> procedure in the <code dir="ltr">DBMS_XSTREAM_ADM</code> package</p>
</li>
<li>
<p>Removes specifications for procedure DML handlers and error handlers, but does not delete the PL/SQL procedures used by these handlers</p>
</li>
<li>
<p>Removes update conflict handlers</p>
</li>
<li>
<p>Removes specifications for substitute key columns for apply tables</p>
</li>
<li>
<p>Drops rule sets and rules that were created using the <code dir="ltr">DBMS_XSTREAM_ADM</code> package.</p>
</li>
<li>
<p>Drops unused rule sets that were used by capture processes, propagations, apply processes, and messaging clients, and removes the rules in these rule sets. These rules and rule sets are removed regardless of whether they were created using the <code dir="ltr">DBMS_XSTREAM_ADM</code> package or the <code dir="ltr">DBMS_RULE_ADM</code> package.</p>
</li>
</ul>
<p>This procedure stops capture processes and apply processes before it drops them.</p>
<p>This procedure does not drop rule sets or rules if they meet both of the following conditions:</p>
<ul>
<li>
<p>The rule sets or rules were created using the <code dir="ltr">DBMS_RULE_ADM</code> package.</p>
</li>
<li>
<p>The rule sets or rules were not used by a capture process, propagation, apply process, or messaging client.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Attention:</p>
Running this procedure is dangerous. You should run this procedure only if you are sure you want to remove the entire XStream configuration at a database. If an Oracle Streams configuration exists at the database, then this procedure also removes the entire Oracle Streams configuration.</div>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>Running this procedure repeatedly does not cause errors. If the procedure fails to complete, then you can run it again.</p>
</li>
<li>
<p>This procedure commits multiple times.</p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS74060" class="refsect2"><a id="CHDJIGAC"></a>
<h3 class="refsect2">RENAME_COLUMN Procedure<a id="sthref16352"></a><a id="sthref16353"></a></h3>
<p>This procedure either adds or removes a declarative rule-based transformation which renames a column in a row logical change record (LCR) that satisfies the specified rule.</p>
<p>For the transformation to be performed when the specified rule evaluates to <code dir="ltr">TRUE</code>, the rule must be in the positive rule set of an XStream client. XStream clients include capture processes, propagations, and apply processes.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>The <code dir="ltr">RENAME_COLUMN</code> procedure supports the same data types supported by Oracle Streams capture processes.</p>
</li>
<li>
<p>Declarative transformations can transform row LCRs only. Therefore, a DML rule must be specified when you run this procedure. If a DDL rule is specified, then the procedure raises an error.</p>
</li>
</ul>
</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink XSTRM" href="../XSTRM/toc.htm"><span class="italic">Oracle Database XStream Guide</span></a> for more information about declarative rule-based transformations and about the data types supported by Oracle Streams capture processes</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16354"></a>Syntax</p>
<pre dir="ltr">DBMS_XSTREAM_ADM.RENAME_COLUMN(
   rule_name         IN  VARCHAR2,
   table_name        IN  VARCHAR2,
   from_column_name  IN  VARCHAR2,
   to_column_name    IN  VARCHAR2,
   value_type        IN  VARCHAR2  DEFAULT &#39;*&#39;,
   step_number       IN  NUMBER    DEFAULT 0,
   operation         IN  VARCHAR2  DEFAULT &#39;ADD&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16355"></a>Parameters</p>
<div id="ARPLS74061" class="tblformal">
<p class="titleintable"><a id="sthref16356"></a><a id="sthref16357"></a>Table 204-29 RENAME_COLUMN Procedure Parameters</p>
<table class="cellalignment4330" title="RENAME_COLUMN Procedure Parameters " summary="This table describes the Parameters of DBMS_XSTREAM_ADM.RENAME_COLUMN subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t80">Parameter</th>
<th class="cellalignment4328" id="r1c2-t80">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t80" headers="r1c1-t80">
<p><code dir="ltr">rule_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t80 r1c2-t80">
<p>The name of the rule, specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">rule_name</span></code>. If <code dir="ltr">NULL</code>, then the procedure raises an error.</p>
<p>For example, to specify a rule in the <code dir="ltr">hr</code> schema named <code dir="ltr">employees12</code>, enter <code dir="ltr">hr.employees12</code>. If the schema is not specified, then the current user is the default.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t80" headers="r1c1-t80">
<p><code dir="ltr">table_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t80 r1c2-t80">
<p>The name of the table in which the column is renamed in the row LCR, specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">object_name</span></code>. For example, <code dir="ltr">hr.employees</code>. If the schema is not specified, then the current user is the default.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t80" headers="r1c1-t80">
<p><code dir="ltr">from_column_name</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t80 r1c2-t80">
<p>The name of the column to be renamed in each row LCR that satisfies the rule.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t80" headers="r1c1-t80">
<p><code dir="ltr">to_column_name</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t80 r1c2-t80">
<p>The new name of the column in each row LCR that satisfies the rule.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t80" headers="r1c1-t80">
<p><code dir="ltr">value_type</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t80 r1c2-t80">
<p>Specify <code dir="ltr">&#39;NEW&#39;</code> to rename the column in the new values in the row&nbsp;LCR.</p>
<p>Specify <code dir="ltr">&#39;OLD&#39;</code> to rename the column in the old values in the row&nbsp;LCR.</p>
<p>Specify <code dir="ltr">&#39;*&#39;</code> to rename the column in both the old and new values in the row LCR.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t80" headers="r1c1-t80">
<p><code dir="ltr">step_number</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t80 r1c2-t80">
<p>The order of execution of the transformation.</p>
<p><span class="bold">See Also:</span> <a class="olink XSTRM72754" href="../XSTRM/xstrm_gen_cncpt.htm#XSTRM72754"><span class="italic">Oracle Database XStream Guide</span></a> for more information about transformation ordering</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t80" headers="r1c1-t80">
<p><code dir="ltr">operation</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t80 r1c2-t80">
<p>Specify <code dir="ltr">&#39;ADD&#39;</code> to add the transformation to the rule.</p>
<p>Specify <code dir="ltr">&#39;REMOVE&#39;</code> to remove the transformation from the rule.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16358"></a>Usage Notes</p>
<p>When <code dir="ltr">&#39;REMOVE&#39;</code> is specified for the <code dir="ltr">operation</code> parameter, all of the rename column declarative rule-based transformations for the specified rule are removed that match the specified <code dir="ltr">table_name</code>, <code dir="ltr">column_name</code>, and <code dir="ltr">step_number</code> parameters. Nulls specified for these parameters act as wildcards. The following table lists the behavior of the <code dir="ltr">RENAME_COLUMN</code> procedure when one or more of these parameters is <code dir="ltr">NULL</code>:</p>
<div class="inftblhruleinformalwide">
<table class="cellalignment4327" title="Remove Behavior for the RENAME_COLUMN Procedure" summary="This table describes the behavior of the RENAME_COLUMN procedure when the operation parameter is set to REMOVE and various other procedure parameters are set to NULL." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t81">table_name</th>
<th class="cellalignment4328" id="r1c2-t81">from_column_name</th>
<th class="cellalignment4328" id="r1c3-t81">to_column_name</th>
<th class="cellalignment4328" id="r1c4-t81">step_number</th>
<th class="cellalignment4328" id="r1c5-t81">Result</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t81" headers="r1c1-t81"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r2c1-t81 r1c2-t81"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r2c1-t81 r1c3-t81"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r2c1-t81 r1c4-t81"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r2c1-t81 r1c5-t81">Remove all rename column transformations for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t81" headers="r1c1-t81"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r3c1-t81 r1c2-t81"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r3c1-t81 r1c3-t81"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r3c1-t81 r1c4-t81">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r3c1-t81 r1c5-t81">Remove all rename column transformations with the specified <code dir="ltr">step_number</code> for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t81" headers="r1c1-t81"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r4c1-t81 r1c2-t81"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r4c1-t81 r1c3-t81">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r4c1-t81 r1c4-t81">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r4c1-t81 r1c5-t81">Remove all rename column transformations with the specified <code dir="ltr">to_column_name</code> and <code dir="ltr">step_number</code> for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t81" headers="r1c1-t81"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r5c1-t81 r1c2-t81">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r5c1-t81 r1c3-t81">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r5c1-t81 r1c4-t81">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r5c1-t81 r1c5-t81">Remove all rename column transformations with the specified <code dir="ltr">table_name</code> and <code dir="ltr">step_number</code> for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t81" headers="r1c1-t81"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r6c1-t81 r1c2-t81"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r6c1-t81 r1c3-t81">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r6c1-t81 r1c4-t81"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r6c1-t81 r1c5-t81">Remove all rename column transformations with the specified column_name for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t81" headers="r1c1-t81">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r7c1-t81 r1c2-t81"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r7c1-t81 r1c3-t81">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r7c1-t81 r1c4-t81"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r7c1-t81 r1c5-t81">Remove all rename column transformations with the specified <code dir="ltr">table_name</code> and column_name for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t81" headers="r1c1-t81"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r8c1-t81 r1c2-t81">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r8c1-t81 r1c3-t81"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r8c1-t81 r1c4-t81"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r8c1-t81 r1c5-t81">Remove all rename column transformations with the specified <code dir="ltr">table_name</code> for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t81" headers="r1c1-t81"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r9c1-t81 r1c2-t81">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r9c1-t81 r1c3-t81">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r9c1-t81 r1c4-t81"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r9c1-t81 r1c5-t81">Remove all rename column transformations with the specified <code dir="ltr">table_name</code>, column_name, and <code dir="ltr">step_number</code> for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t81" headers="r1c1-t81">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r10c1-t81 r1c2-t81"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r10c1-t81 r1c3-t81">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r10c1-t81 r1c4-t81"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r10c1-t81 r1c5-t81">Remove all rename column transformations with the specified <code dir="ltr">table_name</code>, column_name, and <code dir="ltr">step_number</code> for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t81" headers="r1c1-t81">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r11c1-t81 r1c2-t81">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r11c1-t81 r1c3-t81">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r11c1-t81 r1c4-t81"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r11c1-t81 r1c5-t81">Remove all rename column transformations with the specified <code dir="ltr">table_name</code>, column_name, and <code dir="ltr">step_number</code> for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t81" headers="r1c1-t81">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r12c1-t81 r1c2-t81">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r12c1-t81 r1c3-t81">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r12c1-t81 r1c4-t81">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r12c1-t81 r1c5-t81">Remove all rename column transformations with the specified <code dir="ltr">table_name</code>, column_name, and <code dir="ltr">step_number</code> for the specified rule.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformalwide" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS74062" class="refsect2"><a id="CHDEHAJI"></a>
<h3 class="refsect2">RENAME_SCHEMA Procedure<a id="sthref16359"></a><a id="sthref16360"></a></h3>
<p>This procedure either adds or removes a declarative rule-based transformation which renames a schema in a row logical change record (LCR) that satisfies the specified rule.</p>
<p>For the transformation to be performed when the specified rule evaluates to <code dir="ltr">TRUE</code>, the rule must be in the positive rule set of an XStream client. XStream clients include capture processes, propagations, and apply processes.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Declarative transformations can transform row LCRs only. Therefore, a DML rule must be specified when you run this procedure. If a DDL rule is specified, then the procedure raises an error.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink XSTRM72752" href="../XSTRM/xstrm_gen_cncpt.htm#XSTRM72752"><span class="italic">Oracle Database XStream Guide</span></a> for more information about declarative rule-based transformations</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16361"></a>Syntax</p>
<pre dir="ltr">DBMS_XSTREAM_ADM.RENAME_SCHEMA(
   rule_name         IN  VARCHAR2,
   from_schema_name  IN  VARCHAR2,
   to_schema_name    IN  VARCHAR2,
   step_number       IN  NUMBER    DEFAULT 0,
   operation         IN  VARCHAR2  DEFAULT &#39;ADD&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16362"></a>Parameters</p>
<div id="ARPLS74063" class="tblformal">
<p class="titleintable"><a id="sthref16363"></a><a id="sthref16364"></a>Table 204-30 RENAME_SCHEMA Procedure Parameters</p>
<table class="cellalignment4330" title="RENAME_SCHEMA Procedure Parameters " summary="This table describes the Parameters of DBMS_XSTREAM_ADM.RENAME_SCHEMA subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t84">Parameter</th>
<th class="cellalignment4328" id="r1c2-t84">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t84" headers="r1c1-t84">
<p><code dir="ltr">rule_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t84 r1c2-t84">
<p>The name of the rule, specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">rule_name</span></code>. If <code dir="ltr">NULL</code>, then the procedure raises an error.</p>
<p>For example, to specify a rule in the <code dir="ltr">hr</code> schema named <code dir="ltr">employees12</code>, enter <code dir="ltr">hr.employees12</code>. If the schema is not specified, then the current user is the default.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t84" headers="r1c1-t84">
<p><code dir="ltr">from_schema_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t84 r1c2-t84">
<p>The name of the schema to be renamed in each row LCR that satisfies the rule.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t84" headers="r1c1-t84">
<p><code dir="ltr">to_schema_name</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t84 r1c2-t84">
<p>The new name of the schema in each row LCR that satisfies the rule.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t84" headers="r1c1-t84">
<p><code dir="ltr">step_number</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t84 r1c2-t84">
<p>The order of execution of the transformation.</p>
<p><span class="bold">See Also:</span> <a class="olink XSTRM72754" href="../XSTRM/xstrm_gen_cncpt.htm#XSTRM72754"><span class="italic">Oracle Database XStream Guide</span></a> for more information about transformation ordering</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t84" headers="r1c1-t84">
<p><code dir="ltr">operation</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t84 r1c2-t84">
<p>Specify <code dir="ltr">&#39;ADD&#39;</code> to add the transformation to the rule.</p>
<p>Specify <code dir="ltr">&#39;REMOVE&#39;</code> to remove the transformation from the rule.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16365"></a>Usage Notes</p>
<p>When <code dir="ltr">&#39;REMOVE&#39;</code> is specified for the <code dir="ltr">operation</code> parameter, all of the rename schema declarative rule-based transformations for the specified rule are removed that match the specified <code dir="ltr">from_schema_name</code>, <code dir="ltr">to_schema_name</code>, and <code dir="ltr">step_number</code> parameters. Nulls specified for these parameters act as wildcards. The following table lists the behavior of the <code dir="ltr">RENAME_SCHEMA</code> procedure when one or more of these parameters is <code dir="ltr">NULL</code>:</p>
<div class="inftblinformal">
<table class="cellalignment4327" title="Remove Behavior for the RENAME_SCHEMA Procedure" summary="This table describes the behavior of the RENAME_SCHEMA procedure when the operation parameter is set to REMOVE and various other procedure parameters are set to NULL." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t85">from_schema_name</th>
<th class="cellalignment4328" id="r1c2-t85">to_schema_name</th>
<th class="cellalignment4328" id="r1c3-t85">step_number</th>
<th class="cellalignment4328" id="r1c4-t85">Result</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t85" headers="r1c1-t85"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r2c1-t85 r1c2-t85"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r2c1-t85 r1c3-t85"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r2c1-t85 r1c4-t85">Remove all rename schema transformations for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t85" headers="r1c1-t85"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r3c1-t85 r1c2-t85"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r3c1-t85 r1c3-t85">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r3c1-t85 r1c4-t85">Remove all rename schema transformations with the specified <code dir="ltr">step_number</code> for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t85" headers="r1c1-t85"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r4c1-t85 r1c2-t85">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r4c1-t85 r1c3-t85">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r4c1-t85 r1c4-t85">Remove all rename schema transformations with the specified <code dir="ltr">to_schema_name</code> and <code dir="ltr">step_number</code> for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t85" headers="r1c1-t85">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r5c1-t85 r1c2-t85"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r5c1-t85 r1c3-t85">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r5c1-t85 r1c4-t85">Remove all rename schema transformations with the specified <code dir="ltr">from_schema_name</code> and <code dir="ltr">step_number</code> for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t85" headers="r1c1-t85"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r6c1-t85 r1c2-t85">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r6c1-t85 r1c3-t85"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r6c1-t85 r1c4-t85">Remove all rename schema transformations with the specified <code dir="ltr">to_schema_name</code> for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t85" headers="r1c1-t85">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r7c1-t85 r1c2-t85">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r7c1-t85 r1c3-t85"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r7c1-t85 r1c4-t85">Remove all rename schema transformations with the specified <code dir="ltr">from_schema_name</code> and to_schema_name for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t85" headers="r1c1-t85">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r8c1-t85 r1c2-t85"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r8c1-t85 r1c3-t85"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r8c1-t85 r1c4-t85">Remove all rename schema transformations with the specified <code dir="ltr">from_schema_name</code> for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t85" headers="r1c1-t85">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r9c1-t85 r1c2-t85">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r9c1-t85 r1c3-t85">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r9c1-t85 r1c4-t85">Remove all rename schema transformations with the specified <code dir="ltr">from_schema_name</code>, <code dir="ltr">to_schema_name</code>, and <code dir="ltr">step_number</code> for the specified rule.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS74064" class="refsect2"><a id="CHDDBCIB"></a>
<h3 class="refsect2">RENAME_TABLE Procedure<a id="sthref16366"></a><a id="sthref16367"></a></h3>
<p>This procedure either adds or removes a declarative rule-based transformation which renames a table in a row logical change record (row LCR) that satisfies the specified rule.</p>
<p>For the transformation to be performed when the specified rule evaluates to <code dir="ltr">TRUE</code>, the rule must be in the positive rule set of an XStream client. XStream clients include capture processes, propagations, and apply processes.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Declarative transformations can transform row LCRs only. Therefore, a DML rule must be specified when you run this procedure. If a DDL rule is specified, then the procedure raises an error.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink XSTRM72752" href="../XSTRM/xstrm_gen_cncpt.htm#XSTRM72752"><span class="italic">Oracle Database XStream Guide</span></a> for more information about declarative rule-based transformations</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16368"></a>Syntax</p>
<pre dir="ltr">DBMS_XSTREAM_ADM.RENAME_TABLE(
   rule_name        IN  VARCHAR2,
   from_table_name  IN  VARCHAR2,
   to_table_name    IN  VARCHAR2,
   step_number      IN  NUMBER    DEFAULT 0,
   operation        IN  VARCHAR2  DEFAULT &#39;ADD&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16369"></a>Parameters</p>
<div id="ARPLS74065" class="tblformal">
<p class="titleintable"><a id="sthref16370"></a><a id="sthref16371"></a>Table 204-31 RENAME_TABLE Procedure Parameters</p>
<table class="cellalignment4330" title="RENAME_TABLE Procedure Parameters " summary="This table describes the Parameters of DBMS_XSTREAM_ADM.RENAME_TABLE subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t88">Parameter</th>
<th class="cellalignment4328" id="r1c2-t88">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t88" headers="r1c1-t88">
<p><code dir="ltr">rule_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t88 r1c2-t88">
<p>The name of the rule, specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">rule_name</span></code>. If <code dir="ltr">NULL</code>, then the procedure raises an error.</p>
<p>For example, to specify a rule in the <code dir="ltr">hr</code> schema named <code dir="ltr">employees12</code>, enter <code dir="ltr">hr.employees12</code>. If the schema is not specified, then the current user is the default.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t88" headers="r1c1-t88">
<p><code dir="ltr">from_table_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t88 r1c2-t88">
<p>The name of the table to be renamed in each row LCR that satisfies the rule, specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">object_name</span></code>. For example, <code dir="ltr">hr.employees</code>. If the schema is not specified, then the current user is the default.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t88" headers="r1c1-t88">
<p><code dir="ltr">to_table_name</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t88 r1c2-t88">
<p>The new name of the table in each row LCR that satisfies the rule, specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">object_name</span></code>. For example, <code dir="ltr">humres.staff</code>.</p>
<p>The transformation can rename the table only, the schema only, or the table and the schema. If the schema is not specified, then the current user is the default.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t88" headers="r1c1-t88">
<p><code dir="ltr">step_number</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t88 r1c2-t88">
<p>The order of execution of the transformation.</p>
<p><span class="bold">See Also:</span> <a class="olink XSTRM72754" href="../XSTRM/xstrm_gen_cncpt.htm#XSTRM72754"><span class="italic">Oracle Database XStream Guide</span></a> for more information about transformation ordering</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t88" headers="r1c1-t88">
<p><code dir="ltr">operation</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t88 r1c2-t88">
<p>Specify <code dir="ltr">&#39;ADD&#39;</code> to add the transformation to the rule.</p>
<p>Specify <code dir="ltr">&#39;REMOVE&#39;</code> to remove the transformation from the rule.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16372"></a>Usage Notes</p>
<p>When <code dir="ltr">&#39;REMOVE&#39;</code> is specified for the <code dir="ltr">operation</code> parameter, all of the rename table declarative rule-based transformations for the specified rule are removed that match the specified <code dir="ltr">from_table_name</code>, <code dir="ltr">to_table_name</code>, and <code dir="ltr">step_number</code> parameters. Nulls specified for these parameters act as wildcards. The following table lists the behavior of the <code dir="ltr">RENAME_TABLE</code> procedure when one or more of these parameters is <code dir="ltr">NULL</code>:</p>
<div class="inftblinformal">
<table class="cellalignment4327" title="Remove Behavior for the RENAME_TABLE Procedure" summary="This table describes the behavior of the RENAME_TABLE procedure when the operation parameter is set to REMOVE and various other procedure parameters are set to NULL." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t89">from_table_name</th>
<th class="cellalignment4328" id="r1c2-t89">to_table_name</th>
<th class="cellalignment4328" id="r1c3-t89">step_number</th>
<th class="cellalignment4328" id="r1c4-t89">Result</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t89" headers="r1c1-t89"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r2c1-t89 r1c2-t89"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r2c1-t89 r1c3-t89"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r2c1-t89 r1c4-t89">Remove all rename table transformations for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t89" headers="r1c1-t89"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r3c1-t89 r1c2-t89"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r3c1-t89 r1c3-t89">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r3c1-t89 r1c4-t89">Remove all rename table transformations with the specified <code dir="ltr">step_number</code> for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t89" headers="r1c1-t89"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r4c1-t89 r1c2-t89">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r4c1-t89 r1c3-t89">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r4c1-t89 r1c4-t89">Remove all rename table transformations with the specified <code dir="ltr">to_table_name</code> and <code dir="ltr">step_number</code> for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t89" headers="r1c1-t89">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r5c1-t89 r1c2-t89"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r5c1-t89 r1c3-t89">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r5c1-t89 r1c4-t89">Remove all rename table transformations with the specified <code dir="ltr">from_table_name</code> and <code dir="ltr">step_number</code> for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t89" headers="r1c1-t89"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r6c1-t89 r1c2-t89">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r6c1-t89 r1c3-t89"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r6c1-t89 r1c4-t89">Remove all rename table transformations with the specified <code dir="ltr">to_table_name</code> for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t89" headers="r1c1-t89">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r7c1-t89 r1c2-t89">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r7c1-t89 r1c3-t89"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r7c1-t89 r1c4-t89">Remove all rename table transformations with the specified <code dir="ltr">from_table_name</code> and <code dir="ltr">to_table_name</code> for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t89" headers="r1c1-t89">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r8c1-t89 r1c2-t89"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r8c1-t89 r1c3-t89"><code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r8c1-t89 r1c4-t89">Remove all rename table transformations with the specified <code dir="ltr">from_table_name</code> for the specified rule.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t89" headers="r1c1-t89">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r9c1-t89 r1c2-t89">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r9c1-t89 r1c3-t89">non-<code dir="ltr">NULL</code></td>
<td class="cellalignment4329" headers="r9c1-t89 r1c4-t89">Remove all rename table transformations with the specified <code dir="ltr">from_table_name</code>, <code dir="ltr">to_table_name</code>, and <code dir="ltr">step_number</code> for the specified rule.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS74066" class="refsect2"><a id="CHDFIHCA"></a>
<h3 class="refsect2">SET_MESSAGE_TRACKING Procedure</h3>
<p>Sets the tracking label for logical change records (LCRs) produced by the current session. This procedure affects only the current session. Any LCRs produced by the current session are tracked, including captured LCRs and persistent LCRs.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The tracking label set by this procedure does not track non-LCR messages.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
KAWGET_MESSAGE_TRACKING</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16373"></a>Syntax</p>
<pre dir="ltr">DBMS_XSTREAM_ADM.SET_MESSAGE_TRACKING(
   tracking_label IN VARCHAR2  DEFAULT &#39;Streams_tracking&#39;,
   actions        IN NUMBER    DEFAULT DBMS_XSTREAM_ADM.ACTION_MEMORY);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16374"></a>Parameters</p>
<div id="ARPLS74067" class="tblformal">
<p class="titleintable"><a id="sthref16375"></a><a id="sthref16376"></a>Table 204-32 SET_MESSAGE_TRACKING Procedure Parameters</p>
<table class="cellalignment4330" title="SET_MESSAGE_TRACKING Procedure Parameters" summary="This table describes the Parameters of DBMS_XSTREAM_ADM.SET_MESSAGE_TRACKING subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t92">Parameter</th>
<th class="cellalignment4328" id="r1c2-t92">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t92" headers="r1c1-t92">
<p><code dir="ltr">tracking_label</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t92 r1c2-t92">
<p>The label used to track the LCRs produced by the session.</p>
<p>Set this parameter to <code dir="ltr">NULL</code> to stop message tracking in the current session.</p>
<p>The size limit for a label is 4,000 bytes.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t92" headers="r1c1-t92">
<p><code dir="ltr">actions</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t92 r1c2-t92">
<p>When <code dir="ltr">DBMS_XSTREAM_ADM.ACTION_MEMORY</code> is specified, the LCRs are tracked in memory, and the <code dir="ltr">V$STREAMS_MESSAGE_TRACKING</code> dynamic performance view is populated with information about the LCRs.</p>
<p>Currently, <code dir="ltr">DBMS_XSTREAM_ADM.ACTION_MEMORY</code> is the only valid setting for this parameter.</p>
<p>The value specified for this parameter is an enumerated constant. Enumerated constants must be prefixed with the package name.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS74458" class="refsect2"><a id="CHDJAHAF"></a>
<h3 class="refsect2">SET_PARAMETER Procedure<a id="sthref16377"></a></h3>
<p>This procedure sets a parameter for an outbound server, an inbound server, or an outbound server&#39;s capture process.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16378"></a>Syntax</p>
<pre dir="ltr">DBMS_XSTREAM_ADM.SET_PARAMETER(
   streams_name    IN  VARCHAR2,
   streams_type    IN  VARCHAR2,
   parameter       IN  VARCHAR2,
   value           IN  VARCHAR2  DEFAULT NULL,
   no_wait         IN  BOOLEAN   DEFAULT FALSE,
   source_database IN  VARCHAR2  DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16379"></a>Parameters</p>
<div id="ARPLS74459" class="tblformal">
<p class="titleintable"><a id="sthref16380"></a><a id="sthref16381"></a>Table 204-33 SET_PARAMETER Procedure Parameters</p>
<table class="cellalignment4330" title="SET_PARAMETER Procedure Parameters" summary="This table describes the Parameters of DBMS_XSTREAM_ADM.SET_PARAMETER subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t93">Parameter</th>
<th class="cellalignment4328" id="r1c2-t93">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t93" headers="r1c1-t93">
<p><code dir="ltr">streams_type</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t93 r1c2-t93">
<p>The type of XStream client:</p>
<ul>
<li>
<p>Specify <code dir="ltr">capture</code> for a capture process.</p>
</li>
<li>
<p>Specify <code dir="ltr">apply</code> for an outbound server or inbound server.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t93" headers="r1c1-t93">
<p><code dir="ltr">streams_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t93 r1c2-t93">
<p>The name of the capture process, outbound server, or inbound server. Do not specify an owner.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t93" headers="r1c1-t93">
<p><code dir="ltr">parameter</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t93 r1c2-t93">
<p>The name of the parameter you are setting.</p>
<p>See <a href="d_cap_a.htm#BGBBAFIJ">&#34;Capture Process Parameters&#34;</a> for information about capture process parameters.</p>
<p>See <a href="d_apply.htm#i997670">&#34;Apply Component Parameters&#34;</a> for information about outbound server and inbound server parameters.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t93" headers="r1c1-t93">
<p><code dir="ltr">value</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t93 r1c2-t93">
<p>The value to which the parameter is set.</p>
<p>If <code dir="ltr">NULL</code>, then the parameter is set to its default value.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t93" headers="r1c1-t93">
<p><code dir="ltr">no_wait</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t93 r1c2-t93">
<p>If <code dir="ltr">TRUE</code>, then the parameter is set immediately.</p>
<p>If <code dir="ltr">FALSE</code>, then the parameter is set after synchronizing with the running capture process, inbound server, or outbound server.</p>
<p>When you modify multiple parameters for the same process consecutively, setting this parameter to <code dir="ltr">TRUE</code> speeds up each call. However, if the process is currently running, you must set this parameter to <code dir="ltr">FALSE</code> in the last to the procedure to ensure that the process uses the modified parameter values. If the no_wait parameter is set to <code dir="ltr">TRUE</code> for the last call to the procedure, the running process might not detect the parameter changes.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t93" headers="r1c1-t93">
<p><code dir="ltr">source_database</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t93 r1c2-t93">
<p>If <code dir="ltr">CURRENT</code>, then the parameter is set only in the container where the procedure is invoked. <code dir="ltr">CURRENT</code> can be specified while connected to the root or to a PDB.</p>
<p>If <code dir="ltr">ALL</code>, then the parameter is set in all containers in the CDB and all PDBs created after the procedure is invoked. To specify <code dir="ltr">ALL</code>, the procedure must be invoked in the root.</p>
<p>If a container name, then the parameter is set in the specified container. To specify root, use <code dir="ltr">CDB$ROOT</code> while connected to the root. To specify a PDB, the procedure must be invoked in the root.</p>
<p><span class="bold">Note:</span> This parameter only applies to CDBs. Also, a non-null value can be specified only for the following parameters:</p>
<ul>
<li>
<p><code dir="ltr">include_objects</code> capture parameter</p>
</li>
<li>
<p><code dir="ltr">excludetag</code> capture or apply parameter</p>
</li>
<li>
<p><code dir="ltr">excludetrans</code> capture or apply parameter</p>
</li>
<li>
<p><code dir="ltr">excludeuser</code> capture or apply parameter</p>
</li>
<li>
<p><code dir="ltr">excludeuserid</code> capture or apply parameter</p>
</li>
<li>
<p><code dir="ltr">getreplicates</code> capture or apply parameter</p>
</li>
<li>
<p><code dir="ltr">getapplops</code> capture or apply parameter</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS74068" class="refsect2"><a id="CHDIJDFJ"></a>
<h3 class="refsect2">SET_TAG Procedure<a id="sthref16382"></a><a id="sthref16383"></a></h3>
<p>This procedure sets the binary tag for all redo entries subsequently generated by the current session. Each redo entry generated by DML or DDL statements in the current session will have this tag. This procedure affects only the current session.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STREP008" href="../STREP/rep_tags.htm#STREP008"><span class="italic">Oracle Streams Replication Administrator&#39;s Guide</span></a> for more information about tags</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16384"></a>Syntax</p>
<pre dir="ltr">DBMS_XSTREAM_ADM.SET_TAG(
   tag  IN RAW  DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16385"></a>Parameters</p>
<div id="ARPLS74069" class="tblformal">
<p class="titleintable"><a id="sthref16386"></a><a id="sthref16387"></a>Table 204-34 SET_TAG Procedure Parameters</p>
<table class="cellalignment4330" title="SET_TAG Procedure Parameters" summary="This table describes the Parameters of DBMS_XSTREAM_ADM.SET_TAG subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t95">Parameter</th>
<th class="cellalignment4328" id="r1c2-t95">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t95" headers="r1c1-t95">
<p><code dir="ltr">tag</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t95 r1c2-t95">
<p>The binary tag for all subsequent redo entries generated by the current session. A raw value is a sequence of bytes, and a byte is a sequence of bits.</p>
<p>By default, the tag for a session is <code dir="ltr">NULL</code>.</p>
<p>The size limit for a tag value is 2000 bytes.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16388"></a>Usage Notes</p>
<p>To set the tag to the hexadecimal value of <code dir="ltr">&#39;17&#39;</code> in the current session, run the following procedure:</p>
<pre dir="ltr">EXEC DBMS_XSTREAM_ADM.SET_TAG(tag =&gt; HEXTORAW(&#39;17&#39;));
</pre>
<p>The following are considerations for the <code dir="ltr">SET_TAG</code> procedure:</p>
<ul>
<li>
<p>This procedure is not transactional. That is, the effects of <code dir="ltr">SET_TAG</code> cannot be rolled back.</p>
</li>
<li>
<p>If the <code dir="ltr">SET_TAG</code> procedure is run to set a non-<code dir="ltr">NULL</code> session tag before a data dictionary build has been performed on the database, then the redo entries for a transaction that started before the dictionary build might not include the specified tag value for the session. Therefore, perform a data dictionary build before using the <code dir="ltr">SET_TAG</code> procedure in a session. A data dictionary build happens when the <code dir="ltr">DBMS_CAPTURE_ADM.BUILD</code> procedure is run. The <code dir="ltr">BUILD</code> procedure can be run automatically when a capture process is created.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="d_cap_a.htm#i1003124">BUILD Procedure</a></div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS74070" class="refsect2"><a id="CHDFIFAA"></a>
<h3 class="refsect2">SET_UP_QUEUE Procedure<a id="sthref16389"></a><a id="sthref16390"></a><a id="sthref16391"></a><a id="sthref16392"></a><a id="sthref16393"></a></h3>
<p>This procedure creates a queue table and a <code dir="ltr">ANYDATA</code> queue.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16394"></a>Syntax</p>
<pre dir="ltr">DBMS_XSTREAM_ADM.SET_UP_QUEUE(
   queue_table     IN  VARCHAR2  DEFAULT &#39;streams_queue_table&#39;,
   storage_clause  IN  VARCHAR2  DEFAULT NULL,
   queue_name      IN  VARCHAR2  DEFAULT &#39;streams_queue&#39;,
   queue_user      IN  VARCHAR2  DEFAULT NULL,
   comment         IN  VARCHAR2  DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16395"></a>Parameters</p>
<div id="ARPLS74071" class="tblformal">
<p class="titleintable"><a id="sthref16396"></a><a id="sthref16397"></a>Table 204-35 SET_UP_QUEUE Procedure Parameters</p>
<table class="cellalignment4330" title="SET_UP_QUEUE Procedure Parameters" summary="This table describes the Parameters of DBMS_XSTREAM_ADM.SET_UP_QUEUE subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t97">Parameter</th>
<th class="cellalignment4328" id="r1c2-t97">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t97" headers="r1c1-t97">
<p><code dir="ltr">queue_table</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t97 r1c2-t97">
<p>The name of the queue table specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">queue_table_name</span></code>. For example, <code dir="ltr">strmadmin.streams_queue_table</code>. If the schema is not specified, then the current user is the default.</p>
<p>If the queue table owner is not specified, then the procedure specifies the user who runs this procedure automatically as the queue table owner.</p>
<p>Queue table names can be a maximum of 24 bytes.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t97" headers="r1c1-t97">
<p><code dir="ltr">storage_clause</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t97 r1c2-t97">
<p>The storage clause for queue table</p>
<p>The storage parameter is included in the <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> statement when the queue table is created. You can specify any valid table storage clause.</p>
<p>If a tablespace is not specified here, then the procedure creates the queue table and all its related objects in the default user tablespace of the user who runs this procedure. If a tablespace is specified here, then the procedure creates the queue table and all its related objects in the tablespace specified in the storage clause.</p>
<p>If <code dir="ltr">NULL</code>, then the procedure uses the storage characteristics of the tablespace in which the queue table is created.</p>
<p><span class="bold">See Also:</span> <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about storage clauses</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t97" headers="r1c1-t97">
<p><code dir="ltr">queue_name</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t97 r1c2-t97">
<p>The name of the queue that will function as the <code dir="ltr">ANYDATA</code> queue, specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">queue_name</span></code>. For example, <code dir="ltr">strmadmin.streams_queue</code>.</p>
<p>If the schema is not specified, then the procedure uses the queue table owner. The owner of the queue table must also be the owner of the queue. The queue owner automatically has privileges to perform all queue operations on the queue.</p>
<p>If the schema is not specified for this parameter, and the queue table owner is not specified in <code dir="ltr">queue_table</code>, then the current user is the default.</p>
<p>Queue names can be a maximum of 24 bytes.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t97" headers="r1c1-t97">
<p><code dir="ltr">queue_user</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t97 r1c2-t97">
<p>The name of the user who requires <code dir="ltr">ENQUEUE</code> and <code dir="ltr">DEQUEUE</code> privileges for the queue. This user also is configured as a secure queue user of the queue. The queue user cannot grant these privileges to other users because they are not granted with the <code dir="ltr">GRANT</code> option.</p>
<p>If <code dir="ltr">NULL</code>, then the procedure does not grant any privileges. You can also grant queue privileges to the appropriate users using the <code dir="ltr">DBMS_AQADM</code> package.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t97" headers="r1c1-t97">
<p><code dir="ltr">comment</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t97 r1c2-t97">
<p>The comment for the queue</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16398"></a>Usage Notes</p>
<p>Set up includes the following actions:</p>
<ul>
<li>
<p>If the specified queue table does not exist, then this procedure runs the <code dir="ltr">CREATE_QUEUE_TABLE</code> procedure in the <code dir="ltr">DBMS_AQADM</code> package to create the queue table with the specified storage clause. If this procedure creates the queue table, then it creates a multiple consumer <code dir="ltr">ANYDATA</code> queue that is both a secure queue and a transactional queue.</p>
<p>Also, if the database is Oracle Database 10<span class="italic">g</span> release&nbsp;2 or later, the <code dir="ltr">sort_list</code> setting in <code dir="ltr">CREATE_QUEUE_TABLE</code> is set to <code dir="ltr">commit_time</code>. If the database is a release before Oracle Database 10<span class="italic">g</span> release&nbsp;2, the <code dir="ltr">sort_list</code> setting in <code dir="ltr">CREATE_QUEUE_TABLE</code> is set to <code dir="ltr">enq_time</code>.</p>
</li>
<li>
<p>If the specified queue table exists, then the queue uses the properties of the existing queue table.</p>
</li>
<li>
<p>If the specified queue name does not exist, then this procedure runs the <code dir="ltr">CREATE_QUEUE</code> procedure in the <code dir="ltr">DBMS_AQADM</code> package to create the queue.</p>
</li>
<li>
<p>This procedure starts the queue.</p>
</li>
<li>
<p>If a queue user is specified, then this procedure configures this user as a secure queue user of the queue and grants <code dir="ltr">ENQUEUE</code> and <code dir="ltr">DEQUEUE</code> privileges on the queue to the specified queue user.</p>
<p>To configure the queue user as a secure queue user, this procedure creates an Advanced Queuing agent with the same name as the user name, if one does not exist. If an agent with this name exists and is associated with the queue user only, then it is used. <code dir="ltr">SET_UP_QUEUE</code> then runs the <code dir="ltr">ENABLE_DB_ACCESS</code> procedure in the <code dir="ltr">DBMS_AQADM</code> package, specifying the agent and the user.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
If the agent that <code dir="ltr">SET_UP_QUEUE</code> tries to create exists and is associated with a user other than the user specified by <code dir="ltr">queue_user</code>, then the procedure raises an error. In this case, rename or remove the existing agent, and retry <code dir="ltr">SET_UP_QUEUE</code>.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STRMS141" href="../STRMS/strms_adqueue.htm#STRMS141"><span class="italic">Oracle Streams Concepts and Administration</span></a> for more information about secure queue users</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS74072" class="refsect2"><a id="CHDHGCJB"></a>
<h3 class="refsect2">SPLIT_STREAMS Procedure<a id="sthref16399"></a><a id="sthref16400"></a><a id="sthref16401"></a></h3>
<p>This procedure splits one stream flowing from a capture process off from all of the other streams flowing from the capture process.</p>
<p>This procedure is intended for an Oracle Streams replication environment in which a capture process captures changes that are propagated to two or more destination databases. When one destination of a propagation stops accepting the captured changes, the changes remain in the capture process&#39;s queue. The queue can grow and begin to spill LCRs to the hard disk, degrading the performance of the Oracle Streams environment. A destination might stop accepting changes for several reasons. For example, the destination database might be down.</p>
<p>Specifically, this procedure performs the following actions:</p>
<ol>
<li id="CHDIAFGE">
<p>Creates a new queue at the database running the capture process. The new queue is called the cloned queue because it is a clone of the queue used by the original stream. The new queue will be used by the new, cloned capture process, and it will be the source queue for the new, cloned propagation.</p>
</li>
<li>
<p>Creates a new propagation that propagates LCRs from the source queue created in Step <a href="#CHDIAFGE">1</a> to the existing destination queue. The new propagation is called the cloned propagation because it is a clone of the propagation used by the original stream. The cloned propagation uses the same rule set as the original propagation.</p>
</li>
<li>
<p>Stops the capture process.</p>
</li>
<li id="CHDIHJFH">
<p>Queries the acknowledge SCN for the original propagation. The acknowledged SCN is the last SCN acknowledged by the apply process that applies the changes sent by the propagation.</p>
</li>
<li>
<p>Creates a new capture process. The new capture process is called the cloned capture process because it is a clone of the capture process used by the original stream. The procedure sets the start SCN for the cloned capture process to the value of the acknowledged SCN queried in Step <a href="d_streams_adm.htm#CDECBEEA">4</a>. The cloned capture process uses the same rule set as the original capture process.</p>
</li>
<li>
<p>Drops the original propagation.</p>
</li>
<li>
<p>Starts the original capture process with the start SCN set to the acknowledged SCN queried in Step <a href="#CHDIHJFH">4</a>.</p>
</li>
<li>
<p>If the <code dir="ltr">auto_merge_threshold</code> parameter is set to a positive number, then creates an Oracle Scheduler job to run the <code dir="ltr">MERGE_STREAMS_JOB</code> procedure at set intervals according to its schedule. When the two streams are within the specified merge threshold, the <code dir="ltr">MERGE_STREAMS_JOB</code> procedure runs the <code dir="ltr">MERGE_STREAMS</code> procedure to merge the streams automatically.</p>
</li>
</ol>
<p>After the <code dir="ltr">SPLIT_STREAMS</code> procedure has finished running, the cloned capture process is disabled. When the problem at the destination database is solved, and the destination queue can accept changes, you should start the cloned capture process using the <code dir="ltr">START_CAPTURE</code> procedure in the <code dir="ltr">DBMS_CAPTURE_ADM</code> package.</p>
<p>The <code dir="ltr">DBA_STREAMS_SPLIT_MERGE</code> view contains the name of each cloned component and information about the split and merge operation.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If the original capture process is a downstream capture process, then you must configure the cloned capture process to read the redo log from the source database before you start the cloned capture process.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#CHDEDACG">&#34;MERGE_STREAMS Procedure&#34;</a></p>
</li>
<li>
<p><a href="#CHDFDGBC">&#34;MERGE_STREAMS_JOB Procedure&#34;</a></p>
</li>
<li>
<p><a class="olink STREP144" href="../STREP/man_gen_rep.htm#STREP144"><span class="italic">Oracle Streams Replication Administrator&#39;s Guide</span></a> for instructions on using the <code dir="ltr">SPLIT_STREAMS</code> procedure</p>
</li>
</ul>
</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16402"></a>Syntax</p>
<pre dir="ltr">DBMS_XSTREAM_ADM.SPLIT_STREAMS(
   propagation_name         IN      VARCHAR2,
   cloned_propagation_name  IN      VARCHAR2  DEFAULT NULL,
   cloned_queue_name        IN      VARCHAR2  DEFAULT NULL,
   cloned_capture_name      IN      VARCHAR2  DEFAULT NULL,
   perform_actions          IN      BOOLEAN   DEFAULT TRUE,
   script_name              IN      VARCHAR2  DEFAULT NULL,
   script_directory_object  IN      VARCHAR2  DEFAULT NULL,
   auto_merge_threshold     IN      NUMBER    DEFAULT NULL,
   schedule_name            IN OUT  VARCHAR2,
   merge_job_name           IN OUT  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16403"></a>Parameters</p>
<div id="ARPLS74073" class="tblformal">
<p class="titleintable"><a id="sthref16404"></a><a id="sthref16405"></a>Table 204-36 SPLIT_STREAMS Procedure Parameters</p>
<table class="cellalignment4330" title="SPLIT_STREAMS Procedure Parameters" summary="This table describes the Parameters of DBMS_XSTREAM_ADM.SPLIT_STREAMS subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t102">Parameter</th>
<th class="cellalignment4328" id="r1c2-t102">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t102" headers="r1c1-t102">
<p><code dir="ltr">propagation_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t102 r1c2-t102">
<p>The name of the propagation that cannot send LCRs to its destination queue. The specified propagation is the propagation for the stream that is being split off from the other streams. You must specify an existing propagation name. Do not specify an owner.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t102" headers="r1c1-t102">
<p><code dir="ltr">cloned_propagation_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t102 r1c2-t102">
<p>The name of the new propagation created by this procedure for the stream that is split off. If <code dir="ltr">NULL</code>, then the system generates a propagation name.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t102" headers="r1c1-t102">
<p><code dir="ltr">cloned_queue_name</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t102 r1c2-t102">
<p>The name of the new queue created by this procedure for the stream that is split off. If <code dir="ltr">NULL</code>, then the system generates a queue name.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t102" headers="r1c1-t102">
<p><code dir="ltr">cloned_capture_name</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t102 r1c2-t102">
<p>The name of the new capture process created by this procedure for the stream that is split off. If <code dir="ltr">NULL</code>, then the system generates a capture process name.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t102" headers="r1c1-t102">
<p><code dir="ltr">perform_actions</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t102 r1c2-t102">
<p>If <code dir="ltr">TRUE</code>, then the procedure performs the necessary actions to split the stream directly.</p>
<p>If <code dir="ltr">FALSE</code>, then the procedure does not perform the necessary actions to split the stream directly.</p>
<p>Specify <code dir="ltr">FALSE</code> when this procedure is generating a script that you can edit and then run. The procedure raises an error if you specify <code dir="ltr">FALSE</code> and either of the following parameters is <code dir="ltr">NULL</code>:</p>
<ul>
<li>
<p><code dir="ltr">script_name</code></p>
</li>
<li>
<p><code dir="ltr">script_directory_object</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t102" headers="r1c1-t102">
<p><code dir="ltr">script_name</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t102 r1c2-t102">
<p>If non-<code dir="ltr">NULL</code> and the <code dir="ltr">perform_actions</code> parameter is <code dir="ltr">FALSE</code>, then specify the name of the script generated by this procedure. The script contains all of the statements used to split the stream. If a file with the specified script name exists in the specified directory for the <code dir="ltr">script_directory_object</code> parameter, then the procedure appends the statements to the existing file.</p>
<p>If non-<code dir="ltr">NULL</code> and the <code dir="ltr">perform_actions</code> parameter is <code dir="ltr">TRUE</code>, then the procedure generates the specified script and performs the actions to split the stream directly.</p>
<p>If <code dir="ltr">NULL</code> and the <code dir="ltr">perform_actions</code> parameter is <code dir="ltr">TRUE</code>, then the procedure performs the actions to split the stream directly and does not generate a script.</p>
<p>If <code dir="ltr">NULL</code> and the <code dir="ltr">perform_actions</code> parameter is <code dir="ltr">FALSE</code>, then the procedure raises an error.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t102" headers="r1c1-t102">
<p><code dir="ltr">script_directory_object</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t102 r1c2-t102">
<p>The directory object for the directory on the local computer system into which the generated script is placed.</p>
<p>If the <code dir="ltr">script_name</code> parameter is <code dir="ltr">NULL</code>, then the procedure ignores this parameter and does not generate a script.</p>
<p>If <code dir="ltr">NULL</code> and the <code dir="ltr">script_name</code> parameter is non-<code dir="ltr">NULL</code>, then the procedure raises an error.</p>
<p><span class="bold">Note:</span> The specified directory object cannot point to an Oracle Automatic Storage Management (ASM) disk group.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t102" headers="r1c1-t102">
<p><code dir="ltr">auto_merge_threshold</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t102 r1c2-t102">
<p>If a positive number is specified, then the stream that was split off is automatically merged back into all of the other streams flowing from the capture process by an Oracle Scheduler job. The job runs the <code dir="ltr">MERGE_STREAMS_JOB</code> procedure at set intervals according to its schedule. The value of the <code dir="ltr">CAPTURE_MESSAGE_CREATE_TIME</code> column for each capture process in the <code dir="ltr">GV$STREAMS_CAPTURE</code> dynamic performance view determines when the streams are merged. Specifically, if the difference, in seconds, between <code dir="ltr">CAPTURE_MESSAGE_CREATE_TIME</code> of the cloned capture process and the original capture process is less than or equal to the value specified for the <code dir="ltr">auto_merge_threshold</code> parameter, then the two streams are merged automatically. The cloned capture process must be started before the split stream can be merged back with the original stream.</p>
<p>If <code dir="ltr">NULL</code> or <code dir="ltr">0</code> (zero) is specified, then the split stream is not merged back with the original stream automatically. To merge the split stream with the original stream, run the <code dir="ltr">MERGE_STREAM</code> procedure manually when the <code dir="ltr">CAPTURE_MESSAGE_CREATE_TIME</code> of the cloned capture process catches up to, or nearly catches up to, the <code dir="ltr">CAPTURE_MESSAGE_CREATE_TIME</code> of the original capture process.</p>
<p>The <code dir="ltr">CAPTURE_MESSAGE_CREATE_TIME</code> records the time when a captured change was recorded in the redo log.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t102" headers="r1c1-t102">
<p><code dir="ltr">schedule_name</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t102 r1c2-t102">
<p>The Oracle Scheduler schedule name, specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">schedule_name</span></code>. For example, <code dir="ltr">strmadmin.merge_schedule</code>. If the schema is not specified, then the current user is the default.</p>
<p>If <code dir="ltr">auto_merge_threshold</code> is a non-<code dir="ltr">NULL</code> positive number, then the schedule is used by the job that will automatically merge the streams at the appropriate time. You can specify a schedule name to adhere to naming conventions or to track the schedule more easily.</p>
<p>If <code dir="ltr">NULL</code> and <code dir="ltr">auto_merge_threshold</code> is a non-<code dir="ltr">NULL</code> positive number, then the system generates a schedule name.</p>
<p>If <code dir="ltr">auto_merge_threshold</code> is <code dir="ltr">NULL</code> or <code dir="ltr">0</code> (zero), then this parameter must be <code dir="ltr">NULL</code>.</p>
<p>If this procedure creates a schedule, the schedule starts when the procedure completes. You can modify the schedule to control how often the merge job is run.</p>
<p>If an existing schedule name is specified, an error is raised.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t102" headers="r1c1-t102">
<p><code dir="ltr">merge_job_name</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t102 r1c2-t102">
<p>The Oracle Scheduler job name, specified as <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">schema_name</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">merge_job_name</span></code>. For example, <code dir="ltr">strmadmin.merge_job</code>. If the schema is not specified, then the current user is the default.</p>
<p>If <code dir="ltr">auto_merge_threshold</code> is a non-<code dir="ltr">NULL</code> positive number, then the job will automatically merge the streams at the appropriate time. Specify a merge job name to adhere to naming conventions or to track the job more easily.</p>
<p>If <code dir="ltr">NULL</code> and <code dir="ltr">auto_merge_threshold</code> is a non-<code dir="ltr">NULL</code> positive number, then the system generates a job name.</p>
<p>If <code dir="ltr">auto_merge_threshold</code> is <code dir="ltr">NULL</code> or <code dir="ltr">0</code> (zero), then this parameter must be <code dir="ltr">NULL</code>.</p>
<p>If an existing job name is specified, an error is raised.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADMIN035" href="../ADMIN/schedadmin.htm#ADMIN035"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> for information about Oracle Scheduler</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS74074" class="refsect2"><a id="CHDFHIGF"></a>
<h3 class="refsect2">START_OUTBOUND Procedure<a id="sthref16406"></a></h3>
<p>This procedure starts an XStream outbound server. The outbound server streams out the LCRs to an XStream client application.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16407"></a>Syntax</p>
<pre dir="ltr">DBMS_XSTREAM_ADM.START_OUTBOUND(
   server_name      IN  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16408"></a>Parameters</p>
<div id="ARPLS74075" class="tblformal">
<p class="titleintable"><a id="sthref16409"></a><a id="sthref16410"></a>Table 204-37 START_OUTBOUND Procedure Parameters</p>
<table class="cellalignment4330" title="START_OUTBOUND Procedure Parameters" summary="This table describes the parameters of DBMS_XSTREAM_ADM.ADD_OUTBOUND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t104">Parameter</th>
<th class="cellalignment4328" id="r1c2-t104">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t104" headers="r1c1-t104">
<p><code dir="ltr">server_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t104 r1c2-t104">
<p>The name of the outbound server being started. A <code dir="ltr">NULL</code> specification is not allowed. Do not specify an owner.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS74076" class="refsect2"><a id="CHDIJEIF"></a>
<h3 class="refsect2">STOP_OUTBOUND Procedure<a id="sthref16411"></a></h3>
<p>This procedure stops an XStream outbound server. The outbound server streams out the LCRs to an XStream client application.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16412"></a>Syntax</p>
<pre dir="ltr">DBMS_XSTREAM_ADM.STOP_OUTBOUND(
   server_name  IN  VARCHAR2,
   force        IN  BOOLEAN   DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16413"></a>Parameters</p>
<div id="ARPLS74077" class="tblformal">
<p class="titleintable"><a id="sthref16414"></a><a id="sthref16415"></a>Table 204-38 STOP_OUTBOUND Procedure Parameters</p>
<table class="cellalignment4330" title="STOP_OUTBOUND Procedure Parameters" summary="This table describes the parameters of DBMS_XSTREAM_ADM.ADD_OUTBOUND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t105">Parameter</th>
<th class="cellalignment4328" id="r1c2-t105">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t105" headers="r1c1-t105">
<p><code dir="ltr">server_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t105 r1c2-t105">
<p>The name of the outbound server being stopped. A <code dir="ltr">NULL</code> specification is not allowed. Do not specify an owner.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t105" headers="r1c1-t105">
<p><code dir="ltr">force</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t105 r1c2-t105">
<p>If <code dir="ltr">TRUE</code>, then the procedure stops the outbound server and its capture process as soon as possible.</p>
<p>If <code dir="ltr">FALSE</code>, then the procedure stops the outbound server after ensuring that there are no gaps in the set of applied transactions.</p>
<p>The behavior of the apply component depends on the setting specified for the <code dir="ltr">force</code> parameter and the setting specified for the <code dir="ltr">commit_serialization</code> apply component parameter.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4320">
<tr>
<td class="cellalignment4329">
<table class="cellalignment4325">
<tr>
<td class="cellalignment4324"><a href="d_xslpro.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4324"><a href="d_xstrm_auth.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4332">
<table class="cellalignment4323">
<tr>
<td class="cellalignment4324"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4324"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4324"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4324"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4324"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4324"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>