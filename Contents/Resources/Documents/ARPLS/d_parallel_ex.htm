<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-2308"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/DBMS_PARALLEL_EXECUTE"></a><title>DBMS_PARALLEL_EXECUTE</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1086"/>
<meta name="dcterms.created" content="2016-09-02T5:36:27Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database PL/SQL Packages and Types Reference"/>
<meta name="dcterms.identifier" content="E41829-07"/>
<meta name="dcterms.isVersionOf" content="ARPLS"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="d_output.htm" title="Previous" type="text/html"/>
<link rel="Next" href="d_part.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41829-07.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">111/290</span> <!-- End Header -->
<div id="ARPLS233" class="chapter"><a id="CHDIJACH"></a>
<h1 class="chapter"><span class="secnum">107</span> DBMS_PARALLEL_EXECUTE</h1>
<p>The <a id="sthref6810"></a><code dir="ltr">DBMS_PARALLEL_EXECUTE</code> package enables incremental update of table data in parallel.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADFNS020" href="../ADFNS/adfns_editions.htm#ADFNS020"><span class="italic">Oracle Database Development Guide</span></a></p>
</li>
<li>
<p><a class="olink REFRN" href="../REFRN/toc.htm"><span class="italic">Oracle Database Reference</span></a></p>
</li>
</ul>
</div>
<p>This chapter contains the following topics:</p>
<ul>
<li>
<p><a href="#CHDDEBCI">Using DBMS_PARALLEL_EXECUTE</a></p>
<ul>
<li>
<p>Overview</p>
</li>
<li>
<p>Security Model</p>
</li>
<li>
<p>Constants</p>
</li>
<li>
<p>Views</p>
</li>
<li>
<p>Exceptions</p>
</li>
<li>
<p>Examples</p>
</li>
</ul>
</li>
<li>
<p><a href="#CHDDECIF">Summary of DBMS_PARALLEL_EXECUTE Subprograms</a></p>
</li>
</ul>
<div class="refentry"><a id="CHDDEBCI"></a>
<div id="ARPLS67330" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">Using DBMS_PARALLEL_EXECUTE</h2>
<ul>
<li>
<p><a href="#CHDHJFBA">Overview</a></p>
</li>
<li>
<p><a href="#CHDGJGDF">Security Model</a></p>
</li>
<li>
<p><a href="#CHDGAIGH">Constants</a></p>
</li>
<li>
<p><a href="#CHDHCDEC">Views</a></p>
</li>
<li>
<p><a href="#CHDJAGDA">Exceptions</a></p>
</li>
<li>
<p><a href="#CHDEABDB">Examples</a></p>
</li>
</ul>
<div id="ARPLS67331" class="refsect2"><a id="CHDHJFBA"></a>
<h3 class="refsect2">Overview</h3>
<p>This package lets you incrementally update table data in parallel, in two high-level steps:</p>
<ol>
<li>
<p>Group sets of rows in the table into smaller-sized chunks.</p>
</li>
<li>
<p>Run a user-specified statement on these chunks in parallel, and commit when finished processing each chunk.</p>
</li>
</ol>
<p>This package introduces the notion of <span class="italic">parallel execution task</span>. This task groups the various steps associated with the parallel execution of a PL/SQL block, which is typically updating table data.</p>
<p>All of the package subroutines (except the <a href="#CHDEJHGC">GENERATE_TASK_NAME Function</a> and the <a href="#CHDJHFAB">TASK_STATUS Procedure</a>) perform a commit.</p>
</div>
<!-- class="refsect2" -->
<div id="ARPLS67332" class="refsect2"><a id="CHDGJGDF"></a>
<h3 class="refsect2">Security Model</h3>
<p><code dir="ltr">DBMS_PARALLEL_EXECUTE</code> is a <code dir="ltr">SYS</code>-owned package which is granted to <code dir="ltr">PUBLIC</code>.</p>
<p>Any user can create or operate parallel execution tasks and access the <code dir="ltr">USER</code> view.</p>
<p>Users who have the <code dir="ltr">ADM_PARALLEL_EXECUTE_TASK</code> role can perform administrative routines (qualified by the prefix <code dir="ltr">ADM_</code>) and access the DBA view.</p>
<p>Apart from the administrative routines, all the subprograms refer to tasks owned by the current user.</p>
<p>To execute chunks in parallel, you must have <code dir="ltr">CREATE</code> <code dir="ltr">JOB</code> system privilege.</p>
<p>The <code dir="ltr">CHUNK_BY_SQL</code>, <code dir="ltr">RUN_TASK</code>, and <code dir="ltr">RESUME_TASK</code> subprograms require a query, and are executed using <code dir="ltr">DBMS_SQL</code>. Invokers of the <code dir="ltr">DBMS_SQL</code> interface must ensure that no query contains SQL injection.</p>
</div>
<!-- class="refsect2" -->
<div id="ARPLS67333" class="refsect2"><a id="CHDGAIGH"></a>
<h3 class="refsect2">Constants</h3>
<p>The <code dir="ltr">DBMS_PARALLEL_EXECUTE</code> package uses the constants shown in following tables:</p>
<ul>
<li>
<p><a href="#CHDEIDAF">Table 107-1, &#34;DBMS_PARALLEL_EXECUTE Constants - Chunk Status Value&#34;</a></p>
</li>
<li>
<p><a href="#CHDIHJHI">Table 107-2, &#34;DBMS_PARALLEL_EXECUTE Constants - Task Status Value&#34;</a></p>
</li>
</ul>
<div id="ARPLS67334" class="tblformal">
<p class="titleintable"><a id="sthref6811"></a><a id="CHDEIDAF"></a>Table 107-1 DBMS_PARALLEL_EXECUTE Constants - Chunk Status Value</p>
<table class="cellalignment4330" title="DBMS_PARALLEL_EXECUTE Constants - Chunk Status Value" summary="This table describes DBMS_PARALLEL_EXECUTE Constants - Chunk Status Value" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t3">Constant</th>
<th class="cellalignment4328" id="r1c2-t3">Type</th>
<th class="cellalignment4328" id="r1c3-t3">Value</th>
<th class="cellalignment4328" id="r1c4-t3">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t3" headers="r1c1-t3">
<p><code dir="ltr">ASSIGNED</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t3 r1c2-t3">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t3 r1c3-t3">
<p>1</p>
</td>
<td class="cellalignment4329" headers="r2c1-t3 r1c4-t3">
<p>Chunk has been assigned for processing</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t3" headers="r1c1-t3">
<p><code dir="ltr">PROCESSED</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t3 r1c2-t3">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t3 r1c3-t3">
<p>2</p>
</td>
<td class="cellalignment4329" headers="r3c1-t3 r1c4-t3">
<p>Chunk has been processed successfully</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t3" headers="r1c1-t3">
<p><code dir="ltr">PROCESSED_WITH_ERROR</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t3 r1c2-t3">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t3 r1c3-t3">
<p>3</p>
</td>
<td class="cellalignment4329" headers="r4c1-t3 r1c4-t3">
<p>Chunk has been processed, but an error occurred during processing</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t3" headers="r1c1-t3">
<p><code dir="ltr">UNASSIGNED</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t3 r1c2-t3">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t3 r1c3-t3">
<p>0</p>
</td>
<td class="cellalignment4329" headers="r5c1-t3 r1c4-t3">
<p>Chunk is unassigned</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="ARPLS67335" class="tblformal">
<p class="titleintable"><a id="sthref6812"></a><a id="CHDIHJHI"></a>Table 107-2 DBMS_PARALLEL_EXECUTE Constants - Task Status Value</p>
<table class="cellalignment4330" title="DBMS_PARALLEL_EXECUTE Constants - Task Status Value" summary="This table describes BMS_PARALLEL_EXECUTE Constants - Task Status Value" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t4">Constant</th>
<th class="cellalignment4328" id="r1c2-t4">Type</th>
<th class="cellalignment4328" id="r1c3-t4">Value</th>
<th class="cellalignment4328" id="r1c4-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t4" headers="r1c1-t4">
<p><code dir="ltr">CHUNKED</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t4 r1c2-t4">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t4 r1c3-t4">
<p>4</p>
</td>
<td class="cellalignment4329" headers="r2c1-t4 r1c4-t4">
<p>Table associated with the task has been chunked, but none of the chunk has been assigned for processing</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t4" headers="r1c1-t4">
<p><code dir="ltr">CHUNKING</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t4 r1c2-t4">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t4 r1c3-t4">
<p>2</p>
</td>
<td class="cellalignment4329" headers="r3c1-t4 r1c4-t4">
<p>Table associated with the task is being chunked</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t4" headers="r1c1-t4">
<p><code dir="ltr">CHUNKING_FAILED</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t4 r1c2-t4">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t4 r1c3-t4">
<p>3</p>
</td>
<td class="cellalignment4329" headers="r4c1-t4 r1c4-t4">
<p>Chunking failed</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t4" headers="r1c1-t4">
<p><code dir="ltr">CRASHED</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t4 r1c2-t4">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t4 r1c3-t4">
<p>8</p>
</td>
<td class="cellalignment4329" headers="r5c1-t4 r1c4-t4">
<p>Only applicable if parallel execution is used, this occurs if a job slave crashes or if the database crashes during <code dir="ltr">EXECUTE</code>, leaving a chunk in <code dir="ltr">ASSIGNED</code> or <code dir="ltr">UNASSIGNED</code> state.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t4" headers="r1c1-t4">
<p><code dir="ltr">CREATED</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t4 r1c2-t4">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t4 r1c3-t4">
<p>1</p>
</td>
<td class="cellalignment4329" headers="r6c1-t4 r1c4-t4">
<p>The task has been created by the <code dir="ltr"><a href="#CHDDGEJG">CREATE_TASK Procedure</a></code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t4" headers="r1c1-t4">
<p><code dir="ltr">FINISHED</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t4 r1c2-t4">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t4 r1c3-t4">
<p>6</p>
</td>
<td class="cellalignment4329" headers="r7c1-t4 r1c4-t4">
<p>All chunks processed without error</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t4" headers="r1c1-t4">
<p><code dir="ltr">FINISHED_WITH_ERROR</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t4 r1c2-t4">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t4 r1c3-t4">
<p>7</p>
</td>
<td class="cellalignment4329" headers="r8c1-t4 r1c4-t4">
<p>All chunks processed, but with errors in some cases</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t4" headers="r1c1-t4">
<p><code dir="ltr">PROCESSING</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t4 r1c2-t4">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t4 r1c3-t4">
<p>5</p>
</td>
<td class="cellalignment4329" headers="r9c1-t4 r1c4-t4">
<p>Part of the chunk assigned for processing, or which has been processed</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsect2" -->
<div id="ARPLS67336" class="refsect2"><a id="CHDHCDEC"></a>
<h3 class="refsect2">Views</h3>
<p>The <code dir="ltr">DBMS_PARALLEL_EXECUTE</code> package uses views listed in the <a class="olink REFRN" href="../REFRN/toc.htm"><span class="italic">Oracle Database Reference</span></a>:</p>
<ul>
<li>
<p><a class="olink REFRN23742" href="../REFRN/GUID-E3E6748D-0F8C-4EE5-B9B5-DE5B40C4FBE3.htm#REFRN23742">DBA_PARALLEL_EXECUTE_CHUNKS</a></p>
</li>
<li>
<p><a class="olink REFRN23743" href="../REFRN/GUID-AEFFCE5D-AB5B-4EE1-9CB3-4491F3D3D0E7.htm#REFRN23743">DBA_PARALLEL_EXECUTE_TASKS</a></p>
</li>
<li>
<p><a class="olink REFRN26742" href="../REFRN/GUID-CE1702DB-51E6-4A6E-A795-CFD24AFC0F00.htm#REFRN26742">USER_PARALLEL_EXECUTE_CHUNKS</a></p>
</li>
<li>
<p><a class="olink REFRN26743" href="../REFRN/GUID-823A58AD-A1AC-48EC-B7EA-2D5C82940187.htm#REFRN26743">USER_PARALLEL_EXECUTE_TASKS</a></p>
</li>
</ul>
</div>
<!-- class="refsect2" -->
<div id="ARPLS67337" class="refsect2"><a id="CHDJAGDA"></a>
<h3 class="refsect2">Exceptions</h3>
<p>The following table lists the exceptions raised by <code dir="ltr">DBMS_PARALLEL_EXECUTE</code>.</p>
<div id="ARPLS67338" class="tblformal">
<p class="titleintable"><a id="sthref6813"></a><a id="sthref6814"></a>Table 107-3 Exceptions Raised by DBMS_PARALLEL_EXECUTE</p>
<table class="cellalignment4330" title="Exceptions Raised by DBMS_PARALLEL_EXECUTE" summary="This table describes the Exceptions raised by the DBMS_PARALLEL_EXECUTE package." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t5">Exception</th>
<th class="cellalignment4328" id="r1c2-t5">Error Code</th>
<th class="cellalignment4328" id="r1c3-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t5" headers="r1c1-t5">
<p><code dir="ltr">CHUNK_NOT_FOUND</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t5 r1c2-t5">
<p>29499</p>
</td>
<td class="cellalignment4329" headers="r2c1-t5 r1c3-t5">
<p>Specified chunk does not exist</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t5" headers="r1c1-t5">
<p><code dir="ltr">DUPLICATE_TASK_NAME</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t5 r1c2-t5">
<p>29497</p>
</td>
<td class="cellalignment4329" headers="r3c1-t5 r1c3-t5">
<p>Same task name has been used by an existing task</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t5" headers="r1c1-t5">
<p><code dir="ltr">INVALID_STATE_FOR_CHUNK</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t5 r1c2-t5">
<p>29492</p>
</td>
<td class="cellalignment4329" headers="r4c1-t5 r1c3-t5">
<p>Attempts to chunk a table that is not in <code dir="ltr">CREATED</code> or <code dir="ltr">CHUNKING_FAILED</code> state</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t5" headers="r1c1-t5">
<p><code dir="ltr">INVALID_STATE_FOR_REDSUME</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t5 r1c2-t5">
<p>29495</p>
</td>
<td class="cellalignment4329" headers="r5c1-t5 r1c3-t5">
<p>Attempts to resume execution, but the task is not in <code dir="ltr">FINISHED_WITH_ERROR</code> or <code dir="ltr">CRASHED</code> state</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t5" headers="r1c1-t5">
<p><code dir="ltr">INVALID_STATE_FOR_RUN</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t5 r1c2-t5">
<p>29494</p>
</td>
<td class="cellalignment4329" headers="r6c1-t5 r1c3-t5">
<p>Attempts to execute the task that is not in <code dir="ltr">CHUNKED</code> state</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t5" headers="r1c1-t5">
<p><code dir="ltr">INVALID_STATUS</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t5 r1c2-t5">
<p>29493</p>
</td>
<td class="cellalignment4329" headers="r7c1-t5 r1c3-t5">
<p>Attempts to set an invalid value to the chunk status</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t5" headers="r1c1-t5">
<p><code dir="ltr">INVALID_TABLE</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t5 r1c2-t5">
<p>29491</p>
</td>
<td class="cellalignment4329" headers="r8c1-t5 r1c3-t5">
<p>Attempts to chunk a table by rowid in cases in which the table is not a physical table, or the table is an IOT</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t5" headers="r1c1-t5">
<p><code dir="ltr">MISSING_ROLE</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t5 r1c2-t5">
<p>29490</p>
</td>
<td class="cellalignment4329" headers="r9c1-t5 r1c3-t5">
<p>User does not have the necessary <code dir="ltr">ADM_PARALLEL_EXECUTE</code> role</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t5" headers="r1c1-t5">
<p><code dir="ltr">TASK_NOT_FOUND</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t5 r1c2-t5">
<p>29498</p>
</td>
<td class="cellalignment4329" headers="r10c1-t5 r1c3-t5">
<p>Specified <code dir="ltr">task_name</code> does not exist</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsect2" -->
<div id="ARPLS67339" class="refsect2"><a id="CHDEABDB"></a>
<h3 class="refsect2">Examples</h3>
<p>The following examples run on the Human Resources (HR) schema of the Oracle Database Sample Schemas. It requires that the HR schema be created with the <code dir="ltr">JOB</code> <code dir="ltr">SYSTEM</code> privilege.</p>
<p class="subhead2"><a id="ARPLS67340"></a>Chunk by ROWID</p>
<p>This example shows the most common usage of this package. After calling the <a href="#CHDIBHHB">RUN_TASK Procedure</a>, it checks for errors and reruns in the case of error.</p>
<pre dir="ltr">DECLARE
  l_sql_stmt VARCHAR2(1000);
  l_try NUMBER;
  l_status NUMBER;
BEGIN
 
  -- Create the TASK
  DBMS_PARALLEL_EXECUTE.CREATE_TASK (&#39;mytask&#39;);
 
  -- Chunk the table by ROWID
  DBMS_PARALLEL_EXECUTE.CREATE_CHUNKS_BY_ROWID(&#39;mytask&#39;, &#39;HR&#39;, &#39;EMPLOYEES&#39;, true, 100);
 
  -- Execute the DML in parallel
  l_sql_stmt := &#39;update EMPLOYEES e 
      SET e.salary = e.salary + 10
      WHERE rowid BETWEEN :start_id AND :end_id&#39;;
  DBMS_PARALLEL_EXECUTE.RUN_TASK(&#39;mytask&#39;, l_sql_stmt, DBMS_SQL.NATIVE,
                                 parallel_level =&gt; 10);
 
  -- If there is an error, RESUME it for at most 2 times.
  L_try := 0;
  L_status := DBMS_PARALLEL_EXECUTE.TASK_STATUS(&#39;mytask&#39;);
  WHILE(l_try &lt; 2 and L_status != DBMS_PARALLEL_EXECUTE.FINISHED) 
  LOOP
    L_try := l_try + 1;
    DBMS_PARALLEL_EXECUTE.RESUME_TASK(&#39;mytask&#39;);
    L_status := DBMS_PARALLEL_EXECUTE.TASK_STATUS(&#39;mytask&#39;);
  END LOOP;
 
  -- Done with processing; drop the task
  DBMS_PARALLEL_EXECUTE.DROP_TASK(&#39;mytask&#39;);
   
END;
/
</pre>
<p class="subhead2"><a id="ARPLS67341"></a>Chunk by User-Provided SQL</p>
<p>A user can specify a chunk algorithm by using the <a href="#CHDJEHJI">CREATE_CHUNKS_BY_SQL Procedure</a>. This example shows that rows with the same <code dir="ltr">manager_id</code> are grouped together and processed in one chunk.</p>
<pre dir="ltr">DECLARE
  l_chunk_sql VARCHAR2(1000);
  l_sql_stmt VARCHAR2(1000);
  l_try NUMBER;
  l_status NUMBER;
BEGIN
 
  -- Create the TASK
  DBMS_PARALLEL_EXECUTE.CREATE_TASK (&#39;mytask&#39;);
 
  -- Chunk the table by MANAGER_ID
  l_chunk_sql := &#39;SELECT distinct manager_id, manager_id FROM employees&#39;;
  DBMS_PARALLEL_EXECUTE.CREATE_CHUNKS_BY_SQL(&#39;mytask&#39;, l_chunk_sql, false);
 
  -- Execute the DML in parallel
  --   the WHERE clause contain a condition on manager_id, which is the chunk
  --   column. In this case, grouping rows is by manager_id.
  l_sql_stmt := &#39;update EMPLOYEES e 
      SET e.salary = e.salary + 10
      WHERE manager_id between :start_id and :end_id&#39;;
  DBMS_PARALLEL_EXECUTE.RUN_TASK(&#39;mytask&#39;, l_sql_stmt, DBMS_SQL.NATIVE,
                                  parallel_level =&gt; 10);
 
  -- If there is error, RESUME it for at most 2 times.
  L_try := 0;
  L_status := DBMS_PARALLEL_EXECUTE.TASK_STATUS(&#39;mytask&#39;);
  WHILE(l_try &lt; 2 and L_status != DBMS_PARALLEL_EXECUTE.FINISHED) 
  Loop
    L_try := l_try + 1;
    DBMS_PARALLEL_EXECUTE.RESUME_TASK(&#39;mytask&#39;);
    L_status := DBMS_PARALLEL_EXECUTE.TASK_STATUS(&#39;mytask&#39;);
  END LOOP;
 
  -- Done with processing; drop the task
  DBMS_PARALLEL_EXECUTE.DROP_TASK(&#39;mytask&#39;);
 
end;
/
</pre>
<p class="subhead2"><a id="ARPLS67342"></a>Executing Chunks in an User-defined Framework</p>
<p>You can execute chunks in a self-defined framework without using the <a href="#CHDIBHHB">RUN_TASK Procedure</a>. This example shows how to use <a href="#CHDHAAEB">GET_ROWID_CHUNK Procedure</a>, <code dir="ltr">EXECUTE</code> <code dir="ltr">IMMEDIATE</code>, <a href="#CHDIJDCH">SET_CHUNK_STATUS Procedure</a> to execute the chunks.</p>
<pre dir="ltr">DECLARE
  l_sql_stmt varchar2(1000);
  l_try number;
  l_status number;
  l_chunk_id number;
  l_start_rowid rowid;
  l_end_rowid rowid;
  l_any_rows boolean;
  CURSOR c1 IS SELECT chunk_id
               FROM user_parallel_execute_chunks
               WHERE task_name = &#39;mytask&#39;
                 AND STATUS IN (DBMS_PARALLEL_EXECUTE.PROCESSED_WITH_ERROR,
                                DBMS_PARALLEL_EXECUTE.ASSIGNED);
BEGIN
 
  -- Create the Objects, task, and chunk by ROWID
  DBMS_PARALLEL_EXECUTE.CREATE_TASK (&#39;mytask&#39;);
  DBMS_PARALLEL_EXECUTE.CREATE_CHUNKS_BY_ROWID(&#39;mytask&#39;, &#39;HR&#39;, &#39;EMPLOYEES&#39;, true, 100);
 
  l_sql_stmt := &#39;update EMPLOYEES e 
      SET e.salary = e.salary + 10
      WHERE rowid BETWEEN :start_id AND :end_id&#39;;
 
  -- Execute the DML in his own framework 
  --
  -- Process each chunk and commit.
  -- After processing one chunk, repeat this process until
  -- all the chunks are processed.
  --
  &lt;&lt;main_processing&gt;&gt;
  LOOP
      --
      -- Get a chunk to process; if there is nothing to process, then exit the 
      -- loop;
      --
      DBMS_PARALLEL_EXECUTE.GET_ROWID_CHUNK(&#39;mytask&#39;,
                                                          l_chunk_id,
                                                          l_start_rowid,
                                                          l_end_rowid,
                                                          l_any_rows);
      IF (l_any_rows = false) THEN EXIT; END IF;
 
      --
      -- The chunk is specified by start_id and end_id.
      -- Bind the start_id and end_id and then execute it
      --
      -- If no error occured, set the chunk status to PROCESSED.
      --
      -- Catch any exception. If an exception occured, store the error num/msg
      -- into the chunk table and then continue to process the next chunk.
      -- 
      BEGIN
        EXECUTE IMMEDIATE l_sql_stmt using l_start_rowid, l_end_rowid;
        DBMS_PARALLEL_EXECUTE.SET_CHUNK_STATUS(&#39;mytask&#39;,l_chunk_id,
          DBMS_PARALLEL_EXECUTE.PROCESSED);
      EXCEPTION WHEN OTHERS THEN
        DBMS_PARALLEL_EXECUTE.SET_CHUNK_STATUS(&#39;mytask&#39;, l_chunk_id,
          DBMS_PARALLEL_EXECUTE.PROCESSED_WITH_ERROR, SQLCODE, SQLERRM);
      END;
 
      --
      -- Finished processing one chunk; Commit here
      --
      COMMIT;
  END LOOP;
</pre></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CHDDECIF"></a>
<div id="ARPLS67343" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">Summary of DBMS_PARALLEL_EXECUTE Subprograms</h2>
<div id="ARPLS67344" class="tblformal">
<p class="titleintable"><a id="sthref6815"></a><a id="sthref6816"></a>Table 107-4 DBMS_PARALLEL_EXECUTE Package Subprograms</p>
<table class="cellalignment4330" title="DBMS_PARALLEL_EXECUTE Package Subprograms" summary="DBMS_ADDMPackage Subprograms" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t6">Subprogram</th>
<th class="cellalignment4328" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t6" headers="r1c1-t6">
<p><a href="#CHDJFGBI">ADM_DROP_CHUNKS Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r2c1-t6 r1c2-t6">
<p>Drops all chunks of the specified task owned by the specified owner</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t6" headers="r1c1-t6">
<p><a href="#CHDJFBCC">ADM_DROP_TASK Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r3c1-t6 r1c2-t6">
<p>Drops the task of the given user and all related chunks</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t6" headers="r1c1-t6">
<p><a href="#CHDEHIBJ">ADM_TASK_STATUS Function</a></p>
</td>
<td class="cellalignment4329" headers="r4c1-t6 r1c2-t6">
<p>Returns the task status</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t6" headers="r1c1-t6">
<p><a href="#CHDDCJEF">ADM_STOP_TASK Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r5c1-t6 r1c2-t6">
<p>Stops the task of the given owner and related job slaves</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t6" headers="r1c1-t6">
<p><a href="#CHDDGEJG">CREATE_TASK Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r6c1-t6 r1c2-t6">
<p>Creates a task for the current user</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t6" headers="r1c1-t6">
<p><a href="#CHDHFCDJ">CREATE_CHUNKS_BY_NUMBER_COL Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r7c1-t6 r1c2-t6">
<p>Chunks the table associated with the given task by the specified column.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t6" headers="r1c1-t6">
<p><a href="#CHDGCHFA">CREATE_CHUNKS_BY_ROWID Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r8c1-t6 r1c2-t6">
<p>Chunks the table associated with the given task by <code dir="ltr">ROWID</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t6" headers="r1c1-t6">
<p><a href="#CHDJEHJI">CREATE_CHUNKS_BY_SQL Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r9c1-t6 r1c2-t6">
<p>Chunks the table associated with the given task by means of a user-provided <code dir="ltr">SELECT</code> statement</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t6" headers="r1c1-t6">
<p><a href="#CHDEHCDE">DROP_TASK Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r10c1-t6 r1c2-t6">
<p>Drops the task and all related chunks</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t6" headers="r1c1-t6">
<p><a href="#CHDHCHGC">DROP_CHUNKS Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r11c1-t6 r1c2-t6">
<p>Drops the task&#39;s chunks</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t6" headers="r1c1-t6">
<p><a href="#CHDEJHGC">GENERATE_TASK_NAME Function</a></p>
</td>
<td class="cellalignment4329" headers="r12c1-t6 r1c2-t6">
<p>Returns a unique name for a task</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t6" headers="r1c1-t6">
<p><a href="#CHDFADCH">GET_NUMBER_COL_CHUNK Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r13c1-t6 r1c2-t6">
<p>Picks an unassigned <code dir="ltr">NUMBER</code> chunk and changes it to <code dir="ltr">ASSIGNED</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t6" headers="r1c1-t6">
<p><a href="#CHDHAAEB">GET_ROWID_CHUNK Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r14c1-t6 r1c2-t6">
<p>Picks an unassigned <code dir="ltr">ROWID</code> chunk and changes it to <code dir="ltr">ASSIGNED</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r15c1-t6" headers="r1c1-t6">
<p><a href="#CHDEAGGC">PURGE_PROCESSED_CHUNKS Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r15c1-t6 r1c2-t6">
<p>Deletes all the processed chunks whose status is <code dir="ltr">PROCESSED</code> or <code dir="ltr">PROCESSED_WITH_ERROR</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r16c1-t6" headers="r1c1-t6">
<p><a href="#CHDBIBEC">RESUME_TASK Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r16c1-t6 r1c2-t6">
<p>Retries the given the task if the <a href="#CHDIBHHB">RUN_TASK Procedure</a> finished with an error, or resumes the task if a crash occurred.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r17c1-t6" headers="r1c1-t6">
<p><a href="#CHDIBHHB">RUN_TASK Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r17c1-t6 r1c2-t6">
<p>Executes the specified SQL statement on the chunks in parallel</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r18c1-t6" headers="r1c1-t6">
<p><a href="#CHDIJDCH">SET_CHUNK_STATUS Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r18c1-t6 r1c2-t6">
<p>Sets the status of the chunk</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r19c1-t6" headers="r1c1-t6">
<p><a href="#CHDBECBG">STOP_TASK Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r19c1-t6 r1c2-t6">
<p>Stops the task and related job slaves</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r20c1-t6" headers="r1c1-t6">
<p><a href="#CHDJHFAB">TASK_STATUS Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r20c1-t6 r1c2-t6">
<p>Returns the task status</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="ARPLS67345" class="refsect2"><a id="CHDJFGBI"></a>
<h3 class="refsect2"><a id="sthref6817"></a>ADM_DROP_CHUNKS Procedure</h3>
<p>This procedure drops all chunks of the specified task owned by the specified owner.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6818"></a>Syntax</p>
<pre dir="ltr">DBMS_PARALLEL_EXECUTE.ADM_DROP_CHUNKS (
   task_owner      IN  VARCHAR2,
   task_name       IN  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6819"></a>Parameters</p>
<div id="ARPLS67346" class="tblformal">
<p class="titleintable"><a id="sthref6820"></a><a id="sthref6821"></a>Table 107-5 ADM_DROP_CHUNKS Procedure Parameters</p>
<table class="cellalignment4330" title="ADM_DROP_CHUNKS Procedure Parameters" summary="This table describes the Parameters of DBMS_PARALLEL_EXECUTE.ADM_DROP_CHUNKS subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t7">Parameter</th>
<th class="cellalignment4328" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t7" headers="r1c1-t7">
<p><code dir="ltr">task_owner</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t7 r1c2-t7">
<p>Owner of the task</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t7" headers="r1c1-t7">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t7 r1c2-t7">
<p>Name of the task</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS67347" class="refsect2"><a id="CHDJFBCC"></a>
<h3 class="refsect2"><a id="sthref6822"></a>ADM_DROP_TASK Procedure</h3>
<p>This procedure drops the task of the specified user and all related chunks.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6823"></a>Syntax</p>
<pre dir="ltr">DBMS_PARALLEL_EXECUTE.ADM_DROP_TASK (
   task_owner      IN  VARCHAR2,
   task_name       IN  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6824"></a>Parameters</p>
<div id="ARPLS67348" class="tblformal">
<p class="titleintable"><a id="sthref6825"></a><a id="sthref6826"></a>Table 107-6 ADM_DROP_TASK Procedure Parameters</p>
<table class="cellalignment4330" title="ADM_DROP_TASK Procedure Parameters" summary="This table describes the Parameters of DBMS_PARALLEL_EXECUTE.STOP_TASK subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t8">Parameter</th>
<th class="cellalignment4328" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t8" headers="r1c1-t8">
<p><code dir="ltr">task_owner</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t8 r1c2-t8">
<p>Owner of the task</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t8" headers="r1c1-t8">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t8 r1c2-t8">
<p>Name of the task</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS67349" class="refsect2"><a id="CHDEHIBJ"></a>
<h3 class="refsect2"><a id="sthref6827"></a>ADM_TASK_STATUS Function</h3>
<p>This function returns the task status.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6828"></a>Syntax</p>
<pre dir="ltr">DBMS_PARALLEL_EXECUTE.ADM_TASK_STATUS  (
   task_owner      IN  VARCHAR2,
   task_name       IN  VARCHAR2)
 RETURN NUMBER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6829"></a>Parameters</p>
<div id="ARPLS67350" class="tblformal">
<p class="titleintable"><a id="sthref6830"></a><a id="sthref6831"></a>Table 107-7 ADM_TASK_STATUS Function Parameters</p>
<table class="cellalignment4330" title="ADM_TASK_STATUS Function Parameters" summary="This table describes the Parameters of DBMS_PARALLEL_EXECUTE.ADM_TASK_STATUS subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t9">Parameter</th>
<th class="cellalignment4328" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t9" headers="r1c1-t9">
<p><code dir="ltr">task_owner</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t9 r1c2-t9">
<p>Owner of the task</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t9" headers="r1c1-t9">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t9 r1c2-t9">
<p>Name of the task</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS67351" class="refsect2"><a id="CHDDCJEF"></a>
<h3 class="refsect2"><a id="sthref6832"></a>ADM_STOP_TASK Procedure</h3>
<p>This procedure stops the task of the specified owner and related job slaves.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6833"></a>Syntax</p>
<pre dir="ltr">DBMS_PARALLEL_EXECUTE.ADM_STOP_TASK (
   task_owner      IN  VARCHAR2,
   task_name       IN  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6834"></a>Parameters</p>
<div id="ARPLS67352" class="tblformal">
<p class="titleintable"><a id="sthref6835"></a><a id="sthref6836"></a>Table 107-8 ADM_STOP_TASK Procedure Parameters</p>
<table class="cellalignment4330" title="ADM_STOP_TASK Procedure Parameters" summary="This table describes the Parameters of DBMS_PARALLEL_EXECUTE.ADM_STOP_TASK subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t10">Parameter</th>
<th class="cellalignment4328" id="r1c2-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t10" headers="r1c1-t10">
<p><code dir="ltr">task_owner</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t10 r1c2-t10">
<p>Owner of the task</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t10" headers="r1c1-t10">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t10 r1c2-t10">
<p>Name of the task</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS67353" class="refsect2"><a id="CHDDGEJG"></a>
<h3 class="refsect2"><a id="sthref6837"></a>CREATE_TASK Procedure</h3>
<p>This procedure creates a task for the current user. The pairing of <code dir="ltr">task_name</code> and <code dir="ltr">current_user</code> must be unique.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6838"></a>Syntax</p>
<pre dir="ltr">DBMS_PARALLEL_EXECUTE.CREATE_TASK (
   task_name        IN   VARCHAR2,
   comment          IN   VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6839"></a>Parameters</p>
<div id="ARPLS67354" class="tblformal">
<p class="titleintable"><a id="sthref6840"></a><a id="sthref6841"></a>Table 107-9 CREATE_TASK Procedure Parameters</p>
<table class="cellalignment4330" title="CREATE_TASK Procedure Parameters" summary="This table describes the Parameters of DBMS_PARALLEL_EXECUTE.GENERATE_TASK_NAME subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t11">Parameter</th>
<th class="cellalignment4328" id="r1c2-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t11" headers="r1c1-t11">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t11 r1c2-t11">
<p>Name of the task. The task_name can be any string in which related length must be less than or equal to 128 bytes.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t11" headers="r1c1-t11">
<p><code dir="ltr">comment</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t11 r1c2-t11">
<p>Comment field. The comment must be less than 4000 bytes.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS67355" class="refsect2"><a id="CHDHFCDJ"></a>
<h3 class="refsect2"><a id="sthref6842"></a>CREATE_CHUNKS_BY_NUMBER_COL Procedure</h3>
<p>This procedure chunks the table (associated with the specified task) by the specified column. The specified column must be a <code dir="ltr">NUMBER</code> column. This procedure takes the <code dir="ltr">MIN</code> and <code dir="ltr">MAX</code> value of the column, and then divides the range evenly according to <code dir="ltr">chunk_size</code>. The chunks are:</p>
<pre dir="ltr">START_ID                              END_ID
---------------------------           ---------------------------
min_id_val                            min_id_val+1*chunk_size-1
min_id_val+1*chunk_size               min_id_val+2*chunk_size-1
&hellip;                                     &hellip;
min_id_val+i*chunk_size               max_id_val
</pre>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6843"></a>Syntax</p>
<pre dir="ltr">DBMS_PARALLEL_EXECUTE.CREATE_CHUNKS_BY_NUMBER_COL (
   task_name       IN  VARCHAR2,
   table_owner     IN  VARCHAR2,
   table_name      IN  VARCHAR2,
   table_column    IN  VARCHAR2,
   chunk_size      IN  NUMBER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6844"></a>Parameters</p>
<div id="ARPLS67356" class="tblformal">
<p class="titleintable"><a id="sthref6845"></a><a id="sthref6846"></a>Table 107-10 CREATE_CHUNKS_BY_NUMBER_COL Procedure Parameters</p>
<table class="cellalignment4330" title="CREATE_CHUNKS_BY_NUMBER_COL Procedure Parameters" summary="This table describes the Parameters of DBMS_PARALLEL_EXECUTE.CREATE_CHUNKS_BY_ROWID subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t12">Parameter</th>
<th class="cellalignment4328" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t12" headers="r1c1-t12">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t12 r1c2-t12">
<p>Name of the task</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t12" headers="r1c1-t12">
<p><code dir="ltr">table_owner</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t12 r1c2-t12">
<p>Owner of the table</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t12" headers="r1c1-t12">
<p><code dir="ltr">table_name</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t12 r1c2-t12">
<p>Name of the table</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t12" headers="r1c1-t12">
<p><code dir="ltr">table_column</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t12 r1c2-t12">
<p>Name of the <code dir="ltr">NUMBER</code> column</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t12" headers="r1c1-t12">
<p><code dir="ltr">chunk_size</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t12 r1c2-t12">
<p>Range of each chunk</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS67357" class="refsect2"><a id="CHDGCHFA"></a>
<h3 class="refsect2"><a id="sthref6847"></a>CREATE_CHUNKS_BY_ROWID Procedure</h3>
<p>This procedure chunks the table (associated with the specified task) by <code dir="ltr">ROWID</code>. <code dir="ltr">num_row</code> and <code dir="ltr">num_block</code> are approximate guidance for the size of each chunk. The table to be chunked must be a physical table with physical <code dir="ltr">ROWID</code> having views and table functions. Index-organized tables are not allowed.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6848"></a>Syntax</p>
<pre dir="ltr">DBMS_PARALLEL_EXECUTE.CREATE_CHUNKS_BY_ROWID (
   task_name       IN  VARCHAR2,
   table_owner     IN  VARCHAR2,
   table_name      IN  VARCHAR2,
   by_row          IN  BOOLEAN,
   chunk_size      IN  NUMBER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6849"></a>Parameters</p>
<div id="ARPLS67358" class="tblformal">
<p class="titleintable"><a id="sthref6850"></a><a id="sthref6851"></a>Table 107-11 CREATE_CHUNKS_BY_ROWID Procedure Parameters</p>
<table class="cellalignment4330" title="CREATE_CHUNKS_BY_ROWID Procedure Parameters" summary="This table describes the Parameters of DBMS_PARALLEL_EXECUTE.CREATE_CHUNKS_BY_ROWID subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t13">Parameter</th>
<th class="cellalignment4328" id="r1c2-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t13" headers="r1c1-t13">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t13 r1c2-t13">
<p>Name of the task</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t13" headers="r1c1-t13">
<p><code dir="ltr">table_owner</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t13 r1c2-t13">
<p>Owner of the table</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t13" headers="r1c1-t13">
<p><code dir="ltr">table_name</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t13 r1c2-t13">
<p>Name of the table</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t13" headers="r1c1-t13">
<p><code dir="ltr">by_row</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t13 r1c2-t13">
<p><code dir="ltr">TRUE</code> if <code dir="ltr">chunk_size</code> refers to the number of rows, otherwise, <code dir="ltr">chunk_size</code> refers to the number of blocks</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t13" headers="r1c1-t13">
<p><code dir="ltr">chunk_size</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t13 r1c2-t13">
<p>Approximate number of rows/blocks to process for each commit cycle</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS67359" class="refsect2"><a id="CHDJEHJI"></a>
<h3 class="refsect2"><a id="sthref6852"></a>CREATE_CHUNKS_BY_SQL Procedure</h3>
<p>This procedure chunks the table (associated with the specified task) by means of a user-provided <code dir="ltr">SELECT</code> statement. The <code dir="ltr">SELECT</code> statement that returns the range of each chunk must have two columns: <code dir="ltr">start_id</code> and <code dir="ltr">end_id</code>. If the task is to chunk by <code dir="ltr">ROWID</code>, then the two columns must be of <code dir="ltr">ROWID</code> type. If the task is to chunk the table by <code dir="ltr">NUMBER</code> column, then the two columns must be of <code dir="ltr">NUMBER</code> type. The procedure provides the flexibility to users who want to deploy user-defined chunk algorithms.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6853"></a>Syntax</p>
<pre dir="ltr">DBMS_PARALLEL_EXECUTE.CREATE_CHUNKS_BY_SQL (
   task_name       IN  VARCHAR2,
   sql_statement   IN  CLOB,
   by_rowid        IN  BOOLEAN);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6854"></a>Parameters</p>
<div id="ARPLS67360" class="tblformal">
<p class="titleintable"><a id="sthref6855"></a><a id="sthref6856"></a>Table 107-12 CREATE_CHUNKS_BY_SQL Procedure Parameters</p>
<table class="cellalignment4330" title="CREATE_CHUNKS_BY_SQL Procedure Parameters" summary="This table describes the Parameters of DBMS_PARALLEL_EXECUTE.CREATE_CHUNKS_BY_SQL subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t14">Parameter</th>
<th class="cellalignment4328" id="r1c2-t14">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t14" headers="r1c1-t14">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t14 r1c2-t14">
<p>Name of the task</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t14" headers="r1c1-t14">
<p><code dir="ltr">sql_statment</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t14 r1c2-t14">
<p>SQL that returns the chunk ranges</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t14" headers="r1c1-t14">
<p><code dir="ltr">by_rowid</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t14 r1c2-t14">
<p><code dir="ltr">TRUE</code> if the table is chunked by rowids</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS67361" class="refsect2"><a id="CHDEHCDE"></a>
<h3 class="refsect2"><a id="sthref6857"></a>DROP_TASK Procedure</h3>
<p>This procedure drops the task and all related chunks.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6858"></a>Syntax</p>
<pre dir="ltr">DBMS_PARALLEL_EXECUTE.DROP_TASK (
   task_name       IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6859"></a>Parameters</p>
<div id="ARPLS67362" class="tblformal">
<p class="titleintable"><a id="sthref6860"></a><a id="sthref6861"></a>Table 107-13 DROP_TASK Procedure Parameters</p>
<table class="cellalignment4330" title="DROP_TASK Procedure Parameters" summary="This table describes the Parameters of DBMS_PARALLEL_EXECUTE.STOP_TASK subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t15">Parameter</th>
<th class="cellalignment4328" id="r1c2-t15">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t15" headers="r1c1-t15">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t15 r1c2-t15">
<p>Name of the task</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS67363" class="refsect2"><a id="CHDHCHGC"></a>
<h3 class="refsect2"><a id="sthref6862"></a>DROP_CHUNKS Procedure</h3>
<p>This procedure drops the task&#39;s chunks.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6863"></a>Syntax</p>
<pre dir="ltr">DBMS_PARALLEL_EXECUTE.DROP_CHUNKS (
   task_name       IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6864"></a>Parameters</p>
<div id="ARPLS67364" class="tblformal">
<p class="titleintable"><a id="sthref6865"></a><a id="sthref6866"></a>Table 107-14 DROP_CHUNKS Procedure Parameters</p>
<table class="cellalignment4330" title="DROP_CHUNKS Procedure Parameters" summary="This table describes the Parameters of DBMS_PARALLEL_EXECUTE.DROP_CHUNKS subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t16">Parameter</th>
<th class="cellalignment4328" id="r1c2-t16">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t16" headers="r1c1-t16">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t16 r1c2-t16">
<p>Name of the task</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS67365" class="refsect2"><a id="CHDEJHGC"></a>
<h3 class="refsect2"><a id="sthref6867"></a>GENERATE_TASK_NAME Function</h3>
<p>This function returns a unique name for a task. The name is of the form <span class="italic">prefix</span>N where N is a number from a sequence. If no prefix is specified, the generated name is, by default, <code dir="ltr">TASK$_1</code>, <code dir="ltr">TASK$_2</code>, <code dir="ltr">TASK$_3</code>, and so on. If &#39;<code dir="ltr">SCOTT</code>&#39; is specified as the prefix, the name is <code dir="ltr">SCOTT1</code>, <code dir="ltr">SCOTT2</code>, and so on.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6868"></a>Syntax</p>
<pre dir="ltr">DBMS_PARALLEL_EXECUTE.GENERATE_TASK_NAME (
   prefix      IN      VARCHAR2 DEFAULT &#39;TASK$_&#39;) 
 RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6869"></a>Parameters</p>
<div id="ARPLS67366" class="tblformal">
<p class="titleintable"><a id="sthref6870"></a><a id="sthref6871"></a>Table 107-15 GENERATE_TASK_NAME Function Parameters</p>
<table class="cellalignment4330" title="GENERATE_TASK_NAME Function Parameters" summary="This table describes the Parameters of DBMS_PARALLEL_EXECUTE.GENERATE_TASK_NAME subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t17">Parameter</th>
<th class="cellalignment4328" id="r1c2-t17">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t17" headers="r1c1-t17">
<p><code dir="ltr">prefix</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t17 r1c2-t17">
<p>The prefix to use when generating the task name</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS67367" class="refsect2"><a id="CHDFADCH"></a>
<h3 class="refsect2"><a id="sthref6872"></a>GET_NUMBER_COL_CHUNK Procedure</h3>
<p>This procedure picks an unassigned <code dir="ltr">NUMBER</code> chunk and changes it to <code dir="ltr">ASSIGNED</code>. If there are no more chunks to assign, <code dir="ltr">any_rows</code> is set to <code dir="ltr">FALSE</code>. Otherwise, the <code dir="ltr">chunk_id</code>, <code dir="ltr">start</code>, and <code dir="ltr">end</code><code dir="ltr">_id</code> of the chunk are returned as <code dir="ltr">OUT</code> parameters. The chunk info in <code dir="ltr">DBMS_PARALLEL_EXECUTE_CHUNKS$</code> is updated as follows: <code dir="ltr">STATUS</code> becomes <code dir="ltr">ASSIGNED</code>; <code dir="ltr">START_TIMESTAMP</code> records the current time; <code dir="ltr">END_TIMESTAMP</code> is cleared.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDHCDEC">Views</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6873"></a>Syntax</p>
<pre dir="ltr">DBMS_PARALLEL_EXECUTE.GET_NUMBER_COL_CHUNK (
   task_name       IN VARCHAR2,
   chunk_id        OUT NUMBER,
   start_rowid     OUT ROWID,      
   end_id          OUT ROWID,
   any_rows        OUT BOOLEAN);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6874"></a>Parameters</p>
<div id="ARPLS67368" class="tblformal">
<p class="titleintable"><a id="sthref6875"></a><a id="sthref6876"></a>Table 107-16 GET_NUMBER_COL_CHUNK Procedure Parameters</p>
<table class="cellalignment4330" title="GET_NUMBER_COL_CHUNK Procedure Parameters" summary="This table describes the Parameters of DBMS_PARALLEL_EXECUTE.GET_NUMBER_COL_CHUNK subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t19">Parameter</th>
<th class="cellalignment4328" id="r1c2-t19">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t19" headers="r1c1-t19">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t19 r1c2-t19">
<p>Name of the task</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t19" headers="r1c1-t19">
<p><code dir="ltr">chunk_id</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t19 r1c2-t19">
<p>Chunk_id of the chunk</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t19" headers="r1c1-t19">
<p><code dir="ltr">start_rowid</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t19 r1c2-t19">
<p>Start rowid in the returned range</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t19" headers="r1c1-t19">
<p><code dir="ltr">end_id</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t19 r1c2-t19">
<p>End rowid in the returned range</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t19" headers="r1c1-t19">
<p><code dir="ltr">any_rows</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t19 r1c2-t19">
<p>Indicating if there could be any rows to process in the range</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6877"></a>Usage Notes</p>
<p>If the task is chunked by <code dir="ltr">ROWID</code>, then use <code dir="ltr">get_rowid_range</code>. If the task is chunked by <code dir="ltr">NUMBER</code> column, then use <code dir="ltr">get_number_col_range</code>. If you make the wrong function call, the returning <code dir="ltr">chunk_id</code> and <code dir="ltr">any_rows</code> have valid values but <code dir="ltr">start_id</code> and <code dir="ltr">end_id</code> are <code dir="ltr">NULL</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS67369" class="refsect2"><a id="CHDHAAEB"></a>
<h3 class="refsect2"><a id="sthref6878"></a>GET_ROWID_CHUNK Procedure</h3>
<p>This procedure picks an unassigned <code dir="ltr">ROWID</code> chunk and changes it to <code dir="ltr">ASSIGNED</code>. If there are no more chunks to assign, <code dir="ltr">any_rows</code> is set to <code dir="ltr">FALSE</code>. Otherwise, the <code dir="ltr">chunk_id</code>, <code dir="ltr">start</code>, and <code dir="ltr">end</code>_<code dir="ltr">id</code> of the chunk are returned as <code dir="ltr">OUT</code> parameters. The chunk info in <code dir="ltr">DBMS_PARALLEL_EXECUTE_CHUNKS$</code> is updated as follows: <code dir="ltr">STATUS</code> becomes <code dir="ltr">ASSIGNED</code>; <code dir="ltr">START_TIMESTAMP</code> records the current time; <code dir="ltr">END_TIMESTAMP</code> is cleared.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDHCDEC">Views</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6879"></a>Syntax</p>
<pre dir="ltr">DBMS_PARALLEL_EXECUTE.GET_ROWID_CHUNK (
   task_name       IN VARCHAR2,
   chunk_id        OUT NUMBER,
   start_rowid     OUT ROWID,      
   end_id          OUT ROWID,
   any_rows        OUT BOOLEAN);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6880"></a>Parameters</p>
<div id="ARPLS67370" class="tblformal">
<p class="titleintable"><a id="sthref6881"></a><a id="sthref6882"></a>Table 107-17 GET_ROWID_CHUNK Procedure Parameters</p>
<table class="cellalignment4330" title="GET_ROWID_CHUNK Procedure Parameters" summary="This table describes the Parameters of DBMS_PARALLEL_EXECUTE.GET_ROWID_CHUNK subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t21">Parameter</th>
<th class="cellalignment4328" id="r1c2-t21">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t21" headers="r1c1-t21">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t21 r1c2-t21">
<p>Name of the task</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t21" headers="r1c1-t21">
<p><code dir="ltr">chunk_id</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t21 r1c2-t21">
<p>Chunk_id of the chunk</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t21" headers="r1c1-t21">
<p><code dir="ltr">start_rowid</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t21 r1c2-t21">
<p>Start rowid in the returned range</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t21" headers="r1c1-t21">
<p><code dir="ltr">end_id</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t21 r1c2-t21">
<p>End rowid in the returned range</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t21" headers="r1c1-t21">
<p><code dir="ltr">any_rows</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t21 r1c2-t21">
<p>Indicates that the range could include rows to process</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6883"></a>Usage Notes</p>
<p>If the task is chunked by <code dir="ltr">ROWID</code>, then use <code dir="ltr">get_rowid_range</code>. If the task is chunked by <code dir="ltr">NUMBER</code> column, then use <code dir="ltr">get_number_col_range</code>. If you make the wrong function call, the returning <code dir="ltr">chunk_id</code> and <code dir="ltr">any_rows</code> will still have valid values but <code dir="ltr">start_id</code> and <code dir="ltr">end_id</code> are <code dir="ltr">NULL</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS67371" class="refsect2"><a id="CHDEAGGC"></a>
<h3 class="refsect2"><a id="sthref6884"></a>PURGE_PROCESSED_CHUNKS Procedure</h3>
<p>This procedure deletes all the processed chunks whose status is <code dir="ltr">PROCESSED</code> or <code dir="ltr">PROCESSED_WITH_ERROR</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6885"></a>Syntax</p>
<pre dir="ltr">DBMS_PARALLEL_EXECUTE.PURGE_PROCESSED_CHUNKS (
   task_name       IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6886"></a>Parameters</p>
<div id="ARPLS67372" class="tblformal">
<p class="titleintable"><a id="sthref6887"></a><a id="sthref6888"></a>Table 107-18 PURGE_PROCESSED_CHUNKS Procedure Parameters</p>
<table class="cellalignment4330" title="PURGE_PROCESSED_CHUNKS Procedure Parameters" summary="This table describes the Parameters of DBMS_PARALLEL_EXECUTE.PURGE_PROCESSED_CHUNKS subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t22">Parameter</th>
<th class="cellalignment4328" id="r1c2-t22">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t22" headers="r1c1-t22">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t22 r1c2-t22">
<p>Name of the task</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS67373" class="refsect2"><a id="CHDBIBEC"></a>
<h3 class="refsect2"><a id="sthref6889"></a>RESUME_TASK Procedures</h3>
<p>This procedure retries the specified the task if the <a href="#CHDIBHHB">RUN_TASK Procedure</a> finished with an error, or resumes the task if a crash occurred. You can only invoke this procedure if the task is in a <code dir="ltr">CRASHED</code> or <code dir="ltr">FINISHED_WITH_ERROR</code> state. For a crashed serial execution, the state remains in processing. The <code dir="ltr">FORCE</code> option allows you to resume any task in <code dir="ltr">PROCESSING</code> state. However, it is your responsibility to determine that a crash has occurred. The procedure resumes processing the chunks which have not been processed. Also, chunks which are in <code dir="ltr">PROCESSED_WITH_ERROR</code> or <code dir="ltr">ASSIGNED</code> (due to crash) state are processed because those chunks did not commit. This procedure takes the same argument as the <a href="#CHDIBHHB">RUN_TASK Procedure</a>. The overload which takes <code dir="ltr">task_name</code> as the only input argument re-uses the arguments provided in the previous invoking of the <a href="#CHDIBHHB">RUN_TASK Procedure</a> or <a href="#CHDBIBEC">RESUME_TASK Procedures</a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDIHJHI">Table 107-2, &#34;DBMS_PARALLEL_EXECUTE Constants - Task Status Value&#34;</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6890"></a>Syntax</p>
<pre dir="ltr">DBMS_PARALLEL_EXECUTE.RESUME_TASK (
   task_name                     IN  VARCHAR2,
   sql_stmt                      IN  CLOB,   
   language_flag                 IN  NUMBER,
   edition                       IN  VARCHAR2  DEFAULT NULL,
   apply_crossedition_trigger    IN  VARCHAR2  DEFAULT NULL,
   fire_apply_trigger            IN  BOOLEAN   DEFAULT TRUE,
   parallel_level                IN  NUMBER    DEFAULT 0,
   job_class                     IN  VARCHAR2  DEFAULT &#39;DEFAULT_JOB_CLASS&#39;,
   force                         IN  BOOLEAN   DEFAULT FALSE);

DBMS_PARALLEL_EXECUTE.RESUME_TASK (
   task_name                     IN  VARCHAR2,
   force                         IN  BOOLEAN   DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6891"></a>Parameters</p>
<div id="ARPLS67374" class="tblformal">
<p class="titleintable"><a id="sthref6892"></a><a id="sthref6893"></a>Table 107-19 RESUME_TASK Procedure Parameters</p>
<table class="cellalignment4330" title="RESUME_TASK Procedure Parameters" summary="This table describes the Parameters of DBMS_PARALLEL_EXECUTE.RESUME_TASK subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t24">Parameter</th>
<th class="cellalignment4328" id="r1c2-t24">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t24" headers="r1c1-t24">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t24 r1c2-t24">
<p>Name of the task</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t24" headers="r1c1-t24">
<p><code dir="ltr">sql_stmt</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t24 r1c2-t24">
<p>SQL statement; must have <code dir="ltr">:start_id</code> and <code dir="ltr">:end_id</code> placeholders</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t24" headers="r1c1-t24">
<p><code dir="ltr">language_flag</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t24 r1c2-t24">
<p>Determines how Oracle handles the SQL statement. The following options are recognized:</p>
<ul>
<li>
<p><code dir="ltr">V6</code> (or 0) specifies version 6 behavior</p>
</li>
<li>
<p><code dir="ltr">NATIVE</code> (or 1) specifies normal behavior for the database to which the program is connected</p>
</li>
<li>
<p><code dir="ltr">V7</code> (or 2) specifies Oracle database version 7 behavior</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t24" headers="r1c1-t24">
<p><code dir="ltr">edition</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t24 r1c2-t24">
<p>Specifies the edition in which to run the statement. Default is the current edition.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t24" headers="r1c1-t24">
<p><code dir="ltr">apply_crossedition_trigger</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t24 r1c2-t24">
<p>Specifies the unqualified name of a forward crossedition trigger that is to be applied to the specified SQL. The name is resolved using the edition and <code dir="ltr">current_schema</code> setting in which the statement is to be executed. The trigger must be owned by the user who executes the statement.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t24" headers="r1c1-t24">
<p><code dir="ltr">fire_apply_trigger</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t24 r1c2-t24">
<p>Indicates whether the specified <code dir="ltr">apply_crossedition_trigger</code> is itself to be executed, or only to used as be a guide in selecting other triggers</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t24" headers="r1c1-t24">
<p><code dir="ltr">parallel_level</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t24 r1c2-t24">
<p>Number of parallel jobs; zero if run in serial; <code dir="ltr">NULL</code> uses the default parallelism</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t24" headers="r1c1-t24">
<p><code dir="ltr">job_class</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t24 r1c2-t24">
<p>If running in parallel, the jobs all belong to the specified job class</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t24" headers="r1c1-t24">
<p><code dir="ltr">force</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t24 r1c2-t24">
<p>If <code dir="ltr">TRUE</code>, do not raise an error if the status is <code dir="ltr">PROCESSING</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6894"></a>Examples</p>
<p>Suppose the chunk table contains the following chunk ranges:</p>
<pre dir="ltr">START_ID                              END_ID
---------------------------           ---------------------------
1                                     10
11                                    20
21                                    30
</pre>
<p>And the specified SQL statement is:</p>
<pre dir="ltr">UPDATE employees
      SET salary = salary + 10
      WHERE e.employee_id  BETWEEN :start_id AND :end_id
</pre>
<p>This procedure executes the following statements in parallel:</p>
<pre dir="ltr">UPDATE employees  
      SET salary =.salary + 10  WHERE employee_id BETWEEN 1 and 10; 
      COMMIT;

UPDATE employees  
      SET salary =.salary + 10  WHERE employee_id between 11 and 20;
      COMMIT;

UPDATE employees  
      SET salary =.salary + 10  WHERE employee_id between 21 and 30;
      COMMIT;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS67375" class="refsect2"><a id="CHDIBHHB"></a>
<h3 class="refsect2"><a id="sthref6895"></a>RUN_TASK Procedure</h3>
<p>This procedure executes the specified statement (<code dir="ltr">sql_stmt</code>) on the chunks in parallel. It commits after processing each chunk. The specified statement must have two placeholders called <code dir="ltr">start_id</code> and <code dir="ltr">end_id,</code> respectively, which represent the range of the chunk to be processed. The type of each placeholder must be <code dir="ltr">ROWID</code> where <code dir="ltr">ROWID</code>-based chunking was used, or <code dir="ltr">NUMBER</code> where <code dir="ltr">NUMBER</code>-based chunking was used.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6896"></a>Syntax</p>
<pre dir="ltr">DBMS_PARALLEL_EXECUTE.RUN_TASK (
   task_name                     IN  VARCHAR2,
   sql_stmt                      IN  CLOB,
   language_flag                 IN  NUMBER,
   edition                       IN  VARCHAR2  DEFAULT NULL,
   apply_crossedition_trigger    IN  VARCHAR2  DEFAULT NULL,
   fire_apply_trigger            IN  BOOLEAN   DEFAULT TRUE,
   parallel_level                IN  NUMBER    DEFAULT 0,
   job_class                     IN  VARCHAR2  DEFAULT &#39;DEFAULT_JOB_CLASS&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6897"></a>Parameters</p>
<div id="ARPLS67376" class="tblformal">
<p class="titleintable"><a id="sthref6898"></a><a id="sthref6899"></a>Table 107-20 RUN_TASK Procedure Parameters</p>
<table class="cellalignment4330" title="RUN_TASK Procedure Parameters" summary="This table describes the Parameters of DBMS_PARALLEL_EXECUTE.GET_ROWID_CHUNK subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t25">Parameter</th>
<th class="cellalignment4328" id="r1c2-t25">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t25" headers="r1c1-t25">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t25 r1c2-t25">
<p>Name of the task</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t25" headers="r1c1-t25">
<p><code dir="ltr">sql_stmt</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t25 r1c2-t25">
<p>SQL statement; must have <code dir="ltr">:start_id</code> and <code dir="ltr">:end_id</code> placeholders</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t25" headers="r1c1-t25">
<p><code dir="ltr">language_flag</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t25 r1c2-t25">
<p>Determines how Oracle handles the SQL statement. The following options are recognized:</p>
<ul>
<li>
<p><code dir="ltr">V6</code> (or 0) specifies version 6 behavior</p>
</li>
<li>
<p><code dir="ltr">NATIVE</code> (or 1) specifies normal behavior for the database to which the program is connected</p>
</li>
<li>
<p><code dir="ltr">V7</code> (or 2) specifies Oracle database version 7 behavior</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t25" headers="r1c1-t25">
<p><code dir="ltr">edition</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t25 r1c2-t25">
<p>Specifies the edition in which to run the statement. Default is the current edition.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t25" headers="r1c1-t25">
<p><code dir="ltr">apply_crossedition_trigger</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t25 r1c2-t25">
<p>Specifies the unqualified name of a forward crossedition trigger that is to be applied to the specified SQL. The name is resolved using the edition and <code dir="ltr">current_schema</code> setting in which the statement is to be executed. The trigger must be owned by the user executes the statement.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t25" headers="r1c1-t25">
<p><code dir="ltr">fire_apply_trigger</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t25 r1c2-t25">
<p>Indicates whether the specified <code dir="ltr">apply_crossedition_trigger</code> is itself to be executed, or only a guide to be used in selecting other triggers.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t25" headers="r1c1-t25">
<p><code dir="ltr">parallel_level</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t25 r1c2-t25">
<p>Number of parallel jobs; zero if run in serial; <code dir="ltr">NULL</code> uses the default parallelism.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t25" headers="r1c1-t25">
<p><code dir="ltr">job_class</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t25 r1c2-t25">
<p>If running in parallel, the jobs belong to the specified job class</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6900"></a>Usage Notes</p>
<ul>
<li>
<p>The SQL statement is executed as the current user.</p>
</li>
<li>
<p>Since this subprogram is subject to reexecution on error, you need to take great care in submitting a statement to <code dir="ltr">RUN_TASK</code> that is not idempotent.</p>
</li>
<li>
<p>Chunks can be executed in parallel by <code dir="ltr">DBMS_SCHEDULER</code> job slaves. Therefore, parallel execution requires <code dir="ltr">CREATE</code> <code dir="ltr">JOB</code> system privilege. The job slaves is created under the current user. The default number of job slaves is computed as the product of Oracle parameters <code dir="ltr">cpu_count</code> and <code dir="ltr">parallel_threads_per_cpu</code>. On a Real Application Clusters installation, the number of job slaves is the sum of individual settings on each node in the cluster. This procedure returns only when all the chunks are processed. In parallel cases, this procedure returns only when all the job slaves finished.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6901"></a>Examples</p>
<p>Suppose the chunk table contains the following chunk ranges:</p>
<pre dir="ltr">START_ID                              END_ID
---------------------------           ---------------------------
1                                     10
11                                    20
21                                    30
</pre>
<p>And the specified SQL statement is:</p>
<pre dir="ltr">UPDATE employees
      SET salary = salary + 10
      WHERE e.employee_id  BETWEEN :start_id AND :end_id
</pre>
<p>This procedure executes the following statements in parallel:</p>
<pre dir="ltr">UPDATE employees  
      SET salary =.salary + 10  WHERE employee_id BETWEEN 1 and 10; 
      COMMIT;

UPDATE employees  
      SET salary =.salary + 10  WHERE employee_id between 11 and 20;
      COMMIT;

UPDATE employees  
      SET salary =.salary + 10  WHERE employee_id between 21 and 30;
      COMMIT;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS67377" class="refsect2"><a id="CHDIJDCH"></a>
<h3 class="refsect2"><a id="sthref6902"></a>SET_CHUNK_STATUS Procedure</h3>
<p>This procedure sets the status of the chunk. The <code dir="ltr">START_TIMESTAMP</code> and <code dir="ltr">END_TIMESTAMP</code> of the chunk is updated according to the new status:</p>
<pre dir="ltr">Value of the new Status               Side Effect
---------------------------           ---------------------------
UNASSIGNED                            START_TIMESTAMP and END_TIMESTAMP 
                                      will be cleared
ASSIGNED                              START_TIMESTAMP will be the current time 
                                      and END_TIMESTAMP will be cleared.
PROCESSED or PROCESSED_WITH_ERROR     The current time will be recorded 
                                      in END_TIMESTAMP
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDHCDEC">Views</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6903"></a>Syntax</p>
<pre dir="ltr">DBMS_PARALLEL_EXECUTE.SET_CHUNK_STATUS (
   task_name       IN VARCHAR2,
   chunk_id        OUT NUMBER,
   status          IN  NUMBER,
   err_num         IN  NUMBER   DEFAULT NULL,
   err_msg         IN  VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6904"></a>Parameters</p>
<div id="ARPLS67378" class="tblformal">
<p class="titleintable"><a id="sthref6905"></a><a id="sthref6906"></a>Table 107-21 SET_CHUNK_STATUS Procedure Parameters</p>
<table class="cellalignment4330" title="SET_CHUNK_STATUS Procedure Parameters" summary="This table describes the Parameters of DBMS_PARALLEL_EXECUTE.GET_ROWID_CHUNK subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t27">Parameter</th>
<th class="cellalignment4328" id="r1c2-t27">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t27" headers="r1c1-t27">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t27 r1c2-t27">
<p>Name of the task</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t27" headers="r1c1-t27">
<p><code dir="ltr">chunk_id</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t27 r1c2-t27">
<p>Chunk_id of the chunk</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t27" headers="r1c1-t27">
<p><code dir="ltr">status</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t27 r1c2-t27">
<p>Status of the chunk: <code dir="ltr">UNASSIGNED</code>, <code dir="ltr">ASSIGNED</code>, <code dir="ltr">PROCESSED</code> <code dir="ltr">PROCESSED_WITH_ERROR</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t27" headers="r1c1-t27">
<p><code dir="ltr">err_num</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t27 r1c2-t27">
<p>Error code returned during the processing of the chunk</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t27" headers="r1c1-t27">
<p><code dir="ltr">err_msg</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t27 r1c2-t27">
<p>Error message returned during the processing of the chunk</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS67379" class="refsect2"><a id="CHDBECBG"></a>
<h3 class="refsect2"><a id="sthref6907"></a>STOP_TASK Procedure</h3>
<p>This procedure stops the task and related job slaves.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6908"></a>Syntax</p>
<pre dir="ltr">DBMS_PARALLEL_EXECUTE.STOP_TASK (
   task_name       IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6909"></a>Parameters</p>
<div id="ARPLS67380" class="tblformal">
<p class="titleintable"><a id="sthref6910"></a><a id="sthref6911"></a>Table 107-22 STOP_TASK Procedure Parameters</p>
<table class="cellalignment4330" title="STOP_TASK Procedure Parameters" summary="This table describes the Parameters of DBMS_PARALLEL_EXECUTE.STOP_TASK subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t28">Parameter</th>
<th class="cellalignment4328" id="r1c2-t28">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t28" headers="r1c1-t28">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t28 r1c2-t28">
<p>Name of the task</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS67381" class="refsect2"><a id="CHDJHFAB"></a>
<h3 class="refsect2">TASK_STATUS Procedure</h3>
<p>This procedure returns the task status.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6912"></a>Syntax</p>
<pre dir="ltr">DBMS_PARALLEL_EXECUTE.TASK_STATUS (
   task_name       IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6913"></a>Parameters</p>
<div id="ARPLS67382" class="tblformal">
<p class="titleintable"><a id="sthref6914"></a><a id="sthref6915"></a>Table 107-23 TASK_STATUS Procedure Parameters</p>
<table class="cellalignment4330" title="TASK_STATUS Procedure Parameters" summary="This table describes the Parameters of DBMS_PARALLEL_EXECUTE.TASK_STATUS subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t29">Parameter</th>
<th class="cellalignment4328" id="r1c2-t29">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t29" headers="r1c1-t29">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t29 r1c2-t29">
<p>Name of the task</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4320">
<tr>
<td class="cellalignment4329">
<table class="cellalignment4325">
<tr>
<td class="cellalignment4324"><a href="d_output.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4324"><a href="d_part.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4332">
<table class="cellalignment4323">
<tr>
<td class="cellalignment4324"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4324"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4324"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4324"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4324"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4324"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>