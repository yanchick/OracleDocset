<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-2483"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/UTL_RAW"></a><title>UTL_RAW</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1086"/>
<meta name="dcterms.created" content="2016-09-02T5:37:17Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database PL/SQL Packages and Types Reference"/>
<meta name="dcterms.identifier" content="E41829-07"/>
<meta name="dcterms.isVersionOf" content="ARPLS"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="u_nla.htm" title="Previous" type="text/html"/>
<link rel="Next" href="u_recomp.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41829-07.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">264/290</span> <!-- End Header -->
<div id="ARPLS072" class="chapter"><a id="BABJHEGF"></a>
<h1 class="chapter"><span class="secnum">260</span> UTL_RAW</h1>
<p>The <a id="sthref19347"></a><code dir="ltr">UTL_RAW</code> package provides SQL functions for manipulating <code dir="ltr">RAW</code> datatypes.</p>
<p>This chapter contains the following topics:</p>
<ul>
<li>
<p><a href="#BABFGDDG">Using UTL_RAW</a></p>
<ul>
<li>
<p>Overview</p>
</li>
<li>
<p>Operational Notes</p>
</li>
</ul>
</li>
<li>
<p><a href="#i996746">Summary of UTL_RAW Subprograms</a></p>
</li>
</ul>
<div class="refentry"><a id="BABFGDDG"></a>
<div id="ARPLS71350" class="refsect1">
<h2 class="refsect1">Using UTL_RAW</h2>
<ul>
<li>
<p><a href="#i1005946">Overview</a></p>
</li>
<li>
<p><a href="#i1005951">Operational Notes</a></p>
</li>
</ul>
<div id="ARPLS71351" class="refsect2"><a id="i1005946"></a>
<h3 class="refsect2">Overview</h3>
<p>This package is necessary because normal SQL functions do not operate on <code dir="ltr">RAWs</code>, and PL/SQL does not allow overloading between a <code dir="ltr">RAW</code> and a <code dir="ltr">CHAR</code> datatype. <code dir="ltr">UTL_RAW</code> also includes subprograms that convert various COBOL number formats to, and from, <code dir="ltr">RAWs</code>.</p>
<p><code dir="ltr">UTL_RAW</code> is not specific to the database environment, and it may actually be used in other environments. For this reason, the prefix UTL has been given to the package, instead of DBMS.</p>
</div>
<!-- class="refsect2" -->
<div id="ARPLS71352" class="refsect2"><a id="i1005951"></a>
<h3 class="refsect2">Operational Notes</h3>
<p><code dir="ltr">UTL_RAW</code> allows a <code dir="ltr">RAW</code> &#34;record&#34; to be composed of many elements. By using the <code dir="ltr">RAW</code> datatype, character set conversion will not be performed, keeping the <code dir="ltr">RAW</code> in its original format when being transferred through remote procedure calls.</p>
<p>With the <code dir="ltr">RAW</code> functions, you can manipulate binary data that was previously limited to the <code dir="ltr">hextoraw</code> and <code dir="ltr">rawtohex</code> functions.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Notes on datatypes:
<ul>
<li>
<p>The <code dir="ltr">PLS_INTEGER</code> and <code dir="ltr">BINARY_INTEGER</code> datatypes are identical. This document uses <code dir="ltr">BINARY_INTEGER</code> to indicate datatypes in reference information (such as for table types, record types, subprogram parameters, or subprogram return values), but may use either in discussion and examples.</p>
</li>
<li>
<p>The <code dir="ltr">INTEGER</code> and <code dir="ltr">NUMBER(38)</code> datatypes are also identical. This document uses <code dir="ltr">INTEGER</code> throughout.</p>
</li>
</ul>
</div>
</div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="i996746"></a>
<div id="ARPLS71353" class="refsect1">
<h2 class="refsect1">Summary of UTL_RAW Subprograms</h2>
<div id="ARPLS71354" class="tblformal">
<p class="titleintable"><a id="sthref19348"></a><a id="sthref19349"></a>Table 260-1 <span class="bolditalic">UTL_RAW Package Subprograms</span></p>
<table class="cellalignment4330" title="UTL_RAW Package Subprograms" summary="This table lists the UTL_RAW subprograms in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t3">Subprogram</th>
<th class="cellalignment4328" id="r1c2-t3">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t3" headers="r1c1-t3">
<p><a href="#i1003896">BIT_AND Function</a></p>
</td>
<td class="cellalignment4329" headers="r2c1-t3 r1c2-t3">
<p>Performs bitwise logical &#34;and&#34; of the values in <code dir="ltr">RAW</code> <code dir="ltr">r1</code> with <code dir="ltr">RAW</code> <code dir="ltr">r2</code> and returns the &#34;anded&#34; result <code dir="ltr">RAW</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t3" headers="r1c1-t3">
<p><a href="#BABGJABI">BIT_COMPLEMENT Function</a></p>
</td>
<td class="cellalignment4329" headers="r3c1-t3 r1c2-t3">
<p>Performs bitwise logical &#34;complement&#34; of the values in <code dir="ltr">RAW</code> <code dir="ltr">r</code> and returns the &#34;complement&#39;ed&#34; result <code dir="ltr">RAW</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t3" headers="r1c1-t3">
<p><a href="#i1003945">BIT_OR Function</a></p>
</td>
<td class="cellalignment4329" headers="r4c1-t3 r1c2-t3">
<p>Performs bitwise logical &#34;or&#34; of the values in <code dir="ltr">RAW</code> <code dir="ltr">r1</code> with <code dir="ltr">RAW</code> <code dir="ltr">r2</code> and returns the &#34;or&#39;d&#34; result <code dir="ltr">RAW</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t3" headers="r1c1-t3">
<p><a href="#i1003994">BIT_XOR Function</a></p>
</td>
<td class="cellalignment4329" headers="r5c1-t3 r1c2-t3">
<p>Performs bitwise logical &#34;exclusive or&#34; of the values in <code dir="ltr">RAW</code> <code dir="ltr">r1</code> with <code dir="ltr">RAW</code> <code dir="ltr">r2</code> and returns the &#34;xor&#39;d&#34; result <code dir="ltr">RAW</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t3" headers="r1c1-t3">
<p><a href="#i1004317">CAST_FROM_BINARY_DOUBLE Function</a></p>
</td>
<td class="cellalignment4329" headers="r6c1-t3 r1c2-t3">
<p>Returns the <code dir="ltr">RAW</code> binary representation of a <code dir="ltr">BINARY_DOUBLE</code> value</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t3" headers="r1c1-t3">
<p><a href="#i1004373">CAST_FROM_BINARY_FLOAT Function</a></p>
</td>
<td class="cellalignment4329" headers="r7c1-t3 r1c2-t3">
<p>Returns the <code dir="ltr">RAW</code> binary representation of a <code dir="ltr">BINARY_FLOAT</code> value</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t3" headers="r1c1-t3">
<p><a href="#i1004238">CAST_FROM_BINARY_INTEGER Function</a></p>
</td>
<td class="cellalignment4329" headers="r8c1-t3 r1c2-t3">
<p>Returns the <code dir="ltr">RAW</code> binary representation of a <code dir="ltr">BINARY_INTEGER</code> value</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t3" headers="r1c1-t3">
<p><a href="#BABBCAEG">CAST_FROM_NUMBER Function</a></p>
</td>
<td class="cellalignment4329" headers="r9c1-t3 r1c2-t3">
<p>Returns the <code dir="ltr">RAW</code> binary representation of a <code dir="ltr">NUMBER</code> value</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t3" headers="r1c1-t3">
<p><a href="#i1004636">CAST_TO_BINARY_DOUBLE Function</a></p>
</td>
<td class="cellalignment4329" headers="r10c1-t3 r1c2-t3">
<p>Casts the <code dir="ltr">RAW</code> binary representation of a <code dir="ltr">BINARY_DOUBLE</code> into a <code dir="ltr">BINARY_DOUBLE</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t3" headers="r1c1-t3">
<p><a href="#i1004637">CAST_TO_BINARY_FLOAT Function</a></p>
</td>
<td class="cellalignment4329" headers="r11c1-t3 r1c2-t3">
<p>Casts the <code dir="ltr">RAW</code> binary representation of a <code dir="ltr">BINARY_FLOAT</code> into a <code dir="ltr">BINARY_FLOAT</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t3" headers="r1c1-t3">
<p><a href="#BABGHJBD">CAST_TO_BINARY_INTEGER Function</a></p>
</td>
<td class="cellalignment4329" headers="r12c1-t3 r1c2-t3">
<p>Casts the <code dir="ltr">RAW</code> binary representation of a <code dir="ltr">BINARY_INTEGER</code> into a <code dir="ltr">BINARY_INTEGER</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t3" headers="r1c1-t3">
<p><a href="#BABJJAFB">CAST_TO_NUMBER Function</a></p>
</td>
<td class="cellalignment4329" headers="r13c1-t3 r1c2-t3">
<p>Casts the <code dir="ltr">RAW</code> binary representation of a <code dir="ltr">NUMBER</code> into a <code dir="ltr">NUMBER</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t3" headers="r1c1-t3">
<p><a href="#i1007280">CAST_TO_NVARCHAR2 Function</a></p>
</td>
<td class="cellalignment4329" headers="r14c1-t3 r1c2-t3">
<p>Converts a <code dir="ltr">RAW</code> value into a <code dir="ltr">VARCHAR2</code> value</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r15c1-t3" headers="r1c1-t3">
<p><a href="#i997085">CAST_TO_RAW Function</a></p>
</td>
<td class="cellalignment4329" headers="r15c1-t3 r1c2-t3">
<p>Converts a <code dir="ltr">VARCHAR2</code> value into a <code dir="ltr">RAW</code> value</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r16c1-t3" headers="r1c1-t3">
<p><a href="#BABJFGBH">CAST_TO_VARCHAR2 Function</a></p>
</td>
<td class="cellalignment4329" headers="r16c1-t3 r1c2-t3">
<p>Converts a RAW value into a <code dir="ltr">VARCHAR2</code> value</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r17c1-t3" headers="r1c1-t3">
<p><a href="#BABCIBGE">COMPARE Function</a></p>
</td>
<td class="cellalignment4329" headers="r17c1-t3 r1c2-t3">
<p>Compares <code dir="ltr">RAW</code> <code dir="ltr">r1</code> against <code dir="ltr">RAW</code> <code dir="ltr">r2</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r18c1-t3" headers="r1c1-t3">
<p><a href="#i997176">CONCAT Function</a></p>
</td>
<td class="cellalignment4329" headers="r18c1-t3 r1c2-t3">
<p>Concatenates up to 12 <code dir="ltr">RAWs</code> into a single <code dir="ltr">RAW</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r19c1-t3" headers="r1c1-t3">
<p><a href="#i1003765">CONVERT Function</a></p>
</td>
<td class="cellalignment4329" headers="r19c1-t3 r1c2-t3">
<p>Converts <code dir="ltr">RAW</code> <code dir="ltr">r</code> from character set <code dir="ltr">from_charset</code> to character set <code dir="ltr">to_charset</code> and returns the resulting <code dir="ltr">RAW</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r20c1-t3" headers="r1c1-t3">
<p><a href="#BABCGGCD">COPIES Function</a></p>
</td>
<td class="cellalignment4329" headers="r20c1-t3 r1c2-t3">
<p>Returns <code dir="ltr">n</code> copies of <code dir="ltr">r</code> concatenated together</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r21c1-t3" headers="r1c1-t3">
<p><a href="#BABCFHDJ">LENGTH Function</a></p>
</td>
<td class="cellalignment4329" headers="r21c1-t3 r1c2-t3">
<p>Returns the length in bytes of a <code dir="ltr">RAW</code> <code dir="ltr">r</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r22c1-t3" headers="r1c1-t3">
<p><a href="#i1003455">OVERLAY Function</a></p>
</td>
<td class="cellalignment4329" headers="r22c1-t3 r1c2-t3">
<p>Overlays the specified portion of target <code dir="ltr">RAW</code> with overlay <code dir="ltr">RAW</code>, starting from byte position <code dir="ltr">pos</code> of target and proceeding for <code dir="ltr">len</code> bytes</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r23c1-t3" headers="r1c1-t3">
<p><a href="#i1003598">REVERSE Function</a></p>
</td>
<td class="cellalignment4329" headers="r23c1-t3 r1c2-t3">
<p>Reverses a byte sequence in <code dir="ltr">RAW</code> <code dir="ltr">r</code> from end to end</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r24c1-t3" headers="r1c1-t3">
<p><a href="#BABIFIJB">SUBSTR Function</a></p>
</td>
<td class="cellalignment4329" headers="r24c1-t3 r1c2-t3">
<p>Returns <code dir="ltr">len</code> bytes, starting at <code dir="ltr">pos</code> from <code dir="ltr">RAW</code> <code dir="ltr">r</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r25c1-t3" headers="r1c1-t3">
<p><a href="#i997340">TRANSLATE Function</a></p>
</td>
<td class="cellalignment4329" headers="r25c1-t3 r1c2-t3">
<p>Translates the bytes in the input <code dir="ltr">RAW</code> <code dir="ltr">r</code> according to the bytes in the translation <code dir="ltr">RAWs</code> <code dir="ltr">from_set</code> and <code dir="ltr">to_set</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r26c1-t3" headers="r1c1-t3">
<p><a href="#i997416">TRANSLITERATE Function</a></p>
</td>
<td class="cellalignment4329" headers="r26c1-t3 r1c2-t3">
<p>Converts the bytes in the input <code dir="ltr">RAW</code> <code dir="ltr">r</code> according to the bytes in the transliteration <code dir="ltr">RAWs</code> <code dir="ltr">from_set</code> and <code dir="ltr">to_set</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r27c1-t3" headers="r1c1-t3">
<p><a href="#BABGDIIJ">XRANGE Function</a></p>
</td>
<td class="cellalignment4329" headers="r27c1-t3 r1c2-t3">
<p>Returns a <code dir="ltr">RAW</code> containing all valid 1-byte encodings in succession, beginning with the value <code dir="ltr">start_byte</code> and ending with the value <code dir="ltr">end_byte</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="ARPLS71355" class="refsect2"><a id="i1003896"></a>
<h3 class="refsect2"><a id="sthref19350"></a>BIT_AND Function</h3>
<p>This function performs bitwise logical &#34;and&#34; of the values in <code dir="ltr">RAW</code> <code dir="ltr">r1</code> with <code dir="ltr">RAW</code> <code dir="ltr">r2</code> and returns the &#34;anded&#34; result <code dir="ltr">RAW</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19351"></a>Syntax</p>
<pre dir="ltr">UTL_RAW.BIT_AND (
   r1 IN RAW,
   r2 IN RAW) 
RETURN RAW;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19352"></a>Pragmas</p>
<pre dir="ltr">pragma restrict_references(bit_and, WNDS, RNDS, WNPS, RNPS); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19353"></a>Parameters</p>
<div id="ARPLS71356" class="tblformal">
<p class="titleintable"><a id="sthref19354"></a><a id="sthref19355"></a>Table 260-2 BIT_AND Function Parameters</p>
<table class="cellalignment4330" title="BIT_AND Function Parameters " summary="This table describes the Parameters of the UTL_RAW.BIT_AND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t4">Parameter</th>
<th class="cellalignment4328" id="r1c2-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t4" headers="r1c1-t4">
<p><code dir="ltr">r1</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t4 r1c2-t4">
<p><code dir="ltr">RAW</code> to &#34;and&#34; with <code dir="ltr">r2</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t4" headers="r1c1-t4">
<p><code dir="ltr">r2</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t4 r1c2-t4">
<p><code dir="ltr">RAW</code> to &#34;and&#34; with <code dir="ltr">r1</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19356"></a>Return Values</p>
<div id="ARPLS71357" class="tblformal">
<p class="titleintable"><a id="sthref19357"></a><a id="sthref19358"></a>Table 260-3 BIT_AND Function Return Values</p>
<table class="cellalignment4330" title="BIT_AND Function Return Values " summary="This table describes Values Returned by the BIT_AND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t5">Return</th>
<th class="cellalignment4328" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t5" headers="r1c1-t5">
<p><code dir="ltr">RAW</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t5 r1c2-t5">
<p>Containing the &#34;and&#34; of <code dir="ltr">r1</code> and <code dir="ltr">r2</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t5" headers="r1c1-t5">
<p><code dir="ltr">NULL</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t5 r1c2-t5">
<p>Either <code dir="ltr">r1</code> or <code dir="ltr">r2</code> input parameter was <code dir="ltr">NULL</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19359"></a>Usage Notes</p>
<p>If <code dir="ltr">r1</code> and r2 differ in length, the and operation is terminated after the last byte of the shorter of the two <code dir="ltr">RAWs</code>, and the unprocessed portion of the longer <code dir="ltr">RAW</code> is appended to the partial result. The result length equals the longer of the two input <code dir="ltr">RAWs</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71358" class="refsect2"><a id="BABGJABI"></a>
<h3 class="refsect2"><a id="sthref19360"></a>BIT_COMPLEMENT Function</h3>
<p>This function performs bitwise logical &#34;complement&#34; of the values in <code dir="ltr">RAW</code> <code dir="ltr">r</code> and returns the complement&#39;ed result <code dir="ltr">RAW</code>. The result length equals the input <code dir="ltr">RAW</code> <code dir="ltr">r</code> length.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19361"></a>Syntax</p>
<pre dir="ltr">UTL_RAW.BIT_COMPLEMENT (
   r IN RAW) 
  RETURN RAW;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19362"></a>Pragmas</p>
<pre dir="ltr">pragma restrict_references(bit_complement, WNDS, RNDS, WNPS, RNPS); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19363"></a>Parameters</p>
<div id="ARPLS71359" class="tblformal">
<p class="titleintable"><a id="sthref19364"></a><a id="sthref19365"></a>Table 260-4 BIT_COMPLEMENT Function Parameters</p>
<table class="cellalignment4330" title="BIT_COMPLEMENT Function Parameters " summary="This table describes the Parameters of the UTL_RAW.BIT_COMPLEMENT subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t6">Parameter</th>
<th class="cellalignment4328" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t6" headers="r1c1-t6">
<p><code dir="ltr">r</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t6 r1c2-t6">
<p><code dir="ltr">RAW</code> to perform &#34;complement&#34; operation</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19366"></a>Return Values</p>
<div id="ARPLS71360" class="tblformal">
<p class="titleintable"><a id="sthref19367"></a><a id="sthref19368"></a>Table 260-5 BIT_COMPLEMENT Function Return Values</p>
<table class="cellalignment4330" title="BIT_COMPLEMENT Function Return Values " summary="This table describes Values Returned by the BIT_COMPLEMENT subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t7">Return</th>
<th class="cellalignment4328" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t7" headers="r1c1-t7">
<p><code dir="ltr">RAW</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t7 r1c2-t7">
<p>The &#34;complement&#34; of <code dir="ltr">r1</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t7" headers="r1c1-t7">
<p><code dir="ltr">NULL</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t7 r1c2-t7">
<p>If <code dir="ltr">r</code> input parameter was <code dir="ltr">NULL</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71361" class="refsect2"><a id="i1003945"></a>
<h3 class="refsect2"><a id="sthref19369"></a>BIT_OR Function</h3>
<p>This function performs bitwise logical &#34;or&#34; of the values in <code dir="ltr">RAW</code> r1 with <code dir="ltr">RAW</code> r2 and returns the or&#39;d result <code dir="ltr">RAW</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19370"></a>Syntax</p>
<pre dir="ltr">UTL_RAW.BIT_OR (
   r1 IN RAW,
   r2 IN RAW) 
  RETURN RAW;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19371"></a>Pragmas</p>
<pre dir="ltr">pragma restrict_references(bit_or, WNDS, RNDS, WNPS, RNPS); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19372"></a>Parameters</p>
<div id="ARPLS71362" class="tblformal">
<p class="titleintable"><a id="sthref19373"></a><a id="sthref19374"></a>Table 260-6 BIT_OR Function Parameters</p>
<table class="cellalignment4330" title="BIT_OR Function Parameters " summary="This table describes the Parameters of the UTL_RAW.BIT_OR subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t8">Parameters</th>
<th class="cellalignment4328" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t8" headers="r1c1-t8">
<p><code dir="ltr">r1</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t8 r1c2-t8">
<p><code dir="ltr">RAW</code> to &#34;or&#34; with <code dir="ltr">r2</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t8" headers="r1c1-t8">
<p><code dir="ltr">r2</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t8 r1c2-t8">
<p><code dir="ltr">RAW</code> to &#34;or&#34; with <code dir="ltr">r1</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19375"></a>Return Values</p>
<div id="ARPLS71363" class="tblformal">
<p class="titleintable"><a id="sthref19376"></a><a id="sthref19377"></a>Table 260-7 BIT_OR Function Return Values</p>
<table class="cellalignment4330" title="BIT_OR Function Return Values " summary="This table describes Values Returned by the BIT_OR subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t9">Return</th>
<th class="cellalignment4328" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t9" headers="r1c1-t9">
<p><code dir="ltr">RAW</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t9 r1c2-t9">
<p>Containing the &#34;or&#34; of <code dir="ltr">r1</code> and <code dir="ltr">r2</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t9" headers="r1c1-t9">
<p><code dir="ltr">NULL</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t9 r1c2-t9">
<p>Either <code dir="ltr">r1</code> or <code dir="ltr">r2</code> input parameter was <code dir="ltr">NULL</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19378"></a>Usage Notes</p>
<p>If <code dir="ltr">r1</code> and <code dir="ltr">r2</code> differ in length, then the &#34;or&#34; operation is terminated after the last byte of the shorter of the two <code dir="ltr">RAWs</code>, and the unprocessed portion of the longer <code dir="ltr">RAW</code> is appended to the partial result. The result length equals the longer of the two input <code dir="ltr">RAWs</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71364" class="refsect2"><a id="i1003994"></a>
<h3 class="refsect2"><a id="sthref19379"></a>BIT_XOR Function</h3>
<p>This function performs bitwise logical &#34;exclusive or&#34; of the values in <code dir="ltr">RAW</code> <code dir="ltr">r1</code> with <code dir="ltr">RAW</code> <code dir="ltr">r2</code> and returns the xor&#39;d result <code dir="ltr">RAW</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19380"></a>Syntax</p>
<pre dir="ltr">UTL_RAW.BIT_XOR (
   r1 IN RAW,
   r2 IN RAW) 
  RETURN RAW;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19381"></a>Pragmas</p>
<pre dir="ltr">pragma restrict_references(bit_xor, WNDS, RNDS, WNPS, RNPS); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19382"></a>Parameters</p>
<div id="ARPLS71365" class="tblformal">
<p class="titleintable"><a id="sthref19383"></a><a id="sthref19384"></a>Table 260-8 BIT_XOR Function Parameters</p>
<table class="cellalignment4330" title="BIT_XOR Function Parameters " summary="This table describes the Parameters of the UTL_RAW.BIT_XOR subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t10">Parameter</th>
<th class="cellalignment4328" id="r1c2-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t10" headers="r1c1-t10">
<p><code dir="ltr">r1</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t10 r1c2-t10">
<p><code dir="ltr">RAW</code> to &#34;xor&#34; with <code dir="ltr">r2</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t10" headers="r1c1-t10">
<p><code dir="ltr">r2</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t10 r1c2-t10">
<p><code dir="ltr">RAW</code> to &#34;xor&#34; with <code dir="ltr">r1</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19385"></a>Return Values</p>
<div id="ARPLS71366" class="tblformal">
<p class="titleintable"><a id="sthref19386"></a><a id="sthref19387"></a>Table 260-9 BIT_XOR Function Return Values</p>
<table class="cellalignment4330" title="BIT_XOR Function Return Values " summary="This table describes Values Returned by the BIT_XOR subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t11">Return</th>
<th class="cellalignment4328" id="r1c2-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t11" headers="r1c1-t11">
<p><code dir="ltr">RAW</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t11 r1c2-t11">
<p>Containing the &#34;xor&#34; of <code dir="ltr">r1</code> and <code dir="ltr">r2</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t11" headers="r1c1-t11">
<p><code dir="ltr">NULL</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t11 r1c2-t11">
<p>If either <code dir="ltr">r1</code> or <code dir="ltr">r2</code> input parameter was <code dir="ltr">NULL</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19388"></a>Usage Notes</p>
<p>If <code dir="ltr">r1</code> and <code dir="ltr">r2</code> differ in length, then the &#34;xor&#34; operation is terminated after the last byte of the shorter of the two <code dir="ltr">RAWs</code>, and the unprocessed portion of the longer <code dir="ltr">RAW</code> is appended to the partial result. The result length equals the longer of the two input <code dir="ltr">RAWs</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71367" class="refsect2"><a id="i1004317"></a>
<h3 class="refsect2"><a id="sthref19389"></a>CAST_FROM_BINARY_DOUBLE Function</h3>
<p>This function returns the <code dir="ltr">RAW</code> binary representation of a <code dir="ltr">BINARY_DOUBLE</code> value.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19390"></a>Syntax</p>
<pre dir="ltr">UTL_RAW.CAST_FROM_BINARY_DOUBLE(
   n          IN BINARY_DOUBLE,
   endianess IN PLS_INTEGER DEFAULT 1) 
RETURN RAW;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19391"></a>Pragmas</p>
<pre dir="ltr">pragma restrict_references(cast_from_binary_double, WNDS, RNDS, WNPS, RNPS);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19392"></a>Parameters</p>
<div id="ARPLS71368" class="tblformal">
<p class="titleintable"><a id="sthref19393"></a><a id="sthref19394"></a>Table 260-10 CAST_FROM_BINARY_DOUBLE Function Parameters</p>
<table class="cellalignment4330" title="CAST_FROM_BINARY_DOUBLE Function Parameters" summary="This table describes the Parameters of the UTL_RAW.CAST_FROM_BINARARY_DOUBLE subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t12">Parameter</th>
<th class="cellalignment4328" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t12" headers="r1c1-t12">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t12 r1c2-t12">
<p><code dir="ltr">BINARY_DOUBLE</code> value</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t12" headers="r1c1-t12">
<p><code dir="ltr">endianess</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t12 r1c2-t12">
<p>A <code dir="ltr">BINARY_INTEGER</code> value indicating the endianess. The function recognizes the defined constants <code dir="ltr">big_endian</code> (1), <code dir="ltr">little_endian</code> (2), and <code dir="ltr">machine_endian</code> (3). The default is <code dir="ltr">big_endian</code>. A setting of <code dir="ltr">machine_endian</code> has the same effect as <code dir="ltr">big_endian</code> on a big endian machine, or the same effect as <code dir="ltr">little_endian</code> on a little endian machine.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19395"></a>Return Values</p>
<p>The binary representation of the <code dir="ltr">BINARY_DOUBLE</code> value, or <code dir="ltr">NULL</code> if the input is <code dir="ltr">NULL</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19396"></a>Usage Notes</p>
<ul>
<li>
<p>An 8-byte <code dir="ltr">binary_double</code> value maps to the IEEE 754 double-precision format as follows:</p>
<pre dir="ltr">byte 0: bit 63 ~ bit 56
byte 1: bit 55 ~ bit 48
byte 2: bit 47 ~ bit 40
byte 3: bit 39 ~ bit 32
byte 4: bit 31 ~ bit 24
byte 5: bit 23 ~ bit 16
byte 6: bit 15 ~ bit  8
byte 7: bit  7 ~ bit  0
</pre></li>
<li>
<p>The parameter endianess describes how the bytes of <code dir="ltr">BINARY_DOUBLE</code> are mapped to the bytes of <code dir="ltr">RAW</code>. In the following matrix, rb0 ~ rb7 refer to the bytes in raw and db0 ~ db7 refer to the bytes in <code dir="ltr">BINARY_DOUBLE.</code></p>
<div class="inftblinformalwide">
<table class="cellalignment4327" title="Parameter Endianess" summary="This table describes how the parameter Endianess describes how the bytes of BINARY_DOUBLE are mapped to the bytes of RAW." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t13"><br/></th>
<th class="cellalignment4328" id="r1c2-t13">rb0</th>
<th class="cellalignment4328" id="r1c3-t13">rb1</th>
<th class="cellalignment4328" id="r1c4-t13">rb2</th>
<th class="cellalignment4328" id="r1c5-t13">rb3</th>
<th class="cellalignment4328" id="r1c6-t13">rb4</th>
<th class="cellalignment4328" id="r1c7-t13">rb5</th>
<th class="cellalignment4328" id="r1c8-t13">rb6</th>
<th class="cellalignment4328" id="r1c9-t13">rb7</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t13" headers="r1c1-t13"><span class="bold">big_endian</span></td>
<td class="cellalignment4329" headers="r2c1-t13 r1c2-t13"><code dir="ltr">db0</code></td>
<td class="cellalignment4329" headers="r2c1-t13 r1c3-t13"><code dir="ltr">db1</code></td>
<td class="cellalignment4329" headers="r2c1-t13 r1c4-t13"><code dir="ltr">db2</code></td>
<td class="cellalignment4329" headers="r2c1-t13 r1c5-t13"><code dir="ltr">db3</code></td>
<td class="cellalignment4329" headers="r2c1-t13 r1c6-t13"><code dir="ltr">db4</code></td>
<td class="cellalignment4329" headers="r2c1-t13 r1c7-t13"><code dir="ltr">db5</code></td>
<td class="cellalignment4329" headers="r2c1-t13 r1c8-t13"><code dir="ltr">db6</code></td>
<td class="cellalignment4329" headers="r2c1-t13 r1c9-t13"><code dir="ltr">db7</code></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t13" headers="r1c1-t13"><span class="bold">little_endian</span></td>
<td class="cellalignment4329" headers="r3c1-t13 r1c2-t13"><code dir="ltr">db7</code></td>
<td class="cellalignment4329" headers="r3c1-t13 r1c3-t13"><code dir="ltr">db6</code></td>
<td class="cellalignment4329" headers="r3c1-t13 r1c4-t13"><code dir="ltr">db5</code></td>
<td class="cellalignment4329" headers="r3c1-t13 r1c5-t13"><code dir="ltr">db4</code></td>
<td class="cellalignment4329" headers="r3c1-t13 r1c6-t13"><code dir="ltr">db3</code></td>
<td class="cellalignment4329" headers="r3c1-t13 r1c7-t13"><code dir="ltr">db2</code></td>
<td class="cellalignment4329" headers="r3c1-t13 r1c8-t13"><code dir="ltr">db1</code></td>
<td class="cellalignment4329" headers="r3c1-t13 r1c9-t13"><code dir="ltr">db0</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformalwide" --></li>
<li>
<p>In case of machine-endian, the 8 bytes of the <code dir="ltr">BINARY_DOUBLE</code> argument are copied straight across into the <code dir="ltr">RAW</code> return value. The effect is the same if the user has passed <code dir="ltr">big_endian</code> on a big-endian machine, or <code dir="ltr">little_endian</code> on a little-endian machine.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71369" class="refsect2"><a id="i1004373"></a>
<h3 class="refsect2"><a id="sthref19397"></a>CAST_FROM_BINARY_FLOAT Function</h3>
<p>This function returns the <code dir="ltr">RAW</code> binary representation of a <code dir="ltr">BINARY_FLOAT</code> value.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19398"></a>Syntax</p>
<pre dir="ltr">UTL_RAW.CAST_FROM_BINARY_FLOAT(
   n          IN BINARY_FLOAT,
   endianess IN PLS_INTEGER DEFAULT 1) 
RETURN RAW;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19399"></a>Pragmas</p>
<pre dir="ltr">pragma restrict_references(cast_from_binary_float, WNDS, RNDS, WNPS, RNPS);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19400"></a>Parameters</p>
<div id="ARPLS71370" class="tblformal">
<p class="titleintable"><a id="sthref19401"></a><a id="sthref19402"></a>Table 260-11 CAST_FROM_BINARY_FLOAT Function Parameters</p>
<table class="cellalignment4330" title="CAST_FROM_BINARY_FLOAT Function Parameters" summary="This table describes the Parameters of the UTL_RAW.CAST_FROM_BINARY_FLOAT subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t14">Parameter</th>
<th class="cellalignment4328" id="r1c2-t14">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t14" headers="r1c1-t14">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t14 r1c2-t14">
<p><code dir="ltr">BINARY_FLOAT</code> value</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t14" headers="r1c1-t14">
<p><code dir="ltr">endianess</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t14 r1c2-t14">
<p>A <code dir="ltr">BINARY_INTEGER</code> value indicating the endianess. The function recognizes the defined constants <code dir="ltr">big_endian</code> (1), <code dir="ltr">little_endian</code> (2), and <code dir="ltr">machine_endian</code> (3). The default is <code dir="ltr">big_endian</code>. A setting of <code dir="ltr">machine_endian</code> has the same effect as <code dir="ltr">big_endian</code> on a big endian machine, or the same effect as <code dir="ltr">little_endian</code> on a little endian machine.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19403"></a>Return Values</p>
<p>The binary representation (RAW) of the <code dir="ltr">BINARY_FLOAT</code> value, or <code dir="ltr">NULL</code> if the input is <code dir="ltr">NULL</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19404"></a>Usage Notes</p>
<ul>
<li>
<p>A 4-byte <code dir="ltr">binary_float</code> value maps to the IEEE 754 single-precision format as follows:</p>
<pre dir="ltr">byte 0: bit 31 ~ bit 24
byte 1: bit 23 ~ bit 16
byte 2: bit 15 ~ bit  8
byte 3: bit 7 ~  bit  0
</pre></li>
<li>
<p>The parameter endianess describes how the bytes of <code dir="ltr">BINARY_FLOAT</code> are mapped to the bytes of <code dir="ltr">RAW</code>. In the following matrix, rb0 ~ rb3 refer to the bytes in <code dir="ltr">RAW</code> and fb0 ~ fb3 refer to the bytes in <code dir="ltr">BINARY_FLOAT</code>.</p>
<div class="inftblinformal">
<table class="cellalignment4327" title="Parameter Endianess" summary="This table describes how the parameter Endianess describes how the bytes of BINARY_FLOAT are mapped to the bytes of RAW." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t15"><br/></th>
<th class="cellalignment4328" id="r1c2-t15">rb0</th>
<th class="cellalignment4328" id="r1c3-t15">rb1</th>
<th class="cellalignment4328" id="r1c4-t15">rb2</th>
<th class="cellalignment4328" id="r1c5-t15">rb3</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t15" headers="r1c1-t15"><span class="bold">big_endian</span></td>
<td class="cellalignment4329" headers="r2c1-t15 r1c2-t15">fb0</td>
<td class="cellalignment4329" headers="r2c1-t15 r1c3-t15">fb1</td>
<td class="cellalignment4329" headers="r2c1-t15 r1c4-t15">fb2</td>
<td class="cellalignment4329" headers="r2c1-t15 r1c5-t15">fb3</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t15" headers="r1c1-t15"><span class="bold">little_endian</span></td>
<td class="cellalignment4329" headers="r3c1-t15 r1c2-t15">fb3</td>
<td class="cellalignment4329" headers="r3c1-t15 r1c3-t15">fb2</td>
<td class="cellalignment4329" headers="r3c1-t15 r1c4-t15">fb1</td>
<td class="cellalignment4329" headers="r3c1-t15 r1c5-t15">fb0</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></li>
<li>
<p>In case of machine-endian, the 4 bytes of the <code dir="ltr">BINARY_FLOAT</code> argument are copied straight across into the <code dir="ltr">RAW</code> return value. The effect is the same if the user has passed <code dir="ltr">big_endian</code> on a big-endian machine, or <code dir="ltr">little_endian</code> on a little-endian machine.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71371" class="refsect2"><a id="i1004238"></a>
<h3 class="refsect2"><a id="sthref19405"></a>CAST_FROM_BINARY_INTEGER Function</h3>
<p>This function returns the <code dir="ltr">RAW</code> binary representation of a <code dir="ltr">BINARY_INTEGER</code> value.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19406"></a>Syntax</p>
<pre dir="ltr">UTL_RAW.CAST_FROM_BINARY_INTEGER (
   n          IN BINARY_INTEGER
   endianess  IN PLS_INTEGER DEFAULT BIG_ENDIAN) 
RETURN RAW;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19407"></a>Pragmas</p>
<pre dir="ltr">pragma restrict_references(cast_from_binary_integer, WNDS, RNDS, WNPS, RNPS);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19408"></a>Parameters</p>
<div id="ARPLS71372" class="tblformal">
<p class="titleintable"><a id="sthref19409"></a><a id="sthref19410"></a>Table 260-12 CAST_FROM_BINARY_INTEGER Function Parameters</p>
<table class="cellalignment4330" title="CAST_FROM_BINARY_INTEGER Function Parameters" summary="This table describes the Parameters of the UTL_RAW.CAST_FROM_BINARY_INTEGER subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t16">Parameter</th>
<th class="cellalignment4328" id="r1c2-t16">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t16" headers="r1c1-t16">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t16 r1c2-t16">
<p><code dir="ltr">BINARY_INTEGER</code> value.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t16" headers="r1c1-t16">
<p><code dir="ltr">endianess</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t16 r1c2-t16">
<p>A <code dir="ltr">BINARY_INTEGER</code> value indicating the endianess. The function recognizes the defined constants <code dir="ltr">big_endian</code> (1), <code dir="ltr">little_endian</code> (2), and <code dir="ltr">machine_endian</code> (3). The default is <code dir="ltr">big_endian</code>. A setting of <code dir="ltr">machine_endian</code> has the same effect as <code dir="ltr">big_endian</code> on a big endian machine, or the same effect as <code dir="ltr">little_endian</code> on a little endian machine.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19411"></a>Return Values</p>
<p>The binary representation of the <code dir="ltr">BINARY_INTEGER</code> value.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71373" class="refsect2"><a id="BABBCAEG"></a>
<h3 class="refsect2"><a id="sthref19412"></a>CAST_FROM_NUMBER Function</h3>
<p>This function returns the <code dir="ltr">RAW</code> binary representation of a <code dir="ltr">NUMBER</code> value.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19413"></a>Syntax</p>
<pre dir="ltr">UTL_RAW.CAST_FROM_NUMBER (
   n  IN NUMBER)
 RETURN RAW;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19414"></a>Pragmas</p>
<pre dir="ltr">pragma restrict_references(cast_from_number, WNDS, RNDS, WNPS, RNPS);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19415"></a>Parameters</p>
<div id="ARPLS71374" class="tblformal">
<p class="titleintable"><a id="sthref19416"></a><a id="sthref19417"></a>Table 260-13 CAST_FROM_NUMBER Function Parameters</p>
<table class="cellalignment4330" title="CAST_FROM_NUMBER Function Parameters" summary="This table describes the Parameters of the UTL_RAW.CAST_FROM_NUMBER subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t17">Parameter</th>
<th class="cellalignment4328" id="r1c2-t17">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t17" headers="r1c1-t17">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t17 r1c2-t17">
<p><code dir="ltr">NUMBER</code> value</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19418"></a>Return Values</p>
<p>The binary representation of the <code dir="ltr">NUMBER</code> value.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71375" class="refsect2"><a id="i1004636"></a>
<h3 class="refsect2"><a id="sthref19419"></a>CAST_TO_BINARY_DOUBLE Function</h3>
<p>This function casts the RAW binary representation of a <code dir="ltr">BINARY_DOUBLE</code> into a <code dir="ltr">BINARY_DOUBLE</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19420"></a>Syntax</p>
<pre dir="ltr">UTL_RAW.CAST_TO_BINARY_DOUBLE (
   r          IN RAW
   endianess  IN PLS_INTEGER DEFAULT 1) 
RETURN BINARY_DOUBLE;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19421"></a>Pragmas</p>
<pre dir="ltr">pragma restrict_references(cast_to_binary_double, WNDS, RNDS, WNPS, RNPS);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19422"></a>Parameters</p>
<div id="ARPLS71376" class="tblformal">
<p class="titleintable"><a id="sthref19423"></a><a id="sthref19424"></a>Table 260-14 CAST_TO_BINARY_DOUBLE Function Parameters</p>
<table class="cellalignment4330" title="CAST_TO_BINARY_DOUBLE Function Parameters" summary="This table describes the Parameters of the UTL_RAW.CAST_TO_BINARY_DOUBLE subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t18">Parameter</th>
<th class="cellalignment4328" id="r1c2-t18">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t18" headers="r1c1-t18">
<p><code dir="ltr">r</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t18 r1c2-t18">
<p>Binary representation of a <code dir="ltr">BINARY_DOUBLE</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t18" headers="r1c1-t18">
<p><code dir="ltr">endianess</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t18 r1c2-t18">
<p>A <code dir="ltr">PLS_INTEGER</code> representing big-endian or little-endian architecture. The default is big-endian.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19425"></a>Return Values</p>
<p>The <code dir="ltr">BINARY_DOUBLE</code> value.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19426"></a>Usage Notes</p>
<ul>
<li>
<p>If the <code dir="ltr">RAW</code> argument is more than 8 bytes, only the first 8 bytes are used and the rest of the bytes are ignored. If the result is <code dir="ltr">-0</code>, <code dir="ltr">+0</code> is returned. If the result is <code dir="ltr">NaN</code>, the value <code dir="ltr">BINARY_DOUBLE_NAN</code> is returned.</p>
</li>
<li>
<p>If the <code dir="ltr">RAW</code> argument is less than 8 bytes, a <code dir="ltr">VALUE_ERROR</code> exception is raised.</p>
</li>
<li>
<p>An 8-byte binary_double value maps to the IEEE 754 double-precision format as follows:</p>
<pre dir="ltr">byte 0: bit 63 ~ bit 56
byte 1: bit 55 ~ bit 48
byte 2: bit 47 ~ bit 40
byte 3: bit 39 ~ bit 32
byte 4: bit 31 ~ bit 24
byte 5: bit 23 ~ bit 16
byte 6: bit 15 ~ bit  8
byte 7: bit  7 ~ bit  0
</pre></li>
<li>
<p>The parameter endianess describes how the bytes of <code dir="ltr">BINARY_DOUBLE</code> are mapped to the bytes of <code dir="ltr">RAW</code>. In the following matrix, rb0 ~ rb7 refer to the bytes in raw and db0 ~ db7 refer to the bytes in <code dir="ltr">BINARY_DOUBLE.</code></p>
<div class="inftblinformalwide">
<table class="cellalignment4327" title="Parameter Endianess" summary="This table describes how the parameter Endianess describes how the bytes of BINARY_DOUBLE are mapped to the bytes of RAW." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t19"><br/></th>
<th class="cellalignment4328" id="r1c2-t19">rb0</th>
<th class="cellalignment4328" id="r1c3-t19">rb1</th>
<th class="cellalignment4328" id="r1c4-t19">rb2</th>
<th class="cellalignment4328" id="r1c5-t19">rb3</th>
<th class="cellalignment4328" id="r1c6-t19">rb4</th>
<th class="cellalignment4328" id="r1c7-t19">rb5</th>
<th class="cellalignment4328" id="r1c8-t19">rb6</th>
<th class="cellalignment4328" id="r1c9-t19">rb7</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t19" headers="r1c1-t19"><span class="bold">big_endian</span></td>
<td class="cellalignment4329" headers="r2c1-t19 r1c2-t19"><code dir="ltr">db0</code></td>
<td class="cellalignment4329" headers="r2c1-t19 r1c3-t19"><code dir="ltr">db1</code></td>
<td class="cellalignment4329" headers="r2c1-t19 r1c4-t19"><code dir="ltr">db2</code></td>
<td class="cellalignment4329" headers="r2c1-t19 r1c5-t19"><code dir="ltr">db3</code></td>
<td class="cellalignment4329" headers="r2c1-t19 r1c6-t19"><code dir="ltr">db4</code></td>
<td class="cellalignment4329" headers="r2c1-t19 r1c7-t19"><code dir="ltr">db5</code></td>
<td class="cellalignment4329" headers="r2c1-t19 r1c8-t19"><code dir="ltr">db6</code></td>
<td class="cellalignment4329" headers="r2c1-t19 r1c9-t19"><code dir="ltr">db7</code></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t19" headers="r1c1-t19"><span class="bold">little_endian</span></td>
<td class="cellalignment4329" headers="r3c1-t19 r1c2-t19"><code dir="ltr">db7</code></td>
<td class="cellalignment4329" headers="r3c1-t19 r1c3-t19"><code dir="ltr">db6</code></td>
<td class="cellalignment4329" headers="r3c1-t19 r1c4-t19"><code dir="ltr">db5</code></td>
<td class="cellalignment4329" headers="r3c1-t19 r1c5-t19"><code dir="ltr">db4</code></td>
<td class="cellalignment4329" headers="r3c1-t19 r1c6-t19"><code dir="ltr">db3</code></td>
<td class="cellalignment4329" headers="r3c1-t19 r1c7-t19"><code dir="ltr">db2</code></td>
<td class="cellalignment4329" headers="r3c1-t19 r1c8-t19"><code dir="ltr">db1</code></td>
<td class="cellalignment4329" headers="r3c1-t19 r1c9-t19"><code dir="ltr">db0</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformalwide" --></li>
<li>
<p>In case of machine-endian, the 8 bytes of the <code dir="ltr">RAW</code> argument are copied straight across into the <code dir="ltr">BINARY_DOUBLE</code> return value. The effect is the same if the user has passed <code dir="ltr">big_endian</code> on a big-endian machine, or <code dir="ltr">little_endian</code> on a little-endian machine.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71377" class="refsect2"><a id="i1004637"></a>
<h3 class="refsect2"><a id="sthref19427"></a>CAST_TO_BINARY_FLOAT Function</h3>
<p>This function casts the RAW binary representation of a <code dir="ltr">BINARY_FLOAT</code> into a <code dir="ltr">BINARY_FLOAT</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19428"></a>Syntax</p>
<pre dir="ltr">UTL_RAW.CAST_TO_BINARY_FLOAT (
   r          IN RAW
   endianess  IN PLS_INTEGER DEFAULT 1) 
RETURN BINARY_FLOAT;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19429"></a>Pragmas</p>
<pre dir="ltr">pragma restrict_references(cast_to_binary_float, WNDS, RNDS, WNPS, RNPS);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19430"></a>Parameters</p>
<div id="ARPLS71378" class="tblformal">
<p class="titleintable"><a id="sthref19431"></a><a id="sthref19432"></a>Table 260-15 CAST_TO_BINARY_FLOAT Function Parameters</p>
<table class="cellalignment4330" title="CAST_TO_BINARY_FLOAT Function Parameters" summary="This table describes the Parameters of the UTL_RAW.CAST_TO_BINARY_FLOAT subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t20">Parameter</th>
<th class="cellalignment4328" id="r1c2-t20">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t20" headers="r1c1-t20">
<p><code dir="ltr">r</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t20 r1c2-t20">
<p>Binary representation of a <code dir="ltr">BINARY_FLOAT</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t20" headers="r1c1-t20">
<p><code dir="ltr">endianess</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t20 r1c2-t20">
<p>A <code dir="ltr">PLS_INTEGER</code> representing big-endian or little-endian architecture. The default is big-endian.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19433"></a>Return Values</p>
<p>The <code dir="ltr">BINARY_FLOAT</code> value.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19434"></a>Usage Notes</p>
<ul>
<li>
<p>If the <code dir="ltr">RAW</code> argument is more than 4 bytes, only the first 4 bytes are used and the rest of the bytes are ignored. If the result is -0, +0 is returned. If the result is NaN, the value <code dir="ltr">BINARY_FLOAT_NAN</code> is returned.</p>
</li>
<li>
<p>If the <code dir="ltr">RAW</code> argument is less than 4 bytes, a <code dir="ltr">VALUE_ERROR</code> exception is raised.</p>
</li>
<li>
<p>A 4-byte <code dir="ltr">binary_float</code> value maps to the IEEE 754 single-precision format as follows:</p>
<pre dir="ltr">byte 0: bit 31 ~ bit 24
byte 1: bit 23 ~ bit 16
byte 2: bit 15 ~ bit  8
byte 3: bit 7 ~  bit  0
</pre></li>
<li>
<p>The parameter endianess describes how the bytes of <code dir="ltr">BINARY_FLOAT</code> are mapped to the bytes of <code dir="ltr">RAW</code>. In the following matrix, rb0 ~ rb3 refer to the bytes in <code dir="ltr">RAW</code> and fb0 ~ fb3 refer to the bytes in <code dir="ltr">BINARY_FLOAT</code>.</p>
<div class="inftblinformal">
<table class="cellalignment4327" title="Parameter Endianess" summary="This table describes how the parameter Endianess describes how the bytes of BINARY_FLOAT are mapped to the bytes of RAW." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t21"><br/></th>
<th class="cellalignment4328" id="r1c2-t21">rb0</th>
<th class="cellalignment4328" id="r1c3-t21">rb1</th>
<th class="cellalignment4328" id="r1c4-t21">rb2</th>
<th class="cellalignment4328" id="r1c5-t21">rb3</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t21" headers="r1c1-t21"><span class="bold">big_endian</span></td>
<td class="cellalignment4329" headers="r2c1-t21 r1c2-t21"><code dir="ltr">fbo</code></td>
<td class="cellalignment4329" headers="r2c1-t21 r1c3-t21"><code dir="ltr">fb1</code></td>
<td class="cellalignment4329" headers="r2c1-t21 r1c4-t21"><code dir="ltr">fb2</code></td>
<td class="cellalignment4329" headers="r2c1-t21 r1c5-t21"><code dir="ltr">fb3</code></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t21" headers="r1c1-t21"><span class="bold">little_endian</span></td>
<td class="cellalignment4329" headers="r3c1-t21 r1c2-t21"><code dir="ltr">fb3</code></td>
<td class="cellalignment4329" headers="r3c1-t21 r1c3-t21"><code dir="ltr">fb2</code></td>
<td class="cellalignment4329" headers="r3c1-t21 r1c4-t21"><code dir="ltr">fb1</code></td>
<td class="cellalignment4329" headers="r3c1-t21 r1c5-t21"><code dir="ltr">fb0</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></li>
<li>
<p>In case of machine-endian, the 4 bytes of the <code dir="ltr">RAW</code> argument are copied straight across into the <code dir="ltr">BINARY_FLOAT</code> return value. The effect is the same if the user has passed <code dir="ltr">big_endian</code> on a big-endian machine, or <code dir="ltr">little_endian</code> on a little-endian machine.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71379" class="refsect2"><a id="BABGHJBD"></a>
<h3 class="refsect2"><a id="sthref19435"></a>CAST_TO_BINARY_INTEGER Function</h3>
<p>This function casts the RAW binary representation of a <code dir="ltr">BINARY_INTEGER</code> into a <code dir="ltr">BINARY_INTEGER</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19436"></a>Syntax</p>
<pre dir="ltr">UTL_RAW.CAST_TO_BINARY_INTEGER (
   r          IN RAW
   endianess  IN PLS_INTEGER DEFAULT BIG_ENDIAN) 
RETURN BINARY_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19437"></a>Pragmas</p>
<pre dir="ltr">pragma restrict_references(cast_to_binary_integer, WNDS, RNDS, WNPS, RNPS);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19438"></a>Parameters</p>
<div id="ARPLS71380" class="tblformal">
<p class="titleintable"><a id="sthref19439"></a><a id="sthref19440"></a>Table 260-16 CAST_TO_BINARY_INTEGER Function Parameters</p>
<table class="cellalignment4330" title="CAST_TO_BINARY_INTEGER Function Parameters" summary="This table describes the Parameters of the UTL_RAW.CAST_TO_BINARY_INTEGER subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t22">Parameter</th>
<th class="cellalignment4328" id="r1c2-t22">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t22" headers="r1c1-t22">
<p><code dir="ltr">r</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t22 r1c2-t22">
<p>Binary representation of a <code dir="ltr">BINARY_INTEGER</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t22" headers="r1c1-t22">
<p><code dir="ltr">endianess</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t22 r1c2-t22">
<p>A <code dir="ltr">PLS_INTEGER</code> representing big-endian or little-endian architecture. The default is big-endian.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19441"></a>Return Values</p>
<p>The <code dir="ltr">BINARY_INTEGER</code> value</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71381" class="refsect2"><a id="BABJJAFB"></a>
<h3 class="refsect2"><a id="sthref19442"></a>CAST_TO_NUMBER Function</h3>
<p>This function casts the RAW binary representation of a <code dir="ltr">NUMBER</code> into a <code dir="ltr">NUMBER</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19443"></a>Syntax</p>
<pre dir="ltr">UTL_RAW.CAST_TO_NUMBER (
   r  IN RAW) 
 RETURN NUMBER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19444"></a>Pragmas</p>
<pre dir="ltr">pragma restrict_references(cast_to_number, WNDS, RNDS, WNPS, RNPS);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19445"></a>Parameters</p>
<div id="ARPLS71382" class="tblformal">
<p class="titleintable"><a id="sthref19446"></a><a id="sthref19447"></a>Table 260-17 CAST_TO_NUMBER function Parameters</p>
<table class="cellalignment4330" title="CAST_TO_NUMBER function Parameters" summary="This table describes the Parameters of the UTL_RAW.CAST_TO_NUMBER subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t23">Parameter</th>
<th class="cellalignment4328" id="r1c2-t23">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t23" headers="r1c1-t23">
<p><code dir="ltr">r</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t23 r1c2-t23">
<p>Binary representation of a <code dir="ltr">NUMBER</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19448"></a>Return Values</p>
<p>The <code dir="ltr">NUMBER</code> value.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71389" class="refsect2"><a id="i1007280"></a>
<h3 class="refsect2"><a id="sthref19449"></a>CAST_TO_NVARCHAR2 Function</h3>
<p>This function converts a <code dir="ltr">RAW</code> value represented using some number of data bytes into an <code dir="ltr">NVARCHAR2</code> value with that number of data bytes.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When casting to a <code dir="ltr">NVARCHAR2</code>, the current Globalization Support character set is used for the characters within that <code dir="ltr">NVARCHAR2</code> value.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19450"></a>Syntax</p>
<pre dir="ltr">UTL_RAW.CAST_TO_NVARCHAR2 (
   r IN RAW) 
RETURN NVARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19451"></a>Pragmas</p>
<pre dir="ltr">pragma restrict_references(cast_to_NVARCHAR2, WNDS, RNDS, WNPS, RNPS); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19452"></a>Parameters</p>
<div id="ARPLS71390" class="tblformal">
<p class="titleintable"><a id="sthref19453"></a><a id="sthref19454"></a>Table 260-18 CAST_TO_NVARCHAR2 Function Parameters</p>
<table class="cellalignment4330" title="CAST_TO_NVARCHAR2 Function Parameters " summary="This table describes the Parameters of the UTL_RAW.CAST_TO_NVARCHAR2 subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t25">Parameter</th>
<th class="cellalignment4328" id="r1c2-t25">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t25" headers="r1c1-t25">
<p><code dir="ltr">r</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t25 r1c2-t25">
<p><code dir="ltr">RAW</code> (without leading length field) to be changed to a <code dir="ltr">NVARCHAR2</code>)</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19455"></a>Return Values</p>
<div id="ARPLS71391" class="tblformal">
<p class="titleintable"><a id="sthref19456"></a><a id="sthref19457"></a>Table 260-19 CAST_TO_NVARCHAR2 Function Return Values</p>
<table class="cellalignment4330" title="CAST_TO_NVARCHAR2 Function Return Values " summary="This table describes Values Returned by the CAST_TO_NVARCHAR2 subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t26">Return</th>
<th class="cellalignment4328" id="r1c2-t26">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t26" headers="r1c1-t26">
<p><code dir="ltr">NVARCHAR2</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t26 r1c2-t26">
<p>Containing having the same data as the input <code dir="ltr">RAW</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t26" headers="r1c1-t26">
<p><code dir="ltr">NULL</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t26 r1c2-t26">
<p>If <code dir="ltr">r</code> input parameter was <code dir="ltr">NULL</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71383" class="refsect2"><a id="i997085"></a>
<h3 class="refsect2"><a id="sthref19458"></a>CAST_TO_RAW Function</h3>
<p>This function converts a <code dir="ltr">VARCHAR2</code> value represented using some number of data bytes into a <code dir="ltr">RAW</code> value with that number of data bytes. The data itself is not modified in any way, but its datatype is recast to a <code dir="ltr">RAW</code> datatype.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19459"></a>Syntax</p>
<pre dir="ltr">UTL_RAW.CAST_TO_RAW (
   c  IN VARCHAR2) 
RETURN RAW;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19460"></a>Pragmas</p>
<pre dir="ltr">pragma restrict_references(cast_to_raw, WNDS, RNDS, WNPS, RNPS); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19461"></a>Parameters</p>
<div id="ARPLS71384" class="tblformal">
<p class="titleintable"><a id="sthref19462"></a><a id="sthref19463"></a>Table 260-20 CAST_TO_RAW Function Parameters</p>
<table class="cellalignment4330" title="CAST_TO_RAW Function Parameters " summary="This table describes the Parameters of the UTL_RAW.CAST_TO_RAW subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t27">Parameter</th>
<th class="cellalignment4328" id="r1c2-t27">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t27" headers="r1c1-t27">
<p><code dir="ltr">c</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t27 r1c2-t27">
<p><code dir="ltr">VARCHAR2</code> to be changed to a <code dir="ltr">RAW</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19464"></a>Return Values</p>
<div id="ARPLS71385" class="tblformal">
<p class="titleintable"><a id="sthref19465"></a><a id="sthref19466"></a>Table 260-21 CAST_TO_RAW Function Return Values</p>
<table class="cellalignment4330" title="CAST_TO_RAW Function Return Values " summary="This table describes Values Returned by the CAST_TO_RAW subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t28">Return</th>
<th class="cellalignment4328" id="r1c2-t28">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t28" headers="r1c1-t28">
<p><code dir="ltr">RAW</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t28 r1c2-t28">
<p>Containing the same data as the input <code dir="ltr">VARCHAR2</code> and equal byte length as the input <code dir="ltr">VARCHAR2</code> and without a leading length field</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t28" headers="r1c1-t28">
<p><code dir="ltr">NULL</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t28 r1c2-t28">
<p>If <code dir="ltr">c</code> input parameter was <code dir="ltr">NULL</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71386" class="refsect2"><a id="BABJFGBH"></a>
<h3 class="refsect2"><a id="sthref19467"></a>CAST_TO_VARCHAR2 Function</h3>
<p>This function converts a <code dir="ltr">RAW</code> value represented using some number of data bytes into a <code dir="ltr">VARCHAR2</code> value with that number of data bytes.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When casting to a <code dir="ltr">VARCHAR2</code>, the current Globalization Support character set is used for the characters within that <code dir="ltr">VARCHAR2</code>.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19468"></a>Syntax</p>
<pre dir="ltr">UTL_RAW.CAST_TO_VARCHAR2 (
   r IN RAW) 
RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19469"></a>Pragmas</p>
<pre dir="ltr">pragma restrict_references(cast_to_VARCHAR2, WNDS, RNDS, WNPS, RNPS); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19470"></a>Parameters</p>
<div id="ARPLS71387" class="tblformal">
<p class="titleintable"><a id="sthref19471"></a><a id="sthref19472"></a>Table 260-22 CAST_TO_VARCHAR2 Function Parameters</p>
<table class="cellalignment4330" title="CAST_TO_VARCHAR2 Function Parameters " summary="This table describes the Parameters of the UTL_RAW.CAST_TO_VARCHAR2 subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t30">Parameter</th>
<th class="cellalignment4328" id="r1c2-t30">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t30" headers="r1c1-t30">
<p><code dir="ltr">r</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t30 r1c2-t30">
<p><code dir="ltr">RAW</code> (without leading length field) to be changed to a <code dir="ltr">VARCHAR2</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19473"></a>Return Values</p>
<div id="ARPLS71388" class="tblformal">
<p class="titleintable"><a id="sthref19474"></a><a id="sthref19475"></a>Table 260-23 CAST_TO_VARCHAR2 Function Return Values</p>
<table class="cellalignment4330" title="CAST_TO_VARCHAR2 Function Return Values " summary="This table describes Values Returned by the CAST_TO_VARCHAR2 subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t31">Return</th>
<th class="cellalignment4328" id="r1c2-t31">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t31" headers="r1c1-t31">
<p><code dir="ltr">VARCHAR2</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t31 r1c2-t31">
<p>Containing having the same data as the input <code dir="ltr">RAW</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t31" headers="r1c1-t31">
<p><code dir="ltr">NULL</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t31 r1c2-t31">
<p>If <code dir="ltr">r</code> input parameter was <code dir="ltr">NULL</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71392" class="refsect2"><a id="BABCIBGE"></a>
<h3 class="refsect2"><a id="sthref19476"></a>COMPARE Function</h3>
<p>This function compares two <code dir="ltr">RAW</code> values. If they differ in length, then the shorter is extended on the right according to the optional <code dir="ltr">pad</code> parameter.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19477"></a>Syntax</p>
<pre dir="ltr">UTL_RAW.COMPARE (
   r1  IN RAW,
   r2  IN RAW,
   pad IN RAW DEFAULT NULL) 
  RETURN NUMBER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19478"></a>Pragmas</p>
<pre dir="ltr">pragma restrict_references(compare, WNDS, RNDS, WNPS, RNPS); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19479"></a>Parameters</p>
<div id="ARPLS71393" class="tblformal">
<p class="titleintable"><a id="sthref19480"></a><a id="sthref19481"></a>Table 260-24 COMPARE Function Parameters</p>
<table class="cellalignment4330" title="COMPARE Function Parameters " summary="This table describes the Parameters of the UTL_RAW.COMPARE subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t32">Parameter</th>
<th class="cellalignment4328" id="r1c2-t32">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t32" headers="r1c1-t32">
<p><code dir="ltr">r1</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t32 r1c2-t32">
<p>1st <code dir="ltr">RAW</code> to be compared, may be <code dir="ltr">NULL</code> or 0 length</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t32" headers="r1c1-t32">
<p><code dir="ltr">r2</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t32 r1c2-t32">
<p>2nd <code dir="ltr">RAW</code> to be compared, may be <code dir="ltr">NULL</code> or 0 length</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t32" headers="r1c1-t32">
<p><code dir="ltr">pad</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t32 r1c2-t32">
<p>This is an optional parameter. Byte to extend whichever of <code dir="ltr">r1</code> or <code dir="ltr">r2</code> is shorter. The default: x&#39;00&#39;</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19482"></a>Return Values</p>
<div id="ARPLS71394" class="tblformal">
<p class="titleintable"><a id="sthref19483"></a><a id="sthref19484"></a>Table 260-25 COMPARE Function Return Values</p>
<table class="cellalignment4330" title="COMPARE Function Return Values " summary="This table describes Values Returned by the COMPARE subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t33">Return</th>
<th class="cellalignment4328" id="r1c2-t33">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t33" headers="r1c1-t33">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t33 r1c2-t33">
<p>Equals 0 if <code dir="ltr">RAW</code> byte strings are both <code dir="ltr">NULL</code> or identical; or,</p>
<p>Equals position (numbered from 1) of the first mismatched byte</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71395" class="refsect2"><a id="i997176"></a>
<h3 class="refsect2"><a id="sthref19485"></a>CONCAT Function</h3>
<p>This function concatenates up to 12 <code dir="ltr">RAWs</code> into a single <code dir="ltr">RAW</code>. If the concatenated size exceeds 32K, then an error is returned</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19486"></a>Syntax</p>
<pre dir="ltr">UTL_RAW.CONCAT (  
   r1  IN RAW DEFAULT NULL,
   r2  IN RAW DEFAULT NULL,
   r3  IN RAW DEFAULT NULL,
   r4  IN RAW DEFAULT NULL,
   r5  IN RAW DEFAULT NULL,
   r6  IN RAW DEFAULT NULL,
   r7  IN RAW DEFAULT NULL,
   r8  IN RAW DEFAULT NULL,
   r9  IN RAW DEFAULT NULL,
   r10 IN RAW DEFAULT NULL,
   r11 IN RAW DEFAULT NULL,
   r12 IN RAW DEFAULT NULL) 
  RETURN RAW;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19487"></a>Pragmas</p>
<pre dir="ltr">pragma restrict_references(concat, WNDS, RNDS, WNPS, RNPS); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19488"></a>Parameters</p>
<p><code dir="ltr">r1</code>....<code dir="ltr">r12</code> are the <code dir="ltr">RAW</code> items to concatenate.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19489"></a>Return Values</p>
<div id="ARPLS71396" class="tblformal">
<p class="titleintable"><a id="sthref19490"></a><a id="sthref19491"></a>Table 260-26 CONCAT Function Return Values</p>
<table class="cellalignment4330" title="CONCAT Function Return Values " summary="This table describes the Parameters of the UTL_RAW.CONCAT subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t34">Return</th>
<th class="cellalignment4328" id="r1c2-t34">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t34" headers="r1c1-t34">
<p><code dir="ltr">RAW</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t34 r1c2-t34">
<p>Containing the items concatenated</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19492"></a>Exceptions</p>
<p>There is an error if the sum of the lengths of the inputs exceeds the maximum allowable length for a <code dir="ltr">RAW</code>, which is 32767 bytes.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71397" class="refsect2"><a id="i1003765"></a>
<h3 class="refsect2"><a id="sthref19493"></a>CONVERT Function</h3>
<p>This function converts <code dir="ltr">RAW</code> <code dir="ltr">r</code> from character set <code dir="ltr">from_charset</code> to character set <code dir="ltr">to_charset</code> and returns the resulting <code dir="ltr">RAW</code>.</p>
<p>Both <code dir="ltr">from_charset</code> and <code dir="ltr">to_charset</code> must be supported character sets defined to the Oracle server.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19494"></a>Syntax</p>
<pre dir="ltr">UTL_RAW.CONVERT (
   r            IN RAW,
   to_charset   IN VARCHAR2,
   from_charset IN VARCHAR2) 
  RETURN RAW;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19495"></a>Pragmas</p>
<pre dir="ltr">pragma restrict_references(convert, WNDS, RNDS, WNPS, RNPS);  
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19496"></a>Parameters</p>
<div id="ARPLS71398" class="tblformal">
<p class="titleintable"><a id="sthref19497"></a><a id="sthref19498"></a>Table 260-27 CONVERT Function Parameters</p>
<table class="cellalignment4330" title="CONVERT Function Parameters " summary="This table describes the Parameters of the UTL_RAW.CONVERT subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t35">Parameter</th>
<th class="cellalignment4328" id="r1c2-t35">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t35" headers="r1c1-t35">
<p><code dir="ltr">r</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t35 r1c2-t35">
<p><code dir="ltr">RAW</code> byte-string to be converted</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t35" headers="r1c1-t35">
<p><code dir="ltr">to_charset</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t35 r1c2-t35">
<p>Name of the character set to which <code dir="ltr">r</code> is converted</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t35" headers="r1c1-t35">
<p><code dir="ltr">from_charset</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t35 r1c2-t35">
<p>Name of the character set in which <code dir="ltr">r</code> is supplied</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19499"></a>Return Values</p>
<div id="ARPLS71399" class="tblformal">
<p class="titleintable"><a id="sthref19500"></a><a id="sthref19501"></a>Table 260-28 CONVERT Function Return Values</p>
<table class="cellalignment4330" title="CONVERT Function Return Values " summary="This table describes Values Returned by the CONVERT subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t36">Return</th>
<th class="cellalignment4328" id="r1c2-t36">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t36" headers="r1c1-t36">
<p><code dir="ltr">RAW</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t36 r1c2-t36">
<p>Byte string <code dir="ltr">r</code> converted according to the specified character sets.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19502"></a>Exceptions</p>
<div id="ARPLS71400" class="tblformal">
<p class="titleintable"><a id="sthref19503"></a><a id="sthref19504"></a>Table 260-29 CONVERT Function Exceptions</p>
<table class="cellalignment4330" title="CONVERT Function Exceptions " summary="This table describes Exceptions raised by the CONVERT subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t37">Error</th>
<th class="cellalignment4328" id="r1c2-t37">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t37" headers="r1c1-t37">
<p><code dir="ltr">ORA-06502</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t37 r1c2-t37">
<p>PL/SQL: numeric or value error</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t37" headers="r1c1-t37">
<p><code dir="ltr">ORA-12703</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t37 r1c2-t37">
<p>This character set conversion is not supported</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t37" headers="r1c1-t37">
<p><code dir="ltr">ORA-12705</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t37 r1c2-t37">
<p>Cannot access NLS data files or invalid environment specified</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19505"></a>Usage Notes</p>
<ul>
<li>
<p>The NLS_LANG parameter form <span class="italic">language_territory.character set</span> is also accepted for <code dir="ltr">to_charset</code> and <code dir="ltr">from_charset</code>. However, this form is deprecated and should be avoided. Note that <span class="italic">language</span> and <span class="italic">territory</span> are ignored by this subprogram.</p>
</li>
<li>
<p>The converted value is silently truncated if it exceeds the maximum length of a <code dir="ltr">RAW</code> value, which is 32767 bytes. Do not convert values longer than floor(32767/4) = 8191 bytes if you want to avoid this truncation for all possible combinations of <code dir="ltr">to_charset</code> and <code dir="ltr">from_charset</code>. You can use the maximum character width of the target character set <code dir="ltr">to_charset</code>, if known, to expand the limit to a less pessimistic value. For example, if the target character set is ZHS16GBK, the maximum safe source string length is floor(32767/2) = 16383 bytes. For single-byte target character sets, no truncation is ever necessary.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71401" class="refsect2"><a id="BABCGGCD"></a>
<h3 class="refsect2"><a id="sthref19506"></a>COPIES Function</h3>
<p>This function returns <code dir="ltr">n</code> copies of <code dir="ltr">r</code> concatenated together.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19507"></a>Syntax</p>
<pre dir="ltr">UTL_RAW.COPIES (
   r IN RAW,
   n IN NUMBER) 
  RETURN RAW;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19508"></a>Pragmas</p>
<pre dir="ltr">pragma restrict_references(copies, WNDS, RNDS, WNPS, RNPS); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19509"></a>Parameters</p>
<div id="ARPLS71402" class="tblformal">
<p class="titleintable"><a id="sthref19510"></a><a id="sthref19511"></a>Table 260-30 COPIES Function Parameters</p>
<table class="cellalignment4330" title="COPIES Function Parameters " summary="This table describes the Parameters of the UTL_RAW.COPIES subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t38">Parameters</th>
<th class="cellalignment4328" id="r1c2-t38">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t38" headers="r1c1-t38">
<p><code dir="ltr">r</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t38 r1c2-t38">
<p><code dir="ltr">RAW</code> to be copied</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t38" headers="r1c1-t38">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t38 r1c2-t38">
<p>Number of times to copy the <code dir="ltr">RAW</code> (must be positive)</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19512"></a>Return Values</p>
<p>This returns the <code dir="ltr">RAW</code> copied <code dir="ltr">n</code> times.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19513"></a>Exceptions</p>
<div id="ARPLS71403" class="tblformal">
<p class="titleintable"><a id="sthref19514"></a><a id="sthref19515"></a>Table 260-31 COPIES Function Exceptions</p>
<table class="cellalignment4330" title="COPIES Function Exceptions " summary="This table describes Exceptions raised by the COPIES subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t39">Error</th>
<th class="cellalignment4328" id="r1c2-t39">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t39" headers="r1c1-t39">
<p><code dir="ltr">VALUE_ERROR</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t39 r1c2-t39">
<p>Either:</p>
<p>- <code dir="ltr">r</code> is missing, <code dir="ltr">NULL</code> or 0 length</p>
<p>- <code dir="ltr">n</code> &lt; 1</p>
<p>- Length of result exceeds maximum length of a <code dir="ltr">RAW</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71404" class="refsect2"><a id="BABCFHDJ"></a>
<h3 class="refsect2"><a id="sthref19516"></a>LENGTH Function</h3>
<p>This function returns the length in bytes of a <code dir="ltr">RAW</code> <code dir="ltr">r</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19517"></a>Syntax</p>
<pre dir="ltr">UTL_RAW.LENGTH (
   r  IN RAW) 
RETURN NUMBER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19518"></a>Pragmas</p>
<pre dir="ltr">pragma restrict_references(length, WNDS, RNDS, WNPS, RNPS); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19519"></a>Parameters</p>
<div id="ARPLS71405" class="tblformal">
<p class="titleintable"><a id="sthref19520"></a><a id="sthref19521"></a>Table 260-32 LENGTH Function Parameters</p>
<table class="cellalignment4330" title="LENGTH Function Parameters " summary="This table describes the Parameters of the UTL_RAW.LENGTH subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t40">Parameter</th>
<th class="cellalignment4328" id="r1c2-t40">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t40" headers="r1c1-t40">
<p><code dir="ltr">r</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t40 r1c2-t40">
<p><code dir="ltr">RAW</code> byte stream to be measured</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19522"></a>Return Values</p>
<div id="ARPLS71406" class="tblformal">
<p class="titleintable"><a id="sthref19523"></a><a id="sthref19524"></a>Table 260-33 LENGTH Function Return Values</p>
<table class="cellalignment4330" title="LENGTH Function Return Values " summary="This table describes Values Returned by the LENGTH subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t41">Return</th>
<th class="cellalignment4328" id="r1c2-t41">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t41" headers="r1c1-t41">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t41 r1c2-t41">
<p>Current length of the <code dir="ltr">RAW</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71407" class="refsect2"><a id="i1003455"></a>
<h3 class="refsect2"><a id="sthref19525"></a>OVERLAY Function</h3>
<p>This function overlays the specified portion of target <code dir="ltr">RAW</code> with <code dir="ltr">overlay_str</code> <code dir="ltr">RAW</code>, starting from byte position <code dir="ltr">pos</code> of <code dir="ltr">target</code> and proceeding for <code dir="ltr">len</code> bytes.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19526"></a>Syntax</p>
<pre dir="ltr">UTL_RAW.OVERLAY (
   overlay_str IN RAW,
   target      IN RAW,
   pos         IN BINARY_INTEGER DEFAULT 1,
   len         IN BINARY_INTEGER DEFAULT NULL,
   pad         IN RAW            DEFAULT NULL) 
  RETURN RAW;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19527"></a>Pragmas</p>
<pre dir="ltr">pragma restrict_references(overlay, WNDS, RNDS, WNPS, RNPS); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19528"></a>Parameters</p>
<div id="ARPLS71408" class="tblformal">
<p class="titleintable"><a id="sthref19529"></a><a id="sthref19530"></a>Table 260-34 OVERLAY Function Parameters</p>
<table class="cellalignment4330" title="OVERLAY Function Parameters " summary="This table describes the Parameters of the UTL_RAW.OVERLAY subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t42">Parameters</th>
<th class="cellalignment4328" id="r1c2-t42">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t42" headers="r1c1-t42">
<p><code dir="ltr">overlay_str</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t42 r1c2-t42">
<p>Byte-string used to overlay target</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t42" headers="r1c1-t42">
<p><code dir="ltr">target</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t42 r1c2-t42">
<p>Byte-string which is to be overlaid</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t42" headers="r1c1-t42">
<p><code dir="ltr">pos</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t42 r1c2-t42">
<p>Position in target (numbered from 1) to start overlay</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t42" headers="r1c1-t42">
<p><code dir="ltr">len</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t42 r1c2-t42">
<p>The number of target bytes to overlay</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t42" headers="r1c1-t42">
<p><code dir="ltr">pad</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t42 r1c2-t42">
<p>Pad byte used when overlay <code dir="ltr">len</code> exceeds <code dir="ltr">overlay_str</code> length or <code dir="ltr">pos</code> exceeds <code dir="ltr">target</code> length</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19531"></a>Defaults and Optional Parameters</p>
<div id="ARPLS71409" class="tblformal">
<p class="titleintable"><a id="sthref19532"></a><a id="sthref19533"></a>Table 260-35 OVERLAY Function Optional Parameters</p>
<table class="cellalignment4330" title="OVERLAY Function Optional Parameters " summary="This table describes Defaults and Optional Parameters used by the OVERLAY subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t43">Optional Parameter</th>
<th class="cellalignment4328" id="r1c2-t43">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t43" headers="r1c1-t43">
<p><code dir="ltr">pos</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t43 r1c2-t43">
<p>1</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t43" headers="r1c1-t43">
<p><code dir="ltr">len</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t43 r1c2-t43">
<p>To the length of <code dir="ltr">overlay_str</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t43" headers="r1c1-t43">
<p><code dir="ltr">pad</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t43 r1c2-t43">
<p>x&#39;00&#39;</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19534"></a>Return Values</p>
<div id="ARPLS71410" class="tblformal">
<p class="titleintable"><a id="sthref19535"></a><a id="sthref19536"></a>Table 260-36 OVERLAY Function Return Values</p>
<table class="cellalignment4330" title="OVERLAY Function Return Values " summary="This table describes Values Returned by the OVERLAY subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t44">Return</th>
<th class="cellalignment4328" id="r1c2-t44">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t44" headers="r1c1-t44">
<p><code dir="ltr">RAW</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t44 r1c2-t44">
<p>The target <code dir="ltr">byte_string</code> overlaid as specified.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19537"></a>Usage Notes</p>
<p>If <code dir="ltr">overlay_str</code> has less than <code dir="ltr">len</code> bytes, then it is extended to <code dir="ltr">len</code> bytes using the <code dir="ltr">pad</code> byte. If <code dir="ltr">overlay_str</code> exceeds <code dir="ltr">len</code> bytes, then the extra bytes in <code dir="ltr">overlay_str</code> are ignored. If <code dir="ltr">len</code> bytes beginning at position <code dir="ltr">pos</code> of <code dir="ltr">target</code> exceeds the length of <code dir="ltr">target</code>, then <code dir="ltr">target</code> is extended to contain the entire length of <code dir="ltr">overlay_str</code>.</p>
<p><code dir="ltr">If</code> <code dir="ltr">len</code> is specified, it must be greater than or equal to <code dir="ltr">0</code>. If <code dir="ltr">pos</code> is specified, it must be greater than or equal to <code dir="ltr">1</code>. If <code dir="ltr">pos</code> exceeds the length of <code dir="ltr">target</code>, then <code dir="ltr">target</code> is padded with <code dir="ltr">pad</code> bytes to position <code dir="ltr">pos</code>, and <code dir="ltr">target</code> is further extended with <code dir="ltr">overlay_str</code> bytes.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19538"></a>Exceptions</p>
<div id="ARPLS71411" class="tblformal">
<p class="titleintable"><a id="sthref19539"></a><a id="sthref19540"></a>Table 260-37 OVERLAY Function Exceptions</p>
<table class="cellalignment4330" title="OVERLAY Function Exceptions " summary="This table describes Exceptions raised by the OVERLAY subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t45">Error</th>
<th class="cellalignment4328" id="r1c2-t45">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t45" headers="r1c1-t45">
<p><code dir="ltr">VALUE_ERROR</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t45 r1c2-t45">
<p>Either:</p>
<p>- <code dir="ltr">Overlay_str</code> is <code dir="ltr">NULL</code> or has 0 length</p>
<p>- Target is missing or undefined</p>
<p>- Length of target exceeds maximum length of a <code dir="ltr">RAW</code></p>
<p>- <code dir="ltr">len</code> &lt; 0</p>
<p>- <code dir="ltr">pos</code> &lt; 1</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71412" class="refsect2"><a id="i1003598"></a>
<h3 class="refsect2"><a id="sthref19541"></a>REVERSE Function</h3>
<p>This function reverses a byte sequence in <code dir="ltr">RAW</code> <code dir="ltr">r</code> from end to end. For example, x&#39;0102F3&#39; would be reversed to x&#39;F30201&#39;, and &#39;xyz&#39; would be reversed to &#39;zyx&#39;.The result length is the same as the input <code dir="ltr">RAW</code> length.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19542"></a>Syntax</p>
<pre dir="ltr">UTL_RAW.REVERSE (
   r IN RAW) 
  RETURN RAW;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19543"></a>Pragmas</p>
<pre dir="ltr">pragma restrict_references(reverse, WNDS, RNDS, WNPS, RNPS); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19544"></a>Parameters</p>
<div id="ARPLS71413" class="tblformal">
<p class="titleintable"><a id="sthref19545"></a><a id="sthref19546"></a>Table 260-38 REVERSE Function Parameters</p>
<table class="cellalignment4330" title="REVERSE Function Parameters " summary="This table describes the Parameters of the UTL_RAW.REVERSE subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t46">Parameter</th>
<th class="cellalignment4328" id="r1c2-t46">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t46" headers="r1c1-t46">
<p><code dir="ltr">r</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t46 r1c2-t46">
<p><code dir="ltr">RAW</code> to reverse</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19547"></a>Return Values</p>
<div id="ARPLS71414" class="tblformal">
<p class="titleintable"><a id="sthref19548"></a><a id="sthref19549"></a>Table 260-39 REVERSE Function Return Values</p>
<table class="cellalignment4330" title="REVERSE Function Return Values " summary="This table describes Values Returned by the REVERSE subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t47">Return</th>
<th class="cellalignment4328" id="r1c2-t47">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t47" headers="r1c1-t47">
<p><code dir="ltr">RAW</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t47 r1c2-t47">
<p>Containing the &#34;reverse&#34; of <code dir="ltr">r</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19550"></a>Exceptions</p>
<div id="ARPLS71415" class="tblformal">
<p class="titleintable"><a id="sthref19551"></a><a id="sthref19552"></a>Table 260-40 REVERSE Function Exceptions</p>
<table class="cellalignment4330" title="REVERSE Function Exceptions " summary="This table describes Exceptions raised by the REVERSE subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t48">Error</th>
<th class="cellalignment4328" id="r1c2-t48">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t48" headers="r1c1-t48">
<p><code dir="ltr">VALUE_ERROR</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t48 r1c2-t48">
<p><code dir="ltr">R</code> is <code dir="ltr">NULL</code> or has 0 length</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71416" class="refsect2"><a id="BABIFIJB"></a>
<h3 class="refsect2"><a id="sthref19553"></a>SUBSTR Function</h3>
<p>This function returns <code dir="ltr">len</code> bytes, starting at <code dir="ltr">pos</code> from <code dir="ltr">RAW</code> <code dir="ltr">r</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19554"></a>Syntax</p>
<pre dir="ltr">UTL_RAW.SUBSTR (
   r   IN RAW,
   pos IN BINARY_INTEGER,
   len IN BINARY_INTEGER DEFAULT NULL) 
  RETURN RAW;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19555"></a>Pragmas</p>
<pre dir="ltr">pragma restrict_references(substr, WNDS, RNDS, WNPS, RNPS); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19556"></a>Parameters</p>
<div id="ARPLS71417" class="tblformal">
<p class="titleintable"><a id="sthref19557"></a><a id="sthref19558"></a>Table 260-41 SUBSTR Function Parameters</p>
<table class="cellalignment4330" title="SUBSTR Function Parameters " summary="This table describes the Parameters of the UTL_RAW.SUBSTR subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t49">Parameter</th>
<th class="cellalignment4328" id="r1c2-t49">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t49" headers="r1c1-t49">
<p><code dir="ltr">r</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t49 r1c2-t49">
<p><code dir="ltr">RAW</code> byte-string from which a portion is extracted</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t49" headers="r1c1-t49">
<p><code dir="ltr">pos</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t49 r1c2-t49">
<p>Byte position in <code dir="ltr">r</code> at which to begin extraction</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t49" headers="r1c1-t49">
<p><code dir="ltr">len</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t49 r1c2-t49">
<p>Number of bytes from <code dir="ltr">pos</code> to extract from <code dir="ltr">r</code> (optional)</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19559"></a>Defaults and Optional Parameters</p>
<div id="ARPLS71418" class="tblformal">
<p class="titleintable"><a id="sthref19560"></a><a id="sthref19561"></a>Table 260-42 SUBSTR Function Optional Parameter</p>
<table class="cellalignment4330" title="SUBSTR Function Optional Parameter " summary="This table describes Default and Optional Parameters used by the SUBSTR subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t50">Optional Parameter</th>
<th class="cellalignment4328" id="r1c2-t50">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t50" headers="r1c1-t50">
<p><code dir="ltr">len</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t50 r1c2-t50">
<p>Position <code dir="ltr">pos</code> through to the end of <code dir="ltr">r</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19562"></a>Return Values</p>
<div id="ARPLS71419" class="tblformal">
<p class="titleintable"><a id="sthref19563"></a><a id="sthref19564"></a>Table 260-43 SUBSTR Function Return Values</p>
<table class="cellalignment4330" title="SUBSTR Function Return Values " summary="This table describes Values Returned by the SUBSTR subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t51">Return</th>
<th class="cellalignment4328" id="r1c2-t51">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t51" headers="r1c1-t51">
<p><code dir="ltr">portion of r</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t51 r1c2-t51">
<p>Beginning at <code dir="ltr">pos</code> for <code dir="ltr">len</code> bytes long</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t51" headers="r1c1-t51">
<p><code dir="ltr">NULL</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t51 r1c2-t51">
<p><code dir="ltr">r</code> input parameter was <code dir="ltr">NULL</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19565"></a>Usage Notes</p>
<ul>
<li>
<p>If <code dir="ltr">pos</code> is positive, then <code dir="ltr">SUBSTR</code> counts from the beginning of <code dir="ltr">r</code> to find the first byte. If <code dir="ltr">pos</code> is negative, then <code dir="ltr">SUBSTR</code> counts backward from the end of the <code dir="ltr">r</code>. The value <code dir="ltr">pos</code> cannot be 0.</p>
</li>
<li>
<p>If <code dir="ltr">len</code> is omitted, then <code dir="ltr">SUBSTR</code> returns all bytes to the end of <code dir="ltr">r</code>. The value <code dir="ltr">len</code> cannot be less than 1.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19566"></a>Exceptions</p>
<div id="ARPLS71420" class="tblformal">
<p class="titleintable"><a id="sthref19567"></a><a id="sthref19568"></a>Table 260-44 SUBSTR Function Exceptions</p>
<table class="cellalignment4330" title="SUBSTR Function Exceptions " summary="This table describes Exceptions raised by the SUBSTR subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t52">Error</th>
<th class="cellalignment4328" id="r1c2-t52">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t52" headers="r1c1-t52">
<p><code dir="ltr">VALUE_ERROR</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t52 r1c2-t52">
<p><code dir="ltr">VALUE_ERROR</code> is returned if:</p>
<ul>
<li>
<p>pos = 0 or &gt; length of <code dir="ltr">r</code></p>
</li>
<li>
<p>len &lt; 1 or &gt; length of <code dir="ltr">r</code> - (pos-1)</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71421" class="refsect2"><a id="i997340"></a>
<h3 class="refsect2"><a id="sthref19569"></a>TRANSLATE Function</h3>
<p>This function translates the bytes in the input <code dir="ltr">RAW</code> <code dir="ltr">r</code> according to the bytes in the translation <code dir="ltr">RAWs</code> <code dir="ltr">from_set</code> and <code dir="ltr">to_set</code>. If a byte in <code dir="ltr">r</code> has a matching byte in <code dir="ltr">from_set</code>, then it is replaced by the byte in the corresponding position in <code dir="ltr">to_set</code>, or deleted.</p>
<p>Bytes in <code dir="ltr">r</code>, but undefined in <code dir="ltr">from_set</code>, are copied to the result. Only the first (leftmost) occurrence of a byte in <code dir="ltr">from_set</code> is used. Subsequent duplicates are not scanned and are ignored.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19570"></a>Syntax</p>
<pre dir="ltr">UTL_RAW.TRANSLATE (
   r        IN RAW,
   from_set IN RAW,
   to_set   IN RAW) 
  RETURN RAW;
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
Be aware that <code dir="ltr"><span class="codeinlineitalic">to_set</span></code> and <code dir="ltr"><span class="codeinlineitalic">from_set</span></code> are reversed in the calling sequence compared to <code dir="ltr">TRANSLITERATE</code>.</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19571"></a>Pragmas</p>
<pre dir="ltr">pragma restrict_references(translate, WNDS, RNDS, WNPS, RNPS); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19572"></a>Parameters</p>
<div id="ARPLS71422" class="tblformal">
<p class="titleintable"><a id="sthref19573"></a><a id="sthref19574"></a>Table 260-45 TRANSLATE Function Parameters</p>
<table class="cellalignment4330" title="TRANSLATE Function Parameters " summary="This table describes the Parameters of the UTL_RAW.TRANSLATE subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t54">Parameter</th>
<th class="cellalignment4328" id="r1c2-t54">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t54" headers="r1c1-t54">
<p><code dir="ltr">r</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t54 r1c2-t54">
<p><code dir="ltr">RAW</code> source byte-string to be translated</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t54" headers="r1c1-t54">
<p><code dir="ltr">from_set</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t54 r1c2-t54">
<p><code dir="ltr">RAW</code> byte-codes to be translated, if present in <code dir="ltr">r</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t54" headers="r1c1-t54">
<p><code dir="ltr">to_set</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t54 r1c2-t54">
<p><code dir="ltr">RAW</code> byte-codes to which corresponding <code dir="ltr">from_str</code> bytes are translated</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19575"></a>Return Values</p>
<div id="ARPLS71423" class="tblformal">
<p class="titleintable"><a id="sthref19576"></a><a id="sthref19577"></a>Table 260-46 TRANSLATE Function Return Values</p>
<table class="cellalignment4330" title="TRANSLATE Function Return Values " summary="This table describes Values Returned by the TRANSLATE subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t55">Return</th>
<th class="cellalignment4328" id="r1c2-t55">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t55" headers="r1c1-t55">
<p><code dir="ltr">RAW</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t55 r1c2-t55">
<p>Translated byte-string</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19578"></a>Usage Notes</p>
<ul>
<li>
<p>If <code dir="ltr">to_set</code> is shorter than <code dir="ltr">from_set</code>, the extra <code dir="ltr">from_set</code> bytes have no corresponding translation bytes. Bytes from the input <code dir="ltr">RAW</code> that match any such <code dir="ltr">from_set</code> bytes are not translated or included in the result. They are effectively translated to <code dir="ltr">NULL</code>.</p>
</li>
<li>
<p>If <code dir="ltr">to_set</code> is longer than <code dir="ltr">from_set</code>, the extra <code dir="ltr">to_set</code> bytes are ignored.</p>
</li>
<li>
<p>If a byte value is repeated in <code dir="ltr">from_set</code>, the repeated occurrence is ignored.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
Differences from the <a href="#i997416">TRANSLITERATE Function</a>:
<ul>
<li>
<p>The <code dir="ltr">from_set</code> parameter comes before the <code dir="ltr">to_set</code> parameter in the calling sequence.</p>
</li>
<li>
<p>Bytes from <code dir="ltr">r</code> that appear in <code dir="ltr">from_set</code> but have no corresponding values in <code dir="ltr">to_set</code> are not translated or included in the result.</p>
</li>
<li>
<p>The resulting <code dir="ltr">RAW</code> value may be shorter than the input <code dir="ltr">RAW</code> value.</p>
</li>
</ul>
<p>Note that <code dir="ltr">TRANSLATE</code> and <code dir="ltr">TRANSLITERATE</code> only differ in functionality when <code dir="ltr">to_set</code> has fewer bytes than <code dir="ltr">from_set</code>.</p>
</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19579"></a>Exceptions</p>
<div id="ARPLS71424" class="tblformal">
<p class="titleintable"><a id="sthref19580"></a><a id="sthref19581"></a>Table 260-47 TRANSLATE Function Exceptions</p>
<table class="cellalignment4330" title="TRANSLATE Function Exceptions " summary="This table describes Exceptions raised by the TRANSLATE subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t57">Error</th>
<th class="cellalignment4328" id="r1c2-t57">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t57" headers="r1c1-t57">
<p><code dir="ltr">VALUE_ERROR</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t57 r1c2-t57">
<p>Either:</p>
<p>- <code dir="ltr">r</code> is <code dir="ltr">NULL</code> or has 0 length</p>
<p>- <code dir="ltr">from_set</code> is <code dir="ltr">NULL</code> or has 0 length</p>
<p>- <code dir="ltr">to_set</code> is <code dir="ltr">NULL</code> or has 0 length</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71425" class="refsect2"><a id="i997416"></a>
<h3 class="refsect2"><a id="sthref19582"></a>TRANSLITERATE Function</h3>
<p>This function converts the bytes in the input <code dir="ltr">RAW</code> <code dir="ltr">r</code> according to the bytes in the transliteration <code dir="ltr">RAWs</code> <code dir="ltr">from_set</code> and <code dir="ltr">to_set</code>. Successive bytes in <code dir="ltr">r</code> are looked up in the <code dir="ltr">from_set</code>, and, if not found, copied unaltered to the result <code dir="ltr">RAW</code>. If found, then they are replaced in the result <code dir="ltr">RAW</code> by either corresponding bytes in the <code dir="ltr">to_set</code>, or the <code dir="ltr">pad</code> byte when no correspondence exists.</p>
<p>Bytes in <code dir="ltr">r</code>, but undefined in <code dir="ltr">from_set</code>, are copied to the result. Only the first (leftmost) occurrence of a byte in <code dir="ltr">from_set</code> is used. Subsequent duplicates are not scanned and are ignored. The result <code dir="ltr">RAW</code> is always the same length as <code dir="ltr">r</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19583"></a>Syntax</p>
<pre dir="ltr">UTL_RAW.TRANSLITERATE (
   r        IN RAW,
   to_set   IN RAW DEFAULT NULL,
   from_set IN RAW DEFAULT NULL,
   pad      IN RAW DEFAULT NULL)
  RETURN RAW;
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
Be aware that <code dir="ltr"><span class="codeinlineitalic">to_set</span></code> and <code dir="ltr"><span class="codeinlineitalic">from_set</span></code> are reversed in the calling sequence compared to <code dir="ltr">TRANSLATE</code>.</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19584"></a>Pragmas</p>
<pre dir="ltr">pragma restrict_references(transliterate, WNDS, RNDS, WNPS, RNPS); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19585"></a>Parameters</p>
<div id="ARPLS71426" class="tblformal">
<p class="titleintable"><a id="sthref19586"></a><a id="sthref19587"></a>Table 260-48 TRANSLITERATE Function Parameters</p>
<table class="cellalignment4330" title="TRANSLITERATE Function Parameters " summary="This table describes the Parameters of the UTL_RAW.TRANSLITERATE subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t59">Parameter</th>
<th class="cellalignment4328" id="r1c2-t59">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t59" headers="r1c1-t59">
<p><code dir="ltr">r</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t59 r1c2-t59">
<p><code dir="ltr">RAW</code> input byte-string to be converted</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t59" headers="r1c1-t59">
<p><code dir="ltr">to_set</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t59 r1c2-t59">
<p><code dir="ltr">RAW</code> byte-codes to which corresponding <code dir="ltr">from_set</code> bytes are converted (any length)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t59" headers="r1c1-t59">
<p><code dir="ltr">from_set</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t59 r1c2-t59">
<p><code dir="ltr">RAW</code> byte-codes to be converted, if presenting <code dir="ltr">r</code> (any length)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t59" headers="r1c1-t59">
<p><code dir="ltr">pad</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t59 r1c2-t59">
<p>1 byte used when to-set is shorter than the <code dir="ltr">from_set</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19588"></a>Defaults and Optional Parameters</p>
<div id="ARPLS71427" class="tblformal">
<p class="titleintable"><a id="sthref19589"></a><a id="sthref19590"></a>Table 260-49 TRANSLITERATE Function Optional Parameters</p>
<table class="cellalignment4330" title="TRANSLITERATE Function Optional Parameters " summary="This table describes Defaults and Optional Parameters used by the TRANSLITERATE subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t60">Optional Parameter</th>
<th class="cellalignment4328" id="r1c2-t60">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t60" headers="r1c1-t60">
<p><code dir="ltr">to_set</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t60 r1c2-t60">
<p>To the <code dir="ltr">NULL</code> string and effectively extended with <code dir="ltr">pad</code> to the length of <code dir="ltr">from_set</code> as necessary</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t60" headers="r1c1-t60">
<p><code dir="ltr">from_set</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t60 r1c2-t60">
<p><code dir="ltr">x&#39;00&#39;</code> through <code dir="ltr">x&#39;fff&#39;</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t60" headers="r1c1-t60">
<p><code dir="ltr">pad</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t60 r1c2-t60">
<p><code dir="ltr">x&#39;00&#39;</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19591"></a>Return Values</p>
<div id="ARPLS71428" class="tblformal">
<p class="titleintable"><a id="sthref19592"></a><a id="sthref19593"></a>Table 260-50 TRANSLITERATE Function Return Values</p>
<table class="cellalignment4330" title="TRANSLITERATE Function Return Values " summary="This table describes Values Returned by the TRANSLITERATE subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t61">Return</th>
<th class="cellalignment4328" id="r1c2-t61">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t61" headers="r1c1-t61">
<p><code dir="ltr">RAW</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t61 r1c2-t61">
<p>Converted byte-string.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19594"></a>Usage Notes</p>
<ul>
<li>
<p>If <code dir="ltr">to_set</code> is shorter than <code dir="ltr">from_set</code>, the extra <code dir="ltr">from_set</code> bytes have no corresponding conversion bytes. Bytes from the input <code dir="ltr">RAW</code> that match any such <code dir="ltr">from_set</code> bytes are converted in the result to the pad byte instead.</p>
</li>
<li>
<p>If <code dir="ltr">to_set</code> is longer than <code dir="ltr">from_set</code>, the extra <code dir="ltr">to_set</code> bytes are ignored.</p>
</li>
<li>
<p>If a byte value is repeated in <code dir="ltr">from_set</code>, the repeated occurrence is ignored.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
Differences from the <a href="#i997340">TRANSLATE Function</a>:
<ul>
<li>
<p>The <code dir="ltr">to_set</code> parameter comes before the <code dir="ltr">from_set</code> parameter in the calling sequence.</p>
</li>
<li>
<p>Bytes from <code dir="ltr">r</code> that appear in <code dir="ltr">from_set</code> but have no corresponding values in <code dir="ltr">to_set</code> are replaced by pad in the result.</p>
</li>
<li>
<p>The resulting <code dir="ltr">RAW</code> value always has the same length as the input <code dir="ltr">RAW</code> value.</p>
</li>
</ul>
<p>Note that <code dir="ltr">TRANSLATE</code> and <code dir="ltr">TRANSLITERATE</code> only differ in functionality when <code dir="ltr">to_set</code> has fewer bytes than <code dir="ltr">from_set</code>.</p>
</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19595"></a>Exceptions</p>
<div id="ARPLS71429" class="tblformal">
<p class="titleintable"><a id="sthref19596"></a><a id="sthref19597"></a>Table 260-51 TRANSLITERATE Function Exceptions</p>
<table class="cellalignment4330" title="TRANSLITERATE Function Exceptions " summary="This table describes Exceptions raised by the TRANSLITERATEsubprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t63">Error</th>
<th class="cellalignment4328" id="r1c2-t63">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t63" headers="r1c1-t63">
<p><code dir="ltr">VALUE_ERROR</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t63 r1c2-t63">
<p><code dir="ltr">R</code> is <code dir="ltr">NULL</code> or has 0 length</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71430" class="refsect2"><a id="BABGDIIJ"></a>
<h3 class="refsect2"><a id="sthref19598"></a>XRANGE Function</h3>
<p>This function returns a RAW <code dir="ltr">value</code> containing the succession of one-byte encodings beginning and ending with the specified byte-codes. The specified byte-codes must be single-byte <code dir="ltr">RAW</code> values. If the <code dir="ltr">start_byte</code> value is greater than the <code dir="ltr">end_byte</code> value, then the succession of resulting bytes begins with <code dir="ltr">start_byte</code>, wraps through <code dir="ltr">x&#39;FF&#39;</code> back to <code dir="ltr">x&#39;00&#39;</code>, then ends at <code dir="ltr">end_byte</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19599"></a>Syntax</p>
<pre dir="ltr">UTL_RAW.XRANGE (
   start_byte IN RAW DEFAULT NULL,
   end_byte   IN RAW DEFAULT NULL) 
  RETURN RAW;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19600"></a>Pragmas</p>
<pre dir="ltr">pragma restrict_references(xrange, WNDS, RNDS, WNPS, RNPS); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19601"></a>Parameters</p>
<div id="ARPLS71431" class="tblformal">
<p class="titleintable"><a id="sthref19602"></a><a id="sthref19603"></a>Table 260-52 XRANGE Function Parameters</p>
<table class="cellalignment4330" title="XRANGE Function Parameters " summary="This table describes the Parameters of the UTL_RAW.XCHANGE subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t64">Parameters</th>
<th class="cellalignment4328" id="r1c2-t64">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t64" headers="r1c1-t64">
<p><code dir="ltr">start_byte</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t64 r1c2-t64">
<p>Beginning byte-code value of resulting sequence. The default is <code dir="ltr">x&#39;00&#39;</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t64" headers="r1c1-t64">
<p><code dir="ltr">end_byte</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t64 r1c2-t64">
<p>Ending byte-code value of resulting sequence. The default is <code dir="ltr">x&#39;FF&#39;</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19604"></a>Return Values</p>
<div id="ARPLS71432" class="tblformal">
<p class="titleintable"><a id="sthref19605"></a><a id="sthref19606"></a>Table 260-53 XRANGE Function Return Values</p>
<table class="cellalignment4330" title="XRANGE Function Return Values " summary="This table describes Values Returned by the XCHANGE subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t65">Return</th>
<th class="cellalignment4328" id="r1c2-t65">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t65" headers="r1c1-t65">
<p><code dir="ltr">RAW</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t65 r1c2-t65">
<p>Containing succession of 1-byte hexadecimal encodings</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4320">
<tr>
<td class="cellalignment4329">
<table class="cellalignment4325">
<tr>
<td class="cellalignment4324"><a href="u_nla.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4324"><a href="u_recomp.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4332">
<table class="cellalignment4323">
<tr>
<td class="cellalignment4324"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4324"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4324"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4324"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4324"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4324"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>