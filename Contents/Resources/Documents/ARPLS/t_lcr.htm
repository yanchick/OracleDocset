<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-2457"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Logical%20Change%20Record%20TYPEs"></a><title>Logical Change Record TYPEs</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1086"/>
<meta name="dcterms.created" content="2016-09-02T5:37:19Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database PL/SQL Packages and Types Reference"/>
<meta name="dcterms.identifier" content="E41829-07"/>
<meta name="dcterms.isVersionOf" content="ARPLS"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="t_jms.htm" title="Previous" type="text/html"/>
<link rel="Next" href="t_ordaud.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41829-07.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">279/290</span> <!-- End Header -->
<div id="ARPLS307" class="chapter"><a id="BABGGBHF"></a>
<h1 class="chapter"><span class="secnum">275</span> Logical Change Record TYPEs</h1>
<p><a id="sthref20411"></a><a id="sthref20412"></a>This chapter describes the logical change record (LCR) types.</p>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#CJGBGBFA">Using Logical Change Record Types</a></p>
<ul>
<li>
<p>Overview</p>
</li>
<li>
<p>Security Model</p>
</li>
</ul>
</li>
<li>
<p><a href="#BABEIHIE">Summary of Logical Change Record Types</a></p>
</li>
<li>
<p><a href="#i998088">Common Subprograms for LCR$_DDL_RECORD and LCR$_ROW_RECORD</a></p>
</li>
</ul>
<div class="refentry"><a id="CJGBGBFA"></a>
<div id="ARPLS73288" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">Using Logical Change Record Types</h2>
<p>This section contains topics that relate to using the logical change record (LCR) types.</p>
<ul>
<li>
<p><a href="#CJGCIJCG">Overview</a></p>
</li>
<li>
<p><a href="#CJGIGAFB">Security Model</a></p>
</li>
</ul>
<div id="ARPLS73289" class="refsect2"><a id="CJGCIJCG"></a>
<h3 class="refsect2">Overview</h3>
<p>In Oracle Streams, logical change records (LCRs) are message payloads that contain information about changes to a database. These changes can include changes to the data, which are data manipulation language (DML) changes, and changes to database objects, which are data definition language (DDL) changes.</p>
<p>When you use Oracle Streams, the capture process captures changes in the form of LCRs and enqueues them into a queue. These LCRs can be propagated from a queue in one database to a queue in another database. Finally, the apply process can apply LCRs at a destination database. You also have the option of creating, enqueuing, and dequeuing LCRs manually.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STRMS107" href="../STRMS/strms_capture.htm#STRMS107"><span class="italic">Oracle Streams Concepts and Administration</span></a> for more information about LCRs</div>
</div>
<!-- class="refsect2" -->
<div id="ARPLS73290" class="refsect2"><a id="CJGIGAFB"></a>
<h3 class="refsect2">Security Model</h3>
<p><code dir="ltr">PUBLIC</code> is granted <code dir="ltr">EXECUTE</code> privilege on the types described in this chapter.</p>
</div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" -->
<div class="refentry"><a id="BABEIHIE"></a>
<div id="ARPLS557" class="refsect1">
<h2 class="refsect1">Summary of Logical Change Record Types</h2>
<div id="ARPLS71849" class="tblformal">
<p class="titleintable"><a id="sthref20413"></a><a id="sthref20414"></a>Table 275-1 Logical Change Record (LCR) Types</p>
<table class="cellalignment4330" title="Logical Change Record (LCR) Types" summary="This table lists the Logical Change Record TYPEs in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t3">Type</th>
<th class="cellalignment4328" id="r1c2-t3">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t3" headers="r1c1-t3">
<p><a href="#BABJIDHC">LCR$_DDL_RECORD Type</a></p>
</td>
<td class="cellalignment4329" headers="r2c1-t3 r1c2-t3">
<p>Represents a data definition language (DDL) change to a database object</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t3" headers="r1c1-t3">
<p><a href="#i997304">LCR$_ROW_RECORD Type</a></p>
</td>
<td class="cellalignment4329" headers="r3c1-t3 r1c2-t3">
<p>Represents a data manipulation language (DML) change to a database object</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t3" headers="r1c1-t3">
<p><a href="#BABFHHIF">LCR$_ROW_LIST Type</a></p>
</td>
<td class="cellalignment4329" headers="r4c1-t3 r1c2-t3">
<p>Identifies a list of column values for a row in a table</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t3" headers="r1c1-t3">
<p><a href="#i998514">LCR$_ROW_UNIT Type</a></p>
</td>
<td class="cellalignment4329" headers="r5c1-t3 r1c2-t3">
<p>Identifies the value for a column in a row</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>These logical change record (LCR) types can be used with the following Oracle-supplied PL/SQL packages:</p>
<ul>
<li>
<p><code dir="ltr">DBMS_APPLY_ADM</code></p>
</li>
<li>
<p><code dir="ltr">DBMS_AQ</code></p>
</li>
<li>
<p><code dir="ltr">DBMS_AQADM</code></p>
</li>
<li>
<p><code dir="ltr">DBMS_CAPTURE_ADM</code></p>
</li>
<li>
<p><code dir="ltr">DBMS_PROPAGATION_ADM</code></p>
</li>
<li>
<p><code dir="ltr">DBMS_RULE</code></p>
</li>
<li>
<p><code dir="ltr">DBMS_RULE_ADM</code></p>
</li>
<li>
<p><code dir="ltr">DBMS_STREAMS</code></p>
</li>
<li>
<p><code dir="ltr">DBMS_STREAMS_ADM</code></p>
</li>
<li>
<p><code dir="ltr">DBMS_TRANSFORM</code></p>
</li>
</ul>
<div id="ARPLS567" class="refsect2"><a id="BABJIDHC"></a>
<h3 class="refsect2">LCR$_DDL_RECORD Type<a id="sthref20415"></a><a id="sthref20416"></a><a id="sthref20417"></a></h3>
<p>This type represents a data definition language (DDL) change to a database object.</p>
<p>If you create or modify a DDL logical change record (DDL LCR), then make sure the <code dir="ltr">ddl_text</code> is consistent with the <code dir="ltr">base_table_name</code>, <code dir="ltr">base_table_owner</code>, <code dir="ltr">object_type</code>, <code dir="ltr">object_owner</code>, <code dir="ltr">object_name</code>, and <code dir="ltr">command_type</code> attributes.</p>
<p>This section contains information about the constructor for row LCRs and information about the member subprograms for this type:</p>
<ul>
<li>
<p><a href="#i1006137">LCR$_DDL_RECORD Constructor</a></p>
</li>
<li>
<p><a href="#i996910">Summary of LCR$_DDL_RECORD Subprograms</a>, which also include the subprograms described in <a href="#i998088">&#34;Common Subprograms for LCR$_DDL_RECORD and LCR$_ROW_RECORD&#34;</a></p>
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
<ul>
<li>
<p>When passing a name as a parameter to an LCR constructor, you can enclose the name in double quotes to handle names that use mixed case or lower case for database objects. For example, if a name contains any lower case characters, then you must enclose it in double quotes.</p>
</li>
<li>
<p>The application does not need to specify a transaction identifier or SCN when it creates an LCR because the apply process generates these values and stores them in memory. If a transaction identifier or SCN is specified in the LCR, then the apply process ignores it and assigns a new value.</p>
</li>
</ul>
</div>
</li>
</ul>
<div id="ARPLS71850" class="refsect3"><a id="i1006137"></a>
<h4 class="refsect3">LCR$_DDL_RECORD Constructor</h4>
<p>Creates a <code dir="ltr">SYS.LCR$_DDL_RECORD</code> object with the specified information.</p>
<pre dir="ltr">STATIC FUNCTION CONSTRUCT(
   source_database_name  IN  VARCHAR2,
   command_type          IN  VARCHAR2,
   object_owner          IN  VARCHAR2,
   object_name           IN  VARCHAR2,
   object_type           IN  VARCHAR2,
   ddl_text              IN  CLOB,
   logon_user            IN  VARCHAR2,
   current_schema        IN  VARCHAR2,
   base_table_owner      IN  VARCHAR2,
   base_table_name       IN  VARCHAR2,
   tag                   IN  RAW       DEFAULT NULL,
   transaction_id        IN  VARCHAR2  DEFAULT NULL,
   scn                   IN  NUMBER    DEFAULT NULL,
   position              IN  RAW       DEFAULT NULL,
   edition_name          IN  VARCHAR2  DEFAULT NULL,
   root_name             IN  VARCHAR2  DEFAULT NULL)
RETURN SYS.LCR$_DDL_RECORD;
</pre>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BABCHFFB"></a>LCR$_DDL_RECORD Constructor Function Parameters</p>
<div id="ARPLS71851" class="tblformal">
<p class="titleintable"><a id="sthref20418"></a><a id="sthref20419"></a>Table 275-2 Constructor Function Parameters for LCR$_DDL_RECORD</p>
<table class="cellalignment4330" title="Constructor Function Parameters for LCR$_DDL_RECORD" summary="This table describes the Parameters of the Logical Change Record Type LCR$_DDL_RECORD constructor subprogram LCR$_DDL_RECORD." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t5">Parameter</th>
<th class="cellalignment4328" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t5" headers="r1c1-t5">
<p><code dir="ltr">source_database_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t5 r1c2-t5">
<p>The database where the DDL statement occurred</p>
<p>If the LCRs originated in a multitenant container database (CDB), then this field specifies the global name of the container where the DDL change occurred.</p>
<p>If you do not include the domain name, then the function appends the local domain to the database name automatically. For example, if you specify <code dir="ltr">DBS1</code> and the local domain is <code dir="ltr">EXAMPLE.COM</code>, then the function specifies <code dir="ltr">DBS1.EXAMPLE.COM</code> automatically. Set this parameter to a non-<code dir="ltr">NULL</code> value.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t5" headers="r1c1-t5">
<p><code dir="ltr">command_type</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t5 r1c2-t5">
<p>The type of command executed in the DDL statement</p>
<p>Set this parameter to a non-<code dir="ltr">NULL</code> value.</p>
<p><span class="bold">See Also:</span> The &#34;SQL Command Codes&#34; table in the <a class="olink LNOCI251" href="../LNOCI/ociaahan.htm#LNOCI251"><span class="italic">Oracle Call Interface Programmer&#39;s Guide</span></a> for a complete list of command types</p>
<p>The following command types <span class="italic">are not supported</span> in DDL LCRs:</p>
<pre dir="ltr">ALTER MATERIALIZED VIEW
ALTER MATERIALIZED VIEW LOG
ALTER SUMMARY
CREATE SCHEMA
CREATE MATERIALIZED VIEW
CREATE MATERIALIZED VIEW LOG
CREATE SUMMARY
DROP MATERIALIZED VIEW
DROP MATERIALIZED VIEW LOG
DROP SUMMARY
RENAME
</pre>
<p>The snapshot equivalents of the materialized view command types are also not supported.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t5" headers="r1c1-t5">
<p><code dir="ltr">object_owner</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t5 r1c2-t5">
<p>The user who owns the object on which the DDL statement was executed</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t5" headers="r1c1-t5">
<p><code dir="ltr">object_name</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t5 r1c2-t5">
<p>The database object on which the DDL statement was executed</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t5" headers="r1c1-t5">
<p><code dir="ltr">object_type</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t5 r1c2-t5">
<p>The type of object on which the DDL statement was executed</p>
<p>The following are valid object types:</p>
<pre dir="ltr">CLUSTER
FUNCTION
INDEX
LINK
OUTLINE
PACKAGE
PACKAGE BODY
PROCEDURE
SEQUENCE
SYNONYM
TABLE
TRIGGER
TYPE
USER
VIEW
</pre>
<p><code dir="ltr">LINK</code> represents a database link.</p>
<p><code dir="ltr">NULL</code> is also a valid object type. Specify <code dir="ltr">NULL</code> for all object types not listed. The <code dir="ltr">GET_OBJECT_TYPE</code> member procedure returns <code dir="ltr">NULL</code> for object types not listed.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t5" headers="r1c1-t5">
<p><code dir="ltr">ddl_text</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t5 r1c2-t5">
<p>The text of the DDL statement</p>
<p>Set this parameter to a non-<code dir="ltr">NULL</code> value.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t5" headers="r1c1-t5">
<p><code dir="ltr">logon_user</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t5 r1c2-t5">
<p>The user whose session executed the DDL statement</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t5" headers="r1c1-t5">
<p><code dir="ltr">current_schema</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t5 r1c2-t5">
<p>The schema that is used if no schema is specified explicitly for the modified database objects in <code dir="ltr">ddl_text</code></p>
<p>If a schema is specified in <code dir="ltr">ddl_text</code> that differs from the one specified for <code dir="ltr">current_schema</code>, then the function uses the schema specified in <code dir="ltr">ddl_text</code>.</p>
<p>Set this parameter to a non-<code dir="ltr">NULL</code> value.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t5" headers="r1c1-t5">
<p><code dir="ltr">base_table_owner</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t5 r1c2-t5">
<p>If the DDL statement is a table-related DDL (such as <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> and <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code>), or if the DDL statement involves a table (such as creating a trigger on a table), then <code dir="ltr">base_table_owner</code> specifies the owner of the table involved. Otherwise, <code dir="ltr">base_table_owner</code> is <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t5" headers="r1c1-t5">
<p><code dir="ltr">base_table_name</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t5 r1c2-t5">
<p>If the DDL statement is a table-related DDL (such as <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> and <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code>), or if the DDL statement involves a table (such as creating a trigger on a table), then <code dir="ltr">base_table_name</code> specifies the name of the table involved. Otherwise, <code dir="ltr">base_table_name</code> is <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t5" headers="r1c1-t5">
<p><code dir="ltr">tag</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t5 r1c2-t5">
<p>A binary tag that enables tracking of the LCR</p>
<p>For example, this tag can be used to determine the original source database of the DDL statement if apply forwarding is used.</p>
<p><span class="bold">See Also:</span> <a class="olink STREP008" href="../STREP/rep_tags.htm#STREP008"><span class="italic">Oracle Streams Replication Administrator&#39;s Guide</span></a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t5" headers="r1c1-t5">
<p><code dir="ltr">transaction_id</code></p>
</td>
<td class="cellalignment4329" headers="r13c1-t5 r1c2-t5">
<p>The identifier of the transaction</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t5" headers="r1c1-t5">
<p><code dir="ltr">scn</code></p>
</td>
<td class="cellalignment4329" headers="r14c1-t5 r1c2-t5">
<p>The SCN at the time when the change record for a captured LCR was written to the redo log</p>
<p>The SCN value is meaningless for a user-created LCR.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r15c1-t5" headers="r1c1-t5">
<p><code dir="ltr">position</code></p>
</td>
<td class="cellalignment4329" headers="r15c1-t5 r1c2-t5">
<p>The position of the LCR</p>
<p>LCR position is commonly used in XStream configurations. Using XStream requires purchasing a license for the Oracle GoldenGate product.</p>
<p><span class="bold">See Also:</span> <a class="olink XSTRM1101" href="../XSTRM/xstrm_gen_cncpt.htm#XSTRM1101"><span class="italic">Oracle Database XStream Guide</span></a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r16c1-t5" headers="r1c1-t5">
<p><code dir="ltr">edition_name</code></p>
</td>
<td class="cellalignment4329" headers="r16c1-t5 r1c2-t5">
<p>The name of the edition in which the DDL statement was executed</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r17c1-t5" headers="r1c1-t5">
<p><code dir="ltr">root_name</code></p>
</td>
<td class="cellalignment4329" headers="r17c1-t5 r1c2-t5">
<p>If the LCRs is associated with a CDB, then this field specifies the global name of the root in the CDB.</p>
<p>If the LCR is associated with a non-CDB, then this field is <code dir="ltr">NULL</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect3" -->
<div id="ARPLS71852" class="refsect3"><a id="i996910"></a>
<h4 class="refsect3">Summary of LCR$_DDL_RECORD Subprograms</h4>
<div id="ARPLS71853" class="tblformal">
<p class="titleintable"><a id="sthref20420"></a><a id="sthref20421"></a>Table 275-3 LCR$_DDL_RECORD Type Subprograms</p>
<table class="cellalignment4330" title="LCR$_DDL_RECORD Type Subprograms" summary="This table describes the subprograms of the Logical Change Record Type LCR$_DDL_RECORD in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t6">Subprogram</th>
<th class="cellalignment4328" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t6" headers="r1c1-t6">
<p><a href="#i997065">EXECUTE Member Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r2c1-t6 r1c2-t6">
<p>Executes the LCR under the security domain of the current user</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t6" headers="r1c1-t6">
<p><a href="#i997077">GET_BASE_TABLE_NAME Member Function</a></p>
</td>
<td class="cellalignment4329" headers="r3c1-t6 r1c2-t6">
<p>Gets the base (dependent) table name</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t6" headers="r1c1-t6">
<p><a href="#i997084">GET_BASE_TABLE_OWNER Member Function</a></p>
</td>
<td class="cellalignment4329" headers="r4c1-t6 r1c2-t6">
<p>Gets the base (dependent) table owner</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t6" headers="r1c1-t6">
<p><a href="#i997091">GET_CURRENT_SCHEMA Member Function</a></p>
</td>
<td class="cellalignment4329" headers="r5c1-t6 r1c2-t6">
<p>Gets the default schema (user) name</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t6" headers="r1c1-t6">
<p><a href="#BABDHCHJ">GET_DDL_TEXT Member Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r6c1-t6 r1c2-t6">
<p>Gets the DDL text in a <code dir="ltr">CLOB</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t6" headers="r1c1-t6">
<p><a href="#BGBFGIGG">GET_EDITION_NAME Member Function</a></p>
</td>
<td class="cellalignment4329" headers="r7c1-t6 r1c2-t6">
<p>Gets the name of the edition in which the DDL statement was executed</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t6" headers="r1c1-t6">
<p><a href="#CHDEJAEF">GET_LOGON_USER Member Function</a></p>
</td>
<td class="cellalignment4329" headers="r8c1-t6 r1c2-t6">
<p>Gets the logon user name</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t6" headers="r1c1-t6">
<p><a href="#i997146">GET_OBJECT_TYPE Member Function</a></p>
</td>
<td class="cellalignment4329" headers="r9c1-t6 r1c2-t6">
<p>Gets the type of the object involved for the DDL</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t6" headers="r1c1-t6">
<p><a href="#BABIHBAC">SET_BASE_TABLE_NAME Member Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r10c1-t6 r1c2-t6">
<p>Sets the base (dependent) table name</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t6" headers="r1c1-t6">
<p><a href="#i997175">SET_BASE_TABLE_OWNER Member Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r11c1-t6 r1c2-t6">
<p>Sets the base (dependent) table owner</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t6" headers="r1c1-t6">
<p><a href="#i997197">SET_CURRENT_SCHEMA Member Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r12c1-t6 r1c2-t6">
<p>Sets the default schema (user) name</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t6" headers="r1c1-t6">
<p><a href="#i997219">SET_DDL_TEXT Member Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r13c1-t6 r1c2-t6">
<p>Sets the DDL text</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t6" headers="r1c1-t6">
<p><a href="#BGBHAIHE">SET_EDITION_NAME Member Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r14c1-t6 r1c2-t6">
<p>Sets the name of the edition in which the DDL statement was executed</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r15c1-t6" headers="r1c1-t6">
<p><a href="#BABJAGJB">SET_LOGON_USER Member Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r15c1-t6 r1c2-t6">
<p>Sets the logon user name</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r16c1-t6" headers="r1c1-t6">
<p><a href="#BABBHIDA">SET_OBJECT_TYPE Member Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r16c1-t6 r1c2-t6">
<p>Sets the object type</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r17c1-t6" headers="r1c1-t6">
<p>Common Subprograms</p>
</td>
<td class="cellalignment4329" headers="r17c1-t6 r1c2-t6">
<p>See <a href="#i998088">&#34;Common Subprograms for LCR$_DDL_RECORD and LCR$_ROW_RECORD&#34;</a> for a list of subprograms common to the <code dir="ltr">SYS.LCR$_ROW_RECORD</code> and <code dir="ltr">SYS.LCR$_DDL_RECORD</code> types</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i997065"></a>EXECUTE Member Procedure<a id="sthref20422"></a><a id="sthref20423"></a></p>
<p>Executes the DDL LCR under the security domain of the current user. Apply handlers are not run when the LCR is applied using this procedure.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code dir="ltr">EXECUTE</code> member procedure can be invoked only in an apply handler for an Oracle Streams apply process.</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20424"></a>Syntax</p>
<pre dir="ltr">MEMBER PROCEDURE EXECUTE;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i997077"></a>GET_BASE_TABLE_NAME Member Function<a id="sthref20425"></a><a id="sthref20426"></a></p>
<p>Gets the base (dependent) table name.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20427"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION GET_BASE_TABLE_NAME()
RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i997084"></a>GET_BASE_TABLE_OWNER Member Function<a id="sthref20428"></a><a id="sthref20429"></a></p>
<p>Gets the base (dependent) table owner.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20430"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION GET_BASE_TABLE_OWNER() 
RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i997091"></a>GET_CURRENT_SCHEMA Member Function<a id="sthref20431"></a><a id="sthref20432"></a></p>
<p>Gets the current schema name.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20433"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION GET_CURRENT_SCHEMA() 
RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BABDHCHJ"></a>GET_DDL_TEXT Member Procedure</p>
<p>Gets the DDL text in a <code dir="ltr">CLOB</code>.</p>
<p>For example, the following PL/SQL code uses this procedure to get the DDL text in a DDL LCR:</p>
<pre dir="ltr">CREATE OR REPLACE PROCEDURE ddl_in_lcr (ddl_lcr in SYS.LCR$_DDL_RECORD)
IS
  ddl_text   CLOB;
BEGIN
  DBMS_OUTPUT.PUT_LINE( &#39;  -----------------------------------------&#39; ); 
  DBMS_OUTPUT.PUT_LINE( &#39;  Displaying DDL text in a DDL LCR: &#39; );
  DBMS_OUTPUT.PUT_LINE( &#39;  -----------------------------------------&#39; ); 
  DBMS_LOB.CREATETEMPORARY(ddl_text, true);
  ddl_lcr.GET_DDL_TEXT(ddl_text);
  DBMS_OUTPUT.PUT_LINE(&#39;DDL text:&#39; || ddl_text);
  DBMS_LOB.FREETEMPORARY(ddl_text);
END;
/
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
<code dir="ltr">GET_DDL_TEXT</code> is a member procedure and not a member function to make it easier for you to manage the space used by the <code dir="ltr">CLOB</code>. Notice that the previous example creates temporary space for the <code dir="ltr">CLOB</code> and then frees the temporary space when it is no longer needed.</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20434"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION GET_DDL_TEXT(
  ddl_text  IN/OUT  CLOB);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20435"></a>Parameter</p>
<div id="ARPLS71854" class="tblformal">
<p class="titleintable"><a id="sthref20436"></a><a id="sthref20437"></a>Table 275-4 GET_DDL_TEXT Procedure Parameter</p>
<table class="cellalignment4330" title="GET_DDL_TEXT Procedure Parameter" summary="This table describes the Parameters of the Logical Change Record Type LCR$_DDL_RECORD member subprogram GET_DDL_TEXT." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t9">Parameter</th>
<th class="cellalignment4328" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t9" headers="r1c1-t9">
<p><code dir="ltr">ddl_text</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t9 r1c2-t9">
<p>The DDL text in the DDL LCR</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BGBFGIGG"></a>GET_EDITION_NAME Member Function<a id="sthref20438"></a><a id="sthref20439"></a></p>
<p>Gets the name of the edition in which the DDL statement was executed.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADFNS020" href="../ADFNS/adfns_editions.htm#ADFNS020"><span class="italic">Oracle Database Development Guide</span></a></div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20440"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION GET_EDITION_NAME() 
RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="CHDEJAEF"></a>GET_LOGON_USER Member Function<a id="sthref20441"></a><a id="sthref20442"></a></p>
<p>Gets the logon user name.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20443"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION GET_LOGON_USER() 
RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i997146"></a>GET_OBJECT_TYPE Member Function<a id="sthref20444"></a><a id="sthref20445"></a></p>
<p>Gets the type of the object involved for the DDL.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20446"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION GET_OBJECT_TYPE() 
RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BABIHBAC"></a>SET_BASE_TABLE_NAME Member Procedure<a id="sthref20447"></a><a id="sthref20448"></a></p>
<p>Sets the base (dependent) table name.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20449"></a>Syntax</p>
<pre dir="ltr">MEMBER PROCEDURE SET_BASE_TABLE_NAME(
   base_table_name  IN  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20450"></a>Parameter</p>
<div id="ARPLS71855" class="tblformal">
<p class="titleintable"><a id="sthref20451"></a><a id="sthref20452"></a>Table 275-5 SET_BASE_TABLE_NAME Procedure Parameter</p>
<table class="cellalignment4330" title="SET_BASE_TABLE_NAME Procedure Parameter" summary="This table describes the Parameters of the Logical Change Record Type LCR$_DDL_RECORD member subprogram SET_BASE_TABLE_NAME." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t11">Parameter</th>
<th class="cellalignment4328" id="r1c2-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t11" headers="r1c1-t11">
<p><code dir="ltr">base_table_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t11 r1c2-t11">
<p>The name of the base table</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i997175"></a>SET_BASE_TABLE_OWNER Member Procedure<a id="sthref20453"></a><a id="sthref20454"></a></p>
<p>Sets the base (dependent) table owner.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20455"></a>Syntax</p>
<pre dir="ltr">MEMBER PROCEDURE SET_BASE_TABLE_OWNER(
   base_table_owner  IN  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20456"></a>Parameter</p>
<div id="ARPLS71856" class="tblformal">
<p class="titleintable"><a id="sthref20457"></a><a id="sthref20458"></a>Table 275-6 SET_BASE_TABLE_OWNER Procedure Parameter</p>
<table class="cellalignment4330" title="SET_BASE_TABLE_OWNER Procedure Parameter" summary="This table describes the Parameters of the Logical Change Record Type LCR$_DDL_RECORD member subprogram SET_BASE_TABLE_OWNER." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t12">Parameter</th>
<th class="cellalignment4328" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t12" headers="r1c1-t12">
<p><code dir="ltr">base_table_owner</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t12 r1c2-t12">
<p>The name of the base table owner</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i997197"></a>SET_CURRENT_SCHEMA Member Procedure<a id="sthref20459"></a><a id="sthref20460"></a></p>
<p>Sets the default schema (user) name.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20461"></a>Syntax</p>
<pre dir="ltr">MEMBER PROCEDURE SET_CURRENT_SCHEMA(
   current_schema  IN  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20462"></a>Parameter</p>
<div id="ARPLS71857" class="tblformal">
<p class="titleintable"><a id="sthref20463"></a><a id="sthref20464"></a>Table 275-7 SET_CURRENT_SCHEMA Procedure Parameter</p>
<table class="cellalignment4330" title="SET_CURRENT_SCHEMA Procedure Parameter" summary="This table describes the Parameters of the Logical Change Record Type LCR$_DDL_RECORD member subprogram SET_CURRENT_SCHEMA." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t13">Parameter</th>
<th class="cellalignment4328" id="r1c2-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t13" headers="r1c1-t13">
<p><code dir="ltr">current_schema</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t13 r1c2-t13">
<p>The name of the schema to set as the current schema</p>
<p>Set this parameter to a non-<code dir="ltr">NULL</code> value.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i997219"></a>SET_DDL_TEXT Member Procedure<a id="sthref20465"></a><a id="sthref20466"></a></p>
<p>Sets the DDL text.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20467"></a>Syntax</p>
<pre dir="ltr">MEMBER PROCEDURE SET_DDL_TEXT(
   ddl_text  IN  CLOB);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20468"></a>Parameter</p>
<div id="ARPLS71858" class="tblformal">
<p class="titleintable"><a id="sthref20469"></a><a id="sthref20470"></a>Table 275-8 SET_DDL_TEXT Procedure Parameter</p>
<table class="cellalignment4330" title="SET_DDL_TEXT Procedure Parameter" summary="This table describes the Parameters of the Logical Change Record Type LCR$_DDL_RECORD member subprogram SET_DDL_TEXT." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t14">Parameter</th>
<th class="cellalignment4328" id="r1c2-t14">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t14" headers="r1c1-t14">
<p><code dir="ltr">ddl_text</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t14 r1c2-t14">
<p>The DDL text</p>
<p>Set this parameter to a non-<code dir="ltr">NULL</code> value.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BGBHAIHE"></a>SET_EDITION_NAME Member Procedure</p>
<p>Sets the name of the edition in which the DDL statement was executed.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADFNS020" href="../ADFNS/adfns_editions.htm#ADFNS020"><span class="italic">Oracle Database Development Guide</span></a></div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20471"></a>Syntax</p>
<pre dir="ltr">MEMBER PROCEDURE SET_EDITION_NAME(
   edition_name  IN  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20472"></a>Parameter</p>
<div id="ARPLS73120" class="tblformal">
<p class="titleintable"><a id="sthref20473"></a><a id="sthref20474"></a>Table 275-9 SET_EDITION_NAME Procedure Parameter</p>
<table class="cellalignment4330" title="SET_EDITION_NAME Procedure Parameter" summary="This table describes the Parameters of the Logical Change Record Type LCR$_DDL_RECORD member subprogram SET_EDITION_NAME." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t16">Parameter</th>
<th class="cellalignment4328" id="r1c2-t16">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t16" headers="r1c1-t16">
<p><code dir="ltr">edition_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t16 r1c2-t16">
<p>Name of the edition</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BABJAGJB"></a>SET_LOGON_USER Member Procedure<a id="sthref20475"></a><a id="sthref20476"></a></p>
<p>Sets the logon user name.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20477"></a>Syntax</p>
<pre dir="ltr">MEMBER PROCEDURE SET_LOGON_USER(
   logon_user  IN  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20478"></a>Parameter</p>
<div id="ARPLS71859" class="tblformal">
<p class="titleintable"><a id="sthref20479"></a><a id="sthref20480"></a>Table 275-10 SET_LOGON_USER Procedure Parameter</p>
<table class="cellalignment4330" title="SET_LOGON_USER Procedure Parameter" summary="This table describes the Parameters of the Logical Change Record Type LCR$_DDL_RECORD member subprogram SET_LOGON_USER." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t17">Parameter</th>
<th class="cellalignment4328" id="r1c2-t17">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t17" headers="r1c1-t17">
<p><code dir="ltr">logon_user</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t17 r1c2-t17">
<p>The name of the schema to set as the logon user</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BABBHIDA"></a>SET_OBJECT_TYPE Member Procedure<a id="sthref20481"></a><a id="sthref20482"></a></p>
<p>Sets the object type.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20483"></a>Syntax</p>
<pre dir="ltr">MEMBER PROCEDURE SET_OBJECT_TYPE(
   object_type  IN  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20484"></a>Parameter</p>
<div id="ARPLS71860" class="tblformal">
<p class="titleintable"><a id="sthref20485"></a><a id="sthref20486"></a>Table 275-11 SET_OBJECT_TYPE Procedure Parameter</p>
<table class="cellalignment4330" title="SET_OBJECT_TYPE Procedure Parameter" summary="This table describes the Parameters of the Logical Change Record Type LCR$_DDL_RECORD member subprogram SET_OBJECT_TYPE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t18">Parameter</th>
<th class="cellalignment4328" id="r1c2-t18">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t18" headers="r1c1-t18">
<p><code dir="ltr">object_type</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t18 r1c2-t18">
<p>The object type</p>
<p>The following are valid object types:</p>
<pre dir="ltr">CLUSTER
FUNCTION
INDEX
LINK
OUTLINE
PACKAGE
PACKAGE BODY
PROCEDURE
SEQUENCE
SYNONYM
TABLE
TRIGGER
TYPE
USER
VIEW
</pre>
<p><code dir="ltr">LINK</code> represents a database link.</p>
<p><code dir="ltr">NULL</code> is also a valid object type. Specify <code dir="ltr">NULL</code> for all object types not listed. The <code dir="ltr">GET_OBJECT_TYPE</code> member procedure returns <code dir="ltr">NULL</code> for object types not listed.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect3" --></div>
<!-- class="refsect2" -->
<div id="ARPLS368" class="refsect2"><a id="i997304"></a>
<h3 class="refsect2">LCR$_ROW_RECORD Type<a id="sthref20487"></a><a id="sthref20488"></a><a id="sthref20489"></a></h3>
<p>This type represents a data manipulation language (DML) change to a row in a table. This type uses the <code dir="ltr">LCR$_ROW_LIST</code> type.</p>
<p>If you create or modify a row logical change record (row LCR), then make sure the <code dir="ltr">command_type</code> attribute is consistent with the presence or absence of old column values and the presence or absence of new column values.</p>
<p>This section contains information about the constructor for DDL LCRs and information about the member subprograms for this type:</p>
<ul>
<li>
<p><a href="#i1006191">LCR$_ROW_RECORD Constructor</a></p>
</li>
<li>
<p><a href="#i997411">Summary of LCR$_ROW_RECORD Subprograms</a>, which also include the subprograms described in <a href="#i998088">Common Subprograms for LCR$_DDL_RECORD and LCR$_ROW_RECORD</a></p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>When passing a name as a parameter to an LCR constructor, you can enclose the name in double quotes to handle names that use mixed case or lower case for database objects. For example, if a name contains any lower case characters, then you must enclose it in double quotes.</p>
</li>
<li>
<p>The application does not need to specify a transaction identifier or SCN when it creates an LCR because the apply process generates these values and stores them in memory. If a transaction identifier or SCN is specified in the LCR, then the apply process ignores it and assigns a new value.</p>
</li>
</ul>
</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABFHHIF">LCR$_ROW_LIST Type</a></div>
</li>
</ul>
<div id="ARPLS71861" class="refsect3"><a id="i1006191"></a>
<h4 class="refsect3">LCR$_ROW_RECORD Constructor</h4>
<p>Creates a <code dir="ltr">SYS.LCR$_ROW_RECORD</code> object with the specified information.</p>
<pre dir="ltr">STATIC FUNCTION CONSTRUCT(
   source_database_name  IN  VARCHAR2,
   command_type          IN  VARCHAR2,
   object_owner          IN  VARCHAR2,
   object_name           IN  VARCHAR2,
   tag                   IN  RAW                DEFAULT NULL,
   transaction_id        IN  VARCHAR2           DEFAULT NULL,
   scn                   IN  NUMBER             DEFAULT NULL,
   old_values            IN  SYS.LCR$_ROW_LIST  DEFAULT NULL,
   new_values            IN  SYS.LCR$_ROW_LIST  DEFAULT NULL,
   position              IN  RAW                DEFAULT NULL,
   root_name             IN  VARCHAR2           DEFAULT NULL)
RETURN SYS.LCR$_ROW_RECORD;
</pre>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20490"></a>LCR$_ROW_RECORD Constructor Function Parameters</p>
<div id="ARPLS71862" class="tblformal">
<p class="titleintable"><a id="sthref20491"></a><a id="sthref20492"></a>Table 275-12 Constructor Function Parameters for LCR$_ROW_RECORD</p>
<table class="cellalignment4330" title="Constructor Function Parameters for LCR$_ROW_RECORD" summary="This table describes the Parameters of the Logical Change Record Type LCR$_ROW_RECORD constructor subprogram LCR$_ROW_RECORD." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t21">Parameter</th>
<th class="cellalignment4328" id="r1c2-t21">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t21" headers="r1c1-t21">
<p><code dir="ltr">source_database_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t21 r1c2-t21">
<p>The database where the row change occurred</p>
<p>If the LCRs originated in a CDB, then this field specifies the global name of the container where the row change occurred.</p>
<p>If you do not include the domain name, then the function appends the local domain to the database name automatically. For example, if you specify <code dir="ltr">DBS1</code> and the local domain is <code dir="ltr">EXAMPLE.COM</code>, then the function specifies <code dir="ltr">DBS1.EXAMPLE.COM</code> automatically. Set this parameter to a non-<code dir="ltr">NULL</code> value.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t21" headers="r1c1-t21">
<p><code dir="ltr">command_type</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t21 r1c2-t21">
<p>The type of command executed in the DML statement</p>
<p>Set this parameter to a non-<code dir="ltr">NULL</code> value.</p>
<p>Valid values are the following:</p>
<pre dir="ltr">INSERT
UPDATE
DELETE
LOB ERASE
LOB WRITE
LOB TRIM
</pre>
<p>If <code dir="ltr">INSERT</code>, then ensure that the LCR has a <code dir="ltr">new_values</code> collection that is not empty and an empty or <code dir="ltr">NULL</code> <code dir="ltr">old_values</code> collection.</p>
<p>If <code dir="ltr">UPDATE</code>, then ensure that the LCR has a <code dir="ltr">new_values</code> collection that is not empty and an <code dir="ltr">old_values</code> collection that is not empty.</p>
<p>If <code dir="ltr">DELETE</code>, then ensure that the LCR has a <code dir="ltr">NULL</code> or empty <code dir="ltr">new_values</code> collection and an <code dir="ltr">old_values</code> collection that is not empty.</p>
<p>If <code dir="ltr">LOB</code> <code dir="ltr">ERASE</code>, <code dir="ltr">LOB</code> <code dir="ltr">WRITE</code>, or <code dir="ltr">LOB</code> <code dir="ltr">TRIM</code>, then ensure that the LCR has a <code dir="ltr">new_values</code> collection that is not empty and an empty or <code dir="ltr">NULL</code> <code dir="ltr">old_values</code> collection.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t21" headers="r1c1-t21">
<p><code dir="ltr">object_owner</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t21 r1c2-t21">
<p>The user who owns the table on which the row change occurred</p>
<p>Set this parameter to a non-<code dir="ltr">NULL</code> value.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t21" headers="r1c1-t21">
<p><code dir="ltr">object_name</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t21 r1c2-t21">
<p>The table on which the DML statement was executed</p>
<p>Set this parameter to a non-<code dir="ltr">NULL</code> value.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t21" headers="r1c1-t21">
<p><code dir="ltr">tag</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t21 r1c2-t21">
<p>A binary tag that enables tracking of the LCR</p>
<p>For example, this tag can be used to determine the original source database of the DML change when apply forwarding is used.</p>
<p><span class="bold">See Also:</span> <a class="olink STREP008" href="../STREP/rep_tags.htm#STREP008"><span class="italic">Oracle Streams Replication Administrator&#39;s Guide</span></a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t21" headers="r1c1-t21">
<p><code dir="ltr">transaction_id</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t21 r1c2-t21">
<p>The identifier of the transaction</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t21" headers="r1c1-t21">
<p><code dir="ltr">scn</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t21 r1c2-t21">
<p>The SCN at the time when the change record was written to the redo log</p>
<p>The SCN value is meaningless for a user-created LCR.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t21" headers="r1c1-t21">
<p><code dir="ltr">old_values</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t21 r1c2-t21">
<p>The column values for the row before the DML change</p>
<p>If the DML statement is an <code dir="ltr">UPDATE</code> or a <code dir="ltr">DELETE</code> statement, then this parameter contains the values of columns in the row before the DML statement. If the DML statement is an <code dir="ltr">INSERT</code> statement, then there are no old values.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t21" headers="r1c1-t21">
<p><code dir="ltr">new_values</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t21 r1c2-t21">
<p>The column values for the row after the DML change</p>
<p>If the DML statement is an <code dir="ltr">UPDATE</code> or an <code dir="ltr">INSERT</code> statement, then this parameter contains the values of columns in the row after the DML statement. If the DML statement is a <code dir="ltr">DELETE</code> statement, then there are no new values.</p>
<p>If the LCR reflects a LOB operation, then this parameter contains the supplementally logged columns and any relevant LOB information.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t21" headers="r1c1-t21">
<p><code dir="ltr">position</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t21 r1c2-t21">
<p>The position of the LCR</p>
<p>LCR position is commonly used in XStream configurations. Using XStream requires purchasing a license for the Oracle GoldenGate product.</p>
<p><span class="bold">See Also:</span> <a class="olink XSTRM1101" href="../XSTRM/xstrm_gen_cncpt.htm#XSTRM1101"><span class="italic">Oracle Database XStream Guide</span></a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t21" headers="r1c1-t21">
<p><code dir="ltr">root_name</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t21 r1c2-t21">
<p>If the LCRs is associated with a CDB, then this field specifies the global name of the root in the CDB.</p>
<p>If the LCR is associated with a non-CDB, then this field is <code dir="ltr">NULL</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect3" -->
<div id="ARPLS71863" class="refsect3"><a id="i997411"></a>
<h4 class="refsect3">Summary of LCR$_ROW_RECORD Subprograms</h4>
<div id="ARPLS71864" class="tblformal">
<p class="titleintable"><a id="sthref20493"></a><a id="sthref20494"></a>Table 275-13 LCR$_ROW_RECORD Type Subprograms</p>
<table class="cellalignment4330" title="LCR$_ROW_RECORD Type Subprograms" summary="This table describes the subprograms of the Logical Change Record Type LCR$_ROW_RECORD in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t22">Subprogram</th>
<th class="cellalignment4328" id="r1c2-t22">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t22" headers="r1c1-t22">
<p><a href="#BABCAHDI">ADD_COLUMN Member Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r2c1-t22 r1c2-t22">
<p>Adds the value as old or new, depending on the value type specified, for the column</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t22" headers="r1c1-t22">
<p><a href="#i1006662">CONVERT_LONG_TO_LOB_CHUNK Member Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r3c1-t22 r1c2-t22">
<p>Converts <code dir="ltr">LONG</code> data in a row LCR into fixed width <code dir="ltr">CLOB</code>, or converts <code dir="ltr">LONG</code> <code dir="ltr">RAW</code> data in a row LCR into a <code dir="ltr">BLOB</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t22" headers="r1c1-t22">
<p><a href="#i997627">DELETE_COLUMN Member Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r4c1-t22 r1c2-t22">
<p>Deletes the old value, the new value, or both, for the specified column, depending on the value type specified</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t22" headers="r1c1-t22">
<p><a href="#i997654">EXECUTE Member Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r5c1-t22 r1c2-t22">
<p>Executes the LCR under the security domain of the current user</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t22" headers="r1c1-t22">
<p><a href="#i997682">GET_LOB_INFORMATION Member Function</a></p>
</td>
<td class="cellalignment4329" headers="r6c1-t22 r1c2-t22">
<p>Gets the LOB information for the column</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t22" headers="r1c1-t22">
<p><a href="#i997727">GET_LOB_OFFSET Member Function</a></p>
</td>
<td class="cellalignment4329" headers="r7c1-t22 r1c2-t22">
<p>Gets the LOB offset for the specified column</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t22" headers="r1c1-t22">
<p><a href="#i997760">GET_LOB_OPERATION_SIZE Member Function</a></p>
</td>
<td class="cellalignment4329" headers="r8c1-t22 r1c2-t22">
<p>Gets the operation size for the <code dir="ltr">LOB</code> column</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t22" headers="r1c1-t22">
<p><a href="#i1007309">GET_LONG_INFORMATION Member Function</a></p>
</td>
<td class="cellalignment4329" headers="r9c1-t22 r1c2-t22">
<p>Gets the <code dir="ltr">LONG</code> information for the column</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t22" headers="r1c1-t22">
<p><a href="#BGBIJBEA">GET_ROW_TEXT Member Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r10c1-t22 r1c2-t22">
<p>Gets the SQL statement for the change that is encapsulated in the LCR</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t22" headers="r1c1-t22">
<p><a href="#i1007245">GET_VALUE Member Function</a></p>
</td>
<td class="cellalignment4329" headers="r11c1-t22 r1c2-t22">
<p>Gets the old or new value for the specified column, depending on the value type specified</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t22" headers="r1c1-t22">
<p><a href="#i997830">GET_VALUES Member Function</a></p>
</td>
<td class="cellalignment4329" headers="r12c1-t22 r1c2-t22">
<p>Gets a list of old or new values, depending on the value type specified</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t22" headers="r1c1-t22">
<p><a href="#BGBJFGFG">GET_WHERE_CLAUSE Member Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r13c1-t22 r1c2-t22">
<p>Gets a <code dir="ltr">WHERE</code> clause for the change that is encapsulated in the row LCR</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t22" headers="r1c1-t22">
<p><a href="#BABCBHDJ">GET_XML_INFORMATION Member Function</a></p>
</td>
<td class="cellalignment4329" headers="r14c1-t22 r1c2-t22">
<p>Gets the XML information for the specified column</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r15c1-t22" headers="r1c1-t22">
<p><a href="#BGBGGJGH">KEEP_COLUMNS Member Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r15c1-t22 r1c2-t22">
<p>Keeps a list of columns a row LCR</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r16c1-t22" headers="r1c1-t22">
<p><a href="#i997863">RENAME_COLUMN Member Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r16c1-t22 r1c2-t22">
<p>Renames a column in an LCR</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r17c1-t22" headers="r1c1-t22">
<p><a href="#i997898">SET_LOB_INFORMATION Member Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r17c1-t22 r1c2-t22">
<p>Sets LOB information for the column</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r18c1-t22" headers="r1c1-t22">
<p><a href="#i997941">SET_LOB_OFFSET Member Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r18c1-t22 r1c2-t22">
<p>Sets the LOB offset for the specified column</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r19c1-t22" headers="r1c1-t22">
<p><a href="#i997978">SET_LOB_OPERATION_SIZE Member Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r19c1-t22 r1c2-t22">
<p>Sets the operation size for the LOB column</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r20c1-t22" headers="r1c1-t22">
<p><a href="#i998016">SET_VALUE Member Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r20c1-t22 r1c2-t22">
<p>Overwrites the value of the specified column</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r21c1-t22" headers="r1c1-t22">
<p><a href="#BABDHHHG">SET_VALUES Member Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r21c1-t22 r1c2-t22">
<p>Replaces the existing old or new values for the LCR, depending on the value type specified</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r22c1-t22" headers="r1c1-t22">
<p><a href="#BABHAECE">SET_XML_INFORMATION Member Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r22c1-t22 r1c2-t22">
<p>Sets the XML information for the column</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r23c1-t22" headers="r1c1-t22">
<p>Common Subprograms</p>
</td>
<td class="cellalignment4329" headers="r23c1-t22 r1c2-t22">
<p>See <a href="#i998088">Common Subprograms for LCR$_DDL_RECORD and LCR$_ROW_RECORD</a> for a list of subprograms common to the <code dir="ltr">SYS.LCR$_ROW_RECORD</code> and <code dir="ltr">SYS.LCR$_DDL_RECORD</code> types</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BABCAHDI"></a>ADD_COLUMN Member Procedure<a id="sthref20495"></a><a id="sthref20496"></a></p>
<p>Adds the value as old or new, depending on the value type specified, for the column. An error is raised if a value of the same type already exists for the column.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
To set a column value that already exists, run <code dir="ltr">SET_VALUE</code>.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i998016">SET_VALUE Member Procedure</a></div>
<p class="subhead2"><a id="ARPLS71865"></a>Considerations for LOB Columns</p>
<p>When processing a row LCR with LOB columns with a procedure DML handler or error handler and the handler is using LOB assembly (the <code dir="ltr">assemble_lobs</code> parameter is set to <code dir="ltr">TRUE</code> for the handler), you use this member procedure in the handler procedure to add a LOB column to a row LCR. If <code dir="ltr">assemble_lobs</code> is set to <code dir="ltr">FALSE</code> for the handler, then you cannot use this member procedure to add a LOB column to a row&nbsp;LCR.</p>
<p>To use a DML or error handler to add a LOB column, specify the LOB locator for the <code dir="ltr">column_value</code> parameter in the member procedure. The <code dir="ltr">ADD_COLUMN</code> member procedure verifies that an <code dir="ltr">ANYDATA</code> encapsulated LOB locator is processed with a DML or error handler that is using LOB assembly. An error is raised under the following conditions:</p>
<ul>
<li>
<p>The handler attempts to enqueue a row LCR with an <code dir="ltr">ANYDATA</code> encapsulated LOB locator.</p>
</li>
<li>
<p>An attempt is made to add an LOB column that is set incorrectly.</p>
</li>
</ul>
<p>If an error is raised because of one of these conditions, then the transaction that includes the row LCR is moved to the error queue, and the LOB is represented by the original (nonassembled) row LCRs.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>Database compatibility must be <code dir="ltr">10.2.0</code> or higher to use LOB assembly.</p>
</li>
<li>
<p>When you are processing a row LCR with a rule-based transformation, you cannot use this member procedure to add a LOB column.</p>
</li>
<li>
<p>When you are processing a row LCR with a rule-based transformation, procedure DML handler, or error handler, you cannot use this member procedure to add a <code dir="ltr">LONG</code> or <code dir="ltr">LONG</code> <code dir="ltr">RAW</code> column.</p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20497"></a>Syntax</p>
<pre dir="ltr">MEMBER PROCEDURE ADD_COLUMN(
   value_type    IN  VARCHAR2,
   column_name   IN  VARCHAR2,
   column_value  IN  ANYDATA);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20498"></a>Parameters</p>
<div id="ARPLS71866" class="tblformal">
<p class="titleintable"><a id="sthref20499"></a><a id="sthref20500"></a>Table 275-14 ADD_COLUMN Procedure Parameters</p>
<table class="cellalignment4330" title="ADD_COLUMN Procedure Parameters" summary="This table describes the Parameters of the Logical Change Record Type LCR$_ROW_RECORD member subprogram ADD_COLUMN." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t26">Parameter</th>
<th class="cellalignment4328" id="r1c2-t26">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t26" headers="r1c1-t26">
<p><code dir="ltr">value_type</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t26 r1c2-t26">
<p>The type of value to add for the column</p>
<p>Specify <code dir="ltr">old</code> to add the old value of the column. Specify <code dir="ltr">new</code> to add the new value of the column.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t26" headers="r1c1-t26">
<p><code dir="ltr">column_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t26 r1c2-t26">
<p>The column name</p>
<p>This name is not validated. An error can be raised during application of the LCRs if an invalid name is specified.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t26" headers="r1c1-t26">
<p><code dir="ltr">column_value</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t26 r1c2-t26">
<p>The value of the column</p>
<p>If <code dir="ltr">NULL</code>, then this procedure raises an error.</p>
<p>If the member procedure is used in a procedure DML handler or error handler that uses LOB assembly, then a LOB locator can be specified.</p>
<p>A <code dir="ltr">NULL</code> column value can be specified by encapsulating the <code dir="ltr">NULL</code> value in an <code dir="ltr">ANYDATA</code> wrapper.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i1006662"></a>CONVERT_LONG_TO_LOB_CHUNK Member Procedure<a id="sthref20501"></a><a id="sthref20502"></a></p>
<p>Converts <code dir="ltr">LONG</code> data in a row LCR into a <code dir="ltr">CLOB</code>, or converts <code dir="ltr">LONG</code> <code dir="ltr">RAW</code> data in a row LCR into a <code dir="ltr">BLOB</code>.</p>
<p>This procedure can change the operation code from <code dir="ltr">LONG</code> <code dir="ltr">WRITE</code> to <code dir="ltr">LOB</code> <code dir="ltr">WRITE</code> for the row LCR.</p>
<p>This member procedure can be used in rule-based transformations.</p>
<p>The following restrictions apply to this member procedure:</p>
<ul>
<li>
<p>This member procedure cannot be used in apply handlers.</p>
</li>
<li>
<p><code dir="ltr">LONG</code> data can be sent as a part of a row LCR with one of the following operation codes: <code dir="ltr">INSERT</code>, <code dir="ltr">UPDATE</code>, or <code dir="ltr">LONG_WRITE</code>. Because <code dir="ltr">LONG</code> data can be sent in multiple pieces, make sure that this method is invoked on either none or all <code dir="ltr">LONG</code> pieces.</p>
</li>
<li>
<p>LOB to <code dir="ltr">LONG</code> conversion is not supported.</p>
</li>
<li>
<p>A row LCR on which this procedure is executed must have been created by a capture process. That is, this procedure does not support persistent row&nbsp;LCRs.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STREP137" href="../STREP/man_lcrs.htm#STREP137"><span class="italic">Oracle Streams Replication Administrator&#39;s Guide</span></a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20503"></a>Syntax</p>
<pre dir="ltr">MEMBER PROCEDURE CONVERT_LONG_TO_LOB_CHUNK;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i997627"></a>DELETE_COLUMN Member Procedure<a id="sthref20504"></a><a id="sthref20505"></a></p>
<p>Deletes the old value, the new value, or both, for the specified column, depending on the value type specified.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20506"></a>Syntax</p>
<pre dir="ltr">MEMBER PROCEDURE DELETE_COLUMN(
   column_name  IN  VARCHAR2,
   value_type   IN  VARCHAR2  DEFAULT &#39;*&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20507"></a>Parameters</p>
<div id="ARPLS71867" class="tblformal">
<p class="titleintable"><a id="sthref20508"></a><a id="sthref20509"></a>Table 275-15 DELETE_COLUMN Procedure Parameters</p>
<table class="cellalignment4330" title="DELETE_COLUMN Procedure Parameters" summary="This table describes the Parameters of the Logical Change Record Type LCR$_ROW_RECORD member subprogram DELETE_COLUMN." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t28">Parameter</th>
<th class="cellalignment4328" id="r1c2-t28">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t28" headers="r1c1-t28">
<p><code dir="ltr">column_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t28 r1c2-t28">
<p>The column name</p>
<p>An error is raised if the column does not exist in the LCR.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t28" headers="r1c1-t28">
<p><code dir="ltr">value_type</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t28 r1c2-t28">
<p>The type of value to delete for the column</p>
<p>Specify <code dir="ltr">old</code> to delete the old value of the column. Specify <code dir="ltr">new</code> to delete the new value of the column. If <code dir="ltr">*</code> is specified, then the procedure deletes both the old and new values.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i997654"></a>EXECUTE Member Procedure<a id="sthref20510"></a><a id="sthref20511"></a></p>
<p>Executes the row LCR under the security domain of the current user. Any apply handlers that would be run for an LCR are not run when the LCR is applied using this procedure.</p>
<p>This member procedure can be run on a row LCR under any of the following conditions:</p>
<ul>
<li>
<p>The LCR is being processed by an apply handler.</p>
</li>
<li>
<p>The LCR is in a queue and was last enqueued by a mechanism other than an Oracle Streams capture process, such as an Oracle Streams apply process or an application.</p>
</li>
<li>
<p>The LCR has been constructed using the <code dir="ltr">LCR$_ROW_RECORD</code> constructor function but has not been enqueued.</p>
</li>
<li>
<p>The LCR is in the error queue.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
Do not run this member procedure in a custom rule-based transformation on a row LCR. Doing so could execute the row LCR outside of its transactional context.</div>
<p class="subhead2"><a id="ARPLS71868"></a>Considerations for LOB Columns</p>
<p>When processing a row LCR with LOB columns with a procedure DML handler or error handler, and the handler is using LOB assembly (the <code dir="ltr">assemble_lobs</code> parameter is set to <code dir="ltr">TRUE</code> for the handler), this member procedure executes the assembled row LCR. An assembled row LCR represents a LOB value with a LOB locator or <code dir="ltr">NULL</code>.</p>
<p>If <code dir="ltr">assemble_lobs</code> is set to <code dir="ltr">FALSE</code> for the handler, then this member procedure executes the nonassembled row LCRs. Nonassembled row LCRs represent LOB values with <code dir="ltr">VARCHAR2</code> and <code dir="ltr">RAW</code> data types. These nonassembled row LCRs might have been modified by the handler.</p>
<p>An error is raised under the following conditions:</p>
<ul>
<li>
<p>A DML or error handler configured with <code dir="ltr">assemble_lobs</code> set to <code dir="ltr">FALSE</code> attempts to execute a row LCR that contains a LOB locator.</p>
</li>
<li>
<p>A DML or error handler configured with <code dir="ltr">assemble_lobs</code> set to <code dir="ltr">TRUE</code> attempts to execute a row LCR that contains one or more LOB values represented with <code dir="ltr">VARCHAR2</code> or <code dir="ltr">RAW</code> data types.</p>
</li>
</ul>
<p>If an error is raised because of one of these conditions, then the transaction that includes the row LCR is moved to the error queue, and the LOB is represented by the original (nonassembled) row LCRs.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20512"></a>Syntax</p>
<pre dir="ltr">MEMBER PROCEDURE EXECUTE(
   conflict_resolution  IN  BOOLEAN);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20513"></a>Parameters</p>
<div id="ARPLS71869" class="tblformal">
<p class="titleintable"><a id="sthref20514"></a><a id="sthref20515"></a>Table 275-16 EXECUTE Procedure Parameters</p>
<table class="cellalignment4330" title="EXECUTE Procedure Parameters" summary="This table describes the Parameters of the Logical Change Record Type LCR$_ROW_RECORD member subprogram EXECUTE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t30">Parameter</th>
<th class="cellalignment4328" id="r1c2-t30">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t30" headers="r1c1-t30">
<p><code dir="ltr">conflict_resolution</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t30 r1c2-t30">
<p>If <code dir="ltr">TRUE</code>, then any conflict resolution defined for the table using the <code dir="ltr">SET_UPDATE_CONFLICT_HANDLER</code> procedure in the <code dir="ltr">DBMS_APPLY_ADM</code> package is used to resolve conflicts resulting from the execution of the LCR.</p>
<p>If <code dir="ltr">FALSE</code>, then conflict resolution is not used.</p>
<p>An error is raised if this parameter is not specified or is set to <code dir="ltr">NULL</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i997682"></a>GET_LOB_INFORMATION Member Function<a id="sthref20516"></a><a id="sthref20517"></a></p>
<p>Gets the LOB information for the column.</p>
<p>The return value can be one of the following:</p>
<pre dir="ltr">DBMS_LCR.NOT_A_LOB        CONSTANT NUMBER := 1;
DBMS_LCR.NULL_LOB         CONSTANT NUMBER := 2;
DBMS_LCR.INLINE_LOB       CONSTANT NUMBER := 3;
DBMS_LCR.EMPTY_LOB        CONSTANT NUMBER := 4;
DBMS_LCR.LOB_CHUNK        CONSTANT NUMBER := 5;
DBMS_LCR.LAST_LOB_CHUNK   CONSTANT NUMBER := 6;
</pre>
<p>Returns <code dir="ltr">NULL</code> if the specified column does not exist.</p>
<p>If the command type of the row LCR is <code dir="ltr">UPDATE</code>, then specifying <code dir="ltr">&#39;Y&#39;</code> for the <code dir="ltr">use_old</code> parameter is a convenient way to get the value of the columns.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20518"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION GET_LOB_INFORMATION(
  value_type   IN  VARCHAR2,
  column_name  IN  VARCHAR2,
  use_old      IN  VARCHAR2  DEFAULT &#39;Y&#39;) 
RETURN NUMBER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20519"></a>Parameters</p>
<div id="ARPLS71870" class="tblformal">
<p class="titleintable"><a id="sthref20520"></a><a id="sthref20521"></a>Table 275-17 GET_LOB_INFORMATION Function Parameters</p>
<table class="cellalignment4330" title="GET_LOB_INFORMATION Function Parameters" summary="This table describes the Parameters of the Logical Change Record Type LCR$_ROW_RECORD member subprogram GET_LOB_INFORMATION." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t31">Parameter</th>
<th class="cellalignment4328" id="r1c2-t31">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t31" headers="r1c1-t31">
<p><code dir="ltr">value_type</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t31 r1c2-t31">
<p>The type of value to return for the column, either <code dir="ltr">old</code> or <code dir="ltr">new</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t31" headers="r1c1-t31">
<p><code dir="ltr">column_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t31 r1c2-t31">
<p>The name of the column</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t31" headers="r1c1-t31">
<p><code dir="ltr">use_old</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t31 r1c2-t31">
<p>If <code dir="ltr">Y</code> and <code dir="ltr">value_type</code> is <code dir="ltr">new</code>, and no new value exists, then the function returns the corresponding old value. If <code dir="ltr">N</code> and <code dir="ltr">value_type</code> is <code dir="ltr">new</code>, then the function does not return the old value if no new value exists.</p>
<p>If <code dir="ltr">value_type</code> is <code dir="ltr">old</code> or if the <code dir="ltr">command_type</code> of the row LCR is not <code dir="ltr">UPDATE</code>, then the function ignores the value of the <code dir="ltr">use_old</code> parameter.</p>
<p><code dir="ltr">NULL</code> is not a valid specification for the <code dir="ltr">use_old</code> parameter.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i997727"></a>GET_LOB_OFFSET Member Function<a id="sthref20522"></a><a id="sthref20523"></a></p>
<p>Gets the LOB offset for the specified column in the number of characters for <code dir="ltr">CLOB</code> columns and the number of bytes for <code dir="ltr">BLOB</code> columns. Returns a non-<code dir="ltr">NULL</code> value only if all of the following conditions are met:</p>
<ul>
<li>
<p>The value exists for the column</p>
</li>
<li>
<p>The column value is an out-of-line LOB. That is, the information is <code dir="ltr">DBMS_LCR.LAST_LOB_CHUNK</code> or <code dir="ltr">DBMS_LCR.LOB_CHUNK</code></p>
</li>
<li>
<p>The command type is <code dir="ltr">LOB</code> <code dir="ltr">ERASE</code> or <code dir="ltr">LOB</code> <code dir="ltr">WRITE</code></p>
</li>
</ul>
<p>Otherwise, returns <code dir="ltr">NULL</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20524"></a>Syntax</p>
<pre dir="ltr">GET_LOB_OFFSET(
   value_type   IN  VARCHAR2,
   column_name  IN  VARCHAR2) 
RETURN NUMBER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20525"></a>Parameters</p>
<div id="ARPLS71871" class="tblformal">
<p class="titleintable"><a id="sthref20526"></a><a id="sthref20527"></a>Table 275-18 GET_LOB_OFFSET Function Parameters</p>
<table class="cellalignment4330" title="GET_LOB_OFFSET Function Parameters" summary="This table describes the Parameters of the Logical Change Record Type LCR$_ROW_RECORD member subprogram GET_LOB_OFFSET." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t32">Parameter</th>
<th class="cellalignment4328" id="r1c2-t32">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t32" headers="r1c1-t32">
<p><code dir="ltr">value_type</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t32 r1c2-t32">
<p>The type of value to return for the column</p>
<p>Currently, only <code dir="ltr">new</code> can be specified.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t32" headers="r1c1-t32">
<p><code dir="ltr">column_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t32 r1c2-t32">
<p>The name of the LOB column</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i997760"></a>GET_LOB_OPERATION_SIZE Member Function<a id="sthref20528"></a><a id="sthref20529"></a></p>
<p>Gets the operation size for the LOB column in the number of characters for <code dir="ltr">CLOB</code> columns and the number of bytes for <code dir="ltr">BLOB</code> columns. Returns a non-<code dir="ltr">NULL</code> value only if all of the following conditions are met:</p>
<ul>
<li>
<p>The value exists for the column</p>
</li>
<li>
<p>The column value is an out-of-line LOB</p>
</li>
<li>
<p>The command type is <code dir="ltr">LOB</code> <code dir="ltr">ERASE</code> or <code dir="ltr">LOB</code> <code dir="ltr">TRIM</code></p>
</li>
<li>
<p>The information is <code dir="ltr">DBMS_LCR.LAST_LOB_CHUNK</code></p>
</li>
</ul>
<p>Otherwise, returns <code dir="ltr">NULL</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20530"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION GET_LOB_OPERATION_SIZE(
  value_type   IN  VARCHAR2,
  column_name  IN  VARCHAR2) 
RETURN NUMBER,
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20531"></a>Parameters</p>
<div id="ARPLS71872" class="tblformal">
<p class="titleintable"><a id="sthref20532"></a><a id="sthref20533"></a>Table 275-19 GET_LOB_OPERATION_SIZE Function Parameters</p>
<table class="cellalignment4330" title="GET_LOB_OPERATION_SIZE Function Parameters" summary="This table describes the Parameters of the Logical Change Record Type LCR$_ROW_RECORD member subprogram GET_LOB_OPERATION." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t33">Parameter</th>
<th class="cellalignment4328" id="r1c2-t33">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t33" headers="r1c1-t33">
<p><code dir="ltr">value_type</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t33 r1c2-t33">
<p>The type of value to return for the column</p>
<p>Currently, only <code dir="ltr">new</code> can be specified.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t33" headers="r1c1-t33">
<p><code dir="ltr">column_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t33 r1c2-t33">
<p>The name of the LOB column</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i1007309"></a>GET_LONG_INFORMATION Member Function<a id="sthref20534"></a><a id="sthref20535"></a></p>
<p>Gets the <code dir="ltr">LONG</code> information for the column.</p>
<p>The return value can be one of the following:</p>
<pre dir="ltr">DBMS_LCR.NOT_A_LONG        CONSTANT NUMBER := 1;
DBMS_LCR.NULL_LONG         CONSTANT NUMBER := 2;
DBMS_LCR.INLINE_LONG       CONSTANT NUMBER := 3;
DBMS_LCR.LONG_CHUNK        CONSTANT NUMBER := 4;
DBMS_LCR.LAST_LONG_CHUNK   CONSTANT NUMBER := 5;
</pre>
<p>Returns <code dir="ltr">NULL</code> if the specified column does not exist.</p>
<p>If the command type of the row LCR is <code dir="ltr">UPDATE</code>, then specifying <code dir="ltr">&#39;Y&#39;</code> for the <code dir="ltr">use_old</code> parameter is a convenient way to get the value of the columns.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20536"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION GET_LONG_INFORMATION(
  value_type   IN  VARCHAR2,
  column_name  IN  VARCHAR2,
  use_old      IN  VARCHAR2  DEFAULT &#39;Y&#39;) 
RETURN NUMBER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20537"></a>Parameters</p>
<div id="ARPLS71873" class="tblformal">
<p class="titleintable"><a id="sthref20538"></a><a id="sthref20539"></a>Table 275-20 GET_LONG_INFORMATION Function Parameters</p>
<table class="cellalignment4330" title="GET_LONG_INFORMATION Function Parameters" summary="This table describes the Parameters of the Logical Change Record Type LCR$_ROW_RECORD member subprogram GET_LONG_INFORMATION." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t34">Parameter</th>
<th class="cellalignment4328" id="r1c2-t34">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t34" headers="r1c1-t34">
<p><code dir="ltr">value_type</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t34 r1c2-t34">
<p>The type of value to return for the column, either <code dir="ltr">old</code> or <code dir="ltr">new</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t34" headers="r1c1-t34">
<p><code dir="ltr">column_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t34 r1c2-t34">
<p>The name of the column</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t34" headers="r1c1-t34">
<p><code dir="ltr">use_old</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t34 r1c2-t34">
<p>If <code dir="ltr">Y</code> and <code dir="ltr">value_type</code> is <code dir="ltr">new</code>, and no new value exists, then the function returns the corresponding old value. If <code dir="ltr">N</code> and <code dir="ltr">value_type</code> is <code dir="ltr">new</code>, then the function does not return the old value if no new value exists.</p>
<p>If <code dir="ltr">value_type</code> is <code dir="ltr">old</code> or if the <code dir="ltr">command_type</code> of the row LCR is not <code dir="ltr">UPDATE</code>, then the function ignores the value of the <code dir="ltr">use_old</code> parameter.</p>
<p><code dir="ltr">NULL</code> is not a valid specification for the <code dir="ltr">use_old</code> parameter.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BGBIJBEA"></a>GET_ROW_TEXT Member Procedure<a id="sthref20540"></a><a id="sthref20541"></a><a id="sthref20542"></a></p>
<p>Gets the SQL statement for the change that is encapsulated in the row LCR. This method performs SQL generation in PL/SQL.</p>
<p>This method is overloaded. The different functionality of each form of syntax is presented along with the definitions.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20543"></a>Syntax</p>
<p>The following procedure returns the SQL statement in a <code dir="ltr">CLOB</code> datatype.</p>
<pre dir="ltr">MEMBER PROCEDURE GET_ROW_TEXT(
   row_text  IN/OUT  CLOB);
</pre>
<p>The following procedure returns the SQL statement with bind variables in a <code dir="ltr">CLOB</code> datatype.</p>
<pre dir="ltr">MEMBER PROCEDURE GET_ROW_TEXT(
   row_text         IN/OUT  CLOB,
   variable_list    IN/OUT  LCR$_ROW_LIST,
   bind_var_syntax  IN      VARCHAR2  DEFAULT &#39;:&#39;);
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABFHHIF">&#34;LCR$_ROW_LIST Type&#34;</a></div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20544"></a>Parameters</p>
<div id="ARPLS71874" class="tblformal">
<p class="titleintable"><a id="sthref20545"></a><a id="sthref20546"></a>Table 275-21 GET_ROW_TEXT Procedure Parameters</p>
<table class="cellalignment4330" title="GET_ROW_TEXT Procedure Parameters" summary="This table describes the Parameters of the Logical Change Record Type LCR$_ROW_RECORD member subprogram GET_ROW_TEXT." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t36">Parameter</th>
<th class="cellalignment4328" id="r1c2-t36">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t36" headers="r1c1-t36">
<p><code dir="ltr">row_text</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t36 r1c2-t36">
<p>The SQL statement for the change that is encapsulated in the LCR</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t36" headers="r1c1-t36">
<p><code dir="ltr">variable_list</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t36 r1c2-t36">
<p>The values for the bind variables in the order of the bind variables</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t36" headers="r1c1-t36">
<p><code dir="ltr">bind_var_syntax</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t36 r1c2-t36">
<p>The syntax for the bind variables</p>
<p>One of the following values is valid:</p>
<ul>
<li>
<p>Specify <code dir="ltr">:</code>, the default, for bind values to be in the form <code dir="ltr">:1</code>, <code dir="ltr">:2</code>, and so on.</p>
</li>
<li>
<p>Specify <code dir="ltr">?</code> for bind values to be in the form <code dir="ltr">?</code>.</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i1007245"></a>GET_VALUE Member Function<a id="sthref20547"></a><a id="sthref20548"></a></p>
<p>Gets the old or new value for the specified column, depending on the value type specified.</p>
<p>If the command type of the row LCR is <code dir="ltr">UPDATE</code>, then specifying <code dir="ltr">&#39;Y&#39;</code> for the <code dir="ltr">use_old</code> parameter is a convenient way to get the value of a column.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20549"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION GET_VALUE(
   value_type   IN  VARCHAR2,
   column_name  IN  VARCHAR2,
   use_old      IN  VARCHAR2  DEFAULT &#39;Y&#39;) 
RETURN ANYDATA;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20550"></a>Parameters</p>
<div id="ARPLS71875" class="tblformal">
<p class="titleintable"><a id="sthref20551"></a><a id="sthref20552"></a>Table 275-22 GET_VALUE Function Parameters</p>
<table class="cellalignment4330" title="GET_VALUE Function Parameters" summary="This table describes the Parameters of the Logical Change Record Type LCR$_ROW_RECORD member subprogram GET_VALUE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t37">Parameter</th>
<th class="cellalignment4328" id="r1c2-t37">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t37" headers="r1c1-t37">
<p><code dir="ltr">value_type</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t37 r1c2-t37">
<p>The type of value to return for the column</p>
<p>Specify <code dir="ltr">old</code> to get the old value for the column. Specify <code dir="ltr">new</code> to get the new value for the column.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t37" headers="r1c1-t37">
<p><code dir="ltr">column_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t37 r1c2-t37">
<p>The column name</p>
<p>If the column is present and has a <code dir="ltr">NULL</code> value, then the function returns an <code dir="ltr">ANYDATA</code> instance containing a <code dir="ltr">NULL</code> value. If the column value is absent, then the function returns a <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t37" headers="r1c1-t37">
<p><code dir="ltr">use_old</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t37 r1c2-t37">
<p>If <code dir="ltr">Y</code> and <code dir="ltr">value_type</code> is <code dir="ltr">new</code>, and no new value exists, then the function returns the corresponding old value.</p>
<p>If <code dir="ltr">N</code> and <code dir="ltr">value_type</code> is <code dir="ltr">new</code>, then the function returns <code dir="ltr">NULL</code> if no new value exists.</p>
<p>If <code dir="ltr">value_type</code> is <code dir="ltr">old</code> or if the <code dir="ltr">command_type</code> of the row LCR is not <code dir="ltr">UPDATE</code>, then the function ignores the value of the <code dir="ltr">use_old</code> parameter.</p>
<p><code dir="ltr">NULL</code> is not a valid specification for the <code dir="ltr">use_old</code> parameter.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i997830"></a>GET_VALUES Member Function<a id="sthref20553"></a><a id="sthref20554"></a></p>
<p>Gets a list of old or new values, depending on the value type specified.</p>
<p>If the command type of the row LCR is <code dir="ltr">UPDATE</code>, then specifying <code dir="ltr">&#39;Y&#39;</code> for the <code dir="ltr">use_old</code> parameter is a convenient way to get the values of all columns.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20555"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION GET_VALUES(
   value_type  IN  VARCHAR2,
   use_old     IN  VARCHAR2  DEFAULT &#39;Y&#39;)
RETURN SYS.LCR$_ROW_LIST;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20556"></a>Parameters</p>
<div id="ARPLS71876" class="tblformal">
<p class="titleintable"><a id="sthref20557"></a><a id="sthref20558"></a>Table 275-23 GET_VALUES Function Parameters</p>
<table class="cellalignment4330" title="GET_VALUES Function Parameters" summary="This table describes the Parameters of the Logical Change Record Type LCR$_ROW_RECORD member subprogram GET_VALUES." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t38">Parameter</th>
<th class="cellalignment4328" id="r1c2-t38">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t38" headers="r1c1-t38">
<p><code dir="ltr">value_type</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t38 r1c2-t38">
<p>The type of values to return</p>
<p>Specify <code dir="ltr">old</code> to return a list of old values. Specify <code dir="ltr">new</code> to return a list of new values.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t38" headers="r1c1-t38">
<p><code dir="ltr">use_old</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t38 r1c2-t38">
<p>If <code dir="ltr">Y</code> and <code dir="ltr">value_type</code> is <code dir="ltr">new</code>, then the function returns a list of all new values in the LCR. If a new value does not exist in the list, then the function returns the corresponding old value. Therefore, the returned list contains all existing new values and the old values where there are no new values.</p>
<p>If <code dir="ltr">N</code> and <code dir="ltr">value_type</code> is <code dir="ltr">new</code>, then the function returns a list of all new values in the LCR without returning any old values.</p>
<p>If <code dir="ltr">value_type</code> is <code dir="ltr">old</code> or if the <code dir="ltr">command_type</code> of the row LCR is not <code dir="ltr">UPDATE</code>, then the function ignores the value of the <code dir="ltr">use_old</code> parameter.</p>
<p><code dir="ltr">NULL</code> is not a valid specification for the <code dir="ltr">use_old</code> parameter.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BGBJFGFG"></a>GET_WHERE_CLAUSE Member Procedure<a id="sthref20559"></a><a id="sthref20560"></a><a id="sthref20561"></a></p>
<p>Gets a <code dir="ltr">WHERE</code> clause for the change that is encapsulated in the row LCR.</p>
<p>Use the <code dir="ltr">WHERE</code> clause returned by <code dir="ltr">GET_WHERE_CLAUSE</code> instead of using the <code dir="ltr">ROWID</code>, because the <code dir="ltr">ROWID</code> is not ANSI compatible. The generated <code dir="ltr">WHERE</code> clause might not match the <code dir="ltr">WHERE</code> clause in the original DML operation.</p>
<p>The <code dir="ltr">ROWID</code> of an <code dir="ltr">INSERT</code> statement is the <code dir="ltr">ROWID</code> of the new row created by the <code dir="ltr">INSERT</code>. The <code dir="ltr">WHERE</code> clause generated for an <code dir="ltr">INSERT</code> operation identifies the new row. Therefore, the generated <code dir="ltr">WHERE</code> clause includes all of the new values inserted.</p>
<p>For example, consider the following insert into the <code dir="ltr">hr.departments</code> table:</p>
<pre dir="ltr">INSERT INTO hr.departments (
   department_id, department_name, manager_id, location_id) 
   VALUES (10, &#39;HR&#39;, 20, 40);
</pre>
<p>The generated <code dir="ltr">WHERE</code> clause represents the row with the values <code dir="ltr">10</code>, <code dir="ltr">&#39;HR&#39;</code>, <code dir="ltr">20</code>, and <code dir="ltr">40</code>. Hence, the generated <code dir="ltr">WHERE</code> clause is the following:</p>
<pre dir="ltr">WHERE &#34;DEPARTMENT_ID&#34; = 10 AND &#34;DEPARTMENT_NAME&#34; = &#39;HR&#39; AND
      &#34;MANAGER_ID&#34; = 20 AND &#34;LOCATION_ID&#34; = 40
</pre>
<p>The <code dir="ltr">ROWID</code> of an <code dir="ltr">UPDATE</code> statement is the <code dir="ltr">ROWID</code> of the row that was updated. The <code dir="ltr">WHERE</code> clause generated for an <code dir="ltr">UPDATE</code> operation identifies the row after the <code dir="ltr">UPDATE</code> executes. The generated <code dir="ltr">WHERE</code> clause is based on the old and new values of the <code dir="ltr">UPDATE</code>.</p>
<p>For example, consider the following update to the <code dir="ltr">hr.departments</code> table:</p>
<pre dir="ltr">UPDATE hr.departments SET department_name=&#39;Management&#39;
 WHERE department_name=&#39;Administration&#39; AND location_id = 20 AND
       manager_id = 30 AND department_id = 10;
</pre>
<p>The values of the row after the <code dir="ltr">UPDATE</code> are <code dir="ltr">10</code>, <code dir="ltr">&#39;Management&#39;</code>, <code dir="ltr">30</code>, and <code dir="ltr">20</code>. Hence, the generated <code dir="ltr">WHERE</code> clause to identify the row is the following:</p>
<pre dir="ltr">WHERE &#34;DEPARTMENT_ID&#34; = 10 AND &#34;DEPARTMENT_NAME&#34; = &#39;MANAGEMENT&#39; AND
      &#34;MANAGER_ID&#34; = 30 AND &#34;LOCATION_ID&#34; = 20
</pre>
<p>Notice that the new value is used for <code dir="ltr">&#34;DEPARTMENT_NAME&#34;</code>, because the new value is the value of the column after the <code dir="ltr">UPDATE</code>. For the rest of the columns, the old values are used.</p>
<p>The <code dir="ltr">ROWID</code> of a <code dir="ltr">DELETE</code> operation is the row that existed before it was deleted. The generated <code dir="ltr">WHERE</code> clause consists of all the old column values present in the <code dir="ltr">DELETE</code> operation.</p>
<p>LOB columns do not appear in generated <code dir="ltr">WHERE</code> clauses. The generated <code dir="ltr">WHERE</code> clause is not affected by the presence of LOB columns in the LCR.</p>
</div>
<!-- class="refsubsect" -->
<p>This method is overloaded. The different functionality of each form of syntax is presented along with the definitions.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20562"></a>Syntax</p>
<p>The following procedure returns the <code dir="ltr">WHERE</code> clause of a SQL statement in a <code dir="ltr">CLOB</code> datatype.</p>
<pre dir="ltr">MEMBER PROCEDURE GET_WHERE_CLAUSE(
   where_clause  IN/OUT  CLOB);
</pre>
<p>The following procedure returns the <code dir="ltr">WHERE</code> clause of a SQL statement with bind variables in a <code dir="ltr">CLOB</code> datatype.</p>
<pre dir="ltr">MEMBER PROCEDURE GET_WHERE_CLAUSE(
   where_clause     IN/OUT  CLOB,
   variable_list    IN/OUT  LCR$_ROW_LIST,
   bind_var_syntax  IN      VARCHAR2  DEFAULT &#39;:&#39;);
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#BABFHHIF">LCR$_ROW_LIST Type</a></p>
</li>
<li>
<p><a class="olink STRMS1614" href="../STRMS/strms_apply.htm#STRMS1614"><span class="italic">Oracle Streams Concepts and Administration</span></a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20563"></a>Parameters</p>
<div id="ARPLS72454" class="tblformal">
<p class="titleintable"><a id="sthref20564"></a><a id="sthref20565"></a>Table 275-24 GET_WHERE_CLAUSE Procedure Parameters</p>
<table class="cellalignment4330" title="GET_WHERE_CLAUSE Procedure Parameters" summary="This table describes the Parameters of the Logical Change Record Type LCR$_ROW_RECORD member subprogram GET_WHERE_CLAUSE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t40">Parameter</th>
<th class="cellalignment4328" id="r1c2-t40">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t40" headers="r1c1-t40">
<p><code dir="ltr">where_clause</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t40 r1c2-t40">
<p>The <code dir="ltr">WHERE</code> clause of the SQL statement for the change that is encapsulated in the LCR</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t40" headers="r1c1-t40">
<p><code dir="ltr">variable_list</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t40 r1c2-t40">
<p>The values for the bind variables in the order of the bind variables</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t40" headers="r1c1-t40">
<p><code dir="ltr">bind_var_syntax</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t40 r1c2-t40">
<p>The syntax for the bind variables</p>
<p>One of the following values is valid:</p>
<ul>
<li>
<p>Specify <code dir="ltr">:</code>, the default, for bind values to be in the form <code dir="ltr">:1</code>, <code dir="ltr">:2</code>, and so on.</p>
</li>
<li>
<p>Specify <code dir="ltr">?</code> for bind values to be in the form <code dir="ltr">?</code>.</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BABCBHDJ"></a>GET_XML_INFORMATION Member Function<a id="sthref20566"></a><a id="sthref20567"></a></p>
<p>Gets the XML information for the specified column.</p>
<p>The return value can be one of the following:</p>
<pre dir="ltr">DBMS_LCR.NOT_XML   CONSTANT NUMBER := 1;
DBMS_LCR.XML_DOC   CONSTANT NUMBER := 2;
DBMS_LCR.XML_DIFF  CONSTANT NUMBER := 3;
</pre></div>
<!-- class="refsubsect" -->
<p><code dir="ltr">DBMS_LCR.NOT_XML</code> indicates that the column is not an <code dir="ltr">XMLType</code> column.</p>
<p><code dir="ltr">DBMS_LCR.XML_DOC</code> indicates that the column contains an XML document.</p>
<p><code dir="ltr">DBMS_LCR.XML_DIFF</code> indicates that the column contains an XML document that describes a change made by an update operation. This XML document describes the differences in the column&#39;s XML document. The entire XML document is not replaced.</p>
<p>Returns <code dir="ltr">NULL</code> if the specified column does not exist.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20568"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION GET_XML_INFORMATION(
   column_name  IN  VARCHAR2)
RETURN NUMBER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20569"></a>Parameter</p>
<div id="ARPLS71877" class="tblformal">
<p class="titleintable"><a id="sthref20570"></a><a id="sthref20571"></a>Table 275-25 GET_XML_INFORMATION Function Parameter</p>
<table class="cellalignment4330" title="GET_XML_INFORMATION Function Parameter" summary="This table describes the Parameters of the Logical Change Record Type LCR$_ROW_RECORD member subprogram GET_VALUES." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t41">Parameter</th>
<th class="cellalignment4328" id="r1c2-t41">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t41" headers="r1c1-t41">
<p><code dir="ltr">column_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t41 r1c2-t41">
<p>The column name</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BGBGGJGH"></a>KEEP_COLUMNS Member Procedure<a id="sthref20572"></a><a id="sthref20573"></a></p>
<p>This procedure keeps a list of columns in a row LCR. The procedure deletes columns that are not in the list from the row LCR.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20574"></a>Syntax</p>
<pre dir="ltr">MEMBER PROCEDURE KEEP_COLUMNS(
   column_list  IN  VARCHAR2,
   value_type   IN  VARCHAR2  DEFAULT &#39;*&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20575"></a>Parameters</p>
<div id="ARPLS71878" class="tblformal">
<p class="titleintable"><a id="sthref20576"></a><a id="sthref20577"></a>Table 275-26 KEEP_COLUMNS Procedure Parameters</p>
<table class="cellalignment4330" title="KEEP_COLUMNS Procedure Parameters" summary="This table describes the Parameters of the Logical Change Record Type LCR$_ROW_RECORD member subprogram KEEP_COLUMNS." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t42">Parameter</th>
<th class="cellalignment4328" id="r1c2-t42">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t42" headers="r1c1-t42">
<p><code dir="ltr">column_list</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t42 r1c2-t42">
<p>The names of the columns kept for the row LCR</p>
<p>Specify a comma-delimited list of type <code dir="ltr">VARCHAR2</code>. This procedure removes columns that are not in the list from the current row LCR.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t42" headers="r1c1-t42">
<p><code dir="ltr">value_type</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t42 r1c2-t42">
<p>The type of value for which to keep the columns</p>
<p>Specify <code dir="ltr">old</code> to keep the old values of the columns. An error is raised if the old values do not exist in the LCR.</p>
<p>Specify <code dir="ltr">new</code> to keep the new values of the columns. An error is raised if the new values do not exist in the LCR.</p>
<p>If <code dir="ltr">*</code> is specified, then the procedure keeps both the old and the new columns.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i997863"></a>RENAME_COLUMN Member Procedure<a id="sthref20578"></a><a id="sthref20579"></a></p>
<p>Renames a column in a row LCR.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20580"></a>Syntax</p>
<pre dir="ltr">MEMBER PROCEDURE RENAME_COLUMN(
   from_column_name  IN  VARCHAR2,
   to_column_name    IN  VARCHAR2,
   value_type        IN  VARCHAR2  DEFAULT &#39;*&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20581"></a>Parameters</p>
<div id="ARPLS71879" class="tblformal">
<p class="titleintable"><a id="sthref20582"></a><a id="sthref20583"></a>Table 275-27 RENAME_COLUMN Procedure Parameters</p>
<table class="cellalignment4330" title="RENAME_COLUMN Procedure Parameters" summary="This table describes the Parameters of the Logical Change Record Type LCR$_ROW_RECORD member subprogram RENAME_COLUMN." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t43">Parameter</th>
<th class="cellalignment4328" id="r1c2-t43">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t43" headers="r1c1-t43">
<p><code dir="ltr">from_column_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t43 r1c2-t43">
<p>The existing column name</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t43" headers="r1c1-t43">
<p><code dir="ltr">to_column_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t43 r1c2-t43">
<p>The new column name</p>
<p>An error is raised if a column with the specified name already exists.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t43" headers="r1c1-t43">
<p><code dir="ltr">value_type</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t43 r1c2-t43">
<p>The type of value for which to rename the column</p>
<p>Specify <code dir="ltr">old</code> to rename the old value of the column. An error is raised if the old value does not exist in the LCR.</p>
<p>Specify <code dir="ltr">new</code> to rename the new value of the column. An error is raised if the new value does not exist in the LCR.</p>
<p>If <code dir="ltr">*</code> is specified, then the procedure renames the column names for both old and new value. The procedure raises an error if either column value does not exist in the LCR.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i997898"></a>SET_LOB_INFORMATION Member Procedure<a id="sthref20584"></a><a id="sthref20585"></a></p>
<p>Sets LOB information for the column.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When you are processing a row LCR with a rule-based transformation, procedure DML handler, or error handler, you cannot use this member procedure.</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20586"></a>Syntax</p>
<pre dir="ltr">MEMBER PROCEDURE SET_LOB_INFORMATION(
  value_type       IN  VARCHAR2,
  column_name      IN  VARCHAR2,
  lob_information  IN  NUMBER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20587"></a>Parameters</p>
<div id="ARPLS71880" class="tblformal">
<p class="titleintable"><a id="sthref20588"></a><a id="sthref20589"></a>Table 275-28 SET_LOB_INFORMATION Procedure Parameters</p>
<table class="cellalignment4330" title="SET_LOB_INFORMATION Procedure Parameters" summary="This table describes the Parameters of the Logical Change Record Type LCR$_ROW_RECORD member subprogram SET_LOB_INFORMATION." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t45">Parameter</th>
<th class="cellalignment4328" id="r1c2-t45">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t45" headers="r1c1-t45">
<p><code dir="ltr">value_type</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t45 r1c2-t45">
<p>The type of value to set for the column, either <code dir="ltr">old</code> or <code dir="ltr">new</code></p>
<p>Specify <code dir="ltr">old</code> only if <code dir="ltr">lob_information</code> is set to <code dir="ltr">DBMS_LCR.NOT_A_LOB</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t45" headers="r1c1-t45">
<p><code dir="ltr">column_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t45 r1c2-t45">
<p>The name of the column.</p>
<p>An exception is raised if the column value does not exist. You might need to set this parameter for non-LOB columns.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t45" headers="r1c1-t45">
<p><code dir="ltr">lob_information</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t45 r1c2-t45">
<p>Specify one of the following values:</p>
<pre dir="ltr">  DBMS_LCR.NOT_A_LOB        CONSTANT NUMBER := 1;
  DBMS_LCR.NULL_LOB         CONSTANT NUMBER := 2;
  DBMS_LCR.INLINE_LOB       CONSTANT NUMBER := 3;
  DBMS_LCR.EMPTY_LOB        CONSTANT NUMBER := 4;
  DBMS_LCR.LOB_CHUNK        CONSTANT NUMBER := 5;
  DBMS_LCR.LAST_LOB_CHUNK   CONSTANT NUMBER := 6;
</pre></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i997941"></a>SET_LOB_OFFSET Member Procedure<a id="sthref20590"></a><a id="sthref20591"></a></p>
<p>Sets the LOB offset for the specified column in the number of characters for <code dir="ltr">CLOB</code> columns and the number of bytes for <code dir="ltr">BLOB</code> columns.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When you are processing a row LCR with a rule-based transformation, procedure DML handler, or error handler, you cannot use this member procedure.</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20592"></a>Syntax</p>
<pre dir="ltr">MEMBER PROCEDURE SET_LOB_OFFSET(
   value_type   IN  VARCHAR2,
   column_name  IN  VARCHAR2,
   lob_offset   IN  NUMBER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20593"></a>Parameters</p>
<div id="ARPLS71881" class="tblformal">
<p class="titleintable"><a id="sthref20594"></a><a id="sthref20595"></a>Table 275-29 SET_LOB_OFFSET Procedure Parameters</p>
<table class="cellalignment4330" title="SET_LOB_OFFSET Procedure Parameters" summary="This table describes the Parameters of the Logical Change Record Type LCR$_ROW_RECORD member subprogram SET_LOB_OFFSET." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t47">Parameter</th>
<th class="cellalignment4328" id="r1c2-t47">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t47" headers="r1c1-t47">
<p><code dir="ltr">value_type</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t47 r1c2-t47">
<p>The type of value to set for the column</p>
<p>Currently, only <code dir="ltr">new</code> can be specified.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t47" headers="r1c1-t47">
<p><code dir="ltr">column_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t47 r1c2-t47">
<p>The column name</p>
<p>An error is raised if the column value does not exist in the LCR.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t47" headers="r1c1-t47">
<p><code dir="ltr">lob_offset</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t47 r1c2-t47">
<p>The LOB offset number</p>
<p>Valid values are <code dir="ltr">NULL</code> or a positive integer less than or equal to <code dir="ltr">DBMS_LOB.LOBMAXSIZE</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i997978"></a>SET_LOB_OPERATION_SIZE Member Procedure<a id="sthref20596"></a><a id="sthref20597"></a></p>
<p>Sets the operation size for the LOB column in the number of characters for <code dir="ltr">CLOB</code> columns and bytes for <code dir="ltr">BLOB</code> columns.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When you are processing a row LCR with a rule-based transformation, procedure DML handler, or error handler, you cannot use this member procedure.</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20598"></a>Syntax</p>
<pre dir="ltr">MEMBER PROCEDURE SET_LOB_OPERATION_SIZE(
  value_type          IN  VARCHAR2,
  column_name         IN  VARCHAR2,
  lob_operation_size  IN  NUMBER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20599"></a>Parameters</p>
<div id="ARPLS71882" class="tblformal">
<p class="titleintable"><a id="sthref20600"></a><a id="sthref20601"></a>Table 275-30 SET_LOB_OPERATION_SIZE Procedure Parameters</p>
<table class="cellalignment4330" title="SET_LOB_OPERATION_SIZE Procedure Parameters" summary="This table describes the Parameters of the Logical Change Record Type LCR$_ROW_RECORD member subprogram SET_LOB_OPERATION_SIZE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t49">Parameter</th>
<th class="cellalignment4328" id="r1c2-t49">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t49" headers="r1c1-t49">
<p><code dir="ltr">value_type</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t49 r1c2-t49">
<p>The type of value to set for the column</p>
<p>Currently, only <code dir="ltr">new</code> can be specified.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t49" headers="r1c1-t49">
<p><code dir="ltr">column_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t49 r1c2-t49">
<p>The name of the LOB column</p>
<p>An exception is raised if the column value does not exist in the LCR.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t49" headers="r1c1-t49">
<p><code dir="ltr">lob_operation_size</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t49 r1c2-t49">
<p>If <code dir="ltr">lob_information</code> for the LOB is or will be <code dir="ltr">DBMS_LCR.LAST_LOB_CHUNK</code>, then this parameter can be set to either a valid <code dir="ltr">LOB</code>&nbsp;<code dir="ltr">ERASE</code> value or a valid <code dir="ltr">LOB</code> <code dir="ltr">TRIM</code> value. A <code dir="ltr">LOB</code> <code dir="ltr">ERASE</code> value must be a positive integer less than or equal to <code dir="ltr">DBMS_LOB.LOBMAXSIZE</code>. A <code dir="ltr">LOB TRIM</code> value must be a nonnegative integer less than or equal to <code dir="ltr">DBMS_LOB.LOBMAXSIZE</code>.</p>
<p>Otherwise, set to <code dir="ltr">NULL</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i998016"></a>SET_VALUE Member Procedure<a id="sthref20602"></a><a id="sthref20603"></a></p>
<p>Overwrites the old or new value of the specified column.</p>
<p>One reason to overwrite an old value for a column is to resolve an error that resulted from a conflict.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
To add a column to a row LCR, run <code dir="ltr">ADD_COLUMN</code>.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABCAHDI">ADD_COLUMN Member Procedure</a></div>
<p class="subhead2"><a id="ARPLS71883"></a>Considerations for LOB Columns</p>
<p>When processing a row LCR with LOB columns with a procedure DML handler or error handler, and the handler is using LOB assembly (the <code dir="ltr">assemble_lobs</code> parameter is set to <code dir="ltr">TRUE</code> for the handler), you can use this member procedure in the handler procedure on a LOB column in a row LCR. If <code dir="ltr">assemble_lobs</code> is set to <code dir="ltr">FALSE</code> for the handler, then you cannot use this member procedure on a LOB column.</p>
<p>To use a DML or error handler to set the value of a LOB column, specify the LOB locator for the <code dir="ltr">column_value</code> parameter in the member procedure. The <code dir="ltr">SET_VALUE</code> member procedure verifies that an <code dir="ltr">ANYDATA</code> encapsulated LOB locator is processed with a DML or error handler that is using LOB assembly. An error is raised under the following conditions:</p>
<ul>
<li>
<p>The handler attempts to enqueue a row LCR with an <code dir="ltr">ANYDATA</code> encapsulated LOB locator.</p>
</li>
<li>
<p>An attempt is made to set a LOB column incorrectly.</p>
</li>
</ul>
<p>If an error is raised because of one of these conditions, then the transaction that includes the row LCR is moved to the error queue, and the LOB is represented by the original (nonassembled) row LCRs.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>Database compatibility must be <code dir="ltr">10.2.0</code> or higher to use LOB assembly.</p>
</li>
<li>
<p>When you are processing a row LCR with a rule-based transformation, you cannot use this member procedure on a LOB column.</p>
</li>
<li>
<p>When you are processing a row LCR with a rule-based transformation, procedure DML handler, or error handler, you cannot use this member procedure on a <code dir="ltr">LONG</code> or <code dir="ltr">LONG</code> <code dir="ltr">RAW</code> column.</p>
</li>
</ul>
</div>
<p class="subhead2"><a id="ARPLS71884"></a>Considerations for XMLType Columns</p>
<p>When processing a row LCR with <code dir="ltr">XMLType</code> columns with a procedure DML handler or error handler, any <code dir="ltr">XMLType</code> columns and LOB columns in the LCR are always assembled using LOB assembly. You can use this member procedure in the handler procedure on a row LCR that contains one or more <code dir="ltr">XMLType</code> columns.</p>
<p>To use a DML or error handler to set the value an <code dir="ltr">XMLType</code> column, specify the <code dir="ltr">XMLType</code> for the <code dir="ltr">column_value</code> parameter. The <code dir="ltr">SET_VALUE</code> member procedure verifies that an <code dir="ltr">ANYDATA</code> encapsulated <code dir="ltr">XMLType</code> is processed with a DML or error handler. An error is raised under the following conditions:</p>
<ul>
<li>
<p>The handler attempts to enqueue a row LCR with an <code dir="ltr">ANYDATA</code> encapsulated <code dir="ltr">XMLType</code>.</p>
</li>
<li>
<p>An attempt is made to set a <code dir="ltr">XMLType</code> column incorrectly.</p>
</li>
</ul>
<p>If an error is raised because of one of these conditions, then the transaction that includes the row LCR is moved to the error queue, and the <code dir="ltr">XMLType</code> column is represented by the original (nonassembled) row LCRs.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>Database compatibility must be <code dir="ltr">11.1.0</code> or higher to process row LCRs with <code dir="ltr">XMLType</code> columns.</p>
</li>
<li>
<p>When you are processing a row LCR with a rule-based transformation, you cannot use this member procedure on <code dir="ltr">XMLType</code> columns.</p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20604"></a>Syntax</p>
<pre dir="ltr">MEMBER PROCEDURE SET_VALUE(
   value_type    IN  VARCHAR2,
   column_name   IN  VARCHAR2,
   column_value  IN  ANYDATA);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20605"></a>Parameters</p>
<div id="ARPLS71885" class="tblformal">
<p class="titleintable"><a id="sthref20606"></a><a id="sthref20607"></a>Table 275-31 SET_VALUE Procedure Parameters</p>
<table class="cellalignment4330" title="SET_VALUE Procedure Parameters" summary="This table describes the Parameters of the Logical Change Record Type LCR$_ROW_RECORD member subprogram SET_VALUE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t54">Parameter</th>
<th class="cellalignment4328" id="r1c2-t54">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t54" headers="r1c1-t54">
<p><code dir="ltr">value_type</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t54 r1c2-t54">
<p>The type of value to set</p>
<p>Specify <code dir="ltr">old</code> to set the old value of the column. Specify <code dir="ltr">new</code> to set the new value of the column.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t54" headers="r1c1-t54">
<p><code dir="ltr">column_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t54 r1c2-t54">
<p>The column name</p>
<p>An error is raised if the specified <code dir="ltr">column_value</code> does not exist in the LCR for the specified <code dir="ltr">column_type</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t54" headers="r1c1-t54">
<p><code dir="ltr">column_value</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t54 r1c2-t54">
<p>The new value of the column</p>
<p>If <code dir="ltr">NULL</code> is specified, then this procedure raises an error. To set the value to <code dir="ltr">NULL</code>, encapsulate the <code dir="ltr">NULL</code> in an <code dir="ltr">ANYDATA</code> instance.</p>
<p>If the member procedure is used in a procedure DML handler or error handler that uses LOB assembly, then specify a LOB locator for LOB columns.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BABDHHHG"></a>SET_VALUES Member Procedure<a id="sthref20608"></a><a id="sthref20609"></a></p>
<p>Replaces all old values or all new values for the LCR, depending on the value type specified.</p>
<p class="subhead2"><a id="ARPLS71886"></a>Considerations for LOB Columns</p>
<p>You can use this procedure when processing a row LCR with LOB columns with a procedure DML handler or error handler. If the handler is using LOB assembly (the <code dir="ltr">assemble_lobs</code> parameter is set to <code dir="ltr">TRUE</code> for the handler), then you can use this member procedure in the handler procedure. If <code dir="ltr">assemble_lobs</code> is set to <code dir="ltr">FALSE</code> for the handler, then you cannot use this member procedure on a row LCR.</p>
<p>To use a DML or error handler to set the value of one or more LOB columns in a row LCR, specify a LOB locator for each LOB column in the <code dir="ltr">value_list</code> parameter. The <code dir="ltr">SET_VALUES</code> member procedure verifies that an <code dir="ltr">ANYDATA</code> encapsulated LOB locator is processed with a DML or error handler that is using LOB assembly. An error is raised under the following conditions:</p>
<ul>
<li>
<p>The handler attempts to enqueue a row LCR with an <code dir="ltr">ANYDATA</code> encapsulated LOB locator.</p>
</li>
<li>
<p>An attempt is made to set a LOB column incorrectly.</p>
</li>
</ul>
<p>If an error is raised because of one of these conditions, then the transaction that includes the row LCR is moved to the error queue, and the LOB columns are represented by the original (nonassembled) row LCRs.</p>
</div>
<!-- class="refsubsect" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>Database compatibility must be <code dir="ltr">10.2.0</code> or higher to use LOB assembly.</p>
</li>
<li>
<p>When you are processing a row LCR with a rule-based transformation, you cannot use this member procedure on LOB columns.</p>
</li>
<li>
<p>When you are processing a row LCR with a rule-based transformation, procedure DML handler, or error handler, you cannot use this member procedure on <code dir="ltr">LONG</code> or <code dir="ltr">LONG</code> <code dir="ltr">RAW</code> columns.</p>
</li>
</ul>
</div>
<p class="subhead2"><a id="ARPLS71887"></a>Considerations for XMLType Columns</p>
<p>When processing a row LCR with <code dir="ltr">XMLType</code> columns with a procedure DML handler or error handler, any <code dir="ltr">XMLType</code> and LOB columns in the LCR are always assembled using LOB assembly. You can use this member procedure in the handler procedure on a row LCR that contains one or more <code dir="ltr">XMLType</code> columns.</p>
<p>To use a DML or error handler to set the value of one or more <code dir="ltr">XMLType</code> columns in a row LCR, specify an <code dir="ltr">XMLType</code> for each <code dir="ltr">XMLType</code> column in the <code dir="ltr">value_list</code> parameter. The <code dir="ltr">SET_VALUES</code> member procedure verifies that an <code dir="ltr">ANYDATA</code> encapsulated <code dir="ltr">XMLType</code> is processed with a DML or error handler. An error is raised under the following conditions:</p>
<ul>
<li>
<p>The handler attempts to enqueue a row LCR with an <code dir="ltr">ANYDATA</code> encapsulated <code dir="ltr">XMLType</code>.</p>
</li>
<li>
<p>An attempt is made to set a <code dir="ltr">XMLType</code> incorrectly.</p>
</li>
</ul>
<p>If an error is raised because of one of these conditions, then the transaction that includes the row LCR is moved to the error queue, and the <code dir="ltr">XMLType</code> columns are represented by the original (nonassembled) row LCRs.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>Database compatibility must be <code dir="ltr">11.1.0</code> or higher to process row LCRs with <code dir="ltr">XMLType</code> columns.</p>
</li>
<li>
<p>When you are processing a row LCR with a rule-based transformation, you cannot use this member procedure on <code dir="ltr">XMLType</code> columns.</p>
</li>
</ul>
</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20610"></a>Syntax</p>
<pre dir="ltr">MEMBER PROCEDURE SET_VALUES(
   value_type  IN  VARCHAR2,
   value_list  IN  SYS.LCR$_ROW_LIST);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20611"></a>Parameters</p>
<div id="ARPLS71888" class="tblformal">
<p class="titleintable"><a id="sthref20612"></a><a id="sthref20613"></a>Table 275-32 SET_VALUES Procedure Parameters</p>
<table class="cellalignment4330" title="SET_VALUES Procedure Parameters" summary="This table describes the Parameters of the Logical Change Record Type LCR$_ROW_RECORD member subprogram SET_VALUES." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t57">Parameter</th>
<th class="cellalignment4328" id="r1c2-t57">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t57" headers="r1c1-t57">
<p><code dir="ltr">value_type</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t57 r1c2-t57">
<p>The type of values to replace</p>
<p>Specify <code dir="ltr">old</code> to replace the old values. Specify <code dir="ltr">new</code> to replace the new values.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t57" headers="r1c1-t57">
<p><code dir="ltr">value_list</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t57 r1c2-t57">
<p>List of values to replace the existing list</p>
<p>Use a <code dir="ltr">NULL</code> or an empty list to remove all values.</p>
<p>If the member procedure is used in a procedure DML handler or error handler that uses LOB assembly, then specify one or more LOB locators for LOB columns.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BABHAECE"></a>SET_XML_INFORMATION Member Procedure<a id="sthref20614"></a><a id="sthref20615"></a></p>
<p>Sets the XML information for the column.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20616"></a>Syntax</p>
<pre dir="ltr">MEMBER PROCEDURE SET_XML_INFORMATION(
   column_name      IN  VARCHAR2,
   xml_information  IN  NUMBER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20617"></a>Parameters</p>
<div id="ARPLS71889" class="tblformal">
<p class="titleintable"><a id="sthref20618"></a><a id="sthref20619"></a>Table 275-33 SET_XML_INFORMATION Procedure Parameters</p>
<table class="cellalignment4330" title="SET_XML_INFORMATION Procedure Parameters" summary="This table describes the Parameters of the Logical Change Record Type LCR$_ROW_RECORD member subprogram SET_XML_INFORMATION." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t58">Parameter</th>
<th class="cellalignment4328" id="r1c2-t58">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t58" headers="r1c1-t58">
<p><code dir="ltr">column_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t58 r1c2-t58">
<p>The name of the column</p>
<p>An exception is raised if the column value does not exist in the LCR.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t58" headers="r1c1-t58">
<p><code dir="ltr">xml_information</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t58 r1c2-t58">
<p>Specify one of the following values:</p>
<pre dir="ltr">  DBMS_LCR.NOT_XML   CONSTANT NUMBER := 1;
  DBMS_LCR.XML_DOC   CONSTANT NUMBER := 2;
  DBMS_LCR.XML_DIFF  CONSTANT NUMBER := 3;
</pre>
<p><code dir="ltr">DBMS_LCR.NOT_XML</code> indicates that the column is not an <code dir="ltr">XMLType</code> column.</p>
<p><code dir="ltr">DBMS_LCR.XML_DOC</code> indicates that the column contains an XML document.</p>
<p><code dir="ltr">DBMS_LCR.XML_DIFF</code> indicates that the column contains an XML document that describes a change made by an update operation. This XML document describes the differences in the column&#39;s XML document. The entire XML document is not replaced.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect3" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="i998088"></a>
<div id="ARPLS71890" class="refsect1">
<h2 class="refsect1">Common Subprograms for LCR$_DDL_RECORD and LCR$_ROW_RECORD</h2>
<p>The following functions and procedures are common to both the <code dir="ltr">LCR$_DDL_RECORD</code> and <code dir="ltr">LCR$_ROW_RECORD</code> type.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
For descriptions of the subprograms for these types that are exclusive to each type:
<ul>
<li>
<p><a href="#i996910">&#34;Summary of LCR$_DDL_RECORD Subprograms&#34;</a></p>
</li>
<li>
<p><a href="#i997411">&#34;Summary of LCR$_ROW_RECORD Subprograms&#34;</a></p>
</li>
</ul>
</div>
<div id="ARPLS71891" class="tblformal">
<p class="titleintable"><a id="sthref20620"></a><a id="sthref20621"></a>Table 275-34 Summary of Common Subprograms for DDL and Row LCR Types</p>
<table class="cellalignment4330" title="Summary of Common Subprograms for DDL and Row LCR Types" summary="This table lists Common Subprograms for DDL and Row LCR Types in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t60">Subprogram</th>
<th class="cellalignment4328" id="r1c2-t60">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t60" headers="r1c1-t60">
<p><a href="#i998253">GET_COMMAND_TYPE Member Function</a></p>
</td>
<td class="cellalignment4329" headers="r2c1-t60 r1c2-t60">
<p>Gets the command type of the logical change record (LCR)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t60" headers="r1c1-t60">
<p><a href="#i1005161">GET_COMMIT_SCN Member Function</a></p>
</td>
<td class="cellalignment4329" headers="r3c1-t60 r1c2-t60">
<p>Gets the commit system change number (SCN) of the transaction to which the current LCR belongs</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t60" headers="r1c1-t60">
<p><a href="#BGBDDBDJ">GET_COMMIT_SCN_FROM_POSITION Static Function</a></p>
</td>
<td class="cellalignment4329" headers="r4c1-t60 r1c2-t60">
<p>Gets the commit SCN of a transaction from the input position, which is generated by an XStream outbound server</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t60" headers="r1c1-t60">
<p><a href="#BGBGHAFC">GET_COMMIT_TIME</a></p>
</td>
<td class="cellalignment4329" headers="r5c1-t60 r1c2-t60">
<p>Gets the commit time of the transaction to which the current LCR belongs</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t60" headers="r1c1-t60">
<p><a href="#i1005434">GET_COMPATIBLE Member Function</a></p>
</td>
<td class="cellalignment4329" headers="r6c1-t60 r1c2-t60">
<p>Gets the minimal database compatibility required to support the LCR</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t60" headers="r1c1-t60">
<p><a href="#i1004997">GET_EXTRA_ATTRIBUTE Member Function</a></p>
</td>
<td class="cellalignment4329" headers="r7c1-t60 r1c2-t60">
<p>Gets the value for the specified extra attribute in the LCR</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t60" headers="r1c1-t60">
<p><a href="#i998270">GET_OBJECT_NAME Member Function</a></p>
</td>
<td class="cellalignment4329" headers="r8c1-t60 r1c2-t60">
<p>Gets the name of the object that is changed by the LCR</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t60" headers="r1c1-t60">
<p><a href="#i998277">GET_OBJECT_OWNER Member Function</a></p>
</td>
<td class="cellalignment4329" headers="r9c1-t60 r1c2-t60">
<p>Gets the owner of the object that is changed by the LCR</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t60" headers="r1c1-t60">
<p><a href="#BGBFBIJA">GET_POSITION Member Function</a></p>
</td>
<td class="cellalignment4329" headers="r10c1-t60 r1c2-t60">
<p>Gets the position of the current LCR</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t60" headers="r1c1-t60">
<p><a href="#CJGJIJEI">GET_ROOT_NAME Member Function</a></p>
</td>
<td class="cellalignment4329" headers="r11c1-t60 r1c2-t60">
<p>Gets the global name of the root for a CDB.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t60" headers="r1c1-t60">
<p><a href="#i998284">GET_SCN Member Function</a></p>
</td>
<td class="cellalignment4329" headers="r12c1-t60 r1c2-t60">
<p>Gets the SCN of the&nbsp;LCR</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t60" headers="r1c1-t60">
<p><a href="#BGBFJGEB">GET_SCN_FROM_POSITION Static Function</a></p>
</td>
<td class="cellalignment4329" headers="r13c1-t60 r1c2-t60">
<p>Gets the SCN from the input position, which is generated by an XStream outbound server</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t60" headers="r1c1-t60">
<p><a href="#i998291">GET_SOURCE_DATABASE_NAME Member Function</a></p>
</td>
<td class="cellalignment4329" headers="r14c1-t60 r1c2-t60">
<p>Gets the source database name.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r15c1-t60" headers="r1c1-t60">
<p><a href="#CJGGBHAB">GET_SOURCE_TIME Member Function</a></p>
</td>
<td class="cellalignment4329" headers="r15c1-t60 r1c2-t60">
<p>Gets the time when the change in an LCR captured by a capture process was generated in the redo log of the source database, or the time when a persistent LCR was created</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r16c1-t60" headers="r1c1-t60">
<p><a href="#BABFBHAE">GET_TAG Member Function</a></p>
</td>
<td class="cellalignment4329" headers="r16c1-t60 r1c2-t60">
<p>Gets the tag for the LCR</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r17c1-t60" headers="r1c1-t60">
<p><a href="#BGBEEAIE">GET_THREAD_NUMBER Member Function</a></p>
</td>
<td class="cellalignment4329" headers="r17c1-t60 r1c2-t60">
<p>Gets the thread number of the database instance that made the change that is encapsulated in the LCR</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r18c1-t60" headers="r1c1-t60">
<p><a href="#BABICBII">GET_TRANSACTION_ID Member Function</a></p>
</td>
<td class="cellalignment4329" headers="r18c1-t60 r1c2-t60">
<p>Gets the transaction identifier of the LCR</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r19c1-t60" headers="r1c1-t60">
<p><a href="#i998322">IS_NULL_TAG Member Function</a></p>
</td>
<td class="cellalignment4329" headers="r19c1-t60 r1c2-t60">
<p>Returns <code dir="ltr">Y</code> if the tag for the LCR is <code dir="ltr">NULL</code>, or returns <code dir="ltr">N</code> if the tag for the LCR is not <code dir="ltr">NULL</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r20c1-t60" headers="r1c1-t60">
<p><a href="#BABJHHEF">SET_COMMAND_TYPE Member Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r20c1-t60 r1c2-t60">
<p>Sets the command type in the LCR</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r21c1-t60" headers="r1c1-t60">
<p><a href="#BABJIIGD">SET_EXTRA_ATTRIBUTE Member Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r21c1-t60 r1c2-t60">
<p>Sets the value for the specified extra attribute in the LCR</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r22c1-t60" headers="r1c1-t60">
<p><a href="#i1007335">SET_OBJECT_NAME Member Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r22c1-t60 r1c2-t60">
<p>Sets the name of the object that is changed by the&nbsp;LCR</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r23c1-t60" headers="r1c1-t60">
<p><a href="#i998408">SET_OBJECT_OWNER Member Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r23c1-t60 r1c2-t60">
<p>Sets the owner of the object that is changed by the&nbsp;LCR</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r24c1-t60" headers="r1c1-t60">
<p><a href="#CJGDHBAE">SET_ROOT_NAME Member Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r24c1-t60 r1c2-t60">
<p>Sets the global name of the root in a CDB.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r25c1-t60" headers="r1c1-t60">
<p><a href="#i998430">SET_SOURCE_DATABASE_NAME Member Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r25c1-t60 r1c2-t60">
<p>Sets the source database name of the object that is changed by the LCR</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r26c1-t60" headers="r1c1-t60">
<p><a href="#i998452">SET_TAG Member Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r26c1-t60 r1c2-t60">
<p>Sets the tag for the LCR</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i998253"></a>GET_COMMAND_TYPE Member Function<a id="sthref20622"></a><a id="sthref20623"></a></p>
<p>Gets the command type of the LCR.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The &#34;SQL Command Codes&#34; table in the <a class="olink LNOCI251" href="../LNOCI/ociaahan.htm#LNOCI251"><span class="italic">Oracle Call Interface Programmer&#39;s Guide</span></a> for a complete list of command types</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20624"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION GET_COMMAND_TYPE() 
RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i1005161"></a>GET_COMMIT_SCN Member Function<a id="sthref20625"></a><a id="sthref20626"></a></p>
<p>Gets the commit system change number (SCN) of the transaction to which the current LCR belongs.</p>
<p>The commit SCN for a transaction is available only during apply or during error transaction execution. This function can be used only in a procedure DML handler, DDL handler, or error handler.</p>
<p>The commit SCN might not be available for an LCR that is part of an incomplete transaction. For example, persistent LCRs might not have a commit SCN. If the commit SCN is not available for an LCR, then this function returns <code dir="ltr">NULL</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20627"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION GET_COMMIT_SCN() 
RETURN NUMBER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BGBDDBDJ"></a>GET_COMMIT_SCN_FROM_POSITION Static Function<a id="sthref20628"></a><a id="sthref20629"></a></p>
<p>Gets the commit system change number (SCN) of a transaction from the input position, which is generated by an XStream outbound server.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20630"></a>Syntax</p>
<pre dir="ltr">STATIC FUNCTION GET_COMMIT_SCN_FROM_POSITION(
   position  IN  RAW) 
RETURN NUMBER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20631"></a>Parameters</p>
<div id="ARPLS73121" class="tblformal">
<p class="titleintable"><a id="sthref20632"></a><a id="sthref20633"></a>Table 275-35 GET_COMMIT_SCN_FROM_POSITION Function Parameter</p>
<table class="cellalignment4330" title="GET_COMMIT_SCN_FROM_POSITION Function Parameter" summary="This table describes the Parameters of the Logical Change Record Types LCR$_DDL_RECORD&rsquo;s and LCR$_ROW_RECORD&rsquo;s common member subprogram GET_SCN_FROM_COMMIT_POSITION." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t62">Parameter</th>
<th class="cellalignment4328" id="r1c2-t62">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t62" headers="r1c1-t62">
<p><code dir="ltr">position</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t62 r1c2-t62">
<p>The position</p>
<p>You can obtain the position by using the <code dir="ltr">GET_POSITION</code> member function or by querying the <code dir="ltr">DBA_XSTREAM_OUTBOUND_PROGRESS</code> data dictionary view.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
Using XStream requires purchasing a license for the Oracle GoldenGate product. See <a class="olink XSTRM" href="../XSTRM/toc.htm"><span class="italic">Oracle Database XStream Guide</span></a>.</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BGBGHAFC"></a>GET_COMMIT_TIME<a id="sthref20634"></a><a id="sthref20635"></a></p>
<p>Gets the commit time of the transaction to which the current LCR belongs.</p>
<p>The commit time for a transaction is available only during apply or during error transaction execution. This function can be used only in a procedure DML handler, DDL handler, or error handler.</p>
<p>The commit time might not be available for an LCR that is part of an incomplete transaction. For example, persistent LCRs might not have a commit time. If the commit time is not available for an LCR, then this function returns <code dir="ltr">NULL</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20636"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION GET_COMMIT_TIME() 
RETURN DATE;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i1005434"></a>GET_COMPATIBLE Member Function<a id="sthref20637"></a><a id="sthref20638"></a><a id="sthref20639"></a><a id="sthref20640"></a><a id="sthref20641"></a><a id="sthref20642"></a></p>
<p>Gets the minimal database compatibility required to support the LCR. You control the compatibility of an Oracle database using the <code dir="ltr">COMPATIBLE</code> initialization parameter.</p>
<p>The return value for this function can be one of the following:</p>
<div class="inftblruleinformal">
<table class="cellalignment4327" title="Return Values" summary="This table describes the Values Returned by the Logical Change Record Types LCR$_DDL_RECORD&rsquo;s and LCR$_ROW_RECORD&rsquo;s common member subprogram GET_COMPATIBLE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t64">Return Value</th>
<th class="cellalignment4328" id="r1c2-t64">COMPATIBLE Initialization Parameter Equivalent</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t64" headers="r1c1-t64"><code dir="ltr">DBMS_STREAMS.COMPATIBLE_9_2</code></td>
<td class="cellalignment4329" headers="r2c1-t64 r1c2-t64"><code dir="ltr">9.2.0</code></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t64" headers="r1c1-t64"><code dir="ltr">DBMS_STREAMS.COMPATIBLE_10_1</code></td>
<td class="cellalignment4329" headers="r3c1-t64 r1c2-t64"><code dir="ltr">10.1.0</code></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t64" headers="r1c1-t64"><code dir="ltr">DBMS_STREAMS.COMPATIBLE_10_2</code></td>
<td class="cellalignment4329" headers="r4c1-t64 r1c2-t64"><code dir="ltr">10.2.0</code></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t64" headers="r1c1-t64"><code dir="ltr">DBMS_STREAMS.COMPATIBLE_11_1</code></td>
<td class="cellalignment4329" headers="r5c1-t64 r1c2-t64"><code dir="ltr">11.1.0</code></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t64" headers="r1c1-t64"><code dir="ltr">DBMS_STREAMS.COMPATIBLE_11_2</code></td>
<td class="cellalignment4329" headers="r6c1-t64 r1c2-t64"><code dir="ltr">11.2.0</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblruleinformal" -->
<p>DDL LCRs always return <code dir="ltr">DBMS_STREAMS.COMPATIBLE_9_2</code>.</p>
<p>You can use the following functions in the <code dir="ltr">DBMS_STREAMS</code> package for constant compatibility return values:</p>
<ul>
<li>
<p>The <code dir="ltr">COMPATIBLE_9_2</code> function returns the <code dir="ltr">DBMS_STREAMS.COMPATIBLE_9_2</code> constant.</p>
</li>
<li>
<p>The <code dir="ltr">COMPATIBLE_10_1</code> function returns <code dir="ltr">DBMS_STREAMS.COMPATIBLE_10_1</code> constant.</p>
</li>
<li>
<p>The <code dir="ltr">COMPATIBLE_10_2</code> function returns <code dir="ltr">DBMS_STREAMS.COMPATIBLE_10_2</code> constant.</p>
</li>
<li>
<p>The <code dir="ltr">COMPATIBLE_11_1</code> function returns <code dir="ltr">DBMS_STREAMS.COMPATIBLE_11_1</code> constant.</p>
</li>
<li>
<p>The <code dir="ltr">COMPATIBLE_11_2</code> function returns <code dir="ltr">DBMS_STREAMS.COMPATIBLE_11_2</code> constant.</p>
</li>
<li>
<p>The <code dir="ltr">MAX_COMPATIBLE</code> function returns an integer that is greater than the highest possible compatibility constant for the current release of Oracle Database.</p>
</li>
</ul>
<p>You can use these functions with the <code dir="ltr">GET_COMPATIBLE</code> member function for an LCR in rule conditions and apply handlers.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can determine which database objects in a database are not supported by Oracle Streams by querying the <code dir="ltr">DBA_STREAMS_UNSUPPORTED</code> data dictionary view.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink STRMS135" href="../STRMS/strms_adrules.htm#STRMS135"><span class="italic">Oracle Streams Concepts and Administration</span></a> for examples of rules that discard changes that are not supported by Oracle Streams</p>
</li>
<li>
<p><a href="d_streams.htm#CHDJEIGB">Chapter 158, &#34;DBMS_STREAMS&#34;</a> and <a href="d_streams_adm.htm#CDEFIIEG">Chapter 159, &#34;DBMS_STREAMS_ADM&#34;</a></p>
</li>
<li>
<p><a class="olink REFRN10019" href="../REFRN/GUID-6C57EE11-BD06-4BB8-A0F7-D6CDDD086FA9.htm#REFRN10019"><span class="italic">Oracle Database Reference</span></a> and <a class="olink UPGRD005" href="../UPGRD/intro.htm#UPGRD005"><span class="italic">Oracle Database Upgrade Guide</span></a> for more information about the <code dir="ltr">COMPATIBLE</code> initialization parameter</p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20643"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION GET_COMPATIBLE() 
RETURN NUMBER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i1004997"></a>GET_EXTRA_ATTRIBUTE Member Function<a id="sthref20644"></a><a id="sthref20645"></a></p>
<p>Gets the value for the specified extra attribute in the LCR. The returned extra attribute is contained within an <code dir="ltr">ANYDATA</code> instance. You can use the <code dir="ltr">INCLUDE_EXTRA_ATTRIBUTE</code> procedure in the <code dir="ltr">DBMS_CAPTURE_ADM</code> package to instruct a capture process to capture one or more extra attributes.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="d_cap_a.htm#i1000175">INCLUDE_EXTRA_ATTRIBUTE Procedure</a></div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20646"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION GET_EXTRA_ATTRIBUTE(
   attribute_name  IN  VARCHAR2) 
RETURN ANYDATA;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20647"></a>Parameters</p>
<div id="ARPLS71893" class="tblformal">
<p class="titleintable"><a id="sthref20648"></a><a id="sthref20649"></a>Table 275-36 GET_EXTRA_ATTRIBUTE Function Parameter</p>
<table class="cellalignment4330" title="GET_EXTRA_ATTRIBUTE Function Parameter" summary="This table describes the Parameters of the Logical Change Record Types LCR$_DDL_RECORD&rsquo;s and LCR$_ROW_RECORD&rsquo;s common member subprogram GET_EXTRA_ATTRIBUTE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t68">Parameter</th>
<th class="cellalignment4328" id="r1c2-t68">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t68" headers="r1c1-t68">
<p><code dir="ltr">attribute_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t68 r1c2-t68">
<p>The name of the extra attribute to return</p>
<p>Valid names are:</p>
<ul>
<li>
<p><code dir="ltr">row_id</code></p>
<p>The rowid of the row changed in a row LCR. This attribute is not included in DDL LCRs, nor in row LCRs for index-organized tables. The type is <code dir="ltr">UROWID</code>.</p>
</li>
<li>
<p><code dir="ltr">serial#</code></p>
<p>The serial number of the session that performed the change captured in the LCR. The type is <code dir="ltr">NUMBER</code>.</p>
</li>
<li>
<p><code dir="ltr">session#</code></p>
<p>The identifier of the session that performed the change captured in the LCR. The type is <code dir="ltr">NUMBER</code>.</p>
</li>
<li>
<p><code dir="ltr">thread#</code></p>
<p>The thread number of the instance in which the change captured in the LCR was performed. Typically, the thread number is relevant only in an Oracle Real Application Clusters (Oracle RAC) environment. The type is <code dir="ltr">NUMBER</code>.</p>
</li>
<li>
<p><code dir="ltr">tx_name</code></p>
<p>The name of the transaction that includes the LCR. The type is <code dir="ltr">VARCHAR2</code>.</p>
</li>
<li>
<p><code dir="ltr">username</code></p>
<p>The name of the current user who performed the change captured in the LCR. The type is <code dir="ltr">VARCHAR2</code>.</p>
</li>
</ul>
<p>An error is raised if the specified <code dir="ltr">attribute_name</code> is not valid.</p>
<p>If no value exists for the specified extra attribute, then the function returns a <code dir="ltr">NULL</code>.</p>
<p><span class="bold">See Also:</span> <a class="olink LNPLS00809" href="../LNPLS/subprograms.htm#LNPLS00809"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information about the current user</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i998270"></a>GET_OBJECT_NAME Member Function<a id="sthref20650"></a><a id="sthref20651"></a></p>
<p>Gets the name of the object that is changed by the LCR.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20652"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION GET_OBJECT_NAME()
RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i998277"></a>GET_OBJECT_OWNER Member Function<a id="sthref20653"></a><a id="sthref20654"></a></p>
<p>Gets the owner of the object that is changed by the LCR.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20655"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION GET_OBJECT_OWNER() 
RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BGBFBIJA"></a>GET_POSITION Member Function<a id="sthref20656"></a><a id="sthref20657"></a></p>
<p>Gets the position of the current LCR. The position uniquely identifies each LCR. The position strictly increases within each transaction and across transactions.</p>
<p>LCR position is commonly used in XStream configurations.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20658"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION GET_POSITION() 
RETURN RAW;
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
Using XStream requires purchasing a license for the Oracle GoldenGate product. See <a class="olink XSTRM" href="../XSTRM/toc.htm"><span class="italic">Oracle Database XStream Guide</span></a>.</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="CJGJIJEI"></a>GET_ROOT_NAME Member Function<a id="sthref20659"></a><a id="sthref20660"></a></p>
<p>Gets the global name of the root in a CDB, which is the root name for the LCR.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20661"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION GET_ROOT_NAME() 
RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i998284"></a>GET_SCN Member Function<a id="sthref20662"></a><a id="sthref20663"></a></p>
<p>Gets the system change number (SCN) of the LCR.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20664"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION GET_SCN() 
RETURN NUMBER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BGBFJGEB"></a>GET_SCN_FROM_POSITION Static Function<a id="sthref20665"></a><a id="sthref20666"></a></p>
<p>Gets the system change number (SCN) from the input position, which is generated by an XStream outbound server.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20667"></a>Syntax</p>
<pre dir="ltr">STATIC FUNCTION GET_SCN_FROM_POSITION(
   position  IN  RAW) 
RETURN NUMBER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20668"></a>Parameters</p>
<div id="ARPLS73122" class="tblformal">
<p class="titleintable"><a id="sthref20669"></a><a id="sthref20670"></a>Table 275-37 GET_SCN_FROM_POSITION Function Parameter</p>
<table class="cellalignment4330" title="GET_SCN_FROM_POSITION Function Parameter" summary="This table describes the Parameters of the Logical Change Record Types LCR$_DDL_RECORD&rsquo;s and LCR$_ROW_RECORD&rsquo;s common member subprogram GET_SCN_FROM_POSITION." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t70">Parameter</th>
<th class="cellalignment4328" id="r1c2-t70">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t70" headers="r1c1-t70">
<p><code dir="ltr">position</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t70 r1c2-t70">
<p>The position</p>
<p>You can obtain the position by using the <code dir="ltr">GET_POSITION</code> member function or by querying the <code dir="ltr">DBA_XSTREAM_OUTBOUND_PROGRESS</code> data dictionary view.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
Using XStream requires purchasing a license for the Oracle GoldenGate product. See <a class="olink XSTRM" href="../XSTRM/toc.htm"><span class="italic">Oracle Database XStream Guide</span></a>.</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i998291"></a>GET_SOURCE_DATABASE_NAME Member Function<a id="sthref20671"></a><a id="sthref20672"></a></p>
<p>Gets the global name of the source database. The source database is the database where the change occurred.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20673"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION GET_SOURCE_DATABASE_NAME() 
RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="CJGGBHAB"></a>GET_SOURCE_TIME Member Function<a id="sthref20674"></a><a id="sthref20675"></a></p>
<p>Gets the time when the change in an LCR captured by a capture process was generated in the redo log of the source database, or the time when a persistent LCR was created.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20676"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION GET_SOURCE_TIME() 
RETURN DATE;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BABFBHAE"></a>GET_TAG Member Function<a id="sthref20677"></a><a id="sthref20678"></a></p>
<p>Gets the tag for the LCR. An LCR tag is a binary tag that enables tracking of the LCR. For example, this tag can be used to determine the original source database of the&nbsp;DML or DDL change when apply forwarding is used.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STREP008" href="../STREP/rep_tags.htm#STREP008"><span class="italic">Oracle Streams Replication Administrator&#39;s Guide</span></a> for more information about tags</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20679"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION GET_TAG() 
RETURN RAW;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BGBEEAIE"></a>GET_THREAD_NUMBER Member Function<a id="sthref20680"></a><a id="sthref20681"></a></p>
<p>Gets the thread number of the database instance that made the change that is encapsulated in the LCR. Typically, the thread number is relevant in an Oracle Real Application Clusters configuration.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink RACAD" href="../RACAD/toc.htm"><span class="italic">Oracle Real Application Clusters Administration and Deployment Guide</span></a></div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20682"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION GET_THREAD_NUMBER()
RETURN NUMBER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BABICBII"></a>GET_TRANSACTION_ID Member Function<a id="sthref20683"></a><a id="sthref20684"></a></p>
<p>Gets the transaction identifier of the LCR.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20685"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION GET_TRANSACTION_ID() 
RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i998322"></a>IS_NULL_TAG Member Function<a id="sthref20686"></a><a id="sthref20687"></a></p>
<p>Returns <code dir="ltr">Y</code> if the tag for the LCR is <code dir="ltr">NULL</code>, or returns <code dir="ltr">N</code> if the tag for the LCR is not <code dir="ltr">NULL</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STREP008" href="../STREP/rep_tags.htm#STREP008"><span class="italic">Oracle Streams Replication Administrator&#39;s Guide</span></a> for more information about tags</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20688"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION IS_NULL_TAG() 
RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BABJHHEF"></a>SET_COMMAND_TYPE Member Procedure<a id="sthref20689"></a><a id="sthref20690"></a></p>
<p>Sets the command type in the LCR. If the command type specified cannot be interpreted, then this procedure raises an error. For example, changing <code dir="ltr">INSERT</code> to <code dir="ltr">GRANT</code> would raise an error.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p>The description of the <code dir="ltr">command_type</code> parameter in <a href="#BABCHFFB">LCR$_DDL_RECORD Constructor Function Parameters</a></p>
</li>
<li>
<p>The description of the command_type parameter in <a href="#i997304">LCR$_ROW_RECORD Type</a></p>
</li>
<li>
<p>The &#34;SQL Command Codes&#34; table in the <a class="olink LNOCI251" href="../LNOCI/ociaahan.htm#LNOCI251"><span class="italic">Oracle Call Interface Programmer&#39;s Guide</span></a> for a complete list of command types</p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20691"></a>Syntax</p>
<pre dir="ltr">MEMBER PROCEDURE SET_COMMAND_TYPE(
   command_type  IN  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20692"></a>Parameter</p>
<div id="ARPLS71895" class="tblformal">
<p class="titleintable"><a id="sthref20693"></a><a id="sthref20694"></a>Table 275-38 SET_COMMAND_TYPE Procedure Parameter</p>
<table class="cellalignment4330" title="SET_COMMAND_TYPE Procedure Parameter" summary="This table describes the Parameters of the Logical Change Record Types LCR$_DDL_RECORD&rsquo;s and LCR$_ROW_RECORD&rsquo;s common member subprogram SET_COMMAND." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t76">Parameter</th>
<th class="cellalignment4328" id="r1c2-t76">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t76" headers="r1c1-t76">
<p><code dir="ltr">command_type</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t76 r1c2-t76">
<p>The command type</p>
<p>Set this parameter to a non-<code dir="ltr">NULL</code> value.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BABJIIGD"></a>SET_EXTRA_ATTRIBUTE Member Procedure<a id="sthref20695"></a><a id="sthref20696"></a></p>
<p>Sets the value for the specified extra attribute in the LCR. You can use the <code dir="ltr">INCLUDE_EXTRA_ATTRIBUTE</code> procedure in the <code dir="ltr">DBMS_CAPTURE_ADM</code> package to instruct a capture process to capture one or more extra attributes.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="d_cap_a.htm#i1000175">INCLUDE_EXTRA_ATTRIBUTE Procedure</a></div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20697"></a>Syntax</p>
<pre dir="ltr">MEMBER PROCEDURE SET_EXTRA_ATTRIBUTE(
   attribute_name   IN  VARCHAR2,
   attribute_value  IN  ANYDATA);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20698"></a>Parameters</p>
<div id="ARPLS71896" class="tblformal">
<p class="titleintable"><a id="sthref20699"></a><a id="sthref20700"></a>Table 275-39 SET_EXTRA_ATTRIBUTE Procedure Parameter</p>
<table class="cellalignment4330" title="SET_EXTRA_ATTRIBUTE Procedure Parameter" summary="This table describes the Parameters of the Logical Change Record Types LCR$_DDL_RECORD&rsquo;s and LCR$_ROW_RECORD&rsquo;s common member subprogram SET_EXTRA_ATTRIBUTE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t78">Parameter</th>
<th class="cellalignment4328" id="r1c2-t78">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t78" headers="r1c1-t78">
<p><code dir="ltr">attribute_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t78 r1c2-t78">
<p>The name of the extra attribute to set</p>
<p>Valid names are:</p>
<ul>
<li>
<p><code dir="ltr">row_id</code></p>
<p>The rowid of the row changed in a row LCR. This attribute is not included in DDL LCRs, nor in row LCRs for index-organized tables. The type is <code dir="ltr">VARCHAR2</code>.</p>
</li>
<li>
<p><code dir="ltr">serial#</code></p>
<p>The serial number of the session that performed the change captured in the LCR. The type is <code dir="ltr">NUMBER</code>.</p>
</li>
<li>
<p><code dir="ltr">session#</code></p>
<p>The identifier of the session that performed the change captured in the LCR. The type is <code dir="ltr">NUMBER</code>.</p>
</li>
<li>
<p><code dir="ltr">thread#</code></p>
<p>The thread number of the instance in which the change captured in the LCR was performed. Typically, the thread number is relevant only in an Oracle Real Application Clusters (Oracle RAC) environment. The type is <code dir="ltr">NUMBER</code>.</p>
</li>
<li>
<p><code dir="ltr">tx_name</code></p>
<p>The name of the transaction that includes the LCR. The type is <code dir="ltr">VARCHAR2</code>.</p>
</li>
<li>
<p><code dir="ltr">username</code></p>
<p>The name of the current user who performed the change captured in the LCR. The type is <code dir="ltr">VARCHAR2</code>.</p>
</li>
</ul>
<p>An error is raised if the specified <code dir="ltr">attribute_name</code> is not valid.</p>
<p><span class="bold">See Also:</span> <a class="olink LNPLS00809" href="../LNPLS/subprograms.htm#LNPLS00809"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information about the current user</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t78" headers="r1c1-t78">
<p><code dir="ltr">attribute_value</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t78 r1c2-t78">
<p>The value to which the specified extra attribute is set</p>
<p>If set to <code dir="ltr">NULL</code>, then this procedure removes the specified extra attribute from the LCR. To set to <code dir="ltr">NULL</code>, encapsulate the <code dir="ltr">NULL</code> in an <code dir="ltr">ANYDATA</code> instance.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i1007335"></a>SET_OBJECT_NAME Member Procedure<a id="sthref20701"></a><a id="sthref20702"></a></p>
<p>Sets the name of the object that is changed by the LCR.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20703"></a>Syntax</p>
<pre dir="ltr">MEMBER PROCEDURE SET_OBJECT_NAME(
   object_name  IN  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20704"></a>Parameter</p>
<div id="ARPLS71897" class="tblformal">
<p class="titleintable"><a id="sthref20705"></a><a id="sthref20706"></a>Table 275-40 SET_OBJECT_NAME Procedure Parameter</p>
<table class="cellalignment4330" title="SET_OBJECT_NAME Procedure Parameter" summary="This table describes the Parameters of the Logical Change Record Types LCR$_DDL_RECORD&rsquo;s and LCR$_ROW_RECORD&rsquo;s common member subprogram SET_OBJECT_NAME." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t79">Parameter</th>
<th class="cellalignment4328" id="r1c2-t79">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t79" headers="r1c1-t79">
<p><code dir="ltr">object_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t79 r1c2-t79">
<p>The name of the object</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i998408"></a>SET_OBJECT_OWNER Member Procedure<a id="sthref20707"></a><a id="sthref20708"></a></p>
<p>Sets the owner of the object that is changed by the LCR.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20709"></a>Syntax</p>
<pre dir="ltr">MEMBER PROCEDURE SET_OBJECT_OWNER(
   object_owner  IN  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20710"></a>Parameter</p>
<div id="ARPLS71898" class="tblformal">
<p class="titleintable"><a id="sthref20711"></a><a id="sthref20712"></a>Table 275-41 SET_OBJECT_OWNER Procedure Parameter</p>
<table class="cellalignment4330" title="SET_OBJECT_OWNER Procedure Parameter" summary="This table describes the Parameters of the Logical Change Record Types LCR$_DDL_RECORD&rsquo;s and LCR$_ROW_RECORD&rsquo;s common member subprogram SET_OBJECT_OWNER." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t80">Parameter</th>
<th class="cellalignment4328" id="r1c2-t80">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t80" headers="r1c1-t80">
<p><code dir="ltr">object_owner</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t80 r1c2-t80">
<p>The schema that contains the object</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="CJGDHBAE"></a>SET_ROOT_NAME Member Procedure<a id="sthref20713"></a><a id="sthref20714"></a></p>
<p>Sets the global name of the root in a CDB. The setting is the root name for the LCR.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20715"></a>Syntax</p>
<pre dir="ltr">MEMBER PROCEDURE SET_ROOT_NAME(
   root_name  IN  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20716"></a>Parameter</p>
<div id="ARPLS74109" class="tblformal">
<p class="titleintable"><a id="sthref20717"></a><a id="sthref20718"></a>Table 275-42 SET_OBJECT_OWNER Procedure Parameter</p>
<table class="cellalignment4330" title="SET_OBJECT_OWNER Procedure Parameter" summary="This table describes the Parameters of the Logical Change Record Types LCR$_DDL_RECORD&rsquo;s and LCR$_ROW_RECORD&rsquo;s common member subprogram SET_OBJECT_OWNER." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t81">Parameter</th>
<th class="cellalignment4328" id="r1c2-t81">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t81" headers="r1c1-t81">
<p><code dir="ltr">root_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t81 r1c2-t81">
<p>The global name of the root.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i998430"></a>SET_SOURCE_DATABASE_NAME Member Procedure<a id="sthref20719"></a><a id="sthref20720"></a></p>
<p>Sets the source database name of the object that is changed by the LCR.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20721"></a>Syntax</p>
<pre dir="ltr">MEMBER PROCEDURE SET_SOURCE_DATABASE_NAME(
   source_database_name  IN  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20722"></a>Parameter</p>
<div id="ARPLS71899" class="tblformal">
<p class="titleintable"><a id="sthref20723"></a><a id="sthref20724"></a>Table 275-43 SET_SOURCE_DATABASE_NAME Procedure Parameter</p>
<table class="cellalignment4330" title="SET_SOURCE_DATABASE_NAME Procedure Parameter" summary="This table describes the Parameters of the Logical Change Record Types LCR$_DDL_RECORD&rsquo;s and LCR$_ROW_RECORD&rsquo;s common member subprogram SET_SOURCE_DATABASE_NAME." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t82">Parameter</th>
<th class="cellalignment4328" id="r1c2-t82">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t82" headers="r1c1-t82">
<p><code dir="ltr">source_database_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t82 r1c2-t82">
<p>The source database of the change</p>
<p>If you do not include the domain name, then the procedure appends the local domain to the database name automatically. For example, if you specify <code dir="ltr">DBS1</code> and the local domain is <code dir="ltr">EXAMPLE.COM</code>, then the procedure specifies <code dir="ltr">DBS1.EXAMPLE.COM</code> automatically. Set this parameter to a non-<code dir="ltr">NULL</code> value.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i998452"></a>SET_TAG Member Procedure<a id="sthref20725"></a><a id="sthref20726"></a></p>
<p>Sets the tag for the LCR. An LCR tag is a binary tag that enables tracking of the LCR. For example, this tag can be used to determine the original source database of the change when apply forwarding is used.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STREP008" href="../STREP/rep_tags.htm#STREP008"><span class="italic">Oracle Streams Replication Administrator&#39;s Guide</span></a> for more information about tags</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20727"></a>Syntax</p>
<pre dir="ltr">MEMBER PROCEDURE SET_TAG(
   tag  IN  RAW);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20728"></a>Parameter</p>
<div id="ARPLS71900" class="tblformal">
<p class="titleintable"><a id="sthref20729"></a><a id="sthref20730"></a>Table 275-44 SET_TAG Procedure Parameter</p>
<table class="cellalignment4330" title="SET_TAG Procedure Parameter" summary="This table describes the Parameters of the Logical Change Record Types LCR$_DDL_RECORD&rsquo;s and LCR$_ROW_RECORD&rsquo;s common member subprogram SET_TAG." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t84">Parameter</th>
<th class="cellalignment4328" id="r1c2-t84">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t84" headers="r1c1-t84">
<p><code dir="ltr">tag</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t84 r1c2-t84">
<p>The binary tag for the LCR</p>
<p>The size limit for a tag value is two kilobytes.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div id="ARPLS569" class="refsect2"><a id="BABFHHIF"></a>
<h3 class="refsect2">LCR$_ROW_LIST Type<a id="sthref20731"></a><a id="sthref20732"></a></h3>
<p>Identifies a list of column values for a row in a table.</p>
<p>This type uses the <code dir="ltr">LCR$_ROW_UNIT</code> type and is used in the <code dir="ltr">LCR$_ROW_RECORD</code> type.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i998514">LCR$_ROW_UNIT Type</a></p>
</li>
<li>
<p><a href="#i997304">LCR$_ROW_RECORD Type</a></p>
</li>
</ul>
</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20733"></a>Syntax</p>
<pre dir="ltr">CREATE TYPE SYS.LCR$_ROW_LIST AS TABLE OF SYS.LCR$_ROW_UNIT
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS570" class="refsect2"><a id="i998514"></a>
<h3 class="refsect2">LCR$_ROW_UNIT Type<a id="sthref20734"></a><a id="sthref20735"></a></h3>
<p>Identifies the value for a column in a row.</p>
<p>This type is used in the <code dir="ltr">LCR$_ROW_LIST</code> type.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABFHHIF">LCR$_ROW_LIST Type</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20736"></a>Syntax</p>
<pre dir="ltr">CREATE TYPE LCR$_ROW_UNIT AS OBJECT (
  column_name         VARCHAR2(4000),
  data                ANYDATA,
  lob_information     NUMBER,
  lob_offset          NUMBER,
  lob_operation_size  NUMBER
  long_information    NUMBER);
/
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20737"></a>Attributes</p>
<div id="ARPLS71901" class="tblformal">
<p class="titleintable"><a id="sthref20738"></a><a id="sthref20739"></a>Table 275-45 LCR$_ROW_UNIT Attributes</p>
<table class="cellalignment4330" title="LCR$_ROW_UNIT Attributes" summary="This table describes the Parameters of the Logical Change Record Type LCR$_ROW_RECORD member subprogram LCRS_ROW_UNIT." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t87">Attribute</th>
<th class="cellalignment4328" id="r1c2-t87">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t87" headers="r1c1-t87">
<p><code dir="ltr">column_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t87 r1c2-t87">
<p>The name of the column</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t87" headers="r1c1-t87">
<p><code dir="ltr">data</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t87 r1c2-t87">
<p>The data contained in the column</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t87" headers="r1c1-t87">
<p><code dir="ltr">lob_information</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t87 r1c2-t87">
<p>Contains the LOB information for the column and contains one of the following values:</p>
<pre dir="ltr">  DBMS_LCR.NOT_A_LOB        CONSTANT NUMBER := 1;
  DBMS_LCR.NULL_LOB         CONSTANT NUMBER := 2;
  DBMS_LCR.INLINE_LOB       CONSTANT NUMBER := 3;
  DBMS_LCR.EMPTY_LOB        CONSTANT NUMBER := 4;
  DBMS_LCR.LOB_CHUNK        CONSTANT NUMBER := 5;
  DBMS_LCR.LAST_LOB_CHUNK   CONSTANT NUMBER := 6;
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t87" headers="r1c1-t87">
<p><code dir="ltr">lob_offset</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t87 r1c2-t87">
<p>The LOB offset specified in the number of characters for <code dir="ltr">CLOB</code> columns and the number of bytes for <code dir="ltr">BLOB</code> columns</p>
<p>Valid values are <code dir="ltr">NULL</code> or a positive integer less than or equal to <code dir="ltr">DBMS_LOB.LOBMAXSIZE</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t87" headers="r1c1-t87">
<p><code dir="ltr">lob_operation_size</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t87 r1c2-t87">
<p>If <code dir="ltr">lob_information</code> for the LOB is <code dir="ltr">DBMS_LCR.LAST_LOB_CHUNK</code>, then this parameter can be set to either a valid <code dir="ltr">LOB</code>&nbsp;<code dir="ltr">ERASE</code> value or a valid <code dir="ltr">LOB</code> <code dir="ltr">TRIM</code> value. A <code dir="ltr">LOB</code> <code dir="ltr">ERASE</code> value must be a positive integer less than or equal to <code dir="ltr">DBMS_LOB.LOBMAXSIZE</code>. A <code dir="ltr">LOB TRIM</code> value must be a nonnegative integer less than or equal to <code dir="ltr">DBMS_LOB.LOBMAXSIZE</code>.</p>
<p>If <code dir="ltr">lob_information</code> is not <code dir="ltr">DBMS_LCR.LAST_LOB_CHUNK</code> and for all other operations, is <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t87" headers="r1c1-t87">
<p><code dir="ltr">long_information</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t87 r1c2-t87">
<p>Contains the <code dir="ltr">LONG</code> information for the column and contains one of the following values:</p>
<p><code dir="ltr">DBMS_LCR.not_a_long CONSTANT NUMBER := 1;</code></p>
<p><code dir="ltr">DBMS_LCR.null_long CONSTANT NUMBER := 2;</code></p>
<p><code dir="ltr">DBMS_LCR.inline_long CONSTANT NUMBER := 3;</code></p>
<p><code dir="ltr">DBMS_LCR.long_chunk CONSTANT NUMBER := 4;</code></p>
<p><code dir="ltr">DBMS_LCR.last_long_chunk CONSTANT NUMBER := 5;</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4320">
<tr>
<td class="cellalignment4329">
<table class="cellalignment4325">
<tr>
<td class="cellalignment4324"><a href="t_jms.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4324"><a href="t_ordaud.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4332">
<table class="cellalignment4323">
<tr>
<td class="cellalignment4324"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4324"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4324"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4324"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4324"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4324"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>