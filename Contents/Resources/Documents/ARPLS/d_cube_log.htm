<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-2245"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/DBMS_CUBE_LOG"></a><title>DBMS_CUBE_LOG</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1086"/>
<meta name="dcterms.created" content="2016-09-02T5:36:11Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database PL/SQL Packages and Types Reference"/>
<meta name="dcterms.identifier" content="E41829-07"/>
<meta name="dcterms.isVersionOf" content="ARPLS"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="d_cube_advise.htm" title="Previous" type="text/html"/>
<link rel="Next" href="d_datmin.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41829-07.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">48/290</span> <!-- End Header -->
<div id="ARPLS72789" class="chapter"><a id="sthref2026"></a>
<h1 class="chapter"><span class="secnum">44</span> <a id="sthref2027"></a>DBMS_CUBE_LOG</h1>
<p><a id="sthref2028"></a><code dir="ltr">DBMS_CUBE_LOG</code> contains subprograms for creating and managing logs for cubes and cube dimensions.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink OLAUG" href="../OLAUG/toc.htm"><span class="italic">Oracle OLAP User&#39;s Guide</span></a> regarding use of the OLAP option to support business intelligence and analytical applications</div>
<p>This chapter contains the following topics:</p>
<ul>
<li>
<p><a href="#CEGFEAJA">Using DBMS_CUBE_LOG</a></p>
</li>
<li>
<p><a href="#CEGJAGDD">Summary of DBMS_CUBE_LOG Subprograms</a></p>
</li>
</ul>
<div class="refentry"><a id="CEGFEAJA"></a>
<div id="ARPLS72790" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">Using DBMS_CUBE_LOG</h2>
<p><code dir="ltr">DBMS_CUBE_LOG</code> manages several logs. These logs enable you to track the progress of long running processes, then use the results to profile performance characteristics. They provide information to help you diagnose and remedy problems that may occur during development and maintenance of a cube, such as hierarchies that are improperly structured in the relational source tables, records that fail to load, or data refreshes that take too long to complete. They also help diagnose performance problems in querying cubes.</p>
<p>Analytic Workspace Manager creates the logs automatically using the default names and types. It also disables the logs when Analytic Workspace Manager is closed. To use the same logs outside of Analytic Workspace Manager, you must first enable them. Alternatively, you can create and manage different logs for use outside of Analytic Workspace Manager.</p>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#BEJFHGFH">Logging Types</a></p>
</li>
<li>
<p><a href="#BEJCBEEI">Logging Targets</a></p>
</li>
<li>
<p><a href="#BEJFACJG">Verbosity Levels</a></p>
</li>
<li>
<p><a href="#BEJGDCBF">Security Model</a></p>
</li>
<li>
<p><a href="#BEJFIGJD">Creating Cube Logs</a></p>
</li>
<li>
<p><a href="#CEGEJBIB">Cube Build Log</a></p>
</li>
<li>
<p><a href="#CEGJFEHI">Cube Dimension Compile Log</a></p>
</li>
<li>
<p><a href="#CEGFBCAH">Cube Operations Log</a></p>
</li>
<li>
<p><a href="#CEGDIICF">Cube Rejected Records Log</a></p>
</li>
</ul>
<div id="ARPLS7279" class="refsect2"><a id="BEJFHGFH"></a><a id="CEGEEIIJ"></a>
<h3 class="refsect2"><a id="sthref2029"></a>Logging Types</h3>
<p>Several logs are available, each one dedicated to storing messages of a particular type. You may use all of them or only those that you find particularly valuable. The logs and their contents are described later in this topic.</p>
<ul>
<li>
<p><a href="#CEGEJBIB">Cube Build Log</a></p>
</li>
<li>
<p><a href="#CEGJFEHI">Cube Dimension Compile Log</a></p>
</li>
<li>
<p><a href="#CEGFBCAH">Cube Operations Log</a></p>
</li>
<li>
<p><a href="#CEGDIICF">Cube Rejected Records Log</a></p>
</li>
</ul>
<p><code dir="ltr">DBMS_CUBE_LOG</code> provides functions that return the binary integer for each log type. You can produce more readable code by using these functions instead of integers for the argument values of other <code dir="ltr">DBMS_CUBE_LOG</code> procedures and functions. Refer to these descriptions:</p>
<ul>
<li>
<p><a href="#CEGJEIHD">TYPE_BUILD Function</a></p>
</li>
<li>
<p><a href="#CEGFACGH">TYPE_DIMENSION_COMPILE Function</a></p>
</li>
<li>
<p><a href="#CEGDJBIB">TYPE_OPERATIONS Function</a></p>
</li>
<li>
<p><a href="#CEGGBIGB">TYPE_REJECTED_RECORDS Function</a></p>
</li>
</ul>
</div>
<!-- class="refsect2" -->
<div id="ARPLS73174" class="refsect2"><a id="BEJCBEEI"></a><a id="CEGDDEDA"></a>
<h3 class="refsect2"><a id="sthref2030"></a>Logging Targets</h3>
<p>The <code dir="ltr">TABLE_CREATE</code> procedure creates database tables for storing the logs. Using the <code dir="ltr">ENABLE</code> procedure, you can create additional targets with changes in the destination or logging level. For example, you might target the Cube Operations log to both a table and a disk file. These are the available targets:</p>
<ul>
<li>
<p>Disk file</p>
</li>
<li>
<p>LOB</p>
</li>
<li>
<p>Database table</p>
</li>
<li>
<p>Trace file</p>
</li>
</ul>
<p>See <a href="#CEGBJCAF">&#34;ENABLE Procedure&#34;</a> for more information about creating multiple targets.</p>
<p><code dir="ltr">DBMS_CUBE_LOG</code> provides functions that return the binary integer for each target type. You can produce more readable code by using these functions instead of integers for the argument values of other <code dir="ltr">DBMS_CUBE_LOG</code> procedures and functions. Refer to these descriptions:</p>
<ul>
<li>
<p><a href="#CEGFIGBG">TARGET_FILE Function</a></p>
</li>
<li>
<p><a href="#CEGIIFAC">TARGET_LOB Function</a></p>
</li>
<li>
<p><a href="#CEGICDEC">TARGET_TABLE Function</a></p>
</li>
<li>
<p><a href="#CEGJFAGG">TARGET_TRACE Function</a></p>
</li>
</ul>
</div>
<!-- class="refsect2" -->
<div id="ARPLS73175" class="refsect2"><a id="BEJFACJG"></a><a id="CEGFAEBB"></a>
<h3 class="refsect2"><a id="sthref2031"></a>Verbosity Levels</h3>
<p>You can decide how much information is recorded in a log. You may want fewer details when leaving a job to run overnight than when you are monitoring the success of a new build. You can choose from these verbosity levels. Each level adds to the preceding level.</p>
<ul>
<li>
<p><code dir="ltr">LOWEST</code>: Logs the status of each command used to build the cube dimensions and cubes, the use of slave processes, and summary records. This is the basic logging level.</p>
</li>
<li>
<p><code dir="ltr">LOW</code>: Logs messages from the OLAP engine, such as start and finish records for SQL Import, Aggregate, and Update.</p>
</li>
<li>
<p><code dir="ltr">MEDIUM</code>: Logs messages at the level used by Analytic Workspace Manager.</p>
</li>
<li>
<p><code dir="ltr">HIGH</code>: Logs messages that provide tuning information, such as composite lengths, partitioning details, object sizes, and aggregation work lists. This level is intended for use by Oracle Field Services.</p>
</li>
<li>
<p><code dir="ltr">HIGHEST</code>: Logs debugging messages and other information typically sent to a trace file. This level is intended for use by Oracle Support Services.</p>
</li>
</ul>
<p><code dir="ltr">DBMS_CUBE_LOG</code> provides functions that return the binary integer for each verbosity level. You can produce more readable code by using these functions instead of integers for the argument values of other <code dir="ltr">DBMS_CUBE_LOG</code> procedures and functions. Refer to these descriptions:</p>
<ul>
<li>
<p><a href="#CEGBHFDE">LEVEL_LOWEST Function</a></p>
</li>
<li>
<p><a href="#CEGHBBCB">LEVEL_LOW Function</a></p>
</li>
<li>
<p><a href="#CEGGAJGE">LEVEL_MEDIUM Function</a></p>
</li>
<li>
<p><a href="#CEGEHJJA">LEVEL_HIGH Function</a></p>
</li>
<li>
<p><a href="#CEGJEABG">LEVEL_HIGHEST Function</a></p>
</li>
</ul>
</div>
<!-- class="refsect2" -->
<div id="ARPLS73176" class="refsect2"><a id="BEJGDCBF"></a>
<h3 class="refsect2">Security Model</h3>
<p>The <code dir="ltr">TABLE_CREATE</code> procedure requires the <code dir="ltr">CREATE TABLE</code> privilege.</p>
</div>
<!-- class="refsect2" -->
<div id="ARPLS72794" class="refsect2"><a id="BEJFIGJD"></a>
<h3 class="refsect2">Creating Cube Logs</h3>
<p>To store logging information in a database table, you must create that table using the TABLE_CREATE procedure. Cube Build logs are always stored in tables. The ENABLE procedure creates the other target types for the other logs.</p>
<p class="itemizedlisttitle">To create a Cube Build log:&nbsp;</p>
<ul>
<li>
<p>Execute the <code dir="ltr">TABLE_CREATE</code> procedure.</p>
</li>
</ul>
<p>The following command creates a Cube Build log with the default name of <code dir="ltr">CUBE_BUILD_LOG</code>:</p>
<pre dir="ltr">EXECUTE dbms_cube_log.table_create(dbms_cube_log.type_build);
</pre>
<p class="orderedlisttitle">To create a Cube Dimension Compile log, Cube Operations log, or Cube Rejected Records log with a database table target:&nbsp;</p>
<ol>
<li>
<p>Execute the <code dir="ltr">TABLE_CREATE</code> procedure to create the table.</p>
</li>
<li>
<p>Execute the <code dir="ltr">ENABLE</code> procedure to begin logging.</p>
</li>
</ol>
<p>These commands create and enable a Cube Operations table with the default name of <code dir="ltr">CUBE_OPERATIONS_LOG</code> and the default verbosity level:</p>
<pre dir="ltr">EXECUTE dbms_cube_log.table_create(dbms_cube_log.type_operations);
EXECUTE dbms_cube_log.enable(dbms_cube_log.type_operations);
 
</pre>
<p class="itemizedlisttitle">To create a Cube Dimension Compile log, Cube Operations log, or Cube Rejected Records log with a trace file, disk file, or LOB target:&nbsp;</p>
<ul>
<li>
<p>Execute the <code dir="ltr">ENABLE</code> procedure.</p>
</li>
</ul>
<p>This command enables the Cube Rejected Records log, sets verbosity to the lowest level, and directs the output to a disk file named <code dir="ltr">rejects.log</code> in the <code dir="ltr">WORK_DIR</code> database directory:</p>
<pre dir="ltr">EXECUTE dbms_cube_log.enable(dbms_cube_log.type_rejected_records, -
     dbms_cube_log.target_file, dbms_cube_log.level_lowest, -
     &#39;WORK_DIR/rejects.log&#39;);
</pre></div>
<!-- class="refsect2" -->
<div id="ARPLS72795" class="refsect2"><a id="CEGEJBIB"></a>
<h3 class="refsect2"><a id="sthref2035"></a><a id="sthref2036"></a><a id="sthref2037"></a>Cube Build Log</h3>
<p>The Cube Build log provides information about what happened during a build. Use this log to determine whether the build produced the results you were expecting, and if not, why not.</p>
<p>The contents of the Cube Build log are refreshed continuously during a build. You can query the log at any time to evaluate the progress of the build and to estimate the time to completion.</p>
<p>The default name of the Cube Build log is <code dir="ltr">CUBE_BUILD_LOG</code>. The following table describes its contents.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
To manage a Cube Build log, use only the <code dir="ltr">TABLE_CREATE</code> and <code dir="ltr">VERSION</code> procedures.</div>
<div class="inftblinformalwide">
<table class="cellalignment4327" title="CUBE_BUILD_LOG Table" summary="CUBE_BUILD_LOG Column Descriptions" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t4">Column</th>
<th class="cellalignment4328" id="r1c2-t4">Datatype</th>
<th class="cellalignment4328" id="r1c3-t4">NULL</th>
<th class="cellalignment4328" id="r1c4-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t4" headers="r1c1-t4"><code dir="ltr">BUILD_ID</code></td>
<td class="cellalignment4329" headers="r2c1-t4 r1c2-t4"><code dir="ltr">NUMBER</code></td>
<td class="cellalignment4329" headers="r2c1-t4 r1c3-t4">--</td>
<td class="cellalignment4329" headers="r2c1-t4 r1c4-t4">A unique sequence number for the build. The same number is used for slave processes in a parallel build.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t4" headers="r1c1-t4"><code dir="ltr">SLAVE_NUMBER</code></td>
<td class="cellalignment4329" headers="r3c1-t4 r1c2-t4"><code dir="ltr">NUMBER</code></td>
<td class="cellalignment4329" headers="r3c1-t4 r1c3-t4">--</td>
<td class="cellalignment4329" headers="r3c1-t4 r1c4-t4">A counter for slave processes in a parallel build: 0 is the master process, 1 is the first slave, 2 is the second slave, and so forth.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t4" headers="r1c1-t4"><code dir="ltr">STATUS</code></td>
<td class="cellalignment4329" headers="r4c1-t4 r1c2-t4"><code dir="ltr">VARCHAR2(10)</code></td>
<td class="cellalignment4329" headers="r4c1-t4 r1c3-t4">--</td>
<td class="cellalignment4329" headers="r4c1-t4 r1c4-t4">The current status of the command: <code dir="ltr">STARTED</code>, <code dir="ltr">COMPLETED</code>, <code dir="ltr">FAILED</code>, or <code dir="ltr">WORKING</code>.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t4" headers="r1c1-t4"><code dir="ltr">COMMAND</code></td>
<td class="cellalignment4329" headers="r5c1-t4 r1c2-t4"><code dir="ltr">VARCHAR2(25)</code></td>
<td class="cellalignment4329" headers="r5c1-t4 r1c3-t4">--</td>
<td class="cellalignment4329" headers="r5c1-t4 r1c4-t4">The name of the command being executed, such as <code dir="ltr">BUILD</code>, <code dir="ltr">LOAD</code>, and <code dir="ltr">SOLVE</code>.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t4" headers="r1c1-t4"><code dir="ltr">BUILD_OBJECT</code></td>
<td class="cellalignment4329" headers="r6c1-t4 r1c2-t4"><code dir="ltr">VARCHAR2(500)</code></td>
<td class="cellalignment4329" headers="r6c1-t4 r1c3-t4">--</td>
<td class="cellalignment4329" headers="r6c1-t4 r1c4-t4">The name of the cube or cube dimension being processed.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t4" headers="r1c1-t4"><code dir="ltr">BUILD_OBJECT_TYPE</code></td>
<td class="cellalignment4329" headers="r7c1-t4 r1c2-t4"><code dir="ltr">VARCHAR2(10)</code></td>
<td class="cellalignment4329" headers="r7c1-t4 r1c3-t4">--</td>
<td class="cellalignment4329" headers="r7c1-t4 r1c4-t4">The type of object: <code dir="ltr">CUBE</code>, <code dir="ltr">DIMENSION</code>, or <code dir="ltr">BUILD</code>.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t4" headers="r1c1-t4"><code dir="ltr">OUTPUT</code></td>
<td class="cellalignment4329" headers="r8c1-t4 r1c2-t4"><code dir="ltr">CLOB</code></td>
<td class="cellalignment4329" headers="r8c1-t4 r1c3-t4">--</td>
<td class="cellalignment4329" headers="r8c1-t4 r1c4-t4">Information structured like an XML document about the command, or <code dir="ltr">NULL</code> when there is no additional information, such as for a <code dir="ltr">STARTED</code> row.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t4" headers="r1c1-t4"><code dir="ltr">AW</code></td>
<td class="cellalignment4329" headers="r9c1-t4 r1c2-t4"><code dir="ltr">VARCHAR2(30)</code></td>
<td class="cellalignment4329" headers="r9c1-t4 r1c3-t4">--</td>
<td class="cellalignment4329" headers="r9c1-t4 r1c4-t4">The name of the analytic workspace that contains the objects of the build.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t4" headers="r1c1-t4"><code dir="ltr">OWNER</code></td>
<td class="cellalignment4329" headers="r10c1-t4 r1c2-t4"><code dir="ltr">VARCHAR2(30)</code></td>
<td class="cellalignment4329" headers="r10c1-t4 r1c3-t4">&nbsp;</td>
<td class="cellalignment4329" headers="r10c1-t4 r1c4-t4">The owner of the analytic workspace and all the objects of the build.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t4" headers="r1c1-t4"><code dir="ltr">PARTITION</code></td>
<td class="cellalignment4329" headers="r11c1-t4 r1c2-t4"><code dir="ltr">VARCHAR2(10)</code></td>
<td class="cellalignment4329" headers="r11c1-t4 r1c3-t4">--</td>
<td class="cellalignment4329" headers="r11c1-t4 r1c4-t4">The name of the partition being processed, or <code dir="ltr">NULL</code> when the current operation does not correspond to a partition.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t4" headers="r1c1-t4"><code dir="ltr">SCHEDULER_JOB</code></td>
<td class="cellalignment4329" headers="r12c1-t4 r1c2-t4"><code dir="ltr">VARCHAR2(100)</code></td>
<td class="cellalignment4329" headers="r12c1-t4 r1c3-t4">--</td>
<td class="cellalignment4329" headers="r12c1-t4 r1c4-t4">A user-specified string to identify the build.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t4" headers="r1c1-t4"><code dir="ltr">TIME</code></td>
<td class="cellalignment4329" headers="r13c1-t4 r1c2-t4"><code dir="ltr">TIMESTAMP(6)</code></td>
<td class="cellalignment4329" headers="r13c1-t4 r1c3-t4">--</td>
<td class="cellalignment4329" headers="r13c1-t4 r1c4-t4">The time the row is added to the table.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t4" headers="r1c1-t4"><code dir="ltr">BUILD_SCRIPT</code></td>
<td class="cellalignment4329" headers="r14c1-t4 r1c2-t4"><code dir="ltr">CLOB</code></td>
<td class="cellalignment4329" headers="r14c1-t4 r1c3-t4">--</td>
<td class="cellalignment4329" headers="r14c1-t4 r1c4-t4">The cube build script. Populated only in rows where <code dir="ltr">COMMAND</code> is <code dir="ltr">BUILD</code>.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r15c1-t4" headers="r1c1-t4"><code dir="ltr">BUILD_TYPE</code></td>
<td class="cellalignment4329" headers="r15c1-t4 r1c2-t4"><code dir="ltr">VARCHAR2(22)</code></td>
<td class="cellalignment4329" headers="r15c1-t4 r1c3-t4">--</td>
<td class="cellalignment4329" headers="r15c1-t4 r1c4-t4">The origin of the build: <code dir="ltr">DBMS_CUBE</code>, <code dir="ltr">DBMS_MVIEW</code>, <code dir="ltr">JAVA</code>, or <code dir="ltr">SLAVE</code>.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r16c1-t4" headers="r1c1-t4"><code dir="ltr">COMMAND_DEPTH</code></td>
<td class="cellalignment4329" headers="r16c1-t4 r1c2-t4"><code dir="ltr">NUMBER(2)</code></td>
<td class="cellalignment4329" headers="r16c1-t4 r1c3-t4">--</td>
<td class="cellalignment4329" headers="r16c1-t4 r1c4-t4">The nesting depth of the command. For example, <code dir="ltr">COMPILE HIERARCHIES</code> is a component step of <code dir="ltr">COMPILE</code>, so if <code dir="ltr">COMPILE</code> has a depth of 1, then <code dir="ltr">COMPILE HIERARCHIES</code> has a depth of 2.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r17c1-t4" headers="r1c1-t4"><code dir="ltr">BUILD_SUB_OBJECT</code></td>
<td class="cellalignment4329" headers="r17c1-t4 r1c2-t4"><code dir="ltr">VARCHAR2(30)</code></td>
<td class="cellalignment4329" headers="r17c1-t4 r1c3-t4">--</td>
<td class="cellalignment4329" headers="r17c1-t4 r1c4-t4">The name of a subobject being processed, such as a measure that does not inherit the aggregation rules of the cube.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r18c1-t4" headers="r1c1-t4"><code dir="ltr">REFRESH_METHOD</code></td>
<td class="cellalignment4329" headers="r18c1-t4 r1c2-t4"><code dir="ltr">VARCHAR2(1)</code></td>
<td class="cellalignment4329" headers="r18c1-t4 r1c3-t4">--</td>
<td class="cellalignment4329" headers="r18c1-t4 r1c4-t4">The refresh method, such as <code dir="ltr">C</code> or <code dir="ltr">F</code>, that is associated with the current command. The refresh method is important only for the <code dir="ltr">CLEAR</code> step.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r19c1-t4" headers="r1c1-t4"><code dir="ltr">SEQ_NUMBER</code></td>
<td class="cellalignment4329" headers="r19c1-t4 r1c2-t4"><code dir="ltr">NUMBER</code></td>
<td class="cellalignment4329" headers="r19c1-t4 r1c3-t4">--</td>
<td class="cellalignment4329" headers="r19c1-t4 r1c4-t4">Not currently used.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r20c1-t4" headers="r1c1-t4"><code dir="ltr">COMMAND_NUMBER</code></td>
<td class="cellalignment4329" headers="r20c1-t4 r1c2-t4"><code dir="ltr">NUMBER</code></td>
<td class="cellalignment4329" headers="r20c1-t4 r1c3-t4">--</td>
<td class="cellalignment4329" headers="r20c1-t4 r1c4-t4">The sequence number of the command in the current process, which can be used to distinguish the same command on different objects. For example, a <code dir="ltr">LOAD</code> on <code dir="ltr">PRODUCT</code> and a <code dir="ltr">LOAD</code> on <code dir="ltr">TIME</code>.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r21c1-t4" headers="r1c1-t4"><code dir="ltr">IN_BRANCH</code></td>
<td class="cellalignment4329" headers="r21c1-t4 r1c2-t4"><code dir="ltr">NUMBER(1)</code></td>
<td class="cellalignment4329" headers="r21c1-t4 r1c3-t4">--</td>
<td class="cellalignment4329" headers="r21c1-t4 r1c4-t4">Not currently used.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r22c1-t4" headers="r1c1-t4"><code dir="ltr">COMMAND_STATUS_NUMBER</code></td>
<td class="cellalignment4329" headers="r22c1-t4 r1c2-t4"><code dir="ltr">NUMBER</code></td>
<td class="cellalignment4329" headers="r22c1-t4 r1c3-t4">--</td>
<td class="cellalignment4329" headers="r22c1-t4 r1c4-t4">Identifies the sequence number of all rows for a particular command. For example, a particular command might be represented by four rows: The first row has a status of <code dir="ltr">STARTED</code> and the last row has a status of <code dir="ltr">COMPLETED</code>. This column is used for sorting.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformalwide" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72796" class="refsect2"><a id="CEGJFEHI"></a>
<h3 class="refsect2"><a id="sthref2038"></a><a id="sthref2039"></a><a id="sthref2040"></a>Cube Dimension Compile Log</h3>
<p>When solving a cube, OLAP checks the dimension hierarchies to make sure they are valid. Errors that occur during this validation are written to the Cube Dimension Compile log. The checks include:</p>
<ul>
<li>
<p>Circularity: Hierarchies are defined by parent-child relations among dimension members. Circularity occurs when a dimension member is specified as its own ancestor or descendant.</p>
</li>
<li>
<p>Hierarchy type: Hierarchies can be level based or value based. You can define a cube so that only level-based hierarchies are valid, such as a cube materialized view.</p>
</li>
<li>
<p>Level options: Level-based hierarchies can be regular, ragged, or skip level. You can define a dimension so that only regular hierarchies are valid, such as a Time dimension.</p>
</li>
</ul>
<p>The default name of the Cube Dimension Compile log is <code dir="ltr">CUBE_DIMENSION_COMPILE</code>. The following table describes its contents.</p>
<div class="inftblinformalwide">
<table class="cellalignment4327" summary="Cube dimension compile log column descriptions" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t5">Column</th>
<th class="cellalignment4328" id="r1c2-t5">Datatype</th>
<th class="cellalignment4328" id="r1c3-t5">NULL</th>
<th class="cellalignment4328" id="r1c4-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t5" headers="r1c1-t5"><code dir="ltr">ID</code></td>
<td class="cellalignment4329" headers="r2c1-t5 r1c2-t5"><code dir="ltr">NUMBER</code></td>
<td class="cellalignment4329" headers="r2c1-t5 r1c3-t5">--</td>
<td class="cellalignment4329" headers="r2c1-t5 r1c4-t5">Current operation identifier</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t5" headers="r1c1-t5"><code dir="ltr">SEQ_NUMBER</code></td>
<td class="cellalignment4329" headers="r3c1-t5 r1c2-t5"><code dir="ltr">NUMBER</code></td>
<td class="cellalignment4329" headers="r3c1-t5 r1c3-t5">--</td>
<td class="cellalignment4329" headers="r3c1-t5 r1c4-t5">Sequence number in the Cube Build log</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t5" headers="r1c1-t5"><code dir="ltr">ERROR#</code></td>
<td class="cellalignment4329" headers="r4c1-t5 r1c2-t5"><code dir="ltr">NUMBER(8)</code></td>
<td class="cellalignment4329" headers="r4c1-t5 r1c3-t5"><code dir="ltr">NOT NULL</code></td>
<td class="cellalignment4329" headers="r4c1-t5 r1c4-t5">Number of the error being reported</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t5" headers="r1c1-t5"><code dir="ltr">ERROR_MESSAGE</code></td>
<td class="cellalignment4329" headers="r5c1-t5 r1c2-t5"><code dir="ltr">VARCHAR2(2000)</code></td>
<td class="cellalignment4329" headers="r5c1-t5 r1c3-t5">--</td>
<td class="cellalignment4329" headers="r5c1-t5 r1c4-t5">Error message associated with the error</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t5" headers="r1c1-t5"><code dir="ltr">DIMENSION</code></td>
<td class="cellalignment4329" headers="r6c1-t5 r1c2-t5"><code dir="ltr">VARCHAR2(100)</code></td>
<td class="cellalignment4329" headers="r6c1-t5 r1c3-t5">--</td>
<td class="cellalignment4329" headers="r6c1-t5 r1c4-t5">Name of the dimension being compiled</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t5" headers="r1c1-t5"><code dir="ltr">DIMENSION_MEMBER</code></td>
<td class="cellalignment4329" headers="r7c1-t5 r1c2-t5"><code dir="ltr">VARCHAR2(100)</code></td>
<td class="cellalignment4329" headers="r7c1-t5 r1c3-t5">--</td>
<td class="cellalignment4329" headers="r7c1-t5 r1c4-t5">Faulty dimension member</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t5" headers="r1c1-t5"><code dir="ltr">MEMBER_ANCESTOR</code></td>
<td class="cellalignment4329" headers="r8c1-t5 r1c2-t5"><code dir="ltr">VARCHAR2(100)</code></td>
<td class="cellalignment4329" headers="r8c1-t5 r1c3-t5">--</td>
<td class="cellalignment4329" headers="r8c1-t5 r1c4-t5">Parent of <code dir="ltr">DIMENSION_MEMBER</code></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t5" headers="r1c1-t5"><code dir="ltr">HIERARCHY1</code></td>
<td class="cellalignment4329" headers="r9c1-t5 r1c2-t5"><code dir="ltr">VARCHAR2(100)</code></td>
<td class="cellalignment4329" headers="r9c1-t5 r1c3-t5">--</td>
<td class="cellalignment4329" headers="r9c1-t5 r1c4-t5">First hierarchy involved in the error</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t5" headers="r1c1-t5"><code dir="ltr">HIERARCHY2</code></td>
<td class="cellalignment4329" headers="r10c1-t5 r1c2-t5"><code dir="ltr">VARCHAR2(100)</code></td>
<td class="cellalignment4329" headers="r10c1-t5 r1c3-t5">--</td>
<td class="cellalignment4329" headers="r10c1-t5 r1c4-t5">Second hierarchy involved in the error</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t5" headers="r1c1-t5"><code dir="ltr">ERROR_CONTEXT</code></td>
<td class="cellalignment4329" headers="r11c1-t5 r1c2-t5"><code dir="ltr">CLOB</code></td>
<td class="cellalignment4329" headers="r11c1-t5 r1c3-t5">--</td>
<td class="cellalignment4329" headers="r11c1-t5 r1c4-t5">Additional information about the error</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformalwide" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72797" class="refsect2"><a id="CEGFBCAH"></a>
<h3 class="refsect2"><a id="sthref2041"></a><a id="sthref2042"></a><a id="sthref2043"></a>Cube Operations Log</h3>
<p>The Cube Operations log contains messages and debugging information for all OLAP engine events. You can track current operations at a very detailed level. Using the <code dir="ltr">SQL_ID</code> column, you can join the Cube Operations log to dynamic performance views such as <code dir="ltr">V$SQL</code>, <code dir="ltr">V$SESSION</code>, and <code dir="ltr">V$SESSION_LONGOPS</code> to see cube operations in the context of other database operations such as I/O Wait and CPU.</p>
<p>The default name of the Cube Operations log is <code dir="ltr">CUBE_OPERATIONS_LOG</code>. The following table describes its contents.</p>
<div class="inftblinformalwide">
<table class="cellalignment4327" summary="Cube operations log column descriptions" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t6">Column</th>
<th class="cellalignment4328" id="r1c2-t6">Datatype</th>
<th class="cellalignment4328" id="r1c3-t6">NULL</th>
<th class="cellalignment4328" id="r1c4-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t6" headers="r1c1-t6"><code dir="ltr">INST_ID</code></td>
<td class="cellalignment4329" headers="r2c1-t6 r1c2-t6"><code dir="ltr">NUMBER</code></td>
<td class="cellalignment4329" headers="r2c1-t6 r1c3-t6"><code dir="ltr">NOT NULL</code></td>
<td class="cellalignment4329" headers="r2c1-t6 r1c4-t6">Instance identifier</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t6" headers="r1c1-t6"><code dir="ltr">SID</code></td>
<td class="cellalignment4329" headers="r3c1-t6 r1c2-t6"><code dir="ltr">NUMBER</code></td>
<td class="cellalignment4329" headers="r3c1-t6 r1c3-t6"><code dir="ltr">NOT NULL</code></td>
<td class="cellalignment4329" headers="r3c1-t6 r1c4-t6">Session identifier</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t6" headers="r1c1-t6"><code dir="ltr">SERIAL#</code></td>
<td class="cellalignment4329" headers="r4c1-t6 r1c2-t6"><code dir="ltr">NUMBER</code></td>
<td class="cellalignment4329" headers="r4c1-t6 r1c3-t6"><code dir="ltr">NOT NULL</code></td>
<td class="cellalignment4329" headers="r4c1-t6 r1c4-t6">Session serial number</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t6" headers="r1c1-t6"><code dir="ltr">USER#</code></td>
<td class="cellalignment4329" headers="r5c1-t6 r1c2-t6"><code dir="ltr">NUMBER</code></td>
<td class="cellalignment4329" headers="r5c1-t6 r1c3-t6"><code dir="ltr">NOT NULL</code></td>
<td class="cellalignment4329" headers="r5c1-t6 r1c4-t6">User identifier</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t6" headers="r1c1-t6"><code dir="ltr">SQL_ID</code></td>
<td class="cellalignment4329" headers="r6c1-t6 r1c2-t6"><code dir="ltr">VARCHAR2(13)</code></td>
<td class="cellalignment4329" headers="r6c1-t6 r1c3-t6">--</td>
<td class="cellalignment4329" headers="r6c1-t6 r1c4-t6">Executing SQL statement identifier</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t6" headers="r1c1-t6"><code dir="ltr">JOB</code></td>
<td class="cellalignment4329" headers="r7c1-t6 r1c2-t6"><code dir="ltr">NUMBER</code></td>
<td class="cellalignment4329" headers="r7c1-t6 r1c3-t6">--</td>
<td class="cellalignment4329" headers="r7c1-t6 r1c4-t6">Job identifier</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t6" headers="r1c1-t6"><code dir="ltr">ID</code></td>
<td class="cellalignment4329" headers="r8c1-t6 r1c2-t6"><code dir="ltr">NUMBER</code></td>
<td class="cellalignment4329" headers="r8c1-t6 r1c3-t6">--</td>
<td class="cellalignment4329" headers="r8c1-t6 r1c4-t6">Current operation identifier</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t6" headers="r1c1-t6"><code dir="ltr">PARENT_ID</code></td>
<td class="cellalignment4329" headers="r9c1-t6 r1c2-t6"><code dir="ltr">NUMBER</code></td>
<td class="cellalignment4329" headers="r9c1-t6 r1c3-t6">--</td>
<td class="cellalignment4329" headers="r9c1-t6 r1c4-t6">Parent operation identifier</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t6" headers="r1c1-t6"><code dir="ltr">SEQ_NUMBER</code></td>
<td class="cellalignment4329" headers="r10c1-t6 r1c2-t6"><code dir="ltr">NUMBER</code></td>
<td class="cellalignment4329" headers="r10c1-t6 r1c3-t6">--</td>
<td class="cellalignment4329" headers="r10c1-t6 r1c4-t6">Sequence number in the Cube Build log</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t6" headers="r1c1-t6"><code dir="ltr">TIME</code></td>
<td class="cellalignment4329" headers="r11c1-t6 r1c2-t6"><code dir="ltr">TIMESTAMP(6) WITH TIME ZONE</code></td>
<td class="cellalignment4329" headers="r11c1-t6 r1c3-t6"><code dir="ltr">NOT NULL</code></td>
<td class="cellalignment4329" headers="r11c1-t6 r1c4-t6">Time the record was added to the Cube Operations log</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t6" headers="r1c1-t6"><code dir="ltr">LOG_LEVEL</code></td>
<td class="cellalignment4329" headers="r12c1-t6 r1c2-t6"><code dir="ltr">NUMBER(4)</code></td>
<td class="cellalignment4329" headers="r12c1-t6 r1c3-t6"><code dir="ltr">NOT NULL</code></td>
<td class="cellalignment4329" headers="r12c1-t6 r1c4-t6">Verbosity level of the record, as specified by the <code dir="ltr">DBMS_CUBE_LOG.ENABLE</code> procedure.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t6" headers="r1c1-t6"><code dir="ltr">DEPTH</code></td>
<td class="cellalignment4329" headers="r13c1-t6 r1c2-t6"><code dir="ltr">NUMBER(4)</code></td>
<td class="cellalignment4329" headers="r13c1-t6 r1c3-t6">--</td>
<td class="cellalignment4329" headers="r13c1-t6 r1c4-t6">Nesting depth of the record. For example, a level of 0 indicates that the operation and suboperation are not nested within other operations and suboperations.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t6" headers="r1c1-t6"><code dir="ltr">OPERATION</code></td>
<td class="cellalignment4329" headers="r14c1-t6 r1c2-t6"><code dir="ltr">VARCHAR2(15)</code></td>
<td class="cellalignment4329" headers="r14c1-t6 r1c3-t6"><code dir="ltr">NOT NULL</code></td>
<td class="cellalignment4329" headers="r14c1-t6 r1c4-t6">Current operation, such as AGGREGATE, ROWSOURCE, or SQLIMPORT.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r15c1-t6" headers="r1c1-t6"><code dir="ltr">SUBOPERATION</code></td>
<td class="cellalignment4329" headers="r15c1-t6 r1c2-t6"><code dir="ltr">VARCHAR2(20)</code></td>
<td class="cellalignment4329" headers="r15c1-t6 r1c3-t6">--</td>
<td class="cellalignment4329" headers="r15c1-t6 r1c4-t6">Current suboperation, such as Loading or Import</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r16c1-t6" headers="r1c1-t6"><code dir="ltr">STATUS</code></td>
<td class="cellalignment4329" headers="r16c1-t6 r1c2-t6"><code dir="ltr">VARCHAR2(10)</code></td>
<td class="cellalignment4329" headers="r16c1-t6 r1c3-t6"><code dir="ltr">NOT NULL</code></td>
<td class="cellalignment4329" headers="r16c1-t6 r1c4-t6">Current status of the operation, such as START, TRACE, COMPLETED, or <code dir="ltr">Failed</code>.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r17c1-t6" headers="r1c1-t6"><code dir="ltr">NAME</code></td>
<td class="cellalignment4329" headers="r17c1-t6 r1c2-t6"><code dir="ltr">VARCHAR2(20)</code></td>
<td class="cellalignment4329" headers="r17c1-t6 r1c3-t6"><code dir="ltr">NOT NULL</code></td>
<td class="cellalignment4329" headers="r17c1-t6 r1c4-t6">Name of the record, such as ROWS LOADED, AVE_ROW_LEN, and PAGEPOOLSIZE</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r18c1-t6" headers="r1c1-t6"><code dir="ltr">VALUE</code></td>
<td class="cellalignment4329" headers="r18c1-t6 r1c2-t6"><code dir="ltr">VARCHAR2(4000)</code></td>
<td class="cellalignment4329" headers="r18c1-t6 r1c3-t6">--</td>
<td class="cellalignment4329" headers="r18c1-t6 r1c4-t6">Value of <code dir="ltr">NAME</code></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r19c1-t6" headers="r1c1-t6"><code dir="ltr">DETAILS</code></td>
<td class="cellalignment4329" headers="r19c1-t6 r1c2-t6"><code dir="ltr">CLOB</code></td>
<td class="cellalignment4329" headers="r19c1-t6 r1c3-t6">--</td>
<td class="cellalignment4329" headers="r19c1-t6 r1c4-t6">Additional information about <code dir="ltr">NAME</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformalwide" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72798" class="refsect2"><a id="CEGDIICF"></a>
<h3 class="refsect2"><a id="sthref2044"></a><a id="sthref2045"></a><a id="sthref2046"></a>Cube Rejected Records Log</h3>
<p>The Cube Rejected Records log contains a summary of the loader job and any records that were rejected because they did not meet the expected format.</p>
<p>A single row in the source table may have errors in more than one field. Each field generates an error in the log, resulting in multiple rows with the same rowid4</p>
<p>in the <code dir="ltr">SOURCE_ROW</code> column.</p>
<p>The default name of the Cube Rejected Records log is <code dir="ltr">CUBE_REJECTED_RECORDS</code>. The following table describes its contents.</p>
<div class="inftblinformalwide">
<table class="cellalignment4327" summary="Cube rejected records log column descriptions" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t7">Column</th>
<th class="cellalignment4328" id="r1c2-t7">Datatype</th>
<th class="cellalignment4328" id="r1c3-t7">NULL</th>
<th class="cellalignment4328" id="r1c4-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t7" headers="r1c1-t7"><code dir="ltr">ID</code></td>
<td class="cellalignment4329" headers="r2c1-t7 r1c2-t7"><code dir="ltr">NUMBER</code></td>
<td class="cellalignment4329" headers="r2c1-t7 r1c3-t7">--</td>
<td class="cellalignment4329" headers="r2c1-t7 r1c4-t7">Current operation identifier</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t7" headers="r1c1-t7"><code dir="ltr">SEQ_NUMBER</code></td>
<td class="cellalignment4329" headers="r3c1-t7 r1c2-t7"><code dir="ltr">NUMBER</code></td>
<td class="cellalignment4329" headers="r3c1-t7 r1c3-t7">--</td>
<td class="cellalignment4329" headers="r3c1-t7 r1c4-t7">Sequence number in the Cube Build log</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t7" headers="r1c1-t7"><code dir="ltr">ERROR#</code></td>
<td class="cellalignment4329" headers="r4c1-t7 r1c2-t7"><code dir="ltr">NUMBER(8)</code></td>
<td class="cellalignment4329" headers="r4c1-t7 r1c3-t7"><code dir="ltr">NOT NULL</code></td>
<td class="cellalignment4329" headers="r4c1-t7 r1c4-t7">Number of the error triggered by the record</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t7" headers="r1c1-t7"><code dir="ltr">ERROR_MESSAGE</code></td>
<td class="cellalignment4329" headers="r5c1-t7 r1c2-t7"><code dir="ltr">VARCHAR2</code></td>
<td class="cellalignment4329" headers="r5c1-t7 r1c3-t7">--</td>
<td class="cellalignment4329" headers="r5c1-t7 r1c4-t7">Error message associated with the error</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t7" headers="r1c1-t7"><code dir="ltr">RECORD#</code></td>
<td class="cellalignment4329" headers="r6c1-t7 r1c2-t7"><code dir="ltr">NUMBER(38)</code></td>
<td class="cellalignment4329" headers="r6c1-t7 r1c3-t7">--</td>
<td class="cellalignment4329" headers="r6c1-t7 r1c4-t7">Input record number</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t7" headers="r1c1-t7"><code dir="ltr">SOURCE_ROW</code></td>
<td class="cellalignment4329" headers="r7c1-t7 r1c2-t7"><code dir="ltr">ROWID</code></td>
<td class="cellalignment4329" headers="r7c1-t7 r1c3-t7">--</td>
<td class="cellalignment4329" headers="r7c1-t7 r1c4-t7">Rowid of the row in the source table; null when the source is a view or a query</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformalwide" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CEGJAGDD"></a>
<div id="ARPLS72799" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">Summary of DBMS_CUBE_LOG Subprograms</h2>
<div id="ARPLS72800" class="tblformal">
<p class="titleintable"><a id="sthref2047"></a><a id="sthref2048"></a>Table 44-1 DBMS_CUBE_LOG Subprograms</p>
<table class="cellalignment4330" title="DBMS_CUBE_LOG Subprograms" summary="DBMS_CUBE_LOG subprogram descriptions" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t8">Subprogram</th>
<th class="cellalignment4328" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t8" headers="r1c1-t8">
<p><a href="#CEGCIJHF">DEFAULT_NAME Function</a></p>
</td>
<td class="cellalignment4329" headers="r2c1-t8 r1c2-t8">
<p>Returns the default table names of the various log types.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t8" headers="r1c1-t8">
<p><a href="#CEGJEHIC">DISABLE Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r3c1-t8 r1c2-t8">
<p>Turns logging off for the duration of a session.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t8" headers="r1c1-t8">
<p><a href="#CEGBJCAF">ENABLE Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r4c1-t8 r1c2-t8">
<p>Turns on logging for the duration of a session, redirects logging to additional output types, and changes the verbosity level in the logs.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t8" headers="r1c1-t8">
<p><a href="#CEGGDIAE">FLUSH Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r5c1-t8 r1c2-t8">
<p>Forces all buffered messages to be written to the logs.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t8" headers="r1c1-t8">
<p><a href="#CEGCDJHA">GET_LOG Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r6c1-t8 r1c2-t8">
<p>Returns the current settings for the level and location of a particular log.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t8" headers="r1c1-t8">
<p><a href="#CEGDGDGA">GET_LOG_SPEC Function</a></p>
</td>
<td class="cellalignment4329" headers="r7c1-t8 r1c2-t8">
<p>Retrieves a description of all active logs.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t8" headers="r1c1-t8">
<p><a href="#CEGHBDBG">GET_PARAMETER Function</a></p>
</td>
<td class="cellalignment4329" headers="r8c1-t8 r1c2-t8">
<p>Returns the current values of the options that control various aspects of logging.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t8" headers="r1c1-t8">
<p><a href="#CEGEHJJA">LEVEL_HIGH Function</a></p>
</td>
<td class="cellalignment4329" headers="r9c1-t8 r1c2-t8">
<p>Returns the integer value of the high verbosity level.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t8" headers="r1c1-t8">
<p><a href="#CEGJEABG">LEVEL_HIGHEST Function</a></p>
</td>
<td class="cellalignment4329" headers="r10c1-t8 r1c2-t8">
<p>Returns the integer value of the highest verbosity level.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t8" headers="r1c1-t8">
<p><a href="#CEGHBBCB">LEVEL_LOW Function</a></p>
</td>
<td class="cellalignment4329" headers="r11c1-t8 r1c2-t8">
<p>Returns the integer value of the low verbosity level.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t8" headers="r1c1-t8">
<p><a href="#CEGBHFDE">LEVEL_LOWEST Function</a></p>
</td>
<td class="cellalignment4329" headers="r12c1-t8 r1c2-t8">
<p>Returns the integer value of the lowest verbosity level.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t8" headers="r1c1-t8">
<p><a href="#CEGGAJGE">LEVEL_MEDIUM Function</a></p>
</td>
<td class="cellalignment4329" headers="r13c1-t8 r1c2-t8">
<p>Returns the integer value of the medium verbosity level.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t8" headers="r1c1-t8">
<p><a href="#CEGFEHGA">SET_LOG_SPEC Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r14c1-t8 r1c2-t8">
<p>Sets all logging to the values specified in the input string.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r15c1-t8" headers="r1c1-t8">
<p><a href="#CEGBJGHJ">SET_PARAMETER Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r15c1-t8 r1c2-t8">
<p>Sets options that control various aspects of logging.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r16c1-t8" headers="r1c1-t8">
<p><a href="#CEGDHJHF">TABLE_CREATE Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r16c1-t8 r1c2-t8">
<p>Creates the table targets for the OLAP logs.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r17c1-t8" headers="r1c1-t8">
<p><a href="#CEGFIGBG">TARGET_FILE Function</a></p>
</td>
<td class="cellalignment4329" headers="r17c1-t8 r1c2-t8">
<p>Returns the integer value of a disk file target.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r18c1-t8" headers="r1c1-t8">
<p><a href="#CEGIIFAC">TARGET_LOB Function</a></p>
</td>
<td class="cellalignment4329" headers="r18c1-t8 r1c2-t8">
<p>Returns the integer value of a LOB target.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r19c1-t8" headers="r1c1-t8">
<p><a href="#CEGICDEC">TARGET_TABLE Function</a></p>
</td>
<td class="cellalignment4329" headers="r19c1-t8 r1c2-t8">
<p>Returns the integer value of a database table target</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r20c1-t8" headers="r1c1-t8">
<p><a href="#CEGJFAGG">TARGET_TRACE Function</a></p>
</td>
<td class="cellalignment4329" headers="r20c1-t8 r1c2-t8">
<p>Returns the integer value of a trace file target.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r21c1-t8" headers="r1c1-t8">
<p><a href="#CEGJEIHD">TYPE_BUILD Function</a></p>
</td>
<td class="cellalignment4329" headers="r21c1-t8 r1c2-t8">
<p>Returns the integer value of the Cube Build log.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r22c1-t8" headers="r1c1-t8">
<p><a href="#CEGFACGH">TYPE_DIMENSION_COMPILE Function</a></p>
</td>
<td class="cellalignment4329" headers="r22c1-t8 r1c2-t8">
<p>Returns the integer value of the Cube Dimension Compile log.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r23c1-t8" headers="r1c1-t8">
<p><a href="#CEGDJBIB">TYPE_OPERATIONS Function</a></p>
</td>
<td class="cellalignment4329" headers="r23c1-t8 r1c2-t8">
<p>Returns the integer value of the Cube Operations log.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r24c1-t8" headers="r1c1-t8">
<p><a href="#CEGGBIGB">TYPE_REJECTED_RECORDS Function</a></p>
</td>
<td class="cellalignment4329" headers="r24c1-t8 r1c2-t8">
<p>Returns the integer value of the Cube Rejected Records log.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r25c1-t8" headers="r1c1-t8">
<p><a href="#CEGBFCDD">VERSION Function</a></p>
</td>
<td class="cellalignment4329" headers="r25c1-t8 r1c2-t8">
<p>Returns the version number of a specific log table or the current version number of a specific log type.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="ARPLS72801" class="refsect2"><a id="CEGCIJHF"></a>
<h3 class="refsect2"><a id="sthref2049"></a>DEFAULT_NAME Function</h3>
<p>This function returns the default table names of the various log types.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2050"></a>Syntax</p>
<pre dir="ltr">DBMS_CUBE_LOG.DEFAULT_NAME (
           LOG_TYPE       IN   BINARY_INTEGER  DEFAULT TYPE_OPERATIONS)
     RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2051"></a>Parameters</p>
<div id="ARPLS72802" class="tblformal">
<p class="titleintable"><a id="sthref2052"></a><a id="sthref2053"></a>Table 44-2 DEFAULT_NAME Function Parameters</p>
<table class="cellalignment4330" title="DEFAULT_NAME Function Parameters" summary="DBMS_CUBE_LOG.DEFAULT_NAME parameters" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t9">Parameter</th>
<th class="cellalignment4328" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t9" headers="r1c1-t9">
<p><code dir="ltr">log_type</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t9 r1c2-t9">
<p>One of the following log types:</p>
<ul>
<li>
<p><code dir="ltr">1</code>: <code dir="ltr">TYPE_OPERATIONS</code></p>
</li>
<li>
<p><code dir="ltr">2</code>: <code dir="ltr">TYPE_REJECTED_RECORDS</code></p>
</li>
<li>
<p><code dir="ltr">3</code>: <code dir="ltr">TYPE_DIMENSION_COMPILE</code></p>
</li>
<li>
<p><code dir="ltr">4</code>: <code dir="ltr">TYPE_BUILD</code></p>
</li>
</ul>
<p>See <a href="#CEGEEIIJ">&#34;Logging Types&#34;</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2054"></a>Returns</p>
<p>The default table name of the specified log type.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2055"></a>Examples</p>
<p>This example returns the default name of the Cube Operations log:</p>
<pre dir="ltr">SELECT dbms_cube_log.default_name FROM dual;
 
DEFAULT_NAME
------------------------------
CUBE_OPERATIONS_LOG
</pre>
<p>The next example returns the default name of the Cube Rejected Records log:</p>
<pre dir="ltr">select dbms_cube_log.default_name(dbms_cube_log.type_rejected_records) -
     &#34;Default Name&#34; from dual;
 
Default Name
-------------------------
CUBE_REJECTED_RECORDS
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72803" class="refsect2"><a id="CEGJEHIC"></a>
<h3 class="refsect2"><a id="sthref2056"></a>DISABLE Procedure</h3>
<p>This procedure turns logging off for the duration of a session, unless logging is explicitly turned on again with the <code dir="ltr">ENABLE</code> procedure.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2057"></a>Syntax</p>
<pre dir="ltr">DBMS_CUBE_LOG.DISABLE (
          LOG_TYPE       IN   BINARY_INTEGER  DEFAULT,
          LOG_TARGET     IN   BINARY_INTEGER  DEFAULT);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2058"></a>Parameters</p>
<div id="ARPLS72804" class="tblformal">
<p class="titleintable"><a id="sthref2059"></a><a id="sthref2060"></a>Table 44-3 DISABLE Procedure Parameters</p>
<table class="cellalignment4330" title="DISABLE Procedure Parameters" summary="DBMS_CUBE_LOG.DISABLE parameters" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t10">Parameter</th>
<th class="cellalignment4328" id="r1c2-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t10" headers="r1c1-t10">
<p><code dir="ltr">log_type</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t10 r1c2-t10">
<p>One of the following log types:</p>
<ul>
<li>
<p><code dir="ltr">1</code>: <code dir="ltr">TYPE_OPERATIONS</code></p>
</li>
<li>
<p><code dir="ltr">2</code>: <code dir="ltr">TYPE_REJECTED_RECORDS</code></p>
</li>
<li>
<p><code dir="ltr">3</code>: <code dir="ltr">TYPE_DIMENSION_COMPILE</code></p>
</li>
</ul>
<p><span class="bold">Note</span>: You cannot disable the Cube Build log with this procedure.</p>
<p>See <a href="#CEGEEIIJ">&#34;Logging Types&#34;</a>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t10" headers="r1c1-t10">
<p><code dir="ltr">log_target</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t10 r1c2-t10">
<p>One of the following destinations for the logging records. The logs are sent to a table unless you previously specified a different target using the <code dir="ltr">ENABLE</code> procedure.</p>
<ul>
<li>
<p><code dir="ltr">1</code>: <code dir="ltr">TARGET_TABLE</code></p>
</li>
<li>
<p><code dir="ltr">2</code>: <code dir="ltr">TARGET_TRACE</code></p>
</li>
<li>
<p><code dir="ltr">3</code>: <code dir="ltr">TARGET_FILE</code></p>
</li>
<li>
<p><code dir="ltr">4</code>: <code dir="ltr">TARGET_LOB</code></p>
</li>
</ul>
<p>See <a href="#CEGDDEDA">&#34;Logging Targets&#34;</a></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2061"></a>Example</p>
<p>This command disables the dimension compilation error log table:</p>
<pre dir="ltr">EXECUTE dbms_cube_log.disable(dbms_cube_log.type_dimension_compile);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72805" class="refsect2"><a id="CEGBJCAF"></a>
<h3 class="refsect2"><a id="sthref2062"></a>ENABLE Procedure</h3>
<p>This procedure turns on logging for the duration of a session or until it is turned off using the <code dir="ltr">DISABLE</code> procedure.</p>
<p>The <code dir="ltr">ENABLE</code> procedure also allows you to direct logging to additional output types and to change the amount of detail in the logs. You can enable a log type to each of the log targets. For example, you can enable the Cube Operations log to the trace file, a table, and a file at different verbosity levels, but you cannot enable the Cube Operations log to two files at the same time.</p>
<p>This procedure also checks the format of the logs and updates them if necessary.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2063"></a>Syntax</p>
<pre dir="ltr">DBMS_CUBE_LOG.ENABLE (
          LOG_TYPE       IN     BINARY_INTEGER  DEFAULT NULL,
          LOG_TARGET     IN     BINARY_INTEGER  DEFAULT NULL,
          LOG_LEVEL      IN     BINARY_INTEGER  DEFAULT NULL);

DBMS_CUBE_LOG.ENABLE (
          LOG_TYPE       IN     BINARY_INTEGER  DEFAULT NULL,
          LOG_TARGET     IN     BINARY_INTEGER  DEFAULT NULL,
          LOG_LEVEL      IN     BINARY_INTEGER  DEFAULT NULL, 
          LOG_LOCATION   IN     VARCHAR2        DEFAULT NULL);

DBMS_CUBE_LOG.ENABLE (
          LOG_TYPE       IN     BINARY_INTEGER  DEFAULT NULL,
          LOG_TARGET     IN     BINARY_INTEGER  DEFAULT NULL,
          LOG_LEVEL      IN     BINARY_INTEGER  DEFAULT NULL, 
          LOG_LOCATION   IN/OUT CLOB );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2064"></a>Parameters</p>
<div id="ARPLS72806" class="tblformal">
<p class="titleintable"><a id="sthref2065"></a><a id="sthref2066"></a>Table 44-4 ENABLE Procedure Parameters</p>
<table class="cellalignment4330" title="ENABLE Procedure Parameters" summary="DBMS_CUBE_LOG.ENABLE parameters" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t11">Parameter</th>
<th class="cellalignment4328" id="r1c2-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t11" headers="r1c1-t11">
<p><code dir="ltr">log_type</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t11 r1c2-t11">
<p>One of the following log types:</p>
<ul>
<li>
<p><code dir="ltr">1</code>: <code dir="ltr">TYPE_OPERATIONS</code></p>
</li>
<li>
<p><code dir="ltr">2</code>: <code dir="ltr">TYPE_REJECTED_RECORDS</code></p>
</li>
<li>
<p><code dir="ltr">3</code>: <code dir="ltr">TYPE_DIMENSION_COMPILE</code></p>
</li>
</ul>
<p><span class="bold">Note</span>: You cannot disable the Cube Build log with this procedure.</p>
<p>See <a href="#CEGEEIIJ">&#34;Logging Types&#34;</a>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t11" headers="r1c1-t11">
<p><code dir="ltr">log_target</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t11 r1c2-t11">
<p>One of the following destinations for the logging records. The logs are sent to a table unless you previously specified a different target using the <code dir="ltr">ENABLE</code> procedure.</p>
<ul>
<li>
<p><code dir="ltr">1</code>: <code dir="ltr">TARGET_TABLE</code></p>
</li>
<li>
<p><code dir="ltr">2</code>: <code dir="ltr">TARGET_TRACE</code></p>
</li>
<li>
<p><code dir="ltr">3</code>: <code dir="ltr">TARGET_FILE</code></p>
</li>
<li>
<p><code dir="ltr">4</code>: <code dir="ltr">TARGET_LOB</code></p>
</li>
</ul>
<p>See <a href="#CEGDDEDA">&#34;Logging Targets&#34;</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t11" headers="r1c1-t11">
<p><code dir="ltr">log_level</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t11 r1c2-t11">
<p>One of the following log verbosity levels. Each level adds new types of messages to the previous level.</p>
<ul>
<li>
<p><code dir="ltr">1</code>: <code dir="ltr">LEVEL_LOWEST</code></p>
</li>
<li>
<p><code dir="ltr">2</code>: <code dir="ltr">LEVEL_LOW</code></p>
</li>
<li>
<p><code dir="ltr">3</code>: <code dir="ltr">LEVEL_MEDIUM</code></p>
</li>
<li>
<p><code dir="ltr">4</code>: <code dir="ltr">LEVEL_HIGH</code></p>
</li>
<li>
<p><code dir="ltr">5</code>: <code dir="ltr">LEVEL_HIGHEST</code></p>
</li>
</ul>
<p>See <a href="#CEGFAEBB">&#34;Verbosity Levels&#34;</a>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t11" headers="r1c1-t11">
<p><code dir="ltr">log_location</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t11 r1c2-t11">
<p>The full identity of the log, such as <code dir="ltr"><span class="codeinlineitalic">owner.table_name</span></code> when <code dir="ltr">log_target</code> is a table.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2067"></a>Examples</p>
<p>The following command enables all cube logs:</p>
<pre dir="ltr">EXECUTE dbms_cube_log.enable;
</pre>
<p>The following PL/SQL procedure sets the log level to <code dir="ltr">LEVEL_LOWEST</code>:</p>
<pre dir="ltr">BEGIN
     dbms_cube_log.disable(dbms_cube_log.type_rejected_records);
     dbms_cube_log.enable(dbms_cube_log.type_rejected_records,
          dbms_cube_log.target_table, dbms_cube_log.level_lowest);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72807" class="refsect2"><a id="CEGGDIAE"></a>
<h3 class="refsect2"><a id="sthref2068"></a>FLUSH Procedure</h3>
<p>This procedure forces all buffered messages to be written to the logs. The buffers are flushed automatically throughout a session, but manually flushing them before viewing the logs assures that you can view all of the messages.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2069"></a>Syntax</p>
<pre dir="ltr">DBMS_CUBE_LOG.FLUSH ( );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2070"></a>Example</p>
<p>The following example flushes the buffers for all of the logs:</p>
<pre dir="ltr">EXECUTE dbms_cube_log.flush;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72808" class="refsect2"><a id="CEGCDJHA"></a>
<h3 class="refsect2"><a id="sthref2071"></a>GET_LOG Procedure</h3>
<p>This procedure returns the current settings for the level and location of a particular log.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2072"></a>Syntax</p>
<pre dir="ltr">DBMS_CUBE_LOG.GET_LOG (
          LOG_TYPE       IN   BINARY_INTEGER  DEFAULT TYPE_OPERATIONS,
          LOG_TARGET     IN   BINARY_INTEGER  DEFAULT TARGET_TABLE,
          LOG_LEVEL      OUT  BINARY_INTEGER,
          LOG_LOCATION   OUT  VARCHAR2 );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2073"></a>Parameters</p>
<div id="ARPLS72809" class="tblformal">
<p class="titleintable"><a id="sthref2074"></a><a id="sthref2075"></a>Table 44-5 GET_LOG Procedure Parameters</p>
<table class="cellalignment4330" title="GET_LOG Procedure Parameters" summary="DBMS_CUBE_LOG.GET_LOG parameters" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t12">Parameter</th>
<th class="cellalignment4328" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t12" headers="r1c1-t12">
<p><code dir="ltr">log_type</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t12 r1c2-t12">
<p>One of the following log types:</p>
<ul>
<li>
<p><code dir="ltr">1</code>: <code dir="ltr">TYPE_OPERATIONS</code></p>
</li>
<li>
<p><code dir="ltr">2</code>: <code dir="ltr">TYPE_REJECTED_RECORDS</code></p>
</li>
<li>
<p><code dir="ltr">3</code>: <code dir="ltr">TYPE_DIMENSION_COMPILE</code></p>
</li>
</ul>
<p>See <a href="#CEGEEIIJ">&#34;Logging Types&#34;</a>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t12" headers="r1c1-t12">
<p><code dir="ltr">log_target</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t12 r1c2-t12">
<p>One of the following destinations for the logging records. The logs are sent to a table unless you previously specified a different target using the <code dir="ltr">ENABLE</code> procedure.</p>
<ul>
<li>
<p><code dir="ltr">1</code>: <code dir="ltr">TARGET_TABLE</code></p>
</li>
<li>
<p><code dir="ltr">2</code>: <code dir="ltr">TARGET_TRACE</code></p>
</li>
<li>
<p><code dir="ltr">3</code>: <code dir="ltr">TARGET_FILE</code></p>
</li>
<li>
<p><code dir="ltr">4</code>: <code dir="ltr">TARGET_LOB</code></p>
</li>
</ul>
<p>See <a href="#CEGDDEDA">&#34;Logging Targets&#34;</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t12" headers="r1c1-t12">
<p><code dir="ltr">log_level</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t12 r1c2-t12">
<p>One of the following log verbosity levels. Each level adds new types of messages to the previous level.</p>
<ul>
<li>
<p><code dir="ltr">1</code>: <code dir="ltr">LEVEL_LOWEST</code></p>
</li>
<li>
<p><code dir="ltr">2</code>: <code dir="ltr">LEVEL_LOW</code></p>
</li>
<li>
<p><code dir="ltr">3</code>: <code dir="ltr">LEVEL_MEDIUM</code></p>
</li>
<li>
<p><code dir="ltr">4</code>: <code dir="ltr">LEVEL_HIGH</code></p>
</li>
<li>
<p><code dir="ltr">5</code>: <code dir="ltr">LEVEL_HIGHEST</code></p>
</li>
</ul>
<p>See <a href="#CEGFAEBB">&#34;Verbosity Levels&#34;</a>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t12" headers="r1c1-t12">
<p><code dir="ltr">log_location</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t12 r1c2-t12">
<p>The full identity of the log, such as <code dir="ltr"><span class="codeinlineitalic">owner.table_name</span></code> when <code dir="ltr">log_target</code> is a table.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2076"></a>Usage Notes</p>
<p>If <code dir="ltr">log_type</code> is not active, then <code dir="ltr">log_level</code> and <code dir="ltr">log_location</code> are null. Use <code dir="ltr">DBMS_CUBE_LOG.ENABLE</code> to activate a log.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2077"></a>Examples</p>
<p>This PL/SQL procedure provides information about the Cube Rejected Records log:</p>
<pre dir="ltr">SET serverout ON format wrapped
 
DECLARE 
     myloglevel  binary_integer;
     mylogtarget varchar2(128);
 
BEGIN
     dbms_cube_log.get_log(dbms_cube_log.type_rejected_records,
     dbms_cube_log.target_table, myloglevel, mylogtarget);

     dbms_output.put_line(&#39;Log Level: &#39; || myloglevel);
     dbms_output.put_line(&#39;Log Target: &#39; || mylogtarget);
END;
/
</pre>
<p>The procedure generates results like the following:</p>
<pre dir="ltr">Log Level: 5

Log Target: GLOBAL.CUBE_REJECTED_RECORDS
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72810" class="refsect2"><a id="CEGDGDGA"></a>
<h3 class="refsect2"><a id="sthref2078"></a>GET_LOG_SPEC Function</h3>
<p>This function retrieves a description of all active Cube Operations logs, Cube Rejected Records logs, and Cube Dimension Compile logs.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2079"></a>Syntax</p>
<pre dir="ltr">DBMS_CUBE_LOG.GET_LOG_SPEC ( )
     RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2080"></a>Returns</p>
<p>The type and target of all active logs.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2081"></a>Usage Notes</p>
<p>You can use the output from this function as the input to <code dir="ltr">SET_LOG_SPEC</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2082"></a>Examples</p>
<p>The following example shows that the Cube Operations log, Cube Rejected Records log, and Cube Dimension Compile log are active. The Cube Operations log is stored in the session trace file and the other logs are stored in tables.</p>
<pre dir="ltr">SELECT dbms_cube_log.get_log_spec FROM dual;
 
GET_LOG_SPEC
--------------------------------------------------------------------------------
OPERATIONS(TABLE, TRACE) REJECTED_RECORDS(TABLE[DEBUG])
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72811" class="refsect2"><a id="CEGHBDBG"></a>
<h3 class="refsect2"><a id="sthref2083"></a>GET_PARAMETER Function</h3>
<p>This function returns the current values of the options that control various aspects of logging. To set these options, use the <code dir="ltr">SET_PARAMETER</code> function.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2084"></a>Syntax</p>
<pre dir="ltr">DBMS_CUBE_LOG.GET_PARAMETER (
          LOG_TYPE       IN   BINARY_INTEGER,
          LOG_PARAMETER  IN   BINARY_INTEGER )
     RETURN BINARY_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2085"></a>Parameters</p>
<div id="ARPLS72812" class="tblformal">
<p class="titleintable"><a id="sthref2086"></a><a id="sthref2087"></a>Table 44-6 GET_PARAMETER Function Parameters</p>
<table class="cellalignment4330" title="GET_PARAMETER Function Parameters" summary="DBMS_CUBE_LOG.GET_PARAMETER parameters" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t13">Parameter</th>
<th class="cellalignment4328" id="r1c2-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t13" headers="r1c1-t13">
<p><code dir="ltr">log_type</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t13 r1c2-t13">
<p>One of the following log types:</p>
<ul>
<li>
<p><code dir="ltr">1</code>: <code dir="ltr">TYPE_OPERATIONS</code></p>
</li>
<li>
<p><code dir="ltr">2</code>: <code dir="ltr">TYPE_REJECTED_RECORDS</code></p>
</li>
<li>
<p><code dir="ltr">3</code>: <code dir="ltr">TYPE_DIMENSION_COMPILE</code></p>
</li>
</ul>
<p>See <a href="#CEGEEIIJ">&#34;Logging Types&#34;</a>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t13" headers="r1c1-t13">
<p><code dir="ltr">log_parameter</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t13 r1c2-t13">
<p>One of the following options:</p>
<ul>
<li>
<p><code dir="ltr">1</code>: <code dir="ltr">MAX_ERRORS</code></p>
</li>
<li>
<p><code dir="ltr">2</code>: <code dir="ltr">FLUSH_INTERVAL</code></p>
</li>
<li>
<p><code dir="ltr">3</code>: <code dir="ltr">LOG_FULL_RECORD</code></p>
</li>
<li>
<p><code dir="ltr">4</code>: <code dir="ltr">LOG_EVERY_N</code></p>
</li>
<li>
<p><code dir="ltr">5</code>: <code dir="ltr">ALLOW_ERRORS</code></p>
</li>
</ul>
<p>See <a href="#CEGBJGHJ">&#34;SET_PARAMETER Procedure&#34;</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2088"></a>Returns</p>
<p>The value of the specified <code dir="ltr"><span class="codeinlineitalic">log_parameter</span></code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2089"></a>Examples</p>
<p>This example shows the current maximum number of errors in the Cube Rejected Records log before logging stops. This parameter was previously set with the <code dir="ltr">SET_PARAMETER</code> procedure.</p>
<pre dir="ltr">SELECT dbms_cube_log.get_parameter(dbms_cube_log.type_rejected_records, 1) -
     &#34;Maximum Records&#34; FROM dual;
 
Maximum Records
---------------
            100
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72813" class="refsect2"><a id="CEGEHJJA"></a>
<h3 class="refsect2"><a id="sthref2090"></a>LEVEL_HIGH Function</h3>
<p>This function returns the integer value of the high verbosity level.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2091"></a>Syntax</p>
<pre dir="ltr">DBMS_CUBE_LOG.LEVEL_HIGH ()
     RETURN BINARY_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2092"></a>Returns</p>
<p><code dir="ltr">4</code></p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2093"></a>Usage Notes</p>
<p>Use this function instead of its binary integer equivalent for the <code dir="ltr"><span class="codeinlineitalic">LOG_LEVEL</span></code> parameter in <code dir="ltr">DBMS_CUBE_LOG</code> subprograms. See <a href="#CEGFAEBB">&#34;Verbosity Levels&#34;</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2094"></a>Example</p>
<p>This command sets the verbosity level of the cube operations table to high:</p>
<pre dir="ltr">EXECUTE dbms_cube_log.enable(dbms_cube_log.type_operations, -
     dbms_cube_log.target_table, dbms_cube_log.level_high);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72814" class="refsect2"><a id="CEGJEABG"></a>
<h3 class="refsect2"><a id="sthref2095"></a>LEVEL_HIGHEST Function</h3>
<p>This function returns the integer value of the highest verbosity level.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2096"></a>Syntax</p>
<pre dir="ltr">DBMS_CUBE_LOG.LEVEL_HIGHEST ()
     RETURN BINARY_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2097"></a>Returns</p>
<p><code dir="ltr">5</code></p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2098"></a>Usage Notes</p>
<p>Use this function instead of its binary integer equivalent for the <code dir="ltr">LOG_LEVEL</code> parameter in <code dir="ltr">DBMS_CUBE_LOG</code> subprograms. See <a href="#CEGFAEBB">&#34;Verbosity Levels&#34;</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2099"></a>Example</p>
<p>This command sets the verbosity level of the cube operations table to highest:</p>
<pre dir="ltr">EXECUTE dbms_cube_log.enable(dbms_cube_log.type_operations, -
     dbms_cube_log.target_table, dbms_cube_log.level_highest);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72815" class="refsect2"><a id="CEGHBBCB"></a>
<h3 class="refsect2"><a id="sthref2100"></a>LEVEL_LOW Function</h3>
<p>This function returns the integer value of the low verbosity level.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2101"></a>Syntax</p>
<pre dir="ltr">DBMS_CUBE_LOG.LEVEL_LOW ()
     RETURN BINARY_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2102"></a>Returns</p>
<p><code dir="ltr">2</code></p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2103"></a>Usage Notes</p>
<p>Use this function instead of its binary integer equivalent for the <code dir="ltr">LOG_LEVEL</code> parameter in <code dir="ltr">DBMS_CUBE_LOG</code> subprograms. See <a href="#CEGFAEBB">&#34;Verbosity Levels&#34;</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2104"></a>Example</p>
<p>This command sets the verbosity level of the cube operations table to low:</p>
<pre dir="ltr">EXECUTE dbms_cube_log.enable(dbms_cube_log.type_operations, -
     dbms_cube_log.target_table, dbms_cube_log.level_low);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72816" class="refsect2"><a id="CEGBHFDE"></a>
<h3 class="refsect2"><a id="sthref2105"></a>LEVEL_LOWEST Function</h3>
<p>This function returns the integer value of the lowest verbosity level. This level logs the status of each command used to build the cube dimensions and cubes, the use of slave processes, and summary records.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2106"></a>Syntax</p>
<pre dir="ltr">DBMS_CUBE_LOG.LEVEL_LOWEST ()
     RETURN BINARY_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2107"></a>Returns</p>
<p><code dir="ltr">1</code></p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2108"></a>Usage Notes</p>
<p>Use this function instead of its binary integer equivalent for the <code dir="ltr">LOG_LEVEL</code> parameter in <code dir="ltr">DBMS_CUBE_LOG</code> subprograms. See <a href="#CEGFAEBB">&#34;Verbosity Levels&#34;</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2109"></a>Example</p>
<p>This command sets the verbosity level of the cube operations table to lowest:</p>
<pre dir="ltr">EXECUTE dbms_cube_log.enable(dbms_cube_log.type_operations, -
     dbms_cube_log.target_table, dbms_cube_log.level_lowest);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72817" class="refsect2"><a id="CEGGAJGE"></a>
<h3 class="refsect2"><a id="sthref2110"></a>LEVEL_MEDIUM Function</h3>
<p>This function returns the integer value of the medium verbosity level.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2111"></a>Syntax</p>
<pre dir="ltr">DBMS_CUBE_LOG.LEVEL_MEDIUM ()
     RETURN BINARY_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2112"></a>Returns</p>
<p><code dir="ltr">3</code></p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2113"></a>Usage Notes</p>
<p>Use this function instead of its binary integer equivalent for the <code dir="ltr">LOG_LEVEL</code> parameter in <code dir="ltr">DBMS_CUBE_LOG</code> subprograms. See <a href="#CEGFAEBB">&#34;Verbosity Levels&#34;</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2114"></a>Example</p>
<p>This command sets the verbosity level of the cube operations table to medium:</p>
<pre dir="ltr">EXECUTE dbms_cube_log.enable(dbms_cube_log.type_operations, -
     dbms_cube_log.target_table, dbms_cube_log.level_medium);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72818" class="refsect2"><a id="CEGFEHGA"></a>
<h3 class="refsect2"><a id="sthref2115"></a>SET_LOG_SPEC Procedure</h3>
<p>This procedure sets all logging to the values specified in the input string.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2116"></a>Syntax</p>
<pre dir="ltr">DBMS_CUBE_LOG.SET_LOG_SPEC (
          LOG_SPEC       IN   VARCHAR2 );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2117"></a>Parameters</p>
<div id="ARPLS72819" class="tblformal">
<p class="titleintable"><a id="sthref2118"></a><a id="sthref2119"></a>Table 44-7 SET_LOG_SPEC Procedure Parameters</p>
<table class="cellalignment4330" title="SET_LOG_SPEC Procedure Parameters" summary="DBMS_CUBE_LOG.SET_LOG_SPEC parameters" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t14">Parameter</th>
<th class="cellalignment4328" id="r1c2-t14">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t14" headers="r1c1-t14">
<p><code dir="ltr">log_spec</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t14 r1c2-t14">
<p>A string consisting of <code dir="ltr"><span class="codeinlineitalic">type</span></code>(<code dir="ltr"><span class="codeinlineitalic">target</span></code>) pairs.</p>
<p><code dir="ltr"><span class="codeinlineitalic">Type</span></code> can be:</p>
<ul>
<li>
<p><code dir="ltr">OPERATIONS</code></p>
</li>
<li>
<p><code dir="ltr">REJECTED_RECORDS</code></p>
</li>
<li>
<p><code dir="ltr">DIMENSION_COMPILE</code></p>
</li>
</ul>
<p><code dir="ltr"><span class="codeinlineitalic">Target</span></code> can be:</p>
<ul>
<li>
<p><code dir="ltr">TABLE</code></p>
</li>
<li>
<p><code dir="ltr">TRACE</code></p>
</li>
<li>
<p><code dir="ltr">FILE</code></p>
</li>
<li>
<p><code dir="ltr">LOB</code></p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2120"></a>Usage Notes</p>
<p>The <code dir="ltr">GET_LOG_SPEC</code> function returns a properly formatted string for <code dir="ltr">SET_LOG_SPEC</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2121"></a>Examples</p>
<p>This PL/SQL procedure disables all logs, verifies that they are disabled, then activates the Cube Operations log and the Cube Rejected Records log.</p>
<pre dir="ltr">BEGIN
     dbms_cube_log.disable;
     dbms_output.put_line(&#39;Cube Logs: &#39; || dbms_cube_log.get_log_spec);

     dbms_cube_log.set_log_spec(&#39;OPERATIONS(TRACE) REJECTED_RECORDS(TABLE)&#39;);
     dbms_output.put_line(&#39;Cube Logs: &#39; || dbms_cube_log.get_log_spec);
END;
/
</pre>
<p>The output from the procedure verifies that the <code dir="ltr">DISABLE</code> function de-activated all logs, and the <code dir="ltr">SET_LOG_SPEC</code> function activated two logs:</p>
<pre dir="ltr">Cube Logs:

Cube Logs: OPERATIONS(TRACE) REJECTED_RECORDS(TABLE)
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72820" class="refsect2"><a id="CEGBJGHJ"></a>
<h3 class="refsect2"><a id="sthref2122"></a>SET_PARAMETER Procedure</h3>
<p>This procedure sets options that control various aspects of logging. To obtain the current value of these options, use the <code dir="ltr">GET_PARAMETER</code> function.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2123"></a>Syntax</p>
<pre dir="ltr">DBMS_CUBE_LOG.SET_PARAMETER (
          LOG_TYPE       IN   BINARY_INTEGER,
          LOG_PARAMETER  IN   BINARY_INTEGER,
          VALUE          IN   BINARY_INTEGER );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2124"></a>Parameters</p>
<div id="ARPLS72821" class="tblformal">
<p class="titleintable"><a id="sthref2125"></a><a id="sthref2126"></a>Table 44-8 SET_PARAMETER Procedure Parameters</p>
<table class="cellalignment4330" title="SET_PARAMETER Procedure Parameters" summary="DBMS_CUBE_LOG.SET_PARAMETER parameters" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t15">Parameter</th>
<th class="cellalignment4328" id="r1c2-t15">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t15" headers="r1c1-t15">
<p><code dir="ltr">log_type</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t15 r1c2-t15">
<p>One of the following log types:</p>
<ul>
<li>
<p><code dir="ltr">1</code>: <code dir="ltr">TYPE_OPERATIONS</code></p>
</li>
<li>
<p><code dir="ltr">2</code>: <code dir="ltr">TYPE_REJECTED_RECORDS</code></p>
</li>
<li>
<p><code dir="ltr">3</code>: <code dir="ltr">TYPE_DIMENSION_COMPILE</code></p>
</li>
<li>
<p><code dir="ltr">4</code>: <code dir="ltr">TYPE_BUILD</code></p>
</li>
</ul>
<p>See <a href="#CEGEEIIJ">&#34;Logging Types&#34;</a>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t15" headers="r1c1-t15">
<p><code dir="ltr">log_parameter</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t15 r1c2-t15">
<p>One of the following parameters:</p>
<ul>
<li>
<p><code dir="ltr">1</code>: <code dir="ltr">MAX_ERRORS</code></p>
<p>Maximum number of records before signalling an end to logging, such as the number of rejected records in the Cube Rejected Records log or the number of compilation errors in the dimension compilation error log.</p>
</li>
<li>
<p><code dir="ltr">2</code>: <code dir="ltr">FLUSH_INTERVAL</code></p>
<p>The number of seconds to buffer the records before writing them to a log. When this parameter is 0, the records are written directly to the logs without buffering.</p>
</li>
<li>
<p><code dir="ltr">3</code>: <code dir="ltr">LOG_FULL_RECORD</code></p>
<p>Controls logging of rejected records. Set this parameter to one of the following constants:</p>
<p><code dir="ltr">0</code>: <code dir="ltr">FULL_RECORD_AUTO</code>: Log the full record when no row ID is available.</p>
<p><code dir="ltr">1</code>: <code dir="ltr">FULL_RECORD_ALWAYS</code>: Always log the full record.</p>
<p><code dir="ltr">2</code>: <code dir="ltr">FULL_RECORD_NEVER</code>: Never log the full record.</p>
</li>
<li>
<p><code dir="ltr">4</code>: <code dir="ltr">LOG_EVERY_N</code></p>
<p>Enters a progress message every <span class="italic">n</span> rows during data maintenance.</p>
</li>
<li>
<p><code dir="ltr">5</code>: <code dir="ltr">ALLOW_ERRORS</code>: Displays logging errors, which are initially turned off to allow processing to proceed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t15" headers="r1c1-t15">
<p><code dir="ltr">value</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t15 r1c2-t15">
<p>The new value of <code dir="ltr"><span class="codeinlineitalic">log_parameter</span></code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2127"></a>Examples</p>
<p>This PL/SQL procedure sets the two parameters, then uses the <code dir="ltr">GET_PARAMETER</code> function to show the settings:</p>
<pre dir="ltr">BEGIN
     dbms_cube_log.set_parameter(dbms_cube_log.type_rejected_records, 1, 150);
     dbms_cube_log.set_parameter(dbms_cube_log.type_rejected_records, 2, 5);

     dbms_output.put_line(&#39;Max rejected records: &#39; ||
        dbms_cube_log.get_parameter(dbms_cube_log.type_rejected_records, 1));

     dbms_output.put_line(&#39;Buffer time: &#39; ||
        dbms_cube_log.get_parameter(dbms_cube_log.type_rejected_records, 2) || 
          &#39; seconds&#39;);
END;
/
</pre>
<p>The procedure displays this information:</p>
<pre dir="ltr">Max rejected records: 150

Buffer time: 5 seconds
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72822" class="refsect2"><a id="CEGDHJHF"></a>
<h3 class="refsect2"><a id="sthref2128"></a>TABLE_CREATE Procedure</h3>
<p>This procedure creates the table targets for the OLAP logs. You must have the <code dir="ltr">CREATE TABLE</code> privilege to use this procedure.</p>
<p><code dir="ltr">TABLE_CREATE</code> also upgrades existing log tables to the current version while preserving the data.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2129"></a>Syntax</p>
<pre dir="ltr">DBMS_CUBE_LOG.TABLE_CREATE (
          LOG_TYPE       IN   BINARY_INTEGER  DEFAULT,
          TBLNAME        IN   VARCHAR2        DEFAULT );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2130"></a>Parameters</p>
<div id="ARPLS72823" class="tblformal">
<p class="titleintable"><a id="sthref2131"></a><a id="sthref2132"></a>Table 44-9 TABLE_CREATE Procedure Parameters</p>
<table class="cellalignment4330" title="TABLE_CREATE Procedure Parameters" summary="DBMS_CUBE_LOG.TABLE_CREATE parameters" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t16">Parameter</th>
<th class="cellalignment4328" id="r1c2-t16">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t16" headers="r1c1-t16">
<p><code dir="ltr">log_type</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t16 r1c2-t16">
<p>One of the following log types:</p>
<ul>
<li>
<p><code dir="ltr">1</code>: <code dir="ltr">TYPE_OPERATIONS</code></p>
</li>
<li>
<p><code dir="ltr">2</code>: <code dir="ltr">TYPE_REJECTED_RECORDS</code></p>
</li>
<li>
<p><code dir="ltr">3</code>: <code dir="ltr">TYPE_DIMENSION_COMPILE</code></p>
</li>
<li>
<p><code dir="ltr">4</code>: <code dir="ltr">TYPE_BUILD</code></p>
</li>
</ul>
<p>See <a href="#CEGEEIIJ">&#34;Logging Types&#34;</a>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t16" headers="r1c1-t16">
<p><code dir="ltr">tblname</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t16 r1c2-t16">
<p>A table name for the log. These are the default names:</p>
<ul>
<li>
<p><code dir="ltr">CUBE_OPERATIONS_LOG</code></p>
</li>
<li>
<p><code dir="ltr">CUBE_REJECTED_RECORDS</code></p>
</li>
<li>
<p><code dir="ltr">CUBE_DIMENSION_COMPILE</code></p>
</li>
<li>
<p><code dir="ltr">CUBE_BUILD_LOG</code></p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2133"></a>Examples</p>
<p>This example creates a Cube Operations log table named <code dir="ltr">CUBE_OPERATIONS_LOG</code>:</p>
<pre dir="ltr">EXECUTE dbms_cube_log.table_create;
</pre>
<p>This example creates a Cube Rejected Records log table named <code dir="ltr">CUBE_REJECTED_RECORDS</code>:</p>
<pre dir="ltr">EXECUTE dbms_cube_log.table_create(dbms_cube_log.type_rejected_records);
</pre>
<p>The next example creates a Cube Build log table named <code dir="ltr">MY_BUILD_LOG</code>:</p>
<pre dir="ltr">EXECUTE dbms_cube_log.table_create -
     (dbms_cube_log.type_build, &#39;MY_BUILD_LOG&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72824" class="refsect2"><a id="CEGFIGBG"></a>
<h3 class="refsect2"><a id="sthref2134"></a>TARGET_FILE Function</h3>
<p>This function returns the integer value of a file target in <code dir="ltr">DBMS_CUBE_LOG</code> subprograms.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2135"></a>Syntax</p>
<pre dir="ltr">DBMS_CUBE_LOG.TARGET_FILE ()
     RETURN BINARY_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2136"></a>Returns</p>
<p><code dir="ltr">3</code></p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2137"></a>Usage Notes</p>
<p>Use this function instead of its binary integer equivalent for the <code dir="ltr"><span class="codeinlineitalic">LOG_LEVEL</span></code> parameter in <code dir="ltr">DBMS_CUBE_LOG</code> subprograms. See <a href="#CEGDDEDA">&#34;Logging Targets&#34;</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2138"></a>Example</p>
<p>This command disables the Cube Operations log file:</p>
<pre dir="ltr">EXECUTE dbms_cube_log.disable -
     (dbms_cube_log.type_operations, dbms_cube_log.target_file);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72825" class="refsect2"><a id="CEGIIFAC"></a>
<h3 class="refsect2"><a id="sthref2139"></a>TARGET_LOB Function</h3>
<p>This function returns the integer value of a LOB target.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2140"></a>Syntax</p>
<pre dir="ltr">DBMS_CUBE_LOG.TARGET_LOB ()
     RETURN BINARY_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2141"></a>Returns</p>
<p><code dir="ltr">4</code></p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2142"></a>Usage Notes</p>
<p>Use this function instead of its binary integer equivalent for the <code dir="ltr"><span class="codeinlineitalic">LOG_LEVEL</span></code> parameter in <code dir="ltr">DBMS_CUBE_LOG</code> subprograms. See <a href="#CEGDDEDA">&#34;Logging Targets&#34;</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2143"></a>Example</p>
<p>This command disables the Cube Operations log LOB:</p>
<pre dir="ltr">EXECUTE dbms_cube_log.disable -
     (dbms_cube_log.type_operations, dbms_cube_log.target_lob);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72826" class="refsect2"><a id="CEGICDEC"></a>
<h3 class="refsect2"><a id="sthref2144"></a>TARGET_TABLE Function</h3>
<p>This function returns the integer value of a table target.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2145"></a>Syntax</p>
<pre dir="ltr">DBMS_CUBE_LOG.TARGET_TABLE ()
     RETURN BINARY_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2146"></a>Returns</p>
<p>1</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2147"></a>Usage Notes</p>
<p>Use this function instead of its binary integer equivalent for the <code dir="ltr">LOG_TARGET</code> parameter in <code dir="ltr">DBMS_CUBE_LOG</code> subprograms. See <a href="#CEGDDEDA">&#34;Logging Targets&#34;</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2148"></a>Example</p>
<p>This command disables the Cube Operations log table:</p>
<pre dir="ltr">EXECUTE dbms_cube_log.disable -
     (dbms_cube_log.type_operations, dbms_cube_log.target_table);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72827" class="refsect2"><a id="CEGJFAGG"></a>
<h3 class="refsect2"><a id="sthref2149"></a>TARGET_TRACE Function</h3>
<p>This function returns the integer value of a trace file target.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2150"></a>Syntax</p>
<pre dir="ltr">DBMS_CUBE_LOG.TARGET_TRACE ()
     RETURN BINARY_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2151"></a>Returns</p>
<p><code dir="ltr">2</code></p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2152"></a>Usage Notes</p>
<p>Use this function instead of its binary integer equivalent for the <code dir="ltr">LOG_TARGET</code> parameter in <code dir="ltr">DBMS_CUBE_LOG</code> subprograms. See <a href="#CEGDDEDA">&#34;Logging Targets&#34;</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2153"></a>Example</p>
<p>This command disables the Cube Operations log trace file:</p>
<pre dir="ltr">EXECUTE dbms_cube_log.disable -
     (dbms_cube_log.type_operations, dbms_cube_log.target_trace);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72828" class="refsect2"><a id="CEGJEIHD"></a>
<h3 class="refsect2"><a id="sthref2154"></a>TYPE_BUILD Function</h3>
<p>This function returns the integer value of the Cube Build log.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2155"></a>Syntax</p>
<pre dir="ltr">DBMS_CUBE_LOG.TYPE_BUILD ()
     RETURN BINARY_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2156"></a>Returns</p>
<p><code dir="ltr">4</code></p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2157"></a>Usage Notes</p>
<p>Use this function instead of its binary integer equivalent for the <code dir="ltr">LOG_TYPE</code> parameter in <code dir="ltr">DBMS_CUBE_LOG</code> subprograms. See <a href="#CEGEEIIJ">&#34;Logging Types&#34;</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2158"></a>Example</p>
<p>This query returns the default name of a Cube Build log:</p>
<pre dir="ltr">SELECT dbms_cube_log.default_name(dbms_cube_log.type_build) &#34;Log Name&#34; -
     FROM dual;
 
Log Name
-------------------------
CUBE_BUILD_LOG
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72829" class="refsect2"><a id="CEGFACGH"></a>
<h3 class="refsect2"><a id="sthref2159"></a>TYPE_DIMENSION_COMPILE Function</h3>
<p>This function returns the integer value of the Cube Dimension Compile log.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2160"></a>Syntax</p>
<pre dir="ltr">DBMS_CUBE_LOG.TYPE_DIMENSION_COMPILE ()
     RETURN BINARY_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2161"></a>Returns</p>
<p><code dir="ltr">3</code></p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2162"></a>Usage Notes</p>
<p>Use this function instead of its binary integer equivalent for the <code dir="ltr">LOG_TYPE</code> parameter in <code dir="ltr">DBMS_CUBE_LOG</code> subprograms. See <a href="#CEGEEIIJ">&#34;Logging Types&#34;</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2163"></a>Example</p>
<p>This query returns the default name of a Cube Dimension Compile log:</p>
<pre dir="ltr">SELECT dbms_cube_log.default_name(dbms_cube_log.type_dimension_compile) -
     &#34;Log Name&#34; FROM dual;
 
Log Name
-------------------------
CUBE_DIMENSION_COMPILE
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72830" class="refsect2"><a id="CEGDJBIB"></a>
<h3 class="refsect2"><a id="sthref2164"></a>TYPE_OPERATIONS Function</h3>
<p>This function returns the integer value of the Cube Operations log.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2165"></a>Syntax</p>
<pre dir="ltr">DBMS_CUBE_LOG.TYPE_OPERATIONS ()
     RETURN BINARY_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2166"></a>Returns</p>
<p><code dir="ltr">1</code></p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2167"></a>Usage Notes</p>
<p>Use this function instead of its binary integer equivalent for the <code dir="ltr">LOG_TYPE</code> parameter in <code dir="ltr">DBMS_CUBE_LOG</code> subprograms. See <a href="#CEGEEIIJ">&#34;Logging Types&#34;</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2168"></a>Example</p>
<p>This query returns the default name of a Cube Dimension Compile log:</p>
<pre dir="ltr">SELECT dbms_cube_log.default_name(dbms_cube_log.type_operations) &#34;Log Name&#34; -
     FROM dual;
 
Log Name
-------------------------
CUBE_OPERATIONS_LOG
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72831" class="refsect2"><a id="CEGGBIGB"></a>
<h3 class="refsect2"><a id="sthref2169"></a>TYPE_REJECTED_RECORDS Function</h3>
<p>This function returns the integer value of the cube Cube Rejected Records log.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2170"></a>Syntax</p>
<pre dir="ltr">DBMS_CUBE_LOG.TYPE_REJECTED_RECORDS ()
     RETURN BINARY_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2171"></a>Returns</p>
<p><code dir="ltr">2</code></p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2172"></a>Usage Notes</p>
<p>Use this function instead of its binary integer equivalent for the <code dir="ltr">LOG_TYPE</code> parameter in <code dir="ltr">DBMS_CUBE_LOG</code> subprograms. See <a href="#CEGEEIIJ">&#34;Logging Types&#34;</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2173"></a>Example</p>
<p>This query returns the default name of a Cube Rejected Records log:</p>
<pre dir="ltr">SELECT dbms_cube_log.default_name(dbms_cube_log.type_rejected_records) -
     &#34;Log Name&#34; FROM dual;
 
Log Name
-------------------------
CUBE_REJECTED_RECORDS
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72832" class="refsect2"><a id="CEGBFCDD"></a>
<h3 class="refsect2"><a id="sthref2174"></a>VERSION Function</h3>
<p>This function returns the version number of a specific log table or the current version number of a specific log type.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2175"></a>Syntax</p>
<pre dir="ltr">DBMS_CUBE_LOG.VERSION (
          LOG_TYPE       IN   BINARY_INTEGER  DEFAULT 1,
          TBLNAME        IN   VARCHAR2        DEFAULT NULL)
     RETURN BINARY_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2176"></a>Parameters</p>
<div id="ARPLS72833" class="tblformal">
<p class="titleintable"><a id="sthref2177"></a><a id="sthref2178"></a>Table 44-10 VERSION Function Parameters</p>
<table class="cellalignment4330" title="VERSION Function Parameters" summary="DBMS_CUBE_LOG.VERSION parameters" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t17">Parameter</th>
<th class="cellalignment4328" id="r1c2-t17">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t17" headers="r1c1-t17">
<p><code dir="ltr">log_type</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t17 r1c2-t17">
<p>One of the following log types:</p>
<ul>
<li>
<p><code dir="ltr">1</code>: <code dir="ltr">TYPE_OPERATIONS</code></p>
</li>
<li>
<p><code dir="ltr">2</code>: <code dir="ltr">TYPE_REJECTED_RECORDS</code></p>
</li>
<li>
<p><code dir="ltr">3</code>: <code dir="ltr">TYPE_DIMENSION_COMPILE</code></p>
</li>
<li>
<p><code dir="ltr">4</code>: <code dir="ltr">TYPE_BUILD</code></p>
</li>
</ul>
<p>See <a href="#CEGEEIIJ">&#34;Logging Types&#34;</a>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t17" headers="r1c1-t17">
<p><code dir="ltr">tblname</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t17 r1c2-t17">
<p>The name of the log table whose version is returned.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2179"></a>Returns</p>
<p>A version number</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2180"></a>Examples</p>
<p>This example returns the current version of the Cube Operations log:</p>
<pre dir="ltr">SELECT dbms_cube_log.version FROM dual;
 
   VERSION
----------
         2
</pre>
<p>This example returns the version number of an existing Cube Rejected Records log named <code dir="ltr">CUBE_REJECTED_RECORDS</code>.</p>
<pre dir="ltr">SELECT dbms_cube_log.version(dbms_cube_log.type_rejected_records, -
     &#39;CUBE_REJECTED_RECORDS&#39;) version FROM dual;
 
   VERSION
----------
         2
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4320">
<tr>
<td class="cellalignment4329">
<table class="cellalignment4325">
<tr>
<td class="cellalignment4324"><a href="d_cube_advise.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4324"><a href="d_datmin.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4332">
<table class="cellalignment4323">
<tr>
<td class="cellalignment4324"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4324"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4324"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4324"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4324"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4324"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>