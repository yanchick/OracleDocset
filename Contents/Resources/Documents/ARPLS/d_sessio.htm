<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-2344"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/DBMS_SESSION"></a><title>DBMS_SESSION</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1086"/>
<meta name="dcterms.created" content="2016-09-02T5:36:34Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database PL/SQL Packages and Types Reference"/>
<meta name="dcterms.identifier" content="E41829-07"/>
<meta name="dcterms.isVersionOf" content="ARPLS"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="d_serv.htm" title="Previous" type="text/html"/>
<link rel="Next" href="d_shared_pool.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41829-07.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">147/290</span> <!-- End Header -->
<div id="ARPLS054" class="chapter"><a id="BHCCFGIF"></a>
<h1 class="chapter"><span class="secnum">143</span> DBMS_SESSION</h1>
<p><a id="sthref8799"></a>This package provides access to SQL <code dir="ltr">ALTER</code> <code dir="ltr">SESSION</code> and <code dir="ltr">SET</code> <code dir="ltr">ROLE</code> statements, and other session information, from PL/SQL. You can use <code dir="ltr">DBMS_SESSION</code> to set preferences and security levels.</p>
<p>This chapter contains the following topics:</p>
<ul>
<li>
<p><a href="#BHCEIDAB">Using DBMS_SESSION</a></p>
<ul>
<li>
<p>Security Model</p>
</li>
<li>
<p>Operational Notes</p>
</li>
</ul>
</li>
<li>
<p><a href="#CHDHHCBJ">Data Structures</a></p>
</li>
<li>
<p><a href="#i996747">Summary of DBMS_SESSION Subprograms</a></p>
</li>
</ul>
<div class="refentry"><a id="BHCEIDAB"></a>
<div id="ARPLS68032" class="refsect1">
<h2 class="refsect1">Using DBMS_SESSION</h2>
<ul>
<li>
<p><a href="#i1009720">Security Model</a></p>
</li>
<li>
<p><a href="#i1009695">Operational Notes</a></p>
</li>
</ul>
<div id="ARPLS68033" class="refsect2"><a id="i1009720"></a>
<h3 class="refsect2">Security Model</h3>
<p>This package runs with the privileges of the calling user, rather than the package owner <code dir="ltr">SYS</code>.</p>
</div>
<!-- class="refsect2" -->
<div id="ARPLS68034" class="refsect2"><a id="i1009695"></a>
<h3 class="refsect2">Operational Notes</h3>
<p>You should not attempt to turn <code dir="ltr">close_cached_open_cursors</code> on or off.</p>
</div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CHDHHCBJ"></a>
<div id="ARPLS72662" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">Data Structures</h2>
<p>The <code dir="ltr">DBMS_SESSION</code> package defines <code dir="ltr">TABLE</code> types.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8800"></a>Table Types</p>
<ul>
<li>
<p><a href="#CHDCAIJI">INTEGER_ARRAY Table Type</a></p>
</li>
<li>
<p><a href="#CHDHEEIF">LNAME_ARRAY Table Type</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div id="ARPLS72663" class="refsect2"><a id="CHDCAIJI"></a>
<h3 class="refsect2"><a id="sthref8801"></a>INTEGER_ARRAY Table Type</h3>
<p>A table type of <code dir="ltr">BINARY_INTEGER</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8802"></a>Syntax</p>
<pre dir="ltr">TYPE integer_array IS TABLE OF BINARY_INTEGER INDEX BY BINARY_INTEGER;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72664" class="refsect2"><a id="CHDHEEIF"></a>
<h3 class="refsect2"><a id="sthref8803"></a>LNAME_ARRAY Table Type</h3>
<p>A table type of <code dir="ltr">VARCHAR2</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8804"></a>Syntax</p>
<pre dir="ltr">TYPE lname_array IS TABLE OF VARCHAR2(4000) INDEX BY BINARY_INTEGER;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="i996747"></a>
<div id="ARPLS68035" class="refsect1">
<h2 class="refsect1">Summary of DBMS_SESSION Subprograms</h2>
<div id="ARPLS68036" class="tblformal">
<p class="titleintable"><a id="sthref8805"></a><a id="sthref8806"></a>Table 143-1 <span class="bolditalic">DBMS_SESSION Package Subprograms</span></p>
<table class="cellalignment4330" title="DBMS_SESSION Package Subprograms" summary="This table lists the DBMS_SESSION subprograms in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t2">Subprogram</th>
<th class="cellalignment4328" id="r1c2-t2">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t2" headers="r1c1-t2">
<p><a href="#i1009975">CLEAR_ALL_CONTEXT Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r2c1-t2 r1c2-t2">
<p>Clears all context information</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t2" headers="r1c1-t2">
<p><a href="#i1009938">CLEAR_CONTEXT Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r3c1-t2 r1c2-t2">
<p>Clears the context</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t2" headers="r1c1-t2">
<p><a href="#i1010000">CLEAR_IDENTIFIER Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r4c1-t2 r1c2-t2">
<p>Clears the identifier</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t2" headers="r1c1-t2">
<p><a href="#i1011038">CLOSE_DATABASE_LINK Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r5c1-t2 r1c2-t2">
<p>Closes database link</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t2" headers="r1c1-t2">
<p><a href="#i1010058">FREE_UNUSED_USER_MEMORY Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r6c1-t2 r1c2-t2">
<p>Lets you reclaim unused memory after performing operations requiring large amounts of memory</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t2" headers="r1c1-t2">
<p><a href="#CHDEGEAJ">GET_PACKAGE_MEMORY_UTILIZATION Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r7c1-t2 r1c2-t2">
<p>Describes static package memory usage</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t2" headers="r1c1-t2">
<p><a href="#i1010291">IS_ROLE_ENABLED Function</a></p>
</td>
<td class="cellalignment4329" headers="r8c1-t2 r1c2-t2">
<p>Determines if the named role is enabled for the session.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t2" headers="r1c1-t2">
<p><a href="#i1010302">IS_SESSION_ALIVE Function</a></p>
</td>
<td class="cellalignment4329" headers="r9c1-t2 r1c2-t2">
<p>Determines if the specified session is active</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t2" headers="r1c1-t2">
<p><a href="#i1010363">LIST_CONTEXT Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r10c1-t2 r1c2-t2">
<p>Returns a list of active namespace and context for the current session</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t2" headers="r1c1-t2">
<p><a href="#CEGIICCC">MODIFY_PACKAGE_STATE Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r11c1-t2 r1c2-t2">
<p>Used to perform various actions (as specified by the <code dir="ltr">action_flags</code> parameter) on the session state of all PL/SQL program units active in the session</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t2" headers="r1c1-t2">
<p><a href="#CEGJHGDB">SESSION_TRACE_DISABLE Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r12c1-t2 r1c2-t2">
<p>Resets the session-level SQL trace for the session from which it was called.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t2" headers="r1c1-t2">
<p><a href="#i1010518">SESSION _TRACE_ENABLE Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r13c1-t2 r1c2-t2">
<p>Enables session-level SQL trace for the invoking session</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t2" headers="r1c1-t2">
<p><a href="#i1010767">RESET_PACKAGE Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r14c1-t2 r1c2-t2">
<p>De-instantiates all packages in the session</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r15c1-t2" headers="r1c1-t2">
<p><a href="#i1010942">SET_CONTEXT Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r15c1-t2 r1c2-t2">
<p>Sets or resets the value of a context attribute</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r16c1-t2" headers="r1c1-t2">
<p><a href="#CHDGADDD">SET_EDITION_DEFERRED Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r16c1-t2 r1c2-t2">
<p>Requests a switch to the specified edition</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r17c1-t2" headers="r1c1-t2">
<p><a href="#i996935">SET_IDENTIFIER Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r17c1-t2 r1c2-t2">
<p>Sets the identifier</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r18c1-t2" headers="r1c1-t2">
<p><a href="#i1010906">SET_NLS Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r18c1-t2 r1c2-t2">
<p>Sets Globalization Support (NLS)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r19c1-t2" headers="r1c1-t2">
<p><a href="#i997099">SET_ROLE Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r19c1-t2 r1c2-t2">
<p>Sets role</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r20c1-t2" headers="r1c1-t2">
<p><a href="#i997123">SET_SQL_TRACE Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r20c1-t2 r1c2-t2">
<p>Turns tracing on or off</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r21c1-t2" headers="r1c1-t2">
<p><a href="#i997666">SWITCH_CURRENT_CONSUMER_GROUP Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r21c1-t2 r1c2-t2">
<p>Facilitates changing the current resource consumer group of a user&#39;s current session</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r22c1-t2" headers="r1c1-t2">
<p><a href="#i1011002">UNIQUE_SESSION_ID Function</a></p>
</td>
<td class="cellalignment4329" headers="r22c1-t2 r1c2-t2">
<p>Returns an identifier that is unique for all sessions currently connected to this database</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="ARPLS68037" class="refsect2"><a id="i1009975"></a>
<h3 class="refsect2"><a id="sthref8807"></a>CLEAR_ALL_CONTEXT Procedure</h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8808"></a>Syntax</p>
<pre dir="ltr">DBMS_SESSION.CLEAR_ALL_CONTEXT
   namespace         VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8809"></a>Parameters</p>
<div id="ARPLS68038" class="tblformal">
<p class="titleintable"><a id="sthref8810"></a><a id="sthref8811"></a>Table 143-2 CLEAR_ALL_CONTEXT Procedure Parameters</p>
<table class="cellalignment4330" title="CLEAR_ALL_CONTEXT Procedure Parameters " summary="This table describes Parameters used by the DBMS_SESSION.CLEAR_ALL_CONTEXT subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t3">Parameter</th>
<th class="cellalignment4328" id="r1c2-t3">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t3" headers="r1c1-t3">
<p><code dir="ltr">namespace</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t3 r1c2-t3">
<p>The namespace where the application context information is to be cleared. Required.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8812"></a>Usage Notes</p>
<ul>
<li>
<p>This procedure must be invoked directly or indirectly by the trusted package.</p>
</li>
<li>
<p>Any changes in context value are reflected immediately and subsequent calls to access the value through <code dir="ltr">SYS_CONTEXT</code> return the most recent value.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68039" class="refsect2"><a id="i1009938"></a>
<h3 class="refsect2"><a id="sthref8813"></a>CLEAR_CONTEXT Procedure</h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8814"></a>Syntax</p>
<pre dir="ltr">DBMS_SESSION.CLEAR_CONTEXT
   namespace         VARCHAR2,
   client_identifier VARCHAR2
   attribute         VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8815"></a>Parameters</p>
<div id="ARPLS68040" class="tblformal">
<p class="titleintable"><a id="sthref8816"></a><a id="sthref8817"></a>Table 143-3 CLEAR_CONTEXT Procedure Parameters</p>
<table class="cellalignment4330" title="CLEAR_CONTEXT Procedure Parameters " summary="This table describes Parameters used by the DBMS_SESSION.CLEAR_CONTEXT subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t4">Parameter</th>
<th class="cellalignment4328" id="r1c2-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t4" headers="r1c1-t4">
<p><code dir="ltr">namespace</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t4 r1c2-t4">
<p>Namespace in which the application context is to be cleared. Required.</p>
<p>For a session-local context, <code dir="ltr">namespace</code> must be specified. If <code dir="ltr">namespace</code> is defined as <code dir="ltr">Session Local Context</code>, then <code dir="ltr">client_identifier</code> is optional since it is only associated with a globally accessed context.</p>
<p>For a globally accessed context, <code dir="ltr">namespace</code> must be specified. <code dir="ltr">NULL</code> is a valid value for <code dir="ltr">client_identifier</code> because a session with no identifier set can see a context that looks like the (<code dir="ltr">namespace, attribute, value, username, null</code>) set using <code dir="ltr">SET_CONTEXT</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t4" headers="r1c1-t4">
<p><code dir="ltr">client_identifier</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t4 r1c2-t4">
<p>Applies to a global context and is optional for other types of contexts; 64-byte maximum</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t4" headers="r1c1-t4">
<p><code dir="ltr">attribute</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t4 r1c2-t4">
<p>Specific attribute in the namespace to be cleared. Optional. the default is <code dir="ltr">NULL</code>. If you specify <code dir="ltr">attribute</code> as <code dir="ltr">NULL</code>, then (<code dir="ltr">namespace, attribute, value</code>) for that namespace are cleared from the session. If <code dir="ltr">attribute</code> is not specified, then all context information that has the <code dir="ltr">namespace</code> and <code dir="ltr">client_identifier</code> arguments is cleared.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8818"></a>Usage Notes</p>
<ul>
<li>
<p>This procedure must be invoked directly or indirectly by the trusted package.</p>
</li>
<li>
<p>Any changes in context value are reflected immediately and subsequent calls to access the value through <code dir="ltr">SYS_CONTEXT</code> return the most recent value.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68041" class="refsect2"><a id="i1010000"></a>
<h3 class="refsect2"><a id="sthref8819"></a>CLEAR_IDENTIFIER Procedure</h3>
<p>This procedure removes the <code dir="ltr">set_client_id</code> in the session.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8820"></a>Syntax</p>
<pre dir="ltr">DBMS_SESSION.CLEAR_IDENTIFIER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8821"></a>Usage Notes</p>
<p>This procedure is executable by public.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68042" class="refsect2"><a id="i1011038"></a>
<h3 class="refsect2"><a id="sthref8822"></a>CLOSE_DATABASE_LINK Procedure</h3>
<p>This procedure closes an open database link. It is equivalent to the following SQL statement:</p>
<pre dir="ltr">ALTER SESSION CLOSE DATABASE LINK &lt;name&gt;
</pre>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8823"></a>Syntax</p>
<pre dir="ltr">DBMS_SESSION.CLOSE_DATABASE_LINK (
   dblink VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8824"></a>Parameters</p>
<div id="ARPLS68043" class="tblformal">
<p class="titleintable"><a id="sthref8825"></a><a id="sthref8826"></a>Table 143-4 CLOSE_DATABASE_LINK Procedure Parameters</p>
<table class="cellalignment4330" title="CLOSE_DATABASE_LINK Procedure Parameters " summary="This table describes Parameters used by the DBMS_SESSION.CLOSE_DATABASE_LINK subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t5">Parameter</th>
<th class="cellalignment4328" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t5" headers="r1c1-t5">
<p><code dir="ltr">dblink</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t5 r1c2-t5">
<p>Name of the database link to close</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68044" class="refsect2"><a id="i1010058"></a>
<h3 class="refsect2"><a id="sthref8827"></a>FREE_UNUSED_USER_MEMORY Procedure</h3>
<p>This procedure reclaims unused memory after performing operations requiring large amounts of memory (more than 100K).</p>
<p>Examples of operations that use large amounts of memory include:</p>
<ul>
<li>
<p>Large sorting where entire <code dir="ltr">sort_area_size</code> is used and <code dir="ltr">sort_area_size</code> is hundreds of KB.</p>
</li>
<li>
<p>Compiling large PL/SQL packages, procedures, or functions.</p>
</li>
<li>
<p>Storing hundreds of KB of data within PL/SQL indexed tables.</p>
</li>
</ul>
<p>You can monitor user memory by tracking the statistics &#34;session UGA memory&#34; and &#34;session PGA memory&#34; in the <code dir="ltr">v$sesstat</code> or <code dir="ltr">v$statname</code> fixed views. Monitoring these statistics also shows how much memory this procedure has freed.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This procedure should only be used in cases where memory is at a premium. It should be used infrequently and judiciously.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8828"></a>Syntax</p>
<pre dir="ltr">DBMS_SESSION.FREE_UNUSED_USER_MEMORY;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8829"></a>Return Values</p>
<p>The behavior of this procedure depends upon the configuration of the server operating on behalf of the client:</p>
<ul>
<li>
<p><span class="bold">Dedicated server</span>: This returns unused PGA memory and session memory to the operating system. Session memory is allocated from the PGA in this configuration.</p>
</li>
<li>
<p><span class="bold">Shared server</span>: This returns unused session memory to the <code dir="ltr">shared_pool</code>. Session memory is allocated from the <code dir="ltr">shared_pool</code> in this configuration.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8830"></a>Usage Notes</p>
<p>In order to free memory using this procedure, the memory must not be in use.</p>
<p>After an operation allocates memory, only the same type of operation can reuse the allocated memory. For example, after memory is allocated for sort, even if the sort is complete and the memory is no longer in use, only another sort can reuse the sort-allocated memory. For both sort and compilation, after the operation is complete, the memory is no longer in use, and the user can call this procedure to free the unused memory.</p>
<p>An indexed table implicitly allocates memory to store values assigned to the indexed table&#39;s elements. Thus, the more elements in an indexed table, the more memory the RDBMS allocates to the indexed table. As long as there are elements within the indexed table, the memory associated with an indexed table is in use.</p>
<p>The scope of indexed tables determines how long their memory is in use. Indexed tables declared globally are indexed tables declared in packages or package bodies. They allocate memory from session memory. For an indexed table declared globally, the memory remains in use for the lifetime of a user&#39;s login (lifetime of a user&#39;s session), and is freed after the user disconnects from ORACLE.</p>
<p>Indexed tables declared locally are indexed tables declared within functions, procedures, or anonymous blocks. These indexed tables allocate memory from PGA memory. For an indexed table declared locally, the memory remains in use for as long as the user is still running the procedure, function, or anonymous block in which the indexed table is declared.After the procedure, function, or anonymous block is finished running, the memory is then available for other locally declared indexed tables to use (in other words, the memory is no longer in use).</p>
<p>Assigning an uninitialized, &#34;empty&#34; indexed table to an existing index table is a method to explicitly re-initialize the indexed table and the memory associated with the indexed table. After this operation, the memory associated with the indexed table is no longer in use, making it available to be freed by calling this procedure. This method is particularly useful on indexed tables declared globally which can grow during the lifetime of a user&#39;s session, as long as the user no longer needs the contents of the indexed table.</p>
<p>The memory rules associated with an indexed table&#39;s scope still apply; this method and this procedure, however, allow users to intervene and to explicitly free the memory associated with an indexed table.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8831"></a>Examples</p>
<p>The following PL/SQL illustrates the method and the use of procedure <code dir="ltr">FREE_UNUSED_USER_MEMORY</code>.</p>
<pre dir="ltr">CREATE PACKAGE foobar
   type number_idx_tbl is table of number indexed by binary_integer;

   store1_table  number_idx_tbl;     --  PL/SQL indexed table
   store2_table  number_idx_tbl;     --  PL/SQL indexed table
   store3_table  number_idx_tbl;     --  PL/SQL indexed table
   ...
END;            --  end of foobar

DECLARE
   ...
   empty_table   number_idx_tbl;     --  uninitialized (&#34;empty&#34;) version
BEGIN
   FOR i in 1..1000000 loop
     store1_table(i) := i;           --  load data
   END LOOP;
   ...
   store1_table := empty_table;      --  &#34;truncate&#34; the indexed table
   ... 
   -
   dbms_session.free_unused_user_memory;  -- give memory back to system

   store1_table(1) := 100;           --  index tables still declared;
   store2_table(2) := 200;           --  but truncated.
   ...
END;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72665" class="refsect2"><a id="CHDEGEAJ"></a>
<h3 class="refsect2"><a id="sthref8832"></a>GET_PACKAGE_MEMORY_UTILIZATION Procedure</h3>
<p>This procedure describes static package memory usage.</p>
<p>The output collections describe memory usage in each instantiated package. Each package is described by its owner name, package name, used memory amount, and unused allocated memory amount. The amount of unused memory is greater than zero because of memory fragmentation and also because once used free memory chunks initially go to a free list owned by the package memory heap. They are released back to the parent heap only when the <a href="#i1010058">FREE_UNUSED_USER_MEMORY Procedure</a> is invoked.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8833"></a>Syntax</p>
<pre dir="ltr">DBMS_SESSION.GET_PACKAGE_MEMORY_UTILIZATION (
   owner_names     OUT NOCOPY LNAME_ARRAY,
   unit_names      OUT NOCOPY LNAME_ARRAY,
   unit_types      OUT NOCOPY INTEGER_ARRAY,
   used_amounts    OUT NOCOPY INTEGER_ARRAY,
   free_amounts    OUT NOCOPY INTEGER_ARRAY);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8834"></a>Parameters</p>
<div id="ARPLS72666" class="tblformal">
<p class="titleintable"><a id="sthref8835"></a><a id="sthref8836"></a>Table 143-5 GET_PACKAGE_MEMORY_UTILIZATION Function Parameters</p>
<table class="cellalignment4330" title="GET_PACKAGE_MEMORY_UTILIZATION Function Parameters " summary="This table describes Parameters used by the DBMS_SESSION.GET_PACKAGE_MEMORY_UTILIZATION subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t7">Parameter</th>
<th class="cellalignment4328" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t7" headers="r1c1-t7">
<p><code dir="ltr">owner_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t7 r1c2-t7">
<p>Owner of package</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t7" headers="r1c1-t7">
<p><code dir="ltr">unit_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t7 r1c2-t7">
<p>Name of package</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t7" headers="r1c1-t7">
<p><code dir="ltr">unit_types</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t7 r1c2-t7">
<p>Value of the <code dir="ltr">type#</code> columns of the dictionary table <code dir="ltr">obj$</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t7" headers="r1c1-t7">
<p><code dir="ltr">used_amounts</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t7 r1c2-t7">
<p>Amount of allocated memory specified in bytes</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t7" headers="r1c1-t7">
<p><code dir="ltr">free_amounts</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t7 r1c2-t7">
<p>Amount of available memory specified in bytes</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68045" class="refsect2"><a id="i1010291"></a>
<h3 class="refsect2"><a id="sthref8837"></a>IS_ROLE_ENABLED Function</h3>
<p>This function determines if the named role is enabled for this session.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8838"></a>Syntax</p>
<pre dir="ltr">DBMS_SESSION.IS_ROLE_ENABLED (
   rolename    VARCHAR2) 
  RETURN BOOLEAN;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8839"></a>Parameters</p>
<div id="ARPLS68046" class="tblformal">
<p class="titleintable"><a id="sthref8840"></a><a id="sthref8841"></a>Table 143-6 IS_ROLE_ENABLED Function Parameters</p>
<table class="cellalignment4330" title="IS_ROLE_ENABLED Function Parameters " summary="This table describes Parameters used by the DBMS_SESSION.IS_ROLE_ENABLED subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t8">Parameter</th>
<th class="cellalignment4328" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t8" headers="r1c1-t8">
<p><code dir="ltr">rolename</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t8 r1c2-t8">
<p>Name of the role.\</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8842"></a>Return Values</p>
<div id="ARPLS68047" class="tblformal">
<p class="titleintable"><a id="sthref8843"></a><a id="sthref8844"></a>Table 143-7 IS_ROLE_ENABLED Function Return Values</p>
<table class="cellalignment4330" title="IS_ROLE_ENABLED Function Return Values " summary="This table decribes Values Returned by the IS_ROLE_ENABLED subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t9">Return</th>
<th class="cellalignment4328" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t9" headers="r1c1-t9">
<p><code dir="ltr">is_role_enabled</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t9 r1c2-t9">
<p><code dir="ltr">TRUE</code> or <code dir="ltr">FALSE</code>, depending on whether the role is enabled</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68048" class="refsect2"><a id="i1010302"></a>
<h3 class="refsect2"><a id="sthref8845"></a>IS_SESSION_ALIVE Function</h3>
<p>This function determines if the specified session is active.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8846"></a>Syntax</p>
<pre dir="ltr">DBMS_SESSION.IS_SESSION_ALIVE (
   uniqueid VARCHAR2) 
  RETURN BOOLEAN;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8847"></a>Parameters</p>
<div id="ARPLS68049" class="tblformal">
<p class="titleintable"><a id="sthref8848"></a><a id="sthref8849"></a>Table 143-8 IS_SESSION_ALIVE Function Parameters</p>
<table class="cellalignment4330" title="IS_SESSION_ALIVE Function Parameters " summary="This table describes Parameters used by the DBMS_SESSION.IS_SESSION_ALIVE subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t10">Parameter</th>
<th class="cellalignment4328" id="r1c2-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t10" headers="r1c1-t10">
<p><code dir="ltr">uniqueid</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t10 r1c2-t10">
<p>Unique ID of the session: This is the same one as returned by <code dir="ltr">UNIQUE_SESSION_ID</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8850"></a>Return Values</p>
<div id="ARPLS68050" class="tblformal">
<p class="titleintable"><a id="sthref8851"></a><a id="sthref8852"></a>Table 143-9 IS_SESSION_ALIVE Function Return Values</p>
<table class="cellalignment4330" title="IS_SESSION_ALIVE Function Return Values " summary="This table decribes Values Returned by the IS_SESSION_ALIVE subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t11">Return</th>
<th class="cellalignment4328" id="r1c2-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t11" headers="r1c1-t11">
<p><code dir="ltr">is_session_alive</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t11 r1c2-t11">
<p><code dir="ltr">TRUE</code> or <code dir="ltr">FALSE</code>, depending on whether the session is active</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68051" class="refsect2"><a id="i1010363"></a>
<h3 class="refsect2"><a id="sthref8853"></a>LIST_CONTEXT Procedures</h3>
<p>This procedure returns a list of active namespaces and contexts for the current session.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8854"></a>Syntax</p>
<pre dir="ltr">TYPE AppCtxRecTyp IS RECORD ( 
   namespace VARCHAR2(30), 
   attribute VARCHAR2(30),
   value     VARCHAR2(256)); 

TYPE AppCtxTabTyp IS TABLE OF AppCtxRecTyp INDEX BY BINARY_INTEGER; 

DBMS_SESSION.LIST_CONTEXT ( 
   list OUT AppCtxTabTyp, 
   size OUT NUMBER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8855"></a>Parameters</p>
<div id="ARPLS68052" class="tblformal">
<p class="titleintable"><a id="sthref8856"></a><a id="sthref8857"></a>Table 143-10 LIST_CONTEXT Procedure Parameters</p>
<table class="cellalignment4330" title="LIST_CONTEXT Procedure Parameters " summary="This table describes Parameters used by the DBMS_SESSION.LIST_CONTEXT subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t12">Parameter</th>
<th class="cellalignment4328" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t12" headers="r1c1-t12">
<p><code dir="ltr">list</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t12 r1c2-t12">
<p>Buffer to store a list of application context set in the current session</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8858"></a>Return Values</p>
<div id="ARPLS68053" class="tblformal">
<p class="titleintable"><a id="sthref8859"></a><a id="sthref8860"></a>Table 143-11 LIST_CONTEXT Procedure Return Values</p>
<table class="cellalignment4330" title="LIST_CONTEXT Procedure Return Values" summary="This table decribes Values Returned by the LIST_CONTEXT subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t13">Return</th>
<th class="cellalignment4328" id="r1c2-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t13" headers="r1c1-t13">
<p><code dir="ltr">list</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t13 r1c2-t13">
<p>A list of (namespace, attribute, values) set in current session</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t13" headers="r1c1-t13">
<p><code dir="ltr">size</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t13 r1c2-t13">
<p>Returns the number of entries in the buffer returned</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8861"></a>Usage Notes</p>
<p>The context information in the list appears as a series of &lt;<code dir="ltr">namespace</code>&gt; &lt;<code dir="ltr">attribute</code>&gt; &lt;<code dir="ltr">value</code>&gt;. Because <code dir="ltr">list</code> is a table type variable, its size is dynamically adjusted to the size of returned list.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68054" class="refsect2"><a id="CEGIICCC"></a>
<h3 class="refsect2"><a id="sthref8862"></a>MODIFY_PACKAGE_STATE Procedure</h3>
<p>This procedure is used to perform various actions (as specified by the <code dir="ltr">action_flags</code> parameter) on the session state of all PL/SQL program units active in the session. This takes effect after the PL/SQL call that made the current invocation finishes running. The procedure uses the <code dir="ltr">DBMS_SESSION</code> constants listed in <a href="#CEGFIFFA">Table 143-13</a>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8863"></a>Syntax</p>
<pre dir="ltr">DBMS_SESSION.MODIFY_PACKAGE_STATE(
   action_flags IN PLS_INTEGER); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8864"></a>Parameters</p>
<div id="ARPLS68055" class="tblformal">
<p class="titleintable"><a id="sthref8865"></a><a id="sthref8866"></a>Table 143-12 MODIFY_PACKAGE_STATE Procedure Parameters</p>
<table class="cellalignment4330" title="MODIFY_PACKAGE_STATE Procedure Parameters " summary="This table describes Parameters used by the DBMS_SESSION.MODIFY_PACKAGE_STATE subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t14">Parameter</th>
<th class="cellalignment4328" id="r1c2-t14">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t14" headers="r1c1-t14">
<p><code dir="ltr">action_flags</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t14 r1c2-t14">
<p>Bit flags that determine the action taken on PL/SQL program units:</p>
<p><code dir="ltr">DBMS_SESSION.FREE_ALL_RESOURCES</code> (or <code dir="ltr">1</code>)&mdash;frees all memory associated with each of the previously run PL/SQL programs from the session. Clears the current values of any package globals and closes cached cursors. On subsequent use, the PL/SQL program units are reinstantiated and package globals are reinitialized. Invoking <code dir="ltr">MODIFY_PACKAGE_STATE</code> with the <code dir="ltr">DBMS_SESSION.FREE_ALL_RESOURCES</code> parameter provides functionality identical to the <code dir="ltr">DBMS_SESSION.RESET_PACKAGE()</code> interface.</p>
<p><code dir="ltr">DBMS_SESSION.REINITIALIZE</code> (or <code dir="ltr">2</code>)&mdash;reinitializes packages without actually being freed and recreated from scratch. Instead the package memory is reused. In terms of program semantics, the <code dir="ltr">DBMS_SESSION.REINITIALIZE</code> flag is similar to the <code dir="ltr">DBMS_SESSION.FREE_ALL_RESOURCES</code> flag in that both have the effect of reinitializing all packages.</p>
<p>However, <code dir="ltr">DBMS_SESSION.REINITIALIZE</code> should exhibit better performance than the <code dir="ltr">DBMS_SESSION.FREE_ALL_RESOURCES</code> option because:</p>
<ul>
<li>
<p>Packages are reinitialized without actually being freed and recreated from scratch. Instead the package memory gets reused.</p>
</li>
<li>
<p>Any open cursors are closed, semantically speaking. However, the cursor resource is not actually freed. It is simply returned to the PL/SQL cursor cache. The cursor cache is not flushed. Hence, cursors corresponding to frequently accessed static SQL in PL/SQL remains cached in the PL/SQL cursor cache and the application does not incur the overhead of opening, parsing, and closing a new cursor for those statements on subsequent use.</p>
</li>
<li>
<p>The session memory for PL/SQL modules without global state (such as types, stored-procedures) are not freed and recreated.</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8867"></a>Usage Notes</p>
<p>See the parameter descriptions in <a href="#BHCHABJJ">Table 143-14</a> for the differences between the flags and why <code dir="ltr">DBMS_SESSION.REINITIALIZE</code> exhibits better performance than <code dir="ltr">DBMS_SESSION.FREE_ALL_RESOURCES</code>.</p>
<div id="ARPLS68056" class="tblformal">
<p class="titleintable"><a id="sthref8868"></a><a id="CEGFIFFA"></a>Table 143-13 Action_flags Constants for MODIFY_PACKAGE_STATE</p>
<table class="cellalignment4330" title="Action_flags Constants for MODIFY_PACKAGE_STATE " summary="This table describes Action_flags Constants for the MODIFY_PACKAGE_STATE subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t15">Constant</th>
<th class="cellalignment4328" id="r1c2-t15">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t15" headers="r1c1-t15">
<p><code dir="ltr">FREE_ALL_RESOURCES</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t15 r1c2-t15">
<p><code dir="ltr">PLS_INTEGER:= 1</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t15" headers="r1c1-t15">
<p><code dir="ltr">REINITIALIZE</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t15 r1c2-t15">
<p><code dir="ltr">PLS_INTEGER:= 2</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<ul>
<li>
<p>Reinitialization refers to the process of resetting all package variables to their initial values and running the initialization block (if any) in the package bodies. Consider the package:</p>
</li>
</ul>
<pre dir="ltr">    package P is
      n number;
      m number := P2.foo;
      d date := SYSDATE;
      cursor c is select * from emp;
      procedure bar;
    end P;
    /
    package body P is
      v   varchar2(20) := &#39;hello&#39;;
      procedure bar is
      begin
        ...
      end;
      procedure init_pkg is
      begin
        ....
      end;
    begin
      -- initialization block
      init_pkg;
      ...
      ...
    end P;
    /
</pre>
<p>For the package P, reinitialization involves:</p>
<ul>
<li>
<p>Setting <code dir="ltr">P.n</code> to <code dir="ltr">NULL</code></p>
</li>
<li>
<p>Invoking function <code dir="ltr">P2.foo</code> and setting <code dir="ltr">P.m</code> to the value returned from <code dir="ltr">P2.foo</code></p>
</li>
<li>
<p>Setting <code dir="ltr">P.d</code> to the return value of <code dir="ltr">SYSDATE</code> built-in</p>
</li>
<li>
<p>Closing cursor <code dir="ltr">P.c</code> if it was previously opened</p>
</li>
<li>
<p>Setting <code dir="ltr">P.v</code> to &#39;hello&#39;</p>
</li>
<li>
<p>Running the initialization block in the package body</p>
</li>
</ul>
<ul>
<li>
<p>The reinitialization for a package is done only if the package is actually referenced subsequently. Furthermore, the packages are reinitialized in the order in which they are referenced subsequently.</p>
</li>
<li>
<p>When using <code dir="ltr">FREE_ALL_RESOURCES</code> or <code dir="ltr">REINITIALIZE</code>, make sure that resetting package variable values does not affect the application.</p>
</li>
<li>
<p>Because <code dir="ltr">DBMS_SESSION.REINITIALIZE</code> does not actually cause all the package state to be freed, in some situations, the application could use significantly more session memory than if the <code dir="ltr">FREE_ALL_RESOURCES</code> flag or the <code dir="ltr">RESET_PACKAGE</code> procedure had been used. For instance, after performing <code dir="ltr">DBMS_SESSION.MODIFY_PACKAGE_STATE(DBMS_SESSION.REINITIALIZE)</code>, if the application does not refer to many of the packages that were previously referenced, then the session memory for those packages remains until the end of the session (or until <code dir="ltr">DBMS_SESSION.RESET_PACKAGE</code> is called).</p>
</li>
<li>
<p>Because the client-side PL/SQL code cannot reference remote package variables or constants, you must explicitly use the values of the constants. For example, <code dir="ltr">DBMS_SESSION.MODIFY_PACKAGE_STATE(DBMS_SESSION.REINITIALIZE)</code>does not compile on the client because it uses the constant <code dir="ltr">DBMS_SESSION.REINITIALIZE</code>.</p>
<p>Instead, use <code dir="ltr">DBMS_SESSION.MODIFY_PACKAGE_STATE(2)</code> on the client, because the argument is explicitly provided.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8869"></a>Examples</p>
<p>This example illustrates the use of <code dir="ltr">DBMS_SESSION.MODIFY_PACKAGE_STATE</code>. Consider a package <code dir="ltr">P</code> with some global state (a cursor <code dir="ltr">c</code> and a number <code dir="ltr">cnt</code>). When the package is first initialized, the package variable <code dir="ltr">cnt</code> is <code dir="ltr">0</code> and the cursor <code dir="ltr">c</code> is <code dir="ltr">CLOSED</code>. Then, in the session, change the value of <code dir="ltr">cnt</code> to <code dir="ltr">111</code> and also execute an <code dir="ltr">OPEN</code> operation on the cursor. If you call <code dir="ltr">print_status</code> to display the state of the package, you see that <code dir="ltr">cnt</code> is <code dir="ltr">111</code> and that the cursor is <code dir="ltr">OPEN</code>. Next, call <code dir="ltr">DBMS_SESSION.MODIFY_PACKAGE_STATE</code>. If you print the status of the package <code dir="ltr">P</code> again using <code dir="ltr">print_status</code>, you see that <code dir="ltr">cnt</code> is <code dir="ltr">0</code> again and the cursor is <code dir="ltr">CLOSED</code>. If the call to <code dir="ltr">DBMS_SESSION.MODIFY_PACKAGE_STATE</code> had not been made, then the second <code dir="ltr">print_status</code> would have printed <code dir="ltr">111</code> and <code dir="ltr">OPEN</code>.</p>
<pre dir="ltr">create or replace package P is
  cnt    number := 0;
  cursor c is select * from emp;
  procedure print_status;
end P;
/
show errors;

create or replace package body P is
  procedure print_status is
  begin
    dbms_output.put_line(&#39;P.cnt = &#39; || cnt);
    if c%ISOPEN then
      dbms_output.put_line(&#39;P.c is OPEN&#39;);
    else
      dbms_output.put_line(&#39;P.c is CLOSED&#39;);
    end if;
  end;
end P;
/
show errors;

SQL&gt; set serveroutput on;
SQL&gt; begin
  2   P.cnt := 111;
  3   open p.c;
  4   P.print_status;
  5  end;
  6  /
P.cnt = 111
P.c is OPEN

PL/SQL procedure successfully completed.

SQL&gt; begin
  2   dbms_session.modify_package_state(dbms_session.reinitialize);
  3  end;
  4  /

PL/SQL procedure successfully completed.

SQL&gt; set serveroutput on;
SQL&gt;
SQL&gt; begin
  2   P.print_status;
  3  end;
  4  /
P.cnt = 0
P.c is CLOSED

PL/SQL procedure successfully completed.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68057" class="refsect2"><a id="CEGJHGDB"></a>
<h3 class="refsect2"><a id="sthref8870"></a>SESSION_TRACE_DISABLE Procedure</h3>
<p>This procedure resets the session-level SQL trace for the session from which it was called. Client ID and service/module/action traces are not affected.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8871"></a>Syntax</p>
<pre dir="ltr">DBMS_SESSION.SESSION_TRACE_DISABLE;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68058" class="refsect2"><a id="i1010518"></a>
<h3 class="refsect2"><a id="sthref8872"></a>SESSION _TRACE_ENABLE Procedure</h3>
<p>This procedure enables session-level SQL trace for the invoking session. Invoking this procedure results in SQL tracing of every SQL statement issued by the session.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8873"></a>Syntax</p>
<pre dir="ltr">DBMS_SESSION.SESSION_TRACE_ENABLE(
   waits     IN   BOOLEAN DEFAULT TRUE,
   binds     IN   BOOLEAN DEFAULT FALSE, 
   plan_stat IN   VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8874"></a>Parameters</p>
<div id="ARPLS68059" class="tblformal">
<p class="titleintable"><a id="sthref8875"></a><a id="BHCHABJJ"></a>Table 143-14 SESSION_TRACE_ENABLE Procedure Parameters</p>
<table class="cellalignment4330" title="SESSION_TRACE_ENABLE Procedure Parameters " summary="This table describes Parameters used by the DBMS_SESSION.SESSION_TRACE_ENABLE subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t16">Parameter</th>
<th class="cellalignment4328" id="r1c2-t16">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t16" headers="r1c1-t16">
<p><code dir="ltr">waits</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t16 r1c2-t16">
<p>Specifies if wait information is to be traced</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t16" headers="r1c1-t16">
<p><code dir="ltr">binds</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t16 r1c2-t16">
<p>Specifies if bind information is to be traced</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t16" headers="r1c1-t16">
<p><code dir="ltr">plan_stat</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t16 r1c2-t16">
<p>Frequency at which we dump row source statistics. Value should be &#39;<code dir="ltr">NEVER</code>&#39;, &#39;<code dir="ltr">FIRST_EXECUTION</code>&#39; (equivalent to <code dir="ltr">NULL</code>) or &#39;<code dir="ltr">ALL_EXECUTIONS</code>&#39;.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68060" class="refsect2"><a id="i1010767"></a>
<h3 class="refsect2"><a id="sthref8876"></a>RESET_PACKAGE Procedure</h3>
<p>This procedure de-instantiates all packages in this session. It frees the package state.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
See <a href="#i1010518">&#34;SESSION _TRACE_ENABLE Procedure&#34;</a> . The MODIFY_PACKAGE_STATE interface, introduced in Oracle9i, provides an equivalent of the RESET_PACKAGE capability. It is an efficient, lighter-weight variant for reinitializing the state of all PL/SQL packages in the session.</div>
<p>Memory used for caching the execution state is associated with all PL/SQL functions, procedures, and packages that were run in a session.</p>
<p>For packages, this collection of memory holds the current values of package variables and controls the cache of cursors opened by the respective PL/SQL programs. A call to <code dir="ltr">RESET_PACKAGE</code> frees the memory associated with each of the previously run PL/SQL programs from the session, and, consequently, clears the current values of any package globals and closes any cached cursors.</p>
<p><code dir="ltr">RESET_PACKAGE</code> can also be used to reliably restart a failed program in a session. If a program containing package variables fails, then it is hard to determine which variables need to be reinitialized. <code dir="ltr">RESET_PACKAGE</code> guarantees that all package variables are reset to their initial values.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8877"></a>Syntax</p>
<pre dir="ltr">DBMS_SESSION.RESET_PACKAGE; 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8878"></a>Usage Notes</p>
<p>Because the amount of memory consumed by all executed PL/SQL can become large, you might use <code dir="ltr">RESET_PACKAGE</code> to trim down the session memory footprint at certain points in your database application. However, make sure that resetting package variable values does not affect the application. Also, remember that later execution of programs that have lost their cached memory and cursors will perform slower, because they need to re-create the freed memory and cursors.</p>
<p><code dir="ltr">RESET_PACKAGE</code> does not free the memory, cursors, and package variables immediately when called.</p>
</div>
<!-- class="refsubsect" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
<code dir="ltr">RESET_PACKAGE</code> only frees the memory, cursors, and package variables after the PL/SQL call that made the invocation finishes running.</div>
<p>For example, PL/SQL procedure <code dir="ltr">P1</code> calls PL/SQL procedure <code dir="ltr">P2</code>, and <code dir="ltr">P2</code> calls <code dir="ltr">RESET_PACKAGE</code>. The <code dir="ltr">RESET_PACKAGE</code> effects do not occur until procedure <code dir="ltr">P1</code> finishes execution (the PL/SQL call ends).</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8879"></a>Examples</p>
<p>This SQL*Plus script runs a large program with many PL/SQL program units that may or may not use global variables, but it doesn&#39;t need them beyond this execution:</p>
<pre dir="ltr">EXCECUTE large_plsql_program1; 
 
</pre>
<p>To free up PL/SQL cached session memory:</p>
<pre dir="ltr">EXECUTE DBMS_SESSION.RESET_PACKAGE; 
 
</pre>
<p>To run another large program:</p>
<pre dir="ltr">EXECUTE large_plsql_program2;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68061" class="refsect2"><a id="i1010942"></a>
<h3 class="refsect2"><a id="sthref8880"></a>SET_CONTEXT Procedure</h3>
<p>This procedure sets the context, of which there are four types: session local, globally initialized, externally initialized, and globally accessed.</p>
<p>Of its five parameters, only the first three are required; the final two parameters are optional, used only in globally accessed contexts. Further parameter information appears in the parameter table and the usage notes.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8881"></a>Syntax</p>
<pre dir="ltr">DBMS_SESSION.SET_CONTEXT (
   namespace VARCHAR2,
   attribute VARCHAR2,
   value     VARCHAR2,
   username  VARCHAR2,
   client_id VARCHAR2 );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8882"></a>Parameters</p>
<div id="ARPLS68062" class="tblformal">
<p class="titleintable"><a id="sthref8883"></a><a id="sthref8884"></a>Table 143-15 SET_CONTEXT Procedure Parameters</p>
<table class="cellalignment4330" title="SET_CONTEXT Procedure Parameters " summary="This table describes Parameters used by the DBMS_SESSION.SET_CONTEXT subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t19">Parameter</th>
<th class="cellalignment4328" id="r1c2-t19">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t19" headers="r1c1-t19">
<p><code dir="ltr">namespace</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t19 r1c2-t19">
<p>Namespace of the application context to be set, limited to 30 bytes</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t19" headers="r1c1-t19">
<p><code dir="ltr">attribute</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t19 r1c2-t19">
<p>Attribute of the application context to be set, limited to 30 bytes</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t19" headers="r1c1-t19">
<p><code dir="ltr">value</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t19 r1c2-t19">
<p>Value of the application context to be set, limited to 4 kilobytes.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t19" headers="r1c1-t19">
<p><code dir="ltr">username</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t19 r1c2-t19">
<p>Database username attribute of the application context.</p>
<p>Default: NULL</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t19" headers="r1c1-t19">
<p><code dir="ltr">client_id</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t19 r1c2-t19">
<p>Application-specific client_id attribute of the application context (64-byte maximum).</p>
<p>Default: NULL</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8885"></a>Usage Notes</p>
<ul>
<li>
<p>The first three parameters are required for all types of context.</p>
</li>
<li>
<p>The <code dir="ltr">username</code> parameter must be a valid SQL identifier.</p>
</li>
<li>
<p>The <code dir="ltr">client_id</code> parameter must be a string of at most 64 bytes. It is case-sensitive and must match the argument provided for <code dir="ltr">set_identifier</code>.</p>
</li>
<li>
<p>If the namespace parameter is a global context namespace, then the <code dir="ltr">username</code> parameter is matched against the current database user name in the session, and the <code dir="ltr">client_id</code> parameter is matched against the current <code dir="ltr">client_id</code> in the session. If these parameters are not set, NULL is assumed, enabling any user to see the context values.</p>
</li>
<li>
<p>This procedure must be invoked directly or indirectly by the trusted package.</p>
</li>
<li>
<p>The caller of SET_CONTEXT must be in the calling stack of a procedure that has been associated to the context namespace through a <code dir="ltr">CREATE</code> <code dir="ltr">CONTEXT</code> statement. The checking of the calling stack does not cross a DBMS boundary.</p>
</li>
<li>
<p>No limit applies to the number of attributes that can be set in a namespace. An attribute retains its value during the user&#39;s session unless it is reset by the user.</p>
</li>
<li>
<p>If the value of the parameter in the namespace has been set, <code dir="ltr">SET_CONTEXT</code> overwrites this value.</p>
</li>
<li>
<p>Any changes in context value are reflected immediately and subsequent calls to access the value through <code dir="ltr">SYS_CONTEXT</code> return the most recent value.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<span class="italic">Oracle Database Security Guide</span> for more information about
<ul>
<li>
<p><a class="olink DBSEG77432" href="../DBSEG/app_context.htm#DBSEG77432">&#34;Setting the username and client ID&#34;</a></p>
</li>
<li>
<p><a class="olink DBSEG79745" href="../DBSEG/app_context.htm#DBSEG79745">&#34;Example: Creating a Global Application Context that Uses a Client Session ID&#34;</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72968" class="refsect2"><a id="CHDGADDD"></a>
<h3 class="refsect2"><a id="sthref8886"></a>SET_EDITION_DEFERRED Procedure</h3>
<p>This procedure requests a switch to the specified edition. The switch takes effect at the end of the current client call.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8887"></a>Syntax</p>
<pre dir="ltr">DBMS_SESSION.SET_EDITION_DEFERRED (
   edition    IN    VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8888"></a>Parameters</p>
<div id="ARPLS72969" class="tblformal">
<p class="titleintable"><a id="sthref8889"></a><a id="sthref8890"></a>Table 143-16 SET_EDITION_DEFERRED Procedure Parameters</p>
<table class="cellalignment4330" title="SET_EDITION_DEFERRED Procedure Parameters " summary="This table describes Parameters used by the DBMS_SESSION.SET_EDITION_DEFERRED subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t21">Parameter</th>
<th class="cellalignment4328" id="r1c2-t21">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t21" headers="r1c1-t21">
<p><code dir="ltr">edition</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t21 r1c2-t21">
<p>Name of the edition to which to switch. The contents of the string are processed as a SQL identifier; double quotation marks must surround the remainder of the string if special characters or lower case characters are present in the edition&#39;s actual name and, if double quotation marks are not used, the contents are set in uppercase. The caller must have <code dir="ltr">USE</code> privilege on the named edition.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68063" class="refsect2"><a id="i996935"></a>
<h3 class="refsect2"><a id="sthref8891"></a>SET_IDENTIFIER Procedure</h3>
<p>This procedure sets the client ID in the session.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8892"></a>Syntax</p>
<pre dir="ltr">DBMS_SESSION.SET_IDENTIFIER (
   client_id VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8893"></a>Parameters</p>
<div id="ARPLS68064" class="tblformal">
<p class="titleintable"><a id="sthref8894"></a><a id="sthref8895"></a>Table 143-17 SET_IDENTIFIER Procedure Parameters</p>
<table class="cellalignment4330" title="SET_IDENTIFIER Procedure Parameters " summary="This table describes Parameters used by the DBMS_SESSION.SET_IDENTIFIER subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t22">Parameter</th>
<th class="cellalignment4328" id="r1c2-t22">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t22" headers="r1c1-t22">
<p><code dir="ltr">client_id</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t22 r1c2-t22">
<p>Case-sensitive application-specific identifier of the current database session</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8896"></a>Usage Notes</p>
<ul>
<li>
<p><code dir="ltr">SET_IDENTIFIER</code> sets the session&#39;s client id to the given value. This value can be used to identify sessions in <code dir="ltr">v$session</code> by means of <code dir="ltr">v$session.client_identifier</code>. It can also be used to identify sessions by means of <code dir="ltr">sys_context(&#39;USERENV&#39;,&#39;CLIENT_IDENTIFIER&#39;).</code></p>
</li>
<li>
<p>This procedure is executable by <code dir="ltr">PUBLIC</code>.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68065" class="refsect2"><a id="i1010906"></a>
<h3 class="refsect2"><a id="sthref8897"></a>SET_NLS Procedure</h3>
<p>This procedure sets up your Globalization Support (NLS). It is equivalent to the following SQL statement:</p>
<pre dir="ltr">ALTER SESSION SET &lt;nls_parameter&gt; = &lt;value&gt;
</pre>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8898"></a>Syntax</p>
<pre dir="ltr">DBMS_SESSION.SET_NLS (
   param VARCHAR2, 
   value VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8899"></a>Parameters</p>
<div id="ARPLS68066" class="tblformal">
<p class="titleintable"><a id="sthref8900"></a><a id="sthref8901"></a>Table 143-18 SET_NLS Procedure Parameters</p>
<table class="cellalignment4330" title="SET_NLS Procedure Parameters " summary="This table describes Parameters used by the DBMS_SESSION.SET_NLS subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t23">Parameter</th>
<th class="cellalignment4328" id="r1c2-t23">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t23" headers="r1c1-t23">
<p><code dir="ltr">param</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t23 r1c2-t23">
<p>Globalization Support parameter. The parameter name must begin with &#39;NLS&#39;.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t23" headers="r1c1-t23">
<p><code dir="ltr">value</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t23 r1c2-t23">
<p>Parameter value.</p>
<p>If the parameter is a text literal, then it needs embedded single-quotes. For example, &#34;<code dir="ltr">set_nls</code> (&#39;<code dir="ltr">nls_date_format</code>&#39;,&#39;&#39;&#39;<code dir="ltr">DD-MON-YY</code>&#39;&#39;&#39;)&#34;.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68067" class="refsect2"><a id="i997099"></a>
<h3 class="refsect2"><a id="sthref8902"></a>SET_ROLE Procedure</h3>
<p>This procedure enables and disables roles. It is equivalent to the <code dir="ltr">SET</code> <code dir="ltr">ROLE</code> SQL statement.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8903"></a>Syntax</p>
<pre dir="ltr">DBMS_SESSION.SET_ROLE (
   role_cmd VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8904"></a>Parameters</p>
<div id="ARPLS68068" class="tblformal">
<p class="titleintable"><a id="sthref8905"></a><a id="sthref8906"></a>Table 143-19 SET_ROLE Procedure Parameters</p>
<table class="cellalignment4330" title="SET_ROLE Procedure Parameters " summary="This table describes Parameters used by the DBMS_SESSION.SET_ROLE subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t24">Parameter</th>
<th class="cellalignment4328" id="r1c2-t24">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t24" headers="r1c1-t24">
<p><code dir="ltr">role_cmd</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t24 r1c2-t24">
<p>Text is appended to &#34;set role&#34; and then run as SQL</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8907"></a>Usage Notes</p>
<p>Note that the procedure creates a new transaction if it is not invoked from within an existing transaction.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68069" class="refsect2"><a id="i997123"></a>
<h3 class="refsect2"><a id="sthref8908"></a>SET_SQL_TRACE Procedure</h3>
<p>This procedure turns tracing on or off. It is equivalent to the following SQL statement:</p>
<pre dir="ltr">ALTER SESSION SET SQL_TRACE ...
</pre>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8909"></a>Syntax</p>
<pre dir="ltr">DBMS_SESSION.SET_SQL_TRACE (
   sql_trace boolean);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8910"></a>Parameters</p>
<div id="ARPLS68070" class="tblformal">
<p class="titleintable"><a id="sthref8911"></a><a id="sthref8912"></a>Table 143-20 SET_SQL_TRACE Procedure Parameters</p>
<table class="cellalignment4330" title="SET_SQL_TRACE Procedure Parameters " summary="This table describes Parameters used by the DBMS_SESSION.SET_SQL_TRACE subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t25">Parameter</th>
<th class="cellalignment4328" id="r1c2-t25">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t25" headers="r1c1-t25">
<p><code dir="ltr">sql_trace</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t25 r1c2-t25">
<p><code dir="ltr">TRUE</code> turns tracing on, <code dir="ltr">FALSE</code> turns tracing off</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68071" class="refsect2"><a id="i997666"></a>
<h3 class="refsect2"><a id="sthref8913"></a>SWITCH_CURRENT_CONSUMER_GROUP Procedure</h3>
<p>This procedure changes the current resource consumer group of a user&#39;s current session.</p>
<p>This lets you switch to a consumer group if you have the switch privilege for that particular group. If the caller is another procedure, then this enables the user to switch to a consumer group for which the owner of that procedure has switch privilege.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8914"></a>Syntax</p>
<pre dir="ltr">DBMS_SESSION.switch_current_consumer_group (
   new_consumer_group     IN  VARCHAR2, 
   old_consumer_group     OUT VARCHAR2, 
   initial_group_on_error IN  BOOLEAN); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8915"></a>Parameters</p>
<div id="ARPLS68072" class="tblformal">
<p class="titleintable"><a id="sthref8916"></a><a id="sthref8917"></a>Table 143-21 SWITCH_CURRENT_CONSUMER_GROUP Procedure Parameters</p>
<table class="cellalignment4330" title="SWITCH_CURRENT_CONSUMER_GROUP Procedure Parameters" summary="This table describes Parameters used by the DBMS_SESSION.SWITCH_CURRENT_CONSUMER_GROUP subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t26">Parameter</th>
<th class="cellalignment4328" id="r1c2-t26">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t26" headers="r1c1-t26">
<p><code dir="ltr">new_consumer_group</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t26 r1c2-t26">
<p>Name of consumer group to which you want to switch</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t26" headers="r1c1-t26">
<p><code dir="ltr">old_consumer_group</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t26 r1c2-t26">
<p>Name of the consumer group from which you just switched out</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t26" headers="r1c1-t26">
<p><code dir="ltr">initial_group_on_error</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t26 r1c2-t26">
<p>If <code dir="ltr">TRUE</code>, then sets the current consumer group of the caller to his/her initial consumer group in the event of an error</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8918"></a>Return Values</p>
<p>This procedure outputs the old consumer group of the user in the parameter <code dir="ltr">old_consumer_group</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can switch back to the old consumer group later using the value returned in <code dir="ltr">old_consumer_group</code>.</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8919"></a>Exceptions</p>
<div id="ARPLS68073" class="tblformal">
<p class="titleintable"><a id="sthref8920"></a><a id="sthref8921"></a>Table 143-22 SWITCH_CURRENT_CONSUMER_GROUP Procedure Exceptions</p>
<table class="cellalignment4330" title="SWITCH_CURRENT_CONSUMER_GROUP Procedure Exceptions" summary="This table describes the Exceptions raised by the SWITCH_CURRENT_CONSUMER_GROUP subprograms." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t28">Exception</th>
<th class="cellalignment4328" id="r1c2-t28">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t28" headers="r1c1-t28">
<p><code dir="ltr">29368</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t28 r1c2-t28">
<p>Non-existent consumer group</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t28" headers="r1c1-t28">
<p><code dir="ltr">1031</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t28 r1c2-t28">
<p>Insufficient privileges</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t28" headers="r1c1-t28">
<p><code dir="ltr">29396</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t28 r1c2-t28">
<p>Cannot switch to <code dir="ltr">OTHER_GROUPS</code> consumer group</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8922"></a>Usage Notes</p>
<p>The owner of a procedure must have privileges on the group from which a user was switched (<code dir="ltr">old_consumer_group</code>) in order to switch them back. There is one exception: The procedure can always switch the user back to his/her initial consumer group (skipping the privilege check).</p>
<p>By setting <code dir="ltr">initial_group_on_error</code> to <code dir="ltr">TRUE</code>, <code dir="ltr">SWITCH_CURRENT_CONSUMER_GROUP</code> puts the current session into the default group, if it can&#39;t put it into the group designated by <code dir="ltr">new_consumer_group</code>. The error associated with the attempt to move a session into <code dir="ltr">new_consumer_group</code> is raised, even though the current consumer group has been changed to the initial consumer group.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8923"></a>Examples</p>
<pre dir="ltr">CREATE OR REPLACE PROCEDURE high_priority_task is 
   old_group varchar2(30); 
   prev_group varchar2(30); 
   curr_user varchar2(30);  
BEGIN 
  -- switch invoker to privileged consumer group. If we fail to do so, an 
  -- error is thrown, but the consumer group does not change 
  -- because &#39;initial_group_on_error&#39; is set to FALSE 
 
  dbms_session.switch_current_consumer_group(&#39;tkrogrp1&#39;, old_group, FALSE); 
  -- set up exception handler (in the event of an error, we do not want to 
  -- return to caller while leaving the session still in the privileged 
  -- group) 
 
  BEGIN 
    -- perform some operations while under privileged group 
 
  EXCEPTION 
    WHEN OTHERS THEN 
     -- It is possible that the procedure owner does not have privileges 
     -- on old_group. &#39;initial_group_on_error&#39; is set to TRUE to make sure 
     -- that the user is moved out of the privileged group in such a 
     -- situation 
 
     dbms_session.switch_current_consumer_group(old_group,prev_group,TRUE); 
     RAISE; 
    END; 
 
  -- we&#39;ve succeeded. Now switch to old_group, or if cannot do so, switch 
  -- to caller&#39;s initial consumer group 
 
  dbms_session.switch_current_consumer_group(old_group,prev_group,TRUE); 
END high_priority_task; 
/  
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68074" class="refsect2"><a id="i1011002"></a>
<h3 class="refsect2"><a id="sthref8924"></a>UNIQUE_SESSION_ID Function</h3>
<p>This function returns an identifier that is unique for all sessions currently connected to this database. Multiple calls to this function during the same session always return the same result.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8925"></a>Syntax</p>
<pre dir="ltr">DBMS_SESSION.UNIQUE_SESSION_ID 
  RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8926"></a>Pragmas</p>
<pre dir="ltr">pragma restrict_references(unique_session_id,WNDS,RNDS,WNPS);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8927"></a>Return Values</p>
<div id="ARPLS68075" class="tblformal">
<p class="titleintable"><a id="sthref8928"></a><a id="sthref8929"></a>Table 143-23 UNIQUE_SESSION_ID Function Return Values</p>
<table class="cellalignment4330" title="UNIQUE_SESSION_ID Function Return Values " summary="This table decribes Values Returned by the UNIQUE_SESSION_ID subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t29">Return</th>
<th class="cellalignment4328" id="r1c2-t29">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t29" headers="r1c1-t29">
<p><code dir="ltr">unique_session_id</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t29 r1c2-t29">
<p>Returns up to 24 bytes</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4320">
<tr>
<td class="cellalignment4329">
<table class="cellalignment4325">
<tr>
<td class="cellalignment4324"><a href="d_serv.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4324"><a href="d_shared_pool.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4332">
<table class="cellalignment4323">
<tr>
<td class="cellalignment4324"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4324"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4324"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4324"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4324"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4324"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>