<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-2254"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/DBMS_DEBUG"></a><title>DBMS_DEBUG</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1086"/>
<meta name="dcterms.created" content="2016-09-02T5:36:19Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database PL/SQL Packages and Types Reference"/>
<meta name="dcterms.identifier" content="E41829-07"/>
<meta name="dcterms.isVersionOf" content="ARPLS"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="d_dbver.htm" title="Previous" type="text/html"/>
<link rel="Next" href="d_ddl.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41829-07.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">57/290</span> <!-- End Header -->
<div id="ARPLS009" class="chapter"><a id="sthref3673"></a>
<h1 class="chapter"><span class="secnum">53</span> DBMS_DEBUG</h1>
<p><code dir="ltr">D<a id="sthref3674"></a>BMS_DEBUG</code> is a PL/SQL interface to the PL/SQL debugger layer, Probe, in the Oracle server.</p>
<p>This API is primarily intended to implement server-side debuggers and it provides a way to debug server-side PL/SQL program units.</p>
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
The term <span class="italic">program unit</span> refers to a PL/SQL program of any type (procedure, function, package, package body, trigger, anonymous block, object type, or object type body).</div>
<p>This chapter contains the following topics:</p>
<ul>
<li>
<p><a href="#CEGDJJHF">Using DBMS_DEBUG</a></p>
<ul>
<li>
<p>Overview</p>
</li>
<li>
<p>Constants</p>
</li>
<li>
<p>Variables</p>
</li>
<li>
<p>Exceptions</p>
</li>
<li>
<p>Operational Notes</p>
</li>
</ul>
</li>
<li>
<p><a href="#BCGHCHJD">Data Structures</a></p>
<ul>
<li>
<p>RECORD Types</p>
</li>
<li>
<p>TABLE Types</p>
</li>
</ul>
</li>
<li>
<p><a href="#i997307">Summary of DBMS_DEBUG Subprograms</a></p>
</li>
</ul>
<div class="refentry"><a id="CEGDJJHF"></a>
<div id="ARPLS66092" class="refsect1">
<h2 class="refsect1">Using DBMS_DEBUG</h2>
<ul>
<li>
<p><a href="#i1011693">Overview</a></p>
</li>
<li>
<p><a href="#CEGGCFIF">Constants</a></p>
</li>
<li>
<p><a href="#i1012106">Variables</a></p>
</li>
<li>
<p><a href="#CEGCGGBF">Exceptions</a></p>
</li>
<li>
<p><a href="#i1012116">Operational Notes</a></p>
</li>
</ul>
<div id="ARPLS66093" class="refsect2"><a id="i1011693"></a>
<h3 class="refsect2">Overview</h3>
<p>To debug server-side code, you must have two database sessions: one session to run the code in debug mode (the target session), and a second session to supervise the target session (the debug session).</p>
<p>The target session becomes available for debugging by making initializing calls with <code dir="ltr">DBMS_DEBUG</code>. This marks the session so that the PL/SQL interpreter runs in debug mode and generates debug events. As debug events are generated, they are posted from the session. In most cases, debug events require return notification: the interpreter pauses awaiting a reply.</p>
<p>Meanwhile, the debug session must also initialize itself using <code dir="ltr">DBMS_DEBUG</code>: This tells it which target session to supervise. The debug session may then call entry points in <code dir="ltr">DBMS_DEBUG</code> to read events that were posted from the target session and to communicate with the target session.</p>
<p>The following subprograms are run in the target session (the session that is to be debugged):</p>
<ul>
<li>
<p><a href="#i1009620">SYNCHRONIZE Function</a></p>
</li>
<li>
<p><a href="#i1008030">DEBUG_ON Procedure</a></p>
</li>
<li>
<p><a href="#CEGCBFAE">DEBUG_OFF Procedure</a></p>
</li>
</ul>
<p><code dir="ltr">DBMS_DEBUG</code> does not provide an interface to the PL/SQL compiler, but it does depend on debug information optionally generated by the compiler. Without debug information, it is not possible to examine or modify the values of parameters or variables.</p>
</div>
<!-- class="refsect2" -->
<div id="ARPLS66094" class="refsect2"><a id="CEGGCFIF"></a>
<h3 class="refsect2">Constants</h3>
<p>A breakpoint status may have the following value:</p>
<ul>
<li>
<p><code dir="ltr">breakpoint_status_unused</code>&mdash;breakpoint is not in use</p>
</li>
</ul>
<p>Otherwise, the status is a mask of the following values:</p>
<ul>
<li>
<p><code dir="ltr">breakpoint_status_active</code>&mdash;a line breakpoint</p>
</li>
<li>
<p><code dir="ltr">breakpoint_status_disabled</code>&mdash;breakpoint is currently disabled</p>
</li>
<li>
<p><code dir="ltr">breakpoint_status_remote</code>&mdash;a shadow breakpoint (a local representation of a remote breakpoint)</p>
</li>
</ul>
</div>
<!-- class="refsect2" -->
<div id="ARPLS66095" class="refsect2"><a id="i1012106"></a>
<h3 class="refsect2">Variables</h3>
<p>The <code dir="ltr">DBMS_DEBUG</code> uses the variables shown in <a href="#CEGBDEEI">Table 53-1</a>.</p>
<div id="ARPLS66096" class="tblformal">
<p class="titleintable"><a id="sthref3675"></a><a id="CEGBDEEI"></a>Table 53-1 DBMS_DEBUG Variables</p>
<table class="cellalignment4330" title="DBMS_DEBUG Variables" summary="This table describes DBMS_DEBUG Variables." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t3">Variable</th>
<th class="cellalignment4328" id="r1c2-t3">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t3" headers="r1c1-t3">
<p><code dir="ltr">default_timeout</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t3 r1c2-t3">
<p>The timeout value (used by both sessions).The smallest possible timeout is 1 second. If this value is set to 0, then a large value (3600) is used.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66097" class="refsect2"><a id="CEGCGGBF"></a>
<h3 class="refsect2">Exceptions</h3>
<p>These values are returned by the various functions called in the debug session (<code dir="ltr">SYNCHRONIZE</code>, <code dir="ltr">CONTINUE</code>, <code dir="ltr">SET_BREAKPOINT</code>, and so on). If PL/SQL exceptions worked across client/server and server/server boundaries, then these would all be exceptions rather than error codes.</p>
<div class="inftblinformal">
<table class="cellalignment4327" title="DBMS_DEBUG Exceptions" summary="This table describes DBMS_DEBUG Exceptions, in this case &#34;success&#34;." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t4">Value</th>
<th class="cellalignment4328" id="r1c2-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t4" headers="r1c1-t4"><code dir="ltr">success</code></td>
<td class="cellalignment4329" headers="r2c1-t4 r1c2-t4">Normal termination</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p>Statuses returned by <code dir="ltr">GET_VALUE</code> and <code dir="ltr">SET_VALUE</code>:</p>
<div class="inftblinformal">
<table class="cellalignment4327" title="Statuses returned by GET_VALUE and SET_VALUE" summary="This table describes DBMS_DEBUG Exceptions returned by GET_VALUE and SET_VALUE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t5">Status</th>
<th class="cellalignment4328" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t5" headers="r1c1-t5"><code dir="ltr">error_bogus_frame</code></td>
<td class="cellalignment4329" headers="r2c1-t5 r1c2-t5">No such entrypoint on the stack</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t5" headers="r1c1-t5"><code dir="ltr">error_no_debug_info</code></td>
<td class="cellalignment4329" headers="r3c1-t5 r1c2-t5">Program was compiled without debug symbols</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t5" headers="r1c1-t5"><code dir="ltr">error_no_such_object</code></td>
<td class="cellalignment4329" headers="r4c1-t5 r1c2-t5">No such variable or parameter</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t5" headers="r1c1-t5"><code dir="ltr">error_unknown_type</code></td>
<td class="cellalignment4329" headers="r5c1-t5 r1c2-t5">Debug information is unreadable</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t5" headers="r1c1-t5"><code dir="ltr">error_indexed_table</code></td>
<td class="cellalignment4329" headers="r6c1-t5 r1c2-t5">Returned by <code dir="ltr">GET_VALUE</code> if the object is a table, but no index was provided</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t5" headers="r1c1-t5"><code dir="ltr">error_illegal_index</code></td>
<td class="cellalignment4329" headers="r7c1-t5 r1c2-t5">No such element exists in the collection</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t5" headers="r1c1-t5"><code dir="ltr">error_nullcollection</code></td>
<td class="cellalignment4329" headers="r8c1-t5 r1c2-t5">Table is atomically <code dir="ltr">NULL</code></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t5" headers="r1c1-t5"><code dir="ltr">error_nullvalue</code></td>
<td class="cellalignment4329" headers="r9c1-t5 r1c2-t5">Value is <code dir="ltr">NULL</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p>Statuses returned by <code dir="ltr">SET_VALUE</code>:</p>
<div class="inftblinformal">
<table class="cellalignment4327" title="Statuses returned by SET_VALUE" summary="This table describes DBMS_DEBUG Exceptions returned by SET_VALUE only." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t6">Status</th>
<th class="cellalignment4328" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t6" headers="r1c1-t6"><code dir="ltr">error_illegal_value</code></td>
<td class="cellalignment4329" headers="r2c1-t6 r1c2-t6">Constraint violation</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t6" headers="r1c1-t6"><code dir="ltr">error_illegal_null</code></td>
<td class="cellalignment4329" headers="r3c1-t6 r1c2-t6">Constraint violation</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t6" headers="r1c1-t6"><code dir="ltr">error_value_malformed</code></td>
<td class="cellalignment4329" headers="r4c1-t6 r1c2-t6">Unable to decipher the given value</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t6" headers="r1c1-t6"><code dir="ltr">error_other</code></td>
<td class="cellalignment4329" headers="r5c1-t6 r1c2-t6">Some other error</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t6" headers="r1c1-t6"><code dir="ltr">error_name_incomplete</code></td>
<td class="cellalignment4329" headers="r6c1-t6 r1c2-t6">Name did not resolve to a scalar</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p>Statuses returned by the breakpoint functions:</p>
<div class="inftblinformal">
<table class="cellalignment4327" title="Statuses Returned by the Breakpoint Functions" summary="This table describes Statuses returned by the breakpoint functions." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t7">Status</th>
<th class="cellalignment4328" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t7" headers="r1c1-t7"><code dir="ltr">error_no_such_breakpt</code></td>
<td class="cellalignment4329" headers="r2c1-t7 r1c2-t7">No such breakpoint</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t7" headers="r1c1-t7"><code dir="ltr">error_idle_breakpt</code></td>
<td class="cellalignment4329" headers="r3c1-t7 r1c2-t7">Cannot enable or disable an unused breakpoint</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t7" headers="r1c1-t7"><code dir="ltr">error_bad_handle</code></td>
<td class="cellalignment4329" headers="r4c1-t7 r1c2-t7">Unable to set breakpoint in given program (nonexistent or security violation)</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p>General error codes (returned by many of the <code dir="ltr">DBMS_DEBUG</code> subprograms):</p>
<div class="inftblinformal">
<table class="cellalignment4327" title="General DBMS_DEBUG Error Codes" summary="This table describes General error codes (returned by many of the DBMS_DEBUG subprograms)." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t8">Status</th>
<th class="cellalignment4328" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t8" headers="r1c1-t8"><code dir="ltr">error_unimplemented</code></td>
<td class="cellalignment4329" headers="r2c1-t8 r1c2-t8">Functionality is not yet implemented</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t8" headers="r1c1-t8"><code dir="ltr">error_deferred</code></td>
<td class="cellalignment4329" headers="r3c1-t8 r1c2-t8">No program running; operation deferred</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t8" headers="r1c1-t8"><code dir="ltr">error_exception</code></td>
<td class="cellalignment4329" headers="r4c1-t8 r1c2-t8">An exception was raised in the <code dir="ltr">DBMS_DEBUG</code> or Probe packages on the server</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t8" headers="r1c1-t8"><code dir="ltr">error_communication</code></td>
<td class="cellalignment4329" headers="r5c1-t8 r1c2-t8">Some error other than a timeout occurred</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t8" headers="r1c1-t8"><code dir="ltr">error_timeout</code></td>
<td class="cellalignment4329" headers="r6c1-t8 r1c2-t8">Timout occurred</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment4327" title="A General DBMS_DEBUG Exception" summary="This table describes the illegal_init exception." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t9">Exception</th>
<th class="cellalignment4328" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t9" headers="r1c1-t9">i<code dir="ltr">llegal_init</code></td>
<td class="cellalignment4329" headers="r2c1-t9 r1c2-t9"><code dir="ltr">DEBUG_ON</code> was called prior to <code dir="ltr">INITIALIZE</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p>The following exceptions are raised by procedure <code dir="ltr">SELF_CHECK</code>:</p>
<div class="inftblinformal">
<table class="cellalignment4327" title="Exceptions raised by procedure SELF_CHECK" summary="This table describes exceptions are raised by procedure SELF_CHECK." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t10">Exception</th>
<th class="cellalignment4328" id="r1c2-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t10" headers="r1c1-t10"><code dir="ltr">pipe_creation_failure</code></td>
<td class="cellalignment4329" headers="r2c1-t10 r1c2-t10">Could not create a pipe</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t10" headers="r1c1-t10"><code dir="ltr">pipe_send_failure</code></td>
<td class="cellalignment4329" headers="r3c1-t10 r1c2-t10">Could not write data to the pipe</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t10" headers="r1c1-t10"><code dir="ltr">pipe_receive_failure</code></td>
<td class="cellalignment4329" headers="r4c1-t10 r1c2-t10">Could not read data from the pipe</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t10" headers="r1c1-t10"><code dir="ltr">pipe_datatype_mismatch</code></td>
<td class="cellalignment4329" headers="r5c1-t10 r1c2-t10">Datatype in the pipe was wrong</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t10" headers="r1c1-t10"><code dir="ltr">pipe_data_error</code></td>
<td class="cellalignment4329" headers="r6c1-t10 r1c2-t10">Data got garbled in the pipe</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66098" class="refsect2"><a id="i1012116"></a>
<h3 class="refsect2">Operational Notes</h3>
<p>There are two ways to ensure that debug information is generated: through a session switch, or through individual recompilation.</p>
<p>To set the session switch, enter the following statement:</p>
<pre dir="ltr">ALTER SESSION SET PLSQL_DEBUG = true;
</pre>
<p>This instructs the compiler to generate debug information for the remainder of the session. It does not recompile any existing PL/SQL.</p>
<p>To generate debug information for existing PL/SQL code, use one of the following statements (the second recompiles a package or type body):</p>
<pre dir="ltr">ALTER [PROCEDURE | FUNCTION | PACKAGE | TRIGGER | TYPE] &lt;name&gt; COMPILE DEBUG;
ALTER [PACKAGE | TYPE] &lt;name&gt; COMPILE DEBUG BODY;
</pre>
<p><a href="#BCGIFDGB">Figure 53-1</a> and <a href="#i1011786">Figure 53-2</a> illustrate the flow of operations in the session to be debugged and in the debugging session.</p>
<div id="ARPLS66099" class="figure">
<p class="titleinfigure"><a id="BCGIFDGB"></a>Figure 53-1 Target Session</p>
<img width="496" height="248" src="img/arpls001.gif" alt="Description of Figure 53-1 follows"/><br/>
<a id="sthref3676" href="img_text/arpls001.htm">Description of &#39;&#39;Figure 53-1 Target Session&#39;&#39;</a><br/>
<br/></div>
<!-- class="figure" -->
<div id="ARPLS66100" class="figure">
<p class="titleinfigure"><a id="i1011786"></a>Figure 53-2 Debug Session</p>
<img width="496" height="616" src="img/arpls003.gif" alt="Description of Figure 53-2 follows"/><br/>
<a id="sthref3677" href="img_text/arpls003.htm">Description of &#39;&#39;Figure 53-2 Debug Session&#39;&#39;</a><br/>
<br/></div>
<!-- class="figure" -->
<div id="ARPLS66101" class="figure">
<p class="titleinfigure"><a id="sthref3678"></a>Figure 53-3 Debug Session (Cont.)</p>
<img width="496" height="224" src="img/arpls004.gif" alt="Description of Figure 53-3 follows"/><br/>
<a id="sthref3679" href="img_text/arpls004.htm">Description of &#39;&#39;Figure 53-3 Debug Session (Cont.)&#39;&#39;</a><br/>
<br/></div>
<!-- class="figure" -->
<div id="ARPLS66102" class="refsect3"><a id="sthref3680"></a>
<h4 class="refsect3">Control of the Interpreter</h4>
<p>The interpreter pauses execution at the following times:</p>
<ol>
<li>
<p>At startup of the interpreter so any deferred breakpoints may be installed prior to execution.</p>
</li>
<li>
<p>At any line containing an enabled breakpoint.</p>
</li>
<li>
<p>At any line where an <span class="italic">interesting</span> event occurs. The set of interesting events is specified by the flags passed to <code dir="ltr">DBMS_DEBUG</code>.<code dir="ltr">CONTINUE</code> in the <code dir="ltr">breakflags</code> parameter.</p>
</li>
</ol>
</div>
<!-- class="refsect3" -->
<div id="ARPLS66103" class="refsect3"><a id="i1011802"></a>
<h4 class="refsect3">Session Termination</h4>
<p>There is no event for session termination. Therefore, it is the responsibility of the debug session to check and make sure that the target session has not ended. A call to <code dir="ltr">DBMS_DEBUG</code>.<code dir="ltr">SYNCHRONIZE</code> after the target session has ended causes the debug session to hang until it times out.</p>
</div>
<!-- class="refsect3" -->
<div id="ARPLS66104" class="refsect3"><a id="sthref3681"></a>
<h4 class="refsect3">Deferred Operations</h4>
<p>The diagram suggests that it is possible to set breakpoints prior to having a target session. This is true. In this case, Probe caches the breakpoint request and transmits it to the target session at first synchronization. However, if a breakpoint request is deferred in this fashion, then:</p>
<ul>
<li>
<p><code dir="ltr">SET_BREAKPOINT</code> does not set the breakpoint number (it can be obtained later from <code dir="ltr">SHOW_BREAKPOINTS</code> if necessary).</p>
</li>
<li>
<p><code dir="ltr">SET_BREAKPOINT</code> does not validate the breakpoint request. If the requested source line does not exist, then an error silently occurs at synchronization, and no breakpoint is set.</p>
</li>
</ul>
</div>
<!-- class="refsect3" -->
<div id="ARPLS66105" class="refsect3"><a id="sthref3682"></a>
<h4 class="refsect3">Diagnostic Output</h4>
<p>To debug Probe, there are <span class="italic">diagnostics</span> parameters to some of the calls in <code dir="ltr">DBMS_DEBUG</code>. These parameters specify whether to place diagnostic output in the RDBMS tracefile. If output to the RDBMS tracefile is disabled, these parameters have no effect.</p>
</div>
<!-- class="refsect3" -->
<div id="ARPLS66106" class="refsect3"><a id="sthref3683"></a>
<h4 class="refsect3">Common and Debug Session Sections</h4>
<ul>
<li>
<p><a href="#CEGGBIAI">Common Section</a></p>
</li>
<li>
<p><a href="#CEGFFDHA">Target Session</a></p>
</li>
<li>
<p><a href="#CEGBJHFI">Debug Session Section</a></p>
</li>
</ul>
<div id="ARPLS66107" class="refsect4"><a id="CEGGBIAI"></a>
<h5 class="refsect4">Common Section</h5>
<p>The following subprograms may be called in either the target or the debug session:</p>
<ul>
<li>
<p><a href="#CEGHCGCA">PROBE_VERSION Procedure</a></p>
</li>
<li>
<p><a href="#i1009302">SELF_CHECK Procedure</a></p>
</li>
<li>
<p><a href="#i997626">SET_TIMEOUT Function</a></p>
</li>
</ul>
<br/></div>
<!-- class="refsect4" -->
<div id="ARPLS66108" class="refsect4"><a id="CEGFFDHA"></a>
<h5 class="refsect4">Target Session</h5>
<p>The following subprograms may be called only in the target session:</p>
<ul>
<li>
<p><a href="#i1009075">INITIALIZE Function</a></p>
</li>
<li>
<p><a href="#i1008030">DEBUG_ON Procedure</a></p>
</li>
<li>
<p><a href="#i1009844">SET_TIMEOUT_BEHAVIOUR Procedure</a></p>
</li>
<li>
<p><a href="#i1012253">GET_TIMEOUT_BEHAVIOUR Function</a></p>
</li>
</ul>
<br/></div>
<!-- class="refsect4" -->
<div id="ARPLS66109" class="refsect4"><a id="CEGBJHFI"></a>
<h5 class="refsect4">Debug Session Section</h5>
<p>The following subprograms should be run in the debug session only:</p>
<ul>
<li>
<p><a href="#i1007904">ATTACH_SESSION Procedure</a></p>
</li>
<li>
<p><a href="#i1009620">SYNCHRONIZE Function</a></p>
</li>
<li>
<p><a href="#i1010858">SHOW_FRAME_SOURCE Procedure</a></p>
</li>
<li>
<p><a href="#i997814">SHOW_SOURCE Procedures</a></p>
</li>
<li>
<p><a href="#i1012592">GET_MORE_SOURCE Procedure</a></p>
</li>
<li>
<p><a href="#i1009079">PRINT_BACKTRACE Procedure</a></p>
</li>
<li>
<p><a href="#i1007908">CONTINUE Function</a></p>
</li>
<li>
<p><a href="#i1009232">SET_BREAKPOINT Function</a></p>
</li>
<li>
<p><a href="#i1008592">DELETE_BREAKPOINT Function</a></p>
</li>
<li>
<p><a href="#CEGCBGDG">SET_OER_BREAKPOINT Function</a></p>
</li>
<li>
<p><a href="#i1010019">DELETE_OER_BREAKPOINT Function</a></p>
</li>
<li>
<p><a href="#i1008609">ENABLE_BREAKPOINT Function</a></p>
</li>
<li>
<p><a href="#i1008314">DISABLE_BREAKPOINT Function</a></p>
</li>
<li>
<p><a href="#i1009505">SHOW_BREAKPOINTS Procedures</a></p>
</li>
<li>
<p><a href="#i1009439">SET_VALUE Function</a>n</p>
</li>
<li>
<p><a href="#i1009873">GET_VALUE Function</a></p>
</li>
<li>
<p><a href="#i998630">TARGET_PROGRAM_RUNNING Procedure</a></p>
</li>
<li>
<p><a href="#i1008597">DETACH_SESSION Procedure</a></p>
</li>
<li>
<p><a href="#i1010186">GET_RUNTIME_INFO Function</a></p>
</li>
<li>
<p><a href="#i1009499">PRINT_INSTANTIATIONS Procedure</a></p>
</li>
<li>
<p><a href="#i1009706">PING Procedure</a></p>
</li>
<li>
<p><a href="#i1012851">GET_LINE_MAP Function</a></p>
</li>
<li>
<p><a href="#i1010186">GET_RUNTIME_INFO Function</a></p>
</li>
<li>
<p><a href="#i1008834">GET_INDEXES Function</a></p>
</li>
<li>
<p><a href="#i1008769">EXECUTE Procedure</a></p>
</li>
</ul>
<br/></div>
<!-- class="refsect4" --></div>
<!-- class="refsect3" -->
<div id="ARPLS66110" class="refsect3"><a id="i1013234"></a>
<h4 class="refsect3">OER Breakpoints</h4>
<p>Exceptions that are declared in PL/SQL programs are known as user-defined exceptions. In addition, there are Oracle Errors (OERs) that are returned from the Oracle kernel. To tie the two mechanisms together, PL/SQL provides the <code dir="ltr">exception_init</code> pragma that turns a user-defined exception into an OER, so that a PL/SQL handler may be used for it, and so that the PL/SQL engine can return OERs to the Oracle kernel. As of the current release, the only information available about an OER is its number. If two user-defined exceptions are exception_init&#39;d to the same OER, they are indistinguishable.</p>
</div>
<!-- class="refsect3" -->
<div id="ARPLS66111" class="refsect3"><a id="CEGGAECF"></a>
<h4 class="refsect3">Namespaces</h4>
<p>Program units on the server reside in different namespaces. When setting a breakpoint, specify the desired namespace.</p>
<ol>
<li>
<p><code dir="ltr">Namespace_cursor</code> contains cursors (anonymous blocks).</p>
</li>
<li>
<p><code dir="ltr">Namespace_pgkspec_or_toplevel</code> contains:</p>
<ul>
<li>
<p>Package specifications.</p>
</li>
<li>
<p>Procedures and functions that are not nested inside other packages, procedures, or functions.</p>
</li>
<li>
<p>Object types.</p>
</li>
</ul>
</li>
<li>
<p><code dir="ltr">Namespace_pkg_body</code> contains package bodies and type bodies.</p>
</li>
<li>
<p><code dir="ltr">Namespace_trigger</code> contains triggers.</p>
</li>
</ol>
</div>
<!-- class="refsect3" -->
<div id="ARPLS66112" class="refsect3"><a id="i1011935"></a>
<h4 class="refsect3">Libunit Types</h4>
<p>These values are used to disambiguate among objects in a given namespace. These constants are used in <code dir="ltr">PROGRAM_INFO</code> when Probe is giving a stack backtrace.</p>
<ul>
<li>
<p><code dir="ltr">LibunitType_cursor</code></p>
</li>
<li>
<p><code dir="ltr">LibunitType_procedure</code></p>
</li>
<li>
<p><code dir="ltr">LibunitType_function</code></p>
</li>
<li>
<p><code dir="ltr">LibunitType_package</code></p>
</li>
<li>
<p><code dir="ltr">LibunitType_package_body</code></p>
</li>
<li>
<p><code dir="ltr">LibunitType_trigger</code></p>
</li>
<li>
<p><code dir="ltr">LibunitType_Unknown</code></p>
</li>
</ul>
</div>
<!-- class="refsect3" -->
<div id="ARPLS66113" class="refsect3"><a id="i1011945"></a>
<h4 class="refsect3">Breakflags</h4>
<p>These are values to use for the <code dir="ltr">breakflags</code> parameter to <code dir="ltr">CONTINUE</code>, in order to tell Probe what events are of interest to the client. These flags may be combined.</p>
<div class="inftblinformal">
<table class="cellalignment4327" title="Values to use for the breakflags parameter to CONTINUE" summary="This table describes values to use for the breakflags parameter to CONTINUE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t11">Value</th>
<th class="cellalignment4328" id="r1c2-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t11" headers="r1c1-t11"><code dir="ltr">break_next_line</code></td>
<td class="cellalignment4329" headers="r2c1-t11 r1c2-t11">Break at next source line (step over calls)</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t11" headers="r1c1-t11"><code dir="ltr">break_any_call</code></td>
<td class="cellalignment4329" headers="r3c1-t11 r1c2-t11">Break at next source line (step into calls)</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t11" headers="r1c1-t11"><code dir="ltr">break_any_return</code></td>
<td class="cellalignment4329" headers="r4c1-t11 r1c2-t11">Break after returning from current entrypoint (skip over any entrypoints called from the current routine)</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t11" headers="r1c1-t11"><code dir="ltr">break_return</code></td>
<td class="cellalignment4329" headers="r5c1-t11 r1c2-t11">Break the next time an entrypoint gets ready to return. (This includes entrypoints called from the current one. If interpreter is running <code dir="ltr">Proc1</code>, which calls <code dir="ltr">Proc2</code>, then <code dir="ltr">break_return</code> stops at the end of <code dir="ltr">Proc2</code>.)</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t11" headers="r1c1-t11"><code dir="ltr">break_exception</code></td>
<td class="cellalignment4329" headers="r6c1-t11 r1c2-t11">Break when an exception is raised</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t11" headers="r1c1-t11"><code dir="ltr">break_handler</code></td>
<td class="cellalignment4329" headers="r7c1-t11 r1c2-t11">Break when an exception handler is executed</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t11" headers="r1c1-t11"><code dir="ltr">abort_execution</code></td>
<td class="cellalignment4329" headers="r8c1-t11 r1c2-t11">Stop execution and force an &#39;exit&#39; event as soon as <code dir="ltr">DBMS_DEBUG</code>.<code dir="ltr">CONTINUE</code> is called.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect3" -->
<div id="ARPLS66114" class="refsect3"><a id="i1011982"></a>
<h4 class="refsect3">Information Flags</h4>
<p>These are flags which may be passed as the <code dir="ltr">info_requested</code> parameter to <code dir="ltr">SYNCHRONIZE</code>, <code dir="ltr">CONTINUE</code>, and <code dir="ltr">GET_RUNTIME_INFO</code>.</p>
<div class="inftblinformal">
<table class="cellalignment4327" title="Information Flags" summary="This table describes flags which may be passed as the info_requested parameter to SYNCHRONIZE, CONTINUE, and GET_RUNTIME_INFO." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t12">Flag</th>
<th class="cellalignment4328" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t12" headers="r1c1-t12"><code dir="ltr">info_getStackDepth</code></td>
<td class="cellalignment4329" headers="r2c1-t12 r1c2-t12">Get the current depth of the stack</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t12" headers="r1c1-t12"><code dir="ltr">info_getBreakpoint</code></td>
<td class="cellalignment4329" headers="r3c1-t12 r1c2-t12">Get the breakpoint number</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t12" headers="r1c1-t12"><code dir="ltr">info_getLineinfo</code></td>
<td class="cellalignment4329" headers="r4c1-t12 r1c2-t12">Get program unit information</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect3" -->
<div id="ARPLS66115" class="refsect3"><a id="sthref3684"></a>
<h4 class="refsect3">Reasons for Suspension</h4>
<p>After <code dir="ltr">CONTINUE</code> is run, the program either runs to completion or breaks on some line.</p>
<div class="inftblinformal">
<table class="cellalignment4327" title="Reasons for Suspension" summary="This table describes what occurs when, after CONTINUE is run, the program either runs to completion or breaks on some line." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t13">Reason</th>
<th class="cellalignment4328" id="r1c2-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t13" headers="r1c1-t13"><code dir="ltr">reason_none</code></td>
<td class="cellalignment4329" headers="r2c1-t13 r1c2-t13">-</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t13" headers="r1c1-t13"><code dir="ltr">reason_interpreter_starting</code></td>
<td class="cellalignment4329" headers="r3c1-t13 r1c2-t13">Interpreter is starting</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t13" headers="r1c1-t13"><code dir="ltr">reason_breakpoint</code></td>
<td class="cellalignment4329" headers="r4c1-t13 r1c2-t13">Hit a breakpoint</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t13" headers="r1c1-t13"><code dir="ltr">reason_enter</code></td>
<td class="cellalignment4329" headers="r5c1-t13 r1c2-t13">Procedure entry</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t13" headers="r1c1-t13"><code dir="ltr">reason_return</code></td>
<td class="cellalignment4329" headers="r6c1-t13 r1c2-t13">Procedure is about to return</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t13" headers="r1c1-t13"><code dir="ltr">reason_finish</code></td>
<td class="cellalignment4329" headers="r7c1-t13 r1c2-t13">Procedure is finished</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t13" headers="r1c1-t13"><code dir="ltr">reason_line</code></td>
<td class="cellalignment4329" headers="r8c1-t13 r1c2-t13">Reached a new line</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t13" headers="r1c1-t13"><code dir="ltr">reason_interrupt</code></td>
<td class="cellalignment4329" headers="r9c1-t13 r1c2-t13">An interrupt occurred</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t13" headers="r1c1-t13"><code dir="ltr">reason_exception</code></td>
<td class="cellalignment4329" headers="r10c1-t13 r1c2-t13">An exception was raised</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t13" headers="r1c1-t13"><code dir="ltr">reason_exit</code></td>
<td class="cellalignment4329" headers="r11c1-t13 r1c2-t13">Interpreter is exiting (old form)</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t13" headers="r1c1-t13"><code dir="ltr">reason_knl_exit</code></td>
<td class="cellalignment4329" headers="r12c1-t13 r1c2-t13">Kernel is exiting</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t13" headers="r1c1-t13"><code dir="ltr">reason_handler</code></td>
<td class="cellalignment4329" headers="r13c1-t13 r1c2-t13">Start exception-handler</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t13" headers="r1c1-t13"><code dir="ltr">reason_timeout</code></td>
<td class="cellalignment4329" headers="r14c1-t13 r1c2-t13">A timeout occurred</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r15c1-t13" headers="r1c1-t13"><code dir="ltr">reason_instantiate</code></td>
<td class="cellalignment4329" headers="r15c1-t13 r1c2-t13">Instantiation block</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r16c1-t13" headers="r1c1-t13"><code dir="ltr">reason_abort</code></td>
<td class="cellalignment4329" headers="r16c1-t13 r1c2-t13">Interpreter is aborting</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect3" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="BCGHCHJD"></a>
<div id="ARPLS66116" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">Data Structures</h2>
<p>The <code dir="ltr">DBMS_DEBUG</code> package defines <code dir="ltr">RECORD</code> types and <code dir="ltr">TABLE</code> types.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BABEIFCE"></a>RECORD Types</p>
<ul>
<li>
<p><a href="#BCGGFJAE">BREAKPOINT_INFO Record Type</a></p>
</li>
<li>
<p><a href="#CEGHGGIG">PROGRAM_INFO Record Type</a></p>
</li>
<li>
<p><a href="#CEGDFJHC">RUNTIME_INFO Record Type</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3685"></a>TABLE Types</p>
<ul>
<li>
<p><a href="#BCGDJGFF">BACKTRACE_TABLE Table Type</a></p>
</li>
<li>
<p><a href="#CEGIFBBE">BREAKPOINT_TABLE Table Type</a></p>
</li>
<li>
<p><a href="#CEGBACID">INDEX_TABLE Table Type</a></p>
</li>
<li>
<p><a href="#CEGCGGEH">VC2_TABLE Table Type</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div id="ARPLS66117" class="refsect2"><a id="BCGGFJAE"></a>
<h3 class="refsect2"><a id="sthref3686"></a>BREAKPOINT_INFO Record Type</h3>
<p>This type gives information about a breakpoint, such as its current status and the program unit in which it was placed.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3687"></a>Syntax</p>
<pre dir="ltr">TYPE breakpoint_info IS RECORD (
   name        VARCHAR2(30),
   owner       VARCHAR2(30),
   dblink      VARCHAR2(30),
   line#       BINARY_INTEGER,
   libunittype BINARY_INTEGER,
   status      BINARY_INTEGER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3688"></a>Fields</p>
<div id="ARPLS66118" class="tblformal">
<p class="titleintable"><a id="sthref3689"></a><a id="sthref3690"></a>Table 53-2 BREAKPOINT_INFO Fields</p>
<table class="cellalignment4330" title="BREAKPOINT_INFO Fields" summary="This table describes the parameters of the DBMS_DEBUG.BREAKPOINT_INFO subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t14">Field</th>
<th class="cellalignment4328" id="r1c2-t14">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t14" headers="r1c1-t14">
<p><code dir="ltr">name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t14 r1c2-t14">
<p>Name of the program unit</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t14" headers="r1c1-t14">
<p><code dir="ltr">owner</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t14 r1c2-t14">
<p>Owner of the program unit</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t14" headers="r1c1-t14">
<p><code dir="ltr">dblink</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t14 r1c2-t14">
<p>Database link, if remote</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t14" headers="r1c1-t14">
<p><code dir="ltr">line#</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t14 r1c2-t14">
<p>Line number</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t14" headers="r1c1-t14">
<p><code dir="ltr">libunittype</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t14 r1c2-t14">
<p><code dir="ltr">NULL</code>, unless this is a nested procedure or function</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t14" headers="r1c1-t14">
<p><code dir="ltr">status</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t14 r1c2-t14">
<p>See <a href="#CEGGCFIF">Constants</a> for values of <code dir="ltr">breakpoint_status_*</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66119" class="refsect2"><a id="CEGHGGIG"></a>
<h3 class="refsect2"><a id="sthref3691"></a>PROGRAM_INFO Record Type</h3>
<p>This type specifies a program location. It is a line number in a program unit. This is used for stack backtraces and for setting and examining breakpoints. The read-only fields are currently ignored by Probe for breakpoint operations. They are set by Probe only for stack backtraces.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3692"></a>Syntax</p>
<pre dir="ltr">TYPE program_info IS RECORD(
    -- The following fields are used when setting a breakpoint
    namespace        BINARY_INTEGER, 
    name             VARCHAR2(30),
    owner            VARCHAR2(30),
    dblink           VARCHAR2(30),
    line#            BINARY_INTEGER,
    -- Read-only fields (set by Probe when doing a stack backtrace)
    libunittype      BINARY_INTEGER, 
    entrypointname   VARCHAR2(30));
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3693"></a>Fields</p>
<div id="ARPLS66120" class="tblformal">
<p class="titleintable"><a id="sthref3694"></a><a id="sthref3695"></a>Table 53-3 PROGRAM_INFO Fields</p>
<table class="cellalignment4330" title="PROGRAM_INFO Fields" summary="This table describes the fields of the Record Type PROGRAM_INFO and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t15">Field</th>
<th class="cellalignment4328" id="r1c2-t15">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t15" headers="r1c1-t15">
<p><code dir="ltr">namespace</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t15 r1c2-t15">
<p>See <a href="#CEGGAECF">Namespaces</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t15" headers="r1c1-t15">
<p><code dir="ltr">name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t15 r1c2-t15">
<p>Name of the program unit</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t15" headers="r1c1-t15">
<p><code dir="ltr">owner</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t15 r1c2-t15">
<p>Owner of the program unit</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t15" headers="r1c1-t15">
<p><code dir="ltr">dblink</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t15 r1c2-t15">
<p>Database link, if remote</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t15" headers="r1c1-t15">
<p><code dir="ltr">line#</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t15 r1c2-t15">
<p>Line number</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t15" headers="r1c1-t15">
<p><code dir="ltr">libunittype</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t15 r1c2-t15">
<p><code dir="ltr">A read-only field, NULL</code>, unless this is a nested procedure or function</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t15" headers="r1c1-t15">
<p><code dir="ltr">entrypointname</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t15 r1c2-t15">
<p>A read-only field, to disambiguate among objects that share the same namespace (for example, procedure and package specifications).</p>
<p>See the <a href="#i1011935">Libunit Types</a> for more information.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66121" class="refsect2"><a id="CEGDFJHC"></a>
<h3 class="refsect2"><a id="sthref3696"></a>RUNTIME_INFO Record Type</h3>
<p>This type gives context information about the running program.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3697"></a>Syntax</p>
<pre dir="ltr">TYPE runtime_info IS RECORD(
    line#            BINARY_INTEGER,
    terminated       binary_integer,
    breakpoint       binary_integer,
    stackdepth       BINARY_INTEGER,
    interpreterdepth BINARY_INTEGER,
    reason           BINARY_INTEGER, 
    program          program_info);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3698"></a>Fields</p>
<div id="ARPLS66122" class="tblformal">
<p class="titleintable"><a id="sthref3699"></a><a id="sthref3700"></a>Table 53-4 RUNTIME_INFO Fields</p>
<table class="cellalignment4330" title="RUNTIME_INFO Fields" summary="This table describes the fields of the Record Type RUNTIME_INFO and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t16">Field</th>
<th class="cellalignment4328" id="r1c2-t16">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t16" headers="r1c1-t16">
<p><code dir="ltr">line#</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t16 r1c2-t16">
<p>Duplicate of <code dir="ltr">program.line#</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t16" headers="r1c1-t16">
<p><code dir="ltr">terminated</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t16 r1c2-t16">
<p>Whether the program has terminated</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t16" headers="r1c1-t16">
<p><code dir="ltr">breakpoint</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t16 r1c2-t16">
<p>Breakpoint number</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t16" headers="r1c1-t16">
<p><code dir="ltr">stackdepth</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t16 r1c2-t16">
<p>Number of frames on the stack</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t16" headers="r1c1-t16">
<p><code dir="ltr">interpreterdepth</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t16 r1c2-t16">
<p>[A reserved field]</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t16" headers="r1c1-t16">
<p><code dir="ltr">reason</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t16 r1c2-t16">
<p>Reason for suspension</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t16" headers="r1c1-t16">
<p><code dir="ltr">program</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t16 r1c2-t16">
<p>Source location</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66123" class="refsect2"><a id="BCGDJGFF"></a>
<h3 class="refsect2">BACKTRACE_TABLE Table Type</h3>
<p>This type is used by <code dir="ltr">PRINT_BACKTRACE</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3701"></a>Syntax</p>
<pre dir="ltr">TYPE backtrace_table IS TABLE OF program_info INDEX BY BINARY_INTEGER;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66124" class="refsect2"><a id="CEGIFBBE"></a>
<h3 class="refsect2">BREAKPOINT_TABLE Table Type</h3>
<p>This type is used by <code dir="ltr">SHOW_BREAKPOINTS</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3702"></a>Syntax</p>
<pre dir="ltr">TYPE breakpoint_table IS TABLE OF breakpoint_info INDEX BY BINARY_INTEGER;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66125" class="refsect2"><a id="CEGBACID"></a>
<h3 class="refsect2">INDEX_TABLE Table Type</h3>
<p>This type is used by <code dir="ltr">GET_INDEXES</code> to return the available indexes for an indexed table.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3703"></a>Syntax</p>
<pre dir="ltr">TYPE index_table IS table of BINARY_INTEGER INDEX BY BINARY_INTEGER;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66126" class="refsect2"><a id="CEGCGGEH"></a>
<h3 class="refsect2">VC2_TABLE Table Type</h3>
<p>This type is used by <code dir="ltr">SHOW_SOURCE</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3704"></a>Syntax</p>
<pre dir="ltr">TYPE vc2_table IS TABLE OF VARCHAR2(90) INDEX BY BINARY_INTEGER;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="i997307"></a>
<div id="ARPLS66127" class="refsect1">
<h2 class="refsect1">Summary of DBMS_DEBUG Subprograms</h2>
<div id="ARPLS66128" class="tblformal">
<p class="titleintable"><a id="sthref3705"></a><a id="sthref3706"></a>Table 53-5 DBMS_DEBUG Package Subprograms</p>
<table class="cellalignment4330" title=" DBMS_DEBUG Package Subprograms" summary="This table lists the DBMS_DEBUG subprograms in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t17">Subprogram</th>
<th class="cellalignment4328" id="r1c2-t17">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t17" headers="r1c1-t17">
<p><a href="#i1007904">ATTACH_SESSION Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r2c1-t17 r1c2-t17">
<p>Notifies the debug session about the target debugID</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t17" headers="r1c1-t17">
<p><a href="#i1007908">CONTINUE Function</a></p>
</td>
<td class="cellalignment4329" headers="r3c1-t17 r1c2-t17">
<p>Continues execution of the target program</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t17" headers="r1c1-t17">
<p><a href="#CEGCBFAE">DEBUG_OFF Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r4c1-t17 r1c2-t17">
<p>Turns debug-mode off</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t17" headers="r1c1-t17">
<p><a href="#i1008030">DEBUG_ON Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r5c1-t17 r1c2-t17">
<p>Turns debug-mode on</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t17" headers="r1c1-t17">
<p><a href="#i1008592">DELETE_BREAKPOINT Function</a></p>
</td>
<td class="cellalignment4329" headers="r6c1-t17 r1c2-t17">
<p>Deletes a breakpoint</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t17" headers="r1c1-t17">
<p><a href="#i1010019">DELETE_OER_BREAKPOINT Function</a></p>
</td>
<td class="cellalignment4329" headers="r7c1-t17 r1c2-t17">
<p>Deletes an OER breakpoint</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t17" headers="r1c1-t17">
<p><a href="#i1008597">DETACH_SESSION Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r8c1-t17 r1c2-t17">
<p>Stops debugging the target program</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t17" headers="r1c1-t17">
<p><a href="#i1008314">DISABLE_BREAKPOINT Function</a></p>
</td>
<td class="cellalignment4329" headers="r9c1-t17 r1c2-t17">
<p>Disables a breakpoint</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t17" headers="r1c1-t17">
<p><a href="#i1008609">ENABLE_BREAKPOINT Function</a></p>
</td>
<td class="cellalignment4329" headers="r10c1-t17 r1c2-t17">
<p>Activates an existing breakpoint</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t17" headers="r1c1-t17">
<p><a href="#i1008769">EXECUTE Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r11c1-t17 r1c2-t17">
<p>Executes SQL or PL/SQL in the target session</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t17" headers="r1c1-t17">
<p><a href="#i1008834">GET_INDEXES Function</a></p>
</td>
<td class="cellalignment4329" headers="r12c1-t17 r1c2-t17">
<p>Returns the set of indexes for an indexed table</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t17" headers="r1c1-t17">
<p><a href="#i1012592">GET_MORE_SOURCE Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r13c1-t17 r1c2-t17">
<p>Provides additional source in the event of buffer overflow when using SHOW_SOURCE</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t17" headers="r1c1-t17">
<p><a href="#i1012851">GET_LINE_MAP Function</a></p>
</td>
<td class="cellalignment4329" headers="r14c1-t17 r1c2-t17">
<p>Returns information about line numbers in a program unit</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r15c1-t17" headers="r1c1-t17">
<p><a href="#i1010186">GET_RUNTIME_INFO Function</a></p>
</td>
<td class="cellalignment4329" headers="r15c1-t17 r1c2-t17">
<p>Returns information about the current program</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r16c1-t17" headers="r1c1-t17">
<p><a href="#i1012253">GET_TIMEOUT_BEHAVIOUR Function</a></p>
</td>
<td class="cellalignment4329" headers="r16c1-t17 r1c2-t17">
<p>Returns the current timeout behavior</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r17c1-t17" headers="r1c1-t17">
<p><a href="#i1009873">GET_VALUE Function</a></p>
</td>
<td class="cellalignment4329" headers="r17c1-t17 r1c2-t17">
<p>Gets a value from the currently-running program</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r18c1-t17" headers="r1c1-t17">
<p><a href="#i1009075">INITIALIZE Function</a></p>
</td>
<td class="cellalignment4329" headers="r18c1-t17 r1c2-t17">
<p>Sets debugID in target session</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r19c1-t17" headers="r1c1-t17">
<p><a href="#i1009706">PING Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r19c1-t17 r1c2-t17">
<p>Pings the target session to prevent it from timing out</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r20c1-t17" headers="r1c1-t17">
<p><a href="#i1009079">PRINT_BACKTRACE Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r20c1-t17 r1c2-t17">
<p>Prints a stack backtrace</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r21c1-t17" headers="r1c1-t17">
<p><a href="#i1009499">PRINT_INSTANTIATIONS Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r21c1-t17 r1c2-t17">
<p>Prints a stack backtrace</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r22c1-t17" headers="r1c1-t17">
<p><a href="#CEGHCGCA">PROBE_VERSION Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r22c1-t17 r1c2-t17">
<p>Returns the version number of <code dir="ltr">DBMS_DEBUG</code> on the server</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r23c1-t17" headers="r1c1-t17">
<p><a href="#i1009302">SELF_CHECK Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r23c1-t17 r1c2-t17">
<p>Performs an internal consistency check</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r24c1-t17" headers="r1c1-t17">
<p><a href="#i1009232">SET_BREAKPOINT Function</a></p>
</td>
<td class="cellalignment4329" headers="r24c1-t17 r1c2-t17">
<p>Sets a breakpoint in a program unit</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r25c1-t17" headers="r1c1-t17">
<p><a href="#CEGCBGDG">SET_OER_BREAKPOINT Function</a></p>
</td>
<td class="cellalignment4329" headers="r25c1-t17 r1c2-t17">
<p>Sets an OER breakpoint</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r26c1-t17" headers="r1c1-t17">
<p><a href="#i997626">SET_TIMEOUT Function</a></p>
</td>
<td class="cellalignment4329" headers="r26c1-t17 r1c2-t17">
<p>Sets the timeout value</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r27c1-t17" headers="r1c1-t17">
<p><a href="#i1009844">SET_TIMEOUT_BEHAVIOUR Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r27c1-t17 r1c2-t17">
<p>Tells Probe what to do with the target session when a timeout occurs</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r28c1-t17" headers="r1c1-t17">
<p><a href="#i1009439">SET_VALUE Function</a></p>
</td>
<td class="cellalignment4329" headers="r28c1-t17 r1c2-t17">
<p>Sets a value in the currently-running program</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r29c1-t17" headers="r1c1-t17">
<p><a href="#i1009505">SHOW_BREAKPOINTS Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r29c1-t17 r1c2-t17">
<p>Returns a listing of the current breakpoints</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r30c1-t17" headers="r1c1-t17">
<p><a href="#i1010858">SHOW_FRAME_SOURCE Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r30c1-t17 r1c2-t17">
<p>Fetches the frame source</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r31c1-t17" headers="r1c1-t17">
<p><a href="#i997814">SHOW_SOURCE Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r31c1-t17 r1c2-t17">
<p>Fetches program source</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r32c1-t17" headers="r1c1-t17">
<p><a href="#i1009620">SYNCHRONIZE Function</a></p>
</td>
<td class="cellalignment4329" headers="r32c1-t17 r1c2-t17">
<p>Waits for program to start running</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r33c1-t17" headers="r1c1-t17">
<p><a href="#i998630">TARGET_PROGRAM_RUNNING Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r33c1-t17 r1c2-t17">
<p>Returns <code dir="ltr">TRUE</code> if the target session is currently executing a stored procedure, or <code dir="ltr">FALSE</code> if it is not</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="ARPLS66129" class="refsect2"><a id="i1007904"></a>
<h3 class="refsect2"><a id="sthref3707"></a>ATTACH_SESSION Procedure</h3>
<p>This procedure notifies the debug session about the target program.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3708"></a>Syntax</p>
<pre dir="ltr">DBMS_DEBUG.ATTACH_SESSION (
   debug_session_id  IN VARCHAR2,
   diagnostics       IN BINARY_INTEGER := 0); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3709"></a>Parameters</p>
<div id="ARPLS66130" class="tblformal">
<p class="titleintable"><a id="sthref3710"></a><a id="sthref3711"></a>Table 53-6 ATTACH_SESSION Procedure Parameters</p>
<table class="cellalignment4330" title="ATTACH_SESSION Procedure Parameters" summary="This table describes the parameters of DBMS_DEBUG.ATTACH_SESSION." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t18">Parameter</th>
<th class="cellalignment4328" id="r1c2-t18">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t18" headers="r1c1-t18">
<p><code dir="ltr">debug_session_id</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t18 r1c2-t18">
<p>Debug ID from a call to <code dir="ltr">INITIALIZE</code> in target session</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t18" headers="r1c1-t18">
<p><code dir="ltr">diagnostics</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t18 r1c2-t18">
<p>Generate diagnostic output if nonzero</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66131" class="refsect2"><a id="i1007908"></a>
<h3 class="refsect2"><a id="sthref3712"></a>CONTINUE Function</h3>
<p>This function passes the given breakflags (a mask of the events that are of interest) to Probe in the target process. It tells Probe to continue execution of the target process, and it waits until the target process runs to completion or signals an event.</p>
<p>If <code dir="ltr">info_requested</code> is not <code dir="ltr">NULL</code>, then calls <code dir="ltr">GET_RUNTIME_INFO</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3713"></a>Syntax</p>
<pre dir="ltr">DBMS_DEBUG.CONTINUE (
   run_info       IN OUT runtime_info,
   breakflags     IN     BINARY_INTEGER,
   info_requested IN     BINARY_INTEGER := NULL)
  RETURN BINARY_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3714"></a>Parameters</p>
<div id="ARPLS66132" class="tblformal">
<p class="titleintable"><a id="sthref3715"></a><a id="sthref3716"></a>Table 53-7 CONTINUE Function Parameters</p>
<table class="cellalignment4330" title="CONTINUE Function Parameters" summary="This table describes the parameters of DBMS_DEBUG.CONTINUE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t19">Parameter</th>
<th class="cellalignment4328" id="r1c2-t19">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t19" headers="r1c1-t19">
<p><code dir="ltr">run_info</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t19 r1c2-t19">
<p>Information about the state of the program</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t19" headers="r1c1-t19">
<p><code dir="ltr">breakflags</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t19 r1c2-t19">
<p>Mask of events that are of interest (see <a href="#i1011945">&#34;Breakflags&#34;</a> )</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t19" headers="r1c1-t19">
<p><code dir="ltr">info_requested</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t19 r1c2-t19">
<p>Which information should be returned in <code dir="ltr">run_info</code> when the program stops (see <a href="#i1011982">&#34;Information Flags&#34;</a>)</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3717"></a>Return Values</p>
<div id="ARPLS66133" class="tblformal">
<p class="titleintable"><a id="sthref3718"></a><a id="sthref3719"></a>Table 53-8 CONTINUE Function Return Values</p>
<table class="cellalignment4330" title="CONTINUE Function Return Values" summary="This table describes Return Values for the CONTINUE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t20">Return</th>
<th class="cellalignment4328" id="r1c2-t20">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t20" headers="r1c1-t20">
<p><code dir="ltr">success</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t20 r1c2-t20">&nbsp;</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t20" headers="r1c1-t20">
<p><code dir="ltr">error_timeout</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t20 r1c2-t20">
<p>Timed out before the program started running</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t20" headers="r1c1-t20">
<p><code dir="ltr">error_communication</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t20 r1c2-t20">
<p>Other communication error</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66134" class="refsect2"><a id="CEGCBFAE"></a>
<h3 class="refsect2">DEBUG_OFF Procedure</h3>
<div class="infoboxnotewarn">
<p class="notep1">Caution:</p>
<p class="warnsp">There must be a debug session waiting if immediate is <code dir="ltr">TRUE</code>.</p>
</div>
<p>This procedure notifies the target session that debugging should no longer take place in that session. It is not necessary to call this function before ending the session.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3720"></a>Syntax</p>
<pre dir="ltr">DBMS_DEBUG.DEBUG_OFF;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3721"></a>Usage Notes</p>
<p>The server does not handle this entrypoint specially. Therefore, it attempts to debug this entrypoint.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66135" class="refsect2"><a id="i1008030"></a>
<h3 class="refsect2"><a id="sthref3722"></a>DEBUG_ON Procedure</h3>
<p>This procedure marks the target session so that all PL/SQL is run in debug mode. This must be done before any debugging can take place.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3723"></a>Syntax</p>
<pre dir="ltr">DBMS_DEBUG.DEBUG_ON (
   no_client_side_plsql_engine BOOLEAN := TRUE,
   immediate                   BOOLEAN := FALSE); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3724"></a>Parameters</p>
<div id="ARPLS66136" class="tblformal">
<p class="titleintable"><a id="sthref3725"></a><a id="sthref3726"></a>Table 53-9 DEBUG_ON Procedure Parameters</p>
<table class="cellalignment4330" title="DEBUG_ON Procedure Parameters" summary="This table describes the parameters of DBMS_DEBUG.DEBUG_ON." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t22">Parameter</th>
<th class="cellalignment4328" id="r1c2-t22">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t22" headers="r1c1-t22">
<p><code dir="ltr">no_client_side_plsql_engine</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t22 r1c2-t22">
<p>Should be left to its default value unless the debugging session is taking place from a client-side PL/SQL engine</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t22" headers="r1c1-t22">
<p><code dir="ltr">immediate</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t22 r1c2-t22">
<p>If this is <code dir="ltr">TRUE</code>, then the interpreter immediately switches itself into debug-mode, instead of continuing in regular mode for the duration of the call.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66137" class="refsect2"><a id="i1008592"></a>
<h3 class="refsect2"><a id="sthref3727"></a>DELETE_BREAKPOINT Function</h3>
<p>This function deletes a breakpoint.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3728"></a>Syntax</p>
<pre dir="ltr">DBMS_DEBUG.DELETE_BREAKPOINT (
   breakpoint IN BINARY_INTEGER)
  RETURN BINARY_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3729"></a>Parameters</p>
<div id="ARPLS66138" class="tblformal">
<p class="titleintable"><a id="sthref3730"></a><a id="sthref3731"></a>Table 53-10 DELETE_BREAKPOINT Function Parameters</p>
<table class="cellalignment4330" title="DELETE_BREAKPOINT Function Parameters" summary="This table describes the parameters of DBMS_DEBUG.DELETE_BREAKPOINT." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t23">Parameter</th>
<th class="cellalignment4328" id="r1c2-t23">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t23" headers="r1c1-t23">
<p><code dir="ltr">breakpoint</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t23 r1c2-t23">
<p>Breakpoint number from a previous call to <code dir="ltr">SET_BREAKPOINT</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3732"></a>Return Values</p>
<div id="ARPLS66139" class="tblformal">
<p class="titleintable"><a id="sthref3733"></a><a id="sthref3734"></a>Table 53-11 DELETE_BREAKPOINT Function Return Values</p>
<table class="cellalignment4330" title="DELETE_BREAKPOINT Function Return Values" summary="This table describes Return Values for the DELETE_BREAKPOINT." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t24">Return</th>
<th class="cellalignment4328" id="r1c2-t24">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t24" headers="r1c1-t24">
<p><code dir="ltr">success</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t24 r1c2-t24">&nbsp;</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t24" headers="r1c1-t24">
<p><code dir="ltr">error_no_such_breakpt</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t24 r1c2-t24">
<p>No such breakpoint exists</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t24" headers="r1c1-t24">
<p><code dir="ltr">error_idle_breakpt</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t24 r1c2-t24">
<p>Cannot delete an unused breakpoint</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t24" headers="r1c1-t24">
<p><code dir="ltr">error_stale_breakpt</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t24 r1c2-t24">
<p>The program unit was redefined since the breakpoint was set</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66140" class="refsect2"><a id="i1010019"></a>
<h3 class="refsect2"><a id="sthref3735"></a>DELETE_OER_BREAKPOINT Function</h3>
<p>This function deletes an OER breakpoint.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3736"></a>Syntax</p>
<pre dir="ltr">DBMS_DEBUG.DELETE_OER_BREAKPOINT (
   oer  IN PLS_INTEGER) 
RETURN PLS_INTEGER; 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3737"></a>Parameters</p>
<div id="ARPLS66141" class="tblformal">
<p class="titleintable"><a id="sthref3738"></a><a id="sthref3739"></a>Table 53-12 DELETE_OER_BREAKPOINT Function Parameters</p>
<table class="cellalignment4330" title="DELETE_OER_BREAKPOINT Function Parameters" summary="This table describes the parameters of DBMS_DEBUG.DELETE_OER_BREAKPOINT." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t25">Parameter</th>
<th class="cellalignment4328" id="r1c2-t25">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t25" headers="r1c1-t25">
<p><code dir="ltr">oer</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t25 r1c2-t25">
<p>The OER (positive 4-byte number) to delete</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66142" class="refsect2"><a id="i1008597"></a>
<h3 class="refsect2"><a id="sthref3740"></a>DETACH_SESSION Procedure</h3>
<p>This procedure stops debugging the target program. This procedure may be called at any time, but it does not notify the target session that the debug session is detaching itself, and it does not terminate execution of the target session. Therefore, care should be taken to ensure that the target session does not hang itself.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3741"></a>Syntax</p>
<pre dir="ltr">DBMS_DEBUG.DETACH_SESSION;  
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66143" class="refsect2"><a id="i1008314"></a>
<h3 class="refsect2"><a id="sthref3742"></a>DISABLE_BREAKPOINT Function</h3>
<p>This function makes an existing breakpoint inactive but leaves it in place.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3743"></a>Syntax</p>
<pre dir="ltr">DBMS_DEBUG.DISABLE_BREAKPOINT (
   breakpoint IN BINARY_INTEGER)
  RETURN BINARY_INTEGER; 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3744"></a>Parameters</p>
<div id="ARPLS66144" class="tblformal">
<p class="titleintable"><a id="sthref3745"></a><a id="sthref3746"></a>Table 53-13 DISABLE_BREAKPOINT Function Parameters</p>
<table class="cellalignment4330" title="DISABLE_BREAKPOINT Function Parameters" summary="This table describes the parameters of DBMS_DEBUG.DISABLE_BREAKPOINT." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t26">Parameter</th>
<th class="cellalignment4328" id="r1c2-t26">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t26" headers="r1c1-t26">
<p><code dir="ltr">breakpoint</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t26 r1c2-t26">
<p>Breakpoint number from a previous call to <code dir="ltr">SET_BREAKPOINT</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3747"></a>Return Values</p>
<div id="ARPLS66145" class="tblformal">
<p class="titleintable"><a id="sthref3748"></a><a id="sthref3749"></a>Table 53-14 DISABLE_BREAKPOINT Function Return Values</p>
<table class="cellalignment4330" title="DISABLE_BREAKPOINT Function Return Values" summary="This table describes Return Values for the DISABLE_BREAKPOINT." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t27">Returns</th>
<th class="cellalignment4328" id="r1c2-t27">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t27" headers="r1c1-t27">
<p><code dir="ltr">success</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t27 r1c2-t27">&nbsp;</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t27" headers="r1c1-t27">
<p><code dir="ltr">error_no_such_breakpt</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t27 r1c2-t27">
<p>No such breakpoint exists</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t27" headers="r1c1-t27">
<p><code dir="ltr">error_idle_breakpt</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t27 r1c2-t27">
<p>Cannot disable an unused breakpoint</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66146" class="refsect2"><a id="i1008609"></a>
<h3 class="refsect2"><a id="sthref3750"></a>ENABLE_BREAKPOINT Function</h3>
<p>This function is the reverse of disabling. This enables a previously disabled breakpoint.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3751"></a>Syntax</p>
<pre dir="ltr">DBMS_DEBUG.ENABLE_BREAKPOINT (
   breakpoint IN BINARY_INTEGER)
  RETURN BINARY_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3752"></a>Parameters</p>
<div id="ARPLS66147" class="tblformal">
<p class="titleintable"><a id="sthref3753"></a><a id="sthref3754"></a>Table 53-15 ENABLE_BREAKPOINT Function Parameters</p>
<table class="cellalignment4330" title="ENABLE_BREAKPOINT Function Parameters" summary="This table describes the parameters of DBMS_DEBUG.ENABLE_BREAKPOINT." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t28">Parameter</th>
<th class="cellalignment4328" id="r1c2-t28">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t28" headers="r1c1-t28">
<p><code dir="ltr">breakpoint</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t28 r1c2-t28">
<p>Breakpoint number from a previous call to <code dir="ltr">SET_BREAKPOINT</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3755"></a>Return Values</p>
<div id="ARPLS66148" class="tblformal">
<p class="titleintable"><a id="sthref3756"></a><a id="sthref3757"></a>Table 53-16 ENABLE_BREAKPOINT Function Return Values</p>
<table class="cellalignment4330" title="ENABLE_BREAKPOINT Function Return Values" summary="This table describes Return Values for the ENABLE_BREAKPOINT." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t29">Return</th>
<th class="cellalignment4328" id="r1c2-t29">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t29" headers="r1c1-t29">
<p><code dir="ltr">success</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t29 r1c2-t29">
<p>Success</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t29" headers="r1c1-t29">
<p><code dir="ltr">error_no_such_breakpt</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t29 r1c2-t29">
<p>No such breakpoint exists</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t29" headers="r1c1-t29">
<p><code dir="ltr">error_idle_breakpt</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t29 r1c2-t29">
<p>Cannot enable an unused breakpoint</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66149" class="refsect2"><a id="i1008769"></a>
<h3 class="refsect2"><a id="sthref3758"></a>EXECUTE Procedure</h3>
<p>This procedure executes SQL or PL/SQL code in the target session. The target session is assumed to be waiting at a breakpoint (or other event). The call to <code dir="ltr">DBMS_DEBUG</code>.<code dir="ltr">EXECUTE</code> occurs in the debug session, which then asks the target session to execute the code.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3759"></a>Syntax</p>
<pre dir="ltr">DBMS_DEBUG.EXECUTE (
   what         IN VARCHAR2,
   frame#       IN BINARY_INTEGER,
   bind_results IN BINARY_INTEGER,
   results      IN OUT NOCOPY dbms_debug_vc2coll,
   errm         IN OUT NOCOPY VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3760"></a>Parameters</p>
<div id="ARPLS66150" class="tblformal">
<p class="titleintable"><a id="sthref3761"></a><a id="sthref3762"></a>Table 53-17 EXECUTE Procedure Parameters</p>
<table class="cellalignment4330" title="EXECUTE Procedure Parameters" summary="This table describes the parameters of DBMS_DEBUG.EXECUTE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t30">Parameter</th>
<th class="cellalignment4328" id="r1c2-t30">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t30" headers="r1c1-t30">
<p><code dir="ltr">what</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t30 r1c2-t30">
<p>SQL or PL/SQL source to execute</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t30" headers="r1c1-t30">
<p><code dir="ltr">frame#</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t30 r1c2-t30">
<p>The context in which to execute the code. Only -1 (global context) is supported at this time.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t30" headers="r1c1-t30">
<p><code dir="ltr">bind_results</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t30 r1c2-t30">
<p>Whether the source wants to bind to <code dir="ltr">results</code> in order to return values from the target session:</p>
<p>0 = No</p>
<p>1 = Yes</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t30" headers="r1c1-t30">
<p><code dir="ltr">results</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t30 r1c2-t30">
<p>Collection in which to place results, if <code dir="ltr">bind_results</code> is not 0</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t30" headers="r1c1-t30">
<p><code dir="ltr">errm</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t30 r1c2-t30">
<p>Error message, if an error occurred; otherwise, <code dir="ltr">NULL</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3763"></a>Examples</p>
<p class="subhead2"><a id="ARPLS66151"></a>Example 1</p>
<p>This example executes a SQL statement. It returns no results.</p>
<pre dir="ltr">DECLARE
   coll sys.dbms_debug_vc2coll; -- results (unused)
   errm VARCHAR2(100);          
BEGIN
   dbms_debug.execute(&#39;insert into emp(ename,empno,deptno) &#39; ||
                      &#39;values(&#39;&#39;LJE&#39;&#39;, 1, 1)&#39;,
                      -1, 0, coll, errm);
END;
</pre>
<p class="subhead2"><a id="ARPLS66152"></a>Example 2</p>
<p>This example executes a PL/SQL block, and it returns no results. The block is an autonomous transaction, which means that the value inserted into the table becomes visible in the debug session.</p>
<pre dir="ltr">DECLARE
   coll sys.dbms_debug_vc2coll;
   errm VARCHAR2(100);
BEGIN
   dbms_debug.execute(
       &#39;DECLARE PRAGMA autonomous_transaction; &#39; ||
       &#39;BEGIN &#39; ||
       &#39;   insert into emp(ename, empno, deptno) &#39; ||
       &#39;   values(&#39;&#39;LJE&#39;&#39;, 1, 1); &#39; ||
       &#39; COMMIT; &#39; ||
       &#39;END;&#39;,
       -1, 0, coll, errm);
END;
</pre>
<p class="subhead2"><a id="ARPLS66153"></a>Example 3</p>
<p>This example executes a PL/SQL block, and it returns some results.</p>
<pre dir="ltr">DECLARE
   coll sys.dbms_debug_vc2coll;
   errm VARCHAR2(100);
BEGIN
   dbms_debug.execute(
      &#39;DECLARE &#39; ||
      &#39;   pp SYS.dbms_debug_vc2coll := SYS.dbms_debug_vc2coll(); &#39; ||
      &#39;   x  PLS_INTEGER; &#39; ||
      &#39;   i  PLS_INTEGER := 1; &#39; ||
      &#39;BEGIN &#39; ||
      &#39;   SELECT COUNT(*) INTO x FROM emp; &#39; ||
      &#39;   pp.EXTEND(x * 6); &#39; ||
      &#39;   FOR c IN (SELECT * FROM emp) LOOP &#39; ||
      &#39;      pp(i) := &#39;&#39;Ename: &#39;&#39; || c.ename; i := i+1; &#39; ||
      &#39;      pp(i) := &#39;&#39;Empno: &#39;&#39; || c.empno; i := i+1; &#39; ||
      &#39;      pp(i) := &#39;&#39;Job:   &#39;&#39; || c.job;   i := i+1; &#39; ||
      &#39;      pp(i) := &#39;&#39;Mgr:   &#39;&#39; || c.mgr;   i := i+1; &#39; ||
      &#39;      pp(i) := &#39;&#39;Sal:   &#39;&#39; || c.sal;   i := i+1; &#39; ||
      &#39;      pp(i) := null;                   i := i+1; &#39; ||
      &#39;   END LOOP; &#39; ||
      &#39;   :1 := pp;&#39; ||
      &#39;END;&#39;,
       -1, 1, coll, errm);
   each := coll.FIRST;
   WHILE (each IS NOT NULL) LOOP
      dosomething(coll(each));
      each := coll.NEXT(each);
   END LOOP;
END;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66154" class="refsect2"><a id="i1008834"></a>
<h3 class="refsect2"><a id="sthref3764"></a>GET_INDEXES Function</h3>
<p>Given a name of a variable or parameter, this function returns the set of its indexes, if it is an indexed table. An error is returned if it is not an indexed table.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3765"></a>Syntax</p>
<pre dir="ltr">DBMS_DEBUG.GET_INDEXES (
   varname   IN  VARCHAR2,
   frame#    IN  BINARY_INTEGER,
   handle    IN  program_info,
   entries   OUT index_table) 
RETURN BINARY_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3766"></a>Parameters</p>
<div id="ARPLS66155" class="tblformal">
<p class="titleintable"><a id="sthref3767"></a><a id="sthref3768"></a>Table 53-18 GET_INDEXES Function Parameters</p>
<table class="cellalignment4330" title="GET_INDEXES Function Parameters" summary="This table describes the parameters of DBMS_DEBUG.GET_INDEXES." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t31">Parameter</th>
<th class="cellalignment4328" id="r1c2-t31">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t31" headers="r1c1-t31">
<p><code dir="ltr">varname</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t31 r1c2-t31">
<p>Name of the variable to get index information about</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t31" headers="r1c1-t31">
<p><code dir="ltr">frame#</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t31 r1c2-t31">
<p>Number of frame in which the variable or parameter resides; <code dir="ltr">NULL</code> for a package variable</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t31" headers="r1c1-t31">
<p><code dir="ltr">handle</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t31 r1c2-t31">
<p>Package description, if object is a package variable</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t31" headers="r1c1-t31">
<p><code dir="ltr">entries</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t31 r1c2-t31">
<p>1-based table of the indexes: if non-<code dir="ltr">NULL</code>, then <code dir="ltr">entries</code>(1) contains the first index of the table, <code dir="ltr">entries</code>(2) contains the second index, and so on.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3769"></a>Return Values</p>
<div id="ARPLS66156" class="tblformal">
<p class="titleintable"><a id="sthref3770"></a><a id="sthref3771"></a>Table 53-19 GET_INDEXES Function Return Values</p>
<table class="cellalignment4330" title="GET_INDEXES Function Return Values" summary="This table describes Return Values for the GET_INDEXES subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t32">Return</th>
<th class="cellalignment4328" id="r1c2-t32">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t32" headers="r1c1-t32">
<p><code dir="ltr">error_no_such_object</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t32 r1c2-t32">
<p>One of the following:</p>
<p>- The package does not exist</p>
<p>- The package is not instantiated</p>
<p>- The user does not have privileges to debug the package</p>
<p>- The object does not exist in the package</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66157" class="refsect2"><a id="i1012592"></a>
<h3 class="refsect2"><a id="sthref3772"></a>GET_MORE_SOURCE Procedure</h3>
<p>When source does not fit in the buffer provided by that version of the <a href="#i997814">SHOW_SOURCE Procedures</a> which produce a formatted buffer, this procedure provides additional source.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3773"></a>Syntax</p>
<pre dir="ltr">DBMS_DEBUG.GET_MORE_SOURCE (
   buffer          IN OUT VARCHAR2,
   buflen          IN BINARY_INTEGER,
   piece#          IN BINARY_INTEGER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3774"></a>Parameters</p>
<div id="ARPLS66158" class="tblformal">
<p class="titleintable"><a id="sthref3775"></a><a id="sthref3776"></a>Table 53-20 GET_MORE_SOURCE Procedure Parameters</p>
<table class="cellalignment4330" title="GET_MORE_SOURCE Procedure Parameters" summary="This table describes the parameters of DBMS_DEBUG.GET_MORE_SOURCE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t33">Parameter</th>
<th class="cellalignment4328" id="r1c2-t33">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t33" headers="r1c1-t33">
<p><code dir="ltr">buffer</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t33 r1c2-t33">
<p>The buffer</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t33" headers="r1c1-t33">
<p><code dir="ltr">buflen</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t33 r1c2-t33">
<p>The length of the buffer</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t33" headers="r1c1-t33">
<p><code dir="ltr">piece#</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t33 r1c2-t33">
<p>A value between 2 and the value returned in the parameter pieces from the call to the relevant version of the <a href="#i997814">SHOW_SOURCE Procedures</a></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3777"></a>Usage Notes</p>
<p>This procedure should be called only after the version of SHOW_SOURCE that returns a formatted buffer.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66159" class="refsect2"><a id="i1012851"></a>
<h3 class="refsect2"><a id="sthref3778"></a>GET_LINE_MAP Function</h3>
<p>This function finds line and entrypoint information about a program so that a debugger can determine the source lines at which it is possible to place breakpoints.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3779"></a>Syntax</p>
<pre dir="ltr">DBMS_DEBUG.GET_LINE_MAP (
   program                IN   program_info,
   maxline                OUT  BINARY_INTEGER,
   number_of_entry_points OUT  BINARY_INTEGER,
   linemap                OUT  RAW)
  RETURN BINARY_INTEGER; 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3780"></a>Parameters</p>
<div id="ARPLS66160" class="tblformal">
<p class="titleintable"><a id="sthref3781"></a><a id="sthref3782"></a>Table 53-21 GET_LINE_MAP Function Parameters</p>
<table class="cellalignment4330" title="GET_LINE_MAP Function Parameters" summary="This table describes the parameters of DBMS_DEBUG.GET_LINE_MAP." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t34">Parameter</th>
<th class="cellalignment4328" id="r1c2-t34">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t34" headers="r1c1-t34">
<p><code dir="ltr">program</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t34 r1c2-t34">
<p>A top-level program unit (procedure / package / function / package body, and so on). Its <code dir="ltr">Namespace</code>, <code dir="ltr">Name</code>, and <code dir="ltr">Owner</code> fields must be initialized, the remaining fields are ignored.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t34" headers="r1c1-t34">
<p><code dir="ltr">maxline</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t34 r1c2-t34">
<p>The largest source code line number in &#39;program&#39;</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t34" headers="r1c1-t34">
<p><code dir="ltr">number_of_entry_points</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t34 r1c2-t34">
<p>The number of subprograms in &#39;program&#39;</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t34" headers="r1c1-t34">
<p><code dir="ltr">linemap</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t34 r1c2-t34">
<p>A bitmap representing the executable lines of &#39;program&#39;. If line number N is executable, bit number N MOD 8 will be set to 1 at linemap position N / 8. The length of returned linemap is either <code dir="ltr">maxline</code> divided by 8 (plus one if <code dir="ltr">maxline</code> MOD 8 is not zero) or 32767 in the unlikely case of <code dir="ltr">maxline</code> being larger than 32767 * 8.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3783"></a>Return Values</p>
<div id="ARPLS66161" class="tblformal">
<p class="titleintable"><a id="sthref3784"></a><a id="sthref3785"></a>Table 53-22 GET_LINE_MAP Function Return Values</p>
<table class="cellalignment4330" title="GET_LINE_MAP Function Return Values" summary="This table describes Return Values for the GET_LINE_MAP subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t35">Return</th>
<th class="cellalignment4328" id="r1c2-t35">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t35" headers="r1c1-t35">
<p><code dir="ltr">success</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t35 r1c2-t35">
<p>A successful completion</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t35" headers="r1c1-t35">
<p><code dir="ltr">error_no_debug_info</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t35 r1c2-t35">
<p>The program unit exists, but has no debug info</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t35" headers="r1c1-t35">
<p><code dir="ltr">error_bad_handle</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t35 r1c2-t35">
<p>No such program unit exists</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66162" class="refsect2"><a id="i1010186"></a>
<h3 class="refsect2"><a id="sthref3786"></a>GET_RUNTIME_INFO Function</h3>
<p>This function returns information about the current program. It is only needed if the <code dir="ltr">info_requested</code> parameter to <code dir="ltr">SYNCHRONIZE</code> or <code dir="ltr">CONTINUE</code> was set to <code dir="ltr">0</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This is currently only used by client-side PL/SQL.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3787"></a>Syntax</p>
<pre dir="ltr">DBMS_DEBUG.GET_RUNTIME_INFO (
   info_requested  IN  BINARY_INTEGER,
   run_info        OUT runtime_info)
  RETURN BINARY_INTEGER; 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3788"></a>Parameters</p>
<div id="ARPLS66163" class="tblformal">
<p class="titleintable"><a id="sthref3789"></a><a id="sthref3790"></a>Table 53-23 GET_RUNTIME_INFO Function Parameters</p>
<table class="cellalignment4330" title="GET_RUNTIME_INFO Function Parameters" summary="This table describes the parameters of DBMS_DEBUG.GET_RUNTIME_INFO." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t37">Parameter</th>
<th class="cellalignment4328" id="r1c2-t37">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t37" headers="r1c1-t37">
<p><code dir="ltr">info_requested</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t37 r1c2-t37">
<p>Which information should be returned in <code dir="ltr">run_info</code> when the program stops (see <a href="#i1011982">&#34;Information Flags&#34;</a>)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t37" headers="r1c1-t37">
<p><code dir="ltr">run_info</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t37 r1c2-t37">
<p>Information about the state of the program</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66164" class="refsect2"><a id="i1012253"></a>
<h3 class="refsect2"><a id="sthref3791"></a>GET_TIMEOUT_BEHAVIOUR Function</h3>
<p>This procedure returns the current timeout behavior. This call is made in the target session.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3792"></a>Syntax</p>
<pre dir="ltr">DBMS_DEBUG.GET_TIMEOUT_BEHAVIOUR
 RETURN BINARY_INTEGER; 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3793"></a>Parameters</p>
<div id="ARPLS66165" class="tblformal">
<p class="titleintable"><a id="sthref3794"></a><a id="sthref3795"></a>Table 53-24 GET_TIMEOUT_BEHAVIOUR Function Parameters</p>
<table class="cellalignment4330" title="GET_TIMEOUT_BEHAVIOUR Function Parameters" summary="This table describes the parameters of DBMS_DEBUG.GET_TIMEOUT_BEHAVIOUR." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t38">Parameter</th>
<th class="cellalignment4328" id="r1c2-t38">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t38" headers="r1c1-t38">
<p><code dir="ltr">oer</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t38 r1c2-t38">
<p>The OER (a 4-byte positive number)</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3796"></a>Return Values</p>
<div id="ARPLS66166" class="tblformal">
<p class="titleintable"><a id="sthref3797"></a><a id="sthref3798"></a>Table 53-25 GET_TIMEOUT_BEHAVIOUR Function Return Values</p>
<table class="cellalignment4330" title="GET_TIMEOUT_BEHAVIOUR Function Return Values" summary="This table describes Return Values for the GET_TIMEOUT_BEHAVIOUR subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t39">Return</th>
<th class="cellalignment4328" id="r1c2-t39">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t39" headers="r1c1-t39">
<p><code dir="ltr">success</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t39 r1c2-t39">
<p>A successful completion</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3799"></a>Information Flags</p>
<pre dir="ltr">info_getOerInfo CONSTANT PLS_INTEGER:= 32; 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3800"></a>Usage Notes</p>
<p>Less functionality is supported on OER breakpoints than on code breakpoints. In particular, note that:</p>
<ul>
<li>
<p>No &#34;breakpoint number&#34; is returned - the number of the OER is used instead. Thus it is impossible to set duplicate breakpoints on a given OER (it is a no-op).</p>
</li>
<li>
<p>It is not possible to disable an OER breakpoint (although clients are free to simulate this by deleting it).</p>
</li>
<li>
<p>OER breakpoints are deleted using <code dir="ltr">delete_oer_breakpoint.</code></p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66167" class="refsect2"><a id="i1009873"></a>
<h3 class="refsect2"><a id="sthref3801"></a>GET_VALUE Function</h3>
<p>This function gets a value from the currently-running program. There are two overloaded <code dir="ltr">GET_VALUE</code> functions.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3802"></a>Syntax</p>
<pre dir="ltr">DBMS_DEBUG.GET_VALUE (
   variable_name  IN  VARCHAR2,
   frame#         IN  BINARY_INTEGER,
   scalar_value   OUT VARCHAR2,
   format         IN  VARCHAR2 := NULL)
RETURN BINARY_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3803"></a>Parameters</p>
<div id="ARPLS66168" class="tblformal">
<p class="titleintable"><a id="sthref3804"></a><a id="sthref3805"></a>Table 53-26 GET_VALUE Function Parameters</p>
<table class="cellalignment4330" title="GET_VALUE Function Parameters" summary="his table describes the parameters of DBMS_DEBUG.GET_VALUE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t40">Parameter</th>
<th class="cellalignment4328" id="r1c2-t40">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t40" headers="r1c1-t40">
<p><code dir="ltr">variable_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t40 r1c2-t40">
<p>Name of the variable or parameter</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t40" headers="r1c1-t40">
<p><code dir="ltr">frame#</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t40 r1c2-t40">
<p>Frame in which it lives; 0 means the current procedure</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t40" headers="r1c1-t40">
<p><code dir="ltr">scalar_value</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t40 r1c2-t40">
<p>Value</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t40" headers="r1c1-t40">
<p><code dir="ltr">format</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t40 r1c2-t40">
<p>Optional date format to use, if meaningful</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3806"></a>Return Values</p>
<div id="ARPLS66169" class="tblformal">
<p class="titleintable"><a id="sthref3807"></a><a id="sthref3808"></a>Table 53-27 GET_VALUE Function Return Values</p>
<table class="cellalignment4330" title="GET_VALUE Function Return Values" summary="This table describes Return Values for the GET_VALUE subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t41">Return</th>
<th class="cellalignment4328" id="r1c2-t41">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t41" headers="r1c1-t41">
<p><code dir="ltr">success</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t41 r1c2-t41">
<p>A successful completion</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t41" headers="r1c1-t41">
<p><code dir="ltr">error_bogus_frame</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t41 r1c2-t41">
<p>Frame does not exist</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t41" headers="r1c1-t41">
<p><code dir="ltr">error_no_debug_info</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t41 r1c2-t41">
<p>Entrypoint has no debug information</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t41" headers="r1c1-t41">
<p><code dir="ltr">error_no_such_object</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t41 r1c2-t41">
<p><code dir="ltr">variable_name</code> does not exist in <code dir="ltr">frame#</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t41" headers="r1c1-t41">
<p><code dir="ltr">error_unknown_type</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t41 r1c2-t41">
<p>The type information in the debug information is illegible</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t41" headers="r1c1-t41">
<p><code dir="ltr">error_nullvalue</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t41 r1c2-t41">
<p>Value is <code dir="ltr">NULL</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t41" headers="r1c1-t41">
<p><code dir="ltr">error_indexed_table</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t41 r1c2-t41">
<p>The object is a table, but no index was provided</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>This form of <code dir="ltr">GET_VALUE</code> is for fetching package variables. Instead of a frame#, it takes a handle, which describes the package containing the variable.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3809"></a>Syntax</p>
<pre dir="ltr">DBMS_DEBUG.GET_VALUE (
   variable_name  IN  VARCHAR2,
   handle         IN  program_info,
   scalar_value   OUT VARCHAR2,
   format         IN  VARCHAR2 := NULL)
RETURN BINARY_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3810"></a>Parameters</p>
<div id="ARPLS66170" class="tblformal">
<p class="titleintable"><a id="sthref3811"></a><a id="sthref3812"></a>Table 53-28 GET_VALUE Function Parameters</p>
<table class="cellalignment4330" title="GET_VALUE Function Parameters" summary="This table describes the parameters of DBMS_DEBUG.GET_VALUE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t42">Parameter</th>
<th class="cellalignment4328" id="r1c2-t42">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t42" headers="r1c1-t42">
<p><code dir="ltr">variable_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t42 r1c2-t42">
<p>Name of the variable or parameter</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t42" headers="r1c1-t42">
<p><code dir="ltr">handle</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t42 r1c2-t42">
<p>Description of the package containing the variable</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t42" headers="r1c1-t42">
<p><code dir="ltr">scalar_value</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t42 r1c2-t42">
<p>Value</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t42" headers="r1c1-t42">
<p><code dir="ltr">format</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t42 r1c2-t42">
<p>Optional date format to use, if meaningful</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3813"></a>Return Values</p>
<div id="ARPLS66171" class="tblformal">
<p class="titleintable"><a id="sthref3814"></a><a id="sthref3815"></a>Table 53-29 GET_VALUE Function Return Values</p>
<table class="cellalignment4330" title="GET_VALUE Function Return Values" summary="This table describes Return Values for the GET_VALUE subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t43">Return</th>
<th class="cellalignment4328" id="r1c2-t43">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t43" headers="r1c1-t43">
<p><code dir="ltr">error_no_such_object</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t43 r1c2-t43">
<p>One of the following:</p>
<p>- Package does not exist</p>
<p>- Package is not instantiated</p>
<p>- User does not have privileges to debug the package</p>
<p>- Object does not exist in the package</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t43" headers="r1c1-t43">
<p><code dir="ltr">error_indexed_table</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t43 r1c2-t43">
<p>The object is a table, but no index was provided</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3816"></a>Examples</p>
<p>This example illustrates how to get the value with a given package <code dir="ltr">PACK</code> in schema <code dir="ltr">SCOTT</code>, containing variable <code dir="ltr">VAR</code>:</p>
<pre dir="ltr">DECLARE
   handle     dbms_debug.program_info;
   resultbuf  VARCHAR2(500);
   retval     BINARY_INTEGER;
BEGIN
   handle.Owner     := &#39;SCOTT&#39;;
   handle.Name      := &#39;PACK&#39;;
   handle.namespace := dbms_debug.namespace_pkgspec_or_toplevel;
   retval           := dbms_debug.get_value(&#39;VAR&#39;, handle, resultbuf, NULL);
END;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66172" class="refsect2"><a id="i1009075"></a>
<h3 class="refsect2"><a id="sthref3817"></a>INITIALIZE Function</h3>
<p>This function initializes the target session for debugging.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3818"></a>Syntax</p>
<pre dir="ltr">DBMS_DEBUG.INITIALIZE (
   debug_session_id  IN VARCHAR2       := NULL, 
   diagnostics       IN BINARY_INTEGER := 0)
  RETURN VARCHAR2; 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3819"></a>Parameters</p>
<div id="ARPLS66173" class="tblformal">
<p class="titleintable"><a id="sthref3820"></a><a id="sthref3821"></a>Table 53-30 INITIALIZE Function Parameters</p>
<table class="cellalignment4330" title="INITIALIZE Function Parameters" summary="This table describes the parameters of DBMS_DEBUG.INITIALIZE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t44">Parameter</th>
<th class="cellalignment4328" id="r1c2-t44">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t44" headers="r1c1-t44">
<p><code dir="ltr">debug_session_id</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t44 r1c2-t44">
<p>Name of session ID. If <code dir="ltr">NULL</code>, then a unique ID is generated.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t44" headers="r1c1-t44">
<p><code dir="ltr">diagnostics</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t44 r1c2-t44">
<p>Indicates whether to dump diagnostic output to the tracefile:</p>
<p>0 = (default) no diagnostics</p>
<p>1 = print diagnostics</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3822"></a>Return Values</p>
<p>The newly-registered debug session ID (debugID)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3823"></a>Usage Notes</p>
<p>You cannot use <code dir="ltr">DBMS_DEBUG</code> and the JDWP-based debugging interface simultaneously. This call will either fail with an ORA-30677 error if the session is currently being debugged with the JDWP-based debugging interface or, if the call succeeds, any further use of the JDWP-based interface to debug this session will be disallowed.</p>
<p>Calls to <code dir="ltr">DBMS_DEBUG</code> will succeed only if either the caller or the specified debug role carries the <code dir="ltr">DEBUG</code> <code dir="ltr">CONNECT</code> <code dir="ltr">SESSION</code> privilege. Failing that, an ORA-1031 error will be raised. Other exceptions are also possible if a debug role is specified but the password does not match, or if the calling user has not been granted the role, or the role is application-enabled and this call does not originate from within the role-enabling package.</p>
<p>The <code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">PROCEDURE</code> privilege does not affect the visibility of routines through the debugger. A privilege <code dir="ltr">DEBUG</code> for each object has been introduced with a corresponding <code dir="ltr">DEBUG</code> <code dir="ltr">ANY</code> <code dir="ltr">PROCEDURE</code> variant. These are required in order to see routines owned by users other than the session&#39;s login user.</p>
<p>Authentication of the debug role and the check for <code dir="ltr">DEBUG</code> <code dir="ltr">CONNECT</code> <code dir="ltr">SESSION</code> privilege will be done in the context of the caller to this routine. If the caller is a definer&#39;s rights routine or has been called from one, only privileges granted to the defining user, the debug role, or <code dir="ltr">PUBLIC</code> will be used to check for <code dir="ltr">DEBUG</code> <code dir="ltr">CONNECT</code> <code dir="ltr">SESSION</code>. If this call is from within a definer&#39;s rights routine, the debug role, if specified, must be one that has been granted to that definer, but it need not also have been granted to the session login user or be enabled in the calling session at the time the call is made.</p>
<p>The checks made by the debugger after this call is made looking for the <code dir="ltr">DEBUG</code> privilege on individual procedures will be done in the context of the session&#39;s login user, the roles that were enabled at session level at the moment this call was made (even if those roles were not available within a definer&#39;s rights environment of the call), and the debug role.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66174" class="refsect2"><a id="i1009706"></a>
<h3 class="refsect2"><a id="sthref3824"></a>PING Procedure</h3>
<p>This procedure pings the target session to prevent it from timing out. Use this procedure when execution is suspended in the target session, for example at a breakpoint.</p>
<p>If the <code dir="ltr">timeout_behaviour</code> is set to <code dir="ltr">retry_on_timeout</code> then this procedure is not necessary.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3825"></a>Syntax</p>
<pre dir="ltr">DBMS_DEBUG.PING; 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3826"></a>Exceptions</p>
<p>Oracle will display the <code dir="ltr">no_target_program</code> exception if there is no target program or if the target session is not currently waiting for input from the debug session.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3827"></a>Usage Notes</p>
<p>Timeout options for the target session are registered with the target session by calling <code dir="ltr">set_timeout_behaviour:</code></p>
<ul>
<li>
<p><code dir="ltr">retry_on_timeout</code> - Retry. Timeout has no effect. This is like setting the timeout to an infinitely large value.</p>
</li>
<li>
<p><code dir="ltr">continue_on_timeout</code> - Continue execution, using same event flags.</p>
</li>
<li>
<p><code dir="ltr">nodebug_on_timeout</code> - Turn debug-mode OFF (in other words, call debug_off) and then continue execution. No more events will be generated by this target session unless it is re-initialized by calling debug_on.</p>
</li>
<li>
<p><code dir="ltr">abort_on_timeout</code> - Continue execution, using the abort_execution flag, which should cause the program to terminate immediately. The session remains in debug-mode.</p>
</li>
</ul>
<p><code dir="ltr">retry_on_timeout CONSTANT BINARY_INTEGER:= 0;</code></p>
<p><code dir="ltr">continue_on_timeout CONSTANT BINARY_INTEGER:= 1;</code></p>
<p><code dir="ltr">nodebug_on_timeout CONSTANT BINARY_INTEGER:= 2;</code></p>
<p><code dir="ltr">abort_on_timeout CONSTANT BINARY_INTEGER:= 3;</code></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66175" class="refsect2"><a id="i1009079"></a>
<h3 class="refsect2"><a id="sthref3828"></a>PRINT_BACKTRACE Procedure</h3>
<p>This procedure prints a backtrace listing of the current execution stack. This should only be called if a program is currently running.</p>
<p>There are two overloaded <code dir="ltr">PRINT_BACKTRACE</code> procedures.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3829"></a>Syntax</p>
<pre dir="ltr">DBMS_DEBUG.PRINT_BACKTRACE (
  listing IN OUT VARCHAR2); 

DBMS_DEBUG.PRINT_BACKTRACE (
  backtrace OUT backtrace_table);
</pre></div>
<!-- class="refsubsect" -->
<div id="ARPLS66176" class="refsect3"><a id="sthref3830"></a>
<h4 class="refsect3">Parameters</h4>
<div id="ARPLS66177" class="tblformal">
<p class="titleintable"><a id="sthref3831"></a><a id="sthref3832"></a>Table 53-31 PRINT_BACKTRACE Procedure Parameters</p>
<table class="cellalignment4330" title="PRINT_BACKTRACE Procedure Parameters" summary="This table describes the parameters of DBMS_DEBUG.PRINT_BACKTRACE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t45">Parameter</th>
<th class="cellalignment4328" id="r1c2-t45">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t45" headers="r1c1-t45">
<p><code dir="ltr">listing</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t45 r1c2-t45">
<p>A formatted character buffer with embedded newlines</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t45" headers="r1c1-t45">
<p><code dir="ltr">backtrace</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t45 r1c2-t45">
<p>1-based indexed table of backtrace entries. The currently-running procedure is the last entry in the table (that is, the frame numbering is the same as that used by <code dir="ltr">GET_VALUE</code>). Entry 1 is the oldest procedure on the stack.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsect3" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66178" class="refsect2"><a id="i1009499"></a>
<h3 class="refsect2"><a id="sthref3833"></a>PRINT_INSTANTIATIONS Procedure</h3>
<p>This procedure returns a list of the packages that have been instantiated in the current session.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3834"></a>Syntax</p>
<pre dir="ltr">DBMS_DEBUG.PRINT_INSTANTIATIONS (
   pkgs   IN OUT NOCOPY backtrace_table, 
   flags  IN BINARY_INTEGER); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3835"></a>Parameters</p>
<div id="ARPLS66179" class="tblformal">
<p class="titleintable"><a id="sthref3836"></a><a id="sthref3837"></a>Table 53-32 PRINT_INSTANTIATIONS Procedure Parameters</p>
<table class="cellalignment4330" title="PRINT_INSTANTIATIONS Procedure Parameters" summary="This table describes the parameters of DBMS_DEBUG.PRINT_INSTANTIATIONS." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t46">Parameter</th>
<th class="cellalignment4328" id="r1c2-t46">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t46" headers="r1c1-t46">
<p><code dir="ltr">pkgs</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t46 r1c2-t46">
<p>The instantiated packages</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t46" headers="r1c1-t46">
<p><code dir="ltr">flags</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t46 r1c2-t46">
<p>Bitmask of options:</p>
<ul>
<li>
<p>1 - show specs</p>
</li>
<li>
<p>2 - show bodies</p>
</li>
<li>
<p>4 - show local instantiations</p>
</li>
<li>
<p>8 - show remote instantiations (NYI)</p>
</li>
<li>
<p>16 - do a fast job. The routine does not test whether debug information exists or whether the libunit is shrink-wrapped.</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3838"></a>Exceptions</p>
<p><code dir="ltr">no_target_program</code> - target session is not currently executing</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3839"></a>Usage Notes</p>
<p>On return, <code dir="ltr">pkgs</code> contains a <code dir="ltr">program_info</code> for each instantiation. The valid fields are: <code dir="ltr">Namespace, Name, Owner,</code> and <code dir="ltr">LibunitType.</code></p>
<p>In addition, Line# contains a bitmask of:</p>
<ul>
<li>
<p>1 - the libunit contains debug info</p>
</li>
<li>
<p>2 - the libunit is shrink-wrapped</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66180" class="refsect2"><a id="CEGHCGCA"></a>
<h3 class="refsect2"><a id="sthref3840"></a>PROBE_VERSION Procedure</h3>
<p>This procedure returns the version number of <code dir="ltr">DBMS_DEBUG</code> on the server.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3841"></a>Syntax</p>
<pre dir="ltr">DBMS_DEBUG.PROBE_VERSION (
   major out BINARY_INTEGER,
   minor out BINARY_INTEGER); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3842"></a>Parameters</p>
<div id="ARPLS66181" class="tblformal">
<p class="titleintable"><a id="sthref3843"></a><a id="sthref3844"></a>Table 53-33 PROBE_VERSION Procedure Parameters</p>
<table class="cellalignment4330" title="PROBE_VERSION Procedure Parameters" summary="This table describes the parameters of DBMS_DEBUG.PROBE_VERSION." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t47">Parameter</th>
<th class="cellalignment4328" id="r1c2-t47">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t47" headers="r1c1-t47">
<p><code dir="ltr">major</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t47 r1c2-t47">
<p>Major version number</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t47" headers="r1c1-t47">
<p><code dir="ltr">minor</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t47 r1c2-t47">
<p>Minor version number: increments as functionality is added</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66182" class="refsect2"><a id="i1009302"></a>
<h3 class="refsect2"><a id="sthref3845"></a>SELF_CHECK Procedure</h3>
<p>This procedure performs an internal consistency check. <code dir="ltr">SELF_CHECK</code> also runs a communications test to ensure that the Probe processes are able to communicate.</p>
<p>If <code dir="ltr">SELF_CHECK</code> does not return successfully, then an incorrect version of <code dir="ltr">DBMS_DEBUG</code> was probably installed on this server. The solution is to install the correct version (<code dir="ltr">pbload</code>.<code dir="ltr">sql</code> loads <code dir="ltr">DBMS_DEBUG</code> and the other relevant packages).</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3846"></a>Syntax</p>
<pre dir="ltr">DBMS_DEBUG.SELF_CHECK (
   timeout IN binary_integer := 60);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3847"></a>Parameters</p>
<div id="ARPLS66183" class="tblformal">
<p class="titleintable"><a id="sthref3848"></a><a id="sthref3849"></a>Table 53-34 SELF_CHECK Procedure Parameters</p>
<table class="cellalignment4330" title="SELF_CHECK Procedure Parameters" summary="This table describes the parameters of DBMS_DEBUG.SELF_CHECK." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t48">Parameter</th>
<th class="cellalignment4328" id="r1c2-t48">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t48" headers="r1c1-t48">
<p><code dir="ltr">timeout</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t48 r1c2-t48">
<p>The timeout to use for the communication test. Default is 60 seconds.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3850"></a>Exceptions</p>
<div id="ARPLS66184" class="tblformal">
<p class="titleintable"><a id="sthref3851"></a><a id="sthref3852"></a>Table 53-35 SELF_CHECK Procedure Exceptions</p>
<table class="cellalignment4330" title="SELF_CHECK Procedure Exceptions" summary="This table describes Exceptions for the SELF_CHECK subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t49">Exception</th>
<th class="cellalignment4328" id="r1c2-t49">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t49" headers="r1c1-t49">
<p><code dir="ltr">OER-6516</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t49 r1c2-t49">
<p>Probe version is inconsistent</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t49" headers="r1c1-t49">
<p><code dir="ltr">pipe_creation_failure</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t49 r1c2-t49">
<p>Could not create a pipe</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t49" headers="r1c1-t49">
<p><code dir="ltr">pipe_send_failure</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t49 r1c2-t49">
<p>Could not write data to the pipe</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t49" headers="r1c1-t49">
<p><code dir="ltr">pipe_receive_failure</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t49 r1c2-t49">
<p>Could not read data from the pipe</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t49" headers="r1c1-t49">
<p><code dir="ltr">pipe_datatype_mismatch</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t49 r1c2-t49">
<p>Datatype in the pipe was wrong</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t49" headers="r1c1-t49">
<p><code dir="ltr">pipe_data_error</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t49 r1c2-t49">
<p>Data got garbled in the pipe</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>All of these exceptions are fatal. They indicate a serious problem with Probe that prevents it from working correctly.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66185" class="refsect2"><a id="i1009232"></a>
<h3 class="refsect2"><a id="sthref3853"></a>SET_BREAKPOINT Function</h3>
<p>This function sets a breakpoint in a program unit, which persists for the current session. Execution pauses if the target program reaches the breakpoint.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3854"></a>Syntax</p>
<pre dir="ltr">DBMS_DEBUG.SET_BREAKPOINT (
   program     IN  program_info,
   line#       IN  BINARY_INTEGER,
   breakpoint# OUT BINARY_INTEGER,
   fuzzy       IN  BINARY_INTEGER := 0,
   iterations  IN  BINARY_INTEGER := 0)
  RETURN BINARY_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3855"></a>Parameters</p>
<div id="ARPLS66186" class="tblformal">
<p class="titleintable"><a id="sthref3856"></a><a id="sthref3857"></a>Table 53-36 SET_BREAKPOINT Function Parameters</p>
<table class="cellalignment4330" title="SET_BREAKPOINT Function Parameters" summary="This table describes the parameters of DBMS_DEBUG.SET_BREAKPOINT." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t50">Parameter</th>
<th class="cellalignment4328" id="r1c2-t50">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t50" headers="r1c1-t50">
<p><code dir="ltr">program</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t50 r1c2-t50">
<p>Information about the program unit in which the breakpoint is to be set. (In version 2.1 and later, the namespace, name, owner, and dblink may be set to <code dir="ltr">NULL</code>, in which case the breakpoint is placed in the currently-running program unit.)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t50" headers="r1c1-t50">
<p><code dir="ltr">line#</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t50 r1c2-t50">
<p>Line at which the breakpoint is to be set</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t50" headers="r1c1-t50">
<p><code dir="ltr">breakpoint#</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t50 r1c2-t50">
<p>On successful completion, contains the unique breakpoint number by which to refer to the breakpoint</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t50" headers="r1c1-t50">
<p><code dir="ltr">fuzzy</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t50 r1c2-t50">
<p>Only applicable if there is no executable code at the specified line:</p>
<p>0 means return <code dir="ltr">error_illegal_line</code></p>
<p>1 means search forward for an adjacent line at which to place the breakpoint</p>
<p>-1 means search backward for an adjacent line at which to place the breakpoint</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t50" headers="r1c1-t50">
<p><code dir="ltr">iterations</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t50 r1c2-t50">
<p>Number of times to wait before signalling this breakpoint</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3858"></a>Return Values</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code dir="ltr">fuzzy</code> and <code dir="ltr">iterations</code> parameters are not yet implemented</div>
<div id="ARPLS66187" class="tblformal">
<p class="titleintable"><a id="sthref3859"></a><a id="sthref3860"></a>Table 53-37 SET_BREAKPOINT Function Return Values</p>
<table class="cellalignment4330" title="SET_BREAKPOINT Function Return Values" summary="This table describes Return Values for the SET_BREAKPOINT subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t52">Return</th>
<th class="cellalignment4328" id="r1c2-t52">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t52" headers="r1c1-t52">
<p><code dir="ltr">success</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t52 r1c2-t52">
<p>A successful completion</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t52" headers="r1c1-t52">
<p><code dir="ltr">error_illegal_line</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t52 r1c2-t52">
<p>Cannot set a breakpoint at that line</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t52" headers="r1c1-t52">
<p><code dir="ltr">error_bad_handle</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t52 r1c2-t52">
<p>No such program unit exists</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66188" class="refsect2"><a id="CEGCBGDG"></a>
<h3 class="refsect2"><a id="sthref3861"></a>SET_OER_BREAKPOINT Function</h3>
<p>This function sets an OER breakpoint.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3862"></a>Syntax</p>
<pre dir="ltr">DBMS_DEBUG.SET_OER_BREAKPOINT (
   oer  IN PLS_INTEGER) 
RETURN PLS_INTEGER; 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3863"></a>Parameters</p>
<div id="ARPLS66189" class="tblformal">
<p class="titleintable"><a id="sthref3864"></a><a id="sthref3865"></a>Table 53-38 SET_OER_BREAKPOINT Function Parameters</p>
<table class="cellalignment4330" title="SET_OER_BREAKPOINT Function Parameters" summary="This table describes the parameters of DBMS_DEBUG.SET_OER_BREAKPOINT." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t53">Parameter</th>
<th class="cellalignment4328" id="r1c2-t53">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t53" headers="r1c1-t53">
<p><code dir="ltr">oer</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t53 r1c2-t53">
<p>The OER (positive 4-byte number) to set</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3866"></a>Return Values</p>
<div id="ARPLS66190" class="tblformal">
<p class="titleintable"><a id="sthref3867"></a><a id="sthref3868"></a>Table 53-39 SET_OER_BREAKPOINT Function Return Values</p>
<table class="cellalignment4330" title="SET_OER_BREAKPOINT Function Return Values" summary="This table describes Return Values for the SET_OER_BREAKPOINT subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t54">Return</th>
<th class="cellalignment4328" id="r1c2-t54">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t54" headers="r1c1-t54">
<p><code dir="ltr">success</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t54 r1c2-t54">
<p>A successful completion</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t54" headers="r1c1-t54">
<p><code dir="ltr">error_no_such_breakpt</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t54 r1c2-t54">
<p>No such OER breakpoint exists</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66191" class="refsect2"><a id="i997626"></a>
<h3 class="refsect2"><a id="sthref3869"></a>SET_TIMEOUT Function</h3>
<p>This function sets the timeout value and returns the new timeout value.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3870"></a>Syntax</p>
<pre dir="ltr">DBMS_DEBUG.SET_TIMEOUT (
   timeout BINARY_INTEGER) 
  RETURN BINARY_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3871"></a>Parameters</p>
<div id="ARPLS66192" class="tblformal">
<p class="titleintable"><a id="sthref3872"></a><a id="sthref3873"></a>Table 53-40 SET_TIMEOUT Function Parameters</p>
<table class="cellalignment4330" title="SET_TIMEOUT Function Parameters" summary="This table describes the parameters of DBMS_DEBUG.SET_TIMEOUT." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t55">Parameter</th>
<th class="cellalignment4328" id="r1c2-t55">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t55" headers="r1c1-t55">
<p><code dir="ltr">timeout</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t55 r1c2-t55">
<p>The timeout to use for communication between the target and debug sessions</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66193" class="refsect2"><a id="i1009844"></a>
<h3 class="refsect2"><a id="sthref3874"></a>SET_TIMEOUT_BEHAVIOUR Procedure</h3>
<p>This procedure tells Probe what to do with the target session when a timeout occurs. This call is made in the target session.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3875"></a>Syntax</p>
<pre dir="ltr">DBMS_DEBUG.SET_TIMEOUT_BEHAVIOUR (
   behaviour IN PLS_INTEGER); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3876"></a>Parameters</p>
<div id="ARPLS66194" class="tblformal">
<p class="titleintable"><a id="sthref3877"></a><a id="sthref3878"></a>Table 53-41 SET_TIMEOUT_BEHAVIOUR Procedure Parameters</p>
<table class="cellalignment4330" title="SET_TIMEOUT_BEHAVIOUR Procedure Parameters" summary="This table describes the parameters of DBMS_DEBUG.SET_TIMEOUT_BEHAVIOUR." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t56">Parameter</th>
<th class="cellalignment4328" id="r1c2-t56">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t56" headers="r1c1-t56">
<p><code dir="ltr">behaviour - One of the following:</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t56 r1c2-t56">&nbsp;</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t56" headers="r1c1-t56">
<p><code dir="ltr">retry_on_timeout</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t56 r1c2-t56">
<p>Retry. Timeout has no effect. This is like setting the timeout to an infinitely large value.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t56" headers="r1c1-t56">
<p><code dir="ltr">continue_on_timeout</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t56 r1c2-t56">
<p>Continue execution, using same event flags</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t56" headers="r1c1-t56">
<p><code dir="ltr">nodebug_on_timeout</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t56 r1c2-t56">
<p>Turn debug-mode OFF (in other words, call <code dir="ltr">debug_off</code>) and continue execution. No more events will be generated by this target session unless it is re-initialized by calling <code dir="ltr">debug_on.</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t56" headers="r1c1-t56">
<p><code dir="ltr">abort_on_timeout</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t56 r1c2-t56">
<p>Continue execution, using the <code dir="ltr">abort_execution</code> flag, which should cause the program to terminate immediately. The session remains in debug-mode.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3879"></a>Exceptions</p>
<p>unimplemented - the requested behavior is not recognized</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3880"></a>Usage Notes</p>
<p>The default behavior (if this procedure is not called) is <code dir="ltr">continue_on_timeout,</code> since it allows a debugger client to reestablish control (at the next event) but does not cause the target session to hang indefinitely.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66195" class="refsect2"><a id="i1009439"></a>
<h3 class="refsect2"><a id="sthref3881"></a>SET_VALUE Function</h3>
<p>This function sets a value in the currently-running program. There are two overloaded <code dir="ltr">SET_VALUE</code> functions.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3882"></a>Syntax</p>
<pre dir="ltr">DBMS_DEBUG.SET_VALUE (
   frame#               IN binary_integer,
   assignment_statement IN varchar2) 
  RETURN BINARY_INTEGER;

DBMS_DEBUG.SET_VALUE (
   handle               IN program_info,
   assignment_statement IN VARCHAR2) 
  RETURN BINARY_INTEGER;  
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3883"></a>Parameters</p>
<div id="ARPLS66196" class="tblformal">
<p class="titleintable"><a id="sthref3884"></a><a id="sthref3885"></a>Table 53-42 SET_VALUE Function Parameters</p>
<table class="cellalignment4330" title="SET_VALUE Function Parameters" summary="This table describes the parameters of DBMS_DEBUG.SET_VALUE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t57">Parameter</th>
<th class="cellalignment4328" id="r1c2-t57">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t57" headers="r1c1-t57">
<p><code dir="ltr">frame#</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t57 r1c2-t57">
<p>Frame in which the value is to be set; 0 means the currently executing frame.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t57" headers="r1c1-t57">
<p><code dir="ltr">handle</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t57 r1c2-t57">
<p>Description of the package containing the variable</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t57" headers="r1c1-t57">
<p><code dir="ltr">assignment_statement</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t57 r1c2-t57">
<p>An assignment statement (which must be legal PL/SQL) to run in order to set the value. For example, &#39;x := 3;&#39;.</p>
<p>Only scalar values are supported in this release. The right side of the assignment statement must be a scalar.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3886"></a>Return Values</p>
<div id="ARPLS66197" class="tblformal">
<p class="titleintable"><a id="sthref3887"></a><a id="sthref3888"></a>Table 53-43 SET_VALUE Function Return Values</p>
<table class="cellalignment4330" title="SET_VALUE Function Return Values" summary="This table describes Return Values for the SET_VALUE subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t58">Return</th>
<th class="cellalignment4328" id="r1c2-t58">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t58" headers="r1c1-t58">
<p><code dir="ltr">success</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t58 r1c2-t58">
<p>-</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t58" headers="r1c1-t58">
<p><code dir="ltr">error_illegal_value</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t58 r1c2-t58">
<p>Not possible to set it to that value</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t58" headers="r1c1-t58">
<p><code dir="ltr">error_illegal_null</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t58 r1c2-t58">
<p>Cannot set to <code dir="ltr">NULL</code> because object type specifies it as &#39;not <code dir="ltr">NULL</code>&#39;</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t58" headers="r1c1-t58">
<p><code dir="ltr">error_value_malformed</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t58 r1c2-t58">
<p>Value is not a scalar</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t58" headers="r1c1-t58">
<p><code dir="ltr">error_name_incomplete</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t58 r1c2-t58">
<p>The assignment statement does not resolve to a scalar. For example, &#39;x := 3;&#39;, if x is a record.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t58" headers="r1c1-t58">
<p><code dir="ltr">error_no_such_object</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t58 r1c2-t58">
<p>One of the following:</p>
<p>- Package does not exist</p>
<p>- Package is not instantiated</p>
<p>- User does not have privileges to debug the package</p>
<p>- Object does not exist in the package</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3889"></a>Usage Notes</p>
<p>In some cases, the PL/SQL compiler uses temporaries to access package variables, and does not guarantee to update such temporaries. It is possible, although unlikely, that modification to a package variable using <code dir="ltr">SET_VALUE</code> might not take effect for a line or two.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3890"></a>Examples</p>
<p>To set the value of <code dir="ltr">SCOTT</code>.<code dir="ltr">PACK</code>.<code dir="ltr">var</code> to 6:</p>
<pre dir="ltr">DECLARE
   handle  dbms_debug.program_info;
   retval  BINARY_INTEGER;
BEGIN
   handle.Owner     := &#39;SCOTT&#39;;
   handle.Name      := &#39;PACK&#39;;
   handle.namespace := dbms_debug.namespace_pkgspec_or_toplevel;
   retval           := dbms_debug.set_value(handle, &#39;var := 6;&#39;);
END;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66198" class="refsect2"><a id="i1009505"></a>
<h3 class="refsect2"><a id="sthref3891"></a>SHOW_BREAKPOINTS Procedures</h3>
<p>There are two overloaded procedures that return a listing of the current breakpoints. There are three overloaded <code dir="ltr">SHOW_BREAKPOINTS</code> procedures.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3892"></a>Syntax</p>
<pre dir="ltr">DBMS_DEBUG.SHOW_BREAKPOINTS (
   listing    IN OUT VARCHAR2);

DBMS_DEBUG.SHOW_BREAKPOINTS (
   listing    OUT breakpoint_table);

DBMS_DEBUG.SHOW_BREAKPOINTS (
   code_breakpoints  OUT breakpoint_table, 
   oer_breakpoints   OUT oer_table);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3893"></a>Parameters</p>
<div id="ARPLS66199" class="tblformal">
<p class="titleintable"><a id="sthref3894"></a><a id="sthref3895"></a>Table 53-44 SHOW_BREAKPOINTS Procedure Parameters</p>
<table class="cellalignment4330" title="SHOW_BREAKPOINTS Procedure Parameters" summary="This table describes the parameters of DBMS_DEBUG.SHOW_BREAKPOINTS." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t59">Parameter</th>
<th class="cellalignment4328" id="r1c2-t59">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t59" headers="r1c1-t59">
<p><code dir="ltr">listing</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t59 r1c2-t59">
<p>A formatted buffer (including newlines) of the breakpoints.</p>
<p>Indexed table of breakpoint entries. The breakpoint number is indicated by the index into the table. Breakpoint numbers start at 1 and are reused when deleted.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t59" headers="r1c1-t59">
<p><code dir="ltr">code_breakpoints</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t59 r1c2-t59">
<p>The indexed table of breakpoint entries, indexed by breakpoint number</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t59" headers="r1c1-t59">
<p><code dir="ltr">oer_breakpoints</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t59 r1c2-t59">
<p>The indexed table of OER breakpoints, indexed by OER</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66200" class="refsect2"><a id="i1010858"></a>
<h3 class="refsect2"><a id="sthref3896"></a>SHOW_FRAME_SOURCE Procedure</h3>
<p>The procedure gets the source code. There are two overloaded <code dir="ltr">SHOW_SOURCE</code> procedures.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3897"></a>Syntax</p>
<pre dir="ltr">DBMS_DEBUG.SHOW_FRAME_SOURCE (
   first_line  IN            BINARY_INTEGER,
   last_line   IN            BINARY_INTEGER,
   source      IN OUT NOCOPY vc2_table,
   frame_num   IN            BINARY_INTEGER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3898"></a>Parameters</p>
<div id="ARPLS66201" class="tblformal">
<p class="titleintable"><a id="sthref3899"></a><a id="sthref3900"></a>Table 53-45 SHOW_FRAME_SOURCE Procedure Parameters</p>
<table class="cellalignment4330" title="SHOW_FRAME_SOURCE Procedure Parameters " summary="This table describes the parameters of DBMS_DEBUG.SHOW_FRAME_SOURCE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t60">Parameter</th>
<th class="cellalignment4328" id="r1c2-t60">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t60" headers="r1c1-t60">
<p><code dir="ltr">first_line</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t60 r1c2-t60">
<p>Line number of first line to fetch (PL/SQL programs always start at line 1 and have no holes)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t60" headers="r1c1-t60">
<p><code dir="ltr">last_line</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t60 r1c2-t60">
<p>Line number of last line to fetch. No lines are fetched past the end of the program.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t60" headers="r1c1-t60">
<p><code dir="ltr">source</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t60 r1c2-t60">
<p>The resulting table, which may be indexed by line#</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t60" headers="r1c1-t60">
<p><code dir="ltr">frame_num</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t60 r1c2-t60">
<p>1-based frame number</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3901"></a>Usage Notes</p>
<ul>
<li>
<p>You use this function only when backtrace shows an anonymous unit is executing at a given frame position and you need to view the source in order to set a breakpoint.</p>
</li>
<li>
<p>If frame number is top of the stack and it&#39;s an anonymous block then <code dir="ltr">SHOW_SOURCE</code> can also be used.</p>
</li>
<li>
<p>If it&#39;s a stored PLSQL package/function/procedure then use SQL as described in the <a href="#i1010847">Usage Notes</a> to <a href="#i997814">SHOW_SOURCE Procedures</a>.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66202" class="refsect2"><a id="i997814"></a>
<h3 class="refsect2"><a id="sthref3902"></a>SHOW_SOURCE Procedures</h3>
<p>The procedure gets the source code. There are two overloaded <code dir="ltr">SHOW_SOURCE</code> procedures.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3903"></a>Syntax</p>
<pre dir="ltr">DBMS_DEBUG.SHOW_SOURCE (
   first_line  IN   BINARY_INTEGER,
   last_line   IN   BINARY_INTEGER,
   source      OUT  vc2_table);

DBMS_DEBUG.SHOW_SOURCE (
   first_line   IN     BINARY_INTEGER,
   last_line    IN     BINARY_INTEGER,
   window       IN     BINARY_INTEGER,
   print_arrow  IN     BINARY_INTEGER,
   buffer       IN OUT VARCHAR2,
   buflen       IN     BINARY_INTEGER,
   pieces       OUT    BINARY_INTEGER);  
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3904"></a>Parameters</p>
<div id="ARPLS66203" class="tblformal">
<p class="titleintable"><a id="sthref3905"></a><a id="sthref3906"></a>Table 53-46 SHOW_SOURCE Procedure Parameters</p>
<table class="cellalignment4330" title="SHOW_SOURCE Procedure Parameters " summary="This table describes the parameters of DBMS_DEBUG.SHOW_SOURCE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t61">Parameter</th>
<th class="cellalignment4328" id="r1c2-t61">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t61" headers="r1c1-t61">
<p><code dir="ltr">first_line</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t61 r1c2-t61">
<p>Line number of first line to fetch (PL/SQL programs always start at line 1 and have no holes)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t61" headers="r1c1-t61">
<p><code dir="ltr">last_line</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t61 r1c2-t61">
<p>Line number of last line to fetch. No lines are fetched past the end of the program.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t61" headers="r1c1-t61">
<p><code dir="ltr">source</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t61 r1c2-t61">
<p>The resulting table, which may be indexed by line#</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t61" headers="r1c1-t61">
<p><code dir="ltr">window</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t61 r1c2-t61">
<p>&#39;Window&#39; of lines (the number of lines around the current source line)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t61" headers="r1c1-t61">
<p><code dir="ltr">print_arrow</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t61 r1c2-t61">
<p>Nonzero means to print an arrow before the current line</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t61" headers="r1c1-t61">
<p><code dir="ltr">buffer</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t61 r1c2-t61">
<p>Buffer in which to place the source listing</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t61" headers="r1c1-t61">
<p><code dir="ltr">buflen</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t61 r1c2-t61">
<p>Length of buffer</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t61" headers="r1c1-t61">
<p><code dir="ltr">pieces</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t61 r1c2-t61">
<p>Set to nonzero if not all the source could be placed into the given buffer</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3907"></a>Return Values</p>
<p>An indexed table of source-lines. The source lines are stored starting at <code dir="ltr">first_line</code>. If any error occurs, then the table is empty.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i1010847"></a>Usage Notes</p>
<p>The best way to get the source code (for a program that is being run) is to use SQL. For example:</p>
<pre dir="ltr">DECLARE
    info DBMS_DEBUG.runtime_info;
BEGIN
   -- call DBMS_DEBUG.SYNCHRONIZE, CONTINUE,
   -- or GET_RUNTIME_INFO to fill in &#39;info&#39;
   SELECT text INTO &lt;buffer&gt; FROM all_source
   WHERE owner = info.Program.Owner
     AND name  = info.Program.Name
     AND line  = info.Line#;
END;
</pre>
<p>However, this does not work for nonpersistent programs (for example, anonymous blocks and trigger invocation blocks). For nonpersistent programs, call <code dir="ltr">SHOW_SOURCE</code>. There are two flavors: one returns an indexed table of source lines, and the other returns a packed (and formatted) buffer.</p>
<p>The second overloading of <code dir="ltr">SHOW_SOURCE</code> returns the source in a formatted buffer, complete with line-numbers. It is faster than the indexed table version, but it does not guarantee to fetch all the source.</p>
<p>If the source does not fit in bufferlength (<code dir="ltr">buflen</code>), then additional pieces can be retrieved using the <code dir="ltr">GET_MORE_SOURCE</code> procedure (<code dir="ltr">pieces</code> returns the number of additional pieces that need to be retrieved).</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66204" class="refsect2"><a id="i1009620"></a>
<h3 class="refsect2"><a id="sthref3908"></a>SYNCHRONIZE Function</h3>
<p>This function waits until the target program signals an event. If <code dir="ltr">info_requested</code> is not <code dir="ltr">NULL</code>, then it calls <code dir="ltr">GET_RUNTIME_INFO</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3909"></a>Syntax</p>
<pre dir="ltr">DBMS_DEBUG.SYNCHRONIZE (
   run_info       OUT  runtime_info,
   info_requested IN   BINARY_INTEGER := NULL)
  RETURN BINARY_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3910"></a>Parameters</p>
<div id="ARPLS66205" class="tblformal">
<p class="titleintable"><a id="sthref3911"></a><a id="sthref3912"></a>Table 53-47 SYNCHRONIZE Function Parameters</p>
<table class="cellalignment4330" title="SYNCHRONIZE Function Parameters" summary="This table describes the parameters of DBMS_DEBUG.SYNCHRONIZE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t62">Parameter</th>
<th class="cellalignment4328" id="r1c2-t62">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t62" headers="r1c1-t62">
<p><code dir="ltr">run_info</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t62 r1c2-t62">
<p>Structure in which to write information about the program. By default, this includes information about what program is running and at which line execution has paused.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t62" headers="r1c1-t62">
<p><code dir="ltr">info_requested</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t62 r1c2-t62">
<p>Optional bit-field in which to request information other than the default (which is <code dir="ltr">info_getStackDepth</code> + <code dir="ltr">info_getLineInfo</code>). 0 means that no information is requested at all (see <a href="#i1011982">&#34;Information Flags&#34;</a>).</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3913"></a>Return Values</p>
<div id="ARPLS66206" class="tblformal">
<p class="titleintable"><a id="sthref3914"></a><a id="sthref3915"></a>Table 53-48 SYNCHRONIZE Function Return Values</p>
<table class="cellalignment4330" title="SYNCHRONIZE Function Return Values" summary="This table describes Return Values for the SYNCHRONIZE subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t63">Return</th>
<th class="cellalignment4328" id="r1c2-t63">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t63" headers="r1c1-t63">
<p><code dir="ltr">success</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t63 r1c2-t63">
<p>A successful completion</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t63" headers="r1c1-t63">
<p><code dir="ltr">error_timeout</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t63 r1c2-t63">
<p>Timed out before the program started execution</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t63" headers="r1c1-t63">
<p><code dir="ltr">error_communication</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t63 r1c2-t63">
<p>Other communication error</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66207" class="refsect2"><a id="i998630"></a>
<h3 class="refsect2"><a id="sthref3916"></a>TARGET_PROGRAM_RUNNING Procedure</h3>
<p>This procedure returns <code dir="ltr">TRUE</code> if the target session is currently executing a stored procedure, or <code dir="ltr">FALSE</code> if it is not.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3917"></a>Syntax</p>
<pre dir="ltr">DBMS_DEBUG.TARGET_PROGRAM_RUNNING 
  RETURN BOOLEAN;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4320">
<tr>
<td class="cellalignment4329">
<table class="cellalignment4325">
<tr>
<td class="cellalignment4324"><a href="d_dbver.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4324"><a href="d_ddl.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4332">
<table class="cellalignment4323">
<tr>
<td class="cellalignment4324"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4324"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4324"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4324"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4324"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4324"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>