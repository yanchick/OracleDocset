<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-2294"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/DBMS_LOGSTDBY"></a><title>DBMS_LOGSTDBY</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1086"/>
<meta name="dcterms.created" content="2016-09-02T5:36:23Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database PL/SQL Packages and Types Reference"/>
<meta name="dcterms.identifier" content="E41829-07"/>
<meta name="dcterms.isVersionOf" content="ARPLS"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="d_logmnrd.htm" title="Previous" type="text/html"/>
<link rel="Next" href="d_logstdby_context.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41829-07.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">96/290</span> <!-- End Header -->
<script>
<!-- // <![CDATA[
window.name='d_lsbydb'
// ]]> -->
</script> <script>
// <![CDATA[
function footdisplay(footnum,footnote) {
    var msg = window.open('', 'NewWindow' + footnum,
        'directories=no,height=120,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');

    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">');
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>');
    msg.document.write('Footnote&nbsp; ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><h1>Footnote&nbsp; ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/body><\/html>');
    msg.document.close();
    msg.focus();
}
// ]]>
</script> <noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript>
<div id="ARPLS363" class="chapter"><a id="BABIDEDA"></a>
<h1 class="chapter"><span class="secnum">92</span> DBMS_LOGSTDBY</h1>
<p>The <a id="sthref5524"></a><code>DBMS_LOGSTDBY</code> package provides subprograms for configuring and managing the logical standby database environment.</p>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<a class="olink SBYDB" href="../SBYDB/toc.htm"><span class="italic">Oracle Data Guard Concepts and Administration</span></a> for more information about SQL Apply and logical standby databases</div>
<p>This chapter contains the following topics:</p>
<ul>
<li>
<p><a href="#BABJDFCI">Using DBMS_LOGSTDBY</a></p>
<ul>
<li>
<p>Overview</p>
</li>
<li>
<p>Security Model</p>
</li>
<li>
<p>Constants</p>
</li>
</ul>
</li>
<li>
<p><a href="#i1001971">Summary of DBMS_LOGSTDBY Subprograms</a></p>
</li>
</ul>
<div class="refentry"><a id="BABJDFCI"></a>
<div id="ARPLS66823" class="refsect1">
<h2 class="refsect1">Using DBMS_LOGSTDBY<a id="sthref5525"></a></h2>
<p>This section contains topics which relate to using the <code dir="ltr">DBMS_LOGSTDBY</code> package.</p>
<ul>
<li>
<p><a href="#i1004466">Overview</a></p>
</li>
<li>
<p><a href="#BGBCGBCA">Security Model</a></p>
</li>
<li>
<p><a href="#BGBFDIEG">Constants</a></p>
</li>
</ul>
<div id="ARPLS66824" class="refsect2"><a id="i1004466"></a>
<h3 class="refsect2">Overview<a id="sthref5526"></a><a id="sthref5527"></a><a id="sthref5528"></a></h3>
<p>The <code dir="ltr">DBMS_LOGSTDBY</code> package helps you manage the SQL Apply (logical standby database) environment. The subprograms in the <code dir="ltr">DBMS_LOGSTDBY</code> package help you to accomplish the following main objectives:</p>
<ul>
<li>
<p>Manage configuration parameters used by <a id="sthref5529"></a><a id="sthref5530"></a>SQL Apply.</p>
<p>For example, controlling how transactions are applied on the logical standby database, how much shared pool is used, and how many processes are used by SQL Apply to mine and apply the changes.</p>
</li>
<li>
<p>Ensure an appropriate level of supplemental logging is enabled, and a LogMiner dictionary is built correctly for logical standby database creation.</p>
</li>
<li>
<p>Provide a way to skip the application of changes to selected tables or entire schemas in the logical standby database, and specify ways to handle exceptions encountered by SQL Apply.</p>
</li>
<li>
<p>Allow controlled access to tables in the logical standby database that may require maintenance.</p>
</li>
</ul>
</div>
<!-- class="refsect2" -->
<div id="ARPLS73152" class="refsect2"><a id="BGBCGBCA"></a>
<h3 class="refsect2">Security Model</h3>
<p>You must have the <code dir="ltr">DBA</code> role to use the <code dir="ltr">DBMS_LOGSTDBY</code> package.</p>
<p>A prototype role, <code dir="ltr">LOGSTDBY_ADMINISTRATOR</code>, is created by default with <code dir="ltr">RESOURCE</code> and <code dir="ltr">EXECUTE</code> privileges on <code dir="ltr">DBMS_LOGSTDBY</code>. If you choose to use this role, consider granting <code dir="ltr">ALTER DATABASE</code> and <code dir="ltr">ALTER SESSION</code> privileges to the role so that the grantee can start and stop SQL Apply and can enable and disable the database guard.</p>
<p>The procedures associated with skipping transactions (<code dir="ltr">SKIP</code> and <code dir="ltr">UNSKIP</code>, <code dir="ltr">SKIP_ERROR</code> and <code dir="ltr">UNSKIP_ERROR</code>, <code dir="ltr">and SKIP_TRANSACTION</code> and <code dir="ltr">UNSKIP_TRANSACTION</code>) all require <code dir="ltr">DBA</code> privileges to execute because their scope may contain wildcard schemas. Oracle recommends that where <code dir="ltr">SKIP</code> procedures are specified, these be owned by a secure account with appropriate privileges on the schemas they act on (for example, <code dir="ltr">SYS</code>).</p>
<p>The procedures associated with EDS-based replication require the <code dir="ltr">EXECUTE</code> privilege on the <code dir="ltr">DBMS_LOGSTDBY</code> package. They also require the <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> and <code dir="ltr">DROP</code> <code dir="ltr">TABLE</code> system privileges to create (and drop) shadow tables in the target schema. If materialized views are used, then the <code dir="ltr">CREATE</code> <code dir="ltr">MATERIALIZED</code> <code dir="ltr">VIEW</code> and <code dir="ltr">DROP</code> <code dir="ltr">ANY</code> <code dir="ltr">MATERIALIZED</code> <code dir="ltr">VIEW</code> system privileges are also required.</p>
</div>
<!-- class="refsect2" -->
<div id="ARPLS74900" class="refsect2"><a id="BGBFDIEG"></a>
<h3 class="refsect2">Constants</h3>
<p>The <code dir="ltr">DBMS_LOGSTDBY</code> package defines several enumerated constants for specifying parameter values. Enumerated constants must be prefixed with the package name, for example, <code dir="ltr">DBMS_LOGSTDBY</code>.<code dir="ltr">SKIP_ACTION_SKIP</code>.</p>
<p><a href="#BGBBJGDI">Table 92-1</a> describes the constants for the <code dir="ltr">proc_name</code> parameter in the <code dir="ltr">DBMS_LOGSTDBY</code>.<code dir="ltr">SKIP</code> procedure.</p>
<div id="ARPLS74901" class="tblformal">
<p class="titleintable"><a id="sthref5531"></a><a id="BGBBJGDI"></a>Table 92-1 Constants for SKIP Options Flag</p>
<table class="cellalignment4330" title="Constants for SKIP Options Flag" summary="DBMS_LOGSTDBY Constants" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t3">Constant</th>
<th class="cellalignment4328" id="r1c2-t3">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t3" headers="r1c1-t3">
<p><code dir="ltr">MAX_EVENTS</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t3 r1c2-t3">
<p>Maximum number of events to log in the <code dir="ltr">DBA_LOGSTDBY_EVENTS</code> view. See the <code dir="ltr">DBMS_LOGSTDBY</code> <a href="#BDCIEGEI">APPLY_SET Procedure</a>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t3" headers="r1c1-t3">
<p><code dir="ltr">SKIP_ACTION_APPLY</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t3 r1c2-t3">
<p>Used inside the user-defined procedure registered with <code dir="ltr">DBMS_LOGSTDBY.SKIP.</code> Use this constant when setting the value of the <code dir="ltr">SKIP_ACTION</code> parameter with <code dir="ltr">DBMS_LOGSTDBY_CONTEXT</code> if you want SQL Apply to apply the DDL or PL/SQL statement.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t3" headers="r1c1-t3">
<p><code dir="ltr">SKIP_ACTION_ERROR</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t3 r1c2-t3">
<p>Used inside the user-defined procedure registered with <code dir="ltr">DBMS_LOGSTDBY.SKIP</code>. Use this constant when setting the value of the <code dir="ltr">SKIP_ACTION</code> parameter with <code dir="ltr">DBMS_LOGSTDBY_CONTEXT</code> if you want SQL Apply to error out.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t3" headers="r1c1-t3">
<p><code dir="ltr">SKIP_ACTION_REPLACE</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t3 r1c2-t3">
<p>Used inside the user-defined procedure registered with <code dir="ltr">DBMS_LOGSTDBY.SKIP</code>. Use this constant when setting the value of the <code dir="ltr">SKIP_ACTION</code> parameter with <code dir="ltr">DBMS_LOGSTDBY_CONTEXT</code> if you want SQL Apply to apply the replacement DDL. (This constant should not be used while handling an Oracle Supplied PL/SQL procedure call).</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t3" headers="r1c1-t3">
<p><code dir="ltr">SKIP_ACTION_SKIP</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t3 r1c2-t3">
<p>Used inside the user-defined procedure registered with <code dir="ltr">DBMS_LOGSTDBY.SKIP</code>. Use this constant when setting the value of the <code dir="ltr">SKIP_ACTION</code> parameter with <code dir="ltr">DBMS_LOGSTDBY_CONTEXT</code> if you want SQL Apply to skip the associated DDL or Oracle supplied PL/SQL procedure call.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="i1001971"></a>
<div id="ARPLS66827" class="refsect1">
<h2 class="refsect1">Summary of DBMS_LOGSTDBY Subprograms</h2>
<p>In a multitenant container database (CDB), some subprograms must be called from the root. There may be other differences as well. See the individual subprogram descriptions for details.</p>
<div id="ARPLS66828" class="tblformal">
<p class="titleintable"><a id="sthref5532"></a><a id="sthref5533"></a>Table 92-2 DBMS_LOGSTDBY Package Subprograms</p>
<table class="cellalignment4330" title="DBMS_LOGSTDBY Package Subprograms" summary="Describes each subprogram of the DBMS_LOGSTDBY procedure, including a reference to the section where each procedure is dscribed in more detail." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t4">Subprogram</th>
<th class="cellalignment4328" id="r1c2-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t4" headers="r1c1-t4">
<p><a href="#BDCIEGEI">APPLY_SET Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r2c1-t4 r1c2-t4">
<p>Sets the values of various parameters that configure and maintain SQL Apply.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t4" headers="r1c1-t4">
<p><a href="#i997040">APPLY_UNSET Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r3c1-t4 r1c2-t4">
<p>Restores the default values of various parameters that configure and maintain SQL Apply.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t4" headers="r1c1-t4">
<p><a href="#i997124">BUILD Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r4c1-t4 r1c2-t4">
<p>Ensures supplemental logging is enabled properly and builds the LogMiner dictionary.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t4" headers="r1c1-t4">
<p><a href="#BGBJHBGE">EDS_ADD_TABLE</a></p>
</td>
<td class="cellalignment4329" headers="r5c1-t4 r1c2-t4">
<p>Adds EDS-based replication for the table. It should be invoked on the primary database first and then on the standby database.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t4" headers="r1c1-t4">
<p><a href="#BGBFFJIE">EDS_EVOLVE_AUTOMATIC</a></p>
</td>
<td class="cellalignment4329" headers="r6c1-t4 r1c2-t4">
<p>Enables or disables automatic DDL handling for EDS tables.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t4" headers="r1c1-t4">
<p><a href="#BGBGHJIB">EDS_EVOLVE_MANUAL</a></p>
</td>
<td class="cellalignment4329" headers="r7c1-t4 r1c2-t4">
<p>Allows you to evolve EDS tables manually (that is, manually take compensating actions based on DDLs on the base tables with EDS-replication).</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t4" headers="r1c1-t4">
<p><a href="#BGBIEIDF">EDS_REMOVE_TABLE</a></p>
</td>
<td class="cellalignment4329" headers="r8c1-t4 r1c2-t4">
<p>Removes EDS-based replication for the specified table. It also drops the shadow table and triggers.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t4" headers="r1c1-t4">
<p><a href="#i1008139">INSTANTIATE_TABLE Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r9c1-t4 r1c2-t4">
<p>Creates and populates a table in the standby database from a corresponding table in the primary database.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t4" headers="r1c1-t4">
<p><a href="#BGBBBDBA">IS_APPLY_SERVER Function</a></p>
</td>
<td class="cellalignment4329" headers="r10c1-t4 r1c2-t4">
<p>This function returns <code dir="ltr">TRUE</code> if it is executed from PL/SQL in the context of a logical standby apply server process. This function is used in conjunction with triggers that have the <code dir="ltr">fire_once</code> parameter in the <code dir="ltr">DBMS_DDL.SET_TRIGGER_FIRING_PROPERTY</code> subprogram set to <code dir="ltr">FALSE</code> (the default is <code dir="ltr">TRUE</code>). Such triggers are executed when the relevant target is updated by an apply process. This function can be used within the body of the trigger to ensure that the trigger takes different (or no) actions on the primary or on the standby.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t4" headers="r1c1-t4">
<p><a href="#BABEGDAE">MAP_PRIMARY_SCN Function</a></p>
</td>
<td class="cellalignment4329" headers="r11c1-t4 r1c2-t4">
<p>Maps an SCN relevant to the primary database to a corresponding SCN at the logical standby database. The mapped SCN is conservative in nature, and can thus be used to flash back the logical standby database to compensate for a flashback database operation performed at the primary database.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t4" headers="r1c1-t4">
<p><a href="#BABHDEFF">PREPARE_FOR_NEW_PRIMARY Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r12c1-t4 r1c2-t4">
<p>Used after a failover, this procedure ensures a local logical standby database that was not involved in the failover has not processed more redo than the new primary database and reports the set of archive redo log files that must be replaced to ensure consistency</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t4" headers="r1c1-t4">
<p><a href="#BABCABAG">PURGE_SESSION Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r13c1-t4 r1c2-t4">
<p>Identifies the archived redo log files that have been applied to the logical standby database and are no longer needed by SQL Apply</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t4" headers="r1c1-t4">
<p><a href="#BABCBCGF">REBUILD Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r14c1-t4 r1c2-t4">
<p>Records relevant metadata (including the LogMiner dictionary) in the redo stream in case a database that has recently changed its role to a primary database following a failover operation fails to do so during the failover process</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r15c1-t4" headers="r1c1-t4">
<p><a href="#CHDIHFAF">SET_TABLESPACE Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r15c1-t4 r1c2-t4">
<p>Moves metadata tables required by SQL Apply to the user-specified tablespace. By default, the metadata tables are created in the <code dir="ltr">SYSAUX</code> tablespace.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r16c1-t4" headers="r1c1-t4">
<p><a href="#i997288">SKIP Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r16c1-t4 r1c2-t4">
<p>Specifies rules that control database operations that should not be applied to the logical standby database</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r17c1-t4" headers="r1c1-t4">
<p><a href="#i997648">SKIP_ERROR Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r17c1-t4 r1c2-t4">
<p>Specifies rules regarding what action to take upon encountering errors.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r18c1-t4" headers="r1c1-t4">
<p><a href="#i997765">SKIP_TRANSACTION Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r18c1-t4 r1c2-t4">
<p>Specifies transactions that should not be applied on the logical standby database. Be careful in using this procedure, because not applying specific transactions may cause data corruption at the logical standby database.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r19c1-t4" headers="r1c1-t4">
<p><a href="#BGBFBFEH">UNSKIP Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r19c1-t4 r1c2-t4">
<p>Deletes rules specified by the <code dir="ltr">SKIP</code> procedure.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r20c1-t4" headers="r1c1-t4">
<p><a href="#i997837">UNSKIP_ERROR Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r20c1-t4 r1c2-t4">
<p>Deletes rules specified by the <code dir="ltr">SKIP_ERROR</code> procedure.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r21c1-t4" headers="r1c1-t4">
<p><a href="#i997855">UNSKIP_TRANSACTION Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r21c1-t4 r1c2-t4">
<p>Deletes rules specified by the <code dir="ltr">SKIP_TRANSACTION</code> procedure.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="ARPLS66829" class="refsect2"><a id="BDCIEGEI"></a>
<h3 class="refsect2">APPLY_SET Procedure<a id="sthref5534"></a></h3>
<p>Use this procedure to set values of parameters that configure and manage SQL Apply in a logical standby database environment. All parameters, except for <code dir="ltr">PRESERVE_COMMIT_ORDER</code>, can be changed without having to stop SQL Apply.</p>
<p>In a CDB, the <code dir="ltr">APPLY_SET</code> procedure must be called from the root database.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5535"></a>Syntax</p>
<pre dir="ltr">DBMS_LOGSTDBY.APPLY_SET (
     inname             IN VARCHAR,
     value              IN VARCHAR);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5536"></a>Parameters</p>
<div id="ARPLS66830" class="tblformal">
<p class="titleintable"><a id="sthref5537"></a><a id="CHDCJDGA"></a>Table 92-3 APPLY_SET Procedure Parameters</p>
<table class="cellalignment4330" title="APPLY_SET Procedure Parameters " summary="Describes the parameters you can set on the APPLY_SET subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t5">Parameter</th>
<th class="cellalignment4328" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t5" headers="r1c1-t5">
<p><code dir="ltr">APPLY_SERVERS</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t5 r1c2-t5">
<p>Controls the number of <code dir="ltr">APPLIER</code> processes used to apply changes. The maximum number allowed is 1024, provided the <code dir="ltr">MAX_SERVERS</code> parameter is set to accommodate this.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t5" headers="r1c1-t5">
<p><code dir="ltr">EVENT_LOG_DEST</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t5 r1c2-t5">
<p>Controls where SQL Apply records the occurrence of an interesting event. It takes the following values:</p>
<ul>
<li>
<p><code dir="ltr">DEST_ALL</code> - All events will be recorded in the <code dir="ltr">DBA_LOGSTDBY_EVENTS</code> view and in the alert log.</p>
</li>
<li>
<p><code dir="ltr">DEST_EVENTS_TABLE</code> - All events that contain information about user data will be recorded only in the <code dir="ltr">DBA_LOGSTDBY_EVENTS</code> view. This is the default value.</p>
</li>
</ul>
<p>For example, if SQL Apply receives an <code dir="ltr">ORA-1403</code> error, the whole event is recorded in the <code dir="ltr">DBA_LOGSTDBY_EVENTS</code> view. Whereas, the alert log records only that SQL Apply stopped because of <code dir="ltr">ORA-1403</code>. No information regarding the user table or offending statement is logged in the alert log. However, if you stop the SQL Apply engine, it gets recorded in both the <code dir="ltr">DBA_LOGSTDBY_EVENTS</code> view and in the alert log.</p>
<p>Note that this parameter affects the behavior of the following parameters: <code dir="ltr">RECORD_APPLIED_DDL</code>, <code dir="ltr">RECORD_SKIP_DDL</code>, <code dir="ltr">RECORD_SKIP_ERRORS</code>, and <code dir="ltr">RECORD_UNSUPPORTED_OPERATIONS</code>. For example, if <code dir="ltr">RECORD_APPLIED_DDL</code> is set to <code dir="ltr">TRUE</code>, but <code dir="ltr">EVENT_LOG_DEST</code> is set to <code dir="ltr">DEST_EVENTS_TABLE</code>, then the applied DDL string will only be recorded in the <code dir="ltr">DBA_LOGSTDBY_EVENTS</code> view.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t5" headers="r1c1-t5">
<p><code dir="ltr">LOG_AUTO_DEL_RETENTION_TARGET</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t5 r1c2-t5">
<p>This parameter setting is only meaningful if <code dir="ltr">LOG_AUTO_DELETE</code> has been set to <code dir="ltr">TRUE</code>. The value you supply for this parameter controls how long (in minutes) a remote archived log that is received from the primary database will be retained at the logical standby database once all redo records contained in the log have been applied at the logical standby database. The default value is 1440 minutes.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t5" headers="r1c1-t5">
<p><code dir="ltr">LOG_AUTO_DELETE</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t5 r1c2-t5">
<p>Automatically deletes foreign archived redo log files as soon as they have been applied on the logical standby database. By default, a foreign archived redo log file is not deleted until 24 hours (the default value of <code dir="ltr">LOG_AUTO_DEL_RETENTION_TARGET</code> parameter) after it has been applied at the logical standby database. Set to <code dir="ltr">TRUE</code> to enable automatic deletion of archived redo log files. Set to <code dir="ltr">FALSE</code> to disable automatic deletion. The default value is <code dir="ltr">TRUE</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t5" headers="r1c1-t5">
<p><code dir="ltr">MAX_EVENTS_RECORDED</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t5 r1c2-t5">
<p>Number of recent events that will be visible through the <code dir="ltr">DBA_LOGSTDBY_EVENTS</code> view. To record all events encountered by SQL Apply, use the <code dir="ltr">DBMS_LOGSTDBY.MAX_EVENTS</code> constant as the number value. The default value is 10,000.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t5" headers="r1c1-t5">
<p><code dir="ltr">MAX_SERVERS</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t5 r1c2-t5">
<p>Number of processes that SQL Apply uses to read and apply redo. The default value is 9. The maximum number allowed is 2048.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t5" headers="r1c1-t5">
<p><code dir="ltr">MAX_SGA</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t5 r1c2-t5">
<p>Number of megabytes from shared pool in System Global Area (SGA) that SQL Apply will use. The default value is 30 megabytes or one quarter of the value set for <code dir="ltr">SHARED_POOL_SIZE</code>, whichever is lower. The maximum size allowed is 4095 megabytes.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t5" headers="r1c1-t5">
<p><code dir="ltr">PREPARE_SERVERS</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t5 r1c2-t5">
<p>Controls the number of <code dir="ltr">PREPARER</code> processes used to prepare changes. The maximum number allowed is 1024, provided the <code dir="ltr">MAX_SERVERS</code> parameter is set to accommodate this.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t5" headers="r1c1-t5">
<p><code dir="ltr">PRESERVE_COMMIT_ORDER</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t5 r1c2-t5">
<p><code dir="ltr">TRUE</code>: Transactions are applied to the logical standby database in the exact order in which they were committed on the primary database. This is the default parameter setting.</p>
<p><code dir="ltr">FALSE</code>: Transactions containing non-overlapping sets of rows may be committed in a different order than they were committed on the primary database.</p>
<p>Regardless of the level chosen, modifications done to the same row are always applied in the same order as they happened on the primary database. See the Usage Notes for details and recommendations.</p>
<p>You cannot modify this parameter while SQL Apply is running.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t5" headers="r1c1-t5">
<p><code dir="ltr">RECORD_APPLIED_DDL</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t5 r1c2-t5">
<p>Controls whether DDL statements that have been applied to the logical standby database are recorded in the location specified by the <code dir="ltr">EVENT_LOG_DEST</code> parameter. Specify one of the following values:</p>
<p><code dir="ltr">TRUE</code>: Indicates that DDL statements applied to the logical standby database are recorded in the <code dir="ltr">DBA_LOGSTDBY_EVENTS</code> table and the alert log.</p>
<p><code dir="ltr">FALSE</code>: Indicates that applied DDL statements are not recorded. This is the default parameter setting.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t5" headers="r1c1-t5">
<p><code dir="ltr">RECORD_SKIP_DDL</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t5 r1c2-t5">
<p>Controls whether skipped DDL statements are recorded in the location specified by the <code dir="ltr">EVENT_LOG_DEST</code> parameter. Specify one of the following values:</p>
<p><code dir="ltr">TRUE</code>: Skipped DDL statements are recorded in the <code dir="ltr">DBA_LOGSTDBY_EVENTS</code> table and the alert log. This is the default parameter setting.</p>
<p><code dir="ltr">FALSE</code>: Skipped DDL statements are not recorded in the <code dir="ltr">DBA_LOGSTDBY_EVENTS</code> table and the alert log.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t5" headers="r1c1-t5">
<p><code dir="ltr">RECORD_SKIP_ERRORS</code></p>
</td>
<td class="cellalignment4329" headers="r13c1-t5 r1c2-t5">
<p>Controls whether skipped errors (as described by the <code dir="ltr">SKIP_ERROR</code> procedure) are recorded in the location specified by the <code dir="ltr">EVENT_LOG_DEST</code> parameter. Specify one of the following values:</p>
<p><code dir="ltr">TRUE</code>: Skipped errors are recorded in the <code dir="ltr">DBA_LOGSTDBY_EVENTS</code> table and the alert log. This is the default parameter setting.</p>
<p><code dir="ltr">FALSE</code>: Skipped errors are not recorded in the <code dir="ltr">DBA_LOGSTDBY_EVENTS</code> table and the alert log.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t5" headers="r1c1-t5">
<p><code dir="ltr">RECORD_UNSUPPORTED_OPERATIONS</code></p>
</td>
<td class="cellalignment4329" headers="r14c1-t5 r1c2-t5">
<p>Captures information about transactions running on the primary database that will not be supported by a logical standby database. This procedure records its information as events in the <code dir="ltr">DBA_LOGSTDBY_EVENTS</code> table. Specify one of the following values:</p>
<p><code dir="ltr">TRUE</code>: The information is captured and recorded as events in the <code dir="ltr">DBA_LOGSTDBY_EVENTS</code> table.</p>
<p><code dir="ltr">FALSE</code>: The information is not captured. This is the default.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>If a parameter is changed while SQL Apply is running, the change will take effect at some point in the future. In such a case, an informational row is inserted into the <code dir="ltr">DBA_LOGSTDBY_EVENTS</code> view at the time the parameter change takes effect.</p>
<p>Additionally, if you are modifying a parameter while SQL Apply is running on an Oracle RAC configuration, you must be connected to the same instance where SQL Apply is running.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5538"></a>Exceptions</p>
<div id="ARPLS66831" class="tblformal">
<p class="titleintable"><a id="sthref5539"></a><a id="sthref5540"></a>Table 92-4 APPLY_SET Procedure Exceptions</p>
<table class="cellalignment4330" title="APPLY_SET Procedure Exceptions" summary="Lists the exceptions you might encounter when you use the SKIP subprogram on the DBMS_LOGSTDBY package." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t6">Exception</th>
<th class="cellalignment4328" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t6" headers="r1c1-t6">
<p><code dir="ltr">ORA-16103</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t6 r1c2-t6">
<p>Logical Standby apply must be stopped to allow this operation</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t6" headers="r1c1-t6">
<p><code dir="ltr">ORA-16104</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t6 r1c2-t6">
<p>invalid Logical Standby option requested</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t6" headers="r1c1-t6">
<p><code dir="ltr">ORA-16236</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t6 r1c2-t6">
<p>Logical Standby metadata operation in progress</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5541"></a>Usage Notes</p>
<ul>
<li>
<p>Use the <code dir="ltr">APPLY_UNSET</code> procedure to restore the default settings of a parameter.</p>
</li>
<li>
<p>See <a class="olink SBYDB00800" href="../SBYDB/manage_ls.htm#SBYDB00800"><span class="italic">Oracle Data Guard Concepts and Administration</span></a> for help with tuning SQL Apply and for information about setting appropriate values for different parameters.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5542"></a>Examples</p>
<p>To record DDLs in the <code dir="ltr">DBA_LOGSTDBY_EVENTS</code> view and in the alert log, issue the following statement:</p>
<pre dir="ltr">SQL&gt; EXECUTE DBMS_LOGSTDBY.APPLY_SET(&#39;RECORD_APPLIED_DDL&#39;, TRUE);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66832" class="refsect2"><a id="i997040"></a>
<h3 class="refsect2">APPLY_UNSET Procedure<a id="sthref5543"></a></h3>
<p>Use the <code dir="ltr">APPLY_UNSET</code> procedure to restore the default values of the parameters that you changed with the <code dir="ltr">APPLY_SET</code> procedure.</p>
<p>In a CDB, the <code dir="ltr">APPLY_UNSET</code> procedure must be called from the root database.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5544"></a>Syntax</p>
<pre dir="ltr">DBMS_LOGSTDBY.APPLY_UNSET (
     inname          IN VARCHAR);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5545"></a>Parameters</p>
<p>The parameter information for the <code dir="ltr">APPLY_UNSET</code> procedure is the same as that described for the <code dir="ltr">APPLY_SET</code> procedure. See <a href="#CHDCJDGA">Table 92-3</a> for complete parameter information.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5546"></a>Exceptions</p>
<div id="ARPLS66833" class="tblformal">
<p class="titleintable"><a id="sthref5547"></a><a id="sthref5548"></a>Table 92-5 APPLY_UNSET Procedure Exceptions</p>
<table class="cellalignment4330" title="APPLY_UNSET Procedure Exceptions" summary="Lists the exceptions you might encounter when you use the SKIP subprogram on the DBMS_LOGSTDBY package." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t7">Exception</th>
<th class="cellalignment4328" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t7" headers="r1c1-t7">
<p><code dir="ltr">ORA-16103</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t7 r1c2-t7">
<p>Logical Standby apply must be stopped to allow this operation</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t7" headers="r1c1-t7">
<p><code dir="ltr">ORA-16104</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t7 r1c2-t7">
<p>invalid Logical Standby option requested</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t7" headers="r1c1-t7">
<p><code dir="ltr">ORA-16236</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t7 r1c2-t7">
<p>Logical Standby metadata operation in progress</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5549"></a>Usage Notes</p>
<ul>
<li>
<p>Use the <code dir="ltr">APPLY_SET</code> procedure to specify a nondefault value for a parameter.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5550"></a>Examples</p>
<p>If you previously specified that applied DDLs show up in the <code dir="ltr">DBA_LOGSTDBY_EVENTS</code> view and the alert log, you can restore the default behavior of SQL Apply regarding applied DDL statements with the following statement:</p>
<pre dir="ltr">SQL&gt; EXECUTE DBMS_LOGSTDBY.APPLY_UNSET(&#39;RECORD_APPLIED_DDL&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66834" class="refsect2"><a id="i997124"></a>
<h3 class="refsect2">BUILD Procedure<a id="sthref5551"></a></h3>
<p>Use this procedure on the primary database to record relevant metadata (LogMiner dictionary) information in the redo log, which will subsequently be used by SQL Apply. This procedure will enable database-wide primary- and unique-key supplemental logging, if necessary.</p>
<p>In a CDB, the <code dir="ltr">BUILD</code> procedure must be called from the root database on the primary. Additionally, you cannot add or remove PDBs from a CDB while this procedure is executing.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
In databases created using Oracle Database 11<span class="italic">g</span> release 2 (11.2) or later, supplemental logging information is automatically propagated to any existing physical standby databases. However, for databases in earlier releases, or if the database was created using an earlier release and then upgraded to 11.2, you must check whether supplemental logging is enabled at the physical standby(s) if it is also enabled at the primary database. If it is not enabled at the physical standby(s), then before performing a switchover or failover, you must enable supplemental logging on all existing physical standby databases. To do so, issue the following SQL command on each physical standby:
<pre dir="ltr">SQL&gt;  ALTER DATABASE ADD SUPPLEMENTAL LOG DATA (PRIMARY KEY, UNIQUE INDEX) COLUMNS;
</pre>
<p>If you do not do this, then any logical standby that is also in the same Data Guard configuration will be unusable if a switchover or failover is performed to one of the physical standby databases. If a switchover or failover has already occurred and supplemental logging was not enabled, then you must recreate all logical standby databases.</p>
</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5552"></a>Syntax</p>
<pre dir="ltr">DBMS_LOGSTDBY.BUILD;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5553"></a>Usage Notes</p>
<ul>
<li>
<p>Supplemental log information includes extra information in the redo logs that uniquely identifies a modified row in the logical standby database, and also includes information that helps efficient application of changes to the logical standby database.</p>
</li>
<li>
<p>LogMiner dictionary information allows SQL Apply to interpret data in the redo logs.</p>
</li>
<li>
<p><code dir="ltr">DBMS_LOGSTDBY.BUILD</code> should be run only once for each logical standby database you want to create. You do not need to use DBMS_LOGSTDBY.BUILD for each Oracle RAC instance.</p>
</li>
<li>
<p><code dir="ltr">DBMS_LOGSTDBY.BUILD</code> waits for all transactions (including distributed transactions) that are active at the time of the procedure invocation to complete before returning. See <a class="olink ADMIN12252" href="../ADMIN/ds_txnman.htm#ADMIN12252"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> for information about how to handle in-doubt transactions.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5554"></a>Examples</p>
<p>To build the LogMiner dictionary in the redo stream of the primary database and to record additional information so that a logical standby database can be instantiated, issue the following SQL statement at the primary database</p>
<pre dir="ltr">SQL&gt; EXECUTE DBMS_LOGSTDBY.BUILD;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS73782" class="refsect2"><a id="BGBJHBGE"></a>
<h3 class="refsect2">EDS_ADD_TABLE</h3>
<p>This procedure adds EDS-based replication for the table. It should be invoked on the primary database first and then on the standby database.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5555"></a>Syntax</p>
<pre dir="ltr">DBMS_LOGSTDBY.EDS_ADD_TABLE (
     table_owner        IN VARCHAR2,
     table_name         IN VARCHAR2,
                             p_dblink           IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5556"></a>Parameters</p>
<div id="ARPLS73783" class="tblformal">
<p class="titleintable"><a id="sthref5557"></a><a id="sthref5558"></a>Table 92-6 EDS_ADD_TABLE Procedure Parameters</p>
<table class="cellalignment4330" title="EDS_ADD_TABLE Procedure Parameters" summary="eds_add_table parameter descriptions" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t9">Parameter</th>
<th class="cellalignment4328" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t9" headers="r1c1-t9">
<p><code dir="ltr">table_owner</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t9 r1c2-t9">
<p>Owner of the table to be created or re-created in the standby database</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t9" headers="r1c1-t9">
<p><code dir="ltr">table_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t9 r1c2-t9">
<p>Name of the table to be created or re-created in the standby database</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t9" headers="r1c1-t9">
<p><code dir="ltr">p_dblink</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t9 r1c2-t9">
<p>A database link to the primary database</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5559"></a>Exceptions</p>
<div id="ARPLS73784" class="tblformal">
<p class="titleintable"><a id="sthref5560"></a><a id="sthref5561"></a>Table 92-7 EDS_ADD_TABLE Procedure Exceptions</p>
<table class="cellalignment4330" title="EDS_ADD_TABLE Procedure Exceptions" summary="eds_add_table exceptions" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t10">Exception</th>
<th class="cellalignment4328" id="r1c2-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t10" headers="r1c1-t10">
<p><code dir="ltr">ORA-942</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t10 r1c2-t10">
<p>Table or view does not exist</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t10" headers="r1c1-t10">
<p><code dir="ltr">ORA-16103</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t10 r1c2-t10">
<p>SQL Apply must be stopped to allow this operation</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t10" headers="r1c1-t10">
<p><code dir="ltr">ORA-16130</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t10 r1c2-t10">
<p>Supplemental log information is missing from log stream</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t10" headers="r1c1-t10">
<p><code dir="ltr">ORA-16236</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t10 r1c2-t10">
<p>Logical standby metadata operation in progress</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t10" headers="r1c1-t10">
<p><code dir="ltr">ORA-16276</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t10 r1c2-t10">
<p>Specified database link does not correspond to primary database</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t10" headers="r1c1-t10">
<p><code dir="ltr">ORA-16278</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t10 r1c2-t10">
<p>Specified table has a multi-object skip rule defined</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t10" headers="r1c1-t10">
<p><code dir="ltr">ORA-16279</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t10 r1c2-t10">
<p>Specified database link does not have the necessary roles for operation</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t10" headers="r1c1-t10">
<p><code dir="ltr">ORA-16302</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t10 r1c2-t10">
<p>Extended datatype support is not supported for specified table</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t10" headers="r1c1-t10">
<p><code dir="ltr">ORA-16303</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t10 r1c2-t10">
<p>Specified table already has EDS on this database</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t10" headers="r1c1-t10">
<p><code dir="ltr">ORA-16304</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t10 r1c2-t10">
<p>Procedure must first be called at the primary database</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t10" headers="r1c1-t10">
<p><code dir="ltr">ORA-16306</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t10 r1c2-t10">
<p>Specified table does not have a primary key</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5562"></a>Usage Notes</p>
<ul>
<li>
<p>When this procedure is invoked on the primary, the definition of the local table is used to compose the shadow table and both the base and shadow table triggers.</p>
</li>
<li>
<p>When this procedure is invoked on the standby, a database link to the primary (p_dblink) must be provided so that the definition of the table on the primary can be used to compose the shadow table and its trigger on the standby. After the shadow table and its trigger are composed on the standby, the <code dir="ltr">DBMS_LOGSTDBY.INSTANTIATE_TABLE</code> procedure is called on the base table, using the provided database link to the primary. The p_dblink parameter is ignored when called on the primary and it defaults to NULL.</p>
</li>
<li>
<p>Error checking is done up front. Generally, if the table contains a datatype that this procedure does not support, then an error is raised.</p>
<p>If the table is already supported by SQL Apply, then an exception is raised. To determine whether a table is a candidate for extended datatype support (EDS), query the <code dir="ltr">DBA_LOGSTDBY_EDS_SUPPORTED</code> view on the primary.</p>
</li>
<li>
<p>This procedure must be executed on the primary before it is executed on the standby; otherwise an error is raised.</p>
</li>
<li>
<p>For role changes to a logical standby it is essential that EDS be added to both the primary and the standby prior to the role change. If it is added only on the primary, then it must be removed after the role change because the EDS context would then be invalid.</p>
</li>
<li>
<p>For rolling upgrades the procedure only needs to be called on the primary.</p>
</li>
<li>
<p>This procedure is not replicated to a logical standby and therefore must be executed on both the primary and the standby databases. It is replicated to a physical standby so when it is used for rolling upgrades it should only be called on the primary.</p>
</li>
<li>
<p>When this procedure is executed on the standby, it requires that SQL Apply be stopped and the database guard set to either STANDBY or NONE. When the procedure is complete, the table is protected by the database guard.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5563"></a>Examples</p>
<p>To add EDS for the table <code dir="ltr">OE.CUSTOMERS</code>, issue the following commands, first on the primary and then on the standby.</p>
<p>On the primary database, issue the following command:</p>
<pre dir="ltr">execute dbms_logstdby.eds_add_table(&#39;OE&#39;,&#39;CUSTOMERS&#39;);
</pre>
<p>On the standby database, issue the following commands:</p>
<pre dir="ltr">alter database stop logical standby apply;
execute dbms_logstdby.eds_add_table(&#39;OE&#39;,&#39;CUSTOMERS&#39;,&#39;dblink-to-primary&#39;);
alter database start logical standby apply immediate;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS73785" class="refsect2"><a id="BGBFFJIE"></a>
<h3 class="refsect2">EDS_EVOLVE_AUTOMATIC</h3>
<p>This procedure either enables or disables automatic DDL handling for EDS tables.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5564"></a>Syntax</p>
<pre dir="ltr">DBMS_LOGSTDBY.EDS_EVOLVE_AUTOMATIC (
     options            IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5565"></a>Parameters</p>
<div id="ARPLS73786" class="tblformal">
<p class="titleintable"><a id="sthref5566"></a><a id="sthref5567"></a>Table 92-8 EDS_EVOLVE_AUTOMATIC Parameter Descriptions</p>
<table class="cellalignment4330" title="EDS_EVOLVE_AUTOMATIC Parameter Descriptions" summary="eds_evolve_automatic parameter descriptions" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t11">Parameter</th>
<th class="cellalignment4328" id="r1c2-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t11" headers="r1c1-t11">
<p>options</p>
</td>
<td class="cellalignment4329" headers="r2c1-t11 r1c2-t11">
<p>Specify <code dir="ltr">ENABLE</code> to enable automatic DDL handling for EDS.</p>
<p>Specify <code dir="ltr">DISABLE</code> to disable automatic DDL handling for EDS.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5568"></a>Exceptions</p>
<div id="ARPLS73787" class="tblformal">
<p class="titleintable"><a id="sthref5569"></a><a id="sthref5570"></a>Table 92-9 EDS_EVOLVE_AUTOMATIC Exception Descriptions</p>
<table class="cellalignment4330" title="EDS_EVOLVE_AUTOMATIC Exception Descriptions" summary="eds_evolve_automatic exceptions" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t12">Exception</th>
<th class="cellalignment4328" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t12" headers="r1c1-t12">
<p><code dir="ltr">ORA-16104</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t12 r1c2-t12">
<p>The specified parameter is not valid</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t12" headers="r1c1-t12">
<p><code dir="ltr">ORA-16305</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t12 r1c2-t12">
<p>Procedure not supported on a logical standby</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5571"></a>Usage Notes</p>
<ul>
<li>
<p>For transparent handling of DDLs on all EDS-enabled tables, this procedure must be called at the primary database once (with the <code dir="ltr">ENABLE</code> option) prior to the first call to <code dir="ltr">EDS_ADD_TABLE</code>.</p>
</li>
<li>
<p>If an EDS-specific DDL trigger is enabled, it fires after every DDL to determine whether the DDL affects the viability of EDS-replication of any of the tables presently enabled for EDS. If it does, then a separate EVOLVING trigger is generated on the table that ensures no DMLs are allowed on the affected base table until the compensating actions are taken to repair the EDS-specific metadata.</p>
</li>
<li>
<p>If the SQL statements <code dir="ltr">ALTER TABLE</code> or <code dir="ltr">CREATE UNIQUE INDEX</code> are executed on an EDS-maintained table, then an evolve operation is started if automatic evolve has been enabled.</p>
</li>
<li>
<p>This procedure can be called on a primary database only and is replicated via SQL Apply to a logical standby database.</p>
</li>
<li>
<p>When the procedure is executed on the standby it succeeds regardless of the database guard setting and whether or not apply is running.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5572"></a>Examples</p>
<p>To enable automatic evolution of all EDS- maintained tables, issue the following statement:</p>
<pre dir="ltr">execute dbms_logstdby.eds_evolve_automatic(&#39;ENABLE&#39;);
</pre>
<p>After automatic evolve has been enabled, there is no need to issue eds_evolve commands. They will be done automatically for you upon completion of a DDL command issued against an EDS table.</p>
<p>To disable automatic evolution of all EDS- maintained tables, issue the following statement:</p>
<pre dir="ltr">execute dbms_logstdby.eds_evolve_automatic(&#39;DISABLE&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS73788" class="refsect2"><a id="BGBGHJIB"></a>
<h3 class="refsect2">EDS_EVOLVE_MANUAL</h3>
<p>This procedure allows you to evolve EDS tables manually (that is, manually take compensating actions based on DDLs on the base tables with EDS-replication).</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5573"></a>Syntax</p>
<pre dir="ltr">DBMS_LOGSTDBY.EDS_EVOLVE_MANUAL (
     options            IN VARCHAR2,
     table_owner        IN VARCHAR2,
     table_name         IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5574"></a>Parameters</p>
<div id="ARPLS73789" class="tblformal">
<p class="titleintable"><a id="sthref5575"></a><a id="sthref5576"></a>Table 92-10 EDS_EVOLVE_MANUAL Parameter Descriptions</p>
<table class="cellalignment4330" title="EDS_EVOLVE_MANUAL Parameter Descriptions" summary="eds_evolve_manual parameter descriptions" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t13">Parameter</th>
<th class="cellalignment4328" id="r1c2-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t13" headers="r1c1-t13">
<p><code dir="ltr">options</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t13 r1c2-t13">
<p>Valid options are:</p>
<ul>
<li>
<p><code dir="ltr">START</code> - start an evolve operation, prior to performing the DDL</p>
</li>
<li>
<p><code dir="ltr">FINISH</code> - finish an evolve operation after performing the DDL</p>
</li>
<li>
<p><code dir="ltr">CANCEL</code> - cancel a started evolve operation</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t13" headers="r1c1-t13">
<p><code dir="ltr">table_owner</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t13 r1c2-t13">
<p>Owner of the table to be created or re-created in the standby database</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t13" headers="r1c1-t13">
<p><code dir="ltr">table_name</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t13 r1c2-t13">
<p>Name of the table to be created or re-created in the standby database</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5577"></a>Exceptions</p>
<div id="ARPLS73790" class="tblformal">
<p class="titleintable"><a id="sthref5578"></a><a id="sthref5579"></a>Table 92-11 EDS_EVOLVE_MANUAL Exception Descriptions</p>
<table class="cellalignment4330" title="EDS_EVOLVE_MANUAL Exception Descriptions" summary="eds_evolve_manual exceptions" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t14">Exception</th>
<th class="cellalignment4328" id="r1c2-t14">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t14" headers="r1c1-t14">
<p><code dir="ltr">ORA-16302</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t14 r1c2-t14">
<p>Extended datatype support is not supported for specified table</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t14" headers="r1c1-t14">
<p><code dir="ltr">ORA-16305</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t14 r1c2-t14">
<p>Procedure not supported on a logical standby</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t14" headers="r1c1-t14">
<p><code dir="ltr">ORA-16306</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t14 r1c2-t14">
<p>Specified table does not have a primary key</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t14" headers="r1c1-t14">
<p><code dir="ltr">ORA-16307</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t14 r1c2-t14">
<p>Table not prepared for extended datatype support operation</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5580"></a>Usage Notes</p>
<ul>
<li>
<p>To perform a manual evolve operation, you must call <code dir="ltr">EDS_EVOLVE_MANUAL</code> before and after any DDL that may affect the base table being replicated with EDS. The following is the prescribed method for evolving manually:</p>
<ol>
<li>
<p>Call <code dir="ltr">EDS_EVOLVE_MANUAL</code> with the <code dir="ltr">START</code> option.</p>
</li>
<li>
<p>Perform the DDL.</p>
</li>
<li>
<p>Call <code dir="ltr">EDS_EVOLVE_MANUAL</code> with the <code dir="ltr">FINISH</code> option.</p>
</li>
</ol>
<p>Deviation from this order could lead to data loss. An error is returned if the procedure is called with the <code dir="ltr">FINISH</code> option before it is called with <code dir="ltr">START</code> for the specified table. When the procedure is called with the <code dir="ltr">START</code> option, DML on the table is blocked by an evolve trigger.</p>
</li>
<li>
<p>This procedure can only be invoked on a primary database.</p>
</li>
<li>
<p>When this procedure is executed on the standby, SQL Apply must be stopped and the database guard set to either <code dir="ltr">STANDBY</code> or <code dir="ltr">NONE</code>. When the procedure is complete, the table is protected by the database guard.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5581"></a>Examples</p>
<p>To manually evolve an EDS table, issue the following commands on the primary database:</p>
<pre dir="ltr">execute dbms_logstdby.eds_evolve_manual(&#39;START&#39;,&#39;OE&#39;,&#39;CUSTOMERS&#39;);
alter table oe.customers <span class="italic">some_DDL_construct</span>;
execute dbms_logstdby.eds_evolve_manual(&#39;FINISH&#39;,&#39;OE&#39;,&#39;CUSTOMERS&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS73791" class="refsect2"><a id="BGBIEIDF"></a>
<h3 class="refsect2">EDS_REMOVE_TABLE</h3>
<p>This procedure removes EDS-based replication for the specified table. It also drops the shadow table and triggers.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5582"></a>Syntax</p>
<pre dir="ltr">DBMS_LOGSTDBY.EDS_REMOVE_TABLE (
     table_owner        IN VARCHAR2,
     table_name         IN VARCHAR2,
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5583"></a>Parameters</p>
<div id="ARPLS73792" class="tblformal">
<p class="titleintable"><a id="sthref5584"></a><a id="sthref5585"></a>Table 92-12 EDS_REMOVE_TABLE Parameter Descriptions</p>
<table class="cellalignment4330" title="EDS_REMOVE_TABLE Parameter Descriptions" summary="eds_remove_table parameter descriptions" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t15">Parameter</th>
<th class="cellalignment4328" id="r1c2-t15">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t15" headers="r1c1-t15">
<p>table_owner</p>
</td>
<td class="cellalignment4329" headers="r2c1-t15 r1c2-t15">
<p>Owner of the table to be created or re-created in the standby database</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t15" headers="r1c1-t15">
<p>table_name</p>
</td>
<td class="cellalignment4329" headers="r3c1-t15 r1c2-t15">
<p>Name of the table to be created or re-created in the standby database</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5586"></a>Exceptions</p>
<div id="ARPLS73793" class="tblformal">
<p class="titleintable"><a id="sthref5587"></a><a id="sthref5588"></a>Table 92-13 EDS_REMOVE_TABLE Exception Descriptions</p>
<table class="cellalignment4330" title="EDS_REMOVE_TABLE Exception Descriptions" summary="eds_remove_table exceptions" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t16">Exception</th>
<th class="cellalignment4328" id="r1c2-t16">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t16" headers="r1c1-t16">
<p><code dir="ltr">ORA-16103</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t16 r1c2-t16">
<p>Logical Standby apply must be stopped to allow this operation</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5589"></a>Usage Notes</p>
<ul>
<li>
<p>When this procedure is called on the standby, the shadow table and both triggers are dropped locally but not on the primary.</p>
<p>When this procedure is called on the primary, the shadow table and both triggers are dropped and the procedure is re-executed on the standby by the apply engine. Therefore, the supporting shadow table and triggers are also dropped at the logical standby. Using this approach, a single call made on the primary can remove EDS from the entire configuration for a table.</p>
</li>
<li>
<p>In a multi-standby configuration, you can remove support on a single standby by calling this procedure on that standby.</p>
</li>
<li>
<p>This procedure takes out an exclusive table lock to ensure isolation in the presence of ongoing user writes on the same table. Thus the procedure will block until existing write-transactions that have outstanding row locks on the table are completed.</p>
</li>
<li>
<p>When this procedure is executed on the standby, SQL Apply must be stopped and the database guard set to either <code dir="ltr">STANDBY</code> or <code dir="ltr">NONE</code>. When the procedure is complete, the table is protected by the database guard.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5590"></a>Examples</p>
<p>To remove EDS for the table <code dir="ltr">OE.CUSTOMERS</code>, issue the following command on the primary database:</p>
<pre dir="ltr">execute dbms_logstdby.eds_remove_table(&#39;OE&#39;,&#39;CUSTOMERS&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66835" class="refsect2"><a id="i1008139"></a>
<h3 class="refsect2">INSTANTIATE_TABLE Procedure<a id="sthref5591"></a></h3>
<p>This procedure creates and populates a table in the standby database from a corresponding table in the primary database. The table requires the name of the database link (<code dir="ltr">dblink)</code> as an input parameter. If the table already exists in the logical standby database, it will be dropped and re-created based on the table definition at the primary database. This procedure only brings over the data associated with the table, and not the associated indexes and constraints.</p>
<p>Use the <code dir="ltr">INSTANTIATE_TABLE</code> procedure to:</p>
<ul>
<li>
<p>Add a table to a standby database.</p>
</li>
<li>
<p>Re-create a table in a standby database.</p>
</li>
</ul>
<p>In a CDB, the <code dir="ltr">INSTANTIATE_TABLE</code> procedure must be called from within the container in which the table to be instantiated resides. Additionally, the database link that is provided to the primary database must point to the corresponding container on the primary.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5592"></a>Syntax</p>
<pre dir="ltr">DBMS_LOGSTDBY.INSTANTIATE_TABLE (
     schema_name         IN VARCHAR2,
     table_name          IN VARCHAR2,
     dblink              IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5593"></a>Parameters</p>
<div id="ARPLS66836" class="tblformal">
<p class="titleintable"><a id="sthref5594"></a><a id="sthref5595"></a>Table 92-14 INSTANTIATE_TABLE Procedure Parameters</p>
<table class="cellalignment4330" title="INSTANTIATE_TABLE Procedure Parameters" summary="Describes the parameters you can set on the INSTANTIATE_TABLE subprogram of the DBMS_LOGSTDBY package." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t17">Parameter</th>
<th class="cellalignment4328" id="r1c2-t17">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t17" headers="r1c1-t17">
<p><code dir="ltr">schema_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t17 r1c2-t17">
<p>Name of the schema</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t17" headers="r1c1-t17">
<p><code dir="ltr">table_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t17 r1c2-t17">
<p>Name of the table to be created or re-created in the standby database</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t17" headers="r1c1-t17">
<p><code dir="ltr">dblink</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t17 r1c2-t17">
<p>Name of the database link account that has privileges to read and lock the table in the primary database, as well as the <code dir="ltr">SELECT_CATALOG_ROLE</code> on the primary database</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5596"></a>Exceptions</p>
<div id="ARPLS66837" class="tblformal">
<p class="titleintable"><a id="sthref5597"></a><a id="sthref5598"></a>Table 92-15 INSTANTIATE_TABLE Procedure Exceptions</p>
<table class="cellalignment4330" title="INSTANTIATE_TABLE Procedure Exceptions" summary="Lists the exceptions you might encounter when you use the SKIP subprogram on the DBMS_LOGSTDBY package." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t18">Exception</th>
<th class="cellalignment4328" id="r1c2-t18">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t18" headers="r1c1-t18">
<p><code dir="ltr">ORA-16103</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t18 r1c2-t18">
<p>Logical Standby apply must be stopped to allow this operation</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t18" headers="r1c1-t18">
<p><code dir="ltr">ORA-16236</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t18 r1c2-t18">
<p>Logical Standby metadata operation in progress</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t18" headers="r1c1-t18">
<p><code dir="ltr">ORA-16276</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t18 r1c2-t18">
<p>Specified database link does not correspond to primary database</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t18" headers="r1c1-t18">
<p><code dir="ltr">ORA-16277</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t18 r1c2-t18">
<p>Specified table is not supported by logical standby database</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t18" headers="r1c1-t18">
<p><code dir="ltr">ORA-16278</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t18 r1c2-t18">
<p>Specified table has a multi-object skip rule defined</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5599"></a>Usage Notes</p>
<ul>
<li>
<p>Use this procedure to create and populate a table in a way that keeps the data on the standby database transactionally consistent with the primary database.</p>
</li>
<li>
<p>This table will not be synchronized with the rest of the tables being maintained by SQL Apply and SQL Apply will not start to maintain it until SQL Apply encounters redo that occurred after the table was instantiated from the primary. The SCN at which the table was instantiated from the primary database is available in the <code dir="ltr">DBA_LOGSTDBY_EVENTS</code> view.</p>
</li>
<li>
<p>The specified table must be a table that is supported by logical standby (that is, it does not appear in the <code dir="ltr">DBA_LOGSTDBY_UNSUPPORTED_TABLES</code> view on the primary database).</p>
</li>
<li>
<p>If there are any skip rules that specifically name this table (without any wildcards), those skip rules will be dropped as part of <code dir="ltr">INSTANTIATE_TABLE</code>, so that the table will be properly maintained by SQL Apply in the future. If there are skip rules that indirectly reference this table (match a skip rule with a wildcard in the <code dir="ltr">schema_name</code> or <code dir="ltr">table_name</code>, and have a TABLE, DML, or SCHEMA_DDL statement type), <code dir="ltr">INSTANTIATE_TABLE</code> will fail with an ORA-16278 error. Any multi-object skip rules that pertain to the table must be dropped or changed before re-attempting the <code dir="ltr">INSTANTIATE_TABLE</code> call.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5600"></a>Examples</p>
<pre dir="ltr">SQL&gt; EXECUTE DBMS_LOGSTDBY.INSTANTIATE_TABLE (-
     SCHEMA_NAME =&gt; &#39;HR&#39;, TABLE_NAME =&gt; &#39;EMPLOYEES&#39;, -
     DBLINK =&gt; &#39;INSTANTIATE_TBL_LINK&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66838" class="refsect2"><a id="BGBBBDBA"></a>
<h3 class="refsect2">IS_APPLY_SERVER Function</h3>
<p>This function returns <code dir="ltr">TRUE</code> if it is executed from PL/SQL in the context of a logical standby apply server process. This function is used in conjunction with triggers that have the <code dir="ltr">fire_once</code> parameter in the <code dir="ltr">DBMS_DDL.SET_TRIGGER_FIRING_PROPERTY</code> subprogram set to <code dir="ltr">FALSE</code> (the default is <code dir="ltr">TRUE</code>). Such triggers are executed when the relevant target is updated by an apply process. This function can be used within the body of the trigger to ensure that the trigger takes different (or no) actions on the primary or on the standby.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS" href="toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about the <code dir="ltr">DBMS_DDL.SET_TRIGGER_FIRING_PROPERTY</code> subprogram.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5601"></a>Syntax</p>
<pre dir="ltr">DBMS_LOGSTDBY.IS_APPLY_SERVER
RETURN BOOLEAN;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5602"></a>Parameters</p>
<p>None</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66839" class="refsect2"><a id="BABEGDAE"></a>
<h3 class="refsect2">MAP_PRIMARY_SCN Function<a id="sthref5603"></a></h3>
<p>Returns an SCN on the standby that predates the supplied SCN from the primary database by at least 5 minutes. This function can be used to determine a safe SCN to use in a compensating flashback database operation at the logical standby database, following a flashback database operation or a point-in-time recovery operation at the primary database.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5604"></a>Syntax</p>
<pre dir="ltr">DBMS_LOGSTDBY.MAP_PRIMARY_SCN(primary_scn NUMBER) RETURN NUMBER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5605"></a>Exceptions</p>
<div id="ARPLS66840" class="tblformal">
<p class="titleintable"><a id="sthref5606"></a><a id="sthref5607"></a>Table 92-16 MAP_PRIMARY_SCN Function Exceptions</p>
<table class="cellalignment4330" title="MAP_PRIMARY_SCN Function Exceptions" summary="Exceptions for the MAP_PRIMARY_SCN Function" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t20">Exception</th>
<th class="cellalignment4328" id="r1c2-t20">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t20" headers="r1c1-t20">
<p><code dir="ltr">ORA-20001</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t20 r1c2-t20">
<p>Primary SCN is before mapped range</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t20" headers="r1c1-t20">
<p><code dir="ltr">ORA-20002</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t20 r1c2-t20">
<p>SCN mapping requires <code dir="ltr">PRESERVE_COMMIT_ORDER</code> to be <code dir="ltr">TRUE</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5608"></a>Usage Notes</p>
<p>Use this function to get a conservative SCN at the logical standby database that corresponds to an SCN at the primary database. This function is useful in the context of doing compensating flashback database operations at the logical standby following a flashback database or a point-in-time recovery operation done at the primary database.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66841" class="refsect2"><a id="BABHDEFF"></a>
<h3 class="refsect2">PREPARE_FOR_NEW_PRIMARY Procedure<a id="sthref5609"></a></h3>
<p>The <code dir="ltr">PREPARE_FOR_NEW_PRIMARY</code> procedure must be invoked at a logical standby database following a failover if that standby database was not the target of the failover operation. Such a standby database must process the exact same set of redo logs processed at the new primary database. This routine ensures that the local logical standby database has not processed more redo than the new primary database and reports the set of archive logs that must be replaced to ensure consistency. The set of replacement logs will be reported in the alert.log. These logs must be copied to the logical standby and registered using the <code dir="ltr">ALTER DATABASE REGISTER LOGICAL LOGFILE</code> statement.</p>
<p>In a CDB, the <code dir="ltr">PREPARE_FOR_NEW_PRIMARY</code> procedure must be called from the root database.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5610"></a>Syntax</p>
<pre dir="ltr">DBMS_LOGSTDBY.PREPARE_FOR_NEW_PRIMARY (
           FORMER_STANDBY_TYPE         IN VARCHAR2,
           DBLINK                      IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5611"></a>Parameters</p>
<div id="ARPLS66842" class="tblformal">
<p class="titleintable"><a id="sthref5612"></a><a id="sthref5613"></a>Table 92-17 PREPARE_FOR_NEW_PRIMARY Procedure Parameters</p>
<table class="cellalignment4330" title="PREPARE_FOR_NEW_PRIMARY Procedure Parameters " summary="Describes the possible parameters you can supply on the PREPARE_FOR_NEW_PRIMARY subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t21">Parameter</th>
<th class="cellalignment4328" id="r1c2-t21">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t21" headers="r1c1-t21">
<p><code dir="ltr">FORMER_STANDBY_TYPE</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t21 r1c2-t21">
<p>The type of standby database that was the target of the failover operation to become the new primary database. Valid values are &#39;<code dir="ltr">PHYSICAL</code>&#39; if the new primary was formerly a physical standby, and &#39;<code dir="ltr">LOGICAL</code>&#39; if the new primary database was formerly a logical standby database.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t21" headers="r1c1-t21">
<p><code dir="ltr">DBLINK</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t21 r1c2-t21">
<p>The name of a database link to the new primary database</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5614"></a>Exceptions</p>
<div id="ARPLS66843" class="tblformal">
<p class="titleintable"><a id="sthref5615"></a><a id="sthref5616"></a>Table 92-18 PREPARE_FOR_NEW_PRIMARY Procedure Exceptions</p>
<table class="cellalignment4330" title="PREPARE_FOR_NEW_PRIMARY Procedure Exceptions" summary="Describes error messages that may be returned on the PREPARE_FOR_NEW_PRIMARY subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t22">Exception</th>
<th class="cellalignment4328" id="r1c2-t22">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t22" headers="r1c1-t22">
<p><code dir="ltr">ORA-16104</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t22 r1c2-t22">
<p>Invalid Logical Standby option.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t22" headers="r1c1-t22">
<p><code dir="ltr">ORA-16109</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t22 r1c2-t22">
<p>Failed to apply log data from previous primary.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5617"></a>Usage Notes</p>
<ul>
<li>
<p>This routine is intended only for logical standby systems.This routine will fail if the new primary database was formerly a logical standby database and the LogMiner dictionary build has not completed successfully.Log files displayed in the alert log will be referred to as <span class="italic">terminal logs</span>. Users should keep in mind that file paths are relative to the new primary database and may not resolve locally.Upon manual registration of the terminal logs, users should complete the process by calling either <code dir="ltr">START LOGICAL STANDBY APPLY</code> if the new primary database was formerly a physical standby database or <code dir="ltr">START LOGICAL STANDBY APPLY NEW PRIMARY</code> if the new primary database was formerly a logical standby database.See the alert log for more details regarding the reasons for any exception.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5618"></a>Examples</p>
<pre dir="ltr">SQL&gt; EXECUTE DBMS_LOGSTDBY.PREPARE_FOR_NEW_PRIMARY (  -
                FORMER_STANDBY_TYPE =&gt; &#39;LOGICAL&#39;,    -
                DBLINK =&gt; &#39;dblink_to_newprimary&#39;); 
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66844" class="refsect2"><a id="BABCABAG"></a>
<h3 class="refsect2"><a id="sthref5619"></a>PURGE_SESSION Procedure</h3>
<p>Identifies all archived redo log files that have been applied to the logical standby database and are no longer needed by SQL Apply. Once identified, you can issue operating system commands to delete some or all of the unnecessary archived redo log files.</p>
<p>In a CDB, the <code dir="ltr">PURGE_SESSION</code> procedure must be called from the root database.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5620"></a>Syntax</p>
<pre dir="ltr">DBMS_LOGSTDBY.PURGE_SESSION;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5621"></a>Exceptions</p>
<div id="ARPLS66845" class="tblformal">
<p class="titleintable"><a id="sthref5622"></a><a id="sthref5623"></a>Table 92-19 PURGE_SESSION Procedure Exceptions</p>
<table class="cellalignment4330" title="PURGE_SESSION Procedure Exceptions" summary="Lists the exceptions you might encounter when you use the SKIP subprogram on the DBMS_LOGSTDBY package." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t23">Exception</th>
<th class="cellalignment4328" id="r1c2-t23">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t23" headers="r1c1-t23">
<p><code dir="ltr">ORA-01309</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t23 r1c2-t23">
<p>Invalid session</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5624"></a>Usage Notes</p>
<ul>
<li>
<p>This procedure does not delete the archived redo log files. You must issue operating system commands to delete unneeded files.</p>
</li>
<li>
<p>This procedure updates the <code dir="ltr">DBA_LOGMNR_PURGED_LOG</code> view that displays the archived redo log files that have been applied to the logical standby database.</p>
</li>
<li>
<p>In Oracle Database 10<span class="italic">g</span> Release 2, metadata related to the archived redo log files (and the actual archived redo log files) are purged automatically based on the default setting of the <code dir="ltr">LOG_AUTO_DELETE</code> parameter described in the <code dir="ltr">DBMS_LOGSTDBY.APPLY_SET</code> procedure described.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5625"></a>Example</p>
<p>To identify and remove unnecessary files:</p>
<ol>
<li>
<p>Enter the following statement on the logical standby database:</p>
<pre dir="ltr">SQL&gt; EXECUTE DBMS_LOGSTDBY.PURGE_SESSION;
</pre></li>
<li>
<p>Query the <code dir="ltr">DBA_LOGMNR_PURGED_LOG</code> view to list the archived redo log files that can be removed:</p>
<pre dir="ltr">SQL&gt; SELECT * FROM DBA_LOGMNR_PURGED_LOG;

FILE_NAME
   ------------------------------------
   /boston/arc_dest/arc_1_40_509538672.log
   /boston/arc_dest/arc_1_41_509538672.log
   /boston/arc_dest/arc_1_42_509538672.log
   /boston/arc_dest/arc_1_43_509538672.log
   /boston/arc_dest/arc_1_44_509538672.log
   /boston/arc_dest/arc_1_45_509538672.log
   /boston/arc_dest/arc_1_46_509538672.log
   /boston/arc_dest/arc_1_47_509538672.log
</pre></li>
<li>
<p>Use operating system-specific commands to delete archived redo log files from the file system.</p>
</li>
</ol>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66846" class="refsect2"><a id="BABCBCGF"></a>
<h3 class="refsect2">REBUILD Procedure</h3>
<p>This procedure is used if a database that has recently changed its role to a primary database following a failover operation fails to record relevant metadata (including the LogMiner dictionary) in the redo stream required for other logical standby databases.</p>
<p>In a CDB, the <code dir="ltr">REBUILD</code> procedure must be called from the root database.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5626"></a>Syntax</p>
<pre dir="ltr">DBMS_LOGSTDBY.REBUILD;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5627"></a>Usage Notes</p>
<ul>
<li>
<p>LogMiner dictionary information is logged in the redo log files.The standby redo log files (if present) are archived.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5628"></a>Examples</p>
<pre dir="ltr">SQL&gt; EXECUTE DBMS_LOGSTDBY.REBUILD;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66847" class="refsect2"><a id="CHDIHFAF"></a>
<h3 class="refsect2"><a id="sthref5629"></a>SET_TABLESPACE Procedure</h3>
<p>Moves metadata tables required by SQL Apply to the user-specified tablespace. By default, the metadata tables are created in the <code dir="ltr">SYSAUX</code> tablespace. SQL Apply cannot be running when you invoke this procedure.</p>
<p>In a CDB, the <code dir="ltr">SET_TABLESPACE</code> procedure must be called from the root database.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5630"></a>Syntax</p>
<pre dir="ltr">DBMS_LOGSTDBY.SET_TABLESPACE(
           NEW_TABLESPACE IN VARCHAR2)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5631"></a>Parameters</p>
<div id="ARPLS66848" class="tblformal">
<p class="titleintable"><a id="sthref5632"></a><a id="sthref5633"></a>Table 92-20 SET_TABLE SPACE Procedure Parameters</p>
<table class="cellalignment4330" title="SET_TABLE SPACE Procedure Parameters" summary="Describes the parameters you can set on the INSTANTIATE_TABLE subprogram of the DBMS_LOGSTDBY package." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t24">Parameter</th>
<th class="cellalignment4328" id="r1c2-t24">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t24" headers="r1c1-t24">
<p><code dir="ltr">NEW_TABLESPACE</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t24 r1c2-t24">
<p>Name of the new tablespace where metadata tables will reside.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5634"></a>Exceptions</p>
<div id="ARPLS66849" class="tblformal">
<p class="titleintable"><a id="sthref5635"></a><a id="sthref5636"></a>Table 92-21 SET_TABLESPACE Procedure Exceptions</p>
<table class="cellalignment4330" title="SET_TABLESPACE Procedure Exceptions" summary="Lists the exceptions you might encounter when you use the SKIP subprogram on the DBMS_LOGSTDBY package." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t25">Exception</th>
<th class="cellalignment4328" id="r1c2-t25">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t25" headers="r1c1-t25">
<p><code dir="ltr">ORA-16103</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t25 r1c2-t25">
<p>Logical Standby apply must be stopped to allow this operation</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t25" headers="r1c1-t25">
<p><code dir="ltr">ORA-16236</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t25 r1c2-t25">
<p>Logical Standby metadata operation in progress</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5637"></a>Examples</p>
<p>To move metadata tables to a new tablespace named <code dir="ltr">LOGSTDBY_TBS</code>, issue the following statement:</p>
<pre dir="ltr">SQL&gt; EXECUTE DBMS_LOGSTDBY.SET_TABLESPACE (new_tablespace =&gt; &#39;LOGSTDBY_TBS&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66850" class="refsect2"><a id="i997288"></a>
<h3 class="refsect2">SKIP Procedure<a id="sthref5638"></a></h3>
<p>The <code dir="ltr">SKIP</code> procedure can be used to define rules that will be used by SQL Apply to skip the application of certain changes to the logical standby database. For example, the <code dir="ltr">SKIP</code> procedure can be used to skip changes to a subset of tables in the logical standby database. It can also be used to specify DDL statements that should not be applied at the logical standby database or should be modified before they are applied in the logical standby database. One reason why a DDL statement may need to be modified is to accommodate a different directory structure on the logical standby database.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
For information about skipping containers, see <a href="#BGBJGGJA">&#34;Skipping Containers.&#34;</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5639"></a>Syntax</p>
<pre dir="ltr">DBMS_LOGSTDBY.SKIP (
     stmt                      IN VARCHAR2,
     schema_name               IN VARCHAR2 DEFAULT NULL,
     object_name               IN VARCHAR2 DEFAULT NULL,
     proc_name                 IN VARCHAR2 DEFAULT NULL,
     use_like                  IN BOOLEAN DEFAULT TRUE,
     esc                       IN CHAR1 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5640"></a>Parameters</p>
<div id="ARPLS66851" class="tblformal">
<p class="titleintable"><a id="sthref5641"></a><a id="CHDDEIJI"></a>Table 92-22 SKIP Procedure Parameters</p>
<table class="cellalignment4330" title="SKIP Procedure Parameters " summary="Describes the parameters you set on the SKIP subprogram of the DBMS_LOGSTDBY package." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t27">Parameter</th>
<th class="cellalignment4328" id="r1c2-t27">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t27" headers="r1c1-t27">
<p><code dir="ltr">stmt</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t27 r1c2-t27">
<p>Either a keyword that identifies a set of SQL statements or a specific SQL statement. The use of keywords simplifies configuration since keywords, generally defined by the database object, identify all SQL statements that operate on the specified object. <a href="#BABGCFCA">Table 92-23</a> shows a list of keywords and the equivalent SQL statements, either of which is a valid value for this parameter.</p>
<p>The keyword <code dir="ltr">PL/SQL</code> is used for the execution of Oracle-supplied packages which are supported for replication. See <a class="olink SBYDB00315" href="../SBYDB/data_support.htm#SBYDB00315"><span class="italic">Oracle Data Guard Concepts and Administration</span></a> for information about supported packages.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t27" headers="r1c1-t27">
<p><code dir="ltr">schema_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t27 r1c2-t27">
<p>The name of one or more schemas (wildcards are permitted) associated with the SQL statements identified by the <code dir="ltr">stmt</code> parameter. If not applicable, this value must be set to <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t27" headers="r1c1-t27">
<p><code dir="ltr">object_name</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t27 r1c2-t27">
<p>The name of one or more objects (wildcards are permitted) associated with the SQL statements identified by the <code dir="ltr">stmt</code>. If not applicable, this value must be set to <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t27" headers="r1c1-t27">
<p><code dir="ltr">proc_name</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t27 r1c2-t27">
<p>Name of a stored procedure to call when SQL Apply determines that a particular statement matches the filter defined by the <code dir="ltr">stmt</code>, <code dir="ltr">schema_name</code>, and <code dir="ltr">object_name</code> parameters. Specify the procedure in the following format:</p>
<p><code dir="ltr">&#39;schema.package.procedure&#39;</code></p>
<p>This procedure returns a value that directs SQL Apply to perform one of the following: execute the statement, skip the statement, or execute a replacement statement.</p>
<p>The procedures to be invoked in the case of DDL or PL/SQL take no arguments. You can access the various information needed inside the procedure by accessing the context associated with the namespace,<code dir="ltr">LSBY_APPLY_CONTEXT</code>.</p>
<p>For a full list of parameters that are accessible in the context of the skip procedure, see the <code dir="ltr">DBMS_LOGSTBDY_CONTEXT</code> package.</p>
<p>The parameters of interest in the case of DDLs are: <code dir="ltr">STATEMENT</code>, <code dir="ltr">STATEMENT_TYPE</code>, <code dir="ltr">SCHEMA</code>, <code dir="ltr">NAME</code>, <code dir="ltr">CURENT_SCHEMA</code>, <code dir="ltr">XIDUSN</code>, <code dir="ltr">XIDSLT</code>, <code dir="ltr">XIDSQN</code> and <code dir="ltr">SKIP_ACTION</code>.</p>
<p>The parameters of interest in the case of PL/SQL are: <code dir="ltr">STATEMENT</code>, <code dir="ltr">PACKAGE_SCHMEMA</code>, <code dir="ltr">PACKAGE_NAME</code>, <code dir="ltr">PROCEDURE_NAME</code>, <code dir="ltr">CURRENT_SCHEMA</code>, <code dir="ltr">XIDUSN</code>, <code dir="ltr">XIDSLT</code>, <code dir="ltr">XIDSQN</code>, <code dir="ltr">EXIT_STATUS</code>, and <code dir="ltr">SKIP_ACTION</code>..</p>
<p><span class="bold">Note 1</span>: The <code dir="ltr">DBMS_LOGSTDBY</code>.<code dir="ltr">SKIP_ACTION_REPLACE</code> constant is not supported for PL/SQL.</p>
<p><span class="bold">Note 2</span>: SQL Apply calls the skip handler when the procedure&#39;s exit is processed.</p>
<p><span class="bold">Note 3</span>: The <code dir="ltr">use_like</code> parameter must be set to <code dir="ltr">FALSE</code> for PL/SQL since wildcarding PL/SQL is not supported.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t27" headers="r1c1-t27">
<p><code dir="ltr">proc_name</code> (cont.)</p>
</td>
<td class="cellalignment4329" headers="r6c1-t27 r1c2-t27">
<p>A sample conditional skip rule on <code dir="ltr">DBMS_RLS.DROP_POLICY is as follows:</code></p>
<pre dir="ltr">create or replace procedure sec.mgr.skip_drop_policy 
is
l_stmt  CLOB; 
l_pkgown varchar2(30); 
l_pkgnam varchar2(30);
l_procnm varchar2(30);
l_cur_schema varchar2(30);
l_xidusn   number;
l_xidslt   number;
l_xidsqn   number;
l_exit_status number;
l_skip_action number;
Begin
-- read all relevant info
dbms_logstdby_context.get_context(name =&gt; &#39;STATEMENT&#39;, value =&gt; l_stmt);
dbms_logstdby_context.get_context(name =&gt; &#39;PACKAGE_SCHEMA&#39;, value =&gt; l_pkgown);
dbms_logstdby_context.get_context(name =&gt; &#39;PACKAGE_NAME&#39;, value =&gt; l_pkgnam);
dbms_logstdby_context.get_context(name =&gt; &#39;PROCEDURE_NAME&#39;, value =&gt; l_procnm);
dbms_logstdby_context.get_context(name =&gt; &#39;CURRENT_SCHEMA&#39;, value =&gt; l_cur_schema);
dbms_logstdby_context.get_context(name =&gt; &#39;XIDUSN&#39;, value =&gt; l_xidusn);
dbms_logstdby_context.get_context(name =&gt; &#39;XIDSLT&#39;, value =&gt; l_xidslt);
dbms_logstdby_context.get_context(name =&gt; &#39;XIDSQN&#39;, value =&gt; l_xidsqn);
dbms_logstdby_context.get_context(name =&gt; &#39;EXIT_STATUS&#39;, value =&gt; l_ext_status);
 
if 0 == l_ext_status then
Insert Into sec_mgr.logit Values
      (&#39;Success: &#39;||l_pkgown||&#39;.&#39;||l_pkgnm||&#39;.&#39;||l_procnm|| &#39; by &#39;||l_current_user);
 
If l_current_user != &#39;TESTSCHEMA&#39; Then  
      l_skip_action := DBMS_LOGSTDBY.SKIP_ACTION_APPLY;
    Else
      l_skip_action := DBMS_LOGSTDBY.SKIP_ACTION_SKIP;
    End If;  
  End If;
 
dbms_logstdby_context.set_context(name=&gt;&#39;SKIP_ACTION&#39;,
value =&gt; l_skip_action);
 
End skip_drop_policy;
</pre>
<pre dir="ltr">EXECUTE DBMS_LOGSTDBY.SKIP( -
     stmt =&gt; &#39;PL/SQL&#39;, -
     schema_name =&gt; &#39;SYS&#39;, -
     object_name =&gt; &#39;DBMS_RLS.DROP_POLICY&#39;, -
     proc_name =&gt; &#39;SEC_MGR.SKIP_DROP_POLICY&#39; -
     use_like=&gt; FALSE);
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t27" headers="r1c1-t27">
<p><code dir="ltr">use_like</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t27 r1c2-t27">
<p>Allows pattern matching to isolate the tables that you want to skip on the logical standby database. The <code dir="ltr">use_like</code> parameter matches a portion of one character value to another by searching the first value for the pattern specified by the second, and calculates strings using characters as defined by the input character set. This parameter follows the same rules for pattern matching described in the <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t27" headers="r1c1-t27">
<p><code dir="ltr">esc</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t27 r1c2-t27">
<p>Identifies an escape character (such as the character &#34;/&#34;) that you can use for pattern matching. If the escape character appears in the pattern before the character &#34;%&#34; or &#34;_&#34; then Oracle interprets this character literally in the pattern, rather than as a special pattern matching character. See<a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about pattern matching.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5642"></a>Usage Notes</p>
<ul>
<li>
<p>This procedure requires <code dir="ltr">DBA</code> privileges to execute.</p>
</li>
<li>
<p>You cannot associate a stored procedure to be invoked in the context of a DML statement. For example, the following statement returns the <code dir="ltr">ORA-16104: invalid Logical Standby option requested</code> error:</p>
<pre dir="ltr">SQL&gt; EXECUTE DBMS_LOGSTDBY.SKIP(-
     stmt =&gt; &#39;DML&#39;, -
     schema_name =&gt; &#39;HR&#39;, -
     object_name =&gt; &#39;EMPLOYEES&#39;, -
     proc_name =&gt; &#39;DML_HANDLER&#39;);
</pre>
<p>Also, if an event matches multiple rules either because of the use of wildcards while specifying the rule or because of a specification of overlapping rules. For example, if you specify a rule for the <code dir="ltr">SCHEMA_DDL</code> event for the <code dir="ltr">HR.EMPLOYEES</code> table, and a rule for the <code dir="ltr">ALTER TABLE</code> event for the <code dir="ltr">HR.EMPLOYEES</code> table, only one of the matching procedures will be invoked (alphabetically, by procedure). In the following code example, consider the following rules:</p>
<pre dir="ltr">SQL&gt; EXECUTE DBMS_LOGSTDBY.SKIP( -
     stmt =&gt; &#39;SCHEMA_DDL&#39;, -
     schema_name =&gt; &#39;HR&#39;, -
     object_name =&gt; &#39;EMPLOYEES&#39;, -
     proc_name =&gt; &#39;SCHEMA_DDL_HANDLER&#39;);
SQL&gt; EXECUTE DBMS_LOGSTDBY.SKIP( -
     stmt =&gt; &#39;ALTER TABLE&#39;, -
     schema_name =&gt; &#39;HR&#39;, -
     object_name =&gt; &#39;EMPLOYEES&#39;, -
     proc_name =&gt; &#39;TABLE_ALTER_HANDLER&#39;);
</pre>
<p>On encountering an <code dir="ltr">ALTER TABLE</code> statement, the <code dir="ltr">schema_ddl_handler</code> procedure will be invoked because its name will be at the top of an alphabetically sorted list of procedures that are relevant to the statement.Collisions on a rule set because of a specification containing wildcard entries are resolved in a similar fashion. For example, the rules in the following example will result in the <code dir="ltr">empddl_handler</code> procedure being invoked upon encountering the <code dir="ltr">ALTER TABLE HR.EMPLOYEES ADD COLUMN RATING NUMBER</code> statement:</p>
<pre dir="ltr">SQL&gt; EXECUTE DBMS_LOGSTDBY.SKIP(-
     stmt =&gt; &#39;ALTER TABLE&#39;, -
     schema_name =&gt; &#39;HR&#39;, -
     object_name =&gt; &#39;EMP%&#39;, -
     proc_name =&gt; &#39;EMPDDL_HANDLER&#39;);
SQL&gt; EXECUTE DBMS_LOGSTDBY.SKIP( -
     stmt =&gt; &#39;ALTER TABLE&#39;, -
     schema_name =&gt; &#39;HR&#39;, -
     object_name =&gt; &#39;EMPLOYEES&#39;, -
     proc_name =&gt; &#39;EMPLOYEE_DDL_HANDLER&#39;);
</pre></li>
<li>
<p>Use the <code dir="ltr">SKIP</code> procedure with caution, particularly when skipping DDL statements. If a <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> statement is skipped, for example, you must also specify other DDL statements that refer to that table in the <code dir="ltr">SKIP</code> procedure. Otherwise, the statements will fail and cause an exception. When this happens, SQL Apply stops running.</p>
</li>
<li>
<p>Before calling the <code dir="ltr">SKIP</code> procedure, SQL Apply must be halted. Do this by issuing an <code dir="ltr">ALTER DATABASE STOP LOGICAL STANDBY APPLY</code> statement. Once all desired filters have been specified, issue an <code dir="ltr">ALTER DATABASE START LOGICAL STANDBY APPLY IMMEDIATE</code> statement to start SQL Apply using the new filter settings.</p>
</li>
<li>
<p>See the <code dir="ltr">UNSKIP</code> procedure for information about reversing (undoing) the settings of the <code dir="ltr">SKIP</code> procedure.</p>
</li>
<li>
<p>For <code dir="ltr">USER</code> statements, the <code dir="ltr">SCHEMA_NAME</code> parameter will be the user and specify &#39;%&#39; for the <code dir="ltr">OBJECT_NAME</code> parameter.</p>
</li>
<li>
<p>If the <code dir="ltr">PROC_NAME</code> parameter is supplied, it must already exist in <code dir="ltr">DBA_PROCEDURES</code> and it must execute with <code dir="ltr">DEFINER</code> rights. If the procedure is declared with <code dir="ltr">INVOKER</code> rights, the <code dir="ltr">ORA-1031: insufficient privileges</code> message will be returned.</p>
</li>
<li>
<p>If the procedure returns a <code dir="ltr">REPLACEMENT</code> statement, the <code dir="ltr">REPLACEMENT</code> statement will be executed using the <code dir="ltr">SYSTEM</code> and <code dir="ltr">OBJECT</code> privileges of the owner of the procedure.</p>
</li>
<li>
<p>The PL/SQL block of a <code dir="ltr">SKIP</code> procedure cannot contain transaction control statements (for example, <code dir="ltr">COMMIT</code>, <code dir="ltr">ROLLBACK</code>, <code dir="ltr">SAVEPOINT</code>, and <code dir="ltr">SET CONSTRAINT</code>) unless the block is declared to be an autonomous transaction.</p>
</li>
</ul>
<p class="subhead2"><a id="ARPLS66852"></a>Skip Statement Options</p>
<p><a href="#BABGCFCA">Table 92-23</a> lists the supported values for the <code dir="ltr">stmt</code> parameter of the <code dir="ltr">SKIP</code> procedure. The left column of the table lists the keywords that may be used to identify the set of SQL statements to the right of the keyword. In addition, any of the SQL statements listed in the <code dir="ltr">sys.audit_actions</code> table (shown in the right column of <a href="#BABGCFCA">Table 92-23</a>) are also valid values. Note that keywords are generally defined by database object.</p>
<div id="ARPLS66853" class="tblformal">
<p class="titleintable"><a id="sthref5643"></a><a id="BABGCFCA"></a>Table 92-23 Supported Values for the <code dir="ltr">stmt</code> Parameter</p>
<table class="cellalignment4330" title="Supported Values for the stmt Parameter" summary="Lists optional keywords for the SKIP statement." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t28">Keyword</th>
<th class="cellalignment4328" id="r1c2-t28">Associated SQL Statements</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t28" headers="r1c1-t28">
<p>There is no keyword for this group of SQL statements.</p>
</td>
<td class="cellalignment4329" headers="r2c1-t28 r1c2-t28">
<pre dir="ltr">GRANT
REVOKE
ANALYZE TABLE
ANALYZE INDEX
ANALYZE CLUSTER
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t28" headers="r1c1-t28">
<p><code dir="ltr">CLUSTER</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t28 r1c2-t28">
<pre dir="ltr">AUDIT CLUSTER
CREATE CLUSTER
DROP CLUSTER
TRUNCATE CLUSTER
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t28" headers="r1c1-t28">
<p><code dir="ltr">CONTAINER</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t28 r1c2-t28">
<p>See <a href="#BGBJGGJA">&#34;Skipping Containers&#34;</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t28" headers="r1c1-t28">
<p><code dir="ltr">CONTEXT</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t28 r1c2-t28">
<pre dir="ltr">CREATE CONTEXT
DROP CONTEXT
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t28" headers="r1c1-t28">
<p><code dir="ltr">DATABASE LINK</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t28 r1c2-t28">
<pre dir="ltr">CREATE DATABASE LINK
CREATE PUBLIC DATABASE LINK
DROP DATABASE LINK
DROP PUBLIC DATABASE LINK
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t28" headers="r1c1-t28">
<p><code dir="ltr">DIMENSION</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t28 r1c2-t28">
<pre dir="ltr">ALTER DIMENSION
CREATE DIMENSION
DROP DIMENSION
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t28" headers="r1c1-t28">
<p><code dir="ltr">DIRECTORY</code><a id="sthref5644" href="#sthref5644" onclick="footdisplay(1,&#34;All directory objects are owned by \u003ccode dir=\&#34;ltr\&#34;\u003eSYS\u003c/code\u003e, but for the purpose of filtering them with a skip directive the schema should be specified as \x27%\x27\&#34;.&#34;)"><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></p>
</td>
<td class="cellalignment4329" headers="r8c1-t28 r1c2-t28">
<pre dir="ltr">CREATE DIRECTORY
DROP DIRECTORY
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t28" headers="r1c1-t28">
<p><code dir="ltr">DML</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t28 r1c2-t28">
<p>Includes DML statements on a table (for example: <code dir="ltr">INSERT</code>, <code dir="ltr">UPDATE</code>, and <code dir="ltr">DELETE</code>)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t28" headers="r1c1-t28">
<p><code dir="ltr">INDEX</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t28 r1c2-t28">
<pre dir="ltr">ALTER INDEX
CREATE INDEX
DROP INDEX
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t28" headers="r1c1-t28">
<p><code dir="ltr">NON_SCHEMA_DDL</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t28 r1c2-t28">
<p><span class="italic">All DDL that does not pertain to a particular schema</span></p>
<p><span class="bold">Note:</span> <code dir="ltr">SCHEMA_NAME</code> and <code dir="ltr">OBJECT_NAME</code> must be null</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t28" headers="r1c1-t28">
<p><code dir="ltr">PL/SQL</code><a id="sthref5645" href="#sthref5645" onclick="footdisplay(2,&#34; See \u003ca class=\&#34;olink SBYDB00315\&#34; target=\&#34;d_lsbydb\&#34; href=\&#34;../SBYDB/data_support.htm#SBYDB00315\&#34;\u003e\u003cspan class=\&#34;italic\&#34;\u003eOracle Data Guard Concepts and Administration\u003c/span\u003e\u003c/a\u003e for information about supported packages.&#34;)"><sup class="tablefootnote">Foot&nbsp;2&nbsp;</sup></a></p>
</td>
<td class="cellalignment4329" headers="r12c1-t28 r1c2-t28">
<p>Execute Oracle-supplied package.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t28" headers="r1c1-t28">
<p><code dir="ltr">PROCEDURE</code><a id="sthref5646" href="#sthref5646" onclick="footdisplay(3,&#34;Java schema objects (sources, classes, and resources) are considered the same as procedure for purposes of skipping (ignoring) SQL statements.&#34;)"><sup class="tablefootnote">Foot&nbsp;3&nbsp;</sup></a></p>
</td>
<td class="cellalignment4329" headers="r13c1-t28 r1c2-t28">
<pre dir="ltr">ALTER FUNCTION
ALTER PACKAGE
ALTER PACKAGE BODY
ALTER PROCEDURE
CREATE FUNCTION
CREATE LIBRARY
CREATE PACKAGE
CREATE PACKAGE BODY
CREATE PROCEDURE
DROP FUNCTION
DROP LIBRARY
DROP PACKAGE
DROP PACKAGE BODY
DROP PROCEDURE
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t28" headers="r1c1-t28">
<p><code dir="ltr">PROFILE</code></p>
</td>
<td class="cellalignment4329" headers="r14c1-t28 r1c2-t28">
<pre dir="ltr">ALTER PROFILE
CREATE PROFILE
DROP PROFILE
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r15c1-t28" headers="r1c1-t28">
<p><code dir="ltr">ROLE</code></p>
</td>
<td class="cellalignment4329" headers="r15c1-t28 r1c2-t28">
<pre dir="ltr">ALTER ROLE
CREATE ROLE
DROP ROLE
SET ROLE
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r16c1-t28" headers="r1c1-t28">
<p><code dir="ltr">ROLLBACK STATEMENT</code></p>
</td>
<td class="cellalignment4329" headers="r16c1-t28 r1c2-t28">
<pre dir="ltr">ALTER ROLLBACK SEGMENT
CREATE ROLLBACK SEGMENT
DROP ROLLBACK SEGMENT
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r17c1-t28" headers="r1c1-t28">
<p><code dir="ltr">SCHEMA_DDL</code></p>
</td>
<td class="cellalignment4329" headers="r17c1-t28 r1c2-t28">
<p><span class="italic">All DDL statements that create, modify, or drop schema objects (for example: tables, indexes, and columns)</span></p>
<p><span class="bold">Note:</span> <code dir="ltr">SCHEMA_NAME</code> and <code dir="ltr">OBJECT_NAME</code> must <span class="italic">not</span> be null</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r18c1-t28" headers="r1c1-t28">
<p><code dir="ltr">SEQUENCE</code></p>
</td>
<td class="cellalignment4329" headers="r18c1-t28 r1c2-t28">
<pre dir="ltr">ALTER SEQUENCE
CREATE SEQUENCE
DROP SEQUENCE
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r19c1-t28" headers="r1c1-t28">
<p><code dir="ltr">SYNONYM</code></p>
</td>
<td class="cellalignment4329" headers="r19c1-t28 r1c2-t28">
<pre dir="ltr">CREATE PUBLIC SYNONYM
CREATE SYNONYM
DROP PUBLIC SYNONYM
DROP SYNONYM
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r20c1-t28" headers="r1c1-t28">
<p><code dir="ltr">SYSTEM AUDIT</code></p>
</td>
<td class="cellalignment4329" headers="r20c1-t28 r1c2-t28">
<pre dir="ltr">AUDIT <span class="variable">SQL_statements</span>
NOAUDIT <span class="variable">SQL_statements</span>
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r21c1-t28" headers="r1c1-t28">
<p><code dir="ltr">TABLE</code></p>
</td>
<td class="cellalignment4329" headers="r21c1-t28 r1c2-t28">
<pre dir="ltr">CREATE TABLE
ALTER TABLE
DROP TABLE
TRUNCATE TABLE
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r22c1-t28" headers="r1c1-t28">
<p><code dir="ltr">TABLESPACE</code></p>
</td>
<td class="cellalignment4329" headers="r22c1-t28 r1c2-t28">
<pre dir="ltr">CREATE TABLESPACE
DROP TABLESPACE
ALTER TABLESPACE
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r23c1-t28" headers="r1c1-t28">
<p><code dir="ltr">TRIGGER</code></p>
</td>
<td class="cellalignment4329" headers="r23c1-t28 r1c2-t28">
<pre dir="ltr">ALTER TRIGGER
CREATE TRIGGER
DISABLE ALL TRIGGERS
DISABLE TRIGGER
DROP TRIGGER
ENABLE ALL TRIGGERS
ENABLE TRIGGER
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r24c1-t28" headers="r1c1-t28">
<p><code dir="ltr">TYPE</code></p>
</td>
<td class="cellalignment4329" headers="r24c1-t28 r1c2-t28">
<pre dir="ltr">ALTER TYPE
ALTER TYPE BODY
CREATE TYPE
CREATE TYPE BODY
DROP TYPE
DROP TYPE BODY
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r25c1-t28" headers="r1c1-t28">
<p><code dir="ltr">USER</code></p>
</td>
<td class="cellalignment4329" headers="r25c1-t28 r1c2-t28">
<pre dir="ltr">ALTER USER
CREATE USER
DROP USER
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r26c1-t28" headers="r1c1-t28">
<p><code dir="ltr">VIEW</code></p>
</td>
<td class="cellalignment4329" headers="r26c1-t28 r1c2-t28">
<pre dir="ltr">CREATE VIEW
DROP VIEW
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r27c1-t28" headers="r1c1-t28">
<p><code dir="ltr">VIEW</code></p>
</td>
<td class="cellalignment4329" headers="r27c1-t28 r1c2-t28">
<pre dir="ltr">CREATE VIEW
DROP VIEW
</pre></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>All directory objects are owned by <code dir="ltr">SYS</code>, but for the purpose of filtering them with a skip directive the schema should be specified as &#39;%&#39;&#34;.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;2&nbsp;</sup> See <a class="olink SBYDB00315" href="../SBYDB/data_support.htm#SBYDB00315"><span class="italic">Oracle Data Guard Concepts and Administration</span></a> for information about supported packages.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;3&nbsp;</sup>Java schema objects (sources, classes, and resources) are considered the same as procedure for purposes of skipping (ignoring) SQL statements.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5647"></a>Exceptions</p>
<div id="ARPLS66854" class="tblformal">
<p class="titleintable"><a id="sthref5648"></a><a id="sthref5649"></a>Table 92-24 DBMS_LOGSTDBY.SKIP Procedure Exceptions</p>
<table class="cellalignment4330" title="DBMS_LOGSTDBY.SKIP Procedure Exceptions" summary="Lists exceptions returned by the DBMS_LOGSTDBY.SKIP subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t29">Exception</th>
<th class="cellalignment4328" id="r1c2-t29">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t29" headers="r1c1-t29">
<p><code dir="ltr">ORA-01031</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t29 r1c2-t29">
<p>Insufficient privileges:</p>
<ul>
<li>
<p>Procedure used <code dir="ltr">INVOKER</code> rights</p>
</li>
<li>
<p>Procedure needs <code dir="ltr">DBA</code> privileges</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t29" headers="r1c1-t29">
<p><code dir="ltr">ORA-16103</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t29 r1c2-t29">
<p>Logical standby apply must be stopped to allow this operation.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t29" headers="r1c1-t29">
<p><code dir="ltr">ORA-16104</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t29 r1c2-t29">
<p>Invalid logical standby option requested.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t29" headers="r1c1-t29">
<p><code dir="ltr">ORA-16203</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t29 r1c2-t29">
<p>&#34;Unable to interpret <code dir="ltr">SKIP</code> procedure return values.&#34;</p>
<p>Indicates that a <code dir="ltr">SKIP</code> procedure has either generated an exception or has returned ambiguous values. You can identify the offending procedure by examining the <code dir="ltr">DBA_LOGSTDBY_EVENTS</code> view.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t29" headers="r1c1-t29">
<p><code dir="ltr">ORA-16236</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t29 r1c2-t29">
<p>Logical standby metadata operation in progress.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5650"></a>Examples</p>
<dl>
<dd><a id="ARPLS73690"></a><a id="sthref5651"></a></dd>
<dt class="seghead">Example 1&nbsp;&nbsp;&nbsp;Skipping all DML and DDL changes made to a schema</dt>
<dd>
<p>The following example shows how to specify rules so that SQL Apply will skip both DDL and DML statements made to the HR schema.</p>
<pre dir="ltr">SQL&gt; EXECUTE DBMS_LOGSTDBY.SKIP(STMT =&gt; &#39;SCHEMA_DDL&#39;, -
     schema_name =&gt; &#39;HR&#39;, -
     object_name =&gt; &#39;%&#39;, -
     proc_name =&gt; null);
SQL&gt; EXECUTE DBMS_LOGSTDBY.SKIP(STMT =&gt; &#39;DML&#39;, -
     schema_name =&gt; &#39;HR&#39;, -
     object_name =&gt; &#39;%&#39;, -
     proc_name =&gt; null);
</pre></dd>
<dd><a id="ARPLS73691"></a><a id="sthref5652"></a></dd>
<dt class="seghead">Example 2&nbsp;&nbsp;&nbsp;Creating a procedure to handle different file system organization</dt>
<dd>
<p>For example, if the file system organization in the logical standby database is different than that in the primary database, you can write a <code dir="ltr">SKIP</code> procedure to handle DDL statements with file specifications transparently.The following procedure can handle DDL statements as long as you follow a specific naming convention for the file specification string.</p>
<ol>
<li>
<p>Create the <code dir="ltr">SKIP</code> procedure to handle tablespace DDL statements:</p>
<pre dir="ltr">CREATE OR REPLACE PROCEDURE sys.handle_tbs_ddl 
IS
l_old_stmt varchar2(4000);
l_stmt_typ varcahr2(40);
l_schema   varchar2(30);
l_name     varchar2(30);
l_xidusn   number;
l_xidslt   number;
l_xidsqn   number;
l_skip_action number;
l_new_stmt varchar2(4000);
 
-- read all information
dbms_logstdby_context.get_context(name=&gt;&#39;STATEMENT&#39;,value=&gt;l_old_stmt);
  dbms_logstdby_context.get_context(name=&gt;&#39;STATEMENT_TYPE&#39;,value=&gt;l_stmt_type);
  dbms_logstdby_context.get_context(name=&gt;&#39;OWNER&#39;,value=&gt;l_schema);
  dbms_logstdby_context.get_context(name=&gt;&#39;NAME&#39;,value=&gt;l_name);
  dbms_logstdby_context.get_context(name=&gt;&#39;XIDUSN&#39;,value=&gt;l_xidusn);
  dbms_logstdby_context.get_context(name=&gt;&#39;XIDSLT&#39;,value=&gt;l_xidslt);
  dbms_logstdby_context.get_context(name=&gt;&#39;XIDSQN&#39;,value=&gt;l_xidsqn);
  dbms_logstdby_context.get_context(name=&gt;&#39;CONTAINER_NAME&#39;,value=&gt;l_conname);
 
--
-- All primary file specification that contains a directory
-- /usr/orcl/primary/dbs
-- should go to /usr/orcl/stdby directory specification
 
  BEGIN
  l_new_stmt := replace (l_old_stmt, &#39;/usr/orcl/primary/dbs&#39;,&#39;/usr/orcl/stdby&#39;);
l_skip_action := DBMS_LOGSTDBY.SKIP_ACTION_REPLACE;
  EXCEPTION
  WHEN OTHERS THEN
    l_skip_action := DBMS_LOGSTDBY.SKIP_ACTION_ERROR;
    l_new_stmt := NULL;
  END;
 
  dbms_logstdby_context.set_context(name=&gt;new_statement, value =&gt; l_new_stmt);
dbms_logstdby_context.set_context(name=&gt;&#39;SKIP_ACTION&#39;, value =&gt; l_skip_action);
END handle_tbs_ddl;
</pre></li>
<li>
<p>Register the <code dir="ltr">SKIP</code> procedure with SQL Apply:</p>
<pre dir="ltr">SQL&gt; EXECUTE DBMS_LOGSTDBY.SKIP (stmt =&gt; &#39;TABLESPACE&#39;, -
             proc_name =&gt; &#39;SYS.HANDLE_TBS_DDL&#39;);
</pre></li>
</ol>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BGBJGGJA"></a>Skipping Containers</p>
<p>To skip a container (either a PDB or the root), use the <code dir="ltr">CONTAINER</code> keyword. All SQL statements executed on the container, as well as any other actions taken on the container, are skipped.</p>
<p>You can skip a particular PDB within a CDB. For example, the following command skips the PDB named <code dir="ltr">PDB1</code>. The command must be executed at the root level:</p>
<pre dir="ltr">SQL&gt; EXECUTE DBMS_LOGSTDBY.SKIP(stmt =&gt; &#39;CONTAINER&#39;, object_name =&gt; &#39;PDB1&#39;);
</pre>
<p>As shown in the following example, you could also skip only the root of the CDB, but not any of the PDBs that exist under the root. The command must be executed at the root level:</p>
<pre dir="ltr">SQL&gt; EXECUTE DBMS_LOGSTDBY.SKIP(stmt =&gt; &#39;CONTAINER&#39;, object_name =&gt; &#39;CDB$ROOT&#39;);
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
To create other skip rules for a container, create the rules from within the container. The container to which the rules will apply is automatically derived from the container in which the rules are created.</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66855" class="refsect2"><a id="i997648"></a>
<h3 class="refsect2">SKIP_ERROR Procedure<a id="sthref5653"></a></h3>
<p>Upon encountering an error, the logical standby database uses the criteria contained in this procedure to determine a course of action. The default action when a match is found is to skip the error and continue with applying changes. However, if a procedure is supplied, then <code dir="ltr">SKIP_ERROR</code> can take other actions depending on the situation. It can do nothing, which causes SQL Apply to stop, or it can change the error message text and stop SQL Apply, or it can actually skip the error.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5654"></a>Syntax</p>
<pre dir="ltr">DBMS_LOGSTDBY.SKIP_ERROR (
     stmt                      IN VARCHAR2,
     schema_name               IN VARCHAR2 DEFAULT NULL,
     object_name               IN VARCHAR2 DEFAULT NULL,
     proc_name                 IN VARCHAR2 DEFAULT NULL,
     use_like                  IN BOOLEAN  DEFAULT NULL,
     esc                       IN CHAR1    DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5655"></a>Parameters</p>
<div id="ARPLS66856" class="tblformal">
<p class="titleintable"><a id="sthref5656"></a><a id="BDCBGJDC"></a>Table 92-25 SKIP_ERROR Procedure Parameters</p>
<table class="cellalignment4330" title="SKIP_ERROR Procedure Parameters" summary="Describes the parameters you set on the SKIP_ERROR subprogram of the DBMS_LOGSTDBY package." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t31">Parameter</th>
<th class="cellalignment4328" id="r1c2-t31">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t31" headers="r1c1-t31">
<p><code dir="ltr">stmt</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t31 r1c2-t31">
<p>Either a keyword that identifies a set of SQL statements or a specific SQL statement. The use of keywords simplifies configuration because keywords, generally defined by the database object, identify all SQL statements that operate on the specified object. <a href="#BABGCFCA">Table 92-23</a> shows a list of keywords and the equivalent SQL statements, either of which is a valid value for this parameter.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t31" headers="r1c1-t31">
<p><code dir="ltr">schema_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t31 r1c2-t31">
<p>The name of one or more schemas (wildcards are permitted) associated with the SQL statements identified by the <code dir="ltr">stmt</code> parameter. If not applicable, this value must be set to <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t31" headers="r1c1-t31">
<p><code dir="ltr">object_name</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t31 r1c2-t31">
<p>The name of one or more objects (wildcards are permitted) associated with the SQL statements identified by the <code dir="ltr">stmt</code>. If not applicable, this value must be set to <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t31" headers="r1c1-t31">
<p><code dir="ltr">proc_name</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t31 r1c2-t31">
<p>Name of a stored procedure to call when SQL Apply encounters an error and determines a particular statement matches the filter defined by the <code dir="ltr">stmt</code>, <code dir="ltr">schema_name</code>, and <code dir="ltr">object_name</code> parameters. Specify the procedure in the following format:</p>
<p><code dir="ltr">&#39;&#34;schema&#34;.&#34;package&#34;.&#34;procedure&#34;&#39;</code></p>
<p>This procedure returns an error message that directs SQL Apply to perform one of the following actions:</p>
<ul>
<li>
<p>Silently skip the error and continue with SQL Apply</p>
</li>
<li>
<p>Replace the error message that would have been created with a custom one, and stop SQL Apply</p>
</li>
<li>
<p>Do nothing, causing SQL Apply to stop and the original error message to be logged</p>
</li>
</ul>
<p>The procedure registered with SQL Apply does not take any parameters. The context associated with <code dir="ltr">LSBY_APPLY_CONTEXT</code> can be used to retrieve all relevant information related to the error. See the <code dir="ltr">DBMS_LOGSTDBY_CONTEXT</code> package for a list of all parameters associated with <code dir="ltr">LSBY_APPLY_CONTEXT</code>.</p>
<p>The parameters of interest for procedures registered with <code dir="ltr">SKIP_ERROR</code> are <code dir="ltr">CONTAINER_NAME</code>, <code dir="ltr">STATEMENT</code>, <code dir="ltr">STATEMENT_TYPE</code>, <code dir="ltr">SCHEMA</code>, <code dir="ltr">NAME</code>, <code dir="ltr">XIDUSN</code>, <code dir="ltr">XIDSLT</code>, <code dir="ltr">XIDSQN</code>, <code dir="ltr">ERROR</code> and <code dir="ltr">NEW_ERROR</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t31" headers="r1c1-t31">
<p><code dir="ltr">use_like</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t31 r1c2-t31">
<p>Allows pattern matching to isolate the tables that you want to skip on the logical standby database. The <code dir="ltr">use_like</code> parameter matches a portion of one character value to another by searching the first value for the pattern specified by the second, and calculates strings using characters as defined by the input character set. This parameter follows the same rules for pattern matching described in the <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t31" headers="r1c1-t31">
<p><code dir="ltr">esc</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t31 r1c2-t31">
<p>Identifies an escape character (such as the characters &#34;%&#34; or &#34;_&#34;) that you can use for pattern matching. If the escape character appears in the pattern before the character &#34;%&#34; or &#34;_&#34; then Oracle interprets this character literally in the pattern, rather than as a special pattern matching character. See<a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about pattern matching.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5657"></a>Usage Notes</p>
<ul>
<li>
<p>A stored procedure provided to the <code dir="ltr">SKIP_ERROR</code> procedure is called when SQL Apply encounters an error that could shut down the application of redo logs to the standby database.</p>
</li>
<li>
<p>Running this stored procedure affects the error being written in the <code dir="ltr">STATUS</code> column of the <code dir="ltr">DBA_LOGSTDBY_EVENTS</code> table. The <code dir="ltr">STATUS_CODE</code> column remains unchanged. If the stored procedure is to have no effect, that is, apply will be stopped, then the <code dir="ltr">NEW_ERROR</code> is written to the events table. To truly have no effect, set <code dir="ltr">NEW_ERROR</code> to <code dir="ltr">ERROR</code> in the procedure.</p>
</li>
<li>
<p>If the stored procedure requires that a shutdown be avoided, then you must set <code dir="ltr">NEW_ERROR</code> to <code dir="ltr">NULL</code>.</p>
</li>
<li>
<p>This procedure requires <code dir="ltr">DBA</code> privileges to execute.</p>
</li>
<li>
<p>For <code dir="ltr">USER</code> statements, the <code dir="ltr">SCHEMA_NAME</code> parameter will be the user and you should specify &#39;%&#39; for the <code dir="ltr">OBJECT_NAME</code> parameter.</p>
</li>
<li>
<p>If the <code dir="ltr">PROC_NAME</code> parameter is specified, it must already exist in <code dir="ltr">DBA_PROCEDURES</code> and it must execute with <code dir="ltr">DEFINERS</code> rights. If the procedure is declared with <code dir="ltr">INVOKERS</code> rights, the <code dir="ltr">ORA-1031: insufficient privileges</code> message will be returned.</p>
</li>
<li>
<p>The PL/SQL block of a <code dir="ltr">SKIP_ERROR</code> procedure cannot contain transaction control statements (for example: <code dir="ltr">COMMIT</code>, <code dir="ltr">ROLLBACK</code>, <code dir="ltr">SAVEPOINT</code>, and SET <code dir="ltr">CONSTRAINT</code>) unless the block is declared to be an autonomous transaction using the following syntax:</p>
<pre dir="ltr">PRAGMA AUTONOMOUS_TRANSACTION
</pre></li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5658"></a>Exceptions</p>
<div id="ARPLS66857" class="tblformal">
<p class="titleintable"><a id="sthref5659"></a><a id="sthref5660"></a>Table 92-26 SKIP_ERROR Procedure Exceptions</p>
<table class="cellalignment4330" title="SKIP_ERROR Procedure Exceptions" summary="Lists the exceptions you might encounter when you use the SKIP subprogram on the DBMS_LOGSTDBY package." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t32">Exception</th>
<th class="cellalignment4328" id="r1c2-t32">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t32" headers="r1c1-t32">
<p><code dir="ltr">ORA-01031</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t32 r1c2-t32">
<p>Insufficient privileges:</p>
<ul>
<li>
<p>Procedure used <code dir="ltr">INVOKER</code> rights</p>
</li>
<li>
<p>Procedure needs <code dir="ltr">DBA</code> privileges</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t32" headers="r1c1-t32">
<p><code dir="ltr">ORA-16103</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t32 r1c2-t32">
<p>Logical Standby apply must be stopped to allow this operation</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t32" headers="r1c1-t32">
<p><code dir="ltr">ORA-16104</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t32 r1c2-t32">
<p>invalid Logical Standby option requested</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t32" headers="r1c1-t32">
<p><code dir="ltr">ORA-16236</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t32 r1c2-t32">
<p>Logical Standby metadata operation in progress</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5661"></a>Example 1</p>
<p>The following example shows how to specify rules so that SQL Apply will skip any error raised from any <code dir="ltr">GRANT DDL</code> command.</p>
<pre dir="ltr">SQL&gt; EXECUTE DBMS_LOGSTDBY.SKIP_ERROR(&#39;GRANT&#39;) 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5662"></a>Example 2</p>
<p>To skip errors on <code dir="ltr">GRANT</code> statements on <code dir="ltr">SYS</code> or <code dir="ltr">HR</code> schemas, define a procedure <code dir="ltr">handle_error_ddl</code> and register it. In the following example, assume that <code dir="ltr">handle_error_ddl</code> is a free-standing procedure in the <code dir="ltr">SYS</code> schema.</p>
<ol>
<li>
<p>Create the error-handler procedure:</p>
<pre dir="ltr">CREATE OR REPLACE PROCEDURE sys.handle_error_ddl
is
l_stmt    VARCHAR2(4000);
l_stmt_type VARCHAR2(40); 
l_schema    VARCHAR2(30);
l_name      VARCHAR2(30);
l_xidusn      NUMBER;   
l_xidslt      NUMBER;   
l_xidsqn      NUMBER;
l_error     VARCHAR2(4000);
l_conname    VARCHAR2(30); 
l_newerr   VARCHAR2(4000);
 
BEGIN
 dbms_logstdby_context.get_context(name=&gt;&#39;STATEMENT&#39;,value=&gt;l_stmt);
  dbms_logstdby_context.get_context(name=&gt;&#39;STATEMENT_TYPE&#39;,value=&gt;l_stmt_type);
  dbms_logstdby_context.get_context(name=&gt;&#39;SCHEMA&#39;,value=&gt;l_schema);
  dbms_logstdby_context.get_context(name=&gt;&#39;NAME&#39;,value=&gt;l_name);
  dbms_logstdby_context.get_context(name=&gt;&#39;XIDUSN&#39;,value=&gt;l_xidusn);
  dbms_logstdby_context.get_context(name=&gt;&#39;XIDSLT&#39;,value=&gt;l_xidslt);
  dbms_logstdby_context.get_context(name=&gt;&#39;XIDSQN&#39;,value=&gt;l_xidsqn);
  dbms_logstdby_context.get_context(name=&gt;&#39;ERROR&#39;,value=&gt;l_error);
  dbms_logstdby_context.get_context(name=&gt;&#39;CONTAINER_NAME&#39;,value=&gt;l_conname);
 
-- default error to what we already have
l_new_error := l_error;
 
-- Ignore any GRANT errors on SYS or HR schemas
 
IF INSTR(UPPER(l_stmt), &#39;GRANT&#39;) &gt; 0
THEN
IF l_schema is NULL 
OR (l_schema is NOT NULL AND
(UPPER(l_schema) = &#39;SYS&#39; OR
UPPER(l_schema) = &#39;HR&#39;)
THEN
l_new_error := NULL;
-- record the fact that we just skipped an error on &#39;SYS&#39; or &#39;HR&#39; schemas 
-- code not shown here 
END IF;
END IF;
 
dbms_logstdby_context.set_context(name =&gt; &#39;NEW_ERROR&#39;, value =&gt; l_new_error);
 
END handle_error_ddl;
/
</pre></li>
<li>
<p>Register the error handler with SQL Apply:</p>
<pre dir="ltr">SQL&gt; EXECUTE DBMS_LOGSTDBY.SKIP_ERROR ( -
     statement =&gt; &#39;NON_SCHEMA_DDL&#39;, -
     schema_name =&gt; NULL, -
     object_name =&gt; NULL, -
     proc_name =&gt; &#39;SYS.HANDLE_ERROR_DDL&#39;);
</pre></li>
</ol>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS927" class="refsect2"><a id="i997765"></a>
<h3 class="refsect2">SKIP_TRANSACTION Procedure<a id="sthref5663"></a></h3>
<p>This procedure provides a way to skip (ignore) applying transactions to the logical standby database. You can skip specific transactions by specifying transaction identification information.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5664"></a>Syntax</p>
<pre dir="ltr">DBMS_LOGSTDBY.SKIP_TRANSACTION (
     xidusn          IN NUMBER,
     xidslt          IN NUMBER,
     xidsqn          IN NUMBER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5665"></a>Parameters</p>
<div id="ARPLS66858" class="tblformal">
<p class="titleintable"><a id="sthref5666"></a><a id="BDCJJFBH"></a>Table 92-27 SKIP_TRANSACTION Procedure Parameters</p>
<table class="cellalignment4330" title="SKIP_TRANSACTION Procedure Parameters " summary="Describes the parameters you set on the SKIP_TRANSACTION subprogram of the DBMS_LOGSTDBY package." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t33">Parameter</th>
<th class="cellalignment4328" id="r1c2-t33">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t33" headers="r1c1-t33">
<p><code dir="ltr">XIDUSN NUMBER</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t33 r1c2-t33">
<p>Transaction ID undo segment number of the transaction being skipped</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t33" headers="r1c1-t33">
<p><code dir="ltr">XIDSLT NUMBER</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t33 r1c2-t33">
<p>Transaction ID slot number of the transaction being skipped</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t33" headers="r1c1-t33">
<p><code dir="ltr">XIDSQN NUMBER</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t33 r1c2-t33">
<p>Transaction ID sequence number of the transaction being skipped</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5667"></a>Usage Notes</p>
<p>If SQL Apply stops due to a particular transaction (for example, a DDL transaction), you can specify that transaction ID and then continue to apply. You can call this procedure multiple times for as many transactions as you want SQL Apply to ignore.</p>
<div class="infoboxnotewarn">
<p class="notep1">CAUTION:</p>
<p class="warnsp"><code dir="ltr"><span class="codeinlinebold">SKIP_TRANSACTION</span></code> is an inherently dangerous operation. Do not invoke this procedure unless you have examined the transaction in question through the <code dir="ltr"><span class="codeinlinebold">V$LOGMNR_CONTENTS</span></code> view and have taken compensating actions at the logical standby database. <code dir="ltr"><span class="codeinlinebold">SKIP_TRANSACTION</span></code> is not the appropriate procedure to invoke to skip DML changes to a table.</p>
<p class="warnsp">To skip a DML failure, use a <code dir="ltr"><span class="codeinlinebold">SKIP</span></code> procedure, such as <code dir="ltr"><span class="codeinlinebold">SKIP(&#39;DML&#39;,&#39;MySchema&#39;,&#39;MyFailed Table&#39;).</span></code> Using the <code dir="ltr"><span class="codeinlinebold">SKIP_TRANSACTION</span></code> procedure for DML transactions may skip changes for other tables, thus logically corrupting them.</p>
</div>
</div>
<!-- class="refsubsect" -->
<ul>
<li>
<p>This procedure requires <code dir="ltr">DBA</code> privileges to execute.</p>
</li>
<li>
<p>Use the <code dir="ltr">DBA_LOGSTDBY_SKIP_TRANSACTION</code> view to list the transactions that are going to be skipped by SQL Apply.</p>
</li>
<li>
<p>Also, see the <code dir="ltr">ALTER DATABASE START LOGICAL STANDBY SKIP FAILED TRANSACTION</code> statement in <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</li>
</ul>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5668"></a>Exceptions</p>
<div id="ARPLS66859" class="tblformal">
<p class="titleintable"><a id="sthref5669"></a><a id="sthref5670"></a>Table 92-28 SKIP_TRANSACTION Procedure Exceptions</p>
<table class="cellalignment4330" title="SKIP_TRANSACTION Procedure Exceptions" summary="Lists the exceptions you might encounter when you use the SKIP subprogram on the DBMS_LOGSTDBY package." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t35">Exception</th>
<th class="cellalignment4328" id="r1c2-t35">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t35" headers="r1c1-t35">
<p><code dir="ltr">ORA-01031</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t35 r1c2-t35">
<p>Need <code dir="ltr">DBA</code> privileges</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t35" headers="r1c1-t35">
<p><code dir="ltr">ORA-16103</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t35 r1c2-t35">
<p>Logical Standby apply must be stopped to allow this operation</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t35" headers="r1c1-t35">
<p><code dir="ltr">ORA-16104</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t35 r1c2-t35">
<p>invalid Logical Standby option requested</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5671"></a>Examples</p>
<p>To skip a DDL transaction with (<code dir="ltr">XIDUSN</code>, <code dir="ltr">XIDSLT</code>, <code dir="ltr">XIDSQN</code>) of (1.13.1726) you can register a rule as shown in the following example:</p>
<pre dir="ltr">SQL&gt; EXECUTE DBMS_LOGSTDBY.SKIP_TRANSACTION (- 
     XIDUSN =&gt; 1, XIDSLT =&gt; 13, XIDSQN =&gt; 1726);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66860" class="refsect2"><a id="BGBFBFEH"></a>
<h3 class="refsect2">UNSKIP Procedure<a id="sthref5672"></a></h3>
<p>Use the <code dir="ltr">UNSKIP</code> procedure to delete rules specified earlier with the <code dir="ltr">SKIP</code> procedure. The parameters specified in the <code dir="ltr">UNSKIP</code> procedure must match exactly for it to delete an already-specified rule.</p>
<p>The <code dir="ltr">container_name</code> argument is valid only in a CDB.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5673"></a>Syntax</p>
<pre dir="ltr">DBMS_LOGSTDBY.UNSKIP (
     stmt                      IN VARCHAR2,
     schema_name               IN VARCHAR2 DEFAULT NULL,
     object_name               IN VARCHAR2 DEFUALT NULL,
     container_name            IN VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5674"></a>Parameters</p>
<p>The parameter information for the <code dir="ltr">UNSKIP</code> procedure is the same as that described for the <code dir="ltr">SKIP</code> procedure. See <a href="#CHDDEIJI">Table 92-22</a> for complete parameter information.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5675"></a>Exceptions</p>
<div id="ARPLS66861" class="tblformal">
<p class="titleintable"><a id="sthref5676"></a><a id="sthref5677"></a>Table 92-29 UNSKIP Procedure Exceptions</p>
<table class="cellalignment4330" title="UNSKIP Procedure Exceptions" summary="Lists the exceptions you might encounter when you use the SKIP subprogram on the DBMS_LOGSTDBY package." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t36">Exception</th>
<th class="cellalignment4328" id="r1c2-t36">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t36" headers="r1c1-t36">
<p><code dir="ltr">ORA-01031</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t36 r1c2-t36">
<p>need <code dir="ltr">DBA</code> privileges to execute this procedure</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t36" headers="r1c1-t36">
<p><code dir="ltr">ORA-16103</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t36 r1c2-t36">
<p>Logical Standby apply must be stopped to allow this operation</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t36" headers="r1c1-t36">
<p><code dir="ltr">ORA-16104</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t36 r1c2-t36">
<p>invalid Logical Standby option requested</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5678"></a>Usage Notes</p>
<div class="infoboxnotewarn">
<p class="notep1">CAUTION:</p>
<p class="warnsp">If DML changes for a table have been skipped and not compensated for, you must follow the call to the <code dir="ltr"><span class="codeinlinebold">UNSKIP</span></code> procedure with a call to the <code dir="ltr"><span class="codeinlinebold">INSTANTIATE_TABLE</span></code> procedure to synchronize this table with those maintained by SQL Apply.</p>
</div>
<ul>
<li>
<p>This procedure requires DBA privileges to execute.</p>
</li>
<li>
<p>Wildcards passed in the <code dir="ltr">schema_name</code> or the <code dir="ltr">object_name</code> parameter are not expanded. The wildcard character is matched at the character level. Thus, you can delete only one specified rule by invoking the <code dir="ltr">UNSKIP</code> procedure, and you will need a distinct <code dir="ltr">UNSKIP</code> procedure call to delete each rule that was previously specified.</p>
<p>For example, assume you have specified the following two rules to skip applying DML statements to the <code dir="ltr">HR.EMPLOYEE</code> and <code dir="ltr">HR.EMPTEMP</code> tables:</p>
<pre dir="ltr">SQL&gt; EXECUTE DBMS_LOGSTDBY.SKIP (STMT =&gt; &#39;DML&#39;,-
     SCHEMA_NAME =&gt; &#39;HR&#39;, -
     OBJECT_NAME =&gt; &#39;EMPLOYEE&#39;, -
     PROC_NAME =&gt; null);
SQL&gt; EXECUTE DBMS_LOGSTDBY.SKIP (STMT =&gt; &#39;DML&#39;,-
     SCHEMA_NAME =&gt; &#39;HR&#39;, -
     OBJECT_NAME =&gt; &#39;EMPTEMP&#39;, -
     PROC_NAME =&gt; null);
</pre>
<p>In the following example, the wildcard in the <code dir="ltr">TABLE_NAME</code> parameter cannot be used to delete the rules that were specified:</p>
<pre dir="ltr">SQL&gt; EXECUTE DBMS_LOGSTDBY.UNSKIP (STMT =&gt; &#39;DML&#39;,-
     SCHEMA_NAME =&gt; &#39;HR&#39;, -
     OBJECT_NAME =&gt; &#39;EMP%&#39;);
</pre>
<p>In fact, this <code dir="ltr">UNSKIP</code> procedure matches neither of the rules, because the wildcard character in the <code dir="ltr">TABLE_NAME</code> parameter is not expanded. Instead, the wildcard character will be used in an exact match to find the corresponding <code dir="ltr">SKIP</code> rule.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS929" class="refsect2"><a id="i997837"></a>
<h3 class="refsect2">UNSKIP_ERROR Procedure<a id="sthref5679"></a></h3>
<p>Use the <code dir="ltr">UNSKIP_ERROR</code> procedure to delete rules specified earlier with the <code dir="ltr">SKIP_ERROR</code> procedure. The parameters specified in the <code dir="ltr">UNSKIP_ERROR</code> procedure must match exactly for the procedure to delete an already-specified rule.</p>
<p>The <code dir="ltr">container_name</code> argument is valid only in a CDB.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5680"></a>Syntax</p>
<pre dir="ltr">DBMS_LOGSTDBY.UNSKIP_ERROR (
     stmt                      IN VARCHAR2,
     schema_name               IN VARCHAR2 DEFAULT NULL,
     object_name               IN VARCHAR2 DEFAULT NULL,
     container_name            IN VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5681"></a>Parameters</p>
<p>The parameter information for the <code dir="ltr">UNSKIP_ERROR</code> procedure is the same as that described for the <code dir="ltr">SKIP_ERROR</code> procedure. See <a href="#BDCBGJDC">Table 92-25</a> for complete parameter information.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5682"></a>Exceptions</p>
<div id="ARPLS66862" class="tblformal">
<p class="titleintable"><a id="sthref5683"></a><a id="BABEEIFC"></a>Table 92-30 UNSKIP_ERROR Procedure Exceptions</p>
<table class="cellalignment4330" title="UNSKIP_ERROR Procedure Exceptions" summary="Lists the exceptions you might encounter when you use the SKIP subprogram on the DBMS_LOGSTDBY package." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t38">Exception</th>
<th class="cellalignment4328" id="r1c2-t38">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t38" headers="r1c1-t38">
<p><code dir="ltr">ORA-01031</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t38 r1c2-t38">
<p>Need <code dir="ltr">DBA</code> privileges</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t38" headers="r1c1-t38">
<p><code dir="ltr">ORA-16103</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t38 r1c2-t38">
<p>Logical Standby apply must be stopped to allow this operation</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t38" headers="r1c1-t38">
<p><code dir="ltr">ORA-16104</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t38 r1c2-t38">
<p>invalid Logical Standby option requested</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5684"></a>Usage Notes</p>
<ul>
<li>
<p>This procedure requires <code dir="ltr">DBA</code> privileges to execute.</p>
</li>
<li>
<p>Wildcards passed in the <code dir="ltr">schema_name</code> or the <code dir="ltr">object_name</code> parameters are not expanded. Instead, the wildcard character is treated as any other character and an exact match is made. Thus, you can delete only one specified rule by invoking the <code dir="ltr">UNSKIP_ERROR</code> procedure, and you need a distinct <code dir="ltr">UNSKIP_ERROR</code> procedure call to delete each rule that you previously specified.</p>
<p>For example, assume you have specified the following two rules to handle the <code dir="ltr">HR.EMPLOYEE</code> and <code dir="ltr">HR.EMPTEMP</code> tables:</p>
<pre dir="ltr">SQL&gt; EXECUTE DBMS_LOGSTDBY.SKIP_ERROR (STMT =&gt; &#39;DML&#39;,-
     SCHEMA_NAME =&gt; &#39;HR&#39;, -
     OBJECT_NAME =&gt; &#39;EMPLOYEE&#39;, -
     PROC_NAME =&gt; &#39;hr_employee_handler&#39;);
SQL&gt; EXECUTE DBMS_LOGSTDBY.SKIP_ERROR (STMT =&gt; &#39;DML&#39;,-
     SCHEMA_NAME =&gt; &#39;HR&#39;, -
     OBJECT_NAME =&gt; &#39;EMPTEMP&#39;, -
     PROC_NAME =&gt; &#39;hr_tempemp_handler&#39;);
</pre>
<p>In this case, the following <code dir="ltr">UNSKIP</code> procedure cannot be used to delete the rules that you have specified:</p>
<pre dir="ltr">SQL&gt; EXECUTE DBMS_LOGSTDBY.UNSKIP_ERROR (STMT =&gt; &#39;DML&#39;,-
     SCHEMA_NAME =&gt; &#39;HR&#39;, -
     OBJECT_NAME =&gt; &#39;EMP%&#39;);
</pre>
<p>In fact, the <code dir="ltr">UNSKIP</code> procedure will match neither of the rules, because the wildcard character in the <code dir="ltr">OBJECT_NAME</code> parameter will not be expanded.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5685"></a>Example</p>
<p>To remove a handler that was previously registered with SQL Apply from getting called on encountering an error, you can issue the following statement:</p>
<pre dir="ltr">DBMS_LOGSTDBY.UNSKIP_ERROR ( -
      statement =&gt; &#39;NON_SCHEMA_DDL&#39;, -
      schema_name =&gt; NULL, -
      object_name =&gt; NULL);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS930" class="refsect2"><a id="i997855"></a>
<h3 class="refsect2">UNSKIP_TRANSACTION Procedure<a id="sthref5686"></a></h3>
<p>Use the <code dir="ltr">UNSKIP_TRANSACTION</code> procedure to delete rules specified earlier with the <code dir="ltr">SKIP_TRANSACTION</code> procedure. The parameters specified in the <code dir="ltr">UNSKIP_TRANSACTION</code> procedure must match exactly for the procedure to delete an already-specified rule.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5687"></a>Syntax</p>
<pre dir="ltr">DBMS_LOGSTDBY.UNSKIP_TRANSACTION (
     xidusn_p         IN NUMBER,
     xidslt_p         IN NUMBER,
     xidsqn_p         IN NUMBER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5688"></a>Parameters</p>
<div id="ARPLS66863" class="tblformal">
<p class="titleintable"><a id="sthref5689"></a><a id="BDCIGCGJ"></a>Table 92-31 UNSKIP_TRANSACTION Procedure Parameters</p>
<table class="cellalignment4330" title="UNSKIP_TRANSACTION Procedure Parameters " summary="Describes the XIDUSN, XIDSLT, and XIDSQN parameters on the UNSKIP_TRANSACTION procedure." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t39">Parameter</th>
<th class="cellalignment4328" id="r1c2-t39">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t39" headers="r1c1-t39">
<p><code dir="ltr">XIDUSN</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t39 r1c2-t39">
<p>Transaction ID undo segment number of the transaction being skipped</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t39" headers="r1c1-t39">
<p><code dir="ltr">XIDSLT</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t39 r1c2-t39">
<p>Transaction ID slot number of the transaction being skipped</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t39" headers="r1c1-t39">
<p><code dir="ltr">XIDSQN</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t39 r1c2-t39">
<p>Transaction ID sequence number of the transaction being skipped</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5690"></a>Exceptions</p>
<div id="ARPLS66864" class="tblformal">
<p class="titleintable"><a id="sthref5691"></a><a id="sthref5692"></a>Table 92-32 UNSKIP_TRANSACTION Procedure Exceptions</p>
<table class="cellalignment4330" title="UNSKIP_TRANSACTION Procedure Exceptions" summary="Lists the exceptions you might encounter when you use the SKIP subprogram on the DBMS_LOGSTDBY package." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t40">Exception</th>
<th class="cellalignment4328" id="r1c2-t40">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t40" headers="r1c1-t40">
<p><code dir="ltr">ORA-01031</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t40 r1c2-t40">
<p>need <code dir="ltr">DBA</code> privileges to execute this procedure</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t40" headers="r1c1-t40">
<p><code dir="ltr">ORA-16103</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t40 r1c2-t40">
<p>Logical Standby apply must be stopped to allow this operation</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t40" headers="r1c1-t40">
<p><code dir="ltr">ORA-16104</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t40 r1c2-t40">
<p>invalid Logical Standby option requested</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5693"></a>Usage Notes</p>
<ul>
<li>
<p>This procedure requires <code dir="ltr">DBA</code> privileges to execute.</p>
</li>
<li>
<p>Query the <code dir="ltr">DBA_LOGSTDBY_SKIP_TRANSACTION</code> view to list the transactions that are going to be skipped by SQL Apply.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5694"></a>Examples</p>
<p>To remove a rule that was originally specified to skip the application of a transaction with (<code dir="ltr">XIDUSN</code>, <code dir="ltr">XIDSLT</code>, <code dir="ltr">XIDSQN</code>) of (1.13.1726) issue the following statement:</p>
<pre dir="ltr">SQL&gt; DBMS_LOGSTDBY.UNSKIP_TRANSACTION (XIDUSN =&gt; 1, XIDSLT =&gt; 13, XIDSQN =&gt; 1726);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4320">
<tr>
<td class="cellalignment4329">
<table class="cellalignment4325">
<tr>
<td class="cellalignment4324"><a href="d_logmnrd.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4324"><a href="d_logstdby_context.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4332">
<table class="cellalignment4323">
<tr>
<td class="cellalignment4324"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4324"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4324"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4324"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4324"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4324"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>


</body></html>