<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-2289"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/DBMS_LOB"></a><title>DBMS_LOB</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1086"/>
<meta name="dcterms.created" content="2016-09-02T5:36:21Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database PL/SQL Packages and Types Reference"/>
<meta name="dcterms.identifier" content="E41829-07"/>
<meta name="dcterms.isVersionOf" content="ARPLS"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="d_libcac.htm" title="Previous" type="text/html"/>
<link rel="Next" href="d_lock.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41829-07.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">92/290</span> <!-- End Header -->
<div id="ARPLS600" class="chapter"><a id="BABDDFDH"></a>
<h1 class="chapter"><span class="secnum">88</span> DBMS_LOB</h1>
<p><a id="ARPLS020"></a><a id="sthref4974"></a><a id="sthref4975"></a>The <code dir="ltr">DBMS_LOB</code> package provides subprograms to operate on <code dir="ltr">BLOBs</code>, <code dir="ltr">CLOBs</code>, <code dir="ltr">NCLOBs</code>, <code dir="ltr">BFILEs</code>, and temporary LOBs. You can use <code dir="ltr">DBMS_LOB</code> to access and manipulate specific parts of a LOB or complete LOBs.</p>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<a class="olink ADLOB" href="../ADLOB/toc.htm"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a></div>
<p>This chapter contains the following topics:</p>
<ul>
<li>
<p><a href="#BABEEAAH">Using DBMS_LOB</a></p>
<ul>
<li>
<p>Overview</p>
</li>
<li>
<p>Security Model</p>
</li>
<li>
<p>Constants</p>
</li>
<li>
<p>Datatypes</p>
</li>
<li>
<p>Rules and Limits</p>
</li>
<li>
<p>Operational Notes</p>
</li>
<li>
<p>Rules and Limits</p>
</li>
<li>
<p>Exceptions</p>
</li>
</ul>
</li>
<li>
<p><a href="#BABEAJAD">Summary of DBMS_LOB Subprograms</a></p>
</li>
</ul>
<div class="refentry"><a id="BABEEAAH"></a>
<div id="ARPLS66598" class="refsect1">
<h2 class="refsect1">Using DBMS_LOB</h2>
<ul>
<li>
<p><a href="#i1016465">Overview</a></p>
</li>
<li>
<p><a href="#i1016291">Security Model</a></p>
</li>
<li>
<p><a href="#i1015758">Constants</a></p>
</li>
<li>
<p><a href="#i1015790">Datatypes</a></p>
</li>
<li>
<p><a href="#i1015792">Operational Notes</a></p>
</li>
<li>
<p><a href="#i1016916">Rules and Limits</a></p>
</li>
<li>
<p><a href="#CHDJBEJI">Exceptions</a></p>
</li>
</ul>
<div id="ARPLS66599" class="refsect2"><a id="i1016465"></a>
<h3 class="refsect2">Overview</h3>
<p><code dir="ltr">DBMS_LOB</code> can read and modify <code dir="ltr">BLOBs</code>, <code dir="ltr">CLOBs</code>, and <code dir="ltr">NCLOBs</code>; it provides read-only operations for <code dir="ltr">BFILEs</code>. The bulk of the LOB operations are provided by this package.</p>
</div>
<!-- class="refsect2" -->
<div id="ARPLS66600" class="refsect2"><a id="i1016291"></a>
<h3 class="refsect2">Security Model</h3>
<p>This package must be created under <code dir="ltr">SYS</code>. Operations provided by this package are performed under the current calling user, not under the package owner <code dir="ltr">SYS</code>.</p>
<p>Any <code dir="ltr">DBMS_LOB</code> subprogram called from an anonymous PL/SQL block is executed using the privileges of the current user. Any <code dir="ltr">DBMS_LOB</code> subprogram called from a stored procedure is executed using the privileges of the owner of the stored procedure.</p>
<p>When creating the procedure, users can set the <code dir="ltr">AUTHID</code> to indicate whether they want definer&#39;s rights or invoker&#39;s rights. For example:</p>
<pre dir="ltr">CREATE PROCEDURE proc1 AUTHID DEFINER ...
 
</pre>
<p>or</p>
<pre dir="ltr">CREATE PROCEDURE proc1 AUTHID CURRENT_USER ...
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
For more information on <code dir="ltr">AUTHID</code> and privileges, see <a class="olink LNPLS" href="../LNPLS/toc.htm"><span class="italic">Oracle Database PL/SQL Language Reference</span></a></div>
<p>You can provide secure access to <code dir="ltr">BFILEs</code> using the <code dir="ltr">DIRECTORY</code> feature discussed in <code dir="ltr">BFILENAME</code> function in the <a class="olink ADLOB" href="../ADLOB/toc.htm"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> and the <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<p>For information about the security model pertaining to temporary LOBs, see <a href="#i1015792">Operational Notes</a>.</p>
</div>
<!-- class="refsect2" -->
<div id="ARPLS66601" class="refsect2"><a id="i1015758"></a>
<h3 class="refsect2">Constants</h3>
<p>The DBMS_LOB package uses the constants shown in following tables:</p>
<ul>
<li>
<p><a href="#BGBICCEC">Table 88-1, &#34;DBMS_LOB Constants - Basic&#34;</a></p>
</li>
<li>
<p><a href="#CHDCIJJB">Table 88-2, &#34;DBMS_LOB Constants - Option Types&#34;</a></p>
</li>
<li>
<p><a href="#CHDGHHFE">Table 88-3, &#34;DBMS_LOB Constants - Option Values&#34;</a></p>
</li>
<li>
<p><a href="#BGBIFDCJ">Table 88-4, &#34;DBMS_LOB Constants - DBFS State Value Types&#34;</a></p>
</li>
<li>
<p><a href="#BGBFGGDA">Table 88-5, &#34;DBMS_LOB Constants - DBFS Cache Flags&#34;</a></p>
</li>
<li>
<p><a href="#BGBHDIFC">Table 88-6, &#34;DBMS_LOB Constants - Miscellaneous&#34;</a></p>
</li>
</ul>
<div id="ARPLS66602" class="tblformal">
<p class="titleintable"><a id="sthref4976"></a><a id="BGBICCEC"></a>Table 88-1 DBMS_LOB Constants - Basic</p>
<table class="cellalignment4330" title="DBMS_LOB Constants - Basic " summary="This table describes basic Constants used by DBMS_LOB." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t4">Constant</th>
<th class="cellalignment4328" id="r1c2-t4">Type</th>
<th class="cellalignment4328" id="r1c3-t4">Value</th>
<th class="cellalignment4328" id="r1c4-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t4" headers="r1c1-t4">
<p><code dir="ltr">CALL</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t4 r1c2-t4">
<p><code dir="ltr">PLS_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t4 r1c3-t4">
<p><code dir="ltr">12</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t4 r1c4-t4">
<p>Create the <code dir="ltr">TEMP</code> <code dir="ltr">LOB</code> with call duration</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t4" headers="r1c1-t4">
<p><code dir="ltr">FILE_READONLY</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t4 r1c2-t4">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t4 r1c3-t4">
<p><code dir="ltr">0</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t4 r1c4-t4">
<p>Open the specified <code dir="ltr">BFILE</code> read-only</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t4" headers="r1c1-t4">
<p><code dir="ltr">LOB_READONLY</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t4 r1c2-t4">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t4 r1c3-t4">
<p><code dir="ltr">0</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t4 r1c4-t4">
<p>Open the specified LOB read-only</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t4" headers="r1c1-t4">
<p><code dir="ltr">LOB_READWRITE</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t4 r1c2-t4">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t4 r1c3-t4">
<p><code dir="ltr">1</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t4 r1c4-t4">
<p>Open the specified LOB read-write</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t4" headers="r1c1-t4">
<p><code dir="ltr">LOBMAXSIZE</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t4 r1c2-t4">
<p><code dir="ltr">INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t4 r1c3-t4">
<p>18446744073709551615</p>
</td>
<td class="cellalignment4329" headers="r6c1-t4 r1c4-t4">
<p>Maximum size of a LOB in bytes</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t4" headers="r1c1-t4">
<p><code dir="ltr">SESSION</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t4 r1c2-t4">
<p><code dir="ltr">PLS_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t4 r1c3-t4">
<p><code dir="ltr">10</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t4 r1c4-t4">
<p>Create the <code dir="ltr">TEMP</code> <code dir="ltr">LOB</code> with session duration</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="ARPLS66603" class="tblformal">
<p class="titleintable"><a id="sthref4977"></a><a id="CHDCIJJB"></a>Table 88-2 DBMS_LOB Constants - Option Types</p>
<table class="cellalignment4330" title="DBMS_LOB Constants - Option Types " summary="This table describes Constants used by DBMS_RESOURCE_MANAGER." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t5">Constant</th>
<th class="cellalignment4328" id="r1c2-t5">Definition</th>
<th class="cellalignment4328" id="r1c3-t5">Value</th>
<th class="cellalignment4328" id="r1c4-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t5" headers="r1c1-t5">
<p><code dir="ltr">OPT_COMPRESS</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t5 r1c2-t5">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t5 r1c3-t5">
<p><code dir="ltr">1</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t5 r1c4-t5">
<p>Set/Get the <code dir="ltr">SECUREFILE</code> compress option value</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t5" headers="r1c1-t5">
<p><code dir="ltr">OPT_DEDUPLICATE</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t5 r1c2-t5">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t5 r1c3-t5">
<p><code dir="ltr">4</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t5 r1c4-t5">
<p>Set/Get the <code dir="ltr">SECUREFILE</code> Deduplicate option value</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t5" headers="r1c1-t5">
<p><code dir="ltr">OPT_ENCRYPT</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t5 r1c2-t5">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t5 r1c3-t5">
<p><code dir="ltr">2</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t5 r1c4-t5">
<p>Get the <code dir="ltr">SECUREFILE</code> encrypt option value</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="ARPLS66604" class="tblformal">
<p class="titleintable"><a id="sthref4978"></a><a id="CHDGHHFE"></a>Table 88-3 DBMS_LOB Constants - Option Values</p>
<table class="cellalignment4330" title="DBMS_LOB Constants - Option Values" summary="This table describes Option Values Constants used by DBMS_LOB." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t6">Constant</th>
<th class="cellalignment4328" id="r1c2-t6">Definition</th>
<th class="cellalignment4328" id="r1c3-t6">Value</th>
<th class="cellalignment4328" id="r1c4-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t6" headers="r1c1-t6">
<p><code dir="ltr">COMPRESS_OFF</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t6 r1c2-t6">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t6 r1c3-t6">
<p><code dir="ltr">0</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t6 r1c4-t6">
<p>For <a href="#CHDHDDDD">SETOPTIONS Procedures</a>, set compress off; for <a href="#CHDIHDIC">GETOPTIONS Functions</a>, compress is off</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t6" headers="r1c1-t6">
<p><code dir="ltr">COMPRESS_ON</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t6 r1c2-t6">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t6 r1c3-t6">
<p><code dir="ltr">1</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t6 r1c4-t6">
<p>For <a href="#CHDHDDDD">SETOPTIONS Procedures</a>, set compress on; for <a href="#CHDIHDIC">GETOPTIONS Functions</a>, compress is on</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t6" headers="r1c1-t6">
<p><code dir="ltr">DEDUPLICATE_OFF</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t6 r1c2-t6">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t6 r1c3-t6">
<p><code dir="ltr">0</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t6 r1c4-t6">
<p>For <a href="#CHDHDDDD">SETOPTIONS Procedures</a>, set deduplicate is off; for <a href="#CHDIHDIC">GETOPTIONS Functions</a>, deduplicate is off</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t6" headers="r1c1-t6">
<p><code dir="ltr">DEDUPLICATE_ON</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t6 r1c2-t6">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t6 r1c3-t6">
<p><code dir="ltr">4</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t6 r1c4-t6">
<p>For <a href="#CHDHDDDD">SETOPTIONS Procedures</a>, set deduplicate is on; for <a href="#CHDIHDIC">GETOPTIONS Functions</a>, deduplicate is on</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t6" headers="r1c1-t6">
<p><code dir="ltr">ENCRYPT_OFF</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t6 r1c2-t6">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t6 r1c3-t6">
<p><code dir="ltr">0</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t6 r1c4-t6">
<p>For <a href="#CHDIHDIC">GETOPTIONS Functions</a>, encrypt is off</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t6" headers="r1c1-t6">
<p><code dir="ltr">ENCRYPT_ON</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t6 r1c2-t6">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t6 r1c3-t6">
<p><code dir="ltr">2</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t6 r1c4-t6">
<p>For <a href="#CHDIHDIC">GETOPTIONS Functions</a>, encrypt is on</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="ARPLS66605" class="tblformal">
<p class="titleintable"><a id="sthref4979"></a><a id="BGBIFDCJ"></a>Table 88-4 DBMS_LOB Constants - DBFS State Value Types</p>
<table class="cellalignment4330" title="DBMS_LOB Constants - DBFS State Value Types " summary="This table describes Archive State ValuesTypes Constants used by DBMS_LOB." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t7">Constant</th>
<th class="cellalignment4328" id="r1c2-t7">Definition</th>
<th class="cellalignment4328" id="r1c3-t7">Value</th>
<th class="cellalignment4328" id="r1c4-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t7" headers="r1c1-t7">
<p><code dir="ltr">DBFS_LINK_NEVER</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t7 r1c2-t7">
<p><code dir="ltr">PLS_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t7 r1c3-t7">
<p><code dir="ltr">0</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t7 r1c4-t7">
<p>LOB has never been archived</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t7" headers="r1c1-t7">
<p><code dir="ltr">DBFS_LINK_NO</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t7 r1c2-t7">
<p><code dir="ltr">PLS_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t7 r1c3-t7">
<p><code dir="ltr">2</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t7 r1c4-t7">
<p>LOB was archived, but as been read back in to the RDBMS</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t7" headers="r1c1-t7">
<p><code dir="ltr">DBFS_LINK_YES</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t7 r1c2-t7">
<p><code dir="ltr">PLS_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t7 r1c3-t7">
<p><code dir="ltr">1</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t7 r1c4-t7">
<p>LOB is currently archived</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="ARPLS66607" class="tblformal">
<p class="titleintable"><a id="sthref4980"></a><a id="BGBFGGDA"></a>Table 88-5 DBMS_LOB Constants - DBFS Cache Flags</p>
<table class="cellalignment4330" title="DBMS_LOB Constants - DBFS Cache Flags" summary="This table describes Archive State ValuesTypes Constants used by DBMS_LOB." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t8">Constant</th>
<th class="cellalignment4328" id="r1c2-t8">Definition</th>
<th class="cellalignment4328" id="r1c3-t8">Value</th>
<th class="cellalignment4328" id="r1c4-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t8" headers="r1c1-t8">
<p><code dir="ltr">DBFS_LINK_CACHE</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t8 r1c2-t8">
<p><code dir="ltr">PLS_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t8 r1c3-t8">
<p>1</p>
</td>
<td class="cellalignment4329" headers="r2c1-t8 r1c4-t8">
<p>Put the LOB data to the archive, but keep the data in the RDBMS as a cached version</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t8" headers="r1c1-t8">
<p><code dir="ltr">DBFS_LINK_NOCACHE</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t8 r1c2-t8">
<p><code dir="ltr">PLS_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t8 r1c3-t8">
<p><code dir="ltr">0</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t8 r1c4-t8">
<p>Put the LOB data to the archive, and remove the data from the RDBMS.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="ARPLS66608" class="tblformal">
<p class="titleintable"><a id="sthref4981"></a><a id="BGBHDIFC"></a>Table 88-6 DBMS_LOB Constants - Miscellaneous</p>
<table class="cellalignment4330" title="DBMS_LOB Constants - Miscellaneous " summary="This table describes Archive State ValuesTypes Constants used by DBMS_LOB." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t9">Constant</th>
<th class="cellalignment4328" id="r1c2-t9">Definition</th>
<th class="cellalignment4328" id="r1c3-t9">Value</th>
<th class="cellalignment4328" id="r1c4-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t9" headers="r1c1-t9">
<p><code dir="ltr">CONTENTTYPE_MAX_SIZE</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t9 r1c2-t9">
<p><code dir="ltr">PLS_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t9 r1c3-t9">
<p><code dir="ltr">128</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t9 r1c4-t9">
<p>Maximum number of bytes allowed in the content type string</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t9" headers="r1c1-t9">
<p><code dir="ltr">DBFS_LINK_PATH_MAX_SIZE</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t9 r1c2-t9">
<p><code dir="ltr">PLS_INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t9 r1c3-t9">
<p><code dir="ltr">1024</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t9 r1c4-t9">
<p>The maximum length of DBFS pathnames</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66609" class="refsect2"><a id="i1015790"></a>
<h3 class="refsect2">Datatypes</h3>
<p>The <code dir="ltr">DBMS_LOB</code> package uses the datatypes shown in <a href="#CJHIGCAA">Table 88-7</a>.</p>
<div id="ARPLS66610" class="tblformal">
<p class="titleintable"><a id="sthref4982"></a><a id="CJHIGCAA"></a>Table 88-7 Datatypes Used by DBMS_LOB</p>
<table class="cellalignment4330" title="Datatypes Used by DBMS_LOB" summary="This table describes datatypes used by DBMS_LOB." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t10">Type</th>
<th class="cellalignment4328" id="r1c2-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t10" headers="r1c1-t10">
<p><code dir="ltr">BLOB</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t10 r1c2-t10">
<p>Source or destination binary LOB.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t10" headers="r1c1-t10">
<p><code dir="ltr">RAW</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t10 r1c2-t10">
<p>Source or destination <code dir="ltr">RAW</code> buffer (used with <code dir="ltr">BLOB</code>).</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t10" headers="r1c1-t10">
<p><code dir="ltr">CLOB</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t10 r1c2-t10">
<p>Source or destination character LOB (including <code dir="ltr">NCLOB</code>).</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t10" headers="r1c1-t10">
<p><code dir="ltr">VARCHAR2</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t10 r1c2-t10">
<p>Source or destination character buffer (used with <code dir="ltr">CLOB</code> and <code dir="ltr">NCLOB</code>).</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t10" headers="r1c1-t10">
<p><code dir="ltr">INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t10 r1c2-t10">
<p>Specifies the size of a buffer or LOB, the offset into a LOB, or the amount to access.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t10" headers="r1c1-t10">
<p><code dir="ltr">BFILE</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t10 r1c2-t10">
<p>Large, binary object stored outside the database.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>The <code dir="ltr">DBMS_LOB</code> package defines no special types.</p>
<p>An <code dir="ltr">NCLOB</code> is a <code dir="ltr">CLOB</code> for holding fixed-width and varying-width, multibyte national character sets.</p>
<p>The clause <code dir="ltr">ANY_CS</code> in the specification of <code dir="ltr">DBMS_LOB</code> subprograms for <code dir="ltr">CLOB</code>s enables the <code dir="ltr">CLOB</code> type to accept a <code dir="ltr">CLOB</code> or <code dir="ltr">NCLOB</code> locator variable as input.</p>
</div>
<!-- class="refsect2" -->
<div id="ARPLS66616" class="refsect2"><a id="i1015792"></a>
<h3 class="refsect2">Operational Notes</h3>
<p>All <code dir="ltr">DBMS_LOB</code> subprograms work based on LOB locators. For the successful completion of <code dir="ltr">DBMS_LOB</code> subprograms, you must provide an input locator that represents a LOB that already exists in the database tablespaces or external file system. See also Chapter 1 of <a class="olink ADLOB" href="../ADLOB/toc.htm"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide.</span></a></p>
<p>To use LOBs in your database, you must first use SQL data definition language (DDL) to define the tables that contain LOB columns.</p>
<ul>
<li>
<p><a href="#BABEJGJG">Internal LOBs</a></p>
</li>
<li>
<p><a href="#i1015756">External LOBs</a></p>
</li>
<li>
<p><a href="#i1015757">Temporary LOBs</a></p>
</li>
</ul>
<div id="ARPLS66617" class="refsect3"><a id="BABEJGJG"></a>
<h4 class="refsect3">Internal LOBs</h4>
<p>To populate your table with internal LOBs after LOB columns are defined in a table, you use the SQL data manipulation language (DML) to initialize or populate the locators in the LOB columns.</p>
</div>
<!-- class="refsect3" -->
<div id="ARPLS66618" class="refsect3"><a id="i1015756"></a>
<h4 class="refsect3">External LOBs</h4>
<p>For an external LOB (BFILE) to be represented by a LOB locator, you must:</p>
<ul>
<li>
<p>Ensure that a <code dir="ltr">DIRECTORY</code> object representing a valid, existing physical directory has been defined, and that physical files (the LOBs you plan to add) exist with read permission for the database. If your operating system uses case-sensitive path names, then be sure you specify the directory in the correct format.</p>
</li>
<li>
<p>Pass the <code dir="ltr">DIRECTORY</code> object and the filename of the external LOB you are adding to the <code dir="ltr">BFILENAME</code> function to create a LOB locator for your external LOB.</p>
</li>
</ul>
<p>Once you have completed these tasks, you can insert or update a row containing a LOB column using the specified LOB locator.</p>
<p>After the LOBs are defined and created, you can then <code dir="ltr">SELECT</code> from a LOB locator into a local PL/SQL LOB variable and use this variable as an input parameter to <code dir="ltr">DBMS_LOB</code> for access to the LOB value.</p>
<p>For details on the different ways to do this, you must refer to the section of the <a class="olink ADLOB012" href="../ADLOB/adlob_bfile_ops.htm#ADLOB012"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> that describes <a class="olink ADLOB012" href="../ADLOB/adlob_bfile_ops.htm#ADLOB012">&#34;Accessing External LOBs (BFILEs).&#34;</a></p>
</div>
<!-- class="refsect3" -->
<div id="ARPLS66619" class="refsect3"><a id="i1015757"></a>
<h4 class="refsect3">Temporary LOBs</h4>
<p>The database supports the definition, creation, deletion, access, and update of temporary LOBs. Your temporary tablespace stores the temporary LOB data. Temporary LOBs are not permanently stored in the database. Their purpose is mainly to perform transformations on LOB data.</p>
<p>For temporary LOBs, you must use the OCI, PL/SQL, or another programmatic interface to create or manipulate them. Temporary LOBs can be either <code dir="ltr">BLOBs</code>, <code dir="ltr">CLOBs</code>, or <code dir="ltr">NCLOBs</code>.</p>
<p>A temporary LOB is empty when it is created. By default, all temporary LOBs are deleted at the end of the session in which they were created. If a process dies unexpectedly or if the database crashes, then temporary LOBs are deleted, and the space for temporary LOBs is freed.</p>
<p>There is also an interface to let you group temporary LOBs together into a logical bucket. The duration represents this logical store for temporary LOBs. Each temporary LOB can have separate storage characteristics, such as <code dir="ltr">CACHE</code>/ <code dir="ltr">NOCACHE</code>. There is a default store for every session into which temporary LOBs are placed if you don&#39;t specify a specific duration. Additionally, you are able to perform a free operation on durations, which causes all contents in a duration to be freed.</p>
<p>There is no support for consistent read (CR), undo, backup, parallel processing, or transaction management for temporary LOBs. Because CR and roll backs are not supported for temporary LOBs, you must free the temporary LOB and start over again if you encounter an error.</p>
<p>Because CR, undo, and versions are not generated for temporary LOBs, there is potentially a performance impact if you assign multiple locators to the same temporary LOB. Semantically, each locator should have its own copy of the temporary LOB.</p>
<p>A copy of a temporary LOB is created if the user modifies the temporary LOB while another locator is also pointing to it. The locator on which a modification was performed now points to a new copy of the temporary LOB. Other locators no longer see the same data as the locator through which the modification was made. A deep copy was not incurred by permanent LOBs in these types of situations, because CR snapshots and version pages enable users to see their own versions of the LOB cheaply.</p>
<p>You can gain pseudo-<code dir="ltr">REF</code> semantics by using pointers to locators in OCI and by having multiple pointers to locators point to the same temporary LOB locator, if necessary. In PL/SQL, you must avoid using more than one locator for each temporary LOB. The temporary LOB locator can be passed by reference to other procedures.</p>
<p>Because temporary LOBs are not associated with any table schema, there are no meanings to the terms in-row and out-of-row temporary LOBs. Creation of a temporary LOB instance by a user causes the engine to create and return a locator to the LOB data. The PL/SQL <code dir="ltr">DBMS_LOB</code> package, PRO*C/C++, OCI, and other programmatic interfaces operate on temporary LOBs through these locators just as they do for permanent LOBs.</p>
<p>There is no support for client side temporary LOBs. All temporary LOBs reside in the server.</p>
<p>Temporary LOBs do not support the <code dir="ltr">EMPTY_BLOB</code> or <code dir="ltr">EMPTY_CLOB</code> functions that are supported for permanent LOBs. The <code dir="ltr">EMPTY_BLOB</code> function specifies the fact that the LOB is initialized, but not populated with any data.</p>
<p>A temporary LOB instance can only be destroyed by using OCI or the <code dir="ltr">DBMS_LOB</code> package by using the appropriate <code dir="ltr">FREETEMPORARY</code> or <code dir="ltr">OCIDurationEnd</code> statement.</p>
<p>A temporary LOB instance can be accessed and modified using appropriate OCI and <code dir="ltr">DBMS_LOB</code> statements, just as for regular permanent internal LOBs. To make a temporary LOB permanent, you must explicitly use the OCI or <code dir="ltr">DBMS_LOB</code> <code dir="ltr">COPY</code> command, and copy the temporary LOB into a permanent one.</p>
<p>Security is provided through the LOB locator. Only the user who created the temporary LOB is able to see it. Locators are not expected to be able to pass from one user&#39;s session to another. Even if someone did pass a locator from one session to another, they would not access the temporary LOBs from the original session. Temporary LOB lookup is localized to each user&#39;s own session. Someone using a locator from somewhere else is only able to access LOBs within his own session that have the same LOB ID. Users should not try to do this, but if they do, they are not able to affect anyone else&#39;s data.</p>
<p>The database keeps track of temporary LOBs for each session in a <code dir="ltr">v$</code> view called <code dir="ltr">V$TEMPORARY_LOBS</code>, which contains information about how many temporary LOBs exist for each session. <code dir="ltr">V$</code> views are for DBA use. From the session, the database can determine which user owns the temporary LOBs. By using <code dir="ltr">V$TEMPORARY_LOBS</code> in conjunction with <code dir="ltr">DBA_SEGMENTS</code>, a DBA can see how much space is being used by a session for temporary LOBs. These tables can be used by DBAs to monitor and guide any emergency cleanup of temporary space used by temporary LOBs.</p>
<p>The following notes are specific to temporary LOBs:</p>
<ol>
<li>
<p>All functions in <code dir="ltr">DBMS_LOB</code> return <code dir="ltr">NULL</code> if any of the input parameters are <code dir="ltr">NULL</code>. All procedures in <code dir="ltr">DBMS_LOB</code> raise an exception if the LOB locator is input as <code dir="ltr">NULL</code>.</p>
</li>
<li>
<p>Operations based on <code dir="ltr">CLOBs</code> do not verify if the character set IDs of the parameters (<code dir="ltr">CLOB</code> parameters, <code dir="ltr">VARCHAR2</code> buffers and patterns, and so on) match. It is the user&#39;s responsibility to ensure this.</p>
</li>
<li>
<p>Data storage resources are controlled by the DBA by creating different temporary tablespaces. DBAs can define separate temporary tablespaces for different users, if necessary.</p>
</li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNPLS" href="../LNPLS/toc.htm"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information on <code dir="ltr">NOCOPY</code> syntax</div>
</div>
<!-- class="refsect3" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66611" class="refsect2"><a id="i1016916"></a>
<h3 class="refsect2">Rules and Limits</h3>
<ul>
<li>
<p><a href="#i1016040">General Rules and Limits</a></p>
</li>
<li>
<p><a href="#i1015946">Rules and Limits Specific to External Files (BFILEs)</a></p>
</li>
<li>
<p><a href="#i1016062">Maximum LOB Size</a></p>
</li>
<li>
<p><a href="#i1015730">Maximum Buffer Size</a></p>
</li>
</ul>
<div id="ARPLS66612" class="refsect3"><a id="i1016040"></a>
<h4 class="refsect3">General Rules and Limits</h4>
<a id="i1015912"></a>
<ul>
<li>
<p>Oracle Database does not support constraints on columns or attributes whose type is a LOB, with the following exception: <code dir="ltr">NOT NULL</code> constraints are supported for a LOB column or attribute.</p>
</li>
<li>
<p>The following rules apply in the specification of subprograms in this package:</p>
<ul>
<li>
<p><code dir="ltr">newlen</code>, <code dir="ltr">offset</code>, and <code dir="ltr">amount</code> parameters for subprograms operating on <code dir="ltr">BLOBs</code> and <code dir="ltr">BFILEs</code> must be specified in terms of <span class="italic">bytes</span>.</p>
</li>
<li>
<p><code dir="ltr">newlen</code>, <code dir="ltr">offset</code>, and <code dir="ltr">amount</code> parameters for subprograms operating on <code dir="ltr">CLOBs</code> must be specified in terms of <span class="italic">characters</span>.</p>
</li>
</ul>
<p>In multi-byte character sets, it is not possible to interpret these offsets correctly. As a result, <code dir="ltr">SUBSTR</code> raises the following error: <code dir="ltr">ORA-22998: CLOB or NCLOB in multibyte character set not supported</code>.</p>
</li>
<li>
<p>A subprogram raises an <code dir="ltr">INVALID_ARGVAL</code> exception if the following restrictions are not followed in specifying values for parameters (unless otherwise specified):</p>
<ol>
<li>
<p>Only positive, absolute offsets from the beginning of <code dir="ltr">LOB</code> data are permitted: Negative offsets from the tail of the LOB are not permitted.</p>
</li>
<li>
<p>Only positive, nonzero values are permitted for the parameters that represent size and positional quantities, such as <code dir="ltr">amount</code>, <code dir="ltr">offset</code>, <code dir="ltr">newlen</code>, <code dir="ltr">nth</code>, and so on. Negative offsets and ranges observed in SQL string functions and operators are not permitted.</p>
</li>
<li>
<p>The value of <code dir="ltr">offset</code>, <code dir="ltr">amount</code>, <code dir="ltr">newlen</code>, <code dir="ltr">nth</code> must not exceed the value <code dir="ltr">lobmaxsize</code> 18446744073709551615 (2<sup>64)</sup> in any <code dir="ltr">DBMS_LOB</code> subprogram.</p>
</li>
<li>
<p>For <code dir="ltr">CLOB</code>s consisting of fixed-width multibyte characters, the maximum value for these parameters must not exceed (<code dir="ltr">lobmaxsize</code>/<code dir="ltr">character_width_in_bytes</code>) characters<code dir="ltr">.</code></p>
<p>For example, if the <code dir="ltr">CLOB</code> consists of 2-byte characters, such as:</p>
<pre dir="ltr">JA16SJISFIXED
</pre>
<p>Then, the maximum <code dir="ltr">amount</code> value should not exceed:</p>
<pre dir="ltr">18446744073709551615/2 = 9223372036854775807
</pre></li>
</ol>
</li>
<li>
<p>PL/SQL language specifications stipulate an upper limit of 32767 bytes (not characters) for <code dir="ltr">RAW</code> and <code dir="ltr">VARCHAR2</code> parameters used in <code dir="ltr">DBMS_LOB</code> subprograms. For example, if you declare a variable to be:</p>
<pre dir="ltr">charbuf VARCHAR2(3000)
</pre>
<p>Then, <code dir="ltr">charbuf</code> can hold 3000 single byte characters or 1500 2-byte fixed width characters. This has an important consequence for <code dir="ltr">DBMS_LOB</code> subprograms for <code dir="ltr">CLOBs</code> and <code dir="ltr">NCLOBs</code>.</p>
</li>
<li>
<p>The <code dir="ltr">%CHARSET</code> clause indicates that the form of the parameter with <code dir="ltr">%CHARSET</code> must match the form of the <code dir="ltr">ANY_CS</code> parameter to which it refers.</p>
<p>For example, in <code dir="ltr">DBMS_LOB</code> subprograms that take a <code dir="ltr">VARCHAR2</code> buffer parameter, the form of the <code dir="ltr">VARCHAR2</code> buffer must match the form of the <code dir="ltr">CLOB</code> parameter. If the input LOB parameter is of type <code dir="ltr">NCLOB</code>, then the buffer must contain <code dir="ltr">NCHAR</code> data. Conversely, if the input LOB parameter is of type <code dir="ltr">CLOB</code>, then the buffer must contain <code dir="ltr">CHAR</code> data.</p>
<p>For <code dir="ltr">DBMS_LOB</code> subprograms that take two <code dir="ltr">CLOB</code> parameters, both <code dir="ltr">CLOB</code> parameters must have the same form; that is, they must both be <code dir="ltr">NCLOBs</code>, or they must both be <code dir="ltr">CLOBs</code>.</p>
</li>
<li>
<p>If the value of <code dir="ltr">amount</code> plus the <code dir="ltr">offset</code> exceeds the maximum LOB size allowed by the database, then access exceptions are raised.</p>
<p>Under these input conditions, read subprograms, such as <code dir="ltr">READ</code>, <code dir="ltr">COMPARE</code>, <code dir="ltr">INSTR</code>, and <code dir="ltr">SUBSTR</code>, read until <code dir="ltr">End</code> <code dir="ltr">of</code> <code dir="ltr">Lob/File</code> is reached. For example, for a <code dir="ltr">READ</code> operation on a <code dir="ltr">BLOB</code> or <code dir="ltr">BFILE</code>, if the user specifies offset value of 3 GB and an amount value of 2 GB on a LOB that is 4GB in size, then <code dir="ltr">READ</code> returns only 1GB (4GB-3GB) bytes.</p>
</li>
<li>
<p>Functions with <code dir="ltr">NULL</code> or invalid input values for parameters return a <code dir="ltr">NULL</code>. Procedures with <code dir="ltr">NULL</code> values for destination LOB parameters raise exceptions.</p>
</li>
<li>
<p>Operations involving patterns as parameters, such as <code dir="ltr">COMPARE</code>, <code dir="ltr">INSTR</code>, and <code dir="ltr">SUBSTR</code> do not support regular expressions or special matching characters (such as <code dir="ltr">%</code> in the <code dir="ltr">LIKE</code> operator in SQL) in the <code dir="ltr">pattern</code> parameter or substrings.</p>
</li>
<li>
<p>The <code dir="ltr">End</code> <code dir="ltr">Of</code> LOB condition is indicated by the <code dir="ltr">READ</code> procedure using a <code dir="ltr">NO_DATA_FOUND</code> exception. This exception is raised only upon an attempt by the user to read beyond the end of the LOB. The <code dir="ltr">READ</code> buffer for the last read contains 0 bytes.</p>
</li>
<li>
<p>For consistent LOB updates, you must lock the row containing the destination LOB before making a call to any of the procedures (mutators) that modify LOB data.</p>
</li>
<li>
<p>Unless otherwise stated, the default value for an <code dir="ltr">offset</code> parameter is 1, which indicates the first byte in the <code dir="ltr">BLOB</code> or <code dir="ltr">BFILE</code> data, and the first character in the <code dir="ltr">CLOB</code> or <code dir="ltr">NCLOB</code> value. No default values are specified for the <code dir="ltr">amount</code> parameter &mdash; you must input the values explicitly.</p>
</li>
<li>
<p>You must lock the row containing the destination internal LOB before calling any subprograms that modify the LOB, such as <code dir="ltr">APPEND</code>, <code dir="ltr">COPY</code>, <code dir="ltr">ERASE</code>, <code dir="ltr">TRIM</code>, or <code dir="ltr">WRITE</code>. These subprograms do not implicitly lock the row containing the LOB.</p>
</li>
</ul>
</div>
<!-- class="refsect3" -->
<div id="ARPLS66613" class="refsect3"><a id="i1015946"></a>
<h4 class="refsect3">Rules and Limits Specific to External Files (BFILEs)</h4>
<ul>
<li>
<p>The subprograms <code dir="ltr">COMPARE</code>, <code dir="ltr">INSTR</code>, <code dir="ltr">READ</code>, <code dir="ltr">SUBSTR</code>, <code dir="ltr">FILECLOSE</code>, <code dir="ltr">FILECLOSEALL</code> and <code dir="ltr">LOADFROMFILE</code> operate only on an <span class="italic">opened</span> <code dir="ltr">BFILE</code> locator; that is, a successful <code dir="ltr">FILEOPEN</code> call must precede a call to any of these subprograms.</p>
</li>
<li>
<p>For the functions <code dir="ltr">FILEEXISTS</code>, <code dir="ltr">FILEGETNAME</code> and <code dir="ltr">GETLENGTH</code>, a file&#39;s open/close status is unimportant; however, the file must exist physically, and you must have adequate privileges on the <code dir="ltr">DIRECTORY</code> object and the file.</p>
</li>
<li>
<p><code dir="ltr">DBMS_LOB</code> does not support any concurrency control mechanism for <code dir="ltr">BFILE</code> operations.</p>
</li>
<li>
<p>In the event of several open files in the session whose closure has not been handled properly, you can use the <code dir="ltr">FILECLOSEALL</code> subprogram to close all files opened in the session and resume file operations from the beginning.</p>
</li>
<li>
<p>If you are the creator of a <code dir="ltr">DIRECTORY</code>, or if you have system privileges, then use the <code dir="ltr">CREATE</code> <code dir="ltr">OR</code> <code dir="ltr">REPLACE</code>, <code dir="ltr">DROP</code>, and <code dir="ltr">REVOKE</code> statements in SQL with extreme caution.</p>
<p>If you, or other grantees of a particular directory object, have several open files in a session, then any of the preceding commands can adversely affect file operations. In the event of such abnormal termination, your only choice is to invoke a program or anonymous block that calls <code dir="ltr">FILECLOSEALL</code>, reopen your files, and restart your file operations.</p>
</li>
<li>
<p>All files opened during a user session are implicitly closed at the end of the session. However, Oracle strongly recommends that you close the files after <span class="italic">both</span> normal and abnormal termination of operations on the <code dir="ltr">BFILE.</code></p>
<p>In the event of normal program termination, proper file closure ensures that the number of files that are open simultaneously in the session remains less than <code dir="ltr">SESSION_MAX_OPEN_FILES</code>.</p>
<p>In the event of abnormal program termination from a PL/SQL program, it is imperative that you provide an exception handler that ensures closure of all files opened in that PL/SQL program. This is necessary because after an exception occurs, only the exception handler has access to the <code dir="ltr">BFILE</code> variable in its most current state.</p>
<p>After the exception transfers program control outside the PL/SQL program block, all references to the open <code dir="ltr">BFILEs</code> are lost. The result is a larger open file count which may or may not exceed the <code dir="ltr">SESSION_MAX_OPEN_FILES</code> value.</p>
<p>For example, consider a <code dir="ltr">READ</code> operation past the end of the <code dir="ltr">BFILE</code> value, which generates a <code dir="ltr">NO_DATA_FOUND</code> exception:</p>
<pre dir="ltr">-- This assumes a directory &#39;DDD&#39; whose path is already known
DECLARE 
       fil BFILE:= bfilename(&#39;DDD&#39;, &#39;filename.foo&#39;); 
       pos INTEGER; 
       amt BINARY_INTEGER; 
       buf RAW(40); 
BEGIN 
       SELECT ad_graphic INTO fil FROM print_media WHERE product_id = 3106; 
       dbms_lob.open(fil, dbms_lob.lob_readonly);   
       amt := 40; pos := 1 + dbms_lob.getlength(fil); buf := &#39;&#39;; 
       dbms_lob.read(fil, amt, pos, buf); 
       dbms_output.put_line(&#39;Read F1 past EOF: &#39;|| 
           utl_raw.cast_to_varchar2(buf));
       dbms_lob.close(fil); 
END;
      
ORA-01403: no data found 
ORA-06512: at &#34;SYS.DBMS_LOB&#34;, line 373 
ORA-06512: at line 10 
</pre>
<p>After the exception has occurred, the <code dir="ltr">BFILE</code> locator variable file goes out of scope, and no further operations on the file can be done using that variable. Therefore, the solution is to use an exception handler:</p>
<pre dir="ltr">DECLARE
     fil BFILE; 
     pos INTEGER;
     amt BINARY_INTEGER; 
     buf RAW(40); 
BEGIN 
     SELECT ad_graphic INTO fil FROM print_media WHERE product_id = 3106;
     dbms_lob.open(fil, dbms_lob.lob_readonly);   
     amt := 40; pos := 1 + dbms_lob.getlength(fil); buf := &#39;&#39;; 
     dbms_lob.read(fil, amt, pos, buf); 
     dbms_output.put_line(&#39;Read F1 past EOF: &#39;|| 
          utl_raw.cast_to_varchar2(buf)); 
     dbms_lob.close(fil); 
     exception 
     WHEN no_data_found 
     THEN 
       BEGIN 
         dbms_output.put_line(&#39;End of File reached. Closing file&#39;); 
         dbms_lob.fileclose(fil); 
    <span class="italic">     -- or dbms_lob.filecloseall if appropriate </span>
       END; 
END; 
     / 

Statement processed. 
End of File reached. Closing file
</pre></li>
</ul>
<pre dir="ltr"> 
</pre>
<p>In general, you should ensure that files opened in a PL/SQL block using <code dir="ltr">DBMS_LOB</code> are closed before normal or abnormal termination of the block.</p>
</div>
<!-- class="refsect3" -->
<div id="ARPLS66614" class="refsect3"><a id="i1016062"></a>
<h4 class="refsect3">Maximum LOB Size</h4>
<p>The maximum size for LOBs supported by the database is equal to the value of the blocksize of the tablespace the LOB column resides in times the value 2<sup>32</sup>-1 (4294967295). This allows for a maximum LOB size ranging from 8 terabytes to 128 terabytes.</p>
</div>
<!-- class="refsect3" -->
<div id="ARPLS66615" class="refsect3"><a id="i1015730"></a>
<h4 class="refsect3">Maximum Buffer Size</h4>
<p>The maximum buffer size, 32767 bytes.</p>
<p>For <code dir="ltr">BLOBs</code>, where buffer size is expressed in bytes, the number of bytes cannot exceed 32767.</p>
<p>For <code dir="ltr">CLOBs</code> or <code dir="ltr">NCLOBs</code>, where buffer size is expressed in characters, the number of characters cannot result in a buffer larger than 32767 bytes. For example, if you are using fixed-width, two-byte characters, then specifying 20000 characters is an error (20000*2 = 40000, which is greater than 32767).</p>
</div>
<!-- class="refsect3" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66620" class="refsect2"><a id="CHDJBEJI"></a>
<h3 class="refsect2">Exceptions</h3>
<div id="ARPLS66621" class="tblformal">
<p class="titleintable"><a id="sthref4983"></a><a id="sthref4984"></a>Table 88-8 DBMS_LOB Exceptions</p>
<table class="cellalignment4330" title="DBMS_LOB Exceptions" summary="This table describes the Exceptions for DBMS_LOB." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t12">Exception</th>
<th class="cellalignment4328" id="r1c2-t12">Code</th>
<th class="cellalignment4328" id="r1c3-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t12" headers="r1c1-t12">
<p><code dir="ltr">ACCESS_ERROR</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t12 r1c2-t12">
<p><code dir="ltr">22925</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t12 r1c3-t12">
<p>You are trying to write too much data to the LOB: LOB size is limited to 4 gigabytes.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t12" headers="r1c1-t12">
<p><code dir="ltr">BUFFERING_ENABLED</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t12 r1c2-t12">
<p><code dir="ltr">22279</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t12 r1c3-t12">
<p>Cannot perform operation with LOB buffering enabled</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t12" headers="r1c1-t12">
<p><code dir="ltr">CONTENTTYPE_TOOLONG</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t12 r1c2-t12">
<p><code dir="ltr">43859</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t12 r1c3-t12">
<p>The length of the <code dir="ltr">contenttype</code> string exceeds the defined maximum. Modify the length of the <code dir="ltr">contenttype</code> string and retry the operation.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t12" headers="r1c1-t12">
<p><code dir="ltr">CONTENTTYPEBUF_WRONG</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t12 r1c2-t12">
<p><code dir="ltr">43862</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t12 r1c3-t12">
<p>The length of the <code dir="ltr">contenttype</code> buffer is less than defined constant. Modify the length of the <code dir="ltr">contenttype</code> buffer and retry the operation.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t12" headers="r1c1-t12">
<p><code dir="ltr">INVALID_ARGVAL</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t12 r1c2-t12">
<p><code dir="ltr">21560</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t12 r1c3-t12">
<p>The argument is expecting a non<code dir="ltr">-NULL</code>, valid value but the argument value passed in is <code dir="ltr">NULL</code>, invalid, or out of range.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t12" headers="r1c1-t12">
<p><code dir="ltr">INVALID_DIRECTORY</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t12 r1c2-t12">
<p><code dir="ltr">22287</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t12 r1c3-t12">
<p>The directory used for the current operation is not valid if being accessed for the first time, or if it has been modified by the DBA since the last access.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t12" headers="r1c1-t12">
<p><code dir="ltr">NO_DATA_FOUND</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t12 r1c2-t12">
<p><code dir="ltr">1403</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t12 r1c3-t12">
<p><code dir="ltr">ENDOFLOB</code> indicator for looping read operations. This is not a hard error.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t12" headers="r1c1-t12">
<p><code dir="ltr">NOEXIST_DIRECTORY</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t12 r1c2-t12">
<p><code dir="ltr">22285</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t12 r1c3-t12">
<p>The directory leading to the file does not exist.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t12" headers="r1c1-t12">
<p><code dir="ltr">NOPRIV_DIRECTORY</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t12 r1c2-t12">
<p><code dir="ltr">22286</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t12 r1c3-t12">
<p>The user does not have the necessary access privileges on the directory or the file for the operation.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t12" headers="r1c1-t12">
<p><code dir="ltr">OPEN_TOOMANY</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t12 r1c2-t12">
<p><code dir="ltr">22290</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t12 r1c3-t12">
<p>The number of open files has reached the maximum limit.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t12" headers="r1c1-t12">
<p><code dir="ltr">OPERATION_FAILED</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t12 r1c2-t12">
<p><code dir="ltr">22288</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t12 r1c3-t12">
<p>The operation attempted on the file failed.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t12" headers="r1c1-t12">
<p><code dir="ltr">QUERY_WRITE</code></p>
</td>
<td class="cellalignment4329" headers="r13c1-t12 r1c2-t12">
<p><code dir="ltr">14553</code></p>
</td>
<td class="cellalignment4329" headers="r13c1-t12 r1c3-t12">
<p>Cannot perform a LOB write inside a query or PDML parallel execution server</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t12" headers="r1c1-t12">
<p><code dir="ltr">SECUREFILE_BADLOB</code></p>
</td>
<td class="cellalignment4329" headers="r14c1-t12 r1c2-t12">
<p><code dir="ltr">43856</code></p>
</td>
<td class="cellalignment4329" headers="r14c1-t12 r1c3-t12">
<p>A non-<code dir="ltr">SECUREFILE</code> LOB type was used in a <code dir="ltr">SECUREFILE</code> only call</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r15c1-t12" headers="r1c1-t12">
<p><code dir="ltr">SECUREFILE_BADPARAM</code></p>
</td>
<td class="cellalignment4329" headers="r15c1-t12 r1c2-t12">
<p><code dir="ltr">43857</code></p>
</td>
<td class="cellalignment4329" headers="r15c1-t12 r1c3-t12">
<p>An invalid argument was passed to a <code dir="ltr">SECUREFILE</code> subprogram</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r16c1-t12" headers="r1c1-t12">
<p><code dir="ltr">SECUREFILE_MARKERASED</code></p>
</td>
<td class="cellalignment4329" headers="r16c1-t12 r1c2-t12">
<p><code dir="ltr">43861</code></p>
</td>
<td class="cellalignment4329" headers="r16c1-t12 r1c3-t12">
<p>The mark provided to a <code dir="ltr">FRAGMENT_*</code> operation has been deleted</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r17c1-t12" headers="r1c1-t12">
<p><code dir="ltr">SECUREFILE_OUTOFBOUNDS</code></p>
</td>
<td class="cellalignment4329" headers="r17c1-t12 r1c2-t12">
<p><code dir="ltr">43883</code></p>
</td>
<td class="cellalignment4329" headers="r17c1-t12 r1c3-t12">
<p>Attempted to perform a <code dir="ltr">FRAGMENT_*</code> operation past the LOB end</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r18c1-t12" headers="r1c1-t12">
<p><code dir="ltr">UNOPENED_FILE</code></p>
</td>
<td class="cellalignment4329" headers="r18c1-t12 r1c2-t12">
<p><code dir="ltr">22289</code></p>
</td>
<td class="cellalignment4329" headers="r18c1-t12 r1c3-t12">
<p>The file is not open for the required operation to be performed.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r19c1-t12" headers="r1c1-t12">
<p><code dir="ltr">VALUE_ERROR</code></p>
</td>
<td class="cellalignment4329" headers="r19c1-t12 r1c2-t12">
<p><code dir="ltr">6502</code></p>
</td>
<td class="cellalignment4329" headers="r19c1-t12 r1c3-t12">
<p>PL/SQL error for invalid values to subprogram&#39;s parameters.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="BABEAJAD"></a>
<div id="ARPLS66622" class="refsect1">
<h2 class="refsect1">Summary of DBMS_LOB Subprograms</h2>
<div id="ARPLS66623" class="tblformal">
<p class="titleintable"><a id="sthref4985"></a><a id="sthref4986"></a>Table 88-9 DBMS_LOB Package Subprograms</p>
<table class="cellalignment4330" title="DBMS_LOB Package Subprograms" summary="This table lists the DBMS_LOB subprograms in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t13">Subprogram</th>
<th class="cellalignment4328" id="r1c2-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t13" headers="r1c1-t13">
<p><a href="#i997432">APPEND Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r2c1-t13 r1c2-t13">
<p>Appends the contents of the source LOB to the destination LOB</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t13" headers="r1c1-t13">
<p><a href="#i997518">CLOSE Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r3c1-t13 r1c2-t13">
<p>Closes a previously opened internal or external LOB</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t13" headers="r1c1-t13">
<p><a href="#i1016668">COMPARE Functions</a></p>
</td>
<td class="cellalignment4329" headers="r4c1-t13 r1c2-t13">
<p>Compares two entire <code dir="ltr">LOBs</code> or parts of two <code dir="ltr">LOBs</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t13" headers="r1c1-t13">
<p><a href="#i1020355">CONVERTTOBLOB Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r5c1-t13 r1c2-t13">
<p>Reads character data from a source <code dir="ltr">CLOB</code> or <code dir="ltr">NCLOB</code> instance, converts the character data to the specified character, writes the converted data to a destination <code dir="ltr">BLOB</code> instance in binary format, and returns the new offsets</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t13" headers="r1c1-t13">
<p><a href="#i1020356">CONVERTTOCLOB Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r6c1-t13 r1c2-t13">
<p>Takes a source <code dir="ltr">BLOB</code> instance, converts the binary data in the source instance to character data using the specified character, writes the character data to a destination <code dir="ltr">CLOB</code> or <code dir="ltr">NCLOB</code> instance, and returns the new offsets</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t13" headers="r1c1-t13">
<p><a href="#i997674">COPY Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r7c1-t13 r1c2-t13">
<p>Copies all, or part, of the source LOB to the destination LOB</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t13" headers="r1c1-t13">
<p><a href="#BGBCJJDF">COPY_DBFS_LINK Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r8c1-t13 r1c2-t13">
<p>Copies the DBFS Link in the source LOB to the destination LOB</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t13" headers="r1c1-t13">
<p><a href="#BGBDAAIF">COPY_FROM_DBFS_LINK</a></p>
</td>
<td class="cellalignment4329" headers="r9c1-t13 r1c2-t13">
<p>Retrieves the data for the LOB from the DBFS store</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t13" headers="r1c1-t13">
<p><a href="#i997788">CREATETEMPORARY Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r10c1-t13 r1c2-t13">
<p>Creates a temporary <code dir="ltr">BLOB</code> or <code dir="ltr">CLOB</code> and its corresponding index in the user&#39;s default temporary tablespace</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t13" headers="r1c1-t13">
<p><a href="#BGBIHAJI">DBFS_LINK_GENERATE_PATH Functions</a></p>
</td>
<td class="cellalignment4329" headers="r11c1-t13 r1c2-t13">
<p>Returns a unique file path name for use in creating a DBFS Link</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t13" headers="r1c1-t13">
<p><a href="#i997838">ERASE Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r12c1-t13 r1c2-t13">
<p>Erases all or part of a LOB</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t13" headers="r1c1-t13">
<p><a href="#i997934">FILECLOSE Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r13c1-t13 r1c2-t13">
<p>Closes the file</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t13" headers="r1c1-t13">
<p><a href="#i998026">FILECLOSEALL Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r14c1-t13 r1c2-t13">
<p>Closes all previously opened files</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r15c1-t13" headers="r1c1-t13">
<p><a href="#i998077">FILEEXISTS Function</a></p>
</td>
<td class="cellalignment4329" headers="r15c1-t13 r1c2-t13">
<p>Checks if the file exists on the server</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r16c1-t13" headers="r1c1-t13">
<p><a href="#i998169">FILEGETNAME Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r16c1-t13 r1c2-t13">
<p>Gets the directory object name and file name</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r17c1-t13" headers="r1c1-t13">
<p><a href="#i998235">FILEISOPEN Function</a></p>
</td>
<td class="cellalignment4329" headers="r17c1-t13 r1c2-t13">
<p>Checks if the file was opened using the input <code dir="ltr">BFILE</code> locators</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r18c1-t13" headers="r1c1-t13">
<p><a href="#i998315">FILEOPEN Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r18c1-t13 r1c2-t13">
<p>Opens a file</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r19c1-t13" headers="r1c1-t13">
<p><a href="#i998411">FRAGMENT_DELETE Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r19c1-t13 r1c2-t13">
<p>Deletes the data at the specified offset for the specified length from the LOB</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r20c1-t13" headers="r1c1-t13">
<p><a href="#CHDGBIBD">FRAGMENT_INSERT Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r20c1-t13 r1c2-t13">
<p>Inserts the specified data (limited to 32K) into the LOB at the specified offset</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r21c1-t13" headers="r1c1-t13">
<p><a href="#CHDJDHHF">FRAGMENT_MOVE Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r21c1-t13 r1c2-t13">
<p>Moves the amount of bytes (<code dir="ltr">BLOB</code>) or characters (<code dir="ltr">CLOB</code>/<code dir="ltr">NCLOB</code>) from the specified offset to the new offset specified</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r22c1-t13" headers="r1c1-t13">
<p><a href="#CHDGBAHJ">FRAGMENT_REPLACE Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r22c1-t13 r1c2-t13">
<p>Replaces the data at the specified offset with the specified data (not to exceed 32k)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r23c1-t13" headers="r1c1-t13">
<p><a href="#BGBDBFAD">FREETEMPORARY Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r23c1-t13 r1c2-t13">
<p>Frees the temporary <code dir="ltr">BLOB</code> or <code dir="ltr">CLOB</code> in the default temporary tablespace</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r24c1-t13" headers="r1c1-t13">
<p><a href="#BGBIEEBG">GET_DBFS_LINK Functions</a></p>
</td>
<td class="cellalignment4329" headers="r24c1-t13 r1c2-t13">
<p>Returns the DBFS Link path associated with the specified SecureFile</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r25c1-t13" headers="r1c1-t13">
<p><a href="#BGBCBHGD">GET_DBFS_LINK_STATE Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r25c1-t13 r1c2-t13">
<p>Retrieves the current DBFS Link state of the specified SecureFile</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r26c1-t13" headers="r1c1-t13">
<p><a href="#BGBCDIHI">GETCHUNKSIZE Functions</a></p>
</td>
<td class="cellalignment4329" headers="r26c1-t13 r1c2-t13">
<p>Returns the amount of space used in the LOB chunk to store the LOB value</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r27c1-t13" headers="r1c1-t13">
<p><a href="#BGBFJFCC">GETCONTENTTYPE Functions</a></p>
</td>
<td class="cellalignment4329" headers="r27c1-t13 r1c2-t13">
<p>Returns the content ID string previously set by means of the <a href="#BGBBGICA">SETCONTENTTYPE Procedure</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r28c1-t13" headers="r1c1-t13">
<p><a href="#i998484">GETLENGTH Functions</a></p>
</td>
<td class="cellalignment4329" headers="r28c1-t13 r1c2-t13">
<p>Gets the length of the LOB value</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r29c1-t13" headers="r1c1-t13">
<p><a href="#CHDIHDIC">GETOPTIONS Functions</a></p>
</td>
<td class="cellalignment4329" headers="r29c1-t13 r1c2-t13">
<p>Obtains settings corresponding to the <code dir="ltr">option_type</code> field for a particular LOB</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r30c1-t13" headers="r1c1-t13">
<p><a href="#i1012980">GET_STORAGE_LIMIT Function</a></p>
</td>
<td class="cellalignment4329" headers="r30c1-t13 r1c2-t13">
<p>Returns the storage limit for LOBs in your database configuration</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r31c1-t13" headers="r1c1-t13">
<p><a href="#i998546">INSTR Functions</a></p>
</td>
<td class="cellalignment4329" headers="r31c1-t13 r1c2-t13">
<p>Returns the matching position of the <span class="italic">nth</span> occurrence of the pattern in the LOB</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r32c1-t13" headers="r1c1-t13">
<p><a href="#i998705">ISOPEN Functions</a></p>
</td>
<td class="cellalignment4329" headers="r32c1-t13 r1c2-t13">
<p>Checks to see if the LOB was already opened using the input locator</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r33c1-t13" headers="r1c1-t13">
<p><a href="#CJHCGHBF">ISSECUREFILE Function</a></p>
</td>
<td class="cellalignment4329" headers="r33c1-t13 r1c2-t13">
<p>Returns <code dir="ltr">TRUE</code> if the LOB locator passed to is for a SecureFiles LOB, otherwise, returns <code dir="ltr">FALSE</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r34c1-t13" headers="r1c1-t13">
<p><a href="#i998745">ISTEMPORARY Functions</a></p>
</td>
<td class="cellalignment4329" headers="r34c1-t13 r1c2-t13">
<p>Checks if the locator is pointing to a temporary LOB</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r35c1-t13" headers="r1c1-t13">
<p><a href="#i998869">LOADBLOBFROMFILE Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r35c1-t13 r1c2-t13">
<p>Loads <code dir="ltr">BFILE</code> data into an internal <code dir="ltr">BLOB</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r36c1-t13" headers="r1c1-t13">
<p><a href="#i998978">LOADCLOBFROMFILE Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r36c1-t13 r1c2-t13">
<p>Loads <code dir="ltr">BFILE</code> data into an internal <code dir="ltr">CLOB</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r37c1-t13" headers="r1c1-t13">
<p><a href="#i998778">LOADFROMFILE Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r37c1-t13 r1c2-t13">
<p>Loads <code dir="ltr">BFILE</code> data into an internal LOB</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r38c1-t13" headers="r1c1-t13">
<p><a href="#BGBJEGGG">MOVE_TO_DBFS_LINK Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r38c1-t13 r1c2-t13">
<p>Writes the specified SecureFile data to the DBFS store</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r39c1-t13" headers="r1c1-t13">
<p><a href="#BABGHBIF">OPEN Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r39c1-t13 r1c2-t13">
<p>Opens a LOB (internal, external, or temporary) in the indicated mode</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r40c1-t13" headers="r1c1-t13">
<p><a href="#i999170">READ Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r40c1-t13 r1c2-t13">
<p>Reads data from the LOB starting at the specified offset</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r41c1-t13" headers="r1c1-t13">
<p><a href="#BGBHHHJC">SET_DBFS_LINK Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r41c1-t13 r1c2-t13">
<p>Links the specified SecureFile to the specified path name. It does not copy the data to the path</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r42c1-t13" headers="r1c1-t13">
<p><a href="#BGBBGICA">SETCONTENTTYPE Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r42c1-t13 r1c2-t13">
<p>Sets the content type string for the data in the LOB</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r43c1-t13" headers="r1c1-t13">
<p><a href="#CHDHDDDD">SETOPTIONS Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r43c1-t13 r1c2-t13">
<p>Enables CSCE features on a per-LOB basis, overriding the default LOB column settings</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r44c1-t13" headers="r1c1-t13">
<p><a href="#i999349">SUBSTR Functions</a></p>
</td>
<td class="cellalignment4329" headers="r44c1-t13 r1c2-t13">
<p>Returns part of the LOB value starting at the specified offset</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r45c1-t13" headers="r1c1-t13">
<p><a href="#i999503">TRIM Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r45c1-t13 r1c2-t13">
<p>Trims the LOB value to the specified shorter length</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r46c1-t13" headers="r1c1-t13">
<p><a href="#i999593">WRITE Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r46c1-t13 r1c2-t13">
<p>Writes data to the LOB from a specified offset</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r47c1-t13" headers="r1c1-t13">
<p><a href="#i999705">WRITEAPPEND Procedures</a></p>
</td>
<td class="cellalignment4329" headers="r47c1-t13 r1c2-t13">
<p>Writes a buffer to the end of a LOB</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="ARPLS66624" class="refsect2"><a id="i997432"></a>
<h3 class="refsect2"><a id="sthref4987"></a>APPEND Procedures</h3>
<p>This procedure appends the contents of a source internal LOB to a destination LOB. It appends the complete source LOB.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4988"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.APPEND (
   dest_lob IN OUT  NOCOPY BLOB, 
   src_lob  IN             BLOB); 

DBMS_LOB.APPEND (
   dest_lob IN OUT  NOCOPY CLOB  CHARACTER SET ANY_CS, 
   src_lob  IN             CLOB  CHARACTER SET dest_lob%CHARSET);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4989"></a>Parameters</p>
<div id="ARPLS66625" class="tblformal">
<p class="titleintable"><a id="sthref4990"></a><a id="sthref4991"></a>Table 88-10 APPEND Procedure Parameters</p>
<table class="cellalignment4330" title="APPEND Procedure Parameters " summary="This table describes the parameters of DBMS_LOB.APPEND." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t14">Parameter</th>
<th class="cellalignment4328" id="r1c2-t14">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t14" headers="r1c1-t14">
<p><code dir="ltr">dest_lob</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t14 r1c2-t14">
<p>Locator for the internal LOB to which the data is to be appended.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t14" headers="r1c1-t14">
<p><code dir="ltr">src_lob</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t14 r1c2-t14">
<p>Locator for the internal LOB from which the data is to be read.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4992"></a>Exceptions</p>
<div id="ARPLS66626" class="tblformal">
<p class="titleintable"><a id="sthref4993"></a><a id="sthref4994"></a>Table 88-11 APPEND Procedure Exceptions</p>
<table class="cellalignment4330" title="APPEND Procedure Exceptions " summary="This table describes the Exceptions raised by APPEND." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t15">Exception</th>
<th class="cellalignment4328" id="r1c2-t15">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t15" headers="r1c1-t15">
<p><code dir="ltr">VALUE_ERROR</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t15 r1c2-t15">
<p>Either the source or the destination LOB is <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t15" headers="r1c1-t15">
<p><code dir="ltr">QUERY_WRITE</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t15 r1c2-t15">
<p>Cannot perform a LOB write inside a query or PDML parallel execution server</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t15" headers="r1c1-t15">
<p><code dir="ltr">BUFFERING_ENABLED</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t15 r1c2-t15">
<p>Cannot perform operation with LOB buffering enabled if buffering is enabled on either LOB</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4995"></a>Usage Notes</p>
<ul>
<li>
<p>It is not mandatory that you wrap the LOB operation inside the Open/Close interfaces. If you did not open the LOB before performing the operation, the functional and domain indexes on the LOB column are updated during the call. However, if you opened the LOB before performing the operation, you must close it before you commit the transaction. When an internal LOB is closed, it updates the functional and domain indexes on the LOB column.</p>
<p>If you do not wrap the LOB operation inside the Open/Close API, the functional and domain indexes are updated each time you write to the LOB. This can adversely affect performance. Therefore, it is recommended that you enclose write operations to the LOB within the <code dir="ltr">OPEN</code> or <code dir="ltr">CLOSE</code> statement.</p>
</li>
<li>
<p>If <code dir="ltr">APPEND</code> is called on a LOB that has been archived, it implicitly gets the LOB before the first byte is written</p>
</li>
<li>
<p>If <code dir="ltr">APPEND</code> is called on a SecureFiles LOB that is a DBFS Link, an exception is thrown.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB1001" href="../ADLOB/adlob_lob_ops.htm#ADLOB1001"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for additional details on usage of this procedure</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66645" class="refsect2"><a id="i997518"></a>
<h3 class="refsect2"><a id="sthref4996"></a>CLOSE Procedure</h3>
<p>This procedure closes a previously opened internal or external LOB.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4997"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.CLOSE (
   lob_loc    IN OUT NOCOPY BLOB); 

DBMS_LOB.CLOSE (
   lob_loc    IN OUT NOCOPY CLOB CHARACTER SET ANY_CS); 

DBMS_LOB.CLOSE (
   file_loc   IN OUT NOCOPY BFILE); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4998"></a>Parameters</p>
<div id="ARPLS66646" class="tblformal">
<p class="titleintable"><a id="sthref4999"></a><a id="sthref5000"></a>Table 88-12 CLOSE Procedure Parameters</p>
<table class="cellalignment4330" title="CLOSE Procedure Parameters " summary="This table describes the parameters of DBMS_LOB.CLOSE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t17">Parameter</th>
<th class="cellalignment4328" id="r1c2-t17">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t17" headers="r1c1-t17">
<p><code dir="ltr">lob_loc</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t17 r1c2-t17">
<p>LOB locator. For more information, see <a href="#i1015792">Operational Notes</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5001"></a>Exceptions</p>
<p>No error is returned if the <code dir="ltr">BFILE</code> exists but is not opened. An error is returned if the LOB is not open.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5002"></a>Usage Notes</p>
<p><code dir="ltr">CLOSE</code> requires a round-trip to the server for both internal and external LOBs. For internal LOBs, <code dir="ltr">CLOSE</code> triggers other code that relies on the close call, and for external LOBs (<code dir="ltr">BFILEs</code>), <code dir="ltr">CLOSE</code> actually closes the server-side operating system file.</p>
<p>It is not mandatory that you wrap all LOB operations inside the Open/Close interfaces. However, if you open a LOB, you must close it before you commit the transaction; an error is produced if you do not. When an internal LOB is closed, it updates the functional and domain indexes on the LOB column.</p>
<p>It is an error to commit the transaction before closing all opened LOBs that were opened by the transaction. When the error is returned, the openness of the open LOBs is discarded, but the transaction is successfully committed. Hence, all the changes made to the LOB and non-LOB data in the transaction are committed, but the domain and function-based indexes are not updated. If this happens, you should rebuild the functional and domain indexes on the LOB column.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB1002" href="../ADLOB/adlob_design.htm#ADLOB1002"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for additional details on usage of this procedure</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66647" class="refsect2"><a id="i1016668"></a>
<h3 class="refsect2"><a id="sthref5003"></a>COMPARE Functions</h3>
<p>This function compares two entire LOBs or parts of two LOBs.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5004"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.COMPARE (
   lob_1            IN BLOB,
   lob_2            IN BLOB,
   amount           IN INTEGER := DBMS_LOB.LOBMAXSIZE,
   offset_1         IN INTEGER := 1,
   offset_2         IN INTEGER := 1)
  RETURN INTEGER;

DBMS_LOB.COMPARE (
   lob_1            IN CLOB  CHARACTER SET ANY_CS,
   lob_2            IN CLOB  CHARACTER SET lob_1%CHARSET,
   amount           IN INTEGER := DBMS_LOB.LOBMAXSIZE,
   offset_1         IN INTEGER := 1,
   offset_2         IN INTEGER := 1)
  RETURN INTEGER; 

DBMS_LOB.COMPARE (
   lob_1            IN BFILE,
   lob_2            IN BFILE,
   amount           IN INTEGER,
   offset_1         IN INTEGER := 1,
   offset_2         IN INTEGER := 1)
  RETURN INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5005"></a>Pragmas</p>
<pre dir="ltr">pragma restrict_references(COMPARE, WNDS, WNPS, RNDS, RNPS);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5006"></a>Parameters</p>
<div id="ARPLS66648" class="tblformal">
<p class="titleintable"><a id="sthref5007"></a><a id="sthref5008"></a>Table 88-13 COMPARE Function Parameters</p>
<table class="cellalignment4330" title="COMPARE Function Parameters " summary="This table describes the parameters of DBMS_LOB.COMPARE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t19">Parameter</th>
<th class="cellalignment4328" id="r1c2-t19">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t19" headers="r1c1-t19">
<p><code dir="ltr">lob_1</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t19 r1c2-t19">
<p>LOB locator of first target for comparison.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t19" headers="r1c1-t19">
<p><code dir="ltr">lob_2</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t19 r1c2-t19">
<p>LOB locator of second target for comparison.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t19" headers="r1c1-t19">
<p><code dir="ltr">amount</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t19 r1c2-t19">
<p>Number of bytes (for <code dir="ltr">BLOBs</code>) or characters (for <code dir="ltr">CLOB</code>s/<code dir="ltr">NCLOBS</code>s) to compare.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t19" headers="r1c1-t19">
<p><code dir="ltr">offset_1</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t19 r1c2-t19">
<p>Offset in bytes or characters on the first LOB (origin: 1) for the comparison.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t19" headers="r1c1-t19">
<p><code dir="ltr">offset_2</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t19 r1c2-t19">
<p>Offset in bytes or characters on the second LOB (origin: 1) for the comparison.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5009"></a>Return Values</p>
<ul>
<li>
<p><code dir="ltr">INTEGER</code>: 0 if the comparison succeeds, nonzero if not.</p>
</li>
<li>
<p><code dir="ltr">NULL</code>, if any of <code dir="ltr">amount,</code> <code dir="ltr">offset_1</code> or <code dir="ltr">offset_2</code> is not a valid LOB offset value. A valid offset is within the range of 1 to <code dir="ltr">LOBMAXSIZE</code> inclusive.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5010"></a>Usage Notes</p>
<ul>
<li>
<p>You can only compare LOBs of the same datatype (<code dir="ltr">LOBs</code> of <code dir="ltr">BLOB</code> type with other <code dir="ltr">BLOBs</code>, and <code dir="ltr">CLOBs</code> with <code dir="ltr">CLOBs</code>, and <code dir="ltr">BFILEs</code> with <code dir="ltr">BFILEs</code>). For <code dir="ltr">BFILEs</code>, the file must be already opened using a successful <code dir="ltr">FILEOPEN</code> operation for this operation to succeed.</p>
</li>
<li>
<p><code dir="ltr">COMPARE</code> returns 0 if the data exactly matches over the range specified by the <code dir="ltr">offset</code> and <code dir="ltr">amount</code> parameters. <code dir="ltr">COMPARE</code> returns -1 if the first <code dir="ltr">CLOB</code> is less than the second, and 1 if it is greater.</p>
</li>
<li>
<p>For fixed-width <span class="italic">n</span>-byte <code dir="ltr">CLOBs</code>, if the input amount for <code dir="ltr">COMPARE</code> is specified to be greater than (<code dir="ltr">DBMS_LOB</code>.<code dir="ltr">LOBMAXSIZE</code>/<span class="italic">n</span>), then <code dir="ltr">COMPARE</code> matches characters in a range of size (<code dir="ltr">DBMS_LOB</code>.<code dir="ltr">LOBMAXSIZE</code>/<span class="italic">n</span>), or Max(length(clob1), length(clob2)), whichever is lesser.</p>
</li>
<li>
<p>If <code dir="ltr">COMPARE</code> is called on any LOB that has been archived, it implicitly gets the LOB before the compare begins.</p>
</li>
<li>
<p>If <code dir="ltr">COMPARE()</code> is called on a SecureFiles LOB that is a DBFS Link, the linked LOB is streamed from DBFS, if possible, otherwise an exception is thrown.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5011"></a>Exceptions</p>
<div id="ARPLS66649" class="tblformal">
<p class="titleintable"><a id="sthref5012"></a><a id="sthref5013"></a>Table 88-14 COMPARE Function Exceptions for BFILE operations</p>
<table class="cellalignment4330" title="COMPARE Function Exceptions for BFILE operations " summary="This table describes the Exceptions raised by COMPARE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t20">Exception</th>
<th class="cellalignment4328" id="r1c2-t20">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t20" headers="r1c1-t20">
<p><code dir="ltr">UNOPENED_FILE</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t20 r1c2-t20">
<p>File was not opened using the input locator.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t20" headers="r1c1-t20">
<p><code dir="ltr">NOEXIST_DIRECTORY</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t20 r1c2-t20">
<p>Directory does not exist.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t20" headers="r1c1-t20">
<p><code dir="ltr">NOPRIV_DIRECTORY</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t20 r1c2-t20">
<p>You do not have privileges for the directory.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t20" headers="r1c1-t20">
<p><code dir="ltr">INVALID_DIRECTORY</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t20 r1c2-t20">
<p>Directory has been invalidated after the file was opened.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t20" headers="r1c1-t20">
<p><code dir="ltr">INVALID_OPERATION</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t20 r1c2-t20">
<p>File does not exist, or you do not have access privileges on the file.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t20" headers="r1c1-t20">
<p><code dir="ltr">BUFFERING_ENABLED</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t20 r1c2-t20">
<p>Cannot perform operation with LOB buffering enabled if buffering is enabled on either LOB</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB1003" href="../ADLOB/adlob_lob_ops.htm#ADLOB1003"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for additional details on usage of this procedure</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS603" class="refsect2"><a id="i1020355"></a>
<h3 class="refsect2"><a id="sthref5014"></a>CONVERTTOBLOB Procedure</h3>
<p>This procedure reads character data from a source <code dir="ltr">CLOB</code> or <code dir="ltr">NCLOB</code> instance, converts the character data to the character set you specify, writes the converted data to a destination <code dir="ltr">BLOB</code> instance in binary format, and returns the new offsets. You can use this interface with any combination of persistent or temporary LOB instances as the source or destination.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5015"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.CONVERTTOBLOB(
  dest_lob       IN OUT     NOCOPY  BLOB,
  src_clob       IN         CLOB CHARACTER SET ANY_CS,
  amount         IN         INTEGER,
  dest_offset    IN OUT     INTEGER,
  src_offset     IN OUT     INTEGER, 
  blob_csid      IN         NUMBER,
  lang_context   IN OUT     INTEGER,
  warning        OUT        INTEGER); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5016"></a>Parameters</p>
<div id="ARPLS66650" class="tblformal">
<p class="titleintable"><a id="sthref5017"></a><a id="sthref5018"></a>Table 88-15 CONVERTTOBLOB Procedure Parameters</p>
<table class="cellalignment4330" title="CONVERTTOBLOB Procedure Parameters" summary="This table describes the parameters of DBMS_LOB.CONVERTTOBLOB." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t22">Parameter</th>
<th class="cellalignment4328" id="r1c2-t22">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t22" headers="r1c1-t22">
<p><code dir="ltr">dest_lob</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t22 r1c2-t22">
<p>LOB locator of the destination LOB instance.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t22" headers="r1c1-t22">
<p><code dir="ltr">src_clob</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t22 r1c2-t22">
<p>LOB locator of the source LOB instance.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t22" headers="r1c1-t22">
<p><code dir="ltr">amount</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t22 r1c2-t22">
<p>Number of characters to convert from the source LOB.</p>
<p>If you want to copy the entire LOB, pass the constant <code dir="ltr">DBMS_LOB</code>.<code dir="ltr">LOBMAXSIZE</code>. If you pass any other value, it must be less than or equal to the size of the LOB.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t22" headers="r1c1-t22">
<p><code dir="ltr">dest_offset</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t22 r1c2-t22">
<p><code dir="ltr">(IN)</code> Offset in bytes in the destination LOB for the start of the write. Specify a value of 1 to start at the beginning of the LOB.</p>
<p><code dir="ltr">(OUT)</code> The new offset in bytes after the end of the write.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t22" headers="r1c1-t22">
<p><code dir="ltr">src_offset</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t22 r1c2-t22">
<p><code dir="ltr">(IN)</code> Offset in characters in the source LOB for the start of the read.</p>
<p><code dir="ltr">(OUT)</code> Offset in characters in the source LOB right after the end of the read.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t22" headers="r1c1-t22">
<p><code dir="ltr">blob_csid</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t22 r1c2-t22">
<p>Desired character set ID of the converted data.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t22" headers="r1c1-t22">
<p><code dir="ltr">lang_context</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t22 r1c2-t22">
<p><code dir="ltr">(IN)</code> Language context, such as shift status, for the current conversion.</p>
<p><code dir="ltr">(OUT)</code> The language context at the time when the current conversion is done.</p>
<p>This information is returned so you can use it for subsequent conversions without losing or misinterpreting any source data. For the very first conversion, or if do not care, use the default value of zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t22" headers="r1c1-t22">
<p><code dir="ltr">warning</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t22 r1c2-t22">
<p><code dir="ltr">(OUT)</code> Warning message. This parameter indicates when something abnormal happened during the conversion. You are responsible for checking the warning message.</p>
<p>Currently, the only possible warning is &mdash; inconvertible character. This occurs when the character in the source cannot be properly converted to a character in destination. The default replacement character (for example, &#39;?&#39;) is used in place of the inconvertible character. The return value of this error message is defined as the constant <code dir="ltr">warn_inconvertible_char</code> in the <code dir="ltr">DBMS_LOB</code> package.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5019"></a>Usage Notes</p>
<p class="subhead1"><a id="ARPLS66651"></a>Preconditions</p>
<p>Before calling the <code dir="ltr">CONVERTTOBLOB</code> procedure, the following preconditions must be met:</p>
<ul>
<li>
<p>Both the source and destination LOB instances must exist.</p>
</li>
<li>
<p>If the destination LOB is a persistent LOB, the row must be locked. To lock the row, select the LOB using the <code dir="ltr">FOR</code> <code dir="ltr">UPDATE</code> clause of the <code dir="ltr">SELECT</code> statement.</p>
</li>
</ul>
<p class="subhead1"><a id="ARPLS66652"></a>Constants and Defaults</p>
<p>All parameters are required. You must pass a variable for each <code dir="ltr">OUT</code> or <code dir="ltr">IN OUT</code> parameter. You must pass either a variable or a value for each <code dir="ltr">IN</code> parameter.</p>
<p><a href="#BABJBECD">Table 88-16</a> gives a summary of typical values for each parameter. The first column lists the parameter, the second column lists the typical value, and the last column describes the result of passing the value. Note that constants are used for some values. These constants are defined in the <code dir="ltr">dbmslob.sql</code> package specification file.</p>
<div id="ARPLS66653" class="tblformal">
<p class="titleintable"><a id="sthref5020"></a><a id="BABJBECD"></a>Table 88-16 DBMS_LOB.CONVERTTOBLOB Typical Values</p>
<table class="cellalignment4330" title="DBMS_LOB.CONVERTTOBLOB Typical Values " summary="This table describes Typical Values for use with CONVERTTOBLOB." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4333" id="r1c1-t23">Parameter</th>
<th class="cellalignment4333" id="r1c2-t23">Value</th>
<th class="cellalignment4333" id="r1c3-t23">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t23" headers="r1c1-t23">
<p><code dir="ltr">amount</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t23 r1c2-t23">
<p><code dir="ltr">LOBMAXSIZE (IN)</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t23 r1c3-t23">
<p>convert the entire file</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t23" headers="r1c1-t23">
<p><code dir="ltr">dest_offset</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t23 r1c2-t23">
<p><code dir="ltr">1 (IN)</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t23 r1c3-t23">
<p>start from the beginning</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t23" headers="r1c1-t23">
<p><code dir="ltr">src_offset</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t23 r1c2-t23">
<p><code dir="ltr">1 (IN)</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t23 r1c3-t23">
<p>start from the beginning</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t23" headers="r1c1-t23">
<p><code dir="ltr">blob_csid</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t23 r1c2-t23">
<p><code dir="ltr">DEFAULT_CSID (IN)</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t23 r1c3-t23">
<p>default <code dir="ltr">CSID</code>, use same <code dir="ltr">CSID</code> as source LOB</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t23" headers="r1c1-t23">
<p><code dir="ltr">lang_context</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t23 r1c2-t23">
<p><code dir="ltr">DEFAULT_LANG_CTX (IN)</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t23 r1c3-t23">
<p>default language context</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t23" headers="r1c1-t23">
<p><code dir="ltr">warning</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t23 r1c2-t23">
<p><code dir="ltr">NO_WARNING (OUT)</code></p>
<p><code dir="ltr">WARN_INCONVERTIBLE_CHAR (OUT)</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t23 r1c3-t23">
<p>no warning message, success</p>
<p>character in source cannot be properly converted</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead1"><a id="ARPLS66654"></a>General Notes</p>
<ul>
<li>
<p>You must specify the desired character set for the destination LOB in the <code dir="ltr">blob_csid</code> parameter. You can pass a zero value for <code dir="ltr">blob_csid</code>. When you do so, the database assumes that the desired character set is the same as the source LOB character set.</p>
</li>
<li>
<p>You must specify the offsets for both the source and destination LOBs, and the number of characters to copy from the source LOB. The <code dir="ltr">amount</code> and <code dir="ltr">src_offset</code> values are in characters and the <code dir="ltr">dest_offset</code> is in bytes. To convert the entire LOB, you can specify <code dir="ltr">LOBMAXSIZE</code> for the <code dir="ltr">amount</code> parameter.</p>
</li>
<li>
<p><code dir="ltr">CONVERTTOBLOB</code> gets the source and/or destination LOBs as necessary prior to conversion and write of the data.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5021"></a>Exceptions</p>
<p><a href="#BABBIEJD">Table 88-17</a> gives possible exceptions this procedure can throw. The first column lists the exception string and the second column describes the error conditions that can cause the exception.</p>
<div id="ARPLS66655" class="tblformal">
<p class="titleintable"><a id="sthref5022"></a><a id="BABBIEJD"></a>Table 88-17 CONVERTTOBLOB Procedure Exceptions</p>
<table class="cellalignment4330" title="CONVERTTOBLOB Procedure Exceptions " summary="This table describes the Exceptions raised by CONVERTTOBLOB." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t24">Exception</th>
<th class="cellalignment4328" id="r1c2-t24">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t24" headers="r1c1-t24">
<p><code dir="ltr">VALUE_ERROR</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t24 r1c2-t24">
<p>Any of the input parameters are <code dir="ltr">NULL</code> or <code dir="ltr">INVALID</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t24" headers="r1c1-t24">
<p><code dir="ltr">INVALID_ARGVAL</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t24 r1c2-t24">
<p>One or more of the following:</p>
<p>- <code dir="ltr">src_offset</code> or <code dir="ltr">dest_offset</code> &lt; 1.</p>
<p>- <code dir="ltr">src_offset</code> or <code dir="ltr">dest_offset</code> &gt; <code dir="ltr">LOBMAXSIZE</code>.</p>
<p>- <code dir="ltr">amount</code> &lt; 1.</p>
<p>- <code dir="ltr">amount</code> &gt; <code dir="ltr">LOBMAXSIZE</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB" href="../ADLOB/toc.htm"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for more information on using LOBs in application development</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS602" class="refsect2"><a id="i1020356"></a>
<h3 class="refsect2"><a id="sthref5023"></a>CONVERTTOCLOB Procedure</h3>
<p>This procedure takes a source <code dir="ltr">BLOB</code> instance, converts the binary data in the source instance to character data using the character set you specify, writes the character data to a destination <code dir="ltr">CLOB</code> or <code dir="ltr">NCLOB</code> instance, and returns the new offsets. You can use this interface with any combination of persistent or temporary LOB instances as the source or destination.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5024"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.CONVERTTOCLOB(
   dest_lob       IN OUT NOCOPY  CLOB CHARACTER SET ANY_CS,
   src_blob       IN             BLOB,
   amount         IN             INTEGER,
   dest_offset    IN OUT         INTEGER,
   src_offset     IN OUT         INTEGER, 
   blob_csid      IN             NUMBER,
   lang_context   IN OUT         INTEGER,
   warning        OUT            INTEGER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5025"></a>Parameters</p>
<div id="ARPLS66656" class="tblformal">
<p class="titleintable"><a id="sthref5026"></a><a id="sthref5027"></a>Table 88-18 CONVERTTOCLOB Procedure Parameters</p>
<table class="cellalignment4330" title="CONVERTTOCLOB Procedure Parameters " summary="This table describes the parameters of DBMS_LOB.CONVERTTOCLOB." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t26">Parameter</th>
<th class="cellalignment4328" id="r1c2-t26">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t26" headers="r1c1-t26">
<p><code dir="ltr">dest_lob</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t26 r1c2-t26">
<p>LOB locator of the destination LOB instance.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t26" headers="r1c1-t26">
<p><code dir="ltr">src_blob</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t26 r1c2-t26">
<p>LOB locator of the source LOB instance.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t26" headers="r1c1-t26">
<p><code dir="ltr">amount</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t26 r1c2-t26">
<p>Number of bytes to convert from the source LOB.</p>
<p>If you want to copy the entire BLOB, pass the constant <code dir="ltr">DBMS_LOB</code>.<code dir="ltr">LOBMAXSIZE</code>. If you pass any other value, it must be less than or equal to the size of the <code dir="ltr">BLOB</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t26" headers="r1c1-t26">
<p><code dir="ltr">dest_offset</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t26 r1c2-t26">
<p><code dir="ltr">(IN)</code> Offset in characters in the destination LOB for the start of the write. Specify a value of 1 to start at the beginning of the LOB.</p>
<p><code dir="ltr">(OUT)</code> The new offset in characters after the end of the write. This offset always points to the beginning of the first complete character after the end of the write.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t26" headers="r1c1-t26">
<p><code dir="ltr">src_offset</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t26 r1c2-t26">
<p><code dir="ltr">(IN)</code> Offset in bytes in the source LOB for the start of the read.</p>
<p><code dir="ltr">(OUT)</code> Offset in bytes in the source LOB right after the end of the read.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t26" headers="r1c1-t26">
<p><code dir="ltr">blob_csid</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t26 r1c2-t26">
<p>The character set ID of the source data</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t26" headers="r1c1-t26">
<p><code dir="ltr">lang_context</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t26 r1c2-t26">
<p><code dir="ltr">(</code><code dir="ltr">IN</code><code dir="ltr">)</code> Language context, such as shift status, for the current conversion.</p>
<p><code dir="ltr">(OUT)</code> The language context at the time when the current conversion is done.</p>
<p>This information is returned so you can use it for subsequent conversions without losing or misinterpreting any source data. For the very first conversion, or if do not care, use the default value of zero.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t26" headers="r1c1-t26">
<p><code dir="ltr">warning</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t26 r1c2-t26">
<p>Warning message. This parameter indicates when something abnormal happened during the conversion. You are responsible for checking the warning message.</p>
<p>Currently, the only possible warning is &mdash; inconvertible character. This occurs when the character in the source cannot be properly converted to a character in destination. The default replacement character (for example, &#39;?&#39;) is used in place of the inconvertible character. The return value of this error message is defined as the constant <code dir="ltr">warn_inconvertible_char</code> in the <code dir="ltr">DBMS_LOB</code> package.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5028"></a>Usage Notes</p>
<p class="subhead1"><a id="ARPLS66657"></a>Preconditions</p>
<p>Before calling the <code dir="ltr">CONVERTTOCLOB</code> procedure, the following preconditions must be met:</p>
<ul>
<li>
<p>Both the source and destination LOB instances must exist.</p>
</li>
<li>
<p>If the destination LOB is a persistent LOB, the row must be locked before calling the <code dir="ltr">CONVERTTOCLOB</code> procedure. To lock the row, select the LOB using the <code dir="ltr">FOR UPDATE</code> clause of the <code dir="ltr">SELECT</code> statement.</p>
</li>
</ul>
<p class="subhead1"><a id="ARPLS66658"></a>Constants and Defaults</p>
<p>All parameters are required. You must pass a variable for each <code dir="ltr">OUT</code> or <code dir="ltr">IN OUT</code> parameter. You must pass either a variable or a value for each <code dir="ltr">IN</code> parameter.</p>
<p><a href="#BABHAGHF">Table 88-19</a> gives a summary of typical values for each parameter. The first column lists the parameter, the second column lists the typical value, and the last column describes the result of passing the value. Note that constants are used for some values. These constants are defined in the <code dir="ltr">dbmslob.sql</code> package specification file.</p>
<div id="ARPLS66659" class="tblformal">
<p class="titleintable"><a id="sthref5029"></a><a id="BABHAGHF"></a>Table 88-19 DBMS_LOB.CONVERTTOCLOB Typical Values</p>
<table class="cellalignment4330" title="DBMS_LOB.CONVERTTOCLOB Typical Values " summary="This table describes Typical Values for use with CONVERTTOCLOB." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4333" id="r1c1-t27">Parameter</th>
<th class="cellalignment4333" id="r1c2-t27">Value</th>
<th class="cellalignment4333" id="r1c3-t27">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t27" headers="r1c1-t27">
<p><code dir="ltr">amount</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t27 r1c2-t27">
<p><code dir="ltr">LOBMAXSIZE (IN)</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t27 r1c3-t27">
<p>convert the entire file</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t27" headers="r1c1-t27">
<p><code dir="ltr">dest_offset</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t27 r1c2-t27">
<p><code dir="ltr">1 (IN)</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t27 r1c3-t27">
<p>start from the beginning</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t27" headers="r1c1-t27">
<p><code dir="ltr">src_offset</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t27 r1c2-t27">
<p><code dir="ltr">1 (IN)</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t27 r1c3-t27">
<p>start from the beginning</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t27" headers="r1c1-t27">
<p><code dir="ltr">csid</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t27 r1c2-t27">
<p><code dir="ltr">DEFAULT_CSID (IN)</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t27 r1c3-t27">
<p>default <code dir="ltr">CSID</code>, use destination <code dir="ltr">CSID</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t27" headers="r1c1-t27">
<p><code dir="ltr">lang_context</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t27 r1c2-t27">
<p><code dir="ltr">DEFAULT_LANG_CTX (IN)</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t27 r1c3-t27">
<p>default language context</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t27" headers="r1c1-t27">
<p><code dir="ltr">warning</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t27 r1c2-t27">
<p><code dir="ltr">NO_WARNING (OUT)</code></p>
<p><code dir="ltr">WARN_INCONVERTIBLE_CHAR (OUT)</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t27 r1c3-t27">
<p>no warning message, success</p>
<p>character in source cannot be properly converted</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead1"><a id="ARPLS66660"></a>General Notes</p>
<ul>
<li>
<p>You must specify the desired character set for the source LOB in the <code dir="ltr">blob_csid</code> parameter. You can pass a zero value for <code dir="ltr">blob_csid</code>. When you do so, the database assumes that the desired character set is the same as the destianation LOB character set.</p>
</li>
<li>
<p>You must specify the offsets for both the source and destination LOBs, and the number of characters to copy from the source LOB. The <code dir="ltr">amount</code> and <code dir="ltr">src_offset</code> values are in bytes and the <code dir="ltr">dest_offset</code> is in characters. To convert the entire LOB, you can specify <code dir="ltr">LOBMAXSIZE</code> for the <code dir="ltr">amount</code> parameter.</p>
</li>
<li>
<p><code dir="ltr">CONVERTTOCLOB</code> gets the source and/or destination LOBs as necessary prior to conversion and write of the data.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5030"></a>Exceptions</p>
<div id="ARPLS66661" class="tblformal">
<p class="titleintable"><a id="sthref5031"></a><a id="sthref5032"></a>Table 88-20 CONVERTTOCLOB Procedure Exceptions</p>
<table class="cellalignment4330" title="CONVERTTOCLOB Procedure Exceptions " summary="This table describes the Exceptions raised by CONVERTTOCLOB." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t28">Exception</th>
<th class="cellalignment4328" id="r1c2-t28">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t28" headers="r1c1-t28">
<p><code dir="ltr">VALUE_ERROR</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t28 r1c2-t28">
<p>Any of the input parameters are <code dir="ltr">NULL</code> or <code dir="ltr">INVALID</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t28" headers="r1c1-t28">
<p><code dir="ltr">INVALID_ARGVAL</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t28 r1c2-t28">
<p>One or more of the following:</p>
<p>- <code dir="ltr">src_offset</code> or <code dir="ltr">dest_offset</code> &lt; 1.</p>
<p>- <code dir="ltr">src_offset</code> or <code dir="ltr">dest_offset</code> &gt; <code dir="ltr">LOBMAXSIZE</code>.</p>
<p>- <code dir="ltr">amount</code> &lt; 1.</p>
<p>- <code dir="ltr">amount</code> &gt; <code dir="ltr">LOBMAXSIZE</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB" href="../ADLOB/toc.htm"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for more information on using LOBs in application development</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66662" class="refsect2"><a id="i997674"></a>
<h3 class="refsect2"><a id="sthref5033"></a>COPY Procedures</h3>
<p>This procedure copies all, or a part of, a source internal LOB to a destination internal LOB. You can specify the offsets for both the source and destination LOBs, and the number of bytes or characters to copy.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5034"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.COPY (
  dest_lob    IN OUT NOCOPY BLOB,
  src_lob     IN            BLOB,
  amount      IN            INTEGER,
  dest_offset IN            INTEGER := 1,
  src_offset  IN            INTEGER := 1);

DBMS_LOB.COPY ( 
  dest_lob    IN OUT NOCOPY CLOB  CHARACTER SET ANY_CS,
  src_lob     IN            CLOB  CHARACTER SET dest_lob%CHARSET,
  amount      IN            INTEGER,
  dest_offset IN            INTEGER := 1,
  src_offset  IN            INTEGER := 1);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5035"></a>Parameters</p>
<div id="ARPLS66663" class="tblformal">
<p class="titleintable"><a id="sthref5036"></a><a id="sthref5037"></a>Table 88-21 COPY Procedure Parameters</p>
<table class="cellalignment4330" title="COPY Procedure Parameters " summary="This table describes the parameters of DBMS_LOB.COPY." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t30">Parameter</th>
<th class="cellalignment4328" id="r1c2-t30">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t30" headers="r1c1-t30">
<p><code dir="ltr">dest_lob</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t30 r1c2-t30">
<p>LOB locator of the copy target.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t30" headers="r1c1-t30">
<p><code dir="ltr">src_lob</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t30 r1c2-t30">
<p>LOB locator of source for the copy.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t30" headers="r1c1-t30">
<p><code dir="ltr">amount</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t30 r1c2-t30">
<p>Number of bytes (for <code dir="ltr">BLOBs</code>) or characters (for <code dir="ltr">CLOBs</code>) to copy.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t30" headers="r1c1-t30">
<p><code dir="ltr">dest_offset</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t30 r1c2-t30">
<p>Offset in bytes or characters in the destination LOB (origin: 1) for the start of the copy.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t30" headers="r1c1-t30">
<p><code dir="ltr">src_offset</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t30 r1c2-t30">
<p>Offset in bytes or characters in the source LOB (origin: 1) for the start of the copy.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5038"></a>Exceptions</p>
<div id="ARPLS66664" class="tblformal">
<p class="titleintable"><a id="sthref5039"></a><a id="sthref5040"></a>Table 88-22 &nbsp;COPY Procedure Exceptions</p>
<table class="cellalignment4330" title="&nbsp;COPY Procedure Exceptions " summary="This table describes the Exceptions raised by COPY." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t31">Exception</th>
<th class="cellalignment4328" id="r1c2-t31">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t31" headers="r1c1-t31">
<p><code dir="ltr">VALUE_ERROR</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t31 r1c2-t31">
<p>Any of the input parameters are <code dir="ltr">NULL</code> or invalid.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t31" headers="r1c1-t31">
<p><code dir="ltr">INVALID_ARGVAL</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t31 r1c2-t31">
<p>Either:</p>
<p>- <code dir="ltr">src_offset</code> or <code dir="ltr">dest_offset</code> &lt; 1</p>
<p>- <code dir="ltr">src_offset</code> or <code dir="ltr">dest_offset</code> &gt; <code dir="ltr">LOBMAXSIZE</code></p>
<p>- <code dir="ltr">amount</code> &lt; 1</p>
<p>- <code dir="ltr">amount</code> &gt; <code dir="ltr">LOBMAXSIZE</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t31" headers="r1c1-t31">
<p><code dir="ltr">QUERY_WRITE</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t31 r1c2-t31">
<p>Cannot perform a LOB write inside a query or PDML parallel execution server</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t31" headers="r1c1-t31">
<p><code dir="ltr">BUFFERING_ENABLED</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t31 r1c2-t31">
<p>Cannot perform operation with LOB buffering enabled if buffering is enabled on either LOB</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5041"></a>Usage Notes</p>
<ul>
<li>
<p>If the offset you specify in the destination LOB is beyond the end of the data currently in this LOB, then zero-byte fillers or spaces are inserted in the destination <code dir="ltr">BLOB</code> or <code dir="ltr">CLOB</code> respectively. If the offset is less than the current length of the destination LOB, then existing data is overwritten.</p>
</li>
<li>
<p>It is not an error to specify an amount that exceeds the length of the data in the source LOB. Thus, you can specify a large amount to copy from the source LOB, which copies data from the <code dir="ltr">src_offset</code> to the end of the source LOB.</p>
</li>
<li>
<p>It is not mandatory that you wrap the LOB operation inside the Open/Close interfaces. If you did not open the LOB before performing the operation, the functional and domain indexes on the LOB column are updated during the call. However, if you opened the LOB before performing the operation, you must close it before you commit the transaction. When an internal LOB is closed, it updates the functional and domain indexes on the LOB column.</p>
</li>
<li>
<p>If you do not wrap the LOB operation inside the Open/Close API, the functional and domain indexes are updated each time you write to the LOB. This can adversely affect performance. Therefore, it is recommended that you enclose write operations to the LOB within the <code dir="ltr">OPEN</code> or <code dir="ltr">CLOSE</code> statement.</p>
</li>
<li>
<p>Prior to copy, the source and destination LOBs are retrieved, if they are currently archived. For a complete over-write, the destination LOB is not retrieved.</p>
</li>
<li>
<p>If the source LOB is a DBFS Link, the data is streamed from DBFS, if possible, otherwise an exception is thrown. If the destination LOB is a DBFS Link, an exception is thrown.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB1004" href="../ADLOB/adlob_lob_ops.htm#ADLOB1004"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for additional details on usage of this procedure</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66627" class="refsect2"><a id="BGBCJJDF"></a>
<h3 class="refsect2"><a id="sthref5042"></a>COPY_DBFS_LINK Procedures</h3>
<p>This procedure copies the DBFS Link in the source LOB to the destination LOB.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5043"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.COPY_DBFS_LINK (
  lob_loc_dst    IN OUT BLOB,
  lob_loc_src    IN     BLOB,
  flags          IN     PLS_INTEGER DEFAULT DBFS_LINK_NOCACHE);

DBMS_LOB.COPY_DBFS_LINK (
  lob_loc_dst    IN OUT CLOB CHARACTER SET ANY_CS,
  lob_loc_src    IN     CLOB CHARACTER SET ANY_CS,
  flags          IN     PLS_INTEGER DEFAULT DBFS_LINK_NOCACHE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5044"></a>Parameters</p>
<div id="ARPLS66628" class="tblformal">
<p class="titleintable"><a id="sthref5045"></a><a id="sthref5046"></a>Table 88-23 COPY_DBFS_LINK Procedure Parameters</p>
<table class="cellalignment4330" title="COPY_DBFS_LINK Procedure Parameters " summary="This table describes the parameters of DBMS_LOB.ARCHIVE_COPY_REFERENCE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t33">Parameter</th>
<th class="cellalignment4328" id="r1c2-t33">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t33" headers="r1c1-t33">
<p><code dir="ltr">lob_loc_dst</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t33 r1c2-t33">
<p>LOB to be made to reference the same storage data as <code dir="ltr">lob_loc_src</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t33" headers="r1c1-t33">
<p><code dir="ltr">lob_loc_src</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t33 r1c2-t33">
<p>LOB from which to copy the reference</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t33" headers="r1c1-t33">
<p><code dir="ltr">flags</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t33 r1c2-t33">
<p>Options to <code dir="ltr">COPY_DBFS_LINK</code>:</p>
<ul>
<li>
<p><code dir="ltr">DBFS_LINK_NOCACHE</code> specifies to only copy the DBFS Link</p>
</li>
<li>
<p><code dir="ltr">DBFS_LINK_CACHE</code> specifies to copy the DBFS Link and read the data into the database LOB specified by <code dir="ltr">lob_loc_dst</code> so that the data is cached</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5047"></a>Exceptions</p>
<div id="ARPLS66629" class="tblformal">
<p class="titleintable"><a id="sthref5048"></a><a id="sthref5049"></a>Table 88-24 COPY_DBFS_LINK Procedure Exceptions</p>
<table class="cellalignment4330" title="COPY_DBFS_LINK Procedure Exceptions " summary="This table describes the Exceptions raised by COPY_DBFS_LINK" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t34">Exception</th>
<th class="cellalignment4328" id="r1c2-t34">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t34" headers="r1c1-t34">
<p><code dir="ltr">SECUREFILE_BADLOB</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t34 r1c2-t34">
<p>Either <code dir="ltr">lob_loc_src</code> or <code dir="ltr">lob_loc_dst</code> is not a <code dir="ltr">SECUREFILE</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t34" headers="r1c1-t34">
<p><code dir="ltr">INVALID_ARGVAL</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t34 r1c2-t34">
<p><code dir="ltr">lob_loc_src</code> LOB has not been archived</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t34" headers="r1c1-t34">
<p><code dir="ltr">ORA-01555</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t34 r1c2-t34">
<p>If the source LOB has been retrieved, never archived, or if the LOB has been migrated in and out (modified or not) since the locator was gotten.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66630" class="refsect2"><a id="BGBDAAIF"></a>
<h3 class="refsect2"><a id="sthref5050"></a>COPY_FROM_DBFS_LINK</h3>
<p>This procedure retrieves the archived SecureFiles LOB data from the DBFS HSM store and to the database.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5051"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.COPY_FROM_DBFS_LINK (
  lob_loc       IN OUT BLOB);

DBMS_LOB.COPY_FROM_DBFS_LINK (
  lob_loc       IN OUT CLOB CHARACTER SET ANY_CS);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5052"></a>Parameters</p>
<div id="ARPLS66631" class="tblformal">
<p class="titleintable"><a id="sthref5053"></a><a id="sthref5054"></a>Table 88-25 COPY_FROM_DBFS_LINK Procedure Parameters</p>
<table class="cellalignment4330" title="COPY_FROM_DBFS_LINK Procedure Parameters " summary="This table describes the parameters of DBMS_LOB.COPY_FROM_DBFS_LINK." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t35">Parameter</th>
<th class="cellalignment4328" id="r1c2-t35">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t35" headers="r1c1-t35">
<p><code dir="ltr">lob_loc</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t35 r1c2-t35">
<p>LOB to be retrieved from the archive</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5055"></a>Usage Note</p>
<p><code dir="ltr">COPY_FROM_DBFS_LINK</code> does not remove the underlying DBFS file.</p>
<p>If the LOB is successfully retrieved, <code dir="ltr">COPY_FROM_DBFS_LINK</code> silently returns success.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5056"></a>Exceptions</p>
<div id="ARPLS66632" class="tblformal">
<p class="titleintable"><a id="sthref5057"></a><a id="sthref5058"></a>Table 88-26 COPY_FROM_DBFS_LINK Procedure Exceptions</p>
<table class="cellalignment4330" title="COPY_FROM_DBFS_LINK Procedure Exceptions " summary="This table describes the Exceptions raised by COPY_FROM_DBFS_LINK." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t36">Exception</th>
<th class="cellalignment4328" id="r1c2-t36">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t36" headers="r1c1-t36">
<p><code dir="ltr">SECUREFILE_BADLOB</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t36 r1c2-t36">
<p><code dir="ltr">lob_loc</code> is not a <code dir="ltr">SECUREFILE</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t36" headers="r1c1-t36">
<p><code dir="ltr">ORA-01555</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t36 r1c2-t36">
<p>If the LOB has already been retrieved and has been modified since retrieval, if the LOB has been migrated in and out (modified or not) since the locator was retrieved</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66665" class="refsect2"><a id="i997788"></a>
<h3 class="refsect2"><a id="sthref5059"></a>CREATETEMPORARY Procedures</h3>
<p>This procedure creates a temporary <code dir="ltr">BLOB</code> or <code dir="ltr">CLOB</code> and its corresponding index in your default temporary tablespace.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5060"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.CREATETEMPORARY (
   lob_loc IN OUT NOCOPY BLOB,
   cache   IN            BOOLEAN,
   dur     IN            PLS_INTEGER := DBMS_LOB.SESSION);
  
DBMS_LOB.CREATETEMPORARY (
   lob_loc IN OUT NOCOPY CLOB CHARACTER SET ANY_CS,
   cache   IN            BOOLEAN,
   dur     IN            PLS_INTEGER := 10);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5061"></a>Parameters</p>
<div id="ARPLS66666" class="tblformal">
<p class="titleintable"><a id="sthref5062"></a><a id="sthref5063"></a>Table 88-27 CREATETEMPORARY Procedure Parameters</p>
<table class="cellalignment4330" title="CREATETEMPORARY Procedure Parameters " summary="This table describes the parameters of DBMS_LOB.CREATETEMPORARY." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t37">Parameter</th>
<th class="cellalignment4328" id="r1c2-t37">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t37" headers="r1c1-t37">
<p><code dir="ltr">lob_loc</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t37 r1c2-t37">
<p>LOB locator. For more information, see <a href="#i1015792">Operational Notes</a>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t37" headers="r1c1-t37">
<p><code dir="ltr">cache</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t37 r1c2-t37">
<p>Specifies if LOB should be read into buffer cache or not.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t37" headers="r1c1-t37">
<p><code dir="ltr">dur</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t37 r1c2-t37">
<p>1 of 2 predefined duration values (<code dir="ltr">SESSION</code> or <code dir="ltr">CALL</code>) which specifies a hint as to whether the temporary LOB is cleaned up at the end of the session or call.</p>
<p>If <code dir="ltr">dur</code> is omitted, then the session duration is used.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADLOB1005" href="../ADLOB/adlob_creating.htm#ADLOB1005"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for additional details on usage of this procedure</p>
</li>
<li>
<p><a class="olink LNPLS" href="../LNPLS/toc.htm"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information about NOCOPY and passing temporary lobs as parameters</p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS73450" class="refsect2"><a id="BGBIHAJI"></a>
<h3 class="refsect2"><a id="sthref5064"></a>DBFS_LINK_GENERATE_PATH Functions</h3>
<p>This subprogram returns a unique file path name for use in creating a DBFS Link.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5065"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.DBFS_LINK_GENERATE_PATH (
  lob_loc       IN BLOB,
  storage_dir   IN VARCHAR2) 
 RETURN VARCHAR2;
 
DBMS_LOB.DBFS_LINK_GENERATE_PATH (
  lob_loc       IN CLOB CHARACTER SET ANY_CS,
  storage_dir   IN VARCHAR2) 
 RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5066"></a>Pragmas</p>
<pre dir="ltr">PRAGMA RESTRICT_REFERENCES(dbfs_link_generate_path,
       WNDS, RNDS, WNPS, RNPS);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5067"></a>Parameters</p>
<div id="ARPLS73451" class="tblformal">
<p class="titleintable"><a id="sthref5068"></a><a id="sthref5069"></a>Table 88-28 DBFS_LINK_GENERATE_PATH Function Parameters</p>
<table class="cellalignment4330" title="DBFS_LINK_GENERATE_PATH Function Parameters " summary="This table describes the parameters of DBMS_LOB.DBFS_LINK_GENERATE_PATH" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t39">Parameter</th>
<th class="cellalignment4328" id="r1c2-t39">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t39" headers="r1c1-t39">
<p><code dir="ltr">lob_loc</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t39 r1c2-t39">
<p>LOB to be retrieved from DBFS</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t39" headers="r1c1-t39">
<p><code dir="ltr">storage_dir</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t39 r1c2-t39">
<p>DBFS directory that will be the parent directory of the file</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5070"></a>Exceptions</p>
<div id="ARPLS73452" class="tblformal">
<p class="titleintable"><a id="sthref5071"></a><a id="sthref5072"></a>Table 88-29 DBFS_LINK_GENERATE_PATH Function Exceptions</p>
<table class="cellalignment4330" title="DBFS_LINK_GENERATE_PATH Function Exceptions " summary="This table describes the Exceptions raised by DBFS_LINK_GENERATE_PATH" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t40">Exception</th>
<th class="cellalignment4328" id="r1c2-t40">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t40" headers="r1c1-t40">
<p><code dir="ltr">SECUREFILE_WRONGTYPE</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t40 r1c2-t40">
<p><code dir="ltr">lob_loc</code> is not a <code dir="ltr">SECUREFILE</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5073"></a>Usage Notes</p>
<p>Returns a globally unique file pathname that can be used for archiving. This is guaranteed to be globally unique across all calls to this function for different LOBs and versions of that LOB. It is always the same for the same LOB and version.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66667" class="refsect2"><a id="i997838"></a>
<h3 class="refsect2"><a id="sthref5074"></a>ERASE Procedures</h3>
<p>This procedure erases an entire internal LOB or part of an internal LOB.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5075"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.ERASE (
   lob_loc           IN OUT   NOCOPY   BLOB,
   amount            IN OUT   NOCOPY   INTEGER,
   offset            IN                INTEGER := 1);

DBMS_LOB.ERASE (
   lob_loc           IN OUT   NOCOPY   CLOB CHARACTER SET ANY_CS,
   amount            IN OUT   NOCOPY   INTEGER,
   offset            IN                INTEGER := 1);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5076"></a>Parameters</p>
<div id="ARPLS66668" class="tblformal">
<p class="titleintable"><a id="sthref5077"></a><a id="sthref5078"></a>Table 88-30 ERASE Procedure Parameters</p>
<table class="cellalignment4330" title="ERASE Procedure Parameters" summary="This table describes the parameters of DBMS_LOB.ERASE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t41">Parameter</th>
<th class="cellalignment4328" id="r1c2-t41">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t41" headers="r1c1-t41">
<p><code dir="ltr">lob_loc</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t41 r1c2-t41">
<p>Locator for the LOB to be erased.For more information, see <a href="#i1015792">Operational Notes</a>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t41" headers="r1c1-t41">
<p><code dir="ltr">amount</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t41 r1c2-t41">
<p>Number of bytes (for <code dir="ltr">BLOBs</code> or <code dir="ltr">BFILES</code>) or characters (for <code dir="ltr">CLOBs</code> or <code dir="ltr">NCLOBs</code>) to be erased.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t41" headers="r1c1-t41">
<p><code dir="ltr">offset</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t41 r1c2-t41">
<p>Absolute offset (origin: 1) from the beginning of the LOB in bytes (for <code dir="ltr">BLOBs</code>) or characters (<code dir="ltr">CLOBs</code>).</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5079"></a>Usage Notes</p>
<ul>
<li>
<p>When data is erased from the middle of a LOB, zero-byte fillers or spaces are written for <code dir="ltr">BLOBs</code> or <code dir="ltr">CLOBs</code> respectively.</p>
</li>
<li>
<p>The actual number of bytes or characters erased can differ from the number you specified in the <code dir="ltr">amount</code> parameter if the end of the LOB value is reached before erasing the specified number. The actual number of characters or bytes erased is returned in the <code dir="ltr">amount</code> parameter.</p>
</li>
<li>
<p><code dir="ltr">ERASE</code> gets the LOB if it is archived, unless the erase covers the entire LOB.</p>
</li>
<li>
<p>If the LOB to be erased is a DBFS Link, an exception is thrown.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
The length of the LOB is not decreased when a section of the LOB is erased. To decrease the length of the LOB value, see the <a href="#i999503">&#34;TRIM Procedures&#34;</a>.</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5080"></a>Exceptions</p>
<div id="ARPLS66669" class="tblformal">
<p class="titleintable"><a id="sthref5081"></a><a id="sthref5082"></a>Table 88-31 ERASE Procedure Exceptions</p>
<table class="cellalignment4330" title="ERASE Procedure Exceptions " summary="This table describes the Exceptions raised by ERASE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t43">Exception</th>
<th class="cellalignment4328" id="r1c2-t43">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t43" headers="r1c1-t43">
<p><code dir="ltr">VALUE_ERROR</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t43 r1c2-t43">
<p>Any input parameter is <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t43" headers="r1c1-t43">
<p><code dir="ltr">INVALID_ARGVAL</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t43 r1c2-t43">
<p>Either:</p>
<p>- <code dir="ltr">amount</code> &lt; 1 or <code dir="ltr">amount</code> &gt; <code dir="ltr">LOBMAXSIZE</code></p>
<p>- <code dir="ltr">offset</code> &lt; 1 or <code dir="ltr">offset</code> &gt; <code dir="ltr">LOBMAXSIZE</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t43" headers="r1c1-t43">
<p><code dir="ltr">QUERY_WRITE</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t43 r1c2-t43">
<p>Cannot perform a LOB write inside a query or PDML parallel execution server</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t43" headers="r1c1-t43">
<p><code dir="ltr">BUFFERING_ENABLED</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t43 r1c2-t43">
<p>Cannot perform operation with LOB buffering enabled if buffering is enabled on the LOB</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5083"></a>Usage Notes</p>
<p>It is not mandatory that you wrap the LOB operation inside the Open/Close interfaces. If you did not open the LOB before performing the operation, the functional and domain indexes on the LOB column are updated during the call. However, if you opened the LOB before performing the operation, you must close it before you commit the transaction. When an internal LOB is closed, it updates the functional and domain indexes on the LOB column.</p>
<p>If you do not wrap the LOB operation inside the Open/Close API, the functional and domain indexes are updated each time you write to the LOB. This can adversely affect performance. Therefore, it is recommended that you enclose write operations to the LOB within the <code dir="ltr">OPEN</code> or <code dir="ltr">CLOSE</code> statement.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i999503">&#34;TRIM Procedures&#34;</a></p>
</li>
<li>
<p><a class="olink ADLOB1006" href="../ADLOB/adlob_lob_ops.htm#ADLOB1006"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for additional details on usage of this procedure</p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66670" class="refsect2"><a id="i997934"></a>
<h3 class="refsect2"><a id="sthref5084"></a>FILECLOSE Procedure</h3>
<p>This procedure closes a <code dir="ltr">BFILE</code> that has already been opened through the input locator.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The database has only read-only access to <code dir="ltr">BFILEs</code>. This means that <code dir="ltr">BFILEs</code> cannot be written through the database.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5085"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.FILECLOSE (
    file_loc IN OUT NOCOPY BFILE); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5086"></a>Parameters</p>
<div id="ARPLS66671" class="tblformal">
<p class="titleintable"><a id="sthref5087"></a><a id="sthref5088"></a>Table 88-32 FILECLOSE Procedure Parameters</p>
<table class="cellalignment4330" title="FILECLOSE Procedure Parameters" summary="This table describes the parameters of DBMS_LOB.FILECLOSE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t46">Parameter</th>
<th class="cellalignment4328" id="r1c2-t46">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t46" headers="r1c1-t46">
<p><code dir="ltr">file_loc</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t46 r1c2-t46">
<p>Locator for the <code dir="ltr">BFILE</code> to be closed.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5089"></a>Exceptions</p>
<div id="ARPLS66672" class="tblformal">
<p class="titleintable"><a id="sthref5090"></a><a id="sthref5091"></a>Table 88-33 FILECLOSE Procedure Exceptions</p>
<table class="cellalignment4330" title="FILECLOSE Procedure Exceptions " summary="This table describes the Exceptions raised by FILECLOSE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t47">Exception</th>
<th class="cellalignment4328" id="r1c2-t47">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t47" headers="r1c1-t47">
<p><code dir="ltr">VALUE_ERROR</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t47 r1c2-t47">
<p><code dir="ltr">NULL</code> input value for <code dir="ltr">file_loc</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t47" headers="r1c1-t47">
<p><code dir="ltr">UNOPENED_FILE</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t47 r1c2-t47">
<p>File was not opened with the input locator.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t47" headers="r1c1-t47">
<p><code dir="ltr">NOEXIST_DIRECTORY</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t47 r1c2-t47">
<p>Directory does not exist.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t47" headers="r1c1-t47">
<p><code dir="ltr">NOPRIV_DIRECTORY</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t47 r1c2-t47">
<p>You do not have privileges for the directory.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t47" headers="r1c1-t47">
<p><code dir="ltr">INVALID_DIRECTORY</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t47 r1c2-t47">
<p>Directory has been invalidated after the file was opened.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t47" headers="r1c1-t47">
<p><code dir="ltr">INVALID_OPERATION</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t47 r1c2-t47">
<p>File does not exist, or you do not have access privileges on the file.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i998315">&#34;FILEOPEN Procedure&#34;</a></p>
</li>
<li>
<p><a href="#i998026">&#34;FILECLOSEALL Procedure&#34;</a></p>
</li>
<li>
<p><a class="olink ADLOB1007" href="../ADLOB/adlob_bfile_ops.htm#ADLOB1007"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for additional details on usage of this procedure</p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66673" class="refsect2"><a id="i998026"></a>
<h3 class="refsect2"><a id="sthref5092"></a>FILECLOSEALL Procedure</h3>
<p>This procedure closes all <code dir="ltr">BFILEs</code> opened in the session.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5093"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.FILECLOSEALL; 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5094"></a>Exceptions</p>
<div id="ARPLS66674" class="tblformal">
<p class="titleintable"><a id="sthref5095"></a><a id="sthref5096"></a>Table 88-34 FILECLOSEALL Procedure Exception</p>
<table class="cellalignment4330" title="FILECLOSEALL Procedure Exception " summary="This table describes the Exceptions raised by FILECLOSEALL." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t49">Exception</th>
<th class="cellalignment4328" id="r1c2-t49">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t49" headers="r1c1-t49">
<p><code dir="ltr">UNOPENED_FILE</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t49 r1c2-t49">
<p>No file has been opened in the session.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i998315">&#34;FILEOPEN Procedure&#34;</a></p>
</li>
<li>
<p><a href="#i997934">&#34;FILECLOSE Procedure&#34;</a></p>
</li>
<li>
<p><a class="olink ADLOB1008" href="../ADLOB/adlob_bfile_ops.htm#ADLOB1008"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for additional details on usage of this procedure</p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66675" class="refsect2"><a id="i998077"></a>
<h3 class="refsect2"><a id="sthref5097"></a>FILEEXISTS Function</h3>
<p>This function finds out if a specified <code dir="ltr">BFILE</code> locator points to a file that actually exists on the server&#39;s file system.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5098"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.FILEEXISTS (
   file_loc     IN    BFILE)
  RETURN INTEGER; 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5099"></a>Pragmas</p>
<pre dir="ltr">pragma restrict_references(FILEEXISTS, WNDS, RNDS, WNPS, RNPS);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5100"></a>Parameters</p>
<div id="ARPLS66676" class="tblformal">
<p class="titleintable"><a id="sthref5101"></a><a id="sthref5102"></a>Table 88-35 FILEEXISTS Function Parameter</p>
<table class="cellalignment4330" title="FILEEXISTS Function Parameter" summary="This table describes the parameters of DBMS_LOB.FILEEXISTS." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t51">Parameter</th>
<th class="cellalignment4328" id="r1c2-t51">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t51" headers="r1c1-t51">
<p><code dir="ltr">file_loc</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t51 r1c2-t51">
<p>Locator for the <code dir="ltr">BFILE</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5103"></a>Return Values</p>
<div id="ARPLS66677" class="tblformal">
<p class="titleintable"><a id="sthref5104"></a><a id="sthref5105"></a>Table 88-36 FILEEXISTS Function Return Values</p>
<table class="cellalignment4330" title="FILEEXISTS Function Return Values " summary="This table describes Return Values for use with FILEEXISTS." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t52">Return</th>
<th class="cellalignment4328" id="r1c2-t52">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t52" headers="r1c1-t52">
<p><code dir="ltr">0</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t52 r1c2-t52">
<p>Physical file does not exist.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t52" headers="r1c1-t52">
<p><code dir="ltr">1</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t52 r1c2-t52">
<p>Physical file exists.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5106"></a>Exceptions</p>
<div id="ARPLS66678" class="tblformal">
<p class="titleintable"><a id="sthref5107"></a><a id="sthref5108"></a>Table 88-37 FILEEXISTS Function Exceptions</p>
<table class="cellalignment4330" title="FILEEXISTS Function Exceptions " summary="This table describes the Exceptions raised by FILEEXISTS." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t53">Exception</th>
<th class="cellalignment4328" id="r1c2-t53">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t53" headers="r1c1-t53">
<p><code dir="ltr">NOEXIST_DIRECTORY</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t53 r1c2-t53">
<p>Directory does not exist.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t53" headers="r1c1-t53">
<p><code dir="ltr">NOPRIV_DIRECTORY</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t53 r1c2-t53">
<p>You do not have privileges for the directory.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t53" headers="r1c1-t53">
<p><code dir="ltr">INVALID_DIRECTORY</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t53 r1c2-t53">
<p>Directory has been invalidated after the file was opened.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i998235">&#34;FILEISOPEN Function&#34;</a>.</p>
</li>
<li>
<p><a class="olink ADLOB1009" href="../ADLOB/adlob_bfile_ops.htm#ADLOB1009"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for additional details on usage of this procedure</p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66679" class="refsect2"><a id="i998169"></a>
<h3 class="refsect2"><a id="sthref5109"></a>FILEGETNAME Procedure</h3>
<p>This procedure determines the directory object and filename, given a <code dir="ltr">BFILE</code> locator. This function only indicates the directory object name and filename assigned to the locator, not if the physical file or directory actually exists.</p>
<p>The maximum constraint values for the <code dir="ltr">dir_alias</code> buffer is 30, and for the entire path name, it is 2000.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5110"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.FILEGETNAME (
   file_loc   IN    BFILE, 
   dir_alias  OUT   VARCHAR2,
   filename   OUT   VARCHAR2); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5111"></a>Parameters</p>
<div id="ARPLS66680" class="tblformal">
<p class="titleintable"><a id="sthref5112"></a><a id="sthref5113"></a>Table 88-38 FILEGETNAME Procedure Parameters</p>
<table class="cellalignment4330" title="FILEGETNAME Procedure Parameters" summary="This table describes the parameters of DBMS_LOB.FILEGETNAME." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t55">Parameter</th>
<th class="cellalignment4328" id="r1c2-t55">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t55" headers="r1c1-t55">
<p><code dir="ltr">file_loc</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t55 r1c2-t55">
<p>Locator for the <code dir="ltr">BFILE</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t55" headers="r1c1-t55">
<p><code dir="ltr">dir_alias</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t55 r1c2-t55">
<p>Directory object name</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t55" headers="r1c1-t55">
<p><code dir="ltr">filename</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t55 r1c2-t55">
<p>Name of the <code dir="ltr">BFILE</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5114"></a>Exceptions</p>
<div id="ARPLS66681" class="tblformal">
<p class="titleintable"><a id="sthref5115"></a><a id="sthref5116"></a>Table 88-39 FILEGETNAME Procedure Exceptions</p>
<table class="cellalignment4330" title="FILEGETNAME Procedure Exceptions " summary="This table describes the Exceptions raised by FILEGETNAME." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t56">Exception</th>
<th class="cellalignment4328" id="r1c2-t56">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t56" headers="r1c1-t56">
<p><code dir="ltr">VALUE_ERROR</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t56 r1c2-t56">
<p>Any of the input parameters are <code dir="ltr">NULL</code> or <code dir="ltr">INVALID</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t56" headers="r1c1-t56">
<p><code dir="ltr">INVALID_ARGVAL</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t56 r1c2-t56">
<p><code dir="ltr">dir_alias</code> or filename are <code dir="ltr">NULL</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB1010" href="../ADLOB/adlob_bfile_ops.htm#ADLOB1010"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for additional details on usage of this procedure</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66682" class="refsect2"><a id="i998235"></a>
<h3 class="refsect2"><a id="sthref5117"></a>FILEISOPEN Function</h3>
<p>This function finds out whether a <code dir="ltr">BFILE</code> was opened with the specified <code dir="ltr">FILE</code> locator.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5118"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.FILEISOPEN (
   file_loc   IN    BFILE)
  RETURN INTEGER; 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5119"></a>Pragmas</p>
<pre dir="ltr">PRAGMA RESTRICT_REFERENCES(fileisopen, WNDS, RNDS, WNPS, RNPS);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5120"></a>Parameters</p>
<div id="ARPLS66683" class="tblformal">
<p class="titleintable"><a id="sthref5121"></a><a id="sthref5122"></a>Table 88-40 FILEISOPEN Function Parameter</p>
<table class="cellalignment4330" title="FILEISOPEN Function Parameter " summary="This table describes the parameters of DBMS_LOB.FILEISOPEN." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t58">Parameter</th>
<th class="cellalignment4328" id="r1c2-t58">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t58" headers="r1c1-t58">
<p><code dir="ltr">file_loc</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t58 r1c2-t58">
<p>Locator for the <code dir="ltr">BFILE</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5123"></a>Return Values</p>
<p><code dir="ltr">INTEGER</code>: 0 = file is not open, 1 = file is open</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5124"></a>Usage Notes</p>
<p>If the input <code dir="ltr">FILE</code> locator was never passed to the <code dir="ltr">FILEOPEN</code> procedure, then the file is considered not to be opened by this locator. However, a different locator may have this file open. In other words, openness is associated with a specific locator.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5125"></a>Exceptions</p>
<div id="ARPLS66684" class="tblformal">
<p class="titleintable"><a id="sthref5126"></a><a id="sthref5127"></a>Table 88-41 FILEISOPEN Function Exceptions</p>
<table class="cellalignment4330" title="FILEISOPEN Function Exceptions " summary="This table describes the Exceptions raised by FILEISOPEN." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t59">Exception</th>
<th class="cellalignment4328" id="r1c2-t59">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t59" headers="r1c1-t59">
<p><code dir="ltr">NOEXIST_DIRECTORY</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t59 r1c2-t59">
<p>Directory does not exist.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t59" headers="r1c1-t59">
<p><code dir="ltr">NOPRIV_DIRECTORY</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t59 r1c2-t59">
<p>You do not have privileges for the directory.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t59" headers="r1c1-t59">
<p><code dir="ltr">INVALID_DIRECTORY</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t59 r1c2-t59">
<p>Directory has been invalidated after the file was opened.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i998077">&#34;FILEEXISTS Function&#34;</a></p>
</li>
<li>
<p><a class="olink ADLOB1011" href="../ADLOB/adlob_bfile_ops.htm#ADLOB1011"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for additional details on usage of this procedure</p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66685" class="refsect2"><a id="i998315"></a>
<h3 class="refsect2"><a id="sthref5128"></a>FILEOPEN Procedure</h3>
<p>This procedure opens a <code dir="ltr">BFILE</code> for read-only access. <code dir="ltr">BFILE</code> data may not be written through the database.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5129"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.FILEOPEN (
   file_loc   IN OUT NOCOPY  BFILE, 
   open_mode  IN             BINARY_INTEGER := file_readonly); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5130"></a>Parameters</p>
<div id="ARPLS66686" class="tblformal">
<p class="titleintable"><a id="sthref5131"></a><a id="sthref5132"></a>Table 88-42 FILEOPEN Procedure Parameters</p>
<table class="cellalignment4330" title="FILEOPEN Procedure Parameters " summary="This table describes the parameters of DBMS_LOB.FILEOPENN." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t61">Parameter</th>
<th class="cellalignment4328" id="r1c2-t61">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t61" headers="r1c1-t61">
<p><code dir="ltr">file_loc</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t61 r1c2-t61">
<p>Locator for the <code dir="ltr">BFILE</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t61" headers="r1c1-t61">
<p><code dir="ltr">open_mode</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t61 r1c2-t61">
<p>File access is read-only.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5133"></a>Exceptions</p>
<div id="ARPLS66687" class="tblformal">
<p class="titleintable"><a id="sthref5134"></a><a id="sthref5135"></a>Table 88-43 FILEOPEN Procedure Exceptions</p>
<table class="cellalignment4330" title="FILEOPEN Procedure Exceptions " summary="This table describes the Exceptions raised by FILEOPEN." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t62">Exception</th>
<th class="cellalignment4328" id="r1c2-t62">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t62" headers="r1c1-t62">
<p><code dir="ltr">VALUE_ERROR</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t62 r1c2-t62">
<p><code dir="ltr">file_loc</code> or <code dir="ltr">open_mode</code> is <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t62" headers="r1c1-t62">
<p><code dir="ltr">INVALID_ARGVAL</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t62 r1c2-t62">
<p><code dir="ltr">open_mode</code> is not equal to <code dir="ltr">FILE_READONLY</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t62" headers="r1c1-t62">
<p><code dir="ltr">OPEN_TOOMANY</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t62 r1c2-t62">
<p>Number of open files in the session exceeds <code dir="ltr">session_max_open_files</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t62" headers="r1c1-t62">
<p><code dir="ltr">NOEXIST_DIRECTORY</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t62 r1c2-t62">
<p>Directory associated with <code dir="ltr">file_loc</code> does not exist.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t62" headers="r1c1-t62">
<p><code dir="ltr">INVALID_DIRECTORY</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t62 r1c2-t62">
<p>Directory has been invalidated after the file was opened.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t62" headers="r1c1-t62">
<p><code dir="ltr">INVALID_OPERATION</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t62 r1c2-t62">
<p>File does not exist, or you do not have access privileges on the file.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i997934">&#34;FILECLOSE Procedure&#34;</a></p>
</li>
<li>
<p><a href="#i998026">&#34;FILECLOSEALL Procedure&#34;</a></p>
</li>
<li>
<p><a class="olink ADLOB1012" href="../ADLOB/adlob_bfile_ops.htm#ADLOB1012"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for additional details on usage of this procedure</p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66688" class="refsect2"><a id="i998411"></a>
<h3 class="refsect2"><a id="sthref5136"></a>FRAGMENT_DELETE Procedure</h3>
<p>This procedure deletes the data at the specified offset for the specified length from the LOB without having to rewrite all the data in the LOB following the specified offset.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5137"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.FRAGMENT_DELETE (
   lob_loc     IN OUT NOCOPY BLOB,
   amount      IN            INTEGER,
   offset      IN            INTEGER);

DBMS_LOB.FRAGMENT_DELETE (
   lob_loc     IN OUT NOCOPY CLOB CHARACTER SET ANY_CS,
   amount      IN            INTEGER,
   offset      IN            INTEGER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5138"></a>Parameters</p>
<div id="ARPLS66689" class="tblformal">
<p class="titleintable"><a id="sthref5139"></a><a id="sthref5140"></a>Table 88-44 FRAGMENT_DELETE Procedure Parameters</p>
<table class="cellalignment4330" title="FRAGMENT_DELETE Procedure Parameters " summary="This table describes the parameters of DBMS_LOB.FRAGMENT_DELETE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t64">Parameter</th>
<th class="cellalignment4328" id="r1c2-t64">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t64" headers="r1c1-t64">
<p><code dir="ltr">lob_loc</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t64 r1c2-t64">
<p>LOB locator. For more information, see <a href="#i1015792">Operational Notes</a>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t64" headers="r1c1-t64">
<p><code dir="ltr">amount</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t64 r1c2-t64">
<p>Number of bytes (<code dir="ltr">BLOB</code>) or characters (<code dir="ltr">CLOB</code>/<code dir="ltr">NCLOB</code>) to be removed from the LOB</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t64" headers="r1c1-t64">
<p><code dir="ltr">offset</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t64 r1c2-t64">
<p>Offset into the LOB in bytes (<code dir="ltr">BLOB</code>) or characters (<code dir="ltr">CLOB</code>/<code dir="ltr">NCLOB</code>) to begin the deletion</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5141"></a>Exceptions</p>
<div id="ARPLS66690" class="tblformal">
<p class="titleintable"><a id="sthref5142"></a><a id="sthref5143"></a>Table 88-45 FRAGMENT_DELETE Procedure Exceptions</p>
<table class="cellalignment4330" title="FRAGMENT_DELETE Procedure Exceptions " summary="This table describes the Exceptions raised by FRAGMENT_DELETE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t65">Exception</th>
<th class="cellalignment4328" id="r1c2-t65">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t65" headers="r1c1-t65">
<p><code dir="ltr">INVALID_ARGVAL</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t65 r1c2-t65">
<p>A parameter value was invalid</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t65" headers="r1c1-t65">
<p><code dir="ltr">QUERY_WRITE</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t65 r1c2-t65">
<p>Cannot perform operation during a query</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t65" headers="r1c1-t65">
<p><code dir="ltr">BUFFERING_ENABLED</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t65 r1c2-t65">
<p>Cannot perform operation with LOB buffering enabled</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t65" headers="r1c1-t65">
<p><code dir="ltr">SECUREFILE_BADLOB</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t65 r1c2-t65">
<p>A non-<code dir="ltr">SECUREFILE</code> LOB was used in a <code dir="ltr">SECUREFILE</code> LOB only call</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t65" headers="r1c1-t65">
<p><code dir="ltr">SECUREFILE_OUTOFBOUNDS</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t65 r1c2-t65">
<p>Attempted to perform a <code dir="ltr">FRAGMENT_*</code> operation past LOB end</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66691" class="refsect2"><a id="CHDGBIBD"></a>
<h3 class="refsect2"><a id="sthref5144"></a>FRAGMENT_INSERT Procedures</h3>
<p>This procedure inserts the specified data (limited to 32K) into the LOB at the specified offset.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5145"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.FRAGMENT_INSERT (
   lob_loc     IN OUT NOCOPY BLOB,
   amount      IN            INTEGER,
   offset      IN            INTEGER,
   buffer      IN            RAW);

DBMS_LOB.FRAGMENT_INSERT (
   lob_loc     IN OUT NOCOPY CLOB CHARACTER SET ANY_CS,
   amount      IN            INTEGER,
   offset      IN            INTEGER,
   buffer      IN            VARCHAR2 CHARACTER SET lob_loc%CHARSET);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5146"></a>Parameters</p>
<div id="ARPLS66692" class="tblformal">
<p class="titleintable"><a id="sthref5147"></a><a id="sthref5148"></a>Table 88-46 FRAGMENT_INSERT Procedure Parameters</p>
<table class="cellalignment4330" title="FRAGMENT_INSERT Procedure Parameters " summary="This table describes the parameters of DBMS_LOB.FRAGMENT_INSERT." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t66">Parameter</th>
<th class="cellalignment4328" id="r1c2-t66">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t66" headers="r1c1-t66">
<p><code dir="ltr">lob_loc</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t66 r1c2-t66">
<p>LOB locator.For more information, see <a href="#i1015792">Operational Notes</a>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t66" headers="r1c1-t66">
<p><code dir="ltr">amount</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t66 r1c2-t66">
<p>Number of bytes (BLOB) or characters (CLOB/NCLOB) to be inserted into the LOB</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t66" headers="r1c1-t66">
<p><code dir="ltr">offset</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t66 r1c2-t66">
<p>Offset into the LOB in bytes (BLOB) or characters (CLOB/NCLOB) to begin the insertion</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t66" headers="r1c1-t66">
<p><code dir="ltr">buffer</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t66 r1c2-t66">
<p>Data to insert into the LOB</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5149"></a>Exceptions</p>
<div id="ARPLS66693" class="tblformal">
<p class="titleintable"><a id="sthref5150"></a><a id="sthref5151"></a>Table 88-47 FRAGMENT_INSERT Procedure Exceptions</p>
<table class="cellalignment4330" title="FRAGMENT_INSERT Procedure Exceptions " summary="This table describes the Exceptions raised by FRAGMENT_INSERT." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t67">Exception</th>
<th class="cellalignment4328" id="r1c2-t67">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t67" headers="r1c1-t67">
<p><code dir="ltr">INVALID_ARGVAL</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t67 r1c2-t67">
<p>A parameter value was invalid</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t67" headers="r1c1-t67">
<p><code dir="ltr">QUERY_WRITE</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t67 r1c2-t67">
<p>Cannot perform operation during a query</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t67" headers="r1c1-t67">
<p><code dir="ltr">BUFFERING_ENABLED</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t67 r1c2-t67">
<p>Cannot perform operation with LOB buffering enabled</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t67" headers="r1c1-t67">
<p><code dir="ltr">SECUREFILE_BADLOB</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t67 r1c2-t67">
<p>A non-<code dir="ltr">SECUREFILE</code> LOB was used in a <code dir="ltr">SECUREFILE</code> LOB only call</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t67" headers="r1c1-t67">
<p><code dir="ltr">SECUREFILE_OUTOFBOUNDS</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t67 r1c2-t67">
<p>Attempted to perform a <code dir="ltr">FRAGMENT_*</code> operation past LOB end</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5152"></a>Usage Notes</p>
<p><code dir="ltr">FRAGMENT_INSERT</code> gets the LOB, if necessary, before performing operations on the LOB.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66694" class="refsect2"><a id="CHDJDHHF"></a>
<h3 class="refsect2"><a id="sthref5153"></a>FRAGMENT_MOVE Procedure</h3>
<p>This procedure moves the amount of bytes (BLOB) or characters (CLOB/NCLOB) from the specified offset to the new offset specified.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5154"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.FRAGMENT_MOVE (
   lob_loc       IN OUT NOCOPY BLOB,
   amount        IN            INTEGER,
   src_offset    IN            INTEGER,
   dest_offset   IN            INTEGER);

DBMS_LOB.FRAGMENT_MOVE (
   lob_loc       IN OUT NOCOPY CLOB CHARACTER SET ANY_CS,
   amount        IN            INTEGER,
   src_offset    IN            INTEGER,
   dest_offset   IN            INTEGER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5155"></a>Parameters</p>
<div id="ARPLS66695" class="tblformal">
<p class="titleintable"><a id="sthref5156"></a><a id="sthref5157"></a>Table 88-48 FRAGMENT_MOVE Procedure Parameters</p>
<table class="cellalignment4330" title="FRAGMENT_MOVE Procedure Parameters " summary="This table describes the parameters of DBMS_LOB.FRAGMENT_INSERT." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t68">Parameter</th>
<th class="cellalignment4328" id="r1c2-t68">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t68" headers="r1c1-t68">
<p><code dir="ltr">lob_loc</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t68 r1c2-t68">
<p>LOB locator. For more information, see <a href="#i1015792">Operational Notes</a>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t68" headers="r1c1-t68">
<p><code dir="ltr">amount</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t68 r1c2-t68">
<p>Number of bytes (<code dir="ltr">BLOB</code>) or characters (<code dir="ltr">CLOB</code>/<code dir="ltr">NCLOB</code>) to be moved in the LOB</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t68" headers="r1c1-t68">
<p><code dir="ltr">src_offset</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t68 r1c2-t68">
<p>Beginning offset into the LOB in bytes (<code dir="ltr">BLOB</code>) or characters (<code dir="ltr">CLOB</code>/<code dir="ltr">NCLOB</code>) to put the data</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t68" headers="r1c1-t68">
<p><code dir="ltr">dest_offset</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t68 r1c2-t68">
<p>Beginning offset into the LOB in bytes (<code dir="ltr">BLOB</code>) or characters (<code dir="ltr">CLOB</code>/<code dir="ltr">NCLOB</code>) to remove the data</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5158"></a>Exceptions</p>
<div id="ARPLS66696" class="tblformal">
<p class="titleintable"><a id="sthref5159"></a><a id="sthref5160"></a>Table 88-49 FRAGMENT_MOVE Procedure Exceptions</p>
<table class="cellalignment4330" title="FRAGMENT_MOVE Procedure Exceptions " summary="This table describes the Exceptions raised by FRAGMENT_MOVE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t69">Exception</th>
<th class="cellalignment4328" id="r1c2-t69">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t69" headers="r1c1-t69">
<p><code dir="ltr">INVALID_ARGVAL</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t69 r1c2-t69">
<p>A parameter value was invalid</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t69" headers="r1c1-t69">
<p><code dir="ltr">QUERY_WRITE</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t69 r1c2-t69">
<p>Cannot perform operation during a query</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t69" headers="r1c1-t69">
<p><code dir="ltr">BUFFERING_ENABLED</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t69 r1c2-t69">
<p>Cannot perform operation with LOB buffering enabled</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t69" headers="r1c1-t69">
<p><code dir="ltr">SECUREFILE_BADLOB</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t69 r1c2-t69">
<p>A non-<code dir="ltr">SECUREFILE</code> LOB was used in a <code dir="ltr">SECUREFILE</code> LOB only call</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t69" headers="r1c1-t69">
<p><code dir="ltr">SECUREFILE_OUTOFBOUNDS</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t69 r1c2-t69">
<p>Attempted to perform a <code dir="ltr">FRAGMENT_*</code> operation past LOB end</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5161"></a>Usage Notes</p>
<ul>
<li>
<p>All offsets are pre-move offsets.</p>
</li>
<li>
<p>Offsets of more than 1 past the end of the LOB are not permitted.</p>
</li>
<li>
<p><code dir="ltr">FRAGMENT_MOVE</code> gets the LOB, if necessary, before performing operations on the LOB.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66697" class="refsect2"><a id="CHDGBAHJ"></a>
<h3 class="refsect2"><a id="sthref5162"></a>FRAGMENT_REPLACE Procedures</h3>
<p>This procedure replaces the data at the specified offset with the specified data (not to exceed 32k).</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5163"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.FRAGMENT_REPLACE (
   lob_loc     IN OUT NOCOPY BLOB,
   old_amount  IN            INTEGER,
   new_amount  IN            INTEGER,
   offset      IN            INTEGER,
   buffer      IN            RAW);

DBMS_LOB.FRAGMENT_REPLACE (
   lob_loc     IN OUT NOCOPY CLOB CHARACTER SET ANY_CS,   old_amount  IN           INTEGER,
   new_amount  IN           INTEGER,
   offset      IN           INTEGER,
   buffer      IN           VARCHAR2 CHARACTER SET lob_loc%CHARSET);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5164"></a>Parameters</p>
<div id="ARPLS66698" class="tblformal">
<p class="titleintable"><a id="sthref5165"></a><a id="sthref5166"></a>Table 88-50 FRAGMENT_REPLACE Function Parameters</p>
<table class="cellalignment4330" title="FRAGMENT_REPLACE Function Parameters " summary="This table describes the parameters of DBMS_LOB.FRAGMENT_INSERT." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t70">Parameter</th>
<th class="cellalignment4328" id="r1c2-t70">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t70" headers="r1c1-t70">
<p><code dir="ltr">lob_loc</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t70 r1c2-t70">
<p>LOB locator. For more information, see <a href="#i1015792">Operational Notes</a>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t70" headers="r1c1-t70">
<p><code dir="ltr">old_amount</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t70 r1c2-t70">
<p>Number of bytes (<code dir="ltr">BLOB</code>) or characters (<code dir="ltr">CLOB</code>/<code dir="ltr">NCLOB</code>) to be replaced in the LOB</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t70" headers="r1c1-t70">
<p><code dir="ltr">new_amount</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t70 r1c2-t70">
<p>Number of bytes (<code dir="ltr">BLOB</code>) or characters (<code dir="ltr">CLOB</code>/<code dir="ltr">NCLOB</code>) to written to the LOB</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t70" headers="r1c1-t70">
<p><code dir="ltr">offset</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t70 r1c2-t70">
<p>Beginning offset into the LOB in bytes (BLOB) or characters (<code dir="ltr">CLOB</code>/<code dir="ltr">NCLOB</code>) to put the data</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t70" headers="r1c1-t70">
<p><code dir="ltr">buffer</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t70 r1c2-t70">
<p>Data to insert into the LOB</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5167"></a>Exceptions</p>
<div id="ARPLS66699" class="tblformal">
<p class="titleintable"><a id="sthref5168"></a><a id="sthref5169"></a>Table 88-51 FRAGMENT_REPLACE Procedure Exceptions</p>
<table class="cellalignment4330" title="FRAGMENT_REPLACE Procedure Exceptions " summary="This table describes the Exceptions raised by FRAGMENT_REPLACE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t71">Exception</th>
<th class="cellalignment4328" id="r1c2-t71">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t71" headers="r1c1-t71">
<p><code dir="ltr">INVALID_ARGVAL</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t71 r1c2-t71">
<p>A parameter value was invalid</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t71" headers="r1c1-t71">
<p><code dir="ltr">QUERY_WRITE</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t71 r1c2-t71">
<p>Cannot perform operation during a query</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t71" headers="r1c1-t71">
<p><code dir="ltr">BUFFERING_ENABLED</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t71 r1c2-t71">
<p>Cannot perform operation with LOB buffering enabled</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t71" headers="r1c1-t71">
<p><code dir="ltr">SECUREFILE_BADLOB</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t71 r1c2-t71">
<p>A non-<code dir="ltr">SECUREFILE</code> LOB was used in a <code dir="ltr">SECUREFILE</code> LOB only call</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t71" headers="r1c1-t71">
<p><code dir="ltr">SECUREFILE_OUTOFBOUNDS</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t71 r1c2-t71">
<p>Attempted to perform a <code dir="ltr">FRAGMENT_*</code> operation past LOB end</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5170"></a>Usage Notes</p>
<ul>
<li>
<p>Invoking this procedure is equivalent to deleting the old amount of bytes/characters at offset and then inserting the new amount of bytes/characters at offset.</p>
</li>
<li>
<p><code dir="ltr">FRAGMENT_REPLACE</code> gets the LOB, if necessary, before performing operations on the LOB.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66700" class="refsect2"><a id="BGBDBFAD"></a>
<h3 class="refsect2"><a id="sthref5171"></a>FREETEMPORARY Procedures</h3>
<p>This procedure frees the temporary <code dir="ltr">BLOB</code> or <code dir="ltr">CLOB</code> in the default temporary tablespace.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5172"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.FREETEMPORARY (
   lob_loc  IN OUT  NOCOPY BLOB); 

DBMS_LOB.FREETEMPORARY (
   lob_loc  IN OUT  NOCOPY CLOB CHARACTER SET ANY_CS); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5173"></a>Parameters</p>
<div id="ARPLS66701" class="tblformal">
<p class="titleintable"><a id="sthref5174"></a><a id="sthref5175"></a>Table 88-52 FREETEMPORARY Procedure Parameters</p>
<table class="cellalignment4330" title="FREETEMPORARY Procedure Parameters " summary="This table describes the parameters of DBMS_LOB.FREETEMPORARY." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t72">Parameter</th>
<th class="cellalignment4328" id="r1c2-t72">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t72" headers="r1c1-t72">
<p><code dir="ltr">lob_loc</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t72 r1c2-t72">
<p>LOB locator.For more information, see <a href="#i1015792">Operational Notes</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5176"></a>Usage Notes</p>
<ul>
<li>
<p>When a new temporary LOB is created, and there is currently no temporary LOB in use with the same duration (session, call), a new temporary LOB segment is created. When the temporary LOB is freed, the space it consumed is released to the temporary segment. If there are no other temporary LOBs for the same duration, the temporary segment is also freed.</p>
</li>
<li>
<p>After the call to <code dir="ltr">FREETEMPORARY</code>, the LOB locator that was freed is marked as invalid.</p>
</li>
<li>
<p>If an invalid LOB locator is assigned to another LOB locator using <code dir="ltr">OCILobLocatorAssign</code> in OCI or through an assignment operation in PL/SQL, then the target of the assignment is also freed and marked as invalid.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB1005" href="../ADLOB/adlob_creating.htm#ADLOB1005"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for additional details on usage of this procedure</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66633" class="refsect2"><a id="BGBIEEBG"></a>
<h3 class="refsect2"><a id="sthref5177"></a>GET_DBFS_LINK Functions</h3>
<p>This function returns the DBFS path name for the specified SecureFile LOB.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5178"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.GET_DBFS_LINK (
  lob_loc             IN     BLOB,
  storage_path        OUT VARCHAR2(DBFS_LINK_PATH_MAX_SIZE),
  lob_length          OUT NUMBER);

DBMS_LOB.GET_DBFS_LINK (
  lob_loc             IN     CLOB CHARACTER SET ANY_CS,
  storage_path        OUT VARCHAR2(DBFS_LINK_PATH_MAX_SIZE),
  lob_length          OUT NUMBER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5179"></a>Parameters</p>
<div id="ARPLS66634" class="tblformal">
<p class="titleintable"><a id="sthref5180"></a><a id="sthref5181"></a>Table 88-53 GET_DBFS_LINK Function Parameters</p>
<table class="cellalignment4330" title="GET_DBFS_LINK Function Parameters " summary="This table describes the parameters of DBMS_LOB.GET_DBFS_LINK." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t74">Parameter</th>
<th class="cellalignment4328" id="r1c2-t74">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t74" headers="r1c1-t74">
<p><code dir="ltr">lob_loc</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t74 r1c2-t74">
<p>LOB to be retrieved from DBFS</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t74" headers="r1c1-t74">
<p><code dir="ltr">storage_path</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t74 r1c2-t74">
<p>Path where the LOB is stored in DBFS</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t74" headers="r1c1-t74">
<p><code dir="ltr">lob_length</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t74 r1c2-t74">
<p>LOB length at the time of write to DBFS</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5182"></a>Return Values</p>
<p>The Archive ID</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5183"></a>Exceptions</p>
<div id="ARPLS66635" class="tblformal">
<p class="titleintable"><a id="sthref5184"></a><a id="sthref5185"></a>Table 88-54 GET_DBFS_LINK Function Exceptions</p>
<table class="cellalignment4330" title="GET_DBFS_LINK Function Exceptions " summary="This table describes the Exceptions raised by GET_DBFS_LINK" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t75">Exception</th>
<th class="cellalignment4328" id="r1c2-t75">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t75" headers="r1c1-t75">
<p><code dir="ltr">SECUREFILE_BADLOB</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t75 r1c2-t75">
<p><code dir="ltr">lob_loc</code> is not a <code dir="ltr">SECUREFILE</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t75" headers="r1c1-t75">
<p><code dir="ltr">ORA-01555</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t75 r1c2-t75">
<p>The LOB has already been retrieved and has been modified since retrieval or the LOB has been migrated in and out (modified or not) since the locator was retrieved</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66636" class="refsect2"><a id="BGBCBHGD"></a>
<h3 class="refsect2"><a id="sthref5186"></a>GET_DBFS_LINK_STATE Procedures</h3>
<p>This procedure retrieves the current link state of the specified SecureFile.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5187"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.GET_DBFS_LINK_STATE (
  lob_loc       IN BLOB,
  storage_path  OUT VARCHAR2(DBFS_LINK_PATH_MAX_SIZE),
  state         OUT NUMBER,
  cached        OUT BOOLEAN);

DBMS_LOB.GET_DBFS_LINK_STATE (
  lob_loc       IN CLOB CHARACTER SET ANY_CS,
  storage_path  OUT VARCHAR2(DBFS_LINK_PATH_MAX_SIZE),
  state         OUT NUMBER,
  cached        OUT BOOLEAN);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5188"></a>Parameters</p>
<div id="ARPLS66637" class="tblformal">
<p class="titleintable"><a id="sthref5189"></a><a id="sthref5190"></a>Table 88-55 GET_DBFS_LINK_STATE Procedure Parameters</p>
<table class="cellalignment4330" title="GET_DBFS_LINK_STATE Procedure Parameters " summary="This table describes the parameters of DBMS_LOB.ARCHIVE_GET_STATE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t76">Parameter</th>
<th class="cellalignment4328" id="r1c2-t76">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t76" headers="r1c1-t76">
<p><code dir="ltr">lob_loc</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t76 r1c2-t76">
<p>LOB to be retrieved from the archive</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t76" headers="r1c1-t76">
<p><code dir="ltr">storage_path</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t76 r1c2-t76">
<p>Path where the LOB is stored in the DBFS HSM store</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t76" headers="r1c1-t76">
<p><code dir="ltr">state</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t76 r1c2-t76">
<p>One of <code dir="ltr">DBFS_LINK_NEVER</code>, <code dir="ltr">DBFS_LINK_NO</code> or <code dir="ltr">DBFS_LINK_YES</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t76" headers="r1c1-t76">
<p><code dir="ltr">cached</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t76 r1c2-t76">
<p>If the LOB is archived and the data was specified to be cashed on put</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5191"></a>Exceptions</p>
<div id="ARPLS66638" class="tblformal">
<p class="titleintable"><a id="sthref5192"></a><a id="sthref5193"></a>Table 88-56 GET_DBFS_LINK_STATE Procedure Exceptions</p>
<table class="cellalignment4330" title="GET_DBFS_LINK_STATE Procedure Exceptions " summary="This table describes the Exceptions raised by ARCHIVE_GET_STATE" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t77">Exception</th>
<th class="cellalignment4328" id="r1c2-t77">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t77" headers="r1c1-t77">
<p><code dir="ltr">SECUREFILE_BADLOB</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t77 r1c2-t77">
<p><code dir="ltr">lob_loc</code> is not a <code dir="ltr">SECUREFILE</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5194"></a>Usage Notes</p>
<ul>
<li>
<p>If the LOB has never been archived, state is set to <code dir="ltr">DBMS_LOB</code>.<code dir="ltr">DBFS_LINK_NEVER</code>. If the LOB has been archived, state is set to <code dir="ltr">DBMS_LOB</code>.<code dir="ltr">DBFS_LINK_YES</code>. If the LOB has been previously retrieved from the archive, state is set to <code dir="ltr">DBFS_LINK_NO</code>.</p>
</li>
<li>
<p>If the LOB was archived, but the data was left in the RDBMS, <code dir="ltr">cached</code> is set to <code dir="ltr">TRUE</code>. If the data was removed after the link was created, <code dir="ltr">cached</code> is set to <code dir="ltr">FALSE</code>, and <code dir="ltr">NULL</code> if state is <code dir="ltr">DBMS_LOB</code>.<code dir="ltr">DBFS_LINK_NEVER</code>.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66702" class="refsect2"><a id="BGBFJFCC"></a>
<h3 class="refsect2"><a id="sthref5195"></a>GETCONTENTTYPE Functions</h3>
<p>This procedure returns the content type string previously set by means of the <a href="#BGBBGICA">SETCONTENTTYPE Procedure</a>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5196"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.GETCONTENTTYPE (
   lob_loc  IN BLOB)
 RETURN VARCHAR2;

DBMS_LOB.GETCONTENTTYPE (
   lob_loc  IN CLOB CHARACTER SET ANY_CS)
 RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5197"></a>Pragmas</p>
<pre dir="ltr">PRAGMA RESTRICT_REFERENCES(getcontenttype, WNDS, RNDS, WNPS, RNPS);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5198"></a>Parameters</p>
<div id="ARPLS66703" class="tblformal">
<p class="titleintable"><a id="sthref5199"></a><a id="sthref5200"></a>Table 88-57 GETCONTENTTYPE Function Parameters</p>
<table class="cellalignment4330" title="GETCONTENTTYPE Function Parameters " summary="This table describes the parameters of DBMS_LOB.SETCONTENTTYPE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t78">Parameter</th>
<th class="cellalignment4328" id="r1c2-t78">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t78" headers="r1c1-t78">
<p><code dir="ltr">lob_loc</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t78 r1c2-t78">
<p>LOB whose content type is to be retrieved</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5201"></a>Return Values</p>
<p>The returned content type.</p>
<p>If the SecureFiles LOB does not have a <code dir="ltr">contenttype</code> associated with it, <code dir="ltr">GETCONTENTTYPE()</code> returns <code dir="ltr">NULL</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5202"></a>Exceptions</p>
<div id="ARPLS66704" class="tblformal">
<p class="titleintable"><a id="sthref5203"></a><a id="sthref5204"></a>Table 88-58 GETCONTENTTYPE Function Exceptions</p>
<table class="cellalignment4330" title="GETCONTENTTYPE Function Exceptions " summary="This table describes the Exceptions raised by ARCHIVE_GET_STATE" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t79">Exception</th>
<th class="cellalignment4328" id="r1c2-t79">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t79" headers="r1c1-t79">
<p><code dir="ltr">SECUREFILE_BADLOB</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t79 r1c2-t79">
<p><code dir="ltr">lob_loc</code> is not a <code dir="ltr">SECUREFILE</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS601" class="refsect2"><a id="i1012980"></a>
<h3 class="refsect2">GET_STORAGE_LIMIT Function</h3>
<p>This function returns the LOB storage limit for the specified LOB.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5205"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.GET_STORAGE_LIMIT (
   lob_loc  IN CLOB CHARACTER SET ANY_CS)
 RETURN INTEGER; 

DBMS_LOB.GET_STORAGE_LIMIT (
   lob_loc  IN BLOB)
 RETURN INTEGER; 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5206"></a>Pragmas</p>
<pre dir="ltr">PRAGMA RESTRICT_REFERENCES(get_storage_limit, WNDS, RNDS, WNPS, RNPS); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5207"></a>Parameters</p>
<div id="ARPLS66705" class="tblformal">
<p class="titleintable"><a id="sthref5208"></a><a id="sthref5209"></a>Table 88-59 GET_STORAGE_LIMIT Function Parameters</p>
<table class="cellalignment4330" title="GET_STORAGE_LIMIT Function Parameters" summary="This table describes the parameters of DBMS_LOB.GET_STORAGE_LIMIT." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t80">Parameter</th>
<th class="cellalignment4328" id="r1c2-t80">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t80" headers="r1c1-t80">
<p><code dir="ltr">lob_loc</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t80 r1c2-t80">
<p>LOB locator. For more information, see <a href="#i1015792">Operational Notes</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5210"></a>Return Value</p>
<p>The value returned from this function is the maximum allowable size for specified LOB locator. For <code dir="ltr">BLOB</code>s, the return value depends on the block size of the tablespace the LOB resides in and is calculated as (2<sup>32</sup>)-1 (4294967295) times the block size of the tablespace. For <code dir="ltr">CLOB</code>s/<code dir="ltr">NCLOB</code>s, the value returned is the(2<sup>32</sup>)-1 (4294967295) times the block size of the tablespace divided by the character width of the <code dir="ltr">CLOB</code>/<code dir="ltr">NCLOB</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5211"></a>Usage</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB102" href="../ADLOB/adlob_design.htm#ADLOB102"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for details on LOB storage limits</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66706" class="refsect2"><a id="BGBCDIHI"></a>
<h3 class="refsect2"><a id="sthref5212"></a>GETCHUNKSIZE Functions</h3>
<p>When creating the table, you can specify the chunking factor, a multiple of tablespace blocks in bytes. This corresponds to the chunk size used by the LOB data layer when accessing or modifying the LOB value. Part of the chunk is used to store system-related information, and the rest stores the LOB value.</p>
<p>This function returns the amount of space used in the LOB chunk to store the LOB value.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5213"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.GETCHUNKSIZE (
   lob_loc IN BLOB) 
  RETURN INTEGER; 

DBMS_LOB.GETCHUNKSIZE (
   lob_loc IN CLOB CHARACTER SET ANY_CS) 
  RETURN INTEGER; 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5214"></a>Pragmas</p>
<pre dir="ltr">PRAGMA RESTRICT_REFERENCES(getchunksize, WNDS, RNDS, WNPS, RNPS); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5215"></a>Parameters</p>
<div id="ARPLS66707" class="tblformal">
<p class="titleintable"><a id="sthref5216"></a><a id="sthref5217"></a>Table 88-60 GETCHUNKSIZE Function Parameters</p>
<table class="cellalignment4330" title="GETCHUNKSIZE Function Parameters" summary="This table describes the parameters of DBMS_LOB.GETCHUNKSIZE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t82">Parameter</th>
<th class="cellalignment4328" id="r1c2-t82">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t82" headers="r1c1-t82">
<p><code dir="ltr">lob_loc</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t82 r1c2-t82">
<p>LOB locator. For more information, see <a href="#i1015792">Operational Notes</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5218"></a>Return Values</p>
<p>The return value is a usable chunk size in bytes.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5219"></a>Usage Notes</p>
<ul>
<li>
<p>With regard to basic LOB files, performance is improved if you enter read/write requests using a multiple of this chunk size. For writes, there is an added benefit, because LOB chunks are versioned, and if all writes are done on a chunk basis, then no extra or excess versioning is done or duplicated. You could batch up the <code dir="ltr">WRITE</code> until you have enough for a chunk, instead of issuing several <code dir="ltr">WRITE</code> calls for the same chunk.</p>
<p>These tactics of performance improvement do not apply to SecureFiles.</p>
</li>
<li>
<p>Note that chunk size is independent of LOB type (<code dir="ltr">BLOB</code>, <code dir="ltr">CLOB</code>, <code dir="ltr">NCLOB</code>, Unicode or other character set).</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB1013" href="../ADLOB/adlob_lob_ops.htm#ADLOB1013"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for additional details on usage of this procedure</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5220"></a>Exceptions</p>
<div id="ARPLS66708" class="tblformal">
<p class="titleintable"><a id="sthref5221"></a><a id="sthref5222"></a>Table 88-61 GETCHUNKSIZE Procedure Exceptions</p>
<table class="cellalignment4330" title="GETCHUNKSIZE Procedure Exceptions " summary="This table describes the Exceptions raised by GETCHUNKSIZE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t84">Exception</th>
<th class="cellalignment4328" id="r1c2-t84">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t84" headers="r1c1-t84">
<p><code dir="ltr">BUFFERING_ENABLED</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t84 r1c2-t84">
<p>Cannot perform operation with LOB buffering enabled if buffering is enabled on the LOB</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66709" class="refsect2"><a id="i998484"></a>
<h3 class="refsect2"><a id="sthref5223"></a>GETLENGTH Functions</h3>
<p>This function gets the length of the specified LOB. The length in bytes or characters is returned.</p>
<p>The length returned for a <code dir="ltr">BFILE</code> includes the <code dir="ltr">EOF</code>, if it exists. Any 0-byte or space filler in the LOB caused by previous <code dir="ltr">ERASE</code> or <code dir="ltr">WRITE</code> operations is also included in the length count. The length of an empty internal LOB is 0.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5224"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.GETLENGTH (
   lob_loc    IN  BLOB) 
  RETURN INTEGER;
 
DBMS_LOB.GETLENGTH (
   lob_loc    IN  CLOB   CHARACTER SET ANY_CS) 
  RETURN INTEGER; 

DBMS_LOB.GETLENGTH (
   file_loc    IN  BFILE) 
  RETURN INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5225"></a>Pragmas</p>
<pre dir="ltr">pragma restrict_references(GETLENGTH, WNDS, WNPS, RNDS, RNPS);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5226"></a>Parameters</p>
<div id="ARPLS66710" class="tblformal">
<p class="titleintable"><a id="sthref5227"></a><a id="sthref5228"></a>Table 88-62 GETLENGTH Function Parameter</p>
<table class="cellalignment4330" title="GETLENGTH Function Parameter" summary="This table describes the parameters of DBMS_LOB.GETLENGTH." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t85"><span class="bold">Parameter</span></th>
<th class="cellalignment4328" id="r1c2-t85"><span class="bold">Description</span></th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t85" headers="r1c1-t85">
<p><code dir="ltr">file_loc</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t85 r1c2-t85">
<p>The file locator for the LOB whose length is to be returned.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5229"></a>Return Values</p>
<p>The length of the LOB in bytes or characters as an <code dir="ltr">INTEGER</code>. <code dir="ltr">NULL</code> is returned if the input LOB is <code dir="ltr">NULL</code> or if the input <code dir="ltr">lob_loc</code> is <code dir="ltr">NULL</code>. An error is returned in the following cases for <code dir="ltr">BFILEs</code>:</p>
<ul>
<li>
<p><code dir="ltr">lob_loc</code> does not have the necessary directory and operating system privileges</p>
</li>
<li>
<p><code dir="ltr">lob_loc</code> cannot be read because of an operating system read error</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB1014" href="../ADLOB/adlob_lob_ops.htm#ADLOB1014"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for additional details on usage of this procedure</div>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5230"></a>Exceptions</p>
<div id="ARPLS66711" class="tblformal">
<p class="titleintable"><a id="sthref5231"></a><a id="sthref5232"></a>Table 88-63 GETLENGHTH Procedure Exceptions</p>
<table class="cellalignment4330" title="GETLENGHTH Procedure Exceptions " summary="This table describes the Exceptions raised by GETLENGTH." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t87">Exception</th>
<th class="cellalignment4328" id="r1c2-t87">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t87" headers="r1c1-t87">
<p><code dir="ltr">BUFFERING_ENABLED</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t87 r1c2-t87">
<p>Cannot perform operation with LOB buffering enabled if buffering is enabled on the LOB</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66712" class="refsect2"><a id="CHDIHDIC"></a>
<h3 class="refsect2"><a id="sthref5233"></a>GETOPTIONS Functions</h3>
<p>This function obtains compression, deduplication, and encryption settings corresponding to the <code dir="ltr">option_type</code> field for a particular LOB.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5234"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.GETOPTIONS (
   lob_loc             IN     BLOB,
   option_types        IN     PLS_INTEGER) 
 RETURN PLS_INTEGER;
 
DBMS_LOB.GETOPTIONS (
  lob_loc             IN     CLOB CHARACTER SET ANY_CS,
  option_types        IN     PLS_INTEGER) 
RETURN PLS_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5235"></a>Parameters</p>
<div id="ARPLS66713" class="tblformal">
<p class="titleintable"><a id="sthref5236"></a><a id="sthref5237"></a>Table 88-64 GETOPTIONS Function Parameter</p>
<table class="cellalignment4330" title="GETOPTIONS Function Parameter" summary="This table describes the parameters of DBMS_LOB.GETOPTIONS." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t88"><span class="bold">Parameter</span></th>
<th class="cellalignment4328" id="r1c2-t88"><span class="bold">Description</span></th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t88" headers="r1c1-t88">
<p><code dir="ltr">lob_loc</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t88 r1c2-t88">
<p>Locator for the LOB to be examined. For more information, see <a href="#i1015792">Operational Notes</a>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t88" headers="r1c1-t88">
<p><code dir="ltr">option_type</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t88 r1c2-t88">
<p>See <a href="#CHDCIJJB">DBMS_LOB Constants - Option Types</a></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5238"></a>Return Values</p>
<p>The return values are a combination of <code dir="ltr">COMPRESS_ON</code>, <code dir="ltr">ENCRYPT_ON</code> and <code dir="ltr">DEDUPLICATE_ON</code> (see <a href="#CHDGHHFE">DBMS_LOB Constants - Option Values</a>) depending on which option types (see <a href="#CHDCIJJB">DBMS_LOB Constants - Option Types</a>) are passed in.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5239"></a>Exceptions</p>
<div id="ARPLS66714" class="tblformal">
<p class="titleintable"><a id="sthref5240"></a><a id="sthref5241"></a>Table 88-65 GETOPTIONS Procedure Exceptions</p>
<table class="cellalignment4330" title="GETOPTIONS Procedure Exceptions " summary="This table describes the Exceptions raised by GETOPTIONS." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t89">Exception</th>
<th class="cellalignment4328" id="r1c2-t89">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t89" headers="r1c1-t89">
<p><code dir="ltr">INVALID_ARGVAL</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t89 r1c2-t89">
<p>A parameter value was invalid</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t89" headers="r1c1-t89">
<p><code dir="ltr">QUERY_WRITE</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t89 r1c2-t89">
<p>Cannot perform operation during a query</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t89" headers="r1c1-t89">
<p><code dir="ltr">BUFFERING_ENABLED</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t89 r1c2-t89">
<p>Cannot perform operation with LOB buffering enabled</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t89" headers="r1c1-t89">
<p><code dir="ltr">SECUREFILE_BADLOB</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t89 r1c2-t89">
<p>A non-<code dir="ltr">SECUREFILE</code> LOB was used in a <code dir="ltr">SECUREFILE</code> LOB only call</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5242"></a>Usage Notes</p>
<p>You cannot turn compression or deduplication on or off for a SecureFile column that does not have those features on. The GetOptions Functions and <a href="#CHDHDDDD">SETOPTIONS Procedures</a> work on individual SecureFiles. You can turn off a feature on a particular SecureFile and turn on a feature that has already been turned off by SetOptions, but you cannot turn on an option that has not been given to the SecureFile when the table was created.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66715" class="refsect2"><a id="i998546"></a>
<h3 class="refsect2"><a id="sthref5243"></a>INSTR Functions</h3>
<p>This function returns the matching position of the <span class="italic">nth</span> occurrence of the pattern in the LOB, starting from the offset you specify.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5244"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.INSTR (
   lob_loc    IN   BLOB,
   pattern    IN   RAW,
   offset     IN   INTEGER := 1,
   nth        IN   INTEGER := 1)
  RETURN INTEGER;

DBMS_LOB.INSTR (
   lob_loc    IN   CLOB      CHARACTER SET ANY_CS,
   pattern    IN   VARCHAR2  CHARACTER SET lob_loc%CHARSET,
   offset     IN   INTEGER := 1,
   nth        IN   INTEGER := 1)
  RETURN INTEGER;

DBMS_LOB.INSTR (
   file_loc   IN   BFILE,
   pattern    IN   RAW,
   offset     IN   INTEGER := 1,
   nth        IN   INTEGER := 1)
  RETURN INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5245"></a>Pragmas</p>
<pre dir="ltr">pragma restrict_references(INSTR, WNDS, WNPS, RNDS, RNPS);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5246"></a>Parameters</p>
<div id="ARPLS66716" class="tblformal">
<p class="titleintable"><a id="sthref5247"></a><a id="sthref5248"></a>Table 88-66 INSTR Function Parameters</p>
<table class="cellalignment4330" title="INSTR Function Parameters" summary="This table describes the parameters of DBMS_LOB.INSTR." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t90"><span class="bold">Parameter</span></th>
<th class="cellalignment4328" id="r1c2-t90"><span class="bold">Description</span></th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t90" headers="r1c1-t90">
<p><code dir="ltr">lob_loc</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t90 r1c2-t90">
<p>Locator for the LOB to be examined. For more information, see <a href="#i1015792">Operational Notes</a>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t90" headers="r1c1-t90">
<p><code dir="ltr">file_loc</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t90 r1c2-t90">
<p>The file locator for the LOB to be examined.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t90" headers="r1c1-t90">
<p><code dir="ltr">pattern</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t90 r1c2-t90">
<p>Pattern to be tested for. The pattern is a group of <code dir="ltr">RAW</code> bytes for <code dir="ltr">BLOBs</code>, and a character string (<code dir="ltr">VARCHAR2</code>) for <code dir="ltr">CLOBs</code>.The maximum size of the pattern is 16383 bytes.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t90" headers="r1c1-t90">
<p><code dir="ltr">offset</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t90 r1c2-t90">
<p>Absolute offset in bytes (<code dir="ltr">BLOBs</code>) or characters (<code dir="ltr">CLOBs</code>) at which the pattern matching is to start. (origin: 1)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t90" headers="r1c1-t90">
<p><code dir="ltr">nth</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t90 r1c2-t90">
<p>Occurrence number, starting at 1.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5249"></a>Return Values</p>
<div id="ARPLS66717" class="tblformal">
<p class="titleintable"><a id="sthref5250"></a><a id="sthref5251"></a>Table 88-67 INSTR Function Return Values</p>
<table class="cellalignment4330" title="INSTR Function Return Values " summary="This table describes Return Values for use with INSTR." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t91">Return</th>
<th class="cellalignment4328" id="r1c2-t91">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t91" headers="r1c1-t91">
<p><code dir="ltr">INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t91 r1c2-t91">
<p>Offset of the start of the matched pattern, in bytes or characters.</p>
<p>It returns 0 if the pattern is not found.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t91" headers="r1c1-t91">
<p>NULL</p>
</td>
<td class="cellalignment4329" headers="r3c1-t91 r1c2-t91">
<p>Either:</p>
<p>-any one or more of the <code dir="ltr">IN</code> parameters was <code dir="ltr">NULL</code> or <code dir="ltr">INVALID</code>.</p>
<p>-<code dir="ltr">offset</code> &lt; 1 or <code dir="ltr">offset</code> &gt; <code dir="ltr">LOBMAXSIZE</code>.</p>
<p>-<code dir="ltr">nth</code> &lt; 1.</p>
<p>-<code dir="ltr">nth</code> &gt; <code dir="ltr">LOBMAXSIZE.</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5252"></a>Usage Notes</p>
<p>The form of the <code dir="ltr">VARCHAR2</code> buffer (the <code dir="ltr">pattern</code> parameter) must match the form of the <code dir="ltr">CLOB</code> parameter. In other words, if the input LOB parameter is of type <code dir="ltr">NCLOB</code>, then the buffer must contain <code dir="ltr">NCHAR</code> data. Conversely, if the input LOB parameter is of type <code dir="ltr">CLOB</code>, then the buffer must contain <code dir="ltr">CHAR</code> data.</p>
<p>For <code dir="ltr">BFILEs</code>, the file must be already opened using a successful <code dir="ltr">FILEOPEN</code> operation for this operation to succeed.</p>
<p>Operations that accept <code dir="ltr">RAW</code> or <code dir="ltr">VARCHAR2</code> parameters for pattern matching, such as <code dir="ltr">INSTR</code>, do not support regular expressions or special matching characters (as in the case of SQL <code dir="ltr">LIKE</code>) in the pattern parameter or substrings.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5253"></a>Exceptions</p>
<div id="ARPLS66718" class="tblformal">
<p class="titleintable"><a id="sthref5254"></a><a id="sthref5255"></a>Table 88-68 INSTR Function Exceptions for BFILES</p>
<table class="cellalignment4330" title="INSTR Function Exceptions for BFILES " summary="This table describes the Exceptions raised by INSTR." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t92">Exception</th>
<th class="cellalignment4328" id="r1c2-t92">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t92" headers="r1c1-t92">
<p><code dir="ltr">UNOPENED_FILE</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t92 r1c2-t92">
<p>File was not opened using the input locator.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t92" headers="r1c1-t92">
<p><code dir="ltr">NOEXIST_DIRECTORY</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t92 r1c2-t92">
<p>Directory does not exist.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t92" headers="r1c1-t92">
<p><code dir="ltr">NOPRIV_DIRECTORY</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t92 r1c2-t92">
<p>You do not have privileges for the directory.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t92" headers="r1c1-t92">
<p><code dir="ltr">INVALID_DIRECTORY</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t92 r1c2-t92">
<p>Directory has been invalidated after the file was opened.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t92" headers="r1c1-t92">
<p><code dir="ltr">INVALID_OPERATION</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t92 r1c2-t92">
<p>File does not exist, or you do not have access privileges on the file.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t92" headers="r1c1-t92">
<p><code dir="ltr">BUFFERING_ENABLED</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t92 r1c2-t92">
<p>Cannot perform operation with LOB buffering enabled if buffering is enabled on the LOB</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i999349">&#34;SUBSTR Functions&#34;</a></p>
</li>
<li>
<p><a class="olink ADLOB1003" href="../ADLOB/adlob_lob_ops.htm#ADLOB1003"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for additional details on usage of this procedure</p>
</li>
</ul>
</div>
</div>
<!-- class="refsect2" -->
<div id="ARPLS66719" class="refsect2"><a id="i998705"></a>
<h3 class="refsect2"><a id="sthref5256"></a>ISOPEN Functions</h3>
<p>This function checks to see if the LOB was already opened using the input locator. This subprogram is for internal and external LOBs.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5257"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.ISOPEN (
   lob_loc IN BLOB) 
  RETURN INTEGER; 

DBMS_LOB.ISOPEN (
   lob_loc IN CLOB CHARACTER SET ANY_CS) 
  RETURN INTEGER; 

DBMS_LOB.ISOPEN (
   file_loc IN BFILE) 
  RETURN INTEGER; 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5258"></a>Pragmas</p>
<pre dir="ltr">PRAGMA RESTRICT_REFERENCES(isopen, WNDS, RNDS, WNPS, RNPS); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5259"></a>Parameters</p>
<div id="ARPLS66720" class="tblformal">
<p class="titleintable"><a id="sthref5260"></a><a id="sthref5261"></a>Table 88-69 ISOPEN Function Parameters</p>
<table class="cellalignment4330" title="ISOPEN Function Parameters" summary="This table describes the parameters of DBMS_LOB.ISOPEN." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t94">Parameter</th>
<th class="cellalignment4328" id="r1c2-t94">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t94" headers="r1c1-t94">
<p><code dir="ltr">lob_loc</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t94 r1c2-t94">
<p>LOB locator. For more information, see <a href="#i1015792">Operational Notes</a>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t94" headers="r1c1-t94">
<p><code dir="ltr">file_loc</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t94 r1c2-t94">
<p>File locator.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5262"></a>Return Values</p>
<p>The return value is 1 if the LOB is open, 0 otherwise.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5263"></a>Usage Notes</p>
<p>For <code dir="ltr">BFILES</code>, openness is associated with the locator. If the input locator was never passed to <code dir="ltr">OPEN,</code> the <code dir="ltr">BFILE</code> is not considered to be opened by this locator. However, a different locator may have opened the <code dir="ltr">BFILE</code>. More than one <code dir="ltr">OPEN</code> can be performed on the same <code dir="ltr">BFILE</code> using different locators.</p>
<p>For internal LOBs, openness is associated with the LOB, not with the locator. If locator1 opened the LOB, then locator2 also sees the LOB as open. For internal LOBs, <code dir="ltr">ISOPEN</code> requires a round-trip, because it checks the state on the server to see if the LOB is indeed open.</p>
<p>For external LOBs (<code dir="ltr">BFILEs</code>), <code dir="ltr">ISOPEN</code> also requires a round-trip, because that&#39;s where the state is kept.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB1014" href="../ADLOB/adlob_lob_ops.htm#ADLOB1014"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for additional details on usage of this procedure</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS74402" class="refsect2"><a id="CJHCGHBF"></a>
<h3 class="refsect2">ISSECUREFILE Function</h3>
<p>This function returns <code dir="ltr">TRUE</code> if the LOB locator passed to it is for a SecureFile LOB. It returns <code dir="ltr">FALSE</code> otherwise.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5264"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB ISSECUREFILE(
    lob_loc    IN      BLOB)
  RETURN BOOLEAN;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5265"></a>Pragmas</p>
<pre dir="ltr">PRAGMA RESTRICT_REFERENCES(issecurefile, WNDS, RNDS, WNPS, RNPS);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5266"></a>Parameters</p>
<div id="ARPLS74403" class="tblformal">
<p class="titleintable"><a id="sthref5267"></a><a id="sthref5268"></a>Table 88-70 ISSECUREFILE Function Parameter</p>
<table class="cellalignment4330" title="ISSECUREFILE Function Parameter" summary="This table describes the parameters of DBMS_LOB.ISOPEN." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t96">Parameter</th>
<th class="cellalignment4328" id="r1c2-t96">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t96" headers="r1c1-t96">
<p><code dir="ltr">lob_loc</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t96 r1c2-t96">
<p>LOB locator. For more information, see <a href="#i1015792">Operational Notes</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5269"></a>Return Values</p>
<p>This function returns <code dir="ltr">TRUE</code> if the LOB locator passed to it is for a SecureFile LOB. It returns <code dir="ltr">FALSE</code> otherwise.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66721" class="refsect2"><a id="i998745"></a>
<h3 class="refsect2"><a id="sthref5270"></a>ISTEMPORARY Functions</h3>
<p>This function determines whether a LOB instance is temporary.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5271"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.ISTEMPORARY (
   lob_loc IN BLOB)
  RETURN INTEGER;
 
DBMS_LOB.ISTEMPORARY (
   lob_loc IN CLOB CHARACTER SET ANY_CS)
  RETURN INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5272"></a>Pragmas</p>
<pre dir="ltr">PRAGMA RESTRICT_REFERENCES(istemporary, WNDS, RNDS, WNPS, RNPS);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5273"></a>Parameters</p>
<div id="ARPLS66722" class="tblformal">
<p class="titleintable"><a id="sthref5274"></a><a id="sthref5275"></a>Table 88-71 ISTEMPORARY Procedure Parameters</p>
<table class="cellalignment4330" title="ISTEMPORARY Procedure Parameters " summary="This table describes the parameters of the DBMS_LOB.ISTEMPORARY subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t97">Parameter</th>
<th class="cellalignment4328" id="r1c2-t97">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t97" headers="r1c1-t97">
<p><code dir="ltr">lob_loc</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t97 r1c2-t97">
<p>LOB locator. For more information, see <a href="#i1015792">Operational Notes</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5276"></a>Return Values</p>
<p>The return value is 1 if the LOB is temporary and exists; 0 if the LOB is not temporary or does not exist; <code dir="ltr">NULL</code> if the given locator is <code dir="ltr">NULL</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5277"></a>Usage Notes</p>
<p>When you free a Temporary LOB with <code dir="ltr">FREETEMPORARY</code>, the LOB locator is not set to <code dir="ltr">NULL</code>. Consequently, <code dir="ltr">ISTEMPORARY</code> will return 0 for a locator that has been freed but not explicitly reset to <code dir="ltr">NULL</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB1015" href="../ADLOB/adlob_lob_ops.htm#ADLOB1015"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for additional details on usage of this procedure</div>
</div>
<!-- class="refsect2" -->
<div id="ARPLS66723" class="refsect2"><a id="i998869"></a>
<h3 class="refsect2"><a id="sthref5278"></a>LOADBLOBFROMFILE Procedure</h3>
<p>This procedure loads data from <code dir="ltr">BFILE</code> to internal <code dir="ltr">BLOB</code>. This achieves the same outcome as <code dir="ltr">LOADFROMFILE</code>, and returns the new offsets.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5279"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.LOADBLOBFROMFILE (
   dest_lob    IN OUT NOCOPY BLOB, 
   src_bfile   IN            BFILE, 
   amount      IN            INTEGER, 
   dest_offset IN OUT        INTEGER, 
   src_offset  IN OUT        INTEGER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5280"></a>Parameters</p>
<div id="ARPLS66724" class="tblformal">
<p class="titleintable"><a id="sthref5281"></a><a id="sthref5282"></a>Table 88-72 LOADBLOBFROMFILE Procedure Parameters</p>
<table class="cellalignment4330" title="LOADBLOBFROMFILE Procedure Parameters" summary="This table describes the parameters of the DBMS_LOB.LOADBLOBFROMFILE subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t99">Parameter</th>
<th class="cellalignment4328" id="r1c2-t99">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t99" headers="r1c1-t99">
<p><code dir="ltr">dest_lob</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t99 r1c2-t99">
<p><code dir="ltr">BLOB</code> locator of the target for the load.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t99" headers="r1c1-t99">
<p><code dir="ltr">src_bfile</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t99 r1c2-t99">
<p><code dir="ltr">BFILE</code> locator of the source for the load.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t99" headers="r1c1-t99">
<p><code dir="ltr">amount</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t99 r1c2-t99">
<p>Number of bytes to load from the <code dir="ltr">BFILE</code>. You can also use <code dir="ltr">DBMS_LOB.LOBMAXSIZE</code> to load until the end of the <code dir="ltr">BFILE</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t99" headers="r1c1-t99">
<p><code dir="ltr">dest_offset</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t99 r1c2-t99">
<p>(<code dir="ltr">IN</code>) Offset in bytes in the destination <code dir="ltr">BLOB</code> (origin: 1) for the start of the write. <code dir="ltr">(OUT) New</code> offset in bytes in the destination BLOB right after the end of this write, which is also where the next write should begin.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t99" headers="r1c1-t99">
<p><code dir="ltr">src_offset</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t99 r1c2-t99">
<p><code dir="ltr">(IN) Offset</code> in bytes in the source <code dir="ltr">BFILE</code> (origin: 1) for the start of the read<code dir="ltr">.(OUT) Offset</code> in bytes in the source <code dir="ltr">BFILE</code> right after the end of this read, which is also where the next read should begin.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5283"></a>Usage Notes</p>
<ul>
<li>
<p>You can specify the offsets for both the source and destination LOBs, and the number of bytes to copy from the source <code dir="ltr">BFILE</code>. The <code dir="ltr">amount</code> and <code dir="ltr">src_offset</code>, because they refer to the <code dir="ltr">BFILE</code>, are in terms of bytes, and the <code dir="ltr">dest_offset</code> is in bytes for <code dir="ltr">BLOBs</code>.</p>
</li>
<li>
<p>If the offset you specify in the destination LOB is beyond the end of the data currently in this LOB, then zero-byte fillers or spaces are inserted in the destination <code dir="ltr">BLOB</code>. If the offset is less than the current length of the destination LOB, then existing data is overwritten.</p>
</li>
<li>
<p>There is an error if the input amount plus offset exceeds the length of the data in the <code dir="ltr">BFILE</code> (unless the amount specified is <code dir="ltr">LOBMAXSIZE</code> which you can specify to continue loading until the end of the <code dir="ltr">BFILE</code> is reached).</p>
</li>
<li>
<p>It is not mandatory that you wrap the LOB operation inside the <code dir="ltr">OPEN/CLOSE</code> operations. If you did not open the LOB before performing the operation, the functional and domain indexes on the LOB column are updated during the call. However, if you opened the LOB before performing the operation, you must close it before you commit the transaction. When an internal LOB is closed, it updates the functional and domain indexes on the LOB column.</p>
</li>
<li>
<p>If you do not wrap the LOB operation inside the <code dir="ltr">OPEN/CLOSE</code>, the functional and domain indexes are updated each time you write to the LOB. This can adversely affect performance. Therefore, it is recommended that you enclose write operations to the LOB within the <code dir="ltr">OPEN</code> or <code dir="ltr">CLOSE</code> statement.</p>
</li>
<li>
<p>LOADFROMFILE gets the destination LOB prior to the load unless the load covers the entire LOB.</p>
</li>
</ul>
<p class="subhead1"><a id="ARPLS66725"></a>Constants and Defaults</p>
<p>There is no easy way to omit parameters. You must either declare a variable for <code dir="ltr">IN/OUT</code> parameter or provide a default value for the <code dir="ltr">IN</code> parameter. Here is a summary of the constants and the defaults that can be used.</p>
</div>
<!-- class="refsubsect" -->
<div id="ARPLS66726" class="tblformal">
<p class="titleintable"><a id="sthref5284"></a><a id="sthref5285"></a>Table 88-73 Suggested Values of the Parameter</p>
<table class="cellalignment4330" title="Suggested Values of the Parameter" summary="This table describes Suggested Values for use with LOADBLOBFROMFILE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4333" id="r1c1-t100">Parameter</th>
<th class="cellalignment4333" id="r1c2-t100">Default Value</th>
<th class="cellalignment4333" id="r1c3-t100">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t100" headers="r1c1-t100">
<p><code dir="ltr">amount</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t100 r1c2-t100">
<p><code dir="ltr">DBMS_LOB.LOBMAXSIZE (IN)</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t100 r1c3-t100">
<p>Load the entire file</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t100" headers="r1c1-t100">
<p><code dir="ltr">dest_offset</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t100 r1c2-t100">
<p><code dir="ltr">1 (IN)</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t100 r1c3-t100">
<p>start from the beginning</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t100" headers="r1c1-t100">
<p><code dir="ltr">src_offset</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t100 r1c2-t100">
<p><code dir="ltr">1 (IN)</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t100 r1c3-t100">
<p>start from the beginning</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>Constants defined in <code dir="ltr">DBMSLOB.SQL</code></p>
<pre dir="ltr">lobmaxsize                    CONSTANT INTEGER        := DBMS_LOB.LOBMAXSIZE;
</pre>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5286"></a>Exceptions</p>
<div id="ARPLS66727" class="tblformal">
<p class="titleintable"><a id="sthref5287"></a><a id="sthref5288"></a>Table 88-74 LOADBLOBFROMFILE Procedure Exceptions</p>
<table class="cellalignment4330" title="LOADBLOBFROMFILE Procedure Exceptions " summary="This table describes the Exceptions raised by LOADBLOBFROMFILE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t101">Exception</th>
<th class="cellalignment4328" id="r1c2-t101">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t101" headers="r1c1-t101">
<p><code dir="ltr">VALUE_ERROR</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t101 r1c2-t101">
<p>Any of the input parameters are <code dir="ltr">NULL</code> or <code dir="ltr">INVALID</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t101" headers="r1c1-t101">
<p><code dir="ltr">INVALID_ARGVAL</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t101 r1c2-t101">
<p>Either:</p>
<p>- <code dir="ltr">src_offset</code> or <code dir="ltr">dest_offset</code> &lt; 1.</p>
<p>- <code dir="ltr">src_offset</code> or <code dir="ltr">dest_offset</code> &gt; <code dir="ltr">LOBMAXSIZE</code>.</p>
<p>- <code dir="ltr">amount</code> &lt; 1.</p>
<p>- <code dir="ltr">amount</code> &gt; <code dir="ltr">LOBMAXSIZE</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t101" headers="r1c1-t101">
<p><code dir="ltr">BUFFERING_ENABLED</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t101 r1c2-t101">
<p>Cannot perform operation with LOB buffering enabled if buffering is enabled on the BLOB</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB1016" href="../ADLOB/adlob_bfile_ops.htm#ADLOB1016"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for additional details on usage of this procedure</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66728" class="refsect2"><a id="i998978"></a>
<h3 class="refsect2"><a id="sthref5289"></a>LOADCLOBFROMFILE Procedure</h3>
<p>This procedure loads data from a <code dir="ltr">BFILE</code> to an internal <code dir="ltr">CLOB/NCLOB</code> with necessary character set conversion and returns the new offsets.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5290"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.LOADCLOBFROMFILE (
   dest_lob       IN OUT NOCOPY   NOCOPY CLOB CHARACTER SET ANY_CS, 
   src_bfile      IN              BFILE, 
   amount         IN              INTEGER, 
   dest_offset    IN OUT          INTEGER, 
   src_offset     IN OUT          INTEGER,
   bfile_csid     IN              NUMBER,
   lang_context   IN OUT          INTEGER,
   warning        OUT             INTEGER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5291"></a>Parameters</p>
<div id="ARPLS66729" class="tblformal">
<p class="titleintable"><a id="sthref5292"></a><a id="sthref5293"></a>Table 88-75 LOADCLOBFROMFILE Procedure Parameters</p>
<table class="cellalignment4330" title="LOADCLOBFROMFILE Procedure Parameters " summary="This table describes the parameters of the DBMS_LOB.LOADCLOBFROMFILE subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t103">Parameter</th>
<th class="cellalignment4328" id="r1c2-t103">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t103" headers="r1c1-t103">
<p><code dir="ltr">dest_lob</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t103 r1c2-t103">
<p><code dir="ltr">CLOB/NCLOB</code> locator of the target for the load.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t103" headers="r1c1-t103">
<p><code dir="ltr">src_bfile</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t103 r1c2-t103">
<p><code dir="ltr">BFILE</code> locator of the source for the load.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t103" headers="r1c1-t103">
<p><code dir="ltr">amount</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t103 r1c2-t103">
<p>Number of bytes to load from the <code dir="ltr">BFILE</code>. Use <code dir="ltr">DBMS_LOB</code>.<code dir="ltr">LOBMAXSIZE</code> of load until the end of the <code dir="ltr">BFILE</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t103" headers="r1c1-t103">
<p><code dir="ltr">dest_offset</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t103 r1c2-t103">
<p><code dir="ltr">(IN) Offset</code> in characters in the destination <code dir="ltr">CLOB</code> (origin: 1) for the start of the write. <code dir="ltr">(OUT)</code> T<code dir="ltr">he</code> new offset in characters right after the end of this load, which is also where the next load should start. It always points to the beginning of the first complete character after the end of load. If the last character is not complete, offset goes back to the beginning of the partial character.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t103" headers="r1c1-t103">
<p><code dir="ltr">src_offset</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t103 r1c2-t103">
<p><code dir="ltr">(IN) Offset</code> in bytes in the source <code dir="ltr">BFILE</code> (origin: 1) for the start of the read<code dir="ltr">.(OUT)</code>Offset in bytes in the source <code dir="ltr">BFILE</code> right after the end of this read, which is also where the next read should begin.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t103" headers="r1c1-t103">
<p><code dir="ltr">bfile_csid</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t103 r1c2-t103">
<p><code dir="ltr">Character set id of the source (BFILE</code>) file.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t103" headers="r1c1-t103">
<p><code dir="ltr">lang_context</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t103 r1c2-t103">
<p><code dir="ltr">(IN)</code> La<code dir="ltr">nguage</code> context, such as shift status, for the current load.</p>
<p><code dir="ltr">(OUT)</code> The language context at the time when the current load stopped, and what the next load should be using if continuing loading from the same source. This information is returned to the user so that they can use it for the continuous load without losing or misinterpreting any source data. For the very first load or if do not care, simply use the default 0. The details of this language context is hidden from the user. One does not need to know what it is or what&#39;s in it in order to make the call</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t103" headers="r1c1-t103">
<p><code dir="ltr">warning</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t103 r1c2-t103">
<p>(OUT) Warning message. This indicates something abnormal happened during the loading. It may or may not be caused by the user&#39;s mistake. The loading is completed as required, and it&#39;s up to the user to check the warning message. Currently, the only possible warning is the inconvertible character. This happens when the character in the source cannot be properly converted to a character in destination, and the default replacement character (for example, &#39;?&#39;) is used in place. The message is defined the constant value <code dir="ltr">DBMS_LOB.WARN_INCONVERTIBLE_CHAR</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5294"></a>Usage Notes</p>
<p>You can specify the offsets for both the source and destination LOBs, and the number of bytes to copy from the source <code dir="ltr">BFILE</code>. The <code dir="ltr">amount</code> and <code dir="ltr">src_offset</code>, because they refer to the <code dir="ltr">BFILE</code>, are in terms of bytes, and the <code dir="ltr">dest_offset</code> is in characters for <code dir="ltr">CLOBs</code>.</p>
<p>If the offset you specify in the destination LOB is beyond the end of the data currently in this LOB, then zero-byte fillers or spaces are inserted in the destination <code dir="ltr">CLOB</code>. If the offset is less than the current length of the destination LOB, then existing data is overwritten.</p>
<p>There is an error if the input amount plus offset exceeds the length of the data in the <code dir="ltr">BFILE</code> (unless the amount specified is <code dir="ltr">LOBMAXSIZE</code> which you can specify to continue loading until the end of the <code dir="ltr">BFILE</code> is reached).</p>
<p>Note the following requirements:</p>
<ul>
<li>
<p>The destination character set is always the same as the database character set in the case of <code dir="ltr">CLOB</code> and national character set in the case of <code dir="ltr">NCLOB</code>.</p>
</li>
<li>
<p><code dir="ltr">csid=0</code> indicates the default behavior that uses database <code dir="ltr">csid</code> for <code dir="ltr">CLOB</code> and national <code dir="ltr">csid</code> for <code dir="ltr">NCLOB</code> in the place of source <code dir="ltr">csid</code>. Conversion is still necessary if it is of varying width</p>
</li>
<li>
<p>It is not mandatory that you wrap the LOB operation inside the <code dir="ltr">OPEN/CLOSE</code> operations. If you did not open the LOB before performing the operation, the functional and domain indexes on the LOB column are updated during the call. However, if you opened the LOB before performing the operation, you must close it before you commit the transaction. When an internal LOB is closed, it updates the functional and domain indexes on the LOB column.</p>
<p>If you do not wrap the LOB operation inside the <code dir="ltr">OPEN/CLOSE</code>, the functional and domain indexes are updated each time you write to the LOB. This can adversely affect performance. Therefore, it is recommended that you enclose write operations to the LOB within the <code dir="ltr">OPEN</code> or <code dir="ltr">CLOSE</code> statement.</p>
</li>
</ul>
<p>The source <code dir="ltr">BFILE</code> can contain data in the Unicode character set. The Unicode standard defines many encoding schemes that provide mappings from Unicode characters to sequences of bytes. <a href="#CHDJHJDB">Table 88-76, &#34;Supported Unicode Encoding Schemes&#34;</a> lists Unicode encodings schemes supported by this subprogram.</p>
<div id="ARPLS66730" class="tblformal">
<p class="titleintable"><a id="sthref5295"></a><a id="CHDJHJDB"></a>Table 88-76 Supported Unicode Encoding Schemes</p>
<table class="cellalignment4330" title="Supported Unicode Encoding Schemes" summary="This table describes Supported Unicode Encoding Schemes." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t104">Encoding Scheme</th>
<th class="cellalignment4328" id="r1c2-t104">Oracle Name</th>
<th class="cellalignment4328" id="r1c3-t104">bfile_csid Value</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t104" headers="r1c1-t104">
<p><code dir="ltr">UTF-8</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t104 r1c2-t104">
<p><code dir="ltr">AL32UTF8</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t104 r1c3-t104">
<p>873</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t104" headers="r1c1-t104">
<p><code dir="ltr">UTF-16BE</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t104 r1c2-t104">
<p><code dir="ltr">AL16UTF16</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t104 r1c3-t104">
<p>2000</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t104" headers="r1c1-t104">
<p><code dir="ltr">UTF-16LE</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t104 r1c2-t104">
<p><code dir="ltr">AL16UTF16LE</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t104 r1c3-t104">
<p>2002</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t104" headers="r1c1-t104">
<p><code dir="ltr">CESU-8</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t104 r1c2-t104">
<p><code dir="ltr">UTF8</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t104 r1c3-t104">
<p>871</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t104" headers="r1c1-t104">
<p><code dir="ltr">UTF-EBCDIC</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t104 r1c2-t104">
<p><code dir="ltr">UTFE</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t104 r1c3-t104">
<p>872</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t104" headers="r1c1-t104">
<p><code dir="ltr">UTF-16</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t104 r1c2-t104">
<p><code dir="ltr">UTF16</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t104 r1c3-t104">
<p>1000</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>All three <code dir="ltr">UTF-16</code> encoding schemes encode Unicode characters as 2-byte unsigned integers. Integers can be stored in big-endian or in little-endian byte order. The <code dir="ltr">UTF-16BE</code> encoding scheme defines big-endian data. The <code dir="ltr">UTF-16LE</code> scheme defines little-endian data. The <code dir="ltr">UTF-16</code> scheme requires that the source <code dir="ltr">BFILE</code> contains the Byte Order Mark (BOM) character in the first two bytes to define the byte order. The BOM code is <code dir="ltr">0xFEFF</code>. If the code is stored as <code dir="ltr">{0xFE,0xFF}</code>, the data is interpreted as big-endian. If it is stored as <code dir="ltr">{0xFF,0xFE}</code>, the data is interpreted as little-endian.</p>
<p>In <code dir="ltr">UTF-8</code> and in <code dir="ltr">CESU-8</code> encodings the Byte Order Mark is stored as <code dir="ltr">{0xEF,0xBB, 0xBF}</code>. With any of the Unicode encodings, the corresponding BOM sequence at the beginning of the file is recognized and not loaded into the destination LOB.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5296"></a>Constants</p>
<p>Here is a summary of the constants and the suggested values that can be used.</p>
</div>
<!-- class="refsubsect" -->
<div id="ARPLS66731" class="tblformal">
<p class="titleintable"><a id="sthref5297"></a><a id="sthref5298"></a>Table 88-77 Suggested Values of the Parameter</p>
<table class="cellalignment4330" title="Suggested Values of the Parameter" summary="This table describes Suggested Values for use with LOADCLOBFROMFILE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4333" id="r1c1-t105">Parameter</th>
<th class="cellalignment4333" id="r1c2-t105">Suggested Value</th>
<th class="cellalignment4333" id="r1c3-t105">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t105" headers="r1c1-t105">
<p><code dir="ltr">amount</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t105 r1c2-t105">
<p><code dir="ltr">DBMS_LOB.LOBMAXSIZE (IN)</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t105 r1c3-t105">
<p>Load the entire file</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t105" headers="r1c1-t105">
<p><code dir="ltr">dest_offset</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t105 r1c2-t105">
<p><code dir="ltr">1 (IN)</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t105 r1c3-t105">
<p>start from the beginning</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t105" headers="r1c1-t105">
<p><code dir="ltr">src_offset</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t105 r1c2-t105">
<p><code dir="ltr">1 (IN)</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t105 r1c3-t105">
<p>start from the beginning</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t105" headers="r1c1-t105">
<p><code dir="ltr">csid</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t105 r1c2-t105">
<p><code dir="ltr">0 (IN)</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t105 r1c3-t105">
<p>default csid, use destination csid</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t105" headers="r1c1-t105">
<p><code dir="ltr">lang_context</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t105 r1c2-t105">
<p><code dir="ltr">0 (IN)</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t105 r1c3-t105">
<p>default language context</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t105" headers="r1c1-t105">
<p><code dir="ltr">warning</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t105 r1c2-t105">
<p><code dir="ltr">0 (OUT)</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t105 r1c3-t105">
<p>no warning message, everything is ok</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>Constants defined in <code dir="ltr">DBMSLOB.SQL</code></p>
<pre dir="ltr">lobmaxsize                    CONSTANT INTEGER        := 18446744073709551615;
warn_inconvertible_char       CONSTANT INTEGER        := 1;
default_csid                  CONSTANT INTEGER        := 0; 
default_lang_ctx              CONSTANT INTEGER        := 0;
no_warning                    CONSTANT INTEGER        := 0;
</pre>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5299"></a>Exceptions</p>
<div id="ARPLS66732" class="tblformal">
<p class="titleintable"><a id="sthref5300"></a><a id="sthref5301"></a>Table 88-78 LOADCLOBFROMFILE Procedure Exceptions</p>
<table class="cellalignment4330" title="LOADCLOBFROMFILE Procedure Exceptions " summary="This table describes the Exceptions raised by LOADCLOBFROMFILE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t106">Exception</th>
<th class="cellalignment4328" id="r1c2-t106">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t106" headers="r1c1-t106">
<p><code dir="ltr">VALUE_ERROR</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t106 r1c2-t106">
<p>Any of the input parameters are <code dir="ltr">NULL</code> or <code dir="ltr">INVALID</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t106" headers="r1c1-t106">
<p><code dir="ltr">INVALID_ARGVAL</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t106 r1c2-t106">
<p>Either:</p>
<p>- <code dir="ltr">src_offset</code> or <code dir="ltr">dest_offset</code> &lt; 1.</p>
<p>- <code dir="ltr">src_offset</code> or <code dir="ltr">dest_offset</code> &gt; <code dir="ltr">LOBMAXSIZE</code>.</p>
<p>- <code dir="ltr">amount</code> &lt; 1.</p>
<p>- <code dir="ltr">amount</code> &gt; <code dir="ltr">LOBMAXSIZE</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t106" headers="r1c1-t106">
<p><code dir="ltr">BUFFERING_ENABLED</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t106 r1c2-t106">
<p>Cannot perform operation with LOB buffering enabled if buffering is enabled on the CLOB</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB1017" href="../ADLOB/adlob_lob_ops.htm#ADLOB1017"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for additional details on usage of this procedure</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66733" class="refsect2"><a id="i998778"></a>
<h3 class="refsect2"><a id="sthref5302"></a>LOADFROMFILE Procedure</h3>
<p>This procedure copies all, or a part of, a source external LOB (<code dir="ltr">BFILE</code>) to a destination internal LOB.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5303"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.LOADFROMFILE (
   dest_lob    IN OUT NOCOPY BLOB, 
   src_file    IN            BFILE, 
   amount      IN            INTEGER, 
   dest_offset IN            INTEGER  := 1, 
   src_offset  IN            INTEGER  := 1);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5304"></a>Parameters</p>
<div id="ARPLS66734" class="tblformal">
<p class="titleintable"><a id="sthref5305"></a><a id="sthref5306"></a>Table 88-79 LOADFROMFILE Procedure Parameters</p>
<table class="cellalignment4330" title="LOADFROMFILE Procedure Parameters" summary="This table describes the parameters of the DBMS_LOB.LOADFROMFILE subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t108">Parameter</th>
<th class="cellalignment4328" id="r1c2-t108">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t108" headers="r1c1-t108">
<p><code dir="ltr">dest_lob</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t108 r1c2-t108">
<p>LOB locator of the target for the load.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t108" headers="r1c1-t108">
<p><code dir="ltr">src_file</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t108 r1c2-t108">
<p><code dir="ltr">BFILE</code> locator of the source for the load.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t108" headers="r1c1-t108">
<p><code dir="ltr">amount</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t108 r1c2-t108">
<p>Number of bytes to load from the <code dir="ltr">BFILE</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t108" headers="r1c1-t108">
<p><code dir="ltr">dest_offset</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t108 r1c2-t108">
<p>Offset in bytes or characters in the destination LOB (origin: 1) for the start of the load.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t108" headers="r1c1-t108">
<p><code dir="ltr">src_offset</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t108 r1c2-t108">
<p>Offset in bytes in the source <code dir="ltr">BFILE</code> (origin: 1) for the start of the load.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5307"></a>Usage Notes</p>
<p>You can specify the offsets for both the source and destination LOBs, and the number of bytes to copy from the source <code dir="ltr">BFILE</code>. The <code dir="ltr">amount</code> and <code dir="ltr">src_offset</code>, because they refer to the <code dir="ltr">BFILE</code>, are in terms of bytes, and the <code dir="ltr">dest_offset</code> is either in bytes or characters for <code dir="ltr">BLOBs</code> and <code dir="ltr">CLOBs</code> respectively.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The input <code dir="ltr">BFILE</code> must have been opened prior to using this procedure. No character set conversions are performed implicitly when binary <code dir="ltr">BFILE</code> data is loaded into a <code dir="ltr">CLOB</code>. The <code dir="ltr">BFILE</code> data must already be in the same character set as the <code dir="ltr">CLOB</code> in the database. No error checking is performed to verify this.</div>
</div>
<!-- class="refsubsect" -->
<p>If the offset you specify in the destination LOB is beyond the end of the data currently in this LOB, then zero-byte fillers or spaces are inserted in the destination <code dir="ltr">BLOB</code> or <code dir="ltr">CLOB</code> respectively. If the offset is less than the current length of the destination LOB, then existing data is overwritten.</p>
<p>There is an error if the input amount plus offset exceeds the length of the data in the <code dir="ltr">BFILE</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If the character set is varying width, UTF-8 for example, the LOB value is stored in the fixed-width UCS2 format. Therefore, if you are using <code dir="ltr">DBMS_LOB.LOADFROMFILE,</code> the data in the BFILE should be in the UCS2 character set instead of the UTF-8 character set. However, you should use <code dir="ltr">sql*loader</code> instead of <code dir="ltr">LOADFROMFILE</code> to load data into a CLOB or NCLOB because <code dir="ltr">sql*loader</code> provides the necessary character set conversions.</div>
<p>It is not mandatory that you wrap the LOB operation inside the Open/Close interfaces. If you did not open the LOB before performing the operation, the functional and domain indexes on the LOB column are updated during the call. However, if you opened the LOB before performing the operation, you must close it before you commit the transaction. When an internal LOB is closed, it updates the functional and domain indexes on the LOB column.</p>
<p>If you do not wrap the LOB operation inside the Open/Close API, the functional and domain indexes are updated each time you write to the LOB. This can adversely affect performance. Therefore, it is recommended that you enclose write operations to the LOB within the <code dir="ltr">OPEN</code> or <code dir="ltr">CLOSE</code> statement.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5308"></a>Exceptions</p>
<div id="ARPLS66735" class="tblformal">
<p class="titleintable"><a id="sthref5309"></a><a id="sthref5310"></a>Table 88-80 LOADFROMFILE Procedure Exceptions</p>
<table class="cellalignment4330" title="LOADFROMFILE Procedure Exceptions " summary="This table describes the Exceptions raised by LOADFROMFILE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t111">Exception</th>
<th class="cellalignment4328" id="r1c2-t111">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t111" headers="r1c1-t111">
<p><code dir="ltr">VALUE_ERROR</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t111 r1c2-t111">
<p>Any of the input parameters are <code dir="ltr">NULL</code> or <code dir="ltr">INVALID</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t111" headers="r1c1-t111">
<p><code dir="ltr">INVALID_ARGVAL</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t111 r1c2-t111">
<p>Either:</p>
<p>- <code dir="ltr">src_offset</code> or <code dir="ltr">dest_offset</code> &lt; 1.</p>
<p>- <code dir="ltr">src_offset</code> or <code dir="ltr">dest_offset</code> &gt; <code dir="ltr">LOBMAXSIZE</code>.</p>
<p>- <code dir="ltr">amount</code> &lt; 1.</p>
<p>- <code dir="ltr">amount</code> &gt; <code dir="ltr">LOBMAXSIZE</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB1016" href="../ADLOB/adlob_bfile_ops.htm#ADLOB1016"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for additional details on usage of this procedure</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66639" class="refsect2"><a id="BGBJEGGG"></a>
<h3 class="refsect2"><a id="sthref5311"></a>MOVE_TO_DBFS_LINK Procedures</h3>
<p>This procedure archives the specified LOB data (from the database) into the DBFS HSM Store.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5312"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.MOVE_TO_DBFS_LINK (
  lob_loc       IN OUT BLOB,
  storage_path  IN     VARCHAR2(dbfs_link_path_max_size),
  flags         IN     BINARY INTEGER DEFAULT DBFS_LINK_NOCACHE); 

DBMS_LOB.MOVE_TO_DBFS_LINK (
  lob_loc       IN OUT CLOB CHARACTER SET ANY_CS,
  storage_path  IN     VARCHAR2(dbfs_link_path_max_size),
  flags         IN     BINARY INTEGER DEFAULT DBFS_LINK_NOCACHE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5313"></a>Parameters</p>
<div id="ARPLS66640" class="tblformal">
<p class="titleintable"><a id="sthref5314"></a><a id="sthref5315"></a>Table 88-81 MOVE_TO_DBFS_LINK Procedure Parameters</p>
<table class="cellalignment4330" title="MOVE_TO_DBFS_LINK Procedure Parameters " summary="This table describes the parameters of DBMS_LOB.MOVE_TO_DBFS_LINK" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t113">Parameter</th>
<th class="cellalignment4328" id="r1c2-t113">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t113" headers="r1c1-t113">
<p><code dir="ltr">lob_loc</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t113 r1c2-t113">
<p>LOB to be archived</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t113" headers="r1c1-t113">
<p>storage_path</p>
</td>
<td class="cellalignment4329" headers="r3c1-t113 r1c2-t113">
<p>Path where the LOB will be stored</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t113" headers="r1c1-t113">
<p><code dir="ltr">flags</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t113 r1c2-t113">
<p>Either <code dir="ltr">DBFS_LINK_CACHE</code> or <code dir="ltr">DBFS_LINK_NOCACHE</code>. If <code dir="ltr">DBFS_LINK_CACHE</code> is specified, the LOB data continues to be stored in the RDBMS as well as being written to the DBFS store. <code dir="ltr">DBFS_LINK_NOCACHE</code> specifies that the LOB data should be deleted from the <code dir="ltr">RDBMS</code> once written to the DBFS.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5316"></a>Exceptions</p>
<div id="ARPLS66641" class="tblformal">
<p class="titleintable"><a id="sthref5317"></a><a id="sthref5318"></a>Table 88-82 MOVE_TO_DBFS_LINK Procedure Exceptions</p>
<table class="cellalignment4330" title="MOVE_TO_DBFS_LINK Procedure Exceptions " summary="This table describes the Exceptions raised by ARCHIVE_PUT." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t114">Exception</th>
<th class="cellalignment4328" id="r1c2-t114">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t114" headers="r1c1-t114">
<p><code dir="ltr">SECUREFILE_BADLOB</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t114 r1c2-t114">
<p><code dir="ltr">lob_loc</code> is not a <code dir="ltr">SECUREFILE</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5319"></a>Usage Notes</p>
<ul>
<li>
<p>If the LOB is already archived, the procedure silently returns as if the put was successful. In that case, if <code dir="ltr">DBFS_LINK_NOCACHE</code> is specified, or <code dir="ltr">flags</code> is defaulted, the LOB data is removed from the RDBMS.</p>
</li>
<li>
<p>Calling this procedure multiple times on the same LOB with the same flags has no effect.</p>
</li>
<li>
<p>Calling the procedure on a LOB that is already archived causes the LOB to be cached (<code dir="ltr">DBFS_LINK_CACHE</code>) or removed (<code dir="ltr">DBFS_LINK_NOCACHE</code>) according to the flag setting.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66736" class="refsect2"><a id="BABGHBIF"></a>
<h3 class="refsect2"><a id="sthref5320"></a>OPEN Procedures</h3>
<p>This procedure opens a LOB, internal or external, in the indicated mode. Valid modes include read-only, and read/write.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5321"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.OPEN (
   lob_loc   IN OUT NOCOPY BLOB,
   open_mode IN            BINARY_INTEGER);
 
DBMS_LOB.OPEN (
   lob_loc   IN OUT NOCOPY CLOB CHARACTER SET ANY_CS,
   open_mode IN            BINARY_INTEGER);
 
DBMS_LOB.OPEN (
   file_loc  IN OUT NOCOPY BFILE,
   open_mode IN            BINARY_INTEGER := file_readonly);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5322"></a>Parameters</p>
<div id="ARPLS66737" class="tblformal">
<p class="titleintable"><a id="sthref5323"></a><a id="sthref5324"></a>Table 88-83 OPEN Procedure Parameters</p>
<table class="cellalignment4330" title="OPEN Procedure Parameters" summary="This table describes the parameters of the DBMS_LOB.OPEN subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t115">Parameter</th>
<th class="cellalignment4328" id="r1c2-t115">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t115" headers="r1c1-t115">
<p><code dir="ltr">lob_loc</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t115 r1c2-t115">
<p>LOB locator. For more information, see <a href="#i1015792">Operational Notes</a>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t115" headers="r1c1-t115">
<p><code dir="ltr">open_mode</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t115 r1c2-t115">
<p>Mode in which to open.</p>
<p>For <code dir="ltr">BLOB</code> and <code dir="ltr">CLOB</code> types, the mode can be either: <code dir="ltr">LOB_READONLY</code> or <code dir="ltr">LOB_READWRITE</code>.</p>
<p>For <code dir="ltr">BFILE</code> types, the mode must be <code dir="ltr">FILE_READONLY</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5325"></a>Usage Notes</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If the LOB was opened in read-only mode, and if you try to write to the LOB, then an error is returned. <code dir="ltr">BFILE</code> can only be opened with read-only mode.</div>
<p><code dir="ltr">OPEN</code> requires a round-trip to the server for both internal and external LOBs. For internal LOBs, <code dir="ltr">OPEN</code> triggers other code that relies on the <code dir="ltr">OPEN</code> call. For external LOBs (<code dir="ltr">BFILEs</code>), <code dir="ltr">OPEN</code> requires a round-trip because the actual operating system file on the server side is being opened.</p>
<p>It is not mandatory that you wrap all LOB operations inside the Open/Close interfaces. However, if you open a LOB, you must close it before you commit the transaction; an error is produced if you do not. When an internal LOB is closed, it updates the functional and domain indexes on the LOB column.</p>
<p>It is an error to commit the transaction before closing all opened LOBs that were opened by the transaction. When the error is returned, the openness of the open LOBs is discarded, but the transaction is successfully committed. Hence, all the changes made to the LOB and non-LOB data in the transaction are committed, but the domain and function-based indexes are not updated. If this happens, you should rebuild the functional and domain indexes on the LOB column.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB1002" href="../ADLOB/adlob_design.htm#ADLOB1002"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for additional details on usage of this procedure</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66738" class="refsect2"><a id="i999170"></a>
<h3 class="refsect2"><a id="sthref5326"></a>READ Procedures</h3>
<p>This procedure reads a piece of a LOB, and returns the specified amount into the <code dir="ltr">buffer</code> parameter, starting from an absolute offset from the beginning of the LOB.</p>
<p>The number of bytes or characters actually read is returned in the <code dir="ltr">amount</code> parameter. If the input <code dir="ltr">offset</code> points past the End of LOB, then <code dir="ltr">amount</code> is set to 0, and a <code dir="ltr">NO_DATA_FOUND</code> exception is raised.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5327"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.READ (
   lob_loc   IN             BLOB,
   amount    IN OUT  NOCOPY INTEGER,
   offset    IN             INTEGER,
   buffer    OUT            RAW);

DBMS_LOB.READ (
   lob_loc   IN             CLOB CHARACTER SET ANY_CS,
   amount    IN OUT  NOCOPY INTEGER,
   offset    IN             INTEGER,
   buffer    OUT            VARCHAR2 CHARACTER SET lob_loc%CHARSET); 

DBMS_LOB.READ (
   file_loc   IN             BFILE,
   amount    IN OUT   NOCOPY INTEGER,
   offset    IN              INTEGER,
   buffer    OUT             RAW);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5328"></a>Parameters</p>
<div id="ARPLS66739" class="tblformal">
<p class="titleintable"><a id="sthref5329"></a><a id="sthref5330"></a>Table 88-84 READ Procedure Parameters</p>
<table class="cellalignment4330" title="READ Procedure Parameters" summary="This table describes the parameters of the DBMS_LOB.READ subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t118"><span class="bold">Parameter</span></th>
<th class="cellalignment4328" id="r1c2-t118"><span class="bold">Description</span></th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t118" headers="r1c1-t118">
<p><code dir="ltr">lob_loc</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t118 r1c2-t118">
<p>Locator for the LOB to be read. For more information, see <a href="#i1015792">Operational Notes</a>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t118" headers="r1c1-t118">
<p><code dir="ltr">file_loc</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t118 r1c2-t118">
<p>The file locator for the LOB to be examined.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t118" headers="r1c1-t118">
<p><code dir="ltr">amount</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t118 r1c2-t118">
<p>Number of bytes (for <code dir="ltr">BLOBs</code>) or characters (for <code dir="ltr">CLOBs</code>) to read, or number that were read.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t118" headers="r1c1-t118">
<p><code dir="ltr">offset</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t118 r1c2-t118">
<p>Offset in bytes (for <code dir="ltr">BLOBs</code>) or characters (for <code dir="ltr">CLOBs</code>) from the start of the LOB (origin: 1).</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t118" headers="r1c1-t118">
<p><code dir="ltr">buffer</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t118 r1c2-t118">
<p>Output buffer for the read operation.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5331"></a>Exceptions</p>
<p><a href="#BABDIDJC">Table 88-85</a> lists exceptions that apply to any LOB instance. <a href="#BABBGIAH">Table 88-86</a> lists exceptions that apply only to <code dir="ltr">BFILE</code>s.</p>
<div id="ARPLS66740" class="tblformal">
<p class="titleintable"><a id="sthref5332"></a><a id="BABDIDJC"></a>Table 88-85 READ Procedure Exceptions</p>
<table class="cellalignment4330" title="READ Procedure Exceptions " summary="This table describes the general Exceptions raised by READ." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t119">Exception</th>
<th class="cellalignment4328" id="r1c2-t119">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t119" headers="r1c1-t119">
<p><code dir="ltr">VALUE_ERROR</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t119 r1c2-t119">
<p>Any of <code dir="ltr">lob_loc</code>, <code dir="ltr">amount</code>, or <code dir="ltr">offset</code> parameters are <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t119" headers="r1c1-t119">
<p><code dir="ltr">INVALID_ARGVAL</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t119 r1c2-t119">
<p>Either:</p>
<p>- <code dir="ltr">amount</code> &lt; 1</p>
<p>- <code dir="ltr">amount</code> &gt; <code dir="ltr">32767 bytes (or the character equivalent)</code></p>
<p>- <code dir="ltr">offset</code> &lt; 1</p>
<p>- <code dir="ltr">offset</code> &gt; <code dir="ltr">LOBMAXSIZE</code></p>
<p>- <code dir="ltr">amount</code> is greater, in bytes or characters, than the capacity of <code dir="ltr">buffer</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t119" headers="r1c1-t119">
<p><code dir="ltr">NO_DATA_FOUND</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t119 r1c2-t119">
<p>End of the LOB is reached, and there are no more bytes or characters to read from the LOB: <code dir="ltr">amount</code> has a value of 0.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="ARPLS66741" class="tblformal">
<p class="titleintable"><a id="sthref5333"></a><a id="BABBGIAH"></a>Table 88-86 READ Procedure Exceptions for BFILEs</p>
<table class="cellalignment4330" title="READ Procedure Exceptions for BFILEs " summary="This table describes the Exceptions raised by READ specifically for BFILES." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t120">Exception</th>
<th class="cellalignment4328" id="r1c2-t120">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t120" headers="r1c1-t120">
<p><code dir="ltr">UNOPENED_FILE</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t120 r1c2-t120">
<p>File is not opened using the input locator.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t120" headers="r1c1-t120">
<p><code dir="ltr">NOEXIST_DIRECTORY</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t120 r1c2-t120">
<p>Directory does not exist.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t120" headers="r1c1-t120">
<p><code dir="ltr">NOPRIV_DIRECTORY</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t120 r1c2-t120">
<p>You do not have privileges for the directory.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t120" headers="r1c1-t120">
<p><code dir="ltr">INVALID_DIRECTORY</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t120 r1c2-t120">
<p>Directory has been invalidated after the file was opened.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t120" headers="r1c1-t120">
<p><code dir="ltr">INVALID_OPERATION</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t120 r1c2-t120">
<p>File does not exist, or you do not have access privileges on the file.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t120" headers="r1c1-t120">
<p><code dir="ltr">BUFFERING_ENABLED</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t120 r1c2-t120">
<p>Cannot perform operation with LOB buffering enabled if buffering is enabled on the LOB</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5334"></a>Usage Notes</p>
<ul>
<li>
<p>The form of the <code dir="ltr">VARCHAR2</code> buffer must match the form of the <code dir="ltr">CLOB</code> parameter. In other words, if the input LOB parameter is of type <code dir="ltr">NCLOB</code>, then the buffer must contain <code dir="ltr">NCHAR</code> data. Conversely, if the input LOB parameter is of type <code dir="ltr">CLOB</code>, then the buffer must contain <code dir="ltr">CHAR</code> data.</p>
</li>
<li>
<p>When calling <code dir="ltr">DBMS_LOB</code>.<code dir="ltr">READ</code> from the client (for example, in a <code dir="ltr">BEGIN</code>/<code dir="ltr">END</code> block from within SQL*Plus), the returned buffer contains data in the client&#39;s character set. The database converts the LOB value from the server&#39;s character set to the client&#39;s character set before it returns the buffer to the user.</p>
</li>
<li>
<p>READ gets the LOB, if necessary, before the read.</p>
</li>
<li>
<p>If the LOB is a DBFS LINK, data is streamed from DBFS, if possible, otherwise an exception is thrown.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB1018" href="../ADLOB/adlob_lob_ops.htm#ADLOB1018"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for additional details on usage of this procedure</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66642" class="refsect2"><a id="BGBHHHJC"></a>
<h3 class="refsect2"><a id="sthref5335"></a>SET_DBFS_LINK Procedures</h3>
<p>This function links the specified SecureFile to the specified path name. It does not copy the data to the path.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5336"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.SET_DBFS_LINK (
  lob_loc        IN OUT BLOB,
  archive_id     IN     RAW(1024));

DBMS_LOB.SET_DBFS_LINK(
  lob_loc_dst    IN OUT CLOB CHARACTER SET ANY_CS,
  archive_id     IN     RAW(1024));
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5337"></a>Parameters</p>
<div id="ARPLS66643" class="tblformal">
<p class="titleintable"><a id="sthref5338"></a><a id="sthref5339"></a>Table 88-87 SET_DBFS_LINK Procedure Parameters</p>
<table class="cellalignment4330" title="SET_DBFS_LINK Procedure Parameters " summary="This table describes the parameters of DBMS_LOB.SET_DBFS_LINK." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t122">Parameter</th>
<th class="cellalignment4328" id="r1c2-t122">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t122" headers="r1c1-t122">
<p><code dir="ltr">lob_loc</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t122 r1c2-t122">
<p>LOB for which to store the reference value</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t122" headers="r1c1-t122">
<p><code dir="ltr">archive_id</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t122 r1c2-t122">
<p>Archive ID as returned by calling either of the <a href="#BGBIEEBG">GET_DBFS_LINK Functions</a> Functions</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5340"></a>Exceptions</p>
<div id="ARPLS66644" class="tblformal">
<p class="titleintable"><a id="sthref5341"></a><a id="sthref5342"></a>Table 88-88 SET_DBFS_LINK Procedure Exceptions</p>
<table class="cellalignment4330" title="SET_DBFS_LINK Procedure Exceptions " summary="This table describes the Exceptions raised by ARCHIVE_PUT_REFERENCE" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t123">Exception</th>
<th class="cellalignment4328" id="r1c2-t123">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t123" headers="r1c1-t123">
<p><code dir="ltr">SECUREFILE_BADLOB</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t123 r1c2-t123">
<p><code dir="ltr">lob_loc</code> is not a <code dir="ltr">SECUREFILE</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66742" class="refsect2"><a id="BGBBGICA"></a>
<h3 class="refsect2"><a id="sthref5343"></a>SETCONTENTTYPE Procedure</h3>
<p>This procedure sets the content type string for the data in the LOB.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5344"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.SETCONTENTTYPE (
   lob_loc      IN OUT NOCOPY BLOB,
   contenttype  IN            VARCHAR2);

DBMS_LOB.SETCONTENTTYPE (
   lob_loc     IN OUT NOCOPY CLOB CHARACTER SET ANY_CS,
   contenttype IN            VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5345"></a>Parameters</p>
<div id="ARPLS66743" class="tblformal">
<p class="titleintable"><a id="sthref5346"></a><a id="sthref5347"></a>Table 88-89 SETCONTENTTYPE Procedure Parameters</p>
<table class="cellalignment4330" title="SETCONTENTTYPE Procedure Parameters " summary="This table describes the parameters of DBMS_LOB.SETCONTENTTYPE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t124">Parameter</th>
<th class="cellalignment4328" id="r1c2-t124">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t124" headers="r1c1-t124">
<p><code dir="ltr">lob_loc</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t124 r1c2-t124">
<p>LOB to be assigned the content type</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t124" headers="r1c1-t124">
<p><code dir="ltr">contenttype</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t124 r1c2-t124">
<p>String to be assigned</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5348"></a>Exceptions</p>
<div id="ARPLS66744" class="tblformal">
<p class="titleintable"><a id="sthref5349"></a><a id="sthref5350"></a>Table 88-90 SETCONTENTTYPE Procedure Exceptions</p>
<table class="cellalignment4330" title="SETCONTENTTYPE Procedure Exceptions " summary="This table describes the Exceptions raised by ARCHIVE_GET_STATE" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t125">Exception</th>
<th class="cellalignment4328" id="r1c2-t125">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t125" headers="r1c1-t125">
<p><code dir="ltr">SECUREFILE_BADLOB</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t125 r1c2-t125">
<p><code dir="ltr">lob_loc</code> is not a <code dir="ltr">SECUREFILE</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5351"></a>Usage Notes</p>
<p>To clear an existing content type associated with a <code dir="ltr">SECUREFILE</code>, invoke <code dir="ltr">SETCONTENTTYPE</code> with <code dir="ltr">contenttype</code> set to empty string.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66745" class="refsect2"><a id="CHDHDDDD"></a>
<h3 class="refsect2"><a id="sthref5352"></a>SETOPTIONS Procedures</h3>
<p>This procedure enables/disables compression and deduplication on a per-LOB basis, overriding the default LOB column settings.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5353"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.SETOPTIONS (
   lob_loc             IN     BLOB,
   option_types        IN     PLS_INTEGER,
   options             IN     PLS_INTEGER);
 
DBMS_LOB.SETOPTIONS (
  lob_loc             IN     CLOB CHARACTER SET ANY_CS,
  option_types        IN     PLS_INTEGER, 
  options             IN     PLS_INTEGER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5354"></a>Parameters</p>
<div id="ARPLS66746" class="tblformal">
<p class="titleintable"><a id="sthref5355"></a><a id="sthref5356"></a>Table 88-91 SETOPTIONS Procedure Parameter</p>
<table class="cellalignment4330" title="SETOPTIONS Procedure Parameter" summary="This table describes the parameters of DBMS_LOB.SETOPTIONS." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t126"><span class="bold">Parameter</span></th>
<th class="cellalignment4328" id="r1c2-t126"><span class="bold">Description</span></th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t126" headers="r1c1-t126">
<p><code dir="ltr">lob_loc</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t126 r1c2-t126">
<p>Locator for the LOB to be examined. For more information, see <a href="#i1015792">Operational Notes</a>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t126" headers="r1c1-t126">
<p><code dir="ltr">option_type</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t126 r1c2-t126">
<p>See <a href="#CHDCIJJB">DBMS_LOB Constants - Option Types</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t126" headers="r1c1-t126">
<p><code dir="ltr">options</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t126 r1c2-t126">
<p>See <a href="#CHDGHHFE">DBMS_LOB Constants - Option Values</a></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5357"></a>Exceptions</p>
<div id="ARPLS66747" class="tblformal">
<p class="titleintable"><a id="sthref5358"></a><a id="sthref5359"></a>Table 88-92 SETOPTIONS Procedure Exceptions</p>
<table class="cellalignment4330" title="SETOPTIONS Procedure Exceptions " summary="This table describes the Exceptions raised by SETOPTIONS." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t127">Exception</th>
<th class="cellalignment4328" id="r1c2-t127">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t127" headers="r1c1-t127">
<p><code dir="ltr">SECUREFILE_BADLOB</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t127 r1c2-t127">
<p>Unsupported object type for the operation</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t127" headers="r1c1-t127">
<p><code dir="ltr">INVALID_ARGVAL</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t127 r1c2-t127">
<p>A parameter value was invalid</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t127" headers="r1c1-t127">
<p><code dir="ltr">QUERY_WRITE</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t127 r1c2-t127">
<p>Cannot perform operation during a query</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t127" headers="r1c1-t127">
<p><code dir="ltr">BUFFERING_ENABLED</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t127 r1c2-t127">
<p>Cannot perform operation with LOB buffering enabled</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5360"></a>Usage Notes</p>
<ul>
<li>
<p><code dir="ltr">DBMS_LOB.SETOPTIONS</code> cannot be used to enable or disable encryption on individual LOBs.</p>
</li>
<li>
<p>You cannot turn the compression or deduplication features on or off for a SecureFile column if they were not turned when the table was created.</p>
<p>The <a href="#CHDIHDIC">GETOPTIONS Functions</a> and <code dir="ltr">SETOPTIONS</code> Procedures work on individual SecureFiles. You can turn off compression or deduplication on a particular SecureFiles LOB and turn on them on, <span class="italic">if</span> they have already been turned off by <code dir="ltr">SETOPTIONS</code>.</p>
</li>
<li>
<p>This call incurs a round-trip to the server to make the changes persistent.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66748" class="refsect2"><a id="i999349"></a>
<h3 class="refsect2"><a id="sthref5361"></a>SUBSTR Functions</h3>
<p>This function returns <code dir="ltr">amount</code> bytes or characters of a LOB, starting from an absolute <code dir="ltr">offset</code> from the beginning of the LOB.</p>
<p>For fixed-width <code dir="ltr">n</code>-byte <code dir="ltr">CLOBs</code>, if the input amount for <code dir="ltr">SUBSTR</code> is greater than (32767/<code dir="ltr">n</code>), then <code dir="ltr">SUBSTR</code> returns a character buffer of length (32767/<code dir="ltr">n</code>), or the length of the <code dir="ltr">CLOB</code>, whichever is lesser. For CLOBs in a varying-width character set, <code dir="ltr">n</code> is the maximum byte-width used for characters in the CLOB.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5362"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.SUBSTR (
   lob_loc     IN    BLOB,
   amount      IN    INTEGER := 32767,
   offset      IN    INTEGER := 1)
  RETURN RAW;

DBMS_LOB.SUBSTR (
   lob_loc     IN    CLOB   CHARACTER SET ANY_CS,
   amount      IN    INTEGER := 32767,
   offset      IN    INTEGER := 1)
  RETURN VARCHAR2 CHARACTER SET lob_loc%CHARSET;

DBMS_LOB.SUBSTR (
   file_loc     IN    BFILE,
   amount      IN    INTEGER := 32767,
   offset      IN    INTEGER := 1)
  RETURN RAW;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5363"></a>Pragmas</p>
<pre dir="ltr">pragma restrict_references(SUBSTR, WNDS, WNPS, RNDS, RNPS);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5364"></a>Parameters</p>
<div id="ARPLS66749" class="tblformal">
<p class="titleintable"><a id="sthref5365"></a><a id="sthref5366"></a>Table 88-93 SUBSTR Function Parameters</p>
<table class="cellalignment4330" title="SUBSTR Function Parameters " summary="This table describes the parameters of the DBMS_LOB.SUBSTR subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t128"><span class="bold">Parameter</span></th>
<th class="cellalignment4328" id="r1c2-t128"><span class="bold">Description</span></th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t128" headers="r1c1-t128">
<p><code dir="ltr">lob_loc</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t128 r1c2-t128">
<p>Locator for the LOB to be read. For more information, see <a href="#i1015792">Operational Notes</a>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t128" headers="r1c1-t128">
<p><code dir="ltr">file_loc</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t128 r1c2-t128">
<p>The file locator for the LOB to be examined.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t128" headers="r1c1-t128">
<p><code dir="ltr">amount</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t128 r1c2-t128">
<p>Number of bytes (for <code dir="ltr">BLOBs</code>) or characters (for <code dir="ltr">CLOBs</code>) to be read.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t128" headers="r1c1-t128">
<p><code dir="ltr">offset</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t128 r1c2-t128">
<p>Offset in bytes (for <code dir="ltr">BLOBs</code>) or characters (for <code dir="ltr">CLOBs</code>) from the start of the LOB (origin: 1).</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5367"></a>Return Values</p>
<div id="ARPLS66750" class="tblformal">
<p class="titleintable"><a id="sthref5368"></a><a id="sthref5369"></a>Table 88-94 SUBSTR Function Return Values</p>
<table class="cellalignment4330" title="SUBSTR Function Return Values " summary="This table describes Values Returned by READ." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t129">Return</th>
<th class="cellalignment4328" id="r1c2-t129">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t129" headers="r1c1-t129">
<p><code dir="ltr">RAW</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t129 r1c2-t129">
<p>Function overloading that has a <code dir="ltr">BLOB</code> or <code dir="ltr">BFILE</code> in parameter.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t129" headers="r1c1-t129">
<p><code dir="ltr">VARCHAR2</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t129 r1c2-t129">
<p><code dir="ltr">CLOB</code> version.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t129" headers="r1c1-t129">
<p><code dir="ltr">NULL</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t129 r1c2-t129">
<p>Either:</p>
<p>- any input parameter is <code dir="ltr">NULL</code></p>
<p>- <code dir="ltr">amount</code> &lt; 1</p>
<p>- <code dir="ltr">amount</code> &gt; 32767</p>
<p>- <code dir="ltr">offset</code> &lt; 1</p>
<p>- <code dir="ltr">offset</code> &gt; <code dir="ltr">LOBMAXSIZE</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5370"></a>Exceptions</p>
<div id="ARPLS66751" class="tblformal">
<p class="titleintable"><a id="sthref5371"></a><a id="sthref5372"></a>Table 88-95 SUBSTR Function Exceptions for BFILE operations</p>
<table class="cellalignment4330" title="SUBSTR Function Exceptions for BFILE operations " summary="This table describes the Exceptions raised by SUBSTR." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t130">Exception</th>
<th class="cellalignment4328" id="r1c2-t130">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t130" headers="r1c1-t130">
<p><code dir="ltr">UNOPENED_FILE</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t130 r1c2-t130">
<p>File is not opened using the input locator.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t130" headers="r1c1-t130">
<p><code dir="ltr">NOEXIST_DIRECTORY</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t130 r1c2-t130">
<p>Directory does not exist.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t130" headers="r1c1-t130">
<p><code dir="ltr">NOPRIV_DIRECTORY</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t130 r1c2-t130">
<p>You do not have privileges for the directory.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t130" headers="r1c1-t130">
<p><code dir="ltr">INVALID_DIRECTORY</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t130 r1c2-t130">
<p>Directory has been invalidated after the file was opened.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t130" headers="r1c1-t130">
<p><code dir="ltr">INVALID_OPERATION</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t130 r1c2-t130">
<p>File does not exist, or you do not have access privileges on the file.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t130" headers="r1c1-t130">
<p><code dir="ltr">BUFFERING_ENABLED</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t130 r1c2-t130">
<p>Cannot perform operation with LOB buffering enabled if buffering is enabled on the LOB</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5373"></a>Usage Notes</p>
<ul>
<li>
<p>The form of the <code dir="ltr">VARCHAR2</code> buffer must match the form of the <code dir="ltr">CLOB</code> parameter. In other words, if the input LOB parameter is of type <code dir="ltr">NCLOB</code>, then the buffer must contain <code dir="ltr">NCHAR</code> data. Conversely, if the input LOB parameter is of type <code dir="ltr">CLOB</code>, then the buffer must contain <code dir="ltr">CHAR</code> data.</p>
</li>
<li>
<p>When calling <code dir="ltr">DBMS_LOB</code>.<code dir="ltr">SUBSTR</code> from the client (for example, in a <code dir="ltr">BEGIN</code>/<code dir="ltr">END</code> block from within SQL*Plus), the returned buffer contains data in the client&#39;s character set. The database converts the LOB value from the server&#39;s character set to the client&#39;s character set before it returns the buffer to the user.</p>
</li>
<li>
<p><code dir="ltr">DBMS_LOB.SUBSTR</code> will return 8191 or more characters based on the characters stored in the LOBs. If all characters are not returned as a consequence of the character byte size exceeding the available buffer, the user should either call <code dir="ltr">DBMS_LOB.SUBSTR</code> with a new offset to read the remaining characters, or call the subprogram on loop until all the data is extracted.</p>
</li>
<li>
<p><code dir="ltr">SUBSTR</code> gets the LOB, if necessary, before read.</p>
</li>
<li>
<p>If the LOB is a DBFS Link, the data is streamed from DBFS, if possible, otherwise, an exception is thrown.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i998546">&#34;INSTR Functions&#34;</a></p>
</li>
<li>
<p><a href="#i999170">&#34;READ Procedures&#34;</a></p>
</li>
<li>
<p><a class="olink ADLOB1019" href="../ADLOB/adlob_lob_ops.htm#ADLOB1019"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for additional details on usage of this procedure</p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66752" class="refsect2"><a id="i999503"></a>
<h3 class="refsect2"><a id="sthref5374"></a>TRIM Procedures</h3>
<p>This procedure trims the value of the internal LOB to the length you specify in the <code dir="ltr">newlen</code> parameter. Specify the length in bytes for <code dir="ltr">BLOBs</code>, and specify the length in characters for <code dir="ltr">CLOBs</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code dir="ltr">TRIM</code> procedure decreases the length of the LOB to the value specified in the <code dir="ltr">newlen</code> parameter.</div>
<p>If you attempt to <code dir="ltr">TRIM</code> an empty LOB, then nothing occurs, and <code dir="ltr">TRIM</code> returns no error. If the new length that you specify in <code dir="ltr">newlen</code> is greater than the size of the LOB, then an exception is raised.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5375"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.TRIM (
   lob_loc        IN OUT  NOCOPY BLOB,
   newlen         IN             INTEGER);

DBMS_LOB.TRIM (
   lob_loc        IN OUT  NOCOPY CLOB CHARACTER SET ANY_CS,
   newlen         IN             INTEGER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5376"></a>Parameters</p>
<div id="ARPLS66753" class="tblformal">
<p class="titleintable"><a id="sthref5377"></a><a id="sthref5378"></a>Table 88-96 TRIM Procedure Parameters</p>
<table class="cellalignment4330" title="TRIM Procedure Parameters" summary="This table describes the parameters of the DBMS_LOB.RIM subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t133">Parameter</th>
<th class="cellalignment4328" id="r1c2-t133">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t133" headers="r1c1-t133">
<p><code dir="ltr">lob_loc</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t133 r1c2-t133">
<p>Locator for the internal LOB whose length is to be trimmed. For more information, see <a href="#i1015792">Operational Notes</a>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t133" headers="r1c1-t133">
<p><code dir="ltr">newlen</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t133 r1c2-t133">
<p>New, trimmed length of the LOB value in bytes for <code dir="ltr">BLOBs</code> or characters for <code dir="ltr">CLOBs</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5379"></a>Exceptions</p>
<div id="ARPLS66754" class="tblformal">
<p class="titleintable"><a id="sthref5380"></a><a id="sthref5381"></a>Table 88-97 TRIM Procedure Exceptions</p>
<table class="cellalignment4330" title="TRIM Procedure Exceptions " summary="This table describes the Exceptions raised by RIM." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t134">Exception</th>
<th class="cellalignment4328" id="r1c2-t134">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t134" headers="r1c1-t134">
<p><code dir="ltr">VALUE_ERROR</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t134 r1c2-t134">
<p><code dir="ltr">lob_loc</code> is <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t134" headers="r1c1-t134">
<p><code dir="ltr">INVALID_ARGVAL</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t134 r1c2-t134">
<p>Either:</p>
<p>- <code dir="ltr">new_len</code> &lt; 0</p>
<p>- <code dir="ltr">new_len</code> &gt; <code dir="ltr">LOBMAXSIZE</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t134" headers="r1c1-t134">
<p><code dir="ltr">QUERY_WRITE</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t134 r1c2-t134">
<p>Cannot perform a LOB write inside a query or PDML parallel execution server</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t134" headers="r1c1-t134">
<p><code dir="ltr">BUFFERING_ENABLED</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t134 r1c2-t134">
<p>Cannot perform operation with LOB buffering enabled if buffering is enabled on the LOB</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5382"></a>Usage Notes</p>
<ul>
<li>
<p>It is not mandatory that you wrap the LOB operation inside the Open/Close interfaces. If you did not open the LOB before performing the operation, the functional and domain indexes on the LOB column are updated during the call. However, if you opened the LOB before performing the operation, you must close it before you commit the transaction. When an internal LOB is closed, it updates the functional and domain indexes on the <code dir="ltr">LOB</code> column.</p>
</li>
<li>
<p>If you do not wrap the LOB operation inside the Open/Close API, the functional and domain indexes are updated each time you write to the LOB. This can adversely affect performance. Therefore, it is recommended that you enclose write operations to the LOB within the <code dir="ltr">OPEN</code> or <code dir="ltr">CLOSE</code> statement.</p>
</li>
<li>
<p><code dir="ltr">TRIM</code> gets the LOB, if necessary, before altering the length of the LOB, unless the new length specified is &#39;0&#39;</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i997838">&#34;ERASE Procedures&#34;</a></p>
</li>
<li>
<p><a href="#i999705">&#34;WRITEAPPEND Procedures&#34;</a></p>
</li>
<li>
<p><a class="olink ADLOB1020" href="../ADLOB/adlob_lob_ops.htm#ADLOB1020"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for additional details on usage of this procedure</p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66755" class="refsect2"><a id="i999593"></a>
<h3 class="refsect2"><a id="sthref5383"></a>WRITE Procedures</h3>
<p>This procedure writes a specified amount of data into an internal LOB, starting from an absolute offset from the beginning of the LOB. The data is written from the <code dir="ltr">buffer</code> parameter.</p>
<p><code dir="ltr">WRITE</code> replaces (overwrites) any data that already exists in the LOB at the offset, for the length you specify.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5384"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.WRITE (
   lob_loc  IN OUT NOCOPY  BLOB,
   amount   IN             INTEGER,
   offset   IN             INTEGER,
   buffer   IN             RAW);

DBMS_LOB.WRITE (
   lob_loc  IN OUT  NOCOPY CLOB   CHARACTER SET ANY_CS,
   amount   IN             INTEGER,
   offset   IN             INTEGER,
   buffer   IN             VARCHAR2 CHARACTER SET lob_loc%CHARSET); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5385"></a>Parameters</p>
<div id="ARPLS66756" class="tblformal">
<p class="titleintable"><a id="sthref5386"></a><a id="sthref5387"></a>Table 88-98 WRITE Procedure Parameters</p>
<table class="cellalignment4330" title="WRITE Procedure Parameters" summary="This table describes the parameters of the DBMS_LOB.WRITE subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t136">Parameter</th>
<th class="cellalignment4328" id="r1c2-t136">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t136" headers="r1c1-t136">
<p><code dir="ltr">lob_loc</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t136 r1c2-t136">
<p>Locator for the internal LOB to be written to. For more information, see <a href="#i1015792">Operational Notes</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t136" headers="r1c1-t136">
<p><code dir="ltr">amount</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t136 r1c2-t136">
<p>Number of bytes (for <code dir="ltr">BLOBs</code>) or characters (for <code dir="ltr">CLOBs</code>) to write</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t136" headers="r1c1-t136">
<p><code dir="ltr">offset</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t136 r1c2-t136">
<p>Offset in bytes (for <code dir="ltr">BLOBs</code>) or characters (for <code dir="ltr">CLOBs</code>) from the start of the LOB (origin: 1) for the write operation.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t136" headers="r1c1-t136">
<p><code dir="ltr">buffer</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t136 r1c2-t136">
<p>Input buffer for the write</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5388"></a>Exceptions</p>
<div id="ARPLS66757" class="tblformal">
<p class="titleintable"><a id="sthref5389"></a><a id="sthref5390"></a>Table 88-99 WRITE Procedure Exceptions</p>
<table class="cellalignment4330" title="WRITE Procedure Exceptions " summary="This table describes the Exceptions raised by WRITE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t137">Exception</th>
<th class="cellalignment4328" id="r1c2-t137">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t137" headers="r1c1-t137">
<p><code dir="ltr">VALUE_ERROR</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t137 r1c2-t137">
<p>Any of <code dir="ltr">lob_loc</code>, <code dir="ltr">amount</code>, or <code dir="ltr">offset</code> parameters are <code dir="ltr">NULL</code>, out of range, or <code dir="ltr">INVALID</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t137" headers="r1c1-t137">
<p><code dir="ltr">INVALID_ARGVAL</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t137 r1c2-t137">
<p>Either:</p>
<p>- <code dir="ltr">amount</code> &lt; 1</p>
<p>- <code dir="ltr">amount</code> &gt; <code dir="ltr">32767 bytes (or the character equivalent)</code></p>
<p>- <code dir="ltr">offset</code> &lt; 1</p>
<p>- <code dir="ltr">offset</code> &gt; <code dir="ltr">LOBMAXSIZE</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t137" headers="r1c1-t137">
<p><code dir="ltr">QUERY_WRITE</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t137 r1c2-t137">
<p>Cannot perform a LOB write inside a query or PDML parallel execution server</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t137" headers="r1c1-t137">
<p><code dir="ltr">BUFFERING_ENABLED</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t137 r1c2-t137">
<p>Cannot perform operation with LOB buffering enabled if buffering is enabled on the LOB</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t137" headers="r1c1-t137">
<p><code dir="ltr">SECUREFILE_OUTOFBOUNDS</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t137 r1c2-t137">
<p>Attempted to perform a write operation past the end of a LOB having <code dir="ltr">FRAGMENT_*</code> on it</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5391"></a>Usage Notes</p>
<ul>
<li>
<p>There is an error if the input amount is more than the data in the buffer. If the input amount is less than the data in the buffer, then only amount bytes or characters from the buffer is written to the LOB. If the offset you specify is beyond the end of the data currently in the LOB, then zero-byte fillers or spaces are inserted in the <code dir="ltr">BLOB</code> or <code dir="ltr">CLOB</code> respectively.</p>
</li>
<li>
<p>The form of the <code dir="ltr">VARCHAR2</code> buffer must match the form of the <code dir="ltr">CLOB</code> parameter. In other words, if the input LOB parameter is of type <code dir="ltr">NCLOB</code>, then the buffer must contain <code dir="ltr">NCHAR</code> data. Conversely, if the input LOB parameter is of type <code dir="ltr">CLOB</code>, then the buffer must contain <code dir="ltr">CHAR</code> data.</p>
</li>
<li>
<p>When calling <code dir="ltr">DBMS_LOB</code>.<code dir="ltr">WRITE</code> from the client (for example, in a <code dir="ltr">BEGIN</code>/<code dir="ltr">END</code> block from within SQL*Plus), the buffer must contain data in the client&#39;s character set. The database converts the client-side buffer to the server&#39;s character set before it writes the buffer data to the LOB.</p>
</li>
<li>
<p>It is not mandatory that you wrap the LOB operation inside the Open/Close interfaces. If you did not open the LOB before performing the operation, the functional and domain indexes on the LOB column are updated during the call. However, if you opened the LOB before performing the operation, you must close it before you commit the transaction. When an internal LOB is closed, it updates the functional and domain indexes on the LOB column.</p>
</li>
<li>
<p>If you do not wrap the LOB operation inside the Open/Close API, the functional and domain indexes are updated each time you write to the LOB. This can adversely affect performance. Therefore, it is recommended that you enclose write operations to the LOB within the <code dir="ltr">OPEN</code> or <code dir="ltr">CLOSE</code> statement.</p>
</li>
<li>
<p><code dir="ltr">WRITE</code> gets the LOB, if necessary, before writing the LOB, unless the write is specified to overwrite the entire LOB.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i997432">&#34;APPEND Procedures&#34;</a></p>
</li>
<li>
<p><a href="#i997674">&#34;COPY Procedures&#34;</a></p>
</li>
<li>
<p><a class="olink ADLOB1013" href="../ADLOB/adlob_lob_ops.htm#ADLOB1013"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for additional details on usage of this procedure</p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66758" class="refsect2"><a id="i999705"></a>
<h3 class="refsect2"><a id="sthref5392"></a>WRITEAPPEND Procedures</h3>
<p>This procedure writes a specified amount of data to the end of an internal LOB. The data is written from the <code dir="ltr">buffer</code> parameter.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5393"></a>Syntax</p>
<pre dir="ltr">DBMS_LOB.WRITEAPPEND (
   lob_loc IN OUT NOCOPY BLOB, 
   amount  IN            INTEGER, 
   buffer  IN            RAW); 

DBMS_LOB.WRITEAPPEND (
   lob_loc IN OUT NOCOPY CLOB CHARACTER SET ANY_CS, 
   amount  IN            INTEGER, 
   buffer  IN            VARCHAR2 CHARACTER SET lob_loc%CHARSET); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5394"></a>Parameters</p>
<div id="ARPLS66759" class="tblformal">
<p class="titleintable"><a id="sthref5395"></a><a id="sthref5396"></a>Table 88-100 WRITEAPPEND Procedure Parameters</p>
<table class="cellalignment4330" title="WRITEAPPEND Procedure Parameters" summary="This table describes the parameters of the DBMS_LOB.WRITEAPPEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t139">Parameter</th>
<th class="cellalignment4328" id="r1c2-t139">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t139" headers="r1c1-t139">
<p><code dir="ltr">lob_loc</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t139 r1c2-t139">
<p>Locator for the internal LOB to be written to. For more information, see <a href="#i1015792">Operational Notes</a></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t139" headers="r1c1-t139">
<p><code dir="ltr">amount</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t139 r1c2-t139">
<p>Number of bytes (for <code dir="ltr">BLOBs</code>) or characters (for <code dir="ltr">CLOBs</code>) to write</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t139" headers="r1c1-t139">
<p><code dir="ltr">buffer</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t139 r1c2-t139">
<p>Input buffer for the write</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5397"></a>Usage Notes</p>
<p>There is an error if the input amount is more than the data in the buffer. If the input amount is less than the data in the buffer, then only amount bytes or characters from the buffer are written to the end of the LOB.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5398"></a>Exceptions</p>
<div id="ARPLS66760" class="tblformal">
<p class="titleintable"><a id="sthref5399"></a><a id="sthref5400"></a>Table 88-101 WRITEAPPEND Procedure Exceptions</p>
<table class="cellalignment4330" title="WRITEAPPEND Procedure Exceptions " summary="This table describes the Exceptions raised by WRITEAPPEND." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t140">Exception</th>
<th class="cellalignment4328" id="r1c2-t140">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t140" headers="r1c1-t140">
<p><code dir="ltr">VALUE_ERROR</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t140 r1c2-t140">
<p>Any of <code dir="ltr">lob_loc</code>, <code dir="ltr">amount</code>, or <code dir="ltr">offset</code> parameters are <code dir="ltr">NULL</code>, out of range, or <code dir="ltr">INVALID</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t140" headers="r1c1-t140">
<p><code dir="ltr">INVALID_ARGVAL</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t140 r1c2-t140">
<p>Either:</p>
<p>- <code dir="ltr">amount</code> &lt; 1</p>
<p>- <code dir="ltr">amount</code> &gt; <code dir="ltr">32767 bytes (or the character equivalent)</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t140" headers="r1c1-t140">
<p><code dir="ltr">QUERY_WRITE</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t140 r1c2-t140">
<p>Cannot perform a LOB write inside a query or PDML parallel execution server</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t140" headers="r1c1-t140">
<p><code dir="ltr">BUFFERING_ENABLED</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t140 r1c2-t140">
<p>Cannot perform operation with LOB buffering enabled if buffering is enabled on the LOB</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5401"></a>Usage Notes</p>
<ul>
<li>
<p>The form of the <code dir="ltr">VARCHAR2</code> buffer must match the form of the <code dir="ltr">CLOB</code> parameter. In other words, if the input LOB parameter is of type <code dir="ltr">NCLOB</code>, then the buffer must contain <code dir="ltr">NCHAR</code> data. Conversely, if the input LOB parameter is of type <code dir="ltr">CLOB</code>, then the buffer must contain <code dir="ltr">CHAR</code> data.</p>
</li>
<li>
<p>When calling <code dir="ltr">DBMS_LOB</code>.<code dir="ltr">WRITEAPPEND</code> from the client (for example, in a <code dir="ltr">BEGIN</code>/<code dir="ltr">END</code> block from within SQL*Plus), the buffer must contain data in the client&#39;s character set. The database converts the client-side buffer to the server&#39;s character set before it writes the buffer data to the LOB.</p>
</li>
<li>
<p>It is not mandatory that you wrap the LOB operation inside the Open/Close interfaces. If you did not open the LOB before performing the operation, the functional and domain indexes on the LOB column are updated during the call. However, if you opened the LOB before performing the operation, you must close it before you commit the transaction. When an internal LOB is closed, it updates the functional and domain indexes on the LOB column.</p>
</li>
<li>
<p>If you do not wrap the LOB operation inside the Open/Close API, the functional and domain indexes are updated each time you write to the LOB. This can adversely affect performance. Therefore, it is recommended that you enclose write operations to the LOB within the <code dir="ltr">OPEN</code> or <code dir="ltr">CLOSE</code> statement.</p>
</li>
<li>
<p><code dir="ltr">WRITEAPPEND</code> gets the LOB, if necessary, before appending to the LOB.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i997432">&#34;APPEND Procedures&#34;</a></p>
</li>
<li>
<p><a href="#i997674">&#34;COPY Procedures&#34;</a></p>
</li>
<li>
<p><a href="#i999593">&#34;WRITE Procedures&#34;</a></p>
</li>
<li>
<p><a class="olink ADLOB1021" href="../ADLOB/adlob_lob_ops.htm#ADLOB1021"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for additional details on usage of this procedure</p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4320">
<tr>
<td class="cellalignment4329">
<table class="cellalignment4325">
<tr>
<td class="cellalignment4324"><a href="d_libcac.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4324"><a href="d_lock.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4332">
<table class="cellalignment4323">
<tr>
<td class="cellalignment4324"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4324"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4324"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4324"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4324"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4324"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>