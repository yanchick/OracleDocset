<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-2349"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/DBMS_SPM"></a><title>DBMS_SPM</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1086"/>
<meta name="dcterms.created" content="2016-09-02T5:36:35Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database PL/SQL Packages and Types Reference"/>
<meta name="dcterms.identifier" content="E41829-07"/>
<meta name="dcterms.isVersionOf" content="ARPLS"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="d_spd.htm" title="Previous" type="text/html"/>
<link rel="Next" href="d_sql.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41829-07.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">152/290</span> <!-- End Header -->
<div id="ARPLS150" class="chapter"><a id="CACHJJJA"></a>
<h1 class="chapter"><span class="secnum">148</span> DBMS_SPM</h1>
<p>The <a id="sthref9234"></a><code dir="ltr">DBMS_SPM</code> package supports the SQL plan management feature by providing an interface for the DBA or other user to perform controlled manipulation of plan history and SQL plan baselines maintained for various SQL statements.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
For more information about <a class="olink TGSQL615" href="../TGSQL/tgsql_spm.htm#TGSQL615">&#34;Using SQL Plan Management&#34;</a> in the <span class="italic">Oracle Database SQL Tuning Guide</span></div>
<p>This chapter contains the following topics:</p>
<ul>
<li>
<p><a href="#CACBGEII">Using DBMS_SPM</a></p>
<ul>
<li>
<p>Overview</p>
</li>
<li>
<p>Security Model</p>
</li>
<li>
<p>Constants</p>
</li>
<li>
<p>Examples</p>
</li>
</ul>
</li>
<li>
<p><a href="#CACEEADG">Data Structures</a></p>
</li>
<li>
<p><a href="#CACCCGCB">Summary of DBMS_SPM Subprograms</a></p>
</li>
</ul>
<div class="refentry"><a id="CACBGEII"></a>
<div id="ARPLS68152" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">Using DBMS_SPM</h2>
<ul>
<li>
<p><a href="#CACHICJD">Overview</a></p>
</li>
<li>
<p><a href="#CACDGJFE">Security Model</a></p>
</li>
<li>
<p><a href="#CACFDHHJ">Constants</a></p>
</li>
<li>
<p><a href="#CACCHBHB">Examples</a></p>
</li>
</ul>
<div id="ARPLS72671" class="refsect2"><a id="CACHICJD"></a>
<h3 class="refsect2">Overview</h3>
<p>The <code dir="ltr">DBMS_SPM</code> package allows the user to manage SQL execution plans using SQL plan management. SQL plan management prevents performance regressions resulting from sudden changes to the execution plan of a SQL statement by recording and evaluating the execution plans of SQL statements over time, and builds SQL plan baselines composed of a set of existing plans known to be efficient. The SQL plan baselines are then used to preserve performance of corresponding SQL statements, regardless of changes occurring in the system. Common usage scenarios where SQL plan management can improve or preserve SQL performance include:</p>
<ul>
<li>
<p>A database upgrade that installs a new optimizer version usually results in plan changes for a small percentage of SQL statements, with most of the plan changes resulting in either no performance change or improvement. However, certain plan changes may cause performance regressions. The use of SQL plan baselines significantly minimizes potential performance regressions resulting from a database upgrade.</p>
</li>
<li>
<p>Ongoing system and data changes can impact plans for some SQL statements, potentially causing performance regressions. The use of SQL plan baselines helps to minimize performance regressions and stabilize SQL performance.</p>
</li>
<li>
<p>Deployment of new application modules means introducing new SQL statements into the system. The application software may use appropriate SQL execution plans developed under a standard test configuration for the new SQL statements. If the system production configuration differs significantly from the test configuration, SQL plan baselines can be evolved over time to produce better performance.</p>
</li>
</ul>
</div>
<!-- class="refsect2" -->
<div id="ARPLS68153" class="refsect2"><a id="CACDGJFE"></a>
<h3 class="refsect2">Security Model</h3>
<p>The package is owned by <code dir="ltr">SYS</code>. The <code dir="ltr">EXECUTE</code> package privilege is required to execute its procedures. Any user granted the <code dir="ltr">ADMINISTER</code> <code dir="ltr">SQL</code> <code dir="ltr">MANAGEMENT</code> <code dir="ltr">OBJECT</code> privilege is able to execute the <code dir="ltr">DBMS_SPM</code> package.</p>
</div>
<!-- class="refsect2" -->
<div id="ARPLS72667" class="refsect2"><a id="CACFDHHJ"></a>
<h3 class="refsect2">Constants</h3>
<p>The <code dir="ltr">DBMS_SPM</code> package uses the constants shown in <a href="#CACDCCDI">Table 148-1, &#34;DBMS_SPM Constants&#34;</a>. These constants are defined as standard input for the <code dir="ltr">time_limit</code> parameter of the <a href="#CACEBBEI">EVOLVE_SQL_PLAN_BASELINE Function</a>.</p>
<div id="ARPLS72668" class="tblformal">
<p class="titleintable"><a id="sthref9235"></a><a id="CACDCCDI"></a>Table 148-1 DBMS_SPM Constants</p>
<table class="cellalignment4330" title="DBMS_SPM Constants" summary="This table describes DBMS_AM Constants - Chunk Status Value" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t3">Constant</th>
<th class="cellalignment4328" id="r1c2-t3">Type</th>
<th class="cellalignment4328" id="r1c3-t3">Value</th>
<th class="cellalignment4328" id="r1c4-t3">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t3" headers="r1c1-t3">
<p><code dir="ltr">AUTO_LIMIT</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t3 r1c2-t3">
<p><code dir="ltr">INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t3 r1c3-t3">
<p><code dir="ltr">2147483647</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t3 r1c4-t3">
<p>Oracle determines the appropriate time spent by the <a href="#CACEBBEI">EVOLVE_SQL_PLAN_BASELINE Function</a>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t3" headers="r1c1-t3">
<p><code dir="ltr">NO_LIMIT</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t3 r1c2-t3">
<p><code dir="ltr">INTEGER</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t3 r1c3-t3">
<p><code dir="ltr">2147483647 -1</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t3 r1c4-t3">
<p>There is no limit to the time spent by the <a href="#CACEBBEI">EVOLVE_SQL_PLAN_BASELINE Function</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72970" class="refsect2"><a id="CACCHBHB"></a>
<h3 class="refsect2">Examples</h3>
<p>Detailed examples are located under the following topics:</p>
<ul>
<li>
<p><a class="olink TGSQL665" href="../TGSQL/tgsql_mig.htm#TGSQL665">Migrating Stored Outlines to SQL Plan Baselines</a></p>
</li>
<li>
<p><a class="olink TGSQL665" href="../TGSQL/tgsql_mig.htm#TGSQL665">Migrating Outlines to Utilize SQL Plan Management Features</a></p>
</li>
<li>
<p><a class="olink TGSQL679" href="../TGSQL/tgsql_mig.htm#TGSQL679">Migrating Outlines to Preserve Stored Outline Behavior</a></p>
</li>
<li>
<p><a class="olink TGSQL680" href="../TGSQL/tgsql_mig.htm#TGSQL680">Performing Follow-Up Tasks After Stored Outline Migratio</a>n</p>
</li>
</ul>
</div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CACEEADG"></a>
<div id="ARPLS72669" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">Data Structures</h2>
<p>The <code dir="ltr">DBMS_SPM</code> package defines a <code dir="ltr">TABLE</code> type.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9236"></a>Table Types</p>
<ul>
<li>
<p><a href="#CACCHEDI">NAMELIST Table Type</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div id="ARPLS72670" class="refsect2"><a id="CACCHEDI"></a>
<h3 class="refsect2"><a id="sthref9237"></a>NAMELIST Table Type</h3>
<p>This type allows for a list of names as an input parameter.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9238"></a>Syntax</p>
<pre dir="ltr">TYPE  name_list  IS TABLE OF VARCHAR2(30);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" -->
<div class="refentry"><a id="CACCCGCB"></a>
<div id="ARPLS68154" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">Summary of DBMS_SPM Subprograms</h2>
<p>This table list the package subprograms in alphabetical order.</p>
<div id="ARPLS68155" class="tblformal">
<p class="titleintable"><a id="sthref9239"></a><a id="sthref9240"></a>Table 148-2 DBMS_SPM Package Subprograms</p>
<table class="cellalignment4330" title="DBMS_SPM Package Subprograms" summary="This table lists the DBMS_WORKLOAD_CAPTURE subprograms in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t4">Subprogram</th>
<th class="cellalignment4328" id="r1c2-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t4" headers="r1c1-t4">
<p><a href="#CACDEIBC">ACCEPT_SQL_PLAN_BASELINE Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r2c1-t4 r1c2-t4">
<p>Accepts a plan based on the recommendation of an evolve task</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t4" headers="r1c1-t4">
<p><a href="#CACJJFDB">ALTER_SQL_PLAN_BASELINE Function</a></p>
</td>
<td class="cellalignment4329" headers="r3c1-t4 r1c2-t4">
<p>Changes an attribute of a single plan or all plans associated with a SQL statement using the attribute name/value format</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t4" headers="r1c1-t4">
<p><a href="#CACCCJDF">CANCEL_EVOLVE_TASK Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r4c1-t4 r1c2-t4">
<p>Cancels a currently executing evolve task</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t4" headers="r1c1-t4">
<p><a href="#CACHAGGA">CONFIGURE Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r5c1-t4 r1c2-t4">
<p>Sets configuration options for SQL management base, in parameter/value format</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t4" headers="r1c1-t4">
<p><a href="#CACBHAHJ">CREATE_EVOLVE_TASK Function</a></p>
</td>
<td class="cellalignment4329" headers="r6c1-t4 r1c2-t4">
<p>Creates an advisor task and sets its parameters</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t4" headers="r1c1-t4">
<p><a href="#CACBHIHE">CREATE_STGTAB_BASELINE Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r7c1-t4 r1c2-t4">
<p>Creates a staging table that used for transporting SQL plan baselines from one system to another</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t4" headers="r1c1-t4">
<p><a href="#CACDAICC">DROP_EVOLVE_TASK Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r8c1-t4 r1c2-t4">
<p>Drops an evolved task</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t4" headers="r1c1-t4">
<p><a href="#CACGAHJF">DROP_SQL_PLAN_BASELINE Function</a></p>
</td>
<td class="cellalignment4329" headers="r9c1-t4 r1c2-t4">
<p>Drops a single plan, or all plans associated with a SQL statement</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t4" headers="r1c1-t4">
<p><a href="#CACEBBEI">EVOLVE_SQL_PLAN_BASELINE Function</a></p>
</td>
<td class="cellalignment4329" headers="r10c1-t4 r1c2-t4">
<p>Evolves SQL plan baselines associated with one or more SQL statements</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t4" headers="r1c1-t4">
<p><a href="#CACBAAHG">EXECUTE_EVOLVE_TASK Function</a></p>
</td>
<td class="cellalignment4329" headers="r11c1-t4 r1c2-t4">
<p>Executes a previously created evolve task</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t4" headers="r1c1-t4">
<p><a href="#CACGEEDF">IMPLEMENT_EVOLVE_TASK Function</a></p>
</td>
<td class="cellalignment4329" headers="r12c1-t4 r1c2-t4">
<p>Implements a plan based on the recommendation of an evolve task</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t4" headers="r1c1-t4">
<p><a href="#CACDIEEJ">INTERRUPT_EVOLVE_TASK Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r13c1-t4 r1c2-t4">
<p>Interrupts a currently executing evolve task</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t4" headers="r1c1-t4">
<p><a href="#CACBFHHJ">LOAD_PLANS_FROM_CURSOR_CACHE Functions</a></p>
</td>
<td class="cellalignment4329" headers="r14c1-t4 r1c2-t4">
<p>Loads one or more plans present in the cursor cache for a SQL statement</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r15c1-t4" headers="r1c1-t4">
<p><a href="#CACBCAGD">LOAD_PLANS_FROM_SQLSET Function</a></p>
</td>
<td class="cellalignment4329" headers="r15c1-t4 r1c2-t4">
<p>Loads plans stored in a SQL tuning set (STS) into SQL plan baselines</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r16c1-t4" headers="r1c1-t4">
<p><a href="#CACCGDBG">MIGRATE_STORED_OUTLINE Functions</a></p>
</td>
<td class="cellalignment4329" headers="r16c1-t4 r1c2-t4">
<p>Migrates existing stored outlines to SQL plan baselines</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r17c1-t4" headers="r1c1-t4">
<p><a href="#CACEGFAI">PACK_STGTAB_BASELINE Function</a></p>
</td>
<td class="cellalignment4329" headers="r17c1-t4 r1c2-t4">
<p>Packs (exports) SQL plan baselines from SQL management base into a staging table</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r18c1-t4" headers="r1c1-t4">
<p><a href="#CACBGCGF">RESET_EVOLVE_TASK Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r18c1-t4 r1c2-t4">
<p>Resets an evolve task to its initial state</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r19c1-t4" headers="r1c1-t4">
<p><a href="#CACFICCF">RESUME_EVOLVE_TASK Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r19c1-t4 r1c2-t4">
<p>Resumes a previously interrupted task</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r20c1-t4" headers="r1c1-t4">
<p><a href="#CACEEIDJ">REPORT_AUTO_EVOLVE_TASK Function</a></p>
</td>
<td class="cellalignment4329" headers="r20c1-t4 r1c2-t4">
<p>Displays the results of an execution of an automatic evolve task.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r21c1-t4" headers="r1c1-t4">
<p><a href="#CACCIGBG">REPORT_EVOLVE_TASK Function</a></p>
</td>
<td class="cellalignment4329" headers="r21c1-t4 r1c2-t4">
<p>Displays the results of an evolved task</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r22c1-t4" headers="r1c1-t4">
<p><a href="#CACECGEG">SET_EVOLVE_TASK_PARAMETER Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r22c1-t4 r1c2-t4">
<p>Sets a parameter of an evolve task</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r23c1-t4" headers="r1c1-t4">
<p><a href="#CACHBGBD">UNPACK_STGTAB_BASELINE Function</a></p>
</td>
<td class="cellalignment4329" headers="r23c1-t4 r1c2-t4">
<p>Unpacks (imports) SQL plan baselines from a staging table into SQL management base</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="ARPLS73867" class="refsect2"><a id="CACDEIBC"></a>
<h3 class="refsect2"><a id="sthref9241"></a>ACCEPT_SQL_PLAN_BASELINE Procedure</h3>
<p>The procedure accepts a plan based on the recommendation of an evolve task.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9242"></a>Syntax</p>
<pre dir="ltr">DBMS_SPM.ACCEPT_SQL_PLAN_BASELINE  (
   task_name       IN  VARCHAR2,
   object_id       IN  NUMBER    := NULL,
   task_owner      IN  VARCHAR2  := NULL,
   force           IN  BOOLEAN   := FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9243"></a>Parameters</p>
<div id="ARPLS73868" class="tblformal">
<p class="titleintable"><a id="sthref9244"></a><a id="sthref9245"></a>Table 148-3 ACCEPT_SQL_PLAN_BASELINE Procedure Parameters</p>
<table class="cellalignment4330" title="ACCEPT_SQL_PLAN_BASELINE Procedure Parameters" summary="This table describes the parameters of DBMS_SPM.REPORT_AUTO_EVOLVE_TASK" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t5">Parameter</th>
<th class="cellalignment4328" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t5" headers="r1c1-t5">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t5 r1c2-t5">
<p>Identifier of task to implement</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t5" headers="r1c1-t5">
<p><code dir="ltr">object_id</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t5 r1c2-t5">
<p>Identifier of the advisor framework object that represents a single plan. If <code dir="ltr">NULL</code>, the report is generated for all objects.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t5" headers="r1c1-t5">
<p><code dir="ltr">task_owner</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t5 r1c2-t5">
<p>Owner of the evolve task. Defaults to the current schema owner.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t5" headers="r1c1-t5">
<p><code dir="ltr">force</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t5 r1c2-t5">
<p>Accept the plan even if the advisor did not recommend such an action. The default is <code dir="ltr">FALSE</code> requiring acceptance of the plan only if the plan is verified and shows sufficient improvement in benefit.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68156" class="refsect2"><a id="CACJJFDB"></a>
<h3 class="refsect2"><a id="sthref9246"></a>ALTER_SQL_PLAN_BASELINE Function</h3>
<p>This function changes an attribute of a single plan or all plans associated with a SQL statement using the attribute name/value format.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9247"></a>Syntax</p>
<pre dir="ltr">DBMS_SPM.ALTER_SQL_PLAN_BASELINE (
   sql_handle        IN VARCHAR2 := NULL,
   plan_name         IN VARCHAR2 := NULL,
   attribute_name    IN VARCHAR2,
   attribute_value   IN VARCHAR2)
 RETURN PLS_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9248"></a>Parameters</p>
<div id="ARPLS68157" class="tblformal">
<p class="titleintable"><a id="sthref9249"></a><a id="sthref9250"></a>Table 148-4 ALTER_SQL_PLAN_BASELINE Function Parameters</p>
<table class="cellalignment4330" title="ALTER_SQL_PLAN_BASELINE Function Parameters" summary="This table describes the parameters of DBMS_SPM.ALTER_SQL_PLAN_BASELINE" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t6">Parameter</th>
<th class="cellalignment4328" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t6" headers="r1c1-t6">
<p><code dir="ltr">sql_handle</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t6 r1c2-t6">
<p>SQL statement handle. It identifies plans associated with a SQL statement for an attribute change. If <code dir="ltr">NULL</code> then <code dir="ltr">plan_name</code> must be specified.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t6" headers="r1c1-t6">
<p><code dir="ltr">plan_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t6 r1c2-t6">
<p>Plan name. It identifies a specific plan. Default <code dir="ltr">NULL</code> means set the attribute for all plans associated with a SQL statement identified by <code dir="ltr">sql_handle</code>. If <code dir="ltr">NULL</code> then <code dir="ltr">sql_handle</code> must be specified.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t6" headers="r1c1-t6">
<p><code dir="ltr">attribute_name</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t6 r1c2-t6">
<p>Name of plan attribute to set (see table below).</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t6" headers="r1c1-t6">
<p><code dir="ltr">attribute_value</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t6 r1c2-t6">
<p>Value of plan attribute to use (see table below)</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="ARPLS68158" class="tblformal">
<p class="titleintable"><a id="sthref9251"></a><a id="sthref9252"></a>Table 148-5 Names &amp; Values for ALTER_SQL_PLAN_BASELINE Function Parameters</p>
<table class="cellalignment4330" title="Names &amp; Values for ALTER_SQL_PLAN_BASELINE Function Parameters" summary="Names &amp; Values for CONFIGURE Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t7">Name</th>
<th class="cellalignment4328" id="r1c2-t7">Description</th>
<th class="cellalignment4328" id="r1c3-t7">Possible Values</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t7" headers="r1c1-t7">
<p><code dir="ltr">enabled</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t7 r1c2-t7">
<p>&#39;<code dir="ltr">YES</code>&#39; means the plan is available for use by the optimizer. It may or may not be used depending on <code dir="ltr">accepted</code> status.</p>
</td>
<td class="cellalignment4329" headers="r2c1-t7 r1c3-t7">
<p>&#39;<code dir="ltr">YES</code>&#39; or &#39;<code dir="ltr">NO</code>&#39;</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t7" headers="r1c1-t7">
<p><code dir="ltr">fixed</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t7 r1c2-t7">
<p>&#39;<code dir="ltr">YES</code>&#39; means the SQL plan baseline is not evolved over time. A fixed plan takes precedence over a non-fixed plan.</p>
</td>
<td class="cellalignment4329" headers="r3c1-t7 r1c3-t7">
<p>&#39;<code dir="ltr">YES</code>&#39; or &#39;<code dir="ltr">NO</code>&#39;</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t7" headers="r1c1-t7">
<p><code dir="ltr">autopurge</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t7 r1c2-t7">
<p>&#39;<code dir="ltr">YES</code>&#39; means the plan is purged if it is not used for a time period. &#39;<code dir="ltr">NO</code>&#39; means it is never purged.</p>
</td>
<td class="cellalignment4329" headers="r4c1-t7 r1c3-t7">
<p>&#39;<code dir="ltr">YES</code>&#39; or &#39;<code dir="ltr">NO</code>&#39;</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t7" headers="r1c1-t7">
<p><code dir="ltr">plan_name</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t7 r1c2-t7">
<p>Name of the plan</p>
</td>
<td class="cellalignment4329" headers="r5c1-t7 r1c3-t7">
<p>String of up to 30 characters</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t7" headers="r1c1-t7">
<p><code dir="ltr">description</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t7 r1c2-t7">
<p>Plan description.</p>
</td>
<td class="cellalignment4329" headers="r6c1-t7 r1c3-t7">
<p>String of up to 500 bytes</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9253"></a>Return Values</p>
<p>The number of plans altered.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9254"></a>Usage Notes</p>
<p>When a single plan is specified, one of various statuses, or plan name, or description can be altered. When all plans for a SQL statement are specified, one of various statuses, or description can be altered. This function can be called numerous times, each time setting a different plan attribute of same plan(s) or different plan(s).</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS73869" class="refsect2"><a id="CACCCJDF"></a>
<h3 class="refsect2"><a id="sthref9255"></a>CANCEL_EVOLVE_TASK Procedure</h3>
<p>The procedure cancels a currently executing evolve task. All intermediate results are removed from the task.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9256"></a>Syntax</p>
<pre dir="ltr">DBMS_SPM.CANCEL_EVOLVE_TASK  (
   task_name        IN  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9257"></a>Parameters</p>
<div id="ARPLS73870" class="tblformal">
<p class="titleintable"><a id="sthref9258"></a><a id="sthref9259"></a>Table 148-6 CANCEL_EVOLVE_TASK Procedure Parameters</p>
<table class="cellalignment4330" title="CANCEL_EVOLVE_TASK Procedure Parameters" summary="This table describes the parameters of DBMS_SPM.CANCEL_EVOLVE_TASK" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t8">Parameter</th>
<th class="cellalignment4328" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t8" headers="r1c1-t8">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t8 r1c2-t8">
<p>Identifier of task to cancel</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68159" class="refsect2"><a id="CACHAGGA"></a>
<h3 class="refsect2"><a id="sthref9260"></a>CONFIGURE Procedure</h3>
<p>This procedure sets configuration options for SQL management base, in parameter/value format. This function can be called numerous times, each time setting a different configuration option.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9261"></a>Syntax</p>
<pre dir="ltr">DBMS_SPM.CONFIGURE (
   parameter_name    IN VARCHAR2,
   parameter_value   IN NUMBER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9262"></a>Parameters</p>
<div id="ARPLS68160" class="tblformal">
<p class="titleintable"><a id="sthref9263"></a><a id="sthref9264"></a>Table 148-7 CONFIGURE Procedure Parameters</p>
<table class="cellalignment4330" title="CONFIGURE Procedure Parameters" summary="This table describes the parameters of DBMS_SPM.CONFIGURE" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t9">Parameter</th>
<th class="cellalignment4328" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t9" headers="r1c1-t9">
<p><code dir="ltr">parameter_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t9 r1c2-t9">
<p>Name of parameter to set (see table below)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t9" headers="r1c1-t9">
<p><code dir="ltr">parameter_value</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t9 r1c2-t9">
<p>Value of parameter to use (see table below)</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="ARPLS68161" class="tblformal">
<p class="titleintable"><a id="sthref9265"></a><a id="sthref9266"></a>Table 148-8 Names &amp; Values for CONFIGURE Procedure Parameters</p>
<table class="cellalignment4330" title="Names &amp; Values for CONFIGURE Procedure Parameters" summary="Names &amp; Values for CONFIGURE Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t10">Name</th>
<th class="cellalignment4328" id="r1c2-t10">Description</th>
<th class="cellalignment4328" id="r1c3-t10">Possible Values</th>
<th class="cellalignment4328" id="r1c4-t10">Default Value</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t10" headers="r1c1-t10">
<p><code dir="ltr">space_budget_percent</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t10 r1c2-t10">
<p>Maximum percent of <code dir="ltr">SYSAUX</code> space that can be used for SQL management base</p>
</td>
<td class="cellalignment4329" headers="r2c1-t10 r1c3-t10">
<p>1,2, &hellip;, 50</p>
</td>
<td class="cellalignment4329" headers="r2c1-t10 r1c4-t10">
<p>10</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t10" headers="r1c1-t10">
<p><code dir="ltr">plan_retention_weeks</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t10 r1c2-t10">
<p>Number of weeks to retain unused plans before they are purged</p>
</td>
<td class="cellalignment4329" headers="r3c1-t10 r1c3-t10">
<p>5,6, &hellip;, 523</p>
</td>
<td class="cellalignment4329" headers="r3c1-t10 r1c4-t10">
<p>53</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9267"></a>Usage Notes</p>
<ul>
<li>
<p>The default space budget for SQL management base is no more than ten percent of the size of <code dir="ltr">SYSAUX</code> tablespace. The space budget can be set to a maximum of 50%. The default unused plan retention period is one year and one week, which means a plan will be automatically purged if it has not been used for more than a year. The retention period can be set to a maximum of 523 weeks (i.e. a little over 10 years).</p>
</li>
<li>
<p>When the space occupied by SQL management base exceeds the defined space budget limit, a weekly database alert is generated.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS73871" class="refsect2"><a id="CACBHAHJ"></a>
<h3 class="refsect2"><a id="sthref9268"></a>CREATE_EVOLVE_TASK Function</h3>
<p>The function has two overloads, both of which create an advisor task and sets its parameters. This version which takes a SQL handle creates an evolve task in order to evolve one or more plans for a given SQL statement.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9269"></a>Syntax</p>
<pre dir="ltr">DBMS_SPM.CREATE_EVOLVE_TASK (
   sql_handle    IN  VARCHAR2  := NULL,
   plan_name     IN  VARCHAR2  := NULL,
   time_limit    IN  NUMBER    := DBMS_SPM.AUTO_LIMIT,
   task_name     IN  VARCHAR2  := NULL,
   description   IN  VARCHAR2  := NULL)
  RETURN VARCHAR2;

DBMS_SPM.CREATE_EVOLVE_TASK (
   plan_list     IN  DBMS_SPM.NAME_LIST,
   time_limit    IN  NUMBER    := DBMS_SPM.AUTO_LIMIT,
   task_name     IN  VARCHAR2  := NULL,
   description   IN  VARCHAR2  := NULL)
  RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9270"></a>Parameters</p>
<div id="ARPLS73872" class="tblformal">
<p class="titleintable"><a id="sthref9271"></a><a id="sthref9272"></a>Table 148-9 CREATE_EVOLVE_TASK Function Parameters</p>
<table class="cellalignment4330" title="CREATE_EVOLVE_TASK Function Parameters" summary="This table describes the parameters of DBMS_SPM.CREATE_EVOLVE_TASK" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t11">Parameter</th>
<th class="cellalignment4328" id="r1c2-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t11" headers="r1c1-t11">
<p><code dir="ltr">sql_handle</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t11 r1c2-t11">
<p>Handle of a SQL statement. The default <code dir="ltr">NULL</code> considers all SQL statements with non-accepted plans.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t11" headers="r1c1-t11">
<p><code dir="ltr">plan_list</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t11 r1c2-t11">
<p>List of plan names. The plans may belong to different SQL statements.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t11" headers="r1c1-t11">
<p><code dir="ltr">plan_name</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t11 r1c2-t11">
<p>Plan identifier. The default <code dir="ltr">NULL</code> considers all non-accepted plans of the specified SQL handle or all SQL statements if the SQL handle is <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t11" headers="r1c1-t11">
<p><code dir="ltr">time_limit</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t11 r1c2-t11">
<p>Time limit in number of minutes. The time limit is global and it is used in the following manner. The time limit for first non-accepted plan is equal to the input value. The time limit for the second non-accepted plan is equal to (input value - time spent in first plan verification) and so on. The default <code dir="ltr">DBMS_SPM</code>.<code dir="ltr">AUTO_LIMIT</code> means let the system choose an appropriate time limit based on the number of plan verifications required to be done. The value <code dir="ltr">DBMS_SPM</code>.<code dir="ltr">NO_LIMIT</code> means no time limit.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t11" headers="r1c1-t11">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t11 r1c2-t11">
<p>Evolve task name</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t11" headers="r1c1-t11">
<p><code dir="ltr">description</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t11 r1c2-t11">
<p>Description of the task (maximum 256 characters)</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9273"></a>Return Values</p>
<p>SQL evolve task unique name</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68162" class="refsect2"><a id="CACBHIHE"></a>
<h3 class="refsect2"><a id="sthref9274"></a>CREATE_STGTAB_BASELINE Procedure</h3>
<p>This procedure creates a staging table used for transporting SQL plan baselines from one system to another.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9275"></a>Syntax</p>
<pre dir="ltr">DBMS_SPM.CREATE_STGTAB_BASELINE (
   table_name        IN VARCHAR2,
   table_owner       IN VARCHAR2 := NULL,
   tablespace_name   IN VARCHAR2 := NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9276"></a>Parameters</p>
<div id="ARPLS68163" class="tblformal">
<p class="titleintable"><a id="sthref9277"></a><a id="sthref9278"></a>Table 148-10 CREATE_STGTAB_BASELINE Procedure Parameters</p>
<table class="cellalignment4330" title="CREATE_STGTAB_BASELINE Procedure Parameters" summary="This table describes the parameters of DBMS_SPM.CREATE_STGTAB_BASELINE" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t12">Parameter</th>
<th class="cellalignment4328" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t12" headers="r1c1-t12">
<p><code dir="ltr">table_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t12 r1c2-t12">
<p>Name of staging table to create for the purpose of packing and unpacking SQL plan baselines</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t12" headers="r1c1-t12">
<p><code dir="ltr">table_owner</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t12 r1c2-t12">
<p>Name of owner of the staging table. Default <code dir="ltr">NULL</code> means current schema is the table owner.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t12" headers="r1c1-t12">
<p><code dir="ltr">tablespace_name</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t12 r1c2-t12">
<p>Name of tablespace. Default NULL means create staging table in the default tablespace.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9279"></a>Usage Notes</p>
<p>The creation of staging table is the first step. To migrate SQL plan baselines from one system to another, the user/DBA has to perform a series of steps as follows:</p>
<ol>
<li>
<p>Create a staging table in the source system</p>
</li>
<li>
<p>Select SQL plan baselines in the source system and pack them into the staging table</p>
</li>
<li>
<p>Export staging table into a flat file using Oracle EXP utility or Data Pump</p>
</li>
<li>
<p>Transfer flat file to the target system</p>
</li>
<li>
<p>Import staging table from the flat file using Oracle IMP utility or Data Pump</p>
</li>
<li>
<p>Select SQL plan baselines from the staging table and unpack them into the target system</p>
</li>
</ol>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS73873" class="refsect2"><a id="CACDAICC"></a>
<h3 class="refsect2"><a id="sthref9280"></a>DROP_EVOLVE_TASK Procedure</h3>
<p>The procedure drops an evolved task.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9281"></a>Syntax</p>
<pre dir="ltr">DBMS_SPM.DROP_EVOLVE_TASK  (
   task_name        IN  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9282"></a>Parameters</p>
<div id="ARPLS73874" class="tblformal">
<p class="titleintable"><a id="sthref9283"></a><a id="sthref9284"></a>Table 148-11 DROP_EVOLVE_TASK Procedure Parameters</p>
<table class="cellalignment4330" title="DROP_EVOLVE_TASK Procedure Parameters" summary="This table describes the parameters of DBMS_SPM.DROP_EVOLVE_TASK" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t13">Parameter</th>
<th class="cellalignment4328" id="r1c2-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t13" headers="r1c1-t13">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t13 r1c2-t13">
<p>Identifier of task to drop</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68164" class="refsect2"><a id="CACGAHJF"></a>
<h3 class="refsect2"><a id="sthref9285"></a>DROP_SQL_PLAN_BASELINE Function</h3>
<p>This function drops a single plan, or all plans associated with a SQL statement.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9286"></a>Syntax</p>
<pre dir="ltr">DBMS_SPM.DROP_SQL_PLAN_BASELINE (
   sql_handle     IN VARCHAR2 := NULL,
   plan_name      IN VARCHAR2 := NULL)
RETURN PLS_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9287"></a>Parameters</p>
<div id="ARPLS68165" class="tblformal">
<p class="titleintable"><a id="sthref9288"></a><a id="sthref9289"></a>Table 148-12 DROP_SQL_PLAN_BASELINE Function Parameters</p>
<table class="cellalignment4330" title="DROP_SQL_PLAN_BASELINE Function Parameters" summary="This table describes the parameters of DBMS_SPM.DROP_SQL_PLAN_BASELINE" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t14">Parameter</th>
<th class="cellalignment4328" id="r1c2-t14">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t14" headers="r1c1-t14">
<p><code dir="ltr">sql_handle</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t14 r1c2-t14">
<p>SQL statement handle. It identifies plans associated with a SQL statement that are to be dropped. If <code dir="ltr">NULL</code> then <code dir="ltr">plan_name</code> must be specified.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t14" headers="r1c1-t14">
<p><code dir="ltr">plan_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t14 r1c2-t14">
<p>Plan name. It identifies a specific plan. Default <code dir="ltr">NULL</code> means to drop all plans associated with the SQL statement identified by <code dir="ltr">sql_handle</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9290"></a>Return Values</p>
<p>The number of plans dropped</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68166" class="refsect2"><a id="CACEBBEI"></a>
<h3 class="refsect2"><a id="sthref9291"></a>EVOLVE_SQL_PLAN_BASELINE Function</h3>
<p>This function evolves SQL plan baselines associated with one or more SQL statements. A SQL plan baseline is evolved when one or more of its non-accepted plans is changed to an accepted plan or plans. If interrogated by the user (parameter <code dir="ltr">verify</code> = &#39;<code dir="ltr">YES</code>&#39;), the execution performance of each non-accepted plan is compared against the performance of a plan chosen from the associated SQL plan baseline. If the non-accepted plan performance is found to be better than SQL plan baseline performance, the non-accepted plan is changed to an accepted plan provided such action is permitted by the user (parameter <code dir="ltr">commit</code> = &#39;YES&#39;).</p>
<p>The second form of the function employs a plan list format.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9292"></a>Syntax</p>
<pre dir="ltr">DBMS_SPM.EVOLVE_SQL_PLAN_BASELINE (
   sql_handle   IN VARCHAR2 := NULL,
   plan_name    IN VARCHAR2 := NULL,
   time_limit   IN INTEGER  := DBMS_SPM.AUTO_LIMIT,
   verify       IN VARCHAR2 := &#39;YES&#39;,
   commit       IN VARCHAR2 := &#39;YES&#39;)
  RETURN CLOB;

DBMS_SPM.EVOLVE_SQL_PLAN_BASELINE (
   plan_list    IN DBMS_SPM.NAME_LIST,
   time_limit   IN INTEGER  := DBMS_SPM.AUTO_LIMIT,
   verify       IN VARCHAR2 := &#39;YES&#39;,
   commit       IN VARCHAR2 := &#39;YES&#39;)
  RETURN CLOB;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9293"></a>Parameters</p>
<div id="ARPLS68167" class="tblformal">
<p class="titleintable"><a id="sthref9294"></a><a id="sthref9295"></a>Table 148-13 EVOLVE_SQL_PLAN_BASELINE Function Parameters</p>
<table class="cellalignment4330" title="EVOLVE_SQL_PLAN_BASELINE Function Parameters" summary="This table describes the parameters of DBMS_SPM.EVOLVE_SQL_PLAN_BASELINE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t15">Parameter</th>
<th class="cellalignment4328" id="r1c2-t15">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t15" headers="r1c1-t15">
<p><code dir="ltr">sql_handle</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t15 r1c2-t15">
<p>SQL statement identifier. Unless <code dir="ltr">plan_name</code> is specified, <code dir="ltr">NULL</code> means to consider all statements with non-accepted plans in their SQL plan baselines.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t15" headers="r1c1-t15">
<p><code dir="ltr">plan_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t15 r1c2-t15">
<p>Plan identifier. Default <code dir="ltr">NULL</code> means to consider all non- accepted plans in the SQL plan baseline of either the identified SQL statement or all SQL statements if <code dir="ltr">sql_handle</code> is <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t15" headers="r1c1-t15">
<p><code dir="ltr">plan_list</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t15 r1c2-t15">
<p>A list of plan names. Each plan in the list can belong to same or different SQL statement.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t15" headers="r1c1-t15">
<p><code dir="ltr">time_limit</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t15 r1c2-t15">
<p>Time limit in number of minutes. This applies only if <code dir="ltr">verify</code> = &#39;<code dir="ltr">YES</code>&#39;. The time limit is global and it is used as follows: The time limit for first non-accepted plan verification is set equal to the input value; the time limit for second non-accepted plan verification is set equal to (input value - time spent in first plan verification); and so on.</p>
<ul>
<li>
<p><code dir="ltr">DBMS_SPM</code>.<code dir="ltr">AUTO_LIMIT</code> (Default) lets the system choose an appropriate time limit based on the number of plan verifications required to be done.</p>
</li>
<li>
<p><code dir="ltr">DBMS_SPM</code>.<code dir="ltr">NO_LIMIT</code> means there is no time limit.</p>
</li>
<li>
<p>A positive integer value represents a user specified time limit.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t15" headers="r1c1-t15">
<p><code dir="ltr">verify</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t15 r1c2-t15">
<p>Specifies whether to execute the plans and compare the performance before changing non-accepted plans into accepted plans. A performance verification involves executing a non-accepted plan and a plan chosen from corresponding SQL plan baseline and comparing their performance statistics. If non-accepted plan shows performance improvement, it is changed to an accepted plan.</p>
<ul>
<li>
<p>&#39;<code dir="ltr">YES</code>&#39; (Default) - verifies that a non-accepted plan gives better performance before changing it to an accepted plan</p>
</li>
<li>
<p>&#39;<code dir="ltr">NO</code>&#39; - directs not to execute plans but only to change non-accepted plans into accepted plans</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t15" headers="r1c1-t15">
<p><code dir="ltr">commit</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t15 r1c2-t15">
<p>Specifies whether to update the <code dir="ltr">ACCEPTED</code> status of non-accepted plans from &#39;<code dir="ltr">NO</code>&#39; to &#39;<code dir="ltr">YES</code>&#39;.</p>
<ul>
<li>
<p>&#39;<code dir="ltr">YES</code>&#39; (Default) - perform updates of qualifying non-accepted plans and generate a report that shows the updates and the result of performance verification when verify = &#39;<code dir="ltr">YES</code>&#39;.</p>
</li>
<li>
<p>&#39;<code dir="ltr">NO</code>&#39; - generate a report without any updates. Note that <code dir="ltr">commit</code> = &#39;<code dir="ltr">NO</code>&#39; together with <code dir="ltr">verify</code> = &#39;<code dir="ltr">NO</code>&#39; represents a no-op.</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9296"></a>Return Values</p>
<p>A <code dir="ltr">CLOB</code> containing a formatted text report showing non-accepted plans in sequence, each with a possible change of its <code dir="ltr">ACCEPTED</code> status, and if verify = &#39;<code dir="ltr">YES</code>&#39; the result of their performance verification.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9297"></a>Usage Notes</p>
<p>Invoking this subprogram requires the <code dir="ltr">ADMINISTER</code> <code dir="ltr">SQL</code> <code dir="ltr">MANAGEMENT</code> <code dir="ltr">OBJECT</code> privilege.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS73875" class="refsect2"><a id="CACBAAHG"></a>
<h3 class="refsect2"><a id="sthref9298"></a>EXECUTE_EVOLVE_TASK Function</h3>
<p>The function executes a previously created evolve task.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9299"></a>Syntax</p>
<pre dir="ltr">DBMS_SPM.EXECUTE_EVOLVE_TASK  (
   task_name        IN  VARCHAR2,
   execution_name   IN  VARCHAR2  := NULL,
   execution_desc   IN  VARCHAR2  := NULL);
 RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9300"></a>Parameters</p>
<div id="ARPLS73876" class="tblformal">
<p class="titleintable"><a id="sthref9301"></a><a id="sthref9302"></a>Table 148-14 EXECUTE_EVOLVE_TASK Function Parameters</p>
<table class="cellalignment4330" title="EXECUTE_EVOLVE_TASK Function Parameters" summary="This table describes the parameters of DBMS_SPM.EXECUTE_EVOLVE_TASK" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t16">Parameter</th>
<th class="cellalignment4328" id="r1c2-t16">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t16" headers="r1c1-t16">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t16 r1c2-t16">
<p>Evolve task name</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t16" headers="r1c1-t16">
<p><code dir="ltr">execution_name</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t16 r1c2-t16">
<p>Name to qualify and identify an execution. If not specified, it is generated by the advisor and returned by the function.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t16" headers="r1c1-t16">
<p><code dir="ltr">execution_desc</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t16 r1c2-t16">
<p>Description of the execution (maximum 256 characters)</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9303"></a>Return Values</p>
<p>Name of the new execution</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS73877" class="refsect2"><a id="CACGEEDF"></a>
<h3 class="refsect2"><a id="sthref9304"></a>IMPLEMENT_EVOLVE_TASK Function</h3>
<p>The function implements all the actions recommended by an evolve task.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9305"></a>Syntax</p>
<pre dir="ltr">DBMS_SPM.IMPLEMENT_EVOLVE_TASK  (
   task_name       IN  VARCHAR2,
   task_owner      IN  VARCHAR2  := NULL,
   execution_name  IN  VARCHAR2  := NULL,
   force           IN BOOLEAN    := FALSE)
 RETURN NUMBER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9306"></a>Parameters</p>
<div id="ARPLS73878" class="tblformal">
<p class="titleintable"><a id="sthref9307"></a><a id="sthref9308"></a>Table 148-15 IMPLEMENT_EVOLVE_TASK Function Parameters</p>
<table class="cellalignment4330" title="IMPLEMENT_EVOLVE_TASK Function Parameters" summary="This table describes the parameters of DBMS_SPM.IMPLEMENT_EVOLVE_TASK" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t17">Parameter</th>
<th class="cellalignment4328" id="r1c2-t17">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t17" headers="r1c1-t17">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t17 r1c2-t17">
<p>Identifier of task to report</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t17" headers="r1c1-t17">
<p><code dir="ltr">task_owner</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t17 r1c2-t17">
<p>Owner of the evolve task. Defaults to the current schema owner.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t17" headers="r1c1-t17">
<p><code dir="ltr">execution_name</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t17 r1c2-t17">
<p>Name to qualify and identify an execution. If <code dir="ltr">NULL</code>, the action will be taken for the last task execution.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t17" headers="r1c1-t17">
<p><code dir="ltr">force</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t17 r1c2-t17">
<p>Accept all plans even if the advisor did not recommend such an action. The default is <code dir="ltr">FALSE</code> requiring acceptance of the plan only if the plan is verified and shows sufficient improvement in benefit.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9309"></a>Return Values</p>
<p>The number of plans accepted</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS73879" class="refsect2"><a id="CACDIEEJ"></a>
<h3 class="refsect2"><a id="sthref9310"></a>INTERRUPT_EVOLVE_TASK Procedure</h3>
<p>The procedure interrupts a currently executing evolve task. The task ends its operations as at a normal exit and the user can access the intermediate results. The task can be resumed later.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9311"></a>Syntax</p>
<pre dir="ltr">DBMS_SPM.INTERRUPT_EVOLVE_TASK  (
   task_name        IN  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9312"></a>Parameters</p>
<div id="ARPLS73880" class="tblformal">
<p class="titleintable"><a id="sthref9313"></a><a id="sthref9314"></a>Table 148-16 INTERRUPT_EVOLVE_TASK Procedure Parameters</p>
<table class="cellalignment4330" title="INTERRUPT_EVOLVE_TASK Procedure Parameters" summary="This table describes the parameters of DBMS_SPM.INTERRUPT_EVOLVE_TASK" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t18">Parameter</th>
<th class="cellalignment4328" id="r1c2-t18">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t18" headers="r1c1-t18">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t18 r1c2-t18">
<p>Identifier of task to interrupt</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68168" class="refsect2"><a id="CACBFHHJ"></a>
<h3 class="refsect2"><a id="sthref9315"></a>LOAD_PLANS_FROM_CURSOR_CACHE Functions</h3>
<p>This function loads one or more plans present in the cursor cache for a SQL statement, or a set of SQL statements. It has four overloads: using SQL statement text, using SQL handle, using SQL ID, or using <code dir="ltr">attribute_name</code> and <code dir="ltr">attribute_value</code> pair.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9316"></a>Syntax</p>
<pre dir="ltr">DBMS_SPM.LOAD_PLANS_FROM_CURSOR_CACHE (
   sql_id            IN  VARCHAR2,
   plan_hash_value   IN  NUMBER   := NULL,
   sql_text          IN  CLOB,
   fixed             IN  VARCHAR2 := &#39;NO&#39;,
   enabled           IN  VARCHAR2 := &#39;YES&#39;)
 RETURN PLS_INTEGER;

DBMS_SPM.LOAD_PLANS_FROM_CURSOR_CACHE (
   sql_id            IN  VARCHAR2,
   plan_hash_value   IN  NUMBER   := NULL,
   sql_handle        IN  VARCHAR2,
   fixed             IN  VARCHAR2 := &#39;NO&#39;,
   enabled           IN  VARCHAR2 := &#39;YES&#39;)
 RETURN PLS_INTEGER;

DBMS_SPM.LOAD_PLANS_FROM_CURSOR_CACHE (
   sql_id            IN  VARCHAR2,
   plan_hash_value   IN  NUMBER   := NULL,
   fixed             IN  VARCHAR2 := &#39;NO&#39;,
   enabled           IN  VARCHAR2 := &#39;YES&#39;)
 RETURN PLS_INTEGER;

DBMS_SPM.LOAD_PLANS_FROM_CURSOR_CACHE (
   attribute_name   IN VARCHAR2,
   attribute_value  IN VARCHAR2,
   fixed            IN VARCHAR2 := &#39;NO&#39;,
   enabled          IN VARCHAR2 := &#39;YES&#39;)
  RETURN PLS_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9317"></a>Parameters</p>
<div id="ARPLS68169" class="tblformal">
<p class="titleintable"><a id="sthref9318"></a><a id="sthref9319"></a>Table 148-17 LOAD_PLANS_FROM_CURSOR_CACHE Function Parameters</p>
<table class="cellalignment4330" title="LOAD_PLANS_FROM_CURSOR_CACHE Function Parameters" summary="This table describes the parameters of DBMS_SPM.LOAD_PLANS_FROM_CURSOR_CACHE" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t19">Parameter</th>
<th class="cellalignment4328" id="r1c2-t19">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t19" headers="r1c1-t19">
<p><code dir="ltr">sql_id</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t19 r1c2-t19">
<p>SQL statement identifier. Identifies a SQL statement in the cursor cache. Note: In the third overload the text of identified SQL statement is extracted from cursor cache and is used to identify the SQL plan baseline into which the plan(s) are loaded. If the SQL plan baseline doesn&#39;t exist it is created.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t19" headers="r1c1-t19">
<p><code dir="ltr">plan_hash_value</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t19 r1c2-t19">
<p>Plan identifier. Default <code dir="ltr">NULL</code> means capture all plans present in the cursor cache for the SQL statement identified by <code dir="ltr">SQL_ID</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t19" headers="r1c1-t19">
<p><code dir="ltr">sql_text</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t19 r1c2-t19">
<p>SQL text to use in identifying the SQL plan baseline into which the plans are loaded. If the SQL plan baseline does not exist, it is created. The use of text is crucial when the user tunes a SQL statement by adding hints to its text and then wants to load the resulting plan(s) into the SQL plan baseline of the original SQL statement.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t19" headers="r1c1-t19">
<p><code dir="ltr">sql_handle</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t19 r1c2-t19">
<p>SQL handle to use in identifying the SQL plan baseline into which the plans are loaded. The <code dir="ltr">sql_handle</code> must denote an existing SQL plan baseline. The use of handle is crucial when the user tunes a SQL statement by adding hints to its text and then wants to load the resulting plan(s) into the SQL plan baseline of the original SQL statement.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t19" headers="r1c1-t19">
<p><code dir="ltr">fixed</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t19 r1c2-t19">
<p>Default <code dir="ltr">&#39;NO&#39;</code> means the loaded plans are used as non-fixed plans. Value <code dir="ltr">&#39;YES&#39;</code> means the loaded plans are used as fixed plans and the SQL plan baseline will not be evolved over time.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t19" headers="r1c1-t19">
<p><code dir="ltr">attribute_name</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t19 r1c2-t19">
<p>One of possible attribute names:</p>
<ul>
<li>
<p><code dir="ltr">SQL_TEXT</code>&#39;&#39;</p>
</li>
<li>
<p>&#39;<code dir="ltr">PARSING_SCHEMA_NAME</code>&#39;</p>
</li>
<li>
<p>&#39;<code dir="ltr">MODULE</code>&#39;</p>
</li>
<li>
<p>&#39;<code dir="ltr">ACTION&#39;</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t19" headers="r1c1-t19">
<p><code dir="ltr">attribute_value</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t19 r1c2-t19">
<p>Attribute value is used as a search pattern of <code dir="ltr">LIKE</code> predicate if attribute name is <code dir="ltr">&#39;SQL_TEXT&#39;</code>. Otherwise, it is used as an equality search value. (for example, for specifying <code dir="ltr">attribute_name</code> =&gt; <code dir="ltr">&#39;SQL_TEXT&#39;</code>, and <code dir="ltr">attribute_value</code> =&gt; <code dir="ltr">&#39;% HR-123 %&#39;</code> means applying <code dir="ltr">SQL_TEXT</code> <code dir="ltr">LIKE</code> <code dir="ltr">&#39;%</code> <code dir="ltr">HR</code>-<code dir="ltr">123</code> <code dir="ltr">%&#39;</code> as a selection filter. Similarly, specifying <code dir="ltr">attribute_name</code> =&gt; <code dir="ltr">&#39;MODULE&#39;</code>, and <code dir="ltr">attribute_value</code> =&gt; <code dir="ltr">&#39;HR&#39;</code> means applying <code dir="ltr">&#39;MODULE</code> = &#39;<code dir="ltr">HR&#39;</code> as a plan selection filter). The attribute value is upper-cased except when it is enclosed in double quotes or attribute name is <code dir="ltr">&#39;SQL_TEXT&#39;</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t19" headers="r1c1-t19">
<p><code dir="ltr">enabled</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t19 r1c2-t19">
<p>Default &#39;<code dir="ltr">YES</code>&#39; means the loaded plans are enabled for use by the optimizer</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9320"></a>Return Values</p>
<p>Number of plans loaded</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9321"></a>Usage Notes</p>
<p>Invoking this subprogram requires the <code dir="ltr">ADMINISTER</code> <code dir="ltr">SQL</code> <code dir="ltr">MANAGEMENT</code> <code dir="ltr">OBJECT</code> privilege.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68170" class="refsect2"><a id="CACBCAGD"></a>
<h3 class="refsect2"><a id="sthref9322"></a>LOAD_PLANS_FROM_SQLSET Function</h3>
<p>This function loads plans stored in a SQL tuning set (STS) into SQL plan baselines. The plans loaded from STS are not verified for performance but added as accepted plans to existing or new SQL plan baselines. This function can be used to seed SQL management base with new SQL plan baselines.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9323"></a>Syntax</p>
<pre dir="ltr">DBMS_SPM.LOAD_PLANS_FROM_SQLSET (
   sqlset_name      IN  VARCHAR2,
   sqlset_owner     IN  VARCHAR2 := NULL,
   basic_filter     IN  VARCHAR2 := NULL,
   fixed            IN  VARCHAR2 := &#39;NO&#39;,
   enabled          IN  VARCHAR2 := &#39;YES&#39;
   commit_rows      IN  NUMBER   := 1000)
RETURN PLS_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9324"></a>Parameters</p>
<div id="ARPLS68171" class="tblformal">
<p class="titleintable"><a id="sthref9325"></a><a id="sthref9326"></a>Table 148-18 LOAD_PLANS_FROM_SQLSET Function Parameters</p>
<table class="cellalignment4330" title="LOAD_PLANS_FROM_SQLSET Function Parameters" summary="This table describes the parameters of DBMS_SPM.LOAD_PLANS_FROM_SQLSET" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t20">Parameter</th>
<th class="cellalignment4328" id="r1c2-t20">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t20" headers="r1c1-t20">
<p><code dir="ltr">sqlset_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t20 r1c2-t20">
<p>Name of the STS from where the plans are loaded into SQL plan baselines</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t20" headers="r1c1-t20">
<p><code dir="ltr">sqlset_owner</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t20 r1c2-t20">
<p>Owner of STS. <code dir="ltr">NULL</code> means current schema is the owner.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t20" headers="r1c1-t20">
<p><code dir="ltr">basic_filter</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t20 r1c2-t20">
<p>A filter applied to the STS to select only qualifying plans to be loaded. The filter can take the form of any <code dir="ltr">WHERE</code> clause predicate that can specified against the view <code dir="ltr">DBA_SQLSET_STATEMENTS</code>. For example <code dir="ltr">basic_filter</code> =&gt; &#39;<code dir="ltr">sql_text like &#39;&#39;select /*LOAD_STS*/%&#39;&#39;&#39;</code> or <code dir="ltr">basic_filter =&gt; &#39;sql_id=&#39;&#39;b62q7nc33gzwx&#39;&#39;&#39;</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t20" headers="r1c1-t20">
<p><code dir="ltr">fixed</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t20 r1c2-t20">
<p>Default &#39;<code dir="ltr">NO</code>&#39; means the loaded plans are used as non-fixed plans. Value &#39;<code dir="ltr">YES</code>&#39; means the loaded plans are used as fixed plans and the SQL plan baseline will not be evolved over time.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t20" headers="r1c1-t20">
<p><code dir="ltr">enabled</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t20 r1c2-t20">
<p>Default &#39;<code dir="ltr">YES</code>&#39; means the loaded plans are enabled for use by the optimizer</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t20" headers="r1c1-t20">
<p><code dir="ltr">commit_rows</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t20 r1c2-t20">
<p>Number of SQL plans to load before doing a periodic commit. This helps to shorten the undo log.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9327"></a>Return Values</p>
<p>The number of plans loaded</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9328"></a>Usage Notes</p>
<ul>
<li>
<p>To load plans from a remote system, first load the plans into an STS on the remote system, export/import the STS from remote to local system, and then use this function.</p>
</li>
<li>
<p>To load plans from Automatic Workload Repository (AWR), first load the plans stored in AWR snapshots into an STS, and then use this procedure.</p>
</li>
<li>
<p>The user can also capture plans resident in the cursor cache for one or more SQL statements into an STS, and then use this procedure.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72437" class="refsect2"><a id="CACCGDBG"></a>
<h3 class="refsect2"><a id="sthref9329"></a>MIGRATE_STORED_OUTLINE Functions</h3>
<p>This function migrates stored outlines for one or more SQL statements to plan baselines in the SQL management base (SMB). Users can specify which stored outline(s) to be migrated based on outline name, SQL text, or outline category, or migrate all stored outlines in the system to SQL plan baselines.</p>
<p>This second overload of the function migrates stored outlines for one or more SQL statements to plan baselines in the SQL management base (SMB) given one or more outline names.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9330"></a>Syntax</p>
<pre dir="ltr">DBMS_SPM.MIGRATE_STORED_OUTLINE (
   attribute_name     IN  VARCHAR2,
   attribute_value    IN  CLOB,
   fixed              IN  VARCHAR2 := &#39;NO&#39;)
 RETURN CLOB;

DBMS_SPM.MIGRATE_STORED_OUTLINE (
   outln_list         IN  DBMS_SPM.NAME_LIST,
   fixed              IN  VARCHAR2 := &#39;NO&#39;)
 RETURN CLOB;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9331"></a>Parameters</p>
<div id="ARPLS72438" class="tblformal">
<p class="titleintable"><a id="sthref9332"></a><a id="sthref9333"></a>Table 148-19 MIGRATE_STORED_OUTLINE Function Parameters</p>
<table class="cellalignment4330" title="MIGRATE_STORED_OUTLINE Function Parameters" summary="This table describes the parameters of DBMS_SPM.LOAD_PLANS_FROM_SQLSET" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t21">Parameter</th>
<th class="cellalignment4328" id="r1c2-t21">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t21" headers="r1c1-t21">
<p><code dir="ltr">attribute_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t21 r1c2-t21">
<p>Specifies the type of parameter used in <code dir="ltr">attribute_value</code> to identify the migrated stored outlines. It is case insensitive. Possible values:</p>
<ul>
<li>
<p><code dir="ltr">outline_name</code></p>
</li>
<li>
<p><code dir="ltr">sql_text</code></p>
</li>
<li>
<p><code dir="ltr">category</code></p>
</li>
<li>
<p><code dir="ltr">all</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t21" headers="r1c1-t21">
<p><code dir="ltr">attribute_value</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t21 r1c2-t21">
<p>Based on <code dir="ltr">attribute_name</code>, this can be:</p>
<ul>
<li>
<p>Name of stored outline to be migrated</p>
</li>
<li>
<p>SQL text of stored outlines to be migrated</p>
</li>
<li>
<p>Category of stored outlines to be migrated</p>
</li>
<li>
<p><code dir="ltr">NULL</code> if <code dir="ltr">attribute_name</code> is <code dir="ltr">all</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t21" headers="r1c1-t21">
<p><code dir="ltr">fixed</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t21 r1c2-t21">
<p><code dir="ltr">NO</code> (default) or <code dir="ltr">YES</code>. Specifies the &#34;fixed&#34; status of the plans generated during migration. By default, plans are generated as &#34;non-fixed&#34; plans.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t21" headers="r1c1-t21">
<p><code dir="ltr">outln_list</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t21 r1c2-t21">
<p>List of outline names to be migrated</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9334"></a>Return Values</p>
<p>A <code dir="ltr">CLOB</code> containing a formatted report to describe the statistics during the migration, including:</p>
<ul>
<li>
<p>Number of stored outlines successfully migrated</p>
</li>
<li>
<p>Number of stored outlines (and also the corresponding outline names) failed to be migrated and the reasons for the failure</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9335"></a>Usage Note</p>
<ul>
<li>
<p>When the user specifies an outline name, the function migrates stored outlines to plan baseline based on given outline name, which uniquely identifies a single stored outline to be migrated.</p>
</li>
<li>
<p>When the user specifies SQL text, the function migrates all stored outlines created for a given SQL statement. A single SQL statement can have multiple stored outlines created for it under different category names. One plan baseline plan is created for each stored outline. The new plan baselines have category names set to <code dir="ltr">DEFAULT</code>. The module name of a plan baseline is set to be the same as the stored outline.</p>
</li>
<li>
<p>When the user specifies a category name, the function migrates all stored outlines with the given category name. Only one stored outline exists per category per SQL statement. One plan baseline is created for each stored outline.</p>
</li>
<li>
<p>When user specifies to migrate <code dir="ltr">all</code>, the function migrates all stored outlines in the system to plan baselines. One plan baseline is created for each stored outline.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68172" class="refsect2"><a id="CACEGFAI"></a>
<h3 class="refsect2"><a id="sthref9336"></a>PACK_STGTAB_BASELINE Function</h3>
<p>This function packs (exports) SQL plan baselines from SQL management base into a staging table.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9337"></a>Syntax</p>
<pre dir="ltr">DBMS_SPM.PACK_STGTAB_BASELINE (
   table_name       IN VARCHAR2,
   table_owner      IN VARCHAR2 := NULL,
   sql_handle       IN VARCHAR2 := NULL,
   plan_name        IN VARCHAR2 := NULL,
   sql_text         IN CLOB     := NULL,
   creator          IN VARCHAR2 := NULL,   origin           IN VARCHAR2 := NULL,
   enabled          IN VARCHAR2 := NULL,
   accepted         IN VARCHAR2 := NULL,
   fixed            IN VARCHAR2 := NULL,
   module           IN VARCHAR2 := NULL,
   action           IN VARCHAR2 := NULL)
RETURN NUMBER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9338"></a>Parameters</p>
<div id="ARPLS68173" class="tblformal">
<p class="titleintable"><a id="sthref9339"></a><a id="sthref9340"></a>Table 148-20 PACK_STGTAB_BASELINE Function Parameters</p>
<table class="cellalignment4330" title="PACK_STGTAB_BASELINE Function Parameters" summary="This table describes the parameters of DBMS_SPM.PACK_STGTAB_BASELINE" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t22">Parameter</th>
<th class="cellalignment4328" id="r1c2-t22">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t22" headers="r1c1-t22">
<p><code dir="ltr">table_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t22 r1c2-t22">
<p>Name of staging table into which SQL plan baselines are packed (case insensitive unless double quoted)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t22" headers="r1c1-t22">
<p><code dir="ltr">table_owner</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t22 r1c2-t22">
<p>Name of staging table owner.Default <code dir="ltr">NULL</code> means current schema is the table owner</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t22" headers="r1c1-t22">
<p><code dir="ltr">sql_handle</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t22 r1c2-t22">
<p>SQL handle (case sensitive)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t22" headers="r1c1-t22">
<p><code dir="ltr">plan_name</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t22 r1c2-t22">
<p>Plan name (case sensitive, % wildcards accepted)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t22" headers="r1c1-t22">
<p><code dir="ltr">sql_text</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t22 r1c2-t22">
<p>SQL text string (case sensitive, % wildcards accepted)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t22" headers="r1c1-t22">
<p><code dir="ltr">creator</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t22 r1c2-t22">
<p>Creator of SQL plan baseline (case insensitive unless double quoted)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t22" headers="r1c1-t22">
<p><code dir="ltr">origin</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t22 r1c2-t22">
<p>Origin of SQL plan baseline, should be <code dir="ltr">&#39;MANUAL-LOAD&#39;</code>, <code dir="ltr">&#39;AUTO-CAPTURE&#39;</code>, <code dir="ltr">&#39;MANUAL_SQLTUNE&#39;</code> or <code dir="ltr">&#39;AUTO-SQLTUNE&#39;</code> (case insensitive)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t22" headers="r1c1-t22">
<p><code dir="ltr">enabled</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t22 r1c2-t22">
<p>Must be &#39;<code dir="ltr">YES</code>&#39; or &#39;<code dir="ltr">NO</code>&#39; (case insensitive)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t22" headers="r1c1-t22">
<p><code dir="ltr">accepted</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t22 r1c2-t22">
<p>Must be &#39;<code dir="ltr">YES</code>&#39; or &#39;<code dir="ltr">NO</code>&#39; (case insensitive)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t22" headers="r1c1-t22">
<p><code dir="ltr">fixed</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t22 r1c2-t22">
<p>Must be &#39;<code dir="ltr">YES</code>&#39; or &#39;<code dir="ltr">NO</code>&#39; (case insensitive)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t22" headers="r1c1-t22">
<p><code dir="ltr">module</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t22 r1c2-t22">
<p>Module (case sensitive)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t22" headers="r1c1-t22">
<p><code dir="ltr">action</code></p>
</td>
<td class="cellalignment4329" headers="r13c1-t22 r1c2-t22">
<p>Action (case sensitive)</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9341"></a>Return Values</p>
<p>Number of SQL plan baselines packed</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS73881" class="refsect2"><a id="CACBGCGF"></a>
<h3 class="refsect2"><a id="sthref9342"></a>RESET_EVOLVE_TASK Procedure</h3>
<p>The procedure resets an evolve task to its initial state. All intermediate results will be removed from the task. Call this procedure on a task that is not currently executing.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9343"></a>Syntax</p>
<pre dir="ltr">DBMS_SPM.RESET_EVOLVE_TASK  (
   task_name        IN  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9344"></a>Parameters</p>
<div id="ARPLS73882" class="tblformal">
<p class="titleintable"><a id="sthref9345"></a><a id="sthref9346"></a>Table 148-21 RESET_EVOLVE_TASK Procedure Parameters</p>
<table class="cellalignment4330" title="RESET_EVOLVE_TASK Procedure Parameters" summary="This table describes the parameters of DBMS_SPM.RESET_EVOLVE_TASK" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t23">Parameter</th>
<th class="cellalignment4328" id="r1c2-t23">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t23" headers="r1c1-t23">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t23 r1c2-t23">
<p>Identifier of task to reset</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS73883" class="refsect2"><a id="CACFICCF"></a>
<h3 class="refsect2"><a id="sthref9347"></a>RESUME_EVOLVE_TASK Procedure</h3>
<p>The procedure resumes a previously interrupted task.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9348"></a>Syntax</p>
<pre dir="ltr">DBMS_SPM.RESUME_EVOLVE_TASK  (
   task_name        IN  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9349"></a>Parameters</p>
<div id="ARPLS73884" class="tblformal">
<p class="titleintable"><a id="sthref9350"></a><a id="sthref9351"></a>Table 148-22 RESUME_EVOLVE_TASK Procedure Parameters</p>
<table class="cellalignment4330" title="RESUME_EVOLVE_TASK Procedure Parameters" summary="This table describes the parameters of DBMS_SPM.RESUME_EVOLVE_TASK" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t24">Parameter</th>
<th class="cellalignment4328" id="r1c2-t24">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t24" headers="r1c1-t24">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t24 r1c2-t24">
<p>Identifier of task to resume</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS73885" class="refsect2"><a id="CACEEIDJ"></a>
<h3 class="refsect2"><a id="sthref9352"></a>REPORT_AUTO_EVOLVE_TASK Function</h3>
<p>The procedure displays the results of an execution of an automatic evolve task.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9353"></a>Syntax</p>
<pre dir="ltr">DBMS_SPM.REPORT_AUTO_EVOLVE_TASK  (
   type            IN  VARCHAR2  := TYPE_TEXT,
   level           IN  VARCHAR2  := LEVEL_TYPICAL,
   section         IN  VARCHAR2  := SECTION_ALL,
   object_id       IN  NUMBER    := NULL,
   execution_name  IN  VARCHAR2  := NULL)
 RETURN CLOB;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9354"></a>Parameters</p>
<div id="ARPLS73886" class="tblformal">
<p class="titleintable"><a id="sthref9355"></a><a id="sthref9356"></a>Table 148-23 REPORT_AUTO_EVOLVE_TASK Function Parameters</p>
<table class="cellalignment4330" title="REPORT_AUTO_EVOLVE_TASK Function Parameters" summary="This table describes the parameters of DBMS_SPM.REPORT_AUTO_EVOLVE_TASK" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t25">Parameter</th>
<th class="cellalignment4328" id="r1c2-t25">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t25" headers="r1c1-t25">
<p><code dir="ltr">type</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t25 r1c2-t25">
<p>Type of the report. Possible values are <code dir="ltr">TEXT</code>, <code dir="ltr">HTML</code>, <code dir="ltr">XML</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t25" headers="r1c1-t25">
<p><code dir="ltr">level</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t25 r1c2-t25">
<p>Format of the report. Possible values are <code dir="ltr">BASIC</code>, <code dir="ltr">TYPICAL</code>, <code dir="ltr">ALL</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t25" headers="r1c1-t25">
<p><code dir="ltr">section</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t25 r1c2-t25">
<p>Particular section in the report. Possible values are: <code dir="ltr">SUMMARY</code>, <code dir="ltr">FINDINGS</code>, <code dir="ltr">PLANS</code>, <code dir="ltr">INFORMATION</code>, <code dir="ltr">ERRORS</code>, <code dir="ltr">ALL</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t25" headers="r1c1-t25">
<p><code dir="ltr">object_id</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t25 r1c2-t25">
<p>Identifier of the advisor framework object that represents a single plan. If <code dir="ltr">NULL</code>, the report is generated for all objects.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t25" headers="r1c1-t25">
<p><code dir="ltr">execution_name</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t25 r1c2-t25">
<p>Name to qualify and identify an execution. If <code dir="ltr">NULL</code>, the report is generated for the last task execution.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9357"></a>Return Values</p>
<p>The report</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS73887" class="refsect2"><a id="CACCIGBG"></a>
<h3 class="refsect2"><a id="sthref9358"></a>REPORT_EVOLVE_TASK Function</h3>
<p>The procedure displays the results of an evolved task.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9359"></a>Syntax</p>
<pre dir="ltr">DBMS_SPM.REPORT_EVOLVE_TASK  (
   task_name       IN  VARCHAR2,
   type            IN  VARCHAR2  := TYPE_TEXT,
   level           IN  VARCHAR2  := LEVEL_TYPICAL,
   section         IN  VARCHAR2  := SECTION_ALL,
   object_id       IN  NUMBER    := NULL,
   task_owner      IN  VARCHAR2  := NULL,
   execution_name  IN  VARCHAR2  := NULL)
 RETURN CLOB;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9360"></a>Parameters</p>
<div id="ARPLS73888" class="tblformal">
<p class="titleintable"><a id="sthref9361"></a><a id="sthref9362"></a>Table 148-24 REPORT_EVOLVE_TASK Function Parameters</p>
<table class="cellalignment4330" title="REPORT_EVOLVE_TASK Function Parameters" summary="This table describes the parameters of DBMS_SPM.REPORT_EVOLVE_TASK" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t26">Parameter</th>
<th class="cellalignment4328" id="r1c2-t26">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t26" headers="r1c1-t26">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t26 r1c2-t26">
<p>Identifier of task to report</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t26" headers="r1c1-t26">
<p><code dir="ltr">type</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t26 r1c2-t26">
<p>Type of the report. Possible values are <code dir="ltr">TEXT</code>, <code dir="ltr">HTML</code>, <code dir="ltr">XML</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t26" headers="r1c1-t26">
<p><code dir="ltr">level</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t26 r1c2-t26">
<p>Format of the report. Possible values are <code dir="ltr">BASIC</code>, <code dir="ltr">TYPICAL</code>, <code dir="ltr">ALL</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t26" headers="r1c1-t26">
<p><code dir="ltr">section</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t26 r1c2-t26">
<p>Particular section in the report. Possible values are: <code dir="ltr">SUMMARY</code>, <code dir="ltr">FINDINGS</code>, <code dir="ltr">PLANS</code>, <code dir="ltr">INFORMATION</code>, <code dir="ltr">ERRORS</code>, <code dir="ltr">ALL</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t26" headers="r1c1-t26">
<p><code dir="ltr">object_id</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t26 r1c2-t26">
<p>Identifier of the advisor framework object that represents a single plan. If <code dir="ltr">NULL</code>, the report is generated for all objects.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t26" headers="r1c1-t26">
<p><code dir="ltr">task_owner</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t26 r1c2-t26">
<p>Owner of the evolve task. Defaults to the current schema owner.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t26" headers="r1c1-t26">
<p><code dir="ltr">execution_name</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t26 r1c2-t26">
<p>Name to qualify and identify an execution. If <code dir="ltr">NULL</code>, the report is generated for the last task execution.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9363"></a>Return Values</p>
<p>The report</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS73889" class="refsect2"><a id="CACECGEG"></a>
<h3 class="refsect2"><a id="sthref9364"></a>SET_EVOLVE_TASK_PARAMETER Procedure</h3>
<p>The procedure sets a parameter of an evolve task, either a <code dir="ltr">NUMBER</code> or <code dir="ltr">VARCHAR2</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9365"></a>Syntax</p>
<pre dir="ltr">DBMS_SPM.SET_EVOLVE_TASK_PARAMETER  (
   task_name     IN  VARCHAR2,
   parameter     IN  VARCHAR2,
   value         IN  NUMBER);

DBMS_SPM.SET_EVOLVE_TASK_PARAMETER  (
   task_name     IN  VARCHAR2  := NULL,
   parameter     IN  VARCHAR2,
   value         IN  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9366"></a>Parameters</p>
<div id="ARPLS73890" class="tblformal">
<p class="titleintable"><a id="sthref9367"></a><a id="sthref9368"></a>Table 148-25 SET_EVOLVE_TASK_PARAMETER Procedure Parameters</p>
<table class="cellalignment4330" title="SET_EVOLVE_TASK_PARAMETER Procedure Parameters" summary="This table describes the parameters of DBMS_SPM.SET_EVOLVE_TASK_PARAMETER" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t27">Parameter</th>
<th class="cellalignment4328" id="r1c2-t27">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t27" headers="r1c1-t27">
<p><code dir="ltr">task_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t27 r1c2-t27">
<p>Evolve task name</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t27" headers="r1c1-t27">
<p><code dir="ltr">parameter</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t27 r1c2-t27">
<p>Name of the parameter to set</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t27" headers="r1c1-t27">
<p><code dir="ltr">value</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t27 r1c2-t27">
<p>New value of the parameter</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68174" class="refsect2"><a id="CACHBGBD"></a>
<h3 class="refsect2"><a id="sthref9369"></a>UNPACK_STGTAB_BASELINE Function</h3>
<p>This function unpacks (imports) SQL plan baselines from a staging table into SQL management base.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9370"></a>Syntax</p>
<pre dir="ltr">DBMS_SPM.UNPACK_STGTAB_BASELINE (
   table_name       IN VARCHAR2,
   table_owner      IN VARCHAR2 := NULL,
   sql_handle       IN VARCHAR2 := NULL,
   plan_name        IN VARCHAR2 := NULL,
   sql_text         IN CLOB     := NULL,
   creator          IN VARCHAR2 := NULL,   origin           IN VARCHAR2 := NULL,
   enabled          IN VARCHAR2 := NULL,
   accepted         IN VARCHAR2 := NULL,
   fixed            IN VARCHAR2 := NULL,
   module           IN VARCHAR2 := NULL,
   action           IN VARCHAR2 := NULL)
RETURN NUMBER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9371"></a>Parameters</p>
<div id="ARPLS68175" class="tblformal">
<p class="titleintable"><a id="sthref9372"></a><a id="sthref9373"></a>Table 148-26 UNPACK_STGTAB_BASELINE Function Parameters</p>
<table class="cellalignment4330" title="UNPACK_STGTAB_BASELINE Function Parameters" summary="This table describes the parameters of DBMS_SPM.UNPACK_STGTAB_BASELINE" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t28">Parameter</th>
<th class="cellalignment4328" id="r1c2-t28">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t28" headers="r1c1-t28">
<p><code dir="ltr">table_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t28 r1c2-t28">
<p>Name of staging table from which SQL plan baselines are unpacked (case insensitive unless double quoted)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t28" headers="r1c1-t28">
<p><code dir="ltr">table_owner</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t28 r1c2-t28">
<p>Name of staging table owner.Default NULL means current schema is the table owner</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t28" headers="r1c1-t28">
<p><code dir="ltr">sql_handle</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t28 r1c2-t28">
<p>SQL handle (case sensitive)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t28" headers="r1c1-t28">
<p><code dir="ltr">plan_name</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t28 r1c2-t28">
<p>Plan name (case sensitive,% wildcards accepted)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t28" headers="r1c1-t28">
<p><code dir="ltr">sql_text</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t28 r1c2-t28">
<p>SQL text string (case sensitive, % wildcards accepted)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t28" headers="r1c1-t28">
<p><code dir="ltr">creator</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t28 r1c2-t28">
<p>Creator of SQL plan baseline (case insensitive unless double quoted)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t28" headers="r1c1-t28">
<p><code dir="ltr">origin</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t28 r1c2-t28">
<p>Origin of SQL plan baseline, should be <code dir="ltr">&#39;MANUAL-LOAD&#39;</code>, <code dir="ltr">&#39;AUTO-CAPTURE&#39;</code>,<code dir="ltr">&#39;MANUAL_SQLTUNE&#39;</code> or <code dir="ltr">&#39;AUTO-SQLTUNE&#39;</code> (case insensitive)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t28" headers="r1c1-t28">
<p><code dir="ltr">enabled</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t28 r1c2-t28">
<p>Must be &#39;<code dir="ltr">YES</code>&#39; or &#39;<code dir="ltr">NO</code>&#39; (case insensitive)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t28" headers="r1c1-t28">
<p><code dir="ltr">accepted</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t28 r1c2-t28">
<p>Must be &#39;<code dir="ltr">YES</code>&#39; or &#39;<code dir="ltr">NO</code>&#39; (case insensitive)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t28" headers="r1c1-t28">
<p><code dir="ltr">fixed</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t28 r1c2-t28">
<p>Must be &#39;<code dir="ltr">YES</code>&#39; or &#39;<code dir="ltr">NO</code>&#39; (case insensitive)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t28" headers="r1c1-t28">
<p><code dir="ltr">module</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t28 r1c2-t28">
<p>Module (case sensitive)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t28" headers="r1c1-t28">
<p><code dir="ltr">action</code></p>
</td>
<td class="cellalignment4329" headers="r13c1-t28 r1c2-t28">
<p>Action (case sensitive)</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9374"></a>Return Values</p>
<p>Number of plans unpacked</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4320">
<tr>
<td class="cellalignment4329">
<table class="cellalignment4325">
<tr>
<td class="cellalignment4324"><a href="d_spd.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4324"><a href="d_sql.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4332">
<table class="cellalignment4323">
<tr>
<td class="cellalignment4324"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4324"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4324"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4324"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4324"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4324"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>