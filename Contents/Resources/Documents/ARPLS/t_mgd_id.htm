<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-2458"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/MGD_ID%20Package%20Types"></a><title>MGD_ID Package Types</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1086"/>
<meta name="dcterms.created" content="2016-09-02T5:37:21Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database PL/SQL Packages and Types Reference"/>
<meta name="dcterms.identifier" content="E41829-07"/>
<meta name="dcterms.isVersionOf" content="ARPLS"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="t_ordvid.htm" title="Previous" type="text/html"/>
<link rel="Next" href="t_rule.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41829-07.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">286/290</span> <!-- End Header -->
<div id="ARPLS284" class="chapter"><a id="CHDJGEGI"></a>
<h1 class="chapter"><span class="secnum">282</span> MGD_ID Package Types</h1>
<p>The <code dir="ltr">MGD_ID</code> package provides an extensible framework that supports current radio-frequency ID (RFID) tags with the standard family of EPC bit encodings for the supported encoding types. The <code dir="ltr">MGD_ID</code> Package also supports new and evolving tag encodings that are not included in the current EPC standard (EPC v1.1 specification). The <code dir="ltr">MGD_ID</code> package contains several predefined types<a id="sthref20747"></a><a id="sthref20748"></a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<span class="italic">Oracle Database Development Guide</span> for more information.</div>
<p>This chapter contains the following topics:</p>
<ul>
<li>
<p><a href="#CIHGJHFB">Using MGD_ID Package Object Types</a></p>
</li>
<li>
<p><a href="#BGBICBFD">Summary of Types</a></p>
</li>
<li>
<p><a href="#BAJDHGAF">Summary of MGD_ID Subprograms</a></p>
</li>
</ul>
<p>The method described in this reference chapter show examples based on the examples shown in the constructor functions.</p>
<p>The examples in this chapter assume that the you have run the following set of commands before running the contents of each script:</p>
<pre dir="ltr">SQL&gt; connect / as sysdba;
Connected.
SQL&gt; create user mgduser identified by mgduser;
SQL&gt; grant connect, resource to mgduser;
SQL&gt; connect mgduser
Enter password: <span class="codeinlineitalic">mgduserpassword</span>
Connected.
SQL&gt; set serveroutput on;
</pre>
<div class="refentry"><a id="CIHGJHFB"></a>
<div id="ARPLS73300" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">Using MGD_ID Package Object Types</h2>
<p>This section contains topics that relate to using the <code dir="ltr">MGD_ID</code> package object types.</p>
<ul>
<li>
<p><a href="#CIHGIAGD">Security Model</a></p>
</li>
</ul>
<div id="ARPLS73301" class="refsect2"><a id="CIHGIAGD"></a>
<h3 class="refsect2">Security Model</h3>
<p>You must run the <code dir="ltr">catmgd.sql</code> script to load the <code dir="ltr">DBMS_MGD_ID_UTL</code> package and create the required Identity Code Package schema objects in the <code dir="ltr">MGDSYS</code> schema.</p>
<p><code dir="ltr">MGD_ID</code> is a <code dir="ltr">MGDSYS</code>-owned object type. Any <code dir="ltr">MGD_ID</code> subprogram called from an anonymous PL/SQL block is run using the privileges of the current user.</p>
<p>A user must be granted connect and resource roles to use the <code dir="ltr">MGD_ID</code> object type and its subprograms.</p>
<p><code dir="ltr">EXECUTE</code> privilege is granted to <code dir="ltr">PUBLIC</code> for this ADT: <code dir="ltr">MGD_ID</code>.</p>
<p>A public synonym, by the same name, is created for this ADT: <code dir="ltr">MGD_ID</code>.</p>
</div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="BGBICBFD"></a>
<div id="ARPLS71908" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">Summary of Types</h2>
<p><a href="#BABGBHAF">Table 282-1</a> describes the <code dir="ltr">MGD_ID</code> Package object types.</p>
<div id="ARPLS71909" class="tblformal">
<p class="titleintable"><a id="sthref20749"></a><a id="BABGBHAF"></a>Table 282-1 MGD_ID Package Object Types</p>
<table class="cellalignment4330" title="MGD_ID Package Object Types" summary="This two column table (read from right to left) lists the name of the object type followed by a brief description of the object type" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t3">Object Type Name</th>
<th class="cellalignment4328" id="r1c2-t3">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t3" headers="r1c1-t3">
<p><a href="#BABIAIIF">MGD_ID_COMPONENT Object Type</a></p>
</td>
<td class="cellalignment4329" headers="r2c1-t3 r1c2-t3">
<p>Datatype that specifies the name and value pair attributes that define a component</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t3" headers="r1c1-t3">
<p><a href="#BGBIDIHH">MGD_ID_COMPONENT_VARRAY Object Type</a></p>
</td>
<td class="cellalignment4329" headers="r3c1-t3 r1c2-t3">
<p>Datatype that specifies a list of up to 128 components as name-value attribute pairs used in two constructor functions for creating an identity code type object</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t3" headers="r1c1-t3">
<p><a href="#BGBGJCFF">MGD_ID Object Type</a></p>
</td>
<td class="cellalignment4329" headers="r4c1-t3 r1c2-t3">
<p>Represents an <code dir="ltr">MGD_ID</code> object that specifies the category identifier for the code category for this identity code and its list of components</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="ARPLS412" class="refsect2"><a id="BABIAIIF"></a>
<h3 class="refsect2"><a id="sthref20750"></a><a id="sthref20751"></a>MGD_ID_COMPONENT Object Type</h3>
<p>The <code dir="ltr">MGD_ID_COMPONENT</code> type is a datatype that specifies the name and value pair attributes that define a component.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20752"></a>Syntax</p>
<pre dir="ltr">MGD_ID_COMPONENT as object (name  VARCHAR2(256),
                            value VARCHAR2(1024));
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20753"></a>Attributes</p>
<div id="ARPLS71910" class="tblformal">
<p class="titleintable"><a id="sthref20754"></a><a id="CHDCCHBE"></a>Table 282-2 MGD_ID_COMPONENT Attributes</p>
<table class="cellalignment4330" title="MGD_ID_COMPONENT Attributes" summary="This table describes the attributes of the object type MGD_ID_COMPONENT and breifly describes them." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t4">Attribute</th>
<th class="cellalignment4328" id="r1c2-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t4" headers="r1c1-t4">
<p><code dir="ltr">name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t4 r1c2-t4">
<p>Name of component</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t4" headers="r1c1-t4">
<p><code dir="ltr">value</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t4 r1c2-t4">
<p>Value of the component as a character</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20755"></a>Examples</p>
<p>See the <a href="#BABHABIB">MGD_ID Constructor Function</a> for an example.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS413" class="refsect2"><a id="BGBIDIHH"></a>
<h3 class="refsect2"><a id="sthref20756"></a><a id="sthref20757"></a>MGD_ID_COMPONENT_VARRAY Object Type</h3>
<p>The <code dir="ltr">MGD_ID_COMPONENT_VARRAY</code> type is a datatype that specifies a list of up to 128 components as name-value attribute pairs for use in two constructor functions for creating a product code type object with its list of components.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20758"></a>Syntax</p>
<pre dir="ltr">MGD_ID_COMPONENT_VARRAY is VARRAY (128) of MGD_ID_COMPONENT;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20759"></a>Examples</p>
<p>See the <a href="#BABHABIB">MGD_ID Constructor Function</a> for an example.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS414" class="refsect2"><a id="BGBGJCFF"></a>
<h3 class="refsect2"><a id="sthref20760"></a><a id="sthref20761"></a>MGD_ID Object Type</h3>
<p>The <code dir="ltr">MGD_ID</code> type represents an identity code in an RFID application. This type represents RFID tags with standard EPC bit encoding as well as tag encodings that are not included in the EPC standard.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20762"></a>Syntax</p>
<pre dir="ltr">MGD_ID as object (category_id  VARCHAR2(256),
                  components   MGD_ID_COMPONENT_VARRAY);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20763"></a>Attributes</p>
<div id="ARPLS71911" class="tblformal">
<p class="titleintable"><a id="sthref20764"></a><a id="sthref20765"></a>Table 282-3 MGD_ID Object Type Attributes</p>
<table class="cellalignment4330" title="MGD_ID Object Type Attributes" summary="This table describes the attributes of the Object Type MGD_ID and breifly describes them." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t5">Attribute</th>
<th class="cellalignment4328" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t5" headers="r1c1-t5">
<p><code dir="ltr">category_id</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t5 r1c2-t5">
<p>Category identifier for the code category of this code</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t5" headers="r1c1-t5">
<p><code dir="ltr">components</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t5 r1c2-t5">
<p>List of components as name-value attributes</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20766"></a>Methods</p>
<p><a href="#CACHGFDG">Table 282-5</a> describes the methods of the <code dir="ltr">MGD_ID</code> object type.</p>
<div id="ARPLS71912" class="tblformal">
<p class="titleintable"><a id="sthref20767"></a><a id="sthref20768"></a>Table 282-4 MGD_ID Methods</p>
<table class="cellalignment4330" title="MGD_ID Methods" summary="This two column table (read from right to left) lists the name of the methods in alphabetical order followed by a brief description of each method." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t6">Method</th>
<th class="cellalignment4328" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t6" headers="r1c1-t6">
<p><code dir="ltr">MGD_ID</code> constructor function</p>
</td>
<td class="cellalignment4329" headers="r2c1-t6 r1c2-t6">
<p>Creates an <code dir="ltr">MGD_ID</code> object based on the parameters passed in and returns self as a result</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t6" headers="r1c1-t6">
<p><code dir="ltr">FORMAT</code> function</p>
</td>
<td class="cellalignment4329" headers="r3c1-t6 r1c2-t6">
<p>Returns the string representation of the <code dir="ltr">MGD_ID</code> in the specified format</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t6" headers="r1c1-t6">
<p><code dir="ltr">GET_COMPONENT</code> function</p>
</td>
<td class="cellalignment4329" headers="r4c1-t6 r1c2-t6">
<p>Returns the string value of the specified <code dir="ltr">MGD_ID</code> component</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t6" headers="r1c1-t6">
<p><code dir="ltr">TO_STRING</code> function</p>
</td>
<td class="cellalignment4329" headers="r5c1-t6 r1c2-t6">
<p>Returns the string value of semicolon (;) separated component name value pairs of the <code dir="ltr">MGD_ID</code> object</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t6" headers="r1c1-t6">
<p><code dir="ltr">TRANSLATE</code> function</p>
</td>
<td class="cellalignment4329" headers="r6c1-t6 r1c2-t6">
<p>Returns the result of the conversion of the identifier from one format to the specified format</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20769"></a>Examples</p>
<p>See the <a href="#BAJDHGAF">Summary of MGD_ID Subprograms</a> section and the section about using the Identity Code package in <a class="olink ADFNS1703" href="../ADFNS/adfns_idcode.htm#ADFNS1703"></a><span class="italic">Oracle Database Development Guide</span> for examples.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="BAJDHGAF"></a>
<div id="ARPLS71913" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">Summary of MGD_ID Subprograms</h2>
<p><a href="#CACHGFDG">Table 282-5</a> describes the subprograms in the <code dir="ltr">MGD_ID</code> object type.</p>
<p>All the values and names passed to the procedures defined in the <code dir="ltr">MGD_ID</code> object type are case insensitive unless otherwise mentioned. To preserve the case, enclose the values with double quotation marks.</p>
<div id="ARPLS71914" class="tblformal">
<p class="titleintable"><a id="sthref20770"></a><a id="CACHGFDG"></a>Table 282-5 MGD_ID Object Type Subprograms</p>
<table class="cellalignment4330" title="MGD_ID Object Type Subprograms" summary="This two column table (read from right to left) lists the name of the subprograms in alphabetical order followed by a brief description of each method." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t7">Subprogram</th>
<th class="cellalignment4328" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t7" headers="r1c1-t7">
<p><a href="#BABHABIB">MGD_ID Constructor Function</a></p>
</td>
<td class="cellalignment4329" headers="r2c1-t7 r1c2-t7">
<p>Creates an <code dir="ltr">MGD_ID</code> object based on the parameters passed in and returns self as a result</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t7" headers="r1c1-t7">
<p><a href="#CHECFIFB">FORMAT Function</a></p>
</td>
<td class="cellalignment4329" headers="r3c1-t7 r1c2-t7">
<p>Returns the string representation of the <code dir="ltr">MGD_ID</code> object in the specified format</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t7" headers="r1c1-t7">
<p><a href="#CHEGEFCH">GET_COMPONENT Function</a></p>
</td>
<td class="cellalignment4329" headers="r4c1-t7 r1c2-t7">
<p>Returns the string value of the specified <code dir="ltr">MGD_ID</code> component</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t7" headers="r1c1-t7">
<p><a href="#BAJFGHAA">TO_STRING Function</a></p>
</td>
<td class="cellalignment4329" headers="r5c1-t7 r1c2-t7">
<p>Returns the string value of semicolon (;) separated component name value pairs of the <code dir="ltr">MGD_ID</code> object</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t7" headers="r1c1-t7">
<p><a href="#CHDHIEBE">TRANSLATE Function</a></p>
</td>
<td class="cellalignment4329" headers="r6c1-t7 r1c2-t7">
<p>Returns the result of the conversion of the identifier from one format to the specified format</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="ARPLS415" class="refsect2"><a id="BABHABIB"></a>
<h3 class="refsect2"><a id="sthref20771"></a><a id="sthref20772"></a>MGD_ID Constructor Function</h3>
<p>This constructor function constructs an identity code type object, <code dir="ltr">MGD_ID</code>. The constructor function is overloaded. The different functionality of each form of syntax is presented along with the definitions.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20773"></a>Syntax</p>
<p>Constructs an <code dir="ltr">MGD_ID</code> object type based on the category ID and a list of components.</p>
<pre dir="ltr">MGD_ID (
   category_id      IN VARCHAR2,
   components       IN MGD_ID_COMPONENT_VARRAY)
 RETURN SELF AS RESULT DETERMINISTIC;
</pre>
<p>Constructs an <code dir="ltr">MGD_ID</code> object type based on the category ID, the identifier string, and the list of additional parameters required to create it.</p>
<pre dir="ltr">MGD_ID (
   category_id        VARCHAR2,
   identifier         VARCHAR2,
   parameter_list      VARCHAR2)
 RETURN SELF AS RESULT DETERMINISTIC;
</pre>
<p>Constructs an <code dir="ltr">MGD_ID</code> object type based on the category name, category version, and a list of components.</p>
<pre dir="ltr">MGD_ID (
   category_name      VARCHAR2,
   category_version   VARCHAR2,
   components         MGD_ID_COMPONENT_VARRAY)
 RETURN SELF AS RESULT DETERMINISTIC;
</pre>
<p>Constructs an <code dir="ltr">MGD_ID</code> object type based on the category name, category version, the identifier string, and the list of additional parameters required to create it.</p>
<pre dir="ltr">MGD_ID (
   category_name      VARCHAR2,
   category_version   VARCHAR2,
   identifier         VARCHAR2,
   parameter_list      VARCHAR2)
 RETURN SELF AS RESULT DETERMINISTIC;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20774"></a>Parameters</p>
<div id="ARPLS71915" class="tblformal">
<p class="titleintable"><a id="sthref20775"></a><a id="sthref20776"></a>Table 282-6 MGD_ID Constructor Function Parameters</p>
<table class="cellalignment4330" title="MGD_ID Constructor Function Parameters" summary="This table describes the parameters of the MGD_ID constructor function subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t8">Parameter</th>
<th class="cellalignment4328" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t8" headers="r1c1-t8">
<p><code dir="ltr">category_id</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t8 r1c2-t8">
<p>Category identifier</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t8" headers="r1c1-t8">
<p><code dir="ltr">components</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t8 r1c2-t8">
<p>List of component name value pairs</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t8" headers="r1c1-t8">
<p><code dir="ltr">category_name</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t8 r1c2-t8">
<p>Category name, such as <code dir="ltr">EPC</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t8" headers="r1c1-t8">
<p><code dir="ltr">category_version</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t8 r1c2-t8">
<p>Category version. If <code dir="ltr">NULL</code>, the latest version for the specified category name will be used.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t8" headers="r1c1-t8">
<p><code dir="ltr">identifier</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t8 r1c2-t8">
<p>Identifier string in any format of an encoding scheme in the specified category. For example, for SGTIN-96 encoding, the identifier can be in the format of <code dir="ltr">BINARY</code>, <code dir="ltr">PURE_IDENTITY</code>, <code dir="ltr">TAG_ENCODING</code>, or <code dir="ltr">LEGACY</code>.</p>
<p>Express this identifier as a string according to the appropriate grammar or pattern in the tag data translation (TDT) markup file. For example, a binary string consisting of characters <code dir="ltr">0</code> and <code dir="ltr">1</code>, a URI (either tag-encoding or pure-identity formats), or a serialized legacy code expressed as a string format for input, such as <code dir="ltr">gtin=00037000302414;serial=10419703</code> for a SGTIN coding scheme.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t8" headers="r1c1-t8">
<p><code dir="ltr">parameter_list</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t8 r1c2-t8">
<p>List of additional parameters required to create the object in the representation. The list is expressed as a parameter string containing key-value pairs, separated by the semicolon (;) as a delimiter between key-value pairs. For example, for a GTIN code, the parameter string would look as follows:</p>
<pre dir="ltr">filter=3;companyprefixlength=7;taglength=96
</pre></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20777"></a>Usage Notes</p>
<ul>
<li>
<p>Use <code dir="ltr">MGD_ID_UTL.EPC_ENCODING_CATEGORY_ID</code> as <code dir="ltr">category_id</code>.</p>
</li>
<li>
<p>If the category is not already registered, an error is raised.</p>
</li>
<li>
<p>If the <code dir="ltr">bit_length</code> parameter is <code dir="ltr">NULL</code>, the <code dir="ltr">bit_length</code> is 8* the length of <code dir="ltr">bit_encoding</code>.</p>
</li>
<li>
<p>If the component list does not contain all required components, an exception <code dir="ltr">MGD_ID_UTL.e_LackComponent</code> will be thrown.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20778"></a>Examples</p>
<p>The following examples construct identity code type objects.</p>
</div>
<!-- class="refsubsect" -->
<p>Construct an <code dir="ltr">MGD_ID</code> object (SGTIN-64) passing in the category ID and a list of components.</p>
<pre dir="ltr">--Contents of constructor11.sql
call DBMS_MGD_ID_UTL.set_proxy(&#39;www-proxy.example.com&#39;, &#39;80&#39;);
call DBMS_MGD_ID_UTL.refresh_category(&#39;1&#39;);
select MGD_ID(&#39;1&#39;, 
              MGD_ID_COMPONENT_VARRAY(
               MGD_ID_COMPONENT(&#39;companyprefix&#39;,&#39;0037000&#39;),
               MGD_ID_COMPONENT(&#39;itemref&#39;,&#39;030241&#39;),
               MGD_ID_COMPONENT(&#39;serial&#39;,&#39;1041970&#39;),
               MGD_ID_COMPONENT(&#39;schemes&#39;,&#39;SGTIN-64&#39;)
              )
             ) from dual;
call DBMS_MGD_ID_UTL.remove_proxy();

SQL&gt; @constructor11.sql
.
.
.
MGD_ID(&#39;1&#39;, MGD_ID_COMPONENT_VARRAY(MGD_ID_COMPONENT(&#39;companyprefix&#39;, &#39;0037000&#39;), 
                                    MGD_ID_COMPONENT(&#39;itemref&#39;, &#39;030241&#39;), 
                                    MGD_ID_COMPONENT(&#39;serial&#39;, &#39;1041970&#39;),
                                    MGD_ID_COMPONENT(&#39;schemes&#39;, &#39;SGTIN-64&#39;)))
.
.
.
</pre>
<p>Constructs an <code dir="ltr">MGD_ID</code> object (SGTIN-64) passing in the category ID, the tag identifier, and the list of additional parameters that may be required to create it.</p>
<pre dir="ltr">--Contents of constructor22.sql
call DBMS_MGD_ID_UTL.set_proxy(&#39;www-proxy.example.com&#39;, &#39;80&#39;);
call DBMS_MGD_ID_UTL.refresh_category(&#39;1&#39;);
select MGD_ID(&#39;1&#39;, 
              &#39;urn:epc:id:sgtin:0037000.030241.1041970&#39;, 
              &#39;filter=3;scheme=SGTIN-64&#39;) from dual;
call DBMS_MGD_ID_UTL.remove_proxy();

SQL&gt; @constructor22.sql
.
.
.
MGD_ID(&#39;1&#39;, MGD_ID_COMPONENT_VARRAY(MGD_ID_COMPONENT(&#39;filter&#39;, &#39;3&#39;), 
                                    MGD_ID_COMPONENT(&#39;schemes&#39;, &#39;SGTIN-64&#39;), 
                                    MGD_ID_COMPONENT(&#39;companyprefixlength&#39;, &#39;7&#39;), 
                                    MGD_ID_COMPONENT(&#39;companyprefix&#39;, &#39;0037000&#39;), 
                                    MGD_ID_COMPONENT(&#39;scheme&#39;, &#39;SGTIN-64&#39;), 
                                    MGD_ID_COMPONENT(&#39;serial&#39;, &#39;1041970&#39;), 
                                    MGD_ID_COMPONENT(&#39;itemref&#39;, &#39;030241&#39;)))
.
.
.
</pre>
<p>Construct an <code dir="ltr">MGD_ID</code> object (SGTIN-64) passing in the category name, category version (if <code dir="ltr">NULL</code>, then the latest version will be used), and a list of components.</p>
<pre dir="ltr">--Contents of constructor33.sql
call DBMS_MGD_ID_UTL.set_proxy(&#39;www-proxy.example.com&#39;, &#39;80&#39;);
call DBMS_MGD_ID_UTL.refresh_category(DBMS_MGD_ID_UTL.get_category_id(&#39;EPC&#39;, NULL));
select MGD_ID(&#39;EPC&#39;, NULL,
              MGD_ID_COMPONENT_VARRAY(
               MGD_ID_COMPONENT(&#39;companyprefix&#39;,&#39;0037000&#39;),
               MGD_ID_COMPONENT(&#39;itemref&#39;,&#39;030241&#39;),
               MGD_ID_COMPONENT(&#39;serial&#39;,&#39;1041970&#39;),
               MGD_ID_COMPONENT(&#39;schemes&#39;,&#39;SGTIN-64&#39;)
              )
             ) from dual;
call DBMS_MGD_ID_UTL.remove_proxy();

SQL&gt; @constructor33.sql
.
.
.
MGD_ID(&#39;1&#39;, MGD_ID_COMPONENT_VARRAY(MGD_ID_COMPONENT(&#39;companyprefix&#39;, &#39;0037000&#39;), 
                                    MGD_ID_COMPONENT(&#39;itemref&#39;, &#39;030241&#39;), 
                                    MGD_ID_COMPONENT(&#39;serial&#39;, &#39;1041970&#39;),
                                    MGD_ID_COMPONENT(&#39;schemes&#39;, &#39;SGTIN-64&#39;)))
.
.
.
</pre>
<p>Constructs an <code dir="ltr">MGD_ID</code> object (SGTIN-64) passing in the category name and category version, the tag identifier, and the list of additional parameters that may be required to create it.</p>
<pre dir="ltr">--Contents of constructor44.sql
call DBMS_MGD_ID_UTL.set_proxy(&#39;www-proxy.example.com&#39;, &#39;80&#39;);
call DBMS_MGD_ID_UTL.refresh_category(DBMS_MGD_ID_UTL.get_category_id(&#39;EPC&#39;, NULL));
select MGD_ID(&#39;EPC&#39;, NULL,
              &#39;urn:epc:id:sgtin:0037000.030241.1041970&#39;, 
              &#39;filter=3;scheme=SGTIN-64&#39;) from dual;
call DBMS_MGD_ID_UTL.remove_proxy();

SQL&gt; @constructor4.sql
.
.
.
MGD_ID(&#39;1&#39;, MGD_ID_COMPONENT_VARRAY(MGD_ID_COMPONENT(&#39;filter&#39;, &#39;3&#39;),
                                    MGD_ID_COMPONENT(&#39;schemes&#39;, &#39;SGTIN-64&#39;), 
                                    MGD_ID_COMPONENT(&#39;companyprefixlength&#39;, &#39;7&#39;), 
                                    MGD_ID_COMPONENT(&#39;companyprefix&#39;, &#39;0037000&#39;), 
                                    MGD_ID_COMPONENT(&#39;scheme&#39;, &#39;SGTIN-64&#39;), 
                                    MGD_ID_COMPONENT(&#39;serial&#39;, &#39;1041970&#39;), 
                                    MGD_ID_COMPONENT(&#39;itemref&#39;, &#39;030241&#39;)))
.
.
.
</pre></div>
<!-- class="refsect2" -->
<div id="ARPLS416" class="refsect2"><a id="CHECFIFB"></a>
<h3 class="refsect2"><a id="sthref20779"></a><a id="sthref20780"></a>FORMAT Function</h3>
<p>This function returns the string representation of the <code dir="ltr">MGD_ID</code> object in the specified format.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20781"></a>Syntax</p>
<pre dir="ltr">FORMAT (parameter_list  IN VARCHAR2,
        output_format   IN VARCHAR2)
 RETURN VARCHAR2 DETERMINISTIC;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20782"></a>Parameters</p>
<div id="ARPLS71916" class="tblformal">
<p class="titleintable"><a id="sthref20783"></a><a id="sthref20784"></a>Table 282-7 FORMAT Function Parameters</p>
<table class="cellalignment4330" title="FORMAT Function Parameters" summary="This table describes the parameters of the FORMAT function subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t9">Parameter</th>
<th class="cellalignment4328" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t9" headers="r1c1-t9">
<p><code dir="ltr">parameter_list</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t9 r1c2-t9">
<p>List of additional parameters required to create the object in the representation. The list is expressed as a parameter string containing key-value pairs, separated by the semicolon (;) as a delimiter between key-value pairs. For example, for a GTIN code, the parameter string would look as follows:</p>
<pre dir="ltr">filter=3;companyprefixlength=7;taglength=96
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t9" headers="r1c1-t9">
<p><code dir="ltr">output_format</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t9 r1c2-t9">
<p>One of the supported output formats into which an <code dir="ltr">MGD_ID</code> component is formatted:</p>
<ul>
<li>
<p><code dir="ltr">BINARY</code></p>
</li>
<li>
<p><code dir="ltr">LEGACY</code></p>
</li>
<li>
<p><code dir="ltr">TAG_ENCODING</code></p>
</li>
<li>
<p><code dir="ltr">PURE_IDENTITY</code></p>
</li>
<li>
<p><code dir="ltr">ONS_HOSTNAME</code></p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20785"></a>Examples</p>
<p>See the example for the <a href="#CHEGEFCH">GET_COMPONENT Function</a>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS417" class="refsect2"><a id="CHEGEFCH"></a>
<h3 class="refsect2"><a id="sthref20786"></a><a id="sthref20787"></a>GET_COMPONENT Function</h3>
<p>This function returns the value of the specified <code dir="ltr">MGD_ID</code> component.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20788"></a>Syntax</p>
<pre dir="ltr">GET_COMPONENT (
   component_name  IN  VARCHAR2)
 RETURN VARCHAR2 DETERMINISTIC;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20789"></a>Parameters</p>
<div id="ARPLS71917" class="tblformal">
<p class="titleintable"><a id="sthref20790"></a><a id="sthref20791"></a>Table 282-8 GET_COMPONENT Function Parameter</p>
<table class="cellalignment4330" title="GET_COMPONENT Function Parameter" summary="This table describes the parameters of the GET_COMPONENT subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t10">Parameter</th>
<th class="cellalignment4328" id="r1c2-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t10" headers="r1c1-t10">
<p><code dir="ltr">component_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t10 r1c2-t10">
<p>Name of component</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20792"></a>Usage Notes</p>
<ul>
<li>
<p>If the code is an invalid code, meaning its structure is not defined in the metadata table, an error is raised.</p>
</li>
<li>
<p>If the code is valid, but it does not contain the required component, <code dir="ltr">NULL</code> is returned.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20793"></a>Examples</p>
<p>The following example returns the general manager, object class, and serial number components for this GID-96 identity component:</p>
<pre dir="ltr">--Contents of get_components.sql file
call DBMS_MGD_ID_UTL.set_proxy(&#39;www-proxy.example.com&#39;, &#39;80&#39;);
DECLARE
id  MGD_ID;
BEGIN
 DBMS_MGD_ID_UTL.set_java_logging_level(DBMS_MGD_ID_UTL.LOGGING_LEVEL_OFF);
 DBMS_MGD_ID_UTL.refresh_category(DBMS_MGD_ID_UTL.get_category_id(&#39;EPC&#39;, NULL));
    ---------------
    --PURE_IDENTIT
    ---------------
    dbms_output.put_line(&#39;..Testing constructor with pure identity&#39;);
    ----------------------------------------------------------------------
    -- PURE_IDENTITY representation can be translated to BINARY and 
    -- TAG_ENCODING ONLY when BOTH scheme and filer are provided.
    ----------------------------------------------------------------------
    id := MGD_ID(&#39;EPC&#39;, NULL, &#39;urn:epc:id:sgtin:0037000.030241.1041970&#39;, &#39;scheme=SGTIN-64;filter=3&#39;);
    dbms_output.put_line(id.to_string);
    dbms_output.put_line(&#39;filter         = &#39; || id.get_component(&#39;filter&#39;));
    dbms_output.put_line(&#39;company prefix = &#39; || id.get_component(&#39;companyprefix&#39;));
    dbms_output.put_line(&#39;itemref        = &#39; || id.get_component(&#39;itemref&#39;));
    dbms_output.put_line(&#39;serial         = &#39; || id.get_component(&#39;serial&#39;));
    dbms_output.put_line(&#39;BINARY format  = &#39; || id.format(NULL, &#39;BINARY&#39;));
    dbms_output.put_line(&#39;PURE_IDENTITY format  = &#39; || id.format(NULL, &#39;PURE_IDENTITY&#39;));
    dbms_output.put_line(&#39;TAG_ENCODING format   = &#39; || id.format(NULL, &#39;TAG_ENCODING&#39;));
END;
/
SHOW ERRORS;
call DBMS_MGD_ID_UTL.remove_proxy();
SQL&gt; @get_component.sql
.
.
.
..Testing constructor with pure identity
category_id =1;filter = 3;schemes = SGTIN-64;companyprefixlength =
7;companyprefix = 0037000;scheme = SGTIN-64;serial = 1041970;itemref = 030241
filter         = 3
company prefix = 0037000
itemref        = 030241
serial         = 1041970
BINARY format  =1001100000000000001000001110110001000010000011111110011000110010
PURE_IDENTITY format  = urn:epc:id:sgtin:0037000.030241.1041970
TAG_ENCODING format   = urn:epc:tag:sgtin-64:3.0037000.030241.1041970
PL/SQL procedure successfully completed.
.
.
.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS418" class="refsect2"><a id="BAJFGHAA"></a>
<h3 class="refsect2"><a id="sthref20794"></a><a id="sthref20795"></a>TO_STRING Function</h3>
<p>This function returns the semicolon (;) separated component name value pairs of the <code dir="ltr">MGD_ID</code> object.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20796"></a>Syntax</p>
<pre dir="ltr">TO_STRING 
 RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20797"></a>Examples</p>
<p>The following example converts the <code dir="ltr">MGD_ID</code> object into a string value:</p>
<pre dir="ltr">-- Contents of tostring3.sql file
call DBMS_MGD_ID_UTL.set_proxy(&#39;www-proxy.example.com&#39;, &#39;80&#39;);
DECLARE
id          MGD_ID;
BEGIN
 DBMS_MGD_ID_UTL.refresh_category(DBMS_MGD_ID_UTL.get_category_id(&#39;EPC&#39;, NULL));
 dbms_output.put_line(&#39;..Testing to_string&#39;);
   id := mgd_id(&#39;EPC&#39;, NULL, &#39;urn:epc:id:gid:0037000.30241.1041970&#39;, &#39;scheme=GID-96&#39;);
      DBMS_OUTPUT.PUT_LINE(&#39;mgd_id object as a string&#39;);
      DBMS_OUTPUT.PUT_LINE(id.to_string); 
END;
/
SHOW ERRORS;
call DBMS_MGD_ID_UTL.remove_proxy();
connect / as sysdba;
drop user mgduser cascade;

SQL&gt; @tostring3.sql
.
.
.
..Testing to_string
mgd_id object as a string
category_id =1;schemes = GID-96;objectclass = 30241;generalmanager =
0037000;scheme = GID-96;1 = 1;serial = 1041970
PL/SQL procedure successfully completed.
.
.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS419" class="refsect2"><a id="CHDHIEBE"></a>
<h3 class="refsect2"><a id="sthref20798"></a><a id="sthref20799"></a>TRANSLATE Function</h3>
<p>This static function translates between different representations directly without first constructing an <code dir="ltr">MGD_ID</code> object. This method is overloaded. The different functionality of each form of syntax is presented along with the definitions.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20800"></a>Syntax</p>
<p>Converts the identifier in one format to another given the category name, the tag identifier, the parameter list, and the output format.</p>
<pre dir="ltr">TRANSLATE (
   category_name    IN VARCHAR2,
   identifier       IN VARCHAR2,
   parameter_list   IN VARCHAR2,
   output_format    IN VARCHAR2)
 RETURN VARCHAR2 DETERMINISTIC;
</pre>
<p>Converts the identifier in one format to another given the category name, category version, the tag identifier, the parameter list, and the output format.</p>
<pre dir="ltr">TRANSLATE (
   category_name    IN VARCHAR2,
   category_version IN VARCHAR2,
   identifier       IN VARCHAR2,
   parameter_list   IN VARCHAR2,
   output_format    IN VARCHAR2)
 RETURN VARCHAR2 DETERMINISTIC;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20801"></a>Parameters</p>
<div id="ARPLS71918" class="tblformal">
<p class="titleintable"><a id="sthref20802"></a><a id="sthref20803"></a>Table 282-9 TRANSLATE Function Parameters</p>
<table class="cellalignment4330" title="TRANSLATE Function Parameters" summary="This table describes the parameters of the TRANSLATE subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t11">Parameter</th>
<th class="cellalignment4328" id="r1c2-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t11" headers="r1c1-t11">
<p><code dir="ltr">category_name</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t11 r1c2-t11">
<p>Name of category</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t11" headers="r1c1-t11">
<p><code dir="ltr">category_version</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t11 r1c2-t11">
<p>Category version. If <code dir="ltr">NULL</code>, the latest version of the specified category name will be used.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t11" headers="r1c1-t11">
<p><code dir="ltr">identifier</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t11 r1c2-t11">
<p>EPC identifier, expressed as a string in accordance with one of the grammars or patterns in the TDT markup file. For example, a binary string consisting of characters <code dir="ltr">0</code> and <code dir="ltr">1</code>, a URI (either tag-encoding or pure-identity formats), or a serialized legacy code expressed as a string format for input, such as <code dir="ltr">gtin=00037000302414;serial=10419703</code> for a SGTIN coding scheme.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t11" headers="r1c1-t11">
<p><code dir="ltr">parameter_list</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t11 r1c2-t11">
<p>List of additional parameters required to create the object in the representation. The list is expressed as a parameter string containing key-value pairs, separated by the semicolon (;) as a delimiter between key-value pairs. For example, for a GTIN code, the parameter string would look as follows:</p>
<pre dir="ltr">filter=3;companyprefixlength=7;taglength=96
</pre></td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t11" headers="r1c1-t11">
<p><code dir="ltr">output_format</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t11 r1c2-t11">
<p>One of the supported output formats into which an <code dir="ltr">MGD_ID</code> component shall be converted:</p>
<ul>
<li>
<p><code dir="ltr">BINARY</code></p>
</li>
<li>
<p><code dir="ltr">LEGACY</code></p>
</li>
<li>
<p><code dir="ltr">TAG_ENCODING</code></p>
</li>
<li>
<p><code dir="ltr">PURE_IDENTITY</code></p>
</li>
<li>
<p><code dir="ltr">ONS_HOSTNAME</code></p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20804"></a>Usage Notes</p>
<p>When converting from a pure identity representation to a binary representation, the filter value must be supplied as a value using the <code dir="ltr">parameter_list</code> parameter.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20805"></a>Examples</p>
<p>The following examples translates one GID-96 representation into another:</p>
<pre dir="ltr">-- Contents of translate1.sql file
call DBMS_MGD_ID_UTL.set_proxy(&#39;www-proxy.example.com&#39;, &#39;80&#39;);
DECLARE
id          MGD_ID;
BEGIN
 DBMS_MGD_ID_UTL.refresh_category(DBMS_MGD_ID_UTL.get_category_id(&#39;EPC&#39;, NULL));
  dbms_output.put_line(&#39;Category ID is EPC, Identifier is BINARY, Output format is BINARY&#39;);
  dbms_output.put_line(
    mgd_id.translate(&#39;EPC&#39;, 
NULL,&#39;001101010000000000001001000010001000000000000111011000100001000000000000000011111110011000110010&#39;
, NULL, &#39;BINARY&#39;));
  dbms_output.put_line(&#39;Category ID is EPC, Identifier is BINARY, Output format is PURE_IDENTITY&#39;);
  dbms_output.put_line(
    mgd_id.translate(&#39;EPC&#39;, 
NULL,&#39;001101010000000000001001000010001000000000000111011000100001000000000000000011111110011000110010&#39;
, NULL, &#39;PURE_IDENTITY&#39;));
dbms_output.put_line(&#39;Category ID is EPC, Identifier is BINARY, Output format is TAG_ENCODING&#39;);
  dbms_output.put_line(
    mgd_id.translate(&#39;EPC&#39;, 
NULL,&#39;001101010000000000001001000010001000000000000111011000100001000000000000000011111110011000110010&#39;
, NULL, &#39;TAG_ENCODING&#39;));
  dbms_output.put_line(&#39;Category ID is EPC, Identifier is TAG_ENCODING, Output format is BINARY&#39;);
  dbms_output.put_line(
    mgd_id.translate(&#39;EPC&#39;, NULL, 
                     &#39;urn:epc:tag:gid-96:0037000.30241.1041970&#39;, 
                     NULL, &#39;BINARY&#39;));
  dbms_output.put_line(&#39;Category ID is EPC, Identifier is TAG_ENCODING, Output format is 
PURE_IDENTITY&#39;);
  dbms_output.put_line(
    mgd_id.translate(&#39;EPC&#39;, NULL, 
                     &#39;urn:epc:tag:gid-96:0037000.30241.1041970&#39;, 
                     NULL, &#39;PURE_IDENTITY&#39;));
dbms_output.put_line(&#39;Category ID is EPC, Identifier is TAG_ENCODING, Output format is TAG_ENCODING&#39;);
  dbms_output.put_line(
    mgd_id.translate(&#39;EPC&#39;, NULL, 
                     &#39;urn:epc:tag:gid-96:0037000.30241.1041970&#39;, 
                     NULL, &#39;TAG_ENCODING&#39;));
  dbms_output.put_line(&#39;Category ID is EPC, Identifier is PURE_IDENTITY, Output format is BINARY&#39;);
  dbms_output.put_line(
    mgd_id.translate(&#39;EPC&#39;, NULL, 
                     &#39;urn:epc:id:gid:0037000.30241.1041970&#39;,
                     NULL, &#39;BINARY&#39;));
  dbms_output.put_line(&#39;Category ID is EPC, Identifier is PURE_IDENTITY, Output format is PURE_IDENTITY&#39;);
  dbms_output.put_line(
    mgd_id.translate(&#39;EPC&#39;, NULL, 
                     &#39;urn:epc:id:gid:0037000.30241.1041970&#39;,
                     NULL, &#39;PURE_IDENTITY&#39;));
  dbms_output.put_line(&#39;Category ID is EPC, Identifier is PURE_IDENTITY, Output format is TAG_ENCODING&#39;);
  dbms_output.put_line(
    mgd_id.translate(&#39;EPC&#39;, NULL, 
                     &#39;urn:epc:id:gid:0037000.30241.1041970&#39;,
                     NULL, &#39;TAG_ENCODING&#39;));
END;
/
SHOW ERRORS;
call DBMS_MGD_ID_UTL.remove_proxy();

SQL&gt; @translate1.sql
.
.
.
Category ID is EPC, Identifier is BINARY, Output format is BINARY
001101010000000000001001000010001000000000000111011000100001000000000000000011111110011000110010
Category ID is EPC, Identifier is BINARY, Output format is PURE_IDENTITY
urn:epc:id:gid:37000.30241.1041970
Category ID is EPC, Identifier is BINARY, Output format is TAG_ENCODING
urn:epc:tag:gid-96:37000.30241.1041970
Category ID is EPC, Identifier is TAG_ENCODING, Output format is BINARY
001101010000000000001001000010001000000000000111011000100001000000000000000011111110011000110010
Category ID is EPC, Identifier is TAG_ENCODING, Output format is PURE_IDENTITY
urn:epc:id:gid:0037000.30241.1041970
Category ID is EPC, Identifier is TAG_ENCODING, Output format is TAG_ENCODING
urn:epc:tag:gid-96:0037000.30241.1041970
Category ID is EPC, Identifier is PURE_IDENTITY, Output format is BINARY
001101010000000000001001000010001000000000000111011000100001000000000000000011111110011000110010
Category ID is EPC, Identifier is PURE_IDENTITY, Output format is PURE_IDENTITY
urn:epc:id:gid:0037000.30241.1041970
Category ID is EPC, Identifier is PURE_IDENTITY, Output format is TAG_ENCODING
urn:epc:tag:gid-96:0037000.30241.1041970
PL/SQL procedure successfully completed.
.
.
.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4320">
<tr>
<td class="cellalignment4329">
<table class="cellalignment4325">
<tr>
<td class="cellalignment4324"><a href="t_ordvid.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4324"><a href="t_rule.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4332">
<table class="cellalignment4323">
<tr>
<td class="cellalignment4324"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4324"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4324"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4324"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4324"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4324"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>