<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-2488"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/UTL_TCP"></a><title>UTL_TCP</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1086"/>
<meta name="dcterms.created" content="2016-09-02T5:37:18Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database PL/SQL Packages and Types Reference"/>
<meta name="dcterms.identifier" content="E41829-07"/>
<meta name="dcterms.isVersionOf" content="ARPLS"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="u_spadv.htm" title="Previous" type="text/html"/>
<link rel="Next" href="u_url.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41829-07.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">269/290</span> <!-- End Header -->
<div id="ARPLS075" class="chapter"><a id="CEGDFJJE"></a>
<h1 class="chapter"><span class="secnum">265</span> UTL_TCP</h1>
<p>With the <code dir="ltr"><a id="sthref19906"></a>UTL_TCP</code> package and its procedures and functions, PL/SQL applications can communicate with external TCP/IP-based servers using TCP/IP. Because many Internet application protocols are based on TCP/IP, this package is useful to PL/SQL applications that use Internet protocols and e-mail.</p>
<p>This chapter contains the following topics:</p>
<ul>
<li>
<p><a href="#BABEDFBB">Using UTL_TCP</a></p>
<ul>
<li>
<p>Overview</p>
</li>
<li>
<p>Security Model</p>
</li>
<li>
<p>Types</p>
</li>
<li>
<p>Exceptions</p>
</li>
<li>
<p>Rules and Limits</p>
</li>
<li>
<p>Examples</p>
</li>
</ul>
</li>
<li>
<p><a href="#i996849">Summary of UTL_TCP Subprograms</a></p>
</li>
</ul>
<div class="refentry"><a id="BABEDFBB"></a>
<div id="ARPLS71533" class="refsect1">
<h2 class="refsect1">Using UTL_TCP</h2>
<ul>
<li>
<p><a href="#i1003152">Overview</a></p>
</li>
<li>
<p><a href="#CEGJHICF">Security Model</a></p>
</li>
<li>
<p><a href="#i1003123">Types</a></p>
</li>
<li>
<p><a href="#i1003103">Exceptions</a></p>
</li>
<li>
<p><a href="#i1003167">Rules and Limits</a></p>
</li>
<li>
<p><a href="#i1004190">Examples</a></p>
</li>
</ul>
<div id="ARPLS71534" class="refsect2"><a id="i1003152"></a>
<h3 class="refsect2">Overview</h3>
<p>The <code dir="ltr">UTL_TCP</code> package provides TCP/IP client-side access functionality in PL/SQL.</p>
</div>
<!-- class="refsect2" -->
<div id="ARPLS71535" class="refsect2"><a id="CEGJHICF"></a>
<h3 class="refsect2">Security Model</h3>
<p>This package is an invoker&#39;s rights package and the invoking user needs the connect privilege granted in the access control list assigned to the remote network host to which he wants to connect.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
For more information about managing fine-grained access, see <a class="olink DBSEG40012" href="../DBSEG/fine_grained_access.htm#DBSEG40012"><span class="italic">Oracle Database Security Guide</span></a></div>
</div>
<!-- class="refsect2" -->
<div id="ARPLS71536" class="refsect2"><a id="i1003123"></a>
<h3 class="refsect2">Types</h3>
<ul>
<li>
<p><a href="#i1003056">CONNECTION Type</a></p>
</li>
<li>
<p><a href="#i1004870">CRLF</a></p>
</li>
</ul>
<div id="ARPLS71537" class="refsect3"><a id="i1003056"></a>
<h4 class="refsect3">CONNECTION Type</h4>
<p>This is a PL/SQL record type used to represent a TCP/IP connection.</p>
<p class="subhead1"><a id="ARPLS71538"></a>Syntax</p>
<pre dir="ltr">TYPE connection IS RECORD (
    remote_host    VARCHAR2(255),
    remote_port    PLS_INTEGER,
    local_host     VARCHAR2(255),
    local_port     PLS_INTEGER,
    charset        VARCHAR2(30), 
    newline        VARCHAR2(2),
    tx_timeout     PLS_INTEGER,
    private_sd     PLS_INTEGER);
</pre>
<p class="subhead1"><a id="ARPLS71539"></a>Fields</p>
<div id="ARPLS71540" class="tblformal">
<p class="titleintable"><a id="sthref19907"></a><a id="sthref19908"></a>Table 265-1 Connection Record Type Fields</p>
<table class="cellalignment4330" title="Connection Record Type Fields" summary="This table describes Fields of the Connection Record Type used by UTL_TCP subprograms." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t3">Field</th>
<th class="cellalignment4328" id="r1c2-t3">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t3" headers="r1c1-t3">
<p><code dir="ltr">remote_host</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t3 r1c2-t3">
<p>Name of the remote host when connection is established. <code dir="ltr">NULL</code> when no connection is established.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t3" headers="r1c1-t3">
<p><code dir="ltr">remote_port</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t3 r1c2-t3">
<p>Port number of the remote host connected. <code dir="ltr">NULL</code> when no connection is established.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t3" headers="r1c1-t3">
<p><code dir="ltr">local_host</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t3 r1c2-t3">
<p>Name of the local host used to establish the connection. <code dir="ltr">NULL</code> when no connection is established.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t3" headers="r1c1-t3">
<p><code dir="ltr">local_port</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t3 r1c2-t3">
<p>Port number of the local host used to establish the connection. <code dir="ltr">NULL</code> when no connection is established.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t3" headers="r1c1-t3">
<p><code dir="ltr">charset</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t3 r1c2-t3">
<p>The on-the-wire character set. Since text messages in the database may be encoded in a character set that is different from the one expected on the wire (that is, the character set specified by the communication protocol, or the one stipulated by the other end of the communication), text messages in the database are converted to and from the on-the-wire character set as they are sent and received on the network.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t3" headers="r1c1-t3">
<p><code dir="ltr">newline</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t3 r1c2-t3">
<p>Newline character sequence. This newline character sequence is appended to the text line sent by <code dir="ltr">WRITE_LINE</code> API.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t3" headers="r1c1-t3">
<p><code dir="ltr">tx_timeout</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t3 r1c2-t3">
<p>Time in seconds that the UTL_TCP package waits before giving up in a read or write operation in this connection. In read operations, this package gives up if no data is available for reading immediately. In write operations, this package gives up if the output buffer is full and no data is to be sent in the network without being blocked. Zero (0) indicates not to wait at all. <code dir="ltr">NULL</code> indicates to wait forever.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead1"><a id="ARPLS71541"></a>Usage Notes</p>
<p>The fields in a connection record are used to return information about the connection, which is often made using <code dir="ltr">OPEN_CONNECTION</code>. Changing the values of those fields has no effect on the connection. The fields <code dir="ltr">private_XXXX</code> are for implementation use only. You should not modify the values.</p>
<p>In the current release of the <code dir="ltr">UTL_TCP</code> package, the parameters <code dir="ltr">local_host</code> and <code dir="ltr">local_port</code> are ignored when <code dir="ltr">open_connection</code> makes a TCP/IP connection. It does not attempt to use the specified local host and port number when the connection is made. The <code dir="ltr">local_host</code> and <code dir="ltr">local_port</code> fields are not set in the connection record returned by the function.</p>
<p>Time out on write operations is not supported in the current release of the <code dir="ltr">UTL_TCP</code> package.</p>
</div>
<!-- class="refsect3" -->
<div id="ARPLS71542" class="refsect3"><a id="i1004870"></a>
<h4 class="refsect3">CRLF</h4>
<p>The character sequence carriage-return line-feed. It is the newline sequence commonly used by many communication standards.</p>
<p class="subhead1"><a id="ARPLS71543"></a>Syntax</p>
<pre dir="ltr">CRLF CONSTANT VARCHAR2(2 CHAR);
</pre>
<p class="subhead1"><a id="ARPLS71544"></a>Usage Notes</p>
<p>This package variable defines the newline character sequence commonly used in many Internet protocols. This is the default value of the newline character sequence for <code dir="ltr">WRITE_LINE,</code> specified when a connection is opened. While such protocols use <code dir="ltr">&lt;CR&gt;&lt;LF&gt;</code> to denote a new line, some implementations may choose to use just line-feed to denote a new line. In such cases, users can specify a different newline character sequence when a connection is opened.</p>
</div>
<!-- class="refsect3" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71545" class="refsect2"><a id="i1003103"></a>
<h3 class="refsect2">Exceptions</h3>
<p><a id="i1002983"></a>The exceptions raised by the TCP/IP package are listed in <a href="#BHADACGB">Table 265-2</a>.</p>
<div id="ARPLS71546" class="tblformal">
<p class="titleintable"><a id="sthref19909"></a><a id="BHADACGB"></a>Table 265-2 <span class="bolditalic">TCP/IP Exceptions</span></p>
<table class="cellalignment4330" title="TCP/IP Exceptions" summary="This table describes Exceptions raised by UTL_TCP subprograms." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t4">Exception</th>
<th class="cellalignment4328" id="r1c2-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t4" headers="r1c1-t4">
<p><code dir="ltr">BUFFER_TOO_SMALL</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t4 r1c2-t4">
<p>Buffer is too small for input that requires look-ahead</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t4" headers="r1c1-t4">
<p><code dir="ltr">END_OF_INPUT</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t4 r1c2-t4">
<p>Raised when no more data is available to read from the connection</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t4" headers="r1c1-t4">
<p><code dir="ltr">NETWORK_ERROR</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t4 r1c2-t4">
<p>Generic network error</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t4" headers="r1c1-t4">
<p><code dir="ltr">BAD_ARGUMENT</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t4 r1c2-t4">
<p>Bad argument passed in an API call (for example, a negative buffer size)</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t4" headers="r1c1-t4">
<p><code dir="ltr">TRANSFER_TIMEOUT</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t4 r1c2-t4">
<p>No data is read and a read time out occurred</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t4" headers="r1c1-t4">
<p><code dir="ltr">PARTIAL_MULTIBYTE_CHAR</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t4 r1c2-t4">
<p>No complete character is read and a partial multibyte character is found at the end of the input</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71547" class="refsect2"><a id="i1003167"></a>
<h3 class="refsect2">Rules and Limits</h3>
<p>The interface provided in the package only allows connections to be initiated by the PL/SQL program. It does not allow the PL/SQL program to accept connections initiated outside the program.</p>
</div>
<!-- class="refsect2" -->
<div id="ARPLS71548" class="refsect2"><a id="i1004190"></a>
<h3 class="refsect2">Examples</h3>
<p><a id="i1003023"></a>The following code example illustrates how the TCP/IP package can be used to retrieve a Web page over HTTP. It connects to a Web server listening at port 80 (standard port for HTTP) and requests the root document.</p>
<pre dir="ltr">DECLARE
  c  utl_tcp.connection;  -- TCP/IP connection to the Web server
  ret_val pls_integer; 
BEGIN
  c := utl_tcp.open_connection(remote_host =&gt; &#39;www.acme.com&#39;,
                               remote_port =&gt;  80,
                               charset     =&gt; &#39;US7ASCII&#39;);  -- open connection
  ret_val := utl_tcp.write_line(c, &#39;GET / HTTP/1.0&#39;);    -- send HTTP request
  ret_val := utl_tcp.write_line(c);
  BEGIN
    LOOP
      dbms_output.put_line(utl_tcp.get_line(c, TRUE));  -- read result
    END LOOP;
  EXCEPTION
    WHEN utl_tcp.end_of_input THEN
      NULL; -- end of input
  END;
  utl_tcp.close_connection(c);
END;
</pre>
<p>The following code example illustrates how the TCP/IP package can be used by an application to send e-mail<a id="sthref19910"></a> (also known as email from PL/SQL). The application connects to an SMTP server at port 25 and sends a simple text message.</p>
<pre dir="ltr">PROCEDURE send_mail (sender    IN VARCHAR2, 
                     recipient IN VARCHAR2, 
                   message   IN VARCHAR2) IS 
    mailhost   VARCHAR2(30) := &#39;mailhost.mydomain.com&#39;;
    smtp_error  EXCEPTION;
    mail_conn   utl_tcp.connection;
    PROCEDURE smtp_command(command IN VARCHAR2,
                           ok      IN VARCHAR2 DEFAULT &#39;250&#39;) 
    IS 
        response varchar2(3);
        len pls_integer;
    BEGIN
        len := utl_tcp.write_line(mail_conn, command);
        response := substr(utl_tcp.get_line(mail_conn), 1, 3);
        IF (response &lt;&gt; ok) THEN
            RAISE smtp_error;
        END IF;
    END;

BEGIN
    mail_conn := utl_tcp.open_connection(remote_host =&gt; mailhost,
                                         remote_port =&gt; 25,
                                         charset     =&gt; &#39;US7ASCII&#39;);
    smtp_command(&#39;HELO &#39; || mailhost);
    smtp_command(&#39;MAIL FROM: &#39; || sender);
    smtp_command(&#39;RCPT TO: &#39; || recipient);
    smtp_command(&#39;DATA&#39;, &#39;354&#39;);
    smtp_command(message);
    smtp_command(&#39;QUIT&#39;, &#39;221&#39;);
    utl_tcp.close_connection(mail_conn);
EXCEPTION
    WHEN OTHERS THEN
        -- Handle the error
END;
</pre></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="i996849"></a>
<div id="ARPLS71549" class="refsect1">
<h2 class="refsect1">Summary of UTL_TCP Subprograms</h2>
<div id="ARPLS71550" class="tblformal">
<p class="titleintable"><a id="sthref19911"></a><a id="sthref19912"></a>Table 265-3 UTL_TCP Package Subprograms</p>
<table class="cellalignment4330" title="UTL_TCP Package Subprograms" summary="This table lists the UTL_TCP subprograms in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t5">Subprogram</th>
<th class="cellalignment4328" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t5" headers="r1c1-t5">
<p><a href="#i1002126">AVAILABLE Function</a></p>
</td>
<td class="cellalignment4329" headers="r2c1-t5 r1c2-t5">
<p>Determines the number of bytes available for reading from a TCP/IP connection</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t5" headers="r1c1-t5">
<p><a href="#i1002194">CLOSE_ALL_CONNECTIONS Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r3c1-t5 r1c2-t5">
<p>Closes all open TCP/IP connections</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t5" headers="r1c1-t5">
<p><a href="#i1002213">CLOSE_CONNECTION Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r4c1-t5 r1c2-t5">
<p>Closes an open TCP/IP connection</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t5" headers="r1c1-t5">
<p><a href="#BABIJEID">FLUSH Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r5c1-t5 r1c2-t5">
<p>Transmits immediately to the server all data in the output buffer, if a buffer is used</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t5" headers="r1c1-t5">
<p><a href="#i1004843">GET_LINE Function</a></p>
</td>
<td class="cellalignment4329" headers="r6c1-t5 r1c2-t5">
<p>Returns the line of data read</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t5" headers="r1c1-t5">
<p><a href="#CEGGCFIC">GET_LINE_NCHAR Function</a></p>
</td>
<td class="cellalignment4329" headers="r7c1-t5 r1c2-t5">
<p>Returns the line of data read in NCHAR form</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t5" headers="r1c1-t5">
<p><a href="#i1002357">GET_RAW Function</a></p>
</td>
<td class="cellalignment4329" headers="r8c1-t5 r1c2-t5">
<p>Return the data read instead of the amount of data read</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t5" headers="r1c1-t5">
<p><a href="#i1002397">GET_TEXT Function</a></p>
</td>
<td class="cellalignment4329" headers="r9c1-t5 r1c2-t5">
<p>Returns the text data read</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t5" headers="r1c1-t5">
<p><a href="#CEGFABGD">GET_TEXT_NCHAR Function</a></p>
</td>
<td class="cellalignment4329" headers="r10c1-t5 r1c2-t5">
<p>Returns the text data read in NCHAR form</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t5" headers="r1c1-t5">
<p><a href="#i997069">OPEN_CONNECTION Function</a></p>
</td>
<td class="cellalignment4329" headers="r11c1-t5 r1c2-t5">
<p>Opens a TCP/IP connection to a specified service</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t5" headers="r1c1-t5">
<p><a href="#i1002454">READ_LINE Function</a></p>
</td>
<td class="cellalignment4329" headers="r12c1-t5 r1c2-t5">
<p>Receives a text line from a service on an open connection</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t5" headers="r1c1-t5">
<p><a href="#BABHEBIA">READ_RAW Function</a></p>
</td>
<td class="cellalignment4329" headers="r13c1-t5 r1c2-t5">
<p>Receives binary data from a service on an open connection</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t5" headers="r1c1-t5">
<p><a href="#i1002638">READ_TEXT Function</a></p>
</td>
<td class="cellalignment4329" headers="r14c1-t5 r1c2-t5">
<p>Receives text data from a service on an open connection</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r15c1-t5" headers="r1c1-t5">
<p><a href="#BHAGCIFG">SECURE_CONNECTION Procedure</a></p>
</td>
<td class="cellalignment4329" headers="r15c1-t5 r1c2-t5">
<p>Secures a TCP/IP connection using SSL/TLS</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r16c1-t5" headers="r1c1-t5">
<p><a href="#i1004858">WRITE_LINE Function</a></p>
</td>
<td class="cellalignment4329" headers="r16c1-t5 r1c2-t5">
<p>Transmits a text line to a service on an open connection</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r17c1-t5" headers="r1c1-t5">
<p><a href="#i997232">WRITE_RAW Function</a></p>
</td>
<td class="cellalignment4329" headers="r17c1-t5 r1c2-t5">
<p>Transmits a binary message to a service on an open connection</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r18c1-t5" headers="r1c1-t5">
<p><a href="#i1002522">WRITE_TEXT Function</a></p>
</td>
<td class="cellalignment4329" headers="r18c1-t5 r1c2-t5">
<p>Transmits a text message to a service on an open connection</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="ARPLS71551" class="refsect2"><a id="i1002126"></a>
<h3 class="refsect2"><a id="sthref19913"></a>AVAILABLE Function</h3>
<p>This function determines the number of bytes available for reading from a TCP/IP connection. It is the number of bytes that can be read immediately without blocking. Determines if data is ready to be read from the connection.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19914"></a>Syntax</p>
<pre dir="ltr">UTL_TCP.AVAILABLE (
   c        IN OUT NOCOPY connection, 
   timeout  IN PLS_INTEGER DEFAULT 0)
RETURN PLS_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19915"></a>Parameters</p>
<div id="ARPLS71552" class="tblformal">
<p class="titleintable"><a id="sthref19916"></a><a id="sthref19917"></a>Table 265-4 AVAILABLE Function Parameters</p>
<table class="cellalignment4330" title="AVAILABLE Function Parameters" summary="This table describes the Parameters of the UTL_TCP.AVAILABLE subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t6">Parameter</th>
<th class="cellalignment4328" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t6" headers="r1c1-t6">
<p><code dir="ltr">c</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t6 r1c2-t6">
<p>TCP connection to determine the amount of data that is available to be read</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t6" headers="r1c1-t6">
<p><code dir="ltr">timeout</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t6 r1c2-t6">
<p>Time in seconds to wait before giving up and reporting that no data is available. Zero (0) indicates not to wait at all. <code dir="ltr">NULL</code> indicates to wait forever.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19918"></a>Return Values</p>
<p>The number of bytes available for reading without blocking</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19919"></a>Usage Notes</p>
<p>The connection must have already been opened through a call to <code dir="ltr">OPEN_CONNECTION</code>. Users may use this API to determine if data is available to be read before calling the read API so that the program are not blocked because data is not ready to be read from the input.</p>
<p>The number of bytes available for reading returned by this function may be less than what is actually available. On some platforms, this function may only return 1, to indicate that some data is available. If you are concerned about the portability of your application, then assume that this function returns a positive value when data is available for reading, and 0 when no data is available. This function returns a positive value when all the data at a particular connection has been read and the next read result in the <code dir="ltr">END_OF_INPUT</code> exception.</p>
<p>The following example illustrates using this function in a portable manner:</p>
<pre dir="ltr">DECLARE
   c   utl_tcp.connection
   data VARCHAR2(256);
   len  PLS_INTEGER;
BEGIN
   c := utl_tcp.open_connection(...);
   LOOP
      IF (utl_tcp.available(c) &gt; 0) THEN
         len := utl_tcp.read_text(c, data, 256);
      ELSE
         ---do some other things
        . . . .
      END IF
   END LOOP;
END;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71553" class="refsect2"><a id="i1002194"></a>
<h3 class="refsect2"><a id="sthref19920"></a>CLOSE_ALL_CONNECTIONS Procedure</h3>
<p>This procedure closes all open TCP/IP connections.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19921"></a>Syntax</p>
<pre dir="ltr">UTL_TCP.CLOSE_ALL_CONNECTIONS;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19922"></a>Usage Notes</p>
<p>This call is provided to close all connections before a PL/SQL program ends to avoid dangling connections.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71554" class="refsect2"><a id="i1002213"></a>
<h3 class="refsect2"><a id="sthref19923"></a>CLOSE_CONNECTION Procedure</h3>
<p>This procedure closes an open TCP/IP connection.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19924"></a>Syntax</p>
<pre dir="ltr">UTL_TCP.CLOSE_CONNECTION (
   c IN OUT NOCOPY connection);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19925"></a>Parameters</p>
<div id="ARPLS71555" class="tblformal">
<p class="titleintable"><a id="sthref19926"></a><a id="sthref19927"></a>Table 265-5 CLOSE_CONNECTION Procedure Parameters</p>
<table class="cellalignment4330" title="CLOSE_CONNECTION Procedure Parameters" summary="This table describes the Parameters of the UTL_TCP.CLOSE_CONNECTION subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t7">Parameter</th>
<th class="cellalignment4328" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t7" headers="r1c1-t7">
<p><code dir="ltr">c</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t7 r1c2-t7">
<p>TCP connection to close</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19928"></a>Usage Notes</p>
<p>Connection must have been opened by a previous call to <code dir="ltr">OPEN_CONNECTION</code>. The fields <code dir="ltr">remote_host, remote_port, local_host, local_port</code> and <code dir="ltr">charset</code> of <code dir="ltr">c</code> are reset after the connection is closed.</p>
<p>An open connection must be closed explicitly. An open connection remains open when the PL/SQL record variable that stores the connection goes out-of-scope in the PL/SQL program. Failing to close unwanted connections may result in unnecessary tying up of local and remote system resources.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71556" class="refsect2"><a id="BABIJEID"></a>
<h3 class="refsect2"><a id="sthref19929"></a>FLUSH Procedure</h3>
<p>This procedure transfers immediately to the server all data in the output buffer, if a buffer is used.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19930"></a>Syntax</p>
<pre dir="ltr">UTL_TCP.FLUSH (
   c IN OUT NOCOPY connection);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19931"></a>Parameters</p>
<div id="ARPLS71557" class="tblformal">
<p class="titleintable"><a id="sthref19932"></a><a id="sthref19933"></a>Table 265-6 FLUSH Procedure Parameters</p>
<table class="cellalignment4330" title="FLUSH Procedure Parameters" summary="This table describes the Parameters of the UTL_TCP.FLUSH subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t8">Parameter</th>
<th class="cellalignment4328" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t8" headers="r1c1-t8">
<p><code dir="ltr">c</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t8 r1c2-t8">
<p>TCP connection to which to send data</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19934"></a>Usage Notes</p>
<p>The connection must have already been opened through a call to <code dir="ltr">OPEN_CONNECTION</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71558" class="refsect2"><a id="i1004843"></a>
<h3 class="refsect2"><a id="sthref19935"></a>GET_LINE Function</h3>
<p>This function returns the line of data read.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19936"></a>Syntax</p>
<pre dir="ltr">UTL_TCP.GET_LINE (
   c           IN OUT NOCOPY connection,
   remove_crlf IN            BOOLEAN DEFAULT FALSE,
   peek        IN            BOOLEAN DEFAULT FALSE) 
 RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19937"></a>Parameters</p>
<div id="ARPLS71559" class="tblformal">
<p class="titleintable"><a id="sthref19938"></a><a id="sthref19939"></a>Table 265-7 GET_LINE Function Parameters</p>
<table class="cellalignment4330" title="GET_LINE Function Parameters" summary="This table describes the Parameters of the UTL_TCP.GET_LINE subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t9">Parameter</th>
<th class="cellalignment4328" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t9" headers="r1c1-t9">
<p><code dir="ltr">c</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t9 r1c2-t9">
<p>TCP connection from which to receive data</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t9" headers="r1c1-t9">
<p><code dir="ltr">remove_crlf</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t9 r1c2-t9">
<p>If <code dir="ltr">TRUE</code>, then one ore more trailing CRLF characters are removed from the received message.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t9" headers="r1c1-t9">
<p><code dir="ltr">peek</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t9 r1c2-t9">
<p>Normally, you want to read the data and remove it from the input queue, that is, consume it. In some situations, you may just want to look ahead at the data, that is, peek at it, without removing it from the input queue, so that it is still available for reading (or even peeking) in the next call. To keep the data in the input queue, set this flag to <code dir="ltr">TRUE</code> and set up an input buffer before the connection is opened. The amount of data you can peek at (that is, read but keep in the input queue) must be less than the size of input buffer.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19940"></a>Return Values</p>
<p>The text line read</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19941"></a>Usage Notes</p>
<ul>
<li>
<p>The connection must have already been opened through a call to <code dir="ltr">OPEN_CONNECTION</code>.</p>
</li>
<li>
<p>See <code dir="ltr">READ_LINE</code> for the read time out, character set conversion, buffer size, and multibyte character issues.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71560" class="refsect2"><a id="CEGGCFIC"></a>
<h3 class="refsect2"><a id="sthref19942"></a>GET_LINE_NCHAR Function</h3>
<p>This function returns the line of data read in NCHAR form.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19943"></a>Syntax</p>
<pre dir="ltr">UTL_TCP.GET_LINE_NCHAR (
   c           IN OUT NOCOPY connection,
   remove_crlf IN            BOOLEAN DEFAULT FALSE,
   peek        IN            BOOLEAN DEFAULT FALSE) 
 RETURN NVARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19944"></a>Parameters</p>
<div id="ARPLS71561" class="tblformal">
<p class="titleintable"><a id="sthref19945"></a><a id="sthref19946"></a>Table 265-8 GET_LINE_NCHAR Function Parameters</p>
<table class="cellalignment4330" title="GET_LINE_NCHAR Function Parameters" summary="This table describes the Parameters of the UTL_TCP.GET_LINE_NCHAR subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t10">Parameter</th>
<th class="cellalignment4328" id="r1c2-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t10" headers="r1c1-t10">
<p><code dir="ltr">c</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t10 r1c2-t10">
<p>TCP connection from which to receive data</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t10" headers="r1c1-t10">
<p><code dir="ltr">remove_crlf</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t10 r1c2-t10">
<p>If <code dir="ltr">TRUE</code>, then one ore more trailing CRLF characters are removed from the received message.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t10" headers="r1c1-t10">
<p><code dir="ltr">peek</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t10 r1c2-t10">
<p>Normally, you want to read the data and remove it from the input queue, that is, consume it. In some situations, you may just want to look ahead at the data, that is, peek at it, without removing it from the input queue, so that it is still available for reading (or even peeking) in the next call. To keep the data in the input queue, set this flag to <code dir="ltr">TRUE</code> and set up an input buffer before the connection is opened. The amount of data you can peek at (that is, read but keep in the input queue) must be less than the size of input buffer.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19947"></a>Return Values</p>
<p>The text line read</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19948"></a>Usage Notes</p>
<ul>
<li>
<p>The connection must have already been opened through a call to <code dir="ltr">OPEN_CONNECTION</code>.</p>
</li>
<li>
<p>See <code dir="ltr">READ_LINE</code> for the read time out, character set conversion, buffer size, and multibyte character issues.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71562" class="refsect2"><a id="i1002357"></a>
<h3 class="refsect2"><a id="sthref19949"></a>GET_RAW Function</h3>
<p>This function returns the data read instead of the amount of data read.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19950"></a>Syntax</p>
<pre dir="ltr">UTL_TCP.GET_RAW (
   c     IN OUT NOCOPY connection,
   len   IN            PLS_INTEGER DEFAULT 1,
   peek  IN            BOOLEAN     DEFAULT FALSE) 
 RETURN RAW;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19951"></a>Parameters</p>
<div id="ARPLS71563" class="tblformal">
<p class="titleintable"><a id="sthref19952"></a><a id="sthref19953"></a>Table 265-9 GET_RAW Function Parameters</p>
<table class="cellalignment4330" title="GET_RAW Function Parameters" summary="This table describes the Parameters of the UTL_TCP.GET_RAW subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t11">Parameter</th>
<th class="cellalignment4328" id="r1c2-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t11" headers="r1c1-t11">
<p><code dir="ltr">c</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t11 r1c2-t11">
<p>TCP connection from which to receive data</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t11" headers="r1c1-t11">
<p><code dir="ltr">len</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t11 r1c2-t11">
<p>The number of bytes (or characters for <code dir="ltr">VARCHAR2</code>) of data to receive. Default is 1.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t11" headers="r1c1-t11">
<p><code dir="ltr">peek</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t11 r1c2-t11">
<p>Normally, you want to read the data and remove it from the input queue, that is, consume it. In some situations, you may just want to look ahead at the data, that is, peek at it, without removing it from the input queue, so that it is still available for reading (or even peeking) in the next call. To keep the data in the input queue, set this flag to <code dir="ltr">TRUE</code> and set up an input buffer before the connection is opened. The amount of data you can peek at (that is, read but keep in the input queue) must be less than the size of input buffer.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t11" headers="r1c1-t11">
<p><code dir="ltr">remove_crlf</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t11 r1c2-t11">
<p>If <code dir="ltr">TRUE</code>, then one ore more trailing CRLF characters are removed from the received message.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19954"></a>Return Values</p>
<p>The binary data read</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19955"></a>Usage Notes</p>
<p>The connection must have already been opened through a call to <code dir="ltr">OPEN_CONNECTION</code>.</p>
<p>For all the <code dir="ltr">get_*</code> APIs described in this section, see the corresponding <code dir="ltr">READ_*</code> API for the read time out issue. For <code dir="ltr">GET_TEXT</code> and <code dir="ltr">GET_LINE</code>, see the corresponding <code dir="ltr">READ_*</code> API for character set conversion, buffer size, and multibyte character issues.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71564" class="refsect2"><a id="i1002397"></a>
<h3 class="refsect2"><a id="sthref19956"></a>GET_TEXT Function</h3>
<p>This function returns the text data read.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19957"></a>Syntax</p>
<pre dir="ltr">UTL_TCP.GET_TEXT (
   c    IN OUT NOCOPY connection,
   len  IN            PLS_INTEGER DEFAULT 1,
   peek IN            BOOLEAN     DEFAULT FALSE) 
 RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19958"></a>Parameters</p>
<div id="ARPLS71565" class="tblformal">
<p class="titleintable"><a id="sthref19959"></a><a id="sthref19960"></a>Table 265-10 GET_TEXT Function Parameters</p>
<table class="cellalignment4330" title="GET_TEXT Function Parameters" summary="This table describes the Parameters of the UTL_TCP.GET_TEXT subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t12">Parameter</th>
<th class="cellalignment4328" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t12" headers="r1c1-t12">
<p><code dir="ltr">c</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t12 r1c2-t12">
<p>TCP connection from which to receive data</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t12" headers="r1c1-t12">
<p><code dir="ltr">len</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t12 r1c2-t12">
<p>Number of bytes (or characters for <code dir="ltr">VARCHAR2</code>) of data to receive. Default is 1.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t12" headers="r1c1-t12">
<p><code dir="ltr">peek</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t12 r1c2-t12">
<p>Normally, you want to read the data and remove it from the input queue, that is, consume it. In some situations, you may just want to look ahead at the data, that is, peek at it, without removing it from the input queue, so that it is still available for reading (or even peeking) in the next call. To keep the data in the input queue, set this flag to <code dir="ltr">TRUE</code> and set up an input buffer before the connection is opened. The amount of data you can peek at (that is, read but keep in the input queue) must be less than the size of input buffer.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t12" headers="r1c1-t12">
<p><code dir="ltr">remove_crlf</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t12 r1c2-t12">
<p>If <code dir="ltr">TRUE</code>, then one ore more trailing CRLF characters are removed from the received message.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19961"></a>Return Values</p>
<p>The text data read</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19962"></a>Usage Notes</p>
<p>The connection must have already been opened through a call to <code dir="ltr">OPEN_CONNECTION</code>.</p>
<p>For all the <code dir="ltr">get_*</code> APIs described in this section, see the corresponding <code dir="ltr">read_*</code> API for the read time out issue. For <code dir="ltr">GET_TEXT</code> and <code dir="ltr">GET_LINE</code>, see the corresponding <code dir="ltr">READ_*</code> API for character set conversion, buffer size, and multibyte character issues.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71566" class="refsect2"><a id="CEGFABGD"></a>
<h3 class="refsect2"><a id="sthref19963"></a>GET_TEXT_NCHAR Function</h3>
<p>This function returns the text data read in NCHAR form.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19964"></a>Syntax</p>
<pre dir="ltr">UTL_TCP.GET_TEXT_NCHAR (
   c    IN OUT NOCOPY connection,
   len  IN            PLS_INTEGER DEFAULT 1,
   peek IN            BOOLEAN     DEFAULT FALSE) 
 RETURN NVARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19965"></a>Parameters</p>
<div id="ARPLS71567" class="tblformal">
<p class="titleintable"><a id="sthref19966"></a><a id="sthref19967"></a>Table 265-11 GET_TEXT_NCHAR Function Parameters</p>
<table class="cellalignment4330" title="GET_TEXT_NCHAR Function Parameters" summary="This table describes the Parameters of the UTL_TCP.GET_TEXT subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t13">Parameter</th>
<th class="cellalignment4328" id="r1c2-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t13" headers="r1c1-t13">
<p><code dir="ltr">c</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t13 r1c2-t13">
<p>TCP connection from which to receive data</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t13" headers="r1c1-t13">
<p><code dir="ltr">len</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t13 r1c2-t13">
<p>The number of bytes (or characters for <code dir="ltr">VARCHAR2</code>) of data to receive. Default is 1.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t13" headers="r1c1-t13">
<p><code dir="ltr">peek</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t13 r1c2-t13">
<p>Normally, you want to read the data and remove it from the input queue, that is, consume it. In some situations, you may just want to look ahead at the data, that is, peek at it, without removing it from the input queue, so that it is still available for reading (or even peeking) in the next call. To keep the data in the input queue, set this flag to <code dir="ltr">TRUE</code> and set up an input buffer before the connection is opened. The amount of data you can peek at (that is, read but keep in the input queue) must be less than the size of input buffer.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t13" headers="r1c1-t13">
<p><code dir="ltr">remove_crlf</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t13 r1c2-t13">
<p>If <code dir="ltr">TRUE</code>, then one ore more trailing CRLF characters are removed from the received message.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19968"></a>Return Values</p>
<p>The text data read</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19969"></a>Usage Notes</p>
<p>The connection must have already been opened through a call to <code dir="ltr">OPEN_CONNECTION</code>.</p>
<p>For all the <code dir="ltr">get_*</code> APIs described in this section, see the corresponding <code dir="ltr">read_*</code> API for the read time out issue. For <code dir="ltr">GET_TEXT</code> and <code dir="ltr">GET_LINE</code>, see the corresponding <code dir="ltr">READ_*</code> API for character set conversion, buffer size, and multibyte character issues.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71568" class="refsect2"><a id="i997069"></a>
<h3 class="refsect2"><a id="sthref19970"></a>OPEN_CONNECTION Function</h3>
<p>This function opens a TCP/IP connection to a specified service.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19971"></a>Syntax</p>
<pre dir="ltr">UTL_TCP.OPEN_CONNECTION  (
   remote_host          IN VARCHAR2,
   remote_port          IN PLS_INTEGER,
   local_host           IN VARCHAR2 DEFAULT NULL,
   local_port           IN PLS_INTEGER DEFAULT NULL,
   in_buffer_size       IN PLS_INTEGER DEFAULT NULL,
   out_buffer_size      IN PLS_INTEGER DEFAULT NULL,
   charset              IN VARCHAR2 DEFAULT NULL,
   newline              IN VARCHAR2 DEFAULT CRLF,
   tx_timeout           IN PLS_INTEGER DEFAULT NULL,
   wallet_path          IN  VARCHAR2 DEFAULT NULL,
   wallet_password      IN  VARCHAR2 DEFAULT NULL, 
  RETURN connection;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19972"></a>Parameters</p>
<div id="ARPLS71569" class="tblformal">
<p class="titleintable"><a id="sthref19973"></a><a id="sthref19974"></a>Table 265-12 OPEN_CONNECTION Function Parameters</p>
<table class="cellalignment4330" title="OPEN_CONNECTION Function Parameters" summary="This table describes the Parameters of the UTL_TCP.OPEN_CONNECTION subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t14">Parameter</th>
<th class="cellalignment4328" id="r1c2-t14">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t14" headers="r1c1-t14">
<p><code dir="ltr">remote_host</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t14 r1c2-t14">
<p>Name of the host providing the service. When <code dir="ltr">remote_host</code> is <code dir="ltr">NULL</code>, it connects to the local host.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t14" headers="r1c1-t14">
<p><code dir="ltr">remote_port</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t14 r1c2-t14">
<p>Port number on which the service is listening for connections</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t14" headers="r1c1-t14">
<p><code dir="ltr">local_host</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t14 r1c2-t14">
<p>Name of the host providing the service. <code dir="ltr">NULL</code> means does not care.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t14" headers="r1c1-t14">
<p><code dir="ltr">local_port</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t14 r1c2-t14">
<p>Port number on which the service is listening for connections. <code dir="ltr">NULL</code> means don&#39;t care.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t14" headers="r1c1-t14">
<p><code dir="ltr">in_buffer_size</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t14 r1c2-t14">
<p>The size of input buffer. The use of an input buffer can speed up execution performance in receiving data from the server. The appropriate size of the buffer depends on the flow of data between the client and the server, and the traffic/latency on the network. A zero value means no buffer should be used. A <code dir="ltr">NULL</code> value means the caller does not care if a buffer is used or not. The maximum size of the input buffer is 32767 bytes.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t14" headers="r1c1-t14">
<p><code dir="ltr">out_buffer_size</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t14 r1c2-t14">
<p>The size of output buffer. The use of an output buffer can speed up execution performance in sending data to the server. The appropriate size of buffer depends on the flow of data between the client and the server, and the network condition. A zero value means no buffer should be used. A <code dir="ltr">NULL</code> value means the caller does not care if a buffer is used or not. The maximum size of the output buffer is 32767 bytes.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t14" headers="r1c1-t14">
<p><code dir="ltr">charset</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t14 r1c2-t14">
<p>The on-the-wire character set. Since text messages in the database may be encoded in a character set that is different from the one expected on the wire (that is, the character set specified by the communication protocol, or the one stipulated by the other end of the communication), text messages in the database are converted to and from the on-the-wire character set as they are sent and received on the network using <code dir="ltr">READ_TEXT, READ_LINE, WRITE_TEXT</code> and <code dir="ltr">WRITE_LINE.</code> Set this parameter to <code dir="ltr">NULL</code> when no conversion is needed.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t14" headers="r1c1-t14">
<p><code dir="ltr">newline</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t14 r1c2-t14">
<p>Newline character sequence. This newline character sequence is appended to the text line sent by <code dir="ltr">WRITE_LINE</code> API.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t14" headers="r1c1-t14">
<p><code dir="ltr">tx_timeout</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t14 r1c2-t14">
<p>Time in seconds that the <code dir="ltr">UTL_TCP</code> package should wait before giving up in a read or write operations in this connection. In read operations, this package gives up if no data is available for reading immediately. In write operations, this package gives up if the output buffer is full and no data is to be sent in the network without being blocked. Zero (0) indicates not to wait at all. <code dir="ltr">NULL</code> indicates to wait forever.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t14" headers="r1c1-t14">
<p><code dir="ltr">wallet_path</code></p>
</td>
<td class="cellalignment4329" headers="r11c1-t14 r1c2-t14">
<p>Directory path that contains the Oracle wallet for SSL/TLS. The format is <code dir="ltr">file</code>:<span class="italic">directory-path</span></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t14" headers="r1c1-t14">
<p><code dir="ltr">wallet_password</code></p>
</td>
<td class="cellalignment4329" headers="r12c1-t14 r1c2-t14">
<p>Password to open the wallet. When the wallet is auto-login enabled, the password may be set to <code dir="ltr">NULL</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19975"></a>Return Values</p>
<p>A connection to the targeted TCP/IP service</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19976"></a>Usage Notes</p>
<ul>
<li>
<p>Note that connections opened by this <code dir="ltr">UTL_TCP</code> package can remain open and be passed from one database call to another in a shared server configuration. However, the connection must be closed explicitly. The connection remains open when the PL/SQL record variable that stores the connection goes out-of-scope in the PL/SQL program. Failing to close unwanted connections may result in unnecessary tying up of local and remote system resources.</p>
</li>
<li>
<p>In the current release of the <code dir="ltr">UTL_TCP</code> package, the parameters <code dir="ltr">local_host</code> and <code dir="ltr">local_port</code> are ignored when <code dir="ltr">open_connection</code> makes a TCP/IP connection. It does not attempt to use the specified local host and port number when the connection is made. The <code dir="ltr">local_host</code> and <code dir="ltr">local_port</code> fields is not set in the connection record returned by the function.</p>
</li>
<li>
<p><code dir="ltr">tx_timeout</code> is intended to govern both the read operations and the write operations. However, an implementation restriction prevents <code dir="ltr">tx_timeout</code> from governing write operations in the current release.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19977"></a>Examples</p>
<pre dir="ltr">DECLARE
  c UTL_TCP.CONNECTION;
BEGIN
  c := UTL_TCP.OPEN_CONNECTION(
   host            =&gt; &#39;www.example.com&#39;,
   port            =&gt; 443, 
   wallet_path     =&gt; &#39;file:/oracle/wallets/smtp_wallet&#39;,
   wallet_password =&gt; &#39;****&#39;);
  UTL_TCP.SECURE_CONNECTION (c =&gt; c);
END;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71570" class="refsect2"><a id="i1002454"></a>
<h3 class="refsect2"><a id="sthref19978"></a>READ_LINE Function</h3>
<p>This function receives a text line from a service on an open connection. A line is terminated by a line-feed, a carriage-return or a carriage-return followed by a line-feed.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19979"></a>Syntax</p>
<pre dir="ltr">UTL_TCP.READ_LINE (
   c           IN OUT NOCOPY connection,
   data        IN OUT NOCOPY VARCHAR2 CHARACTER SET ANY_CS,
   peek        IN            BOOLEAN DEFAULT FALSE) 
 RETURN PLS_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19980"></a>Parameters</p>
<div id="ARPLS71571" class="tblformal">
<p class="titleintable"><a id="sthref19981"></a><a id="sthref19982"></a>Table 265-13 READ_LINE Function Parameters</p>
<table class="cellalignment4330" title="READ_LINE Function Parameters" summary="This table describes the Parameters of the UTL_TCP.READ_LINE subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t15">Parameter</th>
<th class="cellalignment4328" id="r1c2-t15">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t15" headers="r1c1-t15">
<p><code dir="ltr">c</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t15 r1c2-t15">
<p>TCP connection from which to receive data</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t15" headers="r1c1-t15">
<p><code dir="ltr">data</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t15 r1c2-t15">
<p>Data received.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t15" headers="r1c1-t15">
<p><code dir="ltr">remove_crlf</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t15 r1c2-t15">
<p>If <code dir="ltr">TRUE</code>, then one ore more trailing CRLF characters are removed from the received message.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t15" headers="r1c1-t15">
<p><code dir="ltr">peek</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t15 r1c2-t15">
<p>Normally, you want to read the data and remove it from the input queue, that is, consume it. In some situations, you may just want to look ahead at the data, that is, peek at it, without removing it from the input queue, so that it is still available for reading (or even peeking) in the next call. To keep the data in the input queue, set this flag to <code dir="ltr">TRUE</code> and set up an input buffer before the connection is opened. The amount of data you can peek at (that is, read but keep in the input queue) must be less than the size of input buffer.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19983"></a>Return Values</p>
<p>The number of characters of data received</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19984"></a>Usage Notes</p>
<p>The connection must have already been opened through a call to <code dir="ltr">OPEN_CONNECTION.</code> This function does not return until the end-of-line have been reached, or the end of input has been reached. Text messages is converted from the on-the-wire character set, specified when the connection was opened, to the database character set before they are returned to the caller.</p>
<p>If transfer time out is set when the connection is opened, then this function waits for each data packet to be ready to read until time out occurs. If it occurs, then this function stops reading and returns all the data read successfully. If no data is read successfully, then the <code dir="ltr">transfer_timeout</code> exception is raised. The exception can be handled and the read operation can be retried later.</p>
<p>If a partial multibyte character is found at the end of input, then this function stops reading and returns all the complete multibyte characters read successfully. If no complete character is read successfully, then the <code dir="ltr">partial_multibyte_char</code> exception is raised. The exception can be handled and the bytes of that partial multibyte character can be read as binary by the <code dir="ltr">READ_RAW</code> function. If a partial multibyte character is seen in the middle of the input because the remaining bytes of the character have not arrived and read time out occurs, then the <code dir="ltr">transfer_timeout</code> exception is raised instead. The exception can be handled and the read operation can be retried later.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71572" class="refsect2"><a id="BABHEBIA"></a>
<h3 class="refsect2"><a id="sthref19985"></a>READ_RAW Function</h3>
<p>This function receives binary data from a service on an open connection.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19986"></a>Syntax</p>
<pre dir="ltr">UTL_TCP.READ_RAW (
   c     IN OUT NOCOPY connection,
   data  IN OUT NOCOPY RAW,
   len   IN            PLS_INTEGER DEFAULT 1,
   peek  IN            BOOLEAN     DEFAULT FALSE)
 RETURN PLS_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19987"></a>Parameters</p>
<div id="ARPLS71573" class="tblformal">
<p class="titleintable"><a id="sthref19988"></a><a id="sthref19989"></a>Table 265-14 READ_RAW Function Parameters</p>
<table class="cellalignment4330" title="READ_RAW Function Parameters" summary="This table describes the Parameters of the UTL_TCP.READ_RAW subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t16">Parameter</th>
<th class="cellalignment4328" id="r1c2-t16">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t16" headers="r1c1-t16">
<p><code dir="ltr">c</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t16 r1c2-t16">
<p>TCP connection from which to receive data</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t16" headers="r1c1-t16">
<p><code dir="ltr">data (IN OUT COPY)</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t16 r1c2-t16">
<p>Data received</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t16" headers="r1c1-t16">
<p><code dir="ltr">len</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t16 r1c2-t16">
<p>Number of bytes of data to receive</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t16" headers="r1c1-t16">
<p><code dir="ltr">peek</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t16 r1c2-t16">
<p>Normally, you want to read the data and remove it from the input queue, that is, consume it. In some situations, you may just want to look ahead at the data, that is, peek at it, without removing it from the input queue, so that it is still available for reading (or even peeking) in the next call. To keep the data in the input queue, set this flag to <code dir="ltr">TRUE</code> and set up an input buffer before the connection is opened. The amount of data you can peek at (that is, read but keep in the input queue) must be less than the size of input buffer.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19990"></a>Return Values</p>
<p>The number of bytes of data received</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19991"></a>Usage Notes</p>
<p>The connection must have already been opened through a call to <code dir="ltr">OPEN_CONNECTION</code>. This function does not return until the specified number of bytes have been read, or the end of input has been reached.</p>
<p>If transfer time out is set when the connection is opened, then this function waits for each data packet to be ready to read until time out occurs. If it occurs, then this function stops reading and returns all the data read successfully. If no data is read successfully, then the <code dir="ltr">transfer_timeout</code> exception is raised. The exception can be handled and the read operation can be retried later.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71574" class="refsect2"><a id="i1002638"></a>
<h3 class="refsect2"><a id="sthref19992"></a>READ_TEXT Function</h3>
<p>This function receives text data from a service on an open connection.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19993"></a>Syntax</p>
<pre dir="ltr">UTL_TCP.READ_TEXT (
   c    IN OUT NOCOPY connection,
   data IN OUT NOCOPY VARCHAR2 CHARACTER SET ANY_CS,
   len  IN            PLS_INTEGER DEFAULT 1,
   peek IN            BOOLEAN     DEFAULT FALSE) 
RETURN PLS_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19994"></a>Parameters</p>
<div id="ARPLS71575" class="tblformal">
<p class="titleintable"><a id="sthref19995"></a><a id="sthref19996"></a>Table 265-15 READ_TEXT Function Parameters</p>
<table class="cellalignment4330" title="READ_TEXT Function Parameters" summary="This table describes the Parameters of the UTL_TCP.READ_TEXT subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t17">Parameter</th>
<th class="cellalignment4328" id="r1c2-t17">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t17" headers="r1c1-t17">
<p><code dir="ltr">c</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t17 r1c2-t17">
<p>TCP connection from which to receive data</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t17" headers="r1c1-t17">
<p><code dir="ltr">data</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t17 r1c2-t17">
<p>Data received</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t17" headers="r1c1-t17">
<p><code dir="ltr">len</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t17 r1c2-t17">
<p>Number of characters of data to receive</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t17" headers="r1c1-t17">
<p><code dir="ltr">peek</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t17 r1c2-t17">
<p>Normally, users want to read the data and remove it from the input queue, that is, consume it. In some situations, users may just want to look ahead at the data without removing it from the input queue so that it is still available for reading (or even peeking) in the next call. To keep the data in the input queue, set this flag to <code dir="ltr">TRUE</code> and an input buffer must be set up when the connection is opened. The amount of data that you can peek at (that is, read but keep in the input queue) must be less than the size of input buffer.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19997"></a>Return Values</p>
<p>The number of characters of data received</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref19998"></a>Usage Notes</p>
<p>The connection must have already been opened through a call to <code dir="ltr">OPEN_CONNECTION</code>. This function does not return until the specified number of characters has been read, or the end of input has been reached. Text messages is converted from the on-the-wire character set, specified when the connection was opened, to the database character set before they are returned to the caller.</p>
<p>Unless explicitly overridden, the size of a <code dir="ltr">VARCHAR2</code> buffer is specified in terms of bytes, while the parameter <code dir="ltr">len</code> refers to the maximum number of characters to be read. When the database character set is multibyte, where a single character may consist of more than 1 byte, you should ensure that the buffer can hold the maximum of characters. In general, the size of the <code dir="ltr">VARCHAR2</code> buffer should equal the number of characters to be read, multiplied by the maximum number of bytes of a character of the database character set.</p>
<p>If transfer time out is set when the connection is opened, then this function waits for each data packet to be ready to read until time out occurs. If it occurs, then this function stops reading and returns all the data read successfully. If no data is read successfully, then the <code dir="ltr">transfer_timeout</code> exception is raised. The exception can be handled and the read operation can be retried later.</p>
<p>If a partial multibyte character is found at the end of input, then this function stops reading and returns all the complete multibyte characters read successfully. If no complete character is read successfully, then the <code dir="ltr">partial_multibyte_char</code> exception is raised. The exception can be handled and the bytes of that partial multibyte character can be read as binary by the <code dir="ltr">READ_RAW</code> function. If a partial multibyte character is seen in the middle of the input because the remaining bytes of the character have not arrived and read time out occurs, then the <code dir="ltr">transfer_timeout</code> exception is raised instead. The exception can be handled and the read operation can be retried later.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS73364" class="refsect2"><a id="BHAGCIFG"></a>
<h3 class="refsect2"><a id="sthref19999"></a>SECURE_CONNECTION Procedure</h3>
<p>This procedure secures a TCP/IP connection using SSL/TLS. SSL/TLS requires an Oracle wallet which must be specified when the connection was opened by the <a href="#i997069">OPEN_CONNECTION Function</a>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20000"></a>Syntax</p>
<pre dir="ltr">UTL_TCP.SECURE_CONNECTION (
   c    IN OUT NOCOPY connection);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20001"></a>Parameters</p>
<div id="ARPLS73365" class="tblformal">
<p class="titleintable"><a id="sthref20002"></a><a id="sthref20003"></a>Table 265-16 SECURE_CONNECTION Procedure Parameters</p>
<table class="cellalignment4330" title="SECURE_CONNECTION Procedure Parameters" summary="This table describes the Parameters of the UTL_TCP.SECURE_CONNECTION subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t18">Parameter</th>
<th class="cellalignment4328" id="r1c2-t18">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t18" headers="r1c1-t18">
<p><code dir="ltr">c</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t18 r1c2-t18">
<p>TCP connection from which to receive data</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71576" class="refsect2"><a id="i1004858"></a>
<h3 class="refsect2"><a id="sthref20004"></a>WRITE_LINE Function</h3>
<p>This function transmits a text line to a service on an open connection. The <code dir="ltr">newline</code> character sequence is appended to the message before it is transmitted.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20005"></a>Syntax</p>
<pre dir="ltr">UTL_TCP.WRITE_LINE (
   c    IN OUT NOCOPY connection,
   data IN            VARCHAR2 DEFAULT NULL CHARACTER SET ANY_CS) 
  RETURN PLS_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20006"></a>Parameters</p>
<div id="ARPLS71577" class="tblformal">
<p class="titleintable"><a id="sthref20007"></a><a id="sthref20008"></a>Table 265-17 WRITE_LINE Function Parameters</p>
<table class="cellalignment4330" title="WRITE_LINE Function Parameters" summary="This table describes the Parameters of the UTL_TCP.WRITE_LINE subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t19">Parameter</th>
<th class="cellalignment4328" id="r1c2-t19">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t19" headers="r1c1-t19">
<p><code dir="ltr">c</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t19 r1c2-t19">
<p>TCP connection to which to send data</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t19" headers="r1c1-t19">
<p><code dir="ltr">data</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t19 r1c2-t19">
<p>Buffer containing the data to be sent</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20009"></a>Return Values</p>
<p>The actual number of characters of data transmitted</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20010"></a>Usage Notes</p>
<p>The connection must have already been opened through a call to <code dir="ltr">OPEN_CONNECTION</code>. Text messages are converted to the on-the-wire character set, specified when the connection was opened, before they are transmitted on the wire.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71578" class="refsect2"><a id="i997232"></a>
<h3 class="refsect2"><a id="sthref20011"></a>WRITE_RAW Function</h3>
<p>This function transmits a binary message to a service on an open connection. The function does not return until the specified number of bytes have been written.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20012"></a>Syntax</p>
<pre dir="ltr">UTL_TCP.WRITE_RAW (
   c    IN OUT NOCOPY connection,
   data IN            RAW,
   len  IN            PLS_INTEGER DEFAULT NULL) 
 RETURN PLS_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20013"></a>Parameters</p>
<div id="ARPLS71579" class="tblformal">
<p class="titleintable"><a id="sthref20014"></a><a id="sthref20015"></a>Table 265-18 WRITE_RAW Function Parameters</p>
<table class="cellalignment4330" title="WRITE_RAW Function Parameters" summary="This table describes the Parameters of the UTL_TCP.WRITE_RAW subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t20">Parameter</th>
<th class="cellalignment4328" id="r1c2-t20">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t20" headers="r1c1-t20">
<p><code dir="ltr">c</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t20 r1c2-t20">
<p>TCP connection to which to send data</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t20" headers="r1c1-t20">
<p><code dir="ltr">data</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t20 r1c2-t20">
<p>Buffer containing the data to be sent</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t20" headers="r1c1-t20">
<p><code dir="ltr">len</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t20 r1c2-t20">
<p>The number of bytes of data to transmit. When <code dir="ltr">len</code> is <code dir="ltr">NULL</code>, the whole length of data is written.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20016"></a>Return Values</p>
<p>The number of bytes of data transmitted</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20017"></a>Usage Notes</p>
<p>The connection must have already been opened through a call to <code dir="ltr">OPEN_CONNECTION.</code></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71580" class="refsect2"><a id="i1002522"></a>
<h3 class="refsect2"><a id="sthref20018"></a>WRITE_TEXT Function</h3>
<p>This function transmits a text message to a service on an open connection.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20019"></a>Syntax</p>
<pre dir="ltr">UTL_TCP.WRITE_TEXT (
   c    IN OUT NOCOPY connection,
   data IN            VARCHAR2 CHARACTER SET ANY_CS,
   len  IN            PLS_INTEGER DEFAULT NULL) 
 RETURN num_chars PLS_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20020"></a>Parameters</p>
<div id="ARPLS71581" class="tblformal">
<p class="titleintable"><a id="sthref20021"></a><a id="sthref20022"></a>Table 265-19 WRITE_TEXT Function Parameters</p>
<table class="cellalignment4330" title="WRITE_TEXT Function Parameters" summary="This table describes the Parameters of the UTL_TCP.WRITE_TEXT subprogram." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t21">Parameter</th>
<th class="cellalignment4328" id="r1c2-t21">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t21" headers="r1c1-t21">
<p><code dir="ltr">c</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t21 r1c2-t21">
<p>TCP connection to which to send data</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t21" headers="r1c1-t21">
<p><code dir="ltr">data</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t21 r1c2-t21">
<p>Buffer containing the data to be sent</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t21" headers="r1c1-t21">
<p><code dir="ltr">len</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t21 r1c2-t21">
<p>The number of characters of data to transmit. When <code dir="ltr">len</code> is <code dir="ltr">NULL</code>, the whole length of data is written. The actual amount of data written may be less because of network condition.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20023"></a>Return Values</p>
<p>The actual number of characters of data transmitted</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref20024"></a>Usage Notes</p>
<p>The connection must have already been opened through a call to <code dir="ltr">OPEN_CONNECTION.</code> Text messages are converted to the on-the-wire character set, specified when the connection was opened, before they are transmitted on the wire.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4320">
<tr>
<td class="cellalignment4329">
<table class="cellalignment4325">
<tr>
<td class="cellalignment4324"><a href="u_spadv.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4324"><a href="u_url.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4332">
<table class="cellalignment4323">
<tr>
<td class="cellalignment4324"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4324"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4324"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4324"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4324"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4324"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>