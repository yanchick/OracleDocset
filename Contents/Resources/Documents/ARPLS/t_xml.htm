<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-2467"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/XMLTYPE"></a><title>XMLTYPE</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1086"/>
<meta name="dcterms.created" content="2016-09-02T5:37:21Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database PL/SQL Packages and Types Reference"/>
<meta name="dcterms.identifier" content="E41829-07"/>
<meta name="dcterms.isVersionOf" content="ARPLS"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="t_utl_streams.htm" title="Previous" type="text/html"/>
<link rel="Next" href="index.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41829-07.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">289/290</span> <!-- End Header -->
<div id="ARPLS369" class="chapter"><a id="BABHCHHJ"></a> <a id="i1007914"></a>
<h1 class="chapter"><span class="secnum">285</span> XMLTYPE</h1>
<p><code dir="ltr"><a id="sthref20936"></a>XMLType</code> is a system-defined opaque type for handling XML data. It as predefined member functions on it to extract XML nodes and fragments.</p>
<p>You can create columns of <code dir="ltr">XMLType</code> and insert XML documents into it. You can also generate XML documents as <code dir="ltr">XMLType</code> instances dynamically using the <code dir="ltr">SYS_XMLAGG SQL</code> function.</p>
<p>This chapter contains the following topics:</p>
<ul>
<li>
<p><a href="#BABBJDAH">Summary of XMLType Subprograms</a></p>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<ul>
<li>
<p><a class="olink ADXDB" href="../ADXDB/toc.htm"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a></p>
</li>
</ul>
</div>
</li>
</ul>
<div class="refentry"><a id="BABBJDAH"></a>
<div id="ARPLS71953" class="refsect1">
<h2 class="refsect1">Summary of XMLType Subprograms</h2>
<p><a href="#BABFDHEF">Table 285-1</a> summarizes functions and procedures of the <code dir="ltr">XMLType</code>.</p>
<div id="ARPLS71954" class="tblformal">
<p class="titleintable"><a id="sthref20937"></a><a id="BABFDHEF"></a>Table 285-1 XMLTYPE Subprograms</p>
<table class="cellalignment4330" title="XMLTYPE Subprograms" summary="This table lists the XMLType subprograms in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t3">Method</th>
<th class="cellalignment4328" id="r1c2-t3">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t3" headers="r1c1-t3">
<p><a href="#i1010726">CREATENONSCHEMABASEDXML</a></p>
</td>
<td class="cellalignment4329" headers="r2c1-t3 r1c2-t3">
<p>Creates a non schema based XML from the input schema based instance.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t3" headers="r1c1-t3">
<p><a href="#i1010741">CREATESCHEMABASEDXML</a></p>
</td>
<td class="cellalignment4329" headers="r3c1-t3 r1c2-t3">
<p>Creates a schema based <code dir="ltr">XMLType</code> instance from the non-schema based instance using the input schema URL.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t3" headers="r1c1-t3">
<p><a href="#i1009657">CREATEXML</a></p>
</td>
<td class="cellalignment4329" headers="r4c1-t3 r1c2-t3">
<p>Static function for creating and returning an <code dir="ltr">XMLType</code> instance.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t3" headers="r1c1-t3">
<p><a href="#i1003690">EXISTSNODE</a></p>
</td>
<td class="cellalignment4329" headers="r5c1-t3 r1c2-t3">
<p>Takes a <code dir="ltr">XMLType</code> instance and a <code dir="ltr">XPath</code> and returns 1 or 0 indicating if applying the <code dir="ltr">XPath</code> returns a non-empty set of nodes.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t3" headers="r1c1-t3">
<p><a href="#i1010266">EXTRACT</a></p>
</td>
<td class="cellalignment4329" headers="r6c1-t3 r1c2-t3">
<p>Takes a <code dir="ltr">XMLType</code> instance and an <code dir="ltr">XPath</code>, applies the XPath expression and returns the results as an <code dir="ltr">XMLType</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t3" headers="r1c1-t3">
<p><a href="#i1010715">GETBLOBVAL</a></p>
</td>
<td class="cellalignment4329" headers="r7c1-t3 r1c2-t3">
<p>Returns the value of the <code dir="ltr">XMLType</code> instance as a <code dir="ltr">BLOB</code></p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t3" headers="r1c1-t3">
<p><a href="#i1010673">GETCLOBVAL</a></p>
</td>
<td class="cellalignment4329" headers="r8c1-t3 r1c2-t3">
<p>Returns the value of the <code dir="ltr">XMLType</code> instance as a <code dir="ltr">CLOB</code>.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t3" headers="r1c1-t3">
<p><a href="#i1010514">GETNAMESPACE</a></p>
</td>
<td class="cellalignment4329" headers="r9c1-t3 r1c2-t3">
<p>Returns the namespace for the top level element in a schema based document.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t3" headers="r1c1-t3">
<p><a href="#i1010214">GETNUMBERVAL</a></p>
</td>
<td class="cellalignment4329" headers="r10c1-t3 r1c2-t3">
<p>Returns the value of the <code dir="ltr">XMLType</code> instance as a <code dir="ltr">NUMBER</code>. This is only valid if the input <code dir="ltr">XMLType</code> instance contains a simple text node and is convertible to a number.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r11c1-t3" headers="r1c1-t3">
<p><a href="#i1009716">GETROOTELEMENT</a></p>
</td>
<td class="cellalignment4329" headers="r11c1-t3 r1c2-t3">
<p>Returns the root element of the input instance. Returns <code dir="ltr">NULL</code> if the instance is a fragment</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r12c1-t3" headers="r1c1-t3">
<p><a href="#i1009729">GETSCHEMAURL</a></p>
</td>
<td class="cellalignment4329" headers="r12c1-t3 r1c2-t3">
<p>Returns the XML schema URL if the input is an XML Schema based.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r13c1-t3" headers="r1c1-t3">
<p><a href="#i1003791">GETSTRINGVAL</a></p>
</td>
<td class="cellalignment4329" headers="r13c1-t3 r1c2-t3">
<p>Returns the value of the <code dir="ltr">XMLType</code> instance as a string.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r14c1-t3" headers="r1c1-t3">
<p><a href="#i1009671">ISFRAGMENT</a></p>
</td>
<td class="cellalignment4329" headers="r14c1-t3 r1c2-t3">
<p>Checks if the input <code dir="ltr">XMLType</code> instance is a fragment or not. A fragment is a XML instance, which has more than one root element.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r15c1-t3" headers="r1c1-t3">
<p><a href="#i1010018">ISSCHEMABASED</a></p>
</td>
<td class="cellalignment4329" headers="r15c1-t3 r1c2-t3">
<p>Returns 1 or 0 indicating if the input <code dir="ltr">XMLType</code> instance is a schema based one or not.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r16c1-t3" headers="r1c1-t3">
<p><a href="#i1009850">ISSCHEMAVALID</a></p>
</td>
<td class="cellalignment4329" headers="r16c1-t3 r1c2-t3">
<p>Checks if the input instance is schema valid according to the given schema URL.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r17c1-t3" headers="r1c1-t3">
<p><a href="#i1009769">ISSCHEMAVALIDATED</a></p>
</td>
<td class="cellalignment4329" headers="r17c1-t3 r1c2-t3">
<p>Checks if the instance has been validated against the schema.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r18c1-t3" headers="r1c1-t3">
<p><a href="#i1009889">SCHEMAVALIDATE</a></p>
</td>
<td class="cellalignment4329" headers="r18c1-t3 r1c2-t3">
<p>Validates the input instance according to the XML Schema. Raises error if the input instance is non-schema based.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r19c1-t3" headers="r1c1-t3">
<p><a href="#i1010015">SETSCHEMAVALIDATED</a></p>
</td>
<td class="cellalignment4329" headers="r19c1-t3 r1c2-t3">
<p>Sets the schema valid flag to avoid costly schema validation.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r20c1-t3" headers="r1c1-t3">
<p><a href="#BABFEGCB">TOOBJECT</a></p>
</td>
<td class="cellalignment4329" headers="r20c1-t3 r1c2-t3">
<p>Converts the <code dir="ltr">XMLType</code> instance to an object type.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r21c1-t3" headers="r1c1-t3">
<p><a href="#i1009783">TRANSFORM</a></p>
</td>
<td class="cellalignment4329" headers="r21c1-t3 r1c2-t3">
<p>Takes an <code dir="ltr">XMLType</code> instance and an associated stylesheet (which is also an <code dir="ltr">XMLType</code> instance), applies the stylesheet and returns the result as XML.</p>
</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r22c1-t3" headers="r1c1-t3">
<p><a href="#i1009842">XMLTYPE</a></p>
</td>
<td class="cellalignment4329" headers="r22c1-t3 r1c2-t3">
<p>Constructs an instance of the <code dir="ltr">XMLType</code> datatype. The constructor can take in the XML as a <code dir="ltr">CLOB</code>, <code dir="ltr">VARCHAR2</code> or take in a object type.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="ARPLS71955" class="refsect2"><a id="i1010726"></a>
<h3 class="refsect2"><a id="sthref20938"></a><a id="sthref20939"></a>CREATENONSCHEMABASEDXML</h3>
<p>Member function. Creates a non-schema based XML document from a schema based instance.</p>
<p class="subhead2"><a id="ARPLS71956"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION CREATENONSCHEMABASEDXML
return XMLType deterministic;
</pre></div>
<!-- class="refsect2" -->
<div id="ARPLS71957" class="refsect2"><a id="i1010741"></a>
<h3 class="refsect2"><a id="sthref20940"></a><a id="sthref20941"></a>CREATESCHEMABASEDXML</h3>
<p>Member function. Creates a schema based <code dir="ltr">XMLType</code> instance from a non-schema based <code dir="ltr">XMLType</code> value. It uses either the supplied <code dir="ltr">SCHEMA</code> URL, or the <code dir="ltr">SCHEMALOCATION</code> attribute of the instance.</p>
<p class="subhead2"><a id="ARPLS71958"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION createSchemaBasedXML(
schema IN varchar2 := NULL)
return XMLType deterministic;
</pre>
<div class="inftblinformal">
<table class="cellalignment4327" title="Parameters" summary="This table describes the Parameters of the XMLType member subprogram CREATESCHEMABASEDXML." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t4">Parameter</th>
<th class="cellalignment4328" id="r1c2-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t4" headers="r1c1-t4"><code dir="ltr">schema</code></td>
<td class="cellalignment4329" headers="r2c1-t4 r1c2-t4">Optional XMLSchema URL used to convert the value to the specified schema.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71959" class="refsect2"><a id="i1009657"></a>
<h3 class="refsect2"><a id="sthref20942"></a><a id="sthref20943"></a>CREATEXML</h3>
<p>Static function for creating and returning an <code dir="ltr">XMLType</code> instance. The string and <code dir="ltr">CLOB</code> parameters used to pass in the date must contain well-formed and valid XML documents. The options are described in the following table.</p>
<div class="inftblinformal">
<table class="cellalignment4327" title="INFORMATION TO BE REMOVED FROM TABLE" summary="REMOVE FROM TABLE" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t5">Syntax</th>
<th class="cellalignment4328" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t5" headers="r1c1-t5"><code dir="ltr">STATIC FUNCTION createXML(</code>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;xmlData IN varchar2)</code></p>
<p><code dir="ltr">RETURN XMLType deterministic;</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t5 r1c2-t5">Creates the <code dir="ltr">XMLType</code> instance from a string.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t5" headers="r1c1-t5"><code dir="ltr">STATIC FUNCTION createXML(</code>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;xmlData IN clob)</code></p>
<p><code dir="ltr">RETURN XMLType deterministic;</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t5 r1c2-t5">Creates the <code dir="ltr">XMLType</code> instance from a <code dir="ltr">CLOB</code>.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t5" headers="r1c1-t5"><code dir="ltr">STATIC FUNCTION createXML (</code>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;xmlData IN clob,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;schema IN varchar2,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;validated IN number := 0,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;wellformed IN number := 0 )</code></p>
<p><code dir="ltr">RETURN XMLType deterministic;</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t5 r1c2-t5">This static function creates a schema-based <code dir="ltr">XMLType</code> instance using the specified schema and xml data parameters.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t5" headers="r1c1-t5"><code dir="ltr">STATIC FUNCTION createXML (</code>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;xmlData IN varchar2,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;schema IN varchar2,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;validated IN number := 0,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;wellformed IN number := 0)</code></p>
<p><code dir="ltr">RETURN XMLType deterministic;</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t5 r1c2-t5">This static function creates a schema-based <code dir="ltr">XMLType</code> instance using the specified schema and xml data parameters.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t5" headers="r1c1-t5"><code dir="ltr">STATIC FUNCTION createXML (</code>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;xmlData IN &#34;&lt;ADT_1&gt;&#34;,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;schema IN varchar2 := NULL,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;element IN varchar2 := NULL,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;validated IN NUMBER := 0)</code></p>
<p><code dir="ltr">RETURN XMLType deterministic;</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t5 r1c2-t5">Creates an XML instance from an instance of an user-defined type.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t5" headers="r1c1-t5"><code dir="ltr">STATIC FUNCTION createXML (</code>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;xmlData IN SYS_REFCURSOR,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;schema in varchar2 := NULL,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;element in varchar2 := NULL,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;validated in number := 0)</code></p>
<p><code dir="ltr">RETURN XMLType deterministic;</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t5 r1c2-t5">Creates an XML instance from a cursor reference. You can pass in any arbitrary SQL query as a <code dir="ltr">CURSOR</code>.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t5" headers="r1c1-t5"><code dir="ltr">STATIC FUNCTION createXML (</code>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;xmlData IN AnyData,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;schema in varchar2 := NULL,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;element in varchar2 := NULL,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;validated in number := 0)</code></p>
<p><code dir="ltr">RETURN sys.XMLType deterministic</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;parallel_enable</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t5 r1c2-t5">Creates an XML instance from <code dir="ltr">ANYDATA</code>.If the <code dir="ltr">ANYDATA</code>instance contains an ADT, the <code dir="ltr">XMLType</code>returned is the same as would be returned for a call directly on the ADT. If the <code dir="ltr">ANYDATA</code>contains a scalar, the <code dir="ltr">XMLType</code> contains a leaf node with the scalar value. The element name for this node is taken from the optional element string if present, and is &#34;<code dir="ltr">ANYDATA</code>&#34; if it is not.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r9c1-t5" headers="r1c1-t5"><code dir="ltr">STATIC FUNCTION createXML (</code>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;xmlData IN blob,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;csid IN number,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;schema IN varchar2,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;validated IN number := 0,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;wellformed IN number := 0)</code></p>
<p><code dir="ltr">return sys.XMLType deterministic</code></p>
</td>
<td class="cellalignment4329" headers="r9c1-t5 r1c2-t5">Creates an XML instance from a <code dir="ltr">BLOB</code>.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r10c1-t5" headers="r1c1-t5"><code dir="ltr">STATIC FUNCTION createXML (</code>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;xmlData IN bfile,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;csid IN number,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;Schema IN varchar2,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;validated IN number := 0,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;wellformed IN number := 0)</code></p>
<p><code dir="ltr">return sys.XMLType deterministic</code></p>
</td>
<td class="cellalignment4329" headers="r10c1-t5 r1c2-t5">Creates an XML instance from a <code dir="ltr">BFILE</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment4327" title="Parameters" summary="This table describes the Parameters of the XMLType member subprogram CREATEXML." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t6">Parameter</th>
<th class="cellalignment4328" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t6" headers="r1c1-t6"><code dir="ltr">xmlData</code></td>
<td class="cellalignment4329" headers="r2c1-t6 r1c2-t6">The actual data in the form of a <code dir="ltr">BFILE</code>, <code dir="ltr">BLOB</code>, <code dir="ltr">CLOB</code>, <code dir="ltr">REF</code> cursor, <code dir="ltr">VARCHAR2</code> or object type.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t6" headers="r1c1-t6"><code dir="ltr">schema</code></td>
<td class="cellalignment4329" headers="r3c1-t6 r1c2-t6">Optional Schema URL to be used to make the input conform to the given schema. <span class="bold">Caution</span>: Oracle does not support use of types generated by Schema Registration (see <a class="olink ADXDB6229" href="../ADXDB/xdb06stt.htm#ADXDB6229"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a>).</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t6" headers="r1c1-t6"><code dir="ltr">validated</code></td>
<td class="cellalignment4329" headers="r4c1-t6 r1c2-t6">Flag to indicate that the instance is valid according to the given XML Schema. (Default is <code dir="ltr">0</code>)</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t6" headers="r1c1-t6"><code dir="ltr">wellformed</code></td>
<td class="cellalignment4329" headers="r5c1-t6 r1c2-t6">Flag to indicate that the input is well formed. If set, then the database would not do well formed check on the input instance. (Default is <code dir="ltr">0</code>)</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t6" headers="r1c1-t6"><code dir="ltr">element</code></td>
<td class="cellalignment4329" headers="r6c1-t6 r1c2-t6">Optional element name in the case of the <code dir="ltr">ADT_1</code> or <code dir="ltr">REF CURSOR</code> constructors. (Default is <code dir="ltr">NULL</code>). <span class="bold">Caution</span>: Oracle does not support use of types generated by Schema Registration (see <a class="olink ADXDB6229" href="../ADXDB/xdb06stt.htm#ADXDB6229"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a>).</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t6" headers="r1c1-t6"><code dir="ltr">csid</code></td>
<td class="cellalignment4329" headers="r7c1-t6 r1c2-t6">The character set id of input XML data.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71960" class="refsect2"><a id="i1003690"></a>
<h3 class="refsect2"><a id="sthref20944"></a><a id="sthref20945"></a>EXISTSNODE</h3>
<p>Member function. Checks if the node exists. If the XPath string is <code dir="ltr">NULL</code> or the document is empty, then a value of 0 is returned, otherwise returns 1. The options are described in the following table.</p>
<div class="inftblinformal">
<table class="cellalignment4327" title="INFORMATION TO BE REMOVED FROM TABLE" summary="REMOVE FROM TABLE" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t7">Syntax</th>
<th class="cellalignment4328" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t7" headers="r1c1-t7"><code dir="ltr">MEMBER FUNCTION existsNode(</code>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;xpath IN varchar2)</code></p>
<p><code dir="ltr">RETURN number deterministic;</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t7 r1c2-t7">Given an XPath expression, checks if the XPath applied over the document can return any valid nodes.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t7" headers="r1c1-t7"><code dir="ltr">MEMBER FUNCTION existsNode(</code>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;xpath in varchar2,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;nsmap in varchar2)</code></p>
<p><code dir="ltr">RETURN number deterministic;</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t7 r1c2-t7">This member function uses the XPath expression with the namespace information and checks if applying the XPath returns any nodes or not.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment4327" title="Parameters" summary="This table describes the Parameters of the XMLType member subprogram EXISTSNODE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t8">Parameter</th>
<th class="cellalignment4328" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t8" headers="r1c1-t8"><code dir="ltr">xpath</code></td>
<td class="cellalignment4329" headers="r2c1-t8 r1c2-t8">The XPath expression to test.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t8" headers="r1c1-t8"><code dir="ltr">nsmap</code></td>
<td class="cellalignment4329" headers="r3c1-t8 r1c2-t8">Optional namespace mapping.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71961" class="refsect2"><a id="i1010266"></a>
<h3 class="refsect2"><a id="sthref20946"></a><a id="sthref20947"></a>EXTRACT</h3>
<p>Member function. Extracts an <code dir="ltr">XMLType</code> fragment and returns an <code dir="ltr">XMLType</code> instance containing the result node(s). If the XPath does not result in any nodes, then returns <code dir="ltr">NULL</code>. The options are described in the following table.</p>
<div class="inftblinformal">
<table class="cellalignment4327" title="INFORMATION TO BE REMOVED FROM TABLE" summary="REMOVE FROM TABLE" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t9">Syntax</th>
<th class="cellalignment4328" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t9" headers="r1c1-t9"><code dir="ltr">MEMBER FUNCTION extract(</code>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;xpath IN varchar2)</code></p>
<p><code dir="ltr">RETURN XMLType deterministic;</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t9 r1c2-t9">Given an XPath expression, applies the XPath to the document and returns the fragment as an <code dir="ltr">XMLType</code>.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t9" headers="r1c1-t9"><code dir="ltr">MEMBER FUNCTION extract(</code>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;xpath IN varchar2,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;nsmap IN varchar2)</code></p>
<p><code dir="ltr">RETURN XMLType deterministic;</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t9 r1c2-t9">This member function applies the XPath expression and namespace mapping, over the XML data to return a <code dir="ltr">XMLType</code> instance containing the resultant fragment.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment4327" title="Parameters" summary="This table describes the Parameters of the XMLType member subprogram EXTRACT." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t10">Parameter</th>
<th class="cellalignment4328" id="r1c2-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t10" headers="r1c1-t10"><code dir="ltr">xpath</code></td>
<td class="cellalignment4329" headers="r2c1-t10 r1c2-t10">The XPath expression to apply.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t10" headers="r1c1-t10"><code dir="ltr">nsmap</code></td>
<td class="cellalignment4329" headers="r3c1-t10 r1c2-t10">Optional prefix to namespace mapping information.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71962" class="refsect2"><a id="i1010715"></a>
<h3 class="refsect2"><a id="sthref20948"></a><a id="sthref20949"></a>GETBLOBVAL</h3>
<p>Member function. Returns a <code dir="ltr">BLOB</code> containing the serialized XML representation; if the <code dir="ltr">BLOB</code> returned is temporary, it must be freed after use.</p>
<p class="subhead2"><a id="ARPLS71963"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION getBlobVal(
   csid   IN   NUMBER)
 RETURN BLOB DETERMINISTIC;
</pre>
<div class="inftblinformal">
<table class="cellalignment4327" title="Parameters" summary="This table describes the Parameters of the XMLType member subprogram EXISTSNODE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t11">Parameter</th>
<th class="cellalignment4328" id="r1c2-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t11" headers="r1c1-t11"><code dir="ltr">csid</code></td>
<td class="cellalignment4329" headers="r2c1-t11 r1c2-t11">The desired character set ID of output <code dir="ltr">BLOB</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71964" class="refsect2"><a id="i1010673"></a>
<h3 class="refsect2"><a id="sthref20950"></a><a id="sthref20951"></a>GETCLOBVAL</h3>
<p>Member function. Returns a <code dir="ltr">CLOB</code> containing the serialized XML representation; if the <code dir="ltr">CLOB</code> returned is temporary, it must be freed after use.</p>
<p class="subhead2"><a id="ARPLS71965"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION getClobVal()
RETURN clob deterministic;
</pre></div>
<!-- class="refsect2" -->
<div id="ARPLS71966" class="refsect2"><a id="i1010514"></a>
<h3 class="refsect2"><a id="sthref20952"></a><a id="sthref20953"></a>GETNAMESPACE</h3>
<p>Member function. Returns the namespace of the top level element in the instance. Returns <code dir="ltr">NULL</code> if the input is a fragment or is a non-schema based instance.</p>
<p class="subhead2"><a id="ARPLS71967"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION getNamespace
return varchar2 deterministic;
</pre></div>
<!-- class="refsect2" -->
<div id="ARPLS71968" class="refsect2"><a id="i1010214"></a>
<h3 class="refsect2"><a id="sthref20954"></a><a id="sthref20955"></a>GETNUMBERVAL</h3>
<p>Member function. Returns a numeric value, formatted from the text value pointed to by the <code dir="ltr">XMLType</code> instance. The <code dir="ltr">XMLType</code> must point to a valid text node that contains a numerical value. The options are described in the following table.</p>
<p class="subhead2"><a id="ARPLS71969"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION getNumberVal()
RETURN number deterministic;
</pre></div>
<!-- class="refsect2" -->
<div id="ARPLS71970" class="refsect2"><a id="i1009716"></a>
<h3 class="refsect2"><a id="sthref20956"></a><a id="sthref20957"></a>GETROOTELEMENT</h3>
<p>Member function. Gets the root element of the <code dir="ltr">XMLType</code> instance. Returns <code dir="ltr">NULL</code> if the instance is a fragment.</p>
<p class="subhead2"><a id="ARPLS71971"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION getRootElement
return varchar2 deterministic;
</pre></div>
<!-- class="refsect2" -->
<div id="ARPLS71972" class="refsect2"><a id="i1009729"></a>
<h3 class="refsect2"><a id="sthref20958"></a><a id="sthref20959"></a>GETSCHEMAURL</h3>
<p>Member function. Returns the XML Schema URL corresponding to the <code dir="ltr">XMLType</code> instance, if the <code dir="ltr">XMLType</code> instance is a schema-based document. Otherwise returns <code dir="ltr">NULL</code>.</p>
<p class="subhead2"><a id="ARPLS71973"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION getSchemaURL
return varchar2 deterministic;
</pre></div>
<!-- class="refsect2" -->
<div id="ARPLS71974" class="refsect2"><a id="i1003791"></a>
<h3 class="refsect2"><a id="sthref20960"></a><a id="sthref20961"></a>GETSTRINGVAL</h3>
<p>Member function. Returns the document as a string. Returns s string containing the seralized XML representation, or in case of text nodes, the text itself. If the XML document is bigger than the maximum size of the <code dir="ltr">VARCHAR2</code>, which is 4000, then an error is raised at run time.</p>
<p class="subhead2"><a id="ARPLS71975"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION getStringVal()
RETURN varchar2 deterministic;
</pre></div>
<!-- class="refsect2" -->
<div id="ARPLS71976" class="refsect2"><a id="i1009671"></a>
<h3 class="refsect2"><a id="sthref20962"></a><a id="sthref20963"></a>ISFRAGMENT</h3>
<p>Determines if the <code dir="ltr">XMLType</code> instance corresponds to a well-formed document, or a fragment. Returns 1 or 0 indicating if the <code dir="ltr">XMLType</code> instance contains a fragment or a well-formed document.</p>
<p class="subhead2"><a id="ARPLS71977"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION isFragment()
RETURN number deterministic;
</pre></div>
<!-- class="refsect2" -->
<div id="ARPLS71978" class="refsect2"><a id="i1010018"></a>
<h3 class="refsect2"><a id="sthref20964"></a><a id="sthref20965"></a>ISSCHEMABASED</h3>
<p>Member function. Determines whether the <code dir="ltr">XMLType</code> instance is schema-based or not. Returns 1 or 0 depending on whether the <code dir="ltr">XMLType</code> instance is schema-based.</p>
<p class="subhead2"><a id="ARPLS71979"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION isSchemaBased
return number deterministic;
</pre></div>
<!-- class="refsect2" -->
<div id="ARPLS71980" class="refsect2"><a id="i1009850"></a>
<h3 class="refsect2"><a id="sthref20966"></a><a id="sthref20967"></a>ISSCHEMAVALID</h3>
<p>Member function. Checks if the input instance is conformant to a specified schema. Does not change the validation status of the XML instance. If a XML Schema URL is not specified and the xml document is schema based, the conformance is checked against the <code dir="ltr">XMLType</code> instance&#39;s own schema.</p>
<p class="subhead2"><a id="ARPLS71981"></a>Syntax</p>
<pre dir="ltr">member function isSchemaValid(
schurl IN VARCHAR2 := NULL,
elem IN VARCHAR2 := NULL)
return NUMBER deterministic;
</pre>
<div class="inftblinformal">
<table class="cellalignment4327" title="Parameters" summary="This table describes the Parameters of the XMLType member subprogram ISSCHEMAVALID." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t12">Parameter</th>
<th class="cellalignment4328" id="r1c2-t12">IN / OUT</th>
<th class="cellalignment4328" id="r1c3-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t12" headers="r1c1-t12"><code dir="ltr">schurl</code></td>
<td class="cellalignment4329" headers="r2c1-t12 r1c2-t12"><code dir="ltr">(IN)</code></td>
<td class="cellalignment4329" headers="r2c1-t12 r1c3-t12">The URL of the XML Schema against which to check conformance.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t12" headers="r1c1-t12"><code dir="ltr">elem</code></td>
<td class="cellalignment4329" headers="r3c1-t12 r1c2-t12"><code dir="ltr">(IN)</code></td>
<td class="cellalignment4329" headers="r3c1-t12 r1c3-t12">Element of a specified schema, against which to validate. This is useful when we have a XML Schema which defines more than one top level element, and we want to check conformance against a specific one of these elements.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71982" class="refsect2"><a id="i1009769"></a>
<h3 class="refsect2"><a id="sthref20968"></a><a id="sthref20969"></a>ISSCHEMAVALIDATED</h3>
<p>Member function. Returns the validation status of the <code dir="ltr">XMLType</code> instance -- tells if a schema based instance has been actually validated against its schema. Returns 1 if the instance has been validated against the schema, 0 otherwise.</p>
<p class="subhead2"><a id="ARPLS71983"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION isSchemaValidated
return NUMBER deterministic;
</pre></div>
<!-- class="refsect2" -->
<div id="ARPLS71984" class="refsect2"><a id="i1009889"></a>
<h3 class="refsect2"><a id="sthref20970"></a><a id="sthref20971"></a>SCHEMAVALIDATE</h3>
<p>Member procedure. Validates the XML instance against its schema if it hasn&#39;t already been done. For non-schema based documents an error is raised. If validation fails an error is raised; else, the document&#39;s status is changed to validated.</p>
<p class="subhead2"><a id="ARPLS71985"></a>Syntax</p>
<pre dir="ltr">MEMBER PROCEDURE schemaValidate(
   self IF OUT NOCOPY XMLType);
</pre>
<div class="inftblinformal">
<table class="cellalignment4327" title="Parameters" summary="This table describes the Parameters of the XMLType member subprogram SCHEMAVALIDATE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t13">Parameter</th>
<th class="cellalignment4328" id="r1c2-t13">IN / OUT</th>
<th class="cellalignment4328" id="r1c3-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t13" headers="r1c1-t13"><code dir="ltr">self</code></td>
<td class="cellalignment4329" headers="r2c1-t13 r1c2-t13"><code dir="ltr">(OUT)</code></td>
<td class="cellalignment4329" headers="r2c1-t13 r1c3-t13">XML instance being validated against the schema.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71986" class="refsect2"><a id="i1010015"></a>
<h3 class="refsect2"><a id="sthref20972"></a><a id="sthref20973"></a>SETSCHEMAVALIDATED</h3>
<p>Member function. Sets the <code dir="ltr">VALIDATION</code> state of the input XML instance.</p>
<p class="subhead2"><a id="ARPLS71987"></a>Syntax</p>
<pre dir="ltr">MEMBER PROCEDURE setSchemaValidated(
self IF OUT NOCOPY XMLType,
   flag IN BINARY_INTEGER := 1);
</pre>
<div class="inftblinformal">
<table class="cellalignment4327" title="Parameters" summary="This table describes the Parameters of the XMLType member subprogram SERTSSCHEMAVALIDATED." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t14">Parameter</th>
<th class="cellalignment4328" id="r1c2-t14">IN / OUT</th>
<th class="cellalignment4328" id="r1c3-t14">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t14" headers="r1c1-t14"><code dir="ltr">self</code></td>
<td class="cellalignment4329" headers="r2c1-t14 r1c2-t14"><code dir="ltr">(OUT)</code></td>
<td class="cellalignment4329" headers="r2c1-t14 r1c3-t14">XML instance.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t14" headers="r1c1-t14"><code dir="ltr">flag</code></td>
<td class="cellalignment4329" headers="r3c1-t14 r1c2-t14"><code dir="ltr">(IN)</code></td>
<td class="cellalignment4329" headers="r3c1-t14 r1c3-t14">0 - <code dir="ltr">NOT VALIDATED</code>; 1 - <code dir="ltr">VALIDATED</code> (Default)</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71988" class="refsect2"><a id="BABFEGCB"></a>
<h3 class="refsect2"><a id="sthref20974"></a><a id="sthref20975"></a>TOOBJECT</h3>
<p>Member procedure. Converts the XML value to an object type using the <code dir="ltr">XMLSCHEMA</code> mapping, if available. If a <code dir="ltr">SCHEMA</code> is not supplied or the input is a non-schema based XML, the procedure uses cannonical mapping between elements and object type attributes.</p>
<p class="subhead2"><a id="ARPLS71989"></a>Syntax</p>
<pre dir="ltr">MEMBER PROCEDURE toObject(
SELF in XMLType,
object OUT &#34;&lt;ADT_1&gt;&#34;,
schema in varchar2 := NULL,
element in varchar2 := NULL);
</pre>
<div class="inftblinformal">
<table class="cellalignment4327" title="Parameters" summary="This table describes the Parameters of the XMLType member subprogram TOOBJECT" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t15">Parameter</th>
<th class="cellalignment4328" id="r1c2-t15">IN / OUT</th>
<th class="cellalignment4328" id="r1c3-t15">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t15" headers="r1c1-t15"><code dir="ltr">SELF</code></td>
<td class="cellalignment4329" headers="r2c1-t15 r1c2-t15"><code dir="ltr">(IN)</code></td>
<td class="cellalignment4329" headers="r2c1-t15 r1c3-t15">Instance to be converted. Implicit if used as a member procedure.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t15" headers="r1c1-t15"><code dir="ltr">object</code></td>
<td class="cellalignment4329" headers="r3c1-t15 r1c2-t15"><code dir="ltr">(IN)</code></td>
<td class="cellalignment4329" headers="r3c1-t15 r1c3-t15">Converted object. An object instance of the required type may be passed in to this function</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t15" headers="r1c1-t15"><code dir="ltr">schema</code></td>
<td class="cellalignment4329" headers="r4c1-t15 r1c2-t15"><code dir="ltr">(IN)</code></td>
<td class="cellalignment4329" headers="r4c1-t15 r1c3-t15">Schema URL. The mapping of the <code dir="ltr">XMLType</code> instance to the converted object instance may be specified using a schema. <span class="bold">Caution</span>: Oracle does not support use of types generated by Schema Registration (see <a class="olink ADXDB6229" href="../ADXDB/xdb06stt.htm#ADXDB6229"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a>).</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t15" headers="r1c1-t15"><code dir="ltr">element</code></td>
<td class="cellalignment4329" headers="r5c1-t15 r1c2-t15"><code dir="ltr">(IN)</code></td>
<td class="cellalignment4329" headers="r5c1-t15 r1c3-t15">Top-level element name. An XML Schema document does not specify the top-level element for a conforming XML instance document without this parameter. <span class="bold">Caution</span>: Oracle does not support use of types generated by Schema Registration (see <a class="olink ADXDB6229" href="../ADXDB/xdb06stt.htm#ADXDB6229"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a>).</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71990" class="refsect2"><a id="i1009783"></a>
<h3 class="refsect2"><a id="sthref20976"></a><a id="sthref20977"></a>TRANSFORM</h3>
<p>Member function. This member function transforms the XML data using the XSL stylesheet argument and the top-level parameters passed as a string of name=value pairs. If any of the arguments other than the parammap is <code dir="ltr">NULL</code>, then a <code dir="ltr">NULL</code> is returned.</p>
<p class="subhead2"><a id="ARPLS71991"></a>Syntax</p>
<pre dir="ltr">MEMBER FUNCTION transform(
xsl IN XMLType,
parammap in varchar2 := NULL)
RETURN XMLType deterministic;
</pre>
<div class="inftblinformal">
<table class="cellalignment4327" title="Parameters" summary="This table describes the Parameters of the XMLType member subprogram TRANSFORM." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t16">Parameter</th>
<th class="cellalignment4328" id="r1c2-t16">IN / OUT</th>
<th class="cellalignment4328" id="r1c3-t16">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t16" headers="r1c1-t16"><code dir="ltr">xsl</code></td>
<td class="cellalignment4329" headers="r2c1-t16 r1c2-t16"><code dir="ltr">(IN)</code></td>
<td class="cellalignment4329" headers="r2c1-t16 r1c3-t16">The XSL stylesheet describing the transformation</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t16" headers="r1c1-t16"><code dir="ltr">parammap</code></td>
<td class="cellalignment4329" headers="r3c1-t16 r1c2-t16"><code dir="ltr">(IN)</code></td>
<td class="cellalignment4329" headers="r3c1-t16 r1c3-t16">Top level parameters to the XSL - string of name=value pairs</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71992" class="refsect2"><a id="i1009842"></a>
<h3 class="refsect2"><a id="sthref20978"></a><a id="sthref20979"></a>XMLTYPE</h3>
<p><code dir="ltr">XMLType</code> constructor. The options are described in the following table.</p>
<div class="inftblinformal">
<table class="cellalignment4327" title="INFORMATION TO BE REMOVED FROM TABLE" summary="REMOVE FROM TABLE" dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t17">Syntax</th>
<th class="cellalignment4328" id="r1c2-t17">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t17" headers="r1c1-t17"><code dir="ltr">constructor function XMLType(</code>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;xmlData IN clob,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;schema IN varchar2 := NULL,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;validated IN number := 0,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;wellformed IN Number := 0)</code></p>
<p><code dir="ltr">return self as result deterministic;</code></p>
</td>
<td class="cellalignment4329" headers="r2c1-t17 r1c2-t17">This constructor function creates an optionally schema-based <code dir="ltr">XMLType</code> instance using the specified schema and xml data parameters.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t17" headers="r1c1-t17"><code dir="ltr">constructor function XMLType(</code>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;xmlData IN varchar2,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;schema IN varchar2 := NULL,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;validated IN number := 0,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;wellformed IN number := 0)</code></p>
<p><code dir="ltr">return self as result deterministic;</code></p>
</td>
<td class="cellalignment4329" headers="r3c1-t17 r1c2-t17">This constructor function creates an optionally schema-based <code dir="ltr">XMLType</code> instance using the specified schema and xml data parameters.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t17" headers="r1c1-t17"><code dir="ltr">constructor function XMLType (</code>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;xmlData IN &#34;w&lt;ADT_1&gt;&#34;,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;schema IN varchar2 := NULL,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;element IN varchar2 := NULL,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;validated IN number := 0)</code></p>
<p><code dir="ltr">return self as result deterministic;</code></p>
</td>
<td class="cellalignment4329" headers="r4c1-t17 r1c2-t17">This constructor function creates an optionally schema-based <code dir="ltr">XMLType</code> instance from the specified object type parameter.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t17" headers="r1c1-t17"><code dir="ltr">constructor function XMLType(</code>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;xmlData IN SYS_REFCURSOR,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;schema in varchar2 := NULL,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;element in varchar2 := NULL,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;validated in number := 0)</code></p>
<p><code dir="ltr">return self as result deterministic;</code></p>
</td>
<td class="cellalignment4329" headers="r5c1-t17 r1c2-t17">This constructor function creates an optionally schema-based <code dir="ltr">XMLType</code> instance from the specified <code dir="ltr">REF CURSOR</code> parameter.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t17" headers="r1c1-t17"><code dir="ltr">constructor function XMLType(</code>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;xmlData IN AnyData,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;schema IN varchar2 := NULL,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;element IN varchar2 := NULL,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;validated IN number := 0)</code></p>
<p><code dir="ltr">return self as result deterministic</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;parallel_enable</code></p>
</td>
<td class="cellalignment4329" headers="r6c1-t17 r1c2-t17">This constructor function creates an optionally schema-based <code dir="ltr">XMLType</code> instance from the specified <code dir="ltr">ANYDATA</code> parameter.If the <code dir="ltr">ANYDATA</code> instance contains an ADT, the <code dir="ltr">XMLType</code> returned is the same as would be returned for a call directly on the ADT. If the <code dir="ltr">ANYDATA</code> contains a scalar, the <code dir="ltr">XMLType</code> contains a leaf node with the scalar value. The element name for this node is taken from the optional element string if present, and is &#34;<code dir="ltr">ANYDATA</code>&#34; if it is not.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t17" headers="r1c1-t17"><code dir="ltr">constructor function XMLType(</code>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;xmlData IN blob, csid IN number,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;schema IN varchar2 := NULL,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;validated IN number := 0,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;wellformed IN number := 0)</code></p>
<p><code dir="ltr">return self as result deterministic</code></p>
</td>
<td class="cellalignment4329" headers="r7c1-t17 r1c2-t17">This constructor function creates an optionally schema-based <code dir="ltr">XMLType</code> instance from the specified <code dir="ltr">BLOB</code> parameter.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r8c1-t17" headers="r1c1-t17"><code dir="ltr">constructor function XMLType(</code>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;xmlData IN bfile,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;csid IN number,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;schema IN varchar2 := NULL,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;validated IN number := 0,</code></p>
<p><code dir="ltr">&nbsp;&nbsp;&nbsp;wellformed IN number := 0)</code></p>
<p><code dir="ltr">return self as result deterministic</code></p>
</td>
<td class="cellalignment4329" headers="r8c1-t17 r1c2-t17">This constructor function creates an optionally schema-based <code dir="ltr">XMLType</code> instance from the specified <code dir="ltr">BFILE</code> parameter.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment4327" title="Parameters" summary="This table describes the Parameters of the XMLType constructor subprogram XMLTYPE." dir="ltr">
<thead>
<tr class="cellalignment4321">
<th class="cellalignment4328" id="r1c1-t18">Parameter</th>
<th class="cellalignment4328" id="r1c2-t18">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r2c1-t18" headers="r1c1-t18"><code dir="ltr">xmlData</code></td>
<td class="cellalignment4329" headers="r2c1-t18 r1c2-t18">The data in the form of a <code dir="ltr">BFILE</code>, <code dir="ltr">BLOB</code>, <code dir="ltr">CLOB</code>, <code dir="ltr">REF</code>s, <code dir="ltr">VARCHAR2</code> or object type.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r3c1-t18" headers="r1c1-t18"><code dir="ltr">schema</code></td>
<td class="cellalignment4329" headers="r3c1-t18 r1c2-t18">Optional Schema URL to be used to make the input conform to the given schema. <span class="bold">Caution</span>: Oracle does not support use of types generated by Schema Registration (see <a class="olink ADXDB6229" href="../ADXDB/xdb06stt.htm#ADXDB6229"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a>).</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r4c1-t18" headers="r1c1-t18"><code dir="ltr">validated</code></td>
<td class="cellalignment4329" headers="r4c1-t18 r1c2-t18">Indicates that the instance is valid to the given XML Schema.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r5c1-t18" headers="r1c1-t18"><code dir="ltr">wellformed</code></td>
<td class="cellalignment4329" headers="r5c1-t18 r1c2-t18">Indicates that the input is well formed. If set, then the database would not do well formed check on the input instance.</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r6c1-t18" headers="r1c1-t18"><code dir="ltr">element</code></td>
<td class="cellalignment4329" headers="r6c1-t18 r1c2-t18">Optional element name in the case of the <code dir="ltr">ADT_1</code> or <code dir="ltr">REF CURSOR</code> constructors. (Default is <code dir="ltr">NULL</code>). <span class="bold">Caution</span>: Oracle does not support use of types generated by Schema Registration (see <a class="olink ADXDB6229" href="../ADXDB/xdb06stt.htm#ADXDB6229"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a>).</td>
</tr>
<tr class="cellalignment4321">
<td class="cellalignment4329" id="r7c1-t18" headers="r1c1-t18"><code dir="ltr">csid</code></td>
<td class="cellalignment4329" headers="r7c1-t18 r1c2-t18">The character set id of input XML data.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4320">
<tr>
<td class="cellalignment4329">
<table class="cellalignment4325">
<tr>
<td class="cellalignment4324"><a href="t_utl_streams.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4324"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4332">
<table class="cellalignment4323">
<tr>
<td class="cellalignment4324"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4324"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4324"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4324"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4324"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4324"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>