<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-114662"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/The%20PGM%2C%20PGM_UTL8%2C%20and%20PGM_SUP%20Packages"></a><title>The PGM, PGM_UTL8, and PGM_SUP Packages</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1090"/>
<meta name="dcterms.created" content="2017-06-09T14:12:29Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Gateway for WebSphere MQ Installation and User&#39;s Guide"/>
<meta name="dcterms.identifier" content="E17930-06"/>
<meta name="dcterms.isVersionOf" content="WSMQG"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2005, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="running.htm" title="Previous" type="text/html"/>
<link rel="Next" href="app_urpkg.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17930-06.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">15/18</span> <!-- End Header -->
<div id="WSMQG233" class="appendix"><a id="BABGEDBJ"></a>
<h1 class="appendix"><span class="secnum">A</span> The PGM, PGM_UTL8, and PGM_SUP Packages</h1>
<p><a id="sthref425"></a>Use the Visual Workbench when developing applications that access WebSphere MQ through the gateway. The Visual Workbench defines an interface for accessing WebSphere MQ and automatically generates the PL/SQL code (the MIP) for Oracle applications to interface with the gateway. Refer to the <span class="italic">Oracle Procedural Gateway Visual Workbench for WebSphere MQ Installation and User&#39;s Guide for Microsoft Windows (32-Bit)</span> for more information about Visual Workbench.</p>
<p><a id="sthref426"></a>The MIP uses definitions from the <code dir="ltr">PGM</code>, <code dir="ltr">PGM_UTL8</code>, and <a id="sthref427"></a><code dir="ltr">PGM_SUP</code> packages. When necessary, you can alter the MIP to include WebSphere MQ functions that are not supported by Visual Workbench. This is done with the definitions and procedures from the <code dir="ltr">PGM</code>, and <code dir="ltr">PGM_UTL8</code>, and <code dir="ltr">PGM_SUP</code> packages.</p>
<p>The <code dir="ltr">PGM</code>, <code dir="ltr">PGM_UTL8</code>, and <code dir="ltr">PGM_SUP</code> packages are installed when the Visual Workbench repository or the DG4MQ deployment environment is created. For more information, refer to <a href="config.htm#i1020324">&#34;Installing the Oracle Visual Workbench Repository&#34;</a> and <a href="config.htm#i1021622">&#34;Preparing the Production Oracle Database&#34;</a>.</p>
<p>This appendix discusses the <code dir="ltr">PGM</code>, <code dir="ltr">PGM_UTL8</code>, and <code dir="ltr">PGM_SUP</code> packages in the following sections:</p>
<ul>
<li>
<p><a href="#i640900">PGM Package, DG4MQ Gateway Procedures, and Data Type Definitions</a></p>
</li>
<li>
<p><a href="#i641015">MQCLOSE Procedure</a></p>
</li>
<li>
<p><a href="#i641049">MQGET Procedure</a></p>
</li>
<li>
<p><a href="#i641536">MQOPEN Procedure</a></p>
</li>
<li>
<p><a href="#i641679">MQPUT Procedure</a></p>
</li>
<li>
<p><a href="#i641872">PGM_SUP Package</a></p>
</li>
</ul>
<a id="i640900"></a>
<div id="WSMQG234" class="sect1">
<h2 class="sect1">PGM Package, DG4MQ Gateway Procedures, and Data Type Definitions</h2>
<p><a id="sthref428"></a>The gateway procedures and type definitions of the <code dir="ltr"><a id="sthref429"></a>PGM</code> package are modeled after the WebSphere MQ MQI calls. For all the relevant calls and structures found in <a id="sthref430"></a>MQI, a corresponding counterpart exists in <code dir="ltr">PGM</code> and the associated data type definitions exist in <code dir="ltr">pgmobj.sql</code>. The gateway procedures and <code dir="ltr">PGM</code> type definitions are named the same as their MQI counterparts. However, the data types of arguments or structure fields are changed into corresponding PL/SQL data types.</p>
<p>Using these procedures and type definitions in an Oracle application is very similar to writing a WebSphere MQ application. The fields of all <code dir="ltr">PGM</code> type definitions are initialized. These initialization values are based on default values defined by MQI.</p>
<p>The use of gateway procedures and <code dir="ltr">PGM</code> type definitions requires extensive knowledge of MQI and WebSphere MQ programming in general. These procedures and records follow the MQI flowchart, semantics, and syntax rules.</p>
<p>The <code dir="ltr">PGM</code> package is installed when the Visual Workbench repository or the DG4MQ deployment environment is created and is granted public access. It has no schema because the gateway omits all schema names when describing or running a procedure. No schema qualifiers need to be prefixed to the names of the procedures and type definitions.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
Refer to IBM <span class="italic">MQSeries Application Programming Reference</span> for complete information about writing WebSphere MQ applications and using MQI calls.</div>
<div id="WSMQG235" class="sect2"><a id="sthref431"></a>
<h3 class="sect2">Summary of Procedures and Type Definitions</h3>
<p>The gateway procedures and PGM provide the following procedures and type definitions:</p>
<div id="WSMQG342" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref432"></a><a id="sthref433"></a>Table A-1 Procedures and Type Definitions</p>
<table class="cellalignment5005" title="Procedures and Type Definitions" summary="This table describes procedures and type definitions." dir="ltr">
<thead>
<tr class="cellalignment4994">
<th class="cellalignment5001" id="r1c1-t3">Procedure</th>
<th class="cellalignment5001" id="r1c2-t3">Procedure Purpose</th>
<th class="cellalignment5001" id="r1c3-t3">Type Definitions Used by the Procedure</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r2c1-t3" headers="r1c1-t3">
<p><code dir="ltr">MQOPEN</code></p>
</td>
<td class="cellalignment5002" headers="r2c1-t3 r1c2-t3">
<p>Opens a queue.</p>
</td>
<td class="cellalignment5002" headers="r2c1-t3 r1c3-t3">
<p><code dir="ltr">PGM</code>.<code dir="ltr">MQOD</code> and <code dir="ltr">PGM</code>.<code dir="ltr">MQOH</code></p>
</td>
</tr>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r3c1-t3" headers="r1c1-t3">
<p><code dir="ltr">MQPUT</code></p>
</td>
<td class="cellalignment5002" headers="r3c1-t3 r1c2-t3">
<p>Sends a message to the queue that was opened by <code dir="ltr">MQOPEN</code></p>
</td>
<td class="cellalignment5002" headers="r3c1-t3 r1c3-t3">
<p><code dir="ltr">PGM</code>.<code dir="ltr">MQMD</code></p>
<p><code dir="ltr">PGM</code>.<code dir="ltr">MQOH</code></p>
<p><code dir="ltr">PGM</code>.<code dir="ltr">MQPMO</code></p>
</td>
</tr>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r4c1-t3" headers="r1c1-t3">&nbsp;</td>
<td class="cellalignment5002" headers="r4c1-t3 r1c2-t3">
<p>Sends a message longer than 32767 bytes to the queue</p>
</td>
<td class="cellalignment5002" headers="r4c1-t3 r1c3-t3">
<p><code dir="ltr">PGM</code>.<code dir="ltr">MQMD</code></p>
<p><code dir="ltr">PGM</code>.<code dir="ltr">MQOH</code></p>
<p><code dir="ltr">PGM</code>.<code dir="ltr">MQPMO</code></p>
<p><code dir="ltr">PGM</code>.<code dir="ltr">MQPUT_BFFER</code></p>
</td>
</tr>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r5c1-t3" headers="r1c1-t3">
<p><code dir="ltr">MQGET</code></p>
</td>
<td class="cellalignment5002" headers="r5c1-t3 r1c2-t3">
<p>Retrieves or scans a message from the queue that was opened by <code dir="ltr">MQOPEN</code></p>
</td>
<td class="cellalignment5002" headers="r5c1-t3 r1c3-t3">
<p><code dir="ltr">PGM</code>.<code dir="ltr">MQMD</code></p>
<p><code dir="ltr">PGM</code>.<code dir="ltr">MQOH</code></p>
<p><code dir="ltr">PGM</code>.<code dir="ltr">MQGMO</code></p>
</td>
</tr>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r6c1-t3" headers="r1c1-t3">&nbsp;</td>
<td class="cellalignment5002" headers="r6c1-t3 r1c2-t3">
<p>Sends a message longer than 32767 bytes to the queue</p>
</td>
<td class="cellalignment5002" headers="r6c1-t3 r1c3-t3">
<p><code dir="ltr">PGM</code>.<code dir="ltr">MQMD</code></p>
<p><code dir="ltr">PGM</code>.<code dir="ltr">MQOH</code></p>
<p><code dir="ltr">PGM</code>.<code dir="ltr">MQGMO</code></p>
<p><code dir="ltr">PGM</code>.<code dir="ltr">MQGET_BFFER</code></p>
</td>
</tr>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r7c1-t3" headers="r1c1-t3">
<p><code dir="ltr">MQCLOSE</code></p>
</td>
<td class="cellalignment5002" headers="r7c1-t3 r1c2-t3">
<p>Closes the queue that was opened by <code dir="ltr">MQOPEN</code></p>
</td>
<td class="cellalignment5002" headers="r7c1-t3 r1c3-t3">
<p>Does not use a type definition.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformalwide" --></div>
<!-- class="sect2" -->
<a id="i640949"></a>
<div id="WSMQG236" class="sect2">
<h3 class="sect2">Procedure Conventions</h3>
<p>The gateway procedures are described in alphabetic order in this appendix.&nbsp;The type definitions are described with the procedures that use them. Only type definition fields that can be changed are described. Other fields equivalent to MQI fields are left out because they are reserved for WebSphere MQ, are not supported by the gateway, or contain values that should not be changed.</p>
<p>A procedure&#39;s definition is shown using the IBM argument names associated with the equivalent MQI call. For example:</p>
<pre dir="ltr">MQGET(hobj, mqmd, mqgmo, msg)
</pre>
<p><br/>
The syntax of the <code dir="ltr">MQGET</code> call is as follows:</p>
<pre dir="ltr">MQGET(<span class="italic">handle</span>, <span class="italic">descript</span>, <span class="italic">get_options</span>, <span class="italic">message</span>);
</pre>
<p>where:</p>
<ul>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">handle</span></code> is your name for the first argument specified in the definition as <code dir="ltr">hobj</code>.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">descript</span></code> is your name for the second argument specified in the definition as <code dir="ltr">mqmd</code>.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">get_options</span></code> is your name for the third argument specified in the definition as <code dir="ltr">mqgmo</code>.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">message</span></code> is your name for the fourth argument specified in the definition as <code dir="ltr">msg</code>.</p>
<p>You can use your own names for these arguments if you code the arguments in the order shown in the definition.</p>
</li>
</ul>
<p>For more information about PL/SQL, refer to the <a class="olink LNPLS" href="../LNPLS/toc.htm"><span class="italic">Oracle Database PL/SQL Language Reference</span></a>.</p>
</div>
<!-- class="sect2" -->
<div id="WSMQG237" class="sect2"><a id="sthref434"></a>
<h3 class="sect2">MQI Calls Performed by the Gateway</h3>
<p>The following MQI calls have no equivalent procedures in the gateway because the Oracle database and the gateway automatically perform the functions of these MQI calls:</p>
<ul>
<li>
<p><a id="sthref435"></a><code dir="ltr">MQBACK</code></p>
<p>Transaction control is handled by the Oracle transaction coordinator. The Oracle application does not need to invoke a separate <code dir="ltr">MQBACK</code> call to undo the changes sent to WebSphere MQ.</p>
</li>
<li>
<p><a id="sthref436"></a><code dir="ltr">MQCONN</code></p>
<p>A connection to a queue manager is established by the Oracle database and the gateway whenever an Oracle application refers to a gateway procedure. The database link name that is used when calling the gateway procedure determines which queue manager the gateway connects to.</p>
</li>
<li>
<p><a id="sthref437"></a><code dir="ltr">MQCMIT</code></p>
<p>Transaction control is handled by the Oracle transaction coordinator.&nbsp;An Oracle application does not need to invoke a separate <code dir="ltr">MQCMIT</code> call to commit the changes sent to WebSphere MQ.</p>
</li>
<li>
<p><a id="sthref438"></a><code dir="ltr">MQDISC</code></p>
<p>Connections to a queue manager are closed by the Oracle database and gateway. An Oracle application does not need to close the connection with the queue manager. Ending the current Oracle session or dropping the database link causes the queue manager connection to end.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="WSMQG238" class="sect2"><a id="sthref439"></a>
<h3 class="sect2">Unsupported MQI Calls</h3>
<p><a id="sthref440"></a>The following MQI calls are not supported by the gateway:</p>
<ul>
<li>
<p><a id="sthref441"></a><code dir="ltr">MQINQ</code></p>
</li>
<li>
<p><a id="sthref442"></a><code dir="ltr">MQPUT1</code></p>
</li>
<li>
<p><a id="sthref443"></a><code dir="ltr">MQSET</code></p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i662345"></a>
<div id="WSMQG239" class="sect2">
<h3 class="sect2">Migration Ti<a id="sthref444"></a>ps</h3>
<p>This section provides information about how to upgrade Oracle9<span class="italic">i</span> DG4MQ and existing customized PL/SQL application programs to use Oracle Database Gateway for WebSphere MQ features. DG4MQ data types and RPC API prototypes are changed to meet the requirements of the gateway infrastructure.</p>
<p>When upgrading DG4MQ to Oracle 10<span class="italic">g</span> release 2 or higher, Oracle recommends that you install the newer version of DG4MQ on a separate development Oracle system. After you have finished with system configuration and testing, transfer all of the COBOL copy books and regenerate and recompile MIPs using the Oracle Visual Workbench. For customized codes, make necessary changes and recompile.</p>
<p class="subhead2"><a id="WSMQG343"></a>Migrating DG4MQ Releases 8 and 9 PL/SQL Applications</p>
<p>To migrate DG4MQ releases 8 and 9 PL/SQL applications:</p>
<ol>
<li>
<p>In the PL/SQL declarative section, remove <code dir="ltr">dblink</code> references from the following DG4MQ data types:</p>
<ul>
<li>
<p><code dir="ltr">PGM8</code>.<code dir="ltr">MQOD</code></p>
</li>
<li>
<p><code dir="ltr">PGM8</code>.<code dir="ltr">MQMD</code></p>
</li>
<li>
<p><code dir="ltr">PGM8</code>.<code dir="ltr">MQPMO</code></p>
</li>
<li>
<p><code dir="ltr">PGM8</code>.<code dir="ltr">MQGMO</code></p>
</li>
</ul>
<p>Then remove the following <code dir="ltr">PGM8</code>.<code dir="ltr">MQ</code>*<code dir="ltr">RAW</code> data types:</p>
<ul>
<li>
<p><code dir="ltr">PGM8</code>.<code dir="ltr">MQODRAW</code></p>
</li>
<li>
<p><code dir="ltr">PGM8</code>.<code dir="ltr">MQMDRAW</code></p>
</li>
<li>
<p><code dir="ltr">PGM8</code>.<code dir="ltr">MQPMORAW</code></p>
</li>
<li>
<p><code dir="ltr">PGM8</code>.<code dir="ltr">MQGMORAW</code></p>
</li>
</ul>
</li>
<li>
<p>In the PL/SQL declarative section, change the data type of the handle of the queue, the third argument of <code dir="ltr">PGM</code>.<code dir="ltr">MQOPEN</code>, from <code dir="ltr">BINARY_INTEGER</code> to <code dir="ltr">PGM</code>.<code dir="ltr">MQOH</code> and replace the package name <code dir="ltr">PGM8</code> with <code dir="ltr">PGM</code>.</p>
<p>Change the data type of the handles of the queue, the third argument of <code dir="ltr">PGM</code>.<code dir="ltr">MQOPEN,</code> from <code dir="ltr">BINARY_INTEGER</code> to <code dir="ltr">PGM</code>.<code dir="ltr">MQOH</code>.</p>
<p>For example, for version 8 and 9 change the following data types to those listed for Oracle 10<span class="italic">g</span>:</p>
<pre dir="ltr">objdesc    PGM8.MQOD;
msgdesc    PGM8.MQMD;
putmsgopts PGM8.MQPMO;
getmsgopts PGM8.MQGMO;
hobj       BINARY_INTEGER;
mqodRaw    PGM8.MQODRAW;
mqmdRaw    PGM8.MQMDRAW;
mqpmoRaw   PGM8.MQPMORAW;
mqgmoRaw   PGM8.MQGMORAW;
</pre>
<p>The data types for Oracle 10<span class="italic">g</span> release 2 and higher:</p>
<pre dir="ltr">objdesc     PGM.MQOD;
msgdesc     PGM.MQMD;
putmsgopts  PGM.MQPMO;
getmsgopts  PGM.MQGMO;
hobj        PGM.MQOH;
</pre></li>
<li>
<p>In the PL/SQL executable section, remove <code dir="ltr">dblink</code> references from the following DG4MQ procedures:</p>
<pre dir="ltr">PGM8.MQOPEN@dblink()
PGM8.MQPUT@dblink()
PGM8.MQGET@dblink()
PGM8.MQCLOSE@dblink()
</pre>
<p>Then define the <code dir="ltr">dblink</code> in the new <code dir="ltr">PGM.MQOD</code> type where the object queue name is defined.</p>
<p>For example, for version 8 and 9:</p>
<pre dir="ltr">objdesc.objectname := &#39;QUEUE1&#39;;
</pre>
<p>For Oracle 10<span class="italic">g</span> release 2 and higher:</p>
<pre dir="ltr">objdesc.objectname := &#39;QUEUE1&#39;;
objdesc.dblinkname := &#39;dblink&#39;;
</pre></li>
<li>
<p>If necessary, change the package name <code dir="ltr">PGM8</code> of all DG4MQ procedures to <code dir="ltr">PGM</code>.</p>
<p>For example, for version 8 and 9:</p>
<pre dir="ltr">PGM8.MQOPEN@dblink();
PGM8.MQPUT@dblink();
PGM8.MQGET@dblink();
PGM8.MQCLOSE@dblink();
</pre>
<p>For Oracle 10<span class="italic">g</span> release 2 and higher:</p>
<pre dir="ltr">PGM.MQOPEN;
PGM.MQPUT;
PGM.MQGET;
PGM.MQCLOSE;
</pre></li>
<li>
<p>In the PL/SQL executable section, remove all statements starting with <code dir="ltr">PGM_UTL8</code>.<code dir="ltr">RAW_TO_</code>*, remove all <code dir="ltr">PGM_UTL8</code>.<code dir="ltr">TO_RAW</code> statements, and replace all references to the <code dir="ltr">MQ</code>*<code dir="ltr">RAW</code> data types with their matching <code dir="ltr">MQ</code>* data types in the following DG4MQ procedures:</p>
<ul>
<li>
<p><code dir="ltr">PGM</code>.<code dir="ltr">MQOPEN</code>;</p>
</li>
<li>
<p><code dir="ltr">PGM</code>.<code dir="ltr">MQPU</code>;</p>
</li>
<li>
<p><code dir="ltr">PGM</code>.<code dir="ltr">MQGET</code>;</p>
</li>
<li>
<p><code dir="ltr">PGM</code>.<code dir="ltr">MQCLOSE</code>;</p>
</li>
</ul>
<p>For example, for versions 8 and 9:</p>
<pre dir="ltr">mqodRaw := PGM_UTL8.TO_RAW(objdesc);
PGM8.MQOPEN@dblink(mqodRaw, options, hobj);
objdesc := PGM_UTL8.RAW_TO_MQMD(mqodRaw);
mqmdRaw := PGM_UTL8.TO_RAW(msgdesc);
mqpmoRaw := PGM_UTL8.TO_RAW(putmsgopts);
PGM8.MQPUT@dblink(hobj, mqmdRaw, mqpmoRaw, putbuffer);
putmsgopts := PGM_UTL8.RAW_TO_MQPMO(mqpmoRaw);
msgdesc := PGM_UTL8.RAW_TO_MQMD(mqmdRaw);

mqmdRaw := PGM_UTL8.TO_RAW(msgdesc);
mqgmoRaw := PGM_UTL8.TO_RAW(getmsgopts);
PGM8.MQGET@dblink(hobj, mqmdRaw, mqgmoRaw, putbuffer);
getmsgopts := PGM_UTL8.RAW_TO_MQGMO(mqgmoRaw);
msgdesc := PGM_UTL8.RAW_TO_MQMD(mqmdRaw);
</pre>
<p>For Oracle 10<span class="italic">g</span> release 2 and higher:</p>
<pre dir="ltr">PGM.MQOPEN(objdesc, options, hobj);
PGM.MQPUT(hobj, msgdesc, putmsgopts, putbuffer);
PGM.MQGET(hobj, msgdesc, getmsgopts, getbuffer);
</pre></li>
<li>
<p>In PL/SQL executable section, remove all statements that reference the old <code dir="ltr">MQ</code>*<code dir="ltr">RAW</code> data types.</p>
</li>
</ol>
<p class="subhead2"><a id="WSMQG344"></a>Migrating DG4MQ Release 4.0.1.*.* PL/SQL Applications</p>
<p>To migrate applications:</p>
<ol>
<li>
<p>In the PL/SQL declarative section, remove <code dir="ltr">dblink</code> references from the following DG4MQ data types:</p>
<ul>
<li>
<p><code dir="ltr">PGM</code>.<code dir="ltr">MQOD</code></p>
</li>
<li>
<p><code dir="ltr">PGM</code>.<code dir="ltr">MQMD</code></p>
</li>
<li>
<p><code dir="ltr">PGM</code>.<code dir="ltr">MQPMO</code></p>
</li>
<li>
<p><code dir="ltr">PGM</code>.<code dir="ltr">MQGMO</code></p>
</li>
</ul>
</li>
<li>
<p>In the PL/SQL executable section, remove <code dir="ltr">dblink</code> references from the following DG4MQ procedures and define the <code dir="ltr">dblink</code> in the new <code dir="ltr">PGM</code>.<code dir="ltr">MQOD</code> object where the object queue name is defined:</p>
<ul>
<li>
<p><code dir="ltr">PGM</code>.<code dir="ltr">MQOPEN</code><code dir="ltr">@</code><code dir="ltr">dblink</code>()</p>
</li>
<li>
<p><code dir="ltr">PGM</code>.<code dir="ltr">MQPUT</code><code dir="ltr">@</code><code dir="ltr">dblink</code>()</p>
</li>
<li>
<p><code dir="ltr">PGM</code>.<code dir="ltr">MQGET</code><code dir="ltr">@</code><code dir="ltr">dblink</code>()</p>
</li>
<li>
<p><code dir="ltr">PGM</code>.<code dir="ltr">MQCLOSE</code><code dir="ltr">@</code><code dir="ltr">dblink</code>()</p>
</li>
</ul>
<p>For example, for version 4:</p>
<pre dir="ltr">PGM.MQOPEN@dblink(objdesc, options, hobj);
objdesc.objectname :=&#39;QUEUE1&#39;;
PGM.MQPUT@dblink(hobj, msgdesc, putmsgopts, putbuffer);
PGM.MQGET@dblink(hobj, msgdesc, getmsgopts, putbuffer);
PGM.MQCLOSE@dblink(hobj, options);
</pre></li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i641015"></a>
<div id="WSMQG240" class="sect1">
<h2 class="sect1">MQCLOSE<a id="sthref445"></a> <a id="sthref446"></a>Procedure</h2>
<p><code dir="ltr">MQCLOSE</code> <a id="sthref447"></a>closes a <a id="sthref448"></a>queue. On return, the queue handle is invalid and your application must reopen the queue with another call to <code dir="ltr">MQOPEN</code> before issuing another <code dir="ltr">MQPUT</code>, <code dir="ltr">MQGET</code>, or <code dir="ltr">MQCLOSE</code> call to the queue.</p>
<p><code dir="ltr">MQCLOSE</code> differs from MQI calls in the following ways:</p>
<ul>
<li>
<p>The connection handle argument is omitted from <code dir="ltr">MQCLOSE</code> because the gateway automatically takes care of managing queue manager connections.</p>
</li>
<li>
<p>The MQI completion code is not included in the procedure argument list. When a gateway procedure fails because the corresponding MQI call failed, then an Oracle error message is returned to the caller.</p>
</li>
<li>
<p>The MQI reason code is not included in the procedure argument list. When the corresponding MQI call for a gateway procedure returns a reason code, then the reason code is included in the Oracle error message returned to the caller.</p>
</li>
</ul>
<p class="subhead2"><a id="WSMQG345"></a>Definition</p>
<pre dir="ltr">MQCLOSE(<span class="italic">hobj</span>, <span class="codeinlineitalic">options</span>)
</pre>
<p>where:</p>
<ul>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">hobj</span></code> contains the handle for the queue to close. The handle is returned by a previous call to <code dir="ltr">MQOPEN</code>. This input argument is a new <code dir="ltr">PGM</code>.<code dir="ltr">MQOH</code> object in Oracle 10<span class="italic">g</span> release 2.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">options</span></code> specifies the close action. Use <code dir="ltr">PGM_SUP</code>.<code dir="ltr">MQCO_NONE</code> or the other <code dir="ltr">PGM_SUP</code> constants for a close option. Refer to <a href="#i642067">MQCLOSE Values</a>. This input argument is of the <code dir="ltr">BINARY_INTEGER</code> PL/SQL data type.</p>
</li>
</ul>
<p>You can use your own variable names when arguments are in the required order as follows:</p>
<pre dir="ltr">MQCLOSE(handle, close_options);
</pre></div>
<!-- class="sect1" -->
<a id="i641049"></a>
<div id="WSMQG241" class="sect1">
<h2 class="sect1">MQGET Procedure</h2>
<p><a id="sthref449"></a><a id="sthref450"></a><code dir="ltr">MQGET</code> <a id="sthref451"></a>retrieves a <a id="sthref452"></a>message from a queue. The queue must already be open from a previous call to <code dir="ltr">MQOPEN</code> with the <code dir="ltr">PGM_SUP</code>.<code dir="ltr">MQOO_INPUT_AS_Q_DEF</code> (or an equivalent option) option set. Retrieved messages for this form of <code dir="ltr">MQGET</code> must be shorter than 32767 bytes.</p>
<p><code dir="ltr">MQGET</code> differs from MQI calls in the following ways:</p>
<ul>
<li>
<p>The connection handle argument is omitted from <code dir="ltr">MQGET</code> because the gateway automatically takes care of managing queue manager connections.</p>
</li>
<li>
<p>The MQI completion code is not included in the procedure&#39;s argument list. When a gateway procedure fails because the corresponding MQI call failed, then an Oracle error message is returned to the caller.</p>
</li>
<li>
<p>The MQI reason code is not included in the procedure&#39;s argument list. When the corresponding MQI call for a gateway procedure returns a reason code, then the reason code is included in the Oracle error message that was returned to the caller.</p>
</li>
<li>
<p>The <code dir="ltr">msg</code> length argument is not included in the procedure&#39;s argument list because the Oracle database and the gateway automatically keep track of the message data length.</p>
</li>
</ul>
<p class="subhead2"><a id="WSMQG346"></a>Definition</p>
<pre dir="ltr">MQGET(<span class="italic">hobj</span>, <span class="codeinlineitalic">mqmd</span>, <span class="codeinlineitalic">mqgmo</span>, <span class="codeinlineitalic">msg</span>)
</pre>
<p>where:</p>
<ul>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">hobj</span></code> contains the handle for the queue to open. The handle is returned by a previous call to <code dir="ltr">MQOPEN</code>.&nbsp;This input argument is a new <code dir="ltr">PGM</code>.<code dir="ltr">MQOH</code> object in Oracle 10<span class="italic">g</span> release 2.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">mqmd</span></code> is used on input to describe the attributes of the message being retrieved. Use the fields of the <code dir="ltr">PGM</code>.<code dir="ltr">MQMD</code> object type definition to describe these attributes.</p>
<p>On output, <code dir="ltr">mqmd</code> contains information about how the request was processed. The queue manager sets some of the <code dir="ltr">PGM</code>.<code dir="ltr">MQMD</code> object fields on return.</p>
<p>This input and output argument is PL/SQL <code dir="ltr">PGM</code>.<code dir="ltr">MQMD</code> data type. For the details of <code dir="ltr">PGM</code>.<code dir="ltr">MQMD</code>, refer to <a href="#i641174">PGM.MQMD Type Definition</a>.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">mqgmo</span></code>is used on input to describe the option values that control the retrieve request. Use the fields of the <code dir="ltr">PGM</code>.<code dir="ltr">MQGMO</code> object type definition to describe these options.</p>
<p>On output, the queue manager sets some of the <code dir="ltr">PGM</code>.<code dir="ltr">MQGMO</code> object fields on return.</p>
<p>This input and output argument is PL/SQL <code dir="ltr">PGM</code>.<code dir="ltr">MQGMO</code> data type. For the details of the <code dir="ltr">PGM</code>.<code dir="ltr">MQGMO</code> object, refer to <a href="#i641458">PGM.MQGMO Type Definition</a>.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">msg</span></code> contains the retrieved message. This output argument is PL/SQL data type <code dir="ltr">RAW</code> or <code dir="ltr">PGM</code>.<code dir="ltr">MQGET_BUFFER</code>.</p>
</li>
</ul>
<p class="subhead2"><a id="WSMQG347"></a>Examples</p>
<ol>
<li>
<p>Using your own variable names when arguments are in the required order:</p>
<pre dir="ltr">MQGET(<span class="italic">handle</span>, <span class="italic">descript</span>, <span class="italic">opts</span>, <span class="italic">message</span>);
</pre></li>
<li>
<p>The following example, which is provided as a sample with the gateway (<code dir="ltr">ORACLE_HOME\dg4mq\getsample.sql on Microsoft Windows and</code> <code dir="ltr"><span class="codeinlineitalic">ORACLE_HOME</span></code><code dir="ltr">/dg4mq/sample/getsample.sql</code> on UNIX based systems), reads all messages from a WebSphere MQ queue. For more information, refer to the IBM publication on WebSphere MQ Application Programming.</p>
</li>
</ol>
<div id="WSMQG348" class="example">
<p class="titleinexample"><a id="sthref453"></a>Example A-1 getsample.sql</p>
<pre dir="ltr">---- Copyright Oracle, 2007 All Rights Reserved.
--
-- NAME
--   getsample.sql
--
-- DESCRIPTION
--
--   Specify the database link name you created for the gateway. To do this,
--   replace the database link name &#39;YOUR_DBLINK_NAME&#39; with the dblink name
--   you chose when the database link was created.
--
--   This script performs a test run for the MQSeries gateway. In this
--   script the queuename is &#39;YOUR_QUEUE_NAME&#39;, replace it with a valid 
--   queue name at the queue manager the gateway is configured for.
--
-- NOTES
--   Run the script from the SQL*Plus command line.
--
--   Make the sure the user is granted &#39;EXECUTE&#39; on package dbms_output
--

SET SERVEROUTPUT ON
DECLARE

    objdesc      PGM.MQOD;
    msgDesc      PGM.MQMD;
    getOptions   PGM.MQGMO;
    objectHandle PGM.MQOH;
    message      raw(32767);

BEGIN

    objdesc.OBJECTNAME := &#39;QUEUE1&#39;;
    objdesc.DBLINKNAME := &#39;dg4mqdepdblink&#39;;
                  -- Open the queue &#39;YOUR_QUEUE_NAME&#39; for reading.

    PGM.MQOPEN(objdesc, PGM_SUP.MQOO_INPUT_AS_Q_DEF, objectHandle);
              
    -- Get all messages from the queue.

    WHILE TRUE LOOP

        -- Reset msgid and correlid to get the next message.

        msgDesc.MSGID := PGM_SUP.MQMI_NONE;
        msgDesc.CORRELID := PGM_SUP.MQCI_NONE;

        PGM.MQGET(objectHandle, msgDesc, getOptions, message);

        -- Process the message....
        DBMS_OUTPUT.PUT_LINE(&#39;message read back = &#39; || rawtohex(message));

         END LOOP;

EXCEPTION

      WHEN PGM_SUP.NO_MORE_MESSAGES THEN

          DBMS_OUTPUT.PUT_LINE(&#39;Warning: No more message found on the queue&#39;);

          -- Close the queue again.

          PGM.MQCLOSE(objectHandle, PGM_SUP.MQCO_NONE);

      WHEN OTHERS THEN

          -- Re-raise the error;

          DBMS_OUTPUT.PUT_LINE(&#39;Error: Oracle Database Gateway for WebSphere MQ
 verification script failed.&#39;);
          DBMS_OUTPUT.PUT_LINE(SQLERRM); 
                         raise;

END;
/
</pre></div>
<!-- class="example" -->
<p>Notes:</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The PL/SQL block fails if the exception clause is left out. In that case, the <code dir="ltr">PGM_SUP.NO_MORE_MESSAGES</code> error code is raised. The <code dir="ltr">MSGID</code> and <code dir="ltr">CORRELID</code> fields that are used for <code dir="ltr">MQGET</code> are set after each call to <code dir="ltr">MQGET</code>.&nbsp;If they are not reset at each cycle, then <code dir="ltr">MQGET</code> checks for the next message that has the same identifiers as the last read operation, which usually do not exist.&nbsp;The PL/SQL block would only read one message.</div>
<a id="i641174"></a>
<div id="WSMQG242" class="sect2">
<h3 class="sect2">PGM.MQMD<a id="sthref454"></a> Type Definition</h3>
<p><code dir="ltr">PGM</code>.<code dir="ltr">MQMD</code> specifies the control information that accompanies a message when it travels between the sending and receiving applications. It also contains information about how the message is handled by the queue manager or by the receiving application. <code dir="ltr">PGM</code>.<code dir="ltr">MQMD</code> describes the attributes of the message being retrieved.</p>
<p>You can use the default values for <code dir="ltr">PGM</code>.<code dir="ltr">MQMD</code> fields or change the fields for your application requirements.&nbsp;For example, to change a field value, do the following:</p>
<pre dir="ltr"><span class="italic">mqmd.field_name</span> := <span class="italic">field_value;</span>
</pre>
<p>where:</p>
<ul>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">mqmd</span></code> is the <code dir="ltr">PGM</code>.<code dir="ltr">MQMD</code> object data type and it describes the attributes of the message being retrieved</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">field_name</span></code> is a field name of the <code dir="ltr">PGM</code>.<code dir="ltr">MQMD</code> object type definition. You can set as many fields as necessary. Refer to <a href="#g670621">Table A-2</a> for field names and descriptions.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">field_value</span></code> is the value to assign to <code dir="ltr"><span class="codeinlineitalic">field_name</span></code>. You can specify a value or use a <code dir="ltr">PGM_SUP</code> constant to assign a value.</p>
</li>
</ul>
<div id="WSMQG349" class="tblformalwide">
<p class="titleintable"><a id="sthref455"></a><a id="g670621"></a>Table A-2 PGM.MQMD Object Fields</p>
<table class="cellalignment5005" title="PGM.MQMD Object Fields" summary="This table describes object fields." dir="ltr">
<thead>
<tr class="cellalignment4994">
<th class="cellalignment5001" id="r1c1-t5">Field Name</th>
<th class="cellalignment5001" id="r1c2-t5">Description</th>
<th class="cellalignment5001" id="r1c3-t5">PL/SQL Data Type</th>
<th class="cellalignment5001" id="r1c4-t5">Initial Value</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r2c1-t5" headers="r1c1-t5">
<p><code dir="ltr">REPORT</code></p>
</td>
<td class="cellalignment5002" headers="r2c1-t5 r1c2-t5">
<p>Allows the application that sends a message to specify which report message (or messages) should be created by the queue manager when an expected or unexpected event occurs. Use a <code dir="ltr">PGM_SUP</code> constant to assign a value.&nbsp;Refer to <a href="#i642007">REPORT Field</a>.</p>
</td>
<td class="cellalignment5002" headers="r2c1-t5 r1c3-t5">
<p><code dir="ltr">RAW</code>(<code dir="ltr">4</code>)</p>
</td>
<td class="cellalignment5002" headers="r2c1-t5 r1c4-t5">
<p><code dir="ltr">PGM_SUP.MQRO_<br/>
NONE</code></p>
</td>
</tr>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r3c1-t5" headers="r1c1-t5">
<p><code dir="ltr">MSGTYPE</code></p>
</td>
<td class="cellalignment5002" headers="r3c1-t5 r1c2-t5">
<p>Specifies the message type:&nbsp;reply message, report message, or normal message (datagram). Use a PGM_SUP constant to assign a value.&nbsp;Refer to <a href="#i641967">MSGTYPE Field</a>.</p>
</td>
<td class="cellalignment5002" headers="r3c1-t5 r1c3-t5">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment5002" headers="r3c1-t5 r1c4-t5">
<p><code dir="ltr">PGM_SUP.MQMT_<br/>
DATAGRAM</code></p>
</td>
</tr>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r4c1-t5" headers="r1c1-t5">
<p><a id="i641248"></a><code dir="ltr">EXPIRY</code></p>
</td>
<td class="cellalignment5002" headers="r4c1-t5 r1c2-t5">
<p>Specifies the amount of time that a message stays in a queue. The expiration period is in tenths of a second, and is set by the sending application. Use a <code dir="ltr">PGM_SUP</code> constant to assign a value.&nbsp;Refer to <a href="#i641930">EXPIRY Field</a>.</p>
</td>
<td class="cellalignment5002" headers="r4c1-t5 r1c3-t5">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment5002" headers="r4c1-t5 r1c4-t5">
<p><code dir="ltr">PGM_SUP.QMEI_<br/>
UNLIMITED</code></p>
</td>
</tr>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r5c1-t5" headers="r1c1-t5">
<p><code dir="ltr">FEEDBACK</code></p>
</td>
<td class="cellalignment5002" headers="r5c1-t5 r1c2-t5">
<p>Used with the <code dir="ltr">REPORT</code> field to indicate the kind of report. Use a <code dir="ltr">PGM_SUP</code> constant to assign a value.&nbsp;Refer to <a href="#i641935">FEEDBACK Field</a>.</p>
</td>
<td class="cellalignment5002" headers="r5c1-t5 r1c3-t5">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment5002" headers="r5c1-t5 r1c4-t5">
<p><code dir="ltr">PGM_SUP.MQFB_<br/>
NONE</code></p>
</td>
</tr>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r6c1-t5" headers="r1c1-t5">
<p><code dir="ltr">ENCODING</code></p>
</td>
<td class="cellalignment5002" headers="r6c1-t5 r1c2-t5">
<p>Used for numeric values in the message data. Use a <code dir="ltr">PGM_SUP</code> constant to assign a value. Refer to <a href="#i641909">ENCODING Field</a>.</p>
</td>
<td class="cellalignment5002" headers="r6c1-t5 r1c3-t5">
<p><code dir="ltr">RAW</code>(<code dir="ltr">4</code>)</p>
</td>
<td class="cellalignment5002" headers="r6c1-t5 r1c4-t5">
<p><code dir="ltr">PGM_SUP.MQENC_<br/>
NATIVE</code></p>
</td>
</tr>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r7c1-t5" headers="r1c1-t5">
<p><code dir="ltr">CODEDCHARSETID</code></p>
</td>
<td class="cellalignment5002" headers="r7c1-t5 r1c2-t5">
<p>Specifies the coded character set identifier of the characters in the message. Use a <code dir="ltr">PGM_SUP</code> constant to assign a value. Refer to <a href="#i641904">CODEDCHARSETID Field</a>.</p>
</td>
<td class="cellalignment5002" headers="r7c1-t5 r1c3-t5">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment5002" headers="r7c1-t5 r1c4-t5">
<p><code dir="ltr">PGM_SUP.MQCCSI_DEFAULT</code></p>
</td>
</tr>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r8c1-t5" headers="r1c1-t5">
<p><code dir="ltr">FORMAT</code></p>
</td>
<td class="cellalignment5002" headers="r8c1-t5 r1c2-t5">
<p>A free format name used to inform the receiver about the contents of the message.&nbsp;Specify a format or use a <code dir="ltr">PGM_SUP</code> constant.&nbsp;Refer to <a href="#i641954">FORMAT Field</a>.</p>
</td>
<td class="cellalignment5002" headers="r8c1-t5 r1c3-t5">
<p><code dir="ltr">CHAR</code>(<code dir="ltr">8</code>)</p>
</td>
<td class="cellalignment5002" headers="r8c1-t5 r1c4-t5">
<p><code dir="ltr">PGM_SUP.MQFMT_<br/>
NONE</code></p>
</td>
</tr>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r9c1-t5" headers="r1c1-t5">
<p><code dir="ltr">PRIORITY</code></p>
</td>
<td class="cellalignment5002" headers="r9c1-t5 r1c2-t5">
<p>Specifies message priority. Specify a value greater than or equal to <code dir="ltr">0</code> (zero is the lowest priority), or use a <code dir="ltr">PGM_SUP</code> constant. Refer to <a href="#i641982">PRIORITY Field</a>.</p>
</td>
<td class="cellalignment5002" headers="r9c1-t5 r1c3-t5">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment5002" headers="r9c1-t5 r1c4-t5">
<p><code dir="ltr">PGM_SUP.MQPRI_<br/>
PRIORITY_AS_Q_<br/>
DEF</code></p>
</td>
</tr>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r10c1-t5" headers="r1c1-t5">
<p><code dir="ltr">PERSISTENCE</code></p>
</td>
<td class="cellalignment5002" headers="r10c1-t5 r1c2-t5">
<p>An input field for the sending application.&nbsp;Persistent messages survive when a queue manager is restarted.&nbsp;Non persistent messages and messages in temporary queues are lost when a queue manager is restarted.&nbsp;Specify the desired persistence with a <code dir="ltr">PGM_SUP</code> constant.&nbsp;Refer to <a href="#i641977">PERSISTENCE Field</a>.</p>
</td>
<td class="cellalignment5002" headers="r10c1-t5 r1c3-t5">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment5002" headers="r10c1-t5 r1c4-t5">
<p><code dir="ltr">PGM_SUP.MQPER_<br/>
PERSISTENCE_AS_<br/>
Q_DEF</code></p>
</td>
</tr>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r11c1-t5" headers="r1c1-t5">
<p><code dir="ltr">MSGID</code></p>
</td>
<td class="cellalignment5002" headers="r11c1-t5 r1c2-t5">
<p>Specifies the message identifier of the message to be retrieved (when receiving a message).&nbsp;If no value is specified when a sending a message (<code dir="ltr">PGM_SUP</code>.<code dir="ltr">MQMI_NONE</code>), then the queue manager assigns a unique value.</p>
</td>
<td class="cellalignment5002" headers="r11c1-t5 r1c3-t5">
<p><code dir="ltr">RAW</code>(<code dir="ltr">24</code>)</p>
</td>
<td class="cellalignment5002" headers="r11c1-t5 r1c4-t5">
<p><code dir="ltr">PGM_SUP</code>.<code dir="ltr">MQMI_NONE</code></p>
</td>
</tr>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r12c1-t5" headers="r1c1-t5">
<p><code dir="ltr">CORRELID</code></p>
</td>
<td class="cellalignment5002" headers="r12c1-t5 r1c2-t5">
<p>Specifies the correlation identifier for the message to retrieve when receiving a message (refer to the <code dir="ltr">MSGID</code> field). When sending a message, specify any value, or use <code dir="ltr">PGM_SUP</code>.<code dir="ltr">MQCI_NONE</code> if the message does not require a correlation ID.</p>
</td>
<td class="cellalignment5002" headers="r12c1-t5 r1c3-t5">
<p><code dir="ltr">RAW</code>(<code dir="ltr">24</code>)</p>
</td>
<td class="cellalignment5002" headers="r12c1-t5 r1c4-t5">
<p><code dir="ltr">PGM_SUP</code>.<code dir="ltr">MQCI_NONE</code></p>
</td>
</tr>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r13c1-t5" headers="r1c1-t5">
<p><code dir="ltr">BACKOUTCOUNT</code></p>
</td>
<td class="cellalignment5002" headers="r13c1-t5 r1c2-t5">
<p>An output field for the <code dir="ltr">MQGET</code> procedure. It indicates the number of times a message was placed back on a queue because of a rollback operation.</p>
</td>
<td class="cellalignment5002" headers="r13c1-t5 r1c3-t5">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment5002" headers="r13c1-t5 r1c4-t5">
<p><code dir="ltr">Zero</code></p>
</td>
</tr>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r14c1-t5" headers="r1c1-t5">
<p><code dir="ltr">REPLYTOQ</code></p>
</td>
<td class="cellalignment5002" headers="r14c1-t5 r1c2-t5">
<p>Specifies the name of the reply-to queue. This is an input field for <code dir="ltr">MQPUT</code> and allows the sending application to indicate where reply messages should be sent.</p>
<p>It is also an output field for <code dir="ltr">MQGET</code> and tells the receiving application where to send a reply.</p>
</td>
<td class="cellalignment5002" headers="r14c1-t5 r1c3-t5">
<p><code dir="ltr">CHAR</code>(<code dir="ltr">48</code>)</p>
</td>
<td class="cellalignment5002" headers="r14c1-t5 r1c4-t5">
<p><code dir="ltr">NULL</code></p>
</td>
</tr>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r15c1-t5" headers="r1c1-t5">
<p><code dir="ltr">REPLYTOQMGR</code></p>
</td>
<td class="cellalignment5002" headers="r15c1-t5 r1c2-t5">
<p>Specifies the queue manager to which the reply message or report should be sent.&nbsp;This is an input field for <code dir="ltr">MQPUT</code> and an output field for <code dir="ltr">MQGET</code>.</p>
</td>
<td class="cellalignment5002" headers="r15c1-t5 r1c3-t5">
<p><code dir="ltr">CHAR</code>(<code dir="ltr">48</code>)</p>
</td>
<td class="cellalignment5002" headers="r15c1-t5 r1c4-t5">
<p><code dir="ltr">NULL</code></p>
</td>
</tr>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r16c1-t5" headers="r1c1-t5">
<p><code dir="ltr">USERIDENTIFIER</code></p>
</td>
<td class="cellalignment5002" headers="r16c1-t5 r1c2-t5">
<p>An output field for receiving applications.&nbsp;It identifies the user that sent the message.&nbsp;Sending applications can specify a user on input if the <code dir="ltr">CONTEXT</code> field for the <code dir="ltr">mqpmo</code> argument of <code dir="ltr">MQPUT</code> was set to <code dir="ltr">PGM_SUP</code>.<code dir="ltr">MQPMO_SET_IDENTITY_CONTEXT</code> or to <code dir="ltr">PGM_SUP</code>.<code dir="ltr">MQPMO_SET_ALL_CONTEXT</code>.</p>
</td>
<td class="cellalignment5002" headers="r16c1-t5 r1c3-t5">
<p><code dir="ltr">CHAR</code>(<code dir="ltr">12</code>)</p>
</td>
<td class="cellalignment5002" headers="r16c1-t5 r1c4-t5">
<p><code dir="ltr">NULL</code></p>
</td>
</tr>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r17c1-t5" headers="r1c1-t5">
<p><code dir="ltr">ACCOUNTINGTOKEN</code></p>
</td>
<td class="cellalignment5002" headers="r17c1-t5 r1c2-t5">
<p>Used to transfer accounting information between applications. Sending applications provide accounting information or use <code dir="ltr">PGM_SUP</code>.<code dir="ltr">MQACT_NONE</code> to specify that no accounting information is included.</p>
</td>
<td class="cellalignment5002" headers="r17c1-t5 r1c3-t5">
<p><code dir="ltr">CHAR</code>(<code dir="ltr">32</code>)</p>
</td>
<td class="cellalignment5002" headers="r17c1-t5 r1c4-t5">
<p><code dir="ltr">PGM_SUP.MQACT_<br/>
NONE</code></p>
</td>
</tr>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r18c1-t5" headers="r1c1-t5">
<p><code dir="ltr">APPLIDENTITYDATA</code></p>
</td>
<td class="cellalignment5002" headers="r18c1-t5 r1c2-t5">
<p>Specifies more information to send along with the message to help the receiving application provide more information about the message or its sender.</p>
</td>
<td class="cellalignment5002" headers="r18c1-t5 r1c3-t5">
<p><code dir="ltr">CHAR</code>(<code dir="ltr">32</code>)</p>
</td>
<td class="cellalignment5002" headers="r18c1-t5 r1c4-t5">
<p><code dir="ltr">NULL</code></p>
</td>
</tr>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r19c1-t5" headers="r1c1-t5">
<p><code dir="ltr">PUTAPPLTYPE</code></p>
</td>
<td class="cellalignment5002" headers="r19c1-t5 r1c2-t5">
<p>Describes the kind of application that placed the message on the queue.&nbsp; Use a <code dir="ltr">PGM_SUP</code> constant to assign a value.&nbsp;Refer to <a href="#i641986">PUTAPPLTYPE Field</a>.</p>
</td>
<td class="cellalignment5002" headers="r19c1-t5 r1c3-t5">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment5002" headers="r19c1-t5 r1c4-t5">
<p><code dir="ltr">PGM.MQAT_NO_<br/>
CONTEXT</code></p>
</td>
</tr>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r20c1-t5" headers="r1c1-t5">
<p><code dir="ltr">PUTAPPLNAME</code></p>
</td>
<td class="cellalignment5002" headers="r20c1-t5 r1c2-t5">
<p>Specifies the name of the application that placed the message on the queue. Sending applications specify a name or let the queue manager fill in this field.&nbsp;This is an output field for receiving applications.</p>
</td>
<td class="cellalignment5002" headers="r20c1-t5 r1c3-t5">
<p><code dir="ltr">CHAR</code>(<code dir="ltr">28</code>)</p>
</td>
<td class="cellalignment5002" headers="r20c1-t5 r1c4-t5">
<p><code dir="ltr">NULL</code></p>
</td>
</tr>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r21c1-t5" headers="r1c1-t5">
<p><code dir="ltr">PUTDATE</code></p>
</td>
<td class="cellalignment5002" headers="r21c1-t5 r1c2-t5">
<p>Specifies the date on which a message was placed on the queue.&nbsp; Sending applications can set a date or let the queue manager take care of it.&nbsp; The date format used by the queue manager is <code dir="ltr">YYYYMMDD</code>. This is an output field for receiving applications.</p>
</td>
<td class="cellalignment5002" headers="r21c1-t5 r1c3-t5">
<p><code dir="ltr">CHAR</code>(<code dir="ltr">8</code>)</p>
</td>
<td class="cellalignment5002" headers="r21c1-t5 r1c4-t5">
<p><code dir="ltr">NULL</code></p>
</td>
</tr>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r22c1-t5" headers="r1c1-t5">
<p><code dir="ltr">PUTTIME</code></p>
</td>
<td class="cellalignment5002" headers="r22c1-t5 r1c2-t5">
<p>Specifies the time that a message was placed on the queue. Sending applications can set a time or let the queue manager take care of it.&nbsp;The time format that is used by the queue manager is <code dir="ltr">HHMMSSTH</code>. This is an output field for receiving applications.</p>
</td>
<td class="cellalignment5002" headers="r22c1-t5 r1c3-t5">
<p><code dir="ltr">CHAR</code>(<code dir="ltr">8</code>)</p>
</td>
<td class="cellalignment5002" headers="r22c1-t5 r1c4-t5">
<p><code dir="ltr">NULL</code></p>
</td>
</tr>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r23c1-t5" headers="r1c1-t5">
<p><code dir="ltr">APPLORIGINDATA</code></p>
</td>
<td class="cellalignment5002" headers="r23c1-t5 r1c2-t5">
<p>Used by the sending application to add information to the message about the message origin.&nbsp;This is an output field for receiving applications.</p>
</td>
<td class="cellalignment5002" headers="r23c1-t5 r1c3-t5">
<p><code dir="ltr">CHAR</code>(<code dir="ltr">4</code>)</p>
</td>
<td class="cellalignment5002" headers="r23c1-t5 r1c4-t5">
<p><code dir="ltr">NULL</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<a id="i641458"></a>
<div id="WSMQG243" class="sect2">
<h3 class="sect2">PGM.MQGMO Type Definition<a id="sthref456"></a></h3>
<p>Use <code dir="ltr">PGM</code>.<code dir="ltr">MQGMO</code> to specify option and control information about how the message is retrieved from a queue. You can use the default values for <code dir="ltr">PGM.MQGMO</code> fields or change the fields for your application requirements. For example, to change a field value:</p>
<pre dir="ltr">mqgmo<span class="italic">.field_name</span> := <span class="italic">field_value</span>
</pre>
<p>where:</p>
<ul>
<li>
<p><code dir="ltr">mqgmo</code> is the <code dir="ltr">PGM</code>.<code dir="ltr">MQGMO</code> object data type, and it specifies option and control information about how the message is retrieved from a queue.</p>
</li>
<li>
<p><code dir="ltr">field_name</code> is a field name of the <code dir="ltr">PGM</code>.<code dir="ltr">MQGMO</code> type definition. You can set as many fields as necessary. Refer to <a href="#g670754">Table A-3</a> for names and field descriptions.</p>
</li>
<li>
<p><code dir="ltr">field_value</code> is the value to assign to <code dir="ltr"><span class="codeinlineitalic">field_name</span></code>.&nbsp; You can specify a value or use a <code dir="ltr">PGM_SUP</code> constant to assign a value.</p>
</li>
</ul>
<div id="WSMQG350" class="tblformalwide">
<p class="titleintable"><a id="sthref457"></a><a id="g670754"></a>Table A-3 PGM.MQGMO Fields</p>
<table class="cellalignment5005" title="PGM.MQGMO Fields" summary="This table describes type definitions." dir="ltr">
<thead>
<tr class="cellalignment4994">
<th class="cellalignment5001" id="r1c1-t6">Field Name</th>
<th class="cellalignment5001" id="r1c2-t6">Description</th>
<th class="cellalignment5001" id="r1c3-t6">PL/SQL Data Type</th>
<th class="cellalignment5001" id="r1c4-t6">Initial Value</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r2c1-t6" headers="r1c1-t6">
<p><code dir="ltr">OPTIONS</code></p>
</td>
<td class="cellalignment5002" headers="r2c1-t6 r1c2-t6">
<p>Specifies options to control the <code dir="ltr">MQGET</code> procedure.&nbsp;Add one or more <code dir="ltr">PGM_SUP</code> constants to set it. Refer to <a href="#i648575">OPTIONS Field</a>.</p>
</td>
<td class="cellalignment5002" headers="r2c1-t6 r1c3-t6">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment5002" headers="r2c1-t6 r1c4-t6">
<p><code dir="ltr">PGM.MQGMO_<br/>
SYNCPOINT</code></p>
<p>(Messages that are retrieved from the queue are coordinated by the Oracle transaction coordinator.)</p>
</td>
</tr>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r3c1-t6" headers="r1c1-t6">
<p><code dir="ltr">WAITINTERVAL</code></p>
</td>
<td class="cellalignment5002" headers="r3c1-t6 r1c2-t6">
<p>Specifies the maximum time in milliseconds that <code dir="ltr">MQGET</code> waits for a message to arrive in the queue.<code dir="ltr">&nbsp; WAITINTERVAL</code> should be equal to or greater than <code dir="ltr">0</code>, or set to the value of <code dir="ltr">PGM_SUP</code>.<code dir="ltr">MQWI_UNLIMITED</code> (unlimited wait interval).</p>
</td>
<td class="cellalignment5002" headers="r3c1-t6 r1c3-t6">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment5002" headers="r3c1-t6 r1c4-t6">
<p><code dir="ltr">Zero</code></p>
</td>
</tr>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r4c1-t6" headers="r1c1-t6">
<p><code dir="ltr">RESOLVEDQNAME</code></p>
</td>
<td class="cellalignment5002" headers="r4c1-t6 r1c2-t6">
<p>Contains the resolved name of the destination queue from which the message was retrieved.&nbsp;This is an output field set by the queue manager upon return from the call.</p>
</td>
<td class="cellalignment5002" headers="r4c1-t6 r1c3-t6">
<p><code dir="ltr">CHAR</code>(48)</p>
</td>
<td class="cellalignment5002" headers="r4c1-t6 r1c4-t6">
<p><code dir="ltr">NULL</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i641536"></a>
<div id="WSMQG244" class="sect1">
<h2 class="sect1">MQOPEN Procedure</h2>
<p><a id="sthref458"></a><a id="sthref459"></a><code dir="ltr">MQOPEN</code> establishes<a id="sthref460"></a><a id="sthref461"></a> access to a <a id="sthref462"></a><a id="sthref463"></a>queue.&nbsp;Depending on the mode selected to open the queue, an application can issue subsequent <code dir="ltr">MQPUT</code>, <code dir="ltr">MQGET</code>, or <code dir="ltr">MQCLOSE</code> calls.</p>
<p><code dir="ltr">MQOPEN</code> differs from MQI calls in the following ways:</p>
<ul>
<li>
<p>The connection handle argument is omitted from <code dir="ltr">MQOPEN</code> because the gateway automatically takes care of managing queue manager connections.&nbsp;</p>
</li>
<li>
<p>The MQI completion code is not included in the procedure argument list.&nbsp;When a gateway procedure fails because the corresponding MQI call failed, then an Oracle error message is returned to the caller.</p>
</li>
<li>
<p>The MQI reason code is not included in the procedure argument list. If the corresponding MQI call for a gateway procedure returns a reason code, then the reason code is included in the Oracle error message that is returned to the caller.</p>
</li>
</ul>
<p class="subhead2"><a id="WSMQG351"></a>Definition</p>
<pre dir="ltr">MQOPEN(mqod, <span class="italic">options</span>, <span class="codeinlineitalic">hobj</span>)
</pre>
<p>where:</p>
<ul>
<li>
<p><code dir="ltr">mqod</code> specifies the queue to open. Use the fields of the <code dir="ltr">PGM</code>.<code dir="ltr">MQOD</code> type definition to describe these attributes. On output, the queue manager sets some of the <code dir="ltr">PGM</code>.<code dir="ltr">MQOD</code> object fields on return.</p>
<p>This input and output argument is PL/SQL <code dir="ltr">PGM</code>.<code dir="ltr">MQOD</code> data type. For details of <code dir="ltr">PGM</code>.<code dir="ltr">MQOD</code>, refer to <a href="#i641586">PGM.MQOD Type Definition</a>.</p>
</li>
<li>
<p><code dir="ltr">options</code> specifies the kind of open. Refer to <a href="#i642076">MQOPEN Values</a>. This input argument is of the PL/SQL <code dir="ltr">BINARY_INTEGER</code> data type.</p>
</li>
<li>
<p><code dir="ltr">hobj</code> contains the handle of the queue after the queue is opened and becomes an input argument for subsequent PGM calls. The queue handle remains valid until one of the following conditions occur:</p>
<ul>
<li>
<p>The queue is closed by a call to <code dir="ltr">MQCLOSE</code></p>
</li>
<li>
<p>The current transaction is made permanent by a <code dir="ltr">COMMIT</code> or <code dir="ltr">ROLLBACK</code> command</p>
</li>
<li>
<p>The Oracle user session is ended by a <code dir="ltr">DISCONNECT</code> command. This output argument is of the <code dir="ltr">PGM</code>.<code dir="ltr">MQOH</code> data type.</p>
</li>
</ul>
</li>
</ul>
<p>You can use your own variable names when arguments are in the required order as follows:</p>
<pre dir="ltr">MQOPEN and(descript, open_options, handle);
</pre>
<a id="i641586"></a>
<div id="WSMQG245" class="sect2">
<h3 class="sect2">PGM.MQOD Type Definition</h3>
<p><code dir="ltr">PGM</code>.<code dir="ltr">MQOD</code> is used to define the object to open. You can use the default values for <code dir="ltr">PGM</code>.<code dir="ltr">MQOD</code> fields or change the fields for your application requirements. For example, you can change a field value as follows:</p>
<pre dir="ltr">mqod.<span class="italic">field_name</span> := <span class="italic">field_value</span>
</pre>
<p>where:</p>
<ul>
<li>
<p><code dir="ltr">mqod</code> is the <code dir="ltr">PGM</code>.<code dir="ltr">MQOD</code> data type and specifies the object to open.</p>
</li>
<li>
<p><code dir="ltr">field_name</code> is a field name of the <code dir="ltr">PGM</code>.<code dir="ltr">MQOD</code> type definition. You can set as many fields as necessary. Refer to <a href="#g670803">Table A-4</a> for field names and descriptions.</p>
</li>
<li>
<p><code dir="ltr">field_value</code> is the value to assign to <code dir="ltr"><span class="codeinlineitalic">field_name</span></code>.&nbsp; You can specify a value or use a <code dir="ltr">PGM_SUP</code> constant to assign a value.</p>
</li>
</ul>
<div id="WSMQG352" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref464"></a><a id="g670803"></a>Table A-4 PGM.MQOD Object Fields</p>
<table class="cellalignment5005" title="PGM.MQOD Object Fields" summary="This table describes object fields." dir="ltr">
<thead>
<tr class="cellalignment4994">
<th class="cellalignment5001" id="r1c1-t7">Field Name</th>
<th class="cellalignment5001" id="r1c2-t7">Description</th>
<th class="cellalignment5001" id="r1c3-t7">PL/SQL Data Type</th>
<th class="cellalignment5001" id="r1c4-t7">Initial Value</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r2c1-t7" headers="r1c1-t7">
<p><code dir="ltr">OBJECTTYPE</code></p>
</td>
<td class="cellalignment5002" headers="r2c1-t7 r1c2-t7">
<p>Specifies the object to open.&nbsp;Use a <code dir="ltr">PGM_SUP</code> constant to assign a value. Refer to <a href="#i642034">OBJECTTYPE Field</a>.</p>
</td>
<td class="cellalignment5002" headers="r2c1-t7 r1c3-t7">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment5002" headers="r2c1-t7 r1c4-t7">
<p><code dir="ltr">PGM_SUP.MQOT_<br/>
Q(queue)</code></p>
</td>
</tr>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r3c1-t7" headers="r1c1-t7">
<p><code dir="ltr">DBLINKNAME</code></p>
</td>
<td class="cellalignment5002" headers="r3c1-t7 r1c2-t7">
<p>Specifies the database link name.</p>
</td>
<td class="cellalignment5002" headers="r3c1-t7 r1c3-t7">
<p><code dir="ltr">CHAR</code>(64)</p>
</td>
<td class="cellalignment5002" headers="r3c1-t7 r1c4-t7">
<p><code dir="ltr">NULL</code></p>
</td>
</tr>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r4c1-t7" headers="r1c1-t7">
<p><code dir="ltr">OBJECTNAME</code></p>
</td>
<td class="cellalignment5002" headers="r4c1-t7 r1c2-t7">
<p>Specifies the local name of the object as defined by the queue manager.</p>
</td>
<td class="cellalignment5002" headers="r4c1-t7 r1c3-t7">
<p><code dir="ltr">CHAR</code>(48)</p>
</td>
<td class="cellalignment5002" headers="r4c1-t7 r1c4-t7">
<p><code dir="ltr">NULL</code></p>
</td>
</tr>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r5c1-t7" headers="r1c1-t7">
<p><code dir="ltr">OBJECTQMGRNAME</code></p>
</td>
<td class="cellalignment5002" headers="r5c1-t7 r1c2-t7">
<p>Specifies the name of the queue manager for the object defined by <code dir="ltr">OBJECTNAME</code>.&nbsp;Leave <code dir="ltr">OBJECTQMGRNAME</code> set to null values because the gateway supports only the opening of objects at the connected queue.</p>
</td>
<td class="cellalignment5002" headers="r5c1-t7 r1c3-t7">
<p><code dir="ltr">CHAR</code>(48)</p>
</td>
<td class="cellalignment5002" headers="r5c1-t7 r1c4-t7">
<p><code dir="ltr">NULL</code></p>
</td>
</tr>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r6c1-t7" headers="r1c1-t7">
<p><code dir="ltr">DYNAMICQNAME</code></p>
</td>
<td class="cellalignment5002" headers="r6c1-t7 r1c2-t7">
<p>Is ignored unless the <code dir="ltr">OBJECTNAME</code> field specifies the name of a model queue.&nbsp; When a model queue is involved, then this field specifies the name of the dynamic queue to be created at the queue manager to which the gateway is connected.</p>
</td>
<td class="cellalignment5002" headers="r6c1-t7 r1c3-t7">
<p><code dir="ltr">CHAR</code>(48)</p>
</td>
<td class="cellalignment5002" headers="r6c1-t7 r1c4-t7">
<p><code dir="ltr">AMQ.*</code></p>
</td>
</tr>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r7c1-t7" headers="r1c1-t7">
<p><code dir="ltr">ALTERNATEUSERID</code></p>
</td>
<td class="cellalignment5002" headers="r7c1-t7 r1c2-t7">
<p>If the <code dir="ltr">options</code> argument of <code dir="ltr">MQOPEN</code> is set to the value of <code dir="ltr">PGM_SUP</code>.<code dir="ltr">MQOO_ALTERNATE_USER_AUTHORITY</code>, then this field specifies the alternate user&nbsp;ID which the queue manager uses to check the authorization for the queue being opened.</p>
</td>
<td class="cellalignment5002" headers="r7c1-t7 r1c3-t7">
<p><code dir="ltr">CHAR</code>(12)</p>
</td>
<td class="cellalignment5002" headers="r7c1-t7 r1c4-t7">
<p><code dir="ltr">NULL</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformalwide" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i641679"></a>
<div id="WSMQG246" class="sect1">
<h2 class="sect1">MQPUT Procedure</h2>
<p><a id="sthref465"></a><a id="sthref466"></a><code dir="ltr">MQPUT</code> <a id="sthref467"></a>sends a message to a queue. The queue must already be open by a previous call to <code dir="ltr">MQOPEN</code> with its <code dir="ltr">options</code> argument set to the value of <code dir="ltr">PGM_SUP</code>.<code dir="ltr">MQOO_OUTPUT</code>.</p>
<p><code dir="ltr">MQPUT</code> differs from MQI calls as follows:</p>
<ul>
<li>
<p>The connection handle argument is omitted from <code dir="ltr">MQPUT</code> because the gateway automatically takes care of managing queue manager connections.</p>
</li>
<li>
<p>The MQI completion code is not included in the procedure argument list. When a gateway procedure fails because the corresponding MQI call failed, then an Oracle error message is returned to the caller.</p>
</li>
<li>
<p>The MQI reason code is not included in the procedure argument list. When the corresponding MQI call for a gateway procedure returns a reason code, then the reason code is included in the Oracle error message returned to the caller.</p>
</li>
<li>
<p>The <code dir="ltr">msg</code> length argument is not included in the procedure argument list because the Oracle database and the gateway automatically keep track of the message data length.</p>
</li>
</ul>
<p class="subhead2"><a id="WSMQG353"></a>Definition</p>
<pre dir="ltr">MQPUT(<span class="codeinlineitalic">hobj</span>, mqmd, mqpmo, <span class="codeinlineitalic">msg</span>)
</pre>
<p>where:</p>
<ul>
<li>
<p><code dir="ltr">hobj</code> contains the handle for the queue to send the message to. The handle is returned by a previous call to <code dir="ltr">MQOPEN</code>. This input argument is a new <code dir="ltr">PGM.MQOH</code> in Oracle10<span class="italic">g</span> release 2.</p>
</li>
<li>
<p><code dir="ltr">mqmd</code> is used on input to describe the attributes of the message being retrieved. Use the fields of the <code dir="ltr">PGM</code>.<code dir="ltr">MQMD</code> type definition to describe these attributes. On output, <code dir="ltr">mqmd</code> contains information about how the request was processed. The queue manager sets some of the <code dir="ltr">PGM</code>.<code dir="ltr">MQMD</code> fields on return.</p>
<p>This input and output argument is a <code dir="ltr">PGM</code>.<code dir="ltr">MQMD</code>. For details of <code dir="ltr">PGM</code>.<code dir="ltr">MQMD</code>, refer to <a href="#i641174">PGM.MQMD Type Definition</a>.</p>
</li>
<li>
<p><code dir="ltr">mqpmo</code> is used on input to describe the option values that control the put request.&nbsp;Use the fields of the <code dir="ltr">PGM</code>.<code dir="ltr">MQPMO</code> type definition to describe these options. On output, the queue manager sets some of the <code dir="ltr">PGM</code>.<code dir="ltr">MQPMO</code> fields on return.</p>
<p>This input and output argument is <code dir="ltr">PGM</code>.<code dir="ltr">MQPMO</code>.&nbsp;For details of <code dir="ltr">PGM</code>.<code dir="ltr">MQPMO</code>, refer to <a href="#i641787">PGM.MQPMO Type Definition</a>.</p>
</li>
<li>
<p><code dir="ltr">msg</code> contains the message to send. This input argument is PL/SQL data type <code dir="ltr">RAW</code> or <code dir="ltr">PGM</code>.<code dir="ltr">MQPUT_BUFFER</code>.</p>
</li>
</ul>
<p class="subhead2"><a id="WSMQG354"></a>Example</p>
<ol>
<li>
<p>You can use your own variable names when arguments are in the required order:</p>
<pre dir="ltr">MQPUT(handle, descript, options, message);
</pre></li>
<li>
<p>The following sample, which is provided as a sample with the gateway (<code dir="ltr">ORACLE_HOME\dg4mq\sample\putsample.sql</code> on Microsoft Windows and <code dir="ltr"><span class="codeinlineitalic">ORACLE_HOME</span></code><code dir="ltr">/dg4mq/sample/putsample.sql</code> on UNIX based systems), sends a message shorter than 32767 bytes:</p>
</li>
</ol>
<div id="WSMQG355" class="example">
<p class="titleinexample"><a id="sthref468"></a>Example A-2 putsample.sql</p>
<pre dir="ltr">--
-- Copyright Oracle, 2005 All Rights Reserved.
--
-- NAME
--   putsample.sql
--
-- DESCRIPTION
--
--   Specify the database link name you created for the gateway. To do this,
--   replace the database link name &#39;YOUR_DBLINK_NAME&#39; with the dblink name
--   you chose when the database link was created.
--
--   This script performs a test run for the MQSeries gateway. In this
--   script the queuename is &#39;YOUR_QUEUE_NAME&#39;, replace it with a valid 
--   queue name at the queue manager the gateway is configured for.
--   
-- NOTES
--   Run the script from the SQL*Plus command line.
--
--   Make the sure the user is granted &#39;EXECUTE&#39; on package dbms_output
--

SET SERVEROUTPUT ON

DECLARE
    objdesc      PGM.MQOD;
    msgDesc      PGM.MQMD;
    putOptions   PGM.MQPMO;
    objectHandle PGM.MQOH;
    message      raw(255);

BEGIN

    objdesc.OBJECTNAME := &#39;QUEUE1&#39;;
    objdesc.DBLINKNAME := &#39;dg4mqdepdblink&#39;;
                  -- Open the queue &#39;YOUR_QUEUE_NAME&#39; for sending.

    PGM.MQOPEN(objdesc, PGM_SUP.MQOO_OUTPUT, objectHandle);
                  -- Put the message buffer on the queue.

    message := &#39;01020304050607080900&#39;;

    PGM.MQPUT(objectHandle, msgDesc, putOptions, message);   
     -- Print the message we are putting on the queue

    dbms_output.put_line(&#39;message put on queue = &#39; || rawtohex(message));

    -- Close the queue again.

    PGM.MQCLOSE(objectHandle, PGM_SUP.MQCO_NONE);

EXCEPTION

    -- something else went wrong.. tell the user.

    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(&#39;Error: Procedural Gateway for IBM MQSeries
 verification script failed.&#39;);
        DBMS_OUTPUT.PUT_LINE(SQLERRM); 
        PGM.MQCLOSE(objectHandle, PGM_SUP.MQCO_NONE);

END;
/
</pre></div>
<!-- class="example" -->
<a id="i641787"></a>
<div id="WSMQG247" class="sect2">
<h3 class="sect2">PGM.MQPMO Type Definition</h3>
<p><a id="sthref469"></a><code dir="ltr">PGM</code>.<code dir="ltr">MQPMO</code> is used to define the <code dir="ltr">mqpmo</code> argument of <code dir="ltr">MQPUT</code>. It specifies option and control information for processing a message.</p>
<p>You can use the default values for <code dir="ltr">PGM</code>.<code dir="ltr">MQPMO</code> fields or change the fields for the application requirements. For example, to change a field value:</p>
<pre dir="ltr">mqpmo<span class="italic">.field_name</span> := <span class="italic">field_value</span>
</pre>
<p>where:</p>
<ul>
<li>
<p><code dir="ltr">mqpmo</code> is the <code dir="ltr">PGM</code>.<code dir="ltr">MQPMO</code> data type and specifies option and control information about how the message is processed and put into a queue.</p>
</li>
<li>
<p><code dir="ltr">field_name</code> is a field name of the <code dir="ltr">PGM</code>.<code dir="ltr">MQPMO</code> type definition. You can set as many fields as necessary. Refer to <a href="#g670865">Table A-5</a> for field names and descriptions.</p>
</li>
<li>
<p><code dir="ltr">field_value</code> is the value to assign to <code dir="ltr"><span class="codeinlineitalic">field_name</span></code>.&nbsp;You can specify a value or use a <code dir="ltr">PGM_SUP</code> constant to assign a value.</p>
</li>
</ul>
<div id="WSMQG356" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref470"></a><a id="g670865"></a>Table A-5 PGM.MQPMO Fields</p>
<table class="cellalignment5005" title="PGM.MQPMO Fields" summary="This table describes fields." dir="ltr">
<thead>
<tr class="cellalignment4994">
<th class="cellalignment5001" id="r1c1-t8">Field Name</th>
<th class="cellalignment5001" id="r1c2-t8">Description</th>
<th class="cellalignment5001" id="r1c3-t8">PL/SQL Data Type</th>
<th class="cellalignment5001" id="r1c4-t8">Initial Value</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r2c1-t8" headers="r1c1-t8">
<p><code dir="ltr">OPTIONS</code></p>
</td>
<td class="cellalignment5002" headers="r2c1-t8 r1c2-t8">
<p>Specifies options to control the <code dir="ltr">MQPUT</code> procedure.&nbsp;The field is set by adding one or more of the <code dir="ltr">PGM_SUP</code> definitions.&nbsp; Refer to <a href="#i642054">&#34;OPTIONS Field&#34;</a>.</p>
</td>
<td class="cellalignment5002" headers="r2c1-t8 r1c3-t8">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment5002" headers="r2c1-t8 r1c4-t8">
<p><code dir="ltr">PGM.MQPMO_<br/>
SYNCPOINT</code></p>
<p>(Messages placed on the queue are coordinated by the Oracle transaction coordinator.)</p>
</td>
</tr>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r3c1-t8" headers="r1c1-t8">
<p><code dir="ltr">CONTEXT</code></p>
</td>
<td class="cellalignment5002" headers="r3c1-t8 r1c2-t8">
<p>Specifies the object handle of the input queue. It is only used when the <code dir="ltr">OPTIONS</code> field has the bit <code dir="ltr">PGM_SUP.MQPMO_PASS_IDENTITY_<br/>
CONTEXT</code> or the bit <code dir="ltr">PGM_SUP.MQPMO_PASS_ALL_CONTEXT</code> set.</p>
</td>
<td class="cellalignment5002" headers="r3c1-t8 r1c3-t8">
<p><code dir="ltr">BINARY_INTEGER</code></p>
</td>
<td class="cellalignment5002" headers="r3c1-t8 r1c4-t8">
<p><code dir="ltr">Zero</code></p>
</td>
</tr>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r4c1-t8" headers="r1c1-t8">
<p><code dir="ltr">RESOLVEDQNA</code><code dir="ltr">ME</code></p>
</td>
<td class="cellalignment5002" headers="r4c1-t8 r1c2-t8">
<p>Contains the resolved name of the destination queue. This is an output field set by the queue manager on return.</p>
</td>
<td class="cellalignment5002" headers="r4c1-t8 r1c3-t8">
<p><code dir="ltr">CHAR</code>(48)</p>
</td>
<td class="cellalignment5002" headers="r4c1-t8 r1c4-t8">
<p><code dir="ltr">NULL</code></p>
</td>
</tr>
<tr class="cellalignment4994">
<td class="cellalignment5002" id="r5c1-t8" headers="r1c1-t8">
<p><code dir="ltr">RESOLVEDQMGRNAME</code></p>
</td>
<td class="cellalignment5002" headers="r5c1-t8 r1c2-t8">
<p>Contains the resolved name of the queue manager for the queue name returned in the <code dir="ltr">RESOLVEDQNAME</code> field. This is an output field set by the queue manager on return.</p>
</td>
<td class="cellalignment5002" headers="r5c1-t8 r1c3-t8">
<p><code dir="ltr">CHAR</code>(48)</p>
</td>
<td class="cellalignment5002" headers="r5c1-t8 r1c4-t8">
<p><code dir="ltr">NULL</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformalwide" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i641872"></a>
<div id="WSMQG248" class="sect1">
<h2 class="sect1">PGM_SUP Package</h2>
<p><a id="sthref471"></a><a id="sthref472"></a><code dir="ltr">PGM_SUP</code> contains<a id="sthref473"></a> constant and exception definitions to use with the gateway procedures and <code dir="ltr">PGM</code> type definitions.&nbsp;Using these values requires extensive knowledge of MQI and WebSphere MQ programming in general.&nbsp;These definitions follow the MQI definition rules.&nbsp;For complete information about writing WebSphere MQ applications, refer to the IBM <span class="italic">MQSeries Application Programming Reference</span>.</p>
<div id="WSMQG249" class="sect2"><a id="sthref474"></a>
<h3 class="sect2">PGM.MQGMO <a id="sthref475"></a>Values</h3>
<p>The following sections provide information about <code dir="ltr">PGM</code>.<code dir="ltr">MQGMO</code> values.</p>
<a id="i648575"></a>
<div id="WSMQG250" class="sect3">
<h4 class="sect3">OPTIONS Field</h4>
<pre dir="ltr">MQGMO_NO_WAIT                 constant binary_integer := 0;
MQGMO_NONE                    constant binary_integer := 0;
MQGMO_WAIT                    constant binary_integer := 1;
MQGMO_SYNCPOINT               constant binary_integer := 2;
MQGMO_NO_SYNCPOINT            constant binary_integer := 4;
MQGMO_SET_SIGNAL              constant binary_integer := 8;
MQGMO_BROWSE_FIRST            constant binary_integer := 16;
MQGMO_BROWSE_NEXT             constant binary_integer := 32;
MQGMO_ACCEPT_TRUNCATED_MSG    constant binary_integer := 64;
MQGMO_MARK_SKIP_BACKOUT       constant binary_integer := 128;
MQGMO_MSG_UNDER_CURSOR        constant binary_integer := 256;
MQGMO_LOCK                    constant binary_integer := 512;
MQGMO_UNLOCK                  constant binary_integer := 1024;
MQGMO_BROWSE_MSG_UNDER_CURSOR constant binary_integer := 2048;
MQGMO_SYNCPOINT_IF_PERSISTENT constant binary_integer := 4096;
MQGMO_FAIL_IF_QUIESCING       constant binary_integer := 8192;
MQGMO_CONVERT                 constant binary_integer := 16384;
MQGMO_LOGICAL_ORDER           constant binary_integer := 32768;
MQGMO_COMPLETE_MSG            constant binary_integer := 65536;
MQGMO_ALL_MSGS_AVAILABLE      constant binary_integer := 131072;
MQGMO_ALL_SEGMENTS_AVAILABLE  constant binary_integer := 262144;
</pre></div>
<!-- class="sect3" -->
<div id="WSMQG251" class="sect3"><a id="sthref476"></a>
<h4 class="sect3">VERSION Field</h4>
<pre dir="ltr">MQGMO_VERSION_1                constant binary_integer := 1;
MQGMO_CURRENT_VERSION          constant binary_integer := 1;
MQGMO_VERSION_2                constant binary_integer := 2;
MQGMO_VERSION_3                constant binary_integer := 3;
</pre></div>
<!-- class="sect3" -->
<div id="WSMQG252" class="sect3"><a id="sthref477"></a>
<h4 class="sect3">MATCHOPTIONS Field</h4>
<pre dir="ltr">MQMO_DEFAULT                   constant binary_integer := 3;
MQMO_NONE                      constant binary_integer := 0;
MQMO_MATCH_MSG_ID              constant binary_integer := 1;
MQMO_MATCH_CORREL_ID           constant binary_integer := 2;
MQMO_MATCH_GROUP_ID            constant binary_integer := 4;
MQMO_MATCH_MSG_SEQ_NUMBER      constant binary_integer := 8;
MQMO_MATCH_OFFSET              constant binary_integer := 16;
MQMO_MATCH_MSG_TOKEN           constant binary_integer := 32;
</pre></div>
<!-- class="sect3" -->
<div id="WSMQG253" class="sect3"><a id="sthref478"></a>
<h4 class="sect3">WAITINTERVAL</h4>
<pre dir="ltr">PGM_SUP.MQWI_UNLIMITED CONSTANT BINARY_INTEGER := -1;
PGM_SUP.MQWI_UNITS     CONSTANT BINARY_INTEGER := 1000;
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="WSMQG254" class="sect2"><a id="sthref479"></a>
<h3 class="sect2">PGM.MQMD <a id="sthref480"></a>Values</h3>
<p>The following sections provide information about <code dir="ltr">PGM</code>.<code dir="ltr">MQOD</code> values.</p>
<a id="i641904"></a>
<div id="WSMQG255" class="sect3">
<h4 class="sect3">CODEDCHARSETID Field</h4>
<pre dir="ltr">PGM_SUP.MQCCSI_DEFAULT  CONSTANT BINARY_INTEGER := 0;
PGM_SUP.MQCCSI_Q_MGR    CONSTANT BINARY_INTEGER := 0;
PGM_SUP.MQCCSI_EMBEDDED CONSTANT BINARY_INTEGER := -1;
</pre></div>
<!-- class="sect3" -->
<a id="i641909"></a>
<div id="WSMQG256" class="sect3">
<h4 class="sect3">ENCODING Field</h4>
<pre dir="ltr">PGM_SUP.MQENC_NATIVE  CONSTANT RAW(4) := &#39;00000111&#39;;
</pre></div>
<!-- class="sect3" -->
<div id="WSMQG257" class="sect3"><a id="sthref481"></a>
<h4 class="sect3">ENCODING Field, Values for Binary Integers</h4>
<pre dir="ltr">PGM_SUP.MQENC_INTEGER_UNDEFINED CONSTANT RAW(4) := &#39;00000000&#39;;
PGM_SUP.MQENC_INTEGER_NORMAL    CONSTANT RAW(4) := &#39;00000001&#39;;
PGM_SUP.MQENC_INTEGER_REVERSED  CONSTANT RAW(4) := &#39;00000002&#39;;
</pre></div>
<!-- class="sect3" -->
<div id="WSMQG258" class="sect3"><a id="sthref482"></a>
<h4 class="sect3">ENCODING Field, Values for Floating Point Numbers</h4>
<pre dir="ltr">PGM_SUP.MQENC_FLOAT_UNDEFINED     CONSTANT RAW(4) := &#39;00000000&#39;;
PGM_SUP.MQENC_FLOAT_IEEE_NORMAL   CONSTANT RAW(4) := &#39;00000100&#39;;
PGM_SUP.MQENC_FLOAT_IEEE_REVERSED CONSTANT RAW(4) := &#39;00000200&#39;;
PGM_SUP.MQENC_FLOAT_S390          CONSTANT RAW(4) := &#39;00000300&#39;;
</pre></div>
<!-- class="sect3" -->
<div id="WSMQG259" class="sect3"><a id="sthref483"></a>
<h4 class="sect3">ENCODING Field, Mask Values</h4>
<pre dir="ltr">PGM_SUP.MQENC_INTEGER_MASK  CONSTANT RAW(4) := &#39;0000000f&#39;;
PGM_SUP.MQENC_DECIMAL_MASK  CONSTANT RAW(4) := &#39;000000f0&#39;;
PGM_SUP.MQENC_FLOAT_MASK    CONSTANT RAW(4) := &#39;00000f00&#39;;
PGM_SUP.MQENC_RESERVED_MASK CONSTANT RAW(4) := &#39;fffff000&#39;;
</pre></div>
<!-- class="sect3" -->
<div id="WSMQG260" class="sect3"><a id="sthref484"></a>
<h4 class="sect3">ENCODING Field, Values for Packed Decimal Integers</h4>
<pre dir="ltr">PGM_SUP.MQENC_DECIMAL_UNDEFINED CONSTANT RAW(4) := &#39;00000000&#39;;
PGM_SUP.MQENC_DECIMAL_NORMAL    CONSTANT RAW(4) := &#39;00000010&#39;;
PGM_SUP.MQENC_DECIMAL_REVERSED  CONSTANT RAW(4) := &#39;00000020&#39;;
</pre></div>
<!-- class="sect3" -->
<a id="i641930"></a>
<div id="WSMQG261" class="sect3">
<h4 class="sect3">EXPIRY Field</h4>
<pre dir="ltr">PGM_SUP.MQEI_UNLIMITED   CONSTANT BINARY_INTEGER := -1;
PGM_SUP.MQEI_MIN_EXPIRY  CONSTANT BINARY_INTEGER := 0;
PGM_SUP.MQEI_UNITS       CONSTANT BINARY_INTEGER := 10;
</pre></div>
<!-- class="sect3" -->
<a id="i641935"></a>
<div id="WSMQG262" class="sect3">
<h4 class="sect3">FEEDBACK Field</h4>
<pre dir="ltr">PGM_SUP.MQFB_NONE                   CONSTANT BINARY_INTEGER := 0;
PGM_SUP.MQFB_SYSTEM_FIRST           CONSTANT BINARY_INTEGER := 1;
PGM_SUP.MQFB_EXPIRATION             CONSTANT BINARY_INTEGER := 258;
PGM_SUP.MQFB_COA                    CONSTANT BINARY_INTEGER := 259;
PGM_SUP.MQFB_COD                    CONSTANT BINARY_INTEGER := 260;
PGM_SUP.MQFB_QUIT                   CONSTANT BINARY_INTEGER := 256;
PGM_SUP.MQFB_CHANNEL_COMPLETED      CONSTANT BINARY_INTEGER := 262;
PGM_SUP.MQFB_CHANNEL_FAIL_RETRY     CONSTANT BINARY_INTEGER := 263;
PGM_SUP.MQFB_CHANNEL_FAIL           CONSTANT BINARY_INTEGER := 264;
PGM_SUP.MQFB_APPL_CANNOT_BE_STARTED CONSTANT BINARY_INTEGER := 265;
PGM_SUP.MQFB_TM_ERROR               CONSTANT BINARY_INTEGER := 266;
PGM_SUP.MQFB_APPL_TYPE_ERROR        CONSTANT BINARY_INTEGER := 267;
PGM_SUP.MQFB_STOPPED_BY_MSG_EXIT    CONSTANT BINARY_INTEGER := 268;
PGM_SUP.MQFB_XMIT_Q_MSG_ERROR       CONSTANT BINARY_INTEGER := 271;
PGM_SUP.MQFB_SYSTEM_LAST            CONSTANT BINARY_INTEGER := 65535;
PGM_SUP.MQFB_APPL_FIRST             CONSTANT BINARY_INTEGER := 65536;
PGM_SUP.MQFB_APPL_LAST              CONSTANT BINARY_INTEGER := 999999999;
</pre></div>
<!-- class="sect3" -->
<a id="i641954"></a>
<div id="WSMQG263" class="sect3">
<h4 class="sect3">FORMAT Field</h4>
<pre dir="ltr">MQFMT_NONE               constant char(8) := &#39;        &#39;;
MQFMT_ADMIN              constant char(8) := &#39;MQADMIN &#39;;
MQFMT_CHANNEL_COMPLETED  constant char(8) := &#39;MQCHCOM &#39;;
MQFMT_CICS               constant char(8) := &#39;MQCICS  &#39;;
MQFMT_COMMAND_1          constant char(8) := &#39;MQCMD1  &#39;;
MQFMT_COMMAND_2          constant char(8) := &#39;MQCMD2  &#39;;
MQFMT_DEAD_LETTER_HEADER constant char(8) := &#39;MQDEAD  &#39;;
MQFMT_DIST_HEADER        constant char(8) := &#39;MQHDIST &#39;;
MQFMT_EVENT              constant char(8) := &#39;MQEVENT &#39;;
MQFMT_IMS                constant char(8) := &#39;MQIMS   &#39;;
MQFMT_IMS_VAR_STRING     constant char(8) := &#39;MQIMSVS &#39;;
MQFMT_MD_EXTENTION       constant char(8) := &#39;MQHMDE  &#39;;
MQFMT_PCF                constant char(8) := &#39;MQPCF   &#39;;
MQFMT_REF_MSG_HEADER     constant char(8) := &#39;MQHREF  &#39;;
MQFMT_STRING             constant char(8) := &#39;MQSTR   &#39;;
MQFMT_TRIGGER            constant char(8) := &#39;MQTRIG  &#39;;
MQFMT_WORK_INFO_HEADER   constant char(8) := &#39;MQHWIH  &#39;;
MQFMT_XMIT_Q_HEADER      constant char(8) := &#39;MQXMIT  &#39;;
</pre></div>
<!-- class="sect3" -->
<a id="i641967"></a>
<div id="WSMQG264" class="sect3">
<h4 class="sect3">MSGTYPE Field</h4>
<pre dir="ltr">PGM_SUP.MQMT_SYSTEM_FIRST CONSTANT BINARY_INTEGER := 1; 
PGM_SUP.MQMT_REQUEST      CONSTANT BINARY_INTEGER := 1; 
PGM_SUP.MQMT_REPLY        CONSTANT BINARY_INTEGER := 2; 
PGM_SUP.MQMT_DATAGRAM     CONSTANT BINARY_INTEGER := 8; 
PGM_SUP.MQMT_REPORT       CONSTANT BINARY_INTEGER := 4; 
PGM_SUP.MQMT_SYSTEM_LAST  CONSTANT BINARY_INTEGER := 65535; 
PGM_SUP.MQMT_APPL_FIRST   CONSTANT BINARY_INTEGER := 65536; 
PGM_SUP.MQMT_APPL_LAST    CONSTANT BINARY_INTEGER := 999999999;
</pre></div>
<!-- class="sect3" -->
<a id="i641977"></a>
<div id="WSMQG265" class="sect3">
<h4 class="sect3">PERSISTENCE Field</h4>
<pre dir="ltr">PGM_SUP.MQPER_PERSISTENT           CONSTANT BINARY_INTEGER := 1;
PGM_SUP.MQPER_NOT_PERSISTENT       CONSTANT BINARY_INTEGER := 0;
PGM_SUP.MQPER_PERSISTENCE_AS_Q_DEF CONSTANT BINARY_INTEGER := 2;
</pre></div>
<!-- class="sect3" -->
<a id="i641982"></a>
<div id="WSMQG266" class="sect3">
<h4 class="sect3">PRIORITY Field</h4>
<pre dir="ltr">PGM_SUP.MQPRI_PRIORITY_AS_Q_DEF CONSTANT BINARY_INTEGER := -1; 
PGM_SUP.MQPRI_MIN_PRIORITY      CONSTANT BINARY_INTEGER := 0; 
PGM_SUP.MQPRI_MAX_PRIORITY      CONSTANT BINARY_INTEGER := 9;
</pre></div>
<!-- class="sect3" -->
<a id="i641986"></a>
<div id="WSMQG267" class="sect3">
<h4 class="sect3">PUTAPPLTYPE Field</h4>
<pre dir="ltr">MQAT_UNKNOWN     constant binary_integer := -1;
MQAT_NO_CONTEXT  constant binary_integer := 0;
MQAT_CICS        constant binary_integer := 1;
MQAT_MVS         constant binary_integer := 2;
MQAT_OS390       constant binary_integer := 2;
MQAT_IMS         constant binary_integer := 3;
MQAT_OS2         constant binary_integer := 4;
MQAT_DOS         constant binary_integer := 5;
MQAT_AIX         constant binary_integer := 6;
MQAT_UNIX        constant binary_integer := 6;
MQAT_QMGR        constant binary_integer := 7;
MQAT_OS400       constant binary_integer := 8;
MQAT_WINDOWS     constant binary_integer := 9;
MQAT_CICS_VSE    constant binary_integer := 10;
MQAT_WINDOWS_NT  constant binary_integer := 11;
MQAT_VMS         constant binary_integer := 12;
MQAT_GUARDIAN    constant binary_integer := 13;
MQAT_NSK         constant binary_integer := 13;
MQAT_VOS         constant binary_integer := 14;
MQAT_IMS_BRIDGE  constant binary_integer := 19;
MQAT_XCF         constant binary_integer := 20;
MQAT_CICS_BRIDGE constant binary_integer := 21;
MQAT_NOTES_AGENT constant binary_integer := 22;
MQAT_USER_FIRST  constant binary_integer := 65536;
MQAT_USER_LAST   constant binary_integer := 999999999;
MQAT_DEFAULT     constant binary_integer := 6;
</pre></div>
<!-- class="sect3" -->
<a id="i642007"></a>
<div id="WSMQG268" class="sect3">
<h4 class="sect3">REPORT Field</h4>
<pre dir="ltr">MQRO_NEW_MSG_ID                constant raw(4) := &#39;00000000&#39;;
MQRO_COPY_MSG_ID_TO_CORREL_ID  constant raw(4) := &#39;00000000&#39;;
MQRO_DEAD_LETTER_Q             constant raw(4) := &#39;00000000&#39;;
MQRO_NONE                      constant raw(4) := &#39;00000000&#39;;
MQRO_PAN                       constant raw(4) := &#39;00000001&#39;;
MQRO_NAN                       constant raw(4) := &#39;00000002&#39;;
MQRO_PASS_CORREL_ID            constant raw(4) := &#39;00000040&#39;;
MQRO_PASS_MSG_ID               constant raw(4) := &#39;00000080&#39;;
MQRO_COA                       constant raw(4) := &#39;00000100&#39;;
MQRO_COA_WITH_DATA             constant raw(4) := &#39;00000300&#39;;
MQRO_COA_WITH_FULL_DATA        constant raw(4) := &#39;00000700&#39;;
MQRO_COD                       constant raw(4) := &#39;00000800&#39;;
MQRO_COD_WITH_DATA             constant raw(4) := &#39;00001800&#39;;
MQRO_COD_WITH_FULL_DATA        constant raw(4) := &#39;00003800&#39;;
MQRO_EXPIRATION                constant raw(4) := &#39;00200000&#39;;
MQRO_EXPIRATION_WITH_DATA      constant raw(4) := &#39;00600000&#39;;
MQRO_EXPIRATION_WITH_FULL_DATA constant raw(4) := &#39;00E00000&#39;;
MQRO_EXCEPTION                 constant raw(4) := &#39;01000000&#39;;
MQRO_EXCEPTION_WITH_DATA       constant raw(4) := &#39;03000000&#39;;
MQRO_EXCEPTION_WITH_FULL_DATA  constant raw(4) := &#39;07000000&#39;;
MQRO_DISCARD_MSG               constant raw(4) := &#39;08000000&#39;;
</pre></div>
<!-- class="sect3" -->
<div id="WSMQG269" class="sect3"><a id="sthref485"></a>
<h4 class="sect3">VERSION Field</h4>
<pre dir="ltr">MQMD_VERSION_1                constant binary_integer := 1;
MQMD_VERSION_2                constant binary_integer := 2;
MQMD_CURRENT_VERSION          constant binary_integer := 2;
</pre></div>
<!-- class="sect3" -->
<div id="WSMQG270" class="sect3"><a id="sthref486"></a>
<h4 class="sect3">Report Field, Mask Values</h4>
<pre dir="ltr">PGM_SUP.MQRO_REJECT_UNSUP_MASK         CONSTANT RAW(4) := &#39;101c0000&#39;;
PGM_SUP.MQRO_ACCEPT_UNSUP_MASK         CONSTANT RAW(4) := &#39;efe000ff&#39;;
PGM_SUP.MQRO_ACCEPT_UNSUP_IF_XMIT_MASK CONSTANT RAW(4) := &#39;0003ff00&#39;;
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="WSMQG271" class="sect2"><a id="sthref487"></a>
<h3 class="sect2">PGM.MQOD <a id="sthref488"></a>Values</h3>
<p>The following sections provide information about <code dir="ltr">PGM</code>.<code dir="ltr">MQOD</code> values.</p>
<a id="i642034"></a>
<div id="WSMQG272" class="sect3">
<h4 class="sect3">OBJECTTYPE Field</h4>
<pre dir="ltr">PGM_SUP.MQOT_Q       CONSTANT BINARY_INTEGER := 1;
PGM_SUP.MQOT_PROCESS CONSTANT BINARY_INTEGER := 3;
PGM_SUP.MQOT_Q_MGR   CONSTANT BINARY_INTEGER := 5;
PGM_SUP.MQOT_CHANNEL CONSTANT BINARY_INTEGER := 6;
</pre></div>
<!-- class="sect3" -->
<div id="WSMQG273" class="sect3"><a id="sthref489"></a>
<h4 class="sect3">OBJECTTYPE Field, Extended Values</h4>
<pre dir="ltr">MQOT_ALL               constant binary_integer := 1001;
MQOT_ALIAS_Q           constant binary_integer := 1002;
MQOT_MODEL_Q           constant binary_integer := 1003;
MQOT_LOCAL_Q           constant binary_integer := 1004;
MQOT_REMOTE_Q          constant binary_integer := 1005;
MQOT_SENDER_CHANNEL    constant binary_integer := 1007;
MQOT_SERVER_CHANNEL    constant binary_integer := 1008;
MQOT_REQUESTER_CHANNEL constant binary_integer := 1009;
MQOT_RECEIVER_CHANNEL  constant binary_integer := 1010;
MQOT_CURRENT_CHANNEL   constant binary_integer := 1011;
MQOT_SAVED_CHANNEL     constant binary_integer := 1012;
MQOT_SVRCONN_CHANNEL   constant binary_integer := 1013;
MQOT_CLNTCONN_CHANNEL  constant binary_integer := 1014;
</pre></div>
<!-- class="sect3" -->
<div id="WSMQG274" class="sect3"><a id="sthref490"></a>
<h4 class="sect3">VERSION Field</h4>
<pre dir="ltr">MQOD_VERSION_1                constant binary_integer := 1;
MQOD_VERSION_2                constant binary_integer := 2;
MQOD_CURRENT_VERSION          constant binary_integer := 2;
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="WSMQG275" class="sect2"><a id="sthref491"></a>
<h3 class="sect2">PGM.MQPMO <a id="sthref492"></a>Values</h3>
<p>The following sections provide information about <code dir="ltr">PGM</code>.<code dir="ltr">MQPMO</code> values.</p>
<a id="i642054"></a>
<div id="WSMQG276" class="sect3">
<h4 class="sect3">OPTIONS Field</h4>
<pre dir="ltr">MQPMO_NONE                     constant binary_integer := 0;
MQPMO_SYNCPOINT                constant binary_integer := 2;
MQPMO_NO_SYNCPOINT             constant binary_integer := 4;
MQPMO_DEFAULT_CONTEXT          constant binary_integer := 32;
MQPMO_NEW_MSG_ID               constant binary_integer := 64;
MQPMO_NEW_CORREL_ID            constant binary_integer := 128;
MQPMO_PASS_IDENTITY_CONTEXT    constant binary_integer := 256;
MQPMO_PASS_ALL_CONTEXT         constant binary_integer := 512;
MQPMO_SET_IDENTITY_CONTEXT     constant binary_integer := 1024;
MQPMO_SET_ALL_CONTEXT          constant binary_integer := 2048;
MQPMO_ALTERNATE_USER_AUTHORITY constant binary_integer := 4096;
MQPMO_FAIL_IF_QUIESCING        constant binary_integer := 8192;
MQPMO_NO_CONTEXT               constant binary_integer := 16384;
MQPMO_LOGICAL_ORDER            constant binary_integer := 32768;
</pre></div>
<!-- class="sect3" -->
<div id="WSMQG277" class="sect3"><a id="sthref493"></a>
<h4 class="sect3">VERSION Field</h4>
<pre dir="ltr">MQPMO_VERSION_1                constant binary_integer := 1;
MQPMO_VERSION_2                constant binary_integer := 2;
MQPMO_CURRENT_VERSION          constant binary_integer := 2;
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="WSMQG278" class="sect2"><a id="i642067"></a>
<h3 class="sect2">MQCLOSE <a id="sthref494"></a><a id="sthref495"></a>Values</h3>
<p>The following sections provide information about <code dir="ltr">MQCLOSE</code> values.</p>
<div id="WSMQG279" class="sect3"><a id="sthref496"></a>
<h4 class="sect3"><span class="italic">hobj</span> Argument</h4>
<pre dir="ltr">PGM_SUP.MQHO_UNUSABLE_HOBJ CONSTANT BINARY_INTEGER := -1;
</pre></div>
<!-- class="sect3" -->
<div id="WSMQG280" class="sect3"><a id="sthref497"></a>
<h4 class="sect3"><span class="italic">options</span> Argument</h4>
<pre dir="ltr">PGM_SUP.MQCO_NONE         CONSTANT BINARY_INTEGER := 0;
PGM_SUP.MQCO_DELETE       CONSTANT BINARY_INTEGER := 1;
PGM_SUP.MQCO_DELETE_PURGE CONSTANT BINARY_INTEGER := 2;
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i642076"></a>
<div id="WSMQG281" class="sect2">
<h3 class="sect2">MQOPEN <a id="sthref498"></a><a id="sthref499"></a>Values</h3>
<p>The following sections provide information about <code dir="ltr">MQOPEN</code> values.</p>
<a id="i642079"></a>
<div id="WSMQG282" class="sect3">
<h4 class="sect3"><span class="italic">options</span> Argument</h4>
<pre dir="ltr">MQOO_BIND_AS_Q_DEF            constant binary_integer := 0;
MQOO_INPUT_AS_Q_DEF           constant binary_integer := 1;
MQOO_INPUT_SHARED             constant binary_integer := 2;
MQOO_INPUT_EXCLUSIVE          constant binary_integer := 4;
MQOO_BROWSE                   constant binary_integer := 8;
MQOO_OUTPUT                   constant binary_integer := 16;
MQOO_INQUIRE                  constant binary_integer := 32;
MQOO_SET                      constant binary_integer := 64;
MQOO_SAVE_ALL_CONTEXT         constant binary_integer := 128;
MQOO_PASS_IDENTITY_CONTEXT    constant binary_integer := 256;
MQOO_PASS_ALL_CONTEXT         constant binary_integer := 512;
MQOO_SET_IDENTITY_CONTEXT     constant binary_integer := 1024;
MQOO_SET_ALL_CONTEXT          constant binary_integer := 2048;
MQOO_ALTERNATE_USER_AUTHORITY constant binary_integer := 4096;
MQOO_FAIL_IF_QUIESCING        constant binary_integer := 8192;
MQOO_BIND_ON_OPEN             constant binary_integer := 16384;
MQOO_BIND_NOT_FIXED           constant binary_integer := 32768;
MQOO_RESOLVE_NAMES            constant binary_integer := 65536;
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="WSMQG283" class="sect2"><a id="sthref500"></a>
<h3 class="sect2">Maximum Lengths for Fields of PGM Type Definitions</h3>
<p>These constants contain the maximum lengths allowed for fields used by the PGM Type Definitions.&nbsp;For example, the constant <code dir="ltr">PGM_SUP</code>.<code dir="ltr">MQ_ACCOUNTING_TOKEN_LENGTH</code> specifies that the maximum length for <code dir="ltr">PGM</code>.<code dir="ltr">MQMD</code>.<code dir="ltr">ACCOUNTINGTOKEN</code> is 32&nbsp;characters.</p>
<pre dir="ltr">MQ_ABEND_CODE_LENGTH         constant binary_integer :=  4;
MQ_ACCOUNTING_TOKEN_LENGTH   constant binary_integer :=  32;
MQ_APPL_IDENTITY_DATA_LENGTH constant binary_integer :=  32;
MQ_APPL_ORIGIN_DATA_LENGTH   constant binary_integer :=  4;
MQ_ATTENTION_ID_LENGTH       constant binary_integer :=  4;
MQ_AUTHENTICATOR_LENGTH      constant binary_integer :=  8;
MQ_CANCEL_CODE_LENGTH        constant binary_integer :=  4;
MQ_CLUSTER_NAME_LENGTH       constant binary_integer :=  48;
MQ_CORREL_ID_LENGTH          constant binary_integer :=  24;
MQ_CREATION_DATE_LENGTH      constant binary_integer :=  12;
MQ_CREATION_TIME_LENGTH      constant binary_integer :=  8;
MQ_DATE_LENGTH               constant binary_integer :=  12;
MQ_EXIT_NAME_LENGTH          constant binary_integer :=  128;
MQ_FACILITY_LENGTH           constant binary_integer :=  8;
MQ_FACILITY_LIKE_LENGTH      constant binary_integer :=  4;
MQ_FORMAT_LENGTH             constant binary_integer :=  8;
MQ_FUNCTION_LENGTH           constant binary_integer :=  4;
MQ_GROUP_ID_LENGTH           constant binary_integer :=  24;
MQ_LTERM_OVERRIDE_LENGTH     constant binary_integer :=  8;
MQ_MFS_MAP_NAME_LENGTH       constant binary_integer :=  8;
MQ_MSG_HEADER_LENGTH         constant binary_integer :=  4000;
MQ_MSG_ID_LENGTH             constant binary_integer :=  24;
MQ_MSG_TOKEN_LENGTH          constant binary_integer :=  16;
MQ_NAMELIST_DESC_LENGTH      constant binary_integer :=  64;
MQ_NAMELIST_NAME_LENGTH      constant binary_integer :=  48;
MQ_OBJECT_INSTANCE_ID_LENGTH constant binary_integer :=  24;
MQ_NAME_LENGTH               constant binary_integer :=  48;
MQ_PROCESS_APPL_ID_LENGTH    constant binary_integer :=  256;
MQ_PROCESS_DESC_LENGTH       constant binary_integer :=  64;
MQ_PROCESS_ENV_DATA_LENGTH   constant binary_integer :=  128;
MQ_PROCESS_NAME_LENGTH       constant binary_integer :=  48;
MQ_PROCESS_USER_DATA_LENGTH  constant binary_integer :=  128;
MQ_PUT_APPL_NAME_LENGTH      constant binary_integer :=  28;
MQ_PUT_DATE_LENGTH           constant binary_integer :=  8;
MQ_PUT_TIME_LENGTH           constant binary_integer :=  8;
MQ_Q_DESC_LENGTH             constant binary_integer :=  64;
MQ_Q_MGR_DESC_LENGTH         constant binary_integer :=  64;
MQ_Q_MGR_IDENTIFIER_LENGTH   constant binary_integer :=  48;
MQ_Q_MGR_NAME_LENGTH         constant binary_integer :=  48;
MQ_Q_NAME_LENGTH             constant binary_integer :=  48;
MQ_REMOTE_SYS_ID_LENGTH      constant binary_integer :=  4;
MQ_SERVICE_NAME_LENGTH       constant binary_integer :=  32;
MQ_SERVICE_STEP_LENGTH       constant binary_integer :=  8;
MQ_START_CODE_LENGTH         constant binary_integer :=  4;
MQ_STORAGE_CLASS_LENGTH      constant binary_integer :=  8;
MQ_TIME_LENGTH               constant binary_integer :=  8;
MQ_TRAN_INSTANCE_ID_LENGTH   constant binary_integer :=  16;
MQ_TRANSACTION_ID_LENGTH     constant binary_integer :=  4;
MQ_TP_NAME_LENGTH            constant binary_integer :=  64;
MQ_TRIGGER_DATA_LENGTH       constant binary_integer :=  64;
MQ_USER_ID_LENGTH            constant binary_integer :=  12;
</pre></div>
<!-- class="sect2" -->
<a id="i642137"></a>
<div id="WSMQG284" class="sect2">
<h3 class="sect2">Error Code Definitions<a id="sthref501"></a></h3>
<p class="subhead2"><a id="WSMQG357"></a>Error Code -29400: Data Cartridge Error</p>
<p>This error code indicates that the MQI opcode implemented in DG4MQ fails. Refer to IBM WebSphere reference manual for information about the cause by looking up the opcode and its completion code and reason code.</p>
<pre dir="ltr">MQI opcode failed. completion code=xxxx. reason code=xxxx.
</pre>
<div id="WSMQG358" class="example">
<p class="titleinexample"><a id="sthref502"></a>Example A-3 test.sql</p>
<pre dir="ltr">--
-- Copyright Oracle, 2005 All Rights Reserved.
--
-- NAME
--   test.sql
--
-- DESCRIPTION
--
--   Specify the database link name you created for the gateway. To do this,
--   replace the database link name &#39;YOUR_DBLINK_NAME&#39; with the dblink name
--   you chose when the database link was created.
--
--   This script performs a test run for the MQSeries gateway. In this
--   script the queuename is &#39;YOUR_QUEUE_NAME&#39;, replace queuename with 
--   a valid queue name at the queue manager the gateway is configured 
--   for.
--
--   First the script puts a raw message of 10 bytes on the specified 
--   queue. 
-- 
--   When successfully completed the put operation, the script does a 
--   get on the same queue to read the message back.
--
--   The contents of both messages put and retrieved from the queue are 
--   printed to standard out for verification by the user.
--
-- NOTES
--   Run the script from the SQL*Plus command line.
--
--   Make the sure the user is granted &#39;EXECUTE&#39; on package dbms_output
--

set serveroutput on

declare

  objdesc    PGM.MQOD;
  hobj       PGM.MQOH;
  msgdesc    PGM.MQMD;
  putmsgopts PGM.MQPMO;
  getmsgopts PGM.MQGMO;
  options    binary_integer;
  putbuffer  raw(10) := &#39;10203040506070809000&#39;;
  getbuffer  raw(10);

begin

  -- 
  -- Print the message we are putting on the queue
  --

  dbms_output.put_line(&#39;message put on queue = &#39; || rawtohex(putbuffer));

  --
  -- Specify queue name and dblink name (replace with proper names).
  --
  objdesc.objectname := &#39;YOUR_QUEUE_NAME&#39;;
  objdesc.dblinkname := &#39;YOUR_DBLINK_NAME&#39;;

  --
  -- Specify a put operation. 
  --

  options := pgm_sup.MQOO_OUTPUT;

  --
  -- Open the queue.
  -- 

  PGM.MQOPEN(objdesc, options, hobj);

  --
  -- Put the message buffer on the queue.
  --

  PGM.MQPUT(hobj, msgdesc, putmsgopts, putbuffer);

  --
  -- Define close options.
  --

  options := pgm_sup.MQCO_NONE;

  --
  -- Close queue.
  --

  PGM.MQCLOSE(hobj, options);

  --
  -- Specify a get operation.
  --

  options := pgm_sup.MQOO_INPUT_AS_Q_DEF;

  --
  -- Open queue.
  -- 

  PGM.MQOPEN(objdesc, options, hobj);

  --
  -- Get message from the queue.
  --

  getmsgopts.msglength := 10;
  PGM.MQGET(hobj, msgdesc, getmsgopts, getbuffer);

  --
  -- Define close options.
  --

  options := pgm_sup.MQCO_NONE;

  --
  -- Close the queue again.
  --

  PGM.MQCLOSE(hobj, options);

  -- 
  -- Print the result
  --

  dbms_output.put_line(&#39;message read back = &#39; || rawtohex(getbuffer));

exception

  --
  -- When no more messages... tell the user and close the queue.
  -- 

  when pgm_sup.NO_MORE_MESSAGES then
    dbms_output.put_line(&#39;Warning: No message found on the queue&#39;);
    options := pgm_sup.MQCO_NONE;
    PGM.MQCLOSE(hobj, options);

  --
  -- something else went wrong.. tell the user.
  -- 
  when others then
    dbms_output.put_line(&#39;Error: Procedural Gateway for IBM MQSeries verification
 script failed.&#39;);
    dbms_output.put_line(SQLERRM); 

end;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="appendix" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4993">
<tr>
<td class="cellalignment5002">
<table class="cellalignment4998">
<tr>
<td class="cellalignment4997"><a href="running.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4997"><a href="app_urpkg.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2005, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment5004">
<table class="cellalignment4996">
<tr>
<td class="cellalignment4997"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4997"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4997"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4997"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4997"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4997"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>