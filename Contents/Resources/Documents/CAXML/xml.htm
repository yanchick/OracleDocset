<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-2706"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Package%20XML%20APIs%20for%20C"></a><title>Package XML APIs for C</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 726"/>
<meta name="dcterms.created" content="2013-04-05T15:50:8Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database XML C API Reference"/>
<meta name="dcterms.identifier" content="E15885-04"/>
<meta name="dcterms.isVersionOf" content="CAXML"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="traversal.htm" title="Previous" type="text/html"/>
<link rel="Next" href="xmldiff.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E15885-04.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">15/22</span> <!-- End Header -->
<div id="CAXML6144" class="chapter"><a id="Xmlpackage"></a>
<h1 class="chapter"><span class="secnum">11</span> <a id="sthref1034"></a> <a id="sthref1035"></a> <a id="sthref1036"></a> Package XML APIs for C</h1>
<p>This C implementation of the XML processor (or parser) follows the W3C XML specification (rev REC-xml-19980210) and implements the required behavior of an XML processor in terms of how it must read XML data and the information it must provide to the application.</p>
<p>This chapter contains the following section:</p>
<ul>
<li>
<p><a href="#Xmlinterfaces">XML Interface</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADXDK" href="../ADXDK/toc.htm"><span class="italic">Oracle XML Developer&#39;s Kit Programmer&#39;s Guide</span></a></p>
</li>
<li>
<p><a class="olink ADXDB" href="../ADXDB/toc.htm"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a></p>
</li>
</ul>
</div>
<div class="refentry"><a id="Xmlinterfaces"></a>
<hr/>
<div id="CAXML6145" class="refsect1">
<h2 class="refsect1">XML Interface</h2>
<p><a href="#Summaryxml">Table 11-1</a> summarizes the methods available through the <code>XML</code> interface.</p>
<div id="CAXML6146" class="tblformal">
<p class="titleintable"><a id="sthref1037"></a><a id="Summaryxml"></a>Table 11-1 Summary of XML Methods</p>
<table class="cellalignment2920" title="Summary of XML Methods" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t3">Function</th>
<th class="cellalignment2921" id="r1c2-t3">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t3" headers="r1c1-t3">
<p><a href="#Xmlaccess">XmlAccess()</a></p>
</td>
<td class="cellalignment2922" headers="r2c1-t3 r1c2-t3">
<p>Set access method callbacks for URL.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t3" headers="r1c1-t3">
<p><a href="#Xmlcreate">XmlCreate()</a></p>
</td>
<td class="cellalignment2922" headers="r3c1-t3 r1c2-t3">
<p>Create an XML Developer&#39;s Toolkit <code>xmlctx</code>.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t3" headers="r1c1-t3">
<p><a href="#Xmlcreatedtd">XmlCreateDTD()</a></p>
</td>
<td class="cellalignment2922" headers="r4c1-t3 r1c2-t3">
<p>Create DTD.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t3" headers="r1c1-t3">
<p><a href="#Xmlcreatedocument">XmlCreateDocument()</a></p>
</td>
<td class="cellalignment2922" headers="r5c1-t3 r1c2-t3">
<p>Create Document (node).</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r6c1-t3" headers="r1c1-t3">
<p><a href="#Xmldestroy">XmlDestroy()</a></p>
</td>
<td class="cellalignment2922" headers="r6c1-t3 r1c2-t3">
<p>Destroy an <code>xmlctx</code>.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r7c1-t3" headers="r1c1-t3">
<p><a href="#BEIJABJH">XmlDiff()</a></p>
</td>
<td class="cellalignment2922" headers="r7c1-t3 r1c2-t3">
<p>Compares two XML documents.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r8c1-t3" headers="r1c1-t3">
<p><a href="#Xmlfreedocument">XmlFreeDocument()</a></p>
</td>
<td class="cellalignment2922" headers="r8c1-t3 r1c2-t3">
<p>Free a document (releases all resources).</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r9c1-t3" headers="r1c1-t3">
<p><a href="#Xmlgetencoding">XmlGetEncoding()</a></p>
</td>
<td class="cellalignment2922" headers="r9c1-t3 r1c2-t3">
<p>Returns data encoding in use by XML context.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r10c1-t3" headers="r1c1-t3">
<p><a href="#Xmlhasfeature">XmlHasFeature()</a></p>
</td>
<td class="cellalignment2922" headers="r10c1-t3 r1c2-t3">
<p>Determine if DOM feature is implemented.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r11c1-t3" headers="r1c1-t3">
<p><a href="#Xmlissimple">XmlIsSimple()</a></p>
</td>
<td class="cellalignment2922" headers="r11c1-t3 r1c2-t3">
<p>Returns single-byte (simple) characterset flag.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r12c1-t3" headers="r1c1-t3">
<p><a href="#Xmlisunicode">XmlIsUnicode()</a></p>
</td>
<td class="cellalignment2922" headers="r12c1-t3 r1c2-t3">
<p>Returns <code>XmlIsUnicode</code> (simple) characterset flag.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r13c1-t3" headers="r1c1-t3">
<p><a href="#Xmlloaddom">XmlLoadDom()</a></p>
</td>
<td class="cellalignment2922" headers="r13c1-t3 r1c2-t3">
<p>Load (parse) an XML document and produce a DOM.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r14c1-t3" headers="r1c1-t3">
<p><a href="#Xmlloadsax">XmlLoadSax()</a></p>
</td>
<td class="cellalignment2922" headers="r14c1-t3 r1c2-t3">
<p>Load (parse) an XML document from and produce SAX events.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r15c1-t3" headers="r1c1-t3">
<p><a href="#Xmlloadsaxva">XmlLoadSaxVA()</a></p>
</td>
<td class="cellalignment2922" headers="r15c1-t3 r1c2-t3">
<p>Load (parse) an XML document from and produce SAX events [<code>varargs</code>].</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r16c1-t3" headers="r1c1-t3">
<p><a href="#Xmlsavedom">XmlSaveDom()</a></p>
</td>
<td class="cellalignment2922" headers="r16c1-t3 r1c2-t3">
<p>Saves (serializes, formats) an XML document.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r17c1-t3" headers="r1c1-t3">
<p><a href="#Xmlversion">XmlVersion()</a></p>
</td>
<td class="cellalignment2922" headers="r17c1-t3 r1c2-t3">
<p>Returns version string for XDK.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CAXML6147" class="refsect2"><a id="Xmlaccess"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1038"></a><a id="sthref1039"></a><a id="sthref1040"></a>XmlAccess()</h3>
<p>Sets the open/read/close callbacks used to load data for a specific URL access method. Overrides the built-in data loading functions for HTTP, FTP, and so on, or provides functions to handle new types, such as <code>UNKNOWN</code>.</p>
<p class="subhead1"><a id="CAXML6148"></a>Syntax</p>
<pre>xmlerr XmlAccess(
   xmlctx *xctx, 
   xmlurlacc access, 
   void *userctx,
   XML_ACCESS_OPEN_F(
      (*openf),
      ctx,
      uri,
      parts,
      length,
      uh),
   XML_ACCESS_READ_F(
      (*readf),
      ctx,
      uh,
      data,
      nraw,
      eoi),
   XML_ACCESS_CLOSE_F(
      (*closef), 
      ctx,
      uh));
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t4">Parameter</th>
<th class="cellalignment2921" id="r1c2-t4">In/Out</th>
<th class="cellalignment2921" id="r1c3-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t4" headers="r1c1-t4">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t4 r1c2-t4">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t4 r1c3-t4">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t4" headers="r1c1-t4">
<pre>access
</pre></td>
<td class="cellalignment2922" headers="r3c1-t4 r1c2-t4">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t4 r1c3-t4">URL access method</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t4" headers="r1c1-t4">
<pre>userctx
</pre></td>
<td class="cellalignment2922" headers="r4c1-t4 r1c2-t4">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t4 r1c3-t4">user-defined context passed to callbacks</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t4" headers="r1c1-t4">
<pre>openf
</pre></td>
<td class="cellalignment2922" headers="r5c1-t4 r1c2-t4">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t4 r1c3-t4">open-access callback function</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r6c1-t4" headers="r1c1-t4">
<pre>readf
</pre></td>
<td class="cellalignment2922" headers="r6c1-t4 r1c2-t4">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r6c1-t4 r1c3-t4">read-access callback function</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r7c1-t4" headers="r1c1-t4">
<pre>closef
</pre></td>
<td class="cellalignment2922" headers="r7c1-t4 r1c2-t4">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r7c1-t4 r1c3-t4">close-access callback function</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6149"></a>Returns</p>
<p><code>(xmlerr)</code> numeric error code, XMLERR_OK [0] on success</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmlloaddom">XmlLoadDom()</a>, <a href="#Xmlloadsax">XmlLoadSax()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML6150" class="refsect2"><a id="Xmlcreate"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1041"></a><a id="sthref1042"></a><a id="sthref1043"></a>XmlCreate()</h3>
<p>Create an XML Developer&#39;s Toolkit <code>xmlctx</code>.</p>
<p class="subhead1"><a id="CAXML6151"></a>Syntax</p>
<pre>xmlctx *XmlCreate(
   xmlerr *err, 
   oratext *name,
   <span class="italic">list</span>);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t6">Parameter</th>
<th class="cellalignment2921" id="r1c2-t6">In/Out</th>
<th class="cellalignment2921" id="r1c3-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t6" headers="r1c1-t6">
<pre>err
</pre></td>
<td class="cellalignment2922" headers="r2c1-t6 r1c2-t6">
<pre>OUT
</pre></td>
<td class="cellalignment2922" headers="r2c1-t6 r1c3-t6">returned error code</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t6" headers="r1c1-t6">
<pre>access
</pre></td>
<td class="cellalignment2922" headers="r3c1-t6 r1c2-t6">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t6 r1c3-t6">name of context, for debugging</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t6" headers="r1c1-t6">
<pre><span class="italic">list</span>
</pre></td>
<td class="cellalignment2922" headers="r4c1-t6 r1c2-t6">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t6 r1c3-t6"><code>NULL</code>-terminated list of variable arguments. Properties common to all <code>xmlctx</code>&#39;s, both XDK and XMLType, are:
<ul>
<li>
<p><code>data_encoding</code> is the data encoding in which XML data will be presented through DOM and SAX. Default is UTF-8 and UTF-E on EBCDIC platforms. Single-byte encodings are substantially faster than multibyte encodings; Unicode (UTF-16) uses more memory but has better performance than multibyte. If the <code>data_encoding</code> parameter is set to UTF-16, the APIs process wide-<code>CHAR</code> arrays, not <code>oratext</code> byte arrays.</p>
</li>
<li>
<p><code>default_input_encoding</code> is the default input encoding). If the encoding of an input document cannot be automatically determined through other methods, this encoding will be the default.</p>
</li>
<li>
<p><code>error_language</code> is the language (and optional encoding) in which error messages are created. Default is American with UTF-8 encoding. To specify only the language, give the name of the language (&#34;American&#34;). To also specify the encoding, add the period and the Oracle name of the encoding (&#34;American.WE8ISO8859P1&#34;).</p>
</li>
<li>
<p><code>error_handler</code> is the function pointer; see <code>XML_ERRMSG_F</code>. By default, errors output the formatted message to <code>stderr</code>. If an error handler is provided, message will be passed to it, and not printed.</p>
</li>
<li>
<p><code>error_context</code> is user-defined context for error handler, a context pointer to be passed to the error handler function. It is user-defined; it is just specified here and passed along when an error occurs.</p>
</li>
<li>
<p><code>input_encoding</code> is the name of a forced input encoding for input documents. Use it to override a document&#39;s <code>XMLDecl</code>, and always interpret it in the given encoding. It should be not necessary in normal use, as existing BOMs and <code>XMLDecl</code>s should be correct.</p>
</li>
<li>
<p><code>memory_allo</code>c is a low-level memory allocation function, if not using <code>malloc</code>. If used, the matching free function must also be given. See <code>XML_ALLOC_F</code>.</p>
</li>
<li>
<p><code>memory_free</code> is a low-level memory freeing function, if not using <code>free</code>. Matches the <code>memory_alloc</code> function.</p>
</li>
<li>
<p><code>memory_context</code> is a user-defined memory context passed to the alloc and free functions. Its definition and use is entirely up to the user; it is just set here and passed to the callbacks.</p>
</li>
</ul>
<p>The XDK has additional properties:</p>
<ul>
<li>
<p><code>input_buffer_size</code> is the basic I/O buffer size. Default is 256K; the range is 4K to 4MB. Depending on the encoding, 1, 2 or 3 of these buffers may be needed. Note that size is in characters, not bytes. If the buffer holds Unicode data, it will be twice as large.</p>
</li>
<li>
<p><code>memory_block_size</code> is the size of chunk the high-level memory package will request from the low-level allocator; it is the basic unit of memory allocation. Default is 64K; the range is 16K to 256K.</p>
</li>
</ul>
<p>These optional parameters should be used in the following manner:</p>
<pre>xmlctx *XmlCreate(
   xmlerr *err, 
   oratext *name,
   (&#34;data_encoding&#34;, <span class="italic">dataEncoding</span>),
   (&#34;default_data_encoding&#34;, <span class="italic">defaultDataEncoding</span>),
   (&#34;error_language&#34;, <span class="italic">errorLanguage</span>),
   (&#34;error_handler&#34;, <span class="italic">errorHandler</span>),
   (&#34;error_context&#34;, <span class="italic">errorContext</span>)
   (&#34;input_encoding&#34;, <span class="italic">inputEncoding</span>),
   (&#34;memory_alloc&#34;, <span class="italic">memAlloc</span>),
   (&#34;memory_free&#34;, <span class="italic">memFree</span>),
   (&#34;memory_context&#34;, <span class="italic">memContext</span>),
   (&#34;input_buffer_seize&#34;, <span class="italic">inputBufSize</span>),
   (&#34;memory_block_size&#34;, <span class="italic">memBlockSize</span>) );
</pre></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6152"></a>Returns</p>
<p><code>(xmlctx *)</code> created xmlctx [or <code>NULL</code> on error with err set]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldestroy">XmlDestroy()</a>, <a href="callback.htm#CHDHFDDJ">XML_ERRMSG_F()</a> in <a href="callback.htm#Callbackpackage">Chapter 2, &#34;Package Callback APIs for C&#34;</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML6153" class="refsect2"><a id="Xmlcreatedtd"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1044"></a><a id="sthref1045"></a><a id="sthref1046"></a>XmlCreateDTD()</h3>
<p>Create DTD.</p>
<p class="subhead1"><a id="CAXML6154"></a>Syntax</p>
<pre>xmldocnode* XmlCreateDTD(
   xmlctx *xctx
   oratext *qname,
   oratext *pubid,
   oratext *sysid,
   xmlerr *err);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t8">Parameter</th>
<th class="cellalignment2921" id="r1c2-t8">In/Out</th>
<th class="cellalignment2921" id="r1c3-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t8" headers="r1c1-t8">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t8 r1c2-t8">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t8 r1c3-t8">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t8" headers="r1c1-t8">
<pre>qname
</pre></td>
<td class="cellalignment2922" headers="r3c1-t8 r1c2-t8">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t8 r1c3-t8">qualified name</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t8" headers="r1c1-t8">
<pre>pubid
</pre></td>
<td class="cellalignment2922" headers="r4c1-t8 r1c2-t8">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t8 r1c3-t8">external subset public identifier</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t8" headers="r1c1-t8">
<pre>sysid
</pre></td>
<td class="cellalignment2922" headers="r5c1-t8 r1c2-t8">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t8 r1c3-t8">external subset system identifier</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r6c1-t8" headers="r1c1-t8">
<pre>err
</pre></td>
<td class="cellalignment2922" headers="r6c1-t8 r1c2-t8">
<pre>OUT
</pre></td>
<td class="cellalignment2922" headers="r6c1-t8 r1c3-t8">returned error code</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6155"></a>Returns</p>
<p><code>(xmldtdnode *)</code> new DTD node</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML6156" class="refsect2"><a id="Xmlcreatedocument"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1047"></a><a id="sthref1048"></a><a id="sthref1049"></a>XmlCreateDocument()</h3>
<p>Creates the initial top-level <code>DOCUMENT</code> node and its supporting infrastructure. If a qualified name is provided, a an element with that name is created and set as the document&#39;s root element.</p>
<p class="subhead1"><a id="CAXML6157"></a>Syntax</p>
<pre>xmldocnode* XmlCreateDocument(
   xmlctx *xctx,
   oratext *uri,
   oratext *qname, 
   xmldtdnode *dtd,
   xmlerr *err);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t9">Parameter</th>
<th class="cellalignment2921" id="r1c2-t9">In/Out</th>
<th class="cellalignment2921" id="r1c3-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t9" headers="r1c1-t9">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t9 r1c2-t9">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t9 r1c3-t9">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t9" headers="r1c1-t9">
<pre>uri
</pre></td>
<td class="cellalignment2922" headers="r3c1-t9 r1c2-t9">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t9 r1c3-t9">namespace URI of root element to create, or <code>NULL</code></td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t9" headers="r1c1-t9">
<pre>qname
</pre></td>
<td class="cellalignment2922" headers="r4c1-t9 r1c2-t9">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t9 r1c3-t9">qualified name of root element, or <code>NULL</code> if none</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t9" headers="r1c1-t9">
<pre>dtd
</pre></td>
<td class="cellalignment2922" headers="r5c1-t9 r1c2-t9">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t9 r1c3-t9">associated DTD node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r6c1-t9" headers="r1c1-t9">
<pre>err
</pre></td>
<td class="cellalignment2922" headers="r6c1-t9 r1c2-t9">
<pre>OUT
</pre></td>
<td class="cellalignment2922" headers="r6c1-t9 r1c3-t9">returned error code</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6158"></a>Returns</p>
<p><code>(xmldocnode *)</code> new <code>Document</code> object.</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML6159" class="refsect2"><a id="Xmldestroy"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1050"></a><a id="sthref1051"></a><a id="sthref1052"></a>XmlDestroy()</h3>
<p>Destroys an XML context.</p>
<p class="subhead1"><a id="CAXML6160"></a>Syntax</p>
<pre>void XmlDestroy(
   xmlctx *xctx);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t10">Parameter</th>
<th class="cellalignment2921" id="r1c2-t10">In/Out</th>
<th class="cellalignment2921" id="r1c3-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t10" headers="r1c1-t10">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t10 r1c2-t10">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t10 r1c3-t10">XML context</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmlcreate">XmlCreate()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML6161" class="refsect2"><a id="BEIJABJH"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1053"></a><a id="sthref1054"></a><a id="sthref1055"></a>XmlDiff()</h3>
<p>Compares two XML documents, specified either as DOM Trees, files, URIs, <code>orastream</code>s, and so on, and returns its document node. If input documents are not supplied as DOM trees, DOM trees will be created for them.</p>
<p>If the inputs are DOMs, that memory will not be freed when the call completes.</p>
<p>Data(DOM) encoding of both the documents must be the same as the data encoding in the XML context. The DOM for the diff will be created in the data encoding specified by the XML context.</p>
<p class="subhead1"><a id="CAXML6162"></a>Syntax</p>
<pre>xmldocnode *XmlDiff(
   xmlctx *xctx, 
   xmlerr *err,
   ub4  flags,
   xmldfsrct firstSourceType,
   void *firstSource,
   void *firstSourceExtra,
   xmldfsrct secondSourceType,
   void *secondSource,
   void *secondSourceExtra,
   uword hashLevel);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t12">Parameter</th>
<th class="cellalignment2921" id="r1c2-t12">In/Out</th>
<th class="cellalignment2921" id="r1c3-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t12" headers="r1c1-t12">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t12 r1c2-t12">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t12 r1c3-t12">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t12" headers="r1c1-t12">
<pre>err
</pre></td>
<td class="cellalignment2922" headers="r3c1-t12 r1c2-t12">
<pre>OUT
</pre></td>
<td class="cellalignment2922" headers="r3c1-t12 r1c3-t12">numeric error code, <code>XMLERR_OK [0]</code> on success</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t12" headers="r1c1-t12">
<pre>flags
</pre></td>
<td class="cellalignment2922" headers="r4c1-t12 r1c2-t12">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t12 r1c3-t12">Comparison options. By default, global algorithm and snapshot model are used.
<ul>
<li>
<p><code>XMLDF_FL_DEFAULTS(=0)</code> chooses defaults</p>
</li>
<li>
<p><code>XMLDF_FL_ALGORITHM_GLOBAL</code> is the global algorithm; it will generate the minimal diff using <code>INSERT</code>, <code>APPEND</code>, <code>DELETE</code> and <code>UPDATE</code>, and needs more memory and time than XMLDF_FL_ALGORITHM_LOCAL</p>
</li>
<li>
<p><code>XMLDF_FL_ALGORITHM_LOCAL</code> is the local algorithm; it may not generate the minimal diff, but it is faster and uses less space than <code>XMLDF_FL_ALGORITHM_GLOBAL</code></p>
</li>
<li>
<p><code>XMLDF_FL_DISABLE_UPDATE</code> disables update operations with global algorithms</p>
</li>
<li>
<p><code>XMLDF_FL_OUTPUT_SNAPSHOT</code> uses the snapshot model</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t12" headers="r1c1-t12">
<pre>firstSourceType
</pre></td>
<td class="cellalignment2922" headers="r5c1-t12 r1c2-t12">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t12 r1c3-t12">Source type for the first document. If <code>0</code>, assumed to be a DOM document node.</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r6c1-t12" headers="r1c1-t12">
<pre>firstSource
</pre></td>
<td class="cellalignment2922" headers="r6c1-t12 r1c2-t12">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r6c1-t12 r1c3-t12">Pointer to the first document source</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r7c1-t12" headers="r1c1-t12">
<pre>firstSourceExtra
</pre></td>
<td class="cellalignment2922" headers="r7c1-t12 r1c2-t12">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r7c1-t12 r1c3-t12">An additional pointer to the first document source; used for the buffer length pointer.</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r8c1-t12" headers="r1c1-t12">
<pre>secondSourceType
</pre></td>
<td class="cellalignment2922" headers="r8c1-t12 r1c2-t12">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r8c1-t12 r1c3-t12">Source type for the second document. If <code>0</code>, assumed to be a DOM document node.</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r9c1-t12" headers="r1c1-t12">
<pre>secondSource
</pre></td>
<td class="cellalignment2922" headers="r9c1-t12 r1c2-t12">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r9c1-t12 r1c3-t12">Pointer to the second document source</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r10c1-t12" headers="r1c1-t12">
<pre>secondSourceExtra
</pre></td>
<td class="cellalignment2922" headers="r10c1-t12 r1c2-t12">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r10c1-t12 r1c3-t12">An additional pointer to the second document source; used for the buffer length pointer.</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r11c1-t12" headers="r1c1-t12">
<pre>hashLevel
</pre></td>
<td class="cellalignment2922" headers="r11c1-t12 r1c2-t12">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r11c1-t12 r1c3-t12"><code>1</code>-based depth (counting from the root), where hashing should be used for subtrees. Values less than or equal to 1 indicate no hashing. This value must be specified programmatically.
<p>The hash value for every element node is associated with the entire subtree rooted at that node. During the computation of the diff, there is no further drilling down into the tree beyond hash level depth.</p>
<ul>
<li>
<p>If hashing is used with <code>XMLDF_FL_ALGORITHM_GLOBAL</code>, it will speed up diff computation significantly, but may reduce the quality of the diff.</p>
</li>
<li>
<p>With <code>XMLDF_FL_ALGORITHM_LOCAL</code>, it improves the quality of the diff</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="CAXML6163" class="refsect2"><a id="Xmlfreedocument"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1056"></a><a id="sthref1057"></a><a id="sthref1058"></a>XmlFreeDocument()</h3>
<p>Destroys a document created by <code>XmlCreateDocument</code> or through one of the Load functions. Releases all resources associated with the document, which is then invalid.</p>
<p class="subhead1"><a id="CAXML6164"></a>Syntax</p>
<pre>void XmlFreeDocument(
   xmlctx *xctx,
   xmldocnode *doc);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t13">Parameter</th>
<th class="cellalignment2921" id="r1c2-t13">In/Out</th>
<th class="cellalignment2921" id="r1c3-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t13" headers="r1c1-t13">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t13 r1c2-t13">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t13 r1c3-t13">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t13" headers="r1c1-t13">
<pre>doc
</pre></td>
<td class="cellalignment2922" headers="r3c1-t13 r1c2-t13">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t13 r1c3-t13">document to free</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmlcreatedocument">XmlCreateDocument()</a>, <a href="#Xmlloaddom">XmlLoadDom()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML6165" class="refsect2"><a id="Xmlgetencoding"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1059"></a><a id="sthref1060"></a><a id="sthref1061"></a>XmlGetEncoding()</h3>
<p>Returns data encoding in use by XML context. Ordinarily, the data encoding is chosen by the user, so this function is not needed. However, if the data encoding is not specified, and allowed to default, this function can be used to return the name of that default encoding.</p>
<p class="subhead1"><a id="CAXML6166"></a>Syntax</p>
<pre>oratext *XmlGetEncoding(
   xmlctx *xctx);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t15">Parameter</th>
<th class="cellalignment2921" id="r1c2-t15">In/Out</th>
<th class="cellalignment2921" id="r1c3-t15">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t15" headers="r1c1-t15">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t15 r1c2-t15">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t15 r1c3-t15">XML context</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6167"></a>Returns</p>
<p><code>(oratext *)</code> name of data encoding</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmlissimple">XmlIsSimple()</a>, <a href="#Xmlisunicode">XmlIsUnicode()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML6168" class="refsect2"><a id="Xmlhasfeature"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1062"></a><a id="sthref1063"></a><a id="sthref1064"></a>XmlHasFeature()</h3>
<p>Determine if a DOM feature is implemented. Returns <code>TRUE</code> if the feature is implemented in the specified version, <code>FALSE</code> otherwise.</p>
<p>In level 1, the legal values for package are &#39;HTML&#39; and &#39;XML&#39; (case-insensitive), and the version is the string &#34;1.0&#34;. If the version is not specified, supporting any version of the feature will cause the method to return <code>TRUE</code>.</p>
<ul>
<li>
<p>DOM 1.0 features are &#34;XML&#34; and &#34;HTML&#34;.</p>
</li>
<li>
<p>DOM 2.0 features are &#34;Core&#34;, &#34;XML&#34;, &#34;HTML&#34;, &#34;Views&#34;, &#34;StyleSheets&#34;, &#34;CSS&#34;, &#34;CSS2&#34;, &#34;Events&#34;, &#34;UIEvents&#34;, &#34;MouseEvents&#34;, &#34;MutationEvents&#34;, &#34;HTMLEvents&#34;, &#34;Range&#34;, &#34;Traversal&#34;</p>
</li>
</ul>
<p class="subhead1"><a id="CAXML6169"></a>Syntax</p>
<pre>boolean XmlHasFeature(
   xmlctx *xctx,
   oratext *feature,
   oratext *version);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t17">Parameter</th>
<th class="cellalignment2921" id="r1c2-t17">In/Out</th>
<th class="cellalignment2921" id="r1c3-t17">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t17" headers="r1c1-t17">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t17 r1c2-t17">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t17 r1c3-t17">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t17" headers="r1c1-t17">
<pre>feature
</pre></td>
<td class="cellalignment2922" headers="r3c1-t17 r1c2-t17">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t17 r1c3-t17">package name of the feature to test</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t17" headers="r1c1-t17">
<pre>version
</pre></td>
<td class="cellalignment2922" headers="r4c1-t17 r1c2-t17">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t17 r1c3-t17">version number of the package name to test</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6170"></a>Returns</p>
<p><code>(boolean)</code> feature is implemented?</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML6171" class="refsect2"><a id="Xmlissimple"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1065"></a><a id="sthref1066"></a><a id="sthref1067"></a>XmlIsSimple()</h3>
<p>Returns a flag saying whether the context&#39;s data encoding is &#34;simple&#34;, single-byte for each character, like ASCII or EBCDIC.</p>
<p class="subhead1"><a id="CAXML6172"></a>Syntax</p>
<pre>boolean XmlIsSimple(
   xmlctx *xctx);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t18">Parameter</th>
<th class="cellalignment2921" id="r1c2-t18">In/Out</th>
<th class="cellalignment2921" id="r1c3-t18">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t18" headers="r1c1-t18">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t18 r1c2-t18">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t18 r1c3-t18">XML context</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6173"></a>Returns</p>
<p><code>(boolean)</code> <code>TRUE</code> of data encoding is &#34;simple&#34;, <code>FALSE</code> otherwise</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmlgetencoding">XmlGetEncoding()</a>, <a href="#Xmlisunicode">XmlIsUnicode()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML6174" class="refsect2"><a id="Xmlisunicode"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1068"></a><a id="sthref1069"></a><a id="sthref1070"></a>XmlIsUnicode()</h3>
<p>Returns a flag saying whether the context&#39;s data encoding is Unicode, UTF-16, with two-byte for each character.</p>
<p class="subhead1"><a id="CAXML6175"></a>Syntax</p>
<pre>boolean XmlIsUnicode(
   xmlctx *xctx);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t20">Parameter</th>
<th class="cellalignment2921" id="r1c2-t20">In/Out</th>
<th class="cellalignment2921" id="r1c3-t20">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t20" headers="r1c1-t20">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t20 r1c2-t20">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t20 r1c3-t20">XML context</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6176"></a>Returns</p>
<p><code>(boolean)</code> <code>TRUE</code> of data encoding is Unicode, <code>FALSE</code> otherwise</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmlgetencoding">XmlGetEncoding()</a>, <a href="#Xmlissimple">XmlIsSimple()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML6177" class="refsect2"><a id="Xmlloaddom"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1071"></a><a id="sthref1072"></a><a id="sthref1073"></a>XmlLoadDom()</h3>
<p>Loads (parses) an XML document from an input source and creates a DOM. The root document node is returned on success, or <code>NULL</code> on failure (with err set).</p>
<p>The function takes two fixed arguments, the xmlctx and an error return code, then zero or more (property, value) pairs, then <code>NULL</code>.</p>
<p><code>SOURCE</code> Input source is set by one of the following mutually exclusive properties (choose one):</p>
<ul>
<li>
<p>(&#34;<code>uri</code>&#34;, document URI) [compiler encoding]</p>
</li>
<li>
<p>(&#34;<code>file</code>&#34;, document filesystem path) [compiler encoding]</p>
</li>
<li>
<p>(&#34;<code>buffer</code>&#34;, address of buffer, &#34;<code>buffer_length</code>&#34;, # bytes in buffer)</p>
</li>
<li>
<p>(&#34;<code>stream</code>&#34;, address of stream object, &#34;<code>stream_context&#34;</code>, pointer to stream object&#39;s context)</p>
</li>
<li>
<p>(&#34;<code>stdio</code>&#34;, <code>FILE*</code> stream)</p>
</li>
</ul>
<p><code>PROPERTIES</code> Additional properties:</p>
<ul>
<li>
<p>(&#34;<code>dtd</code>&#34;, DTD node) DTD for document</p>
</li>
<li>
<p>(&#34;<code>base_uri</code>&#34;, document base URI) for documents loaded from other sources than a URI, sets the effective base URI. the document&#39;s base URI is needed in order to resolve relative URI include, import, and so on.</p>
</li>
<li>
<p>(&#34;<code>input_encoding</code>&#34;, encoding name) forced input encoding [name]</p>
</li>
<li>
<p>(&#34;<code>default_input_encoding</code>&#34;, <code>encoding_name</code>) default input encoding to assume if document is not self-describing (no BOM, protocol header, <code>XMLDecl</code>, and so on)</p>
</li>
<li>
<p>(&#34;<code>schema_location</code>&#34;, <code>string</code>) <code>schemaLocation</code> of schema for this document. used to figure optimal layout when loading documents into a database</p>
</li>
<li>
<p>(&#34;<code>validate</code>&#34;, boolean) when <code>TRUE</code>, turns on DTD validation; by default, only well-formedness is checked. note that schema validation is a separate beast.</p>
</li>
<li>
<p>(&#34;<code>discard_whitespace</code>&#34;, boolean) when <code>TRUE</code>, formatting whitespace between elements (newlines and indentation) in input documents is discarded. by default, ALL input characters are preserved.</p>
</li>
<li>
<p>(&#34;<code>dtd_only</code>&#34;, boolean) when <code>TRUE</code>, parses an external DTD, not a complete XML document.</p>
</li>
<li>
<p>(&#34;<code>stop_on_warning</code>&#34;, boolean) when <code>TRUE</code>, warnings are treated the same as errors and cause parsing, validation, and so on, to stop immediately. by default, warnings are issued but the game continues.</p>
</li>
<li>
<p>(&#34;<code>warn_duplicate_entity</code>&#34;, boolean) when <code>TRUE</code>, entities which are declared more than once will cause warnings to be issued. the default is to accept the first declaration and silently ignore the rest.</p>
</li>
<li>
<p>(&#34;<code>no_expand_char_ref</code>&#34;, boolean) when <code>TRUE</code>, causes character references to be left unexpanded in the DOM data. ordinarily, character references are replaced by the character they represent. however, when a document is saved those characters entities do not reappear. to way to ensure they remain through load and save is to not expand them.</p>
</li>
<li>
<p>(&#34;<code>no_check_chars</code>&#34;, boolean) when <code>TRUE</code>, omits the test of XML [2] Char production: all input characters will be accepted as valid</p>
</li>
</ul>
<p class="subhead1"><a id="CAXML6178"></a>Syntax</p>
<pre>xmldocnode *XmlLoadDom(
   xmlctx *xctx, 
   xmlerr *err, 
   <span class="italic">list</span>);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t22">Parameter</th>
<th class="cellalignment2921" id="r1c2-t22">In/Out</th>
<th class="cellalignment2921" id="r1c3-t22">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t22" headers="r1c1-t22">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t22 r1c2-t22">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t22 r1c3-t22">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t22" headers="r1c1-t22">
<pre>err
</pre></td>
<td class="cellalignment2922" headers="r3c1-t22 r1c2-t22">
<pre>OUT
</pre></td>
<td class="cellalignment2922" headers="r3c1-t22 r1c3-t22">returned error code</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t22" headers="r1c1-t22">
<pre><span class="italic">list</span>
</pre></td>
<td class="cellalignment2922" headers="r4c1-t22 r1c2-t22">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t22 r1c3-t22"><code>NULL</code>-terminated list of variable arguments</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6179"></a>Returns</p>
<p><code>(xmldocnode *)</code> document node on success [<code>NULL</code> on failure with err set]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmlsavedom">XmlSaveDom()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML6180" class="refsect2"><a id="Xmlloadsax"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1074"></a><a id="sthref1075"></a><a id="sthref1076"></a>XmlLoadSax()</h3>
<p>Loads (parses) an XML document from an input source and generates a set of SAX events (as user callbacks). Input sources and basic set of properties is the same as for <code>XmlLoadDom</code>.</p>
<p class="subhead1"><a id="CAXML6181"></a>Syntax</p>
<pre>xmlerr XmlLoadSax(
   xmlctx *xctx,
   xmlsaxcb *saxcb,
   void *saxctx, 
   <span class="italic">list</span>);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t24">Parameter</th>
<th class="cellalignment2921" id="r1c2-t24">In/Out</th>
<th class="cellalignment2921" id="r1c3-t24">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t24" headers="r1c1-t24">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t24 r1c2-t24">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t24 r1c3-t24">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t24" headers="r1c1-t24">
<pre>saxcb
</pre></td>
<td class="cellalignment2922" headers="r3c1-t24 r1c2-t24">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t24 r1c3-t24">SAX callback structure</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t24" headers="r1c1-t24">
<pre>saxctx
</pre></td>
<td class="cellalignment2922" headers="r4c1-t24 r1c2-t24">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t24 r1c3-t24">context passed to SAX callbacks</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t24" headers="r1c1-t24">
<pre><span class="italic">list</span>
</pre></td>
<td class="cellalignment2922" headers="r5c1-t24 r1c2-t24">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t24 r1c3-t24"><code>NULL</code>-terminated list of variable arguments</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6182"></a>Returns</p>
<p><code>(xmlerr)</code> numeric error code, <code>XMLERR_OK [0]</code> on success</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML6183" class="refsect2"><a id="Xmlloadsaxva"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1077"></a><a id="sthref1078"></a><a id="sthref1079"></a>XmlLoadSaxVA()</h3>
<p>Loads (parses) an XML document from an input source and generates a set of SAX events (as user callbacks). Input sources and basic set of properties is the same as for <code>XmlLoadDom</code>.</p>
<p class="subhead1"><a id="CAXML6184"></a>Syntax</p>
<pre>xmlerr XmlLoadSaxVA(
   xmlctx *xctx, 
   xmlsaxcb *saxcb, 
   void *saxctx, 
   va_list va);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t25">Parameter</th>
<th class="cellalignment2921" id="r1c2-t25">In/Out</th>
<th class="cellalignment2921" id="r1c3-t25">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t25" headers="r1c1-t25">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t25 r1c2-t25">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t25 r1c3-t25">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t25" headers="r1c1-t25">
<pre>saxcb
</pre></td>
<td class="cellalignment2922" headers="r3c1-t25 r1c2-t25">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t25 r1c3-t25">SAX callback structure</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t25" headers="r1c1-t25">
<pre>saxctx
</pre></td>
<td class="cellalignment2922" headers="r4c1-t25 r1c2-t25">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t25 r1c3-t25">context passed to SAX callbacks</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t25" headers="r1c1-t25">
<pre>va
</pre></td>
<td class="cellalignment2922" headers="r5c1-t25 r1c2-t25">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t25 r1c3-t25"><code>NULL</code>-terminated list of variable arguments</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6185"></a>Returns</p>
<p><code>(xmlerr)</code> numeric error code, XMLERR_OK [0] on success</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML6186" class="refsect2"><a id="Xmlsavedom"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1080"></a><a id="sthref1081"></a><a id="sthref1082"></a>XmlSaveDom()</h3>
<p>Serializes document or subtree to the given destination and returns the number of bytes written; if no destination is provided, just returns formatted size but does not output.</p>
<p>If an output encoding is specified, the document will be re-encoded on output; otherwise, it will be in its existing encoding.</p>
<p>The top level is indented step*level spaces, the next level step*(level+1) spaces, and so on.</p>
<p>When saving to a buffer, if the buffer overflows, <code>0</code> is returned and err is set to <code>XMLERR_SAVE_OVERFLOW</code>.</p>
<p><code>DESTINATION</code> Output destination is set by one of the following mutually exclusive properties (choose one):</p>
<ul>
<li>
<p>(&#34;<code>ur</code>i&#34;, document URI) <code>POST</code>, <code>PUT</code>? [compiler encoding]</p>
</li>
<li>
<p>(&#34;file&#34;, document filesystem path) [compiler encoding]</p>
</li>
<li>
<p>(&#34;<code>buffer</code>&#34;, address of buffer, &#34;b<code>uffer_length</code>&#34;, # bytes in buffer)</p>
</li>
<li>
<p>(&#34;<code>stream</code>&#34;, address of stream object, &#34;<code>stream_context</code>&#34;, pointer to stream object&#39;s context)</p>
</li>
</ul>
<p>PROPERTIES Additional properties:</p>
<ul>
<li>
<p>(&#34;<code>output_encoding</code>&#34;, encoding name) name of final encoding for document. unless specified, saved document will be in same encoding as xmlctx.</p>
</li>
<li>
<p>(&#34;<code>indent_step</code>&#34;, unsigned) spaces to indent each level of output. default is <code>4</code>, <code>0</code> means no indentation.</p>
</li>
<li>
<p>(&#34;<code>indent_level</code>&#34;, unsigned) initial indentation level. default is <code>0</code>, which means no indentation, flush left.</p>
</li>
<li>
<p>(&#34;<code>xmldecl&#34;</code>, boolean) include an <code>XMLDecl</code> in the output document. ordinarily an X<code>MLDecl</code> is output for a compete document (root node is DOC).</p>
</li>
<li>
<p>(&#34;<code>bom</code>&#34;, boolean) input a BOM in the output document. usually the BOM is only needed for certain encodings (UTF-16), and optional for others (UTF-8). causes optional BOMs to be output.</p>
</li>
<li>
<p>(&#34;<code>prune</code>&#34;, boolean) prunes the output like the unix &#39;find&#39; command; does not not descend to children, just prints the one node given.</p>
</li>
</ul>
<p class="subhead1"><a id="CAXML6187"></a>Syntax</p>
<pre>ubig_ora XmlSaveDom(
   xmlctx *xctx,
   xmlerr *err,
   xmlnode *root,
   <span class="italic">list</span>);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t26">Parameter</th>
<th class="cellalignment2921" id="r1c2-t26">In/Out</th>
<th class="cellalignment2921" id="r1c3-t26">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t26" headers="r1c1-t26">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t26 r1c2-t26">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t26 r1c3-t26">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t26" headers="r1c1-t26">
<pre>err
</pre></td>
<td class="cellalignment2922" headers="r3c1-t26 r1c2-t26">
<pre>OUT
</pre></td>
<td class="cellalignment2922" headers="r3c1-t26 r1c3-t26">error code on failure</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t26" headers="r1c1-t26">
<pre>root
</pre></td>
<td class="cellalignment2922" headers="r4c1-t26 r1c2-t26">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t26 r1c3-t26">root node or subtree to save</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t26" headers="r1c1-t26">
<pre><span class="italic">list</span>
</pre></td>
<td class="cellalignment2922" headers="r5c1-t26 r1c2-t26">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t26 r1c3-t26"><code>NULL</code>-terminated list of variable arguments</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6188"></a>Returns</p>
<p><code>(ubig_ora)</code> number of bytes written to destination</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmlloaddom">XmlLoadDom()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML6189" class="refsect2"><a id="Xmlversion"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1083"></a><a id="sthref1084"></a><a id="sthref1085"></a>XmlVersion()</h3>
<p>Returns the version string for the XDK</p>
<p class="subhead1"><a id="CAXML6190"></a>Syntax</p>
<pre>oratext *XmlVersion();
</pre>
<p class="subhead1"><a id="CAXML6191"></a>Returns</p>
<p><code>(oratext *)</code> version string</p>
</div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2913">
<tr>
<td class="cellalignment2922">
<table class="cellalignment2918">
<tr>
<td class="cellalignment2917"><a href="traversal.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2917"><a href="xmldiff.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2925">
<table class="cellalignment2916">
<tr>
<td class="cellalignment2917"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2917"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2917"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2917"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2917"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2917"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>