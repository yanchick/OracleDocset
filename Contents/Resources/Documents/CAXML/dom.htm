<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-2692"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Package%20DOM%20APIs%20for%20C"></a><title>Package DOM APIs for C</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 726"/>
<meta name="dcterms.created" content="2013-04-05T15:50:5Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database XML C API Reference"/>
<meta name="dcterms.identifier" content="E15885-04"/>
<meta name="dcterms.isVersionOf" content="CAXML"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="callback.htm" title="Previous" type="text/html"/>
<link rel="Next" href="event.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E15885-04.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">7/22</span> <!-- End Header -->
<div id="CAXML00300" class="chapter"><a id="Dompackage"></a>
<h1 class="chapter"><span class="secnum">3</span> <a id="sthref45"></a> <a id="sthref46"></a> <a id="sthref47"></a> Package DOM APIs for C</h1>
<p>This implementation follows REC-DOM-Level-1-19981001. Because the DOM standard is object-oriented, some changes were made for C language adaptation.</p>
<ul>
<li>
<p>Reused function names have to be expanded; <code>getValue</code> in the <code>Attr</code> interface has the unique name <code>XmlDomGetAttrValue</code> that matches the pattern established by DOM 2&#39;s <code>getNodeValue</code>.</p>
</li>
<li>
<p>Functions were added to extend the DOM beyond the standard; one example is <code>XmlDomNumChildNodes</code>, which returns the number of children of a node.</p>
</li>
</ul>
<p>Note that if the <code>data_encoding</code> parameter is set to UTF-16, the APIs process wide-<code>CHAR</code> arrays, not <code>oratext</code> byte arrays.</p>
<p>This chapter contains the following sections:</p>
<ul>
<li>
<p><a href="#BABFBHBG">Attr Interface</a></p>
</li>
<li>
<p><a href="#BABIFFAD">CharacterData Interface</a></p>
</li>
<li>
<p><a href="#BABFHDGJ">Document Interface</a></p>
</li>
<li>
<p><a href="#BABEABHC">DocumentType Interface</a></p>
</li>
<li>
<p><a href="#BABEGHIC">Element Interface</a></p>
</li>
<li>
<p><a href="#BABCJHFF">Entity Interface</a></p>
</li>
<li>
<p><a href="#BABDEJBF">NamedNodeMap Interface</a></p>
</li>
<li>
<p><a href="#BABDGBBG">Node Interface</a></p>
</li>
<li>
<p><a href="#BABDIHIA">NodeList Interface</a></p>
</li>
<li>
<p><a href="#BABDHEGH">Notation Interface</a></p>
</li>
<li>
<p><a href="#BABIEBEE">ProcessingInstruction Interface</a></p>
</li>
<li>
<p><a href="#BABHFJCC">Text Interface</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADXDK" href="../ADXDK/toc.htm"><span class="italic">Oracle XML Developer&#39;s Kit Programmer&#39;s Guide</span></a></p>
</li>
<li>
<p><a class="olink ADXDB" href="../ADXDB/toc.htm"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a></p>
</li>
</ul>
</div>
<div class="refentry"><a id="BABFBHBG"></a>
<hr/>
<div id="CAXML03001" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">Attr Interface</h2>
<p><a href="#BABBDFFD">Table 3-1</a> summarizes the methods available through the <code>Attr</code> interface.</p>
<div id="CAXML5137" class="tblformal">
<p class="titleintable"><a id="sthref48"></a><a id="BABBDFFD"></a>Table 3-1 Summary of Attr Methods; DOM Package</p>
<table class="cellalignment2920" title="Summary of Attr Methods; DOM Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t3">Function</th>
<th class="cellalignment2921" id="r1c2-t3">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t3" headers="r1c1-t3">
<p><a href="#Xmldomgetattrlocal">XmlDomGetAttrLocal()</a></p>
</td>
<td class="cellalignment2922" headers="r2c1-t3 r1c2-t3">
<p>Returns an attribute&#39;s namespace local name as <code>NULL</code>-terminated string.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t3" headers="r1c1-t3">
<p><a href="#Xmldomgetattrlocallen">XmlDomGetAttrLocalLen()</a></p>
</td>
<td class="cellalignment2922" headers="r3c1-t3 r1c2-t3">
<p>Returns an attribute&#39;s namespace local name as length-encoded string.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t3" headers="r1c1-t3">
<p><a href="#Xmldomgetattrname">XmlDomGetAttrName()</a></p>
</td>
<td class="cellalignment2922" headers="r4c1-t3 r1c2-t3">
<p>Return attribute&#39;s name as <code>NULL</code>-terminated string.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t3" headers="r1c1-t3">
<p><a href="#Xmldomgetattrnamelen">XmlDomGetAttrNameLen()</a></p>
</td>
<td class="cellalignment2922" headers="r5c1-t3 r1c2-t3">
<p>Return attribute&#39;s name as length-encoded string.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r6c1-t3" headers="r1c1-t3">
<p><a href="#Xmldomgetattrprefix">XmlDomGetAttrPrefix()</a></p>
</td>
<td class="cellalignment2922" headers="r6c1-t3 r1c2-t3">
<p>Returns an attribute&#39;s namespace prefix.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r7c1-t3" headers="r1c1-t3">
<p><a href="#Xmldomgetattrspecified">XmlDomGetAttrSpecified()</a></p>
</td>
<td class="cellalignment2922" headers="r7c1-t3 r1c2-t3">
<p>Return flag that indicates whether an attribute was explicitly created.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r8c1-t3" headers="r1c1-t3">
<p><a href="#Xmldomgetattruri">XmlDomGetAttrURI()</a></p>
</td>
<td class="cellalignment2922" headers="r8c1-t3 r1c2-t3">
<p>Returns an attribute&#39;s namespace URI as <code>NULL</code>-terminated string.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r9c1-t3" headers="r1c1-t3">
<p><a href="#Xmldomgetattrurilen">XmlDomGetAttrURILen()</a></p>
</td>
<td class="cellalignment2922" headers="r9c1-t3 r1c2-t3">
<p>Returns an attribute&#39;s namespace URI as length-encoded string.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r10c1-t3" headers="r1c1-t3">
<p><a href="#Xmldomgetattrvalue">XmlDomGetAttrValue()</a></p>
</td>
<td class="cellalignment2922" headers="r10c1-t3 r1c2-t3">
<p>Return attribute&#39;s value as <code>NULL</code>-terminated string.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r11c1-t3" headers="r1c1-t3">
<p><a href="#Xmldomgetattrvaluelen">XmlDomGetAttrValueLen()</a></p>
</td>
<td class="cellalignment2922" headers="r11c1-t3 r1c2-t3">
<p>Return attribute&#39;s value as length-encoded string.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r12c1-t3" headers="r1c1-t3">
<p><a href="#Xmldomgetattrvaluestream">XmlDomGetAttrValueStream()</a></p>
</td>
<td class="cellalignment2922" headers="r12c1-t3 r1c2-t3">
<p>Get attribute value stream-style,i.e.chunked.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r13c1-t3" headers="r1c1-t3">
<p><a href="#Xmldomgetownerelem">XmlDomGetOwnerElem()</a></p>
</td>
<td class="cellalignment2922" headers="r13c1-t3 r1c2-t3">
<p>Return an attribute&#39;s &#34;owning&#34; element.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r14c1-t3" headers="r1c1-t3">
<p><a href="#Xmldomsetattrvalue">XmlDomSetAttrValue()</a></p>
</td>
<td class="cellalignment2922" headers="r14c1-t3 r1c2-t3">
<p>Set an attribute&#39;s value.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r15c1-t3" headers="r1c1-t3">
<p><a href="#Xmldomsetattrvaluestream">XmlDomSetAttrValueStream()</a></p>
</td>
<td class="cellalignment2922" headers="r15c1-t3 r1c2-t3">
<p>Sets an attribute value stream style (chunked).</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CAXML5138" class="refsect2"><a id="Xmldomgetattrlocal"></a>
<hr/>
<h3 class="refsect2"><a id="sthref49"></a><a id="sthref50"></a><a id="sthref51"></a>XmlDomGetAttrLocal()</h3>
<p>Returns an attribute&#39;s namespace local name (in the data encoding). If the attribute&#39;s name is not fully qualified (has no prefix), then the local name is the same as the name.</p>
<p>A length-encoded version is available as <code>XmlDomGetAttrURILen</code> which returns the local name as a pointer and length, for use if the data is known to use <code>XMLType</code> backing store.</p>
<p class="subhead1"><a id="CAXML5139"></a>Syntax</p>
<pre>oratext* XmlDomGetAttrLocal(
   xmlctx *xctx, 
   xmlattrnode *attr);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t4">Parameter</th>
<th class="cellalignment2921" id="r1c2-t4">In/Out</th>
<th class="cellalignment2921" id="r1c3-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t4" headers="r1c1-t4">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t4 r1c2-t4">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t4 r1c3-t4">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t4" headers="r1c1-t4">
<pre>attr
</pre></td>
<td class="cellalignment2922" headers="r3c1-t4 r1c2-t4">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t4 r1c3-t4">attribute node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5140"></a>Returns</p>
<p><code>(oratext *)</code> attribute&#39;s local name [data encoding]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetattrlocallen">XmlDomGetAttrLocalLen()</a>, <a href="#Xmldomgetattrname">XmlDomGetAttrName()</a>, <a href="#Xmldomgetattruri">XmlDomGetAttrURI()</a>, <a href="#Xmldomgetattrprefix">XmlDomGetAttrPrefix()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5141" class="refsect2"><a id="Xmldomgetattrlocallen"></a>
<hr/>
<h3 class="refsect2"><a id="sthref52"></a><a id="sthref53"></a><a id="sthref54"></a>XmlDomGetAttrLocalLen()</h3>
<p>Returns an attribute&#39;s namespace local name (in the data encoding). If the attribute&#39;s name is not fully qualified (has no prefix), then the local name is the same as the name.</p>
<p>A <code>NULL</code>-terminated version is available as <code>XmlDomGetAttrLocal</code> which returns the local name as <code>NULL</code>-terminated string. If the backing store is known to be <code>XMLType</code>, then the attribute&#39;s data will be stored internally as length-encoded. Using the length-based <code>Get</code><code><span class="codeinlineitalic">XXX</span></code> functions will avoid having to copy and <code>NULL</code>-terminate the data.</p>
<p>If both the input buffer is non-<code>NULL</code> and the input buffer length is nonzero, then the value will be stored in the input buffer. Else, the implementation will return its own buffer.</p>
<p>If the actual length is greater than <code>buflen</code>, then a truncated value will be copied into the buffer and len will return the actual length.</p>
<p class="subhead1"><a id="CAXML5142"></a>Syntax</p>
<pre>oratext* XmlDomGetAttrLocalLen(
   xmlctx *xctx, 
   xmlattrnode *attr, 
   oratext *buf, 
   ub4 buflen, 
   ub4 *len);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t6">Parameter</th>
<th class="cellalignment2921" id="r1c2-t6">In/Out</th>
<th class="cellalignment2921" id="r1c3-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t6" headers="r1c1-t6">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t6 r1c2-t6">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t6 r1c3-t6">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t6" headers="r1c1-t6">
<pre>attr
</pre></td>
<td class="cellalignment2922" headers="r3c1-t6 r1c2-t6">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t6 r1c3-t6">attribute node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t6" headers="r1c1-t6">
<pre>buf
</pre></td>
<td class="cellalignment2922" headers="r4c1-t6 r1c2-t6">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t6 r1c3-t6">input buffer; optional</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t6" headers="r1c1-t6">
<pre>buflen
</pre></td>
<td class="cellalignment2922" headers="r5c1-t6 r1c2-t6">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t6 r1c3-t6">input buffer length; optional</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r6c1-t6" headers="r1c1-t6">
<pre>len
</pre></td>
<td class="cellalignment2922" headers="r6c1-t6 r1c2-t6">
<pre>OUT
</pre></td>
<td class="cellalignment2922" headers="r6c1-t6 r1c3-t6">length of local name, in characters</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5143"></a>Returns</p>
<p><code>(oratext *)</code> <code>Attr</code>&#39;s local name [data encoding]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetattrlocal">XmlDomGetAttrLocal()</a>, <a href="#Xmldomgetattrname">XmlDomGetAttrName()</a>, <a href="#Xmldomgetattruri">XmlDomGetAttrURI()</a>, <a href="#Xmldomgetattrprefix">XmlDomGetAttrPrefix()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5144" class="refsect2"><a id="Xmldomgetattrname"></a>
<hr/>
<h3 class="refsect2"><a id="sthref55"></a><a id="sthref56"></a><a id="sthref57"></a>XmlDomGetAttrName()</h3>
<p>Returns the fully-qualified name of an attribute (in the data encoding) as a <code>NULL</code>-terminated string, for example <code>bar\0</code> or <code>foo:bar\0</code>.</p>
<p>A length-encoded version is available as <code>XmlDomGetAttrNameLen</code> which returns the attribute name as a pointer and length, for use if the data is known to use <code>XMLType</code> backing store.</p>
<p class="subhead1"><a id="CAXML5145"></a>Syntax</p>
<pre>oratext* XmlDomGetAttrName(
   xmlctx *xctx, 
   xmlattrnode *attr);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t8">Parameter</th>
<th class="cellalignment2921" id="r1c2-t8">In/Out</th>
<th class="cellalignment2921" id="r1c3-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t8" headers="r1c1-t8">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t8 r1c2-t8">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t8 r1c3-t8">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t8" headers="r1c1-t8">
<pre>attr
</pre></td>
<td class="cellalignment2922" headers="r3c1-t8 r1c2-t8">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t8 r1c3-t8">attribute node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5146"></a>Returns</p>
<p><code>(oratext *)</code> name of attribute [data encoding]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetattrnamelen">XmlDomGetAttrNameLen()</a>, <a href="#Xmldomgetattruri">XmlDomGetAttrURI()</a>, <a href="#Xmldomgetattrprefix">XmlDomGetAttrPrefix()</a>, <a href="#Xmldomgetattrlocal">XmlDomGetAttrLocal()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5147" class="refsect2"><a id="Xmldomgetattrnamelen"></a>
<hr/>
<h3 class="refsect2"><a id="sthref58"></a><a id="sthref59"></a><a id="sthref60"></a>XmlDomGetAttrNameLen()</h3>
<p>Returns the fully-qualified name of an attribute (in the data encoding) as a length-encoded string, for example <code>(&#34;bar&#34;, 3)</code> or <code>(&#34;foo:bar&#34;, 7)</code>.</p>
<p>A <code>NULL</code>-terminated version is available as <code>XmlDomGetAttrName</code> which returns the attribute name as <code>NULL</code>-terminated string. If the backing store is known to be <code>XMLType</code>, then the attribute&#39;s data will be stored internally as length-encoded. Using the length-based <code>Get</code><code><span class="codeinlineitalic">XXX()</span></code> functions will avoid having to copy and <code>NULL</code>-terminate the data.</p>
<p>If both the input buffer is non-<code>NULL</code> and the input buffer length is nonzero, then the value will be stored in the input buffer. Else, the implementation will return its own buffer.</p>
<p>If the actual length is greater than <code>buflen</code>, then a truncated value will be copied into the buffer and <code>len</code> will return the actual length.</p>
<p class="subhead1"><a id="CAXML5148"></a>Syntax</p>
<pre>oratext* XmlDomGetAttrNameLen(
   xmlctx *xctx, 
   xmlattrnode *attr, 
   oratext *buf, 
   ub4 buflen, 
   ub4 *len);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t10">Parameter</th>
<th class="cellalignment2921" id="r1c2-t10">In/Out</th>
<th class="cellalignment2921" id="r1c3-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t10" headers="r1c1-t10">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t10 r1c2-t10">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t10 r1c3-t10">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t10" headers="r1c1-t10">
<pre>attr
</pre></td>
<td class="cellalignment2922" headers="r3c1-t10 r1c2-t10">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t10 r1c3-t10">attribute node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t10" headers="r1c1-t10">
<pre>buf
</pre></td>
<td class="cellalignment2922" headers="r4c1-t10 r1c2-t10">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t10 r1c3-t10">input buffer; optional</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t10" headers="r1c1-t10">
<pre>buflen
</pre></td>
<td class="cellalignment2922" headers="r5c1-t10 r1c2-t10">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t10 r1c3-t10">input buffer length; optional</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r6c1-t10" headers="r1c1-t10">
<pre>len
</pre></td>
<td class="cellalignment2922" headers="r6c1-t10 r1c2-t10">
<pre>OUT
</pre></td>
<td class="cellalignment2922" headers="r6c1-t10 r1c3-t10">length of local name, in characters</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5149"></a>Returns</p>
<p><code>(oratext *)</code> name of attribute [data encoding]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetattrname">XmlDomGetAttrName()</a>, <a href="#Xmldomgetattruri">XmlDomGetAttrURI()</a>, <a href="#Xmldomgetattrprefix">XmlDomGetAttrPrefix()</a>, <a href="#Xmldomgetattrlocal">XmlDomGetAttrLocal()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5150" class="refsect2"><a id="Xmldomgetattrprefix"></a>
<hr/>
<h3 class="refsect2"><a id="sthref61"></a><a id="sthref62"></a><a id="sthref63"></a>XmlDomGetAttrPrefix()</h3>
<p>Returns an attribute&#39;s namespace prefix (in the data encoding). If the attribute&#39;s name is not fully qualified (has no prefix), <code>NULL</code> is returned.</p>
<p class="subhead1"><a id="CAXML5151"></a>Syntax</p>
<pre>oratext* XmlDomGetAttrPrefix(
   xmlctx *xctx, 
   xmlattrnode *attr);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t12">Parameter</th>
<th class="cellalignment2921" id="r1c2-t12">In/Out</th>
<th class="cellalignment2921" id="r1c3-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t12" headers="r1c1-t12">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t12 r1c2-t12">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t12 r1c3-t12">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t12" headers="r1c1-t12">
<pre>attr
</pre></td>
<td class="cellalignment2922" headers="r3c1-t12 r1c2-t12">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t12 r1c3-t12">attribute node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5152"></a>Returns</p>
<p><code>(oratext *)</code> attribute&#39;s namespace prefix [data encoding] or <code>NULL</code></p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetattrname">XmlDomGetAttrName()</a>, <a href="#Xmldomgetattruri">XmlDomGetAttrURI()</a>, <a href="#Xmldomgetattrlocal">XmlDomGetAttrLocal()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5153" class="refsect2"><a id="Xmldomgetattrspecified"></a>
<hr/>
<h3 class="refsect2"><a id="sthref64"></a><a id="sthref65"></a><a id="sthref66"></a>XmlDomGetAttrSpecified()</h3>
<p>Return the &#39;specified&#39; flag for an attribute. If the attribute was explicitly given a value in the original document, this is <code>TRUE</code>; otherwise, it is <code>FALSE</code>. If the node is not an attribute, returns <code>FALSE</code>. If the user sets an attribute&#39;s value through DOM, its specified flag will be <code>TRUE</code>. To return an attribute to its default value (if it has one), the attribute should be deleted; it will then be re-created automatically with the default value (and specified will be <code>FALSE</code>).</p>
<p class="subhead1"><a id="CAXML5154"></a>Syntax</p>
<pre>boolean XmlDomGetAttrSpecified(
   xmlctx *xctx,
   xmlattrnode *attr);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t14">Parameter</th>
<th class="cellalignment2921" id="r1c2-t14">In/Out</th>
<th class="cellalignment2921" id="r1c3-t14">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t14" headers="r1c1-t14">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t14 r1c2-t14">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t14 r1c3-t14">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t14" headers="r1c1-t14">
<pre>attr
</pre></td>
<td class="cellalignment2922" headers="r3c1-t14 r1c2-t14">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t14 r1c3-t14">attribute node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5155"></a>Returns</p>
<p><code>(boolean)</code> attribute&#39;s &#34;specified&#34; flag</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomsetattrvalue">XmlDomSetAttrValue()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5156" class="refsect2"><a id="Xmldomgetattruri"></a>
<hr/>
<h3 class="refsect2"><a id="sthref67"></a><a id="sthref68"></a><a id="sthref69"></a>XmlDomGetAttrURI()</h3>
<p>Returns an attribute&#39;s namespace URI (in the data encoding). If the attribute&#39;s name is not qualified (does not contain a namespace prefix), it will have the default namespace in effect when the node was created (which may be <code>NULL</code>).</p>
<p>A length-encoded version is available as <code>XmlDomGetAttrURILen</code> which returns the URI as a pointer and length, for use if the data is known to use <code>XMLType</code> backing store.</p>
<p class="subhead1"><a id="CAXML5157"></a>Syntax</p>
<pre>oratext* XmlDomGetAttrURI(
   xmlctx *xctx, 
   xmlattrnode *attr);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t16">Parameter</th>
<th class="cellalignment2921" id="r1c2-t16">In/Out</th>
<th class="cellalignment2921" id="r1c3-t16">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t16" headers="r1c1-t16">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t16 r1c2-t16">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t16 r1c3-t16">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t16" headers="r1c1-t16">
<pre>attr
</pre></td>
<td class="cellalignment2922" headers="r3c1-t16 r1c2-t16">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t16 r1c3-t16">attribute node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5158"></a>Returns</p>
<p><code>(oratext *)</code> attribute&#39;s namespace URI [data encoding] or <code>NULL</code></p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetattrurilen">XmlDomGetAttrURILen()</a>, <a href="#Xmldomgetattrprefix">XmlDomGetAttrPrefix()</a>, <a href="#Xmldomgetattrlocal">XmlDomGetAttrLocal()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5159" class="refsect2"><a id="Xmldomgetattrurilen"></a>
<hr/>
<h3 class="refsect2"><a id="sthref70"></a><a id="sthref71"></a><a id="sthref72"></a>XmlDomGetAttrURILen()</h3>
<p>Returns an attribute&#39;s namespace URI (in the data encoding) as length-encoded string. If the attribute&#39;s name is not qualified (does not contain a namespace prefix), it will have the default namespace in effect when the node was created (which may be <code>NULL</code>).</p>
<p>A <code>NULL</code>-terminated version is available as <code>XmlDomGetAttrURI</code> which returns the URI as <code>NULL</code>-terminated string. If the backing store is known to be <code>XMLType</code>, then the attribute&#39;s data will be stored internally as length-encoded. Using the length-based Get functions will avoid having to copy and <code>NULL</code>-terminate the data.</p>
<p>If both the input buffer is non-<code>NULL</code> and the input buffer length is nonzero, then the value will be stored in the input buffer. Else, the implementation will return its own buffer.</p>
<p>If the actual length is greater than buflen, then a truncated value will be copied into the buffer and len will return the actual length.</p>
<p class="subhead1"><a id="CAXML5160"></a>Syntax</p>
<pre>oratext* XmlDomGetAttrURILen(
   xmlctx *xctx, 
   xmlattrnode *attr, 
   oratext *buf, 
   ub4 buflen, 
   ub4 *len);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t18">Parameter</th>
<th class="cellalignment2921" id="r1c2-t18">In/Out</th>
<th class="cellalignment2921" id="r1c3-t18">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t18" headers="r1c1-t18">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t18 r1c2-t18">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t18 r1c3-t18">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t18" headers="r1c1-t18">
<pre>attr
</pre></td>
<td class="cellalignment2922" headers="r3c1-t18 r1c2-t18">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t18 r1c3-t18">attribute node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t18" headers="r1c1-t18">
<pre>buf
</pre></td>
<td class="cellalignment2922" headers="r4c1-t18 r1c2-t18">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t18 r1c3-t18">input buffer; optional</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t18" headers="r1c1-t18">
<pre>buflen
</pre></td>
<td class="cellalignment2922" headers="r5c1-t18 r1c2-t18">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t18 r1c3-t18">input buffer length; optional</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r6c1-t18" headers="r1c1-t18">
<pre>len
</pre></td>
<td class="cellalignment2922" headers="r6c1-t18 r1c2-t18">
<pre>OUT
</pre></td>
<td class="cellalignment2922" headers="r6c1-t18 r1c3-t18">length of URI, in characters</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5161"></a>Returns</p>
<p><code>(oratext *)</code> attribute&#39;s namespace URI [data encoding] or <code>NULL</code></p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetattruri">XmlDomGetAttrURI()</a>, <a href="#Xmldomgetattrprefix">XmlDomGetAttrPrefix()</a>, <a href="#Xmldomgetattrlocal">XmlDomGetAttrLocal()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5162" class="refsect2"><a id="Xmldomgetattrvalue"></a>
<hr/>
<h3 class="refsect2"><a id="sthref73"></a><a id="sthref74"></a><a id="sthref75"></a>XmlDomGetAttrValue()</h3>
<p>Returns the &#34;value&#34; (character data) of an attribute (in the data encoding) as <code>NULL</code>-terminated string. Character and general entities will have been replaced.</p>
<p>A length-encoded version is available as <code>XmlDomGetAttrValueLen</code> which returns the attribute value as a pointer and length, for use if the data is known to use <code>XMLType</code> backing store.</p>
<p class="subhead1"><a id="CAXML5163"></a>Syntax</p>
<pre>oratext* XmlDomGetAttrValue(
   xmlctx *xctx, 
   xmlattrnode *attr);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t20">Parameter</th>
<th class="cellalignment2921" id="r1c2-t20">In/Out</th>
<th class="cellalignment2921" id="r1c3-t20">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t20" headers="r1c1-t20">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t20 r1c2-t20">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t20 r1c3-t20">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t20" headers="r1c1-t20">
<pre>attr
</pre></td>
<td class="cellalignment2922" headers="r3c1-t20 r1c2-t20">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t20 r1c3-t20">attribute node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5164"></a>Returns</p>
<p><code>(oratext *)</code> attribute&#39;s value</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetattrvaluelen">XmlDomGetAttrValueLen()</a>, <a href="#Xmldomsetattrvalue">XmlDomSetAttrValue()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5165" class="refsect2"><a id="Xmldomgetattrvaluelen"></a>
<hr/>
<h3 class="refsect2"><a id="sthref76"></a><a id="sthref77"></a><a id="sthref78"></a>XmlDomGetAttrValueLen()</h3>
<p>Returns the &#34;value&#34; (character data) of an attribute (in the data encoding) as length-encoded string. Character and general entities will have been replaced.</p>
<p>A <code>NULL</code>-terminated version is available as <code>XmlDomGetAttrValue</code> which returns the attribute value as <code>NULL</code>-terminated string. If the backing store is known to be <code>XMLType</code>, then the attribute&#39;s data will be stored internally as length-encoded. Using the length-based <code>Get</code><code><span class="codeinlineitalic">XXX</span></code>() functions will avoid having to copy and <code>NULL</code>-terminate the data.</p>
<p>If both the input buffer is non-<code>NULL</code> and the input buffer length is nonzero, then the value will be stored in the input buffer. Else, the implementation will return its own buffer.</p>
<p>If the actual length is greater than buflen, then a truncated value will be copied into the buffer and len will return the actual length.</p>
<p class="subhead1"><a id="CAXML5166"></a>Syntax</p>
<pre>oratext* XmlDomGetAttrValueLen(
   xmlctx *xctx,
   xmlattrnode *attr,
   oratext *buf,
   ub4 buflen, 
   ub4 *len);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t22">Parameter</th>
<th class="cellalignment2921" id="r1c2-t22">In/Out</th>
<th class="cellalignment2921" id="r1c3-t22">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t22" headers="r1c1-t22">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t22 r1c2-t22">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t22 r1c3-t22">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t22" headers="r1c1-t22">
<pre>attr
</pre></td>
<td class="cellalignment2922" headers="r3c1-t22 r1c2-t22">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t22 r1c3-t22">attribute node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t22" headers="r1c1-t22">
<pre>buf
</pre></td>
<td class="cellalignment2922" headers="r4c1-t22 r1c2-t22">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t22 r1c3-t22">input buffer; optional</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t22" headers="r1c1-t22">
<pre>buflen
</pre></td>
<td class="cellalignment2922" headers="r5c1-t22 r1c2-t22">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t22 r1c3-t22">input buffer length; optional</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r6c1-t22" headers="r1c1-t22">
<pre>len
</pre></td>
<td class="cellalignment2922" headers="r6c1-t22 r1c2-t22">
<pre>OUT
</pre></td>
<td class="cellalignment2922" headers="r6c1-t22 r1c3-t22">length of attribute&#39;s value, in characters</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5167"></a>Returns</p>
<p><code>(oratext *)</code> attribute&#39;s value</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetattrvalue">XmlDomGetAttrValue()</a>, <a href="#Xmldomsetattrvalue">XmlDomSetAttrValue()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5168" class="refsect2"><a id="Xmldomgetattrvaluestream"></a>
<hr/>
<h3 class="refsect2"><a id="sthref79"></a><a id="sthref80"></a><a id="sthref81"></a>XmlDomGetAttrValueStream()</h3>
<p>Returns the large &#34;value&#34; (associated character data) for an attribute and sends it in pieces to the user&#39;s output stream. For very large values, it is not always possible to store them [efficiently] as a single contiguous chunk. This function is used to access chunked data of that type.</p>
<p class="subhead1"><a id="CAXML5169"></a>Syntax</p>
<pre>xmlerr XmlDomGetAttrValueStream(
   xmlctx *xctx,
   xmlnode *attr,
   xmlostream *ostream);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t24">Parameter</th>
<th class="cellalignment2921" id="r1c2-t24">In/Out</th>
<th class="cellalignment2921" id="r1c3-t24">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t24" headers="r1c1-t24">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t24 r1c2-t24">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t24 r1c3-t24">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t24" headers="r1c1-t24">
<pre>attr
</pre></td>
<td class="cellalignment2922" headers="r3c1-t24 r1c2-t24">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t24 r1c3-t24">attribute node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t24" headers="r1c1-t24">
<pre>ostream
</pre></td>
<td class="cellalignment2922" headers="r4c1-t24 r1c2-t24">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t24 r1c3-t24">output stream object</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5170"></a>Returns</p>
<p><code>(xmlerr)</code> numeric error code, <code>0</code> on success</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML5171" class="refsect2"><a id="Xmldomgetownerelem"></a>
<hr/>
<h3 class="refsect2"><a id="sthref82"></a><a id="sthref83"></a><a id="sthref84"></a>XmlDomGetOwnerElem()</h3>
<p>Returns the <code>Element</code> node associated with an attribute. Each attr either belongs to an element (one and only one), or is detached and not yet part of the DOM tree. In the former case, the element node is returned; if the attr is unassigned, <code>NULL</code> is returned.</p>
<p class="subhead1"><a id="CAXML5172"></a>Syntax</p>
<pre>xmlelemnode* XmlDomGetOwnerElem(
   xmlctx *xctx,
   xmlattrnode *attr);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t25">Parameter</th>
<th class="cellalignment2921" id="r1c2-t25">In/Out</th>
<th class="cellalignment2921" id="r1c3-t25">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t25" headers="r1c1-t25">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t25 r1c2-t25">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t25 r1c3-t25">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t25" headers="r1c1-t25">
<pre>attr
</pre></td>
<td class="cellalignment2922" headers="r3c1-t25 r1c2-t25">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t25 r1c3-t25">attribute node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5173"></a>Returns</p>
<p><code>(xmlelemnode *)</code> attribute&#39;s element node [or <code>NULL</code>]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetownerdocument">XmlDomGetOwnerDocument()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5174" class="refsect2"><a id="Xmldomsetattrvalue"></a>
<hr/>
<h3 class="refsect2"><a id="sthref85"></a><a id="sthref86"></a><a id="sthref87"></a>XmlDomSetAttrValue()</h3>
<p>Sets the given attribute&#39;s value to data. If the node is not an attribute, does nothing. Note that the new value must be in the data encoding! It is not verified, converted, or checked. The attribute&#39;s specified flag will be <code>TRUE</code> after setting a new value.</p>
<p class="subhead1"><a id="CAXML5175"></a>Syntax</p>
<pre>void XmlDomSetAttrValue(
   xmlctx *xctx,
   xmlattrnode *attr,
   oratext *value);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t27">Parameter</th>
<th class="cellalignment2921" id="r1c2-t27">In/Out</th>
<th class="cellalignment2921" id="r1c3-t27">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t27" headers="r1c1-t27">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t27 r1c2-t27">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t27 r1c3-t27">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t27" headers="r1c1-t27">
<pre>attr
</pre></td>
<td class="cellalignment2922" headers="r3c1-t27 r1c2-t27">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t27 r1c3-t27">attribute node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t27" headers="r1c1-t27">
<pre>value
</pre></td>
<td class="cellalignment2922" headers="r4c1-t27 r1c2-t27">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t27 r1c3-t27">new value of attribute; data encoding</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetattrvalue">XmlDomGetAttrValue()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5176" class="refsect2"><a id="Xmldomsetattrvaluestream"></a>
<hr/>
<h3 class="refsect2"><a id="sthref88"></a><a id="sthref89"></a><a id="sthref90"></a>XmlDomSetAttrValueStream()</h3>
<p>Sets the large &#34;value&#34; (associated character data) for an attribute piecemeal from an input stream. For very large values, it is not always possible to store them efficiently as a single contiguous chunk. This function is used to access chunked data of that type.</p>
<p class="subhead1"><a id="CAXML5177"></a>Syntax</p>
<pre>xmlerr XmlDomSetAttrValueStream(
   xmlctx *xctx,
   xmlnode *attr,
   xmlistream *istream);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t29">Parameter</th>
<th class="cellalignment2921" id="r1c2-t29">In/Out</th>
<th class="cellalignment2921" id="r1c3-t29">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t29" headers="r1c1-t29">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t29 r1c2-t29">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t29 r1c3-t29">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t29" headers="r1c1-t29">
<pre>attr
</pre></td>
<td class="cellalignment2922" headers="r3c1-t29 r1c2-t29">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t29 r1c3-t29">attribute node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t29" headers="r1c1-t29">
<pre>isream
</pre></td>
<td class="cellalignment2922" headers="r4c1-t29 r1c2-t29">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t29 r1c3-t29">input stream</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5178"></a>Returns</p>
<p><code>(xmlerr)</code> numeric error code, <code>0</code> on success</p>
</div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="BABIFFAD"></a>
<hr/>
<div id="CAXML00302" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">CharacterData Interface</h2>
<p><a href="#BABGEJBA">Table 3-2</a> summarizes the methods available through the <code>CharacterData</code> interface.</p>
<div id="CAXML5179" class="tblformal">
<p class="titleintable"><a id="sthref91"></a><a id="BABGEJBA"></a>Table 3-2 Summary of CharacterData Method; DOM Package</p>
<table class="cellalignment2920" title="Summary of CharacterData Method; DOM Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t30">Function</th>
<th class="cellalignment2921" id="r1c2-t30">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t30" headers="r1c1-t30">
<p><a href="#Xmldomappenddata">XmlDomAppendData()</a></p>
</td>
<td class="cellalignment2922" headers="r2c1-t30 r1c2-t30">
<p>Append data to end of node&#39;s current data.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t30" headers="r1c1-t30">
<p><a href="#Xmldomdeletedata">XmlDomDeleteData()</a></p>
</td>
<td class="cellalignment2922" headers="r3c1-t30 r1c2-t30">
<p>Remove part of node&#39;s data.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t30" headers="r1c1-t30">
<p><a href="#Xmldomgetchardata">XmlDomGetCharData()</a></p>
</td>
<td class="cellalignment2922" headers="r4c1-t30 r1c2-t30">
<p>Return data for node.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t30" headers="r1c1-t30">
<p><a href="#Xmldomgetchardatalength">XmlDomGetCharDataLength()</a></p>
</td>
<td class="cellalignment2922" headers="r5c1-t30 r1c2-t30">
<p>Return length of data for node.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r6c1-t30" headers="r1c1-t30">
<p><a href="#Xmldominsertdata">XmlDomInsertData()</a></p>
</td>
<td class="cellalignment2922" headers="r6c1-t30 r1c2-t30">
<p>Insert string into node&#39;s current data.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r7c1-t30" headers="r1c1-t30">
<p><a href="#Xmldomreplacedata">XmlDomReplaceData()</a></p>
</td>
<td class="cellalignment2922" headers="r7c1-t30 r1c2-t30">
<p>Replace part of node&#39;s data.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r8c1-t30" headers="r1c1-t30">
<p><a href="#Xmldomsetchardata">XmlDomSetCharData()</a></p>
</td>
<td class="cellalignment2922" headers="r8c1-t30 r1c2-t30">
<p>Set data for node.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r9c1-t30" headers="r1c1-t30">
<p><a href="#Xmldomsubstringdata">XmlDomSubstringData()</a></p>
</td>
<td class="cellalignment2922" headers="r9c1-t30 r1c2-t30">
<p>Return substring of node&#39;s data.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CAXML5180" class="refsect2"><a id="Xmldomappenddata"></a>
<hr/>
<h3 class="refsect2"><a id="sthref92"></a><a id="sthref93"></a><a id="sthref94"></a>XmlDomAppendData()</h3>
<p>Append a string to the end of a <code>CharacterData</code> node&#39;s data. If the node is not <code>Text</code>, <code>Comment</code> or <code>CDATA</code>, or if the string to append is <code>NULL</code>, does nothing. The appended data should be in the data encoding. It will not be verified, converted, or checked.</p>
<p>The new node data will be allocated and managed by DOM, but if the previous node value was allocated and manager by the user, they are responsible for freeing it, which is why it is returned.</p>
<p class="subhead1"><a id="CAXML5181"></a>Syntax</p>
<pre>void XmlDomAppendData(
   xmlctx *xctx,
   xmlnode *node,
   oratext *data, 
   oratext **old);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t31">Parameter</th>
<th class="cellalignment2921" id="r1c2-t31">In/Out</th>
<th class="cellalignment2921" id="r1c3-t31">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t31" headers="r1c1-t31">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t31 r1c2-t31">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t31 r1c3-t31">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t31" headers="r1c1-t31">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t31 r1c2-t31">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t31 r1c3-t31"><code>CharacterData</code> node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t31" headers="r1c1-t31">
<pre>data
</pre></td>
<td class="cellalignment2922" headers="r4c1-t31 r1c2-t31">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t31 r1c3-t31">data to append; data encoding</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t31" headers="r1c1-t31">
<pre>old
</pre></td>
<td class="cellalignment2922" headers="r5c1-t31 r1c2-t31">
<pre>OUT
</pre></td>
<td class="cellalignment2922" headers="r5c1-t31 r1c3-t31">previous data for node; data encoding</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetchardata">XmlDomGetCharData()</a>, <a href="#Xmldominsertdata">XmlDomInsertData()</a>, <a href="#Xmldomdeletedata">XmlDomDeleteData()</a>, <a href="#Xmldomreplacedata">XmlDomReplaceData()</a>, <a href="#Xmldomsplittext">XmlDomSplitText()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5182" class="refsect2"><a id="Xmldomdeletedata"></a>
<hr/>
<h3 class="refsect2"><a id="sthref95"></a><a id="sthref96"></a><a id="sthref97"></a>XmlDomDeleteData()</h3>
<p>Remove a range of characters from a <code>CharacterData</code> node&#39;s data. If the node is not text, comment or <code>CDATA</code>, or if the offset is outside of the original data, does nothing. The <code>offset</code> is zero-based, so offset zero refers to the start of the data. Both <code>offset</code> and <code>count</code> are in characters, not bytes. If the sum of offset and count exceeds the data length then all characters from <code>offset</code> to the end of the data are deleted.</p>
<p>The new node data will be allocated and managed by DOM, but if the previous node value was allocated and managed by the user, they are responsible for freeing it, which is why it is returned.</p>
<p class="subhead1"><a id="CAXML5183"></a>Syntax</p>
<pre>void XmlDomDeleteData(
   xmlctx *xctx,
   xmlnode *node,
   ub4 offset, 
   ub4 count,
   oratext **old);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t33">Parameter</th>
<th class="cellalignment2921" id="r1c2-t33">In/Out</th>
<th class="cellalignment2921" id="r1c3-t33">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t33" headers="r1c1-t33">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t33 r1c2-t33">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t33 r1c3-t33">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t33" headers="r1c1-t33">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t33 r1c2-t33">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t33 r1c3-t33"><code>CharacterData</code> node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t33" headers="r1c1-t33">
<pre>offset
</pre></td>
<td class="cellalignment2922" headers="r4c1-t33 r1c2-t33">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t33 r1c3-t33">character offset where to start removing</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t33" headers="r1c1-t33">
<pre>count
</pre></td>
<td class="cellalignment2922" headers="r5c1-t33 r1c2-t33">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t33 r1c3-t33">number of characters to delete</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r6c1-t33" headers="r1c1-t33">
<pre>old
</pre></td>
<td class="cellalignment2922" headers="r6c1-t33 r1c2-t33">
<pre>OUT
</pre></td>
<td class="cellalignment2922" headers="r6c1-t33 r1c3-t33">previous data for node; data encoding</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetchardata">XmlDomGetCharData()</a>, <a href="#Xmldomappenddata">XmlDomAppendData()</a>, <a href="#Xmldominsertdata">XmlDomInsertData()</a>, <a href="#Xmldomreplacedata">XmlDomReplaceData()</a>, <a href="#Xmldomsplittext">XmlDomSplitText()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5184" class="refsect2"><a id="Xmldomgetchardata"></a>
<hr/>
<h3 class="refsect2"><a id="sthref98"></a><a id="sthref99"></a><a id="sthref100"></a>XmlDomGetCharData()</h3>
<p>Returns the data for a <code>CharacterData</code> node (type text, comment or <code>CDATA</code>) in the data encoding. For other node types, or if there is no data, returns <code>NULL</code>.</p>
<p class="subhead1"><a id="CAXML5185"></a>Syntax</p>
<pre>oratext* XmlDomGetCharData(
   xmlctx *xctx,
   xmlnode *node);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t35">Parameter</th>
<th class="cellalignment2921" id="r1c2-t35">In/Out</th>
<th class="cellalignment2921" id="r1c3-t35">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t35" headers="r1c1-t35">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t35 r1c2-t35">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t35 r1c3-t35">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t35" headers="r1c1-t35">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t35 r1c2-t35">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t35 r1c3-t35"><code>CharacterData</code> node; <code>Text</code>, <code>Comment</code> or <code>CDATA</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5186"></a>Returns</p>
<p><code>(oratext *)</code> character data of node [data encoding]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomsetchardata">XmlDomSetCharData()</a>, <a href="#Xmldomcreatetext">XmlDomCreateText()</a>, <a href="#Xmldomcreatecomment">XmlDomCreateComment()</a>, <a href="#Xmldomcreatecdata">XmlDomCreateCDATA()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5187" class="refsect2"><a id="Xmldomgetchardatalength"></a>
<hr/>
<h3 class="refsect2"><a id="sthref101"></a><a id="sthref102"></a><a id="sthref103"></a>XmlDomGetCharDataLength()</h3>
<p>Returns the length of the data for a <code>CharacterData</code> node, type <code>Text</code>, <code>Comment</code> or <code>CDATA</code>) in characters, not bytes. For other node types, returns 0.</p>
<p class="subhead1"><a id="CAXML5188"></a>Syntax</p>
<pre>ub4 XmlDomGetCharDataLength(
   xmlctx *xctx,
   xmlnode *cdata);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t37">Parameter</th>
<th class="cellalignment2921" id="r1c2-t37">In/Out</th>
<th class="cellalignment2921" id="r1c3-t37">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t37" headers="r1c1-t37">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t37 r1c2-t37">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t37 r1c3-t37">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t37" headers="r1c1-t37">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t37 r1c2-t37">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t37 r1c3-t37"><code>CharacterData</code> node; <code>Text</code>, <code>Comment</code> or <code>CDATA</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5189"></a>Returns</p>
<p><code>(ub4)</code> length in characters, not bytes, of node&#39;s data</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetchardata">XmlDomGetCharData()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5190" class="refsect2"><a id="Xmldominsertdata"></a>
<hr/>
<h3 class="refsect2"><a id="sthref104"></a><a id="sthref105"></a><a id="sthref106"></a>XmlDomInsertData()</h3>
<p>Insert a string into a <code>CharacterData</code> node&#39;s data at the specified position. If the node is not <code>Text</code>, <code>Comment</code> or <code>CDATA</code>, or if the data to be inserted is <code>NULL</code>, or the offset is outside the original data, does nothing. The inserted data must be in the data encoding. It will not be verified, converted, or checked. The offset is specified as characters, not bytes. The offset is zero-based, so inserting at offset zero prepends the data.</p>
<p>The new node data will be allocated and managed by DOM, but if the previous node value was allocated and managed by the user, they are responsible for freeing it (which is why it&#39;s returned).</p>
<p class="subhead1"><a id="CAXML5191"></a>Syntax</p>
<pre>void XmlDomInsertData(
   xmlctx *xctx,
   xmlnode *node,
   ub4 offset, 
   oratext *arg,
   oratext **old);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t39">Parameter</th>
<th class="cellalignment2921" id="r1c2-t39">In/Out</th>
<th class="cellalignment2921" id="r1c3-t39">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t39" headers="r1c1-t39">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t39 r1c2-t39">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t39 r1c3-t39">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t39" headers="r1c1-t39">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t39 r1c2-t39">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t39 r1c3-t39"><code>CharacterData</code> node; <code>Text</code>, <code>Comment</code>, or <code>CDATA</code></td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t39" headers="r1c1-t39">
<pre>offset
</pre></td>
<td class="cellalignment2922" headers="r4c1-t39 r1c2-t39">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t39 r1c3-t39">character offset where to start inserting</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t39" headers="r1c1-t39">
<pre>arg
</pre></td>
<td class="cellalignment2922" headers="r5c1-t39 r1c2-t39">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t39 r1c3-t39">data to insert</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r6c1-t39" headers="r1c1-t39">
<pre>old
</pre></td>
<td class="cellalignment2922" headers="r6c1-t39 r1c2-t39">
<pre>OUT
</pre></td>
<td class="cellalignment2922" headers="r6c1-t39 r1c3-t39">previous data for node; data encoding</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetchardata">XmlDomGetCharData()</a>, <a href="#Xmldomappenddata">XmlDomAppendData()</a>, <a href="#Xmldomdeletedata">XmlDomDeleteData()</a>, <a href="#Xmldomreplacedata">XmlDomReplaceData()</a>, <a href="#Xmldomsplittext">XmlDomSplitText()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5192" class="refsect2"><a id="Xmldomreplacedata"></a>
<hr/>
<h3 class="refsect2"><a id="sthref107"></a><a id="sthref108"></a><a id="sthref109"></a>XmlDomReplaceData()</h3>
<p>Replaces a range of characters in a <code>CharacterData</code> node&#39;s data with a new string. If the node is not text, comment or <code>CDATA</code>, or if the offset is outside of the original data, or if the replacement string is <code>NULL</code>, does nothing. If the count is zero, acts just as <code>XmlDomInsertData</code>. The offset is zero-based, so offset zero refers to the start of the data. The replacement data must be in the data encoding. It will not be verified, converted, or checked. The offset and count are both in characters, not bytes. If the sum of offset and count exceeds length, then all characters to the end of the data are replaced.</p>
<p>The new node data will be allocated and managed by DOM, but if the previous node value was allocated and managed by the user, they are responsible for freeing it, which is why it is returned.</p>
<p class="subhead1"><a id="CAXML5193"></a>Syntax</p>
<pre>void XmlDomReplaceData(
   xmlctx *xctx,
   xmlnode *node,
   ub4 offset, 
   ub4 count,
   oratext *arg,
   oratext **old);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t41">Parameter</th>
<th class="cellalignment2921" id="r1c2-t41">In/Out</th>
<th class="cellalignment2921" id="r1c3-t41">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t41" headers="r1c1-t41">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t41 r1c2-t41">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t41 r1c3-t41">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t41" headers="r1c1-t41">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t41 r1c2-t41">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t41 r1c3-t41"><code>CharacterData</code> node; <code>Text</code>, <code>Comment</code>, or <code>CDATA</code></td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t41" headers="r1c1-t41">
<pre>offset
</pre></td>
<td class="cellalignment2922" headers="r4c1-t41 r1c2-t41">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t41 r1c3-t41">character offset where to start replacing</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t41" headers="r1c1-t41">
<pre>count
</pre></td>
<td class="cellalignment2922" headers="r5c1-t41 r1c2-t41">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t41 r1c3-t41">number of characters to replace</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r6c1-t41" headers="r1c1-t41">
<pre>arg
</pre></td>
<td class="cellalignment2922" headers="r6c1-t41 r1c2-t41">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r6c1-t41 r1c3-t41">replacement substring; data encoding</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r7c1-t41" headers="r1c1-t41">
<pre>old
</pre></td>
<td class="cellalignment2922" headers="r7c1-t41 r1c2-t41">
<pre>OUT
</pre></td>
<td class="cellalignment2922" headers="r7c1-t41 r1c3-t41">previous data for node; data encoding</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetchardata">XmlDomGetCharData()</a>, <a href="#Xmldomappenddata">XmlDomAppendData()</a>, <a href="#Xmldominsertdata">XmlDomInsertData()</a>, <a href="#Xmldomdeletedata">XmlDomDeleteData()</a>, <a href="#Xmldomsplittext">XmlDomSplitText()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5194" class="refsect2"><a id="Xmldomsetchardata"></a>
<hr/>
<h3 class="refsect2"><a id="sthref110"></a><a id="sthref111"></a><a id="sthref112"></a>XmlDomSetCharData()</h3>
<p>Sets data for a <code>CharacterData</code> node (type text, comment or <code>CDATA</code>), replacing the old data. For other node types, does nothing. The new data is not verified, converted, or checked; it should be in the data encoding.</p>
<p class="subhead1"><a id="CAXML5195"></a>Syntax</p>
<pre>void XmlDomSetCharData(
   xmlctx *xctx,
   xmlnode *node,
   oratext *data);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t43">Parameter</th>
<th class="cellalignment2921" id="r1c2-t43">In/Out</th>
<th class="cellalignment2921" id="r1c3-t43">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t43" headers="r1c1-t43">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t43 r1c2-t43">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t43 r1c3-t43">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t43" headers="r1c1-t43">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t43 r1c2-t43">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t43 r1c3-t43"><code>CharacterData</code> node; <code>Text</code>, <code>Comment</code>, or <code>CDATA</code></td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t43" headers="r1c1-t43">
<pre>data
</pre></td>
<td class="cellalignment2922" headers="r4c1-t43 r1c2-t43">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t43 r1c3-t43">new data for node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetchardata">XmlDomGetCharData()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5196" class="refsect2"><a id="Xmldomsubstringdata"></a>
<hr/>
<h3 class="refsect2"><a id="sthref113"></a><a id="sthref114"></a><a id="sthref115"></a>XmlDomSubstringData()</h3>
<p>Returns a range of character data from a <code>CharacterData</code> node, type <code>Text</code>, <code>Comment</code> or <code>CDATA</code>. For other node types, or if count is zero, returns <code>NULL</code>. Since the data is in the data encoding, offset and count are in characters, not bytes. The beginning of the string is offset <code>0</code>. If the sum of offset and count exceeds the length, then all characters to the end of the data are returned.</p>
<p>The substring is permanently allocated in the node&#39;s document&#39;s memory pool. To free the substring, use <code>XmlDomFreeString</code>.</p>
<p class="subhead1"><a id="CAXML5197"></a>Syntax</p>
<pre>oratext* XmlDomSubstringData(
   xmlctx *xctx,
   xmlnode *node,
   ub4 offset,
   ub4 count);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t45">Parameter</th>
<th class="cellalignment2921" id="r1c2-t45">In/Out</th>
<th class="cellalignment2921" id="r1c3-t45">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t45" headers="r1c1-t45">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t45 r1c2-t45">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t45 r1c3-t45">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t45" headers="r1c1-t45">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t45 r1c2-t45">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t45 r1c3-t45"><code>CharacterData</code> node; <code>Text</code>, <code>Comment</code>, or <code>CDATA</code></td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t45" headers="r1c1-t45">
<pre>offset
</pre></td>
<td class="cellalignment2922" headers="r4c1-t45 r1c2-t45">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t45 r1c3-t45">character offset where to start extraction of substring</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t45" headers="r1c1-t45">
<pre>count
</pre></td>
<td class="cellalignment2922" headers="r5c1-t45 r1c2-t45">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t45 r1c3-t45">number of characters to extract</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5198"></a>Returns</p>
<p><code>(oratext *)</code> specified substring.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomappenddata">XmlDomAppendData()</a>, <a href="#Xmldominsertdata">XmlDomInsertData()</a>, <a href="#Xmldomdeletedata">XmlDomDeleteData()</a>, <a href="#Xmldomreplacedata">XmlDomReplaceData()</a>, <a href="#Xmldomsplittext">XmlDomSplitText()</a>, <a href="#Xmldomfreestring">XmlDomFreeString()</a></div>
</div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="BABFHDGJ"></a>
<hr/>
<div id="CAXML00303" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">Document Interface</h2>
<p><a href="#BABHEHGC">Table 3-3</a> summarizes the methods available through the <code>Document</code> interface.</p>
<div id="CAXML5199" class="tblformal">
<p class="titleintable"><a id="sthref116"></a><a id="BABHEHGC"></a>Table 3-3 Summary of Document Methods; DOM Package</p>
<table class="cellalignment2920" title="Summary of Document Methods; DOM Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t47">Function</th>
<th class="cellalignment2921" id="r1c2-t47">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t47" headers="r1c1-t47">
<p><a href="#Xmldomcreateattr">XmlDomCreateAttr()</a></p>
</td>
<td class="cellalignment2922" headers="r2c1-t47 r1c2-t47">
<p>Create attribute node.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t47" headers="r1c1-t47">
<p><a href="#Xmldomcreateattrns">XmlDomCreateAttrNS()</a></p>
</td>
<td class="cellalignment2922" headers="r3c1-t47 r1c2-t47">
<p>Create attribute node with namespace information.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t47" headers="r1c1-t47">
<p><a href="#Xmldomcreatecdata">XmlDomCreateCDATA()</a></p>
</td>
<td class="cellalignment2922" headers="r4c1-t47 r1c2-t47">
<p>Create <code>CDATA</code> node.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t47" headers="r1c1-t47">
<p><a href="#Xmldomcreatecomment">XmlDomCreateComment()</a></p>
</td>
<td class="cellalignment2922" headers="r5c1-t47 r1c2-t47">
<p>Create comment node.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r6c1-t47" headers="r1c1-t47">
<p><a href="#Xmldomcreateelem">XmlDomCreateElem()</a></p>
</td>
<td class="cellalignment2922" headers="r6c1-t47 r1c2-t47">
<p>Create an element node.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r7c1-t47" headers="r1c1-t47">
<p><a href="#Xmldomcreateelemns">XmlDomCreateElemNS()</a></p>
</td>
<td class="cellalignment2922" headers="r7c1-t47 r1c2-t47">
<p>Create an element node with namespace information.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r8c1-t47" headers="r1c1-t47">
<p><a href="#Xmldomcreateentityref">XmlDomCreateEntityRef()</a></p>
</td>
<td class="cellalignment2922" headers="r8c1-t47 r1c2-t47">
<p>Create entity reference node.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r9c1-t47" headers="r1c1-t47">
<p><a href="#Xmldomcreatefragment">XmlDomCreateFragment()</a></p>
</td>
<td class="cellalignment2922" headers="r9c1-t47 r1c2-t47">
<p>Create a document fragment.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r10c1-t47" headers="r1c1-t47">
<p><a href="#Xmldomcreatepi">XmlDomCreatePI()</a></p>
</td>
<td class="cellalignment2922" headers="r10c1-t47 r1c2-t47">
<p>Create PI node.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r11c1-t47" headers="r1c1-t47">
<p><a href="#Xmldomcreatetext">XmlDomCreateText()</a></p>
</td>
<td class="cellalignment2922" headers="r11c1-t47 r1c2-t47">
<p>Create text node.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r12c1-t47" headers="r1c1-t47">
<p><a href="#Xmldomfreestring">XmlDomFreeString()</a></p>
</td>
<td class="cellalignment2922" headers="r12c1-t47 r1c2-t47">
<p>Frees a string allocate by <code>XmlDomSubstringData</code>, and others.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r13c1-t47" headers="r1c1-t47">
<p><a href="#Xmldomgetbaseuri">XmlDomGetBaseURI()</a></p>
</td>
<td class="cellalignment2922" headers="r13c1-t47 r1c2-t47">
<p>Returns the base URI for a document.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r14c1-t47" headers="r1c1-t47">
<p><a href="#Xmldomgetdtd">XmlDomGetDTD()</a></p>
</td>
<td class="cellalignment2922" headers="r14c1-t47 r1c2-t47">
<p>Get DTD for document.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r15c1-t47" headers="r1c1-t47">
<p><a href="#Xmldomgetdecl">XmlDomGetDecl()</a></p>
</td>
<td class="cellalignment2922" headers="r15c1-t47 r1c2-t47">
<p>Returns a document&#39;s <code>XMLDecl</code> information.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r16c1-t47" headers="r1c1-t47">
<p><a href="#Xmldomgetdocelem">XmlDomGetDocElem()</a></p>
</td>
<td class="cellalignment2922" headers="r16c1-t47 r1c2-t47">
<p>Get top-level element for document.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r17c1-t47" headers="r1c1-t47">
<p><a href="#Xmldomgetdocelembyid">XmlDomGetDocElemByID()</a></p>
</td>
<td class="cellalignment2922" headers="r17c1-t47 r1c2-t47">
<p>Get document element given ID.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r18c1-t47" headers="r1c1-t47">
<p><a href="#Xmldomgetdocelemsbytag">XmlDomGetDocElemsByTag()</a></p>
</td>
<td class="cellalignment2922" headers="r18c1-t47 r1c2-t47">
<p>Obtain document elements.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r19c1-t47" headers="r1c1-t47">
<p><a href="#Xmldomgetdocelemsbytagns">XmlDomGetDocElemsByTagNS()</a></p>
</td>
<td class="cellalignment2922" headers="r19c1-t47 r1c2-t47">
<p>Obtain document elements (namespace aware version).</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r20c1-t47" headers="r1c1-t47">
<p><a href="#Xmldomgetlasterror">XmlDomGetLastError()</a></p>
</td>
<td class="cellalignment2922" headers="r20c1-t47 r1c2-t47">
<p>Return last error code for document.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r21c1-t47" headers="r1c1-t47">
<p><a href="#Xmldomgetschema">XmlDomGetSchema()</a></p>
</td>
<td class="cellalignment2922" headers="r21c1-t47 r1c2-t47">
<p>Returns URI of schema associated with document.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r22c1-t47" headers="r1c1-t47">
<p><a href="#Xmldomimportnode">XmlDomImportNode()</a></p>
</td>
<td class="cellalignment2922" headers="r22c1-t47 r1c2-t47">
<p>Import a node from another DOM.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r23c1-t47" headers="r1c1-t47">
<p><a href="#Xmldomisschemabased">XmlDomIsSchemaBased()</a></p>
</td>
<td class="cellalignment2922" headers="r23c1-t47 r1c2-t47">
<p>Indicate whether a schema is associated with a document.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r24c1-t47" headers="r1c1-t47">
<p><a href="#Xmldomsavestring">XmlDomSaveString()</a></p>
</td>
<td class="cellalignment2922" headers="r24c1-t47 r1c2-t47">
<p>Saves a string permanently in a document&#39;s memory pool.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r25c1-t47" headers="r1c1-t47">
<p><a href="#Xmldomsavestring2">XmlDomSaveString2()</a></p>
</td>
<td class="cellalignment2922" headers="r25c1-t47 r1c2-t47">
<p>Saves a Unicode string permanently in a document&#39;s memory pool.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r26c1-t47" headers="r1c1-t47">
<p><a href="#Xmldomsetdtd">XmlDomSetDTD()</a></p>
</td>
<td class="cellalignment2922" headers="r26c1-t47 r1c2-t47">
<p>Sets DTD for document.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r27c1-t47" headers="r1c1-t47">
<p><a href="#Xmldomsetdocorder">XmlDomSetDocOrder()</a></p>
</td>
<td class="cellalignment2922" headers="r27c1-t47 r1c2-t47">
<p>Set document order for all nodes.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r28c1-t47" headers="r1c1-t47">
<p><a href="#Xmldomsetlasterror">XmlDomSetLastError()</a></p>
</td>
<td class="cellalignment2922" headers="r28c1-t47 r1c2-t47">
<p>Sets last error code for document.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r29c1-t47" headers="r1c1-t47">
<p><a href="#Xmldomsync">XmlDomSync()</a></p>
</td>
<td class="cellalignment2922" headers="r29c1-t47 r1c2-t47">
<p>Synchronizes the persistent version of a document with its DOM.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CAXML5200" class="refsect2"><a id="Xmldomcreateattr"></a>
<hr/>
<h3 class="refsect2"><a id="sthref117"></a><a id="sthref118"></a><a id="sthref119"></a>XmlDomCreateAttr()</h3>
<p>Creates an attribute node with the given name and value (in the data encoding). Note this function differs from the DOM specification, which does not allow the initial value of the attribute to be set (see <code>XmlDomSetAttrValue</code>). The name is required, but the value may be <code>NULL</code>; neither is verified, converted, or checked.</p>
<p>This is the non-namespace aware function (see <code>XmlDomCreateAttrNS</code>): the new attribute will have <code>NULL</code> namespace URI and prefix, and its local name will be the same as its name, even if the name specified is a qualified name.</p>
<p>If given an initial value, the attribute&#39;s specified flag will be <code>TRUE</code>.</p>
<p>The new node is an orphan with no parent; it must be added to the DOM tree with <code>XmlDomAppendChild</code>, and so on.</p>
<p>See <code>XmlDomSetAttr</code> which creates and adds an attribute in a single operation.</p>
<p>The name and value are not copied, their pointers are just stored. The user is responsible for persistence and freeing of that data.</p>
<p class="subhead1"><a id="CAXML5201"></a>Syntax</p>
<pre>xmlattrnode* XmlDomCreateAttr(
   xmlctx *xctx,
   xmldocnode *doc, 
   oratext *name, 
   oratext *value);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t48">Parameter</th>
<th class="cellalignment2921" id="r1c2-t48">In/Out</th>
<th class="cellalignment2921" id="r1c3-t48">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t48" headers="r1c1-t48">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t48 r1c2-t48">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t48 r1c3-t48">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t48" headers="r1c1-t48">
<pre>doc
</pre></td>
<td class="cellalignment2922" headers="r3c1-t48 r1c2-t48">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t48 r1c3-t48">XML document node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t48" headers="r1c1-t48">
<pre>name
</pre></td>
<td class="cellalignment2922" headers="r4c1-t48 r1c2-t48">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t48 r1c3-t48">new node&#39;s name; data encoding; user control</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t48" headers="r1c1-t48">
<pre>value
</pre></td>
<td class="cellalignment2922" headers="r5c1-t48 r1c2-t48">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t48 r1c3-t48">new node&#39;s value; data encoding; user control</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5202"></a>Returns</p>
<p><code>(xmlattrnode *)</code> new <code>Attr</code> node.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomsetattrvalue">XmlDomSetAttrValue()</a>, <a href="#Xmldomcreateattrns">XmlDomCreateAttrNS()</a>, <a href="#Xmldomsetattr">XmlDomSetAttr()</a>, <a href="#Xmldomcleannode">XmlDomCleanNode()</a>, <a href="#Xmldomfreenode">XmlDomFreeNode()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5203" class="refsect2"><a id="Xmldomcreateattrns"></a>
<hr/>
<h3 class="refsect2"><a id="sthref120"></a><a id="sthref121"></a><a id="sthref122"></a>XmlDomCreateAttrNS()</h3>
<p>Creates an attribute node with the given namespace URI and qualified name; this is the namespace-aware version of <code>XmlDomCreateAttr</code>. Note this function differs from the DOM specification, which does not allow the initial value of the attribute to be set (see <code>XmlDomSetAttrValue</code>). The name is required, but the value may be <code>NULL</code>; neither is verified, converted, or checked.</p>
<p>If given an initial value, the attribute&#39;s specified flag will be <code>TRUE</code>.</p>
<p>The new node is an orphan with no parent; it must be added to the DOM tree with <code>XmlDomAppendChild</code>, and so on. See <code>XmlDomSetAttr</code> which creates and adds an attribute in a single operation.</p>
<p>The URI, qualified name and value are not copied, their pointers are just stored. The user is responsible for persistence and freeing of that data.</p>
<p class="subhead1"><a id="CAXML5204"></a>Syntax</p>
<pre>xmlattrnode* XmlDomCreateAttrNS(
   xmlctx *xctx, 
   xmldocnode *doc, 
   oratext *uri, 
   oratext *qname,
   oratext *value);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t50">Parameter</th>
<th class="cellalignment2921" id="r1c2-t50">In/Out</th>
<th class="cellalignment2921" id="r1c3-t50">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t50" headers="r1c1-t50">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t50 r1c2-t50">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t50 r1c3-t50">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t50" headers="r1c1-t50">
<pre>doc
</pre></td>
<td class="cellalignment2922" headers="r3c1-t50 r1c2-t50">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t50 r1c3-t50">XML document node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t50" headers="r1c1-t50">
<pre>uri
</pre></td>
<td class="cellalignment2922" headers="r4c1-t50 r1c2-t50">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t50 r1c3-t50">node&#39;s namespace URI; data encoding; user control</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t50" headers="r1c1-t50">
<pre>qname
</pre></td>
<td class="cellalignment2922" headers="r5c1-t50 r1c2-t50">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t50 r1c3-t50">node&#39;s qualified name; data encoding; user control</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r6c1-t50" headers="r1c1-t50">
<pre>value
</pre></td>
<td class="cellalignment2922" headers="r6c1-t50 r1c2-t50">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r6c1-t50 r1c3-t50">new node&#39;s value; data encoding; user control</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5205"></a>Returns</p>
<p><code>(xmlattrnode *)</code> new <code>Attr</code> node.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomsetattrvalue">XmlDomSetAttrValue()</a>, <a href="#Xmldomcreateattr">XmlDomCreateAttr()</a>, <a href="#Xmldomsetattr">XmlDomSetAttr()</a>, <a href="#Xmldomcleannode">XmlDomCleanNode()</a>, <a href="#Xmldomfreenode">XmlDomFreeNode()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5206" class="refsect2"><a id="Xmldomcreatecdata"></a>
<hr/>
<h3 class="refsect2"><a id="sthref123"></a><a id="sthref124"></a><a id="sthref125"></a>XmlDomCreateCDATA()</h3>
<p>Creates a <code>CDATASection</code> node with the given initial data (which should be in the data encoding). A <code>CDATASection</code> is considered verbatim and is never parsed; it will not be joined with adjacent <code>Text</code> nodes by the normalize operation. The initial data may be <code>NULL</code>; if provided, it is not verified, converted, or checked. The name of a <code>CDATA</code> node is always &#34;<code>#cdata-section</code>&#34;.</p>
<p>The new node is an orphan with no parent; it must be added to the DOM tree with <code>XmlDomAppendChild</code> and so on.</p>
<p>The <code>CDATA</code> is not copied, its pointer is just stored. The user is responsible for persistence and freeing of that data.</p>
<p class="subhead1"><a id="CAXML5207"></a>Syntax</p>
<pre>xmlcdatanode* XmlDomCreateCDATA(
   xmlctx *xctx, 
   xmldocnode *doc, 
   oratext *data);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t52">Parameter</th>
<th class="cellalignment2921" id="r1c2-t52">In/Out</th>
<th class="cellalignment2921" id="r1c3-t52">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t52" headers="r1c1-t52">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t52 r1c2-t52">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t52 r1c3-t52">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t52" headers="r1c1-t52">
<pre>doc
</pre></td>
<td class="cellalignment2922" headers="r3c1-t52 r1c2-t52">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t52 r1c3-t52">XML document node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t52" headers="r1c1-t52">
<pre>data
</pre></td>
<td class="cellalignment2922" headers="r4c1-t52 r1c2-t52">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t52 r1c3-t52">new node&#39;s <code>CDATA</code>; data encoding; user control</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5208"></a>Returns</p>
<p><code>(xmlcdatanode *)</code> new <code>CDATA</code> node.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomcreatetext">XmlDomCreateText()</a>, <a href="#Xmldomcleannode">XmlDomCleanNode()</a>, <a href="#Xmldomfreenode">XmlDomFreeNode()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5209" class="refsect2"><a id="Xmldomcreatecomment"></a>
<hr/>
<h3 class="refsect2"><a id="sthref126"></a><a id="sthref127"></a><a id="sthref128"></a>XmlDomCreateComment()</h3>
<p>Creates a <code>Comment</code> node with the given initial data (which must be in the data encoding). The data may be <code>NULL</code>; if provided, it is not verified, converted, or checked. The name of a <code>Comment</code> node is always &#34;<code>#comment</code>&#34;.</p>
<p>The new node is an orphan with no parent; it must be added to the DOM tree with <code>XmlDomAppendChild</code> and so on.</p>
<p>The comment data is not copied, its pointer is just stored. The user is responsible for persistence and freeing of that data.</p>
<p class="subhead1"><a id="CAXML5210"></a>Syntax</p>
<pre>xmlcommentnode* XmlDomCreateComment(
   xmlctx *xctx,
   xmldocnode *doc,
   oratext *data);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t54">Parameter</th>
<th class="cellalignment2921" id="r1c2-t54">In/Out</th>
<th class="cellalignment2921" id="r1c3-t54">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t54" headers="r1c1-t54">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t54 r1c2-t54">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t54 r1c3-t54">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t54" headers="r1c1-t54">
<pre>doc
</pre></td>
<td class="cellalignment2922" headers="r3c1-t54 r1c2-t54">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t54 r1c3-t54">XML document node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t54" headers="r1c1-t54">
<pre>data
</pre></td>
<td class="cellalignment2922" headers="r4c1-t54 r1c2-t54">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t54 r1c3-t54">new node&#39;s comment; data encoding; user control</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5211"></a>Returns</p>
<p><code>(xmlcommentnode *)</code> new <code>Comment</code> node.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomcleannode">XmlDomCleanNode()</a>, <a href="#Xmldomfreenode">XmlDomFreeNode()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5212" class="refsect2"><a id="Xmldomcreateelem"></a>
<hr/>
<h3 class="refsect2"><a id="sthref129"></a><a id="sthref130"></a><a id="sthref131"></a>XmlDomCreateElem()</h3>
<p>Creates an element node with the given tag name (which should be in the data encoding). Note that the tag name of an element is case sensitive. This is the non-namespace aware function: the new node will have <code>NULL</code> namespace URI and prefix, and its local name will be the same as its tag name, even if the tag name specified is a qualified name.</p>
<p>The new node is an orphan with no parent; it must be added to the DOM tree with <code>XmlDomAppendChild</code> and so on.</p>
<p>The <code>tagname</code> is not copied, its pointer is just stored. The user is responsible for persistence and freeing of that data.</p>
<p class="subhead1"><a id="CAXML5213"></a>Syntax</p>
<pre>xmlelemnode* XmlDomCreateElem(
   xmlctx *xctx, 
   xmldocnode *doc,
   oratext *tagname);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t56">Parameter</th>
<th class="cellalignment2921" id="r1c2-t56">In/Out</th>
<th class="cellalignment2921" id="r1c3-t56">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t56" headers="r1c1-t56">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t56 r1c2-t56">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t56 r1c3-t56">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t56" headers="r1c1-t56">
<pre>doc
</pre></td>
<td class="cellalignment2922" headers="r3c1-t56 r1c2-t56">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t56 r1c3-t56">XML document node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t56" headers="r1c1-t56">
<pre>tagname
</pre></td>
<td class="cellalignment2922" headers="r4c1-t56 r1c2-t56">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t56 r1c3-t56">new node&#39;s name; data encoding; user control</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5214"></a>Returns</p>
<p><code>(xmlelemnode *)</code> new <code>Element</code> node.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomcreateelemns">XmlDomCreateElemNS()</a>, <a href="#Xmldomcleannode">XmlDomCleanNode()</a>, <a href="#Xmldomfreenode">XmlDomFreeNode()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5215" class="refsect2"><a id="Xmldomcreateelemns"></a>
<hr/>
<h3 class="refsect2"><a id="sthref132"></a><a id="sthref133"></a><a id="sthref134"></a>XmlDomCreateElemNS()</h3>
<p>Creates an element with the given namespace URI and qualified name. Note that element names are case sensitive, and the qualified name is required though the URI may be <code>NULL</code>. The qualified name will be split into prefix and local parts, retrievable with <code>XmlDomGetNodePrefix</code>, <code>XmlDomGetNodeLocal</code>, and so on; the tagName will be the full qualified name.</p>
<p>The new node is an orphan with no parent; it must be added to the DOM tree with <code>XmlDomAppendChild</code> and so on.</p>
<p>The URI and qualified name are not copied, their pointers are just stored. The user is responsible for persistence and freeing of that data.</p>
<p class="subhead1"><a id="CAXML5216"></a>Syntax</p>
<pre>xmlelemnode* XmlDomCreateElemNS(
   xmlctx *xctx,
   xmldocnode *doc, 
   oratext *uri,
   oratext *qname);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t58">Parameter</th>
<th class="cellalignment2921" id="r1c2-t58">In/Out</th>
<th class="cellalignment2921" id="r1c3-t58">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t58" headers="r1c1-t58">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t58 r1c2-t58">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t58 r1c3-t58">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t58" headers="r1c1-t58">
<pre>doc
</pre></td>
<td class="cellalignment2922" headers="r3c1-t58 r1c2-t58">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t58 r1c3-t58">XML document node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t58" headers="r1c1-t58">
<pre>uri
</pre></td>
<td class="cellalignment2922" headers="r4c1-t58 r1c2-t58">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t58 r1c3-t58">new node&#39;s namespace URI; data encoding, user control</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t58" headers="r1c1-t58">
<pre>qname
</pre></td>
<td class="cellalignment2922" headers="r5c1-t58 r1c2-t58">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t58 r1c3-t58">new node&#39;s qualified name; data encoding; user control</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5217"></a>Returns</p>
<p><code>(xmlelemnode *)</code> new <code>Element</code> node.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomcreateelem">XmlDomCreateElem()</a>, <a href="#Xmldomcleannode">XmlDomCleanNode()</a>, <a href="#Xmldomfreenode">XmlDomFreeNode()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5218" class="refsect2"><a id="Xmldomcreateentityref"></a>
<hr/>
<h3 class="refsect2"><a id="sthref135"></a><a id="sthref136"></a><a id="sthref137"></a>XmlDomCreateEntityRef()</h3>
<p>Creates an <code>EntityReference</code> node; the name (which should be in the data encoding) is the name of the entity to be referenced. The named entity does not have to exist. The name is not verified, converted, or checked.</p>
<p><code>EntityReference</code> nodes are never generated by the parser; instead, entity references are expanded as encountered. On output, an entity reference node will turn into a &#34;&amp;name;&#34; style reference.</p>
<p>The new node is an orphan with no parent; it must be added to the DOM tree with <code>XmlDomAppendChild</code>, and so on.</p>
<p>The entity reference name is not copied, its pointer is just stored. The user is responsible for persistence and freeing of that data.</p>
<p class="subhead1"><a id="CAXML5219"></a>Syntax</p>
<pre>xmlentrefnode* XmlDomCreateEntityRef(
   xmlctx *xctx,
   xmldocnode *doc,
   oratext *name);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t60">Parameter</th>
<th class="cellalignment2921" id="r1c2-t60">In/Out</th>
<th class="cellalignment2921" id="r1c3-t60">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t60" headers="r1c1-t60">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t60 r1c2-t60">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t60 r1c3-t60">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t60" headers="r1c1-t60">
<pre>doc
</pre></td>
<td class="cellalignment2922" headers="r3c1-t60 r1c2-t60">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t60 r1c3-t60">XML document node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t60" headers="r1c1-t60">
<pre>name
</pre></td>
<td class="cellalignment2922" headers="r4c1-t60 r1c2-t60">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t60 r1c3-t60">name of referenced entity; data encoding; user control</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5220"></a>Returns</p>
<p><code>(xmlentrefnode *)</code> new <code>EntityReference</code> node.</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML5221" class="refsect2"><a id="Xmldomcreatefragment"></a>
<hr/>
<h3 class="refsect2"><a id="sthref138"></a><a id="sthref139"></a><a id="sthref140"></a>XmlDomCreateFragment()</h3>
<p>Creates an empty <code>DocumentFragment</code> node. A document fragment is treated specially when it is inserted into a DOM tree: the children of the fragment are inserted in order instead of the fragment node itself. After insertion, the fragment node will still exist, but have no children. See <code>XmlDomInsertBefore</code>, <code>XmlDomReplaceChild</code>, <code>XmlDomAppendChild</code>, and so on. The name of a fragment node is always &#34;<code>#document-fragment</code>&#34;.</p>
<p class="subhead1"><a id="CAXML5222"></a>Syntax</p>
<pre>xmlfragnode* XmlDomCreateFragment(
   xmlctx *xctx,
   xmldocnode *doc);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t61">Parameter</th>
<th class="cellalignment2921" id="r1c2-t61">In/Out</th>
<th class="cellalignment2921" id="r1c3-t61">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t61" headers="r1c1-t61">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t61 r1c2-t61">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t61 r1c3-t61">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t61" headers="r1c1-t61">
<pre>doc
</pre></td>
<td class="cellalignment2922" headers="r3c1-t61 r1c2-t61">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t61 r1c3-t61">XML document node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5223"></a>Returns</p>
<p><code>(xmlfragnode *)</code> new empty <code>DocumentFragment</code> node</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldominsertbefore">XmlDomInsertBefore()</a>, <a href="#Xmldomreplacechild">XmlDomReplaceChild()</a>, <a href="#Xmldomappendchild">XmlDomAppendChild()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5224" class="refsect2"><a id="Xmldomcreatepi"></a>
<hr/>
<h3 class="refsect2"><a id="sthref141"></a><a id="sthref142"></a><a id="sthref143"></a>XmlDomCreatePI()</h3>
<p>Creates a <code>ProcessingInstruction</code> node with the given target and data (which should be in the data encoding). The data may be <code>NULL</code> initially, and may be changed later (with <code>XmlDomSetPIData</code>), but the target is required and cannot be changed. Note the target and data are not verified, converted, or checked. The name of a PI node is the same as the target.</p>
<p>The new node is an orphan with no parent; it must be added to the DOM tree with <code>XmlDomAppendChild</code> and so on.</p>
<p>The PI&#39;s target and data are not copied, their pointers are just stored. The user is responsible for persistence and freeing of that data.</p>
<p class="subhead1"><a id="CAXML5225"></a>Syntax</p>
<pre>xmlpinode* XmlDomCreatePI(
   xmlctx *xctx
   xmldocnode *doc, 
   oratext *target,
   oratext *data);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t63">Parameter</th>
<th class="cellalignment2921" id="r1c2-t63">In/Out</th>
<th class="cellalignment2921" id="r1c3-t63">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t63" headers="r1c1-t63">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t63 r1c2-t63">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t63 r1c3-t63">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t63" headers="r1c1-t63">
<pre>doc
</pre></td>
<td class="cellalignment2922" headers="r3c1-t63 r1c2-t63">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t63 r1c3-t63">XML document node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t63" headers="r1c1-t63">
<pre>target
</pre></td>
<td class="cellalignment2922" headers="r4c1-t63 r1c2-t63">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t63 r1c3-t63">new node&#39;s target; data encoding; user control</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t63" headers="r1c1-t63">
<pre>data
</pre></td>
<td class="cellalignment2922" headers="r5c1-t63 r1c2-t63">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t63 r1c3-t63">new node&#39;s data; data encoding; user control</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5226"></a>Returns</p>
<p><code>(xmlpinode *)</code> new PI node.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetpitarget">XmlDomGetPITarget()</a>, <a href="#Xmldomgetpidata">XmlDomGetPIData()</a>, <a href="#Xmldomsetpidata">XmlDomSetPIData()</a>, <a href="#Xmldomcleannode">XmlDomCleanNode()</a>, <a href="#Xmldomfreenode">XmlDomFreeNode()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5227" class="refsect2"><a id="Xmldomcreatetext"></a>
<hr/>
<h3 class="refsect2"><a id="sthref144"></a><a id="sthref145"></a><a id="sthref146"></a>XmlDomCreateText()</h3>
<p>Creates a <code>Text</code> node with the given initial data (which must be non-<code>NULL</code> and in the data encoding). The data may be <code>NULL</code>; if provided, it is not verified, converted, checked, or parsed (entities will not be expanded). The name of a fragment node is always &#34;<code>#text</code>&#34;. New data for a <code>Text</code> node can be set; see the <code>CharacterData</code> interface for editing methods.</p>
<p>The new node is an orphan with no parent; it must be added to the DOM tree with <code>XmlDomAppendChild</code> and so on.</p>
<p>The text data is not copied, its pointer is just stored. The user is responsible for persistence and freeing of that data.</p>
<p class="subhead1"><a id="CAXML5228"></a>Syntax</p>
<pre>xmltextnode* XmlDomCreateText(
   xmlctx *xctx, 
   xmldocnode *doc,
   oratext *data);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t65">Parameter</th>
<th class="cellalignment2921" id="r1c2-t65">In/Out</th>
<th class="cellalignment2921" id="r1c3-t65">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t65" headers="r1c1-t65">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t65 r1c2-t65">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t65 r1c3-t65">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t65" headers="r1c1-t65">
<pre>doc
</pre></td>
<td class="cellalignment2922" headers="r3c1-t65 r1c2-t65">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t65 r1c3-t65">XML document node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t65" headers="r1c1-t65">
<pre>data
</pre></td>
<td class="cellalignment2922" headers="r4c1-t65 r1c2-t65">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t65 r1c3-t65">new node&#39;s text; data encoding; user control</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5229"></a>Returns</p>
<p><code>(xmltextnode *)</code> new <code>Text</code> node.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomcreatecdata">XmlDomCreateCDATA()</a>, <a href="#Xmldomsetnodevalue">XmlDomSetNodeValue()</a>, <a href="#Xmldomgetnodevalue">XmlDomGetNodeValue()</a>, <a href="#Xmldomsetchardata">XmlDomSetCharData()</a>, <a href="#Xmldomgetchardata">XmlDomGetCharData()</a>, <a href="#Xmldomgetchardatalength">XmlDomGetCharDataLength()</a>, <a href="#Xmldomsubstringdata">XmlDomSubstringData()</a>, <a href="#Xmldomappenddata">XmlDomAppendData()</a>, <a href="#Xmldominsertdata">XmlDomInsertData()</a>, <a href="#Xmldomdeletedata">XmlDomDeleteData()</a>, <a href="#Xmldomreplacedata">XmlDomReplaceData()</a>, <a href="#Xmldomcleannode">XmlDomCleanNode()</a>, <a href="#Xmldomfreenode">XmlDomFreeNode()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5230" class="refsect2"><a id="Xmldomfreestring"></a>
<hr/>
<h3 class="refsect2"><a id="sthref147"></a><a id="sthref148"></a><a id="sthref149"></a>XmlDomFreeString()</h3>
<p>Frees the string allocated by <code>XmlDomSubstringData</code> or similar functions. Note that strings explicitly saved with <code>XmlDomSaveString</code> are not freeable individually.</p>
<p class="subhead1"><a id="CAXML5231"></a>Syntax</p>
<pre>void XmlDomFreeString(
   xmlctx *xctx,
   xmldocnode *doc,
   oratext *str);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t67">Parameter</th>
<th class="cellalignment2921" id="r1c2-t67">In/Out</th>
<th class="cellalignment2921" id="r1c3-t67">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t67" headers="r1c1-t67">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t67 r1c2-t67">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t67 r1c3-t67">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t67" headers="r1c1-t67">
<pre>doc
</pre></td>
<td class="cellalignment2922" headers="r3c1-t67 r1c2-t67">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t67 r1c3-t67">document where the string belongs</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t67" headers="r1c1-t67">
<pre>str
</pre></td>
<td class="cellalignment2922" headers="r4c1-t67 r1c2-t67">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t67 r1c3-t67">string to free</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomsavestring">XmlDomSaveString()</a>, <a href="#Xmldomsavestring2">XmlDomSaveString2()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5232" class="refsect2"><a id="Xmldomgetbaseuri"></a>
<hr/>
<h3 class="refsect2"><a id="sthref150"></a><a id="sthref151"></a><a id="sthref152"></a>XmlDomGetBaseURI()</h3>
<p>Returns the base URI for a document. Usually only documents that were loaded from a URI will automatically have a base URI; documents loaded from other sources (<code>stdin</code>, buffer, and so on) will not naturally have a base URI, but a base URI may have been set for them using <code>XmlDomSetBaseURI</code>, for the purposes of resolving relative URIs in inclusion.</p>
<p class="subhead1"><a id="CAXML5233"></a>Syntax</p>
<pre>oratext *XmlDomGetBaseURI(
   xmlctx *xctx,
   xmldocnode *doc);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t69">Parameter</th>
<th class="cellalignment2921" id="r1c2-t69">In/Out</th>
<th class="cellalignment2921" id="r1c3-t69">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t69" headers="r1c1-t69">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t69 r1c2-t69">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t69 r1c3-t69">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t69" headers="r1c1-t69">
<pre>doc
</pre></td>
<td class="cellalignment2922" headers="r3c1-t69 r1c2-t69">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t69 r1c3-t69">XML document node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5234"></a>Returns</p>
<p><code>(oratext *)</code> document&#39;s base URI [or <code>NULL</code>]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomsetbaseuri">XmlDomSetBaseURI()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5235" class="refsect2"><a id="Xmldomgetdtd"></a>
<hr/>
<h3 class="refsect2"><a id="sthref153"></a><a id="sthref154"></a><a id="sthref155"></a>XmlDomGetDTD()</h3>
<p>Returns the DTD node associated with current document; if there is no DTD, returns <code>NULL</code>. The DTD cannot be edited, but its children may be retrieved with <code>XmlDomGetChildNodes</code> as for other node types.</p>
<p class="subhead1"><a id="CAXML5236"></a>Syntax</p>
<pre>xmldtdnode* XmlDomGetDTD(
   xmlctx *xctx,
   xmldocnode *doc);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t71">Parameter</th>
<th class="cellalignment2921" id="r1c2-t71">In/Out</th>
<th class="cellalignment2921" id="r1c3-t71">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t71" headers="r1c1-t71">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t71 r1c2-t71">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t71 r1c3-t71">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t71" headers="r1c1-t71">
<pre>doc
</pre></td>
<td class="cellalignment2922" headers="r3c1-t71 r1c2-t71">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t71 r1c3-t71">XML document node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5237"></a>Returns</p>
<p><code>(xmldtdnode *)</code> DTD node for document [or <code>NULL</code>]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomsetdtd">XmlDomSetDTD()</a>, <a href="xml.htm#Xmlcreatedtd">XmlCreateDTD()</a> and <a href="xml.htm#Xmlcreate">XmlCreate()</a> in <a href="xml.htm#Xmlpackage">Chapter 11, &#34;Package XML APIs for C&#34;</a>, <a href="#Xmldomgetdtdname">XmlDomGetDTDName()</a>, <a href="#Xmldomgetdtdentities">XmlDomGetDTDEntities()</a>, and <a href="#Xmldomgetdtdnotations">XmlDomGetDTDNotations()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5238" class="refsect2"><a id="Xmldomgetdecl"></a>
<hr/>
<h3 class="refsect2"><a id="sthref156"></a><a id="sthref157"></a><a id="sthref158"></a>XmlDomGetDecl()</h3>
<p>Returns the information from a document&#39;s <code>XMLDecl</code>. If there is no <code>XMLDecl</code>, returns <code>XMLERR_NO_DECL</code>. Returned are the XML version# (&#34;<code>1.0</code>&#34; or &#34;<code>2.0</code>&#34;), the specified encoding, and the standalone value. If encoding is not specified, <code>NULL</code> will be set. The standalone flag is three-state: <code>&lt; 0</code> if standalone was not specified, <code>0</code> if it was specified and <code>FALSE</code>, <code>&gt; 0</code> if it was specified and <code>TRUE</code>.</p>
<p class="subhead1"><a id="CAXML5239"></a>Syntax</p>
<pre>xmlerr XmlDomGetDecl(
   xmlctx *xctx,
   xmldocnode *doc,
   oratext **ver, 
   oratext **enc,
   sb4 *std);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t73">Parameter</th>
<th class="cellalignment2921" id="r1c2-t73">In/Out</th>
<th class="cellalignment2921" id="r1c3-t73">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t73" headers="r1c1-t73">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t73 r1c2-t73">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t73 r1c3-t73">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t73" headers="r1c1-t73">
<pre>doc
</pre></td>
<td class="cellalignment2922" headers="r3c1-t73 r1c2-t73">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t73 r1c3-t73">XML document node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t73" headers="r1c1-t73">
<pre>ver
</pre></td>
<td class="cellalignment2922" headers="r4c1-t73 r1c2-t73">
<pre>OUT
</pre></td>
<td class="cellalignment2922" headers="r4c1-t73 r1c3-t73">XML version</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t73" headers="r1c1-t73">
<pre>enc
</pre></td>
<td class="cellalignment2922" headers="r5c1-t73 r1c2-t73">
<pre>OUT
</pre></td>
<td class="cellalignment2922" headers="r5c1-t73 r1c3-t73">encoding specification</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r6c1-t73" headers="r1c1-t73">
<pre>std
</pre></td>
<td class="cellalignment2922" headers="r6c1-t73 r1c2-t73">
<pre>OUT
</pre></td>
<td class="cellalignment2922" headers="r6c1-t73 r1c3-t73">standalone specification</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5240"></a>Returns</p>
<p><code>(xmlerr)</code> XML error code, perhaps version/encoding/standalone set</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML5241" class="refsect2"><a id="Xmldomgetdocelem"></a>
<hr/>
<h3 class="refsect2"><a id="sthref159"></a><a id="sthref160"></a><a id="sthref161"></a>XmlDomGetDocElem()</h3>
<p>Returns the root element (node) of the DOM tree, or <code>NULL</code> if there is none. Each document has only one uppermost <code>Element</code> node, called the root element. It is created after a document is parsed successfully, or manually by <code>XmlDomCreateElem</code> then <code>XmlDomAppendChild</code>, and so on.</p>
<p class="subhead1"><a id="CAXML5242"></a>Syntax</p>
<pre>xmlelemnode* XmlDomGetDocElem(
   xmlctx *xctx,
   xmldocnode *doc);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t74">Parameter</th>
<th class="cellalignment2921" id="r1c2-t74">In/Out</th>
<th class="cellalignment2921" id="r1c3-t74">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t74" headers="r1c1-t74">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t74 r1c2-t74">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t74 r1c3-t74">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t74" headers="r1c1-t74">
<pre>doc
</pre></td>
<td class="cellalignment2922" headers="r3c1-t74 r1c2-t74">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t74 r1c3-t74">XML document node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5243"></a>Returns</p>
<p><code>(xmlelemnode *)</code> root element [or <code>NULL</code>]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomcreateelem">XmlDomCreateElem()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5244" class="refsect2"><a id="Xmldomgetdocelembyid"></a>
<hr/>
<h3 class="refsect2"><a id="sthref162"></a><a id="sthref163"></a><a id="sthref164"></a>XmlDomGetDocElemByID()</h3>
<p>Returns the element node which has the given ID. If no such ID is defined, returns <code>NULL</code>. Note that attributes named &#34;ID&#34; are not automatically of type ID; ID attributes (which can have any name) must be declared as type ID in the DTD.</p>
<p>The given ID should be in the data encoding or it might not match.</p>
<p class="subhead1"><a id="CAXML5245"></a>Syntax</p>
<pre>xmlelemnode* XmlDomGetDocElemByID(
   xmlctx *xctx,
   xmldocnode *doc,
   oratext *id);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t76">Parameter</th>
<th class="cellalignment2921" id="r1c2-t76">In/Out</th>
<th class="cellalignment2921" id="r1c3-t76">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t76" headers="r1c1-t76">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t76 r1c2-t76">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t76 r1c3-t76">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t76" headers="r1c1-t76">
<pre>doc
</pre></td>
<td class="cellalignment2922" headers="r3c1-t76 r1c2-t76">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t76 r1c3-t76">XML document node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t76" headers="r1c1-t76">
<pre>id
</pre></td>
<td class="cellalignment2922" headers="r4c1-t76 r1c2-t76">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t76 r1c3-t76">element&#39;s unique ID; data encoding</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5246"></a>Returns</p>
<p><code>(xmlelemnode *)</code> matching element.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetdocelemsbytag">XmlDomGetDocElemsByTag()</a>, <a href="#Xmldomgetdocelemsbytagns">XmlDomGetDocElemsByTagNS()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5247" class="refsect2"><a id="Xmldomgetdocelemsbytag"></a>
<hr/>
<h3 class="refsect2"><a id="sthref165"></a><a id="sthref166"></a><a id="sthref167"></a>XmlDomGetDocElemsByTag()</h3>
<p>Returns a list of all elements in the document tree rooted at the root node with a given tag name, in document order (the order in which they would be encountered in a preorder traversal of the tree). If root is <code>NULL</code>, the entire document is searched.</p>
<p>The special name &#34;<code>*</code>&#34; matches all tag names; a <code>NULL</code> name matches nothing. Note that tag names are case sensitive, and should be in the data encoding or a mismatch might occur.</p>
<p>This function is not namespace aware; the full tag names are compared. If two qualified names with two different prefixes both of which map to the same URI are compared, the comparison will fail. See <code>XmlDomGetElemsByTagNS</code> for the namespace-aware version.</p>
<p>The list should be freed with <code>XmlDomFreeNodeList</code> when it is no longer needed.</p>
<p>The list is not live, it is a snapshot. That is, if a new node which matched the tag name were added to the DOM after the list was returned, the list would not automatically be updated to include the node.</p>
<p class="subhead1"><a id="CAXML5248"></a>Syntax</p>
<pre>xmlnodelist* XmlDomGetDocElemsByTag(
   xmlctx *xctx,
   xmldocnode *doc,
   oratext *name);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t78">Parameter</th>
<th class="cellalignment2921" id="r1c2-t78">In/Out</th>
<th class="cellalignment2921" id="r1c3-t78">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t78" headers="r1c1-t78">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t78 r1c2-t78">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t78 r1c3-t78">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t78" headers="r1c1-t78">
<pre>doc
</pre></td>
<td class="cellalignment2922" headers="r3c1-t78 r1c2-t78">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t78 r1c3-t78">XML document node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t78" headers="r1c1-t78">
<pre>name
</pre></td>
<td class="cellalignment2922" headers="r4c1-t78 r1c2-t78">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t78 r1c3-t78">tagname to match; data encoding; <code>*</code> for all</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5249"></a>Returns</p>
<p><code>(xmlnodelist *)</code> new <code>NodeList</code> containing all matched <code>Element</code>s.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetdocelembyid">XmlDomGetDocElemByID()</a>, <a href="#Xmldomgetdocelemsbytagns">XmlDomGetDocElemsByTagNS()</a>, <a href="#Xmldomfreenodelist">XmlDomFreeNodeList()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5250" class="refsect2"><a id="Xmldomgetdocelemsbytagns"></a>
<hr/>
<h3 class="refsect2"><a id="sthref168"></a><a id="sthref169"></a><a id="sthref170"></a>XmlDomGetDocElemsByTagNS()</h3>
<p>Returns a list of all elements (in the document tree rooted at the given node) with a given namespace URI and local name, in the order in which they would be encountered in a preorder traversal of the tree. If root is <code>NULL</code>, the entire document is searched.</p>
<p>The URI and local name should be in the data encoding. The special local name &#34;*&#34; matches all local names; a <code>NULL</code> local name matches nothing. Namespace URIs must always match, however, no wildcard is allowed. Note that comparisons are case sensitive. See <code>XmlDomGetDocElemsByTag</code> for the non-namespace aware version.</p>
<p>The list should be freed with <code>XmlDomFreeNodeList</code> when it is no longer needed.</p>
<p>The list is not live, it is a snapshot. That is, if a new node which matched the tag name were added to the DOM after the list was returned, the list would not automatically be updated to include the node.</p>
<p class="subhead1"><a id="CAXML5251"></a>Syntax</p>
<pre>xmlnodelist* XmlDomGetDocElemsByTagNS(
   xmlctx *xctx,
   xmldocnode *doc, 
   oratext *uri,
   oratext *local);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t80">Parameter</th>
<th class="cellalignment2921" id="r1c2-t80">In/Out</th>
<th class="cellalignment2921" id="r1c3-t80">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t80" headers="r1c1-t80">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t80 r1c2-t80">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t80 r1c3-t80">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t80" headers="r1c1-t80">
<pre>doc
</pre></td>
<td class="cellalignment2922" headers="r3c1-t80 r1c2-t80">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t80 r1c3-t80">XML document node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t80" headers="r1c1-t80">
<pre>uri
</pre></td>
<td class="cellalignment2922" headers="r4c1-t80 r1c2-t80">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t80 r1c3-t80">namespace URI to match; data encoding; <code>*</code> matches all</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t80" headers="r1c1-t80">
<pre>local
</pre></td>
<td class="cellalignment2922" headers="r5c1-t80 r1c2-t80">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t80 r1c3-t80">local name to match; data encoding; <code>*</code> matches all</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5252"></a>Returns</p>
<p><code>(xmlnodelist *)</code> new <code>NodeList</code> containing all matched <code>Element</code>s.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetdocelembyid">XmlDomGetDocElemByID()</a>, <a href="#Xmldomgetdocelemsbytag">XmlDomGetDocElemsByTag()</a>, <a href="#Xmldomfreenodelist">XmlDomFreeNodeList()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5253" class="refsect2"><a id="Xmldomgetlasterror"></a>
<hr/>
<h3 class="refsect2"><a id="sthref171"></a><a id="sthref172"></a><a id="sthref173"></a>XmlDomGetLastError()</h3>
<p>Returns the error code of the last error which occurred in the given document.</p>
<p class="subhead1"><a id="CAXML5254"></a>Syntax</p>
<pre>xmlerr XmlDomGetLastError(
   xmlctx *xctx,
   xmldocnode *doc);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t82">Parameter</th>
<th class="cellalignment2921" id="r1c2-t82">In/Out</th>
<th class="cellalignment2921" id="r1c3-t82">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t82" headers="r1c1-t82">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t82 r1c2-t82">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t82 r1c3-t82">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t82" headers="r1c1-t82">
<pre>doc
</pre></td>
<td class="cellalignment2922" headers="r3c1-t82 r1c2-t82">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t82 r1c3-t82">XML document node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5255"></a>Returns</p>
<p><code>(xmlerr)</code> numeric error code, <code>0</code> if no error</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML5256" class="refsect2"><a id="Xmldomgetschema"></a>
<hr/>
<h3 class="refsect2"><a id="sthref174"></a><a id="sthref175"></a><a id="sthref176"></a>XmlDomGetSchema()</h3>
<p>Returns URI of schema associated with document, if there is one, else returns <code>NULL</code>. The <code>XmlLoadDom</code> functions take a schema location hint (URI); the schema is used for efficient layout of <code>XMLType</code> data. If a schema was provided at load time, this function returns <code>TRUE</code>.</p>
<p class="subhead1"><a id="CAXML5257"></a>Syntax</p>
<pre>oratext* XmlDomGetSchema(
   xmlctx *xctx,
   xmldocnode *doc);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t83">Parameter</th>
<th class="cellalignment2921" id="r1c2-t83">In/Out</th>
<th class="cellalignment2921" id="r1c3-t83">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t83" headers="r1c1-t83">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t83 r1c2-t83">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t83 r1c3-t83">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t83" headers="r1c1-t83">
<pre>doc
</pre></td>
<td class="cellalignment2922" headers="r3c1-t83 r1c2-t83">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t83 r1c3-t83">XML document node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5258"></a>Returns</p>
<p><code>(oratext *)</code> Schema URI or <code>NULL</code></p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomisschemabased">XmlDomIsSchemaBased()</a>, <a href="xml.htm#Xmlloaddom">XmlLoadDom()</a> in <a href="xml.htm#Xmlpackage">Chapter 11, &#34;Package XML APIs for C&#34;</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5259" class="refsect2"><a id="Xmldomimportnode"></a>
<hr/>
<h3 class="refsect2"><a id="sthref177"></a><a id="sthref178"></a><a id="sthref179"></a>XmlDomImportNode()</h3>
<p>Imports a node from one <code>Document</code> to another. The new node is an orphan and has no parent; it must be added to the DOM tree with <code>XmlDomAppendChild</code>, and so on. The original node is not modified in any way or removed from its document; instead, a new node is created with copies of all the original node&#39;s qualified name, prefix, namespace URI, and local name.</p>
<p>As with <code>XmlDomCloneNode,</code> the deep controls whether the children of the node are recursively imported. If <code>FALSE</code>, only the node itself is imported, and it will have no children. If <code>TRUE</code>, all descendents of the node will be imported as well, and an entire new subtree created.</p>
<p><code>Document</code> and <code>DocumentType</code> nodes cannot be imported. Imported attributes will have their specified flags set to <code>TRUE</code>. Elements will have only their specified attributes imported; non-specified (default) attributes are omitted. New default attributes (for the destination document) are then added.</p>
<p class="subhead1"><a id="CAXML5260"></a>Syntax</p>
<pre>xmlnode* XmlDomImportNode(
   xmlctx *xctx,
   xmldocnode *doc, 
   xmlctx *nctx,
   xmlnode *node,
   boolean deep);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t85">Parameter</th>
<th class="cellalignment2921" id="r1c2-t85">In/Out</th>
<th class="cellalignment2921" id="r1c3-t85">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t85" headers="r1c1-t85">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t85 r1c2-t85">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t85 r1c3-t85">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t85" headers="r1c1-t85">
<pre>doc
</pre></td>
<td class="cellalignment2922" headers="r3c1-t85 r1c2-t85">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t85 r1c3-t85">XML document node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t85" headers="r1c1-t85">
<pre>nctx
</pre></td>
<td class="cellalignment2922" headers="r4c1-t85 r1c2-t85">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t85 r1c3-t85">XML context of imported node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t85" headers="r1c1-t85">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r5c1-t85 r1c2-t85">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t85 r1c3-t85">node to import</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r6c1-t85" headers="r1c1-t85">
<pre>deep
</pre></td>
<td class="cellalignment2922" headers="r6c1-t85 r1c2-t85">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r6c1-t85 r1c3-t85"><code>TRUE</code> to import the subtree recursively</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5261"></a>Returns</p>
<p><code>(xmlnode *)</code> newly imported node (in this <code>Document</code>).</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomclonenode">XmlDomCloneNode()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5262" class="refsect2"><a id="Xmldomisschemabased"></a>
<hr/>
<h3 class="refsect2"><a id="sthref180"></a><a id="sthref181"></a><a id="sthref182"></a>XmlDomIsSchemaBased()</h3>
<p>Returns flag specifying whether there is a schema associated with this document. The <code>XmlLoadDom</code> functions take a schema location hint (URI); the schema is used for efficient layout of <code>XMLType</code> data. If a schema was provided at load time, this function returns <code>TRUE</code>.</p>
<p class="subhead1"><a id="CAXML5263"></a>Syntax</p>
<pre>boolean XmlDomIsSchemaBased(
   xmlctx *xctx,
   xmldocnode *doc);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t87">Parameter</th>
<th class="cellalignment2921" id="r1c2-t87">In/Out</th>
<th class="cellalignment2921" id="r1c3-t87">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t87" headers="r1c1-t87">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t87 r1c2-t87">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t87 r1c3-t87">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t87" headers="r1c1-t87">
<pre>doc
</pre></td>
<td class="cellalignment2922" headers="r3c1-t87 r1c2-t87">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t87 r1c3-t87">XML document node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5264"></a>Returns</p>
<p><code>(boolean)</code> <code>TRUE</code> if there is a schema associated with the document</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetschema">XmlDomGetSchema()</a>, <a href="xml.htm#Xmlloaddom">XmlLoadDom()</a> in <a href="xml.htm#Xmlpackage">Chapter 11, &#34;Package XML APIs for C&#34;</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5265" class="refsect2"><a id="Xmldomsavestring"></a>
<hr/>
<h3 class="refsect2"><a id="sthref183"></a><a id="sthref184"></a><a id="sthref185"></a>XmlDomSaveString()</h3>
<p>Copies the given string into the document&#39;s memory pool, so that it persists for the life of the document. The individual string will not be freeable, and the storage will be returned only when the entire document is freed. Works on single-byte or multibyte encodings; for Unicode strings, use <code>XmlDomSaveString2</code>.</p>
<p class="subhead1"><a id="CAXML5266"></a>Syntax</p>
<pre>oratext* XmlDomSaveString(
   xmlctx *xctx,
   xmldocnode *doc,
   oratext *str);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t89">Parameter</th>
<th class="cellalignment2921" id="r1c2-t89">In/Out</th>
<th class="cellalignment2921" id="r1c3-t89">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t89" headers="r1c1-t89">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t89 r1c2-t89">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t89 r1c3-t89">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t89" headers="r1c1-t89">
<pre>doc
</pre></td>
<td class="cellalignment2922" headers="r3c1-t89 r1c2-t89">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t89 r1c3-t89">XML document node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t89" headers="r1c1-t89">
<pre>str
</pre></td>
<td class="cellalignment2922" headers="r4c1-t89 r1c2-t89">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t89 r1c3-t89">string to save; data encoding; single- or multi-byte only</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5267"></a>Returns</p>
<p><code>(oratext *)</code> saved copy of string</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomsavestring2">XmlDomSaveString2()</a>, <a href="xml.htm#Xmlfreedocument">XmlFreeDocument()</a> in <a href="xml.htm#Xmlpackage">Chapter 11, &#34;Package XML APIs for C&#34;</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5268" class="refsect2"><a id="Xmldomsavestring2"></a>
<hr/>
<h3 class="refsect2"><a id="sthref186"></a><a id="sthref187"></a><a id="sthref188"></a>XmlDomSaveString2()</h3>
<p>Copies the given string into the document&#39;s memory pool, so that it persists for the life of the document. The individual string will not be freeable, and the storage will be returned only when the entire document is free. Works on Unicode strings only; for single-byte or multibyte strings, use <code>XmlDomSaveString</code>.</p>
<p class="subhead1"><a id="CAXML5269"></a>Syntax</p>
<pre>ub2* XmlDomSaveString2(
   xmlctx *xctx,
   xmldocnode *doc,
   ub2 *ustr);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t91">Parameter</th>
<th class="cellalignment2921" id="r1c2-t91">In/Out</th>
<th class="cellalignment2921" id="r1c3-t91">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t91" headers="r1c1-t91">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t91 r1c2-t91">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t91 r1c3-t91">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t91" headers="r1c1-t91">
<pre>doc
</pre></td>
<td class="cellalignment2922" headers="r3c1-t91 r1c2-t91">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t91 r1c3-t91">XML document node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t91" headers="r1c1-t91">
<pre>ustr
</pre></td>
<td class="cellalignment2922" headers="r4c1-t91 r1c2-t91">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t91 r1c3-t91">string to save; data encoding; Unicode only</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5270"></a>Returns</p>
<p><code>(ub2 *)</code> saved copy of string</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomsavestring">XmlDomSaveString()</a>, <a href="xml.htm#Xmlfreedocument">XmlFreeDocument()</a> in <a href="xml.htm#Xmlpackage">Chapter 11, &#34;Package XML APIs for C&#34;</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5271" class="refsect2"><a id="Xmldomsetbaseuri"></a>
<hr/>
<h3 class="refsect2"><a id="sthref189"></a><a id="sthref190"></a><a id="sthref191"></a>XmlDomSetBaseURI()</h3>
<p>Only documents that were loaded from a URI will automatically have a base URI; documents loaded from other sources (stdin, buffer, and so on) will not naturally have a base URI, so this API is used to set a base URI, for the purposes of relative URI resolution in includes. The base URI should be in the data encoding, and a copy will be made.</p>
<p class="subhead1"><a id="CAXML5272"></a>Syntax</p>
<pre>xmlerr XmlDomSetBaseURI(
   xmlctx *xctx, 
   xmldocnode *doc, 
   oratext *uri);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t93">Parameter</th>
<th class="cellalignment2921" id="r1c2-t93">In/Out</th>
<th class="cellalignment2921" id="r1c3-t93">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t93" headers="r1c1-t93">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t93 r1c2-t93">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t93 r1c3-t93">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t93" headers="r1c1-t93">
<pre>doc
</pre></td>
<td class="cellalignment2922" headers="r3c1-t93 r1c2-t93">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t93 r1c3-t93">XML document node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t93" headers="r1c1-t93">
<pre>uri
</pre></td>
<td class="cellalignment2922" headers="r4c1-t93 r1c2-t93">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t93 r1c3-t93">base URI to set; data encoding</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5273"></a>Returns</p>
<p><code>(xmlerr)</code> XML error code</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetbaseuri">XmlDomGetBaseURI()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5274" class="refsect2"><a id="Xmldomsetdtd"></a>
<hr/>
<h3 class="refsect2"><a id="sthref192"></a><a id="sthref193"></a><a id="sthref194"></a>XmlDomSetDTD()</h3>
<p>Sets the DTD for document. Note this call may only be used for a blank document, before any parsing has taken place. A single DTD can be set for multiple documents, so when a document with a set DTD is freed, the set DTD is not also freed.</p>
<p class="subhead1"><a id="CAXML5275"></a>Syntax</p>
<pre>xmlerr XmlDomSetDTD(
   xmlctx *xctx, 
   xmldocnode *doc, 
   xmldtdnode *dtdnode);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t95">Parameter</th>
<th class="cellalignment2921" id="r1c2-t95">In/Out</th>
<th class="cellalignment2921" id="r1c3-t95">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t95" headers="r1c1-t95">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t95 r1c2-t95">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t95 r1c3-t95">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t95" headers="r1c1-t95">
<pre>doc
</pre></td>
<td class="cellalignment2922" headers="r3c1-t95 r1c2-t95">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t95 r1c3-t95">XML document node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t95" headers="r1c1-t95">
<pre>dtdnode
</pre></td>
<td class="cellalignment2922" headers="r4c1-t95 r1c2-t95">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t95 r1c3-t95"><code>DocumentType</code> node to set</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5276"></a>Returns</p>
<p><code>(xmlerr)</code> numeric error code, <code>0</code> on success</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetdtd">XmlDomGetDTD()</a>, <a href="#Xmldomgetdtdname">XmlDomGetDTDName()</a>, <a href="#Xmldomgetdtdentities">XmlDomGetDTDEntities()</a>, <a href="#Xmldomgetdtdnotations">XmlDomGetDTDNotations()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5277" class="refsect2"><a id="Xmldomsetdocorder"></a>
<hr/>
<h3 class="refsect2"><a id="sthref195"></a><a id="sthref196"></a><a id="sthref197"></a>XmlDomSetDocOrder()</h3>
<p>Sets the document order for each node in the current document. Must be called once on the final document before XSLT processing can occur. Note this is called automatically by the XSLT processor, so ordinarily the user need not make this call.</p>
<p class="subhead1"><a id="CAXML5278"></a>Syntax</p>
<pre>ub4 XmlDomSetDocOrder(
   xmlctx *xctx, 
   xmldocnode *doc,
   ub4 start_id);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t97">Parameter</th>
<th class="cellalignment2921" id="r1c2-t97">In/Out</th>
<th class="cellalignment2921" id="r1c3-t97">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t97" headers="r1c1-t97">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t97 r1c2-t97">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t97 r1c3-t97">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t97" headers="r1c1-t97">
<pre>doc
</pre></td>
<td class="cellalignment2922" headers="r3c1-t97 r1c2-t97">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t97 r1c3-t97">XML document node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t97" headers="r1c1-t97">
<pre>start_id
</pre></td>
<td class="cellalignment2922" headers="r4c1-t97 r1c2-t97">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t97 r1c3-t97">string ID number</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5279"></a>Returns</p>
<p><code>(ub4)</code> highest ordinal assigned</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML5280" class="refsect2"><a id="Xmldomsetlasterror"></a>
<hr/>
<h3 class="refsect2"><a id="sthref198"></a><a id="sthref199"></a><a id="sthref200"></a>XmlDomSetLastError()</h3>
<p>Sets the Last Error code for the given document. If <code>doc</code> is <code>NULL</code>, sets the error code for the XML context.</p>
<p class="subhead1"><a id="CAXML5281"></a>Syntax</p>
<pre>xmlerr XmlDomSetLastError(
   xmlctx *xctx, 
   xmldocnode *doc,
   xmlerr errcode);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t98">Parameter</th>
<th class="cellalignment2921" id="r1c2-t98">In/Out</th>
<th class="cellalignment2921" id="r1c3-t98">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t98" headers="r1c1-t98">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t98 r1c2-t98">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t98 r1c3-t98">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t98" headers="r1c1-t98">
<pre>doc
</pre></td>
<td class="cellalignment2922" headers="r3c1-t98 r1c2-t98">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t98 r1c3-t98">XML document node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t98" headers="r1c1-t98">
<pre>errcode
</pre></td>
<td class="cellalignment2922" headers="r4c1-t98 r1c2-t98">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t98 r1c3-t98">error code to set, <code>0</code> to clear error</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5282"></a>Returns</p>
<p><code>(xmlerr)</code> original error code</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML5283" class="refsect2"><a id="Xmldomsync"></a>
<hr/>
<h3 class="refsect2"><a id="sthref201"></a><a id="sthref202"></a><a id="sthref203"></a>XmlDomSync()</h3>
<p>Causes a modified DOM to be written back out to its original source, synchronizing the persistent store and in-memory versions.</p>
<p class="subhead1"><a id="CAXML5284"></a>Syntax</p>
<pre>xmlerr XmlDomSync(
   xmlctx *xctx, 
   xmldocnode *doc);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t99">Parameter</th>
<th class="cellalignment2921" id="r1c2-t99">In/Out</th>
<th class="cellalignment2921" id="r1c3-t99">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t99" headers="r1c1-t99">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t99 r1c2-t99">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t99 r1c3-t99">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t99" headers="r1c1-t99">
<pre>doc
</pre></td>
<td class="cellalignment2922" headers="r3c1-t99 r1c2-t99">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t99 r1c3-t99">XML document node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5285"></a>Returns</p>
<p><code>(xmlerr)</code> numeric error code, <code>0</code> on success</p>
</div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="BABEABHC"></a>
<hr/>
<div id="CAXML00304" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">DocumentType Interface</h2>
<p><a href="#BABGFBHG">Table 3-4</a> summarizes the methods available through the <code>DocumentType</code> interface.</p>
<div id="CAXML5286" class="tblformal">
<p class="titleintable"><a id="sthref204"></a><a id="BABGFBHG"></a>Table 3-4 Summary of DocumentType Methods; DOM Package</p>
<table class="cellalignment2920" title="Summary of DocumentType Methods; DOM Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t100">Function</th>
<th class="cellalignment2921" id="r1c2-t100">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t100" headers="r1c1-t100">
<p><a href="#Xmldomgetdtdentities">XmlDomGetDTDEntities()</a></p>
</td>
<td class="cellalignment2922" headers="r2c1-t100 r1c2-t100">
<p>Get entities of DTD.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t100" headers="r1c1-t100">
<p><a href="#Xmldomgetdtdinternalsubset">XmlDomGetDTDInternalSubset()</a></p>
</td>
<td class="cellalignment2922" headers="r3c1-t100 r1c2-t100">
<p>Get DTD&#39;s internal subset.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t100" headers="r1c1-t100">
<p><a href="#Xmldomgetdtdname">XmlDomGetDTDName()</a></p>
</td>
<td class="cellalignment2922" headers="r4c1-t100 r1c2-t100">
<p>Get name of DTD.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t100" headers="r1c1-t100">
<p><a href="#Xmldomgetdtdnotations">XmlDomGetDTDNotations()</a></p>
</td>
<td class="cellalignment2922" headers="r5c1-t100 r1c2-t100">
<p>Get notations of DTD.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r6c1-t100" headers="r1c1-t100">
<p><a href="#Xmldomgetdtdpubid">XmlDomGetDTDPubID()</a></p>
</td>
<td class="cellalignment2922" headers="r6c1-t100 r1c2-t100">
<p>Get DTD&#39;s public ID.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r7c1-t100" headers="r1c1-t100">
<p><a href="#Xmldomgetdtdsysid">XmlDomGetDTDSysID()</a></p>
</td>
<td class="cellalignment2922" headers="r7c1-t100 r1c2-t100">
<p>Get DTD&#39;s system ID.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CAXML5287" class="refsect2"><a id="Xmldomgetdtdentities"></a>
<hr/>
<h3 class="refsect2"><a id="sthref205"></a><a id="sthref206"></a><a id="sthref207"></a>XmlDomGetDTDEntities()</h3>
<p>Returns a named node map of general entities defined by the DTD. If the node is not a DTD, or has no general entities, returns <code>NULL</code>.</p>
<p class="subhead1"><a id="CAXML5288"></a>Syntax</p>
<pre>xmlnamedmap* XmlDomGetDTDEntities(
   xmlctx *xctx,
   xmldtdnode *dtd);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t101">Parameter</th>
<th class="cellalignment2921" id="r1c2-t101">In/Out</th>
<th class="cellalignment2921" id="r1c3-t101">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t101" headers="r1c1-t101">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t101 r1c2-t101">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t101 r1c3-t101">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t101" headers="r1c1-t101">
<pre>dtd
</pre></td>
<td class="cellalignment2922" headers="r3c1-t101 r1c2-t101">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t101 r1c3-t101">DTD node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5289"></a>Returns</p>
<p><code>(xmlnamedmap *)</code> named node map containing entities declared in DTD</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetdtd">XmlDomGetDTD()</a>, <a href="#Xmldomgetdtdname">XmlDomGetDTDName()</a>, <a href="#Xmldomgetdtdnotations">XmlDomGetDTDNotations()</a>, <a href="#Xmldomgetdtdsysid">XmlDomGetDTDSysID()</a>, <a href="#Xmldomgetdtdinternalsubset">XmlDomGetDTDInternalSubset()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5290" class="refsect2"><a id="Xmldomgetdtdinternalsubset"></a>
<hr/>
<h3 class="refsect2"><a id="sthref208"></a><a id="sthref209"></a><a id="sthref210"></a>XmlDomGetDTDInternalSubset()</h3>
<p>Returns the content model for an element. If there is no DTD, returns <code>NULL</code>.</p>
<p class="subhead1"><a id="CAXML5291"></a>Syntax</p>
<pre>xmlnode* XmlDomGetDTDInternalSubset(
   xmlctx *xctx,
   xmldtdnode *dtd,
   oratext *name);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t103">Parameter</th>
<th class="cellalignment2921" id="r1c2-t103">In/Out</th>
<th class="cellalignment2921" id="r1c3-t103">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t103" headers="r1c1-t103">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t103 r1c2-t103">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t103 r1c3-t103">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t103" headers="r1c1-t103">
<pre>dtd
</pre></td>
<td class="cellalignment2922" headers="r3c1-t103 r1c2-t103">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t103 r1c3-t103">DTD node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t103" headers="r1c1-t103">
<pre>name
</pre></td>
<td class="cellalignment2922" headers="r4c1-t103 r1c2-t103">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t103 r1c3-t103">name of <code>Element</code>; data encoding</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5292"></a>Returns</p>
<p><code>(xmlnode *)</code> content model subtree</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetdtd">XmlDomGetDTD()</a>, <a href="#Xmldomgetdtdname">XmlDomGetDTDName()</a>, <a href="#Xmldomgetdtdentities">XmlDomGetDTDEntities()</a>, <a href="#Xmldomgetdtdnotations">XmlDomGetDTDNotations()</a>, <a href="#Xmldomgetdtdpubid">XmlDomGetDTDPubID()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5293" class="refsect2"><a id="Xmldomgetdtdname"></a>
<hr/>
<h3 class="refsect2"><a id="sthref211"></a><a id="sthref212"></a><a id="sthref213"></a>XmlDomGetDTDName()</h3>
<p>Returns a DTD&#39;s name (specified immediately after the <code>DOCTYPE</code> keyword), or <code>NULL</code> if the node is not type DTD.</p>
<p class="subhead1"><a id="CAXML5294"></a>Syntax</p>
<pre>oratext* XmlDomGetDTDName(
   xmlctx *xctx,
   xmldtdnode *dtd);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t105">Parameter</th>
<th class="cellalignment2921" id="r1c2-t105">In/Out</th>
<th class="cellalignment2921" id="r1c3-t105">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t105" headers="r1c1-t105">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t105 r1c2-t105">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t105 r1c3-t105">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t105" headers="r1c1-t105">
<pre>dtd
</pre></td>
<td class="cellalignment2922" headers="r3c1-t105 r1c2-t105">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t105 r1c3-t105">DTD node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5295"></a>Returns</p>
<p><code>(oratext *)</code> name of DTD</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetdtd">XmlDomGetDTD()</a>, <a href="#Xmldomgetdtdentities">XmlDomGetDTDEntities()</a>, <a href="#Xmldomgetdtdnotations">XmlDomGetDTDNotations()</a>, <a href="#Xmldomgetdtdsysid">XmlDomGetDTDSysID()</a>, <a href="#Xmldomgetdtdinternalsubset">XmlDomGetDTDInternalSubset()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5296" class="refsect2"><a id="Xmldomgetdtdnotations"></a>
<hr/>
<h3 class="refsect2"><a id="sthref214"></a><a id="sthref215"></a><a id="sthref216"></a>XmlDomGetDTDNotations()</h3>
<p>Returns named node map of notations declared by the DTD. If the node is not a DTD or has no <code>Notation</code>s, returns <code>NULL</code>.</p>
<p class="subhead1"><a id="CAXML5297"></a>Syntax</p>
<pre>xmlnamedmap* XmlDomGetDTDNotations(
   xmlctx *xctx,
   xmldtdnode *dtd);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t107">Parameter</th>
<th class="cellalignment2921" id="r1c2-t107">In/Out</th>
<th class="cellalignment2921" id="r1c3-t107">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t107" headers="r1c1-t107">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t107 r1c2-t107">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t107 r1c3-t107">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t107" headers="r1c1-t107">
<pre>dtd
</pre></td>
<td class="cellalignment2922" headers="r3c1-t107 r1c2-t107">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t107 r1c3-t107">DTD node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5298"></a>Returns</p>
<p><code>(xmlnamedmap *)</code> named node map containing notations declared in DTD</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetdtd">XmlDomGetDTD()</a>, <a href="#Xmldomgetdtdname">XmlDomGetDTDName()</a>, <a href="#Xmldomgetdtdentities">XmlDomGetDTDEntities()</a>, <a href="#Xmldomgetdtdsysid">XmlDomGetDTDSysID()</a>, <a href="#Xmldomgetdtdinternalsubset">XmlDomGetDTDInternalSubset()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5299" class="refsect2"><a id="Xmldomgetdtdpubid"></a>
<hr/>
<h3 class="refsect2"><a id="sthref217"></a><a id="sthref218"></a><a id="sthref219"></a>XmlDomGetDTDPubID()</h3>
<p>Returns a DTD&#39;s public identifier.</p>
<p class="subhead1"><a id="CAXML5300"></a>Syntax</p>
<pre>oratext* XmlDomGetDTDPubID(
   xmlctx *xctx,
   xmldtdnode *dtd);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t109">Parameter</th>
<th class="cellalignment2921" id="r1c2-t109">In/Out</th>
<th class="cellalignment2921" id="r1c3-t109">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t109" headers="r1c1-t109">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t109 r1c2-t109">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t109 r1c3-t109">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t109" headers="r1c1-t109">
<pre>dtd
</pre></td>
<td class="cellalignment2922" headers="r3c1-t109 r1c2-t109">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t109 r1c3-t109">DTD node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5301"></a>Returns</p>
<p><code>(oratext *)</code> DTD&#39;s public identifier [data encoding]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetdtd">XmlDomGetDTD()</a>, <a href="#Xmldomgetdtdname">XmlDomGetDTDName()</a>, <a href="#Xmldomgetdtdentities">XmlDomGetDTDEntities()</a>, <a href="#Xmldomgetdtdsysid">XmlDomGetDTDSysID()</a>, <a href="#Xmldomgetdtdinternalsubset">XmlDomGetDTDInternalSubset()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5302" class="refsect2"><a id="Xmldomgetdtdsysid"></a>
<hr/>
<h3 class="refsect2"><a id="sthref220"></a><a id="sthref221"></a><a id="sthref222"></a>XmlDomGetDTDSysID()</h3>
<p>Returns a DTD&#39;s system identifier.</p>
<p class="subhead1"><a id="CAXML5303"></a>Syntax</p>
<pre>oratext* XmlDomGetDTDSysID(
   xmlctx *xctx,
   xmldtdnode *dtd);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t111">Parameter</th>
<th class="cellalignment2921" id="r1c2-t111">In/Out</th>
<th class="cellalignment2921" id="r1c3-t111">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t111" headers="r1c1-t111">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t111 r1c2-t111">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t111 r1c3-t111">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t111" headers="r1c1-t111">
<pre>dtd
</pre></td>
<td class="cellalignment2922" headers="r3c1-t111 r1c2-t111">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t111 r1c3-t111">DTD node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5304"></a>Returns</p>
<p><code>(oratext *)</code> DTD&#39;s system identifier [data encoding]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetdtd">XmlDomGetDTD()</a>, <a href="#Xmldomgetdtdname">XmlDomGetDTDName()</a>, <a href="#Xmldomgetdtdentities">XmlDomGetDTDEntities()</a>, <a href="#Xmldomgetdtdpubid">XmlDomGetDTDPubID()</a>, <a href="#Xmldomgetdtdinternalsubset">XmlDomGetDTDInternalSubset()</a></div>
</div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="BABEGHIC"></a>
<hr/>
<div id="CAXML00305" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">Element Interface</h2>
<p><a href="#BABJBAEC">Table 3-5</a> summarizes the methods available through the <code>Element</code> Interface.</p>
<div id="CAXML5305" class="tblformal">
<p class="titleintable"><a id="sthref223"></a><a id="BABJBAEC"></a>Table 3-5 Summary of Element Methods; DOM Package</p>
<table class="cellalignment2920" title="Summary of Element Methods; DOM Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t113">Function</th>
<th class="cellalignment2921" id="r1c2-t113">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t113" headers="r1c1-t113">
<p><a href="#Xmldomgetattr">XmlDomGetAttr()</a></p>
</td>
<td class="cellalignment2922" headers="r2c1-t113 r1c2-t113">
<p>Return attribute&#39;s value given its name.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t113" headers="r1c1-t113">
<p><a href="#Xmldomgetattrns">XmlDomGetAttrNS()</a></p>
</td>
<td class="cellalignment2922" headers="r3c1-t113 r1c2-t113">
<p>Return attribute&#39;s value given its URI and local name.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t113" headers="r1c1-t113">
<p><a href="#Xmldomgetattrnode">XmlDomGetAttrNode()</a></p>
</td>
<td class="cellalignment2922" headers="r4c1-t113 r1c2-t113">
<p>Get attribute by name.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t113" headers="r1c1-t113">
<p><a href="#Xmldomgetattrnodens">XmlDomGetAttrNodeNS()</a></p>
</td>
<td class="cellalignment2922" headers="r5c1-t113 r1c2-t113">
<p>Get attribute by name (namespace aware version).</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r6c1-t113" headers="r1c1-t113">
<p><a href="#Xmldomgetchildrenbytag">XmlDomGetChildrenByTag()</a></p>
</td>
<td class="cellalignment2922" headers="r6c1-t113 r1c2-t113">
<p>Get children of element with given tag name (non-namespace aware).</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r7c1-t113" headers="r1c1-t113">
<p><a href="#Xmldomgetchildrenbytagns">XmlDomGetChildrenByTagNS()</a></p>
</td>
<td class="cellalignment2922" headers="r7c1-t113 r1c2-t113">
<p>Get children of element with tag name (namespace aware version).</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r8c1-t113" headers="r1c1-t113">
<p><a href="#Xmldomgetdocelemsbytag">XmlDomGetDocElemsByTag()</a></p>
</td>
<td class="cellalignment2922" headers="r8c1-t113 r1c2-t113">
<p>Obtain doc elements.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r9c1-t113" headers="r1c1-t113">
<p><a href="#Xmldomgetdocelemsbytagns">XmlDomGetDocElemsByTagNS()</a></p>
</td>
<td class="cellalignment2922" headers="r9c1-t113 r1c2-t113">
<p>Obtain doc elements (namespace aware version).</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r10c1-t113" headers="r1c1-t113">
<p><a href="#Xmldomgettag">XmlDomGetTag()</a></p>
</td>
<td class="cellalignment2922" headers="r10c1-t113 r1c2-t113">
<p>Return an element node&#39;s tag name.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r11c1-t113" headers="r1c1-t113">
<p><a href="#Xmldomhasattr">XmlDomHasAttr()</a></p>
</td>
<td class="cellalignment2922" headers="r11c1-t113 r1c2-t113">
<p>Does named attribute exist?</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r12c1-t113" headers="r1c1-t113">
<p><a href="#Xmldomhasattrns">XmlDomHasAttrNS()</a></p>
</td>
<td class="cellalignment2922" headers="r12c1-t113 r1c2-t113">
<p>Does named attribute exist (namespace aware version)?</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r13c1-t113" headers="r1c1-t113">
<p><a href="#Xmldomremoveattr">XmlDomRemoveAttr()</a></p>
</td>
<td class="cellalignment2922" headers="r13c1-t113 r1c2-t113">
<p>Remove attribute with specified name.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r14c1-t113" headers="r1c1-t113">
<p><a href="#Xmldomremoveattrns">XmlDomRemoveAttrNS()</a></p>
</td>
<td class="cellalignment2922" headers="r14c1-t113 r1c2-t113">
<p>Remove attribute with specified URI and local name.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r15c1-t113" headers="r1c1-t113">
<p><a href="#Xmldomremoveattrnode">XmlDomRemoveAttrNode()</a></p>
</td>
<td class="cellalignment2922" headers="r15c1-t113 r1c2-t113">
<p>Remove attribute node.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r16c1-t113" headers="r1c1-t113">
<p><a href="#Xmldomsetattr">XmlDomSetAttr()</a></p>
</td>
<td class="cellalignment2922" headers="r16c1-t113 r1c2-t113">
<p>Set new attribute for element.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r17c1-t113" headers="r1c1-t113">
<p><a href="#Xmldomsetattrns">XmlDomSetAttrNS()</a></p>
</td>
<td class="cellalignment2922" headers="r17c1-t113 r1c2-t113">
<p>Set new attribute for element (namespace aware version).</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r18c1-t113" headers="r1c1-t113">
<p><a href="#Xmldomsetattrnode">XmlDomSetAttrNode()</a></p>
</td>
<td class="cellalignment2922" headers="r18c1-t113 r1c2-t113">
<p>Set attribute node.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r19c1-t113" headers="r1c1-t113">
<p><a href="#Xmldomsetattrnodens">XmlDomSetAttrNodeNS()</a></p>
</td>
<td class="cellalignment2922" headers="r19c1-t113 r1c2-t113">
<p>Set attribute node (namespace aware version).</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CAXML5306" class="refsect2"><a id="Xmldomgetattr"></a>
<hr/>
<h3 class="refsect2"><a id="sthref224"></a><a id="sthref225"></a><a id="sthref226"></a>XmlDomGetAttr()</h3>
<p>Returns the value of an element&#39;s attribute (specified by name). Note that an attribute may have the empty string as its value, but cannot be <code>NULL</code>. If the element does not have an attribute with the given name, <code>NULL</code> is returned.</p>
<p class="subhead1"><a id="CAXML5307"></a>Syntax</p>
<pre>oratext* XmlDomGetAttr(
   xmlctx *xctx,
   xmlelemnode *elem,
   oratext *name);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t114">Parameter</th>
<th class="cellalignment2921" id="r1c2-t114">In/Out</th>
<th class="cellalignment2921" id="r1c3-t114">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t114" headers="r1c1-t114">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t114 r1c2-t114">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t114 r1c3-t114">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t114" headers="r1c1-t114">
<pre>elem
</pre></td>
<td class="cellalignment2922" headers="r3c1-t114 r1c2-t114">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t114 r1c3-t114">element node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t114" headers="r1c1-t114">
<pre>name
</pre></td>
<td class="cellalignment2922" headers="r4c1-t114 r1c2-t114">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t114 r1c3-t114">attribute&#39;s name</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5308"></a>Returns</p>
<p><code>(oratext *)</code> named attribute&#39;s value [data encoding; may be <code>NULL</code>]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetattrns">XmlDomGetAttrNS()</a>, <a href="#Xmldomgetattrs">XmlDomGetAttrs()</a>, <a href="#Xmldomgetattrnode">XmlDomGetAttrNode()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5309" class="refsect2"><a id="Xmldomgetattrns"></a>
<hr/>
<h3 class="refsect2"><a id="sthref227"></a><a id="sthref228"></a><a id="sthref229"></a>XmlDomGetAttrNS()</h3>
<p>Returns the value of an element&#39;s attribute (specified by URI and local name). Note that an attribute may have the empty string as its value, but cannot be <code>NULL</code>. If the element does not have an attribute with the given name, <code>NULL</code> is returned.</p>
<p class="subhead1"><a id="CAXML5310"></a>Syntax</p>
<pre>oratext* XmlDomGetAttrNS(
   xmlctx *xctx,
   xmlelemnode *elem, 
   oratext *uri,
   oratext *local);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t116">Parameter</th>
<th class="cellalignment2921" id="r1c2-t116">In/Out</th>
<th class="cellalignment2921" id="r1c3-t116">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t116" headers="r1c1-t116">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t116 r1c2-t116">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t116 r1c3-t116">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t116" headers="r1c1-t116">
<pre>elem
</pre></td>
<td class="cellalignment2922" headers="r3c1-t116 r1c2-t116">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t116 r1c3-t116">element node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t116" headers="r1c1-t116">
<pre>uri
</pre></td>
<td class="cellalignment2922" headers="r4c1-t116 r1c2-t116">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t116 r1c3-t116">attribute&#39;s namespace URI; data encoding</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t116" headers="r1c1-t116">
<pre>local
</pre></td>
<td class="cellalignment2922" headers="r5c1-t116 r1c2-t116">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t116 r1c3-t116">attribute&#39;s local name; data encoding</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5311"></a>Returns</p>
<p><code>(oratext *)</code> named attribute&#39;s value [data encoding; may be <code>NULL</code>]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetattr">XmlDomGetAttr()</a>, <a href="#Xmldomgetattrs">XmlDomGetAttrs()</a>, <a href="#Xmldomgetattrnode">XmlDomGetAttrNode()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5312" class="refsect2"><a id="Xmldomgetattrnode"></a>
<hr/>
<h3 class="refsect2"><a id="sthref230"></a><a id="sthref231"></a><a id="sthref232"></a>XmlDomGetAttrNode()</h3>
<p>Returns an element&#39;s attribute specified by name. If the node is not an element or the named attribute does not exist, returns <code>NULL</code>.</p>
<p class="subhead1"><a id="CAXML5313"></a>Syntax</p>
<pre>xmlattrnode* XmlDomGetAttrNode(
   xmlctx *xctx,
   xmlelemnode *elem,
   oratext *name);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t118">Parameter</th>
<th class="cellalignment2921" id="r1c2-t118">In/Out</th>
<th class="cellalignment2921" id="r1c3-t118">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t118" headers="r1c1-t118">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t118 r1c2-t118">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t118 r1c3-t118">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t118" headers="r1c1-t118">
<pre>elem
</pre></td>
<td class="cellalignment2922" headers="r3c1-t118 r1c2-t118">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t118 r1c3-t118">element node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t118" headers="r1c1-t118">
<pre>name
</pre></td>
<td class="cellalignment2922" headers="r4c1-t118 r1c2-t118">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t118 r1c3-t118">attribute&#39;s name; data encoding</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5314"></a>Returns</p>
<p><code>(xmlattrnode *)</code> attribute with the specified name [or <code>NULL</code>]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetattrnodens">XmlDomGetAttrNodeNS()</a>, <a href="#Xmldomgetattr">XmlDomGetAttr()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5315" class="refsect2"><a id="Xmldomgetattrnodens"></a>
<hr/>
<h3 class="refsect2"><a id="sthref233"></a><a id="sthref234"></a><a id="sthref235"></a>XmlDomGetAttrNodeNS()</h3>
<p>Returns an element&#39;s attribute specified by URI and localname. If the node is not an element or the named attribute does not exist, returns <code>NULL</code>.</p>
<p class="subhead1"><a id="CAXML5316"></a>Syntax</p>
<pre>xmlattrnode* XmlDomGetAttrNodeNS(
   xmlctx *xctx,
   xmlelemnode *elem, 
   oratext *uri,
   oratext *local);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t120">Parameter</th>
<th class="cellalignment2921" id="r1c2-t120">In/Out</th>
<th class="cellalignment2921" id="r1c3-t120">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t120" headers="r1c1-t120">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t120 r1c2-t120">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t120 r1c3-t120">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t120" headers="r1c1-t120">
<pre>elem
</pre></td>
<td class="cellalignment2922" headers="r3c1-t120 r1c2-t120">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t120 r1c3-t120">element node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t120" headers="r1c1-t120">
<pre>uri
</pre></td>
<td class="cellalignment2922" headers="r4c1-t120 r1c2-t120">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t120 r1c3-t120">attribute&#39;s namespace URI; data encoding</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t120" headers="r1c1-t120">
<pre>local
</pre></td>
<td class="cellalignment2922" headers="r5c1-t120 r1c2-t120">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t120 r1c3-t120">attribute&#39;s local name; data encoding</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5317"></a>Returns</p>
<p><code>(xmlattrnode *)</code> attribute node with the given URI/local name [or <code>NULL</code>]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetattrnode">XmlDomGetAttrNode()</a>, <a href="#Xmldomgetattr">XmlDomGetAttr()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5318" class="refsect2"><a id="Xmldomgetchildrenbytag"></a>
<hr/>
<h3 class="refsect2"><a id="sthref236"></a><a id="sthref237"></a><a id="sthref238"></a>XmlDomGetChildrenByTag()</h3>
<p>Returns a list of children of an element with the given tag name, in the order in which they would be encountered in a preorder traversal of the tree. The tag name should be in the data encoding. The special name &#34;<code>*</code>&#34; matches all tag names; a <code>NULL</code> name matches nothing. Note that tag names are case sensitive. This function is not namespace aware; the full tag names are compared. If two prefixes which map to the same URI are compared, the comparison will fail. See <code>XmlDomGetChildrenByTagNS</code> for the namespace-aware version. The returned list can be freed with <code>XmlDomFreeNodeList</code>.</p>
<p class="subhead1"><a id="CAXML5319"></a>Syntax</p>
<pre>xmlnodelist* XmlDomGetChildrenByTag(
   xmlctx *xctx, 
   xmlelemnode *elem,
   oratext *name);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t122">Parameter</th>
<th class="cellalignment2921" id="r1c2-t122">In/Out</th>
<th class="cellalignment2921" id="r1c3-t122">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t122" headers="r1c1-t122">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t122 r1c2-t122">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t122 r1c3-t122">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t122" headers="r1c1-t122">
<pre>elem
</pre></td>
<td class="cellalignment2922" headers="r3c1-t122 r1c2-t122">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t122 r1c3-t122">element node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t122" headers="r1c1-t122">
<pre>name
</pre></td>
<td class="cellalignment2922" headers="r4c1-t122 r1c2-t122">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t122 r1c3-t122">tag name to match; data encoding; <code>*</code> for all</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5320"></a>Returns</p>
<p><code>(xmlnodelist *)</code> node list of matching children</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetchildrenbytagns">XmlDomGetChildrenByTagNS()</a>, <a href="#Xmldomfreenodelist">XmlDomFreeNodeList()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5321" class="refsect2"><a id="Xmldomgetchildrenbytagns"></a>
<hr/>
<h3 class="refsect2"><a id="sthref239"></a><a id="sthref240"></a><a id="sthref241"></a>XmlDomGetChildrenByTagNS()</h3>
<p>Returns a list of children of an element with the given URI and local name, in the order in which they would be encountered in a preorder traversal of the tree. The URI and local name should be in the data encoding. The special name &#34;<code>*</code>&#34; matches all URIs or tag names; a <code>NULL</code> name matches nothing. Note that names are case sensitive. See <code>XmlDomGetChildrenByTag</code> for the non-namespace version. The returned list can be freed with <code>XmlDomFreeNodeList</code>.</p>
<p class="subhead1"><a id="CAXML5322"></a>Syntax</p>
<pre>xmlnodelist* XmlDomGetChildrenByTagNS(
   xmlctx *xctx,
   xmlelemnode *elem, 
   oratext *uri,
   oratext *local);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t124">Parameter</th>
<th class="cellalignment2921" id="r1c2-t124">In/Out</th>
<th class="cellalignment2921" id="r1c3-t124">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t124" headers="r1c1-t124">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t124 r1c2-t124">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t124 r1c3-t124">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t124" headers="r1c1-t124">
<pre>elem
</pre></td>
<td class="cellalignment2922" headers="r3c1-t124 r1c2-t124">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t124 r1c3-t124">element node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t124" headers="r1c1-t124">
<pre>uri
</pre></td>
<td class="cellalignment2922" headers="r4c1-t124 r1c2-t124">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t124 r1c3-t124">namespace URI to match; data encoding; <code>*</code> matches all</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t124" headers="r1c1-t124">
<pre>local
</pre></td>
<td class="cellalignment2922" headers="r5c1-t124 r1c2-t124">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t124 r1c3-t124">local name to match; data encoding; * matches all</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5323"></a>Returns</p>
<p><code>(xmlnodelist *)</code> node list of matching children</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetchildrenbytag">XmlDomGetChildrenByTag()</a>, <a href="#Xmldomfreenodelist">XmlDomFreeNodeList()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5324" class="refsect2"><a id="Xmldomgetelemsbytag"></a>
<hr/>
<h3 class="refsect2"><a id="sthref242"></a><a id="sthref243"></a><a id="sthref244"></a>XmlDomGetElemsByTag()</h3>
<p>Returns a list of all elements (in the document tree rooted at the root node) with a given tag name, in the order in which they would be encountered in a preorder traversal of the tree. If root is <code>NULL</code>, the entire document is searched. The tag name should be in the data encoding. The special name &#34;<code>*</code>&#34; matches all tag names; a <code>NULL</code> name matches nothing. Note that tag names are case sensitive. This function is not namespace aware; the full tag names are compared. If two prefixes which map to the same URI are compared, the comparison will fail. See <code>XmlDomGetElemsByTagNS</code> for the namespace-aware version. The returned list can be freed with <code>XmlDomFreeNodeList</code>.</p>
<p class="subhead1"><a id="CAXML5325"></a>Syntax</p>
<pre>xmlnodelist* XmlDomGetElemsByTag(
   xmlctx *xctx,
   xmlelemnode *elem,
   oratext *name);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t126">Parameter</th>
<th class="cellalignment2921" id="r1c2-t126">In/Out</th>
<th class="cellalignment2921" id="r1c3-t126">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t126" headers="r1c1-t126">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t126 r1c2-t126">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t126 r1c3-t126">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t126" headers="r1c1-t126">
<pre>elem
</pre></td>
<td class="cellalignment2922" headers="r3c1-t126 r1c2-t126">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t126 r1c3-t126">element node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t126" headers="r1c1-t126">
<pre>name
</pre></td>
<td class="cellalignment2922" headers="r4c1-t126 r1c2-t126">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t126 r1c3-t126">tag name to match; data encoding; <code>*</code> for all</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5326"></a>Returns</p>
<p><code>(xmlnodelist *)</code> node list of matching elements</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetelemsbytagns">XmlDomGetElemsByTagNS()</a>, <a href="#Xmldomfreenodelist">XmlDomFreeNodeList()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5327" class="refsect2"><a id="Xmldomgetelemsbytagns"></a>
<hr/>
<h3 class="refsect2"><a id="sthref245"></a><a id="sthref246"></a><a id="sthref247"></a>XmlDomGetElemsByTagNS()</h3>
<p>Returns a list of all elements (in the document tree rooted at the root node) with a given URI and localname, in the order in which they would be encountered in a preorder traversal of the tree. If root is <code>NULL</code>, the entire document is searched. The tag name should be in the data encoding. The special name &#34;<code>*</code>&#34; matches all tag names; a <code>NULL</code> name matches nothing. Note that tag names are case sensitive. This function is not namespace aware; the full tag names are compared. If two prefixes which map to the same URI are compared, the comparison will fail. The returned list can be freed with <code>XmlDomFreeNodeList</code>.</p>
<p class="subhead1"><a id="CAXML5328"></a>Syntax</p>
<pre>xmlnodelist* XmlDomGetElemsByTagNS(
   xmlctx *xctx,
   xmlelemnode *elem, 
   oratext *uri,
   oratext *local);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t128">Parameter</th>
<th class="cellalignment2921" id="r1c2-t128">In/Out</th>
<th class="cellalignment2921" id="r1c3-t128">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t128" headers="r1c1-t128">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t128 r1c2-t128">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t128 r1c3-t128">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t128" headers="r1c1-t128">
<pre>elem
</pre></td>
<td class="cellalignment2922" headers="r3c1-t128 r1c2-t128">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t128 r1c3-t128">element node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t128" headers="r1c1-t128">
<pre>uri
</pre></td>
<td class="cellalignment2922" headers="r4c1-t128 r1c2-t128">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t128 r1c3-t128">namespace URI to match; data encoding; <code>*</code> for all</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t128" headers="r1c1-t128">
<pre>local
</pre></td>
<td class="cellalignment2922" headers="r5c1-t128 r1c2-t128">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t128 r1c3-t128">local name to match; data encoding; <code>*</code> for all</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5329"></a>Returns</p>
<p><code>(xmlnodelist *)</code> node list of matching elements</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetdocelemsbytag">XmlDomGetDocElemsByTag()</a>, <a href="#Xmldomfreenodelist">XmlDomFreeNodeList()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5330" class="refsect2"><a id="Xmldomgettag"></a>
<hr/>
<h3 class="refsect2"><a id="sthref248"></a><a id="sthref249"></a><a id="sthref250"></a>XmlDomGetTag()</h3>
<p>Returns the <code>tagName</code> of a node, which is the same as its name. DOM 1.0 states &#34;...even though there is a generic <code>nodeName</code> attribute on the <code>Node</code> interface, there is still a <code>tagName</code> attribute on the <code>Element</code> interface; these two attributes must contain the same value, but the Working Group considers it worthwhile to support both, given the different constituencies the DOM API must satisfy.&#34;</p>
<p class="subhead1"><a id="CAXML5331"></a>Syntax</p>
<pre>oratext* XmlDomGetTag(
   xmlctx *xctx,
   xmlelemnode *elem);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t130">Parameter</th>
<th class="cellalignment2921" id="r1c2-t130">In/Out</th>
<th class="cellalignment2921" id="r1c3-t130">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t130" headers="r1c1-t130">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t130 r1c2-t130">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t130 r1c3-t130">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t130" headers="r1c1-t130">
<pre>elem
</pre></td>
<td class="cellalignment2922" headers="r3c1-t130 r1c2-t130">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t130 r1c3-t130"><code>Element</code> node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5332"></a>Returns</p>
<p><code>(oratext *)</code> element&#39;s name [data encoding]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetnodename">XmlDomGetNodeName()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5333" class="refsect2"><a id="Xmldomhasattr"></a>
<hr/>
<h3 class="refsect2"><a id="sthref251"></a><a id="sthref252"></a><a id="sthref253"></a>XmlDomHasAttr()</h3>
<p>Determines if an element has an attribute with the given name. Returns <code>TRUE</code> if so, <code>FALSE</code> if not.</p>
<p class="subhead1"><a id="CAXML5334"></a>Syntax</p>
<pre>boolean XmlDomHasAttr(
   xmlctx *xctx,
   xmlelemnode *elem,
   oratext *name);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t132">Parameter</th>
<th class="cellalignment2921" id="r1c2-t132">In/Out</th>
<th class="cellalignment2921" id="r1c3-t132">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t132" headers="r1c1-t132">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t132 r1c2-t132">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t132 r1c3-t132">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t132" headers="r1c1-t132">
<pre>elem
</pre></td>
<td class="cellalignment2922" headers="r3c1-t132 r1c2-t132">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t132 r1c3-t132"><code>Element</code> node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t132" headers="r1c1-t132">
<pre>name
</pre></td>
<td class="cellalignment2922" headers="r4c1-t132 r1c2-t132">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t132 r1c3-t132">attribute&#39;s name; data encoding</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5335"></a>Returns</p>
<p><code>(boolean)</code> <code>TRUE</code> if element has attribute with given name</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomhasattrns">XmlDomHasAttrNS()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5336" class="refsect2"><a id="Xmldomhasattrns"></a>
<hr/>
<h3 class="refsect2"><a id="sthref254"></a><a id="sthref255"></a><a id="sthref256"></a>XmlDomHasAttrNS()</h3>
<p>Determines if an element has an attribute with the given URI and localname. Returns <code>TRUE</code> if so, <code>FALSE</code> if not.</p>
<p class="subhead1"><a id="CAXML5337"></a>Syntax</p>
<pre>boolean XmlDomHasAttrNS(
   xmlctx *xctx,
   xmlelemnode *elem,
   oratext *uri,
   oratext *local);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t134">Parameter</th>
<th class="cellalignment2921" id="r1c2-t134">In/Out</th>
<th class="cellalignment2921" id="r1c3-t134">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t134" headers="r1c1-t134">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t134 r1c2-t134">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t134 r1c3-t134">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t134" headers="r1c1-t134">
<pre>elem
</pre></td>
<td class="cellalignment2922" headers="r3c1-t134 r1c2-t134">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t134 r1c3-t134"><code>Element</code> node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t134" headers="r1c1-t134">
<pre>uri
</pre></td>
<td class="cellalignment2922" headers="r4c1-t134 r1c2-t134">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t134 r1c3-t134">attribute&#39;s namespace URI; data encoding</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t134" headers="r1c1-t134">
<pre>local
</pre></td>
<td class="cellalignment2922" headers="r5c1-t134 r1c2-t134">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t134 r1c3-t134">attribute&#39;s local name; data encoding</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5338"></a>Returns</p>
<p><code>(boolean)</code> <code>TRUE</code> if element has attribute with given URI/localname</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomhasattr">XmlDomHasAttr()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5339" class="refsect2"><a id="Xmldomremoveattr"></a>
<hr/>
<h3 class="refsect2"><a id="sthref257"></a><a id="sthref258"></a><a id="sthref259"></a>XmlDomRemoveAttr()</h3>
<p>Removes an attribute (specified by name). If the removed attribute has a default value it is immediately re-created with that default. Note that the attribute is removed from the element&#39;s list of attributes, but the attribute node itself is not destroyed.</p>
<p class="subhead1"><a id="CAXML5340"></a>Syntax</p>
<pre>void XmlDomRemoveAttr(
   xmlctx *xctx,
   xmlelemnode *elem,
   oratext *name);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t136">Parameter</th>
<th class="cellalignment2921" id="r1c2-t136">In/Out</th>
<th class="cellalignment2921" id="r1c3-t136">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t136" headers="r1c1-t136">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t136 r1c2-t136">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t136 r1c3-t136">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t136" headers="r1c1-t136">
<pre>elem
</pre></td>
<td class="cellalignment2922" headers="r3c1-t136 r1c2-t136">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t136 r1c3-t136">element node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t136" headers="r1c1-t136">
<pre>name
</pre></td>
<td class="cellalignment2922" headers="r4c1-t136 r1c2-t136">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t136 r1c3-t136">attribute&#39;s name; data encoding</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomremoveattrns">XmlDomRemoveAttrNS()</a>, <a href="#Xmldomremoveattrnode">XmlDomRemoveAttrNode()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5341" class="refsect2"><a id="Xmldomremoveattrns"></a>
<hr/>
<h3 class="refsect2"><a id="sthref260"></a><a id="sthref261"></a><a id="sthref262"></a>XmlDomRemoveAttrNS()</h3>
<p>Removes an attribute (specified by URI and local name). If the removed attribute has a default value it is immediately re-created with that default. Note that the attribute is removed from the element&#39;s list of attributes, but the attribute node itself is not destroyed.</p>
<p class="subhead1"><a id="CAXML5342"></a>Syntax</p>
<pre>void XmlDomRemoveAttrNS(
   xmlctx *xctx,
   xmlelemnode *elem,
   oratext *uri,
   oratext *local);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t138">Parameter</th>
<th class="cellalignment2921" id="r1c2-t138">In/Out</th>
<th class="cellalignment2921" id="r1c3-t138">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t138" headers="r1c1-t138">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t138 r1c2-t138">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t138 r1c3-t138">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t138" headers="r1c1-t138">
<pre>elem
</pre></td>
<td class="cellalignment2922" headers="r3c1-t138 r1c2-t138">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t138 r1c3-t138">element node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t138" headers="r1c1-t138">
<pre>uri
</pre></td>
<td class="cellalignment2922" headers="r4c1-t138 r1c2-t138">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t138 r1c3-t138">attribute&#39;s namespace URI</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t138" headers="r1c1-t138">
<pre>local
</pre></td>
<td class="cellalignment2922" headers="r5c1-t138 r1c2-t138">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t138 r1c3-t138">attribute&#39;s local name</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomremoveattr">XmlDomRemoveAttr()</a>, <a href="#Xmldomremoveattrnode">XmlDomRemoveAttrNode()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5343" class="refsect2"><a id="Xmldomremoveattrnode"></a>
<hr/>
<h3 class="refsect2"><a id="sthref263"></a><a id="sthref264"></a><a id="sthref265"></a>XmlDomRemoveAttrNode()</h3>
<p>Removes an attribute from an element. If the attribute has a default value, it is immediately re-created with that value (Specified set to <code>FALSE</code>). Returns the removed attribute on success, else <code>NULL</code>.</p>
<p class="subhead1"><a id="CAXML5344"></a>Syntax</p>
<pre>xmlattrnode* XmlDomRemoveAttrNode(
   xmlctx *xctx,
   xmlelemnode *elem,
   xmlattrnode *oldAttr);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t140">Parameter</th>
<th class="cellalignment2921" id="r1c2-t140">In/Out</th>
<th class="cellalignment2921" id="r1c3-t140">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t140" headers="r1c1-t140">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t140 r1c2-t140">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t140 r1c3-t140">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t140" headers="r1c1-t140">
<pre>elem
</pre></td>
<td class="cellalignment2922" headers="r3c1-t140 r1c2-t140">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t140 r1c3-t140">element node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t140" headers="r1c1-t140">
<pre>oldAtrr
</pre></td>
<td class="cellalignment2922" headers="r4c1-t140 r1c2-t140">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t140 r1c3-t140">attribute node to remove</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5345"></a>Returns</p>
<p><code>(xmlattrnode *)</code> replaced attribute node [or <code>NULL</code>]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomremoveattr">XmlDomRemoveAttr()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5346" class="refsect2"><a id="Xmldomsetattr"></a>
<hr/>
<h3 class="refsect2"><a id="sthref266"></a><a id="sthref267"></a><a id="sthref268"></a>XmlDomSetAttr()</h3>
<p>Creates a new attribute for an element with the given name and value (which should be in the data encoding). If the named attribute already exists, its value is simply replaced. The name and value are not verified, converted, or checked. The value is not parsed, so entity references will not be expanded. The attribute&#39;s specified flag will be set.</p>
<p class="subhead1"><a id="CAXML5347"></a>Syntax</p>
<pre>void XmlDomSetAttr(
   xmlctx *xctx,
   xmlelemnode *elem,
   oratext *name,
   oratext *value);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t142">Parameter</th>
<th class="cellalignment2921" id="r1c2-t142">In/Out</th>
<th class="cellalignment2921" id="r1c3-t142">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t142" headers="r1c1-t142">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t142 r1c2-t142">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t142 r1c3-t142">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t142" headers="r1c1-t142">
<pre>elem
</pre></td>
<td class="cellalignment2922" headers="r3c1-t142 r1c2-t142">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t142 r1c3-t142">element node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t142" headers="r1c1-t142">
<pre>name
</pre></td>
<td class="cellalignment2922" headers="r4c1-t142 r1c2-t142">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t142 r1c3-t142">attribute&#39;s name; data encoding</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t142" headers="r1c1-t142">
<pre>value
</pre></td>
<td class="cellalignment2922" headers="r5c1-t142 r1c2-t142">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t142 r1c3-t142">attribute&#39;s value; data encoding</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomsetattrns">XmlDomSetAttrNS()</a>, <a href="#Xmldomcreateattr">XmlDomCreateAttr()</a>, <a href="#Xmldomsetattrvalue">XmlDomSetAttrValue()</a>, <a href="#Xmldomremoveattr">XmlDomRemoveAttr()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5348" class="refsect2"><a id="Xmldomsetattrns"></a>
<hr/>
<h3 class="refsect2"><a id="sthref269"></a><a id="sthref270"></a><a id="sthref271"></a>XmlDomSetAttrNS()</h3>
<p>Creates a new attribute for an element with the given URI, localname and value (which should be in the data encoding). If the named attribute already exists, its value is simply replaced. The name and value are not verified, converted, or checked.</p>
<p>The value is not parsed, so entity references will not be expanded.</p>
<p>The attribute&#39;s specified flag will be set.</p>
<p class="subhead1"><a id="CAXML5349"></a>Syntax</p>
<pre>void XmlDomSetAttrNS(
   xmlctx *xctx,
   xmlelemnode *elem,
   oratext *uri, 
   oratext *qname,
   oratext *value);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t144">Parameter</th>
<th class="cellalignment2921" id="r1c2-t144">In/Out</th>
<th class="cellalignment2921" id="r1c3-t144">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t144" headers="r1c1-t144">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t144 r1c2-t144">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t144 r1c3-t144">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t144" headers="r1c1-t144">
<pre>elem
</pre></td>
<td class="cellalignment2922" headers="r3c1-t144 r1c2-t144">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t144 r1c3-t144">element node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t144" headers="r1c1-t144">
<pre>uri
</pre></td>
<td class="cellalignment2922" headers="r4c1-t144 r1c2-t144">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t144 r1c3-t144">attribute&#39;s namespace URI; data encoding</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t144" headers="r1c1-t144">
<pre>qname
</pre></td>
<td class="cellalignment2922" headers="r5c1-t144 r1c2-t144">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t144 r1c3-t144">attribute&#39;s qualified name; data encoding</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r6c1-t144" headers="r1c1-t144">
<pre>value
</pre></td>
<td class="cellalignment2922" headers="r6c1-t144 r1c2-t144">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r6c1-t144 r1c3-t144">attribute&#39;s value; data encoding</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomsetattr">XmlDomSetAttr()</a>, <a href="#Xmldomcreateattr">XmlDomCreateAttr()</a>, <a href="#Xmldomsetattrvalue">XmlDomSetAttrValue()</a>, <a href="#Xmldomremoveattr">XmlDomRemoveAttr()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5350" class="refsect2"><a id="Xmldomsetattrnode"></a>
<hr/>
<h3 class="refsect2"><a id="sthref272"></a><a id="sthref273"></a><a id="sthref274"></a>XmlDomSetAttrNode()</h3>
<p>Adds a new attribute to an element. If an attribute with the given name already exists, it is replaced and the old attribute returned through <code>oldNode</code>. If the attribute is new, it is added to the element&#39;s list and <code>oldNode</code> set to <code>NULL</code>.</p>
<p class="subhead1"><a id="CAXML5351"></a>Syntax</p>
<pre>xmlattrnode* XmlDomSetAttrNode(
   xmlctx *xctx,
   xmlelemnode *elem,
   xmlattrnode *newAttr);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t146">Parameter</th>
<th class="cellalignment2921" id="r1c2-t146">In/Out</th>
<th class="cellalignment2921" id="r1c3-t146">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t146" headers="r1c1-t146">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t146 r1c2-t146">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t146 r1c3-t146">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t146" headers="r1c1-t146">
<pre>elem
</pre></td>
<td class="cellalignment2922" headers="r3c1-t146 r1c2-t146">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t146 r1c3-t146">element node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t146" headers="r1c1-t146">
<pre>newAttr
</pre></td>
<td class="cellalignment2922" headers="r4c1-t146 r1c2-t146">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t146 r1c3-t146">attribute node to add</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5352"></a>Returns</p>
<p><code>(xmlattrnode *)</code> replaced attribute node (or <code>NULL</code>)</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomsetattrnodens">XmlDomSetAttrNodeNS()</a>, <a href="#Xmldomcreateattr">XmlDomCreateAttr()</a>, <a href="#Xmldomsetattrvalue">XmlDomSetAttrValue()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5353" class="refsect2"><a id="Xmldomsetattrnodens"></a>
<hr/>
<h3 class="refsect2"><a id="sthref275"></a><a id="sthref276"></a><a id="sthref277"></a>XmlDomSetAttrNodeNS()</h3>
<p>Adds a new attribute to an element. If an attribute with <code>newNode</code>&#39;s URI and localname already exists, it is replaced and the old attribute returned through <code>oldNode</code>. If the attribute is new, it is added to the element&#39;s list and <code>oldNode</code> set to <code>NULL</code>.</p>
<p class="subhead1"><a id="CAXML5354"></a>Syntax</p>
<pre>xmlattrnode* XmlDomSetAttrNodeNS(
   xmlctx *xctx,
   xmlelemnode *elem,
   xmlattrnode *newAttr);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t148">Parameter</th>
<th class="cellalignment2921" id="r1c2-t148">In/Out</th>
<th class="cellalignment2921" id="r1c3-t148">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t148" headers="r1c1-t148">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t148 r1c2-t148">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t148 r1c3-t148">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t148" headers="r1c1-t148">
<pre>elem
</pre></td>
<td class="cellalignment2922" headers="r3c1-t148 r1c2-t148">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t148 r1c3-t148">element node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t148" headers="r1c1-t148">
<pre>newAttr
</pre></td>
<td class="cellalignment2922" headers="r4c1-t148 r1c2-t148">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t148 r1c3-t148">attribute node to add</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5355"></a>Returns</p>
<p><code>(xmlattrnode *)</code> replaced attribute node [or <code>NULL</code>]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomsetattrnode">XmlDomSetAttrNode()</a>, <a href="#Xmldomcreateattr">XmlDomCreateAttr()</a>, <a href="#Xmldomsetattrvalue">XmlDomSetAttrValue()</a></div>
</div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="BABCJHFF"></a>
<hr/>
<div id="CAXML00306" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">Entity Interface</h2>
<p><a href="#BABGHGID">Table 3-6</a> summarizes the methods available through the <code>Entity</code> interface.</p>
<div id="CAXML5356" class="tblformal">
<p class="titleintable"><a id="sthref278"></a><a id="BABGHGID"></a>Table 3-6 Summary of Entity Methods; DOM Package</p>
<table class="cellalignment2920" title="Summary of Entity Methods; DOM Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t150">Function</th>
<th class="cellalignment2921" id="r1c2-t150">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t150" headers="r1c1-t150">
<p><a href="#Xmldomgetentitynotation">XmlDomGetEntityNotation()</a></p>
</td>
<td class="cellalignment2922" headers="r2c1-t150 r1c2-t150">
<p>Get entity&#39;s notation.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t150" headers="r1c1-t150">
<p><a href="#Xmldomgetentitypubid">XmlDomGetEntityPubID()</a></p>
</td>
<td class="cellalignment2922" headers="r3c1-t150 r1c2-t150">
<p>Get entity&#39;s public ID.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t150" headers="r1c1-t150">
<p><a href="#Xmldomgetentitysysid">XmlDomGetEntitySysID()</a></p>
</td>
<td class="cellalignment2922" headers="r4c1-t150 r1c2-t150">
<p>Get entity&#39;s system ID.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t150" headers="r1c1-t150">
<p><a href="#Xmldomgetentitytype">XmlDomGetEntityType()</a></p>
</td>
<td class="cellalignment2922" headers="r5c1-t150 r1c2-t150">
<p>Get entity&#39;s type.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CAXML5357" class="refsect2"><a id="Xmldomgetentitynotation"></a>
<hr/>
<h3 class="refsect2"><a id="sthref279"></a><a id="sthref280"></a><a id="sthref281"></a>XmlDomGetEntityNotation()</h3>
<p>For unparsed entities, returns the name of its notation (in the data encoding). For parsed entities and other node types, returns <code>NULL</code>.</p>
<p class="subhead1"><a id="CAXML5358"></a>Syntax</p>
<pre>oratext* XmlDomGetEntityNotation(
   xmlctx *xctx,
   xmlentnode *ent);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t151">Parameter</th>
<th class="cellalignment2921" id="r1c2-t151">In/Out</th>
<th class="cellalignment2921" id="r1c3-t151">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t151" headers="r1c1-t151">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t151 r1c2-t151">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t151 r1c3-t151">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t151" headers="r1c1-t151">
<pre>ent
</pre></td>
<td class="cellalignment2922" headers="r3c1-t151 r1c2-t151">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t151 r1c3-t151">entity node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5359"></a>Returns</p>
<p><code>(oratext *)</code> entity&#39;s notation [data encoding; may be <code>NULL</code>]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetentitypubid">XmlDomGetEntityPubID()</a>, <a href="#Xmldomgetentitysysid">XmlDomGetEntitySysID()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5360" class="refsect2"><a id="Xmldomgetentitypubid"></a>
<hr/>
<h3 class="refsect2"><a id="sthref282"></a><a id="sthref283"></a><a id="sthref284"></a>XmlDomGetEntityPubID()</h3>
<p>Returns an entity&#39;s public identifier (in the data encoding). If the node is not an entity, or has no defined public ID, returns <code>NULL</code>.</p>
<p class="subhead1"><a id="CAXML5361"></a>Syntax</p>
<pre>oratext* XmlDomGetEntityPubID(
   xmlctx *xctx,
   xmlentnode *ent);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t153">Parameter</th>
<th class="cellalignment2921" id="r1c2-t153">In/Out</th>
<th class="cellalignment2921" id="r1c3-t153">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t153" headers="r1c1-t153">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t153 r1c2-t153">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t153 r1c3-t153">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t153" headers="r1c1-t153">
<pre>ent
</pre></td>
<td class="cellalignment2922" headers="r3c1-t153 r1c2-t153">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t153 r1c3-t153">entity node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5362"></a>Returns</p>
<p><code>(oratext *)</code> entity&#39;s public identifier [data encoding; may be <code>NULL</code>]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetentitysysid">XmlDomGetEntitySysID()</a>, <a href="#Xmldomgetentitynotation">XmlDomGetEntityNotation()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5363" class="refsect2"><a id="Xmldomgetentitysysid"></a>
<hr/>
<h3 class="refsect2"><a id="sthref285"></a><a id="sthref286"></a><a id="sthref287"></a>XmlDomGetEntitySysID()</h3>
<p>Returns an entity&#39;s system identifier (in the data encoding). If the node is not an entity, or has no defined system ID, returns <code>NULL</code>.</p>
<p class="subhead1"><a id="CAXML5364"></a>Syntax</p>
<pre>oratext* XmlDomGetEntitySysID(
   xmlctx *xctx, 
   xmlentnode *ent);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t155">Parameter</th>
<th class="cellalignment2921" id="r1c2-t155">In/Out</th>
<th class="cellalignment2921" id="r1c3-t155">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t155" headers="r1c1-t155">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t155 r1c2-t155">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t155 r1c3-t155">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t155" headers="r1c1-t155">
<pre>ent
</pre></td>
<td class="cellalignment2922" headers="r3c1-t155 r1c2-t155">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t155 r1c3-t155">entity node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5365"></a>Returns</p>
<p><code>(oratext *)</code> entity&#39;s system identifier [data encoding; may be <code>NULL</code>]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetentitypubid">XmlDomGetEntityPubID()</a>, <a href="#Xmldomgetentitynotation">XmlDomGetEntityNotation()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5366" class="refsect2"><a id="Xmldomgetentitytype"></a>
<hr/>
<h3 class="refsect2"><a id="sthref288"></a><a id="sthref289"></a><a id="sthref290"></a>XmlDomGetEntityType()</h3>
<p>Returns a boolean for an entity describing whether it is general (<code>TRUE</code>) or parameter (<code>FALSE</code>).</p>
<p class="subhead1"><a id="CAXML5367"></a>Syntax</p>
<pre>boolean XmlDomGetEntityType(
   xmlctx *xctx,
   xmlentnode *ent);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t157">Parameter</th>
<th class="cellalignment2921" id="r1c2-t157">In/Out</th>
<th class="cellalignment2921" id="r1c3-t157">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t157" headers="r1c1-t157">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t157 r1c2-t157">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t157 r1c3-t157">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t157" headers="r1c1-t157">
<pre>ent
</pre></td>
<td class="cellalignment2922" headers="r3c1-t157 r1c2-t157">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t157 r1c3-t157">entity node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5368"></a>Returns</p>
<p><code>(boolean)</code> <code>TRUE</code> for general entity, <code>FALSE</code> for parameter entity</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetentitypubid">XmlDomGetEntityPubID()</a>, <a href="#Xmldomgetentitysysid">XmlDomGetEntitySysID()</a>, <a href="#Xmldomgetentitynotation">XmlDomGetEntityNotation()</a></div>
</div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="BABDEJBF"></a>
<hr/>
<div id="CAXML00307" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">NamedNodeMap Interface</h2>
<p><a href="#BABDHGGG">Table 3-7</a> summarizes the methods available through the <code>NamedNodeMap</code> interface.</p>
<div id="CAXML5369" class="tblformal">
<p class="titleintable"><a id="sthref291"></a><a id="BABDHGGG"></a>Table 3-7 Summary of NamedNodeMap Methods; DOM Package</p>
<table class="cellalignment2920" title="Summary of NamedNodeMap Methods; DOM Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t159">Function</th>
<th class="cellalignment2921" id="r1c2-t159">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t159" headers="r1c1-t159">
<p><a href="#Xmldomgetnameditem">XmlDomGetNamedItem()</a></p>
</td>
<td class="cellalignment2922" headers="r2c1-t159 r1c2-t159">
<p>Return named node from list.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t159" headers="r1c1-t159">
<p><a href="#Xmldomgetnameditemns">XmlDomGetNamedItemNS()</a></p>
</td>
<td class="cellalignment2922" headers="r3c1-t159 r1c2-t159">
<p>Return named node from list (namespace aware version).</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t159" headers="r1c1-t159">
<p><a href="#Xmldomgetnodemapitem">XmlDomGetNodeMapItem()</a></p>
</td>
<td class="cellalignment2922" headers="r4c1-t159 r1c2-t159">
<p>Return n<sup>th</sup> node in list.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t159" headers="r1c1-t159">
<p><a href="#Xmldomgetnodemaplength">XmlDomGetNodeMapLength()</a></p>
</td>
<td class="cellalignment2922" headers="r5c1-t159 r1c2-t159">
<p>Return length of named node map.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r6c1-t159" headers="r1c1-t159">
<p><a href="#Xmldomremovenameditem">XmlDomRemoveNamedItem()</a></p>
</td>
<td class="cellalignment2922" headers="r6c1-t159 r1c2-t159">
<p>Remove node from named node map.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r7c1-t159" headers="r1c1-t159">
<p><a href="#Xmldomremovenameditemns">XmlDomRemoveNamedItemNS()</a></p>
</td>
<td class="cellalignment2922" headers="r7c1-t159 r1c2-t159">
<p>Remove node from named node map (namespace aware version).</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r8c1-t159" headers="r1c1-t159">
<p><a href="#Xmldomsetnameditem">XmlDomSetNamedItem()</a></p>
</td>
<td class="cellalignment2922" headers="r8c1-t159 r1c2-t159">
<p>Set node in named node list.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r9c1-t159" headers="r1c1-t159">
<p><a href="#Xmldomsetnameditemns">XmlDomSetNamedItemNS()</a></p>
</td>
<td class="cellalignment2922" headers="r9c1-t159 r1c2-t159">
<p>Set node in named node list (namespace aware version).</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CAXML5370" class="refsect2"><a id="Xmldomgetnameditem"></a>
<hr/>
<h3 class="refsect2"><a id="sthref292"></a><a id="sthref293"></a><a id="sthref294"></a>XmlDomGetNamedItem()</h3>
<p>Retrieves an item from a <code>NamedNodeMap</code>, specified by name (which should be in the data encoding). This is a non-namespace-aware function; it just matches (case sensitively) on the whole qualified name. Note this function differs from the DOM spec in that the index of the matching item is also returned.</p>
<p class="subhead1"><a id="CAXML5371"></a>Syntax</p>
<pre>xmlnode* XmlDomGetNamedItem(
   xmlctx *xctx,
   xmlnamedmap *map,
   oratext *name);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t160">Parameter</th>
<th class="cellalignment2921" id="r1c2-t160">In/Out</th>
<th class="cellalignment2921" id="r1c3-t160">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t160" headers="r1c1-t160">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t160 r1c2-t160">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t160 r1c3-t160">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t160" headers="r1c1-t160">
<pre>map
</pre></td>
<td class="cellalignment2922" headers="r3c1-t160 r1c2-t160">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t160 r1c3-t160"><code>NamedNodeMap</code></td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t160" headers="r1c1-t160">
<pre>name
</pre></td>
<td class="cellalignment2922" headers="r4c1-t160 r1c2-t160">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t160 r1c3-t160">name of the node to retrieve</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5372"></a>Returns</p>
<p><code>(xmlnode *)</code> <code>Node</code> with the specified name [or <code>NULL</code>]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetnameditemns">XmlDomGetNamedItemNS()</a>, <a href="#Xmldomgetnodemapitem">XmlDomGetNodeMapItem()</a>, <a href="#Xmldomgetnodemaplength">XmlDomGetNodeMapLength()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5373" class="refsect2"><a id="Xmldomgetnameditemns"></a>
<hr/>
<h3 class="refsect2"><a id="sthref295"></a><a id="sthref296"></a><a id="sthref297"></a>XmlDomGetNamedItemNS()</h3>
<p>Retrieves an item from a <code>NamedNodeMap</code>, specified by URI and localname (which should be in the data encoding). Note this function differs from the DOM spec in that the index of the matching item is also returned.</p>
<p class="subhead1"><a id="CAXML5374"></a>Syntax</p>
<pre>xmlnode* XmlDomGetNamedItemNS(
   xmlctx *xctx,
   xmlnamedmap *map, 
   oratext *uri,
   oratext *local);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t162">Parameter</th>
<th class="cellalignment2921" id="r1c2-t162">In/Out</th>
<th class="cellalignment2921" id="r1c3-t162">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t162" headers="r1c1-t162">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t162 r1c2-t162">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t162 r1c3-t162">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t162" headers="r1c1-t162">
<pre>map
</pre></td>
<td class="cellalignment2922" headers="r3c1-t162 r1c2-t162">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t162 r1c3-t162"><code>NamedNodeMap</code></td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t162" headers="r1c1-t162">
<pre>uri
</pre></td>
<td class="cellalignment2922" headers="r4c1-t162 r1c2-t162">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t162 r1c3-t162">namespace URI of the node to retrieve; data encoding</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t162" headers="r1c1-t162">
<pre>local
</pre></td>
<td class="cellalignment2922" headers="r5c1-t162 r1c2-t162">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t162 r1c3-t162">local name of the node to retrieve; data encoding</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5375"></a>Returns</p>
<p><code>(xmlnode *)</code> node with given local name and namespace URI [or <code>NULL</code>]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetnameditem">XmlDomGetNamedItem()</a>, <a href="#Xmldomgetnodemapitem">XmlDomGetNodeMapItem()</a>, <a href="#Xmldomgetnodemaplength">XmlDomGetNodeMapLength()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5376" class="refsect2"><a id="Xmldomgetnodemapitem"></a>
<hr/>
<h3 class="refsect2"><a id="sthref298"></a><a id="sthref299"></a><a id="sthref300"></a>XmlDomGetNodeMapItem()</h3>
<p>Retrieves an item from a <code>NamedNodeMap</code>, specified by name (which should be in the data encoding). This is a non-namespace-aware function; it just matches (case sensitively) on the whole qualified name. Note this function differs from the DOM specification in that the index of the matching item is also returned. Named &#34;item&#34; in W3C specification.</p>
<p class="subhead1"><a id="CAXML5377"></a>Syntax</p>
<pre>xmlnode* XmlDomGetNodeMapItem(
   xmlctx *xctx, 
   xmlnamedmap *map, 
   ub4 index);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t164">Parameter</th>
<th class="cellalignment2921" id="r1c2-t164">In/Out</th>
<th class="cellalignment2921" id="r1c3-t164">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t164" headers="r1c1-t164">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t164 r1c2-t164">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t164 r1c3-t164">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t164" headers="r1c1-t164">
<pre>map
</pre></td>
<td class="cellalignment2922" headers="r3c1-t164 r1c2-t164">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t164 r1c3-t164"><code>NamedNodeMap</code></td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t164" headers="r1c1-t164">
<pre>index
</pre></td>
<td class="cellalignment2922" headers="r4c1-t164 r1c2-t164">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t164 r1c3-t164"><code>0</code>-based index for the map</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5378"></a>Returns</p>
<p><code>(xmlnode *)</code> node at the nth position in the map (or <code>NULL</code>)</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetnameditem">XmlDomGetNamedItem()</a>, <a href="#Xmldomsetnameditem">XmlDomSetNamedItem()</a>, <a href="#Xmldomremovenameditem">XmlDomRemoveNamedItem()</a>, <a href="#Xmldomgetnodemaplength">XmlDomGetNodeMapLength()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5379" class="refsect2"><a id="Xmldomgetnodemaplength"></a>
<hr/>
<h3 class="refsect2"><a id="sthref301"></a><a id="sthref302"></a><a id="sthref303"></a>XmlDomGetNodeMapLength()</h3>
<p>Returns the number of nodes in a <code>NamedNodeMap</code> (the length). Note that nodes are referred to by index, and the range of valid indexes is <code>0</code> through length-1.</p>
<p class="subhead1"><a id="CAXML5380"></a>Syntax</p>
<pre>ub4 XmlDomGetNodeMapLength(
   xmlctx *xctx,
   xmlnamedmap *map);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t166">Parameter</th>
<th class="cellalignment2921" id="r1c2-t166">In/Out</th>
<th class="cellalignment2921" id="r1c3-t166">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t166" headers="r1c1-t166">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t166 r1c2-t166">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t166 r1c3-t166">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t166" headers="r1c1-t166">
<pre>map
</pre></td>
<td class="cellalignment2922" headers="r3c1-t166 r1c2-t166">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t166 r1c3-t166"><code>NamedNodeMap</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5381"></a>Returns</p>
<p><code>(ub4)</code> number of nodes in <code>NamedNodeMap</code></p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetnodemapitem">XmlDomGetNodeMapItem()</a>, <a href="#Xmldomgetnameditem">XmlDomGetNamedItem()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5382" class="refsect2"><a id="Xmldomremovenameditem"></a>
<hr/>
<h3 class="refsect2"><a id="sthref304"></a><a id="sthref305"></a><a id="sthref306"></a>XmlDomRemoveNamedItem()</h3>
<p>Removes a node from a <code>NamedNodeMap</code>, specified by name. This is a non-namespace-aware function; it just matches (case sensitively) on the whole qualified name. If the removed node is an attribute with default value (not specified), it is immediately replaced. The removed node is returned; if no removal took place, <code>NULL</code> is returned.</p>
<p class="subhead1"><a id="CAXML5383"></a>Syntax</p>
<pre>xmlnode* XmlDomRemoveNamedItem(
   xmlctx *xctx,
   xmlnamedmap *map,
   oratext *name);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t168">Parameter</th>
<th class="cellalignment2921" id="r1c2-t168">In/Out</th>
<th class="cellalignment2921" id="r1c3-t168">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t168" headers="r1c1-t168">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t168 r1c2-t168">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t168 r1c3-t168">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t168" headers="r1c1-t168">
<pre>map
</pre></td>
<td class="cellalignment2922" headers="r3c1-t168 r1c2-t168">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t168 r1c3-t168"><code>NamedNodeMap</code></td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t168" headers="r1c1-t168">
<pre>name
</pre></td>
<td class="cellalignment2922" headers="r4c1-t168 r1c2-t168">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t168 r1c3-t168">name of node to remove</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5384"></a>Returns</p>
<p><code>(xmlnode *)</code> node removed from this map</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomremovenameditemns">XmlDomRemoveNamedItemNS()</a>, <a href="#Xmldomgetnameditem">XmlDomGetNamedItem()</a>, <a href="#Xmldomgetnameditemns">XmlDomGetNamedItemNS()</a>, <a href="#Xmldomsetnameditem">XmlDomSetNamedItem()</a>, <a href="#Xmldomsetnameditemns">XmlDomSetNamedItemNS()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5385" class="refsect2"><a id="Xmldomremovenameditemns"></a>
<hr/>
<h3 class="refsect2"><a id="sthref307"></a><a id="sthref308"></a><a id="sthref309"></a>XmlDomRemoveNamedItemNS()</h3>
<p>Removes a node from a <code>NamedNodeMap</code>, specified by URI and localname. If the removed node is an attribute with default value (not specified), it is immediately replaced. The removed node is returned; if no removal took place, <code>NULL</code> is returned.</p>
<p class="subhead1"><a id="CAXML5386"></a>Syntax</p>
<pre>xmlnode* XmlDomRemoveNamedItemNS(
   xmlctx *xctx,
   xmlnamedmap *map, 
   oratext *uri,
   oratext *local);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t170">Parameter</th>
<th class="cellalignment2921" id="r1c2-t170">In/Out</th>
<th class="cellalignment2921" id="r1c3-t170">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t170" headers="r1c1-t170">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t170 r1c2-t170">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t170 r1c3-t170">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t170" headers="r1c1-t170">
<pre>map
</pre></td>
<td class="cellalignment2922" headers="r3c1-t170 r1c2-t170">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t170 r1c3-t170"><code>NamedNodeMap</code></td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t170" headers="r1c1-t170">
<pre>uri
</pre></td>
<td class="cellalignment2922" headers="r4c1-t170 r1c2-t170">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t170 r1c3-t170">namespace URI of the node to remove; data encoding</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t170" headers="r1c1-t170">
<pre>local
</pre></td>
<td class="cellalignment2922" headers="r5c1-t170 r1c2-t170">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t170 r1c3-t170">local name of the node to remove; data encoding</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5387"></a>Returns</p>
<p><code>(xmlnode *)</code> node removed from this map</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomremovenameditem">XmlDomRemoveNamedItem()</a>, <a href="#Xmldomgetnameditem">XmlDomGetNamedItem()</a>, <a href="#Xmldomgetnameditemns">XmlDomGetNamedItemNS()</a>, <a href="#Xmldomsetnameditem">XmlDomSetNamedItem()</a>, <a href="#Xmldomsetnameditemns">XmlDomSetNamedItemNS()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5388" class="refsect2"><a id="Xmldomsetnameditem"></a>
<hr/>
<h3 class="refsect2"><a id="sthref310"></a><a id="sthref311"></a><a id="sthref312"></a>XmlDomSetNamedItem()</h3>
<p>Adds a new node to a <code>NamedNodeMap</code>. If a node already exists with the given name, replaces the old node and returns it. If no such named node exists, adds the new node to the map and sets old to <code>NULL</code>. This is a non-namespace-aware function; it just matches (case sensitively) on the whole qualified name. Since some node types have fixed names (<code>Text</code>, <code>Comment</code>, and so on), trying to set another of the same type will always cause replacement.</p>
<p class="subhead1"><a id="CAXML5389"></a>Syntax</p>
<pre>xmlnode* XmlDomSetNamedItem(
   xmlctx *xctx,
   xmlnamedmap *map,
   xmlnode *newNode);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t172">Parameter</th>
<th class="cellalignment2921" id="r1c2-t172">In/Out</th>
<th class="cellalignment2921" id="r1c3-t172">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t172" headers="r1c1-t172">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t172 r1c2-t172">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t172 r1c3-t172">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t172" headers="r1c1-t172">
<pre>map
</pre></td>
<td class="cellalignment2922" headers="r3c1-t172 r1c2-t172">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t172 r1c3-t172"><code>NamedNodeMap</code></td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t172" headers="r1c1-t172">
<pre>newNode
</pre></td>
<td class="cellalignment2922" headers="r4c1-t172 r1c2-t172">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t172 r1c3-t172">new node to store in map</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5390"></a>Returns</p>
<p><code>(xmlnode *)</code> the replaced node (or <code>NULL</code>)</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomsetnameditemns">XmlDomSetNamedItemNS()</a>, <a href="#Xmldomgetnameditem">XmlDomGetNamedItem()</a>, <a href="#Xmldomgetnameditemns">XmlDomGetNamedItemNS()</a>, <a href="#Xmldomgetnodemapitem">XmlDomGetNodeMapItem()</a>, <a href="#Xmldomgetnodemaplength">XmlDomGetNodeMapLength()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5391" class="refsect2"><a id="Xmldomsetnameditemns"></a>
<hr/>
<h3 class="refsect2"><a id="sthref313"></a><a id="sthref314"></a><a id="sthref315"></a>XmlDomSetNamedItemNS()</h3>
<p>Adds a new node to a <code>NamedNodeMap</code>. If a node already exists with the given URI and localname, replaces the old node and returns it. If no such named node exists, adds the new node to the map and sets old to <code>NULL</code>. Since some node types have fixed names (<code>Text</code>, <code>Comment</code>, and so on), trying to set another of the same type will always cause replacement.</p>
<p class="subhead1"><a id="CAXML5392"></a>Syntax</p>
<pre>xmlnode* XmlDomSetNamedItemNS(
   xmlctx *xctx, 
   xmlnamedmap *map, 
   xmlnode *newNode);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t174">Parameter</th>
<th class="cellalignment2921" id="r1c2-t174">In/Out</th>
<th class="cellalignment2921" id="r1c3-t174">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t174" headers="r1c1-t174">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t174 r1c2-t174">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t174 r1c3-t174">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t174" headers="r1c1-t174">
<pre>map
</pre></td>
<td class="cellalignment2922" headers="r3c1-t174 r1c2-t174">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t174 r1c3-t174"><code>NamedNodeMap</code></td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t174" headers="r1c1-t174">
<pre>newNode
</pre></td>
<td class="cellalignment2922" headers="r4c1-t174 r1c2-t174">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t174 r1c3-t174">new node to store in map</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5393"></a>Returns</p>
<p><code>(xmlnode *)</code> replaced <code>Node</code> [or <code>NULL</code>]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomsetnameditem">XmlDomSetNamedItem()</a>, <a href="#Xmldomgetnameditem">XmlDomGetNamedItem()</a>, <a href="#Xmldomgetnameditemns">XmlDomGetNamedItemNS()</a>, <a href="#Xmldomgetnodemapitem">XmlDomGetNodeMapItem()</a>, <a href="#Xmldomgetnodemaplength">XmlDomGetNodeMapLength()</a></div>
</div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="BABDGBBG"></a>
<hr/>
<div id="CAXML00308" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">Node Interface</h2>
<p><a href="#BABICBAC">Table 3-8</a> summarizes the methods available through the <code>Node</code> interface.</p>
<div id="CAXML5394" class="tblformal">
<p class="titleintable"><a id="sthref316"></a><a id="BABICBAC"></a>Table 3-8 Summary of Node Methods; DOM Package</p>
<table class="cellalignment2920" title="Summary of Node Methods; DOM Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t176">Function</th>
<th class="cellalignment2921" id="r1c2-t176">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomappendchild">XmlDomAppendChild()</a></p>
</td>
<td class="cellalignment2922" headers="r2c1-t176 r1c2-t176">
<p>Append new child to node&#39;s list of children.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomcleannode">XmlDomCleanNode()</a></p>
</td>
<td class="cellalignment2922" headers="r3c1-t176 r1c2-t176">
<p>Clean a node (free DOM allocations).</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomclonenode">XmlDomCloneNode()</a></p>
</td>
<td class="cellalignment2922" headers="r4c1-t176 r1c2-t176">
<p>Clone a node.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomfreenode">XmlDomFreeNode()</a></p>
</td>
<td class="cellalignment2922" headers="r5c1-t176 r1c2-t176">
<p>Free a node allocated with <code>XmlDomCreateXXX</code>.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r6c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomgetattrs">XmlDomGetAttrs()</a></p>
</td>
<td class="cellalignment2922" headers="r6c1-t176 r1c2-t176">
<p>Return attributes of node.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r7c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomgetchildnodes">XmlDomGetChildNodes()</a></p>
</td>
<td class="cellalignment2922" headers="r7c1-t176 r1c2-t176">
<p>Return children of node.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r8c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomgetdefaultns">XmlDomGetDefaultNS()</a></p>
</td>
<td class="cellalignment2922" headers="r8c1-t176 r1c2-t176">
<p>Get default namespace for node.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r9c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomgetfirstchild">XmlDomGetFirstChild()</a></p>
</td>
<td class="cellalignment2922" headers="r9c1-t176 r1c2-t176">
<p>Returns first child of node.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r10c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomgetfirstpfnspair">XmlDomGetFirstPfnsPair()</a></p>
</td>
<td class="cellalignment2922" headers="r10c1-t176 r1c2-t176">
<p>Get first prefix namespace pair.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r11c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomgetlastchild">XmlDomGetLastChild()</a></p>
</td>
<td class="cellalignment2922" headers="r11c1-t176 r1c2-t176">
<p>Returns last child of node.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r12c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomgetnextpfnspair">XmlDomGetNextPfnsPair()</a></p>
</td>
<td class="cellalignment2922" headers="r12c1-t176 r1c2-t176">
<p>Get subsequent prefix namespace pair.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r13c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomgetnextsibling">XmlDomGetNextSibling()</a></p>
</td>
<td class="cellalignment2922" headers="r13c1-t176 r1c2-t176">
<p>Return next sibling of node.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r14c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomgetnodelocal">XmlDomGetNodeLocal()</a></p>
</td>
<td class="cellalignment2922" headers="r14c1-t176 r1c2-t176">
<p>Get local part of node&#39;s qualified name as <code>NULL</code>-terminated string.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r15c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomgetnodelocallen">XmlDomGetNodeLocalLen()</a></p>
</td>
<td class="cellalignment2922" headers="r15c1-t176 r1c2-t176">
<p>Get local part of node&#39;s qualified name as length-encoded string.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r16c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomgetnodename">XmlDomGetNodeName()</a></p>
</td>
<td class="cellalignment2922" headers="r16c1-t176 r1c2-t176">
<p>Get node&#39;s name as <code>NULL</code>-terminated string.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r17c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomgetnodenamelen">XmlDomGetNodeNameLen()</a></p>
</td>
<td class="cellalignment2922" headers="r17c1-t176 r1c2-t176">
<p>Get node&#39;s name as length-encoded string.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r18c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomgetnodeprefix">XmlDomGetNodePrefix()</a></p>
</td>
<td class="cellalignment2922" headers="r18c1-t176 r1c2-t176">
<p>Return namespace prefix of node.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r19c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomgetnodetype">XmlDomGetNodeType()</a></p>
</td>
<td class="cellalignment2922" headers="r19c1-t176 r1c2-t176">
<p>Get node&#39;s numeric type code.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r20c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomgetnodeuri">XmlDomGetNodeURI()</a></p>
</td>
<td class="cellalignment2922" headers="r20c1-t176 r1c2-t176">
<p>Return namespace URI of node as a <code>NULL</code>-terminated string.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r21c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomgetnodeurilen">XmlDomGetNodeURILen()</a></p>
</td>
<td class="cellalignment2922" headers="r21c1-t176 r1c2-t176">
<p>Return namespace URI of node as length-encoded string.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r22c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomgetnodevalue">XmlDomGetNodeValue()</a></p>
</td>
<td class="cellalignment2922" headers="r22c1-t176 r1c2-t176">
<p>Get node&#39;s value as <code>NULL</code>-terminated string.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r23c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomgetnodevaluelen">XmlDomGetNodeValueLen()</a></p>
</td>
<td class="cellalignment2922" headers="r23c1-t176 r1c2-t176">
<p>Get node value as length-encoded string.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r24c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomgetnodevaluestream">XmlDomGetNodeValueStream()</a></p>
</td>
<td class="cellalignment2922" headers="r24c1-t176 r1c2-t176">
<p>Returns the large data for a node and sends it in pieces to the user&#39;s output stream.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r25c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomgetownerdocument">XmlDomGetOwnerDocument()</a></p>
</td>
<td class="cellalignment2922" headers="r25c1-t176 r1c2-t176">
<p>Get the owner document of node.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r26c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomgetparentnode">XmlDomGetParentNode()</a></p>
</td>
<td class="cellalignment2922" headers="r26c1-t176 r1c2-t176">
<p>Get parent node.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r27c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomgetprevsibling">XmlDomGetPrevSibling()</a></p>
</td>
<td class="cellalignment2922" headers="r27c1-t176 r1c2-t176">
<p>Return previous sibling of node.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r28c1-t176" headers="r1c1-t176">
<p><a href="#CDEEBBJJ">XmlDomGetPullNodeAsBinaryStream()</a></p>
</td>
<td class="cellalignment2922" headers="r28c1-t176 r1c2-t176">
<p>Returns the address of a binary stream using the pull paradigm.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r29c1-t176" headers="r1c1-t176">
<p><a href="#CDEJJIIG">XmlDomGetPullNodeAsCharacterStream()</a></p>
</td>
<td class="cellalignment2922" headers="r29c1-t176 r1c2-t176">
<p>Returns the address of a character stream using the pull paradigm.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r30c1-t176" headers="r1c1-t176">
<p><a href="#CDEIHDHF">XmlDomGetPushNodeAsBinaryStream()</a></p>
</td>
<td class="cellalignment2922" headers="r30c1-t176 r1c2-t176">
<p>Returns the address of a binary stream, as an <code>OUT ostream</code> parameter, using the push paradigm.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r31c1-t176" headers="r1c1-t176">
<p><a href="#CDEIJDHG">XmlDomGetPushNodeAsCharacterStream()</a></p>
</td>
<td class="cellalignment2922" headers="r31c1-t176 r1c2-t176">
<p>Returns the address of a character stream, as an <code>OUT ostream</code> parameter, using the push paradigm.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r32c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomgetsourceentity">XmlDomGetSourceEntity()</a></p>
</td>
<td class="cellalignment2922" headers="r32c1-t176 r1c2-t176">
<p>Return the entity node if the input file is an external entity.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r33c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomgetsourceline">XmlDomGetSourceLine()</a></p>
</td>
<td class="cellalignment2922" headers="r33c1-t176 r1c2-t176">
<p>Return source line number of node.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r34c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomgetsourcelocation">XmlDomGetSourceLocation()</a></p>
</td>
<td class="cellalignment2922" headers="r34c1-t176 r1c2-t176">
<p>Return source location (path, URI, and so on) of node.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r35c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomhasattr">XmlDomHasAttr()</a></p>
</td>
<td class="cellalignment2922" headers="r35c1-t176 r1c2-t176">
<p>Does named attribute exist?</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r36c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomhaschildnodes">XmlDomHasChildNodes()</a></p>
</td>
<td class="cellalignment2922" headers="r36c1-t176 r1c2-t176">
<p>Test if node has children.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r37c1-t176" headers="r1c1-t176">
<p><a href="#Xmldominsertbefore">XmlDomInsertBefore()</a></p>
</td>
<td class="cellalignment2922" headers="r37c1-t176 r1c2-t176">
<p>Insert new child in to node&#39;s list of children.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r38c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomnormalize">XmlDomNormalize()</a></p>
</td>
<td class="cellalignment2922" headers="r38c1-t176 r1c2-t176">
<p>Normalize a node by merging adjacent text nodes.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r39c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomnumattrs">XmlDomNumAttrs()</a></p>
</td>
<td class="cellalignment2922" headers="r39c1-t176 r1c2-t176">
<p>Return number of attributes of element.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r40c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomnumchildnodes">XmlDomNumChildNodes()</a></p>
</td>
<td class="cellalignment2922" headers="r40c1-t176 r1c2-t176">
<p>Return number of children of node.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r41c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomprefixtouri">XmlDomPrefixToURI()</a></p>
</td>
<td class="cellalignment2922" headers="r41c1-t176 r1c2-t176">
<p>Get namespace URI for prefix.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r42c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomremovechild">XmlDomRemoveChild()</a></p>
</td>
<td class="cellalignment2922" headers="r42c1-t176 r1c2-t176">
<p>Remove an existing child node.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r43c1-t176" headers="r1c1-t176">
<p><a href="#CHDHFFCC">XmlDomRenameNode()</a></p>
</td>
<td class="cellalignment2922" headers="r43c1-t176 r1c2-t176">
<p>Updates the name of a node, for element and attribute nodes only.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r44c1-t176" headers="r1c1-t176">
<p><a href="#CHDDIDBG">XmlDomRenameNodeNS()</a></p>
</td>
<td class="cellalignment2922" headers="r44c1-t176 r1c2-t176">
<p>Updates the name and URI of a node, for element and attribute nodes only.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r45c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomreplacechild">XmlDomReplaceChild()</a></p>
</td>
<td class="cellalignment2922" headers="r45c1-t176 r1c2-t176">
<p>Replace an existing child of a node.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r46c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomsetdefaultns">XmlDomSetDefaultNS()</a></p>
</td>
<td class="cellalignment2922" headers="r46c1-t176 r1c2-t176">
<p>Set default namespace for node.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r47c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomsetnodeprefix">XmlDomSetNodePrefix()</a></p>
</td>
<td class="cellalignment2922" headers="r47c1-t176 r1c2-t176">
<p>Set namespace prefix of node.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r48c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomsetnodevalue">XmlDomSetNodeValue()</a></p>
</td>
<td class="cellalignment2922" headers="r48c1-t176 r1c2-t176">
<p>Set node value.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r49c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomsetnodevaluelen">XmlDomSetNodeValueLen()</a></p>
</td>
<td class="cellalignment2922" headers="r49c1-t176 r1c2-t176">
<p>Set node value as length-encoded string.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r50c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomsetnodevaluestream">XmlDomSetNodeValueStream()</a></p>
</td>
<td class="cellalignment2922" headers="r50c1-t176 r1c2-t176">
<p>Sets the large &#34;value&#34; (character data) for a node piecemeal from an input stream.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r51c1-t176" headers="r1c1-t176">
<p><a href="#CDEBFGIG">XmlDomSetPullNodeAsBinaryStream()</a></p>
</td>
<td class="cellalignment2922" headers="r51c1-t176 r1c2-t176">
<p>Returns the address of a binary input stream, as an <code>OUT istream</code> parameter, using the pull paradigm.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r52c1-t176" headers="r1c1-t176">
<p><a href="#CDEBFFAF">XmlDomSetPullNodeAsCharacterStream()</a></p>
</td>
<td class="cellalignment2922" headers="r52c1-t176 r1c2-t176">
<p>Returns the address of an input character stream, as an <code>OUT istream</code> parameter, using the pull paradigm.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r53c1-t176" headers="r1c1-t176">
<p><a href="#CDEEDBHG">XmlDomSetPushNodeAsBinaryStream()</a></p>
</td>
<td class="cellalignment2922" headers="r53c1-t176 r1c2-t176">
<p>Returns the address of an input binary stream using the push paradigm.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r54c1-t176" headers="r1c1-t176">
<p><a href="#CDEGAHHA">XmlDomSetPushNodeAsCharacterStream()</a></p>
</td>
<td class="cellalignment2922" headers="r54c1-t176 r1c2-t176">
<p>Returns the address of a character stream using the push paradigm.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r55c1-t176" headers="r1c1-t176">
<p><a href="#Xmldomvalidate">XmlDomValidate()</a></p>
</td>
<td class="cellalignment2922" headers="r55c1-t176 r1c2-t176">
<p>Validate a node against current DTD.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CAXML5395" class="refsect2"><a id="Xmldomappendchild"></a>
<hr/>
<h3 class="refsect2"><a id="sthref317"></a><a id="sthref318"></a><a id="sthref319"></a>XmlDomAppendChild()</h3>
<p>Appends the node to the end of the parent&#39;s list of children and returns the new node. If <code>newChild</code> is a <code>DocumentFragment</code>, all of its children are appended in original order; the <code>DocumentFragment</code> node itself is not.</p>
<p class="subhead1"><a id="CAXML5396"></a>Syntax</p>
<pre>xmlnode* XmlDomAppendChild(
   xmlctx *xctx, 
   xmlnode *parent, 
   xmlnode *newChild);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t177">Parameter</th>
<th class="cellalignment2921" id="r1c2-t177">In/Out</th>
<th class="cellalignment2921" id="r1c3-t177">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t177" headers="r1c1-t177">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t177 r1c2-t177">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t177 r1c3-t177">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t177" headers="r1c1-t177">
<pre>parent
</pre></td>
<td class="cellalignment2922" headers="r3c1-t177 r1c2-t177">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t177 r1c3-t177">parent to receive a new node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t177" headers="r1c1-t177">
<pre>newChild
</pre></td>
<td class="cellalignment2922" headers="r4c1-t177 r1c2-t177">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t177 r1c3-t177">node to add</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5397"></a>Returns</p>
<p><code>(xmlnode *)</code> node added</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldominsertbefore">XmlDomInsertBefore()</a>, <a href="#Xmldomreplacechild">XmlDomReplaceChild()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5398" class="refsect2"><a id="Xmldomcleannode"></a>
<hr/>
<h3 class="refsect2"><a id="sthref320"></a><a id="sthref321"></a><a id="sthref322"></a>XmlDomCleanNode()</h3>
<p>Frees parts of the node which were allocated by DOM itself, but does not recurse to children or touch the node&#39;s attributes. After freeing part of the node (such as name), a DOM call to get that part (such as <code>XmlDomGetNodeName</code>) should return a <code>NULL</code> pointer. Used to manage the allocations of a node parts of which are controlled by DOM, and part by the user. Calling clean frees all allocations may by DOM and leaves the user&#39;s allocations alone. The user is responsible for freeing their own allocations.</p>
<p class="subhead1"><a id="CAXML5399"></a>Syntax</p>
<pre>void XmlDomCleanNode(
   xmlctx *xctx, 
   xmlnode *node);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t179">Parameter</th>
<th class="cellalignment2921" id="r1c2-t179">In/Out</th>
<th class="cellalignment2921" id="r1c3-t179">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t179" headers="r1c1-t179">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t179 r1c2-t179">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t179 r1c3-t179">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t179" headers="r1c1-t179">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t179 r1c2-t179">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t179 r1c3-t179">node to clean</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomfreenode">XmlDomFreeNode()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5400" class="refsect2"><a id="Xmldomclonenode"></a>
<hr/>
<h3 class="refsect2"><a id="sthref323"></a><a id="sthref324"></a><a id="sthref325"></a>XmlDomCloneNode()</h3>
<p>Creates and returns a duplicate of a node. The duplicate node has no parent. Cloning an element copies all attributes and their values, including those generated by the XML processor to represent defaulted attributes, but it does not copy any text it contains unless it is a deep clone, since the text is contained in a child text node. Cloning any other type of node simply returns a copy of the node. Note that a clone of an unspecified attribute node is specified. If deep is <code>TRUE</code>, all children of the node are recursively cloned, and the cloned node will have cloned children; a non-deep clone will have no children.</p>
<p class="subhead1"><a id="CAXML5401"></a>Syntax</p>
<pre>xmlnode* XmlDomCloneNode(
   xmlctx *xctx, 
   xmlnode *node, 
   boolean deep);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t181">Parameter</th>
<th class="cellalignment2921" id="r1c2-t181">In/Out</th>
<th class="cellalignment2921" id="r1c3-t181">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t181" headers="r1c1-t181">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t181 r1c2-t181">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t181 r1c3-t181">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t181" headers="r1c1-t181">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t181 r1c2-t181">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t181 r1c3-t181">XML node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t181" headers="r1c1-t181">
<pre>deep
</pre></td>
<td class="cellalignment2922" headers="r4c1-t181 r1c2-t181">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t181 r1c3-t181"><code>TRUE</code> to recursively clone children</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5402"></a>Returns</p>
<p><code>(xmlnode *)</code> duplicate (cloned) node</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomimportnode">XmlDomImportNode()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5403" class="refsect2"><a id="Xmldomfreenode"></a>
<hr/>
<h3 class="refsect2"><a id="sthref326"></a><a id="sthref327"></a><a id="sthref328"></a>XmlDomFreeNode()</h3>
<p>Free a node allocated with <code>XmlDomCreate</code><code><span class="codeinlineitalic">XXX</span></code>. Frees all resources associated with a node, then frees the node itself. Certain parts of the node are under DOM control, and some parts may be under user control. DOM keeps flags tracking who owns what, and only frees its own allocations. The user is responsible for freeing their own parts of the node before calling XmlDomFreeNode.</p>
<p class="subhead1"><a id="CAXML5404"></a>Syntax</p>
<pre>void XmlDomFreeNode(
   xmlctx *xctx, 
   xmlnode *node);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t183">Parameter</th>
<th class="cellalignment2921" id="r1c2-t183">In/Out</th>
<th class="cellalignment2921" id="r1c3-t183">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t183" headers="r1c1-t183">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t183 r1c2-t183">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t183 r1c3-t183">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t183" headers="r1c1-t183">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t183 r1c2-t183">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t183 r1c3-t183">XML node to free</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomcleannode">XmlDomCleanNode()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5405" class="refsect2"><a id="Xmldomgetattrs"></a>
<hr/>
<h3 class="refsect2"><a id="sthref329"></a><a id="sthref330"></a><a id="sthref331"></a>XmlDomGetAttrs()</h3>
<p>Returns a <code>NamedNodeMap</code> of attributes of an element node, or <code>NULL</code> if it has no attributes. For other node types, <code>NULL</code> is returned. Note that if an element once had attributes, but they have all been removed, an empty list will be returned. So, presence of the list does not mean the element has attributes. You must check the size of the list with <code>XmlDomNumAttrs</code> or use <code>XmlDomHasChildNodes</code> first.</p>
<p class="subhead1"><a id="CAXML5406"></a>Syntax</p>
<pre>xmlnamedmap* XmlDomGetAttrs(
   xmlctx *xctx, 
   xmlelemnode *elem);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t185">Parameter</th>
<th class="cellalignment2921" id="r1c2-t185">In/Out</th>
<th class="cellalignment2921" id="r1c3-t185">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t185" headers="r1c1-t185">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t185 r1c2-t185">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t185 r1c3-t185">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t185" headers="r1c1-t185">
<pre>elem
</pre></td>
<td class="cellalignment2922" headers="r3c1-t185 r1c2-t185">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t185 r1c3-t185">XML element node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5407"></a>Returns</p>
<p><code>(xmlnamedmap *)</code> <code>NamedNodeMap</code> of node&#39;s attributes</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomnumattrs">XmlDomNumAttrs()</a>, <a href="#Xmldomhaschildnodes">XmlDomHasChildNodes()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5408" class="refsect2"><a id="Xmldomgetchildnodes"></a>
<hr/>
<h3 class="refsect2"><a id="sthref332"></a><a id="sthref333"></a><a id="sthref334"></a>XmlDomGetChildNodes()</h3>
<p>Returns a list of the node&#39;s children, or <code>NULL</code> if it has no children. Only <code>Element</code>, <code>Document</code>, DTD, and <code>DocumentFragment</code> nodes may have children; all other types will return <code>NULL</code>.</p>
<p>Note that an empty list may be returned if the node once had children, but all have been removed! That is, the list may exist but have no members. So, presence of the list alone does not mean the node has children. You must check the size of the list with <code>XmlDomNumChildNodes</code> or use <code>XmlDomHasChildNodes</code> first.</p>
<p>The xmlnodelist structure is opaque and can only be manipulated with functions in the <code>NodeList</code> interface.</p>
<p>The returned list is live; all changes in the original node are reflected immediately.</p>
<p class="subhead1"><a id="CAXML5409"></a>Syntax</p>
<pre>xmlnodelist* XmlDomGetChildNodes(
   xmlctx *xctx, 
   xmlnode *node);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t187">Parameter</th>
<th class="cellalignment2921" id="r1c2-t187">In/Out</th>
<th class="cellalignment2921" id="r1c3-t187">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t187" headers="r1c1-t187">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t187 r1c2-t187">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t187 r1c3-t187">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t187" headers="r1c1-t187">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t187 r1c2-t187">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t187 r1c3-t187">XML node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5410"></a>Returns</p>
<p><code>(xmlnodelist *)</code> live <code>NodeList</code> containing all children of node</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML5411" class="refsect2"><a id="Xmldomgetdefaultns"></a>
<hr/>
<h3 class="refsect2"><a id="sthref335"></a><a id="sthref336"></a><a id="sthref337"></a>XmlDomGetDefaultNS()</h3>
<p>Gets the default namespace for a node.</p>
<p class="subhead1"><a id="CAXML5412"></a>Syntax</p>
<pre>oratext* XmlDomGetDefaultNS(
   xmlctx *xctx, 
   xmlnode *node);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t188">Parameter</th>
<th class="cellalignment2921" id="r1c2-t188">In/Out</th>
<th class="cellalignment2921" id="r1c3-t188">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t188" headers="r1c1-t188">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t188 r1c2-t188">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t188 r1c3-t188">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t188" headers="r1c1-t188">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t188 r1c2-t188">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t188 r1c3-t188">element or attribute DOM node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5413"></a>Returns</p>
<p><code>(oratext *)</code> default namespace for node [data encoding; may be <code>NULL</code>]</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML5414" class="refsect2"><a id="Xmldomgetfirstchild"></a>
<hr/>
<h3 class="refsect2"><a id="sthref338"></a><a id="sthref339"></a><a id="sthref340"></a>XmlDomGetFirstChild()</h3>
<p>Returns the first child of a node, or <code>NULL</code> if the node has no children. Only <code>Element</code>, <code>Document</code>, DTD, and <code>DocumentFragment</code> nodes may have children; all other types will return <code>NULL</code>.</p>
<p class="subhead1"><a id="CAXML5415"></a>Syntax</p>
<pre>xmlnode* XmlDomGetFirstChild(
   xmlctx *xctx,
   xmlnode *node);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t189">Parameter</th>
<th class="cellalignment2921" id="r1c2-t189">In/Out</th>
<th class="cellalignment2921" id="r1c3-t189">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t189" headers="r1c1-t189">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t189 r1c2-t189">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t189 r1c3-t189">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t189" headers="r1c1-t189">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t189 r1c2-t189">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t189 r1c3-t189">XML node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5416"></a>Returns</p>
<p><code>(xmlnode *)</code> first child of node</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetlastchild">XmlDomGetLastChild()</a>, <a href="#Xmldomhaschildnodes">XmlDomHasChildNodes()</a>, <a href="#Xmldomgetchildnodes">XmlDomGetChildNodes()</a>, <a href="#Xmldomnumchildnodes">XmlDomNumChildNodes()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5417" class="refsect2"><a id="Xmldomgetfirstpfnspair"></a>
<hr/>
<h3 class="refsect2"><a id="sthref341"></a><a id="sthref342"></a><a id="sthref343"></a>XmlDomGetFirstPfnsPair()</h3>
<p>This function is to allow implementations an opportunity to speedup the iteration of all available prefix-URI bindings available on a given node. It returns a state structure and the prefix and URI of the first prefix-URI mapping. The state structure should be passed to <code>XmlDomGetNextPfnsPair</code> on the remaining pairs.</p>
<p class="subhead1"><a id="CAXML5418"></a>Syntax</p>
<pre>xmlpfnspair* XmlDomGetFirstPfnsPair(
   xmlctx *xctx, 
   xmlnode *node, 
   oratext **prefix,
   oratext **uri);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t191">Parameter</th>
<th class="cellalignment2921" id="r1c2-t191">In/Out</th>
<th class="cellalignment2921" id="r1c3-t191">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t191" headers="r1c1-t191">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t191 r1c2-t191">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t191 r1c3-t191">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t191" headers="r1c1-t191">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t191 r1c2-t191">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t191 r1c3-t191">XML node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t191" headers="r1c1-t191">
<pre>prefix
</pre></td>
<td class="cellalignment2922" headers="r4c1-t191 r1c2-t191">
<pre>OUT
</pre></td>
<td class="cellalignment2922" headers="r4c1-t191 r1c3-t191">prefix of first mapping; data encoding</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t191" headers="r1c1-t191">
<pre>uri
</pre></td>
<td class="cellalignment2922" headers="r5c1-t191 r1c2-t191">
<pre>OUT
</pre></td>
<td class="cellalignment2922" headers="r5c1-t191 r1c3-t191">URI of first mapping; data encoding</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5419"></a>Returns</p>
<p><code>(xmlpfnspair *)</code> iterating object or <code>NULL</code> of no prefixes</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML5420" class="refsect2"><a id="Xmldomgetlastchild"></a>
<hr/>
<h3 class="refsect2"><a id="sthref344"></a><a id="sthref345"></a><a id="sthref346"></a>XmlDomGetLastChild()</h3>
<p>Returns the last child of a node, or <code>NULL</code> if the node has no children. Only <code>Element</code>, <code>Document</code>, DTD, and <code>DocumentFragment</code> nodes may have children; all other types will return <code>NULL</code>.</p>
<p class="subhead1"><a id="CAXML5421"></a>Syntax</p>
<pre>xmlnode* XmlDomGetLastChild(
   xmlctx *xctx,
   xmlnode *node);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t192">Parameter</th>
<th class="cellalignment2921" id="r1c2-t192">In/Out</th>
<th class="cellalignment2921" id="r1c3-t192">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t192" headers="r1c1-t192">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t192 r1c2-t192">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t192 r1c3-t192">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t192" headers="r1c1-t192">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t192 r1c2-t192">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t192 r1c3-t192">XML node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5422"></a>Returns</p>
<p><code>(xmlnode *)</code> last child of node</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetfirstchild">XmlDomGetFirstChild()</a>, <a href="#Xmldomhaschildnodes">XmlDomHasChildNodes()</a>, <a href="#Xmldomgetchildnodes">XmlDomGetChildNodes()</a>, <a href="#Xmldomnumchildnodes">XmlDomNumChildNodes()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5423" class="refsect2"><a id="Xmldomgetnextpfnspair"></a>
<hr/>
<h3 class="refsect2"><a id="sthref347"></a><a id="sthref348"></a><a id="sthref349"></a>XmlDomGetNextPfnsPair()</h3>
<p>This function is to allow implementations an opportunity to speedup the iteration of all available prefix-URI bindings available on a given node. Given an iterator structure from <code>XmlDomGetFirstPfnsPair</code>, returns the next prefix-URI mapping; repeat calls to <code>XmlDomGetNextPfnsPair</code> until <code>NULL</code> is returned.</p>
<p class="subhead1"><a id="CAXML5424"></a>Syntax</p>
<pre>xmlpfnspair* XmlDomGetNextPfnsPair(
   xmlctx *xctx
   xmlpfnspair *pfns,
   oratext **prefix,
   oratext **uri);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t194">Parameter</th>
<th class="cellalignment2921" id="r1c2-t194">In/Out</th>
<th class="cellalignment2921" id="r1c3-t194">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t194" headers="r1c1-t194">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t194 r1c2-t194">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t194 r1c3-t194">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t194" headers="r1c1-t194">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t194 r1c2-t194">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t194 r1c3-t194">XML node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t194" headers="r1c1-t194">
<pre>prefix
</pre></td>
<td class="cellalignment2922" headers="r4c1-t194 r1c2-t194">
<pre>OUT
</pre></td>
<td class="cellalignment2922" headers="r4c1-t194 r1c3-t194">prefix of next mapping; data encoding</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t194" headers="r1c1-t194">
<pre>uri
</pre></td>
<td class="cellalignment2922" headers="r5c1-t194 r1c2-t194">
<pre>OUT
</pre></td>
<td class="cellalignment2922" headers="r5c1-t194 r1c3-t194">URI of next mapping; data encoding</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5425"></a>Returns</p>
<p><code>(xmlpfnspair *)</code> iterating object, <code>NULL</code> when no more pairs</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML5426" class="refsect2"><a id="Xmldomgetnextsibling"></a>
<hr/>
<h3 class="refsect2"><a id="sthref350"></a><a id="sthref351"></a><a id="sthref352"></a>XmlDomGetNextSibling()</h3>
<p>Returns the node following a node at the same level in the DOM tree. That is, for each child of a parent node, the next sibling of that child is the child which comes after it. If a node is the last child of its parent, or has no parent, <code>NULL</code> is returned.</p>
<p class="subhead1"><a id="CAXML5427"></a>Syntax</p>
<pre>xmlnode* XmlDomGetNextSibling(
   xmlctx *xctx, 
   xmlnode *node);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t195">Parameter</th>
<th class="cellalignment2921" id="r1c2-t195">In/Out</th>
<th class="cellalignment2921" id="r1c3-t195">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t195" headers="r1c1-t195">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t195 r1c2-t195">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t195 r1c3-t195">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t195" headers="r1c1-t195">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t195 r1c2-t195">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t195 r1c3-t195">XML node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5428"></a>Returns</p>
<p><code>(xmlnode *)</code> node immediately following node at same level</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetprevsibling">XmlDomGetPrevSibling()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5429" class="refsect2"><a id="Xmldomgetnodelocal"></a>
<hr/>
<h3 class="refsect2"><a id="sthref353"></a><a id="sthref354"></a><a id="sthref355"></a>XmlDomGetNodeLocal()</h3>
<p>Returns the namespace local name for a node as a <code>NULL</code>-terminated string. If the node&#39;s name is not fully qualified (has no prefix), then the local name is the same as the name.</p>
<p>A length-encoded version is available as <code>XmlDomGetNodeLocalLen</code> which returns the local name as a pointer and length, for use if the data is known to use <code>XMLType</code> backing store.</p>
<p class="subhead1"><a id="CAXML5430"></a>Syntax</p>
<pre>oratext* XmlDomGetNodeLocal(
   xmlctx *xctx,
   xmlnode *node);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t197">Parameter</th>
<th class="cellalignment2921" id="r1c2-t197">In/Out</th>
<th class="cellalignment2921" id="r1c3-t197">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t197" headers="r1c1-t197">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t197 r1c2-t197">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t197 r1c3-t197">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t197" headers="r1c1-t197">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t197 r1c2-t197">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t197 r1c3-t197">XML node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5431"></a>Returns</p>
<p><code>(oratext *)</code> local name of node [data encoding]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetnodelocallen">XmlDomGetNodeLocalLen()</a>, <a href="#Xmldomgetnodeprefix">XmlDomGetNodePrefix()</a>, <a href="#Xmldomgetnodeuri">XmlDomGetNodeURI()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5432" class="refsect2"><a id="Xmldomgetnodelocallen"></a>
<hr/>
<h3 class="refsect2"><a id="sthref356"></a><a id="sthref357"></a><a id="sthref358"></a>XmlDomGetNodeLocalLen()</h3>
<p>Returns the namespace local name for a node as a length-encoded string. If the node&#39;s name is not fully qualified (has no prefix), then the local name is the same as the name.</p>
<p>A <code>NULL</code>-terminated version is available as <code>XmlDomGetNodeLocal</code> which returns the local name as <code>NULL</code>-terminated string. If the backing store is known to be <code>XMLType</code>, then the node&#39;s data will be stored internally as length-encoded. Using the length-based Get functions will avoid having to copy and <code>NULL</code>-terminate the data.</p>
<p>If both the input buffer is non-<code>NULL</code> and the input buffer length is nonzero, then the value will be stored in the input buffer. Else, the implementation will return its own buffer.</p>
<p>If the actual length is greater than buflen, then a truncated value will be copied into the buffer and len will return the actual length.</p>
<p class="subhead1"><a id="CAXML5433"></a>Syntax</p>
<pre>oratext* XmlDomGetNodeLocalLen(
   xmlctx *xctx,
   xmlnode *node,
   oratext *buf,
   ub4 buflen, 
   ub4 *len);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t199">Parameter</th>
<th class="cellalignment2921" id="r1c2-t199">In/Out</th>
<th class="cellalignment2921" id="r1c3-t199">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t199" headers="r1c1-t199">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t199 r1c2-t199">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t199 r1c3-t199">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t199" headers="r1c1-t199">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t199 r1c2-t199">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t199 r1c3-t199">XML node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t199" headers="r1c1-t199">
<pre>buf
</pre></td>
<td class="cellalignment2922" headers="r4c1-t199 r1c2-t199">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t199 r1c3-t199">input buffer; optional</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t199" headers="r1c1-t199">
<pre>buflen
</pre></td>
<td class="cellalignment2922" headers="r5c1-t199 r1c2-t199">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t199 r1c3-t199">input buffer length; optional</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r6c1-t199" headers="r1c1-t199">
<pre>len
</pre></td>
<td class="cellalignment2922" headers="r6c1-t199 r1c2-t199">
<pre>OUT
</pre></td>
<td class="cellalignment2922" headers="r6c1-t199 r1c3-t199">length of local name, in characters</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5434"></a>Returns</p>
<p><code>(oratext *)</code> local name of node [data encoding]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetnodelocal">XmlDomGetNodeLocal()</a>, <a href="#Xmldomgetnodeprefix">XmlDomGetNodePrefix()</a>, <a href="#Xmldomgetnodeurilen">XmlDomGetNodeURILen()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5435" class="refsect2"><a id="Xmldomgetnodename"></a>
<hr/>
<h3 class="refsect2"><a id="sthref359"></a><a id="sthref360"></a><a id="sthref361"></a>XmlDomGetNodeName()</h3>
<p>Returns the (fully-qualified) name of a node (in the data encoding) as a <code>NULL</code>-terminated string, for example <code>bar\0</code> or <code>foo:bar\0</code>.</p>
<p>Note that some node types have fixed names: &#34;<code>#text</code>&#34;, &#34;<code>#cdata-section</code>&#34;, &#34;#<code>comment</code>&#34;, &#34;<code>#document</code>&#34;, &#34;<code>#document-fragment</code>&#34;.</p>
<p>A node&#39;s name cannot be changed once it is created, so there is no matching <code>SetNodeName</code> function.</p>
<p>A length-based version is available as <code>XmlDomGetNodeNameLen</code> which returns the node name as a pointer and length, for use if the data is known to use <code>XMLType</code> backing store.</p>
<p class="subhead1"><a id="CAXML5436"></a>Syntax</p>
<pre>oratext* XmlDomGetNodeName(
   xmlctx *xctx,
   xmlnode *node);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t201">Parameter</th>
<th class="cellalignment2921" id="r1c2-t201">In/Out</th>
<th class="cellalignment2921" id="r1c3-t201">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t201" headers="r1c1-t201">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t201 r1c2-t201">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t201 r1c3-t201">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t201" headers="r1c1-t201">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t201 r1c2-t201">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t201 r1c3-t201">XML node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5437"></a>Returns</p>
<p><code>(oratext *)</code> name of node [data encoding]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetnodenamelen">XmlDomGetNodeNameLen()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5438" class="refsect2"><a id="Xmldomgetnodenamelen"></a>
<hr/>
<h3 class="refsect2"><a id="sthref362"></a><a id="sthref363"></a><a id="sthref364"></a>XmlDomGetNodeNameLen()</h3>
<p>Returns the (fully-qualified) name of a node (in the data encoding) as a length-encoded string, for example <code>&#34;bar&#34;, 3</code> or <code>&#34;foo:bar&#34;, 7</code>.</p>
<p>Note that some node types have fixed names: &#34;<code>#text</code>&#34;, &#34;<code>#cdata-section</code>&#34;, &#34;<code>#comment</code>&#34;, &#34;<code>#document</code>&#34;, &#34;<code>#document-fragment</code>&#34;.</p>
<p>A node&#39;s name cannot be changed once it is created, so there is no matching SetNodeName function.</p>
<p>A <code>NULL</code>-terminated version is available as XmlDomGetNodeName which returns the node name as <code>NULL</code>-terminated string. If the backing store is known to be <code>XMLType</code>, then the node&#39;s name will be stored internally as length-encoded. Using the length-encoded <code>Get</code><code><span class="codeinlineitalic">XXX</span></code> functions will avoid having to copy and <code>NULL</code>-terminate the name.</p>
<p>If both the input buffer is non-<code>NULL</code> and the input buffer length is nonzero, then the value will be stored in the input buffer. Else, the implementation will return its own buffer.</p>
<p>If the actual length is greater than buflen, then a truncated value will be copied into the buffer and <code>len</code> will return the actual length.</p>
<p class="subhead1"><a id="CAXML5439"></a>Syntax</p>
<pre>oratext* XmlDomGetNodeNameLen(
   xmlctx *xctx,
   xmlnode *node,
   oratext *buf,
   ub4 buflen, 
   ub4 *len);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t203">Parameter</th>
<th class="cellalignment2921" id="r1c2-t203">In/Out</th>
<th class="cellalignment2921" id="r1c3-t203">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t203" headers="r1c1-t203">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t203 r1c2-t203">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t203 r1c3-t203">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t203" headers="r1c1-t203">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t203 r1c2-t203">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t203 r1c3-t203">XML node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t203" headers="r1c1-t203">
<pre>buf
</pre></td>
<td class="cellalignment2922" headers="r4c1-t203 r1c2-t203">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t203 r1c3-t203">input buffer; optional</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t203" headers="r1c1-t203">
<pre>buflen
</pre></td>
<td class="cellalignment2922" headers="r5c1-t203 r1c2-t203">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t203 r1c3-t203">input buffer length; optional</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r6c1-t203" headers="r1c1-t203">
<pre>len
</pre></td>
<td class="cellalignment2922" headers="r6c1-t203 r1c2-t203">
<pre>OUT
</pre></td>
<td class="cellalignment2922" headers="r6c1-t203 r1c3-t203">length of name, in characters</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5440"></a>Returns</p>
<p><code>(oratext *)</code> name of node, with length of name set in &#39;len&#39;</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetnodename">XmlDomGetNodeName()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5441" class="refsect2"><a id="Xmldomgetnodeprefix"></a>
<hr/>
<h3 class="refsect2"><a id="sthref365"></a><a id="sthref366"></a><a id="sthref367"></a>XmlDomGetNodePrefix()</h3>
<p>Returns the namespace prefix for a node (as a <code>NULL</code>-terminated string). If the node&#39;s name is not fully qualified (has no prefix), <code>NULL</code> is returned.</p>
<p class="subhead1"><a id="CAXML5442"></a>Syntax</p>
<pre>oratext* XmlDomGetNodePrefix(
   xmlctx *xctx,
   xmlnode *node);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t205">Parameter</th>
<th class="cellalignment2921" id="r1c2-t205">In/Out</th>
<th class="cellalignment2921" id="r1c3-t205">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t205" headers="r1c1-t205">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t205 r1c2-t205">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t205 r1c3-t205">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t205" headers="r1c1-t205">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t205 r1c2-t205">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t205 r1c3-t205">XML node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5443"></a>Returns</p>
<p><code>(oratext *)</code> namespace prefix of node [data encoding; may be <code>NULL</code>]</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML5444" class="refsect2"><a id="Xmldomgetnodetype"></a>
<hr/>
<h3 class="refsect2"><a id="sthref368"></a><a id="sthref369"></a><a id="sthref370"></a>XmlDomGetNodeType()</h3>
<p>Returns the type code of a node. The type names and numeric values match the DOM specification:</p>
<ul>
<li>
<p><code>ELEMENT_NODE=1</code></p>
</li>
<li>
<p><code>ATTRIBUTE_NODE=2</code></p>
</li>
<li>
<p><code>TEXT_NODE=3</code></p>
</li>
<li>
<p><code>CDATA_SECTION_NODE=4</code></p>
</li>
<li>
<p><code>ENTITY_REFERENCE_NODE=5</code></p>
</li>
<li>
<p><code>ENTITY_NODE=6</code></p>
</li>
<li>
<p><code>PROCESSING_INSTRUCTION_NODE=7</code></p>
</li>
<li>
<p><code>COMMENT_NODE=8</code></p>
</li>
<li>
<p><code>DOCUMENT_NODE=9</code></p>
</li>
<li>
<p><code>DOCUMENT_TYPE_NODE=10</code></p>
</li>
<li>
<p><code>DOCUMENT_FRAGMENT_NODE=11</code></p>
</li>
<li>
<p><code>NOTATION_NODE=12</code></p>
</li>
</ul>
<p>Additional Oracle extension node types are as follows:</p>
<ul>
<li>
<p><code>ELEMENT_DECL_NODE</code></p>
</li>
<li>
<p><code>ATTR_DECL_NODE</code></p>
</li>
<li>
<p><code>CP_ELEMENT_NODE</code></p>
</li>
<li>
<p><code>CP_CHOICE_NODE</code></p>
</li>
<li>
<p><code>CP_PCDATA_NODE</code></p>
</li>
<li>
<p><code>CP_STAR_NODE</code></p>
</li>
<li>
<p><code>CP_PLUS_NODE</code></p>
</li>
<li>
<p><code>CP_OPT_NODE</code></p>
</li>
</ul>
<p class="subhead1"><a id="CAXML5445"></a>Syntax</p>
<pre>xmlnodetype XmlDomGetNodeType(
   xmlctx *xctx,
   xmlnode *node);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t206">Parameter</th>
<th class="cellalignment2921" id="r1c2-t206">In/Out</th>
<th class="cellalignment2921" id="r1c3-t206">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t206" headers="r1c1-t206">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t206 r1c2-t206">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t206 r1c3-t206">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t206" headers="r1c1-t206">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t206 r1c2-t206">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t206 r1c3-t206">XML node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5446"></a>Returns</p>
<p><code>(xmlnodetype)</code> numeric type-code of the node</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML5447" class="refsect2"><a id="Xmldomgetnodeuri"></a>
<hr/>
<h3 class="refsect2"><a id="sthref371"></a><a id="sthref372"></a><a id="sthref373"></a>XmlDomGetNodeURI()</h3>
<p>Returns the namespace URI for a node (in the data encoding) as a <code>NULL</code>-terminated string. If the node&#39;s name is not qualified (does not contain a namespace prefix), it will have the default namespace in effect when the node was created (which may be <code>NULL</code>).</p>
<p>A length-encoded version is available as <code>XmlDomGetNodeURILen</code> which returns the URI as a pointer and length, for use if the data is known to use <code>XMLType</code> backing store.</p>
<p class="subhead1"><a id="CAXML5448"></a>Syntax</p>
<pre>oratext* XmlDomGetNodeURI(
   xmlctx *xctx, 
   xmlnode *node);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t207">Parameter</th>
<th class="cellalignment2921" id="r1c2-t207">In/Out</th>
<th class="cellalignment2921" id="r1c3-t207">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t207" headers="r1c1-t207">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t207 r1c2-t207">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t207 r1c3-t207">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t207" headers="r1c1-t207">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t207 r1c2-t207">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t207 r1c3-t207">XML node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5449"></a>Returns</p>
<p><code>(oratext *)</code> namespace URI of node [data encoding; may be <code>NULL</code>]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetnodeurilen">XmlDomGetNodeURILen()</a>, <a href="#Xmldomgetnodeprefix">XmlDomGetNodePrefix()</a>, <a href="#Xmldomgetnodelocal">XmlDomGetNodeLocal()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5450" class="refsect2"><a id="Xmldomgetnodeurilen"></a>
<hr/>
<h3 class="refsect2"><a id="sthref374"></a><a id="sthref375"></a><a id="sthref376"></a>XmlDomGetNodeURILen()</h3>
<p>Returns the namespace URI for a node (in the data encoding) as length-encoded string. If the node&#39;s name is not qualified (does not contain a namespace prefix), it will have the default namespace in effect when the node was created (which may be <code>NULL</code>).</p>
<p>A <code>NULL</code>-terminated version is available as <code>XmlDomGetNodeURI</code> which returns the URI value as <code>NULL</code>-terminated string. If the backing store is known to be <code>XMLType</code>, then the node&#39;s data will be stored internally as length-encoded. Using the length-based Get functions will avoid having to copy and <code>NULL</code>-terminate the data.</p>
<p>If both the input buffer is non-<code>NULL</code> and the input buffer length is nonzero, then the value will be stored in the input buffer. Else, the implementation will return its own buffer.</p>
<p>If the actual length is greater than buflen, then a truncated value will be copied into the buffer and <code>len</code> will return the actual length.</p>
<p class="subhead1"><a id="CAXML5451"></a>Syntax</p>
<pre>oratext* XmlDomGetNodeURILen(
   xmlctx *xctx,
   xmlnode *node,
   oratext *buf,
   ub4 buflen, 
   ub4 *len);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t209">Parameter</th>
<th class="cellalignment2921" id="r1c2-t209">In/Out</th>
<th class="cellalignment2921" id="r1c3-t209">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t209" headers="r1c1-t209">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t209 r1c2-t209">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t209 r1c3-t209">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t209" headers="r1c1-t209">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t209 r1c2-t209">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t209 r1c3-t209">XML node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t209" headers="r1c1-t209">
<pre>buf
</pre></td>
<td class="cellalignment2922" headers="r4c1-t209 r1c2-t209">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t209 r1c3-t209">input buffer; optional</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t209" headers="r1c1-t209">
<pre>buflen
</pre></td>
<td class="cellalignment2922" headers="r5c1-t209 r1c2-t209">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t209 r1c3-t209">input buffer length; optional</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r6c1-t209" headers="r1c1-t209">
<pre>len
</pre></td>
<td class="cellalignment2922" headers="r6c1-t209 r1c2-t209">
<pre>OUT
</pre></td>
<td class="cellalignment2922" headers="r6c1-t209 r1c3-t209">length of URI, in characters</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5452"></a>Returns</p>
<p><code>(oratext *)</code> namespace URI of node [data encoding; may be <code>NULL</code>]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetnodeuri">XmlDomGetNodeURI()</a>, <a href="#Xmldomgetnodeprefix">XmlDomGetNodePrefix()</a>, <a href="#Xmldomgetnodelocal">XmlDomGetNodeLocal()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5453" class="refsect2"><a id="Xmldomgetnodevalue"></a>
<hr/>
<h3 class="refsect2"><a id="sthref377"></a><a id="sthref378"></a><a id="sthref379"></a>XmlDomGetNodeValue()</h3>
<p>Returns the &#34;value&#34; (associated character data) for a node as a <code>NULL</code>-terminated string. Character and general entities will have been replaced. Only <code>Attr</code>, <code>CDATA</code>, <code>Comment</code>, <code>ProcessingInstruction</code> and <code>Text</code> nodes have values, all other node types have <code>NULL</code> value.</p>
<p>A length-encoded version is available as <code>XmlDomGetNodeValueLen</code> which returns the node value as a pointer and length, for use if the data is known to use <code>XMLType</code> backing store.</p>
<p class="subhead1"><a id="CAXML5454"></a>Syntax</p>
<pre>oratext* XmlDomGetNodeValue(
   xmlctx *xctx,
   xmlnode *node);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t211">Parameter</th>
<th class="cellalignment2921" id="r1c2-t211">In/Out</th>
<th class="cellalignment2921" id="r1c3-t211">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t211" headers="r1c1-t211">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t211 r1c2-t211">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t211 r1c3-t211">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t211" headers="r1c1-t211">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t211 r1c2-t211">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t211 r1c3-t211">XML node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5455"></a>Returns</p>
<p><code>(oratext *)</code> value of node</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomsetnodevalue">XmlDomSetNodeValue()</a>, <a href="#Xmldomgetnodevaluelen">XmlDomGetNodeValueLen()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5456" class="refsect2"><a id="Xmldomgetnodevaluelen"></a>
<hr/>
<h3 class="refsect2"><a id="sthref380"></a><a id="sthref381"></a><a id="sthref382"></a>XmlDomGetNodeValueLen()</h3>
<p>Returns the &#34;value&#34; (associated character data) for a node as a length-encoded string. Character and general entities will have been replaced. Only <code>Attr</code>, <code>CDATA</code>, <code>Comment</code>, PI and <code>Text</code> nodes have values, all other node types have <code>NULL</code> value.</p>
<p>A <code>NULL</code>-terminated version is available as <code>XmlDomGetNodeValue</code> which returns the node value as <code>NULL</code>-terminated string. If the backing store is known to be <code>XMLType</code>, then the node&#39;s data will be stored internally as length-encoded. Using the length-based Get functions will avoid having to copy and <code>NULL</code>-terminate the data.</p>
<p>If both the input buffer is non-<code>NULL</code> and the input buffer length is nonzero, then the value will be stored in the input buffer. Else, the implementation will return its own buffer.</p>
<p>If the actual length is greater than <code>buflen</code>, then a truncated value will be copied into the buffer and len will return the actual length.</p>
<p class="subhead1"><a id="CAXML5457"></a>Syntax</p>
<pre>oratext* XmlDomGetNodeValueLen(
   xmlctx *xctx, 
   xmlnode *node, 
   oratext *buf, 
   ub4 buflen, 
   ub4 *len);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t213">Parameter</th>
<th class="cellalignment2921" id="r1c2-t213">In/Out</th>
<th class="cellalignment2921" id="r1c3-t213">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t213" headers="r1c1-t213">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t213 r1c2-t213">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t213 r1c3-t213">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t213" headers="r1c1-t213">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t213 r1c2-t213">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t213 r1c3-t213">XML node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t213" headers="r1c1-t213">
<pre>buf
</pre></td>
<td class="cellalignment2922" headers="r4c1-t213 r1c2-t213">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t213 r1c3-t213">input buffer; optional</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t213" headers="r1c1-t213">
<pre>buflen
</pre></td>
<td class="cellalignment2922" headers="r5c1-t213 r1c2-t213">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t213 r1c3-t213">input buffer length; optional</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r6c1-t213" headers="r1c1-t213">
<pre>len
</pre></td>
<td class="cellalignment2922" headers="r6c1-t213 r1c2-t213">
<pre>OUT
</pre></td>
<td class="cellalignment2922" headers="r6c1-t213 r1c3-t213">length of value, in bytes</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5458"></a>Returns</p>
<p><code>(oratext *)</code> value of node</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomsetnodevaluelen">XmlDomSetNodeValueLen()</a>, <a href="#Xmldomgetnodevalue">XmlDomGetNodeValue()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5459" class="refsect2"><a id="Xmldomgetnodevaluestream"></a>
<hr/>
<h3 class="refsect2"><a id="sthref383"></a><a id="sthref384"></a><a id="sthref385"></a>XmlDomGetNodeValueStream()</h3>
<p>Returns the large data for a node and sends it in pieces to the user&#39;s output stream. For very large values, it is not always possible to store them [efficiently] as a single contiguous chunk. This function is used to access chunked data of that type. Only <code>XMLType</code> chunks its data (sometimes); XDK&#39;s data is always contiguous.</p>
<p class="subhead1"><a id="CAXML5460"></a>Syntax</p>
<pre>xmlerr XmlDomGetNodeValueStream(
   xmlctx *xctx, 
   xmlnode *node, 
   xmlostream *ostream);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t215">Parameter</th>
<th class="cellalignment2921" id="r1c2-t215">In/Out</th>
<th class="cellalignment2921" id="r1c3-t215">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t215" headers="r1c1-t215">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t215 r1c2-t215">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t215 r1c3-t215">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t215" headers="r1c1-t215">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t215 r1c2-t215">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t215 r1c3-t215">XML node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t215" headers="r1c1-t215">
<pre>ostream
</pre></td>
<td class="cellalignment2922" headers="r4c1-t215 r1c2-t215">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t215 r1c3-t215">output stream object</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5461"></a>Returns</p>
<p><code>(xmlerr)</code> numeric error code, <code>0</code> on success</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomsetnodevaluestream">XmlDomSetNodeValueStream()</a>, <a href="#Xmldomgetnodevalue">XmlDomGetNodeValue()</a>, <a href="#Xmldomgetnodevaluelen">XmlDomGetNodeValueLen()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5462" class="refsect2"><a id="Xmldomgetownerdocument"></a>
<hr/>
<h3 class="refsect2"><a id="sthref386"></a><a id="sthref387"></a><a id="sthref388"></a>XmlDomGetOwnerDocument()</h3>
<p>Returns the <code>Document</code> node associated with a node. Each node may belong to only one document, or may not be associated with any document at all (such as immediately after <code>XmlDomCreateElem</code>, and so on). The &#34;owning&#34; document [node] is returned, or <code>NULL</code> for an orphan node.</p>
<p class="subhead1"><a id="CAXML5463"></a>Syntax</p>
<pre>xmldocnode* XmlDomGetOwnerDocument(
   xmlctx *xctx,
   xmlnode *node);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t217">Parameter</th>
<th class="cellalignment2921" id="r1c2-t217">In/Out</th>
<th class="cellalignment2921" id="r1c3-t217">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t217" headers="r1c1-t217">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t217 r1c2-t217">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t217 r1c3-t217">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t217" headers="r1c1-t217">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t217 r1c2-t217">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t217 r1c3-t217">XML node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5464"></a>Returns</p>
<p><code>(xmldocnode *)</code> document node is in</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML5465" class="refsect2"><a id="Xmldomgetparentnode"></a>
<hr/>
<h3 class="refsect2"><a id="sthref389"></a><a id="sthref390"></a><a id="sthref391"></a>XmlDomGetParentNode()</h3>
<p>Returns a node&#39;s parent node. All nodes types except <code>Attr</code>, <code>Document</code>, <code>DocumentFragment</code>, <code>Entity</code>, and <code>Notation</code> may have a parent (these five exceptions always have a <code>NULL</code> parent). If a node has just been created but not yet added to the DOM tree, or if it has been removed from the DOM tree, its parent is also <code>NULL</code>.</p>
<p class="subhead1"><a id="CAXML5466"></a>Syntax</p>
<pre>xmlnode* XmlDomGetParentNode(
   xmlctx *xctx,
   xmlnode *node);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t218">Parameter</th>
<th class="cellalignment2921" id="r1c2-t218">In/Out</th>
<th class="cellalignment2921" id="r1c3-t218">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t218" headers="r1c1-t218">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t218 r1c2-t218">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t218 r1c3-t218">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t218" headers="r1c1-t218">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t218 r1c2-t218">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t218 r1c3-t218">XML node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5467"></a>Returns</p>
<p><code>(xmlnode *)</code> parent of node</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML5468" class="refsect2"><a id="Xmldomgetprevsibling"></a>
<hr/>
<h3 class="refsect2"><a id="sthref392"></a><a id="sthref393"></a><a id="sthref394"></a>XmlDomGetPrevSibling()</h3>
<p>Returns the node preceding a node at the same level in the DOM tree. That is, for each child of a parent node, the previous sibling of that child is the child which came before it. If a node is the first child of its parent, or has no parent, <code>NULL</code> is returned.</p>
<p class="subhead1"><a id="CAXML5469"></a>Syntax</p>
<pre>xmlnode* XmlDomGetPrevSibling(
   xmlctx *xctx,
   xmlnode *node);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t219">Parameter</th>
<th class="cellalignment2921" id="r1c2-t219">In/Out</th>
<th class="cellalignment2921" id="r1c3-t219">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t219" headers="r1c1-t219">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t219 r1c2-t219">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t219 r1c3-t219">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t219" headers="r1c1-t219">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t219 r1c2-t219">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t219 r1c3-t219">XML node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5470"></a>Returns</p>
<p><code>(xmlnode *)</code> node immediately preceding node at same level</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetnextsibling">XmlDomGetNextSibling()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5471" class="refsect2"><a id="CDEEBBJJ"></a>
<hr/>
<h3 class="refsect2"><a id="sthref395"></a><a id="sthref396"></a><a id="sthref397"></a>XmlDomGetPullNodeAsBinaryStream()</h3>
<p>Returns the address of a binary stream using the pull paradigm.</p>
<p class="subhead1"><a id="CAXML5472"></a>Syntax</p>
<pre>orastream *XmlDomGetPullNodeAsBinaryStream(
   xmlctx *xctx,
   xmlnode *node);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t221">Parameter</th>
<th class="cellalignment2921" id="r1c2-t221">In/Out</th>
<th class="cellalignment2921" id="r1c3-t221">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t221" headers="r1c1-t221">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t221 r1c2-t221">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t221 r1c3-t221">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t221" headers="r1c1-t221">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t221 r1c2-t221">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t221 r1c3-t221">XML node; may be <code>RAW</code> or <code>BLOB</code>, otherwise the function returns <code>NULL</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5473"></a>Returns</p>
<p><code>(orastream *)</code> the readable binary stream; use <code>OraStreamRead()</code> on the output, not <code>OraStreamReadChar()</code></p>
</div>
<!-- class="refsect2" -->
<div id="CAXML5474" class="refsect2"><a id="CDEJJIIG"></a>
<hr/>
<h3 class="refsect2"><a id="sthref398"></a><a id="sthref399"></a><a id="sthref400"></a>XmlDomGetPullNodeAsCharacterStream()</h3>
<p>Returns the address of a character stream using the pull paradigm.</p>
<p class="subhead1"><a id="CAXML5475"></a>Syntax</p>
<pre>orastream *XmlDomGetPullNodeAsCharacterStream(
   xmlctx *xctx,
   xmlnode *node);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t222">Parameter</th>
<th class="cellalignment2921" id="r1c2-t222">In/Out</th>
<th class="cellalignment2921" id="r1c3-t222">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t222" headers="r1c1-t222">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t222 r1c2-t222">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t222 r1c3-t222">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t222" headers="r1c1-t222">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t222 r1c2-t222">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t222 r1c3-t222">XML node; may be any type supported by XML DB</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5476"></a>Returns</p>
<p><code>(orastream *)</code> the readable character stream; use <code>OraStreamReadChar()</code> on the output, not <code>OraStreamRead()</code>.</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML5477" class="refsect2"><a id="CDEIHDHF"></a>
<hr/>
<h3 class="refsect2"><a id="sthref401"></a><a id="sthref402"></a><a id="sthref403"></a>XmlDomGetPushNodeAsBinaryStream()</h3>
<p>Returns the address of a binary stream, as an <code>OUT ostream</code> parameter, using the push paradigm.</p>
<p class="subhead1"><a id="CAXML5478"></a>Syntax</p>
<pre>xmlerr XmlDomGetPushNodeAsBinaryStream(
   xmlctx *xctx,
   xmlnode *node,
   orastream *ostream);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t223">Parameter</th>
<th class="cellalignment2921" id="r1c2-t223">In/Out</th>
<th class="cellalignment2921" id="r1c3-t223">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t223" headers="r1c1-t223">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t223 r1c2-t223">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t223 r1c3-t223">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t223" headers="r1c1-t223">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t223 r1c2-t223">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t223 r1c3-t223">XML node; may be <code>RAW</code> or <code>BLOB</code>, otherwise returns an error</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t223" headers="r1c1-t223">
<pre>ostream
</pre></td>
<td class="cellalignment2922" headers="r4c1-t223 r1c2-t223">
<pre>OUT
</pre></td>
<td class="cellalignment2922" headers="r4c1-t223 r1c3-t223">application implementation of <code>orastream</code>; use <code>OraStreamWrite()</code> to write the value, not <code>OraStreamWriteChar()</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5479"></a>Returns</p>
<p><code>(xmlerr *)</code> error code, <code>XMLERR_OK []</code> on success</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML5480" class="refsect2"><a id="CDEIJDHG"></a>
<hr/>
<h3 class="refsect2"><a id="sthref404"></a><a id="sthref405"></a><a id="sthref406"></a>XmlDomGetPushNodeAsCharacterStream()</h3>
<p>Returns the address of a character stream, as an <code>OUT ostream</code> parameter, using the push paradigm.</p>
<p class="subhead1"><a id="CAXML5481"></a>Syntax</p>
<pre>xmlerr XmlDomGetPushNodeAsCharacterStream(
   xmlctx *xctx,
   xmlnode *node,
   orastream *ostream);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t224">Parameter</th>
<th class="cellalignment2921" id="r1c2-t224">In/Out</th>
<th class="cellalignment2921" id="r1c3-t224">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t224" headers="r1c1-t224">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t224 r1c2-t224">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t224 r1c3-t224">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t224" headers="r1c1-t224">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t224 r1c2-t224">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t224 r1c3-t224">XML node; any type supported by XML DB</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t224" headers="r1c1-t224">
<pre>ostream
</pre></td>
<td class="cellalignment2922" headers="r4c1-t224 r1c2-t224">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t224 r1c3-t224">application implementation of <code>orastream</code>; use <code>OraStreamWriteChar()</code> to write the value, not <code>OraStreamWrite()</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5482"></a>Returns</p>
<p><code>(xmlerr *)</code> error code, <code>XMLERR_OK []</code> on success</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML5483" class="refsect2"><a id="Xmldomgetsourceentity"></a>
<hr/>
<h3 class="refsect2"><a id="sthref407"></a><a id="sthref408"></a><a id="sthref409"></a>XmlDomGetSourceEntity()</h3>
<p>Returns the external entity node whose inclusion caused the creation of the given node.</p>
<p class="subhead1"><a id="CAXML5484"></a>Syntax</p>
<pre>xmlentnode* XmlDomGetSourceEntity(
   xmlctx *xctx,
   xmlnode *node);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t225">Parameter</th>
<th class="cellalignment2921" id="r1c2-t225">In/Out</th>
<th class="cellalignment2921" id="r1c3-t225">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t225" headers="r1c1-t225">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t225 r1c2-t225">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t225 r1c3-t225">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t225" headers="r1c1-t225">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t225 r1c2-t225">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t225 r1c3-t225">XML node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5485"></a>Returns</p>
<p><code>(xmlentnode *)</code> entity node if the input is from an external entity</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML5486" class="refsect2"><a id="Xmldomgetsourceline"></a>
<hr/>
<h3 class="refsect2"><a id="sthref410"></a><a id="sthref411"></a><a id="sthref412"></a>XmlDomGetSourceLine()</h3>
<p>Returns the line# in the original source where the node started. The first line in every input is line #1.</p>
<p class="subhead1"><a id="CAXML5487"></a>Syntax</p>
<pre>ub4 XmlDomGetSourceLine(
   xmlctx *xctx,
   xmlnode *node);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t226">Parameter</th>
<th class="cellalignment2921" id="r1c2-t226">In/Out</th>
<th class="cellalignment2921" id="r1c3-t226">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t226" headers="r1c1-t226">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t226 r1c2-t226">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t226 r1c3-t226">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t226" headers="r1c1-t226">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t226 r1c2-t226">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t226 r1c3-t226">XML node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5488"></a>Returns</p>
<p><code>(ub4)</code> line number of node in original input source</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML5489" class="refsect2"><a id="Xmldomgetsourcelocation"></a>
<hr/>
<h3 class="refsect2"><a id="sthref413"></a><a id="sthref414"></a><a id="sthref415"></a>XmlDomGetSourceLocation()</h3>
<p>Return source location (path, URI, and so on) of node. Note this will be in the compiler encoding, not the data encoding!</p>
<p class="subhead1"><a id="CAXML5490"></a>Syntax</p>
<pre>oratext* XmlDomGetSourceLocation(
   xmlctx *xctx,
   xmlnode *node);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t227">Parameter</th>
<th class="cellalignment2921" id="r1c2-t227">In/Out</th>
<th class="cellalignment2921" id="r1c3-t227">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t227" headers="r1c1-t227">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t227 r1c2-t227">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t227 r1c3-t227">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t227" headers="r1c1-t227">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t227 r1c2-t227">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t227 r1c3-t227">XML node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5491"></a>Returns</p>
<p><code>(oratext *)</code> full path of input source [in compiler encoding]</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML5492" class="refsect2"><a id="Xmldomhasattrs"></a>
<hr/>
<h3 class="refsect2"><a id="sthref416"></a><a id="sthref417"></a><a id="sthref418"></a>XmlDomHasAttrs()</h3>
<p>Test if an element has attributes. Returns <code>TRUE</code> if any attributes of any sort are defined (namespace or regular).</p>
<p class="subhead1"><a id="CAXML5493"></a>Syntax</p>
<pre>boolean XmlDomHasAttrs(
   xmlctx *xctx,
   xmlelemnode *elem);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t228">Parameter</th>
<th class="cellalignment2921" id="r1c2-t228">In/Out</th>
<th class="cellalignment2921" id="r1c3-t228">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t228" headers="r1c1-t228">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t228 r1c2-t228">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t228 r1c3-t228">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t228" headers="r1c1-t228">
<pre>elem
</pre></td>
<td class="cellalignment2922" headers="r3c1-t228 r1c2-t228">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t228 r1c3-t228">XML element node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5494"></a>Returns</p>
<p><code>(boolean)</code> <code>TRUE</code> if element has attributes</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML5495" class="refsect2"><a id="Xmldomhaschildnodes"></a>
<hr/>
<h3 class="refsect2"><a id="sthref419"></a><a id="sthref420"></a><a id="sthref421"></a>XmlDomHasChildNodes()</h3>
<p>Test if a node has children. Only <code>Element</code>, <code>Document</code>, DTD, and <code>DocumentFragment</code> nodes may have children. Note that just because <code>XmlDomGetChildNodes</code> returns a list does not mean the node actually has children, since the list may be empty, so a non-<code>NULL</code> return from <code>XmlDomGetChildNodes</code> should not be used as a test.</p>
<p class="subhead1"><a id="CAXML5496"></a>Syntax</p>
<pre>boolean XmlDomHasChildNodes(
   xmlctx *xctx,
   xmlnode *node);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t229">Parameter</th>
<th class="cellalignment2921" id="r1c2-t229">In/Out</th>
<th class="cellalignment2921" id="r1c3-t229">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t229" headers="r1c1-t229">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t229 r1c2-t229">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t229 r1c3-t229">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t229" headers="r1c1-t229">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t229 r1c2-t229">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t229 r1c3-t229">XML node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5497"></a>Returns</p>
<p><code>(boolean)</code> <code>TRUE</code> if the node has any children</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML5498" class="refsect2"><a id="Xmldominsertbefore"></a>
<hr/>
<h3 class="refsect2"><a id="sthref422"></a><a id="sthref423"></a><a id="sthref424"></a>XmlDomInsertBefore()</h3>
<p>Inserts the node <code>newChild</code> before the existing child node <code>refChild</code> in the parent node. If <code>refChild</code> is <code>NULL</code>, appends to parent&#39;s children as for each <code>XmlDomAppendChild</code>; otherwise it must be a child of the given parent. If <code>newChild</code> is a <code>DocumentFragment</code>, all of its children are inserted (in the same order) before <code>refChild</code>; the <code>DocumentFragment</code> node itself is not. If <code>newChild</code> is already in the DOM tree, it is first removed from its current position.</p>
<p class="subhead1"><a id="CAXML5499"></a>Syntax</p>
<pre>xmlnode* XmlDomInsertBefore(
   xmlctx *xctx,
   xmlnode *parent, 
   xmlnode *newChild,
   xmlnode *refChild);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t230">Parameter</th>
<th class="cellalignment2921" id="r1c2-t230">In/Out</th>
<th class="cellalignment2921" id="r1c3-t230">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t230" headers="r1c1-t230">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t230 r1c2-t230">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t230 r1c3-t230">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t230" headers="r1c1-t230">
<pre>parent
</pre></td>
<td class="cellalignment2922" headers="r3c1-t230 r1c2-t230">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t230 r1c3-t230">parent that receives a new child</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t230" headers="r1c1-t230">
<pre>newChild
</pre></td>
<td class="cellalignment2922" headers="r4c1-t230 r1c2-t230">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t230 r1c3-t230">node to insert</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t230" headers="r1c1-t230">
<pre>refChild
</pre></td>
<td class="cellalignment2922" headers="r5c1-t230 r1c2-t230">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t230 r1c3-t230">reference node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5500"></a>Returns</p>
<p><code>(xmlnode *)</code> node being inserted</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomappendchild">XmlDomAppendChild()</a>, <a href="#Xmldomreplacechild">XmlDomReplaceChild()</a>, <a href="#Xmldomremovechild">XmlDomRemoveChild()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5501" class="refsect2"><a id="Xmldomnormalize"></a>
<hr/>
<h3 class="refsect2"><a id="sthref425"></a><a id="sthref426"></a><a id="sthref427"></a>XmlDomNormalize()</h3>
<p>Normalizes the subtree rooted at an element, merges adjacent <code>Text</code> nodes children of elements. Note that adjacent <code>Text</code> nodes will never be created during a normal parse, only after manipulation of the document with DOM calls.</p>
<p class="subhead1"><a id="CAXML5502"></a>Syntax</p>
<pre>void XmlDomNormalize(
   xmlctx *xctx,
   xmlnode *node);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t232">Parameter</th>
<th class="cellalignment2921" id="r1c2-t232">In/Out</th>
<th class="cellalignment2921" id="r1c3-t232">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t232" headers="r1c1-t232">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t232 r1c2-t232">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t232 r1c3-t232">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t232" headers="r1c1-t232">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t232 r1c2-t232">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t232 r1c3-t232">XML node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="CAXML5503" class="refsect2"><a id="Xmldomnumattrs"></a>
<hr/>
<h3 class="refsect2"><a id="sthref428"></a><a id="sthref429"></a><a id="sthref430"></a>XmlDomNumAttrs()</h3>
<p>Returns the number of attributes of an element. Note that just because a list is returned by <code>XmlDomGetAttrs</code> does not mean it contains any attributes; it may be an empty list with zero length.</p>
<p class="subhead1"><a id="CAXML5504"></a>Syntax</p>
<pre>ub4 XmlDomNumAttrs(
   xmlctx *xctx,
   xmlelemnode *elem);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t233">Parameter</th>
<th class="cellalignment2921" id="r1c2-t233">In/Out</th>
<th class="cellalignment2921" id="r1c3-t233">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t233" headers="r1c1-t233">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t233 r1c2-t233">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t233 r1c3-t233">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t233" headers="r1c1-t233">
<pre>elem
</pre></td>
<td class="cellalignment2922" headers="r3c1-t233 r1c2-t233">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t233 r1c3-t233">XML element node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5505"></a>Returns</p>
<p><code>(ub4)</code> number of attributes of node</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML5506" class="refsect2"><a id="Xmldomnumchildnodes"></a>
<hr/>
<h3 class="refsect2"><a id="sthref431"></a><a id="sthref432"></a><a id="sthref433"></a>XmlDomNumChildNodes()</h3>
<p>Returns the number of children of a node. Only <code>Element</code>, <code>Document</code>, DTD, and <code>DocumentFragment</code> nodes may have children, all other types return 0. Note that just because <code>XmlDomGetChildNodes</code> returns a list does not mean that it contains any children; it may be an empty list with zero length.</p>
<p class="subhead1"><a id="CAXML5507"></a>Syntax</p>
<pre>ub4 XmlDomNumChildNodes(
   xmlctx *xctx,
   xmlnode *node);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t234">Parameter</th>
<th class="cellalignment2921" id="r1c2-t234">In/Out</th>
<th class="cellalignment2921" id="r1c3-t234">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t234" headers="r1c1-t234">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t234 r1c2-t234">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t234 r1c3-t234">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t234" headers="r1c1-t234">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t234 r1c2-t234">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t234 r1c3-t234">XML node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5508"></a>Returns</p>
<p><code>(ub4)</code> number of children of node</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML5509" class="refsect2"><a id="Xmldomprefixtouri"></a>
<hr/>
<h3 class="refsect2"><a id="sthref434"></a><a id="sthref435"></a><a id="sthref436"></a>XmlDomPrefixToURI()</h3>
<p>Given a namespace prefix and a node, returns the namespace URI mapped to that prefix. If the given node doesn&#39;t have a matching prefix, its parent is tried, then its parent, and so on, all the way to the root node. If the prefix is undefined, <code>NULL</code> is returned.</p>
<p class="subhead1"><a id="CAXML5510"></a>Syntax</p>
<pre>oratext* XmlDomPrefixToURI(
   xmlctx *xctx,
   xmlnode *node,
   oratext *prefix);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t235">Parameter</th>
<th class="cellalignment2921" id="r1c2-t235">In/Out</th>
<th class="cellalignment2921" id="r1c3-t235">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t235" headers="r1c1-t235">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t235 r1c2-t235">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t235 r1c3-t235">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t235" headers="r1c1-t235">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t235 r1c2-t235">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t235 r1c3-t235">XML node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t235" headers="r1c1-t235">
<pre>prefix
</pre></td>
<td class="cellalignment2922" headers="r4c1-t235 r1c2-t235">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t235 r1c3-t235">prefix to map</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5511"></a>Returns</p>
<p><code>(oratext *)</code> URI for prefix [data encoding; <code>NULL</code> if no match]</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML5512" class="refsect2"><a id="Xmldomremovechild"></a>
<hr/>
<h3 class="refsect2"><a id="sthref437"></a><a id="sthref438"></a><a id="sthref439"></a>XmlDomRemoveChild()</h3>
<p>Removes a node from its parent&#39;s list of children and returns it. The node is orphaned; its parent will be <code>NULL</code> after removal.</p>
<p class="subhead1"><a id="CAXML5513"></a>Syntax</p>
<pre>xmlnode* XmlDomRemoveChild(
   xmlctx *xctx, 
   xmlnode *oldChild);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t236">Parameter</th>
<th class="cellalignment2921" id="r1c2-t236">In/Out</th>
<th class="cellalignment2921" id="r1c3-t236">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t236" headers="r1c1-t236">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t236 r1c2-t236">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t236 r1c3-t236">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t236" headers="r1c1-t236">
<pre>oldChild
</pre></td>
<td class="cellalignment2922" headers="r3c1-t236 r1c2-t236">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t236 r1c3-t236">node to remove</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5514"></a>Returns</p>
<p><code>(xmlnode *)</code> node removed</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomappendchild">XmlDomAppendChild()</a>, <a href="#Xmldominsertbefore">XmlDomInsertBefore()</a>, <a href="#Xmldomreplacechild">XmlDomReplaceChild()</a></div>
</div>
<!-- class="refsect2" -->
<div class="refsect2"><a id="CHDHFFCC"></a>
<hr/>
<h3 class="refsect2">XmlDomRenameNode()<a id="sthref440"></a><a id="sthref441"></a><a id="sthref442"></a></h3>
<p>Updates the name of a node, for element and attribute nodes only.</p>
<p>If the prefix does not have a current mapping, the user should add the mapping by creating an <code>xmlns</code> attribute and associating it with this element node by calling <a href="#Xmldomsetattrnodens">XmlDomSetAttrNodeNS()</a>. A namespace attribute node cannot be modified.</p>
<p class="subhead1"><a id="sthref443"></a>Syntax</p>
<pre>xmlnode* XmlDomRenameNode(
   xmlctx *xctx, 
   xmlnode *node, 
   oratext *tagname);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t238">Parameter</th>
<th class="cellalignment2921" id="r1c2-t238">In/Out</th>
<th class="cellalignment2921" id="r1c3-t238">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t238" headers="r1c1-t238">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t238 r1c2-t238">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t238 r1c3-t238">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t238" headers="r1c1-t238">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t238 r1c2-t238">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t238 r1c3-t238">XML node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t238" headers="r1c1-t238">
<pre>tagname
</pre></td>
<td class="cellalignment2922" headers="r4c1-t238 r1c2-t238">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t238 r1c3-t238">The new tagname</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="sthref444"></a>Returns</p>
<p><code>(xmlnode *)</code> the changed node</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomsetattrnodens">XmlDomSetAttrNodeNS()</a></div>
</div>
<!-- class="refsect2" -->
<div class="refsect2"><a id="CHDDIDBG"></a>
<hr/>
<h3 class="refsect2">XmlDomRenameNodeNS()<a id="sthref445"></a><a id="sthref446"></a><a id="sthref447"></a></h3>
<p>Updates the name and URI of a node, for element and attribute nodes only.</p>
<p>If the prefix does not have a current mapping, the user should add the mapping by creating an <code>xmlns</code> attribute and associating it with this element node by calling <a href="#Xmldomsetattrnodens">XmlDomSetAttrNodeNS()</a>. A namespace attribute node cannot be modified.</p>
<p class="subhead1"><a id="sthref448"></a>Syntax</p>
<pre>xmlnode* XmlDomRenameNodeNS(
   xmlctx *xctx, 
   xmlnode *node, 
   oratext *uri,
   oratext *tagname);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t240">Parameter</th>
<th class="cellalignment2921" id="r1c2-t240">In/Out</th>
<th class="cellalignment2921" id="r1c3-t240">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t240" headers="r1c1-t240">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t240 r1c2-t240">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t240 r1c3-t240">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t240" headers="r1c1-t240">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t240 r1c2-t240">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t240 r1c3-t240">XML node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t240" headers="r1c1-t240">
<pre>uri
</pre></td>
<td class="cellalignment2922" headers="r4c1-t240 r1c2-t240">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t240 r1c3-t240">The new URI; if <code>NULL</code>, retains existing URI</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t240" headers="r1c1-t240">
<pre>tagname
</pre></td>
<td class="cellalignment2922" headers="r5c1-t240 r1c2-t240">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t240 r1c3-t240">The new tagname</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="sthref449"></a>Returns</p>
<p><code>(xmlnode *)</code> the changed node.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomsetattrnodens">XmlDomSetAttrNodeNS()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5515" class="refsect2"><a id="Xmldomreplacechild"></a>
<hr/>
<h3 class="refsect2"><a id="sthref450"></a><a id="sthref451"></a><a id="sthref452"></a>XmlDomReplaceChild()</h3>
<p>Replaces the child node <code>oldChild</code> with the new node <code>newChild</code> in <code>oldChild</code>&#39;s parent, and returns <code>oldChild</code> (which is now orphaned, with a <code>NULL</code> parent). If <code>newChild</code> is a <code>DocumentFragment</code>, all of its children are inserted in place of <code>oldChild</code>; the <code>DocumentFragment</code> node itself is not. If <code>newChild</code> is already in the DOM tree, it is first removed from its current position.</p>
<p class="subhead1"><a id="CAXML5516"></a>Syntax</p>
<pre>xmlnode* XmlDomReplaceChild(
   xmlctx *xctx, 
   xmlnode *newChild,
   xmlnode *oldChild);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t242">Parameter</th>
<th class="cellalignment2921" id="r1c2-t242">In/Out</th>
<th class="cellalignment2921" id="r1c3-t242">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t242" headers="r1c1-t242">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t242 r1c2-t242">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t242 r1c3-t242">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t242" headers="r1c1-t242">
<pre>newChild
</pre></td>
<td class="cellalignment2922" headers="r3c1-t242 r1c2-t242">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t242 r1c3-t242">new node that is substituted</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t242" headers="r1c1-t242">
<pre>oldChild
</pre></td>
<td class="cellalignment2922" headers="r4c1-t242 r1c2-t242">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t242 r1c3-t242">old node that is replaced</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5517"></a>Returns</p>
<p><code>(xmlnode *)</code> node replaced</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomappendchild">XmlDomAppendChild()</a>, <a href="#Xmldominsertbefore">XmlDomInsertBefore()</a>, <a href="#Xmldomremovechild">XmlDomRemoveChild()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5518" class="refsect2"><a id="Xmldomsetdefaultns"></a>
<hr/>
<h3 class="refsect2"><a id="sthref453"></a><a id="sthref454"></a><a id="sthref455"></a>XmlDomSetDefaultNS()</h3>
<p>Set the default namespace for a node</p>
<p class="subhead1"><a id="CAXML5519"></a>Syntax</p>
<pre>void XmlDomSetDefaultNS(
   xmlctx *xctx,
   xmlnode *node,
   oratext *defns);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t244">Parameter</th>
<th class="cellalignment2921" id="r1c2-t244">In/Out</th>
<th class="cellalignment2921" id="r1c3-t244">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t244" headers="r1c1-t244">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t244 r1c2-t244">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t244 r1c3-t244">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t244" headers="r1c1-t244">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t244 r1c2-t244">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t244 r1c3-t244">element or attribute DOM node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t244" headers="r1c1-t244">
<pre>defns
</pre></td>
<td class="cellalignment2922" headers="r4c1-t244 r1c2-t244">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t244 r1c3-t244">new default namespace for the node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="CAXML5520" class="refsect2"><a id="Xmldomsetnodeprefix"></a>
<hr/>
<h3 class="refsect2"><a id="sthref456"></a><a id="sthref457"></a><a id="sthref458"></a>XmlDomSetNodePrefix()</h3>
<p>Sets the namespace prefix of node (as <code>NULL</code>-terminated string). Does not verify the prefix is defined. Just causes a new qualified name to be formed from the new prefix and the old local name; the new qualified name will be under DOM control and should not be managed by the user.</p>
<p class="subhead1"><a id="CAXML5521"></a>Syntax</p>
<pre>void XmlDomSetNodePrefix(
   xmlctx *xctx,
   xmlnode *node,
   oratext *prefix);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t245">Parameter</th>
<th class="cellalignment2921" id="r1c2-t245">In/Out</th>
<th class="cellalignment2921" id="r1c3-t245">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t245" headers="r1c1-t245">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t245 r1c2-t245">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t245 r1c3-t245">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t245" headers="r1c1-t245">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t245 r1c2-t245">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t245 r1c3-t245">XML node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t245" headers="r1c1-t245">
<pre>prefix
</pre></td>
<td class="cellalignment2922" headers="r4c1-t245 r1c2-t245">
<pre>OUT
</pre></td>
<td class="cellalignment2922" headers="r4c1-t245 r1c3-t245">new namespace prefix</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="CAXML5522" class="refsect2"><a id="Xmldomsetnodevalue"></a>
<hr/>
<h3 class="refsect2"><a id="sthref459"></a><a id="sthref460"></a><a id="sthref461"></a>XmlDomSetNodeValue()</h3>
<p>Sets a node&#39;s value (character data) as a <code>NULL</code>-terminated string. Does not allow setting the value to <code>NULL</code>. Only <code>Attr</code>, <code>CDATA</code>, <code>Comment</code>, PI and <code>Text</code> nodes have values; trying to set the value of another type of node is a no-op. The new value must be in the data encoding. It is not verified, converted, or checked.</p>
<p>The value is not copied, its pointer is just stored. The user is responsible for persistence and freeing of that data.</p>
<p class="subhead1"><a id="CAXML5523"></a>Syntax</p>
<pre>xmlerr XmlDomSetNodeValue(
   xmlctx *xctx,
   xmlnode *node,
   oratext *value);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t246">Parameter</th>
<th class="cellalignment2921" id="r1c2-t246">In/Out</th>
<th class="cellalignment2921" id="r1c3-t246">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t246" headers="r1c1-t246">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t246 r1c2-t246">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t246 r1c3-t246">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t246" headers="r1c1-t246">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t246 r1c2-t246">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t246 r1c3-t246">XML node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t246" headers="r1c1-t246">
<pre>value
</pre></td>
<td class="cellalignment2922" headers="r4c1-t246 r1c2-t246">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t246 r1c3-t246">node&#39;s new value; data encoding; user control</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5524"></a>Returns</p>
<p><code>(xmlerr)</code> numeric error code, <code>0</code> on success</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetnodevalue">XmlDomGetNodeValue()</a>, <a href="#Xmldomsetnodevaluelen">XmlDomSetNodeValueLen()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5525" class="refsect2"><a id="Xmldomsetnodevaluelen"></a>
<hr/>
<h3 class="refsect2"><a id="sthref462"></a><a id="sthref463"></a><a id="sthref464"></a>XmlDomSetNodeValueLen()</h3>
<p>Sets the value (associated character data) for a node as a length-encoded string.</p>
<p>A <code>NULL</code>-terminated version is available as <code>XmlDomSetNodeValue</code> which takes the node value as a <code>NULL</code>-terminated string. If the backing store is known to be <code>XMLType</code>, then the node&#39;s data will be stored internally as length-encoded. Using the length-based Set functions will avoid having to copy and <code>NULL</code>-terminate the data.</p>
<p class="subhead1"><a id="CAXML5526"></a>Syntax</p>
<pre>xmlerr XmlDomSetNodeValueLen(
   xmlctx *xctx, 
   xmlnode *node, 
   oratext *value, 
   ub4 len);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t248">Parameter</th>
<th class="cellalignment2921" id="r1c2-t248">In/Out</th>
<th class="cellalignment2921" id="r1c3-t248">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t248" headers="r1c1-t248">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t248 r1c2-t248">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t248 r1c3-t248">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t248" headers="r1c1-t248">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t248 r1c2-t248">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t248 r1c3-t248">XML node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t248" headers="r1c1-t248">
<pre>value
</pre></td>
<td class="cellalignment2922" headers="r4c1-t248 r1c2-t248">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t248 r1c3-t248">node&#39;s new value; data encoding; user control</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t248" headers="r1c1-t248">
<pre>len
</pre></td>
<td class="cellalignment2922" headers="r5c1-t248 r1c2-t248">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t248 r1c3-t248">length of value, in bytes</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5527"></a>Returns</p>
<p><code>(xmlerr)</code> numeric error code, <code>0</code> on success</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomsetnodevaluelen">XmlDomSetNodeValueLen()</a>, <a href="#Xmldomsetnodevalue">XmlDomSetNodeValue()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5528" class="refsect2"><a id="Xmldomsetnodevaluestream"></a>
<hr/>
<h3 class="refsect2"><a id="sthref465"></a><a id="sthref466"></a><a id="sthref467"></a>XmlDomSetNodeValueStream()</h3>
<p>Sets the large &#34;value&#34; (character data) for a node piecemeal from an input stream. For very large values, it is not always possible to store them [efficiently] as a single contiguous chunk. This function is used to store chunked data of that type. Used only for <code>XMLType</code> data; XDK&#39;s data is always contiguous.</p>
<p class="subhead1"><a id="CAXML5529"></a>Syntax</p>
<pre>xmlerr XmlDomSetNodeValueStream(
   xmlctx *xctx, 
   xmlnode *node,
   xmlistream *istream);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t250">Parameter</th>
<th class="cellalignment2921" id="r1c2-t250">In/Out</th>
<th class="cellalignment2921" id="r1c3-t250">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t250" headers="r1c1-t250">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t250 r1c2-t250">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t250 r1c3-t250">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t250" headers="r1c1-t250">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t250 r1c2-t250">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t250 r1c3-t250">XML node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t250" headers="r1c1-t250">
<pre>istream
</pre></td>
<td class="cellalignment2922" headers="r4c1-t250 r1c2-t250">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t250 r1c3-t250">input stream object</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5530"></a>Returns</p>
<p><code>(xmlerr)</code> numeric error code, <code>0</code> on success</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetnodevaluestream">XmlDomGetNodeValueStream()</a>, <a href="#Xmldomsetnodevalue">XmlDomSetNodeValue()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5531" class="refsect2"><a id="CDEBFGIG"></a>
<hr/>
<h3 class="refsect2"><a id="sthref468"></a><a id="sthref469"></a><a id="sthref470"></a>XmlDomSetPullNodeAsBinaryStream()</h3>
<p>Returns the address of a binary input stream, as an <code>OUT istream</code> parameter, using the pull paradigm.</p>
<p class="subhead1"><a id="CAXML5532"></a>Syntax</p>
<pre>xmlerr *XmlDomSetPullNodeAsBinaryStream(
   xmlctx *xctx,
   xmlnode *node
   orastream *istream);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t252">Parameter</th>
<th class="cellalignment2921" id="r1c2-t252">In/Out</th>
<th class="cellalignment2921" id="r1c3-t252">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t252" headers="r1c1-t252">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t252 r1c2-t252">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t252 r1c3-t252">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t252" headers="r1c1-t252">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t252 r1c2-t252">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t252 r1c3-t252">XML node; may be <code>RAW</code> or <code>BLOB</code>, otherwise returns an error</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t252" headers="r1c1-t252">
<pre>istream
</pre></td>
<td class="cellalignment2922" headers="r4c1-t252 r1c2-t252">
<pre>OUT
</pre></td>
<td class="cellalignment2922" headers="r4c1-t252 r1c3-t252">input stream object; the method <code>OraStreamRead()</code> must be used to read this value, not <code>OraStreamReadChar()</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5533"></a>Returns</p>
<p><code>(xmlerr *)</code> error code, <code>XMLERR_OK []</code> on success</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML5534" class="refsect2"><a id="CDEBFFAF"></a>
<hr/>
<h3 class="refsect2"><a id="sthref471"></a><a id="sthref472"></a><a id="sthref473"></a>XmlDomSetPullNodeAsCharacterStream()</h3>
<p>Returns the address of an input character stream, as an <code>OUT istream</code> parameter, using the pull paradigm.</p>
<p class="subhead1"><a id="CAXML5535"></a>Syntax</p>
<pre>xmlerr *XmlDomSetPullNodeAsCharacterStream(
   xmlctx *xctx,
   xmlnode *node
   orcharacterinputstream *istream);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t253">Parameter</th>
<th class="cellalignment2921" id="r1c2-t253">In/Out</th>
<th class="cellalignment2921" id="r1c3-t253">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t253" headers="r1c1-t253">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t253 r1c2-t253">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t253 r1c3-t253">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t253" headers="r1c1-t253">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t253 r1c2-t253">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t253 r1c3-t253">XML node; may be any type supported by XML DB</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t253" headers="r1c1-t253">
<pre>istream
</pre></td>
<td class="cellalignment2922" headers="r4c1-t253 r1c2-t253">
<pre>OUT
</pre></td>
<td class="cellalignment2922" headers="r4c1-t253 r1c3-t253">input stream object; the method <code>OraStreamReadChar()</code> must be used to read this value, not <code>OraStreamRead()</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5536"></a>Returns</p>
<p><code>(xmlerr *)</code> error code, <code>XMLERR_OK []</code> on success</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML5537" class="refsect2"><a id="CDEEDBHG"></a>
<hr/>
<h3 class="refsect2"><a id="sthref474"></a><a id="sthref475"></a><a id="sthref476"></a>XmlDomSetPushNodeAsBinaryStream()</h3>
<p>Returns the address of an input binary stream using the push paradigm.</p>
<p class="subhead1"><a id="CAXML5538"></a>Syntax</p>
<pre>orastream* XmlDomSetPushNodeAsBinaryStream(
   xmlctx *xctx,
   xmlnode *node);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t254">Parameter</th>
<th class="cellalignment2921" id="r1c2-t254">In/Out</th>
<th class="cellalignment2921" id="r1c3-t254">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t254" headers="r1c1-t254">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t254 r1c2-t254">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t254 r1c3-t254">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t254" headers="r1c1-t254">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t254 r1c2-t254">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t254 r1c3-t254">XML node; may be <code>RAW</code> or <code>BLOB</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5539"></a>Returns</p>
<p><code>(orastream *)</code> the binary stream; to read the output, use <code>OraStreamWrite()</code> instead of <code>OraStreamWriteChar()</code></p>
</div>
<!-- class="refsect2" -->
<div id="CAXML5540" class="refsect2"><a id="CDEGAHHA"></a>
<hr/>
<h3 class="refsect2"><a id="sthref477"></a><a id="sthref478"></a><a id="sthref479"></a>XmlDomSetPushNodeAsCharacterStream()</h3>
<p>Returns the address of a character stream using the push paradigm.</p>
<p class="subhead1"><a id="CAXML5541"></a>Syntax</p>
<pre>orastream *XmlDomSetPushNodeAsCharacterStream(
   xmlctx *xctx,
   xmlnode *node);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t255">Parameter</th>
<th class="cellalignment2921" id="r1c2-t255">In/Out</th>
<th class="cellalignment2921" id="r1c3-t255">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t255" headers="r1c1-t255">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t255 r1c2-t255">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t255 r1c3-t255">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t255" headers="r1c1-t255">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t255 r1c2-t255">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t255 r1c3-t255">XML node; any type supported by XML DB</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5542"></a>Returns</p>
<p><code>(orastream *)</code> the character stream; to read the output, use <code>OraStreamWriteChar()</code> instead of <code>OraStreamWrite()</code></p>
</div>
<!-- class="refsect2" -->
<div id="CAXML5543" class="refsect2"><a id="Xmldomvalidate"></a>
<hr/>
<h3 class="refsect2"><a id="sthref480"></a><a id="sthref481"></a><a id="sthref482"></a>XmlDomValidate()</h3>
<p>Given a root node, validates it against the current DTD.</p>
<p class="subhead1"><a id="CAXML5544"></a>Syntax</p>
<pre>xmlerr XmlDomValidate(
   xmlctx *xctx,
   xmlnode *node);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t256">Parameter</th>
<th class="cellalignment2921" id="r1c2-t256">In/Out</th>
<th class="cellalignment2921" id="r1c3-t256">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t256" headers="r1c1-t256">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t256 r1c2-t256">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t256 r1c3-t256">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t256" headers="r1c1-t256">
<pre>node
</pre></td>
<td class="cellalignment2922" headers="r3c1-t256 r1c2-t256">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t256 r1c3-t256">node to validate</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5545"></a>Returns</p>
<p><code>(xmlerr)</code> error code, <code>XMLERR_OK [0]</code> means node is valid</p>
</div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="BABDIHIA"></a>
<hr/>
<div id="CAXML00309" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">NodeList Interface</h2>
<p><a href="#BABFHBJB">Table 3-9</a> summarizes the methods available through the <code>NodeList</code> interface.</p>
<div id="CAXML5546" class="tblformal">
<p class="titleintable"><a id="sthref483"></a><a id="BABFHBJB"></a>Table 3-9 Summary of NodeList Methods; DOM Package</p>
<table class="cellalignment2920" title="Summary of NodeList Methods; DOM Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t257">Function</th>
<th class="cellalignment2921" id="r1c2-t257">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t257" headers="r1c1-t257">
<p><a href="#Xmldomfreenodelist">XmlDomFreeNodeList()</a></p>
</td>
<td class="cellalignment2922" headers="r2c1-t257 r1c2-t257">
<p>Free a node list returned by XmlDomGetElemsByTag, and so on.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t257" headers="r1c1-t257">
<p><a href="#Xmldomgetnodelistitem">XmlDomGetNodeListItem()</a></p>
</td>
<td class="cellalignment2922" headers="r3c1-t257 r1c2-t257">
<p>Return n<sup>th</sup> node in list.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t257" headers="r1c1-t257">
<p><a href="#Xmldomgetnodelistlength">XmlDomGetNodeListLength()</a></p>
</td>
<td class="cellalignment2922" headers="r4c1-t257 r1c2-t257">
<p>Return length of node list.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CAXML5547" class="refsect2"><a id="Xmldomfreenodelist"></a>
<hr/>
<h3 class="refsect2"><a id="sthref484"></a><a id="sthref485"></a><a id="sthref486"></a>XmlDomFreeNodeList()</h3>
<p>Free a node list returned by <code>XmlDomGetElemsByTag</code> or related functions, releasing all resources associated with it. If given a node list that is part of the DOM proper (such as the children of a node), does nothing.</p>
<p class="subhead1"><a id="CAXML5548"></a>Syntax</p>
<pre>void XmlDomFreeNodeList(
   xmlctx *xctx,
   xmlnodelist *list);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t258">Parameter</th>
<th class="cellalignment2921" id="r1c2-t258">In/Out</th>
<th class="cellalignment2921" id="r1c3-t258">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t258" headers="r1c1-t258">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t258 r1c2-t258">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t258 r1c3-t258">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t258" headers="r1c1-t258">
<pre>list
</pre></td>
<td class="cellalignment2922" headers="r3c1-t258 r1c2-t258">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t258 r1c3-t258"><code>NodeList</code> to free</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetelemsbytag">XmlDomGetElemsByTag()</a>, <a href="#Xmldomgetelemsbytagns">XmlDomGetElemsByTagNS()</a>, <a href="#Xmldomgetchildrenbytag">XmlDomGetChildrenByTag()</a>, <a href="#Xmldomgetchildrenbytagns">XmlDomGetChildrenByTagNS()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5549" class="refsect2"><a id="Xmldomgetnodelistitem"></a>
<hr/>
<h3 class="refsect2"><a id="sthref487"></a><a id="sthref488"></a><a id="sthref489"></a>XmlDomGetNodeListItem()</h3>
<p>Return nth node in a node list. The first item is index <code>0</code>.</p>
<p class="subhead1"><a id="CAXML5550"></a>Syntax</p>
<pre>xmlnode* XmlDomGetNodeListItem(
   xmlctx *xctx,
   xmlnodelist *list,
   ub4 index);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t260">Parameter</th>
<th class="cellalignment2921" id="r1c2-t260">In/Out</th>
<th class="cellalignment2921" id="r1c3-t260">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t260" headers="r1c1-t260">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t260 r1c2-t260">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t260 r1c3-t260">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t260" headers="r1c1-t260">
<pre>list
</pre></td>
<td class="cellalignment2922" headers="r3c1-t260 r1c2-t260">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t260 r1c3-t260"><code>NodeList</code></td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t260" headers="r1c1-t260">
<pre>index
</pre></td>
<td class="cellalignment2922" headers="r4c1-t260 r1c2-t260">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t260 r1c3-t260">index into <code>list</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5551"></a>Returns</p>
<p><code>(xmlnode *)</code> node at the nth position in node list [or <code>NULL</code>]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetnodelistlength">XmlDomGetNodeListLength()</a>, <a href="#Xmldomfreenodelist">XmlDomFreeNodeList()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5552" class="refsect2"><a id="Xmldomgetnodelistlength"></a>
<hr/>
<h3 class="refsect2"><a id="sthref490"></a><a id="sthref491"></a><a id="sthref492"></a>XmlDomGetNodeListLength()</h3>
<p>Returns the number of nodes in a node list (its length). Note that nodes are referred to by index, so the range of valid indexes is <code>0</code> through <code>length-1</code>.</p>
<p class="subhead1"><a id="CAXML5553"></a>Syntax</p>
<pre>ub4 XmlDomGetNodeListLength(
   xmlctx *xctx,
   xmlnodelist *list);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t262">Parameter</th>
<th class="cellalignment2921" id="r1c2-t262">In/Out</th>
<th class="cellalignment2921" id="r1c3-t262">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t262" headers="r1c1-t262">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t262 r1c2-t262">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t262 r1c3-t262">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t262" headers="r1c1-t262">
<pre>list
</pre></td>
<td class="cellalignment2922" headers="r3c1-t262 r1c2-t262">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t262 r1c3-t262"><code>NodeList</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5554"></a>Returns</p>
<p><code>(ub4)</code> number of nodes in node list</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetnodelistitem">XmlDomGetNodeListItem()</a>, <a href="#Xmldomfreenodelist">XmlDomFreeNodeList()</a></div>
</div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="BABDHEGH"></a>
<hr/>
<div id="CAXML00310" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">Notation Interface</h2>
<p><a href="#BABGIFBC">Table 3-10</a> summarizes the methods available through the <code>Notation</code> interface.</p>
<div id="CAXML5555" class="tblformal">
<p class="titleintable"><a id="sthref493"></a><a id="BABGIFBC"></a>Table 3-10 Summary of NodeList Methods; DOM Package</p>
<table class="cellalignment2920" title="Summary of NodeList Methods; DOM Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t264">Function</th>
<th class="cellalignment2921" id="r1c2-t264">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t264" headers="r1c1-t264">
<p><a href="#Xmldomgetnotationpubid">XmlDomGetNotationPubID()</a></p>
</td>
<td class="cellalignment2922" headers="r2c1-t264 r1c2-t264">
<p>Get notation&#39;s public ID</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t264" headers="r1c1-t264">
<p><a href="#Xmldomgetnotationsysid">XmlDomGetNotationSysID()</a></p>
</td>
<td class="cellalignment2922" headers="r3c1-t264 r1c2-t264">
<p>Get notation&#39;s system ID.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CAXML5556" class="refsect2"><a id="Xmldomgetnotationpubid"></a>
<hr/>
<h3 class="refsect2"><a id="sthref494"></a><a id="sthref495"></a><a id="sthref496"></a>XmlDomGetNotationPubID()</h3>
<p>Return a notation&#39;s public identifier (in the data encoding).</p>
<p class="subhead1"><a id="CAXML5557"></a>Syntax</p>
<pre>oratext* XmlDomGetNotationPubID(
   xmlctx *xctx,
   xmlnotenode *note);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t265">Parameter</th>
<th class="cellalignment2921" id="r1c2-t265">In/Out</th>
<th class="cellalignment2921" id="r1c3-t265">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t265" headers="r1c1-t265">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t265 r1c2-t265">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t265 r1c3-t265">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t265" headers="r1c1-t265">
<pre>note
</pre></td>
<td class="cellalignment2922" headers="r3c1-t265 r1c2-t265">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t265 r1c3-t265"><code>Notation</code> node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5558"></a>Returns</p>
<p><code>(oratext *)</code> notation&#39;s public identifier [data encoding; may be <code>NULL</code>]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetnotationsysid">XmlDomGetNotationSysID()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5559" class="refsect2"><a id="Xmldomgetnotationsysid"></a>
<hr/>
<h3 class="refsect2"><a id="sthref497"></a><a id="sthref498"></a><a id="sthref499"></a>XmlDomGetNotationSysID()</h3>
<p>Return a notation&#39;s system identifier (in the data encoding).</p>
<p class="subhead1"><a id="CAXML5560"></a>Syntax</p>
<pre>oratext* XmlDomGetNotationSysID(
   xmlctx *xctx, 
   xmlnotenode *note);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t267">Parameter</th>
<th class="cellalignment2921" id="r1c2-t267">In/Out</th>
<th class="cellalignment2921" id="r1c3-t267">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t267" headers="r1c1-t267">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t267 r1c2-t267">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t267 r1c3-t267">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t267" headers="r1c1-t267">
<pre>note
</pre></td>
<td class="cellalignment2922" headers="r3c1-t267 r1c2-t267">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t267 r1c3-t267"><code>Notation</code> node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5561"></a>Returns</p>
<p><code>(oratext *)</code> notation&#39;s system identifier [data encoding; may be <code>NULL</code>]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetnotationpubid">XmlDomGetNotationPubID()</a></div>
</div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="BABIEBEE"></a>
<hr/>
<div id="CAXML00311" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">ProcessingInstruction Interface</h2>
<p><a href="#BABFHICJ">Table 3-11</a> summarizes the methods available through the <code>ProcessingInstruction</code> interface.</p>
<div id="CAXML5562" class="tblformal">
<p class="titleintable"><a id="sthref500"></a><a id="BABFHICJ"></a>Table 3-11 Summary of ProcessingInstruction Methods; DOM Package</p>
<table class="cellalignment2920" title="Summary of ProcessingInstruction Methods; DOM Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t269">Function</th>
<th class="cellalignment2921" id="r1c2-t269">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t269" headers="r1c1-t269">
<p><a href="#Xmldomgetpidata">XmlDomGetPIData()</a></p>
</td>
<td class="cellalignment2922" headers="r2c1-t269 r1c2-t269">
<p>Get processing instruction&#39;s data.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t269" headers="r1c1-t269">
<p><a href="#Xmldomgetpitarget">XmlDomGetPITarget()</a></p>
</td>
<td class="cellalignment2922" headers="r3c1-t269 r1c2-t269">
<p>Get PI&#39;s target.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t269" headers="r1c1-t269">
<p><a href="#Xmldomsetpidata">XmlDomSetPIData()</a></p>
</td>
<td class="cellalignment2922" headers="r4c1-t269 r1c2-t269">
<p>Set processing instruction&#39;s data.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CAXML5563" class="refsect2"><a id="Xmldomgetpidata"></a>
<hr/>
<h3 class="refsect2"><a id="sthref501"></a><a id="sthref502"></a><a id="sthref503"></a>XmlDomGetPIData()</h3>
<p>Returns the content (data) of a processing instruction (in the data encoding). If the node is not a <code>ProcessingInstruction</code>, returns <code>NULL</code>. The content is the part from the first non-whitespace character after the target until the ending &#34;<code>?&gt;</code>&#34;.</p>
<p class="subhead1"><a id="CAXML5564"></a>Syntax</p>
<pre>oratext* XmlDomGetPIData(
   xmlctx *xctx, 
   xmlpinode *pi);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t270">Parameter</th>
<th class="cellalignment2921" id="r1c2-t270">In/Out</th>
<th class="cellalignment2921" id="r1c3-t270">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t270" headers="r1c1-t270">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t270 r1c2-t270">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t270 r1c3-t270">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t270" headers="r1c1-t270">
<pre>pi
</pre></td>
<td class="cellalignment2922" headers="r3c1-t270 r1c2-t270">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t270 r1c3-t270"><code>ProcessingInstruction</code> node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5565"></a>Returns</p>
<p><code>(oratext *)</code> processing instruction&#39;s data [data encoding]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetpitarget">XmlDomGetPITarget()</a>, <a href="#Xmldomsetpidata">XmlDomSetPIData()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5566" class="refsect2"><a id="Xmldomgetpitarget"></a>
<hr/>
<h3 class="refsect2"><a id="sthref504"></a><a id="sthref505"></a><a id="sthref506"></a>XmlDomGetPITarget()</h3>
<p>Returns a processing instruction&#39;s target string. If the node is not a <code>ProcessingInstruction</code>, returns <code>NULL</code>. The target is the first token following the markup that begins the <code>ProcessingInstruction</code>. All <code>ProcessingInstruction</code>s must have a target, though the data part is optional.</p>
<p class="subhead1"><a id="CAXML5567"></a>Syntax</p>
<pre>oratext* XmlDomGetPITarget(
   xmlctx *xctx,
   xmlpinode *pi);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t272">Parameter</th>
<th class="cellalignment2921" id="r1c2-t272">In/Out</th>
<th class="cellalignment2921" id="r1c3-t272">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t272" headers="r1c1-t272">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t272 r1c2-t272">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t272 r1c3-t272">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t272" headers="r1c1-t272">
<pre>pi
</pre></td>
<td class="cellalignment2922" headers="r3c1-t272 r1c2-t272">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t272 r1c3-t272"><code>ProcessingInstruction</code> node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5568"></a>Returns</p>
<p><code>(oratext *)</code> processing instruction&#39;s target [data encoding]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetpidata">XmlDomGetPIData()</a>, <a href="#Xmldomsetpidata">XmlDomSetPIData()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML5569" class="refsect2"><a id="Xmldomsetpidata"></a>
<hr/>
<h3 class="refsect2"><a id="sthref507"></a><a id="sthref508"></a><a id="sthref509"></a>XmlDomSetPIData()</h3>
<p>Sets a <code>ProcessingInstruction</code>&#39;s content, which must be in the data encoding. It is not permitted to set the data to <code>NULL</code>. If the node is not a <code>ProcessingInstruction</code>, does nothing. The new data is not verified, converted, or checked.</p>
<p class="subhead1"><a id="CAXML5570"></a>Syntax</p>
<pre>void XmlDomSetPIData(
   xmlctx *xctx, 
   xmlpinode *pi, 
   oratext *data);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t274">Parameter</th>
<th class="cellalignment2921" id="r1c2-t274">In/Out</th>
<th class="cellalignment2921" id="r1c3-t274">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t274" headers="r1c1-t274">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t274 r1c2-t274">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t274 r1c3-t274">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t274" headers="r1c1-t274">
<pre>pi
</pre></td>
<td class="cellalignment2922" headers="r3c1-t274 r1c2-t274">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t274 r1c3-t274"><code>ProcessingInstruction</code> node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t274" headers="r1c1-t274">
<pre>data
</pre></td>
<td class="cellalignment2922" headers="r4c1-t274 r1c2-t274">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t274 r1c3-t274"><code>ProcessingInstruction</code>&#39;s new data; data encoding</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetpitarget">XmlDomGetPITarget()</a>, <a href="#Xmldomgetpidata">XmlDomGetPIData()</a></div>
</div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="BABHFJCC"></a>
<hr/>
<div id="CAXML00312" class="refsect1">
<h2 class="refsect1">Text Interface</h2>
<p><a href="#Summarydom">Table 3-12</a> summarizes the methods available through the <code>Text</code> interface.</p>
<div id="CAXML5571" class="tblformal">
<p class="titleintable"><a id="sthref510"></a><a id="Summarydom"></a>Table 3-12 Summary of Text Methods; DOM Package</p>
<table class="cellalignment2920" title="Summary of Text Methods; DOM Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t276">Function</th>
<th class="cellalignment2921" id="r1c2-t276">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t276" headers="r1c1-t276">
<p><a href="#Xmldomsplittext">XmlDomSplitText()</a></p>
</td>
<td class="cellalignment2922" headers="r2c1-t276 r1c2-t276">
<p>Split text node in to two.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CAXML5572" class="refsect2"><a id="Xmldomsplittext"></a>
<hr/>
<h3 class="refsect2"><a id="sthref511"></a><a id="sthref512"></a><a id="sthref513"></a>XmlDomSplitText()</h3>
<p>Splits a single text node into two text nodes; the original data is split between them. If the given node is not type text, or the offset is outside of the original data, does nothing and returns <code>NULL</code>. The offset is zero-based, and is in characters, not bytes. The original node is retained, its data is just truncated. A new text node is created which contains the remainder of the original data, and is inserted as the next sibling of the original. The new text node is returned.</p>
<p class="subhead1"><a id="CAXML5573"></a>Syntax</p>
<pre>xmltextnode* XmlDomSplitText(
   xmlctx *xctx, 
   xmltextnode *textnode, 
   ub4 offset);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t277">Parameter</th>
<th class="cellalignment2921" id="r1c2-t277">In/Out</th>
<th class="cellalignment2921" id="r1c3-t277">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t277" headers="r1c1-t277">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t277 r1c2-t277">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t277 r1c3-t277">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t277" headers="r1c1-t277">
<pre>textnode
</pre></td>
<td class="cellalignment2922" headers="r3c1-t277 r1c2-t277">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t277 r1c3-t277"><code>Text</code> node</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t277" headers="r1c1-t277">
<pre>offset
</pre></td>
<td class="cellalignment2922" headers="r4c1-t277 r1c2-t277">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t277 r1c3-t277"><code>0</code>-based character count at which to split text</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML5574"></a>Returns</p>
<p><code>(xmltextnode *)</code> new text node</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomgetchardata">XmlDomGetCharData()</a>, <a href="#Xmldomappenddata">XmlDomAppendData()</a>, <a href="#Xmldominsertdata">XmlDomInsertData()</a>, <a href="#Xmldomdeletedata">XmlDomDeleteData()</a>, <a href="#Xmldomreplacedata">XmlDomReplaceData()</a></div>
</div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2913">
<tr>
<td class="cellalignment2922">
<table class="cellalignment2918">
<tr>
<td class="cellalignment2917"><a href="callback.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2917"><a href="event.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2925">
<table class="cellalignment2916">
<tr>
<td class="cellalignment2917"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2917"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2917"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2917"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2917"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2917"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>