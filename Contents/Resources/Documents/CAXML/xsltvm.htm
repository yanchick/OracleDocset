<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-2711"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Package%20XSLTVM%20APIs%20for%20C"></a><title>Package XSLTVM APIs for C</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 726"/>
<meta name="dcterms.created" content="2013-04-05T15:50:8Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database XML C API Reference"/>
<meta name="dcterms.identifier" content="E15885-04"/>
<meta name="dcterms.isVersionOf" content="CAXML"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="xslt.htm" title="Previous" type="text/html"/>
<link rel="Next" href="appendix.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E15885-04.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">20/22</span> <!-- End Header -->
<div id="CAXML00900" class="chapter"><a id="Xsltvmpackage"></a>
<h1 class="chapter"><span class="secnum">16</span> <a id="sthref1215"></a> <a id="sthref1216"></a> <a id="sthref1217"></a> Package XSLTVM APIs for C</h1>
<p>Package XSLTVM implements the XSL Transformation (XSLT) language as specified in W3C Recommendation 16 November 1999. The XSLTVM package contains two interfaces.</p>
<p>This chapter contains the following sections:</p>
<ul>
<li>
<p><a href="#CBBHGFGI">Using XSLTVM</a></p>
</li>
<li>
<p><a href="#CBBECHFD">XSLTC Interface</a></p>
</li>
<li>
<p><a href="#Xsltvminterfaces">XSLTVM Interface</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADXDK" href="../ADXDK/toc.htm"><span class="italic">Oracle XML Developer&#39;s Kit Programmer&#39;s Guide</span></a></p>
</li>
<li>
<p><a class="olink ADXDB" href="../ADXDB/toc.htm"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a></p>
</li>
</ul>
</div>
<div class="refentry"><a id="CBBHGFGI"></a>
<hr/>
<div id="CAXML6314" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">Using XSLTVM</h2>
<p>XSLT Virtual Machine is the software implementation of a &#34;CPU&#34; designed to run compiled XSLT code. A concept of virtual machine assumes a compiler compiling XSLT stylesheets to a sequence of byte codes or machine instructions for the &#34;XSLT CPU&#34;. The byte-code program is a platform-independent sequence of 2-byte units. It can be stored, cached and run on different XSLTVM. The XSLTVM uses the bytecode programs to transform instance XML documents. This approach clearly separates compile (design)-time from run-time computations and specifies a uniform way of exchanging data between instructions.</p>
<p>A typical scenario of using the package APIs has the following steps:</p>
<ol>
<li>
<p>Create/Use an XML meta context object.</p>
<p><code>xctx = XmlCreate(,...);</code></p>
</li>
<li>
<p>Create/Use an XSLT Compiler object.</p>
<p><code>comp = XmlXvmCreateComp(xctx);</code></p>
</li>
<li>
<p>Compile an XSLT stylesheets and cache the result bytecode.</p>
<p><code>code = XmlXvmCompileFile(comp, xslFile, baseuri, flags, );</code></p>
</li>
<li>
<p>Create/Use an XSLTVM object. The explicit stack size setting are needed when XSLTVM terminates with &#34;... Stack Overflow&#34; message or when smaller memory footprints are required (see <code>XmlXvmCreate</code>).</p>
<p><code>vm = XmlXvmCreate(xctx, &#34;StringStack&#34;, 32, &#34;NodeStack&#34;, 24, NULL);</code></p>
</li>
<li>
<p>Set a stylesheet bytecode to the XSLTVM object.</p>
<p><code>len = XmlXvmGetBytecodeLength(code, ); err = XmlXvmSetBytecodeBuffer(vm, code, len);</code></p>
</li>
<li>
<p>Transform an instance XML document.</p>
<p><code>err = XmlXvmTransformFile(vm, xmlFile, baseuri);</code></p>
</li>
<li>
<p>Clean.</p>
<p><code>XmlXvmDestroy(vm);</code></p>
<p><code>XmlXvmDestroyComp(comp);</code></p>
<p><code>XmlDestroy(xctx);</code></p>
</li>
</ol>
</div>
<!-- class="refsect1" -->
<a id="CBBECHFD"></a>
<hr/>
<div id="CAXML6315" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">XSLTC Interface</h2>
<p><a href="#BEJCJACI">Table 16-1</a> summarizes the methods available through the XSLTVM Interface.</p>
<div id="CAXML6316" class="tblformal">
<p class="titleintable"><a id="sthref1218"></a><a id="BEJCJACI"></a>Table 16-1 Summary of XSLTC Methods; XSLTVM Package</p>
<table class="cellalignment2920" title="Summary of XSLTC Methods; XSLTVM Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t3">Function</th>
<th class="cellalignment2921" id="r1c2-t3">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t3" headers="r1c1-t3">
<p><a href="#Xmlxvmcompilebuffer">XmlXvmCompileBuffer()</a></p>
</td>
<td class="cellalignment2922" headers="r2c1-t3 r1c2-t3">
<p>Compile an XSLT stylesheet from buffer into bytecode.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t3" headers="r1c1-t3">
<p><a href="#Xmlxvmcompiledom">XmlXvmCompileDom()</a></p>
</td>
<td class="cellalignment2922" headers="r3c1-t3 r1c2-t3">
<p>Compile an XSLT stylesheet from DOM into bytecode.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t3" headers="r1c1-t3">
<p><a href="#Xmlxvmcompilefile">XmlXvmCompileFile()</a></p>
</td>
<td class="cellalignment2922" headers="r4c1-t3 r1c2-t3">
<p>Compile an XSLT stylesheet from file into bytecode.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t3" headers="r1c1-t3">
<p><a href="#Xmlxvmcompileuri">XmlXvmCompileURI()</a></p>
</td>
<td class="cellalignment2922" headers="r5c1-t3 r1c2-t3">
<p>Compile XSLT stylesheet from URI into byte code.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r6c1-t3" headers="r1c1-t3">
<p><a href="#Xmlxvmcompilexpath">XmlXvmCompileXPath()</a></p>
</td>
<td class="cellalignment2922" headers="r6c1-t3 r1c2-t3">
<p>Compile an XPath expression.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r7c1-t3" headers="r1c1-t3">
<p><a href="#Xmlxvmcreatecomp">XmlXvmCreateComp()</a></p>
</td>
<td class="cellalignment2922" headers="r7c1-t3 r1c2-t3">
<p>Create an XSLT compiler.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r8c1-t3" headers="r1c1-t3">
<p><a href="#Xmlxvmdestroycomp">XmlXvmDestroyComp()</a></p>
</td>
<td class="cellalignment2922" headers="r8c1-t3 r1c2-t3">
<p>Destroy an XSLT compiler object.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r9c1-t3" headers="r1c1-t3">
<p><a href="#Xmlxvmgetbytecodelength">XmlXvmGetBytecodeLength()</a></p>
</td>
<td class="cellalignment2922" headers="r9c1-t3 r1c2-t3">
<p>Returns the bytecode length.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CAXML6317" class="refsect2"><a id="Xmlxvmcompilebuffer"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1219"></a><a id="sthref1220"></a><a id="sthref1221"></a>XmlXvmCompileBuffer()</h3>
<p>Compile an XSLT stylesheet from buffer into bytecode. Compiler flags could be one or more of the following:</p>
<ul>
<li>
<p><code>XMLXVM_DEBUG</code> forces compiler to include debug information into the bytecode</p>
</li>
<li>
<p><code>XMLXVM_STRIPSPACE</code> is equivalent to <code>&lt;xsl:strip-space elements=&#34;*&#34;/&gt;</code>.</p>
</li>
</ul>
<p>The generated bytecode resides in a compiler buffer which is freed when next stylesheet is compiled or when compiler object is deleted. Hence, if the bytecode is to be reused it should be copied into another location.</p>
<p class="subhead1"><a id="CAXML6318"></a>Syntax</p>
<pre>ub2 *XmlXvmCompileBuffer(
   xmlxvmcomp *comp,
   oratext *buffer,
   ub4 length, 
   oratext *baseURI,
   xmlxvmflag flags,
   xmlerr *error);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t4">Parameter</th>
<th class="cellalignment2921" id="r1c2-t4">In/Out</th>
<th class="cellalignment2921" id="r1c3-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t4" headers="r1c1-t4">
<pre>comp
</pre></td>
<td class="cellalignment2922" headers="r2c1-t4 r1c2-t4">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t4 r1c3-t4">compiler object</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t4" headers="r1c1-t4">
<pre>buffer
</pre></td>
<td class="cellalignment2922" headers="r3c1-t4 r1c2-t4">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t4 r1c3-t4">pointer to buffer containing stylesheet document</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t4" headers="r1c1-t4">
<pre>length
</pre></td>
<td class="cellalignment2922" headers="r4c1-t4 r1c2-t4">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t4 r1c3-t4">length of the stylesheet document in bytes</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t4" headers="r1c1-t4">
<pre>baseuri
</pre></td>
<td class="cellalignment2922" headers="r5c1-t4 r1c2-t4">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t4 r1c3-t4">base URI of the document</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r6c1-t4" headers="r1c1-t4">
<pre>flags
</pre></td>
<td class="cellalignment2922" headers="r6c1-t4 r1c2-t4">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r6c1-t4 r1c3-t4">flags for the current compilation</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r7c1-t4" headers="r1c1-t4">
<pre>error
</pre></td>
<td class="cellalignment2922" headers="r7c1-t4 r1c2-t4">
<pre>OUT
</pre></td>
<td class="cellalignment2922" headers="r7c1-t4 r1c3-t4">returned error code</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6319"></a>Returns</p>
<p><code>(ub2 *)</code> bytecode or <code>NULL</code> on error</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmlxvmcompilefile">XmlXvmCompileFile()</a>, <a href="#Xmlxvmcompileuri">XmlXvmCompileURI()</a>, <a href="#Xmlxvmcompiledom">XmlXvmCompileDom()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML6320" class="refsect2"><a id="Xmlxvmcompiledom"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1222"></a><a id="sthref1223"></a><a id="sthref1224"></a>XmlXvmCompileDom()</h3>
<p>Compile an XSLT stylesheet from DOM into bytecode. Compiler flags could be one or more of the following:</p>
<ul>
<li>
<p><code>XMLXVM_DEBUG</code> forces compiler to include debug information into the bytecode</p>
</li>
<li>
<p><code>XMLXVM_STRIPSPACE</code> is equivalent to <code>&lt;xsl:strip-space elements=&#34;*&#34;/&gt;</code>.</p>
</li>
</ul>
<p>The generated bytecode resides in a compiler buffer which is freed when next stylesheet is compiled or when compiler object is deleted. Hence, if the bytecode is to be reused it should be copied into another location.</p>
<p class="subhead1"><a id="CAXML6321"></a>Syntax</p>
<pre>ub2 *XmlXvmCompileDom(
   xmlxvmcomp *comp,
   xmldocnode *root,
   xmlxvmflag flags,
   xmlerr *error);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t6">Parameter</th>
<th class="cellalignment2921" id="r1c2-t6">In/Out</th>
<th class="cellalignment2921" id="r1c3-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t6" headers="r1c1-t6">
<pre>comp
</pre></td>
<td class="cellalignment2922" headers="r2c1-t6 r1c2-t6">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t6 r1c3-t6">compiler object</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t6" headers="r1c1-t6">
<pre>rooot
</pre></td>
<td class="cellalignment2922" headers="r3c1-t6 r1c2-t6">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t6 r1c3-t6">root element of the stylesheet DOM</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t6" headers="r1c1-t6">
<pre>flags
</pre></td>
<td class="cellalignment2922" headers="r4c1-t6 r1c2-t6">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t6 r1c3-t6">flags for the current compilation</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t6" headers="r1c1-t6">
<pre>error
</pre></td>
<td class="cellalignment2922" headers="r5c1-t6 r1c2-t6">
<pre>OUT
</pre></td>
<td class="cellalignment2922" headers="r5c1-t6 r1c3-t6">returned error code</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6322"></a>Returns</p>
<p><code>(ub2 *)</code> bytecode or <code>NULL</code> on error</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmlxvmcompilefile">XmlXvmCompileFile()</a>, <a href="#Xmlxvmcompilebuffer">XmlXvmCompileBuffer()</a>, <a href="#Xmlxvmcompileuri">XmlXvmCompileURI()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML6323" class="refsect2"><a id="Xmlxvmcompilefile"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1225"></a><a id="sthref1226"></a><a id="sthref1227"></a>XmlXvmCompileFile()</h3>
<p>Compile XSLT stylesheet from file into bytecode. Compiler flags could be one or more of the following:</p>
<ul>
<li>
<p><code>XMLXVM_DEBUG</code> forces compiler to include debug information into the bytecode</p>
</li>
<li>
<p><code>XMLXVM_STRIPSPACE</code> is equivalent to <code>&lt;xsl:strip-space elements=&#34;*&#34;/&gt;</code>.</p>
</li>
</ul>
<p>The generated bytecode resides in a compiler buffer which is freed when next stylesheet is compiled or when compiler object is deleted. Hence, if the bytecode is to be reused it should be copied into another location.</p>
<p class="subhead1"><a id="CAXML6324"></a>Syntax</p>
<pre>ub2 *XmlXvmCompileFile(
   xmlxvmcomp *comp, 
   oratext *path,
   oratext *baseURI,
   xmlxvmflag flags,
   xmlerr *error);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t8">Parameter</th>
<th class="cellalignment2921" id="r1c2-t8">In/Out</th>
<th class="cellalignment2921" id="r1c3-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t8" headers="r1c1-t8">
<pre>comp
</pre></td>
<td class="cellalignment2922" headers="r2c1-t8 r1c2-t8">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t8 r1c3-t8">compiler object</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t8" headers="r1c1-t8">
<pre>path
</pre></td>
<td class="cellalignment2922" headers="r3c1-t8 r1c2-t8">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t8 r1c3-t8">path of XSL stylesheet file</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t8" headers="r1c1-t8">
<pre>baseuri
</pre></td>
<td class="cellalignment2922" headers="r4c1-t8 r1c2-t8">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t8 r1c3-t8">base URI of the document</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t8" headers="r1c1-t8">
<pre>flags
</pre></td>
<td class="cellalignment2922" headers="r5c1-t8 r1c2-t8">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t8 r1c3-t8">flags for the current compilation</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r6c1-t8" headers="r1c1-t8">
<pre>error
</pre></td>
<td class="cellalignment2922" headers="r6c1-t8 r1c2-t8">
<pre>OUT
</pre></td>
<td class="cellalignment2922" headers="r6c1-t8 r1c3-t8">returned error code</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6325"></a>Returns</p>
<p><code>(ub2 *)</code> bytecode or <code>NULL</code> on error</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmlxvmcompileuri">XmlXvmCompileURI()</a>, <a href="#Xmlxvmcompilebuffer">XmlXvmCompileBuffer()</a>, <a href="#Xmlxvmcompiledom">XmlXvmCompileDom()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML6326" class="refsect2"><a id="Xmlxvmcompileuri"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1228"></a><a id="sthref1229"></a><a id="sthref1230"></a>XmlXvmCompileURI()</h3>
<p>Compile XSLT stylesheet from URI into bytecode. Compiler flags could be one or more of the following:</p>
<ul>
<li>
<p><code>XMLXVM_DEBUG</code> forces compiler to include debug information into the bytecode</p>
</li>
<li>
<p><code>XMLXVM_STRIPSPACE</code> is equivalent to <code>&lt;xsl:strip-space elements=&#34;*&#34;/&gt;</code>.</p>
</li>
</ul>
<p>The generated bytecode resides in a compiler buffer which is freed when next stylesheet is compiled or when compiler object is deleted. Hence, if the bytecode is to be reused it should be copied into another location.</p>
<p class="subhead1"><a id="CAXML6327"></a>Syntax</p>
<pre>ub2 *XmlXvmCompileURI(
   xmlxvmcomp *comp, 
   oratext *uri, 
   xmlxvmflag flags, 
   xmlerr *error);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t10">Parameter</th>
<th class="cellalignment2921" id="r1c2-t10">In/Out</th>
<th class="cellalignment2921" id="r1c3-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t10" headers="r1c1-t10">
<pre>comp
</pre></td>
<td class="cellalignment2922" headers="r2c1-t10 r1c2-t10">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t10 r1c3-t10">compiler object</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t10" headers="r1c1-t10">
<pre>uri
</pre></td>
<td class="cellalignment2922" headers="r3c1-t10 r1c2-t10">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t10 r1c3-t10">URI of the file that contains the XSL stylesheet</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t10" headers="r1c1-t10">
<pre>flags
</pre></td>
<td class="cellalignment2922" headers="r4c1-t10 r1c2-t10">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t10 r1c3-t10">flags for the current compilation</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t10" headers="r1c1-t10">
<pre>error
</pre></td>
<td class="cellalignment2922" headers="r5c1-t10 r1c2-t10">
<pre>OUT
</pre></td>
<td class="cellalignment2922" headers="r5c1-t10 r1c3-t10">returned error code</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6328"></a>Returns</p>
<p><code>(ub2 *)</code> bytecode or <code>NULL</code> on error</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmlxvmcompilefile">XmlXvmCompileFile()</a>, <a href="#Xmlxvmcompilebuffer">XmlXvmCompileBuffer()</a>, <a href="#Xmlxvmcompiledom">XmlXvmCompileDom()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML6329" class="refsect2"><a id="Xmlxvmcompilexpath"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1231"></a><a id="sthref1232"></a><a id="sthref1233"></a>XmlXvmCompileXPath()</h3>
<p>Compiles an XPath expression. The optional <code>pfxmap</code> is used to map namespace prefixes to URIs in the XPath expression. It is an array of prefix, URI values, ending in <code>NULL</code>, and so on.</p>
<p class="subhead1"><a id="CAXML6330"></a>Syntax</p>
<pre>ub2 *XmlXvmCompileXPath(
   xmlxvmcomp *comp, 
   oratext *xpath,
   oratext **pfxmap,
   xmlerr *error);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t12">Parameter</th>
<th class="cellalignment2921" id="r1c2-t12">In/Out</th>
<th class="cellalignment2921" id="r1c3-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t12" headers="r1c1-t12">
<pre>comp
</pre></td>
<td class="cellalignment2922" headers="r2c1-t12 r1c2-t12">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t12 r1c3-t12">compiler object</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t12" headers="r1c1-t12">
<pre>xpath
</pre></td>
<td class="cellalignment2922" headers="r3c1-t12 r1c2-t12">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t12 r1c3-t12">XPath expression</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t12" headers="r1c1-t12">
<pre>pfxmap
</pre></td>
<td class="cellalignment2922" headers="r4c1-t12 r1c2-t12">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t12 r1c3-t12">array of prefix-URI mappings</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t12" headers="r1c1-t12">
<pre>error
</pre></td>
<td class="cellalignment2922" headers="r5c1-t12 r1c2-t12">
<pre>OUT
</pre></td>
<td class="cellalignment2922" headers="r5c1-t12 r1c3-t12">returned error code</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6331"></a>Returns</p>
<p><code>(ub2 *)</code> XPath expression bytecode or <code>NULL</code> on error</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML6332" class="refsect2"><a id="Xmlxvmcreatecomp"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1234"></a><a id="sthref1235"></a><a id="sthref1236"></a>XmlXvmCreateComp()</h3>
<p>Create an XSLT compiler object. The XSLT compiler is used to compile XSLT stylesheets into bytecode.</p>
<p class="subhead1"><a id="CAXML6333"></a>Syntax</p>
<pre>xmlxvmcomp *XmlXvmCreateComp(
   xmlctx *xctx);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t13">Parameter</th>
<th class="cellalignment2921" id="r1c2-t13">In/Out</th>
<th class="cellalignment2921" id="r1c3-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t13" headers="r1c1-t13">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t13 r1c2-t13">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t13 r1c3-t13">XML context</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6334"></a>Returns</p>
<p><code>(xmlxvmcomp *)</code> XSLT compiler object, or <code>NULL</code> on error</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmlxvmdestroycomp">XmlXvmDestroyComp()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML6335" class="refsect2"><a id="Xmlxvmdestroycomp"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1237"></a><a id="sthref1238"></a><a id="sthref1239"></a>XmlXvmDestroyComp()</h3>
<p>Destroys an XSLT compiler object</p>
<p class="subhead1"><a id="CAXML6336"></a>Syntax</p>
<pre>void XmlXvmDestroyComp(
   xmlxvmcomp *comp);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t15">Parameter</th>
<th class="cellalignment2921" id="r1c2-t15">In/Out</th>
<th class="cellalignment2921" id="r1c3-t15">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t15" headers="r1c1-t15">
<pre>comp
</pre></td>
<td class="cellalignment2922" headers="r2c1-t15 r1c2-t15">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t15 r1c3-t15">XSLT compiler object</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmlxvmcreatecomp">XmlXvmCreateComp()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML6337" class="refsect2"><a id="Xmlxvmgetbytecodelength"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1240"></a><a id="sthref1241"></a><a id="sthref1242"></a>XmlXvmGetBytecodeLength()</h3>
<p>The bytecode length is needed when the bytecode is to be copied or when it is set into XSLTVM.</p>
<p class="subhead1"><a id="CAXML6338"></a>Syntax</p>
<pre>ub4 XmlXvmGetBytecodeLength(
   ub2 *bytecode,
   xmlerr *error);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t17">Parameter</th>
<th class="cellalignment2921" id="r1c2-t17">In/Out</th>
<th class="cellalignment2921" id="r1c3-t17">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t17" headers="r1c1-t17">
<pre>bytecode
</pre></td>
<td class="cellalignment2922" headers="r2c1-t17 r1c2-t17">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t17 r1c3-t17">bytecode buffer</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t17" headers="r1c1-t17">
<pre>error
</pre></td>
<td class="cellalignment2922" headers="r3c1-t17 r1c2-t17">
<pre>OUT
</pre></td>
<td class="cellalignment2922" headers="r3c1-t17 r1c3-t17">returned error code</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6339"></a>Returns</p>
<p><code>(ub4)</code> The bytecode length in bytes.</p>
</div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="Xsltvminterfaces"></a>
<hr/>
<div id="CAXML6340" class="refsect1">
<h2 class="refsect1">XSLTVM Interface</h2>
<p><a href="#Summaryxsltvm">Table 16-2</a> summarizes the methods available through the XSLTVM Interface.</p>
<div id="CAXML6341" class="tblformal">
<p class="titleintable"><a id="sthref1243"></a><a id="Summaryxsltvm"></a>Table 16-2 Summary of XSLTVM Methods; Package XSLTVM</p>
<table class="cellalignment2920" title="Summary of XSLTVM Methods; Package XSLTVM" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t18">Function</th>
<th class="cellalignment2921" id="r1c2-t18">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t18" headers="r1c1-t18">
<p><a href="#CBBBIJDE">XMLXVM_DEBUG_F()</a></p>
</td>
<td class="cellalignment2922" headers="r2c1-t18 r1c2-t18">
<p>XMLXSLTVM debug function.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t18" headers="r1c1-t18">
<p><a href="#Xmlxvmcreate">XmlXvmCreate()</a></p>
</td>
<td class="cellalignment2922" headers="r3c1-t18 r1c2-t18">
<p>Create an XSLT virtual machine.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t18" headers="r1c1-t18">
<p><a href="#Xmlxvmdestroy">XmlXvmDestroy()</a></p>
</td>
<td class="cellalignment2922" headers="r4c1-t18 r1c2-t18">
<p>Destroys an XSLT virtual machine.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t18" headers="r1c1-t18">
<p><a href="#Xmlxvmevaluatexpath">XmlXvmEvaluateXPath()</a></p>
</td>
<td class="cellalignment2922" headers="r5c1-t18 r1c2-t18">
<p>Evaluate already-compiled XPath expression.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r6c1-t18" headers="r1c1-t18">
<p><a href="#Xmlxvmgetobjectboolean">XmlXvmGetObjectBoolean()</a></p>
</td>
<td class="cellalignment2922" headers="r6c1-t18 r1c2-t18">
<p>Get boolean value of XPath object.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r7c1-t18" headers="r1c1-t18">
<p><a href="#Xmlxvmgetobjectnsetnode">XmlXvmGetObjectNSetNode()</a></p>
</td>
<td class="cellalignment2922" headers="r7c1-t18 r1c2-t18">
<p>Get node from nodeset type XPathobject.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r8c1-t18" headers="r1c1-t18">
<p><a href="#Xmlxvmgetobjectnsetnum">XmlXvmGetObjectNSetNum()</a></p>
</td>
<td class="cellalignment2922" headers="r8c1-t18 r1c2-t18">
<p>Get number of nodes in nodeset type XPathobject.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r9c1-t18" headers="r1c1-t18">
<p><a href="#Xmlxvmgetobjectnumber">XmlXvmGetObjectNumber()</a></p>
</td>
<td class="cellalignment2922" headers="r9c1-t18 r1c2-t18">
<p>Get number from XPath object.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r10c1-t18" headers="r1c1-t18">
<p><a href="#Xmlxvmgetobjectstring">XmlXvmGetObjectString()</a></p>
</td>
<td class="cellalignment2922" headers="r10c1-t18 r1c2-t18">
<p>Get string from XPath object.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r11c1-t18" headers="r1c1-t18">
<p><a href="#Xmlxvmgetobjecttype">XmlXvmGetObjectType()</a></p>
</td>
<td class="cellalignment2922" headers="r11c1-t18 r1c2-t18">
<p>Get XPath object type.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r12c1-t18" headers="r1c1-t18">
<p><a href="#Xmlxvmgetoutputdom">XmlXvmGetOutputDom()</a></p>
</td>
<td class="cellalignment2922" headers="r12c1-t18 r1c2-t18">
<p>Returns the output DOM.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r13c1-t18" headers="r1c1-t18">
<p><a href="#Xmlxvmresetparams">XmlXvmResetParams()</a></p>
</td>
<td class="cellalignment2922" headers="r13c1-t18 r1c2-t18">
<p>Resets the stylesheet top level text parameters.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r14c1-t18" headers="r1c1-t18">
<p><a href="#Xmlxvmsetbaseuri">XmlXvmSetBaseURI()</a></p>
</td>
<td class="cellalignment2922" headers="r14c1-t18 r1c2-t18">
<p>Sets the base URI for the XLTVM.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r15c1-t18" headers="r1c1-t18">
<p><a href="#Xmlxvmsetbytecodebuffer">XmlXvmSetBytecodeBuffer()</a></p>
</td>
<td class="cellalignment2922" headers="r15c1-t18 r1c2-t18">
<p>Set the compiled bytecode.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r16c1-t18" headers="r1c1-t18">
<p><a href="#Xmlxvmsetbytecodefile">XmlXvmSetBytecodeFile()</a></p>
</td>
<td class="cellalignment2922" headers="r16c1-t18 r1c2-t18">
<p>Set the compiled byte code from file.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r17c1-t18" headers="r1c1-t18">
<p><a href="#Xmlxvmsetbytecodeuri">XmlXvmSetBytecodeURI()</a></p>
</td>
<td class="cellalignment2922" headers="r17c1-t18 r1c2-t18">
<p>Set the compiled bytecode.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r18c1-t18" headers="r1c1-t18">
<p><a href="#Xmlxvmsetdebugfunc">XmlXvmSetDebugFunc()</a></p>
</td>
<td class="cellalignment2922" headers="r18c1-t18 r1c2-t18">
<p>Set a callback function for debugging.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r19c1-t18" headers="r1c1-t18">
<p><a href="#Xmlxvmsetoutputdom">XmlXvmSetOutputDom()</a></p>
</td>
<td class="cellalignment2922" headers="r19c1-t18 r1c2-t18">
<p>Sets the XSLTVM to output document node.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r20c1-t18" headers="r1c1-t18">
<p><a href="#Xmlxvmsetoutputencoding">XmlXvmSetOutputEncoding()</a></p>
</td>
<td class="cellalignment2922" headers="r20c1-t18 r1c2-t18">
<p>Sets the encoding for the XSLTVM output.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r21c1-t18" headers="r1c1-t18">
<p><a href="#Xmlxvmsetoutputsax">XmlXvmSetOutputSax()</a></p>
</td>
<td class="cellalignment2922" headers="r21c1-t18 r1c2-t18">
<p>Sets XSLTVM to output SAX.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r22c1-t18" headers="r1c1-t18">
<p><a href="#Xmlxvmsetoutputstream">XmlXvmSetOutputStream()</a></p>
</td>
<td class="cellalignment2922" headers="r22c1-t18 r1c2-t18">
<p>Set the XSLTVM output to a user-defined stream.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r23c1-t18" headers="r1c1-t18">
<p><a href="#Xmlxvmsettextparam">XmlXvmSetTextParam()</a></p>
</td>
<td class="cellalignment2922" headers="r23c1-t18 r1c2-t18">
<p>Set the stylesheet top-level text parameter.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r24c1-t18" headers="r1c1-t18">
<p><a href="#Xmlxvmtransformbuffer">XmlXvmTransformBuffer()</a></p>
</td>
<td class="cellalignment2922" headers="r24c1-t18 r1c2-t18">
<p>Run compiled XSLT stylesheet on XML document in memory.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r25c1-t18" headers="r1c1-t18">
<p><a href="#Xmlxvmtransformdom">XmlXvmTransformDom()</a></p>
</td>
<td class="cellalignment2922" headers="r25c1-t18 r1c2-t18">
<p>Run compiled XSLT stylesheet on XML document as DOM.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r26c1-t18" headers="r1c1-t18">
<p><a href="#Xmlxvmtransformfile">XmlXvmTransformFile()</a></p>
</td>
<td class="cellalignment2922" headers="r26c1-t18 r1c2-t18">
<p>Run compiled XSLT stylesheet on XML document in file.</p>
</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r27c1-t18" headers="r1c1-t18">
<p><a href="#Xmlxvmtransformuri">XmlXvmTransformURI()</a></p>
</td>
<td class="cellalignment2922" headers="r27c1-t18 r1c2-t18">
<p>Run compiled XSLT stylesheet on XML document from URI.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="CAXML6342" class="refsect2"><a id="CBBBIJDE"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1244"></a><a id="sthref1245"></a><a id="sthref1246"></a>XMLXVM_DEBUG_F()</h3>
<p>Debug callback function for XSLT VM.</p>
<p class="subhead1"><a id="CAXML6343"></a>Syntax</p>
<pre>#define XMLXVM_DEBUG_F(func, line, file, obj, n)
void func(
   ub2 line,
   oratext *file,
   xvmobj *obj,
   ub4 n)
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t19">Parameter</th>
<th class="cellalignment2921" id="r1c2-t19">In/Out</th>
<th class="cellalignment2921" id="r1c3-t19">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t19" headers="r1c1-t19">
<pre>line
</pre></td>
<td class="cellalignment2922" headers="r2c1-t19 r1c2-t19">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t19 r1c3-t19">source stylesheet line number</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t19" headers="r1c1-t19">
<pre>file
</pre></td>
<td class="cellalignment2922" headers="r3c1-t19 r1c2-t19">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t19 r1c3-t19">stylesheet filename</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t19" headers="r1c1-t19">
<pre>obj
</pre></td>
<td class="cellalignment2922" headers="r4c1-t19 r1c2-t19">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t19 r1c3-t19">current VM object</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t19" headers="r1c1-t19">
<pre>n
</pre></td>
<td class="cellalignment2922" headers="r5c1-t19 r1c2-t19">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t19 r1c3-t19">index of current node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmlxvmsetdebugfunc">XmlXvmSetDebugFunc()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML6344" class="refsect2"><a id="Xmlxvmcreate"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1247"></a><a id="sthref1248"></a><a id="sthref1249"></a>XmlXvmCreate()</h3>
<p>Create an XSLT virtual machine. Zero or more of the following XSLTVM properties could be set by using this API:</p>
<ul>
<li>
<p><code>&#34;VMStack&#34;, size</code> sets the size[Kbyte] of the main VM stack; default size is 4K.</p>
</li>
<li>
<p><code>&#34;NodeStack&#34;, size</code> sets the size[Kbyte] of the node-stack; default size is 16K.</p>
</li>
<li>
<p><code>&#34;StringStack&#34;, size</code> sets the size[Kbyte] of the string-stack; default size is 64K.</p>
</li>
</ul>
<p>If the stack size is not specified the default size is used. The explicit stack size setting is needed when XSLTVM terminates with &#34;Stack Overflow&#34; message or when smaller memory footprints are required.</p>
<p class="subhead1"><a id="CAXML6345"></a>Syntax</p>
<pre>xmlxvm *XmlXvmCreate(
   xmlctx *xctx, 
   <span class="italic">list</span>);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t21">Parameter</th>
<th class="cellalignment2921" id="r1c2-t21">In/Out</th>
<th class="cellalignment2921" id="r1c3-t21">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t21" headers="r1c1-t21">
<pre>xctx
</pre></td>
<td class="cellalignment2922" headers="r2c1-t21 r1c2-t21">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t21 r1c3-t21">XML context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t21" headers="r1c1-t21">
<pre><span class="italic">list</span>
</pre></td>
<td class="cellalignment2922" headers="r3c1-t21 r1c2-t21">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t21 r1c3-t21"><code>NULL</code>-terminated list of properties to set; can be empty</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6346"></a>Returns</p>
<p><code>(xmlxvm *)</code> XSLT virtual machine object, or <code>NULL</code> on error</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmlxvmdestroy">XmlXvmDestroy()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML6347" class="refsect2"><a id="Xmlxvmdestroy"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1250"></a><a id="sthref1251"></a><a id="sthref1252"></a>XmlXvmDestroy()</h3>
<p>Destroys an XSLT virtual machine</p>
<p class="subhead1"><a id="CAXML6348"></a>Syntax</p>
<pre>void XmlXvmDestroy(
   xmlxvm *vm);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t23">Parameter</th>
<th class="cellalignment2921" id="r1c2-t23">In/Out</th>
<th class="cellalignment2921" id="r1c3-t23">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t23" headers="r1c1-t23">
<pre>vm
</pre></td>
<td class="cellalignment2922" headers="r2c1-t23 r1c2-t23">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t23 r1c3-t23">VM object</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmlxvmcreate">XmlXvmCreate()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML6349" class="refsect2"><a id="Xmlxvmevaluatexpath"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1253"></a><a id="sthref1254"></a><a id="sthref1255"></a>XmlXvmEvaluateXPath()</h3>
<p>Evaluate already-compiled XPath expression</p>
<p class="subhead1"><a id="CAXML6350"></a>Syntax</p>
<pre>xvmobj *XmlXvmEvaluateXPath(
   xmlxvm *vm, 
   ub2 *bytecode, 
   ub4 ctxpos,
   ub4 ctxsize,
   xmlnode *ctxnode);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t25">Parameter</th>
<th class="cellalignment2921" id="r1c2-t25">In/Out</th>
<th class="cellalignment2921" id="r1c3-t25">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t25" headers="r1c1-t25">
<pre>vm
</pre></td>
<td class="cellalignment2922" headers="r2c1-t25 r1c2-t25">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t25 r1c3-t25">XSLTVM object</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t25" headers="r1c1-t25">
<pre>bytecode
</pre></td>
<td class="cellalignment2922" headers="r3c1-t25 r1c2-t25">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t25 r1c3-t25">XPath expression bytecode</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t25" headers="r1c1-t25">
<pre>ctxpos
</pre></td>
<td class="cellalignment2922" headers="r4c1-t25 r1c2-t25">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t25 r1c3-t25">current context position</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t25" headers="r1c1-t25">
<pre>ctxsize
</pre></td>
<td class="cellalignment2922" headers="r5c1-t25 r1c2-t25">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t25 r1c3-t25">current context size</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r6c1-t25" headers="r1c1-t25">
<pre>ctxnode
</pre></td>
<td class="cellalignment2922" headers="r6c1-t25 r1c2-t25">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r6c1-t25 r1c3-t25">current context node</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6351"></a>Returns</p>
<p><code>(xvmobj *)</code> XPath object</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML6352" class="refsect2"><a id="Xmlxvmgetobjectboolean"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1256"></a><a id="sthref1257"></a><a id="sthref1258"></a>XmlXvmGetObjectBoolean()</h3>
<p>Get boolean value of XPath object</p>
<p class="subhead1"><a id="CAXML6353"></a>Syntax</p>
<pre>boolean XmlXvmGetObjectBoolean(
   xvmobj *obj);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t26">Parameter</th>
<th class="cellalignment2921" id="r1c2-t26">In/Out</th>
<th class="cellalignment2921" id="r1c3-t26">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t26" headers="r1c1-t26">
<pre>obj
</pre></td>
<td class="cellalignment2922" headers="r2c1-t26 r1c2-t26">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t26 r1c3-t26">object</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6354"></a>Returns</p>
<p><code>(boolean)</code> value of an XPath object</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmlxvmgetobjecttype">XmlXvmGetObjectType()</a>, <a href="#Xmlxvmgetobjectnsetnum">XmlXvmGetObjectNSetNum()</a>, <a href="#Xmlxvmgetobjectnsetnode">XmlXvmGetObjectNSetNode()</a>, <a href="#Xmlxvmgetobjectnumber">XmlXvmGetObjectNumber()</a>, <a href="#Xmlxvmgetobjectboolean">XmlXvmGetObjectBoolean()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML6355" class="refsect2"><a id="Xmlxvmgetobjectnsetnode"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1259"></a><a id="sthref1260"></a><a id="sthref1261"></a>XmlXvmGetObjectNSetNode()</h3>
<p>Get node from nodeset-type XPath object</p>
<p class="subhead1"><a id="CAXML6356"></a>Syntax</p>
<pre>xmlnode *XmlXvmGetObjectNSetNode(
   xvmobj *obj,
   ub4 i);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t28">Parameter</th>
<th class="cellalignment2921" id="r1c2-t28">In/Out</th>
<th class="cellalignment2921" id="r1c3-t28">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t28" headers="r1c1-t28">
<pre>obj
</pre></td>
<td class="cellalignment2922" headers="r2c1-t28 r1c2-t28">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t28 r1c3-t28">object</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t28" headers="r1c1-t28">
<pre>i
</pre></td>
<td class="cellalignment2922" headers="r3c1-t28 r1c2-t28">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t28 r1c3-t28">node index in nodeset</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6357"></a>Returns</p>
<p><code>(xmlnode *)</code> The object type or values.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmlxvmgetobjecttype">XmlXvmGetObjectType()</a>, <a href="#Xmlxvmgetobjectnsetnum">XmlXvmGetObjectNSetNum()</a>, <a href="#Xmlxvmgetobjectstring">XmlXvmGetObjectString()</a>, <a href="#Xmlxvmgetobjectnumber">XmlXvmGetObjectNumber()</a>, <a href="#Xmlxvmgetobjectboolean">XmlXvmGetObjectBoolean()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML6358" class="refsect2"><a id="Xmlxvmgetobjectnsetnum"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1262"></a><a id="sthref1263"></a><a id="sthref1264"></a>XmlXvmGetObjectNSetNum()</h3>
<p>Get number of nodes in nodeset-type XPath object</p>
<p class="subhead1"><a id="CAXML6359"></a>Syntax</p>
<pre>ub4 XmlXvmGetObjectNSetNum(
   xvmobj *obj);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t30">Parameter</th>
<th class="cellalignment2921" id="r1c2-t30">In/Out</th>
<th class="cellalignment2921" id="r1c3-t30">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t30" headers="r1c1-t30">
<pre>obj
</pre></td>
<td class="cellalignment2922" headers="r2c1-t30 r1c2-t30">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t30 r1c3-t30">object</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6360"></a>Returns</p>
<p><code>(ub4)</code> number of nodes in nodeset</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmlxvmgetobjecttype">XmlXvmGetObjectType()</a>, <a href="#Xmlxvmgetobjectnsetnode">XmlXvmGetObjectNSetNode()</a>, <a href="#Xmlxvmgetobjectstring">XmlXvmGetObjectString()</a>, <a href="#Xmlxvmgetobjectnumber">XmlXvmGetObjectNumber()</a>, <a href="#Xmlxvmgetobjectboolean">XmlXvmGetObjectBoolean()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML6361" class="refsect2"><a id="Xmlxvmgetobjectnumber"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1265"></a><a id="sthref1266"></a><a id="sthref1267"></a>XmlXvmGetObjectNumber()</h3>
<p>Get number from XPath object.</p>
<p class="subhead1"><a id="CAXML6362"></a>Syntax</p>
<pre>double XmlXvmGetObjectNumber(
   xvmobj *obj);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t32">Parameter</th>
<th class="cellalignment2921" id="r1c2-t32">In/Out</th>
<th class="cellalignment2921" id="r1c3-t32">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t32" headers="r1c1-t32">
<pre>obj
</pre></td>
<td class="cellalignment2922" headers="r2c1-t32 r1c2-t32">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t32 r1c3-t32">object</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6363"></a>Returns</p>
<p><code>(double)</code> number</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmlxvmgetobjecttype">XmlXvmGetObjectType()</a>, <a href="#Xmlxvmgetobjectnsetnum">XmlXvmGetObjectNSetNum()</a>, <a href="#Xmlxvmgetobjectnsetnode">XmlXvmGetObjectNSetNode()</a>, <a href="#Xmlxvmgetobjectstring">XmlXvmGetObjectString()</a>, <a href="#Xmlxvmgetobjectboolean">XmlXvmGetObjectBoolean()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML6364" class="refsect2"><a id="Xmlxvmgetobjectstring"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1268"></a><a id="sthref1269"></a><a id="sthref1270"></a>XmlXvmGetObjectString()</h3>
<p>Get string from XPath object.</p>
<p class="subhead1"><a id="CAXML6365"></a>Syntax</p>
<pre>oratext *XmlXvmGetObjectString(
   xvmobj *obj);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t34">Parameter</th>
<th class="cellalignment2921" id="r1c2-t34">In/Out</th>
<th class="cellalignment2921" id="r1c3-t34">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t34" headers="r1c1-t34">
<pre>obj
</pre></td>
<td class="cellalignment2922" headers="r2c1-t34 r1c2-t34">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t34 r1c3-t34">object</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6366"></a>Returns</p>
<p><code>(oratext *)</code> string</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmlxvmgetobjecttype">XmlXvmGetObjectType()</a>, <a href="#Xmlxvmgetobjectnsetnum">XmlXvmGetObjectNSetNum()</a>, <a href="#Xmlxvmgetobjectnsetnode">XmlXvmGetObjectNSetNode()</a>, <a href="#Xmlxvmgetobjectnumber">XmlXvmGetObjectNumber()</a>, <a href="#Xmlxvmgetobjectboolean">XmlXvmGetObjectBoolean()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML6367" class="refsect2"><a id="Xmlxvmgetobjecttype"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1271"></a><a id="sthref1272"></a><a id="sthref1273"></a>XmlXvmGetObjectType()</h3>
<p>Get XPath object type</p>
<p class="subhead1"><a id="CAXML6368"></a>Syntax</p>
<pre>xmlxvmobjtype XmlXvmGetObjectType(
   xvmobj *obj);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t36">Parameter</th>
<th class="cellalignment2921" id="r1c2-t36">In/Out</th>
<th class="cellalignment2921" id="r1c3-t36">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t36" headers="r1c1-t36">
<pre>obj
</pre></td>
<td class="cellalignment2922" headers="r2c1-t36 r1c2-t36">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t36 r1c3-t36">object</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6369"></a>Returns</p>
<p><code>(xmlxvmobjtype)</code> type-code for object</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmlxvmgetobjectnsetnum">XmlXvmGetObjectNSetNum()</a>, <a href="#Xmlxvmgetobjectnsetnode">XmlXvmGetObjectNSetNode()</a>, <a href="#Xmlxvmgetobjectstring">XmlXvmGetObjectString()</a>, <a href="#Xmlxvmgetobjectnumber">XmlXvmGetObjectNumber()</a>, <a href="#Xmlxvmgetobjectboolean">XmlXvmGetObjectBoolean()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML6370" class="refsect2"><a id="Xmlxvmgetoutputdom"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1274"></a><a id="sthref1275"></a><a id="sthref1276"></a>XmlXvmGetOutputDom()</h3>
<p>Returns the root node of the result DOM tree (if any). <code>XmlXvmSetOutputDom</code> has to be used before transformation to set the VM to output a DOM tree (the default VM output is a stream).</p>
<p class="subhead1"><a id="CAXML6371"></a>Syntax</p>
<pre>xmlfragnode *XmlXvmGetOutputDom(
   xmlxvm *vm);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t38">Parameter</th>
<th class="cellalignment2921" id="r1c2-t38">In/Out</th>
<th class="cellalignment2921" id="r1c3-t38">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t38" headers="r1c1-t38">
<pre>vm
</pre></td>
<td class="cellalignment2922" headers="r2c1-t38 r1c2-t38">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t38 r1c3-t38">VM object</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6372"></a>Returns</p>
<p><code>(xmlfragnode *)</code> output DOM, or <code>NULL</code> in a case of SAX or Stream output.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmlxvmsetoutputdom">XmlXvmSetOutputDom()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML6373" class="refsect2"><a id="Xmlxvmresetparams"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1277"></a><a id="sthref1278"></a><a id="sthref1279"></a>XmlXvmResetParams()</h3>
<p>Resets the stylesheet top-level parameters with their default values.</p>
<p class="subhead1"><a id="CAXML6374"></a>Syntax</p>
<pre>void XmlXvmResetParams(
   xmlxvm *vm);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t40">Parameter</th>
<th class="cellalignment2921" id="r1c2-t40">In/Out</th>
<th class="cellalignment2921" id="r1c3-t40">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t40" headers="r1c1-t40">
<pre>vm
</pre></td>
<td class="cellalignment2922" headers="r2c1-t40 r1c2-t40">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t40 r1c3-t40">VM object</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect2" -->
<div id="CAXML6375" class="refsect2"><a id="Xmlxvmsetbaseuri"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1280"></a><a id="sthref1281"></a><a id="sthref1282"></a>XmlXvmSetBaseURI()</h3>
<p>Sets the base URI for the XSLTVM. The baseuri is used by VM to the compose the path XML documents to be loaded for transformation using <code>document</code> or <code>XmlXvmTransformFile</code>.</p>
<p class="subhead1"><a id="CAXML6376"></a>Syntax</p>
<pre>xmlerr XmlXvmSetBaseURI(
   xmlxvm *vm, 
   oratext *baseuri);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t41">Parameter</th>
<th class="cellalignment2921" id="r1c2-t41">In/Out</th>
<th class="cellalignment2921" id="r1c3-t41">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t41" headers="r1c1-t41">
<pre>vm
</pre></td>
<td class="cellalignment2922" headers="r2c1-t41 r1c2-t41">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t41 r1c3-t41">VM object</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t41" headers="r1c1-t41">
<pre>baseuri
</pre></td>
<td class="cellalignment2922" headers="r3c1-t41 r1c2-t41">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t41 r1c3-t41">VM base URI for reading and writing documents</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6377"></a>Returns</p>
<p><code>(xmlerr)</code> error code.</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML6378" class="refsect2"><a id="Xmlxvmsetbytecodebuffer"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1283"></a><a id="sthref1284"></a><a id="sthref1285"></a>XmlXvmSetBytecodeBuffer()</h3>
<p>Set the compiled bytecode from buffer. Any previously set bytecode is replaced. An XML transformation can&#39;t be performed if the stylesheet bytecode is not set. The VM doesn&#39;t copy the bytecode into internal buffer, hence the it shouldn&#39;t be freed before VM finishes using it.</p>
<p class="subhead1"><a id="CAXML6379"></a>Syntax</p>
<pre>xmlerr XmlXvmSetBytecodeBuffer(
   xmlxvm *vm, 
   ub2 *buffer, 
   size_t buflen);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t42">Parameter</th>
<th class="cellalignment2921" id="r1c2-t42">In/Out</th>
<th class="cellalignment2921" id="r1c3-t42">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t42" headers="r1c1-t42">
<pre>vm
</pre></td>
<td class="cellalignment2922" headers="r2c1-t42 r1c2-t42">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t42 r1c3-t42">XSLT VM context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t42" headers="r1c1-t42">
<pre>buffer
</pre></td>
<td class="cellalignment2922" headers="r3c1-t42 r1c2-t42">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t42 r1c3-t42">user&#39;s buffer</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t42" headers="r1c1-t42">
<pre>buflen
</pre></td>
<td class="cellalignment2922" headers="r4c1-t42 r1c2-t42">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t42 r1c3-t42">size of buffer, in bytes</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6380"></a>Returns</p>
<p><code>(xmlerr)</code> numeric error code, <code>XMLERR_OK [0]</code> on success</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmlxvmsetbytecodefile">XmlXvmSetBytecodeFile()</a>, <a href="#Xmlxvmsetbytecodeuri">XmlXvmSetBytecodeURI()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML6381" class="refsect2"><a id="Xmlxvmsetbytecodefile"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1286"></a><a id="sthref1287"></a><a id="sthref1288"></a>XmlXvmSetBytecodeFile()</h3>
<p>Set the compiled bytecode from file. Any previously set bytecode is replaced. An XML transformation can&#39;t be performed if the stylesheet bytecode is not set.</p>
<p class="subhead1"><a id="CAXML6382"></a>Syntax</p>
<pre>xmlerr XmlXvmSetBytecodeFile(
   xmlxvm *vm,
   oratext *path);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t44">Parameter</th>
<th class="cellalignment2921" id="r1c2-t44">In/Out</th>
<th class="cellalignment2921" id="r1c3-t44">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t44" headers="r1c1-t44">
<pre>vm
</pre></td>
<td class="cellalignment2922" headers="r2c1-t44 r1c2-t44">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t44 r1c3-t44">XSLT VM context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t44" headers="r1c1-t44">
<pre>path
</pre></td>
<td class="cellalignment2922" headers="r3c1-t44 r1c2-t44">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t44 r1c3-t44">path of bytecode file</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6383"></a>Returns</p>
<p><code>(xmlerr)</code> numeric error code, <code>XMLERR_OK [0]</code> on success</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmlxvmsetbytecodeuri">XmlXvmSetBytecodeURI()</a>, <a href="#Xmlxvmsetbytecodebuffer">XmlXvmSetBytecodeBuffer()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML6384" class="refsect2"><a id="Xmlxvmsetbytecodeuri"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1289"></a><a id="sthref1290"></a><a id="sthref1291"></a>XmlXvmSetBytecodeURI()</h3>
<p>Set the compiled bytecode from URI. Any previously set bytecode is replaced. An XML transformation can&#39;t be performed if the stylesheet bytecode is not set.</p>
<p class="subhead1"><a id="CAXML6385"></a>Syntax</p>
<pre>xmlerr XmlXvmSetBytecodeURI(
   xmlxvm *vm,
   oratext *uri);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t46">Parameter</th>
<th class="cellalignment2921" id="r1c2-t46">In/Out</th>
<th class="cellalignment2921" id="r1c3-t46">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t46" headers="r1c1-t46">
<pre>vm
</pre></td>
<td class="cellalignment2922" headers="r2c1-t46 r1c2-t46">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t46 r1c3-t46">XSLT VM context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t46" headers="r1c1-t46">
<pre>uri
</pre></td>
<td class="cellalignment2922" headers="r3c1-t46 r1c2-t46">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t46 r1c3-t46">path of bytecode file</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6386"></a>Returns</p>
<p><code>(xmlerr)</code> numeric error code, <code>XMLERR_OK [0]</code> on success</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmlxvmsetbytecodefile">XmlXvmSetBytecodeFile()</a>, <a href="#Xmlxvmsetbytecodebuffer">XmlXvmSetBytecodeBuffer()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML6387" class="refsect2"><a id="Xmlxvmsetdebugfunc"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1292"></a><a id="sthref1293"></a><a id="sthref1294"></a>XmlXvmSetDebugFunc()</h3>
<p>The user callback function is invoked by VM every time the execution reaches a new line in the XSLT stylesheet. The VM passes to the user the stylesheet file name, the line number, the current context nodes-set and the current node index in the node-set. IMPORTANT - the stylesheet has to be compiled with flag <code>XMLXVM_DEBUG</code>.</p>
<p class="subhead1"><a id="CAXML6388"></a>Syntax</p>
<pre>#define XMLXVM_DEBUG_FUNC(func)
void func (ub2 line, oratext *filename, xvmobj *obj, ub4 n)
xmlerr XmlXvmSetDebugFunc(
   xmlxvm *vm,
   XMLXVM_DEBUG_FUNC(debugcallback));
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t48">Parameter</th>
<th class="cellalignment2921" id="r1c2-t48">In/Out</th>
<th class="cellalignment2921" id="r1c3-t48">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t48" headers="r1c1-t48">
<pre>vm
</pre></td>
<td class="cellalignment2922" headers="r2c1-t48 r1c2-t48">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t48 r1c3-t48">XSLT VM context</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t48" headers="r1c1-t48">
<pre>func
</pre></td>
<td class="cellalignment2922" headers="r3c1-t48 r1c2-t48">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t48 r1c3-t48">callback function</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6389"></a>Returns</p>
<p><code>(xmlerr)</code> numeric error code, <code>XMLERR_OK [0]</code> on success</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML6390" class="refsect2"><a id="Xmlxvmsetoutputdom"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1295"></a><a id="sthref1296"></a><a id="sthref1297"></a>XmlXvmSetOutputDom()</h3>
<p>Sets the XSLTVM to output DOM. If <code>xmldocnode==NULL</code>, then the result DOM tree belongs to the VM object and is deleted when a new transformation is performed or when the VM object is deleted. If the result DOM tree is to be used for longer period of time then an <code>xmldocnode</code> has to be created and set to the VM object.</p>
<p class="subhead1"><a id="CAXML6391"></a>Syntax</p>
<pre>xmlerr XmlXvmSetOutputDom(
   xmlxvm *vm,
   xmldocnode *doc);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t49">Parameter</th>
<th class="cellalignment2921" id="r1c2-t49">In/Out</th>
<th class="cellalignment2921" id="r1c3-t49">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t49" headers="r1c1-t49">
<pre>vm
</pre></td>
<td class="cellalignment2922" headers="r2c1-t49 r1c2-t49">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t49 r1c3-t49">VM object</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t49" headers="r1c1-t49">
<pre>doc
</pre></td>
<td class="cellalignment2922" headers="r3c1-t49 r1c2-t49">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t49 r1c3-t49">empty document</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6392"></a>Returns</p>
<p><code>(xmlerr)</code> error code</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML6393" class="refsect2"><a id="Xmlxvmsetoutputencoding"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1298"></a><a id="sthref1299"></a><a id="sthref1300"></a>XmlXvmSetOutputEncoding()</h3>
<p>Sets the encoding for the XSLTVM stream output. If the input (data) encoding is different from the one set by this APIs then encoding conversion is performed. This APIs overrides the encoding set in the XSLT stylesheet (if any).</p>
<p class="subhead1"><a id="CAXML6394"></a>Syntax</p>
<pre>xmlerr XmlXvmSetOutputEncoding(
   xmlxvm *vm, 
   oratext *encoding);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t50">Parameter</th>
<th class="cellalignment2921" id="r1c2-t50">In/Out</th>
<th class="cellalignment2921" id="r1c3-t50">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t50" headers="r1c1-t50">
<pre>vm
</pre></td>
<td class="cellalignment2922" headers="r2c1-t50 r1c2-t50">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t50 r1c3-t50">VM object</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t50" headers="r1c1-t50">
<pre>encoding
</pre></td>
<td class="cellalignment2922" headers="r3c1-t50 r1c2-t50">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t50 r1c3-t50">output encoding</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6395"></a>Returns</p>
<p><code>(xmlerr)</code> error code.</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML6396" class="refsect2"><a id="Xmlxvmsetoutputsax"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1301"></a><a id="sthref1302"></a><a id="sthref1303"></a>XmlXvmSetOutputSax()</h3>
<p>Set XSLTVM to output SAX. If the SAX callback interface object is provided the VM outputs the result document in a form of SAX events using the user specified callback functions.</p>
<p class="subhead1"><a id="CAXML6397"></a>Syntax</p>
<pre>xmlerr XmlXvmSetOutputSax(
   xmlxvm *vm,
   xmlsaxcb *saxcb, 
   void *saxctx);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t51">Parameter</th>
<th class="cellalignment2921" id="r1c2-t51">In/Out</th>
<th class="cellalignment2921" id="r1c3-t51">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t51" headers="r1c1-t51">
<pre>vm
</pre></td>
<td class="cellalignment2922" headers="r2c1-t51 r1c2-t51">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t51 r1c3-t51">VM object</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t51" headers="r1c1-t51">
<pre>saxcb
</pre></td>
<td class="cellalignment2922" headers="r3c1-t51 r1c2-t51">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t51 r1c3-t51">SAX callback object</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t51" headers="r1c1-t51">
<pre>saxctx
</pre></td>
<td class="cellalignment2922" headers="r4c1-t51 r1c2-t51">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t51 r1c3-t51">SAX context</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6398"></a>Returns</p>
<p><code>(xmlerr)</code> error code</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML6399" class="refsect2"><a id="Xmlxvmsetoutputstream"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1304"></a><a id="sthref1305"></a><a id="sthref1306"></a>XmlXvmSetOutputStream()</h3>
<p>Set the XSLTVM output to a user-defined stream. The default XSLTVM output is a stream. This APIs overrides the default stream with user specified APIs for writing.</p>
<p class="subhead1"><a id="CAXML6400"></a>Syntax</p>
<pre>xmlerr XmlXvmSetOutputStream(
   xmlxvm *vm,
   xmlostream *ostream);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t52">Parameter</th>
<th class="cellalignment2921" id="r1c2-t52">In/Out</th>
<th class="cellalignment2921" id="r1c3-t52">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t52" headers="r1c1-t52">
<pre>vm
</pre></td>
<td class="cellalignment2922" headers="r2c1-t52 r1c2-t52">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t52 r1c3-t52">VM object</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t52" headers="r1c1-t52">
<pre>ostream
</pre></td>
<td class="cellalignment2922" headers="r3c1-t52 r1c2-t52">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t52 r1c3-t52">stream object</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6401"></a>Returns</p>
<p><code>(xmlerr)</code> error code.</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML6402" class="refsect2"><a id="Xmlxvmsettextparam"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1307"></a><a id="sthref1308"></a><a id="sthref1309"></a>XmlXvmSetTextParam()</h3>
<p>Set the stylesheet top-level text parameter. The parameter value set in the XSLT stylesheet is overwritten. Since the top-level parameters are reset with stylesheet values after each transformation, this APIs has to be called again.</p>
<p class="subhead1"><a id="CAXML6403"></a>Syntax</p>
<pre>xmlerr XmlXvmSetTextParam(
   xmlxvm *vm,
   oratext *name,
   oratext *value);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t53">Parameter</th>
<th class="cellalignment2921" id="r1c2-t53">In/Out</th>
<th class="cellalignment2921" id="r1c3-t53">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t53" headers="r1c1-t53">
<pre>vm
</pre></td>
<td class="cellalignment2922" headers="r2c1-t53 r1c2-t53">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t53 r1c3-t53">VM object</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t53" headers="r1c1-t53">
<pre>name
</pre></td>
<td class="cellalignment2922" headers="r3c1-t53 r1c2-t53">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t53 r1c3-t53">name of top-level parameter</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t53" headers="r1c1-t53">
<pre>value
</pre></td>
<td class="cellalignment2922" headers="r4c1-t53 r1c2-t53">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t53 r1c3-t53">value of top-level parameter</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6404"></a>Returns</p>
<p><code>(xmlerr)</code> error code, <code>XMLERR_SUCC [0]</code> on success.</p>
</div>
<!-- class="refsect2" -->
<div id="CAXML6405" class="refsect2"><a id="Xmlxvmtransformbuffer"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1310"></a><a id="sthref1311"></a><a id="sthref1312"></a>XmlXvmTransformBuffer()</h3>
<p>Run compiled XSLT stylesheet on XML document in memory. The compiled XSLT stylesheet (bytecode) should be set using <code>XmlXvmSetBytecodeXXX</code> prior to this call.</p>
<p class="subhead1"><a id="CAXML6406"></a>Syntax</p>
<pre>xmlerr XmlXvmTransformBuffer(
   xmlxvm *vm,
   oratext *buffer,
   ub4 length,
   oratext *baseURI);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t54">Parameter</th>
<th class="cellalignment2921" id="r1c2-t54">In/Out</th>
<th class="cellalignment2921" id="r1c3-t54">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t54" headers="r1c1-t54">
<pre>vm
</pre></td>
<td class="cellalignment2922" headers="r2c1-t54 r1c2-t54">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t54 r1c3-t54">VM object</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t54" headers="r1c1-t54">
<pre>buffer
</pre></td>
<td class="cellalignment2922" headers="r3c1-t54 r1c2-t54">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t54 r1c3-t54"><code>NULL</code>-terminated buffer that contains the XML document</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t54" headers="r1c1-t54">
<pre>length
</pre></td>
<td class="cellalignment2922" headers="r4c1-t54 r1c2-t54">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t54 r1c3-t54">length of the XML document</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r5c1-t54" headers="r1c1-t54">
<pre>baseURI
</pre></td>
<td class="cellalignment2922" headers="r5c1-t54 r1c2-t54">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r5c1-t54 r1c3-t54">base URI of XML document</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6407"></a>Returns</p>
<p><code>(xmlerr)</code> error code.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmlxvmtransformfile">XmlXvmTransformFile()</a>, <a href="#Xmlxvmtransformuri">XmlXvmTransformURI()</a>, <a href="#Xmlxvmtransformdom">XmlXvmTransformDom()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML6408" class="refsect2"><a id="Xmlxvmtransformdom"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1313"></a><a id="sthref1314"></a><a id="sthref1315"></a>XmlXvmTransformDom()</h3>
<p>Run compiled XSLT stylesheet on XML document as DOM. The compiled XSLT stylesheet (bytecode) should be set using <code>XmlXvmSetBytecodeXXX</code> prior to this call.</p>
<p class="subhead1"><a id="CAXML6409"></a>Syntax</p>
<pre>xmlerr XmlXvmTransformDom(
   xmlxvm *vm,
   xmldocnode *root);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t56">Parameter</th>
<th class="cellalignment2921" id="r1c2-t56">In/Out</th>
<th class="cellalignment2921" id="r1c3-t56">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t56" headers="r1c1-t56">
<pre>vm
</pre></td>
<td class="cellalignment2922" headers="r2c1-t56 r1c2-t56">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t56 r1c3-t56">VM object</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t56" headers="r1c1-t56">
<pre>root
</pre></td>
<td class="cellalignment2922" headers="r3c1-t56 r1c2-t56">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t56 r1c3-t56">root element of XML document&#39;s DOM</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6410"></a>Returns</p>
<p><code>(xmlerr)</code> error code.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmlxvmtransformfile">XmlXvmTransformFile()</a>, <a href="#Xmlxvmtransformuri">XmlXvmTransformURI()</a>, <a href="#Xmlxvmtransformbuffer">XmlXvmTransformBuffer()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML6411" class="refsect2"><a id="Xmlxvmtransformfile"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1316"></a><a id="sthref1317"></a><a id="sthref1318"></a>XmlXvmTransformFile()</h3>
<p>Run compiled XSLT stylesheet on XML document in file. The compiled XSLT stylesheet (bytecode) should be set using <code>XmlXvmSetBytecodeXXX</code> prior to this call.</p>
<p class="subhead1"><a id="CAXML6412"></a>Syntax</p>
<pre>xmlerr XmlXvmTransformFile(
   xmlxvm *vm,
   oratext *path,
   oratext *baseURI);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t58">Parameter</th>
<th class="cellalignment2921" id="r1c2-t58">In/Out</th>
<th class="cellalignment2921" id="r1c3-t58">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t58" headers="r1c1-t58">
<pre>vm
</pre></td>
<td class="cellalignment2922" headers="r2c1-t58 r1c2-t58">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t58 r1c3-t58">VM object</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t58" headers="r1c1-t58">
<pre>path
</pre></td>
<td class="cellalignment2922" headers="r3c1-t58 r1c2-t58">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t58 r1c3-t58">path of XML document to transform</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r4c1-t58" headers="r1c1-t58">
<pre>baseURI
</pre></td>
<td class="cellalignment2922" headers="r4c1-t58 r1c2-t58">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r4c1-t58 r1c3-t58">base URI of XML document</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6413"></a>Returns</p>
<p><code>(xmlerr)</code> error code</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmlxvmtransformuri">XmlXvmTransformURI()</a>, <a href="#Xmlxvmtransformbuffer">XmlXvmTransformBuffer()</a>, <a href="#Xmlxvmtransformdom">XmlXvmTransformDom()</a></div>
</div>
<!-- class="refsect2" -->
<div id="CAXML6414" class="refsect2"><a id="Xmlxvmtransformuri"></a>
<hr/>
<h3 class="refsect2"><a id="sthref1319"></a><a id="sthref1320"></a><a id="sthref1321"></a>XmlXvmTransformURI()</h3>
<p>Run compiled XSLT stylesheet on XML document from URI. The compiled XSLT stylesheet (bytecode) should be set using <code>XmlXvmSetBytecodeXXX</code> prior to this call.</p>
<p class="subhead1"><a id="CAXML6415"></a>Syntax</p>
<pre>xmlerr XmlXvmTransformURI(
   xmlxvm *vm, 
   oratext *uri);
</pre>
<div class="inftblinformal">
<table class="cellalignment2923" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment2914">
<th class="cellalignment2921" id="r1c1-t60">Parameter</th>
<th class="cellalignment2921" id="r1c2-t60">In/Out</th>
<th class="cellalignment2921" id="r1c3-t60">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r2c1-t60" headers="r1c1-t60">
<pre>vm
</pre></td>
<td class="cellalignment2922" headers="r2c1-t60 r1c2-t60">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r2c1-t60 r1c3-t60">VM object</td>
</tr>
<tr class="cellalignment2914">
<td class="cellalignment2922" id="r3c1-t60" headers="r1c1-t60">
<pre>uri
</pre></td>
<td class="cellalignment2922" headers="r3c1-t60 r1c2-t60">
<pre>IN
</pre></td>
<td class="cellalignment2922" headers="r3c1-t60 r1c3-t60">URI of XML document to transform</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6416"></a>Returns</p>
<p><code>(xmlerr)</code> error code.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmlxvmtransformfile">XmlXvmTransformFile()</a>, <a href="#Xmlxvmtransformbuffer">XmlXvmTransformBuffer()</a>, <a href="#Xmlxvmtransformdom">XmlXvmTransformDom()</a></div>
</div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2913">
<tr>
<td class="cellalignment2922">
<table class="cellalignment2918">
<tr>
<td class="cellalignment2917"><a href="xslt.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2917"><a href="appendix.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2925">
<table class="cellalignment2916">
<tr>
<td class="cellalignment2917"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2917"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2917"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2917"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2917"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2917"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>