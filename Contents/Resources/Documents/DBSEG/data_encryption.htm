<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-5278"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Manually%20Encrypting%20Data"></a><title>Manually Encrypting Data</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="description" content="You can use the DBMS_CRYPTO PL/SQL package to manually encrypt data."/>
<meta name="keywords" content="encryption, problems not solved by, access control, encryption, problems not solved by, security attacks, intruders, malicious database administrators, database administrators (DBAs), malicious, encryption not solved by, access, controlling, data security, problems not solved by, data security, challenges, indexed data, key generation, key transmission, key storage, files, keys, security risks, encryption keys, users managing, Transparent Data Encryption, about, transparent tablespace encryption, keys, changing, BLOBS, encrypting, BLOB, USERENV function, OFB ciphertext encryption mode, ECB ciphertext encryption mode, examples, encrypting procedure, DBMS_CRYPTO package, data encryption, encrypting and decrypting procedure with AES 256-Bit, encrypting and decrypting BLOB data, finding information about, views, encrypted data"/>
<meta name="dcterms.created" content="2017-06-05T11:20:26Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Security Guide"/>
<meta name="dcterms.identifier" content="E48135-19"/>
<meta name="dcterms.isVersionOf" content="DBSEG"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2006, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="tsdp.htm" title="Previous" type="text/html"/>
<link rel="Next" href="part_4.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E48135-19.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-B90F0869-1F69-45D9-A835-4985A19F7AB5"></a> <span id="PAGE" style="display:none;">20/44</span> <!-- End Header -->
<a id="DBSEG008"></a>
<h1 id="DBSEG-GUID-B90F0869-1F69-45D9-A835-4985A19F7AB5" class="sect1"><span class="enumeration_chapter">12</span> Manually Encrypting Data</h1>
<div>
<p>You can use the <code class="codeph">DBMS_CRYPTO</code> PL/SQL package to manually encrypt data.</p>
<p>Topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="data_encryption.htm#GUID-4E2F3704-CD79-4F60-AEEB-31FDA6F5124C" title="While there are many good reasons to encrypt data, there are many reasons not to encrypt data. Encryption does not solve all security problems, and may make some problems worse. There are some misconceptions about encryption of stored data.">Security Problems That Encryption Does Not Solve</a></p>
</li>
<li>
<p><a href="data_encryption.htm#GUID-069CA05C-54F6-4ED0-8BC2-746A1740D8AF" title="In cases where encryption can provide additional security, there are some associated technical challenges.">Data Encryption Challenges</a></p>
</li>
<li>
<p><a href="data_encryption.htm#GUID-1AE01705-7C92-443E-983E-D26CB5749EEE" title="The DBMS_CRYPTO package provides several ways to address security issues.">Data Encryption Storage with the DBMS_CRYPTO Package</a></p>
</li>
<li>
<p><a href="data_encryption.htm#GUID-40DE97DD-7CD5-486C-B9FB-959408BF6081" title="In Oracle Database Release 11g, ciphertexts configured to use output feedback (OFB) used electronic codebook (ECB) mode instead.">Using Ciphertexts Encrypted in OFB Mode in Oracle Database Release 11g</a></p>
</li>
<li>
<p><a href="data_encryption.htm#GUID-1A99FC75-E08B-46AA-BDB2-EDCCDBA714D1" title="Examples of using the data encryption API include using the DBMS_CRYPTO.SQL procedure, encrypting AES 256-bit data, and encrypting BLOB data.">Examples of Using the Data Encryption API</a></p>
</li>
<li>
<p><a href="data_encryption.htm#GUID-FE23ADE1-8140-4695-AC92-FE5085C16D6C" title="Oracle Database provides data dictionary views to find information about encrypted data.">Data Dictionary Views for Encrypted Data</a></p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-B90F0869-1F69-45D9-A835-4985A19F7AB5__GUID-89396AD8-4BAE-48FA-BE82-2E59961B3B41">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a class="olink TDPSG40045" target="_blank" href="../TDPSG/GUID-3EC7A894-D620-4497-AFB1-64EB8C33D854.htm#TDPSG40045"><span class="italic">Oracle Database 2 Day + Security Guide</span></a> for an introduction to network encryption</p>
</li>
<li>
<p><a class="olink ASOAG600" target="_blank" href="../ASOAG/asopart1.htm#ASOAG600"><span class="italic">Oracle Database Advanced Security Guide</span></a> for information about using Transparent Data Encryption and tablespace encryption</p>
</li>
</ul>
</div>
</div>
<a id="DBSEG80083"></a>
<div class="props_rev_3"><a id="GUID-4E2F3704-CD79-4F60-AEEB-31FDA6F5124C"></a>
<h2 id="DBSEG-GUID-4E2F3704-CD79-4F60-AEEB-31FDA6F5124C" class="sect2">Security Problems That Encryption Does Not Solve</h2>
<div>
<p>While there are many good reasons to encrypt data, there are many reasons not to encrypt data. Encryption does not solve all security problems, and may make some problems worse. There are some misconceptions about encryption of stored data.</p>
<p>Topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="data_encryption.htm#GUID-1A747F99-1E02-4D6D-A250-54482BC2A3A0" title="When you encrypt data, you should be aware that encryption must not interfere with how you configure access control.">Principle 1: Encryption Does Not Solve Access Control Problems</a></p>
</li>
<li>
<p><a href="data_encryption.htm#GUID-DE0FAE79-4C46-44F5-9E04-FB3DC8D11E9B" title="You can protect your databases against malicious database administrators by using other Oracle features, such as Oracle Database Vault.">Principle 2: Encryption Does Not Protect Against a Malicious Administrator</a></p>
</li>
<li>
<p><a href="data_encryption.htm#GUID-5EE3BC9E-1E46-4620-905D-5D7AAFF31D55" title="A common error is to think that if encrypting some data strengthens security, then encrypting everything makes all data secure.">Principle 3: Encrypting Everything Does Not Make Data Secure</a></p>
</li>
</ul>
</div>
<a id="DBSEG314"></a>
<div class="props_rev_3"><a id="GUID-1A747F99-1E02-4D6D-A250-54482BC2A3A0"></a>
<h3 id="DBSEG-GUID-1A747F99-1E02-4D6D-A250-54482BC2A3A0" class="sect3">Principle 1: Encryption Does Not Solve Access Control Problems</h3>
<div>
<p>When you encrypt data, you should be aware that encryption must not interfere with how you configure access control.</p>
<p>Most organizations must limit data access to users who need to see this data. For example, a human resources system may limit employees to viewing only their own employment records, while allowing managers of employees to see the employment records of subordinates. Human resource specialists may also need to see employee records for multiple employees.</p>
<p>Typically, you can use access control mechanisms to address security policies that limit data access to those with a need to see it. Oracle Database has provided strong, independently evaluated access control mechanisms for many years. It enables access control enforcement to a fine level of granularity through Virtual Private Database.</p>
<p>Because human resource records are considered sensitive information, it is tempting to think that all information should be encrypted for better security. However, encryption cannot enforce granular access control, and it may hinder data access. For example, an employee, his manager, and a human resources clerk may all need to access an employee record. If all employee data is encrypted, then all three must be able to access the data in unencrypted form. Therefore, the employee, the manager and the human resources clerk would have to share the same encryption key to decrypt the data. Encryption would, therefore, not provide any additional security in the sense of better access control, and the encryption might hinder the proper or efficient functioning of the application. An additional issue is that it is difficult to securely transmit and share encryption keys among multiple users of a system.</p>
<p>A basic principle behind encrypting stored data is that it must not interfere with access control. For example, a user who has the <code class="codeph">SELECT</code> privilege on <code class="codeph">emp</code> should not be limited by the encryption mechanism from seeing all the data he is otherwise allowed to see. Similarly, there is little benefit to encrypting part of a table with one key and part of a table with another key if users need to see all encrypted data in the table. In this case, encryption adds to the overhead of decrypting the data before users can read it. If access controls are implemented well, then encryption adds little additional security within the database itself. A user who has privileges to access data within the database has no more nor any less privileges as a result of encryption. Therefore, you should never use encryption to solve access control problems.</p>
</div>
</div>
<a id="DBSEG315"></a>
<div class="props_rev_3"><a id="GUID-DE0FAE79-4C46-44F5-9E04-FB3DC8D11E9B"></a>
<h3 id="DBSEG-GUID-DE0FAE79-4C46-44F5-9E04-FB3DC8D11E9B" class="sect3">Principle 2: Encryption Does Not Protect Against a Malicious Administrator</h3>
<div>
<p>You can protect your databases against malicious database administrators by using other Oracle features, such as Oracle Database Vault.</p>
<p>Some organizations, concerned that a malicious user might gain elevated (database administrator) privileges by guessing a password, like the idea of encrypting stored data to protect against this threat.</p>
<p>However, the correct solution to this problem is to protect the database administrator account, and to change default passwords for other privileged accounts. The easiest way to break into a database is by using a default password for a privileged account that an administrator allowed to remain unchanged. One example is <code class="codeph">SYS</code>/<code class="codeph">CHANGE_ON_INSTALL</code>.</p>
<p>While there are many destructive things a malicious user can do to a database after gaining the <code class="codeph">DBA</code> privilege, encryption will not protect against many of them. Examples include corrupting or deleting data, exporting user data to the file system to email the data back to himself to run a password cracker on it, and so on.</p>
<p>Some organizations are concerned that database administrators, typically having all privileges, are able to see all data in the database. These organizations feel that the database administrators should administer the database, but should not be able to see the data that the database contains. Some organizations are also concerned about concentrating so much privilege in one person, and would prefer to partition the DBA function, or enforce two-person access rules.</p>
<p>It is tempting to think that encrypting all data (or significant amounts of data) will solve these problems, but there are better ways to protect against these threats. For example, Oracle Database supports limited partitioning of <code class="codeph">DBA</code> privileges. Oracle Database provides native support for <code class="codeph">SYSDBA</code> and <code class="codeph">SYSOPER</code> users. <code class="codeph">SYSDBA</code> has all privileges, but <code class="codeph">SYSOPER</code> has a limited privilege set (such as startup and shutdown of the database).</p>
<p>Furthermore, you can create smaller roles encompassing several system privileges. A <code class="codeph">jr_dba</code> role might not include all system privileges, but only those appropriate to a junior database administrator (such as <code class="codeph">CREATE TABLE</code>, <code class="codeph">CREATE USER</code>, and so on).</p>
<p>Oracle Database also enables auditing the actions taken by <code class="codeph">SYS</code> (or <code class="codeph">SYS</code>-privileged users) and storing that audit trail in a secure operating system location. Using this model, a separate auditor who has root privileges on the operating system can audit all actions by <code class="codeph">SYS</code>, enabling the auditor to hold all database administrators accountable for their actions.</p>
<p>You can also fine-tune the access and control that database administrators have by using Oracle Database Vault. See <a class="olink DVADM001" target="_blank" href="../DVADM/dvintro.htm#DVADM001"><span><cite>Oracle Database Vault Administrator&rsquo;s Guide</cite></span></a> for more information.</p>
<p>The database administrator function is a trusted position. Even organizations with the most sensitive data, such as intelligence agencies, do not typically partition the database administrator function. Instead, they manage their database administrators strongly, because it is a position of trust. Periodic auditing can help to uncover inappropriate activities.</p>
<p>Encryption of stored data must not interfere with the administration of the database, because otherwise, larger security issues can result. For example, if by encrypting data you corrupt the data, then you create a security problem, the data itself cannot be interpreted, and it may not be recoverable.</p>
<p>You can use encryption to limit the ability of a database administrator or other privileged user to see data in the database. However, it is not a substitute for managing the database administrator privileges properly, or for controlling the use of powerful system privileges. If untrustworthy users have significant privileges, then they can pose multiple threats to an organization, some of them far more significant than viewing unencrypted credit card numbers.</p>
</div>
</div>
<a id="DBSEG316"></a>
<div class="props_rev_3"><a id="GUID-5EE3BC9E-1E46-4620-905D-5D7AAFF31D55"></a>
<h3 id="DBSEG-GUID-5EE3BC9E-1E46-4620-905D-5D7AAFF31D55" class="sect3">Principle 3: Encrypting Everything Does Not Make Data Secure</h3>
<div>
<p>A common error is to think that if encrypting some data strengthens security, then encrypting everything makes all data secure.</p>
<p>As the discussion of the previous two principles illustrates, encryption does not address access control issues well, and it is important that encryption not interfere with normal access controls. Furthermore, encrypting an entire production database means that all data must be decrypted to be read, updated, or deleted. Encryption is inherently a performance-intensive operation; encrypting all data will significantly affect performance.</p>
<p>Availability is a key aspect of security. If encrypting data makes data unavailable, or adversely affects availability by reducing performance, then encrypting everything will create a new security problem. Availability is also adversely affected by the database being inaccessible when encryption keys are changed, as good security practices require on a regular basis. When the keys are to be changed, the database is inaccessible while data is decrypted and reencrypted with a new key or keys.</p>
<p>There may be advantages to encrypting data stored off-line. For example, an organization may store backups for a period of 6 months to a year off-line, in a remote location. Of course, the first line of protection is to secure the facility storing the data, by establishing physical access controls. Encrypting this data before it is stored may provide additional benefits. Because it is not being accessed on-line, performance need not be a consideration. While an Oracle database does not provide this capability, there are vendors who provide encryption services. Before embarking on large-scale encryption of backup data, organizations considering this approach should thoroughly test the process. It is essential to verify that data encrypted before off-line storage can be decrypted and re-imported successfully.</p>
</div>
</div>
</div>
<a id="DBSEG317"></a>
<div class="props_rev_3"><a id="GUID-069CA05C-54F6-4ED0-8BC2-746A1740D8AF"></a>
<h2 id="DBSEG-GUID-069CA05C-54F6-4ED0-8BC2-746A1740D8AF" class="sect2">Data Encryption Challenges</h2>
<div>
<p>In cases where encryption can provide additional security, there are some associated technical challenges.</p>
<p>Topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="data_encryption.htm#GUID-46789413-3368-472E-A311-C6E70B059ABB" title="Special difficulties arise when encrypted data is indexed.">Encrypted Indexed Data</a></p>
</li>
<li>
<p><a href="data_encryption.htm#GUID-E8A70864-5DED-4C05-916B-8BE6AAA94703" title="Encrypted data is only as secure as the key used for encrypting it.">Generated Encryption Keys</a></p>
</li>
<li>
<p><a href="data_encryption.htm#GUID-4D8F9A4F-E93F-40AF-BC23-C380D28FEC17" title="If the encryption key is to be passed by the application to the database, then you must encrypt it.">Transmitted Encryption Keys</a></p>
</li>
<li>
<p><a href="data_encryption.htm#GUID-0EE7496E-14F2-4BAC-A2CC-02F7117C784A" title="You can store encryption keys in the database or on an operating system.">Storing Encryption Keys</a></p>
</li>
<li>
<p><a href="data_encryption.htm#GUID-C1B633FD-8320-4EF4-86A4-1071F07ABECF" title="Prudent security practice dictates that you periodically change encryption keys.">Importance of Changing Encryption Keys</a></p>
</li>
<li>
<p><a href="data_encryption.htm#GUID-DF2A3FDC-8B24-4D20-8833-56EB007D741F" title="Certain data types require more work to encrypt.">Encryption of Binary Large Objects</a></p>
</li>
</ul>
</div>
<a id="DBSEG318"></a>
<div class="props_rev_3"><a id="GUID-46789413-3368-472E-A311-C6E70B059ABB"></a>
<h3 id="DBSEG-GUID-46789413-3368-472E-A311-C6E70B059ABB" class="sect3">Encrypted Indexed Data</h3>
<div>
<p>Special difficulties arise when encrypted data is indexed.</p>
<p>For example, suppose a company uses a national identity number, such as the U.S. Social Security number (SSN), as the employee number for its employees. The company considers employee numbers to be sensitive data, and, therefore, wants to encrypt data in the <code class="codeph">employee_number</code> column of the <code class="codeph">employees</code> table. Because <code class="codeph">employee_number</code> contains unique values, the database designers want to have an index on it for better performance.</p>
<p>However, if <code class="codeph">DBMS_CRYPTO</code> (or another mechanism) is used to encrypt data in a column, then an index on that column will also contain encrypted values. Although an index can be used for equality checking (for example, <code class="codeph">SELECT * FROM emp WHERE employee_number = &#39;987654321&#39;</code>), if the index on that column contains encrypted values, then the index is essentially unusable for any other purpose. You should not encrypt indexed data.</p>
<p>Oracle recommends that you do not use national identity numbers as unique IDs. Instead, use the <code class="codeph">CREATE SEQUENCE</code> statement to generate unique identity numbers. Reasons to avoid using national identity numbers are as follows:</p>
<ul style="list-style-type: disc;">
<li>
<p>There are privacy issues associated with overuse of national identity numbers (for example, identity theft).</p>
</li>
<li>
<p>Sometimes national identity numbers can have duplicates, as with U.S. Social Security numbers.</p>
</li>
</ul>
</div>
</div>
<a id="DBSEG319"></a>
<div class="props_rev_3"><a id="GUID-E8A70864-5DED-4C05-916B-8BE6AAA94703"></a>
<h3 id="DBSEG-GUID-E8A70864-5DED-4C05-916B-8BE6AAA94703" class="sect3">Generated Encryption Keys</h3>
<div>
<p>Encrypted data is only as secure as the key used for encrypting it.</p>
<p>An encryption key must be securely generated using secure cryptographic key generation. Oracle Database provides support for secure random number generation, with the <code class="codeph">RANDOMBYTES</code> function of <code class="codeph">DBMS_CRYPTO</code>. (This function replaces the capabilities provided by the <code class="codeph">GetKey</code> procedure of the earlier <code class="codeph">DBMS_OBFUSCATION_TOOLKIT</code>, which has been deprecated.) <code class="codeph">DBMS_CRYPTO</code> calls the secure random number generator (RNG) previously certified by RSA Security.</p>
<div class="infobox-note" id="GUID-E8A70864-5DED-4C05-916B-8BE6AAA94703__GUID-E5DE5041-DF8A-4568-9C95-A59FE2196C21">
<p class="notep1">Note:</p>
<p>Do not use the <code class="codeph">DBMS_RANDOM</code> package. The <code class="codeph">DBMS_RANDOM</code> package generates pseudo-random numbers, which, as Randomness Recommendations for Security (RFC-1750) states that using pseudo-random processes to generate secret quantities can result in pseudo-security.</p>
</div>
<p>Be sure to provide the correct number of bytes when you encrypt a key value. For example, you must provide a 16-byte key for the <code class="codeph">ENCRYPT_AES128</code> encryption algorithm.</p>
</div>
</div>
<a id="DBSEG320"></a>
<div class="props_rev_3"><a id="GUID-4D8F9A4F-E93F-40AF-BC23-C380D28FEC17"></a>
<h3 id="DBSEG-GUID-4D8F9A4F-E93F-40AF-BC23-C380D28FEC17" class="sect3">Transmitted Encryption Keys</h3>
<div>
<p>If the encryption key is to be passed by the application to the database, then you must encrypt it.</p>
<p>Otherwise, an intruder could get access to the key as it is being transmitted. Network data encryption protects all data in transit from modification or interception, including cryptographic keys.</p>
<div class="infoboxnotealso" id="GUID-4D8F9A4F-E93F-40AF-BC23-C380D28FEC17__GUID-8801EBC6-2026-4DB6-BB58-111A7D67599C">
<p class="notep1">See Also:</p>
<p><a href="asoconfg.htm#GUID-7F12066A-2BA1-476C-809B-BB95A3F727CF" title="You can configure native Oracle Net Services data encryption and integrity for both servers and clients.">Configuring Oracle Database Network Encryption and&nbsp;Data Integrity</a> for more information about network data encryption</p>
</div>
</div>
</div>
<a id="DBSEG321"></a>
<div class="props_rev_3"><a id="GUID-0EE7496E-14F2-4BAC-A2CC-02F7117C784A"></a>
<h3 id="DBSEG-GUID-0EE7496E-14F2-4BAC-A2CC-02F7117C784A" class="sect3">Storing Encryption Keys</h3>
<div>
<p>You can store encryption keys in the database or on an operating system.</p>
<p>Topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="data_encryption.htm#GUID-3D496FBB-DCFA-443C-A0C4-2F1BFD1218CA" title="Storing encryption keys is one of the most important, yet difficult, aspects of encryption.">About Storing Encryption Keys</a></p>
</li>
<li>
<p><a href="data_encryption.htm#GUID-CF618441-D340-4F17-A3D9-F115F310DA76" title="Storing encryption keys in the database does not always prevent a database administrator from accessing encrypted data.">Storage of Encryption Keys in the Database</a></p>
</li>
<li>
<p><a href="data_encryption.htm#GUID-2A795A3E-1917-471C-B5A8-607726E36F7C" title="When you store encryption keys in an operating system flat file, you can make callouts from PL/SQL to retrieve these encryption keys.">Storage of Encryption Keys in the Operating System</a></p>
</li>
<li>
<p><a href="data_encryption.htm#GUID-8144AB67-F6A8-4D4B-AA95-02AE6FCD28A8" title="Having the user supply the key assumes the user will be responsible with the key.">Users Managing Their Own Encryption Keys</a></p>
</li>
<li>
<p><a href="data_encryption.htm#GUID-C9F979FE-7A42-44EB-9A9A-3CF933130159" title="Transparent database encryption and tablespace encryption provide secure encryption with automatic key management for the encrypted tables and tablespaces.">Manual Encryption with Transparent Database Encryption and Tablespace Encryption</a></p>
</li>
</ul>
</div>
<a id="DBSEG1077"></a>
<div class="props_rev_3"><a id="GUID-3D496FBB-DCFA-443C-A0C4-2F1BFD1218CA"></a>
<h4 id="DBSEG-GUID-3D496FBB-DCFA-443C-A0C4-2F1BFD1218CA" class="sect4">About Storing Encryption Keys</h4>
<div>
<p>Storing encryption keys is one of the most important, yet difficult, aspects of encryption.</p>
<p>To recover data encrypted with a symmetric key, the key must be accessible to an authorized application or user seeking to decrypt the data. At the same time, the key must be inaccessible to someone who is maliciously trying to access encrypted data that he is not supposed to see.</p>
</div>
</div>
<a id="DBSEG322"></a>
<div class="props_rev_3"><a id="GUID-CF618441-D340-4F17-A3D9-F115F310DA76"></a>
<h4 id="DBSEG-GUID-CF618441-D340-4F17-A3D9-F115F310DA76" class="sect4">Storage of Encryption Keys in the Database</h4>
<div>
<p>Storing encryption keys in the database does not always prevent a database administrator from accessing encrypted data.</p>
<p>An all-privileged database administrator could still access tables containing encryption keys. However, it can often provide good security against the casual curious user or against someone compromising the database file on the operating system.</p>
<p>As a trivial example, suppose you create a table (<code class="codeph">EMP</code>) that contains employee data. You want to encrypt the employee Social Security number (SSN) stored in one of the columns. You could encrypt employee SSN using a key that is stored in a separate column. However, anyone with <code class="codeph">SELECT</code> access on the entire table could retrieve the encryption key and decrypt the matching SSN.</p>
<p>While this encryption scheme seems easily defeated, with a little more effort you can create a solution that is much harder to break. For example, you could encrypt the SSN using a technique that performs some additional data transformation on the <code class="codeph">employee_number</code> before using it to encrypt the SSN. This technique might be as simple as using an <code class="codeph">XOR</code> operation on the <code class="codeph">employee_number</code> and the birth date of the employee to determine the validity of the values.</p>
<p>As additional protection, PL/SQL source code performing encryption can be wrapped, (using the <code class="codeph">WRAP</code> utility) which obfuscates (scrambles) the code. The <code class="codeph">WRAP</code> utility processes an input SQL file and obfuscates the PL/SQL units in it. For example, the following command uses the <code class="codeph">keymanage.sql</code> file as the input:</p>
<pre dir="ltr">wrap iname=/mydir/keymanage.sql
</pre>
<p>A developer can subsequently have a function in the package call the <code class="codeph">DBMS_CRYPTO</code> package calls with the key contained in the wrapped package.</p>
<p>Oracle Database enables you to obfuscate dynamically generated PL/SQL code. The <code class="codeph">DBMS_DDL</code> package contains two subprograms that allow you to obfuscate dynamically generated PL/SQL program units. For example, the following block uses the <code class="codeph">DBMS_DDL.CREATE_WRAPPED</code> procedure to wrap dynamically generated PL/SQL code.</p>
<pre dir="ltr">BEGIN
......
SYS.DBMS_DDL.CREATE_WRAPPED(<span class="italic">function_returning_PLSQL_code</span>());
......
END;
</pre>
<p>While wrapping is not unbreakable, it makes it harder for an intruder to get access to the encryption key. Even in cases where a different key is supplied for each encrypted data value, you should not embed the key value within a package. Instead, wrap the package that performs the key management (that is, data transformation or padding).</p>
<div class="infoboxnotealso" id="GUID-CF618441-D340-4F17-A3D9-F115F310DA76__GUID-9519CF11-27F9-4087-81C3-F807F01F4CFF">
<p class="notep1">See Also:</p>
<p><a class="olink LNPLS016" target="_blank" href="../LNPLS/wrap.htm#LNPLS016"><span><cite>Oracle Database PL/SQL Packages and Types Reference</cite></span></a> for additional information about the <code class="codeph">WRAP</code> command line utility and the <code class="codeph">DBMS_DDL</code> subprograms for dynamic wrapping</p>
</div>
<p>An alternative to wrapping the data is to have a separate table in which to store the encryption key and to envelope the call to the keys table with a procedure. The key table can be joined to the data table using a primary key to foreign key relationship. For example, <code class="codeph">employee_number</code> is the primary key in the <code class="codeph">employees</code> table that stores employee information and the encrypted SSN. The <code class="codeph">employee_number</code> column is a foreign key to the <code class="codeph">ssn_keys</code> table that stores the encryption keys for the employee SSN. The key stored in the <code class="codeph">ssn_keys</code> table can also be transformed before use (by using an <code class="codeph">XOR</code> operation), so the key itself is not stored unencrypted. If you wrap the procedure, then that can hide the way in which the keys are transformed before use.</p>
<p>The strengths of this approach are:</p>
<ul style="list-style-type: disc;">
<li>
<p>Users who have direct table access cannot see the sensitive data unencrypted, nor can they retrieve the keys to decrypt the data.</p>
</li>
<li>
<p>Access to decrypted data can be controlled through a procedure that selects the encrypted data, retrieves the decryption key from the key table, and transforms it before it can be used to decrypt the data.</p>
</li>
<li>
<p>The data transformation algorithm is hidden from casual snooping by wrapping the procedure, which obfuscates the procedure code.</p>
</li>
<li>
<p><code class="codeph">SELECT</code> access to both the data table and the keys table does not guarantee that the user with this access can decrypt the data, because the key is transformed before use.</p>
</li>
</ul>
<p>The weakness to this approach is that a user who has <code class="codeph">SELECT</code> access to both the key table and the data table, and who can derive the key transformation algorithm, can break the encryption scheme.</p>
<p>The preceding approach is not infallible, but it is adequate to protect against easy retrieval of sensitive information stored in clear text.</p>
</div>
</div>
<a id="DBSEG323"></a>
<div class="props_rev_3"><a id="GUID-2A795A3E-1917-471C-B5A8-607726E36F7C"></a>
<h4 id="DBSEG-GUID-2A795A3E-1917-471C-B5A8-607726E36F7C" class="sect4">Storage of Encryption Keys in the Operating System</h4>
<div>
<p>When you store encryption keys in an operating system flat file, you can make callouts from PL/SQL to retrieve these encryption keys.</p>
<p>However, if you store keys in the operating system and make callouts to it, then your data is only as secure as the protection on the operating system.</p>
<p>If your primary security concern is that the database can be broken into from the operating system, then storing the keys in the operating system makes it easier for an intruder to retrieve encrypted data than storing the keys in the database itself.</p>
</div>
</div>
<a id="DBSEG324"></a>
<div class="props_rev_3"><a id="GUID-8144AB67-F6A8-4D4B-AA95-02AE6FCD28A8"></a>
<h4 id="DBSEG-GUID-8144AB67-F6A8-4D4B-AA95-02AE6FCD28A8" class="sect4">Users Managing Their Own Encryption Keys</h4>
<div>
<p>Having the user supply the key assumes the user will be responsible with the key.</p>
<p>Considering that 40 percent of help desk calls are from users who have forgotten their passwords, you can see the risks of having users manage encryption keys. In all likelihood, users will either forget an encryption key, or write the key down, which then creates a security weakness. If a user forgets an encryption key or leaves the company, then your data is not recoverable.</p>
<p>If you do decide to have user-supplied or user-managed keys, then you need to ensure you are using network encryption so that the key is not passed from the client to the server in the clear. You also must develop key archive mechanisms, which is also a difficult security problem. Key archives and backdoors create the security weaknesses that encryption is attempting to solve.</p>
</div>
</div>
<a id="DBSEG325"></a>
<div class="props_rev_3"><a id="GUID-C9F979FE-7A42-44EB-9A9A-3CF933130159"></a>
<h4 id="DBSEG-GUID-C9F979FE-7A42-44EB-9A9A-3CF933130159" class="sect4">Manual Encryption with Transparent Database Encryption and Tablespace Encryption</h4>
<div>
<p>Transparent database encryption and tablespace encryption provide secure encryption with automatic key management for the encrypted tables and tablespaces.</p>
<p>If the application requires protection of sensitive column data stored on the media, then these two types of encryption are a simple and fast way of achieving this.</p>
<div class="infoboxnotealso" id="GUID-C9F979FE-7A42-44EB-9A9A-3CF933130159__GUID-DC67FFA8-A3AC-42A6-98E6-E95C7490E498">
<p class="notep1">See Also:</p>
<p><a class="olink ASOAG600" target="_blank" href="../ASOAG/asopart1.htm#ASOAG600"><span><cite>Oracle Database Advanced Security Guide</cite></span></a> for more information about Transparent Data Encryption</p>
</div>
</div>
</div>
</div>
<a id="DBSEG326"></a>
<div class="props_rev_3"><a id="GUID-C1B633FD-8320-4EF4-86A4-1071F07ABECF"></a>
<h3 id="DBSEG-GUID-C1B633FD-8320-4EF4-86A4-1071F07ABECF" class="sect3">Importance of Changing Encryption Keys</h3>
<div>
<p>Prudent security practice dictates that you periodically change encryption keys.</p>
<p>For stored data, this requires periodically unencrypting the data, and then reencrypting it with another well-chosen key.</p>
<p>You would most likely change the encryption key while the data is not being accessed, which creates another challenge. This is especially true for a Web-based application encrypting credit card numbers, because you do not want to shut down the entire application while you switch encryption keys.</p>
</div>
</div>
<a id="DBSEG327"></a>
<div class="props_rev_3"><a id="GUID-DF2A3FDC-8B24-4D20-8833-56EB007D741F"></a>
<h3 id="DBSEG-GUID-DF2A3FDC-8B24-4D20-8833-56EB007D741F" class="sect3">Encryption of Binary Large Objects</h3>
<div>
<p>Certain data types require more work to encrypt.</p>
<p>For example, Oracle Database supports storage of binary large objects (BLOBs), which stores very large objects (for example, multiple gigabytes) in the database. A BLOB can be either stored internally as a column, or stored in an external file.</p>
<p>For an example of using <code class="codeph">DBMS_CRYPTO</code> on BLOB data, see <a href="data_encryption.htm#GUID-63CCAA8B-180C-4456-881F-F9F31A3D94AE" title="You can encrypt BLOB data.">Example: Encryption and Decryption Procedures for BLOB Data</a>.</p>
</div>
</div>
</div>
<a id="DBSEG328"></a><a id="DBSEG80084"></a>
<div class="props_rev_3"><a id="GUID-1AE01705-7C92-443E-983E-D26CB5749EEE"></a>
<h2 id="DBSEG-GUID-1AE01705-7C92-443E-983E-D26CB5749EEE" class="sect2">Data Encryption Storage with the DBMS_CRYPTO Package</h2>
<div>
<p>The <code class="codeph">DBMS_CRYPTO</code> package provides several ways to address security issues.</p>
<p>While encryption is not the ideal solution for addressing several security threats, it is clear that selectively encrypting sensitive data before storage in the database does improve security. Examples of such data could include:</p>
<ul style="list-style-type: disc;">
<li>
<p>Credit card numbers</p>
</li>
<li>
<p>National identity numbers</p>
</li>
</ul>
<p>Oracle Database provides the PL/SQL package <code class="codeph">DBMS_CRYPTO</code> to encrypt and decrypt stored data. This package supports several industry-standard encryption and hashing algorithms, including the Advanced Encryption Standard (AES) encryption algorithm. AES was approved by the National Institute of Standards and Technology (NIST) to replace the Data Encryption Standard (DES).</p>
<p>The <code class="codeph">DBMS_CRYPTO</code> package enables encryption and decryption for common Oracle Database data types, including <code class="codeph">RAW</code> and large objects (LOBs), such as images and sound. Specifically, it supports BLOBs and CLOBs. In addition, it provides Globalization Support for encrypting data across different database character sets.</p>
<p>The following cryptographic algorithms are supported:</p>
<ul style="list-style-type: disc;">
<li>
<p>Advanced Encryption Standard (AES)</p>
</li>
<li>
<p>SHA-2 Cryptographic Hash settings:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">HASH_SH256</code></p>
</li>
<li>
<p><code class="codeph">HASH_SH384</code></p>
</li>
<li>
<p><code class="codeph">HASH_SH512</code></p>
</li>
</ul>
</li>
<li>
<p>SHA-2 Message Authentication Code (MAC)</p>
</li>
</ul>
<p>Block cipher modifiers are also provided with <code class="codeph">DBMS_CRYPTO</code>. You can choose from several padding options, including Public Key Cryptographic Standard (PKCS) #5, and from four block cipher chaining modes, including Cipher Block Chaining (CBC). Padding must be done in multiples of eight bytes.</p>
<div class="infobox-note" id="GUID-1AE01705-7C92-443E-983E-D26CB5749EEE__GUID-6518FC8B-6CF0-4503-94F8-8F428E687359">
<p class="notep1">Note:</p>
<ul style="list-style-type: disc;">
<li>
<p>DES is no longer recommended by the National Institute of Standards and Technology (NIST).</p>
</li>
<li>
<p>Usage of SHA-1 is more secure than MD5.</p>
</li>
<li>
<p>Usage of SHA-2 is more secure than SHA-1.</p>
</li>
<li>
<p>Keyed MD5 is not vulnerable.</p>
</li>
</ul>
</div>
<p><a href="data_encryption.htm#GUID-1AE01705-7C92-443E-983E-D26CB5749EEE__G1009632" title="This table compares the features of the DBMS_CRYPTO package with the features of the DBMS_OBFUSCATION_TOOLKIT package.">Table 12-1</a> summarizes the <code class="codeph">DBMS_CRYPTO</code> package features.</p>
<div class="tblformal" id="GUID-1AE01705-7C92-443E-983E-D26CB5749EEE__G1009632">
<p class="titleintable">Table 12-1 DBMS_CRYPTO Package Feature Summary</p>
<table class="cellalignment3677" title="DBMS_CRYPTO Package Feature Summary" summary="This table compares the features of the DBMS_CRYPTO package with the features of the DBMS_OBFUSCATION_TOOLKIT package.">
<thead>
<tr class="cellalignment3671">
<th class="cellalignment3687" id="d91024e1893">Feature</th>
<th class="cellalignment3688" id="d91024e1896">DBMS_CRYPTO Supported Functionality</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3671">
<td class="cellalignment3689" id="d91024e1901" headers="d91024e1893">
<p>Cryptographic algorithms</p>
</td>
<td class="cellalignment3690" headers="d91024e1901 d91024e1896">
<p>AES</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3689" id="d91024e1908" headers="d91024e1893">
<p>Padding forms</p>
</td>
<td class="cellalignment3690" headers="d91024e1908 d91024e1896">
<p>PKCS5, zeroes</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3689" id="d91024e1915" headers="d91024e1893">
<p>Block cipher chaining modes</p>
</td>
<td class="cellalignment3690" headers="d91024e1915 d91024e1896">
<p>CBC, CFB, ECB, OFB</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3689" id="d91024e1922" headers="d91024e1893">
<p>Cryptographic hash algorithms</p>
</td>
<td class="cellalignment3690" headers="d91024e1922 d91024e1896">
<p>SHA-1, SHA-2, MD4, MD5, HASH_SH256, HASH_SH384, HASH_SH512</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3689" id="d91024e1929" headers="d91024e1893">
<p>Keyed hash (MAC) algorithms</p>
</td>
<td class="cellalignment3690" headers="d91024e1929 d91024e1896">
<p>HMAC_MD5, HMAC_SH1, HMAC_SH256, HMAC_SH384, HMAC_SH512</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3689" id="d91024e1936" headers="d91024e1893">
<p>Cryptographic pseudo-random number generator</p>
</td>
<td class="cellalignment3690" headers="d91024e1936 d91024e1896">
<p><code class="codeph">RAW</code>, <code class="codeph">NUMBER</code>, <code class="codeph">BINARY_INTEGER</code></p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3689" id="d91024e1950" headers="d91024e1893">
<p>Database types</p>
</td>
<td class="cellalignment3690" headers="d91024e1950 d91024e1896">
<p><code class="codeph">RAW</code>, <code class="codeph">CLOB</code>, <code class="codeph">BLOB</code></p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p><code class="codeph">DBMS_CRYPTO</code> supports a range of algorithms that accommodate both new and existing systems. Although 3DES_2KEY and MD4 are provided for backward compatibility, you achieve better security using 3DES, AES, or SHA-1. Therefore, 3DES_2KEY is not recommended.</p>
<p>The <code class="codeph">DBMS_CRYPTO</code> package includes cryptographic checksum capabilities (MD5), which are useful for comparisons, and the ability to generate a secure random number (the <code class="codeph">RANDOMBYTES</code> function). Secure random number generation is an important part of cryptography; predictable keys are easily guessed keys; and easily guessed keys may lead to easy decryption of data. Most cryptanalysis is done by finding weak keys or poorly stored keys, rather than through brute force analysis (cycling through all possible keys).</p>
<div class="infobox-note" id="GUID-1AE01705-7C92-443E-983E-D26CB5749EEE__GUID-AA71C7CF-2B58-456A-96B5-90139BDB1281">
<p class="notep1">Note:</p>
<p>Do not use <code class="codeph">DBMS_RANDOM</code>, because it is unsuitable for cryptographic key generation.</p>
</div>
<p>Key management is programmatic. That is, the application (or caller of the function) must supply the encryption key. This means that the application developer must find a way of storing and retrieving keys securely. The relative strengths and weaknesses of various key management techniques are discussed in the sections that follow. The DES algorithm itself has an effective key length of 56-bits.</p>
<div class="infoboxnotealso" id="GUID-1AE01705-7C92-443E-983E-D26CB5749EEE__GUID-91AB199E-7849-4567-BD5E-7898AA9A17A0">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a class="olink ARPLS664" target="_blank" href="../ARPLS/d_crypto.htm#ARPLS664"><span><cite>Oracle Database PL/SQL Packages and Types Reference</cite></span></a> for detailed information about the <code class="codeph">DBMS_CRYPTO</code> package</p>
</li>
<li>
<p><a class="olink ARPLS072" target="_blank" href="../ARPLS/u_raw.htm#ARPLS072"><span><cite>Oracle Database PL/SQL Packages and Types Reference</cite></span></a> for detailed information about the <code class="codeph">UTL_RAW</code> package</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect2"><a id="GUID-40DE97DD-7CD5-486C-B9FB-959408BF6081"></a>
<h2 id="DBSEG-GUID-40DE97DD-7CD5-486C-B9FB-959408BF6081" class="sect2">Using Ciphertexts Encrypted in OFB Mode in Oracle Database Release 11g</h2>
<div>
<p>In Oracle Database Release 11<span class="italic">g</span>, ciphertexts configured to use output feedback (OFB) used electronic codebook (ECB) mode instead.</p>
<div class="section">In Oracle Database Release 11<span class="italic">g</span>, if you set the <code class="codeph">DBMS_CRYPTO.CHAIN_OFB</code> block cipher chaining modifier to configure ciphertext encryption to use output feedback (OFB) mode, then due to Oracle Bug 13001552, the result is that the configuration used electronic codebook (ECB) mode erroneously. This bug has been fixed in Oracle Database Release 12<span class="italic">c</span>. Therefore, after an upgrade from Oracle Database Release 11<span class="italic">g</span> to Release 12<span class="italic">c</span>, the ciphertexts that were encrypted using OFB mode in Release 11<span class="italic">g</span> will no longer decrypt properly in the corrected OFB mode in Oracle Database Release 12<span class="italic">c</span>.
<p>To remedy this problem:</p>
</div>
<!-- class="section" -->
<ol>
<li><span>Log in to the database as a user who has the <code class="codeph">EXECUTE</code> privilege for the <code class="codeph">DBMS_CRYPTO</code> PL/SQL package.</span></li>
<li><span>Decrypt the cyphertexts using the <code class="codeph">DBMS_CRYPTO.CHAIN_ECB</code> block cipher chaining modifier.</span></li>
</ol>
<div class="example" id="GUID-40DE97DD-7CD5-486C-B9FB-959408BF6081__GUID-3D280050-F5F1-4124-B360-CA35AAAE3EF2">
<p>The following example, <code class="codeph">dbmscrypto11.sql</code>, shows the wrong behavior in Oracle Database Release 11<span class="italic">g</span>:</p>
<pre dir="ltr">dbmscrypto11.sql:
set serveroutput on

declare
  l_mod_ofb pls_integer;
  l_mod_ecb pls_integer;
  v_key raw(32);
  v_iv  raw(16);
  v_test_in raw(16);
  v_ciphertext raw(16);
  v_test_out_ECB raw(16);
  v_test_out_OFB raw(16);
begin
  l_mod_ofb := dbms_crypto.ENCRYPT_AES256
       + dbms_crypto.CHAIN_OFB
       + DBMS_CRYPTO.PAD_NONE ;
  l_mod_ecb := dbms_crypto.ENCRYPT_AES256
       + dbms_crypto.CHAIN_ECB
       + DBMS_CRYPTO.PAD_NONE ;

  v_key := hextoraw
  (&#39;603deb1015ca71be2b73aef0857d77811f352c073b6108d72d9810a30914dff4&#39;);
  v_iv :=   hextoraw(&#39;000102030405060708090A0B0C0D0E0F&#39;);
  v_test_in := hextoraw(&#39;6bc1bee22e409f96e93d7e117393172a&#39;);
  v_ciphertext := dbms_crypto.encrypt(src =&gt; v_test_in,
                                  TYP =&gt; l_mod_ofb,
                                  key =&gt; v_key,
                                  iv =&gt; v_iv);
  v_test_out_ECB := dbms_crypto.decrypt(src =&gt; v_ciphertext,
                                  TYP =&gt; l_mod_ecb,
                                  key =&gt; v_key,
                                  iv =&gt; v_iv);
  v_test_out_OFB := dbms_crypto.decrypt(src =&gt; v_ciphertext,
                                  TYP =&gt; l_mod_ofb,
                                  key =&gt; v_key,
                                  iv =&gt; v_iv);
  dbms_output.put_line
  (&#39;Input plaintext                      : &#39;||rawtohex(v_test_in));
  dbms_output.put_line
  (&#39;11g: Ciphertext (encrypt in OFB mode): &#39;||rawtohex(v_ciphertext));
  dbms_output.put_line
  (&#39;11g: Output of decrypt in ECB mode   : &#39;||rawtohex(v_test_out_ECB));
  dbms_output.put_line
  (&#39;11g: Output of decrypt in OFB mode   : &#39;||rawtohex(v_test_out_OFB));
end;
/
</pre>
<p>The resulting output is as follows:</p>
<pre dir="ltr">SQL&gt; @dbmscrypto11.sql

Input plaintext                      : 6BC1BEE22E409F96E93D7E117393172A
11g: Ciphertext (encrypt in OFB mode): F3EED1BDB5D2A03C064B5A7E3DB181F8
11g: Output of decrypt in ECB mode   : 6BC1BEE22E409F96E93D7E117393172A
11g: Output of decrypt in OFB mode   : 6BC1BEE22E409F96E93D7E117393172A
</pre>
<p>This output illustrates that in Oracle Database release 11<span class="italic">g</span>, OFB mode is wrongly ECB mode, and therefore decrypting in either OFB or ECB mode results in the correct plaintext.</p>
<p>The next example, <code class="codeph">dbmscrypto12from11.sql</code>, shows that, after an upgrade from Oracle Database release 11<span class="italic">g</span> to release 12<span class="italic">c</span>, ECB mode and not OFB mode has to be used in order to properly decrypt a ciphertext encrypted in OFB mode in Release 11<span class="italic">g</span>.</p>
<pre dir="ltr">dbmscrypto12from11.sql:
set serveroutput on

declare
  l_mod_ofb pls_integer;
  l_mod_ecb pls_integer;
  v_key raw(32);
  v_iv  raw(16);
  v_test_in raw(16);
  v_ciphertext11 raw(16);
  v_test_out_ECB raw(16);
  v_test_out_OFB raw(16);
begin
  l_mod_ofb := dbms_crypto.ENCRYPT_AES256
       + dbms_crypto.CHAIN_OFB
       + DBMS_CRYPTO.PAD_NONE ;
  l_mod_ecb := dbms_crypto.ENCRYPT_AES256
       + dbms_crypto.CHAIN_ECB
       + DBMS_CRYPTO.PAD_NONE ;

  v_key := hextoraw
  (&#39;603deb1015ca71be2b73aef0857d77811f352c073b6108d72d9810a30914dff4&#39;);
  v_iv :=   hextoraw(&#39;000102030405060708090A0B0C0D0E0F&#39;);
  v_test_in := hextoraw(&#39;6bc1bee22e409f96e93d7e117393172a&#39;);
  v_ciphertext11 := hextoraw(&#39;F3EED1BDB5D2A03C064B5A7E3DB181F8&#39;);

  v_test_out_ECB := dbms_crypto.decrypt(src =&gt; v_ciphertext11,
                                  TYP =&gt; l_mod_ecb,
                                  key =&gt; v_key,
                                  iv =&gt; v_iv);
  v_test_out_OFB := dbms_crypto.decrypt(src =&gt; v_ciphertext11,
                                  TYP =&gt; l_mod_ofb,
                                  key =&gt; v_key,
                                  iv =&gt; v_iv);
  dbms_output.put_line
  (&#39;Input plaintext (to 11g)             : &#39;||rawtohex(v_test_in));
  dbms_output.put_line
  (&#39;11g: Ciphertext (encrypt in OFB mode): &#39;||rawtohex(v_ciphertext11));
  dbms_output.put_line
  (&#39;12c: Output of decrypt in ECB mode   : &#39;||rawtohex(v_test_out_ECB));
  dbms_output.put_line
  (&#39;12c: Output of decrypt in OFB mode   : &#39;||rawtohex(v_test_out_OFB));
end;
/
</pre>
<p>The resulting output is as follows:</p>
<pre dir="ltr">SQL&gt; @dbmscrypto12from11.sql
Input plaintext (to 11g)             : 6BC1BEE22E409F96E93D7E117393172A
11g: Ciphertext (encrypt in OFB mode): F3EED1BDB5D2A03C064B5A7E3DB181F8
12c: Output of decrypt in ECB mode   : 6BC1BEE22E409F96E93D7E117393172A
12c: Output of decrypt in OFB mode   : 4451EBE041EB29E191BBA0E9D67FAEB2
</pre>
<p>If you are preparing to upgrade from Oracle Database Release 11<span class="italic">g</span> to Release 12<span class="italic">c</span>, then edit any scripts that you may have in which OFB mode is specified so that the decrypt operations use ECB mode. This way, the scripts will work in both Release 11<span class="italic">g</span> and Release 12<span class="italic">c</span>, ensuring business continuity.</p>
</div>
<!-- class="example" --></div>
</div>
<a id="DBSEG80087"></a>
<div class="props_rev_3"><a id="GUID-1A99FC75-E08B-46AA-BDB2-EDCCDBA714D1"></a>
<h2 id="DBSEG-GUID-1A99FC75-E08B-46AA-BDB2-EDCCDBA714D1" class="sect2">Examples of Using the Data Encryption API</h2>
<div>
<p>Examples of using the data encryption API include using the <code class="codeph">DBMS_CRYPTO.SQL</code> procedure, encrypting AES 256-bit data, and encrypting BLOB data.</p>
<p>Topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="data_encryption.htm#GUID-572BC836-0F6A-4D1C-A5E0-15DB1FC551B5" title="The DBMS_CRYPTO.SQL PL/SQL program can be used to encrypt data.">Example: Data Encryption Procedure</a></p>
</li>
<li>
<p><a href="data_encryption.htm#GUID-415A7D89-DE8F-438C-ABF5-49C3B90388E6" title="You can use a PL/SQL block to encrypt and decrypt a predefined variable.">Example: AES 256-Bit Data Encryption and Decryption Procedures</a></p>
</li>
<li>
<p><a href="data_encryption.htm#GUID-63CCAA8B-180C-4456-881F-F9F31A3D94AE" title="You can encrypt BLOB data.">Example: Encryption and Decryption Procedures for BLOB Data</a></p>
</li>
</ul>
</div>
<a id="DBSEG335"></a>
<div class="props_rev_3"><a id="GUID-572BC836-0F6A-4D1C-A5E0-15DB1FC551B5"></a>
<h3 id="DBSEG-GUID-572BC836-0F6A-4D1C-A5E0-15DB1FC551B5" class="sect3">Example: Data Encryption Procedure</h3>
<div>
<p>The <code class="codeph">DBMS_CRYPTO.SQL</code> PL/SQL program can be used to encrypt data.</p>
<p>This example code performs the following actions:</p>
<ul style="list-style-type: disc;">
<li>
<p>Encrypts a string (<code class="codeph">VARCHAR2</code> type) using DES after first converting it into the <code class="codeph">RAW</code> data type.</p>
<p>This step is necessary because encrypt and decrypt functions and procedures in <code class="codeph">DBMS_CRYPTO</code> package work on the <code class="codeph">RAW</code> data type only.</p>
</li>
<li>
<p>Shows how to create a 160-bit hash using SHA-1 algorithm.</p>
</li>
<li>
<p>Demonstrates how MAC, a key-dependent one-way hash, can be computed using the MD5 algorithm.</p>
</li>
</ul>
<p>The <code class="codeph">DBMS_CRYPTO.SQL</code> procedure follows:</p>
<pre dir="ltr">DECLARE
    input_string     VARCHAR2(16) := &#39;tigertigertigert&#39;;
    raw_input        RAW(128) :=
UTL_RAW.CAST_TO_RAW(CONVERT(input_string,&#39;AL32UTF8&#39;,&#39;US7ASCII&#39;));
    key_string       VARCHAR2(8)  := &#39;scottsco&#39;;
    raw_key          RAW(128) :=
UTL_RAW.CAST_TO_RAW(CONVERT(key_string,&#39;AL32UTF8&#39;,&#39;US7ASCII&#39;));
    encrypted_raw    RAW(2048);
    encrypted_string VARCHAR2(2048);
    decrypted_raw    RAW(2048);
    decrypted_string VARCHAR2(2048); 
<span class="bold">-- Begin testing Encryption:</span> 
BEGIN
    dbms_output.put_line(&#39;&gt; Input String                     : &#39; || 
    CONVERT(UTL_RAW.CAST_TO_VARCHAR2(raw_input),&#39;US7ASCII&#39;,&#39;AL32UTF8&#39;));
    dbms_output.put_line(&#39;&gt; ========= BEGIN TEST Encrypt =========&#39;);
    encrypted_raw := dbms_crypto.Encrypt(
        src =&gt; raw_input, 
        typ =&gt; DBMS_CRYPTO.DES_CBC_PKCS5, 
        key =&gt; raw_key);
        dbms_output.put_line(&#39;&gt; Encrypted hex value              : &#39; || 
        rawtohex(UTL_RAW.CAST_TO_RAW(encrypted_raw)));
decrypted_raw := dbms_crypto.Decrypt(
        src =&gt; encrypted_raw, 
        typ =&gt; DBMS_CRYPTO.DES_CBC_PKCS5, 
        key =&gt; raw_key);
    decrypted_string := 
    CONVERT(UTL_RAW.CAST_TO_VARCHAR2(decrypted_raw),&#39;US7ASCII&#39;,&#39;AL32UTF8&#39;);
dbms_output.put_line(&#39;&gt; Decrypted string output          : &#39; || 
        decrypted_string);
if input_string = decrypted_string THEN
    dbms_output.put_line(&#39;&gt; String DES Encyption and Decryption successful&#39;);
END if;
dbms_output.put_line(&#39;&#39;);
dbms_output.put_line(&#39;&gt; ========= BEGIN TEST Hash =========&#39;);
    encrypted_raw := dbms_crypto.Hash(
        src =&gt; raw_input, 
        typ =&gt; DBMS_CRYPTO.HASH_SH1);
dbms_output.put_line(&#39;&gt; Hash value of input string       : &#39; || 
        rawtohex(UTL_RAW.CAST_TO_RAW(encrypted_raw)));
dbms_output.put_line(&#39;&gt; ========= BEGIN TEST Mac =========&#39;);
    encrypted_raw := dbms_crypto.Mac(
        src =&gt; raw_input, 
        typ =&gt; DBMS_CRYPTO.HMAC_MD5, 
        key =&gt; raw_key);
dbms_output.put_line(&#39;&gt; Message Authentication Code      : &#39; || 
        rawtohex(UTL_RAW.CAST_TO_RAW(encrypted_raw)));
dbms_output.put_line(&#39;&#39;);
dbms_output.put_line(&#39;&gt; End of DBMS_CRYPTO tests  &#39;);
END;
/
</pre></div>
</div>
<a id="DBSEG336"></a>
<div class="props_rev_3"><a id="GUID-415A7D89-DE8F-438C-ABF5-49C3B90388E6"></a>
<h3 id="DBSEG-GUID-415A7D89-DE8F-438C-ABF5-49C3B90388E6" class="sect3">Example: AES 256-Bit Data Encryption and Decryption Procedures</h3>
<div>
<p>You can use a PL/SQL block to encrypt and decrypt a predefined variable.</p>
<p>For the following example, the predefined variable is named <code class="codeph">input_string</code> and it uses the AES 256-bit algorithm with Cipher Block Chaining and PKCS #5 padding:</p>
<pre dir="ltr">declare
   input_string       VARCHAR2 (200) := &#39;Secret Message&#39;;
   output_string      VARCHAR2 (200);
   encrypted_raw      RAW (2000);             <span class="italic">-- stores encrypted binary text</span>
   decrypted_raw      RAW (2000);             <span class="italic">-- stores decrypted binary text</span>
   num_key_bytes      NUMBER := 256/8;        <span class="italic">-- key length 256 bits (32 bytes)</span>
   key_bytes_raw      RAW (32);               <span class="italic">-- stores 256-bit encryption key </span>
   encryption_type    PLS_INTEGER :=          <span class="italic">-- total encryption type</span>
                            DBMS_CRYPTO.ENCRYPT_AES256
                          + DBMS_CRYPTO.CHAIN_CBC
                          + DBMS_CRYPTO.PAD_PKCS5;
begin
   DBMS_OUTPUT.PUT_LINE (&#39;Original string: &#39; || input_string);
   key_bytes_raw := DBMS_CRYPTO.RANDOMBYTES (num_key_bytes);
   encrypted_raw := DBMS_CRYPTO.ENCRYPT
      (
         src =&gt; UTL_I18N.STRING_TO_RAW (input_string, &#39;AL32UTF8&#39;),
         typ =&gt; encryption_type,
         key =&gt; key_bytes_raw
      );
<span class="bold">    -- The encrypted value in the encrypted_raw variable can be used here:</span>
   decrypted_raw := DBMS_CRYPTO.DECRYPT
      (
         src =&gt; encrypted_raw,
         typ =&gt; encryption_type,
         key =&gt; key_bytes_raw
      );
   output_string := UTL_I18N.RAW_TO_CHAR (decrypted_raw, &#39;AL32UTF8&#39;);
   DBMS_OUTPUT.PUT_LINE (&#39;Decrypted string: &#39; || output_string);
end;
</pre></div>
</div>
<a id="DBSEG337"></a>
<div class="props_rev_3"><a id="GUID-63CCAA8B-180C-4456-881F-F9F31A3D94AE"></a>
<h3 id="DBSEG-GUID-63CCAA8B-180C-4456-881F-F9F31A3D94AE" class="sect3">Example: Encryption and Decryption Procedures for BLOB Data</h3>
<div>
<p>You can encrypt BLOB data.</p>
<p>The following sample PL/SQL program (<code class="codeph">blob_test.sql</code>) shows how to encrypt and decrypt BLOB data. This example code does the following, and prints out its progress (or problems) at each step:</p>
<ul style="list-style-type: disc;">
<li>
<p>Creates a table for the BLOB column</p>
</li>
<li>
<p>Inserts the raw values into that table</p>
</li>
<li>
<p>Encrypts the raw data</p>
</li>
<li>
<p>Decrypts the encrypted data</p>
</li>
</ul>
<p>The <code class="codeph">blob_test.sql</code> procedure follows:</p>
<pre dir="ltr"><span class="bold">-- 1. Create a table for BLOB column:</span>
create table table_lob (id number, loc blob);

<span class="bold">-- 2. Insert 3 empty lobs for src/enc/dec:</span>
insert into table_lob values (1, EMPTY_BLOB());
insert into table_lob values (2, EMPTY_BLOB());
insert into table_lob values (3, EMPTY_BLOB());

set echo on
set serveroutput on

declare
    srcdata    RAW(1000);
    srcblob    BLOB;
    encrypblob BLOB;
    encrypraw  RAW(1000);
    encrawlen  BINARY_INTEGER;
    decrypblob BLOB;
    decrypraw  RAW(1000);
    decrawlen  BINARY_INTEGER;
    
    leng       INTEGER;

begin
    
    -- RAW input data 16 bytes
    srcdata := hextoraw(&#39;6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D&#39;);
    
    dbms_output.put_line(&#39;---&#39;);
    dbms_output.put_line(&#39;input is &#39; || srcdata);
    dbms_output.put_line(&#39;---&#39;);
    
    -- select empty lob locators for src/enc/dec
    select loc into srcblob from table_lob where id = 1;
    select loc into encrypblob from table_lob where id = 2;
    select loc into decrypblob from table_lob where id = 3;
    
    dbms_output.put_line(&#39;Created Empty LOBS&#39;);
    dbms_output.put_line(&#39;---&#39;);
    
    leng := DBMS_LOB.GETLENGTH(srcblob);
    IF leng IS NULL THEN
        dbms_output.put_line(&#39;Source BLOB Len NULL &#39;);
    ELSE
        dbms_output.put_line(&#39;Source BLOB Len &#39; || leng);
    END IF;
    
    leng := DBMS_LOB.GETLENGTH(encrypblob);
    IF leng IS NULL THEN
        dbms_output.put_line(&#39;Encrypt BLOB Len NULL &#39;);
    ELSE
        dbms_output.put_line(&#39;Encrypt BLOB Len &#39; || leng);
    END IF;
    
    leng := DBMS_LOB.GETLENGTH(decrypblob);
    IF leng IS NULL THEN
        dbms_output.put_line(&#39;Decrypt  BLOB Len NULL &#39;);
    ELSE
        dbms_output.put_line(&#39;Decrypt BLOB Len &#39; || leng);
    END IF;
    
   <span class="bold"> -- 3. Write source raw data into blob:</span>
    DBMS_LOB.OPEN (srcblob, DBMS_LOB.lob_readwrite);
    DBMS_LOB.WRITEAPPEND (srcblob, 16, srcdata);
    DBMS_LOB.CLOSE (srcblob);
    
    dbms_output.put_line(&#39;Source raw data written to source blob&#39;);
    dbms_output.put_line(&#39;---&#39;);
    
    leng := DBMS_LOB.GETLENGTH(srcblob);
    IF leng IS NULL THEN
        dbms_output.put_line(&#39;source BLOB Len NULL &#39;);
    ELSE
        dbms_output.put_line(&#39;Source BLOB Len &#39; || leng);
    END IF;
    
    /*
    * Procedure Encrypt
    * Arguments: srcblob -&gt; Source BLOB
    *            encrypblob -&gt; Output BLOB for encrypted data
    *            DBMS_CRYPTO.AES_CBC_PKCS5 -&gt; Algo : AES
    *                                         Chaining : CBC
    *                                         Padding : PKCS5
    *            256 bit key for AES passed as RAW
    *                -&gt;
    hextoraw(&#39;000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F&#39;)
    *            IV (Initialization Vector) for AES algo passed as RAW
    *                -&gt; hextoraw(&#39;00000000000000000000000000000000&#39;)
    */
    
    DBMS_CRYPTO.Encrypt(encrypblob,
                srcblob,
                DBMS_CRYPTO.AES_CBC_PKCS5,
                hextoraw (&#39;000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F&#39;),
                hextoraw(&#39;00000000000000000000000000000000&#39;));
    
    
    dbms_output.put_line(&#39;Encryption Done&#39;);
    dbms_output.put_line(&#39;---&#39;);
    
    leng := DBMS_LOB.GETLENGTH(encrypblob);
    IF leng IS NULL THEN
        dbms_output.put_line(&#39;Encrypt BLOB Len NULL&#39;);
    ELSE
        dbms_output.put_line(&#39;Encrypt BLOB Len &#39; || leng);
    END IF;
    
   <span class="bold"> -- 4. Read encrypblob to a raw:</span>
    encrawlen := 999;
    
    DBMS_LOB.OPEN (encrypblob, DBMS_LOB.lob_readwrite);
    DBMS_LOB.READ (encrypblob, encrawlen, 1, encrypraw);
    DBMS_LOB.CLOSE (encrypblob);
    
    dbms_output.put_line(&#39;Read encrypt blob to a raw&#39;);
    dbms_output.put_line(&#39;---&#39;);
    
    dbms_output.put_line(&#39;Encrypted data is (256 bit key) &#39; || encrypraw);
    dbms_output.put_line(&#39;---&#39;);
    
    /*
    * Procedure Decrypt
    * Arguments: encrypblob -&gt; Encrypted BLOB to decrypt
    *            decrypblob -&gt; Output BLOB for decrypted data in RAW
    *            DBMS_CRYPTO.AES_CBC_PKCS5 -&gt; Algo : AES
    *                                         Chaining : CBC
    *                                         Padding : PKCS5
    *            256 bit key for AES passed as RAW (same as used during Encrypt)
    *                -&gt;
    hextoraw(&#39;000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F&#39;)
    *            IV (Initialization Vector) for AES algo passed as RAW (same as
                 used during Encrypt)
    *                -&gt; hextoraw(&#39;00000000000000000000000000000000&#39;)
    */
    
    DBMS_CRYPTO.Decrypt(decrypblob,
                encrypblob,
                DBMS_CRYPTO.AES_CBC_PKCS5,
                hextoraw
           (&#39;000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F&#39;),
                hextoraw(&#39;00000000000000000000000000000000&#39;));
    
    leng := DBMS_LOB.GETLENGTH(decrypblob);
    IF leng IS NULL THEN
        dbms_output.put_line(&#39;Decrypt BLOB Len NULL&#39;);
    ELSE
        dbms_output.put_line(&#39;Decrypt BLOB Len &#39; || leng);
    END IF;
    
    -- Read decrypblob to a raw
    decrawlen := 999;
    
    DBMS_LOB.OPEN (decrypblob, DBMS_LOB.lob_readwrite);
    DBMS_LOB.READ (decrypblob, decrawlen, 1, decrypraw);
    DBMS_LOB.CLOSE (decrypblob);
    
    dbms_output.put_line(&#39;Decrypted data is (256 bit key) &#39; || decrypraw);
    dbms_output.put_line(&#39;---&#39;);
    
    DBMS_LOB.OPEN (srcblob, DBMS_LOB.lob_readwrite);
    DBMS_LOB.TRIM (srcblob, 0);
    DBMS_LOB.CLOSE (srcblob);
    
    DBMS_LOB.OPEN (encrypblob, DBMS_LOB.lob_readwrite);
    DBMS_LOB.TRIM (encrypblob, 0);
    DBMS_LOB.CLOSE (encrypblob);
    
    DBMS_LOB.OPEN (decrypblob, DBMS_LOB.lob_readwrite);
    DBMS_LOB.TRIM (decrypblob, 0);
    DBMS_LOB.CLOSE (decrypblob);
    
end;
/

truncate table table_lob;
drop table table_lob;
</pre></div>
</div>
</div>
<a id="DBSEG339"></a><a id="DBSEG338"></a>
<div class="props_rev_3"><a id="GUID-FE23ADE1-8140-4695-AC92-FE5085C16D6C"></a>
<h2 id="DBSEG-GUID-FE23ADE1-8140-4695-AC92-FE5085C16D6C" class="sect2">Data Dictionary Views for Encrypted Data</h2>
<div>
<p>Oracle Database provides data dictionary views to find information about encrypted data.</p>
<p><a href="data_encryption.htm#GUID-FE23ADE1-8140-4695-AC92-FE5085C16D6C__CHDGJHEG" title="Encryption Views">Table 12-2</a> lists these data dictionary views.</p>
<div class="tblformalwide" id="GUID-FE23ADE1-8140-4695-AC92-FE5085C16D6C__CHDGJHEG">
<p class="titleintable">Table 12-2 Data Dictionary Views That Display Information about Encrypted Data</p>
<table class="cellalignment3691" title="Data Dictionary Views That Display Information about Encrypted Data" summary="Encryption Views">
<thead>
<tr class="cellalignment3671">
<th class="cellalignment3692" id="d91024e2686">View</th>
<th class="cellalignment3693" id="d91024e2689">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3671">
<td class="cellalignment3694" id="d91024e2694" headers="d91024e2686">
<p><code class="codeph">ALL_ENCRYPTED_COLUMNS</code></p>
</td>
<td class="cellalignment3695" headers="d91024e2694 d91024e2689">
<p>Describes encryption algorithm information for all encrypted columns in all tables accessible to the user</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3694" id="d91024e2703" headers="d91024e2686">
<p><code class="codeph">DBA_ENCRYPTED_COLUMNS</code></p>
</td>
<td class="cellalignment3695" headers="d91024e2703 d91024e2689">
<p>Describes encryption algorithm information for all encrypted columns in the database</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3694" id="d91024e2711" headers="d91024e2686">
<p><code class="codeph">USER_ENCRYPTED_COLUMNS</code></p>
</td>
<td class="cellalignment3695" headers="d91024e2711 d91024e2689">
<p>Describes encryption algorithm information for all encrypted columns in all tables in the schema of the user</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3694" id="d91024e2719" headers="d91024e2686">
<p><code class="codeph">V$ENCRYPTED_TABLESPACES</code></p>
</td>
<td class="cellalignment3695" headers="d91024e2719 d91024e2689">
<p>Displays information about the current pluggable database (PDB) tablespaces that are encrypted</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3694" id="d91024e2728" headers="d91024e2686">
<p><code class="codeph">V$ENCRYPTION_WALLET</code></p>
</td>
<td class="cellalignment3695" headers="d91024e2728 d91024e2689">
<p>Displays information on the status of the wallet and the wallet location for Transparent Data Encryption; applies to the current PDB only</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3694" id="d91024e2737" headers="d91024e2686">
<p><code class="codeph">V$RMAN_ENCRYPTION_ALGORITHMS</code></p>
</td>
<td class="cellalignment3695" headers="d91024e2737 d91024e2689">
<p>Displays supported encryption algorithms for the current PDB</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<div class="infoboxnotealso" id="GUID-FE23ADE1-8140-4695-AC92-FE5085C16D6C__GUID-217EFD56-E5D1-4140-8B5E-1126917B5B61">
<p class="notep1">See Also:</p>
<a class="olink REFRN" target="_blank" href="../REFRN/toc.htm"><span><cite>Oracle Database Reference</cite></span></a> for detailed information about these views</div>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3670">
<tr>
<td class="cellalignment3684">
<table class="cellalignment3675">
<tr>
<td class="cellalignment3674"><a href="tsdp.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3674"><a href="part_4.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2006, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3686">
<table class="cellalignment3673">
<tr>
<td class="cellalignment3674"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3674"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3674"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3674"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3674"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3674"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>