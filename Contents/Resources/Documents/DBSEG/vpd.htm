<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-5336"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Using%20Oracle%20Virtual%20Private%20Database%20to%C2%A0Control%C2%A0Data%20Access"></a><title>Using Oracle Virtual Private Database to&nbsp;Control&nbsp;Data Access</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="description" content="Oracle Virtual Private Database (VPD) enables you to filter users who access data. You can accomplish this by dynamically including a WHERE clause in SELECT that the user uses to query data."/>
<meta name="keywords" content="Oracle Virtual Private Database (VPD), about, VPD, Oracle Virtual Private Database, Virtual Private Database, row-level security, fine-grained access control, Oracle Virtual Private Database (VPD), benefits, databases, security policies based on, security, policies, tables or views, fine-grained access control, performance benefit, performance, Oracle Virtual Private Database policies, privileges required to create policies, function, how it is executed, definer&rsquo;s rights, used with Oracle Virtual Private Database functions, AUTHID DEFINER clause, privileges, used for Oracle Virtual Private Database policy functions, policies, Oracle Virtual Private Database, privileges used to run, functions, application contexts, Oracle Virtual Private Database, used with, used with, bind variables, application contexts, used with, returning predicate, cursors, shared, used with Virtual Private Database, cursors, shared, CDBs, Virtual Private Database policies, PDBs, components, components of, configuring, attaching to database object, MERGE INTO statement, affected by DBMS_RLS.ADD_POLICY statement_types parameter, SQL statements, specifying, statement_types parameter of DBMS_RLS.ADD_POLICY procedure, column display, column-level display, column level, DBMS_RLS.ADD_POLICY, sec_relevant_cols parameter, column-level display, default, column masking behavior, enabling, restrictions, sec_relevant_cols_opt parameter, column specification, policy groups, used in, policy groups, security policies, Oracle Virtual Private Database, policies, creating, default, SYS_DEFAULT Oracle Virtual Private Database policy group, applications, multiple, validating with security policies, applications, validating, optimizing performance, Oracle Virtual Private Database policy types, policy types, DYNAMIC, DYNAMIC policy type, policies, Oracle Virtual Private Database, dynamic, dynamic Oracle Virtual Private Database policy types, static, about, shared static, about, static, when to use, shared static, when to use, context sensitive, about, context sensitive, restricting evaluation, context sensitive, creating, context sensitive, refreshing, context sensitive, altering existing policy, shared context sensitive, about, context sensitive, when to use, shared context sensitive, when to use, summary of features, examples, tutorials, tutorial, simple, Oracle Virtual Private Database, simple example, policy implementing, tutorial, lightweight users, Lightweight Directory Access Protocol (LDAP), tutorial, implementation, nondatabase users, creating Oracle Virtual Private Database policy group, tutorial for creating a policy group, edition-based redefinitions, SELECT FOR UPDATE statements in policies, SELECT FOR UPDATE statement in Virtual Private Database policies, outer join operations, Oracle Virtual Private Database affect on, ANSI operations, ANSI operations, how it works with, Oracle Virtual Private Database, how it works with, security limitations, automatic reparsing, how it works with, automatic reparse, flashback query, how it works with, flashback query, Oracle Label Security, using with, Oracle Label Security (OLS), Oracle Virtual Private Database, using with, exporting data, direct path export impact on Oracle Virtual Private Database, exporting data, policy enforcement, EXEMPT ACCESS POLICY privilege, Oracle Virtual Private Database enforcements, exemption, exceptions in behavior, SYS account, exporting data using Data Pump Export, Oracle Data Pump, exported data from VPD policies, user models, users, user models and Oracle Virtual Private Database, users who are database users, how it works with, application users who are database users, OCI proxy authentication, how it works with, Oracle Call Interface (OCI), proxy authentication, JDBC proxy authentication, how it works with, JDBC connections, JDBC/OCI proxy authentication, Enterprise User Security proxy authentication, how it works with, Enterprise User Security, One Big Application User authentication, nondatabase user applications, how works with, how it works with, global application contexts, used for One Big Application User scenarios, uses for, Web-based applications, how it works with, Web-based applications, finding information about, views, Oracle Virtual Private Database policies"/>
<meta name="dcterms.created" content="2017-06-05T11:20:26Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Security Guide"/>
<meta name="dcterms.identifier" content="E48135-19"/>
<meta name="dcterms.isVersionOf" content="DBSEG"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2006, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="app_context.htm" title="Previous" type="text/html"/>
<link rel="Next" href="tsdp.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E48135-19.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-06022729-9210-4895-BF04-6177713C65A7"></a> <span id="PAGE" style="display:none;">18/44</span> <!-- End Header -->
<script>
//<![CDATA[
window.name='vpd'
//]]>
</script> <script>
    function footdisplay(footnum,footnote) {
    var msg = window.open('about:blank', 'NewWindow' + footnum,
        'directories=no,height=100,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');
    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">'); 
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en-us" ><head><title>');
   
    msg.document.write('Footnote&amp;nbsp; ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><div id="footnote"><h1>Footnote&nbsp; ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/div><\/body><\/html>');
    msg.document.close();
    setTimeout(function() {
        var height = msg.document.getElementById('footnote').offsetHeight;
        msg.resizeTo(598, height + 100);
    }
    , 100);
    msg.focus();
}
</script><noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript><a id="DBSEG007"></a>
<h1 id="DBSEG-GUID-06022729-9210-4895-BF04-6177713C65A7" class="sect1"><span class="enumeration_chapter">10</span> Using Oracle Virtual Private Database to&nbsp;Control&nbsp;Data Access</h1>
<div>
<p>Oracle Virtual Private Database (VPD) enables you to filter users who access data. You can accomplish this by dynamically including a <code class="codeph">WHERE</code> clause in <code class="codeph">SELECT</code> that the user uses to query data.</p>
<p>Topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="vpd.htm#GUID-8AB08B54-5858-4A6F-B1F2-43F7C5922DD8" title="Oracle Virtual Private Database (VPD) provides important benefits for filtering user access to data. You can incorporate the use of application contexts in VPD policies.">About Oracle Virtual Private Database</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-486517C7-EECD-4F1C-AA40-6C13C46565D3" title="To implement Oracle Virtual Private Database, you must create a function to generate the dynamic WHERE clause, and a policy to attach this function to the objects that you want to protect.">Components of an Oracle Virtual Private Database Policy</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-8F39CFC1-E210-4011-9D49-F84E91AF41CB" title="You can use the DBMS_RLS PL/SQL package to configure Oracle Virtual Private Database (VPD) policies.">Configuration of Oracle Virtual Private Database Policies</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-2113CF3C-D950-40B3-A121-A44284EF104D" title="The tutorials in this section show how to create a simple Oracle Virtual Private (VPD) policies, a policy that has a database session-based application context, and a policy group.">Tutorials: Creating Oracle Virtual Private Database Policies</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-496F4B53-7206-4CDF-8F45-016067D0303D" title="You should be aware of the impact of using Oracle Virtual Private Database (VPD) with other Oracle features, such as SELECT FOR UPDATE statements, join operations, applications, and editions.">How Oracle Virtual Private Database Works with Other Oracle Features</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-09300037-0440-4212-B28A-1EABEA6ABDB2" title="Oracle Database provides data dictionary views that list information about Oracle Virtual Private Database policies.">Oracle Virtual Private Database Data Dictionary Views</a></p>
</li>
</ul>
</div>
<a id="DBSEG80081"></a>
<div class="props_rev_3"><a id="GUID-8AB08B54-5858-4A6F-B1F2-43F7C5922DD8"></a>
<h2 id="DBSEG-GUID-8AB08B54-5858-4A6F-B1F2-43F7C5922DD8" class="sect2">About Oracle Virtual Private Database</h2>
<div>
<p>Oracle Virtual Private Database (VPD) provides important benefits for filtering user access to data. You can incorporate the use of application contexts in VPD policies.</p>
<p>Topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="vpd.htm#GUID-4F37BAE5-CA2E-42AC-9CDF-EC9181671FFE" title="Oracle Virtual Private Database (VPD) creates security policies to control database access at the row and column level.">What Is Oracle Virtual Private Database?</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-AE9A0A2A-0F0B-4410-BB54-AECD6AE068BD" title="Oracle Virtual Private Database policies provide the important benefits.">Benefits of Using Oracle Virtual Private Database Policies</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-7E73FA77-9056-41A7-8062-7F22D035F364" title="The DBMS_RLS PL/SQL package enables you to create VPD policies.">Who Can Create Oracle Virtual Private Database Policies?</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-6F30A5EA-87A9-4D8B-8DBA-789704E8400F" title="You should be aware of the correct privileges for running Oracle Virtual Private Database (VPD) policy functions.">Privileges to Run Oracle Virtual Private Database Policy Functions</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-36849380-3641-4485-B03F-3D494158BAB3" title="You can use application contexts with Oracle Virtual Private Database policies.">Oracle Virtual Private Database Use with an Application Context</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-E6343F14-933E-4980-A67A-D5AAEC5743C5" title="In a multitenant environment, Oracle Virtual Private Database policies apply only to the objects within the current pluggable database (PDB).">Oracle Virtual Private Database in a Multitenant Environment</a></p>
</li>
</ul>
</div>
<a id="DBSEG235"></a>
<div class="props_rev_3"><a id="GUID-4F37BAE5-CA2E-42AC-9CDF-EC9181671FFE"></a>
<h3 id="DBSEG-GUID-4F37BAE5-CA2E-42AC-9CDF-EC9181671FFE" class="sect3">What Is Oracle Virtual Private Database?</h3>
<div>
<p>Oracle Virtual Private Database (VPD) creates security policies to control database access at the row and column level.</p>
<p>Essentially, Oracle Virtual Private Database adds a dynamic <code class="codeph">WHERE</code> clause to a SQL statement that is issued against the table, view, or synonym to which an Oracle Virtual Private Database security policy was applied.</p>
<p>Oracle Virtual Private Database enforces security, to a fine level of granularity, directly on database tables, views, or synonyms. Because you attach security policies directly to these database objects, and the policies are automatically applied whenever a user accesses data, there is no way to bypass security.</p>
<p>When a user directly or indirectly accesses a table, view, or synonym that is protected with an Oracle Virtual Private Database policy, Oracle Database dynamically modifies the SQL statement of the user. This modification creates a <code class="codeph">WHERE</code> condition (called a predicate) returned by a function implementing the security policy. Oracle Database modifies the statement dynamically, transparently to the user, using any condition that can be expressed in or returned by a function. You can apply Oracle Virtual Private Database policies to <code class="codeph">SELECT</code>, <code class="codeph">INSERT</code>, <code class="codeph">UPDATE</code>, <code class="codeph">INDEX</code>, and <code class="codeph">DELETE</code> statements.</p>
<p>For example, suppose a user performs the following query:</p>
<pre dir="ltr">SELECT * FROM OE.ORDERS;
</pre>
<p>The Oracle Virtual Private Database policy dynamically appends the statement with a <code class="codeph">WHERE</code> clause. For example:</p>
<pre dir="ltr">SELECT * FROM OE.ORDERS 
 WHERE SALES_REP_ID = 159;
</pre>
<p>In this example, the user can only view orders by Sales Representative 159.</p>
<p>If you want to filter the user based on the session information of that user, such as the ID of the user, then you can create the <code class="codeph">WHERE</code> clause to use an application context. For example:</p>
<pre dir="ltr">SELECT * FROM OE.ORDERS 
 WHERE SALES_REP_ID = SYS_CONTEXT(&#39;USERENV&#39;,&#39;SESSION_USER&#39;); 
</pre>
<div class="infobox-note" id="GUID-4F37BAE5-CA2E-42AC-9CDF-EC9181671FFE__GUID-6C59F3CD-71C6-4728-AA45-A01CE1527BEE">
<p class="notep1">Note:</p>
<p>Oracle Virtual Private Database does not support filtering for DDLs, such as <code class="codeph">TRUNCATE</code> or <code class="codeph">ALTER TABLE</code> statements.</p>
</div>
</div>
</div>
<a id="DBSEG236"></a>
<div class="props_rev_3"><a id="GUID-AE9A0A2A-0F0B-4410-BB54-AECD6AE068BD"></a>
<h3 id="DBSEG-GUID-AE9A0A2A-0F0B-4410-BB54-AECD6AE068BD" class="sect3">Benefits of Using Oracle Virtual Private Database Policies</h3>
<div>
<p>Oracle Virtual Private Database policies provide the important benefits.</p>
<p>Topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="vpd.htm#GUID-C21458A6-65DE-4F32-9210-789F5531CB7D" title="Oracle Virtual Private Database provides benefits in security, simplicity, and flexibility.">Security Policies Based on Database Objects Rather Than Applications</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-2F856DCB-BEE1-45D0-88E2-B3D10CB55644" title="Running policy functions multiple times can affect performance.">Control Over How Oracle Database Evaluates Policy Functions</a></p>
</li>
</ul>
</div>
<a id="DBSEG237"></a>
<div class="props_rev_3"><a id="GUID-C21458A6-65DE-4F32-9210-789F5531CB7D"></a>
<h4 id="DBSEG-GUID-C21458A6-65DE-4F32-9210-789F5531CB7D" class="sect4">Security Policies Based on Database Objects Rather Than Applications</h4>
<div>
<p>Oracle Virtual Private Database provides benefits in security, simplicity, and flexibility.</p>
<p>Attaching Oracle Virtual Private Database security policies to database tables, views, or synonyms, rather than implementing access controls in all your applications, provides the following benefits:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold">Security.</span> Associating a policy with a database table, view, or synonym can solve a potentially serious application security problem. Suppose a user is authorized to use an application, and then drawing on the privileges associated with that application, wrongfully modifies the database by using an ad hoc query tool, such as SQL*Plus. By attaching security policies directly to tables, views, or synonyms, fine-grained access control ensures that the same security is in force, no matter how a user accesses the data.</p>
</li>
<li>
<p><span class="bold">Simplicity.</span> You add the security policy to a table, view, or synonym only once, rather than repeatedly adding it to each of your table-based, view-based, or synonym-based applications.</p>
</li>
<li>
<p><span class="bold">Flexibility.</span> You can have one security policy for <code class="codeph">SELECT</code> statements, another for <code class="codeph">INSERT</code> statements, and still others for <code class="codeph">UPDATE</code> and <code class="codeph">DELETE</code> statements. For example, you might want to enable Human Resources clerks to have <code class="codeph">SELECT</code> privileges for all employee records in their division, but to update only salaries for those employees in their division whose last names begin with <code class="codeph">A</code> through <code class="codeph">F</code>. Furthermore, you can create multiple policies for each table, view, or synonym.</p>
</li>
</ul>
</div>
</div>
<a id="DBSEG238"></a>
<div class="props_rev_3"><a id="GUID-2F856DCB-BEE1-45D0-88E2-B3D10CB55644"></a>
<h4 id="DBSEG-GUID-2F856DCB-BEE1-45D0-88E2-B3D10CB55644" class="sect4">Control Over How Oracle Database Evaluates Policy Functions</h4>
<div>
<p>Running policy functions multiple times can affect performance.</p>
<p>You can control the performance of policy functions by configuring how Oracle Database caches the Oracle Virtual Private Database predicates.</p>
<p>The following options are available:</p>
<ul style="list-style-type: disc;">
<li>
<p>Evaluate the policy once for each query (static policies).</p>
</li>
<li>
<p>Evaluate the policy only when an application context within the policy function changes (context-sensitive policies).</p>
</li>
<li>
<p>Evaluate the policy each time it is run (dynamic policies).</p>
</li>
</ul>
<p>See <a href="vpd.htm#GUID-EE56D7A9-BBF5-477E-ADFD-95CEDE1CBAAD" title="You can optimize performance by using Oracle Virtual Private Database (VPD) the dynamic, static, or shared policy types. You can use context sensitive policies to share a policy with multiple objects.">Optimizing Performance by Using Oracle Virtual Private Database Policy Types</a> for information configuring these policy types.</p>
</div>
</div>
</div>
<a id="DBSEG884"></a>
<div class="props_rev_3"><a id="GUID-7E73FA77-9056-41A7-8062-7F22D035F364"></a>
<h3 id="DBSEG-GUID-7E73FA77-9056-41A7-8062-7F22D035F364" class="sect3">Who Can Create Oracle Virtual Private Database Policies?</h3>
<div>
<p>The <code class="codeph">DBMS_RLS</code> PL/SQL package enables you to create VPD policies.</p>
<p>Users who have been granted the <code class="codeph">EXECUTE</code> privilege on the <code class="codeph">DBMS_RLS</code> PL/SQL package can create Oracle Virtual Private Database policies. As with all privileges, only grant this privilege to trusted users. You can find the privileges that a user has been granted by querying the <span class="apiname">DBA_SYS_PRIVS</span> data dictionary view.</p>
</div>
</div>
<a id="DBSEG239"></a>
<div class="props_rev_3"><a id="GUID-6F30A5EA-87A9-4D8B-8DBA-789704E8400F"></a>
<h3 id="DBSEG-GUID-6F30A5EA-87A9-4D8B-8DBA-789704E8400F" class="sect3">Privileges to Run Oracle Virtual Private Database Policy Functions</h3>
<div>
<p>You should be aware of the correct privileges for running Oracle Virtual Private Database (VPD) policy functions.</p>
<p>For greater security, the Oracle Virtual Private Database policy function runs as if it had been declared with definer&#39;s rights.</p>
<p>Do not declare it as invoker&#39;s rights because this can confuse yourself and other users who maintain the code.</p>
<div class="infoboxnotealso" id="GUID-6F30A5EA-87A9-4D8B-8DBA-789704E8400F__GUID-A0EB17CF-46F2-40B1-9C4E-77C30CA7F2B3">
<p class="notep1">See Also:</p>
<p><a class="olink LNPLS00809" target="_blank" href="../LNPLS/subprograms.htm#LNPLS00809"><span><cite>Oracle Database PL/SQL Language Reference</cite></span></a> for detailed information about definer&#39;s rights</p>
</div>
</div>
</div>
<a id="DBSEG240"></a>
<div class="props_rev_3"><a id="GUID-36849380-3641-4485-B03F-3D494158BAB3"></a>
<h3 id="DBSEG-GUID-36849380-3641-4485-B03F-3D494158BAB3" class="sect3">Oracle Virtual Private Database Use with an Application Context</h3>
<div>
<p>You can use application contexts with Oracle Virtual Private Database policies.</p>
<p>When you create an application context, it securely caches user information. Only the designated application package can set the cached environment. It cannot be changed by the user or outside the package. In addition, because the data is cached, performance is increased. <a href="app_context.htm#GUID-51C9D5FA-6787-4F05-82EF-A5968BEDC5A0" title="An application context stores user identification, which can be used to enable or prevent a user from having access to data in the database.">Using Application Contexts to&nbsp;Retrieve&nbsp;User&nbsp;Information</a>, describes application contexts in detail.</p>
<p>For example, suppose you want to base access to the <code class="codeph">ORDERS_TAB</code> table on the customer ID number. Rather than querying the customer ID number for a logged-in user each time you need it, you could store the number in the application context. Then, the customer number is available in the session when you need it.</p>
<p>Application contexts are especially helpful if your security policy is based on multiple security attributes. For example, if a policy function bases a <code class="codeph">WHERE</code> predicate on four attributes (such as employee number, cost center, position, spending limit), then multiple subqueries must execute to retrieve this information. Instead, if this data is available through an application context, then performance is much faster.</p>
<p>You can use an application context to return the correct security policy, enforced through a predicate. For example, consider an order entry application that enforces the following rules: customers only see their own orders, and clerks see all orders for all customers. These are two different policies. You could define an application context with a <code class="codeph">position</code> attribute, and this attribute could be accessed within the policy function to return the correct predicate, depending on the value of the attribute. Thus, you can enable a user in the <code class="codeph">clerk</code> position to retrieve all orders, but a user in the <code class="codeph">customer</code> position can see only those records associated with that particular user.</p>
<p>To design a fine-grained access control policy that returns a specific predicate for an attribute, you need to access the application context within the function that implements the policy. For example, suppose you want to limit customers to seeing only their own records. The user performs the following query:</p>
<pre dir="ltr">SELECT * FROM orders_tab
</pre>
<p>Fine-grained access control dynamically modifies this query to include the following <code class="codeph">WHERE</code> predicate:</p>
<pre dir="ltr">SELECT * FROM orders_tab 
  WHERE custno = SYS_CONTEXT (&#39;order_entry&#39;, &#39;cust_num&#39;);
</pre>
<p>Continuing with the preceding example, suppose you have 50,000 customers, and you do not want to have a different predicate returned for each customer. Customers all share the same <code class="codeph">WHERE</code> predicate, which prescribes that they can only see their own orders. It is merely their customer numbers that are different.</p>
<p>Using application context, you can return one <code class="codeph">WHERE</code> predicate within a policy function that applies to 50,000 customers. As a result, there is one shared cursor that executes differently for each customer, because the customer number is evaluated at execution time. This value is different for every customer. Use of application context in this case provides optimum performance, and at row-level security.</p>
<p>The <code class="codeph">SYS_CONTEXT</code> function works much like a bind variable; only the <code class="codeph">SYS_CONTEXT</code> arguments are constants.</p>
</div>
</div>
<a id="DBSEG592"></a>
<div class="props_rev_3"><a id="GUID-E6343F14-933E-4980-A67A-D5AAEC5743C5"></a>
<h3 id="DBSEG-GUID-E6343F14-933E-4980-A67A-D5AAEC5743C5" class="sect3">Oracle Virtual Private Database in a Multitenant Environment</h3>
<div>
<p>In a multitenant environment, Oracle Virtual Private Database policies apply only to the objects within the current pluggable database (PDB).</p>
<p>This restriction applies to including shared context sensitive policies and views related to VPD policies as well. You cannot create a Virtual Private Database policy for an entire multitenant environment.</p>
</div>
</div>
</div>
<a id="DBSEG241"></a>
<div class="props_rev_3"><a id="GUID-486517C7-EECD-4F1C-AA40-6C13C46565D3"></a>
<h2 id="DBSEG-GUID-486517C7-EECD-4F1C-AA40-6C13C46565D3" class="sect2">Components of an Oracle Virtual Private Database Policy</h2>
<div>
<p>To implement Oracle Virtual Private Database, you must create a function to generate the dynamic <code class="codeph">WHERE</code> clause, and a policy to attach this function to the objects that you want to protect.</p>
<p>Topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="vpd.htm#GUID-532B05E7-2E08-4D8A-96B0-7F6EDD75DD14" title="The Oracle Virtual Private Database (VPD) function defines the restrictions that you want to enforce.">Function to Generate the Dynamic WHERE Clause</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-B90B6F53-66D4-4DDA-AB5B-8974E3F15DD7" title="The Oracle Virtual Private Database policy associates the VPD function with a table, view, or synonym.">Policies to Attach the Function to the Objects You Want to Protect</a></p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-486517C7-EECD-4F1C-AA40-6C13C46565D3__GUID-59E8B27E-9217-4F15-AF76-8C739DDE60C0">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="vpd.htm#GUID-6F30A5EA-87A9-4D8B-8DBA-789704E8400F" title="You should be aware of the correct privileges for running Oracle Virtual Private Database (VPD) policy functions.">Privileges to Run Oracle Virtual Private Database Policy Functions</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-2113CF3C-D950-40B3-A121-A44284EF104D" title="The tutorials in this section show how to create a simple Oracle Virtual Private (VPD) policies, a policy that has a database session-based application context, and a policy group.">Tutorials: Creating Oracle Virtual Private Database Policies</a></p>
</li>
</ul>
</div>
</div>
<a id="DBSEG242"></a>
<div class="props_rev_3"><a id="GUID-532B05E7-2E08-4D8A-96B0-7F6EDD75DD14"></a>
<h3 id="DBSEG-GUID-532B05E7-2E08-4D8A-96B0-7F6EDD75DD14" class="sect3">Function to Generate the Dynamic WHERE Clause</h3>
<div>
<p>The Oracle Virtual Private Database (VPD) function defines the restrictions that you want to enforce.</p>
<p>To generate the Oracle Virtual Private Database (VPD) dynamic <code class="codeph">WHERE</code> clause (predicate), you must create a function (not a procedure) that defines these restrictions.</p>
<p>Usually, the security administrator creates this function in his or her own schema. For more complex behavior, such as including calls to other functions or adding checks to track failed logon attempts, create these functions within a package.</p>
<p>The function must have the following behavior:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold">It must take as arguments a schema name and an object (table, view, or synonym) name as inputs.</span> Define input parameters to hold this information, but do not specify the schema and object name themselves within the function. The policy that you create with the <code class="codeph">DBMS_RLS</code> package (described in <a href="vpd.htm#GUID-B90B6F53-66D4-4DDA-AB5B-8974E3F15DD7" title="The Oracle Virtual Private Database policy associates the VPD function with a table, view, or synonym.">Policies to Attach the Function to the Objects You Want to Protect</a>) provides the names of the schema, and object to which the policy will apply. You must create the parameter for the schema first, followed by the parameter for the object.</p>
</li>
<li>
<p><span class="bold">It must provide a return value for the WHERE clause predicate that will be generated.</span> The return value for the <code class="codeph">WHERE</code> clause is always a <code class="codeph">VARCHAR2</code> data type.</p>
</li>
<li>
<p><span class="bold">It must generate a valid WHERE clause.</span> This code can be as basic as the example in <a href="vpd.htm#GUID-96F02E4D-4765-41BA-B834-DA54CC2E72B5" title="This tutorial uses the OE user account to demonstrate how to create a simple Oracle Virtual Private Database (VPD) policy.">Tutorial: Creating a Simple Oracle Virtual Private Database Policy</a>, in that its <code class="codeph">WHERE</code> clause is the same for all users who log on.</p>
<p>But in most cases, you may want to design the <code class="codeph">WHERE</code> clause to be different for each user, each group of users, or each application that accesses the objects you want to protect. For example, if a manager logs in, the <code class="codeph">WHERE</code> clause can be specific to the rights of that particular manager. You can do this by incorporating an application context, which accesses user session information, into the <code class="codeph">WHERE</code> clause generation code. <a href="vpd.htm#GUID-52A959FA-E021-4C3A-B532-0C6289BDD50F" title="This tutorial demonstrates how to create an Oracle Virtual Private Database policy that uses a database session-based application context.">Tutorial: Implementing a Session-Based Application Context Policy</a> demonstrates how to create an Oracle Virtual Private Database policy that uses an application context.</p>
<p>You can create Oracle Virtual Private Database functions that do not use an application context, but an application context creates a much stronger Oracle Virtual Private Database policy, by securely basing user access on the session attributes of that user, such as the user ID. <a href="app_context.htm#GUID-51C9D5FA-6787-4F05-82EF-A5968BEDC5A0" title="An application context stores user identification, which can be used to enable or prevent a user from having access to data in the database.">Using Application Contexts to&nbsp;Retrieve&nbsp;User&nbsp;Information</a>, discusses different types of application contexts in detail.</p>
<p>In addition, you can embed C or Java calls to access operating system information or to return <code class="codeph">WHERE</code> clauses from an operating system file or other source.</p>
</li>
<li>
<p><span class="bold">It must not select from a table within the associated policy function.</span> Although you can define a policy against a table, you cannot select that table from within the policy that was defined against the table.</p>
</li>
<li>
<p><span class="bold">It must be a pure function.</span> The VPD function must rely only on the application context and the arguments that are passed to the function to generate the <code class="codeph">WHERE</code> clause. This function must not depend on the package variables.</p>
</li>
</ul>
<div class="infobox-note" id="GUID-532B05E7-2E08-4D8A-96B0-7F6EDD75DD14__GUID-9D8BABA9-F280-4A10-89FF-29F8F6391D65">
<p class="notep1">Note:</p>
<p>If you plan to run the function across different editions, you can control the results of the function: whether the results are uniform across all editions, or specific to the edition in which the function is run. See <a href="app_context.htm#GUID-075BCAB6-8462-4825-B738-B81F31DF033A" title="Global application context packages, Oracle Virtual Private Database packages, and fine-grained audit policies can be used across multiple editions.">How Editions Affects the Results of a Global Application Context PL/SQL Package</a> for more information.</p>
</div>
</div>
</div>
<a id="DBSEG243"></a>
<div class="props_rev_3"><a id="GUID-B90B6F53-66D4-4DDA-AB5B-8974E3F15DD7"></a>
<h3 id="DBSEG-GUID-B90B6F53-66D4-4DDA-AB5B-8974E3F15DD7" class="sect3">Policies to Attach the Function to the Objects You Want to Protect</h3>
<div>
<p>The Oracle Virtual Private Database policy associates the VPD function with a table, view, or synonym.</p>
<p>You create the policy by using the <code class="codeph">DBMS_RLS</code> package. If you are not <code class="codeph">SYS</code>, then you must be granted <code class="codeph">EXECUTE</code> privileges to use the <code class="codeph">DBMS_RLS</code> package. This package contains procedures that enable you to manage the policy and set fine-grained access control. For example, to attach the policy to a table, you use the <code class="codeph">DBMS_RLS.ADD_POLICY</code> procedure. Within this setting, you set fine-grained access control, such as setting the policy to go into effect when a user issues a <code class="codeph">SELECT</code> or <code class="codeph">UPDATE</code> statement on the table or view.</p>
<p>The combination of creating the function and then applying it to a table or view is referred to as creating the Oracle Virtual Private Database policy.</p>
<div class="infoboxnotealso" id="GUID-B90B6F53-66D4-4DDA-AB5B-8974E3F15DD7__GUID-F9A7A4D3-783D-411F-8615-A38F72D28893">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="vpd.htm#GUID-8F39CFC1-E210-4011-9D49-F84E91AF41CB" title="You can use the DBMS_RLS PL/SQL package to configure Oracle Virtual Private Database (VPD) policies.">Configuration of Oracle Virtual Private Database Policies</a> for detailed information</p>
</li>
<li>
<p><a href="vpd.htm#GUID-2113CF3C-D950-40B3-A121-A44284EF104D" title="The tutorials in this section show how to create a simple Oracle Virtual Private (VPD) policies, a policy that has a database session-based application context, and a policy group.">Tutorials: Creating Oracle Virtual Private Database Policies</a> for examples of how to create Virtual Private Database policies</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<a id="DBSEG244"></a>
<div class="props_rev_3"><a id="GUID-8F39CFC1-E210-4011-9D49-F84E91AF41CB"></a>
<h2 id="DBSEG-GUID-8F39CFC1-E210-4011-9D49-F84E91AF41CB" class="sect2">Configuration of Oracle Virtual Private Database Policies</h2>
<div>
<p>You can use the <code class="codeph">DBMS_RLS</code> PL/SQL package to configure Oracle Virtual Private Database (VPD) policies.</p>
<p>Topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="vpd.htm#GUID-2E214F39-0739-4578-B3F9-36AC93E110CD" title="The Oracle Virtual Private Database policy associates the VPD function with a database table, view, or synonym.">About Oracle Virtual Private Database Policies</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-FEEE8343-84E9-4BE7-B638-7DBE0C6ED815" title="The DBMS_RLS PL/SQL package can attach a policy to a table, view, or synonym.">Attaching a Policy to a Database Table, View, or Synonym</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-2355CB50-CBF4-4C93-B207-FEF549B4FE13" title="The DBMS_RLS.ADD_POLICY procedure can attach an Oracle Virtual Private Database (VPD) policy to a table, view, or synomym.">Example: Attaching a Simple Oracle Virtual Private Database Policy to a Table</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-B05F730E-45C2-4071-8A0F-A69AD7516C66" title="You can enforce Oracle Virtual Private Database policies for SELECT, INSERT, UPDATE, INDEX, and DELETE statements.">Enforcing Policies on Specific SQL Statement Types</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-C2AE2671-5B09-42DB-82C3-44320CBE4501" title="The DBMS_RLS.ADD_POLICY procedure statement_types parameter can specify the SELECT and INDEX statements for a policy.">Example: Specifying SQL Statement Types with DBMS_RLS.ADD_POLICY</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-1E2916F5-7DB8-48C4-B274-5C0EF931F218" title="You can create policies that enforce row-level security when a security-relevant column is referenced in a query.">Control of the Display of Column Data with Policies</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-011EB74C-42DD-4817-A847-5BB28D67F6BE" title="An Oracle Virtual Private Database policy group is a named collection of VPD policies that can be applied to an application.">Oracle Virtual Private Database Policy Groups</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-EE56D7A9-BBF5-477E-ADFD-95CEDE1CBAAD" title="You can optimize performance by using Oracle Virtual Private Database (VPD) the dynamic, static, or shared policy types. You can use context sensitive policies to share a policy with multiple objects.">Optimizing Performance by Using Oracle Virtual Private Database Policy Types</a></p>
</li>
</ul>
</div>
<a id="DBSEG246"></a><a id="DBSEG245"></a>
<div class="props_rev_3"><a id="GUID-2E214F39-0739-4578-B3F9-36AC93E110CD"></a>
<h3 id="DBSEG-GUID-2E214F39-0739-4578-B3F9-36AC93E110CD" class="sect3">About Oracle Virtual Private Database Policies</h3>
<div>
<p>The Oracle Virtual Private Database policy associates the VPD function with a database table, view, or synonym.</p>
<p>This function defines the actions of the Oracle Virtual Private Database <code class="codeph">WHERE</code> clause. You must then associate this function with the database table to which the Oracle Virtual Private Database (VPD) action applies.</p>
<p>You can do this by configuring an Oracle Virtual Private Database policy. The policy itself is a mechanism for managing the Virtual Private Database function. The policy also enables you to add fine-grained access control, such as specifying the types of SQL statements or particular table columns the policy affects. When a user tries to access the data in this database object, the policy goes into effect automatically.</p>
<p><a href="vpd.htm#GUID-2E214F39-0739-4578-B3F9-36AC93E110CD__G1015641" title="This table lists the procedures that have been defined for the DBMS_RLS package and their purpose.">Table 10-1</a> lists the procedures in the <code class="codeph">DBMS_RLS</code> package.</p>
<div class="tblformal" id="GUID-2E214F39-0739-4578-B3F9-36AC93E110CD__G1015641">
<p class="titleintable">Table 10-1 DBMS_RLS Procedures</p>
<table class="cellalignment3677" title="DBMS_RLS Procedures" summary="This table lists the procedures that have been defined for the DBMS_RLS package and their purpose.">
<thead>
<tr class="cellalignment3671">
<th class="cellalignment3789" id="d76065e1770">Procedure</th>
<th class="cellalignment3790" id="d76065e1773">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3671">
<td class="cellalignment3791" id="d76065e1778" headers="d76065e1770">
<p><span class="bold">For Handling Individual Policies</span></p>
</td>
<td class="cellalignment3792" headers="d76065e1778 d76065e1773">
<p>-</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3791" id="d76065e1786" headers="d76065e1770">
<p><code class="codeph">DBMS_RLS.ADD_POLICY</code></p>
</td>
<td class="cellalignment3792" headers="d76065e1786 d76065e1773">
<p>Adds a policy to a table, view, or synonym</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3791" id="d76065e1794" headers="d76065e1770">
<p><code class="codeph">DBMS_RLS.ENABLE_POLICY</code></p>
</td>
<td class="cellalignment3792" headers="d76065e1794 d76065e1773">
<p>Enables (or disables) a policy you previously added to a table, view, or synonym</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3791" id="d76065e1802" headers="d76065e1770">
<p><code class="codeph">DBMS_RLS.ALTER_POLICY</code></p>
</td>
<td class="cellalignment3792" headers="d76065e1802 d76065e1773">
<p>Alters an existing policy to associate or disassociate attributes with the policy</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3791" id="d76065e1810" headers="d76065e1770">
<p><code class="codeph">DBMS_RLS.REFRESH_POLICY</code></p>
</td>
<td class="cellalignment3792" headers="d76065e1810 d76065e1773">
<p>Invalidates cursors associated with nonstatic policies</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3791" id="d76065e1818" headers="d76065e1770">
<p><code class="codeph">DBMS_RLS.DROP_POLICY</code></p>
</td>
<td class="cellalignment3792" headers="d76065e1818 d76065e1773">
<p>To drop a policy from a table, view, or synonym</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3791" id="d76065e1826" headers="d76065e1770">
<p><span class="bold">For Handling Grouped Policies</span></p>
</td>
<td class="cellalignment3792" headers="d76065e1826 d76065e1773">
<p>-</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3791" id="d76065e1834" headers="d76065e1770">
<p><code class="codeph">DBMS_RLS.CREATE_POLICY_GROUP</code></p>
</td>
<td class="cellalignment3792" headers="d76065e1834 d76065e1773">
<p>Creates a policy group</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3791" id="d76065e1842" headers="d76065e1770">
<p><code class="codeph">DBMS_RLS.ALTER_GROUPED_POLICY</code></p>
</td>
<td class="cellalignment3792" headers="d76065e1842 d76065e1773">
<p>Alters a policy group</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3791" id="d76065e1850" headers="d76065e1770">
<p><code class="codeph">DBMS_RLS.DELETE_POLICY_GROUP</code></p>
</td>
<td class="cellalignment3792" headers="d76065e1850 d76065e1773">
<p>Drops a policy group</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3791" id="d76065e1858" headers="d76065e1770">
<p><code class="codeph">DBMS_RLS.ADD_GROUPED_POLICY</code></p>
</td>
<td class="cellalignment3792" headers="d76065e1858 d76065e1773">
<p>Adds a policy to the specified policy group</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3791" id="d76065e1867" headers="d76065e1770">
<p><code class="codeph">DBMS_RLS.ENABLE_GROUPED_POLICY</code></p>
</td>
<td class="cellalignment3792" headers="d76065e1867 d76065e1773">
<p>Enables a policy within a group</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3791" id="d76065e1875" headers="d76065e1770">
<p><code class="codeph">DBMS_RLS.REFRESH_GROUPED_POLICY</code></p>
</td>
<td class="cellalignment3792" headers="d76065e1875 d76065e1773">
<p>Parses again the SQL statements associated with a refreshed policy</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3791" id="d76065e1883" headers="d76065e1770">
<p><code class="codeph">DBMS_RLS.DISABLE_GROUPED_POLICY</code></p>
</td>
<td class="cellalignment3792" headers="d76065e1883 d76065e1773">
<p>Disables a policy within a group</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3791" id="d76065e1891" headers="d76065e1770">
<p><code class="codeph">DBMS_RLS.DROP_GROUPED_POLICY</code></p>
</td>
<td class="cellalignment3792" headers="d76065e1891 d76065e1773">
<p>Drops a policy that is a member of the specified group</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3791" id="d76065e1899" headers="d76065e1770">
<p><span class="bold">For Handling Application Contexts</span></p>
</td>
<td class="cellalignment3792" headers="d76065e1899 d76065e1773">
<p>-</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3791" id="d76065e1907" headers="d76065e1770">
<p><code class="codeph">DBMS_RLS.ADD_POLICY_CONTEXT</code></p>
</td>
<td class="cellalignment3792" headers="d76065e1907 d76065e1773">
<p>Adds the context for the active application</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3791" id="d76065e1915" headers="d76065e1770">
<p><code class="codeph">DBMS_RLS.DROP_POLICY_CONTEXT</code></p>
</td>
<td class="cellalignment3792" headers="d76065e1915 d76065e1773">
<p>Drops the context for the application</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<div>
<div class="relinfo">
<p><strong>Related Topics</strong></p>
<ul>
<li><a href="vpd.htm#GUID-486517C7-EECD-4F1C-AA40-6C13C46565D3" title="To implement Oracle Virtual Private Database, you must create a function to generate the dynamic WHERE clause, and a policy to attach this function to the objects that you want to protect.">Components of an Oracle Virtual Private Database Policy</a></li>
<li><a href="app_context.htm#GUID-51C9D5FA-6787-4F05-82EF-A5968BEDC5A0" title="An application context stores user identification, which can be used to enable or prevent a user from having access to data in the database.">Using Application Contexts to&nbsp;Retrieve&nbsp;User&nbsp;Information</a></li>
</ul>
</div>
</div>
</div>
<a id="DBSEG247"></a>
<div class="sect3"><a id="GUID-FEEE8343-84E9-4BE7-B638-7DBE0C6ED815"></a>
<h3 id="DBSEG-GUID-FEEE8343-84E9-4BE7-B638-7DBE0C6ED815" class="sect3">Attaching a Policy to a Database Table, View, or Synonym</h3>
<div>
<p>The <code class="codeph">DBMS_RLS</code> PL/SQL package can attach a policy to a table, view, or synonym.</p>
<ul style="list-style-type: disc;">
<li>
<p>To attach a policy to a database table, view, or synonym, use the <code class="codeph">DBMS_RLS.ADD_POLICY</code> procedure.</p>
</li>
</ul>
<p>You must specify the table, view, or synonym to which you are adding a policy, and a name for the policy. You can also specify other information, such as the types of statements the policy controls (<code class="codeph">SELECT</code>, <code class="codeph">INSERT</code>, <code class="codeph">UPDATE</code>, <code class="codeph">DELETE</code>, <code class="codeph">CREATE INDEX</code>, or <code class="codeph">ALTER INDEX</code>).</p>
<p>Be aware that the maximum number of policies that can be created for a single object is 255.</p>
</div>
</div>
<a id="DBSEG248"></a>
<div class="props_rev_3"><a id="GUID-2355CB50-CBF4-4C93-B207-FEF549B4FE13"></a>
<h3 id="DBSEG-GUID-2355CB50-CBF4-4C93-B207-FEF549B4FE13" class="sect3">Example: Attaching a Simple Oracle Virtual Private Database Policy to a Table</h3>
<div>
<p>The <span class="apiname">DBMS_RLS.ADD_POLICY</span> procedure can attach an Oracle Virtual Private Database (VPD) policy to a table, view, or synomym.</p>
<p><a href="vpd.htm#GUID-2355CB50-CBF4-4C93-B207-FEF549B4FE13__CIHDDEEA">Example 10-1</a> shows how to use <code class="codeph">DBMS_RLS.ADD_POLICY</code> to attach an Oracle Virtual Private Database policy called <code class="codeph">secure_update</code> to the <code class="codeph">HR.EMPLOYEES</code> table. The function attached to the policy is <code class="codeph">check_updates</code>.</p>
<div class="example" id="GUID-2355CB50-CBF4-4C93-B207-FEF549B4FE13__CIHDDEEA">
<p class="titleinexample">Example 10-1 Attaching a Simple Oracle Virtual Private Database Policy to a Table</p>
<pre dir="ltr">BEGIN
 DBMS_RLS.ADD_POLICY(
  object_schema   =&gt; &#39;hr&#39;,
  object_name     =&gt; &#39;employees&#39;,
  policy_name     =&gt; &#39;secure_update&#39;,
  policy_function =&gt; &#39;check_updates&#39;,
...
</pre>
<p>If the function was created inside a package, include the package name. For example:</p>
<pre dir="ltr"> policy_function =&gt; &#39;pkg.check_updates&#39;,
...
</pre>
<p>Although you can define a policy against a table, you cannot select that table from within the policy that was defined against the table.</p>
</div>
<!-- class="example" --></div>
</div>
<a id="DBSEG249"></a>
<div class="props_rev_3"><a id="GUID-B05F730E-45C2-4071-8A0F-A69AD7516C66"></a>
<h3 id="DBSEG-GUID-B05F730E-45C2-4071-8A0F-A69AD7516C66" class="sect3">Enforcing Policies on Specific SQL Statement Types</h3>
<div>
<p>You can enforce Oracle Virtual Private Database policies for <code class="codeph">SELECT</code>, <code class="codeph">INSERT</code>, <code class="codeph">UPDATE</code>, <code class="codeph">INDEX</code>, and <code class="codeph">DELETE</code> statements.</p>
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>To specify a SQL statement type for the policy, use the <code class="codeph">statement_types</code> parameter in the <code class="codeph">DBMS_RLS.ADD_POLICY</code> procedure. If you want to specify more than one, separate each with a comma. Enclose the list in a pair of single quotation marks.</p>
</li>
</ul>
<p>If you do not specify a statement type, then by default, Oracle Database specifies <code class="codeph">SELECT</code>, <code class="codeph">INSERT</code>, <code class="codeph">UPDATE</code>, and <code class="codeph">DELETE</code>, but not <code class="codeph">INDEX</code>. You can enter any combination of these statement types.</p>
<p>When you specify the <code class="codeph">statement_types</code> parameter, be aware of the following functionality:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold">The application code affected by the Virtual Private Database policy can include the MERGE INTO statement.</span> However, in the Virtual Private Database policy, you must ensure that the <code class="codeph">statement_types</code> parameter includes all three of the <code class="codeph">INSERT</code>, <code class="codeph">UPDATE</code>, and <code class="codeph">DELETE</code> statements for the policy to succeed. Alternatively, you can omit the <code class="codeph">statement_types</code> parameter.</p>
</li>
<li>
<p><span class="bold">Be aware that a user who has privileges to maintain an index can see all the row data, even if the user does not have full table access under a regular query such as SELECT.</span> For example, a user can create a function-based index that contains a user-defined function with column values as its arguments. During index creation, Oracle Database passes column values of every row into the user function, making the row data available to the user who creates the index. You can enforce Oracle Virtual Private Database policies on index maintenance operations by specifying <code class="codeph">INDEX</code> with the <code class="codeph">statement_types</code> parameter.</p>
</li>
</ul>
</div>
<!-- class="section" --></div>
</div>
<a id="DBSEG250"></a>
<div class="sect3"><a id="GUID-C2AE2671-5B09-42DB-82C3-44320CBE4501"></a>
<h3 id="DBSEG-GUID-C2AE2671-5B09-42DB-82C3-44320CBE4501" class="sect3">Example: Specifying SQL Statement Types with DBMS_RLS.ADD_POLICY</h3>
<div>
<p>The <code class="codeph">DBMS_RLS.ADD_POLICY</code> procedure <code class="codeph">statement_types</code> parameter can specify the <code class="codeph">SELECT</code> and <code class="codeph">INDEX</code> statements for a policy.</p>
<p><a href="vpd.htm#GUID-C2AE2671-5B09-42DB-82C3-44320CBE4501__CIHEBBHG">Example 10-2</a> shows an how this works.</p>
<div class="example" id="GUID-C2AE2671-5B09-42DB-82C3-44320CBE4501__CIHEBBHG">
<p class="titleinexample">Example 10-2 Specifying SQL Statement Types with DBMS_RLS.ADD_POLICY</p>
<pre dir="ltr">BEGIN
 DBMS_RLS.ADD_POLICY(
  object_schema   =&gt; &#39;hr&#39;,
  object_name     =&gt; &#39;employees&#39;,
  policy_name     =&gt; &#39;secure_update&#39;,
  policy_function =&gt; &#39;check_updates&#39;,
  <span class="bold">statement_types =&gt; &#39;SELECT,INDEX&#39;</span>);
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="DBSEG251"></a>
<div class="props_rev_3"><a id="GUID-1E2916F5-7DB8-48C4-B274-5C0EF931F218"></a>
<h3 id="DBSEG-GUID-1E2916F5-7DB8-48C4-B274-5C0EF931F218" class="sect3">Control of the Display of Column Data with Policies</h3>
<div>
<p>You can create policies that enforce row-level security when a security-relevant column is referenced in a query.</p>
<p>Topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="vpd.htm#GUID-C9F08971-13FD-4FD1-A584-41B9F35BC8A3" title="Column-level policies enforce row-level security when a query references a security-relevant column.">Policies for Column-Level Oracle Virtual Private Database</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-795AC2AA-BC7C-4D39-807F-945583803D29" title="The CREATE FUNCTION statement and the DBMS_RLS.ADD_POLICY procedure can configure a column-level Oracle Virtual Private Database policy.">Example: Creating a Column-Level Oracle Virtual Private Database Policy</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-7984D9DD-6987-42A7-9C42-4ECFA07F27E1" title="Be default, column-level Oracle Virtual Private Database restricts the number of rows a query returns that references columns containing sensitive information.">Display of Only the Column Rows Relevant to the Query</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-AE56264C-72D0-4965-8B6A-DA687FB6CFAE" title="If a query references a sensitive column, then by default column-level Oracle Virtual Private Database restricts the number of rows returned.">Column Masking to Display Sensitive Columns as NULL Values</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-47EE56EE-FEB6-41DA-8620-43D717621DF5" title="The DBMS_RLS.ADD_POLICY procedure can configure column-level Oracle Virtual Private Database column masking.">Example: Adding Column Masking to an Oracle Virtual Private Database Policy</a></p>
</li>
</ul>
</div>
<a id="DBSEG252"></a>
<div class="sect4"><a id="GUID-C9F08971-13FD-4FD1-A584-41B9F35BC8A3"></a>
<h4 id="DBSEG-GUID-C9F08971-13FD-4FD1-A584-41B9F35BC8A3" class="sect4">Policies for Column-Level Oracle Virtual Private Database</h4>
<div>
<p>Column-level policies enforce row-level security when a query references a security-relevant column.</p>
<p>You can apply a column-level Oracle Virtual Private Database policy to tables and views, but not to synonyms. To apply the policy to a column, specify the security-relevant column by using the <code class="codeph">SEC_RELEVANT_COLS</code> parameter of the <code class="codeph">DBMS_RLS.ADD_POLICY</code> procedure. This parameter applies the security policy whenever the column is referenced, explicitly or implicitly, in a query.</p>
<p>For example, users who are not in a Human Resources department typically are allowed to view only their own Social Security numbers. A sales clerk initiates the following query:</p>
<pre dir="ltr">SELECT fname, lname, ssn FROM emp;
</pre>
<p>The function implementing the security policy returns the predicate <code class="codeph">ssn=&#39;my_ssn</code>&#39;. Oracle Database rewrites the query and executes the following:</p>
<pre dir="ltr">SELECT fname, lname, ssn FROM emp 
 WHERE ssn = &#39;my_ssn&#39;;
</pre></div>
</div>
<a id="DBSEG253"></a>
<div class="props_rev_3"><a id="GUID-795AC2AA-BC7C-4D39-807F-945583803D29"></a>
<h4 id="DBSEG-GUID-795AC2AA-BC7C-4D39-807F-945583803D29" class="sect4">Example: Creating a Column-Level Oracle Virtual Private Database Policy</h4>
<div>
<p>The <span class="apiname">CREATE FUNCTION</span> statement and the <span class="apiname">DBMS_RLS.ADD_POLICY</span> procedure can configure a column-level Oracle Virtual Private Database policy.</p>
<p><a href="vpd.htm#GUID-795AC2AA-BC7C-4D39-807F-945583803D29__I1014790">Example 10-3</a> shows an Oracle Virtual Private Database policy in which sales department users cannot see the salaries of people outside the department (department number 30) of the sales department users. The relevant columns for this policy are <code class="codeph">sal</code> and <code class="codeph">comm</code>. First, the Oracle Virtual Private Database policy function is created, and then it is added by using the <code class="codeph">DBMS_RLS</code> PL/SQL package.</p>
<div class="example" id="GUID-795AC2AA-BC7C-4D39-807F-945583803D29__I1014790">
<p class="titleinexample">Example 10-3 Creating a Column-Level Oracle Virtual Private Database Policy</p>
<pre dir="ltr">CREATE OR REPLACE FUNCTION hide_sal_comm (
 v_schema IN VARCHAR2, 
 v_objname IN VARCHAR2)

RETURN VARCHAR2 AS
con VARCHAR2 (200);

BEGIN
 con := &#39;deptno=30&#39;;
 RETURN (con);
END hide_sal_comm;
</pre>
<p>Then you configure the policy with the <code class="codeph">DBMS_RLS.ADD_POLICY</code> procedure as follows:</p>
<pre dir="ltr">BEGIN
 DBMS_RLS.ADD_POLICY (
  object_schema     =&gt; &#39;scott&#39;, 
  object_name       =&gt; &#39;emp&#39;,
  policy_name       =&gt; &#39;hide_sal_policy&#39;, 
  policy_function   =&gt; &#39;hide_sal_comm&#39;,
 <span class="bold"> sec_relevant_cols =&gt; &#39;sal,comm&#39;);</span>
END;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="DBSEG254"></a>
<div class="props_rev_3"><a id="GUID-7984D9DD-6987-42A7-9C42-4ECFA07F27E1"></a>
<h4 id="DBSEG-GUID-7984D9DD-6987-42A7-9C42-4ECFA07F27E1" class="sect4">Display of Only the Column Rows Relevant to the Query</h4>
<div>
<p>Be default, column-level Oracle Virtual Private Database restricts the number of rows a query returns that references columns containing sensitive information.</p>
<p>You specify these security-relevant columns by using the <code class="codeph">SEC_RELEVANT_COLUMNS</code> parameter of the <code class="codeph">DBMS_RLS.ADD_POLICY</code> procedure, as shown in <a href="vpd.htm#GUID-795AC2AA-BC7C-4D39-807F-945583803D29__I1014790">Example 10-3</a>.</p>
<p>For example, consider sales department users with the <code class="codeph">SELECT</code> privilege on the <code class="codeph">emp</code> table, which is protected with the column-level Oracle Virtual Private Database policy created in <a href="vpd.htm#GUID-795AC2AA-BC7C-4D39-807F-945583803D29__I1014790">Example 10-3</a>. The user (for example, user <code class="codeph">SCOTT</code>) runs the following query:</p>
<pre dir="ltr">SELECT ENAME, d.dname, JOB, SAL, COMM 
 FROM emp e, dept d
 WHERE d.deptno = e.deptno;
</pre>
<p>The database returns the following rows:</p>
<pre dir="ltr">ENAME      DNAME          JOB              SAL       COMM
---------- -------------- --------- ---------- ----------
ALLEN      SALES          SALESMAN        1600        300
WARD       SALES          SALESMAN        1250        500
MARTIN     SALES          SALESMAN        1250       1400
BLAKE      SALES          MANAGER         2850           
TURNER     SALES          SALESMAN        1500          0
JAMES      SALES          CLERK            950           
 
6 rows selected.
</pre>
<p>The only rows that are displayed are those that the user has privileges to access all columns in the row.</p>
</div>
</div>
<a id="DBSEG255"></a>
<div class="props_rev_3"><a id="GUID-AE56264C-72D0-4965-8B6A-DA687FB6CFAE"></a>
<h4 id="DBSEG-GUID-AE56264C-72D0-4965-8B6A-DA687FB6CFAE" class="sect4">Column Masking to Display Sensitive Columns as NULL Values</h4>
<div>
<p>If a query references a sensitive column, then by default column-level Oracle Virtual Private Database restricts the number of rows returned.</p>
<p>With column-masking behavior, all rows display, even those that reference sensitive columns. However, the sensitive columns display as <code class="codeph">NULL</code> values. To enable column-masking, set the <code class="codeph">SEC_RELEVANT_COLS_opt</code> parameter of the <code class="codeph">DBMS_RLS.ADD_POLICY</code> procedure.</p>
<p>For example, consider the results of the sales clerk query, described in the previous example. If column-masking is used, then instead of seeing only the row containing the details and Social Security number of the sales clerk, the clerk would see all rows from the <code class="codeph">emp</code> table, but the <code class="codeph">ssn</code> column values would be returned as <code class="codeph">NULL</code>. Note that this behavior is fundamentally different from all other types of Oracle Virtual Private Database policies, which return only a subset of rows.</p>
<p>In contrast to the default action of column-level Oracle Virtual Private Database, column-masking displays all rows, but returns sensitive column values as <code class="codeph">NULL</code>. To include column-masking in your policy, set the <code class="codeph">SEC_RELEVANT_COLS_OPT</code> parameter of the <code class="codeph">DBMS_RLS.ADD_POLICY</code> procedure to <code class="codeph">DBMS_RLS.ALL_ROWS</code>.</p>
<p>The following considerations apply to column masking:</p>
<ul style="list-style-type: disc;">
<li>
<p>Column-masking applies only to <code class="codeph">SELECT</code> statements.</p>
</li>
<li>
<p>Column-masking conditions generated by the policy function must be simple Boolean expressions, unlike regular Oracle Virtual Private Database predicates.</p>
</li>
<li>
<p>For applications that perform calculations, or do not expect <code class="codeph">NULL</code> values, use standard column-level Oracle Virtual Private Database, specifying <code class="codeph">SEC_RELEVANT_COLS</code> rather than the <code class="codeph">SEC_RELEVANT_COLS_OPT</code> column-masking option.</p>
</li>
<li>
<p>Do not include columns of the object data type (including the <code class="codeph">XMLtype</code>) in the <code class="codeph">sec_relevant_cols</code> setting. This column type is not supported for the <code class="codeph">sec_relevant_cols</code> setting.</p>
</li>
<li>
<p>Column-masking used with <code class="codeph">UPDATE AS SELECT</code> updates only the columns that users are allowed to see.</p>
</li>
<li>
<p>For some queries, column-masking may prevent some rows from displaying. For example:</p>
<pre dir="ltr">SELECT * FROM emp
 WHERE sal = 10;
</pre>
<p>Because the column-masking option was set, this query may not return rows if the <code class="codeph">salary</code> column returns a <code class="codeph">NULL</code> value.</p>
</li>
</ul>
</div>
</div>
<a id="DBSEG256"></a>
<div class="props_rev_3"><a id="GUID-47EE56EE-FEB6-41DA-8620-43D717621DF5"></a>
<h4 id="DBSEG-GUID-47EE56EE-FEB6-41DA-8620-43D717621DF5" class="sect4">Example: Adding Column Masking to an Oracle Virtual Private Database Policy</h4>
<div>
<p>The <span class="apiname">DBMS_RLS.ADD_POLICY</span> procedure can configure column-level Oracle Virtual Private Database column masking.</p>
<p><a href="vpd.htm#GUID-47EE56EE-FEB6-41DA-8620-43D717621DF5__I1014928">Example 10-4</a> shows column-level Oracle Virtual Private Database column masking. It uses the same VPD policy as <a href="vpd.htm#GUID-795AC2AA-BC7C-4D39-807F-945583803D29" title="The CREATE FUNCTION statement and the DBMS_RLS.ADD_POLICY procedure can configure a column-level Oracle Virtual Private Database policy.">Example: Creating a Column-Level Oracle Virtual Private Database Policy</a>, but with <code class="codeph">sec_relevant_cols_opt</code> specified as <code class="codeph">DBMS_RLS.ALL_ROWS</code>.</p>
<div class="example" id="GUID-47EE56EE-FEB6-41DA-8620-43D717621DF5__I1014928">
<p class="titleinexample">Example 10-4 Adding Column Masking to an Oracle Virtual Private Database Policy</p>
<pre dir="ltr">BEGIN
 DBMS_RLS.ADD_POLICY(
   object_schema         =&gt; &#39;scott&#39;, 
   object_name           =&gt; &#39;emp&#39;,
   policy_name           =&gt; &#39;hide_sal_policy&#39;, 
   policy_function       =&gt; &#39;hide_sal_comm&#39;,
   sec_relevant_cols     =&gt;&#39; sal,comm&#39;,
   sec_relevant_cols_opt =&gt; dbms_rls.ALL_ROWS);
END;
</pre>
<p>Assume that a sales department user with <code class="codeph">SELECT</code> privilege on the <code class="codeph">emp</code> table (such as user <code class="codeph">SCOTT</code>) runs the following query:</p>
<pre dir="ltr">SELECT ENAME, d.dname, job, sal, comm 
 FROM emp e, dept d
 WHERE d.deptno = e.deptno;
</pre>
<p>The database returns all rows specified in the query, but with certain values masked because of the Oracle Virtual Private Database policy:</p>
<pre dir="ltr">ENAME      DNAME          JOB              SAL       COMM
---------- -------------- --------- ---------- ----------
CLARK      ACCOUNTING     MANAGER
KING       ACCOUNTING     PRESIDENT
MILLER     ACCOUNTING     CLERK
JONES      RESEARCH       MANAGER
FORD       RESEARCH       ANALYST
ADAMS      RESEARCH       CLERK
SMITH      RESEARCH       CLERK
SCOTT      RESEARCH       ANALYST
WARD       SALES          SALESMAN        1250        500
TURNER     SALES          SALESMAN        1500          0
ALLEN      SALES          SALESMAN        1600        300
JAMES      SALES          CLERK            950           
BLAKE      SALES          MANAGER         2850           
MARTIN     SALES          SALESMAN        1250       1400
 
14 rows selected.
</pre>
<p>The column-masking returned all rows requested by the sales user query, but made the <code class="codeph">sal</code> and <code class="codeph">comm</code> columns <code class="codeph">NULL</code> for employees outside the sales department.</p>
</div>
<!-- class="example" --></div>
</div>
</div>
<a id="DBSEG257"></a>
<div class="props_rev_3"><a id="GUID-011EB74C-42DD-4817-A847-5BB28D67F6BE"></a>
<h3 id="DBSEG-GUID-011EB74C-42DD-4817-A847-5BB28D67F6BE" class="sect3">Oracle Virtual Private Database Policy Groups</h3>
<div>
<p>An Oracle Virtual Private Database policy group is a named collection of VPD policies that can be applied to an application.</p>
<p>Topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="vpd.htm#GUID-87EA1733-CB75-487C-B773-FE5676185F5C" title="You can group multiple security policies together, and apply them to an application.">About Oracle Virtual Private Database Policy Groups</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-2D0E2295-C768-466E-8CCA-22A531B36B26" title="The DBMS_RLS.ADD_GROUPED_POLICY procedure adds a VPD policy to a VPD policy group.">Creation of a New Oracle Virtual Private Database Policy Group</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-1A70422F-26C3-4A38-A0BE-6C3B9388635C" title="Within a group of security policies, you can designate one security policy to be the default security policy.">Default Policy Group with the SYS_DEFAULT Policy Group</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-4E7285B9-220D-499D-9F22-586E7DED2311" title="You can establish several policies for the same table, view, or synonym.">Multiple Policies for Each Table, View, or Synonym</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-A11B72DE-18B8-44A3-8E04-851247175B35" title="The package implementing the driving context must correctly validate the application that is being used to connect to the database.">Validation of the Application Used to Connect to the Database</a></p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-011EB74C-42DD-4817-A847-5BB28D67F6BE__GUID-2FD5C0DB-D0C3-4BA7-A810-B825EDBC0C44">
<p class="notep1">See Also:</p>
<p><a href="vpd.htm#GUID-E2E04EE0-06B4-45F2-812B-9E2C65F6669B" title="This tutorial demonstrates how to create an Oracle Virtual Private Database (VPD) policy group.">Tutorial: Implementing an Oracle Virtual Private Database Policy Group</a></p>
</div>
</div>
<a id="DBSEG258"></a>
<div class="props_rev_3"><a id="GUID-87EA1733-CB75-487C-B773-FE5676185F5C"></a>
<h4 id="DBSEG-GUID-87EA1733-CB75-487C-B773-FE5676185F5C" class="sect4">About Oracle Virtual Private Database Policy Groups</h4>
<div>
<p>You can group multiple security policies together, and apply them to an application.</p>
<p>A policy group is a set of security policies that belong to an application. You can designate an application context (known as a <span class="italic">driving context</span> or <span class="italic">policy context</span>) to indicate the policy group in effect. Then, when a user accesses the table, view, or synonym column, Oracle Database looks up the driving context to determine the policy group in effect. It enforces all the associated policies that belong to the policy group.</p>
<p>Policy groups are useful for situations where multiple applications with multiple security policies share the same table, view, or synonym. This enables you to identify those policies that should be in effect when the table, view, or synonym is accessed.</p>
<p>For example, in a hosting environment, Company A can host the <code class="codeph">BENEFIT</code> table for Company B and Company C. The table is accessed by two different applications, Human Resources and Finance, with two different security policies. The Human Resources application authorizes users based on ranking in the company, and the Finance application authorizes users based on department. Integrating these two policies into the <code class="codeph">BENEFIT</code> table requires joint development of policies between the two companies, which is not a feasible option. By defining an application context to drive the enforcement of a particular set of policies to the base objects, each application can implement a private set of security policies.</p>
<p>To do this, you organize security policies into groups. By referring to the application context, Oracle Database determines which group of policies should be in effect at run time. The server enforces all the policies that belong to that policy group.</p>
</div>
</div>
<a id="DBSEG259"></a>
<div class="props_rev_3"><a id="GUID-2D0E2295-C768-466E-8CCA-22A531B36B26"></a>
<h4 id="DBSEG-GUID-2D0E2295-C768-466E-8CCA-22A531B36B26" class="sect4">Creation of a New Oracle Virtual Private Database Policy Group</h4>
<div>
<p>The <code class="codeph">DBMS_RLS.ADD_GROUPED_POLICY</code> procedure adds a VPD policy to a VPD policy group.</p>
<p>To specify which policies will be effective, you can add a driving context using the <code class="codeph">DBMS_RLS.ADD_POLICY_CONTEXT</code> procedure. If the driving context returns an unknown policy group, then an error is returned.</p>
<p>If the driving context is not defined, then Oracle Database runs all policies. Likewise, if the driving context is <code class="codeph">NULL</code>, then policies from all policy groups are enforced. An application accessing the data cannot bypass the security setup module (which sets up application context) to avoid any applicable policies.</p>
<p>You can apply multiple driving contexts to the same table, view, or synonym, and each of them will be processed individually. This enables you to configure multiple active sets of policies to be enforced.</p>
<p>Consider, for example, a hosting company that hosts Benefits and Financial applications, which share some database objects. Both applications are striped for hosting using a <code class="codeph">SUBSCRIBER</code> policy in the <code class="codeph">SYS_DEFAULT</code> policy group. Data access is partitioned first by subscriber ID, then by whether the user is accessing the Benefits or Financial applications (determined by a driving context). Suppose that Company A, which uses the hosting services, wants to apply a custom policy that relates only to its own data access. You could add an additional driving context (such as <code class="codeph">COMPANY A SPECIAL</code>) to ensure that the additional, special policy group is applied for data access for Company A only. You would not apply this under the <code class="codeph">SUBSCRIBER</code> policy, because the policy relates only to Company A, and it is more efficient to segregate the basic hosting policy from other policies.</p>
</div>
</div>
<a id="DBSEG260"></a>
<div class="props_rev_3"><a id="GUID-1A70422F-26C3-4A38-A0BE-6C3B9388635C"></a>
<h4 id="DBSEG-GUID-1A70422F-26C3-4A38-A0BE-6C3B9388635C" class="sect4">Default Policy Group with the SYS_DEFAULT Policy Group</h4>
<div>
<p>Within a group of security policies, you can designate one security policy to be the default security policy.</p>
<p>This is useful in situations where you partition security policies by application, so that they will be always be in effect. Default security policies enable developers to base security enforcement under all conditions, while partitioning security policies by application (using security groups) enables layering of additional, application-specific security on top of default security policies. To implement default security policies, you add the policy to the <code class="codeph">SYS_DEFAULT</code> policy group.</p>
<p>Policies defined in this group for a particular table, view, or synonym are run with the policy group specified by the driving context. As described earlier, a driving context is an application context that indicates the policy group in effect. The <code class="codeph">SYS_DEFAULT</code> policy group may or may not contain policies. You cannot to drop the <code class="codeph">SYS_DEFAULT</code> policy group. If you do, then Oracle Database displays an error.</p>
<p>If, to the <code class="codeph">SYS_DEFAULT</code> policy group, you add policies associated with two or more objects, then each object will have a separate <code class="codeph">SYS_DEFAULT</code> policy group associated with it. For example, the <code class="codeph">emp</code> table in the <code class="codeph">scott</code> schema has one <code class="codeph">SYS_DEFAULT</code> policy group, and the <code class="codeph">dept</code> table in the <code class="codeph">scott</code> schema has a different <code class="codeph">SYS_DEFAULT</code> policy group associated with it. Think of them as being organized in the tree structure as follows:</p>
<pre dir="ltr">SYS_DEFAULT
  - policy1 (scott/emp)
  - policy3 (scott/emp)
SYS_DEFAULT
  - policy2 (scott/dept)
</pre>
<p>You can create policy groups with identical names. When you select a particular policy group, its associated schema and object name are displayed in the property sheet on the right side of the screen.</p>
</div>
</div>
<a id="DBSEG261"></a>
<div class="props_rev_3"><a id="GUID-4E7285B9-220D-499D-9F22-586E7DED2311"></a>
<h4 id="DBSEG-GUID-4E7285B9-220D-499D-9F22-586E7DED2311" class="sect4">Multiple Policies for Each Table, View, or Synonym</h4>
<div>
<p>You can establish several policies for the same table, view, or synonym.</p>
<p>Suppose, for example, you have a base application for Order Entry, and each division of your company has its own rules for data access. You can add a division-specific policy function to a table without having to rewrite the policy function of the base application.</p>
<p>All policies applied to a table are enforced with <code class="codeph">AND</code> syntax. If you have three policies applied to the <code class="codeph">CUSTOMERS</code> table, then each policy is applied to the table. You can use policy groups and an application context to partition fine-grained access control enforcement so that different policies apply, depending upon which application is accessing data. This eliminates the requirement for development groups to collaborate on policies, and simplifies application development. You can also have a default policy group that is always applicable (for example, to enforce data separated by subscriber in a hosting environment).</p>
</div>
</div>
<a id="DBSEG262"></a>
<div class="props_rev_3"><a id="GUID-A11B72DE-18B8-44A3-8E04-851247175B35"></a>
<h4 id="DBSEG-GUID-A11B72DE-18B8-44A3-8E04-851247175B35" class="sect4">Validation of the Application Used to Connect to the Database</h4>
<div>
<p>The package implementing the driving context must correctly validate the application that is being used to connect to the database.</p>
<p>Although Oracle Database checks the call stack to ensure that the package implementing the driving context sets context attributes, inadequate validation can still occur within the package. For example, in applications where database users or enterprise users are known to the database, the user needs the <code class="codeph">EXECUTE</code> privilege on the package that sets the driving context. Consider a user who knows that the <code class="codeph">BENEFITS</code> application enables more liberal access than the <code class="codeph">HR</code> application. The <code class="codeph">setctx</code> procedure (which sets the correct policy group within the driving context) does not perform any validation to determine which application is actually connecting. That is, the procedure does not check either the IP address of the incoming connection (for a three-tier system) or the <code class="codeph">proxy_user</code> attribute of the user session.</p>
<p>This user could pass to the driving context package an argument setting the context to the more liberal <code class="codeph">BENEFITS</code> policy group, and then access the <code class="codeph">HR</code> application instead. Because the <code class="codeph">setctx</code> does no further validation of the application, this user bypasses the more restrictive HR security policy.</p>
<p>By contrast, if you implement proxy authentication with Oracle Virtual Private Database, then you can determine the identity of the middle tier (and the application) that is connecting to the database on behalf of a user. The correct policy will be applied for each application to mediate data access.</p>
<p>For example, a developer using the proxy authentication feature could determine that the application (the middle tier) connecting to the database is <code class="codeph">HRAPPSERVER</code>. The package that implements the driving context can thus verify whether the <code class="codeph">proxy_user</code> in the user session is <code class="codeph">HRAPPSERVER</code>. If so, then it can set the driving context to use the <code class="codeph">HR</code> policy group. If <code class="codeph">proxy_user</code> is not <code class="codeph">HRAPPSERVER</code>, then it can deny access.</p>
<p>In this case, the following query is executed:</p>
<pre dir="ltr">SELECT * FROM apps.benefit;
</pre>
<p>Oracle Database picks up policies from the default policy group (<code class="codeph">SYS_DEFAULT</code>) and active namespace <code class="codeph">HR</code>. The query is internally rewritten as follows:</p>
<pre dir="ltr">SELECT * FROM apps.benefit 
 WHERE company = SYS_CONTEXT(&#39;ID&#39;,&#39;MY_COMPANY&#39;) 
 AND SYS_CONTEXT(&#39;ID&#39;,&#39;TITLE&#39;) = &#39;MANAGER&#39;;
</pre></div>
</div>
</div>
<a id="DBSEG14001"></a>
<div class="props_rev_3"><a id="GUID-EE56D7A9-BBF5-477E-ADFD-95CEDE1CBAAD"></a>
<h3 id="DBSEG-GUID-EE56D7A9-BBF5-477E-ADFD-95CEDE1CBAAD" class="sect3">Optimizing Performance by Using Oracle Virtual Private Database Policy Types</h3>
<div>
<p>You can optimize performance by using Oracle Virtual Private Database (VPD) the dynamic, static, or shared policy types. You can use context sensitive policies to share a policy with multiple objects.</p>
<p>Topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="vpd.htm#GUID-894BAEFF-8DB4-4136-9FD2-C9D5041F9C91" title="Specifying a policy type for your policies can optimize performance each the Oracle Virtual Private Database policy runs.">About Oracle Virtual Private Database Policy Types</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-719884EE-E3F7-4BC1-9571-6F3D037613C7" title="The DYNAMIC policy type runs the policy function each time a user accesses the Virtual Private Database-protected database objects.">Dynamic Policy Type to Automatically Rerun Policy Functions</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-47077306-2EF6-439D-B6A2-FB8BDCBC4378" title="The DBMS_RLS.ADD_POLICY procedure can create a dynamic Oracle Virtual Private Database policy.">Example: Creating a DYNAMIC Policy with DBMS_RLS.ADD_POLICY</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-79469105-B0FF-4DBC-854B-4EDCBD5DB593" title="The static policy type enforces the same predicate for all users in the instance.">Static Policy to Prevent Policy Functions from Rerunning for Each Query</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-270DF0C3-B95C-4591-A2F7-463379F0CA95" title="The DBMS_RLS.ADD_POLICY procedure can create a static Oracle Virtual Private Database (VPD) policy.">Example: Creating a Static Policy with DBMS_RLS.ADD_POLICY</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-ACC1DF63-FF05-409D-9478-045DD3A233A2" title="The DBMS_RLS.ADD_POLICY procedure can create a shared static Oracle Virtual Private Database policy to share the policy with multiple objects.">Example: Shared Static Policy to Share a Policy with Multiple Objects</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-B11CACA8-B7A3-43EA-A16E-9810988E3932" title="Static policies are ideal when every query requires the same predicate and fast performance is essential, such as hosting environments.">When to Use Static and Shared Static Policies</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-8D342184-FBFF-4322-ACC9-4D03CF866C68" title="Context-sensitive policies are useful when different predicates must be applied depending on which executes the query.">Context-Sensitive Policy for Application Context Attributes That Change</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-3B100B7D-7E47-4B07-89D4-CCEF72021617" title="The DBMS_RLS.ADD_POLICY procedure can create a shared context-sensitive Oracle Virtual Private Database to share a policy that has multiple objects.">Example: Using a Shared Context Sensitive Policy to Share a Policy with Multiple Objects</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-6B2F8145-E920-4A09-BA5E-21F49DAB8B15" title="Use context-sensitive policies when a predicate does not need to change for a user session, but the policy must enforce multiple predicates for different users or groups.">When to Use Context-Sensitive and Shared Context-Sensitive Policies</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-88C911CF-9666-4054-AEB6-E9548D02588A" title="The DBMS_RLS.ADD_POLICY procedure can create an Oracle Virtual Private Database context-sensitive policy.">Example: Creating a Context-Sensitive Policy with DBMS_RLS.ADD_POLICY</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-96B8204B-5CCD-4008-BE91-9270472966C3" title="The DBMS_RLS.REFRESH_POLICY statement can refresh cached statements for Oracle Virtual Private Database context-sensitive policies.">Example: Refreshing Cached Statements for a VPD Context-Sensitive Policy</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-4AE84443-F76D-428C-97DD-AD0780CE4565" title="The DBMS_RLS.ALTER_POLICY procedure can modify an Oracle Virtual Private Database policy.">Example: Altering an Existing Context-Sensitive Policy</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-011F285D-258F-4A2B-BB04-79C1E99BE172" title="Oracle Virtual Private Database provides five policy types, based on user needs such as hosting environments.">Summary of the Five Oracle Virtual Private Database Policy Types</a></p>
</li>
</ul>
</div>
<a id="DBSEG263"></a>
<div class="props_rev_3"><a id="GUID-894BAEFF-8DB4-4136-9FD2-C9D5041F9C91"></a>
<h4 id="DBSEG-GUID-894BAEFF-8DB4-4136-9FD2-C9D5041F9C91" class="sect4">About Oracle Virtual Private Database Policy Types</h4>
<div>
<p>Specifying a policy type for your policies can optimize performance each the Oracle Virtual Private Database policy runs.</p>
<p>Policy types control how Oracle Database caches Oracle Virtual Private Database policy predicates. Consider setting a policy type for your policies, because the execution of policy functions can use a significant amount of system resources. Minimizing the number of times that a policy function can run optimizes database performance.</p>
<p>You can choose from five policy types: <code class="codeph">DYNAMIC</code>, <code class="codeph">STATIC</code>, <code class="codeph">SHARED_STATIC</code>, <code class="codeph">CONTEXT_SENSITIVE</code>, and <code class="codeph">SHARED_CONTEXT_SENSITIVE</code>. These enable you to precisely specify how often a policy predicate should change. To specify the policy type, set the <code class="codeph">policy_type</code> parameter of the <code class="codeph">DBMS_RLS.ADD POLICY</code> procedure.</p>
</div>
</div>
<a id="DBSEG264"></a>
<div class="props_rev_3"><a id="GUID-719884EE-E3F7-4BC1-9571-6F3D037613C7"></a>
<h4 id="DBSEG-GUID-719884EE-E3F7-4BC1-9571-6F3D037613C7" class="sect4">Dynamic Policy Type to Automatically Rerun Policy Functions</h4>
<div>
<p>The <code class="codeph">DYNAMIC</code> policy type runs the policy function each time a user accesses the Virtual Private Database-protected database objects.</p>
<p>If you do not specify a policy type in the <code class="codeph">DBMS_RLS.ADD_POLICY</code> procedure, then, by default, your policy will be dynamic. You can specifically configure a policy to be dynamic by setting the <code class="codeph">policy_type</code> parameter of the <code class="codeph">DBMS_RLS.ADD_POLICY</code> procedure to <code class="codeph">DYNAMIC</code>.</p>
<p>This policy type does not optimize database performance as the static and context sensitive policy types do. However, Oracle recommends that before you set policies as either static or context-sensitive, you should first test them as <code class="codeph">DYNAMIC</code> policy types, which run every time. Testing policy functions as <code class="codeph">DYNAMIC</code> policies first enables you to observe how the policy function affects each query, because nothing is cached. This ensures that the functions work properly before you enable them as static or context-sensitive policy types to optimize performance.</p>
<p>You can use the <code class="codeph">DBMS_UTILITY.GET_TIME</code> function to measure the start and end times for a statement to execute. For example:</p>
<pre dir="ltr"><span class="bold">-- 1. Get the start time:</span>
SELECT DBMS_UTILITY.GET_TIME FROM DUAL;

  GET_TIME
----------
   2312721

<span class="bold">-- 2. Run the statement:</span>
SELECT COUNT(*) FROM HR.EMPLOYEES;

  COUNT(*)
----------
       107

<span class="bold">-- 3. Get the end time:</span>
SELECT DBMS_UTILITY.GET_TIME FROM DUAL;

  GET_TIME
----------
   2314319
</pre>
<div class="infoboxnotealso" id="GUID-719884EE-E3F7-4BC1-9571-6F3D037613C7__GUID-AD8FB72B-E965-44C9-8B53-B291BB458FB9">
<p class="notep1">See Also:</p>
<p><a href="audit_config.htm#GUID-50FB686D-D357-4066-ADF1-17F1B9B19DB5" title="You can audit functions, procedures, PL/SQL packages, and triggers.">Auditing Functions, Procedures, Packages, and Triggers</a> for information about how Oracle Database audits the underlying policy function for dynamic policies</p>
</div>
</div>
</div>
<a id="DBSEG265"></a>
<div class="props_rev_3"><a id="GUID-47077306-2EF6-439D-B6A2-FB8BDCBC4378"></a>
<h4 id="DBSEG-GUID-47077306-2EF6-439D-B6A2-FB8BDCBC4378" class="sect4">Example: Creating a DYNAMIC Policy with DBMS_RLS.ADD_POLICY</h4>
<div>
<p>The <code class="codeph">DBMS_RLS.ADD_POLICY</code> procedure can create a dynamic Oracle Virtual Private Database policy.</p>
<p><a href="vpd.htm#GUID-47077306-2EF6-439D-B6A2-FB8BDCBC4378__CIHFIGFI">Example 10-5</a> shows how to create the <code class="codeph">DYNAMIC</code> policy type.</p>
<div class="example" id="GUID-47077306-2EF6-439D-B6A2-FB8BDCBC4378__CIHFIGFI">
<p class="titleinexample">Example 10-5 Creating a DYNAMIC Policy with DBMS_RLS.ADD_POLICY</p>
<pre dir="ltr">BEGIN
 DBMS_RLS.ADD_POLICY(
  object_schema   =&gt; &#39;hr&#39;,
  object_name     =&gt; &#39;employees&#39;,
  policy_name     =&gt; &#39;secure_update&#39;,
  policy_function =&gt; &#39;hide_fin&#39;,
  policy_type     =&gt; dbms_rls.DYNAMIC);
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="DBSEG266"></a>
<div class="props_rev_3"><a id="GUID-79469105-B0FF-4DBC-854B-4EDCBD5DB593"></a>
<h4 id="DBSEG-GUID-79469105-B0FF-4DBC-854B-4EDCBD5DB593" class="sect4">Static Policy to Prevent Policy Functions from Rerunning for Each Query</h4>
<div>
<p>The static policy type enforces the same predicate for all users in the instance.</p>
<p>Oracle Database stores static policy predicates in SGA, so policy functions do not rerun for each query. This results in faster performance.</p>
<p>You can enable static policies by setting the <code class="codeph">policy_type</code> parameter of the <code class="codeph">DBMS_RLS.ADD_POLICY</code> procedure to either <code class="codeph">STATIC</code> or <code class="codeph">SHARED_STATIC</code>, depending on whether or not you want the policy to be shared across multiple objects.</p>
<p>Each execution of the same cursor could produce a different row set for the same predicate, because the predicate may filter the data differently based on attributes such as <code class="codeph">SYS_CONTEXT</code> or <code class="codeph">SYSDATE</code>.</p>
<p>For example, suppose you enable a policy as either a <code class="codeph">STATIC</code> or <code class="codeph">SHARED_STATIC</code> policy type, which appends the following predicate to all queries made against policy protected database objects:</p>
<pre dir="ltr">WHERE dept = SYS_CONTEXT (&#39;hr_app&#39;,&#39;deptno&#39;)
</pre>
<p>Although the predicate does not change for each query, it applies to the query based on session attributes of the <code class="codeph">SYS_CONTEXT</code>. In the case of the preceding example, the predicate returns only those rows where the department number matches the <code class="codeph">deptno</code> attribute of the <code class="codeph">SYS_CONTEXT</code>, which is the department number of the user who is querying the policy-protected database object.</p>
<div class="infobox-note" id="GUID-79469105-B0FF-4DBC-854B-4EDCBD5DB593__GUID-E871A782-3757-4F40-925D-719417FCC7CA">
<p class="notep1">Note:</p>
<p>When using shared static policies, ensure that the policy predicate does not contain attributes that are specific to a particular database object, such as a column name.</p>
</div>
<div class="infoboxnotealso" id="GUID-79469105-B0FF-4DBC-854B-4EDCBD5DB593__GUID-4E5F5925-BC0E-4DC8-8DB3-9D4C5B422575">
<p class="notep1">See Also:</p>
<p><a href="audit_config.htm#GUID-50FB686D-D357-4066-ADF1-17F1B9B19DB5" title="You can audit functions, procedures, PL/SQL packages, and triggers.">Auditing Functions, Procedures, Packages, and Triggers</a> for information about how Oracle Database audits the underlying policy function for static policies</p>
</div>
</div>
</div>
<a id="DBSEG267"></a>
<div class="props_rev_3"><a id="GUID-270DF0C3-B95C-4591-A2F7-463379F0CA95"></a>
<h4 id="DBSEG-GUID-270DF0C3-B95C-4591-A2F7-463379F0CA95" class="sect4">Example: Creating a Static Policy with DBMS_RLS.ADD_POLICY</h4>
<div>
<p>The <code class="codeph">DBMS_RLS.ADD_POLICY</code> procedure can create a static Oracle Virtual Private Database (VPD) policy.</p>
<p><a href="vpd.htm#GUID-270DF0C3-B95C-4591-A2F7-463379F0CA95__CIHHCGAH">Example 10-6</a> shows how to create the <code class="codeph">STATIC</code> policy type.</p>
<div class="example" id="GUID-270DF0C3-B95C-4591-A2F7-463379F0CA95__CIHHCGAH">
<p class="titleinexample">Example 10-6 Creating a Static Policy with DBMS_RLS.ADD_POLICY</p>
<pre dir="ltr">BEGIN
 DBMS_RLS.ADD_POLICY(
  object_schema   =&gt; &#39;hr&#39;,
  object_name     =&gt; &#39;employees&#39;,
  policy_name     =&gt; &#39;secure_update&#39;,
  policy_function =&gt; &#39;hide_fin&#39;,
  policy_type     =&gt; DBMS_RLS.STATIC);
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="DBSEG269"></a><a id="DBSEG268"></a>
<div class="props_rev_3"><a id="GUID-ACC1DF63-FF05-409D-9478-045DD3A233A2"></a>
<h4 id="DBSEG-GUID-ACC1DF63-FF05-409D-9478-045DD3A233A2" class="sect4">Example: Shared Static Policy to Share a Policy with Multiple Objects</h4>
<div>
<p>The <code class="codeph">DBMS_RLS.ADD_POLICY</code> procedure can create a shared static Oracle Virtual Private Database policy to share the policy with multiple objects.</p>
<p>If, for example, you wanted to apply the policy in <a href="vpd.htm#GUID-270DF0C3-B95C-4591-A2F7-463379F0CA95__CIHHCGAH">Example 10-6</a> to a second table in the <code class="codeph">HR</code> schema that may contain financial data that you want to side, you could use the <code class="codeph">SHARED_STATIC</code> setting for both tables.</p>
<p><a href="vpd.htm#GUID-ACC1DF63-FF05-409D-9478-045DD3A233A2__CIHCDAIF">Example 10-7</a> shows how to set the <code class="codeph">SHARED_STATIC</code> policy type for two tables that share the same policy.</p>
<div class="example" id="GUID-ACC1DF63-FF05-409D-9478-045DD3A233A2__CIHCDAIF">
<p class="titleinexample">Example 10-7 Creating a Shared Static Policy to Share a Policy with Multiple Objects</p>
<pre dir="ltr"><span class="bold">-- 1. Create a policy for the first table, employees:</span>
BEGIN
 DBMS_RLS.ADD_POLICY(
  object_schema   =&gt; &#39;hr&#39;,
  object_name     =&gt; &#39;employees&#39;,
  policy_name     =&gt; &#39;secure_update&#39;,
  policy_function =&gt; &#39;hide_fin&#39;,
  policy_type     =&gt; dbms_rls.SHARED_STATIC);
END;
/
<span class="bold">-- 2. Create a policy for the second table, fin_data:</span>
BEGIN
 DBMS_RLS.ADD_POLICY(
  object_schema   =&gt; &#39;hr&#39;,
  object_name     =&gt; &#39;fin_data&#39;,
  policy_name     =&gt; &#39;secure_update&#39;,
  policy_function =&gt; &#39;hide_fin&#39;,
  policy_type     =&gt; dbms_rls.SHARED_STATIC);
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="DBSEG270"></a>
<div class="props_rev_3"><a id="GUID-B11CACA8-B7A3-43EA-A16E-9810988E3932"></a>
<h4 id="DBSEG-GUID-B11CACA8-B7A3-43EA-A16E-9810988E3932" class="sect4">When to Use Static and Shared Static Policies</h4>
<div>
<p>Static policies are ideal when every query requires the same predicate and fast performance is essential, such as hosting environments.</p>
<p>For these situations when the policy function appends the same predicate to every query, rerunning the policy function each time adds unnecessary overhead to the system. For example, consider a data warehouse that contains market research data for customer organizations that are competitors. The warehouse must enforce the policy that each organization can see only their own market research, which is expressed by the following predicate:</p>
<pre dir="ltr">WHERE subscriber_id = SYS_CONTEXT(&#39;customer&#39;, &#39;cust_num&#39;)
</pre>
<p>Using <code class="codeph">SYS_CONTEXT</code> for the application context enables the database to dynamically change the rows that are returned. You do not need to rerun the function, so the predicate can be cached in the SGA, thus conserving system resources and improving performance.</p>
</div>
</div>
<a id="DBSEG271"></a>
<div class="props_rev_3"><a id="GUID-8D342184-FBFF-4322-ACC9-4D03CF866C68"></a>
<h4 id="DBSEG-GUID-8D342184-FBFF-4322-ACC9-4D03CF866C68" class="sect4">Context-Sensitive Policy for Application Context Attributes That Change</h4>
<div>
<p>Context-sensitive policies are useful when different predicates must be applied depending on which executes the query.</p>
<p>For example, consider the case where managers should have the predicate <code class="codeph">WHERE group</code> set to <code class="codeph">managers</code>, and employees should have the predicate <code class="codeph">WHERE empno_ctx</code> set to <code class="codeph">emp_id</code>. A context-sensitive policy will enable you to present only the information that the managers must see when the managers log in, and only the information that the employees must see when they log in. The policy uses application contexts to determine which predicate to use.</p>
<p>In contrast to static policies, context-sensitive policies do not always cache the predicate. With context-sensitive policies, the database assumes that the predicate will change after statement parse time. But if there is no change in the local application context, then Oracle Database does not rerun the policy function within the user session. If there is a change in any attribute of any application context during the user session, then by default the database re-executes the policy function to ensure that it captures all changes to the predicate since the initial parsing. This results in unnecessary re-executions of the policy function if none of the associated attributes have changed. You can restrict the evaluation to a specific application context by including both the <code class="codeph">namespace</code> and <code class="codeph">attribute</code> parameters.</p>
<p>If you plan to use the <code class="codeph">namespace</code> and <code class="codeph">attribute</code> parameters in your policy, then follow these guidelines:</p>
<ul style="list-style-type: disc;">
<li>
<p>Ensure that you specify both <code class="codeph">namespace</code> and <code class="codeph">attribute</code> parameters, not just one.</p>
</li>
<li>
<p>Ensure that your policy has the <code class="codeph">policy_type</code> argument set to <code class="codeph">DBMS_RLS.CONTEXT_SENSITIVE</code> or <code class="codeph">SHARED_CONTEXT_SENSITIVE</code>. You cannot use the <code class="codeph">namespace</code> and <code class="codeph">attribute</code> parameters in static or dynamic policies.</p>
</li>
</ul>
<p>If there are no attributes associated with the Virtual Private Database policy function, then Oracle Database evaluates the context-sensitive function for any application context changes.</p>
<p>Shared context-sensitive policies operate in the same way as regular context-sensitive policies, except they can be shared across multiple database objects. For this policy type, all objects can share the policy function from the UGA, where the predicate is cached until the local session context changes.</p>
<div class="infoboxnotealso" id="GUID-8D342184-FBFF-4322-ACC9-4D03CF866C68__GUID-DB703E83-0323-4162-A742-7DF3A0A04362">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="vpd.htm#GUID-3B100B7D-7E47-4B07-89D4-CCEF72021617" title="The DBMS_RLS.ADD_POLICY procedure can create a shared context-sensitive Oracle Virtual Private Database to share a policy that has multiple objects.">Example: Using a Shared Context Sensitive Policy to Share a Policy with Multiple Objects</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-52A959FA-E021-4C3A-B532-0C6289BDD50F" title="This tutorial demonstrates how to create an Oracle Virtual Private Database policy that uses a database session-based application context.">Tutorial: Implementing a Session-Based Application Context Policy</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-E2E04EE0-06B4-45F2-812B-9E2C65F6669B" title="This tutorial demonstrates how to create an Oracle Virtual Private Database (VPD) policy group.">Tutorial: Implementing an Oracle Virtual Private Database Policy Group</a></p>
</li>
</ul>
</div>
</div>
</div>
<a id="DBSEG272"></a>
<div class="props_rev_3"><a id="GUID-88C911CF-9666-4054-AEB6-E9548D02588A"></a>
<h4 id="DBSEG-GUID-88C911CF-9666-4054-AEB6-E9548D02588A" class="sect4">Example: Creating a Context-Sensitive Policy with DBMS_RLS.ADD_POLICY</h4>
<div>
<p>The <code class="codeph">DBMS_RLS.ADD_POLICY</code> procedure can create an Oracle Virtual Private Database context-sensitive policy.</p>
<p><a href="vpd.htm#GUID-88C911CF-9666-4054-AEB6-E9548D02588A__CIHEAAEB">Example 10-8</a>shows how to create a <code class="codeph">CONTEXT_SENSITIVE</code> policy in which the policy is evaluated only for changes to the <code class="codeph">empno_ctx</code> namespace and <code class="codeph">emp_id</code> attribute.</p>
<div class="example" id="GUID-88C911CF-9666-4054-AEB6-E9548D02588A__CIHEAAEB">
<p class="titleinexample">Example 10-8 Creating a Context-Sensitive Policy with DBMS_RLS.ADD_POLICY</p>
<pre dir="ltr">BEGIN
 DBMS_RLS.ADD_POLICY(
  object_schema   =&gt; &#39;hr&#39;,
  object_name     =&gt; &#39;employees&#39;,
  policy_name     =&gt; &#39;secure_update&#39;,
  policy_function =&gt; &#39;hide_fin&#39;,
  policy_type     =&gt; dbms_rls.CONTEXT_SENSITIVE,
  namespace       =&gt; &#39;empno_ctx&#39;,
  attribute       =&gt; &#39;emp_id&#39;);
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="DBSEG851"></a>
<div class="props_rev_3"><a id="GUID-96B8204B-5CCD-4008-BE91-9270472966C3"></a>
<h4 id="DBSEG-GUID-96B8204B-5CCD-4008-BE91-9270472966C3" class="sect4">Example: Refreshing Cached Statements for a VPD Context-Sensitive Policy</h4>
<div>
<p>The <span class="apiname">DBMS_RLS.REFRESH_POLICY</span> statement can refresh cached statements for Oracle Virtual Private Database context-sensitive policies.</p>
<p><a href="vpd.htm#GUID-96B8204B-5CCD-4008-BE91-9270472966C3__BABJHAJA">Example 10-9</a> shows you can manually refresh all the cached statements that are associated with a Virtual Private Database context-sensitive policy by running the <code class="codeph">DBMS_RLS.REFRESH_POLICY</code> procedure.</p>
<div class="example" id="GUID-96B8204B-5CCD-4008-BE91-9270472966C3__BABJHAJA">
<p class="titleinexample">Example 10-9 Refreshing Cached Statements for a VPD Context-Sensitive Policy</p>
<pre dir="ltr">BEGIN
 DBMS_RLS.REFRESH_POLICY(
  object_schema   =&gt; &#39;hr&#39;,
  object_name     =&gt; &#39;employees&#39;,
  policy_name     =&gt; &#39;secure_update&#39;);
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="DBSEG383"></a>
<div class="props_rev_3"><a id="GUID-4AE84443-F76D-428C-97DD-AD0780CE4565"></a>
<h4 id="DBSEG-GUID-4AE84443-F76D-428C-97DD-AD0780CE4565" class="sect4">Example: Altering an Existing Context-Sensitive Policy</h4>
<div>
<p>The <code class="codeph">DBMS_RLS.ALTER_POLICY</code> procedure can modify an Oracle Virtual Private Database policy.</p>
<p><a href="vpd.htm#GUID-4AE84443-F76D-428C-97DD-AD0780CE4565__BABJCBID">Example 10-10</a> shows how you can use the <code class="codeph">DBMS_RLS.ALTER_POLICY</code> statement to alter an existing context-sensitive policy so that the <code class="codeph">order_update_pol</code> policy function is executed only if the relevant context attributes change.</p>
<div class="example" id="GUID-4AE84443-F76D-428C-97DD-AD0780CE4565__BABJCBID">
<p class="titleinexample">Example 10-10 Altering an Existing Context-Sensitive Policy</p>
<pre dir="ltr">BEGIN
 DBMS_RLS.ALTER_POLICY(
  object_schema   =&gt; &#39;oe&#39;,
  object_name     =&gt; &#39;orders&#39;,
  policy_name     =&gt; &#39;order_update_pol&#39;,
  alter_option    =&gt;  DBMS_RLS.ADD_ATTRIBUTE_ASSOCIATION,
  namespace       =&gt; &#39;empno_ctx&#39;,
  attribute       =&gt; &#39;emp_role&#39;);
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="DBSEG274"></a><a id="DBSEG273"></a>
<div class="props_rev_3"><a id="GUID-3B100B7D-7E47-4B07-89D4-CCEF72021617"></a>
<h4 id="DBSEG-GUID-3B100B7D-7E47-4B07-89D4-CCEF72021617" class="sect4">Example: Using a Shared Context Sensitive Policy to Share a Policy with Multiple Objects</h4>
<div>
<p>The <code class="codeph">DBMS_RLS.ADD_POLICY</code> procedure can create a shared context-sensitive Oracle Virtual Private Database to share a policy that has multiple objects.</p>
<p><a href="vpd.htm#GUID-3B100B7D-7E47-4B07-89D4-CCEF72021617__CIHJJGGB">Example 10-11</a> shows how to create two shared context sensitive policies that share a policy with multiple tables, and how to restrict the evaluation only for changes to the <code class="codeph">empno_ctx</code> namespace and <code class="codeph">emp_id</code> attribute.</p>
<div class="example" id="GUID-3B100B7D-7E47-4B07-89D4-CCEF72021617__CIHJJGGB">
<p class="titleinexample">Example 10-11 Shared Context-Sensitive Policy with DBMS_RLS.ADD_POLICY</p>
<pre dir="ltr"><span class="bold">-- 1. Create a policy for the first table, employees:</span>
BEGIN
 DBMS_RLS.ADD_POLICY(
  object_schema   =&gt; &#39;hr&#39;,
  object_name     =&gt; &#39;employees&#39;,
  policy_name     =&gt; &#39;secure_update&#39;,
  policy_function =&gt; &#39;hide_fin&#39;,
  policy_type     =&gt; dbms_rls.SHARED_CONTEXT_SENSITIVE,
  namespace       =&gt; &#39;empno_ctx&#39;,
  attribute       =&gt; &#39;emp_id&#39;);
END;
/
<span class="bold">--2. Create a policy for the second table, fin_data:</span>
BEGIN
 DBMS_RLS.ADD_POLICY(
  object_schema   =&gt; &#39;hr&#39;,
  object_name     =&gt; &#39;fin_data&#39;,
  policy_name     =&gt; &#39;secure_update&#39;,
  policy_function =&gt; &#39;hide_fin&#39;,
  policy_type     =&gt; dbms_rls.SHARED_CONTEXT_SENSITIVE,
  namespace       =&gt; &#39;empno_ctx&#39;,
  attribute       =&gt; &#39;emp_id&#39;);
END;
/
</pre>
<p>Note the following:</p>
<ul style="list-style-type: disc;">
<li>
<p>When using shared context-sensitive policies, ensure that the policy predicate does not contain attributes that are specific to a particular database object, such as a column name.</p>
</li>
<li>
<p>To manually refresh all the cached statements that are associated with a Virtual Private Database shared context-sensitive policy, run the <code class="codeph">DBMS_RLS.REFRESH_GROUPED_POLICY</code> procedure.</p>
</li>
</ul>
</div>
<!-- class="example" --></div>
</div>
<a id="DBSEG275"></a>
<div class="props_rev_3"><a id="GUID-6B2F8145-E920-4A09-BA5E-21F49DAB8B15"></a>
<h4 id="DBSEG-GUID-6B2F8145-E920-4A09-BA5E-21F49DAB8B15" class="sect4">When to Use Context-Sensitive and Shared Context-Sensitive Policies</h4>
<div>
<p>Use context-sensitive policies when a predicate does not need to change for a user session, but the policy must enforce multiple predicates for different users or groups.</p>
<p>For example, consider a <code class="codeph">sales_history</code> table with a single policy. This policy states that analysts can see only their own products and regional employees can see only their own region. In this case, the database must rerun the policy function each time the type of user changes. The performance gain is realized when a user can log in and issue several DML statements against the protected object without causing the server to rerun the policy function.</p>
<div class="infobox-note" id="GUID-6B2F8145-E920-4A09-BA5E-21F49DAB8B15__GUID-16C0FD03-B2B0-4376-98E1-090BACF445D6">
<p class="notep1">Note:</p>
<p>For session pooling where multiple clients share a database session, the middle tier must reset the context during client switches.</p>
</div>
</div>
</div>
<a id="DBSEG277"></a><a id="DBSEG276"></a>
<div class="props_rev_3"><a id="GUID-011F285D-258F-4A2B-BB04-79C1E99BE172"></a>
<h4 id="DBSEG-GUID-011F285D-258F-4A2B-BB04-79C1E99BE172" class="sect4">Summary of the Five Oracle Virtual Private Database Policy Types</h4>
<div>
<p>Oracle Virtual Private Database provides five policy types, based on user needs such as hosting environments.</p>
<p><a href="vpd.htm#GUID-011F285D-258F-4A2B-BB04-79C1E99BE172__CIHICBIE" title="This table lists the different policy types, explain when they execute, provide a usage example, and indicate whether they can be shared across multiple objects.">Table 10-2</a> summarizes the types of policy types available.</p>
<div class="tblformalwide" id="GUID-011F285D-258F-4A2B-BB04-79C1E99BE172__CIHICBIE">
<p class="titleintable">Table 10-2 DBMS_RLS.ADD_POLICY Policy Types</p>
<table class="cellalignment3691" title="DBMS_RLS.ADD_POLICY Policy Types" summary="This table lists the different policy types, explain when they execute, provide a usage example, and indicate whether they can be shared across multiple objects.">
<thead>
<tr class="cellalignment3671">
<th class="cellalignment3759" id="d76065e5393">Policy Types</th>
<th class="cellalignment3692" id="d76065e5396">When the Policy Function Executes</th>
<th class="cellalignment3758" id="d76065e5399">Usage Example</th>
<th class="cellalignment3793" id="d76065e5402">Shared Across Multiple Objects?</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3671">
<td class="cellalignment3762" id="d76065e5407" headers="d76065e5393">
<p><code class="codeph">DYNAMIC</code></p>
</td>
<td class="cellalignment3694" headers="d76065e5407 d76065e5396">
<p>Policy function re-executes every time a policy-protected database object is accessed.</p>
</td>
<td class="cellalignment3761" headers="d76065e5407 d76065e5399">
<p>Applications where policy predicates must be generated for each query, such as time-dependent policies where users are denied access to database objects at certain times during the day</p>
</td>
<td class="cellalignment3794" headers="d76065e5407 d76065e5402">
<p>No</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3762" id="d76065e5421" headers="d76065e5393">
<p><code class="codeph">STATIC</code></p>
</td>
<td class="cellalignment3694" headers="d76065e5421 d76065e5396">
<p>Once, then the predicate is cached in the SGA<a id="fn_1" href="#fn_1" onclick="footdisplay(1,&#34;Each execution of the same cursor could produce a different row set for the same predicate because the predicate may filter the data differently based on attributes such as SYS_CONTEXT or SYSDATE. &#34;)"><sup>Foot&nbsp;1</sup></a></p>
</td>
<td class="cellalignment3761" headers="d76065e5421 d76065e5399">
<p>View replacement</p>
</td>
<td class="cellalignment3794" headers="d76065e5421 d76065e5402">
<p>No</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3762" id="d76065e5444" headers="d76065e5393">
<p><code class="codeph">SHARED_STATIC</code></p>
</td>
<td class="cellalignment3694" headers="d76065e5444 d76065e5396">
<p>Same as <code class="codeph">STATIC</code></p>
</td>
<td class="cellalignment3761" headers="d76065e5444 d76065e5399">
<p>Hosting environments, such as data warehouses where the same predicate must be applied to multiple database objects</p>
</td>
<td class="cellalignment3794" headers="d76065e5444 d76065e5402">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3762" id="d76065e5460" headers="d76065e5393">
<p><code class="codeph">CONTEXT_SENSITIVE</code></p>
</td>
<td class="cellalignment3694" headers="d76065e5460 d76065e5396">
<ul style="list-style-type: disc;">
<li>
<p>At statement parse time</p>
</li>
<li>
<p>At statement execution time when the local application context changed since the last use of the cursor</p>
</li>
</ul>
</td>
<td class="cellalignment3761" headers="d76065e5460 d76065e5399">
<p>Three-tier, session pooling applications where policies enforce two or more predicates for different users or groups</p>
</td>
<td class="cellalignment3794" headers="d76065e5460 d76065e5402">
<p>No</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3762" id="d76065e5479" headers="d76065e5393">
<p><code class="codeph">SHARED_CONTEXT_SENSITIVE</code></p>
</td>
<td class="cellalignment3694" headers="d76065e5479 d76065e5396">
<p>First time the object is reference in a database session.</p>
<p>Predicates are cached in the private session memory UGA so policy functions can be shared among objects.</p>
</td>
<td class="cellalignment3761" headers="d76065e5479 d76065e5399">
<p>Same as <code class="codeph">CONTEXT_SENSITIVE</code>, but multiple objects can share the policy function from the session UGA</p>
</td>
<td class="cellalignment3794" headers="d76065e5479 d76065e5402">
<p>Yes</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1</sup></p>
<p>Each execution of the same cursor could produce a different row set for the same predicate because the predicate may filter the data differently based on attributes such as <code class="codeph">SYS_CONTEXT</code> or <code class="codeph">SYSDATE</code>.</p>
</div>
</div>
</div>
</div>
<a id="DBSEG278"></a>
<div class="props_rev_3"><a id="GUID-2113CF3C-D950-40B3-A121-A44284EF104D"></a>
<h2 id="DBSEG-GUID-2113CF3C-D950-40B3-A121-A44284EF104D" class="sect2">Tutorials: Creating Oracle Virtual Private Database Policies</h2>
<div>
<p>The tutorials in this section show how to create a simple Oracle Virtual Private (VPD) policies, a policy that has a database session-based application context, and a policy group.</p>
<p>Topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="vpd.htm#GUID-96F02E4D-4765-41BA-B834-DA54CC2E72B5" title="This tutorial uses the OE user account to demonstrate how to create a simple Oracle Virtual Private Database (VPD) policy.">Tutorial: Creating a Simple Oracle Virtual Private Database Policy</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-52A959FA-E021-4C3A-B532-0C6289BDD50F" title="This tutorial demonstrates how to create an Oracle Virtual Private Database policy that uses a database session-based application context.">Tutorial: Implementing a Session-Based Application Context Policy</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-E2E04EE0-06B4-45F2-812B-9E2C65F6669B" title="This tutorial demonstrates how to create an Oracle Virtual Private Database (VPD) policy group.">Tutorial: Implementing an Oracle Virtual Private Database Policy Group</a></p>
</li>
</ul>
</div>
<a id="DBSEG279"></a>
<div class="props_rev_3"><a id="GUID-96F02E4D-4765-41BA-B834-DA54CC2E72B5"></a>
<h3 id="DBSEG-GUID-96F02E4D-4765-41BA-B834-DA54CC2E72B5" class="sect3">Tutorial: Creating a Simple Oracle Virtual Private Database Policy</h3>
<div>
<p>This tutorial uses the <code class="codeph">OE</code> user account to demonstrate how to create a simple Oracle Virtual Private Database (VPD) policy.</p>
<p>Topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="vpd.htm#GUID-1CC4DE75-188C-4D0F-92B3-70BDE1D6DEBE" title="This tutorial shows how to create a VPD policy that limits access to orders created by Sales Representative 159 in the OE.ORDERS table.">About This Tutorial</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-616AA376-64B9-4544-A2BC-14B24E95E248" title="First, you must ensure that OE user account is active.">Step 1: Ensure That the OE User Account Is Active</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-EF2AB277-4328-4BCD-BC12-0CB44B0ECAF3" title="Next, you are ready to create a policy function.">Step 2: Create a Policy Function</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-237895BF-4FBE-40DC-B7DE-46617EC5F5FE" title="After you create the policy function, you are ready to associate it with a VPD policy.">Step 3: Create the Oracle Virtual Private Database Policy</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-6EDCB350-998F-4FA4-9D08-915C63CBDFB8" title="After you create the Oracle Virtual Private Database policy, it goes into effect immediately.">Step 4: Test the Policy</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-F2ACE842-9F27-489F-B482-3978ACDBE5CE" title="If you no longer need the components of this tutorial, then you can remove them.">Step 5: Remove the Components of This Tutorial</a></p>
</li>
</ul>
</div>
<a id="DBSEG562"></a>
<div class="props_rev_3"><a id="GUID-1CC4DE75-188C-4D0F-92B3-70BDE1D6DEBE"></a>
<h4 id="DBSEG-GUID-1CC4DE75-188C-4D0F-92B3-70BDE1D6DEBE" class="sect4">About This Tutorial</h4>
<div>
<p>This tutorial shows how to create a VPD policy that limits access to orders created by Sales Representative 159 in the <code class="codeph">OE.ORDERS</code> table.</p>
<p>In essence, the policy translates the following statement:</p>
<pre dir="ltr">SELECT * FROM OE.ORDERS;
</pre>
<p>To the following statement:</p>
<pre dir="ltr">SELECT * FROM OE.ORDERS WHERE SALES_REP_ID = 159;
</pre>
<div class="infobox-note" id="GUID-1CC4DE75-188C-4D0F-92B3-70BDE1D6DEBE__GUID-546BEB4A-5D3D-4C93-95D6-195313823AB2">
<p class="notep1">Note:</p>
<p>If you are using a multitenant environment, then this tutorial applies to the current PDB only.</p>
</div>
</div>
</div>
<a id="DBSEG280"></a>
<div class="props_rev_3"><a id="GUID-616AA376-64B9-4544-A2BC-14B24E95E248"></a>
<h4 id="DBSEG-GUID-616AA376-64B9-4544-A2BC-14B24E95E248" class="sect4">Step 1: Ensure That the OE User Account Is Active</h4>
<div>
<p>First, you must ensure that <code class="codeph">OE</code> user account is active.</p>
<ol>
<li class="stepexpand"><span>Log on to SQL*Plus as user <code class="codeph">SYS</code> with the <code class="codeph">SYSDBA</code> administrative privilege.</span>
<div>
<pre dir="ltr">sqlplus sys as sysdba
Enter password: <span class="italic">password</span>
</pre></div>
</li>
<li class="stepexpand"><span>In a multitenant environment, connect to the appropriate PDB.</span>
<div>
<p>For example:</p>
<pre dir="ltr">CONNECT SYS@hrpdb AS SYSDBA
Enter password: <span class="italic">password</span>
</pre>
<p>To find the available PDBs, query the <code class="codeph">DBA_PDBS</code> data dictionary view. To check the current PDB, run the <code class="codeph">show con_name</code> command.</p>
</div>
</li>
<li class="stepexpand"><span>Query the <code class="codeph">DBA_USERS</code> data dictionary view to find the account status of <code class="codeph">OE</code>.</span>
<div>
<pre dir="ltr">SELECT USERNAME, ACCOUNT_STATUS FROM DBA_USERS WHERE USERNAME = &#39;OE&#39;;
</pre>
<p>The status should be <code class="codeph">OPEN</code>. If the <code class="codeph">DBA_USERS</code> view lists user <code class="codeph">OE</code> as locked and expired, then enter the following statement to unlock the <code class="codeph">OE</code> account and create a new password:</p>
<pre dir="ltr">ALTER USER OE ACCOUNT UNLOCK IDENTIFIED BY <span class="italic">password</span>;
</pre>
<p>Follow the guidelines in <a href="authentication.htm#GUID-AA1AA635-1CD5-422E-B8CA-681ED7C253CA" title="Oracle provides a set of minimum requirements for passwords.">Minimum Requirements for Passwords</a> to replace <span class="italic"><code class="codeph">password</code></span> with a password that is secure. For greater security, do not reuse the same password that was used in previous releases of Oracle Database.</p>
</div>
</li>
</ol>
</div>
</div>
<a id="DBSEG281"></a>
<div class="props_rev_3"><a id="GUID-EF2AB277-4328-4BCD-BC12-0CB44B0ECAF3"></a>
<h4 id="DBSEG-GUID-EF2AB277-4328-4BCD-BC12-0CB44B0ECAF3" class="sect4">Step 2: Create a Policy Function</h4>
<div>
<p>Next, you are ready to create a policy function.</p>
<div class="section">
<p>As user <code class="codeph">SYS</code>, create the following function, which will append the <code class="codeph">WHERE SALES_REP_ID = 159</code> clause to any <code class="codeph">SELECT</code> statement on the <code class="codeph">OE.ORDERS</code> table. (You can copy and paste this text by positioning the cursor at the start of <code class="codeph">CREATE OR REPLACE</code> in the first line.)</p>
<pre dir="ltr">CREATE OR REPLACE FUNCTION auth_orders( 
  schema_var IN VARCHAR2,
  table_var  IN VARCHAR2
 )
 RETURN VARCHAR2
 IS
  return_val VARCHAR2 (400);
 BEGIN
  return_val := &#39;SALES_REP_ID = 159&#39;;
  RETURN return_val;
 END auth_orders;
/
</pre>
<p>In this example:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">schema_var</code> and <code class="codeph">table_var</code> create input parameters to specify to store the schema name, <code class="codeph">OE</code>, and table name, <code class="codeph">ORDERS</code>. First, define the parameter for the schema, and then define the parameter for the object, in this case, a table. Always create them in this order. The Virtual Private Database policy you create will need these parameters to specify the <code class="codeph">OE.ORDERS</code> table.</p>
</li>
<li>
<p><code class="codeph">RETURN VARCHAR2</code> returns the string that will be used for the <code class="codeph">WHERE</code> predicate clause. Remember that return value is always a <code class="codeph">VARCHAR2</code> data type.</p>
</li>
<li>
<p><code class="codeph">IS ... RETURN return_val</code> encompasses the creation of the <code class="codeph">WHERE SALES_REP_ID = 159</code> predicate.</p>
</li>
</ul>
</div>
<!-- class="section" --></div>
</div>
<a id="DBSEG282"></a>
<div class="props_rev_3"><a id="GUID-237895BF-4FBE-40DC-B7DE-46617EC5F5FE"></a>
<h4 id="DBSEG-GUID-237895BF-4FBE-40DC-B7DE-46617EC5F5FE" class="sect4">Step 3: Create the Oracle Virtual Private Database Policy</h4>
<div>
<p>After you create the policy function, you are ready to associate it with a VPD policy.</p>
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>Create the following policy by using the <code class="codeph">ADD_POLICY</code> procedure in the <code class="codeph">DBMS_RLS</code> package.</p>
<pre dir="ltr">BEGIN
  DBMS_RLS.ADD_POLICY (
    object_schema    =&gt; &#39;oe&#39;,
    object_name      =&gt; &#39;orders&#39;,
    policy_name      =&gt; &#39;orders_policy&#39;,
    function_schema  =&gt; &#39;sys&#39;,
    policy_function  =&gt; &#39;auth_orders&#39;,
    statement_types  =&gt; &#39;select&#39;
   );
 END;
/
</pre>
<p>In this example:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">object_schema =&gt; &#39;oe&#39;</code> specifies the schema that you want to protect, that is, <code class="codeph">OE</code>.</p>
</li>
<li>
<p><code class="codeph">object_name =&gt; &#39;orders&#39;</code> specifies the object within the schema to protect, that is, the <code class="codeph">ORDERS</code> table.</p>
</li>
<li>
<p><code class="codeph">policy_name =&gt; &#39;orders_policy&#39;</code> names this policy <code class="codeph">orders_policy</code>.</p>
</li>
<li>
<p><code class="codeph">function_schema =&gt; &#39;sys&#39;</code> specifies the schema in which the <code class="codeph">auth_orders</code> function was created. In this example, <code class="codeph">auth_orders</code> was created in the <code class="codeph">SYS</code> schema. But typically, it should be created in the schema of a security administrator.</p>
</li>
<li>
<p><code class="codeph">policy_function =&gt; &#39;auth_orders&#39;</code> specifies a function to enforce the policy. Here, you specify the <code class="codeph">auth_orders</code> function that you created in <a href="vpd.htm#GUID-EF2AB277-4328-4BCD-BC12-0CB44B0ECAF3" title="Next, you are ready to create a policy function.">Step 2: Create a Policy Function</a>.</p>
</li>
<li>
<p><code class="codeph">statement_types =&gt; &#39;select&#39;</code> specifies the operations to which the policy applies. In this example, the policy applies to all <code class="codeph">SELECT</code> statements that the user may perform.</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="section" --></div>
</div>
<a id="DBSEG283"></a>
<div class="props_rev_3"><a id="GUID-6EDCB350-998F-4FA4-9D08-915C63CBDFB8"></a>
<h4 id="DBSEG-GUID-6EDCB350-998F-4FA4-9D08-915C63CBDFB8" class="sect4">Step 4: Test the Policy</h4>
<div>
<p>After you create the Oracle Virtual Private Database policy, it goes into effect immediately.</p>
<div class="section">
<p>The next time a user, including the owner of the schema, performs a <code class="codeph">SELECT</code> on <code class="codeph">OE.ORDERS</code>, only the orders by Sales Representative 159 will be accessed.</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Connect as user <code class="codeph">OE</code>.</span>
<div>
<pre dir="ltr">CONNECT oe <span class="italic">-- Or, CONNECT OE@hrpdb</span>
Enter password: <span class="italic">password</span>
</pre></div>
</li>
<li class="stepexpand"><span>Enter the following <code class="codeph">SELECT</code> statement:</span>
<div>
<pre dir="ltr">SELECT COUNT(*) FROM ORDERS;
</pre>
<p>The following output should appear:</p>
<pre dir="ltr"> COUNT(*)
---------
        7
</pre>
<p>The policy is in effect for user <code class="codeph">OE</code>: As you can see, only 7 of the 105 rows in the orders table are returned.</p>
<p>But users with administrative privileges still have access to all the rows in the table.</p>
</div>
</li>
<li class="stepexpand"><span>Connect as user <code class="codeph">SYS</code> with the <code class="codeph">SYSDBA</code> administrative privilege.</span>
<div>
<pre dir="ltr">CONNECT SYS AS SYSDBA <span class="italic">-- Or, CONNECT SYS@hrpdb AS SYSDBA</span>
Enter password: <span class="italic">password</span>
</pre></div>
</li>
<li class="stepexpand"><span>Enter the following <code class="codeph">SELECT</code> statement:</span>
<div>
<pre dir="ltr">SELECT COUNT(*) FROM OE.ORDERS;
</pre>
<p>The following output should appear:</p>
<pre dir="ltr"> COUNT(*)
---------
      105
</pre></div>
</li>
</ol>
</div>
</div>
<a id="DBSEG284"></a>
<div class="props_rev_3"><a id="GUID-F2ACE842-9F27-489F-B482-3978ACDBE5CE"></a>
<h4 id="DBSEG-GUID-F2ACE842-9F27-489F-B482-3978ACDBE5CE" class="sect4">Step 5: Remove the Components of This Tutorial</h4>
<div>
<p>If you no longer need the components of this tutorial, then you can remove them.</p>
<ol>
<li class="stepexpand"><span>As user <code class="codeph">SYS</code>, remove the function and policy as follows:</span>
<div>
<pre dir="ltr">DROP FUNCTION auth_orders;
EXEC DBMS_RLS.DROP_POLICY(&#39;OE&#39;,&#39;ORDERS&#39;,&#39;ORDERS_POLICY&#39;);
</pre></div>
</li>
<li class="stepexpand"><span>If you need to lock and expire the <code class="codeph">OE</code> account, then enter the following statement:</span>
<div>
<pre dir="ltr">ALTER USER OE ACCOUNT LOCK PASSWORD EXPIRE;
</pre></div>
</li>
</ol>
</div>
</div>
</div>
<a id="DBSEG285"></a>
<div class="props_rev_3"><a id="GUID-52A959FA-E021-4C3A-B532-0C6289BDD50F"></a>
<h3 id="DBSEG-GUID-52A959FA-E021-4C3A-B532-0C6289BDD50F" class="sect3">Tutorial: Implementing a Session-Based Application Context Policy</h3>
<div>
<p>This tutorial demonstrates how to create an Oracle Virtual Private Database policy that uses a database session-based application context.</p>
<p>Topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="vpd.htm#GUID-C07E1A23-08A7-4739-B943-F17593AAAE4F" title="This tutorial shows how to use a database session-based application context to implement a policy in which customers see only their own orders.">About This Tutorial</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-738857D8-8EDD-4CBE-AAED-EB5DAA60BE0D" title="First, create user accounts and the sample tables.">Step 1: Create User Accounts and Sample Tables</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-8DFE13D1-02BB-40F7-870B-E2ADA190F48B" title="Next, you are ready to create the database session-based application context.">Step 2: Create a Database Session-Based Application Context</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-FCA5AD56-ACA5-4357-9EA6-AAADE0386B3B" title="After you create the application context, you are ready to create a package to set the context.">Step 3: Create a PL/SQL Package to Set the Application Context</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-F2C840AA-2CB0-4F7B-8543-3B39F9B895C9" title="The logon trigger runs the PL/SQL package procedure so that the next time a user logs on, the application context is set.">Step 4: Create a Logon Trigger to Run the Application Context PL/SQL Package</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-F3102964-ED20-40C5-97DB-C9EE9E13D60A" title="The logon trigger sets the application context for the user when the trigger runs the sysadmin_vpd.orders_ctx_pkg.set_custnum procedure.">Step 5: Test the Logon Trigger</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-B0EC8CD5-43FB-4FCA-A61A-6E62E6B21A9D" title="The next step is to create a PL/SQL function to control the display of the user&rsquo;s query.">Step 6: Create a PL/SQL Policy Function to Limit User Access to Their Orders</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-FD4D9C74-93B0-4E28-81C9-D75D85400748" title="Finally, you are ready to create the VPD security policy.">Step 7: Create the New Security Policy</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-E188CB4D-BCF3-4A2F-87BC-2688EC05C699" title="Now that you have created all the components, you are ready to test the policy.">Step 8: Test the New Policy</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-B7B6563A-F6B6-43B3-AF40-12A92EF47FE1" title="If you no longer need the components of this tutorial, then you can remove them.">Step 9: Remove the Components of This Tutorial</a></p>
</li>
</ul>
</div>
<a id="DBSEG563"></a>
<div class="props_rev_3"><a id="GUID-C07E1A23-08A7-4739-B943-F17593AAAE4F"></a>
<h4 id="DBSEG-GUID-C07E1A23-08A7-4739-B943-F17593AAAE4F" class="sect4">About This Tutorial</h4>
<div>
<p>This tutorial shows how to use a database session-based application context to implement a policy in which customers see only their own orders.</p>
<p>If you are using a multitenant environment, then this tutorial applies to the current PDB only.</p>
<p>In this tutorial, you create the following layers of security:</p>
<ol>
<li>
<p>When a user logs on, a database session-based application context checks whether the user is a customer. If a user is not a customer, the user still can log on, but this user cannot access the orders entry table you will create for this example.</p>
</li>
<li>
<p>If the user is a customer, he or she can log on. After the customer has logged on, an Oracle Virtual Private Database policy restricts this user to see only his or her orders.</p>
</li>
<li>
<p>As a further restriction, the Oracle Virtual Private Database policy prevents users from adding, modifying, or removing orders.</p>
</li>
</ol>
</div>
</div>
<a id="DBSEG286"></a>
<div class="props_rev_3"><a id="GUID-738857D8-8EDD-4CBE-AAED-EB5DAA60BE0D"></a>
<h4 id="DBSEG-GUID-738857D8-8EDD-4CBE-AAED-EB5DAA60BE0D" class="sect4">Step 1: Create User Accounts and Sample Tables</h4>
<div>
<p>First, create user accounts and the sample tables.</p>
<ol>
<li class="stepexpand"><span>Start SQL*Plus and log on as a user who has administrative privileges.</span>
<div>
<pre dir="ltr">sqlplus sys as sysdba
Enter password: <span class="italic">password</span>
</pre></div>
</li>
<li class="stepexpand"><span>In a multitenant environment, connect to the appropriate PDB.</span>
<div>
<p>For example:</p>
<pre dir="ltr">CONNECT SYS@hrpdb AS SYSDBA
Enter password: <span class="italic">password</span>
</pre>
<p>To find the available PDBs, query the <code class="codeph">DBA_PDBS</code> data dictionary view. To check the current PDB, run the <code class="codeph">show con_name</code> command.</p>
</div>
</li>
<li class="stepexpand"><span>Create the following administrative user, who will administer the Oracle Virtual Private Database policy.</span>
<div>
<p>The following SQL statements create this user and then grant the user the necessary privileges for completing this tutorial.</p>
<pre dir="ltr">CREATE USER sysadmin_vpd IDENTIFIED BY <span class="italic">password</span> CONTAINER = CURRENT;
GRANT CREATE SESSION, CREATE ANY CONTEXT, CREATE PROCEDURE, CREATE TRIGGER, ADMINISTER DATABASE TRIGGER TO sysadmin_vpd;
GRANT EXECUTE ON DBMS_SESSION TO sysadmin_vpd;
GRANT EXECUTE ON DBMS_RLS TO sysadmin_vpd;
</pre>
<p>Follow the guidelines in <a href="authentication.htm#GUID-AA1AA635-1CD5-422E-B8CA-681ED7C253CA" title="Oracle provides a set of minimum requirements for passwords.">Minimum Requirements for Passwords</a> to replace <span class="italic"><code class="codeph">password</code></span> with a password that is secure.</p>
</div>
</li>
<li class="stepexpand"><span>Create the following local users:</span>
<div>
<pre dir="ltr">CREATE USER tbrooke IDENTIFIED BY <span class="italic">password</span> CONTAINER = CURRENT;
CREATE USER owoods IDENTIFIED BY <span class="italic">password</span> CONTAINER = CURRENT;

GRANT CREATE SESSION TO tbrooke, owoods;
</pre>
<p>Replace <span class="italic"><code class="codeph">password</code></span> with a password that is secure.</p>
</div>
</li>
<li class="stepexpand"><span>Check the account status of the sample user <code class="codeph">SCOTT</code>, who you will use for this tutorial:</span>
<div>
<pre dir="ltr">SELECT USERNAME, ACCOUNT_STATUS FROM DBA_USERS WHERE USERNAME = &#39;SCOTT&#39;;
</pre>
<p>The status should be <code class="codeph">OPEN</code>. If the <code class="codeph">DBA_USERS</code> view lists user <code class="codeph">SCOTT</code> as locked and expired, then enter the following statement to unlock the <code class="codeph">SCOTT</code> account and create a new password for him:</p>
<pre dir="ltr">ALTER USER SCOTT ACCOUNT UNLOCK IDENTIFIED BY <span class="italic">password</span>;
</pre>
<p>Follow the guidelines in <a href="authentication.htm#GUID-AA1AA635-1CD5-422E-B8CA-681ED7C253CA" title="Oracle provides a set of minimum requirements for passwords.">Minimum Requirements for Passwords</a> to replace <span class="italic"><code class="codeph">password</code></span> with a password that is secure. For greater security, do not reuse the same password that was used in previous releases of Oracle Database.</p>
</div>
</li>
<li class="stepexpand"><span>Connect as user <code class="codeph">SCOTT</code>.</span>
<div>
<pre dir="ltr">CONNECT SCOTT <span class="italic">-- Or, CONNECT SCOTT@hrpdb</span>
Enter password: <span class="italic">password</span>
</pre></div>
</li>
<li class="stepexpand"><span>Create and populate the <code class="codeph">customers</code> table.</span>
<div>
<pre dir="ltr">CREATE TABLE customers (
 cust_no    NUMBER(4), 
 cust_email VARCHAR2(20),
 cust_name  VARCHAR2(20));

INSERT INTO customers VALUES (1234, &#39;TBROOKE&#39;, &#39;Thadeus Brooke&#39;);
INSERT INTO customers VALUES (5678, &#39;OWOODS&#39;, &#39;Oberon Woods&#39;);
</pre>
<p>When you enter the user email IDs, enter them in upper-case letters. Later on, when you create the application context PL/SQL package, the <code class="codeph">SESSION_USER</code> parameter of the <code class="codeph">SYS_CONTEXT</code> function expects the user names to be in upper case. Otherwise, you will be unable to set the application context for the user.</p>
</div>
</li>
<li class="stepexpand"><span>User <code class="codeph">sysadmin_vpd</code> will need <code class="codeph">SELECT</code> privileges for the customers table, so as user <code class="codeph">SCOTT</code>, grant him this privilege.</span>
<div>
<pre dir="ltr">GRANT READ ON customers TO sysadmin_vpd;
</pre></div>
</li>
<li class="stepexpand"><span>Create and populate the <code class="codeph">orders_tab</code> table.</span>
<div>
<pre dir="ltr">CREATE TABLE orders_tab (
  cust_no  NUMBER(4),
  order_no NUMBER(4));

INSERT INTO orders_tab VALUES (1234, 9876);
INSERT INTO orders_tab VALUES (5678, 5432);
INSERT INTO orders_tab VALUES (5678, 4592);
</pre></div>
</li>
<li class="stepexpand"><span>Users <code class="codeph">tbrooke</code> and <code class="codeph">owoods</code> need to query the <code class="codeph">orders_tab</code> table, so grant them the <code class="codeph">READ</code> object privilege.</span>
<div>
<pre dir="ltr">GRANT READ ON orders_tab TO tbrooke, owoods;
</pre></div>
</li>
</ol>
<div class="section">
<p>At this stage, the two sample customers, <code class="codeph">tbrooke</code> and <code class="codeph">owoods</code>, have a record of purchases in the <code class="codeph">orders_tab</code> order entry table, and if they tried right now, they can see all the orders in this table.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="DBSEG287"></a>
<div class="props_rev_3"><a id="GUID-8DFE13D1-02BB-40F7-870B-E2ADA190F48B"></a>
<h4 id="DBSEG-GUID-8DFE13D1-02BB-40F7-870B-E2ADA190F48B" class="sect4">Step 2: Create a Database Session-Based Application Context</h4>
<div>
<p>Next, you are ready to create the database session-based application context.</p>
<ol>
<li class="stepexpand"><span>Connect as user <code class="codeph">sysadmin_vpd</code>.</span>
<div>
<pre dir="ltr">CONNECT sysadmin_vpd <span class="italic">-- Or, CONNECT sysadmin_vpd@hrpdb</span>
Enter password: <span class="italic">password</span>
</pre></div>
</li>
<li class="stepexpand"><span>Enter the following statement:</span>
<div>
<pre dir="ltr">CREATE OR REPLACE CONTEXT orders_ctx USING orders_ctx_pkg;
</pre>
<p>This statement creates the <code class="codeph">orders_ctx</code> application context. Remember that even though user <code class="codeph">sysadmin_vpd</code> has created this context and it is associated with the <code class="codeph">sysadmin_vpd</code> schema, the <code class="codeph">SYS</code> schema owns the application context.</p>
</div>
</li>
</ol>
</div>
</div>
<a id="DBSEG288"></a>
<div class="props_rev_3"><a id="GUID-FCA5AD56-ACA5-4357-9EA6-AAADE0386B3B"></a>
<h4 id="DBSEG-GUID-FCA5AD56-ACA5-4357-9EA6-AAADE0386B3B" class="sect4">Step 3: Create a PL/SQL Package to Set the Application Context</h4>
<div>
<p>After you create the application context, you are ready to create a package to set the context.</p>
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>As user <code class="codeph">sysadmin_vpd</code>, create the following PL/SQL package, which will set the database session-based application context when the customers <code class="codeph">tbrooke</code> and <code class="codeph">owoods</code> log onto their accounts.</p>
<pre dir="ltr">CREATE OR REPLACE PACKAGE orders_ctx_pkg IS 
  PROCEDURE set_custnum;
 END;
/
CREATE OR REPLACE PACKAGE BODY orders_ctx_pkg IS
  PROCEDURE set_custnum
  AS
    custnum NUMBER;
  BEGIN
     SELECT cust_no INTO custnum FROM SCOTT.CUSTOMERS
        WHERE cust_email = SYS_CONTEXT(&#39;USERENV&#39;, &#39;SESSION_USER&#39;);
     DBMS_SESSION.SET_CONTEXT(&#39;orders_ctx&#39;, &#39;cust_no&#39;, custnum);
  EXCEPTION
   WHEN NO_DATA_FOUND THEN NULL;
  END set_custnum;
END;
/
</pre>
<p>In this example:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">custnum NUMBER</code> creates the <code class="codeph">custnum</code> variable, which will hold the customer ID.</p>
</li>
<li>
<p><code class="codeph">SELECT cust_no INTO custnum</code> performs a <code class="codeph">SELECT</code> statement to copy the customer ID that is stored in the <code class="codeph">cust_no</code> column data from the <code class="codeph">scott.customers</code> table into the <code class="codeph">custnum</code> variable.</p>
</li>
<li>
<p><code class="codeph">WHERE cust_email = SYS_CONTEXT(&#39;USERENV&#39;, &#39;SESSION_USER&#39;)</code> uses a <code class="codeph">WHERE</code> clause to find all the customer IDs that match the user name of the user who is logging on.</p>
</li>
<li>
<p><code class="codeph">DBMS_SESSION.SET_CONTEXT(&#39;orders_ctx&#39;, &#39;cust_no&#39;, custnum)</code> sets the <code class="codeph">orders_ctx</code> application context values by creating the <code class="codeph">cust_no</code> attribute and then setting it to the value stored in the <code class="codeph">custnum</code> variable.</p>
</li>
<li>
<p><code class="codeph">EXCEPTION ... WHEN</code> adds a <code class="codeph">WHEN NO_DATA_FOUND</code> system exception to catch any <code class="codeph">no data found</code> errors that may result from the <code class="codeph">SELECT</code> statement in the <code class="codeph">SELECT cust_no INTO custnum ...</code> statement.</p>
</li>
</ul>
</li>
</ul>
<p>To summarize, the <code class="codeph">sysadmin_vpd.set_cust_num</code> procedure identifies whether or not the session user is a registered customer by attempting to select the user&#39;s customer ID into the <code class="codeph">custnum</code> variable. If the user is a registered customer, then Oracle Database sets an application context value for this user. As you will see in <a href="vpd.htm#GUID-B0EC8CD5-43FB-4FCA-A61A-6E62E6B21A9D" title="The next step is to create a PL/SQL function to control the display of the user&rsquo;s query.">Step 6: Create a PL/SQL Policy Function to Limit User Access to Their Orders</a>, the policy function uses the context value to control the access a user has to data in the <code class="codeph">orders_tab</code> table.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="DBSEG289"></a>
<div class="props_rev_3"><a id="GUID-F2C840AA-2CB0-4F7B-8543-3B39F9B895C9"></a>
<h4 id="DBSEG-GUID-F2C840AA-2CB0-4F7B-8543-3B39F9B895C9" class="sect4">Step 4: Create a Logon Trigger to Run the Application Context PL/SQL Package</h4>
<div>
<p>The logon trigger runs the PL/SQL package procedure so that the next time a user logs on, the application context is set.</p>
<div class="section">
<p>You created this trigger in <a href="vpd.htm#GUID-FCA5AD56-ACA5-4357-9EA6-AAADE0386B3B" title="After you create the application context, you are ready to create a package to set the context.">Step 3: Create a PL/SQL Package to Set the Application Context</a>.</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>As user <code class="codeph">sysadmin_vpd</code>, create the following trigger:</p>
<pre dir="ltr">CREATE TRIGGER set_custno_ctx_trig AFTER LOGON ON DATABASE
 BEGIN
  sysadmin_vpd.orders_ctx_pkg.set_custnum;
 END;
/
</pre></li>
</ul>
<div class="infoboxnotealso" id="GUID-F2C840AA-2CB0-4F7B-8543-3B39F9B895C9__GUID-C34A8572-A8F7-4025-BA2D-AF317D6A32E5">
<p class="notep1">See Also:</p>
<a href="app_context.htm#GUID-580EE6B3-D244-4AAE-BBB5-BB606A456410" title="Users must run database session application context package after when they log in to the database instance.">Logon Triggers to Run a Database Session Application Context Package</a></div>
</div>
<!-- class="section" --></div>
</div>
<a id="DBSEG1053"></a>
<div class="props_rev_3"><a id="GUID-F3102964-ED20-40C5-97DB-C9EE9E13D60A"></a>
<h4 id="DBSEG-GUID-F3102964-ED20-40C5-97DB-C9EE9E13D60A" class="sect4">Step 5: Test the Logon Trigger</h4>
<div>
<p>The logon trigger sets the application context for the user when the trigger runs the <code class="codeph">sysadmin_vpd.orders_ctx_pkg.set_custnum</code> procedure.</p>
<ol>
<li class="stepexpand"><span>Connect as user <code class="codeph">tbrooke</code>.</span>
<div>
<pre dir="ltr">CONNECT tbrooke <span class="italic">-- For a CDB, connect to the PDB, e.g., @hrpdb</span> 
Enter password: <span class="italic">password</span>
</pre></div>
</li>
<li class="stepexpand"><span>Execute the following query:</span>
<div>
<pre dir="ltr">SELECT SYS_CONTEXT(&#39;orders_ctx&#39;, &#39;cust_no&#39;) custnum FROM DUAL;
</pre>
<p>The following output should appear:</p>
<pre dir="ltr">EMP_ID
-------------------------------------------------------------------
1234
</pre></div>
</li>
</ol>
</div>
</div>
<a id="DBSEG290"></a>
<div class="props_rev_3"><a id="GUID-B0EC8CD5-43FB-4FCA-A61A-6E62E6B21A9D"></a>
<h4 id="DBSEG-GUID-B0EC8CD5-43FB-4FCA-A61A-6E62E6B21A9D" class="sect4">Step 6: Create a PL/SQL Policy Function to Limit User Access to Their Orders</h4>
<div>
<p>The next step is to create a PL/SQL function to control the display of the user&rsquo;s query.</p>
<div class="section">When the user who has logged in performs a <code class="codeph">SELECT * FROM scott.orders_tab</code> query, the function should cause the output to display only the orders of that user.</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Connect as user <code class="codeph">sysadmin_vpd</code>.</span>
<div>
<pre dir="ltr">CONNECT sysadmin_vpd <span class="italic">-- Or, CONNECT sysadmin_vpd@hrpdb</span>
Enter password: <span class="italic">password</span>
</pre></div>
</li>
<li class="stepexpand"><span>Create the following function:</span>
<div>
<pre dir="ltr">CREATE OR REPLACE FUNCTION get_user_orders(
  schema_p   IN VARCHAR2,
  table_p    IN VARCHAR2)
 RETURN VARCHAR2
 AS
  orders_pred VARCHAR2 (400);
 BEGIN
  orders_pred := &#39;cust_no = SYS_CONTEXT(&#39;&#39;orders_ctx&#39;&#39;, &#39;&#39;cust_no&#39;&#39;)&#39;; 
 RETURN orders_pred;
END;
/
</pre></div>
</li>
</ol>
<div class="section">
<p>This function creates and returns a <code class="codeph">WHERE</code> predicate that translates to &#34;where the orders displayed belong to the user who has logged in.&#34; It then appends this <code class="codeph">WHERE</code> predicate to any queries this user may run against the <code class="codeph">scott.orders_tab</code> table. Next, you are ready to create an Oracle Virtual Private Database policy that applies this function to the <code class="codeph">orders_tab</code> table.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="DBSEG291"></a>
<div class="props_rev_3"><a id="GUID-FD4D9C74-93B0-4E28-81C9-D75D85400748"></a>
<h4 id="DBSEG-GUID-FD4D9C74-93B0-4E28-81C9-D75D85400748" class="sect4">Step 7: Create the New Security Policy</h4>
<div>
<p>Finally, you are ready to create the VPD security policy.</p>
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>As user <code class="codeph">sysadmin_vpd</code>, use the <code class="codeph">DBMS_RLS.ADD_POLICY</code> procedure to create the policy as follows:</p>
<pre dir="ltr">BEGIN
 DBMS_RLS.ADD_POLICY (
  object_schema    =&gt; &#39;scott&#39;, 
  object_name      =&gt; &#39;orders_tab&#39;, 
  policy_name      =&gt; &#39;orders_policy&#39;, 
  function_schema  =&gt; &#39;sysadmin_vpd&#39;,
  policy_function  =&gt; &#39;get_user_orders&#39;,
  statement_types  =&gt; &#39;select&#39;,
  policy_type      =&gt; DBMS_RLS.CONTEXT_SENSITIVE,
  namespace        =&gt; &#39;orders_ctx&#39;,
  attribute        =&gt; &#39;cust_no&#39;);
END;
/
</pre></li>
</ul>
<p>This statement creates a policy named <code class="codeph">orders_policy</code> and applies it to the <code class="codeph">orders_tab</code> table, which customers will query for their orders, in the <code class="codeph">SCOTT</code> schema. The <code class="codeph">get_user_orders</code> function implements the policy, which is stored in the <code class="codeph">sysadmin_vpd</code> schema. The policy further restricts users to issuing <code class="codeph">SELECT</code> statements only. The <code class="codeph">namespace</code> and <code class="codeph">attribute</code> parameters specify the application context that you created earlier.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="DBSEG292"></a>
<div class="props_rev_3"><a id="GUID-E188CB4D-BCF3-4A2F-87BC-2688EC05C699"></a>
<h4 id="DBSEG-GUID-E188CB4D-BCF3-4A2F-87BC-2688EC05C699" class="sect4">Step 8: Test the New Policy</h4>
<div>
<p>Now that you have created all the components, you are ready to test the policy.</p>
<ol>
<li class="stepexpand"><span>Connect as user <code class="codeph">tbrooke</code>.</span>
<div>
<pre dir="ltr">CONNECT tbrooke <span class="italic">-- Or, CONNECT tbrooke@hrpdb</span>
Enter password: <span class="italic">password</span>
</pre>
<p>User <code class="codeph">tbrooke</code> can log on because he has passed the requirements you defined in the application context.</p>
</div>
</li>
<li class="stepexpand"><span>As user <code class="codeph">tbrooke</code>, access your purchases.</span>
<div>
<pre dir="ltr">SELECT * FROM scott.orders_tab;
</pre>
<p>The following output should appear:</p>
<pre dir="ltr">   CUST_NO    ORDER_NO
----------  ----------
      1234        9876
</pre>
<p>User <code class="codeph">tbrooke</code> has passed the second test. He can access his own orders in the <code class="codeph">scott.orders_tab</code> table.</p>
</div>
</li>
<li class="stepexpand"><span>Connect as user <code class="codeph">owoods</code>, and then access your purchases.</span>
<div>
<pre dir="ltr">CONNECT owoods <span class="italic">-- For a CDB, connect to the PDB, e.g., @hrpdb</span>
Enter password: <span class="italic">password</span>

SELECT * FROM scott.orders_tab
</pre>
<p>The following output should appear:</p>
<pre dir="ltr">   CUST_NO    ORDER_NO
----------  ----------
      5678        5432
      5678        4592
</pre>
<p>As with user <code class="codeph">tbrooke</code>, user <code class="codeph">owoods</code> can log on and see a listing of his own orders.</p>
</div>
</li>
</ol>
<div class="section">
<p>Note the following:</p>
<ul style="list-style-type: disc;">
<li>
<p>You can create several predicates based on the position of a user. For example, a sales representative would be able to see records only for his customers, and an order entry clerk would be able to see any customer order. You could expand the <code class="codeph">custnum_sec</code> function to return different predicates based on the user position context value.</p>
</li>
<li>
<p>The use of an application context in a fine-grained access control package effectively gives you a bind variable in a parsed statement. For example:</p>
<pre dir="ltr">SELECT * FROM scott.orders_tab 
WHERE cust_no = SYS_CONTEXT(&#39;order_entry&#39;, &#39;cust_num&#39;);
</pre>
<p>This is fully parsed and optimized, but the evaluation of the <code class="codeph">cust_num</code> attribute value of the user for the <code class="codeph">order_entry</code> context takes place at run-time. This means that you get the benefit of an optimized statement that executes differently for each user who issues the statement.</p>
<div class="infobox-note" id="GUID-E188CB4D-BCF3-4A2F-87BC-2688EC05C699__GUID-E33CAA7E-3DCA-4A13-A816-2425E7B1242D">
<p class="notep1">Note:</p>
<p>You can improve the performance of the function in this tutorial by indexing <code class="codeph">cust_no</code>.</p>
</div>
</li>
<li>
<p>You can set context attributes based on data from a database table or tables, or from a directory server using Lightweight Directory Access Protocol (LDAP).</p>
</li>
</ul>
<div class="infobox-note" id="GUID-E188CB4D-BCF3-4A2F-87BC-2688EC05C699__GUID-B0170ECE-B7C3-4FC7-9A3D-04B63550B205">
<p class="notep1">Note:</p>
<p><a class="olink LNPLS020" target="_blank" href="../LNPLS/overview.htm#LNPLS020"><span><cite>Oracle Database PL/SQL Language Reference</cite></span></a> for more information about triggers</p>
</div>
<p>Compare this tutorial, which uses an application context within the dynamically generated predicate, with <a href="vpd.htm#GUID-2E214F39-0739-4578-B3F9-36AC93E110CD" title="The Oracle Virtual Private Database policy associates the VPD function with a database table, view, or synonym.">About Oracle Virtual Private Database Policies</a>, which uses a subquery in the predicate.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="DBSEG293"></a>
<div class="props_rev_3"><a id="GUID-B7B6563A-F6B6-43B3-AF40-12A92EF47FE1"></a>
<h4 id="DBSEG-GUID-B7B6563A-F6B6-43B3-AF40-12A92EF47FE1" class="sect4">Step 9: Remove the Components of This Tutorial</h4>
<div>
<p>If you no longer need the components of this tutorial, then you can remove them.</p>
<ol>
<li class="stepexpand"><span>Connect as user <code class="codeph">SCOTT</code>.</span>
<div>
<pre dir="ltr">CONNECT SCOTT <span class="italic">-- Or, CONNECT SCOTT@hrpdb</span>
Enter password: <span class="italic">password</span>
</pre></div>
</li>
<li class="stepexpand"><span>Remove the <code class="codeph">orders_tab</code> and <code class="codeph">customers</code> tables.</span>
<div>
<pre dir="ltr">DROP TABLE orders_tab;
DROP TABLE customers; 
</pre></div>
</li>
<li class="stepexpand"><span>Connect as user <code class="codeph">SYS</code>, connecting with <code class="codeph">AS SYSDBA</code>.</span>
<div>
<pre dir="ltr">CONNECT SYS AS SYSDBA <span class="italic">-- Or, CONNECT SYS@hrpdb AS SYSDBA</span>
Enter password: <span class="italic">password</span>
</pre></div>
</li>
<li class="stepexpand"><span>Run the following statements to drop the components for this tutorial:</span>
<div>
<pre dir="ltr">DROP CONTEXT orders_ctx;
DROP USER sysadmin_vpd CASCADE;
DROP USER tbrooke;
DROP USER owoods;
</pre></div>
</li>
</ol>
</div>
</div>
</div>
<a id="DBSEG294"></a>
<div class="props_rev_3"><a id="GUID-E2E04EE0-06B4-45F2-812B-9E2C65F6669B"></a>
<h3 id="DBSEG-GUID-E2E04EE0-06B4-45F2-812B-9E2C65F6669B" class="sect3">Tutorial: Implementing an Oracle Virtual Private Database Policy Group</h3>
<div>
<p>This tutorial demonstrates how to create an Oracle Virtual Private Database (VPD) policy group.</p>
<p>Topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="vpd.htm#GUID-B662EDF6-AD17-4E71-B358-51748793B1AF" title="This tutorial shows how you can use Oracle Virtual Private Database (VPD) to create a policy group.">About This Tutorial</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-A338A950-003C-435C-9A59-81F2188C9E7A" title="First, you must create user accounts and tables for this tutorial, and grant the appropriate privileges.">Step 1: Create User Accounts and Other Components for This Tutorial</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-875B4EFA-9446-4DC6-8163-DC4B87DB3D81" title="Next, you must create a policy group for each of the two nondatabase users, provider_a and provider_b.">Step 2: Create the Two Policy Groups</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-BB24B7DE-CF63-4C49-AD51-1F498C3AE874" title="A policy group must have a function that defines how the application can control data access for users.">Step 3: Create PL/SQL Functions to Control the Policy Groups</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-B76F527D-35A0-44F0-A74C-25F9F85CCDAE" title="The application context determines which policy the nondatabase user who is the logging on should use.">Step 4: Create the Driving Application Context</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-3A3B0993-327A-4E02-B74D-4B6741AFE691" title="Now that you have created the necessary functions, you are ready to associate them with their appropriate policy groups.">Step 5: Add the PL/SQL Functions to the Policy Groups</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-4642E9FE-4878-4940-A68F-1A45FE16F01A" title="Now you are ready to test the two policy groups.">Step 6: Test the Policy Groups</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-A7BBA460-5283-4FB6-9E10-95D60D7639BC" title="If you no longer need the components of this tutorial, then you can remove them.">Step 7: Remove the Components of This Tutorial</a></p>
</li>
</ul>
</div>
<a id="DBSEG564"></a>
<div class="props_rev_3"><a id="GUID-B662EDF6-AD17-4E71-B358-51748793B1AF"></a>
<h4 id="DBSEG-GUID-B662EDF6-AD17-4E71-B358-51748793B1AF" class="sect4">About This Tutorial</h4>
<div>
<p>This tutorial shows how you can use Oracle Virtual Private Database (VPD) to create a policy group.</p>
<p><a href="vpd.htm#GUID-011EB74C-42DD-4817-A847-5BB28D67F6BE" title="An Oracle Virtual Private Database policy group is a named collection of VPD policies that can be applied to an application.">Oracle Virtual Private Database Policy Groups</a> describes how you can group a set of policies for use in an application. When a nondatabase user logs onto the application, Oracle Database grants the user access based on the policies defined within the appropriate policy group.</p>
<p>For column-level access control, every column or set of hidden columns is controlled by one policy. In this tutorial, you must hide two sets of columns. So, you must create two policies, one for each set of columns that you want to hide. You only want one policy for each user; the driving application context separates the policies for you.</p>
<div class="infobox-note" id="GUID-B662EDF6-AD17-4E71-B358-51748793B1AF__GUID-E4779620-742B-4C12-A56E-C11D761D13EA">
<p class="notep1">Note:</p>
<p>If you are using a multitenant environment, then this tutorial applies to the current PDB only.</p>
</div>
</div>
</div>
<a id="DBSEG295"></a>
<div class="props_rev_3"><a id="GUID-A338A950-003C-435C-9A59-81F2188C9E7A"></a>
<h4 id="DBSEG-GUID-A338A950-003C-435C-9A59-81F2188C9E7A" class="sect4">Step 1: Create User Accounts and Other Components for This Tutorial</h4>
<div>
<p>First, you must create user accounts and tables for this tutorial, and grant the appropriate privileges.</p>
<ol>
<li class="stepexpand"><span>Log on as user <code class="codeph">SYS</code> with the <code class="codeph">SYSDBA</code> administrative privilege.</span>
<div>
<pre dir="ltr">sqlplus sys as sysdba
Enter password: <span class="italic">password</span>
</pre></div>
</li>
<li class="stepexpand"><span>In a multitenant environment, connect to the appropriate PDB.</span>
<div>
<p>For example:</p>
<pre dir="ltr">CONNECT SYS@hrpdb AS SYSDBA
Enter password: <span class="italic">password</span>
</pre>
<p>To find the available PDBs, query the <code class="codeph">DBA_PDBS</code> data dictionary view. To check the current PDB, run the <code class="codeph">show con_name</code> command.</p>
</div>
</li>
<li class="stepexpand"><span>Create the following local users:</span>
<div>
<pre dir="ltr">CREATE USER apps_user IDENTIFIED BY <span class="italic">password</span> CONTAINER = CURRENT;
GRANT CREATE SESSION TO apps_user;
CREATE USER sysadmin_pg  IDENTIFIED BY <span class="italic">password</span> CONTAINER = CURRENT;
GRANT CREATE SESSION, CREATE PROCEDURE, CREATE ANY CONTEXT TO sysadmin_pg;
</pre>
<p>Follow the guidelines in <a href="authentication.htm#GUID-AA1AA635-1CD5-422E-B8CA-681ED7C253CA" title="Oracle provides a set of minimum requirements for passwords.">Minimum Requirements for Passwords</a> to replace <span class="italic"><code class="codeph">password</code></span> with a password that is secure.</p>
</div>
</li>
<li class="stepexpand"><span>Grant the following additional privilege to user <code class="codeph">sysadmin_pg</code>:</span>
<div>
<pre dir="ltr">GRANT EXECUTE ON DBMS_RLS TO sysadmin_pg;
</pre></div>
</li>
<li class="stepexpand"><span>Log on as user <code class="codeph">OE</code>.</span>
<div>
<pre dir="ltr">CONNECT OE <span class="italic">-- Or, CONNECT OE@hrpdb</span>
Enter password: <span class="italic">password</span>
</pre>
<p>If the <code class="codeph">OE</code> account is locked and expired, then reconnect as user <code class="codeph">SYS</code> with the <code class="codeph">SYSDBA</code> administrative privilege and enter the following statement to unlock the account and give it s new password:</p>
<pre dir="ltr">ALTER USER OE ACCOUNT UNLOCK IDENTIFIED BY <span class="italic">password</span>;
</pre>
<p>Replace <span class="italic"><code class="codeph">password</code></span> with a password that is secure. For greater security, do not reuse the same password that was used in previous releases of Oracle Database.</p>
</div>
</li>
<li class="stepexpand"><span>Create the <code class="codeph">product_code_names</code> table:</span>
<div>
<pre dir="ltr">CREATE TABLE product_code_names(
group_a     varchar2(32),
year_a      varchar2(32),
group_b     varchar2(32),
year_b      varchar2(32));
</pre></div>
</li>
<li class="stepexpand"><span>Insert some values into the <code class="codeph">product_code_names</code> table:</span>
<div>
<pre dir="ltr">INSERT INTO product_code_names values(&#39;Biffo&#39;,&#39;2008&#39;,&#39;Beffo&#39;,&#39;2004&#39;);
INSERT INTO product_code_names values(&#39;Hortensia&#39;,&#39;2008&#39;,&#39;Bunko&#39;,&#39;2008&#39;);
INSERT INTO product_code_names values(&#39;Boppo&#39;,&#39;2006&#39;,&#39;Hortensia&#39;,&#39;2003&#39;);

COMMIT;
</pre></div>
</li>
<li class="stepexpand"><span>Grant the <code class="codeph">apps_user</code> user <code class="codeph">SELECT</code> privileges on the <code class="codeph">product_code_names</code> table.</span>
<div>
<pre dir="ltr">GRANT SELECT ON product_code_names TO apps_user;
</pre></div>
</li>
</ol>
</div>
</div>
<a id="DBSEG296"></a>
<div class="props_rev_3"><a id="GUID-875B4EFA-9446-4DC6-8163-DC4B87DB3D81"></a>
<h4 id="DBSEG-GUID-875B4EFA-9446-4DC6-8163-DC4B87DB3D81" class="sect4">Step 2: Create the Two Policy Groups</h4>
<div>
<p>Next, you must create a policy group for each of the two nondatabase users, <code class="codeph">provider_a</code> and <code class="codeph">provider_b</code>.</p>
<ol>
<li class="stepexpand"><span>Connect as user <code class="codeph">sysadmin_pg</code>.</span>
<div>
<pre dir="ltr">CONNECT sysadmin_pg <span class="italic">-- Or, CONNECT sysadmin_pg@hrpdb</span>
Enter password: <span class="italic">password</span>
</pre></div>
</li>
<li class="stepexpand"><span>Create the <code class="codeph">provider_a_group</code> policy group, to be used by user <code class="codeph">provider_a</code>:</span>
<div>
<pre dir="ltr">BEGIN
 DBMS_RLS.CREATE_POLICY_GROUP(
 object_schema   =&gt; &#39;oe&#39;,
 object_name     =&gt; &#39;product_code_names&#39;,
 policy_group    =&gt; &#39;provider_a_group&#39;);
END;
/
</pre></div>
</li>
<li class="stepexpand"><span>Create the <code class="codeph">provider_b_group</code> policy group, to be used by user <code class="codeph">provider_b</code>:</span>
<div>
<pre dir="ltr">BEGIN
 DBMS_RLS.CREATE_POLICY_GROUP(
 object_schema   =&gt; &#39;oe&#39;,
 object_name     =&gt; &#39;product_code_names&#39;,
 policy_group    =&gt; &#39;provider_b_group&#39;);
END;
/
</pre></div>
</li>
</ol>
</div>
</div>
<a id="DBSEG297"></a>
<div class="props_rev_3"><a id="GUID-BB24B7DE-CF63-4C49-AD51-1F498C3AE874"></a>
<h4 id="DBSEG-GUID-BB24B7DE-CF63-4C49-AD51-1F498C3AE874" class="sect4">Step 3: Create PL/SQL Functions to Control the Policy Groups</h4>
<div>
<p>A policy group must have a function that defines how the application can control data access for users.</p>
<div class="section">The function that you will create for this policy group applies to users <code class="codeph">provider_a</code> and <code class="codeph">provider_b</code>.</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Create the <code class="codeph">vpd_function_provider_a</code> function, which restricts the data accessed by user <code class="codeph">provider_a</code>.</span>
<div>
<pre dir="ltr">CREATE OR REPLACE FUNCTION vpd_function_provider_a 
 (schema in varchar2, tab in varchar2) return varchar2 as 
  predicate  varchar2(8) default NULL;
  BEGIN
   IF LOWER(SYS_CONTEXT(&#39;USERENV&#39;,&#39;CLIENT_IDENTIFIER&#39;)) = &#39;provider_a&#39; 
    THEN predicate := &#39;1=2&#39;;
   ELSE NULL;
  END IF;
  RETURN predicate;
END;
/
</pre>
<p>This function checks that the user logging in is really user <code class="codeph">provider_a</code>. If this is true, then only the data in the <code class="codeph">product_code_names</code> table columns <code class="codeph">group_a</code> and <code class="codeph">year_a</code> will be visible to <code class="codeph">provider_a</code>. Data in columns <code class="codeph">group_b</code> and <code class="codeph">year_b</code> will not appear for <code class="codeph">provider_a</code>. This works as follows: Setting <code class="codeph">predicate := &#39;1=2&#39;</code> hides the relevant columns. In <a href="vpd.htm#GUID-3A3B0993-327A-4E02-B74D-4B6741AFE691" title="Now that you have created the necessary functions, you are ready to associate them with their appropriate policy groups.">Step 5: Add the PL/SQL Functions to the Policy Groups</a>, you specify these columns in the <code class="codeph">SEC_RELEVANT_COLS</code> parameter.</p>
</div>
</li>
<li class="stepexpand"><span>Create the <code class="codeph">vpd_function_provider_b</code>, function, which restricts the data accessed by user <code class="codeph">provider_a</code>.</span>
<div>
<pre dir="ltr">CREATE OR REPLACE FUNCTION vpd_function_provider_b 
 (schema in varchar2, tab in varchar2) return varchar2 as 
  predicate  varchar2(8) default NULL;
  BEGIN
   IF LOWER(SYS_CONTEXT(&#39;USERENV&#39;,&#39;CLIENT_IDENTIFIER&#39;)) = &#39;provider_b&#39; 
    THEN predicate := &#39;1=2&#39;;
   ELSE NULL;
  END IF;
  RETURN predicate;
END;
/
</pre>
<p>Similar to the <code class="codeph">vpd_function_provider_a</code> function, this function checks that the user logging in is really user <code class="codeph">provider_b</code>. If this is true, then only the data in the columns <code class="codeph">group_b</code> and <code class="codeph">year_b</code> will be visible to <code class="codeph">provider_b</code>, with data in the <code class="codeph">group_a</code> and <code class="codeph">year_a</code> not appearing for <code class="codeph">provider_b</code>. Similar to the <code class="codeph">vpd_function_provider_a</code> function, <code class="codeph">predicate := &#39;1=2&#39;</code> hides the relevant columns specified <a href="vpd.htm#GUID-3A3B0993-327A-4E02-B74D-4B6741AFE691" title="Now that you have created the necessary functions, you are ready to associate them with their appropriate policy groups.">Step 5: Add the PL/SQL Functions to the Policy Groups</a> in the <code class="codeph">SEC_RELEVANT_COLS</code> parameter.</p>
</div>
</li>
</ol>
</div>
<div>
<div class="relinfo">
<p><strong>Related Topics</strong></p>
<ul>
<li><a href="vpd.htm#GUID-532B05E7-2E08-4D8A-96B0-7F6EDD75DD14" title="The Oracle Virtual Private Database (VPD) function defines the restrictions that you want to enforce.">Function to Generate the Dynamic WHERE Clause</a></li>
</ul>
</div>
</div>
</div>
<a id="DBSEG299"></a>
<div class="props_rev_3"><a id="GUID-B76F527D-35A0-44F0-A74C-25F9F85CCDAE"></a>
<h4 id="DBSEG-GUID-B76F527D-35A0-44F0-A74C-25F9F85CCDAE" class="sect4">Step 4: Create the Driving Application Context</h4>
<div>
<p>The application context determines which policy the nondatabase user who is the logging on should use.</p>
<ol>
<li class="stepexpand"><span>As user <code class="codeph">sysadmin_pg</code>, create the driving application context as follows:</span>
<div>
<pre dir="ltr">CREATE OR REPLACE CONTEXT provider_ctx USING provider_package;
</pre></div>
</li>
<li class="stepexpand"><span>Create the PL/SQL <code class="codeph">provider_package</code> package for the application context.</span>
<div>
<pre dir="ltr">CREATE OR REPLACE PACKAGE provider_package IS
 PROCEDURE set_provider_context (policy_group varchar2 default NULL);
END;
/
CREATE OR REPLACE PACKAGE BODY provider_package AS
 PROCEDURE set_provider_context (policy_group varchar2 default NULL) IS
 BEGIN
  CASE LOWER(SYS_CONTEXT(&#39;USERENV&#39;, &#39;CLIENT_IDENTIFIER&#39;))
   WHEN &#39;provider_a&#39; THEN
    DBMS_SESSION.SET_CONTEXT(&#39;provider_ctx&#39;,&#39;policy_group&#39;,&#39;PROVIDER_A_GROUP&#39;);
   WHEN &#39;provider_b&#39; THEN
    DBMS_SESSION.SET_CONTEXT(&#39;provider_ctx&#39;,&#39;policy_group&#39;,&#39;PROVIDER_B_GROUP&#39;);
  END CASE;
 END set_provider_context;
END;
/
</pre></div>
</li>
<li class="stepexpand"><span>Associate the <code class="codeph">provider_ctx</code> application context with the <code class="codeph">product_code_names</code> table, and then provide a name.</span>
<div>
<pre dir="ltr">BEGIN
 DBMS_RLS.ADD_POLICY_CONTEXT(
 object_schema  =&gt;&#39;oe&#39;,
 object_name    =&gt;&#39;product_code_names&#39;,
 namespace      =&gt;&#39;provider_ctx&#39;,
 attribute      =&gt;&#39;policy_group&#39;);
END;
/
</pre></div>
</li>
<li class="stepexpand"><span>Grant the <code class="codeph">apps_user</code> account the <code class="codeph">EXECUTE</code> privilege for the <code class="codeph">provider_package</code> package.</span>
<div>
<pre dir="ltr">GRANT EXECUTE ON provider_package TO apps_user;
</pre></div>
</li>
</ol>
</div>
</div>
<a id="DBSEG298"></a>
<div class="props_rev_3"><a id="GUID-3A3B0993-327A-4E02-B74D-4B6741AFE691"></a>
<h4 id="DBSEG-GUID-3A3B0993-327A-4E02-B74D-4B6741AFE691" class="sect4">Step 5: Add the PL/SQL Functions to the Policy Groups</h4>
<div>
<p>Now that you have created the necessary functions, you are ready to associate them with their appropriate policy groups.</p>
<ol>
<li class="stepexpand"><span>Add the <code class="codeph">vpd_function_provider_a</code> function to the <code class="codeph">provider_a_group</code> policy group.</span>
<div>
<pre dir="ltr">BEGIN 
 DBMS_RLS.ADD_GROUPED_POLICY(
 object_schema         =&gt; &#39;oe&#39;,
 object_name           =&gt; &#39;product_code_names&#39;,
 policy_group          =&gt; &#39;provider_a_group&#39;,
 policy_name           =&gt; &#39;filter_provider_a&#39;,
 function_schema       =&gt; &#39;sysadmin_pg&#39;,
 policy_function       =&gt; &#39;vpd_function_provider_a&#39;,
 statement_types       =&gt; &#39;select&#39;,
 policy_type           =&gt; DBMS_RLS.CONTEXT_SENSITIVE,
 sec_relevant_cols     =&gt; &#39;group_b,year_b&#39;,
 sec_relevant_cols_opt =&gt; DBMS_RLS.ALL_ROWS,
 namespace             =&gt; &#39;provider_ctx&#39;,
 attribute             =&gt; &#39;provider_group&#39;);
END;
/
</pre>
<p>The <code class="codeph">group_b</code> and <code class="codeph">year_b</code> columns specified in the <code class="codeph">sec_relevant_cols</code> parameter are hidden from user <code class="codeph">provider_a</code>.</p>
</div>
</li>
<li class="stepexpand"><span>Add the <code class="codeph">vpd_function_provider_b</code> function to the <code class="codeph">provider_b_group</code> policy group.</span>
<div>
<pre dir="ltr">BEGIN 
 DBMS_RLS.ADD_GROUPED_POLICY(
 object_schema         =&gt; &#39;oe&#39;,
 object_name           =&gt; &#39;product_code_names&#39;,
 policy_group          =&gt; &#39;provider_b_group&#39;,
 policy_name           =&gt; &#39;filter_provider_b&#39;,
 function_schema       =&gt; &#39;sysadmin_pg&#39;,
 policy_function       =&gt; &#39;vpd_function_provider_b&#39;,
 statement_types       =&gt; &#39;select&#39;,
 policy_type           =&gt; DBMS_RLS.CONTEXT_SENSITIVE,
 sec_relevant_cols     =&gt; &#39;group_a,year_a&#39;,
 sec_relevant_cols_opt =&gt; DBMS_RLS.ALL_ROWS,
 namespace             =&gt; &#39;provider_ctx&#39;,
 attribute             =&gt; &#39;provider_group&#39;);
END;
/
</pre>
<p>The <code class="codeph">group_a</code> and <code class="codeph">year_a</code> columns specified in the <code class="codeph">sec_relevant_cols</code> parameter are hidden from user <code class="codeph">provider_b</code>.</p>
</div>
</li>
</ol>
</div>
</div>
<a id="DBSEG300"></a>
<div class="props_rev_3"><a id="GUID-4642E9FE-4878-4940-A68F-1A45FE16F01A"></a>
<h4 id="DBSEG-GUID-4642E9FE-4878-4940-A68F-1A45FE16F01A" class="sect4">Step 6: Test the Policy Groups</h4>
<div>
<p>Now you are ready to test the two policy groups.</p>
<ol>
<li class="stepexpand"><span>Connect as user <code class="codeph">apps_user</code> and then enter the following statements to ensure that the output you will create later on is nicely formatted.</span>
<div>
<pre dir="ltr">CONNECT apps_user <span class="italic">-- Or, CONNECT apps_user@hrpdb</span>
Enter password: <span class="italic">password</span>

col group_a format a16
col group_b format a16;
col year_a format a16;
col year_b format a16;
</pre></div>
</li>
<li class="stepexpand"><span>Set the session identifier to <code class="codeph">provider_a</code>.</span>
<div>
<pre dir="ltr">EXEC DBMS_SESSION.SET_IDENTIFIER(&#39;provider_a&#39;);
</pre>
<p>Here, the application sets the identifier. Setting the identifier to <code class="codeph">provider_a</code> sets the <code class="codeph">apps_user</code> user to a user who should only see the products available to products in the <code class="codeph">provider_a_group</code> policy group.</p>
</div>
</li>
<li class="stepexpand"><span>Run the <code class="codeph">provider_package</code> to set the policy group based on the context.</span>
<div>
<pre dir="ltr">EXEC sysadmin_pg.provider_package.set_provider_context;
</pre>
<p>At this stage, you can check the application context was set, as follows:</p>
<pre dir="ltr">SELECT SYS_CONTEXT(&#39;USERENV&#39;, &#39;CLIENT_IDENTIFIER&#39;) AS END_USER FROM DUAL;
</pre>
<p>The following output should appear:</p>
<pre dir="ltr">END_USER
-----------------
provider_a
</pre></div>
</li>
<li class="stepexpand"><span>Enter the following <code class="codeph">SELECT</code> statement:</span>
<div>
<pre dir="ltr">SELECT * FROM oe.product_code_names;
</pre>
<p>The following output should appear:</p>
<pre dir="ltr">GROUP_A          YEAR_A           GROUP_B          YEAR_B
---------------- ---------------- ---------------- ----------------
Biffo            2008
Hortensia        2008
Boppo            2006
</pre></div>
</li>
<li class="stepexpand"><span>Set the client identifier to <code class="codeph">provider_b</code> and then enter the following statements:</span>
<div>
<pre dir="ltr">EXEC DBMS_SESSION.SET_IDENTIFIER(&#39;provider_b&#39;);
EXEC sysadmin_pg.provider_package.set_provider_context;
SELECT * FROM oe.product_code_names;
</pre>
<p>The following output should appear:</p>
<pre dir="ltr">GROUP_A          YEAR_A           GROUP_B          YEAR_B
---------------- ---------------- ---------------- ----------------
                                  Beffo            2004
                                  Bunko            2008
                                  Hortensia        2003
</pre></div>
</li>
</ol>
</div>
</div>
<a id="DBSEG301"></a>
<div class="props_rev_3"><a id="GUID-A7BBA460-5283-4FB6-9E10-95D60D7639BC"></a>
<h4 id="DBSEG-GUID-A7BBA460-5283-4FB6-9E10-95D60D7639BC" class="sect4">Step 7: Remove the Components of This Tutorial</h4>
<div>
<p>If you no longer need the components of this tutorial, then you can remove them.</p>
<ol>
<li class="stepexpand"><span>Connect as user <code class="codeph">OE</code>.</span>
<div>
<pre dir="ltr">CONNECT OE <span class="italic">-- Or, CONNECT OE@hrpdb</span>
Enter password: <span class="italic">password</span>
</pre></div>
</li>
<li class="stepexpand"><span>Drop the <code class="codeph">product_code_names</code> table.</span>
<div>
<pre dir="ltr">DROP TABLE product_code_names;
</pre></div>
</li>
<li class="stepexpand"><span>Connect as user <code class="codeph">SYS</code> with the <code class="codeph">SYSDBA</code> administrative privilege.</span>
<div>
<pre dir="ltr">CONNECT SYS AS SYSDBA <span class="italic">-- Or, CONNECT SYS@hrpdb AS SYSDBA</span>
Enter password: <span class="italic">password</span>
</pre></div>
</li>
<li class="stepexpand"><span>Drop the application context and users for this tutorial.</span>
<div>
<pre dir="ltr">DROP CONTEXT provider_ctx;
DROP USER sysadmin_pg cascade;
DROP USER apps_user;
</pre></div>
</li>
</ol>
</div>
</div>
</div>
</div>
<a id="DBSEG302"></a>
<div class="props_rev_3"><a id="GUID-496F4B53-7206-4CDF-8F45-016067D0303D"></a>
<h2 id="DBSEG-GUID-496F4B53-7206-4CDF-8F45-016067D0303D" class="sect2">How Oracle Virtual Private Database Works with Other Oracle Features</h2>
<div>
<p>You should be aware of the impact of using Oracle Virtual Private Database (VPD) with other Oracle features, such as <code class="codeph">SELECT FOR UPDATE</code> statements, join operations, applications, and editions.</p>
<p>Topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="vpd.htm#GUID-EF8092E7-C77D-4A9B-B9AC-33D272DB6EFD" title="You should be aware of how to use Oracle VPD with editions.">Oracle Virtual Private Database Policies with Editions</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-F1FC8BE6-4695-46CC-BDAC-EE6524CAB8F1" title="As a general rule, users should not include the FOR UPDATE clause when querying Virtual Private Database-protected tables.">SELECT FOR UPDATE Statement in User Queries on VPD-Protected Tables</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-0ADA7145-5C32-4E8A-8D8E-7B1F477E9493" title="Oracle Virtual Private Database rewrites SQL by using dynamic views.">Oracle Virtual Private Database Policies and Outer or ANSI Joins</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-13F8AE16-15E5-4D9A-9F5D-247F15261E5D" title="An Oracle Virtual Private Database security policy is applied within the database itself, rather than within an application.">Oracle Virtual Private Database Security Policies and Applications</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-F03172A8-730B-48EC-A904-FE747761863B" title="Queries against objects enabled with fine-grained access control run the policy function so that the most current predicate is used for each policy.">Automatic Reparsing for Fine-Grained Access Control Policies Functions</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-FC004712-32D6-4AE4-B9B7-F1F7E4E9E2A5" title="Operations on the database use the most recently committed data available.">Oracle Virtual Private Database Policies and Flashback Queries</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-987DB35A-060B-4CD1-ADF6-147AD918E96F" title="You can use Oracle Virtual Private Database (VPD) with Oracle Label Security, but when you do, you should be aware of security exceptions.">Oracle Virtual Private Database and Oracle Label Security</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-7FFB40CB-E421-4FE4-8344-29D91360EFAD" title="Be aware if you try to export data from objects that have VPD policies defined on them.">Export of Data Using the EXPDP Utility access_method Parameter</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-1EBCA7B1-2991-4F5E-B36C-9CB446E943D8" title="You can use Oracle Virtual Private Database in several types of user models.">User Models and Oracle Virtual Private Database</a></p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-496F4B53-7206-4CDF-8F45-016067D0303D__GUID-795ED2FD-64F2-4E26-A267-E3860B74A87C">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="tsdp.htm#GUID-1AA98458-5B97-46F5-94F7-2DB4ADDF9F65" title="The transparent sensitive data protection and Oracle Virtual Private Database procedures enable you to combine the protections of these two features.">Using Transparent Sensitive Data Protection Policies with Oracle VPD Policies</a>&#34;</span></p>
</div>
</div>
<a id="DBSEG303"></a>
<div class="props_rev_3"><a id="GUID-EF8092E7-C77D-4A9B-B9AC-33D272DB6EFD"></a>
<h3 id="DBSEG-GUID-EF8092E7-C77D-4A9B-B9AC-33D272DB6EFD" class="sect3">Oracle Virtual Private Database Policies with Editions</h3>
<div>
<p>You should be aware of how to use Oracle VPD with editions.</p>
<p>If you are preparing an application for edition-based redefinition, and you cover each table that the application uses with an editioning view, then you must move the Virtual Private Database polices that protect these tables to the editioning view.</p>
<p>When an editioned object has a Virtual Private Database policy, then it applies in all editions in which the object is visible. When an editioned object is actualized, any VPD policies that are attached to it are newly attached to the new actual occurrence. When you newly apply a VPD policy to an inherited editioned object, this action will actualize it.</p>
<div class="infoboxnotealso" id="GUID-EF8092E7-C77D-4A9B-B9AC-33D272DB6EFD__GUID-F87D2752-50A3-4F00-8C2B-144270FA10AB">
<p class="notep1">See Also:</p>
<p><a class="olink ADFNS020" target="_blank" href="../ADFNS/adfns_editions.htm#ADFNS020"><span><cite>Oracle Database Development Guide</cite></span></a> for detailed information about editions</p>
</div>
</div>
</div>
<a id="DBSEG304"></a>
<div class="props_rev_3"><a id="GUID-F1FC8BE6-4695-46CC-BDAC-EE6524CAB8F1"></a>
<h3 id="DBSEG-GUID-F1FC8BE6-4695-46CC-BDAC-EE6524CAB8F1" class="sect3">SELECT FOR UPDATE Statement in User Queries on VPD-Protected Tables</h3>
<div>
<p>As a general rule, users should not include the <code class="codeph">FOR UPDATE</code> clause when querying Virtual Private Database-protected tables.</p>
<p>The Virtual Private Database technology depends on rewriting the user&#39;s query against an inline view that includes the VPD predicate generated by the VPD policy function. Because of this, the same limitations on views also apply to VPD-protected tables. If a user&#39;s query against a VPD-protected table includes the <code class="codeph">FOR UPDATE</code> clause in a <code class="codeph">SELECT</code> statement, in most cases, the query may not work. However, the user&#39;s query may work in some situations if the inline view generated by VPD is sufficiently simple.</p>
<div class="infoboxnotealso" id="GUID-F1FC8BE6-4695-46CC-BDAC-EE6524CAB8F1__GUID-706F419F-BE8F-445F-8295-7A49D4F63A54">
<p class="notep1">See Also:</p>
<p><a class="olink SQLRF01706" target="_blank" href="../SQLRF/statements_10002.htm#SQLRF01706"><span><cite>Oracle Database SQL Language Reference</cite></span></a> for more information about the restrictions of the <code class="codeph">FOR UPDATE</code> clause in the <code class="codeph">SELECT</code> statement</p>
</div>
</div>
</div>
<a id="DBSEG305"></a>
<div class="props_rev_3"><a id="GUID-0ADA7145-5C32-4E8A-8D8E-7B1F477E9493"></a>
<h3 id="DBSEG-GUID-0ADA7145-5C32-4E8A-8D8E-7B1F477E9493" class="sect3">Oracle Virtual Private Database Policies and Outer or ANSI Joins</h3>
<div>
<p>Oracle Virtual Private Database rewrites SQL by using dynamic views.</p>
<p>For SQL that contains outer join or ANSI operations, some views may not merge and some indexes may not be used. This problem is a known optimization limitation. To remedy this problem, rewrite the SQL to not use outer joins or ANSI operations.</p>
</div>
</div>
<a id="DBSEG306"></a>
<div class="props_rev_3"><a id="GUID-13F8AE16-15E5-4D9A-9F5D-247F15261E5D"></a>
<h3 id="DBSEG-GUID-13F8AE16-15E5-4D9A-9F5D-247F15261E5D" class="sect3">Oracle Virtual Private Database Security Policies and Applications</h3>
<div>
<p>An Oracle Virtual Private Database security policy is applied within the database itself, rather than within an application.</p>
<p>Hence, a user trying to access data by using a different application cannot bypass the Oracle Virtual Private Database security policy. Another advantage of creating the security policy in the database is that you maintain it in one central place, rather than maintaining individual security policies in multiple applications. Oracle Virtual Private Database provides stronger security than application-based security, at a lower cost of ownership.</p>
<p>You may want to enforce different security policies depending on the application that is accessing data. Consider a situation in which two applications, Order Entry and Inventory, both access the <code class="codeph">orders</code> table. You may want to have the Inventory application use a policy that limits access based on type of product. At the same time, you may want to have the Order Entry application use a policy that limits access based on customer number.</p>
<p>In this case, you must partition the use of fine-grained access by application. Otherwise, both policies would be automatically concatenated together, which may not be the result that you want. You can specify two or more policy groups, and a driving application context that determines which policy group is in effect for a given transaction. You can also designate default policies that always apply to data access. In a hosted application, for example, data access should be limited by subscriber ID. See <a href="vpd.htm#GUID-E2E04EE0-06B4-45F2-812B-9E2C65F6669B" title="This tutorial demonstrates how to create an Oracle Virtual Private Database (VPD) policy group.">Tutorial: Implementing an Oracle Virtual Private Database Policy Group</a> for an example of how you can create policy groups that use an application context to determine which group should be used.</p>
</div>
</div>
<a id="DBSEG307"></a>
<div class="props_rev_3"><a id="GUID-F03172A8-730B-48EC-A904-FE747761863B"></a>
<h3 id="DBSEG-GUID-F03172A8-730B-48EC-A904-FE747761863B" class="sect3">Automatic Reparsing for Fine-Grained Access Control Policies Functions</h3>
<div>
<p>Queries against objects enabled with fine-grained access control run the policy function so that the most current predicate is used for each policy.</p>
<p>For example, in the case of a time-based policy function, in which queries are only allowed between 8:00 a.m. and 5:00 p.m., a cursor execution parsed at noon runs the policy function at that time, ensuring that the policy is consulted again for the query. Even if the curser was parsed at 9 a.m., when it runs later on (for example, at noon), then the Virtual Private Database policy function runs again to ensure that the execution of the cursor is still permitted at the current time (noon). This ensures that the security check it must perform is the most recent.</p>
<p>Automatic re-execution of the Virtual Private Database policy function does not occur when you set the <code class="codeph">DBMS_RLS.ADD_POLICY</code> setting <code class="codeph">STATIC_POLICY</code> to <code class="codeph">TRUE</code> while adding the policy. This setting causes the policy function to return the same predicate.</p>
</div>
</div>
<a id="DBSEG308"></a>
<div class="props_rev_3"><a id="GUID-FC004712-32D6-4AE4-B9B7-F1F7E4E9E2A5"></a>
<h3 id="DBSEG-GUID-FC004712-32D6-4AE4-B9B7-F1F7E4E9E2A5" class="sect3">Oracle Virtual Private Database Policies and Flashback Queries</h3>
<div>
<p>Operations on the database use the most recently committed data available.</p>
<p>The flashback query feature enables you to query the database at some point in the past.</p>
<p>To write an application that uses flashback query, you can use the <code class="codeph">AS OF</code> clause in SQL queries to specify either a time or a system change number (SCN), and then query against the committed data from the specified time. You can also use the <code class="codeph">DBMS_FLASHBACK</code> PL/SQL package, which requires more code, but enables you to perform multiple operations, all of which refer to the same point in time.</p>
<p>However, if you use flashback query against a database object that is protected with Oracle Virtual Private Database policies, then the current policies are applied to the old data. Applying the current Oracle Virtual Private Database policies to flashback query data is more secure because it reflects the most current business policy.</p>
<div class="infoboxnotealso" id="GUID-FC004712-32D6-4AE4-B9B7-F1F7E4E9E2A5__GUID-2C958A9B-E86B-43CC-82FE-00E88197D431">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a class="olink ADFNS1008" target="_blank" href="../ADFNS/adfns_flashback.htm#ADFNS1008"><span><cite>Oracle Database Development Guide</cite></span></a> for more information about the flashback query feature and how to write applications that use it</p>
</li>
<li>
<p><a class="olink ARPLS142" target="_blank" href="../ARPLS/d_flashb.htm#ARPLS142"><span><cite>Oracle Database PL/SQL Packages and Types Reference</cite></span></a> for more information about the <code class="codeph">DBMS_FLASHBACK</code> PL/SQL package</p>
</li>
</ul>
</div>
</div>
</div>
<a id="DBSEG80854"></a>
<div class="props_rev_3"><a id="GUID-987DB35A-060B-4CD1-ADF6-147AD918E96F"></a>
<h3 id="DBSEG-GUID-987DB35A-060B-4CD1-ADF6-147AD918E96F" class="sect3">Oracle Virtual Private Database and Oracle Label Security</h3>
<div>
<p>You can use Oracle Virtual Private Database (VPD) with Oracle Label Security, but when you do, you should be aware of security exceptions.</p>
<p>Topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="vpd.htm#GUID-63B4EB7D-2A73-4B84-B666-D8956B884F20" title="Oracle Virtual Private Database policies provide column or row-level access control based on Oracle Label Security user authorizations.">Using Oracle Virtual Private Database to Enforce Oracle Label Security Policies</a></p>
</li>
<li>
<p><a href="vpd.htm#GUID-AA9D9B21-15B2-4785-B23E-70F93B03B341" title="Be aware of the security exceptions when you use Oracle Virtual Private Database and Oracle Label Security.">Oracle Virtual Private Database and Oracle Label Security Exceptions</a></p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-987DB35A-060B-4CD1-ADF6-147AD918E96F__GUID-1225A2A2-9D39-4C00-8B0A-1406C325EA0D">
<p class="notep1">See Also:</p>
<a class="olink OLSAG001" target="_blank" href="../OLSAG/intro.htm#OLSAG001"><span class="italic">Oracle Label Security Administrator&#39;s Guide</span></a></div>
</div>
<a id="DBSEG88541"></a>
<div class="props_rev_3"><a id="GUID-63B4EB7D-2A73-4B84-B666-D8956B884F20"></a>
<h4 id="DBSEG-GUID-63B4EB7D-2A73-4B84-B666-D8956B884F20" class="sect4">Using Oracle Virtual Private Database to Enforce Oracle Label Security Policies</h4>
<div>
<p>Oracle Virtual Private Database policies provide column or row-level access control based on Oracle Label Security user authorizations.</p>
<p>In general, you must perform the following steps:</p>
<ol>
<li>
<p>When you create the Oracle Label Security policy, do not apply the policy to the table that you want to protect. (The Virtual Private Database policy that you create handles this for you.) In the <code class="codeph">SA_SYSDBA.CREATE_POLICY</code> procedure, set the <code class="codeph">default_options</code> parameter to <code class="codeph">NO_CONTROL</code>.</p>
</li>
<li id="GUID-63B4EB7D-2A73-4B84-B666-D8956B884F20__CIHGJFFG">
<p>Create the Oracle Label Security label components and authorize users as you normally would.</p>
</li>
<li>
<p>When you create the Oracle Virtual Private Database policy, do the following:</p>
<ul style="list-style-type: disc;">
<li>
<p>In the PL/SQL function you create for the policy, use the Oracle Label Security <code class="codeph">DOMINATES</code> function to compare the authorization of the user with the label that you created in Step <a href="vpd.htm#GUID-63B4EB7D-2A73-4B84-B666-D8956B884F20__CIHGJFFG">2</a>. The <code class="codeph">DOMINATES</code> function determines if the user authorization is equal to, or if it is more sensitive than, the label used in the comparison. If the user authorization passes, then the user is granted access to the column. Otherwise, the user is denied access.</p>
</li>
<li>
<p>In the Virtual Private Database policy definition, apply this function to the table that you want to protect. In the <code class="codeph">DBMS_RLS.ADD_POLICY</code> procedure, use the sensitive column (<code class="codeph">SEC_RELEVANT_COLS</code> parameter) and column masking (<code class="codeph">SEC_RELEVANT_COLS_OPT</code> parameter) functionality to show or hide columns based on Oracle Label Security user authorizations.</p>
</li>
</ul>
</li>
</ol>
<p>For an example of how to accomplish this, visit the following Oracle Technology Network site:</p>
<p><a href="http://www.oracle.com/technetwork/database/focus-areas/security/ols-cs1-099558.html" target="_blank"><code class="codeph">http://www.oracle.com/technetwork/database/focus-areas/security/ols-cs1-099558.html</code></a></p>
<div class="infoboxnotealso" id="GUID-63B4EB7D-2A73-4B84-B666-D8956B884F20__GUID-1225A2A2-9D39-4C00-8B0A-1406C325EA0D">
<p class="notep1">See Also:</p>
<a class="olink OLSAG3695" target="_blank" href="../OLSAG/appxa.htm#OLSAG3695"><span><cite>Oracle Label Security Administrator&rsquo;s Guide</cite></span></a> for more information about the dominance functions</div>
</div>
</div>
<a id="DBSEG309"></a>
<div class="props_rev_3"><a id="GUID-AA9D9B21-15B2-4785-B23E-70F93B03B341"></a>
<h4 id="DBSEG-GUID-AA9D9B21-15B2-4785-B23E-70F93B03B341" class="sect4">Oracle Virtual Private Database and Oracle Label Security Exceptions</h4>
<div>
<p>Be aware of the security exceptions when you use Oracle Virtual Private Database and Oracle Label Security.</p>
<p>These security exceptions are as follows:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold">When you are exporting data, Oracle Virtual Private Database and Oracle Label Security policies are not enforced during a direct path export operation.</span> In a direct path export operation, Oracle Database reads data from disk into the buffer cache and transfers rows directly to the Export client.</p>
</li>
<li>
<p><span class="bold">You cannot apply Oracle Virtual Private Database policies and Oracle Label Security policies to objects in the SYS schema.</span> The <code class="codeph">SYS</code> user and users making a DBA-privileged connection to the database (for example, <code class="codeph">CONNECT/AS SYSDBA</code>) do not have Oracle Virtual Private Database or Oracle Label Security policies applied to their actions. The database user <code class="codeph">SYS</code> is thus always exempt from Oracle Virtual Private Database or Oracle Label Security enforcement, regardless of the export mode, application, or utility used to extract data from the database.</p>
<p>However, you can audit <code class="codeph">SYSDBA</code> actions by enabling auditing upon installation and specifying that this audit trail be stored in a secure location in the operating system. You can also closely monitor the <code class="codeph">SYS</code> user by using Oracle Database Vault.</p>
</li>
<li>
<p><span class="bold">Database users who were granted the EXEMPT ACCESS POLICY privilege, either directly or through a database role, are exempt from Oracle Virtual Private Database enforcements.</span> The system privilege <code class="codeph">EXEMPT ACCESS POLICY</code> allows a user to be exempted from all fine-grained access control policies on any <code class="codeph">SELECT</code> or DML operation (<code class="codeph">INSERT</code>, <code class="codeph">UPDATE</code>, and <code class="codeph">DELETE</code>). This provides ease of use for administrative activities, such as installation and import and export of the database, through a non-<code class="codeph">SYS</code> schema.</p>
<p>However, the following policy enforcement options remain in effect even when <code class="codeph">EXEMPT ACCESS POLICY</code> is granted:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">INSERT_CONTROL</code>, <code class="codeph">UPDATE_CONTROL</code>, <code class="codeph">DELETE_CONTROL</code>, <code class="codeph">WRITE_CONTROL</code>, <code class="codeph">LABEL_UPDATE</code>, and <code class="codeph">LABEL_DEFAULT</code></p>
</li>
<li>
<p>If the Oracle Label Security policy specifies the <code class="codeph">ALL_CONTROL</code> option, then all enforcement controls are applied except <code class="codeph">READ_CONTROL</code> and <code class="codeph">CHECK_CONTROL</code>.</p>
</li>
</ul>
<p>Because <code class="codeph">EXEMPT ACCESS POLICY</code> negates the effect of fine-grained access control, you should only grant this privilege to users who have legitimate reasons for bypassing fine-grained access control enforcement. Do not grant this privilege using the <code class="codeph">WITH ADMIN OPTION</code>. If you do, users could pass the <code class="codeph">EXEMPT ACCESS POLICY</code> privilege to other users, and thus propagate the ability to bypass fine-grained access control.</p>
</li>
</ul>
<div class="infobox-note" id="GUID-AA9D9B21-15B2-4785-B23E-70F93B03B341__GUID-66571BF6-29E4-4BF2-B701-80B6977CB0C4">
<p class="notep1">Note:</p>
<ul style="list-style-type: disc;">
<li>
<p>The <code class="codeph">EXEMPT ACCESS POLICY</code> privilege does not affect the enforcement of object privileges such as <code class="codeph">SELECT</code>, <code class="codeph">INSERT</code>, <code class="codeph">UPDATE</code>, and <code class="codeph">DELETE</code>. These privileges are enforced even if a user was granted the <code class="codeph">EXEMPT ACCESS POLICY</code> privilege.</p>
</li>
<li>
<p>The <code class="codeph">SYS_CONTEXT</code> values that Oracle Virtual Private Database uses are not propagated to secondary databases for failover.</p>
</li>
</ul>
</div>
<div class="infoboxnotealso" id="GUID-AA9D9B21-15B2-4785-B23E-70F93B03B341__GUID-25EFA00E-EDCA-48D8-BAD2-84DF4320FF81">
<p class="notep1">See Also:</p>
<a class="olink SUTIL009" target="_blank" href="../SUTIL/GUID-321928FB-C86C-4F1F-9250-05111A988B7B.htm#SUTIL009"><span><cite>Oracle Database Utilities</cite></span></a> for more information about direct path export operations</div>
</div>
</div>
</div>
<a id="DBSEG905"></a>
<div class="props_rev_3"><a id="GUID-7FFB40CB-E421-4FE4-8344-29D91360EFAD"></a>
<h3 id="DBSEG-GUID-7FFB40CB-E421-4FE4-8344-29D91360EFAD" class="sect3">Export of Data Using the EXPDP Utility access_method Parameter</h3>
<div>
<p>Be aware if you try to export data from objects that have VPD policies defined on them.</p>
<p>If you try to use the Oracle Data Pump Export (<code class="codeph">EXPDP</code>) utility with the <code class="codeph">access_method</code> parameter set to <code class="codeph">direct_path</code> to export data from a schema that contains an object that has a Virtual Private Database policy defined on it, then an <code class="codeph">ORA-31696</code> error message may appear and the export operation will fail.</p>
<p>The error message is as follows:</p>
<pre dir="ltr">ORA-31696: unable to export/import TABLE_DATA:&#34;<span class="italic">schema.table</span>&#34; using client specified DIRECT_PATH method
</pre>
<p>This problem only occurs when you perform a schema-level export as a user who has not been granted the <code class="codeph">EXP_FULL_DATABASE</code> role. It does not occur during a full database export, which requires the <code class="codeph">EXP_FULL_DATABASE</code> role. The <code class="codeph">EXP_FULL_DATABASE</code> role includes the <code class="codeph">EXEMPT ACCESS POLICY</code> system privilege, which bypasses Virtual Private Database policies.</p>
<p>To find the underlying problem, try the <code class="codeph">EXPDP</code> invocation again, but do not set the <code class="codeph">access_method</code> parameter to <code class="codeph">direct_path</code>. Instead, use either <code class="codeph">automatic</code> or <code class="codeph">external_table</code>. The underlying problem could be a permissions problem, for example:</p>
<pre dir="ltr">ORA-39181: Only partial table data may be exported due to fine grain access control on &#34;<span class="italic">schema_name</span>&#34;.&#34;<span class="italic">object_name</span>&#34;
</pre>
<div class="infoboxnotealso" id="GUID-7FFB40CB-E421-4FE4-8344-29D91360EFAD__GUID-D16967B1-83D6-4554-AAFA-CB2F03E8D9D5">
<p class="notep1">See Also:</p>
<p><a class="olink SUTIL200" target="_blank" href="../SUTIL/GUID-5F7380CE-A619-4042-8D13-1F7DDE429991.htm#SUTIL200"><span><cite>Oracle Database Utilities</cite></span></a> for more information about using Data Pump Export</p>
</div>
</div>
</div>
<a id="DBSEG311"></a><a id="DBSEG310"></a>
<div class="props_rev_3"><a id="GUID-1EBCA7B1-2991-4F5E-B36C-9CB446E943D8"></a>
<h3 id="DBSEG-GUID-1EBCA7B1-2991-4F5E-B36C-9CB446E943D8" class="sect3">User Models and Oracle Virtual Private Database</h3>
<div>
<p>You can use Oracle Virtual Private Database in several types of user models.</p>
<p>These user models are as follows:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold">Application users who are also database users.</span> Oracle Database enables applications to enforce fine-grained access control for each user, regardless of whether that user is a database user or an application user unknown to the database. When application users are also database users, Oracle Virtual Private Database enforcement works as follows: users connect to the database, and then the application sets up application contexts for each session. (You can use the default <code class="codeph">USERENV</code> application context namespace, which provides many parameters for retrieve different types of user session data.) As each session is initiated under a different user name, it can enforce different fine-grained access control conditions for each user.</p>
</li>
<li>
<p><span class="bold">Proxy authentication using OCI or JDBC/OCI.</span> Proxy authentication permits different fine-grained access control for each user, because each session (OCI or JDBC/OCI) is a distinct database session with its own application context.</p>
</li>
<li>
<p><span class="bold">Proxy authentication integrated with Enterprise User Security.</span> If you have integrated proxy authentication by using Enterprise User Security, you can retrieve user roles and other attributes from Oracle Internet Directory to enforce Oracle Virtual Private Database policies. (In addition, globally initialized application context can also be retrieved from the directory.)</p>
</li>
<li>
<p><span class="bold">Users connecting as One Big Application User.</span> Applications connecting to the database as a single user on behalf of all users can have fine-grained access control for each user. The user for that single session is often called <span class="italic">One Big Application User</span>. Within the context of that session, however, an application developer can create a global application context attribute to represent the individual application user (for example, <code class="codeph">REALUSER</code>). Although all database sessions and audit records are created for One Big Application User, the attributes for each session can vary, depending on who the end user is. This model works best for applications with a limited number of users and no reuse of sessions. The scope of roles and database auditing is diminished because each session is created as the same database user. For more information about global application contexts, see <a href="app_context.htm#GUID-85E9C986-4D83-4DBB-9A2E-000E737F30D6" title="You can use a global application context to access application values across database sessions, including an Oracle Real Application Clusters environment.">Global Application Contexts</a>.</p>
</li>
<li>
<p><span class="bold">Web-based applications.</span> Web-based applications typically have hundreds of users. Even when there are persistent connections to the database, supporting data retrieval for many user requests, these connections are not specific to particular Web-based users. Instead, Web-based applications typically set up and reuse connections, to provide scalability, rather than having different sessions for each user. For example, when Web users Jane and Ajit connect to a middle tier application, it may establish a single database session that it uses on behalf of both users. Typically, neither Jane nor Ajit is known to the database. The application is responsible for switching the user name on the connection, so that, at any given time, it is either Jane or Ajit using the session.</p>
<p>Oracle Virtual Private Database helps with connection pooling by allowing multiple connections to access more than one global application context. This ability makes it unnecessary to establish a separate application context for each distinct user session.</p>
</li>
</ul>
<p><a href="vpd.htm#GUID-1EBCA7B1-2991-4F5E-B36C-9CB446E943D8__CIHEFICI" title="This table summarizes how VPD works in certain user models.">Table 10-3</a> summarizes how Oracle Virtual Private Database applies to user models.</p>
<div class="tblformalwide" id="GUID-1EBCA7B1-2991-4F5E-B36C-9CB446E943D8__CIHEFICI">
<p class="titleintable">Table 10-3 Oracle Virtual Private Database in Different User Models</p>
<table class="cellalignment3691" title="Oracle Virtual Private Database in Different User Models" summary="This table summarizes how VPD works in certain user models.">
<thead>
<tr class="cellalignment3671">
<th class="cellalignment3742" id="d76065e10633">User Model Scenario</th>
<th class="cellalignment3795" id="d76065e10636">Individual Database Connection</th>
<th class="cellalignment3796" id="d76065e10639">Separate Application Context per User</th>
<th class="cellalignment3702" id="d76065e10642">Single Database Connection</th>
<th class="cellalignment3774" id="d76065e10645">Application Must Switch User Name</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3671">
<td class="cellalignment3744" id="d76065e10650" headers="d76065e10633">
<p>Application users are also database users</p>
</td>
<td class="cellalignment3705" headers="d76065e10650 d76065e10636">
<p>Yes</p>
</td>
<td class="cellalignment3740" headers="d76065e10650 d76065e10639">
<p>Yes</p>
</td>
<td class="cellalignment3705" headers="d76065e10650 d76065e10642">
<p>No</p>
</td>
<td class="cellalignment3777" headers="d76065e10650 d76065e10645">
<p>No</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3744" id="d76065e10666" headers="d76065e10633">
<p>Proxy authentication using OCI or JDBC/OCI</p>
</td>
<td class="cellalignment3705" headers="d76065e10666 d76065e10636">
<p>Yes</p>
</td>
<td class="cellalignment3740" headers="d76065e10666 d76065e10639">
<p>Yes</p>
</td>
<td class="cellalignment3705" headers="d76065e10666 d76065e10642">
<p>No</p>
</td>
<td class="cellalignment3777" headers="d76065e10666 d76065e10645">
<p>No</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3744" id="d76065e10682" headers="d76065e10633">
<p>Proxy authentication integrated with Enterprise User Security<a id="fn_2" href="#fn_2" onclick="footdisplay(2,&#34;User roles and other attributes, including globally initialized application context, can be retrieved from Oracle Internet Directory to enforce Oracle Virtual Private Database. &#34;)"><sup>Foot&nbsp;2</sup></a></p>
</td>
<td class="cellalignment3705" headers="d76065e10682 d76065e10636">
<p>No</p>
</td>
<td class="cellalignment3740" headers="d76065e10682 d76065e10639">
<p>No</p>
</td>
<td class="cellalignment3705" headers="d76065e10682 d76065e10642">
<p>Yes</p>
</td>
<td class="cellalignment3777" headers="d76065e10682 d76065e10645">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3744" id="d76065e10701" headers="d76065e10633">
<p>One Big Application User</p>
</td>
<td class="cellalignment3705" headers="d76065e10701 d76065e10636">
<p>No</p>
</td>
<td class="cellalignment3740" headers="d76065e10701 d76065e10639">
<p>No<a id="fn_3" href="#fn_3" onclick="footdisplay(3,&#34;Application developers can create a global application context attribute representing individual application users (for example, REALUSER), which can then be used for controlling each session attributes, or for auditing. &#34;)"><sup>Foot&nbsp;3</sup></a></p>
</td>
<td class="cellalignment3705" headers="d76065e10701 d76065e10642">
<p>No</p>
</td>
<td class="cellalignment3777" headers="d76065e10701 d76065e10645">
<p>Yes<sup>2</sup></p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3744" id="d76065e10725" headers="d76065e10633">
<p>Web-based applications</p>
</td>
<td class="cellalignment3705" headers="d76065e10725 d76065e10636">
<p>No</p>
</td>
<td class="cellalignment3740" headers="d76065e10725 d76065e10639">
<p>No</p>
</td>
<td class="cellalignment3705" headers="d76065e10725 d76065e10642">
<p>Yes</p>
</td>
<td class="cellalignment3777" headers="d76065e10725 d76065e10645">
<p>Yes</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;2</sup></p>
<p>User roles and other attributes, including globally initialized application context, can be retrieved from Oracle Internet Directory to enforce Oracle Virtual Private Database.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;3</sup></p>
<p>Application developers can create a global application context attribute representing individual application users (for example, <code class="codeph">REALUSER)</code>, which can then be used for controlling each session attributes, or for auditing.</p>
</div>
</div>
</div>
<a id="DBSEG313"></a><a id="DBSEG312"></a>
<div class="props_rev_3"><a id="GUID-09300037-0440-4212-B28A-1EABEA6ABDB2"></a>
<h2 id="DBSEG-GUID-09300037-0440-4212-B28A-1EABEA6ABDB2" class="sect2">Oracle Virtual Private Database Data Dictionary Views</h2>
<div>
<p>Oracle Database provides data dictionary views that list information about Oracle Virtual Private Database policies.</p>
<div class="section">
<p><a href="vpd.htm#GUID-09300037-0440-4212-B28A-1EABEA6ABDB2__CIHGIGID" title="VPD Policy Views">Table 10-4</a> lists Virtual Private Database-specific views. See <a class="olink REFRN" target="_blank" href="../REFRN/toc.htm"><span><cite>Oracle Database Reference</cite></span></a> for more information about these views.</p>
</div>
<!-- class="section" -->
<div class="tblformalwide" id="GUID-09300037-0440-4212-B28A-1EABEA6ABDB2__CIHGIGID">
<p class="titleintable">Table 10-4 Data Dictionary Views That Display Information about VPD Policies</p>
<table class="cellalignment3691" title="Data Dictionary Views That Display Information about VPD Policies" summary="VPD Policy Views">
<thead>
<tr class="cellalignment3671">
<th class="cellalignment3783" id="d76065e10838">View</th>
<th class="cellalignment3784" id="d76065e10841">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3671">
<td class="cellalignment3785" id="d76065e10846" headers="d76065e10838">
<p><code class="codeph">ALL_POLICIES</code></p>
</td>
<td class="cellalignment3786" headers="d76065e10846 d76065e10841">
<p>Describes all Oracle Virtual Private Database security policies for objects accessible to the current user.</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3785" id="d76065e10854" headers="d76065e10838">
<p><code class="codeph">ALL_POLICY_ATTRIBUTES</code></p>
</td>
<td class="cellalignment3786" headers="d76065e10854 d76065e10841">
<p>Describes all the application context namespaces, attributes, and Virtual Private Database policy associations where the logged in user is the owner of the VPD policy or the VPD policy belongs to <code class="codeph">PUBLIC</code>.</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3785" id="d76065e10865" headers="d76065e10838">
<p><code class="codeph">ALL_POLICY_CONTEXTS</code></p>
</td>
<td class="cellalignment3786" headers="d76065e10865 d76065e10841">
<p>Describes the driving contexts defined for the synonyms, tables, and views accessible to the current user. A driving context is an application context used in an Oracle Virtual Private Database policy.</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3785" id="d76065e10873" headers="d76065e10838">
<p><code class="codeph">ALL_POLICY_GROUPS</code></p>
</td>
<td class="cellalignment3786" headers="d76065e10873 d76065e10841">
<p>Describes the Oracle Virtual Private Database policy groups defined for the synonyms, tables, and views accessible to the current user</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3785" id="d76065e10882" headers="d76065e10838">
<p><code class="codeph">ALL_SEC_RELEVANT_COLS</code></p>
</td>
<td class="cellalignment3786" headers="d76065e10882 d76065e10841">
<p>Describes the security relevant columns of the security policies for the tables and views accessible to the current user</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3785" id="d76065e10891" headers="d76065e10838">
<p><code class="codeph">DBA_POLICIES</code></p>
</td>
<td class="cellalignment3786" headers="d76065e10891 d76065e10841">
<p>Describes all Oracle Virtual Private Database security policies in the database.</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3785" id="d76065e10899" headers="d76065e10838">
<p><code class="codeph">DBA_POLICY_ATTRIBUTES</code></p>
</td>
<td class="cellalignment3786" headers="d76065e10899 d76065e10841">
<p>Describes all the application context namespaces, attributes, and Virtual Private Database policy associations for context-sensitive and shared context-sensitive Virtual Private Database policies</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3785" id="d76065e10907" headers="d76065e10838">
<p><code class="codeph">DBA_POLICY_GROUPS</code></p>
</td>
<td class="cellalignment3786" headers="d76065e10907 d76065e10841">
<p>Describes all policy groups in the database.</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3785" id="d76065e10915" headers="d76065e10838">
<p><code class="codeph">DBA_POLICY_CONTEXTS</code></p>
</td>
<td class="cellalignment3786" headers="d76065e10915 d76065e10841">
<p>Describes all driving contexts in the database. Its columns are the same as those in <code class="codeph">ALL_POLICY_CONTEXTS</code>.</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3785" id="d76065e10926" headers="d76065e10838">
<p><code class="codeph">DBA_SEC_RELEVANT_COLS</code></p>
</td>
<td class="cellalignment3786" headers="d76065e10926 d76065e10841">
<p>Describes the security relevant columns of all security policies in the database</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3785" id="d76065e10935" headers="d76065e10838">
<p><code class="codeph">USER_POLICIES</code></p>
</td>
<td class="cellalignment3786" headers="d76065e10935 d76065e10841">
<p>Describes all Oracle Virtual Private Database security policies associated with objects owned by the current user. This view does not display the <code class="codeph">OBJECT_OWNER</code> column.</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3785" id="d76065e10947" headers="d76065e10838">
<p><code class="codeph">USER_POLICY_ATTRIBUTES</code></p>
</td>
<td class="cellalignment3786" headers="d76065e10947 d76065e10841">
<p>Describes all the application context namespaces, attributes, and Virtual Private Database policy associations where the owner of the Virtual Private Database policy is the current user</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3785" id="d76065e10955" headers="d76065e10838">
<p><code class="codeph">USER_POLICY_CONTEXTS</code></p>
</td>
<td class="cellalignment3786" headers="d76065e10955 d76065e10841">
<p>Describes the driving contexts defined for the synonyms, tables, and views owned by the current user. Its columns (except for <code class="codeph">OBJECT_OWNER</code>) are the same as those in <code class="codeph">ALL_POLICY_CONTEXTS</code>.</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3785" id="d76065e10969" headers="d76065e10838">
<p><code class="codeph">USER_SEC_RELEVANT_COLS</code></p>
</td>
<td class="cellalignment3786" headers="d76065e10969 d76065e10841">
<p>Describes the security relevant columns of the security policies for the tables and views owned by the current user. Its columns (except for <code class="codeph">OBJECT_OWNER</code>) are the same as those in <code class="codeph">ALL_SEC_RELEVANT_COLS</code>.</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3785" id="d76065e10984" headers="d76065e10838">
<p><code class="codeph">USER_POLICY_GROUPS</code></p>
</td>
<td class="cellalignment3786" headers="d76065e10984 d76065e10841">
<p>Describes the policy groups defined for the synonyms, tables, and views owned by the current user. This view does not display the <code class="codeph">OBJECT_OWNER</code> column.</p>
</td>
</tr>
<tr class="cellalignment3671">
<td class="cellalignment3785" id="d76065e10995" headers="d76065e10838">
<p><code class="codeph">V$VPD_POLICY</code></p>
</td>
<td class="cellalignment3786" headers="d76065e10995 d76065e10841">
<p>For the current PDB, displays all the fine-grained security policies and predicates associated with the cursors currently in the library cache. This view is useful for finding the policies that were applied to a SQL statement.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<div class="section">
<div class="infoboxnotealso" id="GUID-09300037-0440-4212-B28A-1EABEA6ABDB2__GUID-01527CF6-4E81-4F80-99C6-DF1B5E2CFE0F">
<p class="notep1">Tip:</p>
<p>In addition to these views, check the database trace file if you find errors in application that use Virtual Private Database policies. See <a class="olink TGSQL791" target="_blank" href="../TGSQL/tgsql_trace.htm#TGSQL791"><span><cite>Oracle Database SQL Tuning Guide</cite></span></a> for more information about trace files. The <code class="codeph">USER_DUMP_DEST</code> initialization parameter specifies the current location of the trace files. You can find the value of this parameter by issuing <code class="codeph">SHOW PARAMETER USER_DUMP_DEST</code> in SQL*Plus.</p>
</div>
</div>
<!-- class="section" --></div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3670">
<tr>
<td class="cellalignment3684">
<table class="cellalignment3675">
<tr>
<td class="cellalignment3674"><a href="app_context.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3674"><a href="tsdp.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2006, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3686">
<table class="cellalignment3673">
<tr>
<td class="cellalignment3674"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3674"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3674"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3674"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3674"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3674"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>


</body></html>