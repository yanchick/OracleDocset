<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-86552"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Using%20Oracle%20R%20Enterprise"></a><title>Using Oracle R Enterprise</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 730"/>
<meta name="dcterms.created" content="2013-05-23T6:9:22Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="R Enterprise User&#39;s Guide"/>
<meta name="dcterms.identifier" content="E35158-07"/>
<meta name="dcterms.isVersionOf" content="OREUG"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="install.htm" title="Previous" type="text/html"/>
<link rel="Next" href="predict.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E35158-07.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">7/11</span> <!-- End Header -->
<div id="OREUG151" class="chapter"><a id="CEGCICBB"></a>
<h1 class="chapter"><span class="secnum">3</span> Using Oracle R Enterprise</h1>
<p>This chapter explains how to use Oracle R Enterprise to analyze data stored in tables or views in an Oracle Database. Before you analyze data in tables, you must connect to a database, as described in <a href="#CEGIAJIF">Tables in Oracle Database</a>.</p>
<p>This chapter discusses these topics:</p>
<ul>
<li>
<p><a href="#CEGBGDEC">View Oracle R Enterprise Documentation</a></p>
</li>
<li>
<p><a href="#CEGECICD">Oracle R Enterprise Data</a></p>
</li>
<li>
<p><a href="#CEGEJHDD">Oracle R Enterprise Transparency Layer</a></p>
</li>
<li>
<p><a href="#CEGGAJAC">Oracle R Enterprise Database-Embedded R Engine</a></p>
</li>
<li>
<p><a href="#CEGIJGGI">Oracle R Enterprise Additional R Functions</a></p>
</li>
<li>
<p><a href="#CEGGJGDB">Oracle R Enterprise SQL Functions</a></p>
</li>
<li>
<p><a href="#CEGGIDFI">Oracle R Enterprise Examples</a></p>
</li>
</ul>
<p>We assume familiarity with R in the remainder of this section.</p>
<p>These examples were all created using R Console, the default graphical user interface for Open Source R.</p>
<p>For information about <code>ore.connect</code>, <code>ore.attach</code>, <code>ore.sync</code>, and <code>ore.ls</code>, see <a href="install.htm#BABCIBGC">Start the Oracle R Enterprise Client on Microsoft Windows</a>, <a href="install.htm#BABEBJEC">Start the Oracle R Enterprise Client on Linux, Solaris, or AIX</a>, and <a href="install.htm#BABCCFHJ">Connect to an Oracle Database</a>.</p>
<p>Oracle R Enterprise also includes the <a href="procs.htm#CIHEIEBC">Oracle R Enterprise Statistical Functions</a>, described in <a href="procs.htm#CIHEIEBC">Chapter 5</a>.</p>
<a id="CEGIAJIF"></a>
<div id="OREUG152" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Tables in <a id="sthref78"></a>Oracle <a id="sthref79"></a>Database</h2>
<p>The first step to using Oracle R Enterprise to analyze data stored in database tables is to <a href="install.htm#BABCIBGC">Start the Oracle R Enterprise Client on Microsoft Windows</a> or <a href="install.htm#BABEBJEC">Start the Oracle R Enterprise Client on Linux, Solaris, or AIX</a>.</p>
<p>Objects created by Oracle R Enterprise are identified with the <code>ore</code> prefix. Pick any object returned by <code>ore.ls()</code> and type either <code>class(OBJECTNAME)</code> or <code>class(OBJECTNAME$COLUMN_NAME)</code>.</p>
<p>For example,</p>
<pre>R&gt; class(NARROW)
[1] &#34;ore.frame&#34;
attr(,&#34;package&#34;)
[1] &#34;OREbase&#34;
</pre>
<p>The prefix <code>ore</code> is applied to the class names. This indicates that the object is an Oracle R Enterprise created object that holds metadata (instead of contents) of the corresponding object in Oracle Database 12<span class="italic">c</span> Release 1 (12.1).</p>
<p>Two important metadata objects are</p>
<ul>
<li>
<p><span class="bold">ore.fra<a id="sthref80"></a>me</span> is the Oracle R Enterprise metadata object that maps to a database table. The ore.frame object is the counterpart to an R data.frame.</p>
</li>
<li>
<p><span class="bold">ore.ma<a id="sthref81"></a>trix</span> is the Oracle R Enterprise metadata object that maps to a database table storing a matrix. The ore.matrix object is the counterpart to an R matrix.</p>
</li>
</ul>
<p><code>ore.frame</code> or <code>ore.matrix</code> can be returned by the <code>class()</code> function. For an example of creating ore.frame data, see <a href="#CEGDHJHI">Load Data into the Database</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CEGBGDEC"></a>
<div id="OREUG153" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">View <a id="sthref82"></a><a id="sthref83"></a>Oracle R Enterprise <a id="sthref84"></a>Documentation</h2>
<p>Use this command to view the Oracle R Enterprise documentation library:</p>
<pre>R&gt; OREShowDoc()
</pre></div>
<!-- class="sect1" -->
<a id="CEGECICD"></a>
<div id="OREUG154" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Oracle R Enterprise <a id="sthref85"></a>Data</h2>
<p>When you install Oracle R Enterprise, two tables NARROW and ONTIME_S are loaded into the <code>rquser</code> schema:</p>
<pre>R&gt; ore.ls()
[1] &#34;NARROW&#34;   &#34;ONTIME_S&#34;
</pre>
<p>Oracle R Enterprise includes these functions:</p>
<ul>
<li>
<p><a href="#CEGDHJHI">Load Data into the Database</a></p>
</li>
<li>
<p><a href="#CEGGFCDC">Drop a Database Table</a></p>
</li>
<li>
<p><a href="#CEGFHHJE">Pull a Database Table to an R Frame</a></p>
</li>
</ul>
<a id="CEGDHJHI"></a>
<div id="OREUG155" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Load Data <a id="sthref86"></a>into the Database</h3>
<p>Follow these steps to load data from files on your system to Oracle Database 12<span class="italic">c</span> Release 1 (12.1):</p>
<ol>
<li>
<p>Load contents of the file to an R data frame using <code>read.table()</code> or <code>read.csv()</code> functions documented in the R manuals.</p>
</li>
<li>
<p>Then <a id="sthref87"></a>use <code>ore.create()</code>to load a data frame to a table:</p>
<pre>ore.create(data_frame, table=&#34;TABLE_NAME&#34;)
</pre></li>
</ol>
<p>loads data_frame into the database table TABLE_NAME.</p>
<p>This example creates an R data frame <code>df</code> consisting of pairs of numbers and letters and then loads the data frame into the table DF_TABLE. The example shows that the data frame and the table have the same dimensions and the same first few elements, but different values for class. The class for DF_TABLE is ore.frame.</p>
<pre>R&gt; df &lt;- data.frame(A=1:26, B=letters[1:26])
R&gt; dim(df)
[1] 26  2
R&gt; class(df)
[1] &#34;data.frame&#34;
R&gt; head(df)
  A B
1 1 a
2 2 b
3 3 c
4 4 d
5 5 e
6 6 f
R&gt; ore.create(df, table=&#34;DF_TABLE&#34;)
R&gt; ore.ls()
[1] &#34;DF_TABLE&#34; &#34;NARROW&#34;   &#34;ONTIME_S&#34;
R&gt; class(DF_TABLE)
[1] &#34;ore.frame&#34;
attr(,&#34;package&#34;)
[1] &#34;OREbase&#34;
R&gt; dim(DF_TABLE)
[1] 26  2
R&gt; head(DF_TABLE)
  A B
0 1 a
1 2 b
2 3 c
3 4 d
4 5 e
5 6 f
R&gt; 
</pre></div>
<!-- class="sect2" -->
<div id="OREUG156" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref88"></a>
<h3 class="sect2">Materialize<a id="sthref89"></a> R Data</h3>
<p><code>ore.push(data-frame)</code> <a id="sthref90"></a>stores an R object in the database as a temporary object, and returns a handle to that object. It converts data frame, matrix, and vector to a table, and list, model, and others to a serialized object.</p>
<p>This example pushes the numerical vector created by the R command <code>c(1,2,3,4,5)</code> to <span class="italic">v</span>, an Oracle R Enterprise object:</p>
<pre>v &lt;- ore.push(c(1,2,3,4,5))
R&gt; class(v)
[1] &#34;ore.numeric&#34;
attr(,&#34;package&#34;)
[1] &#34;OREbase&#34;
R&gt; head(v)
[1] 1 2 3 4 5
</pre></div>
<!-- class="sect2" -->
<a id="CEGGFCDC"></a>
<div id="OREUG157" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Drop a Database<a id="sthref91"></a> Table</h3>
<p>To drop a<a id="sthref92"></a> table in the database use</p>
<pre>ore.drop(table=&#34;NAMEOFTABLE&#34;)
</pre>
<p>For example, this command drops DF_TABLE:</p>
<pre>ore.drop(table=&#34;DF_TABLE&#34;)
</pre></div>
<!-- class="sect2" -->
<a id="CEGFHHJE"></a>
<div id="OREUG158" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Pull a Database <a id="sthref93"></a>Table to an R Frame</h3>
<p>To pull the contents <a id="sthref94"></a>of a database table or view into an in-memory R data frame use <code>ore.pull(OBJECT_NAME)</code>for the name of an object returned by <code>ore.ls()</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can pull a table or view to an R frame only if the data can fit into R&#39;s memory.</div>
<p>For example, use <code>ore.pull()</code> to create the data frame <code>df_narrow</code> from the table NARROW and then verify that <code>df_narrow</code> is a data frame:</p>
<pre>R&gt; df_narrow &lt;- ore.pull(NARROW)
R&gt; class(df_narrow)
[1] &#34;data.frame&#34;
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CEGEJHDD"></a>
<div id="OREUG159" class="sect1">
<h2 class="sect1">Oracle R Enterprise <a id="sthref95"></a>Transparency Layer</h2>
<p>The Oracle R Enterprise transparency layer allows R users to use R syntax to work directly with database-resident objects without having to pull data from Oracle into R&#39;s memory on the user&#39;s desktop.</p>
<p>R language constructs and syntax are supported for objects mapped to Oracle Database 12<span class="italic">c</span> Release 1 (12.1) objects. The following R data types have been overloaded so that they are mapped to database objects and hence enabled for in-database execution:</p>
<ul>
<li>
<p>Character, Integer, Numeric and Logical vectors</p>
</li>
<li>
<p>Factors</p>
</li>
<li>
<p>Data Frame</p>
</li>
<li>
<p>Matrix is overloaded in two situations:</p>
<ul>
<li>
<p>Linear algebra cross-products</p>
</li>
<li>
<p>Creating input matrices for advanced analytics</p>
</li>
</ul>
</li>
</ul>
<p><code>class(object)</code> reports the data type of such mapped objects. For example,</p>
<pre>R&gt; class(NARROW$AGE)
[1] &#34;ore.numeric&#34;
attr(,&#34;package&#34;)
[1] &#34;OREbase&#34;
</pre>
<p>The following <a id="sthref96"></a>operators and functions are supported. See R documentation for syntax and semantics of these operators and functions. Syntax and semantics for these items remain unchanged when used on a corresponding database-mapped data type (also known as an Oracle R Enterprise data type):</p>
<ul>
<li>
<p><span class="bold">Mathematical transformations</span>: abs, sign, sqrt, ceiling, floor, trunc, cummax, cummin, cumprod, cumsum, log, log10, log2, log1p, acos, acosh, asin, asinh, atan, atanh, exp, expm1, cos, cosh, sin, sinh, tan, tanh, gamma, lgamma, digamma, trigamma, round, signif, pmin, pmax, zapsmall</p>
</li>
<li>
<p><span class="bold">Basic statistics</span>: mean, summary, min, max, sum, any, all, median, range, IQR, fivenum, mad, quantile, sd, var, table, rowSums, colSums, rowMeans, colMeans</p>
</li>
<li>
<p><span class="bold">Arithmetic operators</span>:+, -, *, /, ^, %%, %/%</p>
</li>
<li>
<p><span class="bold">Comparison operators</span>: ==, &gt;, &lt;, !=, &lt;=, &gt;=</p>
</li>
<li>
<p><span class="bold">Logical operators</span>: &amp;, |, xor</p>
</li>
<li>
<p><span class="bold">Set operations</span>: unique, %in%</p>
</li>
<li>
<p><span class="bold">Assignment</span>: &lt;-, =, -&gt;</p>
</li>
<li>
<p><span class="bold">String operations</span>: tolower, toupper, casefold, toString, chatr, sub, gsub, substr, substring, paste, nchar</p>
</li>
<li>
<p><span class="bold">Combine Data Frame</span>: cbind, rbind, merge</p>
</li>
<li>
<p><span class="bold">Combine vectors</span>: append</p>
</li>
<li>
<p><span class="bold">Vector creation</span>: ifelse</p>
</li>
<li>
<p><span class="bold">Subset</span>: [, [[, $, head, tail, window, subset, Filter, na.omit, na.exclude, complete.cases</p>
</li>
<li>
<p><span class="bold">Data reshaping</span>: split, unlist</p>
</li>
<li>
<p><span class="bold">Data processing</span>: eval, with, within, transform</p>
</li>
<li>
<p><span class="bold">Apply variants</span>: tapply, aggregate, by</p>
</li>
<li>
<p><span class="bold">Regression</span>: <code>ore.lm()</code> - a variant of <code>lm()</code></p>
</li>
<li>
<p><span class="bold">Special value checks</span>: is.na, is.finite, is.infinite, is.nan</p>
</li>
<li>
<p><span class="bold">Metadata functions</span>: attributes, nrow, NROW, ncol, NCOL, nlevels, names, row, col, dimnames, dim, length, row.names, col.names, levels, reorder</p>
</li>
<li>
<p><span class="bold">Graphics</span>: hist, boxplot, plot, smoothScatter</p>
</li>
<li>
<p><span class="bold">Garbage collection</span>: gc (removal of implicitly created temporary tables after errors and explicitly created temporary tables)</p>
</li>
<li>
<p><span class="bold">Conversion functions</span>: <code>as.ore.{character, factor, integer, logical, numeric, vector}</code></p>
</li>
<li>
<p><span class="bold">Test functions</span>: <code>is.ore.{character, factor, integer, logical, numeric, vector}</code></p>
</li>
<li>
<p><span class="bold">Save</span>: ore.push (table is automatically refreshed in R memory)</p>
</li>
</ul>
<p>The following additional categories of functions provide conversions to/from and checks on Oracle R Enterprise data types:</p>
<ul>
<li>
<p><span class="bold">Hypothesis testing</span>: wilcox.test, ks.test, var.test, binom.test, chisq.test, t.test, bartlett.test</p>
</li>
<li>
<p><span class="bold">Bessel Functions</span>: Bessel(I,J,K,Y)</p>
</li>
<li>
<p><span class="bold">Gamma Functions</span>: gamma, lgamma, digamma, trigamma (part of mathematical functions group)</p>
</li>
<li>
<p><span class="bold">Various Distributions</span>: Density, cumulative distribution, and quantile functions for standard distributions</p>
</li>
<li>
<p><span class="bold">Matrix Operations</span>:%*% (matrix multiplication), crossprod (matrix cross-product), tcrossprod (matrix cross-product A times transpose of B)</p>
</li>
</ul>
<p>The Oracle R Enterprise sample programs described in <a href="#CEGGIDFI">Oracle R Enterprise Examples</a> include several examples using each category of these functions with Oracle R Enterprise data types.</p>
<p>An Oracle R Enterprise principle is to support data pre-processing functionality extensively so all data preparation and analysis can take place directly in the database. If you need to use a statistical technique that is not available in Oracle R Enterprise, having used Oracle R Enterprise to preprocess and filter the data, a much smaller amount of data can be pulled into R.</p>
<p>If a specific function that you need is not supported by Oracle R Enterprise, you must explicitly pull data from the database into the R engine memory using <code>ore.pull()</code> to create an in-memory R object first.</p>
<div id="OREUG160" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref97"></a>
<h3 class="sect2">Using R <a id="sthref98"></a>with Oracle R Enterprise Data Types</h3>
<p>The following examples illustrate using R with Oracle R Enterprise data types:</p>
<ul>
<li>
<p><span class="bold">Simple <a id="sthref99"></a>column and row selection in R</span>:</p>
<pre># Push built-in R data set iris to database
ore.create(iris, table=&#34;IRIS&#34;)
head(iris)
iris_projected = IRIS[, c(&#34;PETAL_LENGTH&#34;, &#34;SPECIES&#34;)]
R&gt; head (iris_projected)
  PETAL_LENGTH SPECIES
0          1.4  setosa
1          1.4  setosa
2          1.3  setosa
3          1.5  setosa
4          1.4  setosa
5          1.7  setosa
</pre></li>
<li>
<p><span class="bold">Database <a id="sthref100"></a>JOIN using R</span>:</p>
<pre>df1 &lt;- data.frame(x1=1:5, y1=letters[1:5])
df2 &lt;- data.frame(x2=5:1, y2=letters[11:15])
merge (df1, df2, by.x=&#34;x1&#34;, by.y=&#34;x2&#34;)
 x1 y1 y2
1  1  a  o
2  2  b  n
3  3  c  m
4  4  d  l
5  5  e  k
# Create database objects to correspond to in-memory R objects df1 and df2
ore.df1 &lt;- ore.create(df1, table=&#34;DF1&#34;)
ore.df2 &lt;- ore.create(df2, table=&#34;DF2&#34;)
# Compare results
R&gt; merge (DF1, DF2, by.x=&#34;X1&#34;, by.y=&#34;X2&#34;)
  X1 Y1 Y2
0  1  a  o
1  2  b  n
2  3  c  m
3  4  d  l
4  5  e  k
</pre></li>
<li>
<p><span class="bold">Database a<a id="sthref101"></a>ggregation using R</span>:</p>
<pre># Push built-in data set iris to database
ore.create(iris, table=&#34;IRIS&#34;)
aggdata &lt;- aggregate(IRIS, by = list(IRIS$SPECIES), FUN = summary)
class(aggdata)
head(aggdata)
</pre></li>
<li>
<p><span class="bold">Data formatting<a id="sthref102"></a><a id="sthref103"></a> and creating derived columns in R</span></p>
<p>Note that adding derived columns does not change the database table. See <a href="#CEGFJIJA">Derived Columns in Oracle R Enterprise</a>.</p>
<pre>diverted_fmt &lt;- function (x) {
ifelse(x==0, &#39;Not Diverted&#39;,
ifelse(x==1, &#39;Diverted&#39;,&#39;&#39;))
}
cancellationCode_fmt &lt;- function(x) {
ifelse(x==&#39;A&#39;, &#39;A CODE&#39;,
ifelse(x==&#39;B&#39;, &#39;B CODE&#39;,
ifelse(x==&#39;C&#39;, &#39;C CODE&#39;,
ifelse(x==&#39;D&#39;, &#39;D CODE&#39;, &#39;NOT CANCELLED&#39;))))
}
delayCategory_fmt &lt;- function(x) {
ifelse(x&gt;200,&#39;LARGE&#39;,
ifelse(x&gt;=30,&#39;MEDIUM&#39;,&#39;SMALL&#39;))
}
zscore &lt;- function(x) {
(x-mean(x,na.rm=TRUE))/sd(x,na.rm=TRUE)
# ONTIME_S is a database table
ONTIME_S$DIVERTED &lt;- diverted_fmt(DIVERTED)
ONTIME_S$CANCELLATIONCODE &lt;- cancellationCode_fmt(CANCELLATIONCODE)
ONTIME_S$ARRDELAY &lt;- delayCategory_fmt(ARRDELAY)
ONTIME_S$DEPDELAY &lt;- delayCategory_fmt(DEPDELAY)
ONTIME_S$DISTANCE_ZSCORE &lt;- zscore(DISTANCE)
</pre></li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CEGFJIJA"></a>
<div id="OREUG161" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Derived Columns<a id="sthref104"></a> in Oracle R Enterprise</h3>
<p>When you add derived columns using Oracle R Enterprise, the derived do not affect the underlying table in the database. All that is generated is a SQL query that has the additional derived columns in the select list.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CEGGAJAC"></a>
<div id="OREUG162" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Oracle R Enterprise<a id="sthref105"></a> Database-Embedded R Engine</h2>
<p>The embedded R engine in Oracle Database 12<span class="italic">c</span> Release 1 (12.1) allows R users to off load desktop calculations that may require either more resources such as those available to a database or database-driven data parallelism. The embedded R engine also executes R scripts embedded in SQL or PL/SQL programs (lights-out processing).</p>
<p>These examples illustrate using Oracle R Enterprise embedded R engine with standard R packages downloaded from CRAN:</p>
<ul>
<li>
<p><a href="#CEGGGJFD">Build a Regression Model</a></p>
</li>
<li>
<p><a href="#CEGJECHG">Perform R Computation in the Database</a></p>
</li>
<li>
<p><a href="#CEGBGFAH">Build a Series of Regression Models Using Data Parallelism</a></p>
</li>
</ul>
<a id="CEGGGJFD"></a>
<div id="OREUG163" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Build a <a id="sthref106"></a>Regression Model</h3>
<p>This example illustrates <span class="bold">building a regression model</span> using a CRAN package. Prepare the data used for training in the database (filtering out observations that are not of interest, selecting attributes, imputing missing values, etc.) to create the table ONTIME_S_PREPROCESSED_SUBSET. Pull the prepared training set (which is usually small enough to fit in desktop R memory) into R client to execute the model build. The resulting model is then used to score vast numbers of rows, in parallel, in the database.</p>
<p>Note that scoring is a trivially parallelizable operation because one row can be scored independent of and in parallel with another row. The model built on the desktop is shipped to the database to perform scoring on vast number of rows in the database.</p>
<p>The computations are divided into these steps:</p>
<ol>
<li>
<p><span class="bold">Build a model <a id="sthref107"></a>in the desktop</span>:</p>
<pre>dat &lt;- ore.pull(ONTIME_S_PREPROCESSED_SUBSET)
mod &lt;- glm(ARRDELAY ~ DISTANCE + DEPDELAY, dat)
mod
summary(mod)
</pre></li>
<li>
<p><span class="bold">Score<a id="sthref108"></a> in-parallel in the database using embedded R</span>:</p>
<pre>prd &lt;- predict(mod, newdata=ONTIME_S_FINAL_DATA_TO_BE_SCORED)
class(prd)
# Add predictions as a new column
res &lt;- cbind(newdat, PRED = prd)
head(res)
</pre></li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CEGJECHG"></a>
<div id="OREUG164" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Perform R Computation <a id="sthref109"></a>in the Database</h3>
<p>This example illustrates <span class="bold">off-loading R computation</span> to execute in the embedded R engine. The R user simply includes his code within a closure (that is, <code>function() {}</code>) and invokes <code>ore.doEval()</code>. <code>ore.doEval()</code> schedules execution of the R code with the database-embedded R engine and returns the results back to the desktop for continued analysis:</p>
<pre>mod &lt;- ore.doEval(
   function() {
      library(biglm)
      dat &lt;- ore.pull(ONTIME_S)
      mod &lt;- biglm(ARRDELAY ~ DISTANCE + DEPDELAY, dat)
      mod
    });
print(mod)
mod=ore.pull(mod)
print(mod)
</pre></div>
<!-- class="sect2" -->
<a id="CEGBGFAH"></a>
<div id="OREUG165" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Build a Series of Regression <a id="sthref110"></a>Models Using Data Parallelism</h3>
<p>This example illustrates <span class="bold">database-driven data parallelism</span> at work in building a series of regression models using a CRAN package. One model is built per unique value of a factor. The database orchestrates parallel and concurrent building of the models, one per factor and bringing the list of all models built to the user desktop for further analysis:</p>
<pre>modList &lt;- ore.groupApply(
  # Organize input to the R script &ndash; This is always an Oracle R Enterprise   
  # data frame
   X=ONTIME_S,
  # Specify the grouping column. Here we request one model per unique value of
  # ONTIME_S$DEST
   INDEX=ONTIME_S$DEST,
  # Model building code goes inside the closure. Input and grouping 
  # conditions can be referenced as parameters to the function
    function(x, param) {
     library(biglm)
     biglm(ARRDELAY ~ DISTANCE + DEPDELAY, x)
     });

   modList_local &lt;- ore.pull(modList)
# Print the model for just one destination - BOSTON
summary(modList_local$BOS)
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CEGIJGGI"></a>
<div id="OREUG166" class="sect1">
<h2 class="sect1">Oracle R Enterprise <a id="sthref111"></a>Additional R Functions</h2>
<p>These functions are available to enable richer statistical analysis. See the Oracle R Enterprise Sample Library described in <a href="#CEGGIDFI">Oracle R Enterprise Examples</a> for usage examples of each function. The functions all operate on an Oracle R Enterprise data frame:</p>
<ul>
<li>
<p><code>ore.summary</code>: Enables powerful multiple aggregations of columns</p>
</li>
<li>
<p><code>ore.rank</code>: Enables flexible ranking across multiple columns</p>
</li>
<li>
<p><code>ore.sort</code>: Enables flexible sorting along one or more columns</p>
</li>
<li>
<p><code>ore.corr</code>: Enables correlation analysis of numeric columns</p>
</li>
<li>
<p><code>ore.crosstab</code>: Enables cross-column analysis</p>
</li>
<li>
<p><code>ore.freq</code>: Enables cross tabulation analysis of numeric columns</p>
</li>
<li>
<p><a href="predict.htm#BABEGAGC">ore.predict for R Models</a> allows you to predict using R models with database- resident data.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="CEGGJGDB"></a>
<div id="OREUG167" class="sect1">
<h2 class="sect1">Oracle R Enterprise <a id="sthref112"></a>SQL Functions</h2>
<p>Oracle R Enterprise users who are allowed to execute R code via SQL queries must be granted the RQROLE role.</p>
<p>To enable execution of an R script in the database (lights-out processing), Oracle R Enterprise provides variants of <code>ore.doEval()</code>, <code>ore.groupApply()</code>, and <code>ore.indexApply()</code> in SQL. (<code>ore.doEval()</code>, <code>ore.groupApply()</code>, and <code>ore.indexApply()</code> are described in <a href="#CEGGAJAC">Oracle R Enterprise Database-Embedded R Engine</a>.)</p>
<p>The SQL functions are</p>
<ul>
<li>
<p><code>rqTableEval()</code></p>
</li>
<li>
<p><code>rqEval()</code></p>
</li>
<li>
<p><code>rqRowEval()</code></p>
</li>
</ul>
<p>You can also code an <a href="#CEGJJCID">rqGroupEval() Function</a>.</p>
<p>The <code>rq*:Eval()</code>functions have the same syntax:</p>
<pre>rq*Eval(
     cursor(select * from table-1,
     cursor(select * from table-2,
     &#39;select &lt;column list&gt; from table-3 t&#39;,
     &lt;grouping col-name from table-1 or num_rows&gt;,
      &#39;function(x,param) {
        registered-R-code
     ] &#39;)
</pre>
<p>where</p>
<ul>
<li>
<p>The first cursor is the input cursor: Input is passed as a whole table, group, or one row as a time to the R closure described in the fourth parameter.</p>
</li>
<li>
<p>The second cursor is the parameters cursor: One value can be passed (that is, collection of the models to be implemented.</p>
</li>
<li>
<p>The query specifies the output table definition; if this parameter is NULL, output is a BLOB; output can also be XML.</p>
</li>
<li>
<p><code>grouping col-name</code> is optional; it provides the name of the grouping column</p>
</li>
<li>
<p><code>num_rows</code> is optional; it provides then number of rows to provide to the functions at one time.</p>
</li>
<li>
<p><code>registeredR-code</code> is a registered version of the R function to execute. See <a href="#CEGHJFDJ">Registering R Scripts</a> for details.</p>
</li>
</ul>
<p>The following examples illustrate using these functions:</p>
<ul>
<li>
<p>This example uses all rows from the table <code>fish</code> as input to the R function that takes no other parameters and produces <code>output</code> that contains all input data plus the ROWSUM of values.</p>
<p>Note that both <code>input(x)</code> and parameters (<code>param</code>) to the R function is optional.</p>
<pre>select * from table(rqTableEval(
  cursor(select * from fish),
  NULL,
  &#39;select t.*, 1 rowsum from fish t&#39;,
  &#39;function(x, param) {
    dat &lt;- data.frame(x, stringsAsFactors=F)
    cbind(dat, ROWSUM = apply(dat,1,sum))
  }&#39;));
</pre></li>
<li>
<p>This example illustrates passing n=1 (4th parameter) row at a time from the table <code>fish</code> to the R function. No parameters are required by the function. The function generates ROWSUM which is added as an extra column to <code>fish</code> in the output.</p>
<pre>select * from table(rqRowEval(
  cursor(select * from fish),
  NULL,
 &#39;select t.*, 1 rowsum from fish t&#39;,
  1,
  &#39;function(x, param) {
    dat &lt;- data.frame(x, stringsAsFactors=F)
    cbind(dat, ROWSUM = apply(dat,1,sum)+10)
  }&#39;));
</pre></li>
</ul>
<a id="CEGJJCID"></a>
<div id="OREUG168" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">rqGroupEval() <a id="sthref113"></a>Function</h3>
<p>There is no <code>rqGroupEval</code>() function as such. You must define a private version of <code>rqGroupEval</code>() based on the data and grouping column. This is the limitation of the table function infrastructure.</p>
<p>Here is an example based on the ONTIME_S sample data. The data cursor uses all data, but you could also define cursors that use some columns using PL/SQL records. Then you must define as many table functions as the number of grouping columns that you are interested in using for a particular data cursor:</p>
<pre>CREATE PACKAGE ontimePkg AS
  TYPE cur IS REF CURSOR RETURN ontime_s%ROWTYPE;
END ontimePkg;
/
 
CREATE FUNCTION ontimeGroupEval(
  inp_cur  ontimePkg.cur,
  par_cur  SYS_REFCURSOR,
  out_qry  VARCHAR2,
  grp_col  VARCHAR2,
  exp_txt  CLOB)
RETURN SYS.AnyDataSet
PIPELINED PARALLEL_ENABLE (PARTITION inp_cur BY HASH (month))
CLUSTER inp_cur BY (month)
USING rqGroupEvalImpl;
/
</pre>
<p>At this time, only one grouping column is supported. If you have multiple columns you combine the columns into one column and use the new column as a grouping column. PARALLEL_ENABLE clause is optional but CLUSTER BY is not.</p>
</div>
<!-- class="sect2" -->
<a id="CEGHJFDJ"></a>
<div id="OREUG169" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Registering <a id="sthref114"></a><a id="sthref115"></a>R Scripts</h3>
<p>For security purposes, you must first register the R script under some system unique name and use new name instead of the actual script in the call to <code>rq*Eval</code> table functions.</p>
<p>There are two administrative functions that create and drop scripts and a view that lists scripts:</p>
<ul>
<li>
<p><code>sys.rqScriptCreate</code></p>
</li>
<li>
<p><code>sys.rqScriptDrop</code></p>
</li>
<li>
<p><code>sys.rq_scripts</code> view allows you to list and use scripts that were created</p>
</li>
</ul>
<p>The scripts and the view require grants as described in <a href="#CEGJHEEH">Roles Required to Create and Use Scripts</a>.</p>
<p>Here is an example of registering the scripts and using the registered scripts:</p>
<pre>begin
  sys.rqScriptCreate(&#39;tmrqfun2&#39;,
&#39;function() {
ID &lt;- 1:10
res &lt;- data.frame(ID = ID, RES = ID / 100)
res
}&#39;);
end;
/
 
select *
  from table(rqEval(
        NULL,
       &#39;select 1 id, 1 res from dual&#39;,
       &#39;tmrqfun2&#39;));
 
begin
  sys.rqScriptDrop(&#39;tmrqfun2&#39;);
end;
</pre>
<a id="CEGJHEEH"></a>
<div id="OREUG170" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Roles Required to Create and Use Scripts</h4>
<p>To execute <code>sys.rqScriptCreate</code> and <code>sys.rqScriptDrop</code>, you must be granted the administrative role RQADMIN.</p>
<p>Select privilege for the <code>sys.rq_scripts</code> view is granted to RQROLE role.</p>
<p>The RQADMIN and RQROLE role are created when you install the server; see <a href="install.htm#BABGCJFH">Administrative Roles</a>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CEGGIDFI"></a>
<div id="OREUG171" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Oracle R Enterprise <a id="sthref116"></a>Examples</h2>
<p>Oracle R Enterprise is shipped with a collection of examples that illustrate how to use Oracle R Enterprise. These examples are a collection of self-contained R scripts.</p>
<p>Most of the sample programs use the data frame <code>iris</code>, which is included in the R distribution. <code>iris</code> is loaded into a table as described in <a href="#CEGECFEA">Load Data Frame to a Table</a>.</p>
<p>The rest of this section describes two examples in detail and includes a list of all examples:</p>
<ul>
<li>
<p><a href="#CEGECFEA">Load Data Frame to a Table</a></p>
</li>
<li>
<p><a href="#CEGEBECD">Handle NULL Values Using airquality</a></p>
</li>
<li>
<p><a href="#CEGCADBI">List of Examples</a></p>
</li>
</ul>
<a id="CEGECFEA"></a>
<div id="OREUG172" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Load Data <a id="sthref117"></a>Frame to a Table</h3>
<p>Follow these steps to load an R data frame to a database table:</p>
<ol>
<li>
<p>Start R, load the ORE packages via library(ORE), and then connect to the database. The latter steps are automatic if Rprofile is in place.</p>
</li>
<li>
<p>Most of these examples use the R data frame <code>iris</code>. iris is shipped with R. Use the R command <code>class</code> to verify that <code>iris</code> is an R data frame:</p>
<pre>R&gt; class(iris)
[1] &#34;data.frame&#34;
</pre>
<p><code>iris</code> consist of measurements of parts of iris flowers. Use the R command <code>head</code> to see a small sample of the data in <code>iris</code>.</p>
<pre>R&gt; head(iris)
      Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa
4          4.6         3.1          1.5         0.2  setosa
5          5.0         3.6          1.4         0.2  setosa
6          5.4         3.9          1.7         0.4  setosa
</pre></li>
<li>
<p>Now load the data frame <code>iris</code> into the database that you are connected to.</p>
<p>In these examples, the database table version of <code>iris</code> is named IRIS_TABLE. Drop IRIS_TABLE to make sure that no table of this name exists in the connected schema:</p>
<pre>ore.drop(table = &#34;IRIS_TABLE&#34;)
</pre>
<p>If IRIS_TABLE doesn&#39;t exist, you do not get a message.</p>
</li>
<li>
<p>Now create a database table with the data contained in <code>iris</code>:</p>
<pre>ore.create(iris, table = &#34;IRIS_TABLE&#34;)
</pre>
<p>Use <code>ore.ls()</code> to verify that the table was created:</p>
<pre>R&gt; ore.ls()
[1] &#34;IRIS_TABLE&#34; &#34;NARROW&#34;     &#34;ONTIME_S&#34; 
</pre></li>
<li>
<p>IRIS_TABLE is a database-resident table with just metadata on the R side:</p>
<pre>R&gt; class(IRIS_TABLE)
[1] &#34;ore.frame&#34;
attr(,&#34;package&#34;)
[1] &#34;OREbase&#34;
</pre></li>
<li>
<p>Use <code>head</code> to see the column names and the first few values in IRIS_TABLE:</p>
<pre>R&gt; head(IRIS_TABLE)
  SEPAL_LENGTH SEPAL_WIDTH PETAL_LENGTH PETAL_WIDTH SPECIES
0          5.1         3.5          1.4         0.2  setosa
1          4.9         3.0          1.4         0.2  setosa
2          4.7         3.2          1.3         0.2  setosa
3          4.6         3.1          1.5         0.2  setosa
4          5.0         3.6          1.4         0.2  setosa
5          5.4         3.9          1.7         0.4  setosa
</pre></li>
<li>
<p>Use mode to see the data type of the column SPECIES.</p>
<pre>mode(IRIS_TABLE$SPECIES)
[1] &#34;raw&#34;
</pre></li>
<li>
<p>Some algorithms only work if all of the data is numerical. Follow these steps to create IRIS_TABLE_N that does not contain SPECIES, the nonnumeric column:</p>
<pre>IRIS_TABLE_N=IRIS_TABLE[,c(&#34;SEPAL_LENGTH&#34;, &#34;SEPAL_WIDTH&#34;,  &#34;PETAL_LENGTH&#34;, &#34;PETAL_WIDTH&#34;)]
</pre></li>
</ol>
<p>You can use R functions to analyze the data in the table. Here are some simple examples taken from the example <code>basic.R</code>:</p>
<ul>
<li>
<p>Use <code>unique</code> to get a list of the unique entries in a column. This example finds the unique SPECIES:</p>
<pre>R&gt; unique(IRIS_TABLE$SPECIES)
[1] setosa     versicolor virginica 
Levels: setosa versicolor virginica
</pre></li>
<li>
<p>Find the minimum, maximum, and mean of PETAL_LENGTH:</p>
<pre>R&gt; min(IRIS_TABLE$PETAL_LENGTH)
[1] 1
R&gt; max(IRIS_TABLE$PETAL_LENGTH)
[1] 6.9
R&gt; mean(IRIS_TABLE$PETAL_LENGTH)
[1] 3.758
</pre></li>
</ul>
<p>If you need information about an R function, use the command <code>help(function-name)</code>.</p>
</div>
<!-- class="sect2" -->
<a id="CEGEBECD"></a>
<div id="OREUG173" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Handle NULL <a id="sthref118"></a>Values Using airquality</h3>
<p>The sample <code>null.R</code> is the only sample that does not use <code>iris</code> as data. <code>null.R</code> compares the handling of NULLs in SQL with the handling of NAs in R.</p>
<p>In R, NA is a logical constant of length 1 which contains a missing value indicator. In the database, null refers to the absence of a value in a column of a row. Nulls indicate missing, unknown, or inapplicable data.</p>
<p>Follow these steps to execute the sample:</p>
<ol>
<li>
<p>This example uses the data frame <code>airquality</code>. Verify that the data set is a data frame and look at the few rows of the data frame:</p>
<pre>R&gt; class(airquality)
[1] &#34;data.frame&#34;
R&gt; head(airquality)
  Ozone Solar.R Wind Temp Month Day
1    41     190  7.4   67     5   1
2    36     118  8.0   72     5   2
3    12     149 12.6   74     5   3
4    18     313 11.5   62     5   4
5    NA      NA 14.3   56     5   5
6    28      NA 14.9   66     5   6
</pre></li>
<li>
<p>Load <code>airquality</code> into the database as &#34;AIRQUALITY&#34;:</p>
<pre>ore.drop(table = &#34;AIRQUALITY&#34;)
ore.create(airquality, table = &#34;AIRQUALITY&#34;)
</pre>
<p>Use <code>ore.ls()</code> to verify that the table was created. If you wish, use <code>class(AIRQUALITY)</code> to verify that <code>AIRQUALITY</code> is a database-resident table with just metadata on the R side.</p>
</li>
<li>
<p>Examine how R handles NAs. Return all observations where ozone &lt; 30:</p>
<pre>R&gt; nrow(airquality[airquality$Ozone &lt; 30,])[1] 92
</pre>
<p>Compare this with the results when NAs are explicitly excluded:</p>
<pre>R&gt; nrow(airquality[airquality$Ozone &lt; 30 &amp; !is.na(airquality$Ozone),])
[1] 55
</pre></li>
<li>
<p>The default behavior for SQL tables is to exclude NULLS in output:</p>
<pre>nrow(AIRQUALITY[AIRQUALITY$OZONE &lt; 30,])
[1] 55
</pre>
<p>To handle NULLs the same way that R handles NA, request the behavior explicitly:</p>
<pre>options(ore.na.extract = TRUE)
nrow(AIRQUALITY[AIRQUALITY$OZONE &lt; 30,])
[1] 92
</pre></li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CEGCADBI"></a>
<div id="OREUG174" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">List of <a id="sthref119"></a>Examples</h3>
<p>These scripts have been added as demos to the ORE package.</p>
<p>To access a complete listing of them type</p>
<pre>R&gt; demo(package = &#34;ORE&#34;)
</pre>
<p>To run one of these scripts, specify the name of the demo in a <code>demo</code> function call. For example, to run <code>aggregate.R</code>, type</p>
<pre>R&gt; demo(&#34;aggregate&#34;, package = &#34;ORE&#34;)
</pre>
<p>These examples are shipped with Oracle R Enterprise:</p>
<pre>table_apply.R   Execute R code on all rows of a table passed in at once
aggregate.R     Demonstrates aggregations. See also summary.R
analysis.R      Demonstrates basic analysis and data processing operations
basic.R         Demonstrates basic connectivity to database
binning.R       Demonstrates binning in R
columnfns.R     Demonstrates use of column functions
corr.R          Correlation matrix (Pearson&#39;s, Spearman/Kendalls)
crosstab.R      Frequency cross-tabulations. Also see freq.R
derived.R       Handling derived columns
distributions.R Distribution, Density, and Quantile Functions
doEval.R        Demonstrates support for database-enabled parallel simulations
freqanalysis.R  Frequency cross-tabulations. Also see crosstab.R
graphics.R      Demonstrates visual analysis (boxplot, histogram)
group_apply.R   Execute R code for different sets of rows, one set per group
hypothesis.R    Hypothesis Testing Functions(binomial, chi square, T test, etc.)
matrix.R        Matrix operations
nulls.R         Demonstrates handling of nulls in SQL vs. NAs in R
push_pull.R     Demonstrates collaborative processing between database and client
rank.R          Ranking of observations (ranking, handling ties, etc.)
reg.R           Multivariate Regression
row_apply.R     Execute R code on each row
sql_like.R      Demonstrates how R commands map to SQL operations
stepwise.R      Stepwise Multivariate Regression
summary.R       Demonstrates summary functionality
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4979">
<tr>
<td class="cellalignment4986">
<table class="cellalignment4984">
<tr>
<td class="cellalignment4983"><a href="install.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4983"><a href="predict.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4988">
<table class="cellalignment4982">
<tr>
<td class="cellalignment4983"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4983"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4983"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4983"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4983"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4983"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>