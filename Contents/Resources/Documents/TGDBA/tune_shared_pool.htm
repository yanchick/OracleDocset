<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-106651"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Tuning%20the%20Shared%20Pool%20and%20the%20Large%20Pool"></a><title>Tuning the Shared Pool and the Large Pool</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="dcterms.created" content="2017-01-18T01:24:57Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Performance Tuning Guide"/>
<meta name="dcterms.identifier" content="E49058-08"/>
<meta name="dcterms.isVersionOf" content="TGDBA"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2013, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="tune_buffer_cache.htm" title="Previous" type="text/html"/>
<link rel="Next" href="tune_result_cache.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E49058-08.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-2EB3A7A0-881D-42AA-A299-DD118FF2BB92"></a> <span id="PAGE" style="display:none;">21/27</span> <!-- End Header -->
<a id="TGDBA558"></a>
<h1 id="TGDBA-GUID-2EB3A7A0-881D-42AA-A299-DD118FF2BB92" class="sect1"><span class="enumeration_chapter">14</span> Tuning the Shared Pool and the Large Pool</h1>
<div>
<p>This chapter describes how to tune the shared pool and the large pool. If you are using automatic memory management to manage the database memory on your system, or automatic shared memory management to configure the Shared Global Area (SGA), there is no need to manually tune the shared pool and the large pool as described in this chapter.</p>
<p>This chapter contains the following topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="tune_shared_pool.htm#GUID-861E86EA-60DB-431A-BE3A-7AEFA2E27F94">About the Shared Pool</a></p>
</li>
<li>
<p><a href="tune_shared_pool.htm#GUID-901C4010-2B6A-4E50-A02E-77830BB7E70D">Using the Shared Pool</a></p>
</li>
<li>
<p><a href="tune_shared_pool.htm#GUID-5823285C-A728-4006-8813-41BB92928F73">Configuring the Shared Pool</a></p>
</li>
<li>
<p><a href="tune_shared_pool.htm#GUID-096F2CDD-B3EE-4124-BBE3-F60400600972">Configuring the Large Pool</a></p>
</li>
</ul>
</div>
<a id="TGDBA559"></a>
<div class="props_rev_3"><a id="GUID-861E86EA-60DB-431A-BE3A-7AEFA2E27F94"></a>
<h2 id="TGDBA-GUID-861E86EA-60DB-431A-BE3A-7AEFA2E27F94" class="sect2">About the Shared Pool</h2>
<div>
<p>Oracle Database uses the shared pool to cache many different types of data. Cached data includes the textual and executable forms of PL/SQL blocks and SQL statements, dictionary cache data, result cache data, and other data.</p>
<p>This section describes the shared pool and contains the following topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="tune_shared_pool.htm#GUID-1C8D7788-CBDA-4951-9F79-9C0550EE935E">Benefits of Using the Shared Pool</a></p>
</li>
<li>
<p><a href="tune_shared_pool.htm#GUID-E33B69A7-C052-4DBB-AD31-424ECC871C6B">Shared Pool Concepts</a></p>
</li>
</ul>
</div>
<a id="TGDBA560"></a>
<div class="props_rev_3"><a id="GUID-1C8D7788-CBDA-4951-9F79-9C0550EE935E"></a>
<h3 id="TGDBA-GUID-1C8D7788-CBDA-4951-9F79-9C0550EE935E" class="sect3">Benefits of Using the Shared Pool</h3>
<div>
<p>Proper use and sizing of the shared pool can reduce resource consumption in at least four ways:</p>
<ul style="list-style-type: disc;">
<li>
<p>If the SQL statement is in the shared pool, parse overhead is avoided, resulting in reduced CPU resources on the system and elapsed time for the end user.</p>
</li>
<li>
<p>Latching resource usage is significantly reduced, resulting in greater scalability.</p>
</li>
<li>
<p>Shared pool memory requirements are reduced, because all applications use the same pool of SQL statements and dictionary resources.</p>
</li>
<li>
<p>I/O is reduced, because dictionary elements that are in the shared pool do not require disk access.</p>
</li>
</ul>
</div>
</div>
<a id="TGDBA561"></a>
<div class="props_rev_3"><a id="GUID-E33B69A7-C052-4DBB-AD31-424ECC871C6B"></a>
<h3 id="TGDBA-GUID-E33B69A7-C052-4DBB-AD31-424ECC871C6B" class="sect3">Shared Pool Concepts</h3>
<div>
<p>The main components of the shared pool include:</p>
<ul style="list-style-type: disc;">
<li>
<p>Library cache</p>
<p>The library cache stores the executable (parsed or compiled) form of recently referenced SQL and PL/SQL code.</p>
</li>
<li>
<p>Data dictionary cache</p>
<p>The data dictionary cache stores data referenced from the data dictionary.</p>
</li>
<li>
<p>Server result cache (depending on the configuration)</p>
<p>The server result cache is an optional cache that stores query and PL/SQL function results within the shared pool. For information about the server result cache, see <span class="q">&#34;<a href="tune_result_cache.htm#GUID-9C00174C-9046-4EB1-BC1C-5E7FA03FB9AA">About the Result Cache</a>&#34;</span>.</p>
</li>
</ul>
<p>Many of the caches in the shared pool&mdash;including the library cache and the dictionary cache&mdash;automatically increase or decrease in size, as needed. Old entries are aged out to accommodate new entries when the shared pool runs out of space.</p>
<p>A cache miss on the library cache or data dictionary cache is more expensive than a miss on the buffer cache. For this reason, the shared pool should be sized to ensure that frequently-used data is cached.</p>
<p>Several features require large memory allocations in the shared pool, such as shared server, parallel query, or Recovery Manager. Oracle recommends using a separate memory area&mdash;the large pool&mdash;to segregate the System Global Area (SGA) memory used by these features.</p>
<p>Allocation of memory from the shared pool is performed in chunks. This chunking enables large objects (over 5 KB) to be loaded into the cache without requiring a single contiguous area. In this way, the database reduces the possibility of running out of contiguous memory due to fragmentation.</p>
<p>Java, PL/SQL, or SQL cursors may sometimes make allocations out of the shared pool that are larger than 5 KB. To enable these allocations to occur more efficiently, Oracle Database segregates a small amount of the shared pool. The segregated memory, called the reserved pool, is used if the shared pool runs out of space.</p>
<p>The following sections provide more details about the main components of the shared pool:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="tune_shared_pool.htm#GUID-CB999004-AA94-47FB-A7A1-662239450959">Library Cache Concepts</a></p>
</li>
<li>
<p><a href="tune_shared_pool.htm#GUID-ECD8D7C1-02C2-45B1-8D75-1F42F85FB673">Data Dictionary Cache Concepts</a></p>
</li>
<li>
<p><a href="tune_shared_pool.htm#GUID-BE6DFC00-A436-4908-A711-9127FABB6809">SQL Sharing Criteria</a></p>
</li>
</ul>
</div>
<a id="TGDBA562"></a>
<div class="props_rev_3"><a id="GUID-CB999004-AA94-47FB-A7A1-662239450959"></a>
<h4 id="TGDBA-GUID-CB999004-AA94-47FB-A7A1-662239450959" class="sect4">Library Cache Concepts</h4>
<div>
<p>The library cache stores executable forms of SQL cursors, PL/SQL programs, and Java classes, which are collectively referred to as the application code. This section focuses on tuning as it relates to the application code.</p>
<p>When the application code is executed, Oracle Database attempts to reuse existing code if it has been executed previously and can be shared. If the parsed representation of the SQL statement exists in the library cache and it can be shared, then the database reuses the existing code. This is known as a soft parse, or a library cache hit. If Oracle Database cannot use the existing code, then the database must build a new executable version of the application code. This is known as a hard parse, or a library cache miss. For information about when SQL and PL/SQL statements can be shared, see <span class="q">&#34;<a href="tune_shared_pool.htm#GUID-BE6DFC00-A436-4908-A711-9127FABB6809">SQL Sharing Criteria</a>&#34;</span>.</p>
<p>In order to perform a hard parse, Oracle Database uses more resources than during a soft parse. Resources used for a soft parse include CPU and library cache latch gets. Resources required for a hard parse include additional CPU, library cache latch gets, and shared pool latch gets. A hard parse may occur on either the parse step or the execute step when processing a SQL statement.</p>
<p>When an application makes a parse call for a SQL statement, if the parsed representation of the statement does not exist in the library cache, then Oracle Database parses the statement and stores the parsed form in the shared pool. To reduce library cache misses on parse calls, ensure that all sharable SQL statements are stored in the shared pool whenever possible.</p>
<p>When an application makes an execute call for a SQL statement, if the executable portion of the SQL statement is aged out (or deallocated) from the library cache to make room for another statement, then Oracle Database implicitly reparses the statement to create a new shared SQL area for it, and executes the statement. This also results in a hard parse. To reduce library cache misses on execution calls, allocate more memory to the library cache.</p>
<p>For more information about hard and soft parsing, see <span class="q">&#34;<a href="pfgrf_design.htm#GUID-B95920ED-53C2-42A7-A53D-9083974A7A1D">SQL Execution Efficiency</a>&#34;</span>.</p>
</div>
</div>
<a id="TGDBA563"></a>
<div class="props_rev_3"><a id="GUID-ECD8D7C1-02C2-45B1-8D75-1F42F85FB673"></a>
<h4 id="TGDBA-GUID-ECD8D7C1-02C2-45B1-8D75-1F42F85FB673" class="sect4">Data Dictionary Cache Concepts</h4>
<div>
<p>Information stored in the data dictionary cache includes:</p>
<ul style="list-style-type: disc;">
<li>
<p>Usernames</p>
</li>
<li>
<p>Segment information</p>
</li>
<li>
<p>Profile data</p>
</li>
<li>
<p>Tablespace information</p>
</li>
<li>
<p>Sequence numbers</p>
</li>
</ul>
<p>The data dictionary cache also stores descriptive information, or metadata, about schema objects. Oracle Database uses this metadata when parsing SQL cursors or during the compilation of PL/SQL programs.</p>
</div>
</div>
<a id="TGDBA564"></a>
<div class="props_rev_3"><a id="GUID-BE6DFC00-A436-4908-A711-9127FABB6809"></a>
<h4 id="TGDBA-GUID-BE6DFC00-A436-4908-A711-9127FABB6809" class="sect4">SQL Sharing Criteria</h4>
<div>
<p>Oracle Database automatically determines whether a SQL statement or PL/SQL block being issued is identical to another statement currently in the shared pool.</p>
<p>To compare the text of the SQL statement to the existing SQL statements in the shared pool, Oracle Database performs the following steps:</p>
<ol>
<li>
<p>The text of the SQL statement is hashed.</p>
<p>If there is no matching hash value, then the SQL statement does not currently exist in the shared pool, and a hard parse is performed.</p>
</li>
<li>
<p>If there is a matching hash value for an existing SQL statement in the shared pool, then the text of the matched statement is compared to the text of the hashed statement to verify if they are identical.</p>
<p>The text of the SQL statements or PL/SQL blocks must be identical, character for character, including spaces, case, and comments. For example, the following statements cannot use the same shared SQL area:</p>
<pre dir="ltr">SELECT * FROM employees;
SELECT * FROM Employees;
SELECT *  FROM employees;
</pre>
<p>Also, SQL statements that differ only in literals cannot use the same shared SQL area. For example, the following statements do not resolve to the same SQL area:</p>
<pre dir="ltr">SELECT count(1) FROM employees WHERE manager_id = 121;
SELECT count(1) FROM employees WHERE manager_id = 247;
</pre>
<p>The only exception to this rule is when the <code>CURSOR_SHARING</code> parameter is set to <code>FORCE</code>, in which case similar statements can share SQL areas. For information about the costs and benefits involved in cursor sharing, see <span class="q">&#34;<a href="tune_shared_pool.htm#GUID-40A8C949-9B20-4217-A730-FE8A910B358F">Sharing Cursors</a>&#34;</span>.</p>
</li>
<li>
<p>The objects referenced in the issued statement are compared to the referenced objects of all existing statements in the shared pool to ensure that they are identical.</p>
<p>References to schema objects in the SQL statements or PL/SQL blocks must resolve to the same object in the same schema. For example, if two users each issue the following SQL statement but they each have their own <code>employees</code> table, then this statement is not considered identical, because the statement references different tables for each user:</p>
<pre dir="ltr">SELECT * FROM employees;
</pre></li>
<li>
<p>Bind variables in the SQL statements must match in name, data type, and length.</p>
<p>For example, the following statements cannot use the same shared SQL area, because the bind variable names are different:</p>
<pre dir="ltr">SELECT * FROM employees WHERE department_id = :department_id;
SELECT * FROM employees WHERE department_id = :dept_id;
</pre>
<p>Many Oracle products, such as Oracle Forms and the precompilers, convert the SQL before passing statements to the database. Characters are uniformly changed to uppercase, white space is compressed, and bind variables are renamed so that a consistent set of SQL statements is produced.</p>
</li>
<li>
<p>The session&#39;s environment must be identical.</p>
<p>For example, SQL statements must be optimized using the same optimization goal.</p>
</li>
</ol>
<div class="infoboxnotealso" id="GUID-BE6DFC00-A436-4908-A711-9127FABB6809__GUID-F540CE9A-05E8-4B4D-8FCC-E39FF54709A9">
<p class="notep1">See Also:</p>
<p><a class="olink REFRN" target="_blank" href="../REFRN/toc.htm"><span class="italic">Oracle Database Reference</span></a> for information about the <code>CURSOR_SHARING</code> initialization parameter</p>
</div>
</div>
</div>
</div>
</div>
<a id="TGDBA565"></a>
<div class="props_rev_3"><a id="GUID-901C4010-2B6A-4E50-A02E-77830BB7E70D"></a>
<h2 id="TGDBA-GUID-901C4010-2B6A-4E50-A02E-77830BB7E70D" class="sect2">Using the Shared Pool</h2>
<div>
<p>An important purpose of the shared pool is to cache the executable versions of SQL and PL/SQL statements. This enables multiple executions of the same SQL or PL/SQL code to be performed without the resources required for a hard parse, which results in significant reductions in CPU, memory, and latch usage.</p>
<p>The shared pool is also able to support unshared SQL in data warehousing applications, which execute low-concurrency, high-resource SQL statements. In this situation, using unshared SQL with literal values is recommended. Using literal values rather than bind variables enables the optimizer to make good column selectivity estimates, thus providing an optimal data access plan.</p>
<p>In a high-currency online transaction processing (OLTP) system, efficient use of the shared pool significantly reduces the probability of parse-related application scalability issues. There are several ways to ensure efficient use of the shared pool and related resources in an OLTP system:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="tune_shared_pool.htm#GUID-5E75A07B-6A65-47E9-BD77-78C9BC93B2FB">Use Shared Cursors</a></p>
</li>
<li>
<p><a href="tune_shared_pool.htm#GUID-CA892C0A-60BB-4E45-AC8D-D80092BEA13A">Use Single-User Logon and Qualified Table Reference</a></p>
</li>
<li>
<p><a href="tune_shared_pool.htm#GUID-E3F2ADA0-18DB-47C2-B1CD-4DEE8E9DEF85">Use PL/SQL</a></p>
</li>
<li>
<p><a href="tune_shared_pool.htm#GUID-9FEE657D-0CB1-451B-8CD3-4FC15E95C9E2">Avoid Performing DDL Operations</a></p>
</li>
<li>
<p><a href="tune_shared_pool.htm#GUID-2951BB9C-FCCE-47C8-B48A-FCCBB63AC141">Cache Sequence Numbers</a></p>
</li>
<li>
<p><a href="tune_shared_pool.htm#GUID-25C7A1B1-CA7F-4812-97E2-95EA558AC778">Control Cursor Access</a></p>
</li>
<li>
<p><a href="tune_shared_pool.htm#GUID-A2FF092A-18CE-46E0-903C-039105272CDC">Maintain Persistent Connections</a></p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-901C4010-2B6A-4E50-A02E-77830BB7E70D__GUID-F274D67C-233C-41DA-A095-34F0A7D2BB73">
<p class="notep1">See Also:</p>
<p><a class="olink DWHSG" target="_blank" href="../DWHSG/toc.htm"><span class="italic">Oracle Database Data Warehousing Guide</span></a> for information about using unshared SQL in data warehousing applications</p>
</div>
</div>
<a id="TGDBA566"></a>
<div class="props_rev_3"><a id="GUID-5E75A07B-6A65-47E9-BD77-78C9BC93B2FB"></a>
<h3 id="TGDBA-GUID-5E75A07B-6A65-47E9-BD77-78C9BC93B2FB" class="sect3">Use Shared Cursors</h3>
<div>
<p>Reuse of shared SQL for multiple users running the same application avoids hard parsing. Soft parses provide a significant reduction in the use of resources, such as the shared pool and library cache latches.</p>
<div class="section">
<p class="subhead3">To use shared cursors:</p>
<ul style="list-style-type: disc;">
<li>
<p>Use bind variables instead of literals in SQL statements whenever possible.</p>
<p>For example, the following two SQL statements cannot use the same shared area because they do not match character for character:</p>
<pre dir="ltr">SELECT employee_id FROM employees WHERE department_id = 10;
SELECT employee_id FROM employees WHERE department_id = 20;
</pre>
<p>Replacing the literals with a bind variable results in only one SQL statement which can be executed twice:</p>
<pre dir="ltr">SELECT employee_id FROM employees WHERE department_id = :dept_id;
</pre>
<p>For existing applications where rewriting the code to use bind variables is not possible, use the <a id="d35703e589" class="indexterm-anchor"></a><code>CURSOR_SHARING</code> initialization parameter to avoid some of the hard parse overhead, as described in <span class="q">&#34;<a href="tune_shared_pool.htm#GUID-40A8C949-9B20-4217-A730-FE8A910B358F">Sharing Cursors</a>&#34;</span>.</p>
</li>
<li>
<p>Avoid application designs that result in large numbers of users issuing dynamic, unshared SQL statements.</p>
<p>Typically, the majority of data required by most users can be satisfied using preset queries. Use dynamic SQL where such functionality is required.</p>
</li>
<li>
<p>Ensure that users of the application do not change the optimization approach and goal for their individual sessions.</p>
</li>
<li>
<p>Establish the following policies for application developers:</p>
<ul style="list-style-type: disc;">
<li>
<p>Standardize naming conventions for bind variables and spacing conventions for SQL statements and PL/SQL blocks.</p>
</li>
<li>
<p>Consider using stored procedures whenever possible.</p>
<p>Multiple users issuing the same stored procedure use the same shared PL/SQL area automatically. Because stored procedures are stored in a parsed form, their use reduces run-time parsing.</p>
</li>
</ul>
</li>
<li>
<p>For SQL statements which are identical but are not being shared, query the <code>V$SQL_SHARED_CURSOR</code> view to determine why the cursors are not shared.</p>
<p>This includes optimizer settings and bind variable mismatches.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<div class="infoboxnotealso" id="GUID-5E75A07B-6A65-47E9-BD77-78C9BC93B2FB__GUID-41BB419C-DEC9-4921-89C5-2C0BCCC2AB25">
<p class="notep1">See Also:</p>
<p><a class="olink CNCPT015" target="_blank" href="../CNCPT/sqllangu.htm#CNCPT015"><span class="italic">Oracle Database Concepts</span></a> for information about shared cursors</p>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="TGDBA567"></a>
<div class="props_rev_3"><a id="GUID-CA892C0A-60BB-4E45-AC8D-D80092BEA13A"></a>
<h3 id="TGDBA-GUID-CA892C0A-60BB-4E45-AC8D-D80092BEA13A" class="sect3">Use Single-User Logon and Qualified Table Reference</h3>
<div>
<p>In large OLTP systems where users log in to the database with their own user logon, qualifying the segment owner explicitly instead of using public synonyms significantly reduces the number of entries in the dictionary cache.</p>
<p>An alternative to qualifying table names is to connect to the database through a single user logon, rather than individual user logons. User-level validation can take place locally on the middle tier.</p>
</div>
</div>
<a id="TGDBA568"></a>
<div class="props_rev_3"><a id="GUID-E3F2ADA0-18DB-47C2-B1CD-4DEE8E9DEF85"></a>
<h3 id="TGDBA-GUID-E3F2ADA0-18DB-47C2-B1CD-4DEE8E9DEF85" class="sect3">Use PL/SQL</h3>
<div>
<p>Using stored PL/SQL packages can overcome many of the scalability issues for systems with thousands of users, each with individual user logon and public synonyms. This is because a package is executed as the owner, rather than the caller, which reduces the dictionary cache load considerably.</p>
<div class="infobox-note" id="GUID-E3F2ADA0-18DB-47C2-B1CD-4DEE8E9DEF85__GUID-91D40304-7A45-476C-8895-3DBEE5D8C1D7">
<p class="notep1">Note:</p>
<p>Oracle encourages the use of definer&#39;s rights packages to overcome scalability issues. The benefits of reduced dictionary cache load are not as great with invoker&#39;s rights packages.</p>
</div>
</div>
</div>
<a id="TGDBA569"></a>
<div class="props_rev_3"><a id="GUID-9FEE657D-0CB1-451B-8CD3-4FC15E95C9E2"></a>
<h3 id="TGDBA-GUID-9FEE657D-0CB1-451B-8CD3-4FC15E95C9E2" class="sect3">Avoid Performing DDL Operations</h3>
<div>
<p>Avoid performing DDL operations on high-usage segments during peak hours. Performing DDL operations on these segments often results in the dependent SQL being invalidated and reparsed in a later execution.</p>
</div>
</div>
<a id="TGDBA570"></a>
<div class="props_rev_3"><a id="GUID-2951BB9C-FCCE-47C8-B48A-FCCBB63AC141"></a>
<h3 id="TGDBA-GUID-2951BB9C-FCCE-47C8-B48A-FCCBB63AC141" class="sect3">Cache Sequence Numbers</h3>
<div>
<p>Allocating sufficient cache space for frequently updated sequence numbers significantly reduces the frequency of dictionary cache locks, which improves scalability.</p>
<div class="section">
<p class="subhead3">To configure the number of cache entries for each sequence:</p>
<ul style="list-style-type: disc;">
<li>
<p>Use the <code>CACHE</code> keyword in the <code>CREATE</code> <code>SEQUENCE</code> or <code>ALTER</code> <code>SEQUENCE</code> statement.</p>
</li>
</ul>
</div>
<!-- class="section" --></div>
</div>
<a id="TGDBA571"></a>
<div class="props_rev_3"><a id="GUID-25C7A1B1-CA7F-4812-97E2-95EA558AC778"></a>
<h3 id="TGDBA-GUID-25C7A1B1-CA7F-4812-97E2-95EA558AC778" class="sect3">Control Cursor Access</h3>
<div>
<p><a id="d35703e843" class="indexterm-anchor"></a><a id="d35703e847" class="indexterm-anchor"></a><a id="d35703e851" class="indexterm-anchor"></a>Depending on your application tool, you can control how frequently the application performs parse calls by controlling cursor access.</p>
<p>The frequency with which the application either closes cursors or reuses existing cursors for new SQL statements affects the amount of memory used by a session, and often the amount of parsing performed by that session. An application that closes cursors or reuses cursors (for a different SQL statement) does not require as much session memory as an application that keeps cursors open. Conversely, that same application may need to perform more parse calls, using more CPU and database resources</p>
<p>Cursors associated with SQL statements that are not executed frequently can be closed or reused for other statements, because the likelihood of re-executing (and reparsing) that statement is low. Extra parse calls are required when a cursor containing a SQL statement that will be re-executed is closed or reused for another statement. Had the cursor remained open, it may have been reused without the overhead of issuing a parse call.</p>
<p>The ways in which you control cursor access depends on your application development tool. This section describes the methods used for Oracle Database tools:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="tune_shared_pool.htm#GUID-F3588C24-9678-4B7D-AF51-AF8D8277089A">Controlling Cursor Access Using OCI</a></p>
</li>
<li>
<p><a href="tune_shared_pool.htm#GUID-CCB48FA6-C4FE-4853-9CE6-0826433ED341">Controlling Cursor Access Using Oracle Precompilers</a></p>
</li>
<li>
<p><a href="tune_shared_pool.htm#GUID-46E76F9C-71A7-4229-BCCE-A617E74CB2F6">Controlling Cursor Access Using SQLJ</a></p>
</li>
<li>
<p><a href="tune_shared_pool.htm#GUID-E83799DC-CA41-4E44-B463-1D4E4A470591">Controlling Cursor Access Using JDBC</a></p>
</li>
<li>
<p><a href="tune_shared_pool.htm#GUID-F79E99F4-B75A-4066-8CA8-BA37BDC1A119">Controlling Cursor Access Using Oracle Forms</a></p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-25C7A1B1-CA7F-4812-97E2-95EA558AC778__GUID-0B7DC4A1-39C5-4EFC-A9B1-D5AE0D719272">
<p class="notep1">See Also:</p>
<p>The tool-specific documentation for information about each tool</p>
</div>
</div>
<a id="TGDBA572"></a>
<div class="props_rev_3"><a id="GUID-F3588C24-9678-4B7D-AF51-AF8D8277089A"></a>
<h4 id="TGDBA-GUID-F3588C24-9678-4B7D-AF51-AF8D8277089A" class="sect4">Controlling Cursor Access Using OCI</h4>
<div>
<p>When using Oracle Call Interface (OCI), do not close and reopen cursors that you will be re-executing. Instead, leave the cursors open, and change the literal values in the bind variables before execution.</p>
<p>Avoid reusing statement handles for new SQL statements when the existing SQL statement will be re-executed in the future.</p>
</div>
</div>
<a id="TGDBA573"></a>
<div class="props_rev_3"><a id="GUID-CCB48FA6-C4FE-4853-9CE6-0826433ED341"></a>
<h4 id="TGDBA-GUID-CCB48FA6-C4FE-4853-9CE6-0826433ED341" class="sect4">Controlling Cursor Access Using Oracle Precompilers</h4>
<div>
<p>When using the <a id="d35703e965" class="indexterm-anchor"></a>Oracle precompilers, you can control when cursors are closed by setting precompiler clauses. In Oracle mode, the clauses are as follow:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>HOLD_CURSOR = YES</code> <a id="d35703e976" class="indexterm-anchor"></a></p>
</li>
<li>
<p><code>RELEASE_CURSOR = NO</code> <a id="d35703e983" class="indexterm-anchor"></a></p>
</li>
<li>
<p><code>MAXOPENCURSORS =</code> <span class="italic"><code>desired_value</code></span> <a id="d35703e993" class="indexterm-anchor"></a></p>
</li>
</ul>
<p>The precompiler clauses can be specified on the precompiler command line or within the precompiler program. Oracle recommends that you not use ANSI mode, in which the values of <code>HOLD_CURSOR</code> and <code>RELEASE_CURSOR</code> are switched.</p>
<div class="infoboxnotealso" id="GUID-CCB48FA6-C4FE-4853-9CE6-0826433ED341__GUID-4697CE18-FDDD-4ABE-97C8-28C477A6FE35">
<p class="notep1">See Also:</p>
<p>Your language&#39;s precompiler manual for information about these clauses</p>
</div>
</div>
</div>
<a id="TGDBA574"></a>
<div class="props_rev_3"><a id="GUID-46E76F9C-71A7-4229-BCCE-A617E74CB2F6"></a>
<h4 id="TGDBA-GUID-46E76F9C-71A7-4229-BCCE-A617E74CB2F6" class="sect4">Controlling Cursor Access Using SQLJ</h4>
<div>
<p>Prepare the SQL statement, then re-execute the statement with the new values for the bind variables. The cursor stays open for the duration of the session.</p>
</div>
</div>
<a id="TGDBA575"></a>
<div class="props_rev_3"><a id="GUID-E83799DC-CA41-4E44-B463-1D4E4A470591"></a>
<h4 id="TGDBA-GUID-E83799DC-CA41-4E44-B463-1D4E4A470591" class="sect4">Controlling Cursor Access Using JDBC</h4>
<div>
<p>Avoid closing cursors if they will be re-executed, because the new literal values can be bound to the cursor for re-execution. Alternatively, JDBC provides a SQL statement cache within the JDBC client using the <code>setStmtCacheSize()</code> method. Using this method, JDBC creates a SQL statement cache that is local to the JDBC program.</p>
<div class="infoboxnotealso" id="GUID-E83799DC-CA41-4E44-B463-1D4E4A470591__GUID-829B7453-EAAC-43BE-8901-C9F4738D6E32">
<p class="notep1">See Also:</p>
<p><a class="olink JJDBC" target="_blank" href="../JJDBC/toc.htm"><span class="italic">Oracle Database JDBC Developer&#39;s Guide</span></a> for information about using the JDBC SQL statement cache</p>
</div>
</div>
</div>
<a id="TGDBA576"></a>
<div class="props_rev_3"><a id="GUID-F79E99F4-B75A-4066-8CA8-BA37BDC1A119"></a>
<h4 id="TGDBA-GUID-F79E99F4-B75A-4066-8CA8-BA37BDC1A119" class="sect4">Controlling Cursor Access Using Oracle Forms</h4>
<div>
<p>With <a id="d35703e1126" class="indexterm-anchor"></a><a id="d35703e1130" class="indexterm-anchor"></a>Oracle Forms, it is possible to control some aspects of cursor access at run time, the trigger level, or the form level.</p>
</div>
</div>
</div>
<a id="TGDBA577"></a>
<div class="props_rev_3"><a id="GUID-A2FF092A-18CE-46E0-903C-039105272CDC"></a>
<h3 id="TGDBA-GUID-A2FF092A-18CE-46E0-903C-039105272CDC" class="sect3">Maintain Persistent Connections</h3>
<div>
<p>Large OLTP applications with middle tiers should maintain connections, instead of connecting and disconnecting for each database request. Maintaining persistent connections saves CPU resources and database resources, such as latches.</p>
</div>
</div>
</div>
<a id="TGDBA578"></a>
<div class="props_rev_3"><a id="GUID-5823285C-A728-4006-8813-41BB92928F73"></a>
<h2 id="TGDBA-GUID-5823285C-A728-4006-8813-41BB92928F73" class="sect2">Configuring the Shared Pool</h2>
<div>
<p>This section describes how to configure the shared pool and contains the following topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="tune_shared_pool.htm#GUID-278E124D-F24B-4D55-A556-4DC098320654">Sizing the Shared Pool</a></p>
</li>
<li>
<p><a href="tune_shared_pool.htm#GUID-B1867602-00BF-43CD-9FAB-3C9829358CDD">Deallocating Cursors</a></p>
</li>
<li>
<p><a href="tune_shared_pool.htm#GUID-C13EE398-F162-4A23-8393-393D71133004">Caching Session Cursors</a></p>
</li>
<li>
<p><a href="tune_shared_pool.htm#GUID-40A8C949-9B20-4217-A730-FE8A910B358F">Sharing Cursors</a></p>
</li>
<li>
<p><a href="tune_shared_pool.htm#GUID-E0D415CA-C4A7-4588-ADF2-4E302CE25849">Keeping Large Objects to Prevent Aging</a></p>
</li>
<li>
<p><a href="tune_shared_pool.htm#GUID-7FD646B3-FCE3-4D3C-B988-C8D138FFD514">Configuring the Reserved Pool</a></p>
</li>
</ul>
</div>
<a id="TGDBA579"></a>
<div class="props_rev_3"><a id="GUID-278E124D-F24B-4D55-A556-4DC098320654"></a>
<h3 id="TGDBA-GUID-278E124D-F24B-4D55-A556-4DC098320654" class="sect3">Sizing the Shared Pool</h3>
<div>
<p>When configuring a new database instance, it is difficult to know the correct size for the shared pool cache. Typically, a DBA makes a first estimate for the cache size, then runs a representative workload on the instance, and examines the relevant statistics to see whether the cache is under-configured or over-configured.</p>
<p>For most OLTP applications, shared pool size is an important factor in application performance. Shared pool size is less important for applications that issue a very limited number of discrete SQL statements, such as decision support systems (DSS).</p>
<p>If the shared pool is too small, then extra resources are used to manage the limited amount of available space. This consumes CPU and latching resources, and causes contention. Ideally, the shared pool should be just large enough to cache frequently-accessed objects. Having a significant amount of free memory in the shared pool is a waste of memory. When examining the statistics after the database has been running, ensure that none of these mistakes are present in the workload.</p>
<p>This section describes how to size the shared pool and contains the following topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="tune_shared_pool.htm#GUID-B3D48D5B-D19D-4E0F-84F0-1276FA113581">Using Library Cache Statistics</a></p>
</li>
<li>
<p><a href="tune_shared_pool.htm#GUID-835D3E6D-1FF9-44ED-B22A-44C4101A4A9C">Using Shared Pool Advisory Statistics</a></p>
</li>
<li>
<p><a href="tune_shared_pool.htm#GUID-BA84D70F-4325-4229-AEC9-06DF7059F1FB">Using Dictionary Cache Statistics</a></p>
</li>
<li>
<p><a href="tune_shared_pool.htm#GUID-220BC80E-FD16-4259-A7C1-E1967C510CAE">Increasing Memory Allocated to the Shared Pool</a></p>
</li>
<li>
<p><a href="tune_shared_pool.htm#GUID-813F1711-5A90-45BE-B113-C0CEF6DD3048">Reducing Memory Allocated to the Shared Pool</a></p>
</li>
</ul>
</div>
<a id="TGDBA580"></a>
<div class="props_rev_3"><a id="GUID-B3D48D5B-D19D-4E0F-84F0-1276FA113581"></a>
<h4 id="TGDBA-GUID-B3D48D5B-D19D-4E0F-84F0-1276FA113581" class="sect4">Using Library Cache Statistics</h4>
<div>
<p>When sizing the shared pool, the goal is to cache SQL statements that are executed multiple times in the library cache without over-allocating memory. To accomplish this goal, examine the following library cache statistics:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>RELOADS</code></p>
<p>The <code>RELOADS</code> column in the <code>V$LIBRARYCACHE</code> view shows the amount of reloading (or reparsing) of a previously-cached SQL statement that aged out of the cache. If the application reuses SQL effectively and runs on a system with an optimal shared pool size, this statistic should have a value near zero.</p>
</li>
<li>
<p><code>INVALIDATIONS</code></p>
<p>The <code>INVALIDATIONS</code> column in <code>V$LIBRARYCACHE</code> view shows the number of times library cache data was invalidated and had to be reparsed. This statistic should have a value near zero, especially on OLTP systems during peak loads. This means SQL statements that can be shared were invalidated by some operation (such as a DDL).</p>
</li>
<li>
<p>Library cache hit ratio</p>
<p>The library cache hit ratio is a broad indicator of the library cache health. This value should be considered along with the other statistics, such as the rate of hard parsing and if there is any shared pool or library cache latch contention.</p>
</li>
<li>
<p>Amount of free memory in the shared pool</p>
<p>To view the amount of free memory in the shared pool, query the <code>V$SGASTAT</code> performance view. Ideally, free memory should be as low as possible, without causing any reparsing on the system.</p>
</li>
</ul>
<p>The following sections describe how to view and examine these library cache statistics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="tune_shared_pool.htm#GUID-0A2DD50D-D1D3-4B70-BCE7-74CB51DD6B36">Using the V$LIBRARYCACHE View</a></p>
</li>
<li>
<p><a href="tune_shared_pool.htm#GUID-CB036110-C43F-4265-8084-C721FEA037E0">Calculating the Library Cache Hit Ratio</a></p>
</li>
<li>
<p><a href="tune_shared_pool.htm#GUID-8CA2015B-91BB-4730-B3C0-4BA90DD3C6FB">Viewing the Amount of Free Memory in the Shared Pool</a></p>
</li>
</ul>
</div>
<a id="TGDBA582"></a><a id="TGDBA581"></a>
<div class="props_rev_3"><a id="GUID-0A2DD50D-D1D3-4B70-BCE7-74CB51DD6B36"></a>
<h5 id="TGDBA-GUID-0A2DD50D-D1D3-4B70-BCE7-74CB51DD6B36" class="sect5">Using the V$LIBRARYCACHE View</h5>
<div>
<div class="section">
<p>Use the <code>V$LIBRARYCACHE</code> view to monitor statistics that reflect library cache activity. These statistics reflect all library cache activity after the most recent database instance startup.</p>
<p>Each row in this view contains statistics for one type of item kept in the library cache. The item described by each row is identified by the value of the <code>NAMESPACE</code><a id="d35703e1445" class="indexterm-anchor"></a><a id="d35703e1449" class="indexterm-anchor"></a> column. Rows with the following <code>NAMESPACE</code> values reflect library cache activity for SQL statements and PL/SQL blocks:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><code>SQL</code> <code>AREA</code></p>
</li>
<li>
<p><code>TABLE/PROCEDURE</code></p>
</li>
<li>
<p><code>BODY</code></p>
</li>
<li>
<p><code>TRIGGER</code></p>
</li>
</ul>
<p>Rows with other <code>NAMESPACE</code> values reflect library cache activity for object definitions that Oracle Database uses for dependency maintenance.</p>
<p><a href="tune_shared_pool.htm#GUID-0A2DD50D-D1D3-4B70-BCE7-74CB51DD6B36__BABGHDDI">Example 14-1</a> shows a query of this view to examine each namespace individually.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-0A2DD50D-D1D3-4B70-BCE7-74CB51DD6B36__BABGHDDI">
<p class="titleinexample">Example 14-1 Querying the V$LIBRARYCACHE View</p>
<pre dir="ltr">SELECT namespace, pins, pinhits, reloads, invalidations
  FROM V$LIBRARYCACHE
 ORDER BY namespace;
</pre>
<p>The output of this query might look like the following:</p>
<pre dir="ltr">NAMESPACE             PINS    PINHITS    RELOADS INVALIDATIONS
--------------- ---------- ---------- ---------- -------------
BODY                  8870       8819          0             0
CLUSTER                393        380          0             0
INDEX                   29          0          0             0
OBJECT                   0          0          0             0
PIPE                 55265      55263          0             0
SQL AREA          21536413   21520516      11204             2
TABLE/PROCEDURE   10775684   10774401          0             0
TRIGGER               1852       1844          0             0
</pre>
<p>In this example, the output shows that:</p>
<ul style="list-style-type: disc;">
<li>
<p>For the <code>SQL AREA</code> namespace, there are 21,536,413 executions.</p>
</li>
<li>
<p>11,204 of these executions resulted in a library cache miss, requiring the database to implicitly reparse a statement or block, or reload an object definition because it aged out of the library cache.</p>
</li>
<li>
<p>SQL statements are invalidated twice, again causing library cache misses.</p>
</li>
</ul>
<div class="infobox-note" id="GUID-0A2DD50D-D1D3-4B70-BCE7-74CB51DD6B36__GUID-6DB7DAED-1410-4C35-8380-CB2E0009C273">
<p class="notep1">Note:</p>
<p>This query returns data from instance startup. Using statistics gathered over an interval instead may better identify the problem. For information about gathering information over an interval, see <a href="pfgrf_diag.htm#GUID-843A596D-2D8B-422D-9C8D-73C0EF52739D">Automatic Performance Diagnostics</a> .</p>
</div>
<div class="infoboxnotealso" id="GUID-0A2DD50D-D1D3-4B70-BCE7-74CB51DD6B36__GUID-E7D8C47B-1921-4AA9-9B27-F8BBD453E6F5">
<p class="notep1">See Also:</p>
<p><a class="olink REFRN003" target="_blank" href="../REFRN/GUID-8C5690B0-DE10-4460-86DF-80111869CF4C.htm#REFRN003"><span class="italic">Oracle Database Reference</span></a> for information about the <code>V$LIBRARYCACHE</code> view</p>
</div>
</div>
<!-- class="example" --></div>
</div>
<a id="TGDBA583"></a>
<div class="props_rev_3"><a id="GUID-CB036110-C43F-4265-8084-C721FEA037E0"></a>
<h5 id="TGDBA-GUID-CB036110-C43F-4265-8084-C721FEA037E0" class="sect5">Calculating the Library Cache Hit Ratio</h5>
<div>
<div class="section">
<p>To calculate the library cache hit ratio, use the following formula:</p>
<pre dir="ltr">Library Cache Hit Ratio = sum(pinhits) / sum(pins)
</pre>
<p>Applying the library cache hit ratio formula to <a href="tune_shared_pool.htm#GUID-0A2DD50D-D1D3-4B70-BCE7-74CB51DD6B36__BABGHDDI">Example 14-1</a> results in the following library cache hit ratio:</p>
<pre dir="ltr">SUM(PINHITS)/SUM(PINS)
----------------------
            .999466248
</pre>
<p>In this example, the hit percentage is about 99.94%, which means that only .06% of executions resulted in reparsing.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="TGDBA585"></a><a id="TGDBA584"></a>
<div class="props_rev_3"><a id="GUID-8CA2015B-91BB-4730-B3C0-4BA90DD3C6FB"></a>
<h5 id="TGDBA-GUID-8CA2015B-91BB-4730-B3C0-4BA90DD3C6FB" class="sect5">Viewing the Amount of Free Memory in the Shared Pool</h5>
<div>
<div class="section">
<p>The amount of free memory in the shared pool is reported in the <code>V$SGASTAT</code> view.</p>
<p><a href="tune_shared_pool.htm#GUID-8CA2015B-91BB-4730-B3C0-4BA90DD3C6FB__BABCHDBJ">Example 14-2</a> shows a query of this view.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-8CA2015B-91BB-4730-B3C0-4BA90DD3C6FB__BABCHDBJ">
<p class="titleinexample">Example 14-2 Querying the V$SGASTAT View</p>
<pre dir="ltr">SELECT *
  FROM V$SGASTAT
 WHERE name = &#39;free memory&#39;
   AND pool = &#39;shared pool&#39;;
</pre>
<p>The output of this query might look like the following:</p>
<pre dir="ltr">POOL        NAME                            BYTES
----------- -------------------------- ----------
shared pool free memory                   4928280
</pre>
<p>If free memory is always available in the shared pool, then increasing its size offers little or no benefit. Yet, just because the shared pool is full does not necessarily mean there is a problem. It may be indicative of a well-configured system.</p>
</div>
<!-- class="example" --></div>
</div>
</div>
<a id="TGDBA586"></a>
<div class="props_rev_3"><a id="GUID-835D3E6D-1FF9-44ED-B22A-44C4101A4A9C"></a>
<h4 id="TGDBA-GUID-835D3E6D-1FF9-44ED-B22A-44C4101A4A9C" class="sect4">Using Shared Pool Advisory Statistics</h4>
<div>
<p>The amount of memory available for the library cache can drastically affect the parse rate of Oracle Database. To help you correctly size the library cache, Oracle Database provides the following shared pool advisory views:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>V$SHARED_POOL_ADVICE</code></p>
</li>
<li>
<p><code>V$LIBRARY_CACHE_MEMORY</code></p>
</li>
<li>
<p><code>V$JAVA_POOL_ADVICE</code></p>
</li>
<li>
<p><code>V$JAVA_LIBRARY_CACHE_MEMORY</code></p>
</li>
</ul>
<p>These shared pool advisory views provide information about library cache memory, enabling you to predict how changing the size of the shared pool can affect aging out of objects in the shared pool. The shared pool advisory statistics in these views track the library cache&#39;s use of shared pool memory and predict how the library cache will behave in shared pools of different sizes. Using these views enable you to determine:</p>
<ul style="list-style-type: disc;">
<li>
<p>How much memory the library cache is using</p>
</li>
<li>
<p>How much memory is currently pinned</p>
</li>
<li>
<p>How much memory is on the shared pool&#39;s Least Recently Used (LRU) list</p>
</li>
<li>
<p>How much time might be lost or gained by changing the size of the shared pool</p>
</li>
</ul>
<p>These views display shared pool advisory statistics when the shared pool advisory is enabled. The statistics reset when the advisory is disabled.</p>
<p>The following sections describe these views in more detail:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="tune_shared_pool.htm#GUID-55833338-4B36-4742-8BBA-336DC130C481">About the V$SHARED_POOL_ADVICE View</a></p>
</li>
<li>
<p><a href="tune_shared_pool.htm#GUID-C7190867-D593-4C78-9B3B-500CFC756076">About the V$LIBRARY_CACHE_MEMORY View</a></p>
</li>
<li>
<p><a href="tune_shared_pool.htm#GUID-A1A06734-2F03-42A7-951C-BEC88691BFC9">About V$JAVA_POOL_ADVICE and V$JAVA_LIBRARY_CACHE_MEMORY</a></p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-835D3E6D-1FF9-44ED-B22A-44C4101A4A9C__GUID-65D3B934-275F-4DE0-B7CA-9EF5D98FFE27">
<p class="notep1">See Also:</p>
<p><a class="olink REFRN003" target="_blank" href="../REFRN/GUID-8C5690B0-DE10-4460-86DF-80111869CF4C.htm#REFRN003"><span class="italic">Oracle Database Reference</span></a> for information about these views</p>
</div>
</div>
<a id="TGDBA587"></a>
<div class="props_rev_3"><a id="GUID-55833338-4B36-4742-8BBA-336DC130C481"></a>
<h5 id="TGDBA-GUID-55833338-4B36-4742-8BBA-336DC130C481" class="sect5">About the V$SHARED_POOL_ADVICE View</h5>
<div>
<p>The <a id="d35703e1764" class="indexterm-anchor"></a><code>V$SHARED_POOL_ADVICE</code> view displays information about estimated parse time in the shared pool for different pool sizes. The sizes range from 10% of the current shared pool size or the amount of pinned library cache memory&mdash;whichever is higher&mdash;to 200% of the current shared pool size, in equal intervals. The value of the interval depends on the current size of the shared pool.</p>
</div>
</div>
<a id="TGDBA588"></a>
<div class="props_rev_3"><a id="GUID-C7190867-D593-4C78-9B3B-500CFC756076"></a>
<h5 id="TGDBA-GUID-C7190867-D593-4C78-9B3B-500CFC756076" class="sect5">About the V$LIBRARY_CACHE_MEMORY View</h5>
<div>
<p>The <a id="d35703e1805" class="indexterm-anchor"></a><code>V$LIBRARY_CACHE_MEMORY</code> view displays information about memory allocated to library cache memory objects in different namespaces. A memory object is an internal grouping of memory for efficient management. A library cache object may consist of one or more memory objects.</p>
</div>
</div>
<a id="TGDBA589"></a>
<div class="props_rev_3"><a id="GUID-A1A06734-2F03-42A7-951C-BEC88691BFC9"></a>
<h5 id="TGDBA-GUID-A1A06734-2F03-42A7-951C-BEC88691BFC9" class="sect5">About V$JAVA_POOL_ADVICE and V$JAVA_LIBRARY_CACHE_MEMORY</h5>
<div>
<p>The <a id="d35703e1847" class="indexterm-anchor"></a><a id="d35703e1849" class="indexterm-anchor"></a><code>V$JAVA_POOL_ADVICE</code> and <code>V$JAVA_LIBRARY_CACHE_MEMORY</code> views contain Java pool advisory statistics that track information about library cache memory used for Java and predict how changing the size of the Java pool affects the parse rate.</p>
<p>The <code>V$JAVA_POOL_ADVICE</code> view displays information about estimated parse time in the Java pool for different pool sizes. The sizes range from 10% of the current Java pool size or the amount of pinned Java library cache memory&mdash;whichever is higher&mdash;to 200% of the current Java pool size, in equal intervals. The value of the interval depends on the current size of the Java pool.</p>
</div>
</div>
</div>
<a id="TGDBA591"></a><a id="TGDBA592"></a><a id="TGDBA590"></a>
<div class="props_rev_3"><a id="GUID-BA84D70F-4325-4229-AEC9-06DF7059F1FB"></a>
<h4 id="TGDBA-GUID-BA84D70F-4325-4229-AEC9-06DF7059F1FB" class="sect4">Using Dictionary Cache Statistics</h4>
<div>
<div class="section">
<p>Typically, if the shared pool is adequately sized for the library cache, it will also be adequate sized for the dictionary cache data.</p>
<p>Misses on the data dictionary cache are to be expected in some cases. When the database instance starts up, the data dictionary cache does not contain any data. Therefore, any SQL statement issued is likely to result in cache misses. As more data is read into the cache, the likelihood of cache misses decreases. Eventually, the database reaches a steady state, in which the most frequently-used dictionary data is in the cache. At this point, very few cache misses occur.</p>
<p>Each row in the <a id="d35703e1907" class="indexterm-anchor"></a><code>V$ROWCACHE</code> view contains statistics for a single type of data dictionary item. These statistics reflect all data dictionary activity since the most recent instance startup.</p>
<p><a href="tune_shared_pool.htm#GUID-BA84D70F-4325-4229-AEC9-06DF7059F1FB__BABJDEAC" title="This table describes the columns in the V$ROWCACHE view that reflect the use and effectiveness of the data dictionary cache.">Table 14-1</a> lists the columns in the <code>V$ROWCACHE</code> view that reflect the use and effectiveness of the data dictionary cache.</p>
<div class="tblformal" id="GUID-BA84D70F-4325-4229-AEC9-06DF7059F1FB__BABJDEAC">
<p class="titleintable">Table 14-1 Data Dictionary Columns in the V$ROWCACHE View</p>
<table class="cellalignment11" title="Data Dictionary Columns in the V$ROWCACHE View" summary="This table describes the columns in the V$ROWCACHE view that reflect the use and effectiveness of the data dictionary cache.">
<thead>
<tr class="cellalignment2">
<th class="cellalignment16" id="d35703e1933">Column</th>
<th class="cellalignment17" id="d35703e1936">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2">
<td class="cellalignment18" id="d35703e1941" headers="d35703e1933">
<p><code>PARAMETER</code></p>
</td>
<td class="cellalignment19" headers="d35703e1941 d35703e1936">
<p>Identifies a particular data dictionary item. For each row, the value in this column is the item prefixed by <code>dc_</code>. For example, in the row that contains statistics for file descriptions, this column contains the value <code>dc_files</code>.</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment18" id="d35703e1955" headers="d35703e1933">
<p><code>GETS</code></p>
</td>
<td class="cellalignment19" headers="d35703e1955 d35703e1936">
<p>Shows the total number of requests for information about the corresponding item. For example, in the row that contains statistics for file descriptions, this column contains the total number of requests for file description data.</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment18" id="d35703e1963" headers="d35703e1933">
<p><code>GETMISSES</code></p>
</td>
<td class="cellalignment19" headers="d35703e1963 d35703e1936">
<p>Shows the number of data requests that are not satisfied by the cache and required an I/O.</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment18" id="d35703e1971" headers="d35703e1933">
<p><code>MODIFICATIONS</code></p>
</td>
<td class="cellalignment19" headers="d35703e1971 d35703e1936">
<p>Shows the number of times data in the dictionary cache was updated.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p><a href="tune_shared_pool.htm#GUID-BA84D70F-4325-4229-AEC9-06DF7059F1FB__BABDJEAC">Example 14-3</a> shows a query of this view to monitor the statistics over a period while the application is running. The derived column <code>PCT_SUCC_GETS</code> can be considered as the item-specific hit ratio.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-BA84D70F-4325-4229-AEC9-06DF7059F1FB__BABDJEAC">
<p class="titleinexample">Example 14-3 Querying the V$ROWCACHE View</p>
<pre dir="ltr">column parameter format a21
column pct_succ_gets format 999.9
column updates format 999,999,999

SELECT parameter,
       sum(gets),
       sum(getmisses),
       100*sum(gets - getmisses) / sum(gets) pct_succ_gets,
       sum(modifications) updates
  FROM V$ROWCACHE
 WHERE gets &gt; 0
 GROUP BY parameter;
</pre>
<p>The output of this query might look like the following:</p>
<pre dir="ltr">PARAMETER              SUM(GETS) SUM(GETMISSES) PCT_SUCC_GETS      UPDATES
--------------------- ---------- -------------- ------------- ------------
dc_database_links             81              1          98.8            0
dc_free_extents            44876          20301          54.8       40,453
dc_global_oids                42              9          78.6            0
dc_histogram_defs           9419            651          93.1            0
dc_object_ids              29854            239          99.2           52
dc_objects                 33600            590          98.2           53
dc_profiles                19001              1         100.0            0
dc_rollback_segments       47244             16         100.0           19
dc_segments               100467          19042          81.0       40,272
dc_sequence_grants           119             16          86.6            0
dc_sequences               26973             16          99.9       26,811
dc_synonyms                 6617            168          97.5            0
dc_tablespace_quotas         120              7          94.2           51
dc_tablespaces            581248             10         100.0            0
dc_used_extents            51418          20249          60.6       42,811
dc_user_grants             76082             18         100.0            0
dc_usernames              216860             12         100.0            0
dc_users                  376895             22         100.0            0
</pre>
<p>In this example, the output shows the following:</p>
<ul style="list-style-type: disc;">
<li>
<p>There are large numbers of misses and updates for used extents, free extents, and segments. This implies that the database instance had a significant amount of dynamic space extension.</p>
</li>
<li>
<p>Comparing the percentage of successful gets with the actual number of gets indicates the shared pool is large enough to adequately store dictionary cache data.</p>
</li>
</ul>
<p>You can also calculate the overall dictionary cache hit ratio using the following query; however, summing up the data over all the caches will lose the finer granularity of data:</p>
<pre dir="ltr">SELECT (SUM(gets - getmisses - fixed)) / SUM(gets) &#34;row cache&#34;
  FROM V$ROWCACHE;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="TGDBA593"></a>
<div class="props_rev_3"><a id="GUID-220BC80E-FD16-4259-A7C1-E1967C510CAE"></a>
<h4 id="TGDBA-GUID-220BC80E-FD16-4259-A7C1-E1967C510CAE" class="sect4">Increasing Memory Allocated to the Shared Pool</h4>
<div>
<div class="section">
<p>Increasing the amount of memory for the shared pool increases the amount of memory available to the library cache, the dictionary cache, and the result cache. Before doing so, review the shared pool statistics and examine:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>If the value of the <code>V$LIBRARYCACHE</code>.<code>RELOADS</code> column is near zero</p>
</li>
<li>
<p>If the ratio of total <code>V$ROWCACHE</code>.<code>GETMISSES</code> column to total <code>V$ROWCACHE</code>.<code>GETS</code> is less than 10% or 15% for frequently-accessed dictionary caches, depending on the application</p>
</li>
</ul>
<p>If both of these conditions are met, then the shared pool is adequately sized and increasing its memory will likely not improve performance. On the other hand, if either of these conditions is not met, and the application is using the shared pool effectively, as described in <span class="q">&#34;<a href="tune_shared_pool.htm#GUID-901C4010-2B6A-4E50-A02E-77830BB7E70D">Using the Shared Pool</a>&#34;</span>, then consider increasing the memory of the shared pool.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">To increase the size of the shared pool:</p>
<ul style="list-style-type: disc;">
<li>
<p>Increase the value of the <a id="d35703e2083" class="indexterm-anchor"></a><code>SHARED_POOL_SIZE</code> initialization parameter until the conditions are met.</p>
<p>The maximum value for this parameter depends on your operating system. This measure reduces implicit reparsing of SQL statements and PL/SQL blocks on execution.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<p>IC - Need link to &#34;Managing Server Result Cache Memory with Init Parameters&#34;</p>
</div>
<!-- class="section" --></div>
</div>
<a id="TGDBA594"></a>
<div class="props_rev_3"><a id="GUID-813F1711-5A90-45BE-B113-C0CEF6DD3048"></a>
<h4 id="TGDBA-GUID-813F1711-5A90-45BE-B113-C0CEF6DD3048" class="sect4">Reducing Memory Allocated to the Shared Pool</h4>
<div>
<div class="section">
<p>If the value of the <code>V$LIBRARYCACHE</code>.<code>RELOADS</code> column is near zero, and there is a small amount of free memory in the shared pool, then the shared pool is adequately sized to store the most frequently-accessed data. If there are always significant amounts of free memory in the shared pool and you want to allocate this memory elsewhere, then consider reducing the shared pool size.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">To decrease the size of the shared pool</p>
<ul style="list-style-type: disc;">
<li>
<p>Reduce the value of the <a id="d35703e2143" class="indexterm-anchor"></a><code>SHARED_POOL_SIZE</code> initialization parameter, while ensuring that good performance is maintained.</p>
</li>
</ul>
</div>
<!-- class="section" --></div>
</div>
</div>
<a id="TGDBA595"></a>
<div class="props_rev_3"><a id="GUID-B1867602-00BF-43CD-9FAB-3C9829358CDD"></a>
<h3 id="TGDBA-GUID-B1867602-00BF-43CD-9FAB-3C9829358CDD" class="sect3">Deallocating Cursors</h3>
<div>
<p>If there are no library cache misses, then consider setting the value of the <a id="d35703e2184" class="indexterm-anchor"></a><code>CURSOR_SPACE_FOR_TIME</code> initialization parameter to <code>TRUE</code> to accelerate execution calls. This parameter specifies whether a cursor can be deallocated from the library cache to make room for a new SQL statement.</p>
<p>If the <code>CURSOR_SPACE_FOR_TIME</code> parameter is set to:</p>
<ul style="list-style-type: disc;">
<li>
<p><code>FALSE</code> (the default), then a cursor can be deallocated from the library cache regardless of whether application cursors associated with its SQL statement are open.</p>
<p>In this case, Oracle Database must verify that the cursor containing the SQL statement is in the library cache.</p>
</li>
<li>
<p><code>TRUE</code>, then a cursor can be deallocated only when all application cursors associated with its statement are closed.</p>
<p>In this case, Oracle Database does not need to verify that a cursor is in the library cache because it cannot be deallocated while an application cursor associated with it is open.</p>
</li>
</ul>
<p>Setting the value of the parameter to <code>TRUE</code> saves Oracle Database a small amount of time and may slightly improve the performance of execution calls. This value also prevents the deallocation of cursors until associated application cursors are closed.</p>
<p>Do not set the value of the <code>CURSOR_SPACE_FOR_TIME</code> parameter to <code>TRUE</code> if:</p>
<ul style="list-style-type: disc;">
<li>
<p>Library cache misses are found in execution calls</p>
<p>Library cache misses indicate that the shared pool is not large enough to hold the shared SQL areas of all concurrently open cursors. If the shared pool does not have enough space for a new SQL statement and the value for this parameter is set to <code>TRUE</code>, then the statement cannot be parsed and Oracle Database returns an error indicating that there is not enough shared memory.</p>
</li>
<li>
<p>The amount of memory available to each user for private SQL areas is scarce</p>
<p>This value also prevents the deallocation of private SQL areas associated with open cursors. If the private SQL areas for all concurrently open cursors fills the available memory so that there is no space for a new SQL statement, then the statement cannot be parsed and Oracle Database returns an error indicating that there is not enough memory.</p>
</li>
</ul>
<p>If the shared pool does not have enough space for a new SQL statement and the value of this parameter is set to <code>FALSE</code>, then Oracle Database deallocates an existing cursor. Although deallocating a cursor may result in a subsequent library cache miss (if the cursor is re-executed), this is preferable to an error halting the application because a SQL statement cannot be parsed.</p>
</div>
</div>
<a id="TGDBA596"></a>
<div class="props_rev_3"><a id="GUID-C13EE398-F162-4A23-8393-393D71133004"></a>
<h3 id="TGDBA-GUID-C13EE398-F162-4A23-8393-393D71133004" class="sect3">Caching Session Cursors</h3>
<div>
<p>The session cursor cache contains closed session cursors for SQL and PL/SQL, including recursive SQL. This cache can be useful to applications that use Oracle Forms because switching from one form to another closes all session cursors associated with the first form. If an application repeatedly issues parse calls on the same set of SQL statements, then reopening session cursors can degrade performance. By reusing cursors, the database reduces parse times, leading to faster overall execution times.</p>
<p>This section describes the session cursor cache and contains the following topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="tune_shared_pool.htm#GUID-3789E54B-CF19-4575-AD75-DB706DCBB9CD">About the Session Cursor Cache</a></p>
</li>
<li>
<p><a href="tune_shared_pool.htm#GUID-5D16C1CC-CFD3-4DD1-B1D1-60F3BD4AA374">Enabling the Session Cursor Cache</a></p>
</li>
<li>
<p><a href="tune_shared_pool.htm#GUID-419F056F-2EE0-431E-BEAD-D13A77B2AA7D">Sizing the Session Cursor Cache</a></p>
</li>
</ul>
</div>
<a id="TGDBA597"></a>
<div class="props_rev_3"><a id="GUID-3789E54B-CF19-4575-AD75-DB706DCBB9CD"></a>
<h4 id="TGDBA-GUID-3789E54B-CF19-4575-AD75-DB706DCBB9CD" class="sect4">About the Session Cursor Cache</h4>
<div>
<p>A session cursor represents an instantiation of a shared child cursor, which is stored in the shared pool, for a specific session. Each session cursor stores a reference to a child cursor that it has instantiated.</p>
<p>Oracle Database checks the library cache to determine whether more than three parse requests have been issued on a given statement. If a cursor has been closed three times, then Oracle Database assumes that the session cursor associated with the statement should be cached and moves the cursor into the session cursor cache.</p>
<p>Subsequent requests to parse a SQL statement by the same session search an array for pointers to the shared cursor. If the pointer is found, then the database dereferences the pointer to determine whether the shared cursor exists. To reuse a cursor from the cache, the cache manager checks whether the cached states of the cursor match the current session and system environment.</p>
<div class="infobox-note" id="GUID-3789E54B-CF19-4575-AD75-DB706DCBB9CD__GUID-D6D6137B-E45D-40F8-8157-2D5DB2126281">
<p class="notep1">Note:</p>
<p>Reuse of a cached cursor still registers as a parse, even though it is not a hard parse.</p>
</div>
<p>An LRU algorithm removes entries in the session cursor cache to make room for new entries when needed. The cache also uses an internal time-based algorithm to age out cursors that have been idle for an certain amount of time.</p>
</div>
</div>
<a id="TGDBA598"></a>
<div class="props_rev_3"><a id="GUID-5D16C1CC-CFD3-4DD1-B1D1-60F3BD4AA374"></a>
<h4 id="TGDBA-GUID-5D16C1CC-CFD3-4DD1-B1D1-60F3BD4AA374" class="sect4">Enabling the Session Cursor Cache</h4>
<div>
<div class="section">
<p>The following initialization parameters pertain to the session cursor cache:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><code>SESSION_CACHED_CURSORS</code></p>
<p>This parameter sets the maximum number of cached closed cursors for each session. The default value is 50. Use this parameter to reuse cursors from the cache for the statements that get executed repeatedly in the same session.</p>
</li>
<li>
<p><code>OPEN_CURSORS</code></p>
<p>This parameter specifies the maximum number of cursors a session can have open simultaneously. For example, if its value is set to 1000, then each session can have up to 1000 cursors open at one time.</p>
</li>
</ul>
<p>These parameters are independent. For example, you can set the value of the <code>SESSION_CACHED_CURSORS</code> parameter higher than the value of the <code>OPEN_CURSORS</code> parameter because session cursors are not cached in an open state.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">To enable the session cursor cache:</p>
<ol>
<li>
<p>Determine the maximum number of session cursors to keep in the cache.</p>
</li>
<li>
<p>Do one of the following:</p>
<ul style="list-style-type: disc;">
<li>
<p>To enable static caching, set the value of the <code>SESSION_CACHED_CURSORS</code> parameter to the number determined in the previous step.</p>
</li>
<li>
<p>To enable dynamic caching, execute the following statement:</p>
<pre dir="ltr">ALTER SESSION SET SESSION_CACHED_CURSORS = <span class="italic">value</span>;
</pre></li>
</ul>
</li>
</ol>
</div>
<!-- class="section" --></div>
</div>
<a id="TGDBA600"></a><a id="TGDBA599"></a>
<div class="props_rev_3"><a id="GUID-419F056F-2EE0-431E-BEAD-D13A77B2AA7D"></a>
<h4 id="TGDBA-GUID-419F056F-2EE0-431E-BEAD-D13A77B2AA7D" class="sect4">Sizing the Session Cursor Cache</h4>
<div>
<div class="section">
<p>Use the <code>V$SESSTAT</code> view to determine if the session cursor cache is adequately sized for the database instance.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">To size the session cursor cache:</p>
<ol>
<li>
<p>Query the <code>V$SESSTAT</code> view to determine how many cursors are currently cached in a particular session.</p>
</li>
<li>
<p>Query the <code>V$SESSTAT</code> view to find the percentage of parse calls that found a cursor in the session cursor cache.</p>
</li>
<li>
<p>Consider increasing the value of the <code>SESSION_CACHED_CURSORS</code> parameter if the following conditions are true:</p>
<ul style="list-style-type: disc;">
<li>
<p>The session cursor cache count is close to the maximum</p>
</li>
<li>
<p>The percentage of session cursor cache hits is low relative to the total parses</p>
</li>
<li>
<p>The application repeatedly performs parse calls for the same queries</p>
</li>
</ul>
</li>
</ol>
</div>
<!-- class="section" -->
<div class="section">
<p><a href="tune_shared_pool.htm#GUID-419F056F-2EE0-431E-BEAD-D13A77B2AA7D__CIHJEBIH">Example 14-4</a> shows two queries of this view.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-419F056F-2EE0-431E-BEAD-D13A77B2AA7D__CIHJEBIH">
<p class="titleinexample">Example 14-4 Querying the V$SESSTAT View</p>
<p>The following query finds how many cursors are currently cached in a particular session:</p>
<pre dir="ltr">SELECT a.value curr_cached, p.value max_cached,
       s.username, s.sid, s.serial#
  FROM v$sesstat a, v$statname b, v$session s, v$parameter2 p
 WHERE a.statistic# = b.statistic#  and s.sid=a.sid and a.sid=&amp;sid
   AND p.name=&#39;session_cached_cursors&#39;
   AND b.name = &#39;session cursor cache count&#39;;
</pre>
<p>The output of this query might look like the following:</p>
<pre dir="ltr">CURR_CACHED MAX_CACHED USERNAME   SID    SERIAL#
----------- ---------- -------- ----- ----------
         49 50         APP         35        263
</pre>
<p>This output shows that the number of cursors currently cached for session 35 is close to the maximum.</p>
<p>The following query finds the percentage of parse calls that found a cursor in the session cursor cache:</p>
<pre dir="ltr">SELECT cach.value cache_hits, prs.value all_parses,
       round((cach.value/prs.value)*100,2) as &#34;% found in cache&#34;
  FROM v$sesstat cach, v$sesstat prs, v$statname nm1, v$statname nm2
 WHERE cach.statistic# = nm1.statistic#
   AND nm1.name = &#39;session cursor cache hits&#39;
   AND prs.statistic#=nm2.statistic#
   AND nm2.name= &#39;parse count (total)&#39;
   AND cach.sid= &amp;sid and prs.sid= cach.sid;
</pre>
<p>The output of this query might look like the following:</p>
<pre dir="ltr">CACHE_HITS ALL_PARSES % found in cache
---------- ---------- ----------------
        34        700             4.57
</pre>
<p>This output shows that the number of hits in the session cursor cache for session 35 is low compared to the total number of parses.</p>
<p>In this example, setting the value of the <code>SESSION_CACHED_CURSORS</code> parameter to 100 may help boost performance.</p>
</div>
<!-- class="example" --></div>
</div>
</div>
<a id="TGDBA601"></a>
<div class="props_rev_3"><a id="GUID-40A8C949-9B20-4217-A730-FE8A910B358F"></a>
<h3 id="TGDBA-GUID-40A8C949-9B20-4217-A730-FE8A910B358F" class="sect3">Sharing Cursors</h3>
<div>
<p>In the context of SQL parsing, an identical statement is a SQL statement whose text is identical to another statement, character for character, including spaces, case, and comments. A similar statement is identical except for the values of some literals.</p>
<p>The parse phase compares the statement text with statements in the shared pool to determine if the statement can be shared. If the value of the <code>CURSOR_SHARING</code> initialization parameter is set to <code>EXACT</code> (the default value), and if a statement in the shared pool is not identical, then the database does not share the SQL area. Instead, each SQL statement has its own parent cursor and its own execution plan based on the literal in the statement.</p>
<p>This section describes how cursors can be shared and contains the following topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="tune_shared_pool.htm#GUID-B5897767-3DE1-45A8-9909-375D84FC550A">About Cursor Sharing</a></p>
</li>
<li>
<p><a href="tune_shared_pool.htm#GUID-8FAB86AA-36ED-45C9-AD83-72143F09344B">Forcing Cursor Sharing</a></p>
</li>
</ul>
</div>
<a id="TGDBA602"></a>
<div class="props_rev_3"><a id="GUID-B5897767-3DE1-45A8-9909-375D84FC550A"></a>
<h4 id="TGDBA-GUID-B5897767-3DE1-45A8-9909-375D84FC550A" class="sect4">About Cursor Sharing</h4>
<div>
<p>When SQL statements use literals rather than bind variables, setting the value of the <code>CURSOR_SHARING</code> initialization parameter to <code>FORCE</code> enables the database to replace literals with system-generated bind variables. Using this technique, the database may reduce the number of parent cursors in the shared SQL area.</p>
<p>When the value of the <code>CURSOR_SHARING</code> parameter is set to <code>FORCE</code>, the database performs the following steps during the parse phase:</p>
<ol>
<li>
<p>Searches for an identical statement in the shared pool.</p>
<p>If an identical statement is found, then the database skips the next step and proceeds to step 3. Otherwise, the database proceeds to the next step.</p>
</li>
<li>
<p>Searches for a similar statement in the shared pool.</p>
<p>If a similar statement is <span class="italic">not</span> found, then the database performs a hard parse. If a similar statement <span class="italic">is</span> found, then the database proceeds to the next step.</p>
</li>
<li id="GUID-B5897767-3DE1-45A8-9909-375D84FC550A__BABEBAEI">
<p>Proceeds through the remaining steps of the parse phase to ensure that the execution plan of the existing statement is applicable to the new statement.</p>
<p>If the plan is not applicable, then the database performs a hard parse. If the plan is applicable, then the database proceeds to the next step.</p>
</li>
<li>
<p>Shares the SQL area of the statement.</p>
</li>
</ol>
<p>For details about the various checks performed by the database, see <span class="q">&#34;<a href="tune_shared_pool.htm#GUID-BE6DFC00-A436-4908-A711-9127FABB6809">SQL Sharing Criteria</a>&#34;</span>.</p>
</div>
</div>
<a id="TGDBA603"></a>
<div class="props_rev_3"><a id="GUID-8FAB86AA-36ED-45C9-AD83-72143F09344B"></a>
<h4 id="TGDBA-GUID-8FAB86AA-36ED-45C9-AD83-72143F09344B" class="sect4">Forcing Cursor Sharing</h4>
<div>
<p>The best practice is to write sharable SQL and use the default value of <code>EXACT</code> for the <code>CURSOR_SHARING</code> initialization parameter. By default, Oracle Database uses adaptive cursor sharing to enable a single SQL statement that contains bind variables to use multiple execution plans. However, for applications with many similar statements that use literals instead of bind variables, setting the value of the <code>CURSOR_SHARING</code> parameter to <code>FORCE</code> may improve cursor sharing, resulting in reduced memory usage, faster parses, and reduced latch contention. Consider this approach when statements in the shared pool differ only in the values of literals, and when response time is poor because of a high number of library cache misses. In this case, setting the value of the <code>CURSOR_SHARING</code> parameter to <code>FORCE</code> maximizes cursor sharing and leverages adaptive cursor sharing to generate multiple execution plans based on different literal value ranges.</p>
<p>If stored outlines are generated with the value of the <code>CURSOR_SHARING</code> parameter set to <code>EXACT</code>, then the database does not use stored outlines generated with literals. To avoid this problem, generate outlines with <code>CURSOR_SHARING</code> set to <code>FORCE</code> and use the <code>CREATE_STORED_OUTLINES</code> parameter.</p>
<p>Setting the value of the <code>CURSOR_SHARING</code> parameter to <code>FORCE</code> has the following drawbacks:</p>
<ul style="list-style-type: disc;">
<li>
<p>The database must perform extra work during the soft parse to find a similar statement in the shared pool.</p>
</li>
<li>
<p>There is an increase in the maximum lengths (as returned by <code>DESCRIBE</code>) of any selected expressions that contain literals in a <code>SELECT</code> statement. However, the actual length of the data returned does not change.</p>
</li>
<li>
<p>Star transformation is not supported.</p>
</li>
</ul>
<p>When the value of the <code>CURSOR_SHARING</code> parameter is set to <code>FORCE</code>, the database uses one parent cursor and one child cursor for each distinct SQL statement. The same plan is used for each execution of the same statement. For example, consider the following SQL statement:</p>
<pre dir="ltr">SELECT *
  FROM hr.employees
 WHERE employee_id = 101;
</pre>
<p>If the value of the <code>CURSOR_SHARING</code> parameter is set to <code>FORCE</code>, then the database optimizes this statement as if it contained a bind variable and uses bind peeking to estimate cardinality.</p>
<div class="infobox-note" id="GUID-8FAB86AA-36ED-45C9-AD83-72143F09344B__GUID-008FDA99-14F1-488F-AECD-C864B545422E">
<p class="notep1">Note:</p>
<p>Starting with Oracle Database 11<span class="italic">g</span> Release 2, setting the value of the <code>CURSOR_SHARING</code> parameter to <code>SIMILAR</code> is obsolete. Consider using adaptive cursor sharing instead.</p>
</div>
<div class="infoboxnotealso" id="GUID-8FAB86AA-36ED-45C9-AD83-72143F09344B__GUID-8CB97A89-FB9C-46E2-BDDA-99543CAEDB8F">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a class="olink REFRN10025" target="_blank" href="../REFRN/GUID-455358F8-D657-49A2-B32B-13A1DC53E7D2.htm#REFRN10025"><span class="italic">Oracle Database Reference</span></a> for information about the <code>CURSOR_SHARING</code> initialization parameter</p>
</li>
<li>
<p><a class="olink TGSQL848" target="_blank" href="../TGSQL/tgsql_cursor.htm#TGSQL848"><span class="italic">Oracle Database SQL Tuning Guide</span></a> for information about adaptive cursor sharing</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<a id="TGDBA604"></a>
<div class="props_rev_3"><a id="GUID-E0D415CA-C4A7-4588-ADF2-4E302CE25849"></a>
<h3 id="TGDBA-GUID-E0D415CA-C4A7-4588-ADF2-4E302CE25849" class="sect3">Keeping Large Objects to Prevent Aging</h3>
<div>
<div class="section">
<p>After an entry is loaded into the shared pool, it cannot be moved. Sometimes, as entries are loaded and aged out, the free memory may become fragmented. Shared SQL and PL/SQL areas age out of the shared pool according to an LRU algorithm that is similar to database buffers. To improve performance and avoid reparsing, prevent large SQL or PL/SQL areas from aging out of the shared pool.</p>
<p>The <a id="d35703e2859" class="indexterm-anchor"></a><code>DBMS_SHARED_POOL</code> package enables you to keep objects in shared memory, so that they do not age out with the normal LRU mechanism. By using the <code>DBMS_SHARED_POOL</code> package to load the SQL and PL/SQL areas before memory fragmentation occurs, the objects can be kept in memory. This ensures that memory is available and prevents the sudden slowdowns in user response times that occur when SQL and PL/SQL areas are accessed after being aged out.</p>
<p>Consider using the <code>DBMS_SHARED_POOL</code> package:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>When loading large PL/SQL objects, such as the <code>STANDARD</code> and <code>DIUTIL</code> packages.</p>
<p>When large PL/SQL objects are loaded, user response time may be affected if smaller objects must age out of the shared pool to make room for the larger objects. In some cases, there may be insufficient memory to load the large objects.</p>
</li>
<li>
<p>To keep compiled triggers on frequently used tables in the shared pool.</p>
</li>
<li>
<p>Support sequences.</p>
<p>Sequence numbers are lost when a sequence ages out of the shared pool. The <code>DBMS_SHARED_POOL</code> package keeps sequences in the shared pool, thus preventing the loss of sequence numbers.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">To keep a SQL or PL/SQL area in shared memory:</p>
<ol>
<li>
<p>Decide which packages or cursors to keep in memory.</p>
</li>
<li>
<p>Start up the database.</p>
</li>
<li>
<p>Call the <code>DBMS_SHARED_POOL</code>.<code>KEEP</code> package to pin the objects.</p>
<p>This procedure ensures that the system does not run out of shared memory before the pinned objects are loaded. Pinning the objects early in the life of the database instance prevents memory fragmentation that may result from keeping a large portion of memory in the middle of the shared pool.</p>
</li>
</ol>
</div>
<!-- class="section" -->
<div class="section">
<div class="infoboxnotealso" id="GUID-E0D415CA-C4A7-4588-ADF2-4E302CE25849__GUID-D2A4117E-0200-41EB-87C5-F65CBC6AEC1C">
<p class="notep1">See Also:</p>
<p><a class="olink ARPLS" target="_blank" href="../ARPLS/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about using <code>DBMS_SHARED_POOL</code> procedures</p>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="TGDBA605"></a>
<div class="props_rev_3"><a id="GUID-7FD646B3-FCE3-4D3C-B988-C8D138FFD514"></a>
<h3 id="TGDBA-GUID-7FD646B3-FCE3-4D3C-B988-C8D138FFD514" class="sect3">Configuring the Reserved Pool</h3>
<div>
<p>Although Oracle Database breaks down very large requests for memory into smaller chunks, on some systems there may be a requirement to find a contiguous chunk of memory (such as over 5 KB, the default minimum reserved pool allocation is 4,400 bytes).</p>
<p>If there is not enough free space in the shared pool, then Oracle Database must search for and free enough memory to satisfy this request. This operation may hold the latch resource for significant periods of time, causing minor disruption to other concurrent attempts at memory allocation.</p>
<p>To avoid this, Oracle Database internally reserves a small memory area in the shared pool by default that the database can use if the shared pool does not have enough space. This reserved pool makes allocation of large chunks more efficient. The database can use this memory for operations such as PL/SQL and trigger compilation, or for temporary space while loading Java objects. After the memory allocated from the reserved pool is freed, it is returned to the reserved pool.</p>
<p>For large allocations, Oracle Database attempts to allocate space in the shared pool in the following order:</p>
<ol>
<li>
<p>From the unreserved part of the shared pool.</p>
</li>
<li>
<p>From the reserved pool.</p>
<p>If there is not enough space in the unreserved part of the shared pool, then Oracle Database checks whether the reserved pool has enough space.</p>
</li>
<li>
<p>From memory.</p>
<p>If there is not enough space in the unreserved and reserved parts of the shared pool, then Oracle Database attempts to free enough memory for the allocation. The database then retries the unreserved and reserved parts of the shared pool.</p>
</li>
</ol>
<p>This section describes how to configure the reserved pool and contains the following topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="tune_shared_pool.htm#GUID-F09B2C77-CBEA-4845-8878-FF42169BE128">Sizing the Reserved Pool</a></p>
</li>
<li>
<p><a href="tune_shared_pool.htm#GUID-F7D9790A-DF64-4FCD-B0B3-3E44AFA4500D">Increasing Memory Allocated to the Reserved Pool</a></p>
</li>
<li>
<p><a href="tune_shared_pool.htm#GUID-0713CB0A-A804-4612-B0E4-EE9796BC0B82">Reducing Memory Allocated to the Reserved Pool</a></p>
</li>
</ul>
</div>
<a id="TGDBA606"></a>
<div class="props_rev_3"><a id="GUID-F09B2C77-CBEA-4845-8878-FF42169BE128"></a>
<h4 id="TGDBA-GUID-F09B2C77-CBEA-4845-8878-FF42169BE128" class="sect4">Sizing the Reserved Pool</h4>
<div>
<div class="section">
<p>Typically, it is not necessary to change the default amount of space Oracle Database reserves for the reserved pool. However, there may be cases where you need to set aside space in the shared pool for unusually large allocations of memory.</p>
<p>You can set the reserved pool size by setting the value of the <code>SHARED_POOL_RESERVED_SIZE</code> initialization parameter. The default value for the <code>SHARED_POOL_RESERVED_SIZE</code> parameter is 5% of the <code>SHARED_POOL_SIZE</code> parameter.</p>
<p>If you set the value of the <code>SHARED_POOL_RESERVED_SIZE</code> parameter to more than half of the <code>SHARED_POOL_SIZE</code> parameter, then Oracle Database returns an error because the database does not allow you to reserve too much memory for the reserved pool. The amount of operating system memory available may also constrain the size of the shared pool. In general, set the value of the <code>SHARED_POOL_RESERVED_SIZE</code> parameter to no higher than 10% of the <code>SHARED_POOL_SIZE</code> parameter. On most systems, this value is sufficient if the shared pool is adequately tuned. If you increase this value, then the database takes additional memory from the shared pool and reduces the amount of unreserved shared pool memory available for smaller allocations.</p>
<p>When tuning these parameters, use statistics from the <a id="d35703e3071" class="indexterm-anchor"></a><code>V$SHARED_POOL_RESERVED</code> view. On a system with ample free memory to increase the size of the SGA, the value of the <code>REQUEST_MISSES</code> statistic should equal zero. If the system is constrained by operating system memory, then the goal is to have the <code>REQUEST_FAILURES</code> statistic equal zero, or at least prevent its value from increasing. If you cannot achieve these target values, then increase the value of the <code>SHARED_POOL_RESERVED_SIZE</code> parameter. Also, increase the value of the <code>SHARED_POOL_SIZE</code> parameter by the same amount, because the reserved list is taken from the shared pool.</p>
<p>The <code>V$SHARED_POOL_RESERVED</code> fixed view can also indicate when the value of the <code>SHARED_POOL_SIZE</code> parameter is too small. This can be the case if the <code>REQUEST_FAILURES</code> statistic is greater than zero and increasing. If the reserved list is enabled, then decrease the value of the <code>SHARED_POOL_RESERVED_SIZE</code> parameter. If the reserved list is not enabled, then increase the value of the <code>SHARED_POOL_SIZE</code> parameter, as described in <span class="q">&#34;<a href="tune_shared_pool.htm#GUID-220BC80E-FD16-4259-A7C1-E1967C510CAE">Increasing Memory Allocated to the Shared Pool</a>&#34;</span>.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="TGDBA607"></a>
<div class="props_rev_3"><a id="GUID-F7D9790A-DF64-4FCD-B0B3-3E44AFA4500D"></a>
<h4 id="TGDBA-GUID-F7D9790A-DF64-4FCD-B0B3-3E44AFA4500D" class="sect4">Increasing Memory Allocated to the Reserved Pool</h4>
<div>
<div class="section">
<p>The reserved pool is too small if the value of the <code>REQUEST_FAILURES</code> statistic is higher than zero and increasing. In this case, increase the amount of memory available to the reserved pool.</p>
<div class="infobox-note" id="GUID-F7D9790A-DF64-4FCD-B0B3-3E44AFA4500D__GUID-8F7E3F07-58AB-4E7D-BED8-1570C82BE575">
<p class="notep1">Note:</p>
<p>Increasing the amount of memory available on the reserved list does not affect users who do not allocate memory from the reserved list.</p>
</div>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">To increase the size of the reserved pool:</p>
<ul style="list-style-type: disc;">
<li>
<p>Increase the value of the <code>SHARED_POOL_RESERVED_SIZE</code> and <code>SHARED_POOL_SIZE</code> initialization parameters accordingly.</p>
<p>The values that you select for these parameters depend on the system&#39;s SGA size constraints, as described in <span class="q">&#34;<a href="tune_shared_pool.htm#GUID-F09B2C77-CBEA-4845-8878-FF42169BE128">Sizing the Reserved Pool</a>&#34;</span>.</p>
</li>
</ul>
</div>
<!-- class="section" --></div>
</div>
<a id="TGDBA608"></a>
<div class="props_rev_3"><a id="GUID-0713CB0A-A804-4612-B0E4-EE9796BC0B82"></a>
<h4 id="TGDBA-GUID-0713CB0A-A804-4612-B0E4-EE9796BC0B82" class="sect4">Reducing Memory Allocated to the Reserved Pool</h4>
<div>
<div class="section">
<p>The reserved pool is too large if the:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><code>REQUEST_MISSES</code> statistic is zero or not increasing</p>
</li>
<li>
<p><code>FREE_SPACE</code> statistic is greater than or equal to 50% of the <code>SHARED_POOL_RESERVED_SIZE</code> minimum</p>
</li>
</ul>
<p>If either of these conditions is true, then reduce the amount of memory available to the reserved pool.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">To reduce the size of the reserved pool:</p>
<ul style="list-style-type: disc;">
<li>
<p>Decrease the value of the <code>SHARED_POOL_RESERVED_SIZE</code> initialization parameter.</p>
</li>
</ul>
</div>
<!-- class="section" --></div>
</div>
</div>
</div>
<a id="TGDBA609"></a>
<div class="props_rev_3"><a id="GUID-096F2CDD-B3EE-4124-BBE3-F60400600972"></a>
<h2 id="TGDBA-GUID-096F2CDD-B3EE-4124-BBE3-F60400600972" class="sect2">Configuring the Large Pool</h2>
<div>
<p>Unlike the shared pool, the large pool does not have an LRU list. Oracle Database does not attempt to age objects out of the large pool. Consider configuring a large pool if the database instance uses any of the following Oracle Database features:</p>
<ul style="list-style-type: disc;">
<li>
<p>Shared server</p>
<p>In a shared server architecture, the session memory for each client process is included in the shared pool.</p>
</li>
<li>
<p>Parallel query</p>
<p>Parallel query uses shared pool memory to cache parallel execution message buffers.</p>
</li>
<li>
<p>Recovery Manager</p>
<p>Recovery Manager (RMAN) uses the shared pool to cache I/O buffers during backup and restore operations. For I/O server processes, backup, and restore operations, Oracle Database allocates buffers that are a few hundred kilobytes in size.</p>
</li>
</ul>
<p>This section describes how to configure the large pool for the shared server architecture and contains the following topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="tune_shared_pool.htm#GUID-43589254-52A2-495F-B01A-04D0885A9E0D">Configuring the Large Pool for Shared Server Architecture</a></p>
</li>
<li>
<p><a href="tune_shared_pool.htm#GUID-98BE477D-35FE-435B-B05C-0A99C5F516B5">Configuring the Large Pool for Parallel Query</a></p>
</li>
<li>
<p><a href="tune_shared_pool.htm#GUID-C155964B-7F66-49C4-9F88-916F0217303D">Sizing the Large Pool</a></p>
</li>
<li>
<p><a href="tune_shared_pool.htm#GUID-2354F7EE-7E3B-4399-B4D9-646BDB00E162">Limiting Memory Use for User Sessions</a></p>
</li>
<li>
<p><a href="tune_shared_pool.htm#GUID-8ABD6078-F667-46A9-8289-89B5D4FF18B6">Reducing Memory Use Using Three-Tier Connections</a></p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-096F2CDD-B3EE-4124-BBE3-F60400600972__GUID-02CAC01D-38EE-4BBE-BEA4-F1FF86F632F3">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a class="olink CNCPT" target="_blank" href="../CNCPT/toc.htm"><span class="italic">Oracle Database Concepts</span></a> for information about the large pool</p>
</li>
<li>
<p><a class="olink BRADV89857" target="_blank" href="../BRADV/rcmtunin.htm#BRADV89857"><span class="italic">Oracle Database Backup and Recovery User&#39;s Guide</span></a> for information about sizing the large pool with Recovery Manager</p>
</li>
</ul>
</div>
</div>
<a id="TGDBA610"></a>
<div class="props_rev_3"><a id="GUID-43589254-52A2-495F-B01A-04D0885A9E0D"></a>
<h3 id="TGDBA-GUID-43589254-52A2-495F-B01A-04D0885A9E0D" class="sect3">Configuring the Large Pool for Shared Server Architecture</h3>
<div>
<p>As Oracle Database allocates shared pool memory to shared server sessions, the amount of shared pool memory available for the library cache and data dictionary cache decreases. If you allocate the shared server session memory from a different pool, then the shared pool can be reserved for caching shared SQL.</p>
<p>Oracle recommends using the large pool to allocate the <a id="d35703e3373" class="indexterm-anchor"></a><a id="d35703e3377" class="indexterm-anchor"></a>User Global Area (UGA) for the shared server architecture. Using the large pool instead of the shared pool decreases fragmentation of the shared pool and eliminates the performance overhead from shrinking the shared SQL cache.</p>
<p>By default, the large pool is not configured. If you do not configure the large pool, then Oracle Database uses the shared pool for shared server user session memory. If you do configure the large pool, Oracle Database still allocates a fixed amount of memory (about 10K) for each configured session from the shared pool when a shared server architecture is used. In either case, consider increasing the size of the shared pool accordingly.</p>
<div class="infobox-note" id="GUID-43589254-52A2-495F-B01A-04D0885A9E0D__GUID-66FDEB1C-B2DC-4158-A87C-AE54EAB39192">
<p class="notep1">Note:</p>
<p>Even though use of shared memory increases with shared servers, the total amount of memory use decreases. This is because there are fewer processes; therefore, Oracle Database uses less <a id="d35703e3387" class="indexterm-anchor"></a>PGA memory with shared servers when compared to dedicated server environments.</p>
</div>
<div class="infoboxnotealso" id="GUID-43589254-52A2-495F-B01A-04D0885A9E0D__GUID-53A14D55-B25C-4CC7-9E18-CBD1D4ACB03B">
<p class="notep1">Tip:</p>
<p>To specify the maximum number of concurrent shared server sessions that the database allows, use the <code>CIRCUITS</code> initialization parameter.</p>
</div>
<div class="infoboxnotealso" id="GUID-43589254-52A2-495F-B01A-04D0885A9E0D__GUID-374BC232-1252-4622-9647-7D52AD4E832F">
<p class="notep1">Tip:</p>
<p>For best performance with sort operations using shared servers, set the values of the <code>SORT_AREA_SIZE</code> and <code>SORT_AREA_RETAINED_SIZE</code> initialization parameters to the same value. This keeps the sort result in the large pool instead of writing it to disk.</p>
</div>
</div>
</div>
<a id="TGDBA95399"></a>
<div class="props_rev_3"><a id="GUID-98BE477D-35FE-435B-B05C-0A99C5F516B5"></a>
<h3 id="TGDBA-GUID-98BE477D-35FE-435B-B05C-0A99C5F516B5" class="sect3">Configuring the Large Pool for Parallel Query</h3>
<div>
<p>Parallel query uses shared pool memory to cache parallel execution message buffers when Automatic Memory Management or Automatic Shared Memory Management is not enabled. Caching parallel execution message buffers in the shared pool increases its workload and may cause fragmentation.</p>
<p>To avoid possible negative impact to performance, Oracle recommends that you do not manage SGA memory manually when parallel query is used. Instead, you should enable Automatic Memory Management or Automatic Shared Memory Management to ensure that the large pool will be used to cache parallel execution memory buffers.</p>
<div class="infoboxnotealso" id="GUID-98BE477D-35FE-435B-B05C-0A99C5F516B5__GUID-6AD0AE9B-80E5-4E58-8318-40E512E5B20C">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="memory.htm#GUID-4433AFDE-47AB-41D5-9DE0-E26CBDD4576D">Automatic Memory Management</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="memory.htm#GUID-F082EAF9-1B65-4F82-BA33-4137768DB5BC">Automatic Shared Memory Management</a>&#34;</span></p>
</li>
<li>
<p><a class="olink DWHSG" target="_blank" href="../DWHSG/toc.htm"><span class="italic">Oracle Database Data Warehousing Guide</span></a> for information about configuring the large pool for parallel query</p>
</li>
</ul>
</div>
</div>
</div>
<a id="TGDBA612"></a><a id="TGDBA613"></a><a id="TGDBA611"></a>
<div class="props_rev_3"><a id="GUID-C155964B-7F66-49C4-9F88-916F0217303D"></a>
<h3 id="TGDBA-GUID-C155964B-7F66-49C4-9F88-916F0217303D" class="sect3">Sizing the Large Pool</h3>
<div>
<div class="section">
<p>When storing shared server-related UGA in the large pool, the exact amount of UGA that Oracle Database uses depends on the application. Each application requires a different amount of memory for session information, and configuration of the large pool should reflect the memory requirement.</p>
<p>Oracle Database collects statistics on memory used by a session and stores them in the <a id="d35703e3509" class="indexterm-anchor"></a><code>V$SESSTAT</code> view. <a href="tune_shared_pool.htm#GUID-C155964B-7F66-49C4-9F88-916F0217303D__BABJDAAJ" title="This table describes the statistics collected in the V$SESSTAT view for total memory used.">Table 14-2</a> lists the statistics from this view that reflect session UGA memory.</p>
<div class="tblformal" id="GUID-C155964B-7F66-49C4-9F88-916F0217303D__BABJDAAJ">
<p class="titleintable">Table 14-2 Memory Statistics in the V$SESSTAT View</p>
<table class="cellalignment11" title="Memory Statistics in the V$SESSTAT View" summary="This table describes the statistics collected in the V$SESSTAT view for total memory used.">
<thead>
<tr class="cellalignment2">
<th class="cellalignment20" id="d35703e3529">Statistic</th>
<th class="cellalignment21" id="d35703e3532">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2">
<td class="cellalignment22" id="d35703e3537" headers="d35703e3529">
<p><a id="d35703e3539" class="indexterm-anchor"></a><a id="d35703e3541" class="indexterm-anchor"></a><code>session UGA memory</code></p>
</td>
<td class="cellalignment23" headers="d35703e3537 d35703e3532">
<p>Shows the amount of memory in bytes allocated to the session.</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment22" id="d35703e3551" headers="d35703e3529">
<p><a id="d35703e3553" class="indexterm-anchor"></a><a id="d35703e3557" class="indexterm-anchor"></a><code>session UGA memory max</code></p>
</td>
<td class="cellalignment23" headers="d35703e3551 d35703e3532">
<p>Shows the maximum amount of memory in bytes ever allocated to the session.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>There are two methods to use this view to determine a correct size for the large pool. One method is to configure the size of the large pool based on the number of simultaneously active sessions. To do this, observe UGA memory usage for a typical user and multiply this amount by the estimated number of user sessions. For example, if the shared server requires 200K to 300K to store session information for a typical user session and you anticipate 100 active user sessions simultaneously, then configure the large pool to 30 MB.</p>
<p>Another method is to calculate the total and maximum memory being used by all user sessions. <a href="tune_shared_pool.htm#GUID-C155964B-7F66-49C4-9F88-916F0217303D__BABDFFIB">Example 14-5</a> shows two queries of the <code>V$SESSTAT</code> and <code>V$STATNAME</code> views to do this.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-C155964B-7F66-49C4-9F88-916F0217303D__BABDFFIB">
<p class="titleinexample">Example 14-5 Querying the V$SESSTAT and V$STATNAME Views</p>
<p>While the application is running, issue the following queries:</p>
<pre dir="ltr">SELECT SUM(value) || &#39; bytes&#39; &#34;total memory for all sessions&#34;
  FROM V$SESSTAT, V$STATNAME
 WHERE name = &#39;session uga memory&#39;
   AND V$SESSTAT.STATISTIC# = V$STATNAME.STATISTIC#;
</pre>
<pre dir="ltr">SELECT SUM(value) || &#39; bytes&#39; &#34;total max mem for all sessions&#34;
  FROM V$SESSTAT, V$STATNAME
 WHERE name = &#39;session uga memory max&#39;
   AND V$SESSTAT.STATISTIC# = V$STATNAME.STATISTIC#;
</pre>
<p>These queries also select from the <code>V$STATNAME</code> view to obtain internal identifiers for <code>session memory</code> and <code>max session memory</code>.</p>
<p>The output of these queries might look like the following:</p>
<pre dir="ltr">TOTAL MEMORY FOR ALL SESSIONS
-----------------------------
157125 BYTES
</pre>
<pre dir="ltr">TOTAL MAX MEM FOR ALL SESSIONS
------------------------------
417381 BYTES
</pre>
<p>The result of the first query shows that the memory currently allocated to all sessions is 157,125 bytes. This value is the total memory with a location that depends on how the sessions are connected to the database. If the sessions are connected to dedicated server processes, then this memory is part of the memories of the user processes. If the sessions are connected to shared server processes, then this memory is part of the shared pool.</p>
<p>The result of the second query shows that the sum of the maximum size of the memory for all sessions is 417,381 bytes. The second result is greater than the first because some sessions have deallocated memory since allocating their maximum amounts.</p>
<p>Use the result of either queries to determine the correct size for the shared pool. The first value is likely to be a better estimate than the second, unless if you expect all sessions to reach their maximum allocations simultaneously.</p>
<div class="p"><span class="bold">To size the large pool:</span>
<ol>
<li>
<p>Verify the pool (shared pool or large pool) in which the memory for an object resides by checking the <code>POOL</code> column in the <code>V$SGASTAT</code> view.</p>
</li>
<li>
<p>Set a value for the <a id="d35703e3625" class="indexterm-anchor"></a><code>LARGE_POOL_SIZE</code> initialization parameter.</p>
<p>The minimum value for this parameter is 300K.</p>
</li>
</ol>
</div>
</div>
<!-- class="example" --></div>
</div>
<a id="TGDBA614"></a>
<div class="props_rev_3"><a id="GUID-2354F7EE-7E3B-4399-B4D9-646BDB00E162"></a>
<h3 id="TGDBA-GUID-2354F7EE-7E3B-4399-B4D9-646BDB00E162" class="sect3">Limiting Memory Use for User Sessions</h3>
<div>
<div class="section">
<p>To restrict the memory used by each client session from the SGA, set a resource limit using <code>PRIVATE_SGA</code>.</p>
<p><code>PRIVATE_SGA</code> defines the number of bytes of memory used from the SGA by a session. However, this parameter is rarely used, because most DBAs do not limit SGA consumption on a user-by-user basis.</p>
<div class="infoboxnotealso" id="GUID-2354F7EE-7E3B-4399-B4D9-646BDB00E162__GUID-5ABBE044-FB25-4ADF-9607-61E8D6370A54">
<p class="notep1">See Also:</p>
<p><a class="olink SQLRF00814" target="_blank" href="../SQLRF/statements_2011.htm#SQLRF00814"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about setting the <code>PRIVATE_SGA</code> resource limit</p>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="TGDBA615"></a>
<div class="props_rev_3"><a id="GUID-8ABD6078-F667-46A9-8289-89B5D4FF18B6"></a>
<h3 id="TGDBA-GUID-8ABD6078-F667-46A9-8289-89B5D4FF18B6" class="sect3">Reducing Memory Use Using Three-Tier Connections</h3>
<div>
<p>If there is a high number of connected users, then consider reducing memory usage by implementing three-tier connections. Using a transaction process (TP) monitor is feasible only with pure transactional models because locks and uncommitted DML operations cannot be held between calls.</p>
<p>Using a shared server environment:</p>
<ul style="list-style-type: disc;">
<li>
<p>Is much less restrictive of the application design than a TP monitor.</p>
</li>
<li>
<p>Dramatically reduces operating system process count and context switches by enabling users to share a pool of servers.</p>
</li>
<li>
<p>Substantially reduces overall memory usage, even though more SGA is used in shared server mode.</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1">
<tr>
<td class="cellalignment8">
<table class="cellalignment6">
<tr>
<td class="cellalignment5"><a href="tune_buffer_cache.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5"><a href="tune_result_cache.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2013, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment10">
<table class="cellalignment4">
<tr>
<td class="cellalignment5"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>