<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-105387"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Examples%20of%20Using%20the%20Data%20Pump%20API"></a><title>Examples of Using the Data Pump API</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="dcterms.created" content="2017-07-10T17:06:49Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Utilities"/>
<meta name="dcterms.identifier" content="E41528-09"/>
<meta name="dcterms.isVersionOf" content="SUTIL"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="GUID-22D4851C-4057-4BBB-B7F0-DB9091A30641.htm" title="Previous" type="text/html"/>
<link rel="Next" href="GUID-8D037494-07FA-4226-B507-E1B2ED10C144.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41528-09.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-5AAC848B-5A2B-4FD1-97ED-D3A048263118"></a> <span id="PAGE" style="display:none;">208/1019</span> <!-- End Header -->
<a id="SUTIL3308"></a><a id="SUTIL3309"></a><a id="SUTIL3310"></a><a id="SUTIL3943"></a><a id="SUTIL977"></a>
<h1 id="SUTIL-GUID-5AAC848B-5A2B-4FD1-97ED-D3A048263118" class="sect1">Examples of Using the Data Pump API</h1>
<div>
<p>This section provides the following examples to help you get started using the Data Pump API:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="GUID-5AAC848B-5A2B-4FD1-97ED-D3A048263118.htm#GUID-5AAC848B-5A2B-4FD1-97ED-D3A048263118__i1006610">Example 6-1</a></p>
</li>
<li>
<p><a href="GUID-5AAC848B-5A2B-4FD1-97ED-D3A048263118.htm#GUID-5AAC848B-5A2B-4FD1-97ED-D3A048263118__i1006835">Example 6-2</a></p>
</li>
<li>
<p><a href="GUID-5AAC848B-5A2B-4FD1-97ED-D3A048263118.htm#GUID-5AAC848B-5A2B-4FD1-97ED-D3A048263118__i1008408">Example 6-3</a></p>
</li>
<li>
<p><a href="GUID-5AAC848B-5A2B-4FD1-97ED-D3A048263118.htm#GUID-5AAC848B-5A2B-4FD1-97ED-D3A048263118__BABBEHEF">Example 6-4</a></p>
</li>
</ul>
<p>The examples are in the form of PL/SQL scripts. If you choose to copy these scripts and run them, then you must first do the following, using SQL*Plus:</p>
<ul style="list-style-type: disc;">
<li>
<p>Create a directory object and grant <code class="codeph">READ</code> and <code class="codeph">WRITE</code> access to it. For example, to create a directory object named <code class="codeph">dmpdir</code> to which you have access, do the following. Replace <span class="italic"><code class="codeph">user</code></span> with your username.</p>
<pre dir="ltr">SQL&gt; CREATE DIRECTORY dmpdir AS &#39;/rdbms/work&#39;;
SQL&gt; GRANT READ, WRITE ON DIRECTORY dmpdir TO <span class="italic">user</span>;
</pre></li>
<li>
<p>Ensure that you have the <code class="codeph">EXP_FULL_DATABASE</code> and <code class="codeph">IMP_FULL_DATABASE</code> roles. To see a list of all roles assigned to you within your security domain, do the following:</p>
<pre dir="ltr">SQL&gt; SELECT * FROM SESSION_ROLES;
</pre>
<p>If you do not have the necessary roles assigned to you, then contact your system administrator for help.</p>
</li>
<li>
<p>Turn on server output if it is not already on. This is done as follows:</p>
<pre dir="ltr">SQL&gt; SET SERVEROUTPUT ON
</pre>
<p>If you do not do this, then you will not see any output to your screen. You must do this in the same session in which you run the example. If you exit SQL*Plus, then this setting is lost and must be reset when you begin a new session. (It must also be reset if you connect to a different user name.)</p>
</li>
</ul>
<div class="example" id="GUID-5AAC848B-5A2B-4FD1-97ED-D3A048263118__i1006610">
<p class="titleinexample">Example 6-1 Performing a Simple Schema Export</p>
<p>The PL/SQL script in this example shows how to use the Data Pump API to perform a simple schema export of the <code class="codeph">HR</code> schema. It shows how to create a job, start it, and monitor it. Additional information about the example is contained in the comments within the script. To keep the example simple, exceptions from any of the API calls will not be trapped. However, in a production environment, Oracle recommends that you define exception handlers and call <code class="codeph">GET_STATUS</code> to retrieve more detailed error information when a failure occurs.</p>
<p>Connect as user <code class="codeph">SYSTEM</code> to use this script.</p>
<pre dir="ltr">DECLARE
  ind NUMBER;              -- Loop index
  h1 NUMBER;               -- Data Pump job handle
  percent_done NUMBER;     -- Percentage of job complete
  job_state VARCHAR2(30);  -- To keep track of job state
  le ku$_LogEntry;         -- For WIP and error messages
  js ku$_JobStatus;        -- The job status from get_status
  jd ku$_JobDesc;          -- The job description from get_status
  sts ku$_Status;          -- The status object returned by get_status
BEGIN

-- Create a (user-named) Data Pump job to do a schema export.

  h1 := DBMS_DATAPUMP.OPEN(&#39;EXPORT&#39;,&#39;SCHEMA&#39;,NULL,&#39;EXAMPLE1&#39;,&#39;LATEST&#39;);

-- Specify a single dump file for the job (using the handle just returned)
-- and a directory object, which must already be defined and accessible
-- to the user running this procedure.

  DBMS_DATAPUMP.ADD_FILE(h1,&#39;example1.dmp&#39;,&#39;DMPDIR&#39;);

-- A metadata filter is used to specify the schema that will be exported.

  DBMS_DATAPUMP.METADATA_FILTER(h1,&#39;SCHEMA_EXPR&#39;,&#39;IN (&#39;&#39;HR&#39;&#39;)&#39;);

-- Start the job. An exception will be generated if something is not set up
-- properly. 

  DBMS_DATAPUMP.START_JOB(h1);

-- The export job should now be running. In the following loop, the job
-- is monitored until it completes. In the meantime, progress information is
-- displayed.
 
  percent_done := 0;
  job_state := &#39;UNDEFINED&#39;;
  while (job_state != &#39;COMPLETED&#39;) and (job_state != &#39;STOPPED&#39;) loop
    dbms_datapump.get_status(h1,
           dbms_datapump.ku$_status_job_error +
           dbms_datapump.ku$_status_job_status +
           dbms_datapump.ku$_status_wip,-1,job_state,sts);
    js := sts.job_status;

-- If the percentage done changed, display the new value.

    if js.percent_done != percent_done
    then
      dbms_output.put_line(&#39;*** Job percent done = &#39; ||
                           to_char(js.percent_done));
      percent_done := js.percent_done;
    end if;

-- If any work-in-progress (WIP) or error messages were received for the job,
-- display them.

   if (bitand(sts.mask,dbms_datapump.ku$_status_wip) != 0)
    then
      le := sts.wip;
    else
      if (bitand(sts.mask,dbms_datapump.ku$_status_job_error) != 0)
      then
        le := sts.error;
      else
        le := null;
      end if;
    end if;
    if le is not null
    then
      ind := le.FIRST;
      while ind is not null loop
        dbms_output.put_line(le(ind).LogText);
        ind := le.NEXT(ind);
      end loop;
    end if;
  end loop;

-- Indicate that the job finished and detach from it.

  dbms_output.put_line(&#39;Job has completed&#39;);
  dbms_output.put_line(&#39;Final job state = &#39; || job_state);
  dbms_datapump.detach(h1);
END;
/
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-5AAC848B-5A2B-4FD1-97ED-D3A048263118__i1006835">
<p class="titleinexample">Example 6-2 Importing a Dump File and Remapping All Schema Objects</p>
<p>The script in this example imports the dump file created in <a href="GUID-5AAC848B-5A2B-4FD1-97ED-D3A048263118.htm#GUID-5AAC848B-5A2B-4FD1-97ED-D3A048263118__i1006610">Example 6-1</a> (an export of the <code class="codeph">hr</code> schema). All schema objects are remapped from the <code class="codeph">hr</code> schema to the <code class="codeph">blake</code> schema. To keep the example simple, exceptions from any of the API calls will not be trapped. However, in a production environment, Oracle recommends that you define exception handlers and call <code class="codeph">GET_STATUS</code> to retrieve more detailed error information when a failure occurs.</p>
<p>Connect as user <code class="codeph">SYSTEM</code> to use this script.</p>
<pre dir="ltr">DECLARE
  ind NUMBER;              -- Loop index
  h1 NUMBER;               -- Data Pump job handle
  percent_done NUMBER;     -- Percentage of job complete
  job_state VARCHAR2(30);  -- To keep track of job state
  le ku$_LogEntry;         -- For WIP and error messages
  js ku$_JobStatus;        -- The job status from get_status
  jd ku$_JobDesc;          -- The job description from get_status
  sts ku$_Status;          -- The status object returned by get_status
BEGIN

-- Create a (user-named) Data Pump job to do a &#34;full&#34; import (everything
-- in the dump file without filtering).

  h1 := DBMS_DATAPUMP.OPEN(&#39;IMPORT&#39;,&#39;FULL&#39;,NULL,&#39;EXAMPLE2&#39;);

-- Specify the single dump file for the job (using the handle just returned)
-- and directory object, which must already be defined and accessible
-- to the user running this procedure. This is the dump file created by
-- the export operation in the first example.

  DBMS_DATAPUMP.ADD_FILE(h1,&#39;example1.dmp&#39;,&#39;DMPDIR&#39;);

-- A metadata remap will map all schema objects from HR to BLAKE.

  DBMS_DATAPUMP.METADATA_REMAP(h1,&#39;REMAP_SCHEMA&#39;,&#39;HR&#39;,&#39;BLAKE&#39;);

-- If a table already exists in the destination schema, skip it (leave
-- the preexisting table alone). This is the default, but it does not hurt
-- to specify it explicitly.

  DBMS_DATAPUMP.SET_PARAMETER(h1,&#39;TABLE_EXISTS_ACTION&#39;,&#39;SKIP&#39;);

-- Start the job. An exception is returned if something is not set up properly.

  DBMS_DATAPUMP.START_JOB(h1);

-- The import job should now be running. In the following loop, the job is 
-- monitored until it completes. In the meantime, progress information is 
-- displayed. Note: this is identical to the export example.
 
 percent_done := 0;
  job_state := &#39;UNDEFINED&#39;;
  while (job_state != &#39;COMPLETED&#39;) and (job_state != &#39;STOPPED&#39;) loop
    dbms_datapump.get_status(h1,
           dbms_datapump.ku$_status_job_error +
           dbms_datapump.ku$_status_job_status +
           dbms_datapump.ku$_status_wip,-1,job_state,sts);
    js := sts.job_status;

-- If the percentage done changed, display the new value.

     if js.percent_done != percent_done
    then
      dbms_output.put_line(&#39;*** Job percent done = &#39; ||
                           to_char(js.percent_done));
      percent_done := js.percent_done;
    end if;

-- If any work-in-progress (WIP) or Error messages were received for the job,
-- display them.

       if (bitand(sts.mask,dbms_datapump.ku$_status_wip) != 0)
    then
      le := sts.wip;
    else
      if (bitand(sts.mask,dbms_datapump.ku$_status_job_error) != 0)
      then
        le := sts.error;
      else
        le := null;
      end if;
    end if;
    if le is not null
    then
      ind := le.FIRST;
      while ind is not null loop
        dbms_output.put_line(le(ind).LogText);
        ind := le.NEXT(ind);
      end loop;
    end if;
  end loop;

-- Indicate that the job finished and gracefully detach from it. 

  dbms_output.put_line(&#39;Job has completed&#39;);
  dbms_output.put_line(&#39;Final job state = &#39; || job_state);
  dbms_datapump.detach(h1);
END;
/
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-5AAC848B-5A2B-4FD1-97ED-D3A048263118__i1008408">
<p class="titleinexample">Example 6-3 Using Exception Handling During a Simple Schema Export</p>
<p>The script in this example shows a simple schema export using the Data Pump API. It extends <a href="GUID-5AAC848B-5A2B-4FD1-97ED-D3A048263118.htm#GUID-5AAC848B-5A2B-4FD1-97ED-D3A048263118__i1006610">Example 6-1</a> to show how to use exception handling to catch the <code class="codeph">SUCCESS_WITH_INFO</code> case, and how to use the <code class="codeph">GET_STATUS</code> procedure to retrieve additional information about errors. If you want to get exception information about a <code class="codeph">DBMS_DATAPUMP.OPEN</code> or <code class="codeph">DBMS_DATAPUMP.ATTACH</code> failure, then call <code class="codeph">DBMS_DATAPUMP.GET_STATUS</code> with a <code class="codeph">DBMS_DATAPUMP.KU$_STATUS_JOB_ERROR</code> information mask and a NULL job handle to retrieve the error details.</p>
<p>Connect as user <code class="codeph">SYSTEM</code> to use this example.</p>
<pre dir="ltr">DECLARE
  ind NUMBER;              -- Loop index
  spos NUMBER;             -- String starting position
  slen NUMBER;             -- String length for output
  h1 NUMBER;               -- Data Pump job handle
  percent_done NUMBER;     -- Percentage of job complete
  job_state VARCHAR2(30);  -- To keep track of job state
  le ku$_LogEntry;         -- For WIP and error messages
  js ku$_JobStatus;        -- The job status from get_status
  jd ku$_JobDesc;          -- The job description from get_status
  sts ku$_Status;          -- The status object returned by get_status
BEGIN

-- Create a (user-named) Data Pump job to do a schema export.

  h1 := dbms_datapump.open(&#39;EXPORT&#39;,&#39;SCHEMA&#39;,NULL,&#39;EXAMPLE3&#39;,&#39;LATEST&#39;);

-- Specify a single dump file for the job (using the handle just returned)
-- and a directory object, which must already be defined and accessible
-- to the user running this procedure.

  dbms_datapump.add_file(h1,&#39;example3.dmp&#39;,&#39;DMPDIR&#39;);

-- A metadata filter is used to specify the schema that will be exported.

  dbms_datapump.metadata_filter(h1,&#39;SCHEMA_EXPR&#39;,&#39;IN (&#39;&#39;HR&#39;&#39;)&#39;);

-- Start the job. An exception will be returned if something is not set up
-- properly.One possible exception that will be handled differently is the
-- success_with_info exception. success_with_info means the job started
-- successfully, but more information is available through get_status about
-- conditions around the start_job that the user might want to be aware of.

    begin
    dbms_datapump.start_job(h1);
    dbms_output.put_line(&#39;Data Pump job started successfully&#39;);
    exception
      when others then
        if sqlcode = dbms_datapump.success_with_info_num
        then
          dbms_output.put_line(&#39;Data Pump job started with info available:&#39;);
          dbms_datapump.get_status(h1,
                                   dbms_datapump.ku$_status_job_error,0,
                                   job_state,sts);
          if (bitand(sts.mask,dbms_datapump.ku$_status_job_error) != 0)
          then
            le := sts.error;
            if le is not null
            then
              ind := le.FIRST;
              while ind is not null loop
                dbms_output.put_line(le(ind).LogText);
                ind := le.NEXT(ind);
              end loop;
            end if;
          end if;
        else
          raise;
        end if;
  end;

-- The export job should now be running. In the following loop, 
-- the job is monitored until it completes. In the meantime, progress information -- is displayed.
 
 percent_done := 0;
  job_state := &#39;UNDEFINED&#39;;
  while (job_state != &#39;COMPLETED&#39;) and (job_state != &#39;STOPPED&#39;) loop
    dbms_datapump.get_status(h1,
           dbms_datapump.ku$_status_job_error +
           dbms_datapump.ku$_status_job_status +
           dbms_datapump.ku$_status_wip,-1,job_state,sts);
    js := sts.job_status;

-- If the percentage done changed, display the new value.

     if js.percent_done != percent_done
    then
      dbms_output.put_line(&#39;*** Job percent done = &#39; ||
                           to_char(js.percent_done));
      percent_done := js.percent_done;
    end if;

-- Display any work-in-progress (WIP) or error messages that were received for
-- the job.

      if (bitand(sts.mask,dbms_datapump.ku$_status_wip) != 0)
    then
      le := sts.wip;
    else
      if (bitand(sts.mask,dbms_datapump.ku$_status_job_error) != 0)
      then
        le := sts.error;
      else
        le := null;
      end if;
    end if;
    if le is not null
    then
      ind := le.FIRST;
      while ind is not null loop
        dbms_output.put_line(le(ind).LogText);
        ind := le.NEXT(ind);
      end loop;
    end if;
  end loop;

-- Indicate that the job finished and detach from it.

  dbms_output.put_line(&#39;Job has completed&#39;);
  dbms_output.put_line(&#39;Final job state = &#39; || job_state);
  dbms_datapump.detach(h1);

-- Any exceptions that propagated to this point will be captured. The
-- details will be retrieved from get_status and displayed.

  exception
    when others then
      dbms_output.put_line(&#39;Exception in Data Pump job&#39;);
      dbms_datapump.get_status(h1,dbms_datapump.ku$_status_job_error,0,
                               job_state,sts);
      if (bitand(sts.mask,dbms_datapump.ku$_status_job_error) != 0)
      then
        le := sts.error;
        if le is not null
        then
          ind := le.FIRST;
          while ind is not null loop
            spos := 1;
            slen := length(le(ind).LogText);
            if slen &gt; 255
            then
              slen := 255;
            end if;
            while slen &gt; 0 loop
              dbms_output.put_line(substr(le(ind).LogText,spos,slen));
              spos := spos + 255;
              slen := length(le(ind).LogText) + 1 - spos;
            end loop;
            ind := le.NEXT(ind);
          end loop;
        end if;
      end if;
END;
/
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-5AAC848B-5A2B-4FD1-97ED-D3A048263118__BABBEHEF">
<p class="titleinexample">Example 6-4 Displaying Dump File Information</p>
<p>The PL/SQL script in this example shows how to use the Data Pump API procedure <code class="codeph">DBMS_DATAPUMP.GET_DUMPFILE_INFO</code> to display information about a Data Pump dump file outside the context of any Data Pump job. This example displays information contained in the <code class="codeph">example1.dmp</code> dump file created by the sample PL/SQL script in <a href="GUID-5AAC848B-5A2B-4FD1-97ED-D3A048263118.htm#GUID-5AAC848B-5A2B-4FD1-97ED-D3A048263118__i1006610">Example 6-1</a>.</p>
<p>This PL/SQL script can also be used to display information for dump files created by original Export (the <code class="codeph">exp</code> utility) as well as by the <code class="codeph">ORACLE_DATAPUMP</code> external tables access driver.</p>
<p>Connect as user <code class="codeph">SYSTEM</code> to use this script.</p>
<pre dir="ltr">SET VERIFY OFF
SET FEEDBACK OFF
 
DECLARE
  ind        NUMBER;
  fileType   NUMBER;
  value      VARCHAR2(2048);
  infoTab    KU$_DUMPFILE_INFO := KU$_DUMPFILE_INFO();
 
BEGIN
  --
  -- Get the information about the dump file into the infoTab.
  --
  BEGIN
    DBMS_DATAPUMP.GET_DUMPFILE_INFO(&#39;example1.dmp&#39;,&#39;DMPDIR&#39;,infoTab,fileType);
    DBMS_OUTPUT.PUT_LINE(&#39;---------------------------------------------&#39;);
    DBMS_OUTPUT.PUT_LINE(&#39;Information for file: example1.dmp&#39;);
 
    --
    -- Determine what type of file is being looked at.
    --
    CASE fileType
      WHEN 1 THEN
        DBMS_OUTPUT.PUT_LINE(&#39;example1.dmp is a Data Pump dump file&#39;);
      WHEN 2 THEN
        DBMS_OUTPUT.PUT_LINE(&#39;example1.dmp is an Original Export dump file&#39;);
      WHEN 3 THEN
        DBMS_OUTPUT.PUT_LINE(&#39;example1.dmp is an External Table dump file&#39;);
      ELSE
        DBMS_OUTPUT.PUT_LINE(&#39;example1.dmp is not a dump file&#39;);
        DBMS_OUTPUT.PUT_LINE(&#39;---------------------------------------------&#39;);
    END CASE;
 
  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE(&#39;---------------------------------------------&#39;);
      DBMS_OUTPUT.PUT_LINE(&#39;Error retrieving information for file: &#39; ||
                           &#39;example1.dmp&#39;);
      DBMS_OUTPUT.PUT_LINE(SQLERRM);
      DBMS_OUTPUT.PUT_LINE(&#39;---------------------------------------------&#39;);
      fileType := 0;
  END;
 
  --
  -- If a valid file type was returned, then loop through the infoTab and 
  -- display each item code and value returned.
  --
  IF fileType &gt; 0
  THEN
    DBMS_OUTPUT.PUT_LINE(&#39;The information table has &#39; || 
                          TO_CHAR(infoTab.COUNT) || &#39; entries&#39;);
    DBMS_OUTPUT.PUT_LINE(&#39;---------------------------------------------&#39;);
 
    ind := infoTab.FIRST;
    WHILE ind IS NOT NULL
    LOOP
      --
      -- The following item codes return boolean values in the form
      -- of a &#39;1&#39; or a &#39;0&#39;. Display them as &#39;Yes&#39; or &#39;No&#39;.
      --
      value := NVL(infoTab(ind).value, &#39;NULL&#39;);
      IF infoTab(ind).item_code IN
         (DBMS_DATAPUMP.KU$_DFHDR_MASTER_PRESENT,
          DBMS_DATAPUMP.KU$_DFHDR_DIRPATH,
          DBMS_DATAPUMP.KU$_DFHDR_METADATA_COMPRESSED,
          DBMS_DATAPUMP.KU$_DFHDR_DATA_COMPRESSED,
          DBMS_DATAPUMP.KU$_DFHDR_METADATA_ENCRYPTED,
          DBMS_DATAPUMP.KU$_DFHDR_DATA_ENCRYPTED,
          DBMS_DATAPUMP.KU$_DFHDR_COLUMNS_ENCRYPTED)
      THEN
        CASE value
          WHEN &#39;1&#39; THEN value := &#39;Yes&#39;;
          WHEN &#39;0&#39; THEN value := &#39;No&#39;;
        END CASE;
      END IF;
 
      --
      -- Display each item code with an appropriate name followed by
      -- its value.
      --
      CASE infoTab(ind).item_code
        --
        -- The following item codes have been available since Oracle
        -- Database 10g, Release 10.2.
        --
        WHEN DBMS_DATAPUMP.KU$_DFHDR_FILE_VERSION   THEN
          DBMS_OUTPUT.PUT_LINE(&#39;Dump File Version:         &#39; || value);
        WHEN DBMS_DATAPUMP.KU$_DFHDR_MASTER_PRESENT THEN
          DBMS_OUTPUT.PUT_LINE(&#39;Master Table Present:      &#39; || value);
        WHEN DBMS_DATAPUMP.KU$_DFHDR_GUID THEN
          DBMS_OUTPUT.PUT_LINE(&#39;Job Guid:                  &#39; || value);
        WHEN DBMS_DATAPUMP.KU$_DFHDR_FILE_NUMBER THEN
          DBMS_OUTPUT.PUT_LINE(&#39;Dump File Number:          &#39; || value);
        WHEN DBMS_DATAPUMP.KU$_DFHDR_CHARSET_ID  THEN
          DBMS_OUTPUT.PUT_LINE(&#39;Character Set ID:          &#39; || value);
        WHEN DBMS_DATAPUMP.KU$_DFHDR_CREATION_DATE THEN
          DBMS_OUTPUT.PUT_LINE(&#39;Creation Date:             &#39; || value);
        WHEN DBMS_DATAPUMP.KU$_DFHDR_FLAGS THEN
          DBMS_OUTPUT.PUT_LINE(&#39;Internal Dump Flags:       &#39; || value);
        WHEN DBMS_DATAPUMP.KU$_DFHDR_JOB_NAME THEN
          DBMS_OUTPUT.PUT_LINE(&#39;Job Name:                  &#39; || value);
        WHEN DBMS_DATAPUMP.KU$_DFHDR_PLATFORM THEN
          DBMS_OUTPUT.PUT_LINE(&#39;Platform Name:             &#39; || value);
        WHEN DBMS_DATAPUMP.KU$_DFHDR_INSTANCE THEN
          DBMS_OUTPUT.PUT_LINE(&#39;Instance Name:             &#39; || value);
        WHEN DBMS_DATAPUMP.KU$_DFHDR_LANGUAGE THEN
          DBMS_OUTPUT.PUT_LINE(&#39;Language Name:             &#39; || value);
        WHEN DBMS_DATAPUMP.KU$_DFHDR_BLOCKSIZE THEN
          DBMS_OUTPUT.PUT_LINE(&#39;Dump File Block Size:      &#39; || value);
        WHEN DBMS_DATAPUMP.KU$_DFHDR_DIRPATH THEN
          DBMS_OUTPUT.PUT_LINE(&#39;Direct Path Mode:          &#39; || value);
        WHEN DBMS_DATAPUMP.KU$_DFHDR_METADATA_COMPRESSED THEN
          DBMS_OUTPUT.PUT_LINE(&#39;Metadata Compressed:       &#39; || value);
        WHEN DBMS_DATAPUMP.KU$_DFHDR_DB_VERSION THEN
          DBMS_OUTPUT.PUT_LINE(&#39;Database Version:          &#39; || value);
 
        --
        -- The following item codes were introduced in Oracle Database 11g
        -- Release 11.1
        --

        WHEN DBMS_DATAPUMP.KU$_DFHDR_MASTER_PIECE_COUNT THEN
          DBMS_OUTPUT.PUT_LINE(&#39;Master Table Piece Count:  &#39; || value);
        WHEN DBMS_DATAPUMP.KU$_DFHDR_MASTER_PIECE_NUMBER THEN
          DBMS_OUTPUT.PUT_LINE(&#39;Master Table Piece Number: &#39; || value);
        WHEN DBMS_DATAPUMP.KU$_DFHDR_DATA_COMPRESSED THEN
          DBMS_OUTPUT.PUT_LINE(&#39;Table Data Compressed:     &#39; || value);
        WHEN DBMS_DATAPUMP.KU$_DFHDR_METADATA_ENCRYPTED THEN
          DBMS_OUTPUT.PUT_LINE(&#39;Metadata Encrypted:        &#39; || value);
        WHEN DBMS_DATAPUMP.KU$_DFHDR_DATA_ENCRYPTED THEN
          DBMS_OUTPUT.PUT_LINE(&#39;Table Data Encrypted:      &#39; || value);
        WHEN DBMS_DATAPUMP.KU$_DFHDR_COLUMNS_ENCRYPTED THEN
          DBMS_OUTPUT.PUT_LINE(&#39;TDE Columns Encrypted:     &#39; || value);
 
        --
        -- For the DBMS_DATAPUMP.KU$_DFHDR_ENCRYPTION_MODE item code a
        -- numeric value is returned. So examine that numeric value
        -- and display an appropriate name value for it.
        --
        WHEN DBMS_DATAPUMP.KU$_DFHDR_ENCRYPTION_MODE THEN
          CASE TO_NUMBER(value)
            WHEN DBMS_DATAPUMP.KU$_DFHDR_ENCMODE_NONE THEN
              DBMS_OUTPUT.PUT_LINE(&#39;Encryption Mode:           None&#39;);
            WHEN DBMS_DATAPUMP.KU$_DFHDR_ENCMODE_PASSWORD THEN
              DBMS_OUTPUT.PUT_LINE(&#39;Encryption Mode:           Password&#39;);
            WHEN DBMS_DATAPUMP.KU$_DFHDR_ENCMODE_DUAL THEN
              DBMS_OUTPUT.PUT_LINE(&#39;Encryption Mode:           Dual&#39;);
            WHEN DBMS_DATAPUMP.KU$_DFHDR_ENCMODE_TRANS THEN
              DBMS_OUTPUT.PUT_LINE(&#39;Encryption Mode:           Transparent&#39;);
          END CASE;
 
        --
        -- The following item codes were introduced in Oracle Database 12c
        -- Release 12.1
        --
 
        --
        -- For the DBMS_DATAPUMP.KU$_DFHDR_COMPRESSION_ALG item code a
        -- numeric value is returned. So examine that numeric value and
        -- display an appropriate name value for it.
        --
        WHEN DBMS_DATAPUMP.KU$_DFHDR_COMPRESSION_ALG THEN
          CASE TO_NUMBER(value)
            WHEN DBMS_DATAPUMP.KU$_DFHDR_CMPALG_NONE THEN
              DBMS_OUTPUT.PUT_LINE(&#39;Compression Algorithm:     None&#39;);
            WHEN DBMS_DATAPUMP.KU$_DFHDR_CMPALG_BASIC THEN
              DBMS_OUTPUT.PUT_LINE(&#39;Compression Algorithm:     Basic&#39;);
            WHEN DBMS_DATAPUMP.KU$_DFHDR_CMPALG_LOW THEN
              DBMS_OUTPUT.PUT_LINE(&#39;Compression Algorithm:     Low&#39;);
            WHEN DBMS_DATAPUMP.KU$_DFHDR_CMPALG_MEDIUM THEN
              DBMS_OUTPUT.PUT_LINE(&#39;Compression Algorithm:     Medium&#39;);
            WHEN DBMS_DATAPUMP.KU$_DFHDR_CMPALG_HIGH THEN
              DBMS_OUTPUT.PUT_LINE(&#39;Compression Algorithm:     High&#39;);
          END CASE;
        ELSE NULL;  -- Ignore other, unrecognized dump file attributes.
      END CASE;
      ind := infoTab.NEXT(ind);
    END LOOP;
  END IF;
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2015">
<tr>
<td class="cellalignment2022">
<table class="cellalignment2020">
<tr>
<td class="cellalignment2019"><a href="GUID-22D4851C-4057-4BBB-B7F0-DB9091A30641.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2019"><a href="GUID-8D037494-07FA-4226-B507-E1B2ED10C144.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2024">
<table class="cellalignment2018">
<tr>
<td class="cellalignment2019"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2019"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2019"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2019"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2019"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2019"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>