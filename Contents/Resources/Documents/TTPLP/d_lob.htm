<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-113945"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/DBMS_LOB"></a><title>DBMS_LOB</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 704"/>
<meta name="dcterms.created" content="2014-10-02T17:47:27Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="TimesTen In-Memory Database PL/SQL Packages Reference"/>
<meta name="dcterms.identifier" content="E21645-06"/>
<meta name="dcterms.isVersionOf" content="TTPLP"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="intro.htm" title="Previous" type="text/html"/>
<link rel="Next" href="d_lock.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E21645-06.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">6/19</span> <!-- End Header --><a id="BABDDFDH"></a><a id="TTPLP600"></a>
<h1 class="chapter"><span class="secnum">2</span> DBMS_LOB</h1>
<p><a id="TTPLP020"></a><a id="sthref15"></a><a id="sthref16"></a>The <code>DBMS_LOB</code> package provides subprograms to operate on BLOBs, CLOBs, and NCLOBs. You can use <code>DBMS_LOB</code> to access and manipulate specific parts of LOBs or complete LOBs.</p>
<p>This chapter contains the following topics:</p>
<ul>
<li>
<p><a href="#BABEEAAH">Using DBMS_LOB</a></p>
<ul>
<li>
<p>Overview</p>
</li>
<li>
<p>Security model</p>
</li>
<li>
<p>Constants</p>
</li>
<li>
<p>Data types</p>
</li>
<li>
<p>Rules and limits</p>
</li>
<li>
<p>Operational notes</p>
</li>
<li>
<p>Exceptions</p>
</li>
</ul>
</li>
<li>
<p><a href="#BABEAJAD">Summary of DBMS_LOB subprograms</a></p>
</li>
</ul>
<p>You can also refer to <a class="olink TTPLS370" href="../TTPLS/overview.htm#TTPLS370">&#34;Large objects (LOBs)&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database PL/SQL Developer&#39;s Guide</span>.</p>
<a id="BABEEAAH"></a><a id="TTPLP66598"></a>
<hr/>
<div class="refsect1">
<h2 class="refsect1">Using DBMS_LOB</h2>
<ul>
<li>
<p><a href="#i1016465">Overview</a></p>
</li>
<li>
<p><a href="#i1016291">Security model</a></p>
</li>
<li>
<p><a href="#i1015758">Constants</a></p>
</li>
<li>
<p><a href="#i1015790">Data types</a></p>
</li>
<li>
<p><a href="#i1016916">Rules and limits</a></p>
</li>
<li>
<p><a href="#i1015792">Operational notes</a></p>
</li>
<li>
<p><a href="#CHDJBEJI">Exceptions</a></p>
</li>
</ul>
<a id="i1016465"></a><a id="TTPLP66599"></a>
<hr/>
<h3 class="refsect2">Overview</h3>
<p><code>DBMS_LOB</code> can read, manipulate, and modify BLOBs, CLOBs, and NCLOBs.</p>
<p>For an overview of LOBs, see <a class="olink ADLOB001" href="../ADLOB/adlob_intro.htm#ADLOB001">&#34;Introduction to Large Objects&#34;</a> in <span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span>.</p>
<a id="i1016291"></a><a id="TTPLP66600"></a>
<hr/>
<h3 class="refsect2">Security model</h3>
<p>Operations provided by this package are performed under the current calling user, not under the package owner <code>SYS</code>.</p>
<p>Any <code>DBMS_LOB</code> subprogram called from an anonymous PL/SQL block is executed using the privileges of the current user. Any <code>DBMS_LOB</code> subprogram called from a stored procedure is executed using the privileges of the owner of the stored procedure.</p>
<p>When creating the procedure, users can set the <code>AUTHID</code> to indicate whether they want definer&#39;s rights or invoker&#39;s rights. For example:</p>
<pre>CREATE PROCEDURE proc1 AUTHID DEFINER ...
 
</pre>
<p>Or:</p>
<pre>CREATE PROCEDURE proc1 AUTHID CURRENT_USER ...
</pre>
<p>For information about <code>AUTHID</code>, see <a class="olink TTPLS274" href="../TTPLS/accesscntl.htm#TTPLS274">&#34;Definer&#39;s rights and invoker&#39;s rights&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database PL/SQL Developer&#39;s Guide</span>. For information about the security model pertaining to temporary LOBs, see <a href="#i1015792">&#34;Operational notes&#34;</a>.</p>
<a id="i1015758"></a><a id="TTPLP66601"></a>
<hr/>
<h3 class="refsect2">Constants</h3>
<p>The <code>DBMS_LOB</code> package uses the constants shown in <a href="#BGBICCEC">Table 2-1</a>:</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP66602"></a><a id="sthref17"></a><a id="BGBICCEC"></a>Table 2-1 DBMS_LOB constants</p>
<table class="cellalignment1016" title="DBMS_LOB constants " summary="This table describes basic Constants used by DBMS_LOB." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t2">Constant</th>
<th class="cellalignment1017" id="r1c2-t2">Type</th>
<th class="cellalignment1017" id="r1c3-t2">Value</th>
<th class="cellalignment1017" id="r1c4-t2">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t2" headers="r1c1-t2">
<p><code>CALL</code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t2 r1c2-t2">
<p><code>BINARY_INTEGER</code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t2 r1c3-t2">
<p>12</p>
</td>
<td class="cellalignment1018" headers="r2c1-t2 r1c4-t2">
<p>Create the temporary LOB with call duration.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t2" headers="r1c1-t2">
<p><code>DEFAULT_CSID</code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t2 r1c2-t2">
<p><code>INTEGER</code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t2 r1c3-t2">
<p>0</p>
</td>
<td class="cellalignment1018" headers="r3c1-t2 r1c4-t2">
<p>This is the default character set ID.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r4c1-t2" headers="r1c1-t2">
<p><code>DEFAULT_LANG_CTX</code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t2 r1c2-t2">
<p><code>INTEGER</code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t2 r1c3-t2">
<p>0</p>
</td>
<td class="cellalignment1018" headers="r4c1-t2 r1c4-t2">
<p>This is the default language context.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r5c1-t2" headers="r1c1-t2">
<p><code>LOB_READONLY</code></p>
</td>
<td class="cellalignment1018" headers="r5c1-t2 r1c2-t2">
<p><code>BINARY_INTEGER</code></p>
</td>
<td class="cellalignment1018" headers="r5c1-t2 r1c3-t2">
<p>0</p>
</td>
<td class="cellalignment1018" headers="r5c1-t2 r1c4-t2">
<p>Open the specified LOB read-only.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r6c1-t2" headers="r1c1-t2">
<p><code>LOB_READWRITE</code></p>
</td>
<td class="cellalignment1018" headers="r6c1-t2 r1c2-t2">
<p><code>BINARY_INTEGER</code></p>
</td>
<td class="cellalignment1018" headers="r6c1-t2 r1c3-t2">
<p>1</p>
</td>
<td class="cellalignment1018" headers="r6c1-t2 r1c4-t2">
<p>Open the specified LOB read/write.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r7c1-t2" headers="r1c1-t2">
<p><code>BLOBMAXSIZE</code></p>
</td>
<td class="cellalignment1018" headers="r7c1-t2 r1c2-t2">
<p><code>INTEGER</code></p>
</td>
<td class="cellalignment1018" headers="r7c1-t2 r1c3-t2">
<p>16777216 (16 MB)</p>
</td>
<td class="cellalignment1018" headers="r7c1-t2 r1c4-t2">
<p>Set maximum size of a BLOB in bytes.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r8c1-t2" headers="r1c1-t2">
<p><code>CLOBMAXSIZE</code></p>
</td>
<td class="cellalignment1018" headers="r8c1-t2 r1c2-t2">
<p><code>INTEGER</code></p>
</td>
<td class="cellalignment1018" headers="r8c1-t2 r1c3-t2">
<p>4194304 (4 MB)</p>
</td>
<td class="cellalignment1018" headers="r8c1-t2 r1c4-t2">
<p>Set maximum size of a CLOB in bytes.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r9c1-t2" headers="r1c1-t2">
<p><code>NO_WARNING</code></p>
</td>
<td class="cellalignment1018" headers="r9c1-t2 r1c2-t2">
<p><code>INTEGER</code></p>
</td>
<td class="cellalignment1018" headers="r9c1-t2 r1c3-t2">
<p>0</p>
</td>
<td class="cellalignment1018" headers="r9c1-t2 r1c4-t2">
<p>Indicates success, no warning message.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r10c1-t2" headers="r1c1-t2">
<p><code>SESSION</code></p>
</td>
<td class="cellalignment1018" headers="r10c1-t2 r1c2-t2">
<p><code>BINARY_INTEGER</code></p>
</td>
<td class="cellalignment1018" headers="r10c1-t2 r1c3-t2">
<p>10</p>
</td>
<td class="cellalignment1018" headers="r10c1-t2 r1c4-t2">
<p>Create the temporary LOB with session duration.</p>
<p><span class="bold">Note</span>: In TimesTen, LOB duration cannot extend past the end of the transaction. Temporary LOB contents are destroyed when the corresponding locator is invalidated at the end of the transaction.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r11c1-t2" headers="r1c1-t2">
<p><code>TRANSACTION</code></p>
</td>
<td class="cellalignment1018" headers="r11c1-t2 r1c2-t2">
<p><code>BINARY_INTEGER</code></p>
</td>
<td class="cellalignment1018" headers="r11c1-t2 r1c3-t2">
<p>11</p>
</td>
<td class="cellalignment1018" headers="r11c1-t2 r1c4-t2">
<p>Create the temporary LOB with transaction duration.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r12c1-t2" headers="r1c1-t2">
<p><code>WARN_INCONVERTIBLE_CHAR</code></p>
</td>
<td class="cellalignment1018" headers="r12c1-t2 r1c2-t2">
<p><code>INTEGER</code></p>
</td>
<td class="cellalignment1018" headers="r12c1-t2 r1c3-t2">
<p>1</p>
</td>
<td class="cellalignment1018" headers="r12c1-t2 r1c4-t2">
<p>Used by the conversion functions to indicate there is an inconvertible character.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<div class="infobox-note">
<p class="notep1">Notes:</p>
<ul>
<li>
<p>The <code>PLS_INTEGER</code> and <code>BINARY_INTEGER</code> data types are identical. This document uses <code>BINARY_INTEGER</code> to indicate data types in reference information (such as for table types, record types, subprogram parameters, or subprogram return values), but may use either in discussion and examples.</p>
</li>
<li>
<p>The <code>INTEGER</code> and <code>NUMBER(38)</code> data types are also identical. This document uses <code>INTEGER</code> throughout.</p>
</li>
</ul>
</div>
<a id="i1015790"></a><a id="TTPLP66609"></a>
<hr/>
<h3 class="refsect2">Data types</h3>
<p>The <code>DBMS_LOB</code> package uses the data types shown in <a href="#CJHIGCAA">Table 2-2</a>.</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP66610"></a><a id="sthref18"></a><a id="CJHIGCAA"></a>Table 2-2 Data types used by DBMS_LOB</p>
<table class="cellalignment1016" title="Data types used by DBMS_LOB" summary="This table describes datatypes used by DBMS_LOB." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t4">Type</th>
<th class="cellalignment1017" id="r1c2-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t4" headers="r1c1-t4">
<p><code>BLOB</code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t4 r1c2-t4">
<p>Source or destination binary LOB</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t4" headers="r1c1-t4">
<p><code>RAW</code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t4 r1c2-t4">
<p>Source or destination <code>RAW</code> buffer (used with BLOBs)</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r4c1-t4" headers="r1c1-t4">
<p><code>CLOB</code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t4 r1c2-t4">
<p>Source or destination character LOB (including NCLOBs)</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r5c1-t4" headers="r1c1-t4">
<p><code>VARCHAR2</code></p>
</td>
<td class="cellalignment1018" headers="r5c1-t4 r1c2-t4">
<p>Source or destination character buffer (used with CLOBs and NCLOBs)</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r6c1-t4" headers="r1c1-t4">
<p><code>INTEGER</code></p>
</td>
<td class="cellalignment1018" headers="r6c1-t4 r1c2-t4">
<p>Size of a buffer or LOB, offset into a LOB, or amount to access (in bytes for BLOBs or characters for CLOBs or NCLOBs)</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p>The <code>DBMS_LOB</code> package defines no special types.</p>
<p>An NCLOB is a CLOB for holding fixed-width and varying-width, multibyte national character sets.</p>
<p>The clause <code>ANY_CS</code> in the specification of <code>DBMS_LOB</code> subprograms for CLOBs enables the <code>CLOB</code> type to accept a <code>CLOB</code> or <code>NCLOB</code> locator variable as input.</p>
<a id="i1016916"></a><a id="TTPLP66611"></a>
<hr/>
<h3 class="refsect2">Rules and limits</h3>
<ul>
<li>
<p><a href="#i1016040">General rules and limits</a></p>
</li>
<li>
<p><a href="#i1016062">Maximum LOB size</a></p>
</li>
<li>
<p><a href="#i1015730">Maximum buffer size</a></p>
</li>
</ul>
<a id="i1016040"></a><a id="TTPLP66612"></a>
<h4 class="refsect3">General rules and limits</h4>
<a id="i1015912"></a>
<ul>
<li>
<p>The following rules apply in the specification of subprograms in this package:</p>
<ul>
<li>
<p>The <code><span class="codeinlineitalic">newlen</span></code>, <code><span class="codeinlineitalic">offset</span></code>, and <code><span class="codeinlineitalic">amount</span></code> parameters for subprograms operating on BLOBs must be specified in terms of bytes.</p>
</li>
<li>
<p>The <code><span class="codeinlineitalic">newlen</span></code>, <code><span class="codeinlineitalic">offset</span></code>, and <code><span class="codeinlineitalic">amount</span></code> parameters for subprograms operating on CLOBs must be specified in terms of characters.</p>
</li>
</ul>
</li>
<li>
<p>A subprogram raises an <code>INVALID_ARGVAL</code> exception if the following restrictions are not followed in specifying values for parameters (unless otherwise specified):</p>
<ol>
<li>
<p>Only positive, absolute offsets from the beginning of LOB data are permitted. Negative offsets from the tail of the LOB are not permitted.</p>
</li>
<li>
<p>Only positive, nonzero values are permitted for the parameters that represent size and positional quantities, such as <code><span class="codeinlineitalic">amount</span></code>, <code><span class="codeinlineitalic">offset</span></code>, <code><span class="codeinlineitalic">newlen</span></code>, <code><span class="codeinlineitalic">nth</span></code>, and so on. Negative offsets and ranges observed in SQL string functions and operators are not permitted.</p>
</li>
<li>
<p>The value of <code><span class="codeinlineitalic">offset</span></code>, <code><span class="codeinlineitalic">amount</span></code>, <code><span class="codeinlineitalic">newlen</span></code>, and <code><span class="codeinlineitalic">nth</span></code> must not exceed the value <code>BLOBMAXSIZE</code> (for a BLOB) or <code>CLOBMAXSIZE</code> (for a CLOB or NCLOB) in any <code>DBMS_LOB</code> subprogram. In TimesTen, the maximum BLOB size is 16 MB and the maximum CLOB or NCLOB size is 4 MB.</p>
</li>
<li>
<p>For CLOBs consisting of fixed-width multibyte characters, the maximum value for these parameters must not exceed (<code>CLOBMAXSIZE</code>/<code><span class="codeinlineitalic">character_width_in_bytes</span></code>) characters.</p>
</li>
</ol>
</li>
<li>
<p>PL/SQL language specifications stipulate an upper limit of 32767 bytes (not characters) for <code>RAW</code> and <code>VARCHAR2</code> parameters used in <code>DBMS_LOB</code> subprograms. For example, if you declare a variable as follows:</p>
<pre>charbuf VARCHAR2(3000)
</pre>
<p>Then <code>charbuf</code> can hold 3000 single byte characters or 1500 two-byte fixed width characters. This has an important consequence for <code>DBMS_LOB</code> subprograms for CLOBs and NCLOBs.</p>
</li>
<li>
<p>The <code>%CHARSET</code> clause indicates that the form of the parameter with <code>%CHARSET</code> must match the form of the <code>ANY_CS</code> parameter to which it refers.</p>
<p>For example, in <code>DBMS_LOB</code> subprograms that take a <code>VARCHAR2</code> buffer parameter, the form of the <code>VARCHAR2</code> buffer must be appropriate for the form of the character LOB parameter. If the specified LOB is of type <code>NCLOB</code>, the buffer must contain <code>NCHAR</code> data. If the specified LOB is of type <code>CLOB</code>, the buffer must contain <code>CHAR</code> data.</p>
<p>For <code>DBMS_LOB</code> subprograms that take two-character LOB parameters, both parameters must have the same form. That is, they must both be NCLOBs or they must both be CLOBs.</p>
</li>
<li>
<p>If the value of <code><span class="codeinlineitalic">amount</span></code> plus <code><span class="codeinlineitalic">offset</span></code> exceeds the maximum LOB size allowed by the database, then access exceptions are raised. In TimesTen, the maximum BLOB size is 16 MB and the maximum CLOB or NCLOB size is 4 MB.</p>
<p>Under these input conditions, subprograms such as <code>READ</code>, <code>COMPARE</code>, <code>INSTR</code>, and <code>SUBSTR</code> read until the end of the LOB is reached. For example, for a <code>READ</code> operation on a BLOB, if the user specifies an <code><span class="codeinlineitalic">offset</span></code> value of 3 MB and an amount value of 2 MB on a LOB that is 4 MB in size, then <code>READ</code> returns only 1 MB (4 MB minus 3 MB).</p>
</li>
<li>
<p>Functions with <code>NULL</code> or invalid input values for parameters return <code>NULL</code>. Procedures with <code>NULL</code> values for destination LOB parameters raise exceptions.</p>
</li>
<li>
<p>Operations involving patterns as parameters, such as <code>COMPARE</code>, <code>INSTR</code>, and <code>SUBSTR</code>, do not support regular expressions or special matching characters (such as <code>%</code> in the <code>LIKE</code> operator in SQL) in the <code>pattern</code> parameter or substrings.</p>
</li>
<li>
<p>The end-of-LOB condition is indicated by the <code>READ</code> procedure using a <code>NO_DATA_FOUND</code> exception. This exception is raised only upon an attempt by the user to read beyond the end of the LOB. The <code>READ</code> buffer for the last read contains 0 bytes.</p>
</li>
<li>
<p>Unless otherwise stated, the default value for an <code><span class="codeinlineitalic">offset</span></code> parameter is 1, which indicates the first byte in the BLOB data or the first character in the CLOB or NCLOB data. No default values are specified for the <code><span class="codeinlineitalic">amount</span></code> parameter. You must input the values explicitly.</p>
</li>
<li>
<p>You must lock the row containing the destination LOB before calling any subprograms that modify the LOB, such as <code>APPEND</code>, <code>COPY</code>, <code>ERASE</code>, <code>TRIM</code>, or <code>WRITE</code>. These subprograms do not implicitly lock the row containing the LOB.</p>
</li>
</ul>
<a id="i1016062"></a><a id="TTPLP66614"></a>
<h4 class="refsect3">Maximum LOB size</h4>
<p>The maximum size for LOBs in TimesTen is 16 MB for BLOBs and 4 MB for CLOBs or NCLOBs.</p>
<a id="i1015730"></a><a id="TTPLP66615"></a>
<h4 class="refsect3">Maximum buffer size</h4>
<p>The maximum buffer size is 32767 bytes.</p>
<p>For BLOBs, where buffer size is expressed in bytes, the number of bytes cannot exceed 32767.</p>
<p>For CLOBs or NCLOBs, where buffer size is expressed in characters, the number of characters cannot result in a buffer larger than 32767 bytes. For example, if you are using fixed-width, two-byte characters, then specifying 20000 characters is an error (20000*2 = 40000, which is greater than 32767).</p>
<a id="i1015792"></a><a id="TTPLP66616"></a>
<hr/>
<h3 class="refsect2">Operational notes</h3>
<p><code>DBMS_LOB</code> subprograms operate based on LOB locators. For the successful completion of <code>DBMS_LOB</code> subprograms, you must provide an input locator that represents a LOB, either a temporary LOB (discussed below) or a persistent LOB that already exists in the database tablespaces.</p>
<div class="infobox-note">
<p class="notep1">Important:</p>
<ul>
<li>
<p>In TimesTen, LOB locators do not remain valid past the end of the transaction.</p>
</li>
<li>
<p>LOB manipulations through APIs that use LOB locators result in usage of TimesTen temporary space. Any significant number of such manipulations may necessitate a size increase for the TimesTen temporary data partition. See <a class="olink TTREF154" href="../TTREF/attribute.htm#TTREF154">&#34;TempSize&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</p>
</li>
</ul>
</div>
<p>To use LOBs in your database, you must first use SQL data definition language (DDL) to define the tables that contain columns of type <code>BLOB</code>, <code>CLOB</code>, or <code>NCLOB</code>.</p>
<p>In TimesTen, you can write data into the middle of a LOB only by overwriting previous data. There is no functionality to insert data into the middle of a LOB and move previous data, beginning at that point, toward the end of the LOB correspondingly. Similarly, in TimesTen you can delete data from the middle of a LOB only by overwriting previous data with zeros or null data. There is no functionality to remove data from the middle of a LOB and move previous data, beginning at that point, toward the beginning of the LOB correspondingly. In either case in TimesTen, the size of the LOB does not change, except in the circumstance where from the specified offset there is less space available in the LOB than there is data to write. (In Oracle Database you can use the <code>DBMS_LOB</code> <code>FRAGMENT</code> procedures to insert or delete data, move other data accordingly, and change the size of the LOB. TimesTen does not support those procedures.)</p>
<p><code>DBMS_LOB</code> procedures and functions are supported for both TimesTen LOBs and passthrough LOBs, which are LOBs in Oracle Database accessed through TimesTen and exposed as TimesTen LOBs. Note, however, that <code>CREATETEMPORARY</code> can only be used to create a temporary LOB in TimesTen. If a temporary passthrough LOB is created using some other mechanism, such as SQL, <code>ISTEMPORARY</code> and <code>FREETEMPORARY</code> can be used on that LOB.</p>
<p>TimesTen does not support <code>DBMS_LOB</code> subprograms intended specifically for BFILEs, SecureFiles (including Database File System features), or inserting or deleting data fragments in the middle of a LOB (<code>FRAGMENT</code> subprograms).</p>
<p>The rest of this section discusses the following topics:</p>
<ul>
<li>
<p><a href="#BABEJGJG">Persistent LOBs</a></p>
</li>
<li>
<p><a href="#i1015757">Temporary LOBs</a></p>
</li>
</ul>
<a id="BABEJGJG"></a><a id="TTPLP66617"></a>
<h4 class="refsect3">Persistent LOBs</h4>
<p>To populate your database table with LOBs after <code>BLOB</code>, <code>CLOB</code>, or <code>NCLOB</code> columns are defined in the table, use the SQL data manipulation language (DML) to initialize or populate the locators in the LOB columns.</p>
<a id="i1015757"></a><a id="TTPLP66619"></a>
<h4 class="refsect3">Temporary LOBs</h4>
<p>TimesTen supports the definition, creation, deletion, access, and update of temporary LOBs. The temporary data partition stores the temporary LOB data. Temporary LOBs are not permanently stored in the database. Their primary purpose is for performing transformations on LOB data from applications.</p>
<p>You can use PL/SQL to create or manipulate a temporary LOB (BLOB, CLOB, or NCLOB).</p>
<p>A temporary LOB is empty when it is created. In TimesTen, all temporary LOBs are deleted at the end of the transaction in which they were created. Also, if a process dies unexpectedly or if the database crashes, temporary LOBs are deleted and the space for temporary LOBs is freed.</p>
<p>There is no support for consistent-read, undo, backup, parallel processing, or transaction management for temporary LOBs. Because consistent-read and rollbacks are not supported for temporary LOBs, you must free the temporary LOB and start over again if you encounter an error.</p>
<p>In PL/SQL, do not use more than one locator for a temporary LOB. Because consistent-read, undo, and versions are not generated for temporary LOBs, there is potentially a performance impact if you assign multiple locators to the same temporary LOB. Semantically, each locator should have its own copy of the temporary LOB. A temporary LOB locator can be passed by reference to other procedures if necessary.</p>
<p>A copy of a temporary LOB is created if the user modifies the temporary LOB while another locator is also pointing to it. The locator on which a modification was performed now points to a new copy of the temporary LOB. Other locators no longer see the same data as the locator through which the modification was made. A deep copy was not incurred by persistent LOBs in these types of situations, because consistent-read snapshots and version pages enable users to see their own versions of the LOB cheaply.</p>
<p>Because temporary LOBs are not associated with any table schema, there are no meanings to the terms in-row and out-of-row for temporary LOBs. Creation of a temporary LOB instance by a user causes the engine to create and return a locator to the LOB data. The PL/SQL <code>DBMS_LOB</code> package, as well as other programmatic interfaces, operates on temporary LOBs through these locators just as they do for persistent LOBs.</p>
<p>There is no concept of client-side temporary LOBs. All temporary LOBs reside in the server.</p>
<p>A temporary LOB instance can be accessed and modified using appropriate <code>DBMS_LOB</code> functions and procedures, just as for persistent LOBs. To make a temporary LOB persistent, you can use the <code>COPY</code> procedure to copy it into a <code>BLOB</code>, <code>CLOB</code>, or <code>NCLOB</code> column (as appropriate) in the database.</p>
<p>When you are finished with a temporary LOB instance, use the <code>FREETEMPORARY</code> procedure to free it.</p>
<p>Security is provided through the LOB locator. Only the user who created the temporary LOB is able to see it. Locators cannot be passed from one user session to another. Even if someone did pass a locator from one session to another, they would not access the temporary LOBs from the original session.</p>
<p>The following notes are specific to temporary LOBs:</p>
<ul>
<li>
<p>All functions in <code>DBMS_LOB</code> return <code>NULL</code> if any parameter is <code>NULL</code>. All procedures in <code>DBMS_LOB</code> raise an exception if the LOB locator is input as <code>NULL</code>.</p>
</li>
<li>
<p>Operations based on CLOBs do not verify whether the character set IDs (CSIDs) of the parameters (<code>CLOB</code> parameters, <code>VARCHAR2</code> buffers and patterns, and so on) match. It is the user&#39;s responsibility to ensure this.</p>
</li>
</ul>
<a id="CHDJBEJI"></a><a id="TTPLP66620"></a>
<hr/>
<h3 class="refsect2">Exceptions</h3>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP66621"></a><a id="sthref19"></a><a id="sthref20"></a>Table 2-3 DBMS_LOB exceptions</p>
<table class="cellalignment1016" title="DBMS_LOB exceptions" summary="This table describes the Exceptions for DBMS_LOB." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t6">Exception</th>
<th class="cellalignment1017" id="r1c2-t6">Code</th>
<th class="cellalignment1017" id="r1c3-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t6" headers="r1c1-t6">
<p><code>ACCESS_ERROR</code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t6 r1c2-t6">
<p><code>22925</code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t6 r1c3-t6">
<p>There was an attempt to write too much data to the LOB. In TimesTen, BLOB size is limited to 16 MB and CLOB or NCLOB size is limited to 4 MB.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t6" headers="r1c1-t6">
<p><code>BUFFERING_ENABLED</code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t6 r1c2-t6">
<p><code>22279</code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t6 r1c3-t6">
<p>Cannot perform operation with LOB buffering enabled.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r4c1-t6" headers="r1c1-t6">
<p><code>CONTENTTYPE_TOOLONG</code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t6 r1c2-t6">
<p><code>43859</code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t6 r1c3-t6">
<p>The length of the <code>contenttype</code> string exceeds the defined maximum. Modify the length of the <code>contenttype</code> string and retry the operation.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r5c1-t6" headers="r1c1-t6">
<p><code>CONTENTTYPEBUF_WRONG</code></p>
</td>
<td class="cellalignment1018" headers="r5c1-t6 r1c2-t6">
<p><code>43862</code></p>
</td>
<td class="cellalignment1018" headers="r5c1-t6 r1c3-t6">
<p>The length of the <code>contenttype</code> buffer is less than the defined constant. Modify the length of the <code>contenttype</code> buffer and retry the operation.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r6c1-t6" headers="r1c1-t6">
<p><code>INVALID_ARGVAL</code></p>
</td>
<td class="cellalignment1018" headers="r6c1-t6 r1c2-t6">
<p><code>21560</code></p>
</td>
<td class="cellalignment1018" headers="r6c1-t6 r1c3-t6">
<p>The argument is expecting a valid non-null value but the argument value passed in is <code>NULL</code>, invalid, or out of range.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r7c1-t6" headers="r1c1-t6">
<p><code>NO_DATA_FOUND</code></p>
</td>
<td class="cellalignment1018" headers="r7c1-t6 r1c2-t6">
<p><code>1403</code></p>
</td>
<td class="cellalignment1018" headers="r7c1-t6 r1c3-t6">
<p>This is the end-of-LOB indicator for looping read operations. It is not a hard error.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r8c1-t6" headers="r1c1-t6">
<p><code>QUERY_WRITE</code></p>
</td>
<td class="cellalignment1018" headers="r8c1-t6 r1c2-t6">
<p><code>14553</code></p>
</td>
<td class="cellalignment1018" headers="r8c1-t6 r1c3-t6">
<p>Cannot perform a LOB write inside a query. (This is not applicable for TimesTen.)</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r9c1-t6" headers="r1c1-t6">
<p><code>VALUE_ERROR</code></p>
</td>
<td class="cellalignment1018" headers="r9c1-t6 r1c2-t6">
<p><code>6502</code></p>
</td>
<td class="cellalignment1018" headers="r9c1-t6 r1c3-t6">
<p>This is a PL/SQL error for invalid values to subprogram parameters.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
Several <code>DBMS_LOB</code> subprograms cannot operate if LOB buffering is enabled, as noted in the Exceptions subsections for those subprograms. (LOB buffering is a feature that can be enabled through OCI, for example. See <a class="olink ADLOB45319" href="../ADLOB/adlob_design.htm#ADLOB45319">&#34;LOB Buffering Subsystem&#34;</a> in <span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span>.</div>
</div>
<!-- class="refsect1" -->
<a id="BABEAJAD"></a><a id="TTPLP66622"></a>
<hr/>
<div class="refsect1">
<h2 class="refsect1">Summary of DBMS_LOB subprograms</h2>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP71645"></a><a id="sthref21"></a><a id="sthref22"></a>Table 2-4 DBMS_LOB subprograms</p>
<table class="cellalignment1016" title="DBMS_LOB subprograms" summary="DBMS_LOB package and subprograms" dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t8">Subprogram</th>
<th class="cellalignment1017" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t8" headers="r1c1-t8">
<p><a href="#i997432">APPEND procedures</a></p>
</td>
<td class="cellalignment1018" headers="r2c1-t8 r1c2-t8">
<p>Appends the contents of the source LOB to the destination LOB.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t8" headers="r1c1-t8">
<p><a href="#i997518">CLOSE procedures</a></p>
</td>
<td class="cellalignment1018" headers="r3c1-t8 r1c2-t8">
<p>Closes a previously opened LOB.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r4c1-t8" headers="r1c1-t8">
<p><a href="#i1016668">COMPARE functions</a></p>
</td>
<td class="cellalignment1018" headers="r4c1-t8 r1c2-t8">
<p>Compares two entire LOBs or parts of two LOBs.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r5c1-t8" headers="r1c1-t8">
<p><a href="#i1020355">CONVERTTOBLOB procedure</a></p>
</td>
<td class="cellalignment1018" headers="r5c1-t8 r1c2-t8">
<p>Reads character data from a source CLOB or NCLOB, converts the character data to the specified character set, writes the converted data to a destination BLOB in binary format, and returns the new offsets.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r6c1-t8" headers="r1c1-t8">
<p><a href="#i1020356">CONVERTTOCLOB procedure</a></p>
</td>
<td class="cellalignment1018" headers="r6c1-t8 r1c2-t8">
<p>Takes a source BLOB, converts the binary data in the source to character data using the specified character set, writes the character data to a destination CLOB or NCLOB, and returns the new offsets.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r7c1-t8" headers="r1c1-t8">
<p><a href="#i997674">COPY procedures</a></p>
</td>
<td class="cellalignment1018" headers="r7c1-t8 r1c2-t8">
<p>Copies all or part of the source LOB to the destination LOB.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r8c1-t8" headers="r1c1-t8">
<p><a href="#i997788">CREATETEMPORARY procedures</a></p>
</td>
<td class="cellalignment1018" headers="r8c1-t8 r1c2-t8">
<p>Creates a temporary LOB in the temporary data partition.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r9c1-t8" headers="r1c1-t8">
<p><a href="#i997838">ERASE procedures</a></p>
</td>
<td class="cellalignment1018" headers="r9c1-t8 r1c2-t8">
<p>Erases all or part of a LOB.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r10c1-t8" headers="r1c1-t8">
<p><a href="#BGBDBFAD">FREETEMPORARY procedures</a></p>
</td>
<td class="cellalignment1018" headers="r10c1-t8 r1c2-t8">
<p>Frees a temporary LOB in the temporary data partition.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r11c1-t8" headers="r1c1-t8">
<p><a href="#BGBCDIHI">GETCHUNKSIZE functions</a></p>
</td>
<td class="cellalignment1018" headers="r11c1-t8 r1c2-t8">
<p>Returns the amount of space used in the LOB chunk to store the LOB value.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r12c1-t8" headers="r1c1-t8">
<p><a href="#i998484">GETLENGTH functions</a></p>
</td>
<td class="cellalignment1018" headers="r12c1-t8 r1c2-t8">
<p>Returns the length of the LOB value, in bytes for a BLOB or characters for a CLOB.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r13c1-t8" headers="r1c1-t8">
<p><a href="#i1012980">GET_STORAGE_LIMIT functions</a></p>
</td>
<td class="cellalignment1018" headers="r13c1-t8 r1c2-t8">
<p>Returns the storage limit for the LOB type of the specified LOB.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r14c1-t8" headers="r1c1-t8">
<p><a href="#i998546">INSTR functions</a></p>
</td>
<td class="cellalignment1018" headers="r14c1-t8 r1c2-t8">
<p>Returns the matching position of the <code><span class="codeinlineitalic">n</span></code>th occurrence of the pattern in the LOB.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r15c1-t8" headers="r1c1-t8">
<p><a href="#i998705">ISOPEN functions</a></p>
</td>
<td class="cellalignment1018" headers="r15c1-t8 r1c2-t8">
<p>Checks to see if the LOB was already opened using the input locator.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r16c1-t8" headers="r1c1-t8">
<p><a href="#i998745">ISTEMPORARY functions</a></p>
</td>
<td class="cellalignment1018" headers="r16c1-t8 r1c2-t8">
<p>Checks if the locator is pointing to a temporary LOB.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r17c1-t8" headers="r1c1-t8">
<p><a href="#BABGHBIF">OPEN procedures</a></p>
</td>
<td class="cellalignment1018" headers="r17c1-t8 r1c2-t8">
<p>Opens a LOB (persistent or temporary) in the indicated mode, read/write or read-only.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r18c1-t8" headers="r1c1-t8">
<p><a href="#i999170">READ procedures</a></p>
</td>
<td class="cellalignment1018" headers="r18c1-t8 r1c2-t8">
<p>Reads data from the LOB starting at the specified offset.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r19c1-t8" headers="r1c1-t8">
<p><a href="#i999349">SUBSTR functions</a></p>
</td>
<td class="cellalignment1018" headers="r19c1-t8 r1c2-t8">
<p>Returns part of the LOB value starting at the specified offset.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r20c1-t8" headers="r1c1-t8">
<p><a href="#i999503">TRIM procedures</a></p>
</td>
<td class="cellalignment1018" headers="r20c1-t8 r1c2-t8">
<p>Trims the LOB value to the specified length.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r21c1-t8" headers="r1c1-t8">
<p><a href="#i999593">WRITE procedures</a></p>
</td>
<td class="cellalignment1018" headers="r21c1-t8 r1c2-t8">
<p>Writes data to the LOB from a specified offset.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r22c1-t8" headers="r1c1-t8">
<p><a href="#i999705">WRITEAPPEND procedures</a></p>
</td>
<td class="cellalignment1018" headers="r22c1-t8 r1c2-t8">
<p>Appends a buffer to the end of a LOB.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<a id="i997432"></a><a id="TTPLP66624"></a>
<hr/>
<h3 class="refsect2"><a id="sthref23"></a>APPEND procedures</h3>
<p>This procedure appends the contents of a source LOB to a destination LOB. It appends the complete source LOB. (Do not confuse this with the <code>WRITEAPPEND</code> procedure.)</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Also see <a href="#i999705">&#34;WRITEAPPEND procedures&#34;</a>.</div>
<p class="titleinrefsubsect"><a id="sthref24"></a>Syntax</p>
<pre>DBMS_LOB.APPEND (
   <span class="italic">dest_lob</span> IN OUT  NOCOPY BLOB, 
   <span class="italic">src_lob</span>  IN             BLOB); 

DBMS_LOB.APPEND (
   <span class="italic">dest_lob</span> IN OUT  NOCOPY CLOB  CHARACTER SET ANY_CS, 
   <span class="italic">src_lob</span>  IN             CLOB  CHARACTER SET <span class="italic">dest_lob</span>%CHARSET);
</pre>
<p class="titleinrefsubsect"><a id="sthref25"></a>Parameters</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP66625"></a><a id="sthref26"></a><a id="sthref27"></a>Table 2-5 APPEND procedure parameters</p>
<table class="cellalignment1016" title="APPEND procedure parameters " summary="This table describes the parameters of DBMS_LOB.APPEND." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t10">Parameter</th>
<th class="cellalignment1017" id="r1c2-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t10" headers="r1c1-t10">
<p><code><span class="codeinlineitalic">dest_lob</span></code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t10 r1c2-t10">
<p>Locator for the LOB to which the data is being appended</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t10" headers="r1c1-t10">
<p><code><span class="codeinlineitalic">src_lob</span></code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t10 r1c2-t10">
<p>Locator for the LOB from which the data is being read</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="titleinrefsubsect"><a id="sthref28"></a>Usage notes</p>
<ul>
<li>
<p>It is recommended that you enclose write operations to the LOB with <code>OPEN</code> and <code>CLOSE</code> calls, but not mandatory. If you opened the LOB before performing the operation, however, you must close it before you commit or roll back the transaction.</p>
</li>
</ul>
<p class="titleinrefsubsect"><a id="sthref29"></a>Exceptions</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP66626"></a><a id="sthref30"></a><a id="sthref31"></a>Table 2-6 APPEND procedure exceptions</p>
<table class="cellalignment1016" title="APPEND procedure exceptions " summary="This table describes the Exceptions raised by APPEND." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t11">Exception</th>
<th class="cellalignment1017" id="r1c2-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t11" headers="r1c1-t11">
<p><code>VALUE_ERROR</code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t11 r1c2-t11">
<p>Either the source or destination LOB is <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t11" headers="r1c1-t11">
<p><code>QUERY_WRITE</code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t11 r1c2-t11">
<p>Cannot perform a LOB write inside a query. (This is not applicable for TimesTen.)</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r4c1-t11" headers="r1c1-t11">
<p><code>BUFFERING_ENABLED</code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t11 r1c2-t11">
<p>Cannot perform operation if LOB buffering is enabled on either LOB.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="titleinrefsubsect"><a id="sthref32"></a>Examples</p>
<p>This example shows use of the <code>APPEND</code> procedure.</p>
<pre>create table t1 (a int, c clob);
 
insert into t1(a,c) values(1, &#39;abcde&#39;);
1 row inserted.
 
commit;
 
declare
  c1 clob;
  c2 clob;
begin
  c1 := &#39;abc&#39;;
  select c into c2 from t1 where a = 1;
  dbms_output.put_line(&#39;c1 before append is &#39; || c1);
  dbms_output.put_line(&#39;c2 before append is &#39; || c2);
  dbms_lob.append(c1, c2);
  dbms_output.put_line(&#39;c1 after append is &#39; || c1);
  dbms_output.put_line(&#39;c2 after append is &#39; || c2);
  insert into t1 values (2, c1);
end;
 
c1 before append is abc
c2 before append is abcde
c1 after append is abcabcde
c2 after append is abcde
 
PL/SQL procedure successfully completed.
 
select * from t1;
&lt; 1, abcde &gt;
&lt; 2, abcabcde &gt;
2 rows found.
</pre>
<p>(Output is shown after running the commands from a SQL script.)</p>
<a id="i997518"></a><a id="TTPLP66645"></a>
<hr/>
<h3 class="refsect2"><a id="sthref33"></a>CLOSE procedures</h3>
<p>This procedure closes a previously opened LOB.</p>
<p class="titleinrefsubsect"><a id="sthref34"></a>Syntax</p>
<pre>DBMS_LOB.CLOSE (
   <span class="italic">lob_loc</span>    IN OUT NOCOPY BLOB); 

DBMS_LOB.CLOSE (
   <span class="italic">lob_loc</span>    IN OUT NOCOPY CLOB CHARACTER SET ANY_CS); 
</pre>
<p class="titleinrefsubsect"><a id="sthref35"></a>Parameters</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP66646"></a><a id="sthref36"></a><a id="sthref37"></a>Table 2-7 CLOSE procedure parameters</p>
<table class="cellalignment1016" title="CLOSE procedure parameters " summary="This table describes the parameters of DBMS_LOB.CLOSE." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t12">Parameter</th>
<th class="cellalignment1017" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t12" headers="r1c1-t12">
<p><code><span class="codeinlineitalic">lob_loc</span></code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t12 r1c2-t12">
<p>Locator for the LOB</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="titleinrefsubsect"><a id="sthref38"></a>Usage notes</p>
<ul>
<li>
<p><code>CLOSE</code> requires a round-trip to the server.</p>
</li>
<li>
<p>It is not mandatory that you wrap LOB operations inside <code>OPEN</code> and <code>CLOSE</code> calls. However, if you open a LOB, you must close it before you commit or roll back the transaction.</p>
</li>
<li>
<p>It is an error to commit the transaction before closing all LOBs that were opened by the transaction. When the error is returned, the &#34;open&#34; status of the open LOBs is discarded, but the transaction is successfully committed. Hence, all the changes made to the LOB and non-LOB data in the transaction are committed.</p>
</li>
</ul>
<p class="titleinrefsubsect"><a id="sthref39"></a>Exceptions</p>
<p>An error is returned if the LOB is not open.</p>
<a id="i1016668"></a><a id="TTPLP66647"></a>
<hr/>
<h3 class="refsect2"><a id="sthref40"></a>COMPARE functions</h3>
<p>This function compares two entire LOBs or parts of two LOBs.</p>
<p class="titleinrefsubsect"><a id="sthref41"></a>Syntax</p>
<pre>DBMS_LOB.COMPARE (
   <span class="italic">lob_1</span>            IN BLOB,
   <span class="italic">lob_2</span>            IN BLOB,
   <span class="italic">amount</span>           IN INTEGER := DBMS_LOB.BLOBMAXSIZE,
   <span class="italic">offset_1</span>         IN INTEGER := 1,
   <span class="italic">offset_2</span>         IN INTEGER := 1)
  RETURN INTEGER;

DBMS_LOB.COMPARE (
   <span class="italic">lob_1</span>            IN CLOB  CHARACTER SET ANY_CS,
   <span class="italic">lob_2</span>            IN CLOB  CHARACTER SET <span class="italic">lob_1</span>%CHARSET,
   <span class="italic">amount</span>           IN INTEGER := DBMS_LOB.CLOBMAXSIZE,
   <span class="italic">offset_1</span>         IN INTEGER := 1,
   <span class="italic">offset_2</span>         IN INTEGER := 1)
  RETURN INTEGER;
</pre>
<p class="titleinrefsubsect"><a id="sthref42"></a>Parameters</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP66648"></a><a id="sthref43"></a><a id="sthref44"></a>Table 2-8 COMPARE function parameters</p>
<table class="cellalignment1016" title="COMPARE function parameters " summary="This table describes the parameters of DBMS_LOB.COMPARE." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t13">Parameter</th>
<th class="cellalignment1017" id="r1c2-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t13" headers="r1c1-t13">
<p><code><span class="codeinlineitalic">lob_1</span></code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t13 r1c2-t13">
<p>Locator for the first LOB for comparison</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t13" headers="r1c1-t13">
<p><code><span class="codeinlineitalic">lob_2</span></code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t13 r1c2-t13">
<p>Locator for the second LOB for comparison</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r4c1-t13" headers="r1c1-t13">
<p><code><span class="codeinlineitalic">amount</span></code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t13 r1c2-t13">
<p>Number of bytes (for BLOBs) or characters (for CLOBs or NCLOBs) to compare</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r5c1-t13" headers="r1c1-t13">
<p><code><span class="codeinlineitalic">offset_1</span></code></p>
</td>
<td class="cellalignment1018" headers="r5c1-t13 r1c2-t13">
<p>Offset in bytes or characters in the first LOB (starting from 1)</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r6c1-t13" headers="r1c1-t13">
<p><code><span class="codeinlineitalic">offset_2</span></code></p>
</td>
<td class="cellalignment1018" headers="r6c1-t13 r1c2-t13">
<p>Offset in bytes or characters in the second LOB (starting from 1)</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="titleinrefsubsect"><a id="sthref45"></a>Return values</p>
<p>The function returns one of the following:</p>
<ul>
<li>
<p>0 (zero) if the data matches exactly over the specified range</p>
</li>
<li>
<p>-1 if the first LOB is less than the second</p>
</li>
<li>
<p>1 if the first LOB is greater than the second</p>
</li>
<li>
<p><code>NULL</code> if <code><span class="codeinlineitalic">amount</span></code>, <code><span class="codeinlineitalic">offset_1</span></code>, or <code><span class="codeinlineitalic">offset_2</span></code> is an invalid value, outside the range 1 to <code>BLOBMAXSIZE</code> or <code>CLOBMAXSIZE</code> (as appropriate), inclusive</p>
</li>
</ul>
<p class="titleinrefsubsect"><a id="sthref46"></a>Usage notes</p>
<ul>
<li>
<p>You can only compare LOBs of the same type. For example, you cannot compare a BLOB to a CLOB.</p>
</li>
<li>
<p>For fixed-width <code><span class="codeinlineitalic">n</span></code>-byte CLOBs or NCLOBs, if the input amount for <code>COMPARE</code> is specified to be greater than <code>CLOBMAXSIZE/</code><code><span class="codeinlineitalic">n</span></code>, then <code>COMPARE</code> matches characters in a range of size that is either <code>CLOBMAXSIZE/</code><code><span class="codeinlineitalic">n</span></code> or <code>Max(length(clob1), length(clob2))</code>, whichever is less.</p>
</li>
</ul>
<a id="i1020355"></a><a id="TTPLP603"></a>
<hr/>
<h3 class="refsect2"><a id="sthref47"></a>CONVERTTOBLOB procedure</h3>
<p>This procedure reads character data from a source CLOB or NCLOB, converts the character data to the character set you specify, writes the converted data to a destination BLOB in binary format, and returns the new offsets. You can use this procedure with any combination of persistent or temporary LOBs.</p>
<p class="titleinrefsubsect"><a id="sthref48"></a>Syntax</p>
<pre>DBMS_LOB.CONVERTTOBLOB(
  <span class="italic">dest_lob</span>       IN OUT     NOCOPY  BLOB,
  <span class="italic">src_clob</span>       IN         CLOB CHARACTER SET ANY_CS,
  <span class="italic">amount</span>         IN         INTEGER,
  <span class="italic">dest_offset</span>    IN OUT     INTEGER,
  <span class="italic">src_offset</span>     IN OUT     INTEGER, 
  <span class="italic">blob_csid</span>      IN         NUMBER,
  <span class="italic">lang_context</span>   IN OUT     INTEGER,
  <span class="italic">warning</span>        OUT        INTEGER); 
</pre>
<p class="titleinrefsubsect"><a id="sthref49"></a>Parameters</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP66650"></a><a id="sthref50"></a><a id="sthref51"></a>Table 2-9 CONVERTTOBLOB procedure parameters</p>
<table class="cellalignment1016" title="CONVERTTOBLOB procedure parameters" summary="This table describes the parameters of DBMS_LOB.CONVERTTOBLOB." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t14">Parameter</th>
<th class="cellalignment1017" id="r1c2-t14">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t14" headers="r1c1-t14">
<p><code><span class="codeinlineitalic">dest_lob</span></code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t14 r1c2-t14">
<p>Locator for the destination LOB</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t14" headers="r1c1-t14">
<p><code><span class="codeinlineitalic">src_clob</span></code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t14 r1c2-t14">
<p>Locator for the source LOB</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r4c1-t14" headers="r1c1-t14">
<p><code><span class="codeinlineitalic">amount</span></code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t14 r1c2-t14">
<p>Number of characters to convert from the source LOB</p>
<p>If you want to convert the entire CLOB or NCLOB, pass the constant <code>CLOBMAXSIZE</code>. If you pass any other value, it must be less than or equal to the size of the LOB.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r5c1-t14" headers="r1c1-t14">
<p><code><span class="codeinlineitalic">dest_offset</span></code></p>
</td>
<td class="cellalignment1018" headers="r5c1-t14 r1c2-t14">
<p><code>(IN)</code> Offset in bytes in the destination LOB for the start of the write</p>
<p>Specify a value of 1 to start at the beginning of the LOB.</p>
<p><code>(OUT)</code> The new offset in bytes after the end of the write</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r6c1-t14" headers="r1c1-t14">
<p><code><span class="codeinlineitalic">src_offset</span></code></p>
</td>
<td class="cellalignment1018" headers="r6c1-t14 r1c2-t14">
<p><code>(IN)</code> Offset in characters in the source LOB for the start of the read</p>
<p><code>(OUT)</code> Offset in characters in the source LOB right after the end of the read</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r7c1-t14" headers="r1c1-t14">
<p><code><span class="codeinlineitalic">blob_csid</span></code></p>
</td>
<td class="cellalignment1018" headers="r7c1-t14 r1c2-t14">
<p>Character set ID for the converted BLOB data</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r8c1-t14" headers="r1c1-t14">
<p><code><span class="codeinlineitalic">lang_context</span></code></p>
</td>
<td class="cellalignment1018" headers="r8c1-t14 r1c2-t14">
<p><code>(IN)</code> Language context, such as shift status, for the current conversion (ignored by TimesTen)</p>
<p><code>(OUT)</code> The language context at the time when the current conversion is done (set to 0 by TimesTen)</p>
<p>This parameter is not supported by TimesTen.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r9c1-t14" headers="r1c1-t14">
<p><code><span class="codeinlineitalic">warning</span></code></p>
</td>
<td class="cellalignment1018" headers="r9c1-t14 r1c2-t14">
<p>Warning message</p>
<p>This parameter is not supported by TimesTen.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="titleinrefsubsect"><a id="sthref52"></a>Usage notes</p>
<p class="subhead1"><a id="TTPLP66651"></a>Preconditions</p>
<p>Before a call to <code>CONVERTTOBLOB</code>, the following preconditions must be met.</p>
<ul>
<li>
<p>Both the source and destination LOBs must exist.</p>
</li>
<li>
<p>If the destination LOB is a persistent LOB, the row must be locked. To lock the row, select the LOB using the <code>FOR</code> <code>UPDATE</code> clause of the <code>SELECT</code> statement.</p>
</li>
</ul>
<p class="subhead1"><a id="TTPLP66652"></a>Constants and defaults</p>
<p>All parameters are required. You must pass a variable for each <code>OUT</code> or <code>IN OUT</code> parameter. You must pass either a variable or a value for each <code>IN</code> parameter.</p>
<p><a href="#BGBFFFFJ">Table 2-10</a> gives a summary of typical values for each parameter. Note that constants are used for some values. These constants are defined in the <code>dbmslob.sql</code> package specification file.</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP71646"></a><a id="sthref53"></a><a id="BGBFFFFJ"></a>Table 2-10 CONVERTTOBLOB typical values</p>
<table class="cellalignment1016" title="CONVERTTOBLOB typical values" summary="This table describes Typical Values for use with CONVERTTOBLOB." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t15">Parameter</th>
<th class="cellalignment1017" id="r1c2-t15">Value</th>
<th class="cellalignment1017" id="r1c3-t15">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t15" headers="r1c1-t15">
<p><code><span class="codeinlineitalic">amount</span></code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t15 r1c2-t15">
<p><code>CLOBMAXSIZE (IN)</code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t15 r1c3-t15">
<p>Convert the entire LOB.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t15" headers="r1c1-t15">
<p><code><span class="codeinlineitalic">dest_offset</span></code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t15 r1c2-t15">
<p><code>1 (IN)</code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t15 r1c3-t15">
<p>Start from the beginning.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r4c1-t15" headers="r1c1-t15">
<p><code><span class="codeinlineitalic">src_offset</span></code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t15 r1c2-t15">
<p><code>1 (IN)</code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t15 r1c3-t15">
<p>Start from the beginning.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r5c1-t15" headers="r1c1-t15">
<p><code><span class="codeinlineitalic">blob_csid</span></code></p>
</td>
<td class="cellalignment1018" headers="r5c1-t15 r1c2-t15">
<p><code>DEFAULT_CSID (IN)</code></p>
</td>
<td class="cellalignment1018" headers="r5c1-t15 r1c3-t15">
<p>Default character set ID, use same ID as source CLOB.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r6c1-t15" headers="r1c1-t15">
<p><code><span class="codeinlineitalic">lang_context</span></code></p>
</td>
<td class="cellalignment1018" headers="r6c1-t15 r1c2-t15">
<p><code>DEFAULT_LANG_CTX (IN)</code></p>
</td>
<td class="cellalignment1018" headers="r6c1-t15 r1c3-t15">
<p>This is the default language context (ignored by TimesTen).</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r7c1-t15" headers="r1c1-t15">
<p><code><span class="codeinlineitalic">warning</span></code></p>
</td>
<td class="cellalignment1018" headers="r7c1-t15 r1c2-t15">
<p><code>NO_WARNING (OUT)</code></p>
<p><code>WARN_INCONVERTIBLE_CHAR (OUT)</code></p>
</td>
<td class="cellalignment1018" headers="r7c1-t15 r1c3-t15">
<p>This is a warning message (ignored by TimesTen).</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="subhead1"><a id="TTPLP66654"></a>General notes</p>
<ul>
<li>
<p>You must specify the desired character set ID for the destination BLOB in the <code><span class="codeinlineitalic">blob_csid</span></code> parameter. If you pass a zero value, the database assumes that the desired character set is the same as the source CLOB character set.</p>
</li>
<li>
<p>You must specify the offsets for both the source and destination LOBs, and the number of characters to copy from the source LOB. The <code><span class="codeinlineitalic">amount</span></code> and <code><span class="codeinlineitalic">src_offset</span></code> values are in characters and the <code><span class="codeinlineitalic">dest_offset</span></code> is in bytes. To convert the entire LOB, you can specify <code>CLOBMAXSIZE</code> for the <code><span class="codeinlineitalic">amount</span></code> parameter.</p>
</li>
<li>
<p><code>CONVERTTOBLOB</code> gets the source and destination LOBs as necessary prior to conversion and write of the data.</p>
</li>
</ul>
<p class="titleinrefsubsect"><a id="sthref54"></a>Exceptions</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP66655"></a><a id="sthref55"></a><a id="BABBIEJD"></a>Table 2-11 CONVERTTOBLOB procedure exceptions</p>
<table class="cellalignment1016" title="CONVERTTOBLOB procedure exceptions " summary="This table describes the Exceptions raised by CONVERTTOBLOB." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t16">Exception</th>
<th class="cellalignment1017" id="r1c2-t16">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t16" headers="r1c1-t16">
<p><code>VALUE_ERROR</code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t16 r1c2-t16">
<p>Any of the input parameters is <code>NULL</code> or invalid.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t16" headers="r1c1-t16">
<p><code>INVALID_ARGVAL</code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t16 r1c2-t16">
<p>Any of the following is true:</p>
<p><code><span class="codeinlineitalic">src_offset</span></code> &lt; 1 or <code><span class="codeinlineitalic">src_offset</span></code> &gt; <code>CLOBMAXSIZE</code></p>
<p><code><span class="codeinlineitalic">dest_offset</span></code> &lt; 1 or <code><span class="codeinlineitalic">dest_offset</span></code> &gt; <code>BLOBMAXSIZE</code></p>
<p><code><span class="codeinlineitalic">amount</span></code> &lt; 1 or <code><span class="codeinlineitalic">amount</span></code> &gt; <code>CLOBMAXSIZE</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<a id="i1020356"></a><a id="TTPLP602"></a>
<hr/>
<h3 class="refsect2"><a id="sthref56"></a>CONVERTTOCLOB procedure</h3>
<p>This procedure takes a source BLOB, converts the binary data in the source to character data using the character set you specify, writes the character data to a destination CLOB or NCLOB, and returns the new offsets. You can use this procedure with any combination of persistent or temporary LOBs.</p>
<p class="titleinrefsubsect"><a id="sthref57"></a>Syntax</p>
<pre>DBMS_LOB.CONVERTTOCLOB(
   <span class="italic">dest_lob</span>       IN OUT NOCOPY  CLOB CHARACTER SET ANY_CS,
   <span class="italic">src_blob</span>       IN             BLOB,
   <span class="italic">amount</span>         IN             INTEGER,
   <span class="italic">dest_offset</span>    IN OUT         INTEGER,
   <span class="italic">src_offset</span>     IN OUT         INTEGER, 
   <span class="italic">blob_csid</span>      IN             NUMBER,
   <span class="italic">lang_context</span>   IN OUT         INTEGER,
   <span class="italic">warning</span>        OUT            INTEGER);
</pre>
<p class="titleinrefsubsect"><a id="sthref58"></a>Parameters</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP66656"></a><a id="sthref59"></a><a id="sthref60"></a>Table 2-12 CONVERTTOCLOB procedure parameters</p>
<table class="cellalignment1016" title="CONVERTTOCLOB procedure parameters " summary="This table describes the parameters of DBMS_LOB.CONVERTTOCLOB." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t17">Parameter</th>
<th class="cellalignment1017" id="r1c2-t17">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t17" headers="r1c1-t17">
<p><code><span class="codeinlineitalic">dest_lob</span></code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t17 r1c2-t17">
<p>Locator for the destination LOB</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t17" headers="r1c1-t17">
<p><code><span class="codeinlineitalic">src_blob</span></code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t17 r1c2-t17">
<p>Locator for the source LOB</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r4c1-t17" headers="r1c1-t17">
<p><code><span class="codeinlineitalic">amount</span></code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t17 r1c2-t17">
<p>Number of bytes to convert from the source LOB</p>
<p>If you want to convert the entire BLOB, pass the constant <code>BLOBMAXSIZE</code>. If you pass any other value, it must be less than or equal to the size of the BLOB.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r5c1-t17" headers="r1c1-t17">
<p><code><span class="codeinlineitalic">dest_offset</span></code></p>
</td>
<td class="cellalignment1018" headers="r5c1-t17 r1c2-t17">
<p><code>(IN)</code> Offset in characters in the destination LOB for the start of the write</p>
<p>Specify a value of 1 to start at the beginning of the LOB.</p>
<p><code>(OUT)</code> The new offset in characters after the end of the write</p>
<p>This offset always points to the beginning of the first complete character after the end of the write.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r6c1-t17" headers="r1c1-t17">
<p><code><span class="codeinlineitalic">src_offset</span></code></p>
</td>
<td class="cellalignment1018" headers="r6c1-t17 r1c2-t17">
<p><code>(IN)</code> Offset in bytes in the source LOB for the start of the read</p>
<p><code>(OUT)</code> Offset in bytes in the source LOB right after the end of the read</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r7c1-t17" headers="r1c1-t17">
<p><code><span class="codeinlineitalic">blob_csid</span></code></p>
</td>
<td class="cellalignment1018" headers="r7c1-t17 r1c2-t17">
<p>Character set ID for the source BLOB data</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r8c1-t17" headers="r1c1-t17">
<p><code><span class="codeinlineitalic">lang_context</span></code></p>
</td>
<td class="cellalignment1018" headers="r8c1-t17 r1c2-t17">
<p><code>(</code><code>IN</code><code>)</code> Language context, such as shift status, for the current conversion (ignored by TimesTen)</p>
<p><code>(OUT)</code> Language context at the time when the current conversion is done (set to 0 by TimesTen)</p>
<p>This parameter is not supported by TimesTen.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r9c1-t17" headers="r1c1-t17">
<p><code><span class="codeinlineitalic">warning</span></code></p>
</td>
<td class="cellalignment1018" headers="r9c1-t17 r1c2-t17">
<p>Warning message</p>
<p>This parameter is not supported by TimesTen.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="titleinrefsubsect"><a id="sthref61"></a>Usage notes</p>
<p class="subhead1"><a id="TTPLP66657"></a>Preconditions</p>
<p>Before a call to <code>CONVERTTOCLOB</code>, the following preconditions must be met.</p>
<ul>
<li>
<p>Both the source and destination LOBs must exist.</p>
</li>
<li>
<p>If the destination LOB is a persistent LOB, the row must be locked before calling the <code>CONVERTTOCLOB</code> procedure. To lock the row, select the LOB using the <code>FOR UPDATE</code> clause of the <code>SELECT</code> statement.</p>
</li>
</ul>
<p class="subhead1"><a id="TTPLP66658"></a>Constants and defaults</p>
<p>All parameters are required. You must pass a variable for each <code>OUT</code> or <code>IN OUT</code> parameter. You must pass either a variable or a value for each <code>IN</code> parameter.</p>
<p><a href="#BGBDJEDC">Table 2-13</a> gives a summary of typical values for each parameter. Note that constants are used for some values. These constants are defined in the <code>dbmslob.sql</code> package specification file.</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP71647"></a><a id="sthref62"></a><a id="BGBDJEDC"></a>Table 2-13 CONVERTTOCLOB typical values</p>
<table class="cellalignment1016" title="CONVERTTOCLOB typical values" summary="This table describes Typical Values for use with CONVERTTOCLOB." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t18">Parameter</th>
<th class="cellalignment1017" id="r1c2-t18">Value</th>
<th class="cellalignment1017" id="r1c3-t18">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t18" headers="r1c1-t18">
<p><code><span class="codeinlineitalic">amount</span></code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t18 r1c2-t18">
<p><code>BLOBMAXSIZE (IN)</code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t18 r1c3-t18">
<p>Convert the entire LOB.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t18" headers="r1c1-t18">
<p><code><span class="codeinlineitalic">dest_offset</span></code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t18 r1c2-t18">
<p><code>1 (IN)</code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t18 r1c3-t18">
<p>Start from the beginning.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r4c1-t18" headers="r1c1-t18">
<p><code><span class="codeinlineitalic">src_offset</span></code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t18 r1c2-t18">
<p><code>1 (IN)</code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t18 r1c3-t18">
<p>Start from the beginning.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r5c1-t18" headers="r1c1-t18">
<p><code><span class="codeinlineitalic">blob_csid</span></code></p>
</td>
<td class="cellalignment1018" headers="r5c1-t18 r1c2-t18">
<p><code>DEFAULT_CSID (IN)</code></p>
</td>
<td class="cellalignment1018" headers="r5c1-t18 r1c3-t18">
<p>Default character set ID, use same ID as destination CLOB.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r6c1-t18" headers="r1c1-t18">
<p><code><span class="codeinlineitalic">lang_context</span></code></p>
</td>
<td class="cellalignment1018" headers="r6c1-t18 r1c2-t18">
<p><code>DEFAULT_LANG_CTX (IN)</code></p>
</td>
<td class="cellalignment1018" headers="r6c1-t18 r1c3-t18">
<p>This is the default language context (ignored by TimesTen).</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r7c1-t18" headers="r1c1-t18">
<p><code><span class="codeinlineitalic">warning</span></code></p>
</td>
<td class="cellalignment1018" headers="r7c1-t18 r1c2-t18">
<p><code>NO_WARNING (OUT)</code></p>
<p><code>WARN_INCONVERTIBLE_CHAR (OUT)</code></p>
</td>
<td class="cellalignment1018" headers="r7c1-t18 r1c3-t18">
<p>This is a warning message (ignored by TimesTen).</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="subhead1"><a id="TTPLP66660"></a>General notes</p>
<ul>
<li>
<p>You must specify the desired character set ID for the source BLOB in the <code><span class="codeinlineitalic">blob_csid</span></code> parameter. If you pass a zero value, the database assumes that the desired character set is the same as the destination CLOB character set.</p>
</li>
<li>
<p>You must specify the offsets for both the source and destination LOBs, and the number of characters to copy from the source LOB. The <code><span class="codeinlineitalic">amount</span></code> and <code><span class="codeinlineitalic">src_offset</span></code> values are in bytes and the <code><span class="codeinlineitalic">dest_offset</span></code> is in characters. To convert the entire LOB, you can specify <code>BLOBMAXSIZE</code> for the <code><span class="codeinlineitalic">amount</span></code> parameter.</p>
</li>
<li>
<p><code>CONVERTTOCLOB</code> gets the source and destination LOBs as necessary prior to conversion and write of the data.</p>
</li>
</ul>
<p class="titleinrefsubsect"><a id="sthref63"></a>Exceptions</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP66661"></a><a id="sthref64"></a><a id="sthref65"></a>Table 2-14 CONVERTTOCLOB procedure exceptions</p>
<table class="cellalignment1016" title="CONVERTTOCLOB procedure exceptions " summary="This table describes the Exceptions raised by CONVERTTOCLOB." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t19">Exception</th>
<th class="cellalignment1017" id="r1c2-t19">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t19" headers="r1c1-t19">
<p><code>VALUE_ERROR</code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t19 r1c2-t19">
<p>Any of the input parameters is <code>NULL</code> or invalid.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t19" headers="r1c1-t19">
<p><code>INVALID_ARGVAL</code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t19 r1c2-t19">
<p>Any of the following is true:</p>
<p><code><span class="codeinlineitalic">src_offset</span></code> &lt; 1 or <code><span class="codeinlineitalic">src_offset</span></code> &gt; <code>BLOBMAXSIZE</code></p>
<p><code><span class="codeinlineitalic">dest_offset</span></code> &lt; 1 or <code><span class="codeinlineitalic">dest_offset</span></code> &gt; <code>CLOBMAXSIZE</code></p>
<p><code><span class="codeinlineitalic">amount</span></code> &lt; 1 or <code><span class="codeinlineitalic">amount</span></code> &gt; <code>BLOBMAXSIZE</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<a id="i997674"></a><a id="TTPLP66662"></a>
<hr/>
<h3 class="refsect2"><a id="sthref66"></a>COPY procedures</h3>
<p>This procedure copies all or part of a source LOB to a destination LOB. You can specify the offsets for both the source and destination LOBs, and the number of bytes or characters to copy.</p>
<p class="titleinrefsubsect"><a id="sthref67"></a>Syntax</p>
<pre>DBMS_LOB.COPY (
  <span class="italic">dest_lob</span>    IN OUT NOCOPY BLOB,
  <span class="italic">src_lob</span>     IN            BLOB,
  <span class="italic">amount</span>      IN            INTEGER,
  <span class="italic">dest_offset</span> IN            INTEGER := 1,
  <span class="italic">src_offset</span>  IN            INTEGER := 1);

DBMS_LOB.COPY ( 
  <span class="italic">dest_lob</span>    IN OUT NOCOPY CLOB  CHARACTER SET ANY_CS,
  <span class="italic">src_lob</span>     IN            CLOB  CHARACTER SET <span class="italic">dest_lob</span>%CHARSET,
  <span class="italic">amount</span>      IN            INTEGER,
  <span class="italic">dest_offset</span> IN            INTEGER := 1,
  <span class="italic">src_offset</span>  IN            INTEGER := 1);
</pre>
<p class="titleinrefsubsect"><a id="sthref68"></a>Parameters</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP66663"></a><a id="sthref69"></a><a id="sthref70"></a>Table 2-15 COPY procedure parameters</p>
<table class="cellalignment1016" title="COPY procedure parameters " summary="This table describes the parameters of DBMS_LOB.COPY." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t20">Parameter</th>
<th class="cellalignment1017" id="r1c2-t20">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t20" headers="r1c1-t20">
<p><code><span class="codeinlineitalic">dest_lob</span></code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t20 r1c2-t20">
<p>Locator for the destination LOB being copied to</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t20" headers="r1c1-t20">
<p><code><span class="codeinlineitalic">src_lob</span></code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t20 r1c2-t20">
<p>Locator for the source LOB being copied from</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r4c1-t20" headers="r1c1-t20">
<p><code><span class="codeinlineitalic">amount</span></code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t20 r1c2-t20">
<p>Number of bytes (for BLOBs) or characters (for CLOBs or NCLOBs) to copy</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r5c1-t20" headers="r1c1-t20">
<p><code><span class="codeinlineitalic">dest_offset</span></code></p>
</td>
<td class="cellalignment1018" headers="r5c1-t20 r1c2-t20">
<p>Offset in bytes or characters in the destination LOB for the start of the copy (starting from 1)</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r6c1-t20" headers="r1c1-t20">
<p><code><span class="codeinlineitalic">src_offset</span></code></p>
</td>
<td class="cellalignment1018" headers="r6c1-t20 r1c2-t20">
<p>Offset in bytes or characters in the source LOB for the start of the copy (starting from 1)</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="titleinrefsubsect"><a id="sthref71"></a>Usage notes</p>
<ul>
<li>
<p>If the offset you specify in the destination LOB is beyond the end of the data currently in this LOB, then zero-byte fillers (for BLOBs) or spaces (for CLOBs or NCLOBs) are inserted in the destination LOB to reach the offset. If the offset is less than the current length of the destination LOB, then existing data is overwritten.</p>
</li>
<li>
<p>It is not an error to specify an amount that exceeds the length of the data in the source LOB. Thus, you can specify a large amount to copy from the source LOB, which copies data from the <code><span class="codeinlineitalic">src_offset</span></code> to the end of the source LOB.</p>
</li>
<li>
<p>It is recommended that you enclose write operations to the LOB with <code>OPEN</code> and <code>CLOSE</code> calls, but not mandatory. However, if you opened the LOB before performing the operation, you must close it before you commit or roll back the transaction.</p>
</li>
<li>
<p>In addition to copying from one TimesTen LOB to another, <code>COPY</code> can copy from a TimesTen LOB to a passthrough LOB, from a passthrough LOB to a TimesTen LOB, or from one passthrough LOB to another passthrough LOB. An attempt to copy a passthrough LOB to a TimesTen LOB when the passthrough LOB is larger than the TimesTen LOB size limit results in an error.</p>
</li>
</ul>
<p class="titleinrefsubsect"><a id="sthref72"></a>Exceptions</p>
<p>Maximum LOB size is <code>BLOBMAXSIZE</code> for a BLOB or <code>CLOBMAXSIZE</code> for a CLOB.</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP66664"></a><a id="sthref73"></a><a id="sthref74"></a>Table 2-16 &nbsp;COPY procedure exceptions</p>
<table class="cellalignment1016" title="&nbsp;COPY procedure exceptions " summary="This table describes the Exceptions raised by COPY." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t21">Exception</th>
<th class="cellalignment1017" id="r1c2-t21">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t21" headers="r1c1-t21">
<p><code>VALUE_ERROR</code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t21 r1c2-t21">
<p>Any of the input parameters is <code>NULL</code> or invalid.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t21" headers="r1c1-t21">
<p><code>INVALID_ARGVAL</code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t21 r1c2-t21">
<p>Any of the following is true:</p>
<p><code><span class="codeinlineitalic">src_offset</span></code> &lt; 1 or <code><span class="codeinlineitalic">src_offset</span></code> &gt; maximum LOB size</p>
<p><code><span class="codeinlineitalic">dest_offset</span></code> &lt; 1 or <code><span class="codeinlineitalic">dest_offset</span></code> &gt; maximum LOB size</p>
<p><code><span class="codeinlineitalic">amount</span></code> &lt; 1 or <code><span class="codeinlineitalic">amount</span></code> &gt; maximum LOB size</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r4c1-t21" headers="r1c1-t21">
<p><code>QUERY_WRITE</code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t21 r1c2-t21">
<p>Cannot perform a LOB write inside a query. (This is not applicable for TimesTen.)</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r5c1-t21" headers="r1c1-t21">
<p><code>BUFFERING_ENABLED</code></p>
</td>
<td class="cellalignment1018" headers="r5c1-t21 r1c2-t21">
<p>Cannot perform the operation if LOB buffering is enabled on either LOB.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="titleinrefsubsect"><a id="sthref75"></a>Examples</p>
<p>The examples in this section show how to copy LOBs in PL/SQL, copying between passthrough LOBs (from Oracle Database) and TimesTen LOBs. The first example uses the <code>COPY</code> procedure. The second, as contrast, simply uses <code>INSERT</code> and <code>UPDATE</code> statements, though also uses functionality of the <code>DBMS_LOB</code> package.</p>
<p class="subhead2"><a id="TTPLP71648"></a>Copy CLOBs using COPY procedure</p>
<p>This example uses the <code>COPY</code> procedure to first copy a passthrough CLOB from Oracle Database into a TimesTen CLOB, then to copy a TimesTen CLOB into a passthrough CLOB.</p>
<pre>autocommit 0;
passthrough 0;
DROP TABLE tt_table; CREATE TABLE tt_table (i INT, c CLOB); COMMIT;
passthrough 3;
DROP TABLE ora_table; CREATE TABLE ora_table (i INT, c CLOB); COMMIT;
passthrough 0;
set serveroutput on;
 
DECLARE
  passthru_clob CLOB;
  tt_clob CLOB;
  clob_length BINARY_INTEGER;
  clob_buffer VARCHAR2(80);

BEGIN
  EXECUTE IMMEDIATE &#39;call ttoptsetflag(&#39;&#39;passthrough&#39;&#39;, 1)&#39;;
 
  -- Note that in PL/SQL, passthrough statements must be executed as
  -- dynamic SQL, and SELECT INTO must be used to assign a passthrough LOB.
 
  -- 1. Copy a passthrough CLOB on Oracle Database to a TimesTen CLOB
  -- On Oracle Database : insert a row with an empty CLOB, get a passthrough CLOB
  -- handle, and append to the passthrough CLOB.
  EXECUTE IMMEDIATE &#39;INSERT INTO ora_table VALUES (1, EMPTY_CLOB())&#39;;
  EXECUTE IMMEDIATE &#39;SELECT c FROM ora_table WHERE i = 1 FOR UPDATE&#39; 
                     INTO passthru_clob; 
  DBMS_LOB.APPEND(passthru_clob, &#39;Copy from Oracle Database to TimesTen&#39;);
  clob_length := DBMS_LOB.GETLENGTH(passthru_clob);
 
  -- On TimesTen: insert a row with an empty CLOB, and get a TimesTen CLOB handle
  INSERT INTO tt_table VALUES (1, EMPTY_CLOB()) RETURNING c INTO tt_clob;
 
  -- Copy the passthrough CLOB on Oracle Database to a TimesTen CLOB
  DBMS_LOB.COPY(tt_clob, passthru_clob, clob_length, 1, 1);
 
  -- On TimesTen: display the modified TimesTen CLOB
  DBMS_LOB.READ(tt_clob, clob_length, 1, clob_buffer);
  DBMS_OUTPUT.PUT_LINE(clob_buffer);
 
  -- 2. Copy a TimesTen CLOB to a passthrough CLOB on Oracle Database
  -- On TimesTen: insert a row with LOB data, and get a TimesTen CLOB handle
  INSERT INTO tt_table VALUES (2, &#39;Copy from TimesTen to Oracle Database.&#39;) 
         RETURNING c INTO tt_clob;
  clob_length := DBMS_LOB.GETLENGTH(tt_clob);
 
  -- On Oracle Database: insert a row with an empty CLOB, and get a passthrough
  -- CLOB handle
  EXECUTE IMMEDIATE &#39;INSERT INTO ora_table VALUES (2, EMPTY_CLOB())&#39;;
  EXECUTE IMMEDIATE &#39;SELECT c FROM ora_table WHERE i = 2 FOR UPDATE&#39; 
                     INTO passthru_clob ; 
 
  -- Copy a TimesTen CLOB to a passthrough CLOB on Oracle Database
  DBMS_LOB.COPY(passthru_clob, tt_clob, clob_length, 1, 1);
 
  -- On Oracle Database: display the modified passthrough CLOB
  DBMS_LOB.READ(passthru_clob, clob_length, 1, clob_buffer);
  DBMS_OUTPUT.PUT_LINE(clob_buffer);
 
  COMMIT;
  EXECUTE IMMEDIATE &#39;call ttoptsetflag(&#39;&#39;passthrough&#39;&#39;, 0)&#39;;
END;
</pre>
<p class="subhead2"><a id="TTPLP71649"></a>Copy CLOBs using INSERT and UPDATE statements</p>
<p>A passthrough LOB from Oracle Database can be bound to an <code>INSERT</code> or <code>UPDATE</code> statement executed against a table in TimesTen. You can copy a passthrough LOB to a TimesTen LOB in this way. Similarly, a TimesTen LOB can be bound to a passthrough <code>INSERT</code> or <code>UPDATE</code> statement executed against a table in Oracle Database. You can copy a TimesTen LOB to a passthrough LOB in this way.</p>
<p>This example shows both of these scenarios.</p>
<pre>autocommit 0;
passthrough 0;
DROP TABLE tt_table; CREATE TABLE tt_table (i INT, c CLOB); COMMIT;
passthrough 3;
DROP TABLE ora_table; CREATE TABLE ora_table (i INT, c CLOB); COMMIT;
passthrough 0;
set serveroutput on;
 
DECLARE
  passthru_clob CLOB;
  tt_clob CLOB;
  clob_length BINARY_INTEGER;
  clob_buffer VARCHAR2(80);

BEGIN
  EXECUTE IMMEDIATE &#39;call ttoptsetflag(&#39;&#39;passthrough&#39;&#39;, 1)&#39;;
 
  -- Note that in PL/SQL, passthrough statements must be executed as
  -- dynamic SQL, and SELECT INTO must be used to assign a passthrough LOB.
 
  -- 1. A TimesTen CLOB is updated with a passthrough CLOB on Oracle Database
  -- On TimesTen: insert a row with a NULL CLOB value
  INSERT INTO tt_table VALUES (1, NULL);
 
  -- On Oracle Database: insert a row with an empty CLOB, get a passthrough CLOB
  -- handle
  EXECUTE IMMEDIATE &#39;INSERT INTO ora_table 
                     VALUES (1, &#39;&#39;Copy from Oracle Database to TimesTen&#39;&#39;)&#39;;
  EXECUTE IMMEDIATE &#39;SELECT c FROM ora_table WHERE i = 1&#39; INTO passthru_clob ; 
 
  -- On TimesTen: update the TimesTen CLOB with the passthrough CLOB
  UPDATE tt_table SET c = passthru_clob where i = 1;
 
  -- On TimesTen: display the modified TimesTen CLOB
  SELECT c INTO tt_clob FROM tt_table WHERE i = 1;
  clob_length := DBMS_LOB.GETLENGTH(tt_clob);
  DBMS_LOB.READ(tt_clob, clob_length, 1, clob_buffer);
  DBMS_OUTPUT.PUT_LINE(clob_buffer);
 
  -- 2. A passthrough table on Oracle Database is inserted with a TimesTen CLOB
  -- On TimesTen: insert a row with a CLOB value, and get a TimesTen CLOB handle
  INSERT INTO tt_table VALUES (2, &#39;Copy from TimesTen to Oracle Database.&#39;) 
                       RETURNING c INTO tt_clob;
 
  -- On Oracle Database: insert a row on Oracle Database with the TimesTen CLOB
  EXECUTE IMMEDIATE &#39;INSERT INTO ora_table VALUES (2, :1)&#39; USING tt_clob;
 
  -- On Oracle Database: display the modified passthrough CLOB
  EXECUTE IMMEDIATE &#39;SELECT c FROM ora_table WHERE i = 2&#39; INTO passthru_clob; 
  clob_length := DBMS_LOB.GETLENGTH(passthru_clob);
  DBMS_LOB.READ(passthru_clob, clob_length, 1, clob_buffer);
  DBMS_OUTPUT.PUT_LINE(clob_buffer);
 
  COMMIT;
  EXECUTE IMMEDIATE &#39;call ttoptsetflag(&#39;&#39;passthrough&#39;&#39;, 0)&#39;;
END;
</pre>
<a id="i997788"></a><a id="TTPLP66665"></a>
<hr/>
<h3 class="refsect2"><a id="sthref76"></a>CREATETEMPORARY procedures</h3>
<p>This procedure creates a temporary BLOB, CLOB, or NCLOB in the temporary data partition.</p>
<p>Use <a href="#BGBDBFAD">FREETEMPORARY procedures</a> when you are finished using temporary LOBs.</p>
<div class="infobox-note">
<p class="notep1">Important:</p>
In TimesTen, creation of a temporary LOB results in creation of a database transaction if one is not already in progress. You must execute a commit or rollback to close the transaction.</div>
<p class="titleinrefsubsect"><a id="sthref77"></a>Syntax</p>
<pre>DBMS_LOB.CREATETEMPORARY (
   <span class="italic">lob_loc</span> IN OUT NOCOPY BLOB,
   <span class="italic">cache</span>   IN            BOOLEAN,
   <span class="italic">dur</span>     IN            BINARY_INTEGER := DBMS_LOB.SESSION);
  
DBMS_LOB.CREATETEMPORARY (
   <span class="italic">lob_loc</span> IN OUT NOCOPY CLOB CHARACTER SET ANY_CS,
   <span class="italic">cache</span>   IN            BOOLEAN,
   <span class="italic">dur</span>     IN            BINARY_INTEGER := DBMS_LOB.SESSION);
</pre>
<p class="titleinrefsubsect"><a id="sthref78"></a>Parameters</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP66666"></a><a id="sthref79"></a><a id="sthref80"></a>Table 2-17 CREATETEMPORARY procedure parameters</p>
<table class="cellalignment1016" title="CREATETEMPORARY procedure parameters " summary="This table describes the parameters of DBMS_LOB.CREATETEMPORARY." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t23">Parameter</th>
<th class="cellalignment1017" id="r1c2-t23">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t23" headers="r1c1-t23">
<p><code><span class="codeinlineitalic">lob_loc</span></code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t23 r1c2-t23">
<p>Locator for the temporary LOB</p>
<p>It is permissible to specify an <code>NCLOB</code> locator instead of a <code>CLOB</code> locator. The appropriate character set is used.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t23" headers="r1c1-t23">
<p><code><span class="codeinlineitalic">cache</span></code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t23 r1c2-t23">
<p>Flag indicating whether the LOB should be read into buffer cache</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r4c1-t23" headers="r1c1-t23">
<p><code><span class="codeinlineitalic">dur</span></code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t23 r1c2-t23">
<p>One of two predefined duration values&mdash;<code>SESSION</code> or <code>CALL</code>&mdash;that specifies a hint as to when the temporary LOB is cleaned up</p>
<p><span class="bold">Note</span>: Either setting is permitted, but in TimesTen the duration of a LOB locator does not extend past the end of the transaction.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="titleinrefsubsect"><a id="sthref81"></a>Usage notes</p>
<ul>
<li>
<p><code>CREATETEMPORARY</code> cannot be used to create a temporary passthrough LOB.</p>
</li>
</ul>
<a id="i997838"></a><a id="TTPLP66667"></a>
<hr/>
<h3 class="refsect2"><a id="sthref82"></a>ERASE procedures</h3>
<p>This procedure erases all or part of a LOB.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Also see <a href="#i999503">&#34;TRIM procedures&#34;</a>.</div>
<p class="titleinrefsubsect"><a id="sthref83"></a>Syntax</p>
<pre>DBMS_LOB.ERASE (
   <span class="italic">lob_loc</span>           IN OUT   NOCOPY   BLOB,
   <span class="italic">amount</span>            IN OUT   NOCOPY   INTEGER,
   <span class="italic">offset</span>            IN                INTEGER := 1);

DBMS_LOB.ERASE (
   <span class="italic">lob_loc</span>           IN OUT   NOCOPY   CLOB CHARACTER SET ANY_CS,
   <span class="italic">amount</span>            IN OUT   NOCOPY   INTEGER,
   <span class="italic">offset</span>            IN                INTEGER := 1);
</pre>
<p class="titleinrefsubsect"><a id="sthref84"></a>Parameters</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP66668"></a><a id="sthref85"></a><a id="sthref86"></a>Table 2-18 ERASE procedure parameters</p>
<table class="cellalignment1016" title="ERASE procedure parameters" summary="This table describes the parameters of DBMS_LOB.ERASE." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t25">Parameter</th>
<th class="cellalignment1017" id="r1c2-t25">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t25" headers="r1c1-t25">
<p><code><span class="codeinlineitalic">lob_loc</span></code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t25 r1c2-t25">
<p>Locator for the LOB</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t25" headers="r1c1-t25">
<p><code><span class="codeinlineitalic">amount</span></code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t25 r1c2-t25">
<p>(<code>IN</code>) Number of bytes (for BLOBs) or characters (for CLOBs or NCLOBs) to be erased</p>
<p>(<code>OUT</code>) Number of bytes or characters actually erased</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r4c1-t25" headers="r1c1-t25">
<p><code><span class="codeinlineitalic">offset</span></code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t25 r1c2-t25">
<p>Absolute offset (starting from 1) from the beginning of the LOB, in bytes (for BLOBs) or characters (for CLOBs or NCLOBs)</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="titleinrefsubsect"><a id="sthref87"></a>Usage notes</p>
<ul>
<li>
<p>When data is erased from the middle of a LOB, zero-byte fillers (for BLOBs) or spaces (for CLOBs or NCLOBs) are written.</p>
</li>
<li>
<p>The actual number of bytes or characters erased can differ from the number you specified in the <code><span class="codeinlineitalic">amount</span></code> parameter if the end of the LOB data is reached first. The actual number of characters or bytes erased is returned in the <code><span class="codeinlineitalic">amount</span></code> parameter.</p>
</li>
<li>
<p>It is recommended that you enclose write operations to the LOB with <code>OPEN</code> and <code>CLOSE</code> calls, but not mandatory. However, if you opened the LOB before performing the operation, you must close it before you commit or roll back the transaction.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
The length of the LOB does not decrease when a section of the LOB is erased. To decrease the length of a LOB, see <a href="#i999503">&#34;TRIM procedures&#34;</a>.</div>
<p class="titleinrefsubsect"><a id="sthref88"></a>Exceptions</p>
<p>Maximum LOB size is <code>BLOBMAXSIZE</code> for a BLOB or <code>CLOBMAXSIZE</code> for a CLOB.</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP66669"></a><a id="sthref89"></a><a id="sthref90"></a>Table 2-19 ERASE procedure exceptions</p>
<table class="cellalignment1016" title="ERASE procedure exceptions " summary="This table describes the Exceptions raised by ERASE." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t27">Exception</th>
<th class="cellalignment1017" id="r1c2-t27">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t27" headers="r1c1-t27">
<p><code>VALUE_ERROR</code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t27 r1c2-t27">
<p>Any input parameter is <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t27" headers="r1c1-t27">
<p><code>INVALID_ARGVAL</code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t27 r1c2-t27">
<p>Any of the following is true:</p>
<p><code><span class="codeinlineitalic">amount</span></code> &lt; 1 or <code><span class="codeinlineitalic">amount</span></code> &gt; maximum LOB size</p>
<p><code><span class="codeinlineitalic">offset</span></code> &lt; 1 or <code><span class="codeinlineitalic">offset</span></code> &gt; maximum LOB size</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r4c1-t27" headers="r1c1-t27">
<p><code>QUERY_WRITE</code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t27 r1c2-t27">
<p>Cannot perform a LOB write inside a query. (This is not applicable for TimesTen.)</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r5c1-t27" headers="r1c1-t27">
<p><code>BUFFERING_ENABLED</code></p>
</td>
<td class="cellalignment1018" headers="r5c1-t27 r1c2-t27">
<p>Cannot perform operation if LOB buffering is enabled on the LOB.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<a id="BGBDBFAD"></a><a id="TTPLP66700"></a>
<hr/>
<h3 class="refsect2"><a id="sthref91"></a>FREETEMPORARY procedures</h3>
<p>This procedure frees a temporary BLOB, CLOB, or NCLOB in the temporary data partition.</p>
<p>Also refer to the section on <a href="#i997788">CREATETEMPORARY procedures</a>.</p>
<p class="titleinrefsubsect"><a id="sthref92"></a>Syntax</p>
<pre>DBMS_LOB.FREETEMPORARY (
   <span class="italic">lob_loc</span>  IN OUT  NOCOPY BLOB); 

DBMS_LOB.FREETEMPORARY (
   <span class="italic">lob_loc</span>  IN OUT  NOCOPY CLOB CHARACTER SET ANY_CS); 
</pre>
<p class="titleinrefsubsect"><a id="sthref93"></a>Parameters</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP66701"></a><a id="sthref94"></a><a id="sthref95"></a>Table 2-20 FREETEMPORARY procedure parameters</p>
<table class="cellalignment1016" title="FREETEMPORARY procedure parameters " summary="This table describes the parameters of DBMS_LOB.FREETEMPORARY." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t28">Parameter</th>
<th class="cellalignment1017" id="r1c2-t28">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t28" headers="r1c1-t28">
<p><code><span class="codeinlineitalic">lob_loc</span></code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t28 r1c2-t28">
<p>Locator for the LOB</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="titleinrefsubsect"><a id="sthref96"></a>Usage notes</p>
<ul>
<li>
<p>After the call to <code>FREETEMPORARY</code>, the LOB locator that was freed is marked as invalid.</p>
</li>
<li>
<p>If an invalid LOB locator is assigned to another LOB locator through an assignment operation in PL/SQL, then the target of the assignment is also freed and marked as invalid.</p>
</li>
<li>
<p><code>CREATETEMPORARY</code> cannot be used to create a temporary passthrough LOB; however, if one is created using some other mechanism, such as SQL, <code>ISTEMPORARY</code> and <code>FREETEMPORARY</code> can be used on that LOB.</p>
</li>
</ul>
<a id="BGBCDIHI"></a><a id="TTPLP66706"></a>
<hr/>
<h3 class="refsect2"><a id="sthref97"></a>GETCHUNKSIZE functions</h3>
<p>In TimesTen, this function is not supported and simply returns the value 32K for interoperability. This value is not relevant for any performance tuning for a TimesTen application. (Refer to <a class="olink ARPLS66706" href="../ARPLS/d_lob.htm#ARPLS66706">&#34;GETCHUNKSIZE Functions&#34;</a> in <span class="italic">Oracle Database PL/SQL Packages and Types Reference</span> if you are interested in Oracle Database functionality.)</p>
<p class="titleinrefsubsect"><a id="sthref98"></a>Syntax</p>
<pre>DBMS_LOB.GETCHUNKSIZE (
   <span class="italic">lob_loc</span> IN BLOB) 
  RETURN INTEGER; 

DBMS_LOB.GETCHUNKSIZE (
   <span class="italic">lob_loc</span> IN CLOB CHARACTER SET ANY_CS) 
  RETURN INTEGER; 
</pre>
<p class="titleinrefsubsect"><a id="sthref99"></a>Parameters</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP66707"></a><a id="sthref100"></a><a id="sthref101"></a>Table 2-21 GETCHUNKSIZE function parameters</p>
<table class="cellalignment1016" title="GETCHUNKSIZE function parameters" summary="This table describes the parameters of DBMS_LOB.GETCHUNKSIZE." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t29">Parameter</th>
<th class="cellalignment1017" id="r1c2-t29">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t29" headers="r1c1-t29">
<p><code><span class="codeinlineitalic">lob_loc</span></code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t29 r1c2-t29">
<p>Locator for the LOB</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="titleinrefsubsect"><a id="sthref102"></a>Return values</p>
<p>Returns the value 32K, but applications should not rely on this number for performance tuning.</p>
<p class="titleinrefsubsect"><a id="sthref103"></a>Exceptions</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP66708"></a><a id="sthref104"></a><a id="sthref105"></a>Table 2-22 GETCHUNKSIZE procedure exceptions</p>
<table class="cellalignment1016" title="GETCHUNKSIZE procedure exceptions " summary="This table describes the Exceptions raised by GETCHUNKSIZE." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t30">Exception</th>
<th class="cellalignment1017" id="r1c2-t30">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t30" headers="r1c1-t30">
<p><code>BUFFERING_ENABLED</code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t30 r1c2-t30">
<p>Cannot perform operation if LOB buffering is enabled on the LOB.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<a id="i998484"></a><a id="TTPLP66709"></a>
<hr/>
<h3 class="refsect2"><a id="sthref106"></a>GETLENGTH functions</h3>
<p>This function returns the length of the specified LOB in bytes (for BLOBs) or characters (for CLOBs or NCLOBs).</p>
<p class="titleinrefsubsect"><a id="sthref107"></a>Syntax</p>
<pre>DBMS_LOB.GETLENGTH (
   <span class="italic">lob_loc</span>    IN  BLOB) 
  RETURN INTEGER;
 
DBMS_LOB.GETLENGTH (
   <span class="italic">lob_loc</span>    IN  CLOB   CHARACTER SET ANY_CS) 
  RETURN INTEGER;
</pre>
<p class="titleinrefsubsect"><a id="sthref108"></a>Parameters</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP66710"></a><a id="sthref109"></a><a id="sthref110"></a>Table 2-23 GETLENGTH function parameter</p>
<table class="cellalignment1016" title="GETLENGTH function parameter" summary="This table describes the parameters of DBMS_LOB.GETLENGTH." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t31"><span class="bold">Parameter</span></th>
<th class="cellalignment1017" id="r1c2-t31"><span class="bold">Description</span></th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t31" headers="r1c1-t31">
<p><code><span class="codeinlineitalic">lob_loc</span></code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t31 r1c2-t31">
<p>Locator for the LOB</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="titleinrefsubsect"><a id="sthref111"></a>Return values</p>
<p>Returns an <code>INTEGER</code> value for the length of the LOB in bytes or characters. <code>NULL</code> is returned if the value of the input LOB or <code><span class="codeinlineitalic">lob_loc</span></code> is <code>NULL</code>.</p>
<p class="titleinrefsubsect"><a id="sthref112"></a>Usage notes</p>
<ul>
<li>
<p>Any zero-byte or space filler in the LOB caused by previous <code>ERASE</code> or <code>WRITE</code> operations is included in the length count. The length of an empty LOB is 0 (zero).</p>
</li>
</ul>
<p class="titleinrefsubsect"><a id="sthref113"></a>Exceptions</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP66711"></a><a id="sthref114"></a><a id="sthref115"></a>Table 2-24 GETLENGTH procedure exceptions</p>
<table class="cellalignment1016" title="GETLENGTH procedure exceptions " summary="This table describes the Exceptions raised by GETLENGTH." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t32">Exception</th>
<th class="cellalignment1017" id="r1c2-t32">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t32" headers="r1c1-t32">
<p><code>BUFFERING_ENABLED</code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t32 r1c2-t32">
<p>Cannot perform operation if LOB buffering is enabled on the LOB.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="titleinrefsubsect"><a id="sthref116"></a>Examples</p>
<p>The following example shows use of the <code>GETLENGTH</code> function.</p>
<pre>create table t1 (a int, b blob, c clob);
 
insert into t1(a,b,c) values(1, 0x123451234554321, &#39;abcde&#39;);
1 row inserted.
 
commit;
 
declare
  myblob blob;
  i integer;
begin
  myblob := empty_blob();
  i := dbms_lob.getlength(myblob);
  dbms_output.put_line(&#39;Length of BLOB before SELECT: &#39; || i);
  select b into myblob from t1 where a=1;
  i := dbms_lob.getlength(myblob);
  dbms_output.put_line(&#39;Length of BLOB after SELECT: &#39; || i);
end;
 
Length of BLOB before SELECT: 0
Length of BLOB after SELECT: 8
 
PL/SQL procedure successfully completed.
</pre>
<p>(Output is shown after running the commands from a SQL script.)</p>
<a id="i1012980"></a><a id="TTPLP601"></a>
<hr/>
<h3 class="refsect2">GET_STORAGE_LIMIT functions</h3>
<p>This function returns the storage limit, in bytes, for the type of specified LOB.</p>
<p class="titleinrefsubsect"><a id="sthref117"></a>Syntax</p>
<pre>DBMS_LOB.GET_STORAGE_LIMIT (
   <span class="italic">lob_loc</span>  IN CLOB CHARACTER SET ANY_CS)
 RETURN INTEGER; 

DBMS_LOB.GET_STORAGE_LIMIT (
   <span class="italic">lob_loc</span>  IN BLOB)
 RETURN INTEGER; 
</pre>
<p class="titleinrefsubsect"><a id="sthref118"></a>Parameters</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP66705"></a><a id="sthref119"></a><a id="sthref120"></a>Table 2-25 GET_STORAGE_LIMIT function parameters</p>
<table class="cellalignment1016" title="GET_STORAGE_LIMIT function parameters" summary="This table describes the parameters of DBMS_LOB.GET_STORAGE_LIMIT." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t33">Parameter</th>
<th class="cellalignment1017" id="r1c2-t33">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t33" headers="r1c1-t33">
<p><code><span class="codeinlineitalic">lob_loc</span></code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t33 r1c2-t33">
<p>Locator for the LOB</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="titleinrefsubsect"><a id="sthref121"></a>Return value</p>
<p>In TimesTen, the value returned is simply the maximum storage space, in bytes, for the type of specified LOB. That is 16777216 (16 MB) for a BLOB or 4194304 (4 MB) for a CLOB or NCLOB.</p>
<a id="i998546"></a><a id="TTPLP66715"></a>
<hr/>
<h3 class="refsect2"><a id="sthref122"></a>INSTR functions</h3>
<p>This function returns the matching position of the <code><span class="codeinlineitalic">n</span></code>th occurrence of a specified pattern in a specified LOB, starting from a specified offset.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Also see <a href="#i999349">&#34;SUBSTR functions&#34;</a>.</div>
<p class="titleinrefsubsect"><a id="sthref123"></a>Syntax</p>
<pre>DBMS_LOB.INSTR (
   <span class="italic">lob_loc</span>    IN   BLOB,
   <span class="italic">pattern</span>    IN   RAW,
   <span class="italic">offset</span>     IN   INTEGER := 1,
   <span class="italic">nth</span>        IN   INTEGER := 1)
  RETURN INTEGER;

DBMS_LOB.INSTR (
   <span class="italic">lob_loc</span>    IN   CLOB      CHARACTER SET ANY_CS,
   <span class="italic">pattern</span>    IN   VARCHAR2  CHARACTER SET <span class="italic">lob_loc</span>%CHARSET,
   <span class="italic">offset</span>     IN   INTEGER := 1,
   <span class="italic">nth</span>        IN   INTEGER := 1)
  RETURN INTEGER;
</pre>
<p class="titleinrefsubsect"><a id="sthref124"></a>Parameters</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP66716"></a><a id="sthref125"></a><a id="sthref126"></a>Table 2-26 INSTR function parameters</p>
<table class="cellalignment1016" title="INSTR function parameters" summary="This table describes the parameters of DBMS_LOB.INSTR." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t35"><span class="bold">Parameter</span></th>
<th class="cellalignment1017" id="r1c2-t35"><span class="bold">Description</span></th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t35" headers="r1c1-t35">
<p><code><span class="codeinlineitalic">lob_loc</span></code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t35 r1c2-t35">
<p>Locator for the LOB</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t35" headers="r1c1-t35">
<p><code><span class="codeinlineitalic">pattern</span></code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t35 r1c2-t35">
<p>Pattern to be tested for</p>
<p>The pattern is in <code>RAW</code> bytes for BLOBs, or a character string (<code>VARCHAR2</code>) for CLOBs or NCLOBs. The maximum size of the pattern is 16383 bytes.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r4c1-t35" headers="r1c1-t35">
<p><code><span class="codeinlineitalic">offset</span></code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t35 r1c2-t35">
<p>Absolute offset in bytes (for BLOBs) or characters (for CLOBs or NCLOBs), starting from 1, at which the pattern-matching is to start</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r5c1-t35" headers="r1c1-t35">
<p><code><span class="codeinlineitalic">nth</span></code></p>
</td>
<td class="cellalignment1018" headers="r5c1-t35 r1c2-t35">
<p>Occurrence number of the pattern in the LOB, starting from 1</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="titleinrefsubsect"><a id="sthref127"></a>Return values</p>
<p>The function returns one of the following:</p>
<ul>
<li>
<p>An <code>INTEGER</code> value for the offset of the beginning of the matched pattern, in bytes (for BLOBs) or characters (for CLOBs or NCLOBs)</p>
</li>
<li>
<p>0 (zero) if the pattern is not found</p>
</li>
<li>
<p><code>NULL</code> if any of the input parameters is <code>NULL</code> or invalid or any of the following is true:</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">offset</span></code> &lt; 1 or <code><span class="codeinlineitalic">offset</span></code> &gt; maximum LOB size</p>
</li>
<li>
<p><code><span class="codeinlineitalic">nth</span></code> &lt; 1 or <code><span class="codeinlineitalic">nth</span></code> &gt; maximum LOB size</p>
</li>
</ul>
<p>Where maximum LOB size is <code>BLOBMAXSIZE</code> for a BLOB or <code>CLOBMAXSIZE</code> for a CLOB.</p>
</li>
</ul>
<p class="titleinrefsubsect"><a id="sthref128"></a>Usage notes</p>
<ul>
<li>
<p>For a CLOB or NCLOB, the form of the <code>VARCHAR2</code> buffer for the <code><span class="codeinlineitalic">pattern</span></code> parameter must be appropriate for the type of LOB. If the specified LOB is of type <code>NCLOB</code>, the pattern must contain <code>NCHAR</code> data. If the specified LOB is of type <code>CLOB</code>, the pattern must contain <code>CHAR</code> data.</p>
</li>
<li>
<p>Operations that accept <code>RAW</code> or <code>VARCHAR2</code> parameters for pattern matching, such as <code>INSTR</code>, do not support regular expressions or special matching characters (as in the case of SQL <code>LIKE</code>) in the pattern parameter or substrings.</p>
</li>
</ul>
<a id="i998705"></a><a id="TTPLP66719"></a>
<hr/>
<h3 class="refsect2"><a id="sthref129"></a>ISOPEN functions</h3>
<p>This function checks to see if a LOB was already opened using the input locator.</p>
<p class="titleinrefsubsect"><a id="sthref130"></a>Syntax</p>
<pre>DBMS_LOB.ISOPEN (
   <span class="italic">lob_loc</span> IN BLOB) 
  RETURN INTEGER; 

DBMS_LOB.ISOPEN (
   <span class="italic">lob_loc</span> IN CLOB CHARACTER SET ANY_CS) 
  RETURN INTEGER;
</pre>
<p class="titleinrefsubsect"><a id="sthref131"></a>Parameters</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP66720"></a><a id="sthref132"></a><a id="sthref133"></a>Table 2-27 ISOPEN function parameters</p>
<table class="cellalignment1016" title="ISOPEN function parameters" summary="This table describes the parameters of DBMS_LOB.ISOPEN." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t36">Parameter</th>
<th class="cellalignment1017" id="r1c2-t36">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t36" headers="r1c1-t36">
<p><code><span class="codeinlineitalic">lob_loc</span></code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t36 r1c2-t36">
<p>Locator for the LOB</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="titleinrefsubsect"><a id="sthref134"></a>Return values</p>
<p>The return value is 1 if the LOB is open, or 0 (zero) if not.</p>
<p class="titleinrefsubsect"><a id="sthref135"></a>Usage notes</p>
<ul>
<li>
<p>The &#34;open&#34; status is associated with the LOB, not with the locator. If any locator is used in opening the LOB, then any other locator for the LOB would also see it as open.</p>
</li>
<li>
<p><code>ISOPEN</code> requires a round-trip, because it must check the state on the server to see if the LOB is open.</p>
</li>
</ul>
<a id="i998745"></a><a id="TTPLP66721"></a>
<hr/>
<h3 class="refsect2"><a id="sthref136"></a>ISTEMPORARY functions</h3>
<p>This function determines whether a LOB is temporary.</p>
<p class="titleinrefsubsect"><a id="sthref137"></a>Syntax</p>
<pre>DBMS_LOB.ISTEMPORARY (
   <span class="italic">lob_loc</span> IN BLOB)
  RETURN INTEGER;
 
DBMS_LOB.ISTEMPORARY (
   <span class="italic">lob_loc</span> IN CLOB CHARACTER SET ANY_CS)
  RETURN INTEGER;
</pre>
<p class="titleinrefsubsect"><a id="sthref138"></a>Parameters</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP66722"></a><a id="sthref139"></a><a id="sthref140"></a>Table 2-28 ISTEMPORARY procedure parameters</p>
<table class="cellalignment1016" title="ISTEMPORARY procedure parameters " summary="This table describes the parameters of the DBMS_LOB.ISTEMPORARY subprogram." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t37">Parameter</th>
<th class="cellalignment1017" id="r1c2-t37">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t37" headers="r1c1-t37">
<p><code><span class="codeinlineitalic">lob_loc</span></code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t37 r1c2-t37">
<p>Locator for the LOB</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="titleinrefsubsect"><a id="sthref141"></a>Return values</p>
<p>The return value is 1 if the LOB exists and is temporary, 0 (zero) if the LOB does not exist or is not temporary, or <code>NULL</code> if the given locator value is <code>NULL</code>.</p>
<p class="titleinrefsubsect"><a id="sthref142"></a>Usage notes</p>
<ul>
<li>
<p>When you free a temporary LOB with <code>FREETEMPORARY</code>, the LOB locator is not set to <code>NULL</code>. Consequently, <code>ISTEMPORARY</code> returns 0 (zero) for a locator that has been freed but not explicitly reset to <code>NULL</code>.</p>
</li>
<li>
<p><code>CREATETEMPORARY</code> cannot be used to create a temporary passthrough LOB; however, if one is created using some other mechanism, such as SQL, <code>ISTEMPORARY</code> and <code>FREETEMPORARY</code> can be used on that LOB.</p>
</li>
</ul>
<a id="BABGHBIF"></a><a id="TTPLP66736"></a>
<hr/>
<h3 class="refsect2"><a id="sthref143"></a>OPEN procedures</h3>
<p>This procedure opens a LOB in the indicated mode, read-only or read/write.</p>
<p class="titleinrefsubsect"><a id="sthref144"></a>Syntax</p>
<pre>DBMS_LOB.OPEN (
   <span class="italic">lob_loc</span>   IN OUT NOCOPY BLOB,
   <span class="italic">open_mode</span> IN            BINARY_INTEGER);
 
DBMS_LOB.OPEN (
   <span class="italic">lob_loc</span>   IN OUT NOCOPY CLOB CHARACTER SET ANY_CS,
   <span class="italic">open_mode</span> IN            BINARY_INTEGER);
</pre>
<p class="titleinrefsubsect"><a id="sthref145"></a>Parameters</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP66737"></a><a id="sthref146"></a><a id="sthref147"></a>Table 2-29 OPEN procedure parameters</p>
<table class="cellalignment1016" title="OPEN procedure parameters" summary="This table describes the parameters of the DBMS_LOB.OPEN subprogram." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t38">Parameter</th>
<th class="cellalignment1017" id="r1c2-t38">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t38" headers="r1c1-t38">
<p><code><span class="codeinlineitalic">lob_loc</span></code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t38 r1c2-t38">
<p>Locator for the LOB</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t38" headers="r1c1-t38">
<p><code><span class="codeinlineitalic">open_mode</span></code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t38 r1c2-t38">
<p>Mode in which to open, either <code>LOB_READONLY</code> or <code>LOB_READWRITE</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="titleinrefsubsect"><a id="sthref148"></a>Usage notes</p>
<ul>
<li>
<p>An error is returned if you try to write to a LOB that was opened as read-only.</p>
</li>
<li>
<p><code>OPEN</code> requires a round-trip to the server and causes execution of other code that relies on the <code>OPEN</code> call.</p>
</li>
<li>
<p>It is not mandatory that you wrap LOB operations inside <code>OPEN</code> and <code>CLOSE</code> calls. However, if you open a LOB, you must close it before you commit or roll back the transaction.</p>
</li>
<li>
<p>It is an error to commit the transaction before closing all LOBs that were opened in the transaction. When the error is returned, the &#34;open&#34; status of the open LOBs is discarded, but the transaction is successfully committed. Hence, all the changes made to both LOB and non-LOB data in the transaction are committed.</p>
</li>
</ul>
<a id="i999170"></a><a id="TTPLP66738"></a>
<hr/>
<h3 class="refsect2"><a id="sthref149"></a>READ procedures</h3>
<p>This procedure reads part of a LOB, starting from a specified absolute offset from the beginning of the LOB, and returns the specified number of bytes (for BLOBs) or characters (for CLOBs or NCLOBs) into the <code><span class="codeinlineitalic">buffer</span></code> parameter.</p>
<p class="titleinrefsubsect"><a id="sthref150"></a>Syntax</p>
<pre>DBMS_LOB.READ (
   <span class="italic">lob_loc</span>   IN             BLOB,
   <span class="italic">amount</span>    IN OUT  NOCOPY INTEGER,
   <span class="italic">offset</span>    IN             INTEGER,
   <span class="italic">buffer</span>    OUT            RAW);

DBMS_LOB.READ (
   <span class="italic">lob_loc</span>   IN             CLOB CHARACTER SET ANY_CS,
   <span class="italic">amount</span>    IN OUT  NOCOPY INTEGER,
   <span class="italic">offset</span>    IN             INTEGER,
   <span class="italic">buffer</span>    OUT            VARCHAR2 CHARACTER SET <span class="italic">lob_loc</span>%CHARSET); 
</pre>
<p class="titleinrefsubsect"><a id="sthref151"></a>Parameters</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP66739"></a><a id="sthref152"></a><a id="sthref153"></a>Table 2-30 READ procedure parameters</p>
<table class="cellalignment1016" title="READ procedure parameters" summary="This table describes the parameters of the DBMS_LOB.READ subprogram." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t39"><span class="bold">Parameter</span></th>
<th class="cellalignment1017" id="r1c2-t39"><span class="bold">Description</span></th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t39" headers="r1c1-t39">
<p><code><span class="codeinlineitalic">lob_loc</span></code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t39 r1c2-t39">
<p>Locator for the LOB</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t39" headers="r1c1-t39">
<p><code><span class="codeinlineitalic">amount</span></code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t39 r1c2-t39">
<p>(<code>IN</code>) Number of bytes (for BLOBs) or characters (for CLOBs or NCLOBs) to read</p>
<p>(<code>OUT</code>) Number of bytes or characters actually read</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r4c1-t39" headers="r1c1-t39">
<p><code><span class="codeinlineitalic">offset</span></code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t39 r1c2-t39">
<p>Offset in bytes (for BLOBs) or characters (for CLOBs or NCLOBs) from the start of the LOB (starting from 1)</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r5c1-t39" headers="r1c1-t39">
<p><code><span class="codeinlineitalic">buffer</span></code></p>
</td>
<td class="cellalignment1018" headers="r5c1-t39 r1c2-t39">
<p>Output buffer from the read operation</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="titleinrefsubsect"><a id="sthref154"></a>Usage notes</p>
<ul>
<li>
<p>If the input <code><span class="codeinlineitalic">offset</span></code> points past the end of the LOB, then <code><span class="codeinlineitalic">amount</span></code> is set to 0 (zero) and a <code>NO_DATA_FOUND</code> exception is raised.</p>
</li>
<li>
<p>For a CLOB or NCLOB, the form of the <code>VARCHAR2</code> buffer for the <code><span class="codeinlineitalic">buffer</span></code> parameter must be appropriate for the type of LOB. If the specified LOB is of type <code>NCLOB</code>, the buffer must contain <code>NCHAR</code> data. If the specified LOB is of type <code>CLOB</code>, the buffer must contain <code>CHAR</code> data.</p>
</li>
<li>
<p>When calling <code>READ</code> from a client, the returned buffer contains data in the client character set. The database converts the LOB value from the server character set to the client character set before it returns the buffer to the user.</p>
</li>
<li>
<p><code>READ</code> gets the LOB, if necessary, before the read.</p>
</li>
</ul>
<p class="titleinrefsubsect"><a id="sthref155"></a>Exceptions</p>
<p>Maximum LOB size is <code>BLOBMAXSIZE</code> for a BLOB or <code>CLOBMAXSIZE</code> for a CLOB.</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP66740"></a><a id="sthref156"></a><a id="BABDIDJC"></a>Table 2-31 READ procedure exceptions</p>
<table class="cellalignment1016" title="READ procedure exceptions " summary="This table describes the general Exceptions raised by READ." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t40">Exception</th>
<th class="cellalignment1017" id="r1c2-t40">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t40" headers="r1c1-t40">
<p><code>VALUE_ERROR</code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t40 r1c2-t40">
<p>Any of <code><span class="codeinlineitalic">lob_loc</span></code>, <code><span class="codeinlineitalic">amount</span></code>, or <code><span class="codeinlineitalic">offset</span></code> is <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t40" headers="r1c1-t40">
<p><code>INVALID_ARGVAL</code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t40 r1c2-t40">
<p>Any of the following is true:</p>
<p><code><span class="codeinlineitalic">amount</span></code> &lt; 1 or <code><span class="codeinlineitalic">amount</span></code> &gt; 32767 bytes (or the character equivalent) or the capacity of <code><span class="codeinlineitalic">buffer</span></code></p>
<p><code><span class="codeinlineitalic">offset</span></code> &lt; 1 or <code><span class="codeinlineitalic">offset</span></code> &gt; maximum LOB size</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r4c1-t40" headers="r1c1-t40">
<p><code>NO_DATA_FOUND</code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t40 r1c2-t40">
<p>The end of the LOB is reached and there are no more bytes or characters to read from the LOB. The <code><span class="codeinlineitalic">amount</span></code> parameter has a value of 0 (zero).</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<a id="i999349"></a><a id="TTPLP66748"></a>
<hr/>
<h3 class="refsect2"><a id="sthref157"></a>SUBSTR functions</h3>
<p>This function returns a specified number of bytes (for a BLOB) or characters (for a CLOB or NCLOB), starting at a specified offset from the beginning of a specified LOB.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Also see <a href="#i998546">&#34;INSTR functions&#34;</a> and <a href="#i999170">&#34;READ procedures&#34;</a>.</div>
<p class="titleinrefsubsect"><a id="sthref158"></a>Syntax</p>
<pre>DBMS_LOB.SUBSTR (
   <span class="italic">lob_loc</span>     IN    BLOB,
   <span class="italic">amount</span>      IN    INTEGER := 32767,
   <span class="italic">offset</span>      IN    INTEGER := 1)
  RETURN RAW;

DBMS_LOB.SUBSTR (
   <span class="italic">lob_loc</span>     IN    CLOB   CHARACTER SET ANY_CS,
   <span class="italic">amount</span>      IN    INTEGER := 32767,
   <span class="italic">offset</span>      IN    INTEGER := 1)
  RETURN VARCHAR2 CHARACTER SET <span class="italic">lob_loc</span>%CHARSET;
</pre>
<p class="titleinrefsubsect"><a id="sthref159"></a>Parameters</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP66749"></a><a id="sthref160"></a><a id="sthref161"></a>Table 2-32 SUBSTR function parameters</p>
<table class="cellalignment1016" title="SUBSTR function parameters " summary="This table describes the parameters of the DBMS_LOB.SUBSTR subprogram." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t42"><span class="bold">Parameter</span></th>
<th class="cellalignment1017" id="r1c2-t42"><span class="bold">Description</span></th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t42" headers="r1c1-t42">
<p><code><span class="codeinlineitalic">lob_loc</span></code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t42 r1c2-t42">
<p>Locator for the LOB</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t42" headers="r1c1-t42">
<p><code><span class="codeinlineitalic">amount</span></code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t42 r1c2-t42">
<p>Number of bytes (for BLOBs) or characters (for CLOBs or NCLOBs) to read</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r4c1-t42" headers="r1c1-t42">
<p><code><span class="codeinlineitalic">offset</span></code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t42 r1c2-t42">
<p>Offset in bytes (for BLOBs) or characters (for CLOBs or NCLOBs) from the start of the LOB (starting from 1)</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="titleinrefsubsect"><a id="sthref162"></a>Return values</p>
<p>Returns one of the following:</p>
<ul>
<li>
<p><code>RAW</code> bytes from a BLOB</p>
</li>
<li>
<p><code>VARCHAR2</code> characters from a CLOB or NCLOB</p>
</li>
<li>
<p><code>NULL</code> if any input parameter is <code>NULL</code> or any of the following is true:</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">amount</span></code> &lt; 1 or <code><span class="codeinlineitalic">amount</span></code> &gt; 32767 bytes (or the character equivalent)</p>
</li>
<li>
<p><code><span class="codeinlineitalic">offset</span></code> &lt; 1 or <code><span class="codeinlineitalic">offset</span></code> &gt; maximum LOB size</p>
</li>
</ul>
<p>Where maximum LOB size is <code>BLOBMAXSIZE</code> for a BLOB or <code>CLOBMAXSIZE</code> for a CLOB.</p>
</li>
</ul>
<p class="titleinrefsubsect"><a id="sthref163"></a>Usage notes</p>
<ul>
<li>
<p>For fixed-width <code><span class="codeinlineitalic">n</span></code>-byte CLOBs or NCLOBs, if the input amount for <code>SUBSTR</code> is greater than (32767/<code><span class="codeinlineitalic">n</span></code>), then <code>SUBSTR</code> returns a character buffer of length (32767/<code><span class="codeinlineitalic">n</span></code>) or the length of the CLOB, whichever is less. For CLOBs in a varying-width character set, <code><span class="codeinlineitalic">n</span></code> is the maximum byte-width used for characters in the CLOB.</p>
</li>
<li>
<p>For a CLOB or NCLOB, the form of the <code>VARCHAR2</code> return buffer must be appropriate for the type of LOB. If the specified LOB is of type <code>NCLOB</code>, the buffer must contain <code>NCHAR</code> data. If the specified LOB is of type <code>CLOB</code>, the buffer must contain <code>CHAR</code> data.</p>
</li>
<li>
<p>When calling <code>SUBSTR</code> from a client, the returned buffer contains data in the client character set. The database converts the LOB value from the server character set to the client character set before it returns the buffer to the user.</p>
</li>
<li>
<p><code>SUBSTR</code> returns 8191 or more characters based on the characters stored in the LOB. If all characters are not returned as a consequence of the character byte size exceeding the available buffer, the user should either call <code>SUBSTR</code> with a new offset to read the remaining characters, or call the subprogram in a loop until all the data is extracted.</p>
</li>
<li>
<p><code>SUBSTR</code> get s the LOB, if necessary, before reading.</p>
</li>
</ul>
<a id="i999503"></a><a id="TTPLP66752"></a>
<hr/>
<h3 class="refsect2"><a id="sthref164"></a>TRIM procedures</h3>
<p>This procedure trims a LOB to the length you specify in the <code><span class="codeinlineitalic">newlen</span></code> parameter. Specify the new desired data length in bytes for BLOBs or characters for CLOBs or NCLOBs.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Also see <a href="#i997838">&#34;ERASE procedures&#34;</a> and <a href="#i999705">&#34;WRITEAPPEND procedures&#34;</a>.</div>
<p class="titleinrefsubsect"><a id="sthref165"></a>Syntax</p>
<pre>DBMS_LOB.TRIM (
   <span class="italic">lob_loc</span>        IN OUT  NOCOPY BLOB,
   <span class="italic">newlen</span>         IN             INTEGER);

DBMS_LOB.TRIM (
   <span class="italic">lob_loc</span>        IN OUT  NOCOPY CLOB CHARACTER SET ANY_CS,
   <span class="italic">newlen</span>         IN             INTEGER);
</pre>
<p class="titleinrefsubsect"><a id="sthref166"></a>Parameters</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP66753"></a><a id="sthref167"></a><a id="sthref168"></a>Table 2-33 TRIM procedure parameters</p>
<table class="cellalignment1016" title="TRIM procedure parameters" summary="This table describes the parameters of the DBMS_LOB.RIM subprogram." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t44">Parameter</th>
<th class="cellalignment1017" id="r1c2-t44">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t44" headers="r1c1-t44">
<p><code><span class="codeinlineitalic">lob_loc</span></code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t44 r1c2-t44">
<p>Locator for the LOB</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t44" headers="r1c1-t44">
<p><code><span class="codeinlineitalic">newlen</span></code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t44 r1c2-t44">
<p>Desired trimmed length of the LOB value, in bytes (for BLOBs) or characters (for CLOBs or NCLOBs)</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="titleinrefsubsect"><a id="sthref169"></a>Usage notes</p>
<ul>
<li>
<p>If you attempt to trim an empty LOB, no action is taken and <code>TRIM</code> returns no error.</p>
</li>
<li>
<p>If the new length that you specify in <code><span class="codeinlineitalic">newlen</span></code> is greater than the size of the LOB, an exception is raised.</p>
</li>
<li>
<p>It is recommended that you enclose write operations to the LOB with <code>OPEN</code> and <code>CLOSE</code> calls, but not mandatory. However, if you opened the LOB before performing the operation, you must close it before you commit or roll back the transaction.</p>
</li>
<li>
<p><code>TRIM</code> gets the LOB, if necessary, before altering the length of the LOB, unless the new length specified is 0 (zero).</p>
</li>
</ul>
<p class="titleinrefsubsect"><a id="sthref170"></a>Exceptions</p>
<p>Maximum LOB size is <code>BLOBMAXSIZE</code> for a BLOB or <code>CLOBMAXSIZE</code> for a CLOB.</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP66754"></a><a id="sthref171"></a><a id="sthref172"></a>Table 2-34 TRIM procedure exceptions</p>
<table class="cellalignment1016" title="TRIM procedure exceptions " summary="This table describes the Exceptions raised by RIM." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t45">Exception</th>
<th class="cellalignment1017" id="r1c2-t45">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t45" headers="r1c1-t45">
<p><code>VALUE_ERROR</code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t45 r1c2-t45">
<p>The <code><span class="codeinlineitalic">lob_loc</span></code> value is <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t45" headers="r1c1-t45">
<p><code>INVALID_ARGVAL</code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t45 r1c2-t45">
<p>Either of the following is true:</p>
<p><code><span class="codeinlineitalic">newlen</span></code> &lt; 0 or <code><span class="codeinlineitalic">newlen</span></code> &gt; maximum LOB size</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r4c1-t45" headers="r1c1-t45">
<p><code>QUERY_WRITE</code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t45 r1c2-t45">
<p>Cannot perform a LOB write inside a query. (This is not applicable for TimesTen.)</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r5c1-t45" headers="r1c1-t45">
<p><code>BUFFERING_ENABLED</code></p>
</td>
<td class="cellalignment1018" headers="r5c1-t45 r1c2-t45">
<p>Cannot perform operation if LOB buffering enabled is enabled on the LOB.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<a id="i999593"></a><a id="TTPLP66755"></a>
<hr/>
<h3 class="refsect2"><a id="sthref173"></a>WRITE procedures</h3>
<p>This procedure writes a specified amount of data into a LOB, starting from a specified absolute offset from the beginning of the LOB. The data is written from the <code><span class="codeinlineitalic">buffer</span></code> parameter.</p>
<p><code>WRITE</code> replaces (overwrites) any data that already exists in the LOB from the offset through the length you specify.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Also see <a href="#i997674">&#34;COPY procedures&#34;</a> and <a href="#i999705">&#34;WRITEAPPEND procedures&#34;</a>.</div>
<p class="titleinrefsubsect"><a id="sthref174"></a>Syntax</p>
<pre>DBMS_LOB.WRITE (
   <span class="italic">lob_loc</span>  IN OUT NOCOPY  BLOB,
   <span class="italic">amount</span>   IN             INTEGER,
   <span class="italic">offset</span>   IN             INTEGER,
   <span class="italic">buffer</span>   IN             RAW);

DBMS_LOB.WRITE (
   <span class="italic">lob_loc</span>  IN OUT  NOCOPY CLOB   CHARACTER SET ANY_CS,
   <span class="italic">amount</span>   IN             INTEGER,
   <span class="italic">offset</span>   IN             INTEGER,
   <span class="italic">buffer</span>   IN             VARCHAR2 CHARACTER SET <span class="italic">lob_loc</span>%CHARSET); 
</pre>
<p class="titleinrefsubsect"><a id="sthref175"></a>Parameters</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP66756"></a><a id="sthref176"></a><a id="sthref177"></a>Table 2-35 WRITE procedure parameters</p>
<table class="cellalignment1016" title="WRITE procedure parameters" summary="This table describes the parameters of the DBMS_LOB.WRITE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t47">Parameter</th>
<th class="cellalignment1017" id="r1c2-t47">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t47" headers="r1c1-t47">
<p><code><span class="codeinlineitalic">lob_loc</span></code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t47 r1c2-t47">
<p>Locator for the LOB</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t47" headers="r1c1-t47">
<p><code><span class="codeinlineitalic">amount</span></code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t47 r1c2-t47">
<p>Number of bytes (for BLOBs) or characters (for CLOBs or NCLOBs) to write</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r4c1-t47" headers="r1c1-t47">
<p><code><span class="codeinlineitalic">offset</span></code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t47 r1c2-t47">
<p>Offset in bytes (for BLOBs) or characters (for CLOBs or NCLOBs) from the start of the LOB for the write operation (starting from 1)</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r5c1-t47" headers="r1c1-t47">
<p><code><span class="codeinlineitalic">buffer</span></code></p>
</td>
<td class="cellalignment1018" headers="r5c1-t47 r1c2-t47">
<p>Input buffer with data for the write</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="titleinrefsubsect"><a id="sthref178"></a>Usage notes</p>
<ul>
<li>
<p>There is an error if the specified amount is more than the data in the buffer. If the input amount is less than the data in the buffer, then only <code><span class="codeinlineitalic">amount</span></code> bytes or characters from the buffer are written to the LOB. If the offset you specify is beyond the end of the data currently in the LOB, then zero-byte fillers (for BLOBs) or spaces (for CLOBs or NCLOBs) are inserted into the LOB to reach the offset.</p>
</li>
<li>
<p>For a CLOB or NCLOB, the form of the <code>VARCHAR2</code> buffer for the <code><span class="codeinlineitalic">buffer</span></code> parameter must be appropriate for the type of LOB. If the specified LOB is of type <code>NCLOB</code>, the buffer must contain <code>NCHAR</code> data. If the specified LOB is of type <code>CLOB</code>, the buffer must contain <code>CHAR</code> data.</p>
</li>
<li>
<p>When calling <code>WRITE</code> from a client, the buffer must contain data in the client character set. The database converts the client-side buffer to the server character set before it writes the buffer data to the LOB.</p>
</li>
<li>
<p>It is recommended that you enclose write operations to the LOB with <code>OPEN</code> and <code>CLOSE</code> calls, but not mandatory. However, if you opened the LOB before performing the operation, you must close it before you commit or roll back the transaction.</p>
</li>
<li>
<p><code>WRITE</code> gets the LOB, if necessary, before writing to it, unless the write is specified to overwrite the entire LOB.</p>
</li>
</ul>
<p class="titleinrefsubsect"><a id="sthref179"></a>Exceptions</p>
<p>Maximum LOB size is <code>BLOBMAXSIZE</code> for a BLOB or <code>CLOBMAXSIZE</code> for a CLOB.</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP66757"></a><a id="sthref180"></a><a id="sthref181"></a>Table 2-36 WRITE procedure exceptions</p>
<table class="cellalignment1016" title="WRITE procedure exceptions " summary="This table describes the Exceptions raised by WRITE." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t48">Exception</th>
<th class="cellalignment1017" id="r1c2-t48">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t48" headers="r1c1-t48">
<p><code>VALUE_ERROR</code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t48 r1c2-t48">
<p>Any of <code><span class="codeinlineitalic">lob_loc</span></code>, <code><span class="codeinlineitalic">amount</span></code>, or <code><span class="codeinlineitalic">offset</span></code> is <code>NULL</code>, out of range, or invalid.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t48" headers="r1c1-t48">
<p><code>INVALID_ARGVAL</code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t48 r1c2-t48">
<p>Any of the following is true:</p>
<p><code><span class="codeinlineitalic">amount</span></code> &lt; 1 or <code><span class="codeinlineitalic">amount</span></code> &gt; 32767 bytes (or the character equivalent) or capacity of <code><span class="codeinlineitalic">buffer</span></code></p>
<p><code><span class="codeinlineitalic">offset</span></code> &lt; 1 or <code><span class="codeinlineitalic">offset</span></code> &gt; maximum LOB size</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r4c1-t48" headers="r1c1-t48">
<p><code>QUERY_WRITE</code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t48 r1c2-t48">
<p>Cannot perform a LOB write inside a query. (This is not applicable for TimesTen.)</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r5c1-t48" headers="r1c1-t48">
<p><code>BUFFERING_ENABLED</code></p>
</td>
<td class="cellalignment1018" headers="r5c1-t48 r1c2-t48">
<p>Cannot perform operation if LOB buffering is enabled on the LOB.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<a id="i999705"></a><a id="TTPLP66758"></a>
<hr/>
<h3 class="refsect2"><a id="sthref182"></a>WRITEAPPEND procedures</h3>
<p>This procedure appends a specified amount of data to the end of a LOB. The data is written from the <code><span class="codeinlineitalic">buffer</span></code> parameter. (Do not confuse this with the <code>APPEND</code> procedure.)</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Also see <a href="#i997432">&#34;APPEND procedures&#34;</a>, <a href="#i997674">&#34;COPY procedures&#34;</a>, and <a href="#i999593">&#34;WRITE procedures&#34;</a>.</div>
<p class="titleinrefsubsect"><a id="sthref183"></a>Syntax</p>
<pre>DBMS_LOB.WRITEAPPEND (
   <span class="italic">lob_loc</span> IN OUT NOCOPY BLOB, 
   <span class="italic">amount</span>  IN            INTEGER, 
   <span class="italic">buffer</span>  IN            RAW); 

DBMS_LOB.WRITEAPPEND (
   <span class="italic">lob_loc</span> IN OUT NOCOPY CLOB CHARACTER SET ANY_CS, 
   <span class="italic">amount</span>  IN            INTEGER, 
   <span class="italic">buffer</span>  IN            VARCHAR2 CHARACTER SET <span class="italic">lob_loc</span>%CHARSET); 
</pre>
<p class="titleinrefsubsect"><a id="sthref184"></a>Parameters</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP66759"></a><a id="sthref185"></a><a id="sthref186"></a>Table 2-37 WRITEAPPEND procedure parameters</p>
<table class="cellalignment1016" title="WRITEAPPEND procedure parameters" summary="This table describes the parameters of the DBMS_LOB.WRITEAPPEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t50">Parameter</th>
<th class="cellalignment1017" id="r1c2-t50">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t50" headers="r1c1-t50">
<p><code><span class="codeinlineitalic">lob_loc</span></code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t50 r1c2-t50">
<p>Locator for the LOB</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t50" headers="r1c1-t50">
<p><code><span class="codeinlineitalic">amount</span></code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t50 r1c2-t50">
<p>Number of bytes (for BLOBs) or characters (for CLOBs or NCLOBs) to write</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r4c1-t50" headers="r1c1-t50">
<p><code><span class="codeinlineitalic">buffer</span></code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t50 r1c2-t50">
<p>Input buffer with data for the write</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="titleinrefsubsect"><a id="sthref187"></a>Usage notes</p>
<ul>
<li>
<p>There is an error if the input amount is more than the data in the buffer. If the input amount is less than the data in the buffer, then only the <code><span class="codeinlineitalic">amount</span></code> bytes or characters from the buffer are appended to the LOB.</p>
</li>
<li>
<p>For a CLOB or NCLOB, the form of the <code>VARCHAR2</code> buffer for the <code><span class="codeinlineitalic">buffer</span></code> parameter must be appropriate for the type of LOB. If the specified LOB is of type <code>NCLOB</code>, the buffer must contain <code>NCHAR</code> data. If the specified LOB is of type <code>CLOB</code>, the buffer must contain <code>CHAR</code> data.</p>
</li>
<li>
<p>When calling <code>WRITEAPPEND</code> from a client, the buffer must contain data in the client character set. The database converts the client-side buffer to the server character set before it writes the buffer data to the LOB.</p>
</li>
<li>
<p>It is recommended that you enclose write operations to the LOB with <code>OPEN</code> and <code>CLOSE</code> calls, but not mandatory. However, if you opened the LOB before performing the operation, you must close it before you commit or roll back the transaction.</p>
</li>
<li>
<p><code>WRITEAPPEND</code> gets the LOB, if necessary, before appending to it.</p>
</li>
</ul>
<p class="titleinrefsubsect"><a id="sthref188"></a>Exceptions</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP66760"></a><a id="sthref189"></a><a id="sthref190"></a>Table 2-38 WRITEAPPEND procedure exceptions</p>
<table class="cellalignment1016" title="WRITEAPPEND procedure exceptions " summary="This table describes the Exceptions raised by WRITEAPPEND." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t51">Exception</th>
<th class="cellalignment1017" id="r1c2-t51">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t51" headers="r1c1-t51">
<p><code>VALUE_ERROR</code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t51 r1c2-t51">
<p>Any of <code><span class="codeinlineitalic">lob_loc</span></code>, <code><span class="codeinlineitalic">amount</span></code>, or <code><span class="codeinlineitalic">offset</span></code> is null, out of range, or invalid.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t51" headers="r1c1-t51">
<p><code>INVALID_ARGVAL</code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t51 r1c2-t51">
<p>Any of the following is true:</p>
<p><code><span class="codeinlineitalic">amount</span></code> &lt; 1 or <code><span class="codeinlineitalic">amount</span></code> &gt; 32767 bytes (or the character equivalent) or capacity of <code><span class="codeinlineitalic">buffer</span></code></p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r4c1-t51" headers="r1c1-t51">
<p><code>QUERY_WRITE</code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t51 r1c2-t51">
<p>Cannot perform a LOB write inside a query. (This is not applicable for TimesTen.)</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r5c1-t51" headers="r1c1-t51">
<p><code>BUFFERING_ENABLED</code></p>
</td>
<td class="cellalignment1018" headers="r5c1-t51 r1c2-t51">
<p>Cannot perform operation if LOB buffering is enabled on the LOB.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" --></div>
<!-- class="refsect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1009">
<tr>
<td class="cellalignment1018">
<table class="cellalignment1014">
<tr>
<td class="cellalignment1013"><a href="intro.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1013"><a href="d_lock.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1020">
<table class="cellalignment1012">
<tr>
<td class="cellalignment1013"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1013"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1013"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1013"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1013"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1013"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>