<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-113951"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/DBMS_UTILITY"></a><title>DBMS_UTILITY</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 704"/>
<meta name="dcterms.created" content="2014-10-02T17:47:28Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="TimesTen In-Memory Database PL/SQL Packages Reference"/>
<meta name="dcterms.identifier" content="E21645-06"/>
<meta name="dcterms.isVersionOf" content="TTPLP"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="d_sql.htm" title="Previous" type="text/html"/>
<link rel="Next" href="t_dbver.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E21645-06.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">12/19</span> <!-- End Header --><a id="CHDGHICD"></a><a id="TTPLP064"></a>
<h1 class="chapter"><span class="secnum">8</span> DBMS_UTILITY</h1>
<p>The <code>DBMS_UTILITY</code> package provides various utility subprograms.</p>
<p>This chapter contains the following topics:</p>
<ul>
<li>
<p><a href="#CHDBAEAD">Using DBMS_UTILITY</a></p>
<ul>
<li>
<p>Security model</p>
</li>
<li>
<p>Constants</p>
</li>
<li>
<p>Data types</p>
</li>
<li>
<p>Exceptions</p>
</li>
</ul>
</li>
<li>
<p><a href="#i996767">Summary of DBMS_UTILITY subprograms</a></p>
</li>
</ul>
<a id="CHDBAEAD"></a><a id="TTPLP71345"></a>
<hr/>
<div class="refsect1">
<h2 class="refsect1">Us<a id="sthref535"></a>ing DBMS_UTILITY</h2>
<ul>
<li>
<p><a href="#i1003189">Security model</a></p>
</li>
<li>
<p><a href="#BABIFIDB">Constants</a></p>
</li>
<li>
<p><a href="#i1003201">Data types</a></p>
</li>
<li>
<p><a href="#BABGEIIF">Exceptions</a></p>
</li>
</ul>
<a id="i1003189"></a><a id="TTPLP71346"></a>
<hr/>
<h3 class="refsect2">Security model</h3>
<p><code>DBMS_UTILITY</code> runs with the privileges of the calling user for the <a href="#i997271">NAME_RESOLVE procedure</a> and the <a href="#i1002332">COMPILE_SCHEMA procedure</a>. This is necessary so that the SQL works correctly.</p>
<p>The package does not run as <code>SYS</code>.</p>
<a id="BABIFIDB"></a><a id="TTPLP71347"></a>
<hr/>
<h3 class="refsect2">Constants</h3>
<p>The <code>DBMS_UTILITY</code> package uses the constants shown in <a href="#BABHCEHG">Table 8-1</a>.</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP71348"></a><a id="sthref536"></a><a id="BABHCEHG"></a>Table 8-1 DBMS_UTILITY constants</p>
<table class="cellalignment1016" title="DBMS_UTILITY constants" summary="This table describes constants supported by DBMS_UTILITY subprograms." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t2">Name</th>
<th class="cellalignment1017" id="r1c2-t2">Type</th>
<th class="cellalignment1017" id="r1c3-t2">Value</th>
<th class="cellalignment1017" id="r1c4-t2">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t2" headers="r1c1-t2">
<p><code>INV_ERROR_ON_RESTRICTIONS</code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t2 r1c2-t2">
<p><code>BINARY_INTEGER</code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t2 r1c3-t2">
<p><code>1</code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t2 r1c4-t2">
<p>This constant is the only legal value for the <code><span class="codeinlineitalic">p_option_flags</span></code> parameter of the <code>INVALIDATE</code> subprogram.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<div class="infobox-note">
<p class="notep1">Notes:</p>
<ul>
<li>
<p>The <code>PLS_INTEGER</code> and <code>BINARY_INTEGER</code> data types are identical. This document uses <code>BINARY_INTEGER</code> to indicate data types in reference information (such as for table types, record types, subprogram parameters, or subprogram return values), but may use either in discussion and examples.</p>
</li>
<li>
<p>The <code>INTEGER</code> and <code>NUMBER(38)</code> data types are also identical. This document uses <code>INTEGER</code> throughout.</p>
</li>
</ul>
</div>
<a id="i1003201"></a><a id="TTPLP71349"></a>
<hr/>
<h3 class="refsect2">Data types</h3>
<ul>
<li>
<p><code><a href="#i1004924">dblink_array</a></code></p>
</li>
<li>
<p><code><a href="#i1004968">index_table_type</a></code></p>
</li>
<li>
<p><code><a href="#i1004969">instance_record</a></code></p>
</li>
<li>
<p><code><a href="#i1004970">lname_array</a></code></p>
</li>
<li>
<p><code><a href="#i1004971">name_array</a></code></p>
</li>
<li>
<p><code><a href="#i1004972">number_array</a></code></p>
</li>
<li>
<p><code><a href="#i1004987">uncl_array</a></code></p>
</li>
</ul>
<a id="i1004924"></a><a id="TTPLP71350"></a>
<h4 class="refsect3">dblink_array</h4>
<pre>TYPE dblink_array IS TABLE OF VARCHAR2(128) INDEX BY BINARY_INTEGER;
</pre>
<p>Lists of database links would be stored here. (TimesTen does not support dblinks.)</p>
<a id="i1004968"></a><a id="TTPLP71351"></a>
<h4 class="refsect3">index_table_type</h4>
<pre>TYPE index_table_type IS TABLE OF BINARY_INTEGER INDEX BY BINARY_INTEGER;
</pre>
<p>The order in which objects should be generated is returned here.</p>
<a id="i1004969"></a><a id="TTPLP71352"></a>
<h4 class="refsect3">instance_record</h4>
<pre>  TYPE instance_record IS RECORD (
       <span class="italic">inst_number</span>   NUMBER,
       <span class="italic">inst_name</span>     VARCHAR2(60));
  TYPE instance_table IS TABLE OF instance_record INDEX BY BINARY_INTEGER;
</pre>
<p>The list of active instance number and instance name.</p>
<p>The starting index of <code>instance_table</code> is 1; <code>instance_table</code> is dense.</p>
<a id="i1004970"></a><a id="TTPLP71353"></a>
<h4 class="refsect3">lname_array</h4>
<pre>TYPE lname_array IS TABLE OF VARCHAR2(4000) index by BINARY_INTEGER;
</pre>
<p>Lists of <code>long</code> <code>NAME</code> should be stored here, including fully qualified attribute names.</p>
<a id="i1004971"></a><a id="TTPLP71354"></a>
<h4 class="refsect3">name_array</h4>
<pre>TYPE name_array IS TABLE OF VARCHAR2(30) INDEX BY BINARY_INTEGER;
</pre>
<p>Lists of <code><span class="codeinlineitalic">NAME</span></code> should be stored here.</p>
<a id="i1004972"></a><a id="TTPLP71355"></a>
<h4 class="refsect3">number_array</h4>
<pre>TYPE number_array IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
</pre>
<p>The order in which objects should be generated is returned here.</p>
<a id="i1004987"></a><a id="TTPLP71356"></a>
<h4 class="refsect3">uncl_array</h4>
<pre>TYPE uncl_array IS TABLE OF VARCHAR2(227) INDEX BY BINARY_INTEGER;
</pre>
<p>Lists of &#34;<code><span class="codeinlineitalic">USER</span></code>&#34;.&#34;<code><span class="codeinlineitalic">NAME</span></code>&#34;.&#34;<code><span class="codeinlineitalic">COLUMN</span></code>&#34;@<code>LINK</code> should be stored here.</p>
<a id="BABGEIIF"></a><a id="TTPLP71357"></a>
<hr/>
<h3 class="refsect2">Exceptions</h3>
<p>The following table lists the exceptions raised by <code>DBMS_UTILITY</code>.</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP71358"></a><a id="sthref537"></a><a id="sthref538"></a>Table 8-2 Exceptions Raised by DBMS_UTILITY</p>
<table class="cellalignment1016" title="Exceptions Raised by DBMS_UTILITY" summary="This table describes exceptions raised by DBMS_UTILITY subprograms." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t4">Exception</th>
<th class="cellalignment1017" id="r1c2-t4">Error Code</th>
<th class="cellalignment1017" id="r1c3-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t4" headers="r1c1-t4">
<p><code>INV_NOT_EXIST_OR_NO_PRIV</code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t4 r1c2-t4">
<p>-24237</p>
</td>
<td class="cellalignment1018" headers="r2c1-t4 r1c3-t4">
<p>Raised by the <code>INVALIDATE</code> subprogram when the <code><span class="codeinlineitalic">object_id</span></code> argument is <code>NULL</code> or invalid, or when the caller does not have <code>CREATE</code> privilege on the object being invalidated.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t4" headers="r1c1-t4">
<p><code>INV_MALFORMED_SETTINGS</code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t4 r1c2-t4">
<p>-24238</p>
</td>
<td class="cellalignment1018" headers="r3c1-t4 r1c3-t4">
<p>Raised by the <code>INVALIDATE</code> subprogram if a compiler setting is specified more than once in the <code><span class="codeinlineitalic">p_plsql_object_settings</span></code> parameter.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r4c1-t4" headers="r1c1-t4">
<p><code>INV_RESTRICTED_OBJECT</code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t4 r1c2-t4">
<p>-24239</p>
</td>
<td class="cellalignment1018" headers="r4c1-t4 r1c3-t4">
<p>Raised by the <code>INVALIDATE</code> subprogram when different combinations of conditions pertaining to the <code><span class="codeinlineitalic">p_object_id</span></code> parameter are contravened.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" --></div>
<!-- class="refsect1" -->
<a id="i996767"></a><a id="TTPLP71359"></a>
<hr/>
<div class="refsect1">
<h2 class="refsect1">Sum<a id="sthref539"></a>mary of DBMS_UTILITY subprograms</h2>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP71360"></a><a id="sthref540"></a><a id="sthref541"></a>Table 8-3 <span class="bolditalic">DBMS_UTILITY Package Subprograms</span></p>
<table class="cellalignment1016" title="DBMS_UTILITY Package Subprograms" summary="This table lists the DBMS_UTILITY subprograms in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t5">Subprogram</th>
<th class="cellalignment1017" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t5" headers="r1c1-t5">
<p><a href="#i1004667">CANONICALIZE procedure</a></p>
</td>
<td class="cellalignment1018" headers="r2c1-t5 r1c2-t5">
<p>Canonicalizes a given string.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t5" headers="r1c1-t5">
<p><a href="#i1002468">COMMA_TO_TABLE procedure</a></p>
</td>
<td class="cellalignment1018" headers="r3c1-t5 r1c2-t5">
<p>Converts a comma-delimited list of names into a PL/SQL table of names.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r4c1-t5" headers="r1c1-t5">
<p><a href="#i1002332">COMPILE_SCHEMA procedure</a></p>
</td>
<td class="cellalignment1018" headers="r4c1-t5 r1c2-t5">
<p>Compiles all procedures, functions, packages, and views in the specified schema.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r5c1-t5" headers="r1c1-t5">
<p><a href="#i1002631">DB_VERSION procedure</a></p>
</td>
<td class="cellalignment1018" headers="r5c1-t5 r1c2-t5">
<p>Returns version information for the database.</p>
<p>Returns <code>NULL</code> for the compatibility setting because TimesTen does not support the system parameter <code>COMPATIBLE</code>.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r6c1-t5" headers="r1c1-t5">
<p><a href="#i997163">FORMAT_CALL_STACK function</a></p>
</td>
<td class="cellalignment1018" headers="r6c1-t5 r1c2-t5">
<p>Formats the current call stack.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r7c1-t5" headers="r1c1-t5">
<p><a href="#i1003874">FORMAT_ERROR_BACKTRACE function</a></p>
</td>
<td class="cellalignment1018" headers="r7c1-t5 r1c2-t5">
<p>Formats the backtrace from the point of the current error to the exception handler where the error has been caught.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r8c1-t5" headers="r1c1-t5">
<p><a href="#i1002463">FORMAT_ERROR_STACK function</a></p>
</td>
<td class="cellalignment1018" headers="r8c1-t5 r1c2-t5">
<p>Formats the current error stack.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r9c1-t5" headers="r1c1-t5">
<p><a href="#i1003768">GET_CPU_TIME function</a></p>
</td>
<td class="cellalignment1018" headers="r9c1-t5 r1c2-t5">
<p>Returns the current CPU time in hundredths of a second.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r10c1-t5" headers="r1c1-t5">
<p><a href="#i1004023">GET_DEPENDENCY procedure</a></p>
</td>
<td class="cellalignment1018" headers="r10c1-t5 r1c2-t5">
<p>Shows the dependencies on the object passed in.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r11c1-t5" headers="r1c1-t5">
<p><a href="#BJEFCEFD">GET_ENDIANNESS function</a></p>
</td>
<td class="cellalignment1018" headers="r11c1-t5 r1c2-t5">
<p>Returns the endianness of your database platform.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r12c1-t5" headers="r1c1-t5">
<p><a href="#i1003646">GET_HASH_VALUE function</a></p>
</td>
<td class="cellalignment1018" headers="r12c1-t5 r1c2-t5">
<p>Computes a hash value for the given string.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r13c1-t5" headers="r1c1-t5">
<p><a href="#BJEGIHID">GET_SQL_HASH function</a></p>
</td>
<td class="cellalignment1018" headers="r13c1-t5 r1c2-t5">
<p>Computes the hash value for a given string using the MD5 algorithm.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r14c1-t5" headers="r1c1-t5">
<p><a href="#i1002765">GET_TIME function</a></p>
</td>
<td class="cellalignment1018" headers="r14c1-t5 r1c2-t5">
<p>Finds out the current time in hundredths of a second.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r15c1-t5" headers="r1c1-t5">
<p><a href="#BABFDACJ">INVALIDATE procedure</a></p>
</td>
<td class="cellalignment1018" headers="r15c1-t5 r1c2-t5">
<p>Invalidates a database object and (optionally) modifies its PL/SQL compiler parameter settings.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r16c1-t5" headers="r1c1-t5">
<p><a href="#BJEECIBF">IS_BIT_SET function</a></p>
</td>
<td class="cellalignment1018" headers="r16c1-t5 r1c2-t5">
<p>Checks the setting of a specified bit in a <code>RAW</code> value.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r17c1-t5" headers="r1c1-t5">
<p><a href="#i997271">NAME_RESOLVE procedure</a></p>
</td>
<td class="cellalignment1018" headers="r17c1-t5 r1c2-t5">
<p>Resolves the given name of the form:</p>
<pre>[[<span class="italic">a</span>.]<span class="italic">b</span>.]<span class="italic">c</span>[@<span class="italic">dblink</span>]
</pre>
<p>Where <code><span class="codeinlineitalic">a</span></code>, <code><span class="codeinlineitalic">b</span></code>, and <code><span class="codeinlineitalic">c</span></code> are SQL identifiers and <code><span class="codeinlineitalic">dblink</span></code> is a dblink.</p>
<p><span class="bold">Important</span>: Do not use <code>@</code><code><span class="codeinlineitalic">dblink</span></code>. TimesTen does not support database links.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r18c1-t5" headers="r1c1-t5">
<p><a href="#BJEFIFBJ">NAME_TOKENIZE procedure</a></p>
</td>
<td class="cellalignment1018" headers="r18c1-t5 r1c2-t5">
<p>Calls the parser to parse the given name:</p>
<pre>&#39;<span class="italic">a</span>[.<span class="italic">b</span>[.<span class="italic">c</span>]][@<span class="italic">dblink</span>]&#34;
</pre>
<p>Where <code><span class="codeinlineitalic">a</span></code>, <code><span class="codeinlineitalic">b</span></code>, and <code><span class="codeinlineitalic">c</span></code> are SQL identifiers and <code><span class="codeinlineitalic">dblink</span></code> is a dblink. Strips double quotes or converts to uppercase if there are no quotes. Ignores comments and does not perform semantic analysis. Missing values are <code>NULL</code>.</p>
<p><span class="bold">Important</span>: Do not use <code>@</code><code><span class="codeinlineitalic">dblink</span></code>. TimesTen does not support database links.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r19c1-t5" headers="r1c1-t5">
<p><a href="#i1002844">TABLE_TO_COMMA procedure</a></p>
</td>
<td class="cellalignment1018" headers="r19c1-t5 r1c2-t5">
<p>Converts a PL/SQL table of names into a comma-delimited list of names.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r20c1-t5" headers="r1c1-t5">
<p><a href="#i1005273">VALIDATE procedure</a></p>
</td>
<td class="cellalignment1018" headers="r20c1-t5 r1c2-t5">
<p>Validates the object described either by owner, name, and namespace or by object ID.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<a id="i1004667"></a><a id="TTPLP71361"></a>
<hr/>
<h3 class="refsect2"><a id="sthref542"></a>CANONICALIZE procedure</h3>
<p>This procedure canonicalizes the given string. The procedure handles a single reserved or key word (such as &#34;<code>table</code>&#34;), and strips off white spaces for a single identifier. For example, &#34; <code>table</code>&#34; becomes <code>TABLE</code>.</p>
<p class="titleinrefsubsect"><a id="sthref543"></a>Syntax</p>
<pre>DBMS_UTILITY.CANONICALIZE(
   <span class="italic">name</span>           IN    VARCHAR2,
   <span class="italic">canon_name</span>     OUT   VARCHAR2,
   <span class="italic">canon_len</span>      IN    BINARY_INTEGER);
</pre>
<p class="titleinrefsubsect"><a id="sthref544"></a>Parameters</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP71362"></a><a id="sthref545"></a><a id="sthref546"></a>Table 8-4 CANONICALIZE procedure parameters</p>
<table class="cellalignment1016" title="CANONICALIZE procedure parameters " summary="This table describes the Parameters of DBMS_UTILITY.CANONICALIZE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t6">Parameter</th>
<th class="cellalignment1017" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t6" headers="r1c1-t6">
<p><code><span class="codeinlineitalic">name</span></code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t6 r1c2-t6">
<p>The string to be canonicalized</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t6" headers="r1c1-t6">
<p><code><span class="codeinlineitalic">canon_name</span></code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t6 r1c2-t6">
<p>The canonicalized string</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r4c1-t6" headers="r1c1-t6">
<p><code><span class="codeinlineitalic">canon_len</span></code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t6 r1c2-t6">
<p>The length of the string (in bytes) to canonicalize</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="titleinrefsubsect"><a id="sthref547"></a>Return value</p>
<p>The first <code><span class="codeinlineitalic">canon_len</span></code> bytes in <code><span class="codeinlineitalic">canon_name</span></code></p>
<p class="titleinrefsubsect"><a id="sthref548"></a>Usage notes</p>
<ul>
<li>
<p>If the <code><span class="codeinlineitalic">name</span></code> value is <code>NULL</code>, the <code><span class="codeinlineitalic">canon_name</span></code> value becomes <code>NULL</code>.</p>
</li>
<li>
<p>If <code>name</code> is a dotted name (such as <code>a.&#34;b&#34;.c</code>), then for each component in the dotted name where the component begins and ends with a double quote, no transformation is performed on that component. Alternatively, convert to upper case with <code>NLS_UPPER</code> and apply begin and end double quotes to the capitalized form of this component. In such a case, each canonicalized component is concatenated in the input position, separated by &#34;.&#34;.</p>
</li>
<li>
<p>If <code>name</code> is not a dotted name, and if <code>name</code> begins and ends with a double quote, remove both quotes. Alternatively, convert to upper case with <code>NLS_UPPER</code>. Note that this case does not include a name with special characters, such as a space, but is not doubly quoted.</p>
</li>
<li>
<p>Any other character after <code>a[.b]*</code> is ignored.</p>
</li>
<li>
<p>The procedure does not handle cases like <code>&#39;A B.&#39;</code></p>
</li>
</ul>
<p class="titleinrefsubsect"><a id="i1005256"></a>Examples</p>
<ul>
<li>
<p><code>a</code> becomes <code>A</code>.</p>
</li>
<li>
<p><code>&#34;a&#34;</code> becomes <code>a</code>.</p>
</li>
<li>
<p><code>&#34;a&#34;.b</code> becomes <code>&#34;a&#34;.&#34;B&#34;</code>.</p>
</li>
<li>
<p><code>&#34;a&#34;.b,c.f</code> becomes <code>&#34;a&#34;.&#34;B&#34;</code> with<code>&#34;,c.f&#34;</code> ignored.</p>
</li>
</ul>
<a id="i1002468"></a><a id="TTPLP71363"></a>
<hr/>
<h3 class="refsect2"><a id="sthref549"></a>COMMA_TO_TABLE procedure</h3>
<p>This procedure converts a comma-delimited list of names into a PL/SQL table of names. The second version supports fully qualified attribute names.</p>
<p class="titleinrefsubsect"><a id="sthref550"></a>Syntax</p>
<pre>DBMS_UTILITY.COMMA_TO_TABLE ( 
   <span class="italic">list</span>   IN  VARCHAR2,
   <span class="italic">tablen</span> OUT BINARY_INTEGER,
   <span class="italic">tab</span>    OUT dbms_utility.uncl_array); 

DBMS_UTILITY.COMMA_TO_TABLE ( 
   <span class="italic">list</span>   IN  VARCHAR2,
   <span class="italic">tablen</span> OUT BINARY_INTEGER,
   <span class="italic">tab</span>    OUT dbms_utility.lname_array);
</pre>
<p class="titleinrefsubsect"><a id="sthref551"></a>Parameters</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP71364"></a><a id="sthref552"></a><a id="sthref553"></a>Table 8-5 COMMA_TO_TABLE procedure parameters</p>
<table class="cellalignment1016" title="COMMA_TO_TABLE procedure parameters" summary="This table describes the Parameters of DBMS_UTILITY.COMMA_TO_TABLE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t7">Parameter</th>
<th class="cellalignment1017" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t7" headers="r1c1-t7">
<p><code><span class="codeinlineitalic">list</span></code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t7 r1c2-t7">
<p>Comma-delimited list of names, where a name should have the following format for the first version of the procedure:</p>
<pre><span class="italic">a</span>[.<span class="italic">b</span>[.<span class="italic">c</span>]][@<span class="italic">d</span>]
</pre>
<p>Or the following format for the second version of the procedure:</p>
<pre><span class="italic">a</span>[.<span class="italic">b</span>]*
</pre>
<p>Where <code><span class="codeinlineitalic">a</span></code>, <code><span class="codeinlineitalic">b</span></code>, <code><span class="codeinlineitalic">c</span></code>, and <code><span class="codeinlineitalic">d</span></code> are simple identifiers (quoted or unquoted).</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t7" headers="r1c1-t7">
<p><code><span class="codeinlineitalic">tablen</span></code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t7 r1c2-t7">
<p>Number of tables in the PL/SQL table</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r4c1-t7" headers="r1c1-t7">
<p><code><span class="codeinlineitalic">tab</span></code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t7 r1c2-t7">
<p>PL/SQL table that contains list of names</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="titleinrefsubsect"><a id="sthref554"></a>Return value</p>
<p>A PL/SQL table with values <code>1..</code><code><span class="codeinlineitalic">n</span></code>, and <code><span class="codeinlineitalic">n</span></code><code>+1</code> is <code>NULL</code></p>
<p class="titleinrefsubsect"><a id="sthref555"></a>Usage notes</p>
<p>The <code><span class="codeinlineitalic">list</span></code> must be a non-empty, comma-delimited list. Anything other than a comma-delimited list is rejected. Commas inside double quotes do not count.</p>
<p>Entries in the comma-delimited list cannot include multibyte characters.</p>
<p>The values in <code><span class="codeinlineitalic">tab</span></code> are copied from the original list, with no transformations.</p>
<a id="i1002332"></a><a id="TTPLP71365"></a>
<hr/>
<h3 class="refsect2"><a id="sthref556"></a>COMPILE_SCHEMA procedure</h3>
<p>This procedure compiles all procedures, functions, packages, and views in the specified schema.</p>
<p class="titleinrefsubsect"><a id="sthref557"></a>Syntax</p>
<pre>DBMS_UTILITY.COMPILE_SCHEMA (
   <span class="italic">schema</span>          IN VARCHAR2,
   <span class="italic">compile_all</span>     IN BOOLEAN DEFAULT TRUE,
   <span class="italic">reuse_settings</span>  IN BOOLEAN DEFAULT FALSE);
</pre>
<p class="titleinrefsubsect"><a id="sthref558"></a>Parameters</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP71366"></a><a id="sthref559"></a><a id="sthref560"></a>Table 8-6 COMPILE_SCHEMA procedure parameters</p>
<table class="cellalignment1016" title="COMPILE_SCHEMA procedure parameters " summary="This table describes the Parameters of DBMS_UTILITY.COMPILE_SCHEMA subprogram." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t8">Parameter</th>
<th class="cellalignment1017" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t8" headers="r1c1-t8">
<p><code><span class="codeinlineitalic">schema</span></code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t8 r1c2-t8">
<p>Name of the schema</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t8" headers="r1c1-t8">
<p><code><span class="codeinlineitalic">compile_all</span></code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t8 r1c2-t8">
<p><code>TRUE</code> to compile everything within the schema regardless of whether status is <code>VALID</code></p>
<p><code>FALSE</code> to compile only objects with status <code>INVALID</code></p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r4c1-t8" headers="r1c1-t8">
<p><code><span class="codeinlineitalic">reuse_settings</span></code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t8 r1c2-t8">
<p>Flag to specify whether the session settings in the objects should be reused, or the current session settings should be adopted instead</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="titleinrefsubsect"><a id="sthref561"></a>Usage notes</p>
<ul>
<li>
<p>Note that this subprogram is a wrapper for the <a href="u_recomp.htm#i999769">RECOMP_SERIAL procedure</a> included with the <code>UTL_RECOMP</code> package.</p>
</li>
<li>
<p>After calling this procedure, you should select from view <code>ALL_OBJECTS</code> for items with status <code>INVALID</code> to see if all objects were successfully compiled.</p>
</li>
<li>
<p>To see the errors associated with invalid objects, you can use the <code>ttIsql</code> <code>show errors</code> command:</p>
<pre>Command&gt; show errors [{FUNCTION | PROCEDURE | PACKAGE | PACKAGE BODY}
[<span class="italic">schema</span>.]<span class="italic">name</span>];
</pre>
<p>Examples:</p>
<pre>Command&gt; show errors function foo;
Command&gt; show errors procedure fred.bar;
Command&gt; show errors package body emp_actions;
</pre></li>
</ul>
<p class="titleinrefsubsect"><a id="sthref562"></a>Exceptions</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP71367"></a><a id="sthref563"></a><a id="sthref564"></a>Table 8-7 COMPILE_SCHEMA procedure exceptions</p>
<table class="cellalignment1016" title="COMPILE_SCHEMA procedure exceptions " summary="This table describes Exceptions raised by the COMPILE_SCHEMA subprogram." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t9">Exception</th>
<th class="cellalignment1017" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t9" headers="r1c1-t9">
<p><code>ORA-20000</code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t9 r1c2-t9">
<p>Raised for insufficient privileges for some object in this schema.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t9" headers="r1c1-t9">
<p><code>ORA-20001</code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t9 r1c2-t9">
<p>Raised if <code>SYS</code> objects cannot be compiled.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r4c1-t9" headers="r1c1-t9">
<p><code>ORA-20002</code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t9 r1c2-t9">
<p>Raised if maximum iterations exceeded. Some objects may not have been recompiled.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<a id="i1002631"></a><a id="TTPLP71368"></a>
<hr/>
<h3 class="refsect2"><a id="sthref565"></a>DB_VERSION procedure</h3>
<p>This procedure returns version information for the database.</p>
<p>Returns <code>NULL</code> for the compatibility setting because TimesTen does not support the system parameter <code>COMPATIBLE</code>.</p>
<p>Also see <a href="t_dbver.htm#CCHHJAGH">Chapter 9, &#34;TT_DB_VERSION&#34;</a>.</p>
<p class="titleinrefsubsect"><a id="sthref566"></a>Syntax</p>
<pre>DBMS_UTILITY.DB_VERSION (
   <span class="italic">version</span>       OUT VARCHAR2,
   <span class="italic">compatibility</span> OUT VARCHAR2); 
</pre>
<p class="titleinrefsubsect"><a id="sthref567"></a>Parameters</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP71369"></a><a id="sthref568"></a><a id="sthref569"></a>Table 8-8 DB_VERSION procedure parameters</p>
<table class="cellalignment1016" title="DB_VERSION procedure parameters" summary="This table describes the Parameters of DBMS_UTILITY.DB_VERSION subprogram." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t10">Parameter</th>
<th class="cellalignment1017" id="r1c2-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t10" headers="r1c1-t10">
<p><code><span class="codeinlineitalic">version</span></code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t10 r1c2-t10">
<p>String that represents the internal software version of the database (for example, 11.2.2.1.0)</p>
<p>The length of this string is variable and is determined by the database version.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t10" headers="r1c1-t10">
<p><code><span class="codeinlineitalic">compatibility</span></code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t10 r1c2-t10">
<p>Compatibility setting of the database</p>
<p>In TimesTen, <code>DB_VERSION</code> returns <code>NULL</code> for the compatibility setting because TimesTen does not support the system parameter <code>COMPATIBLE</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<a id="i997163"></a><a id="TTPLP71370"></a>
<hr/>
<h3 class="refsect2"><a id="sthref570"></a>FORMAT_CALL_STACK function</h3>
<p>This function formats the current call stack. It can be used on any stored procedure to access the call stack and is useful for debugging.</p>
<p class="titleinrefsubsect"><a id="sthref571"></a>Syntax</p>
<pre>DBMS_UTILITY.FORMAT_CALL_STACK 
  RETURN VARCHAR2;
</pre>
<p class="titleinrefsubsect"><a id="sthref572"></a>Return value</p>
<p>The call stack, up to 2000 bytes</p>
<a id="i1003874"></a><a id="TTPLP71371"></a>
<hr/>
<h3 class="refsect2"><a id="sthref573"></a>FORMAT_ERROR_BACKTRACE function</h3>
<p>This procedure displays the call stack at the point where an exception was raised, even if the procedure is called from an exception handler in an outer scope. The output is similar to the output of the <code>SQLERRM</code> function, but not subject to the same size limitation.</p>
<p class="titleinrefsubsect"><a id="sthref574"></a>Syntax</p>
<pre>DBMS_UTILITY.FORMAT_ERROR_BACKTRACE 
  RETURN VARCHAR2;
</pre>
<p class="titleinrefsubsect"><a id="sthref575"></a>Return value</p>
<p>The backtrace string (or a null string if no error is currently being handled)</p>
<p class="titleinrefsubsect"><a id="sthref576"></a>Ex<a id="sthref577"></a><a id="sthref578"></a>amples</p>
<p><span class="bold">Script format_error_backtrace.sql:</span></p>
<p>Execute the following script from <code>ttIsql</code>, using the <code>run</code> command.</p>
<pre>CREATE OR REPLACE PROCEDURE Log_Errors ( i_buff in varchar2 ) IS
  g_start_pos integer := 1;
  g_end_pos  integer;
 
  FUNCTION Output_One_Line RETURN BOOLEAN IS
  BEGIN
    g_end_pos := Instr ( i_buff, Chr(10), g_start_pos );
 
    CASE g_end_pos &gt; 0
      WHEN true THEN
        DBMS_OUTPUT.PUT_LINE ( Substr ( i_buff, g_start_pos,
                               g_end_pos-g_start_pos ) );
        g_start_pos := g_end_pos+1;
        RETURN TRUE;
 
      WHEN FALSE THEN
        DBMS_OUTPUT.PUT_LINE ( Substr ( i_buff, g_start_pos,
                               (Length(i_buff)-g_start_pos)+1 ) );
        RETURN FALSE;
    END CASE;
  END Output_One_Line;
 
BEGIN
  WHILE Output_One_Line() LOOP NULL; 
  END LOOP;
END Log_Errors;
/

-- Define and raise an exception to view backtrace. 
-- See <a class="olink LNPLS01315" href="../LNPLS/exceptioninit_pragma.htm#LNPLS01315">&#34;EXCEPTION_INIT Pragma&#34;</a> in <span class="italic">Oracle Database PL/SQL Language Reference</span>.

CREATE OR REPLACE PROCEDURE P0 IS
  e_01476 EXCEPTION; pragma exception_init ( e_01476, -1476 );
BEGIN
  RAISE e_01476;
END P0;
/
Show Errors
 

CREATE OR REPLACE PROCEDURE P1 IS
BEGIN
  P0();
END P1;
/
SHOW ERRORS
 
CREATE OR REPLACE PROCEDURE P2 IS
BEGIN
  P1();
END P2;
/
SHOW ERRORS
 
CREATE OR REPLACE PROCEDURE P3 IS
BEGIN
  P2();
END P3;
/
SHOW ERRORS
 
CREATE OR REPLACE PROCEDURE P4 IS
BEGIN 
  P3(); 
END P4;
/
CREATE OR REPLACE PROCEDURE P5 IS
BEGIN 
  P4(); 
END P5;
/
SHOW ERRORS
 
CREATE OR REPLACE PROCEDURE Top_Naive IS
BEGIN
  P5();
END Top_Naive;
/
SHOW ERRORS
 
CREATE OR REPLACE PROCEDURE Top_With_Logging IS
  -- NOTE: SqlErrm in principle gives the same info as Format_Error_Stack.
  -- But SqlErrm is subject to some length limits,
  -- while Format_Error_Stack is not.

BEGIN
  P5();
EXCEPTION
  WHEN OTHERS THEN
    Log_Errors ( &#39;Error_Stack...&#39; || Chr(10) ||
      DBMS_UTILITY.FORMAT_ERROR_STACK() );
    Log_Errors ( &#39;Error_Backtrace...&#39; || Chr(10) ||
      DBMS_UTILITY.FORMAT_ERROR_BACKTRACE() );
    DBMS_OUTPUT.PUT_LINE ( &#39;----------&#39; );
END Top_With_Logging;
/
SHOW ERRORS
</pre>
<p><span class="bold">Execute Top_Naive:</span></p>
<p>This shows the results of executing the <code>Top_Naive</code> procedure that is created in the script, assuming user <code>SCOTT</code> ran the script and executed the procedure.</p>
<pre>Command&gt; set serveroutput on
Command&gt; begin
       &gt; Top_Naive();
       &gt; end;
       &gt; /
 8507: ORA-01476: divisor is equal to zero
 8507: ORA-06512: at &#34;SCOTT.P0&#34;, line 4
 8507: ORA-06512: at &#34;SCOTT.P1&#34;, line 3
 8507: ORA-06512: at &#34;SCOTT.P2&#34;, line 3
 8507: ORA-06512: at &#34;SCOTT.P3&#34;, line 3
 8507: ORA-06512: at &#34;SCOTT.P4&#34;, line 3
 8507: ORA-06512: at &#34;SCOTT.P5&#34;, line 3
 8507: ORA-06512: at &#34;SCOTT.TOP_NAIVE&#34;, line 3
 8507: ORA-06512: at line 2
The command failed.
</pre>
<p>This output shows the call stack at the point where an exception was raised. It shows the backtrace error message as the call stack unwound, starting at the unhandled exception <code>ORA-01476</code> raised at <code>SCOTT.P0</code> line 4, back to <code>SCOTT.Top_Naive</code> line 3.</p>
<p><span class="bold">Execute Top_With_Logging:</span></p>
<p>This shows the results of executing the <code>Top_With_Logging()</code> procedure that is created in the script, assuming user <code>SCOTT</code> ran the script and executed the procedure.</p>
<pre>Command&gt; begin
       &gt; Top_With_Logging();
       &gt; end;
       &gt; /
Error_Stack...
ORA-01476: divisor is equal to zero
Error_Backtrace...
ORA-06512: at &#34;SCOTT.P0&#34;, line 4
ORA-06512: at &#34;SCOTT.P1&#34;, line 3
ORA-06512: at &#34;SCOTT.P2&#34;, line 3
ORA-06512: at &#34;SCOTT.P3&#34;, line 3
ORA-06512: at &#34;SCOTT.P4&#34;, line 3
ORA-06512: at &#34;SCOTT.P5&#34;, line 3
ORA-06512: at &#34;SCOTT.TOP_WITH_LOGGING&#34;, line 6
----------
 
PL/SQL procedure successfully completed.
</pre>
<p>This output shows the call stack at the point where an exception was raised. It shows the backtrace error message as the call stack unwound, starting at the unhandled exception <code>ORA-01476</code> raised at <code>SCOTT.P0</code> line 4, back to <code>SCOTT.Top_With_Logging</code> line 6.</p>
<p><span class="bold">ORA-06512 information:</span></p>
<p><a class="olink ERRMG" href="../ERRMG/toc.htm"><span class="italic">Oracle Database Error Messages</span></a> provides the following information about the <code>ORA-06512</code> error:</p>
<pre>ORA-06512: at <span class="italic">string</span>line <span class="italic">string</span>
    Cause: Backtrace message as the stack is unwound by unhandled exceptions.
    Action: Fix the problem causing the exception or write an exception handler
 for this condition. Or you may need to contact your application administrator or
 DBA.
</pre>
<a id="i1002463"></a><a id="TTPLP71376"></a>
<hr/>
<h3 class="refsect2"><a id="sthref579"></a>FORMAT_ERROR_STACK function</h3>
<p>This function formats the current error stack. It can be used in exception handlers to look at the full error stack.</p>
<p class="titleinrefsubsect"><a id="sthref580"></a>Syntax</p>
<pre>DBMS_UTILITY.FORMAT_ERROR_STACK 
  RETURN VARCHAR2;
</pre>
<p class="titleinrefsubsect"><a id="sthref581"></a>Return value</p>
<p>The error stack, up to 2000 bytes (or a null string if no error is currently being handled)</p>
<a id="i1003768"></a><a id="TTPLP71377"></a>
<hr/>
<h3 class="refsect2"><a id="sthref582"></a>GET_CPU_TIME function</h3>
<p>This function returns a measure of current CPU processing time in hundredths of a second. The difference between the times returned from two calls measures the CPU processing time (not the total elapsed time) between those two points.</p>
<p>Also see the <a href="#i1002765">GET_TIME function</a>, which has a different intent.</p>
<p class="titleinrefsubsect"><a id="sthref583"></a>Syntax</p>
<pre>  DBMS_UTILITY.GET_CPU_TIME
   RETURN NUMBER;
</pre>
<p class="titleinrefsubsect"><a id="sthref584"></a>Return value</p>
<p>The number of hundredths of a second of CPU processing time from some arbitrary point</p>
<p class="titleinrefsubsect"><a id="sthref585"></a>Usage notes</p>
<p>This subprogram reports cycles (CPU time) used in performing work and is unrelated to clock time or any other fixed reference. It always returns a positive value. The amount of work performed is calculated by measuring the difference between a start point and end point for a particular operation, using a <code>GET_CPU_TIME</code> call at each point.</p>
<a id="i1004023"></a><a id="TTPLP71378"></a>
<hr/>
<h3 class="refsect2"><a id="sthref586"></a>GET_DEPENDENCY procedure</h3>
<p>This procedure shows the dependencies on the object passed in.</p>
<p class="titleinrefsubsect"><a id="sthref587"></a>Syntax</p>
<pre>  DBMS_UTILITY.GET_DEPENDENCY
   <span class="italic">type</span>      IN     VARCHAR2,
   <span class="italic">schema</span>    IN     VARCHAR2,
   <span class="italic">name</span>      IN     VARCHAR2);
</pre>
<p class="titleinrefsubsect"><a id="sthref588"></a>Parameters</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP71379"></a><a id="sthref589"></a><a id="sthref590"></a>Table 8-9 GET_DEPENDENCY procedure parameters</p>
<table class="cellalignment1016" title="GET_DEPENDENCY procedure parameters " summary="This table describes the Parameters of DBMS_UTILITY.GET_DEPENDENCY subprogram." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t11">Parameter</th>
<th class="cellalignment1017" id="r1c2-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t11" headers="r1c1-t11">
<p><code><span class="codeinlineitalic">type</span></code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t11 r1c2-t11">
<p>The type of the object</p>
<p>For example, if the object is a table, give the type as &#34;TABLE&#34;.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t11" headers="r1c1-t11">
<p><code><span class="codeinlineitalic">schema</span></code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t11 r1c2-t11">
<p>The schema name of the object</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r4c1-t11" headers="r1c1-t11">
<p><code><span class="codeinlineitalic">name</span></code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t11 r1c2-t11">
<p>The name of the object</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="titleinrefsubsect"><a id="sthref591"></a>Usage notes</p>
<p>This procedure uses the <code><a href="d_output.htm#BABJCAJA">DBMS_OUTPUT</a></code> package to display results, so you must declare <code>SET SERVEROUTPUT ON</code> from <code>ttIsql</code> to view dependencies. Alternatively, any application that checks the <code>DBMS_OUTPUT</code> output buffers can invoke this subprogram and then retrieve the output through <code>DBMS_OUTPUT</code> subprograms such as <code>GET_LINES</code>.</p>
<a id="BJEFCEFD"></a><a id="TTPLP71380"></a>
<hr/>
<h3 class="refsect2"><a id="sthref592"></a>GET_ENDIANNESS function</h3>
<p>This function indicates the endianness of the database platform.</p>
<p class="titleinrefsubsect"><a id="sthref593"></a>Syntax</p>
<pre>  DBMS_UTILITY.GET_ENDIANNESS
   RETURN NUMBER;
</pre>
<p class="titleinrefsubsect"><a id="sthref594"></a>Return value</p>
<p>A <code>NUMBER</code> value indicating the endianness of the database platform: 1 for big-endian or 2 for little-endian</p>
<a id="i1003646"></a><a id="TTPLP71381"></a>
<hr/>
<h3 class="refsect2"><a id="sthref595"></a>GET_HASH_VALUE function</h3>
<p>This function computes a hash value for the given string.</p>
<p class="titleinrefsubsect"><a id="sthref596"></a>Syntax</p>
<pre>DBMS_UTILITY.GET_HASH_VALUE (
   <span class="italic">name</span>      IN  VARCHAR2, 
   <span class="italic">base</span>      IN  NUMBER, 
   <span class="italic">hash_size</span> IN  NUMBER)
  RETURN NUMBER;
</pre>
<p class="titleinrefsubsect"><a id="sthref597"></a>Parameters</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP71382"></a><a id="sthref598"></a><a id="sthref599"></a>Table 8-10 GET_HASH_VALUE function parameters</p>
<table class="cellalignment1016" title="GET_HASH_VALUE function parameters " summary="This table describes the Parameters of DBMS_UTILITY.GET_HASH_VALUE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t12">Parameter</th>
<th class="cellalignment1017" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t12" headers="r1c1-t12">
<p><code><span class="codeinlineitalic">name</span></code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t12 r1c2-t12">
<p>String to be hashed</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t12" headers="r1c1-t12">
<p><code><span class="codeinlineitalic">base</span></code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t12 r1c2-t12">
<p>Base value where the returned hash value is to start</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r4c1-t12" headers="r1c1-t12">
<p><code><span class="codeinlineitalic">hash_size</span></code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t12 r1c2-t12">
<p>Desired size of the hash table</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="titleinrefsubsect"><a id="sthref600"></a>Return value</p>
<p>A hash value based on the input string</p>
<p>For example, to get a hash value on a string where the hash value should be between 1000 and 3047, use 1000 as the base value and 2048 as the <code><span class="codeinlineitalic">hash_size</span></code> value. Using a power of 2 for <code><span class="codeinlineitalic">hash_size</span></code> works best.</p>
<a id="BJEGIHID"></a><a id="TTPLP71383"></a>
<hr/>
<h3 class="refsect2"><a id="sthref601"></a>GET_SQL_HASH function</h3>
<p>This function computes a hash value for the given string using the MD5 algorithm.</p>
<p class="titleinrefsubsect"><a id="sthref602"></a>Syntax</p>
<pre>DBMS_UTILITY.GET_SQL_HASH (
   <span class="italic">name</span>          IN   VARCHAR2
  [,<span class="italic">hash</span>          OUT  RAW,
   <span class="italic">pre10ihash</span>    OUT  NUMBER])
  RETURN NUMBER;
</pre>
<p class="titleinrefsubsect"><a id="sthref603"></a>Parameters</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP71384"></a><a id="sthref604"></a><a id="sthref605"></a>Table 8-11 GET_SQL_HASH procedure parameters</p>
<table class="cellalignment1016" title="GET_SQL_HASH procedure parameters" summary="This table describes the parameters of the DBMS_UTILITY.GET_SQL_HASH subprogram." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t13">Parameter</th>
<th class="cellalignment1017" id="r1c2-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t13" headers="r1c1-t13">
<p><code><span class="codeinlineitalic">name</span></code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t13 r1c2-t13">
<p>String to be hashed</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t13" headers="r1c1-t13">
<p><code><span class="codeinlineitalic">hash</span></code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t13 r1c2-t13">
<p>An optional field to store all 16 bytes of returned hash value</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r4c1-t13" headers="r1c1-t13">
<p><code><span class="codeinlineitalic">pre10ihash</span></code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t13 r1c2-t13">
<p>An optional field to store a pre-10<span class="italic">g</span> Oracle Database version hash value</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="titleinrefsubsect"><a id="sthref606"></a>Return value</p>
<p>A hash value (last four bytes) based on the input string</p>
<p>The MD5 hash algorithm computes a 16-byte hash value, but TimesTen returns only the last four bytes to return an actual number. One could use an optional <code>RAW</code> parameter to get all 16 bytes and to store the pre-10<span class="italic">g</span> Oracle Database hash value of four bytes in the <code><span class="codeinlineitalic">pre10ihash</span></code> optional parameter.</p>
<a id="i1002765"></a><a id="TTPLP71385"></a>
<hr/>
<h3 class="refsect2"><a id="sthref607"></a>GET_TIME function</h3>
<p>This function returns a measure of current time in hundredths of a second. The difference between the times returned from two calls measures the total elapsed time (not just CPU processing time) between those two points.</p>
<p>Also see the <a href="#i1003768">GET_CPU_TIME function</a>, which has a different intent.</p>
<p class="titleinrefsubsect"><a id="sthref608"></a>Syntax</p>
<pre>DBMS_UTILITY.GET_TIME 
  RETURN NUMBER;
</pre>
<p class="titleinrefsubsect"><a id="sthref609"></a>Return value</p>
<p>The number of hundredths of a second from the time at which the subprogram is invoked</p>
<p class="titleinrefsubsect"><a id="sthref610"></a>Usage notes</p>
<p>Numbers are returned in the range -2,147,483,648 to 2,147,483,647 depending on platform and system, and your application must take the sign of the number into account in determining the interval. For example, for two negative numbers, application logic must allow for the first (earlier) number to be larger than the second (later) number that is closer to zero. By the same token, your application should also allow for the first (earlier) number to be negative and the second (later) number to be positive.</p>
<a id="BABFDACJ"></a><a id="TTPLP71386"></a>
<hr/>
<h3 class="refsect2"><a id="sthref611"></a>INVALIDATE procedure</h3>
<p>This procedure invalidates a database object and (optionally) modifies its PL/SQL compiler parameter settings. It also invalidates any objects that directly or indirectly depend on the object being invalidated.</p>
<p class="titleinrefsubsect"><a id="sthref612"></a>Syntax</p>
<pre>DBMS_UTILITY.INVALIDATE ( 
   <span class="italic">p_object_id</span>              IN  NUMBER
  [,<span class="italic">p_plsql_object_settings</span>  IN  VARCHAR2 DEFAULT NULL,
   <span class="italic">p_option_flags</span>           BINARY_INTEGER DEFAULT 0]);
</pre>
<p class="titleinrefsubsect"><a id="sthref613"></a>Parameters</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP71387"></a><a id="sthref614"></a><a id="sthref615"></a>Table 8-12 INVALIDATE procedure parameters</p>
<table class="cellalignment1016" title="INVALIDATE procedure parameters" summary="This table describes the parameters of the DBMS_UTILITY.INVALIDATE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t14">Parameter</th>
<th class="cellalignment1017" id="r1c2-t14">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t14" headers="r1c1-t14">
<p><code><span class="codeinlineitalic">p_object_id</span></code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t14 r1c2-t14">
<p>ID number of the object to be invalidated</p>
<p>This equals the value of the <code>OBJECT_ID</code> column from <code>ALL_OBJECTS</code>. If the <code><span class="codeinlineitalic">p_object_id</span></code> argument is <code>NULL</code> or invalid then the exception <code>inv_not_exist_or_no_priv</code> is raised. The caller of this procedure must have <code>CREATE</code> privilege on the object being invalidated, otherwise the <code>inv_not_exist_or_no_priv</code> exception is raised.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t14" headers="r1c1-t14">
<p><code><span class="codeinlineitalic">p_plsql_object_settings</span></code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t14 r1c2-t14">
<p>Optional parameter that is ignored if the object specified by <code><span class="codeinlineitalic">p_object_id</span></code> is not a PL/SQL object</p>
<p>If no value is specified for this parameter, the PL/SQL compiler settings are left unchanged, equivalent to <code>REUSE SETTINGS</code>. If a value is provided, it must specify the values of the PL/SQL compiler settings separated by one or more spaces. If a setting is specified more than once, the <code>inv_malformed_settings</code> exception is raised. The setting values are changed only for the object specified by <code><span class="codeinlineitalic">p_object_id</span></code> and do not affect dependent objects that may be invalidated. The setting names and values are case insensitive. If a setting is omitted and <code>REUSE SETTINGS</code> is specified, then if a value was specified for the compiler setting in an earlier compilation of this library unit, TimesTen uses that value. If a setting is omitted and <code>REUSE SETTINGS</code> was not specified or no value was specified for the parameter in an earlier compilation, then the database obtains the value for that setting from the session environment.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r4c1-t14" headers="r1c1-t14">
<p><code><span class="codeinlineitalic">p_option_flags</span></code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t14 r1c2-t14">
<p>Optional parameter that defaults to zero (no flags)</p>
<p>Only the <code>inv_error_on_restrictions</code> flag is supported (see <a href="#BABIFIDB">&#34;Constants&#34;</a>). With this flag, the subprogram imposes various restrictions on the objects that can be invalidated. For example, the object specified by <code><span class="codeinlineitalic">p_object_id</span></code> cannot be a table. By default, invalidate quietly returns on these conditions (and does not raise an exception). If the caller sets this flag, the exception <code>inv_restricted_object</code> is raised.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="titleinrefsubsect"><a id="sthref616"></a>Usage notes</p>
<p>The object type (<code>object_type</code> column from <code>ALL_OBJECTS</code>) of the object that is specified by <code><span class="codeinlineitalic">p_object_id</span></code> must be a <code>PROCEDURE</code>, <code>FUNCTION</code>, <code>PACKAGE</code>, <code>PACKAGE BODY</code>, <code>LIBRARY</code>, <code>OPERATOR</code>, or <code>SYNONYM</code>. If the object is not one of these types and the flag <code>inv_error_on_restrictions</code> is specified in <code><span class="codeinlineitalic">p_option_flags</span></code>, the exception <code>inv_restricted_object</code> is raised. If <code>inv_error_on_restrictions</code> is not specified in this situation, then no action is taken.</p>
<p>If the object specified by <code><span class="codeinlineitalic">p_object_id</span></code> is the package specification of <code>STANDARD</code> or <code>DBMS_STANDARD</code>, or the specification or body of <code>DBMS_UTILITY</code>, and if the flag <code>inv_error_on_restrictions</code> is specified in <code><span class="codeinlineitalic">p_option_flags</span></code>, then the exception <code>inv_restricted_object</code> is raised. If <code>inv_error_on_restrictions</code> is not specified in this situation, then no action is taken.</p>
<p>If the object specified by <code><span class="codeinlineitalic">p_object_id</span></code> is an object type specification and there are tables that depend on the type, and if the flag <code>inv_error_on_restrictions</code> is specified in <code><span class="codeinlineitalic">p_option_flags</span></code>, then the exception <code>inv_restricted_object</code> is raised. If <code>inv_error_on_restrictions</code> is not specified, then no action is taken.</p>
<p class="titleinrefsubsect"><a id="sthref617"></a>Exceptions</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP71388"></a><a id="sthref618"></a><a id="sthref619"></a>Table 8-13 INVALIDATE exceptions</p>
<table class="cellalignment1016" title="INVALIDATE exceptions" summary="This table describes exceptions raised by the DBMS_UTILITY.INVALIDATE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t15">Exception</th>
<th class="cellalignment1017" id="r1c2-t15">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t15" headers="r1c1-t15">
<p><code>INV_NOT_EXIST_OR_NO_PRIV</code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t15 r1c2-t15">
<p>Raised when the <code><span class="codeinlineitalic">object_id</span></code> argument value is <code>NULL</code> or invalid, or when the caller does not have <code>CREATE</code> privilege on the object being invalidated.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t15" headers="r1c1-t15">
<p><code>INV_MALFORMED_SETTINGS</code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t15 r1c2-t15">
<p>Raised if a compiler setting is specified more than once in the <code><span class="codeinlineitalic">p_plsql_object_settings</span></code> parameter.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r4c1-t15" headers="r1c1-t15">
<p><code>INV_RESTRICTED_OBJECT</code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t15 r1c2-t15">
<p>Raised when different combinations of conditions pertaining to the <code><span class="codeinlineitalic">p_object_id</span></code> parameter are contravened.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="titleinrefsubsect"><a id="sthref620"></a>Ex<a id="sthref621"></a><a id="sthref622"></a>amples</p>
<p>This example invalidates a procedure created in the example in <a href="#i1003874">&#34;FORMAT_ERROR_BACKTRACE function&#34;</a>. From examining <code>user_objects</code>, you can see information for the procedures created in that example. The following describes <code>user_objects</code> then queries its contents.</p>
<pre>Command&gt; describe user_objects;
 
View SYS.USER_OBJECTS:
  Columns:
    OBJECT_NAME                     VARCHAR2 (30) INLINE
    SUBOBJECT_NAME                  VARCHAR2 (30) INLINE
    OBJECT_ID                       TT_BIGINT NOT NULL
    DATA_OBJECT_ID                  TT_BIGINT
    OBJECT_TYPE                     VARCHAR2 (17) INLINE NOT NULL
    CREATED                         DATE NOT NULL
    LAST_DDL_TIME                   DATE NOT NULL
    TIMESTAMP                       VARCHAR2 (78) INLINE NOT NULL
    STATUS                          VARCHAR2 (7) INLINE NOT NULL
    TEMPORARY                       VARCHAR2 (1) INLINE NOT NULL
    GENERATED                       VARCHAR2 (1) INLINE NOT NULL
    SECONDARY                       VARCHAR2 (1) INLINE NOT NULL
    NAMESPACE                       TT_INTEGER NOT NULL
    EDITION_NAME                    VARCHAR2 (30) INLINE
 
1 view found.
 
Command&gt; select * from user_objects;
...
&lt; LOG_ERRORS, &lt;NULL&gt;, 296, &lt;NULL&gt;, PROCEDURE, 2009-09-18 12:53:45, 2009-09-18 12
:58:22, 2009-09-18:12:58:22, VALID, N, N, N, 1, &lt;NULL&gt; &gt;
&lt; P0, &lt;NULL&gt;, 297, &lt;NULL&gt;, PROCEDURE, 2009-09-18 12:53:45, 2009-09-18 12:58:22,
2009-09-18:12:58:22, VALID, N, N, N, 1, &lt;NULL&gt; &gt;
&lt; P1, &lt;NULL&gt;, 298, &lt;NULL&gt;, PROCEDURE, 2009-09-18 12:53:45, 2009-09-18 12:58:22,
2009-09-18:12:58:22, VALID, N, N, N, 1, &lt;NULL&gt; &gt;
&lt; P2, &lt;NULL&gt;, 299, &lt;NULL&gt;, PROCEDURE, 2009-09-18 12:53:45, 2009-09-18 12:58:22,
2009-09-18:12:58:22, VALID, N, N, N, 1, &lt;NULL&gt; &gt;
&lt; P3, &lt;NULL&gt;, 300, &lt;NULL&gt;, PROCEDURE, 2009-09-18 12:53:45, 2009-09-18 12:58:22,
2009-09-18:12:58:22, VALID, N, N, N, 1, &lt;NULL&gt; &gt;
&lt; P4, &lt;NULL&gt;, 301, &lt;NULL&gt;, PROCEDURE, 2009-09-18 12:53:45, 2009-09-18 12:58:22,
2009-09-18:12:58:22, VALID, N, N, N, 1, &lt;NULL&gt; &gt;
&lt; P5, &lt;NULL&gt;, 302, &lt;NULL&gt;, PROCEDURE, 2009-09-18 12:53:45, 2009-09-18 12:58:22,
2009-09-18:12:58:22, VALID, N, N, N, 1, &lt;NULL&gt; &gt;
&lt; TOP_NAIVE, &lt;NULL&gt;, 303, &lt;NULL&gt;, PROCEDURE, 2009-09-18 12:53:45, 2009-09-18 12:
58:22, 2009-09-18:12:58:22, VALID, N, N, N, 1, &lt;NULL&gt; &gt;
&lt; TOP_WITH_LOGGING, &lt;NULL&gt;, 304, &lt;NULL&gt;, PROCEDURE, 2009-09-18 12:53:45, 2009-09
-18 15:19:16, 2009-09-18:15:19:16, VALID, N, N, N, 1, &lt;NULL&gt; &gt;
...
20 rows found.
</pre>
<p>To invalidate the <code>P5</code> procedure, for example, specify <code>object_id</code> 302 in the <code>INVALIDATE</code> call:</p>
<pre>Command&gt; begin
       &gt; dbms_utility.invalidate(302, &#39;PLSQL_OPTIMIZE_LEVEL=2 REUSE SETTINGS&#39;);
       &gt; end;
       &gt; /
</pre>
<p>This marks the <code>P5</code> procedure as invalid and sets its <code>PLSQL_OPTIMIZE_LEVEL</code> compiler setting to 2. The values of other compiler settings remain unchanged because <code>REUSE SETTINGS</code> is specified. Note that in addition to <code>P5</code> being invalidated, any PL/SQL objects that refer to that object are invalidated. Given that <code>Top_With_Logging</code> and <code>Top_Naive</code> call <code>P5</code>, here are the results of the <code>INVALIDATE</code> call, querying for all user objects that are now invalid:</p>
<pre>Command&gt; select * from user_objects where status=&#39;INVALID&#39;;
&lt; P5, &lt;NULL&gt;, 302, &lt;NULL&gt;, PROCEDURE, 2009-09-18 12:53:45, 2009-09-18 12:58:22,
2009-09-18:12:58:22, INVALID, N, N, N, 1, &lt;NULL&gt; &gt;
&lt; TOP_NAIVE, &lt;NULL&gt;, 303, &lt;NULL&gt;, PROCEDURE, 2009-09-18 12:53:45, 2009-09-18 12:
58:22, 2009-09-18:12:58:22, INVALID, N, N, N, 1, &lt;NULL&gt; &gt;
&lt; TOP_WITH_LOGGING, &lt;NULL&gt;, 304, &lt;NULL&gt;, PROCEDURE, 2009-09-18 12:53:45, 2009-09
-18 15:19:16, 2009-09-18:15:19:16, INVALID, N, N, N, 1, &lt;NULL&gt; &gt;
3 rows found.
</pre>
<p>A user can explicitly recompile and revalidate an object by calling the <code>VALIDATE</code> procedure discussed later in this chapter, or by executing <code>ALTER PROCEDURE</code>, <code>ALTER FUNCTION</code>, or <code>ALTER PACKAGE</code>, as applicable, on the object. Alternatively, each object is recompiled and revalidated automatically the next time it is executed.</p>
<a id="BJEECIBF"></a><a id="TTPLP71389"></a>
<hr/>
<h3 class="refsect2"><a id="sthref623"></a>IS_BIT_SET function</h3>
<p>This function checks the bit setting for the given bit in the given <code>RAW</code> value.</p>
<p class="titleinrefsubsect"><a id="sthref624"></a>Syntax</p>
<pre>DBMS_UTILITY.IS_BIT_SET (
   <span class="italic">r</span>       IN RAW,    
   <span class="italic">n</span>       IN NUMBER)  
  RETURN NUMBER;
</pre>
<p class="titleinrefsubsect"><a id="sthref625"></a>Parameters</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP71390"></a><a id="sthref626"></a><a id="sthref627"></a>Table 8-14 IS_BIT_SET procedure parameters</p>
<table class="cellalignment1016" title="IS_BIT_SET procedure parameters" summary="This table describes the parameters of the DBMS_UTILITY.IS_BIT_SET subprogram." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t16">Parameter</th>
<th class="cellalignment1017" id="r1c2-t16">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t16" headers="r1c1-t16">
<p><code><span class="codeinlineitalic">r</span></code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t16 r1c2-t16">
<p>Source raw</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t16" headers="r1c1-t16">
<p><code><span class="codeinlineitalic">n</span></code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t16 r1c2-t16">
<p>Which bit in <code><span class="codeinlineitalic">r</span></code> to check</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="titleinrefsubsect"><a id="sthref628"></a>Return value</p>
<p>1 if bit <code><span class="codeinlineitalic">n</span></code> in <code>RAW</code> <code><span class="codeinlineitalic">r</span></code> is set, where bits are numbered high to low with the lowest bit being bit number 1</p>
<a id="i997271"></a><a id="TTPLP71391"></a>
<hr/>
<h3 class="refsect2"><a id="sthref629"></a>NAME_RESOLVE procedure</h3>
<p>This procedure resolves the given name of the form:</p>
<pre>[[<span class="italic">a</span>.]<span class="italic">b</span>.]<span class="italic">c</span>[@<span class="italic">dblink</span>]
</pre>
<p>Where <code><span class="codeinlineitalic">a</span></code>, <code><span class="codeinlineitalic">b</span></code>, and <code><span class="codeinlineitalic">c</span></code> are SQL identifiers and <code><span class="codeinlineitalic">dblink</span></code> is a dblink, including synonym translation and authorization checking as necessary.</p>
<p>Do not use <code>@</code><code><span class="codeinlineitalic">dblink</span></code>. TimesTen does not support database links.</p>
<p class="titleinrefsubsect"><a id="sthref630"></a>Syntax</p>
<pre>DBMS_UTILITY.NAME_RESOLVE (
   <span class="italic">name</span>          IN  VARCHAR2, 
   <span class="italic">context</span>       IN  NUMBER,
   <span class="italic">schema</span>        OUT VARCHAR2, 
   <span class="italic">part1</span>         OUT VARCHAR2, 
   <span class="italic">part2</span>         OUT VARCHAR2,
   <span class="italic">dblink</span>        OUT VARCHAR2, 
   <span class="italic">part1_type</span>    OUT NUMBER, 
   <span class="italic">object_number</span> OUT NUMBER);
</pre>
<p class="titleinrefsubsect"><a id="sthref631"></a>Parameters</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP71392"></a><a id="sthref632"></a><a id="sthref633"></a>Table 8-15 NAME_RESOLVE procedure parameters</p>
<table class="cellalignment1016" title="NAME_RESOLVE procedure parameters " summary="This table describes the Parameters of DBMS_UTILITY.NAME_RESOLVE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t17">Parameter</th>
<th class="cellalignment1017" id="r1c2-t17">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t17" headers="r1c1-t17">
<p><code><span class="codeinlineitalic">name</span></code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t17 r1c2-t17">
<p>Name of the object</p>
<p>This can be of the form:</p>
<pre>[[<span class="italic">a</span>.]<span class="italic">b</span>.]<span class="italic">c</span>[@<span class="italic">dblink</span>]
</pre>
<p>Where <code><span class="codeinlineitalic">a</span></code>, <code><span class="codeinlineitalic">b</span></code>, and <code><span class="codeinlineitalic">c</span></code> are SQL identifiers and <code><span class="codeinlineitalic">dblink</span></code> is a dblink. TimesTen does not support dblinks. No syntax checking is performed on the dblink. If a dblink is specified, or if the name resolves to something with a dblink, then the object is not resolved, but the <code><span class="codeinlineitalic">schema</span></code>, <code><span class="codeinlineitalic">part1</span></code>, <code><span class="codeinlineitalic">part2</span></code>, and <code><span class="codeinlineitalic">dblink</span></code> <code>OUT</code> parameters receive values.</p>
<p>The <code><span class="codeinlineitalic">a</span></code>, <code><span class="codeinlineitalic">b</span></code> and <code><span class="codeinlineitalic">c</span></code> entries may be delimited identifiers, and may contain Globalization Support (NLS) characters, either single or multibyte.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t17" headers="r1c1-t17">
<p><code><span class="codeinlineitalic">context</span></code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t17 r1c2-t17">
<p>An integer from 0 to 9, as follows:</p>
<ul>
<li>
<p>0 - Table</p>
</li>
<li>
<p>1 - PL/SQL (for two-part names)</p>
</li>
<li>
<p>2 - Sequences</p>
</li>
<li>
<p>3 - Trigger (not applicable for TimesTen)</p>
</li>
<li>
<p>4 - Java source (not applicable for TimesTen)</p>
</li>
<li>
<p>5 - Java resource (not applicable for TimesTen)</p>
</li>
<li>
<p>6 - Java class (not applicable for TimesTen)</p>
</li>
<li>
<p>7 - Type (not applicable for TimesTen)</p>
</li>
<li>
<p>8 - Java shared data (not applicable for TimesTen)</p>
</li>
<li>
<p>9 - Index</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r4c1-t17" headers="r1c1-t17">
<p><code><span class="codeinlineitalic">schema</span></code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t17 r1c2-t17">
<p>Schema of the object, <code><span class="codeinlineitalic">c</span></code></p>
<p>If no schema is specified in <code><span class="codeinlineitalic">name</span></code>, then <code><span class="codeinlineitalic">schema</span></code> is determined by resolving the name.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r5c1-t17" headers="r1c1-t17">
<p><code><span class="codeinlineitalic">part1</span></code></p>
</td>
<td class="cellalignment1018" headers="r5c1-t17 r1c2-t17">
<p>First part of the name</p>
<p>The type of this name is specified <code><span class="codeinlineitalic">part1_type</span></code> (synonym or package).</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r6c1-t17" headers="r1c1-t17">
<p><code><span class="codeinlineitalic">part2</span></code></p>
</td>
<td class="cellalignment1018" headers="r6c1-t17 r1c2-t17">
<p>Subprogram name, as applicable, or <code>NULL</code>.</p>
<p>If <code><span class="codeinlineitalic">part1</span></code> is non-null, then the subprogram is within the package indicated by <code><span class="codeinlineitalic">part1</span></code>. If <code><span class="codeinlineitalic">part1</span></code> is null, the subprogram is a top-level subprogram.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r7c1-t17" headers="r1c1-t17">
<p><code><span class="codeinlineitalic">dblink</span></code></p>
</td>
<td class="cellalignment1018" headers="r7c1-t17 r1c2-t17">
<p>Not applicable</p>
<p>TimesTen does not support database links.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r8c1-t17" headers="r1c1-t17">
<p><code><span class="codeinlineitalic">part1_type</span></code></p>
</td>
<td class="cellalignment1018" headers="r8c1-t17 r1c2-t17">
<p>Type of <code><span class="codeinlineitalic">part1</span></code>, as follows:</p>
<ul>
<li>
<p>5 - Synonym</p>
</li>
<li>
<p>7 - Procedure (top level)</p>
</li>
<li>
<p>8 - Function (top level)</p>
</li>
<li>
<p>9 - Package</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r9c1-t17" headers="r1c1-t17">
<p><code><span class="codeinlineitalic">object_number</span></code></p>
</td>
<td class="cellalignment1018" headers="r9c1-t17 r1c2-t17">
<p>Object identifier</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="titleinrefsubsect"><a id="sthref634"></a>Exceptions</p>
<p>All errors are handled by raising exceptions. A wide variety of exceptions are possible, based on the various syntax errors that are possible when specifying object names.</p>
<a id="BJEFIFBJ"></a><a id="TTPLP71393"></a>
<hr/>
<h3 class="refsect2"><a id="sthref635"></a>NAME_TOKENIZE procedure</h3>
<p>This procedure calls the parser to parse the input name as:</p>
<pre>&#34;<span class="italic">a</span>[.<span class="italic">b</span>[.<span class="italic">c</span>]][@<span class="italic">dblink</span>]&#34;
</pre>
<p>Where <code><span class="codeinlineitalic">a</span></code>, <code><span class="codeinlineitalic">b</span></code>, and <code><span class="codeinlineitalic">c</span></code> are SQL identifiers and <code><span class="codeinlineitalic">dblink</span></code> is a dblink. It strips double quotes, or converts to uppercase if there are no quotes. It ignores comments of all sorts, and does no semantic analysis. Missing values are left as <code>NULL</code>.</p>
<p>Do not use <code>@</code><code><span class="codeinlineitalic">dblink</span></code>. TimesTen does not support database links.</p>
<p class="titleinrefsubsect"><a id="sthref636"></a>Syntax</p>
<pre>DBMS_UTILITY.NAME_TOKENIZE ( 
   <span class="italic">name</span>    IN  VARCHAR2,
   <span class="italic">a</span>       OUT VARCHAR2,
   <span class="italic">b</span>       OUT VARCHAR2,
   <span class="italic">c</span>       OUT VARCHAR2,
   <span class="italic">dblink</span>  OUT VARCHAR2, 
   <span class="italic">nextpos</span> OUT BINARY_INTEGER);
</pre>
<p class="titleinrefsubsect"><a id="sthref637"></a>Parameters</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP71639"></a><a id="sthref638"></a><a id="sthref639"></a>Table 8-16 NAME_TOKENIZE procedure parameters</p>
<table class="cellalignment1016" title="NAME_TOKENIZE procedure parameters" summary="This table describes the Parameters of DBMS_UTILITY.NAME_TOKENIZE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t18">Parameter</th>
<th class="cellalignment1017" id="r1c2-t18">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t18" headers="r1c1-t18">
<p><code><span class="codeinlineitalic">name</span></code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t18 r1c2-t18">
<p>The input name, consisting of SQL identifiers (for example, <code>scott.foo</code>)</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t18" headers="r1c1-t18">
<p><code><span class="codeinlineitalic">a</span></code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t18 r1c2-t18">
<p>Output for the first token of the name</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r4c1-t18" headers="r1c1-t18">
<p><code><span class="codeinlineitalic">b</span></code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t18 r1c2-t18">
<p>Output for the second token of the name (if applicable)</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r5c1-t18" headers="r1c1-t18">
<p><code><span class="codeinlineitalic">c</span></code></p>
</td>
<td class="cellalignment1018" headers="r5c1-t18 r1c2-t18">
<p>Output for the third token of the name (if applicable)</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r6c1-t18" headers="r1c1-t18">
<p><code><span class="codeinlineitalic">dblink</span></code></p>
</td>
<td class="cellalignment1018" headers="r6c1-t18 r1c2-t18">
<p>Output for the dblink of the name (not applicable for TimesTen)</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r7c1-t18" headers="r1c1-t18">
<p><code><span class="codeinlineitalic">nextpos</span></code></p>
</td>
<td class="cellalignment1018" headers="r7c1-t18 r1c2-t18">
<p>Next position after parsing the input name</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="titleinrefsubsect"><a id="sthref640"></a>Examples</p>
<p>Consider the following script to run in <code>ttIsql</code>:</p>
<pre>declare
   a varchar2(30);
   b varchar2(30);
   c varchar2(30);
   d varchar2(30);
   next integer;

begin
   dbms_utility.name_tokenize(&#39;scott.foo&#39;, a, b, c, d, next);
   dbms_output.put_line(&#39;a: &#39; || a);
   dbms_output.put_line(&#39;b: &#39; || b);
   dbms_output.put_line(&#39;c: &#39; || c);
   dbms_output.put_line(&#39;d: &#39; || d);
   dbms_output.put_line(&#39;next: &#39; || next);
end;
/
</pre>
<p>This produces the following output.</p>
<pre>a: SCOTT
b: FOO
c:
d:
next: 9
 
PL/SQL procedure successfully completed.
</pre>
<a id="i1002844"></a><a id="TTPLP71394"></a>
<hr/>
<h3 class="refsect2"><a id="sthref641"></a>TABLE_TO_COMMA procedure</h3>
<p>This procedure converts a PL/SQL table of names into a comma-delimited list of names. This takes a PL/SQL table, 1..<code><span class="codeinlineitalic">n</span></code>, terminated with <code><span class="codeinlineitalic">n</span></code>+1 being <code>NULL</code>. The second version supports fully qualified attribute names.</p>
<p class="titleinrefsubsect"><a id="sthref642"></a>Syntax</p>
<pre>DBMS_UTILITY.TABLE_TO_COMMA ( 
   <span class="italic">tab</span>    IN  dbms_utility.uncl_array, 
   <span class="italic">tablen</span> OUT BINARY_INTEGER,
   <span class="italic">list</span>   OUT VARCHAR2);

DBMS_UTILITY.TABLE_TO_COMMA ( 
   <span class="italic">tab</span>    IN  dbms_utility.lname_array,
   <span class="italic">tablen</span> OUT BINARY_INTEGER,
   <span class="italic">list</span>   OUT VARCHAR2);
</pre>
<p class="titleinrefsubsect"><a id="sthref643"></a>Parameters</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP71395"></a><a id="sthref644"></a><a id="sthref645"></a>Table 8-17 TABLE_TO_COMMA procedure parameters</p>
<table class="cellalignment1016" title="TABLE_TO_COMMA procedure parameters" summary="This table describes the Parameters of DBMS_UTILITY.TABLE_TO_COMMA subprogram." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t19">Parameter</th>
<th class="cellalignment1017" id="r1c2-t19">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t19" headers="r1c1-t19">
<p><code><span class="codeinlineitalic">tab</span></code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t19 r1c2-t19">
<p>PL/SQL table that contains list of table names</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t19" headers="r1c1-t19">
<p><code><span class="codeinlineitalic">tablen</span></code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t19 r1c2-t19">
<p>Number of tables in the PL/SQL table</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r4c1-t19" headers="r1c1-t19">
<p><code><span class="codeinlineitalic">list</span></code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t19 r1c2-t19">
<p>Comma-delimited list of tables</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="titleinrefsubsect"><a id="sthref646"></a>Return value</p>
<p>A <code>VARCHAR2</code> value with a comma-delimited list and the number of elements found in the table</p>
<a id="i1005273"></a><a id="TTPLP71396"></a>
<hr/>
<h3 class="refsect2"><a id="sthref647"></a>VALIDATE procedure</h3>
<p>Validates the object described either by owner, name, and namespace or by object ID.</p>
<p class="titleinrefsubsect"><a id="sthref648"></a>Syntax</p>
<pre>DBMS_UTILITY.VALIDATE(
    <span class="italic">object_id</span>     IN  NUMBER);

DBMS_UTILITY.VALIDATE(
   <span class="italic">owner</span>          IN  VARCHAR2, 
   <span class="italic">objname</span>        IN  VARCHAR2, 
   <span class="italic">namespace</span>      NUMBER,
   <span class="italic">edition_name</span>   VARCHAR2 := NULL;
</pre>
<p class="titleinrefsubsect"><a id="sthref649"></a>Parameters</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="TTPLP71397"></a><a id="sthref650"></a><a id="sthref651"></a>Table 8-18 VALIDATE procedure parameters</p>
<table class="cellalignment1016" title="VALIDATE procedure parameters" summary="This table describes the Parameters of DBMS_UTILITY.VALIDATE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1010">
<th class="cellalignment1017" id="r1c1-t20">Parameter</th>
<th class="cellalignment1017" id="r1c2-t20">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r2c1-t20" headers="r1c1-t20">
<p><code><span class="codeinlineitalic">object_id</span></code></p>
</td>
<td class="cellalignment1018" headers="r2c1-t20 r1c2-t20">
<p>ID number of the object to be validated</p>
<p>See <a href="#BABFDACJ">&#34;INVALIDATE procedure&#34;</a> for information about object IDs.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r3c1-t20" headers="r1c1-t20">
<p><code><span class="codeinlineitalic">owner</span></code></p>
</td>
<td class="cellalignment1018" headers="r3c1-t20 r1c2-t20">
<p>Name of the user who owns the object</p>
<p>Same as the <code>OWNER</code> field in <code>ALL_OBJECTS</code>.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r4c1-t20" headers="r1c1-t20">
<p><code><span class="codeinlineitalic">objname</span></code></p>
</td>
<td class="cellalignment1018" headers="r4c1-t20 r1c2-t20">
<p>Name of the object to be validated</p>
<p>Same as the <code>OBJECT_NAME</code> field in <code>ALL_OBJECTS</code>.</p>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r5c1-t20" headers="r1c1-t20">
<p><code><span class="codeinlineitalic">namespace</span></code></p>
</td>
<td class="cellalignment1018" headers="r5c1-t20 r1c2-t20">
<p>Namespace of the object</p>
<p>Same as the <code><span class="codeinlineitalic">namespace</span></code> field in <code>obj$</code>. Equivalent numeric values are as follows:</p>
<ul>
<li>
<p>1 - Table or procedure</p>
</li>
<li>
<p>2 - Body</p>
</li>
<li>
<p>3 - Trigger (not applicable for TimesTen)</p>
</li>
<li>
<p>4 - Index</p>
</li>
<li>
<p>5 - Cluster</p>
</li>
<li>
<p>9 - Directory</p>
</li>
<li>
<p>10 - Queue</p>
</li>
<li>
<p>11 - Replication object group</p>
</li>
<li>
<p>12 - Replication propagator</p>
</li>
<li>
<p>13 - Java source (not applicable for TimesTen)</p>
</li>
<li>
<p>14 - Java resource (not applicable for TimesTen)</p>
</li>
<li>
<p>58 - Model (data mining)</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1010">
<td class="cellalignment1018" id="r6c1-t20" headers="r1c1-t20">
<p><code><span class="codeinlineitalic">edition_name</span></code></p>
</td>
<td class="cellalignment1018" headers="r6c1-t20 r1c2-t20">
<p>Reserved for future use</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="titleinrefsubsect"><a id="sthref652"></a>Usage notes</p>
<ul>
<li>
<p>Executing <code>VALIDATE</code> on a subprogram also validates subprograms that it references. (See the example below.)</p>
</li>
<li>
<p>No errors are raised if the object does not exist, is already valid, or is an object that cannot be validated.</p>
</li>
<li>
<p>The <a href="#BABFDACJ">INVALIDATE procedure</a> invalidates a database object and optionally changes its PL/SQL compiler parameter settings. The object to be invalidated is specified by its <code><span class="codeinlineitalic">object_id</span></code> value.</p>
</li>
</ul>
<p class="titleinrefsubsect"><a id="sthref653"></a>Ex<a id="sthref654"></a><a id="sthref655"></a>amples</p>
<p>This example starts where the <code>INVALIDATE</code> example in <a href="#BABFDACJ">&#34;INVALIDATE procedure&#34;</a> left off. Assume <code>P5</code>, <code>Top_Naive</code>, and <code>Top_With_Logging</code> are invalid, shown as follows:</p>
<pre>Command&gt; select * from user_objects where status=&#39;INVALID&#39;;
&lt; P5, &lt;NULL&gt;, 302, &lt;NULL&gt;, PROCEDURE, 2009-09-18 12:53:45, 2009-09-18 12:58:22,
2009-09-18:12:58:22, INVALID, N, N, N, 1, &lt;NULL&gt; &gt;
&lt; TOP_NAIVE, &lt;NULL&gt;, 303, &lt;NULL&gt;, PROCEDURE, 2009-09-18 12:53:45, 2009-09-18 12:
58:22, 2009-09-18:12:58:22, INVALID, N, N, N, 1, &lt;NULL&gt; &gt;
&lt; TOP_WITH_LOGGING, &lt;NULL&gt;, 304, &lt;NULL&gt;, PROCEDURE, 2009-09-18 12:53:45, 2009-09
-18 15:19:16, 2009-09-18:15:19:16, INVALID, N, N, N, 1, &lt;NULL&gt; &gt;
3 rows found.
</pre>
<p>Validating <code>Top_With_Logging</code>, for example, also validates <code>P5</code>, because it calls <code>P5</code> (leaving only <code>Top_Naive</code> invalid):</p>
<pre>Command&gt; begin
       &gt; dbms_utility.validate(304);
       &gt; end;
       &gt; /
 
PL/SQL procedure successfully completed.
 
Command&gt; select * from user_objects where status=&#39;INVALID&#39;;
&lt; TOP_NAIVE, &lt;NULL&gt;, 303, &lt;NULL&gt;, PROCEDURE, 2009-09-18 12:53:45, 2009-09-21 11:
14:37, 2009-09-21:11:14:37, INVALID, N, N, N, 1, &lt;NULL&gt; &gt;
1 row found.
</pre></div>
<!-- class="refsect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1009">
<tr>
<td class="cellalignment1018">
<table class="cellalignment1014">
<tr>
<td class="cellalignment1013"><a href="d_sql.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1013"><a href="t_dbver.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1020">
<table class="cellalignment1012">
<tr>
<td class="cellalignment1013"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1013"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1013"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1013"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1013"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1013"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>