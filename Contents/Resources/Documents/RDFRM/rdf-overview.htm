<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-88558"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/RDF%20Semantic%20Graph%20Overview"></a><title>RDF Semantic Graph Overview</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="keywords" content="RDF Semantic Graph, overview, Resource Description Framework, semantic data, modeling, models, in the database, metadata, SEM_MODEL$ view, metadata, semantic, statements, RDF_VALUE$ table, statements, RDF_VALUE$ table, triples, duplication checking, duplicate triples, checking for, data types, for literals, literals, data types for, canonical forms, subjects, subjects, objects, objects, blank nodes, blank nodes, properties, properties, rules, rulebases, inferencing, entailments, rules indexes, virtual models, virtual, named graphs, support for, N-Triple format, TriG data format, N-QUADS data format, security considerations, security considerations, metadata tables and views for semantic data, metadata tables and views, data types for semantic data, constructors for semantic data, methods for semantic data, data types, constructors, methods, constructors for inserting, SEM_MATCH table function, queries using the SEM_MATCH table function, queries, using the SEM_MATCH table function, federated queries, SPARQL SERVICE, federated queries, Join Push Down, Join Push Down, SILENT keyword, using a proxy server with, SPARQL endpoints, accessing with HTTP Basic authentication, OLTP index compression, loading semantic data, exporting semantic data, bulk loading semantic data, staging table for bulk loading semantic data, RDF$ET_TAB table, batch loading semantic data, semantic network indexes, using, SEM_NETWORK_INDEX_INFO view, network indexes, SEM_NETWORK_INDEX_INFO view, data type indexes, steps for using, examples (Java), Java examples, OTN RDF Semantic Graph page, examples, PL/SQL, examples (PL/SQL), demo files, semantic data, demo files, Java (on Oracle Technology Network)"/>
<meta name="dcterms.created" content="2017-06-29T10:38:43Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Spatial and Graph RDF Semantic Graph Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E51611-08"/>
<meta name="dcterms.isVersionOf" content="RDFRM"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2005, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="part-concept-usage.htm" title="Previous" type="text/html"/>
<link rel="Next" href="owl-concepts.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E51611-08.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-F422BB9F-8473-4980-9D6C-848F708C10E0"></a> <span id="PAGE" style="display:none;">8/28</span> <!-- End Header -->
<a id="RDFRM100"></a>
<h1 id="RDFRM-GUID-F422BB9F-8473-4980-9D6C-848F708C10E0" class="sect1"><span class="enumeration_chapter">1</span> RDF Semantic Graph Overview</h1>
<div>
<p>This chapter describes the support in Oracle Spatial and Graph for semantic technologies, specifically Resource Description Framework (RDF) and a subset of the Web Ontology Language (OWL). These capabilities are referred to as the RDF Semantic Graph feature of Oracle Spatial and Graph. This chapter assumes that you are familiar with the major concepts associated with RDF and OWL, such as {subject, predicate, object} triples, URIs, blank nodes, plain and typed literals, and ontologies. This chapter does not explain these concepts in detail, but focuses instead on how the concepts are implemented in Oracle.</p>
<ul style="list-style-type: disc;">
<li>
<p>For an excellent explanation of RDF concepts, see the World Wide Web Consortium (W3C) <span class="italic">RDF Primer</span> at <a href="http://www.w3.org/TR/rdf-primer/" target="_blank"><code class="codeph">http://www.w3.org/TR/rdf-primer/</code></a>.</p>
</li>
<li>
<p>For information about OWL, see the <span class="italic">OWL Web Ontology Language Reference</span> at <a href="http://www.w3.org/TR/owl-ref/" target="_blank"><code class="codeph">http://www.w3.org/TR/owl-ref/</code></a>.</p>
</li>
</ul>
<p>The PL/SQL subprograms for working with semantic data are in the SEM_APIS package, which is documented in <a href="sem-apis-ref.htm#GUID-F42AB976-445A-4DCD-974C-3B9ED810E3D5">SEM_APIS Package Subprograms</a>.</p>
<p>The RDF and OWL support are features of Oracle Spatial and Graph, which must be installed for these features to be used. However, the use of RDF and OWL is not restricted to spatial data.</p>
<p>This chapter contains the following major sections:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="rdf-overview.htm#GUID-77238928-AF9C-4AF1-8833-79E994DC5506">Introduction to Oracle Semantic Technologies Support</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-02FEDB66-9AA8-4819-91E3-35F3FA02C5F7">Semantic Data Modeling</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-CE09AF8B-6296-4100-91E5-57F5C5B225F6">Semantic Data in the Database</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-6F93C56B-9007-4F37-9A8F-0ECF4AC204A5">Semantic Metadata Tables and Views</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-D7734D1A-EAC0-4581-B3CC-2E23C8F97D94">Semantic Data Types_ Constructors_ and Methods</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-71464CC4-1C03-48A4-9A4C-0E671FF8F16E">Using the SEM_MATCH Table Function to Query Semantic Data</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-65045BFA-D0FE-4720-BF68-2C45765C74E9">Loading and Exporting Semantic Data</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-159DBD08-E59E-4A16-8EA9-5B40EB964D12">Using Semantic Network Indexes</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-E0FC3EA3-9385-4D94-AB3C-72F65EDAC966">Using Data Type Indexes</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-273402FC-2C92-4B36-981A-1E8644FB7134">Managing Statistics for Semantic Models and the Semantic Network</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-7F590F2D-F382-4CD6-A95A-757010BB148F">Quick Start for Using Semantic Data</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-2A9B194C-2540-42C7-A783-4A32ADA6F1F4">Semantic Data Examples (PL/SQL and Java)</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-F1D3E26F-93C8-4770-AE73-E699177AA8AA">Software Naming Changes Since Release 11.1</a></p>
</li>
</ul>
<p>For information about OWL concepts and the Oracle Database support for OWL capabilities, see <a href="owl-concepts.htm#GUID-3EC5F30E-9175-4B7B-946C-3117BC30610A">OWL Concepts</a> .</p>
<div class="infobox-note" id="GUID-F422BB9F-8473-4980-9D6C-848F708C10E0__GUID-C34DE9CF-DB47-41EF-9611-FAD4819E5C94">
<p class="notep1">Note:</p>
<p>Before performing any operations described in this guide, you must enable RDF Semantic Graph support in the database and meet other prerequisites, as explained in <a href="enabling-rdf.htm#GUID-8B3D00C9-E2B8-4074-BE88-055DD5E157BF">Enabling RDF Semantic Graph Support</a>.</p>
</div>
</div>
<a id="RDFRM561"></a><a id="RDFRM560"></a>
<div class="props_rev_3"><a id="GUID-77238928-AF9C-4AF1-8833-79E994DC5506"></a>
<h2 id="RDFRM-GUID-77238928-AF9C-4AF1-8833-79E994DC5506" class="sect2"><span class="enumeration_section">1.1</span> Introduction to Oracle Semantic Technologies Support</h2>
<div>
<p>Oracle Database enables you to store semantic data and ontologies, to query semantic data and to perform ontology-assisted query of enterprise relational data, and to use supplied or user-defined inferencing to expand the power of querying on semantic data. <a href="rdf-overview.htm#GUID-77238928-AF9C-4AF1-8833-79E994DC5506__CHDJHFDA">Figure 1-1</a> shows how these capabilities interact.</p>
<div class="figure" id="GUID-77238928-AF9C-4AF1-8833-79E994DC5506__CHDJHFDA">
<p class="titleinfigure">Figure 1-1 Oracle Semantic Capabilities</p>
<img width="371" height="254" src="img/GUID-0DD824F0-1AC9-4277-8064-B2D7D5FBC514-default.gif" alt="Description of Figure 1-1 follows" title="Description of Figure 1-1 follows"/><br/>
<a href="img_text/GUID-0DD824F0-1AC9-4277-8064-B2D7D5FBC514-print.htm">Description of &#34;Figure 1-1 Oracle Semantic Capabilities&#34;</a></div>
<!-- class="figure" -->
<p>As shown in <a href="rdf-overview.htm#GUID-77238928-AF9C-4AF1-8833-79E994DC5506__CHDJHFDA">Figure 1-1</a>, the database contains semantic data and ontologies (RDF/OWL models), as well as traditional relational data. To load semantic data, bulk loading is the most efficient approach, although you can load data incrementally using transactional INSERT statements.</p>
<div class="infobox-note" id="GUID-77238928-AF9C-4AF1-8833-79E994DC5506__GUID-0B0C4C96-A9D1-4B89-823A-14FB2FBA9354">
<p class="notep1">Note:</p>
<p>If you want to use existing semantic data from a release before Oracle Database 11.1, the data must be upgraded as described in <a href="enabling-rdf.htm#GUID-8B3D00C9-E2B8-4074-BE88-055DD5E157BF">Enabling RDF Semantic Graph Support</a>.</p>
</div>
<p>You can query semantic data and ontologies, and you can also perform ontology-assisted queries of semantic and traditional relational data to find semantic relationships. To perform ontology-assisted queries, use the SEM_RELATED operator, which is described in <a href="owl-concepts.htm#GUID-91E180EF-CCF0-4E56-859E-D25C019A31A0">Using Semantic Operators to Query Relational Data</a>.</p>
<p>You can expand the power of queries on semantic data by using inferencing, which uses rules in rulebases. Inferencing enables you to make logical deductions based on the data and the rules. For information about using rules and rulebases for inferencing, see <a href="rdf-overview.htm#GUID-B6D8E41B-9537-42AA-9083-B16C2972964B">Inferencing: Rules and Rulebases</a>.</p>
</div>
</div>
<a id="RDFRM562"></a>
<div class="props_rev_3"><a id="GUID-02FEDB66-9AA8-4819-91E3-35F3FA02C5F7"></a>
<h2 id="RDFRM-GUID-02FEDB66-9AA8-4819-91E3-35F3FA02C5F7" class="sect2"><span class="enumeration_section">1.2</span> Semantic Data Modeling</h2>
<div>
<p>In addition to its formal semantics, semantic data has a simple data structure that is effectively modeled using a directed graph. The metadata statements are represented as triples: nodes are used to represent two parts of the triple, and the third part is represented by a directed link that describes the relationship between the nodes. The triples are stored in a semantic data network. In addition, information is maintained about specific semantic data models created by database users. A user-created <span class="bold">model</span> has a model name, and refers to triples stored in a specified table column.</p>
<p>Statements are expressed in triples: {subject or resource, predicate or property, object or value}. In this manual, {subject, property, object} is used to describe a triple, and the terms <span class="italic">statement</span> and <span class="italic">triple</span> may sometimes be used interchangeably. Each triple is a complete and unique fact about a specific domain, and can be represented by a link in a directed graph.</p>
</div>
</div>
<a id="RDFRM563"></a>
<div class="props_rev_3"><a id="GUID-CE09AF8B-6296-4100-91E5-57F5C5B225F6"></a>
<h2 id="RDFRM-GUID-CE09AF8B-6296-4100-91E5-57F5C5B225F6" class="sect2"><span class="enumeration_section">1.3</span> Semantic Data in the Database</h2>
<div>
<p>There is one universe for all semantic data stored in the database. All triples are parsed and stored in the system as entries in tables under the MDSYS schema. A triple {subject, property, object} is treated as one database object. As a result, a single document containing multiple triples results in multiple database objects.</p>
<p>All the subjects and objects of triples are mapped to nodes in a semantic data network, and properties are mapped to network links that have their start node and end node as subject and object, respectively. The possible node types are blank nodes, URIs, plain literals, and typed literals.</p>
<p>The following requirements apply to the specifications of URIs and the storage of semantic data in the database:</p>
<ul style="list-style-type: disc;">
<li>
<p>A subject must be a URI or a blank node.</p>
</li>
<li>
<p>A property must be a URI.</p>
</li>
<li>
<p>An object can be any type, such as a URI, a blank node, or a literal. (However, null values and null strings are not supported.)</p>
</li>
</ul>
</div>
<a id="RDFRM565"></a><a id="RDFRM566"></a><a id="RDFRM564"></a>
<div class="props_rev_3"><a id="GUID-A2556E81-4419-49ED-9EA0-AA7EA3BB67AE"></a>
<h3 id="RDFRM-GUID-A2556E81-4419-49ED-9EA0-AA7EA3BB67AE" class="sect3"><span class="enumeration_section">1.3.1</span> Metadata for Models</h3>
<div>
<p>The MDSYS.SEM_MODEL$ view contains information about all models defined in the database. When you create a model using the <a href="sem-apis-ref.htm#GUID-1DB639F4-9A60-47CE-B1FC-E4B805D86F2F">SEM_APIS.CREATE_SEM_MODEL</a> procedure, you specify a name for the model, as well as a table and column to hold references to the semantic data, and the system automatically generates a model ID.</p>
<p>Oracle maintains the MDSYS.SEM_MODEL$ view automatically when you create and drop models. Users should never modify this view directly. For example, do not use SQL INSERT, UPDATE, or DELETE statements with this view.</p>
<p>The MDSYS.SEM_MODEL$ view contains the columns shown in <a href="rdf-overview.htm#GUID-A2556E81-4419-49ED-9EA0-AA7EA3BB67AE__CHDDBDII" title="SEM_MODEL$ view columns">Table 1-1</a>.</p>
<div class="tblformal" id="GUID-A2556E81-4419-49ED-9EA0-AA7EA3BB67AE__CHDDBDII">
<p class="titleintable">Table 1-1 MDSYS.SEM_MODEL$ View Columns</p>
<table class="cellalignment4510" title="MDSYS.SEM_MODEL$ View Columns" summary="SEM_MODEL$ view columns">
<thead>
<tr class="cellalignment4501">
<th class="cellalignment4512" id="d5610e425">Column Name</th>
<th class="cellalignment4540" id="d5610e428">Data Type</th>
<th class="cellalignment4541" id="d5610e431">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4501">
<td class="cellalignment4515" id="d5610e436" headers="d5610e425">
<p>OWNER</p>
</td>
<td class="cellalignment4542" headers="d5610e436 d5610e428">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment4543" headers="d5610e436 d5610e431">
<p>Schema of the owner of the model.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4515" id="d5610e446" headers="d5610e425">
<p>MODEL_ID</p>
</td>
<td class="cellalignment4542" headers="d5610e446 d5610e428">
<p>NUMBER</p>
</td>
<td class="cellalignment4543" headers="d5610e446 d5610e431">
<p>Unique model ID number, automatically generated.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4515" id="d5610e456" headers="d5610e425">
<p>MODEL_NAME</p>
</td>
<td class="cellalignment4542" headers="d5610e456 d5610e428">
<p>VARCHAR2(25)</p>
</td>
<td class="cellalignment4543" headers="d5610e456 d5610e431">
<p>Name of the model.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4515" id="d5610e466" headers="d5610e425">
<p>TABLE_NAME</p>
</td>
<td class="cellalignment4542" headers="d5610e466 d5610e428">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment4543" headers="d5610e466 d5610e431">
<p>Name of the table to hold references to semantic data for the model.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4515" id="d5610e476" headers="d5610e425">
<p>COLUMN_NAME</p>
</td>
<td class="cellalignment4542" headers="d5610e476 d5610e428">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment4543" headers="d5610e476 d5610e431">
<p>Name of the column of type SDO_RDF_TRIPLE_S in the table to hold references to semantic data for the model.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4515" id="d5610e486" headers="d5610e425">
<p>MODEL_TABLESPACE_NAME</p>
</td>
<td class="cellalignment4542" headers="d5610e486 d5610e428">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment4543" headers="d5610e486 d5610e431">
<p>Name of the tablespace to be used for storing the triples for this model.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4515" id="d5610e496" headers="d5610e425">
<p>MODEL_TYPE</p>
</td>
<td class="cellalignment4542" headers="d5610e496 d5610e428">
<p>VARCHAR2(40)</p>
</td>
<td class="cellalignment4543" headers="d5610e496 d5610e431">
<p>A value indicating the type of RDF model: <code class="codeph">M</code> for regular model; <code class="codeph">V</code> for virtual model; <code class="codeph">X</code> for model created to store the contents of the semantic index; or <code class="codeph">D</code> for model created on relational data.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p><a id="d5610e518" class="indexterm-anchor"></a><a id="d5610e520" class="indexterm-anchor"></a>When you create a model, a view for the triples associated with the model is also created under the MDSYS schema. This view has a name in the format SEMM_<span class="italic">model-name</span>, and it is visible only to the owner of the model and to users with suitable privileges. Each MDSYS.SEMM_<span class="italic">model-name</span> view contains a row for each triple (stored as a link in a network), and it has the columns shown in <a href="rdf-overview.htm#GUID-A2556E81-4419-49ED-9EA0-AA7EA3BB67AE__CHDDFJCF" title="MDSYS.SEMM_model-name View Columns">Table 1-2</a>.</p>
<div class="tblformal" id="GUID-A2556E81-4419-49ED-9EA0-AA7EA3BB67AE__CHDDFJCF">
<p class="titleintable">Table 1-2 MDSYS.SEMM_model-name View Columns</p>
<table class="cellalignment4510" title="MDSYS.SEMM_model-name View Columns" summary="MDSYS.SEMM_model-name View Columns">
<thead>
<tr class="cellalignment4501">
<th class="cellalignment4528" id="d5610e547">Column Name</th>
<th class="cellalignment4544" id="d5610e550">Data Type</th>
<th class="cellalignment4545" id="d5610e553">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4501">
<td class="cellalignment4530" id="d5610e558" headers="d5610e547">
<p>P_VALUE_ID</p>
</td>
<td class="cellalignment4546" headers="d5610e558 d5610e550">
<p>NUMBER</p>
</td>
<td class="cellalignment4547" headers="d5610e558 d5610e553">
<p>The VALUE_ID for the text value of the predicate of the triple. Part of the primary key.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4530" id="d5610e568" headers="d5610e547">
<p>START_NODE_ID</p>
</td>
<td class="cellalignment4546" headers="d5610e568 d5610e550">
<p>NUMBER</p>
</td>
<td class="cellalignment4547" headers="d5610e568 d5610e553">
<p>The VALUE_ID for the text value of the subject of the triple. Also part of the primary key.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4530" id="d5610e578" headers="d5610e547">
<p>CANON_END_NODE_ID</p>
</td>
<td class="cellalignment4546" headers="d5610e578 d5610e550">
<p>NUMBER</p>
</td>
<td class="cellalignment4547" headers="d5610e578 d5610e553">
<p>The VALUE_ID for the text value of the canonical form of the object of the triple. Also part of the primary key.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4530" id="d5610e588" headers="d5610e547">
<p>END_NODE_ID</p>
</td>
<td class="cellalignment4546" headers="d5610e588 d5610e550">
<p>NUMBER</p>
</td>
<td class="cellalignment4547" headers="d5610e588 d5610e553">
<p>The VALUE_ID for the text value of the object of the triple</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4530" id="d5610e598" headers="d5610e547">
<p>MODEL_ID</p>
</td>
<td class="cellalignment4546" headers="d5610e598 d5610e550">
<p>NUMBER</p>
</td>
<td class="cellalignment4547" headers="d5610e598 d5610e553">
<p>The ID for the RDF model to which the triple belongs.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4530" id="d5610e608" headers="d5610e547">
<p>COST</p>
</td>
<td class="cellalignment4546" headers="d5610e608 d5610e550">
<p>NUMBER</p>
</td>
<td class="cellalignment4547" headers="d5610e608 d5610e553">
<p>(Reserved for future use)</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4530" id="d5610e618" headers="d5610e547">
<p>CTXT1</p>
</td>
<td class="cellalignment4546" headers="d5610e618 d5610e550">
<p>NUMBER</p>
</td>
<td class="cellalignment4547" headers="d5610e618 d5610e553">
<p>(Reserved column; can be used for fine-grained access control)</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4530" id="d5610e628" headers="d5610e547">
<p>CTXT2</p>
</td>
<td class="cellalignment4546" headers="d5610e628 d5610e550">
<p>VARCHAR2(4000)</p>
</td>
<td class="cellalignment4547" headers="d5610e628 d5610e553">
<p>(Reserved for future use)</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4530" id="d5610e638" headers="d5610e547">
<p>DISTANCE</p>
</td>
<td class="cellalignment4546" headers="d5610e638 d5610e550">
<p>NUMBER</p>
</td>
<td class="cellalignment4547" headers="d5610e638 d5610e553">
<p>(Reserved for future use)</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4530" id="d5610e648" headers="d5610e547">
<p>EXPLAIN</p>
</td>
<td class="cellalignment4546" headers="d5610e648 d5610e550">
<p>VARCHAR2(4000)</p>
</td>
<td class="cellalignment4547" headers="d5610e648 d5610e553">
<p>(Reserved for future use)</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4530" id="d5610e658" headers="d5610e547">
<p>PATH</p>
</td>
<td class="cellalignment4546" headers="d5610e658 d5610e550">
<p>VARCHAR2(4000)</p>
</td>
<td class="cellalignment4547" headers="d5610e658 d5610e553">
<p>(Reserved for future use)</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4530" id="d5610e669" headers="d5610e547">
<p>G_ID</p>
</td>
<td class="cellalignment4546" headers="d5610e669 d5610e550">
<p>NUMBER</p>
</td>
<td class="cellalignment4547" headers="d5610e669 d5610e553">
<p>The VALUE_ID for the text value of the graph name for the triple. Null indicates the default graph (see <a href="rdf-overview.htm#GUID-5409C3FE-2DF1-4D95-BF90-6FF8424D3A21">Named Graphs</a>).</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4530" id="d5610e683" headers="d5610e547">
<p>LINK_ID</p>
</td>
<td class="cellalignment4546" headers="d5610e683 d5610e550">
<p>VARCHAR2(71)</p>
</td>
<td class="cellalignment4547" headers="d5610e683 d5610e553">
<p>Unique triple identifier value. (It is currently a computed column, and its definition may change in a future release.)</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<div class="infobox-note" id="GUID-A2556E81-4419-49ED-9EA0-AA7EA3BB67AE__GUID-468BDF4D-D3BB-418C-A4A7-A6FA17CF36B4">
<p class="notep1">Note:</p>
<p>In <a href="rdf-overview.htm#GUID-A2556E81-4419-49ED-9EA0-AA7EA3BB67AE__CHDDFJCF" title="MDSYS.SEMM_model-name View Columns">Table 1-2</a>, for columns P_VALUE_ID, START_NODE_ID, END_NODE_ID, CANON_END_NODE_ID, and G_ID, the actual ID values are computed from the corresponding lexical values. However, a lexical value may not always map to the same ID value.</p>
</div>
</div>
</div>
<a id="RDFRM568"></a><a id="RDFRM567"></a>
<div class="props_rev_3"><a id="GUID-F7D6E792-CFF4-4183-AECE-3CF4A3332D9E"></a>
<h3 id="RDFRM-GUID-F7D6E792-CFF4-4183-AECE-3CF4A3332D9E" class="sect3"><span class="enumeration_section">1.3.2</span> Statements</h3>
<div>
<p>The MDSYS.RDF_VALUE$ table contains information about the subjects, properties, and objects used to represent RDF statements. It uniquely stores the text values (URIs or literals) for these three pieces of information, using a separate row for each part of each triple.</p>
<p>Oracle maintains the MDSYS.RDF_VALUE$ table automatically. Users should never modify this view directly. For example, do not use SQL INSERT, UPDATE, or DELETE statements with this view.</p>
<p>The RDF_VALUE$ table contains the columns shown in <a href="rdf-overview.htm#GUID-F7D6E792-CFF4-4183-AECE-3CF4A3332D9E__CHDBFGII" title="RDF_VALUE$ table columns">Table 1-3</a>.</p>
<div class="tblformal" id="GUID-F7D6E792-CFF4-4183-AECE-3CF4A3332D9E__CHDBFGII">
<p class="titleintable">Table 1-3 MDSYS.RDF_VALUE$ Table Columns</p>
<table class="cellalignment4510" title="MDSYS.RDF_VALUE$ Table Columns" summary="RDF_VALUE$ table columns">
<thead>
<tr class="cellalignment4501">
<th class="cellalignment4511" id="d5610e772">Column Name</th>
<th class="cellalignment4512" id="d5610e775">Data Type</th>
<th class="cellalignment4513" id="d5610e778">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e783" headers="d5610e772">
<p>VALUE_ID</p>
</td>
<td class="cellalignment4515" headers="d5610e783 d5610e775">
<p>NUMBER</p>
</td>
<td class="cellalignment4516" headers="d5610e783 d5610e778">
<p>Unique value ID number, automatically generated.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e793" headers="d5610e772">
<p>VALUE_TYPE</p>
</td>
<td class="cellalignment4515" headers="d5610e793 d5610e775">
<p>VARCHAR2(10)</p>
</td>
<td class="cellalignment4516" headers="d5610e793 d5610e778">
<p>The type of text information stored in the VALUE_NAME column. Possible values: <code class="codeph">UR</code> for URI, <code class="codeph">BN</code> for blank node, <code class="codeph">PL</code> for plain literal, <code class="codeph">PL@</code> for plain literal with a language tag, <code class="codeph">PLL</code> for plain long literal, <code class="codeph">PLL@</code> for plain long literal with a language tag, <code class="codeph">TL</code> for typed literal, or <code class="codeph">TLL</code> for typed long literal. A long literal is a literal with more than 4000 bytes.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e828" headers="d5610e772">
<p>VNAME_PREFIX</p>
</td>
<td class="cellalignment4515" headers="d5610e828 d5610e775">
<p>VARCHAR2(4000)</p>
</td>
<td class="cellalignment4516" headers="d5610e828 d5610e778">
<p>If the length of the lexical value is 4000 bytes or less, this column stores a prefix of a portion of the lexical value. The <a href="sem-apis-ref.htm#GUID-4F70F393-A2BA-4112-8DA9-F2BEEF60A18B">SEM_APIS.VALUE_NAME_PREFIX</a> function can be used for prefix computation. For example, the prefix for the portion of the lexical value <code class="codeph">&lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt;</code> without the angle brackets is <code class="codeph">http://www.w3.org/1999/02/22-rdf-syntax-ns#</code>.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e848" headers="d5610e772">
<p>VNAME_SUFFIX</p>
</td>
<td class="cellalignment4515" headers="d5610e848 d5610e775">
<p>VARCHAR2(512)</p>
</td>
<td class="cellalignment4516" headers="d5610e848 d5610e778">
<p>If the length of the lexical value is 4000 bytes or less, this column stores a suffix of a portion of the lexical value. The <a href="sem-apis-ref.htm#GUID-500A4B04-AAED-4179-A313-520EFDB9F52A">SEM_APIS.VALUE_NAME_SUFFIX</a> function can be used for suffix computation. For the lexical value mentioned in the description of the VNAME_PREFIX column, the suffix is <code class="codeph">type</code>.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e865" headers="d5610e772">
<p>LITERAL_TYPE</p>
</td>
<td class="cellalignment4515" headers="d5610e865 d5610e775">
<p>VARCHAR2(4000)</p>
</td>
<td class="cellalignment4516" headers="d5610e865 d5610e778">
<p>For typed literals, the type information; otherwise, null. For example, for a row representing a creation date of 1999-08-16, the VALUE_TYPE column can contain <code class="codeph">TL</code>, and the LITERAL_TYPE column can contain <code class="codeph">http://www.w3.org/2001/XMLSchema#date</code>.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e881" headers="d5610e772">
<p>LANGUAGE_TYPE</p>
</td>
<td class="cellalignment4515" headers="d5610e881 d5610e775">
<p>VARCHAR2(80)</p>
</td>
<td class="cellalignment4516" headers="d5610e881 d5610e778">
<p>Language tag (for example, <code class="codeph">fr</code> for French) for a literal with a language tag (that is, if VALUE_TYPE is <code class="codeph">PL@</code> or <code class="codeph">PLL@</code>). Otherwise, this column has a null value.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e900" headers="d5610e772">
<p>CANON_ID</p>
</td>
<td class="cellalignment4515" headers="d5610e900 d5610e775">
<p>NUMBER</p>
</td>
<td class="cellalignment4516" headers="d5610e900 d5610e778">
<p>The ID for the canonical lexical value for the current lexical value. (The use of this column may change in a future release.)</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e910" headers="d5610e772">
<p>COLLISION_EXT</p>
</td>
<td class="cellalignment4515" headers="d5610e910 d5610e775">
<p>VARCHAR2(64)</p>
</td>
<td class="cellalignment4516" headers="d5610e910 d5610e778">
<p>Used for collision handling for the lexical value. (The use of this column may change in a future release.)</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e920" headers="d5610e772">
<p>CANON_COLLISION_EXT</p>
</td>
<td class="cellalignment4515" headers="d5610e920 d5610e775">
<p>VARCHAR2(64)</p>
</td>
<td class="cellalignment4516" headers="d5610e920 d5610e778">
<p>Used for collision handling for the canonical lexical value. (The use of this column may change in a future release.)</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e930" headers="d5610e772">
<p>LONG_VALUE</p>
</td>
<td class="cellalignment4515" headers="d5610e930 d5610e775">
<p>CLOB</p>
</td>
<td class="cellalignment4516" headers="d5610e930 d5610e778">
<p>The character string if the length of the lexical value is greater than 4000 bytes. Otherwise, this column has a null value.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e940" headers="d5610e772">
<p>VALUE_NAME</p>
</td>
<td class="cellalignment4515" headers="d5610e940 d5610e775">
<p>VARCHAR2(4000)</p>
</td>
<td class="cellalignment4516" headers="d5610e940 d5610e778">
<p>This is a computed column. If length of the lexical value is 4000 bytes or less, the value of this column is the concatenation of the values of VNAME_PREFIX column and the VNAME_SUFFIX column.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<a id="RDFRM569"></a>
<div class="props_rev_3"><a id="GUID-37A361D9-0605-43F1-9830-037BD3218B60"></a>
<h4 id="RDFRM-GUID-37A361D9-0605-43F1-9830-037BD3218B60" class="sect4"><span class="enumeration_section">1.3.2.1</span> Triple Uniqueness and Data Types for Literals</h4>
<div>
<p>Duplicate triples are not stored in the database. To check if a triple is a duplicate of an existing triple, the subject, property, and object of the incoming triple are checked against triple values in the specified model. If the incoming subject, property, and object are all URIs, an exact match of their values determines a duplicate. However, if the object of incoming triple is a literal, an exact match of the subject and property, and a value (canonical) match of the object, determine a duplicate. For example, the following two triples are duplicates:</p>
<pre dir="ltr">&lt;eg:a&gt; &lt;eg:b&gt; &lt;&#34;123&#34;^^http://www.w3.org/2001/XMLSchema#int&gt;
&lt;eg:a&gt; &lt;eg:b&gt; &lt;&#34;123&#34;^^http://www.w3.org/2001/XMLSchema#unsignedByte&gt;
</pre>
<p>The second triple is treated as a duplicate of the first, because <code class="codeph">&#34;123&#34;^^&lt;http://www.w3.org/2001/XMLSchema#int&gt;</code> has an equivalent value (is canonically equivalent) to <code class="codeph">&#34;123&#34;^^&lt;http://www.w3.org/2001/XMLSchema#unsignedByte&gt;</code>. Two entities are canonically equivalent if they can be reduced to the same value.</p>
<p>To use a non-RDF example, <code class="codeph">A*(B-C)</code>, <code class="codeph">A*B-C*A</code>, <code class="codeph">(B-C)*A</code>, and <code class="codeph">-A*C+A*B</code> all convert into the same canonical form.</p>
<div class="infobox-note" id="GUID-37A361D9-0605-43F1-9830-037BD3218B60__GUID-FA4CFDC4-AE5E-4F39-8B9F-4BA6A4094582">
<p class="notep1">Note:</p>
<p>Although duplicate triples and quads are not stored in the underlying table partition for the MDSYS.RDFM_<span class="italic">&lt;model&gt;</span> view, it is possible to have duplicate rows in an application table. For example, if a triple is inserted multiple times into an application table, it will appear once in the MDSYS.RDFM_<span class="italic">&lt;model&gt;</span> view, but will occupy multiple rows in the application table.</p>
</div>
<p>Value-based matching of lexical forms is supported for the following data types:</p>
<ul style="list-style-type: disc;">
<li>
<p>STRING: plain literal, xsd:string and some of its XML Schema subtypes</p>
</li>
<li>
<p>NUMERIC: xsd:decimal and its XML Schema subtypes, xsd:float, and xsd:double. (Support is not provided for float/double INF, -INF, and NaN values.)</p>
</li>
<li>
<p>DATETIME: xsd:datetime, with support for time zone. (Without time zone there are still multiple representations for a single value, for example, <code class="codeph">&#34;2004-02-18T15:12:54&#34;</code> and <code class="codeph">&#34;2004-02-18T15:12:54.0000&#34;</code>.)</p>
</li>
<li>
<p>DATE: xsd:date, with or without time zone</p>
</li>
<li>
<p>OTHER: Everything else. (No attempt is made to match different representations).</p>
</li>
</ul>
<p>Canonicalization is performed when the time zone is present for literals of type xsd:time and xsd:dateTime.</p>
<p>The following namespace definition is used: <code class="codeph">xmlns:xsd=&#34;http://www.w3.org/2001/XMLSchema&#34;</code></p>
<p>The first occurrence of a literal in the RDF_VALUE$ table is taken as the canonical form and given the VALUE_TYPE value of <code class="codeph">CPL</code>, <code class="codeph">CPL@</code>, <code class="codeph">CTL</code>, <code class="codeph">CPLL</code>, <code class="codeph">CPLL@</code>, or <code class="codeph">CTLL</code> as appropriate; that is, a <code class="codeph">C</code> for canonical is prefixed to the actual value type. If a literal with the same canonical form (but a different lexical representation) as a previously inserted literal is inserted into the RDF_VALUE$ table, the VALUE_TYPE value assigned to the new insert is <code class="codeph">PL</code>, <code class="codeph">PL@</code>, <code class="codeph">TL</code>, <code class="codeph">PLL</code>, <code class="codeph">PLL@</code>, or <code class="codeph">TLL</code> as appropriate.</p>
<p>Canonically equivalent text values having different lexical representations are thus stored in the RDF_VALUE$ table; however, canonically equivalent triples are not stored in the database.</p>
</div>
</div>
</div>
<a id="RDFRM570"></a>
<div class="props_rev_3"><a id="GUID-47085C50-0C42-4025-A8E8-B97DC8403845"></a>
<h3 id="RDFRM-GUID-47085C50-0C42-4025-A8E8-B97DC8403845" class="sect3"><span class="enumeration_section">1.3.3</span> Subjects and Objects</h3>
<div>
<p>RDF subjects and objects are mapped to nodes in a semantic data network. Subject nodes are the start nodes of links, and object nodes are the end nodes of links. Non-literal nodes (that is, URIs and blank nodes) can be used as both subject and object nodes. Literals can be used only as object nodes.</p>
</div>
</div>
<a id="RDFRM571"></a>
<div class="props_rev_3"><a id="GUID-E7C6F130-ECC6-4718-A707-9DFEB46993AE"></a>
<h3 id="RDFRM-GUID-E7C6F130-ECC6-4718-A707-9DFEB46993AE" class="sect3"><span class="enumeration_section">1.3.4</span> Blank Nodes</h3>
<div>
<p>Blank nodes can be used as subject and object nodes in the semantic network. Blank node identifiers are different from URIs in that they are scoped within a semantic model. Thus, although multiple occurrences of the same blank node identifier within a single semantic model necessarily refer to the same resource, occurrences of the same blank node identifier in two different semantic models do not refer to the same resource.</p>
<p>In an Oracle semantic network, this behavior is modeled by requiring that blank nodes are always reused (that is, are used to represent the same resource if the same blank node identifier is used) within a semantic model, and never reused between two different models. Thus, when inserting triples involving blank nodes into a model, you must use the SDO_RDF_TRIPLE_S constructor that supports reuse of blank nodes.</p>
</div>
</div>
<a id="RDFRM572"></a>
<div class="props_rev_3"><a id="GUID-1CF84655-13A9-4577-B758-C1E0F65C581E"></a>
<h3 id="RDFRM-GUID-1CF84655-13A9-4577-B758-C1E0F65C581E" class="sect3"><span class="enumeration_section">1.3.5</span> Properties</h3>
<div>
<p>Properties are mapped to links that have their start node and end node as subjects and objects, respectively. Therefore, a link represents a complete triple.</p>
<p>When a triple is inserted into a model, the subject, property, and object text values are checked to see if they already exist in the database. If they already exist (due to previous statements in other models), no new entries are made; if they do not exist, three new rows are inserted into the RDF_VALUE$ table (described in <a href="rdf-overview.htm#GUID-F7D6E792-CFF4-4183-AECE-3CF4A3332D9E">Statements</a>).</p>
</div>
</div>
<a id="RDFRM574"></a><a id="RDFRM575"></a><a id="RDFRM576"></a><a id="RDFRM577"></a><a id="RDFRM578"></a><a id="RDFRM573"></a>
<div class="props_rev_3"><a id="GUID-B6D8E41B-9537-42AA-9083-B16C2972964B"></a>
<h3 id="RDFRM-GUID-B6D8E41B-9537-42AA-9083-B16C2972964B" class="sect3"><span class="enumeration_section">1.3.6</span> Inferencing: Rules and Rulebases</h3>
<div>
<p>Inferencing is the ability to make logical deductions based on rules. Inferencing enables you to construct queries that perform semantic matching based on meaningful relationships among pieces of data, as opposed to just syntactic matching based on string or other values. Inferencing involves the use of rules, either supplied by Oracle or user-defined, placed in rulebases.</p>
<p><a href="rdf-overview.htm#GUID-B6D8E41B-9537-42AA-9083-B16C2972964B__CHDJBHEB">Figure 1-2</a> shows triple sets being inferred from model data and the application of rules in one or more rulebases. In this illustration, the database can have any number of semantic models, rulebases, and inferred triple sets, and an inferred triple set can be derived using rules in one or more rulebases.</p>
<div class="figure" id="GUID-B6D8E41B-9537-42AA-9083-B16C2972964B__CHDJBHEB">
<p class="titleinfigure">Figure 1-2 Inferencing</p>
<img width="326" height="186" src="img/GUID-1DCB87E3-CBD6-4D15-8D16-96B271D55125-default.gif" alt="Description of Figure 1-2 follows" title="Description of Figure 1-2 follows"/><br/>
<a href="img_text/GUID-1DCB87E3-CBD6-4D15-8D16-96B271D55125-print.htm">Description of &#34;Figure 1-2 Inferencing&#34;</a></div>
<!-- class="figure" -->
<p>A <span class="bold">rule</span> is an object that can be applied to draw inferences from semantic data. A rule is identified by a name and consists of:</p>
<ul style="list-style-type: disc;">
<li>
<p>An IF side pattern for the antecedents</p>
</li>
<li>
<p>An optional filter condition that further restricts the subgraphs matched by the IF side pattern</p>
</li>
<li>
<p>A THEN side pattern for the consequents</p>
</li>
</ul>
<p>For example, the rule that <span class="italic">a chairperson of a conference is also a reviewer of the conference</span> could be represented as follows:</p>
<pre dir="ltr">(&#39;chairpersonRule&#39;, -- rule name
 &#39;(?r :ChairPersonOf ?c)&#39;, -- IF side pattern
 NULL,  -- filter condition
 &#39;(?r :ReviewerOf ?c)&#39;, -- THEN side pattern
 SEM_ALIASES (SEM_ALIAS(&#39;&#39;, &#39;http://some.org/test/&#39;))
)
</pre>
<p>In this case, the rule does not have a filter condition, so that component of the representation is NULL. For best performance, use a single-triple pattern on the THEN side of the rule. If a rule has multiple triple patterns on the THEN side, you can easily break it into multiple rules, each with a single-triple pattern, on the THEN side.</p>
<p>A <span class="bold">rulebase</span> is an object that contains rules. <a id="d5610e1362" class="indexterm-anchor"></a><a id="d5610e1366" class="indexterm-anchor"></a><a id="d5610e1370" class="indexterm-anchor"></a><a id="d5610e1372" class="indexterm-anchor"></a>The following Oracle-supplied rulebases are provided:</p>
<ul style="list-style-type: disc;">
<li>
<p>RDFS</p>
</li>
<li>
<p>RDF (a subset of RDFS)</p>
</li>
<li>
<p>OWLSIF (empty)</p>
</li>
<li>
<p>RDFS++ (empty)</p>
</li>
<li>
<p>OWL2RL (empty)</p>
</li>
<li>
<p>OWLPrime (empty)</p>
</li>
<li>
<p>SKOSCORE (empty)</p>
</li>
</ul>
<p>The RDFS and RDF rulebases are created when you call the <a href="sem-apis-ref.htm#GUID-7E0EAF3F-C5A5-4E02-8736-8280ABA35214">SEM_APIS.CREATE_SEM_NETWORK</a> procedure to add RDF support to the database. The RDFS rulebase implements the RDFS entailment rules, as described in the World Wide Web Consortium (W3C) <span class="italic">RDF Semantics</span> document at <a href="http://www.w3.org/TR/rdf-mt/" target="_blank"><code class="codeph">http://www.w3.org/TR/rdf-mt/</code></a>. The RDF rulebase represents the RDF entailment rules, which are a subset of the RDFS entailment rules. You can see the contents of these rulebases by examining the MDSYS.SEMR_RDFS and MDSYS.SEMR_RDF views.</p>
<p>You can also create user-defined rulebases using the <a href="sem-apis-ref.htm#GUID-B416E056-2D9B-4FAB-92D4-9C25CCB6C43A">SEM_APIS.CREATE_RULEBASE</a> procedure. User-defined rulebases enable you to provide additional specialized inferencing capabilities.</p>
<p><a id="d5610e1419" class="indexterm-anchor"></a><a id="d5610e1421" class="indexterm-anchor"></a>For each rulebase, a system table is created to hold rules in the rulebase, along with a system view with a name in the format MDSYS.SEMR_<span class="italic">rulebase-name</span> (for example, <span>MDSYS.SEMR_FAMILY_RB</span> for a rulebase named <code class="codeph">FAMILY_RB</code>). You must use this view to insert, delete, and modify rules in the rulebase. Each MDSYS.SEMR_<span class="italic">rulebase-name</span> view has the columns shown in <a href="rdf-overview.htm#GUID-B6D8E41B-9537-42AA-9083-B16C2972964B__CHDFDCHJ" title="SEMR_rulebase-name view columns">Table 1-4</a>.</p>
<div class="tblformal" id="GUID-B6D8E41B-9537-42AA-9083-B16C2972964B__CHDFDCHJ">
<p class="titleintable">Table 1-4 MDSYS.SEMR_rulebase-name View Columns</p>
<table class="cellalignment4510" title="MDSYS.SEMR_rulebase-name View Columns" summary="SEMR_rulebase-name view columns">
<thead>
<tr class="cellalignment4501">
<th class="cellalignment4511" id="d5610e1455">Column Name</th>
<th class="cellalignment4512" id="d5610e1458">Data Type</th>
<th class="cellalignment4513" id="d5610e1461">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e1466" headers="d5610e1455">
<p>RULE_NAME</p>
</td>
<td class="cellalignment4515" headers="d5610e1466 d5610e1458">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment4516" headers="d5610e1466 d5610e1461">
<p>Name of the rule</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e1476" headers="d5610e1455">
<p>ANTECEDENTS</p>
</td>
<td class="cellalignment4515" headers="d5610e1476 d5610e1458">
<p>VARCHAR2(4000)</p>
</td>
<td class="cellalignment4516" headers="d5610e1476 d5610e1461">
<p>IF side pattern for the antecedents</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e1486" headers="d5610e1455">
<p>FILTER</p>
</td>
<td class="cellalignment4515" headers="d5610e1486 d5610e1458">
<p>VARCHAR2(4000)</p>
</td>
<td class="cellalignment4516" headers="d5610e1486 d5610e1461">
<p>Filter condition that further restricts the subgraphs matched by the IF side pattern. Null indicates no filter condition is to be applied.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e1496" headers="d5610e1455">
<p>CONSEQUENTS</p>
</td>
<td class="cellalignment4515" headers="d5610e1496 d5610e1458">
<p>VARCHAR2(4000)</p>
</td>
<td class="cellalignment4516" headers="d5610e1496 d5610e1461">
<p>THEN side pattern for the consequents</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e1506" headers="d5610e1455">
<p>ALIASES</p>
</td>
<td class="cellalignment4515" headers="d5610e1506 d5610e1458">
<p>SEM_ALIASES</p>
</td>
<td class="cellalignment4516" headers="d5610e1506 d5610e1461">
<p>One or more namespaces to be used. (The SEM_ALIASES data type is described in <a href="rdf-overview.htm#GUID-71464CC4-1C03-48A4-9A4C-0E671FF8F16E">Using the SEM_MATCH Table Function to Query Semantic Data</a>.)</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p><a id="d5610e1520" class="indexterm-anchor"></a><a id="d5610e1522" class="indexterm-anchor"></a>Information about all rulebases is maintained in the MDSYS.SEM_RULEBASE_INFO view, which has the columns shown in <a href="rdf-overview.htm#GUID-B6D8E41B-9537-42AA-9083-B16C2972964B__CHDIDJBF" title="SEM_RULEBASE_INFO view columns">Table 1-5</a> and one row for each rulebase.</p>
<div class="tblformal" id="GUID-B6D8E41B-9537-42AA-9083-B16C2972964B__CHDIDJBF">
<p class="titleintable">Table 1-5 MDSYS.SEM_RULEBASE_INFO View Columns</p>
<table class="cellalignment4510" title="MDSYS.SEM_RULEBASE_INFO View Columns" summary="SEM_RULEBASE_INFO view columns">
<thead>
<tr class="cellalignment4501">
<th class="cellalignment4511" id="d5610e1543">Column Name</th>
<th class="cellalignment4512" id="d5610e1546">Data Type</th>
<th class="cellalignment4513" id="d5610e1549">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e1554" headers="d5610e1543">
<p>OWNER</p>
</td>
<td class="cellalignment4515" headers="d5610e1554 d5610e1546">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment4516" headers="d5610e1554 d5610e1549">
<p>Owner of the rulebase</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e1564" headers="d5610e1543">
<p>RULEBASE_NAME</p>
</td>
<td class="cellalignment4515" headers="d5610e1564 d5610e1546">
<p>VARCHAR2(25)</p>
</td>
<td class="cellalignment4516" headers="d5610e1564 d5610e1549">
<p>Name of the rulebase</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e1574" headers="d5610e1543">
<p>RULEBASE_VIEW_NAME</p>
</td>
<td class="cellalignment4515" headers="d5610e1574 d5610e1546">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment4516" headers="d5610e1574 d5610e1549">
<p>Name of the view that you must use for any SQL statements that insert, delete, or modify rules in the rulebase</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e1584" headers="d5610e1543">
<p>STATUS</p>
</td>
<td class="cellalignment4515" headers="d5610e1584 d5610e1546">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment4516" headers="d5610e1584 d5610e1549">
<p>Contains <code class="codeph">VALID</code> if the rulebase is valid, <code class="codeph">INPROGRESS</code> if the rulebase is being created, or <code class="codeph">FAILED</code> if a system failure occurred during the creation of the rulebase.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<div class="example" id="GUID-B6D8E41B-9537-42AA-9083-B16C2972964B__CHDEBEGA">
<p class="titleinexample">Example 1-1 Inserting a Rule into a Rulebase</p>
<p><a href="rdf-overview.htm#GUID-B6D8E41B-9537-42AA-9083-B16C2972964B__CHDEBEGA">Example 1-1</a> creates a rulebase named <code class="codeph">family_rb</code>, and then inserts a rule named <code class="codeph">grandparent_rule</code> into the <code class="codeph">family_rb</code> rulebase. This rule says that if a person is the parent of a child who is the parent of a child, that person is a grandparent of (that is, has the <code class="codeph">grandParentOf</code> relationship with respect to) his or her child&#39;s child. It also specifies a namespace to be used. (This example is an excerpt from <a href="rdf-overview.htm#GUID-ADC458F4-570C-4081-8844-107F9F63E915__CHDGCDGI">Example 1-90</a> in <a href="rdf-overview.htm#GUID-ADC458F4-570C-4081-8844-107F9F63E915">Example: Family Information</a>.)</p>
<pre dir="ltr">EXECUTE SEM_APIS.CREATE_RULEBASE(&#39;family_rb&#39;);

INSERT INTO mdsys.semr_family_rb VALUES(
  &#39;grandparent_rule&#39;,
  &#39;(?x :parentOf ?y) (?y :parentOf ?z)&#39;,
  NULL,
  &#39;(?x :grandParentOf ?z)&#39;, 
  SEM_ALIASES(SEM_ALIAS(&#39;&#39;,&#39;http://www.example.org/family/&#39;)));
</pre>
<p>Note that the kind of grandparent rule shown in <a href="rdf-overview.htm#GUID-B6D8E41B-9537-42AA-9083-B16C2972964B__CHDEBEGA">Example 1-1</a> can be implemented using the OWL 2 property chain construct. For information about property chain handling, see <a href="skos.htm#GUID-07A2DF29-AAE0-42F6-9B65-32F896E8260E">Property Chain Handling</a>.</p>
</div>
<!-- class="example" -->
<div class="example" id="GUID-B6D8E41B-9537-42AA-9083-B16C2972964B__CHDECGII">
<p class="titleinexample">Example 1-2 Using Rulebases for Inferencing</p>
<p>You can specify one or more rulebases when calling the SEM_MATCH table function (described in <a href="rdf-overview.htm#GUID-71464CC4-1C03-48A4-9A4C-0E671FF8F16E">Using the SEM_MATCH Table Function to Query Semantic Data</a>), to control the behavior of queries against semantic data. <a href="rdf-overview.htm#GUID-B6D8E41B-9537-42AA-9083-B16C2972964B__CHDECGII">Example 1-2</a> refers to the <code class="codeph">family_rb</code> rulebase and to the <code class="codeph">grandParentOf</code> relationship created in <a href="rdf-overview.htm#GUID-B6D8E41B-9537-42AA-9083-B16C2972964B__CHDEBEGA">Example 1-1</a>, to find all grandfathers (grandparents who are male) and their grandchildren. (This example is an excerpt from <a href="rdf-overview.htm#GUID-ADC458F4-570C-4081-8844-107F9F63E915__CHDGCDGI">Example 1-90</a> in <a href="rdf-overview.htm#GUID-ADC458F4-570C-4081-8844-107F9F63E915">Example: Family Information</a>.)</p>
<pre dir="ltr">-- Select all grandfathers and their grandchildren from the family model.
-- Use inferencing from both the RDFS and family_rb rulebases.
SELECT x, y
  FROM TABLE(SEM_MATCH(
    &#39;{?x :grandParentOf ?y . ?x rdf:type :Male}&#39;,
    SEM_Models(&#39;family&#39;),
    SEM_Rulebases(&#39;RDFS&#39;,&#39;family_rb&#39;), 
    SEM_ALIASES(SEM_ALIAS(&#39;&#39;,&#39;http://www.example.org/family/&#39;)),
    null));
</pre>
<p>For information about support for native OWL inferencing, see <a href="owl-concepts.htm#GUID-30145814-CB5E-45ED-B220-677515F91AA9">Using OWL Inferencing</a>.</p>
</div>
<!-- class="example" --></div>
</div>
<a id="RDFRM580"></a><a id="RDFRM581"></a><a id="RDFRM582"></a><a id="RDFRM579"></a>
<div class="props_rev_3"><a id="GUID-AE3CFE93-13CF-444E-9523-0693572851E7"></a>
<h3 id="RDFRM-GUID-AE3CFE93-13CF-444E-9523-0693572851E7" class="sect3"><span class="enumeration_section">1.3.7</span> Entailments (Rules Indexes)</h3>
<div>
<p>An <span class="bold">entailment</span> (rules index) is an object containing precomputed triples that can be inferred from applying a specified set of rulebases to a specified set of models. If a SEM_MATCH query refers to any rulebases, an entailment must exist for each rulebase-model combination in the query.</p>
<p>To create an entailment, use the <a href="sem-apis-ref.htm#GUID-BF52CEC0-1BD9-4908-9EF1-F001B0527257">SEM_APIS.CREATE_ENTAILMENT</a> procedure. To drop (delete) an entailment, use the <a href="sem-apis-ref.htm#GUID-F316F158-52B0-46E7-806E-B2CF0AD90676">SEM_APIS.DROP_ENTAILMENT</a> procedure.</p>
<p><a id="d5610e1735" class="indexterm-anchor"></a><a id="d5610e1737" class="indexterm-anchor"></a>When you create an entailment, a view for the triples associated with the entailment is also created under the MDSYS schema. This view has a name in the format SEMI_<span class="italic">entailment-name</span>, and it is visible only to the owner of the entailment and to users with suitable privileges. Each MDSYS.SEMI_<span class="italic">entailment-name</span> view contains a row for each triple (stored as a link in a network), and it has the same columns as the SEMM_<span class="italic">model-name</span> view, which is described in <a href="rdf-overview.htm#GUID-A2556E81-4419-49ED-9EA0-AA7EA3BB67AE__CHDDFJCF" title="MDSYS.SEMM_model-name View Columns">Table 1-2</a> in <a href="rdf-overview.htm#GUID-A2556E81-4419-49ED-9EA0-AA7EA3BB67AE">Metadata for Models</a>.</p>
<p><a id="d5610e1762" class="indexterm-anchor"></a><a id="d5610e1764" class="indexterm-anchor"></a>Information about all entailments is maintained in the MDSYS.SEM_RULES_INDEX_INFO view, which has the columns shown in <a href="rdf-overview.htm#GUID-AE3CFE93-13CF-444E-9523-0693572851E7__CHDFBHGJ" title="SEM_RULES_INDEX_INFO view columns">Table 1-6</a> and one row for each entailment.</p>
<div class="tblformal" id="GUID-AE3CFE93-13CF-444E-9523-0693572851E7__CHDFBHGJ">
<p class="titleintable">Table 1-6 MDSYS.SEM_RULES_INDEX_INFO View Columns</p>
<table class="cellalignment4510" title="MDSYS.SEM_RULES_INDEX_INFO View Columns" summary="SEM_RULES_INDEX_INFO view columns">
<thead>
<tr class="cellalignment4501">
<th class="cellalignment4511" id="d5610e1785">Column Name</th>
<th class="cellalignment4512" id="d5610e1788">Data Type</th>
<th class="cellalignment4513" id="d5610e1791">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e1796" headers="d5610e1785">
<p>OWNER</p>
</td>
<td class="cellalignment4515" headers="d5610e1796 d5610e1788">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment4516" headers="d5610e1796 d5610e1791">
<p>Owner of the entailment</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e1806" headers="d5610e1785">
<p>INDEX_NAME</p>
</td>
<td class="cellalignment4515" headers="d5610e1806 d5610e1788">
<p>VARCHAR2(25)</p>
</td>
<td class="cellalignment4516" headers="d5610e1806 d5610e1791">
<p>Name of the entailment</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e1816" headers="d5610e1785">
<p>INDEX_VIEW_NAME</p>
</td>
<td class="cellalignment4515" headers="d5610e1816 d5610e1788">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment4516" headers="d5610e1816 d5610e1791">
<p>Name of the view that you must use for any SQL statements that insert, delete, or modify rules in the entailment</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e1826" headers="d5610e1785">
<p>STATUS</p>
</td>
<td class="cellalignment4515" headers="d5610e1826 d5610e1788">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment4516" headers="d5610e1826 d5610e1791">
<p>Contains <code class="codeph">VALID</code> if the entailment is valid, <code class="codeph">INVALID</code> if the entailment is not valid, <code class="codeph">INCOMPLETE</code> if the entailment is incomplete (similar to <code class="codeph">INVALID</code> but requiring less time to re-create), <code class="codeph">INPROGRESS</code> if the entailment is being created, or <code class="codeph">FAILED</code> if a system failure occurred during the creation of the entailment.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e1855" headers="d5610e1785">
<p>MODEL_COUNT</p>
</td>
<td class="cellalignment4515" headers="d5610e1855 d5610e1788">
<p>NUMBER</p>
</td>
<td class="cellalignment4516" headers="d5610e1855 d5610e1791">
<p>Number of models included in the entailment</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e1865" headers="d5610e1785">
<p>RULEBASE_COUNT</p>
</td>
<td class="cellalignment4515" headers="d5610e1865 d5610e1788">
<p>NUMBER</p>
</td>
<td class="cellalignment4516" headers="d5610e1865 d5610e1791">
<p>Number of rulebases included in the entailment</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p><a id="d5610e1875" class="indexterm-anchor"></a><a id="d5610e1877" class="indexterm-anchor"></a>Information about all database objects, such as models and rulebases, related to entailments is maintained in the MDSYS.SEM_RULES_INDEX_DATASETS view. This view has the columns shown in <a href="rdf-overview.htm#GUID-AE3CFE93-13CF-444E-9523-0693572851E7__CHDIAJAI" title="SEM_RULES_INDEX_DATASETS view columns">Table 1-7</a> and one row for each unique combination of values of all the columns.</p>
<div class="tblformal" id="GUID-AE3CFE93-13CF-444E-9523-0693572851E7__CHDIAJAI">
<p class="titleintable">Table 1-7 MDSYS.SEM_RULES_INDEX_DATASETS View Columns</p>
<table class="cellalignment4510" title="MDSYS.SEM_RULES_INDEX_DATASETS View Columns" summary="SEM_RULES_INDEX_DATASETS view columns">
<thead>
<tr class="cellalignment4501">
<th class="cellalignment4511" id="d5610e1898">Column Name</th>
<th class="cellalignment4512" id="d5610e1901">Data Type</th>
<th class="cellalignment4513" id="d5610e1904">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e1909" headers="d5610e1898">
<p>INDEX_NAME</p>
</td>
<td class="cellalignment4515" headers="d5610e1909 d5610e1901">
<p>VARCHAR2(25)</p>
</td>
<td class="cellalignment4516" headers="d5610e1909 d5610e1904">
<p>Name of the entailment</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e1919" headers="d5610e1898">
<p>DATA_TYPE</p>
</td>
<td class="cellalignment4515" headers="d5610e1919 d5610e1901">
<p>VARCHAR2(8)</p>
</td>
<td class="cellalignment4516" headers="d5610e1919 d5610e1904">
<p>Type of data included in the entailment. Examples: <code class="codeph">MODEL</code> and <code class="codeph">RULEBASE</code></p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e1934" headers="d5610e1898">
<p>DATA_NAME</p>
</td>
<td class="cellalignment4515" headers="d5610e1934 d5610e1901">
<p>VARCHAR2(25)</p>
</td>
<td class="cellalignment4516" headers="d5610e1934 d5610e1904">
<p>Name of the object of the type in the DATA_TYPE column</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p><a href="rdf-overview.htm#GUID-AE3CFE93-13CF-444E-9523-0693572851E7__CHDJIFAI">Example 1-3</a> creates an entailment named <code class="codeph">family_rb_rix_family</code>, using the <code class="codeph">family</code> model and the <code class="codeph">RDFS</code> and <code class="codeph">family_rb</code> rulebases. (This example is an excerpt from <a href="rdf-overview.htm#GUID-ADC458F4-570C-4081-8844-107F9F63E915__CHDGCDGI">Example 1-90</a> in <a href="rdf-overview.htm#GUID-ADC458F4-570C-4081-8844-107F9F63E915">Example: Family Information</a>.)</p>
<div class="example" id="GUID-AE3CFE93-13CF-444E-9523-0693572851E7__CHDJIFAI">
<p class="titleinexample">Example 1-3 Creating an Entailment</p>
<pre dir="ltr">BEGIN
  SEM_APIS.CREATE_ENTAILMENT(
    &#39;rdfs_rix_family&#39;,
    SEM_Models(&#39;family&#39;),
    SEM_Rulebases(&#39;RDFS&#39;,&#39;family_rb&#39;));
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM99876"></a><a id="RDFRM99896"></a><a id="RDFRM99897"></a><a id="RDFRM99895"></a><a id="RDFRM99894"></a>
<div class="props_rev_3"><a id="GUID-8B957406-5ED1-4579-9C23-0EDE2FDF2964"></a>
<h3 id="RDFRM-GUID-8B957406-5ED1-4579-9C23-0EDE2FDF2964" class="sect3"><span class="enumeration_section">1.3.8</span> Virtual Models</h3>
<div>
<p>A virtual model is a logical graph that can be used in a SEM_MATCH query. A virtual model is the result of a UNION or UNION ALL operation on one or more models and/or entailments.</p>
<p>Using a virtual model can provide several benefits:</p>
<ul style="list-style-type: disc;">
<li>
<p>It can simplify management of access privileges for semantic data. For example, assume that you have created three semantic models and one entailment based on the three models and the OWLPrime rulebase. Without a virtual model, you must individually grant and revoke access privileges for each model and the entailment. However, if you create a virtual model that contains the three models and the entailment, you will only need to grant and revoke access privileges for the single virtual model.</p>
</li>
<li>
<p>It can facilitate rapid updates to semantic models. For example, assume that virtual model VM1 contains model M1 and entailment R1 (that is, VM1 = M1 UNION ALL R1), and assume that semantic model M1_UPD is a copy of M1 that has been updated with additional triples and that R1_UPD is an entailment created for M1_UPD. Now, to have user queries over VM1 go to the updated model and entailment, you can redefine virtual model VM1 (that is, VM1 = M1_UPD UNION ALL R1_UPD).</p>
</li>
<li>
<p>It can simplify query specification because querying a virtual model is equivalent to querying multiple models in a SEM_MATCH query. For example, assume that models m1, m2, and m3 already exist, and that an entailment has been created for m1, m2 ,and m3 using the OWLPrime rulebase. You could create a virtual model vm1 as follows:</p>
<pre dir="ltr">EXECUTE sem_apis.create_virtual_model(&#39;vm1&#39;, sem_models(&#39;m1&#39;, &#39;m2&#39;, &#39;m3&#39;), 
                                      sem_rulebases(&#39;OWLPRIME&#39;));
</pre>
<p>To query the virtual model, use the virtual model name as if it were a model in a SEM_MATCH query. For example, the following query on the virtual model:</p>
<pre dir="ltr">SELECT * FROM TABLE (sem_match(&#39;{&hellip;}&#39;, sem_models(&#39;vm1&#39;), null, &hellip;));
</pre>
<p>is equivalent to the following query on all the individual models:</p>
<pre dir="ltr">SELECT * FROM TABLE (sem_match(&#39;{&hellip;}&#39;, sem_models(&#39;m1&#39;, &#39;m2&#39;, &#39;m3&#39;), 
                                      sem_rulebases(&#39;OWLPRIME&#39;), &hellip;));
</pre>
<p>A SEM_MATCH query over a virtual model will query either the <span class="italic">SEMV</span> or <span class="italic">SEMU</span> view (<span class="italic">SEMU</span> by default and <span class="italic">SEMV</span> if the &#39;ALLOW_DUP=T&#39; option is specified) rather than querying the UNION or UNION ALL of each model and entailment. For information about these views and options, see the reference section for the <a href="sem-apis-ref.htm#GUID-CAFA0FE5-3A96-4DBD-A9EC-F3E0466807DB">SEM_APIS.CREATE_VIRTUAL_MODEL</a> procedure.</p>
</li>
</ul>
<p>You cannot use Oracle Workspace Manager version-enabling on a model that participates in a virtual model. (Workspace Manager support for RDF data is described in <a href="wm-rdf.htm#GUID-7F300093-7ABC-4FF7-AFFC-248C94D02666">Workspace Manager Support for RDF Data</a> .)</p>
<p>Virtual models use views (described later in this section) and add some metadata entries, but do not significantly increase system storage requirements.</p>
<p>To create a virtual model, use the <a href="sem-apis-ref.htm#GUID-CAFA0FE5-3A96-4DBD-A9EC-F3E0466807DB">SEM_APIS.CREATE_VIRTUAL_MODEL</a> procedure. To drop (delete) a virtual model, use the <a href="sem-apis-ref.htm#GUID-0BE64DB8-37FB-496B-BFDD-8284444D27F1">SEM_APIS.DROP_VIRTUAL_MODEL</a> procedure. A virtual model is dropped automatically if any of its component models, rulebases, or entailment are dropped. To replace a virtual model without dropping it, use the <a href="sem-apis-ref.htm#GUID-CAFA0FE5-3A96-4DBD-A9EC-F3E0466807DB">SEM_APIS.CREATE_VIRTUAL_MODEL</a> procedure with the <code class="codeph">REPLACE=T</code> option. Replacing a virtual model allows you to redefine it while maintaining any access privileges.</p>
<p>To query a virtual model, specify the virtual model name in the <code class="codeph">models</code> parameter of the SEM_MATCH table function, as shown in <a href="rdf-overview.htm#GUID-8B957406-5ED1-4579-9C23-0EDE2FDF2964__CIHHIJII">Example 1-4</a>.</p>
<p>For information about the SEM_MATCH table function, see <a href="rdf-overview.htm#GUID-71464CC4-1C03-48A4-9A4C-0E671FF8F16E">Using the SEM_MATCH Table Function to Query Semantic Data</a>, which includes information using certain attributes when querying a virtual model.</p>
<p><a id="d5610e2100" class="indexterm-anchor"></a><a id="d5610e2104" class="indexterm-anchor"></a>When you create a virtual model, an entry is created for it in the MDSYS.SEM_MODEL$ view, which is described in <a href="rdf-overview.htm#GUID-A2556E81-4419-49ED-9EA0-AA7EA3BB67AE__CHDDBDII" title="SEM_MODEL$ view columns">Table 1-1</a> in <a href="rdf-overview.htm#GUID-A2556E81-4419-49ED-9EA0-AA7EA3BB67AE">Metadata for Models</a>. However, the values in several of the columns are different for virtual models as opposed to semantic models, as explained in <a href="rdf-overview.htm#GUID-8B957406-5ED1-4579-9C23-0EDE2FDF2964__CIHCEBAD" title="SEM_MODEL$ view columns (for virtual models)">Table 1-8</a>.</p>
<div class="tblformal" id="GUID-8B957406-5ED1-4579-9C23-0EDE2FDF2964__CIHCEBAD">
<p class="titleintable">Table 1-8 MDSYS.SEM_MODEL$ View Column Explanations for Virtual Models</p>
<table class="cellalignment4510" title="MDSYS.SEM_MODEL$ View Column Explanations for Virtual Models" summary="SEM_MODEL$ view columns (for virtual models)">
<thead>
<tr class="cellalignment4501">
<th class="cellalignment4512" id="d5610e2134">Column Name</th>
<th class="cellalignment4540" id="d5610e2137">Data Type</th>
<th class="cellalignment4541" id="d5610e2140">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4501">
<td class="cellalignment4515" id="d5610e2145" headers="d5610e2134">
<p>OWNER</p>
</td>
<td class="cellalignment4542" headers="d5610e2145 d5610e2137">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment4543" headers="d5610e2145 d5610e2140">
<p>Schema of the owner of the virtual model</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4515" id="d5610e2155" headers="d5610e2134">
<p>MODEL_ID</p>
</td>
<td class="cellalignment4542" headers="d5610e2155 d5610e2137">
<p>NUMBER</p>
</td>
<td class="cellalignment4543" headers="d5610e2155 d5610e2140">
<p>Unique model ID number, automatically generated. Will be a negative number, to indicate that this is a virtual model.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4515" id="d5610e2165" headers="d5610e2134">
<p>MODEL_NAME</p>
</td>
<td class="cellalignment4542" headers="d5610e2165 d5610e2137">
<p>VARCHAR2(25)</p>
</td>
<td class="cellalignment4543" headers="d5610e2165 d5610e2140">
<p>Name of the virtual model</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4515" id="d5610e2175" headers="d5610e2134">
<p>TABLE_NAME</p>
</td>
<td class="cellalignment4542" headers="d5610e2175 d5610e2137">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment4543" headers="d5610e2175 d5610e2140">
<p>Null for a virtual model</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4515" id="d5610e2185" headers="d5610e2134">
<p>COLUMN_NAME</p>
</td>
<td class="cellalignment4542" headers="d5610e2185 d5610e2137">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment4543" headers="d5610e2185 d5610e2140">
<p>Null for a virtual model</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4515" id="d5610e2195" headers="d5610e2134">
<p>MODEL_TABLESPACE_NAME</p>
</td>
<td class="cellalignment4542" headers="d5610e2195 d5610e2137">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment4543" headers="d5610e2195 d5610e2140">
<p>Null for a virtual model</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p><a id="d5610e2205" class="indexterm-anchor"></a><a id="d5610e2207" class="indexterm-anchor"></a>Information about all virtual models is maintained in the MDSYS.SEM_VMODEL_INFO view, which has the columns shown in <a href="rdf-overview.htm#GUID-8B957406-5ED1-4579-9C23-0EDE2FDF2964__CIHHBDHI" title="SEM_VMODEL_INFO view columns">Table 1-9</a> and one row for each virtual model.</p>
<div class="tblformal" id="GUID-8B957406-5ED1-4579-9C23-0EDE2FDF2964__CIHHBDHI">
<p class="titleintable">Table 1-9 MDSYS.SEM_VMODEL_INFO View Columns</p>
<table class="cellalignment4510" title="MDSYS.SEM_VMODEL_INFO View Columns" summary="SEM_VMODEL_INFO view columns">
<thead>
<tr class="cellalignment4501">
<th class="cellalignment4511" id="d5610e2229">Column Name</th>
<th class="cellalignment4512" id="d5610e2232">Data Type</th>
<th class="cellalignment4513" id="d5610e2235">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e2240" headers="d5610e2229">
<p>OWNER</p>
</td>
<td class="cellalignment4515" headers="d5610e2240 d5610e2232">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment4516" headers="d5610e2240 d5610e2235">
<p>Owner of the virtual model</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e2250" headers="d5610e2229">
<p>VIRTUAL_MODEL_NAME</p>
</td>
<td class="cellalignment4515" headers="d5610e2250 d5610e2232">
<p>VARCHAR2(25)</p>
</td>
<td class="cellalignment4516" headers="d5610e2250 d5610e2235">
<p>Name of the virtual model</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e2260" headers="d5610e2229">
<p>UNIQUE_VIEW_NAME</p>
</td>
<td class="cellalignment4515" headers="d5610e2260 d5610e2232">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment4516" headers="d5610e2260 d5610e2235">
<p>Name of the view that contains unique triples in the virtual model, or null if the view was not created</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e2270" headers="d5610e2229">
<p>DUPLICATE_VIEW_NAME</p>
</td>
<td class="cellalignment4515" headers="d5610e2270 d5610e2232">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment4516" headers="d5610e2270 d5610e2235">
<p>Name of the view that contains duplicate triples (if any) in the virtual model</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e2280" headers="d5610e2229">
<p>STATUS</p>
</td>
<td class="cellalignment4515" headers="d5610e2280 d5610e2232">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment4516" headers="d5610e2280 d5610e2235">
<p>Contains <code class="codeph">VALID</code> if the associated entailment is valid, <code class="codeph">INVALID</code> if the entailment is not valid, <code class="codeph">INCOMPLETE</code> if the entailment is incomplete (similar to <code class="codeph">INVALID</code> but requiring less time to re-create), <code class="codeph">INPROGRESS</code> if the entailment is being created, <code class="codeph">FAILED</code> if a system failure occurred during the creation of the entailment, or <code class="codeph">NORIDX</code> if no entailment is associated with the virtual model.</p>
<p>In the case of multiple entailments, the lowest status among all of the component entailments is used as the virtual model&#39;s status (<code class="codeph">INVALID</code> &lt; <code class="codeph">INCOMPLETE</code> &lt; <code class="codeph">VALID</code>).</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e2323" headers="d5610e2229">
<p>MODEL_COUNT</p>
</td>
<td class="cellalignment4515" headers="d5610e2323 d5610e2232">
<p>NUMBER</p>
</td>
<td class="cellalignment4516" headers="d5610e2323 d5610e2235">
<p>Number of models in the virtual model</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e2333" headers="d5610e2229">
<p>RULEBASE_COUNT</p>
</td>
<td class="cellalignment4515" headers="d5610e2333 d5610e2232">
<p>NUMBER</p>
</td>
<td class="cellalignment4516" headers="d5610e2333 d5610e2235">
<p>Number of rulebases used for the virtual model</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e2343" headers="d5610e2229">
<p>RULES_INDEX_COUNT</p>
</td>
<td class="cellalignment4515" headers="d5610e2343 d5610e2232">
<p>NUMBER</p>
</td>
<td class="cellalignment4516" headers="d5610e2343 d5610e2235">
<p>Number of entailments in the virtual model</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p><a id="d5610e2353" class="indexterm-anchor"></a><a id="d5610e2355" class="indexterm-anchor"></a>Information about all objects (models, rulebases, and entailments) related to virtual models is maintained in the MDSYS.SEM_VMODEL_DATASETS view. This view has the columns shown in <a href="rdf-overview.htm#GUID-8B957406-5ED1-4579-9C23-0EDE2FDF2964__CIHBHJGE" title="SEM_VMODEL_DATASETS view columns">Table 1-10</a> and one row for each unique combination of values of all the columns.</p>
<div class="tblformal" id="GUID-8B957406-5ED1-4579-9C23-0EDE2FDF2964__CIHBHJGE">
<p class="titleintable">Table 1-10 MDSYS.SEM_VMODEL_DATASETS View Columns</p>
<table class="cellalignment4510" title="MDSYS.SEM_VMODEL_DATASETS View Columns" summary="SEM_VMODEL_DATASETS view columns">
<thead>
<tr class="cellalignment4501">
<th class="cellalignment4511" id="d5610e2376">Column Name</th>
<th class="cellalignment4512" id="d5610e2379">Data Type</th>
<th class="cellalignment4513" id="d5610e2382">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e2387" headers="d5610e2376">
<p>VIRTUAL_MODEL_NAME</p>
</td>
<td class="cellalignment4515" headers="d5610e2387 d5610e2379">
<p>VARCHAR2(25)</p>
</td>
<td class="cellalignment4516" headers="d5610e2387 d5610e2382">
<p>Name of the virtual model</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e2397" headers="d5610e2376">
<p>DATA_TYPE</p>
</td>
<td class="cellalignment4515" headers="d5610e2397 d5610e2379">
<p>VARCHAR2(8)</p>
</td>
<td class="cellalignment4516" headers="d5610e2397 d5610e2382">
<p>Type of object included in the virtual model. Examples: <code class="codeph">MODEL</code> for a semantic model, <code class="codeph">RULEBASE</code> for a rulebase, or <code class="codeph">RULEIDX</code> for an entailment</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e2416" headers="d5610e2376">
<p>DATA_NAME</p>
</td>
<td class="cellalignment4515" headers="d5610e2416 d5610e2379">
<p>VARCHAR2(25)</p>
</td>
<td class="cellalignment4516" headers="d5610e2416 d5610e2382">
<p>Name of the object of the type in the DATA_TYPE column</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<div class="example" id="GUID-8B957406-5ED1-4579-9C23-0EDE2FDF2964__CIHHIJII">
<p class="titleinexample">Example 1-4 Querying a Virtual Model</p>
<pre dir="ltr">SELECT COUNT(protein)
  FROM TABLE (SEM_MATCH (
    &#39;{?protein rdf:type :Protein .
      ?protein :citation ?citation . 
      ?citation :author &#34;Bairoch A.&#34;}&#39;,
    SEM_MODELS(&#39;<span class="bold">UNIPROT_VM</span>&#39;), 
    NULL, 
    SEM_ALIASES(SEM_ALIAS(&#39;&#39;, &#39;http://purl.uniprot.org/core/&#39;)),
    NULL, 
    NULL, 
    &#39;ALLOW_DUP=T&#39;));
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM164"></a>
<div class="props_rev_3"><a id="GUID-5409C3FE-2DF1-4D95-BF90-6FF8424D3A21"></a>
<h3 id="RDFRM-GUID-5409C3FE-2DF1-4D95-BF90-6FF8424D3A21" class="sect3"><span class="enumeration_section">1.3.9</span> Named Graphs</h3>
<div>
<p>RDF Semantic Graph supports the use of named graphs, which are described in the &#34;RDF Dataset&#34; section of the W3C <span class="italic">SPARQL Query Language for RDF</span> recommendation (<a href="http://www.w3.org/TR/rdf-sparql-query/#rdfDataset" target="_blank"><code class="codeph">http://www.w3.org/TR/rdf-sparql-query/#rdfDataset</code></a>).</p>
<p>This support is provided by extending an RDF triple consisting of the traditional subject, predicate, and object, to include an additional component to represent a <span class="bold">graph name</span>. The extended RDF triple, despite having four components, will continue to be referred to as an <span class="italic">RDF triple</span> in this document. In addition, the following terms are sometimes used:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold">N-Triple</span> is a format that does not allow extended triples. Thus, n-triples can include only triples with three components.</p>
</li>
<li>
<p><a id="d5610e2505" class="indexterm-anchor"></a><span class="bold">N-Quad</span> is a format that allows both &#34;regular&#34; triples (three components) and extended triples (four components, including the graph name). For more information, see <a href="http://www.w3.org/TR/2013/NOTE-n-quads-20130409/" target="_blank"><code class="codeph">http://www.w3.org/TR/2013/NOTE-n-quads-20130409/</code></a>.</p>
<p>To load a file containing extended triples (possibly mixed with regular triples) into an Oracle database, the input file must be in N-Quad format.</p>
</li>
</ul>
<p>The graph name component of an RDF triple must either be null or a URI. If it is null, the RDF triple is said to belong to a <span class="bold">default graph</span>; otherwise it is said to belong to a named graph whose name is designated by the URI.</p>
<p>Additionally, to support named graphs in SDO_RDF_TRIPLE_S object type (described in <a href="rdf-overview.htm#GUID-D7734D1A-EAC0-4581-B3CC-2E23C8F97D94">Semantic Data Types_ Constructors_ and Methods</a>), a new syntax is provided for specifying a model-graph, that is, a combination of model and graph (if any) together, and the RDF_M_ID attribute holds the identifier for a model-graph: a combination of model ID and value ID for the graph (if any). The name of a model-graph is specified as <span class="italic">model_name</span>, and if a graph is present, followed by the colon (<code class="codeph">:</code>) separator character and the graph name (which must be a URI and enclosed within angle brackets <code class="codeph">&lt; &gt;</code>).</p>
<p>For example, in a medical data set the named graph component for each RDF triple might be a URI based on patient identifier, so there could be as many named graphs as there are unique patients, with each named graph consisting of data for a specific patient.</p>
<p>For information about performing specific operations with named graphs, see the following:</p>
<ul style="list-style-type: disc;">
<li>
<p>Using constructors and methods: <a href="rdf-overview.htm#GUID-D7734D1A-EAC0-4581-B3CC-2E23C8F97D94">Semantic Data Types_ Constructors_ and Methods</a></p>
</li>
<li>
<p>Loading: <a href="rdf-overview.htm#GUID-0D35BEBE-68C6-4A2F-9E07-5D223EBD6419">Loading N-Quad Format Data into a Staging Table Using an External Table</a> and <a href="rdf-overview.htm#GUID-8D46CB97-3CC7-493B-9250-28BFAFDB8269">Loading Data into Named Graphs Using INSERT Statements</a></p>
</li>
<li>
<p>Querying: <a href="rdf-overview.htm#GUID-45654D98-A2B5-4815-949D-2F48FA66DA51">GRAPH Keyword Support</a> and <a href="rdf-overview.htm#GUID-7CEE1E1B-507A-4AE5-9998-9193269BF692">Expressions in the SELECT Clause</a></p>
</li>
<li>
<p>Inferencing: <a href="owl-concepts.htm#GUID-6353E485-A0A0-4F81-8D69-1B26DF227050">Using Named Graph Based Inferencing (Global and Local)</a></p>
</li>
</ul>
</div>
<a id="RDFRM138"></a><a id="RDFRM139"></a><a id="RDFRM137"></a>
<div class="props_rev_3"><a id="GUID-5A43B66F-6B26-433F-8F69-9DD615B72DB0"></a>
<h4 id="RDFRM-GUID-5A43B66F-6B26-433F-8F69-9DD615B72DB0" class="sect4"><span class="enumeration_section">1.3.9.1</span> Data Formats Related to Named Graph Support</h4>
<div>
<p>TriG (<a href="http://wifo5-03.informatik.uni-mannheim.de/bizer/trig/" target="_blank"><code class="codeph">http://wifo5-03.informatik.uni-mannheim.de/bizer/trig/</code></a>) and N-QUADS (<a href="http://www.w3.org/TR/2013/NOTE-n-quads-20130409/" target="_blank"><code class="codeph">http://www.w3.org/TR/2013/NOTE-n-quads-20130409/</code></a>) are two popular data formats that provide graph names (or context) to triple data. (As of November 2011, neither format was a standard.) The graph names (context) can be used in a variety of different ways. Typical usage includes, but is not limited to, the grouping of triples for ease of management, localized query, localized inference, and provenance.</p>
<div class="example" id="GUID-5A43B66F-6B26-433F-8F69-9DD615B72DB0__CIHGHHIA">
<p class="titleinexample">Example 1-5 RDF Data Encoded in TriG Format</p>
<p><a href="rdf-overview.htm#GUID-5A43B66F-6B26-433F-8F69-9DD615B72DB0__CIHGHHIA">Example 1-5</a> shows an RDF data set encoded in TriG format. It contains a default graph and a named graph.</p>
<pre dir="ltr">@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .
@prefix dc: &lt;http://purl.org/dc/elements/1.1/&gt; .
 
# Default graph
{
  &lt;http://my.com/John&gt; dc:publisher &lt;http://publisher/Xyz&gt; .
}
 
# A named graph
&lt;http://my.com/John&gt; {
  &lt;http://my.com/John&gt; foaf:name &#34;John Doe&#34; .
}
</pre>
<p>When loading the TriG file from <a href="rdf-overview.htm#GUID-5A43B66F-6B26-433F-8F69-9DD615B72DB0__CIHGHHIA">Example 1-5</a> into a <code class="codeph">DatasetGraphOracleSem</code> object (for example, using <a href="rdf-jena.htm#GUID-1109AB37-AFD5-4172-B7E5-6F279782A22E__BGBFBJEF">Example 7-12</a> in <a href="rdf-jena.htm#GUID-1109AB37-AFD5-4172-B7E5-6F279782A22E">Bulk Loading Using RDF Semantic Graph Support for Apache Jena</a>, but replacing the constant <code class="codeph">&#34;N-QUADS&#34;</code> with <code class="codeph">&#34;TRIG&#34;</code>), the triples in the default graph will be loaded into Oracle Database as triples with null graph names, and the triples in the named graphs will be loaded into Oracle Database with the designated graph names.</p>
</div>
<!-- class="example" -->
<div class="example" id="GUID-5A43B66F-6B26-433F-8F69-9DD615B72DB0__CIHJADFH">
<p class="titleinexample">Example 1-6 N-QUADS Format Representation</p>
<p>N-QUADS format is a simple extension of the existing N-TRIPLES format by adding an optional fourth column (graph name or context). <a href="rdf-overview.htm#GUID-5A43B66F-6B26-433F-8F69-9DD615B72DB0__CIHJADFH">Example 1-6</a> shows the N-QUADS format representation of the TriG file from <a href="rdf-overview.htm#GUID-5A43B66F-6B26-433F-8F69-9DD615B72DB0__CIHGHHIA">Example 1-5</a>.</p>
<pre dir="ltr">&lt;http://my.com/John&gt; &lt;http://purl.org/dc/elements/1.1/publisher&gt; &lt;http://publisher/Xyz&gt; .
&lt;http://my.com/John&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; &#34;John Doe&#34; &lt;http://my.com/John&gt;
</pre>
<p>When loading an N-QUADS file into a <code class="codeph">DatasetGraphOracleSem</code> object (see <a href="rdf-jena.htm#GUID-1109AB37-AFD5-4172-B7E5-6F279782A22E__BGBFBJEF">Example 7-12</a>), lines without the fourth column will be loaded into Oracle Database as triples with null graph names, and lines with a fourth column will be loaded into Oracle Database with the designated graph names.</p>
</div>
<!-- class="example" --></div>
</div>
</div>
<a id="RDFRM583"></a>
<div class="props_rev_3"><a id="GUID-1344F198-9E1C-4D77-829D-E38E1E1D9385"></a>
<h3 id="RDFRM-GUID-1344F198-9E1C-4D77-829D-E38E1E1D9385" class="sect3"><span class="enumeration_section">1.3.10</span> Semantic Data Security Considerations</h3>
<div>
<p>The following database security considerations apply to the use of semantic data:</p>
<ul style="list-style-type: disc;">
<li>
<p>When a model or entailment is created, the owner gets the SELECT privilege with the GRANT option on the associated view. Users that have the SELECT privilege on these views can perform SEM_MATCH queries against the associated model or entailment.</p>
</li>
<li>
<p>When a rulebase is created, the owner gets the SELECT, INSERT, UPDATE, and DELETE privileges on the rulebase, with the GRANT option. Users that have the SELECT privilege on a rulebase can create an entailment that includes the rulebase. The INSERT, UPDATE, and DELETE privileges control which users can modify the rulebase and how they can modify it.</p>
</li>
<li>
<p>To perform data manipulation language (DML) operations on a model, a user must have DML privileges for the corresponding base table.</p>
</li>
<li>
<p>The creator of the base table corresponding to a model can grant privileges to other users.</p>
</li>
<li>
<p>To perform data manipulation language (DML) operations on a rulebase, a user must have the appropriate privileges on the corresponding database view.</p>
</li>
<li>
<p>The creator of a model can grant SELECT privileges on the corresponding database view to other users.</p>
</li>
<li>
<p>A user can query only those models for which that user has SELECT privileges to the corresponding database views.</p>
</li>
<li>
<p>Only the creator of a model or a rulebase can drop it.</p>
</li>
</ul>
</div>
</div>
</div>
<a id="RDFRM585"></a><a id="RDFRM584"></a>
<div class="props_rev_3"><a id="GUID-6F93C56B-9007-4F37-9A8F-0ECF4AC204A5"></a>
<h2 id="RDFRM-GUID-6F93C56B-9007-4F37-9A8F-0ECF4AC204A5" class="sect2"><span class="enumeration_section">1.4</span> Semantic Metadata Tables and Views</h2>
<div>
<p>Oracle Database maintains several tables and views in the MDSYS schema to hold metadata related to semantic data. (Some of these tables and views are created by the <a href="sem-apis-ref.htm#GUID-7E0EAF3F-C5A5-4E02-8736-8280ABA35214">SEM_APIS.CREATE_SEM_NETWORK</a> procedure, as explained in <a href="rdf-overview.htm#GUID-7F590F2D-F382-4CD6-A95A-757010BB148F">Quick Start for Using Semantic Data</a>, and some are created only as needed.) <a href="rdf-overview.htm#GUID-6F93C56B-9007-4F37-9A8F-0ECF4AC204A5__CHDIDCED" title="RDF metadata tables and views">Table 1-11</a> lists the tables and views in alphabetical order. (In addition, several tables and views are created for Oracle internal use, and these are accessible only by users with DBA privileges.)</p>
<div class="tblformal" id="GUID-6F93C56B-9007-4F37-9A8F-0ECF4AC204A5__CHDIDCED">
<p class="titleintable">Table 1-11 Semantic Metadata Tables and Views</p>
<table class="cellalignment4510" title="Semantic Metadata Tables and Views" summary="RDF metadata tables and views">
<thead>
<tr class="cellalignment4501">
<th class="cellalignment4548" id="d5610e2821">Name</th>
<th class="cellalignment4549" id="d5610e2824">Contains Information About</th>
<th class="cellalignment4550" id="d5610e2827">Described In</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e2832" headers="d5610e2821">
<p>RDF_VALUE$</p>
</td>
<td class="cellalignment4552" headers="d5610e2832 d5610e2824">
<p>Subjects, properties, and objects used to represent statements</p>
</td>
<td class="cellalignment4553" headers="d5610e2832 d5610e2827">
<p><a href="rdf-overview.htm#GUID-F7D6E792-CFF4-4183-AECE-3CF4A3332D9E">Statements</a></p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e2844" headers="d5610e2821">
<p>RDFOLS_SECURE_RESOURCE</p>
</td>
<td class="cellalignment4552" headers="d5610e2844 d5610e2824">
<p>Resources secured with Oracle Label Security (OLS) policies and the sensitivity labels associated with these resources</p>
</td>
<td class="cellalignment4553" headers="d5610e2844 d5610e2827">
<p><a href="fine-grained-access.htm#GUID-6E6C434F-2BC9-42D3-8B8C-CA828EDE7406">RDFOLS_SECURE_RESOURCE View</a></p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e2856" headers="d5610e2821">
<p>RDFVPD_MODELS</p>
</td>
<td class="cellalignment4552" headers="d5610e2856 d5610e2824">
<p>RDF models and their associated VPD policies</p>
</td>
<td class="cellalignment4553" headers="d5610e2856 d5610e2827">
<p><a href="rdf-vpd.htm#GUID-CCAFACF0-1CE9-4DE7-AA6F-24F68825590A">RDFVPD_MODELS View</a></p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e2868" headers="d5610e2821">
<p>RDFVPD_POLICIES</p>
</td>
<td class="cellalignment4552" headers="d5610e2868 d5610e2824">
<p>All VPD policies defined in the schema or the policies to which the user has FULL access</p>
</td>
<td class="cellalignment4553" headers="d5610e2868 d5610e2827">
<p><a href="rdf-vpd.htm#GUID-BD3FFABD-EDB4-4E0A-9D45-FDE2439A856D">RDFVPD_POLICIES View</a></p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e2880" headers="d5610e2821">
<p>RDFVPD_POLICY_CONSTRAINTS</p>
</td>
<td class="cellalignment4552" headers="d5610e2880 d5610e2824">
<p>Constraints defined in the VPD policy that are accessible to the current user</p>
</td>
<td class="cellalignment4553" headers="d5610e2880 d5610e2827">
<p><a href="rdf-vpd.htm#GUID-C37D0691-0FDE-4A1D-B1E1-07606D68E346">RDFVPD_PREDICATE_MDATA View</a></p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e2892" headers="d5610e2821">
<p>RDFVPD_PREDICATE_MDATA</p>
</td>
<td class="cellalignment4552" headers="d5610e2892 d5610e2824">
<p>Predicate metadata associated with a VPD policy</p>
</td>
<td class="cellalignment4553" headers="d5610e2892 d5610e2827">
<p><a href="rdf-vpd.htm#GUID-C37D0691-0FDE-4A1D-B1E1-07606D68E346">RDFVPD_PREDICATE_MDATA View</a></p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e2904" headers="d5610e2821">
<p>RDFVPD_RESOURCE_REL</p>
</td>
<td class="cellalignment4552" headers="d5610e2904 d5610e2824">
<p>Subclass, subproperty, and equivalence property relationships that are defined between resources in a VPD policy</p>
</td>
<td class="cellalignment4553" headers="d5610e2904 d5610e2827">
<p><a href="rdf-vpd.htm#GUID-166F9910-A458-444E-8CD2-FD90250DBCE4">RDFVPD_RESOURCE_REL View</a></p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e2916" headers="d5610e2821">
<p>SEM_DTYPE_INDEX_INFO</p>
</td>
<td class="cellalignment4552" headers="d5610e2916 d5610e2824">
<p>All data type indexes in the network</p>
</td>
<td class="cellalignment4553" headers="d5610e2916 d5610e2827">
<p><a href="rdf-overview.htm#GUID-E0FC3EA3-9385-4D94-AB3C-72F65EDAC966">Using Data Type Indexes</a></p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e2928" headers="d5610e2821">
<p>SEM_MODEL$</p>
</td>
<td class="cellalignment4552" headers="d5610e2928 d5610e2824">
<p>All models defined in the database</p>
</td>
<td class="cellalignment4553" headers="d5610e2928 d5610e2827">
<p><a href="rdf-overview.htm#GUID-A2556E81-4419-49ED-9EA0-AA7EA3BB67AE">Metadata for Models</a></p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e2940" headers="d5610e2821">
<p>SEM_NETWORK_INDEX_INFO$</p>
</td>
<td class="cellalignment4552" headers="d5610e2940 d5610e2824">
<p>Semantic network indexes</p>
</td>
<td class="cellalignment4553" headers="d5610e2940 d5610e2827">
<p><a href="rdf-overview.htm#GUID-D47120ED-1CC6-47ED-8216-C7E2E9910064">MDSYS.SEM_NETWORK_INDEX_INFO View</a></p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e2952" headers="d5610e2821">
<p>SEM_RULEBASE_INFO</p>
</td>
<td class="cellalignment4552" headers="d5610e2952 d5610e2824">
<p>Rulebases</p>
</td>
<td class="cellalignment4553" headers="d5610e2952 d5610e2827">
<p><a href="rdf-overview.htm#GUID-B6D8E41B-9537-42AA-9083-B16C2972964B">Inferencing: Rules and Rulebases</a></p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e2965" headers="d5610e2821">
<p>SEM_RULES_INDEX_DATASETS</p>
</td>
<td class="cellalignment4552" headers="d5610e2965 d5610e2824">
<p>Database objects used in entailments</p>
</td>
<td class="cellalignment4553" headers="d5610e2965 d5610e2827">
<p><a href="rdf-overview.htm#GUID-AE3CFE93-13CF-444E-9523-0693572851E7">Entailments (Rules Indexes)</a></p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e2977" headers="d5610e2821">
<p>SEM_RULES_INDEX_INFO</p>
</td>
<td class="cellalignment4552" headers="d5610e2977 d5610e2824">
<p>Entailments (rules indexes)</p>
</td>
<td class="cellalignment4553" headers="d5610e2977 d5610e2827">
<p><a href="rdf-overview.htm#GUID-AE3CFE93-13CF-444E-9523-0693572851E7">Entailments (Rules Indexes)</a></p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e2989" headers="d5610e2821">
<p>SEM_VMODEL_INFO</p>
</td>
<td class="cellalignment4552" headers="d5610e2989 d5610e2824">
<p>Virtual models</p>
</td>
<td class="cellalignment4553" headers="d5610e2989 d5610e2827">
<p><a href="rdf-overview.htm#GUID-8B957406-5ED1-4579-9C23-0EDE2FDF2964">Virtual Models</a></p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e3001" headers="d5610e2821">
<p>SEM_VMODEL_DATASETS</p>
</td>
<td class="cellalignment4552" headers="d5610e3001 d5610e2824">
<p>Database objects used in virtual models</p>
</td>
<td class="cellalignment4553" headers="d5610e3001 d5610e2827">
<p><a href="rdf-overview.htm#GUID-8B957406-5ED1-4579-9C23-0EDE2FDF2964">Virtual Models</a></p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e3013" headers="d5610e2821">
<p>SEMCL_<span class="italic">entailment-name</span></p>
</td>
<td class="cellalignment4552" headers="d5610e3013 d5610e2824">
<p><code class="codeph">owl:sameAs</code> clique members and canonical representatives</p>
</td>
<td class="cellalignment4553" headers="d5610e3013 d5610e2827">
<p><a href="owl-concepts.htm#GUID-8C2819B1-1EBA-4D71-A463-5179AA4A929E">Optimizing owl:sameAs Inference</a></p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e3029" headers="d5610e2821">
<p>SEMI_<span class="italic">entailment-name</span></p>
</td>
<td class="cellalignment4552" headers="d5610e3029 d5610e2824">
<p>Triples in the specified entailment</p>
</td>
<td class="cellalignment4553" headers="d5610e3029 d5610e2827">
<p><a href="rdf-overview.htm#GUID-AE3CFE93-13CF-444E-9523-0693572851E7">Entailments (Rules Indexes)</a></p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e3043" headers="d5610e2821">
<p>SEMM_<span class="italic">model-name</span></p>
</td>
<td class="cellalignment4552" headers="d5610e3043 d5610e2824">
<p>Triples in the specified model</p>
</td>
<td class="cellalignment4553" headers="d5610e3043 d5610e2827">
<p><a href="rdf-overview.htm#GUID-A2556E81-4419-49ED-9EA0-AA7EA3BB67AE">Metadata for Models</a></p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e3057" headers="d5610e2821">
<p>SEMR_<span class="italic">rulebase-name</span></p>
</td>
<td class="cellalignment4552" headers="d5610e3057 d5610e2824">
<p>Rules in the specified rulebase</p>
</td>
<td class="cellalignment4553" headers="d5610e3057 d5610e2827">
<p><a href="rdf-overview.htm#GUID-B6D8E41B-9537-42AA-9083-B16C2972964B">Inferencing: Rules and Rulebases</a></p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e3071" headers="d5610e2821">
<p>SEMU_<span class="italic">virtual-model-name</span></p>
</td>
<td class="cellalignment4552" headers="d5610e3071 d5610e2824">
<p>Unique triples in the virtual model</p>
</td>
<td class="cellalignment4553" headers="d5610e3071 d5610e2827">
<p><a href="rdf-overview.htm#GUID-8B957406-5ED1-4579-9C23-0EDE2FDF2964">Virtual Models</a></p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e3085" headers="d5610e2821">
<p>SEMV_<span class="italic">virtual-model-name</span></p>
</td>
<td class="cellalignment4552" headers="d5610e3085 d5610e2824">
<p>Triples in the virtual model</p>
</td>
<td class="cellalignment4553" headers="d5610e3085 d5610e2827">
<p><a href="rdf-overview.htm#GUID-8B957406-5ED1-4579-9C23-0EDE2FDF2964">Virtual Models</a></p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
</div>
<a id="RDFRM587"></a><a id="RDFRM586"></a>
<div class="props_rev_3"><a id="GUID-D7734D1A-EAC0-4581-B3CC-2E23C8F97D94"></a>
<h2 id="RDFRM-GUID-D7734D1A-EAC0-4581-B3CC-2E23C8F97D94" class="sect2"><span class="enumeration_section">1.5</span> Semantic Data Types, Constructors, and Methods</h2>
<div>
<p>The SDO_RDF_TRIPLE object type represents semantic data in triple format, and the SDO_RDF_TRIPLE_S object type (the _S for storage) stores persistent semantic data in the database. The SDO_RDF_TRIPLE_S type has references to the data, because the actual semantic data is stored only in the central RDF schema. This type has methods to retrieve the entire triple or part of the triple.</p>
<div class="infobox-note" id="GUID-D7734D1A-EAC0-4581-B3CC-2E23C8F97D94__GUID-8D9500C8-4624-4873-ADEE-40A27DA57D10">
<p class="notep1">Note:</p>
<p>Blank nodes are always reused within an RDF model and cannot be reused across models</p>
</div>
<p>The SDO_RDF_TRIPLE type is used to display triples, whereas the SDO_RDF_TRIPLE_S type is used to store the triples in database tables.</p>
<p>The SDO_RDF_TRIPLE object type has the following attributes:</p>
<pre dir="ltr">SDO_RDF_TRIPLE (
  subject VARCHAR2(4000), 
  property VARCHAR2(4000), 
  object VARCHAR2(10000))
</pre>
<p>The SDO_RDF_TRIPLE_S object type has the following attributes:</p>
<pre dir="ltr">SDO_RDF_TRIPLE_S (
  RDF_C_ID  NUMBER,  -- Canonical object value ID
  RDF_M_ID NUMBER,  -- Model (or Model-Graph) ID 
  RDF_S_ID  NUMBER,  -- Subject value ID
  RDF_P_ID NUMBER, -- Property value ID
  RDF_O_ID  NUMBER)  -- Object value ID
</pre>
<p>The SDO_RDF_TRIPLE_S type has the following methods that retrieve the name of the RDF model (or model-graph), a triple, or a part (subject, property, or object) of a triple:</p>
<pre dir="ltr">GET_MODEL() RETURNS VARCHAR2
GET_TRIPLE() RETURNS SDO_RDF_TRIPLE
GET_SUBJECT() RETURNS VARCHAR2
GET_PROPERTY() RETURNS VARCHAR2
GET_OBJECT() RETURNS CLOB
</pre>
<p><a href="rdf-overview.htm#GUID-D7734D1A-EAC0-4581-B3CC-2E23C8F97D94__CHDCCHFJ">Example 1-7</a> shows the SDO_RDF_TRIPLE_S methods.</p>
<div class="example" id="GUID-D7734D1A-EAC0-4581-B3CC-2E23C8F97D94__CHDCCHFJ">
<p class="titleinexample">Example 1-7 SDO_RDF_TRIPLE_S Methods</p>
<pre dir="ltr">SELECT a.triple.<span class="bold">GET_MODEL()</span> AS model_graph, a.triple.GET_TRIPLE() AS triple
  FROM articles_rdf_data a WHERE a.id = 99;
 
MODEL_GRAPH
--------------------------------------------------------------------------------
TRIPLE(SUBJECT, PROPERTY, OBJECT)
--------------------------------------------------------------------------------
ARTICLES:&lt;http://examples.com/ns#Graph1&gt;
SDO_RDF_TRIPLE(&#39;&lt;http://nature.example.com/Article101&gt;&#39;, &#39;&lt;http://purl.org/dc/elements/1.1/creator&gt;&#39;, &#39;&#34;John Smith&#34;&#39;)

SELECT a.triple.<span class="bold">GET_TRIPLE()</span> AS triple
  FROM articles_rdf_data a WHERE a.id = 1;
 
TRIPLE(SUBJECT, PROPERTY, OBJECT)
--------------------------------------------------------------------------------
SDO_RDF_TRIPLE(&#39;&lt;http://nature.example.com/Article1&gt;&#39;, &#39;&lt;http://purl.org/dc/elem
ents/1.1/title&gt;&#39;, &#39;&lt;All about XYZ&gt;&#39;)
 
SELECT a.triple.<span class="bold">GET_SUBJECT()</span> AS subject
  FROM articles_rdf_data a WHERE a.id = 1;
 
SUBJECT                                                                         
--------------------------------------------------------------------------------
&lt;http://nature.example.com/Article1&gt;                                           
 
SELECT a.triple.<span class="bold">GET_PROPERTY()</span> AS property
  FROM articles_rdf_data a WHERE a.id = 1;
 
PROPERTY                                                                        
--------------------------------------------------------------------------------
&lt;http://purl.org/dc/elements/1.1/title&gt;                                         
 
SELECT a.triple.<span class="bold">GET_OBJECT()</span> AS object
  FROM articles_rdf_data a WHERE a.id = 1;
 
OBJECT                                                                          
--------------------------------------------------------------------------------
&lt;All about XYZ&gt;
</pre></div>
<!-- class="example" --></div>
<a id="RDFRM589"></a><a id="RDFRM588"></a>
<div class="props_rev_3"><a id="GUID-F1ED66D2-F2B7-40C6-899A-B67003BBD56D"></a>
<h3 id="RDFRM-GUID-F1ED66D2-F2B7-40C6-899A-B67003BBD56D" class="sect3"><span class="enumeration_section">1.5.1</span> Constructors for Inserting Triples</h3>
<div>
<p>The following constructor formats are available for inserting triples into a model table. The only difference is that in the second format the data type for the object is CLOB, to accommodate very long literals.</p>
<pre dir="ltr">SDO_RDF_TRIPLE_S (
  model_name VARCHAR2, -- Model name
  subject    VARCHAR2, -- Subject
  property   VARCHAR2, -- Property
  object     VARCHAR2) -- Object
  RETURN     SELF;

SDO_RDF_TRIPLE_S (
  model_name VARCHAR2, -- Model name
  subject    VARCHAR2, -- Subject
  property   VARCHAR2, -- Property
  object     CLOB) -- Object
  RETURN SELF;

GET_OBJ_VALUE() RETURN VARCHAR2;
</pre>
<p><a href="rdf-overview.htm#GUID-F1ED66D2-F2B7-40C6-899A-B67003BBD56D__CHDCCCIC">Example 1-8</a> uses the first constructor format to insert several triples.</p>
<div class="example" id="GUID-F1ED66D2-F2B7-40C6-899A-B67003BBD56D__CHDCCCIC">
<p class="titleinexample">Example 1-8 SDO_RDF_TRIPLE_S Constructor to Insert Triples</p>
<pre dir="ltr">INSERT INTO articles_rdf_data VALUES (2,
  SDO_RDF_TRIPLE_S (&#39;articles&#39;,&#39;&lt;http://nature.example.com/Article1&gt;&#39;,
    &#39;&lt;http://purl.org/dc/elements/1.1/creator&gt;&#39;,
    &#39;&#34;Jane Smith&#34;&#39;));

INSERT INTO articles_rdf_data VALUES (98,
  SDO_RDF_TRIPLE_S (&#39;articles:&lt;http://examples.com/ns#Graph1&gt;&#39;,
    &#39;&lt;http://nature.example.com/Article102&gt;&#39;,
    &#39;&lt;http://purl.org/dc/elements/1.1/creator&gt;&#39;,
    &#39;_:b1&#39;));
 
INSERT INTO articles_rdf_data VALUES (97,
  SDO_RDF_TRIPLE_S (&#39;articles:&lt;http://examples.com/ns#Graph1&gt;&#39;,
    &#39;_:b2&#39;,
    &#39;&lt;http://purl.org/dc/elements/1.1/creator&gt;&#39;,
    &#39;_:b1&#39;));
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="RDFRM593"></a><a id="RDFRM99898"></a><a id="RDFRM594"></a><a id="RDFRM592"></a>
<div class="props_rev_3"><a id="GUID-71464CC4-1C03-48A4-9A4C-0E671FF8F16E"></a>
<h2 id="RDFRM-GUID-71464CC4-1C03-48A4-9A4C-0E671FF8F16E" class="sect2"><span class="enumeration_section">1.6</span> Using the SEM_MATCH Table Function to Query Semantic Data</h2>
<div>
<p>To query semantic data, use the SEM_MATCH table function. This function has the following attributes:</p>
<pre dir="ltr">SEM_MATCH(
  query        VARCHAR2,
  models       SEM_MODELS,
  rulebases    SEM_RULEBASES,
  aliases      SEM_ALIASES,
  filter       VARCHAR2,
  index_status VARCHAR2,
  options      VARCHAR2,
  graphs       SEM_GRAPHS,
  named_graphs SEM_GRAPHS
 ) RETURN ANYDATASET;
</pre>
<p>The <code class="codeph">query</code> attribute is required. The other attributes are optional (that is, each can be a null value).</p>
<p>The <code class="codeph">query</code> attribute is a string literal (or concatenation of string literals) with one or more triple patterns, usually containing variables. (The <code class="codeph">query</code> attribute cannot be a bind variable or an expression involving a bind variable.) A triple pattern is a triple of atoms followed by a period. Each atom can be a variable (for example, <code class="codeph">?x</code>), a qualified name (for example, <code class="codeph">rdf:type</code>) that is expanded based on the default namespaces and the value of the aliases attribute, or a full URI (for example, <code class="codeph">&lt;http://www.example.org/family/Male&gt;</code>). In addition, the third atom can be a numeric literal (for example, <code class="codeph">3.14</code>), a plain literal (for example, <code class="codeph">&#34;Herman&#34;</code>), a language-tagged plain literal (for example, <code class="codeph">&#34;Herman&#34;@en</code>), or a typed literal (for example, <code class="codeph">&#34;123&#34;^^xsd:int</code>).</p>
<p>For example, the following <code class="codeph">query</code> attribute specifies three triple patterns to find grandfathers (that is, grandparents who are also male) and the height of each of their grandchildren:</p>
<pre dir="ltr">&#39;{ ?x :grandParentOf ?y . ?x rdf:type :Male . ?y :height ?h }&#39;
</pre>
<p><a id="d5610e3354" class="indexterm-anchor"></a><a id="d5610e3356" class="indexterm-anchor"></a>The <code class="codeph">models</code> attribute identifies the model or models to use. Its data type is SEM_MODELS, which has the following definition: <code class="codeph">TABLE OF VARCHAR2(25)</code>. If you are querying a virtual model, specify only the name of the virtual model and no other models. (Virtual models are explained in <a href="rdf-overview.htm#GUID-8B957406-5ED1-4579-9C23-0EDE2FDF2964">Virtual Models</a>.)</p>
<p><a id="d5610e3372" class="indexterm-anchor"></a><a id="d5610e3374" class="indexterm-anchor"></a>The <code class="codeph">rulebases</code> attribute identifies one or more rulebases whose rules are to be applied to the query. Its data type is SDO_RDF_RULEBASES, which has the following definition: <code class="codeph">TABLE OF VARCHAR2(25)</code>. If you are querying a virtual model, this attribute must be null.</p>
<p><a id="d5610e3386" class="indexterm-anchor"></a><a id="d5610e3388" class="indexterm-anchor"></a><a id="d5610e3390" class="indexterm-anchor"></a>The <code class="codeph">aliases</code> attribute identifies one or more namespaces, in addition to the default namespaces, to be used for expansion of qualified names in the query pattern. Its data type is SEM_ALIASES, which has the following definition: <code class="codeph">TABLE OF SEM_ALIAS</code>, where each SEM_ALIAS element identifies a namespace ID and namespace value. The SEM_ALIAS data type has the following definition: <code class="codeph">(namespace_id VARCHAR2(30), namespace_val VARCHAR2(4000))</code></p>
<p>The following default namespaces (<code class="codeph">namespace_id</code> and <code class="codeph">namespace_val</code> attributes) are used by the SEM_MATCH table function and the SEM_CONTAINS and SEM_RELATED operators:</p>
<pre dir="ltr">(&#39;ogc&#39;, &#39;http://www.opengis.net/ont/geosparql#&#39;)
(&#39;ogcf&#39;, &#39;http://www.opengis.net/def/function/geosparql/&#39;)
(&#39;ogcgml&#39;, &#39;http://www.opengis.net/ont/gml#&#39;)
(&#39;ogcsf&#39;, &#39;http://www.opengis.net/ont/sf#&#39;)
(&#39;orardf&#39;, &#39;http://xmlns.oracle.com/rdf/&#39;)
(&#39;orageo&#39;, &#39;http://xmlns.oracle.com/rdf/geo/&#39;)
(&#39;owl&#39;,    &#39;http://www.w3.org/2002/07/owl#&#39;)
(&#39;rdf&#39;,    &#39;http://www.w3.org/1999/02/22-rdf-syntax-ns#&#39;)
(&#39;rdfs&#39;,   &#39;http://www.w3.org/2000/01/rdf-schema#&#39;)
(&#39;xsd&#39;,    &#39;http://www.w3.org/2001/XMLSchema#&#39;)
</pre>
<p>You can override any of these defaults by specifying the <code class="codeph">namespace_id</code> value and a different <code class="codeph">namespace_val</code> value in the <code class="codeph">aliases</code> attribute.</p>
<p><a id="d5610e3426" class="indexterm-anchor"></a>The <code class="codeph">filter</code> attribute identifies any additional selection criteria. If this attribute is not null, it should be a string in the form of a <code class="codeph">WHERE</code> clause without the <code class="codeph">WHERE</code> keyword. For example: <code class="codeph">&#39;(h &gt;= &#39;&#39;6&#39;&#39;)&#39;</code> to limit the result to cases where the height of the grandfather&#39;s grandchild is 6 or greater (using the example of triple patterns earlier in this section).</p>
<div class="infobox-note" id="GUID-71464CC4-1C03-48A4-9A4C-0E671FF8F16E__GUID-4BEFCB08-F7B5-4C9C-B2F2-8452837AA0A3">
<p class="notep1">Note:</p>
<p>Instead of using the <code class="codeph">filter</code> attribute, you are encouraged to use the FILTER keyword inside your query pattern whenever possible (as explained in <a href="rdf-overview.htm#GUID-55180C4B-7B8B-4F45-A948-A46D227935FA">Graph Patterns: Support for Curly Brace Syntax_ and OPTIONAL_ FILTER_ UNION_ and GRAPH Keywords</a>). Using the FILTER keyword is likely to give better performance because of internal optimizations. The <code class="codeph">filter</code> argument, however, can be useful if you require SQL constructs that cannot be expressed with the FILTER keyword.</p>
</div>
<p><a id="d5610e3457" class="indexterm-anchor"></a><a id="d5610e3461" class="indexterm-anchor"></a><a id="d5610e3465" class="indexterm-anchor"></a>The <code class="codeph">index_status</code> attribute lets you query semantic data even when the relevant entailment does not have a valid status. (If you are querying a virtual model, this attribute refers to the entailment associated with the virtual model.) If this attribute is null, the query returns an error if the entailment does not have a valid status. If this attribute is not null, it must be the string <code class="codeph">INCOMPLETE</code> or <code class="codeph">INVALID</code>. For an explanation of query behavior with different <code class="codeph">index_status</code> values, see <a href="rdf-overview.htm#GUID-6F4E4658-4AA3-4108-92A0-F4D84E10D0B6">Performing Queries with Incomplete or Invalid Entailments</a>.</p>
<p><a id="d5610e3488" class="indexterm-anchor"></a>The <code class="codeph">options</code> attribute identifies options that can affect the results of queries. Options are expressed as keyword-value pairs. The following options are supported:</p>
<ul style="list-style-type: disc;">
<li>
<p><a id="d5610e3499" class="indexterm-anchor"></a><a id="d5610e3503" class="indexterm-anchor"></a><a id="d5610e3507" class="indexterm-anchor"></a><a id="d5610e3509" class="indexterm-anchor"></a><code class="codeph">ALL_BGP_HASH</code> and <code class="codeph">ALL_BGP_NL</code> are global query optimizer hints that specify that all inter-BGP joins (for example. the join between the root BGP and an OPTIONAL BGP) should use the specified join type. (BGP stands for <span class="italic">basic graph pattern</span>. From the W3C SPARQL Query Language for RDF Recommendation: &#34;SPARQL graph pattern matching is defined in terms of combining the results from matching basic graph patterns. A sequence of triple patterns interrupted by a filter comprises a single basic graph pattern. Any graph pattern terminates a basic graph pattern.&#34;</p>
<p>The <code class="codeph">BGP_JOIN(USE_NL)</code> and <code class="codeph">BGP_JOIN(USE_HASH)</code> HINT0 query optimizer hints can be used to control the join type with finer granularity.</p>
<p><a href="rdf-overview.htm#GUID-55180C4B-7B8B-4F45-A948-A46D227935FA__CIHHGHED">Example 1-14</a> shows the ALL_BGP_HASH option used in a SEM_MATCH query.</p>
</li>
<li>
<p><a id="d5610e3533" class="indexterm-anchor"></a><a id="d5610e3537" class="indexterm-anchor"></a><code class="codeph">ALL_LINK_HASH</code> and <code class="codeph">ALL_LINK_NL</code> are global query optimizer hints that specify the join type for all RDF_LINK$ joins (that is, all joins between triple patterns within a BGP). <code class="codeph">ALL_LINK_HASH</code> and <code class="codeph">ALL_LINK_NL</code> can also be used within a HINT0 query optimizer hint for finer granularity.</p>
</li>
<li>
<p><code class="codeph">ALL_MAX_PP_DEPTH(n)</code> is a global query optimizer hint that sets the maximum depth to use when evaluating * and + property path operators. The default value is 10. The <code class="codeph">MAP_PP_DEPTH(n)</code> HINT0 hint can be used to specify maximum depth with finer granularity.</p>
</li>
<li>
<p><a id="d5610e3563" class="indexterm-anchor"></a><code class="codeph">ALL_ORDERED</code> is a global query optimizer hint that specifies that the triple patterns in each BGP in the query should be evaluated in order.</p>
<p><a href="rdf-overview.htm#GUID-55180C4B-7B8B-4F45-A948-A46D227935FA__CIHHGHED">Example 1-14</a> shows the ALL_ORDERED option used in a SEM_MATCH query.</p>
</li>
<li>
<p><code class="codeph">ALL_USE_PP_HASH</code> and <code class="codeph">ALL_USE_PP_NL</code> are global query optimizer hints that specify the join type to use when evaluating property path expressions. The <code class="codeph">USE_PP_HASH</code> and <code class="codeph">USE_PP_NL</code> HINT0 hints can be used for specifying join type with finer granularity.</p>
</li>
<li>
<p><a id="d5610e3589" class="indexterm-anchor"></a><code class="codeph">ALLOW_DUP=T</code> generates an underlying SQL statement that performs a &#34;union all&#34; instead of a union of the semantic models and inferred data (if applicable). This option may introduce more rows (duplicate triples) in the result set, and you may need to adjust the application logic accordingly. If you do not specify this option, duplicate triples are automatically removed across all the models and inferred data to maintain the set semantics of merged RDF graphs; however, removing duplicate triples increases query processing time. In general, specifying <code class="codeph">&#39;ALLOW_DUP=T&#39;</code> improves performance significantly when multiple semantic models are involved in a SEM_MATCH query.</p>
<p>If you are querying a virtual model, specifying <code class="codeph">ALLOW_DUP=T</code> causes the SEMV_<span class="italic">vm_name</span> view to be queried; otherwise, the SEMU_<span class="italic">vm_name</span> view is queried.</p>
</li>
<li>
<p><code class="codeph">ALLOW_PP_DUP=</code>T allows duplicate results for + and * property path queries. Allowing duplicate results may return the first result rows faster.</p>
</li>
<li>
<p><code class="codeph">CLOB_AGG_SUPPORT=T</code> enables support for CLOB values for the following aggregates: MIN, MAX, GROUP_CONCAT, SAMPLE. Note that enabling CLOB support incurs a significant performance penalty.</p>
</li>
<li>
<p><code class="codeph">CLOB_EXP_SUPPORT=T</code> enables support for CLOB values for some built-in SPARQL functions. Note that enabling CLOB support incurs a significant performance penalty.</p>
</li>
<li>
<p><a id="d5610e3627" class="indexterm-anchor"></a><code class="codeph">CONSTRUCT_STRICT=T</code> eliminates invalid RDF triples from the result of SPARQL CONSTRUCT or SPARQL DESCRIBE syntax queries. RDF triples with literals in the subject position or literals or blank nodes in the predicate position are considered invalid.</p>
</li>
<li>
<p><a id="d5610e3636" class="indexterm-anchor"></a><code class="codeph">CONSTRUCT_UNIQUE=T</code> eliminates duplicate RDF triples from the result of SPARQL CONSTRUCT or SPARQL DESCRIBE syntax queries.</p>
</li>
<li>
<p><code class="codeph">DO_UNESCAPE=T</code> causes characters in the following return columns to be unescaped according to the W3C N-Triples specification (<a href="http://www.w3.org/TR/rdf-testcases/#ntriples" target="_blank"><code class="codeph">http://www.w3.org/TR/rdf-testcases/#ntriples</code></a>): var, var$_PREFIX, var$_SUFFIX, var$RDFCLOB, var$RDFLTYP, var$RDFLANG, and var$RDFTERM.</p>
<p>See also the reference information for <a href="sem-apis-ref.htm#GUID-3D3BEAB7-E0D4-4B92-9A89-07B2F7C303FC">SEM_APIS.ESCAPE_CLOB_TERM</a>, <a href="sem-apis-ref.htm#GUID-39BAFCE0-7224-4FA1-958B-0A7DADC663B5">SEM_APIS.ESCAPE_CLOB_VALUE</a>, <a href="sem-apis-ref.htm#GUID-A9066C1C-FC5C-407E-A26A-35F73C1D9A14">SEM_APIS.ESCAPE_RDF_TERM</a>, <a href="sem-apis-ref.htm#GUID-6EBBD65B-EA5D-4196-9C61-258682EDF499">SEM_APIS.ESCAPE_RDF_VALUE</a>, <a href="sem-apis-ref.htm#GUID-397D505F-7113-4E63-9481-4B1CF10F39A4">SEM_APIS.UNESCAPE_CLOB_TERM</a>, <a href="sem-apis-ref.htm#GUID-A52C68D7-90F4-46C1-9552-457261D9BCC5">SEM_APIS.UNESCAPE_CLOB_VALUE</a>, <a href="sem-apis-ref.htm#GUID-42EC5310-ABD4-442E-BCD3-38B0FCBD8D62">SEM_APIS.UNESCAPE_RDF_TERM</a>, and <a href="sem-apis-ref.htm#GUID-8876C40E-C037-4C0C-96BF-079FCD345150">SEM_APIS.UNESCAPE_RDF_VALUE</a>.</p>
</li>
<li>
<p><a id="d5610e3691" class="indexterm-anchor"></a><a id="d5610e3695" class="indexterm-anchor"></a><code class="codeph">FINAL_VALUE_HASH</code> and <code class="codeph">FINAL_VALUE_NL</code> are global query optimizer hints that specify the join method that should be used to obtain the lexical values for any query variables that are not used in a FILTER clause.</p>
</li>
<li>
<p><a id="d5610e3707" class="indexterm-anchor"></a><code class="codeph">GRAPH_MATCH_UNNAMED=T</code> allows unnamed triples (null <code class="codeph">G_ID</code>) to be matched inside GRAPH clauses. That is, two triples will satisfy the graph join condition if their graphs are equal or if one or both of the graphs are null. This option may be useful when your dataset includes unnamed TBOX triples or unnamed entailed triples.</p>
</li>
<li>
<p><a id="d5610e3719" class="indexterm-anchor"></a><code class="codeph">HINT0={&lt;hint-string&gt;}</code> (pronounced and written &#34;hint&#34; and the number zero) specifies one or more keywords with hints to influence the execution plan and results of queries. Conceptually, a graph pattern with <span class="italic">n</span> triple patterns and referring to <span class="italic">m</span> distinct variables results in an (<span class="italic">n</span>+<span class="italic">m</span>)-way join: <span class="italic">n</span>-way self-join of the target RDF model or models and optionally the corresponding entailment, and then <span class="italic">m</span> joins with RDF_VALUE$ for looking up the values for the <span class="italic">m</span> variables. A hint specification affects the join order and join type used for the query execution.</p>
<p>The hint specification, <span class="italic">&lt;hint-string&gt;</span>, uses keywords, some of which have parameters consisting of a sequence or set of aliases, or references, for individual triple patterns and variables used in the query. Aliases for triple patterns are of the form t<span class="italic">i</span> where <span class="italic">i</span> refers to the 0-based ordinal numbers of triple patterns in the query. For example, the alias for the first triple pattern in a query is <code class="codeph">t0</code>, the alias for the second one is <code class="codeph">t1</code>, and so on. Aliases for the variables used in a query are simply the names of those variables. Thus, <code class="codeph">?x</code> will be used in the hint specification as the alias for a variable <code class="codeph">?x</code> used in the graph pattern.</p>
<p>Hints used for influencing query execution plans include LEADING(<span class="italic">&lt;sequence of aliases&gt;</span>), USE_NL(<span class="italic">&lt;set of aliases&gt;</span>), USE_HASH(<span class="italic">&lt;set of aliases&gt;</span>), and INDEX(<span class="italic">&lt;alias&gt; &lt;index_name&gt;</span>). These hints have the same format and basic meaning as hints in SQL statements, which are explained in <a class="olink SQLRF002" target="_blank" href="../SQLRF/sql_elements.htm#SQLRF002"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<p><a href="rdf-overview.htm#GUID-71464CC4-1C03-48A4-9A4C-0E671FF8F16E__CIHJJFHE">Example 1-10</a> shows the HINT0 option used in a SEM_MATCH query.</p>
</li>
<li>
<p><a id="d5610e3796" class="indexterm-anchor"></a><code class="codeph">HTTP_METHOD=POST_PAR</code> indicates that the HTTP POST method with URL-encoded parameters pass should be used for the SERVICE request. The default option for requests is the HTTP GET method. For more information about SPARQL protocol, see <a href="http://www.w3.org/TR/2013/REC-sparql11-protocol-20130321/#protocol" target="_blank"><code class="codeph">http://www.w3.org/TR/2013/REC-sparql11-protocol-20130321/#protocol</code></a>.</p>
</li>
<li>
<p><code class="codeph">INF_ONLY=T</code> queries only the entailed graph for the specified models and rulebases.</p>
</li>
<li>
<p><code class="codeph">PLUS_RDFT=T</code> can be used with SPARQL SELECT syntax (see <a href="rdf-overview.htm#GUID-7CEE1E1B-507A-4AE5-9998-9193269BF692">Expressions in the SELECT Clause</a>) to additionally return a <span class="italic">var</span>$RDFTERM CLOB column for each projected query variable. The value for this column is equivalent to the result of <a href="sem-apis-ref.htm#GUID-E41D66C7-E47F-47AB-B43A-58F3869BF1A6">SEM_APIS.COMPOSE_RDF_TERM</a>(<span class="italic">var</span>, <span class="italic">var</span>$RDFVTYP, <span class="italic">var</span>$RDFLTYP, <span class="italic">var</span>$RDFLANG, <span class="italic">var</span>$RDFCLOB). When using this option, the return columns for each variable var will be <span class="italic">var</span>, <span class="italic">var</span>$RDFVID, <span class="italic">var</span>$_PREFIX, <span class="italic">var</span>$_SUFFIX, <span class="italic">var</span>$RDFVTYP, <span class="italic">var</span>$RDFCLOB, <span class="italic">var</span>$RDFLTYP, <span class="italic">var</span>$RDFLANG, and <span class="italic">var</span>$RDFTERM.</p>
</li>
<li>
<p><code class="codeph">PLUS_RDFT=VC</code> can be used with SPARQL SELECT syntax (see <a href="rdf-overview.htm#GUID-7CEE1E1B-507A-4AE5-9998-9193269BF692">Expressions in the SELECT Clause</a>) to additionally return a var$RDFTERM VARCHAR2(4000) column for each projected query variable. The value for this column is equivalent to the result of <a href="sem-apis-ref.htm#GUID-E41D66C7-E47F-47AB-B43A-58F3869BF1A6">SEM_APIS.COMPOSE_RDF_TERM</a>(var, var$RDFVTYP, var$RDFLTYP, var$RDFLANG). When using this option, the return columns for each variable var will be var, var$RDFVID, var$_PREFIX, var$_SUFFIX, var$RDFVTYP, var$RDFCLOB, var$RDFLTYP, var$RDFLANG, and var$RDFTERM.</p>
</li>
<li>
<p><code class="codeph">PROJ_EXACT_VALUES=T</code> disables canonicalization of values returned from functions and of constant values used in value assignment statements. Such values are canonicalized by default.</p>
</li>
<li>
<p><a id="d5610e3893" class="indexterm-anchor"></a><code class="codeph">SERVICE_CLOB=F</code> sets the column values of var$RDFCLOB to null instead of saving values when calling the service. If CLOB data is not needed in your application, performance can be improved by using this option to skip CLOB processing.</p>
</li>
<li>
<p><a id="d5610e3902" class="indexterm-anchor"></a><code class="codeph">SERVICE_ESCAPE=F</code> disables character escaping for RDF literal values returned by SPARQL SERVICE calls. RDF literal values are escaped by default. If character escaping is not relevant for your application, performance can be improved by disabling character escaping.</p>
</li>
<li>
<p><a id="d5610e3912" class="indexterm-anchor"></a><code class="codeph">SERVICE_JPDWN=T</code> is a query optimizer hint for using nested loop join in SPARQL SERVICE. <a href="rdf-overview.htm#GUID-EC21930C-2EEB-456C-9A9B-2D794F6128B5__CIHEIBAH">Example 1-70</a> shows the <code class="codeph">SERVICE_JPDWN=T</code> option used in a SEM_MATCH query.</p>
</li>
<li>
<p><a id="d5610e3926" class="indexterm-anchor"></a><code class="codeph">SERVICE_PROXY=</code><span class="italic"><code class="codeph">&lt;proxy-string&gt;</code></span> sets a proxy address to be used when performing http connections. The given proxy-string will be used in SERVICE queries. <a href="rdf-overview.htm#GUID-84CDC448-A7A3-497D-BCE9-0A84864D50F1__CIHDCJFC">Example 1-73</a> shows a SEM_MATCH query including a proxy address.</p>
</li>
<li>
<p><a id="d5610e3940" class="indexterm-anchor"></a><code class="codeph">STRICT_AGG_CARD=T</code> uses SPARQL semantics (one null row) instead of SQL semantics (zero rows) for aggregate queries with graph patterns that fail to match. This option incurs a slight performance penalty.</p>
</li>
<li>
<p><code class="codeph">STRICT_DEFAULT=T</code> restricts the default graph to unnamed triples when no dataset information is specified.</p>
</li>
</ul>
<p><a id="d5610e3953" class="indexterm-anchor"></a>The <code class="codeph">graphs</code> attribute specifies the set of named graphs from which to construct the default graph for a SEM_MACH query. Its data type is SEM_GRAPHS, which has the following definition: <code class="codeph">TABLE OF VARCHAR2(4000)</code>. The default value for this attribute is <code class="codeph">NULL</code>. When <code class="codeph">graphs</code> is <code class="codeph">NULL</code>, the &#34;union all&#34; of all graphs in the set of query models is used as the default graph.</p>
<p><a id="d5610e3974" class="indexterm-anchor"></a>The <code class="codeph">named_graphs</code> attribute specifies the set of named graphs that can be matched by a GRAPH clause. Its data type is SEM_GRAPHS, which has the following definition: <code class="codeph">TABLE OF VARCHAR2(4000)</code>. The default value for this attribute is <code class="codeph">NULL</code>. When named_graphs is <code class="codeph">NULL</code>, all named graphs in the set of query models can be matched by a GRAPH clause.</p>
<p>The SEM_MATCH table function returns an object of type ANYDATASET, with elements that depend on the input variables. In the following explanations, <span class="italic">var</span> represents the name of a variable used in the query. For each variable <span class="italic">var</span>, the result elements have the following attributes: <span class="italic">var</span>, <span class="italic">var</span>$RDFVID, <span class="italic">var</span>$_PREFIX, <span class="italic">var</span>$_SUFFIX, <span class="italic">var</span>$RDFVTYP, <span class="italic">var</span>$RDFCLOB, <span class="italic">var</span>$RDFLTYP, and <span class="italic">var</span>$RDFLANG.</p>
<p>In such cases, <span class="italic">var</span> has the lexical value bound to the variable, <span class="italic">var</span>$RDFVID has the VALUE_ID of the value bound to the variable, <span class="italic">var</span>$_PREFIX and <span class="italic">var</span>$_SUFFIX are the <span class="italic">prefix</span> and <span class="italic">suffix</span> of the value bound to the variable, <span class="italic">var</span>$RDFVTYP indicates the type of value bound to the variable (<code class="codeph">URI</code>, <code class="codeph">LIT</code> [literal], or <code class="codeph">BLN</code> [blank node]), <span class="italic">var</span>$RDFCLOB has the lexical value bound to the variable if the value is a long literal, <span class="italic">var</span>$RDFLTYP indicates the type of literal bound if a literal is bound, and <span class="italic">var</span>$RDFLANG has the language tag of the bound literal if a literal with language tag is bound. <span class="italic">var</span>$RDFCLOB is of type CLOB, while all other attributes are of type VARCHAR2.</p>
<p>For a literal value or a blank node, its prefix is the value itself and its suffix is null. For a URI value, its prefix is the left portion of the value up to and including the rightmost occurrence of any of the three characters <span class="italic">/</span> (slash), <span class="italic">#</span> (pound), or <span class="italic">:</span> (colon), and its suffix is the remaining portion of the value to the right. For example, the prefix and suffix for the URI value <code class="codeph">http://www.example.org/family/grandParentOf</code> are <code class="codeph">http://www.example.org/family/</code> and <code class="codeph">grandParentOf</code>, respectively.</p>
<p>Along with columns for variable values, a SEM_MATCH query that uses SPARQL SELECT syntax returns one additional NUMBER column, SEM$ROWNUM, which can be used to ensure the correct result ordering for queries that involve a SPARQL ORDER BY clause.</p>
<p>A SEM_MATCH query that uses SPARQL ASK syntax returns the columns ASK, ASK$RDFVID, ASK$_PREFIX, ASK$_SUFFIX, ASK$RDFVTYP, ASK$RDFCLOB, ASK$RDFLTYP, ASK$RDFLANG, and SEM$ROWNUM. This is equivalent to a SPARQL SELECT syntax query that projects a single <code class="codeph">?ask</code> variable.</p>
<p>A SEM_MATCH query that uses SPARQL CONSTRUCT or SPARQL DESCRIBE syntax returns columns that contain RDF triple data rather than query result bindings. Such queries return values for subject, predicate and object components. See <a href="rdf-overview.htm#GUID-9DAC9FA2-0546-4744-9FF3-FD61B07130CA">Graph Patterns: Support for SPARQL CONSTRUCT Syntax</a>for details.</p>
<p>To use the SEM_RELATED operator to query an OWL ontology, see <a href="owl-concepts.htm#GUID-91E180EF-CCF0-4E56-859E-D25C019A31A0">Using Semantic Operators to Query Relational Data</a>.</p>
<p>When you are querying multiple models or querying one or more models and the corresponding entailment, consider using virtual models (explained in <a href="rdf-overview.htm#GUID-8B957406-5ED1-4579-9C23-0EDE2FDF2964">Virtual Models</a>) because of the potential performance benefits.</p>
<p>This section also contains the following topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="rdf-overview.htm#GUID-6F4E4658-4AA3-4108-92A0-F4D84E10D0B6">Performing Queries with Incomplete or Invalid Entailments</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-55180C4B-7B8B-4F45-A948-A46D227935FA">Graph Patterns: Support for Curly Brace Syntax_ and OPTIONAL_ FILTER_ UNION_ and GRAPH Keywords</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-0BC4B052-F1DA-45C8-9164-21829FC6500B">Graph Patterns: Support for SPARQL SELECT Syntax</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-7DDF240B-912C-4844-B482-36B30EB3037B">Graph Patterns: Support for SPARQL 1.1 Constructs</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-6ACF73EA-A1A7-49D2-ADB9-15B50AE8B73E">Graph Patterns: Support for SPARQL 1.1 Federated Query</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-5D952ADA-7170-4D64-A07D-F86B32884FF5">Inline Query Optimizer Hints</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-7001881A-9DE6-4F3D-8593-F31F2004FE37">Full-Text Search</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-3986DFD4-F23A-4379-A859-9EA1F1582D43">Spatial Support</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-E04ABC63-304C-4706-812B-D54448FCE55C">Best Practices for Query Performance</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-EA14A0A1-2AF6-41A7-8362-F9600874F7F0">Special Considerations When Using SEM_MATCH</a></p>
</li>
</ul>
<div class="example" id="GUID-71464CC4-1C03-48A4-9A4C-0E671FF8F16E__CHDDBEHI">
<p class="titleinexample">Example 1-9 SEM_MATCH Table Function</p>
<p><a href="rdf-overview.htm#GUID-71464CC4-1C03-48A4-9A4C-0E671FF8F16E__CHDDBEHI">Example 1-9</a> selects all grandfathers (grandparents who are male) and their grandchildren from the <code class="codeph">family</code> model, using inferencing from both the <code class="codeph">RDFS</code> and <code class="codeph">family_rb</code> rulebases. (This example is an excerpt from <a href="rdf-overview.htm#GUID-ADC458F4-570C-4081-8844-107F9F63E915__CHDGCDGI">Example 1-90</a> in <a href="rdf-overview.htm#GUID-ADC458F4-570C-4081-8844-107F9F63E915">Example: Family Information</a>.)</p>
<pre dir="ltr">SELECT x, y
  FROM TABLE(SEM_MATCH(
    &#39;{?x :grandParentOf ?y . ?x rdf:type :Male}&#39;,
    SEM_Models(&#39;family&#39;),
    SEM_Rulebases(&#39;RDFS&#39;,&#39;family_rb&#39;), 
    SEM_ALIASES(SEM_ALIAS(&#39;&#39;,&#39;http://www.example.org/family/&#39;)),
    null));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-71464CC4-1C03-48A4-9A4C-0E671FF8F16E__CIHJJFHE">
<p class="titleinexample">Example 1-10 HINT0 Option with SEM_MATCH Table Function</p>
<p><a href="rdf-overview.htm#GUID-71464CC4-1C03-48A4-9A4C-0E671FF8F16E__CIHJJFHE">Example 1-10</a> is functionally the same as <a href="rdf-overview.htm#GUID-71464CC4-1C03-48A4-9A4C-0E671FF8F16E__CHDDBEHI">Example 1-9</a>, but it adds the <code class="codeph">HINT0</code> option.</p>
<pre dir="ltr">SELECT x, y
  FROM TABLE(SEM_MATCH(
    &#39;{?x :grandParentOf ?y . ?x rdf:type :Male}&#39;,
    SEM_Models(&#39;family&#39;),
    SEM_Rulebases(&#39;RDFS&#39;,&#39;family_rb&#39;), 
    SEM_Aliases(SEM_ALIAS(&#39;&#39;,&#39;http://www.example.org/family/&#39;)),
    null,
    null,
    <span class="bold">&#39;HINT0={LEADING(t0 t1) USE_NL(?x ?y) GET_CANON_VALUE(?x ?y)}&#39;</span>));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-71464CC4-1C03-48A4-9A4C-0E671FF8F16E__CIHJJAGJ">
<p class="titleinexample">Example 1-11 SEM_MATCH Table Function</p>
<p><a href="rdf-overview.htm#GUID-71464CC4-1C03-48A4-9A4C-0E671FF8F16E__CIHJJAGJ">Example 1-11</a> uses the Pathway/Genome <code class="codeph">BioPax</code> ontology to get all chemical compound types that belong to both <code class="codeph">Proteins</code> and <code class="codeph">Complexes</code>:</p>
<pre dir="ltr">SELECT t.r 
  FROM TABLE (SEM_MATCH ( 
      &#39;{?r rdfs:subClassOf :Proteins .  
        ?r rdfs:subClassOf :Complexes}&#39;, 
      SEM_Models (&#39;BioPax&#39;), 
      SEM_Rulebases (&#39;rdfs&#39;), 
      SEM_Aliases (SEM_ALIAS(&#39;&#39;, &#39;http://www.biopax.org/release1/biopax-release1.owl&#39;)),
      NULL)) t;
</pre>
<p>As shown in <a href="rdf-overview.htm#GUID-71464CC4-1C03-48A4-9A4C-0E671FF8F16E__CIHJJAGJ">Example 1-11</a>, the search pattern for the SEM_MATCH table function is specified using SPARQL-like syntax where the variable starts with the question-mark character (<code class="codeph">?</code>). In this example, the variable <code class="codeph">?r</code> must match to the same term, and thus it must be a subclass of both <code class="codeph">Proteins</code> and <code class="codeph">Complexes</code>.</p>
</div>
<!-- class="example" --></div>
<a id="RDFRM595"></a>
<div class="props_rev_3"><a id="GUID-6F4E4658-4AA3-4108-92A0-F4D84E10D0B6"></a>
<h3 id="RDFRM-GUID-6F4E4658-4AA3-4108-92A0-F4D84E10D0B6" class="sect3"><span class="enumeration_section">1.6.1</span> Performing Queries with Incomplete or Invalid Entailments</h3>
<div>
<p>You can query semantic data even when the relevant entailment does not have a valid status if you specify the string value <code class="codeph">INCOMPLETE</code> or <code class="codeph">INVALID</code> for the <code class="codeph">index_status</code> attribute of the SEM_MATCH table function. (The entailment status is stored in the STATUS column of the MDSYS.SEM_RULES_INDEX_INFO view, which is described in <a href="rdf-overview.htm#GUID-AE3CFE93-13CF-444E-9523-0693572851E7">Entailments (Rules Indexes)</a>. The SEM_MATCH table function is described in <a href="rdf-overview.htm#GUID-71464CC4-1C03-48A4-9A4C-0E671FF8F16E">Using the SEM_MATCH Table Function to Query Semantic Data</a>.)</p>
<p>The index_status attribute value affects the query behavior as follows:</p>
<ul style="list-style-type: disc;">
<li>
<p>If the entailment has a valid status, the query behavior is not affected by the value of the <code class="codeph">index_status</code> attribute.</p>
</li>
<li>
<p>If you provide no value or specify a null value for <code class="codeph">index_status</code>, the query returns an error if the entailment does not have a valid status.</p>
</li>
<li>
<p>If you specify the string <code class="codeph">INCOMPLETE</code> for the <code class="codeph">index_status</code> attribute, the query is performed if the status of the entailment is incomplete or valid.</p>
</li>
<li>
<p>If you specify the string <code class="codeph">INVALID</code> for the <code class="codeph">index_status</code> attribute, the query is performed regardless of the actual status of the entailment (invalid, incomplete, or valid).</p>
</li>
</ul>
<p>However, the following considerations apply if the status of the entailment is incomplete or invalid:</p>
<ul style="list-style-type: disc;">
<li>
<p>If the status is incomplete, the content of an entailment may be approximate, because some triples that are inferable (due to the recent insertions into the underlying models) may not actually be present in the entailment, and therefore results returned by the query may be inaccurate.</p>
</li>
<li>
<p>If the status is invalid, the content of the entailment may be approximate, because some triples that are no longer inferable (due to recent modifications to the underlying models or rulebases, or both) may still be present in the entailment, and this may affect the accuracy of the result returned by the query. In addition to possible presence of triples that are no longer inferable, some inferable rows may not actually be present in the entailment.</p>
</li>
</ul>
</div>
</div>
<a id="RDFRM168"></a><a id="RDFRM99900"></a><a id="RDFRM99901"></a><a id="RDFRM165"></a><a id="RDFRM166"></a><a id="RDFRM167"></a><a id="RDFRM99902"></a><a id="RDFRM169"></a><a id="RDFRM99903"></a><a id="RDFRM99899"></a>
<div class="props_rev_3"><a id="GUID-55180C4B-7B8B-4F45-A948-A46D227935FA"></a>
<h3 id="RDFRM-GUID-55180C4B-7B8B-4F45-A948-A46D227935FA" class="sect3"><span class="enumeration_section">1.6.2</span> Graph Patterns: Support for Curly Brace Syntax, and OPTIONAL, FILTER, UNION, and GRAPH Keywords</h3>
<div>
<p>The SEM_MATCH table function accepts the syntax for the graph pattern in which a sequence of triple patterns is enclosed within curly braces. The period is usually required as a separator unless followed by the OPTIONAL, FILTER, UNION, or GRAPH keyword. With this syntax, you can do any combination of the following:</p>
<ul style="list-style-type: disc;">
<li>
<p>Use the OPTIONAL construct to retrieve results even in the case of a partial match</p>
</li>
<li>
<p>Use the FILTER construct to specify a filter expression in the graph pattern to restrict the solutions to a query</p>
</li>
<li>
<p>Use the UNION construct to match one of multiple alternative graph patterns</p>
</li>
<li>
<p>Use the GRAPH construct (explained in <a href="rdf-overview.htm#GUID-45654D98-A2B5-4815-949D-2F48FA66DA51">GRAPH Keyword Support</a>) to scope graph pattern matching to a set of named graphs</p>
</li>
</ul>
<p>In addition to arithmetic operators (+, -, *, /), Boolean operators and logical connectives (||, &amp;&amp;, !), and comparison operators (&lt;, &gt;, &lt;=, &gt;=, =, !=), several built-in functions are available for use in FILTER clauses. <a href="rdf-overview.htm#GUID-55180C4B-7B8B-4F45-A948-A46D227935FA__CIHHJDHG" title="Built-in Functions Available for FILTER Clause">Table 1-12</a> lists built-in functions that you can use in the FILTER clause. In the Description column of <a href="rdf-overview.htm#GUID-55180C4B-7B8B-4F45-A948-A46D227935FA__CIHHJDHG" title="Built-in Functions Available for FILTER Clause">Table 1-12</a>, <span class="italic">x</span>, <span class="italic">y</span>, and <span class="italic">z</span> are arguments of the appropriate types.</p>
<div class="tblformal" id="GUID-55180C4B-7B8B-4F45-A948-A46D227935FA__CIHHJDHG">
<p class="titleintable">Table 1-12 Built-in Functions Available for FILTER Clause</p>
<table class="cellalignment4510" title="Built-in Functions Available for FILTER Clause" summary="Built-in Functions Available for FILTER Clause">
<thead>
<tr class="cellalignment4501">
<th class="cellalignment4548" id="d5610e4437">Function</th>
<th class="cellalignment4554" id="d5610e4440">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e4445" headers="d5610e4437">
<p>ABS(RDF term)</p>
</td>
<td class="cellalignment4555" headers="d5610e4445 d5610e4440">
<p>Returns the absolute value of <code class="codeph">term</code>. If <code class="codeph">term</code> is a non-numerical value, returns null.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e4458" headers="d5610e4437">
<p>BNODE(literal) or BNODE()</p>
</td>
<td class="cellalignment4555" headers="d5610e4458 d5610e4440">
<p>Constructs a blank node that is distinct from all blank nodes in the dataset of the query, and those created by this function in other queries. The form with no arguments results in a distinct blank node in every call. The form with a simple literal results in distinct blank nodes for different simple literals, and the same blank node for calls with the same simple literal.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e4465" headers="d5610e4437">
<p>BOUND(variable)</p>
</td>
<td class="cellalignment4555" headers="d5610e4465 d5610e4440">
<p>BOUND(x) returns <code class="codeph">true</code> if <code class="codeph">x</code> is bound (that is, non-null) in the result, <code class="codeph">false</code> otherwise.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e4481" headers="d5610e4437">
<p>CEIL(RDF term)</p>
</td>
<td class="cellalignment4555" headers="d5610e4481 d5610e4440">
<p>Returns the closest number with no fractional part which is not less than term. If term is a non-numerical value, returns null.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e4488" headers="d5610e4437">
<p>COALESCE(term list)</p>
</td>
<td class="cellalignment4555" headers="d5610e4488 d5610e4440">
<p>Returns the first element on the argument list that is evaluated without raising an error. Unbound variables raise an error if evaluated. Returns null if there are no valid elements in the term list.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e4495" headers="d5610e4437">
<p>CONCAT(term list)</p>
</td>
<td class="cellalignment4555" headers="d5610e4495 d5610e4440">
<p>Returns an <code class="codeph">xsd:String</code> value resulting of the concatenation of the string values in the term list.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e4505" headers="d5610e4437">
<p>CONTAINS(literal, match)</p>
</td>
<td class="cellalignment4555" headers="d5610e4505 d5610e4440">
<p>Returns <code class="codeph">true</code> if the string <code class="codeph">match</code> is found anywhere in <code class="codeph">literal</code>. It returns <code class="codeph">false</code> otherwise.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e4524" headers="d5610e4437">
<p>DATATYPE(literal)</p>
</td>
<td class="cellalignment4555" headers="d5610e4524 d5610e4440">
<p>DATATYPE(x) returns a URI representing the datatype of <code class="codeph">x</code>.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e4534" headers="d5610e4437">
<p>DAY(argument)</p>
</td>
<td class="cellalignment4555" headers="d5610e4534 d5610e4440">
<p>Returns an integer corresponding to the day part of argument. If the argument is not a <code class="codeph">dateTime</code> or <code class="codeph">date</code> data type, it returns a null value.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e4547" headers="d5610e4437">
<p>ENCODE_FOR_URI(literal)</p>
</td>
<td class="cellalignment4555" headers="d5610e4547 d5610e4440">
<p>Returns a string where the reserved characters in <code class="codeph">literal</code> are escaped and converted to its percent-encode form.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e4557" headers="d5610e4437">
<p>EXISTS(pattern)</p>
</td>
<td class="cellalignment4555" headers="d5610e4557 d5610e4440">
<p>Returns <code class="codeph">true</code> if the pattern matches the query data set, using the current bindings in the containing group graph pattern and the current active graph. If there are no matches, it returns <code class="codeph">false</code>.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e4571" headers="d5610e4437">
<p>FLOOR(RDF term)</p>
</td>
<td class="cellalignment4555" headers="d5610e4571 d5610e4440">
<p>Returns the closest number with no fractional part which is less than <code class="codeph">term</code>. If <code class="codeph">term</code> is a non-numerical value, returns null.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e4584" headers="d5610e4437">
<p>HOURS(argument)</p>
</td>
<td class="cellalignment4555" headers="d5610e4584 d5610e4440">
<p>Returns an integer corresponding to the hours part of <code class="codeph">argument</code>. If the argument is not a <code class="codeph">dateTime</code> or <code class="codeph">date</code> data type, it returns a null value.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e4600" headers="d5610e4437">
<p>IF(condition , expression1, expression2)</p>
</td>
<td class="cellalignment4555" headers="d5610e4600 d5610e4440">
<p>Evaluates the condition and obtains the effective Boolean value. If true, the first expression is evaluated and its value returned. If false, the second expression is used. If the condition raises an error, the error is passed as the result of the IF statement.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e4607" headers="d5610e4437">
<p>IRI(RDF term)</p>
</td>
<td class="cellalignment4555" headers="d5610e4607 d5610e4440">
<p>Returns an IRI resolving the string representation of argument <code class="codeph">term</code>. If there is a base IRI defined in the query, the IR is resolve against it, and the result must result in an absolute IRI.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e4617" headers="d5610e4437">
<p>isBLANK(RDF term)</p>
</td>
<td class="cellalignment4555" headers="d5610e4617 d5610e4440">
<p>isBLANK(x) returns <code class="codeph">true</code> if <code class="codeph">x</code> is a blank node, <code class="codeph">false</code> otherwise.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e4633" headers="d5610e4437">
<p>isIRI(RDF term)</p>
</td>
<td class="cellalignment4555" headers="d5610e4633 d5610e4440">
<p>isIRI(x) returns <code class="codeph">true</code> if <code class="codeph">x</code> is an IRI, <code class="codeph">false</code> otherwise.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e4649" headers="d5610e4437">
<p>isLITERAL(RDF term)</p>
</td>
<td class="cellalignment4555" headers="d5610e4649 d5610e4440">
<p>isLiteral(x) returns <code class="codeph">true</code> if <code class="codeph">x</code> is a literal, <code class="codeph">false</code> otherwise.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e4665" headers="d5610e4437">
<p>IsNUMERIC(RDF term)</p>
</td>
<td class="cellalignment4555" headers="d5610e4665 d5610e4440">
<p>Returns <code class="codeph">true</code> if <code class="codeph">term</code> is a numeric value, <code class="codeph">false</code> otherwise.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e4681" headers="d5610e4437">
<p>isURI(RDF term)</p>
</td>
<td class="cellalignment4555" headers="d5610e4681 d5610e4440">
<p>isURI(x) returns <code class="codeph">true</code> if <code class="codeph">x</code> is a URI, <code class="codeph">false</code> otherwise.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e4697" headers="d5610e4437">
<p>LANG(literal)</p>
</td>
<td class="cellalignment4555" headers="d5610e4697 d5610e4440">
<p>LANG(x) returns a plain literal serializing the language tag of <code class="codeph">x</code>.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e4707" headers="d5610e4437">
<p>LANGMATCHES(literal, literal)</p>
</td>
<td class="cellalignment4555" headers="d5610e4707 d5610e4440">
<p>LANGMATCHES(x, y) returns <code class="codeph">true</code> if language tag <code class="codeph">x</code> matches language range <code class="codeph">y</code>, <code class="codeph">false</code> otherwise.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e4727" headers="d5610e4437">
<p>LCASE(literal)</p>
</td>
<td class="cellalignment4555" headers="d5610e4727 d5610e4440">
<p>Returns a string where each character in literal is converted to its lowercase correspondent.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e4734" headers="d5610e4437">
<p>MD5(literal)</p>
</td>
<td class="cellalignment4555" headers="d5610e4734 d5610e4440">
<p>Returns the checksum for <code class="codeph">literal</code>, corresponding to the MD5 hash function.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e4744" headers="d5610e4437">
<p>MINUTES(argument)</p>
</td>
<td class="cellalignment4555" headers="d5610e4744 d5610e4440">
<p>Returns an integer corresponding to the minutes part of <code class="codeph">argument</code>. If the argument is not a <code class="codeph">dateTime</code> or <code class="codeph">date</code> data type, it returns a null value.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e4760" headers="d5610e4437">
<p>MONTH(argument)</p>
</td>
<td class="cellalignment4555" headers="d5610e4760 d5610e4440">
<p>Returns an integer corresponding to the month part of <code class="codeph">argument</code>. If the argument is not a <code class="codeph">dateTime</code> or <code class="codeph">date</code> data type, it returns a null value.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e4776" headers="d5610e4437">
<p>NOT_EXISTS(pattern)</p>
</td>
<td class="cellalignment4555" headers="d5610e4776 d5610e4440">
<p>Returns <code class="codeph">true</code> if the pattern does not match the query data set, using the current bindings in the containing group graph pattern and the current active graph. It returns <code class="codeph">false</code> otherwise.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e4789" headers="d5610e4437">
<p>NOW()</p>
</td>
<td class="cellalignment4555" headers="d5610e4789 d5610e4440">
<p>Returns an <code class="codeph">xsd:dateTime</code> value corresponding to the current time at the moment of the query execution.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e4799" headers="d5610e4437">
<p>RAND()</p>
</td>
<td class="cellalignment4555" headers="d5610e4799 d5610e4440">
<p>Generates a numeric value in the range of [0,1).</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e4806" headers="d5610e4437">
<p>REGEX(string, pattern)</p>
</td>
<td class="cellalignment4555" headers="d5610e4806 d5610e4440">
<p>REGEX(x,y) returns <code class="codeph">true</code> if <code class="codeph">x</code> matches the regular expression <code class="codeph">y</code>, <code class="codeph">false</code> otherwise. For more information about the regular expressions supported, see the Oracle Regular Expression Support appendix in <a class="olink SQLRF020" target="_blank" href="../SQLRF/ap_posix.htm#SQLRF020"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e4830" headers="d5610e4437">
<p>REGEX(string, pattern, flags)</p>
</td>
<td class="cellalignment4555" headers="d5610e4830 d5610e4440">
<p>REGEX(x,y,z) returns <code class="codeph">true</code> if <code class="codeph">x</code> matches the regular expression <code class="codeph">y</code> using the options given in <code class="codeph">z</code>, <code class="codeph">false</code> otherwise. Available options: <code class="codeph">&#39;s&#39;</code> &ndash; dot all mode (<code class="codeph">&#39;.&#39;</code> matches any character including the newline character); <code class="codeph">&#39;m&#39;</code> &ndash; multiline mode (<code class="codeph">&#39;^&#39;</code> matches the beginning of any line and <code class="codeph">&#39;$&#39;</code> matches the end of any line); <code class="codeph">&#39;i&#39;</code> &ndash; case insensitive mode; <code class="codeph">&#39;x&#39;</code> &ndash; remove whitespace characters from the regular expression before matching.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e4875" headers="d5610e4437">
<p>REPLACE(string, pattern, replacement)</p>
</td>
<td class="cellalignment4555" headers="d5610e4875 d5610e4440">
<p>Returns a string where each match of the regular expression <code class="codeph">pattern</code> in <code class="codeph">string</code> is replaced by <code class="codeph">replacement</code>. For more information about the regular expressions supported, see the Oracle Regular Expression Support appendix in <a class="olink SQLRF020" target="_blank" href="../SQLRF/ap_posix.htm#SQLRF020"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e4896" headers="d5610e4437">
<p>REPLACE(string, pattern, replacement, flags)</p>
</td>
<td class="cellalignment4555" headers="d5610e4896 d5610e4440">
<p>Returns a string where each match of the regular expression <code class="codeph">pattern</code> in string is replaced by <code class="codeph">replacement</code>. Available options: <code class="codeph">&#39;s&#39;</code> &ndash; dot all mode (<code class="codeph">&#39;.&#39;</code> matches any character including the newline character); <code class="codeph">&#39;m&#39;</code> &ndash; multiline mode (<code class="codeph">&#39;^&#39;</code> matches the beginning of any line and <code class="codeph">&#39;$&#39;</code> matches the end of any line); <code class="codeph">&#39;i&#39;</code> &ndash; case insensitive mode; <code class="codeph">&#39;x&#39;</code> &ndash; remove whitespace characters from the regular expression before matching.</p>
<p>For more information about the regular expressions supported, see the Oracle Regular Expression Support appendix in <a class="olink SQLRF020" target="_blank" href="../SQLRF/ap_posix.htm#SQLRF020"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e4939" headers="d5610e4437">
<p>ROUND(RDF term)</p>
</td>
<td class="cellalignment4555" headers="d5610e4939 d5610e4440">
<p>Returns the closest number with no fractional part to <code class="codeph">term</code>. If two values exist, the value closer to positive infinite is returned. If term is a non-numerical value, returns null.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e4949" headers="d5610e4437">
<p>sameTerm(RDF term, RDF term)</p>
</td>
<td class="cellalignment4555" headers="d5610e4949 d5610e4440">
<p>sameTerm(x, y) returns <code class="codeph">true</code> if <code class="codeph">x</code> and <code class="codeph">y</code> are the same RDF term, <code class="codeph">false</code> otherwise.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e4968" headers="d5610e4437">
<p>SECONDS(argument)</p>
</td>
<td class="cellalignment4555" headers="d5610e4968 d5610e4440">
<p>Returns an integer corresponding to the seconds part of <code class="codeph">argument</code>. If the argument is not a <code class="codeph">dateTime</code> or <code class="codeph">date</code> data type, it returns a null value.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e4984" headers="d5610e4437">
<p>SHA1(literal)</p>
</td>
<td class="cellalignment4555" headers="d5610e4984 d5610e4440">
<p>Returns the checksum for <code class="codeph">literal</code>, corresponding to the SHA1 hash function.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e4994" headers="d5610e4437">
<p>SHA256(literal)</p>
</td>
<td class="cellalignment4555" headers="d5610e4994 d5610e4440">
<p>Returns the checksum for <code class="codeph">literal</code>, corresponding to the SHA256 hash function.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e5004" headers="d5610e4437">
<p>SHA384(literal)</p>
</td>
<td class="cellalignment4555" headers="d5610e5004 d5610e4440">
<p>Returns the checksum for <code class="codeph">literal</code>, corresponding to the SHA384 hash function.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e5014" headers="d5610e4437">
<p>SHA512(literal)</p>
</td>
<td class="cellalignment4555" headers="d5610e5014 d5610e4440">
<p>Returns the checksum for <code class="codeph">literal</code>, corresponding to the SHA512 hash function.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e5024" headers="d5610e4437">
<p>STR(RDF term)</p>
</td>
<td class="cellalignment4555" headers="d5610e5024 d5610e4440">
<p>STR(x) returns a plain literal of the string representation of <code class="codeph">x</code> (that is, what would be stored in the VALUE_NAME column of MDSYS.RDF_VALUE$ enclosed within double quotes).</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e5034" headers="d5610e4437">
<p>STRAFTER(literal, literal)</p>
</td>
<td class="cellalignment4555" headers="d5610e5034 d5610e4440">
<p>StrAfter (x,y) returns the portion of the string corresponding to substring that precedes in <code class="codeph">x</code> the first match of <code class="codeph">y</code>, and the end of <code class="codeph">x</code>. If <code class="codeph">y</code> cannot be matched inside <code class="codeph">x</code>, the empty string is returned.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e5056" headers="d5610e4437">
<p>STRBEFORE(literal, literal)</p>
</td>
<td class="cellalignment4555" headers="d5610e5056 d5610e4440">
<p>StrBefore (x,y) returns the portion of the string corresponding to the start of <code class="codeph">x</code> and the first match of <code class="codeph">y</code>. If <code class="codeph">y</code> cannot be matched inside <code class="codeph">x</code>, the empty string is returned.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e5075" headers="d5610e4437">
<p>STRDT(string, datatype)</p>
</td>
<td class="cellalignment4555" headers="d5610e5075 d5610e4440">
<p>Construct a literal term composed by the <code class="codeph">string</code> lexical form and the <code class="codeph">datatype</code> passed as arguments. <code class="codeph">datatype</code> must be a URI; otherwise, the function returns a null value.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e5092" headers="d5610e4437">
<p>STRENDS(literal, match)</p>
</td>
<td class="cellalignment4555" headers="d5610e5092 d5610e4440">
<p>Returns <code class="codeph">true</code> if the string <code class="codeph">literal</code> ends with the string <code class="codeph">match</code>. It returns <code class="codeph">false</code> otherwise.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e5111" headers="d5610e4437">
<p>STRLANG (string, languageTag)</p>
</td>
<td class="cellalignment4555" headers="d5610e5111 d5610e4440">
<p>Constructs a string composed by the <code class="codeph">string</code> lexical form and language tag passed as arguments.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e5121" headers="d5610e4437">
<p>STRLEN(literal)</p>
</td>
<td class="cellalignment4555" headers="d5610e5121 d5610e4440">
<p>Returns the length of the lexical form of the <code class="codeph">literal</code>.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e5131" headers="d5610e4437">
<p>STRSTARTS(literal, match)</p>
</td>
<td class="cellalignment4555" headers="d5610e5131 d5610e4440">
<p>Returns <code class="codeph">true</code> if the string <code class="codeph">literal</code> starts with the string <code class="codeph">match</code>. It returns <code class="codeph">false</code> otherwise.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e5150" headers="d5610e4437">
<p>STRUUID()</p>
</td>
<td class="cellalignment4555" headers="d5610e5150 d5610e4440">
<p>Returns a string containing the scheme section of a new UUID.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e5157" headers="d5610e4437">
<p>SUBSTR(term, startPos)</p>
</td>
<td class="cellalignment4555" headers="d5610e5157 d5610e4440">
<p>Returns the string corresponding to the portion of <code class="codeph">term</code> that starts at <code class="codeph">startPos</code> and continues until term ends. The index of the first character is 1.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e5170" headers="d5610e4437">
<p>SUBSTR(term, startPos, length)</p>
</td>
<td class="cellalignment4555" headers="d5610e5170 d5610e4440">
<p>Returns the string corresponding to the portion of term that starts at <code class="codeph">startPos</code> and continues for <code class="codeph">length</code> characters. The index of the first character is 1.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e5183" headers="d5610e4437">
<p>term IN (term list)</p>
</td>
<td class="cellalignment4555" headers="d5610e5183 d5610e4440">
<p>The expression x IN(term list) returns <code class="codeph">true</code> if <code class="codeph">x</code> can be found in any of the values in <code class="codeph">termlist</code>. Returns <code class="codeph">false</code> if not found. Zero-length lists are legal. An error is raised if any of the values in <code class="codeph">termlist</code> raises an error and <code class="codeph">x</code> is not found.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e5209" headers="d5610e4437">
<p>term NOT IN (term list)</p>
</td>
<td class="cellalignment4555" headers="d5610e5209 d5610e4440">
<p>The expression x NOT IN(term list) returns <code class="codeph">false</code> if <code class="codeph">x</code> can be found in any of the values in term list. Returns <code class="codeph">true</code> if not found. Zero-length lists are legal. An error is raised if any of the values in term list raises an error and <code class="codeph">x</code> is not found.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e5228" headers="d5610e4437">
<p>TIMEZONE(argument)</p>
</td>
<td class="cellalignment4555" headers="d5610e5228 d5610e4440">
<p>Returns the time zones section of <code class="codeph">argument</code> as an <code class="codeph">xsd:dayTimeDuration</code> value. If the argument is not a <code class="codeph">dateTime</code> or <code class="codeph">date</code> data type, it returns a null value.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e5247" headers="d5610e4437">
<p>TZ(argument)</p>
</td>
<td class="cellalignment4555" headers="d5610e5247 d5610e4440">
<p>Returns an integer corresponding to the time zone part of <code class="codeph">argument</code>. If the argument is not a <code class="codeph">dateTime</code> or <code class="codeph">date</code> data type, it returns a null value.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e5264" headers="d5610e4437">
<p>UCASE(literal)</p>
</td>
<td class="cellalignment4555" headers="d5610e5264 d5610e4440">
<p>Returns a string where each character in <code class="codeph">literal</code> is converted to its uppercase correspondent.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e5274" headers="d5610e4437">
<p>URI(RDF term)</p>
</td>
<td class="cellalignment4555" headers="d5610e5274 d5610e4440">
<p>(Synonym for IRI(RDF term)</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e5281" headers="d5610e4437">
<p>UUID()</p>
</td>
<td class="cellalignment4555" headers="d5610e5281 d5610e4440">
<p>Returns a URI with a new Universal Unique Identifier. The value and the version correspond to the PL/SQL function <code class="codeph">sys_guid ()</code>.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e5291" headers="d5610e4437">
<p>YEAR(argument)</p>
</td>
<td class="cellalignment4555" headers="d5610e5291 d5610e4440">
<p>Returns an integer corresponding to the year part of <code class="codeph">argument</code>.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>See also the descriptions of the built-in functions defined in the SPARQL query language specification (<a href="http://www.w3.org/TR/sparql11-query/" target="_blank"><code class="codeph">http://www.w3.org/TR/sparql11-query/</code></a>), to better understand the built-in functions available in SEM_MATCH.</p>
<p>The following XML Schema casting functions are available for use in FILTER clauses. These functions take an RDF term as input and return a new RDF term of the desired type or raise an error if the term cannot be cast to the desired type. Details of type casting can be found in Section 17.1 of the XPath query specification: <a href="http://www.w3.org/TR/xpath-functions/#casting-from-primitive-to-primitive" target="_blank"><code class="codeph">http://www.w3.org/TR/xpath-functions/#casting-from-primitive-to-primitive</code></a>. These functions use the XML Namespace <code class="codeph">xsd : http://www.w3.org/2001/XMLSchema#</code>.</p>
<ul style="list-style-type: disc;">
<li>
<p>xsd:string (RDF term)</p>
</li>
<li>
<p>xsd:dateTime (RDF term)</p>
</li>
<li>
<p>xsd:boolean (RDF term)</p>
</li>
<li>
<p>xsd:integer (RDF term)</p>
</li>
<li>
<p>xsd:float (RDF term)</p>
</li>
<li>
<p>xsd:double (RDF term)</p>
</li>
<li>
<p>xsd:decimal (RDF term)</p>
</li>
</ul>
<p>If you use the syntax with curly braces to express a graph pattern:</p>
<ul style="list-style-type: disc;">
<li>
<p>The query always returns canonical lexical forms for the matching values for the variables.</p>
</li>
<li>
<p>Any hints specified in the <code class="codeph">options</code> argument using HINT0={<span class="italic">&lt;hint-string&gt;</span>} (explained in <a href="rdf-overview.htm#GUID-71464CC4-1C03-48A4-9A4C-0E671FF8F16E">Using the SEM_MATCH Table Function to Query Semantic Data</a>), should be constructed only on the basis of the portion of the graph pattern inside the root BGP. For example, the only valid aliases for use in a hint specification for the query in <a href="rdf-overview.htm#GUID-55180C4B-7B8B-4F45-A948-A46D227935FA__CIHEDCIB">Example 1-13</a> are <code class="codeph">t0</code>, <code class="codeph">t1</code>, <code class="codeph">?x</code>, and <code class="codeph">?y</code>. Inline query optimizer hints can be used to influence other parts of the graph pattern (see <a href="rdf-overview.htm#GUID-5D952ADA-7170-4D64-A07D-F86B32884FF5">Inline Query Optimizer Hints</a>).</p>
</li>
<li>
<p>The FILTER construct is not supported for variables bound to long literals.</p>
</li>
</ul>
<div class="example" id="GUID-55180C4B-7B8B-4F45-A948-A46D227935FA__CIHHDGDI">
<p class="titleinexample">Example 1-12 Curly Brace Syntax</p>
<p><a href="rdf-overview.htm#GUID-55180C4B-7B8B-4F45-A948-A46D227935FA__CIHHDGDI">Example 1-12</a> uses the syntax with curly braces and a period to express a graph pattern in the SEM_MATCH table function.</p>
<pre dir="ltr">SELECT x, y
  FROM TABLE(SEM_MATCH(
    &#39;<span class="bold">{</span>?x :grandParentOf ?y <span class="bold">.</span> ?x rdf:type :Male<span class="bold">}</span>&#39;,
    SEM_Models(&#39;family&#39;),
    SEM_Rulebases(&#39;RDFS&#39;,&#39;family_rb&#39;), 
    SEM_ALIASES(SEM_ALIAS(&#39;&#39;,&#39;http://www.example.org/family/&#39;)),
    null));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-55180C4B-7B8B-4F45-A948-A46D227935FA__CIHEDCIB">
<p class="titleinexample">Example 1-13 Curly Brace Syntax and OPTIONAL Construct</p>
<p><a href="rdf-overview.htm#GUID-55180C4B-7B8B-4F45-A948-A46D227935FA__CIHEDCIB">Example 1-13</a> uses the OPTIONAL construct to modify <a href="rdf-overview.htm#GUID-55180C4B-7B8B-4F45-A948-A46D227935FA__CIHHDGDI">Example 1-12</a>, so that it also returns, for each grandfather, the names of the games that he plays or null if he does not play any games.</p>
<pre dir="ltr">SELECT x, y, game
  FROM TABLE(SEM_MATCH(
    &#39;{?x :grandParentOf ?y . ?x rdf:type :Male . 
      <span class="bold">OPTIONAL{?x :plays ?game}</span> 
     }&#39;,
    SEM_Models(&#39;family&#39;),
    SEM_Rulebases(&#39;RDFS&#39;,&#39;family_rb&#39;), 
    SEM_ALIASES(SEM_ALIAS(&#39;&#39;,&#39;http://www.example.org/family/&#39;)),
    null,
    null,
    &#39;HINT0={LEADING(t0 t1) USE_NL(?x ?y)}&#39;));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-55180C4B-7B8B-4F45-A948-A46D227935FA__CIHHGHED">
<p class="titleinexample">Example 1-14 Curly Brace Syntax and Multi-Pattern OPTIONAL Construct</p>
<p>When multiple triple patterns are present in an OPTIONAL graph pattern, values for optional variables are returned only if a match is found for each triple pattern in the OPTIONAL graph pattern. <a href="rdf-overview.htm#GUID-55180C4B-7B8B-4F45-A948-A46D227935FA__CIHHGHED">Example 1-14</a> modifies <a href="rdf-overview.htm#GUID-55180C4B-7B8B-4F45-A948-A46D227935FA__CIHEDCIB">Example 1-13</a> so that it returns, for each grandfather, the names of the games both he and his grandchildren play, or null if he and his grandchildren have no such games in common. It also uses global query optimizer hints to specify that triple patterns should be evaluated in order within each BGP and that a hash join should be used to join the root BGP with the OPTIONAL BGP.</p>
<pre dir="ltr">SELECT x, y, game
  FROM TABLE(SEM_MATCH(
    &#39;{?x :grandParentOf ?y . ?x rdf:type :Male . 
      OPTIONAL{?x :plays ?game . ?y :plays ?game} 
     }&#39;,
    SEM_Models(&#39;family&#39;),
    SEM_Rulebases(&#39;RDFS&#39;,&#39;family_rb&#39;), 
    SEM_ALIASES(SEM_ALIAS(&#39;&#39;,&#39;http://www.example.org/family/&#39;)),
    null,
    &#39;ALL_ORDERED ALL_BGP_HASH&#39;));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-55180C4B-7B8B-4F45-A948-A46D227935FA__CIHGDEFG">
<p class="titleinexample">Example 1-15 Curly Brace Syntax and Nested OPTIONAL Construct</p>
<p>A single query can contain multiple OPTIONAL graph patterns, which can be nested or parallel. <a href="rdf-overview.htm#GUID-55180C4B-7B8B-4F45-A948-A46D227935FA__CIHGDEFG">Example 1-15</a> modifies <a href="rdf-overview.htm#GUID-55180C4B-7B8B-4F45-A948-A46D227935FA__CIHHGHED">Example 1-14</a> with a nested OPTIONAL graph pattern. This example returns, for each grandfather, (1) the games he plays or null if he plays no games and (2) if he plays games, the ages of his grandchildren that play the same game, or null if he has no games in common with his grandchildren. Note that in <a href="rdf-overview.htm#GUID-55180C4B-7B8B-4F45-A948-A46D227935FA__CIHGDEFG">Example 1-15</a> a value is returned for <code class="codeph">?game</code> even if the nested OPTIONAL graph pattern <code class="codeph">?y :plays ?game . ?y :age ?age</code> is not matched.</p>
<pre dir="ltr">SELECT x, y, game, age
  FROM TABLE(SEM_MATCH(
    &#39;{?x :grandParentOf ?y . ?x rdf:type :Male . 
      OPTIONAL{?x :plays ?game 
                          OPTIONAL {?y :plays ?game . ?y :age ?age} } 
     }&#39;,
    SEM_Models(&#39;family&#39;),
    SEM_Rulebases(&#39;RDFS&#39;,&#39;family_rb&#39;), 
    SEM_ALIASES(SEM_ALIAS(&#39;&#39;,&#39;http://www.example.org/family/&#39;)),
    null));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-55180C4B-7B8B-4F45-A948-A46D227935FA__CIHBDFEE">
<p class="titleinexample">Example 1-16 Curly Brace Syntax and Parallel OPTIONAL Construct</p>
<p><a href="rdf-overview.htm#GUID-55180C4B-7B8B-4F45-A948-A46D227935FA__CIHBDFEE">Example 1-16</a> modifies <a href="rdf-overview.htm#GUID-55180C4B-7B8B-4F45-A948-A46D227935FA__CIHHGHED">Example 1-14</a> with a parallel OPTIONAL graph pattern. This example returns, for each grandfather, (1) the games he plays or null if he plays no games and (2) his email address or null if he has no email address. Note that, unlike nested OPTIONAL graph patterns, parallel OPTIONAL graph patterns are treated independently. That is, if an email address is found, it will be returned regardless of whether or not a game was found; and if a game was found, it will be returned regardless of whether an email address was found.</p>
<pre dir="ltr">SELECT x, y, game, email
  FROM TABLE(SEM_MATCH(
    &#39;{?x :grandParentOf ?y . ?x rdf:type :Male . 
      OPTIONAL{?x :plays ?game}
      OPTIONAL{?x :email ?email} 
     }&#39;,
    SEM_Models(&#39;family&#39;),
    SEM_Rulebases(&#39;RDFS&#39;,&#39;family_rb&#39;), 
    SEM_ALIASES(SEM_ALIAS(&#39;&#39;,&#39;http://www.example.org/family/&#39;)),
    null));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-55180C4B-7B8B-4F45-A948-A46D227935FA__CIHCBHAC">
<p class="titleinexample">Example 1-17 Curly Brace Syntax and FILTER Construct</p>
<p><a href="rdf-overview.htm#GUID-55180C4B-7B8B-4F45-A948-A46D227935FA__CIHCBHAC">Example 1-17</a> uses the FILTER construct to modify <a href="rdf-overview.htm#GUID-55180C4B-7B8B-4F45-A948-A46D227935FA__CIHHDGDI">Example 1-12</a>, so that it returns grandchildren information for only those grandfathers who are residents of either NY or CA.</p>
<pre dir="ltr">SELECT x, y
  FROM TABLE(SEM_MATCH(
    &#39;{?x :grandParentOf ?y . ?x rdf:type :Male . ?x :residentOf ?z
       <span class="bold">FILTER (?z = &#34;NY&#34;  || ?z = &#34;CA&#34;)</span>}&#39;,
    SEM_Models(&#39;family&#39;),
    SEM_Rulebases(&#39;RDFS&#39;,&#39;family_rb&#39;), 
    SEM_ALIASES(SEM_ALIAS(&#39;&#39;,&#39;http://www.example.org/family/&#39;)),
    null));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-55180C4B-7B8B-4F45-A948-A46D227935FA__CIHEFIAC">
<p class="titleinexample">Example 1-18 Curly Brace Syntax and FILTER with REGEX and STR Built-In Constructs</p>
<p><a href="rdf-overview.htm#GUID-55180C4B-7B8B-4F45-A948-A46D227935FA__CIHEFIAC">Example 1-18</a> uses the REGEX built-in function to select all grandfathers who have an Oracle email address. Note that backslash (<code class="codeph">\</code>) characters in the regular expression pattern must be escaped in the query string; for example, <code class="codeph">\\.</code> produces the following pattern: <code class="codeph">\.</code></p>
<pre dir="ltr">SELECT x, y, z
  FROM TABLE(SEM_MATCH(
    &#39;{?x :grandParentOf ?y . ?x rdf:type :Male . ?x :email ?z
       <span class="bold">FILTER (REGEX(STR(?z), &#34;@oracle\\.com$&#34;))</span>}&#39;,
    SEM_Models(&#39;family&#39;),
    SEM_Rulebases(&#39;RDFS&#39;,&#39;family_rb&#39;), 
    SEM_ALIASES(SEM_ALIAS(&#39;&#39;,&#39;http://www.example.org/family/&#39;)),
    null));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-55180C4B-7B8B-4F45-A948-A46D227935FA__CIHCJGGG">
<p class="titleinexample">Example 1-19 Curly Brace Syntax and UNION and FILTER Constructs</p>
<p><a href="rdf-overview.htm#GUID-55180C4B-7B8B-4F45-A948-A46D227935FA__CIHCJGGG">Example 1-19</a> uses the UNION construct to modify <a href="rdf-overview.htm#GUID-55180C4B-7B8B-4F45-A948-A46D227935FA__CIHCBHAC">Example 1-17</a>, so that grandfathers are returned only if they are residents of NY or CA or own property in NY or CA, or if both conditions are true (they reside in and own property in NY or CA).</p>
<pre dir="ltr">SELECT x, y
  FROM TABLE(SEM_MATCH(
    &#39;{?x :grandParentOf ?y . ?x rdf:type :Male 
       {{?x :residentOf ?z} <span class="bold">UNION {?x :ownsPropertyIn ?z}</span>}
       <span class="bold">FILTER (?z = &#34;NY&#34;  || ?z = &#34;CA&#34;)</span>}&#39;,
    SEM_Models(&#39;family&#39;),
    SEM_Rulebases(&#39;RDFS&#39;,&#39;family_rb&#39;), 
    SEM_ALIASES(SEM_ALIAS(&#39;&#39;,&#39;http://www.example.org/family/&#39;)),
    null));
</pre></div>
<!-- class="example" --></div>
<a id="RDFRM171"></a><a id="RDFRM172"></a><a id="RDFRM173"></a><a id="RDFRM174"></a><a id="RDFRM170"></a>
<div class="props_rev_3"><a id="GUID-45654D98-A2B5-4815-949D-2F48FA66DA51"></a>
<h4 id="RDFRM-GUID-45654D98-A2B5-4815-949D-2F48FA66DA51" class="sect4"><span class="enumeration_section">1.6.2.1</span> GRAPH Keyword Support</h4>
<div>
<p>A SEM_MATCH query is executed against an RDF Dataset. An RDF Dataset is a collection of graphs that includes one unnamed graph, known as the default graph, and one or more named graphs, which are identified by a URI. Graph patterns that appear inside a GRAPH clause are matched against the set of named graphs, and graph patterns that do not appear inside a graph clause are matched against the default graph. The <code class="codeph">graphs</code> and <code class="codeph">named_graphs</code> SEM_MATCH parameters are used to construct the default graph and set of named graphs for a given SEM_MATCH query. A summary of possible dataset configurations is shown in <a href="rdf-overview.htm#GUID-45654D98-A2B5-4815-949D-2F48FA66DA51__CIHHJFED" title="SEM_MATCH graphs and named_graphs Values, and Resulting Data Set Configurations">Table 1-13</a>.</p>
<div class="tblformalwide" id="GUID-45654D98-A2B5-4815-949D-2F48FA66DA51__CIHHJFED">
<p class="titleintable">Table 1-13 SEM_MATCH graphs and named_graphs Values, and Resulting Dataset Configurations</p>
<table class="cellalignment4556" title="SEM_MATCH graphs and named_graphs Values, and Resulting Dataset Configurations" summary="SEM_MATCH graphs and named_graphs Values, and Resulting Data Set Configurations">
<thead>
<tr class="cellalignment4501">
<th class="cellalignment4536" id="d5610e5564">Parameter Values</th>
<th class="cellalignment4557" id="d5610e5567">Default Graph</th>
<th class="cellalignment4512" id="d5610e5570">Set of Named Graphs</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4501">
<td class="cellalignment4538" id="d5610e5575" headers="d5610e5564">
<p><code class="codeph">graphs</code>: NULL</p>
<p><code class="codeph">named_graphs</code>: NULL</p>
</td>
<td class="cellalignment4558" headers="d5610e5575 d5610e5567">
<p>Union All of all unnamed triples and all named graph triples. (But if the <code class="codeph">options</code> parameter contains <code class="codeph">STRICT_DEFAULT=T</code>, only unnamed triples are included in the default graph.)</p>
</td>
<td class="cellalignment4515" headers="d5610e5575 d5610e5570">
<p>All named graphs</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4538" id="d5610e5597" headers="d5610e5564">
<p><code class="codeph">graphs</code>: NULL</p>
<p><code class="codeph">named_graphs</code>: {g1,&hellip;, gn}</p>
</td>
<td class="cellalignment4558" headers="d5610e5597 d5610e5567">
<p>Empty set</p>
</td>
<td class="cellalignment4515" headers="d5610e5597 d5610e5570">
<p>{g1,&hellip;, gn}</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4538" id="d5610e5613" headers="d5610e5564">
<p><code class="codeph">graphs</code>: {g1,&hellip;, gm}</p>
<p><code class="codeph">named_graphs</code>: NULL</p>
</td>
<td class="cellalignment4558" headers="d5610e5613 d5610e5567">
<p>Union All of {g1,&hellip;, gm}</p>
</td>
<td class="cellalignment4515" headers="d5610e5613 d5610e5570">
<p>Empty set</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4538" id="d5610e5629" headers="d5610e5564">
<p><code class="codeph">graphs</code>: {g1,&hellip;, gm}</p>
<p><code class="codeph">named_graphs</code>: {gn,&hellip;, gz}</p>
</td>
<td class="cellalignment4558" headers="d5610e5629 d5610e5567">
<p>Union All of {g1,&hellip;, gm}</p>
</td>
<td class="cellalignment4515" headers="d5610e5629 d5610e5570">
<p>{gn,&hellip;, gz}</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>See also the W3C SPARQL specification for more information on RDF data sets and the GRAPH construct, specifically: <a href="http://www.w3.org/TR/rdf-sparql-query/#rdfDataset" target="_blank"><code class="codeph">http://www.w3.org/TR/rdf-sparql-query/#rdfDataset</code></a></p>
<div class="example" id="GUID-45654D98-A2B5-4815-949D-2F48FA66DA51__CIHFAIJF">
<p class="titleinexample">Example 1-20 Named Graph Construct</p>
<p><a href="rdf-overview.htm#GUID-45654D98-A2B5-4815-949D-2F48FA66DA51__CIHFAIJF">Example 1-20</a> uses the GRAPH construct to scope graph pattern matching to a specific named graph. This example finds the names and email addresses of all people in the <code class="codeph">&lt;http://www.example.org/family/Smith&gt;</code> named graph.</p>
<pre dir="ltr">SELECT name, email
  FROM TABLE(SEM_MATCH(
    &#39;{GRAPH :Smith {
       ?x :name ?name . ?x :email ?email } }&#39;,
    SEM_Models(&#39;family&#39;),
    SEM_Rulebases(&#39;RDFS&#39;,&#39;family_rb&#39;), 
    SEM_ALIASES(SEM_ALIAS(&#39;&#39;,&#39;http://www.example.org/family/&#39;)),
    null));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-45654D98-A2B5-4815-949D-2F48FA66DA51__CIHJAJCC">
<p class="titleinexample">Example 1-21 Using the named_graphs Parameter</p>
<p>In addition to URIs, variables can appear after the GRAPH keyword. <a href="rdf-overview.htm#GUID-45654D98-A2B5-4815-949D-2F48FA66DA51__CIHJAJCC">Example 1-21</a> uses a variable, <code class="codeph">?g</code>, with the GRAPH keyword, and uses the <code class="codeph">named_graphs</code> parameter to restrict the possible values of <code class="codeph">?g</code> to the <code class="codeph">&lt;http://www.example.org/family/Smith&gt;</code> and <code class="codeph">&lt;http://www.example.org/family/Jones&gt;</code> named graphs. Aliases specified in SEM_ALIASES argument can be used in the <code class="codeph">graphs</code> and <code class="codeph">named_graphs</code> parameters.</p>
<pre dir="ltr">SELECT name, email
  FROM TABLE(SEM_MATCH(
    &#39;{GRAPH ?g {
       ?x :name ?name . ?x :email ?email } }&#39;,
    SEM_Models(&#39;family&#39;),
    SEM_Rulebases(&#39;RDFS&#39;,&#39;family_rb&#39;), 
    SEM_ALIASES(SEM_ALIAS(&#39;&#39;,&#39;http://www.example.org/family/&#39;)),
    null,null,null,null,
    SEM_GRAPHS(&#39;&lt;http://www.example.org/family/Smith&gt;&#39;,
               &#39;:Jones&#39;)));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-45654D98-A2B5-4815-949D-2F48FA66DA51__CIHIIHGC">
<p class="titleinexample">Example 1-22 Using the graphs Parameter</p>
<p><a href="rdf-overview.htm#GUID-45654D98-A2B5-4815-949D-2F48FA66DA51__CIHIIHGC">Example 1-22</a> uses the default graph to query the union of the <code class="codeph">&lt;http://www.example.org/family/Smith&gt;</code> and <code class="codeph">&lt;http://www.example.org/family/Jones&gt;</code> named graphs.</p>
<pre dir="ltr">FROM TABLE(SEM_MATCH(
    &#39;{?x :name ?name . ?x :email ?email }&#39;,
    SEM_Models(&#39;family&#39;),
    SEM_Rulebases(&#39;RDFS&#39;,&#39;family_rb&#39;), 
    SEM_ALIASES(SEM_ALIAS(&#39;&#39;,&#39;http://www.example.org/family/&#39;)),
    null,null,null,
    SEM_GRAPHS(&#39;&lt;http://www.example.org/family/Smith&gt;&#39;, 
               &#39;:Jones&#39;),
    null));
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="RDFRM750"></a><a id="RDFRM749"></a>
<div class="props_rev_3"><a id="GUID-B956C85E-4AC1-4503-9510-9035FF253414"></a>
<h3 id="RDFRM-GUID-B956C85E-4AC1-4503-9510-9035FF253414" class="sect3"><span class="enumeration_section">1.6.3</span> Graph Patterns: Support for SPARQL ASK Syntax</h3>
<div>
<p>SEM_MATCH allows fully-specified SPARQL ASK queries in the query parameter.</p>
<p>ASK queries are used to test whether or not a solution exists for a given query pattern. In contrast to other forms of SPARQL queries, ASK queries do not return any information about solutions to the query pattern. Instead, such queries return <code class="codeph">&#34;true&#34;^^xsd:boolean</code> if a solution exists and <code class="codeph">&#34;false&#34;^^xsd:boolean</code> if no solution exists.</p>
<p>All SPARQL ASK queries return the same columns: ASK, ASK$RDFVID, ASK$_PREFIX, ASK$_SUFFIX, ASK$RDFVTYP, ASK$RDFCLOB, ASK$RDFLTYP, ASK$RDFLANG, SEM$ROWNUM. Note that these columns are the same as a SPARQL SELECT syntax query that projects a single <code class="codeph">?ask</code> variable.</p>
<p>SPARQL ASK queries will generally give better performance than an equivalent SPARQL SELECT syntax query because the ASK query does not have to retrieve lexical values for query variables, and query execution can stop after a single result has been found.</p>
<p>SPARQL ASK queries use the same syntax as SPARQL SELECT queries, but the topmost SELECT clause must be replaced with the keyword ASK.</p>
<div class="example" id="GUID-B956C85E-4AC1-4503-9510-9035FF253414__CIHCFDAC">
<p class="titleinexample">Example 1-23 SPARQL ASK</p>
<p><a href="rdf-overview.htm#GUID-B956C85E-4AC1-4503-9510-9035FF253414__CIHCFDAC">Example 1-23</a> shows a SPARQL ASK query that determines whether or not any cameras are for sale with more than 10 megapixels that cost less than 50 dollars.</p>
<pre dir="ltr">SELECT ask
  FROM TABLE(SEM_MATCH(
    &#39;PREFIX : &lt;http://www.example.org/electronics/&gt; 
     ASK
     WHERE
      {?x :price ?p .
       ?x :megapixels ?m .
       FILTER (?p &lt; 50 &amp;&amp; ?m &gt; 10)
      }&#39;,
    SEM_Models(&#39;electronics&#39;),
    SEM_Rulebases(&#39;RDFS&#39;), 
    null, null));
</pre>
<p>See also the W3C SPARQL specification for more information on SPARQL ASK queries, specifically: <a href="http://www.w3.org/TR/sparql11-query/#ask" target="_blank"><code class="codeph">http://www.w3.org/TR/sparql11-query/#ask</code></a></p>
</div>
<!-- class="example" --></div>
</div>
<a id="RDFRM752"></a><a id="RDFRM753"></a><a id="RDFRM754"></a><a id="RDFRM755"></a><a id="RDFRM756"></a><a id="RDFRM757"></a><a id="RDFRM751"></a>
<div class="props_rev_3"><a id="GUID-9DAC9FA2-0546-4744-9FF3-FD61B07130CA"></a>
<h3 id="RDFRM-GUID-9DAC9FA2-0546-4744-9FF3-FD61B07130CA" class="sect3"><span class="enumeration_section">1.6.4</span> Graph Patterns: Support for SPARQL CONSTRUCT Syntax</h3>
<div>
<p>SEM_MATCH allows fully-specified SPARQL CONSTRUCT queries in the query parameter.</p>
<p>CONSTRUCT queries are used to build RDF graphs from stored RDF data. In contrast to SPARQL SELECT queries, CONSTRUCT queries return a set of RDF triples rather than a set of query solutions (variable bindings).</p>
<p>All SPARQL CONSTRUCT queries return the same columns from SEM_MATCH. These columns correspond to the subject, predicate and object of an RDF triple, and there are 10 columns for each triple component. In addition, a SEM$ROWNUM column is returned. More specifically, the following columns are returned:</p>
<pre dir="ltr">SUBJ
SUBJ$RDFVID
SUBJ$_PREFIX
SUBJ$_SUFFIX
SUBJ$RDFVTYP
SUBJ$RDFCLOB
SUBJ$RDFLTYP
SUBJ$RDFLANG
SUBJ$RDFTERM
SUBJ$RDFCLBT
PRED
PRED$RDFVID
PRED$_PREFIX
PRED$_SUFFIX
PRED$RDFVTYP
PRED$RDFCLOB
PRED$RDFLTYP
PRED$RDFLANG
PRED$RDFTERM
PRED$RDFCLBT
OBJ
OBJ$RDFVID
OBJ$_PREFIX
OBJ$_SUFFIX
OBJ$RDFVTYP
OBJ$RDFCLOB
OBJ$RDFLTYP
OBJ$RDFLANG
OBJ$RDFTERM
OBJ$RDFCLBT
SEM$ROWNUM
</pre>
<p>For each component, COMP, COMP$RDFVID, COMP$_PREFIX, COMP$_SUFFIX, COMP$RDFVTYP, COMP$RDFCLOB, COMP$RDFLTYP, and COMP$RDFLANG correspond to the same values as those from SPARQL SELECT queries. COMP$RDFTERM holds a VARCHAR2(4000) RDF term in N-Triple syntax, and COMP$RDFCLBT holds a CLOB RDF term in N-Triple syntax.</p>
<p>SPARQL CONSTRUCT queries use the same syntax as SPARQL SELECT queries, except the topmost SELECT clause is replaced with a CONSTRUCT template. The CONSTRUCT template determines how to construct the result RDF graph using the results of the query pattern defined in the WHERE clause. A CONSTRUCT template consists of the keyword CONSTRUCT followed by sequence of SPARQL triple patterns that are enclosed within curly braces. The keywords OPTIONAL, UNION, FILTER, MINUS, BIND, VALUES, and GRAPH are not allowed within CONSTRUCT templates, and property path expressions are not allowed within CONSTRUCT templates. These keywords, however, are allowed within the query pattern inside the WHERE clause.</p>
<p>SPARQL CONSTRUCT queries build result RDF graphs in the following manner. For each result row returned by the WHERE clause, variable values are substituted into the CONSTRUCT template to create one or more RDF triples. Suppose the graph pattern in the WHERE clause of <a href="rdf-overview.htm#GUID-9DAC9FA2-0546-4744-9FF3-FD61B07130CA__CIHCGJBJ">Example 1-24</a> returns the following result rows.</p>
<div class="tblformal" id="GUID-9DAC9FA2-0546-4744-9FF3-FD61B07130CA__GUID-79C52D3D-7C5A-4A6D-ACBA-5E3E3CE1EBDB">
<table class="cellalignment4510" summary="Result rows from graph pattern in the WHERE clause of preceding example">
<thead>
<tr class="cellalignment4501">
<th class="cellalignment4559" id="d5610e5846">E$RDFTERM</th>
<th class="cellalignment4559" id="d5610e5849">FNAME$RDFTERM</th>
<th class="cellalignment4559" id="d5610e5852">LNAME$RDFTERM</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4501">
<td class="cellalignment4560" id="d5610e5857" headers="d5610e5846">
<p>ent:employee1</p>
</td>
<td class="cellalignment4560" headers="d5610e5857 d5610e5849">
<p>&#34;Fred&#34;</p>
</td>
<td class="cellalignment4560" headers="d5610e5857 d5610e5852">
<p>&#34;Smith&#34;</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4560" id="d5610e5867" headers="d5610e5846">
<p>ent:employee2</p>
</td>
<td class="cellalignment4560" headers="d5610e5867 d5610e5849">
<p>&#34;Jane&#34;</p>
</td>
<td class="cellalignment4560" headers="d5610e5867 d5610e5852">
<p>&#34;Brown&#34;</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4560" id="d5610e5877" headers="d5610e5846">
<p>ent:employee3</p>
</td>
<td class="cellalignment4560" headers="d5610e5877 d5610e5849">
<p>&#34;Bill&#34;</p>
</td>
<td class="cellalignment4560" headers="d5610e5877 d5610e5852">
<p>&#34;Jones&#34;</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>The overall SEM_MATCH CONSTRUCT query in <a href="rdf-overview.htm#GUID-9DAC9FA2-0546-4744-9FF3-FD61B07130CA__CIHCGJBJ">Example 1-24</a> would then return the following rows, which correspond to six RDF triples (two for each result row of the query pattern).</p>
<div class="tblformal" id="GUID-9DAC9FA2-0546-4744-9FF3-FD61B07130CA__GUID-32257514-B835-48DA-92F1-E0B6FDB73C81">
<table class="cellalignment4510" summary="Overall results of preceding example">
<thead>
<tr class="cellalignment4501">
<th class="cellalignment4559" id="d5610e5899">SUBJ$RDFTERM</th>
<th class="cellalignment4559" id="d5610e5902">PRED$RDFTERM</th>
<th class="cellalignment4559" id="d5610e5905">OBJ$RDFTERM</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4501">
<td class="cellalignment4560" id="d5610e5910" headers="d5610e5899">
<p>ent:employee1</p>
</td>
<td class="cellalignment4560" headers="d5610e5910 d5610e5902">
<p>foaf:givenName</p>
</td>
<td class="cellalignment4560" headers="d5610e5910 d5610e5905">
<p>&#34;Fred&#34;</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4560" id="d5610e5920" headers="d5610e5899">
<p>ent:employee1</p>
</td>
<td class="cellalignment4560" headers="d5610e5920 d5610e5902">
<p>foaf:familyName</p>
</td>
<td class="cellalignment4560" headers="d5610e5920 d5610e5905">
<p>&#34;Smith&#34;</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4560" id="d5610e5930" headers="d5610e5899">
<p>ent:employee2</p>
</td>
<td class="cellalignment4560" headers="d5610e5930 d5610e5902">
<p>foaf:givenName</p>
</td>
<td class="cellalignment4560" headers="d5610e5930 d5610e5905">
<p>&#34;Jane&#34;</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4560" id="d5610e5940" headers="d5610e5899">
<p>ent:employee2</p>
</td>
<td class="cellalignment4560" headers="d5610e5940 d5610e5902">
<p>foaf:familyName</p>
</td>
<td class="cellalignment4560" headers="d5610e5940 d5610e5905">
<p>&#34;Brown&#34;</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4560" id="d5610e5950" headers="d5610e5899">
<p>ent:employee3</p>
</td>
<td class="cellalignment4560" headers="d5610e5950 d5610e5902">
<p>foaf:givenName</p>
</td>
<td class="cellalignment4560" headers="d5610e5950 d5610e5905">
<p>&#34;Bill&#34;</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4560" id="d5610e5960" headers="d5610e5899">
<p>ent:employee3</p>
</td>
<td class="cellalignment4560" headers="d5610e5960 d5610e5902">
<p>foaf:familyName</p>
</td>
<td class="cellalignment4560" headers="d5610e5960 d5610e5905">
<p>&#34;Jones&#34;</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>There are two SEM_MATCH query options that influence the behavior of SPARQL CONSTRUCT: <code class="codeph">CONSTRUCT_UNIQUE=T</code> and <code class="codeph">CONSTRUCT_STRICT=T</code>. Using the <code class="codeph">CONSTRUCT_UNIQUE=T</code> query option ensures that only unique RDF triples are returned from the CONSTRUCT query. Using the <code class="codeph">CONSTRUCT_STRICT=T</code> query option ensures that only valid RDF triples are returned from the CONSTRUCT query. Valid RDF triples are those that have (1) a URI or blank node in the subject position, (2) a URI in the predicate position, and (3) a URI, blank node or RDF literal in the object position. Both of these query options are turned off by default for improved query performance.</p>
<div class="example" id="GUID-9DAC9FA2-0546-4744-9FF3-FD61B07130CA__CIHCGJBJ">
<p class="titleinexample">Example 1-24 SPARQL CONSTRUCT</p>
<p><a href="rdf-overview.htm#GUID-9DAC9FA2-0546-4744-9FF3-FD61B07130CA__CIHCGJBJ">Example 1-24</a> shows a SPARQL CONSTRUCT query that builds an RDF graph of employee names using the foaf vocabulary.</p>
<pre dir="ltr">SELECT subj$rdfterm, pred$rdfterm, obj$rdfterm
  FROM TABLE(SEM_MATCH(
    &#39;PREFIX  ent: &lt;http://www.example.org/enterprise/&gt; 
     PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;
     CONSTRUCT
      {?e foaf:givenName  ?fname .
       ?e foaf:familyName ?lname 
      }
     WHERE
      {?e ent:fname ?fname .
       ?e ent:lname ?lname 
      }&#39;,
    SEM_Models(&#39;enterprise&#39;),
    SEM_Rulebases(&#39;RDFS&#39;),
    null, null));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-9DAC9FA2-0546-4744-9FF3-FD61B07130CA__CIHFBGCC">
<p class="titleinexample">Example 1-25 CONSTRUCT with Solution Modifiers</p>
<p>SPARQL SOLUTION modifiers can be used with CONSTRUCT queries. <a href="rdf-overview.htm#GUID-9DAC9FA2-0546-4744-9FF3-FD61B07130CA__CIHFBGCC">Example 1-25</a> shows the use of ORDER BY and LIMIT to build a graph about the top two highest-paid employees. Note that the LIMIT 2 clause applies to the query pattern not to the overall CONSTRUCT query. That is, the query pattern will return two result rows, but the overall CONSTRUCT query will return 6 RDF triples (three for each of the two employees bound to <code class="codeph">?e</code>).</p>
<pre dir="ltr">SELECT subj$rdfterm, pred$rdfterm, obj$rdfterm
  FROM TABLE(SEM_MATCH(
    &#39;PREFIX  ent: &lt;http://www.example.org/enterprise/&gt; 
     PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;
     CONSTRUCT
      { ?e ent:fname       ?fname .
        ?e ent:lname       ?lname .
        ?e ent:dateOfBirth ?dob }
     WHERE
      { ?e ent:fname  ?fname .
        ?e ent:lname  ?lname .
        ?e ent:salary ?sal
      }
     ORDER BY DESC(?sal)
     LIMIT 2&#39;,
    SEM_Models(&#39;enterprise&#39;),
    SEM_Rulebases(&#39;RDFS&#39;),
    null, null));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-9DAC9FA2-0546-4744-9FF3-FD61B07130CA__CIHGHJIJ">
<p class="titleinexample">Example 1-26 SPARQL 1.1 Features with CONSTRUCT</p>
<p>SPARQL 1.1 features are supported within CONSTRUCT query patterns. <a href="rdf-overview.htm#GUID-9DAC9FA2-0546-4744-9FF3-FD61B07130CA__CIHGHJIJ">Example 1-26</a> shows the use of subqueries and SELECT expressions within a CONSTRUCT query.</p>
<pre dir="ltr">SELECT subj$rdfterm, pred$rdfterm, obj$rdfterm
  FROM TABLE(SEM_MATCH(
    &#39;PREFIX  ent: &lt;http://www.example.org/enterprise/&gt; 
     PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;
     CONSTRUCT
      { ?e foaf:name  ?name }
     WHERE
      { SELECT ?e (CONCAT(?fname,&#34; &#34;,?lname) AS ?name)
        WHERE { ?e ent:fname ?fname .
                ?e ent:lname ?lname }
      }&#39;,
    SEM_Models(&#39;enterprise&#39;),
    SEM_Rulebases(&#39;RDFS&#39;),
    null, null));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-9DAC9FA2-0546-4744-9FF3-FD61B07130CA__CIHDFFFE">
<p class="titleinexample">Example 1-27 SPARQL CONSTRUCT with Named Graphs</p>
<p>Named graph data cannot be returned from SPARQL CONSTRUCT queries because, in accordance with the W3C SPARQL specification, only RDF triples are returned, not RDF quads. The FROM, FROM NAMED and GRAPH keywords, however, can be used when matching the query pattern defined in the WHERE clause.</p>
<p><a href="rdf-overview.htm#GUID-9DAC9FA2-0546-4744-9FF3-FD61B07130CA__CIHDFFFE">Example 1-27</a> constructs an RDF graph with <code class="codeph">ent:name</code> triples from the UNION of named graphs <code class="codeph">ent:g1</code> and <code class="codeph">ent:g2</code>, <code class="codeph">ent:dateOfBirth</code> triples from named graph <code class="codeph">ent:g3</code>, and <code class="codeph">ent:ssn</code> triples from named g<code class="codeph">raph ent:g4</code>.</p>
<pre dir="ltr">SELECT subj$rdfterm, pred$rdfterm, obj$rdfterm
  FROM TABLE(SEM_MATCH(
    &#39;PREFIX  ent: &lt;http://www.example.org/enterprise/&gt; 
     PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;
     CONSTRUCT
      { ?e ent:name ?name .
        ?e ent:dateOfBirth ?dob .
        ?e ent:ssn ?ssn
      }
     FROM ent:g1
     FROM ent:g2
     FROM NAMED ent:g3
     FROM NAMED ent:g4
     WHERE
      { ?e foaf:name ?name .
        GRAPH ent:g3 { ?e ent:dateOfBirth ?dob }
        GRAPH ent:g4 { ?e ent:ssn ?ssn } 
      }&#39;,
    SEM_Models(&#39;enterprise&#39;),
    SEM_Rulebases(&#39;RDFS&#39;),
    null, null));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-9DAC9FA2-0546-4744-9FF3-FD61B07130CA__CIHHBCJA">
<p class="titleinexample">Example 1-28 SPARQL CONSTRUCT Normal Form</p>
<pre dir="ltr">SELECT subj$rdfterm, pred$rdfterm, obj$rdfterm
  FROM TABLE(SEM_MATCH(
    &#39;PREFIX  ent: &lt;http://www.example.org/enterprise/&gt; 
     PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;
     CONSTRUCT
      {?e foaf:givenName  ?fname .
       ?e foaf:familyName ?lname 
      }
     WHERE
      {?e ent:fname ?fname .
       ?e ent:lname ?lname 
      }&#39;,
    SEM_Models(&#39;enterprise&#39;),
    SEM_Rulebases(&#39;RDFS&#39;),
    null, null));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-9DAC9FA2-0546-4744-9FF3-FD61B07130CA__CIHGDJDB">
<p class="titleinexample">Example 1-29 SPARQL CONSTRUCT Short Form</p>
<p>A short form of CONSTRUCT is supported when the CONSTRUCT template is exactly the same as the WHERE clause. In this case, only the keyword CONSTRUCT is needed, and the graph pattern in the WHERE clause will also be used as a CONSTRUCT template. <a href="rdf-overview.htm#GUID-9DAC9FA2-0546-4744-9FF3-FD61B07130CA__CIHGDJDB">Example 1-29</a> shows the short form of <a href="rdf-overview.htm#GUID-9DAC9FA2-0546-4744-9FF3-FD61B07130CA__CIHHBCJA">Example 1-28</a>.</p>
<pre dir="ltr">SELECT subj$rdfterm, pred$rdfterm, obj$rdfterm
  FROM TABLE(SEM_MATCH(
    &#39;PREFIX  ent: &lt;http://www.example.org/enterprise/&gt; 
     PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;
     CONSTRUCT
     WHERE
      {?e ent:fname ?fname .
       ?e ent:lname ?lname 
      }&#39;,
    SEM_Models(&#39;enterprise&#39;),
    SEM_Rulebases(&#39;RDFS&#39;),
    null, null));
</pre></div>
<!-- class="example" --></div>
<a id="RDFRM759"></a><a id="RDFRM758"></a>
<div class="props_rev_3"><a id="GUID-8EEC44BD-9CDE-41B3-B147-92B183A14AA2"></a>
<h4 id="RDFRM-GUID-8EEC44BD-9CDE-41B3-B147-92B183A14AA2" class="sect4"><span class="enumeration_section">1.6.4.1</span> Typical SPARQL CONSTRUCT Workflow</h4>
<div>
<p>A typical workflow for SPARQL CONSTRUCT would be to execute a CONSTRUCT query to extract and/or transform RDF triple data from an existing semantic model and then load this data into an existing or new semantic model. The data loading can be accomplished through simple INSERT statements or executing the <a href="sem-apis-ref.htm#GUID-AB6697BF-C840-4F48-8C81-FACB3CA54B1A">SEM_APIS.BULK_LOAD_FROM_STAGING_TABLE</a> procedure.</p>
<div class="example" id="GUID-8EEC44BD-9CDE-41B3-B147-92B183A14AA2__CIHIEDGC">
<p class="titleinexample">Example 1-30 SPARQL CONSTRUCT Workflow</p>
<p><a href="rdf-overview.htm#GUID-8EEC44BD-9CDE-41B3-B147-92B183A14AA2__CIHIEDGC">Example 1-30</a> constructs <code class="codeph">foaf:name</code> triples from existing <code class="codeph">ent:fname</code> and <code class="codeph">ent:lname</code> triples and then bulk loads these new triples back into the original model. Afterward, you can query the original model for <code class="codeph">foaf:name</code> values.</p>
<pre dir="ltr">-- use create table as select to build a staging table 
CREATE TABLE STAB(RDF$STC_sub, RDF$STC_pred, RDF$STC_obj) AS
SELECT subj$rdfterm, pred$rdfterm, obj$rdfterm
FROM TABLE(SEM_MATCH(
 &#39;PREFIX  ent: &lt;http://www.example.org/enterprise/&gt; 
  PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;
  CONSTRUCT
   { ?e foaf:name  ?name }
  WHERE
   { SELECT ?e (CONCAT(?fname,&#34; &#34;,?lname) AS ?name)
     WHERE { ?e ent:fname ?fname .
             ?e ent:lname ?lname }
   }&#39;,
 SEM_Models(&#39;enterprise&#39;),
 null, null, null)); 
 
-- grant privileges on STAB
GRANT SELECT ON STAB TO MDSYS;
 
-- bulk load data back into the enterprise model
BEGIN
  SEM_APIS.BULK_LOAD_FROM_STAGING_TABLE(
    model_name=&gt;&#39;enterprise&#39;,
    table_owner=&gt;&#39;rdfuser&#39;,
    table_name=&gt;&#39;stab&#39;,
    flags=&gt;&#39; parallel_create_index parallel=4 &#39;);
END;
/
 
-- query for foaf:name data
SELECT e$rdfterm, name$rdfterm
FROM TABLE(SEM_MATCH(
 &#39;PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;
  SELECT ?e ?name
  WHERE { ?e foaf:name ?name }&#39;,
 SEM_Models(&#39;enterprise&#39;),
null, null, null));
</pre>
<p>See also the W3C SPARQL specification for more information on SPARQL CONSTRUCT queries, specifically: <a href="http://www.w3.org/TR/sparql11-query/#construct" target="_blank"><code class="codeph">http://www.w3.org/TR/sparql11-query/#construct</code></a></p>
</div>
<!-- class="example" --></div>
</div>
</div>
<a id="RDFRM761"></a><a id="RDFRM762"></a><a id="RDFRM763"></a><a id="RDFRM760"></a>
<div class="props_rev_3"><a id="GUID-473B972B-93AB-4648-9496-2ED9645E763D"></a>
<h3 id="RDFRM-GUID-473B972B-93AB-4648-9496-2ED9645E763D" class="sect3"><span class="enumeration_section">1.6.5</span> Graph Patterns: Support for SPARQL DESCRIBE Syntax</h3>
<div>
<p>SEM_MATCH allows fully-specified SPARQL DESCRIBE queries in the query parameter.</p>
<p>SPARQL DESCRIBE queries are useful for exploring RDF data sets. You can easily find information about a given resource or set of resources without knowing information about the exact RDF properties used in the data set. A DESCRIBE query returns a &#34;description&#34; of a resource <code class="codeph">r</code>, where a &#34;description&#34; is the set of RDF triples in the query data set that contain <code class="codeph">r</code> in either the subject or object position.</p>
<p>Like CONSTRUCT queries, DESCRIBE queries return an RDF graph instead of result bindings. Each DESCRIBE query, therefore, returns the same columns as a CONSTRUCT query (see <a href="rdf-overview.htm#GUID-9DAC9FA2-0546-4744-9FF3-FD61B07130CA">Graph Patterns: Support for SPARQL CONSTRUCT Syntax</a> for a listing of return columns).</p>
<p>SPARQL DESCRIBE queries use the same syntax as SPARQL SELECT queries, except the topmost SELECT clause is replaced with a DESCRIBE clause. A DESCRIBE clause consists of the DESCRIBE keyword followed by a sequence of URIs and/or variables separated by whitespace or the DESCRIBE keyword followed by a single * (asterisk).</p>
<p>Two SEM_MATCH query options affect SPARQL DESCRIBE queries: <code class="codeph">CONSTRUCT_UNIQUE=T</code> and <code class="codeph">CONSTRUCT_STRICT=T</code>. <code class="codeph">CONSTRUCT_UNIQUE=T</code> ensures that duplicate triples are eliminated from the result, and <code class="codeph">CONSTRUCT_STRICT=T</code> ensures that invalid triples are eliminated from the result. Both of these options are turned off by default. These options are described in more detail in <a href="rdf-overview.htm#GUID-9DAC9FA2-0546-4744-9FF3-FD61B07130CA">Graph Patterns: Support for SPARQL CONSTRUCT Syntax</a>.</p>
<p>See also the W3C SPARQL specification for more information on SPARQL DESCRIBE queries, specifically: <a href="http://www.w3.org/TR/sparql11-query/#describe" target="_blank"><code class="codeph">http://www.w3.org/TR/sparql11-query/#describe</code></a></p>
<div class="example" id="GUID-473B972B-93AB-4648-9496-2ED9645E763D__CIHGIGCA">
<p class="titleinexample">Example 1-31 SPARQL DESCRIBE Short Form</p>
<p>A short form of SPARQL DESCRIBE is provided to describe a single constant URI. In the short form, only a DESCRIBE clause is needed. <a href="rdf-overview.htm#GUID-473B972B-93AB-4648-9496-2ED9645E763D__CIHGIGCA">Example 1-31</a> shows a short form SPARQL DESCRIBE query.</p>
<pre dir="ltr">SELECT subj$rdfterm, pred$rdfterm, obj$rdfterm
FROM TABLE(SEM_MATCH(
 &#39;DESCRIBE &lt;http://www.example.org/enterprise/emp_1&gt;&#39;,
 SEM_Models(&#39;enterprise&#39;),
null, null, null));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-473B972B-93AB-4648-9496-2ED9645E763D__CIHJFAFH">
<p class="titleinexample">Example 1-32 SPARQL DESCRIBE Normal Form</p>
<p>The normal form of SPARQL DESCRIBE specifies a DESCRIBE clause and a SPARQL query pattern, possibly including solution modifiers. <a href="rdf-overview.htm#GUID-473B972B-93AB-4648-9496-2ED9645E763D__CIHJFAFH">Example 1-32</a> shows a SPARQL DESCRIBE query that describes all employees whose departments are located in New Hampshire.</p>
<pre dir="ltr">SELECT subj$rdfterm, pred$rdfterm, obj$rdfterm
FROM TABLE(SEM_MATCH(
 &#39;PREFIX  ent: &lt;http://www.example.org/enterprise/&gt;
  DESCRIBE ?e
  WHERE 
   { ?e ent:department ?dept .
     ?dept ent:locatedIn &#34;New Hampshire&#34; }&#39;,
 SEM_Models(&#39;enterprise&#39;),
null, null, null));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-473B972B-93AB-4648-9496-2ED9645E763D__CIHIGAEJ">
<p class="titleinexample">Example 1-33 DESCRIBE *</p>
<p>With the normal form of DESCRIBE, as shown in <a href="rdf-overview.htm#GUID-473B972B-93AB-4648-9496-2ED9645E763D__CIHJFAFH">Example 1-32</a>, all resources bound to variables listed in the DESCRIBE clause are described. In <a href="rdf-overview.htm#GUID-473B972B-93AB-4648-9496-2ED9645E763D__CIHJFAFH">Example 1-32</a>, all employees returned from the query pattern and bound to <code class="codeph">?e</code> will be described. When DESCRIBE * is used, all visible variables in the query are described.</p>
<p><a href="rdf-overview.htm#GUID-473B972B-93AB-4648-9496-2ED9645E763D__CIHIGAEJ">Example 1-33</a> shows a modified version of <a href="rdf-overview.htm#GUID-473B972B-93AB-4648-9496-2ED9645E763D__CIHJFAFH">Example 1-32</a> that describes both employees (bound to <code class="codeph">?e</code>) and departments (bound to <code class="codeph">?dept</code>).</p>
<pre dir="ltr">SELECT subj$rdfterm, pred$rdfterm, obj$rdfterm
FROM TABLE(SEM_MATCH(
 &#39;PREFIX  ent: &lt;http://www.example.org/enterprise/&gt;
  DESCRIBE *
  WHERE 
   { ?e ent:department ?dept .
     ?dept ent:locatedIn &#34;New Hampshire&#34; }&#39;,
 SEM_Models(&#39;enterprise&#39;),
null, null, null));
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM141"></a><a id="RDFRM142"></a><a id="RDFRM143"></a><a id="RDFRM144"></a><a id="RDFRM145"></a><a id="RDFRM146"></a><a id="RDFRM147"></a><a id="RDFRM726"></a><a id="RDFRM727"></a><a id="RDFRM140"></a>
<div class="props_rev_3"><a id="GUID-0BC4B052-F1DA-45C8-9164-21829FC6500B"></a>
<h3 id="RDFRM-GUID-0BC4B052-F1DA-45C8-9164-21829FC6500B" class="sect3"><span class="enumeration_section">1.6.6</span> Graph Patterns: Support for SPARQL SELECT Syntax</h3>
<div>
<p>In addition to curly-brace graph patterns, SEM_MATCH allows fully-specified SPARQL SELECT queries in the <code class="codeph">query</code> parameter. When using the SPARQL SELECT syntax option, SEM_MATCH supports the following query constructs: BASE, PREFIX, SELECT, SELECT DISTINCT, FROM, FROM NAMED, WHERE, ORDER BY, LIMIT, and OFFSET. Each SPARQL SELECT syntax query must include a SELECT clause and a graph pattern.</p>
<p>A key difference between curly-brace and SPARQL SELECT syntax when using SEM_MATCH is that only variables appearing in the SPARQL SELECT clause are returned from SEM_MATCH when using SPARQL SELECT syntax.</p>
<p>One additional column, SEM$ROWNUM, is returned from SEM_MATCH when using SPARQL SELECT syntax. This NUMBER column can be used to order the results of a SEM_MATCH query so that the result order matches the ordering specified by a SPARQL ORDER BY clause.</p>
<p>The SPARQL ORDER BY clause can be used to order the results of SEM_MATCH queries. This clause specifies a sequence of comparators used to order the results of a given query. A comparator consists of an expression composed of variables, RDF terms, arithmetic operators (+, -, *, /), Boolean operators and logical connectives (||, &amp;&amp;, !), comparison operators (&lt;, &gt;, &lt;=, &gt;=, =, !=), and any functions available for use in FILTER expressions.</p>
<p>The following order of operations is used when evaluating SPARQL SELECT queries:</p>
<ol>
<li>
<p>Graph pattern matching</p>
</li>
<li>
<p>Grouping (see <a href="rdf-overview.htm#GUID-C926CA2E-A39C-471E-9E0F-5E64108A2825">Grouping and Aggregation</a>.)</p>
</li>
<li>
<p>Aggregates (see <a href="rdf-overview.htm#GUID-C926CA2E-A39C-471E-9E0F-5E64108A2825">Grouping and Aggregation</a>)</p>
</li>
<li>
<p>Having (see <a href="rdf-overview.htm#GUID-C926CA2E-A39C-471E-9E0F-5E64108A2825">Grouping and Aggregation</a>)</p>
</li>
<li>
<p>Values (see <a href="rdf-overview.htm#GUID-C6646E9A-4A49-482F-A3EA-F9658114A0C1">Value Assignment</a>)</p>
</li>
<li>
<p>Select expressions</p>
</li>
<li>
<p>Order by</p>
</li>
<li>
<p>Projection</p>
</li>
<li>
<p>Distinct</p>
</li>
<li>
<p>Offset</p>
</li>
<li>
<p>Limit</p>
</li>
</ol>
<p>See also the W3C SPARQL specification for more information on SPARQL BASE, PREFIX, SELECT, SELECT DISTINCT, FROM, FROM NAMED, WHERE, ORDER BY, LIMIT, and OFFSET constructs, specifically: <a href="http://www.w3.org/TR/sparql11-query/" target="_blank"><code class="codeph">http://www.w3.org/TR/sparql11-query/</code></a></p>
<div class="example" id="GUID-0BC4B052-F1DA-45C8-9164-21829FC6500B__CIHBJICF">
<p class="titleinexample">Example 1-34 SPARQL PREFIX, SELECT, and WHERE Clauses</p>
<p><a href="rdf-overview.htm#GUID-0BC4B052-F1DA-45C8-9164-21829FC6500B__CIHBJICF">Example 1-34</a> uses the following SPARQL constructs:</p>
<ul style="list-style-type: disc;">
<li>
<p>SPARQL PREFIX clause to specify an abbreviation for the <code class="codeph">http://www.example.org/family/</code> and <code class="codeph">http://xmlns.com/foaf/0.1/</code> namespaces</p>
</li>
<li>
<p>SPARQL SELECT clause to specify the set of variables to project out of the query</p>
</li>
<li>
<p>SPARQL WHERE clause to specify the query graph pattern</p>
</li>
</ul>
<pre dir="ltr">SELECT y, name
  FROM TABLE(SEM_MATCH(
    &#39;PREFIX : &lt;http://www.example.org/family/&gt; 
     PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;
     SELECT ?y ?name
     WHERE
     {?x :grandParentOf ?y . 
      ?x foaf:name ?name }&#39;,
    SEM_Models(&#39;family&#39;),
    SEM_Rulebases(&#39;RDFS&#39;,&#39;family_rb&#39;), 
    null, null));
</pre>
<p><a href="rdf-overview.htm#GUID-0BC4B052-F1DA-45C8-9164-21829FC6500B__CIHBJICF">Example 1-34</a> returns the following columns: y, y$RDFVID, y$_PREFIX, y$_SUFFIX, y$RDFVTYP, y$RDFCLOB, y$RDFLTYP, y$RDFLANG, name, name$RDFVID, name$_PREFIX, name$_SUFFIX, name$RDFVTYP, name$RDFCLOB, name$RDFLTYP, name$RDFLANG, and SEM$ROWNUM.</p>
</div>
<!-- class="example" -->
<div class="example" id="GUID-0BC4B052-F1DA-45C8-9164-21829FC6500B__CIHEHBAH">
<p class="titleinexample">Example 1-35 SPARQL SELECT * (All Variables in Triple Pattern)</p>
<p>The SPARQL SELECT clause specifies either (A) a sequence of variables and/or expressions (see <a href="rdf-overview.htm#GUID-7CEE1E1B-507A-4AE5-9998-9193269BF692">Expressions in the SELECT Clause</a>), or (B) * (asterisk), which projects all variables that appear in a specified triple pattern. <a href="rdf-overview.htm#GUID-0BC4B052-F1DA-45C8-9164-21829FC6500B__CIHEHBAH">Example 1-35</a> uses the SPARQL SELECT clause to select all variables that appear in a specified triple pattern.</p>
<pre dir="ltr">SELECT x, y, name
  FROM TABLE(SEM_MATCH(
    &#39;PREFIX : &lt;http://www.example.org/family/&gt; 
     PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;
     <span class="bold">SELECT *</span>
     WHERE
     {?x :grandParentOf ?y . 
      ?x foaf:name ?name }&#39;,
    SEM_Models(&#39;family&#39;),
    SEM_Rulebases(&#39;RDFS&#39;,&#39;family_rb&#39;), 
    null, null));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-0BC4B052-F1DA-45C8-9164-21829FC6500B__CIHJHFAE">
<p class="titleinexample">Example 1-36 SPARQL SELECT DISTINCT</p>
<p>The DISTINCT keyword can be used after SELECT to remove duplicate result rows. <a href="rdf-overview.htm#GUID-0BC4B052-F1DA-45C8-9164-21829FC6500B__CIHJHFAE">Example 1-36</a> uses SELECT DISTINCT to select only the distinct names.</p>
<pre dir="ltr">SELECT name
  FROM TABLE(SEM_MATCH(
    &#39;PREFIX : &lt;http://www.example.org/family/&gt; 
     PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;
     <span class="bold">SELECT DISTINCT ?name</span>
     WHERE
     {?x :grandParentOf ?y . 
      ?x foaf:name ?name }&#39;,
    SEM_Models(&#39;family&#39;),
    SEM_Rulebases(&#39;RDFS&#39;,&#39;family_rb&#39;), 
    null, null));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-0BC4B052-F1DA-45C8-9164-21829FC6500B__CIHCEJEH">
<p class="titleinexample">Example 1-37 RDF Dataset Specification Using FROM and FROM NAMED</p>
<p>SPARQL FROM and FROM NAMED are used to specify the RDF dataset for a query. FROM clauses are used to specify the set of graphs that make up the default graph, and FROM NAMED clauses are used to specify the set of graphs that make up the set of named graphs. <a href="rdf-overview.htm#GUID-0BC4B052-F1DA-45C8-9164-21829FC6500B__CIHCEJEH">Example 1-37</a> uses FROM and FROM NAMED to select email addresses and friend of relationships from the union of the <code class="codeph">&lt;http://www.friends.com/friends&gt;</code> and <code class="codeph">&lt;http://www.contacts.com/contacts&gt;</code> graphs and grandparent information from the <code class="codeph">&lt;http://www.example.org/family/Smith&gt;</code> and <code class="codeph">&lt;http://www.example.org/family/Jones&gt;</code> graphs.</p>
<pre dir="ltr">SELECT x, y, z, email
  FROM TABLE(SEM_MATCH(
    &#39;PREFIX : &lt;http://www.example.org/family/&gt; 
     PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;
     PREFIX friends: &lt;http://www.friends.com/&gt;
     PREFIX contacts: &lt;http://www.contacts.com/&gt;
     SELECT *
     <span class="bold">FROM friends:friends</span>
     <span class="bold">FROM contacts:contacts</span>
     <span class="bold">FROM NAMED :Smith</span>
     <span class="bold">FROM NAMED :Jones</span>
     WHERE
     {?x foaf:frendOf ?y .
      ?x :email ?email .
      GRAPH ?g {
        ?x :grandParentOf ?z }
     }&#39;,
    SEM_Models(&#39;family&#39;),
    SEM_Rulebases(&#39;RDFS&#39;,&#39;family_rb&#39;), 
    null, null));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-0BC4B052-F1DA-45C8-9164-21829FC6500B__CIHBHHJF">
<p class="titleinexample">Example 1-38 SPARQL ORDER BY</p>
<p>In a SPARQL ORDER BY clause:</p>
<ul style="list-style-type: disc;">
<li>
<p>Single variable ordering conditions do not require enclosing parenthesis, but parentheses are required for more complex ordering conditions.</p>
</li>
<li>
<p>An optional ASC() or DESC() order modifier can be used to indicate the desired order (ascending or descending, respectively). Ascending is the default order.</p>
</li>
<li>
<p>When using SPARQL ORDER BY in SEM_MATCH, the containing SQL query should be ordered by SEM$ROWNUM to ensure that the desired ordering is maintained through any enclosing SQL blocks.</p>
</li>
</ul>
<p><a href="rdf-overview.htm#GUID-0BC4B052-F1DA-45C8-9164-21829FC6500B__CIHBHHJF">Example 1-38</a> uses a SPARQL ORDER BY clause to select all cameras, and it specifies ordering by descending type and ascending total price (<code class="codeph">price * (1 - discount) * (1 + tax)</code>).</p>
<pre dir="ltr">SELECT *
  FROM TABLE(SEM_MATCH(
    &#39;PREFIX : &lt;http://www.example.org/electronics/&gt; 
     SELECT * 
     WHERE
      {?x :price ?p .
       ?x :discount ?d .
       ?x :tax ?t .
       ?x :cameraType ?cType .
      }
     <span class="bold">ORDER BY DESC(?cType) ASC(?p * (1-?d) * (1+?t))&#39;</span>,
    SEM_Models(&#39;electronics&#39;),
    SEM_Rulebases(&#39;RDFS&#39;), 
    null, null))
<span class="bold">ORDER BY SEM$ROWNUM</span>;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-0BC4B052-F1DA-45C8-9164-21829FC6500B__CIHCHGDI">
<p class="titleinexample">Example 1-39 SPARQL LIMIT</p>
<p>SPARQL LIMIT and SPARQL OFFSET can be used to select different subsets of the query solutions. <a href="rdf-overview.htm#GUID-0BC4B052-F1DA-45C8-9164-21829FC6500B__CIHCHGDI">Example 1-39</a> uses SPARQL LIMIT to select the five cheapest cameras, and <a href="rdf-overview.htm#GUID-0BC4B052-F1DA-45C8-9164-21829FC6500B__CIHDGIIH">Example 1-40</a> uses SPARQL LIMIT and OFFSET to select the fifth through tenth cheapest cameras.</p>
<pre dir="ltr">SELECT *
  FROM TABLE(SEM_MATCH(
    &#39;PREFIX : &lt;http://www.example.org/electronics/&gt; 
     SELECT ?x ?cType ?p
     WHERE
      {?x :price ?p .
       ?x :cameraType ?cType .
      }
     ORDER BY ASC(?p)
     LIMIT 5&#39;,
    SEM_Models(&#39;electronics&#39;),
    SEM_Rulebases(&#39;RDFS&#39;), 
    null, null))
ORDER BY SEM$ROWNUM;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-0BC4B052-F1DA-45C8-9164-21829FC6500B__CIHDGIIH">
<p class="titleinexample">Example 1-40 SPARQL OFFSET</p>
<pre dir="ltr">SELECT *
  FROM TABLE(SEM_MATCH(
    &#39;PREFIX : &lt;http://www.example.org/electronics/&gt; 
     SELECT ?x ?cType ?p
     WHERE
      {?x :price ?p .
       ?x :cameraType ?cType .
      }
     ORDER BY ASC(?p)
     LIMIT 5
     <span class="bold">OFFSET 5</span>&#39;,
    SEM_Models(&#39;electronics&#39;),
    SEM_Rulebases(&#39;RDFS&#39;), 
    null, null))
ORDER BY SEM$ROWNUM;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-0BC4B052-F1DA-45C8-9164-21829FC6500B__CIHEIIIG">
<p class="titleinexample">Example 1-41 Query Using Full URIs</p>
<p><a id="d5610e6516" class="indexterm-anchor"></a><a id="d5610e6518" class="indexterm-anchor"></a>The SPARQL BASE keyword is used to set a global prefix. All relative IRIs will be resolved with the BASE IRI using the basic algorithm described in Section 5.2 of the <span class="italic">Uniform Resource Identifier (URI): Generic Syntax (RFC3986)</span> (<a href="http://www.ietf.org/rfc/rfc3986.txt" target="_blank"><code class="codeph">http://www.ietf.org/rfc/rfc3986.txt</code></a>). <a href="rdf-overview.htm#GUID-0BC4B052-F1DA-45C8-9164-21829FC6500B__CIHEIIIG">Example 1-41</a> is a simple query using full URIs, and <a href="rdf-overview.htm#GUID-0BC4B052-F1DA-45C8-9164-21829FC6500B__CIHIGHJD">Example 1-42</a> is an equivalent query using a base IRI.</p>
<pre dir="ltr">SELECT *
  FROM TABLE(SEM_MATCH(
    &#39;SELECT ?employee ?position
     WHERE
      {?x &lt;http://www.example.org/employee&gt; ?p .
       ?p &lt;http://www.example.org/employee/name&gt; ?employee .
       ?p &lt;http://www.example.org/employee/position&gt; ?pos .
       ?pos &lt;http://www.example.org/positions/name&gt; ?position
      }&#39;,
    SEM_Models(&#39;enterprise&#39;),
    null, 
    null, null))
ORDER BY 1,2;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-0BC4B052-F1DA-45C8-9164-21829FC6500B__CIHIGHJD">
<p class="titleinexample">Example 1-42 Query Using a Base IRI</p>
<pre dir="ltr">SELECT *
  FROM TABLE(SEM_MATCH(
    &#39;<span class="bold">BASE &lt;http://www.example.org/&gt;</span>
     SELECT ?employee ?position
     WHERE
      {<span class="bold">?x &lt;employee&gt; ?p .</span>
       <span class="bold">?p &lt;employee/name&gt; ?employee .</span>
       <span class="bold">?p &lt;employee/position&gt; ?pos .</span>
       <span class="bold">?pos &lt;positions/name&gt; ?position</span>
      }&#39;,
    SEM_Models(&#39;enterprise&#39;),
    null, 
    null, null))
ORDER BY 1,2;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM148"></a>
<div class="props_rev_3"><a id="GUID-7DDF240B-912C-4844-B482-36B30EB3037B"></a>
<h3 id="RDFRM-GUID-7DDF240B-912C-4844-B482-36B30EB3037B" class="sect3"><span class="enumeration_section">1.6.7</span> Graph Patterns: Support for SPARQL 1.1 Constructs</h3>
<div>
<p>SEM_MATCH supports the following SPARQL 1.1 constructs:</p>
<ul style="list-style-type: disc;">
<li>
<p>An expanded set of functions (all items in <a href="rdf-overview.htm#GUID-55180C4B-7B8B-4F45-A948-A46D227935FA__CIHHJDHG" title="Built-in Functions Available for FILTER Clause">Table 1-12</a> in <a href="rdf-overview.htm#GUID-55180C4B-7B8B-4F45-A948-A46D227935FA">Graph Patterns: Support for Curly Brace Syntax_ and OPTIONAL_ FILTER_ UNION_ and GRAPH Keywords</a>)</p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-7CEE1E1B-507A-4AE5-9998-9193269BF692">Expressions in the SELECT Clause</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-8C5DE8A7-9A35-43BF-8E44-E8D76C778D30">Subqueries</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-C926CA2E-A39C-471E-9E0F-5E64108A2825">Grouping and Aggregation</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-0856FD72-213D-4181-83D6-2421AA50D39B">Negation</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-C6646E9A-4A49-482F-A3EA-F9658114A0C1">Value Assignment</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-A3F16175-AC4B-4B19-BF25-FD918760F18E">Property Paths</a></p>
</li>
</ul>
</div>
<a id="RDFRM150"></a><a id="RDFRM151"></a><a id="RDFRM149"></a>
<div class="props_rev_3"><a id="GUID-7CEE1E1B-507A-4AE5-9998-9193269BF692"></a>
<h4 id="RDFRM-GUID-7CEE1E1B-507A-4AE5-9998-9193269BF692" class="sect4"><span class="enumeration_section">1.6.7.1</span> Expressions in the SELECT Clause</h4>
<div>
<p>Expressions can be used in the SELECT clause to project the value of an expression from a query. A SELECT expression is composed of variables, RDF terms, arithmetic operators (+, -, *, /), Boolean operators and logical connectives (||, &amp;&amp;, !), comparison operators (&lt;, &gt;, &lt;=, &gt;=, =, !=), and any functions available for use in FILTER expressions. The expression must be aliased to a single variable using the AS keyword, and the overall <span class="italic">&lt;expression&gt; AS &lt;alias&gt;</span> fragment must be enclosed in parentheses. The alias variable cannot already be defined in the query. A SELECT expression may reference the result of a previous SELECT expression (that is, an expression that appears earlier in the SELECT clause).</p>
<div class="example" id="GUID-7CEE1E1B-507A-4AE5-9998-9193269BF692__CIHHAIBF">
<p class="titleinexample">Example 1-43 SPARQL SELECT Expression</p>
<p><a href="rdf-overview.htm#GUID-7CEE1E1B-507A-4AE5-9998-9193269BF692__CIHHAIBF">Example 1-43</a> uses a SELECT expression to project the total price for each camera.</p>
<pre dir="ltr">SELECT *
  FROM TABLE(SEM_MATCH(
    &#39;PREFIX : &lt;http://www.example.org/electronics/&gt; 
     SELECT ?x <span class="bold">((?p * (1-?d) * (1+?t)) AS ?totalPrice)</span> 
     WHERE
      {?x :price ?p .
       ?x :discount ?d .
       ?x :tax ?t .
       ?x :cameraType ?cType .
      }&#39;,
    SEM_Models(&#39;electronics&#39;),
    SEM_Rulebases(&#39;RDFS&#39;), 
    null, null));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-7CEE1E1B-507A-4AE5-9998-9193269BF692__CIHIABAH">
<p class="titleinexample">Example 1-44 SPARQL SELECT Expressions (2)</p>
<p><a href="rdf-overview.htm#GUID-7CEE1E1B-507A-4AE5-9998-9193269BF692__CIHIABAH">Example 1-44</a> uses two SELECT expressions to project the discount price with and without sales tax.</p>
<pre dir="ltr">SELECT *
  FROM TABLE(SEM_MATCH(
    &#39;PREFIX : &lt;http://www.example.org/electronics/&gt; 
     SELECT ?x <span class="bold">((?p * (1-?d)) AS ?preTaxPrice) ((?preTaxPrice * (1+?t)) AS ?finalPrice)</span>
     WHERE
      {?x :price ?p .
       ?x :discount ?d .
       ?x :tax ?t .
       ?x :cameraType ?cType .
      }&#39;,
    SEM_Models(&#39;electronics&#39;),
    SEM_Rulebases(&#39;RDFS&#39;), 
    null, null));
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM153"></a><a id="RDFRM152"></a>
<div class="props_rev_3"><a id="GUID-8C5DE8A7-9A35-43BF-8E44-E8D76C778D30"></a>
<h4 id="RDFRM-GUID-8C5DE8A7-9A35-43BF-8E44-E8D76C778D30" class="sect4"><span class="enumeration_section">1.6.7.2</span> Subqueries</h4>
<div>
<p>Subqueries are allowed with SPARQL SELECT syntax. That is, fully-specified SPARQL SELECT queries may be embedded within other SPARQL SELECT queries. Subqueries have many uses, for example, limiting the number of results from a subcomponent of a query.</p>
<div class="example" id="GUID-8C5DE8A7-9A35-43BF-8E44-E8D76C778D30__CIHEAECD">
<p class="titleinexample">Example 1-45 SPARQL SELECT Subquery</p>
<p><a href="rdf-overview.htm#GUID-8C5DE8A7-9A35-43BF-8E44-E8D76C778D30__CIHEAECD">Example 1-45</a> uses a subquery to find the manufacturer that makes the cheapest camera and then finds all other cameras made by this manufacturer.</p>
<pre dir="ltr">SELECT *
  FROM TABLE(SEM_MATCH(
    &#39;PREFIX : &lt;http://www.example.org/electronics/&gt; 
     SELECT ?c1
     WHERE {?c1 rdf:type :Camera .
            ?c1 :manufacturer ?m .
            {
             <span class="bold">SELECT ?m</span>
             <span class="bold">WHERE {?c2 rdf:Type :Camera .</span>
                    <span class="bold">?c2 :price ?p .</span>
                    <span class="bold">?c2 :manufacturer ?m .</span>
             <span class="bold">}</span>
             <span class="bold">ORDER BY ASC(?p)</span>
             <span class="bold">LIMIT 1</span>
            }
     }&#39;,
    SEM_Models(&#39;electronics&#39;),
    SEM_Rulebases(&#39;RDFS&#39;), 
    null, null));
</pre>
<p>Subqueries are logically evaluated first, and the results are projected up to the outer query. Note that only variables projected in the subquery&#39;s SELECT clause are visible to the outer query.</p>
</div>
<!-- class="example" --></div>
</div>
<a id="RDFRM157"></a><a id="RDFRM155"></a><a id="RDFRM156"></a><a id="RDFRM158"></a><a id="RDFRM159"></a><a id="RDFRM160"></a><a id="RDFRM161"></a><a id="RDFRM154"></a>
<div class="props_rev_3"><a id="GUID-C926CA2E-A39C-471E-9E0F-5E64108A2825"></a>
<h4 id="RDFRM-GUID-C926CA2E-A39C-471E-9E0F-5E64108A2825" class="sect4"><span class="enumeration_section">1.6.7.3</span> Grouping and Aggregation</h4>
<div>
<p>The GROUP BY keyword used to perform grouping. Syntactically, the GROUP BY keyword must appear after the WHERE clause and before any solution modifiers such as ORDER BY or LIMIT.</p>
<p>Aggregates are used to compute values across results within a group. An aggregate operates over a collection of values and produces a single value as a result. SEM_MATCH supports the following built-in Aggregates: COUNT, SUM, MIN, MAX, AVG, GROUP_CONCAT and SAMPLE. These aggregates are described in <a href="rdf-overview.htm#GUID-C926CA2E-A39C-471E-9E0F-5E64108A2825__CIHHJDAF" title="Built-in Aggregates">Table 1-14</a>.</p>
<div class="tblformal" id="GUID-C926CA2E-A39C-471E-9E0F-5E64108A2825__CIHHJDAF">
<p class="titleintable">Table 1-14 Built-in Aggregates</p>
<table class="cellalignment4510" title="Built-in Aggregates" summary="Built-in Aggregates">
<thead>
<tr class="cellalignment4501">
<th class="cellalignment4548" id="d5610e6841">Aggregate</th>
<th class="cellalignment4554" id="d5610e6844">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e6849" headers="d5610e6841">
<p>AVG(expression)</p>
</td>
<td class="cellalignment4555" headers="d5610e6849 d5610e6844">
<p>Returns the numeric average of <span class="italic">expression</span> over the values within a group.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e6859" headers="d5610e6841">
<p>COUNT(* | expression)</p>
</td>
<td class="cellalignment4555" headers="d5610e6859 d5610e6844">
<p>Counts the number of times <span class="italic">expression</span> has a bound, non-error value within a group; asterisk (*) counts the number of results within a group.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e6869" headers="d5610e6841">
<p>GROUP_CONCAT(expression [; SEPARATOR = &#34;STRING&#34;])</p>
</td>
<td class="cellalignment4555" headers="d5610e6869 d5610e6844">
<p>Performs string concatenation of <span class="italic">expression</span> over the values within a group. If provided, an optional separator string will be placed between each value.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e6879" headers="d5610e6841">
<p>MAX(expression)</p>
</td>
<td class="cellalignment4555" headers="d5610e6879 d5610e6844">
<p>Returns the maximum value of <span class="italic">expression</span> within a group based on the ordering defined by SPARQL ORDER BY.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e6889" headers="d5610e6841">
<p>MIN(expression)</p>
</td>
<td class="cellalignment4555" headers="d5610e6889 d5610e6844">
<p>Returns the minimum value of <span class="italic">expression</span> within a group based on the ordering defined by SPARQL ORDER BY.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e6899" headers="d5610e6841">
<p>SAMPLE(expression)</p>
</td>
<td class="cellalignment4555" headers="d5610e6899 d5610e6844">
<p>Returns <span class="italic">expression</span> evaluated for a single arbitrary value from a group.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4551" id="d5610e6909" headers="d5610e6841">
<p>SUM(expression)</p>
</td>
<td class="cellalignment4555" headers="d5610e6909 d5610e6844">
<p>Calculates the numeric sum of <span class="italic">expression</span> over the values within a group.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>Certain restrictions on variable references apply when using grouping and aggregation. Only group-by variables (single variables in the GROUP BY clause) and alias variables from GROUP BY value assignments can be used in non-aggregate expressions in the SELECT or HAVING clauses.</p>
<div class="example" id="GUID-C926CA2E-A39C-471E-9E0F-5E64108A2825__CIHDAADA">
<p class="titleinexample">Example 1-46 Simple Grouping Query</p>
<p><a href="rdf-overview.htm#GUID-C926CA2E-A39C-471E-9E0F-5E64108A2825__CIHDAADA">Example 1-46</a> shows a query that uses the GROUP BY keyword to find all the different types of cameras.</p>
<pre dir="ltr">SELECT *
  FROM TABLE(SEM_MATCH(
    &#39;PREFIX : &lt;http://www.example.org/electronics/&gt; 
     SELECT ?cType
     WHERE
      {?x rdf:type :Camera .
       ?x :cameraType ?cType .
      }
     <span class="bold">GROUP BY ?cType&#39;</span>,
    SEM_Models(&#39;electronics&#39;),
    SEM_Rulebases(&#39;RDFS&#39;), 
    null, null));
</pre>
<p>A grouping query partitions the query results into a collection of groups based on a grouping expression (<code class="codeph">?cType</code> in <a href="rdf-overview.htm#GUID-C926CA2E-A39C-471E-9E0F-5E64108A2825__CIHDAADA">Example 1-46</a>) such that each result within a group has the same values for the grouping expression. The final result of the grouping operation will include one row for each group.</p>
</div>
<!-- class="example" -->
<div class="example" id="GUID-C926CA2E-A39C-471E-9E0F-5E64108A2825__CIHJIDIF">
<p class="titleinexample">Example 1-47 Complex Grouping Expression</p>
<p>A grouping expression consists of a sequence of one or more of the following: a variable, an expression, or a value assignment of the form (<span class="italic"><code class="codeph">&lt;expression&gt;</code></span> <code class="codeph">as</code> <span class="italic"><code class="codeph">&lt;alias&gt;</code></span>). <a href="rdf-overview.htm#GUID-C926CA2E-A39C-471E-9E0F-5E64108A2825__CIHJIDIF">Example 1-47</a> shows a grouping query that uses one of each type of component in the grouping expression.</p>
<pre dir="ltr">SELECT *
  FROM TABLE(SEM_MATCH(
    &#39;PREFIX : &lt;http://www.example.org/electronics/&gt; 
     SELECT ?cType ?totalPrice
     WHERE
      {?x rdf:type :Camera .
       ?x :cameraType ?cType .
       ?x :manufacturer ?m .
       ?x :price ?p .
       ?x :tax ?t .
      }
     <span class="bold">GROUP BY ?cType (STR(?m)) ((?p*(1+?t)) AS ?totalPrice)&#39;</span>,
    SEM_Models(&#39;electronics&#39;),
    SEM_Rulebases(&#39;RDFS&#39;),
    null, null));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-C926CA2E-A39C-471E-9E0F-5E64108A2825__CIHDIADH">
<p class="titleinexample">Example 1-48 Aggregation</p>
<p><a href="rdf-overview.htm#GUID-C926CA2E-A39C-471E-9E0F-5E64108A2825__CIHDIADH">Example 1-48</a> uses aggregates to select the maximum, minimum, and average price for each type of camera.</p>
<pre dir="ltr">SELECT *
  FROM TABLE(SEM_MATCH(
    &#39;PREFIX : &lt;http://www.example.org/electronics/&gt; 
     SELECT ?cType 
            (<span class="bold">MAX(?p) AS ?maxPrice</span>) 
            (<span class="bold">MIN(?p) AS ?minPrice</span>) 
            (<span class="bold">AVG(?p) AS ?avgPrice</span>)
     WHERE
      {?x rdf:type :Camera .
       ?x :cameraType ?cType .
       ?x :manufacturer ?m .
       ?x :price ?p .
      }
     GROUP BY ?cType&#39;,
    SEM_Models(&#39;electronics&#39;),
    SEM_Rulebases(&#39;RDFS&#39;),
    null, null));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-C926CA2E-A39C-471E-9E0F-5E64108A2825__CIHFIHHE">
<p class="titleinexample">Example 1-49 Aggregation Without Grouping</p>
<p>If an aggregate is used without a grouping expression, then the entire result set is treated as a single group. <a href="rdf-overview.htm#GUID-C926CA2E-A39C-471E-9E0F-5E64108A2825__CIHFIHHE">Example 1-49</a> computes the total number of cameras for the whole data set.</p>
<pre dir="ltr">SELECT *
  FROM TABLE(SEM_MATCH(
    &#39;PREFIX : &lt;http://www.example.org/electronics/&gt; 
     SELECT (<span class="bold">COUNT(?x)</span> as ?cameraCnt)
     WHERE
      { ?x rdf:type :Camera 
      }&#39;,
    SEM_Models(&#39;electronics&#39;),
    SEM_Rulebases(&#39;RDFS&#39;),
    null, null));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-C926CA2E-A39C-471E-9E0F-5E64108A2825__CIHEDDFB">
<p class="titleinexample">Example 1-50 Aggregation with DISTINCT</p>
<p>The DISTINCT keyword can optionally be used as a modifier for each aggregate. When DISTINCT is used, duplicate values are removed from each group before computing the aggregate. Syntactically, DISTINCT must appear as the first argument to the aggregate. <a href="rdf-overview.htm#GUID-C926CA2E-A39C-471E-9E0F-5E64108A2825__CIHEDDFB">Example 1-50</a> uses DISTINCT to find the number of distinct camera manufacturers. In this case, duplicate values of <code class="codeph">STR(?m)</code> are removed before counting.</p>
<pre dir="ltr">SELECT *
  FROM TABLE(SEM_MATCH(
    &#39;PREFIX : &lt;http://www.example.org/electronics/&gt; 
     SELECT (COUNT(<span class="bold">DISTINCT STR(?m)</span>) as ?mCnt)
     WHERE
      { ?x rdf:type :Camera .
        ?x :manufacturer ?m
      }&#39;,
    SEM_Models(&#39;electronics&#39;),
    SEM_Rulebases(&#39;RDFS&#39;),
    null, null));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-C926CA2E-A39C-471E-9E0F-5E64108A2825__CIHDAAIG">
<p class="titleinexample">Example 1-51 HAVING Clause</p>
<p>The HAVING keyword can be used to filter groups based on constraints. HAVING expressions can be composed of variables, RDF terms, arithmetic operators (+, -, *, /), Boolean operators and logical connectives (||, &amp;&amp;, !), comparison operators (&lt;, &gt;, &lt;=, &gt;=, =, !=), aggregates, and any functions available for use in FILTER expressions. Syntactically, the HAVING keyword appears after the GROUP BY clause and before any other solution modifiers such as ORDER BY or LIMIT.</p>
<p><a href="rdf-overview.htm#GUID-C926CA2E-A39C-471E-9E0F-5E64108A2825__CIHDAAIG">Example 1-51</a> uses a HAVING expression to find all manufacturers that sell cameras for less than $200.</p>
<pre dir="ltr">SELECT *
  FROM TABLE(SEM_MATCH(
    &#39;PREFIX : &lt;http://www.example.org/electronics/&gt; 
     SELECT ?m
     WHERE
      { ?x rdf:type :Camera .
        ?x :manufacturer ?m .
        ?x :price ?p
      }
     GROUP BY ?m
     <span class="bold">HAVING (MIN(?p) &lt; 200)</span>
     ORDER BY ASC(?m)&#39;,
    SEM_Models(&#39;electronics&#39;),
    SEM_Rulebases(&#39;RDFS&#39;),
    null, null));
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM247"></a><a id="RDFRM375"></a><a id="RDFRM376"></a><a id="RDFRM377"></a><a id="RDFRM378"></a><a id="RDFRM162"></a>
<div class="props_rev_3"><a id="GUID-0856FD72-213D-4181-83D6-2421AA50D39B"></a>
<h4 id="RDFRM-GUID-0856FD72-213D-4181-83D6-2421AA50D39B" class="sect4"><span class="enumeration_section">1.6.7.4</span> Negation</h4>
<div>
<p>SEM_MATCH supports two forms of negation in SPARQL query patterns: NOT EXISTS and MINUS. NOT EXISTS can be used to filter results based on whether or not a graph pattern matches, and MINUS can be used to remove solutions based on their relation to another graph pattern.</p>
<div class="example" id="GUID-0856FD72-213D-4181-83D6-2421AA50D39B__CIHCCCBG">
<p class="titleinexample">Example 1-52 Negation with NOT EXISTS</p>
<p><a href="rdf-overview.htm#GUID-0856FD72-213D-4181-83D6-2421AA50D39B__CIHCCCBG">Example 1-52</a> uses a NOT EXISTS FILTER to select those cameras that do not have any user reviews.</p>
<pre dir="ltr">SELECT *
  FROM TABLE(SEM_MATCH(
    &#39;PREFIX : &lt;http://www.example.org/electronics/&gt; 
     SELECT ?x ?cType ?p
     WHERE
      {?x :price ?p .
       ?x :cameraType ?cType .
       FILTER( <span class="bold">NOT EXISTS({?x :userReview ?r})</span> )
      }&#39;,
    SEM_Models(&#39;electronics&#39;),
    SEM_Rulebases(&#39;RDFS&#39;), 
    null, null));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-0856FD72-213D-4181-83D6-2421AA50D39B__CIHBJJEC">
<p class="titleinexample">Example 1-53 EXISTS</p>
<p>Conversely, the EXISTS operator can be used to ensure that a pattern matches. <a href="rdf-overview.htm#GUID-0856FD72-213D-4181-83D6-2421AA50D39B__CIHBJJEC">Example 1-53</a> uses an EXISTS FILTER to select only those cameras that have a user review.</p>
<pre dir="ltr">SELECT *
  FROM TABLE(SEM_MATCH(
    &#39;PREFIX : &lt;http://www.example.org/electronics/&gt; 
     SELECT ?x ?cType ?p
     WHERE
      {?x :price ?p .
       ?x :cameraType ?cType .
       FILTER( <span class="bold">EXISTS({?x :userReview ?r})</span> )
      }&#39;,
    SEM_Models(&#39;electronics&#39;),
    SEM_Rulebases(&#39;RDFS&#39;), 
    null, null));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-0856FD72-213D-4181-83D6-2421AA50D39B__CIHCIDCC">
<p class="titleinexample">Example 1-54 Negation with MINUS</p>
<p><a href="rdf-overview.htm#GUID-0856FD72-213D-4181-83D6-2421AA50D39B__CIHCIDCC">Example 1-54</a> uses MINUS to arrive at the same result as <a href="rdf-overview.htm#GUID-0856FD72-213D-4181-83D6-2421AA50D39B__CIHCCCBG">Example 1-52</a>. Only those solutions that are not compatible with solutions from the MINUS pattern are included in the result. That is, if a solution has the same values for all shared variables as a solution from the MINUS pattern, it is removed from the result.</p>
<pre dir="ltr">SELECT *
  FROM TABLE(SEM_MATCH(
    &#39;PREFIX : &lt;http://www.example.org/electronics/&gt; 
     SELECT ?x ?cType ?p
     WHERE
      {?x :price ?p .
       ?x :cameraType ?cType .
       <span class="bold">MINUS {?x :userReview ?r}</span>
      }&#39;,
    SEM_Models(&#39;electronics&#39;),
    SEM_Rulebases(&#39;RDFS&#39;), 
    null, null));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-0856FD72-213D-4181-83D6-2421AA50D39B__CIHCIDFI">
<p class="titleinexample">Example 1-55 Negation with NOT EXISTS (2)</p>
<p>NOT EXISTS and MINUS represent two different styles of negation and have different results in certain cases. One such case occurs when no variables are shared between the negation pattern and the rest of the query. For example, the NOT EXISTS query in <a href="rdf-overview.htm#GUID-0856FD72-213D-4181-83D6-2421AA50D39B__CIHCIDFI">Example 1-55</a> removes all solutions because <code class="codeph">{?subj ?prop ?obj}</code> matches any triple, but the MINUS query in <a href="rdf-overview.htm#GUID-0856FD72-213D-4181-83D6-2421AA50D39B__CIHECJIJ">Example 1-56</a> removes no solutions because there are no shared variables.</p>
<pre dir="ltr">SELECT *
  FROM TABLE(SEM_MATCH(
    &#39;PREFIX : &lt;http://www.example.org/electronics/&gt; 
     SELECT ?x ?cType ?p
     WHERE
      {?x :price ?p .
       ?x :cameraType ?cType .
       FILTER( <span class="bold">NOT EXISTS({?subj ?prop ?obj})</span> )
      }&#39;,
    SEM_Models(&#39;electronics&#39;),
    SEM_Rulebases(&#39;RDFS&#39;),
    null, null));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-0856FD72-213D-4181-83D6-2421AA50D39B__CIHECJIJ">
<p class="titleinexample">Example 1-56 Negation with MINUS (2)</p>
<pre dir="ltr">SELECT *
  FROM TABLE(SEM_MATCH(
    &#39;PREFIX : &lt;http://www.example.org/electronics/&gt; 
     SELECT ?x ?cType ?p
     WHERE
      {?x :price ?p .
       ?x :cameraType ?cType .
       <span class="bold">MINUS {?subj ?prop ?obj}</span>
      }&#39;,
    SEM_Models(&#39;electronics&#39;),
    SEM_Rulebases(&#39;RDFS&#39;),
    null, null));
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM380"></a><a id="RDFRM438"></a><a id="RDFRM439"></a><a id="RDFRM440"></a><a id="RDFRM728"></a><a id="RDFRM729"></a><a id="RDFRM379"></a>
<div class="props_rev_3"><a id="GUID-C6646E9A-4A49-482F-A3EA-F9658114A0C1"></a>
<h4 id="RDFRM-GUID-C6646E9A-4A49-482F-A3EA-F9658114A0C1" class="sect4"><span class="enumeration_section">1.6.7.5</span> Value Assignment</h4>
<div>
<p>SEM_MATCH provides a variety of ways to assign values to variables in a SPARQL query.</p>
<p>The value of an expression can be assigned to a new variable in three ways: (1) expressions in the SELECT clause, (2) expressions in the GROUP BY clause, and (3) the BIND keyword. In each case, the new variable must not already be defined in the query. After assignment, the new variable can be used in the query and returned in results. As discussed in <a href="rdf-overview.htm#GUID-7CEE1E1B-507A-4AE5-9998-9193269BF692">Expressions in the SELECT Clause</a>, the syntax for value assignment is (<span class="italic">&lt;expression&gt;</span> AS <span class="italic">&lt;alias&gt;)</span> where <span class="italic">alias</span> is the new variable, for example, <code class="codeph">((?price * (1+?tax)) AS ?totalPrice)</code>.</p>
<div class="example" id="GUID-C6646E9A-4A49-482F-A3EA-F9658114A0C1__CIHIDHGE">
<p class="titleinexample">Example 1-57 Nested SELECT Expression</p>
<p><a href="rdf-overview.htm#GUID-C6646E9A-4A49-482F-A3EA-F9658114A0C1__CIHIDHGE">Example 1-57</a> uses a nested SELECT expression to compute the total price of a camera and assign the value to a variable (<code class="codeph">?totalPrice</code>). This variable is then used in a FILTER in the outer query to find cameras costing less than $200.</p>
<pre dir="ltr">SELECT *
 FROM TABLE(SEM_MATCH(
   &#39;PREFIX : &lt;http://www.example.org/electronics/&gt; 
    SELECT ?x ?cType ?totalPrice
    WHERE
     {?x :cameraType ?cType .
       { <span class="bold">SELECT ?x ( ((?price*(1+?tax)) AS ?totalPrice )</span>
         <span class="bold">WHERE { ?x :price ?price .</span>
                 <span class="bold">?x :tax ?tax }</span>
       }
      <span class="bold">FILTER (?totalPrice &lt; 200)</span>
     }&#39;,
   SEM_Models(&#39;electronics&#39;),
   SEM_Rulebases(&#39;RDFS&#39;),
   null, null));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-C6646E9A-4A49-482F-A3EA-F9658114A0C1__CIHCDHFD">
<p class="titleinexample">Example 1-58 BIND</p>
<p>The BIND keyword can be used inside a basic graph pattern to assign a value and is syntactically more compact than an equivalent nested SELECT expression. <a href="rdf-overview.htm#GUID-C6646E9A-4A49-482F-A3EA-F9658114A0C1__CIHCDHFD">Example 1-58</a> uses the BIND keyword to expresses a query that is logically equivalent to <a href="rdf-overview.htm#GUID-C6646E9A-4A49-482F-A3EA-F9658114A0C1__CIHIDHGE">Example 1-57</a>.</p>
<pre dir="ltr">SELECT *
  FROM TABLE(SEM_MATCH(
    &#39;PREFIX : &lt;http://www.example.org/electronics/&gt; 
     SELECT ?x ?cType ?totalPrice
     WHERE
      {?x :cameraType ?cType .
       ?x :price ?price .
       ?x :tax ?tax .
       <span class="bold">BIND ( ((?price*(1+?tax)) AS ?totalPrice )</span>
       FILTER (?totalPrice &lt; 200)
      }&#39;,
    SEM_Models(&#39;electronics&#39;),
    SEM_Rulebases(&#39;RDFS&#39;),
    null, null));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-C6646E9A-4A49-482F-A3EA-F9658114A0C1__CIHDDBIG">
<p class="titleinexample">Example 1-59 GROUP BY Expression</p>
<p>Value assignments in the GROUP BY clause can subsequently be used in the SELECT clause, the HAVING clause, and the outer query (in the case of a nested grouping query). <a href="rdf-overview.htm#GUID-C6646E9A-4A49-482F-A3EA-F9658114A0C1__CIHDDBIG">Example 1-59</a> uses a GROUP BY expression to find the maximum number of megapixels for cameras at each price point less than $1000.</p>
<pre dir="ltr">SELECT *
  FROM TABLE(SEM_MATCH(
    &#39;PREFIX : &lt;http://www.example.org/electronics/&gt; 
     SELECT ?totalPrice (MAX(?mp) as ?maxMP)
     WHERE
      {?x rdf:type :Camera .
       ?x :price ?price .
       ?x :tax ?tax .
       <span class="bold">GROUP BY ( ((?price*(1+?tax)) AS ?totalPrice )</span>
       <span class="bold">HAVING (?totalPrice &lt; 1000)</span>
      }&#39;,
    SEM_Models(&#39;electronics&#39;),
    SEM_Rulebases(&#39;RDFS&#39;),
    null, null));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-C6646E9A-4A49-482F-A3EA-F9658114A0C1__CIHEAIFI">
<p class="titleinexample">Example 1-60 VALUES</p>
<p>In addition to the preceding three ways to assign the value of an expression to a new variable, the VALUES keyword can be used to introduce an unordered solution sequence that is combined with the query results through a join operation. A VALUES block can appear inside a query pattern or at the end of a SPARQL SELECT query block after any solution modifiers. The VALUES construct can be used in subqueries.</p>
<p><a href="rdf-overview.htm#GUID-C6646E9A-4A49-482F-A3EA-F9658114A0C1__CIHEAIFI">Example 1-60</a> uses the VALUES keyword to constrain the query results to DSLR cameras made by <code class="codeph">:Company1</code> or any type of camera made by <code class="codeph">:Company2</code>. The keyword UNDEF is used to represent an unbound variable in the solution sequence.</p>
<pre dir="ltr">SELECT *
  FROM TABLE(SEM_MATCH(
    &#39;PREFIX : &lt;http://www.example.org/electronics/&gt; 
     SELECT ?x ?cType ?m
     WHERE 
      { ?x rdf:type :Camera .
        ?x :cameraType ?cType .
        ?x :manufacturer ?m
      }
     <span class="bold">VALUES (?cType ?m)</span>
     <span class="bold">{ (&#34;DSLR&#34; :Company1)</span>
     <span class="bold">  (UNDEF  :Company2)</span> 
    <span class="bold"> }</span>&#39;,
    SEM_Models(&#39;electronics&#39;),
    SEM_Rulebases(&#39;RDFS&#39;),
    null, null));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-C6646E9A-4A49-482F-A3EA-F9658114A0C1__CIHIDFJH">
<p class="titleinexample">Example 1-61 Simplified VALUES Syntax</p>
<p>A simplified syntax can be used for the common case of a single variable. Specifically, the parentheses around the variable and each solution can be omitted. <a href="rdf-overview.htm#GUID-C6646E9A-4A49-482F-A3EA-F9658114A0C1__CIHIDFJH">Example 1-61</a> uses the simplified syntax to constrain the query results to cameras made by <code class="codeph">:Company1</code> or <code class="codeph">:Company2</code>.</p>
<pre dir="ltr">SELECT *
  FROM TABLE(SEM_MATCH(
    &#39;PREFIX : &lt;http://www.example.org/electronics/&gt; 
     SELECT ?x ?cType ?m
     WHERE 
      { ?x rdf:type :Camera .
        ?x :cameraType ?cType .
        ?x :manufacturer ?m
      }
<span class="bold">  </span><span class="bold">   </span><span class="bold">VALUES ?m</span>
<span class="bold">     { :Company1</span>
<span class="bold">       :Company2</span> 
<span class="bold">     }</span>&#39;,
    SEM_Models(&#39;electronics&#39;),
    SEM_Rulebases(&#39;RDFS&#39;),
    null, null));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-C6646E9A-4A49-482F-A3EA-F9658114A0C1__CIHJGICI">
<p class="titleinexample">Example 1-62 Inline VALUES Block</p>
<p><a href="rdf-overview.htm#GUID-C6646E9A-4A49-482F-A3EA-F9658114A0C1__CIHJGICI">Example 1-62</a> also constrains the query results to any camera made by <code class="codeph">:Company1</code> or <code class="codeph">:Company2</code>, but specifies the VALUES block inside the query pattern.</p>
<pre dir="ltr">SELECT *
  FROM TABLE(SEM_MATCH(
    &#39;PREFIX : &lt;http://www.example.org/electronics/&gt; 
     SELECT ?x ?cType ?m
     WHERE 
      <span class="bold">{ VALUES ?m { :Company1 :Company2 }</span>
        <span class="bold">?x rdf:type :Camera .</span>
        <span class="bold">?x :cameraType ?cType .</span>
        <span class="bold">?x :manufacturer ?m</span>
      <span class="bold">}</span>&#39;,
    SEM_Models(&#39;electronics&#39;),
    SEM_Rulebases(&#39;RDFS&#39;),
    null, null));
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM442"></a><a id="RDFRM764"></a><a id="RDFRM766"></a><a id="RDFRM443"></a><a id="RDFRM730"></a><a id="RDFRM765"></a><a id="RDFRM767"></a><a id="RDFRM441"></a>
<div class="props_rev_3"><a id="GUID-A3F16175-AC4B-4B19-BF25-FD918760F18E"></a>
<h4 id="RDFRM-GUID-A3F16175-AC4B-4B19-BF25-FD918760F18E" class="sect4"><span class="enumeration_section">1.6.7.6</span> Property Paths</h4>
<div>
<p>A SPARQL Property Path describes a possible path between two RDF resources (nodes) in an RDF graph. A property path appears in the predicate position of a triple pattern and uses a regular expression-like syntax to place constraints on the properties (edges) making up a path from the subject of the triple pattern to the object of a triple pattern. Property paths allow SPARQL queries to match arbitrary length paths in the RDF graph and also provide a more concise way to express other graph patterns.</p>
<p><a href="rdf-overview.htm#GUID-A3F16175-AC4B-4B19-BF25-FD918760F18E__CIHBIHGB" title="Property Path Syntax Constructs">Table 1-15</a> describes the syntax constructs available for constructing SPARQL Property Paths. Note that <span class="italic">iri</span> is either an IRI or a prefixed name, and <span class="italic">elt</span> is a property path element, which may itself be composed of other property path elements.</p>
<div class="tblformal" id="GUID-A3F16175-AC4B-4B19-BF25-FD918760F18E__CIHBIHGB">
<p class="titleintable">Table 1-15 Property Path Syntax Constructs</p>
<table class="cellalignment4510" title="Property Path Syntax Constructs" summary="Property Path Syntax Constructs">
<thead>
<tr class="cellalignment4501">
<th class="cellalignment4561" id="d5610e7395">Syntax Construct</th>
<th class="cellalignment4562" id="d5610e7398">Matches</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4501">
<td class="cellalignment4563" id="d5610e7403" headers="d5610e7395">
<p><span class="italic">iri</span></p>
</td>
<td class="cellalignment4564" headers="d5610e7403 d5610e7398">
<p>An IRI or a prefixed name. A path of length 1 (one).</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4563" id="d5610e7411" headers="d5610e7395">
<p><span class="italic">^el</span><span class="italic">t</span></p>
</td>
<td class="cellalignment4564" headers="d5610e7411 d5610e7398">
<p>Inverse path (object to subject).</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4563" id="d5610e7421" headers="d5610e7395">
<p><span class="italic">!iri</span> or <span class="italic">!(iri1 | &hellip; | irin)</span></p>
</td>
<td class="cellalignment4564" headers="d5610e7421 d5610e7398">
<p>Negated property set. An IRI that is not one of <span class="italic">irii</span>.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4563" id="d5610e7435" headers="d5610e7395">
<p><span class="italic">!^iri</span> or <span class="italic">!(iri1 | &hellip; | irij | ^irij+1 | &hellip; | ^irin)</span></p>
</td>
<td class="cellalignment4564" headers="d5610e7435 d5610e7398">
<p>Negated property set with some inverse properties. An IRI that is not one of <span class="italic">irii</span>, nor one of <span class="italic">irij+1...irin</span> as reverse paths. <span class="italic">!^iri</span> is short for <span class="italic">!(^iri)</span>. The order of properties and inverse properties is not important. They can occur in mixed order.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4563" id="d5610e7458" headers="d5610e7395">
<p><span class="italic">(elt)</span></p>
</td>
<td class="cellalignment4564" headers="d5610e7458 d5610e7398">
<p>A group path <span class="italic">elt</span>; brackets control precedence.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4563" id="d5610e7469" headers="d5610e7395">
<p><span class="italic">elt</span><sub>1</sub> / <span class="italic">elt</span><sub>2</sub></p>
</td>
<td class="cellalignment4564" headers="d5610e7469 d5610e7398">
<p>A sequence path of <span class="italic">elt</span><sub>1</sub>, followed by <span class="italic">elt</span><sub>2</sub>.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4563" id="d5610e7494" headers="d5610e7395">
<p><span class="italic">elt</span><sub>1</sub> | <span class="italic">elt</span><sub>2</sub></p>
</td>
<td class="cellalignment4564" headers="d5610e7494 d5610e7398">
<p>An alternative path of <span class="italic">elt</span><sub>1</sub>, or <span class="italic">elt</span><sub>2</sub> (all possibilities are tried).</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4563" id="d5610e7519" headers="d5610e7395">
<p><span class="italic">elt</span>*</p>
</td>
<td class="cellalignment4564" headers="d5610e7519 d5610e7398">
<p>A path of zero or more occurrences of <span class="italic">elt</span>.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4563" id="d5610e7531" headers="d5610e7395">
<p><span class="italic">elt</span>+</p>
</td>
<td class="cellalignment4564" headers="d5610e7531 d5610e7398">
<p>A path of one or more occurrences of <span class="italic">elt</span>.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4563" id="d5610e7543" headers="d5610e7395">
<p><span class="italic">elt</span>?</p>
</td>
<td class="cellalignment4564" headers="d5610e7543 d5610e7398">
<p>A path of zero or one occurrence of <span class="italic">elt</span>.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>The precedence of the syntax constructs is as follows (from highest to lowest):</p>
<ul style="list-style-type: disc;">
<li>
<p>IRI, prefixed names</p>
</li>
<li>
<p>Negated property sets</p>
</li>
<li>
<p>Groups</p>
</li>
<li>
<p>Unary operators *, ?, +</p>
</li>
<li>
<p>Unary ^ inverse links</p>
</li>
<li>
<p>Binary operator /</p>
</li>
<li>
<p>Binary operator |</p>
</li>
</ul>
<p>Precedence is left-to-right within groups.</p>
<div class="section">
<p class="subhead3">Special Considerations for Property Path Operators + and *</p>
</div>
<!-- class="section" -->
<div class="section">
<p>In general, truly unbounded graph traversals using the + (plus sign) and * (asterisk) operator can be very expensive. For this reason, a depth-limited version of the + and * operator is used by default, and the default depth limit is 10. In addition, the depth-limited implementation can be run in parallel. The <code class="codeph">ALL_MAX_PP_DEPTH(n)</code> SEM_MATCH query option or the <code class="codeph">PP_MAX_DEPTH(n)</code> inline HINT0 query optimizer hint can be used to change the depth-limit setting. To achieve a truly unbounded traversal, you can set a depth limit of less than 1 to fall back to a CONNECT BY-based implementation.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Query Hints for Property Paths</p>
</div>
<!-- class="section" -->
<div class="section">
<p>Other query hints are available to influence the performance of property path queries. The <code class="codeph">ALLOW_PP_DUP=T</code> query option can be used with * and + queries to allow duplicate results. Allowing duplicate results may return the first rows from a query faster. In addition, <code class="codeph">ALL_USE_PP_HASH</code> and <code class="codeph">ALL_USE_PP_NL</code> query options are available to influence the join types used when evaluating property path expressions. Analogous <code class="codeph">USE_PP_HASH</code> and <code class="codeph">USE_PP_NL</code> inline HINT0 query optimizer hints can also be used.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-A3F16175-AC4B-4B19-BF25-FD918760F18E__CIHGJHBD">
<p class="titleinexample">Example 1-63 SPARQL Property Path (Using rdfs:subClassOf Relations)</p>
<p><a href="rdf-overview.htm#GUID-A3F16175-AC4B-4B19-BF25-FD918760F18E__CIHGJHBD">Example 1-63</a> uses a property path to find all Males based on transitivity of the <code class="codeph">rdfs:subClassOf relationship</code>. A property path allows matching an arbitrary number of consecutive <code class="codeph">rdfs:subClassOf</code> relations.</p>
<pre dir="ltr">SELECT x, name
  FROM TABLE(SEM_MATCH(
    &#39;{ ?x foaf:name ?name .
       ?x rdf:type ?t .
       ?t <span class="bold">rdfs:subClassOf*</span> :Male }&#39;,
    SEM_Models(&#39;family&#39;),
    null, 
    SEM_ALIASES(SEM_ALIAS(&#39;&#39;,&#39;http://www.example.org/family/&#39;) 
                SEM_ALIAS(&#39;foaf&#39;,&#39; http://xmlns.com/foaf/0.1/&#39;)),
    null));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-A3F16175-AC4B-4B19-BF25-FD918760F18E__CIHFIJGE">
<p class="titleinexample">Example 1-64 SPARQL Property Path (Using foaf:friendOf or foaf:knows Relationships)</p>
<p><a href="rdf-overview.htm#GUID-A3F16175-AC4B-4B19-BF25-FD918760F18E__CIHFIJGE">Example 1-64</a> uses a property path to find all of Scott&#39;s close friends (those people reachable within two hops using <code class="codeph">foaf:friendOf</code> or <code class="codeph">foaf:knows</code> relationships).</p>
<pre dir="ltr">SELECT name
  FROM TABLE(SEM_MATCH(
    &#39;{ { :Scott <span class="bold">(foaf:friendOf | foaf:knows)</span> ?f }
       UNION
       { :Scott <span class="bold">(foaf:friendOf | foaf:knows)/(foaf:friendOf | foaf:knows)</span> ?f }
       ?f foaf:name ?name .
       FILTER (!sameTerm(?f, :Scott)) }&#39;,
    SEM_Models(&#39;family&#39;),
    null, 
    SEM_ALIASES(SEM_ALIAS(&#39;&#39;,&#39;http://www.example.org/family/&#39;),
                SEM_ALIAS(&#39;foaf&#39;,&#39; http://xmlns.com/foaf/0.1/&#39;)),
    null));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-A3F16175-AC4B-4B19-BF25-FD918760F18E__CIHBDBBD">
<p class="titleinexample">Example 1-65 Specifying Property Path Maximum Depth Value</p>
<p><a href="rdf-overview.htm#GUID-A3F16175-AC4B-4B19-BF25-FD918760F18E__CIHBDBBD">Example 1-65</a> specifies a maximum depth of 12 for all property path expressions with the <code class="codeph">ALL_MAX_PP_DEPTH(n)</code> query option value.</p>
<pre dir="ltr">SELECT x, name
  FROM TABLE(SEM_MATCH(
    &#39;{ ?x foaf:name ?name .
       ?x rdf:type ?t .
       ?t rdfs:subClassOf* :Male }&#39;,
    SEM_Models(&#39;family&#39;),
    null, 
    SEM_ALIASES(SEM_ALIAS(&#39;&#39;,&#39;http://www.example.org/family/&#39;) 
                SEM_ALIAS(&#39;foaf&#39;,&#39; http://xmlns.com/foaf/0.1/&#39;)),
    null,
    null,
    &#39; ALL_MAX_PP_DEPTH(12) &#39;));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-A3F16175-AC4B-4B19-BF25-FD918760F18E__CIHGJDJH">
<p class="titleinexample">Example 1-66 Specifying Property Path Join Hint</p>
<p><a href="rdf-overview.htm#GUID-A3F16175-AC4B-4B19-BF25-FD918760F18E__CIHGJDJH">Example 1-66</a> shows an inline HINT0 query optimizer hint that requests a nested loop join for evaluating the property path expression.</p>
<pre dir="ltr">SELECT x, name
  FROM TABLE(SEM_MATCH(
    &#39;{ # HINT0={ USE_PP_NL }
       ?x foaf:name ?name .
       ?x rdf:type ?t .
       ?t rdfs:subClassOf* :Male }&#39;,
    SEM_Models(&#39;family&#39;),
    null, 
    SEM_ALIASES(SEM_ALIAS(&#39;&#39;,&#39;http://www.example.org/family/&#39;) 
                SEM_ALIAS(&#39;foaf&#39;,&#39; http://xmlns.com/foaf/0.1/&#39;)),
    null));
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="RDFRM769"></a><a id="RDFRM770"></a><a id="RDFRM768"></a>
<div class="props_rev_3"><a id="GUID-6ACF73EA-A1A7-49D2-ADB9-15B50AE8B73E"></a>
<h3 id="RDFRM-GUID-6ACF73EA-A1A7-49D2-ADB9-15B50AE8B73E" class="sect3"><span class="enumeration_section">1.6.8</span> Graph Patterns: Support for SPARQL 1.1 Federated Query</h3>
<div>
<p>SEM_MATCH supports SPARQL 1.1 Federated Query (see <a href="http://www.w3.org/TR/sparql11-federated-query/#SPROT" target="_blank"><code class="codeph">http://www.w3.org/TR/sparql11-federated-query/#SPROT</code></a>). The SERVICE construct can be used to retrieve results from a specified SPARQL endpoint URL. With this capability, you can combine local RDF data (native RDF data or RDF views of relational data) with other, possibly remote, RDF data served by a W3C standards-compliant SPARQL endpoint.</p>
<p>This section also contains the following topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="rdf-overview.htm#GUID-F0309673-FD41-49F9-BFFB-B14C37DC5279">Privileges Required to Execute Federated SPARQL Queries</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-EC21930C-2EEB-456C-9A9B-2D794F6128B5">SPARQL SERVICE Join Push Down</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-53C80E37-66B6-41AC-90A0-6A94F78AC408">SPARQL SERVICE SILENT</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-84CDC448-A7A3-497D-BCE9-0A84864D50F1">Using a Proxy Server with SPARQL SERVICE</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-F09036DD-6D37-4BC6-AAD8-4D5D3984A6B4">Accessing SPARQL Endpoints with HTTP Basic Authentication</a></p>
</li>
</ul>
<div class="example" id="GUID-6ACF73EA-A1A7-49D2-ADB9-15B50AE8B73E__CIHHGGDB">
<p class="titleinexample">Example 1-67 SPARQL SERVICE Clause to Retrieve All Triples</p>
<p><a href="rdf-overview.htm#GUID-6ACF73EA-A1A7-49D2-ADB9-15B50AE8B73E__CIHHGGDB">Example 1-67</a> shows a query that uses a SERVICE clause to retrieve all triples from the SPARQL endpoint available at <code class="codeph">http://www.example1.org/sparql</code>.</p>
<pre dir="ltr">SELECT s, p, o
  FROM TABLE(SEM_MATCH(
    &#39;SELECT ?s ?p ?o
     WHERE {
       SERVICE &lt;http://www.example1.org/sparql&gt;{ ?s ?p ?o }
     }&#39;,
    SEM_Models(&#39;electronics&#39;),
    null, null, null, null, &#39; &#39;));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-6ACF73EA-A1A7-49D2-ADB9-15B50AE8B73E__CIHIEDDA">
<p class="titleinexample">Example 1-68 SPARQL SERVICE Clause to Join Remote and Local RDF Data</p>
<p><a href="rdf-overview.htm#GUID-6ACF73EA-A1A7-49D2-ADB9-15B50AE8B73E__CIHIEDDA">Example 1-68</a> joins remote RDF data with local RDF data. This example joins camera types <code class="codeph">?cType</code> from local model <code class="codeph">electronics</code> with the camera names <code class="codeph">?name</code> from the SPARQL endpoint at <code class="codeph">http://www.example1.org/sparql</code>.</p>
<pre dir="ltr">SELECT cType, name
  FROM TABLE(SEM_MATCH(
    &#39;PREFIX : &lt;http://www.example.org/electronics/&gt; 
     SELECT ?cType ?name
     WHERE {
       ?s :cameraType ?cType
       SERVICE &lt;http://www.example1.org/sparql&gt;{ ?s :name ?name }
      }&#39;,
    SEM_Models(&#39;electronics&#39;),
    null, null, null, null, &#39; &#39;));
</pre></div>
<!-- class="example" --></div>
<a id="RDFRM772"></a><a id="RDFRM771"></a>
<div class="props_rev_3"><a id="GUID-F0309673-FD41-49F9-BFFB-B14C37DC5279"></a>
<h4 id="RDFRM-GUID-F0309673-FD41-49F9-BFFB-B14C37DC5279" class="sect4"><span class="enumeration_section">1.6.8.1</span> Privileges Required to Execute Federated SPARQL Queries</h4>
<div>
<p>You need certain database privileges to use the SERVICE construct within SEM_MATCH queries. You should be granted EXECUTE privilege on the SPARQL_SERVICE MDSYS function by a user with DBA privileges: The following example grants this access to a user named RDFUSER:</p>
<pre dir="ltr">grant execute on mdsys.sparql_service to rdfuser;
</pre>
<p>Also, an Access Control List (ACL) should be used to grant the CONNECT privilege to the user attempting a federated query. <a href="rdf-overview.htm#GUID-F0309673-FD41-49F9-BFFB-B14C37DC5279__CIHBCACC">Example 1-69</a> creates a new ACL to grant the user RDFUSER the CONNECT privilege and assigns the domain * to the ACL. For more information about ACLs, see <a class="olink ARPLS148" target="_blank" href="../ARPLS/d_networkacl_adm.htm#ARPLS148"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.</p>
<div class="example" id="GUID-F0309673-FD41-49F9-BFFB-B14C37DC5279__CIHBCACC">
<p class="titleinexample">Example 1-69 Access Control List and Host Assignment</p>
<pre dir="ltr">dbms_network_acl_admin.create_acl (
  acl       =&gt; &#39;rdfuser.xml&#39;,
  description =&gt; &#39;Allow rdfuser to query SPARQL endpoints&#39;,
  principal =&gt; &#39;RDFUSER&#39;,
  is_grant  =&gt; true,
  privilege =&gt; &#39;connect&#39;
);
 
dbms_network_acl_admin.assign_acl (
  acl  =&gt; &#39;rdfuser.xml&#39;,
  host =&gt; &#39;*&#39;
);      
</pre>
<p>After the necessary privileges are granted, you are ready to execute federated queries from SEM_MATCH</p>
</div>
<!-- class="example" --></div>
</div>
<a id="RDFRM774"></a><a id="RDFRM773"></a>
<div class="props_rev_3"><a id="GUID-EC21930C-2EEB-456C-9A9B-2D794F6128B5"></a>
<h4 id="RDFRM-GUID-EC21930C-2EEB-456C-9A9B-2D794F6128B5" class="sect4"><span class="enumeration_section">1.6.8.2</span> SPARQL SERVICE Join Push Down</h4>
<div>
<p>The SPARQL SERVICE Join Push Down (<code class="codeph">SERVICE_JPDWN=T</code>) feature can be used to improve the performance of certain SPARQL SERVICE queries. By default, the query pattern within the SERVICE clause is executed first on the remote SPARQL endpoint. The full result of this remote execution is then joined with the local portion of the query. This strategy can result in poor performance if the local portion of the query is very selective and the remote portion of the query is very unselective.</p>
<p>The SPARQL SERVICE Join Push Down feature cannot be used in a query that contains more than one SERVICE clause.</p>
<div class="example" id="GUID-EC21930C-2EEB-456C-9A9B-2D794F6128B5__CIHEIBAH">
<p class="titleinexample">Example 1-70 SPARQL SERVICE Join Push Down</p>
<p><a href="rdf-overview.htm#GUID-EC21930C-2EEB-456C-9A9B-2D794F6128B5__CIHEIBAH">Example 1-70</a> shows the SPARQL SERVICE Join Push Down feature.</p>
<pre dir="ltr">SELECT s, prop, obj
  FROM TABLE(SEM_MATCH(
    &#39;PREFIX : &lt;http://www.example.org/electronics/&gt; 
     SELECT ?s ?prop ?obj
     WHERE {
       ?s rdf:type   :Camera .
       ?s :modelName &#34;Camera 12345&#34;
       SERVICE &lt;http://www.example1.org/sparql&gt; { ?s ?prop ?obj }
      }&#39;,
    SEM_Models(&#39;electronics&#39;),
    null, null, null, null, &#39; <span class="bold">SERVICE_JPDWN=T</span> &#39;));
</pre>
<p>In <a href="rdf-overview.htm#GUID-EC21930C-2EEB-456C-9A9B-2D794F6128B5__CIHEIBAH">Example 1-70</a>, the local portion of the query will return a very small number of rows, but the remote portion of the query is completely unbound and will return the entire remote dataset. When the <code class="codeph">SERVICE_JPDWN=T</code> option is specified, SEM_MATCH performs a nested-loop style evaluation by first executing the local portion of the query and then executing a modified version of the remote query once for each row returned by the local portion. The remote query is modified with a FILTER clause that effectively performs a substitution for the join variable <code class="codeph">?s</code>. For example, if <code class="codeph">&lt;urn:camera1&gt;</code> and <code class="codeph">&lt;urn:camera2&gt;</code> are returned from the local portion of <a href="rdf-overview.htm#GUID-EC21930C-2EEB-456C-9A9B-2D794F6128B5__CIHEIBAH">Example 1-70</a> as bindings for <code class="codeph">?s</code>, then the following two queries are sent to the remote endpoint: <code class="codeph">{ ?s ?prop ?obj FILTER (?s = &lt;urn:camera1&gt;) }</code> and <code class="codeph">{ s ?prop ?obj FILTER (?s = &lt;urn:camera2&gt;) }</code>.</p>
</div>
<!-- class="example" --></div>
</div>
<a id="RDFRM776"></a><a id="RDFRM775"></a>
<div class="props_rev_3"><a id="GUID-53C80E37-66B6-41AC-90A0-6A94F78AC408"></a>
<h4 id="RDFRM-GUID-53C80E37-66B6-41AC-90A0-6A94F78AC408" class="sect4"><span class="enumeration_section">1.6.8.3</span> SPARQL SERVICE SILENT</h4>
<div>
<p>When the SILENT keyword is used in federated queries, errors while accessing the specified remote SPARQL endpoint will be ignored. If the SERVICE SILENT request fails, a single solution with no bindings will be returned.</p>
<p><a href="rdf-overview.htm#GUID-53C80E37-66B6-41AC-90A0-6A94F78AC408__CIHDJJDD">Example 1-71</a> uses SERVICE with the SILENT keyword inside an OPTIONAL clause, so that, when connection errors accessing <code class="codeph">http://www.example1.org/sparql</code> appear, such errors will be ignored and all the rows retrieved from triple <code class="codeph">?s :cameratype ?k</code> will be combined with a null value for <code class="codeph">?n</code>.</p>
<div class="example" id="GUID-53C80E37-66B6-41AC-90A0-6A94F78AC408__CIHDJJDD">
<p class="titleinexample">Example 1-71 SPARQL SERVICE with SILENT Keyword</p>
<pre dir="ltr">SELECT s, n
  FROM TABLE(SEM_MATCH(
    &#39;PREFIX : &lt;http://www.example.org/electronics/&gt; 
     SELECT ?s ?n
     WHERE {
       ?s :cameraType ?k
       OPTIONAL { SERVICE <span class="bold">SILENT</span> &lt;http://www.example1.org/sparql&gt;{ ?k :name ?n } }
      }&#39;,
    SEM_Models(&#39;electronics&#39;),
    null, null, null, null));
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM778"></a><a id="RDFRM779"></a><a id="RDFRM777"></a>
<div class="props_rev_3"><a id="GUID-84CDC448-A7A3-497D-BCE9-0A84864D50F1"></a>
<h4 id="RDFRM-GUID-84CDC448-A7A3-497D-BCE9-0A84864D50F1" class="sect4"><span class="enumeration_section">1.6.8.4</span> Using a Proxy Server with SPARQL SERVICE</h4>
<div>
<div class="section">
<p>The following methods are available for sending SPARQL SERVICE requests through an HTTP proxy:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>Specifying the HTTP proxy that should be used for requests in the current session. This can be done through the SET_PROXY function of UTL_HTTP package. <a href="rdf-overview.htm#GUID-84CDC448-A7A3-497D-BCE9-0A84864D50F1__CIHDBJCD">Example 1-72</a> sets the proxy <code class="codeph">proxy.example.com</code> to be used for HTTP requests, excluding those to hosts in the domain <code class="codeph">example2.com</code>. (For more information about the SET_PROXY procedure, see <a class="olink ARPLS71100" target="_blank" href="../ARPLS/u_http.htm#ARPLS71100"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.)</p>
</li>
<li>
<p>Using the SERVICE_PROXY SEM_MATCH option, which allows setting the proxy address for SPARQL SERVICE request. However, in this case no exceptions can be specified, and all requests are sent to the given proxy server. <a href="rdf-overview.htm#GUID-84CDC448-A7A3-497D-BCE9-0A84864D50F1__CIHDCJFC">Example 1-73</a> shows a SEM_MATCH query where the proxy address <code class="codeph">proxy.example.com</code> at port 80 is specified.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="example" id="GUID-84CDC448-A7A3-497D-BCE9-0A84864D50F1__CIHDBJCD">
<p class="titleinexample">Example 1-72 Setting Proxy Server with UTL_HTTP.SET_PROXY</p>
<pre dir="ltr">BEGIN
  UTL_HTTP.SET_PROXY(&#39;proxy.example.com:80&#39;, &#39;example2.com&#39;);
END;
/
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-84CDC448-A7A3-497D-BCE9-0A84864D50F1__CIHDCJFC">
<p class="titleinexample">Example 1-73 Setting Proxy Server in SPARQL SERVICE</p>
<pre dir="ltr">SELECT *
  FROM TABLE(SEM_MATCH(
    &#39;SELECT *
     WHERE {
       SERVICE &lt;http://www.example1.org/sparql&gt;{ ?s ?p ?o }
      }&#39;,
    SEM_Models(&#39;electronics&#39;),
    null, null, null, null, &#39; SERVICE_PROXY=proxy.example.com:80 &#39;));
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM780"></a>
<div class="props_rev_3"><a id="GUID-F09036DD-6D37-4BC6-AAD8-4D5D3984A6B4"></a>
<h4 id="RDFRM-GUID-F09036DD-6D37-4BC6-AAD8-4D5D3984A6B4" class="sect4"><span class="enumeration_section">1.6.8.5</span> Accessing SPARQL Endpoints with HTTP Basic Authentication</h4>
<div>
<div class="section">
<p>To allow accessing of SPARQL endpoints with HTTP Basic Authentication, user credentials should be saved in Session Context SDO_SEM_HTTP_CTX. A user with DBA privileges must grant EXECUTE on this context to the user that wishes to use basic authentication. The following example grants this access to a user named RDFUSER:</p>
<pre dir="ltr">grant execute on mdsys.sdo_sem_http_ctx to rdfuser;
</pre>
<p>After the privilege is granted, the user should save the user name and password for each SPARQL Endpoint with HTTP Authentication through functions <code class="codeph">mdsys.sdo_sem_http_ctx.set_usr</code> and <code class="codeph">mdsys.sdo_sem_http_ctx.set_pwd</code>. The following example sets a user name and password for the SPARQL endpoint at <code class="codeph">http://www.example1.org/sparql</code>:</p>
<pre dir="ltr">BEGIN
  mdsys.sdo_sem_http_ctx.set_usr(&#39;http://www.example1.org/sparql&#39;,&#39;user&#39;);
  mdsys.sdo_sem_http_ctx.set_pwd(&#39;http://www.example1.org/sparql&#39;,&#39;pwrd&#39;);
END;
/
</pre></div>
<!-- class="section" --></div>
</div>
</div>
<a id="RDFRM184"></a><a id="RDFRM183"></a>
<div class="props_rev_3"><a id="GUID-5D952ADA-7170-4D64-A07D-F86B32884FF5"></a>
<h3 id="RDFRM-GUID-5D952ADA-7170-4D64-A07D-F86B32884FF5" class="sect3"><span class="enumeration_section">1.6.9</span> Inline Query Optimizer Hints</h3>
<div>
<p>In SEM_MATCH, the SPARQL comment construct has been overloaded to allow inline HINT0 query optimizer hints. In SPARQL, the hash (#) character indicates that the remainder of the line is a comment. To associate an inline hint with a particular BGP, place a HINT0 hint string inside a SPARQL comment and insert the comment between the opening curly bracket ({) and the first triple pattern in the BGP. Inline hints enable you to influence the execution plan for each BGP in a query. <a href="rdf-overview.htm#GUID-5D952ADA-7170-4D64-A07D-F86B32884FF5__CIHHIAIA">Example 1-74</a> shows a query with inline query optimizer hints.</p>
<div class="example" id="GUID-5D952ADA-7170-4D64-A07D-F86B32884FF5__CIHHIAIA">
<p class="titleinexample">Example 1-74 Inline Query Optimizer Hints</p>
<pre dir="ltr">SELECT x, y, hp, cp
  FROM TABLE(SEM_MATCH(
    &#39;{ <span class="bold"># HINT0={ LEADING(t0) USE_NL(?x ?y ?bd) }</span>
      ?x :grandParentOf ?y . ?x rdf:type :Male . ?x :birthDate ?bd
      OPTIONAL { <span class="bold"># HINT0={ LEADING(t0 t1) BGP_JOIN(USE_HASH) }</span>
                 ?x :homepage ?hp . ?x :cellPhoneNum ?cp }
     }&#39;,
    SEM_Models(&#39;family&#39;),
    SEM_Rulebases(&#39;RDFS&#39;,&#39;family_rb&#39;), 
    SEM_ALIASES(SEM_ALIAS(&#39;&#39;,&#39;http://www.example.org/family/&#39;)),
    null));
</pre>
<p>The BGP_JOIN hint influences inter-BGP joins and has the following syntax: <code class="codeph">BGP_JOIN</code>(<code class="codeph">&lt;join_type&gt;</code><code class="codeph">)</code>, where <span class="italic">&lt;join_type&gt;</span> is USE_HASH or USE_NL. <a href="rdf-overview.htm#GUID-5D952ADA-7170-4D64-A07D-F86B32884FF5__CIHHIAIA">Example 1-74</a> uses the BGP_JOIN(USE_HASH) hint to specify that a hash join should be used when joining the OPTIONAL BGP with its parent BGP.</p>
<p>Inline optimizer hints override any hints passed to SEM_MATCH through the <code class="codeph">options</code> argument. For example, a global ALL_ORDERED hint applies to each BGP that does not specify an inline optimizer hint, but those BGPs with an inline hint use the inline hint instead of the ALL_ORDERED hint.</p>
</div>
<!-- class="example" --></div>
</div>
<a id="RDFRM186"></a><a id="RDFRM185"></a>
<div class="props_rev_3"><a id="GUID-7001881A-9DE6-4F3D-8593-F31F2004FE37"></a>
<h3 id="RDFRM-GUID-7001881A-9DE6-4F3D-8593-F31F2004FE37" class="sect3"><span class="enumeration_section">1.6.10</span> Full-Text Search</h3>
<div>
<p>The Oracle-specific <code class="codeph">orardf:textContains</code> SPARQL FILTER function uses full-text indexes on the MDSYS.RDF_VALUE$ table. This function has the following syntax (where <code class="codeph">orardf</code> is a built-in prefix that expands to <code class="codeph">&lt;http://xmlns.oracle.com/rdf/&gt;</code>):</p>
<pre dir="ltr">orardf:textContains(<span class="italic">variable</span>, <span class="italic">pattern</span>)
</pre>
<p>The first argument to <code class="codeph">orardf:textContains</code> must be a local variable (that is, a variable present in the BGP that contains the <code class="codeph">orardf:textContains</code> filter), and the second argument must be a constant plain literal.</p>
<p>For example, <code class="codeph">orardf:textContains(x, y)</code> returns true if <code class="codeph">x</code> matches the expression <code class="codeph">y</code>, where <code class="codeph">y</code> is a valid expression for the Oracle Text SQL operator CONTAINS. For more information about such expressions, see <a class="olink CCREF0104" target="_blank" href="../CCREF/csql.htm#CCREF0104"><span class="italic">Oracle Text Reference</span></a>.</p>
<p>Before using <code class="codeph">orardf:textContains</code>, you must create an Oracle Text index for the RDF network. To create such an index, invoke the <a href="sem-apis-ref.htm#GUID-3984C866-8524-458E-B858-43B0339E6629">SEM_APIS.ADD_DATATYPE_INDEX</a> procedure as follows:</p>
<pre dir="ltr">EXECUTE SEM_APIS.ADD_DATATYPE_INDEX(&#39;http://xmlns.oracle.com/rdf/text&#39;);
</pre>
<p>Performance for wildcard searches like <code class="codeph">orardf:textContains(?x, &#34;%abc%&#34;)</code> can be improved by using prefix and substring indexes. You can include any of the following options to the <a href="sem-apis-ref.htm#GUID-3984C866-8524-458E-B858-43B0339E6629">SEM_APIS.ADD_DATATYPE_INDEX</a> procedure:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">prefix_index=true</code> &ndash; for adding prefix index</p>
</li>
<li>
<p><code class="codeph">prefix_min_length=</code>&lt;<span class="italic"><code class="codeph">number&gt;</code></span> &ndash; minimum length for prefix index tokens</p>
</li>
<li>
<p><code class="codeph">prefix_max_length=</code><span class="italic"><code class="codeph">&lt;number&gt;</code></span> &ndash; maximum length for prefix index tokens</p>
</li>
<li>
<p><code class="codeph">substring_index=true</code> &ndash; for adding substring index</p>
</li>
</ul>
<p>For more information about Oracle Text indexing elements, see <a class="olink CCREF0200" target="_blank" href="../CCREF/cdatadic.htm#CCREF0200"><span class="italic">Oracle Text Reference</span></a>.</p>
<p>When performing large bulk loads into a semantic network with a text index, the overall load time may be faster if you drop the text index, perform the bulk load, and then re-create the text index. See <a href="rdf-overview.htm#GUID-E0FC3EA3-9385-4D94-AB3C-72F65EDAC966">Using Data Type Indexes</a> for more information about data type indexing.</p>
<p>After creating a text index, you can use the <code class="codeph">orardf:textContains</code> FILTER function in SEM_MATCH queries. <a href="rdf-overview.htm#GUID-7001881A-9DE6-4F3D-8593-F31F2004FE37__CIHCAJHI">Example 1-75</a> uses <code class="codeph">orardf:textContains</code> to find all grandfathers whose names start with the letter <span class="italic">A</span> or <span class="italic">B</span>.</p>
<div class="example" id="GUID-7001881A-9DE6-4F3D-8593-F31F2004FE37__CIHCAJHI">
<p class="titleinexample">Example 1-75 Full-Text Search</p>
<pre dir="ltr">SELECT x, y, hp, cp
  FROM TABLE(SEM_MATCH(
    &#39;{ ?x :grandParentOf ?y . ?x rdf:type :Male . ?x :name ?n 
       <span class="bold">FILTER (orardf:textContains(?n, &#34; A% | B% &#34;))</span> }&#39;,
    SEM_Models(&#39;family&#39;),
    SEM_Rulebases(&#39;RDFS&#39;,&#39;family_rb&#39;), 
    SEM_ALIASES(SEM_ALIAS(&#39;&#39;,&#39;http://www.example.org/family/&#39;)),
          null));
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM187"></a>
<div class="props_rev_3"><a id="GUID-3986DFD4-F23A-4379-A859-9EA1F1582D43"></a>
<h3 id="RDFRM-GUID-3986DFD4-F23A-4379-A859-9EA1F1582D43" class="sect3"><span class="enumeration_section">1.6.11</span> Spatial Support</h3>
<div>
<p>RDF Semantic Graph supports storage and querying of spatial geometry data through the OGC GeoSPARQL standard and through Oracle-specific SPARQL extensions. Geometry data can be stored as <code class="codeph">orageo:WKTLiteral</code> or <code class="codeph">ogc:wktLiteral</code> typed literals, and geometry data can be queried using several query functions for spatial operations. Spatial indexing for increased performance is also supported.</p>
<p><code class="codeph">orageo</code> is a built-in prefix that expands to <code class="codeph">&lt;http://xmlns.oracle.com/rdf/geo/&gt;</code>, <code class="codeph">ogc</code> is a built-in prefix that expands to <code class="codeph">&lt;http://www.opengis.net/ont/geosparql#&gt;</code>, and <code class="codeph">ogcf</code> is a built-in prefix that expands to <code class="codeph">&lt;http://www.opengis.net/def/function/geosparql&gt;</code>.</p>
<p>This section covers the following topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="rdf-overview.htm#GUID-2B9CE00F-A510-4551-809D-BD7A3A7B6CE9">OGC GeoSPARQL Support</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-4E342E2A-73EF-42D4-80BD-AE8BEF5C6910">Representing Spatial Data in RDF</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-DA58230A-963B-4694-ACD0-46C717CFBF61">Indexing Spatial Data</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-8B06DBF2-7674-4DF5-9AA4-47663B03B5B2">Querying Spatial Data</a></p>
</li>
</ul>
</div>
<a id="RDFRM403"></a>
<div class="props_rev_3"><a id="GUID-2B9CE00F-A510-4551-809D-BD7A3A7B6CE9"></a>
<h4 id="RDFRM-GUID-2B9CE00F-A510-4551-809D-BD7A3A7B6CE9" class="sect4"><span class="enumeration_section">1.6.11.1</span> OGC GeoSPARQL Support</h4>
<div>
<p>RDF Semantic Graph supports the following conformance classes for the OGC GeoSPARQL standard (<a href="http://www.opengeospatial.org/standards/geosparql" target="_blank"><code class="codeph">http://www.opengeospatial.org/standards/geosparql</code></a>) using well-known text (WKT) serialization and the Simple Features relation family.</p>
<ul style="list-style-type: disc;">
<li>
<p>Core</p>
</li>
<li>
<p>Topology Vocabulary Extension (<span class="italic">Simple Features</span>)</p>
</li>
<li>
<p>Geometry Extension (<span class="italic">WKT, 1.2.0</span>)</p>
</li>
<li>
<p>Geometry Topology Extension (<span class="italic">Simple Features, WKT, 1.2.0</span>)</p>
</li>
<li>
<p>RDFS Entailment Extension (<span class="italic">Simple Features, WKT, 1.2.0</span>)</p>
</li>
</ul>
<p>Specifics for representing and querying spatial data using GeoSPARQL are covered in sections that follow this one.</p>
</div>
</div>
<a id="RDFRM189"></a><a id="RDFRM404"></a><a id="RDFRM190"></a><a id="RDFRM188"></a>
<div class="props_rev_3"><a id="GUID-4E342E2A-73EF-42D4-80BD-AE8BEF5C6910"></a>
<h4 id="RDFRM-GUID-4E342E2A-73EF-42D4-80BD-AE8BEF5C6910" class="sect4"><span class="enumeration_section">1.6.11.2</span> Representing Spatial Data in RDF</h4>
<div>
<div class="section">
<p>Spatial geometries can be represented in RDF as <code class="codeph">orageo:WKTLiteral</code> or <code class="codeph">ogc:wktLiteral</code> typed literals.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-4E342E2A-73EF-42D4-80BD-AE8BEF5C6910__CIHBCHDC">
<p class="titleinexample">Example 1-76 Spatial Point Geometry Represented as orageo:WKTLiteral</p>
<p><a href="rdf-overview.htm#GUID-4E342E2A-73EF-42D4-80BD-AE8BEF5C6910__CIHBCHDC">Example 1-76</a> shows the <code class="codeph">orageo:WKTLiteral</code> encoding for a simple point geometry; <a href="rdf-overview.htm#GUID-4E342E2A-73EF-42D4-80BD-AE8BEF5C6910__CIHFDHEG">Example 1-77</a> shows the GeoSPARQL encoding for the same point.</p>
<pre dir="ltr">&#34;Point(-83.4 34.3)&#34;^^&lt;http://xmlns.oracle.com/rdf/geo/WKTLiteral&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-4E342E2A-73EF-42D4-80BD-AE8BEF5C6910__CIHFDHEG">
<p class="titleinexample">Example 1-77 Spatial Point Geometry Represented as ogc:wktLiteral</p>
<pre dir="ltr">&#34;Point(-83.4 34.3)&#34;^^&lt;http://www.opengis.net/ont/geosparql#wktLiteral&gt;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-4E342E2A-73EF-42D4-80BD-AE8BEF5C6910__CIHDGJCD">
<p class="titleinexample">Example 1-78 Spatial Data Encoded Using orageo:WKTLiteral Values</p>
<p>Both <code class="codeph">orageo:WKTLiteral</code> and <code class="codeph">ogc:wktLiteral</code> encodings consist of an optional spatial reference system URI, followed by a Well-Known Text (WKT) string that encodes a geometry value. The spatial reference system URI and the WKT string should be separated by a whitespace character. (<a id="d5610e8628" class="indexterm-anchor"></a>In this document the term <span class="italic"><span class="bold">geometry literal</span></span> is used to refer to both <code class="codeph">orageo:WKTLiteral</code> and <code class="codeph">ogc:wktLiteral</code> typed literals.)</p>
<p>Supported spatial reference system URIs have the following form <code class="codeph">&lt;http://xmlns.oracle.com/rdf/geo/srid/</code><span class="italic"><code class="codeph">{srid}</code></span><code class="codeph">&gt;</code>, where {srid} is a valid spatial reference system ID from Oracle Spatial and Graph. If a geometry literal value does not include a spatial reference system URI, then the default spatial reference system, WGS84 Longitude-Latitude (URI <code class="codeph">&lt;http://xmlns.oracle.com/rdf/geo/srid/8307&gt;</code>), is used. The same default spatial reference system is used when geometry literal values are encountered in a query string.</p>
<p>Several geometry types can be represented as geometry literal values, including point, linestring, polygon, polyhedral surface, triangle, TIN, multipoint, multi-linestring, multipolygon, and geometry collection. Up to 500,000 vertices per geometry are supported for two-dimensional geometries.</p>
<p><a href="rdf-overview.htm#GUID-4E342E2A-73EF-42D4-80BD-AE8BEF5C6910__CIHDGJCD">Example 1-78</a> shows some RDF spatial data (in N-triple format) encoded using <code class="codeph">orageo:WKTLiteral</code> values. In this example, the first two geometries (in lot1) use the default coordinate system (SRID 8307), but the other two geometries (in lot2) specify SRID 8265.</p>
<pre dir="ltr"># spatial data for lot1 using the default WGS84 Longitude-Latitude spatial reference system
&lt;urn:lot1&gt; &lt;urn:hasExactGeometry&gt; &#34;Polygon((-83.6 34.1, -83.6 34.5, -83.2 34.5, -83.2 34.1, -83.6 34.1))&#34;^^&lt;http://xmlns.oracle.com/rdf/geo/WKTLiteral&gt; .
&lt;urn:lot1&gt; &lt;urn:hasPointGeometry&gt; &#34;Point(-83.4 34.3)&#34;^^&lt;http://xmlns.oracle.com/rdf/geo/WKTLiteral&gt; .
# spatial data for lot2 using the NAD83 Longitude-Latitude spatial reference system
&lt;urn:lot2&gt; &lt;urn:hasExactGeometry&gt; &#34;&lt;http://xmlns.oracle.com/rdf/geo/srid/8265&gt; Polygon((-83.6  34.1, -83.6 34.3, -83.4 34.3, -83.4 34.1, -83.6 34.1))&#34;^^&lt;http://xmlns.oracle.com/rdf/geo/WKTLiteral&gt; .
&lt;urn:lot2&gt; &lt;urn:hasPointGeometry&gt; &#34;&lt;http://xmlns.oracle.com/rdf/geo/srid/8265&gt; Point(-83.5 34.2)&#34;^^&lt;http://xmlns.oracle.com/rdf/geo/WKTLiteral&gt; .
</pre>
<p>For more information, see the chapter about coordinate systems (spatial reference systems) in <a class="olink SPATL050" target="_blank" href="../SPATL/coordinate-systems-spatial-reference-systems.htm#SPATL050"><span class="italic">Oracle Spatial and Graph Developer&#39;s Guide</span></a>. See also the material about the WKT geometry representation in the Open Geospatial Consortium (OGC) Simple Features document, available at: <a href="http://www.opengeospatial.org/standards/sfa" target="_blank"><code class="codeph">http://www.opengeospatial.org/standards/sfa</code></a></p>
</div>
<!-- class="example" --></div>
</div>
<a id="RDFRM192"></a><a id="RDFRM191"></a>
<div class="props_rev_3"><a id="GUID-DA58230A-963B-4694-ACD0-46C717CFBF61"></a>
<h4 id="RDFRM-GUID-DA58230A-963B-4694-ACD0-46C717CFBF61" class="sect4"><span class="enumeration_section">1.6.11.3</span> Indexing Spatial Data</h4>
<div>
<p>Before you can use any of the SPARQL extension functions (introduced in <a href="rdf-overview.htm#GUID-8B06DBF2-7674-4DF5-9AA4-47663B03B5B2">Querying Spatial Data</a>) to query spatial data, you must create a spatial index on the RDF network by calling the <a href="sem-apis-ref.htm#GUID-3984C866-8524-458E-B858-43B0339E6629">SEM_APIS.ADD_DATATYPE_INDEX</a> procedure.</p>
<p>When you create the spatial index, you must specify the following information:</p>
<ul style="list-style-type: disc;">
<li>
<p>SRID - The ID for the spatial reference system in which to create the spatial index. Any valid spatial reference system ID from Oracle Spatial and Graph can be used as an SRID value.</p>
</li>
<li>
<p>TOLERANCE &ndash; The tolerance value for the spatial index. Tolerance is a positive number indicating how close together two points must be to be considered the same point. The units for this value are determined by the default units for the SRID used (for example, meters for WGS84 Long-Lat). Tolerance is explained in detail in <a class="olink SPATL450" target="_blank" href="../SPATL/data-model.htm#SPATL450"><span class="italic">Oracle Spatial and Graph Developer&#39;s Guide</span></a>.</p>
</li>
<li>
<p>DIMENSIONS - A text string encoding dimension information for the spatial index. Each dimension is represented by a sequence of three comma-separated values: name, minimum value, and maximum value. Each dimension is enclosed in parentheses, and the set of dimensions is enclosed by an outer parenthesis.</p>
</li>
</ul>
<div class="example" id="GUID-DA58230A-963B-4694-ACD0-46C717CFBF61__CIHJGJHB">
<p class="titleinexample">Example 1-79 Adding a Spatial Data Type Index on RDF Data</p>
<p><a href="rdf-overview.htm#GUID-DA58230A-963B-4694-ACD0-46C717CFBF61__CIHJGJHB">Example 1-79</a> adds a spatial data type index on the RDF network, specifying the WGS84 Longitude-Latitude spatial reference system, a tolerance value of 10 meters, and the recommended dimensions for the indexing of spatial data that uses this coordinate system. The TOLERANCE, SRID, and DIMENSIONS keywords are case sensitive, and creating a data type index for <code class="codeph">&lt;http://xmlns.oracle.com/rdf/geo/WKTLiteral&gt;</code> will also index <code class="codeph">&lt;http://www.opengis.net/ont/geosparql#wktLiteral&gt;</code> geometry literals, and vice versa (that is, creating a data type index for <code class="codeph">&lt;http://www.opengis.net/ont/geosparql#wktLiteral&gt;</code> will also index <code class="codeph">&lt;http://xmlns.oracle.com/rdf/geo/WKTLiteral&gt;</code> geometry literals).</p>
<pre dir="ltr">EXECUTE sem_apis.add_datatype_index(&#39;http://xmlns.oracle.com/rdf/geo/WKTLiteral&#39;,  options=&gt;&#39;TOLERANCE=10 SRID=8307 DIMENSIONS=((LONGITUDE,-180,180) (LATITUDE,-90,90))&#39;);
</pre>
<p>No more than one spatial data type index is supported for an RDF network. Geometry literal values stored in the RDF network are automatically normalized to the spatial reference system used for the index, so a single spatial index can simultaneously support geometry literal values from different spatial reference systems. This coordinate transformation is done transparently for indexing and spatial computations. When geometry literal values are returned from a SEM_MATCH query, the original, untransformed geometry is returned.</p>
<p>For more information about spatial indexing, see the chapter about indexing and querying spatial data in <a class="olink SPATL040" target="_blank" href="../SPATL/indexing-and-querying-spatial-data.htm#SPATL040"><span class="italic">Oracle Spatial and Graph Developer&#39;s Guide</span></a>.</p>
</div>
<!-- class="example" --></div>
</div>
<a id="RDFRM193"></a>
<div class="props_rev_3"><a id="GUID-8B06DBF2-7674-4DF5-9AA4-47663B03B5B2"></a>
<h4 id="RDFRM-GUID-8B06DBF2-7674-4DF5-9AA4-47663B03B5B2" class="sect4"><span class="enumeration_section">1.6.11.4</span> Querying Spatial Data</h4>
<div>
<p>Several SPARQL extension functions are available for performing spatial queries in SEM_MATCH. For example, for spatial RDF data, you can find the area and perimeter (length) of a geometry, the distance between two geometries, and the centroid and the minimum bounding rectangle (MBR) of a geometry, and you can check various topological relationships between geometries.</p>
<p><a href="sem-match-spatial.htm#GUID-BAB8E8F0-974E-44F7-813A-D3A96BF00399">SEM_MATCH Support for Spatial Queries</a> contains reference and usage information about the available functions, grouped into two categories:</p>
<ul style="list-style-type: disc;">
<li>
<p>GeoSPARQL functions</p>
</li>
<li>
<p>Oracle-specific functions</p>
</li>
</ul>
</div>
</div>
</div>
<a id="RDFRM194"></a>
<div class="props_rev_3"><a id="GUID-E04ABC63-304C-4706-812B-D54448FCE55C"></a>
<h3 id="RDFRM-GUID-E04ABC63-304C-4706-812B-D54448FCE55C" class="sect3"><span class="enumeration_section">1.6.12</span> Best Practices for Query Performance</h3>
<div>
<p>This section describes some recommended practices for using the SEM_MATCH table function to query semantic data. It includes the following subsections:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="rdf-overview.htm#GUID-8B59A883-5B8A-4795-9DF2-1D1D5B75061B">FILTER Constructs Involving xsd:dateTime_ xsd:date_ and xsd:time</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-6ABE2BD3-1E3A-4BF9-886B-683C63C87F26">Function-Based Indexes for FILTER Constructs Involving Typed Literals</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-D3468276-4135-4A16-86F7-BBAC53EF4DBC">FILTER Constructs Involving Relational Expressions</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-D6C08F5C-6B46-430B-A902-4C1BC442A793">Optimizer Statistics and Dynamic Sampling</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-C33B0D3C-7FC8-4282-BDC8-5F52C5828C6A">Multi-Partition Queries</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-E762DC62-BBE2-4EF8-AC7E-9AD97F26F485">Compression on Systems with OLTP Index Compression</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-B5010FED-14D9-4DF4-846D-B08F530DFF89">Unbounded Property Path Expressions</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-A3D3A5F1-EF74-4BAC-BF58-59506A457019">Grouping and Aggregation</a></p>
</li>
</ul>
</div>
<a id="RDFRM195"></a>
<div class="props_rev_3"><a id="GUID-8B59A883-5B8A-4795-9DF2-1D1D5B75061B"></a>
<h4 id="RDFRM-GUID-8B59A883-5B8A-4795-9DF2-1D1D5B75061B" class="sect4"><span class="enumeration_section">1.6.12.1</span> FILTER Constructs Involving xsd:dateTime, xsd:date, and xsd:time</h4>
<div>
<p>By default, SEM_MATCH complies with the XML Schema standard for comparison of xsd:date, xsd:time, and xsd:dateTime values. According to this standard, when comparing two calendar values c1 and c2 where c1 has an explicitly specified time zone and c2 does not have a specified time zone, c2 is converted into the interval [c2-14:00, c2+14:00]. If c2-14:00 &lt;= c1 &lt;= c2+14:00, then the comparison is undefined and will always evaluate to false. If c1 is outside this interval, then the comparison is defined.</p>
<p>However, the extra logic required to evaluate such comparisons (value with a time zone and value without a time zone) can significantly slow down queries with FILTER constructs that involve calendar values. For improved query performance, you can disable this extra logic by specifying <code class="codeph">FAST_DATE_FILTER=T</code> in the <code class="codeph">options</code> parameter of the SEM_MATCH table function. When <code class="codeph">FAST_DATE_FILTER=T</code> is specified, all calendar values without time zones are assumed to be in Greenwich Mean Time (GMT).</p>
<p>Note that using <code class="codeph">FAST_DATE_FILTER=T</code> does <span class="italic">not</span> affect query <span class="italic">correctness</span> when either (1) all calendar values in the data set have a time zone or (2) all calendar values in the data set do not have a time zone.</p>
</div>
</div>
<a id="RDFRM196"></a>
<div class="props_rev_3"><a id="GUID-6ABE2BD3-1E3A-4BF9-886B-683C63C87F26"></a>
<h4 id="RDFRM-GUID-6ABE2BD3-1E3A-4BF9-886B-683C63C87F26" class="sect4"><span class="enumeration_section">1.6.12.2</span> Function-Based Indexes for FILTER Constructs Involving Typed Literals</h4>
<div>
<p>The evaluation of SEM_MATCH queries involving the FILTER construct often requires executing one or more SQL functions against the RDF_VALUE$ table. For example, the filter <code class="codeph">(?x &lt; &#34;1929-11-16Z&#34;^^xsd:date)</code> invokes the <a href="sem-apis-ref.htm#GUID-957DBCED-4B78-4A5F-BB6F-79F0283BC9A8">SEM_APIS.GETV$DATETZVAL</a> function.</p>
<p>Function-based indexes can be used to improve the performance of queries that contain a filter condition involving a typed literal. For example, an <code class="codeph">xsd:date</code> function-based index may speed up evaluation of the filter <code class="codeph">(?x &lt; &#34;1929-11-16Z&#34;^^xsd:date)</code>.</p>
<p>Convenient interfaces are provided for creating, altering, and dropping these function-based indexes. For more information, see <a href="rdf-overview.htm#GUID-E0FC3EA3-9385-4D94-AB3C-72F65EDAC966">Using Data Type Indexes</a>.</p>
<p>Note, however, that the existence of these function-based indexes on the MDSYS.RDF_VALUE$ table can significantly slow down bulk load operations. In many cases it may be faster to drop the indexes, perform the bulk load, and then re-create the indexes, as opposed to doing the bulk load with the indexes in place.</p>
</div>
</div>
<a id="RDFRM197"></a>
<div class="props_rev_3"><a id="GUID-D3468276-4135-4A16-86F7-BBAC53EF4DBC"></a>
<h4 id="RDFRM-GUID-D3468276-4135-4A16-86F7-BBAC53EF4DBC" class="sect4"><span class="enumeration_section">1.6.12.3</span> FILTER Constructs Involving Relational Expressions</h4>
<div>
<p>The following recommendations apply to FILTER constructs involving relational expressions:</p>
<ul style="list-style-type: disc;">
<li>
<p><a id="d5610e9069" class="indexterm-anchor"></a>The <code class="codeph">sameTerm</code> built-in function is more efficient than using <code class="codeph">=</code> or <code class="codeph">!=</code> when comparing two variables in a FILTER clause, so (for example) use <code class="codeph">sameTerm(?a, ?b)</code> instead of <code class="codeph">(?a = ?b)</code> and use <code class="codeph">(!sameTerm(?a, ?b))</code> instead of <code class="codeph">(?a != ?b)</code> whenever possible.</p>
</li>
<li>
<p>When comparing values in FILTER expressions, you may get better performance by reducing the use of negation. For example, it is more efficient to evaluate <code class="codeph">(?x &lt;= &#34;10&#34;^^xsd:int)</code> than it is to evaluate the expression <code class="codeph">(!(?x &gt; &#34;10&#34;^^xsd:int))</code>.</p>
</li>
</ul>
</div>
</div>
<a id="RDFRM199"></a><a id="RDFRM198"></a>
<div class="props_rev_3"><a id="GUID-D6C08F5C-6B46-430B-A902-4C1BC442A793"></a>
<h4 id="RDFRM-GUID-D6C08F5C-6B46-430B-A902-4C1BC442A793" class="sect4"><span class="enumeration_section">1.6.12.4</span> Optimizer Statistics and Dynamic Sampling</h4>
<div>
<p>Having sufficient statistics for the query optimizer is critical for good query performance. In general, you should ensure that you have gathered basic statistics for the semantic network using the <a href="sem-perf-ref.htm#GUID-285D5640-9DF4-460B-B27E-7671711EFA18">SEM_PERF.GATHER_STATS</a> procedure (described in <a href="sem-perf-ref.htm#GUID-5F5DD10C-4DF9-453B-88F8-3DA16C3B17CA">SEM_PERF Package Subprograms</a>).</p>
<p>Due to the inherent flexibility of the RDF data model, static information may not produce optimal execution plans for SEM_MATCH queries. Dynamic sampling can often produce much better query execution plans. Dynamic sampling levels can be set at the session or system level using the <code class="codeph">optimizer_dynamic_sampling</code> parameter, and at the individual query level using the <code class="codeph">dynamic_sampling</code><span class="italic"><code class="codeph">(level)</code></span> SQL query hint. In general, it is good to experiment with dynamic sampling levels between 3 and 6. For information about estimating statistics with dynamic sampling, see <a class="olink TGSQL450" target="_blank" href="../TGSQL/tgsql_astat.htm#TGSQL450"><span class="italic">Oracle Database SQL Tuning Guide</span></a>.</p>
<p><a href="rdf-overview.htm#GUID-D6C08F5C-6B46-430B-A902-4C1BC442A793__CIHBDHEJ">Example 1-80</a> uses a SQL hint for a dynamic sampling level of 6.</p>
<div class="example" id="GUID-D6C08F5C-6B46-430B-A902-4C1BC442A793__CIHBDHEJ">
<p class="titleinexample">Example 1-80 SQL Hint for Dynamic Sampling</p>
<pre dir="ltr">SELECT <span class="bold">/*+ DYNAMIC_SAMPLING(6) */</span> x, y
  FROM TABLE(SEM_MATCH(
    &#39;{?x :grandParentOf ?y . 
      ?x rdf:type :Male . 
      ?x :birthDate ?bd }&#39;,
    SEM_Models(&#39;family&#39;),
    SEM_Rulebases(&#39;RDFS&#39;,&#39;family_rb&#39;), 
    SEM_ALIASES(SEM_ALIAS(&#39;&#39;,&#39;http://www.example.org/family/&#39;)),
    null, null, &#39;&#39; ));
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM201"></a>
<div class="props_rev_3"><a id="GUID-C33B0D3C-7FC8-4282-BDC8-5F52C5828C6A"></a>
<h4 id="RDFRM-GUID-C33B0D3C-7FC8-4282-BDC8-5F52C5828C6A" class="sect4"><span class="enumeration_section">1.6.12.5</span> Multi-Partition Queries</h4>
<div>
<p>The following recommendations apply to the use of multiple semantic models, semantic models plus entailments, and virtual models:</p>
<ul style="list-style-type: disc;">
<li>
<p>If you execute SEM_MATCH queries against multiple semantic models or against semantic models plus entailments, you can probably improve query performance if you create a virtual model (see <a href="rdf-overview.htm#GUID-8B957406-5ED1-4579-9C23-0EDE2FDF2964">Virtual Models</a>) that contains all the models and entailments you are querying and then query this single virtual model.</p>
</li>
<li>
<p>Use the <code class="codeph">ALLOW_DUP=T</code> query option. If you do not use this option, then an expensive (in terms of processing) duplicate-elimination step is required during query processing, in order to maintain set semantics for RDF data. However, if you use this option, the duplicate-elimination step is not performed, and this results in significant performance gains.</p>
</li>
</ul>
</div>
</div>
<a id="RDFRM731"></a>
<div class="props_rev_3"><a id="GUID-E762DC62-BBE2-4EF8-AC7E-9AD97F26F485"></a>
<h4 id="RDFRM-GUID-E762DC62-BBE2-4EF8-AC7E-9AD97F26F485" class="sect4"><span class="enumeration_section">1.6.12.6</span> Compression on Systems with OLTP Index Compression</h4>
<div>
<p>On systems where OLTP index compression is supported (such as Exadata). you can take advantage of the feature to improve the compression ratio for some of the B-tree indexes used by the semantic network.</p>
<p>For example, a DBA can use the following command to change the compression scheme on the MDSYS.RDF_VAL_NAMETYLITLNG_IDX index from prefix compression to OLTP index compression:</p>
<pre dir="ltr">SQL&gt; alter index mdsys.RDF_VAL_NAMETYLITLNG_IDX rebuild compress for oltp high;
</pre></div>
</div>
<a id="RDFRM781"></a>
<div class="props_rev_3"><a id="GUID-B5010FED-14D9-4DF4-846D-B08F530DFF89"></a>
<h4 id="RDFRM-GUID-B5010FED-14D9-4DF4-846D-B08F530DFF89" class="sect4"><span class="enumeration_section">1.6.12.7</span> Unbounded Property Path Expressions</h4>
<div>
<p>A depth-limited search should be used for + and * property path operators whenever possible. The depth-limited implementation for * and + is likely to significantly outperform the CONNECT BY-based implementation in large and/or highly connected graphs. A depth limit of 10 is used by default. For a given graph, depth limits larger than the graph&#39;s diameter are not useful. See <a href="rdf-overview.htm#GUID-A3F16175-AC4B-4B19-BF25-FD918760F18E">Property Paths</a> for more information on setting depth limits.</p>
<p>A backward chaining style inference using <code class="codeph">rdfs:subClassOf+</code> for ontologies with very deep class hierarchies may be an exception to this rule. In such cases, unbounded CONNECT BY-based evaluations may perform better than depth-limited evaluations with very high depth limits (for example, 50).</p>
</div>
</div>
<a id="RDFRM783"></a><a id="RDFRM782"></a>
<div class="props_rev_3"><a id="GUID-A3D3A5F1-EF74-4BAC-BF58-59506A457019"></a>
<h4 id="RDFRM-GUID-A3D3A5F1-EF74-4BAC-BF58-59506A457019" class="sect4"><span class="enumeration_section">1.6.12.8</span> Grouping and Aggregation</h4>
<div>
<p><code class="codeph">MIN</code>, <code class="codeph">MAX</code> and <code class="codeph">GROUP_CONCAT</code> aggregates require special logic to fully capture SPARQL semantics for input of non-uniform type (for example, <code class="codeph">MAX(?x)</code>). For certain cases where a uniform input type can be determined at compile time (for example, <code class="codeph">MAX(STR(?x)) &ndash;</code> plain literal input), optimizations for built-in SQL aggregates can be used. Such optimizations generally give an order of magnitude increase in performance. The following cases are optimized:</p>
<ul style="list-style-type: disc;">
<li>
<p>MIN/MAX(&lt;plain literal&gt;)</p>
</li>
<li>
<p>MIN/MAX(&lt;numeric&gt;)</p>
</li>
<li>
<p>MIN/MAX(&lt;dateTime&gt;)</p>
</li>
<li>
<p>GROUP_CONCAT(&lt;plain literal&gt;)</p>
</li>
</ul>
<p><a href="rdf-overview.htm#GUID-A3D3A5F1-EF74-4BAC-BF58-59506A457019__CIHDEBJH">Example 1-81</a> uses MIN/MAX(&lt;numeric&gt;) optimizations.</p>
<div class="example" id="GUID-A3D3A5F1-EF74-4BAC-BF58-59506A457019__CIHDEBJH">
<p class="titleinexample">Example 1-81 Aggregate Optimizations</p>
<pre dir="ltr">SELECT dept, minSal, maxSal
  FROM TABLE(SEM_MATCH(
    &#39;SELECT ?dept (MIN(xsd:decimal(?sal)) AS ?minSal) (MAX(xsd:decimal(?sal)) AS ?maxSal)
     WHERE
       {?x :salary ?y . 
        ?x :department ?dept }
     GROUP BY ?dept&#39;,
    SEM_Models(&#39;hr_data&#39;),
    null, null, null, null, &#39;&#39; ));
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="RDFRM732"></a>
<div class="props_rev_3"><a id="GUID-EA14A0A1-2AF6-41A7-8362-F9600874F7F0"></a>
<h3 id="RDFRM-GUID-EA14A0A1-2AF6-41A7-8362-F9600874F7F0" class="sect3"><span class="enumeration_section">1.6.13</span> Special Considerations When Using SEM_MATCH</h3>
<div>
<p>The following considerations apply to SPARQL queries executed by RDF Semantic Graph using SEM_MATCH:</p>
<ul style="list-style-type: disc;">
<li>
<p>Value assignment</p>
<ul style="list-style-type: disc;">
<li>
<p>A compile-time error is raised when undefined variables are referenced in the source of a value assignment.</p>
</li>
</ul>
</li>
<li>
<p>Grouping and aggregation</p>
<ul style="list-style-type: disc;">
<li>
<p>Non-grouping variables (query variables not used for grouping and therefore not valid for projection) cannot be reused as a target for value assignment.</p>
</li>
<li>
<p>Non-numeric values are ignored by the AVG and SUM aggregates.</p>
</li>
<li>
<p>By default, SEM_MATCH returns no rows for an aggregate query with a graph pattern that fails to match. The W3C specification requires a single, null row for this case. W3C-compliant behavior can be obtained with the <code class="codeph">STRICT_AGG_CARD=T</code> query option for a small performance penalty.</p>
</li>
</ul>
</li>
<li>
<p>ORDER BY</p>
<ul style="list-style-type: disc;">
<li>
<p>When using SPARQL ORDER BY in SEM_MATCH, the containing SQL query should be ordered by SEM$ROWNUM to ensure that the desired ordering is maintained through any enclosing SQL blocks.</p>
</li>
</ul>
</li>
<li>
<p>Numeric computations</p>
<ul style="list-style-type: disc;">
<li>
<p>The native Oracle NUMBER type is used internally for all arithmetic operations, and the results of all arithmetic operations are serialized as <code class="codeph">xsd:decimal</code>. Note that the native Oracle NUMBER type is more precise than both BINARY_FLOAT and BINARY_DOUBLE. See <a class="olink SQLRF00222" target="_blank" href="../SQLRF/sql_elements001.htm#SQLRF00222"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information on the NUMBER built-in data type.</p>
</li>
<li>
<p>Division by zero causes a runtime error instead of producing an unbound value.</p>
</li>
</ul>
</li>
<li>
<p>Negation</p>
<ul style="list-style-type: disc;">
<li>
<p>EXISTS and NOT EXISTS filters that reference <span class="italic">potentially unbound variables</span> are not supported in the following contexts:</p>
<ul style="list-style-type: disc;">
<li>
<p>Non-aliased expressions in GROUP BY</p>
</li>
<li>
<p>Input to aggregates</p>
</li>
<li>
<p>Expressions in ORDER BY</p>
</li>
<li>
<p>FILTER expressions within OPTIONAL graph patterns that also reference variables that do not appear inside of the OPTIONAL graph pattern</p>
</li>
</ul>
<p>The first three cases can be realized by first assigning the result of the EXISTS or NOT EXISTS filter to a variable using a BIND clause or SELECT expression.</p>
<p>These restrictions do <span class="italic">not</span> apply to EXISTS and NOT EXISTS filters that only reference definitely bound variables.</p>
</li>
</ul>
</li>
<li>
<p>Blank nodes</p>
<ul style="list-style-type: disc;">
<li>
<p>Blank nodes are not supported within graph patterns.</p>
</li>
<li>
<p>The <code class="codeph">BNODE(literal)</code> function returns the same blank node value every time it is called with the same literal argument.</p>
</li>
</ul>
</li>
<li>
<p>Property paths</p>
<ul style="list-style-type: disc;">
<li>
<p>Unbounded operators + and * use a 10-hop depth limit by default for performance reasons. This behavior can be changed to a truly unbounded search by setting a depth limit of 0. See <a href="rdf-overview.htm#GUID-A3F16175-AC4B-4B19-BF25-FD918760F18E">Property Paths</a> for details.</p>
</li>
</ul>
</li>
<li>
<p>Long literals (CLOBs)</p>
<ul style="list-style-type: disc;">
<li>
<p>SPARQL functions and aggregates do not support long literals by default.</p>
</li>
<li>
<p>Specifying the <code class="codeph">CLOB_EXP_SUPPORT=T</code> query option enables long literal support for the following SPARQL functions: IF, COALESCE, STRLANG, STRDT, SUBSTR, STRBEFORE, STRAFTER, CONTAINS, STRLEN, STRSTARTS, STRENDS.</p>
</li>
<li>
<p>Specifying the <code class="codeph">CLOB_AGG_SUPPORT=T</code> query option enables long literal support for the following aggregates: MIN, MAX, SAMPLE, GROUP_CONCAT.</p>
</li>
</ul>
</li>
<li>
<p>Canonicalization of RDF literals</p>
<ul style="list-style-type: disc;">
<li>
<p>By default, RDF literals returned from SPARQL functions and constant RDF literals used in value assignment statements (BIND, SELECT expressions, GROUP BY expressions) are canonicalized. This behavior is consistent with the SPARQL 1.1 D-Entailment Regime.</p>
</li>
<li>
<p>Canonicalization can be disabled with the <code class="codeph">PROJ_EXACT_VALUES=T</code> query option.</p>
</li>
</ul>
</li>
</ul>
</div>
</div>
</div>
<a id="RDFRM596"></a>
<div class="props_rev_3"><a id="GUID-65045BFA-D0FE-4720-BF68-2C45765C74E9"></a>
<h2 id="RDFRM-GUID-65045BFA-D0FE-4720-BF68-2C45765C74E9" class="sect2"><span class="enumeration_section">1.7</span> Loading and Exporting Semantic Data</h2>
<div>
<p>To load semantic data into a model, use one or more of the following options:</p>
<ul style="list-style-type: disc;">
<li>
<p>Bulk load or append data into the semantic data store from a staging table, with each row containing the three components -- subject, predicate, and object -- of an RDF triple and optionally a named graph. This is explained in <a href="rdf-overview.htm#GUID-93BBAF2A-D906-4172-8315-4E0184FE6ABB">Bulk Loading Semantic Data Using a Staging Table</a>.</p>
<p>This is the fastest option for loading large amounts of data; however, it cannot handle triples containing object values with more than 4000 bytes.</p>
</li>
<li>
<p>Batch load using a Java client interface to load or append data from an N-Triple format file into the semantic data store (see <a href="rdf-overview.htm#GUID-1E972D71-0BBE-459E-8075-538ABE4F5911">Batch Loading N-Triple Format Semantic Data Using the Java API</a>).</p>
<p>This option is slower than bulk loading, but it handles triples containing object values with more than 4000 bytes. However, this option does not handle named graphs.</p>
</li>
<li>
<p>Load into the application table using SQL INSERT statements that call the SDO_RDF_TRIPLE_S constructor, which results in the corresponding RDF triple, possibly including a graph name, to be inserted into the semantic data store, as explained in <a href="rdf-overview.htm#GUID-1C7FBA78-BCDC-4E16-A139-2CC3E3AB9CE4">Loading Semantic Data Using INSERT Statements</a>.</p>
<p>This option is convenient for loading small amounts of data.</p>
</li>
</ul>
<p>To export semantic data, that is, to retrieve semantic data from Oracle Database where the results are in N-Triple or N-Quad format that can be stored in a staging table, use the SQL queries described in <a href="rdf-overview.htm#GUID-84666DFA-3509-440A-B85E-1C87DD1E638E">Exporting Semantic Data</a>.</p>
<div class="infobox-note" id="GUID-65045BFA-D0FE-4720-BF68-2C45765C74E9__GUID-1F44B674-7E40-4060-8079-ED57D8239789">
<p class="notep1">Note:</p>
<p>Effective with Oracle Database Release 12.1, you can export and import a semantic network using the full database export and import features of the Oracle Data Pump utility, as explained in <a href="rdf-overview.htm#GUID-BA4A550E-0C49-4D65-8E24-A64D9A044BFA">Exporting or Importing a Semantic Network Using Oracle Data Pump</a>.</p>
</div>
</div>
<a id="RDFRM597"></a>
<div class="props_rev_3"><a id="GUID-93BBAF2A-D906-4172-8315-4E0184FE6ABB"></a>
<h3 id="RDFRM-GUID-93BBAF2A-D906-4172-8315-4E0184FE6ABB" class="sect3"><span class="enumeration_section">1.7.1</span> Bulk Loading Semantic Data Using a Staging Table</h3>
<div>
<p>You can load semantic data (and optionally associated non-semantic data) in bulk using a staging table. Call the <a href="sem-apis-ref.htm#GUID-B2E32299-0B8F-457D-8DF9-C46E794DE869">SEM_APIS.LOAD_INTO_STAGING_TABLE</a> procedure (described in <a href="sem-apis-ref.htm#GUID-F42AB976-445A-4DCD-974C-3B9ED810E3D5">SEM_APIS Package Subprograms</a>) to load the data, and you can have during the load operation to check for syntax correctness. Then, you can call the <a href="sem-apis-ref.htm#GUID-AB6697BF-C840-4F48-8C81-FACB3CA54B1A">SEM_APIS.BULK_LOAD_FROM_STAGING_TABLE</a> procedure to load the data into the semantic store from the staging table. (If the data was not parsed during the load operation into the staging table, you must specify the <code class="codeph">PARSE</code> keyword in the <code class="codeph">flags</code> parameter when you call the <a href="sem-apis-ref.htm#GUID-AB6697BF-C840-4F48-8C81-FACB3CA54B1A">SEM_APIS.BULK_LOAD_FROM_STAGING_TABLE</a> procedure.)</p>
<p>The following example shows the format for the staging table, including all required columns and the required names for these columns, plus the optional RDF$STC_graph column which must be included if one or more of the RDF triples to be loaded include a graph name:</p>
<pre dir="ltr">CREATE TABLE stage_table (
                     RDF$STC_sub varchar2(4000) not null,
                     RDF$STC_pred varchar2(4000) not null,
                     RDF$STC_obj varchar2(4000) not null,
                     RDF$STC_graph varchar2(4000)
);
</pre>
<p>If you also want to load non-semantic data, specify additional columns for the non-semantic data in the CREATE TABLE statement. The non-semantic column names must be different from the names of the required columns. The following example creates the staging table with two additional columns (SOURCE and ID) for non-semantic attributes.</p>
<pre dir="ltr">CREATE TABLE stage_table_with_extra_cols (
                     source VARCHAR2(4000),
                     id NUMBER,
                     RDF$STC_sub varchar2(4000) not null,
                     RDF$STC_pred varchar2(4000) not null,
                     RDF$STC_obj varchar2(4000) not null,
                     RDF$STC_graph varchar2(4000)
);
</pre>
<div class="infobox-note" id="GUID-93BBAF2A-D906-4172-8315-4E0184FE6ABB__GUID-5210A973-FFE5-440E-B811-68246DB51412">
<p class="notep1">Note:</p>
<p>For either form of the CREATE TABLE statement, you may want to add the COMPRESS clause to use table compression, which will reduce the disk space requirements and may improve bulk-load performance.</p>
</div>
<p>Both the invoker and the MDSYS user must have the following privileges: SELECT privilege on the staging table, and INSERT privilege on the application table.</p>
<p>See also the following:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="rdf-overview.htm#GUID-FECA680B-69DD-4093-9AA6-F03B2320109E">Loading the Staging Table</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-3EF64EB7-6847-4D8B-862E-E38FBD2528AA">Recording Event Traces During Bulk Loading</a></p>
</li>
</ul>
</div>
<a id="RDFRM202"></a>
<div class="props_rev_3"><a id="GUID-FECA680B-69DD-4093-9AA6-F03B2320109E"></a>
<h4 id="RDFRM-GUID-FECA680B-69DD-4093-9AA6-F03B2320109E" class="sect4"><span class="enumeration_section">1.7.1.1</span> Loading the Staging Table</h4>
<div>
<p>You can load semantic data into the staging table, as a preparation for loading it into the semantic store, in several ways. Some of the common ways are the following:</p>
<ul style="list-style-type: disc;">
<li>
<p>Using Oracle SQL*Loader to load the staging table, as described in <a href="rdf-overview.htm#GUID-81D86DA9-B0E6-4A9E-A88A-D89934C13275">Loading N-Triple Format Data into a Staging Table Using SQL*Loader</a></p>
</li>
<li>
<p>Using an external table to load the staging table, as described in <a href="rdf-overview.htm#GUID-0D35BEBE-68C6-4A2F-9E07-5D223EBD6419">Loading N-Quad Format Data into a Staging Table Using an External Table</a></p>
</li>
</ul>
</div>
<a id="RDFRM203"></a>
<div class="props_rev_3"><a id="GUID-81D86DA9-B0E6-4A9E-A88A-D89934C13275"></a>
<h5 id="RDFRM-GUID-81D86DA9-B0E6-4A9E-A88A-D89934C13275" class="sect5"><span class="enumeration_section">1.7.1.1.1</span> Loading N-Triple Format Data into a Staging Table Using SQL*Loader</h5>
<div>
<p>You can use the SQL*Loader utility to parse and load semantic data into a staging table. If you installed the demo files from the Oracle Database Examples media (see <a class="olink EXMPL" target="_blank" href="../EXMPL/toc.htm"><span class="italic">Oracle Database Examples Installation Guide</span></a>), a sample control file is available at <code class="codeph">$ORACLE_HOME/md/demo/network/rdf_demos/bulkload.ctl</code>. You can modify and use this file if the input data is in N-Triple format.</p>
<p>Objects longer than 4000 bytes cannot be loaded. If you use the sample SQL*Loader control file, triples (rows) containing such long values will be automatically rejected and stored in a SQL*Loader &#34;bad&#34; file. However, you can load these rejected rows by inserting them into the application table using SQL INSERT statements (see <a href="rdf-overview.htm#GUID-1C7FBA78-BCDC-4E16-A139-2CC3E3AB9CE4">Loading Semantic Data Using INSERT Statements</a>).</p>
</div>
</div>
<a id="RDFRM205"></a><a id="RDFRM204"></a>
<div class="props_rev_3"><a id="GUID-0D35BEBE-68C6-4A2F-9E07-5D223EBD6419"></a>
<h5 id="RDFRM-GUID-0D35BEBE-68C6-4A2F-9E07-5D223EBD6419" class="sect5"><span class="enumeration_section">1.7.1.1.2</span> Loading N-Quad Format Data into a Staging Table Using an External Table</h5>
<div>
<div class="section">
<p>You can use an Oracle external table to load N-Quad format data (extended triple having four components) into a staging table, as follows:</p>
</div>
<!-- class="section" -->
<ol>
<li><span>Call the <a href="sem-apis-ref.htm#GUID-A0CE8736-0EBD-45D1-A099-C3F851D37EB8">SEM_APIS.CREATE_SOURCE_EXTERNAL_TABLE</a> procedure to create an external table, and then use the SQL STATEMENT ALTER TABLE to alter the external table to include the relevant input file name or names. You must have READ and WRITE privileges for the directory object associated with folder containing the input file or files.</span></li>
<li><span>After you create the external table, grant the MDSYS user SELECT and INSERT privileges on the table.</span></li>
<li><span>Call the <a href="sem-apis-ref.htm#GUID-B2E32299-0B8F-457D-8DF9-C46E794DE869">SEM_APIS.LOAD_INTO_STAGING_TABLE</a> procedure to populate the staging table.</span></li>
<li><span>After the loading is finished, issue a COMMIT statement to complete the transaction.</span></li>
</ol>
<div class="example" id="GUID-0D35BEBE-68C6-4A2F-9E07-5D223EBD6419__CIHFFBHH">
<p class="titleinexample">Example 1-82 Using an External Table to Load a Staging Table</p>
<pre dir="ltr">-- Create a source external table (note: table names are case sensitive)
BEGIN
  sem_apis.create_source_external_table(
    source_table    =&gt; &#39;stage_table_source&#39;
   ,def_directory   =&gt; &#39;DATA_DIR&#39;
   ,bad_file        =&gt; &#39;CLOBrows.bad&#39;
   );
END;
/
grant SELECT on &#34;stage_table_source&#34; to MDSYS;
 
-- Use ALTER TABLE to target the appropriate file(s)
alter table &#34;stage_table_source&#34; location (&#39;demo_datafile.nt&#39;);
 
-- Load the staging table (note: table names are case sensitive)
BEGIN
  sem_apis.load_into_staging_table(
    staging_table =&gt; &#39;STAGE_TABLE&#39;
   ,source_table  =&gt; &#39;stage_table_source&#39;
   ,input_format  =&gt; &#39;N-QUAD&#39;);
END;
/
</pre></div>
<!-- class="example" -->
<div class="section">
<p>Rows where the objects and graph URIs (combined) are longer than 4000 bytes will be rejected and stored in a &#34;bad&#34; file. However, you can load these rejected rows by inserting them into the application table using SQL INSERT statements (see <a href="rdf-overview.htm#GUID-1C7FBA78-BCDC-4E16-A139-2CC3E3AB9CE4">Loading Semantic Data Using INSERT Statements</a>).</p>
<p><a href="rdf-overview.htm#GUID-0D35BEBE-68C6-4A2F-9E07-5D223EBD6419__CIHFFBHH">Example 1-82</a> shows the use of an external table to load a staging table.</p>
</div>
<!-- class="section" --></div>
</div>
</div>
<a id="RDFRM99904"></a>
<div class="props_rev_3"><a id="GUID-3EF64EB7-6847-4D8B-862E-E38FBD2528AA"></a>
<h4 id="RDFRM-GUID-3EF64EB7-6847-4D8B-862E-E38FBD2528AA" class="sect4"><span class="enumeration_section">1.7.1.2</span> Recording Event Traces During Bulk Loading</h4>
<div>
<p>If a table named RDF$ET_TAB exists in the invoker&#39;s schema and if the MDSYS user has been granted the INSERT and UPDATE privileges on this table, event traces for some of the tasks performed during executions of the <a href="sem-apis-ref.htm#GUID-AB6697BF-C840-4F48-8C81-FACB3CA54B1A">SEM_APIS.BULK_LOAD_FROM_STAGING_TABLE</a> procedure will be added to the table. You may find the content of this table useful if you ever need to report any problems in bulk load. The RDF$ET_TAB table must be created as follows:</p>
<pre dir="ltr">CREATE TABLE RDF$ET_TAB (
  proc_sid VARCHAR2(30), 
  proc_sig VARCHAR2(200),
  event_name varchar2(200),
  start_time timestamp,
  end_time timestamp,
  start_comment varchar2(1000) DEFAULT NULL,
  end_comment varchar2(1000) DEFAULT NULL
);
GRANT INSERT, UPDATE on RDF$ET_TAB to MDSYS;
</pre></div>
</div>
</div>
<a id="RDFRM598"></a>
<div class="props_rev_3"><a id="GUID-1E972D71-0BBE-459E-8075-538ABE4F5911"></a>
<h3 id="RDFRM-GUID-1E972D71-0BBE-459E-8075-538ABE4F5911" class="sect3"><span class="enumeration_section">1.7.2</span> Batch Loading N-Triple Format Semantic Data Using the Java API</h3>
<div>
<div class="infobox-note" id="GUID-1E972D71-0BBE-459E-8075-538ABE4F5911__GUID-545E4208-A024-4597-9D66-54D61FB0A92C">
<p class="notep1">Note:</p>
<p>The Java class <code class="codeph">oracle.spatial.rdf.client.BatchLoader</code> described in this section has been deprecated, and it does not support loading of N-Quad data.</p>
<p>You are instead encouraged to use the bulk loading capabilities of the RDF Semantic Graph support for Apache Jena, as described in <a href="rdf-jena.htm#GUID-1109AB37-AFD5-4172-B7E5-6F279782A22E">Bulk Loading Using RDF Semantic Graph Support for Apache Jena</a>.</p>
</div>
<p>You can perform a batch (bulk) load operation for N-Triple format semantic data using the Java class <code class="codeph">oracle.spatial.rdf.client.BatchLoader</code>, which is packaged in <span class="italic"><code class="codeph">&lt;ORACLE_HOME&gt;</code></span><code class="codeph">/md/jlib/sdordf.jar</code>. Before performing a batch load operation, ensure that the following are true:</p>
<ul style="list-style-type: disc;">
<li>
<p>The semantic data is in N-Triple format. (Several tools are available for converting RDF/XML to N-Triple format; see the Oracle Technology Network or perform a Web search for information about RDF/XML to N-Triple conversion.)</p>
</li>
<li>
<p>Oracle Database Release 11 or later, with Oracle Spatial and Graph, is installed, and partitioning is enabled.</p>
</li>
<li>
<p>A semantic technologies network, an application table, and its corresponding semantic model have been created in the database.</p>
</li>
<li>
<p>The CLASSPATH definition includes <code class="codeph">ojdbc6.jar</code>.</p>
</li>
<li>
<p>You are using JDK version 1.5 or later. (You can use the Java version packaged under <span class="italic"><code class="codeph">&lt;ORACLE_HOME&gt;</code></span><code class="codeph">/jdk/bin</code>.)</p>
</li>
</ul>
<p>To run the <code class="codeph">oracle.spatial.rdf.client.BatchLoader</code> class, use a command (on a single command line) in the following general form (replacing the sample example database connection information with your own connection information).</p>
<ul style="list-style-type: disc;">
<li>
<p>Linux systems:</p>
<pre dir="ltr">java -Ddb.user=scott -Ddb.password=<span class="italic">password </span>-Ddb.host=127.0.0.1 -Ddb.port=1522 -Ddb.sid=orcl -classpath ${ORACLE_HOME}/md/jlib/sdordf.jar:${ORACLE_HOME}/jdbc/lib/ojdbc6.jar oracle.spatial.rdf.client.BatchLoader &lt;N-TripleFile&gt; &lt;tablename&gt; &lt;tablespaceName&gt; &lt;modelName&gt;
</pre></li>
<li>
<p>Windows systems:</p>
<pre dir="ltr">java -Ddb.user=scott -Ddb.password=<span class="italic">password</span> -Ddb.host=127.0.0.1 -Ddb.port=1522 -Ddb.sid=orcl -classpath %ORACLE_HOME%\md\jlib\sdordf.jar;%ORACLE_HOME%\jdbc\lib\ojdbc6.jar oracle.spatial.rdf.client.BatchLoader &lt;N-TripleFile&gt; &lt;tablename&gt; &lt;tablespaceName&gt; &lt;modelName&gt;
</pre></li>
</ul>
<p>The values for <code class="codeph">-Ddb.user</code> and <code class="codeph">-Ddb.password</code> must correspond either to the owner of the model <span class="italic"><code class="codeph">&lt;modelName&gt;</code></span> or to a DBA user.</p>
<p>By default, <code class="codeph">BatchLoader</code> assumes there are at least two columns, a column named ID of type NUMBER and a column named TRIPLE of type SDO_RDF_TRIPLE_S, in the user&#39;s application table. However, you can override the default names by using the JVM properties <code class="codeph">-DidColumn=&lt;idColumnName&gt;</code> and <code class="codeph">-DtripleColumn=&lt;tripleColumnName&gt;</code>. The ID column is not required; and to prevent <code class="codeph">BatchLoader</code> from generating a sequence-like identifier in the ID column for each triple inserted, specify the JVM property <code class="codeph">-DjustTriple=true</code>.</p>
<p>If the application table is not empty and if you want the batch loading to be done in append mode, specify an additional JVM property: <code class="codeph">-Dappend=true</code>. Moreover, in append mode you might want to choose a different starting value for ID column in user&#39;s application table, and to accomplish this you can add the JVM property <code class="codeph">-DstartID=&lt;startingIntegerValue&gt;</code> to the command line. By default, the ID column starts at 1 and is increased sequentially as new triples are inserted into the application table.</p>
<p>To skip the first <span class="italic">n</span> triples in <code class="codeph">&lt;N-TripleFile&gt;</code>, add the JVM property <code class="codeph">-Dskip=&lt;numberOfTriplesSkipped&gt;</code> to the command line.</p>
<p>To load an N-Triple file with a character set different from the default, specify the JVM property <code class="codeph">-Dcharset=&lt;charsetName&gt;</code>. For example, <code class="codeph">-Dcharset=&#34;UTF-8&#34;</code> will recognize UTF-8 encoding. However, for UTF-8 characters to be stored properly in the N-Triple file, the Oracle database must be configured to use a corresponding universal character set, such as AL32UTF8.</p>
<p>The <code class="codeph">BatchLoader</code> class supports loading an N-Triple file in compressed format. If the <code class="codeph">&lt;N-TripleFile&gt;</code> has a file extension of .zip or .jar, the file will be uncompressed and loaded at the same time.</p>
<div class="infoboxnotealso" id="GUID-1E972D71-0BBE-459E-8075-538ABE4F5911__GUID-D63BA852-423A-42FF-8DCE-0648DDA9E838">
<p class="notep1">See Also:</p>
<p><a href="rdf-jena.htm#GUID-1109AB37-AFD5-4172-B7E5-6F279782A22E">Bulk Loading Using RDF Semantic Graph Support for Apache Jena</a></p>
</div>
</div>
</div>
<a id="RDFRM600"></a>
<div class="props_rev_3"><a id="GUID-1C7FBA78-BCDC-4E16-A139-2CC3E3AB9CE4"></a>
<h3 id="RDFRM-GUID-1C7FBA78-BCDC-4E16-A139-2CC3E3AB9CE4" class="sect3"><span class="enumeration_section">1.7.3</span> Loading Semantic Data Using INSERT Statements</h3>
<div>
<div class="section">
<p>To load semantic data using INSERT statements, the data should be encoded using <code class="codeph">&lt; &gt;</code> (angle brackets) for URIs, <code class="codeph">_:</code> (underscore colon) for blank nodes, and <code class="codeph">&#34; &#34;</code> (quotation marks) for literals. Spaces are not allowed in URIs or blank nodes. Use the SDO_RDF_TRIPLE_S constructor to insert the data, as described in <a href="rdf-overview.htm#GUID-F1ED66D2-F2B7-40C6-899A-B67003BBD56D">Constructors for Inserting Triples</a>. You must have INSERT privilege on the application table.</p>
<div class="infobox-note" id="GUID-1C7FBA78-BCDC-4E16-A139-2CC3E3AB9CE4__GUID-981035AE-86D2-44DB-9699-EC7BF5AC6840">
<p class="notep1">Note:</p>
<p>If URIs are not encoded with <code class="codeph">&lt; &gt;</code> and literals with <code class="codeph">&#34; &#34;</code>, statements will still be processed. However, the statements will take longer to load, since they will have to be further processed to determine their VALUE_TYPE values.</p>
</div>
<p>The following example includes statements with URIs, a blank node, a literal, a literal with a language tag, and a typed literal:</p>
<pre dir="ltr">INSERT INTO nsu_data VALUES (SDO_RDF_TRIPLE_S(&#39;nsu&#39;, &#39;&lt;http://nature.example.com/nsu/rss.rdf&gt;&#39;,
  &#39;&lt;http://purl.org/rss/1.0/title&gt;&#39;, &#39;&#34;Nature&#39;&#39;s Science Update&#34;&#39;));
INSERT INTO nsu_data VALUES (SDO_RDF_TRIPLE_S(&#39;nsu&#39;, &#39;_:BNSEQN1001A&#39;,
  &#39;&lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt;&#39;, 
  &#39;&lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#Seq&gt;&#39;));
INSERT INTO nsu_data VALUES (SDO_RDF_TRIPLE_S(&#39;nsu&#39;,
  &#39;&lt;http://nature.example.com/cgi-taf/dynapage.taf?file=/nature/journal/v428/n6978/index.html&gt;&#39;,
  &#39;&lt;http://purl.org/dc/elements/1.1/language&gt;&#39;, &#39;&#34;English&#34;@en-GB&#39;));
INSERT INTO nature VALUES (SDO_RDF_TRIPLE_S(&#39;nsu&#39;, &#39;&lt;http://dx.doi.org/10.1038/428004b&gt;&#39;,
  &#39;&lt;http://purl.org/dc/elements/1.1/date&gt;&#39;, &#39;&#34;2004-03-04&#34;^^xsd:date&#39;));
</pre>
<p>To convert semantic XML data to INSERT statements, you can edit the sample <code class="codeph">rss2insert.xsl</code> XSLT file to convert all the features in the semantic data XML file. The blank node constructor is used to insert statements with blank nodes. After editing the XSLT, download the Xalan XSLT processor (<a href="http://xml.apache.org/xalan-j/" target="_blank"><code class="codeph">http://xml.apache.org/xalan-j/</code></a>) and follow the installation instructions. To convert a semantic data XML file to INSERT statements using your edited version of the <code class="codeph">rss2insert.xsl</code> file, use a command in the following format:</p>
<pre dir="ltr">java org.apache.xalan.xslt.Process &ndash;in <span class="italic">input</span>.rdf -xsl rss2insert.xsl &ndash;out <span class="italic">output</span>.nt
</pre></div>
<!-- class="section" --></div>
<a id="RDFRM206"></a>
<div class="props_rev_3"><a id="GUID-8D46CB97-3CC7-493B-9250-28BFAFDB8269"></a>
<h4 id="RDFRM-GUID-8D46CB97-3CC7-493B-9250-28BFAFDB8269" class="sect4"><span class="enumeration_section">1.7.3.1</span> Loading Data into Named Graphs Using INSERT Statements</h4>
<div>
<div class="section">
<p>To load an RDF triple with a non-null graph name using an INSERT statement, you must append the graph name, enclosed within angle brackets (<code class="codeph">&lt; &gt;</code>), after the model name and colon (<code class="codeph">:</code>) separator character, as shown in the following example:</p>
<pre dir="ltr">INSERT INTO articles_rdf_data VALUES (99,
  SDO_RDF_TRIPLE_S (&#39;<span class="bold">articles:&lt;http://examples.com/ns#Graph1&gt;</span>&#39;,
    &#39;&lt;http://nature.example.com/Article101&gt;&#39;,
    &#39;&lt;http://purl.org/dc/elements/1.1/creator&gt;&#39;,
    &#39;&#34;John Smith&#34;&#39;));
</pre></div>
<!-- class="section" --></div>
</div>
</div>
<a id="RDFRM601"></a>
<div class="props_rev_3"><a id="GUID-84666DFA-3509-440A-B85E-1C87DD1E638E"></a>
<h3 id="RDFRM-GUID-84666DFA-3509-440A-B85E-1C87DD1E638E" class="sect3"><span class="enumeration_section">1.7.4</span> Exporting Semantic Data</h3>
<div>
<p>This section contains the following topics related to exporting semantic data, that is, retrieving semantic data from Oracle Database where the results are in N-Triple or N-Quad format that can be stored in a staging table.</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="rdf-overview.htm#GUID-155E5498-F3B6-4E92-954A-AC0AD43BD5F1">Retrieving Semantic Data from an Application Table</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-0182D08F-6CFA-4436-A180-DE480690BD13">Retrieving Semantic Data from an RDF Model</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-79644A19-9A51-42B2-B5AC-6EDDD099BE92">Removing Model and Graph Information from Retrieved Blank Node Identifiers</a></p>
</li>
</ul>
</div>
<a id="RDFRM446"></a><a id="RDFRM445"></a>
<div class="props_rev_3"><a id="GUID-155E5498-F3B6-4E92-954A-AC0AD43BD5F1"></a>
<h4 id="RDFRM-GUID-155E5498-F3B6-4E92-954A-AC0AD43BD5F1" class="sect4"><span class="enumeration_section">1.7.4.1</span> Retrieving Semantic Data from an Application Table</h4>
<div>
<div class="section">
<p>Semantic data can be retrieved from an application table using the member functions of SDO_RDF_TRIPLE_S, as shown in <a href="rdf-overview.htm#GUID-155E5498-F3B6-4E92-954A-AC0AD43BD5F1__CIHIICAA">Example 1-83</a>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-155E5498-F3B6-4E92-954A-AC0AD43BD5F1__CIHIICAA">
<p class="titleinexample">Example 1-83 Retrieving Semantic Data from an Application Table</p>
<pre dir="ltr">--
-- Retrieves model-graph, subject, predicate, and object
--
SQL&gt; SELECT a.triple.GET_MODEL() AS model_graph, a.triple.GET_SUBJECT() AS sub, a.triple.GET_PROPERTY() pred, a.triple.GET_OBJECT() obj FROM articles_rdf_data a where id in (2,99);
 
MODEL_GRAPH
------------------------------------------------------------
SUB
------------------------------------------------------------
PRED
------------------------------------------------------------
OBJ
------------------------------------------------------------
ARTICLES
&lt;http://nature.example.com/Article1&gt;
&lt;http://purl.org/dc/elements/1.1/creator&gt;
&#34;Jane Smith&#34;
 
ARTICLES:&lt;http://examples.com/ns#Graph1&gt;
&lt;http://nature.example.com/Article101&gt;
&lt;http://purl.org/dc/elements/1.1/creator&gt;
&#34;John Smith&#34;
 
--
-- Retrieves graph, subject, predicate, and object
--
SQL&gt; <span>select (case sep_pos when 0 then NULL else substr(model_graph,sep_pos+1) end) graph, sub, pred, obj from (SELECT instr(a.triple.GET_MODEL(),&#39;:&#39;) AS sep_pos, a.triple.GET_MODEL() AS model_graph, a.triple.GET_SUBJECT() AS sub, a.triple.GET_PROPERTY() pred, a.triple.GET_OBJECT() obj FROM articles_rdf_data a where id in (2,99));</span>
 
GRAPH
--------------------------------------------------------------------------------
SUB
------------------------------------------------------------
PRED
------------------------------------------------------------
OBJ
------------------------------------------------------------
 
&lt;http://nature.example.com/Article1&gt;
&lt;http://purl.org/dc/elements/1.1/creator&gt;
&#34;Jane Smith&#34;
 
&lt;http://examples.com/ns#Graph1&gt;
&lt;http://nature.example.com/Article101&gt;
&lt;http://purl.org/dc/elements/1.1/creator&gt;
&#34;John Smith&#34;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM448"></a><a id="RDFRM447"></a>
<div class="props_rev_3"><a id="GUID-0182D08F-6CFA-4436-A180-DE480690BD13"></a>
<h4 id="RDFRM-GUID-0182D08F-6CFA-4436-A180-DE480690BD13" class="sect4"><span class="enumeration_section">1.7.4.2</span> Retrieving Semantic Data from an RDF Model</h4>
<div>
<div class="section">
<p>Semantic data can be retrieved from an RDF model using the SEM_MATCH table function (described in <a href="rdf-overview.htm#GUID-71464CC4-1C03-48A4-9A4C-0E671FF8F16E">Using the SEM_MATCH Table Function to Query Semantic Data</a>), as shown in <a href="rdf-overview.htm#GUID-0182D08F-6CFA-4436-A180-DE480690BD13__CIHEIAFA">Example 1-84</a>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-0182D08F-6CFA-4436-A180-DE480690BD13__CIHEIAFA">
<p class="titleinexample">Example 1-84 Retrieving Semantic Data from an RDF Model</p>
<pre dir="ltr">--
-- Retrieves graph, subject, predicate, and object
--
SQL&gt; select to_char(g$rdfterm) graph, to_char(x$rdfterm) sub, to_char(p$rdfterm) pred, y$rdfterm obj from table(sem_match(&#39;Select ?g ?x ?p ?y FROM NAMED &lt;http://examples.com/ns#Graph1&gt; {GRAPH ?g {?x ?p ?y}}&#39;,sem_models(&#39;articles&#39;),null,null,null,null,&#39; GRAPH_MATCH_UNNAMED=T PLUS_RDFT=T &#39;));
 
GRAPH
------------------------------------------------------------
SUB
------------------------------------------------------------
PRED
------------------------------------------------------------
OBJ
---------------------------------------------------------------------------
&lt;http://examples.com/ns#Graph1&gt;
_:m99g3C687474703A2F2F6578616D706C65732E636F6D2F6E73234772617068313Egmb2
&lt;http://purl.org/dc/elements/1.1/creator&gt;
_:m99g3C687474703A2F2F6578616D706C65732E636F6D2F6E73234772617068313Egmb1
 
&lt;http://examples.com/ns#Graph1&gt;
&lt;http://nature.example.com/Article102&gt;
&lt;http://purl.org/dc/elements/1.1/creator&gt;
_:m99g3C687474703A2F2F6578616D706C65732E636F6D2F6E73234772617068313Egmb1
 
&lt;http://examples.com/ns#Graph1&gt;
&lt;http://nature.example.com/Article101&gt;
&lt;http://purl.org/dc/elements/1.1/creator&gt;
&#34;John Smith&#34;
 
&lt;http://nature.example.com/Article1&gt;
&lt;http://purl.org/dc/elements/1.1/creator&gt;
&#34;Jane Smith&#34;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM450"></a><a id="RDFRM451"></a><a id="RDFRM449"></a>
<div class="props_rev_3"><a id="GUID-79644A19-9A51-42B2-B5AC-6EDDD099BE92"></a>
<h4 id="RDFRM-GUID-79644A19-9A51-42B2-B5AC-6EDDD099BE92" class="sect4"><span class="enumeration_section">1.7.4.3</span> Removing Model and Graph Information from Retrieved Blank Node Identifiers</h4>
<div>
<div class="section">
<p>Blank node identifiers retrieved during the retrieval of semantic data can be trimmed to remove the occurrence of model and graph information using the transformations shown in the code excerpt in <a href="rdf-overview.htm#GUID-79644A19-9A51-42B2-B5AC-6EDDD099BE92__CIHIJEDB">Example 1-85</a>, which are applicable to VARCHAR2 (for example, subject component) and CLOB (for example, object component) data, respectively.</p>
<p><a href="rdf-overview.htm#GUID-79644A19-9A51-42B2-B5AC-6EDDD099BE92__CIHEHEII">Example 1-86</a> shows the results obtained after using these two transformations in <a href="rdf-overview.htm#GUID-79644A19-9A51-42B2-B5AC-6EDDD099BE92__CIHIJEDB">Example 1-85</a> on the <code class="codeph">sub</code> and <code class="codeph">obj</code> columns, respectively, using the semantic data retrieval query described in <a href="rdf-overview.htm#GUID-0182D08F-6CFA-4436-A180-DE480690BD13">Retrieving Semantic Data from an RDF Model</a>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-79644A19-9A51-42B2-B5AC-6EDDD099BE92__CIHIJEDB">
<p class="titleinexample">Example 1-85 Retrieving Semantic Data from an Application Table</p>
<pre dir="ltr">--
-- Transformation on column &#34;sub VARCHAR2&#34; 
-- holding blank node identifier values
--
Select (case substr(sub,1,2) when &#39;_:&#39; then &#39;_:&#39; || substr(sub,instr(sub,&#39;m&#39;,1,2)+1) else sub end) from &hellip;
--
-- Transformation on column &#34;obj CLOB&#34; 
-- holding blank node identifier values
--
Select (case dbms_lob.substr(obj,2,1) when &#39;_:&#39; then to_clob(&#39;_:&#39; || substr(obj,instr(obj,&#39;m&#39;,1,2)+1)) else obj end) from &hellip;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-79644A19-9A51-42B2-B5AC-6EDDD099BE92__CIHEHEII">
<p class="titleinexample">Example 1-86 Results from Applying Transformations from <span><a href="rdf-overview.htm#GUID-79644A19-9A51-42B2-B5AC-6EDDD099BE92__CIHIJEDB">Example 1-85</a></span></p>
<pre dir="ltr">--
-- Results obtained by applying transformations on the sub and pred cols
-- 
SQL&gt; select (case substr(sub,1,2) when &#39;_:&#39; then &#39;_:&#39; || substr(sub,instr(sub,&#39;m&#39;,1,2)+1) else sub end) sub, pred, (case dbms_lob.substr(obj,2,1) when &#39;_:&#39; then to_clob(&#39;_:&#39; || substr(obj,instr(obj,&#39;m&#39;,1,2)+1)) else obj end) obj from (select to_char(g$rdfterm) graph, to_char(x$rdfterm) sub, to_char(p$rdfterm) pred, y$rdfterm obj from table(sem_match(&#39;Select ?g ?x ?p ?y FROM NAMED &lt;http://examples.com/ns#Graph1&gt; {GRAPH ?g {?x ?p ?y}}&#39;,sem_models(&#39;articles&#39;),null,null,null,null,&#39; GRAPH_MATCH_UNNAMED=T PLUS_RDFT=T &#39;)));
 
SUB
------------------------------------------------------------
PRED
------------------------------------------------------------
OBJ
---------------------------------------------------------------------------
_:b2
&lt;http://purl.org/dc/elements/1.1/creator&gt;
_:b1
 
&lt;http://nature.example.com/Article102&gt;
&lt;http://purl.org/dc/elements/1.1/creator&gt;
_:b1
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="RDFRM734"></a>
<div class="props_rev_3"><a id="GUID-BA4A550E-0C49-4D65-8E24-A64D9A044BFA"></a>
<h3 id="RDFRM-GUID-BA4A550E-0C49-4D65-8E24-A64D9A044BFA" class="sect3"><span class="enumeration_section">1.7.5</span> Exporting or Importing a Semantic Network Using Oracle Data Pump</h3>
<div>
<p>Effective with Oracle Database Release 12.1, you can export and import a semantic network using the full database export and import features of the Oracle Data Pump utility. The network is moved as part of the full database export or import, where the whole database is represented in an Oracle dump (<code class="codeph">.dmp</code>) file.</p>
<p>The following usage notes apply to using Data Pump to export or import a semantic network:</p>
<ul style="list-style-type: disc;">
<li>
<p>The target database for an import must have the RDF Semantic Graph software installed, and there cannot be a pre-existing semantic network.</p>
</li>
<li>
<p>Semantic networks using fine-grained access control (triple-level or resource-level OLS or VPD) cannot be exported or imported.</p>
</li>
<li>
<p>Version-enabled semantic networks using Workspace Manager cannot be exported or imported.</p>
</li>
<li>
<p>Semantic document indexes for SEM_CONTAINS (MDSYS.SEMCONTEXT index type) and semantic indexes for SEM_RELATED (MDSYS.SEM_INDEXTYPE index type) must be dropped before an export and re-created after an import.</p>
</li>
<li>
<p>Only default privileges for semantic network objects (those that exist just after object creation) are preserved during export and import. For example, if user A creates semantic model <code class="codeph">M</code> and grants SELECT on MDSYS.RDFM_M to user B, only user A&#39;s SELECT privilege on MDSYS.RDFM_M will be present after the import. User B will not have SELECT privilege on MDSYS.RDFM_M after the import. Instead, user B&#39;s SELECT privilege will have to be granted again.</p>
</li>
<li>
<p>The Data Pump command line option <code class="codeph">transform=oid:n</code> must be used when exporting or importing semantic network data. For example, use a command in the following format:</p>
<pre dir="ltr">impdp system/<span class="italic">&lt;password-for-system&gt;</span> directory=dpump_dir dumpfile=rdf.dmp full=YES version=12 transform=oid:n
</pre></li>
</ul>
<p>For Data Pump usage information and examples, see the relevant chapters in Part I of <a class="olink SUTIL2877" target="_blank" href="../SUTIL/GUID-501A9908-BCC5-434C-8853-9A6096766B5A.htm#SUTIL2877"><span class="italic">Oracle Database Utilities</span></a>.</p>
</div>
</div>
<div class="sect3"><a id="GUID-DC97A430-3C9C-4A7B-8034-2BEF6E1B3EBD"></a>
<h3 id="RDFRM-GUID-DC97A430-3C9C-4A7B-8034-2BEF6E1B3EBD" class="sect3"><span class="enumeration_section">1.7.6</span> Purging Unused Values</h3>
<div>
<p>Deletion of triples over time may lead to a subset of the values in the RDF_VALUE$ table becoming unused in any of the RDF triples or rules currently in the semantic network. If the count of such unused values becomes large and a significant portion of the RDF_VALUE$ table, you may want to purge the unused values using the <a href="sem-apis-ref.htm#GUID-158F5192-99D1-4791-ACBB-7F242216EA48">SEM_APIS.PURGE_UNUSED_VALUES</a> subprogram.</p>
<p>Before the purging, MDSYS must be granted SELECT privilege on application tables for all the RDF models. This can be done directly using the GRANT command or by using the <a href="sem-apis-ref.htm#GUID-D51C0668-072A-42DF-830F-D5CE7E8D9459">SEM_APIS.PRIVILEGE_ON_APP_TABLES</a> subprogram.</p>
<p>Event traces for tasks performed during the purge operation may be recorded into the RDF$ET_TAB table, if present in the invoker&#39;s schema, as described in <a href="rdf-overview.htm#GUID-3EF64EB7-6847-4D8B-862E-E38FBD2528AA">Recording Event Traces During Bulk Loading</a>.</p>
<p>The following example purges unused values from the RDF_VALUE$ table. The example does not consider named graphs or CLOBs. It also assumes that the data from the example in <a href="rdf-overview.htm#GUID-B403F8B8-F7C2-4253-8DB3-DD0D84DFBDCA">Example: Journal Article Information</a> has been loaded.</p>
<div class="example" id="GUID-DC97A430-3C9C-4A7B-8034-2BEF6E1B3EBD__CIHCADGC">
<p class="titleinexample">Example 1-87 Purging Unused Values</p>
<pre dir="ltr">-- Purging unused values
set numwidth 20

-- Create view to show the values actually used in the RDF model
CREATE VIEW values_used_in_model (value_id) as
  SELECT a.triple.rdf_s_id FROM articles_rdf_data a UNION
  SELECT a.triple.rdf_p_id FROM articles_rdf_data a UNION
  SELECT a.triple.rdf_c_id FROM articles_rdf_data a UNION
  SELECT a.triple.rdf_o_id FROM articles_rdf_data a;
 
View created.

-- Create views to show triples in the model
CREATE VIEW triples_in_app_table as
  SELECT a.triple.GET_SUBJECT() AS s, a.triple.GET_PROPERTY() AS p, a.triple.GET_OBJ_VALUE() AS o
    FROM articles_rdf_data a;
 
View created.

CREATE VIEW triples_in_rdf_model as
  SELECT s, p, o FROM TABLE ( SEM_MATCH(&#39;{?s ?p ?o}&#39;, SEM_MODELS(&#39;articles&#39;), null, null, null ));
 
View created.

--
-- Content before deletion
--

-- Values in mdsys.RDF_VALUE$
CREATE TABLE values_before_deletion as select value_id from mdsys.rdf_value$;
 
Table created.

-- Values used in the RDF model
CREATE TABLE used_values_before_deletion as
  SELECT * FROM values_used_in_model;
 
Table created.

-- Content of RDF model
CREATE TABLE atab_triples_before_deletion
  as select * from triples_in_app_table;
 
Table created.

CREATE TABLE model_triples_before_deletion
  as select * from triples_in_rdf_model;
 
Table created.

-- Delete some triples so that some of the values become unused
DELETE FROM articles_rdf_data a
   WHERE a.triple.GET_PROPERTY() = &#39;&lt;http://purl.org/dc/elements/1.1/title&gt;&#39;
     OR a.triple.GET_SUBJECT() = &#39;&lt;http://nature.example.com/Article1&gt;&#39;;
 
5 rows deleted.

-- Content of RDF model after deletion
CREATE TABLE atab_triples_after_deletion
  as select * from triples_in_app_table;
 
Table created.

CREATE TABLE model_triples_after_deletion
  as select * from triples_in_rdf_model;
 
Table created.

-- Values that became unused in the RDF model
SELECT * from used_values_before_deletion
  MINUS
  SELECT * FROM values_used_in_model;
 
VALUE_ID
--------------------
 1399113999628774496
 4597469165946334122
 6345024408674005890
 7299961478807817799
 7995347759607176041

-- RDF_VALUE$ content, however, is unchanged
SELECT value_id from values_before_deletion
  MINUS
  select value_id from mdsys.rdf_value$;
 
no rows selected

-- Now purge the values from RDF_VALUE$ (requires that MDSYS has
-- SELECT privilege on *all* the app tables in the semantic network)
EXECUTE sem_apis.privilege_on_app_tables;
 
PL/SQL procedure successfully completed.
 
EXECUTE sem_apis.purge_unused_values;
 
PL/SQL procedure successfully completed.

-- RDF_VALUE$ content is NOW changed due to the purge of unused values
SELECT value_id from values_before_deletion
  MINUS
  select value_id from mdsys.rdf_value$;
 
VALUE_ID
--------------------
 1399113999628774496
 4597469165946334122
 6345024408674005890
 7299961478807817799
 7995347759607176041

-- Content of RDF model after purge
CREATE TABLE atab_triples_after_purge
  as select * from triples_in_app_table;
 
Table created.

CREATE TABLE model_triples_after_purge
  as select * from triples_in_rdf_model;
 
Table created.

-- Compare triples present before purging of values and after purging
SELECT * from atab_triples_after_deletion
  MINUS
  SELECT * FROM atab_triples_after_purge;
 
no rows selected

SELECT * from model_triples_after_deletion
  MINUS
  SELECT * FROM model_triples_after_purge;
 
no rows selected
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="RDFRM99905"></a>
<div class="props_rev_3"><a id="GUID-159DBD08-E59E-4A16-8EA9-5B40EB964D12"></a>
<h2 id="RDFRM-GUID-159DBD08-E59E-4A16-8EA9-5B40EB964D12" class="sect2"><span class="enumeration_section">1.8</span> Using Semantic Network Indexes</h2>
<div>
<p>Semantic network indexes are nonunique B-tree indexes that you can add, alter, and drop for use with models and entailments in a semantic network. You can use such indexes to tune the performance of SEM_MATCH queries on the models and entailments in the network. As with any indexes, semantic network indexes enable index-based access that suits your query workload. This can lead to substantial performance benefits, such as in the following example scenarios:</p>
<ul style="list-style-type: disc;">
<li>
<p>If your graph pattern is <code class="codeph">&#39;{&lt;John&gt; ?p &lt;Mary&gt;}&#39;</code>, you may want to have a usable <code class="codeph">&#39;CSP</code>&#39; or <code class="codeph">&#39;SCP&#39;</code> index for the target model or models and on the corresponding entailment, if used in the query.</p>
</li>
<li>
<p>If your graph pattern is <code class="codeph">&#39;{?x &lt;talksTo&gt; ?y . ?z ?p ?y}&#39;</code>, you may want to have a usable semantic network index on the relevant model or models and entailment, with <code class="codeph">C</code> as the leading key (for example, <code class="codeph">&#39;C&#39;</code> or <code class="codeph">&#39;CPS&#39;</code>).</p>
</li>
</ul>
<p>However, using semantic network indexes can affect overall performance by increasing the time required for DML, load, and inference operations.</p>
<p>You can create and manage semantic network indexes using the following subprograms:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="sem-apis-ref.htm#GUID-8BA84977-E702-4077-9FB4-33512A04CFF2">SEM_APIS.ADD_SEM_INDEX</a></p>
</li>
<li>
<p><a href="sem-apis-ref.htm#GUID-071D8D4C-F13E-4FCB-8526-52E9D2D1B819">SEM_APIS.ALTER_SEM_INDEX_ON_MODEL</a></p>
</li>
<li>
<p><a href="sem-apis-ref.htm#GUID-1E3F54C4-8178-458C-8A38-528A6C8E814B">SEM_APIS.ALTER_SEM_INDEX_ON_ENTAILMENT</a></p>
</li>
<li>
<p><a href="sem-apis-ref.htm#GUID-4239B10E-6225-4411-B2D1-CE1402C11449">SEM_APIS.DROP_SEM_INDEX</a></p>
</li>
</ul>
<p>All of these subprograms have an <code class="codeph">index_code</code> parameter, which can contain any sequence of the following letters (without repetition): <code class="codeph">P</code>, <code class="codeph">C</code>, <code class="codeph">S</code>, <code class="codeph">G</code>, <code class="codeph">M</code>. These letters used in the index_code correspond to the following columns in the SEMM_* and SEMI_* views: P_VALUE_ID, CANON_END_NODE_ID, START_NODE_ID, G_ID, and MODEL_ID.</p>
<p>The <a href="sem-apis-ref.htm#GUID-8BA84977-E702-4077-9FB4-33512A04CFF2">SEM_APIS.ADD_SEM_INDEX</a> procedure creates a semantic network index that results in creation of a nonunique B-tree index in UNUSABLE status for each of the existing models and entailments. The name of the index is RDF_LNK_<span class="italic">&lt;index_code&gt;</span>_IDX and the index is owned by MDSYS. This operation is allowed only if the invoker has DBA role. The following example shows creation of the <code class="codeph">PSCGM</code> index with the following key: &lt;P_VALUE_ID, START_NODE_ID, CANON_END_NODE_ID, G_ID, MODEL_ID&gt;.</p>
<pre dir="ltr">EXECUTE SEM_APIS.ADD_SEM_INDEX(&#39;PSCGM&#39;);
</pre>
<p>After you create a semantic network index, each of the corresponding nonunique B-tree indexes is in the UNUSABLE status, because making it usable can cause significant time and resources to be used, and because subsequent index maintenance operations might involve performance costs that you do not want to incur. You can make a semantic network index usable or unusable for specific models or entailments that you own by calling the <a href="sem-apis-ref.htm#GUID-071D8D4C-F13E-4FCB-8526-52E9D2D1B819">SEM_APIS.ALTER_SEM_INDEX_ON_MODEL</a> and <a href="sem-apis-ref.htm#GUID-1E3F54C4-8178-458C-8A38-528A6C8E814B">SEM_APIS.ALTER_SEM_INDEX_ON_ENTAILMENT</a> procedures and specifying <code class="codeph">&#39;REBUILD&#39;</code> or <code class="codeph">&#39;UNUSABLE&#39;</code> as the <code class="codeph">command</code> parameter. Thus, you can experiment by making different semantic network indexes usable and unusable, and checking for any differences in performance. For example, the following statement makes the <code class="codeph">PSCGM</code> index usable for the <code class="codeph">FAMILY</code> model:</p>
<pre dir="ltr">EXECUTE SEM_APIS.ALTER_SEM_INDEX_ON_MODEL(&#39;FAMILY&#39;,&#39;PSCGM&#39;,&#39;REBUILD&#39;);
</pre>
<p>Also note the following:</p>
<ul style="list-style-type: disc;">
<li>
<p>Independent of any semantic network indexes that you create, when a semantic network is created, one of the indexes that is automatically created is an index that you can manage by referring to the <code class="codeph">index_code</code> as <code class="codeph">&#39;PSCGM&#39;</code> when you call the subprograms mentioned in this section.</p>
</li>
<li>
<p>When you create a new model or a new entailment, a new nonunique B-tree index is created for each of the semantic network indexes, and each such B-tree index is in the USABLE status.</p>
</li>
<li>
<p>Including the MODEL_ID column in a semantic network index key (by including &#39;M&#39; in the <code class="codeph">index_code</code> value) may improve query performance. This is particularly relevant when virtual models are used.</p>
</li>
</ul>
</div>
<a id="RDFRM208"></a><a id="RDFRM207"></a>
<div class="props_rev_3"><a id="GUID-D47120ED-1CC6-47ED-8216-C7E2E9910064"></a>
<h3 id="RDFRM-GUID-D47120ED-1CC6-47ED-8216-C7E2E9910064" class="sect3"><span class="enumeration_section">1.8.1</span> MDSYS.SEM_NETWORK_INDEX_INFO View</h3>
<div>
<p>Information about all network indexes on models and entailments is maintained in the MDSYS.SEM_NETWORK_INDEX_INFO view, which includes (a partial list) the columns shown in <a href="rdf-overview.htm#GUID-D47120ED-1CC6-47ED-8216-C7E2E9910064__CIHCBJII" title="SEM_NETWORK_INDEX_INFO view columns (partial list)">Table 1-16</a> and one row for each network index.</p>
<div class="tblformal" id="GUID-D47120ED-1CC6-47ED-8216-C7E2E9910064__CIHCBJII">
<p class="titleintable">Table 1-16 MDSYS.SEM_NETWORK_INDEX_INFO View Columns (Partial List)</p>
<table class="cellalignment4510" title="MDSYS.SEM_NETWORK_INDEX_INFO View Columns (Partial List)" summary="SEM_NETWORK_INDEX_INFO view columns (partial list)">
<thead>
<tr class="cellalignment4501">
<th class="cellalignment4512" id="d5610e10926">Column Name</th>
<th class="cellalignment4544" id="d5610e10929">Data Type</th>
<th class="cellalignment4565" id="d5610e10932">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4501">
<td class="cellalignment4515" id="d5610e10937" headers="d5610e10926">
<p>NAME</p>
</td>
<td class="cellalignment4546" headers="d5610e10937 d5610e10929">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment4566" headers="d5610e10937 d5610e10932">
<p>Name of the RDF model or entailment</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4515" id="d5610e10947" headers="d5610e10926">
<p>TYPE</p>
</td>
<td class="cellalignment4546" headers="d5610e10947 d5610e10929">
<p>VARCHAR2(10)</p>
</td>
<td class="cellalignment4566" headers="d5610e10947 d5610e10932">
<p>Type of object on which the index is built: <code class="codeph">MODEL</code>, <code class="codeph">ENTAILMENT</code>, or <code class="codeph">NETWORK</code></p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4515" id="d5610e10965" headers="d5610e10926">
<p>ID</p>
</td>
<td class="cellalignment4546" headers="d5610e10965 d5610e10929">
<p>NUMBER</p>
</td>
<td class="cellalignment4566" headers="d5610e10965 d5610e10932">
<p>ID number for the model or entailment, or zero (0) for an index on the network</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4515" id="d5610e10975" headers="d5610e10926">
<p>INDEX_CODE</p>
</td>
<td class="cellalignment4546" headers="d5610e10975 d5610e10929">
<p>VARCHAR2(25)</p>
</td>
<td class="cellalignment4566" headers="d5610e10975 d5610e10932">
<p>Code for the index (for example, <code class="codeph">PSCGM</code>).</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4515" id="d5610e10988" headers="d5610e10926">
<p>INDEX_NAME</p>
</td>
<td class="cellalignment4546" headers="d5610e10988 d5610e10929">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment4566" headers="d5610e10988 d5610e10932">
<p>Name of the index (for example, <code class="codeph">RDF_LNK_PSCGM_IDX</code>)</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4515" id="d5610e11001" headers="d5610e10926">
<p>LAST_REFRESH</p>
</td>
<td class="cellalignment4546" headers="d5610e11001 d5610e10929">
<p>TIMESTAMP(6) WITH TIME ZONE</p>
</td>
<td class="cellalignment4566" headers="d5610e11001 d5610e10932">
<p>Timestamp for the last time this content was refreshed</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>In addition to the columns listed in <a href="rdf-overview.htm#GUID-D47120ED-1CC6-47ED-8216-C7E2E9910064__CIHCBJII" title="SEM_NETWORK_INDEX_INFO view columns (partial list)">Table 1-16</a>, the MDSYS.SEM_NETWORK_INDEX_INFO view contains columns from the <a class="olink REFRN20088" target="_blank" href="../REFRN/GUID-E39825BA-70AC-45D8-AF30-C7FF561373B6.htm#REFRN20088"><span>ALL_INDEXES</span></a> and <a class="olink REFRN20086" target="_blank" href="../REFRN/GUID-9E62A85C-CEE9-4DDE-9FDF-C3FA47F51EE5.htm#REFRN20086">ALL_IND_PARTITIONS</a> views (both described in <span class="italic">Oracle Database Reference</span>), including:</p>
<ul style="list-style-type: disc;">
<li>
<p>From the ALL_INDEXES view: UNIQUENESS, COMPRESSION, PREFIX_LENGTH</p>
</li>
<li>
<p>From the ALL_IND_PARTITIONS view: STATUS, TABLESPACE_NAME, BLEVEL, LEAF_BLOCKS, NUM_ROWS, DISTINCT_KEYS, AVG_LEAF_BLOCKS_PER_KEY, AVG_DATA_BLOCKS_PER_KEY, CLUSTERING_FACTOR, SAMPLE_SIZE, LAST_ANALYZED</p>
</li>
</ul>
<p>Note that the information in the MDSYS.SEM_NETWORK_INDEX_INFO view may sometimes be stale. You can refresh this information by using the <a href="sem-apis-ref.htm#GUID-D7742055-88CB-4187-AC78-A6C66C70ED20">SEM_APIS.REFRESH_SEM_NETWORK_INDEX_INFO</a> procedure.</p>
</div>
</div>
</div>
<a id="RDFRM210"></a><a id="RDFRM211"></a><a id="RDFRM212"></a><a id="RDFRM209"></a>
<div class="props_rev_3"><a id="GUID-E0FC3EA3-9385-4D94-AB3C-72F65EDAC966"></a>
<h2 id="RDFRM-GUID-E0FC3EA3-9385-4D94-AB3C-72F65EDAC966" class="sect2"><span class="enumeration_section">1.9</span> Using Data Type Indexes</h2>
<div>
<p>Data type indexes are indexes on the values of typed literals stored in a semantic network. These indexes may significantly improve the performance of SEM_MATCH queries involving certain types of FILTER expressions. For example, a data type index on <code class="codeph">xsd:dateTime</code> literals may speed up evaluation of the filter <code class="codeph">(?x &lt; &#34;1929-11-16T13:45:00Z&#34;^^xsd:dateTime)</code>. Indexes can be created for several data types, which are listed in <a href="rdf-overview.htm#GUID-E0FC3EA3-9385-4D94-AB3C-72F65EDAC966__CIHIFBFD" title="Data Types for Data Type Indexing of RDF Data">Table 1-17</a>.</p>
<div class="tblformal" id="GUID-E0FC3EA3-9385-4D94-AB3C-72F65EDAC966__CIHIFBFD">
<p class="titleintable">Table 1-17 Data Types for Data Type Indexing</p>
<table class="cellalignment4510" title="Data Types for Data Type Indexing" summary="Data Types for Data Type Indexing of RDF Data">
<thead>
<tr class="cellalignment4501">
<th class="cellalignment4567" id="d5610e11113">Data Type URI</th>
<th class="cellalignment4568" id="d5610e11116">Oracle Type</th>
<th class="cellalignment4569" id="d5610e11119">Index Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4501">
<td class="cellalignment4570" id="d5610e11124" headers="d5610e11113">
<p>http://www.w3.org/2001/XMLSchema#decimal</p>
</td>
<td class="cellalignment4571" headers="d5610e11124 d5610e11116">
<p>NUMBER</p>
</td>
<td class="cellalignment4572" headers="d5610e11124 d5610e11119">
<p>Non-unique B-tree (creates a single index for all xsd numeric types, including <code class="codeph">xsd:float</code>, <code class="codeph">xsd:double</code>, and <code class="codeph">xsd:decimal</code> and all of its subtypes)</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4570" id="d5610e11143" headers="d5610e11113">
<p>http://www.w3.org/2001/XMLSchema#string</p>
</td>
<td class="cellalignment4571" headers="d5610e11143 d5610e11116">
<p>VARCHAR2</p>
</td>
<td class="cellalignment4572" headers="d5610e11143 d5610e11119">
<p>Non-unique B-tree (creates a single index for <code class="codeph">xsd:string</code> typed literals and plain literals)</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4570" id="d5610e11156" headers="d5610e11113">
<p>http://www.w3.org/2001/XMLSchema#time</p>
</td>
<td class="cellalignment4571" headers="d5610e11156 d5610e11116">
<p>TIMESTAMP WITH TIMEZONE</p>
</td>
<td class="cellalignment4572" headers="d5610e11156 d5610e11119">
<p>Non-unique B-tree</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4570" id="d5610e11166" headers="d5610e11113">
<p>http://www.w3.org/2001/XMLSchema#date</p>
</td>
<td class="cellalignment4571" headers="d5610e11166 d5610e11116">
<p>TIMESTAMP WITH TIMEZONE</p>
</td>
<td class="cellalignment4572" headers="d5610e11166 d5610e11119">
<p>Non-unique B-tree</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4570" id="d5610e11176" headers="d5610e11113">
<p>http://www.w3.org/2001/XMLSchema#dateTime</p>
</td>
<td class="cellalignment4571" headers="d5610e11176 d5610e11116">
<p>TIMESTAMP WITH TIMEZONE</p>
</td>
<td class="cellalignment4572" headers="d5610e11176 d5610e11119">
<p>Non-unique B-tree</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4570" id="d5610e11186" headers="d5610e11113">
<p>http://xmlns.oracle.com/rdf/text</p>
</td>
<td class="cellalignment4571" headers="d5610e11186 d5610e11116">
<p>(Not applicable)</p>
</td>
<td class="cellalignment4572" headers="d5610e11186 d5610e11119">
<p>CTXSYS.CONTEXT</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4570" id="d5610e11196" headers="d5610e11113">
<p>http://xmlns.oracle.com/rdf/geo/WKTLiteral</p>
</td>
<td class="cellalignment4571" headers="d5610e11196 d5610e11116">
<p>SDO_GEOMETRY</p>
</td>
<td class="cellalignment4572" headers="d5610e11196 d5610e11119">
<p>MDSYS.SPATIAL_INDEX</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4570" id="d5610e11206" headers="d5610e11113">
<p>http://www.opengis.net/geosparql#wktLiteral</p>
</td>
<td class="cellalignment4571" headers="d5610e11206 d5610e11116">
<p>SDO_GEOMETRY</p>
</td>
<td class="cellalignment4572" headers="d5610e11206 d5610e11119">
<p>MDSYS.SPATIAL_INDEX</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>The suitability of data type indexes depends on your query workload. Data type indexes on <code class="codeph">xsd</code> data types can be used for filters that compare a variable with a constant value, and are particularly useful when queries have an unselective graph pattern with a very selective filter condition. Appropriate data type indexes are required for queries with spatial or text filters.</p>
<p>While data type indexes improve query performance, overhead from incremental index maintenance can degrade the performance of DML and bulk load operations on the semantic network. For bulk load operations, it may often be faster to drop data type indexes, perform the bulk load, and then re-create the data type indexes.</p>
<p>You can add, alter, and drop data type indexes using the following procedures, which are described in <a href="sem-apis-ref.htm#GUID-F42AB976-445A-4DCD-974C-3B9ED810E3D5">SEM_APIS Package Subprograms</a>:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="sem-apis-ref.htm#GUID-3984C866-8524-458E-B858-43B0339E6629">SEM_APIS.ADD_DATATYPE_INDEX</a></p>
</li>
<li>
<p><a href="sem-apis-ref.htm#GUID-E7F9EEB6-323F-4DF6-B00E-40F8F8F8DE84">SEM_APIS.ALTER_DATATYPE_INDEX</a></p>
</li>
<li>
<p><a href="sem-apis-ref.htm#GUID-3D17DAEF-7764-4646-99EE-DB5BFEE5D5D5">SEM_APIS.DROP_DATATYPE_INDEX</a></p>
</li>
</ul>
<p><a id="d5610e11245" class="indexterm-anchor"></a><a id="d5610e11247" class="indexterm-anchor"></a>Information about existing data type indexes is maintained in the MDSYS.SEM_DTYPE_INDEX_INFO view, which has the columns shown in <a href="rdf-overview.htm#GUID-E0FC3EA3-9385-4D94-AB3C-72F65EDAC966__CIHGDJFG" title="SEM_DTYPE_INDEX_INFO view columns">Table 1-18</a> and one row for each data type index.</p>
<div class="tblformal" id="GUID-E0FC3EA3-9385-4D94-AB3C-72F65EDAC966__CIHGDJFG">
<p class="titleintable">Table 1-18 MDSYS.SEM_DTYPE_INDEX_INFO View Columns</p>
<table class="cellalignment4510" title="MDSYS.SEM_DTYPE_INDEX_INFO View Columns" summary="SEM_DTYPE_INDEX_INFO view columns">
<thead>
<tr class="cellalignment4501">
<th class="cellalignment4511" id="d5610e11268">Column Name</th>
<th class="cellalignment4511" id="d5610e11271">Data Type</th>
<th class="cellalignment4541" id="d5610e11274">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e11279" headers="d5610e11268">
<p>DATATYPE</p>
</td>
<td class="cellalignment4514" headers="d5610e11279 d5610e11271">
<p>VARCHAR2(51)</p>
</td>
<td class="cellalignment4543" headers="d5610e11279 d5610e11274">
<p>Data type URI</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e11289" headers="d5610e11268">
<p>INDEX_NAME</p>
</td>
<td class="cellalignment4514" headers="d5610e11289 d5610e11271">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment4543" headers="d5610e11289 d5610e11274">
<p>Name of the index</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e11299" headers="d5610e11268">
<p>STATUS</p>
</td>
<td class="cellalignment4514" headers="d5610e11299 d5610e11271">
<p>VARCHAR2(8)</p>
</td>
<td class="cellalignment4543" headers="d5610e11299 d5610e11274">
<p>Status of the index: <code class="codeph">USABLE</code> or <code class="codeph">UNUSABLE</code></p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d5610e11314" headers="d5610e11268">
<p>TABLESPACE_NAME</p>
</td>
<td class="cellalignment4514" headers="d5610e11314 d5610e11271">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment4543" headers="d5610e11314 d5610e11274">
<p>Tablespace for the index</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>You can use the <code class="codeph">HINT0</code> hint to ensure that data type indexes are used during query evaluation, as shown in <a href="rdf-overview.htm#GUID-E0FC3EA3-9385-4D94-AB3C-72F65EDAC966__CIHJAFFJ">Example 1-88</a>, which finds all grandfathers who were born before November 16, 1929.</p>
<div class="example" id="GUID-E0FC3EA3-9385-4D94-AB3C-72F65EDAC966__CIHJAFFJ">
<p class="titleinexample">Example 1-88 Using HINT0 to Ensure Use of Data Type Index</p>
<pre dir="ltr">SELECT x, y
  FROM TABLE(SEM_MATCH(
    &#39;{?x :grandParentOf ?y . ?x rdf:type :Male . ?x :birthDate ?bd
       FILTER (?bd &lt;= &#34;1929-11-15T23:59:59Z&#34;^^xsd:dateTime) }&#39;,
    SEM_Models(&#39;family&#39;),
    SEM_Rulebases(&#39;RDFS&#39;,&#39;family_rb&#39;), 
    SEM_ALIASES(SEM_ALIAS(&#39;&#39;,&#39;http://www.example.org/family/&#39;)),
    null, null, 
    &#39;<span class="bold">HINT0</span>={ LEADING(?bd) INDEX(?bd rdf_v$dateTime_idx) } 
             FAST_DATE_FILTER=T&#39; ));
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM405"></a>
<div class="props_rev_3"><a id="GUID-273402FC-2C92-4B36-981A-1E8644FB7134"></a>
<h2 id="RDFRM-GUID-273402FC-2C92-4B36-981A-1E8644FB7134" class="sect2"><span class="enumeration_section">1.10</span> Managing Statistics for Semantic Models and the Semantic Network</h2>
<div>
<p>Statistics are critical to the performance of SPARQL queries and OWL inference against semantic data stored in an Oracle database. Oracle Database Release 11<span class="italic">g</span> introduced <a href="sem-apis-ref.htm#GUID-5F9B7803-8072-4095-832D-034EE5514D03">SEM_APIS.ANALYZE_MODEL</a>, <a href="sem-apis-ref.htm#GUID-E146F4B9-7A84-4E46-9204-572140612E2D">SEM_APIS.ANALYZE_ENTAILMENT</a>, and <a href="sem-perf-ref.htm#GUID-285D5640-9DF4-460B-B27E-7671711EFA18">SEM_PERF.GATHER_STATS</a> to analyze semantic data and keep statistics up to date. These APIs are straightforward to use and they are targeted at regular users who may not care about the internal details about table and partition statistics.</p>
<p>You can export, import, set, and delete model and entailment statistics, and can export, import, and delete network statistics, using the following subprograms:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="sem-apis-ref.htm#GUID-E08C848B-6025-41A0-99F9-2B5705B22B55">SEM_APIS.DELETE_ENTAILMENT_STATS</a></p>
</li>
<li>
<p><a href="sem-apis-ref.htm#GUID-B5C40AEF-1DEA-45D2-B5CE-823ED65B9D14">SEM_APIS.DELETE_MODEL_STATS</a></p>
</li>
<li>
<p><a href="sem-apis-ref.htm#GUID-363C9F40-3D7B-4E5F-ACCC-2C1DA6E66A6C">SEM_APIS.EXPORT_ENTAILMENT_STATS</a></p>
</li>
<li>
<p><a href="sem-apis-ref.htm#GUID-DA10B7BD-A7DF-4709-8A2F-4840FDAAEC02">SEM_APIS.EXPORT_MODEL_STATS</a></p>
</li>
<li>
<p><a href="sem-apis-ref.htm#GUID-8A59606F-D1D7-4C18-9D66-3E1BB7AE264E">SEM_APIS.IMPORT_ENTAILMENT_STATS</a></p>
</li>
<li>
<p><a href="sem-apis-ref.htm#GUID-9CD5F831-BC49-4A27-9F43-B268ABB199DF">SEM_APIS.IMPORT_MODEL_STATS</a></p>
</li>
<li>
<p><a href="sem-apis-ref.htm#GUID-49A11D86-115D-4C0E-9DC6-576A89F6CC9A">SEM_APIS.SET_ENTAILMENT_STATS</a></p>
</li>
<li>
<p><a href="sem-apis-ref.htm#GUID-4734FA56-4EC7-4A06-9021-8E7ED69812CE">SEM_APIS.SET_MODEL_STATS</a></p>
</li>
<li>
<p><a href="sem-perf-ref.htm#GUID-C06E6B3B-F1FB-4752-AF74-369D605212C8">SEM_PERF.DELETE_NETWORK_STATS</a></p>
</li>
<li>
<p><a href="sem-perf-ref.htm#GUID-A95028BC-E1E8-42A3-BA21-35FA17CDC270">SEM_PERF.EXPORT_NETWORK_STATS</a></p>
</li>
<li>
<p><a href="sem-perf-ref.htm#GUID-33BF8D3E-0048-4145-8C74-A340CEB48DC6">SEM_PERF.IMPORT_NETWORK_STATS</a></p>
</li>
</ul>
<p>This section contains the following topics related to managing statistics for semantic models and the semantic network:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="rdf-overview.htm#GUID-F02766D5-1699-41BF-9999-C8EC5315F9E9">Saving Statistics at a Model Level</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-003C4023-249B-4B8D-908C-FA2EF24D2E40">Restoring Statistics at a Model Level</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-4F2360F4-6BFB-4CBA-9209-9E79A9796746">Saving Statistics at the Network Level</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-75F85A5B-8FEA-4206-86AC-06DEA92F4F51">Restoring Statistics at the Network Level</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-D9E1422B-88F6-4F44-B211-53032C8907F7">Setting Statistics at a Model Level</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-F34AB6A8-A0C5-49B7-8430-EBDE872E16CE">Deleting Statistics at a Model Level</a></p>
</li>
</ul>
</div>
<a id="RDFRM406"></a>
<div class="props_rev_3"><a id="GUID-F02766D5-1699-41BF-9999-C8EC5315F9E9"></a>
<h3 id="RDFRM-GUID-F02766D5-1699-41BF-9999-C8EC5315F9E9" class="sect3"><span class="enumeration_section">1.10.1</span> Saving Statistics at a Model Level</h3>
<div>
<p>If queries and inference against an existing model are executed efficiently, as the owner of the model, you can save the statistics of the existing model.</p>
<pre dir="ltr">-- Login as the model owner (for example, SCOTT)
-- Create a stats table. This is required.
execute dbms_stats.create_stat_table(&#39;scott&#39;,&#39;rdf_stat_tab&#39;);
 
-- You must grant access to MDSYS
SQL&gt; grant select, insert, delete, update on scott.rdf_stat_tab to MDSYS;
 
-- Now export the statistics of model TEST
execute sdo_rdf.export_model_stats(&#39;TEST&#39;,&#39;rdf_stat_tab&#39;, &#39;model_stat_saved_on_AUG_10&#39;, true, &#39;SCOTT&#39;, &#39;OBJECT_STATS&#39;);
</pre>
<p>You can also save the statistics of an entailment (entailed graph) by using <a href="sem-apis-ref.htm#GUID-363C9F40-3D7B-4E5F-ACCC-2C1DA6E66A6C">SEM_APIS.EXPORT_ENTAILMENT_STATS</a> .</p>
<pre dir="ltr">execute sem_apis.create_entailment(&#39;test_inf&#39;,sem_models(&#39;test&#39;),sem_rulebases(&#39;owl2rl&#39;),0,null);
PL/SQL procedure successfully completed.
 
execute sem_apis.export_entailment_stats(&#39;TEST_INF&#39;,&#39;rdf_stat_tab&#39;, &#39;inf_stat_saved_on_AUG_10&#39;, true, &#39;SCOTT&#39;, &#39;OBJECT_STATS&#39;);
</pre></div>
</div>
<a id="RDFRM407"></a>
<div class="props_rev_3"><a id="GUID-003C4023-249B-4B8D-908C-FA2EF24D2E40"></a>
<h3 id="RDFRM-GUID-003C4023-249B-4B8D-908C-FA2EF24D2E40" class="sect3"><span class="enumeration_section">1.10.2</span> Restoring Statistics at a Model Level</h3>
<div>
<p>As the owner of a model, can restore the statistics that were previously saved with <a href="sem-apis-ref.htm#GUID-DA10B7BD-A7DF-4709-8A2F-4840FDAAEC02">SEM_APIS.EXPORT_MODEL_STATS</a> . This may be necessary if updates have been applied to this model and statistics have been re-collected. A change in statistics might cause a plan change to existing SPARQL queries, and if such a plan change is undesirable, then an old set of statistics can be restored.</p>
<pre dir="ltr">execute sem_apis.import_model_stats(&#39;TEST&#39;,&#39;rdf_stat_tab&#39;, &#39;model_stat_saved_on_AUG_10&#39;, true, &#39;SCOTT&#39;, false, true, &#39;OBJECT_STATS&#39;);
</pre>
<p>You can also restore the statistics of an entailment (entailed graph) by using <a href="sem-apis-ref.htm#GUID-8A59606F-D1D7-4C18-9D66-3E1BB7AE264E">SEM_APIS.IMPORT_ENTAILMENT_STATS</a> .</p>
<pre dir="ltr">execute sem_apis.import_entailment_stats(&#39;TEST&#39;,&#39;rdf_stat_tab&#39;, &#39;inf_stat_saved_on_AUG_10&#39;, true, &#39;SCOTT&#39;, false, true, &#39;OBJECT_STATS&#39;);
</pre></div>
</div>
<a id="RDFRM408"></a>
<div class="props_rev_3"><a id="GUID-4F2360F4-6BFB-4CBA-9209-9E79A9796746"></a>
<h3 id="RDFRM-GUID-4F2360F4-6BFB-4CBA-9209-9E79A9796746" class="sect3"><span class="enumeration_section">1.10.3</span> Saving Statistics at the Network Level</h3>
<div>
<p>You can save statistics at the network level.</p>
<pre dir="ltr">-- First, create a user RDF_ADMIN and assign access to package SEM_PERF to RDF_ADMIN
--
-- As SYS
--
create user RDF_ADMIN identified by RDF_ADMIN;
 
grant connect, resource, unlimited tablespace to RDF_ADMIN;
 
grant execute on sem_perf to RDF_ADMIN;
 
conn RDF_ADMIN/&lt;password&gt;
 
execute dbms_stats.create_stat_table(&#39;RDF_ADMIN&#39;,&#39;rdf_stat_tab&#39;);
grant select, insert, delete, update on RDF_ADMIN.rdf_stat_tab to MDSYS;
 
--
-- This API call will save the statistics of both MDSYS.RDF_VALUE$ table
-- and MDSYS.RDF_LINK$
--
execute sem_perf.export_network_stats(&#39;rdf_stat_tab&#39;, &#39;NETWORK_ALL_saved_on_Aug_10&#39;, true, &#39;RDF_ADMIN&#39;, &#39;OBJECT_STATS&#39;);
 
--
-- Alternatively, you can save statistics of the MDSYS.RDF_VALUE$ table
--
execute sem_perf.export_network_stats(&#39;rdf_stat_tab&#39;, &#39;NETWORK_VALUE_TAB_saved_on_Aug_10&#39;, true, &#39;RDF_ADMIN&#39;, &#39;OBJECT_STATS&#39;, options=&gt; mdsys.sdo_rdf.VALUE_TAB_ONLY);
 
--
-- Or, you can save statistics of the MDSYS.RDF_LINK$ table
--
execute sem_perf.export_network_stats(&#39;rdf_stat_tab&#39;, &#39;NETWORK_LINK_TAB_saved_on_Aug_10&#39;, true, &#39;RDF_ADMIN&#39;, &#39;OBJECT_STATS&#39;, options=&gt; mdsys.sdo_rdf.LINK_TAB_ONLY);
</pre></div>
</div>
<a id="RDFRM784"></a>
<div class="props_rev_3"><a id="GUID-75F85A5B-8FEA-4206-86AC-06DEA92F4F51"></a>
<h3 id="RDFRM-GUID-75F85A5B-8FEA-4206-86AC-06DEA92F4F51" class="sect3"><span class="enumeration_section">1.10.4</span> Restoring Statistics at the Network Level</h3>
<div>
<p>The privileged user from <a href="rdf-overview.htm#GUID-4F2360F4-6BFB-4CBA-9209-9E79A9796746">Saving Statistics at the Network Level</a> can restore the network level statistics using <a href="sem-perf-ref.htm#GUID-33BF8D3E-0048-4145-8C74-A340CEB48DC6">SEM_PERF.IMPORT_NETWORK_STATS</a> .</p>
<pre dir="ltr">conn RDF_ADMIN/<span class="italic">&lt;password&gt;</span>
 
execute sem_perf.import_network_stats(&#39;rdf_stat_tab&#39;, &#39;NETWORK_ALL_saved_on_Aug_10&#39;, true, &#39;RDF_ADMIN&#39;, false, true, &#39;OBJECT_STATS&#39;);
</pre></div>
</div>
<a id="RDFRM409"></a>
<div class="props_rev_3"><a id="GUID-D9E1422B-88F6-4F44-B211-53032C8907F7"></a>
<h3 id="RDFRM-GUID-D9E1422B-88F6-4F44-B211-53032C8907F7" class="sect3"><span class="enumeration_section">1.10.5</span> Setting Statistics at a Model Level</h3>
<div>
<p>As the owner of a model, you can manually adjust the statistics for this model. (However, before you adjust statistics, you should save the statistics first so that they can be restored if necessary.) The following example sets two metrics: number of rows and number of blocks for the model.</p>
<pre dir="ltr">execute sem_apis.set_model_stats(&#39;TEST&#39;, numrows=&gt;10, numblks=&gt;1,no_invalidate=&gt;false);
</pre>
<p>You can also set the statistics for the entailment by using <a href="sem-apis-ref.htm#GUID-49A11D86-115D-4C0E-9DC6-576A89F6CC9A">SEM_APIS.SET_ENTAILMENT_STATS</a> .</p>
<pre dir="ltr">execute sem_apis.set_entailment_stats(&#39;TEST_INF&#39;, numrows=&gt;10, numblks=&gt;1,no_invalidate=&gt;false);
</pre></div>
</div>
<a id="RDFRM411"></a>
<div class="props_rev_3"><a id="GUID-F34AB6A8-A0C5-49B7-8430-EBDE872E16CE"></a>
<h3 id="RDFRM-GUID-F34AB6A8-A0C5-49B7-8430-EBDE872E16CE" class="sect3"><span class="enumeration_section">1.10.6</span> Deleting Statistics at a Model Level</h3>
<div>
<p>Removing statistics can also have an impact on execution plans. As owner of a model, you can remove the statistics for the model.</p>
<pre dir="ltr">execute sem_apis.delete_model_stats(&#39;TEST&#39;, no_invalidate=&gt; false);
</pre>
<p>You can also remove the statistics for the entailment by using <a href="sem-apis-ref.htm#GUID-E08C848B-6025-41A0-99F9-2B5705B22B55">SEM_APIS.DELETE_ENTAILMENT_STATS</a>. (However, before you remove statistics of a model or an entailment, you should save the statistics first so that they can be restored if necessary.)</p>
<pre dir="ltr">execute sem_apis.delete_entailment_stats(&#39;TEST_INF&#39;, no_invalidate=&gt; false);
</pre></div>
</div>
</div>
<a id="RDFRM602"></a>
<div class="props_rev_3"><a id="GUID-7F590F2D-F382-4CD6-A95A-757010BB148F"></a>
<h2 id="RDFRM-GUID-7F590F2D-F382-4CD6-A95A-757010BB148F" class="sect2"><span class="enumeration_section">1.11</span> Quick Start for Using Semantic Data</h2>
<div>
<div class="section">
<p>To work with semantic data in an Oracle database, follow these general steps:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Create a tablespace for the system tables. You must be connected as a user with appropriate privileges to create the tablespace. The following example creates a tablespace named RDF_TBLSPACE:</span>
<div>
<pre dir="ltr">CREATE TABLESPACE rdf_tblspace
 DATAFILE &#39;/oradata/orcl/rdf_tblspace.dat&#39; SIZE 1024M REUSE
 AUTOEXTEND ON NEXT 256M MAXSIZE UNLIMITED
 SEGMENT SPACE MANAGEMENT AUTO;
</pre></div>
</li>
<li class="stepexpand"><span>Create a semantic data network.</span>
<div>
<p>Creating a semantic data network adds semantic data support to an Oracle database. You must create a semantic data network as a user with DBA privileges, specifying a valid tablespace with adequate space. Create the network only once for an Oracle database.</p>
<p>The following example creates a semantic data network using a tablespace named RDF_TBLSPACE (which must already exist):</p>
<pre dir="ltr">EXECUTE SEM_APIS.CREATE_SEM_NETWORK(&#39;rdf_tblspace&#39;);
</pre></div>
</li>
<li class="stepexpand"><span>Connect as the database user under whose schema you will store your semantic data; do not perform the following steps while connected as SYS, SYSTEM, or MDSYS.</span></li>
<li class="stepexpand"><span>Create a table to store references to the semantic data. (You do not need to be connected as a user with DBA privileges for this step and the remaining steps.)</span>
<div>
<p>This table must contain a column of type SDO_RDF_TRIPLE_S, which will contain references to all data associated with a single model.</p>
<p>The following example creates a table named ARTICLES_RDF_DATA:</p>
<pre dir="ltr">CREATE TABLE articles_rdf_data (id NUMBER, triple SDO_RDF_TRIPLE_S);
</pre></div>
</li>
<li class="stepexpand"><span>Create a model.</span>
<div>
<p>When you create a model, you specify the model name, the table to hold references to semantic data for the model, and the column of type SDO_RDF_TRIPLE_S in that table.</p>
<p>The following command creates a model named ARTICLES, which will use the table created in the preceding step.</p>
<pre dir="ltr">EXECUTE SEM_APIS.CREATE_SEM_MODEL(&#39;articles&#39;, &#39;articles_rdf_data&#39;, &#39;triple&#39;);
</pre></div>
</li>
<li class="stepexpand"><span>Where possible, create Oracle database indexes on conditions that will be specified in the WHERE clause of SELECT statements, to provide better performance for direct queries against the application table&#39;s SDO_RDF_TRIPLE_S column. (These indexes are not relevant if the SEM_MATCH table function is being used.) The following example creates such indexes:</span>
<div>
<pre dir="ltr">-- Create indexes on the subjects, properties, and objects
-- in the ARTICLES_RDF_DATA table.
CREATE INDEX articles_sub_idx ON articles_rdf_data (triple.GET_SUBJECT());
CREATE INDEX articles_prop_idx ON articles_rdf_data (triple.GET_PROPERTY());
CREATE INDEX articles_obj_idx ON articles_rdf_data (TO_CHAR(triple.GET_OBJECT()));
</pre></div>
</li>
</ol>
<div class="section">
<p>After you create the model, you can insert triples into the table, as shown in the examples in <a href="rdf-overview.htm#GUID-2A9B194C-2540-42C7-A783-4A32ADA6F1F4">Semantic Data Examples (PL/SQL and Java)</a>.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="RDFRM603"></a>
<div class="props_rev_3"><a id="GUID-2A9B194C-2540-42C7-A783-4A32ADA6F1F4"></a>
<h2 id="RDFRM-GUID-2A9B194C-2540-42C7-A783-4A32ADA6F1F4" class="sect2"><span class="enumeration_section">1.12</span> Semantic Data Examples (PL/SQL and Java)</h2>
<div>
<p>This section contains the following PL/SQL examples:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="rdf-overview.htm#GUID-B403F8B8-F7C2-4253-8DB3-DD0D84DFBDCA">Example: Journal Article Information</a></p>
</li>
<li>
<p><a href="rdf-overview.htm#GUID-ADC458F4-570C-4081-8844-107F9F63E915">Example: Family Information</a></p>
</li>
</ul>
<p>In addition to the examples in this guide, see the sample code at <a href="http://www.oracle.com/technetwork/indexes/samplecode/semantic-sample-522114.html" target="_blank"><code class="codeph">http://www.oracle.com/technetwork/indexes/samplecode/semantic-sample-522114.html</code></a>.</p>
</div>
<a id="RDFRM605"></a><a id="RDFRM604"></a>
<div class="props_rev_3"><a id="GUID-B403F8B8-F7C2-4253-8DB3-DD0D84DFBDCA"></a>
<h3 id="RDFRM-GUID-B403F8B8-F7C2-4253-8DB3-DD0D84DFBDCA" class="sect3"><span class="enumeration_section">1.12.1</span> Example: Journal Article Information</h3>
<div>
<p>This section presents a simplified PL/SQL example of model for statements about journal articles. <a href="rdf-overview.htm#GUID-B403F8B8-F7C2-4253-8DB3-DD0D84DFBDCA__CHDCECBB">Example 1-89</a> contains descriptive comments, refers to concepts that are explained in this chapter, and uses functions and procedures documented in <a href="sem-apis-ref.htm#GUID-F42AB976-445A-4DCD-974C-3B9ED810E3D5">SEM_APIS Package Subprograms</a>.</p>
<div class="example" id="GUID-B403F8B8-F7C2-4253-8DB3-DD0D84DFBDCA__CHDCECBB">
<p class="titleinexample">Example 1-89 Using a Model for Journal Article Information</p>
<pre dir="ltr">-- Basic steps:
-- After you have connected as a privileged user and called 
-- SEM_APIS.CREATE_SEM_NETWORK to add RDF support,
-- connect as a regular database user and do the following.
-- 1. For each desired model, create a table to hold its data.
-- 2. For each model, create a model (SEM_APIS.CREATE_SEM_MODEL).
-- 3. For each table to hold semantic data, insert data into the table.
-- 4. Use various subprograms and constructors.
 
-- Create the table to hold data for the model.
CREATE TABLE articles_rdf_data (id NUMBER, triple SDO_RDF_TRIPLE_S);
 
-- Create the model.
EXECUTE SEM_APIS.CREATE_SEM_MODEL(&#39;articles&#39;, &#39;articles_rdf_data&#39;, &#39;triple&#39;);
 
-- Information to be stored about some fictitious articles:
-- Article1, titled &#34;All about XYZ&#34; and written by Jane Smith, refers 
--   to Article2 and Article3.
-- Article2, titled &#34;A review of ABC&#34; and written by Joe Bloggs, 
--   refers to Article3.
-- Seven SQL statements to store the information. In each statement:
-- Each article is referred to by its complete URI The URIs in
--   this example are fictitious.
-- Each property is referred to by the URL for its definition, as 
--   created by the Dublin Core Metadata Initiative.
 
-- Insert rows into the table.
 
-- Article1 has the title &#34;All about XYZ&#34;.
INSERT INTO articles_rdf_data VALUES (1,
  SDO_RDF_TRIPLE_S (&#39;articles&#39;,&#39;&lt;http://nature.example.com/Article1&gt;&#39;,
    &#39;&lt;http://purl.org/dc/elements/1.1/title&gt;&#39;,&#39;&#34;All about XYZ&#34;&#39;));
 
-- Article1 was created (written) by Jane Smith.
INSERT INTO articles_rdf_data VALUES (2,
  SDO_RDF_TRIPLE_S (&#39;articles&#39;,&#39;&lt;http://nature.example.com/Article1&gt;&#39;,
    &#39;&lt;http://purl.org/dc/elements/1.1/creator&gt;&#39;,
    &#39;&#34;Jane Smith&#34;&#39;));
 
-- Article1 references (refers to) Article2.
INSERT INTO articles_rdf_data VALUES (3,
  SDO_RDF_TRIPLE_S (&#39;articles&#39;,
    &#39;&lt;http://nature.example.com/Article1&gt;&#39;,
    &#39;&lt;http://purl.org/dc/terms/references&gt;&#39;,
    &#39;&lt;http://nature.example.com/Article2&gt;&#39;));
 
-- Article1 references (refers to) Article3.
INSERT INTO articles_rdf_data VALUES (4,
  SDO_RDF_TRIPLE_S (&#39;articles&#39;,
    &#39;&lt;http://nature.example.com/Article1&gt;&#39;,
    &#39;&lt;http://purl.org/dc/terms/references&gt;&#39;,
    &#39;&lt;http://nature.example.com/Article3&gt;&#39;));
 
-- Article2 has the title &#34;A review of ABC&#34;.
INSERT INTO articles_rdf_data VALUES (5,
  SDO_RDF_TRIPLE_S (&#39;articles&#39;,
    &#39;&lt;http://nature.example.com/Article2&gt;&#39;,
    &#39;&lt;http://purl.org/dc/elements/1.1/title&gt;&#39;,
    &#39;&#34;A review of ABC&#34;&#39;));
 
-- Article2 was created (written) by Joe Bloggs.
INSERT INTO articles_rdf_data VALUES (6,
  SDO_RDF_TRIPLE_S (&#39;articles&#39;,
    &#39;&lt;http://nature.example.com/Article2&gt;&#39;,
    &#39;&lt;http://purl.org/dc/elements/1.1/creator&gt;&#39;,
    &#39;&#34;Joe Bloggs&#34;&#39;));
 
-- Article2 references (refers to) Article3.
INSERT INTO articles_rdf_data VALUES (7,
  SDO_RDF_TRIPLE_S (&#39;articles&#39;,
    &#39;&lt;http://nature.example.com/Article2&gt;&#39;,
    &#39;&lt;http://purl.org/dc/terms/references&gt;&#39;,
    &#39;&lt;http://nature.example.com/Article3&gt;&#39;));
 
COMMIT;
 
-- Query semantic data.
 
SELECT SEM_APIS.GET_MODEL_ID(&#39;articles&#39;) AS model_id FROM DUAL;
 
SELECT SEM_APIS.GET_TRIPLE_ID(
  &#39;articles&#39;,
  &#39;&lt;http://nature.example.com/Article2&gt;&#39;,
  &#39;&lt;http://purl.org/dc/terms/references&gt;&#39;,
  &#39;&lt;http://nature.example.com/Article3&gt;&#39;) AS RDF_triple_id FROM DUAL;
 
SELECT SEM_APIS.IS_TRIPLE(
  &#39;articles&#39;,
  &#39;&lt;http://nature.example.com/Article2&gt;&#39;,
  &#39;&lt;http://purl.org/dc/terms/references&gt;&#39;,
  &#39;&lt;http://nature.example.com/Article3&gt;&#39;) AS is_triple FROM DUAL;
 
-- Use SDO_RDF_TRIPLE_S member functions in queries.
 
SELECT a.triple.GET_TRIPLE() AS triple 
  FROM articles_rdf_data a WHERE a.id = 1;
SELECT a.triple.GET_SUBJECT() AS subject 
  FROM articles_rdf_data a WHERE a.id = 1;
SELECT a.triple.GET_PROPERTY() AS property 
  FROM articles_rdf_data a WHERE a.id = 1;
SELECT a.triple.GET_OBJECT() AS object 
  FROM articles_rdf_data a WHERE a.id = 1;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM607"></a><a id="RDFRM608"></a><a id="RDFRM606"></a>
<div class="props_rev_3"><a id="GUID-ADC458F4-570C-4081-8844-107F9F63E915"></a>
<h3 id="RDFRM-GUID-ADC458F4-570C-4081-8844-107F9F63E915" class="sect3"><span class="enumeration_section">1.12.2</span> Example: Family Information</h3>
<div>
<p>This section presents a simplified PL/SQL example of a model for statements about family tree (genealogy) information. <a href="rdf-overview.htm#GUID-B403F8B8-F7C2-4253-8DB3-DD0D84DFBDCA__CHDCECBB">Example 1-89</a> contains descriptive comments, refers to concepts that are explained in this chapter, and uses functions and procedures documented in <a href="sem-apis-ref.htm#GUID-F42AB976-445A-4DCD-974C-3B9ED810E3D5">SEM_APIS Package Subprograms</a>.</p>
<p>The family relationships in this example reflect the family tree shown in <a href="rdf-overview.htm#GUID-ADC458F4-570C-4081-8844-107F9F63E915__CHDIIFJE">Figure 1-3</a>. This figure also shows some of the information directly stated in the example: Cathy is the sister of Jack, Jack and Tom are male, and Cindy is female.</p>
<div class="figure" id="GUID-ADC458F4-570C-4081-8844-107F9F63E915__CHDIIFJE">
<p class="titleinfigure">Figure 1-3 Family Tree for RDF Example</p>
<img width="314" height="153" src="img/GUID-CEA279E7-7BF7-4C83-88C6-3ACCBA065BC4-default.gif" alt="Description of Figure 1-3 follows" title="Description of Figure 1-3 follows"/><br/>
<a href="img_text/GUID-CEA279E7-7BF7-4C83-88C6-3ACCBA065BC4-print.htm">Description of &#34;Figure 1-3 Family Tree for RDF Example&#34;</a></div>
<!-- class="figure" -->
<div class="example" id="GUID-ADC458F4-570C-4081-8844-107F9F63E915__CHDGCDGI">
<p class="titleinexample">Example 1-90 Using a Model for Family Information</p>
<pre dir="ltr">-- Basic steps:
-- After you have connected as a privileged user and called 
-- SEM_APIS.CREATE_SEM_NETWORK to enable RDF support,
-- connect as a regular database user and do the following.
-- 1. For each desired model, create a table to hold its data.
-- 2. For each model, create a model (SEM_APIS.CREATE_SEM_MODEL).
-- 3. For each table to hold semantic data, insert data into the table.
-- 4. Use various subprograms and constructors.
 
-- Create the table to hold data for the model.
CREATE TABLE family_rdf_data (id NUMBER, triple SDO_RDF_TRIPLE_S);
 
-- Create the model.
execute SEM_APIS.create_sem_model(&#39;family&#39;, &#39;family_rdf_data&#39;, &#39;triple&#39;);
 
-- Insert rows into the table. These express the following information:
-----------------
-- John and Janice have two children, Suzie and Matt.
-- Matt married Martha, and they have two children:
--   Tom (male, height 5.75) and Cindy (female, height 06.00).
-- Suzie married Sammy, and they have two children:
--   Cathy (height 5.8) and Jack (male, height 6).
 
-- Person is a class that has two subslasses: Male and Female.
-- parentOf is a property that has two subproperties: fatherOf and motherOf.
-- siblingOf is a property that has two subproperties: brotherOf and sisterOf.
-- The domain of the fatherOf and brotherOf properties is Male.
-- The domain of the motherOf and sisterOf properties is Female.
------------------------
 
-- John is the father of Suzie.
INSERT INTO family_rdf_data VALUES (1, 
SDO_RDF_TRIPLE_S(&#39;family&#39;, 
&#39;&lt;http://www.example.org/family/John&gt;&#39;, 
&#39;&lt;http://www.example.org/family/fatherOf&gt;&#39;, 
&#39;&lt;http://www.example.org/family/Suzie&gt;&#39;));
 
-- John is the father of Matt.
INSERT INTO family_rdf_data VALUES (2, 
SDO_RDF_TRIPLE_S(&#39;family&#39;, 
&#39;&lt;http://www.example.org/family/John&gt;&#39;, 
&#39;&lt;http://www.example.org/family/fatherOf&gt;&#39;, 
&#39;&lt;http://www.example.org/family/Matt&gt;&#39;));
 
-- Janice is the mother of Suzie.
INSERT INTO family_rdf_data VALUES (3, 
SDO_RDF_TRIPLE_S(&#39;family&#39;, 
&#39;&lt;http://www.example.org/family/Janice&gt;&#39;, 
&#39;&lt;http://www.example.org/family/motherOf&gt;&#39;, 
&#39;&lt;http://www.example.org/family/Suzie&gt;&#39;));
 
-- Janice is the mother of Matt.
INSERT INTO family_rdf_data VALUES (4, 
SDO_RDF_TRIPLE_S(&#39;family&#39;, 
&#39;&lt;http://www.example.org/family/Janice&gt;&#39;, 
&#39;&lt;http://www.example.org/family/motherOf&gt;&#39;, 
&#39;&lt;http://www.example.org/family/Matt&gt;&#39;));
 
-- Sammy is the father of Cathy.
INSERT INTO family_rdf_data VALUES (5, 
SDO_RDF_TRIPLE_S(&#39;family&#39;, 
&#39;&lt;http://www.example.org/family/Sammy&gt;&#39;, 
&#39;&lt;http://www.example.org/family/fatherOf&gt;&#39;, 
&#39;&lt;http://www.example.org/family/Cathy&gt;&#39;));
 
-- Sammy is the father of Jack.
INSERT INTO family_rdf_data VALUES (6, 
SDO_RDF_TRIPLE_S(&#39;family&#39;, 
&#39;&lt;http://www.example.org/family/Sammy&gt;&#39;, 
&#39;&lt;http://www.example.org/family/fatherOf&gt;&#39;, 
&#39;&lt;http://www.example.org/family/Jack&gt;&#39;));
 
-- Suzie is the mother of Cathy.
INSERT INTO family_rdf_data VALUES (7, 
SDO_RDF_TRIPLE_S(&#39;family&#39;, 
&#39;&lt;http://www.example.org/family/Suzie&gt;&#39;, 
&#39;&lt;http://www.example.org/family/motherOf&gt;&#39;, 
&#39;&lt;http://www.example.org/family/Cathy&gt;&#39;));
 
-- Suzie is the mother of Jack.
INSERT INTO family_rdf_data VALUES (8, 
SDO_RDF_TRIPLE_S(&#39;family&#39;, 
&#39;&lt;http://www.example.org/family/Suzie&gt;&#39;, 
&#39;&lt;http://www.example.org/family/motherOf&gt;&#39;, 
&#39;&lt;http://www.example.org/family/Jack&gt;&#39;));
 
-- Matt is the father of Tom.
INSERT INTO family_rdf_data VALUES (9, 
SDO_RDF_TRIPLE_S(&#39;family&#39;, 
&#39;&lt;http://www.example.org/family/Matt&gt;&#39;, 
&#39;&lt;http://www.example.org/family/fatherOf&gt;&#39;, 
&#39;&lt;http://www.example.org/family/Tom&gt;&#39;));
 
-- Matt is the father of Cindy
INSERT INTO family_rdf_data VALUES (10, 
SDO_RDF_TRIPLE_S(&#39;family&#39;, 
&#39;&lt;http://www.example.org/family/Matt&gt;&#39;, 
&#39;&lt;http://www.example.org/family/fatherOf&gt;&#39;, 
&#39;&lt;http://www.example.org/family/Cindy&gt;&#39;));
 
-- Martha is the mother of Tom.
INSERT INTO family_rdf_data VALUES (11, 
SDO_RDF_TRIPLE_S(&#39;family&#39;, 
&#39;&lt;http://www.example.org/family/Martha&gt;&#39;, 
&#39;&lt;http://www.example.org/family/motherOf&gt;&#39;, 
&#39;&lt;http://www.example.org/family/Tom&gt;&#39;));
 
-- Martha is the mother of Cindy. 
INSERT INTO family_rdf_data VALUES (12, 
SDO_RDF_TRIPLE_S(&#39;family&#39;, 
&#39;&lt;http://www.example.org/family/Martha&gt;&#39;, 
&#39;&lt;http://www.example.org/family/motherOf&gt;&#39;, 
&#39;&lt;http://www.example.org/family/Cindy&gt;&#39;));
 
-- Cathy is the sister of Jack.
INSERT INTO family_rdf_data VALUES (13, 
SDO_RDF_TRIPLE_S(&#39;family&#39;, 
&#39;&lt;http://www.example.org/family/Cathy&gt;&#39;, 
&#39;&lt;http://www.example.org/family/sisterOf&gt;&#39;, 
&#39;&lt;http://www.example.org/family/Jack&gt;&#39;));
 
-- Jack is male.
INSERT INTO family_rdf_data VALUES (14, 
SDO_RDF_TRIPLE_S(&#39;family&#39;, 
&#39;&lt;http://www.example.org/family/Jack&gt;&#39;, 
&#39;&lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt;&#39;,
&#39;&lt;http://www.example.org/family/Male&gt;&#39;));
 
-- Tom is male.
INSERT INTO family_rdf_data VALUES (15, 
SDO_RDF_TRIPLE_S(&#39;family&#39;, 
&#39;&lt;http://www.example.org/family/Tom&gt;&#39;, 
&#39;&lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt;&#39;,
&#39;&lt;http://www.example.org/family/Male&gt;&#39;));
 
-- Cindy is female.
INSERT INTO family_rdf_data VALUES (16, 
SDO_RDF_TRIPLE_S(&#39;family&#39;, 
&#39;&lt;http://www.example.org/family/Cindy&gt;&#39;, 
&#39;&lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt;&#39;,
&#39;&lt;http://www.example.org/family/Female&gt;&#39;));
 
-- Person is a class.
INSERT INTO family_rdf_data VALUES (17, 
SDO_RDF_TRIPLE_S(&#39;family&#39;, 
&#39;&lt;http://www.example.org/family/Person&gt;&#39;, 
&#39;&lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt;&#39;,
&#39;&lt;http://www.w3.org/2000/01/rdf-schema#Class&gt;&#39;));
 
-- Male is a subclass of Person.
INSERT INTO family_rdf_data VALUES (18, 
SDO_RDF_TRIPLE_S(&#39;family&#39;, 
&#39;&lt;http://www.example.org/family/Male&gt;&#39;, 
&#39;&lt;http://www.w3.org/2000/01/rdf-schema#subClassOf&gt;&#39;,
&#39;&lt;http://www.example.org/family/Person&gt;&#39;));
 
-- Female is a subclass of Person. 
INSERT INTO family_rdf_data VALUES (19, 
SDO_RDF_TRIPLE_S(&#39;family&#39;, 
&#39;&lt;http://www.example.org/family/Female&gt;&#39;, 
&#39;&lt;http://www.w3.org/2000/01/rdf-schema#subClassOf&gt;&#39;,
&#39;&lt;http://www.example.org/family/Person&gt;&#39;));
 
-- siblingOf is a property.
INSERT INTO family_rdf_data VALUES (20, 
SDO_RDF_TRIPLE_S(&#39;family&#39;, 
&#39;&lt;http://www.example.org/family/siblingOf&gt;&#39;, 
&#39;&lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt;&#39;,
&#39;&lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#Property&gt;&#39;));
 
-- parentOf is a property.
INSERT INTO family_rdf_data VALUES (21, 
SDO_RDF_TRIPLE_S(&#39;family&#39;, 
&#39;&lt;http://www.example.org/family/parentOf&gt;&#39;, 
&#39;&lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt;&#39;,
&#39;&lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#Property&gt;&#39;));
 
-- brotherOf is a subproperty of siblingOf.
INSERT INTO family_rdf_data VALUES (22, 
SDO_RDF_TRIPLE_S(&#39;family&#39;, 
&#39;&lt;http://www.example.org/family/brotherOf&gt;&#39;, 
&#39;&lt;http://www.w3.org/2000/01/rdf-schema#subPropertyOf&gt;&#39;,
&#39;&lt;http://www.example.org/family/siblingOf&gt;&#39;));
 
-- sisterOf is a subproperty of siblingOf.
INSERT INTO family_rdf_data VALUES (23, 
SDO_RDF_TRIPLE_S(&#39;family&#39;, 
&#39;&lt;http://www.example.org/family/sisterOf&gt;&#39;, 
&#39;&lt;http://www.w3.org/2000/01/rdf-schema#subPropertyOf&gt;&#39;,
&#39;&lt;http://www.example.org/family/siblingOf&gt;&#39;));
 
-- A brother is male.
INSERT INTO family_rdf_data VALUES (24, 
SDO_RDF_TRIPLE_S(&#39;family&#39;, 
&#39;&lt;http://www.example.org/family/brotherOf&gt;&#39;, 
&#39;&lt;http://www.w3.org/2000/01/rdf-schema#domain&gt;&#39;,
&#39;&lt;http://www.example.org/family/Male&gt;&#39;));
 
-- A sister is female.
INSERT INTO family_rdf_data VALUES (25, 
SDO_RDF_TRIPLE_S(&#39;family&#39;, 
&#39;&lt;http://www.example.org/family/sisterOf&gt;&#39;, 
&#39;&lt;http://www.w3.org/2000/01/rdf-schema#domain&gt;&#39;,
&#39;&lt;http://www.example.org/family/Female&gt;&#39;));
 
-- fatherOf is a subproperty of parentOf.
INSERT INTO family_rdf_data VALUES (26, 
SDO_RDF_TRIPLE_S(&#39;family&#39;, 
&#39;&lt;http://www.example.org/family/fatherOf&gt;&#39;, 
&#39;&lt;http://www.w3.org/2000/01/rdf-schema#subPropertyOf&gt;&#39;,
&#39;&lt;http://www.example.org/family/parentOf&gt;&#39;));
 
-- motherOf is a subproperty of parentOf.
INSERT INTO family_rdf_data VALUES (27, 
SDO_RDF_TRIPLE_S(&#39;family&#39;, 
&#39;&lt;http://www.example.org/family/motherOf&gt;&#39;, 
&#39;&lt;http://www.w3.org/2000/01/rdf-schema#subPropertyOf&gt;&#39;,
&#39;&lt;http://www.example.org/family/parentOf&gt;&#39;));
 
-- A father is male.
INSERT INTO family_rdf_data VALUES (28, 
SDO_RDF_TRIPLE_S(&#39;family&#39;, 
&#39;&lt;http://www.example.org/family/fatherOf&gt;&#39;, 
&#39;&lt;http://www.w3.org/2000/01/rdf-schema#domain&gt;&#39;,
&#39;&lt;http://www.example.org/family/Male&gt;&#39;));
 
-- A mother is female.
INSERT INTO family_rdf_data VALUES (29, 
SDO_RDF_TRIPLE_S(&#39;family&#39;, 
&#39;&lt;http://www.example.org/family/motherOf&gt;&#39;, 
&#39;&lt;http://www.w3.org/2000/01/rdf-schema#domain&gt;&#39;,
&#39;&lt;http://www.example.org/family/Female&gt;&#39;));
 
-- Use SET ESCAPE OFF to prevent the caret (^) from being
-- interpreted as an escape character. Two carets (^^) are
-- used to represent typed literals.
SET ESCAPE OFF;
 
-- Cathy&#39;s height is 5.8 (decimal).
INSERT INTO family_rdf_data VALUES (30,
SDO_RDF_TRIPLE_S(&#39;family&#39;, 
&#39;&lt;http://www.example.org/family/Cathy&gt;&#39;, 
&#39;&lt;http://www.example.org/family/height&gt;&#39;,
&#39;&#34;5.8&#34;^^xsd:decimal&#39;));
 
-- Jack&#39;s height is 6 (integer).
INSERT INTO family_rdf_data VALUES (31,
SDO_RDF_TRIPLE_S(&#39;family&#39;, 
&#39;&lt;http://www.example.org/family/Jack&gt;&#39;, 
&#39;&lt;http://www.example.org/family/height&gt;&#39;,
&#39;&#34;6&#34;^^xsd:integer&#39;));
 
-- Tom&#39;s height is 05.75 (decimal).
INSERT INTO family_rdf_data VALUES (32,
SDO_RDF_TRIPLE_S(&#39;family&#39;, 
&#39;&lt;http://www.example.org/family/Tom&gt;&#39;, 
&#39;&lt;http://www.example.org/family/height&gt;&#39;,
&#39;&#34;05.75&#34;^^xsd:decimal&#39;));
 
-- Cindy&#39;s height is 06.00 (decimal).
INSERT INTO family_rdf_data VALUES (33,
SDO_RDF_TRIPLE_S(&#39;family&#39;, 
&#39;&lt;http://www.example.org/family/Cindy&gt;&#39;, 
&#39;&lt;http://www.example.org/family/height&gt;&#39;,
&#39;&#34;06.00&#34;^^xsd:decimal&#39;));
 
COMMIT;
 
-- RDFS inferencing in the family model
BEGIN
  SEM_APIS.CREATE_ENTAILMENT(
    &#39;rdfs_rix_family&#39;,
    SEM_Models(&#39;family&#39;),
    SEM_Rulebases(&#39;RDFS&#39;));
END;
/
 
-- Select all males from the family model, without inferencing.
SELECT m
  FROM TABLE(SEM_MATCH(
    &#39;{?m rdf:type :Male}&#39;,
    SEM_Models(&#39;family&#39;),
    null,
    SEM_ALIASES(SEM_ALIAS(&#39;&#39;,&#39;http://www.example.org/family/&#39;)),
    null));
 
-- Select all males from the family model, with RDFS inferencing.
SELECT m
  FROM TABLE(SEM_MATCH(
    &#39;{?m rdf:type :Male}&#39;,
    SEM_Models(&#39;family&#39;),
    SDO_RDF_Rulebases(&#39;RDFS&#39;), 
    SEM_ALIASES(SEM_ALIAS(&#39;&#39;,&#39;http://www.example.org/family/&#39;)),
    null));
 
-- General inferencing in the family model
 
EXECUTE SEM_APIS.CREATE_RULEBASE(&#39;family_rb&#39;);
 
INSERT INTO mdsys.semr_family_rb VALUES(
  &#39;grandparent_rule&#39;,
  &#39;(?x :parentOf ?y) (?y :parentOf ?z)&#39;,
  NULL,
  &#39;(?x :grandParentOf ?z)&#39;, 
  SEM_ALIASES(SEM_ALIAS(&#39;&#39;,&#39;http://www.example.org/family/&#39;)));
 
COMMIT;
 
-- Because a new rulebase has been created, and it will be used in the
-- entailment, drop the preceding entailment and then re-create it.
EXECUTE SEM_APIS.DROP_ENTAILMENT (&#39;rdfs_rix_family&#39;);
 
-- Re-create the entailment.
BEGIN
  SEM_APIS.CREATE_ENTAILMENT(
    &#39;rdfs_rix_family&#39;,
    SEM_Models(&#39;family&#39;),
    SEM_Rulebases(&#39;RDFS&#39;,&#39;family_rb&#39;));
END;
/
 
-- Select all grandfathers and their grandchildren from the family model, 
-- without inferencing. (With no inferencing, no results are returned.)
SELECT x grandfather, y grandchild
  FROM TABLE(SEM_MATCH(
    &#39;{?x :grandParentOf ?y . ?x rdf:type :Male}&#39;,
    SEM_Models(&#39;family&#39;),
    null, 
    SEM_ALIASES(SEM_ALIAS(&#39;&#39;,&#39;http://www.example.org/family/&#39;)),
    null));
 
-- Select all grandfathers and their grandchildren from the family model.
-- Use inferencing from both the RDFS and family_rb rulebases.
SELECT x grandfather, y grandchild
  FROM TABLE(SEM_MATCH(
    &#39;{?x :grandParentOf ?y . ?x rdf:type :Male}&#39;,
    SEM_Models(&#39;family&#39;),
    SEM_Rulebases(&#39;RDFS&#39;,&#39;family_rb&#39;), 
    SEM_ALIASES(SEM_ALIAS(&#39;&#39;,&#39;http://www.example.org/family/&#39;)),
    null));
 
-- Set up to find grandfathers of tall (&gt;= 6) grandchildren
-- from the family model, with RDFS inferencing and
-- inferencing using the &#34;family_rb&#34; rulebase.
 
UPDATE mdsys.semr_family_rb SET
  antecedents = &#39;(?x :parentOf ?y) (?y :parentOf ?z) (?z :height ?h)&#39;,
  filter = &#39;(h &gt;= &#39;&#39;6&#39;&#39;)&#39;,
  aliases = SEM_ALIASES(SEM_ALIAS(&#39;&#39;,&#39;http://www.example.org/family/&#39;))
WHERE rule_name = &#39;GRANDPARENT_RULE&#39;;
 
-- Because the rulebase has been updated, drop the preceding entailment, 
-- and then re-create it.
EXECUTE SEM_APIS.DROP_ENTAILMENT (&#39;rdfs_rix_family&#39;);
 
-- Re-create the entailment.
BEGIN
  SEM_APIS.CREATE_ENTAILMENT(
    &#39;rdfs_rix_family&#39;,
    SEM_Models(&#39;family&#39;),
    SEM_Rulebases(&#39;RDFS&#39;,&#39;family_rb&#39;));
END;
/
 
-- Find the entailment that was just created (that is, the
-- one based on the specified model and rulebases).
SELECT SEM_APIS.LOOKUP_ENTAILMENT(SEM_MODELS(&#39;family&#39;),
  SEM_RULEBASES(&#39;RDFS&#39;,&#39;family_rb&#39;)) AS lookup_entailment FROM DUAL;
 
-- Select grandfathers of tall (&gt;= 6) grandchildren, and their
-- tall grandchildren.
SELECT x grandfather, y grandchild
  FROM TABLE(SEM_MATCH(
    &#39;{?x :grandParentOf ?y . ?x rdf:type :Male}&#39;,
    SEM_Models(&#39;family&#39;),
    SEM_RuleBases(&#39;RDFS&#39;,&#39;family_rb&#39;), 
    SEM_ALIASES(SEM_ALIAS(&#39;&#39;,&#39;http://www.example.org/family/&#39;)), 
    null));
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="RDFRM613"></a><a id="RDFRM612"></a>
<div class="props_rev_3"><a id="GUID-F1D3E26F-93C8-4770-AE73-E699177AA8AA"></a>
<h2 id="RDFRM-GUID-F1D3E26F-93C8-4770-AE73-E699177AA8AA" class="sect2"><span class="enumeration_section">1.13</span> Software Naming Changes Since Release 11.1</h2>
<div>
<p>Because the support for semantic data has been expanded beyond the original focus on RDF, the names of many software objects (PL/SQL packages, functions and procedures, system tables and views, and so on) have been changed as of Oracle Database Release 11.1. In most cases, the change is to replace the string <span class="italic">RDF</span> with <span class="italic">SEM</span>. although in some cases it may be to replace <span class="italic">SDO_RDF</span> with <span class="italic">SEM</span>.</p>
<p><span class="italic"><span class="bold">All valid code that used the pre-Release 11.1 names will continue to work; your existing applications will not be broken.</span></span> However, it is suggested that you change old applications to use new object names, and you should use the new names for any new applications. This manual will document only the new names.</p>
<p><a href="rdf-overview.htm#GUID-F1D3E26F-93C8-4770-AE73-E699177AA8AA__CIHEJBFJ" title="Semantic Technology Software Objects: Old and New Names">Table 1-19</a> lists the old and new names for some objects related to support for semantic technologies, in alphabetical order by old name.</p>
<div class="tblformal" id="GUID-F1D3E26F-93C8-4770-AE73-E699177AA8AA__CIHEJBFJ">
<p class="titleintable">Table 1-19 Semantic Technology Software Objects: Old and New Names</p>
<table class="cellalignment4510" title="Semantic Technology Software Objects: Old and New Names" summary="Semantic Technology Software Objects: Old and New Names">
<thead>
<tr class="cellalignment4501">
<th class="cellalignment4573" id="d5610e12150">Old Name</th>
<th class="cellalignment4573" id="d5610e12153">New Name</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4501">
<td class="cellalignment4574" id="d5610e12158" headers="d5610e12150">
<p>RDF_ALIAS data type</p>
</td>
<td class="cellalignment4574" headers="d5610e12158 d5610e12153">
<p>SEM_ALIAS</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4574" id="d5610e12165" headers="d5610e12150">
<p>RDF_MODEL$ view</p>
</td>
<td class="cellalignment4574" headers="d5610e12165 d5610e12153">
<p>SEM_MODEL$</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4574" id="d5610e12172" headers="d5610e12150">
<p>RDF_RULEBASE_INFO view</p>
</td>
<td class="cellalignment4574" headers="d5610e12172 d5610e12153">
<p>SEM_RULEBASE_INFO</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4574" id="d5610e12179" headers="d5610e12150">
<p>RDF_RULES_INDEX_DATASETS view</p>
</td>
<td class="cellalignment4574" headers="d5610e12179 d5610e12153">
<p>SEM_RULES_INDEX_DATASETS</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4574" id="d5610e12186" headers="d5610e12150">
<p>RDF_RULES_INDEX_INFO view</p>
</td>
<td class="cellalignment4574" headers="d5610e12186 d5610e12153">
<p>SEM_RULES_INDEX_INFO</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4574" id="d5610e12193" headers="d5610e12150">
<p>RDFI_<span class="italic">rules-index-name</span> view</p>
</td>
<td class="cellalignment4574" headers="d5610e12193 d5610e12153">
<p>SEMI_<span class="italic">rules-index-name</span></p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4574" id="d5610e12205" headers="d5610e12150">
<p>RDFM_<span class="italic">model-name</span> view</p>
</td>
<td class="cellalignment4574" headers="d5610e12205 d5610e12153">
<p>SEMM_<span class="italic">model-name</span></p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4574" id="d5610e12217" headers="d5610e12150">
<p>RDFR_<span class="italic">rulebase-name</span> view</p>
</td>
<td class="cellalignment4574" headers="d5610e12217 d5610e12153">
<p>SEMR_<span class="italic">rulebase-name</span></p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4574" id="d5610e12229" headers="d5610e12150">
<p>SDO_RDF package</p>
</td>
<td class="cellalignment4574" headers="d5610e12229 d5610e12153">
<p>SEM_APIS</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4574" id="d5610e12236" headers="d5610e12150">
<p>SDO_RDF_INFERENCE package</p>
</td>
<td class="cellalignment4574" headers="d5610e12236 d5610e12153">
<p>SEM_APIS</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4574" id="d5610e12243" headers="d5610e12150">
<p>SDO_RDF_MATCH table function</p>
</td>
<td class="cellalignment4574" headers="d5610e12243 d5610e12153">
<p>SEM_MATCH</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4574" id="d5610e12251" headers="d5610e12150">
<p>SDO_RDF_MODELS data type</p>
</td>
<td class="cellalignment4574" headers="d5610e12251 d5610e12153">
<p>SEM_MODELS</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4574" id="d5610e12258" headers="d5610e12150">
<p>SDO_RDF_RULEBASES data type</p>
</td>
<td class="cellalignment4574" headers="d5610e12258 d5610e12153">
<p>SEM_RULEBASES</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
</div>
<a id="RDFRM213"></a>
<div class="props_rev_3"><a id="GUID-B08C0424-A3FD-467B-87D9-087A1974B770"></a>
<h2 id="RDFRM-GUID-B08C0424-A3FD-467B-87D9-087A1974B770" class="sect2"><span class="enumeration_section">1.14</span> For More Information About RDF Semantic Graph</h2>
<div>
<p>For more information about RDF Semantic Graph support and related topics, you may find the following resources helpful:</p>
<ul style="list-style-type: disc;">
<li>
<p><a id="d5610e12306" class="indexterm-anchor"></a><a id="d5610e12310" class="indexterm-anchor"></a><a id="d5610e12314" class="indexterm-anchor"></a>Oracle Spatial and Graph RDF Semantic Graph page (OTN), which includes links for downloads, technical and business white papers, a discussion forum, and other sources of information: <a href="http://www.oracle.com/technetwork/database/options/spatialandgraph/overview/rdfsemantic-graph-1902016.html" target="_blank"><code class="codeph">http://www.oracle.com/technetwork/database/options/spatialandgraph/overview/rdfsemantic-graph-1902016.html</code></a></p>
</li>
<li>
<p>World Wide Web Consortium (W3C) <span class="italic">RDF Primer</span>: <a href="http://www.w3.org/TR/rdf-primer/" target="_blank"><code class="codeph">http://www.w3.org/TR/rdf-primer/</code></a></p>
</li>
<li>
<p>World Wide Web Consortium (W3C) <span class="italic">OWL Web Ontology Language Reference</span>: <a href="http://www.w3.org/TR/owl-ref/" target="_blank"><code class="codeph">http://www.w3.org/TR/owl-ref/</code></a></p>
</li>
</ul>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4500">
<tr>
<td class="cellalignment4507">
<table class="cellalignment4505">
<tr>
<td class="cellalignment4504"><a href="part-concept-usage.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4504"><a href="owl-concepts.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2005, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4509">
<table class="cellalignment4503">
<tr>
<td class="cellalignment4504"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4504"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4504"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4504"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4504"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4504"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>