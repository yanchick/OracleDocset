<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-88532"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Fine-Grained%20Access%20Control%20for%20RDF%20Data"></a><title>Fine-Grained Access Control for RDF Data</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="keywords" content="Oracle Label Security (OLS), using with RDF data, triple-level security, triple-level security, resource-level security, resource-level security, RDFOLS_SECURE_RESOURCE view"/>
<meta name="dcterms.created" content="2017-06-29T10:38:43Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Spatial and Graph RDF Semantic Graph Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E51611-08"/>
<meta name="dcterms.isVersionOf" content="RDFRM"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2005, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="semantic-indexing-docs.htm" title="Previous" type="text/html"/>
<link rel="Next" href="wm-rdf.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E51611-08.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-7F7007CB-F6CA-4AD4-B30D-4AC9EF4DB8D8"></a> <span id="PAGE" style="display:none;">12/28</span> <!-- End Header -->
<a id="RDFRM99956"></a><a id="RDFRM99941"></a>
<h1 id="RDFRM-GUID-7F7007CB-F6CA-4AD4-B30D-4AC9EF4DB8D8" class="sect1"><span class="enumeration_chapter">5</span> Fine-Grained Access Control for RDF Data</h1>
<div>
<p>The default control of access to the Oracle Database semantic data store is at the model level: the owner of a model can grant select, delete, and insert privileges on the model to other users by granting appropriate privileges on the view named RDFM_<span class="italic">&lt;model_name&gt;</span>. However, for applications with stringent security requirements, you can enforce a fine-grained access control mechanism by using the Oracle Label Security option of Oracle Database:</p>
<p>Oracle Label Security (OLS) for RDF data allows sensitivity labels to be associated with individual triples stored in an RDF model. For each query, access to specific triples is granted by comparing their labels with the user&#39;s session labels. Furthermore, a minimum sensitivity label for all triple describing a specific resource or all triples defined with a specific predicate can be enforced by assigning a sensitivity label directly to the resource or the predicate, respectively.</p>
<p>For information about using OLS, see <a class="olink OLSAG" target="_blank" href="../OLSAG/toc.htm"><span class="italic">Oracle Label Security Administrator&#39;s Guide</span></a>.</p>
<div class="infobox-note" id="GUID-7F7007CB-F6CA-4AD4-B30D-4AC9EF4DB8D8__GUID-4E4BAA86-4FB8-4467-AC45-A6BF700D71A3">
<p class="notep1">Note:</p>
<p>Effective with Oracle Database Release 12<span class="italic">c</span> (12.1), Virtual Private Database (VPD) support in RDF Semantic Graph is deprecated for providing fine-grained access control, and will be removed in an upcoming major release. (Meanwhile, <a href="rdf-vpd.htm#GUID-AB0B079B-4334-49FE-B3D2-FB72C438735C">Virtual Private Database Support in RDF Semantic Graph</a> contains information about this deprecated support.)</p>
<p>You should not develop new RDF Semantic Graph applications that depend on VPD, and you should transition existing RDF Semantic Graph applications that depend on VPD to use Oracle Label Security (OLS) instead.</p>
<p>For more information, see My Oracle Support Note <a href="https://support.oracle.com/CSP/main/article?cmd=show&amp;type=NOT&amp;id=1468273.1" target="_blank"><span>1468273.1</span></a>.</p>
</div>
<p>Oracle Label Security (OLS) for RDF data provides two options for securing semantic data:</p>
<ul style="list-style-type: disc;">
<li>
<p>Triple-level security (explained in <a href="fine-grained-access.htm#GUID-3514B1AC-B47C-4AE6-A7A1-C2D57C22E4B7">Triple-Level Security</a>), which is highly recommended for its performance and ease of use</p>
</li>
<li>
<p>Resource-level security (explained in <a href="fine-grained-access.htm#GUID-F3E8D47D-CF60-47FB-BA86-3AABBCB54916">Resource-Level Security</a>), which is generally not recommended</p>
</li>
</ul>
<p>To specify an option, use the <a href="sem-rdfsa-ref.htm#GUID-FBF39A4D-A2AC-45B6-B81C-B5F09FD47454">SEM_RDFSA.APPLY_OLS_POLICY</a> procedure with the appropriate <code class="codeph">rdfsa_options</code> parameter value.</p>
<p>To switch from one option to the other, remove the existing policy by using the <a href="sem-rdfsa-ref.htm#GUID-BBBD75EC-5A5C-44F0-8462-A36A5E1C0AB2">SEM_RDFSA.REMOVE_OLS_POLICY</a> procedure, and then apply the new policy by using the <a href="sem-rdfsa-ref.htm#GUID-FBF39A4D-A2AC-45B6-B81C-B5F09FD47454">SEM_RDFSA.APPLY_OLS_POLICY</a> procedure with the appropriate <code class="codeph">rdfsa_options</code> parameter value.</p>
</div>
<a id="RDFRM232"></a>
<div class="props_rev_3"><a id="GUID-3514B1AC-B47C-4AE6-A7A1-C2D57C22E4B7"></a>
<h2 id="RDFRM-GUID-3514B1AC-B47C-4AE6-A7A1-C2D57C22E4B7" class="sect2"><span class="enumeration_section">5.1</span> Triple-Level Security</h2>
<div>
<p>The triple-level security option provides a thin layer of RDF-specific capabilities on top of the Oracle Database native support for label security. This option provides better performance and is easier to use than the resource-level security (described in <a href="fine-grained-access.htm#GUID-F3E8D47D-CF60-47FB-BA86-3AABBCB54916">Resource-Level Security</a>), especially for performing inference while using OLS. The main difference is that with triple-level security there is no need to assign labels, explicitly or implicitly, to individual triple resources (subjects, properties, objects).</p>
<p>To use triple-level security, specify <code class="codeph">SEM_RDFSA.TRIPLE_LEVEL_ONLY</code> as the <code class="codeph">rdfsa_options</code> parameter value when you execute the <a href="sem-rdfsa-ref.htm#GUID-FBF39A4D-A2AC-45B6-B81C-B5F09FD47454">SEM_RDFSA.APPLY_OLS_POLICY</a> procedure. For example:</p>
<pre dir="ltr">EXECUTE sem_rdfsa.apply_ols_policy(&#39;defense&#39;, <span class="bold">SEM_RDFSA.TRIPLE_LEVEL_ONLY</span>);
</pre>
<p>Do not specify any of the other available parameters for the <a href="sem-rdfsa-ref.htm#GUID-FBF39A4D-A2AC-45B6-B81C-B5F09FD47454">SEM_RDFSA.APPLY_OLS_POLICY</a> procedure.</p>
<p>When you use triple-level security, OLS is applied to each semantic model in the network. That is, label security is applied to the relevant internal tables and to all the application tables; there is no need to manually apply policies to the application tables of existing semantic models. However, if you need to create additional models after applying the OLS policy, you must use the <a href="sem-ols-ref.htm#GUID-37AC9E4E-7B0E-4868-80ED-1897DC1BA1ED">SEM_OLS.APPLY_POLICY_TO_APP_TAB</a> procedure to apply OLS to the application table before creating the model. Similarly, if you have dropped a semantic model and you no longer need to protect the application table, you can use the <a href="sem-ols-ref.htm#GUID-35FE7319-0165-452B-8D59-FD230F2937D6">SEM_OLS.REMOVE_POLICY_FROM_APP_TAB</a> procedure. (These procedures are described in <a href="sem-ols-ref.htm#GUID-4A79F61D-9101-4291-980A-7D46A030116B">SEM_OLS Package Subprograms</a>.)</p>
<p>With triple-level security, duplicate triples with different labels can be inserted in the semantic model. (Such duplicates are not allowed with resource-level security.) For example, assume that you have a triple with a very sensitive label, such as:</p>
<pre dir="ltr">(&lt;urn:X&gt;,&lt;urn:P&gt;,&lt;urn:Y&gt;, &#34;TOPSECRET&#34;)
</pre>
<p>This does not prevent a low-privileged (<code class="codeph">UNCLASSIFIED</code>) user from inserting the triple <code class="codeph">(&lt;urn:X&gt;,&lt;urn:P&gt;,&lt;urn:Y&gt;, &#34;UNCLASSIFIED&#34;)</code>. Because SPARQL and SEM_MATCH do not return label information, a query will return both rows (assuming the user has appropriate privileges), and it will not be easy to distinguish between the <code class="codeph">TOPSECRET</code> and <code class="codeph">UNCLASSIFIED</code> triples.</p>
<p>To filter out such low-security triples when querying the semantic models, you can one or more the following options with SEM_MATCH:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">POLICY_NAME</code> specifies the OLS policy name.</p>
</li>
<li>
<p><code class="codeph">MIN_LABEL</code> specifies the minimum label for triples that are included in the query</p>
</li>
</ul>
<p>In other words, every triple that contains a label that is strictly dominated by <code class="codeph">MIN_LABEL</code> is not included in the query. For example, to filter out the &#34;UNCLASSIFIED&#34; triple, you could use the following query (assuming the OLS policy name is <code class="codeph">DEFENSE</code> and that the query user has read privileges over <code class="codeph">UNCLASSIFIED</code> and <code class="codeph">TOPSECRET</code> triples):</p>
<pre dir="ltr">SELECT s,p,y FROM table(sem_match(&#39;{?s ?p ?y}&#39; , 
  sem_models(TEST&#39;), null, null, null, null, 
  &#39;MIN_LABEL=TOPSECRET POLICY_NAME=DEFENSE&#39;));
</pre>
<p>Note that the filtering in the preceding example occurs in addition to the security checks performed by the native OLS software.</p>
<p>After a triple has been inserted, you can view and update the label information through the <code class="codeph">CTXT1</code> column in the application table for the semantic model (assuming that you have the <code class="codeph">WRITEUP</code> and <code class="codeph">WRITEDOWN</code> privileges to modify the labels).</p>
<p>There are no restrictions on who can perform inference or bulk loading with triple-level security; all of the inferred or bulk loaded triples are inserted with the user&#39;s session row label. Note that you can change the session labels by using the SA_UTL package. (For more information, see <a class="olink OLSAG" target="_blank" href="../OLSAG/toc.htm"><span class="italic">Oracle Label Security Administrator&#39;s Guide</span></a>.)</p>
</div>
<a id="RDFRM453"></a><a id="RDFRM454"></a><a id="RDFRM452"></a>
<div class="props_rev_3"><a id="GUID-25AB7D8D-3691-405B-8785-B3F8DD459034"></a>
<h3 id="RDFRM-GUID-25AB7D8D-3691-405B-8785-B3F8DD459034" class="sect3"><span class="enumeration_section">5.1.1</span> Fine-Grained Security for Inferred Data and Ladder-Based Inference (LBI)</h3>
<div>
<p>When triple-level security is turned on for RDF data stored in Oracle Database, asserted facts are tagged with data labels to enforce mandatory access control. In addition, when a user invokes the forward-chaining based inference function through the <a href="sem-apis-ref.htm#GUID-BF52CEC0-1BD9-4908-9EF1-F001B0527257">SEM_APIS.CREATE_ENTAILMENT</a> procedure, the newly inferred relationships will be tagged with the current row label (<code class="codeph">SA_UTL.NUMERIC_ROW_LABEL</code>).</p>
<p>These newly inferred relationships are derived solely based on the information that the user is allowed to access. These relationships do, however, share the same data label. This is understandable because a <a href="sem-apis-ref.htm#GUID-BF52CEC0-1BD9-4908-9EF1-F001B0527257">SEM_APIS.CREATE_ENTAILMENT</a> call can be viewed as a three-step process: read operation, followed by a logical inference computation, followed by a write operation. The read operation gathers information upon which inference computation is based, and it is restricted by access privileges, the user&#39;s label, and the data labels; the logical inference computation step is purely mathematical; and the final write of inferred information into the entailed graph is no different from the same user asserting some new facts (which happen to be calculated by the previous step).</p>
<p>Having all inferred assertions tagged with a single label is sufficient if a user only owns a single label. It is, however, not fine-grained enough when there are multiple labels owned by the same user, which is a common situation in a multitenancy setup.</p>
<p>For example, assume a user sets its user label and data label as <code class="codeph">TopSecret</code>, invokes <a href="sem-apis-ref.htm#GUID-BF52CEC0-1BD9-4908-9EF1-F001B0527257">SEM_APIS.CREATE_ENTAILMENT</a>, switches to a weaker label named <code class="codeph">Secret</code>, and finally performs a SPARQL query. The query will not be able to see any of those newly inferred relationships because they were all tagged with the <code class="codeph">TopSecret</code> label. However, if the user switches back to the <code class="codeph">TopSecret</code> label, now every single inferred relationship is visible. It is &#34;all or nothing&#34; (that is, all visible or nothing visible) as far as inferred relationships are concerned.</p>
<p>When multiple labels are available for use by a given user, you normally want to assign different labels to different inferred relationships. There are two ways to achieve this goal:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="fine-grained-access.htm#GUID-25AB7D8D-3691-405B-8785-B3F8DD459034__CIHGHBBF">Invoking SEM_APIS.CREATE_ENTAILMENT Multiple Times</a></p>
</li>
<li>
<p><a href="fine-grained-access.htm#GUID-25AB7D8D-3691-405B-8785-B3F8DD459034__CIHDBBBC">Using Ladder-Based Inference (LBI)</a></p>
</li>
</ul>
<p>Ladder-based inference, effective with Oracle Database 12<span class="italic">c</span> Release 1 (12.1), is probably the simpler and more convenient of the two approaches.</p>
<div class="section" id="GUID-25AB7D8D-3691-405B-8785-B3F8DD459034__CIHGHBBF">
<p class="subhead3">Invoking SEM_APIS.CREATE_ENTAILMENT Multiple Times</p>
</div>
<!-- class="section" -->
<div class="section">
<p>Assume a security policy named DEFENSE, a user named SCOTT, and a sequence of user labels Label1, Label2,..., Label<span class="italic">n</span> owned by SCOTT. The following call by SCOTT sets the label as Label1, runs the inference for the first time, and tags the newly inferred triples with Label1:</p>
<pre dir="ltr">EXECUTE sa_utl.set_label(&#39;defense&#39;,char_to_label(&#39;defense&#39;,&#39;Label1&#39;));
EXECUTE sa_utl.set_row_label(&#39;defense&#39;,char_to_label(&#39;defense&#39;,&#39;Label1&#39;));
EXECUTE sem_apis.create_entailment(&#39;inf&#39;, sem_models(&#39;contracts&#39;), sem_rulebases(&#39;owlprime&#39;), SEM_APIS.REACH_CLOSURE, null,&#39;&#39;);
</pre>
<p>Now, SCOTT switches the label to Label2, runs the inference a second time, and tags the newly inferred triples with Label2. Obviously, if Label2 is dominated by Label1, then no new triples will be inferred because Label2 cannot see anything beyond what Label1 is allowed to see. If Label2 is not dominated by Label1, the read step of the inference process will probably see a different set of triples, and consequently the inference call can produce some new triples, which will in turn be tagged with Label2.</p>
<p>For the purpose of this example, assume the following condition holds true: for any 1 &lt;= <span class="italic">i</span> &lt; <span class="italic">j</span> &lt;= <span class="italic">n</span>, Label<span class="italic">j</span> is not dominated by Label<span class="italic">i</span>.</p>
<pre dir="ltr">EXECUTE sa_utl.set_label(&#39;defense&#39;,char_to_label(&#39;defense&#39;,&#39;Label2&#39;));
EXECUTE sa_utl.set_row_label(&#39;defense&#39;,char_to_label(&#39;defense&#39;,&#39;Label2&#39;));
EXECUTE sem_apis.create_entailment(&#39;inf&#39;, sem_models(&#39;contracts&#39;), sem_rulebases(&#39;owlprime&#39;), SEM_APIS.REACH_CLOSURE, null, &#39;ENTAIL_ANYWAY=T&#39;);
</pre>
<p>SCOTT continues the preceding actions using the rest of the labels in the label sequence: Label1, Label2, ..., Label<span class="italic">n</span>. The last step will be as follows:</p>
<pre dir="ltr">EXECUTE sa_utl.set_label(&#39;defense&#39;,char_to_label(&#39;defense&#39;,&#39;Label<span class="italic">n</span>&#39;));
EXECUTE sa_utl.set_row_label(&#39;defense&#39;,char_to_label(&#39;defense&#39;,&#39;Label<span class="italic">n</span>&#39;));
EXECUTE sem_apis.create_entailment(&#39;inf&#39;, sem_models(&#39;contracts&#39;), sem_rulebases(&#39;owlprime&#39;), SEM_APIS.REACH_CLOSURE, null, &#39;ENTAIL_ANYWAY=T&#39;);
</pre>
<p>After all these actions are performed, the inference graph probably consists of triples tagged with various different labels.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-25AB7D8D-3691-405B-8785-B3F8DD459034__CIHDBBBC">
<p class="subhead3">Using Ladder-Based Inference (LBI)</p>
</div>
<!-- class="section" -->
<div class="section">
<p>Basically, ladder-based inference (LBI) wraps in one API call all the actions described in the <a href="fine-grained-access.htm#GUID-25AB7D8D-3691-405B-8785-B3F8DD459034__CIHGHBBF">Invoking SEM_APIS.CREATE_ENTAILMENT Multiple Times</a> approach. Visually, those actions are like climbing up a ladder. When proceeding from one label to the next, more asserted facts become visible or accessible (assuming the new label is not dominated by any of the previous ones), and therefore new relationships can be inferred.</p>
<p>The syntax to invoke LBI is shown in the following example.</p>
<pre dir="ltr">EXECUTE sem_apis.create_entailment(&#39;inf&#39;,
  sem_models(&#39;contracts&#39;),
  sem_rulebases(&#39;owlprime&#39;),
  SEM_APIS.REACH_CLOSURE,
  null,
  null,
  ols_ladder_inf_lbl_seq=&gt;&#39;numericLabel1 numericLabel2 numericLabel3 numericLabel4&#39;
);
</pre>
<p>The parameter <code class="codeph">ols_ladder_inf_lbl_seq</code> specifies a sequence of labels. This sequence is provided as a list of numeric labels delimited by spaces. When using LBI, it is a good practice to arrange the sequence of labels so that weaker labels are put before stronger labels. This will reduce the size of the inferred graph. (If labels do not dominate each other, they can be specified in any order.)</p>
</div>
<!-- class="section" --></div>
</div>
<a id="RDFRM412"></a>
<div class="props_rev_3"><a id="GUID-B0E89A2D-1509-468E-ACD4-4534FF2E2C70"></a>
<h3 id="RDFRM-GUID-B0E89A2D-1509-468E-ACD4-4534FF2E2C70" class="sect3"><span class="enumeration_section">5.1.2</span> Extended Example: Applying OLS Triple-Level Security on Semantic Data</h3>
<div>
<p>This section presents an extended example illustrating how to apply OLS triple-level security to semantic data. It assumes that OLS has been configured and enabled. The examples are very simplified, and do not reflect recommended practices regarding user names and passwords.</p>
<p>Unless otherwise indicated, perform the steps while connected AS SYSDBA.</p>
<ol>
<li>
<p>Perform some necessary setup steps.</p>
<ol>
<li>
<p>As SYSDBA, create database users named A, B, and C.</p>
<pre dir="ltr">create user a identified by <span class="italic">&lt;password-for-a&gt;</span>;
grant connect, unlimited tablespace, resource to a;
create user b identified by <span class="italic">&lt;password-for-b&gt;</span>;
grant connect, unlimited tablespace, resource to b;
create user c identified by <span class="italic">&lt;password-for-c&gt;</span>;
grant connect, unlimited tablespace, resource to c;
</pre></li>
<li>
<p>As SYSDBA, create a security administrator and grant privileges.</p>
<pre dir="ltr">CREATE USER fgac_admin identified by &lt;password-for-fgac_admin&gt;; 
GRANT connect, unlimited tablespace,resource to fgac_admin;
GRANT SELECT ON mdsys.rdf_link$ to fgac_admin;
GRANT EXECUTE ON sa_components TO fgac_admin;
GRANT EXECUTE ON sa_user_admin TO fgac_admin;
GRANT EXECUTE ON sa_label_admin TO fgac_admin;
GRANT EXECUTE ON sa_policy_admin TO fgac_admin;
GRANT EXECUTE ON sa_sysdba to fgac_admin;
GRANT EXECUTE ON TO_LBAC_DATA_LABEL to fgac_admin;
GRANT lbac_dba to fgac_admin;
</pre></li>
<li>
<p>Connect as the security administrator and create a policy named defense.</p>
<pre dir="ltr">CONNECT fgac_admin/&lt;password-for-fgac_admin&gt;
EXECUTE SA_SYSDBA.CREATE_POLICY(&#39;defense&#39;,&#39;ctxt1&#39;);
</pre></li>
<li>
<p>Create three security levels (For simplicity, compartments and groups are omitted.)</p>
<pre dir="ltr">EXECUTE SA_COMPONENTS.CREATE_LEVEL(&#39;defense&#39;,3000,&#39;TS&#39;,&#39;TOP SECRET&#39;);
EXECUTE SA_COMPONENTS.CREATE_LEVEL(&#39;defense&#39;,2000,&#39;SE&#39;,&#39;SECRET&#39;);
EXECUTE SA_COMPONENTS.CREATE_LEVEL(&#39;defense&#39;,1000,&#39;UN&#39;,&#39;UNCLASSIFIED&#39;);
</pre></li>
<li>
<p>Create three labels.</p>
<pre dir="ltr">EXECUTE SA_LABEL_ADMIN.CREATE_LABEL(&#39;defense&#39;,1000,&#39;UN&#39;);
EXECUTE SA_LABEL_ADMIN.CREATE_LABEL(&#39;defense&#39;,1500,&#39;SE&#39;);
EXECUTE SA_LABEL_ADMIN.CREATE_LABEL(&#39;defense&#39;,3100,&#39;TS&#39;);
</pre></li>
<li>
<p>Assign labels and privileges.</p>
<pre dir="ltr">EXECUTE SA_USER_ADMIN.SET_USER_LABELS(&#39;defense&#39;,&#39;A&#39;,&#39;UN&#39;);
EXECUTE SA_USER_ADMIN.SET_USER_LABELS(&#39;defense&#39;,&#39;B&#39;,&#39;SE&#39;);
EXECUTE SA_USER_ADMIN.SET_USER_LABELS(&#39;defense&#39;,&#39;C&#39;,&#39;TS&#39;);
EXECUTE SA_USER_ADMIN.SET_USER_LABELS(&#39;defense&#39;,&#39;fgac_admin&#39;,&#39;TS&#39;);
EXECUTE SA_USER_ADMIN.SET_USER_PRIVS(&#39;defense&#39;,&#39;FGAC_ADMIN&#39;, &#39;full&#39;);
</pre></li>
</ol>
</li>
<li>
<p>Create a semantic model.</p>
<ol>
<li>
<p>Create a model and share it with some other users.</p>
<pre dir="ltr">CONNECT a/&lt;password-for-a&gt;
CREATE TABLE project_tpl (triple sdo_rdf_triple_s) compress for oltp;
EXECUTE sem_apis.create_sem_model(&#39;project&#39;, &#39;project_tpl&#39;, &#39;triple&#39;);
GRANT select on mdsys.rdfm_project to B;
GRANT select on mdsys.rdfm_project to C;
GRANT select, insert, update, delete on project_tpl to B, C;
</pre></li>
<li>
<p>Ensure that the bulk loading API can be executed.</p>
<pre dir="ltr">GRANT insert on project_tpl to mdsys;
</pre></li>
</ol>
</li>
<li>
<p>Apply the OLS policy for RDF.</p>
<pre dir="ltr">CONNECT fgac_admin/fgac_admin
BEGIN
  sem_rdfsa.apply_ols_policy(&#39;defense&#39;, sem_rdfsa.TRIPLE_LEVEL_ONLY);
END;
/
</pre>
<p>Note that the application table now has an extra column named CTXT1:</p>
<pre dir="ltr">CONNECT a/&lt;password-for-a&gt;a
DESCRIBE project_tpl;
Name                                      Null?    Type
----------------------------------------- -------- --------------------------
 TRIPLE                                             PUBLIC.SDO_RDF_TRIPLE_S
 CTXT1                                              NUMBER(10)
</pre></li>
<li>
<p>Add data to the semantic model.</p>
<pre dir="ltr">-- User A uses incremental APIs to add semantic data
connnect a/&lt;password-for a) 
INSERT INTO project_tpl(triple) values
  (sdo_rdf_triple_s(&#39;project&#39;,&#39;&lt;urn:A&gt;&#39;,&#39;&lt;urn:hasManager&gt;&#39;,&#39;&lt;urn:B&gt;&#39;)); 
INSERT INTO project_tpl(triple) values
  (sdo_rdf_triple_s(&#39;project&#39;,&#39;&lt;urn:B&gt;&#39;,&#39;&lt;urn:hasManager&gt;&#39;,&#39;&lt;urn:C&gt;&#39;));
INSERT INTO project_tpl(triple) values
   (sdo_rdf_triple_s(&#39;project&#39;,&#39;&lt;urn:A&gt;&#39;,&#39;&lt;urn:expenseReportAmount&gt;&#39;,&#39;&#34;100&#34;&#39;));
INSERT INTO project_tpl(triple) values 
  (sdo_rdf_triple_s(&#39;project&#39;,&#39;&lt;urn:expenseReportAmount&gt;&#39;,&#39;rdfs:subPropertyOf&#39;,&#39;&lt;urn:projExp&gt;&#39;));
COMMIT;

-- User B uses bulk API to add semantic data 
connect b/&lt;password-for-b&gt;
CREATE TABLE  project_stab(RDF$STC_GRAPH varchar2(4000),
RDF$STC_sub varchar2(4000),
RDF$STC_pred varchar2(4000),
RDF$STC_obj varchar2(4000)) compress;
GRANT select on project_stab to mdsys;

-- For simplicity, data types are omitted.
INSERT INTO project_stab values(null, &#39;&lt;urn:B&gt;&#39;,&#39;&lt;urn:expenseReportAmount&gt;&#39;,&#39;&#34;200&#34;&#39;); 
INSERT INTO project_stab values(null, &#39;&lt;urn:proj1&gt;&#39;,&#39;&lt;urn:deadline&gt;&#39;,&#39;&#34;2012-12-25&#34;&#39;);
EXECUTE sem_apis.bulk_load_from_staging_table(&#39;project&#39;,&#39;b&#39;,&#39;project_stab&#39;);

-- As User B, check the contents in the application table
 connect b/&lt;password-for-b&gt; 
SELECT * from a.project_tpl order by ctxt1;
 
SDO_RDF_TRIPLE_S(8.5963E+18, 7, 1.4711E+18, 2.0676E+18, 8.5963E+18)    1000
SDO_RDF_TRIPLE_S(5.1676E+18, 7, 8.5963E+18, 2.0676E+18, 5.1676E+18)    1000
SDO_RDF_TRIPLE_S(2.3688E+18, 7, 1.4711E+18, 4.6588E+18, 2.3688E+18)    1000
SDO_RDF_TRIPLE_S(7.6823E+18, 7, 4.6588E+18, 1.1911E+18, 7.6823E+18)    1000
SDO_RDF_TRIPLE_S(6.6322E+18, 7, 8.5963E+18, 4.6588E+18, 6.6322E+18)    1500
SDO_RDF_TRIPLE_S(8.4800E+18, 7, 6.2294E+18, 5.4118E+18, 8.4800E+18)    1500
 
6 rows selected.
SELECT count(1) from mdsys.rdfm_project;
6
 
-- As User A, check the contents in the application table
-- As expected, A can only see 4 triples
SQL&gt; conn a/&lt;password&gt;
SQL&gt; select * from a.project_tpl order by ctxt1;
SDO_RDF_TRIPLE_S(8.5963E+18, 7, 1.4711E+18, 2.0676E+18, 8.5963E+18)    1000
 
SDO_RDF_TRIPLE_S(5.1676E+18, 7, 8.5963E+18, 2.0676E+18, 5.1676E+18)    1000
 
SDO_RDF_TRIPLE_S(2.3688E+18, 7, 1.4711E+18, 4.6588E+18, 2.3688E+18)    1000
 
SDO_RDF_TRIPLE_S(7.6823E+18, 7, 4.6588E+18, 1.1911E+18, 7.6823E+18)    1000
 
SQL&gt; select count(1) from mdsys.rdfm_project;
4
 
-- User C uses incremental APIs to add semantic data including 2 quads 
connect c/&lt;password-for-c&gt;
INSERT INTO a.project_tpl(triple) values
  (sdo_rdf_triple_s(&#39;project&#39;,&#39;&lt;urn:C&gt;&#39;,&#39;&lt;urn:expenseReportAmount&gt;&#39;,&#39;&#34;400&#34;&#39;));
INSERT INTO a.project_tpl(triple) values
  (sdo_rdf_triple_s(&#39;project&#39;,&#39;&lt;urn:proj1&gt;&#39;,&#39;&lt;urn:hasBudget&gt;&#39;,&#39;&#34;10000&#34;&#39;));
INSERT INTO a.project_tpl(triple) values
  (sdo_rdf_triple_s(&#39;project:&lt;urn:proj2&gt;&#39;,&#39;&lt;urn:proj2&gt;&#39;,&#39;&lt;urn:hasBudget&gt;&#39;,&#39;&#34;20000&#34;&#39;));
INSERT INTO a.project_tpl(triple) values
  (sdo_rdf_triple_s(&#39;project:&lt;urn:proj2&gt;&#39;,&#39;&lt;urn:proj2&gt;&#39;,&#39;&lt;urn:dependsOn&gt;&#39;,&#39;&lt;urn:proj1&gt;&#39;));
COMMIT;
</pre></li>
<li>
<p>Query the data as different users using the default label.</p>
<pre dir="ltr">-- Now as user A, B, C, execute the following query 
select lpad(nvl(g, &#39; &#39;), 20) || &#39; &#39; || s || &#39; &#39; || p || &#39; &#39; || o from table(sem_match(&#39;{ graph ?g { ?s ?p ?o }}&#39;,
sem_models(&#39;project&#39;),
null,
null,
null,
null,
&#39;GRAPH_MATCH_UNNAMED=T&#39;
            ))
order by g, s, p, o;
 
connect  a/&lt;password-for-a&gt;
-- Repeat the preceding query
SQL&gt; /
 
urn:A urn:expenseReportAmount 100
urn:A urn:hasManager urn:B
urn:B urn:hasManager urn:C
urn:expenseReportAmount http://www.w3.org/2000/01/rdf-schema#subPropertyOf urn:projExp
SQL&gt; connect  b/&lt;password-for-b&gt;
SQL&gt; /
 
urn:A urn:expenseReportAmount 100
urn:A urn:hasManager urn:B
urn:B urn:expenseReportAmount 200
urn:B urn:hasManager urn:C
urn:expenseReportAmount http://www.w3.org/2000/01/rdf-schema#subPropertyOf urn:projExp
urn:proj1 urn:deadline 2012-12-25
SQL&gt; connect  c/&lt;password-for-c&gt;
SQL&gt; /
 
urn:proj2 urn:proj2 urn:dependsOn urn:proj1
urn:proj2 urn:proj2 urn:hasBudget 20000
urn:A urn:expenseReportAmount 100
urn:A urn:hasManager urn:B
urn:B urn:expenseReportAmount 200
urn:B urn:hasManager urn:C
urn:C urn:expenseReportAmount 400
urn:expenseReportAmount http://www.w3.org/2000/01/rdf-schema#subPropertyOf urn:projExp
urn:proj1 urn:deadline 2012-12-25
urn:proj1 urn:hasBudget 10000
</pre>
<p>As expected, different users (with different labels) can see different sets of triples in the project RDF graph.</p>
</li>
<li>
<p>Query the same data as a single user using different labels.</p>
<p>The same query used in the preceding step produces just 6 matches:</p>
<pre dir="ltr">urn:A urn:expenseReportAmount 100
urn:A urn:hasManager urn:B
urn:B urn:expenseReportAmount 200
urn:B urn:hasManager urn:C
urn:expenseReportAmount http://www.w3.org/2000/01/rdf-schema#subPropertyOf urn:projExp
urn:proj1 urn:deadline 2012-12-25

6 rows selected.
</pre>
<p>If user C picks the weakest label (&#34;unclassified&#34;), then user C sees even less</p>
<pre dir="ltr">exec sa_utl.set_label(&#39;defense&#39;,char_to_label(&#39;defense&#39;,&#39;UN&#39;));
exec sa_utl.set_row_label(&#39;defense&#39;,char_to_label(&#39;defense&#39;,&#39;UN&#39;));
</pre>
<p>The same query used in the preceding step produces just 4 matches:</p>
<pre dir="ltr">urn:A urn:expenseReportAmount 100
urn:A urn:hasManager urn:B
urn:B urn:hasManager urn:C
urn:expenseReportAmount http://www.w3.org/2000/01/rdf-schema#subPropertyOf urn:projExp
</pre>
<p>If user C wants to run the query only against triples/quads with data label that dominates &#34;Secret&#34;:</p>
<pre dir="ltr">-- First set the label back
exec sa_utl.set_label(&#39;defense&#39;,char_to_label(&#39;defense&#39;,&#39;TS&#39;)); exec sa_utl.set_row_label(&#39;defense&#39;,char_to_label(&#39;defense&#39;,&#39;TS&#39;));
select lpad(nvl(g, &#39; &#39;), 20) || &#39; &#39; || s || &#39; &#39; || p || &#39; &#39; || o
from table(sem_match(&#39;{ graph ?g { ?s ?p ?o }}&#39;,
sem_models(&#39;project&#39;),
null,
null,
null,
null,
&#39;MIN_LABEL=SE POLICY_NAME=DEFENSE GRAPH_MATCH_UNNAMED=T&#39;
            ))
order by g, s, p, o;
</pre>
<p>The query response excludes those assertions made by user A:</p>
<pre dir="ltr">urn:proj2 urn:proj2 urn:dependsOn urn:proj1
urn:proj2 urn:proj2 urn:hasBudget 20000
urn:B urn:expenseReportAmount 200
urn:C urn:expenseReportAmount 400
urn:proj1 urn:deadline 2012-12-25
urn:proj1 urn:hasBudget 10000
 
6 rows selected.
</pre>
<p>The same query can be executed as User A. However, no matches are returned, as expected.</p>
</li>
</ol>
<p>You can delete semantic data when OLS is enabled for RDF. In the following example, assume that <a href="sem-rdfsa-ref.htm#GUID-FBF39A4D-A2AC-45B6-B81C-B5F09FD47454">SEM_RDFSA.APPLY_OLS_POLICY</a> has been executed successfully, and that the same user setup and label designs are used as in the preceding example.</p>
<pre dir="ltr">-- First, create a test model as user A and grant access to users B and C
connect a/&lt;password-for-a&gt;
 
create table test_tpl (triple sdo_rdf_triple_s) compress for oltp;
grant select on mdsys.rdfm_test to B,C;
grant select, insert, update, delete on test_tpl to B, C;
 
-- The following will fail with an error message
-- &#34;Error while creating triggers: If OLS
-- is enabled,  you have to apply table policy
-- before creating an OLS-enabled model&#34;
--
EXECUTE sem_apis.create_sem_model(&#39;test&#39;, &#39;test_tpl&#39;, &#39;triple&#39;);
 
-- You need to run this API first
 
connect fgac_admin/&lt;password-for-fgac_admin&gt;
 
EXECUTE sem_ols.apply_policy_to_app_tab(&#39;defense&#39;, &#39;A&#39;, &#39;TEST_TPL&#39;);
 
-- Now model creation (after OLS policy has been applied) can go through
connect a/&lt;password-for-a&gt;
EXECUTE sem_apis.create_sem_model(&#39;test&#39;, &#39;test_tpl&#39;, &#39;triple&#39;);
 
-- Add a triple as User A
INSERT INTO test_tpl(triple) values
  (sdo_rdf_triple_s(&#39;test&#39;,&#39;&lt;urn:A&gt;&#39;,&#39;&lt;urn:p&gt;&#39;,&#39;&lt;urn:B&gt;&#39;));
COMMIT;
 
-- Add the same triple as User B
connect b/&lt;password-for-b&gt;
INSERT INTO a.test_tpl(triple) values
  (sdo_rdf_triple_s(&#39;test&#39;,&#39;&lt;urn:A&gt;&#39;,&#39;&lt;urn:p&gt;&#39;,&#39;&lt;urn:B&gt;&#39;));
COMMIT;
 
-- Now User B can see both triples in the application table as well as the model view
set numwidth 20
SELECT * from a.test_tpl;
 
SDO_RDF_TRIPLE_S(8596269297967065604, 19, 1471072612573670395, 28121856352072361
78, 8596269297967065604)
                1000
 
SDO_RDF_TRIPLE_S(8596269297967065604, 19, 1471072612573670395, 28121856352072361
78, 8596269297967065604)
                1500
 
SELECT count(1) from mdsys.rdfm_test;
                   2
 
-- User A can only see one triple due to A&#39;s label assignment, as expected.
 
SELECT * from a.test_tpl;
 
SDO_RDF_TRIPLE_S(8596269297967065604, 19, 1471072612573670395, 28121856352072361
78, 8596269297967065604)
                1000
 
SELECT count(1) from mdsys.rdfm_test;
                   1
 
 
-- User A issues a delete to remove A&#39;s assertions
SQL&gt; delete from a.test_tpl;
1 row deleted.
 
COMMIT;
Commit complete.
 
 
-- Now user A has no assertions left.
 
SELECT * from a.test_tpl;
no rows selected
 
SELECT count(1) from mdsys.rdfm_test;
                   0
 
-- Note that the preceding delete does not affect the same assertion made by B.
connect b/&lt;password-for-b&gt;
SELECT * from a.test_tpl;
 
SDO_RDF_TRIPLE_S(8596269297967065604, 19, 1471072612573670395, 28121856352072361
78, 8596269297967065604)
                1500
 
SELECT count(1) from mdsys.rdfm_test;
                   1
 
-- User B can remove this assertion using a DELETE statement.
-- The following DELETE statement uses the oracle_orardf_res2vid function
-- to narrow down the scope to triples with a particular subject.
DELETE FROM a.test_tpl app_tab
       where app_tab.triple.rdf_s_id =
             sdo_sem_inference.oracle_orardf_res2vid(&#39;&lt;urn:A&gt;&#39;);
 
1 row deleted.
</pre></div>
</div>
</div>
<a id="RDFRM233"></a>
<div class="props_rev_3"><a id="GUID-F3E8D47D-CF60-47FB-BA86-3AABBCB54916"></a>
<h2 id="RDFRM-GUID-F3E8D47D-CF60-47FB-BA86-3AABBCB54916" class="sect2"><span class="enumeration_section">5.2</span> Resource-Level Security</h2>
<div>
<div class="infobox-note" id="GUID-F3E8D47D-CF60-47FB-BA86-3AABBCB54916__GUID-1CD3C470-55F0-42DB-BAB9-3C4B421E1D2D">
<p class="notep1">Note:</p>
<p>Oracle recommends that you generally use triple-level security rather than resource-level security. Triple-level security is described in <a href="fine-grained-access.htm#GUID-3514B1AC-B47C-4AE6-A7A1-C2D57C22E4B7">Triple-Level Security</a>.</p>
</div>
<p>The resource-level security option enables you to assign one or more security labels that define a security level for table rows. Conceptually, a table in a relational data model can be mapped to an equivalent RDF graph. Specifically, a row in a relational table can be mapped to a set of triples, each asserting some facts about a specific Subject. In this scenario, the subject represents the primary key for the row and each non-key column-value combination from the row is mapped to a predicate-object value combination for the corresponding triples.</p>
<p>A row in a relational data model is identified by its key, and OLS, as a row-level access control mechanism, effectively restricts access to the values associated with the key. With this conceptual mapping between relational and RDF data models, restricting access to a row in a relational table is equivalent to restricting access to a subgraph involving a specific subject. In a model that supports sensitivity labels for each triple, this is enforced by applying the same label to all the triples involving the given subject. However, you can also achieve greater flexibility by allowing the individual triples to have different labels, while maintaining a minimum bound for all the labels.</p>
<p>OLS support for RDF data employs a multilevel approach in which sensitivity labels associated with the triple components (subject, predicate, object) collectively form a minimum bound for the sensitivity label for the triple. With this approach, a data sensitivity label associated with an RDF resource (used as subject, predicate, or object) restricts unauthorized users from accessing any triples involving the resource and from creating new triples with the resource. For example, <code class="codeph">projectHLS</code> as a subject may have a minimum sensitivity label, which ensures that all triples describing this subject have a sensitivity label that at least covers the label for <code class="codeph">projectHLS</code>. Additionally, <code class="codeph">hasContractValue</code> as a predicate may have a higher sensitivity label; and when this predicate is used with <code class="codeph">projectHLS</code> to form a triple, that triple minimally has a label that covers both the subject and the predicate labels, as in the following example:</p>
<pre dir="ltr">Triple 1: &lt;http://www.myorg.com/contract/projectHLS&gt; :<span class="bold">ownedBy</span>
                               &lt;http://www.myorg.com/department/Dept1&gt;
Triple 2: &lt;http://www.myorg.com/contract/projectHLS&gt; :<span class="bold">hasContractValue</span>
                               &#34;100000&#34;^^xsd:integer
</pre>
<p>Sensitivity labels are associated with the RDF resources (URIs) based on the position in which they appear in a triple. For example, the same RDF resource may appear in different positions (subject, predicate, or object) in different triples. Three unique labels can be assigned to each resource, so that the appropriate label is used to determine the label for a triple based on the position of the resource in the triple. You can choose the specific resource positions to be secured in a database instance when you apply an OLS policy to the RDF repository. You can secure subjects, objects, predicates, or any combination, as explained in separate sections to follow. The following example applies an OLS policy named <code class="codeph">defense</code> to the RDF repository and allows sensitivity labels to be associated with RDF subjects and predicates.</p>
<pre dir="ltr">begin
  sem_rdfsa.apply_ols_policy(
        policy_name   =&gt; &#39;defense&#39;,
        rdfsa_options =&gt; sem_rdfsa.SECURE_SUBJECT+
                         sem_rdfsa.SECURE_PREDICATE); 
end;
/
</pre>
<p>The same RDF resource can appear in both the subject and object positions (and sometime even as the predicate), and such a resource can have distinct sensitivity labels based on its position. A triple using the resource at a specific position should have a label that covers the label corresponding to the resource&#39;s position. In such cases, the triple can be asserted or accessed only by the users with labels that cover the triple and the resource labels.</p>
<p>In a specific RDF repository, security based on data classification techniques can be turned on for subjects, predicates, objects, or a combination of these. This ensures that all the triples added to the repository automatically conform to the label relationships described above.</p>
</div>
<a id="RDFRM99957"></a>
<div class="props_rev_3"><a id="GUID-863B1294-CB11-4A67-BC4A-6195336EE70B"></a>
<h3 id="RDFRM-GUID-863B1294-CB11-4A67-BC4A-6195336EE70B" class="sect3"><span class="enumeration_section">5.2.1</span> Securing RDF Subjects</h3>
<div>
<p>An RDF resource (typically a URI) appears in the subject position of a triple when an assertion is made <span class="italic">about</span> the resource. In this case, a sensitivity label associated with the resource has following characteristics:</p>
<ul style="list-style-type: disc;">
<li>
<p>The label represents the minimum sensitivity label for any triple using the resource as a subject. In other words, the sensitivity label for the triple should dominate or cover the label for the subject.</p>
</li>
<li>
<p>The label for a newly added triple is initialized to the user initial row label or is generated using the label function, if one is specified. Such operations are successful only if the triple&#39;s label dominates the label associated with the triple&#39;s subject.</p>
</li>
<li>
<p>Only a user with an access label that dominates the subject&#39;s label and the triple&#39;s label can read the triple.</p>
</li>
</ul>
<p>By default, the sensitivity label for a subject is derived from the user environment when an RDF resource is used in the subject position of a triple for the first time. The default sensitivity label in this case is set to the user&#39;s initial row label (the default that is assigned to all rows inserted by the user).</p>
<p>However, you can categorize an RDF resource as a subject and assign a sensitivity label to it even before it is used in a triple. The following example assigns a sensitivity label named <code class="codeph">SECRET:HLS:US</code> to the <code class="codeph">projectHLS</code> resource, thereby restricting the users who are able to define new triples about this resource and who are able to access existing triples with this resource as the subject:</p>
<pre dir="ltr">begin
  sem_rdfsa.set_resource_label(
         model_name   =&gt; &#39;contracts&#39;,
         resource_uri =&gt; &#39;&lt;http://www.myorg.com/contract/projectHLS&gt;&#39;,
         label_string =&gt; &#39;SECRET:HLS:US&#39;,
         <span class="bold">resource_pos =&gt; &#39;S&#39;</span>);
end;
</pre></div>
</div>
<a id="RDFRM99958"></a>
<div class="props_rev_3"><a id="GUID-2A33F0F3-98EB-4EBD-A425-0A5F48607B77"></a>
<h3 id="RDFRM-GUID-2A33F0F3-98EB-4EBD-A425-0A5F48607B77" class="sect3"><span class="enumeration_section">5.2.2</span> Securing RDF Predicates</h3>
<div>
<p>An RDF predicate defines the relationship between a subject and an object. You can use sensitivity labels associated with RDF predicates to restrict access to specific types of relationships with all subjects.</p>
<p>RDF predicates are analogous to columns in a relational table, and the ability to restrict access to specific predicates is equivalent to securing relational data at the column level. As in the case of securing the subject, the predicate&#39;s sensitivity label creates a minimum bound for any triples using this predicate. It is also the minimum authorization that a user must posses to define a triple with the predicate or to access a triple with the predicate.</p>
<p>The following example assigns the label <code class="codeph">HSECRET:FIN</code> (in this scenario, a label that is Highly Secret and that also belongs to the Finance department) to triples with the <code class="codeph">hasContractValue</code> predicate, to ensure that only a user with such clearance can define the triple or access it:</p>
<pre dir="ltr">begin
  sem_rdfsa.set_predicate_label( 
         model_name   =&gt; &#39;contracts&#39;,
         predicate    =&gt; &#39;&lt;http://www.myorg.com/pred/hasContractValue&gt;&#39;,
         label_string =&gt; &#39;HSECRET:FIN&#39;);
end;  
/
</pre>
<p>You can secure predicates in combination with subjects. In such cases, the triples using a subject and a predicate are ensured to have a sensitivity label that at least covers the labels for both the subject and the predicate. Extending the preceding example, if <code class="codeph">projectHLS</code> as a subject is secured with label <code class="codeph">SECRET:HLS:US</code> and if <code class="codeph">hasContractValue</code> as a predicate is secured with label <code class="codeph">HSECRET:FIN:</code>, a triple assigning a monetary value for <code class="codeph">projectHLS</code> should at least have a label <code class="codeph">HSECRET:HLS,FIN:US</code>. Effectively, a user&#39;s label must dominate this triple&#39;s label to be able to define or access the triple.</p>
</div>
</div>
<a id="RDFRM99959"></a>
<div class="props_rev_3"><a id="GUID-C24A466D-C0CC-4CDB-AF89-614FCDD95556"></a>
<h3 id="RDFRM-GUID-C24A466D-C0CC-4CDB-AF89-614FCDD95556" class="sect3"><span class="enumeration_section">5.2.3</span> Securing RDF Objects</h3>
<div>
<p>An RDF triple can have an URI or a literal in its object position. The URI in object position of a triple represents some resource. You can secure a resource in the object position by associating a sensitivity label to it, to restrict the ability to use the resource as an object in triples.</p>
<p>Typically, a resource (URI or non-literal) appearing in the object position of a triple may itself be described using additional RDF statements. Effectively, an RDF resource in the object position could appear in the subject position in some other triples. When the RDF resources are secured at the object position without explicit sensitivity labels, the label associated with the same resource in the subject position is used as the default label for the object.</p>
</div>
</div>
<a id="RDFRM99960"></a>
<div class="props_rev_3"><a id="GUID-A009CCEA-E574-4BD4-A767-763969B06FB2"></a>
<h3 id="RDFRM-GUID-A009CCEA-E574-4BD4-A767-763969B06FB2" class="sect3"><span class="enumeration_section">5.2.4</span> Generating Labels for Inferred Triples</h3>
<div>
<p>RDF data model allows for specification of declarative rules, enabling it to <span class="italic">infer</span> the presence of RDF statements that are not explicitly added to the repository. The following shows some simple declarative rules associated with the logic that projects can be owned by departments and departments have Vice Presidents, and in such cases the project leader is by default the Vice President of the department that owns the project.</p>
<pre dir="ltr">RuleID -&gt; projectLedBy
Antecedent Expression -&gt; (?proj :ownedBy ?dept) (?dept :hasVP ?person)
Consequent Expression -&gt; (?proj :isLedBy ?person)
</pre>
<p>An RDF rule uses some explicitly asserted triples as well as previously inferred triples as antecedents, and infers one or more consequent triples. Traditionally, the inference process is executed as an offline operation to pregenerate all the inferred triples and to make them available for subsequent query operations.</p>
<p>When the underlying RDF graph is secured using OLS, any additional data inferred from the graph should also be secured to avoid exposing the data to unauthorized users. Additionally, the inference process should run with higher privileges, specifically with full access to data, in order to ensure completeness.</p>
<p>OLS support for RDF data offers techniques to generate sensitivity labels for inferred triples based on labels associated with one or more RDF artifacts. It provides label generation techniques that you can invoke at the time of inference. Additionally, it provides an extensibility framework, which allows an extensible implementation to receive a set of possible labels for a specific triple and determine the most appropriate sensitivity label for the triple based on some application-specific logic. The techniques that you can use for generating the labels for inferred triples include the following (each technique, except for Use Antecedent Labels, is associated with a SEM_RDFSA package constant):</p>
<ul style="list-style-type: disc;">
<li>
<p>Use Rule Label (<code class="codeph">SEM_RDFSA.LABELGEN_RULE</code>): An inferred triple is directly generated by a specific rule, and it may be indirectly dependent on other rules through its antecedents. Each rule may have a sensitivity label, which is used as the sensitivity label for all the triples directly inferred by the rule.</p>
</li>
<li>
<p>Use Subject Label (<code class="codeph">SEM_RDFSA.LABELGEN_SUBJECT</code>): Derives the label for the inferred triple by considering any sensitivity labels associated with the subject in the new triple. Each inferred triple has a subject, which could in turn be a subject, predicate, or object in any of the triple&#39;s antecedents. When such RDF resources are secured, the subject in the newly inferred triple may have one or more labels associated with it. With the Use Subject Label technique, the label for the inferred triple is set to the unique label associated with the RDF resource. When more than one label exists for the resource, you can implement the extensible logic to determine the most relevant label for the new triple.</p>
</li>
<li>
<p>Use Predicate Label (<code class="codeph">SEM_RDFSA.LABELGEN_PREDICATE</code>): Derives the label for the inferred triple by considering any sensitivity labels associated with the predicate in the new triple. Each inferred triple has a predicate, which could in turn be a subject, predicate, or object in any of the triple&#39;s antecedents. When such RDF resources are secured, the predicate in the newly inferred triple may have one or more labels associated with it. With the Use Predicate Label technique, the label for the inferred triple is set to the unique label associated with the RDF resource. When more than one label exists for the resource, you can implement the extensible logic to determine the most relevant label for the new triple.</p>
</li>
<li>
<p>Use Object Label (<code class="codeph">SEM_RDFSA.LABELGEN_OBJECT</code>): Derives the label for the inferred triple by considering any sensitivity labels associated with the object in the new triple. Each inferred triple has an object, which could in turn be a subject, predicate, or object in any of the triple&#39;s antecedents. When such RDF resources are secured, the object in the newly inferred triple may have one or more labels associated with it. With the Use Object Label technique, the label for the inferred triple is set to the unique label associated with the RDF resource. When more than one label exists for the resource, you can implement the extensible logic to determine the most relevant label for the new triple.</p>
</li>
<li>
<p>Use Dominating Label (<code class="codeph">SEM_RDFSA.LABELGEN_DOMINATING</code>): Each inferred triple minimally has four direct components: subject, predicate, object, and the rule that produced the triple. With the Use Dominating Label technique, at the time of inference the label generator computes the most dominating of the sensitivity labels associated with each of the component and assigns it as the sensitivity label for the inferred triple. Exception labels are assigned when a clear dominating relationship cannot be established between various labels.</p>
</li>
<li>
<p>Use Antecedent Labels: In addition to the four direct components for each inferred triple (subject, predicate, object, and the rule that produced the triple), a triple may have one or more antecedent triples, which are instrumental in deducing the new triple. With the Use Antecedent Labels technique, the labels for all the antecedent triples are considered, and conflict resolution criteria are implemented to determine the most appropriate label for the new triple. Since an inferred triple may be dependent on other inferred triples, a strict order is followed while generating the labels for all the inferred triples.</p>
<p>The Use Antecedent Labels technique requires that you use a custom label generator. For information about creating and using a custom label generator, see <a href="fine-grained-access.htm#GUID-43A77CA9-6481-41C5-8E8C-F33DE411DE82">Using Labels Based on Application Logic</a>.</p>
</li>
</ul>
<p>The following example creates an entailment (rules index) for the contracts data using a specific rulebase. This operation can only be performed by a user with FULL access privilege with the OLS policy applied to the RDF repository. In this case, the labels generated for the inferred triples are based on the labels associated with their predicates, as indicated by the use of the <code class="codeph">SEM_RDFSA.LABELGEN_PREDICATE</code> package constant in the <code class="codeph">label_gen</code> parameter.</p>
<pre dir="ltr">begin
  sem_rdfsa.create_entailment(
         index_name_in   =&gt; &#39;contracts_inf&#39;,
         models_in       =&gt; SDO_RDF_Models(&#39;contracts&#39;),
         rulebases_in    =&gt; SDO_RDF_Rulebases(&#39;contracts_rb&#39;),
         options         =&gt; &#39;USER_RULES=T&#39;,
         label_gen       =&gt; <span class="bold">sem_rdfsa.LABELGEN_PREDICATE</span>);
end;
</pre>
<p>When the predefined or extensible label generation implementation cannot compute a unique label to be applied to an inferred triple, an exception label is set for the triple. Such triples are not accessible by any user other than the user with full access to RDF data (also the user initiating the inference process). The triples with exception labels are clearly marked, so that a privileged user can access them and apply meaningful labels manually. After the sensitivity labels are applied to inferred triples, only users with compatible labels can access these triples. The following example updates the sensitivity label for triples for which an exception label was set:</p>
<pre dir="ltr">update mdsys.rdfi_contracts_inf 
     set ctxt1 = char_to_label(&#39;defense&#39;, &#39;SECRET:HLS:US&#39;)
     where ctxt1 = -1;
</pre>
<p>Inferred triples accessed through generated labels might not be same as conceptual triples inferred directly from the user accessible triples and rules. The labels generated using system-defined or custom implementations cannot be guaranteed to be precise. See the information about <a href="sem-apis-ref.htm#GUID-BF52CEC0-1BD9-4908-9EF1-F001B0527257__CHECCDHJ">Fine-Grained Access Control (OLS and VPD) Considerations</a> in the Usage Notes for the <a href="sem-apis-ref.htm#GUID-BF52CEC0-1BD9-4908-9EF1-F001B0527257">SEM_APIS.CREATE_ENTAILMENT</a> procedure in <a href="sem-apis-ref.htm#GUID-F42AB976-445A-4DCD-974C-3B9ED810E3D5">SEM_APIS Package Subprograms</a> for details.</p>
</div>
</div>
<a id="RDFRM99962"></a><a id="RDFRM99961"></a>
<div class="props_rev_3"><a id="GUID-43A77CA9-6481-41C5-8E8C-F33DE411DE82"></a>
<h3 id="RDFRM-GUID-43A77CA9-6481-41C5-8E8C-F33DE411DE82" class="sect3"><span class="enumeration_section">5.2.5</span> Using Labels Based on Application Logic</h3>
<div>
<p>The MDSYS.RDFSA_LABELGEN type is used to apply appropriate label generator logic at the time of index creation; however, you can also extend this type to implement a custom label generator and generate labels based on application logic. The label generator is specified using the <code class="codeph">label_gen</code> parameter with the <a href="sem-apis-ref.htm#GUID-BF52CEC0-1BD9-4908-9EF1-F001B0527257">SEM_APIS.CREATE_ENTAILMENT</a> procedure. To use a system-defined label generator, specify a SEM_RDFSA package constant, as explained in <a href="fine-grained-access.htm#GUID-A009CCEA-E574-4BD4-A767-763969B06FB2">Generating Labels for Inferred Triples</a>; to use a custom label generator, you must implement a custom label generator type and specify an instance of that type instead of a SEM_RDFSA package constant.</p>
<p>To create a custom label generator type, you must have the UNDER privilege on the RDFSA_LABELGEN type. In addition, to create an index for RDF data , you must should have the EXECUTE privilege on this type. The following example grants these privileges to a user named RDF_ADMIN:</p>
<pre dir="ltr">GRANT under, execute ON mdsys.rdfsa_labelgen TO rdf_admin;
</pre>
<p>The custom label generator type must implement a constructor, which should set the dependent resources and specify the getNumericLabel method to return the label computed from the information passed in, as shown in the following example:</p>
<pre dir="ltr">CREATE OR REPLACE TYPE CustomSPORALabel UNDER mdsys.rdfsa_labelgen  (
   constructor function CustomSPORALabel return self as result,
   overriding member function getNumericLabel (
                                    subject   rdfsa_resource,
                                    predicate rdfsa_resource,
                                    object    rdfsa_resource,
                                    rule      rdfsa_resource,
                                    anteced   rdfsa_resource)
        return number);
</pre>
<div class="example" id="GUID-43A77CA9-6481-41C5-8E8C-F33DE411DE82__CIHFDBFD">
<p class="titleinexample">Example 5-1 Creating a Custom Label Generator Type</p>
<pre dir="ltr">CREATE OR REPLACE TYPE BODY CustomSPORALabel AS
 
   constructor function CustomSPORALabel return self as result as
   begin
     self.setDepResources(sem_rdfsa.USE_SUBJECT_LABEL+
                          sem_rdfsa.USE_PREDICATE_LABEL+
                          sem_rdfsa.USE_OBJECT_LABEL+
                          sem_rdfsa.USE_RULE_LABEL+
                          sem_rdfsa.USE_ANTECED_LABELS);
     return;
   end CustomSPORALabel;
   
   overriding member function getNumericLabel (
                                    subject   rdfsa_resource,
                                    predicate rdfsa_resource,
                                    object    rdfsa_resource,
                                    rule      rdfsa_resource,
                                    anteced   rdfsa_resource)
        return number as
     labellst mdsys.int_array := mdsys.int_array(); 
   begin
    -- Find dominating label of S P O R A &ndash;
    &ndash;- Application specific logic for computing the triple label &ndash;
    -- Copy over all labels to labellst --
    for li in 1 .. subject.getLabelCount() loop
      labellst.extend; 
      labellst(labellst.COUNT) = subject.getLabel(li); 
    end loop; 
    --- Copy over other labels as well --- 
    --- Find a dominating of all the labels. Generates &ndash;1 if no
    --- dominating label within the set
    return self.findDominatingOf(labellst); 
   end getNumericLabel;
  end CustomSPORALabel;  
  /
</pre>
<p>The label generator constructor uses a set of constants defined in the SEM_RDFSA package to indicate the list of resources on which the label generator relies. The dependent resources are identified as an inferred triple&#39;s subject, its predicate, its object, the rule that produced the triple, and its antecedents. A custom label generator can rely on any subset of these resources for generating the labels, and you can specify this in its constructor by using the constants defined in SEM_RDFSA package : USE_SUBJECT_LABEL, USE_PREDICATE_LABEL, USE_OBJECT_LABEL, USE_RULE_LABEL, USE_ANTCED_LABEL. The following example creates the type body and specifies the constructor:</p>
<p><a href="fine-grained-access.htm#GUID-43A77CA9-6481-41C5-8E8C-F33DE411DE82__CIHFDBFD">Example 5-1</a> creates the type body, specifying the constructor function and the getNumericLabel member function. (Application-specific logic is not included in this example.)</p>
<p>In <a href="fine-grained-access.htm#GUID-43A77CA9-6481-41C5-8E8C-F33DE411DE82__CIHFDBFD">Example 5-1</a>, the sample label generator implementation uses all the resources contributing to the inferred triple for generating a sensitivity label for the triple. Thus, the constructor uses the <code class="codeph">setDepResources</code> method defined in the superclass to set all its dependent components. The list of dependent resources set with this step determines the exact list of values passed to the label generating routine.</p>
<p>The <code class="codeph">getNumericLabel</code> method is the label generation routine that has one argument for each resource that an inferred triple may depend on. Some arguments may be null values if the corresponding dependent resource is not set in the constructor implementation.</p>
<p>The label generator implementation can make use of a general-purpose static routine defined in the RDFSA_LABELGEN type to find a domination label for a given set of labels. A set of labels is passed in an instance of MDSYS.INT_ARRAY type, and the method finds a dominating label among them. If no such label exists, an exception label &ndash;1 is returned.</p>
<p>After you have implemented the custom label generator type, you can use the custom label generator for inferred data by assigning an instance of this type to the <code class="codeph">label_gen</code> parameter in the <a href="sem-apis-ref.htm#GUID-BF52CEC0-1BD9-4908-9EF1-F001B0527257">SEM_APIS.CREATE_ENTAILMENT</a> procedure, as shown in the following example:</p>
<pre dir="ltr">begin
  sem_apis.create_entailment(
         index_name_in  =&gt; &#39;contracts_rdfsinf&#39;,
         models_in      =&gt; SDO_RDF_Models(&#39;contracts&#39;),
         rulebases_in   =&gt; SDO_RDF_Rulebases(&#39;RDFS&#39;),
         options        =&gt; &#39;&#39;,
         <span class="bold">label_gen      =&gt; CustomSPORALabel()</span>);
end;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM99964"></a><a id="RDFRM99963"></a>
<div class="props_rev_3"><a id="GUID-6E6C434F-2BC9-42D3-8B8C-CA828EDE7406"></a>
<h3 id="RDFRM-GUID-6E6C434F-2BC9-42D3-8B8C-CA828EDE7406" class="sect3"><span class="enumeration_section">5.2.6</span> RDFOLS_SECURE_RESOURCE View</h3>
<div>
<p>The MDSYS.RDFOLS_SECURE_RESOURCE view contains information about resources secured with Oracle Label Security (OLS) policies and the sensitivity labels associated with these resources.</p>
<p>Select privileges on this view can be granted to appropriate users. To view the resources associated with a specific model, you must also have select privileges on the model (or the corresponding RDFM_<span class="italic">model-name</span> view).</p>
<p>The MDSYS.RDFOLS_SECURE_RESOURCE view contains the columns shown in <a href="fine-grained-access.htm#GUID-6E6C434F-2BC9-42D3-8B8C-CA828EDE7406__CIHJEJFA" title="MDSYS.RDFOLS_SECURE_RESOURCE view columns">Table 5-1</a>.</p>
<div class="tblformal" id="GUID-6E6C434F-2BC9-42D3-8B8C-CA828EDE7406__CIHJEJFA">
<p class="titleintable">Table 5-1 MDSYS.RDFOLS_SECURE_RESOURCE View Columns</p>
<table class="cellalignment4510" title="MDSYS.RDFOLS_SECURE_RESOURCE View Columns" summary="MDSYS.RDFOLS_SECURE_RESOURCE view columns">
<thead>
<tr class="cellalignment4501">
<th class="cellalignment4511" id="d36538e1138">Column Name</th>
<th class="cellalignment4512" id="d36538e1141">Data Type</th>
<th class="cellalignment4513" id="d36538e1144">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d36538e1149" headers="d36538e1138">
<p>MODEL_NAME</p>
</td>
<td class="cellalignment4515" headers="d36538e1149 d36538e1141">
<p>VARCHAR2(25)</p>
</td>
<td class="cellalignment4516" headers="d36538e1149 d36538e1144">
<p>Name of the model.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d36538e1159" headers="d36538e1138">
<p>MODEL_ID</p>
</td>
<td class="cellalignment4515" headers="d36538e1159 d36538e1141">
<p>NUMBER</p>
</td>
<td class="cellalignment4516" headers="d36538e1159 d36538e1144">
<p>Internal identifier for the model.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d36538e1169" headers="d36538e1138">
<p>RESOURCE_ID</p>
</td>
<td class="cellalignment4515" headers="d36538e1169 d36538e1141">
<p>NUMBER</p>
</td>
<td class="cellalignment4516" headers="d36538e1169 d36538e1144">
<p>Internal identifier for the resource; to be joined with MDSYS.RDF_VALUE$.VALUE_ID column for information about the resource.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d36538e1179" headers="d36538e1138">
<p>RESOURCE_TYPE</p>
</td>
<td class="cellalignment4515" headers="d36538e1179 d36538e1141">
<p>VARCHAR2(16)</p>
</td>
<td class="cellalignment4516" headers="d36538e1179 d36538e1144">
<p>One of the following string values to indicate the resource type for which the label is assigned: <code class="codeph">SUBJECT</code>, <code class="codeph">PREDICATE</code>, <code class="codeph">OBJECT</code>, <code class="codeph">GLOBAL</code>.</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4514" id="d36538e1201" headers="d36538e1138">
<p>CTXT1</p>
</td>
<td class="cellalignment4515" headers="d36538e1201 d36538e1141">
<p>NUMBER</p>
</td>
<td class="cellalignment4516" headers="d36538e1201 d36538e1144">
<p>Sensitivity label assigned to the resource.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4500">
<tr>
<td class="cellalignment4507">
<table class="cellalignment4505">
<tr>
<td class="cellalignment4504"><a href="semantic-indexing-docs.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4504"><a href="wm-rdf.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2005, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4509">
<table class="cellalignment4503">
<tr>
<td class="cellalignment4504"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4504"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4504"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4504"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4504"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4504"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>