<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-88574"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/RDF%20Semantic%20Graph%20Support%20for%20OpenRDF%20Sesame"></a><title>RDF Semantic Graph Support for OpenRDF Sesame</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="keywords" content="RDF Semantic Graph support for OpenRDF Sesame, setting up software environment, setting up SPARQL endpoint, SPARQL, setting up service for RDF Semantic Graph support for OpenRDF Sesame, configuring the service, SEM_MATCH and RDF Semantic Graph support for OpenRDF Sesame queries compared, optimized handling of queries, optimized handling of SPARQL queries, performance recommendations, virtual models, support in RDF Semantic Graph support for OpenRDF Sesame, support for virtual models, connection pooling, support for connection pooling, support for semantic model PL/SQL interfaces, query examples"/>
<meta name="dcterms.created" content="2017-06-29T10:38:43Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Spatial and Graph RDF Semantic Graph Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E51611-08"/>
<meta name="dcterms.isVersionOf" content="RDFRM"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2005, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="rdf-jena.htm" title="Previous" type="text/html"/>
<link rel="Next" href="user-defined-inf.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E51611-08.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-92C23B7C-FDBD-4B02-A837-AEE79E21F52A"></a> <span id="PAGE" style="display:none;">15/28</span> <!-- End Header -->
<a id="RDFRM305"></a>
<h1 id="RDFRM-GUID-92C23B7C-FDBD-4B02-A837-AEE79E21F52A" class="sect1"><span class="enumeration_chapter">8</span> RDF Semantic Graph Support for OpenRDF Sesame</h1>
<div>
<div class="infobox-note" id="GUID-92C23B7C-FDBD-4B02-A837-AEE79E21F52A__GUID-36F2ADF6-8966-4D95-BE67-6574E19413EB">
<p class="notep1">Note:</p>
<p>This feature was previously referred to as the <span class="italic">Sesame Adapter for Oracle Database</span> and the <span class="italic">Sesame Adapter</span>.</p>
</div>
<p>RDF Semantic Graph support for OpenRDF Sesame (also referred to here as support for Sesame) integrates the popular Sesame Java APIs with Oracle Spatial and Graph RDF Semantic Graph support. Sesame is &ldquo;a powerful Java framework for processing and handling RDF data. This includes creating, parsing, storing, inferencing and querying over such data.&rdquo; (See <a href="http://rdf4j.org/" target="_blank">http://rdf4j.org</a>.)</p>
<p>This chapter assumes that you are familiar with major concepts explained in <a href="rdf-overview.htm#GUID-F422BB9F-8473-4980-9D6C-848F708C10E0">RDF Semantic Graph Overview</a> and <a href="owl-concepts.htm#GUID-3EC5F30E-9175-4B7B-946C-3117BC30610A">OWL Concepts</a> . It also assumes that you are familiar with the overall capabilities and use of the Sesame Java framework; for information, click the Documentation link at <a href="http://rdf4j.org/" target="_blank">http://rdf4j.org</a>.</p>
<p>RDF Semantic Graph support for OpenRDF Sesame extends the semantic data management capabilities of Oracle Database RDF/OWL.</p>
<p>This chapter includes the following major topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="rdf-sesame.htm#GUID-3F3E7E98-EBAF-46D8-AB18-9ABF4F5A3D22">RDF Semantic Graph Support for OpenRDF Sesame Overview</a></p>
</li>
<li>
<p><a href="rdf-sesame.htm#GUID-D7E8F563-C0A2-4B84-8BD7-76594C571A09">Setup and Configuration for RDF Semantic Graph Support for OpenRDF Sesame</a></p>
</li>
<li>
<p><a href="rdf-sesame.htm#GUID-EF02F7ED-356B-4175-9B92-B002D109466F">SEM_MATCH and RDF Semantic Graph Support for OpenRDF Sesame Queries Compared</a></p>
</li>
<li>
<p><a href="rdf-sesame.htm#GUID-047130B2-42C7-4B6F-AECE-7D662644633A">Optimized Handling of SPARQL Queries</a></p>
</li>
<li>
<p><a href="rdf-sesame.htm#GUID-2E11B168-FCEE-4AF0-ABC0-3CE189AF8A22">Recommendations for Best Performance</a></p>
</li>
<li>
<p><a href="rdf-sesame.htm#GUID-4A9C42A4-2625-482D-B240-8472530B3C98">Additions to the SPARQL Syntax to Support Other Features</a></p>
</li>
<li>
<p><a href="rdf-sesame.htm#GUID-7E028C30-97FA-4D76-BB37-5055362A76CF">Support for Server-Side APIs</a></p>
</li>
<li>
<p><a href="rdf-sesame.htm#GUID-F9BE410E-EEE3-4B40-996B-29065A155A49">Oracle-Specific Extensions to Sesame APIs</a></p>
</li>
<li>
<p><a href="rdf-sesame.htm#GUID-D288DB3F-21B2-4E58-A8AE-CC7682DFF410">Using the Sesame Console with RDF Semantic Graph Support for OpenRDF Sesame</a></p>
</li>
<li>
<p><a href="rdf-sesame.htm#GUID-950C682E-7DD2-4B1A-816F-4C8E7D5F6014">Example Queries Using RDF Semantic Graph support for OpenRDF Sesame</a></p>
</li>
</ul>
</div>
<a id="RDFRM307"></a><a id="RDFRM306"></a>
<div class="props_rev_3"><a id="GUID-3F3E7E98-EBAF-46D8-AB18-9ABF4F5A3D22"></a>
<h2 id="RDFRM-GUID-3F3E7E98-EBAF-46D8-AB18-9ABF4F5A3D22" class="sect2"><span class="enumeration_section">8.1</span> RDF Semantic Graph Support for OpenRDF Sesame Overview</h2>
<div>
<p>Like the RDF Semantic Graph support for Apache Jena (described in <a href="rdf-jena.htm#GUID-3F437E3E-3B74-4CCF-9F16-B2B07B3899E8" title="This topic briefly describes how to configure and set up the Fuseki-based SPARQL service that connects to Oracle Database.">RDF Semantic Graph Support for Apache Jena</a> ), the support for Sesame provides a Java-based interface to Oracle semantic data through an open source framework and related tools. However, RDF Semantic Graph support for OpenRDF Sesame adds support for <span class="bold">context</span> to the data:</p>
<ul style="list-style-type: disc;">
<li>
<p>Jena statements deal with triples (subject, predicate, object).</p>
</li>
<li>
<p>Sesame statements deal with triples and contexts; a Sesame statement is a quad consisting of a triple and a context. For example, with hospital patient data, the context might contain the patient&#39;s URI.</p>
</li>
</ul>
<p>RDF Semantic Graph support for OpenRDF Sesame provides a Java API for interacting with semantic data stored in Oracle Database. It also provides integration with the following Sesame tools:</p>
<ul style="list-style-type: disc;">
<li>
<p>Sesame Server, which provides an HTTP SPARQL endpoint.</p>
</li>
<li>
<p>Sesame Console, a command-line tool for creating and managing repositories. The available commands include the following:</p>
<pre dir="ltr"><span class="bold">connect  Connects to a (local or remote) set of repositories</span>
disconnect  Disconnects from the current set of repositories
create  Creates a new repository
drop  Drops a repository
open  Opens a repository to work on, takes a repository ID as argument
close  Closes the current repository
show  Displays an overview of various resources
<span class="bold">load  Loads a data file into a repository, takes a file path or URL as argument</span>
verify  Verifies the syntax of an RDF data file, takes a file path or URL as argument
clear  Removes data from a repository
serql  Evaluates the SeRQL query, takes a query as argument
<span class="bold">sparql  Evaluates the SPARQL query, takes a query as argument</span>
set  Allows various console parameters to be set
exit, quit  Exits the console
</pre></li>
<li>
<p>OpenRDF Workbench, a graphical user interface to the Sesame Server.</p>
</li>
</ul>
<p>The features provided by the support for Sesame include:</p>
<ul style="list-style-type: disc;">
<li>
<p>Loading (bulk and incremental), exporting, and removing statements, with and without context</p>
</li>
<li>
<p>Querying of data, with and without context</p>
</li>
<li>
<p>Inferencing, where inferred data is considered during query execution (if <code class="codeph">includeInferred=true</code>), and where inferred triples have a null context</p>
</li>
<li>
<p>Managing namespaces</p>
</li>
</ul>
<p>RDF Semantic Graph support for OpenRDF Sesame implements various interfaces of the Sesame Storage and Inference Layer (SAIL) API. For example, the class <code class="codeph">OracleSailConnection</code> is an Oracle implementation of the Sesame <code class="codeph">SailConnection</code> interface, and the class <code class="codeph">OracleSailStore</code> is an Oracle implementation of the Sesame <code class="codeph">Sail</code> interface.</p>
<p>A typical usage flow for the support for Sesame might include the excerpt shown in <a href="rdf-sesame.htm#GUID-3F3E7E98-EBAF-46D8-AB18-9ABF4F5A3D22__CHDBAHEG">Example 8-1</a>.</p>
<div class="example" id="GUID-3F3E7E98-EBAF-46D8-AB18-9ABF4F5A3D22__CHDBAHEG">
<p class="titleinexample">Example 8-1 Sample Usage flow for RDF Semantic Graph Support for OpenRDF Sesame</p>
<pre dir="ltr">String query =
&#34; PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt; &#34;
&#34; PREFIX dc: &lt;http://purl.org/dc/elements/1.1/&gt; &#34;
&#34; <span class="bold">select ?s ?p ?o ?name WHERE {?s ?p ?o . OPTIONAL {?o foaf:name ?name .} }</span> &#34;;

SailRepository sr = new SailRepository(
   new OracleSailStore(oracle, modelName,&hellip;attachmentForInference));
RepositoryConnection repConn = sr.getConnection();
// Data loading can happen here.
repConn.add(alice, friendOf, bob, context1);
 
TupleQuery tq = repConn.prepareTupleQuery(QueryLanguage.<span class="bold">SPARQL</span>, query);
TupleQueryResult tqr = tq.evaluate();
while(tqr.hasNext()) {
    psOut.print((tqr.next().toString()));
};
tqr.close()
repConn.close();
sr.shutDown();
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM308"></a>
<div class="props_rev_3"><a id="GUID-D7E8F563-C0A2-4B84-8BD7-76594C571A09"></a>
<h2 id="RDFRM-GUID-D7E8F563-C0A2-4B84-8BD7-76594C571A09" class="sect2"><span class="enumeration_section">8.2</span> Setup and Configuration for RDF Semantic Graph Support for OpenRDF Sesame</h2>
<div>
<p>Setting up and configuring the support for Sesame involves the following actions:</p>
<ol>
<li>
<p><a href="rdf-sesame.htm#GUID-171E7DEF-5E83-4271-8EF5-A82540E5ACDB">Setting Up the Software Environment</a></p>
</li>
<li>
<p><a href="rdf-sesame.htm#GUID-BFE94E86-DE39-4779-80DF-E91216FF485F">Setting Up the SPARQL Service</a></p>
</li>
<li>
<p><a href="rdf-sesame.htm#GUID-EC6402A5-B09D-435B-A614-84CDE7EE7E3F">Setting Up the RDF Semantic Graph Environment</a></p>
</li>
</ol>
</div>
<a id="RDFRM309"></a>
<div class="props_rev_3"><a id="GUID-171E7DEF-5E83-4271-8EF5-A82540E5ACDB"></a>
<h3 id="RDFRM-GUID-171E7DEF-5E83-4271-8EF5-A82540E5ACDB" class="sect3"><span class="enumeration_section">8.2.1</span> Setting Up the Software Environment</h3>
<div>
<div class="section">
<p>To use the support for Sesame, you must first ensure that the system environment has the necessary software, including Oracle Database 11<span class="italic">g</span> Release 2 or later with the Spatial and Graph and Partitioning options and with RDF Semantic Graph support enabled, Sesame version 2.3.1, RDF Semantic Graph support for OpenRDF Sesame, and JDK 6. You can set up the software environment by performing these actions:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Install Oracle Database Enterprise Edition with the Oracle Spatial and Graph and Partitioning Options.</span></li>
<li class="stepexpand"><span>Enable the support for RDF Semantic Graph, as explained in <a href="enabling-rdf.htm#GUID-8B3D00C9-E2B8-4074-BE88-055DD5E157BF">Enabling RDF Semantic Graph Support</a>.</span></li>
<li class="stepexpand"><span>Download the Sesame 2.3.1 <code class="codeph">onejar</code> library and include it in your classpath, as explained in the &#34;Setting up to use the Sesame libraries&#34; chapter of the <span class="italic">User Guide</span>.</span></li>
<li class="stepexpand"><span>Install the Sesame 2.3.1 Server, as explained in the &#34;Server software installation&#34; chapter of the <span class="italic">User Guide</span>.</span></li>
<li class="stepexpand"><span>Download RDF Semantic Graph support for OpenRDF Sesame from the RDF Semantic Graph page (<a href="http://www.oracle.com/technetwork/database/options/semantic-tech/" target="_blank"><code class="codeph">http://www.oracle.com/technetwork/database/options/semantic-tech/</code></a>and click <span class="bold">Downloads</span>), and unzip it into a temporary directory, such as (on a Linux system) <code class="codeph">/tmp/sesame_adapter</code>. (If this temporary directory does not already exist, create it before the unzip operation.)</span>
<div>
<p>RDF Semantic Graph support for OpenRDF Sesame directories and files have the following structure:</p>
<pre dir="ltr"> examples/
   examples/Example1.java
   examples/Example2.java
   .
   .
   .
lib/
   lib/sdordfsesame.jar
web/
   web/web.xml
javadoc/
   javadoc/javadoc.zip
</pre></div>
</li>
<li class="stepexpand"><span>Copy <code class="codeph">ojdbc6.jar</code> into <span class="italic">&lt;Sesame_DIR&gt;</span><code class="codeph">/lib</code> (Linux) or <span class="italic">&lt;Sesame_DIR&gt;</span><code class="codeph">\lib</code> (Windows). (<code class="codeph">ojdbc6.jar</code> is in <code class="codeph">$ORACLE_HOME/jdbc/lib</code> or <code class="codeph">%ORACLE_HOME%\jdbc\lib</code>.)</span></li>
<li class="stepexpand"><span>Copy <code class="codeph">sdordf.jar</code> into <span class="italic">&lt;Sesame_DIR&gt;</span><code class="codeph">/lib</code> (Linux) or <span class="italic">&lt;Sesame_DIR&gt;</span><code class="codeph">\lib</code> (Windows). (<code class="codeph">sdordf.jar</code> is in <code class="codeph">$ORACLE_HOME/md/jlib</code> or <code class="codeph">%ORACLE_HOME%\md\jlib</code>.)</span></li>
<li class="stepexpand"><span>If JDK 6 is not already installed, install it.</span></li>
<li class="stepexpand"><span>If the JAVA_HOME environment variable does not already refer to the JDK 6 installation, define it accordingly. For example:</span>
<div>
<pre dir="ltr">setenv JAVA_HOME /usr/local/packages/jdk16/
</pre></div>
</li>
<li class="stepexpand"><span>If the SPARQL service to support the SPARQL protocol is not set up, set it up as explained in <a href="rdf-sesame.htm#GUID-BFE94E86-DE39-4779-80DF-E91216FF485F">Setting Up the SPARQL Service</a>.</span></li>
</ol>
<div class="section">
<p>After setting up the software environment, ensure that your RDF Semantic Graph environment can enable you to use the support for Sesame to perform queries, as explained in <a href="rdf-sesame.htm#GUID-EC6402A5-B09D-435B-A614-84CDE7EE7E3F">Setting Up the RDF Semantic Graph Environment</a>.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="RDFRM310"></a>
<div class="props_rev_3"><a id="GUID-BFE94E86-DE39-4779-80DF-E91216FF485F"></a>
<h3 id="RDFRM-GUID-BFE94E86-DE39-4779-80DF-E91216FF485F" class="sect3"><span class="enumeration_section">8.2.2</span> Setting Up the SPARQL Service</h3>
<div>
<p>Setting up a SPARQL endpoint using the support for Sesame involves downloading the Sesame Server, with which client applications can communicate over HTTP protocol. The Sesame Server (and OpenRDF Workbench) is bundled with the Sesame 2.3.1 release package. This section explains how to set up a SPARQL service using a servlet deployed in WebLogic Server. The number and complexity of the steps reflect the fact that Oracle is not permitted to bundle all the dependent third-party libraries in a <code class="codeph">.war</code> or <code class="codeph">.ear</code> file.</p>
<ol>
<li>
<p>Download and Install Oracle WebLogic Server 11g Release 1 (10.3.1).</p>
</li>
<li>
<p>Ensure that you have Java 6 installed, because it is required by Sesame.</p>
</li>
<li>
<p>Download the Sesame 2.3.1 release package (in .zip format) from <a href="http://sourceforge.net/projects/sesame/files/Sesame%202/" target="_blank"><code class="codeph">http://sourceforge.net/projects/sesame/files/Sesame%202/</code></a>.</p>
</li>
<li>
<p>Unpack the .zip file into a temporary directory. For example:</p>
<pre dir="ltr">mkdir /tmp/sesame
cp openrdf-sesame-2.3.1-sdk.zip /tmp/sesame/
cd /tmp/sesame
unzip openrdf-sesame-2.3.1-sdk.zip
</pre></li>
<li>
<p>Ensure that you have downloaded and unzipped RDF Semantic Graph support for OpenRDF Sesame, as explained in <a href="rdf-sesame.htm#GUID-171E7DEF-5E83-4271-8EF5-A82540E5ACDB">Setting Up the Software Environment</a>.</p>
</li>
<li>
<p>Create a directory named <code class="codeph">openrdf-sesame.war</code> at the same level as the <code class="codeph">Sesame_adapter</code> directory, and go to it. For example:</p>
<pre dir="ltr">/tmp/openrdf-sesame.war
cd /tmp/openrdf-sesame.war
</pre></li>
<li>
<p>Unzip necessary files into the directory created in the preceding step:</p>
<pre dir="ltr">cd /tmp/openrdf-sesame.war
unzip /tmp/sesame/openrdf-sesame-2.3.1/war/openrdf-sesame.war
</pre></li>
<li>
<p>Copy necessary files, as follows. (Assume that ORACLE_HOME points to the home directory of an Oracle Database.)</p>
<pre dir="ltr">cp /tmp/Sesame_adapter/web/web.xml /tmp/openrdf-sesame.war/WEB-INF/web.xml 
cp /tmp/Sesame_adapter/lib/*.jar   /tmp/openrdf-sesame.war/WEB-INF/lib
cp $ORACLE_HOME/md/jlib/sdordf.jar /tmp/openrdf-sesame.war/WEB-INF/lib
cp $ORACLE_HOME/jdbc/lib/ojdbc6.jar /tmp/openrdf-sesame.war/WEB-INF/lib
</pre></li>
<li>
<p>Using the WebLogic Server Administration console, create a J2EE data source named <span class="italic">OracleSemDS</span>. During the data source creation, you can specify a user and password for the database schema that contains the relevant semantic data against which SPARQL queries are to be executed.</p>
<p>If you need help in creating this data source, see <a href="rdf-sesame.htm#GUID-37B3F590-1721-47C6-A53F-66BD4218340D">Creating the Required Data Source Using WebLogic Server</a>.</p>
</li>
<li>
<p>Go to the <code class="codeph">autodeploy</code> directory of WebLogic Server and copy files, as follows. (For information about auto-deploying applications in development domains, see: <a href="http://docs.oracle.com/cd/E11035_01/wls100/deployment/autodeploy.html" target="_blank"><code class="codeph">http://docs.oracle.com/cd/E11035_01/wls100/deployment/autodeploy.html</code></a>)</p>
<pre dir="ltr">cd <span class="italic">&lt;domain_name&gt;</span>/autodeploy
cp -rf  /tmp/openrdf-sesame.war  <span class="italic">&lt;domain_name&gt;</span>/autodeploy
</pre>
<p>In the preceding example, <span class="italic">&lt;domain_name&gt;</span> is the name of a WebLogic Server domain.</p>
<p>Note that while you can run a WebLogic Server domain in two different modes, development and production, only development mode allows you use the auto-deployment feature.</p>
</li>
<li>
<p>Check the files and the directory structure, as in the following example:</p>
<pre dir="ltr">autodeploy/% ls -1R ./openrdf-sesame.war/
 
openrdf-sesame.war/:
favicon.ico
favicon.png
images
META-INF
styles
WEB-INF
 
openrdf-sesame.war/images:
DEBUG.png
ERROR.png
INFO.png
logo.png
productgroup.png
transparent.png
WARN.png
 
openrdf-sesame.war/META-INF:
MANIFEST.MF
maven
 
openrdf-sesame.war/META-INF/maven:
info.aduna.appbase
org.openrdf.sesame
 
openrdf-sesame.war/META-INF/maven/info.aduna.appbase:
aduna-appbase-webapp-system
 
openrdf-sesame.war/META-INF/maven/info.aduna.appbase/aduna-appbase-webapp-system:
pom.properties
pom.xml
 
openrdf-sesame.war/META-INF/maven/org.openrdf.sesame:
sesame-http-server
 
openrdf-sesame.war/META-INF/maven/org.openrdf.sesame/sesame-http-server:
pom.properties
pom.xml
 
openrdf-sesame.war/styles:
basic
default
msie-png-alpha.css
msie-png-alpha.png
w3-html40-recommended.css
 
openrdf-sesame.war/styles/basic:
all.css
 
openrdf-sesame.war/styles/default:
images
msie-minheight.css
print.css
screen.css
 
openrdf-sesame.war/styles/default/images:
bg_body.png
bg_header.png
bg_html.png
hr_menu.png
 
openrdf-sesame.war/WEB-INF:
aduna-webapp-servlet.xml
aduna-webapp-system-servlet.xml
classes
includes
lib
openrdf-http-server-servlet.xml
sample-web.xml
taglibs
tags
urlrewrite.xml
views
web.xml
 
openrdf-sesame.war/WEB-INF/classes:
logback.xml
 
openrdf-sesame.war/WEB-INF/includes:
components
stylesheets.html.jspf
taglibs.jspf
 
openrdf-sesame.war/WEB-INF/includes/components:
bodyStart.html.jspf
bodyStop.html.jspf
ContentHeader.html.jspf
Footer.html.jspf
Header.html.jspf
head.html.jspf
htmlStart.html.jspf
htmlStop.html.jspf
logfilterform.html.jspf
logpaginationfooter.html.jspf
logpaginationheader.html.jspf
Message.html.jspf
Navigation.html.jspf
page.html.jspf
tabs.html.jspf
 
openrdf-sesame.war/WEB-INF/lib:
activation-1.1.jar
aduna-appbase-core-3.9.0.jar
aduna-appbase-logging-api-3.9.0.jar
aduna-appbase-logging-file-3.9.0.jar
aduna-appbase-webapp-base-core-3.9.0.jar
aduna-appbase-webapp-system-core-3.9.0.jar
aduna-commons-collections-2.7.0.jar
aduna-commons-concurrent-2.6.0.jar
aduna-commons-i18n-1.3.0.jar
aduna-commons-io-2.8.0.jar
aduna-commons-iteration-2.7.0.jar
aduna-commons-lang-2.8.0.jar
aduna-commons-net-2.6.0.jar
aduna-commons-platform-info-2.8.0.jar
aduna-commons-text-2.6.0.jar
aduna-commons-webapp-core-2.8.0.jar
aduna-commons-xml-2.6.0.jar
aopalliance-1.0.jar
asm-1.5.3.jar
cglib-2.1_3.jar
commons-codec-1.3.jar
commons-dbcp-1.2.2.jar
commons-httpclient-3.1.jar
commons-pool-1.3.jar
jcl-over-slf4j-1.5.10.jar
jstl-1.1.2.jar
logback-classic-0.9.18.jar
logback-core-0.9.18.jar
ojdbc6.jar
sdordf.jar
sdordfsesame.jar
sesame-http-client-2.3.1.jar
sesame-http-protocol-2.3.1.jar
sesame-http-server-2.3.1.jar
sesame-http-server-spring-2.3.1.jar
sesame-model-2.3.1.jar
sesame-query-2.3.1.jar
sesame-queryalgebra-evaluation-2.3.1.jar
sesame-queryalgebra-model-2.3.1.jar
sesame-queryparser-api-2.3.1.jar
sesame-queryparser-serql-2.3.1.jar
sesame-queryparser-sparql-2.3.1.jar
sesame-queryresultio-api-2.3.1.jar
sesame-queryresultio-binary-2.3.1.jar
sesame-queryresultio-sparqljson-2.3.1.jar
sesame-queryresultio-sparqlxml-2.3.1.jar
sesame-queryresultio-text-2.3.1.jar
sesame-repository-api-2.3.1.jar
sesame-repository-contextaware-2.3.1.jar
sesame-repository-dataset-2.3.1.jar
sesame-repository-event-2.3.1.jar
sesame-repository-http-2.3.1.jar
sesame-repository-manager-2.3.1.jar
sesame-repository-sail-2.3.1.jar
sesame-rio-api-2.3.1.jar
sesame-rio-n3-2.3.1.jar
sesame-rio-ntriples-2.3.1.jar
sesame-rio-rdfxml-2.3.1.jar
sesame-rio-trig-2.3.1.jar
sesame-rio-trix-2.3.1.jar
sesame-rio-turtle-2.3.1.jar
sesame-runtime-2.3.1.jar
sesame-sail-api-2.3.1.jar
sesame-sail-inferencer-2.3.1.jar
sesame-sail-memory-2.3.1.jar
sesame-sail-nativerdf-2.3.1.jar
sesame-sail-rdbms-2.3.1.jar
slf4j-api-1.5.10.jar
spring-aop-2.5.6.jar
spring-beans-2.5.6.jar
spring-context-2.5.6.jar
spring-context-support-2.5.6.jar
spring-core-2.5.6.jar
spring-web-2.5.6.jar
spring-webmvc-2.5.6.jar
standard-1.1.2.jar
urlrewritefilter-3.0.4.jar
 
openrdf-sesame.war/WEB-INF/taglibs:
navigation.tld
 
openrdf-sesame.war/WEB-INF/tags:
errors.tag
 
openrdf-sesame.war/WEB-INF/views:
home
overview.jsp
system
 
openrdf-sesame.war/WEB-INF/views/home:
overview.jsp
 
openrdf-sesame.war/WEB-INF/views/system:
info
logging
overview.jsp
 
openrdf-sesame.war/WEB-INF/views/system/info:
debug.jsp
overview.jsp
 
openrdf-sesame.war/WEB-INF/views/system/logging:
overview.jsp
</pre></li>
<li>
<p>Start or restart WebLogic Server.</p>
</li>
<li>
<p>Verify your deployment by using your Web browser to connect to a URL in the following format (assume that the Web application is deployed at port 7001): <code class="codeph">http://</code><span class="italic"><code class="codeph">&lt;hostname&gt;</code></span><code class="codeph">:7001/openrdf-sesame/querymgt?abortqid=0</code></p>
<p>You should see an XML response, which indicates a successful deployment of the Sesame Server with the support for Sesame query management servlet.</p>
</li>
</ol>
<p>You can also install the OpenRDF Workbench, which is a graphical user interface (GUI) for communicating with the Sesame Server. To deploy the OpenRDF Workbench into the Oracle WebLogic Server, you must have performed at least the first 7 steps in the preceding instructions for setting up the SPARQL endpoint (explained earlier in this section); then, follow these steps:</p>
<ol>
<li>
<p>Go to the <code class="codeph">autodeploy</code> directory of WebLogic Server and copy files, as follows. (For information about auto-deploying applications in development domains, see: <a href="http://docs.oracle.com/cd/E11035_01/wls100/deployment/autodeploy.html" target="_blank"><code class="codeph">http://docs.oracle.com/cd/E11035_01/wls100/deployment/autodeploy.html</code></a>)</p>
<pre dir="ltr">cd <span class="italic">&lt;domain_name&gt;</span>/autodeploy
cp -rf  /tmp/<span class="bold">openrdf-workbench</span>.war  <span class="italic">&lt;domain_name&gt;</span>/autodeploy
</pre>
<p>In the preceding example, <span class="italic">&lt;domain_name&gt;</span> is the name of a WebLogic Server domain.</p>
</li>
<li>
<p>Check the files and the directory structure, as in the following example:</p>
<pre dir="ltr">autodeploy/% ls -1R ./openrdf-workbench.war/
 openrdf-workbench.war/:

favicon.ico
favicon.png
images
locale
META-INF
scripts
styles
transformations
WEB-INF
 
openrdf-workbench.war/images:
affirmative.png
edit.png
logo.png
negative.png
productgroup.png
server_network.png
server.png
view.png
 
openrdf-workbench.war/locale:
messages.xsl
 
openrdf-workbench.war/META-INF:
MANIFEST.MF
maven
 
openrdf-workbench.war/META-INF/maven:
org.openrdf.sesame
 
openrdf-workbench.war/META-INF/maven/org.openrdf.sesame:
sesame-http-workbench
 
openrdf-workbench.war/META-INF/maven/org.openrdf.sesame/sesame-http-workbench:
pom.properties
pom.xml
 
openrdf-workbench.war/scripts:
cookies.html
 
openrdf-workbench.war/styles:
basic
default
msie-png-alpha.css
msie-png-alpha.png
w3-html40-recommended.css
 
openrdf-workbench.war/styles/basic:
all.css
 
openrdf-workbench.war/styles/default:
images
msie-minheight.css
print.css
screen.css
 
openrdf-workbench.war/styles/default/images:
bg_body.png
bg_header.png
bg_html.png
hr_menu.png
 
openrdf-workbench.war/transformations:
add.xsl
boolean.xsl
clear.xsl
contexts.xsl
create-memory-rdfs-dt.xsl
create-memory-rdfs.xsl
create-memory.xsl
create-mysql.xsl
create-native-rdfs-dt.xsl
create-native-rdfs.xsl
create-native.xsl
create-pgsql.xsl
create-remote.xsl
create.xsl
delete.xsl
explore.xsl
export.xsl
graph.xsl
information.xsl
list.xsl
namespaces.xsl
query.xsl
remove.xsl
repositories.xsl
server.xsl
summary.xsl
table.xsl
template.xsl
tuple.xsl
types.xsl
url-encode.xsl
 
openrdf-workbench.war/WEB-INF:
classes
lib
web.xml
 
openrdf-workbench.war/WEB-INF/classes:
org
 
openrdf-workbench.war/WEB-INF/classes/org:
openrdf
 
openrdf-workbench.war/WEB-INF/classes/org/openrdf:
workbench
 
openrdf-workbench.war/WEB-INF/classes/org/openrdf/workbench:
base
commands
exceptions
proxy
RepositoryServlet.class
util
 
openrdf-workbench.war/WEB-INF/classes/org/openrdf/workbench/base:
BaseRepositoryServlet.class
BaseServlet.class
TransformationServlet.class
TupleServlet.class
 
openrdf-workbench.war/WEB-INF/classes/org/openrdf/workbench/commands:
AddServlet.class
ClearServlet.class
ContextsServlet.class
CreateServlet.class
DeleteServlet.class
ExploreServlet.class
ExportServlet.class
InformationServlet.class
InfoServlet.class
NamespacesServlet.class
QueryServlet.class
RemoveServlet.class
RepositoriesServlet.class
SummaryServlet.class
TypesServlet.class
 
openrdf-workbench.war/WEB-INF/classes/org/openrdf/workbench/exceptions:
BadRequestException.class
MissingInitParameterException.class
 
openrdf-workbench.war/WEB-INF/classes/org/openrdf/workbench/proxy:
CookieCacheControlFilter$CacheAwareRequest.class
CookieCacheControlFilter$CacheAwareResponse.class
CookieCacheControlFilter.class
ProxyRepositoryServlet.class
RedirectFilter.class
WorkbenchGateway.class
WorkbenchServlet.class
 
openrdf-workbench.war/WEB-INF/classes/org/openrdf/workbench/util:
BasicServletConfig.class
ConfigTemplate.class
DynamicHttpRequest.class
TupleResultBuilder.class
WorkbenchRequest.class
 
openrdf-workbench.war/WEB-INF/lib:
aduna-appbase-core-3.9.0.jar
aduna-appbase-logging-api-3.9.0.jar
aduna-appbase-logging-file-3.9.0.jar
aduna-commons-collections-2.7.0.jar
aduna-commons-concurrent-2.6.0.jar
aduna-commons-i18n-1.3.0.jar
aduna-commons-io-2.8.0.jar
aduna-commons-iteration-2.7.0.jar
aduna-commons-lang-2.8.0.jar
aduna-commons-net-2.6.0.jar
aduna-commons-platform-info-2.8.0.jar
aduna-commons-text-2.6.0.jar
aduna-commons-xml-2.6.0.jar
commons-cli-1.1.jar
commons-codec-1.3.jar
commons-dbcp-1.2.2.jar
commons-fileupload-1.2.1.jar
commons-httpclient-3.1.jar
commons-io-1.3.2.jar
commons-pool-1.3.jar
jcl-over-slf4j-1.5.10.jar
sesame-console-2.3.1.jar
sesame-http-client-2.3.1.jar
sesame-http-protocol-2.3.1.jar
sesame-model-2.3.1.jar
sesame-query-2.3.1.jar
sesame-queryalgebra-evaluation-2.3.1.jar
sesame-queryalgebra-model-2.3.1.jar
sesame-queryparser-api-2.3.1.jar
sesame-queryparser-serql-2.3.1.jar
sesame-queryparser-sparql-2.3.1.jar
sesame-queryresultio-api-2.3.1.jar
sesame-queryresultio-binary-2.3.1.jar
sesame-queryresultio-sparqljson-2.3.1.jar
sesame-queryresultio-sparqlxml-2.3.1.jar
sesame-queryresultio-text-2.3.1.jar
sesame-repository-api-2.3.1.jar
sesame-repository-contextaware-2.3.1.jar
sesame-repository-dataset-2.3.1.jar
sesame-repository-event-2.3.1.jar
sesame-repository-http-2.3.1.jar
sesame-repository-manager-2.3.1.jar
sesame-repository-sail-2.3.1.jar
sesame-rio-api-2.3.1.jar
sesame-rio-n3-2.3.1.jar
sesame-rio-ntriples-2.3.1.jar
sesame-rio-rdfxml-2.3.1.jar
sesame-rio-trig-2.3.1.jar
sesame-rio-trix-2.3.1.jar
sesame-rio-turtle-2.3.1.jar
sesame-runtime-2.3.1.jar
sesame-sail-api-2.3.1.jar
sesame-sail-inferencer-2.3.1.jar
sesame-sail-memory-2.3.1.jar
sesame-sail-nativerdf-2.3.1.jar
sesame-sail-rdbms-2.3.1.jar
slf4j-api-1.5.10.jar
slf4j-jdk14-1.5.10.jar
</pre></li>
<li>
<p>Start or restart WebLogic Server.</p>
</li>
<li>
<p>Verify your deployment by using your Web browser to connect to a URL in the following format (assume that the Web application is deployed at port 7001): <code class="codeph">http://</code><span class="italic"><code class="codeph">&lt;hostname&gt;</code></span><code class="codeph">:7001/openrdf-workbench</code></p>
<p>You should see a web page with the OpenRDF Workbench logo. Click the <span class="bold">Repositories</span> link on the left to see a list of repositories.</p>
</li>
</ol>
</div>
<a id="RDFRM311"></a>
<div class="props_rev_3"><a id="GUID-37B3F590-1721-47C6-A53F-66BD4218340D"></a>
<h4 id="RDFRM-GUID-37B3F590-1721-47C6-A53F-66BD4218340D" class="sect4"><span class="enumeration_section">8.2.2.1</span> Creating the Required Data Source Using WebLogic Server</h4>
<div>
<div class="section">
<p>If you need help creating the required J2EE data source using the WebLogic Server admin console, you can follow these steps:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Login to: <code class="codeph">http://</code><span class="italic"><code class="codeph">&lt;hostname&gt;</code></span><code class="codeph">:7001/console</code></span></li>
<li class="stepexpand"><span>In the Domain Structure panel, click <span class="bold">Services</span>.</span></li>
<li class="stepexpand"><span>Click <span class="bold">JDBC</span></span></li>
<li class="stepexpand"><span>Click <span class="bold">Data Sources</span>.</span></li>
<li class="stepexpand"><span>In the Summary of JDBC Data Sources panel, click <span class="bold">New</span> under the Data Sources table.</span></li>
<li class="stepexpand"><span>In the Create a New JDBC Data Source panel, enter or select the following values.</span>
<div>
<p><span class="bold">Name</span>: <code class="codeph">OracleSemDS</code></p>
<p><span class="bold">JNDI Name</span>: <code class="codeph">OracleSemDS</code></p>
<p><span class="bold">Database Type</span>: <code class="codeph">Oracle</code></p>
<p><span class="bold">Database Driver</span>: <code class="codeph">Oracle&#39;s Driver (Thin) Versions: 9.0.1,9.2.0,10,11</code></p>
</div>
</li>
<li class="stepexpand"><span>Click <span class="bold">Next</span> twice.</span></li>
<li class="stepexpand"><span>In the Connection Properties panel, enter the appropriate values for the <span class="bold">Database Name</span>, <span class="bold">Host Name</span>, <span class="bold">Port</span>, <span class="bold">Database User Name</span> (schema that contains semantic data), <span class="bold">Password</span> fields.</span></li>
<li class="stepexpand"><span>Click <span class="bold">Next</span>.</span></li>
<li class="stepexpand"><span>Select (check) the target server or servers to which you want to deploy this <code class="codeph">OracleSemDS</code> data source.</span></li>
<li class="stepexpand"><span>Click <span class="bold">Finish</span>.</span>
<div>
<p>You should see a message that all changes have been activated and no restart is necessary.</p>
</div>
</li>
</ol>
</div>
</div>
<a id="RDFRM312"></a>
<div class="props_rev_3"><a id="GUID-6A9FD780-2D49-4065-94CC-481BDB54DA95"></a>
<h4 id="RDFRM-GUID-6A9FD780-2D49-4065-94CC-481BDB54DA95" class="sect4"><span class="enumeration_section">8.2.2.2</span> Configuring the SPARQL Service</h4>
<div>
<p>You can use the <code class="codeph">OracleSailStore</code> API and other relevant APIs to create semantic models, load data (incrementally or in bulk), and perform logical inference.</p>
<p>After the semantic models are in the Oracle database, you can use the Sesame Console (described in <a href="rdf-sesame.htm#GUID-D288DB3F-21B2-4E58-A8AE-CC7682DFF410">Using the Sesame Console with RDF Semantic Graph Support for OpenRDF Sesame</a>) to connect to the Sesame Server and create an Oracle semantic model-backed repository. For example, you might create a repository with the repository ID <code class="codeph">myOracleRepos</code> that uses a semantic model named <code class="codeph">LUBM</code> and the <code class="codeph">OWLPRIME</code> rulebase.</p>
<p>This newly created repository provides a new service endpoint on the Sesame Server.</p>
</div>
</div>
<a id="RDFRM313"></a>
<div class="props_rev_3"><a id="GUID-3C98A5CC-6860-482F-99A5-87D4466C1498"></a>
<h4 id="RDFRM-GUID-3C98A5CC-6860-482F-99A5-87D4466C1498" class="sect4"><span class="enumeration_section">8.2.2.3</span> Terminating Long-Running SPARQL Queries</h4>
<div>
<p>Because some applications need to be able to terminate long-running SPARQL queries, an abort framework has been introduced with RDF Semantic Graph support for OpenRDF Sesame and the Sesame Server setup. Basically, for queries that may take a long time to run, you must stamp each with a unique query ID (qid) value.</p>
<p>For example, the following SPARQL query selects out the subject of all triples. A query ID (qid) is set so that this query can be terminated upon request.</p>
<pre dir="ltr">PREFIX ORACLE_SEM_FS_NS:  &lt;http://example.com/semtech#qid=8761&gt;
SELECT ?subject WHERE {?subject ?property ?object }
</pre>
<p>The <code class="codeph">qid</code> attribute value is of long integer type. You can choose a value for the <code class="codeph">qid</code> for a particular query based on your own application needs.</p>
<p>To terminate a SPARQL query that has been submitted with a qid value, applications can send an abort request to a servlet in the following format and specify a matching QID value</p>
<pre dir="ltr">http://<span class="italic">&lt;hostname&gt;</span>:7001/openrdf-sesame/querymgt?abortqid=8761
</pre></div>
</div>
</div>
<a id="RDFRM314"></a>
<div class="props_rev_3"><a id="GUID-EC6402A5-B09D-435B-A614-84CDE7EE7E3F"></a>
<h3 id="RDFRM-GUID-EC6402A5-B09D-435B-A614-84CDE7EE7E3F" class="sect3"><span class="enumeration_section">8.2.3</span> Setting Up the RDF Semantic Graph Environment</h3>
<div>
<div class="section">
<p>To use the support for Sesame to perform queries, you can connect as any user (with suitable privileges) and use any models in the semantic network. If your RDF Semantic Graph environment already meets the requirements, you can go directly to compiling and running Java code that uses the support for Sesame. If your RDF Semantic Graph environment is not yet set up to be able to use the support for Sesame, you can perform actions similar to the following example steps:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Connect as SYS with the SYSDBA role:</span>
<div>
<pre dir="ltr">sqlplus sys/<span class="italic">&lt;password-for-sys&gt;</span> as sysdba
</pre></div>
</li>
<li class="stepexpand"><span>Create a tablespace for the system tables. For example:</span>
<div>
<pre dir="ltr">CREATE TABLESPACE rdf_users datafile &#39;rdf_users01.dbf&#39; 
    size 128M reuse autoextend on next 64M 
    maxsize unlimited segment space management auto;
</pre></div>
</li>
<li class="stepexpand"><span>Create the semantic network. For example:</span>
<div>
<pre dir="ltr">EXECUTE sem_apis.create_sem_network(&#39;RDF_USERS&#39;);
</pre></div>
</li>
<li class="stepexpand"><span>Create a database user (for connecting to the database to use the semantic network and the support for Sesame). For example:</span>
<div>
<pre dir="ltr">CREATE USER rdfusr IDENTIFIED BY &lt;password-for-udfusr&gt;
                   DEFAULT TABLESPACE rdf_users;
</pre></div>
</li>
<li class="stepexpand"><span>Grant the necessary privileges to this database user. For example:</span>
<div>
<pre dir="ltr">GRANT connect, resource TO rdfusr;
</pre></div>
</li>
<li class="stepexpand"><span>To use the support for Sesame with your own semantic data, perform the appropriate steps to store data, create a model, and create database indexes, as explained in <a href="rdf-overview.htm#GUID-7F590F2D-F382-4CD6-A95A-757010BB148F">Quick Start for Using Semantic Data</a>. Then perform queries by compiling and running Java code; see <a href="rdf-sesame.htm#GUID-950C682E-7DD2-4B1A-816F-4C8E7D5F6014">Example Queries Using RDF Semantic Graph support for OpenRDF Sesame</a> for information about example queries.</span>
<div>
<p>To use the support for Sesame with supplied example data, see <a href="rdf-sesame.htm#GUID-950C682E-7DD2-4B1A-816F-4C8E7D5F6014">Example Queries Using RDF Semantic Graph support for OpenRDF Sesame</a>.</p>
</div>
</li>
</ol>
</div>
</div>
</div>
<a id="RDFRM315"></a>
<div class="props_rev_3"><a id="GUID-EF02F7ED-356B-4175-9B92-B002D109466F"></a>
<h2 id="RDFRM-GUID-EF02F7ED-356B-4175-9B92-B002D109466F" class="sect2"><span class="enumeration_section">8.3</span> SEM_MATCH and RDF Semantic Graph Support for OpenRDF Sesame Queries Compared</h2>
<div>
<p>There are two ways to query semantic data stored in Oracle Database: SEM_MATCH-based SQL statements and SPARQL queries through RDF Semantic Graph support for OpenRDF Sesame. Queries using each approach are similar in appearance, but there are important behavioral differences. To ensure consistent application behavior, you must understand the differences and use care when dealing with query results coming from SEM_MATCH queries and SPARQL queries.</p>
<p>The following simple examples show the two approaches.</p>
<p><span class="bold">Query 1 (SEM_MATCH-based)</span></p>
<pre dir="ltr">select s, p, o
    from table(sem_match(&#39;{?s ?p ?o}&#39;, sem_models(&#39;Test_Model&#39;), ....))
</pre>
<p><span class="bold">Query 2 (SPARQL query through RDF Semantic Graph support for OpenRDF Sesame)</span></p>
<pre dir="ltr">select ?s ?p ?o
where {?s ?p ?o}
</pre>
<p>These two queries perform the same kind of functions; however, there are some important differences. Query 1 (SEM_MATCH-based):</p>
<ul style="list-style-type: disc;">
<li>
<p>Reads all triples out of <code class="codeph">Test_Model</code>.</p>
</li>
<li>
<p>Does not differentiate among URI, bNode, plain literals, and typed literals, and it does not handle long literals.</p>
</li>
<li>
<p>Does not unescape certain characters (such as <code class="codeph">&#39;\n&#39;</code>).</p>
</li>
</ul>
<p>Query 2 (SPARQL query executed through RDF Semantic Graph support for OpenRDF Sesame) also reads all triples out of <code class="codeph">Test_Model</code> (assume it executed a call to <code class="codeph">ModelOracleSem</code> referring to the same underlying <code class="codeph">Test_Model</code>). However, Query 2:</p>
<ul style="list-style-type: disc;">
<li>
<p>Reads out additional columns (as opposed to just the <code class="codeph">s</code>, <code class="codeph">p</code>, and <code class="codeph">o</code> columns with the SEM_MATCH table function), to differentiate URI, bNodes, plain literals, typed literals, and long literals. This is to ensure proper creation of Sesame Node objects.</p>
</li>
<li>
<p>Unescapes those characters that are escaped when stored in Oracle Database</p>
</li>
</ul>
<p>Blank node handling is another difference between the two approaches:</p>
<ul style="list-style-type: disc;">
<li>
<p>In a SEM_MATCH-based query, blank nodes are always treated as constants.</p>
</li>
<li>
<p>In a SPARQL query, a blank node that <span class="italic">is not</span> wrapped inside <code class="codeph">&lt;</code> and <code class="codeph">&gt;</code> is treated as a variable when the query is executed through the support for Sesame. This matches the SPARQL standard semantics. However, a blank node that <span class="italic">is</span> wrapped inside <code class="codeph">&lt;</code> and <code class="codeph">&gt;</code> is treated as a constant when the query is executed, and the support for Sesame adds a proper prefix to the blank node label as required by the underlying data modeling.</p>
</li>
</ul>
<p>The maximum length for the name of a semantic model created using the RDF Semantic Graph support for OpenRDF Sesame API is 22 characters.</p>
</div>
</div>
<a id="RDFRM316"></a>
<div class="props_rev_3"><a id="GUID-047130B2-42C7-4B6F-AECE-7D662644633A"></a>
<h2 id="RDFRM-GUID-047130B2-42C7-4B6F-AECE-7D662644633A" class="sect2"><span class="enumeration_section">8.4</span> Optimized Handling of SPARQL Queries</h2>
<div>
<p>This section describes some performance-related features of RDF Semantic Graph support for OpenRDF Sesame that can enhance SPARQL query processing. These features are performed automatically by default.</p>
</div>
<a id="RDFRM317"></a>
<div class="props_rev_3"><a id="GUID-9483655B-B4EE-4D47-9856-9FBCD35FCBE4"></a>
<h3 id="RDFRM-GUID-9483655B-B4EE-4D47-9856-9FBCD35FCBE4" class="sect3"><span class="enumeration_section">8.4.1</span> Compilation of SPARQL Queries to a Single SEM_MATCH Call</h3>
<div>
<p>SPARQL queries involving DISTINCT, OPTIONAL, GRAPH, FILTER, UNION, ORDER BY, and LIMIT are converted to a single SQL query based on the SEM_MATCH table function. For SPARQL ASK, DESCRIBE, and CONSTRUCT queries, the support for Sesame employs additional query transformation logic and mid-tier processing.</p>
<p>If the SQL query based on SEM_MATCH fails to execute, the support for Sesame employs the Sesame evaluation strategy to execute the query.</p>
</div>
</div>
</div>
<a id="RDFRM318"></a>
<div class="props_rev_3"><a id="GUID-2E11B168-FCEE-4AF0-ABC0-3CE189AF8A22"></a>
<h2 id="RDFRM-GUID-2E11B168-FCEE-4AF0-ABC0-3CE189AF8A22" class="sect2"><span class="enumeration_section">8.5</span> Recommendations for Best Performance</h2>
<div>
<p>The following are recommendations for enhancing the performance of queries using RDF Semantic Graph support for OpenRDF Sesame:</p>
<ul style="list-style-type: disc;">
<li>
<p>Put only relevant triple patterns in the GRAPH clause of a SPARQL query, to reduce the number of additional joins with the application table. (For an explanation, see <a href="rdf-sesame.htm#GUID-10B6CD72-A888-4E3F-922C-9A6BF3828CFE">Statement Storage and Implications for RDF Semantic Graph Support for OpenRDF Sesame Queries</a>.)</p>
</li>
<li>
<p>For the triple patterns inside GRAPH clause of a named graph query, do not use variables with null bindings. A null binding will not match any row in the join with the relevant application table, and therefore this binding will be dropped.</p>
</li>
<li>
<p>Because of the preceding item, do not put an OPTIONAL clause in a GRAPH clause, or a GRAPH clause in an OPTIONAL clause.</p>
</li>
<li>
<p>Do not use blank nodes for the CONTEXT column in the application table (see <a href="rdf-sesame.htm#GUID-10B6CD72-A888-4E3F-922C-9A6BF3828CFE">Statement Storage and Implications for RDF Semantic Graph Support for OpenRDF Sesame Queries</a>), because blank nodes in named graphs from two different semantic models will be treated as the same resource if they have the same label. This is not the case for blank nodes in triples (they are stored separately if coming from different models).</p>
</li>
</ul>
</div>
<a id="RDFRM319"></a>
<div class="props_rev_3"><a id="GUID-10B6CD72-A888-4E3F-922C-9A6BF3828CFE"></a>
<h3 id="RDFRM-GUID-10B6CD72-A888-4E3F-922C-9A6BF3828CFE" class="sect3"><span class="enumeration_section">8.5.1</span> Statement Storage and Implications for RDF Semantic Graph Support for OpenRDF Sesame Queries</h3>
<div>
<p>Because the MDSYS.SEMM_<span class="italic">model-name</span> view (described in <a href="rdf-overview.htm#GUID-A2556E81-4419-49ED-9EA0-AA7EA3BB67AE__CHDDFJCF" title="MDSYS.SEMM_model-name View Columns">Table 1-2</a> in <a href="rdf-overview.htm#GUID-A2556E81-4419-49ED-9EA0-AA7EA3BB67AE">Metadata for Models</a>) does not have columns for the graph name or context for each model, these two pieces of information are not stored inside that Oracle semantic model. Rather, this information is kept in the CONTEXT column in the user&#39;s application table.</p>
<p>When an <code class="codeph">OracleSailStore</code> object is created for the first time using a model name that does not exist in the semantic network, a new application table is created automatically, and it includes these columns:</p>
<ul style="list-style-type: disc;">
<li>
<p>TRIPLE, of type SDO_RDF_TRIPLE_S</p>
</li>
<li>
<p>CONTEXT, of type VARCHAR2</p>
</li>
</ul>
<p>A semantic model with the specified model name is then created. To enhance the performance of named graph queries and statement-oriented operations, a default index is created on the application table, and this index covers the CONTEXT column (leading column) as well as the three numeric ID attributes for triple&#39;s subject, predicate, and object field of the TRIPLE column.</p>
<p>When a SPARQL query runs against a semantic model, if the query does not use a named graph (that is, does not contain a GRAPH clause), the generated SQL statement will not use the model&#39;s application table. However, if the query has a GRAPH clause, the generated SQL statement will join a SEM_MATCH-based subquery with the model&#39;s application table to scope the results down to relevant contexts or named graphs. The number of joins with the application table depends on how many triple patterns are in the GRAPH clause, and therefore it is best to put only relevant triple patterns in the GRAPH clause, to reduce the number of additional joins with the application table.</p>
</div>
</div>
</div>
<a id="RDFRM320"></a>
<div class="props_rev_3"><a id="GUID-4A9C42A4-2625-482D-B240-8472530B3C98"></a>
<h2 id="RDFRM-GUID-4A9C42A4-2625-482D-B240-8472530B3C98" class="sect2"><span class="enumeration_section">8.6</span> Additions to the SPARQL Syntax to Support Other Features</h2>
<div>
<p>RDF Semantic Graph support for OpenRDF Sesame allows you to pass in hints and additional query options. It implements these capabilities by overloading the SPARQL namespace prefix syntax by using Oracle-specific namespaces that contain query options. The namespaces are in the form <span class="italic"><code class="codeph">PREFIX ORACLE_SEM_</code></span>xx<code class="codeph">_NS</code>, where <span class="italic">xx</span> indicates the type of feature (such as <code class="codeph">HT</code> for hint or <code class="codeph">AP</code> for additional predicate)</p>
</div>
<a id="RDFRM321"></a>
<div class="props_rev_3"><a id="GUID-71E8C075-B40C-46D0-84CA-BB3DF566FC36"></a>
<h3 id="RDFRM-GUID-71E8C075-B40C-46D0-84CA-BB3DF566FC36" class="sect3"><span class="enumeration_section">8.6.1</span> SQL Hints</h3>
<div>
<p>SQL hints can be passed to a SEM_MATCH query including a line in the following form:</p>
<pre dir="ltr">PREFIX ORACLE_SEM_<span class="bold">HT</span>_NS: &lt;http://oracle.com/semtech#<span class="italic">hint</span>&gt;
</pre>
<p>Where <span class="italic">hint</span> can be any hint supported by SEM_MATCH. For example:</p>
<pre dir="ltr">PREFIX ORACLE_SEM_HT_NS: &lt;http://oracle.com/semtech#leading(t0,t1)&gt; 
SELECT ?book ?title ?isbn     
WHERE { ?book &lt;http://title&gt; ?title. ?book &lt;http://ISBN&gt; ?isbn }
</pre>
<p>In this example, <code class="codeph">t0,t1</code> refers to the first and second patterns in the query.</p>
<p>Note the slight difference in specifying hints when compared to SEM_MATCH. Due to restrictions of namespace value syntax, a comma (<code class="codeph">,</code>) must be used to separate <code class="codeph">t0</code> and <code class="codeph">t1</code> (or other hint components) instead of a space.</p>
<p>For more information about using SQL hints, see <a href="rdf-overview.htm#GUID-71464CC4-1C03-48A4-9A4C-0E671FF8F16E">Using the SEM_MATCH Table Function to Query Semantic Data</a>, specifically the material about the <code class="codeph">HINT0</code> keyword in the <code class="codeph">options</code> attribute.</p>
</div>
</div>
<a id="RDFRM322"></a>
<div class="props_rev_3"><a id="GUID-2D3F1533-B9D7-4BF5-9EB3-EFBAA4D062B8"></a>
<h3 id="RDFRM-GUID-2D3F1533-B9D7-4BF5-9EB3-EFBAA4D062B8" class="sect3"><span class="enumeration_section">8.6.2</span> Additional WHERE Clause Predicates</h3>
<div>
<p>The SEM_MATCH <code class="codeph">filter</code> attribute can specify additional selection criteria as a string in the form of a WHERE clause without the WHERE keyword. Additional WHERE clause predicates can be passed to a SEM_MATCH query including a line in the following form:</p>
<pre dir="ltr">PREFIX ORACLE_SEM_<span class="bold">AP</span>_NS: &lt;http://oracle.com/semtech#<span class="italic">pred</span>&gt;
</pre>
<p>Where <span class="italic">pred</span> reflects the WHERE clause content to be appended to the query. For example:</p>
<pre dir="ltr">PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;
PREFIX ORACLE_SEM_AP_NS:&lt;http://www.oracle.com/semtech#label$RDFLANG=&#39;fr&#39;&gt;  
SELECT DISTINCT ?inst ?label
  WHERE { ?inst a &lt;http://someCLass&gt;. ?inst rdfs:label ?label . }
  ORDER BY (?label) LIMIT 20
</pre>
<p>In this example, a restriction is added to the query that the language type of the label variable must be <code class="codeph">&#39;fr&#39;</code>.</p>
</div>
</div>
<a id="RDFRM323"></a>
<div class="props_rev_3"><a id="GUID-35BA0890-AD55-4479-BB21-C84FF63A5247"></a>
<h3 id="RDFRM-GUID-35BA0890-AD55-4479-BB21-C84FF63A5247" class="sect3"><span class="enumeration_section">8.6.3</span> Additional Query Options</h3>
<div>
<p>Additional query options can be passed to a SEM_MATCH query including a line in the following form:</p>
<pre dir="ltr">PREFIX ORACLE_SEM_<span class="bold">FS</span>_NS: &lt;http://oracle.com/semtech#<span class="italic">option</span>&gt;
</pre>
<p>Where <span class="italic">option</span> reflects a query option (or multiple query options delimited by commas) to be appended to the query. For example:</p>
<pre dir="ltr">PREFIX ORACLE_SEM_FS_NS:   
&lt;http://oracle.com/semtech#timeout=3,dop=4,INF_ONLY,ORDERED,ALLOW_DUP=T&gt;
SELECT * WHERE {?subject ?property ?object }
</pre>
<p>The following query options are supported:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">ALLOW_DUP=t</code> chooses a faster way to query multiple semantic models, although duplicate results may occur.</p>
</li>
<li>
<p><code class="codeph">DOP=</code><span class="italic">n</span> specifies the degree of parallelism (<span class="italic">n</span>) for the query. With multi-core or multi-CPU processors, experimenting with different <code class="codeph">DOP</code> values (such as 4 or 8) may improve performance.</p>
</li>
<li>
<p><code class="codeph">INF_ONLY</code> causes only the inferred model to be queried. (For this option, you should also specify the <code class="codeph">includeInferred=true</code> option for the query.)</p>
</li>
<li>
<p><code class="codeph">ORDERED</code> is translated to a LEADING SQL hint for the query triple pattern joins, while performing the necessary RDF_VALUE$ joins last.</p>
</li>
<li>
<p><code class="codeph">QID=</code><span class="italic">n</span> specifies a query ID number; this feature can be used to cancel the query if it is not responding.</p>
</li>
<li>
<p><code class="codeph">REWRITE=F</code> disables ODCI_Table_Rewrite for the SEM_MATCH table function.</p>
</li>
<li>
<p><code class="codeph">SKIP_CLOB=T</code> causes CLOB values not to be returned for the query.</p>
</li>
<li>
<p><code class="codeph">TIMEOUT=</code><span class="italic">n</span> (query timeout) specifies the number of seconds (<span class="italic">n</span>) that the query will run until it is terminated.</p>
</li>
<li>
<p><code class="codeph">USE_BIND_VAR(</code><span class="italic"><code class="codeph">n</code></span><code class="codeph">)</code> specifies that a bind variable be used during query parsing for the <span class="italic">n</span>th constant in triple patterns. (Do not apply this feature to constants inside an OPTIONAL clause.)</p>
</li>
</ul>
</div>
</div>
</div>
<a id="RDFRM324"></a>
<div class="props_rev_3"><a id="GUID-7E028C30-97FA-4D76-BB37-5055362A76CF"></a>
<h2 id="RDFRM-GUID-7E028C30-97FA-4D76-BB37-5055362A76CF" class="sect2"><span class="enumeration_section">8.7</span> Support for Server-Side APIs</h2>
<div>
<p>This section describes some of the RDF Semantic Graph features that are exposed by RDF Semantic Graph support for OpenRDF Sesame. For comprehensive documentation of the API calls that support the available features, see the RDF Semantic Graph support for OpenRDF Sesame reference information (Javadoc). For additional information about the server-side features exposed by the support for Sesame, see the relevant chapters in this manual.</p>
</div>
<a id="RDFRM325"></a>
<div class="props_rev_3"><a id="GUID-5E709755-797E-476D-A235-8851E6BD13B5"></a>
<h3 id="RDFRM-GUID-5E709755-797E-476D-A235-8851E6BD13B5" class="sect3"><span class="enumeration_section">8.7.1</span> Virtual Models Support</h3>
<div>
<p>Virtual models (explained in <a href="rdf-overview.htm#GUID-8B957406-5ED1-4579-9C23-0EDE2FDF2964">Virtual Models</a>) are specified in the <code class="codeph">OracleSailStore</code> constructor, and they are handled transparently. If a virtual model exists for the model-rulebase combination, it is used in query answering; if such a virtual model does not exist, it is created in the database.</p>
<div class="infobox-note" id="GUID-5E709755-797E-476D-A235-8851E6BD13B5__GUID-40DDFBC8-F2BA-4E93-93A5-27907640DC7E">
<p class="notep1">Note:</p>
<p>Virtual model support through RDF Semantic Graph support for OpenRDF Sesame is available only with Oracle Database Release 11.2 or later.</p>
</div>
<p>The following example reuses an existing virtual model.</p>
<pre dir="ltr">public void vm(String jdbcUrl, 
                        String user, 
                        String password, 
                        String model,                              
                        PrintStream psOut) 
{
String m1 = &#34;TEST_1&#34;;
String m2 = &#34;TEST_2&#34;;
OraclePool op = new OraclePool(
    OraclePool.getOracleDataSource(jdbcUrl, user, password));
        
// create the attachment semantic model in case it doesn&#39;t exist 
// (constructor handles it)
<span class="bold">OracleSailStore store = new OracleSailStore(op, m1);</span>
store.shutDown();
                
store= new OracleSailStore(op, m2);
store.shutDown();
 
String vmName = &#34;VM_&#34; + m1;
 
// create a virtual model with name vmName that will be used in the 
// OracleSailStore
Oracle oracle = op.getOracle();
oracle.executeCall(
&#34;begin sem_apis.create_virtual_model(?,sem_models(?,?), null); end;&#34;, 
 vmName, m1, m2);
op.returnOracle(oracle);
 
 String[] modelNames = {m2};
 String[] rulebaseNames = {};
 
 Attachment attachment = Attachment.createInstance(modelNames,
 rulebaseNames); 
 
    store = new OracleSailStore(op, m1, attachment, vmName);
 
OracleSailConnection conn = store.getConnection();
conn.clear();
conn.addStatement(
        store.getValueFactory().createURI(&#34;http://a1&#34;), 
        store.getValueFactory().createURI(&#34;http://p1&#34;), 
        store.getValueFactory().createURI(&#34;http://b1&#34;));
   
CloseableIteration res = conn.getStatements(null, null, null, false);
while (res.hasNext()) {
  Statement stmt = (Statement) res.next();
  System.out.println(stmt);
}    
conn.close();
store.shutDown();
}
</pre>
<p>You can also use the <code class="codeph">OracleSailStore</code> constructor to create a virtual model, as in the following example:</p>
<pre dir="ltr">OracleSailStore store = new OracleSailStore(oracle, modelName, attachment, <span class="bold">true</span>);
</pre>
<p>In this example, the fourth parameter (<code class="codeph">true</code>) specifies that a virtual model needs to be created for the specified <code class="codeph">modelName</code> and <code class="codeph">attachment</code>.</p>
</div>
</div>
<a id="RDFRM326"></a>
<div class="props_rev_3"><a id="GUID-3D1B87B5-FBDF-4EEC-8AC8-4EE61FADF6CC"></a>
<h3 id="RDFRM-GUID-3D1B87B5-FBDF-4EEC-8AC8-4EE61FADF6CC" class="sect3"><span class="enumeration_section">8.7.2</span> Connection Pooling Support</h3>
<div>
<p>Oracle Database Connection Pooling is provided through the RDF Semantic Graph support for OpenRDF Sesame OraclePool class. Usually, OraclePool is initialized with a <code class="codeph">DataSource</code>, using the <code class="codeph">OraclePool (DataSource ods)</code> constructor. In this case, <code class="codeph">OraclePool</code> acts as an extended wrapper for the <code class="codeph">DataSource</code>, while using the connection pooling capabilities of the data source. When you create an <code class="codeph">OracleSailStore</code> object, it is sufficient to specify the <code class="codeph">OraclePool</code> object in the <code class="codeph">store</code> constructor; the database connections will then be managed automatically by the support for Sesame.</p>
<p>If you need to retrieve Oracle connection objects (which are essentially database connection wrappers) explicitly, you can invoke the <code class="codeph">OraclePool.getOracle</code> method. After finishing with the connection, you can invoke the <code class="codeph">OraclePool.returnOracle</code> method to return the object to the connection pool.</p>
<p><code class="codeph">OraclePool</code> can also be initialized with an <code class="codeph">OracleConnection</code> object. In this case, only a single database connection is used when referring to this <code class="codeph">OraclePool</code>; and because multiple Sesame <code class="codeph">SailConnection</code> objects will use the same database connection, you must be aware that &#34;dirty&#34; reads across different <code class="codeph">SailConnection</code> objects are possible.</p>
<p>More information about using <code class="codeph">OraclePool</code> can be found in the RDF Semantic Graph support for OpenRDF Sesame API reference information (Javadoc).</p>
<p>The following example sets up an <code class="codeph">OracleSailStore</code> object using the <code class="codeph">OraclePool</code> class, with two initial connections.</p>
<pre dir="ltr">public void op(String jdbcUrl, 
                 String user, 
                 String password, 
                 String model,                              
                 PrintStream psOut)
  throws Exception
  {          
    // test with connection properties 
    java.util.Properties prop = new java.util.Properties();
    prop.setProperty(&#34;MinLimit&#34;, &#34;2&#34;);     // the cache size is 2 at least 
    prop.setProperty(&#34;MaxLimit&#34;, &#34;10&#34;);
    prop.setProperty(&#34;InitialLimit&#34;, &#34;2&#34;); // create 2 connections at startup
    prop.setProperty(&#34;InactivityTimeout&#34;, &#34;1800&#34;);    //  seconds
    prop.setProperty(&#34;AbandonedConnectionTimeout&#34;, &#34;900&#34;);  //  seconds
    prop.setProperty(&#34;MaxStatementsLimit&#34;, &#34;10&#34;);
    prop.setProperty(&#34;PropertyCheckInterval&#34;, &#34;60&#34;); // seconds
 
    System.out.println(&#34;Creating Data Source&#34;);
    OracleDataSource ods = 
OraclePool.getOracleDataSource(jdbcUrl, user, password,
        prop, &#34;OracleSemConnPool&#34;);
    System.out.println(&#34;Done creating Data Source&#34;);
    
    <span class="bold">OraclePool op = new OraclePool(ods);</span>
 
    // create an OracleSailStore with the OraclePool
    <span class="bold">OracleSailStore store = new OracleSailStore(op, model);</span>
    store.shutDown();
    op.close();
    ods.close();
  }
</pre></div>
</div>
<a id="RDFRM328"></a><a id="RDFRM327"></a>
<div class="props_rev_3"><a id="GUID-643D78F4-74B8-4021-9971-1FFAEE14FE40"></a>
<h3 id="RDFRM-GUID-643D78F4-74B8-4021-9971-1FFAEE14FE40" class="sect3"><span class="enumeration_section">8.7.3</span> Semantic Model PL/SQL Interfaces</h3>
<div>
<p>Several semantic PL/SQL subprograms are available through the support for Sesame. <a href="rdf-sesame.htm#GUID-643D78F4-74B8-4021-9971-1FFAEE14FE40__CHDHHJDG" title="Pl/SQL Subprograms and Corresponding Sesame Adaptor Java Class and Methods">Table 8-1</a> lists the subprograms and their corresponding Java class and methods.</p>
<div class="tblformal" id="GUID-643D78F4-74B8-4021-9971-1FFAEE14FE40__CHDHHJDG">
<p class="titleintable">Table 8-1 PL/SQL Subprograms and Corresponding Support for Sesame Java Class and Methods</p>
<table class="cellalignment4510" title="PL/SQL Subprograms and Corresponding Support for Sesame Java Class and Methods" summary="Pl/SQL Subprograms and Corresponding Sesame Adaptor Java Class and Methods">
<thead>
<tr class="cellalignment4501">
<th class="cellalignment4532" id="d48356e2042">PL/SQL Subprogram</th>
<th class="cellalignment4533" id="d48356e2045">Corresponding Java Class and Methods</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment4501">
<td class="cellalignment4534" id="d48356e2050" headers="d48356e2042">
<p><a href="sem-apis-ref.htm#GUID-9A9A58D0-314B-4775-B55E-B939B6606AD8">SEM_APIS.DROP_SEM_MODEL</a></p>
</td>
<td class="cellalignment4535" headers="d48356e2050 d48356e2045">
<p>OracleUtils.dropSemanticModel</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4534" id="d48356e2059" headers="d48356e2042">
<p><a href="sem-apis-ref.htm#GUID-47CAA34C-3284-4665-BB9B-D65EBF07ED4E">SEM_APIS.MERGE_MODELS</a></p>
</td>
<td class="cellalignment4535" headers="d48356e2059 d48356e2045">
<p>OracleUtils.mergeModels</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4534" id="d48356e2068" headers="d48356e2042">
<p><a href="sem-apis-ref.htm#GUID-15186D10-9EDF-494F-B8CD-D5B77D9CC522">SEM_APIS.SWAP_NAMES</a></p>
</td>
<td class="cellalignment4535" headers="d48356e2068 d48356e2045">
<p>OracleUtils.swapNames</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4534" id="d48356e2077" headers="d48356e2042">
<p><a href="sem-apis-ref.htm#GUID-F5D87A18-2285-49B3-BB10-673DC61732F9">SEM_APIS.REMOVE_DUPLICATES</a></p>
</td>
<td class="cellalignment4535" headers="d48356e2077 d48356e2045">
<p>OracleUtils.removeDuplicates</p>
</td>
</tr>
<tr class="cellalignment4501">
<td class="cellalignment4534" id="d48356e2086" headers="d48356e2042">
<p><a href="sem-apis-ref.htm#GUID-D4E93775-083A-4625-BB37-CA169669C24A">SEM_APIS.RENAME_MODEL</a></p>
</td>
<td class="cellalignment4535" headers="d48356e2086 d48356e2045">
<p>OracleUtils.renameModels</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>For information about these PL/SQL utility subprograms, see the reference information in <a href="sem-apis-ref.htm#GUID-F42AB976-445A-4DCD-974C-3B9ED810E3D5">SEM_APIS Package Subprograms</a>. For information about the corresponding Java class and methods, see the RDF Semantic Graph support for OpenRDF Sesame API Reference documentation (Javadoc).</p>
</div>
</div>
<a id="RDFRM329"></a>
<div class="props_rev_3"><a id="GUID-8F2D8157-E7FB-4CB5-A8F4-A46E3D228F39"></a>
<h3 id="RDFRM-GUID-8F2D8157-E7FB-4CB5-A8F4-A46E3D228F39" class="sect3"><span class="enumeration_section">8.7.4</span> Inference Options</h3>
<div>
<p>You can add options to entailment calls by using the <code class="codeph">setInferenceOption(String options)</code> procedure with the <code class="codeph">OracleSailConnection</code> object. The following example enables incremental inference and specifies a parallelism value of 4 when creating an entailment.</p>
<pre dir="ltr">conn.setInferenceOption(&#34;INC=T,DOP=4&#34;);
</pre>
<p>For information about inference options, see <a href="owl-concepts.htm#GUID-30145814-CB5E-45ED-B220-677515F91AA9">Using OWL Inferencing</a>.</p>
</div>
</div>
</div>
<a id="RDFRM330"></a>
<div class="props_rev_3"><a id="GUID-F9BE410E-EEE3-4B40-996B-29065A155A49"></a>
<h2 id="RDFRM-GUID-F9BE410E-EEE3-4B40-996B-29065A155A49" class="sect2"><span class="enumeration_section">8.8</span> Oracle-Specific Extensions to Sesame APIs</h2>
<div>
<p>This section describes the extensions that RDF Semantic Graph support for OpenRDF Sesame provides to the Sesame <code class="codeph">SailConnection</code> and Sail APIs.</p>
</div>
<a id="RDFRM331"></a>
<div class="props_rev_3"><a id="GUID-541CEB92-BA99-4B8B-9242-252E2671353A"></a>
<h3 id="RDFRM-GUID-541CEB92-BA99-4B8B-9242-252E2671353A" class="sect3"><span class="enumeration_section">8.8.1</span> Statement Uniqueness</h3>
<div>
<p>In Sesame 2.3.0, statement uniqueness is enforced at the context level: the same triple cannot occur twice in a single context. In the support for Sesame, such uniqueness is enforced through a unique index on the context, predicate, subject, and object. However, in the support for Sesame, statement uniqueness is not enabled by default. When constructing an <code class="codeph">OracleSailStore</code> object, the default value for statement uniqueness is <code class="codeph">DONTCARE</code>, meaning that if such a unique index does not already exist, it will not be created.</p>
<p>You can explicitly enable and disable the requirement for statement uniqueness either through the <code class="codeph">OracleSailStore</code> constructor, or through the <code class="codeph">enableUniquenessConstraint</code> and <code class="codeph">disableUniquenessConstraint</code> methods.</p>
</div>
</div>
<a id="RDFRM333"></a><a id="RDFRM332"></a>
<div class="props_rev_3"><a id="GUID-E6E95791-65DD-4FD7-8B87-163E393B0DE9"></a>
<h3 id="RDFRM-GUID-E6E95791-65DD-4FD7-8B87-163E393B0DE9" class="sect3"><span class="enumeration_section">8.8.2</span> Indexes and Interoperability with the RDF Semantic Graph Support for Apache Jena</h3>
<div>
<p>Indexes on the application table are critical for good performance when performing DML operations (especially deletes) and named graph queries against an <code class="codeph">OracleSailStore</code> object. When creating a new <code class="codeph">OracleSailStore</code> object, a default <code class="codeph">CPSO</code> index is created (where <code class="codeph">C</code>,<code class="codeph">P</code>,<code class="codeph">S</code>,<code class="codeph">O</code> stands for the context, predicate, subject, and object columns).</p>
<p>There are some storage differences between Oracle semantic models created using the RDF Semantic Graph support for Sesame and Apache Jena. For example, the default application table index is different in the support for Apache Jena. To access data in an RDF Semantic Graph support for Apache Jena model from the RDF Semantic Graph support for OpenRDF Sesame (and vice versa), you can use the <code class="codeph">OracleUtils.migrateFromJena</code> and <code class="codeph">OracleUtils.migrateToJena</code> methods. These methods preserve the semantic data while making changes to the underlying storage structures. In particular, all triples along with their context information are preserved when migrating from RDF Semantic Graph support for OpenRDF Sesame to RDF Semantic Graph support for Apache Jena and back.</p>
<p><a href="rdf-sesame.htm#GUID-E6E95791-65DD-4FD7-8B87-163E393B0DE9__BABJCEIJ">Example 8-2</a> illustrates migration between models created using the RDF Semantic Graph support for OpenRDF Sesame and Apache Jena:</p>
<div class="example" id="GUID-E6E95791-65DD-4FD7-8B87-163E393B0DE9__BABJCEIJ">
<p class="titleinexample">Example 8-2 Migration Between RDF Semantic Graph Support for Apache Jena and Sesame Models</p>
<pre dir="ltr">public void migrate(String jdbcUrl, 
                         String user, 
                         String password, 
                         String model,                                
                         PrintStream psOut)
  throws Exception
  {
    OraclePool oraclePool= new OraclePool(
        OraclePool.getOracleDataSource(jdbcUrl, user, password));
       
    OracleSailStore store = new OracleSailStore(oraclePool, model);
    
    OracleSailConnection conn = store.getConnection();
    conn.clear();
    
    // create a statement and add it to the store
    URI subject = 
store.getValueFactory().createURI(&#34;http://example.org/foo&#34;);
    URI object = store.getValueFactory().createURI(&#34;http://example.org/bar&#34;);
    URI ngURI = store.getValueFactory().createURI(&#34;http://example.org/bar&#34;);
  
    conn.addStatement(subject, RDF.TYPE, object, ngURI);
    conn.commit();    
    
    // convert it to a jena model    
    <span class="bold">OracleUtils.migrateToJena(oraclePool, model);</span>    
 
    Oracle newOra = oraclePool.getOracle();
    oracle.spatial.rdf.client.jena.Oracle ora =
      new oracle.spatial.rdf.client.jena.Oracle(newOra.getConnection());
    
    GraphOracleSem graph = new GraphOracleSem(ora, model);
   
    // check size of jena graph
    System.out.print(&#34;GraphOracleSem size:&#34; + graph.getSize());
    
    store.shutDown();
    
    // now convert it back to an Oracle sailstore.
    <span class="bold">OracleUtils.migrateFromJena(oraclePool, model);</span>
    conn = store.getConnection();   
 
    // check overall store size
    System.out.println(&#34;Size of store :&#34; +conn.size());
    // check context size, should be 1
    System.out.println(&#34;Size of context &#34; + ngURI + &#34;:&#34; + conn.size(ngURI));
    store.shutDown();
    ora.dispose();
    oraclePool.returnOracle(newOra);
  }
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM334"></a>
<div class="props_rev_3"><a id="GUID-23EB7DAB-5B04-4B6C-989A-E3489D100190"></a>
<h3 id="RDFRM-GUID-23EB7DAB-5B04-4B6C-989A-E3489D100190" class="sect3"><span class="enumeration_section">8.8.3</span> Inference</h3>
<div>
<p>You can perform inference using the <code class="codeph">OracleSailConnection.performInference</code> method. This method builds an entailment for the <code class="codeph">OracleSailStore</code> object, given the models and rulebases that were specified in the attachment when constructing the store.</p>
<p>For information about creating entailments, see <a href="rdf-overview.htm#GUID-AE3CFE93-13CF-444E-9523-0693572851E7">Entailments (Rules Indexes)</a>.</p>
</div>
</div>
<a id="RDFRM335"></a>
<div class="props_rev_3"><a id="GUID-78CF63F9-0590-46D0-BF13-EF61D4F73B93"></a>
<h3 id="RDFRM-GUID-78CF63F9-0590-46D0-BF13-EF61D4F73B93" class="sect3"><span class="enumeration_section">8.8.4</span> Performing Analysis Operations</h3>
<div>
<p>It is strongly recommended that you analyze the application table, semantic model, and inferred graph (if it exists) before performing inference and after loading a significant amount of semantic data into the database. Performing the analysis operations causes statistics to be gathered, which will help the Oracle optimizer select efficient execution plans when answering queries.</p>
<p>To gather relevant statistics, you can use the following methods in the <code class="codeph">OracleSailConnection</code> and <code class="codeph">OracleSailStore</code> classes:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">OracleSailConnection.analyze</code></p>
</li>
<li>
<p><code class="codeph">OracleSailConnection.analyzeApplicationTable</code></p>
</li>
<li>
<p><code class="codeph">OracleSailConnection.analyzeInferredGraph</code></p>
</li>
</ul>
<p>For information about these methods, including their parameters, see the RDF Semantic Graph support for OpenRDF Sesame reference information (Javadoc).</p>
</div>
</div>
</div>
<a id="RDFRM337"></a><a id="RDFRM336"></a>
<div class="props_rev_3"><a id="GUID-D288DB3F-21B2-4E58-A8AE-CC7682DFF410"></a>
<h2 id="RDFRM-GUID-D288DB3F-21B2-4E58-A8AE-CC7682DFF410" class="sect2"><span class="enumeration_section">8.9</span> Using the Sesame Console with RDF Semantic Graph Support for OpenRDF Sesame</h2>
<div>
<p>The Sesame Console is, as OpenRDF.org explains, &#34;a command-line application for interacting with Sesame. For now, the best way to create and manage repositories in a SYSTEM repository is to use the Sesame Console. &#34; For basic usage and reference information about the Sesame Console, see the documentation at <a href="http://docs.rdf4j.org/" target="_blank"><code class="codeph">http://docs.rdf4j.org/</code></a>.</p>
<p>This section describes how to use the Sesame Console with RDF Semantic Graph support for OpenRDF Sesame.</p>
<p>To create a new SAIL repository (<code class="codeph">OracleSailStore</code> object) using the Sesame Console command-line tool, use the following command:</p>
<pre dir="ltr">create oracle.
</pre>
<p>When you are prompted for parameters, you can specify the following:</p>
<dl>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-88559"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D288DB3F-21B2-4E58-A8AE-CC7682DFF410__GUID-1AAEB1CD-EFBD-4671-AA36-1F6199C9D951"><!-- --></a>Repository ID</dt>
<dd>
<p>ID string associated with the repository. Example: <code class="codeph">myOracleRepos</code></p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-88560"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D288DB3F-21B2-4E58-A8AE-CC7682DFF410__GUID-7D4413EE-F03F-426D-B005-FBFAF3B29970"><!-- --></a>Repository Title</dt>
<dd>
<p>Title string associated with the repository. Example: <code class="codeph">My Oracle Repository</code></p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-88561"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D288DB3F-21B2-4E58-A8AE-CC7682DFF410__GUID-0B9D85BC-4C6A-4605-8ECB-B11F13B628BC"><!-- --></a>Model Name</dt>
<dd>
<p>Name of the Oracle semantic model that corresponds to this repository. All DML operations are performed against this model.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-88562"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D288DB3F-21B2-4E58-A8AE-CC7682DFF410__GUID-2F137D50-155C-4401-8E05-97A12DAAF573"><!-- --></a>Additional Models</dt>
<dd>
<p>Comma-separated list of any additional semantic models to be included in this repository. Any additional models are used only for inference and query operations.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-88563"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D288DB3F-21B2-4E58-A8AE-CC7682DFF410__GUID-75780F87-3D14-4836-BD1A-23BF52223888"><!-- --></a>Rulebases</dt>
<dd>
<p>Comma-separated list of rulebases to be considered when building the entailment closure for this repository. The default is no rulebases, which means that no inference will be performed.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-88564"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D288DB3F-21B2-4E58-A8AE-CC7682DFF410__GUID-9B9C1638-102A-472C-A887-5F4CA8290376"><!-- --></a>Use Virtual Model (TRUE|FALSE) [TRUE]</dt>
<dd>
<p>Specifies whether to use a virtual model when answering queries. The default is <code class="codeph">TRUE</code>, which means to use a virtual model.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-88565"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D288DB3F-21B2-4E58-A8AE-CC7682DFF410__GUID-8B57F57B-8E85-4266-90BE-DEB69E1B2AB8"><!-- --></a>Virtual Model Name</dt>
<dd>
<p>If <code class="codeph">Use Virtual Model</code> is <code class="codeph">TRUE</code>, specify the name of the virtual model to be used to answer queries, if the database user that owns the repository has read permission on the specified virtual model.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-88566"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D288DB3F-21B2-4E58-A8AE-CC7682DFF410__GUID-E89C47A1-5819-4E2B-AFD7-108F3EF7CEC7"><!-- --></a>Inference Maintenance Mode (NO_UPDATE|UPDATE_WHEN_COMMIT) [NO_UPDATE]</dt>
<dd>
<p>Specifies whether to update the entailment closure on each commit operation (<code class="codeph">UPDATE_WHEN_COMMIT</code>) or only when the <code class="codeph">OracleSailConnection.performInference</code> method is invoked (<code class="codeph">NO_UPDATE</code>). The default is <code class="codeph">NO_UPDATE</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-88567"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D288DB3F-21B2-4E58-A8AE-CC7682DFF410__GUID-E68D1D3E-94AB-4D82-A7A6-54BE0334F6D3"><!-- --></a>Allow Duplicates in Query (TRUE|FALSE) [TRUE]</dt>
<dd>
<p>Specifies whether, when querying a repository that has additional models, the query response can include duplicates across the different models. The default is <code class="codeph">TRUE</code>, allows duplicates to be included, and which speeds query performance.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-88568"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D288DB3F-21B2-4E58-A8AE-CC7682DFF410__GUID-EFD8A5B0-FCC3-45AD-ACA2-C746743D03CE"><!-- --></a>Allow Query with Non-Valid Inference status (INVALID|VALID|INCOMPLETE) [INVALID]</dt>
<dd>
<p>Specifies whether to allow queries when the entailment is not updated, that is, when the inference status is not valid. The default value is <code class="codeph">INVALID</code>, which means that the entailment status can be <code class="codeph">INVALID</code> when querying.</p>
<p>To allow queries only when entailments have a valid status, specify <code class="codeph">VALID</code>. To allow queries when entailments have either a valid or incomplete status, specify <code class="codeph">INCOMPLETE</code>.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-88569"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D288DB3F-21B2-4E58-A8AE-CC7682DFF410__GUID-9B36EE70-2869-4D01-8162-85881FBCD8FA"><!-- --></a>Application Table Indexes [CPSO]</dt>
<dd>
<p>Specifies the custom index to be created on the application table for this repository. You can specify the columns to be included (and their order) by using a string of up to 4 of the following characters: <code class="codeph">C</code> (<span class="italic">context</span>), <code class="codeph">P</code> (<span class="italic">property</span>), <code class="codeph">S</code> (<span class="italic">subject</span>), <code class="codeph">O</code> (<span class="italic">object</span>). (You can use only those characters and cannot repeat any characters.) The default is <code class="codeph">CPSO</code>, which creates an index on all four columns with context as the leading column.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-88570"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D288DB3F-21B2-4E58-A8AE-CC7682DFF410__GUID-E420DA64-223E-4307-B3A5-75B524DAA7A1"><!-- --></a>Index Option: Degree of Parallelism [1]</dt>
<dd>
<p>Specifies the DOP (degree of parallelism) value for the application table indexes. With multi-core or multi-CPU processors, experimenting with different <code class="codeph">DOP</code> values (such as 4 or 8) may improve performance. The default is 1 (no parallelism).</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-88571"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D288DB3F-21B2-4E58-A8AE-CC7682DFF410__GUID-0545B0D9-F025-4B39-8386-03C1882B5920"><!-- --></a>Index Option: Prefix Length to Compress [2]</dt>
<dd>
<p>Specifies whether to use key compression on the application table indexes. The default is 2, which specifies compression on the first two columns. A value of 0 (zero) means that no compression will be used.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-88572"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D288DB3F-21B2-4E58-A8AE-CC7682DFF410__GUID-6C9CB1F5-BE8A-4BB5-9C82-85A6073619CB"><!-- --></a>Enforce Uniqueness (FALSE|TRUE) []</dt>
<dd>
<p>Specifies whether to enforce statement uniqueness across multiple contexts in the repository. Note that statement uniqueness is enforced by a unique index on the application table. The default is [] (that is, no value specified), which means that if the model exists, the uniqueness setting will be inherited from that model; and if the model does not already exist, a non-unique index will be created.</p>
<p>If you specify FALSE and if a unique index exists, that index is dropped and it is re-created as a non-unique index.</p>
</dd>
<dt class="dlterm"><a class="dashingAutolink" name="autolink-88573"></a><a class="dashAnchor" name="//apple_ref/cpp/Command/"></a><a id="GUID-D288DB3F-21B2-4E58-A8AE-CC7682DFF410__GUID-865FE2B9-9C64-41E1-919F-F33FD3881A9F"><!-- --></a>Data Source Name [OracleSemDS]</dt>
<dd>
<p>Name of the JDBC data source that provides the database connection setting for accessing the Oracle semantic models and application tables for this repository. The default is <code class="codeph">OracleSemDS</code>.</p>
</dd>
</dl>
<p><a href="rdf-sesame.htm#GUID-D288DB3F-21B2-4E58-A8AE-CC7682DFF410__BABHCDDG">Example 8-3</a> shows a sample scenario of using the Sesame Console.</p>
<div class="example" id="GUID-D288DB3F-21B2-4E58-A8AE-CC7682DFF410__BABHCDDG">
<p class="titleinexample">Example 8-3 Using the Sesame Console</p>
<pre dir="ltr">&gt; connect http://localhost:8080/openrdf-sesame.
Disconnecting from default data directory
Connected to http://localhost:8080/openrdf-sesame
&gt; create oracle.
Please specify values for the following variables:
Repository ID: <span class="bold">model2Repos</span>
Repository title: <span class="bold">Repository for Model 2</span>
Model Name: <span class="bold">model2</span>
Additional Models (comma separated):    
Rulebases (comma separated): <span class="bold">OWLPRIME</span>    -- OWLPRIME inference will be performed when this model is created
Use Virtual Model (TRUE|FALSE) [TRUE]:  <span class="bold">TRUE</span>
Virtual Model Name:     -- a new virtual model will be created if nonexistent
Inference Maintenance Mode (UPDATE_WHEN_COMMIT|NO_UPDATE) [UPDATE_WHEN_COMMIT]: <span class="bold">NO_UPDATE</span>
Allow duplicates in query (TRUE|FALSE) [TRUE]: <span class="bold">TRUE</span>
Allow query with non-valid inference status (NONE|INCOMPLETE|INVALID) [NONE]: <span class="bold">NONE</span> &ndash; inference must be up to date before query
Application Table Index [CPSO]: <span class="bold">CPSO</span>      &ndash;- default, recommended index
Index option: Degree of parallelism [1]: <span class="bold">1</span>
Index option: Leading columns to compress [2]: <span class="bold">2</span>
Enforce Uniqueness (|FALSE|TRUE) []: <span class="bold">FALSE</span>
DataSource Name [OracleSemDS]: <span class="bold">OracleSemDS</span>
Repository created
&gt; open model2Repos.
Opened repository &#39;model2Repos&#39;
model2Repos&gt; show c.
--no contexts found--
model2Repos&gt;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM338"></a>
<div class="props_rev_3"><a id="GUID-950C682E-7DD2-4B1A-816F-4C8E7D5F6014"></a>
<h2 id="RDFRM-GUID-950C682E-7DD2-4B1A-816F-4C8E7D5F6014" class="sect2"><span class="enumeration_section">8.10</span> Example Queries Using RDF Semantic Graph support for OpenRDF Sesame</h2>
<div>
<p>This section includes example queries using RDF Semantic Graph support for OpenRDF Sesame. Each example is self-contained: it typically starts an <code class="codeph">OraclePool</code> object, creates an <code class="codeph">OracleSailStore</code> object, adds and perhaps removes statements, performs a query that may involve inference, displays the result, shuts down the <code class="codeph">OracleSailStore</code> object, and closes the <code class="codeph">OraclePool</code> object.</p>
<p>For these examples, the following libraries must be included in the CLASSPATH definition:</p>
<pre dir="ltr">sesame-console-2.3.1.jar
sesame-http-client-2.3.1.jar
sesame-http-protocol-2.3.1.jar
sesame-http-server-spring-2.3.1.jar
sesame-model-2.3.1.jar
sesame-query-2.3.1.jar
sesame-queryalgebra-evaluation-2.3.1.jar
sesame-queryalgebra-model-2.3.1.jar
sesame-queryparser-api-2.3.1.jar
sesame-queryparser-serql-2.3.1.jar
sesame-queryparser-sparql-2.3.1.jar
sesame-queryresultio-api-2.3.1.jar
sesame-queryresultio-binary-2.3.1.jar
sesame-queryresultio-sparqljson-2.3.1.jar
sesame-queryresultio-sparqlxml-2.3.1.jar
sesame-queryresultio-text-2.3.1.jar
sesame-repository-api-2.3.1.jar
sesame-repository-contextaware-2.3.1.jar
sesame-repository-dataset-2.3.1.jar
sesame-repository-event-2.3.1.jar
sesame-repository-http-2.3.1.jar
sesame-repository-manager-2.3.1.jar
sesame-repository-sail-2.3.1.jar
sesame-rio-api-2.3.1.jar
sesame-rio-n3-2.3.1.jar
sesame-rio-ntriples-2.3.1.jar
sesame-rio-rdfxml-2.3.1.jar
sesame-rio-trig-2.3.1.jar
sesame-rio-trix-2.3.1.jar
sesame-rio-turtle-2.3.1.jar
sesame-runtime-2.3.1.jar
sesame-sail-api-2.3.1.jar
sesame-sail-inferencer-2.3.1.jar
sesame-sail-memory-2.3.1.jar
sesame-sail-nativerdf-2.3.1.jar
sesame-sail-rdbms-2.3.1.jar
sdordf.jar
sdordfsesame.jar
ojdbc6.jar
</pre>
<p>To simplify the examples, an environment variable named <code class="codeph">CP</code> was defined, as follows:</p>
<pre dir="ltr">setenv CP ./:sesame-console-2.3.1.jar:sesame-http-client-2.3.1.jar:sesame-http-protocol-2.3.1.jar:sesame-http-server-spring-2.3.1.jar:sesame-model-2.3.1.jar:sesame-query-2.3.1.jar:sesame-queryalgebra-evaluation-2.3.1.jar:sesame-queryalgebra-model-2.3.1.jar:sesame-queryparser-api-2.3.1.jar:sesame-queryparser-serql-2.3.1.jar:sesame-queryparser-sparql-2.3.1.jar:sesame-queryresultio-api-2.3.1.jar:sesame-queryresultio-binary-2.3.1.jar:sesame-queryresultio-sparqljson-2.3.1.jar:sesame-queryresultio-sparqlxml-2.3.1.jar:sesame-queryresultio-text-2.3.1.jar:sesame-repository-api-2.3.1.jar:sesame-repository-contextaware-2.3.1.jar:sesame-repository-dataset-2.3.1.jar:sesame-repository-event-2.3.1.jar:sesame-repository-http-2.3.1.jar:sesame-repository-manager-2.3.1.jar:sesame-repository-sail-2.3.1.jar:sesame-rio-api-2.3.1.jar:sesame-rio-n3-2.3.1.jar:sesame-rio-ntriples-2.3.1.jar:sesame-rio-rdfxml-2.3.1.jar:sesame-rio-trig-2.3.1.jar:sesame-rio-trix-2.3.1.jar:sesame-rio-turtle-2.3.1.jar:sesame-runtime-2.3.1.jar:sesame-sail-api-2.3.1.jar:sesame-sail-inferencer-2.3.1.jar:sesame-sail-memory-2.3.1.jar:sesame-sail-nativerdf-2.3.1.jar:sesame-sail-rdbms-2.3.1.jar:sdordf.jar:sdordfsesame.jar:ojdbc6.jar
</pre>
<div class="infobox-note" id="GUID-950C682E-7DD2-4B1A-816F-4C8E7D5F6014__GUID-E243DBE1-F38E-40F4-936C-A9BC44A485AE">
<p class="notep1">Note:</p>
<p>Enter the <code class="codeph">setenv</code> command, as well as each <code class="codeph">javac</code> and <code class="codeph">java</code> command, on a single command line.</p>
</div>
<p>To run a query, you must do the following:</p>
<ol>
<li>
<p>Include the code in a Java source file. The examples used in this section are supplied in files in the <code class="codeph">examples</code> directory of the RDF Semantic Graph support for OpenRDF Sesame download.</p>
</li>
<li>
<p>Compile the Java source file. For example:</p>
<pre dir="ltr">&gt; javac -classpath $CP Example1.java
</pre></li>
<li>
<p>Run the compiled file. For example:</p>
<pre dir="ltr">&gt; java -classpath $CP Test jdbc:oracle:thin:@localhost:1521:orcl scott <span class="italic">&lt;password-for-scott&gt;</span> M1
</pre></li>
</ol>
</div>
<a id="RDFRM340"></a><a id="RDFRM339"></a>
<div class="props_rev_3"><a id="GUID-990B53A2-2A30-455D-9E19-43EE950870B5"></a>
<h3 id="RDFRM-GUID-990B53A2-2A30-455D-9E19-43EE950870B5" class="sect3"><span class="enumeration_section">8.10.1</span> Example1.java: Basic Operations</h3>
<div>
<p><a href="rdf-sesame.htm#GUID-990B53A2-2A30-455D-9E19-43EE950870B5__CHDEJDFG">Example 8-4</a> shows the <code class="codeph">Example1.java</code> file, which performs some basic operations.</p>
<div class="example" id="GUID-990B53A2-2A30-455D-9E19-43EE950870B5__CHDEJDFG">
<p class="titleinexample">Example 8-4 Basic Operations</p>
<pre dir="ltr">import org.openrdf.model.Statement;
import org.openrdf.model.URI;
import org.openrdf.model.ValueFactory;
import info.aduna.iteration.CloseableIteration;
 
import java.io.*;
import java.sql.SQLException;
 
import oracle.spatial.rdf.client.sesame.*;
 
import org.openrdf.sail.SailConnection;
import org.openrdf.sail.SailException;
import org.openrdf.model.vocabulary.RDFS;
 
public class Example1
{
  public static void main(String[] args) throws SQLException, SailException
  {
    PrintStream psOut = System.out;
    String jdbcUrl  = args[0];
    String user     = args[1];
    String password = args[2];
    String model    = args[3];
 
    OraclePool op = new OraclePool(
        OraclePool.getOracleDataSource(jdbcUrl, user, password));
    OracleSailStore store = new OracleSailStore(op, model);       
 
    OracleSailConnection conn = store.getConnection();
 
    ValueFactory vf = store.getValueFactory();
    URI p = vf.createURI(&#34;http://p&#34;);   
    URI cls = vf.createURI(&#34;http://cls&#34;);
    URI a = vf.createURI(&#34;http://a&#34;);
    URI b = vf.createURI(&#34;http://b&#34;);
    URI ng1 = vf.createURI(&#34;http://ng1&#34;);
 
    conn.clear();
    conn.addStatement(p, RDFS.DOMAIN, cls);
    conn.addStatement(a, p, b, ng1);
 
    psOut.println(&#34;size of context &#34; + ng1 + &#34;:&#34; + conn.size(ng1));
 
    // returns OracleStatements
    CloseableIteration&lt;? extends Statement, SailException&gt; it =
      conn.getStatements(null, null, null, false);
 
    while (it.hasNext()) {   
      Statement stmt = it.next();
      psOut.println(&#34;getStatements: stmt: &#34; + stmt.toString());
    }
 
    conn.removeStatements(null, null, null, ng1);
 
    psOut.println(&#34;size of context &#34; + ng1 + &#34;:&#34; + conn.size(ng1));
 
    conn.removeAll();   
 
    psOut.println(&#34;size of store: &#34; + conn.size());
 
    conn.close();
    store.shutDown();
    op.close();
  }
}
</pre>
<p>To compile this example, enter the following command:</p>
<pre dir="ltr">/usr/local/packages/jdk16/bin/javac -classpath $CP Example1.java
</pre>
<p>To run this example, enter a command in the following format:</p>
<pre dir="ltr">/usr/local/packages/jdk16/bin/java -classpath $CP Example1 jdbc:oracle:thin:@localhost:1521:ORCL scott &lt;<span class="italic">password-for-scott</span>&gt; TestModel
</pre>
<p>The expected output of the <code class="codeph">java</code> command might appear as follows:</p>
<pre dir="ltr">size of context http://ng1:1
getStatements: stmt:  O: (http://a, http://p, http://b) [http://ng1]
getStatements: stmt:  O: (http://p, http://www.w3.org/2000/01/rdf-schema#domain, http://cls) [null]
size of context http://ng1:0
size of store: 0
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM342"></a><a id="RDFRM341"></a>
<div class="props_rev_3"><a id="GUID-1C5EFFD2-C26B-469A-9ED3-2F680451CD6C"></a>
<h3 id="RDFRM-GUID-1C5EFFD2-C26B-469A-9ED3-2F680451CD6C" class="sect3"><span class="enumeration_section">8.10.2</span> Example2.java: Add a Data File (in TRIG format)</h3>
<div>
<p><a href="rdf-sesame.htm#GUID-1C5EFFD2-C26B-469A-9ED3-2F680451CD6C__BABHJHBC">Example 8-5</a> shows the <code class="codeph">Example2.java</code> file, which adds a data file in TRIG format.</p>
<div class="example" id="GUID-1C5EFFD2-C26B-469A-9ED3-2F680451CD6C__BABHJHBC">
<p class="titleinexample">Example 8-5 Add a Data File (in TRIG format)</p>
<pre dir="ltr">import org.openrdf.model.Statement;
import org.openrdf.model.URI;
import org.openrdf.model.ValueFactory;
import info.aduna.iteration.CloseableIteration;
 
import java.io.*;
import java.sql.SQLException;
 
import oracle.spatial.rdf.client.sesame.*;
import org.openrdf.rio.RDFFormat;
import org.openrdf.sail.SailConnection;
import org.openrdf.sail.SailException;
import org.openrdf.model.vocabulary.RDFS;
import org.openrdf.repository.RepositoryConnection;
import org.openrdf.repository.sail.SailRepository;
import org.openrdf.repository.RepositoryException;
import org.openrdf.rio.RDFParseException;
 
public class Example2
{
  public static void main(String[] args) throws SQLException, SailException,
    RepositoryException, IOException, RDFParseException
  {
    PrintStream psOut = System.out;
    String jdbcUrl  = args[0];
    String user     = args[1];
    String password = args[2];
    String model    = args[3];
    String trigFile = args[4];
 
    OraclePool op = new OraclePool(
        OraclePool.getOracleDataSource(jdbcUrl, user, password));
    OracleSailStore store = new OracleSailStore(op, model);       
    SailRepository sr = new SailRepository(store);
    RepositoryConnection repConn = sr.getConnection();
 
    repConn.setAutoCommit(false);
    <span class="bold">repConn.add(new File(trigFile), &#34;http://my.com/&#34;, RDFFormat.TRIG);</span>
    repConn.commit();
 
    psOut.println(&#34;size &#34; + Long.toString(<span class="bold">repConn.size</span>()));
 
    repConn.close();
    store.shutDown();
    op.close();
  }
}
</pre>
<p>To compile this example, enter the following command:</p>
<pre dir="ltr">usr/local/packages/jdk16/bin/javac -classpath $CP Example2.java
</pre>
<p>For running this example, assume that a sample TRIG data file named <code class="codeph">test.trig</code> was created as:</p>
<pre dir="ltr">@prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .
@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .
@prefix swp: &lt;http://www.w3.org/2004/03/trix/swp-1/&gt; .
@prefix dc: &lt;http://purl.org/dc/elements/1.1/&gt; .
@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .
@prefix ex: &lt;http://example.org/&gt; .
@prefix : &lt;http://example.org/&gt; .
 
# default graph
{
&lt;http://example.org/bob&gt;    dc:publisher  &#34;Bob Hacker&#34; .
&lt;http://example.org/alice&gt;  dc:publisher  &#34;Alice Hacker&#34; .
}
 
:bob {
_:a foaf:mbox &lt;mailto:bob@oldcorp.example.org&gt; .
}
 
:alice {
_:a foaf:name &#34;Alice&#34; .
_:a foaf:mbox &lt;mailto:alice@work.example.org&gt; .
}
 
:jack {
_:a foaf:name &#34;Jack&#34; .
_:a foaf:mbox &lt;mailto:jack@oracle.example.org&gt; .
}
</pre>
<p>To run this example using the <code class="codeph">test.trig</code> data file, enter the following command:</p>
<pre dir="ltr">/usr/local/packages/jdk16/bin/java -classpath $CP Example2 jdbc:oracle:thin:@localhost:1521:ORCL scott  &lt;password&gt;  TestModel ./test.trig
</pre>
<p>The expected output of the <code class="codeph">java</code> command might appear as follows:</p>
<pre dir="ltr">size 7
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM344"></a><a id="RDFRM343"></a>
<div class="props_rev_3"><a id="GUID-83E05C74-A76B-4213-ABD3-831DBE5E4D0B"></a>
<h3 id="RDFRM-GUID-83E05C74-A76B-4213-ABD3-831DBE5E4D0B" class="sect3"><span class="enumeration_section">8.10.3</span> Example3.java: Simple Query</h3>
<div>
<p><a href="rdf-sesame.htm#GUID-83E05C74-A76B-4213-ABD3-831DBE5E4D0B__BABEGJHH">Example 8-6</a> shows the <code class="codeph">Example3.java</code> file, which performs a simple query.</p>
<div class="example" id="GUID-83E05C74-A76B-4213-ABD3-831DBE5E4D0B__BABEGJHH">
<p class="titleinexample">Example 8-6 Simple Query</p>
<pre dir="ltr">import org.openrdf.model.Statement;
import org.openrdf.model.URI;
import org.openrdf.model.ValueFactory;
import info.aduna.iteration.CloseableIteration;
 
import java.io.*;
import java.sql.SQLException;
 
import oracle.spatial.rdf.client.sesame.*;
import org.openrdf.rio.RDFFormat;
import org.openrdf.sail.SailConnection;
import org.openrdf.sail.SailException;
import org.openrdf.model.vocabulary.RDFS;
import org.openrdf.repository.RepositoryConnection;
import org.openrdf.repository.sail.SailRepository;
import org.openrdf.repository.RepositoryException;
import org.openrdf.rio.RDFParseException;
import org.openrdf.model.Literal;
import org.openrdf.query.BindingSet;
import org.openrdf.query.QueryLanguage;
import org.openrdf.query.TupleQuery;
import org.openrdf.query.TupleQueryResult;
import org.openrdf.model.vocabulary.RDF;
import org.openrdf.query.QueryEvaluationException;
import org.openrdf.query.MalformedQueryException;
 
public class Example3
{
  public static void main(String[] args) throws SQLException, SailException,
    RepositoryException, IOException, RDFParseException, QueryEvaluationException,
    MalformedQueryException
  {
    PrintStream psOut = System.out;
    String jdbcUrl  = args[0];
    String user     = args[1];
    String password = args[2];
    String model    = args[3];
 
    OraclePool op = new OraclePool(
        OraclePool.getOracleDataSource(jdbcUrl, user, password));
    OracleSailStore store = new OracleSailStore(op, model);   
    SailRepository myRepository = new SailRepository(store);
 
    ValueFactory f = myRepository.getValueFactory();
    RepositoryConnection conn = myRepository.getConnection();
 
    // create some resources and literals to make statements out of
    URI alice = f.createURI(&#34;http://example.org/people/alice&#34;);
    URI name = f.createURI(&#34;http://example.org/ontology/name&#34;);
    URI person = f.createURI(&#34;http://example.org/ontology/Person&#34;);
    Literal alicesName = f.createLiteral(&#34;Alice&#34;);
 
    conn.clear(); // to start from scratch
    conn.add(alice, RDF.TYPE, person);
    conn.add(alice, name, alicesName);
    conn.commit();
 
    store.analyze();
    store.analyzeApplicationTable();
 
    try {
      //run a query against the repository
      String queryString = &#34; SELECT * WHERE {?x ?p ?y} LIMIT 1 &#34;;
      TupleQuery tupleQuery = <span class="bold">conn.prepareTupleQuery(QueryLanguage.SPARQL, queryString)</span>;
      TupleQueryResult result = tupleQuery.evaluate();
      try {
        while (result.hasNext()) {
          BindingSet bindingSet = result.next();
          psOut.println(&#34;value of x: &#34; + bindingSet.getValue(&#34;x&#34;));
        }
      }
      finally {
        result.close();
      }
    }
    finally {  
      conn.clear();
      if (conn != null &amp;&amp; conn.isOpen()) {
        conn.close();
      }       
 
      myRepository.shutDown();
      op.close();
    }
  }
}
</pre>
<p>To compile this example, enter the following command:</p>
<pre dir="ltr">/usr/local/packages/jdk16/bin/javac -classpath $CP Example3.java
</pre>
<p>To run this example, enter a command in the following format:</p>
<pre dir="ltr">/usr/local/packages/jdk16/bin/java -classpath $CP Example3 jdbc:oracle:thin:@localhost:1521:ORCL scott &lt;<span class="italic">password-for-scott</span>&gt; TestModel
</pre>
<p>The expected output of the <code class="codeph">java</code> command might appear as follows:</p>
<pre dir="ltr">value of x: http://example.org/people/alice
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM346"></a><a id="RDFRM345"></a>
<div class="props_rev_3"><a id="GUID-394B8F6A-83B3-47F6-B7BD-35652E4C0CAD"></a>
<h3 id="RDFRM-GUID-394B8F6A-83B3-47F6-B7BD-35652E4C0CAD" class="sect3"><span class="enumeration_section">8.10.4</span> Example4.java: Simple Bulk Load</h3>
<div>
<p><a href="rdf-sesame.htm#GUID-394B8F6A-83B3-47F6-B7BD-35652E4C0CAD__BABBBAGD">Example 8-7</a> shows the <code class="codeph">Example4.java</code> file, which performs a simple bulk load operation.</p>
<div class="example" id="GUID-394B8F6A-83B3-47F6-B7BD-35652E4C0CAD__BABBBAGD">
<p class="titleinexample">Example 8-7 Simple Bulk Load</p>
<pre dir="ltr">import org.openrdf.model.Statement;
import org.openrdf.model.URI;
import org.openrdf.model.ValueFactory;
import org.openrdf.model.Resource;
import info.aduna.iteration.CloseableIteration;
 
import java.io.*;
import java.sql.SQLException;
 
import oracle.spatial.rdf.client.sesame.*;
import org.openrdf.rio.RDFFormat;
import org.openrdf.sail.SailConnection;
import org.openrdf.sail.SailException;
import org.openrdf.model.vocabulary.RDFS;
import org.openrdf.repository.RepositoryConnection;
import org.openrdf.repository.sail.SailRepository;
import org.openrdf.repository.RepositoryException;
import org.openrdf.rio.RDFParseException;
import org.openrdf.model.Literal;
import org.openrdf.query.BindingSet;
import org.openrdf.query.QueryLanguage;
import org.openrdf.query.TupleQuery;
import org.openrdf.query.TupleQueryResult;
import org.openrdf.model.vocabulary.RDF;
import org.openrdf.query.QueryEvaluationException;
import org.openrdf.query.MalformedQueryException;
 
public class Example4
{
  public static void main(String[] args) throws SQLException, SailException,
    RepositoryException, IOException, RDFParseException, QueryEvaluationException,
    MalformedQueryException
  {
    PrintStream psOut = System.out;
    String jdbcUrl  = args[0];
    String user     = args[1];
    String password = args[2];
    String model    = args[3];
    String filename = args[4]; // N-TRIPLES file
 
    OraclePool op = new OraclePool(OraclePool.getOracleDataSource(jdbcUrl, user, password));
 
    psOut.println(&#34;testBulkLoad: start&#34;);
 
    OracleSailStore store = new OracleSailStore(op, model);
    OracleSailConnection osc = store.getConnection();
    FileInputStream fis = new FileInputStream(filename);
   
    long loadBegin = System.currentTimeMillis();
    <span class="bold">osc.getBulkUpdateHandler().addInBulk</span>(
        fis,
        &#34;http://abc&#34;,                // baseURI
        RDFFormat.NTRIPLES,          // dataFormat
        null,                        // tablespaceName
        null,                        // flags
        null,                        // StatusListener
        (Resource[]) null            // Resource... for contexts
        );
 
    long loadEnd = System.currentTimeMillis();
    psOut.println(&#34;testBulkLoad: &#34; + (loadEnd - loadBegin) + &#34;ms.\n&#34;);
 
    osc.close();
    store.shutDown();
    op.close();
  }
}
</pre>
<p>To compile this example, enter the following command:</p>
<pre dir="ltr">usr/local/packages/jdk16/bin/javac -classpath $CP Example4.java
</pre>
<p>For running this example, assume that a sample ntriples data file named <code class="codeph">test.ntriples</code> was created as:</p>
<pre dir="ltr">&lt;http://example.org/bob&gt;    &lt;http://purl.org/dc/elements/1.1/publisher&gt;  &#34;Bob Hacker&#34; .
&lt;http://example.org/alice&gt;  &lt;http://purl.org/dc/elements/1.1/publisher&gt;  &#34;Alice Hacker&#34; .
</pre>
<p>To run this example using the <code class="codeph">test.ntriples</code> file, enter the following command:</p>
<pre dir="ltr">/usr/local/packages/jdk16/bin/java -classpath $CP Example4 jdbc:oracle:thin:@localhost:1521:ORCL scott  &lt;password&gt;  TestModel ./test.ntriples
</pre>
<p>The expected output of the <code class="codeph">java</code> command might appear as follows:</p>
<pre dir="ltr">testBulkLoad: start
testBulkLoad: 756ms
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM348"></a><a id="RDFRM347"></a>
<div class="props_rev_3"><a id="GUID-093820EB-F509-41CA-A2B5-6016B71423F5"></a>
<h3 id="RDFRM-GUID-093820EB-F509-41CA-A2B5-6016B71423F5" class="sect3"><span class="enumeration_section">8.10.5</span> Example5.java: Bulk Load RDF/XML and Application Table Index Maintenance</h3>
<div>
<p><a href="rdf-sesame.htm#GUID-093820EB-F509-41CA-A2B5-6016B71423F5__BABJGEDE">Example 8-8</a> shows the <code class="codeph">Example5.java</code> file, which disables indexes on the application table, performs a bulk load operation from an RDF file in XML format, and re-enables the indexes.</p>
<div class="example" id="GUID-093820EB-F509-41CA-A2B5-6016B71423F5__BABJGEDE">
<p class="titleinexample">Example 8-8 Bulk Load RDF/XML and Application Table Index Maintenance</p>
<pre dir="ltr">import org.openrdf.model.Statement;
import org.openrdf.model.URI;
import org.openrdf.model.ValueFactory;
import org.openrdf.model.Resource;
import info.aduna.iteration.CloseableIteration;
 
import java.io.*;
import java.sql.SQLException;
 
import oracle.spatial.rdf.client.sesame.*;
import org.openrdf.rio.RDFFormat;
import org.openrdf.sail.SailConnection;
import org.openrdf.sail.SailException;
import org.openrdf.model.vocabulary.RDFS;
import org.openrdf.repository.RepositoryConnection;
import org.openrdf.repository.sail.SailRepository;
import org.openrdf.repository.RepositoryException;
import org.openrdf.rio.RDFParseException;
import org.openrdf.model.Literal;
import org.openrdf.query.BindingSet;
import org.openrdf.query.QueryLanguage;
import org.openrdf.query.TupleQuery;
import org.openrdf.query.TupleQueryResult;
import org.openrdf.model.vocabulary.RDF;
import org.openrdf.query.QueryEvaluationException;
import org.openrdf.query.MalformedQueryException;
 
public class Example5
{
  public static void main(String[] args) throws SQLException, SailException,
    RepositoryException, IOException, RDFParseException, QueryEvaluationException,
    MalformedQueryException
  {
    PrintStream psOut = System.out;
    String jdbcUrl  = args[0];
    String user     = args[1];
    String password = args[2];
    String model    = args[3];
    String filename = args[4]; // RDF/XML
 
    OraclePool op = new OraclePool(OraclePool.getOracleDataSource(jdbcUrl, user, password));
 
    psOut.println(&#34;testBulkLoad: start&#34;);
 
    OracleSailStore store = new OracleSailStore(op, model);
    OracleSailConnection osc = store.getConnection();
 
    // disable indexes on application table
    <span class="bold">store.disableAllAppTabIndexes();</span>
 
    // NOTE: can be a gzipped file!
    FileInputStream fis = new FileInputStream(filename);
   
    long loadBegin = System.currentTimeMillis();
    <span class="bold">osc.getBulkUpdateHandler().addInBulk(</span>
        fis,
        &#34;http://abc&#34;,                // baseURI
        RDFFormat.RDFXML,            // dataFormat
        null,                        // tablespaceName
        null,                        // flags
        null,                        // StatusListener
        (Resource[]) null            // Resource... for contexts
        );
 
    long loadEnd = System.currentTimeMillis();
    psOut.println(&#34;testBulkLoad: &#34; + (loadEnd - loadBegin) + &#34;ms.\n&#34;);
   
    // enable indexes on application table
    // Note: one can also specify to rebuild indexes in parallel.
    <span class="bold">store.enableAllAppTabIndexes();</span>
 
    osc.close();
    store.shutDown();
    op.close();
  }
}
</pre>
<p>To compile this example, enter the following command:</p>
<pre dir="ltr">usr/local/packages/jdk16/bin/javac -classpath $CP Example5.java
</pre>
<p>For running this example, assume that a sample file named <code class="codeph">test.rdfxml</code> was created as:</p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34;?&gt;
&lt;!DOCTYPE owl [
     &lt;!ENTITY owl  &#34;http://www.w3.org/2002/07/owl#&#34; &gt;
     &lt;!ENTITY xsd  &#34;http://www.w3.org/2001/XMLSchema#&#34; &gt;
   ]&gt;
 
&lt;rdf:RDF
  xmlns     = &#34;http://a/b#&#34; xml:base  = &#34;http://a/b#&#34; xmlns:my  = &#34;http://a/b#&#34;
  xmlns:owl = &#34;http://www.w3.org/2002/07/owl#&#34;
  xmlns:rdf = &#34;http://www.w3.org/1999/02/22-rdf-syntax-ns#&#34;
  xmlns:rdfs= &#34;http://www.w3.org/2000/01/rdf-schema#&#34;
  xmlns:xsd = &#34;http://www.w3.org/2001/XMLSchema#&#34;&gt;
  &lt;owl:Class rdf:ID=&#34;Color&#34;&gt;
    &lt;owl:oneOf rdf:parseType=&#34;Collection&#34;&gt;
      &lt;owl:Thing rdf:ID=&#34;Red&#34;/&gt;
      &lt;owl:Thing rdf:ID=&#34;Blue&#34;/&gt;
    &lt;/owl:oneOf&gt;
  &lt;/owl:Class&gt;
&lt;/rdf:RDF&gt;
</pre>
<p>To run this example using the <code class="codeph">test.rdfxml</code> file, enter the following command:</p>
<pre dir="ltr">/usr/local/packages/jdk16/bin/java -classpath $CP Example5 jdbc:oracle:thin:@localhost:1521:ORCL scott  &lt;password&gt;  EX5 ./test.rdfxml
</pre>
<p>The expected output of the <code class="codeph">java</code> command might appear as follows:</p>
<pre dir="ltr">testBulkLoad: start
testBulkLoad: 825ms
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM350"></a><a id="RDFRM349"></a>
<div class="props_rev_3"><a id="GUID-4CEF5EF7-1580-4A42-978F-EBEB1553A79D"></a>
<h3 id="RDFRM-GUID-4CEF5EF7-1580-4A42-978F-EBEB1553A79D" class="sect3"><span class="enumeration_section">8.10.6</span> Example6.java: Bulk Load With StatusListener to Handle Loading with Bad Data</h3>
<div>
<p><a href="rdf-sesame.htm#GUID-4CEF5EF7-1580-4A42-978F-EBEB1553A79D__BABFJIDI">Example 8-9</a> shows the <code class="codeph">Example6.java</code> file, which performs the bulk load and index maintenance operations shown in <a href="rdf-sesame.htm#GUID-394B8F6A-83B3-47F6-B7BD-35652E4C0CAD__BABBBAGD">Example 8-7</a>, but also registers and implements a <code class="codeph">StatusListener</code> class to check for and report any data errors.</p>
<div class="example" id="GUID-4CEF5EF7-1580-4A42-978F-EBEB1553A79D__BABFJIDI">
<p class="titleinexample">Example 8-9 Bulk Load With StatusListener to Handle Loading with Bad Data</p>
<pre dir="ltr">import org.openrdf.model.Statement;
import org.openrdf.model.URI;
import org.openrdf.model.ValueFactory;
import org.openrdf.model.Resource;
import info.aduna.iteration.CloseableIteration;
 
import java.io.*;
import java.sql.SQLException;
 
import oracle.spatial.rdf.client.sesame.*;
import org.openrdf.rio.RDFFormat;
import org.openrdf.sail.SailConnection;
import org.openrdf.sail.SailException;
import org.openrdf.model.vocabulary.RDFS;
import org.openrdf.model.Statement;
import org.openrdf.repository.RepositoryConnection;
import org.openrdf.repository.sail.SailRepository;
import org.openrdf.repository.RepositoryException;
import org.openrdf.rio.RDFParseException;
import org.openrdf.model.Literal;
import org.openrdf.query.BindingSet;
import org.openrdf.query.QueryLanguage;
import org.openrdf.query.TupleQuery;
import org.openrdf.query.TupleQueryResult;
import org.openrdf.model.vocabulary.RDF;
import org.openrdf.query.QueryEvaluationException;
import org.openrdf.query.MalformedQueryException;
 
public class Example6
{
  public static void main(String[] args) throws SQLException, SailException,
    RepositoryException, IOException, RDFParseException, QueryEvaluationException,
    MalformedQueryException
  {
    PrintStream psOut = System.out;
    String jdbcUrl  = args[0];
    String user     = args[1];
    String password = args[2];
    String model    = args[3];
    String filename = args[4]; // RDF/XML
 
    OraclePool op = new OraclePool(OraclePool.getOracleDataSource(jdbcUrl, user, password));
 
    psOut.println(&#34;testBulkLoad: start&#34;);
 
    OracleSailStore store = new OracleSailStore(op, model);
    OracleSailConnection osc = store.getConnection();
 
    // disable indexes on application table
    store.disableAllAppTabIndexes();
 
    // NOTE: can be a gzipped file!
    FileInputStream fis = new FileInputStream(filename);
   
    long loadBegin = System.currentTimeMillis();
    osc.getBulkUpdateHandler().addInBulk(
        fis,
        &#34;http://abc&#34;,                // baseURI
        RDFFormat.NTRIPLES,          // dataFormat
        null,                        // tablespaceName
        null,                        // flags
        <span class="bold">new MyListener(psOut),       // register a StatusListener</span>
        (Resource[]) null            // Resource... for contexts
        );
 
    long loadEnd = System.currentTimeMillis();
    psOut.println(&#34;testBulkLoad: &#34; + (loadEnd - loadBegin) + &#34;ms.\n&#34;);
   
    // enable indexes on application table
    // Note: one can also specify to rebuild indexes in parallel.
    store.enableAllAppTabIndexes();
 
    osc.close();
    store.shutDown();
    op.close();
  }

  <span class="bold">static class MyListener implements StatusListener</span> {
    PrintStream m_ps = null;
    public MyListener(PrintStream ps) { m_ps = ps; }
 
    public void statusChanged(long count)
    {
      m_ps.println(&#34;process to &#34; + Long.toString(count));
    }
 
    public int illegalStmtEncountered(Statement statement, long count)
    {
      m_ps.println(&#34;hit illegal statement with object &#34; + statement.getObject().toString());
      return 0; // skip it
    }
  }
}
</pre>
<p>To compile this example, enter the following command:</p>
<pre dir="ltr">usr/local/packages/jdk16/bin/javac -classpath $CP Example6.java
</pre>
<p>For running this example, assume that a sample N-TRIPLES file named <code class="codeph">test-include-badtriple.ntriples</code> was created as follows. In this file, the first and last triples have illegal typed literal values for objects.</p>
<pre dir="ltr">&lt;http://example.org/x&gt;      &lt;http://my.com/#age&gt; &#34;123.3456&#34;^^&lt;http://www.w3.org/2001/XMLSchema#integer&gt; .
&lt;http://example.org/bob&gt;    &lt;http://purl.org/dc/elements/1.1/publisher&gt;  &#34;Bob Hacker&#34; .
&lt;http://example.org/alice&gt;  &lt;http://purl.org/dc/elements/1.1/publisher&gt;  &#34;Alice Hacker&#34; .
&lt;http://example.org/y&gt;      &lt;http://my.com/#age&gt; &#34;hello&#34;^^&lt;http://www.w3.org/2001/XMLSchema#float&gt; .
</pre>
<p>To run this example using the <code class="codeph">test-include-badtriple.ntriples</code> file, enter a command in the following format:</p>
<pre dir="ltr">/usr/local/packages/jdk16/bin/java -classpath $CP Example6 jdbc:oracle:thin:@localhost:1521:ORCL scott  &lt;password&gt;  EX6 ./test-include-badtriple.ntriples
</pre>
<p>The expected output of the <code class="codeph">java</code> command might appear as follows:</p>
<pre dir="ltr">testBulkLoad: start
hit illegal statement with object &#34;123.3456&#34;^^&lt;http://www.w3.org/2001/XMLSchema#integer&gt;
process to 2
process to 3
hit illegal statement with object &#34;hello&#34;^^&lt;http://www.w3.org/2001/XMLSchema#float&gt;
testBulkLoad: 725ms.
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM352"></a><a id="RDFRM351"></a>
<div class="props_rev_3"><a id="GUID-A1979815-9115-4292-B79B-89BE333AF562"></a>
<h3 id="RDFRM-GUID-A1979815-9115-4292-B79B-89BE333AF562" class="sect3"><span class="enumeration_section">8.10.7</span> Example7.java: Load Data from Sesame Store into Oracle Database</h3>
<div>
<p><a href="rdf-sesame.htm#GUID-A1979815-9115-4292-B79B-89BE333AF562__BABGIDDD">Example 8-10</a> shows the <code class="codeph">Example7.java</code> file, disables indexes on the application table, loads an RDF file in XML format into an in-memory Sesame store, loads the data into the Oracle database, and re-enables the indexes.</p>
<div class="example" id="GUID-A1979815-9115-4292-B79B-89BE333AF562__BABGIDDD">
<p class="titleinexample">Example 8-10 Load Data from Sesame Store into Oracle Database</p>
<pre dir="ltr">import org.openrdf.model.Statement;
import org.openrdf.model.URI;
import org.openrdf.model.ValueFactory;
import org.openrdf.model.Resource;
import info.aduna.iteration.CloseableIteration;
 
import java.io.*;
import java.sql.SQLException;
 
import oracle.spatial.rdf.client.sesame.*;
import org.openrdf.rio.RDFFormat;
import org.openrdf.sail.SailConnection;
import org.openrdf.sail.SailException;
import org.openrdf.sail.memory.MemoryStore;
import org.openrdf.model.vocabulary.RDFS;
import org.openrdf.model.Statement;
import org.openrdf.repository.RepositoryConnection;
import org.openrdf.repository.sail.SailRepository;
import org.openrdf.repository.RepositoryException;
import org.openrdf.rio.RDFParseException;
import org.openrdf.model.Literal;
import org.openrdf.query.BindingSet;
import org.openrdf.query.QueryLanguage;
import org.openrdf.query.TupleQuery;
import org.openrdf.query.TupleQueryResult;
import org.openrdf.model.vocabulary.RDF;
import org.openrdf.query.QueryEvaluationException;
import org.openrdf.query.MalformedQueryException;
 
public class Example7
{
  public static void main(String[] args) throws SQLException, SailException,
    RepositoryException, IOException, RDFParseException, QueryEvaluationException,
    MalformedQueryException
  {
    PrintStream psOut = System.out;
    String jdbcUrl  = args[0];
    String user     = args[1];
    String password = args[2];
    String model    = args[3];
    String filename = args[4]; // RDF/XML
 
    OraclePool op = new OraclePool(OraclePool.getOracleDataSource(jdbcUrl, user, password));
 
    psOut.println(&#34;testBulkLoad: start&#34;);
 
    SailRepository srInMem = null;
    RepositoryConnection repConnInMem = null;
    { // build an in memory Sesame store for testing purpose
      <span class="bold">srInMem = new SailRepository(new MemoryStore());</span>
      srInMem.initialize();
      repConnInMem = srInMem.getConnection();
      File file = new File(filename);
      repConnInMem.setAutoCommit(false);
      <span class="bold">repConnInMem.add(file, &#34;http://my.com&#34;, RDFFormat.RDFXML);</span>
      repConnInMem.commit();
    }
 
    OracleSailStore store = new OracleSailStore(op, model);
    OracleSailConnection osc = store.getConnection();
 
    // disable indexes on application table
    store.disableAllAppTabIndexes();
 
    long loadBegin = System.currentTimeMillis();
    // load all statements from in memory store to Oracle
    <span class="bold">osc.getBulkUpdateHandler().addInBulk(</span>
        repConnInMem.getStatements(null, null, null, false),
        null                       // tablespaceName
        );
 
    long loadEnd = System.currentTimeMillis();
    psOut.println(&#34;testBulkLoad: &#34; + (loadEnd - loadBegin) + &#34;ms.\n&#34;);
   
    // enable indexes on application table
    // Note: one can also specify to rebuild indexes in parallel.
    store.enableAllAppTabIndexes();
 
    repConnInMem.close();
    srInMem.shutDown();
 
    osc.close();
    store.shutDown();
    op.close();
  }
}
</pre>
<p>To compile this example, enter the following command:</p>
<pre dir="ltr">usr/local/packages/jdk16/bin/javac -classpath $CP Example7.java
</pre>
<p>For running this example, assume that a file (to be loaded into memory) with the same format and content as the file described in <a href="rdf-sesame.htm#GUID-093820EB-F509-41CA-A2B5-6016B71423F5">Example5.java: Bulk Load RDF/XML and Application Table Index Maintenance</a> has been created.</p>
<p>To run this example, enter a command in the following format:</p>
<pre dir="ltr">/usr/local/packages/jdk16/bin/java -classpath $CP Example7 jdbc:oracle:thin:@localhost:1521:ORCL scott  &lt;password&gt;  EX7 ./test.rdfxml
</pre>
<p>The expected output of the <code class="codeph">java</code> command might appear as follows:</p>
<pre dir="ltr">testBulkLoad: start
testBulkLoad: 720ms
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM354"></a><a id="RDFRM353"></a>
<div class="props_rev_3"><a id="GUID-48915222-53B5-459E-9CA6-1CD7D739884D"></a>
<h3 id="RDFRM-GUID-48915222-53B5-459E-9CA6-1CD7D739884D" class="sect3"><span class="enumeration_section">8.10.8</span> Example8.java: SPARQL ASK Query</h3>
<div>
<p><a href="rdf-sesame.htm#GUID-48915222-53B5-459E-9CA6-1CD7D739884D__BABIDCHI">Example 8-11</a> shows the <code class="codeph">Example8.java</code> file, which performs a SPARQL ASK query.</p>
<div class="example" id="GUID-48915222-53B5-459E-9CA6-1CD7D739884D__BABIDCHI">
<p class="titleinexample">Example 8-11 SPARQL ASK Query</p>
<pre dir="ltr">import org.openrdf.model.Statement;
import org.openrdf.model.URI;
import org.openrdf.model.ValueFactory;
import info.aduna.iteration.CloseableIteration;
 
import java.io.*;
import java.sql.SQLException;
 
import oracle.spatial.rdf.client.sesame.*;
import org.openrdf.rio.RDFFormat;
import org.openrdf.sail.SailConnection;
import org.openrdf.sail.SailException;
import org.openrdf.model.vocabulary.RDFS;
import org.openrdf.repository.RepositoryConnection;
import org.openrdf.repository.sail.SailRepository;
import org.openrdf.repository.RepositoryException;
import org.openrdf.rio.RDFParseException;
import org.openrdf.model.Literal;
import org.openrdf.query.BindingSet;
import org.openrdf.query.QueryLanguage;
import org.openrdf.query.BooleanQuery;
import org.openrdf.query.TupleQuery;
import org.openrdf.query.TupleQueryResult;
import org.openrdf.model.vocabulary.RDF;
import org.openrdf.query.QueryEvaluationException;
import org.openrdf.query.MalformedQueryException;
 
public class Example8
{
  public static void main(String[] args) throws SQLException, SailException,
    RepositoryException, IOException, RDFParseException, QueryEvaluationException,
    MalformedQueryException
  {
    PrintStream psOut = System.out;
    String jdbcUrl  = args[0];
    String user     = args[1];
    String password = args[2];
    String model    = args[3];
 
    OraclePool op = new OraclePool(
        OraclePool.getOracleDataSource(jdbcUrl, user, password));
    OracleSailStore store = new OracleSailStore(op, model);
 
    SailRepository sr = new SailRepository(store);
    RepositoryConnection repConn = sr.getConnection();
 
    ValueFactory vf = sr.getValueFactory();
    URI p   = vf.createURI(&#34;http://p&#34;);   
    URI cls = vf.createURI(&#34;http://cls&#34;);    
 
    repConn.clear();
    repConn.add(p, RDFS.DOMAIN, cls);
    repConn.commit();
 
    store.analyze();                 // analyze the semantic model
    store.analyzeApplicationTable(); // and then the application table
 
    BooleanQuery tq = null;
    tq = repConn.prepareBooleanQuery(QueryLanguage.SPARQL, <span class="bold">&#34;ASK { ?x ?p &lt;http://cls&gt; }&#34;</span> );
    boolean b = tq.evaluate();
    psOut.print(&#34;\nAnswer is &#34; + Boolean.toString(b));
 
    repConn.close(); 
    sr.shutDown();
    op.close();
  }
}
</pre>
<p>To compile this example, enter the following command:</p>
<pre dir="ltr">usr/local/packages/jdk16/bin/javac -classpath $CP Example8.java
</pre>
<p>To run this example, enter a command in the following format:</p>
<pre dir="ltr">/usr/local/packages/jdk16/bin/java -classpath $CP Example4 jdbc:oracle:thin:@localhost:1521:ORCL scott  &lt;password&gt;  EX8
</pre>
<p>The expected output of the <code class="codeph">java</code> command might appear as follows:</p>
<pre dir="ltr">Answer is true
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM356"></a><a id="RDFRM355"></a>
<div class="props_rev_3"><a id="GUID-9EE537D7-1269-4F1B-964D-DB7A5A1DD17F"></a>
<h3 id="RDFRM-GUID-9EE537D7-1269-4F1B-964D-DB7A5A1DD17F" class="sect3"><span class="enumeration_section">8.10.9</span> Example9.java: SPARQL CONSTRUCT and DESCRIBE</h3>
<div>
<p><a href="rdf-sesame.htm#GUID-9EE537D7-1269-4F1B-964D-DB7A5A1DD17F__BABFJFGD">Example 8-12</a> shows the <code class="codeph">Example9.java</code> file, which performs SPARQL CONSTRUCT and DESCRIBE queries.</p>
<div class="example" id="GUID-9EE537D7-1269-4F1B-964D-DB7A5A1DD17F__BABFJFGD">
<p class="titleinexample">Example 8-12 SPARQL CONSTRUCT and DESCRIBE</p>
<pre dir="ltr">import org.openrdf.model.Statement;
import org.openrdf.model.URI;
import org.openrdf.model.ValueFactory;
import info.aduna.iteration.CloseableIteration;
 
import java.io.*;
import java.sql.SQLException;
 
import oracle.spatial.rdf.client.sesame.*;
import org.openrdf.rio.RDFFormat;
import org.openrdf.sail.SailConnection;
import org.openrdf.sail.SailException;
import org.openrdf.model.vocabulary.RDFS;
import org.openrdf.repository.RepositoryConnection;
import org.openrdf.repository.sail.SailRepository;
import org.openrdf.repository.RepositoryException;
import org.openrdf.rio.RDFParseException;
import org.openrdf.model.Literal;
import org.openrdf.query.BindingSet;
import org.openrdf.query.QueryLanguage;
import org.openrdf.query.BooleanQuery;
import org.openrdf.query.TupleQuery;
import org.openrdf.query.GraphQuery;
import org.openrdf.query.GraphQueryResult;
import org.openrdf.query.TupleQueryResult;
import org.openrdf.model.vocabulary.RDF;
import org.openrdf.query.QueryEvaluationException;
import org.openrdf.query.MalformedQueryException;
 
public class Example9
{
  public static void main(String[] args) throws SQLException, SailException,
    RepositoryException, IOException, RDFParseException, QueryEvaluationException,
    MalformedQueryException
  {
    PrintStream psOut = System.out;
    String jdbcUrl  = args[0];
    String user     = args[1];
    String password = args[2];
    String model    = args[3];
 
    OraclePool op = new OraclePool(
        OraclePool.getOracleDataSource(jdbcUrl, user, password));
    OracleSailStore store = new OracleSailStore(op, model);
 
    SailRepository sr = new SailRepository(store);
    RepositoryConnection repConn = sr.getConnection();
 
    ValueFactory vf = sr.getValueFactory();
    URI p   = vf.createURI(&#34;http://p&#34;);   
    URI cls = vf.createURI(&#34;http://cls&#34;);    
 
    repConn.clear();
    repConn.add(p, RDFS.DOMAIN, cls);
    repConn.commit();
 
    store.analyze();                 // analyze the semantic model
    store.analyzeApplicationTable(); // and then the application table
 
    GraphQuery tq = null;
    tq = repConn.prepareGraphQuery(QueryLanguage.SPARQL,
        <span class="bold">&#34;CONSTRUCT {?x &lt;http://new_eq_p&gt; ?o } WHERE { ?x ?p ?o }&#34;</span> );
    {
      psOut.println(&#34;Start construct query&#34;);
      GraphQueryResult result = tq.evaluate();
      while (result.hasNext()) {
        Statement stmt = (Statement) result.next();
        psOut.println(stmt.toString());
        // do something interesting with the values here...
      }
      result.close();
    }
 
    tq = repConn.prepareGraphQuery(QueryLanguage.SPARQL,
        <span class="bold">&#34;DESCRIBE &lt;http://p&gt; &#34;</span>);
    {
      psOut.println(&#34;Start describe query&#34;);
      GraphQueryResult result = tq.evaluate();
      while (result.hasNext()) {
        Statement stmt = (Statement) result.next();
        psOut.println(stmt.toString());
        // do something interesting with the values here...
      }
      result.close();
    }
 
    repConn.close(); 
    sr.shutDown();
    op.close();
  }
}
</pre>
<p>To compile this example, enter the following command:</p>
<pre dir="ltr">usr/local/packages/jdk16/bin/javac -classpath $CP Example9.java
</pre>
<p>To run this example, enter a command in the following format:</p>
<pre dir="ltr">/usr/local/packages/jdk16/bin/java -classpath $CP Example9 jdbc:oracle:thin:@localhost:1521:ORCL scott &lt;password&gt; EX9
</pre>
<p>The expected output of the <code class="codeph">java</code> command might appear as follows:</p>
<pre dir="ltr">Start construct query
(http://p, http://new_eq_p, http://cls)
Start describe query
(http://p, http://www.w3.org/2000/01/rdf-schema#domain, http://cls)
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM358"></a><a id="RDFRM357"></a>
<div class="props_rev_3"><a id="GUID-814E15D2-DAFF-48A3-B96E-4F5BE5B429E8"></a>
<h3 id="RDFRM-GUID-814E15D2-DAFF-48A3-B96E-4F5BE5B429E8" class="sect3"><span class="enumeration_section">8.10.10</span> Example10.java: Inference</h3>
<div>
<p><a href="rdf-sesame.htm#GUID-814E15D2-DAFF-48A3-B96E-4F5BE5B429E8__BABFFJCC">Example 8-13</a> shows the <code class="codeph">Example10.java</code> file, which performs OWLPrime inference using the incremental (<code class="codeph">INC</code>) and degree of parallelism (<code class="codeph">DOP</code>) options.</p>
<div class="example" id="GUID-814E15D2-DAFF-48A3-B96E-4F5BE5B429E8__BABFFJCC">
<p class="titleinexample">Example 8-13 Inference</p>
<pre dir="ltr">import org.openrdf.model.Statement;
import org.openrdf.model.URI;
import org.openrdf.model.ValueFactory;
import info.aduna.iteration.CloseableIteration;
 
import java.io.*;
import java.sql.SQLException;
 
import oracle.spatial.rdf.client.sesame.*;
import org.openrdf.rio.RDFFormat;
import org.openrdf.sail.SailConnection;
import org.openrdf.sail.SailException;
import org.openrdf.model.vocabulary.RDFS;
import org.openrdf.repository.RepositoryConnection;
import org.openrdf.repository.sail.SailRepository;
import org.openrdf.repository.RepositoryException;
import org.openrdf.rio.RDFParseException;
import org.openrdf.model.Literal;
import org.openrdf.query.BindingSet;
import org.openrdf.query.QueryLanguage;
import org.openrdf.query.BooleanQuery;
import org.openrdf.query.TupleQuery;
import org.openrdf.query.GraphQuery;
import org.openrdf.query.GraphQueryResult;
import org.openrdf.query.TupleQueryResult;
import org.openrdf.model.vocabulary.RDF;
import org.openrdf.query.QueryEvaluationException;
import org.openrdf.query.MalformedQueryException;
 
public class Example10
{
  public static void main(String[] args) throws SQLException, SailException,
    RepositoryException, IOException, RDFParseException, QueryEvaluationException,
    MalformedQueryException
  {
    PrintStream psOut = System.out;
    String jdbcUrl  = args[0];
    String user     = args[1];
    String password = args[2];
    String model    = args[3];
 
    OraclePool op = new OraclePool(
        OraclePool.getOracleDataSource(jdbcUrl, user, password));
    String[] rulebaseNames = new String[1];
    rulebaseNames[0] = &#34;<span class="bold">owlprime</span>&#34;;
 
    Attachment attachment = Attachment.createInstance(
        Attachment.NO_ADDITIONAL_MODELS, rulebaseNames,
        InferenceMaintenanceMode.NO_UPDATE,
        QueryOptions.DEFAULT);
 
    OracleSailStore store = new OracleSailStore(op, model, attachment);   
    OracleSailConnection osc = store.getConnection();
 
    ValueFactory vf = osc.getValueFactory();
 
    URI sub, pred, obj;
    {
      sub = vf.createURI(&#34;http://C1&#34;);
      pred = vf.createURI(&#34;http://www.w3.org/2000/01/rdf-schema#subClassOf&#34;);
      obj  = vf.createURI(&#34;http://C2&#34;);
      osc.addStatement(sub, pred, obj);
 
      sub = vf.createURI(&#34;http://C2&#34;);
      pred = vf.createURI(&#34;http://www.w3.org/2000/01/rdf-schema#subClassOf&#34;);
      obj  = vf.createURI(&#34;http://C3&#34;);
      osc.addStatement(sub, pred, obj);
    }
 
    osc.commit();
    osc.analyze();                 // analyze the semantic model
    osc.analyzeApplicationTable(); // and then the application table
 
    // parallel inference is certainly an overkill for this ontology
    osc.setInferenceOption(&#34;<span class="bold">INC=T,DOP=4</span>,RAW8=T&#34;);
    osc.performInference();
    osc.analyzeInferredGraph();
 
    TupleQuery tq = null;
    RepositoryConnection repConn = osc.asRepositoryConnection();
    tq = repConn.prepareTupleQuery(QueryLanguage.SPARQL,
        &#34;SELECT ?s ?p ?o WHERE {?s ?p ?o } &#34;);
    {
      TupleQueryResult result = tq.evaluate();
      int idx = 0;
      try {
        psOut.print(&#34;\nStart printing solution\n&#34;);
        while (result.hasNext()) {
          idx++;
          BindingSet bindingSet = result.next();
        }
      }
      finally {
        psOut.println(&#34;\ntotal # of solution &#34; + Integer.toString(idx));
        result.close();
      }
    }
 
 
    {
      sub  = vf.createURI(&#34;http://C3&#34;);
      pred = vf.createURI(&#34;http://www.w3.org/2000/01/rdf-schema#subClassOf&#34;);
      obj  = vf.createURI(&#34;http://C4&#34;);
      osc.addStatement(sub, pred, obj);
    }
 
    // make a small change and then perform inference again
    osc.commit();
    osc.analyze();                 // analyze the semantic model
    osc.analyzeApplicationTable(); // and then the application table
    osc.performInference();
    osc.analyzeInferredGraph();
 
    {
      TupleQueryResult result = tq.evaluate();
      int idx = 0;
      try {
        psOut.print(&#34;\nStart printing solution\n&#34;);
        while (result.hasNext()) {
          idx++;
          BindingSet bindingSet = result.next();
        }
      }
      finally {
        psOut.println(&#34;\ntotal # of solution &#34; + Integer.toString(idx));
        result.close();
      }
    }
 
    osc.close();
    store.shutDown();
    op.close();
  }
}
</pre>
<p>To compile this example, enter the following command:</p>
<pre dir="ltr">usr/local/packages/jdk16/bin/javac -classpath $CP Example10.java
</pre>
<p>To run this example, enter a command in the following format:</p>
<pre dir="ltr">/usr/local/packages/jdk16/bin/java -classpath $CP Example10 jdbc:oracle:thin:@localhost:1521:ORCL scott &lt;password&gt; EX10
</pre>
<p>The expected output of the <code class="codeph">java</code> command might appear as follows:</p>
<pre dir="ltr">Start printing solution
 
total # of solution 3
 
Start printing solution
 
total # of solution 6
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM360"></a><a id="RDFRM359"></a>
<div class="props_rev_3"><a id="GUID-B855D37D-3955-43EA-B3AD-9A6877409E49"></a>
<h3 id="RDFRM-GUID-B855D37D-3955-43EA-B3AD-9A6877409E49" class="sect3"><span class="enumeration_section">8.10.11</span> Example11.java: Named Graph Query</h3>
<div>
<p><a href="rdf-sesame.htm#GUID-B855D37D-3955-43EA-B3AD-9A6877409E49__BABGDGDD">Example 8-14</a> shows the <code class="codeph">Example9.java</code> file, which performs a named graph query.</p>
<div class="example" id="GUID-B855D37D-3955-43EA-B3AD-9A6877409E49__BABGDGDD">
<p class="titleinexample">Example 8-14 Named Graph Query</p>
<pre dir="ltr">import org.openrdf.model.Statement;
import org.openrdf.model.URI;
import org.openrdf.model.ValueFactory;
import info.aduna.iteration.CloseableIteration;
 
import java.io.*;
import java.sql.SQLException;
 
import oracle.spatial.rdf.client.sesame.*;
import org.openrdf.rio.RDFFormat;
import org.openrdf.sail.SailConnection;
import org.openrdf.sail.SailException;
import org.openrdf.model.vocabulary.RDFS;
import org.openrdf.repository.RepositoryConnection;
import org.openrdf.repository.sail.SailRepository;
import org.openrdf.repository.RepositoryException;
import org.openrdf.rio.RDFParseException;
import org.openrdf.model.Literal;
import org.openrdf.query.BindingSet;
import org.openrdf.query.QueryLanguage;
import org.openrdf.query.BooleanQuery;
import org.openrdf.query.TupleQuery;
import org.openrdf.query.GraphQuery;
import org.openrdf.query.GraphQueryResult;
import org.openrdf.query.TupleQueryResult;
import org.openrdf.model.vocabulary.RDF;
import org.openrdf.query.QueryEvaluationException;
import org.openrdf.query.MalformedQueryException;
 
public class Example11
{
  public static void main(String[] args) throws SQLException, SailException,
    RepositoryException, IOException, RDFParseException, QueryEvaluationException,
    MalformedQueryException
  {
    PrintStream psOut = System.out;
    String jdbcUrl  = args[0];
    String user     = args[1];
    String password = args[2];
    String model    = args[3];
    String trigFile = args[4];
 
    OraclePool op = new OraclePool(
        OraclePool.getOracleDataSource(jdbcUrl, user, password));
 
    OracleSailStore store = new OracleSailStore(op, model);
    OracleSailConnection osc = store.getConnection();
    RepositoryConnection repConn = osc.asRepositoryConnection();
    repConn.setAutoCommit(false);
 
    // load the data incrementally since it is very small file
    repConn.add(new File(trigFile), &#34;http://my.com/&#34;, RDFFormat.TRIG);
 
    osc.commit();
    osc.analyze();                 // analyze the semantic model
    osc.analyzeApplicationTable(); // and then the application table
 
    TupleQuery tq = null;
    tq = repConn.prepareTupleQuery(QueryLanguage.SPARQL,
        &#34;SELECT ?g ?s ?p ?o WHERE {?g &lt;http://purl.org/dc/elements/1.1/publisher&gt; ?o1 . GRAPH ?g {?s ?p ?o}}&#34;);
    {
      TupleQueryResult result = tq.evaluate();
      int idx = 0;
      try {
        while (result.hasNext()) {
          idx++;
          BindingSet bindingSet = result.next();
          psOut.print(&#34;\nsolution &#34; + bindingSet.toString());
        }
      }
      finally {
        psOut.println(&#34;\ntotal # of solution &#34; + Integer.toString(idx));
        result.close();
      }
    }
 
    osc.close();
    store.shutDown();
    op.close();
  }
}
</pre>
<p>To compile this example, enter the following command:</p>
<pre dir="ltr">usr/local/packages/jdk16/bin/javac -classpath $CP Example9.java
</pre>
<p>For running this example, assume that the <code class="codeph">test.trig</code> file described in <a href="rdf-sesame.htm#GUID-1C5EFFD2-C26B-469A-9ED3-2F680451CD6C">Example2.java: Add a Data File (in TRIG format)</a> has been created.</p>
<p>To run this example using the <code class="codeph">test.trig</code> data file, enter the following command:</p>
<pre dir="ltr">/usr/local/packages/jdk16/bin/java -classpath $CP Example11 jdbc:oracle:thin:@localhost:1521:ORCL scott  &lt;password&gt;  EX11 ./test.trig
</pre>
<p>The expected output of the <code class="codeph">java</code> command might appear as follows:</p>
<pre dir="ltr">solution [g=http://example.org/alice;s=_:node14r2238h1x1;p=http://xmlns.com/foaf/0.1/mbox;o=mailto:alice@work.example.org]
solution [g=http://example.org/alice;s=_:node14r2238h1x1;p=http://xmlns.com/foaf/0.1/name;o=&#34;Alice&#34;]
solution [g=http://example.org/bob;s=_:node14r2238h1x1;p=http://xmlns.com/foaf/0.1/mbox;o=mailto:bob@oldcorp.example.org]
total # of solution 3
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM362"></a><a id="RDFRM361"></a>
<div class="props_rev_3"><a id="GUID-2CB2BBE2-6D52-4ACD-96D0-51A789C073E5"></a>
<h3 id="RDFRM-GUID-2CB2BBE2-6D52-4ACD-96D0-51A789C073E5" class="sect3"><span class="enumeration_section">8.10.12</span> Example12.java: Indexes on Application Table <span class="italic">[Advanced]</span></h3>
<div>
<p><a href="rdf-sesame.htm#GUID-2CB2BBE2-6D52-4ACD-96D0-51A789C073E5__BABCCHED">Example 8-15</a> shows the <code class="codeph">Example12.java</code> file, an advanced example that creates indexes on the application table.</p>
<div class="example" id="GUID-2CB2BBE2-6D52-4ACD-96D0-51A789C073E5__BABCCHED">
<p class="titleinexample">Example 8-15 Indexes on Application Table [Advanced]</p>
<pre dir="ltr">import org.openrdf.model.Statement;
import org.openrdf.model.URI;
import org.openrdf.model.ValueFactory;
import info.aduna.iteration.CloseableIteration;
 
import java.io.*;
import java.sql.SQLException;
 
import oracle.spatial.rdf.client.sesame.*;
import org.openrdf.rio.RDFFormat;
import org.openrdf.sail.SailConnection;
import org.openrdf.sail.SailException;
import org.openrdf.model.vocabulary.RDFS;
import org.openrdf.repository.RepositoryConnection;
import org.openrdf.repository.sail.SailRepository;
import org.openrdf.repository.RepositoryException;
import org.openrdf.rio.RDFParseException;
import org.openrdf.model.Literal;
import org.openrdf.query.BindingSet;
import org.openrdf.query.QueryLanguage;
import org.openrdf.query.BooleanQuery;
import org.openrdf.query.TupleQuery;
import org.openrdf.query.GraphQuery;
import org.openrdf.query.GraphQueryResult;
import org.openrdf.query.TupleQueryResult;
import org.openrdf.model.vocabulary.RDF;
import org.openrdf.query.QueryEvaluationException;
import org.openrdf.query.MalformedQueryException;
 
public class Example12
{
  public static void main(String[] args) throws SQLException, SailException,
    RepositoryException, IOException, RDFParseException, QueryEvaluationException,
    MalformedQueryException
  {
    PrintStream psOut = System.out;
    String jdbcUrl  = args[0];
    String user     = args[1];
    String password = args[2];
    String model    = args[3];
 
    OraclePool op = new OraclePool(
        OraclePool.getOracleDataSource(jdbcUrl, user, password));
 
    OracleSailStore store = new OracleSailStore(op, model);
 
    // create an index with compress 2, parallel 4
    <span class="bold">store.createAppTabIndex(&#34;spoc&#34;, 2, 4);</span>
 
    // create another index w/o parallel or compression
    <span class="bold">store.createAppTabIndex(&#34;cspo&#34;, 0, 1);</span>
 
    // will print out the default index (cpso) as well
    psOut.println(&#34;index signatures before dropping indexes:&#34;);
    for (String sig : store.getAppTabIndexSignatures()) {
      psOut.println(&#34;index signature:&#34; + sig);     
    }
 
    store.dropAllAppTabIndexes();
    psOut.println(&#34;index signatures after dropping indexes...&#34;);
    for (String sig : store.getAppTabIndexSignatures()) {
      psOut.println(&#34;index signature:&#34; + sig);     
    }
 
    store.shutDown();
 
    // clean up oracle tables and models
    OracleUtils.dropSemanticModelAndTables(op, model);
 
    store.shutDown();
    op.close();
  }
}
</pre>
<p>To compile this example, enter the following command:</p>
<pre dir="ltr">usr/local/packages/jdk16/bin/javac -classpath $CP Example12.java
</pre>
<p>To run this example, enter a command in the following format:</p>
<pre dir="ltr">/usr/local/packages/jdk16/bin/java -classpath $CP Example12 jdbc:oracle:thin:@localhost:1521:ORCL scott &lt;password&gt; EX12
</pre>
<p>The expected output of the <code class="codeph">java</code> command might appear as follows:</p>
<pre dir="ltr">index signatures before dropping indexes:
index signature:spoc
index signature:cpso
index signature:cspo
index signatures after dropping indexes...
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM364"></a><a id="RDFRM363"></a>
<div class="props_rev_3"><a id="GUID-850A63E6-6F54-4A90-A480-7917BF59B4A3"></a>
<h3 id="RDFRM-GUID-850A63E6-6F54-4A90-A480-7917BF59B4A3" class="sect3"><span class="enumeration_section">8.10.13</span> Example13.java: Uniqueness Constraint on Application Table <span class="italic">[Advanced]</span></h3>
<div>
<p><a href="rdf-sesame.htm#GUID-850A63E6-6F54-4A90-A480-7917BF59B4A3__BABDECDI">Example 8-16</a> shows the <code class="codeph">Example13.java</code> file, an advanced example that enables and disables the uniqueness constraint on the application table.</p>
<div class="example" id="GUID-850A63E6-6F54-4A90-A480-7917BF59B4A3__BABDECDI">
<p class="titleinexample">Example 8-16 Uniqueness Constraint on Application Table [Advanced]</p>
<pre dir="ltr">import org.openrdf.model.Statement;
import org.openrdf.model.URI;
import org.openrdf.model.ValueFactory;
import info.aduna.iteration.CloseableIteration;
 
import java.io.*;
import java.sql.SQLException;
 
import oracle.spatial.rdf.client.sesame.*;
import org.openrdf.rio.RDFFormat;
import org.openrdf.sail.SailConnection;
import org.openrdf.sail.SailException;
import org.openrdf.model.vocabulary.RDFS;
import org.openrdf.repository.RepositoryConnection;
import org.openrdf.repository.sail.SailRepository;
import org.openrdf.repository.RepositoryException;
import org.openrdf.rio.RDFParseException;
import org.openrdf.model.Literal;
import org.openrdf.query.BindingSet;
import org.openrdf.query.QueryLanguage;
import org.openrdf.query.BooleanQuery;
import org.openrdf.query.TupleQuery;
import org.openrdf.query.GraphQuery;
import org.openrdf.query.GraphQueryResult;
import org.openrdf.query.TupleQueryResult;
import org.openrdf.model.vocabulary.RDF;
import org.openrdf.query.QueryEvaluationException;
import org.openrdf.query.MalformedQueryException;
 
public class Example13
{
  public static void main(String[] args) throws SQLException, SailException,
    RepositoryException, IOException, RDFParseException, QueryEvaluationException,
    MalformedQueryException
  {
    PrintStream psOut = System.out;
    String jdbcUrl  = args[0];
    String user     = args[1];
    String password = args[2];
    String model    = args[3];
 
    OraclePool op = new OraclePool(
        OraclePool.getOracleDataSource(jdbcUrl, user, password));
 
    OracleSailStore store = new OracleSailStore(op, model);
    store.enableUniquenessConstraint();    ValueFactory f = store.getValueFactory();
 
    OracleSailConnection osc = store.getConnection();
 
    // create some resources and literals to make statements out of
    URI alice = f.createURI(&#34;http://example.org/people/alice&#34;);
    URI name = f.createURI(&#34;http://example.org/ontology/name&#34;);
    URI person = f.createURI(&#34;http://example.org/ontology/Person&#34;);   
 
    osc.addStatement(alice, name, person);
    osc.addStatement(alice, name, person);
    psOut.println(&#34;size of store after adding duplicate triple with uniqueness ON :&#34; + osc.size());
 
    osc.clear();       
    store.disableUniquenessConstraint();    osc.addStatement(alice, name, person);
    osc.addStatement(alice, name, person);
    psOut.println(&#34;size of store after adding duplicate triple with uniqueness OFF:&#34; + osc.size());
 
    osc.close();
 
    store.shutDown();
    op.close();
  }
}
</pre>
<p>To compile this example, enter the following command:</p>
<pre dir="ltr">usr/local/packages/jdk16/bin/javac -classpath $CP Example13.java
</pre>
<p>To run this example, enter a command in the following format:</p>
<pre dir="ltr">/usr/local/packages/jdk16/bin/java -classpath $CP Example13 jdbc:oracle:thin:@localhost:1521:ORCL scott &lt;password&gt; EX13
</pre>
<p>The expected output of the <code class="codeph">java</code> command might appear as follows:</p>
<pre dir="ltr">size of store after adding duplicate triple with uniqueness ON :1
size of store after adding duplicate triple with uniqueness OFF:2
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM366"></a><a id="RDFRM365"></a>
<div class="props_rev_3"><a id="GUID-247D9951-5BDB-4BB4-93D5-A27261A50F86"></a>
<h3 id="RDFRM-GUID-247D9951-5BDB-4BB4-93D5-A27261A50F86" class="sect3"><span class="enumeration_section">8.10.14</span> Example14.java: Query Timeout and Parallel Execution <span class="italic">[Advanced]</span></h3>
<div>
<p><a href="rdf-sesame.htm#GUID-247D9951-5BDB-4BB4-93D5-A27261A50F86__BABGCDHB">Example 8-17</a> shows the <code class="codeph">Example14.java</code> file, an advanced example that specifies a query timeout and parallel execution (<code class="codeph">TIMEOUT</code> and <code class="codeph">DOP</code> options).</p>
<div class="example" id="GUID-247D9951-5BDB-4BB4-93D5-A27261A50F86__BABGCDHB">
<p class="titleinexample">Example 8-17 Query Timeout and Parallel Execution [Advanced]</p>
<pre dir="ltr">import org.openrdf.model.Statement;
import org.openrdf.model.URI;
import org.openrdf.model.ValueFactory;
import info.aduna.iteration.CloseableIteration;
 
import java.io.*;
import java.sql.SQLException;
 
import oracle.spatial.rdf.client.sesame.*;
import org.openrdf.rio.RDFFormat;
import org.openrdf.sail.SailConnection;
import org.openrdf.sail.SailException;
import org.openrdf.model.vocabulary.RDFS;
import org.openrdf.repository.RepositoryConnection;
import org.openrdf.repository.sail.SailRepository;
import org.openrdf.repository.RepositoryException;
import org.openrdf.rio.RDFParseException;
import org.openrdf.model.Literal;
import org.openrdf.query.BindingSet;
import org.openrdf.query.QueryLanguage;
import org.openrdf.query.TupleQuery;
import org.openrdf.query.TupleQueryResult;
import org.openrdf.model.vocabulary.RDF;
import org.openrdf.query.QueryEvaluationException;
import org.openrdf.query.MalformedQueryException;
 
public class Example14
{
  public static void main(String[] args) throws SQLException, SailException,
    RepositoryException, IOException, RDFParseException, QueryEvaluationException,
    MalformedQueryException
  {
    PrintStream psOut = System.out;
    String jdbcUrl  = args[0];
    String user     = args[1];
    String password = args[2];
    String model    = args[3];
 
    OraclePool op = new OraclePool(
        OraclePool.getOracleDataSource(jdbcUrl, user, password));
    OracleSailStore store = new OracleSailStore(op, model);   
 
    OracleSailConnection osc = store.getConnection();
    ValueFactory f = osc.getValueFactory();
 
    // create some resources and literals to make statements out of
    URI alice = f.createURI(&#34;http://example.org/people/alice&#34;);
    URI name = f.createURI(&#34;http://example.org/ontology/name&#34;);
    URI person = f.createURI(&#34;http://example.org/ontology/Person&#34;);
    Literal alicesName = f.createLiteral(&#34;Alice&#34;);
 
    osc.addStatement(alice, RDF.TYPE, person);
    osc.addStatement(alice, name, alicesName);
    osc.commit();
 
    osc.analyze();
    osc.analyzeApplicationTable();
 
    // Run a query while specifying parallel execution (through DOP=2)
    // and max query execution time (through tmieout=3)
    String queryString =
      &#34; PREFIX ORACLE_SEM_FS_NS: &lt;http://oracle.com/semtech#<span class="bold">dop=2,timeout=3</span>&gt; &#34; +
      &#34; SELECT * WHERE {?x ?p ?y} &#34;;
 
    TupleQuery tupleQuery = osc.asRepositoryConnection().prepareTupleQuery(
        QueryLanguage.SPARQL, queryString);
 
    TupleQueryResult result = tupleQuery.evaluate();
    try {
      while (result.hasNext()) {
        BindingSet bindingSet = result.next();
        psOut.println(&#34;value of x: &#34; + bindingSet.getValue(&#34;x&#34;));
      }
    }
    finally {
      result.close();
    }
 
    osc.close();
    store.shutDown();
    op.close();
  }
}
</pre>
<p>To compile this example, enter the following command:</p>
<pre dir="ltr">usr/local/packages/jdk16/bin/javac -classpath $CP Example14.java
</pre>
<p>To run this example, enter a command in the following format:</p>
<pre dir="ltr">/usr/local/packages/jdk16/bin/java -classpath $CP Example14 jdbc:oracle:thin:@localhost:1521:ORCL scott &lt;password&gt; EX14
</pre>
<p>The expected output of the <code class="codeph">java</code> command might appear as follows:</p>
<pre dir="ltr">value of x: http://example.org/people/alice
value of x: http://example.org/people/alice
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM368"></a><a id="RDFRM367"></a>
<div class="props_rev_3"><a id="GUID-C38145CC-6CC4-4C0D-A11A-A3697F3404AB"></a>
<h3 id="RDFRM-GUID-C38145CC-6CC4-4C0D-A11A-A3697F3404AB" class="sect3"><span class="enumeration_section">8.10.15</span> Example15.java: Get COUNT of Matches <span class="italic">[Advanced]</span></h3>
<div>
<p><a href="rdf-sesame.htm#GUID-C38145CC-6CC4-4C0D-A11A-A3697F3404AB__BABICDAB">Example 8-18</a> shows the <code class="codeph">Example15.java</code> file, an advanced example that returns the total number (COUNT) of matches (and only of matches).</p>
<div class="example" id="GUID-C38145CC-6CC4-4C0D-A11A-A3697F3404AB__BABICDAB">
<p class="titleinexample">Example 8-18 Get COUNT of Matches [Advanced]</p>
<pre dir="ltr">import org.openrdf.model.Statement;
import org.openrdf.model.URI;
import org.openrdf.model.ValueFactory;
import info.aduna.iteration.CloseableIteration;
 
import java.io.*;
import java.sql.SQLException;
 
import oracle.spatial.rdf.client.sesame.*;
import org.openrdf.rio.RDFFormat;
import org.openrdf.sail.SailConnection;
import org.openrdf.sail.SailException;
import org.openrdf.model.vocabulary.RDFS;
import org.openrdf.repository.RepositoryConnection;
import org.openrdf.repository.sail.SailRepository;
import org.openrdf.repository.RepositoryException;
import org.openrdf.rio.RDFParseException;
import org.openrdf.model.Literal;
import org.openrdf.query.BindingSet;
import org.openrdf.query.QueryLanguage;
import org.openrdf.query.TupleQuery;
import org.openrdf.query.TupleQueryResult;
import org.openrdf.model.vocabulary.RDF;
import org.openrdf.query.QueryEvaluationException;
import org.openrdf.query.MalformedQueryException;
 
public class Example15
{
  public static void main(String[] args) throws SQLException, SailException,
    RepositoryException, IOException, RDFParseException, QueryEvaluationException,
    MalformedQueryException
  {
    PrintStream psOut = System.out;
    String jdbcUrl  = args[0];
    String user     = args[1];
    String password = args[2];
    String model    = args[3];
 
    OraclePool op = new OraclePool(
        OraclePool.getOracleDataSource(jdbcUrl, user, password));
    OracleSailStore store = new OracleSailStore(op, model);   
 
    OracleSailConnection osc = store.getConnection();
    ValueFactory f = osc.getValueFactory();
 
    // create some resources and literals to make statements out of
    URI alice = f.createURI(&#34;http://example.org/people/alice&#34;);
    URI name = f.createURI(&#34;http://example.org/ontology/name&#34;);
    URI person = f.createURI(&#34;http://example.org/ontology/Person&#34;);
    Literal alicesName = f.createLiteral(&#34;Alice&#34;);
 
    osc.addStatement(alice, RDF.TYPE, person);
    osc.addStatement(alice, name, alicesName);
    osc.commit();
 
    osc.analyze();
    osc.analyzeApplicationTable();
 
    // Run a query and only return the number of matches (the count!)
    String queryString =
      &#34; PREFIX ORACLE_SEM_FS_NS: &lt;http://oracle.com/semtech#<span class="bold">count_only</span>&gt; &#34; +
      &#34; SELECT ?totalCount WHERE {?s ?p ?y} &#34;;
 
    TupleQuery tupleQuery = osc.asRepositoryConnection().prepareTupleQuery(
        QueryLanguage.SPARQL, queryString);
 
    TupleQueryResult result = tupleQuery.evaluate();
    try {
      if (result.hasNext()) {
        BindingSet bindingSet = result.next();
        psOut.println(&#34;number of matches: &#34; + bindingSet.getValue(&#34;totalCount&#34;));
      }
    }
    finally {
      result.close();
    }
 
    osc.close();
    store.shutDown();
    op.close();
  }
}
</pre>
<p>To compile this example, enter the following command:</p>
<pre dir="ltr">usr/local/packages/jdk16/bin/javac -classpath $CP Example15.java
</pre>
<p>To run this example, enter a command in the following format:</p>
<pre dir="ltr">/usr/local/packages/jdk16/bin/java -classpath $CP Example15 jdbc:oracle:thin:@localhost:1521:ORCL scott &lt;password&gt; EX15
</pre>
<p>The expected output of the <code class="codeph">java</code> command might appear as follows:</p>
<pre dir="ltr">number of matches: &#34;2&#34;^^&lt;http://www.w3.org/2001/XMLSchema#integer&gt;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM370"></a><a id="RDFRM369"></a>
<div class="props_rev_3"><a id="GUID-DDB2D634-4CE9-4D67-8D8F-365922D3169A"></a>
<h3 id="RDFRM-GUID-DDB2D634-4CE9-4D67-8D8F-365922D3169A" class="sect3"><span class="enumeration_section">8.10.16</span> Example16.java: Specify Bind Variable for Constant in Query Pattern <span class="italic">[Advanced]</span></h3>
<div>
<p><a href="rdf-sesame.htm#GUID-DDB2D634-4CE9-4D67-8D8F-365922D3169A__BABGEDCD">Example 8-19</a> shows the <code class="codeph">Example16.java</code> file, an advanced example that specifies a bind variable for a constant in the SPARQL query pattern.</p>
<div class="example" id="GUID-DDB2D634-4CE9-4D67-8D8F-365922D3169A__BABGEDCD">
<p class="titleinexample">Example 8-19 Specify Bind Variable for Constant in Query Pattern [Advanced]</p>
<pre dir="ltr">import org.openrdf.model.Statement;
import org.openrdf.model.URI;
import org.openrdf.model.ValueFactory;
import info.aduna.iteration.CloseableIteration;
 
import java.io.*;
import java.sql.SQLException;
 
import oracle.spatial.rdf.client.sesame.*;
import org.openrdf.rio.RDFFormat;
import org.openrdf.sail.SailConnection;
import org.openrdf.sail.SailException;
import org.openrdf.model.vocabulary.RDFS;
import org.openrdf.repository.RepositoryConnection;
import org.openrdf.repository.sail.SailRepository;
import org.openrdf.repository.RepositoryException;
import org.openrdf.rio.RDFParseException;
import org.openrdf.model.Literal;
import org.openrdf.query.BindingSet;
import org.openrdf.query.QueryLanguage;
import org.openrdf.query.TupleQuery;
import org.openrdf.query.TupleQueryResult;
import org.openrdf.model.vocabulary.RDF;
import org.openrdf.query.QueryEvaluationException;
import org.openrdf.query.MalformedQueryException;
 
public class Example16
{
  public static void main(String[] args) throws SQLException, SailException,
    RepositoryException, IOException, RDFParseException, QueryEvaluationException,
    MalformedQueryException
  {
    PrintStream psOut = System.out;
    String jdbcUrl  = args[0];
    String user     = args[1];
    String password = args[2];
    String model    = args[3];
 
    OraclePool op = new OraclePool(
        OraclePool.getOracleDataSource(jdbcUrl, user, password));
    OracleSailStore store = new OracleSailStore(op, model);   
 
    OracleSailConnection osc = store.getConnection();
    ValueFactory f = osc.getValueFactory();
 
    // create some resources and literals to make statements out of
    URI alice = f.createURI(&#34;http://example.org/people/alice&#34;);
    URI name = f.createURI(&#34;http://example.org/ontology/name&#34;);
    URI person = f.createURI(&#34;http://example.org/ontology/Person&#34;);
    Literal alicesName = f.createLiteral(&#34;Alice&#34;);
 
    osc.addStatement(alice, RDF.TYPE, person);
    osc.addStatement(alice, name, alicesName);
    osc.commit();
 
    osc.analyze();
    osc.analyzeApplicationTable();
 
    String queryString =
      &#34; PREFIX ORACLE_SEM_FS_NS: &lt;http://oracle.com/semtech#<span class="bold">use_bind_var(1)</span>&gt; &#34; +
      &#34; SELECT ?p WHERE { &lt;http://example.org/people/alice&gt; &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; ?p} &#34;;
 
    TupleQuery tupleQuery = osc.asRepositoryConnection().prepareTupleQuery(
        QueryLanguage.SPARQL, queryString);
 
    TupleQueryResult result = tupleQuery.evaluate();
    try {
      if (result.hasNext()) {
        BindingSet bindingSet = result.next();
        psOut.println(&#34;solution &#34; + bindingSet.toString());
      }
    }
    finally {
      result.close();
    }
 
    osc.close();
    store.shutDown();
    op.close();
  }
}
</pre>
<p>To compile this example, enter the following command:</p>
<pre dir="ltr">usr/local/packages/jdk16/bin/javac -classpath $CP Example16.java
</pre>
<p>To run this example, enter a command in the following format:</p>
<pre dir="ltr">/usr/local/packages/jdk16/bin/java -classpath $CP Example16 jdbc:oracle:thin:@localhost:1521:ORCL scott &lt;password&gt; EX16
</pre>
<p>The expected output of the <code class="codeph">java</code> command might appear as follows:</p>
<pre dir="ltr">solution [p=http://example.org/ontology/Person]
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM372"></a><a id="RDFRM371"></a>
<div class="props_rev_3"><a id="GUID-013012AF-671B-4874-B0AA-4A574A8BD75C"></a>
<h3 id="RDFRM-GUID-013012AF-671B-4874-B0AA-4A574A8BD75C" class="sect3"><span class="enumeration_section">8.10.17</span> Example17.java: Specify Bind Variable for Constant in Different Position in Query Pattern <span class="italic">[Advanced]</span></h3>
<div>
<p><a href="rdf-sesame.htm#GUID-013012AF-671B-4874-B0AA-4A574A8BD75C__BABICHAH">Example 8-20</a> shows the <code class="codeph">Example17.java</code> file, an advanced example that specifies a bind variable for a constant in a different position in the SPARQL query pattern than in <code class="codeph">Example16.java</code> (<a href="rdf-sesame.htm#GUID-DDB2D634-4CE9-4D67-8D8F-365922D3169A__BABGEDCD">Example 8-19</a>).</p>
<div class="example" id="GUID-013012AF-671B-4874-B0AA-4A574A8BD75C__BABICHAH">
<p class="titleinexample">Example 8-20 Specify Bind Variable for Constant in Different Position in Query Pattern [Advanced]</p>
<pre dir="ltr">import org.openrdf.model.Statement;
import org.openrdf.model.URI;
import org.openrdf.model.ValueFactory;
import info.aduna.iteration.CloseableIteration;
 
import java.io.*;
import java.sql.SQLException;
 
import oracle.spatial.rdf.client.sesame.*;
import org.openrdf.rio.RDFFormat;
import org.openrdf.sail.SailConnection;
import org.openrdf.sail.SailException;
import org.openrdf.model.vocabulary.RDFS;
import org.openrdf.repository.RepositoryConnection;
import org.openrdf.repository.sail.SailRepository;
import org.openrdf.repository.RepositoryException;
import org.openrdf.rio.RDFParseException;
import org.openrdf.model.Literal;
import org.openrdf.query.BindingSet;
import org.openrdf.query.QueryLanguage;
import org.openrdf.query.TupleQuery;
import org.openrdf.query.TupleQueryResult;
import org.openrdf.model.vocabulary.RDF;
import org.openrdf.query.QueryEvaluationException;
import org.openrdf.query.MalformedQueryException;
 
public class Example17
{
  public static void main(String[] args) throws SQLException, SailException,
    RepositoryException, IOException, RDFParseException, QueryEvaluationException,
    MalformedQueryException
  {
    PrintStream psOut = System.out;
    String jdbcUrl  = args[0];
    String user     = args[1];
    String password = args[2];
    String model    = args[3];
 
    OraclePool op = new OraclePool(
        OraclePool.getOracleDataSource(jdbcUrl, user, password));
    OracleSailStore store = new OracleSailStore(op, model);   
 
    OracleSailConnection osc = store.getConnection();
    ValueFactory f = osc.getValueFactory();
 
    // create some resources and literals to make statements out of
    URI alice = f.createURI(&#34;http://example.org/people/alice&#34;);
    URI name = f.createURI(&#34;http://example.org/ontology/name&#34;);
    URI person = f.createURI(&#34;http://example.org/ontology/Person&#34;);
    Literal alicesName = f.createLiteral(&#34;Alice&#34;);
 
    osc.addStatement(alice, RDF.TYPE, person);
    osc.addStatement(alice, name, alicesName);
    osc.commit();
 
    osc.analyze();
    osc.analyzeApplicationTable();
 
    String queryString =
      &#34; PREFIX ORACLE_SEM_FS_NS: &lt;http://oracle.com/semtech#<span class="bold">use_bind_var(2)</span>&gt; &#34; +
      &#34; SELECT ?s WHERE { ?s &lt;http://example.org/ontology/name&gt; \&#34;Alice\&#34; } &#34;;
 
    TupleQuery tupleQuery = osc.asRepositoryConnection().prepareTupleQuery(
        QueryLanguage.SPARQL, queryString);
 
    TupleQueryResult result = tupleQuery.evaluate();
    try {
      if (result.hasNext()) {
        BindingSet bindingSet = result.next();
        psOut.println(&#34;solution &#34; + bindingSet.toString());
      }
    }
    finally {
      result.close();
    }
 
    osc.close();
    store.shutDown();
    op.close();
  }
}
</pre>
<p>To compile this example, enter the following command:</p>
<pre dir="ltr">usr/local/packages/jdk16/bin/javac -classpath $CP Example17.java
</pre>
<p>To run this example, enter a command in the following format:</p>
<pre dir="ltr">/usr/local/packages/jdk16/bin/java -classpath $CP Example17 jdbc:oracle:thin:@localhost:1521:ORCL scott &lt;password&gt; EX17
</pre>
<p>The expected output of the <code class="codeph">java</code> command might appear as follows:</p>
<pre dir="ltr">solution [s=http://example.org/people/alice]
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM374"></a><a id="RDFRM373"></a>
<div class="props_rev_3"><a id="GUID-8EED13C2-DF19-454E-976D-88F8641BA2EF"></a>
<h3 id="RDFRM-GUID-8EED13C2-DF19-454E-976D-88F8641BA2EF" class="sect3"><span class="enumeration_section">8.10.18</span> Example18.java: Build URIs from Internal Numeric IDs <span class="italic">[Advanced]</span></h3>
<div>
<p><a href="rdf-sesame.htm#GUID-8EED13C2-DF19-454E-976D-88F8641BA2EF__BABBGIDC">Example 8-21</a> shows the <code class="codeph">Example18.java</code> file, an advanced example that builds URIs from internal numeric IDs.</p>
<div class="example" id="GUID-8EED13C2-DF19-454E-976D-88F8641BA2EF__BABBGIDC">
<p class="titleinexample">Example 8-21 Build URIs from Internal Numeric IDs [Advanced]</p>
<pre dir="ltr">import org.openrdf.model.Statement;
import org.openrdf.model.URI;
import org.openrdf.model.ValueFactory;
import info.aduna.iteration.CloseableIteration;
 
import java.io.*;
import java.sql.SQLException;
 
import oracle.spatial.rdf.client.sesame.*;
import org.openrdf.rio.RDFFormat;
import org.openrdf.sail.SailConnection;
import org.openrdf.sail.SailException;
import org.openrdf.model.vocabulary.RDFS;
import org.openrdf.repository.RepositoryConnection;
import org.openrdf.repository.sail.SailRepository;
import org.openrdf.repository.RepositoryException;
import org.openrdf.rio.RDFParseException;
import org.openrdf.model.Literal;
import org.openrdf.query.BindingSet;
import org.openrdf.query.QueryLanguage;
import org.openrdf.query.TupleQuery;
import org.openrdf.query.TupleQueryResult;
import org.openrdf.model.vocabulary.RDF;
import org.openrdf.query.QueryEvaluationException;
import org.openrdf.query.MalformedQueryException;
 
public class Example18
{
  public static void main(String[] args) throws SQLException, SailException,
    RepositoryException, IOException, RDFParseException, QueryEvaluationException,
    MalformedQueryException
  {
    PrintStream psOut = System.out;
    String jdbcUrl  = args[0];
    String user     = args[1];
    String password = args[2];
    String model    = args[3];
 
    OraclePool op = new OraclePool(
        OraclePool.getOracleDataSource(jdbcUrl, user, password));
    OracleSailStore store = new OracleSailStore(op, model);   
 
    OracleSailConnection osc = store.getConnection();
    ValueFactory f = osc.getValueFactory();
 
    // create some resources and literals to make statements out of
    URI alice = f.createURI(&#34;http://example.org/people/alice&#34;);
    URI name = f.createURI(&#34;http://example.org/ontology/name&#34;);
    URI person = f.createURI(&#34;http://example.org/ontology/Person&#34;);
    Literal alicesName = f.createLiteral(&#34;Alice&#34;);
 
    osc.addStatement(alice, RDF.TYPE, person);
    osc.addStatement(alice, name, alicesName);
    osc.commit();
 
    osc.analyze();
    osc.analyzeApplicationTable();
 
    String queryString =
      &#34; PREFIX ORACLE_SEM_FS_NS: &lt;http://oracle.com/semtech#<span class="bold">build-uri-for-id(?p)</span>&gt; &#34; +
      &#34; SELECT ?p WHERE { &lt;http://example.org/people/alice&gt; &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; ?p} &#34;;
 
    TupleQuery tupleQuery = osc.asRepositoryConnection().prepareTupleQuery(
        QueryLanguage.SPARQL, queryString);
 
    TupleQueryResult result = tupleQuery.evaluate();
    try {
      if (result.hasNext()) {
        BindingSet bindingSet = result.next();
        psOut.println(&#34;solution &#34; + bindingSet.toString());
      }
    }
    finally {
      result.close();
    }
 
    osc.close();
    store.shutDown();
    op.close();
  }
}
</pre>
<p>To compile this example, enter the following command:</p>
<pre dir="ltr">usr/local/packages/jdk16/bin/javac -classpath $CP Example18.java
</pre>
<p>To run this example, enter a command in the following format:</p>
<pre dir="ltr">/usr/local/packages/jdk16/bin/java -classpath $CP Example18 jdbc:oracle:thin:@localhost:1521:ORCL scott &lt;password&gt; EX18
</pre>
<p>The expected output of the <code class="codeph">java</code> command might appear as follows:</p>
<pre dir="ltr">solution [p=rdfvid:428072448720587401]
</pre></div>
<!-- class="example" --></div>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4500">
<tr>
<td class="cellalignment4507">
<table class="cellalignment4505">
<tr>
<td class="cellalignment4504"><a href="rdf-jena.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4504"><a href="user-defined-inf.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2005, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4509">
<table class="cellalignment4503">
<tr>
<td class="cellalignment4504"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4504"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4504"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4504"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4504"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4504"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>