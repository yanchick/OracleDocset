<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-88575"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/RDF%20Views%3A%20Relational%20Data%20as%20RDF"></a><title>RDF Views: Relational Data as RDF</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="keywords" content="RDF views, views, RDF, relational data as RDF"/>
<meta name="dcterms.created" content="2017-06-29T10:38:43Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Spatial and Graph RDF Semantic Graph Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E51611-08"/>
<meta name="dcterms.isVersionOf" content="RDFRM"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2005, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="user-defined-inf.htm" title="Previous" type="text/html"/>
<link rel="Next" href="part-ref-supp.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E51611-08.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-8C19D83B-22CA-49AA-B2E9-E6935A5E0B0C"></a> <span id="PAGE" style="display:none;">17/28</span> <!-- End Header -->
<a id="RDFRM555"></a>
<h1 id="RDFRM-GUID-8C19D83B-22CA-49AA-B2E9-E6935A5E0B0C" class="sect1"><span class="enumeration_chapter">10</span> RDF Views: Relational Data as RDF</h1>
<div>
<p>This chapter explains how to create and use RDF views over relational data in Oracle Spatial and Graph RDF Semantic Graph. Relational data is viewed as virtual RDF triples using one of the two forms of RDB2RDF mapping described in W3C documents on Direct Mapping and R2RML mapping:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="italic">R2RML: RDB to RDF Mapping Language</span>, W3C Recommendation (<a href="http://www.w3.org/TR/r2rml/" target="_blank"><code class="codeph">http://www.w3.org/TR/r2rml/</code></a>)</p>
</li>
<li>
<p><span class="italic">A Direct Mapping of Relational Data to RDF</span>, W3C Recommendation (<a href="http://www.w3.org/TR/rdb-direct-mapping/" target="_blank"><code class="codeph">http://www.w3.org/TR/rdb-direct-mapping/</code></a>)</p>
</li>
</ul>
<p>This chapter contains the following major sections:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="rdf-views.htm#GUID-8A9857D6-54C4-40C8-9BAB-D863C1BBF47F">Why Use RDF Views on Relational Data?</a></p>
</li>
<li>
<p><a href="rdf-views.htm#GUID-213D209A-82C1-4E92-8F42-06C5F25B00BF">API Support for RDF Views</a></p>
</li>
<li>
<p><a href="rdf-views.htm#GUID-CEFE07FA-FAAB-4FF0-B70C-0BDA20306F87">Example: Using an RDF View with Direct Mapping</a></p>
</li>
<li>
<p><a href="rdf-views.htm#GUID-7EE22B1F-D5C1-4F0F-85B9-CAB4BB815819">Combining Native RDF Data with Virtual RDB2RDF Data</a></p>
</li>
</ul>
</div>
<a id="RDFRM556"></a>
<div class="props_rev_3"><a id="GUID-8A9857D6-54C4-40C8-9BAB-D863C1BBF47F"></a>
<h2 id="RDFRM-GUID-8A9857D6-54C4-40C8-9BAB-D863C1BBF47F" class="sect2"><span class="enumeration_section">10.1</span> Why Use RDF Views on Relational Data?</h2>
<div>
<p>Using RDF views on relational data enables you to integrate data available from different sources. You can exploit the advantages of relational data without the need for physical storage of the RDF triples that correspond to the relational data. Before RDF views were included in RDF Semantic Graph in Oracle Database 12<span class="italic">c</span> Release 1 (12.1), you needed to write custom SQL queries or use non-standard mappings and physically store the generated RDF triples in an RDF model.</p>
<p>The simplest way to create a mapping of relational data to RDF data is by calling the <a href="sem-apis-ref.htm#GUID-756C5186-4552-46B4-A203-27395824523A">SEM_APIS.CREATE_RDFVIEW_MODEL</a> procedure to create an RDF view and supplying the list of tables or views whose content you would like to be viewed as RDF. This provides a direct mapping of those relational tables or views.</p>
<p>To get a more customized mapping, you can write an R2RML mapping document (in RDF using Turtle, for example) to specify the desired mapping, load the mapping document (after converting it to N-Triple format) into a staging table (for the table definition, see <a href="rdf-overview.htm#GUID-93BBAF2A-D906-4172-8315-4E0184FE6ABB">Bulk Loading Semantic Data Using a Staging Table</a>), and then call the <a href="sem-apis-ref.htm#GUID-756C5186-4552-46B4-A203-27395824523A">SEM_APIS.CREATE_RDFVIEW_MODEL</a> procedure to create an RDF view by supplying the name of the staging table.</p>
</div>
</div>
<a id="RDFRM559"></a>
<div class="props_rev_3"><a id="GUID-213D209A-82C1-4E92-8F42-06C5F25B00BF"></a>
<h2 id="RDFRM-GUID-213D209A-82C1-4E92-8F42-06C5F25B00BF" class="sect2"><span class="enumeration_section">10.2</span> API Support for RDF Views</h2>
<div>
<p>Subprograms are included in the SEM_APIS package (documented in <a href="sem-apis-ref.htm#GUID-F42AB976-445A-4DCD-974C-3B9ED810E3D5">SEM_APIS Package Subprograms</a>) for creating, dropping, and exporting (that is, materializing the content of) RDF views. An RDF view is created as an RDF model, but the RDF model physically contains only metadata. The actual data is still stored in the relational tables for which the RDF view has been created.</p>
<p>For the examples in the rest of this section, assume that the following relational tables exist in the invoker&#39;s schema:</p>
<pre dir="ltr">CREATE TABLE <span class="bold">dept</span> (
  deptno NUMBER CONSTRAINT pk_DeptTab_deptno PRIMARY KEY,
  dname VARCHAR2(30),
  loc VARCHAR2(30)
);
 
CREATE TABLE <span class="bold">emp</span> ( 
  empno NUMBER PRIMARY KEY,
  ename VARCHAR2(30),
  job VARCHAR2(20),
  deptno NUMBER REFERENCES dept (deptno)
);
</pre>
<p>Note that if these tables are in a different schema (for example, <code class="codeph">SCOTT</code>) than the invoker&#39;s, when specifying the names of these tables, you need to use schema-qualified table names: <code class="codeph">&#34;SCOTT&#34;.&#34;DEPT&#34;</code> and <code class="codeph">&#34;SCOTT&#34;.&#34;EMP&#34;</code>.</p>
</div>
<a id="RDFRM591"></a><a id="RDFRM736"></a><a id="RDFRM590"></a>
<div class="props_rev_3"><a id="GUID-3B0E1A9F-4BBA-4349-9E28-147135D2EEE2"></a>
<h3 id="RDFRM-GUID-3B0E1A9F-4BBA-4349-9E28-147135D2EEE2" class="sect3"><span class="enumeration_section">10.2.1</span> Creating an RDF View with Direct Mapping</h3>
<div>
<p><a href="rdf-views.htm#GUID-3B0E1A9F-4BBA-4349-9E28-147135D2EEE2__CHDDEIBF">Example 10-1</a> creates an RDF view model using direct mapping of two tables, EMP and DEPT, with a base prefix of <code class="codeph">http://empdb/</code>. The (virtual) RDF terms are generated according to <span class="italic">A Direct Mapping of Relational Data to RDF</span>, W3C Recommendation (<a href="http://www.w3.org/TR/rdb-direct-mapping/" target="_blank"><code class="codeph">http://www.w3.org/TR/rdb-direct-mapping/</code></a>).</p>
<div class="example" id="GUID-3B0E1A9F-4BBA-4349-9E28-147135D2EEE2__CHDDEIBF">
<p class="titleinexample">Example 10-1 Creating an RDF View with Direct Mapping</p>
<pre dir="ltr">BEGIN
  sem_apis.create_rdfview_model(
    model_name =&gt; &#39;empdb_model&#39;,
    tables =&gt; SYS.ODCIVarchar2List(&#39;EMP&#39;, &#39;DEPT&#39;),
    prefix =&gt; &#39;http://empdb/&#39;,
    options =&gt; &#39;KEY_BASED_REF_PROPERTY=T&#39;
  );
END;
/
</pre>
<p>To see the properties that are generated, enter the following statement (which assumes that the objects are created in the schema of a user named TESTUSER):</p>
<pre dir="ltr">SELECT DISTINCT p
  FROM TABLE(SEM_MATCH(
    &#39;{?s ?p ?o}&#39;,
    SEM_Models(&#39;empdb_model&#39;),
    NULL,
    NULL,
    NULL));
 
P                                                                               
--------------------------------------------------------------------------------
http://empdb/TESTUSER.EMP#DEPTNO                                                
http://empdb/TESTUSER.DEPT#LOC                                                  
http://empdb/TESTUSER.EMP#JOB                                                   
http://empdb/TESTUSER.DEPT#DEPTNO                                               
http://empdb/TESTUSER.EMP#ENAME                                                 
http://www.w3.org/1999/02/22-rdf-syntax-ns#type                                 
http://empdb/TESTUSER.DEPT#DNAME                                                
http://empdb/TESTUSER.EMP#EMPNO                                                 
http://empdb/TESTUSER.EMP#ref-DEPTNO                                            
 
9 rows selected.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-3B0E1A9F-4BBA-4349-9E28-147135D2EEE2__CHDCIJDD">
<p class="titleinexample">Example 10-2 Using CONFORMANCE=T</p>
<p><a href="rdf-views.htm#GUID-3B0E1A9F-4BBA-4349-9E28-147135D2EEE2__CHDCIJDD">Example 10-2</a> is essentially the same as <a href="rdf-views.htm#GUID-3B0E1A9F-4BBA-4349-9E28-147135D2EEE2__CHDDEIBF">Example 10-1</a>, but it uses the <code class="codeph">CONFORMANCE=T</code> option (see the <code class="codeph">options</code> parameter description for <a href="sem-apis-ref.htm#GUID-756C5186-4552-46B4-A203-27395824523A">SEM_APIS.CREATE_RDFVIEW_MODEL</a>). Notice in the output that the schema name is not included in the list of properties; for example, the first output record in <a href="rdf-views.htm#GUID-3B0E1A9F-4BBA-4349-9E28-147135D2EEE2__CHDCIJDD">Example 10-2</a> is <code class="codeph">http://empdb/DEPT#LOC</code>, whereas its counterpart generated by <a href="rdf-views.htm#GUID-3B0E1A9F-4BBA-4349-9E28-147135D2EEE2__CHDDEIBF">Example 10-1</a> is <code class="codeph">http://empdb/TESTUSER.DEPT#LOC</code>.</p>
<pre dir="ltr">BEGIN
  sem_apis.create_rdfview_model(
    model_name =&gt; &#39;empdb_model&#39;,
    tables =&gt; SYS.ODCIVarchar2List(&#39;EMP&#39;, &#39;DEPT&#39;),
    prefix =&gt; &#39;http://empdb/&#39;,
    options =&gt; &#39;<span class="bold">CONFORMANCE=T</span>&#39;
  );
END;
/

SELECT DISTINCT p
  FROM TABLE(SEM_MATCH(
    &#39;{?s ?p ?o}&#39;,
    SEM_Models(&#39;empdb_model&#39;),
    NULL,
    NULL,
    NULL));
 
P                                                                               
--------------------------------------------------------------------------------
http://empdb/DEPT#LOC                                                           
http://empdb/EMP#ref-DEPTNO                                                     
http://empdb/EMP#ENAME                                                          
http://empdb/DEPT#DEPTNO                                                        
http://empdb/EMP#JOB                                                            
http://empdb/EMP#EMPNO                                                          
http://www.w3.org/1999/02/22-rdf-syntax-ns#type                                 
http://empdb/DEPT#DNAME                                                         
http://empdb/EMP#DEPTNO                                                         
 
9 rows selected.
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM609"></a><a id="RDFRM599"></a>
<div class="props_rev_3"><a id="GUID-1135136B-3064-4D16-B794-8A34653CF5B3"></a>
<h3 id="RDFRM-GUID-1135136B-3064-4D16-B794-8A34653CF5B3" class="sect3"><span class="enumeration_section">10.2.2</span> Creating an RDF View with an R2RML Mapping</h3>
<div>
<p>If you wanted to create an RDF view using the two tables EMP and DEPT, but with your own customizations, you could create an R2RML mapping document specified using Turtle, such as the following:</p>
<pre dir="ltr">@prefix rr: &lt;http://www.w3.org/ns/r2rml#&gt;.
@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt;.
@prefix ex: &lt;http://example.com/ns#&gt;.
 
ex:TriplesMap_Dept
    rr:logicalTable [ rr:tableName &#34;DEPT&#34; ];
    rr:subjectMap [
        rr:template &#34;http://data.example.com/department/{DEPTNO}&#34;;
        rr:class ex:Department;
    ];
    rr:predicateObjectMap [
        rr:predicate ex:deptNum;
        rr:objectMap [ rr:column &#34;DEPTNO&#34; ; rr:datatype xsd:integer ];
    ];
    rr:predicateObjectMap [
        rr:predicate ex:deptName;
        rr:objectMap [ rr:column &#34;DNAME&#34; ];
    ];
    rr:predicateObjectMap [
        rr:predicate ex:deptLocation;
        rr:objectMap [ rr:column &#34;LOC&#34; ];
    ].
 
ex:TriplesMap_Emp
    rr:logicalTable [ rr:tableName &#34;EMP&#34; ];
    rr:subjectMap [
        rr:template &#34;http://data.example.com/employee/{EMPNO}&#34;;
        rr:class ex:Employee;
    ];
    rr:predicateObjectMap [
        rr:predicate ex:empNum;
        rr:objectMap [ rr:column &#34;EMPNO&#34; ; rr:datatype xsd:integer ];
    ];
    rr:predicateObjectMap [
        rr:predicate ex:empName;
        rr:objectMap [ rr:column &#34;ENAME&#34; ];
    ];
    rr:predicateObjectMap [
        rr:predicate ex:jobType;
        rr:objectMap [ rr:column &#34;JOB&#34; ];
    ];
    rr:predicateObjectMap [
        rr:predicate ex:worksForDeptNum;
        rr:objectMap [ rr:column &#34;DEPTNO&#34; ; rr:dataType xsd:integer ];
    ];
    rr:predicateObjectMap [
        rr:predicate ex:worksForDept;
        rr:objectMap [ 
          rr:parentTriplesMap ex:TriplesMap_Dept ; 
          rr:joinCondition [ rr:child &#34;DEPTNO&#34;; rr:parent &#34;DEPTNO&#34; ]]].
</pre>
<p>Then, load your R2RML mapping (converted into N-Triples format) into a staging table, such as SCOTT.R2RTAB, and grant the <code class="codeph">SELECT</code> privilege for this table to MDSYS.</p>
<p>Next, call <a href="sem-apis-ref.htm#GUID-756C5186-4552-46B4-A203-27395824523A">SEM_APIS.CREATE_RDFVIEW_MODEL</a>, as in <a href="rdf-views.htm#GUID-1135136B-3064-4D16-B794-8A34653CF5B3__CHDJBDIF">Example 10-3</a>.</p>
<div class="example" id="GUID-1135136B-3064-4D16-B794-8A34653CF5B3__CHDJBDIF">
<p class="titleinexample">Example 10-3 Creating an RDF View with an R2RML Mapping</p>
<pre dir="ltr">BEGIN
  sem_apis.create_rdfview_model(
    model_name =&gt; &#39;empdb_model&#39;,
    tables =&gt; NULL,
    r2rml_table_owner =&gt; &#39;SCOTT&#39;,
    r2rml_table_name =&gt; &#39;R2RTAB&#39;
  );
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM611"></a><a id="RDFRM610"></a>
<div class="props_rev_3"><a id="GUID-0C4D3536-516B-432B-907D-EC0FAF764A04"></a>
<h3 id="RDFRM-GUID-0C4D3536-516B-432B-907D-EC0FAF764A04" class="sect3"><span class="enumeration_section">10.2.3</span> Dropping an RDF View</h3>
<div>
<p>An RDF view can be dropped using the <a href="sem-apis-ref.htm#GUID-5D878010-3BB4-4E42-9A6C-54B5D2CAFCF6">SEM_APIS.DROP_RDFVIEW_MODEL</a> procedure, as shown in <a href="rdf-views.htm#GUID-0C4D3536-516B-432B-907D-EC0FAF764A04__CHDDJIGE">Example 10-4</a>.</p>
<div class="example" id="GUID-0C4D3536-516B-432B-907D-EC0FAF764A04__CHDDJIGE">
<p class="titleinexample">Example 10-4 Dropping an RDF View</p>
<pre dir="ltr">BEGIN
  sem_apis.drop_rdfview_model(
    model_name =&gt; &#39;empdb_model&#39;
  );
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM656"></a><a id="RDFRM654"></a>
<div class="props_rev_3"><a id="GUID-3081B534-5C02-42EA-B497-645501B3EA7E"></a>
<h3 id="RDFRM-GUID-3081B534-5C02-42EA-B497-645501B3EA7E" class="sect3"><span class="enumeration_section">10.2.4</span> Exporting Virtual Content of an RDF View into a Staging Table</h3>
<div>
<p>The content of an RDF view is virtual; that is, the RDF triples corresponding to the underlying relational data, as mapped by direct mapping or R2RML mapping, are not materialized and stored anywhere. You may, however, want to materialize and store these virtual RDF triples in an RDF model for your testing purposes. The <a href="sem-apis-ref.htm#GUID-1FBBE7EF-EC33-4DB8-B393-A6CC545B7A8E">SEM_APIS.EXPORT_RDFVIEW_MODEL</a> subprogram lets you store the RDF triples of an RDF view in a staging table. The staging table can then be used for loading into an RDF model.</p>
<p><a href="rdf-views.htm#GUID-3081B534-5C02-42EA-B497-645501B3EA7E__CHDFJAGC">Example 10-5</a> materializes (in N-Triples format) the content of RDF view <code class="codeph">empdb_model</code> into the staging table SCOTT.RDFTAB.</p>
<div class="example" id="GUID-3081B534-5C02-42EA-B497-645501B3EA7E__CHDFJAGC">
<p class="titleinexample">Example 10-5 Exporting an RDF View</p>
<pre dir="ltr">BEGIN
  sem_apis.export_rdfview_model(
    model_name =&gt; &#39;empdb_model&#39;,
    rdf_table_owner =&gt; &#39;SCOTT&#39;,
    rdf_table_name =&gt; &#39;RDFTAB&#39;
  );
END;
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="RDFRM675"></a><a id="RDFRM735"></a><a id="RDFRM661"></a>
<div class="props_rev_3"><a id="GUID-CEFE07FA-FAAB-4FF0-B70C-0BDA20306F87"></a>
<h2 id="RDFRM-GUID-CEFE07FA-FAAB-4FF0-B70C-0BDA20306F87" class="sect2"><span class="enumeration_section">10.3</span> Example: Using an RDF View with Direct Mapping</h2>
<div>
<p><a href="rdf-views.htm#GUID-CEFE07FA-FAAB-4FF0-B70C-0BDA20306F87__CHDBJBJD">Example 10-6</a> shows a simple workflow using an RDF view with direct mapping. In it, you:</p>
<ol>
<li>
<p>Create two relational tables (EMP and DEPT).</p>
</li>
<li>
<p>Insert data into the tables.</p>
</li>
<li>
<p>Create an RDF view model (<code class="codeph">empdb_model</code>) using direct mapping of the two tables.</p>
</li>
<li>
<p>Query the RDF view using SPARQL in a SEM_MATCH-based SQL query.</p>
</li>
</ol>
<p><a href="rdf-views.htm#GUID-CEFE07FA-FAAB-4FF0-B70C-0BDA20306F87__CHDCDGGC">Example 10-7</a> shows the output of the statements in <a href="rdf-views.htm#GUID-CEFE07FA-FAAB-4FF0-B70C-0BDA20306F87__CHDBJBJD">Example 10-6</a>.</p>
<div class="example" id="GUID-CEFE07FA-FAAB-4FF0-B70C-0BDA20306F87__CHDBJBJD">
<p class="titleinexample">Example 10-6 Using an RDF View with Direct Mapping</p>
<pre dir="ltr">-- Use the following relational tables.
 
CREATE TABLE dept (
  deptno NUMBER CONSTRAINT pk_DeptTab_deptno PRIMARY KEY,
  dname VARCHAR2(30),
  loc VARCHAR2(30)
);
 
CREATE TABLE emp ( 
  empno NUMBER PRIMARY KEY,
  ename VARCHAR2(30),
  job VARCHAR2(20),
  deptno NUMBER REFERENCES dept (deptno)
);
 
-- Insert some data.
 
INSERT INTO dept (deptno, dname, loc)
  VALUES (1, &#39;Sales&#39;, &#39;Boston&#39;);
INSERT INTO dept (deptno, dname, loc)
  VALUES (2, &#39;Manufacturing&#39;, &#39;Chicago&#39;);
INSERT INTO dept (deptno, dname, loc)
  VALUES (3, &#39;Marketing&#39;, &#39;Boston&#39;);
 
INSERT INTO emp (empno, ename, job, deptno)
  VALUES (1, &#39;Alvarez&#39;, &#39;SalesRep&#39;, 1);
INSERT INTO emp (empno, ename, job, deptno)
  VALUES (2, &#39;Baxter&#39;, &#39;Supervisor&#39;, 2);
INSERT INTO emp (empno, ename, job, deptno)
  VALUES (3, &#39;Chen&#39;, &#39;Writer&#39;, 3);
INSERT INTO emp (empno, ename, job, deptno)
  VALUES (4, &#39;Davis&#39;, &#39;Technician&#39;, 2);
 
-- Create an RDF view model using direct mapping of two tables, EMP and DEPT, 
-- with a base prefix of http://empdb/.
-- Specify KEY_BASED_REF_PROPERTY=T for the options parameter.
 
BEGIN
  sem_apis.create_rdfview_model(
    model_name =&gt; &#39;empdb_model&#39;,
    tables =&gt; SYS.ODCIVarchar2List(&#39;EMP&#39;, &#39;DEPT&#39;),
    prefix =&gt; &#39;http://empdb/&#39;,
    options =&gt; &#39;KEY_BASED_REF_PROPERTY=T&#39;
  );
END;
/
 
-- Query an RDF view using SPARQL in a SEM_MATCH-based SQL query. 
-- The next statament is a query against an RDF view named empdb_model 
-- to find the employees who work for any department located in Boston.

SELECT emp
  FROM TABLE(SEM_MATCH(
  &#39;{?emp emp:ref-DEPTNO ?dept . ?dept dept:LOC &#34;Boston&#34;}&#39;,
  SEM_Models(&#39;empdb_model&#39;),
  NULL,
  SEM_ALIASES(
    SEM_ALIAS(&#39;dept&#39;,&#39;http://empdb/TESTUSER.DEPT#&#39;),
    SEM_ALIAS(&#39;emp&#39;,&#39;http://empdb/TESTUSER.EMP#&#39;)
  ),
  null));

-- The preceding query is functionally comparable to this:
SELECT e.empno FROM emp e, dept d WHERE e.deptno = d.deptno AND d.loc = &#39;Boston&#39;;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-CEFE07FA-FAAB-4FF0-B70C-0BDA20306F87__CHDCDGGC">
<p class="titleinexample">Example 10-7 Output of <span><a href="rdf-views.htm#GUID-CEFE07FA-FAAB-4FF0-B70C-0BDA20306F87__CHDBJBJD">Example 10-6</a></span></p>
<pre dir="ltr">SQL&gt; -- Use the following relational tables.
SQL&gt; 
SQL&gt; CREATE TABLE dept (
  2    deptno NUMBER CONSTRAINT pk_DeptTab_deptno PRIMARY KEY,
  3    dname VARCHAR2(30),
  4    loc VARCHAR2(30)
  5  );
 
Table created.
 
SQL&gt; 
SQL&gt; CREATE TABLE emp (
  2    empno NUMBER PRIMARY KEY,
  3    ename VARCHAR2(30),
  4    job VARCHAR2(20),
  5    deptno NUMBER REFERENCES dept (deptno)
  6  );
 
Table created.
 
SQL&gt; 
SQL&gt; -- Insert some data.
SQL&gt; 
SQL&gt; INSERT INTO dept (deptno, dname, loc)
  2    VALUES (1, &#39;Sales&#39;, &#39;Boston&#39;);
 
1 row created.
 
SQL&gt; INSERT INTO dept (deptno, dname, loc)
  2    VALUES (2, &#39;Manufacturing&#39;, &#39;Chicago&#39;);
 
1 row created.
 
SQL&gt; INSERT INTO dept (deptno, dname, loc)
  2    VALUES (3, &#39;Marketing&#39;, &#39;Boston&#39;);
 
1 row created.
 
SQL&gt; 
SQL&gt; INSERT INTO emp (empno, ename, job, deptno)
  2    VALUES (1, &#39;Alvarez&#39;, &#39;SalesRep&#39;, 1);
 
1 row created.
 
SQL&gt; INSERT INTO emp (empno, ename, job, deptno)
  2    VALUES (2, &#39;Baxter&#39;, &#39;Supervisor&#39;, 2);
 
1 row created.
 
SQL&gt; INSERT INTO emp (empno, ename, job, deptno)
  2    VALUES (3, &#39;Chen&#39;, &#39;Writer&#39;, 3);
 
1 row created.
 
SQL&gt; INSERT INTO emp (empno, ename, job, deptno)
  2    VALUES (4, &#39;Davis&#39;, &#39;Technician&#39;, 2);
 
1 row created.
 
SQL&gt; 
SQL&gt; -- Create an RDF view model using direct mapping of two tables, EMP and DEPT,
SQL&gt; -- with a base prefix of http://empdb/.
SQL&gt; -- Specify KEY_BASED_REF_PROPERTY=T for the options parameter.
SQL&gt; 
SQL&gt; BEGIN
  2    sem_apis.create_rdfview_model(
  3      model_name =&gt; &#39;empdb_model&#39;,
  4      tables =&gt; SYS.ODCIVarchar2List(&#39;EMP&#39;, &#39;DEPT&#39;),
  5      prefix =&gt; &#39;http://empdb/&#39;,
  6      options =&gt; &#39;KEY_BASED_REF_PROPERTY=T&#39;
  7    );
  8  END;
  9  /
 
PL/SQL procedure successfully completed.
 
SQL&gt; 
SQL&gt; -- Query an RDF view using SPARQL in a SEM_MATCH-based SQL query.
SQL&gt; -- The next statament is a query against an RDF view named empdb_model
SQL&gt; -- to find the employees who work for any department located in Boston.
SQL&gt; 
SQL&gt; SELECT emp
  2    FROM TABLE(SEM_MATCH(
  3      &#39;{?emp emp:ref-DEPTNO ?dept . ?dept dept:LOC &#34;Boston&#34;}&#39;,
  4      SEM_Models(&#39;empdb_model&#39;),
  5      NULL,
  6      SEM_ALIASES(
  7        SEM_ALIAS(&#39;dept&#39;,&#39;http://empdb/TESTUSER.DEPT#&#39;),
  8        SEM_ALIAS(&#39;emp&#39;,&#39;http://empdb/TESTUSER.EMP#&#39;)
  9      ),
 10      null));
 
EMP                                                                             
--------------------------------------------------------------------------------
http://empdb/TESTUSER.EMP/EMPNO=1                                               
http://empdb/TESTUSER.EMP/EMPNO=3                                               
 
SQL&gt; 
SQL&gt; -- The preceding query is functionally comparable to this:
SQL&gt; SELECT e.empno FROM emp e, dept d WHERE e.deptno = d.deptno AND d.loc = &#39;Boston&#39;;
 
     EMPNO                                                                      
----------                                                                      
         1                                                                      
         3  
</pre></div>
<!-- class="example" --></div>
</div>
<a id="RDFRM789"></a><a id="RDFRM790"></a><a id="RDFRM788"></a>
<div class="props_rev_3"><a id="GUID-7EE22B1F-D5C1-4F0F-85B9-CAB4BB815819"></a>
<h2 id="RDFRM-GUID-7EE22B1F-D5C1-4F0F-85B9-CAB4BB815819" class="sect2"><span class="enumeration_section">10.4</span> Combining Native RDF Data with Virtual RDB2RDF Data</h2>
<div>
<p>You can combine native triple data with virtual RDB2RDF triple data in a single SEM_MATCH query by means of the SERVICE keyword (explained in <a href="rdf-overview.htm#GUID-6ACF73EA-A1A7-49D2-ADB9-15B50AE8B73E">Graph Patterns: Support for SPARQL 1.1 Federated Query</a>). The SERVICE keyword is overloaded through the use of special SERVICE URLs that signify local (virtual) RDF data. The following prefixes are used to denote special SERVICE URLs:</p>
<ul style="list-style-type: disc;">
<li>
<p>Native models - <code class="codeph">oram</code>: &lt;http://xmlns.oracle.com/models/&gt;</p>
</li>
<li>
<p>Native virtual models - <code class="codeph">oravm</code>: &lt;http://xmlns.oracle.com/virtual_models/&gt;</p>
</li>
<li>
<p>RDB2RDF models - <code class="codeph">orardbm</code>: &lt;http://xmlns.oracle.com/rdb_models/&gt;</p>
</li>
</ul>
<div class="example" id="GUID-7EE22B1F-D5C1-4F0F-85B9-CAB4BB815819__CHDCJICJ">
<p class="titleinexample">Example 10-8 Querying Multiple Data Sets</p>
<p><a href="rdf-views.htm#GUID-7EE22B1F-D5C1-4F0F-85B9-CAB4BB815819__CHDCJICJ">Example 10-8</a> queries multiple data sets. In this query, the first triple pattern <code class="codeph">{ ?x rdf:type :Person }</code> will go against native model <code class="codeph">m1</code> as usual, but <code class="codeph">{ ?x :name ?name }</code> will go against the local native model <code class="codeph">m2</code>, and { <code class="codeph">?x :email ?email }</code> will go against the local RDB2RDF model <code class="codeph">rdfview1</code>.</p>
<pre dir="ltr">select * from table (sem_match(
&#39;SELECT ?x ?name ?email
 WHERE {
  ?x rdf:type :Person .
  OPTIONAL { SERVICE oram:m2 { ?x :name ?name } }
  OPTIONAL { SERVICE orardbm:rdfview1 { ?x :email ?email } }
}&#39;
sem_models(&#39;m1&#39;), null, null, null, null, &#39; &#39;));
</pre>
<p>Overloaded SERVICE use is only allowed with a single model specified in the <code class="codeph">models</code> argument of SEM_MATCH. Overloaded SERVICE queries do not allow multiple models or a rulebase as input. A virtual model that contains multiple models and/or entailments should be used instead for such combinations. In addition, the <code class="codeph">index_status</code> argument for SEM_MATCH will only check the entailment contained in the virtual model passed as input in the models parameter. This means the status of entailments that are referenced in overloaded SERVICE calls will not be checked.</p>
</div>
<!-- class="example" -->
<div class="example" id="GUID-7EE22B1F-D5C1-4F0F-85B9-CAB4BB815819__CHDJEIJH">
<p class="titleinexample">Example 10-9 Querying Virtual RDB2RDF Data and Native RDF Data</p>
<p><a href="rdf-views.htm#GUID-7EE22B1F-D5C1-4F0F-85B9-CAB4BB815819__CHDJEIJH">Example 10-9</a> queries two data sets: the <code class="codeph">empdb_model</code> from <a href="rdf-views.htm#GUID-CEFE07FA-FAAB-4FF0-B70C-0BDA20306F87__CHDBJBJD">Example 10-6</a> and a native model named <code class="codeph">people</code>.</p>
<pre dir="ltr">-- Create native model people --
create table atab (gval varchar2(4000), tri sdo_rdf_triple_s);
 
execute sem_apis.create_sem_model(&#39;people&#39;,&#39;atab&#39;,&#39;tri&#39;);
 
create table stab(RDF$STC_GRAPH varchar2(4000), RDF$STC_sub varchar2(4000),
                  RDF$STC_pred varchar2(4000), RDF$STC_obj varchar2(4000));
grant select on stab to mdsys;
grant insert on atab to mdsys;
 
insert into stab values (null, &#39;&lt;http://empdb/TESTUSER.EMP/EMPNO=1&gt;&#39;, &#39;&lt;http://people.org/age&gt;&#39;, &#39;&#34;35&#34;^^&lt;http://www.w3.org/2001/XMLSchema#int&gt;&#39;);
insert into stab values (null, &#39;&lt;http://empdb/TESTUSER.EMP/EMPNO=2&gt;&#39;, &#39;&lt;http://people.org/age&gt;&#39;, &#39;&#34;39&#34;^^&lt;http://www.w3.org/2001/XMLSchema#int&gt;&#39;);
insert into stab values (null, &#39;&lt;http://empdb/TESTUSER.EMP/EMPNO=3&gt;&#39;, &#39;&lt;http://people.org/age&gt;&#39;, &#39;&#34;30&#34;^^&lt;http://www.w3.org/2001/XMLSchema#int&gt;&#39;);
insert into stab values (null, &#39;&lt;http://empdb/TESTUSER.EMP/EMPNO=4&gt;&#39;, &#39;&lt;http://people.org/age&gt;&#39;, &#39;&#34;42&#34;^^&lt;http://www.w3.org/2001/XMLSchema#int&gt;&#39;);
commit;
 
exec sem_apis.bulk_load_from_staging_table(&#39;people&#39;,&#39;testuser&#39;,&#39;stab&#39;);
 
-- Querying multiple datasets --
SELECT emp, age
  FROM TABLE(SEM_MATCH(
    &#39;SELECT ?emp ?age WHERE{
       ?emp peop:age ?age
       SERVICE orardbm:empdb_model { ?emp emp:ref-DEPTNO ?dept . ?dept dept:LOC &#34;Boston&#34; }
    }&#39;,
    SEM_Models(&#39;people&#39;),
    NULL,
    SEM_ALIASES(
          SEM_ALIAS(&#39;dept&#39;,&#39;http://empdb/TESTUSER.DEPT#&#39;),
          SEM_ALIAS(&#39;emp&#39;,&#39;http://empdb/TESTUSER.EMP#&#39;),
          SEM_ALIAS(&#39;peop&#39;,&#39;http://people.org/&#39;)
        ),
    NULL));
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment4500">
<tr>
<td class="cellalignment4507">
<table class="cellalignment4505">
<tr>
<td class="cellalignment4504"><a href="user-defined-inf.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment4504"><a href="part-ref-supp.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2005, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4509">
<table class="cellalignment4503">
<tr>
<td class="cellalignment4504"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment4504"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment4504"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment4504"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment4504"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment4504"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>