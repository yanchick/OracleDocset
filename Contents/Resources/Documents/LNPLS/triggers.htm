<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-78356"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/PL%2FSQL%20Triggers"></a><title>PL/SQL Triggers</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="description" content="A trigger is like a stored procedure that Oracle Database invokes automatically whenever a specified event occurs."/>
<meta name="keywords" content="trigger, crossedition trigger, conditional trigger, SQL statement, in trigger, INSTEAD OF trigger, as security mechanism, security mechanism, trigger as, constraint, trigger compared to, DML trigger, simple DML trigger, timing point, of DML trigger, simple, statement-level trigger, row-level trigger, conditional predicate, INSERTING conditional predicate, UPDATING conditional predicate, DELETING conditional predicate, on DML statement, on nested table column, nested table, column in view, trigger on, compound trigger, compound, bulk SQL, in compound DML trigger, SQL, bulk, correlation name, OLD correlation name, NEW correlation name, PARENT correlation name, correlation names and, pseudorecord, placeholder for bind variable, in trigger body, pseudocolumn, OBJECT_VALUE, OBJECT_VALUE pseudocolumn, system trigger, of system trigger, SCHEMA trigger, DR unit, SCHEMA trigger and, DATABASE trigger, for CREATE statement, subprogram, invoked by trigger, TCL statement, in subprogram invoked by trigger, remote subprogram, exception, handling, remote exception handling, triggers and, UPDATE statement, BEFORE statement trigger and, DELETE statement, ROLLBACK statement, transparent, recursive trigger, recursive, LONG data type, LONG RAW data type, with LONG or LONG RAW column, mutating table, table, mutating, mutating-table error, for trigger, trigger firing order and, cascading triggers, cascading, SQL*Loader and triggers, Data Pump Import and triggers, Import and triggers, Original Import and triggers, imp and triggers, events publication, publishing events"/>
<meta name="dcterms.created" content="2017-05-09T17:03:42Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database PL/SQL Language Reference"/>
<meta name="dcterms.identifier" content="E50727-06"/>
<meta name="dcterms.isVersionOf" content="LNPLS"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="subprograms.htm" title="Previous" type="text/html"/>
<link rel="Next" href="packages.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E50727-06.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-217E8B13-29EF-45F3-8D0F-2384F9F1D231"></a> <span id="PAGE" style="display:none;">16/100</span> <!-- End Header -->
<script>
//<![CDATA[
window.name='triggers'
//]]>
</script> <script>
    function footdisplay(footnum,footnote) {
    var msg = window.open('about:blank', 'NewWindow' + footnum,
        'directories=no,height=100,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');
    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">'); 
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en-us" ><head><title>');
   
    msg.document.write('Footnote&amp;nbsp; ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><div id="footnote"><h1>Footnote&nbsp; ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/div><\/body><\/html>');
    msg.document.close();
    setTimeout(function() {
        var height = msg.document.getElementById('footnote').offsetHeight;
        msg.resizeTo(598, height + 100);
    }
    , 100);
    msg.focus();
}
</script><noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript>
<h1 id="LNPLS-GUID-217E8B13-29EF-45F3-8D0F-2384F9F1D231" class="sect1"><span class="enumeration_chapter">9</span> PL/SQL Triggers</h1>
<div>
<p>A trigger is like a stored procedure that Oracle Database invokes automatically whenever a specified event occurs.</p>
<div class="infobox-note" id="GUID-217E8B13-29EF-45F3-8D0F-2384F9F1D231__GUID-17AE2955-1CC1-4C51-BE2A-3FBA1A67CF51">
<p class="notep1">Note:</p>
<p>The database can detect only system-defined events. You cannot define your own events.</p>
</div>
<div class="section">
<p class="subhead1">Topics</p>
</div>
<!-- class="section" -->
<ul style="list-style-type: disc;">
<li>
<p><a href="triggers.htm#GUID-3CD2CC67-5AC2-4DD5-B7D3-12E5FAE082C9" title="Like a stored procedure, a trigger is a named PL/SQL unit that is stored in the database and can be invoked repeatedly. Unlike a stored procedure, you can enable and disable a trigger, but you cannot explicitly invoke it.">Overview of Triggers</a></p>
</li>
<li>
<p><a href="triggers.htm#GUID-C08EA160-8FD2-4A10-9733-6F2D20C83E93" title="Triggers let you customize your database management system.">Reasons to Use Triggers</a></p>
</li>
<li>
<p><a href="triggers.htm#GUID-E76C8044-6942-4573-B7DB-3502FB96CF6F" title="A DML trigger is created on either a table or view, and its triggering event is composed of the DML statements DELETE, INSERT, and UPDATE.">DML Triggers</a></p>
</li>
<li>
<p><a href="triggers.htm#GUID-4CF74E99-8859-4AB1-96E7-07898A2ABB9E">Correlation Names and Pseudorecords</a></p>
</li>
<li>
<p><a href="triggers.htm#GUID-FE23FCE8-DE36-41EF-80A9-6B4B49E80E5B">System Triggers</a></p>
</li>
<li>
<p><a href="triggers.htm#GUID-E11CFB2F-064F-42EB-8390-F025564AD107">Subprograms Invoked by Triggers</a></p>
</li>
<li>
<p><a href="triggers.htm#GUID-39111AAC-597E-4661-82A6-F3BE621F75BB">Trigger Compilation, Invalidation, and Recompilation</a></p>
</li>
<li>
<p><a href="triggers.htm#GUID-FA7A16B6-F94D-4E4C-A326-F602FE9FE3E8">Exception Handling in Triggers</a></p>
</li>
<li>
<p><a href="triggers.htm#GUID-78B64011-B288-4EDD-B595-2DDBB3835ACA">Trigger Design Guidelines</a></p>
</li>
<li>
<p><a href="triggers.htm#GUID-5B3A43E2-B9E1-4015-9A6C-0BE696853F3F">Trigger Restrictions</a></p>
</li>
<li>
<p><a href="triggers.htm#GUID-2585112C-C48F-40ED-B825-21DF975EA126">Order in Which Triggers Fire</a></p>
</li>
<li>
<p><a href="triggers.htm#GUID-6CD799AB-FAEF-493A-8A58-2394E400072C" title="By default, the CREATE TRIGGER statement creates a trigger in the enabled state. To create a trigger in the disabled state, specify DISABLE. Creating a trigger in the disabled state lets you ensure that it compiles without errors before you enable it.">Trigger Enabling and Disabling</a></p>
</li>
<li>
<p><a href="triggers.htm#GUID-4F200DEC-9B4B-4DCC-A86D-1DB2E281A43C">Trigger Changing and Debugging</a></p>
</li>
<li>
<p><a href="triggers.htm#GUID-F1103CD4-A84F-4440-9250-872212BDC5A9">Triggers and Oracle Database Data Transfer Utilities</a></p>
</li>
<li>
<p><a href="triggers.htm#GUID-2951D8A6-6C80-428F-840D-13A76A97E365">Triggers for Publishing Events</a></p>
</li>
<li>
<p><a href="triggers.htm#GUID-F843EE28-6D46-4AA2-B3B3-7CB5485B96CE">Views for Information About Triggers</a></p>
</li>
</ul>
</div>
<a id="LNPLS2001"></a>
<div class="props_rev_3"><a id="GUID-3CD2CC67-5AC2-4DD5-B7D3-12E5FAE082C9"></a>
<h2 id="LNPLS-GUID-3CD2CC67-5AC2-4DD5-B7D3-12E5FAE082C9" class="sect2">Overview of Triggers</h2>
<div>
<p>Like a stored procedure, a trigger is a named PL/SQL unit that is stored in the database and can be invoked repeatedly. Unlike a stored procedure, you can enable and disable a trigger, but you cannot explicitly invoke it.</p>
<p>While a trigger is <span class="bold">enabled</span>, the database automatically invokes it&mdash;that is, the trigger <span class="bold">fires</span>&mdash;whenever its triggering event occurs. While a trigger is <span class="bold">disabled</span>, it does not fire.</p>
<p>You create a trigger with the <code class="codeph">CREATE</code> <code class="codeph">TRIGGER</code> statement. You specify the <span class="bold">triggering event</span> in terms of <span class="bold">triggering statements</span> and the item on which they act. The trigger is said to be <span class="bold">created on</span> or <span class="bold">defined on</span> the item, which is either a table, a view, a schema, or the database. You also specify the <span class="bold">timing point</span>, which determines whether the trigger fires before or after the triggering statement runs and whether it fires for each row that the triggering statement affects. By default, a trigger is created in the enabled state.</p>
<p>If the trigger is created on a table or view, then the triggering event is composed of DML statements, and the trigger is called a <span class="bold">DML trigger</span>.</p>
<p>A <span class="bold">crossedition trigger</span> is a DML trigger for use only in edition-based redefinition.</p>
<p>If the trigger is created on a schema or the database, then the triggering event is composed of either DDL or database operation statements, and the trigger is called a <span class="bold">system trigger</span>.</p>
<p>A <span class="bold">conditional trigger</span> is a DML or system trigger that has a <code class="codeph">WHEN</code> clause that specifies a SQL condition that the database evaluates for each row that the triggering statement affects.</p>
<p>When a trigger fires, tables that the trigger references might be undergoing changes made by SQL statements in other users&#39; transactions. SQL statements running in triggers follow the same rules that standalone SQL statements do. Specifically:</p>
<ul style="list-style-type: disc;">
<li>
<p>Queries in the trigger see the current read-consistent materialized view of referenced tables and any data changed in the same transaction.</p>
</li>
<li>
<p>Updates in the trigger wait for existing data locks to be released before proceeding.</p>
</li>
</ul>
<p>An <span class="bold"><code class="codeph">INSTEAD</code></span> <span class="bold"><code class="codeph">OF</code></span> <span class="bold">trigger</span> is either:</p>
<ul style="list-style-type: disc;">
<li>
<p>A DML trigger created on either a noneditioning view or a nested table column of a noneditioning view</p>
</li>
<li>
<p>A system trigger defined on a <code class="codeph">CREATE</code> statement</p>
</li>
</ul>
<p>The database fires the <code class="codeph">INSTEAD</code> <code class="codeph">OF</code> trigger instead of running the triggering statement.</p>
<div class="infobox-note" id="GUID-3CD2CC67-5AC2-4DD5-B7D3-12E5FAE082C9__GUID-6B773E51-CA6D-4249-B7F8-19F68A563B14">
<p class="notep1">Note:</p>
<p>A trigger is often called by the name of its triggering statement (for example, <span class="italic"><code class="codeph">DELETE</code></span> <span class="italic">trigger</span> or <span class="italic"><code class="codeph">LOGON</code></span> <span class="italic">trigger</span>), the name of the item on which it is defined (for example, <span class="italic"><code class="codeph">DATABASE</code></span> <span class="italic">trigger</span> or <span class="italic"><code class="codeph">SCHEMA</code></span> <span class="italic">trigger</span>), or its timing point (for example, <span class="italic"><code class="codeph">BEFORE</code></span> <span class="italic">statement trigger</span> or <span class="italic"><code class="codeph">AFTER</code></span> <span class="italic">each row trigger</span>).</p>
</div>
<div class="section">
<div class="infoboxnotealso" id="GUID-3CD2CC67-5AC2-4DD5-B7D3-12E5FAE082C9__GUID-200E3209-7097-4A76-B893-7A5BC39B4066">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="create_trigger.htm#GUID-AF9E33F1-64D1-4382-A6A4-EC33C36F237B">CREATE TRIGGER Statement</a>&#34;</span> syntax diagram</p>
</li>
<li>
<p><span class="q">&#34;<a href="triggers.htm#GUID-E76C8044-6942-4573-B7DB-3502FB96CF6F" title="A DML trigger is created on either a table or view, and its triggering event is composed of the DML statements DELETE, INSERT, and UPDATE.">DML Triggers</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="triggers.htm#GUID-FE23FCE8-DE36-41EF-80A9-6B4B49E80E5B">System Triggers</a>&#34;</span></p>
</li>
<li>
<p><a class="olink ADFNS0203" target="_blank" href="../ADFNS/adfns_editions.htm#ADFNS0203"><span class="italic">Oracle Database Development Guide</span></a> for information about crossedition triggers</p>
</li>
<li>
<p><span class="q">&#34;<a href="create_trigger.htm#GUID-AF9E33F1-64D1-4382-A6A4-EC33C36F237B">CREATE TRIGGER Statement</a>&#34;</span> for information about the <code class="codeph">WHEN</code> clause</p>
</li>
</ul>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="LNPLS769"></a><a id="LNPLS723"></a>
<div class="props_rev_3"><a id="GUID-C08EA160-8FD2-4A10-9733-6F2D20C83E93"></a>
<h2 id="LNPLS-GUID-C08EA160-8FD2-4A10-9733-6F2D20C83E93" class="sect2">Reasons to Use Triggers</h2>
<div>
<p>Triggers let you customize your database management system.</p>
<p>For example, you can use triggers to:</p>
<ul style="list-style-type: disc;">
<li>
<p>Automatically generate virtual column values</p>
</li>
<li>
<p>Log events</p>
</li>
<li>
<p>Gather statistics on table access</p>
</li>
<li>
<p>Modify table data when DML statements are issued against views</p>
</li>
<li>
<p>Enforce referential integrity when child and parent tables are on different nodes of a distributed database</p>
</li>
<li>
<p>Publish information about database events, user events, and SQL statements to subscribing applications</p>
</li>
<li>
<p>Prevent DML operations on a table after regular business hours</p>
</li>
<li>
<p>Prevent invalid transactions</p>
</li>
<li>
<p>Enforce complex business or referential integrity rules that you cannot define with constraints (see <span class="q">&#34;<a href="triggers.htm#GUID-C08EA160-8FD2-4A10-9733-6F2D20C83E93__CIHCEBAE">How Triggers and Constraints Differ</a>&#34;</span>)</p>
</li>
</ul>
<div class="infobox-note" id="GUID-C08EA160-8FD2-4A10-9733-6F2D20C83E93__GUID-14BEA9EA-2AC7-42AF-8F7E-52D7B4A02E22">
<p class="notep1">Caution:</p>
<p>Triggers are not reliable security mechanisms, because they are programmatic and easy to disable. For high-assurance security, use Oracle Database Vault, described in <a class="olink DVADM" target="_blank" href="../DVADM/toc.htm"><span class="italic">Oracle Database Vault Administrator&#39;s Guide</span></a>.</p>
</div>
<div class="section" id="GUID-C08EA160-8FD2-4A10-9733-6F2D20C83E93__CIHCEBAE">
<p class="subhead2">How Triggers and Constraints Differ</p>
</div>
<!-- class="section" -->
<div class="section">
<p>Both triggers and constraints can constrain data input, but they differ significantly.</p>
<p>A trigger always applies to new data only. For example, a trigger can prevent a DML statement from inserting a <code class="codeph">NULL</code> value into a database column, but the column might contain <code class="codeph">NULL</code> values that were inserted into the column before the trigger was defined or while the trigger was disabled.</p>
<p>A constraint can apply either to new data only (like a trigger) or to both new and existing data. Constraint behavior depends on constraint state, as explained in <a class="olink SQLRF52214" target="_blank" href="../SQLRF/clauses002.htm#SQLRF52214"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<p>Constraints are easier to write and less error-prone than triggers that enforce the same rules. However, triggers can enforce some complex business rules that constraints cannot. Oracle strongly recommends that you use triggers to constrain data input only in these situations:</p>
<ul style="list-style-type: disc;">
<li>
<p>To enforce referential integrity when child and parent tables are on different nodes of a distributed database</p>
</li>
<li>
<p>To enforce complex business or referential integrity rules that you cannot define with constraints</p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-C08EA160-8FD2-4A10-9733-6F2D20C83E93__GUID-764F7673-B701-48A6-B1A3-53FA34731726">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a class="olink ADFNS004" target="_blank" href="../ADFNS/adfns_constraints.htm#ADFNS004"><span class="italic">Oracle Database Development Guide</span></a> for information about using constraints to enforce business rules and prevent the entry of invalid information into tables</p>
</li>
<li>
<p><span class="q">&#34;<a href="triggers.htm#GUID-AD8188E5-546E-46EB-A000-7EB9D17C3D0C">Triggers for Ensuring Referential Integrity</a>&#34;</span> for information about using triggers and constraints to maintain referential integrity between parent and child tables</p>
</li>
</ul>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="LNPLS609"></a><a id="LNPLS99888"></a>
<div class="props_rev_3"><a id="GUID-E76C8044-6942-4573-B7DB-3502FB96CF6F"></a>
<h2 id="LNPLS-GUID-E76C8044-6942-4573-B7DB-3502FB96CF6F" class="sect2">DML Triggers</h2>
<div>
<p>A <span class="bold">DML trigger</span> is created on either a table or view, and its triggering event is composed of the DML statements <code class="codeph">DELETE</code>, <code class="codeph">INSERT</code>, and <code class="codeph">UPDATE</code>.</p>
<p>To create a trigger that fires in response to a <code class="codeph">MERGE</code> statement, create triggers on the <code class="codeph">INSERT</code> and <code class="codeph">UPDATE</code> statements to which the <code class="codeph">MERGE</code> operation decomposes.</p>
<p>A DML trigger is either simple or compound.</p>
<p>A <span class="bold">simple DML trigger</span> fires at exactly one of these timing points:</p>
<ul style="list-style-type: disc;">
<li>
<p>Before the triggering statement runs</p>
<p>(The trigger is called a <span class="italic"><code class="codeph">BEFORE</code></span> <span class="italic">statement trigger</span> or <span class="italic">statement-level</span> <span class="italic"><code class="codeph">BEFORE</code></span> <span class="italic">trigger.</span>)</p>
</li>
<li>
<p>After the triggering statement runs</p>
<p>(The trigger is called an <span class="italic"><code class="codeph">AFTER</code></span> <span class="italic">statement trigger</span> or <span class="italic">statement-level</span> <span class="italic"><code class="codeph">AFTER</code></span> <span class="italic">trigger.</span>)</p>
</li>
<li>
<p>Before each row that the triggering statement affects</p>
<p>(The trigger is called a <span class="italic"><code class="codeph">BEFORE</code></span> <span class="italic">each row trigger</span> or <span class="italic">row-level</span> <span class="italic"><code class="codeph">BEFORE</code></span> <span class="italic">trigger.</span>)</p>
</li>
<li>
<p>After each row that the triggering statement affects</p>
<p>(The trigger is called an <span class="italic"><code class="codeph">AFTER</code></span> <span class="italic">each row trigger</span> or <span class="italic">row-level</span> <span class="italic"><code class="codeph">AFTER</code></span> <span class="italic">trigger.</span>)</p>
</li>
</ul>
<p>A <span class="bold">compound DML trigger</span> created on a table or editioning view can fire at one, some, or all of the preceding timing points. Compound DML triggers help program an approach where you want the actions that you implement for the various timing points to share common data.</p>
<p>A simple or compound DML trigger that fires at row level can access the data in the row that it is processing. For details, see <span class="q">&#34;<a href="triggers.htm#GUID-4CF74E99-8859-4AB1-96E7-07898A2ABB9E">Correlation Names and Pseudorecords</a>&#34;</span>.</p>
<p>An <span class="bold"><code class="codeph">INSTEAD</code></span> <span class="bold"><code class="codeph">OF</code></span> <span class="bold">DML</span> <span class="bold">trigger</span> is a DML trigger created on either a noneditioning view or a nested table column of a noneditioning view.</p>
<p>Except in an <code class="codeph">INSTEAD</code> <code class="codeph">OF</code> trigger, a triggering <code class="codeph">UPDATE</code> statement can include a column list. With a column list, the trigger fires only when a specified column is updated. Without a column list, the trigger fires when any column of the associated table is updated.</p>
<div class="section">
<p class="subhead2">Topics</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="triggers.htm#GUID-EC6A8FA1-9E60-4374-9905-639F4F100D83" title="The triggering event of a DML trigger can be composed of multiple triggering statements. When one of them fires the trigger, the trigger can determine which one by using these conditional predicates.">Conditional Predicates for Detecting Triggering DML Statement</a></p>
</li>
<li>
<p><a href="triggers.htm#GUID-9F06D45C-7C60-434E-A597-114A0C445671" title="An INSTEAD OF DML trigger is a DML trigger created on a noneditioning view, or on a nested table column of a noneditioning view. The database fires the INSTEAD OF trigger instead of running the triggering DML statement.">INSTEAD OF DML Triggers</a></p>
</li>
<li>
<p><a href="triggers.htm#GUID-8A0DA171-BE6A-4798-A1A4-677B88EA16A0">Compound DML Triggers</a></p>
</li>
<li>
<p><a href="triggers.htm#GUID-AD8188E5-546E-46EB-A000-7EB9D17C3D0C">Triggers for Ensuring Referential Integrity</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="LNPLS614"></a><a id="LNPLS750"></a>
<div class="props_rev_3"><a id="GUID-EC6A8FA1-9E60-4374-9905-639F4F100D83"></a>
<h3 id="LNPLS-GUID-EC6A8FA1-9E60-4374-9905-639F4F100D83" class="sect3">Conditional Predicates for Detecting Triggering DML Statement</h3>
<div>
<p>The triggering event of a DML trigger can be composed of multiple triggering statements. When one of them fires the trigger, the trigger can determine which one by using these <span class="bold">conditional predicates</span>.</p>
<div class="tblformal" id="GUID-EC6A8FA1-9E60-4374-9905-639F4F100D83__GUID-BAAE1E2E-72BD-4761-8CED-884BAAF3D08C">
<p class="titleintable">Table 9-1 Conditional Predicates</p>
<table class="cellalignment876" title="Conditional Predicates" summary="This table has two columns. The left column lists the conditional predicates. The right column gives the condition under which each conditional predicate is true.">
<thead>
<tr class="cellalignment870">
<th class="cellalignment901" id="d65654e934">Conditional Predicate</th>
<th class="cellalignment933" id="d65654e937">TRUE if and only if:</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment870">
<td class="cellalignment904" id="d65654e942" headers="d65654e934">
<p><code class="codeph">INSERTING</code></p>
</td>
<td class="cellalignment934" headers="d65654e942 d65654e937">
<p>An <code class="codeph">INSERT</code> statement fired the trigger.</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment904" id="d65654e953" headers="d65654e934">
<p><code class="codeph">UPDATING</code></p>
</td>
<td class="cellalignment934" headers="d65654e953 d65654e937">
<p>An <code class="codeph">UPDATE</code> statement fired the trigger.</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment904" id="d65654e964" headers="d65654e934">
<p><code class="codeph">UPDATING (&#39;</code><span class="italic"><code class="codeph">column</code></span><code class="codeph">&#39;)</code></p>
</td>
<td class="cellalignment934" headers="d65654e964 d65654e937">
<p>An <code class="codeph">UPDATE</code> statement that affected the specified column fired the trigger.</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment904" id="d65654e980" headers="d65654e934">
<p><code class="codeph">DELETING</code></p>
</td>
<td class="cellalignment934" headers="d65654e980 d65654e937">
<p>A <code class="codeph">DELETE</code> statement fired the trigger.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>A conditional predicate can appear wherever a <code class="codeph">BOOLEAN</code> expression can appear.</p>
<div class="example" id="GUID-EC6A8FA1-9E60-4374-9905-639F4F100D83__CIHBCDJH">
<p class="titleinexample">Example 9-1 Trigger Uses Conditional Predicates to Detect Triggering Statement</p>
<p>This example creates a DML trigger that uses conditional predicates to determine which of its four possible triggering statements fired it.</p>
<pre dir="ltr">CREATE OR REPLACE TRIGGER t
  BEFORE
    <span class="bold">INSERT OR</span>
    <span class="bold">UPDATE OF salary, department_id OR</span>
    <span class="bold">DELETE</span>
  ON employees
BEGIN
  CASE
    WHEN <span class="bold">INSERTING</span> THEN
      DBMS_OUTPUT.PUT_LINE(&#39;Inserting&#39;);
    WHEN <span class="bold">UPDATING(&#39;salary&#39;)</span> THEN
      DBMS_OUTPUT.PUT_LINE(&#39;Updating salary&#39;);
    WHEN <span class="bold">UPDATING(&#39;department_id&#39;)</span> THEN
      DBMS_OUTPUT.PUT_LINE(&#39;Updating department ID&#39;);
    WHEN <span class="bold">DELETING</span> THEN
      DBMS_OUTPUT.PUT_LINE(&#39;Deleting&#39;);
  END CASE;
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS731"></a><a id="LNPLS615"></a><a id="LNPLS627"></a><a id="LNPLS20041"></a>
<div class="props_rev_3"><a id="GUID-9F06D45C-7C60-434E-A597-114A0C445671"></a>
<h3 id="LNPLS-GUID-9F06D45C-7C60-434E-A597-114A0C445671" class="sect3">INSTEAD OF DML Triggers</h3>
<div>
<p>An <code class="codeph">INSTEAD</code> <code class="codeph">OF</code> <code class="codeph">DML</code> <span class="bold">trigger</span> is a DML trigger created on a noneditioning view, or on a nested table column of a noneditioning view. The database fires the <code class="codeph">INSTEAD</code> <code class="codeph">OF</code> trigger instead of running the triggering DML statement.</p>
<p>An <code class="codeph">INSTEAD</code> <code class="codeph">OF</code> trigger cannot be conditional.</p>
<p>An <code class="codeph">INSTEAD</code> <code class="codeph">OF</code> trigger is the only way to update a view that is not inherently updatable. Design the <code class="codeph">INSTEAD</code> <code class="codeph">OF</code> trigger to determine what operation was intended and do the appropriate DML operations on the underlying tables.</p>
<p>An <code class="codeph">INSTEAD</code> <code class="codeph">OF</code> trigger is always a row-level trigger. An <code class="codeph">INSTEAD</code> <code class="codeph">OF</code> trigger can read <code class="codeph">OLD</code> and <code class="codeph">NEW</code> values, but cannot change them.</p>
<p>An <code class="codeph">INSTEAD</code> <code class="codeph">OF</code> trigger with the <code class="codeph">NESTED</code> <code class="codeph">TABLE</code> clause fires only if the triggering statement operates on the elements of the specified nested table column of the view. The trigger fires for each modified nested table element.</p>
<div class="infoboxnotealso" id="GUID-9F06D45C-7C60-434E-A597-114A0C445671__GUID-BC972027-60C4-4C46-82EF-2CFE6D9AD835">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a class="olink SQLRF54782" target="_blank" href="../SQLRF/statements_8004.htm#SQLRF54782"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about inherently updatable views</p>
</li>
<li>
<p><span class="q">&#34;<a href="triggers.htm#GUID-B42FDBCD-55F4-47E9-90BB-12B71D63D225">Compound DML Trigger Structure</a>&#34;</span> for information about compound DML triggers with the <code class="codeph">INSTEAD</code> <code class="codeph">OF</code> <code class="codeph">EACH</code> <code class="codeph">ROW</code> section</p>
</li>
</ul>
</div>
<div class="example" id="GUID-9F06D45C-7C60-434E-A597-114A0C445671__CIHFGDJG">
<p class="titleinexample">Example 9-2 INSTEAD OF Trigger</p>
<p>This example creates the view <code class="codeph">oe.order_info</code> to display information about customers and their orders. The view is not inherently updatable (because the primary key of the <code class="codeph">orders</code> table, <code class="codeph">order_id</code>, is not unique in the result set of the join view). The example creates an <code class="codeph">INSTEAD</code> <code class="codeph">OF</code> trigger to process <code class="codeph">INSERT</code> statements directed to the view. The trigger inserts rows into the base tables of the view, <code class="codeph">customers</code> and <code class="codeph">orders</code>.</p>
<pre dir="ltr">CREATE OR REPLACE VIEW order_info AS
   SELECT c.customer_id, c.cust_last_name, c.cust_first_name,
          o.order_id, o.order_date, o.order_status
   <span class="bold">FROM customers c, orders o</span>
   WHERE c.customer_id = o.customer_id;

CREATE OR REPLACE TRIGGER order_info_insert
   <span class="bold">INSTEAD OF INSERT ON order_info</span>
   DECLARE
     duplicate_info EXCEPTION;
     PRAGMA EXCEPTION_INIT (duplicate_info, -00001);
   BEGIN
     <span class="bold">INSERT INTO customers</span>
       <span class="bold">(customer_id, cust_last_name, cust_first_name)</span>
     <span class="bold">VALUES (</span>
     <span class="bold">:new.customer_id,</span>
     <span class="bold">:new.cust_last_name,</span>
     <span class="bold">:new.cust_first_name);</span>
   <span class="bold">INSERT INTO orders (order_id, order_date, customer_id)</span>
   <span class="bold">VALUES (</span>
     <span class="bold">:new.order_id,</span>
     <span class="bold">:new.order_date,</span>
     <span class="bold">:new.customer_id);</span>
   EXCEPTION
     WHEN duplicate_info THEN
       RAISE_APPLICATION_ERROR (
         num=&gt; -20107,
         msg=&gt; &#39;Duplicate customer or order ID&#39;);
   END order_info_insert;
/

</pre>
<p>Query to show that row to be inserted does not exist:</p>
<pre dir="ltr">SELECT COUNT(*) FROM order_info WHERE customer_id = 999;
</pre>
<p>Result:</p>
<pre dir="ltr">  COUNT(*)
----------
         0
 
1 row selected.
</pre>
<p>Insert row into view:</p>
<pre dir="ltr">INSERT INTO order_info VALUES
   (999, &#39;Smith&#39;, &#39;John&#39;, 2500, TO_DATE(&#39;13-MAR-2001&#39;, &#39;DD-MON-YYYY&#39;), 0);
</pre>
<p>Result:</p>
<pre dir="ltr">1 row created.
</pre>
<p>Query to show that row has been inserted in view:</p>
<pre dir="ltr">SELECT COUNT(*) FROM order_info WHERE customer_id = 999;
</pre>
<p>Result:</p>
<pre dir="ltr">  COUNT(*)
----------
         1
 
1 row selected.
</pre>
<p>Query to show that row has been inserted in <code class="codeph">customers</code> table:</p>
<pre dir="ltr">SELECT COUNT(*) FROM customers WHERE customer_id = 999;
</pre>
<p>Result:</p>
<pre dir="ltr">  COUNT(*)
----------
         1
 
1 row selected.
</pre>
<p>Query to show that row has been inserted in <code class="codeph">orders</code> table:</p>
<pre dir="ltr">SELECT COUNT(*) FROM orders WHERE customer_id = 999;
</pre>
<p>Result:</p>
<pre dir="ltr">  COUNT(*)
----------
         1
 
1 row selected.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-9F06D45C-7C60-434E-A597-114A0C445671__CIHFBGDC">
<p class="titleinexample">Example 9-3 INSTEAD OF Trigger on Nested Table Column of View</p>
<p>In this example, the view <code class="codeph">dept_view</code> contains a nested table of employees, <code class="codeph">emplist</code>, created by the <code class="codeph">CAST</code> function (described in <a class="olink SQLRF00613" target="_blank" href="../SQLRF/functions024.htm#SQLRF00613"><span class="italic">Oracle Database SQL Language Reference</span></a>). To modify the <code class="codeph">emplist</code> column, the example creates an <code class="codeph">INSTEAD</code> <code class="codeph">OF</code> trigger on the column.</p>
<pre dir="ltr">-- Create type of nested table element:
 
CREATE OR REPLACE TYPE nte
AUTHID DEFINER IS
OBJECT (
  emp_id     NUMBER(6),
  lastname   VARCHAR2(25),
  job        VARCHAR2(10),
  sal        NUMBER(8,2)
);
/
 
-- Created type of nested table:
 
CREATE OR REPLACE TYPE emp_list_ IS
  TABLE OF nte;
/
 
-- Create view:

CREATE OR REPLACE VIEW <span class="bold">dept_view</span> AS
  SELECT d.department_id, 
         d.department_name,
         CAST (MULTISET (SELECT e.employee_id, e.last_name, e.job_id, e.salary
                         FROM employees e
                         WHERE e.department_id = d.department_id
                        )
                        AS emp_list_
              ) <span class="bold">emplist</span>
  FROM departments d;
 
-- Create trigger:
 
CREATE OR REPLACE TRIGGER dept_emplist_tr
  <span class="bold">INSTEAD OF INSERT ON NESTED TABLE emplist OF dept_view</span>
  <span class="bold">REFERENCING NEW AS Employee</span>
              <span class="bold">PARENT AS Department</span>
  FOR EACH ROW
BEGIN
  -- Insert on nested table translates to insert on base table:
  INSERT INTO employees (
    employee_id,
    last_name,
    email,
    hire_date,
    job_id,
    salary,
    department_id
  )
  VALUES (
    :Employee.emp_id,                      -- employee_id
    :Employee.lastname,                    -- last_name
    :Employee.lastname || &#39;@company.com&#39;,  -- email
    SYSDATE,                               -- hire_date
    :Employee.job,                         -- job_id
    :Employee.sal,                         -- salary
    :Department.department_id              -- department_id
  );
END;
/
</pre>
<p>Query view before inserting row into nested table:</p>
<pre dir="ltr">SELECT emplist FROM dept_view WHERE department_id=10;
</pre>
<p>Result:</p>
<pre dir="ltr">EMPLIST(EMP_ID, LASTNAME, JOB, SAL)
----------------------------------------------
 
EMP_LIST_(NTE(200, &#39;Whalen&#39;, &#39;AD_ASST&#39;, 4200))
 
1 row selected.
</pre>
<p>Query table before inserting row into nested table:</p>
<pre dir="ltr">SELECT employee_id, last_name, job_id, salary
FROM employees
WHERE department_id = 10;
</pre>
<p>Result:</p>
<pre dir="ltr">EMPLOYEE_ID LAST_NAME                 JOB_ID         SALARY
----------- ------------------------- ---------- ----------
        200 Whalen                    AD_ASST          4200
 
1 row selected.
</pre>
<p>Insert a row into nested table:</p>
<pre dir="ltr">INSERT INTO TABLE (
  SELECT d.emplist 
  FROM dept_view d
  WHERE department_id = 10
)
VALUES (1001, &#39;Glenn&#39;, &#39;AC_MGR&#39;, 10000);
</pre>
<p>Query view after inserting row into nested table:</p>
<pre dir="ltr">SELECT emplist FROM dept_view WHERE department_id=10;
</pre>
<p>Result (formatted to fit page):</p>
<pre dir="ltr">EMPLIST(EMP_ID, LASTNAME, JOB, SAL)
--------------------------------------------------------------------------------
 
EMP_LIST_(NTE(200, &#39;Whalen&#39;, &#39;AD_ASST&#39;, 4200),
          NTE(1001, &#39;Glenn&#39;, &#39;AC_MGR&#39;, 10000))
 
1 row selected.
</pre>
<p>Query table after inserting row into nested table:</p>
<pre dir="ltr">SELECT employee_id, last_name, job_id, salary
FROM employees
WHERE department_id = 10;
</pre>
<p>Result:</p>
<pre dir="ltr">EMPLOYEE_ID LAST_NAME                 JOB_ID         SALARY
----------- ------------------------- ---------- ----------
        200 Whalen                    AD_ASST          4200
       1001 Glenn                     AC_MGR          10000
 
2 rows selected.
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS652"></a><a id="LNPLS2005"></a>
<div class="props_rev_3"><a id="GUID-8A0DA171-BE6A-4798-A1A4-677B88EA16A0"></a>
<h3 id="LNPLS-GUID-8A0DA171-BE6A-4798-A1A4-677B88EA16A0" class="sect3">Compound DML Triggers</h3>
<div>
<p>A compound DML trigger created on a table or editioning view can fire at multiple timing points. Each timing point section has its own executable part and optional exception-handling part, but all of these parts can access a common PL/SQL state. The common state is established when the triggering statement starts and is destroyed when the triggering statement completes, even when the triggering statement causes an error.</p>
<p>A compound DML trigger created on a noneditioning view is not really compound, because it has only one timing point section.</p>
<p>A compound trigger can be conditional, but not autonomous.</p>
<p>Two common uses of compound triggers are:</p>
<ul style="list-style-type: disc;">
<li>
<p>To accumulate rows destined for a second table so that you can periodically bulk-insert them</p>
</li>
<li>
<p>To avoid the mutating-table error (ORA-04091)</p>
</li>
</ul>
<div class="section">
<p class="subhead3">Topics</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="triggers.htm#GUID-B42FDBCD-55F4-47E9-90BB-12B71D63D225">Compound DML Trigger Structure</a></p>
</li>
<li>
<p><a href="triggers.htm#GUID-67299530-50F0-4D99-B212-956A7E679CDC">Compound DML Trigger Restrictions</a></p>
</li>
<li>
<p><a href="triggers.htm#GUID-5F39A9BC-D1E3-4D71-A4E1-A2674E5132A0">Performance Benefit of Compound DML Triggers</a></p>
</li>
<li>
<p><a href="triggers.htm#GUID-B5E654D9-5875-40EC-AE24-E3A8CB37C9C5">Using Compound DML Triggers with Bulk Insertion</a></p>
</li>
<li>
<p><a href="triggers.htm#GUID-E1150933-9B5F-4AA3-9F49-C222A1618BE5">Using Compound DML Triggers to Avoid Mutating-Table Error</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="LNPLS655"></a><a id="LNPLS737"></a>
<div class="props_rev_3"><a id="GUID-B42FDBCD-55F4-47E9-90BB-12B71D63D225"></a>
<h4 id="LNPLS-GUID-B42FDBCD-55F4-47E9-90BB-12B71D63D225" class="sect4">Compound DML Trigger Structure</h4>
<div>
<p>The optional declarative part of a compound trigger declares variables and subprograms that all of its timing-point sections can use. When the trigger fires, the declarative part runs before any timing-point sections run. The variables and subprograms exist for the duration of the triggering statement.</p>
<p>A compound DML trigger created on a noneditioning view is not really compound, because it has only one timing point section. The syntax for creating the simplest compound DML trigger on a noneditioning view is:</p>
<pre dir="ltr">CREATE <span class="italic">trigger</span> FOR <span class="italic">dml_event_clause</span> ON <span class="italic">view</span>
COMPOUND TRIGGER
INSTEAD OF EACH ROW IS BEGIN
  <span class="italic">statement</span>;
END INSTEAD OF EACH ROW;
</pre>
<p>A compound DML trigger created on a table or editioning view has at least one timing-point section in <a href="triggers.htm#GUID-B42FDBCD-55F4-47E9-90BB-12B71D63D225__CIHJGDGE" title="This table show the possible trigger points and corresponding optional sections for a compound trigger associated with a table.">Table 9-2</a>. If the trigger has multiple timing-point sections, they can be in any order, but no timing-point section can be repeated. If a timing-point section is absent, then nothing happens at its timing point.</p>
<div class="tblformal" id="GUID-B42FDBCD-55F4-47E9-90BB-12B71D63D225__CIHJGDGE">
<p class="titleintable">Table 9-2 Compound Trigger Timing-Point Sections</p>
<table class="cellalignment876" title="Compound Trigger Timing-Point Sections" summary="This table show the possible trigger points and corresponding optional sections for a compound trigger associated with a table.">
<thead>
<tr class="cellalignment870">
<th class="cellalignment945" id="d65654e1639">Timing Point</th>
<th class="cellalignment946" id="d65654e1642">Section</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment870">
<td class="cellalignment947" id="d65654e1647" headers="d65654e1639">
<p>Before the triggering statement runs</p>
</td>
<td class="cellalignment948" headers="d65654e1647 d65654e1642">
<p><code class="codeph">BEFORE</code> <code class="codeph">STATEMENT</code></p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment947" id="d65654e1658" headers="d65654e1639">
<p>After the triggering statement runs</p>
</td>
<td class="cellalignment948" headers="d65654e1658 d65654e1642">
<p><code class="codeph">AFTER</code> <code class="codeph">STATEMENT</code></p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment947" id="d65654e1669" headers="d65654e1639">
<p>Before each row that the triggering statement affects</p>
</td>
<td class="cellalignment948" headers="d65654e1669 d65654e1642">
<p><code class="codeph">BEFORE</code> <code class="codeph">EACH</code> <code class="codeph">ROW</code></p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment947" id="d65654e1683" headers="d65654e1639">
<p>After each row that the triggering statement affects</p>
</td>
<td class="cellalignment948" headers="d65654e1683 d65654e1642">
<p><code class="codeph">AFTER</code> <code class="codeph">EACH</code> <code class="codeph">ROW</code></p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<div class="infoboxnotealso" id="GUID-B42FDBCD-55F4-47E9-90BB-12B71D63D225__GUID-56588DAC-2F87-43C8-A3FC-7920B548534E">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="create_trigger.htm#GUID-AF9E33F1-64D1-4382-A6A4-EC33C36F237B">CREATE TRIGGER Statement</a>&#34;</span> for more information about the syntax of compound triggers</p>
</div>
<p>A compound DML trigger does not have an initialization section, but the <code class="codeph">BEFORE</code> <code class="codeph">STATEMENT</code> section, which runs before any other timing-point section, can do any necessary initialization.</p>
<p>If a compound DML trigger has neither a <code class="codeph">BEFORE</code> <code class="codeph">STATEMENT</code> section nor an <code class="codeph">AFTER</code> <code class="codeph">STATEMENT</code> section, and its triggering statement affects no rows, then the trigger never fires.</p>
</div>
</div>
<a id="LNPLS740"></a>
<div class="props_rev_3"><a id="GUID-67299530-50F0-4D99-B212-956A7E679CDC"></a>
<h4 id="LNPLS-GUID-67299530-50F0-4D99-B212-956A7E679CDC" class="sect4">Compound DML Trigger Restrictions</h4>
<div>
<p>In addition to the <span class="q">&#34;<a href="triggers.htm#GUID-5B3A43E2-B9E1-4015-9A6C-0BE696853F3F">Trigger Restrictions</a>&#34;</span>), compound DML triggers have these restrictions:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">OLD</code>, <code class="codeph">NEW</code>, and <code class="codeph">PARENT</code> cannot appear in the declarative part, the <code class="codeph">BEFORE</code> <code class="codeph">STATEMENT</code> section, or the <code class="codeph">AFTER</code> <code class="codeph">STATEMENT</code> section.</p>
</li>
<li>
<p>Only the <code class="codeph">BEFORE</code> <code class="codeph">EACH</code> <code class="codeph">ROW</code> section can change the value of <code class="codeph">NEW</code>.</p>
</li>
<li>
<p>A timing-point section cannot handle exceptions raised in another timing-point section.</p>
</li>
<li>
<p>If a timing-point section includes a <code class="codeph">GOTO</code> statement, the target of the <code class="codeph">GOTO</code> statement must be in the same timing-point section.</p>
</li>
</ul>
</div>
</div>
<a id="LNPLS739"></a>
<div class="props_rev_3"><a id="GUID-5F39A9BC-D1E3-4D71-A4E1-A2674E5132A0"></a>
<h4 id="LNPLS-GUID-5F39A9BC-D1E3-4D71-A4E1-A2674E5132A0" class="sect4">Performance Benefit of Compound DML Triggers</h4>
<div>
<p>A compound DML trigger has a performance benefit when the triggering statement affects many rows.</p>
<p>For example, suppose that this statement triggers a compound DML trigger that has all four timing-point sections in <a href="triggers.htm#GUID-B42FDBCD-55F4-47E9-90BB-12B71D63D225__CIHJGDGE" title="This table show the possible trigger points and corresponding optional sections for a compound trigger associated with a table.">Table 9-2</a>:</p>
<pre dir="ltr">INSERT INTO Target
  SELECT c1, c2, c3
  FROM Source
  WHERE Source.c1 &gt; 0
</pre>
<p>Although the <code class="codeph">BEFORE</code> <code class="codeph">EACH</code> <code class="codeph">ROW</code> and <code class="codeph">AFTER</code> <code class="codeph">EACH</code> <code class="codeph">ROW</code> sections of the trigger run for each row of <code class="codeph">Source</code> whose column <code class="codeph">c1</code> is greater than zero, the <code class="codeph">BEFORE</code> <code class="codeph">STATEMENT</code> section runs only before the <code class="codeph">INSERT</code> statement runs and the <code class="codeph">AFTER</code> <code class="codeph">STATEMENT</code> section runs only after the <code class="codeph">INSERT</code> statement runs.</p>
<p>A compound DML trigger has a greater performance benefit when it uses bulk SQL, described in <span class="q">&#34;<a href="tuning.htm#GUID-61D1B533-DBB9-4150-91F9-0A4C9428391E" title="Bulk SQL minimizes the performance overhead of the communication between PL/SQL and SQL. The PL/SQL features that comprise bulk SQL are the FORALL statement and the BULK COLLECT clause. Assigning values to PL/SQL variables that appear in SQL statements is called binding.">Bulk SQL and Bulk Binding</a>&#34;</span>.</p>
</div>
</div>
<a id="LNPLS742"></a><a id="LNPLS741"></a>
<div class="props_rev_3"><a id="GUID-B5E654D9-5875-40EC-AE24-E3A8CB37C9C5"></a>
<h4 id="LNPLS-GUID-B5E654D9-5875-40EC-AE24-E3A8CB37C9C5" class="sect4">Using Compound DML Triggers with Bulk Insertion</h4>
<div>
<div class="section">
<p>A compound DML trigger is useful for accumulating rows destined for a second table so that you can periodically bulk-insert them. To get the performance benefit from the compound trigger, you must specify <code class="codeph">BULK</code> <code class="codeph">COLLECT</code> <code class="codeph">INTO</code> in the <code class="codeph">FORALL</code> statement (otherwise, the <code class="codeph">FORALL</code> statement does a single-row DML operation multiple times). For more information about using the <code class="codeph">BULK</code> <code class="codeph">COLLECT</code> clause with the <code class="codeph">FORALL</code> statement, see <span class="q">&#34;<a href="tuning.htm#GUID-D67D19A6-4717-4556-B027-15C3DED0519A" title="In a FORALL statement, the DML statement can have a RETURNING BULK COLLECT INTO clause. For each iteration of the FORALL statement, the DML statement stores the specified values in the specified collections&mdash;without overwriting the previous values, as the same DML statement would do in a FOR LOOP statement.">Using FORALL Statement and BULK COLLECT Clause Together</a>&#34;</span>.</p>
<div class="infoboxnotealso" id="GUID-B5E654D9-5875-40EC-AE24-E3A8CB37C9C5__GUID-83C6996D-8250-46D5-82F5-BF498411E6C4">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="tuning.htm#GUID-6D4A1425-64DD-4723-8AAE-87B0A51A2854" title="The FORALL statement, a feature of bulk SQL, sends DML statements from PL/SQL to SQL in batches rather than one at a time.">FORALL Statement</a>&#34;</span></p>
</div>
<p><span class="bold">Scenario:</span> You want to log every change to <code class="codeph">hr</code>.<code class="codeph">employees</code>.<code class="codeph">salary</code> in a new table, <code class="codeph">employee_salaries</code>. A single <code class="codeph">UPDATE</code> statement updates many rows of the table <code class="codeph">hr</code>.<code class="codeph">employees</code>; therefore, bulk-inserting rows into <code class="codeph">employee</code>.<code class="codeph">salaries</code> is more efficient than inserting them individually.</p>
<p><span class="bold">Solution:</span> Define a compound trigger on updates of the table <code class="codeph">hr</code>.<code class="codeph">employees</code>, as in <a href="triggers.htm#GUID-B5E654D9-5875-40EC-AE24-E3A8CB37C9C5__CIHGJFAB">Example 9-4</a>. You do not need a <code class="codeph">BEFORE</code> <code class="codeph">STATEMENT</code> section to initialize <code class="codeph">idx</code> or <code class="codeph">salaries</code>, because they are state variables, which are initialized each time the trigger fires (even when the triggering statement is interrupted and restarted).</p>
<div class="infobox-note" id="GUID-B5E654D9-5875-40EC-AE24-E3A8CB37C9C5__GUID-8BF7A17F-4435-405D-896A-EC513AEF0E30">
<p class="notep1">Note:</p>
<p>To run <a href="triggers.htm#GUID-B5E654D9-5875-40EC-AE24-E3A8CB37C9C5__CIHGJFAB">Example 9-4</a>, you must have the <code class="codeph">EXECUTE</code> privilege on the package <code class="codeph">DBMS_LOCK</code>.</p>
</div>
</div>
<!-- class="section" -->
<div class="example" id="GUID-B5E654D9-5875-40EC-AE24-E3A8CB37C9C5__CIHGJFAB">
<p class="titleinexample">Example 9-4 Compound Trigger Logs Changes to One Table in Another Table</p>
<pre dir="ltr">CREATE TABLE employee_salaries (
  employee_id NUMBER NOT NULL,
  change_date DATE   NOT NULL,
  salary NUMBER(8,2) NOT NULL,
  CONSTRAINT pk_employee_salaries PRIMARY KEY (employee_id, change_date),
  CONSTRAINT fk_employee_salaries FOREIGN KEY (employee_id)
    REFERENCES employees (employee_id)
      ON DELETE CASCADE)
/
CREATE OR REPLACE TRIGGER maintain_employee_salaries
  FOR UPDATE OF salary ON employees
    COMPOUND TRIGGER

-- Declarative Part:
-- Choose small threshhold value to show how example works:
  threshhold CONSTANT SIMPLE_INTEGER := 7;

  TYPE salaries_t IS TABLE OF employee_salaries%ROWTYPE INDEX BY SIMPLE_INTEGER;
  salaries  salaries_t;
  idx       SIMPLE_INTEGER := 0;

  PROCEDURE flush_array IS
    n CONSTANT SIMPLE_INTEGER := salaries.count();
  BEGIN
    <span class="bold">FORALL j IN 1..n</span>
      <span class="bold">INSERT INTO employee_salaries VALUES salaries(j);</span>
    salaries.delete();
    idx := 0;
    DBMS_OUTPUT.PUT_LINE(&#39;Flushed &#39; || n || &#39; rows&#39;);
  END flush_array;

  -- AFTER EACH ROW Section:

  AFTER EACH ROW IS
  BEGIN
    idx := idx + 1;
    salaries(idx).employee_id := :NEW.employee_id;
    salaries(idx).change_date := SYSTIMESTAMP;
    salaries(idx).salary := :NEW.salary;
    IF idx &gt;= threshhold THEN
      flush_array();
    END IF;
  END AFTER EACH ROW;

  -- AFTER STATEMENT Section:

  AFTER STATEMENT IS
  BEGIN
    flush_array();
  END AFTER STATEMENT;
END maintain_employee_salaries;
/
</pre>
<p>Increase salary of every employee in department 50 by 10%:</p>
<pre dir="ltr">UPDATE employees
  SET salary = salary * 1.1
  WHERE department_id = 50
/
</pre>
<p>Result:</p>
<pre dir="ltr">Flushed 7 rows
Flushed 7 rows
Flushed 7 rows
Flushed 7 rows
Flushed 7 rows
Flushed 7 rows
Flushed 3 rows
 
45 rows updated.
</pre>
<p>Wait two seconds:</p>
<pre dir="ltr">BEGIN
  DBMS_LOCK.SLEEP(2);
END;
/
</pre>
<p>Increase salary of every employee in department 50 by 5%:</p>
<pre dir="ltr">UPDATE employees
  SET salary = salary * 1.05
  WHERE department_id = 50
/
</pre>
<p>Result:</p>
<pre dir="ltr">Flushed 7 rows
Flushed 7 rows
Flushed 7 rows
Flushed 7 rows
Flushed 7 rows
Flushed 7 rows
Flushed 3 rows
 
45 rows updated.
</pre>
<p>See changes to employees table reflected in <code class="codeph">employee_salaries</code> table:</p>
<pre dir="ltr">SELECT employee_id, count(*) c
  FROM employee_salaries
  GROUP BY employee_id
/
</pre>
<p>Result:</p>
<pre dir="ltr">EMPLOYEE_ID          C
----------- ----------
        120          2
        121          2
        122          2
        123          2
        124          2
        125          2
...
        199          2
 
45 rows selected.
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS744"></a><a id="LNPLS743"></a>
<div class="props_rev_3"><a id="GUID-E1150933-9B5F-4AA3-9F49-C222A1618BE5"></a>
<h4 id="LNPLS-GUID-E1150933-9B5F-4AA3-9F49-C222A1618BE5" class="sect4">Using Compound DML Triggers to Avoid Mutating-Table Error</h4>
<div>
<div class="section">
<p>A compound DML trigger is useful for avoiding the mutating-table error (ORA-04091) explained in <span class="q">&#34;<a href="triggers.htm#GUID-73B70893-9E45-4C08-B327-13ECBE4BE920">Mutating-Table Restriction</a>&#34;</span>.</p>
<p><span class="bold">Scenario:</span> A business rule states that an employee&#39;s salary increase must not exceed 10% of the average salary for the employee&#39;s department. This rule must be enforced by a trigger.</p>
<p><span class="bold">Solution:</span> Define a compound trigger on updates of the table <code class="codeph">hr</code>.<code class="codeph">employees</code>, as in <a href="triggers.htm#GUID-E1150933-9B5F-4AA3-9F49-C222A1618BE5__CHDFGDAH">Example 9-5</a>. The state variables are initialized each time the trigger fires (even when the triggering statement is interrupted and restarted).</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-E1150933-9B5F-4AA3-9F49-C222A1618BE5__CHDFGDAH">
<p class="titleinexample">Example 9-5 Compound Trigger Avoids Mutating-Table Error</p>
<pre dir="ltr">CREATE OR REPLACE TRIGGER Check_Employee_Salary_Raise
  FOR UPDATE OF Salary ON Employees
COMPOUND TRIGGER
  Ten_Percent                 CONSTANT NUMBER := 0.1;
  TYPE Salaries_t             IS TABLE OF Employees.Salary%TYPE;
  Avg_Salaries                Salaries_t;
  TYPE Department_IDs_t       IS TABLE OF Employees.Department_ID%TYPE;
  Department_IDs              Department_IDs_t;

  -- Declare collection type and variable:

  TYPE Department_Salaries_t  IS TABLE OF Employees.Salary%TYPE
                                INDEX BY VARCHAR2(80);
  Department_Avg_Salaries     Department_Salaries_t;

  BEFORE STATEMENT IS
  BEGIN
    SELECT               AVG(e.Salary), NVL(e.Department_ID, -1)
      BULK COLLECT INTO  Avg_Salaries, Department_IDs
      FROM               Employees e
      GROUP BY           e.Department_ID;
    FOR j IN 1..Department_IDs.COUNT() LOOP
      Department_Avg_Salaries(Department_IDs(j)) := Avg_Salaries(j);
    END LOOP;
  END BEFORE STATEMENT;

  AFTER EACH ROW IS
  BEGIN
    IF :NEW.Salary - :Old.Salary &gt;
      Ten_Percent*Department_Avg_Salaries(:NEW.Department_ID)
    THEN
      Raise_Application_Error(-20000, &#39;Raise too big&#39;);
    END IF;
  END AFTER EACH ROW;
END Check_Employee_Salary_Raise;
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="LNPLS660"></a><a id="LNPLS661"></a><a id="LNPLS770"></a>
<div class="props_rev_3"><a id="GUID-AD8188E5-546E-46EB-A000-7EB9D17C3D0C"></a>
<h3 id="LNPLS-GUID-AD8188E5-546E-46EB-A000-7EB9D17C3D0C" class="sect3">Triggers for Ensuring Referential Integrity</h3>
<div>
<p>You can use triggers and constraints to maintain referential integrity between parent and child tables, as <a href="triggers.htm#GUID-AD8188E5-546E-46EB-A000-7EB9D17C3D0C__CIHIDBHH" title="This table shows the kinds of constraints and triggers needed to maintain referential integrity between a parent and child table.">Table 9-3</a> shows. (For more information about constraints, see <a class="olink SQLRF52180" target="_blank" href="../SQLRF/clauses002.htm#SQLRF52180"><span class="italic">Oracle Database SQL Language Reference</span></a>.)</p>
<div class="tblformal" id="GUID-AD8188E5-546E-46EB-A000-7EB9D17C3D0C__CIHIDBHH">
<p class="titleintable">Table 9-3 Constraints and Triggers for Ensuring Referential Integrity</p>
<table class="cellalignment876" title="Constraints and Triggers for Ensuring Referential Integrity" summary="This table shows the kinds of constraints and triggers needed to maintain referential integrity between a parent and child table.">
<thead>
<tr class="cellalignment870">
<th class="cellalignment949" id="d65654e2428">Table</th>
<th class="cellalignment950" id="d65654e2431">Constraint to Declare on Table</th>
<th class="cellalignment950" id="d65654e2434">Triggers to Create on Table</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment870">
<td class="cellalignment951" id="d65654e2439" headers="d65654e2428">
<p>Parent</p>
</td>
<td class="cellalignment952" headers="d65654e2439 d65654e2431">
<p><code class="codeph">PRIMARY</code> <code class="codeph">KEY</code> or <code class="codeph">UNIQUE</code></p>
</td>
<td class="cellalignment952" headers="d65654e2439 d65654e2434">
<p>One or more triggers that ensure that when <code class="codeph">PRIMARY</code> <code class="codeph">KEY</code> or <code class="codeph">UNIQUE</code> values are updated or deleted, the desired action (<code class="codeph">RESTRICT</code>, <code class="codeph">CASCADE</code>, or <code class="codeph">SET</code> <code class="codeph">NULL</code>) occurs on corresponding <code class="codeph">FOREIGN</code> <code class="codeph">KEY</code> values.</p>
<p>No action is required for inserts into the parent table, because no dependent foreign keys exist.</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment951" id="d65654e2486" headers="d65654e2428">
<p>Child</p>
</td>
<td class="cellalignment952" headers="d65654e2486 d65654e2431">
<p><code class="codeph">FOREIGN</code> <code class="codeph">KEY</code>, if parent and child are in the same database. (The database does not support declarative referential constraints between tables on different nodes of a distributed database.)</p>
<p>Disable this foreign key constraint to prevent the corresponding <code class="codeph">PRIMARY</code> <code class="codeph">KEY</code> or <code class="codeph">UNIQUE</code> constraint from being dropped (except explicitly with the <code class="codeph">CASCADE</code> option).</p>
</td>
<td class="cellalignment952" headers="d65654e2486 d65654e2434">
<p>One trigger that ensures that values inserted or updated in the <code class="codeph">FOREIGN</code> <code class="codeph">KEY</code> correspond to <code class="codeph">PRIMARY</code> <code class="codeph">KEY</code> or <code class="codeph">UNIQUE</code> values in the parent table.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<div class="section">
<p class="subhead3">Topics</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="triggers.htm#GUID-2DC16B21-35B1-4D09-BD4E-02797AA278EA">Foreign Key Trigger for Child Table</a></p>
</li>
<li>
<p><a href="triggers.htm#GUID-DB24A169-3CB1-427E-AA2B-646B878FA20C">UPDATE and DELETE RESTRICT Trigger for Parent Table</a></p>
</li>
<li>
<p><a href="triggers.htm#GUID-58AD982C-22E6-4A62-A2CE-643BE8C4E821">UPDATE and DELETE SET NULL Trigger for Parent Table</a></p>
</li>
<li>
<p><a href="triggers.htm#GUID-2B9DF77A-171D-472B-A8F0-FF9730261D07">DELETE CASCADE Trigger for Parent Table</a></p>
</li>
<li>
<p><a href="triggers.htm#GUID-193F9DBB-80B5-49FC-83D2-2FB533880833">UPDATE CASCADE Trigger for Parent Table</a></p>
</li>
<li>
<p><a href="triggers.htm#GUID-BF2DDD06-E6B4-4EB5-945F-89FFA8468D6F">Triggers for Complex Constraint Checking</a></p>
</li>
<li>
<p><a href="triggers.htm#GUID-9E6E59EF-F402-4B11-A4FF-268D9C0521EB">Triggers for Complex Security Authorizations</a></p>
</li>
<li>
<p><a href="triggers.htm#GUID-6DF46DC3-1311-4A93-B509-16B396901E97">Triggers for Transparent Event Logging</a></p>
</li>
<li>
<p><a href="triggers.htm#GUID-BD042B88-E2E7-4A7D-8FA2-8D0185F6455F">Triggers for Deriving Column Values</a></p>
</li>
<li>
<p><a href="triggers.htm#GUID-4F93F21E-BA7F-4378-87E6-46A8E4C03287">Triggers for Building Complex Updatable Views</a></p>
</li>
<li>
<p><a href="triggers.htm#GUID-86F46BD4-9225-41D0-AAF7-DA467F8412A9">Triggers for Fine-Grained Access Control</a></p>
</li>
</ul>
<div class="infobox-note" id="GUID-AD8188E5-546E-46EB-A000-7EB9D17C3D0C__GUID-F376FE1B-E967-4B16-8DC3-EFCF0595FD6D">
<p class="notep1">Note:</p>
<p>The examples in the following topics use these tables, which share the column <code class="codeph">Deptno</code>:</p>
<pre dir="ltr">CREATE TABLE emp (
  Empno     NUMBER NOT NULL,
  Ename     VARCHAR2(10),
  Job       VARCHAR2(9),
  Mgr       NUMBER(4),
  Hiredate  DATE,
  Sal       NUMBER(7,2),
  Comm      NUMBER(7,2),
  <span class="bold">Deptno    NUMBER(2) NOT NULL</span>);

CREATE TABLE dept (
  <span class="bold">Deptno    NUMBER(2) NOT NULL</span>,
  Dname     VARCHAR2(14),
  Loc       VARCHAR2(13),
  Mgr_no    NUMBER,
  Dept_type NUMBER);
</pre>
<p>Several triggers include statements that lock rows (<code class="codeph">SELECT</code> <code class="codeph">FOR</code> <code class="codeph">UPDATE</code>). This operation is necessary to maintain concurrency while the rows are being processed.</p>
<p>These examples are not meant to be used exactly as written. They are provided to assist you in designing your own triggers.</p>
</div>
</div>
<!-- class="section" --></div>
<a id="LNPLS772"></a><a id="LNPLS771"></a>
<div class="props_rev_3"><a id="GUID-2DC16B21-35B1-4D09-BD4E-02797AA278EA"></a>
<h4 id="LNPLS-GUID-2DC16B21-35B1-4D09-BD4E-02797AA278EA" class="sect4">Foreign Key Trigger for Child Table</h4>
<div>
<p>The trigger in <a href="triggers.htm#GUID-2DC16B21-35B1-4D09-BD4E-02797AA278EA__BCFGAHIB">Example 9-6</a> ensures that before an <code class="codeph">INSERT</code> or <code class="codeph">UPDATE</code> statement affects a foreign key value, the corresponding value exists in the parent key. The exception ORA-04091 (mutating-table error) allows the trigger <code class="codeph">emp_dept_check</code> to be used with the <code class="codeph">UPDATE_SET_DEFAULT</code> and <code class="codeph">UPDATE_CASCADE</code> triggers. This exception is unnecessary if the trigger <code class="codeph">emp_dept_check</code> is used alone.</p>
<div class="example" id="GUID-2DC16B21-35B1-4D09-BD4E-02797AA278EA__BCFGAHIB">
<p class="titleinexample">Example 9-6 Foreign Key Trigger for Child Table</p>
<pre dir="ltr">CREATE OR REPLACE TRIGGER emp_dept_check
  BEFORE INSERT OR UPDATE OF Deptno ON emp
  FOR EACH ROW WHEN (NEW.Deptno IS NOT NULL)

  -- Before row is inserted or DEPTNO is updated in emp table,
  -- fire this trigger to verify that new foreign key value (DEPTNO)
  -- is present in dept table.
DECLARE
  Dummy               INTEGER;  -- Use for cursor fetch
  Invalid_department  EXCEPTION;
  Valid_department    EXCEPTION;
  Mutating_table      EXCEPTION;
  PRAGMA EXCEPTION_INIT (Invalid_department, -4093);
  PRAGMA EXCEPTION_INIT (Valid_department, -4092);
  PRAGMA EXCEPTION_INIT (Mutating_table, -4091);

  -- Cursor used to verify parent key value exists.
  -- If present, lock parent key&#39;s row so it cannot be deleted
  -- by another transaction until this transaction is
  -- committed or rolled back.

  CURSOR Dummy_cursor (Dn NUMBER) IS
    SELECT Deptno FROM dept
    WHERE Deptno = Dn
    FOR UPDATE OF Deptno;
BEGIN
  OPEN Dummy_cursor (:NEW.Deptno);
  FETCH Dummy_cursor INTO Dummy;

  -- Verify parent key.
  -- If not found, raise user-specified error code and message.
  -- If found, close cursor before allowing triggering statement to complete:

  IF Dummy_cursor%NOTFOUND THEN
    RAISE Invalid_department;
  ELSE
    RAISE Valid_department;
  END IF;
  CLOSE Dummy_cursor;
EXCEPTION
  WHEN Invalid_department THEN
    CLOSE Dummy_cursor;
    Raise_application_error(-20000, &#39;Invalid Department&#39;
      || &#39; Number&#39; || TO_CHAR(:NEW.deptno));
  WHEN Valid_department THEN
    CLOSE Dummy_cursor;
  WHEN Mutating_table THEN
    NULL;
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS774"></a><a id="LNPLS773"></a>
<div class="props_rev_3"><a id="GUID-DB24A169-3CB1-427E-AA2B-646B878FA20C"></a>
<h4 id="LNPLS-GUID-DB24A169-3CB1-427E-AA2B-646B878FA20C" class="sect4">UPDATE and DELETE RESTRICT Trigger for Parent Table</h4>
<div>
<p>The trigger in <a href="triggers.htm#GUID-DB24A169-3CB1-427E-AA2B-646B878FA20C__BCFCCBAF">Example 9-7</a> enforces the <code class="codeph">UPDATE</code> and <code class="codeph">DELETE</code> <code class="codeph">RESTRICT</code> referential action on the primary key of the <code class="codeph">dept</code> table.</p>
<div class="infobox-note" id="GUID-DB24A169-3CB1-427E-AA2B-646B878FA20C__GUID-C4C67C70-4C57-4A13-B98E-3ADAC0B04ECB">
<p class="notep1">Caution:</p>
<p>The trigger in <a href="triggers.htm#GUID-DB24A169-3CB1-427E-AA2B-646B878FA20C__BCFCCBAF">Example 9-7</a> does not work with self-referential tables (tables with both the primary/unique key and the foreign key). Also, this trigger does not allow triggers to cycle (such as when A fires B, which fires A).</p>
</div>
<div class="example" id="GUID-DB24A169-3CB1-427E-AA2B-646B878FA20C__BCFCCBAF">
<p class="titleinexample">Example 9-7 UPDATE and DELETE RESTRICT Trigger for Parent Table</p>
<pre dir="ltr">CREATE OR REPLACE TRIGGER dept_restrict
  BEFORE DELETE OR UPDATE OF Deptno ON dept
  FOR EACH ROW

  -- Before row is deleted from dept or primary key (DEPTNO) of dept is updated,
  -- check for dependent foreign key values in emp;
  -- if any are found, roll back.

DECLARE
  Dummy                  INTEGER;  -- Use for cursor fetch
  employees_present      EXCEPTION;
  employees_not_present  EXCEPTION;
  PRAGMA EXCEPTION_INIT (employees_present, -4094);
  PRAGMA EXCEPTION_INIT (employees_not_present, -4095);

  -- Cursor used to check for dependent foreign key values.
  CURSOR Dummy_cursor (Dn NUMBER) IS
    SELECT Deptno FROM emp WHERE Deptno = Dn;

BEGIN
  OPEN Dummy_cursor (:OLD.Deptno);
  FETCH Dummy_cursor INTO Dummy;

  -- If dependent foreign key is found, raise user-specified
  -- error code and message. If not found, close cursor
  -- before allowing triggering statement to complete.

  IF Dummy_cursor%FOUND THEN
    RAISE employees_present;     -- Dependent rows exist
  ELSE
    RAISE employees_not_present; -- No dependent rows exist
  END IF;
  CLOSE Dummy_cursor;

EXCEPTION
  WHEN employees_present THEN
    CLOSE Dummy_cursor;
    Raise_application_error(-20001, &#39;Employees Present in&#39;
      || &#39; Department &#39; || TO_CHAR(:OLD.DEPTNO));
  WHEN employees_not_present THEN
    CLOSE Dummy_cursor;
END;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS776"></a><a id="LNPLS775"></a>
<div class="props_rev_3"><a id="GUID-58AD982C-22E6-4A62-A2CE-643BE8C4E821"></a>
<h4 id="LNPLS-GUID-58AD982C-22E6-4A62-A2CE-643BE8C4E821" class="sect4">UPDATE and DELETE SET NULL Trigger for Parent Table</h4>
<div>
<p>The trigger in <a href="triggers.htm#GUID-58AD982C-22E6-4A62-A2CE-643BE8C4E821__BCFBGFDJ">Example 9-8</a> enforces the <code class="codeph">UPDATE</code> and <code class="codeph">DELETE</code> <code class="codeph">SET</code> <code class="codeph">NULL</code> referential action on the primary key of the <code class="codeph">dept</code> table.</p>
<div class="example" id="GUID-58AD982C-22E6-4A62-A2CE-643BE8C4E821__BCFBGFDJ">
<p class="titleinexample">Example 9-8 UPDATE and DELETE SET NULL Trigger for Parent Table</p>
<pre dir="ltr">CREATE OR REPLACE TRIGGER dept_set_null
  AFTER DELETE OR UPDATE OF Deptno ON dept
  FOR EACH ROW

  -- Before row is deleted from dept or primary key (DEPTNO) of dept is updated,
  -- set all corresponding dependent foreign key values in emp to NULL:

BEGIN
  IF UPDATING AND :OLD.Deptno != :NEW.Deptno OR DELETING THEN
    UPDATE emp SET emp.Deptno = NULL
    WHERE emp.Deptno = :OLD.Deptno;
  END IF;
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS778"></a><a id="LNPLS777"></a>
<div class="props_rev_3"><a id="GUID-2B9DF77A-171D-472B-A8F0-FF9730261D07"></a>
<h4 id="LNPLS-GUID-2B9DF77A-171D-472B-A8F0-FF9730261D07" class="sect4">DELETE CASCADE Trigger for Parent Table</h4>
<div>
<p>The trigger in <a href="triggers.htm#GUID-2B9DF77A-171D-472B-A8F0-FF9730261D07__BCFHHHBD">Example 9-9</a> enforces the <code class="codeph">DELETE</code> <code class="codeph">CASCADE</code> referential action on the primary key of the <code class="codeph">dept</code> table.</p>
<div class="infobox-note" id="GUID-2B9DF77A-171D-472B-A8F0-FF9730261D07__GUID-2824F160-25B9-430B-809B-6D2DFBC9F55E">
<p class="notep1">Note:</p>
<p>Typically, the code for <code class="codeph">DELETE</code> <code class="codeph">CASCADE</code> is combined with the code for <code class="codeph">UPDATE</code> <code class="codeph">SET</code> <code class="codeph">NULL</code> or <code class="codeph">UPDATE</code> <code class="codeph">SET</code> <code class="codeph">DEFAULT</code>, to account for both updates and deletes.</p>
</div>
<div class="example" id="GUID-2B9DF77A-171D-472B-A8F0-FF9730261D07__BCFHHHBD">
<p class="titleinexample">Example 9-9 DELETE CASCADE Trigger for Parent Table</p>
<pre dir="ltr">CREATE OR REPLACE TRIGGER dept_del_cascade
  AFTER DELETE ON dept
  FOR EACH ROW

  -- Before row is deleted from dept,
  -- delete all rows from emp table whose DEPTNO is same as
  -- DEPTNO being deleted from dept table:

BEGIN
  DELETE FROM emp
  WHERE emp.Deptno = :OLD.Deptno;
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS780"></a><a id="LNPLS779"></a>
<div class="props_rev_3"><a id="GUID-193F9DBB-80B5-49FC-83D2-2FB533880833"></a>
<h4 id="LNPLS-GUID-193F9DBB-80B5-49FC-83D2-2FB533880833" class="sect4">UPDATE CASCADE Trigger for Parent Table</h4>
<div>
<p>The triggers in <a href="triggers.htm#GUID-193F9DBB-80B5-49FC-83D2-2FB533880833__BCFDBJDA">Example 9-10</a> ensure that if a department number is updated in the <code class="codeph">dept</code> table, then this change is propagated to dependent foreign keys in the <code class="codeph">emp</code> table.</p>
<div class="infobox-note" id="GUID-193F9DBB-80B5-49FC-83D2-2FB533880833__GUID-83C55361-3225-4780-A806-158CBEE33CCC">
<p class="notep1">Note:</p>
<p>Because the trigger <code class="codeph">dept_cascade2</code> updates the <code class="codeph">emp</code> table, the <code class="codeph">emp_dept_check</code> trigger in <a href="triggers.htm#GUID-2DC16B21-35B1-4D09-BD4E-02797AA278EA__BCFGAHIB">Example 9-6</a>, if enabled, also fires. The resulting mutating-table error is trapped by the <code class="codeph">emp_dept_check</code> trigger. Carefully test any triggers that require error trapping to succeed to ensure that they always work properly in your environment.</p>
</div>
<div class="example" id="GUID-193F9DBB-80B5-49FC-83D2-2FB533880833__BCFDBJDA">
<p class="titleinexample">Example 9-10 UPDATE CASCADE Trigger for Parent Table</p>
<pre dir="ltr">-- Generate sequence number to be used as flag
-- for determining if update occurred on column:

CREATE SEQUENCE Update_sequence
  INCREMENT BY 1 MAXVALUE 5000 CYCLE;

CREATE OR REPLACE PACKAGE Integritypackage AUTHID DEFINER AS
  Updateseq NUMBER;
END Integritypackage;
/
CREATE OR REPLACE PACKAGE BODY Integritypackage AS
END Integritypackage;
/
-- Create flag col:

ALTER TABLE emp ADD Update_id NUMBER;

CREATE OR REPLACE TRIGGER dept_cascade1
  BEFORE UPDATE OF Deptno ON dept
DECLARE
  -- Before updating dept table (this is a statement trigger),
  -- generate sequence number
  -- &amp; assign it to public variable UPDATESEQ of
  -- user-defined package named INTEGRITYPACKAGE:
BEGIN
  Integritypackage.Updateseq := Update_sequence.NEXTVAL;
END;
/
CREATE OR REPLACE TRIGGER dept_cascade2
  AFTER DELETE OR UPDATE OF Deptno ON dept
  FOR EACH ROW

  -- For each department number in dept that is updated,
  -- cascade update to dependent foreign keys in emp table.
  -- Cascade update only if child row was not updated by this trigger:
BEGIN
  IF UPDATING THEN
    UPDATE emp
    SET Deptno = :NEW.Deptno,
        Update_id = Integritypackage.Updateseq   --from 1st
    WHERE emp.Deptno = :OLD.Deptno
    AND Update_id IS NULL;

    /* Only NULL if not updated by 3rd trigger
       fired by same triggering statement */
  END IF;
  IF DELETING THEN
    -- After row is deleted from dept,
    -- delete all rows from emp table whose DEPTNO is same as
    -- DEPTNO being deleted from dept table:
    DELETE FROM emp
    WHERE emp.Deptno = :OLD.Deptno;
  END IF;
END;
/
CREATE OR REPLACE TRIGGER dept_cascade3
  AFTER UPDATE OF Deptno ON dept
BEGIN UPDATE emp
  SET Update_id = NULL
  WHERE Update_id = Integritypackage.Updateseq;
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS782"></a><a id="LNPLS781"></a>
<div class="props_rev_3"><a id="GUID-BF2DDD06-E6B4-4EB5-945F-89FFA8468D6F"></a>
<h4 id="LNPLS-GUID-BF2DDD06-E6B4-4EB5-945F-89FFA8468D6F" class="sect4">Triggers for Complex Constraint Checking</h4>
<div>
<p>Triggers can enforce integrity rules other than referential integrity. The trigger in <a href="triggers.htm#GUID-BF2DDD06-E6B4-4EB5-945F-89FFA8468D6F__BCFECGBI">Example 9-11</a> does a complex check before allowing the triggering statement to run.</p>
<div class="infobox-note" id="GUID-BF2DDD06-E6B4-4EB5-945F-89FFA8468D6F__GUID-496CB999-2424-4719-A947-6E839874356C">
<p class="notep1">Note:</p>
<p><a href="triggers.htm#GUID-BF2DDD06-E6B4-4EB5-945F-89FFA8468D6F__BCFECGBI">Example 9-11</a> needs this data structure:</p>
<pre dir="ltr">CREATE TABLE Salgrade (
  Grade               NUMBER,
  Losal               NUMBER,
  Hisal               NUMBER,
  Job_classification  VARCHAR2(9));
</pre></div>
<div class="example" id="GUID-BF2DDD06-E6B4-4EB5-945F-89FFA8468D6F__BCFECGBI">
<p class="titleinexample">Example 9-11 Trigger Checks Complex Constraints</p>
<pre dir="ltr">CREATE OR REPLACE TRIGGER salary_check
  BEFORE INSERT OR UPDATE OF Sal, Job ON Emp
  FOR EACH ROW

DECLARE
  Minsal               NUMBER;
  Maxsal               NUMBER;
  Salary_out_of_range  EXCEPTION;
  PRAGMA EXCEPTION_INIT (Salary_out_of_range, -4096);

BEGIN
  /* Retrieve minimum &amp; maximum salary for employee&#39;s new job classification
     from SALGRADE table into MINSAL and MAXSAL: */

  SELECT Losal, Hisal INTO Minsal, Maxsal
  FROM Salgrade
  WHERE Job_classification = :NEW.Job;

  /* If employee&#39;s new salary is less than or greater than
     job classification&#39;s limits, raise exception.
     Exception message is returned and pending INSERT or UPDATE statement
     that fired the trigger is rolled back: */

  IF (:NEW.Sal &lt; Minsal OR :NEW.Sal &gt; Maxsal) THEN
    RAISE Salary_out_of_range;
  END IF;
EXCEPTION
  WHEN Salary_out_of_range THEN
    Raise_application_error (
      -20300,
      &#39;Salary &#39;|| TO_CHAR(:NEW.Sal) ||&#39; out of range for &#39;
      || &#39;job classification &#39; ||:NEW.Job
      ||&#39; for employee &#39; || :NEW.Ename
    );
  WHEN NO_DATA_FOUND THEN
    Raise_application_error(-20322, &#39;Invalid Job Classification&#39;);
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS784"></a><a id="LNPLS783"></a>
<div class="props_rev_3"><a id="GUID-9E6E59EF-F402-4B11-A4FF-268D9C0521EB"></a>
<h4 id="LNPLS-GUID-9E6E59EF-F402-4B11-A4FF-268D9C0521EB" class="sect4">Triggers for Complex Security Authorizations</h4>
<div>
<p>Triggers are commonly used to enforce complex security authorizations for table data. Use triggers only to enforce complex security authorizations that you cannot define using the database security features provided with the database. For example, use a trigger to prohibit updates to the <code class="codeph">employee</code> table during weekends and nonworking hours.</p>
<p>When using a trigger to enforce a complex security authorization, it is best to use a <code class="codeph">BEFORE</code> statement trigger. Using a <code class="codeph">BEFORE</code> statement trigger has these benefits:</p>
<ul style="list-style-type: disc;">
<li>
<p>The security check is done before the triggering statement is allowed to run, so that no wasted work is done by an unauthorized statement.</p>
</li>
<li>
<p>The security check is done only for the triggering statement, not for each row affected by the triggering statement.</p>
</li>
</ul>
<p>The trigger in <a href="triggers.htm#GUID-9E6E59EF-F402-4B11-A4FF-268D9C0521EB__BCFGEBAA">Example 9-12</a> enforces security by raising exceptions when anyone tries to update the table <code class="codeph">employees</code> during weekends or nonworking hours.</p>
<div class="infoboxnotealso" id="GUID-9E6E59EF-F402-4B11-A4FF-268D9C0521EB__GUID-1DAE25DA-9CCD-4F7D-83A3-5EDC9D07B9D5">
<p class="notep1">See Also:</p>
<p><a class="olink DBSEG" target="_blank" href="../DBSEG/toc.htm"><span class="italic">Oracle Database Security Guide</span></a> for detailed information about database security features</p>
</div>
<div class="example" id="GUID-9E6E59EF-F402-4B11-A4FF-268D9C0521EB__BCFGEBAA">
<p class="titleinexample">Example 9-12 Trigger Enforces Security Authorizations</p>
<pre dir="ltr">CREATE OR REPLACE TRIGGER Employee_permit_changes
  BEFORE INSERT OR DELETE OR UPDATE ON employees
DECLARE
  Dummy             INTEGER;
  Not_on_weekends   EXCEPTION;
  Nonworking_hours  EXCEPTION;
  PRAGMA EXCEPTION_INIT (Not_on_weekends, -4097);
  PRAGMA EXCEPTION_INIT (Nonworking_hours, -4099);
BEGIN
   -- Check for weekends:
 
   IF (TO_CHAR(Sysdate, &#39;DAY&#39;) = &#39;SAT&#39; OR
     TO_CHAR(Sysdate, &#39;DAY&#39;) = &#39;SUN&#39;) THEN
       RAISE Not_on_weekends;
   END IF;
 
  -- Check for work hours (8am to 6pm):
 
  IF (TO_CHAR(Sysdate, &#39;HH24&#39;) &lt; 8 OR
    TO_CHAR(Sysdate, &#39;HH24&#39;) &gt; 18) THEN
      RAISE Nonworking_hours;
  END IF;
 
EXCEPTION
  WHEN Not_on_weekends THEN
    Raise_application_error(-20324,&#39;Might not change &#39;
      ||&#39;employee table during the weekend&#39;);
  WHEN Nonworking_hours THEN
    Raise_application_error(-20326,&#39;Might not change &#39;
     ||&#39;emp table during Nonworking hours&#39;);
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS785"></a>
<div class="props_rev_3"><a id="GUID-6DF46DC3-1311-4A93-B509-16B396901E97"></a>
<h4 id="LNPLS-GUID-6DF46DC3-1311-4A93-B509-16B396901E97" class="sect4">Triggers for Transparent Event Logging</h4>
<div>
<p>Triggers are very useful when you want to transparently do a related change in the database following certain events.</p>
<p>The <code class="codeph">REORDER</code> trigger example shows a trigger that reorders parts as necessary when certain conditions are met. (In other words, a triggering statement is entered, and the <code class="codeph">PARTS_ON_HAND</code> value is less than the <code class="codeph">REORDER_POINT</code> value.)</p>
</div>
</div>
<a id="LNPLS787"></a><a id="LNPLS786"></a>
<div class="props_rev_3"><a id="GUID-BD042B88-E2E7-4A7D-8FA2-8D0185F6455F"></a>
<h4 id="LNPLS-GUID-BD042B88-E2E7-4A7D-8FA2-8D0185F6455F" class="sect4">Triggers for Deriving Column Values</h4>
<div>
<p>Triggers can derive column values automatically, based upon a value provided by an <code class="codeph">INSERT</code> or <code class="codeph">UPDATE</code> statement. This type of trigger is useful to force values in specific columns that depend on the values of other columns in the same row. <code class="codeph">BEFORE</code> row triggers are necessary to complete this type of operation for these reasons:</p>
<ul style="list-style-type: disc;">
<li>
<p>The dependent values must be derived before the <code class="codeph">INSERT</code> or <code class="codeph">UPDATE</code> occurs, so that the triggering statement can use the derived values.</p>
</li>
<li>
<p>The trigger must fire for each row affected by the triggering <code class="codeph">INSERT</code> or <code class="codeph">UPDATE</code> statement.</p>
</li>
</ul>
<p>The trigger in <a href="triggers.htm#GUID-BD042B88-E2E7-4A7D-8FA2-8D0185F6455F__BCFDEHHE">Example 9-13</a> derives new column values for a table whenever a row is inserted or updated.</p>
<div class="infobox-note" id="GUID-BD042B88-E2E7-4A7D-8FA2-8D0185F6455F__GUID-EE67A5C1-D046-4C95-9514-EED2E852C087">
<p class="notep1">Note:</p>
<p><a href="triggers.htm#GUID-BD042B88-E2E7-4A7D-8FA2-8D0185F6455F__BCFDEHHE">Example 9-13</a> needs this change to this data structure:</p>
<pre dir="ltr">ALTER TABLE Emp ADD(
   Uppername   VARCHAR2(20),
   Soundexname VARCHAR2(20));
</pre></div>
<div class="example" id="GUID-BD042B88-E2E7-4A7D-8FA2-8D0185F6455F__BCFDEHHE">
<p class="titleinexample">Example 9-13 Trigger Derives New Column Values</p>
<pre dir="ltr">CREATE OR REPLACE TRIGGER Derived 
BEFORE INSERT OR UPDATE OF Ename ON Emp

/* Before updating the ENAME field, derive the values for
   the UPPERNAME and SOUNDEXNAME fields. Restrict users
   from updating these fields directly: */
FOR EACH ROW
BEGIN
  :NEW.Uppername := UPPER(:NEW.Ename);
  :NEW.Soundexname := SOUNDEX(:NEW.Ename);
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS788"></a>
<div class="props_rev_3"><a id="GUID-4F93F21E-BA7F-4378-87E6-46A8E4C03287"></a>
<h4 id="LNPLS-GUID-4F93F21E-BA7F-4378-87E6-46A8E4C03287" class="sect4">Triggers for Building Complex Updatable Views</h4>
<div>
<p>Views are an excellent mechanism to provide logical windows over table data. However, when the view query gets complex, the system implicitly cannot translate the DML on the view into those on the underlying tables. <code class="codeph">INSTEAD</code> <code class="codeph">OF</code> triggers help solve this problem. These triggers can be defined over views, and they fire instead of the actual DML.</p>
<p>Consider a library system where books are arranged by title. The library consists of a collection of book type objects:</p>
<pre dir="ltr">CREATE OR REPLACE TYPE Book_t AS OBJECT (
  Booknum    NUMBER,
  Title      VARCHAR2(20),
  Author     VARCHAR2(20),
  Available  CHAR(1)
);
/
CREATE OR REPLACE TYPE Book_list_t AS TABLE OF Book_t;
/
</pre>
<p>The table <code class="codeph">Book_table</code> is created and populated like this:</p>
<pre dir="ltr">DROP TABLE Book_table;
CREATE TABLE Book_table (
  Booknum    NUMBER,
  Section    VARCHAR2(20),
  Title      VARCHAR2(20),
  Author     VARCHAR2(20),
  Available  CHAR(1)
);
 
INSERT INTO Book_table (
  Booknum, Section, Title, Author, Available
) 
VALUES (
  121001, &#39;Classic&#39;, &#39;Iliad&#39;, &#39;Homer&#39;, &#39;Y&#39;
);
 
INSERT INTO Book_table (
  Booknum, Section, Title, Author, Available
) 
VALUES ( 
  121002, &#39;Novel&#39;, &#39;Gone with the Wind&#39;, &#39;Mitchell M&#39;, &#39;N&#39;
);
 
SELECT * FROM Book_table ORDER BY Booknum;
</pre>
<p>Result:</p>
<pre dir="ltr">   BOOKNUM SECTION              TITLE                AUTHOR               A
---------- -------------------- -------------------- -------------------- -
    121001 Classic              Iliad                Homer                Y
    121002 Novel                Gone with the Wind   Mitchell M           N
 
2 rows selected.
</pre>
<p>The table <code class="codeph">Library_table</code> is created and populated like this:</p>
<pre dir="ltr">DROP TABLE Library_table;
CREATE TABLE Library_table (Section VARCHAR2(20));
 
INSERT INTO Library_table (Section)
VALUES (&#39;Novel&#39;);
 
INSERT INTO Library_table (Section)
VALUES (&#39;Classic&#39;);
 
SELECT * FROM Library_table ORDER BY Section;
</pre>
<p>Result:</p>
<pre dir="ltr">SECTION
--------------------
Classic
Novel
 
2 rows selected.
</pre>
<p>You can define a complex view over the tables <code class="codeph">Book_table</code> and <code class="codeph">Library_table</code> to create a logical view of the library with sections and a collection of books in each section:</p>
<pre dir="ltr">CREATE OR REPLACE VIEW Library_view AS
  SELECT i.Section, CAST (
    MULTISET (
      SELECT b.Booknum, b.Title, b.Author, b.Available
      FROM Book_table b
      WHERE b.Section = i.Section
    ) AS Book_list_t
  ) BOOKLIST
  FROM Library_table i;
</pre>
<p>(For information about the <code class="codeph">CAST</code> function, see <a class="olink SQLRF00613" target="_blank" href="../SQLRF/functions024.htm#SQLRF00613"><span class="italic">Oracle Database SQL Language Reference</span></a>.)</p>
<p>Make <code class="codeph">Library_view</code> updatable by defining an <code class="codeph">INSTEAD</code> <code class="codeph">OF</code> trigger on it:</p>
<pre dir="ltr">CREATE OR REPLACE TRIGGER Library_trigger
  INSTEAD OF
  INSERT ON Library_view
  FOR EACH ROW
DECLARE
  Bookvar  Book_t;
  i        INTEGER;
BEGIN
  INSERT INTO Library_table
  VALUES (:NEW.Section);
 
  FOR i IN 1..:NEW.Booklist.COUNT LOOP
    Bookvar := :NEW.Booklist(i);
 
    INSERT INTO Book_table (
      Booknum, Section, Title, Author, Available      
    )
    VALUES (
      Bookvar.booknum, :NEW.Section, Bookvar.Title,
      Bookvar.Author, bookvar.Available
    );
  END LOOP;
END;
/
</pre>
<p>Insert a new row into <code class="codeph">Library_view</code>:</p>
<pre dir="ltr">INSERT INTO Library_view (Section, Booklist)
VALUES (
  &#39;History&#39;, 
  book_list_t (book_t (121330, &#39;Alexander&#39;, &#39;Mirth&#39;, &#39;Y&#39;))
);
</pre>
<p>See the effect on <code class="codeph">Library_view</code>:</p>
<pre dir="ltr">SELECT * FROM Library_view ORDER BY Section;
</pre>
<p>Result:</p>
<pre dir="ltr">SECTION
--------------------
BOOKLIST(BOOKNUM, TITLE, AUTHOR, AVAILABLE)
--------------------------------------------------------------------
 
Classic
BOOK_LIST_T(BOOK_T(121001, &#39;Iliad&#39;, &#39;Homer&#39;, &#39;Y&#39;))
 
History
BOOK_LIST_T(BOOK_T(121330, &#39;Alexander&#39;, &#39;Mirth&#39;, &#39;Y&#39;))
 
Novel
BOOK_LIST_T(BOOK_T(121002, &#39;Gone with the Wind&#39;, &#39;Mitchell M&#39;, &#39;N&#39;))
 
 
3 rows selected.
</pre>
<p>See the effect on <code class="codeph">Book_table</code>:</p>
<pre dir="ltr">SELECT * FROM Book_table ORDER BY Booknum;
</pre>
<p>Result:</p>
<pre dir="ltr">   BOOKNUM SECTION              TITLE                AUTHOR               A
---------- -------------------- -------------------- -------------------- -
    121001 Classic              Iliad                Homer                Y
    121002 Novel                Gone with the Wind   Mitchell M           N
    121330 History              Alexander            Mirth                Y
 
3 rows selected.
</pre>
<p>See the effect on <code class="codeph">Library_table</code>:</p>
<pre dir="ltr">SELECT * FROM Library_table ORDER BY Section;
</pre>
<p>Result:</p>
<pre dir="ltr">SECTION
--------------------
Classic
History
Novel
 
3 rows selected.
</pre>
<p>Similarly, you can also define triggers on the nested table <code class="codeph">booklist</code> to handle modification of the nested table element.</p>
</div>
</div>
<a id="LNPLS789"></a>
<div class="props_rev_3"><a id="GUID-86F46BD4-9225-41D0-AAF7-DA467F8412A9"></a>
<h4 id="LNPLS-GUID-86F46BD4-9225-41D0-AAF7-DA467F8412A9" class="sect4">Triggers for Fine-Grained Access Control</h4>
<div>
<p>You can use <code class="codeph">LOGON</code> triggers to run the package associated with an application context. An application context captures session-related information about the user who is logging in to the database. From there, your application can control how much access this user has, based on his or her session information.</p>
<div class="infobox-note" id="GUID-86F46BD4-9225-41D0-AAF7-DA467F8412A9__GUID-F4A0E51B-E376-42AF-A345-AA0495BB2797">
<p class="notep1">Note:</p>
<p>If you have very specific logon requirements, such as preventing users from logging in from outside the firewall or after work hours, consider using Oracle Database Vault instead of <code class="codeph">LOGON</code> triggers. With Oracle Database Vault, you can create custom rules to strictly control user access.</p>
</div>
<div class="infoboxnotealso" id="GUID-86F46BD4-9225-41D0-AAF7-DA467F8412A9__GUID-ED043872-4D04-49DA-8428-691F566AA99E">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a class="olink DBSEG60634" target="_blank" href="../DBSEG/app_context.htm#DBSEG60634"><span class="italic">Oracle Database Security Guide</span></a> for information about creating a <code class="codeph">LOGON</code> trigger to run a database session application context package</p>
</li>
<li>
<p><a class="olink DVADM" target="_blank" href="../DVADM/toc.htm"><span class="italic">Oracle Database Vault Administrator&#39;s Guide</span></a> for information about Oracle Database Vault</p>
</li>
</ul>
</div>
</div>
</div>
</div>
</div>
<a id="LNPLS663"></a><a id="LNPLS664"></a><a id="LNPLS724"></a><a id="LNPLS669"></a><a id="LNPLS682"></a><a id="LNPLS99955"></a>
<div class="props_rev_3"><a id="GUID-4CF74E99-8859-4AB1-96E7-07898A2ABB9E"></a>
<h2 id="LNPLS-GUID-4CF74E99-8859-4AB1-96E7-07898A2ABB9E" class="sect2">Correlation Names and Pseudorecords</h2>
<div>
<div class="infobox-note" id="GUID-4CF74E99-8859-4AB1-96E7-07898A2ABB9E__GUID-DC263258-1EEF-4F4F-AC13-627BC769A001">
<p class="notep1">Note:</p>
<p>This topic applies only to triggers that fire at row level. That is:</p>
<ul style="list-style-type: disc;">
<li>
<p>Row-level simple DML triggers</p>
</li>
<li>
<p>Compound DML triggers with row-level timing point sections</p>
</li>
</ul>
</div>
<p>A trigger that fires at row level can access the data in the row that it is processing by using <span class="bold">correlation names</span>. The default correlation names are <code class="codeph">OLD</code>, <code class="codeph">NEW</code>, and <code class="codeph">PARENT</code>. To change the correlation names, use the <code class="codeph">REFERENCING</code> clause of the <code class="codeph">CREATE</code> <code class="codeph">TRIGGER</code> statement (see <span class="q">&#34;<a href="create_trigger.htm#GUID-AF9E33F1-64D1-4382-A6A4-EC33C36F237B__BABEBAAB">referencing_clause ::=</a>&#34;</span>).</p>
<p>If the trigger is created on a nested table, then <code class="codeph">OLD</code> and <code class="codeph">NEW</code> refer to the current row of the nested table, and <code class="codeph">PARENT</code> refers to the current row of the parent table. If the trigger is created on a table or view, then <code class="codeph">OLD</code> and <code class="codeph">NEW</code> refer to the current row of the table or view, and <code class="codeph">PARENT</code> is undefined.</p>
<p><code class="codeph">OLD</code>, <code class="codeph">NEW</code>, and <code class="codeph">PARENT</code> are also called <span class="bold">pseudorecords</span>, because they have record structure, but are allowed in fewer contexts than records are. The structure of a pseudorecord is <span class="italic"><code class="codeph">table_name</code></span><code class="codeph">%ROWTYPE</code>, where <span class="italic"><code class="codeph">table_name</code></span> is the name of the table on which the trigger is created (for <code class="codeph">OLD</code> and <code class="codeph">NEW</code>) or the name of the parent table (for <code class="codeph">PARENT</code>).</p>
<p>In the <span class="italic"><code class="codeph">trigger_body</code></span> of a simple trigger or the <span class="italic"><code class="codeph">tps_body</code></span> of a compound trigger, a correlation name is a placeholder for a bind variable. Reference the field of a pseudorecord with this syntax:</p>
<pre dir="ltr">:<span class="italic">pseudorecord_name</span>.<span class="italic">field_name</span>
</pre>
<p>In the <code class="codeph">WHEN</code> clause of a conditional trigger, a correlation name is not a placeholder for a bind variable. Therefore, omit the colon in the preceding syntax.</p>
<p><a href="triggers.htm#GUID-4CF74E99-8859-4AB1-96E7-07898A2ABB9E__CIHDBHIH" title="This table has three columns. The first column lists the three possible triggering statements for a DML trigger. The second and third columns list the field values of the pseudorecords OLD and NEW, respectively, for each triggering statement.">Table 9-4</a> shows the values of <code class="codeph">OLD</code> and <code class="codeph">NEW</code> fields for the row that the triggering statement is processing.</p>
<div class="tblformal" id="GUID-4CF74E99-8859-4AB1-96E7-07898A2ABB9E__CIHDBHIH">
<p class="titleintable">Table 9-4 OLD and NEW Pseudorecord Field Values</p>
<table class="cellalignment876" title="OLD and NEW Pseudorecord Field Values" summary="This table has three columns. The first column lists the three possible triggering statements for a DML trigger. The second and third columns list the field values of the pseudorecords OLD and NEW, respectively, for each triggering statement.">
<thead>
<tr class="cellalignment870">
<th class="cellalignment953" id="d65654e3955">Triggering Statement</th>
<th class="cellalignment900" id="d65654e3958">OLD.field Value</th>
<th class="cellalignment954" id="d65654e3964">NEW.field Value</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment870">
<td class="cellalignment955" id="d65654e3972" headers="d65654e3955">
<p><code class="codeph">INSERT</code></p>
</td>
<td class="cellalignment903" headers="d65654e3972 d65654e3958">
<p><code class="codeph">NULL</code></p>
</td>
<td class="cellalignment956" headers="d65654e3972 d65654e3964">
<p>Post-insert value</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment955" id="d65654e3984" headers="d65654e3955">
<p><code class="codeph">UPDATE</code></p>
</td>
<td class="cellalignment903" headers="d65654e3984 d65654e3958">
<p>Pre-update value</p>
</td>
<td class="cellalignment956" headers="d65654e3984 d65654e3964">
<p>Post-update value</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment955" id="d65654e3995" headers="d65654e3955">
<p><code class="codeph">DELETE</code></p>
</td>
<td class="cellalignment903" headers="d65654e3995 d65654e3958">
<p>Pre-delete value</p>
</td>
<td class="cellalignment956" headers="d65654e3995 d65654e3964">
<p><code class="codeph">NULL</code></p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>The restrictions on pseudorecords are:</p>
<ul style="list-style-type: disc;">
<li>
<p>A pseudorecord cannot appear in a record-level operation.</p>
<p>For example, the trigger cannot include this statement:</p>
<pre dir="ltr">:NEW := NULL;
</pre></li>
<li>
<p>A pseudorecord cannot be an actual subprogram parameter.</p>
<p>(A pseudorecord field can be an actual subprogram parameter.)</p>
</li>
<li>
<p>The trigger cannot change <code class="codeph">OLD</code> field values.</p>
<p>Trying to do so raises ORA-04085.</p>
</li>
<li>
<p>If the triggering statement is <code class="codeph">DELETE</code>, then the trigger cannot change <code class="codeph">NEW</code> field values.</p>
<p>Trying to do so raises ORA-04084.</p>
</li>
<li>
<p>An <code class="codeph">AFTER</code> trigger cannot change <code class="codeph">NEW</code> field values, because the triggering statement runs before the trigger fires.</p>
<p>Trying to do so raises ORA-04084.</p>
</li>
</ul>
<p>A <code class="codeph">BEFORE</code> trigger can change <code class="codeph">NEW</code> field values before a triggering <code class="codeph">INSERT</code> or <code class="codeph">UPDATE</code> statement puts them in the table.</p>
<p>If a statement triggers both a <code class="codeph">BEFORE</code> trigger and an <code class="codeph">AFTER</code> trigger, and the <code class="codeph">BEFORE</code> trigger changes a <code class="codeph">NEW</code> field value, then the <code class="codeph">AFTER</code> trigger &#34;sees&#34; that change.</p>
<p><a href="triggers.htm#GUID-4CF74E99-8859-4AB1-96E7-07898A2ABB9E__BCFBDJEC">Example 9-14</a> creates a log table and a trigger that inserts a row in the log table after any <code class="codeph">UPDATE</code> statement affects the <code class="codeph">SALARY</code> column of the <code class="codeph">EMPLOYEES</code> table, and then updates <code class="codeph">EMPLOYEES</code>.<code class="codeph">SALARY</code> and shows the log table.</p>
<p><a href="triggers.htm#GUID-4CF74E99-8859-4AB1-96E7-07898A2ABB9E__CIHHEJCD">Example 9-15</a> creates a conditional trigger that prints salary change information whenever a <code class="codeph">DELETE</code>, <code class="codeph">INSERT</code>, or <code class="codeph">UPDATE</code> statement affects the <code class="codeph">EMPLOYEES</code> table&mdash;unless that information is about the President. The database evaluates the <code class="codeph">WHEN</code> condition for each affected row. If the <code class="codeph">WHEN</code> condition is <code class="codeph">TRUE</code> for an affected row, then the trigger fires for that row before the triggering statement runs. If the <code class="codeph">WHEN</code> condition is not <code class="codeph">TRUE</code> for an affected row, then trigger does not fire for that row, but the triggering statement still runs.</p>
<p><a href="triggers.htm#GUID-4CF74E99-8859-4AB1-96E7-07898A2ABB9E__BCFJDBEH">Example 9-16</a> creates an <code class="codeph">UPDATE</code> trigger that modifies <code class="codeph">CLOB</code> columns. (For information about <code class="codeph">TO_CLOB</code> and other conversion functions, see <a class="olink SQLRF20034" target="_blank" href="../SQLRF/functions002.htm#SQLRF20034"><span class="italic">Oracle Database SQL Language Reference</span></a>.)</p>
<p><a href="triggers.htm#GUID-4CF74E99-8859-4AB1-96E7-07898A2ABB9E__BCFIAABG">Example 9-17</a> creates a table with the same name as a correlation name, <code class="codeph">new</code>, and then creates a trigger on that table. To avoid conflict between the table name and the correlation name, the trigger references the correlation name as <code class="codeph">Newest</code>.</p>
<div class="example" id="GUID-4CF74E99-8859-4AB1-96E7-07898A2ABB9E__BCFBDJEC">
<p class="titleinexample">Example 9-14 Trigger Logs Changes to EMPLOYEES.SALARY</p>
<p>Create log table:</p>
<pre dir="ltr">DROP TABLE Emp_log;
CREATE TABLE Emp_log (
  Emp_id     NUMBER,
  Log_date   DATE,
  New_salary NUMBER,
  Action     VARCHAR2(20));
 
</pre>
<p>Create trigger that inserts row in log table after <code class="codeph">EMPLOYEES</code>.<code class="codeph">SALARY</code> is updated:</p>
<pre dir="ltr">CREATE OR REPLACE TRIGGER log_salary_increase
  AFTER UPDATE OF salary ON employees
  FOR EACH ROW
BEGIN
  INSERT INTO Emp_log (Emp_id, Log_date, New_salary, Action)
  VALUES (:NEW.employee_id, SYSDATE, :NEW.salary, &#39;New Salary&#39;);
END;
/
</pre>
<p>Update <code class="codeph">EMPLOYEES</code>.<code class="codeph">SALARY</code>:</p>
<pre dir="ltr">UPDATE employees
SET salary = salary + 1000.0
WHERE Department_id = 20;
 
</pre>
<p>Result:</p>
<pre dir="ltr">2 rows updated.
 
</pre>
<p>Show log table:</p>
<pre dir="ltr">SELECT * FROM Emp_log;
 
</pre>
<p>Result:</p>
<pre dir="ltr">    EMP_ID LOG_DATE  NEW_SALARY ACTION
---------- --------- ---------- --------------------
       201 28-APR-10      13650 New Salary
       202 28-APR-10       6300 New Salary
 
2 rows selected.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-4CF74E99-8859-4AB1-96E7-07898A2ABB9E__CIHHEJCD">
<p class="titleinexample">Example 9-15 Conditional Trigger Prints Salary Change Information</p>
<pre dir="ltr">CREATE OR REPLACE TRIGGER print_salary_changes
  BEFORE DELETE OR INSERT OR UPDATE ON employees
  FOR EACH ROW
  <span class="bold">WHEN (NEW.job_id &lt;&gt; &#39;AD_PRES&#39;)  -- do not print information about President</span>
DECLARE
  sal_diff  NUMBER;
BEGIN
  sal_diff  := :NEW.salary  - :OLD.salary;
  DBMS_OUTPUT.PUT(:NEW.last_name || &#39;: &#39;);
  DBMS_OUTPUT.PUT(&#39;Old salary = &#39; || :OLD.salary || &#39;, &#39;);
  DBMS_OUTPUT.PUT(&#39;New salary = &#39; || :NEW.salary || &#39;, &#39;);
  DBMS_OUTPUT.PUT_LINE(&#39;Difference: &#39; || sal_diff);
END;
/
</pre>
<p>Query:</p>
<pre dir="ltr">SELECT last_name, department_id, salary, job_id
FROM employees
WHERE department_id IN (10, 20, 90)
ORDER BY department_id, last_name;
 
</pre>
<p>Result:</p>
<pre dir="ltr">LAST_NAME                 DEPARTMENT_ID     SALARY JOB_ID
------------------------- ------------- ---------- ----------
Whalen                               10       4200 AD_ASST
Fay                                  20       6000 MK_REP
Hartstein                            20      13000 MK_MAN
De Haan                              90      17000 AD_VP
<span class="bold">King                                 90      24000 AD_PRES</span>
Kochhar                              90      17000 AD_VP
 
<span class="bold">6 rows selected.</span>
</pre>
<p>Triggering statement:</p>
<pre dir="ltr">UPDATE employees
SET salary = salary * 1.05
WHERE department_id IN (10, 20, 90);
</pre>
<p>Result:</p>
<pre dir="ltr">Whalen: Old salary = 4200, New salary = 4410, Difference: 210
Hartstein: Old salary = 13000, New salary = 13650, Difference: 650
Fay: Old salary = 6000, New salary = 6300, Difference: 300
Kochhar: Old salary = 17000, New salary = 17850, Difference: 850
De Haan: Old salary = 17000, New salary = 17850, Difference: 850
 
<span class="bold">6 rows updated.</span>
</pre>
<p>Query:</p>
<pre dir="ltr">SELECT salary FROM employees WHERE job_id = &#39;AD_PRES&#39;;
</pre>
<p>Result:</p>
<pre dir="ltr">    SALARY
----------
     <span class="bold">25200</span>
 
1 row selected.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-4CF74E99-8859-4AB1-96E7-07898A2ABB9E__BCFJDBEH">
<p class="titleinexample">Example 9-16 Trigger Modifies CLOB Columns</p>
<pre dir="ltr">DROP TABLE tab1;
CREATE TABLE tab1 (<span class="bold">c1 CLOB</span>);
INSERT INTO tab1 VALUES (&#39;&lt;h1&gt;HTML Document Fragment&lt;/h1&gt;&lt;p&gt;Some text.&#39;, 3);

CREATE OR REPLACE TRIGGER trg1
  BEFORE UPDATE ON tab1
  FOR EACH ROW
BEGIN
  DBMS_OUTPUT.PUT_LINE(&#39;Old value of CLOB column: &#39;||:OLD.c1);
  DBMS_OUTPUT.PUT_LINE(&#39;Proposed new value of CLOB column: &#39;||:NEW.c1);

  <span class="bold">:NEW.c1 := :NEW.c1 || TO_CLOB(&#39;&lt;hr&gt;&lt;p&gt;Standard footer paragraph.&#39;);</span>

  DBMS_OUTPUT.PUT_LINE(&#39;Final value of CLOB column: &#39;||:NEW.c1);
END;
/ 

SET SERVEROUTPUT ON;
UPDATE tab1 SET c1 = &#39;&lt;h1&gt;Different Document Fragment&lt;/h1&gt;&lt;p&gt;Different text.&#39;;

SELECT * FROM tab1;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-4CF74E99-8859-4AB1-96E7-07898A2ABB9E__BCFIAABG">
<p class="titleinexample">Example 9-17 Trigger with REFERENCING Clause</p>
<pre dir="ltr">CREATE TABLE new (
  field1  NUMBER,
  field2  VARCHAR2(20)
);

CREATE OR REPLACE TRIGGER Print_salary_changes
BEFORE UPDATE ON new
<span class="bold">REFERENCING new AS Newest</span>
FOR EACH ROW
BEGIN
  <span class="bold">:Newest</span>.Field2 := TO_CHAR (<span class="bold">:newest</span>.field1);
END;
/
</pre></div>
<!-- class="example" --></div>
<a id="LNPLS753"></a><a id="LNPLS752"></a>
<div class="props_rev_3"><a id="GUID-C42CC16B-EAC1-4093-85C8-6359D08C912F"></a>
<h3 id="LNPLS-GUID-C42CC16B-EAC1-4093-85C8-6359D08C912F" class="sect3">OBJECT_VALUE Pseudocolumn</h3>
<div>
<p>A DML trigger on an object table can reference the SQL pseudocolumn <code class="codeph">OBJECT_VALUE</code>, which returns system-generated names for the columns of the object table. The trigger can also invoke a PL/SQL subprogram that has a formal <code class="codeph">IN</code> parameter whose data type is <code class="codeph">OBJECT_VALUE</code>.</p>
<div class="infoboxnotealso" id="GUID-C42CC16B-EAC1-4093-85C8-6359D08C912F__GUID-6221940E-4F3A-430B-9969-526A83B18955">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a class="olink SQLRF50952" target="_blank" href="../SQLRF/pseudocolumns006.htm#SQLRF50952"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about <code class="codeph">OBJECT_VALUE</code></p>
</li>
<li>
<p><a class="olink SQLRF0025" target="_blank" href="../SQLRF/pseudocolumns.htm#SQLRF0025"><span class="italic">Oracle Database SQL Language Reference</span></a> for general information about pseudocolumns</p>
</li>
</ul>
</div>
<p><a href="triggers.htm#GUID-C42CC16B-EAC1-4093-85C8-6359D08C912F__BCFFIBBA">Example 9-18</a> creates object table <code class="codeph">tbl</code>, table <code class="codeph">tbl_history</code> for logging updates to <code class="codeph">tbl</code>, and trigger <code class="codeph">Tbl_Trg</code>. The trigger runs for each row of <code class="codeph">tb1</code> that is affected by a DML statement, causing the old and new values of the object <code class="codeph">t</code> in <code class="codeph">tbl</code> to be written in <code class="codeph">tbl_history</code>. The old and new values are :<code class="codeph">OLD</code>.<code class="codeph">OBJECT_VALUE</code> and :<code class="codeph">NEW</code>.<code class="codeph">OBJECT_VALUE</code>.</p>
<p>All values of column <code class="codeph">n</code> were increased by 1. The value of <code class="codeph">m</code> remains 0.</p>
<div class="example" id="GUID-C42CC16B-EAC1-4093-85C8-6359D08C912F__BCFFIBBA">
<p class="titleinexample">Example 9-18 Trigger References OBJECT_VALUE Pseudocolumn</p>
<p>Create, populate, and show object table:</p>
<pre dir="ltr">CREATE OR REPLACE TYPE t AUTHID DEFINER AS OBJECT (n NUMBER, m NUMBER)
/
CREATE TABLE tbl OF t
/
BEGIN
  FOR j IN 1..5 LOOP
    INSERT INTO tbl VALUES (t(j, 0));
  END LOOP;
END;
/
SELECT * FROM tbl ORDER BY n;
</pre>
<p>Result:</p>
<pre dir="ltr">         N          M
---------- ----------
         1          0
         2          0
         3          0
         4          0
         5          0

5 rows selected.
</pre>
<p>Create history table and trigger:</p>
<pre dir="ltr">CREATE TABLE tbl_history ( d DATE, old_obj t, new_obj t)
/
CREATE OR REPLACE TRIGGER Tbl_Trg
  AFTER UPDATE ON tbl
  FOR EACH ROW
BEGIN
  INSERT INTO tbl_history (d, old_obj, new_obj)
  VALUES (SYSDATE, <span class="bold">:OLD.OBJECT_VALUE</span>, <span class="bold">:NEW.OBJECT_VALUE</span>);
END Tbl_Trg;
/
 
</pre>
<p>Update object table:</p>
<pre dir="ltr">UPDATE tbl SET tbl.n = tbl.n+1
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">5 rows updated.
</pre>
<p>Show old and new values:</p>
<pre dir="ltr">BEGIN
  FOR j IN (SELECT d, old_obj, new_obj FROM tbl_history) LOOP
    DBMS_OUTPUT.PUT_LINE (
      j.d ||
      &#39; -- old: &#39; || j.old_obj.n || &#39; &#39; || j.old_obj.m ||
      &#39; -- new: &#39; || j.new_obj.n || &#39; &#39; || j.new_obj.m
    );
  END LOOP;
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">28-APR-10 -- old: 1 0 -- new: 2 0
28-APR-10 -- old: 2 0 -- new: 3 0
28-APR-10 -- old: 3 0 -- new: 4 0
28-APR-10 -- old: 4 0 -- new: 5 0
28-APR-10 -- old: 5 0 -- new: 6 0
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="LNPLS99887"></a>
<div class="props_rev_3"><a id="GUID-FE23FCE8-DE36-41EF-80A9-6B4B49E80E5B"></a>
<h2 id="LNPLS-GUID-FE23FCE8-DE36-41EF-80A9-6B4B49E80E5B" class="sect2">System Triggers</h2>
<div>
<p>A <span class="bold">system trigger</span> is created on either a schema or the database. Its triggering event is composed of either DDL statements (listed in <span class="q">&#34;<a href="create_trigger.htm#GUID-AF9E33F1-64D1-4382-A6A4-EC33C36F237B__CIHBDEFD">ddl_event</a>&#34;</span>) or database operation statements (listed in <span class="q">&#34;<a href="create_trigger.htm#GUID-AF9E33F1-64D1-4382-A6A4-EC33C36F237B__CIHBABAH">database_event</a>&#34;</span>).</p>
<p>A system trigger fires at exactly one of these timing points:</p>
<ul style="list-style-type: disc;">
<li>
<p>Before the triggering statement runs</p>
<p>(The trigger is called a <span class="italic"><code class="codeph">BEFORE</code></span> <span class="italic">statement trigger</span> or <span class="italic">statement-level</span> <span class="italic"><code class="codeph">BEFORE</code></span> <span class="italic">trigger.</span>)</p>
</li>
<li>
<p>After the triggering statement runs</p>
<p>(The trigger is called a <span class="italic"><code class="codeph">AFTER</code></span> <span class="italic">statement trigger</span> or <span class="italic">statement-level</span> <span class="italic"><code class="codeph">AFTER</code></span> <span class="italic">trigger.</span>)</p>
</li>
<li>
<p>Instead of the triggering <code class="codeph">CREATE</code> statement</p>
<p>(The trigger is called an <span class="italic"><code class="codeph">INSTEAD</code></span> <span class="italic"><code class="codeph">OF</code></span> <span class="italic"><code class="codeph">CREATE</code></span> <span class="italic">trigger</span>.)</p>
</li>
</ul>
<p>Topics</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="triggers.htm#GUID-6CF3A208-0BE7-45FF-928C-A755526933D0">SCHEMA Triggers</a></p>
</li>
<li>
<p><a href="triggers.htm#GUID-AC093015-E9EA-47B1-8B0C-51A1860AB12D">DATABASE Triggers</a></p>
</li>
<li>
<p><a href="triggers.htm#GUID-7B32FE4B-AB8E-48B0-A74C-599584A485A7">INSTEAD OF CREATE Triggers</a></p>
</li>
</ul>
</div>
<a id="LNPLS683"></a><a id="LNPLS99886"></a>
<div class="props_rev_3"><a id="GUID-6CF3A208-0BE7-45FF-928C-A755526933D0"></a>
<h3 id="LNPLS-GUID-6CF3A208-0BE7-45FF-928C-A755526933D0" class="sect3">SCHEMA Triggers</h3>
<div>
<p>A <span class="bold"><code class="codeph">SCHEMA</code></span> <span class="bold">trigger</span> is created on a schema and fires whenever the user who owns it is the current user and initiates the triggering event.</p>
<p>Suppose that both user1 and user2 own schema triggers, and user1 invokes a DR unit owned by user2. Inside the DR unit, user2 is the current user. Therefore, if the DR unit initiates the triggering event of a schema trigger that user2 owns, then that trigger fires. However, if the DR unit initiates the triggering event of a schema trigger that user1 owns, then that trigger does not fire.</p>
<p><a href="triggers.htm#GUID-6CF3A208-0BE7-45FF-928C-A755526933D0__CIHFGGEH">Example 9-19</a> creates a <code class="codeph">BEFORE</code> statement trigger on the sample schema <code class="codeph">HR</code>. When a user connected as <code class="codeph">HR</code> tries to drop a database object, the database fires the trigger before dropping the object.</p>
<div class="example" id="GUID-6CF3A208-0BE7-45FF-928C-A755526933D0__CIHFGGEH">
<p class="titleinexample">Example 9-19 BEFORE Statement Trigger on Sample Schema HR</p>
<pre dir="ltr">CREATE OR REPLACE TRIGGER drop_trigger
  BEFORE DROP ON hr.SCHEMA
  BEGIN
    RAISE_APPLICATION_ERROR (
      num =&gt; -20000,
      msg =&gt; &#39;Cannot drop object&#39;);
  END;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS685"></a><a id="LNPLS745"></a><a id="LNPLS99885"></a>
<div class="props_rev_3"><a id="GUID-AC093015-E9EA-47B1-8B0C-51A1860AB12D"></a>
<h3 id="LNPLS-GUID-AC093015-E9EA-47B1-8B0C-51A1860AB12D" class="sect3">DATABASE Triggers</h3>
<div>
<p>A <span class="bold"><code class="codeph">DATABASE</code></span> <span class="bold">trigger</span> is created on the database and fires whenever any database user initiates the triggering event.</p>
<p><a href="triggers.htm#GUID-AC093015-E9EA-47B1-8B0C-51A1860AB12D__CIHEBJDD">Example 9-20</a> shows the basic syntax for a trigger to log errors. This trigger fires after an unsuccessful statement execution, such as unsuccessful logon.</p>
<div class="infobox-note" id="GUID-AC093015-E9EA-47B1-8B0C-51A1860AB12D__GUID-80377E02-44E9-45DE-A77A-58DF0473145A">
<p class="notep1">Note:</p>
<p>An <code class="codeph">AFTER</code> <code class="codeph">SERVERERROR</code> trigger fires only if Oracle relational database management system (RDBMS) determines that it is safe to fire error triggers. For more information about <code class="codeph">AFTER</code> <code class="codeph">SERVERERROR</code> triggers, see <a href="create_trigger.htm#GUID-AF9E33F1-64D1-4382-A6A4-EC33C36F237B">CREATE TRIGGER Statement</a>.</p>
</div>
<p>The trigger in <a href="triggers.htm#GUID-AC093015-E9EA-47B1-8B0C-51A1860AB12D__CIHEFABC">Example 9-21</a> runs the procedure <code class="codeph">check_user</code> after a user logs onto the database.</p>
<div class="example" id="GUID-AC093015-E9EA-47B1-8B0C-51A1860AB12D__CIHEBJDD">
<p class="titleinexample">Example 9-20 AFTER Statement Trigger on Database</p>
<pre dir="ltr">CREATE TRIGGER log_errors
  AFTER SERVERERROR ON DATABASE
  BEGIN
    IF (IS_SERVERERROR (1017)) THEN
      NULL;  -- (substitute code that processes logon error)
    ELSE
      NULL;  -- (substitute code that logs error code)
    END IF;
  END;
/
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-AC093015-E9EA-47B1-8B0C-51A1860AB12D__CIHEFABC">
<p class="titleinexample">Example 9-21 Trigger Monitors Logons</p>
<pre dir="ltr">CREATE OR REPLACE TRIGGER check_user
  AFTER LOGON ON DATABASE
  BEGIN
    check_user;
  EXCEPTION
    WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR
        (-20000, &#39;Unexpected error: &#39;|| DBMS_Utility.Format_Error_Stack);
 END;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS1967"></a><a id="LNPLS1915"></a>
<div class="props_rev_3"><a id="GUID-7B32FE4B-AB8E-48B0-A74C-599584A485A7"></a>
<h3 id="LNPLS-GUID-7B32FE4B-AB8E-48B0-A74C-599584A485A7" class="sect3">INSTEAD OF CREATE Triggers</h3>
<div>
<p>An <code class="codeph">INSTEAD</code> <code class="codeph">OF</code> <code class="codeph">CREATE</code> trigger is a <code class="codeph">SCHEMA</code> trigger whose triggering event is a <code class="codeph">CREATE</code> statement. The database fires the trigger instead of executing its triggering statement.</p>
<p><a href="triggers.htm#GUID-7B32FE4B-AB8E-48B0-A74C-599584A485A7__CIHBJFDG">Example 9-22</a> shows the basic syntax for an <code class="codeph">INSTEAD</code> <code class="codeph">OF</code> <code class="codeph">CREATE</code> trigger on the current schema. This trigger fires when the owner of the current schema issues a <code class="codeph">CREATE</code> statement in the current schema.</p>
<div class="example" id="GUID-7B32FE4B-AB8E-48B0-A74C-599584A485A7__CIHBJFDG">
<p class="titleinexample">Example 9-22 INSTEAD OF CREATE Trigger on Schema</p>
<pre dir="ltr">CREATE OR REPLACE TRIGGER t
  INSTEAD OF CREATE ON SCHEMA
  BEGIN
    EXECUTE IMMEDIATE &#39;CREATE TABLE T (n NUMBER, m NUMBER)&#39;;
  END;
/
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="LNPLS746"></a><a id="LNPLS99884"></a>
<div class="props_rev_3"><a id="GUID-E11CFB2F-064F-42EB-8390-F025564AD107"></a>
<h2 id="LNPLS-GUID-E11CFB2F-064F-42EB-8390-F025564AD107" class="sect2">Subprograms Invoked by Triggers</h2>
<div>
<p>Triggers can invoke subprograms written in PL/SQL, C, and Java. The trigger in <a href="triggers.htm#GUID-B5E654D9-5875-40EC-AE24-E3A8CB37C9C5__CIHGJFAB">Example 9-4</a> invokes a PL/SQL subprogram. The trigger in <a href="triggers.htm#GUID-E11CFB2F-064F-42EB-8390-F025564AD107__CIHGEEIC">Example 9-23</a> invokes a Java subprogram.</p>
<p>A subprogram invoked by a trigger cannot run transaction control statements, because the subprogram runs in the context of the trigger body.</p>
<p>If a trigger invokes an invoker rights (IR) subprogram, then the user who created the trigger, not the user who ran the triggering statement, is considered to be the current user. For information about IR subprograms, see <span class="q">&#34;<a href="subprograms.htm#GUID-41D23DE7-3C07-41CF-962B-F92B696594B5">Invoker&#39;s Rights and Definer&#39;s Rights (AUTHID Property)</a>&#34;</span>.</p>
<p>If a trigger invokes a remote subprogram, and a time stamp or signature mismatch is found during execution of the trigger, then the remote subprogram does not run and the trigger is invalidated.</p>
<div class="example" id="GUID-E11CFB2F-064F-42EB-8390-F025564AD107__CIHGEEIC">
<p class="titleinexample">Example 9-23 Trigger Invokes Java Subprogram</p>
<pre dir="ltr">CREATE OR REPLACE <span class="bold">PROCEDURE Before_delete (Id IN NUMBER, Ename VARCHAR2)</span>
IS <span class="bold">LANGUAGE Java</span>
name &#39;thjvTriggers.beforeDelete (oracle.sql.NUMBER, oracle.sql.CHAR)&#39;;

CREATE OR REPLACE <span class="bold">TRIGGER Pre_del_trigger</span> BEFORE DELETE ON Tab 
FOR EACH ROW
<span class="bold">CALL Before_delete (:OLD.Id, :OLD.Ename)</span>
/
</pre>
<p>The corresponding Java file is <code class="codeph">thjvTriggers</code>.<code class="codeph">java</code>:</p>
<pre dir="ltr">import java.sql.*
import java.io.*
import oracle.sql.*
import oracle.oracore.*
public class thjvTriggers
{
public static void
beforeDelete (NUMBER old_id, CHAR old_name)
Throws SQLException, CoreException
   {
   Connection conn = JDBCConnection.defaultConnection();
   Statement stmt = conn.CreateStatement();
   String sql = &#34;insert into logtab values
   (&#34;+ old_id.intValue() +&#34;, &#39;&#34;+ old_ename.toString() + &#34;, BEFORE DELETE&#39;);
   stmt.executeUpdate (sql);
   stmt.close();
   return;
   }
}
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS2007"></a>
<div class="props_rev_3"><a id="GUID-39111AAC-597E-4661-82A6-F3BE621F75BB"></a>
<h2 id="LNPLS-GUID-39111AAC-597E-4661-82A6-F3BE621F75BB" class="sect2">Trigger Compilation, Invalidation, and Recompilation</h2>
<div>
<p>The <code class="codeph">CREATE</code> <code class="codeph">TRIGGER</code> statement compiles the trigger and stores its code in the database. If a compilation error occurs, the trigger is still created, but its triggering statement fails, except in these cases:</p>
<ul style="list-style-type: disc;">
<li>
<p>The trigger was created in the disabled state.</p>
</li>
<li>
<p>The triggering event is <code class="codeph">AFTER</code> <code class="codeph">STARTUP</code> <code class="codeph">ON</code> <code class="codeph">DATABASE</code>.</p>
</li>
<li>
<p>The triggering event is either <code class="codeph">AFTER</code> <code class="codeph">LOGON</code> <code class="codeph">ON</code> <code class="codeph">DATABASE</code> or <code class="codeph">AFTER</code> <code class="codeph">LOGON</code> <code class="codeph">ON</code> <code class="codeph">SCHEMA</code>, and someone logs on as <code class="codeph">SYSTEM</code>.</p>
</li>
</ul>
<p>To see trigger compilation errors, either use the <code class="codeph">SHOW</code> <code class="codeph">ERRORS</code> command in SQL*Plus or Enterprise Manager, or query the static data dictionary view <code class="codeph">*_ERRORS</code> (described in <a class="olink REFRN26065" target="_blank" href="../REFRN/GUID-6DA72F45-93B2-4BED-9A30-457FB56B01B2.htm#REFRN26065"><span class="italic">Oracle Database Reference</span></a>).</p>
<p>If a trigger does not compile successfully, then its exception handler cannot run. For an example, see <span class="q">&#34;<a href="triggers.htm#GUID-FA7A16B6-F94D-4E4C-A326-F602FE9FE3E8__CIHEAHFI">Remote Exception Handling</a>&#34;</span>.</p>
<p>If a trigger references another object, such as a subprogram or package, and that object is modified or dropped, then the trigger becomes invalid. The next time the triggering event occurs, the compiler tries to revalidate the trigger (for details, see <a class="olink ADFNS99967" target="_blank" href="../ADFNS/adfns_dependencies.htm#ADFNS99967"><span class="italic">Oracle Database Development Guide</span></a>).</p>
<div class="infobox-note" id="GUID-39111AAC-597E-4661-82A6-F3BE621F75BB__GUID-1996DCD7-1A04-49F4-AB2C-E1B75C586164">
<p class="notep1">Note:</p>
<p>Because the <code class="codeph">DBMS_AQ</code> package is used to enqueue a message, dependency between triggers and queues cannot be maintained.</p>
</div>
<p>To recompile a trigger manually, use the <code class="codeph">ALTER</code> <code class="codeph">TRIGGER</code> statement, described in <span class="q">&#34;<a href="alter_trigger.htm#GUID-BC319647-2D94-46D1-BF69-16CDFB507725">ALTER TRIGGER Statement</a>&#34;</span>.</p>
</div>
</div>
<a id="LNPLS754"></a><a id="LNPLS686"></a><a id="LNPLS687"></a><a id="LNPLS751"></a>
<div class="props_rev_3"><a id="GUID-FA7A16B6-F94D-4E4C-A326-F602FE9FE3E8"></a>
<h2 id="LNPLS-GUID-FA7A16B6-F94D-4E4C-A326-F602FE9FE3E8" class="sect2">Exception Handling in Triggers</h2>
<div>
<p>In most cases, if a trigger runs a statement that raises an exception, and the exception is not handled by an exception handler, then the database rolls back the effects of both the trigger and its triggering statement.</p>
<p>In the following cases, the database rolls back only the effects of the trigger, not the effects of the triggering statement (and logs the error in trace files and the alert log):</p>
<ul style="list-style-type: disc;">
<li>
<p>The triggering event is either <code class="codeph">AFTER</code> <code class="codeph">STARTUP</code> <code class="codeph">ON</code> <code class="codeph">DATABASE</code> or <code class="codeph">BEFORE</code> <code class="codeph">SHUTDOWN</code> <code class="codeph">ON</code> <code class="codeph">DATABASE</code>.</p>
</li>
<li>
<p>The triggering event is <code class="codeph">AFTER</code> <code class="codeph">LOGON</code> <code class="codeph">ON</code> <code class="codeph">DATABASE</code> and the user has the <code class="codeph">ADMINISTER</code> <code class="codeph">DATABASE</code> <code class="codeph">TRIGGER</code> privilege.</p>
</li>
<li>
<p>The triggering event is <code class="codeph">AFTER</code> <code class="codeph">LOGON</code> <code class="codeph">ON</code> <code class="codeph">SCHEMA</code> and the user either owns the schema or has the <code class="codeph">ALTER</code> <code class="codeph">ANY</code> <code class="codeph">TRIGGER</code> privilege.</p>
</li>
</ul>
<p>In the case of a compound DML trigger, the database rolls back only the effects of the triggering statement, not the effects of the trigger. However, variables declared in the trigger are re-initialized, and any values computed before the triggering statement was rolled back are lost.</p>
<div class="infobox-note" id="GUID-FA7A16B6-F94D-4E4C-A326-F602FE9FE3E8__GUID-9DD48E53-06C5-41FA-9959-56DC58573B03">
<p class="notep1">Note:</p>
<p>Triggers that enforce complex security authorizations or constraints typically raise user-defined exceptions, which are explained in <span class="q">&#34;<a href="errors.htm#GUID-8844A6D8-FE6F-4DFF-B449-59AB076316C1">User-Defined Exceptions</a>&#34;</span>.</p>
</div>
<div class="infoboxnotealso" id="GUID-FA7A16B6-F94D-4E4C-A326-F602FE9FE3E8__GUID-2BA0DC42-ECA8-40D8-88CC-E14DB112FBD1">
<p class="notep1">See Also:</p>
<p><a href="errors.htm#GUID-0502DC1A-F0A5-4180-A912-6A5CDC855F56" title="While compiling stored PL/SQL units, the PL/SQL compiler generates warnings for conditions that are not serious enough to cause errors and prevent compilation&mdash;for example, using a deprecated PL/SQL feature.">PL/SQL Error Handling</a>, for general information about exception handling</p>
</div>
<div class="section" id="GUID-FA7A16B6-F94D-4E4C-A326-F602FE9FE3E8__CIHEAHFI">
<p class="subhead2">Remote Exception Handling</p>
</div>
<!-- class="section" -->
<div class="section">
<p>A trigger that accesses a remote database can do remote exception handling only if the remote database is available. If the remote database is unavailable when the local database must compile the trigger, then the local database cannot validate the statement that accesses the remote database, and the compilation fails. If the trigger cannot be compiled, then its exception handler cannot run.</p>
<p>The trigger in <a href="triggers.htm#GUID-FA7A16B6-F94D-4E4C-A326-F602FE9FE3E8__BCFDBDJH">Example 9-24</a> has an <code class="codeph">INSERT</code> statement that accesses a remote database. The trigger also has an exception handler. However, if the remote database is unavailable when the local database tries to compile the trigger, then the compilation fails and the exception handler cannot run.</p>
<p><a href="triggers.htm#GUID-FA7A16B6-F94D-4E4C-A326-F602FE9FE3E8__BCFEHHDA">Example 9-25</a> shows the workaround for the problem in <a href="triggers.htm#GUID-FA7A16B6-F94D-4E4C-A326-F602FE9FE3E8__BCFDBDJH">Example 9-24</a>: Put the remote <code class="codeph">INSERT</code> statement and exception handler in a stored subprogram and have the trigger invoke the stored subprogram. The subprogram is stored in the local database in compiled form, with a validated statement for accessing the remote database. Therefore, when the remote <code class="codeph">INSERT</code> statement fails because the remote database is unavailable, the exception handler in the subprogram can handle it.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-FA7A16B6-F94D-4E4C-A326-F602FE9FE3E8__BCFDBDJH">
<p class="titleinexample">Example 9-24 Trigger Cannot Handle Exception if Remote Database is Unavailable</p>
<pre dir="ltr">CREATE OR REPLACE TRIGGER employees_tr
  AFTER INSERT ON employees
  FOR EACH ROW
BEGIN
  <span class="bold">-- When remote database is unavailable, compilation fails here:</span>
  INSERT INTO employees@remote (
    employee_id, first_name, last_name, email, hire_date, job_id
  ) 
  VALUES (
    99, &#39;Jane&#39;, &#39;Doe&#39;, &#39;jane.doe@example.com&#39;, SYSDATE, &#39;ST_MAN&#39;
  );
EXCEPTION
  WHEN OTHERS THEN
    INSERT INTO emp_log (Emp_id, Log_date, New_salary, Action)
      VALUES (99, SYSDATE, NULL, &#39;Could not insert&#39;);
    RAISE;
END;
/
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-FA7A16B6-F94D-4E4C-A326-F602FE9FE3E8__BCFEHHDA">
<p class="titleinexample">Example 9-25 Workaround for <span><a href="triggers.htm#GUID-FA7A16B6-F94D-4E4C-A326-F602FE9FE3E8__BCFDBDJH">Example 9-24</a></span></p>
<pre dir="ltr">CREATE OR REPLACE PROCEDURE insert_row_proc AUTHID CURRENT_USER AS
  no_remote_db EXCEPTION;  -- declare exception
  PRAGMA EXCEPTION_INIT (no_remote_db, -20000);
                           -- assign error code to exception
BEGIN
  INSERT INTO employees@remote (
    employee_id, first_name, last_name, email, hire_date, job_id
  ) 
  VALUES (
    99, &#39;Jane&#39;, &#39;Doe&#39;, &#39;jane.doe@example.com&#39;, SYSDATE, &#39;ST_MAN&#39;
  );
EXCEPTION
  WHEN OTHERS THEN
    INSERT INTO emp_log (Emp_id, Log_date, New_salary, Action)
      VALUES (99, SYSDATE, NULL, &#39;Could not insert row.&#39;);
 
  RAISE_APPLICATION_ERROR (-20000, &#39;Remote database is unavailable.&#39;);
END;
/
 
CREATE OR REPLACE TRIGGER employees_tr
  AFTER INSERT ON employees
  FOR EACH ROW
BEGIN
  <span class="bold">insert_row_proc;</span>
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS2002"></a>
<div class="props_rev_3"><a id="GUID-78B64011-B288-4EDD-B595-2DDBB3835ACA"></a>
<h2 id="LNPLS-GUID-78B64011-B288-4EDD-B595-2DDBB3835ACA" class="sect2">Trigger Design Guidelines</h2>
<div>
<ul style="list-style-type: disc;">
<li>
<p>Use triggers to ensure that whenever a specific event occurs, any necessary actions are done (regardless of which user or application issues the triggering statement).</p>
<p>For example, use a trigger to ensure that whenever anyone updates a table, its log file is updated.</p>
</li>
<li>
<p>Do not create triggers that duplicate database features.</p>
<p>For example, do not create a trigger to reject invalid data if you can do the same with constraints (see <span class="q">&#34;<a href="triggers.htm#GUID-C08EA160-8FD2-4A10-9733-6F2D20C83E93__CIHCEBAE">How Triggers and Constraints Differ</a>&#34;</span>).</p>
</li>
<li>
<p>Do not create triggers that depend on the order in which a SQL statement processes rows (which can vary).</p>
<p>For example, do not assign a value to a global package variable in a row trigger if the current value of the variable depends on the row being processed by the row trigger. If a trigger updates global package variables, initialize those variables in a <code class="codeph">BEFORE</code> statement trigger.</p>
</li>
<li>
<p>Use <code class="codeph">BEFORE</code> row triggers to modify the row before writing the row data to disk.</p>
</li>
<li>
<p>Use <code class="codeph">AFTER</code> row triggers to obtain the row ID and use it in operations.</p>
<p>An <code class="codeph">AFTER</code> row trigger fires when the triggering statement results in ORA-02292.</p>
<div class="infobox-note" id="GUID-78B64011-B288-4EDD-B595-2DDBB3835ACA__GUID-4B436E08-F9DF-4557-AA87-FDAA21DC4DE4">
<p class="notep1">Note:</p>
<p><code class="codeph">AFTER</code> row triggers are slightly more efficient than <code class="codeph">BEFORE</code> row triggers. With <code class="codeph">BEFORE</code> row triggers, affected data blocks are read first for the trigger and then for the triggering statement. With <code class="codeph">AFTER</code> row triggers, affected data blocks are read only for the trigger.</p>
</div>
</li>
<li>
<p>If the triggering statement of a <code class="codeph">BEFORE</code> statement trigger is an <code class="codeph">UPDATE</code> or <code class="codeph">DELETE</code> statement that conflicts with an <code class="codeph">UPDATE</code> statement that is running, then the database does a transparent <code class="codeph">ROLLBACK</code> to <code class="codeph">SAVEPOINT</code> and restarts the triggering statement. The database can do this many times before the triggering statement completes successfully. Each time the database restarts the triggering statement, the trigger fires. The <code class="codeph">ROLLBACK</code> to <code class="codeph">SAVEPOINT</code> does not undo changes to package variables that the trigger references. To detect this situation, include a counter variable in the package.</p>
</li>
<li>
<p>Do not create recursive triggers.</p>
<p>For example, do not create an <code class="codeph">AFTER</code> <code class="codeph">UPDATE</code> trigger that issues an <code class="codeph">UPDATE</code> statement on the table on which the trigger is defined. The trigger fires recursively until it runs out of memory.</p>
</li>
<li>
<p>If you create a trigger that includes a statement that accesses a remote database, then put the exception handler for that statement in a stored subprogram and invoke the subprogram from the trigger.</p>
<p>For more information, see <span class="q">&#34;<a href="triggers.htm#GUID-FA7A16B6-F94D-4E4C-A326-F602FE9FE3E8__CIHEAHFI">Remote Exception Handling</a>&#34;</span>.</p>
</li>
<li>
<p>Use <code class="codeph">DATABASE</code> triggers judiciously. They fire every time any database user initiates a triggering event.</p>
</li>
<li>
<p>If a trigger runs the following statement, the statement returns the owner of the trigger, not the user who is updating the table:</p>
<pre dir="ltr">SELECT Username FROM USER_USERS;
</pre></li>
<li>
<p>Only committed triggers fire.</p>
<p>A trigger is committed, implicitly, after the <code class="codeph">CREATE</code> <code class="codeph">TRIGGER</code> statement that creates it succeeds. Therefore, the following statement cannot fire the trigger that it creates:</p>
<pre dir="ltr">CREATE OR REPLACE TRIGGER my_trigger
  AFTER CREATE ON DATABASE
BEGIN
  NULL;
END;
/
</pre></li>
<li>
<p>To allow the modular installation of applications that have triggers on the same tables, create multiple triggers of the same type, rather than a single trigger that runs a sequence of operations.</p>
<p>Each trigger sees the changes made by the previously fired triggers. Each trigger can see <code class="codeph">OLD</code> and <code class="codeph">NEW</code> values.</p>
</li>
</ul>
</div>
</div>
<a id="LNPLS755"></a>
<div class="props_rev_3"><a id="GUID-5B3A43E2-B9E1-4015-9A6C-0BE696853F3F"></a>
<h2 id="LNPLS-GUID-5B3A43E2-B9E1-4015-9A6C-0BE696853F3F" class="sect2">Trigger Restrictions</h2>
<div>
<p>In addition to the restrictions that apply to all PL/SQL units (see <a href="limits.htm#GUID-00966B4C-B9A5-47D4-94AA-54AEBCC07CE9__BABIHIJG" title="This table summarizes the limits of the PL/SQL compiler.">Table C-1</a>), triggers have these restrictions:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="triggers.htm#GUID-832B47C3-9CF3-4EC8-B2CC-EF688C61685C">Trigger Size Restriction</a></p>
</li>
<li>
<p><a href="triggers.htm#GUID-CC076546-C00D-4CC6-A664-82CCE4F64533">Trigger LONG and LONG RAW Data Type Restrictions</a></p>
</li>
<li>
<p><a href="triggers.htm#GUID-73B70893-9E45-4C08-B327-13ECBE4BE920">Mutating-Table Restriction</a></p>
</li>
<li>
<p>Only an autonomous trigger can run TCL or DDL statements.</p>
<p>For information about autonomous triggers, see <span class="q">&#34;<a href="static.htm#GUID-DD6F0BF4-A958-4EE2-8616-C7AE08910908" title="A trigger must be autonomous to run TCL or DDL statements.">Autonomous Triggers</a>&#34;</span>.</p>
</li>
<li>
<p>A trigger cannot invoke a subprogram that runs transaction control statements, because the subprogram runs in the context of the trigger body.</p>
<p>For more information about subprograms invoked by triggers, see <span class="q">&#34;<a href="triggers.htm#GUID-E11CFB2F-064F-42EB-8390-F025564AD107">Subprograms Invoked by Triggers</a>&#34;</span>.</p>
</li>
<li>
<p>A trigger cannot access a <code class="codeph">SERIALLY_REUSABLE</code> package.</p>
<p>For information about <code class="codeph">SERIALLY_REUSABLE</code> packages, see <span class="q">&#34;<a href="packages.htm#GUID-001EF960-7491-411B-A5F3-D1260A45794B">SERIALLY_REUSABLE Packages</a>&#34;</span>.</p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-5B3A43E2-B9E1-4015-9A6C-0BE696853F3F__GUID-C6F35B1E-4D99-4D79-87B2-54A9736D4B92">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="triggers.htm#GUID-67299530-50F0-4D99-B212-956A7E679CDC">Compound DML Trigger Restrictions</a>&#34;</span></p>
</div>
</div>
<a id="LNPLS756"></a>
<div class="props_rev_3"><a id="GUID-832B47C3-9CF3-4EC8-B2CC-EF688C61685C"></a>
<h3 id="LNPLS-GUID-832B47C3-9CF3-4EC8-B2CC-EF688C61685C" class="sect3">Trigger Size Restriction</h3>
<div>
<p>The size of the trigger cannot exceed 32K.</p>
<p>If the logic for your trigger requires much more than 60 lines of PL/SQL source text, then put most of the source text in a stored subprogram and invoke the subprogram from the trigger. For information about subprograms invoked by triggers, see <span class="q">&#34;<a href="triggers.htm#GUID-E11CFB2F-064F-42EB-8390-F025564AD107">Subprograms Invoked by Triggers</a>&#34;</span>.</p>
</div>
</div>
<a id="LNPLS758"></a>
<div class="props_rev_3"><a id="GUID-CC076546-C00D-4CC6-A664-82CCE4F64533"></a>
<h3 id="LNPLS-GUID-CC076546-C00D-4CC6-A664-82CCE4F64533" class="sect3">Trigger LONG and LONG RAW Data Type Restrictions</h3>
<div>
<div class="infobox-note" id="GUID-CC076546-C00D-4CC6-A664-82CCE4F64533__GUID-1A96C6FE-99DC-4FC5-9ADF-A62B3E29DE4D">
<p class="notep1">Note:</p>
<p>Oracle supports the <code class="codeph">LONG</code> and <code class="codeph">LONG</code> <code class="codeph">RAW</code> data types only for backward compatibility with existing applications.</p>
</div>
<p>In addition to the restrictions that apply to all PL/SQL units (see <span class="q">&#34;<a href="datatypes.htm#GUID-89ABA12C-6096-446C-9E2C-65687A0B8DA9">LONG and LONG RAW Variables</a>&#34;</span>), triggers have these restrictions:</p>
<ul style="list-style-type: disc;">
<li>
<p>A trigger cannot declare a variable of the <code class="codeph">LONG</code> or <code class="codeph">LONG</code> <code class="codeph">RAW</code> data type.</p>
</li>
<li>
<p>A SQL statement in a trigger can reference a <code class="codeph">LONG</code> or <code class="codeph">LONG</code> <code class="codeph">RAW</code> column only if the column data can be converted to the data type <code class="codeph">CHAR</code> or <code class="codeph">VARCHAR2</code>.</p>
</li>
<li>
<p>A trigger cannot use the correlation name <code class="codeph">NEW</code> or <code class="codeph">PARENT</code> with a <code class="codeph">LONG</code> or <code class="codeph">LONG</code> <code class="codeph">RAW</code> column.</p>
</li>
</ul>
</div>
</div>
<a id="LNPLS760"></a><a id="LNPLS688"></a><a id="LNPLS689"></a><a id="LNPLS759"></a>
<div class="props_rev_3"><a id="GUID-73B70893-9E45-4C08-B327-13ECBE4BE920"></a>
<h3 id="LNPLS-GUID-73B70893-9E45-4C08-B327-13ECBE4BE920" class="sect3">Mutating-Table Restriction</h3>
<div>
<div class="infobox-note" id="GUID-73B70893-9E45-4C08-B327-13ECBE4BE920__GUID-382F4498-6BCB-446D-901B-877FE5C57318">
<p class="notep1">Note:</p>
<p>This topic applies only to row-level simple DML triggers.</p>
</div>
<p>A <span class="bold">mutating table</span> is a table that is being modified by a DML statement (possibly by the effects of a <code class="codeph">DELETE</code> <code class="codeph">CASCADE</code> constraint). (A view being modified by an <code class="codeph">INSTEAD</code> <code class="codeph">OF</code> trigger is not considered to be mutating.)</p>
<p>The mutating-table restriction prevents the trigger from querying or modifying the table that the triggering statement is modifying. When a row-level trigger encounters a mutating table, ORA-04091 occurs, the effects of the trigger and triggering statement are rolled back, and control returns to the user or application that issued the triggering statement, as <a href="triggers.htm#GUID-73B70893-9E45-4C08-B327-13ECBE4BE920__BCFHJBBE">Example 9-26</a> shows.</p>
<div class="infobox-note" id="GUID-73B70893-9E45-4C08-B327-13ECBE4BE920__GUID-F8BD55B5-693F-4421-8EC2-070A842FE6CD">
<p class="notep1">Caution:</p>
<p>Oracle Database does not enforce the mutating-table restriction for a trigger that accesses remote nodes, because the database does not support declarative referential constraints between tables on different nodes of a distributed database.</p>
<p>Similarly, the database does not enforce the mutating-table restriction for tables in the same database that are connected by loop-back database links. A loop-back database link makes a local table appear remote by defining an Oracle Net path back to the database that contains the link.</p>
</div>
<p>If you must use a trigger to update a mutating table, you can avoid the mutating-table error in either of these ways:</p>
<ul style="list-style-type: disc;">
<li>
<p>Use a compound DML trigger (see <span class="q">&#34;<a href="triggers.htm#GUID-E1150933-9B5F-4AA3-9F49-C222A1618BE5">Using Compound DML Triggers to Avoid Mutating-Table Error</a>&#34;</span>).</p>
</li>
<li>
<p>Use a temporary table.</p>
<p>For example, instead of using one <code class="codeph">AFTER</code> each row trigger that updates the mutating table, use two triggers&mdash;an <code class="codeph">AFTER</code> each row trigger that updates the temporary table and an <code class="codeph">AFTER</code> statement trigger that updates the mutating table with the values from the temporary table.</p>
</li>
</ul>
<div class="section">
<p class="subhead3">Mutating-Table Restriction Relaxed</p>
</div>
<!-- class="section" -->
<div class="section">
<p>As of Oracle Database 8<span class="italic">g</span> Release 1, a deletion from the parent table causes <code class="codeph">BEFORE</code> and <code class="codeph">AFTER</code> triggers to fire once. Therefore, you can create row-level and statement-level triggers that query and modify the parent and child tables. This allows most foreign key constraint actions to be implemented through their after-row triggers (unless the constraint is self-referential). Update cascade, update set null, update set default, delete set default, inserting a missing parent, and maintaining a count of children can all be implemented easily&mdash;see <span class="q">&#34;<a href="triggers.htm#GUID-AD8188E5-546E-46EB-A000-7EB9D17C3D0C">Triggers for Ensuring Referential Integrity</a>&#34;</span>.</p>
<p>However, cascades require care for multiple-row foreign key updates. The trigger cannot miss rows that were changed but not committed by another transaction, because the foreign key constraint guarantees that no matching foreign key rows are locked before the after-row trigger is invoked.</p>
<p>In <a href="triggers.htm#GUID-73B70893-9E45-4C08-B327-13ECBE4BE920__BCFEFDIA">Example 9-27</a>, the triggering statement updates <code class="codeph">p</code> correctly but causes problems when the trigger updates <code class="codeph">f</code>. First, the triggering statement changes (1) to (2) in <code class="codeph">p</code>, and the trigger updates (1) to (2) in <code class="codeph">f</code>, leaving two rows of value (2) in <code class="codeph">f</code>. Next, the triggering statement updates (2) to (3) in <code class="codeph">p</code>, and the trigger updates both rows of value (2) to (3) in <code class="codeph">f</code>. Finally, the statement updates (3) to (4) in <code class="codeph">p</code>, and the trigger updates all three rows in f from (3) to (4). The relationship between the data items in <code class="codeph">p</code> and <code class="codeph">f</code> is lost.</p>
<p>To avoid this problem, either forbid multiple-row updates to <code class="codeph">p</code> that change the primary key and reuse existing primary key values, or track updates to foreign key values and modify the trigger to ensure that no row is updated twice.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-73B70893-9E45-4C08-B327-13ECBE4BE920__BCFHJBBE">
<p class="titleinexample">Example 9-26 Trigger Causes Mutating-Table Error</p>
<pre dir="ltr">-- Create log table
 
DROP TABLE log;
CREATE TABLE log (
  emp_id  NUMBER(6),
  l_name  VARCHAR2(25),
  f_name  VARCHAR2(20)
);
 
-- Create trigger that updates log and then reads employees
 
CREATE OR REPLACE TRIGGER log_deletions
  AFTER DELETE ON employees
  FOR EACH ROW
DECLARE
  n INTEGER;
BEGIN
  INSERT INTO log VALUES (
    :OLD.employee_id,
    :OLD.last_name,
    :OLD.first_name
  );
 
  SELECT COUNT(*) INTO n FROM employees;
  DBMS_OUTPUT.PUT_LINE(&#39;There are now &#39; || n || &#39; employees.&#39;);
END;
/
 
-- Issue triggering statement:
 
DELETE FROM employees WHERE employee_id = 197;
</pre>
<p>Result:</p>
<pre dir="ltr">DELETE FROM employees WHERE employee_id = 197
            *
ERROR at line 1:
<span class="bold">ORA-04091: table HR.EMPLOYEES is mutating, trigger/function might not see it</span>
ORA-06512: at &#34;HR.LOG_DELETIONS&#34;, line 10
ORA-04088: error during execution of trigger &#39;HR.LOG_DELETIONS&#39;
</pre>
<p>Show that effect of trigger was rolled back:</p>
<pre dir="ltr">SELECT count(*) FROM log;
</pre>
<p>Result:</p>
<pre dir="ltr">  COUNT(*)
----------
         0
 
1 row selected.
</pre>
<p>Show that effect of triggering statement was rolled back:</p>
<pre dir="ltr">SELECT employee_id, last_name FROM employees WHERE employee_id = 197;
</pre>
<p>Result:</p>
<pre dir="ltr">EMPLOYEE_ID LAST_NAME
----------- -------------------------
        197 Feeney
 
1 row selected.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-73B70893-9E45-4C08-B327-13ECBE4BE920__BCFEFDIA">
<p class="titleinexample">Example 9-27 Update Cascade</p>
<pre dir="ltr">DROP TABLE p;
CREATE TABLE p (p1 NUMBER CONSTRAINT pk_p_p1 PRIMARY KEY);
INSERT INTO p VALUES (1);
INSERT INTO p VALUES (2);
INSERT INTO p VALUES (3);
 
DROP TABLE f;
CREATE TABLE f (f1 NUMBER CONSTRAINT fk_f_f1 REFERENCES p);
INSERT INTO f VALUES (1);
INSERT INTO f VALUES (2);
INSERT INTO f VALUES (3);
 
CREATE TRIGGER pt
  AFTER UPDATE ON p
  FOR EACH ROW
BEGIN
  UPDATE f SET f1 = :NEW.p1 WHERE f1 = :OLD.p1;
END;
/
 
</pre>
<p>Query:</p>
<pre dir="ltr">SELECT * FROM p ORDER BY p1;
 
</pre>
<p>Result:</p>
<pre dir="ltr">        P1
----------
         1
         2
         3
</pre>
<p>Query:</p>
<pre dir="ltr">SELECT * FROM f ORDER BY f1;
 
</pre>
<p>Result:</p>
<pre dir="ltr">        F1
----------
         1
         2
         3
</pre>
<p>Issue triggering statement:</p>
<pre dir="ltr">UPDATE p SET p1 = p1+1;
 
</pre>
<p>Query:</p>
<pre dir="ltr">SELECT * FROM p ORDER BY p1;
 
</pre>
<p>Result:</p>
<pre dir="ltr">        P1
----------
         2
         3
         4
</pre>
<p>Query:</p>
<pre dir="ltr">SELECT * FROM f ORDER BY f1;
 
</pre>
<p>Result:</p>
<pre dir="ltr">        F1
----------
         4
         4
         4
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="LNPLS99985"></a>
<div class="props_rev_3"><a id="GUID-2585112C-C48F-40ED-B825-21DF975EA126"></a>
<h2 id="LNPLS-GUID-2585112C-C48F-40ED-B825-21DF975EA126" class="sect2">Order in Which Triggers Fire</h2>
<div>
<p>If two or more triggers <span class="italic">with different timing points</span> are defined for the same statement on the same table, then they fire in this order:</p>
<ol>
<li>
<p>All <code class="codeph">BEFORE</code> <code class="codeph">STATEMENT</code> triggers</p>
</li>
<li>
<p>All <code class="codeph">BEFORE</code> <code class="codeph">EACH</code> <code class="codeph">ROW</code> triggers</p>
</li>
<li>
<p>All <code class="codeph">AFTER</code> <code class="codeph">EACH</code> <code class="codeph">ROW</code> triggers</p>
</li>
<li>
<p>All <code class="codeph">AFTER</code> <code class="codeph">STATEMENT</code> triggers</p>
</li>
</ol>
<p>If it is practical, replace the set of individual triggers with different timing points with a single compound trigger that explicitly codes the actions in the order you intend. For information about compound triggers, see <span class="q">&#34;<a href="triggers.htm#GUID-8A0DA171-BE6A-4798-A1A4-677B88EA16A0">Compound DML Triggers</a>&#34;</span>.</p>
<p>If you are creating two or more triggers <span class="italic">with the same timing point</span>, and the order in which they fire is important, then you can control their firing order using the <code class="codeph">FOLLOWS</code> and <code class="codeph">PRECEDES</code> clauses (see <span class="q">&#34;<a href="create_trigger.htm#GUID-AF9E33F1-64D1-4382-A6A4-EC33C36F237B__CIHDEBEI">FOLLOWS | PRECEDES</a>&#34;</span>).</p>
<p>If multiple compound triggers are created on a table, then:</p>
<ul style="list-style-type: disc;">
<li>
<p>All <code class="codeph">BEFORE</code> <code class="codeph">STATEMENT</code> sections run at the <code class="codeph">BEFORE</code> <code class="codeph">STATEMENT</code> timing point, <code class="codeph">BEFORE</code> <code class="codeph">EACH</code> <code class="codeph">ROW</code> sections run at the <code class="codeph">BEFORE</code> <code class="codeph">EACH</code> <code class="codeph">ROW</code> timing point, and so forth.</p>
<p>If trigger execution order was specified using the <code class="codeph">FOLLOWS</code> clause, then the <code class="codeph">FOLLOWS</code> clause determines the order of execution of compound trigger sections. If <code class="codeph">FOLLOWS</code> is specified for some but not all triggers, then the order of execution of triggers is guaranteed only for those that are related using the <code class="codeph">FOLLOWS</code> clause.</p>
</li>
<li>
<p>All <code class="codeph">AFTER</code> <code class="codeph">STATEMENT</code> sections run at the <code class="codeph">AFTER</code> <code class="codeph">STATEMENT</code> timing point, <code class="codeph">AFTER</code> <code class="codeph">EACH</code> <code class="codeph">ROW</code> sections run at the <code class="codeph">AFTER</code> <code class="codeph">EACH</code> <code class="codeph">ROW</code> timing point, and so forth.</p>
<p>If trigger execution order was specified using the <code class="codeph">PRECEDES</code> clause, then the <code class="codeph">PRECEDES</code> clause determines the order of execution of compound trigger sections. If <code class="codeph">PRECEDES</code> is specified for some but not all triggers, then the order of execution of triggers is guaranteed only for those that are related using the <code class="codeph">PRECEDES</code> clause.</p>
<div class="infobox-note" id="GUID-2585112C-C48F-40ED-B825-21DF975EA126__GUID-94E69BA4-1FCC-476D-ABF5-AB7BC4452811">
<p class="notep1">Note:</p>
<p><code class="codeph">PRECEDES</code> applies only to reverse crossedition triggers, which are described in <a class="olink ADFNS99909" target="_blank" href="../ADFNS/adfns_editions.htm#ADFNS99909"><span class="italic">Oracle Database Development Guide</span></a>.</p>
</div>
</li>
</ul>
<p>The firing of compound triggers can be interleaved with the firing of simple triggers.</p>
<p>When one trigger causes another trigger to fire, the triggers are said to be <span class="bold">cascading</span>. The database allows up to 32 triggers to cascade simultaneously. To limit the number of trigger cascades, use the initialization parameter <code class="codeph">OPEN_CURSORS</code> (described in <a class="olink REFRN10137" target="_blank" href="../REFRN/GUID-FAFD1247-06E5-4E64-917F-AEBD4703CF40.htm#REFRN10137"><span class="italic">Oracle Database Reference</span></a>), because a cursor opens every time a trigger fires.</p>
</div>
</div>
<a id="LNPLS2011"></a>
<div class="props_rev_3"><a id="GUID-6CD799AB-FAEF-493A-8A58-2394E400072C"></a>
<h2 id="LNPLS-GUID-6CD799AB-FAEF-493A-8A58-2394E400072C" class="sect2">Trigger Enabling and Disabling</h2>
<div>
<p>By default, the <code class="codeph">CREATE</code> <code class="codeph">TRIGGER</code> statement creates a trigger in the enabled state. To create a trigger in the disabled state, specify <code class="codeph">DISABLE</code>. Creating a trigger in the disabled state lets you ensure that it compiles without errors before you enable it.</p>
<div class="section">
<p>Some reasons to temporarily disable a trigger are:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>The trigger refers to an unavailable object.</p>
</li>
<li>
<p>You must do a large data load, and you want it to proceed quickly without firing triggers.</p>
</li>
<li>
<p>You are reloading data.</p>
</li>
</ul>
<p>To enable or disable a single trigger, use this statement:</p>
<pre dir="ltr">ALTER TRIGGER [<span class="italic">schema</span>.]<span class="italic">trigger_name</span> { ENABLE | DISABLE };
</pre>
<p>To enable or disable all triggers in all editions created on a specific table, use this statement:</p>
<pre dir="ltr">ALTER TABLE <span class="italic">table_name</span> { ENABLE | DISABLE } ALL TRIGGERS;
</pre>
<p>In both of the preceding statements, <span class="italic"><code class="codeph">schema</code></span> is the name of the schema containing the trigger, and the default is your schema.</p>
<div class="infoboxnotealso" id="GUID-6CD799AB-FAEF-493A-8A58-2394E400072C__GUID-C9B48185-B119-407C-B731-212D2B474767">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="alter_trigger.htm#GUID-BC319647-2D94-46D1-BF69-16CDFB507725">ALTER TRIGGER Statement</a>&#34;</span> for more information about the <code class="codeph">ALTER</code> <code class="codeph">TRIGGER</code> statement</p>
</li>
<li>
<p><a class="olink SQLRF01001" target="_blank" href="../SQLRF/statements_3001.htm#SQLRF01001"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about the <code class="codeph">ALTER</code> <code class="codeph">TABLE</code> statement</p>
</li>
</ul>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="LNPLS2008"></a>
<div class="props_rev_3"><a id="GUID-4F200DEC-9B4B-4DCC-A86D-1DB2E281A43C"></a>
<h2 id="LNPLS-GUID-4F200DEC-9B4B-4DCC-A86D-1DB2E281A43C" class="sect2">Trigger Changing and Debugging</h2>
<div>
<div class="section">
<p>To change a trigger, you must either replace or re-create it. (The <code class="codeph">ALTER</code> <code class="codeph">TRIGGER</code> statement only enables, disables, compiles, or renames a trigger.)</p>
<p>To replace a trigger, use the <code class="codeph">CREATE</code> <code class="codeph">TRIGGER</code> statement with the <code class="codeph">OR</code> <code class="codeph">REPLACE</code> clause.</p>
<p>To re-create a trigger, first drop it with the <code class="codeph">DROP</code> <code class="codeph">TRIGGER</code> statement and then create it again with the <code class="codeph">CREATE</code> <code class="codeph">TRIGGER</code> statement.</p>
<p>To debug a trigger, you can use the facilities available for stored subprograms. For information about these facilities, see <a class="olink ADFNS99873" target="_blank" href="../ADFNS/adfns_packages.htm#ADFNS99873"><span class="italic">Oracle Database Development Guide</span></a>.</p>
<div class="infoboxnotealso" id="GUID-4F200DEC-9B4B-4DCC-A86D-1DB2E281A43C__GUID-E5F0E0F1-3B27-464E-A121-3C27271D5DB4">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="create_trigger.htm#GUID-AF9E33F1-64D1-4382-A6A4-EC33C36F237B">CREATE TRIGGER Statement</a>&#34;</span> for more information about the <code class="codeph">CREATE</code> <code class="codeph">TRIGGER</code> statement</p>
</li>
<li>
<p><span class="q">&#34;<a href="drop_trigger.htm#GUID-C664FDA9-656B-49D4-A86D-D08B615137E9" title="The DROP TRIGGER statement drops a database trigger from the database.">DROP TRIGGER Statement</a>&#34;</span> for more information about the <code class="codeph">DROP</code> <code class="codeph">TRIGGER</code> statement</p>
</li>
<li>
<p><span class="q">&#34;<a href="alter_trigger.htm#GUID-BC319647-2D94-46D1-BF69-16CDFB507725">ALTER TRIGGER Statement</a>&#34;</span> for more information about the <code class="codeph">ALTER</code> <code class="codeph">TRIGGER</code> statement</p>
</li>
</ul>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="LNPLS727"></a>
<div class="props_rev_3"><a id="GUID-F1103CD4-A84F-4440-9250-872212BDC5A9"></a>
<h2 id="LNPLS-GUID-F1103CD4-A84F-4440-9250-872212BDC5A9" class="sect2">Triggers and Oracle Database Data Transfer Utilities</h2>
<div>
<p>The Oracle database utilities that transfer data to your database, possibly firing triggers, are:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold">SQL*Loader (</span><span class="bold"><code class="codeph">sqlldr</code></span><span class="bold">)</span></p>
<p>SQL*Loader loads data from external files into tables of an Oracle database.</p>
<p>During a SQL*Loader conventional load, <code class="codeph">INSERT</code> triggers fire.</p>
<p>Before a SQL*Loader direct load, triggers are disabled.</p>
<div class="infoboxnotealso" id="GUID-F1103CD4-A84F-4440-9250-872212BDC5A9__GUID-BE85A91A-D8DB-430E-88D1-00AEE5CB3AE2">
<p class="notep1">See Also:</p>
<p><a class="olink SUTIL003" target="_blank" href="../SUTIL/GUID-DD843EE2-1FAB-4E72-A115-21D97A501ECC.htm#SUTIL003"><span class="italic">Oracle Database Utilities</span></a> for more information about SQL*Loader</p>
</div>
</li>
<li>
<p><span class="bold">Data Pump Import (</span><span class="bold"><code class="codeph">impdp</code></span><span class="bold">)</span></p>
<p>Data Pump Import (<code class="codeph">impdp</code>) reads an export dump file set created by Data Pump Export (<code class="codeph">expdp</code>) and writes it to an Oracle database.</p>
<p>If a table to be imported does not exist on the target database, or if you specify <code class="codeph">TABLE_EXISTS_ACTION=REPLACE</code>, then <code class="codeph">impdp</code> creates and loads the table before creating any triggers, so no triggers fire.</p>
<p>If a table to be imported exists on the target database, and you specify either <code class="codeph">TABLE_EXISTS_ACTION=APPEND</code> or <code class="codeph">TABLE_EXISTS_ACTION=TRUNCATE</code>, then <code class="codeph">impdp</code> loads rows into the existing table, and <code class="codeph">INSERT</code> triggers created on the table fire.</p>
<div class="infoboxnotealso" id="GUID-F1103CD4-A84F-4440-9250-872212BDC5A9__GUID-EEC87C21-23F0-4DD9-B359-FBBAE7162691">
<p class="notep1">See Also:</p>
<p><a class="olink SUTIL300" target="_blank" href="../SUTIL/GUID-D11E340E-14C6-43B8-AB09-6335F0C1F71B.htm#SUTIL300"><span class="italic">Oracle Database Utilities</span></a> for more information about Data Pump Import</p>
</div>
</li>
<li>
<p><span class="bold">Original Import (</span><span class="bold"><code class="codeph">imp</code></span><span class="bold">)</span></p>
<p>Original Import (the original Import utility, <code class="codeph">imp</code>) reads object definitions and table data from dump files created by original Export (the original Export utility, <code class="codeph">exp</code>) and writes them to the target database.</p>
<div class="infobox-note" id="GUID-F1103CD4-A84F-4440-9250-872212BDC5A9__GUID-9F29E91E-1349-478C-834D-D511957064BA">
<p class="notep1">Note:</p>
<p>To import files that original Export created, you must use original Import. In all other cases, Oracle recommends that you use Data Pump Import instead of original Import.</p>
</div>
<p>If a table to be imported does not exist on the target database, then <code class="codeph">imp</code> creates and loads the table before creating any triggers, so no triggers fire.</p>
<p>If a table to be imported exists on the target database, then the Import <code class="codeph">IGNORE</code> parameter determines whether triggers fire during import operations. The <code class="codeph">IGNORE</code> parameter specifies whether object creation errors are ignored or not, resulting in the following behavior:</p>
<ul style="list-style-type: disc;">
<li>
<p>If <code class="codeph">IGNORE=n</code> (default), then <code class="codeph">imp</code> does not change the table and no triggers fire.</p>
</li>
<li>
<p>If <code class="codeph">IGNORE=y</code>, then <code class="codeph">imp</code> loads rows into the existing table, and <code class="codeph">INSERT</code> triggers created on the table fire.</p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-F1103CD4-A84F-4440-9250-872212BDC5A9__GUID-09F7824E-26A9-49EB-A24F-D238A57B2E11">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a class="olink SUTIL001" target="_blank" href="../SUTIL/GUID-B21D5F0E-8C64-4601-9F16-25806677737B.htm#SUTIL001"><span class="italic">Oracle Database Utilities</span></a> for more information about the original Import utility</p>
</li>
<li>
<p><a class="olink SUTIL3634" target="_blank" href="../SUTIL/GUID-901CBBE0-65FB-439E-942D-F2038C18BCD2.htm#SUTIL3634"><span class="italic">Oracle Database Utilities</span></a> for more information about the original Export utility</p>
</li>
<li>
<p><a class="olink SUTIL1719" target="_blank" href="../SUTIL/GUID-7DAED9E7-8A99-4AD1-B66C-71847A596BB3.htm#SUTIL1719"><span class="italic">Oracle Database Utilities</span></a> for more information about <code class="codeph">IGNORE</code></p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
<a id="LNPLS790"></a><a id="LNPLS690"></a><a id="LNPLS2014"></a>
<div class="props_rev_3"><a id="GUID-2951D8A6-6C80-428F-840D-13A76A97E365"></a>
<h2 id="LNPLS-GUID-2951D8A6-6C80-428F-840D-13A76A97E365" class="sect2">Triggers for Publishing Events</h2>
<div>
<p>To use a trigger to publish an event, create a trigger that:</p>
<ul style="list-style-type: disc;">
<li>
<p>Has the event as its triggering event</p>
</li>
<li>
<p>Invokes the appropriate subprograms in the <code class="codeph">DBMS_AQ</code> package, which provides an interface to Oracle Streams Advanced Queuing (AQ)</p>
<p>For information about the <code class="codeph">DBMS_AQ</code> package, see <a class="olink ARPLS004" target="_blank" href="../ARPLS/d_aq.htm#ARPLS004"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.</p>
<p>For information about AQ, see <a class="olink ADQUE1400" target="_blank" href="../ADQUE/jm_pblsh.htm#ADQUE1400"><span class="italic">Oracle Database Advanced Queuing User&#39;s Guide</span></a>.</p>
</li>
</ul>
<p>By enabling and disabling such triggers, you can turn event notification on and off. For information about enabling and disabling triggers, see <span class="q">&#34;<a href="triggers.htm#GUID-6CD799AB-FAEF-493A-8A58-2394E400072C" title="By default, the CREATE TRIGGER statement creates a trigger in the enabled state. To create a trigger in the disabled state, specify DISABLE. Creating a trigger in the disabled state lets you ensure that it compiles without errors before you enable it.">Trigger Enabling and Disabling</a>&#34;</span>.</p>
<div class="section">
<p class="subhead2">How Triggers Publish Events</p>
</div>
<!-- class="section" -->
<div class="section">
<p>When the database detects an event, it fires all enabled triggers that are defined on that event, except:</p>
<ul style="list-style-type: disc;">
<li>
<p>Any trigger that is the target of the triggering event.</p>
<p>For example, a trigger for all <code class="codeph">DROP</code> events does not fire when it is dropped itself.</p>
</li>
<li>
<p>Any trigger that was modified, but not committed, in the same transaction as the triggering event.</p>
<p>For example, if a recursive DDL statement in a system trigger modifies another trigger, then events in the same transaction cannot fire the modified trigger.</p>
</li>
</ul>
<p>When a trigger fires and invokes AQ, AQ publishes the event and passes to the trigger the publication context and specified attributes. The trigger can access the attributes by invoking event attribute functions.</p>
<p>The attributes that a trigger can specify to AQ (by passing them to AQ as <code class="codeph">IN</code> parameters) and then access with event attribute functions depends on the triggering event, which is either a database event or a client event.</p>
<div class="infobox-note" id="GUID-2951D8A6-6C80-428F-840D-13A76A97E365__GUID-ABEBA277-DA06-404E-8622-95388B464152">
<p class="notep1">Note:</p>
<ul style="list-style-type: disc;">
<li>
<p>A trigger always behaves like a definer rights (DR) unit. The trigger action of an event runs as the definer of the action (as the definer of the package or function in callouts, or as owner of the trigger in queues). Because the owner of the trigger must have <code class="codeph">EXECUTE</code> privileges on the underlying queues, packages, or subprograms, this action is consistent. For information about DR units, see <span class="q">&#34;<a href="subprograms.htm#GUID-41D23DE7-3C07-41CF-962B-F92B696594B5">Invoker&#39;s Rights and Definer&#39;s Rights (AUTHID Property)</a>&#34;</span>.</p>
</li>
<li>
<p>The database ignores the return status from callback functions for all events. For example, the database does nothing with the return status from a <code class="codeph">SHUTDOWN</code> event.</p>
</li>
</ul>
</div>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Topics</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="triggers.htm#GUID-266DBF6D-AA74-490C-ADE5-962C10708C2D">Event Attribute Functions</a></p>
</li>
<li>
<p><a href="triggers.htm#GUID-5DEA2CE5-D61C-4E27-A36E-73348D9F619B">Event Attribute Functions for Database Event Triggers</a></p>
</li>
<li>
<p><a href="triggers.htm#GUID-F6473AD0-75D2-4E36-8B15-F93F0B5A8B79">Event Attribute Functions for Client Event Triggers</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="LNPLS795"></a><a id="LNPLS794"></a>
<div class="props_rev_3"><a id="GUID-266DBF6D-AA74-490C-ADE5-962C10708C2D"></a>
<h3 id="LNPLS-GUID-266DBF6D-AA74-490C-ADE5-962C10708C2D" class="sect3">Event Attribute Functions</h3>
<div>
<p>By invoking system-defined event attribute functions in <a href="triggers.htm#GUID-266DBF6D-AA74-490C-ADE5-962C10708C2D__CHDCFDJG" title="This table summarizes system-defined event attributes.">Table 9-5</a>, a trigger can retrieve certain attributes of the triggering event. Not all triggers can invoke all event attribute functions&mdash;for details, see <span class="q">&#34;<a href="triggers.htm#GUID-5DEA2CE5-D61C-4E27-A36E-73348D9F619B">Event Attribute Functions for Database Event Triggers</a>&#34;</span> and <span class="q">&#34;<a href="triggers.htm#GUID-F6473AD0-75D2-4E36-8B15-F93F0B5A8B79">Event Attribute Functions for Client Event Triggers</a>&#34;</span>.</p>
<div class="infobox-note" id="GUID-266DBF6D-AA74-490C-ADE5-962C10708C2D__GUID-41DD780F-A0CE-4E83-8020-F38D20246EB1">
<p class="notep1">Note:</p>
<ul style="list-style-type: disc;">
<li>
<p>In earlier releases, you had to access these functions through the <code class="codeph">SYS</code> package. Now Oracle recommends accessing them with their public synonyms (the names starting with <code class="codeph">ora_</code> in the first column of <a href="triggers.htm#GUID-266DBF6D-AA74-490C-ADE5-962C10708C2D__CHDCFDJG" title="This table summarizes system-defined event attributes.">Table 9-5</a>).</p>
</li>
<li>
<p>The function parameter <code class="codeph">ora_name_list_t</code> is defined in package <code class="codeph">DBMS_STANDARD</code> as:</p>
<pre dir="ltr">TYPE ora_name_list_t IS TABLE OF VARCHAR2(64);
</pre></li>
</ul>
</div>
<div class="tblformalwide" id="GUID-266DBF6D-AA74-490C-ADE5-962C10708C2D__CHDCFDJG">
<p class="titleintable">Table 9-5 System-Defined Event Attributes</p>
<table class="cellalignment885" title="System-Defined Event Attributes" summary="This table summarizes system-defined event attributes.">
<thead>
<tr class="cellalignment870">
<th class="cellalignment888" id="d65654e7394">Attribute</th>
<th class="cellalignment896" id="d65654e7397">Return Type and Value</th>
<th class="cellalignment957" id="d65654e7400">Example</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment870">
<td class="cellalignment892" id="d65654e7405" headers="d65654e7394">
<pre dir="ltr">ora_client_ip_address
</pre></td>
<td class="cellalignment899" headers="d65654e7405 d65654e7397">
<p><code class="codeph">VARCHAR2</code>: IP address of client in <code class="codeph">LOGON</code> event when underlying protocol is TCP/IP</p>
</td>
<td class="cellalignment958" headers="d65654e7405 d65654e7400">
<pre dir="ltr">DECLARE
  v_addr VARCHAR2(11);
BEGIN
  IF (ora_sysevent = &#39;LOGON&#39;) THEN
    v_addr := <span class="bold">ora_client_ip_address</span>;
  END IF;
END;
/
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment892" id="d65654e7423" headers="d65654e7394">
<pre dir="ltr">ora_database_name
</pre></td>
<td class="cellalignment899" headers="d65654e7423 d65654e7397">
<p><code class="codeph">VARCHAR2(50)</code>: Database name</p>
</td>
<td class="cellalignment958" headers="d65654e7423 d65654e7400">
<pre dir="ltr">DECLARE
  v_db_name VARCHAR2(50);
BEGIN
  v_db_name := <span class="bold">ora_database_name</span>;
END;
/
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment892" id="d65654e7438" headers="d65654e7394">
<pre dir="ltr">ora_des_encrypted_password
</pre></td>
<td class="cellalignment899" headers="d65654e7438 d65654e7397">
<p><code class="codeph">VARCHAR2</code>: DES-encrypted password of user being created or altered</p>
</td>
<td class="cellalignment958" headers="d65654e7438 d65654e7400">
<pre dir="ltr">IF (ora_dict_obj_type = &#39;USER&#39;) THEN
  INSERT INTO event_table
  VALUES (<span class="bold">ora_des_encrypted_password</span>);
END IF;
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment892" id="d65654e7453" headers="d65654e7394">
<pre dir="ltr">ora_dict_obj_name
</pre></td>
<td class="cellalignment899" headers="d65654e7453 d65654e7397">
<p><code class="codeph">VARCHAR2(30)</code>: Name of dictionary object on which DDL operation occurred</p>
</td>
<td class="cellalignment958" headers="d65654e7453 d65654e7400">
<pre dir="ltr">INSERT INTO event_table 
VALUES (&#39;Changed object is &#39; ||
        <span class="bold">ora_dict_obj_name</span>);
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment892" id="d65654e7468" headers="d65654e7394">
<pre dir="ltr">ora_dict_obj_name_list (
name_list OUT ora_name_list_t
)
</pre></td>
<td class="cellalignment899" headers="d65654e7468 d65654e7397">
<p><code class="codeph">PLS_INTEGER</code>: Number of object names modified in event</p>
<p><code class="codeph">OUT</code> parameter: List of object names modified in event</p>
</td>
<td class="cellalignment958" headers="d65654e7468 d65654e7400">
<pre dir="ltr">DECLARE
  name_list ora_name_list_t;
  number_modified PLS_INTEGER;
BEGIN
  IF (ora_sysevent=&#39;ASSOCIATE STATISTICS&#39;) THEN
    number_modified :=
     <span class="bold">ora_dict_obj_name_list(name_list)</span>;
  END IF;
END;
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment892" id="d65654e7487" headers="d65654e7394">
<pre dir="ltr">ora_dict_obj_owner
</pre></td>
<td class="cellalignment899" headers="d65654e7487 d65654e7397">
<p><code class="codeph">VARCHAR2(30)</code>: Owner of dictionary object on which DDL operation occurred</p>
</td>
<td class="cellalignment958" headers="d65654e7487 d65654e7400">
<pre dir="ltr">INSERT INTO event_table
VALUES (&#39;object owner is&#39; || 
        <span class="bold">ora_dict_obj_owner</span>);
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment892" id="d65654e7502" headers="d65654e7394">
<pre dir="ltr">ora_dict_obj_owner_list (
owner_list OUT ora_name_list_t
)
</pre></td>
<td class="cellalignment899" headers="d65654e7502 d65654e7397">
<p><code class="codeph">PLS_INTEGER</code>: Number of owners of objects modified in event</p>
<p><code class="codeph">OUT</code> parameter: List of owners of objects modified in event</p>
</td>
<td class="cellalignment958" headers="d65654e7502 d65654e7400">
<pre dir="ltr">DECLARE
  owner_list ora_name_list_t;
  number_modified PLS_INTEGER;
BEGIN
  IF (ora_sysevent=&#39;ASSOCIATE STATISTICS&#39;) THEN
    number_modified :=
      <span class="bold">ora_dict_obj_name_list(owner_list)</span>;
  END IF;
END;
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment892" id="d65654e7521" headers="d65654e7394">
<pre dir="ltr">ora_dict_obj_type
</pre></td>
<td class="cellalignment899" headers="d65654e7521 d65654e7397">
<p><code class="codeph">VARCHAR2(20)</code>: Type of dictionary object on which DDL operation occurred</p>
</td>
<td class="cellalignment958" headers="d65654e7521 d65654e7400">
<pre dir="ltr">INSERT INTO event_table
VALUES (&#39;This object is a &#39; || 
        <span class="bold">ora_dict_obj_type</span>);
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment892" id="d65654e7536" headers="d65654e7394">
<pre dir="ltr">ora_grantee (
user_list OUT ora_name_list_t
)
</pre></td>
<td class="cellalignment899" headers="d65654e7536 d65654e7397">
<p><code class="codeph">PLS_INTEGER</code>: Number of grantees in grant event</p>
<p><code class="codeph">OUT</code> parameter: List of grantees in grant event</p>
</td>
<td class="cellalignment958" headers="d65654e7536 d65654e7400">
<pre dir="ltr">DECLARE
  user_list ora_name_list_t;
  number_of_grantees PLS_INTEGER;
BEGIN
  IF (ora_sysevent = &#39;GRANT&#39;) THEN
    number_of_grantees := 
     <span class="bold">ora_grantee(user_list)</span>;
  END IF;
END;
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment892" id="d65654e7555" headers="d65654e7394">
<pre dir="ltr">ora_instance_num
</pre></td>
<td class="cellalignment899" headers="d65654e7555 d65654e7397">
<p><code class="codeph">NUMBER</code>: Instance number</p>
</td>
<td class="cellalignment958" headers="d65654e7555 d65654e7400">
<pre dir="ltr">IF (<span class="bold">ora_instance_num</span> = 1) THEN
  INSERT INTO event_table VALUES (&#39;1&#39;);
END IF;
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment892" id="d65654e7570" headers="d65654e7394">
<pre dir="ltr">ora_is_alter_column (
column_name IN VARCHAR2
)
</pre></td>
<td class="cellalignment899" headers="d65654e7570 d65654e7397">
<p><code class="codeph">BOOLEAN</code>: <code class="codeph">TRUE</code> if specified column is altered, <code class="codeph">FALSE</code> otherwise</p>
</td>
<td class="cellalignment958" headers="d65654e7570 d65654e7400">
<pre dir="ltr">IF (ora_sysevent = &#39;ALTER&#39; AND
  ora_dict_obj_type = &#39;TABLE&#39;) THEN 
    alter_column := <span class="bold">ora_is_alter_column(&#39;C&#39;)</span>;
END IF;
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment892" id="d65654e7592" headers="d65654e7394">
<pre dir="ltr">ora_is_creating_nested_table
</pre></td>
<td class="cellalignment899" headers="d65654e7592 d65654e7397">
<p><code class="codeph">BOOLEAN</code>: <code class="codeph">TRUE</code> if current event is creating nested table, <code class="codeph">FALSE</code> otherwise</p>
</td>
<td class="cellalignment958" headers="d65654e7592 d65654e7400">
<pre dir="ltr">IF (ora_sysevent = &#39;CREATE&#39; AND
  ora_dict_obj_type = &#39;TABLE&#39; AND
  <span class="bold">ora_is_creating_nested_table</span>) THEN
    INSERT INTO event_table
    VALUES (&#39;A nested table is created&#39;);
END IF;
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment892" id="d65654e7613" headers="d65654e7394">
<pre dir="ltr">ora_is_drop_column (
column_name IN VARCHAR2
)
</pre></td>
<td class="cellalignment899" headers="d65654e7613 d65654e7397">
<p><code class="codeph">BOOLEAN</code>: <code class="codeph">TRUE</code> if specified column is dropped, <code class="codeph">FALSE</code> otherwise</p>
</td>
<td class="cellalignment958" headers="d65654e7613 d65654e7400">
<pre dir="ltr">IF (ora_sysevent = &#39;ALTER&#39; AND
  ora_dict_obj_type = &#39;TABLE&#39;) THEN
    drop_column := <span class="bold">ora_is_drop_column(&#39;C&#39;)</span>;
END IF;
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment892" id="d65654e7634" headers="d65654e7394">
<pre dir="ltr">ora_is_servererror (
error_number IN VARCHAR2
)
</pre></td>
<td class="cellalignment899" headers="d65654e7634 d65654e7397">
<p><code class="codeph">BOOLEAN</code>: <code class="codeph">TRUE</code> if given error is on error stack, <code class="codeph">FALSE</code> otherwise</p>
</td>
<td class="cellalignment958" headers="d65654e7634 d65654e7400">
<pre dir="ltr">IF <span class="bold">ora_is_servererror(error_number)</span> THEN
  INSERT INTO event_table
  VALUES (&#39;Server error!!&#39;);
END IF;
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment892" id="d65654e7655" headers="d65654e7394">
<pre dir="ltr">ora_login_user
</pre></td>
<td class="cellalignment899" headers="d65654e7655 d65654e7397">
<p><code class="codeph">VARCHAR2(30)</code>: Login user name</p>
</td>
<td class="cellalignment958" headers="d65654e7655 d65654e7400">
<pre dir="ltr">SELECT <span class="bold">ora_login_user</span> FROM DUAL;
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment892" id="d65654e7670" headers="d65654e7394">
<pre dir="ltr">ora_partition_pos
</pre></td>
<td class="cellalignment899" headers="d65654e7670 d65654e7397">
<p><code class="codeph">PLS_INTEGER</code>: In <code class="codeph">INSTEAD</code> <code class="codeph">OF</code> trigger for <code class="codeph">CREATE</code> <code class="codeph">TABLE</code>, position in SQL text where you can insert <code class="codeph">PARTITION</code> clause</p>
</td>
<td class="cellalignment958" headers="d65654e7670 d65654e7400">
<pre dir="ltr">-- Retrieve ora_sql_txt into  sql_text variable
v_n := <span class="bold">ora_partition_pos</span>;
v_new_stmt := SUBSTR(sql_text,1,v_n - 1)
              || &#39; &#39; || my_partition_clause
              || &#39; &#39; || SUBSTR(sql_text, v_n));
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment892" id="d65654e7700" headers="d65654e7394">
<pre dir="ltr">ora_privilege_list (
privilege_list OUT ora_name_list_t
)
</pre></td>
<td class="cellalignment899" headers="d65654e7700 d65654e7397">
<p><code class="codeph">PLS_INTEGER</code>: Number of privileges in grant or revoke event</p>
<p><code class="codeph">OUT</code> parameter: List of privileges granted or revoked in event</p>
</td>
<td class="cellalignment958" headers="d65654e7700 d65654e7400">
<pre dir="ltr">DECLARE
  privilege_list ora_name_list_t;
  number_of_privileges PLS_INTEGER;
BEGIN
  IF (ora_sysevent = &#39;GRANT&#39; OR
      ora_sysevent = &#39;REVOKE&#39;) THEN
    number_of_privileges :=
      <span class="bold">ora_privilege_list(privilege_list)</span>;
  END IF;
END;
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment892" id="d65654e7719" headers="d65654e7394">
<pre dir="ltr">ora_revokee (
user_list OUT ora_name_list_t
)
</pre></td>
<td class="cellalignment899" headers="d65654e7719 d65654e7397">
<p><code class="codeph">PLS_INTEGER</code>: Number of revokees in revoke event</p>
<p><code class="codeph">OUT</code> parameter: List of revokees in event</p>
</td>
<td class="cellalignment958" headers="d65654e7719 d65654e7400">
<pre dir="ltr">DECLARE
  user_list ora_name_list_t;
  number_of_users PLS_INTEGER;
BEGIN
  IF (ora_sysevent = &#39;REVOKE&#39;) THEN
    number_of_users := <span class="bold">ora_revokee(user_list)</span>;
  END IF;
END;
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment892" id="d65654e7738" headers="d65654e7394">
<pre dir="ltr">ora_server_error (
position IN PLS_INTEGER
)
</pre></td>
<td class="cellalignment899" headers="d65654e7738 d65654e7397">
<p><code class="codeph">NUMBER</code>: Error code at given position on error stack<a id="GUID-266DBF6D-AA74-490C-ADE5-962C10708C2D__CIHHCBGJ" href="#GUID-266DBF6D-AA74-490C-ADE5-962C10708C2D__CIHHCBGJ" onclick="footdisplay(1,&#34;Position 1 is the top of the stack. &#34;)"><sup>Foot&nbsp;1</sup></a></p>
</td>
<td class="cellalignment958" headers="d65654e7738 d65654e7400">
<pre dir="ltr">INSERT INTO event_table
VALUES (&#39;top stack error &#39; || 
        <span class="bold">ora_server_error(1)</span>);
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment892" id="d65654e7756" headers="d65654e7394">
<pre dir="ltr">ora_server_error_depth
</pre></td>
<td class="cellalignment899" headers="d65654e7756 d65654e7397">
<p><code class="codeph">PLS_INTEGER</code>: Number of error messages on error stack</p>
</td>
<td class="cellalignment958" headers="d65654e7756 d65654e7400">
<pre dir="ltr">n := <span class="bold">ora_server_error_depth</span>;
-- Use n with functions such as ora_server_error
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment892" id="d65654e7771" headers="d65654e7394">
<pre dir="ltr">ora_server_error_msg (
position IN PLS_INTEGER
)
</pre></td>
<td class="cellalignment899" headers="d65654e7771 d65654e7397">
<p><code class="codeph">VARCHAR2</code>: Error message at given position on error stack<a id="fnsrc_d65654e7779" href="#fnsrc_d65654e7779" onclick="footdisplay(1,&#34;Position 1 is the top of the stack. &#34;)"><sup>Footref&nbsp;1</sup></a></p>
</td>
<td class="cellalignment958" headers="d65654e7771 d65654e7400">
<pre dir="ltr">INSERT INTO event_table
VALUES (&#39;top stack error message&#39; ||
        <span class="bold">ora_server_error_msg(1)</span>);
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment892" id="d65654e7788" headers="d65654e7394">
<pre dir="ltr">ora_server_error_num_params (
position IN PLS_INTEGER
)
</pre></td>
<td class="cellalignment899" headers="d65654e7788 d65654e7397">
<p><code class="codeph">PLS_INTEGER</code>: Number of strings substituted into error message (using format like <code class="codeph">%s</code>) at given position on error stack<a id="fnsrc_d65654e7799" href="#fnsrc_d65654e7799" onclick="footdisplay(1,&#34;Position 1 is the top of the stack. &#34;)"><sup>Footref&nbsp;1</sup></a></p>
</td>
<td class="cellalignment958" headers="d65654e7788 d65654e7400">
<pre dir="ltr">n := <span class="bold">ora_server_error_num_params(1)</span>;
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment892" id="d65654e7809" headers="d65654e7394">
<pre dir="ltr">ora_server_error_param (
position IN PLS_INTEGER,
param IN PLS_INTEGER
)
</pre></td>
<td class="cellalignment899" headers="d65654e7809 d65654e7397">
<p><code class="codeph">VARCHAR2</code>: Matching substitution value (<code class="codeph">%s</code>, <code class="codeph">%d</code>, and so on) in error message at given position and parameter number<a id="fnsrc_d65654e7823" href="#fnsrc_d65654e7823" onclick="footdisplay(1,&#34;Position 1 is the top of the stack. &#34;)"><sup>Footref&nbsp;1</sup></a></p>
</td>
<td class="cellalignment958" headers="d65654e7809 d65654e7400">
<pre dir="ltr">-- Second %s in &#34;Expected %s, found %s&#34;:
param := <span class="bold">ora_server_error_param(1,2)</span>;
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment892" id="d65654e7832" headers="d65654e7394">
<pre dir="ltr">ora_sql_txt (
sql_text OUT ora_name_list_t
)
</pre></td>
<td class="cellalignment899" headers="d65654e7832 d65654e7397">
<p><code class="codeph">PLS_INTEGER</code>: Number of elements in PL/SQL table</p>
<p><code class="codeph">OUT</code> parameter: SQL text of triggering statement (broken into multiple collection elements if statement is long)</p>
</td>
<td class="cellalignment958" headers="d65654e7832 d65654e7400">
<pre dir="ltr">CREATE TABLE event_table (col VARCHAR2(2030));

DECLARE
  sql_text ora_name_list_t;
  n PLS_INTEGER;
  v_stmt VARCHAR2(2000);
BEGIN
  n := <span class="bold">ora_sql_txt(sql_text)</span>;

  FOR i IN 1..n LOOP
    <span class="bold">v_stmt := v_stmt || sql_text(i);</span>
  END LOOP;

  INSERT INTO event_table VALUES (&#39;text of
    triggering statement: &#39; || <span class="bold">v_stmt</span>);
END;
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment892" id="d65654e7857" headers="d65654e7394">
<pre dir="ltr">ora_sysevent
</pre></td>
<td class="cellalignment899" headers="d65654e7857 d65654e7397">
<p><code class="codeph">VARCHAR2(20)</code>: Name of triggering event, as given in syntax</p>
</td>
<td class="cellalignment958" headers="d65654e7857 d65654e7400">
<pre dir="ltr">INSERT INTO event_table
VALUES (<span class="bold">ora_sysevent</span>);
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment892" id="d65654e7872" headers="d65654e7394">
<pre dir="ltr">ora_with_grant_option
</pre></td>
<td class="cellalignment899" headers="d65654e7872 d65654e7397">
<p><code class="codeph">BOOLEAN</code>: <code class="codeph">TRUE</code> if privileges are granted with <code class="codeph">GRANT</code> option, <code class="codeph">FALSE</code> otherwise</p>
</td>
<td class="cellalignment958" headers="d65654e7872 d65654e7400">
<pre dir="ltr">IF (ora_sysevent = &#39;GRANT&#39; AND
  <span class="bold">ora_with_grant_option</span> = TRUE) THEN
    INSERT INTO event_table 
    VALUES (&#39;with grant option&#39;);
END IF;
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment892" id="d65654e7896" headers="d65654e7394">
<pre dir="ltr">ora_space_error_info (
error_number OUT NUMBER,
error_type OUT VARCHAR2,
object_owner OUT VARCHAR2,
table_space_name OUT VARCHAR2,
object_name OUT VARCHAR2,
sub_object_name OUT VARCHAR2
)
</pre></td>
<td class="cellalignment899" headers="d65654e7896 d65654e7397">
<p><code class="codeph">BOOLEAN</code>: <code class="codeph">TRUE</code> if error is related to out-of-space condition, <code class="codeph">FALSE</code> otherwise</p>
<p><code class="codeph">OUT</code> parameters: Information about object that caused error</p>
</td>
<td class="cellalignment958" headers="d65654e7896 d65654e7400">
<pre dir="ltr">IF (<span class="bold">ora_space_error_info (</span>
     <span class="bold">eno,typ,owner,ts,obj,subobj) = TRUE)</span> THEN
  DBMS_OUTPUT.PUT_LINE(&#39;The object &#39;|| <span class="bold">obj</span>
     || &#39; owned by &#39; || <span class="bold">owner</span> ||
     &#39; has run out of space.&#39;);
END IF;
</pre></td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1</sup></p>
<p>Position 1 is the top of the stack.</p>
</div>
</div>
<a id="LNPLS796"></a><a id="LNPLS20141"></a>
<div class="props_rev_3"><a id="GUID-5DEA2CE5-D61C-4E27-A36E-73348D9F619B"></a>
<h3 id="LNPLS-GUID-5DEA2CE5-D61C-4E27-A36E-73348D9F619B" class="sect3">Event Attribute Functions for Database Event Triggers</h3>
<div>
<p><a href="triggers.htm#GUID-5DEA2CE5-D61C-4E27-A36E-73348D9F619B__CHDHFBBG" title="This table summarizes system manager events.">Table 9-6</a> summarizes the database event triggers that can invoke event attribute functions. For more information about the triggering events in <a href="triggers.htm#GUID-5DEA2CE5-D61C-4E27-A36E-73348D9F619B__CHDHFBBG" title="This table summarizes system manager events.">Table 9-6</a>, see <span class="q">&#34;<a href="create_trigger.htm#GUID-AF9E33F1-64D1-4382-A6A4-EC33C36F237B__CIHBABAH">database_event</a>&#34;</span>.</p>
<div class="tblformalwide" id="GUID-5DEA2CE5-D61C-4E27-A36E-73348D9F619B__CHDHFBBG">
<p class="titleintable">Table 9-6 Database Event Triggers</p>
<table class="cellalignment885" title="Database Event Triggers" summary="This table summarizes system manager events.">
<thead>
<tr class="cellalignment870">
<th class="cellalignment881" id="d65654e8021">Triggering Event</th>
<th class="cellalignment881" id="d65654e8024">When Trigger Fires</th>
<th class="cellalignment915" id="d65654e8027">WHEN Conditions</th>
<th class="cellalignment923" id="d65654e8030">Restrictions</th>
<th class="cellalignment886" id="d65654e8033">Transaction</th>
<th class="cellalignment923" id="d65654e8036">Attribute Functions</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment870">
<td class="cellalignment883" id="d65654e8041" headers="d65654e8021">
<pre dir="ltr">AFTER STARTUP
</pre></td>
<td class="cellalignment883" headers="d65654e8041 d65654e8024">
<p>When database is opened.</p>
</td>
<td class="cellalignment917" headers="d65654e8041 d65654e8027">
<p>None allowed</p>
</td>
<td class="cellalignment924" headers="d65654e8041 d65654e8030">
<p>Trigger cannot do database operations.</p>
</td>
<td class="cellalignment890" headers="d65654e8041 d65654e8033">
<p>Starts a separate transaction and commits it after firing the triggers.</p>
</td>
<td class="cellalignment924" headers="d65654e8041 d65654e8036">
<pre dir="ltr">ora_sysevent
ora_login_user
ora_instance_num
ora_database_name
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment883" id="d65654e8060" headers="d65654e8021">
<pre dir="ltr">BEFORE SHUTDOWN
</pre></td>
<td class="cellalignment883" headers="d65654e8060 d65654e8024">
<p>Just before server starts shutdown of an instance.</p>
<p>This lets the cartridge shutdown completely. For abnormal instance shutdown, this trigger might not fire.</p>
</td>
<td class="cellalignment917" headers="d65654e8060 d65654e8027">
<p>None allowed</p>
</td>
<td class="cellalignment924" headers="d65654e8060 d65654e8030">
<p>Trigger cannot do database operations.</p>
</td>
<td class="cellalignment890" headers="d65654e8060 d65654e8033">
<p>Starts separate transaction and commits it after firing triggers.</p>
</td>
<td class="cellalignment924" headers="d65654e8060 d65654e8036">
<pre dir="ltr">ora_sysevent
ora_login_user
ora_instance_num
ora_database_name
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment883" id="d65654e8081" headers="d65654e8021">
<pre dir="ltr">AFTER DB_ROLE_CHANGE
</pre></td>
<td class="cellalignment883" headers="d65654e8081 d65654e8024">
<p>When database is opened for first time after role change.</p>
</td>
<td class="cellalignment917" headers="d65654e8081 d65654e8027">
<p>None allowed</p>
</td>
<td class="cellalignment924" headers="d65654e8081 d65654e8030">
<p>None</p>
</td>
<td class="cellalignment890" headers="d65654e8081 d65654e8033">
<p>Starts separate transaction and commits it after firing triggers.</p>
</td>
<td class="cellalignment924" headers="d65654e8081 d65654e8036">
<pre dir="ltr">ora_sysevent
ora_login_user
ora_instance_num
ora_database_name
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment883" id="d65654e8100" headers="d65654e8021">
<pre dir="ltr">AFTER SERVERERROR
</pre></td>
<td class="cellalignment883" headers="d65654e8100 d65654e8024">
<p>With condition, whenever specified error occurs. Without condition, whenever any error occurs.</p>
<p>Trigger does not fire for errors listed in <span class="q">&#34;<a href="create_trigger.htm#GUID-AF9E33F1-64D1-4382-A6A4-EC33C36F237B__CIHBABAH">database_event</a>&#34;</span>.</p>
</td>
<td class="cellalignment917" headers="d65654e8100 d65654e8027">
<p><code class="codeph">ERRNO</code> = <code class="codeph">eno</code></p>
</td>
<td class="cellalignment924" headers="d65654e8100 d65654e8030">
<p>Depends on error.</p>
</td>
<td class="cellalignment890" headers="d65654e8100 d65654e8033">
<p>Starts separate transaction and commits it after firing triggers.</p>
</td>
<td class="cellalignment924" headers="d65654e8100 d65654e8036">
<pre dir="ltr">ora_sysevent
ora_login_user
ora_instance_num
ora_database_name
ora_server_error
ora_is_servererror
ora_space_error_info
</pre></td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
</div>
<a id="LNPLS798"></a><a id="LNPLS797"></a>
<div class="props_rev_3"><a id="GUID-F6473AD0-75D2-4E36-8B15-F93F0B5A8B79"></a>
<h3 id="LNPLS-GUID-F6473AD0-75D2-4E36-8B15-F93F0B5A8B79" class="sect3">Event Attribute Functions for Client Event Triggers</h3>
<div>
<p><a href="triggers.htm#GUID-F6473AD0-75D2-4E36-8B15-F93F0B5A8B79__CHDGIJDB" title="This table summarizes client events.">Table 9-7</a> summarizes the client event triggers that can invoke event attribute functions. For more information about the triggering events in <a href="triggers.htm#GUID-F6473AD0-75D2-4E36-8B15-F93F0B5A8B79__CHDGIJDB" title="This table summarizes client events.">Table 9-7</a>, see <span class="q">&#34;<a href="create_trigger.htm#GUID-AF9E33F1-64D1-4382-A6A4-EC33C36F237B__CIHBDEFD">ddl_event</a>&#34;</span> and <span class="q">&#34;<a href="create_trigger.htm#GUID-AF9E33F1-64D1-4382-A6A4-EC33C36F237B__CIHBABAH">database_event</a>&#34;</span>.</p>
<div class="infobox-note" id="GUID-F6473AD0-75D2-4E36-8B15-F93F0B5A8B79__GUID-65EA2764-0C9F-4AB3-85F7-88840723CEEF">
<p class="notep1">Note:</p>
<p>If a client event trigger becomes the target of a DDL operation (such as <code class="codeph">CREATE</code> <code class="codeph">OR</code> <code class="codeph">REPLACE</code> <code class="codeph">TRIGGER</code>), then it cannot fire later during the same transaction.</p>
</div>
<div class="tblformalwide" id="GUID-F6473AD0-75D2-4E36-8B15-F93F0B5A8B79__CHDGIJDB">
<p class="titleintable">Table 9-7 Client Event Triggers</p>
<table class="cellalignment885" title="Client Event Triggers " summary="This table summarizes client events.">
<thead>
<tr class="cellalignment870">
<th class="cellalignment930" id="d65654e8240">Triggering Event</th>
<th class="cellalignment894" id="d65654e8243">When Trigger Fires</th>
<th class="cellalignment894" id="d65654e8246">WHEN Conditions</th>
<th class="cellalignment894" id="d65654e8249">Restrictions</th>
<th class="cellalignment930" id="d65654e8252">Transaction</th>
<th class="cellalignment953" id="d65654e8255">Attribute Functions</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment870">
<td class="cellalignment932" id="d65654e8260" headers="d65654e8240">
<pre dir="ltr">BEFORE ALTER

AFTER ALTER
</pre></td>
<td class="cellalignment897" headers="d65654e8260 d65654e8243">
<p>When catalog object is altered</p>
</td>
<td class="cellalignment897" headers="d65654e8260 d65654e8246">
<p>Simple conditions on type and name of object, <code class="codeph">UID</code>, and <code class="codeph">USER</code></p>
</td>
<td class="cellalignment897" headers="d65654e8260 d65654e8249">
<p>Trigger cannot do DDL operations on object that caused event to be generated.</p>
<p>DDL on other objects is limited to compiling an object, creating a trigger, and creating, altering, and dropping a table.</p>
</td>
<td class="cellalignment932" headers="d65654e8260 d65654e8252">
<p>Fires triggers in current transaction.</p>
</td>
<td class="cellalignment955" headers="d65654e8260 d65654e8255">
<pre dir="ltr">ora_sysevent 
ora_login_user
ora_instance_num
ora_database_name
ora_dict_obj_type 
ora_dict_obj_name
ora_dict_obj_owner
ora_des_encrypted_password
 (for ALTER USER events)
ora_is_alter_column
 (for ALTER TABLE events)
ora_is_drop_column
 (for ALTER TABLE events)
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment932" id="d65654e8286" headers="d65654e8240">
<pre dir="ltr">BEFORE DROP

AFTER DROP
</pre></td>
<td class="cellalignment897" headers="d65654e8286 d65654e8243">
<p>When catalog object is dropped</p>
</td>
<td class="cellalignment897" headers="d65654e8286 d65654e8246">
<p>Simple conditions on type and name of object, <code class="codeph">UID</code>, and <code class="codeph">USER</code></p>
</td>
<td class="cellalignment897" headers="d65654e8286 d65654e8249">
<p>Trigger cannot do DDL operations on object that caused event to be generated.</p>
<p>DDL on other objects is limited to compiling an object, creating a trigger, and creating, altering, and dropping a table.</p>
</td>
<td class="cellalignment932" headers="d65654e8286 d65654e8252">
<p>Fires triggers in current transaction.</p>
</td>
<td class="cellalignment955" headers="d65654e8286 d65654e8255">
<pre dir="ltr">ora_sysevent
ora_login_user
ora_instance_num
ora_database_name
ora_dict_obj_type
ora_dict_obj_name
ora_dict_obj_owner
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment932" id="d65654e8312" headers="d65654e8240">
<pre dir="ltr">BEFORE ANALYZE

AFTER ANALYZE
</pre></td>
<td class="cellalignment897" headers="d65654e8312 d65654e8243">
<p>When <code class="codeph">ANALYZE</code> statement is issued</p>
</td>
<td class="cellalignment897" headers="d65654e8312 d65654e8246">
<p>Simple conditions on type and name of object, <code class="codeph">UID</code>, and <code class="codeph">USER</code></p>
</td>
<td class="cellalignment897" headers="d65654e8312 d65654e8249">
<p>Trigger cannot do DDL operations on object that caused event to be generated.</p>
<p>DDL on other objects is limited to compiling an object, creating a trigger, and creating, altering, and dropping a table.</p>
</td>
<td class="cellalignment932" headers="d65654e8312 d65654e8252">
<p>Fires triggers in current transaction.</p>
</td>
<td class="cellalignment955" headers="d65654e8312 d65654e8255">
<pre dir="ltr">ora_sysevent
ora_login_user
ora_instance_num
ora_database_name
ora_dict_obj_name
ora_dict_obj_type
ora_dict_obj_owner
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment932" id="d65654e8341" headers="d65654e8240">
<pre dir="ltr">BEFORE ASSOCIATE STATISTICS

AFTER ASSOCIATE STATISTICS
</pre></td>
<td class="cellalignment897" headers="d65654e8341 d65654e8243">
<p>When <code class="codeph">ASSOCIATE</code> <code class="codeph">STATISTICS</code> statement is issued</p>
</td>
<td class="cellalignment897" headers="d65654e8341 d65654e8246">
<p>Simple conditions on type and name of object, <code class="codeph">UID</code>, and <code class="codeph">USER</code></p>
</td>
<td class="cellalignment897" headers="d65654e8341 d65654e8249">
<p>Trigger cannot do DDL operations on object that caused event to be generated.</p>
<p>DDL on other objects is limited to compiling an object, creating a trigger, and creating, altering, and dropping a table.</p>
</td>
<td class="cellalignment932" headers="d65654e8341 d65654e8252">
<p>Fires triggers in current transaction.</p>
</td>
<td class="cellalignment955" headers="d65654e8341 d65654e8255">
<pre dir="ltr">ora_sysevent
ora_login_user
ora_instance_num
ora_database_name
ora_dict_obj_name
ora_dict_obj_type
ora_dict_obj_owner
ora_dict_obj_name_list
ora_dict_obj_owner_list
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment932" id="d65654e8373" headers="d65654e8240">
<pre dir="ltr">BEFORE AUDIT

AFTER AUDIT

BEFORE NOAUDIT

AFTER NOAUDIT
</pre></td>
<td class="cellalignment897" headers="d65654e8373 d65654e8243">
<p>When <code class="codeph">AUDIT</code> or <code class="codeph">NOAUDIT</code> statement is issued</p>
</td>
<td class="cellalignment897" headers="d65654e8373 d65654e8246">
<p>Simple conditions on type and name of object, <code class="codeph">UID</code>, and <code class="codeph">USER</code></p>
</td>
<td class="cellalignment897" headers="d65654e8373 d65654e8249">
<p>Trigger cannot do DDL operations on object that caused event to be generated.</p>
<p>DDL on other objects is limited to compiling an object, creating a trigger, and creating, altering, and dropping a table.</p>
</td>
<td class="cellalignment932" headers="d65654e8373 d65654e8252">
<p>Fires triggers in current transaction.</p>
</td>
<td class="cellalignment955" headers="d65654e8373 d65654e8255">
<pre dir="ltr">ora_sysevent
ora_login_user
ora_instance_num
ora_database_name
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment932" id="d65654e8405" headers="d65654e8240">
<pre dir="ltr">BEFORE COMMENT

AFTER COMMENT
</pre></td>
<td class="cellalignment897" headers="d65654e8405 d65654e8243">
<p>When object is commented</p>
</td>
<td class="cellalignment897" headers="d65654e8405 d65654e8246">
<p>Simple conditions on type and name of object, <code class="codeph">UID</code>, and <code class="codeph">USER</code></p>
</td>
<td class="cellalignment897" headers="d65654e8405 d65654e8249">
<p>Trigger cannot do DDL operations on object that caused event to be generated.</p>
<p>DDL on other objects is limited to compiling an object, creating a trigger, and creating, altering, and dropping a table.</p>
</td>
<td class="cellalignment932" headers="d65654e8405 d65654e8252">
<p>Fires triggers in current transaction.</p>
</td>
<td class="cellalignment955" headers="d65654e8405 d65654e8255">
<pre dir="ltr">ora_sysevent
ora_login_user
ora_instance_num
ora_database_name
ora_dict_obj_name
ora_dict_obj_type
ora_dict_obj_owner
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment932" id="d65654e8431" headers="d65654e8240">
<pre dir="ltr">BEFORE CREATE

AFTER CREATE
</pre></td>
<td class="cellalignment897" headers="d65654e8431 d65654e8243">
<p>When catalog object is created</p>
</td>
<td class="cellalignment897" headers="d65654e8431 d65654e8246">
<p>Simple conditions on type and name of object, <code class="codeph">UID</code>, and <code class="codeph">USER</code></p>
</td>
<td class="cellalignment897" headers="d65654e8431 d65654e8249">
<p>Trigger cannot do DDL operations on object that caused event to be generated.</p>
<p>DDL on other objects is limited to compiling an object, creating a trigger, and creating, altering, and dropping a table.</p>
</td>
<td class="cellalignment932" headers="d65654e8431 d65654e8252">
<p>Fires triggers in current transaction.</p>
</td>
<td class="cellalignment955" headers="d65654e8431 d65654e8255">
<pre dir="ltr">ora_sysevent 
ora_login_user
ora_instance_num
ora_database_name
ora_dict_obj_type 
ora_dict_obj_name
ora_dict_obj_owner
ora_is_creating_nested_table
 (for CREATE TABLE events)
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment932" id="d65654e8457" headers="d65654e8240">
<pre dir="ltr">BEFORE DDL

AFTER DDL
</pre></td>
<td class="cellalignment897" headers="d65654e8457 d65654e8243">
<p>When most SQL DDL statements are issued. Not fired for <code class="codeph">ALTER</code> <code class="codeph">DATABASE</code>, <code class="codeph">CREATE</code> <code class="codeph">CONTROLFILE</code>, <code class="codeph">CREATE</code> <code class="codeph">DATABASE</code>, and DDL issued through the PL/SQL subprogram interface, such as creating an advanced queue.</p>
</td>
<td class="cellalignment897" headers="d65654e8457 d65654e8246">
<p>Simple conditions on type and name of object, <code class="codeph">UID</code>, and <code class="codeph">USER</code></p>
</td>
<td class="cellalignment897" headers="d65654e8457 d65654e8249">
<p>Trigger cannot do DDL operations on object that caused event to be generated.</p>
<p>DDL on other objects is limited to compiling an object, creating a trigger, and creating, altering, and dropping a table.</p>
</td>
<td class="cellalignment932" headers="d65654e8457 d65654e8252">
<p>Fires triggers in current transaction.</p>
</td>
<td class="cellalignment955" headers="d65654e8457 d65654e8255">
<pre dir="ltr">ora_sysevent
ora_login_user
ora_instance_num
ora_database_name
ora_dict_obj_name
ora_dict_obj_type
ora_dict_obj_owner
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment932" id="d65654e8502" headers="d65654e8240">
<pre dir="ltr">BEFORE DISASSOCIATE STATISTICS

AFTER DISASSOCIATE STATISTICS
</pre></td>
<td class="cellalignment897" headers="d65654e8502 d65654e8243">
<p>When <code class="codeph">DISASSOCIATE</code> <code class="codeph">STATISTICS</code> statement is issued</p>
</td>
<td class="cellalignment897" headers="d65654e8502 d65654e8246">
<p>Simple conditions on type and name of object, <code class="codeph">UID</code>, and <code class="codeph">USER</code></p>
</td>
<td class="cellalignment897" headers="d65654e8502 d65654e8249">
<p>Trigger cannot do DDL operations on object that caused event to be generated.</p>
<p>DDL on other objects is limited to compiling an object, creating a trigger, and creating, altering, and dropping a table.</p>
</td>
<td class="cellalignment932" headers="d65654e8502 d65654e8252">
<p>Fires triggers in current transaction.</p>
</td>
<td class="cellalignment955" headers="d65654e8502 d65654e8255">
<pre dir="ltr">ora_sysevent
ora_login_user
ora_instance_num
ora_database_name
ora_dict_obj_name
ora_dict_obj_type
ora_dict_obj_owner
ora_dict_obj_name_list
ora_dict_obj_owner_list
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment932" id="d65654e8534" headers="d65654e8240">
<pre dir="ltr">BEFORE GRANT

AFTER GRANT
</pre></td>
<td class="cellalignment897" headers="d65654e8534 d65654e8243">
<p>When <code class="codeph">GRANT</code> statement is issued</p>
</td>
<td class="cellalignment897" headers="d65654e8534 d65654e8246">
<p>Simple conditions on type and name of object, <code class="codeph">UID</code>, and <code class="codeph">USER</code></p>
</td>
<td class="cellalignment897" headers="d65654e8534 d65654e8249">
<p>Trigger cannot do DDL operations on object that caused event to be generated.</p>
<p>DDL on other objects is limited to compiling an object, creating a trigger, and creating, altering, and dropping a table.</p>
</td>
<td class="cellalignment932" headers="d65654e8534 d65654e8252">
<p>Fires triggers in current transaction.</p>
</td>
<td class="cellalignment955" headers="d65654e8534 d65654e8255">
<pre dir="ltr">ora_sysevent
ora_login_user
ora_instance_num
ora_database_name
ora_dict_obj_name
ora_dict_obj_type
ora_dict_obj_owner
ora_grantee
ora_with_grant_option
ora_privilege_list
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment932" id="d65654e8563" headers="d65654e8240">
<pre dir="ltr">BEFORE LOGOFF
</pre></td>
<td class="cellalignment897" headers="d65654e8563 d65654e8243">
<p>At start of user logoff</p>
</td>
<td class="cellalignment897" headers="d65654e8563 d65654e8246">
<p>Simple conditions on <code class="codeph">UID</code> and <code class="codeph">USER</code></p>
</td>
<td class="cellalignment897" headers="d65654e8563 d65654e8249">
<p>DDL on other objects is limited to compiling an object, creating a trigger, and creating, altering, and dropping a table.</p>
</td>
<td class="cellalignment932" headers="d65654e8563 d65654e8252">
<p>Fires triggers in current transaction.</p>
</td>
<td class="cellalignment955" headers="d65654e8563 d65654e8255">
<pre dir="ltr">ora_sysevent
ora_login_user
ora_instance_num
ora_database_name
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment932" id="d65654e8588" headers="d65654e8240">
<pre dir="ltr">AFTER LOGON
</pre></td>
<td class="cellalignment897" headers="d65654e8588 d65654e8243">
<p>After successful user logon</p>
</td>
<td class="cellalignment897" headers="d65654e8588 d65654e8246">
<p>Simple conditions on <code class="codeph">UID</code> and <code class="codeph">USER</code></p>
</td>
<td class="cellalignment897" headers="d65654e8588 d65654e8249">
<p>DDL on other objects is limited to compiling an object, creating a trigger, and creating, altering, and dropping a table.</p>
</td>
<td class="cellalignment932" headers="d65654e8588 d65654e8252">
<p>Starts separate transaction and commits it after firing triggers.</p>
</td>
<td class="cellalignment955" headers="d65654e8588 d65654e8255">
<pre dir="ltr">ora_sysevent
ora_login_user
ora_instance_num
ora_database_name
ora_client_ip_address
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment932" id="d65654e8612" headers="d65654e8240">
<pre dir="ltr">BEFORE RENAME

AFTER RENAME
</pre></td>
<td class="cellalignment897" headers="d65654e8612 d65654e8243">
<p>When <code class="codeph">RENAME</code> statement is issued</p>
</td>
<td class="cellalignment897" headers="d65654e8612 d65654e8246">
<p>Simple conditions on type and name of object, <code class="codeph">UID</code>, and <code class="codeph">USER</code></p>
</td>
<td class="cellalignment897" headers="d65654e8612 d65654e8249">
<p>Trigger cannot do DDL operations on object that caused event to be generated.</p>
<p>DDL on other objects is limited to compiling an object, creating a trigger, and creating, altering, and dropping a table.</p>
</td>
<td class="cellalignment932" headers="d65654e8612 d65654e8252">
<p>Fires triggers in current transaction.</p>
</td>
<td class="cellalignment955" headers="d65654e8612 d65654e8255">
<pre dir="ltr">ora_sysevent
ora_login_user
ora_instance_num
ora_database_name
ora_dict_obj_name
ora_dict_obj_owner
ora_dict_obj_type
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment932" id="d65654e8641" headers="d65654e8240">
<pre dir="ltr">BEFORE REVOKE

AFTER REVOKE
</pre></td>
<td class="cellalignment897" headers="d65654e8641 d65654e8243">
<p>When <code class="codeph">REVOKE</code> statement is issued</p>
</td>
<td class="cellalignment897" headers="d65654e8641 d65654e8246">
<p>Simple conditions on type and name of object, <code class="codeph">UID</code>, and <code class="codeph">USER</code></p>
</td>
<td class="cellalignment897" headers="d65654e8641 d65654e8249">
<p>Trigger cannot do DDL operations on object that caused event to be generated.</p>
<p>DDL on other objects is limited to compiling an object, creating a trigger, and creating, altering, and dropping a table.</p>
</td>
<td class="cellalignment932" headers="d65654e8641 d65654e8252">
<p>Fires triggers in current transaction.</p>
</td>
<td class="cellalignment955" headers="d65654e8641 d65654e8255">
<pre dir="ltr">ora_sysevent
ora_login_user
ora_instance_num
ora_database_name
ora_dict_obj_name
ora_dict_obj_type
ora_dict_obj_owner
ora_revokee
ora_privilege_list
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment932" id="d65654e8670" headers="d65654e8240">
<pre dir="ltr">AFTER SUSPEND
</pre></td>
<td class="cellalignment897" headers="d65654e8670 d65654e8243">
<p>After SQL statement is suspended because of out-of-space condition.</p>
<p>(Trigger must correct condition so statement can be resumed.)</p>
</td>
<td class="cellalignment897" headers="d65654e8670 d65654e8246">
<p>Simple conditions on type and name of object, <code class="codeph">UID</code>, and <code class="codeph">USER</code></p>
</td>
<td class="cellalignment897" headers="d65654e8670 d65654e8249">
<p>Trigger cannot do DDL operations on object that caused event to be generated.</p>
<p>DDL on other objects is limited to compiling an object, creating a trigger, and creating, altering, and dropping a table.</p>
</td>
<td class="cellalignment932" headers="d65654e8670 d65654e8252">
<p>Fires triggers in current transaction.</p>
</td>
<td class="cellalignment955" headers="d65654e8670 d65654e8255">
<pre dir="ltr">ora_sysevent
ora_login_user
ora_instance_num
ora_database_name
ora_server_error
ora_is_servererror
ora_space_error_info
</pre></td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment932" id="d65654e8698" headers="d65654e8240">
<pre dir="ltr">BEFORE TRUNCATE

AFTER TRUNCATE
</pre></td>
<td class="cellalignment897" headers="d65654e8698 d65654e8243">
<p>When object is truncated</p>
</td>
<td class="cellalignment897" headers="d65654e8698 d65654e8246">
<p>Simple conditions on type and name of object, <code class="codeph">UID</code>, and <code class="codeph">USER</code></p>
</td>
<td class="cellalignment897" headers="d65654e8698 d65654e8249">
<p>Trigger cannot do DDL operations on object that caused event to be generated.</p>
<p>DDL on other objects is limited to compiling an object, creating a trigger, and creating, altering, and dropping a table.</p>
</td>
<td class="cellalignment932" headers="d65654e8698 d65654e8252">
<p>Fires triggers in current transaction.</p>
</td>
<td class="cellalignment955" headers="d65654e8698 d65654e8255">
<pre dir="ltr">ora_sysevent
ora_login_user
ora_instance_num
ora_database_name
ora_dict_obj_name
ora_dict_obj_type
ora_dict_obj_owner
</pre></td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
</div>
</div>
<a id="LNPLS691"></a><a id="LNPLS2012"></a>
<div class="props_rev_3"><a id="GUID-F843EE28-6D46-4AA2-B3B3-7CB5485B96CE"></a>
<h2 id="LNPLS-GUID-F843EE28-6D46-4AA2-B3B3-7CB5485B96CE" class="sect2">Views for Information About Triggers</h2>
<div>
<p>The <code class="codeph">*_TRIGGERS</code> static data dictionary views reveal information about triggers. For information about these views, see <a class="olink REFRN20293" target="_blank" href="../REFRN/GUID-0558FD5E-3EAD-4829-B9A5-4AA029C2105E.htm#REFRN20293"><span class="italic">Oracle Database Reference</span></a>.</p>
<p><a href="triggers.htm#GUID-F843EE28-6D46-4AA2-B3B3-7CB5485B96CE__BCFHCBGE">Example 9-28</a> creates a trigger and queries the static data dictionary view <code class="codeph">USER_TRIGGERS</code> twice&mdash;first to show its type, triggering event, and the name of the table on which it is created, and then to show its body.</p>
<div class="infobox-note" id="GUID-F843EE28-6D46-4AA2-B3B3-7CB5485B96CE__GUID-975FF7C2-3BF3-406D-8D44-0778B6B83366">
<p class="notep1">Note:</p>
<p>The query results in <a href="triggers.htm#GUID-F843EE28-6D46-4AA2-B3B3-7CB5485B96CE__BCFHCBGE">Example 9-28</a> were formatted by these SQL*Plus commands:</p>
<pre dir="ltr">COLUMN Trigger_type FORMAT A15
COLUMN Triggering_event FORMAT A16
COLUMN Table_name FORMAT A11
COLUMN Trigger_body FORMAT A50
SET LONG 9999
</pre></div>
<div class="example" id="GUID-F843EE28-6D46-4AA2-B3B3-7CB5485B96CE__BCFHCBGE">
<p class="titleinexample">Example 9-28 Viewing Information About Triggers</p>
<pre dir="ltr">CREATE OR REPLACE TRIGGER Emp_count
  AFTER DELETE ON employees
DECLARE
  n  INTEGER;
BEGIN
  SELECT COUNT(*) INTO n FROM employees;
  DBMS_OUTPUT.PUT_LINE(&#39;There are now &#39; || n || &#39; employees.&#39;);
END;
/

COLUMN Trigger_type FORMAT A15
COLUMN Triggering_event FORMAT A16
COLUMN Table_name FORMAT A11
COLUMN Trigger_body FORMAT A50
</pre>
<p>Query:</p>
<pre dir="ltr"><span class="bold">SELECT Trigger_type, Triggering_event, Table_name</span>
<span class="bold">FROM USER_TRIGGERS</span>
<span class="bold">WHERE Trigger_name = &#39;EMP_COUNT&#39;;</span>
</pre>
<p>Result:</p>
<pre dir="ltr">TRIGGER_TYPE    TRIGGERING_EVENT TABLE_NAME
--------------- ---------------- -----------
AFTER STATEMENT DELETE           EMPLOYEES
</pre>
<p>Query:</p>
<pre dir="ltr">SELECT Trigger_body
FROM <span class="bold">USER_TRIGGERS</span>
WHERE Trigger_name = &#39;EMP_COUNT&#39;;
</pre>
<p>Result:</p>
<pre dir="ltr">TRIGGER_BODY
--------------------------------------------------
DECLARE
  n  INTEGER;
BEGIN
  SELECT COUNT(*) INTO n FROM employees;
  DBMS_OUTPUT.PUT_LINE(&#39;There are now &#39; || n || &#39;
employees.&#39;);
END;
 
 
1 row selected.
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment869">
<tr>
<td class="cellalignment912">
<table class="cellalignment874">
<tr>
<td class="cellalignment873"><a href="subprograms.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment873"><a href="packages.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment914">
<table class="cellalignment872">
<tr>
<td class="cellalignment873"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment873"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment873"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment873"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment873"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment873"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>


</body></html>