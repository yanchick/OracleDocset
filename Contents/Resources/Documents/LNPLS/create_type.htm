<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-78088"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/CREATE%20TYPE%20Statement"></a><title>CREATE TYPE Statement</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="description" content="The CREATE TYPE statement specifies the name of the type and its attributes, methods, and other properties."/>
<meta name="keywords" content="CREATE TYPE statement, Abstract Data Type (ADT), creating, SQLJ object type, creating"/>
<meta name="dcterms.created" content="2017-05-09T17:03:42Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database PL/SQL Language Reference"/>
<meta name="dcterms.identifier" content="E50727-06"/>
<meta name="dcterms.isVersionOf" content="LNPLS"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="create_trigger.htm" title="Previous" type="text/html"/>
<link rel="Next" href="create_type_body.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E50727-06.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-389D603D-FBD0-452A-8414-240BBBC57034"></a> <span id="PAGE" style="display:none;">86/100</span> <!-- End Header -->
<a id="LNPLS2119"></a><a id="LNPLS2184"></a><a id="LNPLS1619"></a><a id="LNPLS1620"></a><a id="LNPLS1621"></a><a id="LNPLS1622"></a><a id="LNPLS1623"></a><a id="LNPLS1624"></a><a id="LNPLS1625"></a><a id="LNPLS1626"></a><a id="LNPLS1627"></a><a id="LNPLS1628"></a><a id="LNPLS1631"></a><a id="LNPLS1629"></a><a id="LNPLS1630"></a><a id="LNPLS1632"></a><a id="LNPLS2123"></a><a id="LNPLS2124"></a><a id="LNPLS1638"></a><a id="LNPLS1639"></a><a id="LNPLS1640"></a><a id="LNPLS1641"></a><a id="LNPLS1643"></a><a id="LNPLS1644"></a><a id="LNPLS2125"></a><a id="LNPLS1642"></a><a id="LNPLS1645"></a><a id="LNPLS1646"></a><a id="LNPLS1647"></a><a id="LNPLS1648"></a><a id="LNPLS1649"></a><a id="LNPLS1650"></a><a id="LNPLS1651"></a><a id="LNPLS1652"></a><a id="LNPLS1653"></a><a id="LNPLS1654"></a><a id="LNPLS1655"></a><a id="LNPLS1656"></a><a id="LNPLS1657"></a><a id="LNPLS1658"></a><a id="LNPLS1659"></a><a id="LNPLS1660"></a><a id="LNPLS1661"></a><a id="LNPLS1662"></a><a id="LNPLS1663"></a><a id="LNPLS1664"></a><a id="LNPLS1665"></a><a id="LNPLS1666"></a><a id="LNPLS1667"></a><a id="LNPLS1668"></a><a id="LNPLS1669"></a><a id="LNPLS1670"></a><a id="LNPLS1899"></a><a id="LNPLS01386"></a><a id="LNPLS1679"></a><a id="LNPLS01385"></a><a id="LNPLS1680"></a><a id="LNPLS1681"></a><a id="LNPLS1682"></a><a id="LNPLS1683"></a><a id="LNPLS1684"></a><a id="LNPLS01379"></a><a id="LNPLS1685"></a><a id="LNPLS1686"></a><a id="LNPLS01383"></a><a id="LNPLS01380"></a><a id="LNPLS1687"></a><a id="LNPLS1688"></a><a id="LNPLS1689"></a><a id="LNPLS1690"></a><a id="LNPLS1691"></a><a id="LNPLS2130"></a><a id="LNPLS2131"></a><a id="LNPLS01375"></a>
<h1 id="LNPLS-GUID-389D603D-FBD0-452A-8414-240BBBC57034" class="sect1">CREATE TYPE Statement</h1>
<div>
<p>The <code class="codeph">CREATE TYPE</code> statement specifies the name of the type and its attributes, methods, and other properties.</p>
<div class="section">
<p>The <code class="codeph">CREATE</code> <code class="codeph">TYPE</code> statement creates or replaces the specification of one of these:</p>
<ul style="list-style-type: disc;">
<li>
<p>Abstract Data Type (ADT) (including a SQLJ object type)</p>
</li>
<li>
<p>Standalone varying array (varray) type</p>
</li>
<li>
<p>Standalone nested table type</p>
</li>
<li>
<p>Incomplete object type</p>
<p>An <span class="bold">incomplete type</span> is a type created by a forward type definition. It is called incomplete because it has a name but no attributes or methods. It can be referenced by other types, allowing you define types that refer to each other. However, you must fully specify the type before you can use it to create a table or an object column or a column of a nested table type.</p>
</li>
</ul>
<p>The <code class="codeph">CREATE</code> <code class="codeph">TYPE</code> statement specifies the name of the type and its attributes, methods, and other properties. The <code class="codeph">CREATE</code> <code class="codeph">TYPE</code> <code class="codeph">BODY</code> statement contains the code for the methods that implement the type.</p>
<div class="infobox-note" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__GUID-AFCD685E-A70C-4ECE-8923-522315CE19C1">
<p class="notep1">Note:</p>
<ul style="list-style-type: disc;">
<li>
<p>If you create a type whose specification declares only attributes but no methods, then you need not specify a type body.</p>
</li>
<li>
<p>If you create a SQLJ object type, then you cannot specify a type body. The implementation of the type is specified as a Java class.</p>
</li>
<li>
<p>A standalone collection type that you create with the <code class="codeph">CREATE</code> <code class="codeph">TYPE</code> statement differs from a collection type that you define with the keyword <code class="codeph">TYPE</code> in a PL/SQL block or package. For information about the latter, see <span class="q">&#34;<a href="collection_variable.htm#GUID-89A1863C-65A1-40CF-9392-86E9FDC21BE9" title="A collection variable is a composite variable whose internal components, called elements, have the same data type.">Collection Variable Declaration</a>&#34;</span>.</p>
</li>
<li>
<p>With the <code class="codeph">CREATE</code> <code class="codeph">TYPE</code> statement, you can create nested table and <code class="codeph">VARRAY</code> types, but not associative arrays. In a PL/SQL block or package, you can define all three collection types.</p>
</li>
</ul>
</div>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Topics</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="create_type.htm#GUID-389D603D-FBD0-452A-8414-240BBBC57034__BABCHABE">Prerequisites</a></p>
</li>
<li>
<p><a href="create_type.htm#GUID-389D603D-FBD0-452A-8414-240BBBC57034__I2064507">Syntax</a></p>
</li>
<li>
<p><a href="create_type.htm#GUID-389D603D-FBD0-452A-8414-240BBBC57034__BABGEFCH">Semantics</a></p>
</li>
<li>
<p><a href="create_type.htm#GUID-389D603D-FBD0-452A-8414-240BBBC57034__I2095312">Examples</a></p>
</li>
<li>
<p><a href="create_type.htm#GUID-389D603D-FBD0-452A-8414-240BBBC57034__BABIGECI">Related Topics</a></p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__BABCHABE">
<p class="subhead1">Prerequisites</p>
<p>To create a type in your schema, you must have the <code class="codeph">CREATE</code> <code class="codeph">TYPE</code> system privilege. To create a type in another user&#39;s schema, you must have the <code class="codeph">CREATE</code> <code class="codeph">ANY</code> <code class="codeph">TYPE</code> system privilege. You can acquire these privileges explicitly or be granted them through a role.</p>
<p>To create a subtype, you must have the <code class="codeph">UNDER</code> <code class="codeph">ANY</code> <code class="codeph">TYPE</code> system privilege or the <code class="codeph">UNDER</code> object privilege on the supertype.</p>
<p>The owner of the type must be explicitly granted the <code class="codeph">EXECUTE</code> object privilege to access all other types referenced in the definition of the type, or the type owner must be granted the <code class="codeph">EXECUTE</code> <code class="codeph">ANY</code> <code class="codeph">TYPE</code> system privilege. The owner cannot obtain these privileges through roles.</p>
<p>If the type owner intends to grant other users access to the type, then the owner must be granted the <code class="codeph">EXECUTE</code> object privilege on the referenced types with the <code class="codeph">GRANT</code> <code class="codeph">OPTION</code> or the <code class="codeph">EXECUTE</code> <code class="codeph">ANY</code> <code class="codeph">TYPE</code> system privilege with the <code class="codeph">ADMIN</code> <code class="codeph">OPTION</code>. Otherwise, the type owner has insufficient privileges to grant access on the type to other users.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__I2064507">
<p class="subhead1">Syntax</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1"><span class="italic">create_type</span> ::=</p>
<div class="figure" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__GUID-242DD226-5485-4D9A-B178-167E2057B931"><img width="638" height="79" src="img/create_type.gif" alt="Description of create_type.eps follows" title="Description of create_type.eps follows"/><br/>
<a href="img_text/create_type.htm">Description of the illustration create_type.eps</a></div>
<!-- class="figure" --></div>
<!-- class="section" -->
<div class="section">
<p class="subhead1"><span class="italic">plsql_type_source</span> ::=</p>
<div class="figure" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__GUID-020E8013-BB3D-4313-B5D7-C95DC4215EEA"><img width="612" height="194" src="img/plsql_type_source.gif" alt="Description of plsql_type_source.eps follows" title="Description of plsql_type_source.eps follows"/><br/>
<a href="img_text/plsql_type_source.htm">Description of the illustration plsql_type_source.eps</a></div>
<!-- class="figure" -->
<p>See:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="collection_variable.htm#GUID-89A1863C-65A1-40CF-9392-86E9FDC21BE9__CJAFJBHF">nested_table_type_def ::=</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="collection_variable.htm#GUID-89A1863C-65A1-40CF-9392-86E9FDC21BE9__CJAEAJJA">varray_type_def ::=</a>&#34;</span></p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1"><span class="italic">object_type_def</span> ::=</p>
<div class="figure" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__GUID-D66D08D2-4D89-45F8-A710-CE0D14BA41CF"><img width="675" height="463" src="img/object_type_def.gif" alt="Description of object_type_def.eps follows" title="Description of object_type_def.eps follows"/><br/>
<a href="img_text/object_type_def.htm">Description of the illustration object_type_def.eps</a></div>
<!-- class="figure" -->
<p>See:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="create_function.htm#GUID-B71BC5BD-B87C-4054-AAA5-213E856651F2__CIHFDACE">accessible_by_clause ::=</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="create_type.htm#GUID-389D603D-FBD0-452A-8414-240BBBC57034__I2121918">element_spec ::=</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="create_type.htm#GUID-389D603D-FBD0-452A-8414-240BBBC57034__I2186958">invoker_rights_clause ::=</a>&#34;</span></p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__I2186958">
<p class="subhead1"><span class="italic">invoker_rights_clause</span> ::=</p>
<div class="figure" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__GUID-7E1D7503-5FF2-4BAE-B9F2-2D48BE1F6F29"><img width="237" height="58" src="img/invoker_rights_clause.gif" alt="Description of invoker_rights_clause.eps follows" title="Description of invoker_rights_clause.eps follows"/><br/>
<a href="img_text/invoker_rights_clause.htm">Description of the illustration invoker_rights_clause.eps</a></div>
<!-- class="figure" --></div>
<!-- class="section" -->
<div class="section">
<p class="subhead1"><span class="italic">sqlj_object_type</span> ::=</p>
<div class="figure" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__GUID-82D12F92-047B-4A5C-B35E-0F6E954B68A2"><img width="602" height="91" src="img/sqlj_object_type.gif" alt="Description of sqlj_object_type.eps follows" title="Description of sqlj_object_type.eps follows"/><br/>
<a href="img_text/sqlj_object_type.htm">Description of the illustration sqlj_object_type.eps</a></div>
<!-- class="figure" --></div>
<!-- class="section" -->
<div class="section">
<p class="subhead1"><span class="italic">sqlj_object_type_attr</span> ::=</p>
<div class="figure" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__GUID-CE2B37B0-4BEB-46FB-877F-54FAB8EA55EE"><img width="301" height="27" src="img/sqlj_object_type_attr.gif" alt="Description of sqlj_object_type_attr.eps follows" title="Description of sqlj_object_type_attr.eps follows"/><br/>
<a href="img_text/sqlj_object_type_attr.htm">Description of the illustration sqlj_object_type_attr.eps</a></div>
<!-- class="figure" --></div>
<!-- class="section" -->
<div class="section" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__I2121918">
<p class="subhead1"><span class="italic">element_spec</span> ::=</p>
<div class="figure" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__GUID-C4078C47-52CE-4C1D-86FD-77989D460D5C"><img width="654" height="103" src="img/element_spec.gif" alt="Description of element_spec.eps follows" title="Description of element_spec.eps follows"/><br/>
<a href="img_text/element_spec.htm">Description of the illustration element_spec.eps</a></div>
<!-- class="figure" -->
<p>See:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="create_type.htm#GUID-389D603D-FBD0-452A-8414-240BBBC57034__I2121973">constructor_spec ::=</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="create_type.htm#GUID-389D603D-FBD0-452A-8414-240BBBC57034__I2121991">map_order_function_spec ::=</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="restrictreferences_pragma.htm#GUID-D189A0B4-D0D3-4951-BFC2-7D996F1659FE__CJAIBIIG">restrict_references_pragma ::=</a>&#34;</span></p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1"><span class="italic">inheritance_clauses</span> ::=</p>
<div class="figure" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__GUID-B66E373C-888E-4663-AD1F-896D2AEB12D7"><img width="284" height="103" src="img/inheritance_clauses.gif" alt="Description of inheritance_clauses.eps follows" title="Description of inheritance_clauses.eps follows"/><br/>
<a href="img_text/inheritance_clauses.htm">Description of the illustration inheritance_clauses.eps</a></div>
<!-- class="figure" --></div>
<!-- class="section" -->
<div class="section">
<p class="subhead1"><span class="italic">subprogram_spec</span> ::=</p>
<div class="figure" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__GUID-9926D4D3-9000-4959-8958-3A4C43AECE03"><img width="265" height="58" src="img/subprogram_spec.gif" alt="Description of subprogram_spec.eps follows" title="Description of subprogram_spec.eps follows"/><br/>
<a href="img_text/subprogram_spec.htm">Description of the illustration subprogram_spec.eps</a></div>
<!-- class="figure" --></div>
<!-- class="section" -->
<div class="section">
<p class="subhead1"><span class="italic">procedure_spec</span> ::=</p>
<div class="figure" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__GUID-819A8061-89BE-4D1E-9F09-953B606B39FD"><img width="661" height="79" src="img/procedure_spec.gif" alt="Description of procedure_spec.eps follows" title="Description of procedure_spec.eps follows"/><br/>
<a href="img_text/procedure_spec.htm">Description of the illustration procedure_spec.eps</a></div>
<!-- class="figure" -->
<p>See <span class="q">&#34;<a href="create_function.htm#GUID-B71BC5BD-B87C-4054-AAA5-213E856651F2__CJADHIEA">call_spec ::=</a>&#34;</span>.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__I2122046">
<p class="subhead1"><span class="italic">function_spec</span> ::=</p>
<div class="figure" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__GUID-58744871-1508-4475-95B5-6D0A9AA535B5"><img width="491" height="58" src="img/function_spec.gif" alt="Description of function_spec.eps follows" title="Description of function_spec.eps follows"/><br/>
<a href="img_text/function_spec.htm">Description of the illustration function_spec.eps</a></div>
<!-- class="figure" --></div>
<!-- class="section" -->
<div class="section">
<p class="subhead1"><span class="italic">return_clause</span> ::=</p>
<div class="figure" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__GUID-4F295664-1200-4BE2-B516-A64A2D7B4B87"><img width="385" height="110" src="img/return_clause.gif" alt="Description of return_clause.eps follows" title="Description of return_clause.eps follows"/><br/>
<a href="img_text/return_clause.htm">Description of the illustration return_clause.eps</a></div>
<!-- class="figure" -->
<p>See <span class="q">&#34;<a href="create_function.htm#GUID-B71BC5BD-B87C-4054-AAA5-213E856651F2__CJADHIEA">call_spec ::=</a>&#34;</span>.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__I2121973">
<p class="subhead1"><span class="italic">constructor_spec</span> ::=</p>
<div class="figure" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__GUID-58A6FC98-C1A8-4B7A-8F1D-F84565B690E4"><img width="591" height="249" src="img/constructor_spec.gif" alt="Description of constructor_spec.eps follows" title="Description of constructor_spec.eps follows"/><br/>
<a href="img_text/constructor_spec.htm">Description of the illustration constructor_spec.eps</a></div>
<!-- class="figure" -->
<p>See <span class="q">&#34;<a href="create_function.htm#GUID-B71BC5BD-B87C-4054-AAA5-213E856651F2__CJADHIEA">call_spec ::=</a>&#34;</span>.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__I2121991">
<p class="subhead1"><span class="italic">map_order_function_spec</span> ::=</p>
<div class="figure" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__GUID-D7DE55C4-1280-4864-9042-B188BA01E531"><img width="289" height="58" src="img/map_order_function_spec.gif" alt="Description of map_order_function_spec.eps follows" title="Description of map_order_function_spec.eps follows"/><br/>
<a href="img_text/map_order_function_spec.htm">Description of the illustration map_order_function_spec.eps</a></div>
<!-- class="figure" -->
<p>See <span class="q">&#34;<a href="create_type.htm#GUID-389D603D-FBD0-452A-8414-240BBBC57034__I2122046">function_spec ::=</a>&#34;</span>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1"><span class="italic">sqlj_object_type_sig</span> ::=</p>
<div class="figure" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__GUID-AA595B5A-9E7E-4A61-B22E-BDB32C8EC568"><img width="746" height="58" src="img/sqlj_object_type_sig.gif" alt="Description of sqlj_object_type_sig.eps follows" title="Description of sqlj_object_type_sig.eps follows"/><br/>
<a href="img_text/sqlj_object_type_sig.htm">Description of the illustration sqlj_object_type_sig.eps</a></div>
<!-- class="figure" --></div>
<!-- class="section" -->
<div class="section" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__BABGEFCH">
<p class="subhead1">Semantics</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1"><span class="italic">create_type</span></p>
<p><span class="bold">OR REPLACE</span></p>
<p>Re-creates the type if it exists, and recompiles it.</p>
<p>Users who were granted privileges on the type before it was redefined can still access the type without being regranted the privileges.</p>
<p>If any function-based indexes depend on the type, then the database marks the indexes <code class="codeph">DISABLED</code>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p><span class="bold">[ EDITIONABLE | NONEDITIONABLE ]</span></p>
<p>Specifies whether the type is an editioned or noneditioned object if editioning is enabled for the schema object type <code class="codeph">TYPE</code> in <span class="italic"><code class="codeph">schema</code></span>. <span class="bold">Default:</span> <code class="codeph">EDITIONABLE</code>. For information about editioned and noneditioned objects, see <a class="olink ADFNS99923" target="_blank" href="../ADFNS/adfns_editions.htm#ADFNS99923"><span class="italic">Oracle Database Development Guide</span></a>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1"><span class="italic">plsql_type_source</span></p>
<p><span class="bold"><span class="italic">schema</span></span></p>
<p>Name of the schema containing the type. <span class="bold">Default:</span> your schema.</p>
<p><span class="bold"><span class="italic">type_name</span></span></p>
<p>Name of an ADT, a nested table type, or a <code class="codeph">VARRAY</code> type.</p>
<p>If creating the type results in compilation errors, then the database returns an error. You can see the associated compiler error messages with the SQL*Plus command <code class="codeph">SHOW</code> <code class="codeph">ERRORS</code>.</p>
<p>The database implicitly defines a constructor method for each user-defined type that you create. A <span class="bold">constructor</span> is a system-supplied procedure that is used in SQL statements or in PL/SQL code to construct an instance of the type value. The name of the constructor method is the name of the user-defined type. You can also create a user-defined constructor using the <span class="italic"><code class="codeph">constructor_spec</code></span> syntax.</p>
<p>The parameters of the ADT constructor method are the data attributes of the ADT. They occur in the same order as the attribute definition order for the ADT. The parameters of a nested table or varray constructor are the elements of the nested table or the varray.</p>
</div>
<!-- class="section" -->
<div class="section">
<p><span class="bold">FORCE</span></p>
<p>If <span class="italic"><code class="codeph">type_name</code></span> exists and has type dependents, but not table dependents, <code class="codeph">FORCE</code> forces the statement to replace the type. (If <span class="italic"><code class="codeph">type_name</code></span> has table dependents, the statement fails with or without <code class="codeph">FORCE</code>.)</p>
<div class="infobox-note" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__GUID-EF3AD945-AE43-4C79-AAA4-46E1A6499269">
<p class="notep1">Note:</p>
<p>If type <code class="codeph">t1</code> has type dependent <code class="codeph">t2</code>, and type <code class="codeph">t2</code> has table dependents, then type <code class="codeph">t1</code> also has table dependents.</p>
</div>
<div class="infoboxnotealso" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__GUID-48888216-6069-400D-B5A0-DBDAA16F8807">
<p class="notep1">See Also:</p>
<p><a class="olink ADOBJ00402" target="_blank" href="../ADOBJ/adobjmng.htm#ADOBJ00402"><span class="italic">Oracle Database Object-Relational Developer&#39;s Guide</span></a></p>
</div>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1"><span class="italic">object_type_def</span></p>
<p>Creates an ADT. The variables that form the data structure are called <span class="bold">attributes</span>. The member subprograms that define the behavior of the ADT are called <span class="bold">methods</span>. The keywords <code class="codeph">AS</code> <code class="codeph">OBJECT</code> are required when creating an ADT.</p>
<div class="infoboxnotealso" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__GUID-A1BDBB3E-FF89-408F-B4F5-7F440B45E4B5">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="create_type.htm#GUID-389D603D-FBD0-452A-8414-240BBBC57034__I2083561">Example 14-18</a>&#34;</span></p>
</div>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1"><span class="italic">invoker_rights_clause</span></p>
<p>Specifies the <code class="codeph">AUTHID</code> property of the member functions and procedures of the ADT. For information about the <code class="codeph">AUTHID</code> property, see <span class="q">&#34;<a href="subprograms.htm#GUID-41D23DE7-3C07-41CF-962B-F92B696594B5">Invoker&#39;s Rights and Definer&#39;s Rights (AUTHID Property)</a>&#34;</span>.</p>
<p>Restrictions on <span class="italic">invoker_rights_clause</span></p>
<p>This clause is subject to these restrictions:</p>
<ul style="list-style-type: disc;">
<li>
<p>You can specify this clause only for an ADT, not for a nested table or <code class="codeph">VARRAY</code> type.</p>
</li>
<li>
<p>You can specify this clause for clarity if you are creating a subtype. However, a subtype inherits the <code class="codeph">AUTHID</code> property of its supertype, so you cannot specify a different value than was specified for the supertype.</p>
</li>
<li>
<p>If the supertype was created with <code class="codeph">AUTHID</code> <code class="codeph">DEFINER</code>, then you must create the subtype in the same schema as the supertype.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1"><span class="italic">accessible_by_clause</span></p>
<p>Has the same behavior for a type as it does for a function. See the <code class="codeph">CREATE</code> <code class="codeph">FUNCTION</code> <span class="q">&#34;<a href="create_function.htm#GUID-B71BC5BD-B87C-4054-AAA5-213E856651F2__CIHHDHJG">accessible_by_clause</a>&#34;</span>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p><span class="bold">OID &#39;<span class="italic">object_identifier</span>&#39;</span></p>
<p>Establishes type equivalence of identical objects in multiple databases. See <a class="olink ADOBJ00513" target="_blank" href="../ADOBJ/adobjvew.htm#ADOBJ00513"><span class="italic">Oracle Database Object-Relational Developer&#39;s Guide</span></a> for information about this clause.</p>
</div>
<!-- class="section" -->
<div class="section">
<p><span class="bold">AS OBJECT</span></p>
<p>Creates a schema-level ADT. Such ADTs are sometimes called <span class="bold">root</span> ADTs.</p>
<p><span class="bold">UNDER <span class="italic">supertype</span></span></p>
<p>Creates a subtype of an existing type. The existing supertype must be an ADT. The subtype you create in this statement inherits the properties of its supertype. It must either override some of those properties or add properties to distinguish it from the supertype.</p>
<div class="infoboxnotealso" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__GUID-1D61BB24-B60F-487D-8A62-EFBBFC1FE5EF">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="create_type.htm#GUID-389D603D-FBD0-452A-8414-240BBBC57034__I2126475">Example 14-19</a>&#34;</span> and <span class="q">&#34;<a href="create_type.htm#GUID-389D603D-FBD0-452A-8414-240BBBC57034__I2088454">Example 14-21</a>&#34;</span></p>
</div>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1"><span class="bold"><span class="italic">sqlj_object_type</span></span></p>
<p>Creates a <span class="bold">SQLJ</span> <span class="bold">object type</span>. With a SQLJ object type, you map a Java class to a SQL user-defined type. You can then define tables or columns of the SQLJ object type as you can with any other user-defined type.</p>
<p>You can map one Java class to multiple SQLJ object types. If there exists a subtype or supertype of a SQLJ object type, then it must also be a SQLJ object type. All types in the hierarchy must be SQLJ object types.</p>
<div class="infoboxnotealso" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__GUID-521A9EAE-677B-4653-A6A7-A0DB32CDDFAE">
<p class="notep1">See Also:</p>
<p><a class="olink ADOBJ00301" target="_blank" href="../ADOBJ/adobjenv.htm#ADOBJ00301"><span class="italic">Oracle Database Object-Relational Developer&#39;s Guide</span></a> for more information about creating SQLJ object types</p>
</div>
</div>
<!-- class="section" -->
<div class="section">
<p><span class="bold"><span class="italic">java_ext_name</span></span></p>
<p>Name of the Java class. If the class exists, then it must be public. The Java external name, including the schema, is validated.</p>
<p>Multiple SQLJ object types can be mapped to the same class. However:</p>
<ul style="list-style-type: disc;">
<li>
<p>A subtype must be mapped to a class that is an immediate subclass of the class to which its supertype is mapped.</p>
</li>
<li>
<p>Two subtypes of a common supertype cannot be mapped to the same class.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<p><span class="bold">SQLData | CustomDatum | OraData</span></p>
<p>Specifies the mechanism for creating the Java instance of the type. <code class="codeph">SQLData</code>, <code class="codeph">CustomDatum</code>, and <code class="codeph">OraData</code> are the interfaces that determine which mechanism to use.</p>
<div class="infoboxnotealso" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__GUID-EB97AC25-E95F-4619-9AFE-BF3FBAE7D3D5">
<p class="notep1">See Also:</p>
<p><a class="olink JJDBC" target="_blank" href="../JJDBC/toc.htm"><span class="italic">Oracle Database JDBC Developer&#39;s Guide</span></a> for information about these three interfaces and <span class="q">&#34;<a href="create_type.htm#GUID-389D603D-FBD0-452A-8414-240BBBC57034__I2126486">create_type.htm#GUID-389D603D-FBD0-452A-8414-240BBBC57034__I2126486</a>&#34;</span></p>
</div>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1"><span class="bold"><span class="italic">element_spec</span></span></p>
<p>Specifies each attribute of the ADT.</p>
<p><span class="bold"><span class="italic">attribute</span></span></p>
<p>Name of an ADT attribute. An ADT attribute is a data item with a name and a type specifier that forms the structure of the ADT. You must specify at least one attribute for each ADT. The name must be unique in the ADT, but can be used in other ADTs.</p>
<p>If you are creating a subtype, then the attribute name cannot be the same as any attribute or method name declared in the supertype chain.</p>
<p><span class="bold"><span class="italic">datatype</span></span></p>
<p>The data type of an ADT attribute. This data type must be stored in the database; that is, either a predefined data type or a user-defined standalone collection type. For information about predefined data types, see <a href="datatypes.htm#GUID-391C58FD-16AF-486C-AF28-173E309CDBA5" title="Every PL/SQL constant, variable, parameter, and function return value has a data type that determines its storage format and its valid values and operations.">PL/SQL Data Types</a>. For information about user-defined standalone collection types, see <span class="q">&#34;<a href="composites.htm#GUID-7E9034D5-0D33-43A1-9012-918350FE148C" title="PL/SQL has three collection types&mdash;associative array, VARRAY (variable-size array), and nested table.">Collection Types</a>&#34;</span>.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__BABEHDBJ">
<p class="subhead1">Restrictions on <span class="italic">datatype</span></p>
<ul style="list-style-type: disc;">
<li>
<p>You cannot impose the <code class="codeph">NOT</code> <code class="codeph">NULL</code> constraint on an attribute.</p>
</li>
<li>
<p>You cannot specify attributes of type <code class="codeph">ROWID</code>, <code class="codeph">LONG</code>, or <code class="codeph">LONG</code> <code class="codeph">RAW</code>.</p>
</li>
<li>
<p>You cannot specify a data type of <code class="codeph">UROWID</code> for an ADT.</p>
</li>
<li>
<p>If you specify an object of type <code class="codeph">REF</code>, then the target object must have an object identifier.</p>
</li>
<li>
<p>If you are creating a collection type for use as a nested table or varray column of a table, then you cannot specify attributes of type <code class="codeph">ANYTYPE</code>, <code class="codeph">ANYDATA</code>, or <code class="codeph">ANYDATASET</code>.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1"><span class="bold"><span class="italic">sqlj_object_type_attr</span></span></p>
<p>This clause is valid only if you have specified the <span class="italic"><code class="codeph">sqlj_object_type</code></span> clause to map a Java class to a SQLJ object type. Specify the external name of the Java field that corresponds to the attribute of the SQLJ object type. The Java <span class="italic"><code class="codeph">field_name</code></span> must exist in the class. You cannot map a Java <span class="italic"><code class="codeph">field_name</code></span> to multiple SQLJ object type attributes in the same type hierarchy.</p>
<p>This clause is optional when you create a SQLJ object type.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1"><span class="bold"><span class="italic">subprogram_spec</span></span></p>
<p>Associates a procedure subprogram with the ADT.</p>
<p><span class="bold">MEMBER</span></p>
<p>A function or procedure subprogram associated with the ADT that is referenced as an attribute. Typically, you invoke <code class="codeph">MEMBER</code> methods in a selfish style, such as <span class="italic"><code class="codeph">object_expression.method</code></span><code class="codeph">()</code>. This class of method has an implicit first argument referenced as <code class="codeph">SELF</code> in the method body, which represents the object on which the method was invoked.</p>
<p><span class="bold">Restriction on MEMBER</span></p>
<p>You cannot specify a <code class="codeph">MEMBER</code> method if you are mapping a Java class to a SQLJ object type.</p>
<div class="infoboxnotealso" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__GUID-48AE71BA-860E-4873-9134-99B686332FC8">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="create_type.htm#GUID-389D603D-FBD0-452A-8414-240BBBC57034__I2126584">Example 14-26</a>&#34;</span></p>
</div>
</div>
<!-- class="section" -->
<div class="section">
<p><span class="bold">STATIC</span></p>
<p>A function or procedure subprogram associated with the ADT. Unlike <code class="codeph">MEMBER</code> methods, <code class="codeph">STATIC</code> methods do not have any implicit parameters. You cannot reference <code class="codeph">SELF</code> in their body. They are typically invoked as <span class="italic"><code class="codeph">type_name.method</code></span><code class="codeph">()</code>.</p>
<p><span class="bold">Restrictions on STATIC</span></p>
<ul style="list-style-type: disc;">
<li>
<p>You cannot map a <code class="codeph">MEMBER</code> method in a Java class to a <code class="codeph">STATIC</code> method in a SQLJ object type.</p>
</li>
<li>
<p>For both <code class="codeph">MEMBER</code> and <code class="codeph">STATIC</code> methods, you must specify a corresponding method body in the type body for each procedure or function specification.</p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__GUID-0ED8526C-AFBD-4D51-93AA-ADB13EE1DF68">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="create_type.htm#GUID-389D603D-FBD0-452A-8414-240BBBC57034__I2126601">Example 14-27</a>&#34;</span></p>
</div>
</div>
<!-- class="section" -->
<div class="section">
<p><span class="bold">[NOT] FINAL, [NOT] INSTANTIABLE</span></p>
<p>At the schema level of the syntax, these clauses specify the inheritance attributes of the type.</p>
<p>Use the [<code class="codeph">NOT</code>] <code class="codeph">FINAL</code> clause to indicate whether any further subtypes can be created for this type:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold">(Default)</span> Specify <code class="codeph">FINAL</code> if no further subtypes can be created for this type.</p>
</li>
<li>
<p>Specify <code class="codeph">NOT</code> <code class="codeph">FINAL</code> if further subtypes can be created under this type.</p>
</li>
</ul>
<p>Use the [<code class="codeph">NOT</code>] <code class="codeph">INSTANTIABLE</code> clause to indicate whether any object instances of this type can be constructed:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold">(Default)</span> Specify <code class="codeph">INSTANTIABLE</code> if object instances of this type can be constructed.</p>
</li>
<li>
<p>Specify <code class="codeph">NOT</code> <code class="codeph">INSTANTIABLE</code> if no default or user-defined constructor exists for this ADT. You must specify these keywords for any type with noninstantiable methods and for any type that has no attributes, either inherited or specified in this statement.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1"><span class="bold"><span class="italic">inheritance_clauses</span></span></p>
<p>Specify the relationship between supertypes and subtypes.</p>
</div>
<!-- class="section" -->
<div class="section">
<p><span class="bold">OVERRIDING</span></p>
<p>Specifies that this method overrides a <code class="codeph">MEMBER</code> method defined in the supertype. This keyword is required if the method redefines a supertype method. <span class="bold">Default:</span> <code class="codeph">NOT</code> <code class="codeph">OVERRIDING</code>.</p>
<p><span class="bold">Restriction on OVERRIDING</span></p>
<p>The <code class="codeph">OVERRIDING</code> clause is not valid for a <code class="codeph">STATIC</code> method or for a SQLJ object type.</p>
</div>
<!-- class="section" -->
<div class="section">
<p><span class="bold">FINAL</span></p>
<p>Specifies that this method cannot be overridden by any subtype of this type. <span class="bold">Default:</span> <code class="codeph">NOT</code> <code class="codeph">FINAL</code>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p><span class="bold">NOT INSTANTIABLE</span></p>
<p>Specifies that the type does not provide an implementation for this method. <span class="bold">Default:</span> all methods are <code class="codeph">INSTANTIABLE</code>.</p>
<p><span class="bold">Restriction on NOT INSTANTIABLE</span></p>
<p>If you specify <code class="codeph">NOT</code> <code class="codeph">INSTANTIABLE</code>, then you cannot specify <code class="codeph">FINAL</code> or <code class="codeph">STATIC</code>.</p>
<div class="infoboxnotealso" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__GUID-65CDFE6D-AC33-44D4-8426-15D3886CC066">
<p class="notep1">See Also:</p>
<p><span class="italic"><a href="create_type.htm#GUID-389D603D-FBD0-452A-8414-240BBBC57034__I2076738">constructor_spec</a></span></p>
</div>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1"><span class="bold"><span class="italic">procedure_spec</span> or <span class="italic">function_spec</span></span></p>
<p>Specifies the parameters and data types of the procedure or function. If this subprogram does not include the declaration of the procedure or function, then you must issue a corresponding <code class="codeph">CREATE</code> <code class="codeph">TYPE</code> <code class="codeph">BODY</code> statement.</p>
<p><span class="bold">Restriction on <span class="italic">procedure_spec</span> or <span class="italic">function_spec</span></span></p>
<p>If you are creating a subtype, then the name of the procedure or function cannot be the same as the name of any attribute, whether inherited or not, declared in the supertype chain.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1"><span class="bold"><span class="italic">return_clause</span></span></p>
<p>The first form of the <span class="italic"><code class="codeph">return_clause</code></span> is valid only for a function. The syntax shown is an abbreviated form.</p>
<div class="infoboxnotealso" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__GUID-37D2F2D9-BE03-4022-9A18-9A522BBA58A6">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="collection_method.htm#GUID-7AF1A3C4-D04B-4F91-9D7B-C92C75E3A300" title="A collection method is a PL/SQL subprogram that either returns information about a collection or operates on a collection.">Collection Method Invocation</a>&#34;</span> for information about method invocation and methods</p>
</li>
<li>
<p><span class="q">&#34;<a href="create_procedure.htm#GUID-5F84DB47-B5BE-4292-848F-756BF365EC54">CREATE PROCEDURE Statement</a>&#34;</span> and <span class="q">&#34;<a href="create_function.htm#GUID-B71BC5BD-B87C-4054-AAA5-213E856651F2">CREATE FUNCTION Statement</a>&#34;</span> for the full syntax with all possible clauses</p>
</li>
</ul>
</div>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1"><span class="bold"><span class="italic">sqlj_object_type_sig</span></span></p>
<p>Use this form of the <span class="italic"><code class="codeph">return_clause</code></span> if you intend to create SQLJ object type functions or procedures.</p>
<ul style="list-style-type: disc;">
<li>
<p>If you are mapping a Java class to a SQLJ object type and you specify <code class="codeph">EXTERNAL</code> <code class="codeph">NAME</code>, then the value of the Java method returned must be compatible with the SQL returned value, and the Java method must be public. Also, the method signature (method name plus parameter types) must be unique in the type hierarchy.</p>
</li>
<li>
<p>If you specify <code class="codeph">EXTERNAL</code> <code class="codeph">VARIABLE</code> <code class="codeph">NAME</code>, then the type of the Java static field must be compatible with the return type.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1"><span class="bold"><span class="italic">call_spec</span>, EXTERNAL</span></p>
<p>See <span class="q">&#34;<a href="create_function.htm#GUID-B71BC5BD-B87C-4054-AAA5-213E856651F2__BABIBEBE">call_spec</a>&#34;</span> and <span class="q">&#34;<a href="create_function.htm#GUID-B71BC5BD-B87C-4054-AAA5-213E856651F2__CIHDFDFG">EXTERNAL</a>&#34;</span>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p><span class="bold"><span class="italic">restrict_references_pragma</span></span></p>
<p>Deprecated clause, described in <span class="q">&#34;<a href="restrictreferences_pragma.htm#GUID-D189A0B4-D0D3-4951-BFC2-7D996F1659FE" title="The RESTRICT_REFERENCES pragma asserts that a user-defined subprogram does not read or write database tables or package variables.">RESTRICT_REFERENCES Pragma</a>&#34;</span>.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__I2076738">
<p class="subhead1"><span class="italic">constructor_spec</span></p>
<p>Creates a user-defined constructor, which is a function that returns an initialized instance of an ADT. You can declare multiple constructors for a single ADT, if the parameters of each constructor differ in number, order, or data type.</p>
<ul style="list-style-type: disc;">
<li>
<p>User-defined constructor functions are always <code class="codeph">FINAL</code> and <code class="codeph">INSTANTIABLE</code>, so these keywords are optional.</p>
</li>
<li>
<p>The parameter-passing mode of user-defined constructors is always <code class="codeph">SELF</code> <code class="codeph">IN</code> <code class="codeph">OUT</code>. Therefore you need not specify this clause unless you want to do so for clarity.</p>
</li>
<li>
<p><code class="codeph">RETURN</code> <code class="codeph">SELF</code> <code class="codeph">AS</code> <code class="codeph">RESULT</code> specifies that the runtime type of the value returned by the constructor is runtime type of the <code class="codeph">SELF</code> argument.</p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__GUID-556BBB06-011D-4560-AA96-ED3D5D28A597">
<p class="notep1">See Also:</p>
<p><a class="olink ADOBJ006" target="_blank" href="../ADOBJ/adobjadv.htm#ADOBJ006"><span class="italic">Oracle Database Object-Relational Developer&#39;s Guide</span></a> for more information about and examples of user-defined constructors and <span class="q">&#34;<a href="create_type.htm#GUID-389D603D-FBD0-452A-8414-240BBBC57034__I2126568">Example 14-25</a>&#34;</span></p>
</div>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1"><span class="italic">map_order_function_spec</span></p>
<p>You can define either one <code class="codeph">MAP</code> method or one <code class="codeph">ORDER</code> method in a type specification, regardless of how many <code class="codeph">MEMBER</code> or <code class="codeph">STATIC</code> methods you define. If you declare either method, then you can compare object instances in SQL.</p>
<p>You cannot define either <code class="codeph">MAP</code> or <code class="codeph">ORDER</code> methods for subtypes. However, a subtype can override a <code class="codeph">MAP</code> method if the supertype defines a nonfinal <code class="codeph">MAP</code> method. A subtype cannot override an <code class="codeph">ORDER</code> method at all.</p>
<p>You can specify either <code class="codeph">MAP</code> or <code class="codeph">ORDER</code> when mapping a Java class to a SQL type. However, the <code class="codeph">MAP</code> or <code class="codeph">ORDER</code> methods must map to <code class="codeph">MEMBER</code> functions in the Java class.</p>
<p>If neither a <code class="codeph">MAP</code> nor an <code class="codeph">ORDER</code> method is specified, then only comparisons for equality or inequality can be performed. Therefore object instances cannot be ordered. Instances of the same type definition are equal only if each pair of their corresponding attributes is equal. No comparison method must be specified to determine the equality of two ADTs.</p>
<p>Use <code class="codeph">MAP</code> if you are performing extensive sorting or hash join operations on object instances. <code class="codeph">MAP</code> is applied once to map the objects to scalar values, and then the database uses the scalars during sorting and merging. A <code class="codeph">MAP</code> method is more efficient than an <code class="codeph">ORDER</code> method, which must invoke the method for each object comparison. You must use a <code class="codeph">MAP</code> method for hash joins. You cannot use an <code class="codeph">ORDER</code> method because the hash mechanism hashes on the object value.</p>
<div class="infoboxnotealso" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__GUID-9AB6DCAC-428B-4253-AF51-C8263FBCC17C">
<p class="notep1">See Also:</p>
<p><a class="olink ADOBJ00803" target="_blank" href="../ADOBJ/adobjdes.htm#ADOBJ00803"><span class="italic">Oracle Database Object-Relational Developer&#39;s Guide</span></a> for more information about object value comparisons</p>
</div>
</div>
<!-- class="section" -->
<div class="section">
<p><span class="bold">MAP MEMBER</span></p>
<p>Specifies a <code class="codeph">MAP</code> member function that returns the relative position of a given instance in the ordering of all instances of the object. A <code class="codeph">MAP</code> method is called implicitly and induces an ordering of object instances by mapping them to values of a predefined scalar type. PL/SQL uses the ordering to evaluate Boolean expressions and to perform comparisons.</p>
<p>If the argument to the <code class="codeph">MAP</code> method is null, then the <code class="codeph">MAP</code> method returns null and the method is not invoked.</p>
<p>An object specification can contain only one <code class="codeph">MAP</code> method, which must be a function. The result type must be a predefined SQL scalar type, and the <code class="codeph">MAP</code> method can have no arguments other than the implicit <code class="codeph">SELF</code> argument.</p>
<div class="infobox-note" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__GUID-24FA9FEE-0179-40C1-9041-50172A5C78C1">
<p class="notep1">Note:</p>
<p>If <span class="italic"><code class="codeph">type_name</code></span> is to be referenced in queries containing sorts (through an <code class="codeph">ORDER</code> <code class="codeph">BY</code>, <code class="codeph">GROUP</code> <code class="codeph">BY</code>, <code class="codeph">DISTINCT</code>, or <code class="codeph">UNION</code> clause) or containing joins, and you want those queries to be parallelized, then you must specify a <code class="codeph">MAP</code> member function.</p>
</div>
<p>A subtype cannot define a new <code class="codeph">MAP</code> method, but it can override an inherited <code class="codeph">MAP</code> method.</p>
</div>
<!-- class="section" -->
<div class="section">
<p><span class="bold">ORDER MEMBER</span></p>
<p>Specifies an <code class="codeph">ORDER</code> member function that takes an instance of an object as an explicit argument and the implicit <code class="codeph">SELF</code> argument and returns either a negative, zero, or positive integer. The negative, positive, or zero indicates that the implicit <code class="codeph">SELF</code> argument is less than, equal to, or greater than the explicit argument.</p>
<p>If either argument to the <code class="codeph">ORDER</code> method is null, then the <code class="codeph">ORDER</code> method returns null and the method is not invoked.</p>
<p>When instances of the same ADT definition are compared in an <code class="codeph">ORDER</code> <code class="codeph">BY</code> clause, the <code class="codeph">ORDER</code> method <span class="italic"><code class="codeph">map_order_function_spec</code></span> is invoked.</p>
<p>An object specification can contain only one <code class="codeph">ORDER</code> method, which must be a function having the return type <code class="codeph">NUMBER</code>.</p>
<p>A subtype can neither define nor override an <code class="codeph">ORDER</code> method.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1"><span class="italic">varray_type_def</span></p>
<p>Creates the type as an ordered set of elements, each of which has the same data type.</p>
<p><span class="bold">Restrictions on <span class="italic">varray_type_def</span></span></p>
<p>You can create a <code class="codeph">VARRAY</code> type of <code class="codeph">XMLType</code> or of a LOB type for procedural purposes, for example, in PL/SQL or in view queries. However, database storage of such a varray is not supported, so you cannot create an object table or an column of such a <code class="codeph">VARRAY</code> type.</p>
<div class="infoboxnotealso" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__GUID-993D0A55-BBE8-42CC-A00E-A80E2628EBBA">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="create_type.htm#GUID-389D603D-FBD0-452A-8414-240BBBC57034__I2126512">Example 14-22</a>&#34;</span></p>
</div>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1"><span class="italic">nested_table_type_def</span></p>
<p>Creates a named nested table of type <span class="italic"><code class="codeph">datatype</code></span>.</p>
<div class="infoboxnotealso" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__GUID-655A9E3D-9EE6-4B38-B71F-AAFF76E0CD23">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="create_type.htm#GUID-389D603D-FBD0-452A-8414-240BBBC57034__I2126557">Example 14-23</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="create_type.htm#GUID-389D603D-FBD0-452A-8414-240BBBC57034__I2126543">Example 14-24</a>&#34;</span></p>
</li>
</ul>
</div>
</div>
<!-- class="section" -->
<div class="section" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__I2095312">
<p class="subhead1">Examples</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__I2083561">
<p class="titleinexample">Example 14-18 ADT Examples</p>
<p>This example shows how the sample type <code class="codeph">customer_typ</code> was created for the sample Order Entry (<code class="codeph">oe</code>) schema. A hypothetical name is given to the table so that you can duplicate this example in your test database:</p>
<pre dir="ltr">CREATE TYPE customer_typ_demo AS OBJECT
    ( customer_id        NUMBER(6)
    , cust_first_name    VARCHAR2(20)
    , cust_last_name     VARCHAR2(20)
    , cust_address       CUST_ADDRESS_TYP
    , phone_numbers      PHONE_LIST_TYP
    , nls_language       VARCHAR2(3)
    , nls_territory      VARCHAR2(30)
    , credit_limit       NUMBER(9,2)
    , cust_email         VARCHAR2(30)
    , cust_orders        ORDER_LIST_TYP
    ) ;
/
</pre>
<p>In this example, the <code class="codeph">data_typ1</code> ADT is created with one member function <code class="codeph">prod</code>, which is implemented in the <code class="codeph">CREATE</code> <code class="codeph">TYPE</code> <code class="codeph">BODY</code> statement:</p>
<pre dir="ltr">CREATE TYPE data_typ1 AS OBJECT 
   ( year NUMBER, 
     MEMBER FUNCTION prod(invent NUMBER) RETURN NUMBER 
   ); 
/
 
CREATE TYPE BODY data_typ1 IS   
      MEMBER FUNCTION prod (invent NUMBER) RETURN NUMBER IS 
         BEGIN 
             RETURN (year + invent);
         END; 
      END; 
/
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__I2126475">
<p class="titleinexample">Example 14-19 Subtype Example</p>
<p>This statement shows how the subtype <code class="codeph">corporate_customer_typ</code> in the sample <code class="codeph">oe</code> schema was created. It is based on the <code class="codeph">customer_typ</code> supertype created in the preceding example and adds the <code class="codeph">account_mgr_id</code> attribute. A hypothetical name is given to the table so that you can duplicate this example in your test database:</p>
<pre dir="ltr">CREATE TYPE corporate_customer_typ_demo UNDER customer_typ
    ( account_mgr_id     NUMBER(6)
    );
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__I2126486">
<p class="titleinexample">Example 14-20 SQLJ Object Type Example</p>
<p>These examples create a SQLJ object type and subtype. The <code class="codeph">address_t</code> type maps to the Java class <code class="codeph">Examples.Address</code>. The subtype <code class="codeph">long_address_t</code> maps to the Java class <code class="codeph">Examples.LongAddress</code>. The examples specify SQLData as the mechanism used to create the Java instance of these types. Each of the functions in these type specifications has a corresponding implementation in the Java class.</p>
<div class="infoboxnotealso" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__GUID-72062CAB-B917-4D37-9CC4-068F91D11CCF">
<p class="notep1">See Also:</p>
<p><a class="olink ADOBJ008" target="_blank" href="../ADOBJ/adobjdes.htm#ADOBJ008"><span class="italic">Oracle Database Object-Relational Developer&#39;s Guide</span></a> for the Java implementation of the functions in these type specifications</p>
</div>
<pre dir="ltr">CREATE TYPE address_t AS OBJECT
  EXTERNAL NAME &#39;Examples.Address&#39; LANGUAGE JAVA 
  USING SQLData(
    street_attr varchar(250) EXTERNAL NAME &#39;street&#39;,
    city_attr varchar(50) EXTERNAL NAME &#39;city&#39;,
    state varchar(50) EXTERNAL NAME &#39;state&#39;,
    zip_code_attr number EXTERNAL NAME &#39;zipCode&#39;,
    STATIC FUNCTION recom_width RETURN NUMBER
      EXTERNAL VARIABLE NAME &#39;recommendedWidth&#39;,
    STATIC FUNCTION create_address RETURN address_t
      EXTERNAL NAME &#39;create() return Examples.Address&#39;,
    STATIC FUNCTION construct RETURN address_t
      EXTERNAL NAME &#39;create() return Examples.Address&#39;,
    STATIC FUNCTION create_address (street VARCHAR, city VARCHAR, 
        state VARCHAR, zip NUMBER) RETURN address_t
      EXTERNAL NAME &#39;create (java.lang.String, java.lang.String, java.lang.String, int) return Examples.Address&#39;,
    STATIC FUNCTION construct (street VARCHAR, city VARCHAR, 
        state VARCHAR, zip NUMBER) RETURN address_t
      EXTERNAL NAME 
        &#39;create (java.lang.String, java.lang.String, java.lang.String, int) return Examples.Address&#39;,
    MEMBER FUNCTION to_string RETURN VARCHAR
      EXTERNAL NAME &#39;tojava.lang.String() return java.lang.String&#39;,
    MEMBER FUNCTION strip RETURN SELF AS RESULT 
      EXTERNAL NAME &#39;removeLeadingBlanks () return Examples.Address&#39;
  ) NOT FINAL;
/

CREATE OR REPLACE TYPE long_address_t
UNDER address_t
EXTERNAL NAME &#39;Examples.LongAddress&#39; LANGUAGE JAVA 
USING SQLData(
    street2_attr VARCHAR(250) EXTERNAL NAME &#39;street2&#39;,
    country_attr VARCHAR (200) EXTERNAL NAME &#39;country&#39;,
    address_code_attr VARCHAR (50) EXTERNAL NAME &#39;addrCode&#39;,    
    STATIC FUNCTION create_address RETURN long_address_t 
      EXTERNAL NAME &#39;create() return Examples.LongAddress&#39;,
    STATIC FUNCTION  construct (street VARCHAR, city VARCHAR, 
        state VARCHAR, country VARCHAR, addrs_cd VARCHAR) 
      RETURN long_address_t 
      EXTERNAL NAME 
        &#39;create(java.lang.String, java.lang.String,
        java.lang.String, java.lang.String, java.lang.String) 
          return Examples.LongAddress&#39;,
    STATIC FUNCTION construct RETURN long_address_t
      EXTERNAL NAME &#39;Examples.LongAddress() 
        return Examples.LongAddress&#39;,
    STATIC FUNCTION create_longaddress (
      street VARCHAR, city VARCHAR, state VARCHAR, country VARCHAR, 
      addrs_cd VARCHAR) return long_address_t
      EXTERNAL NAME 
        &#39;Examples.LongAddress (java.lang.String, java.lang.String,
         java.lang.String, java.lang.String, java.lang.String)
           return Examples.LongAddress&#39;,
    MEMBER FUNCTION get_country RETURN VARCHAR
      EXTERNAL NAME &#39;country_with_code () return java.lang.String&#39;
  );
/
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__I2088454">
<p class="titleinexample">Example 14-21 Type Hierarchy Example</p>
<p>These statements create a type hierarchy. Type <code class="codeph">employee_t</code> inherits the <code class="codeph">name</code> and <code class="codeph">ssn</code> attributes from type <code class="codeph">person_t</code> and in addition has <code class="codeph">department_id</code> and <code class="codeph">salary</code> attributes. Type <code class="codeph">part_time_emp_t</code> inherits all of the attributes from <code class="codeph">employee_t</code> and, through <code class="codeph">employee_t</code>, those of <code class="codeph">person_t</code> and in addition has a <code class="codeph">num_hrs</code> attribute. Type <code class="codeph">part_time_emp_t</code> is final by default, so no further subtypes can be created under it.</p>
<pre dir="ltr">CREATE TYPE person_t AS OBJECT (name VARCHAR2(100), ssn NUMBER) 
   NOT FINAL;
/

CREATE TYPE employee_t UNDER person_t 
   (department_id NUMBER, salary NUMBER) NOT FINAL;
/

CREATE TYPE part_time_emp_t UNDER employee_t (num_hrs NUMBER);
/
</pre>
<p>You can use type hierarchies to create substitutable tables and tables with substitutable columns.</p>
</div>
<!-- class="example" -->
<div class="example" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__I2126512">
<p class="titleinexample">Example 14-22 Varray Type Example</p>
<p>This statement shows how the <code class="codeph">phone_list_typ</code> <code class="codeph">VARRAY</code> type with five elements in the sample <code class="codeph">oe</code> schema was created. A hypothetical name is given to the table so that you can duplicate this example in your test database:</p>
<pre dir="ltr">CREATE TYPE phone_list_typ_demo AS VARRAY(5) OF VARCHAR2(25);
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__I2126557">
<p class="titleinexample">Example 14-23 Nested Table Type Example</p>
<p>This example from the sample schema <code class="codeph">pm</code> creates the table type <code class="codeph">textdoc_tab</code> of type <code class="codeph">textdoc_typ</code>:</p>
<pre dir="ltr">CREATE TYPE textdoc_typ AS OBJECT
    ( document_typ      VARCHAR2(32)
    , formatted_doc     BLOB
    ) ;

CREATE TYPE textdoc_tab AS TABLE OF textdoc_typ;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__I2126543">
<p class="titleinexample">Example 14-24 Nested Table Type Containing a Varray</p>
<p>This example of multilevel collections is a variation of the sample table <code class="codeph">oe.customers</code>. In this example, the <code class="codeph">cust_address</code> object column becomes a nested table column with the <code class="codeph">phone_list_typ</code> varray column embedded in it. The phone_list_typ type was created in <span class="q">&#34;<a href="create_type.htm#GUID-389D603D-FBD0-452A-8414-240BBBC57034__I2126512">Example 14-22</a>&#34;</span>.</p>
<pre dir="ltr">CREATE TYPE cust_address_typ2 AS OBJECT
       ( street_address     VARCHAR2(40)
       , postal_code        VARCHAR2(10)
       , city               VARCHAR2(30)
       , state_province     VARCHAR2(10)
       , country_id         CHAR(2)
       , phone              phone_list_typ_demo
       );

CREATE TYPE cust_nt_address_typ
   AS TABLE OF cust_address_typ2;
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__I2126568">
<p class="titleinexample">Example 14-25 Constructor Example</p>
<p>This example invokes the system-defined constructor to construct the <code class="codeph">demo_typ</code> object and insert it into the <code class="codeph">demo_tab</code> table:</p>
<pre dir="ltr">CREATE TYPE demo_typ1 AS OBJECT (a1 NUMBER, a2 NUMBER);

CREATE TABLE demo_tab1 (b1 NUMBER, b2 demo_typ1);

INSERT INTO demo_tab1 VALUES (1, demo_typ1(2,3));
</pre>
<div class="infoboxnotealso" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__GUID-DF2CFBF2-4B45-4063-945B-725ABB469D76">
<p class="notep1">See Also:</p>
<p><a class="olink ADOBJ006" target="_blank" href="../ADOBJ/adobjadv.htm#ADOBJ006"><span class="italic">Oracle Database Object-Relational Developer&#39;s Guide</span></a> for more information about constructors</p>
</div>
</div>
<!-- class="example" -->
<div class="example" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__I2126584">
<p class="titleinexample">Example 14-26 Creating a Member Method: Example</p>
<p>This example invokes method constructor <code class="codeph">col.get_square</code>. First the type is created:</p>
<pre dir="ltr">CREATE TYPE demo_typ2 AS OBJECT (a1 NUMBER, 
   MEMBER FUNCTION get_square RETURN NUMBER); 
</pre>
<p>Next a table is created with an ADT column and some data is inserted into the table:</p>
<pre dir="ltr">CREATE TABLE demo_tab2(col demo_typ2); 

INSERT INTO demo_tab2 VALUES (demo_typ2(2));
</pre>
<p>The type body is created to define the member function, and the member method is invoked:</p>
<pre dir="ltr">CREATE TYPE BODY demo_typ2 IS
   MEMBER FUNCTION get_square
   RETURN NUMBER
   IS x NUMBER;
   BEGIN
      SELECT c.col.a1*c.col.a1 INTO x
      FROM demo_tab2 c;
      RETURN (x);
   END;
END;
/
 
SELECT t.col.get_square() FROM demo_tab2 t;

T.COL.GET_SQUARE()
------------------
                 4
</pre>
<p>Unlike function invocations, method invocations require parentheses, even when the methods do not have additional arguments.</p>
</div>
<!-- class="example" -->
<div class="example" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__I2126601">
<p class="titleinexample">Example 14-27 Creating a Static Method: Example</p>
<p>This example changes the definition of the <code class="codeph">employee_t</code> type to associate it with the <code class="codeph">construct_emp</code> function. The example first creates an ADT <code class="codeph">department_t</code> and then an ADT <code class="codeph">employee_t</code> containing an attribute of type <code class="codeph">department_t</code>:</p>
<pre dir="ltr">CREATE OR REPLACE TYPE department_t AS OBJECT (
   deptno number(10),
   dname CHAR(30));

CREATE OR REPLACE TYPE employee_t AS OBJECT(
   empid RAW(16),
   ename CHAR(31),
   dept REF department_t,
      STATIC function construct_emp
      (name VARCHAR2, dept REF department_t)
      RETURN employee_t
);
</pre>
<p>This statement requires this type body statement.</p>
<pre dir="ltr">CREATE OR REPLACE TYPE BODY employee_t IS
   STATIC FUNCTION construct_emp
   (name varchar2, dept REF department_t)
   RETURN employee_t IS
      BEGIN
         return employee_t(SYS_GUID(),name,dept);
      END;
END;
</pre>
<p>Next create an object table and insert into the table:</p>
<pre dir="ltr">CREATE TABLE emptab OF employee_t;
INSERT INTO emptab
   VALUES (employee_t.construct_emp(&#39;John Smith&#39;, NULL));
</pre></div>
<!-- class="example" -->
<div class="section" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__BABIGECI">
<p class="subhead1">Related Topics</p>
<p>In this chapter:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="alter_type.htm#GUID-A8B449E7-E3A8-48F4-A4C6-5BB87B1841CD">ALTER TYPE Statement</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="create_type_body.htm#GUID-B468D6FB-75ED-436B-80E4-8460E4551AE0">CREATE TYPE BODY Statement</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="drop_type.htm#GUID-EDB83D12-26B5-42D1-9DB6-BD8AAB6490EC" title="The DROP TYPE statement drops the specification and body of an ADT, VARRAY type, or nested table type.">DROP TYPE Statement</a>&#34;</span></p>
</li>
</ul>
<p>In other chapters:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="overview.htm#GUID-4E7295F2-854D-454F-9001-CA950FCAAC55" title="An Abstract Data Type (ADT) consists of a data structure and subprograms that manipulate the data.">Abstract Data Types</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="fundamentals.htm#GUID-9AA504C5-8D85-41D6-BC3D-0953202BD9A7" title="Conditional compilation directives are subject to these semantic restrictions.">Conditional Compilation Directive Restrictions</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="collection_variable.htm#GUID-89A1863C-65A1-40CF-9392-86E9FDC21BE9" title="A collection variable is a composite variable whose internal components, called elements, have the same data type.">Collection Variable Declaration</a>&#34;</span></p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-389D603D-FBD0-452A-8414-240BBBC57034__GUID-ACE1A94E-89DA-45F5-82D3-0FA80D12A3DF">
<p class="notep1">See Also:</p>
<p><a class="olink ADOBJ001" target="_blank" href="../ADOBJ/adobjint.htm#ADOBJ001"><span class="italic">Oracle Database Object-Relational Developer&#39;s Guide</span></a> for more information about objects, incomplete types, varrays, and nested tables</p>
</div>
</div>
<!-- class="section" --></div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment869">
<tr>
<td class="cellalignment912">
<table class="cellalignment874">
<tr>
<td class="cellalignment873"><a href="create_trigger.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment873"><a href="create_type_body.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment914">
<table class="cellalignment872">
<tr>
<td class="cellalignment873"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment873"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment873"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment873"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment873"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment873"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>