<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-78353"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/PL%2FSQL%20Subprograms"></a><title>PL/SQL Subprograms</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="keywords" content="subprogram, procedure, function, nested subprogram, declaration and definition of, package subprogram, standalone subprogram, stored subprogram, ACCESSIBLE BY clause, in subprogram, subprogram invocation, syntax of, invoking, structure of, RETURN clause of function, options for, RETURN statement, forward declaration for, forward declaration of subprogram, subprogram parameter, parameter, See, constrained subtype, subprogram parameter and, subtype, constrained, implicit data type conversion, of subprogram parameter, mode, parameter mode, IN parameter mode, OUT parameter mode, IN OUT parameter mode, aliasing (problem), NOCOPY hint, subprogram parameter aliasing and, default value, initial value, optional, required, NULL value, for subprogram parameter, positional parameter notation, named parameter notation, mixed parameter notation, resolution of, overloaded subprogram, data type family, overloaded subprogram and, causing overload error, recursive subprogram, STORAGE_ERROR exception, recursive invocation and, cursor FOR LOOP statement, recursive invocation in, OPEN statement, OPEN FOR statement, side effects of subprogram, PL/SQL function result cache, function result cache, result cache, cache, function result, RESULT_CACHE clause, result-cached, Oracle RAC environment, result caches in, in SQL statement, SQL statement, invoking PL/SQL function in, purity rules for subprograms, mutating-table error, for function, DDL statement, subprogram side effects and, AUTHID property, invoker&rsquo;s rights unit, IR unit, definer&rsquo;s rights unit, DR unit, anonymous block, AUTHID property and, view, trigger, name resolution, name resolution and, privilege checking and AUTHID property, privilege checking and, call stack, AUTHID property and, call stack and, dynamic SQL, dynamic SQL and, static SQL, static SQL and, INHERIT PRIVILEGES privilege, INHERIT ANY PRIVILEGES privilege, granting roles to PL/SQL units, package, granting roles to, template objects for, template object, C procedure, invoking, Java class method invocation, external subprogram, call specification"/>
<meta name="dcterms.created" content="2017-05-09T17:03:42Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database PL/SQL Language Reference"/>
<meta name="dcterms.identifier" content="E50727-06"/>
<meta name="dcterms.isVersionOf" content="LNPLS"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="dynamic.htm" title="Previous" type="text/html"/>
<link rel="Next" href="triggers.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E50727-06.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-13BEBBEC-02D4-48E8-A059-DFEAC4751A3B"></a> <span id="PAGE" style="display:none;">15/100</span> <!-- End Header -->
<h1 id="LNPLS-GUID-13BEBBEC-02D4-48E8-A059-DFEAC4751A3B" class="sect1"><span class="enumeration_chapter">8</span> PL/SQL Subprograms</h1>
<div>
<p>A PL/SQL <span class="bold">subprogram</span> is a named PL/SQL block that can be invoked repeatedly. If the subprogram has parameters, their values can differ for each invocation.</p>
<p>A subprogram is either a procedure or a function. Typically, you use a procedure to perform an action and a function to compute and return a value.</p>
<div class="section">
<p class="subhead1">Topics</p>
</div>
<!-- class="section" -->
<ul style="list-style-type: disc;">
<li>
<p><a href="subprograms.htm#GUID-56B4253C-6113-4C97-A0D2-1488B6526076">Reasons to Use Subprograms</a></p>
</li>
<li>
<p><a href="subprograms.htm#GUID-E03F512B-1A30-43B4-8DCA-64DA68AE7CE4">Nested, Package, and Standalone Subprograms</a></p>
</li>
<li>
<p><a href="subprograms.htm#GUID-C04B6BF9-1B19-42F9-82D8-CA137E97A024">Subprogram Invocations</a></p>
</li>
<li>
<p><a href="subprograms.htm#GUID-855AA11F-32CB-4CAD-9255-BE92A6821487">Subprogram Parts</a></p>
</li>
<li>
<p><a href="subprograms.htm#GUID-117C2D94-EB7C-4A9E-A080-99F4829D69B0">Forward Declaration</a></p>
</li>
<li>
<p><a href="subprograms.htm#GUID-C0397690-70F4-480D-ADC9-02D277DAA1BB">Subprogram Parameters</a></p>
</li>
<li>
<p><a href="subprograms.htm#GUID-A7D51201-1711-4F33-827F-70042700801F">Subprogram Invocation Resolution</a></p>
</li>
<li>
<p><a href="subprograms.htm#GUID-47D5A50E-7AAF-4C80-A06A-37593EA2526A">Overloaded Subprograms</a></p>
</li>
<li>
<p><a href="subprograms.htm#GUID-E093EF16-0477-44B4-B3E2-37D7CEF4F25C">Recursive Subprograms</a></p>
</li>
<li>
<p><a href="subprograms.htm#GUID-6C6A828F-8FA0-4278-97D2-6D5649A66A9A">Subprogram Side Effects</a></p>
</li>
<li>
<p><a href="subprograms.htm#GUID-250BDBBB-0CD6-4D56-9DDF-6FCEDC110D00">PL/SQL Function Result Cache</a></p>
</li>
<li>
<p><a href="subprograms.htm#GUID-4FC97312-AC30-4A6E-8337-996198191E29">PL/SQL Functions that SQL Statements Can Invoke</a></p>
</li>
<li>
<p><a href="subprograms.htm#GUID-41D23DE7-3C07-41CF-962B-F92B696594B5">Invoker&#39;s Rights and Definer&#39;s Rights (AUTHID Property)</a></p>
</li>
<li>
<p><a href="subprograms.htm#GUID-96B5DE2B-D809-4296-9CDE-B317B81895F8">External Subprograms</a></p>
</li>
</ul>
</div>
<a id="LNPLS99900"></a>
<div class="props_rev_3"><a id="GUID-56B4253C-6113-4C97-A0D2-1488B6526076"></a>
<h2 id="LNPLS-GUID-56B4253C-6113-4C97-A0D2-1488B6526076" class="sect2">Reasons to Use Subprograms</h2>
<div>
<p>Subprograms support the development and maintenance of reliable, reusable code with the following features:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold">Modularity</span></p>
<p>Subprograms let you break a program into manageable, well-defined modules.</p>
</li>
<li>
<p><span class="bold">Easier Application Design</span></p>
<p>When designing an application, you can defer the implementation details of the subprograms until you have tested the main program, and then refine them one step at a time. (To define a subprogram without implementation details, use the <code class="codeph">NULL</code> statement, as in <a href="controlstatements.htm#GUID-FB72FFC2-4B55-45C9-BA38-57511913242F__BABDHJDA">Example 4-35</a>.)</p>
</li>
<li>
<p><span class="bold">Maintainability</span></p>
<p>You can change the implementation details of a subprogram without changing its invokers.</p>
</li>
<li>
<p><span class="bold">Packageability</span></p>
<p>Subprograms can be grouped into packages, whose advantages are explained in <span class="q">&#34;<a href="packages.htm#GUID-F2763E50-C2C6-4A4B-AEFA-103EB8529FD5">Reasons to Use Packages</a>&#34;</span>.</p>
</li>
<li>
<p><span class="bold">Reusability</span></p>
<p>Any number of applications, in many different environments, can use the same package subprogram or standalone subprogram.</p>
</li>
<li>
<p><span class="bold">Better Performance</span></p>
<p>Each subprogram is compiled and stored in executable form, which can be invoked repeatedly. Because stored subprograms run in the database server, a single invocation over the network can start a large job. This division of work reduces network traffic and improves response times. Stored subprograms are cached and shared among users, which lowers memory requirements and invocation overhead.</p>
</li>
</ul>
<p>Subprograms are an important component of other maintainability features, such as packages (explained in <a href="packages.htm#GUID-C285EC5A-BE50-4192-A88E-48C0778B34E0" title="This chapter explains how to bundle related PL/SQL code and data into a package, whose contents are available to many applications.">PL/SQL Packages</a>) and Abstract Data Types (explained in <span class="q">&#34;<a href="overview.htm#GUID-4E7295F2-854D-454F-9001-CA950FCAAC55" title="An Abstract Data Type (ADT) consists of a data structure and subprograms that manipulate the data.">Abstract Data Types</a>&#34;</span>).</p>
</div>
</div>
<a id="LNPLS99899"></a>
<div class="props_rev_3"><a id="GUID-E03F512B-1A30-43B4-8DCA-64DA68AE7CE4"></a>
<h2 id="LNPLS-GUID-E03F512B-1A30-43B4-8DCA-64DA68AE7CE4" class="sect2">Nested, Package, and Standalone Subprograms</h2>
<div>
<p>You can create a subprogram either inside a PL/SQL block (which can be another subprogram), inside a package, or at schema level.</p>
<p>A subprogram created inside a PL/SQL block is a <span class="bold">nested subprogram</span>. You can either declare and define it at the same time, or you can declare it first and then define it later in the same block (see <span class="q">&#34;<a href="subprograms.htm#GUID-117C2D94-EB7C-4A9E-A080-99F4829D69B0">Forward Declaration</a>&#34;</span>). A nested subprogram is stored in the database only if it is nested in a standalone or package subprogram.</p>
<p>A subprogram created inside a package is a <span class="bold">package subprogram</span>. You declare it in the package specification and define it in the package body. It is stored in the database until you drop the package. (Packages are described in <a href="packages.htm#GUID-C285EC5A-BE50-4192-A88E-48C0778B34E0" title="This chapter explains how to bundle related PL/SQL code and data into a package, whose contents are available to many applications.">PL/SQL Packages</a>.)</p>
<p>A subprogram created at schema level is a <span class="bold">standalone subprogram</span>. You create it with the <code class="codeph">CREATE</code> <code class="codeph">FUNCTION</code> or <code class="codeph">CREATE</code> <code class="codeph">PROCEDURE</code> statement. It is stored in the database until you drop it with the <code class="codeph">DROP</code> <code class="codeph">FUNCTION</code> or <code class="codeph">DROP</code> <code class="codeph">PROCEDURE</code> statement. (These statements are described in <a href="sqlstatements.htm#GUID-C918310F-F1BB-41D7-9466-B558B70DDFFE" title="This chapter explains how to use the SQL statements that create, change, and drop stored PL/SQL units.">SQL Statements for Stored PL/SQL Units</a>.)</p>
<p>A <span class="bold">stored subprogram</span> is either a package subprogram or a standalone subprogram. A stored subprogram is affected by the <code class="codeph">AUTHID</code> and <code class="codeph">ACCESSIBLE</code> <code class="codeph">BY</code> clauses, which can appear in the <code class="codeph">CREATE</code> <code class="codeph">FUNCTION</code>, <code class="codeph">CREATE</code> <code class="codeph">PROCEDURE</code>, and <code class="codeph">CREATE</code> <code class="codeph">PACKAGE</code> statements. The <code class="codeph">AUTHID</code> clause affects the name resolution and privilege checking of SQL statements that the subprogram issues at run time (for more information, see <span class="q">&#34;<a href="subprograms.htm#GUID-41D23DE7-3C07-41CF-962B-F92B696594B5">Invoker&#39;s Rights and Definer&#39;s Rights (AUTHID Property)</a>&#34;</span>). The <code class="codeph">ACCESSIBLE</code> <code class="codeph">BY</code> clause specifies a white list of PL/SQL units that can access the subprogram.</p>
</div>
</div>
<a id="LNPLS99901"></a>
<div class="props_rev_3"><a id="GUID-C04B6BF9-1B19-42F9-82D8-CA137E97A024"></a>
<h2 id="LNPLS-GUID-C04B6BF9-1B19-42F9-82D8-CA137E97A024" class="sect2">Subprogram Invocations</h2>
<div>
<p>A subprogram invocation has this form:</p>
<pre dir="ltr"><span class="italic">subprogram_name</span> [ ( [ <span class="italic">parameter</span> [, <span class="italic">parameter</span>]... ] ) ]
</pre>
<p>If the subprogram has no parameters, or specifies a default value for every parameter, you can either omit the parameter list or specify an empty parameter list.</p>
<p>A procedure invocation is a PL/SQL statement. For example:</p>
<pre dir="ltr">raise_salary(employee_id, amount);
</pre>
<p>A function invocation is an expression. For example:</p>
<pre dir="ltr">new_salary := get_salary(employee_id);
IF salary_ok(new_salary, new_title) THEN ...
</pre>
<div class="infoboxnotealso" id="GUID-C04B6BF9-1B19-42F9-82D8-CA137E97A024__GUID-CEE1BE27-78FE-4739-A497-3FC4A7DB3F55">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="subprograms.htm#GUID-C0397690-70F4-480D-ADC9-02D277DAA1BB">Subprogram Parameters</a>&#34;</span> for more information about specifying parameters in subprogram invocations</p>
</div>
</div>
</div>
<a id="LNPLS530"></a><a id="LNPLS654"></a><a id="LNPLS653"></a>
<div class="props_rev_3"><a id="GUID-855AA11F-32CB-4CAD-9255-BE92A6821487"></a>
<h2 id="LNPLS-GUID-855AA11F-32CB-4CAD-9255-BE92A6821487" class="sect2">Subprogram Parts</h2>
<div>
<p>A subprogram begins with a <span class="bold">subprogram heading</span>, which specifies its name and (optionally) its parameter list.</p>
<p>Like an anonymous block, a subprogram has these parts:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold">Declarative part (optional)</span></p>
<p>This part declares and defines local types, cursors, constants, variables, exceptions, and nested subprograms. These items cease to exist when the subprogram completes execution.</p>
<p>This part can also specify pragmas.</p>
<div class="infobox-note" id="GUID-855AA11F-32CB-4CAD-9255-BE92A6821487__GUID-42259B7D-DD24-4B59-BB78-752DB3C1A774">
<p class="notep1">Note:</p>
<p>The declarative part of a subprogram does not begin with the keyword <code class="codeph">DECLARE</code>, as the declarative part of an anonymous block does.</p>
</div>
</li>
<li>
<p><span class="bold">Executable part (required)</span></p>
<p>This part contains one or more statements that assign values, control execution, and manipulate data. (Early in the application design process, this part might contain only a <code class="codeph">NULL</code> statement, as in <a href="controlstatements.htm#GUID-FB72FFC2-4B55-45C9-BA38-57511913242F__BABDHJDA">Example 4-35</a>.)</p>
</li>
<li>
<p><span class="bold">Exception-handling part (optional)</span></p>
<p>This part contains code that handles runtime errors.</p>
</li>
</ul>
<div class="section">
<p class="subhead2">Topics</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="subprograms.htm#GUID-5E23F601-5194-4F40-823B-C1BD12B9248C">Additional Parts for Functions</a></p>
</li>
<li>
<p><a href="subprograms.htm#GUID-96E5D372-E653-4C0F-858F-8309A91CE1FF">RETURN Statement</a></p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-855AA11F-32CB-4CAD-9255-BE92A6821487__GUID-C7788C2E-CA9D-4659-90DD-7347DBCFB760">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="fundamentals.htm#GUID-D6EFD7E8-39DF-4430-B625-B6D37E49F6F4">Pragmas</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="procedure.htm#GUID-9A48D7CE-3720-46A4-B5CA-C2250CA86AF2">Procedure Declaration and Definition</a>&#34;</span> for the syntax of procedure declarations and definitions</p>
</li>
<li>
<p><span class="q">&#34;<a href="subprograms.htm#GUID-C0397690-70F4-480D-ADC9-02D277DAA1BB">Subprogram Parameters</a>&#34;</span> for more information about subprogram parameters</p>
</li>
</ul>
</div>
</div>
<!-- class="section" -->
<div class="example" id="GUID-855AA11F-32CB-4CAD-9255-BE92A6821487__CHDBIEEE">
<p class="titleinexample">Example 8-1 Declaring, Defining, and Invoking a Simple PL/SQL Procedure</p>
<p>In this example, an anonymous block simultaneously declares and defines a procedure and invokes it three times. The third invocation raises the exception that the exception-handling part of the procedure handles.</p>
<pre dir="ltr">DECLARE
  first_name employees.first_name%TYPE;
  last_name  employees.last_name%TYPE;
  email      employees.email%TYPE;
  employer   VARCHAR2(8) := &#39;AcmeCorp&#39;;
 
  <span class="bold">-- Declare and define procedure</span>
 
  PROCEDURE create_email (  <span class="bold">-- Subprogram heading begins</span>
    name1   VARCHAR2,
    name2   VARCHAR2,
    company VARCHAR2
  )                         <span class="bold">-- Subprogram heading ends</span>
  IS
                            <span class="bold">-- Declarative part begins</span>
    error_message VARCHAR2(30) := &#39;Email address is too long.&#39;;
  BEGIN                     <span class="bold">-- Executable part begins</span>
    email := name1 || &#39;.&#39; || name2 || &#39;@&#39; || company;
  EXCEPTION                      <span class="bold">-- Exception-handling part begins</span>
    WHEN VALUE_ERROR THEN
      DBMS_OUTPUT.PUT_LINE(error_message);
  END create_email;
 
BEGIN
  first_name := &#39;John&#39;;
  last_name  := &#39;Doe&#39;;
 
  create_email(first_name, last_name, employer);  <span class="bold">-- invocation</span>
  DBMS_OUTPUT.PUT_LINE (&#39;With first name first, email is: &#39; || email);
 
  create_email(last_name, first_name, employer);  <span class="bold">-- invocation</span>
  DBMS_OUTPUT.PUT_LINE (&#39;With last name first, email is: &#39; || email);
 
  first_name := &#39;Elizabeth&#39;;
  last_name  := &#39;MacDonald&#39;;
  create_email(first_name, last_name, employer);  <span class="bold">-- invocation</span>
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">With first name first, email is: John.Doe@AcmeCorp
With last name first, email is: Doe.John@AcmeCorp
Email address is too long.
</pre></div>
<!-- class="example" --></div>
<a id="LNPLS538"></a><a id="LNPLS99898"></a>
<div class="props_rev_3"><a id="GUID-5E23F601-5194-4F40-823B-C1BD12B9248C"></a>
<h3 id="LNPLS-GUID-5E23F601-5194-4F40-823B-C1BD12B9248C" class="sect3">Additional Parts for Functions</h3>
<div>
<p>A function has the same structure as a procedure, except that:</p>
<ul style="list-style-type: disc;">
<li>
<p>A function heading must include a <span class="bold"><code class="codeph">RETURN</code></span> <span class="bold">clause</span>, which specifies the data type of the value that the function returns. (A procedure heading cannot have a <code class="codeph">RETURN</code> clause.)</p>
</li>
<li>
<p>In the executable part of a function, every execution path must lead to a <span class="bold"><code class="codeph">RETURN</code></span> <span class="bold">statement</span>. Otherwise, the PL/SQL compiler issues a compile-time warning. (In a procedure, the <code class="codeph">RETURN</code> statement is optional and not recommended. For details, see <span class="q">&#34;<a href="subprograms.htm#GUID-96E5D372-E653-4C0F-858F-8309A91CE1FF">RETURN Statement</a>&#34;</span>.)</p>
</li>
<li>
<p>A function declaration can include these options:</p>
</li>
</ul>
<div class="tblformal" id="GUID-5E23F601-5194-4F40-823B-C1BD12B9248C__GUID-A1101A2D-DD12-4E54-B5F5-72F65F1AAA7A">
<table class="cellalignment876" summary="This table lists the additional options that are only available in functions.">
<thead>
<tr class="cellalignment870">
<th class="cellalignment877" id="d56434e822">Option</th>
<th class="cellalignment878" id="d56434e825">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment870">
<td class="cellalignment879" id="d56434e830" headers="d56434e822">
<p><code class="codeph">DETERMINISTIC</code> option</p>
</td>
<td class="cellalignment880" headers="d56434e830 d56434e825">
<p>Helps the optimizer avoid redundant function invocations.</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment879" id="d56434e839" headers="d56434e822">
<p><code class="codeph">PARALLEL_ENABLE</code> option</p>
</td>
<td class="cellalignment880" headers="d56434e839 d56434e825">
<p>Enables the function for parallel execution, making it safe for use in slave sessions of parallel DML evaluations.</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment879" id="d56434e848" headers="d56434e822">
<p><code class="codeph">PIPELINED</code> option</p>
</td>
<td class="cellalignment880" headers="d56434e848 d56434e825">
<p>Makes a table function pipelined, for use as a row source.</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment879" id="d56434e857" headers="d56434e822">
<p><code class="codeph">RESULT_CACHE</code> option</p>
</td>
<td class="cellalignment880" headers="d56434e857 d56434e825">
<p>Stores function results in the PL/SQL function result cache.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<div class="infoboxnotealso" id="GUID-5E23F601-5194-4F40-823B-C1BD12B9248C__GUID-1C232AE8-9229-44AE-BFE4-F2E9DAA4B46D">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="function.htm#GUID-4E19FB09-46B5-4CE5-8A5B-CD815C29DA1C">Function Declaration and Definition</a>&#34;</span> for the syntax of function declarations and definitions, including descriptions of the items in the preceding table</p>
</li>
<li>
<p><span class="q">&#34;<a href="subprograms.htm#GUID-250BDBBB-0CD6-4D56-9DDF-6FCEDC110D00">PL/SQL Function Result Cache</a>&#34;</span> for more information about the <code class="codeph">RESULT_CACHE</code> option</p>
</li>
</ul>
</div>
<div class="example" id="GUID-5E23F601-5194-4F40-823B-C1BD12B9248C__CIHBEGEG">
<p class="titleinexample">Example 8-2 Declaring, Defining, and Invoking a Simple PL/SQL Function</p>
<p>In this example, an anonymous block simultaneously declares and defines a function and invokes it.</p>
<pre dir="ltr">DECLARE
  <span class="bold">-- Declare and define function</span>

  FUNCTION square (original NUMBER)   <span class="bold">-- parameter list</span>
    RETURN NUMBER                     <span class="bold">-- RETURN clause</span>
  AS
                                      <span class="bold">-- Declarative part begins</span>
    original_squared NUMBER;
  BEGIN                               <span class="bold">-- Executable part begins</span>
    original_squared := original * original;
    RETURN original_squared;          <span class="bold">-- RETURN statement</span>
  END;
BEGIN
  DBMS_OUTPUT.PUT_LINE(square(100));  <span class="bold">-- invocation</span>
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">10000
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS539"></a><a id="LNPLS99897"></a>
<div class="props_rev_3"><a id="GUID-96E5D372-E653-4C0F-858F-8309A91CE1FF"></a>
<h3 id="LNPLS-GUID-96E5D372-E653-4C0F-858F-8309A91CE1FF" class="sect3">RETURN Statement</h3>
<div>
<p>The <code class="codeph">RETURN</code> statement immediately ends the execution of the subprogram or anonymous block that contains it. A subprogram or anonymous block can contain multiple <code class="codeph">RETURN</code> statements.</p>
<div class="section">
<p class="subhead3">Topics</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="subprograms.htm#GUID-919FB82F-4D11-4941-96F1-85A5354072E7">RETURN Statement in Function</a></p>
</li>
<li>
<p><a href="subprograms.htm#GUID-B25162E7-4E32-4E4C-A15C-890E03A3A71E">RETURN Statement in Procedure</a></p>
</li>
<li>
<p><a href="subprograms.htm#GUID-4102EAC5-1B56-4DAB-9EDA-84398FD1F5E6">RETURN Statement in Anonymous Block</a></p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-96E5D372-E653-4C0F-858F-8309A91CE1FF__GUID-2A2805E2-ED28-44B1-BB3B-94B4AB0943BE">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="return_statement.htm#GUID-2DCDD1F2-041A-479C-A2F8-B3B68F50FE5D" title="The RETURN statement immediately ends the execution of the subprogram or anonymous block that contains it.">RETURN Statement</a>&#34;</span> for the syntax of the <code class="codeph">RETURN</code> statement</p>
</div>
</div>
<!-- class="section" --></div>
<a id="LNPLS540"></a><a id="LNPLS550"></a><a id="LNPLS552"></a><a id="LNPLS99895"></a>
<div class="props_rev_3"><a id="GUID-919FB82F-4D11-4941-96F1-85A5354072E7"></a>
<h4 id="LNPLS-GUID-919FB82F-4D11-4941-96F1-85A5354072E7" class="sect4">RETURN Statement in Function</h4>
<div>
<p>In a function, every execution path must lead to a <code class="codeph">RETURN</code> statement and every <code class="codeph">RETURN</code> statement must specify an expression. The <code class="codeph">RETURN</code> statement assigns the value of the expression to the function identifier and returns control to the invoker, where execution resumes immediately after the invocation.</p>
<div class="infobox-note" id="GUID-919FB82F-4D11-4941-96F1-85A5354072E7__GUID-D56F4FC7-513C-4FB0-A10E-7D2C59135BDA">
<p class="notep1">Note:</p>
<p>In a pipelined table function, a <code class="codeph">RETURN</code> statement need not specify an expression. For information about the parts of a pipelined table function, see <span class="q">&#34;<a href="tuning.htm#GUID-58D850B2-A416-47EA-8803-8936E2D6748A">Creating Pipelined Table Functions</a>&#34;</span>.</p>
</div>
<p>In <a href="subprograms.htm#GUID-919FB82F-4D11-4941-96F1-85A5354072E7__CIHEHEHB">Example 8-3</a>, the anonymous block invokes the same function twice. The first time, the <code class="codeph">RETURN</code> statement returns control to the inside of the invoking statement. The second time, the <code class="codeph">RETURN</code> statement returns control to the statement immediately after the invoking statement.</p>
<p>In <a href="subprograms.htm#GUID-919FB82F-4D11-4941-96F1-85A5354072E7__CIHFDEBC">Example 8-4</a>, the function has multiple <code class="codeph">RETURN</code> statements, but if the parameter is not 0 or 1, then no execution path leads to a <code class="codeph">RETURN</code> statement. The function compiles with warning PLW-05005: subprogram F returns without value at line 11.</p>
<p><a href="subprograms.htm#GUID-919FB82F-4D11-4941-96F1-85A5354072E7__CIHDHIDD">Example 8-5</a> is like <a href="subprograms.htm#GUID-919FB82F-4D11-4941-96F1-85A5354072E7__CIHFDEBC">Example 8-4</a>, except for the addition of the <code class="codeph">ELSE</code> clause. Every execution path leads to a <code class="codeph">RETURN</code> statement, and the function compiles without warning PLW-05005.</p>
<div class="example" id="GUID-919FB82F-4D11-4941-96F1-85A5354072E7__CIHEHEHB">
<p class="titleinexample">Example 8-3 Execution Resumes After RETURN Statement in Function</p>
<pre dir="ltr">DECLARE
  x INTEGER;
 
  FUNCTION f (n INTEGER)
  RETURN INTEGER
  IS
  BEGIN
    <span class="bold">RETURN (n*n);</span>
  END;
 
BEGIN
  DBMS_OUTPUT.PUT_LINE (
    &#39;f returns &#39; || <span class="bold">f(2)</span> <span class="bold">|| &#39;. Execution returns here (1).&#39;</span>
  );
  
  x := <span class="bold">f(2)</span>;
  <span class="bold">DBMS_OUTPUT.PUT_LINE(&#39;Execution returns here (2).&#39;);</span>
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">f returns 4. Execution returns here (1).Execution returns here (2).
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-919FB82F-4D11-4941-96F1-85A5354072E7__CIHFDEBC">
<p class="titleinexample">Example 8-4 Function Where Not Every Execution Path Leads to RETURN Statement</p>
<pre dir="ltr">CREATE OR REPLACE FUNCTION f (n INTEGER)
  RETURN INTEGER
  AUTHID DEFINER
IS
BEGIN
  <span class="bold">IF n = 0</span> THEN
    RETURN 1;
  <span class="bold">ELSIF n = 1</span> THEN
    RETURN n;
  END IF;
END;
/
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-919FB82F-4D11-4941-96F1-85A5354072E7__CIHDHIDD">
<p class="titleinexample">Example 8-5 Function Where Every Execution Path Leads to RETURN Statement</p>
<pre dir="ltr">CREATE OR REPLACE FUNCTION f (n INTEGER)
  RETURN INTEGER
  AUTHID DEFINER
IS
BEGIN
  IF n = 0 THEN
    RETURN 1;
  ELSIF n = 1 THEN
    RETURN n;
  <span class="bold">ELSE</span>
    RETURN n*n;
  END IF;
END;
/
BEGIN
  FOR i IN 0 .. 3 LOOP
    DBMS_OUTPUT.PUT_LINE(&#39;f(&#39; || i || &#39;) = &#39; || f(i));
  END LOOP;
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">f(0) = 1
f(1) = 1
f(2) = 4
f(3) = 9
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS555"></a><a id="LNPLS99894"></a>
<div class="props_rev_3"><a id="GUID-B25162E7-4E32-4E4C-A15C-890E03A3A71E"></a>
<h4 id="LNPLS-GUID-B25162E7-4E32-4E4C-A15C-890E03A3A71E" class="sect4">RETURN Statement in Procedure</h4>
<div>
<p>In a procedure, the <code class="codeph">RETURN</code> statement returns control to the invoker, where execution resumes immediately after the invocation. The <code class="codeph">RETURN</code> statement cannot specify an expression.</p>
<p>In <a href="subprograms.htm#GUID-B25162E7-4E32-4E4C-A15C-890E03A3A71E__CIHHFGDG">Example 8-6</a>, the <code class="codeph">RETURN</code> statement returns control to the statement immediately after the invoking statement.</p>
<div class="example" id="GUID-B25162E7-4E32-4E4C-A15C-890E03A3A71E__CIHHFGDG">
<p class="titleinexample">Example 8-6 Execution Resumes After RETURN Statement in Procedure</p>
<pre dir="ltr">DECLARE
  PROCEDURE p IS
  BEGIN
    DBMS_OUTPUT.PUT_LINE(&#39;Inside p&#39;);
    <span class="bold">RETURN;</span>
    DBMS_OUTPUT.PUT_LINE(<span class="bold">&#39;Unreachable statement.&#39;</span>);
  END;
BEGIN
  <span class="bold">p;</span>
  <span class="bold">DBMS_OUTPUT.PUT_LINE(&#39;Control returns here.&#39;);</span>
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">Inside p
Control returns here.
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS556"></a><a id="LNPLS99893"></a>
<div class="props_rev_3"><a id="GUID-4102EAC5-1B56-4DAB-9EDA-84398FD1F5E6"></a>
<h4 id="LNPLS-GUID-4102EAC5-1B56-4DAB-9EDA-84398FD1F5E6" class="sect4">RETURN Statement in Anonymous Block</h4>
<div>
<p>In an anonymous block, the <code class="codeph">RETURN</code> statement exits its own block and all enclosing blocks. The <code class="codeph">RETURN</code> statement cannot specify an expression.</p>
<p>In <a href="subprograms.htm#GUID-4102EAC5-1B56-4DAB-9EDA-84398FD1F5E6__CIHGCFCC">Example 8-7</a>, the <code class="codeph">RETURN</code> statement exits both the inner and outer block.</p>
<div class="example" id="GUID-4102EAC5-1B56-4DAB-9EDA-84398FD1F5E6__CIHGCFCC">
<p class="titleinexample">Example 8-7 Execution Resumes After RETURN Statement in Anonymous Block</p>
<pre dir="ltr">BEGIN
  BEGIN
    DBMS_OUTPUT.PUT_LINE(&#39;Inside inner block.&#39;);
    <span class="bold">RETURN;</span>
    DBMS_OUTPUT.PUT_LINE(<span class="bold">&#39;Unreachable statement.&#39;</span>);
  END;
  DBMS_OUTPUT.PUT_LINE(<span class="bold">&#39;Inside outer block. Unreachable statement.&#39;</span>);
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">Inside inner block.
</pre></div>
<!-- class="example" --></div>
</div>
</div>
</div>
<a id="LNPLS656"></a><a id="LNPLS99896"></a>
<div class="props_rev_3"><a id="GUID-117C2D94-EB7C-4A9E-A080-99F4829D69B0"></a>
<h2 id="LNPLS-GUID-117C2D94-EB7C-4A9E-A080-99F4829D69B0" class="sect2">Forward Declaration</h2>
<div>
<p>If nested subprograms in the same PL/SQL block invoke each other, then one requires a forward declaration, because a subprogram must be declared before it can be invoked.</p>
<p>A <span class="bold">forward declaration</span> declares a nested subprogram but does not define it. You must define it later in the same block. The forward declaration and the definition must have the same subprogram heading.</p>
<p>In <a href="subprograms.htm#GUID-117C2D94-EB7C-4A9E-A080-99F4829D69B0__CHDGICCH">Example 8-8</a>, an anonymous block creates two procedures that invoke each other.</p>
<div class="example" id="GUID-117C2D94-EB7C-4A9E-A080-99F4829D69B0__CHDGICCH">
<p class="titleinexample">Example 8-8 Nested Subprograms Invoke Each Other</p>
<pre dir="ltr">DECLARE
  <span class="bold">-- Declare proc1 (forward declaration):</span>
  PROCEDURE proc1(number1 NUMBER);

  <span class="bold">-- Declare and define proc2:</span>
  PROCEDURE proc2(number2 NUMBER) IS
  BEGIN
    proc1(number2);
  END;

  <span class="bold">-- Define proc 1:</span>
  PROCEDURE proc1(number1 NUMBER) IS
  BEGIN
    proc2 (number1);
  END;

BEGIN
  NULL;
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS557"></a><a id="LNPLS00806"></a>
<div class="props_rev_3"><a id="GUID-C0397690-70F4-480D-ADC9-02D277DAA1BB"></a>
<h2 id="LNPLS-GUID-C0397690-70F4-480D-ADC9-02D277DAA1BB" class="sect2">Subprogram Parameters</h2>
<div>
<p>If a subprogram has parameters, their values can differ for each invocation.</p>
<div class="section">
<p class="subhead2">Topics</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="subprograms.htm#GUID-9ACD7C7D-861B-4410-AC6F-8536C191E2EF">Formal and Actual Subprogram Parameters</a></p>
</li>
<li>
<p><a href="subprograms.htm#GUID-18E72176-145F-4E12-95F1-03F84B3D5DC6">Subprogram Parameter Passing Methods</a></p>
</li>
<li>
<p><a href="subprograms.htm#GUID-518B8827-26CC-4734-B799-ACB038185638">Subprogram Parameter Modes</a></p>
</li>
<li>
<p><a href="subprograms.htm#GUID-CB95955E-8843-4481-BB07-A52CA2FF4A8B">Subprogram Parameter Aliasing</a></p>
</li>
<li>
<p><a href="subprograms.htm#GUID-C1079955-95B2-4D0F-8928-649EDA355461">Default Values for IN Subprogram Parameters</a></p>
</li>
<li>
<p><a href="subprograms.htm#GUID-A5DA8CF5-1BCC-4ABE-9B68-DB593FF1D2CC">Positional, Named, and Mixed Notation for Actual Parameters</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="LNPLS1962"></a><a id="LNPLS658"></a><a id="LNPLS657"></a>
<div class="props_rev_3"><a id="GUID-9ACD7C7D-861B-4410-AC6F-8536C191E2EF"></a>
<h3 id="LNPLS-GUID-9ACD7C7D-861B-4410-AC6F-8536C191E2EF" class="sect3">Formal and Actual Subprogram Parameters</h3>
<div>
<p>If you want a subprogram to have parameters, declare <span class="bold">formal parameters</span> in the subprogram heading. In each formal parameter declaration, specify the name and data type of the parameter, and (optionally) its mode and default value. In the execution part of the subprogram, reference the formal parameters by their names.</p>
<p>When invoking the subprogram, specify the <span class="bold">actual parameters</span> whose values are to be assigned to the formal parameters. Corresponding actual and formal parameters must have compatible data types.</p>
<div class="infobox-note" id="GUID-9ACD7C7D-861B-4410-AC6F-8536C191E2EF__GUID-7BC3F85D-6CE5-45D0-846E-AE1842A4A464">
<p class="notep1">Note:</p>
<p>You can declare a formal parameter of a constrained subtype, like this:</p>
<pre dir="ltr">DECLARE
  <span class="bold">SUBTYPE n1 IS NUMBER(1);</span>
  <span class="bold">SUBTYPE v1 IS VARCHAR2(1);</span>
 
  PROCEDURE p (n <span class="bold">n1</span>, v <span class="bold">v1</span>) IS ...
</pre>
<p>But you cannot include a constraint in a formal parameter declaration, like this:</p>
<pre dir="ltr">DECLARE
  PROCEDURE p (n <span class="bold">NUMBER(1)</span>, v <span class="bold">VARCHAR2(1)</span>) IS ...
</pre></div>
<div class="infoboxnotealso" id="GUID-9ACD7C7D-861B-4410-AC6F-8536C191E2EF__GUID-CD4885C2-1B2D-4CE5-A8C1-0BAAB791E67F">
<p class="notep1">Tip:</p>
<p>To avoid confusion, use different names for formal and actual parameters.</p>
</div>
<div class="infobox-note" id="GUID-9ACD7C7D-861B-4410-AC6F-8536C191E2EF__GUID-2E052916-E408-4FF9-B2EC-C02E026B7F67">
<p class="notep1">Note:</p>
<ul style="list-style-type: disc;">
<li>
<p>Actual parameters (including default values of formal parameters) can be evaluated in any order. If a program determines order of evaluation, then at the point where the program does so, its behavior is undefined.</p>
</li>
<li>
<p>You cannot use LOB parameters in a server-to-server remote procedure call (RPC).</p>
</li>
</ul>
</div>
<p>In <a href="subprograms.htm#GUID-9ACD7C7D-861B-4410-AC6F-8536C191E2EF__CIHJHJDE">Example 8-9</a>, the procedure has formal parameters <code class="codeph">emp_id</code> and <code class="codeph">amount</code>. In the first procedure invocation, the corresponding actual parameters are <code class="codeph">emp_num</code> and <code class="codeph">bonus</code>, whose value are 120 and 100, respectively. In the second procedure invocation, the actual parameters are <code class="codeph">emp_num</code> and <code class="codeph">merit</code> + <code class="codeph">bonus</code>, whose value are 120 and 150, respectively.</p>
<div class="section">
<p class="subhead3">Topics:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="subprograms.htm#GUID-BA13F32D-4E04-4004-8CE5-5B628678A253">Formal Parameters of Constrained Subtypes</a></p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-9ACD7C7D-861B-4410-AC6F-8536C191E2EF__GUID-EF8FF330-B07C-4BB3-B91A-38064020FBC4">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="formal_parameter.htm#GUID-5BA8E033-96B9-439A-A4FC-4844FEC14AD8" title="A formal parameter declaration specifies the name and data type of the parameter, and (optionally) its mode and default value.">Formal Parameter Declaration</a>&#34;</span> for the syntax and semantics of a formal parameter declaration</p>
</li>
<li>
<p><span class="q">&#34;<a href="expression.htm#GUID-D4700B45-F2C8-443E-AEE7-2BD20FFD45B8__CHDBCJGE">function_call ::=</a>&#34;</span> and <span class="q">&#34;<a href="expression.htm#GUID-D4700B45-F2C8-443E-AEE7-2BD20FFD45B8__CHDEBDGB">function_call</a>&#34;</span> for the syntax and semantics of a function invocation</p>
</li>
<li>
<p><span class="q">&#34;<a href="block.htm#GUID-9ACEB9ED-567E-4E1A-A16A-B8B35214FC9D__CJAEJGEA">procedure_call ::=</a>&#34;</span> and <span class="q">&#34;<a href="block.htm#GUID-9ACEB9ED-567E-4E1A-A16A-B8B35214FC9D__CHDIICHC">procedure_call</a>&#34;</span> for the syntax and semantics of a procedure invocation</p>
</li>
</ul>
</div>
</div>
<!-- class="section" -->
<div class="example" id="GUID-9ACD7C7D-861B-4410-AC6F-8536C191E2EF__CIHJHJDE">
<p class="titleinexample">Example 8-9 Formal Parameters and Actual Parameters</p>
<pre dir="ltr">DECLARE
  emp_num NUMBER(6) := 120;
  bonus   NUMBER(6) := 100;
  merit   NUMBER(4) := 50;

  PROCEDURE raise_salary (
    <span class="bold">emp_id NUMBER,  -- formal parameter</span>
    <span class="bold">amount NUMBER   -- formal parameter</span>
  ) IS
  BEGIN
    UPDATE employees
    SET salary = salary + <span class="bold">amount</span>  <span class="bold">-- reference to formal parameter</span>
    WHERE employee_id = <span class="bold">emp_id</span>;   <span class="bold">-- reference to formal parameter</span>
  END raise_salary;

BEGIN
  raise_salary(<span class="bold">emp_num, bonus</span>);          <span class="bold">-- actual parameters</span>

  /* raise_salary runs this statement:
       UPDATE employees
       SET salary = salary + <span class="bold">100</span>
       WHERE employee_id = <span class="bold">120</span>;       */

  raise_salary(<span class="bold">emp_num, merit + bonus</span>);  <span class="bold">-- actual parameters</span>

  /* raise_salary runs this statement:
       UPDATE employees
       SET salary = salary + <span class="bold">150</span>
       WHERE employee_id = <span class="bold">120</span>;       */
END;
/
</pre></div>
<!-- class="example" --></div>
<a id="LNPLS379"></a><a id="LNPLS560"></a><a id="LNPLS562"></a><a id="LNPLS558"></a>
<div class="props_rev_3"><a id="GUID-BA13F32D-4E04-4004-8CE5-5B628678A253"></a>
<h4 id="LNPLS-GUID-BA13F32D-4E04-4004-8CE5-5B628678A253" class="sect4">Formal Parameters of Constrained Subtypes</h4>
<div>
<p>If the data type of a formal parameter is a constrained subtype, then:</p>
<ul style="list-style-type: disc;">
<li>
<p>If the subtype has the <code class="codeph">NOT</code> <code class="codeph">NULL</code> constraint, then the actual parameter inherits it.</p>
</li>
<li>
<p>If the subtype has the base type <code class="codeph">VARCHAR2</code>, then the actual parameter does not inherit the size of the subtype.</p>
</li>
<li>
<p>If the subtype has a numeric base type, then the actual parameter inherits the range of the subtype, but not the precision or scale.</p>
</li>
</ul>
<div class="infobox-note" id="GUID-BA13F32D-4E04-4004-8CE5-5B628678A253__GUID-931C1F4D-9EB8-4434-AC1E-E892922129AA">
<p class="notep1">Note:</p>
<p>In a function, the clause <code class="codeph">RETURN</code> <span class="italic"><code class="codeph">datatype</code></span> declares a hidden formal parameter and the statement <code class="codeph">RETURN</code> <span class="italic"><code class="codeph">value</code></span> specifies the corresponding actual parameter. Therefore, if <span class="italic"><code class="codeph">datatype</code></span> is a constrained data type, then the preceding rules apply to <span class="italic"><code class="codeph">value</code></span> (see <a href="subprograms.htm#GUID-BA13F32D-4E04-4004-8CE5-5B628678A253__CHDEJAEB">Example 8-11</a>).</p>
</div>
<p><a href="subprograms.htm#GUID-BA13F32D-4E04-4004-8CE5-5B628678A253__CJAJAHJD">Example 8-10</a> shows that an actual subprogram parameter inherits the <code class="codeph">NOT</code> <code class="codeph">NULL</code> constraint but not the size of a <code class="codeph">VARCHAR2</code> subtype.</p>
<p>As <a href="predefined.htm#GUID-1D28B7B6-15AE-454A-8134-F8724551AE8B">PL/SQL Predefined Data Types</a> shows, PL/SQL has many predefined data types that are constrained subtypes of other data types. For example, <code class="codeph">INTEGER</code> is a constrained subtype of <code class="codeph">NUMBER</code>:</p>
<pre dir="ltr">SUBTYPE INTEGER IS NUMBER(38,0);
</pre>
<p>In <a href="subprograms.htm#GUID-BA13F32D-4E04-4004-8CE5-5B628678A253__CHDEJAEB">Example 8-11</a>, the function has both an <code class="codeph">INTEGER</code> formal parameter and an <code class="codeph">INTEGER</code> return type. The anonymous block invokes the function with an actual parameter that is not an integer. Because the actual parameter inherits the range but not the precision and scale of <code class="codeph">INTEGER</code>, and the actual parameter is in the <code class="codeph">INTEGER</code> range, the invocation succeeds. For the same reason, the <code class="codeph">RETURN</code> statement succeeds in returning the noninteger value.</p>
<p>In <a href="subprograms.htm#GUID-BA13F32D-4E04-4004-8CE5-5B628678A253__CHDBFCDI">Example 8-12</a>, the function implicitly converts its formal parameter to the constrained subtype <code class="codeph">INTEGER</code> before returning it.</p>
<div class="infoboxnotealso" id="GUID-BA13F32D-4E04-4004-8CE5-5B628678A253__GUID-DF5F953A-6CD6-41D1-9FF8-1E9BF2D8D08E">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="datatypes.htm#GUID-FDC366F3-66AA-4F6A-A59B-5A08DCBD4F9F" title="A constrained subtype has only a subset of the values of its base type.">Constrained Subtypes</a>&#34;</span> for general information about constrained subtypes</p>
</div>
<div class="example" id="GUID-BA13F32D-4E04-4004-8CE5-5B628678A253__CJAJAHJD">
<p class="titleinexample">Example 8-10 Actual Parameter Inherits Only NOT NULL from Subtype</p>
<pre dir="ltr">DECLARE
  <span class="bold">SUBTYPE License IS VARCHAR2(7) NOT NULL</span>;
  n  License := &#39;DLLLDDD&#39;;
 
  PROCEDURE p (<span class="bold">x License</span>) IS
  BEGIN
    DBMS_OUTPUT.PUT_LINE(x);
  END;
 
BEGIN
  p(&#39;1ABC123456789&#39;);  <span class="bold">-- Succeeds; size is not inherited</span>
  p(NULL);             <span class="bold">-- Raises error; NOT NULL is inherited</span>
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">  p(NULL);             -- Raises error; NOT NULL is inherited
    *
ERROR at line 12:
ORA-06550: line 12, column 5:
PLS-00567: cannot pass NULL to a NOT NULL constrained formal parameter
ORA-06550: line 12, column 3:
PL/SQL: Statement ignored
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-BA13F32D-4E04-4004-8CE5-5B628678A253__CHDEJAEB">
<p class="titleinexample">Example 8-11 Actual Parameter and Return Value Inherit Only Range From Subtype</p>
<pre dir="ltr">DECLARE
  FUNCTION test <span class="bold">(p INTEGER) RETURN INTEGER</span> IS
  BEGIN
    DBMS_OUTPUT.PUT_LINE(&#39;p = &#39; || p);
    RETURN p;
  END test;
 
BEGIN
  DBMS_OUTPUT.PUT_LINE(&#39;test(p) = &#39; || test(0.66));
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr"><span class="bold">p = .66</span>
<span class="bold">test(p) = .66</span>
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-BA13F32D-4E04-4004-8CE5-5B628678A253__CHDBFCDI">
<p class="titleinexample">Example 8-12 Function Implicitly Converts Formal Parameter to Constrained Subtype</p>
<pre dir="ltr">DECLARE
  FUNCTION test <span class="bold">(p NUMBER) RETURN NUMBER</span> IS
    <span class="bold">q INTEGER := p;  -- Implicitly converts p to INTEGER</span>
  BEGIN
    DBMS_OUTPUT.PUT_LINE(&#39;p = &#39; || <span class="bold">q</span>);  -- Display q, not p
    RETURN <span class="bold">q</span>;                           -- Return q, not p
  END test;
 
BEGIN
  DBMS_OUTPUT.PUT_LINE(&#39;test(p) = &#39; || test(0.66));
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr"><span class="bold">p = 1</span>
<span class="bold">test(p) = 1</span>
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="LNPLS566"></a><a id="LNPLS99952"></a>
<div class="props_rev_3"><a id="GUID-18E72176-145F-4E12-95F1-03F84B3D5DC6"></a>
<h3 id="LNPLS-GUID-18E72176-145F-4E12-95F1-03F84B3D5DC6" class="sect3">Subprogram Parameter Passing Methods</h3>
<div>
<p>The PL/SQL compiler has two ways of passing an actual parameter to a subprogram:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold">By reference</span></p>
<p>The compiler passes the subprogram a pointer to the actual parameter. The actual and formal parameters refer to the same memory location.</p>
</li>
<li>
<p><span class="bold">By value</span></p>
<p>The compiler assigns the value of the actual parameter to the corresponding formal parameter. The actual and formal parameters refer to different memory locations.</p>
<p>If necessary, the compiler implicitly converts the data type of the actual parameter to the data type of the formal parameter. For information about implicit data conversion, see <a class="olink SQLRF51047" target="_blank" href="../SQLRF/sql_elements002.htm#SQLRF51047"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<div class="infoboxnotealso" id="GUID-18E72176-145F-4E12-95F1-03F84B3D5DC6__GUID-71EA1EF8-9A14-476F-A10E-1729D86E6B6C">
<p class="notep1">Tip:</p>
<p>Avoid implicit data conversion (for the reasons in <a class="olink SQLRF51046" target="_blank" href="../SQLRF/sql_elements002.htm#SQLRF51046"><span class="italic">Oracle Database SQL Language Reference</span></a>), in either of these ways:</p>
<ul style="list-style-type: disc;">
<li>
<p>Declare the variables that you intend to use as actual parameters with the same data types as their corresponding formal parameters (as in the declaration of variable <code class="codeph">x</code> in <a href="subprograms.htm#GUID-18E72176-145F-4E12-95F1-03F84B3D5DC6__CIHFEEIJ">Example 8-13</a>).</p>
</li>
<li>
<p>Explicitly convert actual parameters to the data types of their corresponding formal parameters, using the SQL conversion functions described in <a class="olink SQLRF51054" target="_blank" href="../SQLRF/sql_elements002.htm#SQLRF51054"><span class="italic">Oracle Database SQL Language Reference</span></a> (as in the third invocation of the procedure in <a href="subprograms.htm#GUID-18E72176-145F-4E12-95F1-03F84B3D5DC6__CIHFEEIJ">Example 8-13</a>).</p>
</li>
</ul>
</div>
</li>
</ul>
<p>In <a href="subprograms.htm#GUID-18E72176-145F-4E12-95F1-03F84B3D5DC6__CIHFEEIJ">Example 8-13</a>, the procedure <code class="codeph">p</code> has one parameter, <code class="codeph">n</code>, which is passed by value. The anonymous block invokes <code class="codeph">p</code> three times, avoiding implicit conversion twice.</p>
<p>The method by which the compiler passes a specific actual parameter depends on its mode, as explained in <span class="q">&#34;<a href="subprograms.htm#GUID-518B8827-26CC-4734-B799-ACB038185638">Subprogram Parameter Modes</a>&#34;</span>.</p>
<div class="example" id="GUID-18E72176-145F-4E12-95F1-03F84B3D5DC6__CIHFEEIJ">
<p class="titleinexample">Example 8-13 Avoiding Implicit Conversion of Actual Parameters</p>
<pre dir="ltr">CREATE OR REPLACE PROCEDURE p (
  <span class="bold">n NUMBER</span>
) AUTHID DEFINER IS
BEGIN
  NULL;
END;
/
DECLARE
  <span class="bold">x NUMBER</span>      :=  1;
  y VARCHAR2(1) := &#39;1&#39;;
BEGIN
  p(<span class="bold">x</span>);             <span class="bold">-- No conversion needed</span>
  p(y);             -- z implicitly converted from VARCHAR2 to NUMBER
  p(<span class="bold">TO_NUMBER(y)</span>);  <span class="bold">-- z explicitly converted from VARCHAR2 to NUMBER</span>
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS665"></a><a id="LNPLS662"></a><a id="LNPLS567"></a><a id="LNPLS2171"></a><a id="LNPLS659"></a>
<div class="props_rev_3"><a id="GUID-518B8827-26CC-4734-B799-ACB038185638"></a>
<h3 id="LNPLS-GUID-518B8827-26CC-4734-B799-ACB038185638" class="sect3">Subprogram Parameter Modes</h3>
<div>
<p>The <span class="bold">mode</span> of a formal parameter determines its behavior.</p>
<p><a href="subprograms.htm#GUID-518B8827-26CC-4734-B799-ACB038185638__BCFHBGBI" title="This table summarizes and compares the parameter modes of subprogram parameters.">Table 8-1</a> summarizes and compares the characteristics of the subprogram parameter modes.</p>
<div class="tblformal" id="GUID-518B8827-26CC-4734-B799-ACB038185638__BCFHBGBI">
<p class="titleintable">Table 8-1 PL/SQL Subprogram Parameter Modes</p>
<table class="cellalignment876" title="PL/SQL Subprogram Parameter Modes" summary="This table summarizes and compares the parameter modes of subprogram parameters.">
<thead>
<tr class="cellalignment870">
<th class="cellalignment881" id="d56434e2344">Parameter Mode</th>
<th class="cellalignment881" id="d56434e2347">Is Default?</th>
<th class="cellalignment882" id="d56434e2350">Role</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment870">
<td class="cellalignment883" id="d56434e2355" headers="d56434e2344">
<p>IN</p>
</td>
<td class="cellalignment883" headers="d56434e2355 d56434e2347">
<p>Default mode</p>
</td>
<td class="cellalignment884" headers="d56434e2355 d56434e2350">
<p>Passes a value to the subprogram.</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment883" id="d56434e2365" headers="d56434e2344">
<p>OUT</p>
</td>
<td class="cellalignment883" headers="d56434e2365 d56434e2347">
<p>Must be specified.</p>
</td>
<td class="cellalignment884" headers="d56434e2365 d56434e2350">
<p>Returns a value to the invoker.</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment883" id="d56434e2375" headers="d56434e2344">
<p>IN OUT</p>
</td>
<td class="cellalignment883" headers="d56434e2375 d56434e2347">
<p>Must be specified.</p>
</td>
<td class="cellalignment884" headers="d56434e2375 d56434e2350">
<p>Passes an initial value to the subprogram and returns an updated value to the invoker.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<div class="tblformalwide" id="GUID-518B8827-26CC-4734-B799-ACB038185638__PLSQLSUBPROGRAMPARAMETERMODES-521E28A5">
<p class="titleintable">Table 8-2 PL/SQL Subprogram Parameter Modes Characteristics</p>
<table class="cellalignment885" title="PL/SQL Subprogram Parameter Modes Characteristics" summary="This table summarizes and compares the parameter modes of subprogram parameters and their characteristics.">
<thead>
<tr class="cellalignment870">
<th class="cellalignment886" id="d56434e2396">Parameter Mode</th>
<th class="cellalignment887" id="d56434e2399">Formal Parameter</th>
<th class="cellalignment888" id="d56434e2402">Actual Parameter</th>
<th class="cellalignment889" id="d56434e2405">Passed by Reference ?</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment870">
<td class="cellalignment890" id="d56434e2410" headers="d56434e2396">
<p>IN</p>
</td>
<td class="cellalignment891" headers="d56434e2410 d56434e2399">
<p>Formal parameter acts like a constant: When the subprogram begins, its value is that of either its actual parameter or default value, and the subprogram cannot change this value.</p>
</td>
<td class="cellalignment892" headers="d56434e2410 d56434e2402">
<p>Actual parameter can be a constant, initialized variable, literal, or expression.</p>
</td>
<td class="cellalignment893" headers="d56434e2410 d56434e2405">
<p>Actual parameter is passed by reference.</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment890" id="d56434e2423" headers="d56434e2396">
<p>OUT</p>
</td>
<td class="cellalignment891" headers="d56434e2423 d56434e2399">
<p>Formal parameter is initialized to the default value of its type. The default value of the type is <code class="codeph">NULL</code> except for a record type with a non-<code class="codeph">NULL</code> default value (see <a href="subprograms.htm#GUID-518B8827-26CC-4734-B799-ACB038185638__CHDJEJHG">Example 8-16</a>).</p>
<p>When the subprogram begins, the formal parameter has its initial value regardless of the value of its actual parameter. Oracle recommends that the subprogram assign a value to the formal parameter.</p>
</td>
<td class="cellalignment892" headers="d56434e2423 d56434e2402">
<p>If the default value of the formal parameter type is <code class="codeph">NULL</code>, then the actual parameter must be a variable whose data type is not defined as <code class="codeph">NOT</code> <code class="codeph">NULL</code>.</p>
</td>
<td class="cellalignment893" headers="d56434e2423 d56434e2405">
<p>By default, actual parameter is passed by value; if you specify <code class="codeph">NOCOPY</code>, it might be passed by reference.</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment890" id="d56434e2458" headers="d56434e2396">
<p>IN OUT</p>
</td>
<td class="cellalignment891" headers="d56434e2458 d56434e2399">
<p>Formal parameter acts like an initialized variable: When the subprogram begins, its value is that of its actual parameter. Oracle recommends that the subprogram update its value.</p>
</td>
<td class="cellalignment892" headers="d56434e2458 d56434e2402">
<p>Actual parameter must be a variable (typically, it is a string buffer or numeric accumulator).</p>
</td>
<td class="cellalignment893" headers="d56434e2458 d56434e2405">
<p>By default, actual parameter is passed by value (in both directions); if you specify <code class="codeph">NOCOPY</code>, it might be passed by reference.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<div class="infoboxnotealso" id="GUID-518B8827-26CC-4734-B799-ACB038185638__GUID-0242530B-3A27-46E1-B799-1A785BC91ADA">
<p class="notep1">Tip:</p>
<p>Do not use <code class="codeph">OUT</code> and <code class="codeph">IN</code> <code class="codeph">OUT</code> for function parameters. Ideally, a function takes zero or more parameters and returns a single value. A function with <code class="codeph">IN</code> <code class="codeph">OUT</code> parameters returns multiple values and has side effects.</p>
</div>
<div class="infobox-note" id="GUID-518B8827-26CC-4734-B799-ACB038185638__GUID-5EE12830-268B-4A71-9AEC-FE77FCF093DA">
<p class="notep1">Note:</p>
<p>The specifications of many packages and types that Oracle Database supplies declare formal parameters with this notation:</p>
<pre dir="ltr">i1 IN VARCHAR2 CHARACTER SET ANY_CS
i2 IN VARCHAR2 CHARACTER SET i1%CHARSET
</pre>
<p>Do not use this notation when declaring your own formal or actual parameters. It is reserved for Oracle implementation of the supplied packages types.</p>
</div>
<p>Regardless of how an <code class="codeph">OUT</code> or <code class="codeph">IN</code> <code class="codeph">OUT</code> parameter is passed:</p>
<ul style="list-style-type: disc;">
<li>
<p>If the subprogram exits successfully, then the value of the actual parameter is the final value assigned to the formal parameter. (The formal parameter is assigned at least one value&mdash;the initial value.)</p>
</li>
<li>
<p>If the subprogram ends with an exception, then the value of the actual parameter is undefined.</p>
</li>
<li>
<p>Formal <code class="codeph">OUT</code> and <code class="codeph">IN</code> <code class="codeph">OUT</code> parameters can be returned in any order. In this example, the final values of <code class="codeph">x</code> and <code class="codeph">y</code> are undefined:</p>
<pre dir="ltr">CREATE OR REPLACE PROCEDURE p (x OUT INTEGER, y OUT INTEGER) AS
BEGIN
  x := 17; y := 93;
END;
/
</pre></li>
</ul>
<p>When an <code class="codeph">OUT</code> or <code class="codeph">IN</code> <code class="codeph">OUT</code> parameter is passed by reference, the actual and formal parameters refer to the same memory location. Therefore, if the subprogram changes the value of the formal parameter, the change shows immediately in the actual parameter (see <span class="q">&#34;<a href="subprograms.htm#GUID-1D93EBAE-406B-45CE-B89F-A456E37415CB">Subprogram Parameter Aliasing with Parameters Passed by Reference</a>&#34;</span>).</p>
<p>In <a href="subprograms.htm#GUID-518B8827-26CC-4734-B799-ACB038185638__G1170259">Example 8-14</a>, the procedure <code class="codeph">p</code> has two <code class="codeph">IN</code> parameters, one <code class="codeph">OUT</code> parameter, and one <code class="codeph">IN</code> <code class="codeph">OUT</code> parameter. The <code class="codeph">OUT</code> and <code class="codeph">IN</code> <code class="codeph">OUT</code> parameters are passed by value (the default). The anonymous block invokes <code class="codeph">p</code> twice, with different actual parameters. Before each invocation, the anonymous block prints the values of the actual parameters. The procedure <code class="codeph">p</code> prints the initial values of its formal parameters. After each invocation, the anonymous block prints the values of the actual parameters again.</p>
<p>In <a href="subprograms.htm#GUID-518B8827-26CC-4734-B799-ACB038185638__CHDBGIHE">Example 8-15</a>, the anonymous block invokes procedure <code class="codeph">p</code> (from <a href="subprograms.htm#GUID-518B8827-26CC-4734-B799-ACB038185638__G1170259">Example 8-14</a>) with an actual parameter that causes <code class="codeph">p</code> to raise the predefined exception <code class="codeph">ZERO_DIVIDE</code>, which <code class="codeph">p</code> does not handle. The exception propagates to the anonymous block, which handles <code class="codeph">ZERO_DIVIDE</code> and shows that the actual parameters for the <code class="codeph">IN</code> and <code class="codeph">IN</code> <code class="codeph">OUT</code> parameters of <code class="codeph">p</code> have retained the values that they had before the invocation. (Exception propagation is explained in <span class="q">&#34;<a href="errors.htm#GUID-A99B76C3-44DF-40E1-AB7A-454C6805B9BB">Exception Propagation</a>&#34;</span>.)</p>
<p>In <a href="subprograms.htm#GUID-518B8827-26CC-4734-B799-ACB038185638__CHDJEJHG">Example 8-16</a>, the procedure <code class="codeph">p</code> has three <code class="codeph">OUT</code> formal parameters: <code class="codeph">x</code>, of a record type with a non-<code class="codeph">NULL</code> default value; <code class="codeph">y</code>, of a record type with no non-<code class="codeph">NULL</code> default value; and <code class="codeph">z</code>, which is not a record.</p>
<p>The corresponding actual parameters for <code class="codeph">x</code>, <code class="codeph">y</code>, and <code class="codeph">z</code> are <code class="codeph">r1</code>, <code class="codeph">r2</code>, and <code class="codeph">s</code>, respectively. <code class="codeph">s</code> is declared with an initial value. However, when <code class="codeph">p</code> is invoked, the value of <code class="codeph">s</code> is initialized to <code class="codeph">NULL</code>. The values of <code class="codeph">r1</code> and <code class="codeph">r2</code> are initialized to the default values of their record types, <code class="codeph">&#39;abcde&#39;</code> and <code class="codeph">NULL</code>, respectively.</p>
<div class="example" id="GUID-518B8827-26CC-4734-B799-ACB038185638__G1170259">
<p class="titleinexample">Example 8-14 Parameter Values Before, During, and After Procedure Invocation</p>
<pre dir="ltr">CREATE OR REPLACE PROCEDURE p (
  a        PLS_INTEGER,  <span class="bold">-- IN by default</span>
  b     <span class="bold">IN</span> PLS_INTEGER,
  c    <span class="bold">OUT</span> PLS_INTEGER,
  d <span class="bold">IN OUT</span> BINARY_FLOAT
) AUTHID DEFINER IS
BEGIN
  -- Print values of parameters:
 
  DBMS_OUTPUT.PUT_LINE(&#39;Inside procedure p:&#39;);
 
  DBMS_OUTPUT.PUT(&#39;IN a = &#39;);
  DBMS_OUTPUT.PUT_LINE(NVL(TO_CHAR(a), &#39;NULL&#39;));
 
  DBMS_OUTPUT.PUT(&#39;IN b = &#39;);
  DBMS_OUTPUT.PUT_LINE(NVL(TO_CHAR(b), &#39;NULL&#39;));
 
  DBMS_OUTPUT.PUT(&#39;OUT c = &#39;);
  DBMS_OUTPUT.PUT_LINE(NVL(TO_CHAR(c), &#39;NULL&#39;));
 
  DBMS_OUTPUT.PUT_LINE(&#39;IN OUT d = &#39; || TO_CHAR(d));
 
  <span class="bold">-- Can reference IN parameters a and b,</span>
  <span class="bold">-- but cannot assign values to them.</span>
 
  c := a+10;  <span class="bold">-- Assign value to OUT parameter</span>
  d := 10/b;  <span class="bold">-- Assign value to IN OUT parameter</span>
END;
/
DECLARE
  aa  CONSTANT PLS_INTEGER := 1;
  bb  PLS_INTEGER  := 2;
  cc  PLS_INTEGER  := 3;
  dd  BINARY_FLOAT := 4;
  ee  PLS_INTEGER;
  ff  BINARY_FLOAT := 5;
BEGIN
  DBMS_OUTPUT.PUT_LINE(&#39;Before invoking procedure p:&#39;);
 
  DBMS_OUTPUT.PUT(&#39;aa = &#39;);
  DBMS_OUTPUT.PUT_LINE(NVL(TO_CHAR(aa), &#39;NULL&#39;));
 
  DBMS_OUTPUT.PUT(&#39;bb = &#39;);
  DBMS_OUTPUT.PUT_LINE(NVL(TO_CHAR(bb), &#39;NULL&#39;));
 
  DBMS_OUTPUT.PUT(&#39;cc = &#39;);
  DBMS_OUTPUT.PUT_LINE(NVL(TO_CHAR(cc), &#39;NULL&#39;));
 
  DBMS_OUTPUT.PUT_LINE(&#39;dd = &#39; || TO_CHAR(dd));
 
  p (aa, -- constant
     bb, -- initialized variable
     cc, -- initialized variable 
     dd  -- initialized variable
  );
 
  DBMS_OUTPUT.PUT_LINE(&#39;After invoking procedure p:&#39;);
 
  DBMS_OUTPUT.PUT(&#39;aa = &#39;);
  DBMS_OUTPUT.PUT_LINE(NVL(TO_CHAR(aa), &#39;NULL&#39;));
 
  DBMS_OUTPUT.PUT(&#39;bb = &#39;);
  DBMS_OUTPUT.PUT_LINE(NVL(TO_CHAR(bb), &#39;NULL&#39;));
 
  DBMS_OUTPUT.PUT(&#39;cc = &#39;);
  DBMS_OUTPUT.PUT_LINE(NVL(TO_CHAR(cc), &#39;NULL&#39;));
 
  DBMS_OUTPUT.PUT_LINE(&#39;dd = &#39; || TO_CHAR(dd));
 
  DBMS_OUTPUT.PUT_LINE(&#39;Before invoking procedure p:&#39;);
 
  DBMS_OUTPUT.PUT(&#39;ee = &#39;);
  DBMS_OUTPUT.PUT_LINE(NVL(TO_CHAR(ee), &#39;NULL&#39;));
 
  DBMS_OUTPUT.PUT_LINE(&#39;ff = &#39; || TO_CHAR(ff));
 
  p (1,        -- literal 
     (bb+3)*4, -- expression 
     ee,       -- uninitialized variable 
     ff        -- initialized variable
   );
 
  DBMS_OUTPUT.PUT_LINE(&#39;After invoking procedure p:&#39;);
 
  DBMS_OUTPUT.PUT(&#39;ee = &#39;);
  DBMS_OUTPUT.PUT_LINE(NVL(TO_CHAR(ee), &#39;NULL&#39;));
 
  DBMS_OUTPUT.PUT_LINE(&#39;ff = &#39; || TO_CHAR(ff));
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">Before invoking procedure p:
aa = 1
bb = 2
cc = 3
dd = 4.0E+000
Inside procedure p:
IN a = 1
IN b = 2
OUT c = NULL
IN OUT d = 4.0E+000
After invoking procedure p:
aa = 1
bb = 2
cc = 11
dd = 5.0E+000
Before invoking procedure p:
ee = NULL
ff = 5.0E+000
Inside procedure p:
IN a = 1
IN b = 20
OUT c = NULL
IN OUT d = 5.0E+000
After invoking procedure p:
ee = 11
ff = 5.0E-001
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-518B8827-26CC-4734-B799-ACB038185638__CHDBGIHE">
<p class="titleinexample">Example 8-15 OUT and IN OUT Parameter Values After Exception Handling</p>
<pre dir="ltr">DECLARE
  j  PLS_INTEGER  := 10;
  k  BINARY_FLOAT := 15;
BEGIN
  DBMS_OUTPUT.PUT_LINE(&#39;Before invoking procedure p:&#39;);
 
  DBMS_OUTPUT.PUT(&#39;j = &#39;);
  DBMS_OUTPUT.PUT_LINE(NVL(TO_CHAR(j), &#39;NULL&#39;));
 
  DBMS_OUTPUT.PUT_LINE(&#39;k = &#39; || TO_CHAR(k));
 
  p(4, 0, j, k);  -- causes p to exit with exception ZERO_DIVIDE
 
EXCEPTION
  WHEN ZERO_DIVIDE THEN
    DBMS_OUTPUT.PUT_LINE(&#39;After invoking procedure p:&#39;);
 
    DBMS_OUTPUT.PUT(&#39;j = &#39;);
    DBMS_OUTPUT.PUT_LINE(NVL(TO_CHAR(j), &#39;NULL&#39;));
 
    DBMS_OUTPUT.PUT_LINE(&#39;k = &#39; || TO_CHAR(k));
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">Before invoking procedure p:
j = 10
k = 1.5E+001
Inside procedure p:
IN a = 4
IN b = 0
OUT c = NULL
IN OUT d = 1.5E+001
After invoking procedure p:
j = 10
k = 1.5E+001
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-518B8827-26CC-4734-B799-ACB038185638__CHDJEJHG">
<p class="titleinexample">Example 8-16 OUT Formal Parameter of Record Type with Non-NULL Default Value</p>
<pre dir="ltr">CREATE OR REPLACE PACKAGE r_types AUTHID DEFINER IS
  TYPE r_type_1 IS RECORD (f VARCHAR2(5) := &#39;abcde&#39;);
  TYPE r_type_2 IS RECORD (f VARCHAR2(5));
END;
/
 
CREATE OR REPLACE PROCEDURE p (
  x OUT r_types.r_type_1,
  y OUT r_types.r_type_2,
  z OUT VARCHAR2) 
AUTHID CURRENT_USER IS
BEGIN
  DBMS_OUTPUT.PUT_LINE(&#39;x.f is &#39; || NVL(x.f,&#39;NULL&#39;));
  DBMS_OUTPUT.PUT_LINE(&#39;y.f is &#39; || NVL(y.f,&#39;NULL&#39;));
  DBMS_OUTPUT.PUT_LINE(&#39;z is &#39; || NVL(z,&#39;NULL&#39;));
END;
/
DECLARE
  r1 r_types.r_type_1;
  r2 r_types.r_type_2;
  s  VARCHAR2(5) := &#39;fghij&#39;;
BEGIN
  p (r1, r2, s);
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">x.f is abcde
y.f is NULL
z is NULL
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS569"></a><a id="LNPLS00815"></a>
<div class="props_rev_3"><a id="GUID-CB95955E-8843-4481-BB07-A52CA2FF4A8B"></a>
<h3 id="LNPLS-GUID-CB95955E-8843-4481-BB07-A52CA2FF4A8B" class="sect3">Subprogram Parameter Aliasing</h3>
<div>
<p><span class="bold">Aliasing</span> is having two different names for the same memory location. If a stored item is visible by more than one path, and you can change the item by one path, then you can see the change by all paths.</p>
<p>Subprogram parameter aliasing always occurs when the compiler passes an actual parameter by reference, and can also occur when a subprogram has cursor variable parameters.</p>
<div class="section">
<p class="subhead3">Topics</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="subprograms.htm#GUID-1D93EBAE-406B-45CE-B89F-A456E37415CB">Subprogram Parameter Aliasing with Parameters Passed by Reference</a></p>
</li>
<li>
<p><a href="subprograms.htm#GUID-2CCDEA03-F0ED-463A-BEC1-3F9430047692">Subprogram Parameter Aliasing with Cursor Variable Parameters</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="LNPLS695"></a><a id="LNPLS696"></a><a id="LNPLS99892"></a>
<div class="props_rev_3"><a id="GUID-1D93EBAE-406B-45CE-B89F-A456E37415CB"></a>
<h4 id="LNPLS-GUID-1D93EBAE-406B-45CE-B89F-A456E37415CB" class="sect4">Subprogram Parameter Aliasing with Parameters Passed by Reference</h4>
<div>
<p>When the compiler passes an actual parameter by reference, the actual and formal parameters refer to the same memory location. Therefore, if the subprogram changes the value of the formal parameter, the change shows immediately in the actual parameter.</p>
<p>The compiler always passes <code class="codeph">IN</code> parameters by reference, but the resulting aliasing cannot cause problems, because subprograms cannot assign values to <code class="codeph">IN</code> parameters.</p>
<p>The compiler <span class="italic">might</span> pass an <code class="codeph">OUT</code> or <code class="codeph">IN</code> <code class="codeph">OUT</code> parameter by reference, if you specify <code class="codeph">NOCOPY</code> for that parameter. <code class="codeph">NOCOPY</code> is only a hint&mdash;each time the subprogram is invoked, the compiler decides, silently, whether to obey or ignore <code class="codeph">NOCOPY</code>. Therefore, aliasing can occur for one invocation but not another, making subprogram results indeterminate. For example:</p>
<ul style="list-style-type: disc;">
<li>
<p>If the actual parameter is a global variable, then an assignment to the formal parameter <span class="italic">might</span> show in the global parameter (see <a href="subprograms.htm#GUID-1D93EBAE-406B-45CE-B89F-A456E37415CB__CIHBCCHI">Example 8-17</a>).</p>
</li>
<li>
<p>If the same variable is the actual parameter for two formal parameters, then an assignment to either formal parameter <span class="italic">might</span> show immediately in both formal parameters (see <a href="subprograms.htm#GUID-1D93EBAE-406B-45CE-B89F-A456E37415CB__CIHJIDAB">Example 8-18</a>).</p>
</li>
<li>
<p>If the actual parameter is a package variable, then an assignment to either the formal parameter or the package variable <span class="italic">might</span> show immediately in both the formal parameter and the package variable.</p>
</li>
<li>
<p>If the subprogram is exited with an unhandled exception, then an assignment to the formal parameter <span class="italic">might</span> show in the actual parameter.</p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-1D93EBAE-406B-45CE-B89F-A456E37415CB__GUID-3B9C9E03-5FF6-4CFE-84FF-D557A5B54EC5">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="formal_parameter.htm#GUID-5BA8E033-96B9-439A-A4FC-4844FEC14AD8__CJACJCGJ">NOCOPY</a>&#34;</span> for the cases in which the compiler always ignores <code class="codeph">NOCOPY</code></p>
</div>
<p>In <a href="subprograms.htm#GUID-1D93EBAE-406B-45CE-B89F-A456E37415CB__CIHBCCHI">Example 8-17</a>, the procedure has an <code class="codeph">IN</code> <code class="codeph">OUT</code> <code class="codeph">NOCOPY</code> formal parameter, to which it assigns the value <code class="codeph">&#39;aardvark&#39;</code>. The anonymous block assigns the value <code class="codeph">&#39;aardwolf&#39;</code> to a global variable and then passes the global variable to the procedure. If the compiler obeys the <code class="codeph">NOCOPY</code> hint, then the final value of the global variable is <code class="codeph">&#39;aardvark&#39;</code>. If the compiler ignores the <code class="codeph">NOCOPY</code> hint, then the final value of the global variable is <code class="codeph">&#39;aardwolf&#39;</code>.</p>
<p>In <a href="subprograms.htm#GUID-1D93EBAE-406B-45CE-B89F-A456E37415CB__CIHJIDAB">Example 8-18</a>, the procedure has an <code class="codeph">IN</code> parameter, an <code class="codeph">IN</code> <code class="codeph">OUT</code> parameter, and an <code class="codeph">IN</code> <code class="codeph">OUT</code> <code class="codeph">NOCOPY</code> parameter. The anonymous block invokes the procedure, using the same actual parameter, a global variable, for all three formal parameters. The procedure changes the value of the <code class="codeph">IN</code> <code class="codeph">OUT</code> parameter before it changes the value of the <code class="codeph">IN</code> <code class="codeph">OUT</code> <code class="codeph">NOCOPY</code> parameter. However, if the compiler obeys the <code class="codeph">NOCOPY</code> hint, then the latter change shows in the actual parameter immediately. The former change shows in the actual parameter after the procedure is exited successfully and control returns to the anonymous block.</p>
<div class="example" id="GUID-1D93EBAE-406B-45CE-B89F-A456E37415CB__CIHBCCHI">
<p class="titleinexample">Example 8-17 Aliasing from Global Variable as Actual Parameter</p>
<pre dir="ltr">DECLARE
  TYPE Definition IS RECORD (
    word     VARCHAR2(20),
    meaning  VARCHAR2(200)
  );

  TYPE Dictionary IS VARRAY(2000) OF Definition;

  lexicon  Dictionary := Dictionary();  -- global variable

  PROCEDURE add_entry (
    word_list IN OUT NOCOPY Dictionary  -- formal NOCOPY parameter
  ) IS
  BEGIN
    word_list(1).word := &#39;aardvark&#39;;
  END;

BEGIN
  lexicon.EXTEND;
  lexicon(1).word := &#39;aardwolf&#39;;
  <span class="bold">add_entry(lexicon);  -- global variable is actual parameter</span>
  DBMS_OUTPUT.PUT_LINE(lexicon(1).word);
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">aardvark
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-1D93EBAE-406B-45CE-B89F-A456E37415CB__CIHJIDAB">
<p class="titleinexample">Example 8-18 Aliasing from Same Actual Parameter for Multiple Formal Parameters</p>
<pre dir="ltr">DECLARE
  n NUMBER := 10;

  PROCEDURE p (
    n1 IN NUMBER,
    n2 IN OUT NUMBER,
    n3 IN OUT NOCOPY NUMBER
  ) IS
  BEGIN
    n2 := 20;  <span class="bold">-- actual parameter is 20 only after procedure succeeds</span>
    DBMS_OUTPUT.put_line(n1);  <span class="bold">-- actual parameter value is still 10</span>
    n3 := 30;  <span class="bold">-- might change actual parameter immediately</span>
    DBMS_OUTPUT.put_line(n1);  <span class="bold">-- actual parameter value is either 10 or 30</span>
  END;

BEGIN
  p(n, n, n);
  DBMS_OUTPUT.put_line(n);
END;
/
</pre>
<p>Result if the compiler obeys the <code class="codeph">NOCOPY</code> hint:</p>
<pre dir="ltr">10
30
20
</pre>
<p>Result if the compiler ignores the <code class="codeph">NOCOPY</code> hint:</p>
<pre dir="ltr">10
10
30
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS697"></a><a id="LNPLS99891"></a>
<div class="props_rev_3"><a id="GUID-2CCDEA03-F0ED-463A-BEC1-3F9430047692"></a>
<h4 id="LNPLS-GUID-2CCDEA03-F0ED-463A-BEC1-3F9430047692" class="sect4">Subprogram Parameter Aliasing with Cursor Variable Parameters</h4>
<div>
<p>Cursor variable parameters are pointers. Therefore, if a subprogram assigns one cursor variable parameter to another, they refer to the same memory location. This aliasing can have unintended results.</p>
<p>In <a href="subprograms.htm#GUID-2CCDEA03-F0ED-463A-BEC1-3F9430047692__CIHBIFGC">Example 8-19</a>, the procedure has two cursor variable parameters, <code class="codeph">emp_cv1</code> and <code class="codeph">emp_cv2</code>. The procedure opens <code class="codeph">emp_cv1</code> and assigns its value (which is a pointer) to <code class="codeph">emp_cv2</code>. Now <code class="codeph">emp_cv1</code> and <code class="codeph">emp_cv2</code> refer to the same memory location. When the procedure closes <code class="codeph">emp_cv1</code>, it also closes <code class="codeph">emp_cv2</code>. Therefore, when the procedure tries to fetch from <code class="codeph">emp_cv2</code>, PL/SQL raises an exception.</p>
<div class="example" id="GUID-2CCDEA03-F0ED-463A-BEC1-3F9430047692__CIHBIFGC">
<p class="titleinexample">Example 8-19 Aliasing from Cursor Variable Subprogram Parameters</p>
<pre dir="ltr">DECLARE
  TYPE EmpCurTyp IS REF CURSOR;
  c1 EmpCurTyp;
  c2 EmpCurTyp;

  PROCEDURE get_emp_data (
    emp_cv1 IN OUT EmpCurTyp,
    emp_cv2 IN OUT EmpCurTyp
  )
  IS
    emp_rec employees%ROWTYPE;
  BEGIN
    OPEN emp_cv1 FOR SELECT * FROM employees;
    <span class="bold">emp_cv2 := emp_cv1;  -- now both variables refer to same location</span>
    FETCH emp_cv1 INTO emp_rec;  -- fetches first row of employees
    FETCH emp_cv1 INTO emp_rec;  -- fetches second row of employees
    FETCH emp_cv2 INTO emp_rec;  -- fetches third row of employees
    <span class="bold">CLOSE emp_cv1;  -- closes both variables</span>
    <span class="bold">FETCH emp_cv2 INTO emp_rec; -- causes error when get_emp_data is invoked</span>
  END;
BEGIN
  get_emp_data(c1, c2);
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">DECLARE
*
ERROR at line 1:
ORA-01001: invalid cursor
ORA-06512: at line 19
ORA-06512: at line 22
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="LNPLS667"></a><a id="LNPLS668"></a><a id="LNPLS570"></a><a id="LNPLS666"></a>
<div class="props_rev_3"><a id="GUID-C1079955-95B2-4D0F-8928-649EDA355461"></a>
<h3 id="LNPLS-GUID-C1079955-95B2-4D0F-8928-649EDA355461" class="sect3">Default Values for IN Subprogram Parameters</h3>
<div>
<p>When you declare a formal <code class="codeph">IN</code> parameter, you can specify a default value for it. A formal parameter with a default value is called an <span class="bold">optional parameter</span>, because its corresponding actual parameter is optional in a subprogram invocation. If the actual parameter is omitted, then the invocation assigns the default value to the formal parameter. A formal parameter with no default value is called a <span class="bold">required parameter</span>, because its corresponding actual parameter is required in a subprogram invocation.</p>
<p>Omitting an actual parameter does not make the value of the corresponding formal parameter <code class="codeph">NULL</code>. To make the value of a formal parameter <code class="codeph">NULL</code>, specify <code class="codeph">NULL</code> as either the default value or the actual parameter.</p>
<p>In <a href="subprograms.htm#GUID-C1079955-95B2-4D0F-8928-649EDA355461__CIHICIAH">Example 8-20</a>, the procedure has one required parameter and two optional parameters.</p>
<p>In <a href="subprograms.htm#GUID-C1079955-95B2-4D0F-8928-649EDA355461__CIHICIAH">Example 8-20</a>, the procedure invocations specify the actual parameters in the same order as their corresponding formal parameters are declared&mdash;that is, the invocations use positional notation. Positional notation does not let you omit the second parameter of <code class="codeph">raise_salary</code> but specify the third; to do that, you must use either named or mixed notation. For more information, see <span class="q">&#34;<a href="subprograms.htm#GUID-A5DA8CF5-1BCC-4ABE-9B68-DB593FF1D2CC">Positional, Named, and Mixed Notation for Actual Parameters</a>&#34;</span>.</p>
<p>The default value of a formal parameter can be any expression whose value can be assigned to the parameter; that is, the value and parameter must have compatible data types. If a subprogram invocation specifies an actual parameter for the formal parameter, then that invocation does not evaluate the default value.</p>
<p>In <a href="subprograms.htm#GUID-C1079955-95B2-4D0F-8928-649EDA355461__G1782475">Example 8-21</a>, the procedure <code class="codeph">p</code> has a parameter whose default value is an invocation of the function <code class="codeph">f</code>. The function <code class="codeph">f</code> increments the value of a global variable. When <code class="codeph">p</code> is invoked without an actual parameter, <code class="codeph">p</code> invokes <code class="codeph">f</code>, and <code class="codeph">f</code> increments the global variable. When <code class="codeph">p</code> is invoked with an actual parameter, <code class="codeph">p</code> does not invoke <code class="codeph">f</code>, and value of the global variable does not change.</p>
<p><a href="subprograms.htm#GUID-C1079955-95B2-4D0F-8928-649EDA355461__CHDHECGF">Example 8-22</a> creates a procedure with two required parameters, invokes it, and then adds a third, optional parameter. Because the third parameter is optional, the original invocation remains valid.</p>
<div class="example" id="GUID-C1079955-95B2-4D0F-8928-649EDA355461__CIHICIAH">
<p class="titleinexample">Example 8-20 Procedure with Default Parameter Values</p>
<pre dir="ltr">DECLARE
  PROCEDURE raise_salary (
    emp_id IN employees.employee_id%TYPE,
    amount IN employees.salary%TYPE <span class="bold">:= 100</span>,
    extra  IN employees.salary%TYPE <span class="bold">:= 50</span>
  ) IS
  BEGIN
    UPDATE employees
    SET salary = salary + amount + extra
    WHERE employee_id = emp_id;
  END raise_salary;
 
BEGIN
  raise_salary(120);       -- same as raise_salary(120, <span class="bold">100</span>, <span class="bold">50</span>)
  raise_salary(121, 200);  -- same as raise_salary(121, 200, <span class="bold">50</span>)
END;
/
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-C1079955-95B2-4D0F-8928-649EDA355461__G1782475">
<p class="titleinexample">Example 8-21 Function Provides Default Parameter Value</p>
<pre dir="ltr">DECLARE
  global PLS_INTEGER := 0;
 
  FUNCTION f RETURN PLS_INTEGER IS
  BEGIN
    DBMS_OUTPUT.PUT_LINE(&#39;Inside f.&#39;);
    global := global + 1;
    RETURN global * 2;
  END f;
 
  PROCEDURE p (
    <span class="bold">x IN PLS_INTEGER := f()</span>
  ) IS
  BEGIN  
    DBMS_OUTPUT.PUT_LINE (
      &#39;Inside p. &#39; || 
      &#39;  global = &#39; || global ||
      &#39;, x = &#39; || x || &#39;.&#39;
    );
    DBMS_OUTPUT.PUT_LINE(&#39;--------------------------------&#39;);
  END p;
 
  PROCEDURE pre_p IS
  BEGIN
    DBMS_OUTPUT.PUT_LINE (
     &#39;Before invoking p,  global = &#39; || global || &#39;.&#39;
    );
    DBMS_OUTPUT.PUT_LINE(&#39;Invoking p.&#39;);
  END pre_p;
 
BEGIN
  pre_p;
  <span class="bold">p();     -- default expression is evaluated</span>
 
  pre_p;
  <span class="bold">p(100);  -- default expression is not evaluated</span>
 
  pre_p;
  <span class="bold">p();     -- default expression is evaluated</span>
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">Before invoking p,  global = 0.
Invoking p.
<span class="bold">Inside f.</span>
Inside p.   global = 1, x = 2.
--------------------------------
Before invoking p,  global = 1.
Invoking p.
Inside p.   global = 1, x = 100.
--------------------------------
Before invoking p,  global = 1.
Invoking p.
<span class="bold">Inside f.</span>
Inside p.   global = 2, x = 4.
--------------------------------
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-C1079955-95B2-4D0F-8928-649EDA355461__CHDHECGF">
<p class="titleinexample">Example 8-22 Adding Subprogram Parameter Without Changing Existing Invocations</p>
<p>Create procedure:</p>
<pre dir="ltr">CREATE OR REPLACE PROCEDURE print_name (
  first VARCHAR2,
  last VARCHAR2
) AUTHID DEFINER IS
BEGIN
  DBMS_OUTPUT.PUT_LINE(first || &#39; &#39; || last);
END print_name;
/
</pre>
<p>Invoke procedure:</p>
<pre dir="ltr">BEGIN
  print_name(&#39;John&#39;, &#39;Doe&#39;);
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">John Doe
</pre>
<p>Add third parameter with default value:</p>
<pre dir="ltr">CREATE OR REPLACE PROCEDURE print_name (
  first VARCHAR2,
  last VARCHAR2,
  <span class="bold">mi   VARCHAR2 := NULL</span>
) AUTHID DEFINER IS
BEGIN
  IF mi IS NULL THEN
    DBMS_OUTPUT.PUT_LINE(first || &#39; &#39; || last);
  ELSE
    DBMS_OUTPUT.PUT_LINE(first || &#39; &#39; || mi || &#39;. &#39; || last);
  END IF;
END print_name;
/
</pre>
<p>Invoke procedure:</p>
<pre dir="ltr">BEGIN
  print_name(&#39;John&#39;, &#39;Doe&#39;);          <span class="bold">-- original invocation</span>
  print_name(&#39;John&#39;, &#39;Public&#39;, &#39;Q&#39;);  <span class="bold">-- new invocation</span>
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">John Doe
John Q. Public
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS573"></a><a id="LNPLS670"></a><a id="LNPLS574"></a><a id="LNPLS00825"></a>
<div class="props_rev_3"><a id="GUID-A5DA8CF5-1BCC-4ABE-9B68-DB593FF1D2CC"></a>
<h3 id="LNPLS-GUID-A5DA8CF5-1BCC-4ABE-9B68-DB593FF1D2CC" class="sect3">Positional, Named, and Mixed Notation for Actual Parameters</h3>
<div>
<p>When invoking a subprogram, you can specify the actual parameters using either positional, named, or mixed notation. <a href="subprograms.htm#GUID-A5DA8CF5-1BCC-4ABE-9B68-DB593FF1D2CC__CHDBDFEH" title="This table summarizes and compares the PL/SQL subprogram parameter notations.">Table 8-3</a> summarizes and compares these notations.</p>
<div class="tblformalwide" id="GUID-A5DA8CF5-1BCC-4ABE-9B68-DB593FF1D2CC__CHDBDFEH">
<p class="titleintable">Table 8-3 PL/SQL Actual Parameter Notations</p>
<table class="cellalignment885" title="PL/SQL Actual Parameter Notations" summary="This table summarizes and compares the PL/SQL subprogram parameter notations.">
<thead>
<tr class="cellalignment870">
<th class="cellalignment894" id="d56434e3561">Notation</th>
<th class="cellalignment881" id="d56434e3563">Syntax</th>
<th class="cellalignment881" id="d56434e3566">Optional parameters</th>
<th class="cellalignment895" id="d56434e3569">Advantages</th>
<th class="cellalignment896" id="d56434e3572">Disadvantages</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment870">
<td class="cellalignment897" id="d56434e3577" headers="d56434e3561">
<p>Positional</p>
</td>
<td class="cellalignment883" headers="d56434e3577 d56434e3563">
<p>Specify the actual parameters in the same order as the formal parameters are declared.</p>
</td>
<td class="cellalignment883" headers="d56434e3577 d56434e3566">
<p>You can omit trailing optional parameters.</p>
</td>
<td class="cellalignment898" headers="d56434e3577 d56434e3569">&nbsp;</td>
<td class="cellalignment899" headers="d56434e3577 d56434e3572">
<p>Specifying actual parameters in the wrong order can cause problems that are hard to detect, especially if the actual parameters are literals.</p>
<p>Subprogram invocations must change if the formal parameter list changes, unless the list only acquires new trailing optional parameters (as in <a href="subprograms.htm#GUID-C1079955-95B2-4D0F-8928-649EDA355461__CHDHECGF">Example 8-22</a>).</p>
<p>Reduced code clarity and maintainability. Not recommended if the subprogram has a large number of parameters.</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment897" id="d56434e3597" headers="d56434e3561">
<p>Named</p>
</td>
<td class="cellalignment883" headers="d56434e3597 d56434e3563">
<p>Specify the actual parameters in any order, using this syntax:</p>
<pre dir="ltr"><span class="italic">formal</span> =&gt; <span class="italic">actual</span>
</pre>
<p><span class="italic"><code class="codeph">formal</code></span> is the name of the formal parameter and <span class="italic"><code class="codeph">actual</code></span> is the actual parameter.</p>
</td>
<td class="cellalignment883" headers="d56434e3597 d56434e3566">
<p>You can omit any optional parameters.</p>
</td>
<td class="cellalignment898" headers="d56434e3597 d56434e3569">
<p>There is no wrong order for specifying actual parameters.</p>
<p>Subprogram invocations must change only if the formal parameter list acquires new required parameters.</p>
<p>Recommended when you invoke a subprogram defined or maintained by someone else.</p>
</td>
<td class="cellalignment899" headers="d56434e3597 d56434e3572">&nbsp;</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment897" id="d56434e3630" headers="d56434e3561">
<p>Mixed</p>
</td>
<td class="cellalignment883" headers="d56434e3630 d56434e3563">
<p>Start with positional notation, then use named notation for the remaining parameters.</p>
</td>
<td class="cellalignment883" headers="d56434e3630 d56434e3566">
<p>In the positional notation, you can omit trailing optional parameters; in the named notation, you can omit any optional parameters.</p>
</td>
<td class="cellalignment898" headers="d56434e3630 d56434e3569">
<p>Convenient when you invoke a subprogram that has required parameters followed by optional parameters, and you must specify only a few of the optional parameters.</p>
</td>
<td class="cellalignment899" headers="d56434e3630 d56434e3572">
<p>In the positional notation, the wrong order can cause problems that are hard to detect, especially if the actual parameters are literals.</p>
<p>Changes to the formal parameter list might require changes in the positional notation.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>In <a href="subprograms.htm#GUID-A5DA8CF5-1BCC-4ABE-9B68-DB593FF1D2CC__CIHHBJDE">Example 8-23</a>, the procedure invocations use different notations, but are equivalent.</p>
<p>In <a href="subprograms.htm#GUID-A5DA8CF5-1BCC-4ABE-9B68-DB593FF1D2CC__CHDDBJGC">Example 8-24</a>, the SQL <code class="codeph">SELECT</code> statements invoke the PL/SQL function <code class="codeph">compute_bonus</code>, using equivalent invocations with different notations.</p>
<div class="example" id="GUID-A5DA8CF5-1BCC-4ABE-9B68-DB593FF1D2CC__CIHHBJDE">
<p class="titleinexample">Example 8-23 Equivalent Invocations with Different Notations in Anonymous Block</p>
<pre dir="ltr">DECLARE
  emp_num NUMBER(6) := 120;
  bonus   NUMBER(6) := 50;

  PROCEDURE raise_salary (
    emp_id NUMBER,
    amount NUMBER
  ) IS
  BEGIN
    UPDATE employees
    SET salary = salary + amount
    WHERE employee_id = emp_id;
  END raise_salary;

BEGIN
  <span class="bold">-- Equivalent invocations:</span>

  raise_salary(emp_num, bonus);                      <span class="bold">-- positional notation</span>
  raise_salary(amount =&gt; bonus, emp_id =&gt; emp_num);  <span class="bold">-- named notation</span>
  raise_salary(emp_id =&gt; emp_num, amount =&gt; bonus);  <span class="bold">-- named notation</span>
  raise_salary(emp_num, amount =&gt; bonus);            <span class="bold">-- mixed notation</span>
END;
/
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-A5DA8CF5-1BCC-4ABE-9B68-DB593FF1D2CC__CHDDBJGC">
<p class="titleinexample">Example 8-24 Equivalent Invocations with Different Notations in SELECT Statements</p>
<pre dir="ltr">CREATE OR REPLACE FUNCTION compute_bonus (
  emp_id NUMBER,
  bonus NUMBER
) RETURN NUMBER
  AUTHID DEFINER
IS
  emp_sal NUMBER;
BEGIN
  SELECT salary INTO emp_sal
  FROM employees
  WHERE employee_id = emp_id;

  RETURN emp_sal + bonus;
END compute_bonus;
/
SELECT compute_bonus(120, 50) FROM DUAL;                   <span class="bold">-- positional</span>
SELECT compute_bonus(bonus =&gt; 50, emp_id =&gt; 120) FROM DUAL; <span class="bold">-- named</span>
SELECT compute_bonus(120, bonus =&gt; 50) FROM DUAL;           <span class="bold">-- mixed</span>
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="LNPLS680"></a><a id="LNPLS681"></a><a id="LNPLS00808"></a>
<div class="props_rev_3"><a id="GUID-A7D51201-1711-4F33-827F-70042700801F"></a>
<h2 id="LNPLS-GUID-A7D51201-1711-4F33-827F-70042700801F" class="sect2">Subprogram Invocation Resolution</h2>
<div>
<p>When the PL/SQL compiler encounters a subprogram invocation, it searches for a matching subprogram declaration&mdash;first in the current scope and then, if necessary, in successive enclosing scopes.</p>
<p>A declaration and invocation match if their subprogram names and parameter lists match. The parameter lists match if each required formal parameter in the declaration has a corresponding actual parameter in the invocation.</p>
<p>If the compiler finds no matching declaration for an invocation, then it generates a semantic error.</p>
<p><a href="subprograms.htm#GUID-A7D51201-1711-4F33-827F-70042700801F__i19285">Figure 8-1</a> shows how the PL/SQL compiler resolves a subprogram invocation.</p>
<div class="figure" id="GUID-A7D51201-1711-4F33-827F-70042700801F__i19285">
<p class="titleinfigure">Figure 8-1 How PL/SQL Compiler Resolves Invocations</p>
<img width="319" height="633" src="img/lnpls012.gif" alt="Description of Figure 8-1 follows" title="Description of Figure 8-1 follows"/><br/>
<a href="img_text/lnpls012.htm">Description of &#34;Figure 8-1 How PL/SQL Compiler Resolves Invocations&#34;</a></div>
<!-- class="figure" -->
<p>In <a href="subprograms.htm#GUID-A7D51201-1711-4F33-827F-70042700801F__CHDECFCH">Example 8-25</a>, the function <code class="codeph">balance</code> tries to invoke the enclosing procedure <code class="codeph">swap</code>, using appropriate actual parameters. However, <code class="codeph">balance</code> contains two nested procedures named <code class="codeph">swap</code>, and neither has parameters of the same type as the enclosing procedure <code class="codeph">swap</code>. Therefore, the invocation causes compilation error PLS-00306.</p>
<div class="example" id="GUID-A7D51201-1711-4F33-827F-70042700801F__CHDECFCH">
<p class="titleinexample">Example 8-25 Resolving PL/SQL Procedure Names</p>
<pre dir="ltr">DECLARE
  PROCEDURE swap (
    n1 NUMBER,
    n2 NUMBER
  )
  IS
    <span class="bold">num1 NUMBER;</span>
    <span class="bold">num2 NUMBER;</span>

    FUNCTION balance
      (bal NUMBER)
      RETURN NUMBER
    IS
      x NUMBER := 10;

      PROCEDURE swap (
        d1 DATE,
        d2 DATE
      ) IS
      BEGIN
        NULL;
      END;

      PROCEDURE swap (
        b1 BOOLEAN,
        b2 BOOLEAN
      ) IS
      BEGIN
        NULL;
      END;

    BEGIN  -- balance
      <span class="bold">swap(num1, num2);</span>
      RETURN x;
    END balance;

  BEGIN  -- enclosing procedure swap
    NULL;
  END swap;

BEGIN  -- anonymous block
  NULL;
END;   -- anonymous block
/
</pre>
<p>Result:</p>
<pre dir="ltr">      swap(num1, num2);
      *
ERROR at line 33:
ORA-06550: line 33, column 7:
PLS-00306: wrong number or types of arguments in call to &#39;SWAP&#39;
ORA-06550: line 33, column 7:
PL/SQL: Statement ignored
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS576"></a><a id="LNPLS671"></a><a id="LNPLS00807"></a>
<div class="props_rev_3"><a id="GUID-47D5A50E-7AAF-4C80-A06A-37593EA2526A"></a>
<h2 id="LNPLS-GUID-47D5A50E-7AAF-4C80-A06A-37593EA2526A" class="sect2">Overloaded Subprograms</h2>
<div>
<p>PL/SQL lets you overload nested subprograms, package subprograms, and type methods. You can use the same name for several different subprograms if their formal parameters differ in name, number, order, or data type family. (A <span class="bold">data type family</span> is a data type and its subtypes. For the data type families of predefined PL/SQL data types, see <a href="predefined.htm#GUID-1D28B7B6-15AE-454A-8134-F8724551AE8B">PL/SQL Predefined Data Types</a>. For information about user-defined PL/SQL subtypes, see <span class="q">&#34;<a href="datatypes.htm#GUID-0E03C20F-2960-4ED9-8692-D4DCBF1F9670" title="PL/SQL lets you define your own subtypes.">User-Defined PL/SQL Subtypes</a>&#34;</span>.) If formal parameters differ only in name, then you must use named notation to specify the corresponding actual parameters. (For information about named notation, see <span class="q">&#34;<a href="subprograms.htm#GUID-A5DA8CF5-1BCC-4ABE-9B68-DB593FF1D2CC">Positional, Named, and Mixed Notation for Actual Parameters</a>&#34;</span>.)</p>
<p><a href="subprograms.htm#GUID-47D5A50E-7AAF-4C80-A06A-37593EA2526A__CIHFCEBD">Example 8-26</a> defines two subprograms with the same name, <code class="codeph">initialize</code>. The procedures initialize different types of collections. Because the processing in the procedures is the same, it is logical to give them the same name.</p>
<p>You can put the two <code class="codeph">initialize</code> procedures in the same block, subprogram, package, or type body. PL/SQL determines which procedure to invoke by checking their formal parameters. The version of <code class="codeph">initialize</code> that PL/SQL uses depends on whether you invoke the procedure with a <code class="codeph">date_tab_typ</code> or <code class="codeph">num_tab_typ</code> parameter.</p>
<p>For an example of an overloaded procedure in a package, see <a href="packages.htm#GUID-3A313D35-26B6-4A0D-A128-231692BCBC97__CJAIICFE">Example 10-9</a>.</p>
<div class="section">
<p class="subhead2">Topics</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="subprograms.htm#GUID-A12B503E-9F79-4C44-B221-83B475DE6D50">Formal Parameters that Differ Only in Numeric Data Type</a></p>
</li>
<li>
<p><a href="subprograms.htm#GUID-BE995DE8-6E36-4728-A2D3-2F8B8438D305">Subprograms that You Cannot Overload</a></p>
</li>
<li>
<p><a href="subprograms.htm#GUID-ACE7A3B5-CF77-47C7-ACAD-B2D7BC729D45">Subprogram Overload Errors</a></p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="example" id="GUID-47D5A50E-7AAF-4C80-A06A-37593EA2526A__CIHFCEBD">
<p class="titleinexample">Example 8-26 Overloaded Subprogram</p>
<pre dir="ltr">DECLARE
  TYPE date_tab_typ IS TABLE OF DATE   INDEX BY PLS_INTEGER;
  TYPE num_tab_typ  IS TABLE OF NUMBER INDEX BY PLS_INTEGER;

  hiredate_tab  date_tab_typ;
  sal_tab       num_tab_typ;

  PROCEDURE initialize (tab OUT <span class="bold">date_tab_typ</span>, n INTEGER) IS
  BEGIN
    DBMS_OUTPUT.PUT_LINE(&#39;Invoked first version&#39;);
    FOR i IN 1..n LOOP
      tab(i) := SYSDATE;
    END LOOP;
  END initialize;

  PROCEDURE initialize (tab OUT <span class="bold">num_tab_typ</span>, n INTEGER) IS
  BEGIN
    DBMS_OUTPUT.PUT_LINE(&#39;Invoked second version&#39;);
    FOR i IN 1..n LOOP
      tab(i) := 0.0;
    END LOOP;
  END initialize;

BEGIN
  <span class="bold">initialize(hiredate_tab, 50);</span>
  <span class="bold">initialize(sal_tab, 100);</span>
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr"><span class="bold">Invoked first version</span>
<span class="bold">Invoked second version</span>
</pre></div>
<!-- class="example" --></div>
<a id="LNPLS672"></a>
<div class="props_rev_3"><a id="GUID-A12B503E-9F79-4C44-B221-83B475DE6D50"></a>
<h3 id="LNPLS-GUID-A12B503E-9F79-4C44-B221-83B475DE6D50" class="sect3">Formal Parameters that Differ Only in Numeric Data Type</h3>
<div>
<p>You can overload subprograms if their formal parameters differ only in numeric data type. This technique is useful in writing mathematical application programming interfaces (APIs), because several versions of a function can use the same name, and each can accept a different numeric type. For example, a function that accepts <code class="codeph">BINARY_FLOAT</code> might be faster, while a function that accepts <code class="codeph">BINARY_DOUBLE</code> might be more precise.</p>
<p>To avoid problems or unexpected results when passing parameters to such overloaded subprograms:</p>
<ul style="list-style-type: disc;">
<li>
<p>Ensure that the expected version of a subprogram is invoked for each set of expected parameters.</p>
<p>For example, if you have overloaded functions that accept <code class="codeph">BINARY_FLOAT</code> and <code class="codeph">BINARY_DOUBLE</code>, which is invoked if you pass a <code class="codeph">VARCHAR2</code> literal like <code class="codeph">&#39;5.0&#39;</code>?</p>
</li>
<li>
<p>Qualify numeric literals and use conversion functions to make clear what the intended parameter types are.</p>
<p>For example, use literals such as <code class="codeph">5.0f</code> (for <code class="codeph">BINARY_FLOAT</code>), <code class="codeph">5.0d</code> (for <code class="codeph">BINARY_DOUBLE</code>), or conversion functions such as <code class="codeph">TO_BINARY_FLOAT</code>, <code class="codeph">TO_BINARY_DOUBLE</code>, and <code class="codeph">TO_NUMBER</code>.</p>
</li>
</ul>
<p>PL/SQL looks for matching numeric parameters in this order:</p>
<ol>
<li>
<p><code class="codeph">PLS_INTEGER</code> (or <code class="codeph">BINARY_INTEGER</code>, an identical data type)</p>
</li>
<li>
<p><code class="codeph">NUMBER</code></p>
</li>
<li>
<p><code class="codeph">BINARY_FLOAT</code></p>
</li>
<li>
<p><code class="codeph">BINARY_DOUBLE</code></p>
</li>
</ol>
<p>A <code class="codeph">VARCHAR2</code> value can match a <code class="codeph">NUMBER</code>, <code class="codeph">BINARY_FLOAT</code>, or <code class="codeph">BINARY_DOUBLE</code> parameter.</p>
<p>PL/SQL uses the first overloaded subprogram that matches the supplied parameters. For example, the <code class="codeph">SQRT</code> function takes a single parameter. There are overloaded versions that accept a <code class="codeph">NUMBER</code>, a <code class="codeph">BINARY_FLOAT</code>, or a <code class="codeph">BINARY_DOUBLE</code> parameter. If you pass a <code class="codeph">PLS_INTEGER</code> parameter, the first matching overload is the one with a <code class="codeph">NUMBER</code> parameter.</p>
<p>The <code class="codeph">SQRT</code> function that takes a <code class="codeph">NUMBER</code> parameter is likely to be slowest. To use a faster version, use the <code class="codeph">TO_BINARY_FLOAT</code> or <code class="codeph">TO_BINARY_DOUBLE</code> function to convert the parameter to another data type before passing it to the <code class="codeph">SQRT</code> function.</p>
<p>If PL/SQL must convert a parameter to another data type, it first tries to convert it to a higher data type. For example:</p>
<ul style="list-style-type: disc;">
<li>
<p>The <code class="codeph">ATAN2</code> function takes two parameters of the same type. If you pass parameters of different types&mdash;for example, one <code class="codeph">PLS_INTEGER</code> and one <code class="codeph">BINARY_FLOAT</code>&mdash;PL/SQL tries to find a match where both parameters use the higher type. In this case, that is the version of <code class="codeph">ATAN2</code> that takes two <code class="codeph">BINARY_FLOAT</code> parameters; the <code class="codeph">PLS_INTEGER</code> parameter is converted upwards.</p>
</li>
<li>
<p>A function takes two parameters of different types. One overloaded version takes a <code class="codeph">PLS_INTEGER</code> and a <code class="codeph">BINARY_FLOAT</code> parameter. Another overloaded version takes a <code class="codeph">NUMBER</code> and a <code class="codeph">BINARY_DOUBLE</code> parameter. If you invoke this function and pass two <code class="codeph">NUMBER</code> parameters, PL/SQL first finds the overloaded version where the second parameter is <code class="codeph">BINARY_FLOAT</code>. Because this parameter is a closer match than the <code class="codeph">BINARY_DOUBLE</code> parameter in the other overload, PL/SQL then looks downward and converts the first <code class="codeph">NUMBER</code> parameter to <code class="codeph">PLS_INTEGER</code>.</p>
</li>
</ul>
</div>
</div>
<a id="LNPLS673"></a>
<div class="props_rev_3"><a id="GUID-BE995DE8-6E36-4728-A2D3-2F8B8438D305"></a>
<h3 id="LNPLS-GUID-BE995DE8-6E36-4728-A2D3-2F8B8438D305" class="sect3">Subprograms that You Cannot Overload</h3>
<div>
<p>You cannot overload these subprograms:</p>
<ul style="list-style-type: disc;">
<li>
<p>Standalone subprograms</p>
</li>
<li>
<p>Subprograms whose formal parameters differ only in mode; for example:</p>
<pre dir="ltr">PROCEDURE s (p <span class="bold">IN</span>  VARCHAR2) IS ...
PROCEDURE s (p <span class="bold">OUT</span> VARCHAR2) IS ...
</pre></li>
<li>
<p>Subprograms whose formal parameters differ only in subtype; for example:</p>
<pre dir="ltr">PROCEDURE s (p <span class="bold">INTEGER</span>) IS ...
PROCEDURE s (p <span class="bold">REAL</span>) IS ...
</pre>
<p><code class="codeph">INTEGER</code> and <code class="codeph">REAL</code> are subtypes of <code class="codeph">NUMBER</code>, so they belong to the same data type family.</p>
</li>
<li>
<p>Functions that differ only in return value data type, even if the data types are in different families; for example:</p>
<pre dir="ltr">FUNCTION f (p INTEGER) RETURN <span class="bold">BOOLEAN</span> IS ...
FUNCTION f (p INTEGER) RETURN <span class="bold">INTEGER</span> IS ...
</pre></li>
</ul>
</div>
</div>
<a id="LNPLS675"></a><a id="LNPLS676"></a><a id="LNPLS677"></a><a id="LNPLS582"></a><a id="LNPLS584"></a><a id="LNPLS678"></a><a id="LNPLS679"></a><a id="LNPLS674"></a>
<div class="props_rev_3"><a id="GUID-ACE7A3B5-CF77-47C7-ACAD-B2D7BC729D45"></a>
<h3 id="LNPLS-GUID-ACE7A3B5-CF77-47C7-ACAD-B2D7BC729D45" class="sect3">Subprogram Overload Errors</h3>
<div>
<p>The PL/SQL compiler catches overload errors as soon as it determines that it cannot tell which subprogram was invoked. When subprograms have identical headings, the compiler catches the overload error when you try to compile the subprograms themselves (if they are nested) or when you try to compile the package specification that declares them. Otherwise, the compiler catches the error when you try to compile an ambiguous invocation of a subprogram.</p>
<p>When you try to compile the package specification in <a href="subprograms.htm#GUID-ACE7A3B5-CF77-47C7-ACAD-B2D7BC729D45__BABHJBBI">Example 8-27</a>, which declares subprograms with identical headings, you get compile-time error PLS-00305.</p>
<p>Although the package specification in <a href="subprograms.htm#GUID-ACE7A3B5-CF77-47C7-ACAD-B2D7BC729D45__BABEHEGI">Example 8-28</a> violates the rule that you cannot overload subprograms whose formal parameters differ only in subtype, you can compile it without error.</p>
<p>However, when you try to compile an invocation of <code class="codeph">pkg2</code>.<code class="codeph">s</code>, as in <a href="subprograms.htm#GUID-ACE7A3B5-CF77-47C7-ACAD-B2D7BC729D45__BABEBCCA">Example 8-29</a>, you get compile-time error PLS-00307.</p>
<p>Suppose that you correct the overload error in <a href="subprograms.htm#GUID-ACE7A3B5-CF77-47C7-ACAD-B2D7BC729D45__BABEHEGI">Example 8-28</a> by giving the formal parameters of the overloaded subprograms different names, as in <a href="subprograms.htm#GUID-ACE7A3B5-CF77-47C7-ACAD-B2D7BC729D45__CIHBEGCB">Example 8-30</a>.</p>
<p>Now you can compile an invocation of <code class="codeph">pkg2</code>.<code class="codeph">s</code> without error if you specify the actual parameter with named notation, as in <a href="subprograms.htm#GUID-ACE7A3B5-CF77-47C7-ACAD-B2D7BC729D45__CIHEEDIJ">Example 8-31</a>. (If you specify the actual parameter with positional notation, as in <a href="subprograms.htm#GUID-ACE7A3B5-CF77-47C7-ACAD-B2D7BC729D45__BABEBCCA">Example 8-29</a>, you still get compile-time error PLS-00307.)</p>
<p>The package specification in <a href="subprograms.htm#GUID-ACE7A3B5-CF77-47C7-ACAD-B2D7BC729D45__BABJDDCJ">Example 8-32</a> violates no overload rules and compiles without error. However, you can still get compile-time error PLS-00307 when invoking its overloaded procedure, as in the second invocation in <a href="subprograms.htm#GUID-ACE7A3B5-CF77-47C7-ACAD-B2D7BC729D45__BABHCIFC">Example 8-33</a>.</p>
<p>When trying to determine which subprogram was invoked, if the PL/SQL compiler implicitly converts one parameter to a matching type, then the compiler looks for other parameters that it can implicitly convert to matching types. If there is more than one match, then compile-time error PLS-00307 occurs, as in <a href="subprograms.htm#GUID-ACE7A3B5-CF77-47C7-ACAD-B2D7BC729D45__CHDECAHC">Example 8-34</a>.</p>
<div class="example" id="GUID-ACE7A3B5-CF77-47C7-ACAD-B2D7BC729D45__BABHJBBI">
<p class="titleinexample">Example 8-27 Overload Error Causes Compile-Time Error</p>
<pre dir="ltr">CREATE OR REPLACE PACKAGE pkg1 AUTHID DEFINER IS
  PROCEDURE s (p VARCHAR2);
  PROCEDURE s (p VARCHAR2);
END pkg1;
/
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-ACE7A3B5-CF77-47C7-ACAD-B2D7BC729D45__BABEHEGI">
<p class="titleinexample">Example 8-28 Overload Error Compiles Successfully</p>
<pre dir="ltr">CREATE OR REPLACE PACKAGE pkg2 AUTHID DEFINER IS
  SUBTYPE t1 IS VARCHAR2(10);
  SUBTYPE t2 IS VARCHAR2(10);
  PROCEDURE s (p <span class="bold">t1</span>);
  PROCEDURE s (p <span class="bold">t2</span>);
END pkg2;
/
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-ACE7A3B5-CF77-47C7-ACAD-B2D7BC729D45__BABEBCCA">
<p class="titleinexample">Example 8-29 Invoking Subprogram in <span><a href="subprograms.htm#GUID-ACE7A3B5-CF77-47C7-ACAD-B2D7BC729D45__BABEHEGI">Example 8-28</a></span> Causes Compile-Time Error</p>
<pre dir="ltr">CREATE OR REPLACE PROCEDURE p AUTHID DEFINER IS
  a pkg2.t1 := &#39;a&#39;;
BEGIN
  <span class="bold">pkg2.s(a);  -- Causes compile-time error PLS-00307</span>
END p;
/
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-ACE7A3B5-CF77-47C7-ACAD-B2D7BC729D45__CIHBEGCB">
<p class="titleinexample">Example 8-30 Correcting Overload Error in <span><a href="subprograms.htm#GUID-ACE7A3B5-CF77-47C7-ACAD-B2D7BC729D45__BABEHEGI">Example 8-28</a></span></p>
<pre dir="ltr">CREATE OR REPLACE PACKAGE pkg2 AUTHID DEFINER IS
  SUBTYPE t1 IS VARCHAR2(10);
  SUBTYPE t2 IS VARCHAR2(10);
  PROCEDURE s (<span class="bold">p1</span> t1);
  PROCEDURE s (<span class="bold">p2</span> t2);
END pkg2;
/
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-ACE7A3B5-CF77-47C7-ACAD-B2D7BC729D45__CIHEEDIJ">
<p class="titleinexample">Example 8-31 Invoking Subprogram in <span><a href="subprograms.htm#GUID-ACE7A3B5-CF77-47C7-ACAD-B2D7BC729D45__CIHBEGCB">Example 8-30</a></span></p>
<pre dir="ltr">CREATE OR REPLACE PROCEDURE p AUTHID DEFINER IS
  a pkg2.t1 := &#39;a&#39;;
BEGIN
  <span class="bold">pkg2.s(p1=&gt;a);  -- Compiles without error</span>
END p;
/
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-ACE7A3B5-CF77-47C7-ACAD-B2D7BC729D45__BABJDDCJ">
<p class="titleinexample">Example 8-32 Package Specification Without Overload Errors</p>
<pre dir="ltr">CREATE OR REPLACE PACKAGE pkg3 AUTHID DEFINER IS
  PROCEDURE s (p1 VARCHAR2);
  PROCEDURE s (p1 VARCHAR2, p2 VARCHAR2 := &#39;p2&#39;);
END pkg3;
/
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-ACE7A3B5-CF77-47C7-ACAD-B2D7BC729D45__BABHCIFC">
<p class="titleinexample">Example 8-33 Improper Invocation of Properly Overloaded Subprogram</p>
<pre dir="ltr">CREATE OR REPLACE PROCEDURE p AUTHID DEFINER IS
  a1 VARCHAR2(10) := &#39;a1&#39;;
  a2 VARCHAR2(10) := &#39;a2&#39;;
BEGIN
  <span class="bold">pkg3.s(p1=&gt;a1, p2=&gt;a2);  -- Compiles without error</span>
  <span class="bold">pkg3.s(p1=&gt;a1);          -- Causes compile-time error PLS-00307</span>
END p;
/
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-ACE7A3B5-CF77-47C7-ACAD-B2D7BC729D45__CHDECAHC">
<p class="titleinexample">Example 8-34 Implicit Conversion of Parameters Causes Overload Error</p>
<pre dir="ltr">CREATE OR REPLACE PACKAGE pack1 AUTHID DEFINER AS
  PROCEDURE proc1 (a NUMBER, b VARCHAR2);
  PROCEDURE proc1 (a NUMBER, b NUMBER);
END;
/
CREATE OR REPLACE PACKAGE BODY pack1 AS
  PROCEDURE proc1 (a NUMBER, b VARCHAR2) IS BEGIN NULL; END;
  PROCEDURE proc1 (a NUMBER, b NUMBER) IS BEGIN NULL; END;
END;
/
BEGIN
  <span class="bold">pack1.proc1(1,&#39;2&#39;);    -- Compiles without error</span>
  <span class="bold">pack1.proc1(1,2);      -- Compiles without error</span>
  <span class="bold">pack1.proc1(&#39;1&#39;,&#39;2&#39;);  -- Causes compile-time error PLS-00307</span>
  <span class="bold">pack1.proc1(&#39;1&#39;,2);    -- Causes compile-time error PLS-00307</span>
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="LNPLS585"></a><a id="LNPLS586"></a><a id="LNPLS00810"></a>
<div class="props_rev_3"><a id="GUID-E093EF16-0477-44B4-B3E2-37D7CEF4F25C"></a>
<h2 id="LNPLS-GUID-E093EF16-0477-44B4-B3E2-37D7CEF4F25C" class="sect2">Recursive Subprograms</h2>
<div>
<p>A <span class="bold">recursive subprogram</span> invokes itself. Recursion is a powerful technique for simplifying an algorithm.</p>
<p>A recursive subprogram must have at least two execution paths&mdash;one leading to the recursive invocation and one leading to a terminating condition. Without the latter, recursion continues until PL/SQL runs out of memory and raises the predefined exception <code class="codeph">STORAGE_ERROR</code>.</p>
<p>In <a href="subprograms.htm#GUID-E093EF16-0477-44B4-B3E2-37D7CEF4F25C__CHDGEBJC">Example 8-35</a>, the function implements the following recursive definition of <span class="italic">n</span> factorial (<span class="italic">n!</span>), the product of all integers from 1 to <span class="italic">n</span>:</p>
<pre dir="ltr">n! = n * (n - 1)!
</pre>
<p>In <a href="subprograms.htm#GUID-E093EF16-0477-44B4-B3E2-37D7CEF4F25C__CHDBEFAJ">Example 8-36</a>, the function returns the <span class="italic">n</span>th Fibonacci number, which is the sum of the <span class="italic">n</span>-1st and <span class="italic">n</span>-2nd Fibonacci numbers. The first and second Fibonacci numbers are zero and one, respectively.</p>
<div class="infobox-note" id="GUID-E093EF16-0477-44B4-B3E2-37D7CEF4F25C__GUID-A5894BD6-E58C-4D9E-8643-29EBDE18F4A3">
<p class="notep1">Note:</p>
<p>The function in <a href="subprograms.htm#GUID-E093EF16-0477-44B4-B3E2-37D7CEF4F25C__CHDBEFAJ">Example 8-36</a> is a good candidate for result caching. For more information, see <span class="q">&#34;<a href="subprograms.htm#GUID-EA53AF86-8BC6-467C-9FFA-968D45B63D17">Result-Cached Recursive Function</a>&#34;</span>.</p>
</div>
<p>Each recursive invocation of a subprogram creates an instance of each item that the subprogram declares and each SQL statement that it executes.</p>
<p>A recursive invocation inside a cursor <code class="codeph">FOR</code> <code class="codeph">LOOP</code> statement, or between an <code class="codeph">OPEN</code> or <code class="codeph">OPEN</code> <code class="codeph">FOR</code> statement and a <code class="codeph">CLOSE</code> statement, opens another cursor at each invocation, which might cause the number of open cursors to exceed the limit set by the database initialization parameter <code class="codeph">OPEN_CURSORS</code>.</p>
<div class="example" id="GUID-E093EF16-0477-44B4-B3E2-37D7CEF4F25C__CHDGEBJC">
<p class="titleinexample">Example 8-35 Recursive Function Returns n Factorial (n!)</p>
<pre dir="ltr">CREATE OR REPLACE FUNCTION factorial (
  n POSITIVE
) RETURN POSITIVE
  AUTHID DEFINER
IS
BEGIN
  IF <span class="bold">n = 1</span> THEN                 <span class="bold">-- terminating condition</span>
    RETURN n;
  ELSE
    RETURN n * <span class="bold">factorial(n-1</span>);  <span class="bold">-- recursive invocation</span>
  END IF;
END;
/
BEGIN
  FOR i IN 1..5 LOOP
    DBMS_OUTPUT.PUT_LINE(i || &#39;! = &#39; || <span class="bold">factorial(i)</span>);
  END LOOP;
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">1! = 1
2! = 2
3! = 6
4! = 24
5! = 120
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-E093EF16-0477-44B4-B3E2-37D7CEF4F25C__CHDBEFAJ">
<p class="titleinexample">Example 8-36 Recursive Function Returns nth Fibonacci Number</p>
<pre dir="ltr">CREATE OR REPLACE FUNCTION fibonacci (
  n PLS_INTEGER
) RETURN PLS_INTEGER
  AUTHID DEFINER
IS
  fib_1 PLS_INTEGER := 0;
  fib_2 PLS_INTEGER := 1;
BEGIN
  IF <span class="bold">n = 1</span> THEN                              <span class="bold">-- terminating condition</span>
    RETURN fib_1;
  ELSIF <span class="bold">n = 2</span> THEN
    RETURN fib_2;                           <span class="bold">-- terminating condition</span>
  ELSE
    RETURN <span class="bold">fibonacci(n-2)</span> + <span class="bold">fibonacci(n-1)</span>;  <span class="bold">-- recursive invocations</span>
  END IF;
END;
/
BEGIN
  FOR i IN 1..10 LOOP
    DBMS_OUTPUT.PUT(<span class="bold">fibonacci(i)</span>);
    IF i &lt; 10 THEN
      DBMS_OUTPUT.PUT(&#39;, &#39;);
    END IF;
  END LOOP;
 
  DBMS_OUTPUT.PUT_LINE(&#39; ...&#39;);
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">0, 1, 1, 2, 3, 5, 8, 13, 21, 34 ...
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS00814"></a>
<div class="props_rev_3"><a id="GUID-6C6A828F-8FA0-4278-97D2-6D5649A66A9A"></a>
<h2 id="LNPLS-GUID-6C6A828F-8FA0-4278-97D2-6D5649A66A9A" class="sect2">Subprogram Side Effects</h2>
<div>
<p>A subprogram has side effects if it changes anything except the values of its own local variables. For example, a subprogram that changes any of the following has side effects:</p>
<ul style="list-style-type: disc;">
<li>
<p>Its own <code class="codeph">OUT</code> or <code class="codeph">IN</code> <code class="codeph">OUT</code> parameter</p>
</li>
<li>
<p>A global variable</p>
</li>
<li>
<p>A public variable in a package</p>
</li>
<li>
<p>A database table</p>
</li>
<li>
<p>The database</p>
</li>
<li>
<p>The external state (by invoking <code class="codeph">DBMS_OUTPUT</code> or sending e‐mail, for example)</p>
</li>
</ul>
<p>Side effects can prevent the parallelization of a query, yield order-dependent (and therefore, indeterminate) results, or require that package state be maintained across user sessions.</p>
<p>Minimizing side effects is especially important when defining a result-cached function or a stored function for SQL statements to invoke.</p>
<div class="infoboxnotealso" id="GUID-6C6A828F-8FA0-4278-97D2-6D5649A66A9A__GUID-C58A4B34-6043-4D84-99FB-EC39A405762B">
<p class="notep1">See Also:</p>
<p><a class="olink ADFNS384" target="_blank" href="../ADFNS/adfns_packages.htm#ADFNS384"><span class="italic">Oracle Database Development Guide</span></a> for information about controlling side effects in PL/SQL functions invoked from SQL statements</p>
</div>
</div>
</div>
<a id="LNPLS587"></a><a id="LNPLS00817"></a>
<div class="props_rev_3"><a id="GUID-250BDBBB-0CD6-4D56-9DDF-6FCEDC110D00"></a>
<h2 id="LNPLS-GUID-250BDBBB-0CD6-4D56-9DDF-6FCEDC110D00" class="sect2">PL/SQL Function Result Cache</h2>
<div>
<p>The PL/SQL function result caching mechanism provides a language-supported and system-managed way to cache the results of PL/SQL functions in a shared global area (SGA), which is available to every session that runs your application. The caching mechanism is both efficient and easy to use, and relieves you of the burden of designing and developing your own caches and cache-management policies.</p>
<p>When a result-cached function is invoked, the system checks the cache. If the cache contains the result from a previous invocation of the function with the same parameter values, the system returns the cached result to the invoker and does not re-execute the function body. If the cache does not contain the result, the system runs the function body and adds the result (for these parameter values) to the cache before returning control to the invoker.</p>
<div class="infobox-note" id="GUID-250BDBBB-0CD6-4D56-9DDF-6FCEDC110D00__GUID-FF1E36B6-A2D2-41DA-8110-70E431B45EDB">
<p class="notep1">Note:</p>
<p>If function execution results in an unhandled exception, the exception result is not stored in the cache.</p>
</div>
<p>The cache can accumulate very many results&mdash;one result for every unique combination of parameter values with which each result-cached function was invoked. If the system needs more memory, it <span class="bold">ages out</span> (deletes) one or more cached results.</p>
<p>Oracle Database automatically detects all data sources (tables and views) that are queried while a result-cached function is running. If changes to any of these data sources are committed, the cached result becomes invalid and must be recomputed. The best candidates for result-caching are functions that are invoked frequently but depend on information that changes infrequently or never.</p>
<div class="section">
<p class="subhead2">Topics</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="subprograms.htm#GUID-4389252A-5F5F-45FD-9D5B-24F7358BB42D">Enabling Result-Caching for a Function</a></p>
</li>
<li>
<p><a href="subprograms.htm#GUID-E7506691-0AF7-4907-8DCA-4119D956027A">Developing Applications with Result-Cached Functions</a></p>
</li>
<li>
<p><a href="subprograms.htm#GUID-72DC4B02-9AB6-4AE1-9EE0-EB00E73BB490">Restrictions on Result-Cached Functions</a></p>
</li>
<li>
<p><a href="subprograms.htm#GUID-0F00DAC5-8F3D-426F-BBA4-86424CD7BD75">Examples of Result-Cached Functions</a></p>
</li>
<li>
<p><a href="subprograms.htm#GUID-267D2E0E-18B1-4815-9903-965C1B4A5A1B">Advanced Result-Cached Function Topics</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="LNPLS699"></a><a id="LNPLS698"></a>
<div class="props_rev_3"><a id="GUID-4389252A-5F5F-45FD-9D5B-24F7358BB42D"></a>
<h3 id="LNPLS-GUID-4389252A-5F5F-45FD-9D5B-24F7358BB42D" class="sect3">Enabling Result-Caching for a Function</h3>
<div>
<div class="section">
<p>To make a function result-cached, include the <code class="codeph">RESULT_CACHE</code> clause in the function declaration and definition. For syntax details, see <span class="q">&#34;<a href="function.htm#GUID-4E19FB09-46B5-4CE5-8A5B-CD815C29DA1C">Function Declaration and Definition</a>&#34;</span>.</p>
<div class="infobox-note" id="GUID-4389252A-5F5F-45FD-9D5B-24F7358BB42D__GUID-F15FCB31-0C35-4D40-9BD3-212CD09CB58A">
<p class="notep1">Note:</p>
<p>For more information about configuring and managing the database server result cache, see <a class="olink REFRN10270" target="_blank" href="../REFRN/GUID-DEC2BDE4-8CF4-4378-A04C-6EE50A0FA250.htm#REFRN10270"><span class="italic">Oracle Database Reference</span></a> and <a class="olink TGDBA640" target="_blank" href="../TGDBA/tune_result_cache.htm#TGDBA640"><span class="italic">Oracle Database Performance Tuning Guide</span></a>.</p>
</div>
<p>In <a href="subprograms.htm#GUID-4389252A-5F5F-45FD-9D5B-24F7358BB42D__G3307801">Example 8-37</a>, the package <code class="codeph">department_pkg</code> declares and then defines a result-cached function, <code class="codeph">get_dept_info</code>, which returns a record of information about a given department. The function depends on the database tables <code class="codeph">DEPARTMENTS</code> and <code class="codeph">EMPLOYEES</code>.</p>
<p>You invoke the function <code class="codeph">get_dept_info</code> as you invoke any function. For example, this invocation returns a record of information about department number 10:</p>
<pre dir="ltr">department_pkg.get_dept_info(10);
</pre>
<p>This invocation returns only the name of department number 10:</p>
<pre dir="ltr">department_pkg.get_dept_info(10).dept_name;
</pre>
<p>If the result for <code class="codeph">get_dept_info(10)</code> is in the result cache, the result is returned from the cache; otherwise, the result is computed and added to the cache. Because <code class="codeph">get_dept_info</code> depends on the <code class="codeph">DEPARTMENTS</code> and <code class="codeph">EMPLOYEES</code> tables, any committed change to <code class="codeph">DEPARTMENTS</code> or <code class="codeph">EMPLOYEES</code> invalidates all cached results for <code class="codeph">get_dept_info</code>, relieving you of programming cache invalidation logic everywhere that <code class="codeph">DEPARTMENTS</code> or <code class="codeph">EMPLOYEES</code> might change.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-4389252A-5F5F-45FD-9D5B-24F7358BB42D__G3307801">
<p class="titleinexample">Example 8-37 Declaring and Defining Result-Cached Function</p>
<pre dir="ltr">CREATE OR REPLACE PACKAGE department_pkg AUTHID DEFINER IS
 
  TYPE dept_info_record IS RECORD (
    dept_name  departments.department_name%TYPE,
    mgr_name   employees.last_name%TYPE,
    dept_size  PLS_INTEGER
  );
 
  <span class="bold">-- Function declaration</span>
 
  FUNCTION get_dept_info (dept_id NUMBER)
    RETURN dept_info_record
    <span class="bold">RESULT_CACHE</span>;
 
END department_pkg;
/
CREATE OR REPLACE PACKAGE BODY department_pkg IS
  <span class="bold">-- Function definition</span>
  FUNCTION get_dept_info (dept_id NUMBER)
    RETURN dept_info_record
    <span class="bold">RESULT_CACHE</span>
  IS
    rec  dept_info_record;
  BEGIN
    SELECT department_name INTO rec.dept_name
    FROM departments
    WHERE department_id = dept_id;
 
    SELECT e.last_name INTO rec.mgr_name
    FROM departments d, employees e
    WHERE d.department_id = dept_id
    AND d.manager_id = e.employee_id;
 
    SELECT COUNT(*) INTO rec.dept_size
    FROM EMPLOYEES
    WHERE department_id = dept_id;
 
    RETURN rec;
  END get_dept_info;
END department_pkg;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS700"></a>
<div class="props_rev_3"><a id="GUID-E7506691-0AF7-4907-8DCA-4119D956027A"></a>
<h3 id="LNPLS-GUID-E7506691-0AF7-4907-8DCA-4119D956027A" class="sect3">Developing Applications with Result-Cached Functions</h3>
<div>
<div class="section">
<p>When developing an application that uses a result-cached function, make no assumptions about the number of times the body of the function will run for a given set of parameter values.</p>
<p>Some situations in which the body of a result-cached function runs are:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>The first time a session on this database instance invokes the function with these parameter values</p>
</li>
<li>
<p>When the cached result for these parameter values is <span class="bold">invalid</span></p>
<p>When a change to any data source on which the function depends is committed, the cached result becomes invalid.</p>
</li>
<li>
<p>When the cached results for these parameter values have aged out</p>
<p>If the system needs memory, it might discard the oldest cached values.</p>
</li>
<li>
<p>When the function bypasses the cache (see <span class="q">&#34;<a href="subprograms.htm#GUID-F9B72877-32FB-43B3-8E95-63DC29BA276E">Result Cache Bypass</a>&#34;</span>)</p>
</li>
</ul>
</div>
<!-- class="section" --></div>
</div>
<a id="LNPLS701"></a>
<div class="props_rev_3"><a id="GUID-72DC4B02-9AB6-4AE1-9EE0-EB00E73BB490"></a>
<h3 id="LNPLS-GUID-72DC4B02-9AB6-4AE1-9EE0-EB00E73BB490" class="sect3">Restrictions on Result-Cached Functions</h3>
<div>
<p>To be result-cached, a function must meet all of these criteria:</p>
<ul style="list-style-type: disc;">
<li>
<p>It is not defined in an anonymous block.</p>
</li>
<li>
<p>It is not a pipelined table function.</p>
</li>
<li>
<p>It does not reference dictionary tables, temporary tables, sequences, or nondeterministic SQL functions.</p>
<p>For more information, see <a class="olink TGDBA642" target="_blank" href="../TGDBA/tune_result_cache.htm#TGDBA642"><span class="italic">Oracle Database Performance Tuning Guide</span></a>.</p>
</li>
<li>
<p>It has no <code class="codeph">OUT</code> or <code class="codeph">IN</code> <code class="codeph">OUT</code> parameters.</p>
</li>
<li>
<p>No <code class="codeph">IN</code> parameter has one of these types:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">BLOB</code></p>
</li>
<li>
<p><code class="codeph">CLOB</code></p>
</li>
<li>
<p><code class="codeph">NCLOB</code></p>
</li>
<li>
<p><code class="codeph">REF</code> <code class="codeph">CURSOR</code></p>
</li>
<li>
<p>Collection</p>
</li>
<li>
<p>Object</p>
</li>
<li>
<p>Record</p>
</li>
</ul>
</li>
<li>
<p>The return type is none of these:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">BLOB</code></p>
</li>
<li>
<p><code class="codeph">CLOB</code></p>
</li>
<li>
<p><code class="codeph">NCLOB</code></p>
</li>
<li>
<p><code class="codeph">REF</code> <code class="codeph">CURSOR</code></p>
</li>
<li>
<p>Object</p>
</li>
<li>
<p>Record or PL/SQL collection that contains an unsupported return type</p>
</li>
</ul>
</li>
</ul>
<p>It is recommended that a result-cached function also meet these criteria:</p>
<ul style="list-style-type: disc;">
<li>
<p>It has no side effects.</p>
<p>For information about side effects, see <span class="q">&#34;<a href="subprograms.htm#GUID-6C6A828F-8FA0-4278-97D2-6D5649A66A9A">Subprogram Side Effects</a>&#34;</span>.</p>
</li>
<li>
<p>It does not depend on session-specific settings.</p>
<p>For more information, see <span class="q">&#34;<a href="subprograms.htm#GUID-3A24DD0F-DC69-43B7-A820-0950D86AB9AB">Making Result-Cached Functions Handle Session-Specific Settings</a>&#34;</span>.</p>
</li>
<li>
<p>It does not depend on session-specific application contexts.</p>
<p>For more information, see <span class="q">&#34;<a href="subprograms.htm#GUID-F14A3A45-C880-4175-B42D-55EFB29EDEAE">Making Result-Cached Functions Handle Session-Specific Application Contexts</a>&#34;</span>.</p>
</li>
</ul>
</div>
</div>
<a id="LNPLS702"></a>
<div class="props_rev_3"><a id="GUID-0F00DAC5-8F3D-426F-BBA4-86424CD7BD75"></a>
<h3 id="LNPLS-GUID-0F00DAC5-8F3D-426F-BBA4-86424CD7BD75" class="sect3">Examples of Result-Cached Functions</h3>
<div>
<p>The best candidates for result-caching are functions that are invoked frequently but depend on information that changes infrequently (as might be the case in the first example). Result-caching avoids redundant computations in recursive functions.</p>
<p>Examples:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="subprograms.htm#GUID-801471B1-3CBC-469C-AF7D-6820F3E51A78">Result-Cached Application Configuration Parameters</a></p>
</li>
<li>
<p><a href="subprograms.htm#GUID-EA53AF86-8BC6-467C-9FFA-968D45B63D17">Result-Cached Recursive Function</a></p>
</li>
</ul>
</div>
<a id="LNPLS704"></a><a id="LNPLS703"></a>
<div class="props_rev_3"><a id="GUID-801471B1-3CBC-469C-AF7D-6820F3E51A78"></a>
<h4 id="LNPLS-GUID-801471B1-3CBC-469C-AF7D-6820F3E51A78" class="sect4">Result-Cached Application Configuration Parameters</h4>
<div>
<p>Consider an application that has configuration parameters that can be set at either the global level, the application level, or the role level. The application stores the configuration information in these tables:</p>
<pre dir="ltr">-- Global Configuration Settings
DROP TABLE global_config_params;
CREATE TABLE global_config_params
  (name  VARCHAR2(20), -- parameter NAME
   val   VARCHAR2(20), -- parameter VALUE
   PRIMARY KEY (name)
  );

-- Application-Level Configuration Settings
CREATE TABLE app_level_config_params
  (app_id  VARCHAR2(20), -- application ID
   name    VARCHAR2(20), -- parameter NAME
   val     VARCHAR2(20), -- parameter VALUE
   PRIMARY KEY (app_id, name)
  );

-- Role-Level Configuration Settings
CREATE TABLE role_level_config_params
  (role_id  VARCHAR2(20), -- application (role) ID
   name     VARCHAR2(20),  -- parameter NAME
   val      VARCHAR2(20),  -- parameter VALUE
   PRIMARY KEY (role_id, name)
  );
</pre>
<p>For each configuration parameter, the role-level setting overrides the application-level setting, which overrides the global setting. To determine which setting applies to a parameter, the application defines the PL/SQL function <code class="codeph">get_value</code>. Given a parameter name, application ID, and role ID, <code class="codeph">get_value</code> returns the setting that applies to the parameter.</p>
<p>The function <code class="codeph">get_value</code> is a good candidate for result-caching if it is invoked frequently and if the configuration information changes infrequently.</p>
<p><a href="subprograms.htm#GUID-801471B1-3CBC-469C-AF7D-6820F3E51A78__g3299007">Example 8-38</a> shows a possible definition for <code class="codeph">get_value</code>. Suppose that for one set of parameter values, the global setting determines the result of <code class="codeph">get_value</code>. While <code class="codeph">get_value</code> is running, the database detects that three tables are queried&mdash;<code class="codeph">role_level_config_params</code>, <code class="codeph">app_level_config_params</code>, and <code class="codeph">global_config_params</code>. If a change to any of these three tables is committed, the cached result for this set of parameter values is invalidated and must be recomputed.</p>
<p>Now suppose that, for a second set of parameter values, the role-level setting determines the result of <code class="codeph">get_value</code>. While <code class="codeph">get_value</code> is running, the database detects that only the <code class="codeph">role_level_config_params</code> table is queried. If a change to <code class="codeph">role_level_config_params</code> is committed, the cached result for the second set of parameter values is invalidated; however, committed changes to <code class="codeph">app_level_config_params</code> or <code class="codeph">global_config_params</code> do not affect the cached result.</p>
<div class="example" id="GUID-801471B1-3CBC-469C-AF7D-6820F3E51A78__g3299007">
<p class="titleinexample">Example 8-38 Result-Cached Function Returns Configuration Parameter Setting</p>
<pre dir="ltr">CREATE OR REPLACE FUNCTION get_value
  (p_param VARCHAR2,
   p_app_id  NUMBER,
   p_role_id NUMBER
  )
  RETURN VARCHAR2
  <span class="bold">RESULT_CACHE</span>
  AUTHID DEFINER
IS
  answer VARCHAR2(20);
BEGIN
  <span class="bold">-- Is parameter set at role level?</span>
  BEGIN
    SELECT val INTO answer
      FROM <span class="bold">role_level_config_params</span>
        WHERE role_id = p_role_id
          AND name = p_param;
    RETURN answer;  -- Found
    EXCEPTION
      WHEN no_data_found THEN
        NULL;  -- Fall through to following code
  END;
 <span class="bold"> -- Is parameter set at application level?</span>
  BEGIN
    SELECT val INTO answer
      FROM <span class="bold">app_level_config_params</span>
        WHERE app_id = p_app_id
          AND name = p_param;
    RETURN answer;  -- Found
    EXCEPTION
      WHEN no_data_found THEN
        NULL;  -- Fall through to following code
  END;
 <span class="bold"> -- Is parameter set at global level?</span>
    SELECT val INTO answer
     FROM <span class="bold">global_config_params</span>
      WHERE name = p_param;
    RETURN answer;
END;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS705"></a>
<div class="props_rev_3"><a id="GUID-EA53AF86-8BC6-467C-9FFA-968D45B63D17"></a>
<h4 id="LNPLS-GUID-EA53AF86-8BC6-467C-9FFA-968D45B63D17" class="sect4">Result-Cached Recursive Function</h4>
<div>
<p>A recursive function for finding the <span class="italic">n</span>th term of a Fibonacci series that mirrors the mathematical definition of the series might do many redundant computations. For example, to evaluate <code class="codeph">fibonacci(7)</code>, the function must compute <code class="codeph">fibonacci(6)</code> and <code class="codeph">fibonacci(5)</code>. To compute <code class="codeph">fibonacci(6)</code>, the function must compute <code class="codeph">fibonacci(5)</code> and <code class="codeph">fibonacci(4)</code>. Therefore, <code class="codeph">fibonacci(5)</code> and several other terms are computed redundantly. Result-caching avoids these redundant computations.</p>
<div class="infobox-note" id="GUID-EA53AF86-8BC6-467C-9FFA-968D45B63D17__GUID-90390B78-AF0E-44EF-BF5C-DD889BCCE4F4">
<p class="notep1">Note:</p>
<p>The maximum number of recursive invocations cached is 128.</p>
</div>
<pre dir="ltr">CREATE OR REPLACE FUNCTION fibonacci (n NUMBER)
  RETURN NUMBER
  <span class="bold">RESULT_CACHE</span>
  AUTHID DEFINER
IS
BEGIN
  IF (n =0) OR (n =1) THEN
    RETURN 1;
  ELSE
    RETURN fibonacci(n - 1) + fibonacci(n - 2);
  END IF;
END;
/
</pre></div>
</div>
</div>
<a id="LNPLS588"></a><a id="LNPLS706"></a>
<div class="props_rev_3"><a id="GUID-267D2E0E-18B1-4815-9903-965C1B4A5A1B"></a>
<h3 id="LNPLS-GUID-267D2E0E-18B1-4815-9903-965C1B4A5A1B" class="sect3">Advanced Result-Cached Function Topics</h3>
<div>
<div class="section">
<p class="subhead3">Topics</p>
</div>
<!-- class="section" -->
<ul style="list-style-type: disc;">
<li>
<p><a href="subprograms.htm#GUID-B7FA8EB2-2075-4EAC-9A15-8E710EDE987A">Rules for a Cache Hit</a></p>
</li>
<li>
<p><a href="subprograms.htm#GUID-F9B72877-32FB-43B3-8E95-63DC29BA276E">Result Cache Bypass</a></p>
</li>
<li>
<p><a href="subprograms.htm#GUID-3A24DD0F-DC69-43B7-A820-0950D86AB9AB">Making Result-Cached Functions Handle Session-Specific Settings</a></p>
</li>
<li>
<p><a href="subprograms.htm#GUID-F14A3A45-C880-4175-B42D-55EFB29EDEAE">Making Result-Cached Functions Handle Session-Specific Application Contexts</a></p>
</li>
<li>
<p><a href="subprograms.htm#GUID-63930E6C-9244-4A1A-97FC-49B0A44888AC">Choosing Result-Caching Granularity</a></p>
</li>
<li>
<p><a href="subprograms.htm#GUID-8F7227E9-4388-4A64-9D1C-5F134A3022F2">Result Caches in Oracle RAC Environment</a></p>
</li>
<li>
<p><a href="subprograms.htm#GUID-4051143D-CABC-4395-BF7C-915253CA4CAB">Result Cache Management</a></p>
</li>
<li>
<p><a href="subprograms.htm#GUID-7AEE971F-0A1E-4417-B13F-2E87D59A0441">Hot-Patching PL/SQL Units on Which Result-Cached Functions Depend</a></p>
</li>
</ul>
</div>
<a id="LNPLS707"></a>
<div class="props_rev_3"><a id="GUID-B7FA8EB2-2075-4EAC-9A15-8E710EDE987A"></a>
<h4 id="LNPLS-GUID-B7FA8EB2-2075-4EAC-9A15-8E710EDE987A" class="sect4">Rules for a Cache Hit</h4>
<div>
<p>Each time a result-cached function is invoked with different parameter values, those parameters and their result are stored in the cache. Subsequently, when the same function is invoked with the same parameter values (that is, when there is a <span class="bold">cache hit</span>), the result is retrieved from the cache, instead of being recomputed.</p>
<p>The rules for parameter comparison for a cache hit differ from the rules for the PL/SQL &#34;equal to&#34; (=) operator, as follows:</p>
<div class="tblformal" id="GUID-B7FA8EB2-2075-4EAC-9A15-8E710EDE987A__GUID-00874D87-989D-47C3-833D-BC09EB61D08A">
<table class="cellalignment876" summary="This table compares the rules for determining whether two parameter values are the same (for a cache hit) to the rules for determining whether two values are equal.">
<thead>
<tr class="cellalignment870">
<th class="cellalignment900" id="d56434e5955">Category</th>
<th class="cellalignment901" id="d56434e5958">Cache Hit Rules</th>
<th class="cellalignment902" id="d56434e5961">&#34;Equal To&#34; Operator Rules</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment870">
<td class="cellalignment903" id="d56434e5966" headers="d56434e5955">
<p>NULL comparison</p>
</td>
<td class="cellalignment904" headers="d56434e5966 d56434e5958">
<p><code class="codeph">NULL</code> equals <code class="codeph">NULL</code></p>
</td>
<td class="cellalignment905" headers="d56434e5966 d56434e5961">
<p><code class="codeph">NULL = NULL</code> evaluates to <code class="codeph">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment903" id="d56434e5985" headers="d56434e5955">
<p>Non-null scalar comparison</p>
</td>
<td class="cellalignment904" headers="d56434e5985 d56434e5958">
<p>Non-null scalars are the same if and only if their values are identical; that is, if and only if their values have identical bit patterns on the given platform. For example, <code class="codeph">CHAR</code> values <code class="codeph">&#39;AA&#39;</code> and <code class="codeph">&#39;AA &#39;</code> are different. (This rule is stricter than the rule for the &#34;equal to&#34; operator.)</p>
</td>
<td class="cellalignment905" headers="d56434e5985 d56434e5961">
<p>Non-null scalars can be equal even if their values do not have identical bit patterns on the given platform; for example, <code class="codeph">CHAR</code> values <code class="codeph">&#39;AA&#39;</code> and <code class="codeph">&#39;AA &#39;</code> are equal.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
</div>
<a id="LNPLS708"></a>
<div class="props_rev_3"><a id="GUID-F9B72877-32FB-43B3-8E95-63DC29BA276E"></a>
<h4 id="LNPLS-GUID-F9B72877-32FB-43B3-8E95-63DC29BA276E" class="sect4">Result Cache Bypass</h4>
<div>
<p>In some situations, the cache is bypassed. When the cache is bypassed:</p>
<ul style="list-style-type: disc;">
<li>
<p>The function computes the result instead of retrieving it from the cache.</p>
</li>
<li>
<p>The result that the function computes is not added to the cache.</p>
</li>
</ul>
<p>Some examples of situations in which the cache is bypassed are:</p>
<ul style="list-style-type: disc;">
<li>
<p>The cache is unavailable to all sessions.</p>
<p>For example, the database administrator has disabled the use of the result cache during application patching (as in <span class="q">&#34;<a href="subprograms.htm#GUID-7AEE971F-0A1E-4417-B13F-2E87D59A0441">Hot-Patching PL/SQL Units on Which Result-Cached Functions Depend</a>&#34;</span>).</p>
</li>
<li>
<p>A session is performing a DML statement on a table or view on which a result-cached function depends.</p>
<p>The session bypasses the result cache for that function until the DML statement is completed&mdash;either committed or rolled back. If the statement is rolled back, the session resumes using the cache for that function.</p>
<p>Cache bypass ensures that:</p>
<ul style="list-style-type: disc;">
<li>
<p>The user of each session sees his or her own uncommitted changes.</p>
</li>
<li>
<p>The PL/SQL function result cache has only committed changes that are visible to all sessions, so that uncommitted changes in one session are not visible to other sessions.</p>
</li>
</ul>
</li>
</ul>
</div>
</div>
<a id="LNPLS710"></a><a id="LNPLS709"></a>
<div class="props_rev_3"><a id="GUID-3A24DD0F-DC69-43B7-A820-0950D86AB9AB"></a>
<h4 id="LNPLS-GUID-3A24DD0F-DC69-43B7-A820-0950D86AB9AB" class="sect4">Making Result-Cached Functions Handle Session-Specific Settings</h4>
<div>
<div class="section">
<p>If a function depends on settings that might vary from session to session (such as <code class="codeph">NLS_DATE_FORMAT</code> and <code class="codeph">TIME ZONE</code>), make the function result-cached only if you can modify it to handle the various settings.</p>
<p>The function, <code class="codeph">get_hire_date</code>, in Example 8&ndash;39 uses the <code class="codeph">TO_CHAR</code> function to convert a <code class="codeph">DATE</code> item to a <code class="codeph">VARCHAR</code> item. The function <code class="codeph">get_hire_date</code> does not specify a format mask, so the format mask defaults to the one that <code class="codeph">NLS_DATE_FORMAT</code> specifies. If sessions that invoke <code class="codeph">get_hire_date</code> have different <code class="codeph">NLS_DATE_FORMAT</code> settings, cached results can have different formats. If a cached result computed by one session ages out, and another session recomputes it, the format might vary even for the same parameter value. If a session gets a cached result whose format differs from its own format, that result is probably incorrect.</p>
<p>Some possible solutions to this problem are:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>Change the return type of <code class="codeph">get_hire_date</code> to <code class="codeph">DATE</code> and have each session invoke the <code class="codeph">TO_CHAR</code> function.</p>
</li>
<li>
<p>If a common format is acceptable to all sessions, specify a format mask, removing the dependency on <code class="codeph">NLS_DATE_FORMAT</code>. For example:</p>
<pre dir="ltr">TO_CHAR(date_hired, &#39;mm/dd/yy&#39;);
</pre></li>
<li>
<p>Add a format mask parameter to <code class="codeph">get_hire_date</code>. For example:</p>
<pre dir="ltr">CREATE OR REPLACE FUNCTION get_hire_date (emp_id NUMBER, <span class="bold">fmt VARCHAR</span>)
  RETURN VARCHAR
  RESULT_CACHE
  AUTHID DEFINER
IS
  date_hired DATE;
BEGIN
  SELECT hire_date INTO date_hired
    FROM HR.EMPLOYEES
      WHERE EMPLOYEE_ID = emp_id;
  RETURN TO_CHAR(date_hired, <span class="bold">fmt</span>);
END;
/
</pre></li>
</ul>
</div>
<!-- class="section" -->
<div class="example" id="GUID-3A24DD0F-DC69-43B7-A820-0950D86AB9AB__GUID-E286AD42-90B8-4E9A-A390-329DC3ECC4DB">
<p class="titleinexample">Example 8-39 Result-Cached Function Handles Session-Specific Settings</p>
<pre dir="ltr">CREATE OR REPLACE FUNCTION get_hire_date (emp_id NUMBER)
  RETURN VARCHAR
  <span class="bold">RESULT_CACHE</span>
  AUTHID DEFINER
IS
  date_hired DATE;
BEGIN
  SELECT hire_date INTO date_hired
    FROM HR.EMPLOYEES
      WHERE EMPLOYEE_ID = emp_id;
  RETURN <span class="bold">TO_CHAR</span>(date_hired);
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS712"></a><a id="LNPLS711"></a>
<div class="props_rev_3"><a id="GUID-F14A3A45-C880-4175-B42D-55EFB29EDEAE"></a>
<h4 id="LNPLS-GUID-F14A3A45-C880-4175-B42D-55EFB29EDEAE" class="sect4">Making Result-Cached Functions Handle Session-Specific Application Contexts</h4>
<div>
<div class="section">
<p>An <span class="bold">application context</span>, which can be either global or session-specific, is a set of attributes and their values. A PL/SQL function depends on session-specific application contexts if it does one or more of the following:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>Directly invokes the SQL function <code class="codeph">SYS_CONTEXT</code>, which returns the value of a specified attribute in a specified context</p>
</li>
<li>
<p>Indirectly invokes <code class="codeph">SYS_CONTEXT</code> by using Virtual Private Database (VPD) mechanisms for fine-grained security</p>
<p>(For information about VPD, see <a class="olink DBSEG007" target="_blank" href="../DBSEG/vpd.htm#DBSEG007"><span class="italic">Oracle Database Security Guide</span></a>.)</p>
</li>
</ul>
<p>The PL/SQL function result-caching feature does not automatically handle dependence on session-specific application contexts. If you must cache the results of a function that depends on session-specific application contexts, you must pass the application context to the function as a parameter. You can give the parameter a default value, so that not every user must specify it.</p>
<p>In <a href="subprograms.htm#GUID-F14A3A45-C880-4175-B42D-55EFB29EDEAE__g3297326">Example 8-40</a>, assume that a table, <code class="codeph">config_tab</code>, has a VPD policy that translates this query:</p>
<pre dir="ltr">SELECT value FROM config_tab WHERE name = param_name;
</pre>
<p>To this query:</p>
<pre dir="ltr">SELECT value FROM config_tab
WHERE name = param_name
<span class="bold">AND app_id = SYS_CONTEXT(&#39;Config&#39;, &#39;App_ID&#39;)</span>;
</pre></div>
<!-- class="section" -->
<div class="example" id="GUID-F14A3A45-C880-4175-B42D-55EFB29EDEAE__g3297326">
<p class="titleinexample">Example 8-40 Result-Cached Function Handles Session-Specific Application Context</p>
<pre dir="ltr">CREATE OR REPLACE FUNCTION get_param_value (
  param_name VARCHAR,
  appctx     VARCHAR  DEFAULT SYS_CONTEXT(&#39;Config&#39;, &#39;App_ID&#39;)
) RETURN VARCHAR
  RESULT_CACHE
  AUTHID DEFINER
IS
  rec VARCHAR(2000);
BEGIN
  SELECT val INTO rec
  FROM config_tab
  WHERE name = param_name;
 
  RETURN rec;
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS714"></a><a id="LNPLS715"></a><a id="LNPLS716"></a><a id="LNPLS713"></a>
<div class="props_rev_3"><a id="GUID-63930E6C-9244-4A1A-97FC-49B0A44888AC"></a>
<h4 id="LNPLS-GUID-63930E6C-9244-4A1A-97FC-49B0A44888AC" class="sect4">Choosing Result-Caching Granularity</h4>
<div>
<div class="section">
<p>PL/SQL provides the function result cache, but you choose the caching granularity. To understand the concept of granularity, consider the <code class="codeph">Product_Descriptions</code> table in the Order Entry (<code class="codeph">OE</code>) sample schema:</p>
<pre dir="ltr">NAME                     NULL?      TYPE
----------------------   --------   ---------------
PRODUCT_ID               NOT NULL   NUMBER(6)
LANGUAGE_ID              NOT NULL   VARCHAR2(3)
TRANSLATED_NAME          NOT NULL   NVARCHAR2(50)
TRANSLATED_DESCRIPTION   NOT NULL   NVARCHAR2(2000)
</pre>
<p>The table has the name and description of each product in several languages. The unique key for each row is <code class="codeph">PRODUCT_ID,LANGUAGE_ID</code>.</p>
<p>Suppose that you must define a function that takes a <code class="codeph">PRODUCT_ID</code> and a <code class="codeph">LANGUAGE_ID</code> and returns the associated <code class="codeph">TRANSLATED_NAME</code>. You also want to cache the translated names. Some of the granularity choices for caching the names are:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>One name at a time (finer granularity)</p>
</li>
<li>
<p>One language at a time (coarser granularity)</p>
</li>
</ul>
<div class="tblformal" id="GUID-63930E6C-9244-4A1A-97FC-49B0A44888AC__GUID-526367F9-070F-4A85-9FBE-75FD0009088B">
<p class="titleintable">Table 8-4 Finer and Coarser Caching Granularity</p>
<table class="cellalignment876" title="Finer and Coarser Caching Granularity" summary="This table compares finest- and coarsest-grained function result caching.">
<thead>
<tr class="cellalignment870">
<th class="cellalignment888" id="d56434e6482">Granularity</th>
<th class="cellalignment906" id="d56434e6485">Benefits</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment870">
<td class="cellalignment892" id="d56434e6490" headers="d56434e6482">
<p>Finer</p>
</td>
<td class="cellalignment907" headers="d56434e6490 d56434e6485">
<p>Each function result corresponds to one logical result.</p>
<p>Stores only data that is needed at least once.</p>
<p>Each data item ages out individually.</p>
<p>Does not allow bulk loading optimizations.</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment892" id="d56434e6503" headers="d56434e6482">
<p>Coarser</p>
</td>
<td class="cellalignment907" headers="d56434e6503 d56434e6485">
<p>Each function result contains many logical subresults.</p>
<p>Might store data that is never used.</p>
<p>One aged-out data item ages out the whole set.</p>
<p>Allows bulk loading optimizations.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>In <a href="subprograms.htm#GUID-63930E6C-9244-4A1A-97FC-49B0A44888AC__BABDDJCD">Example 8-41</a> and <a href="subprograms.htm#GUID-63930E6C-9244-4A1A-97FC-49B0A44888AC__BABCDECH">Example 8-42</a>, the function <code class="codeph">productName</code> takes a <code class="codeph">PRODUCT_ID</code> and a <code class="codeph">LANGUAGE_ID</code> and returns the associated <code class="codeph">TRANSLATED_NAME</code>. Each version of <code class="codeph">productName</code> caches translated names, but at a different granularity.</p>
<p>In <a href="subprograms.htm#GUID-63930E6C-9244-4A1A-97FC-49B0A44888AC__BABDDJCD">Example 8-41</a>, <code class="codeph">get_product_name_1</code> is a result-cached function. Whenever <code class="codeph">get_product_name_1</code> is invoked with a different <code class="codeph">PRODUCT_ID</code> and <code class="codeph">LANGUAGE_ID</code>, it caches the associated <code class="codeph">TRANSLATED_NAME</code>. Each invocation of <code class="codeph">get_product_name_1</code> adds at most one <code class="codeph">TRANSLATED_NAME</code> to the cache.</p>
<p>In <a href="subprograms.htm#GUID-63930E6C-9244-4A1A-97FC-49B0A44888AC__BABCDECH">Example 8-42</a>, <code class="codeph">get_product_name_2</code> defines a result-cached function, <code class="codeph">all_product_names</code>. Whenever <code class="codeph">get_product_name_2</code> invokes <code class="codeph">all_product_names</code> with a different <code class="codeph">LANGUAGE_ID</code>, <code class="codeph">all_product_names</code> caches every <code class="codeph">TRANSLATED_NAME</code> associated with that <code class="codeph">LANGUAGE_ID</code>. Each invocation of <code class="codeph">all_product_names</code> adds every <code class="codeph">TRANSLATED_NAME</code> of at most one <code class="codeph">LANGUAGE_ID</code> to the cache.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-63930E6C-9244-4A1A-97FC-49B0A44888AC__BABDDJCD">
<p class="titleinexample">Example 8-41 Caching One Name at a Time (Finer Granularity)</p>
<pre dir="ltr">CREATE OR REPLACE FUNCTION get_product_name_1 (
  prod_id NUMBER,
  lang_id VARCHAR2
)
  RETURN NVARCHAR2
  <span class="bold">RESULT_CACHE</span>
  AUTHID DEFINER
IS
  result_ VARCHAR2(50);
BEGIN
  SELECT translated_name INTO result_
  FROM OE.Product_Descriptions
  WHERE PRODUCT_ID = prod_id
  AND LANGUAGE_ID = lang_id;
  RETURN result_;
END;
/
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-63930E6C-9244-4A1A-97FC-49B0A44888AC__BABCDECH">
<p class="titleinexample">Example 8-42 Caching Translated Names One Language at a Time (Coarser Granularity)</p>
<pre dir="ltr">CREATE OR REPLACE FUNCTION get_product_name_2 (
  prod_id NUMBER,
  lang_id VARCHAR2
)
  RETURN NVARCHAR2
  AUTHID DEFINER
IS
  TYPE product_names IS TABLE OF NVARCHAR2(50) INDEX BY PLS_INTEGER;
 
  FUNCTION all_product_names (lang_id VARCHAR2)
    RETURN product_names
    <span class="bold">RESULT_CACHE</span>
  IS
    all_names product_names;
  BEGIN
    FOR c IN (SELECT * FROM OE.Product_Descriptions
              WHERE LANGUAGE_ID = lang_id) LOOP
      all_names(c.PRODUCT_ID) := c.TRANSLATED_NAME;
    END LOOP;
    RETURN all_names;
  END;
BEGIN
  RETURN all_product_names(lang_id)(prod_id);
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS717"></a>
<div class="props_rev_3"><a id="GUID-8F7227E9-4388-4A64-9D1C-5F134A3022F2"></a>
<h4 id="LNPLS-GUID-8F7227E9-4388-4A64-9D1C-5F134A3022F2" class="sect4">Result Caches in Oracle RAC Environment</h4>
<div>
<p>Cached results are stored in the system global area (SGA). In an Oracle RAC environment, each database instance manages its own local function result cache. However, the contents of the local result cache are accessible to sessions attached to other Oracle RAC instances. If a required result is missing from the result cache of the local instance, the result might be retrieved from the local cache of another instance, instead of being locally computed.</p>
<p>The access pattern and work load of an instance determine the set of results in its local cache; therefore, the local caches of different instances can have different sets of results.</p>
<p>Although each database instance might have its own set of cached results, the mechanisms for handling invalid results are Oracle RAC environment-wide. If results were invalidated only in the local instance&#39;s result cache, other instances might use invalid results. For example, consider a result cache of item prices that are computed from data in database tables. If any of these database tables is updated in a way that affects the price of an item, the cached price of that item must be invalidated in every database instance in the Oracle RAC environment.</p>
</div>
</div>
<a id="LNPLS718"></a>
<div class="props_rev_3"><a id="GUID-4051143D-CABC-4395-BF7C-915253CA4CAB"></a>
<h4 id="LNPLS-GUID-4051143D-CABC-4395-BF7C-915253CA4CAB" class="sect4">Result Cache Management</h4>
<div>
<p>The PL/SQL function result cache shares its administrative and manageability infrastructure with the Result Cache. For information about the Result Cache, see <a class="olink TGDBA631" target="_blank" href="../TGDBA/tune_result_cache.htm#TGDBA631"><span class="italic">Oracle Database Performance Tuning Guide</span></a>.</p>
<p>The database administrator can use the following to manage the Result Cache:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">RESULT_CACHE_MAX_SIZE</code> and <code class="codeph">RESULT_CACHE_MAX_RESULT</code> initialization parameters</p>
<p><code class="codeph">RESULT_CACHE_MAX_SIZE</code> specifies the maximum amount of SGA memory (in bytes) that the Result Cache can use, and <code class="codeph">RESULT_CACHE_MAX_RESULT</code> specifies the maximum percentage of the Result Cache that any single result can use. For more information about these parameters, see <a class="olink REFRN10272" target="_blank" href="../REFRN/GUID-2D9F6563-C890-43BC-8EC0-1C372402F3A5.htm#REFRN10272"><span class="italic">Oracle Database Reference</span></a> and <a class="olink TGDBA631" target="_blank" href="../TGDBA/tune_result_cache.htm#TGDBA631"><span class="italic">Oracle Database Performance Tuning Guide</span></a>.</p>
<div class="infoboxnotealso" id="GUID-4051143D-CABC-4395-BF7C-915253CA4CAB__GUID-A7211E9B-D84D-44A8-8BE4-569DC0E68559">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a class="olink REFRN10272" target="_blank" href="../REFRN/GUID-2D9F6563-C890-43BC-8EC0-1C372402F3A5.htm#REFRN10272"><span class="italic">Oracle Database Reference</span></a> for more information about <code class="codeph">RESULT_CACHE_MAX_SIZE</code></p>
</li>
<li>
<p><a class="olink REFRN10298" target="_blank" href="../REFRN/GUID-C7E6D932-B35C-4E37-826A-14906921B71B.htm#REFRN10298"><span class="italic">Oracle Database Reference</span></a> for more information about <code class="codeph">RESULT_CACHE_MAX_RESULT</code></p>
</li>
<li>
<p><a class="olink TGDBA631" target="_blank" href="../TGDBA/tune_result_cache.htm#TGDBA631"><span class="italic">Oracle Database Performance Tuning Guide</span></a> for more information about Result Cache concepts</p>
</li>
</ul>
</div>
</li>
<li>
<p><code class="codeph">DBMS_RESULT_CACHE</code> package</p>
<p>The <code class="codeph">DBMS_RESULT_CACHE</code> package provides an interface to allow the DBA to administer that part of the shared pool that is used by the SQL result cache and the PL/SQL function result cache. For more information about this package, see <a class="olink ARPLS202" target="_blank" href="../ARPLS/d_result_cache.htm#ARPLS202"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.</p>
</li>
<li>
<p>Dynamic performance views:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">[G]V$RESULT_CACHE_STATISTICS</code></p>
</li>
<li>
<p><code class="codeph">[G]V$RESULT_CACHE_MEMORY</code></p>
</li>
<li>
<p><code class="codeph">[G]V$RESULT_CACHE_OBJECTS</code></p>
</li>
<li>
<p><code class="codeph">[G]V$RESULT_CACHE_DEPENDENCY</code></p>
</li>
</ul>
<p>See <span class="italic">Oracle Database Reference</span> for more information about <a class="olink REFRN30439" target="_blank" href="../REFRN/GUID-9E89646B-102D-4211-A181-DDF96F809289.htm#REFRN30439"><code class="codeph">[G]V$RESULT_CACHE_STATISTICS</code></a>, <a class="olink REFRN30437" target="_blank" href="../REFRN/GUID-9C9F26CE-187A-4F47-AA98-6CDD9DC60A1C.htm#REFRN30437"><code class="codeph">[G]V$RESULT_CACHE_MEMORY</code></a>, <a class="olink REFRN30438" target="_blank" href="../REFRN/GUID-2DA2EDEA-8B1D-42E6-A293-663B3124AAFD.htm#REFRN30438"><code class="codeph">[G]V$RESULT_CACHE_OBJECTS</code></a>, and <a class="olink REFRN30436" target="_blank" href="../REFRN/GUID-FDBB3D68-AF4B-4CBD-8096-67B51FB2ACD1.htm#REFRN30436"><code class="codeph">[G]V$RESULT_CACHE_DEPENDENCY</code></a>.</p>
</li>
</ul>
</div>
</div>
<a id="LNPLS719"></a>
<div class="props_rev_3"><a id="GUID-7AEE971F-0A1E-4417-B13F-2E87D59A0441"></a>
<h4 id="LNPLS-GUID-7AEE971F-0A1E-4417-B13F-2E87D59A0441" class="sect4">Hot-Patching PL/SQL Units on Which Result-Cached Functions Depend</h4>
<div>
<div class="section">
<p>When you hot-patch a PL/SQL unit on which a result-cached function depends (directly or indirectly), the cached results associated with the result-cached function might not be automatically flushed in all cases.</p>
<p>For example, suppose that the result-cached function <code class="codeph">P1</code>.<code class="codeph">foo()</code> depends on the package subprogram <code class="codeph">P2</code>.<code class="codeph">bar()</code>. If a new version of the body of package <code class="codeph">P2</code> is loaded, the cached results associated with <code class="codeph">P1</code>.<code class="codeph">foo()</code> are not automatically flushed.</p>
<p>Therefore, this is the recommended procedure for hot-patching a PL/SQL unit:</p>
<div class="infobox-note" id="GUID-7AEE971F-0A1E-4417-B13F-2E87D59A0441__GUID-CD7E2AD7-1974-4FE6-A1F0-3756D983D07D">
<p class="notep1">Note:</p>
<p>To follow these steps, you must have the <code class="codeph">EXECUTE</code> privilege on the package <code class="codeph">DBMS_RESULT_CACHE</code>.</p>
</div>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Put the result cache in bypass mode and flush existing results:</span>
<div>
<pre dir="ltr">BEGIN
  DBMS_RESULT_CACHE.Bypass(TRUE);
  DBMS_RESULT_CACHE.Flush;
END;
/
</pre>
<p>In an Oracle RAC environment, perform this step for each database instance.</p>
</div>
</li>
<li class="stepexpand"><span>Patch the PL/SQL code.</span></li>
<li class="stepexpand"><span>Resume using the result cache:</span>
<div>
<pre dir="ltr">BEGIN
  DBMS_RESULT_CACHE.Bypass(FALSE);
END;
/
</pre>
<p>In an Oracle RAC environment, perform this step for each database instance.</p>
</div>
</li>
</ol>
</div>
</div>
</div>
</div>
<a id="LNPLS99890"></a>
<div class="props_rev_3"><a id="GUID-4FC97312-AC30-4A6E-8337-996198191E29"></a>
<h2 id="LNPLS-GUID-4FC97312-AC30-4A6E-8337-996198191E29" class="sect2">PL/SQL Functions that SQL Statements Can Invoke</h2>
<div>
<p>To be invocable from SQL statements, a stored function (and any subprograms that it invokes) must obey the following purity rules, which are meant to control side effects:</p>
<ul style="list-style-type: disc;">
<li>
<p>When invoked from a <code class="codeph">SELECT</code> statement or a parallelized <code class="codeph">INSERT</code>, <code class="codeph">UPDATE</code>, <code class="codeph">DELETE</code>, or <code class="codeph">MERGE</code> statement, the subprogram cannot modify any database tables.</p>
</li>
<li>
<p>When invoked from an <code class="codeph">INSERT</code>, <code class="codeph">UPDATE</code>, <code class="codeph">DELETE</code>, or <code class="codeph">MERGE</code> statement, the subprogram cannot query or modify any database tables modified by that statement.</p>
<p>If a function either queries or modifies a table, and a DML statement on that table invokes the function, then ORA-04091 (mutating-table error) occurs. There is one exception: ORA-04091 does not occur if a single-row <code class="codeph">INSERT</code> statement that is not in a <code class="codeph">FORALL</code> statement invokes the function in a <code class="codeph">VALUES</code> clause.</p>
</li>
<li>
<p>When invoked from a <code class="codeph">SELECT</code>, <code class="codeph">INSERT</code>, <code class="codeph">UPDATE</code>, <code class="codeph">DELETE</code>, or <code class="codeph">MERGE</code> statement, the subprogram cannot execute any of the following SQL statements (unless <code class="codeph">PRAGMA</code> <code class="codeph">AUTONOMOUS_TRANSACTION</code> was specified):</p>
<ul style="list-style-type: disc;">
<li>
<p>Transaction control statements (such as <code class="codeph">COMMIT</code>)</p>
</li>
<li>
<p>Session control statements (such as <code class="codeph">SET</code> <code class="codeph">ROLE</code>)</p>
</li>
<li>
<p>System control statements (such as <code class="codeph">ALTER</code> <code class="codeph">SYSTEM</code>)</p>
</li>
<li>
<p>Database definition language (DDL) statements (such as <code class="codeph">CREATE</code>), which are committed automatically</p>
</li>
</ul>
<p>(For the description of <code class="codeph">PRAGMA</code> <code class="codeph">AUTONOMOUS_TRANSACTION</code>, see <span class="q">&#34;<a href="autotransaction_pragma.htm#GUID-AD33D949-081B-4CD3-A240-C29773E908C3" title="The AUTONOMOUS_TRANSACTION pragma marks a routine as autonomous; that is, independent of the main transaction.">AUTONOMOUS_TRANSACTION Pragma</a>&#34;</span>.)</p>
</li>
</ul>
<p>If any SQL statement in the execution part of the function violates a rule, then a runtime error occurs when that statement is parsed.</p>
<p>The fewer side effects a function has, the better it can be optimized in a <code class="codeph">SELECT</code> statement, especially if the function is declared with the option <code class="codeph">DETERMINISTIC</code> or <code class="codeph">PARALLEL_ENABLE</code> .</p>
<div class="infoboxnotealso" id="GUID-4FC97312-AC30-4A6E-8337-996198191E29__GUID-9E97F4A4-F9BC-44D2-BF4A-C5BCBA9C6B1E">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a class="olink ADFNS00908" target="_blank" href="../ADFNS/adfns_packages.htm#ADFNS00908"><span class="italic">Oracle Database Development Guide</span></a> for information about restrictions on PL/SQL functions that SQL statements can invoke</p>
</li>
<li>
<p><span class="q">&#34;<a href="tuning.htm#GUID-C54C68DB-2C26-4D25-983D-1581C0CFDEDB" title="Functions invoked in queries might run millions of times. Do not invoke a function in a query unnecessarily, and make the invocation as efficient as possible.">Tune Function Invocations in Queries</a>&#34;</span></p>
</li>
</ul>
</div>
</div>
</div>
<a id="LNPLS591"></a><a id="LNPLS00809"></a>
<div class="props_rev_3"><a id="GUID-41D23DE7-3C07-41CF-962B-F92B696594B5"></a>
<h2 id="LNPLS-GUID-41D23DE7-3C07-41CF-962B-F92B696594B5" class="sect2">Invoker&#39;s Rights and Definer&#39;s Rights (AUTHID Property)</h2>
<div>
<p>The <code class="codeph">AUTHID</code> property of a stored PL/SQL unit affects the name resolution and privilege checking of SQL statements that the unit issues at run time. The <code class="codeph">AUTHID</code> property does not affect compilation, and has no meaning for units that have no code, such as collection types.</p>
<p><code class="codeph">AUTHID</code> property values are exposed in the static data dictionary view <code class="codeph">*_PROCEDURES</code>. For units for which <code class="codeph">AUTHID</code> has meaning, the view shows the value <code class="codeph">CURRENT_USER</code> or <code class="codeph">DEFINER</code>; for other units, the view shows <code class="codeph">NULL</code>.</p>
<p>For stored PL/SQL units that you create or alter with the following statements, you can use the optional <code class="codeph">AUTHID</code> clause to specify either <code class="codeph">DEFINER</code> (the default, for backward compatibility) or <code class="codeph">CURRENT_USER</code> (the preferred usage):</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="create_function.htm#GUID-B71BC5BD-B87C-4054-AAA5-213E856651F2">CREATE FUNCTION Statement</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="create_package.htm#GUID-03A70A54-90FF-4293-B6B8-F0B35E184AC5">CREATE PACKAGE Statement</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="create_procedure.htm#GUID-5F84DB47-B5BE-4292-848F-756BF365EC54">CREATE PROCEDURE Statement</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="create_type.htm#GUID-389D603D-FBD0-452A-8414-240BBBC57034" title="The CREATE TYPE statement specifies the name of the type and its attributes, methods, and other properties.">CREATE TYPE Statement</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="alter_type.htm#GUID-A8B449E7-E3A8-48F4-A4C6-5BB87B1841CD">ALTER TYPE Statement</a>&#34;</span></p>
</li>
</ul>
<p>A unit whose <code class="codeph">AUTHID</code> value is <code class="codeph">CURRENT_USER</code> is called an <span class="bold">invoker&#39;s rights unit</span>, or <span class="bold">IR unit</span>. A unit whose <code class="codeph">AUTHID</code> value is <code class="codeph">DEFINER</code> (the default) is called a <span class="bold">definer&#39;s rights unit</span>, or <span class="bold">DR unit</span>. PL/SQL units and schema objects for which you cannot specify an <code class="codeph">AUTHID</code> value behave like this:</p>
<div class="tblformal" id="GUID-41D23DE7-3C07-41CF-962B-F92B696594B5__GUID-1AC8A030-B00B-4617-9DB4-08576216FE95">
<table class="cellalignment876" summary="Behavior of PL/SQL units and schema objects for which you cannot specify AUTHID values.">
<thead>
<tr class="cellalignment870">
<th class="cellalignment908" id="d56434e7506">PL/SQL Unit or Schema Object</th>
<th class="cellalignment909" id="d56434e7509">Behavior</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment870">
<td class="cellalignment910" id="d56434e7514" headers="d56434e7506">
<p>Anonymous block</p>
</td>
<td class="cellalignment911" headers="d56434e7514 d56434e7509">
<p>IR unit</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment910" id="d56434e7521" headers="d56434e7506">
<p><code class="codeph">BEQUEATH</code> <code class="codeph">CURRENT_USER</code> view</p>
</td>
<td class="cellalignment911" headers="d56434e7521 d56434e7509">
<p>Somewhat like an IR unit&mdash;see <a class="olink DBSEG586" target="_blank" href="../DBSEG/dr_ir.htm#DBSEG586"><span class="italic">Oracle Database Security Guide</span></a>.</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment910" id="d56434e7538" headers="d56434e7506">
<p><code class="codeph">BEQUEATH</code> <code class="codeph">DEFINER</code> view</p>
</td>
<td class="cellalignment911" headers="d56434e7538 d56434e7509">
<p>DR unit</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment910" id="d56434e7550" headers="d56434e7506">
<p>Trigger</p>
</td>
<td class="cellalignment911" headers="d56434e7550 d56434e7509">
<p>DR unit</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>The <code class="codeph">AUTHID</code> property of a unit determines whether the unit is IR or DR, and it affects both name resolution and privilege checking at run time:</p>
<ul style="list-style-type: disc;">
<li>
<p>The context for name resolution is <code class="codeph">CURRENT_SCHEMA</code>.</p>
</li>
<li>
<p>The privileges checked are those of the <code class="codeph">CURRENT_USER</code> and the enabled roles.</p>
</li>
</ul>
<p>When a session starts, <code class="codeph">CURRENT_SCHEMA</code> has the value of the schema owned by <code class="codeph">SESSION_USER</code>, and <code class="codeph">CURRENT_USER</code> has the same value as <code class="codeph">SESSION_USER</code>. (To get the current value of <code class="codeph">CURRENT_SCHEMA</code>, <code class="codeph">CURRENT_USER</code>, or <code class="codeph">SESSION_USER</code>, use the <code class="codeph">SYS_CONTEXT</code> function, documented in <a class="olink SQLRF06117" target="_blank" href="../SQLRF/functions199.htm#SQLRF06117"><span class="italic">Oracle Database SQL Language Reference</span></a>.)</p>
<p><code class="codeph">CURRENT_SCHEMA</code> can be changed during the session with the SQL statement <code class="codeph">ALTER</code> <code class="codeph">SESSION</code> <code class="codeph">SET</code> <code class="codeph">CURRENT_SCHEMA</code>. <code class="codeph">CURRENT_USER</code> cannot be changed programmatically, but it might change when a PL/SQL unit or a view is pushed onto, or popped from, the call stack.</p>
<div class="infobox-note" id="GUID-41D23DE7-3C07-41CF-962B-F92B696594B5__GUID-BDF0C8F3-276E-488D-8BEB-CE27141B5F63">
<p class="notep1">Note:</p>
<p>Oracle recommends against issuing <code class="codeph">ALTER</code> <code class="codeph">SESSION</code> <code class="codeph">SET</code> <code class="codeph">CURRENT_SCHEMA</code> from in a stored PL/SQL unit.</p>
</div>
<p>During a server call, when a DR unit is pushed onto the call stack, the database stores the currently enabled roles and the current values of <code class="codeph">CURRENT_USER</code> and <code class="codeph">CURRENT_SCHEMA</code>. It then changes both <code class="codeph">CURRENT_USER</code> and <code class="codeph">CURRENT_SCHEMA</code> to the owner of the DR unit, and enables only the role <code class="codeph">PUBLIC</code>. (The stored and new roles and values are not necessarily different.) When the DR unit is popped from the call stack, the database restores the stored roles and values. In contrast, when an IR unit is pushed onto, or popped from, the call stack, the values of <code class="codeph">CURRENT_USER</code> and <code class="codeph">CURRENT_SCHEMA</code>, and the currently enabled roles do not change (unless roles are granted to the IR unit itself&mdash;see <span class="q">&#34;<a href="subprograms.htm#GUID-56F9EB4F-C777-445C-8C6F-0AA3800E37A5">Granting Roles to PL/SQL Packages and Standalone Subprograms</a>&#34;</span>).</p>
<p>For dynamic SQL statements issued by a PL/SQL unit, name resolution and privilege checking are done once, at run time. For static SQL statements, name resolution and privilege checking are done twice: first, when the PL/SQL unit is compiled, and then again at run time. At compile time, the <code class="codeph">AUTHID</code> property has no effect&mdash;both DR and IR units are treated like DR units. At run time, however, the <code class="codeph">AUTHID</code> property determines whether a unit is IR or DR, and the unit is treated accordingly.</p>
<p>Upon entry into an IR unit, the runtime system checks privileges before doing any initialization or running any code. If the unit owner has neither the <code class="codeph">INHERIT</code> <code class="codeph">PRIVILEGES</code> privilege on the invoker nor the <code class="codeph">INHERIT</code> <code class="codeph">ANY</code> <code class="codeph">PRIVILEGES</code> privilege, then the runtime system raises error ORA-06598.</p>
<div class="infobox-note" id="GUID-41D23DE7-3C07-41CF-962B-F92B696594B5__GUID-7BEC4F76-6CA4-4D22-B2FA-4B0DCB53DCAB">
<p class="notep1">Note:</p>
<p>If the unit owner has the required privilege, then one of these statements granted it:</p>
<pre dir="ltr">GRANT INHERIT PRIVILEGES ON <span class="italic">current_user</span> TO PUBLIC
GRANT INHERIT PRIVILEGES ON <span class="italic">current_user</span> TO <span class="italic">unit_owner</span>
GRANT INHERIT ANY PRIVILEGES TO <span class="italic">unit_owner</span>
</pre>
<p>For information about the <code class="codeph">GRANT</code> statement, see <a class="olink SQLRF01603" target="_blank" href="../SQLRF/statements_9014.htm#SQLRF01603"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</div>
<div class="infoboxnotealso" id="GUID-41D23DE7-3C07-41CF-962B-F92B696594B5__GUID-239BF71D-D506-4BAB-87C1-1EB4BB9201CE">
<p class="notep1">See Also:</p>
<p><a class="olink DBSEG658" target="_blank" href="../DBSEG/dr_ir.htm#DBSEG658"><span class="italic">Oracle Database Security Guide</span></a> for information about managing security for DR and IR units</p>
</div>
<div class="section">
<p class="subhead2">Topics</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="subprograms.htm#GUID-56F9EB4F-C777-445C-8C6F-0AA3800E37A5">Granting Roles to PL/SQL Packages and Standalone Subprograms</a></p>
</li>
<li>
<p><a href="subprograms.htm#GUID-84EF0E35-40E5-4EB7-BDA3-F0410A300BB4">IR Units Need Template Objects</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="LNPLS599"></a>
<div class="props_rev_3"><a id="GUID-56F9EB4F-C777-445C-8C6F-0AA3800E37A5"></a>
<h3 id="LNPLS-GUID-56F9EB4F-C777-445C-8C6F-0AA3800E37A5" class="sect3">Granting Roles to PL/SQL Packages and Standalone Subprograms</h3>
<div>
<div class="section">
<p>Using the SQL <code class="codeph">GRANT</code> command, you can grant roles to PL/SQL packages and standalone subprograms. Roles granted to a PL/SQL unit do not affect compilation. They affect the privilege checking of SQL statements that the unit issues at run time: The unit runs with the privileges of both its own roles and any other currently enabled roles.</p>
<p>Typically, you grant roles to an IR unit, so that users with lower privileges than yours can run the unit with only the privileges needed to do so. You grant roles to a DR unit (whose invokers run it with all your privileges) only if the DR unit issues dynamic SQL, which is checked only at run time.</p>
<p>The basic syntax for granting roles to PL/SQL units is:</p>
<pre dir="ltr">GRANT <span class="italic">role</span> [, <span class="italic">role</span> ]... TO <span class="italic">unit</span> [, <span class="italic">unit</span> ]...
</pre>
<p>For example, this command grants the roles <code class="codeph">read</code> and <code class="codeph">execute</code> to the function <code class="codeph">scott</code>.<code class="codeph">func</code> and the package <code class="codeph">sys</code>.<code class="codeph">pkg</code>:</p>
<pre dir="ltr">GRANT read, execute TO FUNCTION scott.func, PACKAGE sys.pkg
</pre>
<p>For the complete syntax and semantics of the <code class="codeph">GRANT</code> command, see <a class="olink SQLRF01603" target="_blank" href="../SQLRF/statements_9014.htm#SQLRF01603"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<div class="infoboxnotealso" id="GUID-56F9EB4F-C777-445C-8C6F-0AA3800E37A5__GUID-0FFE500A-E5EA-49DA-8C84-6498C927378A">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a class="olink SQLRF01609" target="_blank" href="../SQLRF/statements_9022.htm#SQLRF01609"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about the <code class="codeph">REVOKE</code> command, which lets you revoke roles from PL/SQL units</p>
</li>
<li>
<p><a class="olink DBSEG977" target="_blank" href="../DBSEG/dr_ir.htm#DBSEG977"><span class="italic">Oracle Database Security Guide</span></a> for more information about configuring application users and application roles</p>
</li>
</ul>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="LNPLS684"></a>
<div class="props_rev_3"><a id="GUID-84EF0E35-40E5-4EB7-BDA3-F0410A300BB4"></a>
<h3 id="LNPLS-GUID-84EF0E35-40E5-4EB7-BDA3-F0410A300BB4" class="sect3">IR Units Need Template Objects</h3>
<div>
<p>One user (that is, one schema) owns an IR unit and other users run it in their schemas. If the IR unit issues static SQL statements, then the schema objects that these statements affect must exist in the owner&#39;s schema at compile time (so that the compiler can resolve references) and in the invoker&#39;s schema at run time. The definitions of corresponding schema objects must match (for example, corresponding tables must have the same names and columns); otherwise, you get an error or unexpected results. However, the objects in the owner&#39;s schema need not contain data, because the compiler does not need it; therefore, they are called <span class="bold">template objects</span>.</p>
</div>
</div>
</div>
<a id="LNPLS601"></a><a id="LNPLS693"></a><a id="LNPLS00812"></a>
<div class="props_rev_3"><a id="GUID-96B5DE2B-D809-4296-9CDE-B317B81895F8"></a>
<h2 id="LNPLS-GUID-96B5DE2B-D809-4296-9CDE-B317B81895F8" class="sect2">External Subprograms</h2>
<div>
<p>If a C procedure or Java method is stored in the database, you can publish it as an external subprogram and then invoke it from PL/SQL.</p>
<p>To publish an external subprogram, define a stored PL/SQL subprogram with a call specification. The call specification maps the name, parameter types, and return type of the external subprogram to PL/SQL equivalents. Invoke the published external subprogram by its PL/SQL name.</p>
<p>For example, suppose that this Java class, <code class="codeph">Adjuster</code>, is stored in the database:</p>
<pre dir="ltr">import java.sql.*;
import oracle.jdbc.driver.*;
<span class="bold">public class Adjuster</span> {
  <span class="bold">public static void raiseSalary (int empNo, float percent)</span>
  throws SQLException {
    Connection conn = new OracleDriver().defaultConnection();
    String sql = &#34;UPDATE employees SET salary = salary * ?
                    WHERE employee_id = ?&#34;;
    try {
      PreparedStatement pstmt = conn.prepareStatement(sql);
      pstmt.setFloat(1, (1 + percent / 100));
      pstmt.setInt(2, empNo);
      pstmt.executeUpdate();
      pstmt.close();
    } catch (SQLException e)
          {System.err.println(e.getMessage());}
    }
}
</pre>
<p>The Java class <code class="codeph">Adjuster</code> has one method, <code class="codeph">raiseSalary</code>, which raises the salary of a specified employee by a specified percentage. Because <code class="codeph">raiseSalary</code> is a <code class="codeph">void</code> method, you publish it as a PL/SQL procedure (rather than a function).</p>
<p><a href="subprograms.htm#GUID-96B5DE2B-D809-4296-9CDE-B317B81895F8__CHDHHBGB">Example 8-43</a> publishes the stored Java method <code class="codeph">Adjuster.raiseSalary</code> as a PL/SQL standalone procedure, mapping the Java method name <code class="codeph">Adjuster.raiseSalary</code> to the PL/SQL procedure name <code class="codeph">raise_salary</code> and the Java data types <code class="codeph">int</code> and <code class="codeph">float</code> to the PL/SQL data type <code class="codeph">NUMBER</code>. Then the anonymous block invokes <code class="codeph">raise_salary</code>.</p>
<p><a href="subprograms.htm#GUID-96B5DE2B-D809-4296-9CDE-B317B81895F8__CHDFAGDA">Example 8-44</a> publishes the stored Java method <code class="codeph">java.lang.Thread.sleep</code> as a PL/SQL standalone procedure, mapping the Java method name to the PL/SQL procedure name <code class="codeph">java_sleep</code> and the Java data type <code class="codeph">long</code> to the PL/SQL data type <code class="codeph">NUMBER</code>. The PL/SQL standalone procedure <code class="codeph">sleep</code> invokes <code class="codeph">java_sleep</code>.</p>
<p>Call specifications can appear in PL/SQL standalone subprograms, package specifications and bodies, and type specifications and bodies. They cannot appear inside PL/SQL blocks.</p>
<div class="infoboxnotealso" id="GUID-96B5DE2B-D809-4296-9CDE-B317B81895F8__GUID-3BFC9151-677E-4CC6-8590-445D34E6A8AE">
<p class="notep1">See Also:</p>
<p><a class="olink ADFNS010" target="_blank" href="../ADFNS/adfns_externproc.htm#ADFNS010"><span class="italic">Oracle Database Development Guide</span></a> for more information about calling external programs</p>
</div>
<div class="example" id="GUID-96B5DE2B-D809-4296-9CDE-B317B81895F8__CHDHHBGB">
<p class="titleinexample">Example 8-43 PL/SQL Anonymous Block Invokes External Procedure</p>
<pre dir="ltr">-- Publish Adjuster.raiseSalary as standalone PL/SQL procedure:

CREATE OR REPLACE PROCEDURE raise_salary (
  empid NUMBER,
  pct   NUMBER
) AS
  LANGUAGE JAVA NAME &#39;Adjuster.raiseSalary (int, float)&#39;;  -- call specification
/

BEGIN
  raise_salary(120, 10);  -- invoke Adjuster.raiseSalary by PL/SQL name
END;
/
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-96B5DE2B-D809-4296-9CDE-B317B81895F8__CHDFAGDA">
<p class="titleinexample">Example 8-44 PL/SQL Standalone Procedure Invokes External Procedure</p>
<pre dir="ltr">-- Java call specification:

CREATE PROCEDURE java_sleep (
  milli_seconds IN NUMBER
) AS <span class="bold">LANGUAGE JAVA NAME &#39;java.lang.Thread.sleep(long)&#39;</span>;
/

CREATE OR REPLACE PROCEDURE sleep (
  milli_seconds IN NUMBER
) AUTHID DEFINER IS
BEGIN
  DBMS_OUTPUT.PUT_LINE(DBMS_UTILITY.get_time());
  <span class="bold">java_sleep (milli_seconds);</span>
  DBMS_OUTPUT.PUT_LINE(DBMS_UTILITY.get_time());
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment869">
<tr>
<td class="cellalignment912">
<table class="cellalignment874">
<tr>
<td class="cellalignment873"><a href="dynamic.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment873"><a href="triggers.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment914">
<table class="cellalignment872">
<tr>
<td class="cellalignment873"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment873"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment873"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment873"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment873"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment873"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>