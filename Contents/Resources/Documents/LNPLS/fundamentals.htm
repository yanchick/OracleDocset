<html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-78115"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/PL%2FSQL%20Language%20Fundamentals"></a><title>PL/SQL Language Fundamentals</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="description" content="The PL/SQL language fundamental components are explained."/>
<meta name="keywords" content="character code, character set, database character set, multibyte character set, as database character set, whitespace character, in database character set, single quotation mark (&rsquo;), quotation mark, single or double, double quotation mark ("/>
<meta name="dcterms.created" content="2017-05-09T17:03:42Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database PL/SQL Language Reference"/>
<meta name="dcterms.identifier" content="E50727-06"/>
<meta name="dcterms.isVersionOf" content="LNPLS"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="overview.htm" title="Previous" type="text/html"/>
<link rel="Next" href="datatypes.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E50727-06.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-640DB3AA-15AF-4825-BD6C-1D4EB5AB7715"></a> <span id="PAGE" style="display:none;">9/100</span> <!-- End Header -->
<a id="LNPLS002"></a>
<h1 id="LNPLS-GUID-640DB3AA-15AF-4825-BD6C-1D4EB5AB7715" class="sect1"><span class="enumeration_chapter">2</span> PL/SQL Language Fundamentals</h1>
<div>
<p>The PL/SQL language fundamental components are explained.</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="fundamentals.htm#GUID-C2478525-0728-45B1-BFED-103D533B70D2" title="Any character data to be processed by PL/SQL or stored in a database must be represented as a sequence of bytes. The byte representation of a single character is called a character code. A set of character codes is called a character set.">Character Sets</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-8854493A-E242-4473-9B17-01F489ABC371" title="The lexical units of PL/SQL are its smallest individual components&mdash;delimiters, identifiers, literals, pragmas, and comments.">Lexical Units</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-65F9E0D0-03CD-4C40-829A-7392ACE8F932" title="A declaration allocates storage space for a value of a specified data type, and names the storage location so that you can reference it.">Declarations</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-397990B7-9C45-4D37-A8A4-478FC116E898" title="When referencing an identifier, you use a name that is either simple, qualified, remote, or both qualified and remote.">References to Identifiers</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-2FC17012-FC99-4614-90DD-ADC99F2EDBE9" title="The scope of an identifier is the region of a PL/SQL unit from which you can reference the identifier. The visibility of an identifier is the region of a PL/SQL unit from which you can reference the identifier without qualifying it. An identifier is local to the PL/SQL unit that declares it. If that unit has subunits, the identifier is global to them.">Scope and Visibility of Identifiers</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-356CB656-68ED-4869-8C67-FE93A78AEC9A">Assigning Values to Variables</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-42674F8E-55C3-44D5-BA42-47B323CD74F5" title="An&nbsp;expression&nbsp;is a combination of one or more values, operators, and SQL functions that evaluates to a value.">Expressions</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-9BD20166-6ECC-470A-8D81-47D11EC01CE9" title="PL/SQL has two error-reporting functions, SQLCODE and SQLERRM, for use in PL/SQL exception-handling code.">Error-Reporting Functions</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-DC23291F-006D-49C4-87DA-6B31F19F162A" title="Conditional compilation lets you customize the functionality of a PL/SQL application without removing source text.">Conditional Compilation</a></p>
</li>
</ul>
</div>
<a id="LNPLS142"></a><a id="LNPLS00201"></a>
<div class="props_rev_3"><a id="GUID-C2478525-0728-45B1-BFED-103D533B70D2"></a>
<h2 id="LNPLS-GUID-C2478525-0728-45B1-BFED-103D533B70D2" class="sect2">Character Sets</h2>
<div>
<p>Any character data to be processed by PL/SQL or stored in a database must be represented as a sequence of bytes. The byte representation of a single character is called a <span class="bold">character code</span>. A set of character codes is called a <span class="bold">character set</span>.</p>
<p>Every Oracle database supports a database character set and a national character set. PL/SQL also supports these character sets. This document explains how PL/SQL uses the database character set and national character set.</p>
<div class="section">
<p class="subhead2">Topics</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="fundamentals.htm#GUID-04DDDD9B-2D62-4D2D-BF89-74581CE78840">Database Character Set</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-8CF1457A-24CF-4197-86B0-F89A5D7F42DF" title="PL/SQL uses the national character set to represent character values of data types NCHAR, NVARCHAR2 and NCLOB.">National Character Set</a></p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-C2478525-0728-45B1-BFED-103D533B70D2__GUID-5F56E5CA-F30F-45BF-A852-40C521C131D1">
<p class="notep1">See Also:</p>
<p><a class="olink NLSPG002" target="_blank" href="../NLSPG/ch2charset.htm#NLSPG002"><span class="italic">Oracle Database Globalization Support Guide</span></a> for general information about character sets</p>
</div>
</div>
<!-- class="section" --></div>
<a id="LNPLS146"></a><a id="LNPLS99920"></a>
<div class="props_rev_3"><a id="GUID-04DDDD9B-2D62-4D2D-BF89-74581CE78840"></a>
<h3 id="LNPLS-GUID-04DDDD9B-2D62-4D2D-BF89-74581CE78840" class="sect3">Database Character Set</h3>
<div>
<p>PL/SQL uses the <span class="bold">database character set</span> to represent:</p>
<ul style="list-style-type: disc;">
<li>
<p>Stored source text of PL/SQL units</p>
<p>For information about PL/SQL units, see <span class="q">&#34;<a href="overview.htm#GUID-DF63BC59-22C2-4BA8-9240-F74D505D5102" title="PL/SQL units are affected by PL/SQL compilation parameters (a category of database initialization parameters). Different PL/SQL units&mdash;for example, a package specification and its body&mdash;can have different compilation parameter settings.">PL/SQL Units and Compilation Parameters</a>&#34;</span>.</p>
</li>
<li>
<p>Character values of data types <code class="codeph">CHAR</code>, <code class="codeph">VARCHAR2</code>, <code class="codeph">CLOB</code>, and <code class="codeph">LONG</code></p>
<p>For information about these data types, see <span class="q">&#34;<a href="datatypes.htm#GUID-239A89A6-4CBC-46F5-8A6A-10E8B465B7E8" title="The PL/SQL data types include the SQL data types.">SQL Data Types</a>&#34;</span>.</p>
</li>
</ul>
<p>The database character set can be either single-byte, mapping each supported character to one particular byte, or multibyte-varying-width, mapping each supported character to a sequence of one, two, three, or four bytes. The maximum number of bytes in a character code depends on the particular character set.</p>
<p>Every database character set includes these basic characters:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold">Latin letters:</span> <span class="italic">A</span> through <span class="italic">Z</span> and <span class="italic">a</span> through <span class="italic">z</span></p>
</li>
<li>
<p><span class="bold">Decimal digits:</span> <span class="italic">0</span> through <span class="italic">9</span></p>
</li>
<li>
<p><span class="bold">Punctuation characters</span> in <a href="fundamentals.htm#GUID-04DDDD9B-2D62-4D2D-BF89-74581CE78840__CIHCHIGC" title="This table has two columns. The first column lists the symbols in the database character set. The second column lists their names.">Table 2-1</a></p>
</li>
<li>
<p><span class="bold">Whitespace characters:</span> <span class="italic">space</span>, <span class="italic">tab</span>, <span class="italic">new line</span>, and <span class="italic">carriage return</span></p>
</li>
</ul>
<p>PL/SQL source text that uses only the basic characters can be stored and compiled in any database. PL/SQL source text that uses nonbasic characters can be stored and compiled only in databases whose database character sets support those nonbasic characters.</p>
<div class="tblformal" id="GUID-04DDDD9B-2D62-4D2D-BF89-74581CE78840__CIHCHIGC">
<p class="titleintable">Table 2-1 Punctuation Characters in Every Database Character Set</p>
<table class="cellalignment876" title="Punctuation Characters in Every Database Character Set" summary="This table has two columns. The first column lists the symbols in the database character set. The second column lists their names.">
<thead>
<tr class="cellalignment870">
<th class="cellalignment915" id="d12034e456">Symbol</th>
<th class="cellalignment916" id="d12034e459">Name</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment870">
<td class="cellalignment917" id="d12034e464" headers="d12034e456">
<p><code class="codeph">(</code></p>
</td>
<td class="cellalignment918" headers="d12034e464 d12034e459">
<p>Left parenthesis</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment917" id="d12034e472" headers="d12034e456">
<p><code class="codeph">)</code></p>
</td>
<td class="cellalignment918" headers="d12034e472 d12034e459">
<p>Right parenthesis</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment917" id="d12034e480" headers="d12034e456">
<p><code class="codeph">&lt;</code></p>
</td>
<td class="cellalignment918" headers="d12034e480 d12034e459">
<p>Left angle bracket</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment917" id="d12034e488" headers="d12034e456">
<p><code class="codeph">&gt;</code></p>
</td>
<td class="cellalignment918" headers="d12034e488 d12034e459">
<p>Right angle bracket</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment917" id="d12034e496" headers="d12034e456">
<p><code class="codeph">+</code></p>
</td>
<td class="cellalignment918" headers="d12034e496 d12034e459">
<p>Plus sign</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment917" id="d12034e504" headers="d12034e456">
<p><code class="codeph">-</code></p>
</td>
<td class="cellalignment918" headers="d12034e504 d12034e459">
<p>Hyphen <span class="italic">or</span> minus sign</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment917" id="d12034e515" headers="d12034e456">
<p><code class="codeph">*</code></p>
</td>
<td class="cellalignment918" headers="d12034e515 d12034e459">
<p>Asterisk</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment917" id="d12034e523" headers="d12034e456">
<p><code class="codeph">/</code></p>
</td>
<td class="cellalignment918" headers="d12034e523 d12034e459">
<p>Slash</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment917" id="d12034e531" headers="d12034e456">
<p><code class="codeph">=</code></p>
</td>
<td class="cellalignment918" headers="d12034e531 d12034e459">
<p>Equal sign</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment917" id="d12034e539" headers="d12034e456">
<p><code class="codeph">,</code></p>
</td>
<td class="cellalignment918" headers="d12034e539 d12034e459">
<p>Comma</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment917" id="d12034e547" headers="d12034e456">
<p><code class="codeph">;</code></p>
</td>
<td class="cellalignment918" headers="d12034e547 d12034e459">
<p>Semicolon</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment917" id="d12034e556" headers="d12034e456">
<p><code class="codeph">:</code></p>
</td>
<td class="cellalignment918" headers="d12034e556 d12034e459">
<p>Colon</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment917" id="d12034e564" headers="d12034e456">
<p><code class="codeph">.</code></p>
</td>
<td class="cellalignment918" headers="d12034e564 d12034e459">
<p>Period</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment917" id="d12034e572" headers="d12034e456">
<p><code class="codeph">!</code></p>
</td>
<td class="cellalignment918" headers="d12034e572 d12034e459">
<p>Exclamation point</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment917" id="d12034e580" headers="d12034e456">
<p><code class="codeph">?</code></p>
</td>
<td class="cellalignment918" headers="d12034e580 d12034e459">
<p>Question mark</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment917" id="d12034e588" headers="d12034e456">
<p><code class="codeph">&#39;</code></p>
</td>
<td class="cellalignment918" headers="d12034e588 d12034e459">
<p>Apostrophe <span class="italic">or</span> single quotation mark</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment917" id="d12034e599" headers="d12034e456">
<p>&#34;</p>
</td>
<td class="cellalignment918" headers="d12034e599 d12034e459">
<p>Quotation mark <span class="italic">or</span> double quotation mark</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment917" id="d12034e609" headers="d12034e456">
<p><code class="codeph">@</code></p>
</td>
<td class="cellalignment918" headers="d12034e609 d12034e459">
<p>At sign</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment917" id="d12034e617" headers="d12034e456">
<p><code class="codeph">%</code></p>
</td>
<td class="cellalignment918" headers="d12034e617 d12034e459">
<p>Percent sign</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment917" id="d12034e625" headers="d12034e456">
<p><code class="codeph">#</code></p>
</td>
<td class="cellalignment918" headers="d12034e625 d12034e459">
<p>Number sign</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment917" id="d12034e633" headers="d12034e456">
<p><code class="codeph">$</code></p>
</td>
<td class="cellalignment918" headers="d12034e633 d12034e459">
<p>Dollar sign</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment917" id="d12034e641" headers="d12034e456">
<p><code class="codeph">_</code></p>
</td>
<td class="cellalignment918" headers="d12034e641 d12034e459">
<p>Underscore</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment917" id="d12034e650" headers="d12034e456">
<p><code class="codeph">|</code></p>
</td>
<td class="cellalignment918" headers="d12034e650 d12034e459">
<p>Vertical bar</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<div class="infoboxnotealso" id="GUID-04DDDD9B-2D62-4D2D-BF89-74581CE78840__GUID-326EC318-FF0B-4B09-B791-F4881393B985">
<p class="notep1">See Also:</p>
<p><a class="olink NLSPG171" target="_blank" href="../NLSPG/ch2charset.htm#NLSPG171"><span class="italic">Oracle Database Globalization Support Guide</span></a> for more information about the database character set</p>
</div>
</div>
</div>
<a id="LNPLS99919"></a>
<div class="props_rev_3"><a id="GUID-8CF1457A-24CF-4197-86B0-F89A5D7F42DF"></a>
<h3 id="LNPLS-GUID-8CF1457A-24CF-4197-86B0-F89A5D7F42DF" class="sect3">National Character Set</h3>
<div>
<p>PL/SQL uses the <span class="bold">national character set</span> to represent character values of data types <code class="codeph">NCHAR</code>, <code class="codeph">NVARCHAR2</code> and <code class="codeph">NCLOB</code>.</p>
<div class="infoboxnotealso" id="GUID-8CF1457A-24CF-4197-86B0-F89A5D7F42DF__GUID-FACE6B4E-0D7C-4C01-8D2D-48082316CBAE">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="datatypes.htm#GUID-239A89A6-4CBC-46F5-8A6A-10E8B465B7E8" title="The PL/SQL data types include the SQL data types.">SQL Data Types</a>&#34;</span> for information about these data types</p>
</li>
<li>
<p><a class="olink NLSPG180" target="_blank" href="../NLSPG/ch2charset.htm#NLSPG180"><span class="italic">Oracle Database Globalization Support Guide</span></a> for more information about the national character set</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<a id="LNPLS148"></a><a id="LNPLS147"></a>
<div class="props_rev_3"><a id="GUID-8854493A-E242-4473-9B17-01F489ABC371"></a>
<h2 id="LNPLS-GUID-8854493A-E242-4473-9B17-01F489ABC371" class="sect2">Lexical Units</h2>
<div>
<p>The <span class="bold">lexical units</span> of PL/SQL are its smallest individual components&mdash;delimiters, identifiers, literals, pragmas, and comments.</p>
<div class="section">
<p class="subhead2">Topics</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="fundamentals.htm#GUID-96A42F7C-7A71-4B90-8255-CA9C8BD9722E" title="A delimiter is a character, or character combination, that has a special meaning in PL/SQL.">Delimiters</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-1033B8AE-B6C9-44DB-AFB0-D71A2635BD9E" title="Reserved words and keywords are identifiers that have special meaning in PL/SQL.Predefined identifiers are declared in the predefined package STANDARD.">Identifiers</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-A5970DA8-78B4-460B-971D-C957A80B3B08" title="A literal is a value that is neither represented by an identifier nor calculated from other values.">Literals</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-D6EFD7E8-39DF-4430-B625-B6D37E49F6F4">Pragmas</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-9DEE49B3-40B3-48A8-8F78-C98399379ACE" title="The PL/SQL compiler ignores comments. Their purpose is to help other application developers understand your source text.">Comments</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-7BA7BD59-49BD-4723-8C63-4FA5ADCF1E8E" title="You can put whitespace characters between lexical units, which often makes your source text easier to read.">Whitespace Characters Between Lexical Units</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="LNPLS190"></a><a id="LNPLS189"></a>
<div class="props_rev_3"><a id="GUID-96A42F7C-7A71-4B90-8255-CA9C8BD9722E"></a>
<h3 id="LNPLS-GUID-96A42F7C-7A71-4B90-8255-CA9C8BD9722E" class="sect3">Delimiters</h3>
<div>
<p>A <span class="bold">delimiter</span> is a character, or character combination, that has a special meaning in PL/SQL.</p>
<p>Do not embed any others characters (including whitespace characters) inside a delimiter.</p>
<p><a href="fundamentals.htm#GUID-96A42F7C-7A71-4B90-8255-CA9C8BD9722E__CBJIIIEA" title="This table has two columns. The first column lists the PL/SQL delimiters themselves (their characters or character combinations). The second column gives their meanings.">Table 2-2</a> summarizes the PL/SQL delimiters.</p>
<div class="tblformal" id="GUID-96A42F7C-7A71-4B90-8255-CA9C8BD9722E__CBJIIIEA">
<p class="titleintable">Table 2-2 PL/SQL Delimiters</p>
<table class="cellalignment876" title="PL/SQL Delimiters" summary="This table has two columns. The first column lists the PL/SQL delimiters themselves (their characters or character combinations). The second column gives their meanings.">
<thead>
<tr class="cellalignment870">
<th class="cellalignment919" id="d12034e994">Delimiter</th>
<th class="cellalignment920" id="d12034e997">Meaning</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment870">
<td class="cellalignment921" id="d12034e1002" headers="d12034e994">
<p><code class="codeph">+</code></p>
</td>
<td class="cellalignment922" headers="d12034e1002 d12034e997">
<p>Addition operator</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment921" id="d12034e1010" headers="d12034e994">
<p><code class="codeph">:=</code></p>
</td>
<td class="cellalignment922" headers="d12034e1010 d12034e997">
<p>Assignment operator</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment921" id="d12034e1018" headers="d12034e994">
<p><code class="codeph">=&gt;</code></p>
</td>
<td class="cellalignment922" headers="d12034e1018 d12034e997">
<p>Association operator</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment921" id="d12034e1026" headers="d12034e994">
<p><code class="codeph">%</code></p>
</td>
<td class="cellalignment922" headers="d12034e1026 d12034e997">
<p>Attribute indicator</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment921" id="d12034e1034" headers="d12034e994">
<p><code class="codeph">&#39;</code></p>
</td>
<td class="cellalignment922" headers="d12034e1034 d12034e997">
<p>Character string delimiter</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment921" id="d12034e1042" headers="d12034e994">
<p><code class="codeph">.</code></p>
</td>
<td class="cellalignment922" headers="d12034e1042 d12034e997">
<p>Component indicator</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment921" id="d12034e1050" headers="d12034e994">
<p><code class="codeph">||</code></p>
</td>
<td class="cellalignment922" headers="d12034e1050 d12034e997">
<p>Concatenation operator</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment921" id="d12034e1058" headers="d12034e994">
<p><code class="codeph">/</code></p>
</td>
<td class="cellalignment922" headers="d12034e1058 d12034e997">
<p>Division operator</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment921" id="d12034e1066" headers="d12034e994">
<p><code class="codeph">**</code></p>
</td>
<td class="cellalignment922" headers="d12034e1066 d12034e997">
<p>Exponentiation operator</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment921" id="d12034e1074" headers="d12034e994">
<p><code class="codeph">(</code></p>
</td>
<td class="cellalignment922" headers="d12034e1074 d12034e997">
<p>Expression or list delimiter (begin)</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment921" id="d12034e1082" headers="d12034e994">
<p><code class="codeph">)</code></p>
</td>
<td class="cellalignment922" headers="d12034e1082 d12034e997">
<p>Expression or list delimiter (end)</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment921" id="d12034e1091" headers="d12034e994">
<p><code class="codeph">:</code></p>
</td>
<td class="cellalignment922" headers="d12034e1091 d12034e997">
<p>Host variable indicator</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment921" id="d12034e1099" headers="d12034e994">
<p><code class="codeph">,</code></p>
</td>
<td class="cellalignment922" headers="d12034e1099 d12034e997">
<p>Item separator</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment921" id="d12034e1107" headers="d12034e994">
<p><code class="codeph">&lt;&lt;</code></p>
</td>
<td class="cellalignment922" headers="d12034e1107 d12034e997">
<p>Label delimiter (begin)</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment921" id="d12034e1115" headers="d12034e994">
<p><code class="codeph">&gt;&gt;</code></p>
</td>
<td class="cellalignment922" headers="d12034e1115 d12034e997">
<p>Label delimiter (end)</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment921" id="d12034e1123" headers="d12034e994">
<p><code class="codeph">/*</code></p>
</td>
<td class="cellalignment922" headers="d12034e1123 d12034e997">
<p>Multiline comment delimiter (begin)</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment921" id="d12034e1131" headers="d12034e994">
<p><code class="codeph">*/</code></p>
</td>
<td class="cellalignment922" headers="d12034e1131 d12034e997">
<p>Multiline comment delimiter (end)</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment921" id="d12034e1139" headers="d12034e994">
<p><code class="codeph">*</code></p>
</td>
<td class="cellalignment922" headers="d12034e1139 d12034e997">
<p>Multiplication operator</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment921" id="d12034e1147" headers="d12034e994">
<p><code class="codeph">&#34;</code></p>
</td>
<td class="cellalignment922" headers="d12034e1147 d12034e997">
<p>Quoted identifier delimiter</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment921" id="d12034e1155" headers="d12034e994">
<p><code class="codeph">..</code></p>
</td>
<td class="cellalignment922" headers="d12034e1155 d12034e997">
<p>Range operator</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment921" id="d12034e1163" headers="d12034e994">
<p><code class="codeph">=</code></p>
</td>
<td class="cellalignment922" headers="d12034e1163 d12034e997">
<p>Relational operator (equal)</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment921" id="d12034e1171" headers="d12034e994">
<p><code class="codeph">&lt;&gt;</code></p>
</td>
<td class="cellalignment922" headers="d12034e1171 d12034e997">
<p>Relational operator (not equal)</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment921" id="d12034e1180" headers="d12034e994">
<p><code class="codeph">!=</code></p>
</td>
<td class="cellalignment922" headers="d12034e1180 d12034e997">
<p>Relational operator (not equal)</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment921" id="d12034e1188" headers="d12034e994">
<p><code class="codeph">~=</code></p>
</td>
<td class="cellalignment922" headers="d12034e1188 d12034e997">
<p>Relational operator (not equal)</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment921" id="d12034e1196" headers="d12034e994">
<p><code class="codeph">^=</code></p>
</td>
<td class="cellalignment922" headers="d12034e1196 d12034e997">
<p>Relational operator (not equal)</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment921" id="d12034e1204" headers="d12034e994">
<p><code class="codeph">&lt;</code></p>
</td>
<td class="cellalignment922" headers="d12034e1204 d12034e997">
<p>Relational operator (less than)</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment921" id="d12034e1212" headers="d12034e994">
<p><code class="codeph">&gt;</code></p>
</td>
<td class="cellalignment922" headers="d12034e1212 d12034e997">
<p>Relational operator (greater than)</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment921" id="d12034e1220" headers="d12034e994">
<p><code class="codeph">&lt;=</code></p>
</td>
<td class="cellalignment922" headers="d12034e1220 d12034e997">
<p>Relational operator (less than or equal)</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment921" id="d12034e1228" headers="d12034e994">
<p><code class="codeph">&gt;=</code></p>
</td>
<td class="cellalignment922" headers="d12034e1228 d12034e997">
<p>Relational operator (greater than or equal)</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment921" id="d12034e1236" headers="d12034e994">
<p><code class="codeph">@</code></p>
</td>
<td class="cellalignment922" headers="d12034e1236 d12034e997">
<p>Remote access indicator</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment921" id="d12034e1244" headers="d12034e994">
<p><code class="codeph">--</code></p>
</td>
<td class="cellalignment922" headers="d12034e1244 d12034e997">
<p>Single-line comment indicator</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment921" id="d12034e1252" headers="d12034e994">
<p><code class="codeph">;</code></p>
</td>
<td class="cellalignment922" headers="d12034e1252 d12034e997">
<p>Statement terminator</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment921" id="d12034e1260" headers="d12034e994">
<p><code class="codeph">-</code></p>
</td>
<td class="cellalignment922" headers="d12034e1260 d12034e997">
<p>Subtraction or negation operator</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
</div>
<a id="LNPLS149"></a><a id="LNPLS99973"></a>
<div class="props_rev_3"><a id="GUID-1033B8AE-B6C9-44DB-AFB0-D71A2635BD9E"></a>
<h3 id="LNPLS-GUID-1033B8AE-B6C9-44DB-AFB0-D71A2635BD9E" class="sect3">Identifiers</h3>
<div>
<p><span class="bold">Identifiers</span> name PL/SQL elements, which include:</p>
<ul style="list-style-type: disc;">
<li>
<p>Constants</p>
</li>
<li>
<p>Cursors</p>
</li>
<li>
<p>Exceptions</p>
</li>
<li>
<p>Keywords</p>
</li>
<li>
<p>Labels</p>
</li>
<li>
<p>Packages</p>
</li>
<li>
<p>Reserved words</p>
</li>
<li>
<p>Subprograms</p>
</li>
<li>
<p>Types</p>
</li>
<li>
<p>Variables</p>
</li>
</ul>
<p>Every character in an identifier, alphabetic or not, is significant. For example, the identifiers <code class="codeph">lastname</code> and <code class="codeph">last_name</code> are different.</p>
<p>You must separate adjacent identifiers by one or more whitespace characters or a punctuation character.</p>
<p>Except as explained in <span class="q">&#34;<a href="fundamentals.htm#GUID-C4B3F788-770E-48F8-9A44-ACD7977B1545">Quoted User-Defined Identifiers</a>&#34;</span>, PL/SQL is case-insensitive for identifiers. For example, the identifiers <code class="codeph">lastname</code>, <code class="codeph">LastName</code>, and <code class="codeph">LASTNAME</code> are the same.</p>
<div class="section">
<p class="subhead3">Topics</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="fundamentals.htm#GUID-53E09662-5AD4-4530-8C6B-FF3F7C7430D5" title="Reserved words and keywords are identifiers that have special meaning in PL/SQL.">Reserved Words and Keywords</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-7C9919E0-4D0A-4F57-B596-F684FAD4A96A" title="Predefined identifiers are declared in the predefined package STANDARD.">Predefined Identifiers</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-321084DE-3BDD-484B-AE85-7A991B67C51A">User-Defined Identifiers</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="LNPLS191"></a>
<div class="props_rev_3"><a id="GUID-53E09662-5AD4-4530-8C6B-FF3F7C7430D5"></a>
<h4 id="LNPLS-GUID-53E09662-5AD4-4530-8C6B-FF3F7C7430D5" class="sect4">Reserved Words and Keywords</h4>
<div>
<p><span class="bold">Reserved words</span> and <span class="bold">keywords</span> are identifiers that have special meaning in PL/SQL.</p>
<p>You cannot use reserved words as ordinary user-defined identifiers. You can use them as quoted user-defined identifiers, but it is not recommended. For more information, see <span class="q">&#34;<a href="fundamentals.htm#GUID-C4B3F788-770E-48F8-9A44-ACD7977B1545">Quoted User-Defined Identifiers</a>&#34;</span>.</p>
<p>You can use keywords as ordinary user-defined identifiers, but it is not recommended.</p>
<p>For lists of PL/SQL reserved words and keywords, see <a href="reservedwords.htm#GUID-9BAA3A99-41B1-45CB-A91E-1E482BC1F927__CIHDHDCH" title="This table summarizes the PL/SQL reserved words.">Table D-1</a> and <a href="reservedwords.htm#GUID-9BAA3A99-41B1-45CB-A91E-1E482BC1F927__CIHFDHGB" title="This table summarizes the PL/SQL keywords.">Table D-2</a>, respectively.</p>
</div>
</div>
<a id="LNPLS192"></a>
<div class="props_rev_3"><a id="GUID-7C9919E0-4D0A-4F57-B596-F684FAD4A96A"></a>
<h4 id="LNPLS-GUID-7C9919E0-4D0A-4F57-B596-F684FAD4A96A" class="sect4">Predefined Identifiers</h4>
<div>
<p><span class="bold">Predefined identifiers</span> are declared in the predefined package <code class="codeph">STANDARD</code>.</p>
<p>An example of a predefined identifier is the exception <code class="codeph">INVALID_NUMBER</code>.</p>
<p>For a list of predefined identifiers, connect to Oracle Database as a user who has the DBA role and use this query:</p>
<pre dir="ltr">SELECT TYPE_NAME FROM ALL_TYPES WHERE PREDEFINED=&#39;YES&#39;;
</pre>
<p>You can use predefined identifiers as user-defined identifiers, but it is not recommended. Your local declaration overrides the global declaration (see <span class="q">&#34;<a href="fundamentals.htm#GUID-2FC17012-FC99-4614-90DD-ADC99F2EDBE9" title="The scope of an identifier is the region of a PL/SQL unit from which you can reference the identifier. The visibility of an identifier is the region of a PL/SQL unit from which you can reference the identifier without qualifying it. An identifier is local to the PL/SQL unit that declares it. If that unit has subunits, the identifier is global to them.">Scope and Visibility of Identifiers</a>&#34;</span>).</p>
</div>
</div>
<a id="LNPLS152"></a>
<div class="props_rev_3"><a id="GUID-321084DE-3BDD-484B-AE85-7A991B67C51A"></a>
<h4 id="LNPLS-GUID-321084DE-3BDD-484B-AE85-7A991B67C51A" class="sect4">User-Defined Identifiers</h4>
<div>
<p>A <span class="bold">user-defined identifier</span> is:</p>
<ul style="list-style-type: disc;">
<li>
<p>Composed of characters from the database character set</p>
</li>
<li>
<p>Either ordinary or quoted</p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-321084DE-3BDD-484B-AE85-7A991B67C51A__GUID-92B2629E-3FC5-499B-A4A8-7BEA84E1FE91">
<p class="notep1">Tip:</p>
<p>Make user-defined identifiers meaningful. For example, the meaning of <code class="codeph">cost_per_thousand</code> is obvious, but the meaning of <code class="codeph">cpt</code> is not.</p>
</div>
</div>
<a id="LNPLS153"></a>
<div class="props_rev_3"><a id="GUID-DF2095E7-6D82-457C-BA82-00BEFABF5B24"></a>
<h5 id="LNPLS-GUID-DF2095E7-6D82-457C-BA82-00BEFABF5B24" class="sect5">Ordinary User-Defined Identifiers</h5>
<div>
<p>An ordinary user-defined identifier:</p>
<ul style="list-style-type: disc;">
<li>
<p>Begins with a letter</p>
</li>
<li>
<p>Can include letters, digits, and these symbols:</p>
<ul style="list-style-type: disc;">
<li>
<p>Dollar sign ($)</p>
</li>
<li>
<p>Number sign (#)</p>
</li>
<li>
<p>Underscore (_)</p>
</li>
</ul>
</li>
<li>
<p>Is not a reserved word (listed in <a href="reservedwords.htm#GUID-9BAA3A99-41B1-45CB-A91E-1E482BC1F927__CIHDHDCH" title="This table summarizes the PL/SQL reserved words.">Table D-1</a>).</p>
</li>
</ul>
<p>The database character set defines which characters are classified as letters and digits. The representation of the identifier in the database character set cannot exceed 30 bytes.</p>
<p>Examples of acceptable ordinary user-defined identifiers:</p>
<pre dir="ltr">X
t2
phone#
credit_limit
LastName
oracle$number
money$$$tree
SN##
try_again_
</pre>
<p>Examples of unacceptable ordinary user-defined identifiers:</p>
<pre dir="ltr">mine&amp;yours
debit-amount
on/off
user id
</pre></div>
</div>
<a id="LNPLS159"></a><a id="LNPLS160"></a><a id="LNPLS161"></a><a id="LNPLS162"></a><a id="LNPLS164"></a><a id="LNPLS158"></a>
<div class="props_rev_3"><a id="GUID-C4B3F788-770E-48F8-9A44-ACD7977B1545"></a>
<h5 id="LNPLS-GUID-C4B3F788-770E-48F8-9A44-ACD7977B1545" class="sect5">Quoted User-Defined Identifiers</h5>
<div>
<p>A quoted user-defined identifier is enclosed in double quotation marks. Between the double quotation marks, any characters from the database character set are allowed except double quotation marks, new line characters, and null characters. For example, these identifiers are acceptable:</p>
<pre dir="ltr">&#34;X+Y&#34;
&#34;last name&#34;
&#34;on/off switch&#34;
&#34;employee(s)&#34;
&#34;*** header info ***&#34;
</pre>
<p>The representation of the quoted identifier in the database character set cannot exceed 30 bytes (excluding the double quotation marks).</p>
<p>A quoted user-defined identifier is case-sensitive, with one exception: If a quoted user-defined identifier, without its enclosing double quotation marks, is a valid <span class="italic">ordinary</span> user-defined identifier, then the double quotation marks are optional in references to the identifier, and if you omit them, then the identifier is case-insensitive.</p>
<p>In <a href="fundamentals.htm#GUID-C4B3F788-770E-48F8-9A44-ACD7977B1545__CIHDCHBF">Example 2-1</a>, the quoted user-defined identifier <code class="codeph">&#34;HELLO&#34;</code>, without its enclosing double quotation marks, is a valid ordinary user-defined identifier. Therefore, the reference <code class="codeph">Hello</code> is valid.</p>
<p>In <a href="fundamentals.htm#GUID-C4B3F788-770E-48F8-9A44-ACD7977B1545__CIHCADFI">Example 2-2</a>, the reference <code class="codeph">&#34;Hello&#34;</code> is invalid, because the double quotation marks make the identifier case-sensitive. It is not recommended, but you can use a reserved word as a quoted user-defined identifier. Because a reserved word is not a valid ordinary user-defined identifier, you must always enclose the identifier in double quotation marks, and it is always case-sensitive.</p>
<p><a href="fundamentals.htm#GUID-C4B3F788-770E-48F8-9A44-ACD7977B1545__CIHGBJDH">Example 2-3</a> declares quoted user-defined identifiers <code class="codeph">&#34;BEGIN&#34;</code>, <code class="codeph">&#34;Begin&#34;</code>, and <code class="codeph">&#34;begin&#34;</code>. Although <code class="codeph">BEGIN</code>, <code class="codeph">Begin</code>, and <code class="codeph">begin</code> represent the same reserved word, <code class="codeph">&#34;BEGIN&#34;</code>, <code class="codeph">&#34;Begin&#34;</code>, and <code class="codeph">&#34;begin&#34;</code> represent different identifiers.</p>
<p><a href="fundamentals.htm#GUID-C4B3F788-770E-48F8-9A44-ACD7977B1545__CIHDHFDB">Example 2-4</a> references a quoted user-defined identifier that is a reserved word, neglecting to enclose it in double quotation marks.</p>
<p><a href="fundamentals.htm#GUID-C4B3F788-770E-48F8-9A44-ACD7977B1545__CIHEHGEI">Example 2-5</a> references a quoted user-defined identifier that is a reserved word, neglecting its case-sensitivity.</p>
<div class="example" id="GUID-C4B3F788-770E-48F8-9A44-ACD7977B1545__CIHDCHBF">
<p class="titleinexample">Example 2-1 Valid Case-Insensitive Reference to Quoted User-Defined Identifier</p>
<pre dir="ltr">DECLARE
  &#34;HELLO&#34; varchar2(10) := &#39;hello&#39;;
BEGIN
  DBMS_Output.Put_Line(Hello);
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">hello
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-C4B3F788-770E-48F8-9A44-ACD7977B1545__CIHCADFI">
<p class="titleinexample">Example 2-2 Invalid Case-Insensitive Reference to Quoted User-Defined Identifier</p>
<pre dir="ltr">DECLARE
  &#34;HELLO&#34; varchar2(10) := &#39;hello&#39;;
BEGIN
  DBMS_Output.Put_Line(&#34;Hello&#34;);
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">  DBMS_Output.Put_Line(&#34;Hello&#34;);
                        *
ERROR at line 4:
ORA-06550: line 4, column 25:
PLS-00201: identifier &#39;Hello&#39; must be declared
ORA-06550: line 4, column 3:
PL/SQL: Statement ignored
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-C4B3F788-770E-48F8-9A44-ACD7977B1545__CIHGBJDH">
<p class="titleinexample">Example 2-3 Reserved Word as Quoted User-Defined Identifier</p>
<pre dir="ltr">DECLARE
  &#34;BEGIN&#34; varchar2(15) := &#39;UPPERCASE&#39;;
  &#34;Begin&#34; varchar2(15) := &#39;Initial Capital&#39;;
  &#34;begin&#34; varchar2(15) := &#39;lowercase&#39;;
BEGIN
  DBMS_Output.Put_Line(&#34;BEGIN&#34;);
  DBMS_Output.Put_Line(&#34;Begin&#34;);
  DBMS_Output.Put_Line(&#34;begin&#34;);
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">UPPERCASE
Initial Capital
lowercase
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-C4B3F788-770E-48F8-9A44-ACD7977B1545__CIHDHFDB">
<p class="titleinexample">Example 2-4 Neglecting Double Quotation Marks</p>
<pre dir="ltr">DECLARE
  &#34;HELLO&#34; varchar2(10) := &#39;hello&#39;;  -- HELLO is not a reserved word
  &#34;BEGIN&#34; varchar2(10) := &#39;begin&#39;;  -- BEGIN is a reserved word
BEGIN
  DBMS_Output.Put_Line(Hello);      -- Double quotation marks are optional
  DBMS_Output.Put_Line(<span class="bold">BEGIN</span>);      <span class="bold">-- Double quotation marks are required</span>
end;
/
</pre>
<p>Result:</p>
<pre dir="ltr">  DBMS_Output.Put_Line(BEGIN);      -- Double quotation marks are required
                       *
ERROR at line 6:
ORA-06550: line 6, column 24:
PLS-00103: Encountered the symbol &#34;BEGIN&#34; when expecting one of the following:
( ) - + case mod new not null &lt;an identifier&gt;
&lt;a double-quoted delimited-identifier&gt; &lt;a bind variable&gt;
table continue avg count current exists max min prior sql
stddev sum variance execute multiset the both leading
trailing forall merge year month day hour minute second
timezone_hour timezone_minute timezone_region timezone_abbr
time timestamp interval date
&lt;a string literal with character set specificat
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-C4B3F788-770E-48F8-9A44-ACD7977B1545__CIHEHGEI">
<p class="titleinexample">Example 2-5 Neglecting Case-Sensitivity</p>
<pre dir="ltr">DECLARE
  &#34;HELLO&#34; varchar2(10) := &#39;hello&#39;;  -- HELLO is not a reserved word
  &#34;BEGIN&#34; varchar2(10) := &#39;begin&#39;;  -- BEGIN is a reserved word
BEGIN
  DBMS_Output.Put_Line(Hello);      -- Identifier is case-insensitive
  DBMS_Output.Put_Line(<span class="bold">&#34;Begin&#34;</span>);    <span class="bold">-- Identifier is case-sensitive</span>
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">  DBMS_Output.Put_Line(&#34;Begin&#34;);    -- Identifier is case-sensitive
                        *
ERROR at line 6:
ORA-06550: line 6, column 25:
PLS-00201: identifier &#39;Begin&#39; must be declared
ORA-06550: line 6, column 3:
PL/SQL: Statement ignored
</pre></div>
<!-- class="example" --></div>
</div>
</div>
</div>
<a id="LNPLS194"></a>
<div class="props_rev_3"><a id="GUID-A5970DA8-78B4-460B-971D-C957A80B3B08"></a>
<h3 id="LNPLS-GUID-A5970DA8-78B4-460B-971D-C957A80B3B08" class="sect3">Literals</h3>
<div>
<p>A <span class="bold">literal</span> is a value that is neither represented by an identifier nor calculated from other values.</p>
<p>For example, <code class="codeph">123</code> is an integer literal and <code class="codeph">&#39;abc&#39;</code> is a character literal, but <code class="codeph">1+2</code> is not a literal.</p>
<p>PL/SQL literals include all SQL literals (described in <a class="olink SQLRF00217" target="_blank" href="../SQLRF/sql_elements003.htm#SQLRF00217"><span class="italic">Oracle Database SQL Language Reference</span></a>) and <code class="codeph">BOOLEAN</code> literals (which SQL does not have). A <code class="codeph">BOOLEAN</code> literal is the predefined logical value <code class="codeph">TRUE</code>, <code class="codeph">FALSE</code>, or <code class="codeph">NULL</code>. <code class="codeph">NULL</code> represents an unknown value.</p>
<div class="infobox-note" id="GUID-A5970DA8-78B4-460B-971D-C957A80B3B08__GUID-A92C26BD-4137-4608-8374-8F6691F77908">
<p class="notep1">Note:</p>
<p>Like <span class="italic">Oracle Database SQL Language Reference</span>, this document uses the terms <span class="italic">character literal</span> and <span class="italic">string</span> interchangeably.</p>
</div>
<p>When using character literals in PL/SQL, remember:</p>
<ul style="list-style-type: disc;">
<li>
<p>Character literals are case-sensitive.</p>
<p>For example, <code class="codeph">&#39;Z&#39;</code> and <code class="codeph">&#39;z&#39;</code> are different.</p>
</li>
<li>
<p>Whitespace characters are significant.</p>
<p>For example, these literals are different:</p>
<pre dir="ltr">&#39;abc&#39;
&#39; abc&#39;
&#39;abc &#39;
&#39; abc &#39;
&#39;a b c&#39;
</pre></li>
<li>
<p>PL/SQL has no line-continuation character that means &#34;this string continues on the next source line.&#34; If you continue a string on the next source line, then the string includes a line-break character.</p>
<p>For example, this PL/SQL code:</p>
<pre dir="ltr">BEGIN
  DBMS_OUTPUT.PUT_LINE(&#39;This string breaks
here.&#39;);
END;
/
</pre>
<p>Prints this:</p>
<pre dir="ltr">This string breaks
here.
</pre>
<p>If your string does not fit on a source line and you do not want it to include a line-break character, then construct the string with the concatenation operator (<code class="codeph">||</code>).</p>
<p>For example, this PL/SQL code:</p>
<pre dir="ltr">BEGIN
  DBMS_OUTPUT.PUT_LINE(&#39;This string &#39; ||
                       &#39;contains no line-break character.&#39;);
END;
/
</pre>
<p>Prints this:</p>
<pre dir="ltr">This string contains no line-break character.
</pre>
<p>For more information about the concatenation operator, see <span class="q">&#34;<a href="fundamentals.htm#GUID-4792284C-D82B-4F6A-8554-45CF1BFAE6EB" title="The concatenation operator (||) appends one string operand to another.">Concatenation Operator</a>&#34;</span>.</p>
</li>
<li>
<p><code class="codeph">&#39;0&#39;</code> through <code class="codeph">&#39;9&#39;</code> are not equivalent to the integer literals 0 through 9.</p>
<p>However, because PL/SQL converts them to integers, you can use them in arithmetic expressions.</p>
</li>
<li>
<p>A character literal with zero characters has the value <code class="codeph">NULL</code> and is called a <span class="bold">null string</span>.</p>
<p>However, this <code class="codeph">NULL</code> value is not the <code class="codeph">BOOLEAN</code> value <code class="codeph">NULL</code>.</p>
</li>
<li>
<p>An <span class="bold">ordinary character literal</span> is composed of characters in the <span class="bold">database character set</span>.</p>
<p>For information about the database character set, see <a class="olink NLSPG171" target="_blank" href="../NLSPG/ch2charset.htm#NLSPG171"><span class="italic">Oracle Database Globalization Support Guide</span></a>.</p>
</li>
<li>
<p>A <span class="bold">national character literal</span> is composed of characters in the <span class="bold">national character set</span>.</p>
<p>For information about the national character set, see <a class="olink NLSPG180" target="_blank" href="../NLSPG/ch2charset.htm#NLSPG180"><span class="italic">Oracle Database Globalization Support Guide</span></a>.</p>
</li>
</ul>
</div>
</div>
<a id="LNPLS99954"></a>
<div class="props_rev_3"><a id="GUID-D6EFD7E8-39DF-4430-B625-B6D37E49F6F4"></a>
<h3 id="LNPLS-GUID-D6EFD7E8-39DF-4430-B625-B6D37E49F6F4" class="sect3">Pragmas</h3>
<div>
<p>A <span class="bold">pragma</span> is an instruction to the compiler that it processes at compile time. For information about pragmas, see:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="autotransaction_pragma.htm#GUID-AD33D949-081B-4CD3-A240-C29773E908C3" title="The AUTONOMOUS_TRANSACTION pragma marks a routine as autonomous; that is, independent of the main transaction.">AUTONOMOUS_TRANSACTION Pragma</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="exceptioninit_pragma.htm#GUID-873A087E-A470-4798-9152-16BC673B4940" title="The EXCEPTION_INIT pragma associates a user-defined exception name with an error code.">EXCEPTION_INIT Pragma</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="inline_pragma.htm#GUID-CD0EAC7A-9839-4292-9620-70EC12917021" title="The INLINE pragma specifies whether a subprogram invocation is to be inlined.">INLINE Pragma</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="restrictreferences_pragma.htm#GUID-D189A0B4-D0D3-4951-BFC2-7D996F1659FE" title="The RESTRICT_REFERENCES pragma asserts that a user-defined subprogram does not read or write database tables or package variables.">RESTRICT_REFERENCES Pragma</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="seriallyreusable_pragma.htm#GUID-35B02603-B794-403C-9E0D-E40208CEAF35" title="The SERIALLY_REUSABLE pragma specifies that the package state is needed for only one call to the server (for example, an OCI call to the database or a stored procedure invocation through a database link).">SERIALLY_REUSABLE Pragma</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="udf_pragma.htm#GUID-D3AC7A45-66E9-4D9E-BC8B-5DCD7CE84E7C" title="The UDF pragma tells the compiler that the PL/SQL unit is a user defined function that is used primarily in SQL statements, which might improve its performance.">UDF Pragma</a>&#34;</span></p>
</li>
</ul>
</div>
</div>
<a id="LNPLS166"></a><a id="LNPLS203"></a>
<div class="props_rev_3"><a id="GUID-9DEE49B3-40B3-48A8-8F78-C98399379ACE"></a>
<h3 id="LNPLS-GUID-9DEE49B3-40B3-48A8-8F78-C98399379ACE" class="sect3">Comments</h3>
<div>
<p>The PL/SQL compiler ignores comments. Their purpose is to help other application developers understand your source text.</p>
<p>Typically, you use comments to describe the purpose and use of each code segment. You can also disable obsolete or unfinished pieces of code by turning them into comments.</p>
<div class="section">
<p class="subhead3">Topics</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="fundamentals.htm#GUID-068B0807-E244-4D0B-BA1B-47929CE626AF">Single-Line Comments</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-2722A49F-C233-4DDF-B236-10EE3DD6B79B">Multiline Comments</a></p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-9DEE49B3-40B3-48A8-8F78-C98399379ACE__GUID-7855ADE9-0C8B-45E7-9615-E5E0939EC053">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="comment.htm#GUID-E1FA7338-852E-44AA-B7BE-E8C4E746F0D5" title="A comment is source program text that the PL/SQL compiler ignores. Its primary purpose is to document code, but you can also use it to disable obsolete or unfinished pieces of code (that is, you can turn the code into comments). PL/SQL has both single-line and multiline comments.">Comment</a>&#34;</span></p>
</div>
</div>
<!-- class="section" --></div>
<a id="LNPLS205"></a><a id="LNPLS204"></a>
<div class="props_rev_3"><a id="GUID-068B0807-E244-4D0B-BA1B-47929CE626AF"></a>
<h4 id="LNPLS-GUID-068B0807-E244-4D0B-BA1B-47929CE626AF" class="sect4">Single-Line Comments</h4>
<div>
<p>A single-line comment begins with <code class="codeph">--</code> and extends to the end of the line.</p>
<div class="infobox-note" id="GUID-068B0807-E244-4D0B-BA1B-47929CE626AF__GUID-1C8110E2-BF60-453A-B3B0-2A5155D60D20">
<p class="notep1">Caution:</p>
<p>Do not put a single-line comment in a PL/SQL block to be processed dynamically by an Oracle Precompiler program. The Oracle Precompiler program ignores end-of-line characters, which means that a single-line comment ends when the block ends.</p>
</div>
<p><a href="fundamentals.htm#GUID-068B0807-E244-4D0B-BA1B-47929CE626AF__BEICABIJ">Example 2-6</a> has three single-line comments.</p>
<p>While testing or debugging a program, you can disable a line of code by making it a comment. For example:</p>
<pre dir="ltr"><span class="bold">--</span> DELETE FROM employees WHERE comm_pct IS NULL
</pre>
<div class="example" id="GUID-068B0807-E244-4D0B-BA1B-47929CE626AF__BEICABIJ">
<p class="titleinexample">Example 2-6 Single-Line Comments</p>
<pre dir="ltr">DECLARE
  howmany     NUMBER;
  num_tables  NUMBER;
BEGIN
  <span class="bold">-- Begin processing</span>
  SELECT COUNT(*) INTO howmany
  FROM USER_OBJECTS
  WHERE OBJECT_TYPE = &#39;TABLE&#39;; <span class="bold">-- Check number of tables</span>
  num_tables := howmany;       <span class="bold">-- Compute another value</span>
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS167"></a><a id="LNPLS206"></a>
<div class="props_rev_3"><a id="GUID-2722A49F-C233-4DDF-B236-10EE3DD6B79B"></a>
<h4 id="LNPLS-GUID-2722A49F-C233-4DDF-B236-10EE3DD6B79B" class="sect4">Multiline Comments</h4>
<div>
<p>A multiline comment begins with <code class="codeph">/*</code>, ends with <code class="codeph">*/</code>, and can span multiple lines.</p>
<p><a href="fundamentals.htm#GUID-2722A49F-C233-4DDF-B236-10EE3DD6B79B__CIHGEJDF">Example 2-7</a> has two multiline comments. (The SQL function <code class="codeph">TO_CHAR</code> returns the character equivalent of its argument. For more information about <code class="codeph">TO_CHAR</code>, see <a class="olink SQLRF06128" target="_blank" href="../SQLRF/functions215.htm#SQLRF06128"><span class="italic">Oracle Database SQL Language Reference</span></a>.)</p>
<p>You can use multiline comment delimiters to &#34;comment out&#34; sections of code. When doing so, be careful not to cause nested multiline comments. One multiline comment cannot contain another multiline comment. However, a multiline comment can contain a single-line comment. For example, this causes a syntax error:</p>
<pre dir="ltr"><span class="bold">/*</span>
  IF 2 + 2 = 4 THEN
    some_condition := TRUE;
  <span class="bold">/*</span> We expect this THEN to always be performed <span class="bold">*/</span>
  END IF;
<span class="bold">*/</span>
</pre>
<p>This does not cause a syntax error:</p>
<pre dir="ltr"><span class="bold">/*</span>
  IF 2 + 2 = 4 THEN
    some_condition := TRUE;
  <span class="bold">--</span> We expect this THEN to always be performed
  END IF;
<span class="bold">*/</span>
</pre>
<div class="example" id="GUID-2722A49F-C233-4DDF-B236-10EE3DD6B79B__CIHGEJDF">
<p class="titleinexample">Example 2-7 Multiline Comments</p>
<pre dir="ltr">DECLARE
  some_condition  BOOLEAN;
  pi              NUMBER := 3.1415926;
  radius          NUMBER := 15;
  area            NUMBER;
BEGIN
  <span class="bold">/* Perform some simple tests and assignments */</span>
 
  IF 2 + 2 = 4 THEN
    some_condition := TRUE;
  /* We expect this THEN to always be performed */
  END IF;
 
  <span class="bold">/* This line computes the area of a circle using pi,</span>
  <span class="bold">which is the ratio between the circumference and diameter.</span>
  <span class="bold">After the area is computed, the result is displayed. */</span>
 
  area := pi * radius**2;
  DBMS_OUTPUT.PUT_LINE(&#39;The area is: &#39; || TO_CHAR(area));
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">The area is: 706.858335
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="LNPLS169"></a><a id="LNPLS168"></a>
<div class="props_rev_3"><a id="GUID-7BA7BD59-49BD-4723-8C63-4FA5ADCF1E8E"></a>
<h3 id="LNPLS-GUID-7BA7BD59-49BD-4723-8C63-4FA5ADCF1E8E" class="sect3">Whitespace Characters Between Lexical Units</h3>
<div>
<p>You can put whitespace characters between lexical units, which often makes your source text easier to read.</p>
<div class="example" id="GUID-7BA7BD59-49BD-4723-8C63-4FA5ADCF1E8E__CIHBEDFE">
<p class="titleinexample">Example 2-8 Whitespace Characters Improving Source Text Readability</p>
<pre dir="ltr">DECLARE
  x    NUMBER := 10;
  y    NUMBER := 5;
  max  NUMBER;
BEGIN
  IF x&gt;y THEN max:=x;ELSE max:=y;END IF;  <span class="bold">-- correct but hard to read</span>
  
  <span class="bold">-- Easier to read:</span>
  
  IF x &gt; y THEN
    max:=x;
  ELSE
    max:=y;
  END IF;
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="LNPLS170"></a><a id="LNPLS00202"></a>
<div class="props_rev_3"><a id="GUID-65F9E0D0-03CD-4C40-829A-7392ACE8F932"></a>
<h2 id="LNPLS-GUID-65F9E0D0-03CD-4C40-829A-7392ACE8F932" class="sect2">Declarations</h2>
<div>
<p>A declaration allocates storage space for a value of a specified data type, and names the storage location so that you can reference it.</p>
<p>You must declare objects before you can reference them. Declarations can appear in the declarative part of any block, subprogram, or package.</p>
<div class="section">
<p class="subhead2">Topics</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="fundamentals.htm#GUID-568AC23F-1BC3-444E-855E-BF2EC4EEB14B" title="A variable declaration always specifies the name and data type of the variable.">Declaring Variables</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-3758F6D6-8F46-4FD0-8758-13F0ACFE90E6" title="A constant holds a value that does not change.">Declaring Constants</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-F174B8B8-D07F-4C79-BFC6-7F8E844D84D1" title="In a variable declaration, the initial value is optional unless you specify the NOT NULL constraint . In a constant declaration, the initial value is required.">Initial Values of Variables and Constants</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-6705CC7D-470A-4B4A-BCAD-6843F227C012" title="You can impose the NOT NULL constraint on a scalar variable or constant (or scalar component of a composite variable or constant).">NOT NULL Constraint</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-2E4B6BBA-08B5-473A-901D-738BD00ABF47" title="The %TYPE attribute lets you declare a data item of the same data type as a previously declared variable or column (without knowing what that type is). If the declaration of the referenced item changes, then the declaration of the referencing item changes accordingly.">Declaring Items using the %TYPE Attribute</a></p>
</li>
</ul>
<p>For information about declaring objects other than variables and constants, see the syntax of <span class="italic"><code class="codeph">declare_section</code></span> in <span class="q">&#34;<a href="block.htm#GUID-9ACEB9ED-567E-4E1A-A16A-B8B35214FC9D" title="The block, which groups related declarations and statements, is the basic unit of a PL/SQL source program.">Block</a>&#34;</span>.</p>
</div>
<!-- class="section" --></div>
<a id="LNPLS177"></a><a id="LNPLS178"></a><a id="LNPLS176"></a>
<div class="props_rev_3"><a id="GUID-6705CC7D-470A-4B4A-BCAD-6843F227C012"></a>
<h3 id="LNPLS-GUID-6705CC7D-470A-4B4A-BCAD-6843F227C012" class="sect3">NOT NULL Constraint</h3>
<div>
<p>You can impose the <code class="codeph">NOT</code> <code class="codeph">NULL</code> constraint on a scalar variable or constant (or scalar component of a composite variable or constant).</p>
<p>The <code class="codeph">NOT</code> <code class="codeph">NULL</code> constraint prevents assigning a null value to the item. The item can acquire this constraint either implicitly (from its data type) or explicitly.</p>
<p>A scalar variable declaration that specifies <code class="codeph">NOT</code> <code class="codeph">NULL</code>, either implicitly or explicitly, must assign an initial value to the variable (because the default initial value for a scalar variable is <code class="codeph">NULL</code>).</p>
<p>PL/SQL treats any zero-length string as a <code class="codeph">NULL</code> value. This includes values returned by character functions and <code class="codeph">BOOLEAN</code> expressions.</p>
<p>To test for a <code class="codeph">NULL</code> value, use the <span class="q">&#34;<a href="fundamentals.htm#GUID-D02FA4D0-0074-4227-9624-F01E3D219BAB" title="The IS NULL operator returns the BOOLEAN value TRUE if its operand is NULL or FALSE if it is not NULL. The IS NOT NULL operator does the opposite.">IS [NOT] NULL Operator</a>&#34;</span>.</p>
<div class="section">
<p class="subhead3">Examples</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-6705CC7D-470A-4B4A-BCAD-6843F227C012__CIHJJHCE">
<p class="titleinexample">Example 2-9 Variable Declaration with NOT NULL Constraint</p>
<p>In this example, the variable <code class="codeph">acct_id</code> acquires the <code class="codeph">NOT</code> <code class="codeph">NULL</code> constraint explicitly, and the variables <code class="codeph">a</code>, <code class="codeph">b</code>, and <code class="codeph">c</code> acquire it from their data types.</p>
<pre dir="ltr">DECLARE
  acct_id INTEGER(4) <span class="bold">NOT NULL := 9999</span>;
  a <span class="bold">NATURALN                  := 9999</span>;
  b <span class="bold">POSITIVEN                 := 9999</span>;
  c <span class="bold">SIMPLE_INTEGER            := 9999</span>;
BEGIN
  NULL;
END;
/
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-6705CC7D-470A-4B4A-BCAD-6843F227C012__CIHFHGHF">
<p class="titleinexample">Example 2-10 Variables Initialized to NULL Values</p>
<p>In this example, all variables are initialized to <code class="codeph">NULL</code>.</p>
<pre dir="ltr">DECLARE
  null_string  VARCHAR2(80) := TO_CHAR(&#39;&#39;);
  address      VARCHAR2(80);
  zip_code     VARCHAR2(80) := SUBSTR(address, 25, 0);
  name         VARCHAR2(80);
  valid        BOOLEAN      := (name != &#39;&#39;);
BEGIN
  NULL;
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS171"></a><a id="LNPLS208"></a>
<div class="props_rev_3"><a id="GUID-568AC23F-1BC3-444E-855E-BF2EC4EEB14B"></a>
<h3 id="LNPLS-GUID-568AC23F-1BC3-444E-855E-BF2EC4EEB14B" class="sect3">Declaring Variables</h3>
<div>
<p>A variable declaration always specifies the name and data type of the variable.</p>
<p>For most data types, a variable declaration can also specify an initial value.</p>
<p>The variable name must be a valid user-defined identifier .</p>
<p>The data type can be any PL/SQL data type. The PL/SQL data types include the SQL data types. A data type is either scalar (without internal components) or composite (with internal components).</p>
<div class="section">
<p class="subhead3">Example</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-568AC23F-1BC3-444E-855E-BF2EC4EEB14B__BABEABGF">
<p class="titleinexample">Example 2-11 Scalar Variable Declarations</p>
<p>This example declares several variables with scalar data types.</p>
<pre dir="ltr">DECLARE
  part_number       NUMBER(6);     -- SQL data type
  part_name         VARCHAR2(20);  -- SQL data type
  in_stock          BOOLEAN;       -- PL/SQL-only data type
  part_price        NUMBER(6,2);   -- SQL data type
  part_description  VARCHAR2(50);  -- SQL data type
BEGIN
  NULL;
END;
/
</pre></div>
<!-- class="example" -->
<div class="section">
<p class="subhead3">Related Topics</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="fundamentals.htm#GUID-321084DE-3BDD-484B-AE85-7A991B67C51A">User-Defined Identifiers</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="scalar_variable_declaration.htm#GUID-03124315-0E1E-4154-8EBE-12034CA6AD55" title="A scalar variable stores a value with no internal components. The value can change. A scalar variable declaration specifies the name and data type of the variable and allocates storage for it.">Scalar Variable Declaration</a>&#34;</span> for scalar variable declaration syntax</p>
</li>
<li>
<p><a href="datatypes.htm#GUID-391C58FD-16AF-486C-AF28-173E309CDBA5" title="Every PL/SQL constant, variable, parameter, and function return value has a data type that determines its storage format and its valid values and operations.">PL/SQL Data Types</a> for information about scalar data types</p>
</li>
<li>
<p><a href="composites.htm#GUID-7115C8B6-62F9-496D-BEC3-F7441DFE148A" title="PL/SQL lets you define two kinds of composite data types, collection and record.">PL/SQL Collections and Records</a>, for information about composite data types and variables</p>
</li>
</ul>
</div>
<!-- class="section" --></div>
</div>
<a id="LNPLS172"></a><a id="LNPLS210"></a>
<div class="props_rev_3"><a id="GUID-3758F6D6-8F46-4FD0-8758-13F0ACFE90E6"></a>
<h3 id="LNPLS-GUID-3758F6D6-8F46-4FD0-8758-13F0ACFE90E6" class="sect3">Declaring Constants</h3>
<div>
<p>A constant holds a value that does not change.</p>
<p>The information in <span class="q">&#34;<a href="fundamentals.htm#GUID-568AC23F-1BC3-444E-855E-BF2EC4EEB14B" title="A variable declaration always specifies the name and data type of the variable.">Declaring Variables</a>&#34;</span> also applies to constant declarations, but a constant declaration has two more requirements: the keyword <code class="codeph">CONSTANT</code> and the initial value of the constant. (The initial value of a constant is its permanent value.)</p>
<div class="example" id="GUID-3758F6D6-8F46-4FD0-8758-13F0ACFE90E6__CIHFHFEB">
<p class="titleinexample">Example 2-12 Constant Declarations</p>
<p>This example declares three constants with scalar data types.</p>
<pre dir="ltr">DECLARE
  credit_limit     <span class="bold">CONSTANT</span> REAL    <span class="bold">:= 5000.00</span>;  -- SQL data type
  max_days_in_year <span class="bold">CONSTANT</span> INTEGER <span class="bold">:= 366</span>;      -- SQL data type
  urban_legend     <span class="bold">CONSTANT</span> BOOLEAN <span class="bold">:= FALSE</span>;    -- PL/SQL-only data type
BEGIN
  NULL;
END;
/
</pre></div>
<!-- class="example" -->
<div class="section">
<p class="subhead3">Related Topic</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="constant.htm#GUID-C6DA65F8-3F0C-43F3-8BC6-231064E8C1B6" title="A constant holds a value that does not change. A constant declaration specifies the name, data type, and value of the constant and allocates storage for it. The declaration can also impose the NOT NULL constraint.">Constant Declaration</a>&#34;</span> for constant declaration syntax</p>
</li>
</ul>
</div>
<!-- class="section" --></div>
</div>
<a id="LNPLS175"></a><a id="LNPLS241"></a><a id="LNPLS173"></a>
<div class="props_rev_3"><a id="GUID-F174B8B8-D07F-4C79-BFC6-7F8E844D84D1"></a>
<h3 id="LNPLS-GUID-F174B8B8-D07F-4C79-BFC6-7F8E844D84D1" class="sect3">Initial Values of Variables and Constants</h3>
<div>
<p>In a variable declaration, the initial value is optional unless you specify the <code class="codeph">NOT</code> <code class="codeph">NULL</code> constraint . In a constant declaration, the initial value is required.</p>
<p>If the declaration is in a block or subprogram, the initial value is assigned to the variable or constant every time control passes to the block or subprogram. If the declaration is in a package specification, the initial value is assigned to the variable or constant for each session (whether the variable or constant is public or private).</p>
<p>To specify the initial value, use either the assignment operator (<code class="codeph">:=</code>) or the keyword <code class="codeph">DEFAULT</code>, followed by an expression. The expression can include previously declared constants and previously initialized variables.</p>
<p>If you do not specify an initial value for a variable, assign a value to it before using it in any other context.</p>
<div class="section">
<p class="subhead3">Examples</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-F174B8B8-D07F-4C79-BFC6-7F8E844D84D1__CIHBCHCE">
<p class="titleinexample">Example 2-13 Variable and Constant Declarations with Initial Values</p>
<p>This example assigns initial values to the constant and variables that it declares. The initial value of <code class="codeph">area</code> depends on the previously declared constant <code class="codeph">pi</code> and the previously initialized variable <code class="codeph">radius</code>.</p>
<pre dir="ltr">DECLARE
  hours_worked    INTEGER <span class="bold">:= 40</span>;
  employee_count  INTEGER <span class="bold">:= 0</span>;

  pi     CONSTANT REAL <span class="bold">:= 3.14159</span>;
  radius          REAL <span class="bold">:= 1</span>;
  area            REAL <span class="bold">:= (pi * radius**2)</span>;
BEGIN
  NULL;
END;
/
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-F174B8B8-D07F-4C79-BFC6-7F8E844D84D1__CIHIBJJF">
<p class="titleinexample">Example 2-14 Variable Initialized to NULL by Default</p>
<p>In this example, the variable <code class="codeph">counter</code> has the initial value <code class="codeph">NULL</code>, by default. The example uses the <span class="q">&#34;<a href="fundamentals.htm#GUID-D02FA4D0-0074-4227-9624-F01E3D219BAB" title="The IS NULL operator returns the BOOLEAN value TRUE if its operand is NULL or FALSE if it is not NULL. The IS NOT NULL operator does the opposite.">IS [NOT] NULL Operator</a>&#34;</span> to show that <code class="codeph">NULL</code> is different from zero.</p>
<pre dir="ltr">DECLARE
  counter INTEGER;  -- initial value is NULL by default
BEGIN
  counter := counter + 1;  -- NULL + 1 is still NULL
  
  IF counter IS NULL THEN
    DBMS_OUTPUT.PUT_LINE(&#39;counter is NULL.&#39;);
  END IF;
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">counter is NULL.
</pre></div>
<!-- class="example" -->
<div class="section">
<p class="subhead3">Related Topics</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="composites.htm#GUID-8A3DD42E-72A1-4807-8650-E92F5FD89763" title="When declaring an associative array constant, you must create a function that populates the associative array with its initial value and then invoke the function in the constant declaration.">Declaring Associative Array Constants</a>&#34;</span> for information about declaring constant associative arrays</p>
</li>
<li>
<p><span class="q">&#34;<a href="composites.htm#GUID-BB893086-90BC-4831-81E2-41B9C1AE68A8" title="When declaring a record constant, you must create a function that populates the record with its initial value and then invoke the function in the constant declaration.">Declaring Record Constants</a>&#34;</span> for information about declaring constant records</p>
</li>
<li>
<p><span class="q">&#34;<a href="fundamentals.htm#GUID-6705CC7D-470A-4B4A-BCAD-6843F227C012" title="You can impose the NOT NULL constraint on a scalar variable or constant (or scalar component of a composite variable or constant).">NOT NULL Constraint</a>&#34;</span></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
</div>
<a id="LNPLS180"></a><a id="LNPLS182"></a><a id="LNPLS99970"></a>
<div class="props_rev_3"><a id="GUID-2E4B6BBA-08B5-473A-901D-738BD00ABF47"></a>
<h3 id="LNPLS-GUID-2E4B6BBA-08B5-473A-901D-738BD00ABF47" class="sect3">Declaring Items using the %TYPE Attribute</h3>
<div>
<p>The <code class="codeph">%TYPE</code> attribute lets you declare a data item of the same data type as a previously declared variable or column (without knowing what that type is). If the declaration of the referenced item changes, then the declaration of the referencing item changes accordingly.</p>
<p>The syntax of the declaration is:</p>
<pre dir="ltr"><span class="italic">referencing_item</span> <span class="italic">referenced_item</span>%TYPE;
</pre>
<p>For the kinds of items that can be referencing and referenced items, see <span class="q">&#34;<a href="type_attribute.htm#GUID-EAB44F7E-B2AB-4AC6-B83D-B586193D75FC" title="%TYPE attribute syntax and semantics.">%TYPE Attribute</a>&#34;</span>.</p>
<p>The referencing item inherits the following from the referenced item:</p>
<ul style="list-style-type: disc;">
<li>
<p>Data type and size</p>
</li>
<li>
<p>Constraints (unless the referenced item is a column)</p>
</li>
</ul>
<p>The referencing item does not inherit the initial value of the referenced item. Therefore, if the referencing item specifies or inherits the <code class="codeph">NOT</code> <code class="codeph">NULL</code> constraint, you must specify an initial value for it.</p>
<p>The <code class="codeph">%TYPE</code> attribute is particularly useful when declaring variables to hold database values. The syntax for declaring a variable of the same type as a column is:</p>
<pre dir="ltr"><span class="italic">variable_name</span> <span class="italic">table_name</span>.<span class="italic">column_name</span>%TYPE;
</pre>
<div class="infoboxnotealso" id="GUID-2E4B6BBA-08B5-473A-901D-738BD00ABF47__GUID-25BC62C2-113A-49F2-AC31-8F76E689D7BA">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="composites.htm#GUID-EBF66B92-8A94-4E3A-A837-253D5DA79D5F" title="The %ROWTYPE attribute lets you declare a record variable that represents either a full or partial row of a database table or view.">Declaring Items using the %ROWTYPE Attribute</a>&#34;</span>, which lets you declare a record variable that represents either a full or partial row of a database table or view</p>
</div>
<div class="section">
<p class="subhead3">Examples</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-2E4B6BBA-08B5-473A-901D-738BD00ABF47__CIHCGIGG">
<p class="titleinexample">Example 2-15 Declaring Variable of Same Type as Column</p>
<p>In this example, the variable <code class="codeph">surname</code> inherits the data type and size of the column <code class="codeph">employees</code>.<code class="codeph">last_name</code>, which has a <code class="codeph">NOT</code> <code class="codeph">NULL</code> constraint. Because <code class="codeph">surname</code> does not inherit the <code class="codeph">NOT</code> <code class="codeph">NULL</code> constraint, its declaration does not need an initial value.</p>
<pre dir="ltr">DECLARE
  surname  employees.last_name%TYPE;
BEGIN
  DBMS_OUTPUT.PUT_LINE(&#39;surname=&#39; || surname);
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">surname=
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-2E4B6BBA-08B5-473A-901D-738BD00ABF47__CIHJEIEE">
<p class="titleinexample">Example 2-16 Declaring Variable of Same Type as Another Variable</p>
<p>In this example, the variable <code class="codeph">surname</code> inherits the data type, size, and <code class="codeph">NOT</code> <code class="codeph">NULL</code> constraint of the variable <code class="codeph">name</code>. Because <code class="codeph">surname</code> does not inherit the initial value of <code class="codeph">name</code>, its declaration needs an initial value (which cannot exceed 25 characters).</p>
<pre dir="ltr">DECLARE
  name     VARCHAR(25) NOT NULL := &#39;Smith&#39;;
  surname  name%TYPE <span class="bold">:= &#39;Jones&#39;</span>;
BEGIN
  DBMS_OUTPUT.PUT_LINE(&#39;name=&#39; || name);
  DBMS_OUTPUT.PUT_LINE(&#39;surname=&#39; || surname);
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">name=Smith
surname=Jones
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="LNPLS183"></a>
<div class="props_rev_3"><a id="GUID-397990B7-9C45-4D37-A8A4-478FC116E898"></a>
<h2 id="LNPLS-GUID-397990B7-9C45-4D37-A8A4-478FC116E898" class="sect2">References to Identifiers</h2>
<div>
<p>When referencing an identifier, you use a name that is either simple, qualified, remote, or both qualified and remote.</p>
<p>The <span class="bold">simple name</span> of an identifier is the name in its declaration. For example:</p>
<pre dir="ltr">DECLARE
  <span class="bold">a</span> INTEGER;  -- Declaration
BEGIN
  <span class="bold">a</span> := 1;     -- Reference with simple name
END;
/
</pre>
<p>If an identifier is declared in a named PL/SQL unit, you can (and sometimes must) reference it with its <span class="bold">qualified name</span>. The syntax (called <span class="bold">dot notation</span>) is:</p>
<pre dir="ltr"><span class="italic">unit_name</span>.<span class="italic">simple_identifier_name</span>
</pre>
<p>For example, if package <code class="codeph">p</code> declares identifier <code class="codeph">a</code>, you can reference the identifier with the qualified name <code class="codeph">p</code>.<code class="codeph">a</code>. The unit name also can (and sometimes must) be qualified. You <span class="italic">must</span> qualify an identifier when it is not visible (see <span class="q">&#34;<a href="fundamentals.htm#GUID-2FC17012-FC99-4614-90DD-ADC99F2EDBE9" title="The scope of an identifier is the region of a PL/SQL unit from which you can reference the identifier. The visibility of an identifier is the region of a PL/SQL unit from which you can reference the identifier without qualifying it. An identifier is local to the PL/SQL unit that declares it. If that unit has subunits, the identifier is global to them.">Scope and Visibility of Identifiers</a>&#34;</span>).</p>
<p>If the identifier names an object on a remote database, you must reference it with its <span class="bold">remote name</span>. The syntax is:</p>
<pre dir="ltr"><span class="italic">simple_identifier_name</span>@<span class="italic">link_to_remote_database</span>
</pre>
<p>If the identifier is declared in a PL/SQL unit on a remote database, you must reference it with its <span class="bold">qualified remote name</span>. The syntax is:</p>
<pre dir="ltr"><span class="italic">unit_name</span>.<span class="italic">simple_identifier_name</span>@<span class="italic">link_to_remote_database</span>
</pre>
<p>You can create synonyms for remote schema objects, but you cannot create synonyms for objects declared in PL/SQL subprograms or packages. To create a synonym, use the SQL statement <code class="codeph">CREATE</code> <code class="codeph">SYNONYM</code>, explained in <a class="olink SQLRF01401" target="_blank" href="../SQLRF/statements_7001.htm#SQLRF01401"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<p>For information about how PL/SQL resolves ambiguous names, see <a href="nameresolution.htm#GUID-7A77C7A5-F6BE-49F4-A398-EDD8646CE2C9">PL/SQL Name Resolution</a>.</p>
<div class="infobox-note" id="GUID-397990B7-9C45-4D37-A8A4-478FC116E898__GUID-34FC4190-DD9C-40EC-8033-9F813A43DBCD">
<p class="notep1">Note:</p>
<p>You can reference identifiers declared in the packages <code class="codeph">STANDARD</code> and <code class="codeph">DBMS_STANDARD</code> without qualifying them with the package names, unless you have declared a local identifier with the same name (see <span class="q">&#34;<a href="fundamentals.htm#GUID-2FC17012-FC99-4614-90DD-ADC99F2EDBE9" title="The scope of an identifier is the region of a PL/SQL unit from which you can reference the identifier. The visibility of an identifier is the region of a PL/SQL unit from which you can reference the identifier without qualifying it. An identifier is local to the PL/SQL unit that declares it. If that unit has subunits, the identifier is global to them.">Scope and Visibility of Identifiers</a>&#34;</span>).</p>
</div>
</div>
</div>
<a id="LNPLS193"></a><a id="LNPLS195"></a><a id="LNPLS196"></a><a id="LNPLS229"></a><a id="LNPLS197"></a><a id="LNPLS198"></a><a id="LNPLS199"></a><a id="LNPLS99945"></a>
<div class="props_rev_3"><a id="GUID-2FC17012-FC99-4614-90DD-ADC99F2EDBE9"></a>
<h2 id="LNPLS-GUID-2FC17012-FC99-4614-90DD-ADC99F2EDBE9" class="sect2">Scope and Visibility of Identifiers</h2>
<div>
<p>The <span class="bold">scope</span> of an identifier is the region of a PL/SQL unit from which you can reference the identifier. The <span class="bold">visibility</span> of an identifier is the region of a PL/SQL unit from which you can reference the identifier without qualifying it. An identifier is <span class="bold">local</span> to the PL/SQL unit that declares it. If that unit has subunits, the identifier is <span class="bold">global</span> to them.</p>
<p>If a subunit redeclares a global identifier, then inside the subunit, both identifiers are in scope, but only the local identifier is visible. To reference the global identifier, the subunit must qualify it with the name of the unit that declared it. If that unit has no name, then the subunit cannot reference the global identifier.</p>
<p>A PL/SQL unit cannot reference identifiers declared in other units at the same level, because those identifiers are neither local nor global to the block.</p>
<p>You cannot declare the same identifier twice in the same PL/SQL unit. If you do, an error occurs when you reference the duplicate identifier.</p>
<p>You can declare the same identifier in two different units. The two objects represented by the identifier are distinct. Changing one does not affect the other.</p>
<p>In the same scope, give labels and subprograms unique names to avoid confusion and unexpected results.</p>
<div class="section">
<p class="subhead2">Examples</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-2FC17012-FC99-4614-90DD-ADC99F2EDBE9__BEIGJIBA">
<p class="titleinexample">Example 2-17 Scope and Visibility of Identifiers</p>
<p>This example shows the scope and visibility of several identifiers. The first sub-block redeclares the global identifier <code class="codeph">a</code>. To reference the global variable <code class="codeph">a</code>, the first sub-block would have to qualify it with the name of the outer block&mdash;but the outer block has no name. Therefore, the first sub-block cannot reference the global variable <code class="codeph">a</code>; it can reference only its local variable <code class="codeph">a</code>. Because the sub-blocks are at the same level, the first sub-block cannot reference <code class="codeph">d</code>, and the second sub-block cannot reference <code class="codeph">c</code>.</p>
<pre dir="ltr">-- Outer block:
DECLARE
  <span class="bold">a CHAR;</span>  -- Scope of a (CHAR) begins
  b REAL;    -- Scope of b begins
BEGIN
  -- Visible: a (CHAR), b
  
  -- First sub-block:
  DECLARE
    <span class="bold">a INTEGER;</span>  -- Scope of a (INTEGER) begins
    c REAL;       -- Scope of c begins
  BEGIN
    -- Visible: a (INTEGER), b, c
    NULL;
  END;          -- Scopes of a (INTEGER) and c end

  -- Second sub-block:
  DECLARE
    d REAL;     -- Scope of d begins
  BEGIN
    -- Visible: a (CHAR), b, d
    NULL;
  END;          -- Scope of d ends

-- Visible: a (CHAR), b
END;            -- Scopes of a (CHAR) and b end
/
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-2FC17012-FC99-4614-90DD-ADC99F2EDBE9__CIHEFEEH">
<p class="titleinexample">Example 2-18 Qualifying Redeclared Global Identifier with Block Label</p>
<p>This example labels the outer block with the name <code class="codeph">outer</code>. Therefore, after the sub-block redeclares the global variable <code class="codeph">birthdate</code>, it can reference that global variable by qualifying its name with the block label. The sub-block can also reference its local variable <code class="codeph">birthdate</code>, by its simple name.</p>
<pre dir="ltr">&lt;&lt;<span class="bold">outer</span>&gt;&gt;  -- label
DECLARE
  <span class="bold">birthdate</span> DATE := TO_DATE(&#39;09-AUG-70&#39;, &#39;DD-MON-YY&#39;);
BEGIN
  DECLARE
    <span class="bold">birthdate</span> DATE := TO_DATE(&#39;29-SEP-70&#39;, &#39;DD-MON-YY&#39;);
  BEGIN
    IF <span class="bold">birthdate</span> = <span class="bold">outer.birthdate</span> THEN
      DBMS_OUTPUT.PUT_LINE (&#39;Same Birthday&#39;);
    ELSE
      DBMS_OUTPUT.PUT_LINE (&#39;Different Birthday&#39;);
    END IF;
  END;
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">Different Birthday
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-2FC17012-FC99-4614-90DD-ADC99F2EDBE9__CIHIGGDA">
<p class="titleinexample">Example 2-19 Qualifying Identifier with Subprogram Name</p>
<p>In this example, the procedure <code class="codeph">check_credit</code> declares a variable, <code class="codeph">rating</code>, and a function, <code class="codeph">check_rating</code>. The function redeclares the variable. Then the function references the global variable by qualifying it with the procedure name.</p>
<pre dir="ltr">CREATE OR REPLACE PROCEDURE check_credit (credit_limit NUMBER) AS
  <span class="bold">rating</span> NUMBER := 3;
  
  FUNCTION check_rating RETURN BOOLEAN IS
    <span class="bold">rating</span>  NUMBER := 1;
    over_limit  BOOLEAN;
  BEGIN
    IF <span class="bold">check_credit.rating</span> &lt;= credit_limit THEN  -- reference global variable
      over_limit := FALSE;
    ELSE
      over_limit := TRUE;
      <span class="bold">rating</span> := credit_limit;                    -- reference local variable
    END IF;
    RETURN over_limit;
  END check_rating;
BEGIN
  IF check_rating THEN
    DBMS_OUTPUT.PUT_LINE
      (&#39;Credit rating over limit (&#39; || TO_CHAR(credit_limit) || &#39;).  &#39;
      || &#39;Rating: &#39; || TO_CHAR(rating));
  ELSE
    DBMS_OUTPUT.PUT_LINE
      (&#39;Credit rating OK.  &#39; || &#39;Rating: &#39; || TO_CHAR(rating));
  END IF;
END;
/
 
BEGIN
  check_credit(1);
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">Credit rating over limit (1).  Rating: 3
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-2FC17012-FC99-4614-90DD-ADC99F2EDBE9__BEIFFHGF">
<p class="titleinexample">Example 2-20 Duplicate Identifiers in Same Scope</p>
<p>You cannot declare the same identifier twice in the same PL/SQL unit. If you do, an error occurs when you reference the duplicate identifier, as this example shows.</p>
<pre dir="ltr">DECLARE
  id  BOOLEAN;
  id  VARCHAR2(5);  -- duplicate identifier
BEGIN
  <span class="bold">id := FALSE;</span>
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">  id := FALSE;
  *
ERROR at line 5:
ORA-06550: line 5, column 3:
PLS-00371: at most one declaration for &#39;ID&#39; is permitted
ORA-06550: line 5, column 3:
PL/SQL: Statement ignored
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-2FC17012-FC99-4614-90DD-ADC99F2EDBE9__CIHHIDJI">
<p class="titleinexample">Example 2-21 Declaring Same Identifier in Different Units</p>
<p>You can declare the same identifier in two different units. The two objects represented by the identifier are distinct. Changing one does not affect the other, as this example shows. In the same scope, give labels and subprograms unique names to avoid confusion and unexpected results.</p>
<pre dir="ltr">DECLARE
  PROCEDURE p
  IS
    <span class="bold">x</span> VARCHAR2(1);
  BEGIN
    <span class="bold">x := &#39;a&#39;;</span>  -- Assign the value &#39;a&#39; to x
    DBMS_OUTPUT.PUT_LINE(&#39;In procedure p, x = &#39; || x);
  END;
 
  PROCEDURE q
  IS
    <span class="bold">x</span> VARCHAR2(1);
  BEGIN
    <span class="bold">x := &#39;b&#39;;</span>  -- Assign the value &#39;b&#39; to x
    DBMS_OUTPUT.PUT_LINE(&#39;In procedure q, x = &#39; || x);
  END;
 
BEGIN
  p;
  q;
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">In procedure p, x = a
In procedure q, x = b
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-2FC17012-FC99-4614-90DD-ADC99F2EDBE9__CIHIHCEJ">
<p class="titleinexample">Example 2-22 Label and Subprogram with Same Name in Same Scope</p>
<p>In this example, <code class="codeph">echo</code> is the name of both a block and a subprogram. Both the block and the subprogram declare a variable named <code class="codeph">x</code>. In the subprogram, <code class="codeph">echo</code>.<code class="codeph">x</code> refers to the local variable <code class="codeph">x</code>, not to the global variable <code class="codeph">x</code>.</p>
<pre dir="ltr">&lt;&lt;<span class="bold">echo</span>&gt;&gt;
DECLARE
  <span class="bold">x</span>  NUMBER := 5;
  
  PROCEDURE <span class="bold">echo</span> AS
    <span class="bold">x</span>  NUMBER := 0;
  BEGIN
    DBMS_OUTPUT.PUT_LINE(&#39;x = &#39; || x);
    DBMS_OUTPUT.PUT_LINE(&#39;echo.x = &#39; || echo.x);
  END;
 
BEGIN
  echo;
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">x = 0
echo.x = 0
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-2FC17012-FC99-4614-90DD-ADC99F2EDBE9__CJAGDGJE">
<p class="titleinexample">Example 2-23 Block with Multiple and Duplicate Labels</p>
<p>This example has two labels for the outer block, <code class="codeph">compute_ratio</code> and <code class="codeph">another_label</code>. The second label appears again in the inner block. In the inner block, <code class="codeph">another_label</code>.<code class="codeph">denominator</code> refers to the local variable <code class="codeph">denominator</code>, not to the global variable <code class="codeph">denominator</code>, which results in the error <code class="codeph">ZERO_DIVIDE</code>.</p>
<pre dir="ltr"><span class="bold">&lt;&lt;compute_ratio&gt;&gt;</span>
<span class="bold">&lt;&lt;another_label&gt;&gt;</span>
DECLARE
  numerator   NUMBER := 22;
  <span class="bold">denominator NUMBER := 7;</span>
BEGIN
  <span class="bold">&lt;&lt;another_label&gt;&gt;</span>
  DECLARE
    <span class="bold">denominator NUMBER := 0;</span>
  BEGIN
    DBMS_OUTPUT.PUT_LINE(&#39;Ratio with compute_ratio.denominator = &#39;);
    DBMS_OUTPUT.PUT_LINE(numerator/<span class="bold">compute_ratio.denominator</span>);
 
    DBMS_OUTPUT.PUT_LINE(&#39;Ratio with another_label.denominator = &#39;);
    DBMS_OUTPUT.PUT_LINE(numerator/<span class="bold">another_label.denominator</span>);
 
  EXCEPTION
    WHEN ZERO_DIVIDE THEN
      DBMS_OUTPUT.PUT_LINE(&#39;Divide-by-zero error: can&#39;&#39;t divide &#39;
        || numerator || &#39; by &#39; || denominator);
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE(&#39;Unexpected error.&#39;);
  END another_label;
END compute_ratio;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">Ratio with compute_ratio.denominator =
3.14285714285714285714285714285714285714
<span class="bold">Ratio with another_label.denominator =</span>
<span class="bold">Divide-by-zero error: cannot divide 22 by 0</span>
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS200"></a><a id="LNPLS00205"></a>
<div class="props_rev_3"><a id="GUID-356CB656-68ED-4869-8C67-FE93A78AEC9A"></a>
<h2 id="LNPLS-GUID-356CB656-68ED-4869-8C67-FE93A78AEC9A" class="sect2">Assigning Values to Variables</h2>
<div>
<div class="section">
<p>After declaring a variable, you can assign a value to it in these ways:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>Use the assignment statement to assign it the value of an expression.</p>
</li>
<li>
<p>Use the <code class="codeph">SELECT</code> <code class="codeph">INTO</code> or <code class="codeph">FETCH</code> statement to assign it a value from a table.</p>
</li>
<li>
<p>Pass it to a subprogram as an <code class="codeph">OUT</code> or <code class="codeph">IN</code> <code class="codeph">OUT</code> parameter, and then assign the value inside the subprogram.</p>
</li>
</ul>
<p>The variable and the value must have compatible data types. One data type is <span class="bold">compatible</span> with another data type if it can be implicitly converted to that type. For information about implicit data conversion, see <a class="olink SQLRF51047" target="_blank" href="../SQLRF/sql_elements002.htm#SQLRF51047"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">Topics</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="fundamentals.htm#GUID-B91BEA99-974B-4CE7-8B28-A5B78A6918F7">Assigning Values to Variables with the Assignment Statement</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-EDB2297F-A80D-48B3-8EF1-5437BF981CC2">Assigning Values to Variables with the SELECT INTO Statement</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-664BFFEA-063A-48B6-A65B-95225EDDED59">Assigning Values to Variables as Parameters of a Subprogram</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-A97996A5-9CBF-41F6-B50A-0238FF645FA1">Assigning Values to BOOLEAN Variables</a></p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-356CB656-68ED-4869-8C67-FE93A78AEC9A__GUID-E23BF0E8-D70E-4530-92FD-3433E835374B">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="composites.htm#GUID-7836EEC3-2642-4CF8-AA50-81034855119D" title="You can assign a collection to a collection variable only if they have the same data type. Having the same element type is not enough.To a varray or nested table variable, you can assign the value NULL or a null collection of the same data type. Either assignment makes the variable null.To a nested table variable, you can assign the result of a SQL MULTISET operation or SQL SET function invocation.">Assigning Values to Collection Variables</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="composites.htm#GUID-794AD0D6-2D97-4C4A-B7DA-6126025EF2A5" title="A record variable means either a record variable or a record component of a composite variable.">Assigning Values to Record Variables</a>&#34;</span></p>
</li>
<li>
<p><span class="q">&#34;<a href="fetch_statement.htm#GUID-75BC6E63-841A-4103-9B96-8AC97F5C28BB" title="The FETCH statement retrieves rows of data from the result set of a multiple-row query&mdash;one row at a time, several rows at a time, or all rows at once&mdash;and stores the data in variables, records, or collections.">FETCH Statement</a>&#34;</span></p>
</li>
</ul>
</div>
</div>
<!-- class="section" --></div>
<a id="LNPLS202"></a><a id="LNPLS201"></a>
<div class="props_rev_3"><a id="GUID-B91BEA99-974B-4CE7-8B28-A5B78A6918F7"></a>
<h3 id="LNPLS-GUID-B91BEA99-974B-4CE7-8B28-A5B78A6918F7" class="sect3">Assigning Values to Variables with the Assignment Statement</h3>
<div>
<div class="section">
<p>To assign the value of an expression to a variable, use this form of the assignment statement:</p>
<pre dir="ltr"><span class="italic">variable_name</span> := <span class="italic">expression</span>;
</pre>
<p>For the complete syntax of the assignment statement, see <span class="q">&#34;<a href="assignment_statement.htm#GUID-4C3BEFDF-3FFA-4E9D-96D0-4C5E13E08643" title="The assignment statement sets the value of a data item to a valid value.">Assignment Statement</a>&#34;</span>.</p>
<p>For the syntax of an expression, see <span class="q">&#34;<a href="expression.htm#GUID-D4700B45-F2C8-443E-AEE7-2BD20FFD45B8" title="An expression is an arbitrarily complex combination of operands (variables, constants, literals, operators, function invocations, and placeholders) and operators.">Expression</a>&#34;</span>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-B91BEA99-974B-4CE7-8B28-A5B78A6918F7__BABBDCEC">
<p class="titleinexample">Example 2-24 Assigning Values to Variables with Assignment Statement</p>
<p>This example declares several variables (specifying initial values for some) and then uses assignment statements to assign the values of expressions to them.</p>
<pre dir="ltr">DECLARE  -- You can assign initial values here
  wages          NUMBER;
  hours_worked   NUMBER := 40;
  hourly_salary  NUMBER := 22.50;
  bonus          NUMBER := 150;
  country        VARCHAR2(128);
  counter        NUMBER := 0;
  done           BOOLEAN;
  valid_id       BOOLEAN;
  emp_rec1       employees%ROWTYPE;
  emp_rec2       employees%ROWTYPE;
  TYPE commissions IS TABLE OF NUMBER INDEX BY PLS_INTEGER;
  comm_tab       commissions;
 
BEGIN  -- You can assign values here too
  wages := (hours_worked * hourly_salary) + bonus;
  country := &#39;France&#39;;
  country := UPPER(&#39;Canada&#39;);
  done := (counter &gt; 100);
  valid_id := TRUE;
  emp_rec1.first_name := &#39;Antonio&#39;;
  emp_rec1.last_name := &#39;Ortiz&#39;;
  emp_rec1 := emp_rec2;
  comm_tab(5) := 20000 * 0.15;
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS150"></a><a id="LNPLS207"></a>
<div class="props_rev_3"><a id="GUID-EDB2297F-A80D-48B3-8EF1-5437BF981CC2"></a>
<h3 id="LNPLS-GUID-EDB2297F-A80D-48B3-8EF1-5437BF981CC2" class="sect3">Assigning Values to Variables with the SELECT INTO Statement</h3>
<div>
<div class="section">
<p>A simple form of the <code class="codeph">SELECT</code> <code class="codeph">INTO</code> statement is:</p>
<pre dir="ltr">SELECT <span class="italic">select_item</span> [, <span class="italic">select_item</span> ]... 
INTO <span class="italic">variable_name</span> [, <span class="italic">variable_name</span> ]...
FROM <span class="italic">table_name</span>;
</pre>
<p>For each <span class="italic"><code class="codeph">select_item</code></span>, there must be a corresponding, type-compatible <span class="italic"><code class="codeph">variable_name</code></span>. Because SQL does not have a <code class="codeph">BOOLEAN</code> type, <span class="italic"><code class="codeph">variable_name</code></span> cannot be a <code class="codeph">BOOLEAN</code> variable.</p>
<p>For the complete syntax of the <code class="codeph">SELECT</code> <code class="codeph">INTO</code> statement, see <span class="q">&#34;<a href="selectinto_statement.htm#GUID-6E14E04D-4344-45F3-BE80-979DD26C7A90" title="The SELECT INTO statement retrieves values from one or more database tables (as the SQL SELECT statement does) and stores them in variables (which the SQL SELECT statement does not do).">SELECT INTO Statement</a>&#34;</span>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-EDB2297F-A80D-48B3-8EF1-5437BF981CC2__BABHFEHA">
<p class="titleinexample">Example 2-25 Assigning Value to Variable with SELECT INTO Statement</p>
<p>This example uses a <code class="codeph">SELECT</code> <code class="codeph">INTO</code> statement to assign to the variable <code class="codeph">bonus</code> the value that is 10% of the salary of the employee whose <code class="codeph">employee_id</code> is 100.</p>
<pre dir="ltr">DECLARE
  bonus   NUMBER(8,2);
BEGIN
  <span class="bold">SELECT salary * 0.10 INTO bonus</span>
  <span class="bold">FROM employees</span>
  <span class="bold">WHERE employee_id = 100;</span>
END;

DBMS_OUTPUT.PUT_LINE(&#39;bonus = &#39; || TO_CHAR(bonus));
/
</pre>
<p>Result:</p>
<pre dir="ltr">bonus = 2400
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS151"></a><a id="LNPLS209"></a>
<div class="props_rev_3"><a id="GUID-664BFFEA-063A-48B6-A65B-95225EDDED59"></a>
<h3 id="LNPLS-GUID-664BFFEA-063A-48B6-A65B-95225EDDED59" class="sect3">Assigning Values to Variables as Parameters of a Subprogram</h3>
<div>
<div class="section">
<p>If you pass a variable to a subprogram as an <code class="codeph">OUT</code> or <code class="codeph">IN</code> <code class="codeph">OUT</code> parameter, and the subprogram assigns a value to the parameter, the variable retains that value after the subprogram finishes running. For more information, see <span class="q">&#34;<a href="subprograms.htm#GUID-C0397690-70F4-480D-ADC9-02D277DAA1BB">Subprogram Parameters</a>&#34;</span>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-664BFFEA-063A-48B6-A65B-95225EDDED59__BABIIBDF">
<p class="titleinexample">Example 2-26 Assigning Value to Variable as IN OUT Subprogram Parameter</p>
<p>This example passes the variable <code class="codeph">new_sal</code> to the procedure <code class="codeph">adjust_salary</code>. The procedure assigns a value to the corresponding formal parameter, <code class="codeph">sal</code>. Because <code class="codeph">sal</code> is an <code class="codeph">IN</code> <code class="codeph">OUT</code> parameter, the variable <code class="codeph">new_sal</code> retains the assigned value after the procedure finishes running.</p>
<pre dir="ltr">DECLARE
  emp_salary  NUMBER(8,2);
 
  PROCEDURE adjust_salary (
    emp        NUMBER, 
    sal IN OUT NUMBER,
    adjustment NUMBER
  ) IS
  BEGIN
    sal := sal + adjustment;
  END;
 
BEGIN
  SELECT salary INTO emp_salary
  FROM employees
  WHERE employee_id = 100;
 
  DBMS_OUTPUT.PUT_LINE
   (&#39;Before invoking procedure, emp_salary: &#39; || emp_salary);
 
  adjust_salary (100, emp_salary, 1000);
 
  DBMS_OUTPUT.PUT_LINE
   (&#39;After invoking procedure, emp_salary: &#39; || emp_salary);
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">Before invoking procedure, emp_salary: 24000
After invoking procedure, emp_salary: 25000
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS243"></a><a id="LNPLS242"></a>
<div class="props_rev_3"><a id="GUID-A97996A5-9CBF-41F6-B50A-0238FF645FA1"></a>
<h3 id="LNPLS-GUID-A97996A5-9CBF-41F6-B50A-0238FF645FA1" class="sect3">Assigning Values to BOOLEAN Variables</h3>
<div>
<div class="section">
<p>The only values that you can assign to a <code class="codeph">BOOLEAN</code> variable are <code class="codeph">TRUE</code>, <code class="codeph">FALSE</code>, and <code class="codeph">NULL</code>.</p>
<p>For more information about the <code class="codeph">BOOLEAN</code> data type, see <span class="q">&#34;<a href="datatypes.htm#GUID-02AEA63C-9A27-43F4-80B7-4781343445D0">BOOLEAN Data Type</a>&#34;</span>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-A97996A5-9CBF-41F6-B50A-0238FF645FA1__CIHEFBAD">
<p class="titleinexample">Example 2-27 Assigning Value to BOOLEAN Variable</p>
<p>This example initializes the <code class="codeph">BOOLEAN</code> variable <code class="codeph">done</code> to <code class="codeph">NULL</code> by default, assigns it the literal value <code class="codeph">FALSE</code>, compares it to the literal value <code class="codeph">TRUE</code>, and assigns it the value of a <code class="codeph">BOOLEAN</code> expression.</p>
<pre dir="ltr">DECLARE
  <span class="bold">done    BOOLEAN;              -- Initial value is NULL by default</span>
  counter NUMBER := 0;
BEGIN
  <span class="bold">done := FALSE;                -- Assign literal value</span>
  WHILE <span class="bold">done != TRUE            -- Compare to literal value</span>
    LOOP
      counter := counter + 1;
      <span class="bold">done := (counter &gt; 500);  -- Assign value of BOOLEAN expression</span>
    END LOOP;
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="LNPLS211"></a><a id="LNPLS00206"></a>
<div class="props_rev_3"><a id="GUID-42674F8E-55C3-44D5-BA42-47B323CD74F5"></a>
<h2 id="LNPLS-GUID-42674F8E-55C3-44D5-BA42-47B323CD74F5" class="sect2">Expressions</h2>
<div>
<p>An&nbsp;expression&nbsp;is a combination of one or more values, operators, and SQL functions that evaluates to a value.</p>
<p>An expression always returns a single value. The simplest expressions, in order of increasing complexity, are:</p>
<ol>
<li>
<p>A single constant or variable (for example, <code class="codeph">a</code>)</p>
</li>
<li>
<p>A unary operator and its single operand (for example, <code class="codeph">-a</code>)</p>
</li>
<li>
<p>A binary operator and its two operands (for example, <code class="codeph">a+b</code>)</p>
</li>
</ol>
<p>An <span class="bold">operand</span> can be a variable, constant, literal, operator, function invocation, or placeholder&mdash;or another expression. Therefore, expressions can be arbitrarily complex. For expression syntax, see <a href="expression.htm#GUID-D4700B45-F2C8-443E-AEE7-2BD20FFD45B8" title="An expression is an arbitrarily complex combination of operands (variables, constants, literals, operators, function invocations, and placeholders) and operators.">Expression</a>.</p>
<p>The data types of the operands determine the data type of the expression. Every time the expression is evaluated, a single value of that data type results. The data type of that result is the data type of the expression.</p>
<div class="section">
<p class="subhead2">Topics</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="fundamentals.htm#GUID-4792284C-D82B-4F6A-8554-45CF1BFAE6EB" title="The concatenation operator (||) appends one string operand to another.">Concatenation Operator</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-65EAAB52-8E2C-45E1-B004-CA00A942FF0C" title="An operation is either a unary operator and its single operand or a binary operator and its two operands. The operations in an expression are evaluated in order of operator precedence.">Operator Precedence</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-9D19FEBB-A397-47F5-A4EC-D71B0DE91738" title="The logical operators AND, OR, and NOT follow a tri-state logic.">Logical Operators</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-26565CE3-726A-4E29-8A24-1F6AD8EC780B" title="When evaluating a logical expression, PL/SQL uses short-circuit evaluation. That is, PL/SQL stops evaluating the expression as soon as it can determine the result.">Short-Circuit Evaluation</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-319604CE-DC1C-49DF-9377-007C312F3B32" title="Comparison operators compare one expression to another. The result is always either TRUE, FALSE, or NULL.">Comparison Operators</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-E277B6FF-866F-486A-BCB1-58235C0AFC69" title="A BOOLEAN expression is an expression that returns a BOOLEAN value&mdash;TRUE, FALSE, or NULL.">BOOLEAN Expressions</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-216F1B33-493F-4CDE-93BB-096BACA8523E">CASE Expressions</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-828EB30D-32B4-49E3-90D5-9302172D6EC2">SQL Functions in PL/SQL Expressions</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="LNPLS247"></a><a id="LNPLS212"></a><a id="LNPLS246"></a>
<div class="props_rev_3"><a id="GUID-4792284C-D82B-4F6A-8554-45CF1BFAE6EB"></a>
<h3 id="LNPLS-GUID-4792284C-D82B-4F6A-8554-45CF1BFAE6EB" class="sect3">Concatenation Operator</h3>
<div>
<p>The concatenation operator (<code class="codeph">||</code>) appends one string operand to another.</p>
<p>The concatenation operator ignores null operands, as <a href="fundamentals.htm#GUID-4792284C-D82B-4F6A-8554-45CF1BFAE6EB__CIHFJBCJ">Example 2-29</a> shows.</p>
<p>For more information about the syntax of the concatenation operator, see <span class="q">&#34;<a href="expression.htm#GUID-D4700B45-F2C8-443E-AEE7-2BD20FFD45B8__CHDGJCJE">character_expression ::=</a>&#34;</span>.</p>
<div class="example" id="GUID-4792284C-D82B-4F6A-8554-45CF1BFAE6EB__CIHEGDBG">
<p class="titleinexample">Example 2-28 Concatenation Operator</p>
<pre dir="ltr">DECLARE
  <span class="bold">x VARCHAR2(4) := &#39;suit&#39;;</span>
  <span class="bold">y VARCHAR2(4) := &#39;case&#39;;</span>
BEGIN
  DBMS_OUTPUT.PUT_LINE (<span class="bold">x || y</span>);
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr"><span class="bold">suitcase</span>
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-4792284C-D82B-4F6A-8554-45CF1BFAE6EB__CIHFJBCJ">
<p class="titleinexample">Example 2-29 Concatenation Operator with NULL Operands</p>
<pre dir="ltr">BEGIN
  DBMS_OUTPUT.PUT_LINE (&#39;apple&#39; || NULL || NULL || &#39;sauce&#39;);
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">applesauce
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS249"></a><a id="LNPLS213"></a><a id="LNPLS214"></a><a id="LNPLS215"></a><a id="LNPLS250"></a><a id="LNPLS248"></a>
<div class="props_rev_3"><a id="GUID-65EAAB52-8E2C-45E1-B004-CA00A942FF0C"></a>
<h3 id="LNPLS-GUID-65EAAB52-8E2C-45E1-B004-CA00A942FF0C" class="sect3">Operator Precedence</h3>
<div>
<p>An <span class="bold">operation</span> is either a unary operator and its single operand or a binary operator and its two operands. The operations in an expression are evaluated in order of operator precedence.</p>
<p><a href="fundamentals.htm#GUID-65EAAB52-8E2C-45E1-B004-CA00A942FF0C__G962825" title="This table shows the default order of operations.">Table 2-3</a> shows operator precedence from highest to lowest. Operators with equal precedence are evaluated in no particular order.</p>
<div class="tblformal" id="GUID-65EAAB52-8E2C-45E1-B004-CA00A942FF0C__G962825">
<p class="titleintable">Table 2-3 Operator Precedence</p>
<table class="cellalignment876" title="Operator Precedence" summary="This table shows the default order of operations.">
<thead>
<tr class="cellalignment870">
<th class="cellalignment906" id="d12034e5752">Operator</th>
<th class="cellalignment888" id="d12034e5755">Operation</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment870">
<td class="cellalignment907" id="d12034e5760" headers="d12034e5752">
<p><code class="codeph">**</code></p>
</td>
<td class="cellalignment892" headers="d12034e5760 d12034e5755">
<p>exponentiation</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment907" id="d12034e5768" headers="d12034e5752">
<p><code class="codeph">+</code>, <code class="codeph">-</code></p>
</td>
<td class="cellalignment892" headers="d12034e5768 d12034e5755">
<p>identity, negation</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment907" id="d12034e5779" headers="d12034e5752">
<p><code class="codeph">*</code>, <code class="codeph">/</code></p>
</td>
<td class="cellalignment892" headers="d12034e5779 d12034e5755">
<p>multiplication, division</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment907" id="d12034e5790" headers="d12034e5752">
<p><code class="codeph">+</code>, <code class="codeph">-</code>, <code class="codeph">||</code></p>
</td>
<td class="cellalignment892" headers="d12034e5790 d12034e5755">
<p>addition, subtraction, concatenation</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment907" id="d12034e5804" headers="d12034e5752">
<p><code class="codeph">=</code>, <code class="codeph">&lt;</code>, <code class="codeph">&gt;</code>, <code class="codeph">&lt;=</code>, <code class="codeph">&gt;=</code>, <code class="codeph">&lt;&gt;</code>, <code class="codeph">!=</code>, <code class="codeph">~=</code>, <code class="codeph">^=</code>, <code class="codeph">IS</code> <code class="codeph">NULL</code>, <code class="codeph">LIKE</code>, <code class="codeph">BETWEEN</code>, <code class="codeph">IN</code></p>
</td>
<td class="cellalignment892" headers="d12034e5804 d12034e5755">
<p>comparison</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment907" id="d12034e5853" headers="d12034e5752">
<p><code class="codeph">NOT</code></p>
</td>
<td class="cellalignment892" headers="d12034e5853 d12034e5755">
<p>negation</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment907" id="d12034e5861" headers="d12034e5752">
<p><code class="codeph">AND</code></p>
</td>
<td class="cellalignment892" headers="d12034e5861 d12034e5755">
<p>conjunction</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment907" id="d12034e5869" headers="d12034e5752">
<p><code class="codeph">OR</code></p>
</td>
<td class="cellalignment892" headers="d12034e5869 d12034e5755">
<p>inclusion</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>To control the order of evaluation, enclose operations in parentheses, as in <a href="fundamentals.htm#GUID-65EAAB52-8E2C-45E1-B004-CA00A942FF0C__CIHGCAFE">Example 2-30</a>.</p>
<p>When parentheses are nested, the most deeply nested operations are evaluated first.</p>
<p>In <a href="fundamentals.htm#GUID-65EAAB52-8E2C-45E1-B004-CA00A942FF0C__CIHEIEHG">Example 2-31</a>, the operations (1+2) and (3+4) are evaluated first, producing the values 3 and 7, respectively. Next, the operation 3*7 is evaluated, producing the result 21. Finally, the operation 21/7 is evaluated, producing the final value 3.</p>
<p>You can also use parentheses to improve readability, as in <a href="fundamentals.htm#GUID-65EAAB52-8E2C-45E1-B004-CA00A942FF0C__CIHBDCGA">Example 2-32</a>, where the parentheses do not affect evaluation order.</p>
<p><a href="fundamentals.htm#GUID-65EAAB52-8E2C-45E1-B004-CA00A942FF0C__CIHIIGAG">Example 2-33</a> shows the effect of operator precedence and parentheses in several more complex expressions.</p>
<div class="example" id="GUID-65EAAB52-8E2C-45E1-B004-CA00A942FF0C__CIHGCAFE">
<p class="titleinexample">Example 2-30 Controlling Evaluation Order with Parentheses</p>
<pre dir="ltr">DECLARE
  a INTEGER := 1+2**2;
  b INTEGER := <span class="bold">(1+2)**2</span>;
BEGIN
  DBMS_OUTPUT.PUT_LINE(&#39;a = &#39; || TO_CHAR(a));
  DBMS_OUTPUT.PUT_LINE(&#39;b = &#39; || TO_CHAR(b));
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">a = 5
b = 9
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-65EAAB52-8E2C-45E1-B004-CA00A942FF0C__CIHEIEHG">
<p class="titleinexample">Example 2-31 Expression with Nested Parentheses</p>
<pre dir="ltr">DECLARE
  a INTEGER := <span class="bold">((1+2)*(3+4))/7</span>;
BEGIN
  DBMS_OUTPUT.PUT_LINE(&#39;a = &#39; || TO_CHAR(a));
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">a = 3
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-65EAAB52-8E2C-45E1-B004-CA00A942FF0C__CIHBDCGA">
<p class="titleinexample">Example 2-32 Improving Readability with Parentheses</p>
<pre dir="ltr">DECLARE
  a INTEGER := <span class="bold">2**2*3**2</span>;
  b INTEGER := <span class="bold">(2**2)*(3**2)</span>;
BEGIN
  DBMS_OUTPUT.PUT_LINE(&#39;a = &#39; || TO_CHAR(a));
  DBMS_OUTPUT.PUT_LINE(&#39;b = &#39; || TO_CHAR(b));
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">a = 36
b = 36
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-65EAAB52-8E2C-45E1-B004-CA00A942FF0C__CIHIIGAG">
<p class="titleinexample">Example 2-33 Operator Precedence</p>
<pre dir="ltr">DECLARE
  salary      NUMBER := 60000;
  commission  NUMBER := 0.10;
BEGIN
  -- Division has higher precedence than addition:
  
  DBMS_OUTPUT.PUT_LINE(&#39;5 + 12 / 4 = &#39; || TO_CHAR(5 + 12 / 4));
  DBMS_OUTPUT.PUT_LINE(&#39;12 / 4 + 5 = &#39; || TO_CHAR(12 / 4 + 5));
  
 -- Parentheses override default operator precedence:
 
  DBMS_OUTPUT.PUT_LINE(&#39;8 + 6 / 2 = &#39; || TO_CHAR(8 + 6 / 2));
  DBMS_OUTPUT.PUT_LINE(&#39;(8 + 6) / 2 = &#39; || TO_CHAR((8 + 6) / 2));
 
  -- Most deeply nested operation is evaluated first:
 
  DBMS_OUTPUT.PUT_LINE(&#39;100 + (20 / 5 + (7 - 3)) = &#39;
                      || TO_CHAR(100 + (20 / 5 + (7 - 3))));
 
  -- Parentheses, even when unnecessary, improve readability:
 
  DBMS_OUTPUT.PUT_LINE(&#39;(salary * 0.05) + (commission * 0.25) = &#39;
    || TO_CHAR((salary * 0.05) + (commission * 0.25))
  );
 
  DBMS_OUTPUT.PUT_LINE(&#39;salary * 0.05 + commission * 0.25 = &#39;
    || TO_CHAR(salary * 0.05 + commission * 0.25)
  );
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">5 + 12 / 4 = 8
12 / 4 + 5 = 8
8 + 6 / 2 = 11
(8 + 6) / 2 = 7
100 + (20 / 5 + (7 - 3)) = 108
(salary * 0.05) + (commission * 0.25) = 3000.025
salary * 0.05 + commission * 0.25 = 3000.025
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS252"></a><a id="LNPLS216"></a><a id="LNPLS253"></a><a id="LNPLS254"></a><a id="LNPLS255"></a><a id="LNPLS284"></a><a id="LNPLS285"></a><a id="LNPLS217"></a><a id="LNPLS257"></a><a id="LNPLS251"></a>
<div class="props_rev_3"><a id="GUID-9D19FEBB-A397-47F5-A4EC-D71B0DE91738"></a>
<h3 id="LNPLS-GUID-9D19FEBB-A397-47F5-A4EC-D71B0DE91738" class="sect3">Logical Operators</h3>
<div>
<p>The logical operators <code class="codeph">AND</code>, <code class="codeph">OR</code>, and <code class="codeph">NOT</code> follow a tri-state logic.</p>
<p><code class="codeph">AND</code> and <code class="codeph">OR</code> are binary operators; <code class="codeph">NOT</code> is a unary operator.</p>
<div class="tblformal" id="GUID-9D19FEBB-A397-47F5-A4EC-D71B0DE91738__CIHIICAC">
<p class="titleintable">Table 2-4 Logical Truth Table</p>
<table class="cellalignment876" title="Logical Truth Table" summary="This table summarizes the logical operators.">
<thead>
<tr class="cellalignment870">
<th class="cellalignment896" id="d12034e6067">x</th>
<th class="cellalignment896" id="d12034e6070">y</th>
<th class="cellalignment896" id="d12034e6073">x AND y</th>
<th class="cellalignment896" id="d12034e6076">x OR y</th>
<th class="cellalignment923" id="d12034e6079">NOT x</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment870">
<td class="cellalignment899" id="d12034e6084" headers="d12034e6067">
<p><code class="codeph">TRUE</code></p>
</td>
<td class="cellalignment899" headers="d12034e6084 d12034e6070">
<p><code class="codeph">TRUE</code></p>
</td>
<td class="cellalignment899" headers="d12034e6084 d12034e6073">
<p><code class="codeph">TRUE</code></p>
</td>
<td class="cellalignment899" headers="d12034e6084 d12034e6076">
<p><code class="codeph">TRUE</code></p>
</td>
<td class="cellalignment924" headers="d12034e6084 d12034e6079">
<p><code class="codeph">FALSE</code></p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment899" id="d12034e6105" headers="d12034e6067">
<p><code class="codeph">TRUE</code></p>
</td>
<td class="cellalignment899" headers="d12034e6105 d12034e6070">
<p><code class="codeph">FALSE</code></p>
</td>
<td class="cellalignment899" headers="d12034e6105 d12034e6073">
<p><code class="codeph">FALSE</code></p>
</td>
<td class="cellalignment899" headers="d12034e6105 d12034e6076">
<p><code class="codeph">TRUE</code></p>
</td>
<td class="cellalignment924" headers="d12034e6105 d12034e6079">
<p><code class="codeph">FALSE</code></p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment899" id="d12034e6126" headers="d12034e6067">
<p><code class="codeph">TRUE</code></p>
</td>
<td class="cellalignment899" headers="d12034e6126 d12034e6070">
<p><code class="codeph">NULL</code></p>
</td>
<td class="cellalignment899" headers="d12034e6126 d12034e6073">
<p><code class="codeph">NULL</code></p>
</td>
<td class="cellalignment899" headers="d12034e6126 d12034e6076">
<p><code class="codeph">TRUE</code></p>
</td>
<td class="cellalignment924" headers="d12034e6126 d12034e6079">
<p><code class="codeph">FALSE</code></p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment899" id="d12034e6147" headers="d12034e6067">
<p><code class="codeph">FALSE</code></p>
</td>
<td class="cellalignment899" headers="d12034e6147 d12034e6070">
<p><code class="codeph">TRUE</code></p>
</td>
<td class="cellalignment899" headers="d12034e6147 d12034e6073">
<p><code class="codeph">FALSE</code></p>
</td>
<td class="cellalignment899" headers="d12034e6147 d12034e6076">
<p><code class="codeph">TRUE</code></p>
</td>
<td class="cellalignment924" headers="d12034e6147 d12034e6079">
<p><code class="codeph">TRUE</code></p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment899" id="d12034e6168" headers="d12034e6067">
<p><code class="codeph">FALSE</code></p>
</td>
<td class="cellalignment899" headers="d12034e6168 d12034e6070">
<p><code class="codeph">FALSE</code></p>
</td>
<td class="cellalignment899" headers="d12034e6168 d12034e6073">
<p><code class="codeph">FALSE</code></p>
</td>
<td class="cellalignment899" headers="d12034e6168 d12034e6076">
<p><code class="codeph">FALSE</code></p>
</td>
<td class="cellalignment924" headers="d12034e6168 d12034e6079">
<p><code class="codeph">TRUE</code></p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment899" id="d12034e6189" headers="d12034e6067">
<p><code class="codeph">FALSE</code></p>
</td>
<td class="cellalignment899" headers="d12034e6189 d12034e6070">
<p><code class="codeph">NULL</code></p>
</td>
<td class="cellalignment899" headers="d12034e6189 d12034e6073">
<p><code class="codeph">FALSE</code></p>
</td>
<td class="cellalignment899" headers="d12034e6189 d12034e6076">
<p><code class="codeph">NULL</code></p>
</td>
<td class="cellalignment924" headers="d12034e6189 d12034e6079">
<p><code class="codeph">TRUE</code></p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment899" id="d12034e6210" headers="d12034e6067">
<p><code class="codeph">NULL</code></p>
</td>
<td class="cellalignment899" headers="d12034e6210 d12034e6070">
<p><code class="codeph">TRUE</code></p>
</td>
<td class="cellalignment899" headers="d12034e6210 d12034e6073">
<p><code class="codeph">NULL</code></p>
</td>
<td class="cellalignment899" headers="d12034e6210 d12034e6076">
<p><code class="codeph">TRUE</code></p>
</td>
<td class="cellalignment924" headers="d12034e6210 d12034e6079">
<p><code class="codeph">NULL</code></p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment899" id="d12034e6231" headers="d12034e6067">
<p><code class="codeph">NULL</code></p>
</td>
<td class="cellalignment899" headers="d12034e6231 d12034e6070">
<p><code class="codeph">FALSE</code></p>
</td>
<td class="cellalignment899" headers="d12034e6231 d12034e6073">
<p><code class="codeph">FALSE</code></p>
</td>
<td class="cellalignment899" headers="d12034e6231 d12034e6076">
<p><code class="codeph">NULL</code></p>
</td>
<td class="cellalignment924" headers="d12034e6231 d12034e6079">
<p><code class="codeph">NULL</code></p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment899" id="d12034e6252" headers="d12034e6067">
<p><code class="codeph">NULL</code></p>
</td>
<td class="cellalignment899" headers="d12034e6252 d12034e6070">
<p><code class="codeph">NULL</code></p>
</td>
<td class="cellalignment899" headers="d12034e6252 d12034e6073">
<p><code class="codeph">NULL</code></p>
</td>
<td class="cellalignment899" headers="d12034e6252 d12034e6076">
<p><code class="codeph">NULL</code></p>
</td>
<td class="cellalignment924" headers="d12034e6252 d12034e6079">
<p><code class="codeph">NULL</code></p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p><a href="fundamentals.htm#GUID-9D19FEBB-A397-47F5-A4EC-D71B0DE91738__CIHDAFEJ">Example 2-34</a> creates a procedure, <code class="codeph">print_boolean</code>, that prints the value of a <code class="codeph">BOOLEAN</code> variable. The procedure uses the <span class="q">&#34;<a href="fundamentals.htm#GUID-D02FA4D0-0074-4227-9624-F01E3D219BAB" title="The IS NULL operator returns the BOOLEAN value TRUE if its operand is NULL or FALSE if it is not NULL. The IS NOT NULL operator does the opposite.">IS [NOT] NULL Operator</a>&#34;</span>. Several examples in this chapter invoke <code class="codeph">print_boolean</code>.</p>
<p>As <a href="fundamentals.htm#GUID-9D19FEBB-A397-47F5-A4EC-D71B0DE91738__CIHIICAC" title="This table summarizes the logical operators.">Table 2-4</a> and <a href="fundamentals.htm#GUID-9D19FEBB-A397-47F5-A4EC-D71B0DE91738__CIHIIBAC">Example 2-35</a> show, <code class="codeph">AND</code> returns <code class="codeph">TRUE</code> if and only if both operands are <code class="codeph">TRUE</code>.</p>
<p>As <a href="fundamentals.htm#GUID-9D19FEBB-A397-47F5-A4EC-D71B0DE91738__CIHIICAC" title="This table summarizes the logical operators.">Table 2-4</a> and <a href="fundamentals.htm#GUID-9D19FEBB-A397-47F5-A4EC-D71B0DE91738__CIHDABEC">Example 2-36</a> show, <code class="codeph">OR</code> returns <code class="codeph">TRUE</code> if either operand is <code class="codeph">TRUE</code>. (<a href="fundamentals.htm#GUID-9D19FEBB-A397-47F5-A4EC-D71B0DE91738__CIHDABEC">Example 2-36</a> invokes the <code class="codeph">print_boolean</code> procedure from <a href="fundamentals.htm#GUID-9D19FEBB-A397-47F5-A4EC-D71B0DE91738__CIHIIBAC">Example 2-35</a>.)</p>
<p>As <a href="fundamentals.htm#GUID-9D19FEBB-A397-47F5-A4EC-D71B0DE91738__CIHIICAC" title="This table summarizes the logical operators.">Table 2-4</a> and <a href="fundamentals.htm#GUID-9D19FEBB-A397-47F5-A4EC-D71B0DE91738__CIHEBJED">Example 2-37</a> show, <code class="codeph">NOT</code> returns the opposite of its operand, unless the operand is <code class="codeph">NULL</code>. <code class="codeph">NOT</code> <code class="codeph">NULL</code> returns <code class="codeph">NULL</code>, because <code class="codeph">NULL</code> is an indeterminate value. (<a href="fundamentals.htm#GUID-9D19FEBB-A397-47F5-A4EC-D71B0DE91738__CIHEBJED">Example 2-37</a> invokes the <code class="codeph">print_boolean</code> procedure from <a href="fundamentals.htm#GUID-9D19FEBB-A397-47F5-A4EC-D71B0DE91738__CIHIIBAC">Example 2-35</a>.)</p>
<p>In <a href="fundamentals.htm#GUID-9D19FEBB-A397-47F5-A4EC-D71B0DE91738__BEIIDBHJ">Example 2-38</a>, you might expect the sequence of statements to run because <code class="codeph">x</code> and <code class="codeph">y</code> seem unequal. But, <code class="codeph">NULL</code> values are indeterminate. Whether <code class="codeph">x</code> equals <code class="codeph">y</code> is unknown. Therefore, the <code class="codeph">IF</code> condition yields <code class="codeph">NULL</code> and the sequence of statements is bypassed.</p>
<p>In <a href="fundamentals.htm#GUID-9D19FEBB-A397-47F5-A4EC-D71B0DE91738__CIHJIFDG">Example 2-39</a>, you might expect the sequence of statements to run because <code class="codeph">a</code> and <code class="codeph">b</code> seem equal. But, again, that is unknown, so the <code class="codeph">IF</code> condition yields <code class="codeph">NULL</code> and the sequence of statements is bypassed.</p>
<p>In <a href="fundamentals.htm#GUID-9D19FEBB-A397-47F5-A4EC-D71B0DE91738__CIHHIBCE">Example 2-40</a>, the two <code class="codeph">IF</code> statements appear to be equivalent. However, if either <code class="codeph">x</code> or <code class="codeph">y</code> is <code class="codeph">NULL</code>, then the first <code class="codeph">IF</code> statement assigns the value of <code class="codeph">y</code> to <code class="codeph">high</code> and the second <code class="codeph">IF</code> statement assigns the value of <code class="codeph">x</code> to <code class="codeph">high</code>.</p>
<p><a href="fundamentals.htm#GUID-9D19FEBB-A397-47F5-A4EC-D71B0DE91738__CIHEHAGE">Example 2-41</a> invokes the <code class="codeph">print_boolean</code> procedure from <a href="fundamentals.htm#GUID-9D19FEBB-A397-47F5-A4EC-D71B0DE91738__CIHIIBAC">Example 2-35</a> three times. The third and first invocation are logically equivalent&mdash;the parentheses in the third invocation only improve readability. The parentheses in the second invocation change the order of operation.</p>
<div class="example" id="GUID-9D19FEBB-A397-47F5-A4EC-D71B0DE91738__CIHDAFEJ">
<p class="titleinexample">Example 2-34 Procedure Prints BOOLEAN Variable</p>
<pre dir="ltr">CREATE OR REPLACE PROCEDURE print_boolean (
  b_name   VARCHAR2,
  b_value  BOOLEAN
) AUTHID DEFINER IS
BEGIN
  IF b_value IS NULL THEN
    DBMS_OUTPUT.PUT_LINE (b_name || &#39; = NULL&#39;);
  ELSIF b_value = TRUE THEN
    DBMS_OUTPUT.PUT_LINE (b_name || &#39; = TRUE&#39;);
  ELSE
    DBMS_OUTPUT.PUT_LINE (b_name || &#39; = FALSE&#39;);
  END IF;
END;
/
 
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-9D19FEBB-A397-47F5-A4EC-D71B0DE91738__CIHIIBAC">
<p class="titleinexample">Example 2-35 AND Operator</p>
<pre dir="ltr">DECLARE
  PROCEDURE print_x_and_y (
    x  BOOLEAN,
    y  BOOLEAN
  ) IS
  BEGIN
   print_boolean (&#39;x&#39;, x);
   print_boolean (&#39;y&#39;, y);
   print_boolean (&#39;x AND y&#39;, x AND y);
 END print_x_and_y;
 
BEGIN
 print_x_and_y (FALSE, FALSE);
 print_x_and_y (TRUE, FALSE);
 print_x_and_y (FALSE, TRUE);
 print_x_and_y (TRUE, TRUE);
 
 print_x_and_y (TRUE, NULL);
 print_x_and_y (FALSE, NULL);
 print_x_and_y (NULL, TRUE);
 print_x_and_y (NULL, FALSE);
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">x = FALSE
y = FALSE
x AND y = FALSE
x = TRUE
y = FALSE
x AND y = FALSE
x = FALSE
y = TRUE
x AND y = FALSE
<span class="bold">x = TRUE</span>
<span class="bold">y = TRUE</span>
<span class="bold">x AND y = TRUE</span>
x = TRUE
y = NULL
x AND y = NULL
x = FALSE
y = NULL
x AND y = FALSE
x = NULL
y = TRUE
x AND y = NULL
x = NULL
y = FALSE
x AND y = FALSE
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-9D19FEBB-A397-47F5-A4EC-D71B0DE91738__CIHDABEC">
<p class="titleinexample">Example 2-36 OR Operator</p>
<pre dir="ltr">DECLARE
  PROCEDURE print_x_or_y (
    x  BOOLEAN,
    y  BOOLEAN
  ) IS
  BEGIN
    print_boolean (&#39;x&#39;, x);
    print_boolean (&#39;y&#39;, y);
    print_boolean (&#39;x OR y&#39;, x OR y);
  END print_x_or_y;
 
BEGIN
  print_x_or_y (FALSE, FALSE);
  print_x_or_y (TRUE, FALSE);
  print_x_or_y (FALSE, TRUE);
  print_x_or_y (TRUE, TRUE);
 
  print_x_or_y (TRUE, NULL);
  print_x_or_y (FALSE, NULL);
  print_x_or_y (NULL, TRUE);
  print_x_or_y (NULL, FALSE);
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">x = FALSE
y = FALSE
x OR y = FALSE
<span class="bold">x = TRUE</span>
<span class="bold">y = FALSE</span>
<span class="bold">x OR y = TRUE</span>
<span class="bold">x = FALSE</span>
<span class="bold">y = TRUE</span>
<span class="bold">x OR y = TRUE</span>
<span class="bold">x = TRUE</span>
<span class="bold">y = TRUE</span>
<span class="bold">x OR y = TRUE</span>
<span class="bold">x = TRUE</span>
<span class="bold">y = NULL</span>
<span class="bold">x OR y = TRUE</span>
x = FALSE
y = NULL
x OR y = NULL
<span class="bold">x = NULL</span>
<span class="bold">y = TRUE</span>
<span class="bold">x OR y = TRUE</span>
x = NULL
y = FALSE
x OR y = NULL
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-9D19FEBB-A397-47F5-A4EC-D71B0DE91738__CIHEBJED">
<p class="titleinexample">Example 2-37 NOT Operator</p>
<pre dir="ltr">DECLARE
  PROCEDURE print_not_x (
    x  BOOLEAN
  ) IS
  BEGIN
    print_boolean (&#39;x&#39;, x);
    print_boolean (&#39;NOT x&#39;, NOT x);
  END print_not_x;
 
BEGIN
  print_not_x (TRUE);
  print_not_x (FALSE);
  print_not_x (NULL);
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">x = TRUE
NOT x = FALSE
x = FALSE
NOT x = TRUE
x = NULL
NOT x = NULL
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-9D19FEBB-A397-47F5-A4EC-D71B0DE91738__BEIIDBHJ">
<p class="titleinexample">Example 2-38 NULL Value in Unequal Comparison</p>
<pre dir="ltr">DECLARE
  <span class="bold">x NUMBER := 5;</span>
  <span class="bold">y NUMBER := NULL;</span>
BEGIN
  <span class="bold">IF x != y THEN  -- yields NULL, not TRUE</span>
    DBMS_OUTPUT.PUT_LINE(&#39;x != y&#39;);  <span class="bold">-- not run</span>
  <span class="bold">ELSIF x = y THEN -- also yields NULL</span>
    DBMS_OUTPUT.PUT_LINE(&#39;x = y&#39;);
  ELSE
    DBMS_OUTPUT.PUT_LINE
      (&#39;Can&#39;&#39;t tell if x and y are equal or not.&#39;);
  END IF;
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">Can&#39;t tell if x and y are equal or not.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-9D19FEBB-A397-47F5-A4EC-D71B0DE91738__CIHJIFDG">
<p class="titleinexample">Example 2-39 NULL Value in Equal Comparison</p>
<pre dir="ltr">DECLARE
  <span class="bold">a NUMBER := NULL;</span>
  <span class="bold">b NUMBER := NULL;</span>
BEGIN
  <span class="bold">IF a = b THEN  -- yields NULL, not TRUE</span>
    DBMS_OUTPUT.PUT_LINE(&#39;a = b&#39;);  <span class="bold">-- not run</span>
  <span class="bold">ELSIF a != b THEN  -- yields NULL, not TRUE</span>
    DBMS_OUTPUT.PUT_LINE(&#39;a != b&#39;);  <span class="bold">-- not run</span>
  ELSE
    DBMS_OUTPUT.PUT_LINE(&#39;Can&#39;&#39;t tell if two NULLs are equal&#39;);
  END IF;
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">Can&#39;t tell if two NULLs are equal
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-9D19FEBB-A397-47F5-A4EC-D71B0DE91738__CIHHIBCE">
<p class="titleinexample">Example 2-40 NOT NULL Equals NULL</p>
<pre dir="ltr">DECLARE
  x    INTEGER := 2;
  Y    INTEGER := 5;
  high INTEGER;
BEGIN
  <span class="bold">IF (x &gt; y)</span>       -- If x or y is NULL, then (x &gt; y) is NULL
    THEN high := x;  -- run if (x &gt; y) is TRUE
    ELSE high := y;  -- run if (x &gt; y) is FALSE or NULL
  END IF;
  
  <span class="bold">IF NOT (x &gt; y)</span>   -- If x or y is NULL, then NOT (x &gt; y) is NULL
    THEN high := y;  -- run if NOT (x &gt; y) is TRUE
    ELSE high := x;  -- run if NOT (x &gt; y) is FALSE or NULL
  END IF;
END;
/
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-9D19FEBB-A397-47F5-A4EC-D71B0DE91738__CIHEHAGE">
<p class="titleinexample">Example 2-41 Changing Evaluation Order of Logical Operators</p>
<pre dir="ltr">DECLARE
  x  BOOLEAN := FALSE;
  y  BOOLEAN := FALSE;
  
BEGIN
  print_boolean (&#39;NOT x AND y&#39;, NOT x AND y);
  print_boolean (&#39;NOT (x AND y)&#39;, NOT (x AND y));
  print_boolean (&#39;(NOT x) AND y&#39;, (NOT x) AND y);
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">NOT x AND y = FALSE
NOT (x AND y) = TRUE
(NOT x) AND y = FALSE
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS259"></a><a id="LNPLS258"></a>
<div class="props_rev_3"><a id="GUID-26565CE3-726A-4E29-8A24-1F6AD8EC780B"></a>
<h3 id="LNPLS-GUID-26565CE3-726A-4E29-8A24-1F6AD8EC780B" class="sect3">Short-Circuit Evaluation</h3>
<div>
<p>When evaluating a logical expression, PL/SQL uses <span class="bold">short-circuit evaluation</span>. That is, PL/SQL stops evaluating the expression as soon as it can determine the result.</p>
<p>Therefore, you can write expressions that might otherwise cause errors.</p>
<p>In <a href="fundamentals.htm#GUID-26565CE3-726A-4E29-8A24-1F6AD8EC780B__CIHGJBFD">Example 2-42</a>, short-circuit evaluation prevents the <code class="codeph">OR</code> expression from causing a divide-by-zero error. When the value of <code class="codeph">on_hand</code> is zero, the value of the left operand is <code class="codeph">TRUE</code>, so PL/SQL does not evaluate the right operand. If PL/SQL evaluated both operands before applying the <code class="codeph">OR</code> operator, the right operand would cause a division by zero error.</p>
<div class="example" id="GUID-26565CE3-726A-4E29-8A24-1F6AD8EC780B__CIHGJBFD">
<p class="titleinexample">Example 2-42 Short-Circuit Evaluation</p>
<pre dir="ltr">DECLARE
  on_hand  INTEGER := 0;
  on_order INTEGER := 100;
BEGIN
  -- Does not cause divide-by-zero error;
  -- evaluation stops after first expression
  
  IF <span class="bold">(on_hand = 0) OR ((on_order / on_hand) &lt; 5)</span> THEN
    DBMS_OUTPUT.PUT_LINE(&#39;On hand quantity is zero.&#39;);
  END IF;
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">On hand quantity is zero.
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS260"></a>
<div class="props_rev_3"><a id="GUID-319604CE-DC1C-49DF-9377-007C312F3B32"></a>
<h3 id="LNPLS-GUID-319604CE-DC1C-49DF-9377-007C312F3B32" class="sect3">Comparison Operators</h3>
<div>
<p>Comparison operators compare one expression to another. The result is always either <code class="codeph">TRUE</code>, <code class="codeph">FALSE</code>, or <code class="codeph">NULL</code>.</p>
<p>If the value of one expression is <code class="codeph">NULL</code>, then the result of the comparison is also <code class="codeph">NULL</code>.</p>
<p>The comparison operators are:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="fundamentals.htm#GUID-D02FA4D0-0074-4227-9624-F01E3D219BAB" title="The IS NULL operator returns the BOOLEAN value TRUE if its operand is NULL or FALSE if it is not NULL. The IS NOT NULL operator does the opposite.">IS [NOT] NULL Operator</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-2EB964C8-9B36-4009-A45F-B340F44EE2A2" title="This table summarizes the relational operators.">Relational Operators</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-C3921F3A-52B3-473D-A93F-D198DED21BA9" title="The LIKE operator compares a character, string, or CLOB value to a pattern and returns TRUE if the value matches the pattern and FALSE if it does not.">LIKE Operator</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-B748E382-B068-48EC-B809-4FAB1F8D7C6B" title="The BETWEEN operator tests whether a value lies in a specified range.">BETWEEN Operator</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-3E3F4260-9773-41E8-BA10-069CFE1F0A6D" title="The IN operator tests set membership.">IN Operator</a></p>
</li>
</ul>
<div class="infobox-note" id="GUID-319604CE-DC1C-49DF-9377-007C312F3B32__GUID-7721B56C-04CF-4CD8-9A3F-1AB6DAA85F15">
<p class="notep1">Note:</p>
<p>Character comparisons are affected by NLS parameter settings, which can change at runtime. Therefore, character comparisons are evaluated at runtime, and the same character comparison can have different values at different times. For information about NLS parameters that affect character comparisons, see <a class="olink NLSPG005" target="_blank" href="../NLSPG/ch5lingsort.htm#NLSPG005"><span class="italic">Oracle Database Globalization Support Guide</span></a>.</p>
</div>
<div class="infobox-note" id="GUID-319604CE-DC1C-49DF-9377-007C312F3B32__GUID-D4DEBBBD-52E7-4B6F-AF4E-EEFEC7774DE2">
<p class="notep1">Note:</p>
<p>Using <code class="codeph">CLOB</code> values with comparison operators can create temporary LOB values. Ensure that your temporary tablespace is large enough to handle them.</p>
</div>
</div>
<a id="LNPLS263"></a>
<div class="props_rev_3"><a id="GUID-D02FA4D0-0074-4227-9624-F01E3D219BAB"></a>
<h4 id="LNPLS-GUID-D02FA4D0-0074-4227-9624-F01E3D219BAB" class="sect4">IS [NOT] NULL Operator</h4>
<div>
<p>The <code class="codeph">IS</code> <code class="codeph">NULL</code> operator returns the <code class="codeph">BOOLEAN</code> value <code class="codeph">TRUE</code> if its operand is <code class="codeph">NULL</code> or <code class="codeph">FALSE</code> if it is not <code class="codeph">NULL</code>. The <code class="codeph">IS</code> <code class="codeph">NOT</code> <code class="codeph">NULL</code> operator does the opposite.</p>
<p>Comparisons involving <code class="codeph">NULL</code> values always yield <code class="codeph">NULL</code>.</p>
<p>To test whether a value is <code class="codeph">NULL</code>, use <code class="codeph">IF</code> <span class="italic"><code class="codeph">value</code></span> <code class="codeph">IS</code> <code class="codeph">NULL</code>, as in these examples:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="fundamentals.htm#GUID-F174B8B8-D07F-4C79-BFC6-7F8E844D84D1__CIHIBJJF">Example 2-14</a>, <span class="q">&#34;Variable Initialized to NULL by Default&#34;</span></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-9D19FEBB-A397-47F5-A4EC-D71B0DE91738__CIHDAFEJ">Example 2-34</a>, <span class="q">&#34;Procedure Prints BOOLEAN Variable&#34;</span></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-42342604-3BCD-48A3-B1F9-B0656E37C2CC__CIHDDFHC">Example 2-53</a>, <span class="q">&#34;Searched CASE Expression with WHEN ... IS NULL&#34;</span></p>
</li>
</ul>
</div>
</div>
<a id="LNPLS222"></a><a id="LNPLS223"></a><a id="LNPLS218"></a>
<div class="props_rev_3"><a id="GUID-2EB964C8-9B36-4009-A45F-B340F44EE2A2"></a>
<h4 id="LNPLS-GUID-2EB964C8-9B36-4009-A45F-B340F44EE2A2" class="sect4">Relational Operators</h4>
<div>
<p>This table summarizes the relational operators.</p>
<div class="tblformal" id="GUID-2EB964C8-9B36-4009-A45F-B340F44EE2A2__CIHCCCBB">
<p class="titleintable">Table 2-5 Relational Operators</p>
<table class="cellalignment876" title="Relational Operators" summary="This table lists the relational operators and gives their meanings.">
<thead>
<tr class="cellalignment870">
<th class="cellalignment925" id="d12034e7177">Operator</th>
<th class="cellalignment926" id="d12034e7180">Meaning</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment870">
<td class="cellalignment927" id="d12034e7185" headers="d12034e7177">
<p><code class="codeph">=</code></p>
</td>
<td class="cellalignment928" headers="d12034e7185 d12034e7180">
<p>equal to</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment927" id="d12034e7193" headers="d12034e7177">
<p><code class="codeph">&lt;&gt;</code>, <code class="codeph">!=</code>, <code class="codeph">~=</code>, <code class="codeph">^=</code></p>
</td>
<td class="cellalignment928" headers="d12034e7193 d12034e7180">
<p>not equal to</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment927" id="d12034e7210" headers="d12034e7177">
<p><code class="codeph">&lt;</code></p>
</td>
<td class="cellalignment928" headers="d12034e7210 d12034e7180">
<p>less than</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment927" id="d12034e7218" headers="d12034e7177">
<p><code class="codeph">&gt;</code></p>
</td>
<td class="cellalignment928" headers="d12034e7218 d12034e7180">
<p>greater than</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment927" id="d12034e7226" headers="d12034e7177">
<p><code class="codeph">&lt;=</code></p>
</td>
<td class="cellalignment928" headers="d12034e7226 d12034e7180">
<p>less than or equal to</p>
</td>
</tr>
<tr class="cellalignment870">
<td class="cellalignment927" id="d12034e7234" headers="d12034e7177">
<p><code class="codeph">&gt;=</code></p>
</td>
<td class="cellalignment928" headers="d12034e7234 d12034e7180">
<p>greater than or equal to</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<div class="section">
<p class="subhead3">Topics</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="fundamentals.htm#GUID-76918747-C18D-452E-89FB-2C09661C53D3" title="One number is greater than another if it represents a larger quantity.">Arithmetic Comparisons</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-E964D0DE-A967-479D-9C9F-07BF034E3934" title="By definition, TRUE is greater than FALSE. Any comparison with NULL returns NULL.">BOOLEAN Comparisons</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-DB99B51B-87FA-4627-9705-72E485DAEFB7" title="By default, one character is greater than another if its binary value is larger.">Character Comparisons</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-0B6D2BED-5550-4AA0-AC57-FE8561E04CBC" title="One date is greater than another if it is more recent.">Date Comparisons</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="LNPLS226"></a><a id="LNPLS224"></a>
<div class="props_rev_3"><a id="GUID-76918747-C18D-452E-89FB-2C09661C53D3"></a>
<h5 id="LNPLS-GUID-76918747-C18D-452E-89FB-2C09661C53D3" class="sect5">Arithmetic Comparisons</h5>
<div>
<p>One number is greater than another if it represents a larger quantity.</p>
<p>Real numbers are stored as approximate values, so Oracle recommends comparing them for equality or inequality.</p>
<div class="example" id="GUID-76918747-C18D-452E-89FB-2C09661C53D3__CIHFFBCI">
<p class="titleinexample">Example 2-43 Relational Operators in Expressions</p>
<p>This example invokes the <code class="codeph">print_boolean</code> procedure from <a href="fundamentals.htm#GUID-9D19FEBB-A397-47F5-A4EC-D71B0DE91738__CIHIIBAC">Example 2-35</a> to print the values of expressions that use relational operators to compare arithmetic values.</p>
<pre dir="ltr">BEGIN
  print_boolean (&#39;(2 + 2 =  4)&#39;, 2 + 2 <span class="bold">=</span> 4);
  
  print_boolean (&#39;(2 + 2 &lt;&gt; 4)&#39;, 2 + 2 <span class="bold">&lt;&gt;</span> 4);
  print_boolean (&#39;(2 + 2 != 4)&#39;, 2 + 2 <span class="bold">!=</span> 4);
  print_boolean (&#39;(2 + 2 ~= 4)&#39;, 2 + 2 <span class="bold">~=</span> 4);
  print_boolean (&#39;(2 + 2 ^= 4)&#39;, 2 + 2 <span class="bold"> ^=</span> 4);
  
  print_boolean (&#39;(1 &lt; 2)&#39;, 1 <span class="bold">&lt;</span> 2);
 
  print_boolean (&#39;(1 &gt; 2)&#39;, 1 <span class="bold">&gt;</span> 2);
 
  print_boolean (&#39;(1 &lt;= 2)&#39;, 1 <span class="bold">&lt;=</span> 2);
 
  print_boolean (&#39;(1 &gt;= 1)&#39;, 1 <span class="bold">&gt;=</span> 1);
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">(2 + 2 =  4) = TRUE
(2 + 2 &lt;&gt; 4) = FALSE
(2 + 2 != 4) = FALSE
(2 + 2 ~= 4) = FALSE
(2 + 2 ^= 4) = FALSE
(1 &lt; 2) = TRUE
(1 &gt; 2) = FALSE
(1 &lt;= 2) = TRUE
(1 &gt;= 1) = TRUE
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS227"></a>
<div class="props_rev_3"><a id="GUID-E964D0DE-A967-479D-9C9F-07BF034E3934"></a>
<h5 id="LNPLS-GUID-E964D0DE-A967-479D-9C9F-07BF034E3934" class="sect5">BOOLEAN Comparisons</h5>
<div>
<p>By definition, <code class="codeph">TRUE</code> is greater than <code class="codeph">FALSE</code>. Any comparison with <code class="codeph">NULL</code> returns <code class="codeph">NULL</code>.</p>
</div>
</div>
<a id="LNPLS228"></a>
<div class="props_rev_3"><a id="GUID-DB99B51B-87FA-4627-9705-72E485DAEFB7"></a>
<h5 id="LNPLS-GUID-DB99B51B-87FA-4627-9705-72E485DAEFB7" class="sect5">Character Comparisons</h5>
<div>
<p>By default, one character is greater than another if its binary value is larger.</p>
<p>For example, this expression is true:</p>
<pre dir="ltr">&#39;y&#39; &gt; &#39;r&#39;
</pre>
<p>Strings are compared character by character. For example, this expression is true:</p>
<pre dir="ltr">&#39;Kath<span class="bold">y</span>&#39; &gt; &#39;Kath<span class="bold">r</span>yn&#39;
</pre>
<p>If you set the initialization parameter <code class="codeph">NLS_COMP=ANSI</code>, string comparisons use the collating sequence identified by the <code class="codeph">NLS_SORT</code> initialization parameter.</p>
<p>A <span class="bold">collating sequence</span> is an internal ordering of the character set in which a range of numeric codes represents the individual characters. One character value is greater than another if its internal numeric value is larger. Each language might have different rules about where such characters occur in the collating sequence. For example, an accented letter might be sorted differently depending on the database character set, even though the binary value is the same in each case.</p>
<p>By changing the value of the <code class="codeph">NLS_SORT</code> parameter, you can perform comparisons that are case-insensitive and accent-insensitive.</p>
<p>A <span class="bold">case-insensitive comparison</span> treats corresponding uppercase and lowercase letters as the same letter. For example, these expressions are true:</p>
<pre dir="ltr">&#39;a&#39; = &#39;A&#39;
&#39;Alpha&#39; = &#39;ALPHA&#39;
</pre>
<p>To make comparisons case-insensitive, append <code class="codeph">_CI</code> to the value of the <code class="codeph">NLS_SORT</code> parameter (for example, <code class="codeph">BINARY_CI</code> or <code class="codeph">XGERMAN_CI</code>).</p>
<p>An <span class="bold">accent-insensitive comparison</span> is case-insensitive, and also treats letters that differ only in accents or punctuation characters as the same letter. For example, these expressions are true:</p>
<pre dir="ltr">&#39;Cooperate&#39; = &#39;Co-Operate&#39;
&#39;Co-Operate&#39; = &#39;co&ouml;perate&#39;
</pre>
<p>To make comparisons both case-insensitive and accent-insensitive, append <code class="codeph">_AI</code> to the value of the <code class="codeph">NLS_SORT</code> parameter (for example, <code class="codeph">BINARY_AI</code> or <code class="codeph">FRENCH_M_AI</code>).</p>
<p>Semantic differences between the <code class="codeph">CHAR</code> and <code class="codeph">VARCHAR2</code> data types affect character comparisons.</p>
<p>For more information, see <span class="q">&#34;<a href="datatypes.htm#GUID-624E93C5-2115-44FB-9F75-F5513FD25204" title="The SQL rules for comparing character values apply to PL/SQL character variables.">Value Comparisons</a>&#34;</span>.</p>
</div>
</div>
<a id="LNPLS230"></a>
<div class="props_rev_3"><a id="GUID-0B6D2BED-5550-4AA0-AC57-FE8561E04CBC"></a>
<h5 id="LNPLS-GUID-0B6D2BED-5550-4AA0-AC57-FE8561E04CBC" class="sect5">Date Comparisons</h5>
<div>
<p>One date is greater than another if it is more recent.</p>
<p>For example, this expression is true:</p>
<pre dir="ltr">&#39;01-JAN-91&#39; &gt; &#39;31-DEC-90&#39;
</pre></div>
</div>
</div>
<a id="LNPLS265"></a><a id="LNPLS266"></a><a id="LNPLS264"></a>
<div class="props_rev_3"><a id="GUID-C3921F3A-52B3-473D-A93F-D198DED21BA9"></a>
<h4 id="LNPLS-GUID-C3921F3A-52B3-473D-A93F-D198DED21BA9" class="sect4">LIKE Operator</h4>
<div>
<p>The <code class="codeph">LIKE</code> operator compares a character, string, or <code class="codeph">CLOB</code> value to a pattern and returns <code class="codeph">TRUE</code> if the value matches the pattern and <code class="codeph">FALSE</code> if it does not.</p>
<p>Case is significant.</p>
<p>The pattern can include the two <span class="bold">wildcard characters</span> underscore (<code class="codeph">_</code>) and percent sign (%).</p>
<p>Underscore matches exactly one character.</p>
<p>Percent sign (<code class="codeph">%</code>) matches zero or more characters.</p>
<p>To search for the percent sign or underscore, define an escape character and put it before the percent sign or underscore.</p>
<div class="infoboxnotealso" id="GUID-C3921F3A-52B3-473D-A93F-D198DED21BA9__GUID-9E5901AB-FCAD-4725-A166-126F79CB0153">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a class="olink SQLRF52142" target="_blank" href="../SQLRF/conditions007.htm#SQLRF52142"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about <code class="codeph">LIKE</code></p>
</li>
<li>
<p><a class="olink SQLRF00501" target="_blank" href="../SQLRF/conditions007.htm#SQLRF00501"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about <code class="codeph">REGEXP_LIKE</code>, which is similar to <code class="codeph">LIKE</code></p>
</li>
</ul>
</div>
<div class="example" id="GUID-C3921F3A-52B3-473D-A93F-D198DED21BA9__CIHECJJB">
<p class="titleinexample">Example 2-44 LIKE Operator in Expression</p>
<p>The string <code class="codeph">&#39;Johnson&#39;</code> matches the pattern <code class="codeph">&#39;J%s_n&#39;</code> but not <code class="codeph">&#39;J%S_N&#39;</code>, as this example shows.</p>
<pre dir="ltr">DECLARE
  PROCEDURE compare (
    value   VARCHAR2,
    pattern VARCHAR2
  ) IS
  BEGIN
    IF <span class="bold">value LIKE pattern</span> THEN
      DBMS_OUTPUT.PUT_LINE (&#39;TRUE&#39;);
    ELSE
      DBMS_OUTPUT.PUT_LINE (&#39;FALSE&#39;);
    END IF;
  END;
BEGIN
  compare(&#39;Johnson&#39;, &#39;J%s_n&#39;);
  compare(&#39;Johnson&#39;, &#39;J%S_N&#39;);
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">TRUE
FALSE
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-C3921F3A-52B3-473D-A93F-D198DED21BA9__CIHFIIEA">
<p class="titleinexample">Example 2-45 Escape Character in Pattern</p>
<p>This example uses the backslash as the escape character, so that the percent sign in the string does not act as a wildcard.</p>
<pre dir="ltr">DECLARE
  PROCEDURE half_off (sale_sign VARCHAR2) IS
  BEGIN
    <span class="bold">IF sale_sign LIKE &#39;50\% off!&#39; ESCAPE &#39;\&#39;</span> THEN
      DBMS_OUTPUT.PUT_LINE (&#39;TRUE&#39;);
    ELSE
      DBMS_OUTPUT.PUT_LINE (&#39;FALSE&#39;);
    END IF;
  END;
BEGIN
  half_off(&#39;Going out of business!&#39;);
  half_off(&#39;50% off!&#39;);
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">FALSE
TRUE
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS268"></a><a id="LNPLS267"></a>
<div class="props_rev_3"><a id="GUID-B748E382-B068-48EC-B809-4FAB1F8D7C6B"></a>
<h4 id="LNPLS-GUID-B748E382-B068-48EC-B809-4FAB1F8D7C6B" class="sect4">BETWEEN Operator</h4>
<div>
<p>The <code class="codeph">BETWEEN</code> operator tests whether a value lies in a specified range.</p>
<p>The value of the expression <code class="codeph">x BETWEEN a AND b</code> is defined to be the same as the value of the expression <code class="codeph">(x&gt;=a) AND (x&lt;=b)</code>&nbsp;. The expression <code class="codeph">x</code> will only be evaluated once.</p>
<div class="infoboxnotealso" id="GUID-B748E382-B068-48EC-B809-4FAB1F8D7C6B__GUID-4DC55F4E-002D-45F4-9099-7949A71D590D">
<p class="notep1">See Also:</p>
<p><a class="olink SQLRF52164" target="_blank" href="../SQLRF/conditions012.htm#SQLRF52164"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about <code class="codeph">BETWEEN</code></p>
</div>
<div class="example" id="GUID-B748E382-B068-48EC-B809-4FAB1F8D7C6B__CIHDEEAG">
<p class="titleinexample">Example 2-46 BETWEEN Operator in Expressions</p>
<p>This example invokes the <code class="codeph">print_boolean</code> procedure from <a href="fundamentals.htm#GUID-9D19FEBB-A397-47F5-A4EC-D71B0DE91738__CIHIIBAC">Example 2-35</a> to print the values of expressions that include the <code class="codeph">BETWEEN</code> operator.</p>
<pre dir="ltr">BEGIN
  print_boolean (&#39;2 BETWEEN 1 AND 3&#39;, 2 <span class="bold">BETWEEN</span> 1 AND 3);
  print_boolean (&#39;2 BETWEEN 2 AND 3&#39;, 2 <span class="bold">BETWEEN</span> 2 AND 3);
  print_boolean (&#39;2 BETWEEN 1 AND 2&#39;, 2 <span class="bold">BETWEEN</span> 1 AND 2);
  print_boolean (&#39;2 BETWEEN 3 AND 4&#39;, 2 <span class="bold">BETWEEN</span> 3 AND 4);
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr"><span>2 BETWEEN 1 AND 3 = TRUE</span>
2 BETWEEN 2 AND 3 = TRUE
2 BETWEEN 1 AND 2 = TRUE
2 BETWEEN 3 AND 4 = FALSE
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS270"></a><a id="LNPLS271"></a><a id="LNPLS269"></a>
<div class="props_rev_3"><a id="GUID-3E3F4260-9773-41E8-BA10-069CFE1F0A6D"></a>
<h4 id="LNPLS-GUID-3E3F4260-9773-41E8-BA10-069CFE1F0A6D" class="sect4">IN Operator</h4>
<div>
<p>The <code class="codeph">IN</code> operator tests set membership.</p>
<p><code class="codeph">x</code> <code class="codeph">IN</code> <code class="codeph">(</code><span class="italic"><code class="codeph">set</code></span><code class="codeph">)</code> returns <code class="codeph">TRUE</code> only if <code class="codeph">x</code> equals a member of <span class="italic"><code class="codeph">set</code></span>.</p>
<div class="infoboxnotealso" id="GUID-3E3F4260-9773-41E8-BA10-069CFE1F0A6D__GUID-46F86570-671C-4703-8BD3-80135CC15AED">
<p class="notep1">See Also:</p>
<p><a class="olink SQLRF52169" target="_blank" href="../SQLRF/conditions014.htm#SQLRF52169"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about <code class="codeph">IN</code></p>
</div>
<div class="example" id="GUID-3E3F4260-9773-41E8-BA10-069CFE1F0A6D__CIHJEGAE">
<p class="titleinexample">Example 2-47 IN Operator in Expressions</p>
<p>This example invokes the <code class="codeph">print_boolean</code> procedure from <a href="fundamentals.htm#GUID-9D19FEBB-A397-47F5-A4EC-D71B0DE91738__CIHIIBAC">Example 2-35</a> to print the values of expressions that include the <code class="codeph">IN</code> operator.</p>
<pre dir="ltr">DECLARE
  letter VARCHAR2(1) := &#39;m&#39;;
BEGIN
  print_boolean (
    &#39;letter IN (&#39;&#39;a&#39;&#39;, &#39;&#39;b&#39;&#39;, &#39;&#39;c&#39;&#39;)&#39;,
    letter <span class="bold">IN</span> (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)
  );
  print_boolean (
    &#39;letter IN (&#39;&#39;z&#39;&#39;, &#39;&#39;m&#39;&#39;, &#39;&#39;y&#39;&#39;, &#39;&#39;p&#39;&#39;)&#39;,
    letter <span class="bold">IN</span> (&#39;z&#39;, &#39;m&#39;, &#39;y&#39;, &#39;p&#39;)
  );
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">letter IN (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;) = FALSE
letter IN (&#39;z&#39;, &#39;m&#39;, &#39;y&#39;, &#39;p&#39;) = TRUE
 
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-3E3F4260-9773-41E8-BA10-069CFE1F0A6D__CIHFHEIE">
<p class="titleinexample">Example 2-48 IN Operator with Sets with NULL Values</p>
<p>This example shows what happens when <span class="italic"><code class="codeph">set</code></span> includes a <code class="codeph">NULL</code> value. This invokes the <code class="codeph">print_boolean</code> procedure from <a href="fundamentals.htm#GUID-9D19FEBB-A397-47F5-A4EC-D71B0DE91738__CIHIIBAC">Example 2-35</a>.</p>
<pre dir="ltr">DECLARE
  <span class="bold">a INTEGER; -- Initialized to NULL by default</span>
  b INTEGER := 10;
  c INTEGER := 100;
BEGIN
  print_boolean (&#39;100 IN (a, b, c)&#39;, 100 <span class="bold">IN</span> (<span class="bold">a</span>, b, c));
  print_boolean (&#39;100 NOT IN (a, b, c)&#39;, 100 <span class="bold">NOT IN</span> (<span class="bold">a</span>, b, c));
  
  print_boolean (&#39;100 IN (a, b)&#39;, 100 <span class="bold">IN</span> (<span class="bold">a</span>, b));
  print_boolean (&#39;100 NOT IN (a, b)&#39;, 100 <span class="bold">NOT IN</span> (<span class="bold">a</span>, b));
 
  print_boolean (&#39;a IN (a, b)&#39;, a <span class="bold">IN</span> (<span class="bold">a</span>, b));
  print_boolean (&#39;a NOT IN (a, b)&#39;, a <span class="bold">NOT IN</span> (<span class="bold">a</span>, b));
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">100 IN (a, b, c) = TRUE
100 NOT IN (a, b, c) = FALSE
100 IN (a, b) = NULL
100 NOT IN (a, b) = NULL
a IN (a, b) = NULL
a NOT IN (a, b) = NULL
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="LNPLS231"></a><a id="LNPLS272"></a>
<div class="props_rev_3"><a id="GUID-E277B6FF-866F-486A-BCB1-58235C0AFC69"></a>
<h3 id="LNPLS-GUID-E277B6FF-866F-486A-BCB1-58235C0AFC69" class="sect3">BOOLEAN Expressions</h3>
<div>
<p>A <span class="bold"><code class="codeph">BOOLEAN</code></span> <span class="bold">expression</span> is an expression that returns a <code class="codeph">BOOLEAN</code> value&mdash;<code class="codeph">TRUE</code>, <code class="codeph">FALSE</code>, or <code class="codeph">NULL</code>.</p>
<p>The simplest <code class="codeph">BOOLEAN</code> expression is a <code class="codeph">BOOLEAN</code> literal, constant, or variable. The following are also <code class="codeph">BOOLEAN</code> expressions:</p>
<pre dir="ltr">NOT <span class="italic">boolean_expression</span>
<span class="italic">boolean_expression</span> <span class="italic">relational_operator</span> <span class="italic">boolean_expression</span>
<span class="italic">boolean_expression</span> { AND | OR } <span class="italic">boolean_expression</span>
</pre>
<p>For a list of relational operators, see <a href="fundamentals.htm#GUID-2EB964C8-9B36-4009-A45F-B340F44EE2A2__CIHCCCBB" title="This table lists the relational operators and gives their meanings.">Table 2-5</a>. For the complete syntax of a <code class="codeph">BOOLEAN</code> expression, see <span class="q">&#34;<a href="expression.htm#GUID-D4700B45-F2C8-443E-AEE7-2BD20FFD45B8__CHDDGEFH">boolean_expression ::=</a>&#34;</span>.</p>
<p>Typically, you use <code class="codeph">BOOLEAN</code> expressions as conditions in control statements (explained in <a href="controlstatements.htm#GUID-18777904-23F6-4F6D-8B41-46BABF00BA03" title="PL/SQL has three categories of control statements: conditional selection statements, loop statements and sequential control statements.">PL/SQL Control Statements</a>) and in <code class="codeph">WHERE</code> clauses of DML statements.</p>
<p>You can use a <code class="codeph">BOOLEAN</code> variable itself as a condition; you need not compare it to the value <code class="codeph">TRUE</code> or <code class="codeph">FALSE</code>.</p>
<div class="example" id="GUID-E277B6FF-866F-486A-BCB1-58235C0AFC69__CIHBABAD">
<p class="titleinexample">Example 2-49 Equivalent BOOLEAN Expressions</p>
<p>In this example, the conditions in the loops are equivalent.</p>
<pre dir="ltr">DECLARE
  done BOOLEAN;
BEGIN
  -- These WHILE loops are equivalent
  
  done := FALSE;
  WHILE <span class="bold">done = FALSE</span>
    LOOP
      done := TRUE;
    END LOOP;
 
  done := FALSE;
  WHILE <span class="bold">NOT (done = TRUE)</span>
    LOOP
      done := TRUE;
    END LOOP;
 
  done := FALSE;
  WHILE <span class="bold">NOT done</span>
    LOOP
      done := TRUE;
    END LOOP;
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS232"></a><a id="LNPLS278"></a>
<div class="props_rev_3"><a id="GUID-216F1B33-493F-4CDE-93BB-096BACA8523E"></a>
<h3 id="LNPLS-GUID-216F1B33-493F-4CDE-93BB-096BACA8523E" class="sect3">CASE Expressions</h3>
<div>
<div class="section">
<p class="subhead3">Topics</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="fundamentals.htm#GUID-F52A70F5-87E1-4AAE-9388-FE56E1ED5598">Simple CASE Expression</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-42342604-3BCD-48A3-B1F9-B0656E37C2CC">Searched CASE Expression</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="LNPLS235"></a><a id="LNPLS236"></a><a id="LNPLS279"></a>
<div class="props_rev_3"><a id="GUID-F52A70F5-87E1-4AAE-9388-FE56E1ED5598"></a>
<h4 id="LNPLS-GUID-F52A70F5-87E1-4AAE-9388-FE56E1ED5598" class="sect4">Simple CASE Expression</h4>
<div>
<p>For this explanation, assume that a simple <code class="codeph">CASE</code> expression has this syntax:</p>
<pre dir="ltr">CASE <span class="italic">selector</span>
WHEN <span class="italic">selector_value_1</span> THEN <span class="italic">result_1</span>
WHEN <span class="italic">selector_value_2</span> THEN <span class="italic">result_2</span>
...
WHEN <span class="italic">selector_value_</span>n THEN <span class="italic">result_</span>n
[ ELSE
  <span class="italic">else_result</span> ]
END
</pre>
<p>The <span class="italic"><code class="codeph">selector</code></span> is an expression (typically a single variable). Each <span class="italic"><code class="codeph">selector_value</code></span> and each <span class="italic"><code class="codeph">result</code></span> can be either a literal or an expression. At least one <span class="italic"><code class="codeph">result</code></span> must not be the literal <code class="codeph">NULL</code>.</p>
<p>The simple <code class="codeph">CASE</code> expression returns the first <span class="italic"><code class="codeph">result</code></span> for which <span class="italic"><code class="codeph">selector_value</code></span> matches <span class="italic"><code class="codeph">selector</code></span>. Remaining expressions are not evaluated. If no <span class="italic"><code class="codeph">selector_value</code></span> matches <span class="italic"><code class="codeph">selector</code></span>, the <code class="codeph">CASE</code> expression returns <span class="italic"><code class="codeph">else_result</code></span> if it exists and <code class="codeph">NULL</code> otherwise.</p>
<div class="infoboxnotealso" id="GUID-F52A70F5-87E1-4AAE-9388-FE56E1ED5598__GUID-40A5D637-072C-416E-80F1-908F38589E23">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="expression.htm#GUID-D4700B45-F2C8-443E-AEE7-2BD20FFD45B8__CHDIFFCB">simple_case_expression ::=</a>&#34;</span> for the complete syntax</p>
</div>
<div class="example" id="GUID-F52A70F5-87E1-4AAE-9388-FE56E1ED5598__BEIFHCJE">
<p class="titleinexample">Example 2-50 Simple CASE Expression</p>
<p>This example assigns the value of a simple <code class="codeph">CASE</code> expression to the variable <code class="codeph">appraisal</code>. The <span class="italic"><code class="codeph">selector</code></span> is <code class="codeph">grade</code>.</p>
<pre dir="ltr">DECLARE
  grade CHAR(1) := &#39;B&#39;;
  appraisal VARCHAR2(20);
BEGIN
  appraisal :=
    <span class="bold">CASE grade</span>
      <span class="bold">WHEN &#39;A&#39; THEN &#39;Excellent&#39;</span>
      <span class="bold">WHEN &#39;B&#39; THEN &#39;Very Good&#39;</span>
      <span class="bold">WHEN &#39;C&#39; THEN &#39;Good&#39;</span>
      <span class="bold">WHEN &#39;D&#39; THEN &#39;Fair&#39;</span>
      <span class="bold">WHEN &#39;F&#39; THEN &#39;Poor&#39;</span>
      <span class="bold">ELSE &#39;No such grade&#39;</span>
    <span class="bold">END</span>;
    DBMS_OUTPUT.PUT_LINE (&#39;Grade &#39; || grade || &#39; is &#39; || appraisal);
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">Grade B is Very Good
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-F52A70F5-87E1-4AAE-9388-FE56E1ED5598__CIHIJABF">
<p class="titleinexample">Example 2-51 Simple CASE Expression with WHEN NULL</p>
<p>If <span class="italic"><code class="codeph">selector</code></span> has the value <code class="codeph">NULL</code>, it cannot be matched by <code class="codeph">WHEN</code> <code class="codeph">NULL</code>, as this example shows.</p>
<p>Instead, use a searched <code class="codeph">CASE</code> expression with <code class="codeph">WHEN</code> <span class="italic"><code class="codeph">boolean_expression</code></span> <code class="codeph">IS</code> <code class="codeph">NULL</code>, as in <a href="fundamentals.htm#GUID-42342604-3BCD-48A3-B1F9-B0656E37C2CC__CIHDDFHC">Example 2-53</a>.</p>
<pre dir="ltr">DECLARE
  grade CHAR(1); <span class="bold">-- NULL by default</span>
  appraisal VARCHAR2(20);
BEGIN
  appraisal :=
  CASE grade
    <span class="bold">WHEN NULL THEN &#39;No grade assigned&#39;</span>
    WHEN &#39;A&#39; THEN &#39;Excellent&#39;
    WHEN &#39;B&#39; THEN &#39;Very Good&#39;
    WHEN &#39;C&#39; THEN &#39;Good&#39;
    WHEN &#39;D&#39; THEN &#39;Fair&#39;
    WHEN &#39;F&#39; THEN &#39;Poor&#39;
    <span class="bold">ELSE &#39;No such grade&#39;</span>
  END;
  DBMS_OUTPUT.PUT_LINE (&#39;Grade &#39; || grade || &#39; is &#39; || appraisal);
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">Grade  is <span class="bold">No such grade</span>
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS282"></a><a id="LNPLS237"></a><a id="LNPLS281"></a>
<div class="props_rev_3"><a id="GUID-42342604-3BCD-48A3-B1F9-B0656E37C2CC"></a>
<h4 id="LNPLS-GUID-42342604-3BCD-48A3-B1F9-B0656E37C2CC" class="sect4">Searched CASE Expression</h4>
<div>
<p>For this explanation, assume that a searched <code class="codeph">CASE</code> expression has this syntax:</p>
<pre dir="ltr">CASE
WHEN <span class="italic">boolean_expression_1</span> THEN <span class="italic">result_1</span>
WHEN <span class="italic">boolean_expression_2</span> THEN <span class="italic">result_2</span>
...
WHEN <span class="italic">boolean_expression_</span>n THEN <span class="italic">result_</span>n
[ ELSE
  <span class="italic">else_result</span> ]
END]
</pre>
<p>The searched <code class="codeph">CASE</code> expression returns the first <span class="italic"><code class="codeph">result</code></span> for which <span class="italic"><code class="codeph">boolean_expression</code></span> is <code class="codeph">TRUE</code>. Remaining expressions are not evaluated. If no <span class="italic"><code class="codeph">boolean_expression</code></span> is <code class="codeph">TRUE</code>, the <code class="codeph">CASE</code> expression returns <span class="italic"><code class="codeph">else_result</code></span> if it exists and <code class="codeph">NULL</code> otherwise.</p>
<div class="infoboxnotealso" id="GUID-42342604-3BCD-48A3-B1F9-B0656E37C2CC__GUID-4B0283D7-163C-46E7-AA32-5473E7610E30">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="expression.htm#GUID-D4700B45-F2C8-443E-AEE7-2BD20FFD45B8__CHDGJEJJ">searched_case_expression ::=</a>&#34;</span> for the complete syntax</p>
</div>
<div class="example" id="GUID-42342604-3BCD-48A3-B1F9-B0656E37C2CC__BEIBCGID">
<p class="titleinexample">Example 2-52 Searched CASE Expression</p>
<p>This example assigns the value of a searched <code class="codeph">CASE</code> expression to the variable <code class="codeph">appraisal</code>.</p>
<pre dir="ltr">DECLARE
  grade      CHAR(1) := &#39;B&#39;;
  appraisal  VARCHAR2(120);
  id         NUMBER  := 8429862;
  attendance NUMBER := 150;
  min_days   CONSTANT NUMBER := 200;
  
  FUNCTION attends_this_school (id NUMBER)
    RETURN BOOLEAN IS
  BEGIN
    RETURN TRUE;
  END;
BEGIN
  appraisal :=
  <span class="bold">CASE</span>
    <span class="bold">WHEN attends_this_school(id) = FALSE</span>
      <span class="bold">THEN &#39;Student not enrolled&#39;</span>
    <span class="bold">WHEN grade = &#39;F&#39; OR attendance &lt; min_days</span>
      <span class="bold">THEN &#39;Poor (poor performance or bad attendance)&#39;</span>
    <span class="bold">WHEN grade = &#39;A&#39; THEN &#39;Excellent&#39;</span>
    <span class="bold">WHEN grade = &#39;B&#39; THEN &#39;Very Good&#39;</span>
    <span class="bold">WHEN grade = &#39;C&#39; THEN &#39;Good&#39;</span>
    <span class="bold">WHEN grade = &#39;D&#39; THEN &#39;Fair&#39;</span>
    <span class="bold">ELSE &#39;No such grade&#39;</span>
  <span class="bold">END</span>;
  DBMS_OUTPUT.PUT_LINE
    (&#39;Result for student &#39; || id || &#39; is &#39; || appraisal);
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">Result for student 8429862 is Poor (poor performance or bad attendance)
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-42342604-3BCD-48A3-B1F9-B0656E37C2CC__CIHDDFHC">
<p class="titleinexample">Example 2-53 Searched CASE Expression with WHEN ... IS NULL</p>
<p>This example uses a searched <code class="codeph">CASE</code> expression to solve the problem in <a href="fundamentals.htm#GUID-F52A70F5-87E1-4AAE-9388-FE56E1ED5598__CIHIJABF">Example 2-51</a>.</p>
<pre dir="ltr">DECLARE
  grade CHAR(1); <span class="bold">-- NULL by default</span>
  appraisal VARCHAR2(20);
BEGIN
  appraisal :=
    CASE
      <span class="bold">WHEN grade IS NULL THEN &#39;No grade assigned&#39;</span>
      WHEN grade = &#39;A&#39; THEN &#39;Excellent&#39;
      WHEN grade = &#39;B&#39; THEN &#39;Very Good&#39;
      WHEN grade = &#39;C&#39; THEN &#39;Good&#39;
      WHEN grade = &#39;D&#39; THEN &#39;Fair&#39;
      WHEN grade = &#39;F&#39; THEN &#39;Poor&#39;
      <span class="bold">ELSE &#39;No such grade&#39;</span>
    END;
    DBMS_OUTPUT.PUT_LINE (&#39;Grade &#39; || grade || &#39; is &#39; || appraisal);
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">Grade  is <span class="bold">No grade assigned</span>
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="LNPLS00212"></a>
<div class="props_rev_3"><a id="GUID-828EB30D-32B4-49E3-90D5-9302172D6EC2"></a>
<h3 id="LNPLS-GUID-828EB30D-32B4-49E3-90D5-9302172D6EC2" class="sect3">SQL Functions in PL/SQL Expressions</h3>
<div>
<p>In PL/SQL expressions, you can use all SQL functions except:</p>
<ul style="list-style-type: disc;">
<li>
<p>Aggregate functions (such as <code class="codeph">AVG</code> and <code class="codeph">COUNT</code>)</p>
</li>
<li>
<p>Analytic functions (such as <code class="codeph">LAG</code> and <code class="codeph">RATIO_TO_REPORT</code>)</p>
</li>
<li>
<p>Data mining functions (such as <code class="codeph">CLUSTER_ID</code> and <code class="codeph">FEATURE_VALUE</code>)</p>
</li>
<li>
<p>Encoding and decoding functions (such as <code class="codeph">DECODE</code> and <code class="codeph">DUMP</code>)</p>
</li>
<li>
<p>Model functions (such as <code class="codeph">ITERATION_NUMBER</code> and <code class="codeph">PREVIOUS</code>)</p>
</li>
<li>
<p>Object reference functions (such as <code class="codeph">REF</code> and <code class="codeph">VALUE</code>)</p>
</li>
<li>
<p>XML functions (such as <code class="codeph">APPENDCHILDXML</code> and <code class="codeph">EXISTSNODE</code>)</p>
</li>
<li>
<p>These conversion functions:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">BIN_TO_NUM</code></p>
</li>
</ul>
</li>
<li>
<p>These miscellaneous functions:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">CUBE_TABLE</code></p>
</li>
<li>
<p><code class="codeph">DATAOBJ_TO_PARTITION</code></p>
</li>
<li>
<p><code class="codeph">LNNVL</code></p>
</li>
<li>
<p><code class="codeph">NVL2</code></p>
</li>
<li>
<p><code class="codeph">SYS_CONNECT_BY_PATH</code></p>
</li>
<li>
<p><code class="codeph">SYS_TYPEID</code></p>
</li>
<li>
<p><code class="codeph">WIDTH_BUCKET</code></p>
</li>
</ul>
</li>
</ul>
<p>PL/SQL supports an overload of <code class="codeph">BITAND</code> for which the arguments and result are <code class="codeph">BINARY_INTEGER</code>.</p>
<p>When used in a PL/SQL expression, the <code class="codeph">RAWTOHEX</code> function accepts an argument of data type <code class="codeph">RAW</code> and returns a <code class="codeph">VARCHAR2</code> value with the hexadecimal representation of bytes that comprise the value of the argument. Arguments of types other than <code class="codeph">RAW</code> can be specified only if they can be implicitly converted to <code class="codeph">RAW</code>. This conversion is possible for <code class="codeph">CHAR</code>, <code class="codeph">VARCHAR2</code>, and <code class="codeph">LONG</code> values that are valid arguments of the <code class="codeph">HEXTORAW</code> function, and for <code class="codeph">LONG</code> <code class="codeph">RAW</code> and <code class="codeph">BLOB</code> values of up to 16380 bytes.</p>
</div>
</div>
</div>
<a id="LNPLS00299"></a>
<div class="props_rev_3"><a id="GUID-9BD20166-6ECC-470A-8D81-47D11EC01CE9"></a>
<h2 id="LNPLS-GUID-9BD20166-6ECC-470A-8D81-47D11EC01CE9" class="sect2">Error-Reporting Functions</h2>
<div>
<p>PL/SQL has two error-reporting functions, <code class="codeph">SQLCODE</code> and <code class="codeph">SQLERRM</code>, for use in PL/SQL exception-handling code.</p>
<p>For their descriptions, see <span class="q">&#34;<a href="sqlcode_function.htm#GUID-1FFD7902-D22D-4505-815A-C97DDBEFB4B5" title="In an exception handler, the SQLCODE function returns the numeric code of the exception being handled. (Outside an exception handler, SQLCODE returns 0.)">SQLCODE Function</a>&#34;</span> and <span class="q">&#34;<a href="sqlerrm_function.htm#GUID-D4468C8F-62D9-42A5-AF72-C1098C866DC5" title="The SQLERRM function returns the error message associated with an error code.">SQLERRM Function</a>&#34;</span>.</p>
<p>You cannot use the <code class="codeph">SQLCODE</code> and <code class="codeph">SQLERRM</code> functions in SQL statements.</p>
</div>
</div>
<a id="LNPLS238"></a><a id="LNPLS00210"></a>
<div class="props_rev_3"><a id="GUID-DC23291F-006D-49C4-87DA-6B31F19F162A"></a>
<h2 id="LNPLS-GUID-DC23291F-006D-49C4-87DA-6B31F19F162A" class="sect2">Conditional Compilation</h2>
<div>
<p>Conditional compilation lets you customize the functionality of a PL/SQL application without removing source text.</p>
<p>For example, you can:</p>
<ul style="list-style-type: disc;">
<li>
<p>Use new features with the latest database release and disable them when running the application in an older database release.</p>
</li>
<li>
<p>Activate debugging or tracing statements in the development environment and hide them when running the application at a production site.</p>
</li>
</ul>
<div class="section">
<p class="subhead2">Topics</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="fundamentals.htm#GUID-09361222-5837-427B-B7C7-D3D425DC89F4" title="A preprocessor control token identifies code that is processed before the PL/SQL unit is compiled.A selection directive selects source text to compile.An error directive produces a user-defined error message during compilation.An inquiry directive provides information about the compilation environment.You can assign values to inquiry directives with the PLSQL_CCFLAGS compilation parameter. If the source text is not wrapped, PL/SQL issues a warning if the value of an inquiry directive cannot be determined.The DBMS_DB_VERSION package specifies the Oracle version numbers and other information useful for simple conditional compilation selections based on Oracle versions.">How Conditional Compilation Works</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-1C90EF04-87AA-4406-B126-F64BEBC65DB7" title="Examples of conditional compilation using selection and user-defined inquiry directives.">Conditional Compilation Examples</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-75F8A716-B2BE-494F-B150-1B4AB802DF25" title="The DBMS_PREPROCESSOR package provides subprograms that retrieve and print the source text of a PL/SQL unit in its post-processed form.">Retrieving and Printing Post-Processed Source Text</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-9AA504C5-8D85-41D6-BC3D-0953202BD9A7" title="Conditional compilation directives are subject to these semantic restrictions.">Conditional Compilation Directive Restrictions</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="LNPLS239"></a><a id="LNPLS294"></a>
<div class="props_rev_3"><a id="GUID-09361222-5837-427B-B7C7-D3D425DC89F4"></a>
<h3 id="LNPLS-GUID-09361222-5837-427B-B7C7-D3D425DC89F4" class="sect3">How Conditional Compilation Works</h3>
<div>
<div class="infobox-note" id="GUID-09361222-5837-427B-B7C7-D3D425DC89F4__GUID-0B410ECA-E39E-4A2E-9DEA-0FFCD0B4FEC8">
<p class="notep1">Note:</p>
<p>The conditional compilation feature and related PL/SQL packages are available for Oracle Database 10<span class="italic">g</span> Release 1 (10.1.0.4) and later releases.</p>
</div>
<p>Conditional compilation uses selection directives, which are similar to <code class="codeph">IF</code> statements, to select source text for compilation. The condition in a selection directive usually includes an inquiry directive. Error directives raise user-defined errors. All conditional compilation directives are built from preprocessor control tokens and PL/SQL text.</p>
<div class="section">
<p class="subhead3">Topics</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="fundamentals.htm#GUID-F41AEE35-8739-4B34-95B1-B77504F20887" title="A preprocessor control token identifies code that is processed before the PL/SQL unit is compiled.">Preprocessor Control Tokens</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-78F2074C-C799-4CF9-9290-EB8473D0C8FB" title="A selection directive selects source text to compile.">Selection Directives</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-61B134B0-8AB9-472A-83EB-6EDE09D875AB" title="An error directive produces a user-defined error message during compilation.">Error Directives</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-E918087C-D5A8-4CEE-841B-5333DE6D4C15" title="An inquiry directive provides information about the compilation environment.">Inquiry Directives</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-6CDF1EB6-913D-48E7-AFDA-DB4DE45209CE" title="The DBMS_DB_VERSION package specifies the Oracle version numbers and other information useful for simple conditional compilation selections based on Oracle versions.">Static Expressions</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="LNPLS240"></a><a id="LNPLS295"></a>
<div class="props_rev_3"><a id="GUID-F41AEE35-8739-4B34-95B1-B77504F20887"></a>
<h4 id="LNPLS-GUID-F41AEE35-8739-4B34-95B1-B77504F20887" class="sect4">Preprocessor Control Tokens</h4>
<div>
<p>A preprocessor control token identifies code that is processed before the PL/SQL unit is compiled.</p>
<div class="section">
<p class="subhead3">Syntax</p>
</div>
<!-- class="section" -->
<div class="section">
<pre dir="ltr">$<span class="italic">plsql_identifier</span>
</pre>
<p>There cannot be space between <code class="codeph">$</code> and <span class="italic"><code class="codeph">plsql_identifier</code></span>.</p>
<p>The character <code class="codeph">$</code> can also appear inside <span class="italic"><code class="codeph">plsql_identifier</code></span>, but it has no special meaning there.</p>
<p>These preprocessor control tokens are reserved:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">$IF</code></p>
</li>
<li>
<p><code class="codeph">$THEN</code></p>
</li>
<li>
<p><code class="codeph">$ELSE</code></p>
</li>
<li>
<p><code class="codeph">$ELSIF</code></p>
</li>
<li>
<p><code class="codeph">$ERROR</code></p>
</li>
</ul>
<p>For information about <span class="italic"><code class="codeph">plsql_identifier</code></span>, see <span class="q">&#34;<a href="fundamentals.htm#GUID-1033B8AE-B6C9-44DB-AFB0-D71A2635BD9E" title="Reserved words and keywords are identifiers that have special meaning in PL/SQL.Predefined identifiers are declared in the predefined package STANDARD.">Identifiers</a>&#34;</span>.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNPLS244"></a><a id="LNPLS296"></a>
<div class="props_rev_3"><a id="GUID-78F2074C-C799-4CF9-9290-EB8473D0C8FB"></a>
<h4 id="LNPLS-GUID-78F2074C-C799-4CF9-9290-EB8473D0C8FB" class="sect4">Selection Directives</h4>
<div>
<p>A <span class="bold">selection directive</span> selects source text to compile.</p>
<div class="section">
<p class="subhead3">Syntax</p>
</div>
<!-- class="section" -->
<div class="section">
<pre dir="ltr">$IF <span class="italic">boolean_static_expression</span> $THEN
   <span class="italic">text</span>
[ $ELSIF <span class="italic">boolean_static_expression</span> $THEN
   <span class="italic">text</span>
]...
[ $ELSE
   <span class="italic">text</span>
$END
]
</pre>
<p>For the syntax of <span class="italic"><code class="codeph">boolean_static_expression</code></span>, see <span class="q">&#34;<a href="fundamentals.htm#GUID-28517127-ED8B-4A52-8F51-118B3D612AEC">BOOLEAN Static Expressions</a>&#34;</span>. The <span class="italic"><code class="codeph">text</code></span> can be anything, but typically, it is either a statement (see <span class="q">&#34;<a href="block.htm#GUID-9ACEB9ED-567E-4E1A-A16A-B8B35214FC9D__CJACJBCH">statement ::=</a>&#34;</span>) or an error directive (explained in <span class="q">&#34;<a href="fundamentals.htm#GUID-61B134B0-8AB9-472A-83EB-6EDE09D875AB" title="An error directive produces a user-defined error message during compilation.">Error Directives</a>&#34;</span>).</p>
<p>The selection directive evaluates the <code class="codeph">BOOLEAN</code> static expressions in the order that they appear until either one expression has the value <code class="codeph">TRUE</code> or the list of expressions is exhausted. If one expression has the value <code class="codeph">TRUE</code>, its text is compiled, the remaining expressions are not evaluated, and their text is not analyzed. If no expression has the value <code class="codeph">TRUE</code>, then if <code class="codeph">$ELSE</code> is present, its text is compiled; otherwise, no text is compiled.</p>
<p>For examples of selection directives, see <span class="q">&#34;<a href="fundamentals.htm#GUID-1C90EF04-87AA-4406-B126-F64BEBC65DB7" title="Examples of conditional compilation using selection and user-defined inquiry directives.">Conditional Compilation Examples</a>&#34;</span>.</p>
<div class="infoboxnotealso" id="GUID-78F2074C-C799-4CF9-9290-EB8473D0C8FB__GUID-4775E8B1-5525-4C86-A8C0-483C3905A385">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="controlstatements.htm#GUID-B7DD4E62-3ED2-41E9-AAE5-90A78788BB31" title="The conditional selection statements, IF and CASE, run different statements for different data values.">Conditional Selection Statements</a>&#34;</span> for information about the <code class="codeph">IF</code> statement, which has the same logic as the selection directive</p>
</div>
</div>
<!-- class="section" --></div>
</div>
<a id="LNPLS245"></a><a id="LNPLS297"></a>
<div class="props_rev_3"><a id="GUID-61B134B0-8AB9-472A-83EB-6EDE09D875AB"></a>
<h4 id="LNPLS-GUID-61B134B0-8AB9-472A-83EB-6EDE09D875AB" class="sect4">Error Directives</h4>
<div>
<p>An <span class="bold">error directive</span> produces a user-defined error message during compilation.</p>
<div class="section">
<p class="subhead3">Syntax</p>
</div>
<!-- class="section" -->
<div class="section">
<pre dir="ltr">$ERROR <span class="italic">varchar2_static_expression</span> $END
</pre>
<p>It produces this compile-time error message, where <span class="italic"><code class="codeph">string</code></span> is the value of <span class="italic"><code class="codeph">varchar2_static_expression</code></span>:</p>
<pre dir="ltr">PLS-00179: $ERROR: <span class="italic">string</span>
</pre>
<p>For the syntax of <span class="italic"><code class="codeph">varchar2_static_expression</code></span>, see <span class="q">&#34;<a href="fundamentals.htm#GUID-5D80A222-E07B-45B5-AB08-83016EF64A45">VARCHAR2 Static Expressions</a>&#34;</span>.</p>
<p>For an example of an error directive, see <a href="fundamentals.htm#GUID-1C90EF04-87AA-4406-B126-F64BEBC65DB7__BEIJFDHG">Example 2-58</a>.</p>
</div>
<!-- class="section" --></div>
</div>
<a id="LNPLS256"></a><a id="LNPLS261"></a><a id="LNPLS298"></a>
<div class="props_rev_3"><a id="GUID-E918087C-D5A8-4CEE-841B-5333DE6D4C15"></a>
<h4 id="LNPLS-GUID-E918087C-D5A8-4CEE-841B-5333DE6D4C15" class="sect4">Inquiry Directives</h4>
<div>
<p>An <span class="bold">inquiry directive</span> provides information about the compilation environment.</p>
<div class="section">
<p class="subhead3">Syntax</p>
</div>
<!-- class="section" -->
<div class="section">
<pre dir="ltr">$$<span class="italic">name</span>
</pre>
<p>For information about <span class="italic"><code class="codeph">name</code></span>, which is an unquoted PL/SQL identifier, see <span class="q">&#34;<a href="fundamentals.htm#GUID-1033B8AE-B6C9-44DB-AFB0-D71A2635BD9E" title="Reserved words and keywords are identifiers that have special meaning in PL/SQL.Predefined identifiers are declared in the predefined package STANDARD.">Identifiers</a>&#34;</span>.</p>
<p>An inquiry directive typically appears in the <span class="italic"><code class="codeph">boolean_static_expression</code></span> of a selection directive, but it can appear anywhere that a variable or literal of its type can appear. Moreover, it can appear where regular PL/SQL allows only a literal (not a variable)&mdash;for example, to specify the size of a <code class="codeph">VARCHAR2</code> variable.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Topics</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="fundamentals.htm#GUID-3DABF5E1-AC84-448B-810F-31196991EA10">Predefined Inquiry Directives</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-623713EB-4FD1-4C8B-955C-4135342F5F68" title="You can assign values to inquiry directives with the PLSQL_CCFLAGS compilation parameter.">Assigning Values to Inquiry Directives</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-9EEDA139-811F-47C2-B382-6EA1424B852E" title="If the source text is not wrapped, PL/SQL issues a warning if the value of an inquiry directive cannot be determined.">Unresolvable Inquiry Directives</a></p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<a id="LNPLS262"></a><a id="LNPLS273"></a><a id="LNPLS299"></a>
<div class="props_rev_3"><a id="GUID-3DABF5E1-AC84-448B-810F-31196991EA10"></a>
<h5 id="LNPLS-GUID-3DABF5E1-AC84-448B-810F-31196991EA10" class="sect5">Predefined Inquiry Directives</h5>
<div>
<p>The predefined inquiry directives are:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">$$PLSQL_LINE</code></p>
<p>A <code class="codeph">PLS_INTEGER</code> literal whose value is the number of the source line on which the directive appears in the current PL/SQL unit. An example of <code class="codeph">$$PLSQL_LINE</code> in a selection directive is:</p>
<pre dir="ltr">$IF <span class="bold">$$PLSQL_LINE = 32</span> $THEN ...
</pre></li>
<li>
<p><code class="codeph">$$PLSQL_UNIT</code></p>
<p>A <code class="codeph">VARCHAR2</code> literal that contains the name of the current PL/SQL unit. If the current PL/SQL unit is an anonymous block, then <code class="codeph">$$PLSQL_UNIT</code> contains a <code class="codeph">NULL</code> value.</p>
</li>
<li>
<p><code class="codeph">$$PLSQL_UNIT_OWNER</code></p>
<p>A <code class="codeph">VARCHAR2</code> literal that contains the name of the owner of the current PL/SQL unit. If the current PL/SQL unit is an anonymous block, then <code class="codeph">$$PLSQL_UNIT_OWNER</code> contains a <code class="codeph">NULL</code> value.</p>
</li>
<li>
<p><code class="codeph">$$PLSQL_UNIT_TYPE</code></p>
<p>A <code class="codeph">VARCHAR2</code> literal that contains the type of the current PL/SQL unit&mdash;<code class="codeph">ANONYMOUS</code> <code class="codeph">BLOCK</code>, <code class="codeph">FUNCTION</code>, <code class="codeph">PACKAGE</code>, <code class="codeph">PACKAGE</code> <code class="codeph">BODY</code>, <code class="codeph">PROCEDURE</code>, <code class="codeph">TRIGGER</code>, <code class="codeph">TYPE</code>, or <code class="codeph">TYPE</code> <code class="codeph">BODY</code>. Inside an anonymous block or non-DML trigger, <code class="codeph">$$PLSQL_UNIT_TYPE</code> has the value <code class="codeph">ANONYMOUS BLOCK</code>.</p>
</li>
<li>
<p><code class="codeph">$$</code><span class="italic"><code class="codeph">plsql_compilation_parameter</code></span></p>
<p>The name <span class="italic"><code class="codeph">plsql_compilation_parameter</code></span> is a PL/SQL compilation parameter (for example, <code class="codeph">PLSCOPE_SETTINGS</code>). For descriptions of these parameters, see <a href="overview.htm#GUID-DF63BC59-22C2-4BA8-9240-F74D505D5102__G3260498" title="This table summarizes the initialization parameters for PL/SQL compilation.">Table 1-2</a>.</p>
</li>
</ul>
<p>Because a selection directive needs a <code class="codeph">BOOLEAN</code> static expression, you cannot use <code class="codeph">$$PLSQL_UNIT</code>, <code class="codeph">$$PLSQL_UNIT_OWNER</code>, or <code class="codeph">$$PLSQL_UNIT_TYPE</code> in a <code class="codeph">VARCHAR2</code> comparison such as:</p>
<pre dir="ltr">$IF <span class="bold">$$PLSQL_UNIT = &#39;AWARD_BONUS&#39;</span> $THEN ...
$IF <span class="bold">$$PLSQL_UNIT_OWNER IS HR</span> $THEN ...
$IF <span class="bold">$$PLSQL_UNIT_TYPE IS FUNCTION</span> $THEN ...
</pre>
<p>However, you can compare the preceding directives to <code class="codeph">NULL</code>. For example:</p>
<pre dir="ltr">$IF <span class="bold">$$PLSQL_UNIT IS NULL</span> $THEN ...
$IF <span class="bold">$$PLSQL_UNIT_OWNER IS NOT NULL</span> $THEN ...
$IF <span class="bold">$$PLSQL_UNIT_TYPE IS NULL</span> $THEN ...
</pre>
<div class="example" id="GUID-3DABF5E1-AC84-448B-810F-31196991EA10__CIHHCCFE">
<p class="titleinexample">Example 2-54 Predefined Inquiry Directives</p>
<p>In this example, a SQL*Plus script, uses several predefined inquiry directives as <code class="codeph">PLS_INTEGER</code> and <code class="codeph">VARCHAR2</code> literals to show how their values are assigned.</p>
<pre dir="ltr">SQL&gt; CREATE OR REPLACE PROCEDURE p
  2  AUTHID DEFINER IS
  3    i PLS_INTEGER;
  4  BEGIN
  5    DBMS_OUTPUT.PUT_LINE(&#39;Inside p&#39;);
  <span class="bold">6    i := $$PLSQL_LINE;</span>
  7    DBMS_OUTPUT.PUT_LINE(&#39;i = &#39; || i);
  <span class="bold">8</span>    DBMS_OUTPUT.PUT_LINE(&#39;$$PLSQL_LINE = &#39; || <span class="bold">$$PLSQL_LINE</span>);
  9    DBMS_OUTPUT.PUT_LINE(&#39;$$PLSQL_UNIT = &#39; || <span class="bold">$$PLSQL_UNIT</span>);
 10    DBMS_OUTPUT.PUT_LINE(&#39;$$PLSQL_UNIT_OWNER = &#39; || <span class="bold">$$PLSQL_UNIT_OWNER</span>);
 11    DBMS_OUTPUT.PUT_LINE(&#39;$$PLSQL_UNIT_TYPE = &#39; || <span class="bold">$$PLSQL_UNIT_TYPE</span>);
 12  END;
 13  /
 
Procedure created.
 
SQL&gt; BEGIN
  2    p;
  3    DBMS_OUTPUT.PUT_LINE(&#39;Outside p&#39;);
  <span class="bold">4</span>    DBMS_OUTPUT.PUT_LINE(&#39;$$PLSQL_LINE = &#39; || <span class="bold">$$PLSQL_LINE</span>);
  5    DBMS_OUTPUT.PUT_LINE(&#39;$$PLSQL_UNIT = &#39; || <span class="bold">$$PLSQL_UNIT</span>);
  6    DBMS_OUTPUT.PUT_LINE(&#39;$$PLSQL_UNIT_OWNER = &#39; || <span class="bold">$$PLSQL_UNIT_OWNER</span>);
  7    DBMS_OUTPUT.PUT_LINE(&#39;$$PLSQL_UNIT_TYPE = &#39; || <span class="bold">$$PLSQL_UNIT_TYPE</span>);
  8  END;
  9  /
</pre>
<p>Result:</p>
<pre dir="ltr">Inside p
i = 6
$$PLSQL_LINE = 8
$$PLSQL_UNIT = P
$$PLSQL_UNIT_OWNER = HR
$$PLSQL_UNIT_TYPE = PROCEDURE
Outside p
$$PLSQL_LINE = 4
$$PLSQL_UNIT =
$$PLSQL_UNIT_OWNER =
$$PLSQL_UNIT_TYPE = ANONYMOUS BLOCK
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-3DABF5E1-AC84-448B-810F-31196991EA10__CIHDHADG">
<p class="titleinexample">Example 2-55 Displaying Values of PL/SQL Compilation Parameters</p>
<p>This example displays the current values of PL/SQL the compilation parameters.</p>
<div class="infobox-note" id="GUID-3DABF5E1-AC84-448B-810F-31196991EA10__GUID-39CD12F5-DA86-4ECE-80CD-540641AA2E9C">
<p class="notep1">Note:</p>
<p>In the SQL*Plus environment, you can display the current values of initialization parameters, including the PL/SQL compilation parameters, with the command <code class="codeph">SHOW</code> <code class="codeph">PARAMETERS</code>. For more information about the <code class="codeph">SHOW</code> command and its <code class="codeph">PARAMETERS</code> option, see <a class="olink SQPUG123" target="_blank" href="../SQPUG/ch_twelve040.htm#SQPUG123"><span class="italic">SQL*Plus User&#39;s Guide and Reference</span></a>.</p>
</div>
<pre dir="ltr">BEGIN
  DBMS_OUTPUT.PUT_LINE(&#39;$$PLSCOPE_SETTINGS = &#39;     || $$PLSCOPE_SETTINGS);
  DBMS_OUTPUT.PUT_LINE(&#39;$$PLSQL_CCFLAGS = &#39;        || $$PLSQL_CCFLAGS);
  DBMS_OUTPUT.PUT_LINE(&#39;$$PLSQL_CODE_TYPE = &#39;      || $$PLSQL_CODE_TYPE);
  DBMS_OUTPUT.PUT_LINE(&#39;$$PLSQL_OPTIMIZE_LEVEL = &#39; || $$PLSQL_OPTIMIZE_LEVEL);
  DBMS_OUTPUT.PUT_LINE(&#39;$$PLSQL_WARNINGS = &#39;       || $$PLSQL_WARNINGS);
  DBMS_OUTPUT.PUT_LINE(&#39;$$NLS_LENGTH_SEMANTICS = &#39; || $$NLS_LENGTH_SEMANTICS);
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">$$PLSCOPE_SETTINGS = IDENTIFIERS:NONE
$$PLSQL_CCFLAGS =
$$PLSQL_CODE_TYPE = INTERPRETED
$$PLSQL_OPTIMIZE_LEVEL = 2
$$PLSQL_WARNINGS = ENABLE:ALL
$$NLS_LENGTH_SEMANTICS = BYTE
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS275"></a><a id="LNPLS274"></a>
<div class="props_rev_3"><a id="GUID-623713EB-4FD1-4C8B-955C-4135342F5F68"></a>
<h5 id="LNPLS-GUID-623713EB-4FD1-4C8B-955C-4135342F5F68" class="sect5">Assigning Values to Inquiry Directives</h5>
<div>
<p>You can assign values to inquiry directives with the <code class="codeph">PLSQL_CCFLAGS</code> compilation parameter.</p>
<div class="section">
<p>For example:</p>
<pre dir="ltr">ALTER SESSION SET PLSQL_CCFLAGS = 
  &#39;<span class="italic">name1</span>:<span class="italic">value1</span>, <span class="italic">name2</span>:<span class="italic">value2</span>, ... <span class="italic">name</span>n:<span class="italic">value</span>n&#39;
</pre>
<p>Each <span class="italic"><code class="codeph">value</code></span> must be either a <code class="codeph">BOOLEAN</code> literal (<code class="codeph">TRUE</code>, <code class="codeph">FALSE</code>, or <code class="codeph">NULL</code>) or <code class="codeph">PLS_INTEGER</code> literal. The data type of <span class="italic"><code class="codeph">value</code></span> determines the data type of <span class="italic"><code class="codeph">name</code></span>.</p>
<p>The same <span class="italic"><code class="codeph">name</code></span> can appear multiple times, with values of the same or different data types. Later assignments override earlier assignments. For example, this command sets the value of <code class="codeph">$$flag</code> to 5 and its data type to <code class="codeph">PLS_INTEGER</code>:</p>
<pre dir="ltr">ALTER SESSION SET PLSQL_CCFLAGS = &#39;flag:TRUE, flag:5&#39;
</pre>
<p>Oracle recommends against using <code class="codeph">PLSQL_CCFLAGS</code> to assign values to predefined inquiry directives, including compilation parameters. To assign values to compilation parameters, Oracle recommends using the <code class="codeph">ALTER</code> <code class="codeph">SESSION</code> statement.</p>
<p>For more information about the <code class="codeph">ALTER</code> <code class="codeph">SESSION</code> statement, see <a class="olink SQLRF00901" target="_blank" href="../SQLRF/statements_2015.htm#SQLRF00901"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<div class="infobox-note" id="GUID-623713EB-4FD1-4C8B-955C-4135342F5F68__GUID-89D404FA-004F-4155-AD57-F409416A829E">
<p class="notep1">Note:</p>
<p>The compile-time value of <code class="codeph">PLSQL_CCFLAGS</code> is stored with the metadata of stored PL/SQL units, which means that you can reuse the value when you explicitly recompile the units. For more information, see <span class="q">&#34;<a href="overview.htm#GUID-DF63BC59-22C2-4BA8-9240-F74D505D5102" title="PL/SQL units are affected by PL/SQL compilation parameters (a category of database initialization parameters). Different PL/SQL units&mdash;for example, a package specification and its body&mdash;can have different compilation parameter settings.">PL/SQL Units and Compilation Parameters</a>&#34;</span>.</p>
</div>
<p>For more information about <code class="codeph">PLSQL_CCFLAGS</code>, see <a class="olink REFRN10261" target="_blank" href="../REFRN/GUID-E27CC5B2-7D1C-4EE1-81B1-1F2D51EA99CE.htm#REFRN10261"><span class="italic">Oracle Database Reference</span></a>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-623713EB-4FD1-4C8B-955C-4135342F5F68__CIHHDCIE">
<p class="titleinexample">Example 2-56 PLSQL_CCFLAGS Assigns Value to Itself</p>
<p>This example uses <code class="codeph">PLSQL_CCFLAGS</code> to assign a value to the user-defined inquiry directive <code class="codeph">$$Some_Flag</code> and (though not recommended) to itself. Because later assignments override earlier assignments, the resulting value of <code class="codeph">$$Some_Flag</code> is 2 and the resulting value of <code class="codeph">PLSQL_CCFLAGS</code> is the value that it assigns to itself (99), not the value that the <code class="codeph">ALTER</code> <code class="codeph">SESSION</code> statement assigns to it (<code class="codeph">&#39;Some_Flag:1, Some_Flag:2, PLSQL_CCFlags:99&#39;</code>).</p>
<pre dir="ltr">ALTER SESSION SET
<span class="bold">PLSQL_CCFlags = &#39;Some_Flag:1, Some_Flag:2, PLSQL_CCFlags:99&#39;</span>
/
BEGIN
  DBMS_OUTPUT.PUT_LINE($$Some_Flag);
  DBMS_OUTPUT.PUT_LINE($$PLSQL_CCFlags);
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">2
99
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS276"></a>
<div class="props_rev_3"><a id="GUID-9EEDA139-811F-47C2-B382-6EA1424B852E"></a>
<h5 id="LNPLS-GUID-9EEDA139-811F-47C2-B382-6EA1424B852E" class="sect5">Unresolvable Inquiry Directives</h5>
<div>
<p>If the source text is not wrapped, PL/SQL issues a warning if the value of an inquiry directive cannot be determined.</p>
<p>If an inquiry directive (<code class="codeph">$$</code><span class="italic"><code class="codeph">name</code></span>) cannot be resolved, and the source text is not wrapped, then PL/SQL issues the warning <code class="codeph">PLW-6003</code> and substitutes <code class="codeph">NULL</code> for the value of the unresolved inquiry directive. If the source text is wrapped, the warning message is disabled, so that the unresolved inquiry directive is not revealed.</p>
<p>For information about wrapping PL/SQL source text, see <a href="wrap.htm#GUID-AB6FFBAD-DE20-4197-A885-AF81F3766FA2">PL/SQL Source Text Wrapping</a>.</p>
</div>
</div>
</div>
<a id="LNPLS277"></a><a id="LNPLS300"></a>
<div class="props_rev_3"><a id="GUID-6CDF1EB6-913D-48E7-AFDA-DB4DE45209CE"></a>
<h4 id="LNPLS-GUID-6CDF1EB6-913D-48E7-AFDA-DB4DE45209CE" class="sect4">Static Expressions</h4>
<div>
<p>A <span class="bold">static expression</span> is an expression whose value can be determined at compile time&mdash;that is, it does not include character comparisons, variables, or function invocations. Static expressions are the only expressions that can appear in conditional compilation directives.</p>
<div class="section">
<p class="subhead3">Topics</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><a href="fundamentals.htm#GUID-664E82BE-7D30-4364-9E58-D68B4FF3F601">PLS_INTEGER Static Expressions</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-28517127-ED8B-4A52-8F51-118B3D612AEC">BOOLEAN Static Expressions</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-5D80A222-E07B-45B5-AB08-83016EF64A45">VARCHAR2 Static Expressions</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-DC9C8329-010C-46AD-9F51-39485DD77CF5">Static Constants</a></p>
</li>
<li>
<p><a href="fundamentals.htm#GUID-1396BF69-FF55-4242-96A6-6DE74FF2E8A0" title="The DBMS_DB_VERSION package specifies the Oracle version numbers and other information useful for simple conditional compilation selections based on Oracle versions.">DBMS_DB_VERSION Package</a></p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-6CDF1EB6-913D-48E7-AFDA-DB4DE45209CE__GUID-6E03E087-FC58-4AD0-935F-7FF2EE56BCF3">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="fundamentals.htm#GUID-42674F8E-55C3-44D5-BA42-47B323CD74F5" title="An&nbsp;expression&nbsp;is a combination of one or more values, operators, and SQL functions that evaluates to a value.">Expressions</a>&#34;</span> for general information about expressions</p>
</div>
</div>
<!-- class="section" --></div>
<a id="LNPLS302"></a>
<div class="props_rev_3"><a id="GUID-664E82BE-7D30-4364-9E58-D68B4FF3F601"></a>
<h5 id="LNPLS-GUID-664E82BE-7D30-4364-9E58-D68B4FF3F601" class="sect5">PLS_INTEGER Static Expressions</h5>
<div>
<p><code class="codeph">PLS_INTEGER</code> static expressions are:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">PLS_INTEGER</code> literals</p>
<p>For information about literals, see <span class="q">&#34;<a href="fundamentals.htm#GUID-A5970DA8-78B4-460B-971D-C957A80B3B08" title="A literal is a value that is neither represented by an identifier nor calculated from other values.">Literals</a>&#34;</span>.</p>
</li>
<li>
<p><code class="codeph">PLS_INTEGER</code> static constants</p>
<p>For information about static constants, see <span class="q">&#34;<a href="fundamentals.htm#GUID-DC9C8329-010C-46AD-9F51-39485DD77CF5">Static Constants</a>&#34;</span>.</p>
</li>
<li>
<p><code class="codeph">NULL</code></p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-664E82BE-7D30-4364-9E58-D68B4FF3F601__GUID-6699AA03-6199-4E6B-867D-A7E2500F8D4D">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="datatypes.htm#GUID-9517B7AC-9CEA-4C36-A454-52588BEEBE8F" title="The PL/SQL data types PLS_INTEGER and BINARY_INTEGER are identical.">PLS_INTEGER and BINARY_INTEGER Data Types</a>&#34;</span> for information about the <code class="codeph">PLS_INTEGER</code> data type</p>
</div>
</div>
</div>
<a id="LNPLS301"></a>
<div class="props_rev_3"><a id="GUID-28517127-ED8B-4A52-8F51-118B3D612AEC"></a>
<h5 id="LNPLS-GUID-28517127-ED8B-4A52-8F51-118B3D612AEC" class="sect5">BOOLEAN Static Expressions</h5>
<div>
<p><code class="codeph">BOOLEAN</code> static expressions are:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">BOOLEAN</code> literals (<code class="codeph">TRUE</code>, <code class="codeph">FALSE</code>, or <code class="codeph">NULL</code>)</p>
</li>
<li>
<p><code class="codeph">BOOLEAN</code> static constants</p>
<p>For information about static constants, see <span class="q">&#34;<a href="fundamentals.htm#GUID-DC9C8329-010C-46AD-9F51-39485DD77CF5">Static Constants</a>&#34;</span>.</p>
</li>
<li>
<p>Where <span class="italic"><code class="codeph">x</code></span> and <span class="italic"><code class="codeph">y</code></span> are <code class="codeph">PLS_INTEGER</code> static expressions:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="italic"><code class="codeph">x</code></span> <code class="codeph">&gt;</code> <span class="italic"><code class="codeph">y</code></span></p>
</li>
<li>
<p><span class="italic"><code class="codeph">x</code></span> <code class="codeph">&lt;</code> <span class="italic"><code class="codeph">y</code></span></p>
</li>
<li>
<p><span class="italic"><code class="codeph">x</code></span> <code class="codeph">&gt;=</code> <span class="italic"><code class="codeph">y</code></span></p>
</li>
<li>
<p><span class="italic"><code class="codeph">x</code></span> <code class="codeph">&lt;=</code> <span class="italic"><code class="codeph">y</code></span></p>
</li>
<li>
<p><span class="italic"><code class="codeph">x</code></span> <code class="codeph">=</code> <span class="italic"><code class="codeph">y</code></span></p>
</li>
<li>
<p><span class="italic"><code class="codeph">x</code></span> <code class="codeph">&lt;&gt;</code> <span class="italic"><code class="codeph">y</code></span></p>
</li>
</ul>
<p>For information about <code class="codeph">PLS_INTEGER</code> static expressions, see <span class="q">&#34;<a href="fundamentals.htm#GUID-664E82BE-7D30-4364-9E58-D68B4FF3F601">PLS_INTEGER Static Expressions</a>&#34;</span>.</p>
</li>
<li>
<p>Where <span class="italic"><code class="codeph">x</code></span> and <span class="italic"><code class="codeph">y</code></span> are <code class="codeph">BOOLEAN</code> expressions:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">NOT</code> <span class="italic"><code class="codeph">y</code></span></p>
</li>
<li>
<p><span class="italic"><code class="codeph">x</code></span> <code class="codeph">AND</code> <span class="italic"><code class="codeph">y</code></span></p>
</li>
<li>
<p><span class="italic"><code class="codeph">x</code></span> <code class="codeph">OR</code> <span class="italic"><code class="codeph">y</code></span></p>
</li>
<li>
<p><span class="italic"><code class="codeph">x</code></span> <code class="codeph">&gt;</code> <span class="italic"><code class="codeph">y</code></span></p>
</li>
<li>
<p><span class="italic"><code class="codeph">x</code></span> <code class="codeph">&gt;=</code> <span class="italic"><code class="codeph">y</code></span></p>
</li>
<li>
<p><span class="italic"><code class="codeph">x</code></span> <code class="codeph">=</code> <span class="italic"><code class="codeph">y</code></span></p>
</li>
<li>
<p><span class="italic"><code class="codeph">x</code></span> <code class="codeph">&lt;=</code> <span class="italic"><code class="codeph">y</code></span></p>
</li>
<li>
<p><span class="italic"><code class="codeph">x</code></span> <code class="codeph">&lt;&gt;</code> <span class="italic"><code class="codeph">y</code></span></p>
</li>
</ul>
<p>For information about <code class="codeph">BOOLEAN</code> expressions, see <span class="q">&#34;<a href="fundamentals.htm#GUID-E277B6FF-866F-486A-BCB1-58235C0AFC69" title="A BOOLEAN expression is an expression that returns a BOOLEAN value&mdash;TRUE, FALSE, or NULL.">BOOLEAN Expressions</a>&#34;</span>.</p>
</li>
<li>
<p>Where <code class="codeph">x</code> is a static expression:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="italic"><code class="codeph">x</code></span> <code class="codeph">IS</code> <code class="codeph">NULL</code></p>
</li>
<li>
<p><span class="italic"><code class="codeph">x</code></span> <code class="codeph">IS</code> <code class="codeph">NOT</code> <code class="codeph">NULL</code></p>
</li>
</ul>
<p>For information about static expressions, see <span class="q">&#34;<a href="fundamentals.htm#GUID-6CDF1EB6-913D-48E7-AFDA-DB4DE45209CE" title="The DBMS_DB_VERSION package specifies the Oracle version numbers and other information useful for simple conditional compilation selections based on Oracle versions.">Static Expressions</a>&#34;</span>.</p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-28517127-ED8B-4A52-8F51-118B3D612AEC__GUID-4CBABF00-B146-41BA-9CE1-05A7CBD7B0D1">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="datatypes.htm#GUID-02AEA63C-9A27-43F4-80B7-4781343445D0">BOOLEAN Data Type</a>&#34;</span> for information about the <code class="codeph">BOOLEAN</code> data type</p>
</div>
</div>
</div>
<a id="LNPLS303"></a>
<div class="props_rev_3"><a id="GUID-5D80A222-E07B-45B5-AB08-83016EF64A45"></a>
<h5 id="LNPLS-GUID-5D80A222-E07B-45B5-AB08-83016EF64A45" class="sect5">VARCHAR2 Static Expressions</h5>
<div>
<p><code class="codeph">VARCHAR2</code> static expressions are:</p>
<ul style="list-style-type: disc;">
<li>
<p>String literal with maximum size of 32,767 bytes</p>
<p>For information about literals, see <span class="q">&#34;<a href="fundamentals.htm#GUID-A5970DA8-78B4-460B-971D-C957A80B3B08" title="A literal is a value that is neither represented by an identifier nor calculated from other values.">Literals</a>&#34;</span>.</p>
</li>
<li>
<p><code class="codeph">NULL</code></p>
</li>
<li>
<p><code class="codeph">TO_CHAR(x)</code>, where <code class="codeph">x</code> is a <code class="codeph">PLS_INTEGER</code> static expression</p>
<p>For information about the <code class="codeph">TO_CHAR</code> function, see <a class="olink SQLRF06128" target="_blank" href="../SQLRF/functions215.htm#SQLRF06128"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</li>
<li>
<p><code class="codeph">TO_CHAR(x</code>, <code class="codeph">f</code>, <code class="codeph">n)</code> where <code class="codeph">x</code> is a <code class="codeph">PLS_INTEGER</code> static expression and <code class="codeph">f</code> and <code class="codeph">n</code> are <code class="codeph">VARCHAR2</code> static expressions</p>
<p>For information about the <code class="codeph">TO_CHAR</code> function, see <a class="olink SQLRF06130" target="_blank" href="../SQLRF/functions217.htm#SQLRF06130"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</li>
<li>
<p><code class="codeph">x</code> <code class="codeph">||</code> <code class="codeph">y</code> where <code class="codeph">x</code> and <code class="codeph">y</code> are <code class="codeph">VARCHAR2</code> or <code class="codeph">PLS_INTEGER</code> static expressions</p>
<p>For information about <code class="codeph">PLS_INTEGER</code> static expressions, see <span class="q">&#34;<a href="fundamentals.htm#GUID-664E82BE-7D30-4364-9E58-D68B4FF3F601">PLS_INTEGER Static Expressions</a>&#34;</span>.</p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-5D80A222-E07B-45B5-AB08-83016EF64A45__GUID-39F2C2F8-0EB4-4778-AEDE-89391A23EF98">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="datatypes.htm#GUID-43BB16CE-9D77-419B-ACE9-32D8A91B3D43" title="This explains the differences and considerations of using blank-padding with CHAR and VARCHAR2.The SQL rules for comparing character values apply to PL/SQL character variables.">CHAR and VARCHAR2 Variables</a>&#34;</span> for information about the <code class="codeph">VARCHAR2</code> data type</p>
</div>
</div>
</div>
<a id="LNPLS305"></a><a id="LNPLS304"></a>
<div class="props_rev_3"><a id="GUID-DC9C8329-010C-46AD-9F51-39485DD77CF5"></a>
<h5 id="LNPLS-GUID-DC9C8329-010C-46AD-9F51-39485DD77CF5" class="sect5">Static Constants</h5>
<div>
<p>A <span class="bold">static constant</span> is declared in a package specification with this syntax:</p>
<pre dir="ltr"><span class="italic">constant_name</span> CONSTANT <span class="italic">data_type</span> := <span class="italic">static_expression</span>;
</pre>
<p>The type of <span class="italic"><code class="codeph">static_expression</code></span> must be the same as <span class="italic"><code class="codeph">data_type</code></span> (either <code class="codeph">BOOLEAN</code> or <code class="codeph">PLS_INTEGER</code>).</p>
<p>The static constant must always be referenced as <span class="italic"><code class="codeph">package_name</code></span>.<span class="italic"><code class="codeph">constant_name</code></span>, even in the body of the <span class="italic"><code class="codeph">package_name</code></span> package.</p>
<p>If you use <span class="italic"><code class="codeph">constant_name</code></span> in the <code class="codeph">BOOLEAN</code> expression in a conditional compilation directive in a PL/SQL unit, then the PL/SQL unit depends on the package <span class="italic"><code class="codeph">package_name</code></span>. If you alter the package specification, the dependent PL/SQL unit might become invalid and need recompilation (for information about the invalidation of dependent objects, see <a class="olink ADFNS99992" target="_blank" href="../ADFNS/adfns_dependencies.htm#ADFNS99992"><span class="italic">Oracle Database Development Guide</span></a>).</p>
<p>If you use a package with static constants to control conditional compilation in multiple PL/SQL units, Oracle recommends that you create only the package specification, and dedicate it exclusively to controlling conditional compilation. This practice minimizes invalidations caused by altering the package specification.</p>
<p>To control conditional compilation in a single PL/SQL unit, you can set flags in the <code class="codeph">PLSQL_CCFLAGS</code> compilation parameter. For information about this parameter, see <span class="q">&#34;<a href="fundamentals.htm#GUID-623713EB-4FD1-4C8B-955C-4135342F5F68" title="You can assign values to inquiry directives with the PLSQL_CCFLAGS compilation parameter.">Assigning Values to Inquiry Directives</a>&#34;</span> and <a class="olink REFRN10261" target="_blank" href="../REFRN/GUID-E27CC5B2-7D1C-4EE1-81B1-1F2D51EA99CE.htm#REFRN10261"><span class="italic">Oracle Database Reference</span></a>.</p>
<p>In <a href="fundamentals.htm#GUID-DC9C8329-010C-46AD-9F51-39485DD77CF5__CIHEBFHF">Example 2-57</a>, the package <code class="codeph">my_debug</code> defines the static constants <code class="codeph">debug</code> and <code class="codeph">trace</code> to control debugging and tracing in multiple PL/SQL units. The procedure <code class="codeph">my_proc1</code> uses only <code class="codeph">debug</code>, and the procedure <code class="codeph">my_proc2</code> uses only <code class="codeph">trace</code>, but both procedures depend on the package. However, the recompiled code might not be different. For example, if you only change the value of <code class="codeph">debug</code> to <code class="codeph">FALSE</code> and then recompile the two procedures, the compiled code for <code class="codeph">my_proc1</code> changes, but the compiled code for <code class="codeph">my_proc2</code> does not.</p>
<div class="infoboxnotealso" id="GUID-DC9C8329-010C-46AD-9F51-39485DD77CF5__GUID-A1C259FC-2E4B-427D-B28B-19044B8320AF">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="fundamentals.htm#GUID-3758F6D6-8F46-4FD0-8758-13F0ACFE90E6" title="A constant holds a value that does not change.">Constant Declarations</a>&#34;</span> for general information about declaring constants</p>
</li>
<li>
<p><a href="packages.htm#GUID-C285EC5A-BE50-4192-A88E-48C0778B34E0" title="This chapter explains how to bundle related PL/SQL code and data into a package, whose contents are available to many applications.">PL/SQL Packages</a> for more information about packages</p>
</li>
<li>
<p><a class="olink ADFNS99967" target="_blank" href="../ADFNS/adfns_dependencies.htm#ADFNS99967"><span class="italic">Oracle Database Development Guide</span></a> for more information about schema object dependencies</p>
</li>
</ul>
</div>
<div class="example" id="GUID-DC9C8329-010C-46AD-9F51-39485DD77CF5__CIHEBFHF">
<p class="titleinexample">Example 2-57 Static Constants</p>
<pre dir="ltr">CREATE PACKAGE my_debug IS
  <span class="bold">debug</span> CONSTANT BOOLEAN := TRUE;
  <span class="bold">trace</span> CONSTANT BOOLEAN := TRUE;
END my_debug;
/
 
CREATE PROCEDURE my_proc1 AUTHID DEFINER IS
BEGIN
  $IF <span class="bold">my_debug.debug</span> $THEN
    DBMS_OUTPUT.put_line(&#39;Debugging ON&#39;);
  $ELSE
    DBMS_OUTPUT.put_line(&#39;Debugging OFF&#39;);
  $END
END my_proc1;
/
 
CREATE PROCEDURE my_proc2 AUTHID DEFINER IS
BEGIN
  $IF <span class="bold">my_debug.trace</span> $THEN
    DBMS_OUTPUT.put_line(&#39;Tracing ON&#39;);
  $ELSE
    DBMS_OUTPUT.put_line(&#39;Tracing OFF&#39;);
  $END
END my_proc2;
/
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS306"></a>
<div class="props_rev_3"><a id="GUID-1396BF69-FF55-4242-96A6-6DE74FF2E8A0"></a>
<h5 id="LNPLS-GUID-1396BF69-FF55-4242-96A6-6DE74FF2E8A0" class="sect5">DBMS_DB_VERSION Package</h5>
<div>
<p>The <code class="codeph">DBMS_DB_VERSION</code> package specifies the Oracle version numbers and other information useful for simple conditional compilation selections based on Oracle versions.</p>
<p>The <code class="codeph">DBMS_DB_VERSION</code> package provides these static constants:</p>
<ul style="list-style-type: disc;">
<li>
<p>The <code class="codeph">PLS_INTEGER</code> constant <code class="codeph">VERSION</code> identifies the current Oracle Database version.</p>
</li>
<li>
<p>The <code class="codeph">PLS_INTEGER</code> constant <code class="codeph">RELEASE</code> identifies the current Oracle Database release number.</p>
</li>
<li>
<p>Each <code class="codeph">BOOLEAN</code> constant of the form <code class="codeph">VER_LE_</code><span class="italic"><code class="codeph">v</code></span> has the value <code class="codeph">TRUE</code> if the database version is less than or equal to <span class="italic"><code class="codeph">v</code></span>; otherwise, it has the value <code class="codeph">FALSE</code>.</p>
</li>
<li>
<p>Each <code class="codeph">BOOLEAN</code> constant of the form <code class="codeph">VER_LE_</code><span class="italic"><code class="codeph">v_r</code></span> has the value <code class="codeph">TRUE</code> if the database version is less than or equal to <span class="italic"><code class="codeph">v</code></span> and release is less than or equal to <span class="italic"><code class="codeph">r</code></span>; otherwise, it has the value <code class="codeph">FALSE</code>.</p>
</li>
</ul>
<p>For more information about the <code class="codeph">DBMS_DB_VERSION</code> package, see <a class="olink ARPLS223" target="_blank" href="../ARPLS/d_dbver.htm#ARPLS223"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.</p>
</div>
</div>
</div>
</div>
<a id="LNPLS307"></a><a id="LNPLS310"></a><a id="LNPLS308"></a>
<div class="props_rev_3"><a id="GUID-1C90EF04-87AA-4406-B126-F64BEBC65DB7"></a>
<h3 id="LNPLS-GUID-1C90EF04-87AA-4406-B126-F64BEBC65DB7" class="sect3">Conditional Compilation Examples</h3>
<div>
<p>Examples of conditional compilation using selection and user-defined inquiry directives.</p>
<div class="example" id="GUID-1C90EF04-87AA-4406-B126-F64BEBC65DB7__BEIJFDHG">
<p class="titleinexample">Example 2-58 Code for Checking Database Version</p>
<p>This example generates an error message if the database version and release is less than Oracle Database 10<span class="italic">g</span> Release 2; otherwise, it displays a message saying that the version and release are supported and uses a <code class="codeph">COMMIT</code> statement that became available at Oracle Database 10<span class="italic">g</span> Release 2.</p>
<pre dir="ltr">BEGIN
  <span class="bold">$IF DBMS_DB_VERSION.VER_LE_10_1 $THEN</span>  -- selection directive begins
    <span class="bold">$ERROR &#39;unsupported database release&#39; $END</span>  -- error directive
  <span class="bold">$ELSE</span>
    DBMS_OUTPUT.PUT_LINE (
      &#39;Release &#39; || <span class="bold">DBMS_DB_VERSION.VERSION</span> || &#39;.&#39; ||
      <span class="bold">DBMS_DB_VERSION.RELEASE</span> || &#39; is supported.&#39;
    );
  -- This COMMIT syntax is newly supported in 10.2:
  COMMIT WRITE IMMEDIATE NOWAIT;
  <span class="bold">$END</span>  -- selection directive ends
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">Release 12.1 is supported.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-1C90EF04-87AA-4406-B126-F64BEBC65DB7__CBJBAEAA">
<p class="titleinexample">Example 2-59 Compiling Different Code for Different Database Versions</p>
<p>This example sets the values of the user-defined inquiry directives <code class="codeph">$$my_debug</code> and <code class="codeph">$$my_tracing</code> and then uses conditional compilation:</p>
<ul style="list-style-type: disc;">
<li>
<p>In the specification of package <code class="codeph">my_pkg</code>, to determine the base type of the subtype <code class="codeph">my_real</code> (<code class="codeph">BINARY_DOUBLE</code> is available only for Oracle Database versions 10<span class="italic">g</span> and later.)</p>
</li>
<li>
<p>In the body of package <code class="codeph">my_pkg</code>, to compute the values of <code class="codeph">my_pi</code> and <code class="codeph">my_e</code> differently for different database versions</p>
</li>
<li>
<p>In the procedure <code class="codeph">circle_area</code>, to compile some code only if the inquiry directive <code class="codeph">$$my_debug</code> has the value <code class="codeph">TRUE</code>.</p>
</li>
</ul>
<pre dir="ltr">ALTER SESSION SET <span class="bold">PLSQL_CCFLAGS = &#39;my_debug:FALSE, my_tracing:FALSE&#39;</span>;
 
CREATE OR REPLACE PACKAGE my_pkg AUTHID DEFINER AS
  SUBTYPE my_real IS
    <span class="bold">$IF DBMS_DB_VERSION.VERSION &lt; 10 $THEN</span>
      <span class="bold">NUMBER;</span>
    <span class="bold">$ELSE</span>
      <span class="bold">BINARY_DOUBLE;</span>
    <span class="bold">$END</span>
  
  my_pi my_real;
  my_e  my_real;
END my_pkg;
/
 
CREATE OR REPLACE PACKAGE BODY my_pkg AS
BEGIN
  <span class="bold">$IF DBMS_DB_VERSION.VERSION &lt; 10 $THEN</span>
    <span class="bold">my_pi := 3.14159265358979323846264338327950288420;</span>
    <span class="bold">my_e  := 2.71828182845904523536028747135266249775;</span>
  <span class="bold">$ELSE</span>
    <span class="bold">my_pi := 3.14159265358979323846264338327950288420d;</span>
    <span class="bold">my_e  := 2.71828182845904523536028747135266249775d;</span>
  <span class="bold">$END</span>
END my_pkg;
/
 
CREATE OR REPLACE PROCEDURE circle_area(radius my_pkg.my_real) AUTHID DEFINER IS
  my_area       my_pkg.my_real;
  my_data_type  VARCHAR2(30);
BEGIN
  my_area := my_pkg.my_pi * (radius**2);
  
  DBMS_OUTPUT.PUT_LINE
    (&#39;Radius: &#39; || TO_CHAR(radius) || &#39; Area: &#39; || TO_CHAR(my_area));
  
  <span class="bold">$IF $$my_debug $THEN</span>
    SELECT DATA_TYPE INTO my_data_type
    FROM USER_ARGUMENTS
    WHERE OBJECT_NAME = &#39;CIRCLE_AREA&#39;
    AND ARGUMENT_NAME = &#39;RADIUS&#39;;
 
    DBMS_OUTPUT.PUT_LINE
      (&#39;Data type of the RADIUS argument is: &#39; || my_data_type);
  <span class="bold">$END</span>
END;
/

CALL DBMS_PREPROCESSOR.PRINT_POST_PROCESSED_SOURCE
 (&#39;PACKAGE&#39;, &#39;HR&#39;, &#39;MY_PKG&#39;);
</pre>
<p>Result:</p>
<pre dir="ltr">PACKAGE my_pkg AUTHID DEFINER AS
SUBTYPE my_real IS
BINARY_DOUBLE;
my_pi my_real;
my_e my_real;
END my_pkg;
 
Call completed.
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS312"></a><a id="LNPLS280"></a>
<div class="props_rev_3"><a id="GUID-75F8A716-B2BE-494F-B150-1B4AB802DF25"></a>
<h3 id="LNPLS-GUID-75F8A716-B2BE-494F-B150-1B4AB802DF25" class="sect3">Retrieving and Printing Post-Processed Source Text</h3>
<div>
<p>The <code class="codeph">DBMS_PREPROCESSOR</code> package provides subprograms that retrieve and print the source text of a PL/SQL unit in its post-processed form.</p>
<div class="section">
<p>For information about the <code class="codeph">DBMS_PREPROCESSOR</code> package, see <a class="olink ARPLS222" target="_blank" href="../ARPLS/d_preproc.htm#ARPLS222"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-75F8A716-B2BE-494F-B150-1B4AB802DF25__CIHHCGII">
<p class="titleinexample">Example 2-60 Displaying Post-Processed Source Textsource text</p>
<p>This example invokes the procedure <code class="codeph">DBMS_PREPROCESSOR</code>.<code class="codeph">PRINT_POST_PROCESSED_SOURCE</code> to print the post-processed form of <code class="codeph">my_pkg</code> (from <span class="q">&#34;<a href="fundamentals.htm#GUID-1C90EF04-87AA-4406-B126-F64BEBC65DB7__CBJBAEAA">Example 2-59</a>&#34;</span>). Lines of code in <span class="q">&#34;<a href="fundamentals.htm#GUID-1C90EF04-87AA-4406-B126-F64BEBC65DB7__CBJBAEAA">Example 2-59</a>&#34;</span> that are not included in the post-processed text appear as blank lines.</p>
<pre dir="ltr">CALL DBMS_PREPROCESSOR.PRINT_POST_PROCESSED_SOURCE (
  &#39;PACKAGE&#39;, &#39;HR&#39;, &#39;MY_PKG&#39;
);
</pre>
<p>Result:</p>
<pre dir="ltr">PACKAGE my_pkg AUTHID DEFINERs AS
SUBTYPE my_real IS
BINARY_DOUBLE;
my_pi my_real;
my_e my_real;
END my_pkg;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="LNPLS313"></a>
<div class="props_rev_3"><a id="GUID-9AA504C5-8D85-41D6-BC3D-0953202BD9A7"></a>
<h3 id="LNPLS-GUID-9AA504C5-8D85-41D6-BC3D-0953202BD9A7" class="sect3">Conditional Compilation Directive Restrictions</h3>
<div>
<p>Conditional compilation directives are subject to these semantic restrictions.</p>
<p>A conditional compilation directive cannot appear in the specification of a schema-level user-defined type (created with the <span class="q">&#34;<a href="create_type.htm#GUID-389D603D-FBD0-452A-8414-240BBBC57034" title="The CREATE TYPE statement specifies the name of the type and its attributes, methods, and other properties.">CREATE TYPE Statement</a>&#34;</span>). This type specification specifies the attribute structure of the type, which determines the attribute structure of dependent types and the column structure of dependent tables.</p>
<div class="infobox-note" id="GUID-9AA504C5-8D85-41D6-BC3D-0953202BD9A7__GUID-63A71141-4CB3-42C4-949B-EC89164BA956">
<p class="notep1">Caution:</p>
<p>Using a conditional compilation directive to change the attribute structure of a type can cause dependent objects to &#34;go out of sync&#34; or dependent tables to become inaccessible. Oracle recommends that you change the attribute structure of a type only with the <span class="q">&#34;<a href="alter_type.htm#GUID-A8B449E7-E3A8-48F4-A4C6-5BB87B1841CD">ALTER TYPE Statement</a>&#34;</span>. The <code class="codeph">ALTER</code> <code class="codeph">TYPE</code> statement propagates changes to dependent objects.</p>
</div>
<p>The SQL parser imposes these restrictions on the location of the first conditional compilation directive in a stored PL/SQL unit or anonymous block:</p>
<ul style="list-style-type: disc;">
<li>
<p>In a package specification, a package body, a type body, and in a schema-level subprogram with no formal parameters, the first conditional compilation directive cannot appear before the keyword <code class="codeph">IS</code> or <code class="codeph">AS</code>.</p>
</li>
<li>
<p>In a schema-level subprogram with at least one formal parameter, the first conditional compilation directive cannot appear before the left parenthesis that follows the subprogram name.</p>
<p>This example is correct:</p>
<pre dir="ltr">CREATE OR REPLACE PROCEDURE <span class="bold">my_proc (</span>
  <span class="bold">$IF</span> $$xxx $THEN i IN PLS_INTEGER $ELSE i IN INTEGER $END
) IS BEGIN NULL; END my_proc;
/
</pre></li>
<li>
<p>In a trigger or an anonymous block, the first conditional compilation directive cannot appear before the keyword <code class="codeph">DECLARE</code> or <code class="codeph">BEGIN</code>, whichever comes first.</p>
</li>
</ul>
<p>The SQL parser also imposes this restriction: If an anonymous block uses a placeholder, the placeholder cannot appear in a conditional compilation directive. For example:</p>
<pre dir="ltr">BEGIN
  :n := 1; -- valid use of placeholder
  <span class="bold">$IF ... $THEN</span>
    <span class="bold">:n</span> := 1; -- invalid use of placeholder
$END
</pre></div>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment869">
<tr>
<td class="cellalignment912">
<table class="cellalignment874">
<tr>
<td class="cellalignment873"><a href="overview.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment873"><a href="datatypes.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment914">
<table class="cellalignment872">
<tr>
<td class="cellalignment873"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment873"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment873"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment873"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment873"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment873"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>