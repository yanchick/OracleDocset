<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-71044"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Database%20Web%20Services"></a><title>Database Web Services</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="description" content="This book describes how to develop, load, and run Java applications in Oracle Database."/>
<meta name="dcterms.created" content="2014-06-30T4:25:1Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Java Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E50793-03"/>
<meta name="dcterms.isVersionOf" content="JJDEV"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="cheleven.htm" title="Previous" type="text/html"/>
<link rel="Next" href="appendixa.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E50793-03.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">20/23</span> <!-- End Header -->
<div id="JJDEV13468" class="chapter"><a id="CBBFAJJH"></a>
<h1 class="chapter"><span class="secnum">13</span> Database Web Services</h1>
<p>This chapter provides an overview of database Web services and discusses how to call existing Web services. This chapter contains the following sections:</p>
<ul>
<li>
<p><a href="#CBBBCDBA">Overview of Database Web Services</a></p>
</li>
<li>
<p><a href="#CBBEGBEI">Using Oracle Database as Web Services Provider</a></p>
</li>
<li>
<p><a href="#CBBEFCHI">Using Oracle Database as Web Services Consumer</a></p>
</li>
</ul>
<a id="CBBBCDBA"></a>
<div id="JJDEV13469" class="sect1">
<h2 class="sect1">Overview of Database <a id="sthref717"></a>Web Services</h2>
<p>Web services enable application-to-application interaction over the Web, regardless of platform, language, or data formats. The key ingredients, including Extensible Markup Language (XML), Simple Object Access Protocol (SOAP), Web Services Description Language (WSDL), and Universal Description, Discovery, and Integration (UDDI), have been adopted across the entire software industry. Web services usually refer to services implemented and deployed in middle-tier application servers. However, in heterogeneous and disconnected environments, there is an increasing need to access stored procedures, as well as data and metadata, through Web services interfaces.</p>
<p>The <a id="sthref718"></a>Database Web services technology is a database approach to Web services. It works in the following two directions:</p>
<ul>
<li>
<p>Accessing database resources as a Web service</p>
</li>
<li>
<p>Consuming external Web services from the database</p>
</li>
</ul>
<p>Oracle Database can access Web services through PL/SQL packages and Java classes deployed within the database. Turning Oracle Database into a Web service provider leverages investment in Java stored procedures, PL/SQL packages, predefined SQL queries, and data manipulation language (DML). Conversely, consuming external Web services from the database, together with integration with the SQL engine, enables Enterprise Information Integration.</p>
</div>
<!-- class="sect1" -->
<a id="CBBEGBEI"></a>
<div id="JJDEV13470" class="sect1">
<h2 class="sect1">Using Oracle Database as <a id="sthref719"></a>Web Services Provider</h2>
<p>Web Services use industry-standard mechanisms to provide easy access to remote content and applications, regardless of the platform and location of the provider and implementation and data format. Client applications can query and retrieve data from Oracle Database and call stored procedures using standard Web service protocols. There is no dependency on Oracle-specific database connectivity protocols. This approach is highly beneficial in heterogeneous, distributed, and disconnected environments.</p>
<p>You can call into the database from a Web service, using the database as a service provider. This enables you to leverage existing or new SQL, PL/SQL, Java stored procedures, or Java classes within Oracle Database. You can access and manipulate database tables from a Web service client.</p>
<p>This section covers the following topics:</p>
<ul>
<li>
<p><a href="#CBBCDEJE">How to Use JPublisher for Web Services Call-Ins</a></p>
</li>
<li>
<p><a href="#CBBEDIDD">Features of Oracle Database as a Web Service Provider</a></p>
</li>
<li>
<p><a href="#CBBDCCFH">JPublisher Support for Web Services Call-Ins to Oracle Database</a></p>
</li>
</ul>
<a id="CBBCDEJE"></a>
<div id="JJDEV13471" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">How to Use JPublisher for <a id="sthref720"></a><a id="sthref721"></a>Web Services Call-Ins</h3>
<p>You can use JPublisher to generate Java wrappers that correspond to Database operations and deploy the wrappers as Web services in Oracle Application Server.</p>
<p><a href="#BABIGABF">Figure 13-1</a> illustrates how you use JPublisher to publish PL/SQL packages, SQL objects, collections, and packages as Java classes. Once published, these classes can be accessed by any Web service through a WebLogic Server (WLS) Web services servlet.</p>
<div id="JJDEV13472" class="figure">
<p class="titleinfigure"><a id="BABIGABF"></a>Figure 13-1 Web Services Call-In to the Database</p>
<img width="662" height="310" src="img/webservices_calling_db.gif" alt="Web Services Call-In to the Database"/><br/></div>
<!-- class="figure" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink JJPUB05000" href="../JJPUB/adfeacon.htm#JJPUB05000"><span class="italic">Oracle Database JPublisher User&#39;s Guide</span></a></div>
</div>
<!-- class="sect2" -->
<a id="CBBEDIDD"></a>
<div id="JJDEV13473" class="sect2">
<h3 class="sect2">Features of Oracle Database as a <a id="sthref722"></a><a id="sthref723"></a>Web Service Provider</h3>
<p>Using Oracle Database as a Web service provider offers the following features:</p>
<ul>
<li>
<p>Enhances PL/SQL Web services</p>
<p>Improves PL/SQL Web services by extending the Web services support for additional PL/SQL types, including <code>CLOB</code>, <code>BLOB</code>, <code>XMLTYPE</code>, ref cursor, and PL/SQL records and tables. This enables you to use most of your existing PL/SQL packages as Web services.</p>
</li>
<li>
<p>Exposes Java in the database as Web services</p>
<p>Exposes existing Java classes deployed in Oracle Database as Web services. Java classes implementing data-related services can be migrated between the middle tier and the database. Java portability results in database independence.</p>
</li>
<li>
<p>Provides SQL query Web services</p>
<p>Leverages warehousing or business intelligence queries, data monitoring queries, and any predefined SQL statements as Web services.</p>
</li>
<li>
<p>Enables DML Web services</p>
<p>Offers secure, persistent, transactional, and scalable logging, auditing, and tracking operations implemented through SQL DML, as Web services. DML Web services are implemented as atomic or group, or batch, INSERT, UPDATE, and DELETE operations.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CBBDCCFH"></a>
<div id="JJDEV13474" class="sect2">
<h3 class="sect2">JPublisher Support for Web Services <a id="sthref724"></a>Call-Ins to Oracle Database</h3>
<p>The following JPublisher features support Web services call-ins to the code running in Oracle Database:</p>
<ul>
<li>
<p>Generation of Java interfaces</p>
</li>
<li>
<p>JPublisher styles and style files</p>
</li>
<li>
<p>Ref cursor returning and result set mapping</p>
</li>
<li>
<p>Options to filter what JPublisher publishes</p>
</li>
<li>
<p>Support for calling Java classes in the database without PL/SQL call specifications</p>
</li>
<li>
<p>Support for publishing SQL queries or DML statements</p>
</li>
<li>
<p>Support for unique method names</p>
</li>
<li>
<p>Support for Oracle Streams AQ</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink JJPUB05110" href="../JJPUB/adfeacon.htm#JJPUB05110"><span class="italic">Oracle Database JPublisher User&#39;s Guide</span></a></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CBBEFCHI"></a>
<div id="JJDEV13475" class="sect1">
<h2 class="sect1">Using Oracle Database as <a id="sthref725"></a>Web Services Consumer</h2>
<p>You can extend the storage, indexing, and searching capabilities of a relational database to include semistructured and nonstructured data, including Web services, in addition to enabling federated data. By calling Web services, the database can track, aggregate, refresh, and query dynamic data produced on-demand, such as stock prices, currency exchange rates, and weather information.</p>
<p>An example of using Oracle Database as a service consumer would be to call external Web services from a predefined database job to retrieve inventory information from multiple suppliers, and then update your local inventory database. Another example is that of a Web crawler, where a database job can be scheduled to collate product and price information from a number of sources.</p>
<p>This section covers the following topics:</p>
<ul>
<li>
<p><a href="#CBBFJCJH">How to Use Oracle Database for Web Services Call-Outs</a></p>
</li>
<li>
<p><a href="#CBBGIGBJ">Web Service Data Sources (Virtual Table Support)</a></p>
</li>
<li>
<p><a href="#CBBIIJHA">Features of Oracle Database as a Web Service Consumer</a></p>
</li>
<li>
<p><a href="#CBBCFIBD">Overview of JPublisher Generation</a></p>
</li>
<li>
<p><a href="#CBBDBEFB">Adjusting the Mapping of SQL Types</a></p>
</li>
</ul>
<a id="CBBFJCJH"></a>
<div id="JJDEV13476" class="sect2">
<h3 class="sect2">How to Use Oracle Database for<a id="sthref726"></a> Web Services Call-Outs</h3>
<p>The Web services client code is written in SQL, PL/SQL, or Java to run inside Oracle Database, which then calls the external Web service. You can call a Web service from a Java client within the database, using one of the following methods:</p>
<ul>
<li>
<p>SQL and PL/SQL call specifications</p>
<p>Start a Web service through a user-defined function call, which is generated through JPublisher, either directly within a SQL statement or view or through a variable.</p>
</li>
<li>
<p>Pure Java <code>static</code> proxy class</p>
<p>Use JPublisher to generate a client proxy class, which uses Java API for XML-based remote procedure call (JAX-RPC). This method simplifies the Web service invocation because the location of the service is already known without needing to look up the service in the UDDI registry. The client proxy class does all the work required to construct the SOAP request, including marshalling and unmarshalling parameters.</p>
</li>
<li>
<p>Pure Java using dynamic invocation interface (DII) over JAX-RPC</p>
<p>Dynamic invocation provides the ability to construct the SOAP request and access the service without the client proxy.</p>
</li>
</ul>
<p>For Web services call-outs using PL/SQL, use the <code>UTL_DBWS</code> PL/SQL package. This package essentially uses the same application programming interfaces (APIs) as the DII classes.</p>
<p>You can use a Web services data source to process the results from any Web service request.</p>
<p><a href="#CBBJBHCA">Figure 13-2</a> illustrates how you can call a Web service from a Java client within the database.</p>
<div id="JJDEV13477" class="figure">
<p class="titleinfigure"><a id="CBBJBHCA"></a>Figure 13-2 Calling Web Services From Within the Database</p>
<img width="364" height="191" src="img/webservices_from_database.gif" alt="Description of Figure 13-2 follows"/><br/>
<a id="sthref727" href="img_text/webservices_from_database.htm">Description of &#34;Figure 13-2 Calling Web Services From Within the Database&#34;</a><br/>
<br/></div>
<!-- class="figure" --></div>
<!-- class="sect2" -->
<a id="CBBGIGBJ"></a>
<div id="JJDEV13478" class="sect2">
<h3 class="sect2">Web Service Data Sources (<a id="sthref728"></a>Virtual Table Support)</h3>
<p>To access data that is returned from single or multiple Web service invocations, create a virtual table using a Web service data source. This table lets you query a set of returned rows as though it were a table.</p>
<p>The client calls a Web service and the results are stored in a virtual table in the database. You can pass result sets from function to function. This enables you to set up a sequence of transformation without a table holding intermediate results. To reduce memory usage, you can return the result set rows, a few at a time, within a function.</p>
<p>By using Web services with the table function, you can manipulate a range of input values from single or multiple Web services as a real table. In the following example, the inner <code>SELECT</code> statement creates rows whose columns are used as arguments for calling the <code>CALL_WS</code> Web service call-out.</p>
<pre>SELECT <span class="italic">column1</span>, <span class="italic">cloumn2</span>, ...
FROM TABLE(WS_TABFUN(CURSOR(SELECT <span class="italic">s</span> FROM <span class="italic">table_name</span>)))
WHERE ...
</pre>
<p>The table expression in the preceding example can be used in other SQL queries, for constructing views, and so on.</p>
<p><a href="#CBBBJCBF">Figure 13-3</a> illustrates the support for virtual table.</p>
<div id="JJDEV13479" class="figure">
<p class="titleinfigure"><a id="CBBBJCBF"></a>Figure 13-3 Storing Results from Request in a Virtual Table</p>
<img width="364" height="190" src="img/storing_results_virtual.gif" alt="Description of Figure 13-3 follows"/><br/>
<a id="sthref729" href="img_text/storing_results_virtual.htm">Description of &#34;Figure 13-3 Storing Results from Request in a Virtual Table&#34;</a><br/>
<br/></div>
<!-- class="figure" --></div>
<!-- class="sect2" -->
<a id="CBBIIJHA"></a>
<div id="JJDEV13480" class="sect2">
<h3 class="sect2">Features of Oracle Database as a <a id="sthref730"></a>Web Service Consumer</h3>
<p>Using Oracle Database as a Web service consumer provides the following features:</p>
<ul>
<li>
<p>Consuming Web services from Java</p>
<p>Provides an easy-to-use interface for Web services call-outs, thereby insulating developers from low-level SOAP programming. Java classes running in the database can directly call external Web services by using the previously loaded Java proxy class or through dynamic invocation.</p>
</li>
<li>
<p>Consuming Web services from SQL and PL/SQL</p>
<p>Enables any SQL-enabled tool or application to transparently and easily consume dynamic data from external Web services. After exposing Web services methods as Java stored procedures, a PL/SQL wrapper on top of a Java stored procedure hides all Java and SOAP programming details from the SQL client.</p>
</li>
<li>
<p>Using Web services data source</p>
<p>Enables application and data integration by turning external Web service into a SQL data source, making the external Web service appear as regular SQL table. This table function represents the output of calling external Web services and can be used in a SQL query.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CBBCFIBD"></a>
<div id="JJDEV13481" class="sect2">
<h3 class="sect2"><a id="sthref731"></a>Overview of JPublisher Generation</h3>
<p>JPublisher can receive the WSDL file from a Web service and create the static Java, proxy class, or PL/SQL call specification.</p>
<p><a href="#CBBFAJAI">Figure 13-4</a> illustrates creating Web Services Call-Out Stubs.</p>
<div id="JJDEV13482" class="figure">
<p class="titleinfigure"><a id="CBBFAJAI"></a>Figure 13-4 Creating Web Services Call-Out Stubs</p>
<img width="404" height="125" src="img/creating_stubs.gif" alt="Description of Figure 13-4 follows"/><br/>
<a id="sthref732" href="img_text/creating_stubs.htm">Description of &#34;Figure 13-4 Creating Web Services Call-Out Stubs&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>This support is created through the following JPublisher key options:</p>
<ul>
<li>
<p><code>-proxywsdl=</code><code><span class="codeinlineitalic">url</span></code></p>
<p>Use this option to generate JAX-RPC static client proxies, given the WSDL document at the specified URL. This option generates additional wrapper classes to expose instance methods as <code>static</code> methods and generates PL/SQL wrappers. It performs the following steps:</p>
<ol>
<li>
<p>Generates JAX-RPC client proxy classes.</p>
</li>
<li>
<p>Generates wrapper classes to publish instance methods as <code>static</code> methods.</p>
</li>
<li>
<p>Generates PL/SQL wrappers for classes that must be accessible from PL/SQL.</p>
</li>
<li>
<p>Loads generated code into the database.</p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code>-proxywsdl</code> option uses the <code>-proxyclasses</code> option behind the scenes for steps 2 and 3, and takes the <code>-proxyopts</code> setting as input.</div>
<p>Once generated, your database client can access the Web service through PL/SQL using the call specifications or through the JAX-RPC client proxy classes. The PL/SQL wrappers use the <code>static</code> methods. A client would <span class="italic">not</span> usually access any Web service using the <code>static</code> method directly.</p>
</li>
<li>
<p><code>-httpproxy=</code><code><span class="codeinlineitalic">proxy_url</span></code></p>
<p>Where WSDL is accessed through a firewall, use this option to specify a proxy URL to use in resolving the URL of the WSDL document.</p>
</li>
<li>
<p><code>-proxyclasses=</code><code><span class="codeinlineitalic">class_list</span></code></p>
<p>For Web services, this option is used behind the scenes by the <code>-proxywsdl</code> option and is set automatically, as appropriate. In addition, you can use this option directly, for general purposes, any time you want to create PL/SQL wrappers for Java classes with <code>static</code> methods, and optionally to produce wrapper classes to expose instance methods as <code>static</code> methods.</p>
<p>The <code>-proxyclasses</code> option accepts the <code>-proxyopts</code> setting as input.</p>
</li>
<li>
<p><code>-proxyopts=</code><code><span class="codeinlineitalic">wrapper_specifications</span></code></p>
<p>This option specifies JPublisher behavior in generating wrapper classes and PL/SQL wrappers, usually, but not necessarily, for Web services. For typical usage of the <code>-proxywsdl</code> option, the <code>-proxyopts</code> default setting is sufficient. In situations where you use the <code>-proxyclasses</code> option directly, you may want to use the special <code>-proxyopts</code> settings.</p>
</li>
<li>
<p><code>-endpoint=</code><code><span class="codeinlineitalic">Web_services_endpoint</span></code></p>
<p>Use this option in conjunction with the <code>-proxywsdl</code> option to specify the Web services endpoint.</p>
</li>
<li>
<p><code>-sysuser=</code><code><span class="codeinlineitalic">superuser_name/superuser_password</span></code></p>
<p>Use this option to specify the name and password for the superuser account used to grant permissions for the client proxy classes to access Web services using HTTP.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CBBDBEFB"></a>
<div id="JJDEV13483" class="sect2">
<h3 class="sect2">Adjusting the Mapping of SQL Types</h3>
<p>Although Oracle Application Server does not currently support <code>LOB</code> types, <code>XMLTYPE</code>, ref cursors, and <code>OUT</code> and <code>IN OUT</code> arguments, you can use an alternative approach to expose PL/SQL methods and SQL types as Web services.</p>
<p>You can change the default action of JPublisher to generate code that uses a user-provided subclass. For example, if you have a PL/SQL method that returns a <code>REF CURSOR</code>, then JPublisher automatically maps the return type to <code>java.sql.ResultSet</code>. However, this <code>ResultSet</code> type cannot be published as a Web service. To solve this, create a new method that can return the result set in a Web service-supported format, as follows:</p>
<pre>public String [] readRefCursorArray(String arg1, Integer arg2)
{
  java.sql.ResultSet rs = getRefCursor(arg1,arg2);
  ... 
  //create a String[] from rs and return it
  ... 
}
</pre>
<p>After creating a method, create an interface that contains the exact methods to publish. You can use JPublisher to easily accomplish this mapping by using the following command:</p>
<pre>jpub -sql=MYAPP:MyAppBase:MyApp#MyAppInterf...
</pre>
<p>In the preceding command:</p>
<ul>
<li>
<p><code>MyApp</code> contains the method to return the result set.</p>
</li>
<li>
<p><code>MyAppInterf</code> is the interface that contains the method to publish.</p>
</li>
</ul>
<p>After translating the code for your application, archive all the class files into a single Java Archive (JAR) file and use the Web Services Assembler to create a deployable Web service Enterprise Archive (EAR) file.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink JJPUB" href="../JJPUB/toc.htm"><span class="italic">Oracle Database JPublisher User&#39;s Guide</span></a></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3995">
<tr>
<td class="cellalignment4004">
<table class="cellalignment4000">
<tr>
<td class="cellalignment3999"><a href="cheleven.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3999"><a href="appendixa.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4006">
<table class="cellalignment3998">
<tr>
<td class="cellalignment3999"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3999"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3999"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3999"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3999"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3999"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>