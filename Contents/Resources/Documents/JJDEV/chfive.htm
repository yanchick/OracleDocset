<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-71036"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Developing%20Java%20Stored%20Procedures"></a><title>Developing Java Stored Procedures</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="description" content="This book describes how to develop, load, and run Java applications in Oracle Database."/>
<meta name="dcterms.created" content="2014-06-30T4:25:0Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Java Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E50793-03"/>
<meta name="dcterms.isVersionOf" content="JJDEV"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="chfour.htm" title="Previous" type="text/html"/>
<link rel="Next" href="chsix.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E50793-03.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">12/23</span> <!-- End Header -->
<div id="JJDEV13234" class="chapter"><a id="BABGCGBG"></a>
<h1 class="chapter"><span class="secnum">5</span> Developing J<a id="sthref371"></a><a id="sthref372"></a>ava Stored Procedures</h1>
<p>Oracle JVM has all the features you must build a new generation of enterprise-wide applications at a low cost. The most important feature is the support for stored procedures. Using stored procedures, you can implement business logic at the server level, thereby improving application performance, scalability, and security.</p>
<p>This chapter contains the following sections:</p>
<ul>
<li>
<p><a href="#BABJEFBE">Stored Procedures and Run-Time Contexts</a></p>
</li>
<li>
<p><a href="#BABEHFBC">Advantages of Stored Procedures</a></p>
</li>
<li>
<p><a href="#BABGEJDI">Java Stored Procedures Steps</a></p>
</li>
<li>
<p><a href="#CBBIIAIG">Debugging Java Stored Procedures</a></p>
</li>
</ul>
<a id="BABJEFBE"></a>
<div id="JJDEV13235" class="sect1">
<h2 class="sect1">Stored <a id="sthref373"></a><a id="sthref374"></a><a id="sthref375"></a><a id="sthref376"></a>Procedures and Run-Time Contexts</h2>
<p>Stored procedures are Java methods published to SQL and stored in the database for general use. To publish Java methods, you write call specifications, which map Java method names, parameter types, and return types to their SQL counterparts.</p>
<p>Unlike a wrapper, which adds another layer of execution, a call specification publishes the existence of a Java method. As a result, when you call the method through its call specification, the run-time system dispatches the call with minimal overhead.</p>
<p>When called by client applications, a stored procedure can accept arguments, reference Java classes, and return Java result values.</p>
<p><a href="#BABDIGHG">Figure 5-1</a> shows a stored procedure being called by various applications.</p>
<div id="JJDEV13236" class="figure">
<p class="titleinfigure"><a id="BABDIGHG"></a>Figure 5-1 Calling a Stored Procedure</p>
<img width="335" height="177" src="img/call_stored_proc.gif" alt="Description of Figure 5-1 follows"/><br/>
<a id="sthref377" href="img_text/call_stored_proc.htm">Description of &#34;Figure 5-1 Calling a Stored Procedure&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>Except for graphical user interface (GUI) methods, Oracle JVM can run any Java method as a stored procedure. The run-time contexts are:</p>
<ul>
<li>
<p><a href="#BABCFBED">Functions and Procedures</a></p>
</li>
<li>
<p><a href="#BABFFDII">Database Triggers</a></p>
</li>
<li>
<p><a href="#BABBHGBE">Object-Relational Methods</a></p>
</li>
</ul>
<a id="BABCFBED"></a>
<div id="JJDEV13237" class="sect2">
<h3 class="sect2"><a id="sthref378"></a><a id="sthref379"></a>Functions and Procedures</h3>
<p>Functions and procedures are named blocks that encapsulate a sequence of statements. They are building blocks that you can use to construct modular, maintainable applications.</p>
<p>Generally, you use a procedure to perform an action and a function to compute a value. Therefore, you use procedure call specifications for <code>void</code> Java methods and function call specifications for value-returning methods.</p>
<p>Only top-level and package-level PL/SQL functions and procedures can be used as call specifications. When you define them using the SQL <code>CREATE FUNCTION</code>, <code>CREATE PROCEDURE</code>, or <code>CREATE PACKAGE</code> statement, they are stored in the database, where they are available for general use.</p>
<p>Java methods published as functions and procedures must be invoked explicitly. They can accept arguments and are callable from:</p>
<ul>
<li>
<p>SQL data manipulation language (DML) statements</p>
</li>
<li>
<p>SQL <code>CALL</code> statements</p>
</li>
<li>
<p>PL/SQL blocks, subprograms, and packages</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABFFDII"></a>
<div id="JJDEV13238" class="sect2">
<h3 class="sect2"><a id="sthref380"></a><a id="sthref381"></a>Database Triggers</h3>
<p>A database trigger is a stored procedure that is associated with a specific table or view. Oracle Database calls the trigger automatically whenever a given DML operation modifies the table or view.</p>
<p>A trigger has the following parts:</p>
<ul>
<li>
<p>A triggering event, which is generally a DML operation</p>
</li>
<li>
<p>An optional trigger constraint</p>
</li>
<li>
<p>A trigger action</p>
</li>
</ul>
<p>When the event occurs, the trigger is called. A <code>CALL</code> statement in the trigger calls a Java method through the call specification of the method, to perform the action.</p>
<p>Database triggers are used to enforce complex business rules, derive column values automatically, prevent invalid transactions, log events transparently, audit transactions, and gather statistics.</p>
</div>
<!-- class="sect2" -->
<a id="BABBHGBE"></a>
<div id="JJDEV13239" class="sect2">
<h3 class="sect2"><a id="sthref382"></a><a id="sthref383"></a>Object-Relational Methods</h3>
<p>A <a id="sthref384"></a>SQL object type is a user-defined composite data type that encapsulates a set of variables, called a<a id="sthref385"></a>ttributes, with a set of operations, called <a id="sthref386"></a>methods, which can be written in Java. The data structure formed by the set of attributes is <code>public</code>. However, as a good programming practice, you must ensure that your application does not manipulate these attributes directly and uses the set of methods provided.</p>
<p>You can create an abstract template for some real-world object as a SQL object type. The template specifies only those attributes and methods that the object will need in the application environment. At run time, when you fill the data structure with values, you create an instance of the object type. You can create as many instances as required.</p>
<p>Typically, an object type corresponds to some business entity, such as a purchase order. To accommodate a variable number of items, object types can use a <code>VARRAY</code>, a nested table, or both.</p>
<p>For example, the purchase order object type can contain a variable number of line items.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABEHFBC"></a>
<div id="JJDEV13240" class="sect1">
<h2 class="sect1">Advantages of <a id="sthref387"></a>Stored Procedures</h2>
<p>Stored procedures offer several advantages. The following advantages are covered in this section:</p>
<ul>
<li>
<p><a href="#BABIJIIF">Performance</a></p>
</li>
<li>
<p><a href="#BABFFFFJ">Productivity and Ease of Use</a></p>
</li>
<li>
<p><a href="#BABJEFFA">Scalability</a></p>
</li>
<li>
<p><a href="#BABGBGAC">Maintainability</a></p>
</li>
<li>
<p><a href="#BABJHHAA">Interoperability</a></p>
</li>
<li>
<p><a href="#BABIDHDB">Replication</a></p>
</li>
<li>
<p><a href="#BABBJADJ">Security</a></p>
</li>
</ul>
<a id="BABIJIIF"></a>
<div id="JJDEV13241" class="sect2">
<h3 class="sect2">Perfor<a id="sthref388"></a>mance</h3>
<p>Stored procedures are compiled once and stored in an executable form. As a result, procedure calls are quick and efficient. Executable code is automatically cached and shared among users. This lowers memory requirements and invocation overhead.</p>
<p>By grouping SQL statements, a stored procedure allows the statements to be processed with a single call. This reduces network traffic and improves round-trip response time.</p>
<p>Additionally, stored procedures enable you to take advantage of the computing resources of the server. For example, you can move computation-bound procedures from client to server, where they will run faster. Stored functions enhance performance by running application logic within the server.</p>
</div>
<!-- class="sect2" -->
<a id="BABFFFFJ"></a>
<div id="JJDEV13242" class="sect2">
<h3 class="sect2">Productivity<a id="sthref389"></a><a id="sthref390"></a> and Ease of Use</h3>
<p>By designing applications around a common set of stored procedures, you can avoid redundant coding and increase the productivity. Moreover, stored procedures let you extend the functionality of the database.</p>
<p>You can use the Java integrated development environment (IDE) of your choice to create stored procedures. They can be called by standard Java interfaces, such as Java Database Connectivity (JDBC), and by programmatic interfaces and development tools, such as SQLJ, Oracle Call Interface (OCI), Pro*C/C++, and JDeveloper.</p>
<p>This broad access to stored procedures lets you share business logic across applications. For example, a stored procedure that implements a business rule can be called from various client-side applications, all of which can share that business rule. In addition, you can leverage the Java facilities of the server while continuing to write applications for a preferred programmatic interface.</p>
</div>
<!-- class="sect2" -->
<a id="BABJEFFA"></a>
<div id="JJDEV13243" class="sect2">
<h3 class="sect2">Scala<a id="sthref391"></a>bility</h3>
<p>Java in the database inherits the scalable session model of Oracle Database. Stored procedures increase scalability by isolating application processing on the server. In addition, automatic dependency tracking for stored procedures helps in developing scalable applications.</p>
</div>
<!-- class="sect2" -->
<a id="BABGBGAC"></a>
<div id="JJDEV13244" class="sect2">
<h3 class="sect2"><a id="sthref392"></a>Maintainability</h3>
<p>After a stored procedure is validated, you can use it with confidence in any number of applications. If its definition changes, then only the procedure is affected, not the applications that call it. This simplifies maintenance and enhancement. Also, maintaining a procedure on the server is easier than maintaining copies on different client computers.</p>
</div>
<!-- class="sect2" -->
<a id="BABJHHAA"></a>
<div id="JJDEV13245" class="sect2">
<h3 class="sect2"><a id="sthref393"></a>Interoperability</h3>
<p>Java in Oracle Database fully conforms to the Java Language Specification (JLS) and furnishes all the advantages of a general-purpose, object-oriented programming language. Also, as with PL/SQL, Java provides full access to Oracle data. As a result, any procedure that is written in PL/SQL can also be written in Java.</p>
<p>PL/SQL stored procedures complement Java stored procedures. Typically, SQL programmers who want procedural extensions favor PL/SQL, and Java programmers who want easy access to Oracle data favor Java.</p>
<p>Oracle Database allows a high degree of interoperability between Java and PL/SQL. Java applications can call PL/SQL stored procedures using an embedded JDBC driver. Conversely, PL/SQL applications can call Java stored procedures directly.</p>
</div>
<!-- class="sect2" -->
<a id="BABIDHDB"></a>
<div id="JJDEV13246" class="sect2">
<h3 class="sect2"><a id="sthref394"></a>Replication</h3>
<p>With Oracle Advanced Replication, you can replicate stored procedures from one Oracle Database instance to another. This enables you to use stored procedures to implement a central set of business rules. Once you write the procedures, you can replicate and distribute them to work groups and branch offices throughout the company. In this way, you can revise policies on a central server rather than on individual servers.</p>
</div>
<!-- class="sect2" -->
<a id="BABBJADJ"></a>
<div id="JJDEV13247" class="sect2">
<h3 class="sect2"><a id="sthref395"></a>Security</h3>
<p>Security is a large arena that includes:</p>
<ul>
<li>
<p>Network security for the connection</p>
</li>
<li>
<p>Access and execution control of operating system resources or of JVM and user-defined classes</p>
</li>
<li>
<p>Bytecode verification of JAR files imported from an external source.</p>
</li>
</ul>
<p>In Oracle Database, all classes are loaded into a secure database and, therefore, are untrusted. A user requires the appropriate permissions to access classes and operating system resources. Likewise, all stored procedures are secured against other users. You can grant the <code>EXECUTE</code> database privilege to users who need to access the stored procedures.</p>
<p>You can restrict access to Oracle data by allowing users to manipulate the data only through stored procedures that run with their definer&#39;s privileges. For example, you can allow access to a procedure that updates a database table, but deny access to the table itself.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="chten.htm#BABFBDGG">Chapter 10, &#34;Security for Oracle Database Java Applications&#34;</a></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABGEJDI"></a>
<div id="JJDEV13249" class="sect1">
<h2 class="sect1">Java Stored Procedures Steps</h2>
<p><a id="sthref396"></a>You can run Java <a id="sthref397"></a>stored procedures in the same way as PL/SQL stored procedures. Usually, a call to a Java stored procedure is a result of database manipulation, because it is usually the result of a trigger or SQL DML call. To call a Java stored procedure, you must publish it through a call specification.</p>
<p>Before you can call Java stored procedures, you must load them into Oracle Database instance and publish them to SQL. Loading and publishing are separate tasks. Many Java classes, which are referenced only by other Java classes, are never published.</p>
<p><a id="sthref398"></a>To load Java stored procedures automatically, you can use the <code>loadjava</code> tool. It loads Java source, class, and resource files into a system-generated database table, and then uses the SQL <code>CREATE JAVA {SOURCE | CLASS | RESOURCE}</code> statement to load the Java files into Oracle Database instance. You can upload Java files from file systems, popular Java IDEs, intranets, or the Internet.</p>
<p>The following steps are involved in creating, loading, and calling Java stored procedures:</p>
<ul>
<li>
<p><a href="#BABBCFHE">Step 1: Create or Reuse the Java Classes</a></p>
</li>
<li>
<p><a href="#BABJBGGC">Step 2: Load and Resolve the Java Classes</a></p>
</li>
<li>
<p><a href="#BABFCJHG">Step 3: Publish the Java Classes</a></p>
</li>
<li>
<p><a href="#BABIDJEF">Step 4: Call the Stored Procedures</a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
To load Java stored procedures manually, you can use the <code><a id="sthref399"></a>CREATE JAVA</code> statements. For example, in SQL*Plus, you can use the <code>CREATE JAVA CLASS</code> statement to load Java class files from local <code>BFILE</code> and <code>LOB</code> columns into Oracle Database.</div>
<a id="BABBCFHE"></a>
<div id="JJDEV13250" class="sect2">
<h3 class="sect2">Step 1: Create or Reuse the Java Classes</h3>
<p>Use a preferred Java IDE to create classes, or reuse existing classes that meet your requirements. Oracle Database supports many Java development tools and client-side programmatic interfaces. For example, Oracle JVM accepts programs developed in popular Java IDEs, such as Oracle JDeveloper, Symantec Visual Cafe, and Borland JBuilder.</p>
<p>In the following example, you create the <code>public</code> class <code>Oscar</code>. It has a single method named <code>quote()</code>, which returns a quotation from Oscar Wilde.</p>
<pre>public class Oscar
{
  // return a quotation from Oscar Wilde
  public static String quote()
  {
    return &#34;I can resist everything except temptation.&#34;;
  }
}
</pre>
<p>Save the class as <code>Oscar.java</code>. Using a Java compiler, compile the <code>.java</code> file on your client system, as follows:</p>
<pre>javac Oscar.java
</pre>
<p>The compiler outputs a Java binary file, in this case, <code>Oscar.class</code>.</p>
</div>
<!-- class="sect2" -->
<a id="BABJBGGC"></a>
<div id="JJDEV13251" class="sect2">
<h3 class="sect2">Step 2:<a id="sthref400"></a> Load and R<a id="sthref401"></a>esolve the Java Classes</h3>
<p>Using the <code>loadjava</code> tool, you can load Java source, class, and resource files into Oracle Database instance, where they are stored as Java schema objects. You can run the <code>loadjava</code> tool from the command line or from an application, and you can specify several options including a resolver.</p>
<p>In the following example, the <code>loadjava</code> tool connects to the database using the default JDBC OCI driver. You must specify the user name and password. By default, the <code>Oscar</code> class is loaded into the schema of the user you log in as, in this case, <code>HR</code>.</p>
<pre>$ loadjava -user HR Oscar.class
Password: <span class="italic">password</span>
</pre>
<p>When you call the <code>quote()</code> method, the server uses a resolver to search for supporting classes, such as <code>String</code>. In this case, the default resolver is used. The default resolver first searches the current schema and then the <code>SYS</code> schema, where all the core Java class libraries reside. If necessary, you can specify different resolvers.</p>
</div>
<!-- class="sect2" -->
<a id="BABFCJHG"></a>
<div id="JJDEV13252" class="sect2">
<h3 class="sect2">Step 3: <a id="sthref402"></a>Publish the Java Classes</h3>
<p>For each Java method that can be called from SQL or JDBC, you must write a call specification, which exposes the top-level entry point of the method to Oracle Database. Typically, only a few call specifications are needed. If preferred, you can generate these call specifications using Oracle JDeveloper.</p>
<p>In the following example, from SQL*Plus, you connect to the database and then define a top-level call specification for the <code>quote()</code> method:</p>
<pre>SQL&gt; connect HR
Enter password: <span class="italic">password</span>

SQL&gt; CREATE FUNCTION oscar_quote RETURN VARCHAR2
2 AS LANGUAGE JAVA
3 NAME &#39;Oscar.quote() return java.lang.String&#39;;
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="chsix.htm#BABEBDGB">Chapter 6, &#34;Publishing Java Classes With Call Specifications&#34;</a></div>
</div>
<!-- class="sect2" -->
<a id="BABIDJEF"></a>
<div id="JJDEV13253" class="sect2">
<h3 class="sect2">Step 4: Call the Stored Procedures</h3>
<p>You can call Java stored procedures from JDBC, SQLJ, and all third party languages that can access the call specification. Using the SQL <code>CALL</code> statement, you can also call the stored procedures from the top level, for example, from SQL*Plus. Stored procedures can also be called from database triggers.</p>
<p>In the following example, you declare a SQL*Plus host variable:</p>
<pre>SQL&gt; VARIABLE theQuote VARCHAR2(50);
</pre>
<p>Then, you call the function <code>oscar_quote()</code>, as follows:</p>
<pre>SQL&gt; CALL oscar_quote() INTO :theQuote;

SQL&gt; PRINT theQuote;

THEQUOTE
--------------------------------------------------
I can resist everything except temptation.
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="chseven.htm#CACIBAHF">Chapter 7, &#34;Calling Stored Procedures&#34;</a></div>
<p>You can also call the Java class using the <code>ojvmjava</code> tool.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="cheleven.htm#CACDIEGD">&#34;The ojvmjava Tool&#34;</a></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CBBIIAIG"></a>
<div id="JJDEV13634" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref403"></a>Debugging Java Stored Procedures</h2>
<p>Oracle Database provides the Java Debug Wire Protocol (JDWP) interface for debugging Java stored procedures. JDWP is supported by Java Development Kit (JDK) 1.4 and later versions.</p>
<p>Following are a few features that the JDWP interface supports:</p>
<ul>
<li>
<p>Listening for connections</p>
</li>
<li>
<p>Changing the values of variables while debugging</p>
</li>
<li>
<p>Evaluating arbitrary Java expressions, including method evaluations</p>
</li>
<li>
<p>Setting or clearing breakpoints on a line or in a method</p>
</li>
<li>
<p>Stepping through the code</p>
</li>
<li>
<p>Setting or clearing field access or modification watchpoints</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle JDeveloper provides a user-friendly integration with these debugging features. Other independent Integrated Development Environment (IDE) vendors can also integrate their own debuggers with Oracle Database.</div>
<p>This section discusses the following topics:</p>
<ul>
<li>
<p><a href="#CBBIAJJH">Prerequisites for Debugging Java Stored Procedures</a></p>
</li>
<li>
<p><a href="#CBBFDFJF">Debugging Java Stored Procedures Using the jdb Debugger</a></p>
</li>
<li>
<p><a href="#CBBECJIG">Debugging Java stored procedure using JDeveloper</a></p>
</li>
</ul>
<a id="CBBIAJJH"></a>
<div id="JJDEV13635" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Prerequisites for Debugging Java Stored Procedures</h3>
<p>Ensure that the following prerequisites are met before debugging a Java stored procedure:</p>
<ul>
<li>
<p>The Java code must be deployed to the database and can be optionally compiled with debug information.</p>
</li>
<li>
<p>Your database user account must have the following privileges:</p>
<pre>DEBUG ANY PROCEDURE
DEBUG CONNECT SESSION
</pre></li>
<li>
<p>You must add the <code>jdwp</code> privilege to the Access Control List (ACL) in the following way:</p>
<pre>      SQL&gt; begin
      2    DBMS_NETWORK_ACL_ADMIN.APPEND_HOST_ACE(
      3      host =&gt; &lt;host_name&gt;,
      4      ace  =&gt; xs$ace_type(privilege_list =&gt; xs$name_list(&#39;jdwp&#39;),
      5                          principal_name =&gt; &lt;user_name&gt;,
      6                          principal_type =&gt; xs_acl.ptype_db));
      7  end;
      8  /
</pre></li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink DBSEG113" href="../DBSEG/fine_grained_access.htm#DBSEG113"><span class="italic">Oracle Database Security Guide</span></a> for more information about adding privileges to an Access Control List</div>
</div>
<!-- class="sect2" -->
<a id="CBBFDFJF"></a>
<div id="JJDEV13636" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Debugging Java Stored Procedures Using the jdb Debugger</h3>
<p>A <code>jdb</code> session can be started with the <code>-listen &lt;port&gt;</code> command. If you start the session in this way, then <code>jdb</code> waits for a running Virtual Machine (VM) to connect at the specified port, using the standard connector.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
While debugging a Java stored procedure, <code>jdb</code> cannot launch a JVM session and only waits for the VM to connect.</div>
<p>Use an Oracle client such as SQL*Plus to issue the command to connect to the debugger. Whichever client you use, you must ensure that the session that issues the debugger connection command is the same session that executes your Java stored procedure. For example, if you are using SQL*Plus, then issue the following command to open a TCP/IP connection to the designated machine and port for the JDWP session:</p>
<pre>EXEC DBMS_DEBUG_JDWP.CONNECT_TCP(&lt;host_ip&gt;, &lt;port&gt;)
</pre>
<p>After the debugger accepts the connection, issue the breakpoint in the debugger session and invoke the Java stored procedure in the Oracle client. The debugger will now halt at the first breakpoint that you specified.</p>
</div>
<!-- class="sect2" -->
<a id="CBBECJIG"></a>
<div id="JJDEV13637" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Debugging Java stored procedure using JDeveloper</h3>
<p>You can debug Java stored procedures and PL/SQL programs seamlessly using JDeveloper. When you debug PL/SQL programs and Java stored procedures locally, then the call to initiate debugging is made directly from JDeveloper. JDeveloper automatically launches the program that you want to debug (also called debuggee) and then attaches the debugger to that program.</p>
<p>The main difference between remote debugging and local debugging PL/SQL programs and Java stored procedures is how you start the debugging session. For remote debugging, you must manually launch the program that you want to debug with an Oracle client such as SQL*Plus, jobs created using the <code>DBMS_JOB</code> package, an OCI program, or a trigger firing. Then, you must establish the connection from the database program that you want to debug (debuggee) to the JDeveloper debugger. After the debuggee is launched and the JDeveloper debugger is attached to it, remote debugging is very similar to local debugging.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can optionally turn off JIT for better debugging experience.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
For more information about using JDeveloper for debugging Java stored procedures, visit the following page
<p><code>http://docs.oracle.com/cd/E16162_01/user.1112/e17455/dev_stored_proc.htm#BEJEJIHD</code></p>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3995">
<tr>
<td class="cellalignment4004">
<table class="cellalignment4000">
<tr>
<td class="cellalignment3999"><a href="chfour.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3999"><a href="chsix.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4006">
<table class="cellalignment3998">
<tr>
<td class="cellalignment3999"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3999"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3999"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3999"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3999"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3999"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>