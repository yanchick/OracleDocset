<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-71035"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Schema%20Objects%20and%20Oracle%20JVM%20Utilities"></a><title>Schema Objects and Oracle JVM Utilities</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="description" content="This book describes how to develop, load, and run Java applications in Oracle Database."/>
<meta name="dcterms.created" content="2014-06-30T4:25:1Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Java Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E50793-03"/>
<meta name="dcterms.isVersionOf" content="JJDEV"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="jndi_support.htm" title="Previous" type="text/html"/>
<link rel="Next" href="chtwelve.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E50793-03.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">19/23</span> <!-- End Header -->
<script>
<!-- // <![CDATA[
window.name='cheleven'
// ]]> -->
</script> <script>
// <![CDATA[
function footdisplay(footnum,footnote) {
    var msg = window.open('', 'NewWindow' + footnum,
        'directories=no,height=120,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');

    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">');
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>');
    msg.document.write('Footnote ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><h1>Footnote ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/body><\/html>');
    msg.document.close();
    msg.focus();
}
// ]]>
</script> <noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript>
<div id="JJDEV13409" class="chapter"><a id="CACCBHIC"></a>
<h1 class="chapter"><span class="secnum">12</span> Schema Objects and Oracle JVM Utilities</h1>
<p>This chapter describes the schema objects that you use in Oracle Database Java environment and Oracle JVM utilities. You run these utilities from a UNIX shell or from the Microsoft Windows DOS prompt.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
All names supplied to these tools are case-sensitive. As a result, the schema, user name, and password should not be changed to uppercase.</div>
<p>This chapter contains the following sections:</p>
<ul>
<li>
<p><a href="#CACCHAIE">Overview of Schema Objects</a></p>
</li>
<li>
<p><a href="#CACBHFBB">What and When to Load</a></p>
</li>
<li>
<p><a href="#CACBGGHE">Resolution of Schema Objects</a></p>
</li>
<li>
<p><a href="#CACEGHDA">Compilation of Schema Objects</a></p>
</li>
<li>
<p><a href="#CACEJBEJ">The ojvmtc Tool</a></p>
</li>
<li>
<p><a href="#CACFHDJE">The loadjava Tool</a></p>
</li>
<li>
<p><a href="#CACHIDAG">The dropjava Tool</a></p>
</li>
<li>
<p><a href="#CACDIEGD">The ojvmjava Tool</a></p>
</li>
</ul>
<a id="CACCHAIE"></a>
<div id="JJDEV13410" class="sect1">
<h2 class="sect1">Overview of Schema Objects</h2>
<p>Unlike conventional Java virtual machine (JVM), which compiles and loads Java files, Oracle JVM compiles and loads schema objects. The following kinds of Java schema objects are loaded:</p>
<ul>
<li>
<p>Java <a id="sthref679"></a>class schema objects, which correspond to Java class files.</p>
</li>
<li>
<p>Java <a id="sthref680"></a>source schema objects, which correspond to Java source files.</p>
</li>
<li>
<p>Java <a id="sthref681"></a>resource schema objects, which correspond to Java resource files.</p>
</li>
</ul>
<p>To ensure that a class file can be run by Oracle JVM, you must use the <code>loadjava</code> tool to create a Java class schema object from the class file or the source file and load it into a schema. To make a resource file accessible to Oracle JVM, you must use the <code>loadjava</code> tool to create and load a Java resource schema object from the resource file.</p>
<p>The <code>dropjava</code> tool deletes schema objects that correspond to Java files. You should always use the <code>dropjava</code> tool to delete a Java schema object that was created with the <code>loadjava</code> tool. Dropping schema objects using SQL data definition language (DDL) commands will not update auxiliary data maintained by the <code>loadjava</code> tool and the <code>dropjava</code> tool.</p>
</div>
<!-- class="sect1" -->
<a id="CACBHFBB"></a>
<div id="JJDEV13411" class="sect1">
<h2 class="sect1">What and When to Load</h2>
<p>You must load resource files using the <code>loadjava</code> tool. If you create <code>.class</code> files outside the database with a conventional compiler, then you must load them with the <code>loadjava</code> tool. The alternative to loading class files is to load source files and let Oracle Database compile and manage the resulting class schema objects. In Oracle Database 12<span class="italic">c</span> Release 1 (12.1), the most productive approach is to compile and debug most of your code outside the database, and then load the <code>.class</code> files. For a particular Java class, you can load either its <code>.class</code> file or the corresponding <code>.java</code> file, but not both.</p>
<p>The <code>loadjava</code> tool accepts Java Archive (JAR) files that contain either source and resource files or class and resource files. When you pass a JAR or ZIP file to the <code>loadjava</code> tool, by default, it opens the archive and loads its members individually.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When you load the contents of a JAR into the database, you have the option of creating a database object representing the JAR itself. For more information, refer to <a href="chtwo.htm#BEJCBAHI">&#34;Database Resident JARs&#34;</a>.</div>
<p>A file, whose content has not changed since the last time it was loaded, is not reloaded. As a result, there is little performance penalty for loading JAR files. Loading JAR files is a simple, fool-proof way to use the <code>loadjava</code> tool.</p>
<p>It is illegal for two schema objects in the same schema to define the same class. For example, assume that <code>a.java</code> defines class <code>x</code> and you want to move the definition of <code>x</code> to <code>b.java</code>. If <code>a.java</code> has already been loaded, then the <code>loadjava</code> tool will reject an attempt to load <code>b.java</code>. Instead, do either of the following:</p>
<ul>
<li>
<p>Drop <code>a.java</code>, load <code>b.java</code>, and then load the new <code>a.java</code>, which does not define <code>x</code>.</p>
</li>
<li>
<p>Load the new <code>a.java</code>, which does not define <code>x</code>, and then load <code>b.java</code>.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="CACBGGHE"></a>
<div id="JJDEV13412" class="sect1">
<h2 class="sect1">Resolution of Schema Objects</h2>
<p><a id="sthref682"></a>All Java classes contain references to other classes. A conventional JVM searches for classes in the directories, ZIP files, and JAR files named in the <code>CLASSPATH</code>. In contrast, Oracle JVM searches schemas for class schema objects. Each class in the database has a resolver specification, which is Oracle Database counterpart to <code>CLASSPATH</code>. For example, the resolver specification of a class, <code>alpha</code>, lists the schemas to search for classes that <code>alpha</code> uses. Notice that resolver specifications are per-class, whereas in a classic JVM, <code>CLASSPATH</code> is global to all classes.</p>
<p>In addition to a resolver specification, each class schema object has a list of interclass reference bindings. Each reference list item contains a reference to another class and one of the following:</p>
<ul>
<li>
<p>The name of the class schema object to call when the class uses the reference</p>
</li>
<li>
<p>A code indicating whether the reference is unsatisfied, that is, whether the referent schema object is known</p>
</li>
</ul>
<p>Oracle Database facility known as <a id="sthref683"></a><span class="bold">resolver</span> maintains reference lists. For each interclass reference in a class, the resolver searches the schemas specified by the resolver specification of the class for a valid <a id="sthref684"></a>class schema object that satisfies the reference. If all references are resolved, then the resolver marks the class valid. A class that has never been resolved, or has been resolved unsuccessfully, is marked invalid. A class that depends on a schema object that becomes invalid is also marked invalid at the time the first class is marked invalid. In other words, invalidation cascades upward from a class to the classes that use it and the classes that use these classes, and so on. When resolving a class that depends on an invalid class, the resolver first tries to resolve the referenced class, because it may be marked invalid only because it has never been resolved. The resolver does not resolve classes that are marked valid.</p>
<p>A developer can direct the <code>loadjava</code> tool to resolve classes or can defer resolution until run time. The resolver runs automatically when a class tries to load a class that is marked invalid. It is best to resolve before run time to learn of missing classes early. Unsuccessful resolution at run time produces a <code>ClassNotFound</code> exception. Furthermore, run-time resolution can fail for the following reasons:</p>
<ul>
<li>
<p>Lack of database resources, if the tree of classes is very large</p>
</li>
<li>
<p>Deadlocks due to circular dependencies</p>
</li>
</ul>
<p>The <a id="sthref685"></a><code>loadjava</code> tool has two resolution modes:</p>
<ul>
<li>
<p>Load-and-resolve</p>
<p>The <code>-resolve</code> option loads all classes you specify on the command line, marks them invalid, and then resolves them. Use this mode when initially loading classes that refer to each other, and, in general, when reloading isolated classes as well. By loading all classes and then resolving them, this mode avoids the error message that occurs if a class refers to a class that will be loaded later while the command is being carried out.</p>
</li>
<li>
<p>Load-then-resolve</p>
<p>This mode resolves each class at run time. The <code>-resolve</code> option is not specified.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
As with a Java compiler, the <code>loadjava</code> tool resolves references to classes but not to resources. Ensure that you correctly load the resource files that your classes need.</div>
</li>
</ul>
<p>If you can, defer resolution until all classes have been loaded. This avoids a situation in which the resolver marks a class invalid because a class it uses has not yet been loaded.</p>
</div>
<!-- class="sect1" -->
<a id="CACEGHDA"></a>
<div id="JJDEV13414" class="sect1">
<h2 class="sect1">Compilation of Schema Objects</h2>
<p>Loading a source file creates or updates a Java source schema object and invalidates the class schema objects previously derived from the source. If the class schema objects do not exist, then the <code>loadjava</code> tool creates them. The <code>loadjava</code> tool invalidates the old class schema objects because they were not compiled from the newly loaded source. Compilation of a newly loaded source, for example, class <code>A</code>, is automatically triggered by any of the following conditions:</p>
<ul>
<li>
<p>The resolver, while working on class <code>B</code>, finds that class <code>B</code> refers to class <code>A</code>, but class <code>A</code> is invalid.</p>
</li>
<li>
<p>The compiler, while compiling the source of class <code>B</code>, finds that class <code>B</code> refers to class <code>A</code>, but class <code>A</code> is invalid.</p>
</li>
<li>
<p>The class loader, while trying to load class <code>A</code> for running it, finds that class <code>A</code> is invalid.</p>
</li>
</ul>
<p>To force compilation when you load a source file, use the <code>loadjava -resolve</code> option.</p>
<p><a id="sthref686"></a>The compiler writes error messages to the predefined <code>USER_ERRORS</code> view. The <code>loadjava</code> tool retrieves and displays the messages produced by its compiler invocations.</p>
<p><a id="sthref687"></a>The compiler recognizes some options. There are two ways to specify options to the compiler. If you run the <code>loadjava</code> tool with the <code>-resolve</code> option, then you can specify compiler options on the command line. You can additionally specify persistent compiler options in a per-schema database table, <code>JAVA$OPTIONS</code>. You can use the <code>JAVA$OPTIONS</code> table for default compiler options, which you can override selectively using a <code>loadjava</code> tool option.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
A command-line option overrides and clears the matching entry in the <code>JAVA$OPTIONS</code> table.</div>
<p>A <code>JAVA$OPTIONS</code> row contains the names of source schema objects to which an option setting applies. You can use multiple rows to set the options differently for different source schema objects. The compiler looks up options in <code>JAVA$OPTIONS</code> when it has been called by the class loader or when called from the command line without specifying any options. When compiling a source schema object for which there is neither a <code>JAVA$OPTIONS</code> entry nor a command-line value for an option, the compiler assumes a default value, as follows:</p>
<ul>
<li>
<p><code><a id="sthref688"></a>encoding = System.getProperty(&#34;file.encoding&#34;);</code></p>
</li>
<li>
<p><code><a id="sthref689"></a>online = true</code></p>
<p>This applies only to Java sources that contain SQLJ constructs.</p>
</li>
<li>
<p><code><a id="sthref690"></a>debug = true</code></p>
<p>This option is equivalent to <code>javac -g</code>.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="chtwo.htm#BABHIGJD">&#34;Compiler Options Specified in a Database Table&#34;</a></div>
</div>
<!-- class="sect1" -->
<a id="CACEJBEJ"></a>
<div id="JJDEV13415" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">The ojvmtc Tool</h2>
<p>The <code>ojvmtc</code> tool enables you to resolve all external references, prior to running the <code>loadjava</code> tool. The <code>ojvmtc</code> tool allows the specification of a classpath that specifies the JARs, classes, or directories to be used to resolve class references. When an external reference cannot be resolved, this tool either produces a list of unresolved references or generated stub classes to allow resolution of the references, depending on the options specified. Generated stub classes throw a <code>java.lang.ClassNotfoundException</code> if it is referenced at runtime.</p>
<p>The syntax is:</p>
<pre>ojvmtc [-help ] [-bootclasspath] [-server connect_string] [-jar jar_name] [-list] -classpath jar1:path2:jar2  
jars,...,classes
</pre>
<p>For example:</p>
<pre>ojvmtc -bootclasspath $JAVA_HOME/jre/lib/rt.jar -classpath classdir/lib1.jar:classdir/lib2.jar -jar set.jar app.jar
</pre>
<p>The preceding example uses <code>rt.jar</code>, <code>classdir/lib1.jar</code>, and <code>classdir/lib2.jar</code> to resolve references in <code>app.jar.</code> All the classes examined are added to <code>set.jar,</code> except for those found in <code>rt.jar.</code></p>
<p>Another example is:</p>
<pre>ojvmtc -server thin:HR/@localhost:5521:orcl -classpath jar1:jar2 -list app2.jar
Password:<span class="italic">password</span>
</pre>
<p>The preceding example uses classes found in the server specified by the connection string as well as <code>jar1</code> and <code>jar2</code> to resolve <code>app2.jar.</code> Any missing references are displayed to <code>stdout.</code></p>
<p><a href="#CACIEEFG">Table 12-1</a> summarizes the arguments of this command.</p>
<div id="JJDEV13416" class="tblformal">
<p class="titleintable"><a id="sthref691"></a><a id="CACIEEFG"></a>Table 12-1 ojvmtc Argument Summary</p>
<table class="cellalignment4009" title="ojvmtc Argument Summary" summary="table">
<thead>
<tr class="cellalignment3996">
<th class="cellalignment4003" id="r1c1-t7">Argument</th>
<th class="cellalignment4003" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r2c1-t7" headers="r1c1-t7">
<p><code>-classpath</code></p>
</td>
<td class="cellalignment4004" headers="r2c1-t7 r1c2-t7">
<p>Uses the specified JARs and classes for the closure set.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r3c1-t7" headers="r1c1-t7">
<p><code>-bootclasspath</code></p>
</td>
<td class="cellalignment4004" headers="r3c1-t7 r1c2-t7">
<p>Uses the specified classes for closure, but does not include them in the closure set.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r4c1-t7" headers="r1c1-t7">
<p><code>-server connect_string</code></p>
</td>
<td class="cellalignment4004" headers="r4c1-t7 r1c2-t7">
<p>Connects to the server using visible classes in the same manner as <code>-bootclasspath.</code></p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r5c1-t7" headers="r1c1-t7">
<p><code>connect_string thin|OCI</code></p>
</td>
<td class="cellalignment4004" headers="r5c1-t7 r1c2-t7">
<p>Connects to the server using thin or Oracle Call Interface (OCI) specific driver.</p>
<p>If you use thin driver, the syntax is as follows:</p>
<pre>thin:user/passwd@host:port:sid
</pre>
<p>If you use OCI driver, the syntax is as follows:</p>
<pre>oci:user/passwd@host:port:sid
oci:user/passwd@tnsname
oci:user/passwd@(connect descriptor)

</pre></td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r6c1-t7" headers="r1c1-t7">
<p><code>-jar jar_name</code></p>
</td>
<td class="cellalignment4004" headers="r6c1-t7 r1c2-t7">
<p>Writes each class of the closure set to a JAR and generates stubs for missing classes</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r7c1-t7" headers="r1c1-t7">
<p><code>-list</code></p>
</td>
<td class="cellalignment4004" headers="r7c1-t7 r1c2-t7">
<p>Lists the missing classes.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="sect1" -->
<a id="CACFHDJE"></a>
<div id="JJDEV10060" class="sect1">
<h2 class="sect1">The <a id="ABC2124788"></a>loadjava Tool</h2>
<p>The <code>loadjava</code> tool creates schema objects from files and loads them into a schema. Schema objects can be created from Java source, class, and data files. The <code>loadjava</code> tool can also create schema objects from SQLJ files.</p>
<p>You must have the following SQL database privileges to load classes:</p>
<ul>
<li>
<p><code>CREATE PROCEDURE</code> and <code>CREATE TABLE</code> privileges to load into your schema.</p>
</li>
<li>
<p><code>CREATE ANY PROCEDURE</code> and <code>CREATE ANY TABLE</code> privileges to load into another schema.</p>
</li>
<li>
<p><code>oracle.aurora.security.JServerPermission.loadLibraryInClass.</code><code><span class="codeinlineitalic">classname</span></code>.</p>
</li>
</ul>
<p>You can run the <code>loadjava</code> tool either from the command line or by using the <code>loadjava</code> method contained in the <code>DBMS_JAVA</code> class. To run the tool from within your Java application, do the following:</p>
<pre>call dbms_java.loadjava(&#39;... options...&#39;);
</pre>
<p>The options are the same as those that can be specified on the command line with the <code>loadjava</code> tool. Separate each option with a space. Do not separate the options with a comma. The only exception for this is the <code>-resolver</code> option, which contains spaces. For <code>-resolver</code>, specify all other options in the first input parameter and the <code>-resolver</code> options in the second parameter, as follows:</p>
<pre>call dbms_java.loadjava(&#39;..options...&#39;, &#39;resolver_options&#39;);
</pre>
<p>Do not specify the <code>-thin</code>, <code>-oci</code>, <code>-user</code>, and <code>-password</code> options, because they relate to the database connection for the <code>loadjava</code> command-line tool. The output is directed to <code>stderr</code>. Set <code>serveroutput</code> on, and call <code>dbms_java.set_output</code>, as appropriate.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code>loadjava</code> tool is located in the <code>bin</code> directory under <code>$ORACLE_HOME</code>.</div>
<p>Just before the <code>loadjava</code> tool exits, it checks whether the processing was successful. All failures are summarized preceded by the following header:</p>
<pre>The following operations failed
</pre>
<p>Some conditions, such as losing the connection to the database, cause the <code>loadjava</code> tool to terminate prematurely. These errors are displayed with the following syntax:</p>
<pre>exiting: <span class="italic">error_reason</span>
</pre>
<p>This section covers the following:</p>
<ul>
<li>
<p><a href="#CACIHHFI">Syntax</a></p>
</li>
<li>
<p><a href="#CACGCCCH">Argument Summary</a></p>
</li>
<li>
<p><a href="#CACDCGCC">Argument Details</a></p>
</li>
</ul>
<a id="CACIHHFI"></a>
<div id="JJDEV13417" class="sect2">
<h3 class="sect2">Syntax</h3>
<p>The syntax of the <code>loadjava</code> tool command is as follows:</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>The <code>(* -)</code> option is the preferred option over the <code>-genmissing</code> and <code>-genmissingjar</code> options for resolving class references. For more information about the <code>(* -)</code> option, refer to <a href="chtwo.htm#CHDDFFEJ">&#34;Allowing References to Nonexistent Classes&#34;</a>.</p>
</li>
<li>
<p>The the <code>-genmissing</code> and <code>-genmissingjar</code> options cannot be used in an option file or an option table. These options are applicable to all the classes to be loaded and cannot be used only for specific classes.</p>
</li>
</ul>
</div>
<pre>loadjava {-user | -u} <span class="italic">user</span> [@<span class="italic">database</span>] [options]
<span class="italic">file</span>.java | <span class="italic">file</span>.class | <span class="italic">file</span>.jar | <span class="italic">file</span>.zip |
<span class="italic">file</span>.sqlj | <span class="italic">resourcefile</span> | URL...
  [-casesensitivepub]
  [-cleargrants]
  [-debug]
  [-d | -definer]
  [-dirprefix <span class="italic">prefix</span>]
  [-e | -encoding <span class="italic">encoding_scheme</span>]
  [-fileout <span class="italic">file</span>]
  [-f | -force]
  [-genmissing]
  [-genmissingjar <span class="italic">jar_file</span>]
  [-g | -grant <span class="italic">user</span> [, <span class="italic">user</span>]...]
  [-help]
  [-jarasresource]
  [-noaction]
  [-nosynonym]
  [-nousage]
  [-noverify]
  [-o | -oci | oci8]
  [-optionfile <span class="italic">file</span>]
  [-optiontable <span class="italic">table_name</span>]
  [-publish <span class="italic">package</span>]
  [-pubmain <span class="italic">number</span>]
  [-recursivejars]
  [-r | -resolve]
  [-R | -resolver &#34;resolver_spec&#34;]
  [-resolveonly]
  [-S | -schema <span class="italic">schema</span>]
  [-stdout]
  [-stoponerror]
  [-s | -synonym]
  [-tableschema <span class="italic">schema</span>]
  [-t | -thin]
  [-unresolvedok]
  [-v | -verbose]
  [-jarsasdbobjects]
  [-prependjarnames]
  [-nativecompile]
</pre></div>
<!-- class="sect2" -->
<a id="CACGCCCH"></a>
<div id="JJDEV13418" class="sect2">
<h3 class="sect2">Argument Summary</h3>
<p><a href="#CACECBAH">Table 12-2</a> summarizes the <code>loadjava</code> tool command arguments. If you run the <code>loadjava</code> tool multiple times specifying the same files and different options, then the options specified in the most recent invocation hold. However, there are two exceptions to this, as follows:</p>
<ul>
<li>
<p>If the <code>loadjava</code> tool does not load a file because it matches a digest table entry, then most options on the command line have no effect on the schema object. The exceptions are <code>-grant</code> and <code>-resolve</code>, which always take effect. You must use the <code>-force</code> option to direct the <code>loadjava</code> tool to skip the digest table lookup.</p>
</li>
<li>
<p>The <code>-grant</code> option is cumulative. Every user specified in every invocation of the <code>loadjava</code> tool for a given class in a given schema has the <code>EXECUTE</code> privilege.</p>
</li>
</ul>
<div id="JJDEV13419" class="tblformal">
<p class="titleintable"><a id="sthref692"></a><a id="CACECBAH"></a>Table 12-2 loadjava Argument Summary</p>
<table class="cellalignment4009" title="loadjava Argument Summary" summary="table" dir="ltr">
<thead>
<tr class="cellalignment3996">
<th class="cellalignment4003" id="r1c1-t10">Argument</th>
<th class="cellalignment4003" id="r1c2-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r2c1-t10" headers="r1c1-t10">
<p><code><span class="codeinlineitalic">filenames</span></code></p>
</td>
<td class="cellalignment4004" headers="r2c1-t10 r1c2-t10">
<p>You can specify any number and combination of <code>.java</code>, <code>.class</code>, <code>.sqlj</code>, <code>.ser</code>, <code>.jar</code>, <code>.zip</code>, and resource file name arguments.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r3c1-t10" headers="r1c1-t10">
<p><code>-proxy host:port</code></p>
</td>
<td class="cellalignment4004" headers="r3c1-t10 r1c2-t10">
<p>If you do not have physical access to the server host or the <code>loadjava</code> client for loading classes, resources, and Java source, then you can use an HTTP URL with the <code>loadjava</code> tool to specify the JAR, class file, or resource and load the class from a remote server. <code>host</code> is the host name or address and <code>port</code> is the port the proxy server is using. The URL implementation must be such that the <code>loadjava</code> tool can determine the type of file to load, that is, JAR, class, resource, or Java source. For example:</p>
<pre>loadjava &ndash;u HR &ndash;r &ndash;v &ndash;proxy proxy_server:1020 http://my.server.com/this/is /the/path/my.jar
Password: <span class="italic">password</span>
</pre>
<p>When the URL support is used inside the server, you should have proper Java permissions to access to the remote source. The URL support also includes <code>ftp:</code> and <code>file:</code> URLs.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r4c1-t10" headers="r1c1-t10">
<p><code>-casesensitivepub</code></p>
</td>
<td class="cellalignment4004" headers="r4c1-t10 r1c2-t10">
<p>Publishing will create case-sensitive names. Unless the names are already all uppercase, it will usually require quoting the names in PL/SQL.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r5c1-t10" headers="r1c1-t10">
<p><code>-cleargrants</code></p>
</td>
<td class="cellalignment4004" headers="r5c1-t10 r1c2-t10">
<p>The <code>-grant</code> option causes the <code>loadjava</code> tool to grant <code>EXECUTE</code> privileges to classes, sources, and resources. However, it does not cause it to revoke any privileges. If <code>-cleargrants</code> is specified, then the <code>loadjava</code> tool will revoke any existing grants of execute privilege before it grants execute privilege to the users and roles specified by the <code>-grant</code> operand. For example, if the intent is to have execute privilege granted to only <code>HR</code>, then the proper options are:</p>
<pre>-grant HR -cleargrants
</pre></td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r6c1-t10" headers="r1c1-t10">
<p><code>-debug</code></p>
</td>
<td class="cellalignment4004" headers="r6c1-t10 r1c2-t10">
<p>Turns on SQL logging.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r7c1-t10" headers="r1c1-t10">
<p><code>-definer</code></p>
</td>
<td class="cellalignment4004" headers="r7c1-t10 r1c2-t10">
<p>By default, class schema objects run with the privileges of their invoker. This option confers definer privileges upon classes instead. This option is conceptually similar to the UNIX <code>setuid</code> facility.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r8c1-t10" headers="r1c1-t10">
<p><code>-dirprefix</code> <code><span class="codeinlineitalic">prefix</span></code></p>
</td>
<td class="cellalignment4004" headers="r8c1-t10 r1c2-t10">
<p>For any files or JAR entries that start with <code><span class="codeinlineitalic">prefix</span></code>, this <code><span class="codeinlineitalic">prefix</span></code> will be deleted from the name before the name of the schema object is determined. For classes and sources, the name of the schema object is determined by their contents. Therefore, this option will only have an effect for resources.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r9c1-t10" headers="r1c1-t10">
<p><code>-encoding</code></p>
</td>
<td class="cellalignment4004" headers="r9c1-t10 r1c2-t10">
<p>Identifies the source file encoding for the compiler, overriding the matching value, if any, in the <code>JAVA$OPTIONS</code> table. Values are the same as for the <code>javac -encoding</code> option. If you do not specify an encoding on the command line or in the <code>JAVA$OPTIONS</code> table, then the encoding is assumed to be the value returned by:</p>
<pre>System.getProperty(&#34;file.encoding&#34;);
</pre>
<p>This option is relevant only when loading a source file.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r10c1-t10" headers="r1c1-t10">
<p><code>-fileout</code> <code><span class="codeinlineitalic">file</span></code></p>
</td>
<td class="cellalignment4004" headers="r10c1-t10 r1c2-t10">
<p>Displays all message to the designated file.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r11c1-t10" headers="r1c1-t10">
<p><code>-force</code></p>
</td>
<td class="cellalignment4004" headers="r11c1-t10 r1c2-t10">
<p>Forces files to be loaded, even if they match digest table entries.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r12c1-t10" headers="r1c1-t10">
<p><code>-genmissing</code></p>
</td>
<td class="cellalignment4004" headers="r12c1-t10 r1c2-t10">
<p>Determines what classes and methods are referred to by the classes that the <code>loadjava</code> tool is asked to process. Any classes not found in the database or file arguments are called <a id="sthref693"></a>missing classes. This option generates dummy definitions for missing classes containing all the referred methods. It then loads the generated classes into the database. This processing happens before the class resolution.</p>
<p>Because detecting references from source is more difficult than detecting references from class files, and because source is not generally used for distributing libraries, the <code>loadjava</code> tool will not attempt to do this processing for source files.</p>
<p>The schema in which the missing classes are loaded will be the one specified by the <code>-user</code> option, even when referring classes are created in some other schema. The created classes will be flagged so that tools can recognize them. In particular, this is needed, so that the verifier can recognize the generated classes.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r13c1-t10" headers="r1c1-t10">
<p><code>-genmissingjar</code> <code><span class="codeinlineitalic">jar_file</span></code></p>
</td>
<td class="cellalignment4004" headers="r13c1-t10 r1c2-t10">
<p>This option performs the same actions as <code>-genmissing</code>. In addition, it creates a JAR file, <code><span class="codeinlineitalic">jar_file</span></code>, that contains the definitions of any generated classes.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r14c1-t10" headers="r1c1-t10">
<p><code>-grant</code></p>
</td>
<td class="cellalignment4004" headers="r14c1-t10 r1c2-t10">
<p>Grants the <code>EXECUTE</code> privilege on loaded classes to the listed users. Any number and combination of user names can be specified, separated by commas, but not spaces.</p>
<p>Granting the <code>EXECUTE</code> privilege on an object in another schema requires that the original <code>CREATE PROCEDURE</code> privilege was granted with the <code>WITH GRANT</code> options.</p>
<p><span class="bold">Note:</span></p>
<ul>
<li>
<p><code>-grant</code> is a cumulative option. Users are added to the list of those with the <code>EXECUTE</code> privilege. To remove privileges, use the <code>-cleargrants</code> option.</p>
</li>
<li>
<p>The schema name should be used in uppercase.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r15c1-t10" headers="r1c1-t10">
<p><code>-help</code></p>
</td>
<td class="cellalignment4004" headers="r15c1-t10 r1c2-t10">
<p>Displays usage message on how to use the <code>loadjava</code> tool and its options.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r16c1-t10" headers="r1c1-t10">
<p><code>-jarasresource</code></p>
</td>
<td class="cellalignment4004" headers="r16c1-t10 r1c2-t10">
<p>Instead of unpacking the JAR file and loading each class within it, loads the whole JAR file into the schema as a resource.<a id="sthref694" href="#sthref694" onclick="footdisplay(1,&#34;If you load a JAR file in this manner, then you \u003cspan class=\&#34;italic\&#34;\u003ecannot\u003c/span\u003e use it for resolution or execution.&#34;)"><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r17c1-t10" headers="r1c1-t10">
<p><code>-noaction</code></p>
</td>
<td class="cellalignment4004" headers="r17c1-t10 r1c2-t10">
<p>Take no action on the files. Actions include creating the schema objects, granting execute permissions, and so on. The typical use is within an option file to suppress creation of specific classes in a JAR. When used on the command line, unless overridden in the option file, it will cause the <code>loadjava</code> tool to ignore all files. Except that JAR files will still be examined to determine if they contain a <code>META-INF/loadjava-options</code> entry. If so, then the option file is processed. The <code>-action</code> option in the option file will override the <code>-noaction</code> option specified on the command line.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r18c1-t10" headers="r1c1-t10">
<p><code>-norecursivejars</code></p>
</td>
<td class="cellalignment4004" headers="r18c1-t10 r1c2-t10">
<p>Treat JAR files contained in other JAR files as resources. This is the default behavior. This option is used to override the <code>-recursivejars</code> option.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r19c1-t10" headers="r1c1-t10">
<p><code>-nosynonym</code></p>
</td>
<td class="cellalignment4004" headers="r19c1-t10 r1c2-t10">
<p>Do not create a public synonym for the classes. This is the default behavior. This overrides the <code>-synonym</code> option.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r20c1-t10" headers="r1c1-t10">
<p><code>-nousage</code></p>
</td>
<td class="cellalignment4004" headers="r20c1-t10 r1c2-t10">
<p>Suppresses the usage message that is given if either no option is specified or if the <code>-help</code> option is specified.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r21c1-t10" headers="r1c1-t10">
<p><code>-noverify</code></p>
</td>
<td class="cellalignment4004" headers="r21c1-t10 r1c2-t10">
<p>Causes the classes to be loaded without bytecode verification. <code>oracle.aurora.security.JServerPermission(Verifier) must be granted</code> to use this option. To be effective, this option must be used in conjunction with <code>-resolve</code>.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r22c1-t10" headers="r1c1-t10">
<p><code>-oci | -oci8</code></p>
</td>
<td class="cellalignment4004" headers="r22c1-t10 r1c2-t10">
<p>Directs the <code>loadjava</code> tool to communicate with the database using the JDBC Oracle Call Interface (OCI) driver. <code>-oci</code> and <code>-thin</code> are mutually exclusive. If neither is specified, then <code>-oci</code> is used by default. Choosing <code>-oci</code> implies the syntax of the <code>-user</code> value. You do not need to provide the URL.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r23c1-t10" headers="r1c1-t10">
<p><code>-optionfile</code> <code><span class="codeinlineitalic">file</span></code></p>
</td>
<td class="cellalignment4004" headers="r23c1-t10 r1c2-t10">
<p>A file can be provided with <code>loadjava</code> options.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r24c1-t10" headers="r1c1-t10">
<p><code>-optiontable</code> <code><span class="codeinlineitalic">tablename</span></code></p>
</td>
<td class="cellalignment4004" headers="r24c1-t10 r1c2-t10">
<p>This option works like <code>-optionfile</code>, except that the source for the patterns and options is a SQL table rather than a file.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r25c1-t10" headers="r1c1-t10">
<p><code>-publish</code> <code><span class="codeinlineitalic">package</span></code></p>
</td>
<td class="cellalignment4004" headers="r25c1-t10 r1c2-t10">
<p>The <code><span class="codeinlineitalic">package</span></code> is created or replaced by the <code>loadjava</code> tool. Wrappers for the eligible methods will be defined in this package. Through the use of option files, a single invocation of the <code>loadjava</code> tool can be instructed to create more than one package. Each package will undergo the same name transformations as the methods.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r26c1-t10" headers="r1c1-t10">
<p><code>-pubmain</code> <code><span class="codeinlineitalic">number</span></code></p>
</td>
<td class="cellalignment4004" headers="r26c1-t10 r1c2-t10">
<p>A special case applied to methods with a single argument, which is of type <code>java.lang.String[]</code>. Multiple variants of the SQL procedure or function will be created, each of which takes a different number of arguments of type <code>VARCHAR</code>. In particular, variants are created taking all arguments up to and including <code><span class="codeinlineitalic">number</span></code>. The default value is <code>3</code>. This option applies to <code>main</code>, as well as any method that has exactly one argument of type <code>java.lang.String[]</code>.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r27c1-t10" headers="r1c1-t10">
<p><code>-recursivejars</code></p>
</td>
<td class="cellalignment4004" headers="r27c1-t10 r1c2-t10">
<p>Usually, if the <code>loadjava</code> tool encounters an entry in a JAR with a <code>.jar</code> extension, it will load the entry as a resource. If this option is specified, then the <code>loadjava</code> tool will process contained JAR files as if they were top-level JAR files. That is, it will read their entries and load classes, sources, and resources.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r28c1-t10" headers="r1c1-t10">
<p><code>-resolve</code></p>
</td>
<td class="cellalignment4004" headers="r28c1-t10 r1c2-t10">
<p>Compiles, if necessary, and resolves external references in classes after all classes on the command line have been loaded. If you do not specify the <code>-resolve</code> option, the <code>loadjava</code> tool loads files, but does not compile or resolve them.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r29c1-t10" headers="r1c1-t10">
<p><code>-resolver</code></p>
</td>
<td class="cellalignment4004" headers="r29c1-t10 r1c2-t10">
<p>Specifies an explicit resolver specification, which is bound to the newly loaded classes. If <code>-resolver</code> is not specified, then the default resolver specification, which includes current user&#39;s schema and <code>PUBLIC</code>, is used.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r30c1-t10" headers="r1c1-t10">
<p><code>-resolveonly</code></p>
</td>
<td class="cellalignment4004" headers="r30c1-t10 r1c2-t10">
<p>Causes the <code>loadjava</code> tool to skip the initial creation step. It will still perform grants, resolves, create synonyms, and so on.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r31c1-t10" headers="r1c1-t10">
<p><code>-schema</code></p>
</td>
<td class="cellalignment4004" headers="r31c1-t10 r1c2-t10">
<p>Designates the schema where schema objects are created. If not specified, then the <code>-user</code> schema is used. To create a schema object in a schema that is not your own, you must have the following privileges:</p>
<ul>
<li>
<p><code>CREATE TABLE</code> or <code>CREATE ANY TABLE</code></p>
</li>
<li>
<p><code>CREATE INDEX</code> or <code>CREATE ANY INDEX</code></p>
</li>
<li>
<p><code>SELECT ANY TABLE</code></p>
</li>
<li>
<p><code>UPDATE ANY TABLE</code></p>
</li>
<li>
<p><code>INSERT ANY TABLE</code></p>
</li>
<li>
<p><code>DELETE ANY TABLE</code></p>
</li>
<li>
<p><code>CREATE PROCEDURE or CREATE ANY PROCEDURE</code></p>
</li>
<li>
<p><code>ALTER ANY PROCEDURE</code></p>
</li>
</ul>
<p>Finally, you must have the <code>JServerPermission loadLibraryInClass</code> for the class.</p>
<p><span class="bold">Note:</span> The above-mentioned privileges allow the grantee to create and manipulate tables in any schema except the SYS schema. For security reasons, Oracle recommends that you use these settings only with great caution.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r32c1-t10" headers="r1c1-t10">
<p><code>-stdout</code></p>
</td>
<td class="cellalignment4004" headers="r32c1-t10 r1c2-t10">
<p>Causes the output to be directed to <code>stdout</code>, rather than to <code>stderr</code>.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r33c1-t10" headers="r1c1-t10">
<p><code>-stoponerror</code></p>
</td>
<td class="cellalignment4004" headers="r33c1-t10 r1c2-t10">
<p>Usually, if an error occurs while the <code>loadjava</code> tool is processing files, it will issue a message and continue to process other classes. This option stops when an error occurs. In addition, it reports all errors that apply to Java objects and are contained in the <code>USER_ERROR</code> table of the schema in which classes are being loaded. Except that is does not report <code>ORA-29524</code> errors. These are errors that are generated when a class cannot be resolved, because a referred class could not be resolved. Therefore, these errors are a secondary effect of whatever caused a referred class to be unresolved.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r34c1-t10" headers="r1c1-t10">
<p><code>-synonym</code></p>
</td>
<td class="cellalignment4004" headers="r34c1-t10 r1c2-t10">
<p>Creates a <code>PUBLIC</code> synonym for loaded classes making them accessible outside the schema into which they are loaded. To specify this option, you must have the <code>CREATE PUBLIC SYNONYM</code> privilege. If <code>-synonym</code> is specified for source files, then the classes compiled from the source files are treated as if they had been loaded with <code>-synonym</code>.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r35c1-t10" headers="r1c1-t10">
<p><code>-tableschema</code> <code><span class="codeinlineitalic">schema</span></code></p>
</td>
<td class="cellalignment4004" headers="r35c1-t10 r1c2-t10">
<p>Creates the <code>loadjava</code> tool internal tables within the specified schema, rather than in the Java file destination schema.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r36c1-t10" headers="r1c1-t10">
<p><code>-thin</code></p>
</td>
<td class="cellalignment4004" headers="r36c1-t10 r1c2-t10">
<p>Directs the <code>loadjava</code> tool to communicate with the database using the JDBC Thin driver. Choosing <code>-thin</code> implies the syntax of the <code>-user</code> value. You do need to specify the appropriate URL through the <code>-user</code> option.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r37c1-t10" headers="r1c1-t10">
<p><code>-unresolvedok</code></p>
</td>
<td class="cellalignment4004" headers="r37c1-t10 r1c2-t10">
<p>When combined with <code>-resolve</code>, will ignore unresolved errors.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r38c1-t10" headers="r1c1-t10">
<p><code>-user</code></p>
</td>
<td class="cellalignment4004" headers="r38c1-t10 r1c2-t10">
<p>Specifies a user name, password, and database connection string. The files will be loaded into this database instance.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r39c1-t10" headers="r1c1-t10">
<p><code>-verbose</code></p>
</td>
<td class="cellalignment4004" headers="r39c1-t10 r1c2-t10">
<p>Directs the <code>loadjava</code> tool to display detailed status messages while running. Use the <code>-verbose</code> option to learn when the <code>loadjava</code> tool does not load a file, because it matches a digest table entry.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r40c1-t10" headers="r1c1-t10">
<p><code>-jarsasdbobjects</code></p>
</td>
<td class="cellalignment4004" headers="r40c1-t10 r1c2-t10">
<p>Indicates that JARs processed by the current <code>loadjava</code> tool command are to be stored in the database as database resident JARs.<a id="sthref695" href="#sthref695" onclick="footdisplay(2,&#34;If you load a JAR file in this manner, then you \u003cspan class=\&#34;italic\&#34;\u003ecan\u003c/span\u003e use it for resolution or execution.&#34;)"><sup class="tablefootnote">Foot&nbsp;2&nbsp;</sup></a></p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r41c1-t10" headers="r1c1-t10">
<p><code>-prependjarnames</code></p>
</td>
<td class="cellalignment4004" headers="r41c1-t10 r1c2-t10">
<p>Is used with the <code>-jarsasdbobjects</code> option. This option enables classes with the same names coming from different JARs to coexist in the same schema. It does this by prefixing a version of the name of the JAR to the class name to produce a unique name for the database object.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>If you load a JAR file in this manner, then you <span class="italic">cannot</span> use it for resolution or execution.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;2&nbsp;</sup>If you load a JAR file in this manner, then you <span class="italic">can</span> use it for resolution or execution.</p>
</div>
<!-- class="sect2" -->
<a id="CACDCGCC"></a>
<div id="JJDEV13420" class="sect2">
<h3 class="sect2">Argument Details</h3>
<p>This section describes the details of some of the <code>loadjava</code> tool arguments whose behavior is more complex than the summary descriptions contained in <a href="#CACECBAH">Table 12-2</a>.</p>
<p class="subhead2"><a id="JJDEV13421"></a><a id="sthref696"></a>File Names</p>
<p>You can specify as many <code>.class</code>, <code>.java</code>, <code>.sqlj</code>, <code>.jar</code>, <code>.zip</code>, and resource files as you want and in any order. If you specify a JAR or ZIP file, then the <code>loadjava</code> tool processes the files in the JAR or ZIP. There is no JAR or ZIP schema object. If a JAR or ZIP contains another JAR or ZIP, the <code>loadjava</code> tool does not process them.</p>
<p>The best way to load files is to put them in a JAR or ZIP and then load the archive. Loading archives avoids the resource schema object naming complications. If you have a JAR or ZIP that works with the Java Development Kit (JDK), then you can be sure that loading it with the <code>loadjava</code> tool will also work, without having to learn anything about resource schema object naming.</p>
<p>Schema object names are different from file names, and the <code>loadjava</code> tool names different types of schema objects differently. Because class files are self-identifying, the mapping of class file names to schema object names done by the <code>loadjava</code> tool is invisible to developers. Source file name mapping is also invisible to developers. The <code>loadjava</code> tool gives the schema object the fully qualified name of the first class defined in the file. JAR and ZIP files also contain the names of their files.</p>
<p>However, resource files are not self identifying. The <code>loadjava</code> tool generates Java resource schema object names from the literal names you supply as arguments. Because classes use resource schema objects and the correct specification of resources is not always intuitive, it is important that you specify resource file names correctly on the command line.</p>
<p>The perfect way to load individual resource files correctly is to run the <code>loadjava</code> tool from the top of the package tree and specify resource file names relative to that directory.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The top of the package tree is the directory you would name in a <code>CLASSPATH</code>.</div>
<p>If you do not want to follow this rule, then observe the details of resource file naming that follow. When you load a resource file, the <code>loadjava</code> tool generates the resource schema object name from the resource file name, as literally specified on the command line. For example, if you type:</p>
<pre>% cd /home/HR/javastuff
% loadjava options alpha/beta/x.properties
% loadjava options /home/HR/javastuff/alpha/beta/x.properties
</pre>
<p>Although you have specified the same file with a relative and an absolute path name, the <code>loadjava</code> tool creates two schema objects, <code>alpha/beta/x.properties</code> and <code>ROOT/home/HR/javastuff/alpha/beta/x.properties</code>. The name of the resource schema object is generated from the file name as entered.</p>
<p>Classes can refer to resource files relatively or absolutely. To ensure that the <code>loadjava</code> tool and the class loader use the same name for a schema object, enter the name on the command line, which the class passes to <code>getResource()</code> or <code>getResourceAsString()</code>.</p>
<p>Instead of remembering whether classes use relative or absolute resource names and changing directories so that you can enter the correct name on the command line, you can load resource files in a JAR, as follows:</p>
<pre>% cd /home/HR/javastuff
% jar -cf alpharesources.jar alpha/*.properties
% loadjava options alpharesources.jar
</pre>
<p>To simplify the process further, place both the class and resource files in a JAR, which makes the following invocations equivalent:</p>
<pre>% loadjava options alpha.jar
% loadjava options /home/HR/javastuff/alpha.jar
</pre>
<p>The preceding <code>loadjava</code> tool commands imply that you can use any path name to load the contents of a JAR file. Even if you run the redundant commands, the <code>loadjava</code> tool would realize from the digest table that it need not load the files twice. This implies that reloading JAR files is not as time-consuming as it might seem, even when few files have changed between the different invocations of the <code>loadjava</code> tool.</p>
<p class="subhead2"><a id="JJDEV13422"></a>definer</p>
<pre>{-definer | -d}
</pre>
<p>This option is identical to the definer rights in stored procedures and is conceptually similar to the UNIX <code>setuid</code> facility. However, you can apply the <code>-definer</code> option to individual classes, in contrast to <code>setuid</code>, which applies to a complete program. Moreover, different definers may have different privileges. Because an application can consist of many classes, you must apply <code>-definer</code> with care to achieve the desired results. That is, classes run with the privileges they need, but no more.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="chtwo.htm#BABGIEBA">&#34;Controlling the Current User&#34;</a></div>
<p class="subhead2"><a id="JJDEV13423"></a>noverify</p>
<pre>[-noverify]
</pre>
<p>This option causes the classes to be loaded without bytecode verification. <code>oracle.aurora.security.JServerPermission(Verifier)</code> must be granted to run this option. Also, this option must be used in conjunction with <code>-resolve</code>.</p>
<p>The verifier ensures that incorrectly formed Java binaries cannot be loaded for running on the server. If you know that the JAR or classes you are loading are valid, then the use of this option will speed up the process associated with the <code>loadjava</code> tool. Some Oracle Database-specific optimizations for interpreted performance are put in place during the verification process. Therefore, the interpreted performance of your application may be adversely affected by using this option.</p>
<p class="subhead2"><a id="JJDEV13424"></a>optionfile</p>
<pre>[-optionfile &lt;file&gt;]
</pre>
<p>This option enables you to specify a file with different options that you can specify with the <code>loadjava</code> tool. This file is read and processed by the <code>loadjava</code> tool before any other <code>loadjava</code> tool options are processed. The file can contain one or more lines, each of which contains a pattern and a sequence of options. Each line must be terminated by a newline character (<code>\n</code>).</p>
<p>For each file or JAR entry that is processed by the <code>loadjava</code> tool, the long name of the schema object that is going to be created is checked against the patterns. Patterns can end in a wildcard (<code>*</code>) to indicate an arbitrary sequence of characters, or they must match the name exactly.</p>
<p>Options to be applied to matching Java schema objects are supplied on the rest of the line. Options are appended to the command-line options, they do not replace them. In case more than one line matches a name, the matching rows are sorted by length of pattern, with the shortest first, and the options from each row are appended. In general, the <code>loadjava</code> tool options are not cumulative. Rather, later options override earlier ones. This means that an option specified on a line with a longer pattern will override a line with a shorter pattern.</p>
<p>This file is parsed by a <code>java.io.StreamTokenizer</code>.</p>
<p>You can use Java comments in this file. A line comment begins with a <code>#</code>. Empty lines are ignored. The quote character is a double quote (<code>&#34;</code>). That is, options containing spaces should be surrounded by double quotes. Certain options, such as <code>-user</code> and <code>-verbose</code>, affect the overall processing of the <code>loadjava</code> tool and not the actions performed for individual Java schema objects. Such options are ignored if they appear in an option file.</p>
<p>To help package applications, the <code>loadjava</code> tool looks for the <code>META-INF/loadjava-options</code> entry in each JAR it processes. If it finds such an entry, then it treats it as an options file that is applied for all other entries in the JAR file. However, the <code>loadjava</code> tool does some processing on entries in the order in which they occur in the JAR.</p>
<p>If the <code>loadjava</code> tool has partially processed entities before it processes <code>META-INF/loadjava-options</code>, then it attempts to patch up the schema object to conform to the applicable options. For example, the <code>loadjava</code> tool alters classes that were created with invoker rights when they should have been created with definer rights. The fix for <code>-noaction</code> is to drop the created schema object. This yields the correct effect, except that if a schema object existed before the <code>loadjava</code> tool started, then it would have been dropped.</p>
<p class="subhead2"><a id="JJDEV13425"></a>optiontable</p>
<pre>[-optiontable table_name]
</pre>
<p>This option enables you to specify the properties of classes persistently. No mechanism is provided for loading the table. The table name must contain three character columns, PATTERN, OPTION, and VALUE. The value of PATTERN is interpreted in the same way as a pattern in an option file. The other two columns are the same as the corresponding command-line options and take an operand. Suppose, you create a table FOO with the following command:</p>
<pre>create table foo (pattern varchar2(2000), option_name varchar2(2000), value varchar2(2000));
</pre>
<p>Then, you can use the <code>optiontable</code> option in the following way:</p>
<pre>loadjava -optiontable foo myjar.jar
</pre>
<p>For options that do not take an operand, the VALUE column should be NULL. The rows are processed in the same way as the lines of an option file are processed. To determine the options for a given schema object, the rows are examined and for any match the option is appended to the list of options. If two rows have the same pattern and contradictory options, such as -synonym and -nosynonym, then it is unspecified which will prevail. If two rows have the same pattern and option columns, then it is unspecified which VALUE will prevail.</p>
<p class="subhead2"><a id="JJDEV13426"></a>publish</p>
<pre>[-publish &lt;package&gt;]
[-pubmain &lt;number&gt;]
</pre>
<p>The publishing options cause the <code>loadjava</code> tool to create PL/SQL wrappers for methods contained in the processed classes. Typically, a user wants to publish wrappers for only a few classes in a JAR. These options are most useful when specified in an option file.</p>
<p>To be eligible for publication, the method must satisfy the following:</p>
<ul>
<li>
<p>It must be a member of a <code>public</code> class.</p>
</li>
<li>
<p>It must be declared <code>public</code> and <code>static</code>.</p>
</li>
<li>
<p>The method signature should satisfy the following rules so that it can be mapped:</p>
<ul>
<li>
<p>Java arithmetic types for arguments and return values are mapped to <code>NUMBER</code>.</p>
</li>
<li>
<p><code>char</code> as an argument and return type is mapped to <code>VARCHAR</code>.</p>
</li>
<li>
<p><code>java.lang.String</code> as an argument and return type is mapped to <code>VARCHAR</code>.</p>
</li>
<li>
<p>If the only argument of the method has type <code>java.lang.String</code>, special rules apply, as listed in the <code>-pubmain</code> option description.</p>
</li>
<li>
<p>If the return type is <code>void</code>, then a procedure is created.</p>
</li>
<li>
<p>If the return type is an arithmetic, <code>char</code>, or <code>java.lang.String</code> type, then a function is created.</p>
</li>
</ul>
</li>
</ul>
<p>Methods that take arguments or return types that are not covered by the preceding rules are not eligible. No provision is made for <code>OUT</code> and <code>IN OUT</code> SQL arguments, <code>OBJECT</code> types, and many other SQL features.</p>
<p class="subhead2"><a id="JJDEV13427"></a>resolve</p>
<pre>{-resolve | -r}
</pre>
<p>Use <code>-resolve</code> to force the <code>loadjava</code> tool to compile and resolve a class that has previously been loaded. It is not necessary to specify <code>-force</code>, because resolution is performed after, and independent of, loading.</p>
<p class="subhead2"><a id="JJDEV13428"></a>resolver</p>
<pre>{-resolver | -R} <span class="italic">resolver_specification</span>
</pre>
<p>This option associates an explicit resolver specification with the class schema objects that the <code>loadjava</code> tool creates or replaces.</p>
<p>A resolver specification consists of one or more items, each of which consists of a name specification and a schema specification expressed in the following syntax:</p>
<pre>&#34;((name_spec schema_spec) [(name_spec schema_spec)] ...)&#34;
</pre>
<p>A name specification is similar to a name in an <code>import</code> statement. It can be a fully qualified Java class name or a package name whose final element is the wildcard character asterisk (<code>*</code>) or simply an asterisk (<code>*</code>). However, the elements of a name specification must be separated by slashes (<code>/</code>), not periods (<code>.</code>). For example, the name specification <code>a/b/*</code> matches all classes whose names begin with <code>a.b</code>. The special name <code>*</code> matches all class names.</p>
<p>A schema specification can be a schema name or the wildcard character dash (<code>-</code>). The wildcard does not identify a schema, but directs the resolve operation not to mark a class invalid, because a reference to a matching name cannot be resolved. Use dash (<code>-</code>) when you must test a class that refers to a class you cannot or do not want to load. For example, GUI classes that a class refers to but does not call, because when run in the server there is no GUI.</p>
<p>When looking for a schema object whose name matches the name specification, the resolution operation looks in the schema named by the partner schema specification.</p>
<p>The resolution operation searches schemas in the order in which the resolver specification lists them. For example,</p>
<pre>-resolver &#39;((* HR) (* PUBLIC))&#39;
</pre>
<p>This implies that search for any reference first in <code>HR</code> and then in <code>PUBLIC</code>. If a reference is not resolved, then mark the referring class invalid and display an error message.</p>
<p>Consider the following example:</p>
<pre>-resolver &#34;((* HR) (* PUBLIC) (my/gui/* -))&#34;
</pre>
<p>This implies that search for any reference first in <code>HR</code> and then in <code>PUBLIC</code>. If the reference is to a class in the package <code>my.gui</code> and is not found, then mark the referring class valid and do not display an error. If the reference is not to a class in <code>my.gui</code> and is not found, then mark the referring class invalid and produce an error message.</p>
<p class="subhead2"><a id="JJDEV13429"></a>user</p>
<pre>{-user | -u} <span class="italic">user</span>/<span class="italic">password</span>[@<span class="italic">database_url</span>]
</pre>
<p>By default, the <code>loadjava</code> tool loads into the logged in schema specified by the <code>-user</code> option. You use the <code>-schema</code> option to specify a different schema to load into. This does not require you to log in to that schema, but does require that you have sufficient permissions to alter the schema.</p>
<p>The permissible forms of <code>@</code><code><span class="codeinlineitalic">database_url</span></code> depend on whether you specify <code>-oci</code> or <code>-thin</code>, as described:</p>
<ul>
<li>
<p><code>-oci:@</code><code><span class="codeinlineitalic">database_url</span></code> is optional. If you do not specify, then the <code>loadjava</code> tool uses the user&#39;s default database. If specified, <code><span class="codeinlineitalic">database_url</span></code> can be a TNS name or an Oracle Net Services name-value list.</p>
</li>
<li>
<p><code>-thin:@</code><code><span class="codeinlineitalic">database_url</span></code> is required. The format is <code><span class="codeinlineitalic">host</span></code><code>:</code><code><span class="codeinlineitalic">lport</span></code><code>:</code><code><span class="codeinlineitalic">SID</span></code>.</p>
<p>where:</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">host</span></code> is the name of the computer running the database.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">lport</span></code> is the listener port that has been configured to listen for Oracle Net Services connections. In a default installation, it is <code>5521</code>.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">SID</span></code> is the database instance identifier. In a default installation, it is <code>ORCL</code>.</p>
</li>
</ul>
</li>
</ul>
<p>The following are examples of the <code>loadjava</code> tool commands:</p>
<ul>
<li>
<p>Connect to the default database with the default OCI driver, load the files in a JAR into the <code>TEST</code> schema, and then resolve them:</p>
<pre>loadjava -u joe -resolve -schema TEST ServerObjects.jar
Password: <span class="italic">password</span>
</pre></li>
<li>
<p>Connect with the JDBC Thin driver, load a class and a resource file, and resolve each class:</p>
<pre>loadjava -thin -u HR@dbhost:5521:orcl \
  -resolve alpha.class beta.props
Password: <span class="italic">password</span>
</pre></li>
<li>
<p>Add Betty and Bob to the users who can run <code>alpha.class</code>:</p>
<pre>loadjava -thin -schema test -u HR@localhost:5521:orcl \
  -grant BETTY,BOB alpha.class
Password: password
<a id="sthref697"></a>
</pre></li>
</ul>
<p class="subhead2"><a id="JJDEV13430"></a>jarsasdbobjects</p>
<p>This option indicates that JARs processed by the current <code>loadjava</code> tool are to be stored in the database along with the classes they contain, and knowledge of the association between the classes and the JAR is to be retained in the database. In other words, this argument indicates that the JARs processed by the current <code>loadjava</code> tool are to be stored in the database as database resident JARs.</p>
<p class="subhead2"><a id="JJDEV13431"></a>prependjarnames</p>
<p>This option is used with the <code>-jarsasdbobjects</code> option. This option enables classes with the same names coming from different JARs to coexist in the same schema.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CACHIDAG"></a>
<div id="JJDEV13432" class="sect1">
<h2 class="sect1">The <a id="sthref698"></a>dropjava Tool</h2>
<p>The <code>dropjava</code> tool is the converse of the <code>loadjava</code> tool. It transforms command-line file names and JAR or ZIP file contents to schema object names, drops the schema objects, and deletes their corresponding digest table rows. You can enter <code>.java</code>, <code>.class</code>, <code>.sqlj</code>, <code>.ser</code>, <code>.zip</code>, <code>.jar</code>, and resource file names on the command line and in any order.</p>
<p>Alternatively, you can specify a schema object name directly to the <code>dropjava</code> tool. A command-line argument that does not end in <code>.jar</code>, <code>.zip</code>, <code>.class</code>, <code>.java</code>, or <code>.sqlj</code> is presumed to be a schema object name. If you specify a schema object name that applies to multiple schema objects, then all will be removed.</p>
<p>Dropping a class invalidates classes that depend on it, recursively cascading upwards. Dropping a source drops classes derived from it.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You must remove Java schema objects in the same way that you first loaded them. If you load a <code>.sqlj</code> source file and translate it in the server, then you must run the <code>dropjava</code> tool on the same source file. If you translate on a client and load classes and resources directly, then run the <code>dropjava</code> tool on the same classes and resources.</div>
<p>You can run the <code>dropjava</code> tool either from the command line or by using the <code>dropjava</code> method in the <code>DBMS_JAVA</code> class. To run the <code>dropjava</code> tool from within your Java application, use the following command:</p>
<pre>call dbms_java.dropjava(&#39;... options...&#39;);
</pre>
<p>The options are the same as specified on the command line. Separate each option with a space. Do not separate the options using commas. The only exception to this is the <code>-resolver</code> option. The connection is always made to the current session. Therefore, you cannot specify another user name through the <code>-user</code> option.</p>
<p>For <code>-resolver</code>, you should specify all other options first, a comma (<code>,</code>), then the <code>-resolver</code> option with its definition. Do not specify the <code>-thin</code>, <code>-oci</code>, <code>-user</code>, and <code>-password</code> options, because they relate to the database connection for the <code>loadjava</code> tool. The output is directed to <code>stderr</code>. Set <code>serveroutput</code> on and call <code>dbms_java.set_output</code>, as appropriate.</p>
<p>This section covers the following topics:</p>
<ul>
<li>
<p><a href="#CACGAJGA">Syntax</a></p>
</li>
<li>
<p><a href="#CACDHAHI">Argument Summary</a></p>
</li>
<li>
<p><a href="#CACCAJGA">Argument Details</a></p>
</li>
<li>
<p><a href="#CACDJIII">List Based Deletion</a></p>
</li>
<li>
<p><a href="#CACDIJAG">Dropping Resources</a></p>
</li>
</ul>
<a id="CACGAJGA"></a>
<div id="JJDEV13433" class="sect2">
<h3 class="sect2">Syntax</h3>
<p>The syntax of the <code>dropjava</code> tool command is:</p>
<pre>dropjava [options] {<span class="italic">file</span>.java | <span class="italic">file</span>.class | <span class="italic">file</span>.sqlj | 
<span class="italic">file</span>.jar | <span class="italic">file</span>.zip | <span class="italic">resourcefile</span>} ...
  -u | -user <span class="italic">user</span>/[<span class="italic">password</span>][@<span class="italic">database</span>]
  [-genmissingjar <span class="italic">JARfile</span>]
  [-jarasresource]
  [-o | -oci | -oci8]
  [-optionfile <span class="italic">file</span>]
  [-optiontable <span class="italic">table_name</span>]
  [-S | -schema <span class="italic">schema</span>]
  [-stdout]
  [-s | -synonym]
  [-t | -thin]
  [-v | -verbose]
 [-list]
[-listfile]
</pre></div>
<!-- class="sect2" -->
<a id="CACDHAHI"></a>
<div id="JJDEV13434" class="sect2">
<h3 class="sect2">Argument Summary</h3>
<p><a href="#CACIHECF">Table 12-3</a> summarizes the <code>dropjava</code> tool arguments.</p>
<div id="JJDEV13435" class="tblformal">
<p class="titleintable"><a id="sthref699"></a><a id="CACIHECF"></a>Table 12-3 dropjava Argument Summary</p>
<table class="cellalignment4009" title="dropjava Argument Summary" summary="table" dir="ltr">
<thead>
<tr class="cellalignment3996">
<th class="cellalignment4003" id="r1c1-t14">Argument</th>
<th class="cellalignment4003" id="r1c2-t14">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r2c1-t14" headers="r1c1-t14">
<p><code>-user</code></p>
</td>
<td class="cellalignment4004" headers="r2c1-t14 r1c2-t14">
<p>Specifies a user name, password, and optional database connection string. The files will be dropped from this database instance.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r3c1-t14" headers="r1c1-t14">
<p><code><span class="codeinlineitalic">filenames</span></code></p>
</td>
<td class="cellalignment4004" headers="r3c1-t14 r1c2-t14">
<p>Specifies any number and combination of <code>.java</code>, <code>.class</code>, <code>.sqlj</code>, <code>.ser</code>, <code>.jar</code>, <code>.zip</code>, and resource file names.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r4c1-t14" headers="r1c1-t14">
<p><code>-genmissingjar</code> <code><span class="codeinlineitalic">JARfile</span></code></p>
</td>
<td class="cellalignment4004" headers="r4c1-t14 r1c2-t14">
<p>Treats the operand of this option as a file to be processed.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r5c1-t14" headers="r1c1-t14">
<p><code>-jarasresource</code></p>
</td>
<td class="cellalignment4004" headers="r5c1-t14 r1c2-t14">
<p>Drops the whole JAR file, which was previously loaded as a resource.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r6c1-t14" headers="r1c1-t14">
<p><code>-oci | -oci8</code></p>
</td>
<td class="cellalignment4004" headers="r6c1-t14 r1c2-t14">
<p>Directs the <code>dropjava</code> tool to connect with the database using the OCI JDBC driver. The <code>-oci</code> and the <code>-thin</code> options are mutually exclusive. If neither is specified, then the <code>-oci</code> option is used by default. Choosing the <code>-oci</code> option implies the form of the <code>-user</code> value.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r7c1-t14" headers="r1c1-t14">
<p><code>-optionfile</code> <code><span class="codeinlineitalic">file</span></code></p>
</td>
<td class="cellalignment4004" headers="r7c1-t14 r1c2-t14">
<p>Has the same usage as for the <code>loadjava</code> tool.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r8c1-t14" headers="r1c1-t14">
<p><code>-optiontable</code> <code><span class="codeinlineitalic">table_name</span></code></p>
</td>
<td class="cellalignment4004" headers="r8c1-t14 r1c2-t14">
<p>Has the same usage as for <code>loadjava</code>.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r9c1-t14" headers="r1c1-t14">
<p><code>-schema</code> <code><span class="codeinlineitalic">schema</span></code></p>
</td>
<td class="cellalignment4004" headers="r9c1-t14 r1c2-t14">
<p>Designates the schema from which schema objects are dropped. If not specified, then the logon schema is used. To drop a schema object from a schema that is not your own, you need the <code>DROP ANY PROCEDURE</code> and <code>UPDATE ANY TABLE</code> privileges.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r10c1-t14" headers="r1c1-t14">
<p><code>-stdout</code></p>
</td>
<td class="cellalignment4004" headers="r10c1-t14 r1c2-t14">
<p>Causes the output to be directed to <code>stdout</code>, rather than to <code>stderr</code>.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r11c1-t14" headers="r1c1-t14">
<p><code>-synonym</code></p>
</td>
<td class="cellalignment4004" headers="r11c1-t14 r1c2-t14">
<p>Drops a <code>PUBLIC</code> synonym that was created with the <code>loadjava</code> tool.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r12c1-t14" headers="r1c1-t14">
<p><code>-thin</code></p>
</td>
<td class="cellalignment4004" headers="r12c1-t14 r1c2-t14">
<p>Directs the <code>dropjava</code> tool to communicate with the database using the JDBC Thin driver. Choosing the <code>-thin</code> option implies the form of the <code>-user</code> value.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r13c1-t14" headers="r1c1-t14">
<p><code>-verbose</code></p>
</td>
<td class="cellalignment4004" headers="r13c1-t14 r1c2-t14">
<p>Directs the <code>dropjava</code> tool to emit detailed status messages while running.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r14c1-t14" headers="r1c1-t14">
<p><code>&ndash;list</code></p>
</td>
<td class="cellalignment4004" headers="r14c1-t14 r1c2-t14">
<p>Drops the classes, Java source, or resources listed on the command line without them being present on the client machine or server machine.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r15c1-t14" headers="r1c1-t14">
<p><code>-listfile</code></p>
</td>
<td class="cellalignment4004" headers="r15c1-t14 r1c2-t14">
<p>Reads a file and drops the classes, Java source, or resources listed in the file without them being present on the client machine or server machine.The file contains the internal representation of the complete class, Java source, or resource name one per line.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<a id="CACCAJGA"></a>
<div id="JJDEV13436" class="sect2">
<h3 class="sect2">Argument Details</h3>
<p>This section describes a few of the <code>dropjava</code> tool arguments, which are complex.</p>
<p class="subhead2"><a id="JJDEV13437"></a><a id="sthref700"></a>File Names</p>
<p>The <code>dropjava</code> tool interprets most file names as the <code>loadjava</code> tool does:</p>
<ul>
<li>
<p><code>.class</code> files</p>
<p>Finds the class name in the file and drops the corresponding schema object.</p>
</li>
<li>
<p><code>.java</code> and <code>.sqlj</code> files</p>
<p>Finds the first class name in the file and drops the corresponding schema object.</p>
</li>
<li>
<p><code>.jar</code> and <code>.zip</code> files</p>
<p>Processes the archived file names as if they had been entered on the command line.</p>
</li>
</ul>
<p>If a file name has another extension or no extension, then the <code>dropjava</code> tool interprets the file name as a schema object name and drops all source, class, and resource objects that match the name.</p>
<p>If the <code>dropjava</code> tool encounters a file name that does not match a schema object, then it displays a message and processes the remaining file names.</p>
<p class="subhead2"><a id="JJDEV13438"></a>user</p>
<pre>{-user | -u} <span class="italic">user</span>/<span class="italic">password</span>[@<span class="italic">database</span>]
</pre>
<p>The permissible forms of <code>@</code><code><span class="codeinlineitalic">database</span></code> depend on whether you specify <code>-oci</code> or <code>-thin</code>:</p>
<ul>
<li>
<p><code>-oci:@</code><code><span class="codeinlineitalic">database</span></code> is optional. If you do not specify, then the <code>dropjava</code> tool uses the user&#39;s default database. If specified, then <code><span class="codeinlineitalic">database</span></code> can be a TNS name or an Oracle Net Services name-value list.</p>
</li>
<li>
<p><code>-thin:@</code><code><span class="codeinlineitalic">database</span></code> is required. The format is <code><span class="codeinlineitalic">host</span></code><code>:</code><code><span class="codeinlineitalic">lport</span></code><code>:</code><code><span class="codeinlineitalic">SID</span></code>.</p>
<p>where:</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">host</span></code> is the name of the computer running the database.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">lport</span></code> is the listener port that has been configured to listen for Oracle Net Services connections. In a default installation, it is <code>5521</code>.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">SID</span></code> is the database instance identifier. In a default installation, it is <code>ORCL</code>.</p>
</li>
</ul>
</li>
</ul>
<p>The following are examples of the <code>dropjava</code> tool command:</p>
<ul>
<li>
<p>Drop all schema objects in the <code>TEST</code> schema in the default database that were loaded from <code>ServerObjects.jar</code>:</p>
<pre>dropjava -u HR -schema TEST ServerObjects.jar
Password: <span class="italic">password</span>
</pre></li>
<li>
<p>Connect with the JDBC Thin driver, then drop a class and a resource file from the user&#39;s schema:</p>
<pre>dropjava -thin -u HR@dbhost:5521:orcl alpha.class beta.props
Password: <span class="italic">password</span>
</pre></li>
</ul>
<p class="subhead2"><a id="CACDJIII"></a><a id="JJDEV13439"></a>List Based Deletion</p>
<p>Earlier versions of the <code>dropjava</code> tool required that the classes, JARs, source, and resources be present on the machine, where the client or server side utility is running. The current version of <code>dropjav</code>a has an option that enables you to drop classes, resources, or sources based on a list of classes, which may not exist on the client machine or the server machine. This list can be either on the command line or in a text file. For example:</p>
<pre>dropjava &ndash;list &ndash;u HR &ndash;v this.is.my.class this.is.your.class
Password: <span class="italic">password</span>
</pre>
<p>The preceding command drops the classes <code>this.is.my.class</code> and <code>this.is.your.class</code> listed on the command line without them being present on the client machine or server machine.</p>
<pre>dropjava &ndash;listfile my.list &ndash;u HR &ndash;s &ndash;v
Password: <span class="italic">password</span>
</pre>
<p>The preceding command drops classes, resources, or sources and their synonyms based on a list of classes listed in <code>my.list</code> and displays verbosely.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code>&#39;-install&#39;</code> flag ignores the loading and dropping of system owned schema objects that cannot be modified.
<p>These schema objects are the runtime classes, and resources provided by the <code>CREATE JAVA COMMAND</code>.</p>
</div>
</div>
<!-- class="sect2" -->
<a id="CACDIJAG"></a>
<div id="JJDEV13440" class="sect2">
<h3 class="sect2">Dropping Resources</h3>
<p>Care must be taken if you are removing a resource that was loaded directly into the server. This includes profiles, if you translated them on the client without using the <code>-ser2class</code> option. When dropping source or class schema objects or resource schema objects that were generated by the server-side SQLJ translator, the schema objects will be found according to the package specification in the applicable <code>.sqlj</code> source file. However, the fully qualified schema object name of a resource that was generated on the client and loaded directly into the server depends on path information in the <code>.jar</code> file or that specified on the command line at the time you loaded it. If you use a <code>.jar</code> file to load resources and use the same <code>.jar</code> file to remove resources, then there will be no problem. However, if you use the command line to load resources, then you must be careful to specify the same path information when you run the <code>dropjava</code> tool to remove the resources.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CACDIEGD"></a>
<div id="JJDEV13441" class="sect1">
<h2 class="sect1">The <a id="ABC2127041"></a>ojvmjava Tool</h2>
<p>The <code>ojvmjava</code> tool is an interactive interface to the session <a id="sthref701"></a><a id="sthref702"></a>namespace of a database instance. You specify database connection arguments when you start the <code>ojvmjava</code> tool. It then presents you with a prompt to indicate that it is ready for commands.</p>
<p>The shell can launch an executable, that is, a class with a <code>static main()</code> method. This is done either by using the command-line interface or by calling a database resident class. If you call a database resident class, the executable must be loaded with the <code>loadjava</code> tool.</p>
<p>This section covers the following topics:</p>
<ul>
<li>
<p><a href="#CACBGAAC">Syntax</a></p>
</li>
<li>
<p><a href="#CACIEAAC">Argument Summary</a></p>
</li>
<li>
<p><a href="#CACFBHDB">Example</a></p>
</li>
<li>
<p><a href="#CACHCGJE">Functionality</a></p>
</li>
</ul>
<a id="CACBGAAC"></a>
<div id="JJDEV13442" class="sect2">
<h3 class="sect2">Syntax</h3>
<p>The syntax of the <code>ojvmjava</code> tool command is:</p>
<pre>ojvmjava {-user <span class="italic">user</span>[/<span class="italic">password</span>@<span class="italic">database</span> ] [options]
  [@<span class="italic">filename</span>]
  [-batch]
  [-c | -command <span class="italic">command</span> <span class="italic">args</span>]
  [-debug]
  [-d | -database <span class="italic">conn_string</span>]
  [-fileout <span class="italic">filename</span>]
  [-o | -oci | -oci8]
  [-oschema <span class="italic">schema</span>]
  [-t | -thin]
  [-version | -v]
 -runjava [server_file_system]
 -jdwp port [host]
 -verbose
</pre></div>
<!-- class="sect2" -->
<a id="CACIEAAC"></a>
<div id="JJDEV13443" class="sect2">
<h3 class="sect2">Argument Summary</h3>
<p><a href="#CACFIIDF">Table 12-4</a> summarizes the <code>ojvmjava</code> tool arguments.</p>
<div id="JJDEV13444" class="tblformal">
<p class="titleintable"><a id="sthref703"></a><a id="CACFIIDF"></a>Table 12-4 ojvmjava Argument Summary</p>
<table class="cellalignment4009" title="ojvmjava Argument Summary" summary="table" dir="ltr">
<thead>
<tr class="cellalignment3996">
<th class="cellalignment4003" id="r1c1-t16">Argument</th>
<th class="cellalignment4003" id="r1c2-t16">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r2c1-t16" headers="r1c1-t16">
<p><code>-user | -u</code></p>
</td>
<td class="cellalignment4004" headers="r2c1-t16 r1c2-t16">
<p>Specifies user name for connecting to the database. This name is not case-sensitive. The name will always be converted to uppercase. If you provide the database information, then the default syntax used is OCI. You can also specify the default database.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r3c1-t16" headers="r1c1-t16">
<p><code>-password | -p</code></p>
</td>
<td class="cellalignment4004" headers="r3c1-t16 r1c2-t16">
<p>Specifies the password for connecting to the database.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r4c1-t16" headers="r1c1-t16">
<p><code>@</code><code><span class="codeinlineitalic">filename</span></code></p>
</td>
<td class="cellalignment4004" headers="r4c1-t16 r1c2-t16">
<p>Specifies a script file that contains the <code>ojvmjava</code> tool commands to be run.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r5c1-t16" headers="r1c1-t16">
<p><code>-batch</code></p>
</td>
<td class="cellalignment4004" headers="r5c1-t16 r1c2-t16">
<p>Disables all messages displayed to the screen. No help messages or prompts will be displayed. Only responses to commands entered are displayed.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r6c1-t16" headers="r1c1-t16">
<p><code>-command</code></p>
</td>
<td class="cellalignment4004" headers="r6c1-t16 r1c2-t16">
<p>Runs the desired command. If you do not want to run the <code>ojvmjava</code> tool in interpretive mode, but only want to run a single command, then run it with this option followed by a string that contains the command and the arguments. Once the command runs, the <code>ojvmjava</code> tool exits.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r7c1-t16" headers="r1c1-t16">
<p><code>-debug</code></p>
</td>
<td class="cellalignment4004" headers="r7c1-t16 r1c2-t16">
<p>Displays debugging information.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r8c1-t16" headers="r1c1-t16">
<p><code>-d | -database</code> <code><span class="codeinlineitalic">conn_string</span></code></p>
</td>
<td class="cellalignment4004" headers="r8c1-t16 r1c2-t16">
<p>Provides a database connection string.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r9c1-t16" headers="r1c1-t16">
<p><code>-fileout</code> <code><span class="codeinlineitalic">file</span></code></p>
</td>
<td class="cellalignment4004" headers="r9c1-t16 r1c2-t16">
<p>Redirects output to the provided file.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r10c1-t16" headers="r1c1-t16">
<p><code>-o | -oci | -oci8</code></p>
</td>
<td class="cellalignment4004" headers="r10c1-t16 r1c2-t16">
<p>Uses the JDBC OCI driver. The OCI driver is the default. This flag specifies the syntax used in either the <code>@</code><code><span class="codeinlineitalic">database</span></code> or <code>-database</code> option.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r11c1-t16" headers="r1c1-t16">
<p><code>-o schema</code> <code><span class="codeinlineitalic">schema</span></code></p>
</td>
<td class="cellalignment4004" headers="r11c1-t16 r1c2-t16">
<p>Uses this schema for class lookup.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r12c1-t16" headers="r1c1-t16">
<p><code>-t | -thin</code></p>
</td>
<td class="cellalignment4004" headers="r12c1-t16 r1c2-t16">
<p>Specifies that the database syntax used is for the JDBC Thin driver. The database connection string must be of the form <code><span class="codeinlineitalic">host</span></code><code>:</code><code><span class="codeinlineitalic">port</span></code><code>:</code><code><span class="codeinlineitalic">SID</span></code> or an Oracle Net Services name-value list.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r13c1-t16" headers="r1c1-t16">
<p><code>-verbose</code></p>
</td>
<td class="cellalignment4004" headers="r13c1-t16 r1c2-t16">
<p>Displays the connection information.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r14c1-t16" headers="r1c1-t16">
<p><code>-version</code></p>
</td>
<td class="cellalignment4004" headers="r14c1-t16 r1c2-t16">
<p>Shows the version.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r15c1-t16" headers="r1c1-t16">
<p><code>-runjava</code></p>
</td>
<td class="cellalignment4004" headers="r15c1-t16 r1c2-t16">
<p>Uses <code>DBMS_JAVA.runjava</code> when executing Java commands. With no argument, interprets <code>-classpath</code> as referring to the client file system. With argument <code>server_file_system</code> interprets <code>-classpath</code> as referring to the file system on which Oracle server is running, as <code>DBMS_JAVA.runjava</code> typically does.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r16c1-t16" headers="r1c1-t16">
<p><code>-jdwp</code></p>
</td>
<td class="cellalignment4004" headers="r16c1-t16 r1c2-t16">
<p>Makes the connection listen for a debugger connection on the indicated port and host. The default value of host is <code>localhost.</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<a id="CACFBHDB"></a>
<div id="JJDEV13445" class="sect2">
<h3 class="sect2">Example</h3>
<p>Open a shell on the session namespace of the database <code>orcl</code> on listener port <code>2481</code> on the host <code>dbserver</code>, as follows:</p>
<pre>ojvmjava -thin -user HR@dbserver:2481:orcl
Password: <span class="italic">password</span>
</pre></div>
<!-- class="sect2" -->
<a id="CACHCGJE"></a>
<div id="JJDEV13446" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Functionality</h3>
<p>The <code>ojvmjava</code> tool commands span several different types of functionality, which are grouped as follows:</p>
<ul>
<li>
<p><a href="#CACFJBDJ">ojvmjava Tool Command-Line Options</a></p>
</li>
<li>
<p><a href="#CACEJBAJ">Shell Commands</a></p>
</li>
</ul>
<a id="CACFJBDJ"></a>
<div id="JJDEV13447" class="sect3">
<h4 class="sect3">ojvmjava Tool Command-Line Options</h4>
<p>This section describes the following options available with the <code>ojvmjava</code> tool command:</p>
<ul>
<li>
<p><a href="#CACGEBDA">Scripting the ojvmjava Tool Commands in the @filename Option</a></p>
</li>
<li>
<p><a href="#CACCBGIA">-runjava</a></p>
</li>
<li>
<p><a href="#CACHDDEG">-jdwp</a></p>
</li>
</ul>
<p class="subhead2"><a id="CACGEBDA"></a><a id="JJDEV13449"></a>Scripting the ojvmjava Tool Commands in the @filename Option</p>
<p>This <code>@</code><code><span class="codeinlineitalic">filename</span></code> option designates a script file that contains one or more <code>ojvmjava</code> tool commands. The specified script file is located on the client. The <code>ojvmjava</code> tool reads the file and runs all commands on the designated server. In addition, because the script file is run on the server, any interaction with the operating system in the script file, such as redirecting output to a file or running another script, occurs on the server. If you direct the <code>ojvmjava</code> tool to run another script file, then this file must exist in <code>$ORACLE_HOME</code> on the server.</p>
<p>You must enter the <code>ojvmjava</code> tool command followed by any options and any expected input arguments. The script file contains the <code>ojvmjava</code> tool command followed by options and input parameters. The input parameters can be passed to the <code>ojvmjava</code> tool on the command line. The <code>ojvmjava</code> tool processes all known options and passes on any other options and arguments to the script file.</p>
<p>The following shows the contents of the script file, <code>execShell</code>:</p>
<pre>java myclass a b c
</pre>
<p>To run this file, use the following command:</p>
<pre>ojvmjava -user HR -thin -database dbserver:2481:orcl @commands
Password: <span class="italic">password</span>
</pre>
<p>The <code>ojvmjava</code> tool processes all options that it knows about and passes along any other input parameters to be used by the commands that exist within the script file. In this example, the parameters are passed to the <code>java</code> command in the script file.</p>
<p>You can add any comments in your script file using the hash sign (<code>#</code>). Comments are ignored by the <code>ojvmjava</code> tool. For example:</p>
<pre>#this whole line is ignored by ojvmjava
</pre>
<p class="subhead2"><a id="CACCBGIA"></a><a id="JJDEV13450"></a>-runjava</p>
<p>This option controls whether or not the <code>ojvmjava</code> tool shell command Java runs executable classes using the command-line interface or database resident classes. When the <code>-runjava</code> option is present the command-line interface is used. Otherwise, the executable must be a database resident class that was previously loaded with the <code>loadjava</code> tool. Using the optional argument <code>server_file_system</code> means that the <code>-classpath</code> terms are on the file system of the machine running Oracle server. Otherwise, they are interpreted as being on the file system of the machine running the <code>ojvmjava</code> tool.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="chthree.htm#CHDJHBGH">&#34;Using Command-Line Interface&#34;</a></div>
<p class="subhead2"><a id="CACHDDEG"></a><a id="JJDEV13451"></a>-jdwp</p>
<p>This option specifies a debugger connection to listen for when the shell command <code>java</code> is used to run an executable. This allows for debugging the executable. The arguments specify the port and host. The default value of the host argument is <code>localhost.</code> These are used to execute a call to <code>DBMS_DEBUG_JDWP.CONNECT_TCP</code> from the RDBMS session, in which the executable is run.</p>
</div>
<!-- class="sect3" -->
<a id="CACEJBAJ"></a>
<div id="JJDEV13453" class="sect3">
<h4 class="sect3"><a id="sthref704"></a>Shell Commands</h4>
<p>This section describes the following commands available within the <code>ojvmjava</code> shell:</p>
<ul>
<li>
<p><a href="#CACGAJCA">echo</a></p>
</li>
<li>
<p><a href="#CACFDHHE">exit</a></p>
</li>
<li>
<p><a href="#CACJIAJB">help</a></p>
</li>
<li>
<p><a href="#CACIADFA">java</a></p>
</li>
<li>
<p><a href="#CACIGFJF">version</a></p>
</li>
<li>
<p><a href="#CACEAEJH">whoami</a></p>
</li>
<li>
<p><a href="#CACDAEDH">connect</a></p>
</li>
<li>
<p><a href="#CACCGCAD">runjava</a></p>
</li>
<li>
<p><a href="#CACCFIGC">jdwp</a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
An error is reported if you enter an unsupported command.</div>
<p><a href="#CACDAJCI">Table 12-5</a> summarizes the commands that share one or more common options, which are summarized in <a href="#CACDAJCI">Table 12-5</a>:</p>
<div id="JJDEV13454" class="tblformal">
<p class="titleintable"><a id="sthref705"></a><a id="CACDAJCI"></a>Table 12-5 ojvmjava Command Common Options</p>
<table class="cellalignment4009" title="ojvmjava Command Common Options" summary="table" dir="ltr">
<thead>
<tr class="cellalignment3996">
<th class="cellalignment4003" id="r1c1-t19">Option</th>
<th class="cellalignment4003" id="r1c2-t19">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r2c1-t19" headers="r1c1-t19">
<p><code>-describe | -d</code></p>
</td>
<td class="cellalignment4004" headers="r2c1-t19 r1c2-t19">
<p>Summarizes the operation of the tool.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r3c1-t19" headers="r1c1-t19">
<p><code>-help | -h</code></p>
</td>
<td class="cellalignment4004" headers="r3c1-t19 r1c2-t19">
<p>Summarizes the syntax of the tool.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r4c1-t19" headers="r1c1-t19">
<p><code>-version</code></p>
</td>
<td class="cellalignment4004" headers="r4c1-t19 r1c2-t19">
<p>Shows the version.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="CACGAJCA"></a><a id="JJDEV13455"></a><a id="sthref706"></a>echo</p>
<p>This command displays to <code>stdout</code> exactly what is indicated. This is used mostly in script files.</p>
<p>The syntax is as follows:</p>
<pre>echo [<span class="italic">echo_string</span>] [<span class="italic">args</span>]
</pre>
<p><code><span class="codeinlineitalic">echo_string</span></code> is a string that contains the text you want written to the screen during the shell script invocation and <code><span class="codeinlineitalic">args</span></code> are input arguments from the user. For example, the following command displays out a notification:</p>
<pre>echo &#34;Adding an owner to the schema&#34; &amp;1
</pre>
<p>If the input argument is <code>HR</code>, then the output would be:</p>
<pre>Adding an owner to the schema HR
</pre>
<p class="subhead2"><a id="CACFDHHE"></a><a id="JJDEV13456"></a><a id="sthref707"></a>exit</p>
<p>This command terminates <code>ojvmjava</code>. The syntax is as follows:</p>
<pre>exit
</pre>
<p>For example, to leave a shell, use the following command:</p>
<pre>$ exit
%
</pre>
<p class="subhead2"><a id="CACJIAJB"></a><a id="JJDEV13457"></a><a id="sthref708"></a>help</p>
<p>This command summarizes the syntax of the shell commands. You can also use the help command to summarize the options for a particular command. The syntax is as follows:</p>
<pre>help [<span class="italic">command</span>]
</pre>
<p class="subhead2"><a id="CACIADFA"></a><a id="JJDEV13458"></a><a id="sthref709"></a>java</p>
<p>This command is analogous to the JDK <code>java</code> command. It calls the static <code>main()</code> method of a class. It does this either by using the command-line interface or using a database resident class, depending on the setting of the <code>runjava</code> mode. In the latter case, the class must have been previously loaded with the <code>loadjava</code> tool. The command provides a convenient way to test Java code that runs in the database. In particular, the command catches exceptions and redirects the standard output and standard error of the class to the shell, which displays them as with any other command output. The destination of standard out and standard error for Java classes that run in the database is one or more database server process trace files, which are inconvenient and may require <code>DBA</code> privileges to read.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="chthree.htm#CHDJHBGH">&#34;Using Command-Line Interface&#34;</a></div>
<p>The syntax of the command with <code>runjava</code> mode <code>off</code> is:</p>
<pre>java [-schema schema] class [arg1 ... argn]
</pre>
<p>The syntax of the command with <code>runjava</code> mode <code>on</code> is:</p>
<pre>java [command-line options] class [arg1 ... argn]
</pre>
<p>where, command-line options can be any of those mentioned in <a href="chthree.htm#CACBBFHC">Table 3-1</a>.</p>
<p><a href="#CACHIFJJ">Table 12-6</a> summarizes the arguments of this command.</p>
<div id="JJDEV13459" class="tblformal">
<p class="titleintable"><a id="sthref710"></a><a id="CACHIFJJ"></a>Table 12-6 java Argument Summary</p>
<table class="cellalignment4009" title="java Argument Summary" summary="table" dir="ltr">
<thead>
<tr class="cellalignment3996">
<th class="cellalignment4003" id="r1c1-t21">Argument</th>
<th class="cellalignment4003" id="r1c2-t21">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r2c1-t21" headers="r1c1-t21">
<p><code><span class="codeinlineitalic">class</span></code></p>
</td>
<td class="cellalignment4004" headers="r2c1-t21 r1c2-t21">
<p>Names the Java class schema object that is to be run.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r3c1-t21" headers="r1c1-t21">
<p><code>-schema</code></p>
</td>
<td class="cellalignment4004" headers="r3c1-t21 r1c2-t21">
<p>Names the schema containing the class to be run. The default is the invoker&#39;s schema. The schema name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r4c1-t21" headers="r1c1-t21">
<p><code><span class="codeinlineitalic">arg1</span></code> <code>...</code> <code><span class="codeinlineitalic">argn</span></code></p>
</td>
<td class="cellalignment4004" headers="r4c1-t21 r1c2-t21">
<p>Arguments to the <code>static main()</code> method of the class.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>Consider the following Java file, <code>World.java</code>:</p>
<pre>package hello;
public class World
{
  public World()
  {
    super();
  }

  public static void main(String[] argv)
  {
    System.out.println(&#34;Hello from Oracle Database&#34;);
    if (argv.length != 0)
      System.out.println(&#34;You supplied &#34; + argv.length + &#34; arguments: &#34;);
    for (int i = 0; i &lt; argv.length; i++)
      System.out.println(&#34; arg[&#34; + i + &#34;] : &#34; + argv[i]);
  }
}
</pre>
<p>You can compile, load, publish, and run the class, as follows:</p>
<pre>% javac hello/World.java

% loadjava -r -user HR@localhost:2481:orcl hello/World.class
Password: password
% ojvmjava -user HR -database localhost:2481:orcl
Password: <span class="italic">password</span>
$ java hello.World alpha beta
Hello from Oracle Database
You supplied 2 arguments:
arg[0] : alpha
arg[1] : beta
</pre>
<p class="subhead2"><a id="CACIGFJF"></a><a id="JJDEV13460"></a><a id="sthref711"></a>version</p>
<p>This command shows the version of the <code>ojvmjava</code> tool. You can also show the version of a specified command. The syntax of this command is:</p>
<pre>version [options] [<span class="italic">command</span>]
</pre>
<p>For example, you can display the version of the shell, as follows:</p>
<pre>$ version
1.0
</pre>
<p class="subhead2"><a id="CACEAEJH"></a><a id="JJDEV13461"></a><a id="sthref712"></a>whoami</p>
<p>This command displays the user name of the user who logged in to the current session. The syntax of the command is:</p>
<pre>whoami
<a id="sthref713"></a>
</pre>
<p class="subhead2"><a id="CACDAEDH"></a><a id="JJDEV13462"></a>connect</p>
<p>This command enables the client to drop the current connection and connect to different databases without having to reinvoke the <code>ojvmjava</code> tool with a different connection description.</p>
<p>The syntax of this command is:</p>
<pre>connect [-service <span class="italic">service</span>] [-user <span class="italic">user</span>][-password <span class="italic">password</span>]
</pre>
<p>You can use this command as shown in the following examples:</p>
<pre>connect -s thin@locahost:5521:orcl -u HR/<span class="italic">&lt;password&gt;</span>
connect -s oci@locahost:5521:orcl -u HR -p <span class="italic">&lt;password&gt;</span>
</pre>
<p><a href="#CACFGFDJ">Table 12-7</a> summarizes the arguments of this command.</p>
<div id="JJDEV13463" class="tblformal">
<p class="titleintable"><a id="sthref714"></a><a id="CACFGFDJ"></a>Table 12-7 connect Argument Summary</p>
<table class="cellalignment4009" title="connect Argument Summary" summary="table" dir="ltr">
<thead>
<tr class="cellalignment3996">
<th class="cellalignment4003" id="r1c1-t22">Argument</th>
<th class="cellalignment4003" id="r1c2-t22">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r2c1-t22" headers="r1c1-t22">
<p>-service | -s</p>
</td>
<td class="cellalignment4004" headers="r2c1-t22 r1c2-t22">
<p>Any valid JDBC driver URLS, namely, oci @&lt;connection descriptor&gt; and thin@&lt;host:port:db&gt;</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r3c1-t22" headers="r1c1-t22">
<p><code>-user | -u</code></p>
</td>
<td class="cellalignment4004" headers="r3c1-t22 r1c2-t22">
<p>User to connect as</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r4c1-t22" headers="r1c1-t22">
<p>-password | -p</p>
</td>
<td class="cellalignment4004" headers="r4c1-t22 r1c2-t22">
<p>Password to connect with</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="CACCGCAD"></a><a id="JJDEV13464"></a>runjava</p>
<p>This command queries or modifies the <code>runjava</code> mode. The <code>runjav</code>a mode determines whether or not the <code>java</code> command uses the command-line interface to run executables. The <code>java</code> command:</p>
<ul>
<li>
<p>Uses the command-like interface when <code>runjava</code> mode is <code>on</code></p>
</li>
<li>
<p>Uses database resident executables when <code>runjava</code> mode is <code>off</code></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="chthree.htm#CHDJHBGH">&#34;Using Command-Line Interface&#34;</a></div>
<p>Using the <code>runjava</code> command with no arguments displays the current setting of <code>runjava</code> mode.</p>
<p><a href="#CACCHBJH">Table 12-8</a> summarizes the arguments of this command.</p>
<div id="JJDEV13465" class="tblformal">
<p class="titleintable"><a id="sthref715"></a><a id="CACCHBJH"></a>Table 12-8 runjava Argument Summary</p>
<table class="cellalignment4009" title="runjava Argument Summary" summary="table" dir="ltr">
<thead>
<tr class="cellalignment3996">
<th class="cellalignment4003" id="r1c1-t24">Argument</th>
<th class="cellalignment4003" id="r1c2-t24">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r2c1-t24" headers="r1c1-t24">
<p><code>off</code></p>
</td>
<td class="cellalignment4004" headers="r2c1-t24 r1c2-t24">
<p>Turns <code>runjava</code> mode off.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r3c1-t24" headers="r1c1-t24">
<p><code>on</code></p>
</td>
<td class="cellalignment4004" headers="r3c1-t24 r1c2-t24">
<p>Turns <code>runjava</code> mode on.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r4c1-t24" headers="r1c1-t24">
<p><code>server_file_system</code></p>
</td>
<td class="cellalignment4004" headers="r4c1-t24 r1c2-t24">
<p>Turns <code>runjava</code> mode on. Using this option means that <code>-classpath</code> terms are on the file system of the machine running Oracle server. Otherwise, they are interpreted as being on the file system of the machine running the <code>ojvmjava</code> tool.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="CACCFIGC"></a><a id="JJDEV13466"></a>jdwp</p>
<p>This command queries or modifies whether and how a debugger connection is listened for when an executable is run by the Java command.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The RDBMS session, prior to starting the executable, executes a <code>DBMS_DEBUG_JDWP.CONNECT_TCP</code> call with the specified port and host. This is called <span class="bold">Listening.</span></div>
<p>Using this command with no arguments displays the current setting.</p>
<p><a href="#CACFHIAD">Table 12-9</a> summarizes the arguments of this command.</p>
<div id="JJDEV13467" class="tblformal">
<p class="titleintable"><a id="sthref716"></a><a id="CACFHIAD"></a>Table 12-9 jdwp Argument Summary</p>
<table class="cellalignment4009" title="jdwp Argument Summary" summary="table" dir="ltr">
<thead>
<tr class="cellalignment3996">
<th class="cellalignment4003" id="r1c1-t26">Argument</th>
<th class="cellalignment4003" id="r1c2-t26">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r2c1-t26" headers="r1c1-t26">
<p>off</p>
</td>
<td class="cellalignment4004" headers="r2c1-t26 r1c2-t26">
<p>Stops listening in future executables.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r3c1-t26" headers="r1c1-t26">
<p><code>port</code></p>
</td>
<td class="cellalignment4004" headers="r3c1-t26 r1c2-t26">
<p>Enables listening and specifies the port to be used.</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r4c1-t26" headers="r1c1-t26">
<p>host</p>
</td>
<td class="cellalignment4004" headers="r4c1-t26 r1c2-t26">
<p>Enables listening and specifies the host to be used. The default value for this argument is <code>localhost.</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3995">
<tr>
<td class="cellalignment4004">
<table class="cellalignment4000">
<tr>
<td class="cellalignment3999"><a href="jndi_support.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3999"><a href="chtwelve.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4006">
<table class="cellalignment3998">
<tr>
<td class="cellalignment3999"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3999"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3999"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3999"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3999"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3999"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>


</body></html>