<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-71039"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Introduction%20to%20Java%20in%20Oracle%20Database"></a><title>Introduction to Java in Oracle Database</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="description" content="This book describes how to develop, load, and run Java applications in Oracle Database."/>
<meta name="dcterms.created" content="2014-06-30T4:24:59Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Java Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E50793-03"/>
<meta name="dcterms.isVersionOf" content="JJDEV"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="release_changes.htm" title="Previous" type="text/html"/>
<link rel="Next" href="chtwo.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E50793-03.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">8/23</span> <!-- End Header -->
<script>
<!-- // <![CDATA[
window.name='chone'
// ]]> -->
</script> <script>
// <![CDATA[
function footdisplay(footnum,footnote) {
    var msg = window.open('', 'NewWindow' + footnum,
        'directories=no,height=120,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');

    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">');
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>');
    msg.document.write('Footnote ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><h1>Footnote ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/body><\/html>');
    msg.document.close();
    msg.focus();
}
// ]]>
</script> <noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript>
<div id="JJDEV01000" class="chapter"><a id="BABCFIIF"></a>
<h1 class="chapter"><span class="secnum">1</span> Introduction to Java in Oracle Database</h1>
<p>Oracle Database provides support for developing, storing, and deploying Java applications. This chapter introduces the Java language to Oracle PL/SQL developers, who are accustomed to developing server-side applications that are integrated with SQL data. You can develop server-side Java applications that take advantage of the scalability and performance of Oracle Database.</p>
<p>This chapter contains the following sections:</p>
<ul>
<li>
<p><a href="#BABDECCF">Overview of Java</a></p>
</li>
<li>
<p><a href="#BABCJIED">Using Java in Oracle Database</a></p>
</li>
<li>
<p><a href="#BABJCDIE">Overview of Oracle JVM</a></p>
</li>
<li>
<p><a href="#BABHJBAA">Feature List of Oracle JVM</a></p>
</li>
<li>
<p><a href="#BABJDHHE">Main Components of Oracle JVM</a></p>
</li>
<li>
<p><a href="#BABJBADB">Java Application Strategy of Oracle</a></p>
</li>
<li>
<p><a href="#BABCGDHG">Memory Model for Dedicated Mode Sessions</a></p>
</li>
</ul>
<a id="BABDECCF"></a>
<div id="JJDEV01100" class="sect1">
<h2 class="sect1">Overview of <a id="sthref6"></a>Java</h2>
<p>Java has emerged as the object-oriented programming language of choice. Some of the important concepts of Java include:</p>
<ul>
<li>
<p><a id="sthref7"></a>A Java virtual machine (JVM), which provides the fundamental basis for platform independence</p>
</li>
<li>
<p>Automated storage management techniques, such as garbage collection</p>
</li>
<li>
<p>Language syntax that is similar to that of the C language</p>
</li>
</ul>
<p>The result is a language that is object-oriented and efficient for application programming.</p>
<p>This section covers the following topics:</p>
<ul>
<li>
<p><a href="#BABCFHEI">Java and Object-Oriented Programming Terminology</a></p>
</li>
<li>
<p><a href="#BABFJIIC">Key Features of the Java Language</a></p>
</li>
<li>
<p><a href="#BABFJCGE">Java Virtual Machine</a></p>
</li>
<li>
<p><a href="#BABCEIEF">Java Class Hierarchy</a></p>
</li>
</ul>
<a id="BABCFHEI"></a>
<div id="JJDEV13007" class="sect2">
<h3 class="sect2">Java and Object-Oriented Programming Terminology</h3>
<p>The following terms are common in Java application development in Oracle Database environment:</p>
<ul>
<li>
<p><a href="#BABCEADG">Classes</a></p>
</li>
<li>
<p><a href="#BABDIAGA">Objects</a></p>
</li>
<li>
<p><a href="#BABIBEJD">Interfaces</a></p>
</li>
<li>
<p><a href="#BABHGCBA">Encapsulation</a></p>
</li>
<li>
<p><a href="#BABEGBJF">Inheritance</a></p>
</li>
<li>
<p><a href="#BABFHEAI">Polymorphism</a></p>
</li>
</ul>
<a id="BABCEADG"></a>
<div id="JJDEV13008" class="sect3">
<h4 class="sect3">C<a id="sthref8"></a><a id="sthref9"></a>lasses</h4>
<p>All object-oriented programming languages support the concept of a class. As with a table definition, a class provides a template for objects that share common characteristics. Each class can define the following:</p>
<ul>
<li>
<p><a id="sthref10"></a><a id="sthref11"></a>Fie<a id="sthref12"></a><a id="sthref13"></a>lds</p>
<p>Fields are variables that are present in each object or instance of a particular class, or are variables that are global and common to all instances. Instance fields are analogous to the columns of a relational table row. The class defines the fields and the type of each field.</p>
<p>You can declare fields in Java as static. Fields of a class that are declared as static are global and common to all instances of that class. There is only one value at any given time for a static field within a given instantiation of a Java runtime. Fields that are not declared as static are created as distinct values within each instance of the class.</p>
<p>The <code>public</code>, <code>private</code>, <code>protected</code>, and default access modifiers define the scope of the field in the application. The <a id="sthref14"></a>Java Language Specification (JLS) defines the rules of visibility of data for all fields. These rules define under what circumstances you can access the data in these fields.</p>
<p>In the example illustrated in <a href="#BABFEAGG">Figure 1-1</a>, the employee identifier is defined as <code>private</code>, indicating that other objects cannot access this field directly. In the example, objects can access the <code>id</code> field by calling the <code>getId()</code> method.</p>
</li>
<li>
<p>Meth<a id="sthref15"></a><a id="sthref16"></a><a id="sthref17"></a>ods</p>
<p>Methods are procedures associated with a class. Like a field, a method can be declared as <code>static</code>, in which case it can be called globally. If a method is not declared as static, it means that the method is an instance method and can be called only as an operation on an object, where the object is an instance of the class.</p>
<p>Similar to fields, methods can be declared as <code>public</code>, <code>private</code>, <code>protected</code>, or default access. This declaration defines the scope in which the method can be called.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="BABDIAGA"></a>
<div id="JJDEV13009" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Ob<a id="sthref18"></a>jects</h4>
<p>A Java object is an instance of a class and is analogous to a relational table row. Objects are collections of data values, the individual elements of which are described by the non-static field definitions of the class.</p>
<p><a href="#BABFEAGG">Figure 1-1</a> shows an example of an <code>Employee</code> class defined with two fields, <code>id</code>, which is the employee identifier, and <code>lastName</code>, which is the last name of the employee, and the <code>getId()</code> and <code>setId(String anId)</code> methods. The <code>id</code> field is <code>private</code>, and the <code>lastName</code> field, the <code>getId()</code> method and the <code>setId(String anId)</code> method are <code>public</code>.</p>
<div id="JJDEV13010" class="figure">
<p class="titleinfigure"><a id="BABFEAGG"></a>Figure 1-1 Classes and Instances</p>
<img width="501" height="349" src="img/intra01.gif" alt="Description of Figure 1-1 follows"/><br/>
<a id="sthref19" href="img_text/intra01.htm">Description of &#34;Figure 1-1 Classes and Instances&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>When you create an instance, the fields store individual and private information relevant only to the employee. That is, the information contained within an employee instance is known only to that particular employee. The example in <a href="#BABFEAGG">Figure 1-1</a> shows two instances of the <code>Employee</code> class, one for the employee Smith and one for Jones. Each instance contains information relevant to the individual employee.</p>
</div>
<!-- class="sect3" -->
<a id="BABEGBJF"></a>
<div id="JJDEV13011" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Inheri<a id="sthref20"></a><a id="sthref21"></a>tance</h4>
<p>Inheritance is an important feature of object-oriented programming languages. It enables classes to include properties of other classes. The class that inherits the properties is called a child class or subclass, and the class from which the properties are inherited is called a parent class or superclass. This feature also helps in reusing already defined code.</p>
<p>In the example illustrated in <a href="#BABFEAGG">Figure 1-1</a>, you can create a <code>FullTimeEmployee</code> class that inherits the properties of the <code>Employee</code> class. The properties inherited depend on the access modifiers declared for each field and method of the superclass.</p>
</div>
<!-- class="sect3" -->
<a id="BABIBEJD"></a>
<div id="JJDEV13012" class="sect3">
<h4 class="sect3">Interf<a id="sthref22"></a><a id="sthref23"></a><a id="sthref24"></a><a id="sthref25"></a>aces</h4>
<p>Java supports only single inheritance, that is, each class can inherit fields and methods of only one class. If you need to inherit properties from more than one source, then Java provides the concept of interfaces, which is a form of multiple inheritance. Interfaces are similar to classes. However, they define only the signature of the methods and not their implementations. The methods that are declared in the interface are implemented in the classes. Multiple inheritance occurs when a class implements multiple interfaces.</p>
</div>
<!-- class="sect3" -->
<a id="BABHGCBA"></a>
<div id="JJDEV13013" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Enc<a id="sthref26"></a>apsulation</h4>
<p>Encapsulation describes the ability of an object to hide its data and methods from the rest of the world and is one of the fundamental principles of object-oriented programming. In Java, a class encapsulates the fields, which hold the state of an object, and the methods, which define the actions of the object. Encapsulation enables you to write reusable programs. It also enables you to restrict access only to those features of an object that are declared <code>public</code>. All other fields and methods are <code>private</code> and can be used for internal object processing.</p>
<p>In the example illustrated in <a href="#BABFEAGG">Figure 1-1</a>, the <code>id</code> field is <code>private</code>, and access to it is restricted to the object that defines it. Other objects can access this field using the <code>getId()</code> method. Using encapsulation, you can deny access to the <code>id</code> field either by declaring the <code>getId()</code> method as <code>private</code> or by not defining the <code>getId()</code> method.</p>
</div>
<!-- class="sect3" -->
<a id="BABFHEAI"></a>
<div id="JJDEV13014" class="sect3">
<h4 class="sect3">Poly<a id="sthref27"></a><a id="sthref28"></a>morphism</h4>
<p>Polymorphism is the ability for different objects to respond differently to the same message. In object-oriented programming languages, you can define one or more methods with the same name. These methods can perform different actions and return different values.</p>
<p>In the example in <a href="#BABFEAGG">Figure 1-1</a>, assume that the different types of employees must be able to respond with their compensation to date. Compensation is computed differently for different types of employees:</p>
<ul>
<li>
<p>Full-time employees are eligible for a bonus.</p>
</li>
<li>
<p>Non-exempt employees get overtime pay.</p>
</li>
</ul>
<p>In procedural languages, you write a <code>switch</code> statement, with the different possible cases defined, as follows:</p>
<pre>switch: (employee.type)
{
  case: Employee
        return employee.salaryToDate; 
  case: FullTimeEmployee
        return employee.salaryToDate + employee.bonusToDate
  ...
}
</pre>
<p>If you add a new type of employee, then you must update the <code>switch</code> statement. In addition, if you modify the data structure, then you must modify all <code>switch</code> statements that use it. In an object-oriented language, such as Java, you can implement a method, <code>compensationToDate()</code>, for each subclass of the <code>Employee</code> class, if it contains information beyond what is already defined in the <code>Employee</code> class. For example, you could implement the <code>compensationToDate()</code> method for a non-exempt employee, as follows:</p>
<pre>public float compensationToDate()
{
  return (super.compensationToDate() + this.overtimeToDate()); 
}
</pre>
<p>For a full-time employee, the <code>compensationToDate()</code> method can be implemented as follows:</p>
<pre>public float compensationToDate()
{
  return (super.compensationToDate() + this.bonusToDate());
}
</pre>
<p>This common use of the method name enables you to call methods of different classes and obtain the required results, without specifying the type of the employee. You do not have to write specific methods to handle full-time employees and part-time employees.</p>
<p>In addition, you can create a <code>Contractor</code> class that does not inherit properties from <code>Employee</code> and implements a <code>compensationToDate()</code> method in it. A program that calculates total payroll to date would iterate over all people on payroll, regardless of whether they were full-time or part-time employees or contractors, and add up the values returned from calling the <code>compensationToDate()</code> method on each. You can safely make changes to the individual <code>compensationToDate()</code> methods or the classes, and know that callers of the methods will work correctly.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABFJIIC"></a>
<div id="JJDEV13015" class="sect2">
<h3 class="sect2">Key Features of the <a id="sthref29"></a>Java Language</h3>
<p>The Java language provides certain key features that make it ideal for developing server applications. These features include:</p>
<ul>
<li>
<p>Simplicity</p>
<p>Java is simpler than most other languages that are used to create server applications, because of its consistent enforcement of the object model. The large, standard set of class libraries brings powerful tools to Java developers on all platforms.</p>
</li>
<li>
<p>Portability</p>
<p>Java is portable across platforms. It is possible to write platform-dependent code in Java, and it is also simple to write programs that move seamlessly across systems.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABFJCGE">&#34;Java Virtual Machine&#34;</a></div>
</li>
<li>
<p>Automatic storage management</p>
<p>A JVM automatically performs all memory allocation and deallocation while the program is running. Java programmers cannot explicitly allocate memory for new objects or free memory for objects that are no longer referenced. Instead, they depend on a JVM to perform these operations. The process of freeing memory is known as garbage collection.</p>
</li>
<li>
<p>Strong typing</p>
<p>Before you use a field, you must declare the type of the field. Strong typing in Java makes it possible to provide a reasonable and safe solution to interlanguage calls between Java and PL/SQL applications, and to integrate Java and SQL calls within the same application.</p>
</li>
<li>
<p>No pointers</p>
<p>Although Java is quite similar to C in its syntax, it does not support direct pointers or pointer manipulation. You pass all parameters, except primitive types, by reference and not by value. As a result, the object identity is preserved. Java does not provide low level, direct access to pointers, thereby eliminating any possibility of memory corruption and leaks.</p>
</li>
<li>
<p>Exception handling</p>
<p>Java exceptions are objects. Java requires developers to declare which exceptions can be thrown by methods in any particular class.</p>
</li>
<li>
<p>Flexible namespace</p>
<p>Java defines classes and places them within a hierarchical structure that mirrors the domain namespace of the Internet. You can distribute Java applications and avoid name collisions. Java extensions, such as the <a id="sthref30"></a>Java Naming and Directory Interface (JNDI), provide a framework for multiple name services to be federated. The namespace approach of Java is flexible enough for Oracle to incorporate the concept of a schema for resolving class names in full compliance with the JLS.</p>
</li>
<li>
<p>Security</p>
<p>The design of Java bytecodes and JVM specification allow for built-in mechanisms to verify the security of Java binary code. Oracle Database is installed with an instance of Security Manager that, when combined with Oracle Database security, determines who can call any Java methods.</p>
</li>
<li>
<p>Standards for connectivity to relational databases</p>
<p><a id="sthref31"></a>Java Database Connectivity (JDBC) and SQLJ enable Java code to access and manipulate data in relational databases. Oracle provides drivers that allow vendor-independent, portable Java code to access the relational database.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABFJCGE"></a>
<div id="JJDEV13016" class="sect2">
<h3 class="sect2"><a id="sthref32"></a>Java Virtual Machine</h3>
<p>As with other high-level computer languages, the Java source compiles to low-level machine instructions. In Java, these instructions are known as <a id="sthref33"></a><a id="sthref34"></a>bytecodes, because each instruction has a uniform size of one byte. Most other languages, such as C, compile to machine-specific instructions, such as instructions specific to an Intel or HP processor.</p>
<p>When compiled, the Java code gets converted to a standard, platform-independent set of bytecodes, which are executed by a Java Virtual Machine (JVM). A JVM is a separate program that is optimized for the specific platform on which you run your Java code.</p>
<p><a href="#BABFIIFH">Figure 1-2</a> illustrates how Java can maintain platform independence. Each platform has a JVM installed that is specific to the operating system. The Java bytecodes get interpreted through the JVM into the appropriate platform dependent actions.</p>
<div id="JJDEV13017" class="figure">
<p class="titleinfigure"><a id="BABFIIFH"></a>Figure 1-2 Java Component Structure</p>
<img width="240" height="190" src="img/jvmlayer.gif" alt="Description of Figure 1-2 follows"/><br/>
<a id="sthref35" href="img_text/jvmlayer.htm">Description of &#34;Figure 1-2 Java Component Structure&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>When you develop a Java application, you use predefined core class libraries written in the Java language. The Java core class libraries are logically divided into packages that provide commonly used functionality. Basic language support is provided by the <code>java.lang</code> package, I/O support is provided by the <code>java.io</code> package, and network access is provided by the <code>java.net</code> package. Together, a JVM and the core class libraries provide a platform on which Java programmers can develop applications, which will run successfully on any operating system that supports Java. This concept is what drives the &#34;write once, run anywhere&#34; idea of Java.</p>
<p><a href="#BABCCABG">Figure 1-3</a> illustrates how Oracle Java applications reside on top of the Java core class libraries, which reside on top of the JVM. Because the Oracle Java support system is located within the database, the JVM interacts with Oracle Database libraries, instead of directly interacting with the operating system.</p>
<div id="JJDEV13018" class="figure">
<p class="titleinfigure"><a id="BABCCABG"></a>Figure 1-3 Oracle Database Java Component Structure</p>
<img width="200" height="218" src="img/vmlayercake.gif" alt="Description of Figure 1-3 follows"/><br/>
<a id="sthref36" href="img_text/vmlayercake.htm">Description of &#34;Figure 1-3 Oracle Database Java Component Structure&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>To know more about Java and JVM, you can refer to the Java Language Specification (<a id="sthref37"></a>JLS) and the JVM specification. The JLS defines the syntax and semantics, and the JVM specification defines the necessary low-level actions for the system that runs the application. In addition, there is also a compatibility test suite for JVM implementors to determine if they have complied with the specifications. This test suite is known as the <a id="sthref38"></a>Java Compatibility Kit (JCK). Oracle JVM implementation complies fully with JCK. Part of the overall Java strategy is that an openly specified standard, together with a simple way to verify compliance with that standard, allows vendors to offer uniform support for Java across all platforms.</p>
</div>
<!-- class="sect2" -->
<a id="BABCEIEF"></a>
<div id="JJDEV13019" class="sect2">
<h3 class="sect2">Java Class<a id="sthref39"></a><a id="sthref40"></a> Hierarchy</h3>
<p>Java defines classes within a large hierarchy of classes. At the top of the hierarchy is the <code>Object</code> class. All classes in Java inherit from the <code>Object</code> class at some level, as you walk up through the inheritance chain of superclasses. When we say Class B inherits from Class A, each instance of Class B contains all the fields defined in class B, as well as all the fields defined in Class A.</p>
<p><a href="#BABJBBFD">Figure 1-4</a> illustrates a generic Java class hierarchy. The <code>FullTimeEmployee</code> class contains the <code>id</code> and <code>lastName</code> fields defined in the <code>Employee</code> class, because it inherits from the <code>Employee</code> class. In addition, the <code>FullTimeEmployee</code> class adds another field, <code>bonus</code>, which is contained only within <code>FullTimeEmployee</code>.</p>
<p>You can call any method on an instance of Class B that was defined in either Class A or Class B. In the example, the <code>FullTimeEmployee</code> instance can call methods defined only in the <code>FullTimeEmployee</code> class and methods defined in the <code>Employee</code> class.</p>
<div id="JJDEV13020" class="figure">
<p class="titleinfigure"><a id="BABJBBFD"></a>Figure 1-4 Class Hierarchy</p>
<img width="742" height="523" src="img/intra2_01.gif" alt="Description of Figure 1-4 follows"/><br/>
<a id="sthref41" href="img_text/intra2_01.htm">Description of &#34;Figure 1-4 Class Hierarchy&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>Instances of Class B can be substituted for instances of Class A, which makes inheritance another powerful construct of object-oriented languages for improving code reuse. You can create classes that define behavior and state where it makes sense in the hierarchy, yet make use of preexisting functionality in class libraries.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABCJIED"></a>
<div id="JJDEV01200" class="sect1">
<h2 class="sect1">Using <a id="sthref42"></a>Java in Oracle Database</h2>
<p>You can write and load Java applications within the database because it is a safe language with a lot of security features. Java has been developed to prevent anyone from tampering with the operating system where the Java code resides in. Some languages, such as C, can introduce security problems within the database. However, Java, because of its design, is a robust language that can be used within the database.</p>
<p>Although the Java language presents many advantages to developers, providing an implementation of a JVM that supports Java server applications in a scalable manner is a challenge. This section discusses the following challenges:</p>
<ul>
<li>
<p><a href="#BABFICAE">Java and RDBMS: A Robust Combination</a></p>
</li>
<li>
<p><a href="#BABBHGIJ">Multithreading</a></p>
</li>
<li>
<p><a href="#BABFHGBJ">Memory Spaces Management</a></p>
</li>
<li>
<p><a href="#BABDGEDC">Footprint</a></p>
</li>
<li>
<p><a href="#BABCIHGA">Performance of an Oracle JVM</a></p>
</li>
<li>
<p><a href="#BABFGBAD">Dynamic Class Loading</a></p>
</li>
</ul>
<a id="BABFICAE"></a>
<div id="JJDEV13021" class="sect2">
<h3 class="sect2">Java and RDBMS: A Robust Combination</h3>
<p>Oracle Database provides Java applications with a dynamic data-processing engine that supports complex queries and different views of the same data. All client requests are assembled as data queries for immediate processing, and query results are generated dynamically.</p>
<p>The combination of Java and Oracle Database helps you to create component-based, network-centric applications that can be easily updated as business needs change. In addition, you can move applications and data stores off the desktop and onto intelligent networks and network-centric servers. More important, you can access those applications and data stores from any client device.</p>
<p><a id="sthref43"></a><a href="#BABBHGJB">Figure 1-5</a> shows a traditional two-tier, client/server configuration in which clients call Java stored procedures the same way they call PL/SQL stored procedures. The figure also shows how Oracle Net Services Connection Manager can combine many network connections into a single database connection. This enables Oracle Database to support a large number of concurrent users.</p>
<div id="JJDEV13022" class="figure">
<p class="titleinfigure"><a id="BABBHGJB"></a>Figure 1-5 Two-Tier Client/Server Configuration</p>
<img width="725" height="309" src="img/two_tier_config.gif" alt="Description of Figure 1-5 follows"/><br/>
<a id="sthref44" href="img_text/two_tier_config.htm">Description of &#34;Figure 1-5 Two-Tier Client/Server Configuration&#34;</a><br/>
<br/></div>
<!-- class="figure" --></div>
<!-- class="sect2" -->
<a id="BABBHGIJ"></a>
<div id="JJDEV13023" class="sect2">
<h3 class="sect2"><a id="sthref45"></a><a id="sthref46"></a><a id="sthref47"></a>Multithreading</h3>
<p>Multithreading is one of the key scalability features of the Java language. The Java language and class libraries make it simpler to write multithreaded applications in Java than many other languages, but it is still a daunting task in any language to write reliable, scalable multithreaded code.</p>
<p>Oracle Database server efficiently schedules work for thousands of users. The Oracle JVM takes advantage of the session architecture of Oracle database to concurrently run Java applications for hundreds to thousands of users. Although Oracle Database supports Java language-level threads required by the JLS and JCK, scalability will not increase by using threads within the scope of the database. By using the embedded scalability of the database, the need for writing multithreaded Java servers is eliminated.</p>
<p>You should use the facilities of Oracle Database for scheduling users by writing single-threaded Java applications. The database can schedule processes between each application, and thus, you achieve scalability without having to manage threads. You can still write multithreaded Java applications, but multiple Java threads will not increase the performance of the server.</p>
<p><a id="sthref48"></a>One complication multithreading creates is the interaction of threads and automated storage management or garbage collection. The garbage collector running in a generic JVM has no knowledge of which Java language threads are running or how the underlying operating system schedules them. The difference between a non-Oracle Database model and an Oracle JVM model is as follows:</p>
<ul>
<li>
<p>Non-Oracle Database model</p>
<p>A single user maps to a single Java thread and a single garbage collector manages all garbage from all users. Different techniques typically deal with allocation and collection of objects of varying lifetimes and sizes. The result in a heavily multithreaded application is, at best, dependent upon operating system support for native threads, which can be unreliable and limited in scalability. High levels of scalability for such implementations have not been convincingly demonstrated.</p>
</li>
<li>
<p>Oracle JVM model</p>
<p>Even when thousands of users connect to the server and run the same Java code, each user experiences it as if he or she is running his or her own Java code on his or her own JVM. The responsibility of an Oracle JVM is to make use of operating system processes and threads and the scalable approach of Oracle Database. As a result of this approach, the garbage collector of the Oracle JVM is more reliable and efficient because it never collects garbage from more than one user at any time.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="chtwo.htm#BABHHHDG">&#34;Threading in Oracle Database&#34;</a></div>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABFHGBJ"></a>
<div id="JJDEV13024" class="sect2">
<h3 class="sect2">Memory Spaces Management</h3>
<p><a id="sthref49"></a>Garbage collection is a major function of the automated storage management feature of Java, eliminating the need for Java developers to allocate and free memory explicitly. Consequently, this eliminates a large source of memory leaks that are commonly found in C and C++ programs. However, garbage collection contributes to the overhead of program execution speed and footprint.</p>
<p>Garbage collection imposes a challenge to the JVM developer seeking to supply a highly scalable and fast Java platform. An Oracle JVM meets these challenges in the following ways:</p>
<ul>
<li>
<p>The Oracle JVM uses Oracle Database scheduling facilities, which can manage multiple users efficiently.</p>
</li>
<li>
<p>Garbage collection is performed consistently for multiple users, because garbage collection is focused on a single user within a single session. The Oracle JVM has an advantage, because the burden and complexity of the job of the memory manager does not increase as the number of users increases. The memory manager performs the allocation and collection of objects within a single session, which typically translates to the activity of a single user.</p>
</li>
<li>
<p>The Oracle JVM uses different garbage collection techniques depending on the type of memory used. These techniques provide high efficiency and low overhead.</p>
</li>
</ul>
<p>The two types of memory space are call space and session space.</p>
<div class="inftblinformal">
<table class="cellalignment4002" title="table" summary="table">
<thead>
<tr class="cellalignment3996">
<th class="cellalignment4003" id="r1c1-t4">Memory space</th>
<th class="cellalignment4003" id="r1c2-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r2c1-t4" headers="r1c1-t4">Call space</td>
<td class="cellalignment4004" headers="r2c1-t4 r1c2-t4">It is a fast and inexpensive type of memory. It primarily exists for the length of a call. Call memory space is divided into new and old segments. All new objects are created within new memory. Objects that have survived several scavenges are moved into old memory.</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r3c1-t4" headers="r1c1-t4">Session space</td>
<td class="cellalignment4004" headers="r3c1-t4 r1c2-t4">It is an expensive, performance-wise memory. It primarily exists for the length of a session. All <code>static</code> fields and any objects that exist beyond the lifetime of a call exist here.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p><a href="#BABDGIDI">Figure 1-6</a> illustrates the different actions performed by the garbage collector.</p>
<div id="JJDEV13025" class="figure">
<p class="titleinfigure"><a id="BABDGIDI"></a>Figure 1-6 Garbage Collection</p>
<img width="477" height="390" src="img/entapa_02.gif" alt="Description of Figure 1-6 follows"/><br/>
<a id="sthref50" href="img_text/entapa_02.htm">Description of &#34;Figure 1-6 Garbage Collection&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>Garbage collection algorithms within an Oracle JVM adhere to the following rules:</p>
<ol>
<li>
<p>New objects are created within a new call space.</p>
</li>
<li>
<p>Scavenging occurs at a set interval. Some programmers create objects frequently for only a short duration. These types of objects are created and garbage-collected quickly within the new call space. This is known as <span class="bold"><a id="sthref51"></a>scavenging</span>.</p>
</li>
<li>
<p>Any objects that have survived several iterations of scavenging are considered to be objects that can exist for a while. These objects are moved out of new call space into old call space. During the move, they are also compacted. Old call space is scavenged or garbage collected less often and, therefore, provides better performance.</p>
</li>
<li>
<p>At the end of the call, any objects that are to exist beyond the call are moved into session space.</p>
</li>
</ol>
<p><a href="#BABDGIDI">Figure 1-6</a> illustrates the steps listed in the preceding text. This approach applies sophisticated allocation and collection schemes tuned to the types and lifetimes of objects. For example, new objects are allocated in fast and inexpensive call memory, designed for quick allocation and access. Objects held in Java <code>static</code> fields are migrated to the more precious and expensive session space.</p>
</div>
<!-- class="sect2" -->
<a id="BABDGEDC"></a>
<div id="JJDEV13026" class="sect2">
<h3 class="sect2"><a id="sthref52"></a>Footprint</h3>
<p>The footprint of a running Java program is affected by many factors:</p>
<ul>
<li>
<p>Size of the program</p>
<p>The size of the program depends on the number of classes and methods and how much code they contain.</p>
</li>
<li>
<p>Complexity of the program</p>
<p>The complexity of the program depends on the number of core class libraries that the Oracle JVM uses as the program runs, as opposed to the program itself.</p>
</li>
<li>
<p>Amount of space the JVM uses</p>
<p>The amount of space the JVM uses depends on the number of objects the JVM allocates, how large these objects are, and how many objects must be retained across calls.</p>
</li>
<li>
<p>Ability of the garbage collector and memory manager to deal with the demands of the program running</p>
<p>This can not be determined often. The speed with which objects are allocated and the way they are held on to by other objects influences the importance of this factor.</p>
</li>
</ul>
<p>From a scalability perspective, the key to supporting multiple clients concurrently is a minimum per-user session footprint. The Oracle JVM keeps the per-user session footprint to a minimum by placing all read-only data for users, such as Java bytecodes, in shared memory. Appropriate garbage collection algorithms are applied against call and session memories to maintain a small footprint for the user&#39;s session. The Oracle JVM uses the following types of garbage collection algorithms to maintain the user&#39;s session memory:</p>
<ul>
<li>
<p>Generational scavenging for short-lived objects</p>
</li>
<li>
<p>Mark and lazy sweep collection for objects that exist for the life of a single call</p>
</li>
<li>
<p>Copying collector for long-lived objects, that is, objects that live across calls within a session</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABCIHGA"></a>
<div id="JJDEV13027" class="sect2">
<h3 class="sect2">Performance of an Oracle JVM</h3>
<p>The <a id="sthref53"></a><a id="sthref54"></a>performance of an Oracle JVM is enhanced by the embedding of an innovative Just-In-Time compiler similar to HotSpot on standard JVM. The platform-independent Java bytecodes run on top of a JVM, and the JVM interacts with the specific hardware platform. Any time you add levels within software, the performance is degraded. Because Java requires going through an intermediary to interpret the bytecodes, a degree of inefficiency exists for Java applications as compared to applications developed using a platform-dependent language, such as C. To address this issue, several JVM suppliers create native compilers. Native compilers translate Java bytecodes into platform-dependent native code, which eliminates the interpreter step and improves performance.</p>
<p><a id="sthref55"></a>The following table describes two methods for native compilation:</p>
<div class="inftblinformal">
<table class="cellalignment4002" title="table" summary="table" dir="ltr">
<thead>
<tr class="cellalignment3996">
<th class="cellalignment4003" id="r1c1-t5">Compiler</th>
<th class="cellalignment4003" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r2c1-t5" headers="r1c1-t5">Just-In-Time (JIT) Compilation</td>
<td class="cellalignment4004" headers="r2c1-t5 r1c2-t5">JIT compilers quickly compile Java bytecodes to platform-specific, or native, machine code during run time. These compilers do not produce an executable file to be run on the platform. Instead, they provide platform-dependent code from Java bytecodes that is run directly after it is translated. JIT compilers should be used for Java code that is run frequently and at speeds closer to that of code developed in other languages, such as C.</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r3c1-t5" headers="r1c1-t5">Ahead-of-Time Compilation</td>
<td class="cellalignment4004" headers="r3c1-t5 r1c2-t5">This compilation translates Java bytecodes to platform-independent C code before run time. Then a standard C compiler compiles the C code into an executable file for the target platform. This approach is more suitable for Java applications that are not modified frequently. This approach takes advantage of the mature and efficient platform-specific compilation technology found in modern C compilers.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p>Oracle Database uses Just-In-Time (JIT) compilation to deliver its core Java class libraries, such as JDBC code, in natively compiled form. The JIT compiler is enabled without the support of any plug-ins and it is applicable across all the platforms that Oracle supports.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="chnine.htm#BABCDHHF">Oracle JVM Just-in-Time Compiler (JIT)</a></div>
<p><a href="#BABJGGIA">Figure 1-7</a> illustrates how natively compiled code runs up to 10 times faster than interpreted code. As a result, the more native code your program uses, the faster it runs.</p>
<div id="JJDEV13028" class="figure">
<p class="titleinfigure"><a id="BABJGGIA"></a>Figure 1-7 Interpreter versus Accelerator</p>
<img width="271" height="417" src="img/interpreter_vs_accelerator.gif" alt="Description of Figure 1-7 follows"/><br/>
<a id="sthref56" href="img_text/interpreter_vs_accelerator.htm">Description of &#34;Figure 1-7 Interpreter versus Accelerator&#34;</a><br/>
<br/></div>
<!-- class="figure" --></div>
<!-- class="sect2" -->
<a id="BABFGBAD"></a>
<div id="JJDEV13029" class="sect2">
<h3 class="sect2">Dynamic <a id="sthref57"></a><a id="sthref58"></a>Class Loading</h3>
<p>Another strong feature of Java is dynamic class loading. The class loader loads classes from the disk and places them in the JVM-specific memory structures necessary for interpretation. The class loader locates the classes in <code>CLASSPATH</code> and loads them only when they are used while the program is running. This approach, which works well for applets, poses the following problems in a server environment:</p>
<div class="inftblinformal">
<table class="cellalignment4002" title="table" summary="table" dir="ltr">
<thead>
<tr class="cellalignment3996">
<th class="cellalignment4003" id="r1c1-t7">Problem</th>
<th class="cellalignment4003" id="r1c2-t7">Description</th>
<th class="cellalignment4003" id="r1c3-t7">Solution</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r2c1-t7" headers="r1c1-t7">Predictability</td>
<td class="cellalignment4004" headers="r2c1-t7 r1c2-t7">The class loading operation places a severe penalty when the program is run for the first time. A simple program can cause an Oracle JVM to load many core classes to support its needs. A programmer cannot easily predict or determine the number of classes loaded.</td>
<td class="cellalignment4004" headers="r2c1-t7 r1c3-t7">The Oracle JVM loads classes dynamically, just as with any other JVM. The same one-time class loading speed hit is encountered. However, because the classes are loaded into shared memory, no other users of those classes will cause the classes to load again, and they will use the same preloaded classes.</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r3c1-t7" headers="r1c1-t7">Reliability</td>
<td class="cellalignment4004" headers="r3c1-t7 r1c2-t7">A benefit of dynamic class loading is that it supports program updating. For example, you would update classes on a server, and clients, who download the program and load it dynamically, see the update whenever they next use the program. Server programs tend to emphasize reliability. As a developer, you must know that every client runs a specific program configuration. You do not want clients to inadvertently load some classes that you did not intend them to load.</td>
<td class="cellalignment4004" headers="r3c1-t7 r1c3-t7">Oracle Database separates the upload and resolve operation from the class loading operation at run time. You upload Java code you developed to the server using the <code>loadjava</code> tool. Instead of using <code>CLASSPATH</code>, you specify a resolver at installation time. The resolver is analogous to <code>CLASSPATH</code>, but enables you to specify the schemas in which the classes reside. This separation of resolution from class loading ensures that you always know what programs users run.
<p><span class="bold">See Also:</span> <a href="cheleven.htm#CACCBHIC">Chapter 12, &#34;Schema Objects and Oracle JVM Utilities&#34;</a></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABJCDIE"></a>
<div id="JJDEV01300" class="sect1">
<h2 class="sect1">Overview of Oracle JVM</h2>
<p>The Oracle JVM is a standard, Java-compatible environment that runs any pure Java application. It is compatible with the standard JLS and the JVM specifications. It supports the standard Java binary format and the standard Java APIs. In addition, Oracle Database adheres to standard Java language semantics, including dynamic class loading at run time.</p>
<p>Java in Oracle Database introduces the following terms:</p>
<ul>
<li>
<p>Session</p>
<p>A session in Oracle Database Java environment is identical to the standard Oracle Database usage. A <a id="sthref59"></a>session is typically, although not necessarily, bounded by the time a single user connects to the server. As a user who calls a Java code, you must establish a session in the server.</p>
</li>
<li>
<p>Call</p>
<p>When a user causes a Java code to run within a session, it is termed as a <a id="sthref60"></a>call. A call can be started in the following different ways:</p>
<ul>
<li>
<p>A SQL client program runs a Java stored procedure.</p>
</li>
<li>
<p>A trigger runs a Java stored procedure.</p>
</li>
<li>
<p>A PL/SQL program calls a Java code.</p>
</li>
</ul>
<p>In all the cases defined, a call begins, some combination of Java, SQL, or PL/SQL code is run to completion, and the call ends.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
The concept of session and call apply across all uses of Oracle Database.</div>
<p>Unlike other Java environments, the Oracle JVM is embedded within Oracle Database and introduces a number of new concepts. This section discusses some important differences between an Oracle JVM and typical client JVMs based on:</p>
<ul>
<li>
<p><a href="#BABCIHDC">Process Area</a></p>
</li>
<li>
<p><a href="#BABEDHIC">Java session initialization, duration and entrypoints</a></p>
</li>
<li>
<p><a href="#BABGGIFG">The GUI</a></p>
</li>
<li>
<p><a href="#BABFECAA">The IDE</a></p>
</li>
</ul>
<a id="BABCIHDC"></a>
<div id="JJDEV13030" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Process Area</h3>
<p>In a standard Java environment, you run a Java application through the interpreter by issuing the following command on the command line, where <code><span class="codeinlineitalic">classname</span></code> is the name of the class that you want the JVM to interpret first:</p>
<pre>java <span class="italic">classname</span>
</pre>
<p>When using the Oracle JVM, you must load the application into the database, publish the interface, and then run the application within a database session. The database session is the environment in which the Oracle JVM runs and as such is the analog of the operating system process in which a standard client JVM runs.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="chtwo.htm#BABHGJFI">Chapter 2, &#34;Java Applications on Oracle Database&#34;</a> for information about loading, publishing, and running Java applications</div>
</div>
<!-- class="sect2" -->
<a id="BABEDHIC"></a>
<div id="JJDEV13031" class="sect2">
<h3 class="sect2"><a id="sthref61"></a>Java session initialization, duration and entrypoints</h3>
<p>Standard client-based Java applications declare a single, top-level method, <code>public static void main(String args[])</code>. This method is executed once and the instantiation of the Java Virtual Machine lasts for the duration of that call. But, Oracle Java applications are not restricted to a single top-level main entrypoint, and the duration of the Oracle JVM instantiation is not determined by a single call and the exit of the call from this entrypoint. Each client begins a session, calls its server-side logic modules through top-level entry points, and eventually ends the session. The same JVM instance remains in place for the entire duration of the session, so data state such as static variable values can be used across multiple calls to multiple top-level entry points.</p>
<p>Class definitions that have been loaded and published in the database are generally available to all sessions in that database. The JVM instance in a given session and the Java data objects and global field values in that JVM instance are private to the session. This data is present for the duration of the session and may be used by multiple calls within the lifetime of that session. But, neither this data is visible to other sessions nor the data can be shared in any way with other sessions. This is analogous to how in a standard client Java application separate invocations of the main method share the same class definitions, but the data created and used during those invocations are separate.</p>
</div>
<!-- class="sect2" -->
<a id="BABGGIFG"></a>
<div id="JJDEV13032" class="sect2">
<h3 class="sect2">The<a id="sthref62"></a> GUI</h3>
<p>A server cannot provide GUIs, but it can provide the logic that drives them. The Oracle JVM supports only the headless mode of the Java Abstract Window Toolkit (AWT). All Java AWT classes are available within the server environment and your programs can use the Java AWT functionality, as long as they do not attempt to materialize a GUI on the server.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="chtwo.htm#BABFAEJI">&#34;User Interfaces on the Server&#34;</a></div>
</div>
<!-- class="sect2" -->
<a id="BABFECAA"></a>
<div id="JJDEV13033" class="sect2">
<h3 class="sect2">The <a id="sthref63"></a>IDE</h3>
<p>The Oracle JVM is oriented to Java application deployment, and not development. You can write and test applications on any preferred integrated development environment (IDE), such as Oracle JDeveloper, and then deploy them within the database for the clients to access and run them.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABJDGJJ">&#34;Development Tools&#34;</a></div>
<p>The binary compatibility of Java enables you to work on any IDE and then upload the Java class files to the server. You need not move your Java source files to the database. Instead, you can use powerful client-side IDEs to maintain Java applications that are deployed on the server.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABHJBAA"></a>
<div id="JJDEV13042" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Feature List of Oracle JVM</h2>
<p><a href="#BABHGHJB">Table 1-1</a> lists the features of Oracle JVM and the versions in which they were first supported.</p>
<div id="JJDEV13043" class="tblhruleformal">
<p class="titleintable"><a id="sthref64"></a><a id="BABHGHJB"></a>Table 1-1 Feature List of Oracle JVM</p>
<table class="cellalignment4002" title="Feature List of Oracle JVM" summary="Feature List of Oracle JVM" dir="ltr">
<thead>
<tr class="cellalignment3996">
<th class="cellalignment4003" id="r1c1-t12">Feature</th>
<th class="cellalignment4003" id="r1c2-t12">Supported Since Oracle JVM Release</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r2c1-t12" headers="r1c1-t12">
<p><code>loadjava</code> URL support</p>
</td>
<td class="cellalignment4004" headers="r2c1-t12 r1c2-t12">
<p>11.1</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r3c1-t12" headers="r1c1-t12">
<p>List-Based operations with <code>dropjava</code> support</p>
</td>
<td class="cellalignment4004" headers="r3c1-t12 r1c2-t12">
<p>11.1</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r4c1-t12" headers="r1c1-t12">
<p><code>ojvmtc</code> Tool</p>
</td>
<td class="cellalignment4004" headers="r4c1-t12 r1c2-t12">
<p>11.1</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r5c1-t12" headers="r1c1-t12">
<p><code>Runjava</code> command-line interface (JDK-like interface)</p>
</td>
<td class="cellalignment4004" headers="r5c1-t12 r1c2-t12">
<p>11.1</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r6c1-t12" headers="r1c1-t12">
<p>Database-Resident JARs</p>
</td>
<td class="cellalignment4004" headers="r6c1-t12 r1c2-t12">
<p>11.1</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r7c1-t12" headers="r1c1-t12">
<p>Sharing of user classloaded classes metadata support</p>
</td>
<td class="cellalignment4004" headers="r7c1-t12 r1c2-t12">
<p>11.1</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r8c1-t12" headers="r1c1-t12">
<p>Two-tier duration for the Java session state support</p>
</td>
<td class="cellalignment4004" headers="r8c1-t12 r1c2-t12">
<p>11.1</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r9c1-t12" headers="r1c1-t12">
<p>Default service feature</p>
</td>
<td class="cellalignment4004" headers="r9c1-t12 r1c2-t12">
<p>11.1</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r10c1-t12" headers="r1c1-t12">
<p>Just-in-Time compiler (JIT)</p>
</td>
<td class="cellalignment4004" headers="r10c1-t12 r1c2-t12">
<p>11.1</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r11c1-t12" headers="r1c1-t12">
<p>Internet Protocol Version 6 (IPv6) Support</p>
</td>
<td class="cellalignment4004" headers="r11c1-t12 r1c2-t12">
<p>11.2</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r12c1-t12" headers="r1c1-t12">
<p>JDK 6 support</p>
</td>
<td class="cellalignment4004" headers="r12c1-t12 r1c2-t12">
<p>12.1</p>
</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r13c1-t12" headers="r1c1-t12">
<p>JDK 7 support</p>
</td>
<td class="cellalignment4004" headers="r13c1-t12 r1c2-t12">
<p>12.1</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" --></div>
<!-- class="sect1" -->
<a id="BABJDHHE"></a>
<div id="JJDEV01400" class="sect1">
<h2 class="sect1">Main <a id="sthref65"></a>Components of Oracle JVM</h2>
<p>This section briefly describes the main components of an Oracle JVM and some of the facilities they provide.</p>
<p>The Oracle JVM is a complete, Java 2-compliant environment for running Java applications. It runs in the same process space and address space as the database kernel by sharing its memory heaps and directly accessing its relational data. This design optimizes memory use and increases throughput.</p>
<p>The Oracle JVM provides a run-time environment for Java objects. It fully supports Java data structures, method dispatch, exception handling, and language-level threads. It also supports all the core Java class libraries, including <code>java.lang</code>, <code>java.io</code>, <code>java.net</code>, <code>java.math</code>, and <code>java.util</code>.</p>
<p><a href="#BABJJHIA">Figure 1-8</a> shows the main components of an Oracle JVM.</p>
<div id="JJDEV13044" class="figure">
<p class="titleinfigure"><a id="BABJJHIA"></a>Figure 1-8 Main Components of an Oracle JVM</p>
<img width="441" height="264" src="img/jvm_components.gif" alt="Description of Figure 1-8 follows"/><br/>
<a id="sthref66" href="img_text/jvm_components.htm">Description of &#34;Figure 1-8 Main Components of an Oracle JVM&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>The Oracle JVM embeds the standard Java namespace in the database schemas. This feature lets Java programs access Java objects stored in Oracle Database and application servers across the enterprise.</p>
<p>In addition, the Oracle JVM is tightly integrated with the scalable, shared memory architecture of the database. Java programs use call, session, and object lifetimes efficiently without user intervention. As a result, the Oracle JVM and middle-tier Java business objects can be scaled, even when they have session-long state.</p>
<p>The following sections provide an overview of some of the components of the Oracle JVM and the <a id="sthref67"></a>JDBC driver and the SQLJ translator:</p>
<ul>
<li>
<p><a href="#BABJCJIH">Library Manager</a></p>
</li>
<li>
<p><a href="#BABCDFBB">Compiler</a></p>
</li>
<li>
<p><a href="#BABBIGCB">Interpreter</a></p>
</li>
<li>
<p><a href="#BABCADCH">Class Loader</a></p>
</li>
<li>
<p><a href="#BABJIDJH">Verifier</a></p>
</li>
<li>
<p><a href="#BABGDHEH">Server-Side JDBC Internal Driver</a></p>
</li>
<li>
<p><a href="#BABFJEFJ">Server-Side SQLJ Translator</a></p>
</li>
<li>
<p><a href="#CBBEDCBF">System Classes</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABFHGBJ">&#34;Memory Spaces Management&#34;</a> and <a href="#BABCIHGA">&#34;Performance of an Oracle JVM&#34;</a></div>
<a id="BABJCJIH"></a>
<div id="JJDEV13045" class="sect2">
<h3 class="sect2">Library <a id="sthref68"></a><a id="sthref69"></a>Manager</h3>
<p>To store Java classes in Oracle Database, you use the <code>loadjava</code> command-line tool, which uses the SQL <code>CREATE JAVA</code> statements to do its work. When called by the <code>CREATE JAVA {SOURCE | CLASS | RESOURCE}</code> statement, the library manager loads Java source, class, or resource files into the database. These Java schema objects are not accessed directly, and only an Oracle JVM uses them.</p>
</div>
<!-- class="sect2" -->
<a id="BABCDFBB"></a>
<div id="JJDEV13046" class="sect2">
<h3 class="sect2">Com<a id="sthref70"></a><a id="sthref71"></a>piler</h3>
<p>The Oracle JVM includes a standard Java compiler. When the <code>CREATE JAVA SOURCE</code> statement is run, it translates Java source files into architecture-neutral, one-byte instructions known as <a id="sthref72"></a>bytecodes. Each bytecode consists of an opcode followed by its operands. The resulting Java class files, which conform fully to the Java standard, are submitted to the interpreter at run time.</p>
</div>
<!-- class="sect2" -->
<a id="BABBIGCB"></a>
<div id="JJDEV13047" class="sect2">
<h3 class="sect2">Interpre<a id="sthref73"></a><a id="sthref74"></a>ter</h3>
<p>To run Java programs, the Oracle JVM includes a standard Java 2 bytecode interpreter. The interpreter and the associated Java run-time system run standard Java class files. The run-time system supports native methods and call-in and call-out from the host environment.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can also compile your Java code to improve performance. The Oracle JVM uses natively compiled versions of the core Java class libraries, SQLJ translator, and JDBC drivers.</div>
</div>
<!-- class="sect2" -->
<a id="BABCADCH"></a>
<div id="JJDEV13048" class="sect2">
<h3 class="sect2">Class <a id="sthref75"></a><a id="sthref76"></a><a id="sthref77"></a>Loader</h3>
<p>In response to requests from the run-time system, the Java class loader locates, loads, and initializes Java classes stored in the database. The class loader reads the class and generates the data structures needed to run it. Immutable data and metadata are loaded into initialize-once shared memory. As a result, less memory is required for each session. The class loader attempts to resolve external references when necessary. In addition, if the source files are available, then the class loader calls the Java compiler automatically when Java class files must be recompiled.</p>
</div>
<!-- class="sect2" -->
<a id="BABJIDJH"></a>
<div id="JJDEV13049" class="sect2">
<h3 class="sect2"><a id="sthref78"></a><a id="sthref79"></a><a id="sthref80"></a><a id="sthref81"></a>Verifier</h3>
<p>Java class files are fully portable and conform to a well-defined format. The verifier prevents the inadvertent use of spoofed Java class files, which might alter program flow or violate access restrictions. Oracle security and Java security work with the verifier to protect your applications and data.</p>
</div>
<!-- class="sect2" -->
<a id="BABGDHEH"></a>
<div id="JJDEV13050" class="sect2">
<h3 class="sect2">Server-Side <a id="sthref82"></a><a id="sthref83"></a><a id="sthref84"></a>JDBC Internal Driver</h3>
<p>JDBC is a standard and defines a set of Java classes providing vendor-independent access to relational data. The JDBC classes are modeled after ODBC and the X/Open SQL Call Level Interface (CLI) and provide standard features, such as simultaneous connections to several databases, transaction management, simple queries, calls to stored procedures, and streaming access to <code>LONG</code> column data.</p>
<p>Using low-level entry points, a specially tuned JDBC driver runs directly inside Oracle Database, providing fast access to Oracle data from Java stored procedures. The server-side JDBC internal driver complies fully with the standard JDBC specification. Tightly integrated with the database, the JDBC driver supports Oracle-specific data types, globalization character sets, and stored procedures. In addition, the client-side and server-side JDBC APIs are the same, which makes it easy to partition applications.</p>
</div>
<!-- class="sect2" -->
<a id="BABFJEFJ"></a>
<div id="JJDEV13051" class="sect2">
<h3 class="sect2">Server-Side <a id="sthref85"></a><a id="sthref86"></a><a id="sthref87"></a>SQLJ Translator</h3>
<p>SQLJ enables you to embed SQL statements in Java programs. It is more concise than JDBC and more responsive to static analysis and type checking. The SQLJ preprocessor, which itself is a Java program, takes as input a Java source file in which SQLJ clauses are embedded. Then, it translates the SQLJ clauses into Java class definitions that implement the specified SQL statements. The Java type system ensures that objects of those classes are called with the correct arguments.</p>
<p>A highly optimized SQLJ translator runs directly inside the database, where it provides run-time access to Oracle data using the server-side internal JDBC driver. SQLJ forms can include queries, data manipulation language (DML) statements, data definition language (DDL) statements, transaction control statements, and calls to stored procedures. The client-side and server-side SQLJ APIs are identical, making it easy to partition applications.</p>
</div>
<!-- class="sect2" -->
<a id="CBBEDCBF"></a>
<div id="JJDEV13052" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">System Classes</h3>
<p>A set of classes that constitute a significant portion of the implementation of Java in Oracle Database environment is known as the <span class="bold">System classes</span>. These classes are defined in the <code>SYS</code> schema and exported for all users by public synonym. A class with the same name as one of the System classes can be defined in a schema other than the <code>SYS</code> schema<a id="sthref88" href="#sthref88" onclick="footdisplay(1,&#34;You cannot always define a class with the same name as one of the System classes. For the classes present in some packages, for example, \u003ccode\u003ejava.lang\u003c/code\u003e, such definitions are explicitly prohibited by the code.&#34;)"><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a>. But, this is a bad practice because the alternate version of the class may behave in a manner that violates assumptions about the semantics of that class that are present in other System classes or in the underlying implementation of Java Virtual Machine. Oracle strongly discourages this practice.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABJBADB"></a>
<div id="JJDEV01500" class="sect1">
<h2 class="sect1">Java Application Strategy of Oracle</h2>
<p>Oracle provides enterprise application developers an end-to-end Java solution for creating, deploying, and managing Java applications. The total solution consists of client-side and server-side programmatic interfaces, tools to support Java development, and a JVM integrated with Oracle Database. All these products are fully compatible with Java standards. This section covers the following topics:</p>
<ul>
<li>
<p><a href="#BABHHGGD">Java in Database Application Development</a></p>
</li>
<li>
<p><a href="#BABGEHEA">Java Programming Environment</a></p>
</li>
<li>
<p><a href="#BABIAHCI">Java Stored Procedures</a></p>
</li>
<li>
<p><a href="#BABBFEFB">PL/SQL Integration and Oracle RDBMS Functionality</a></p>
</li>
<li>
<p><a href="#BABJDGJJ">Development Tools</a></p>
</li>
<li>
<p><a href="#CACDEEIB">Internet Protocol Version 6 Support</a></p>
</li>
<li>
<p><a href="#CACBCBAC">Multiple JDK Support</a></p>
</li>
</ul>
<a id="BABHHGGD"></a>
<div id="JJDEV01510" class="sect2">
<h3 class="sect2">Java in Database Application Development</h3>
<p>The most important features of Java in database application development are:</p>
<ul>
<li>
<p>Providing flexible partitioning of Java2 Platform, Standard Edition (J2SE) applications for symmetric data access at the JDBC and SQLJ level.</p>
</li>
<li>
<p>Bridging SQL and the Java2 Platform, Enterprise Edition (J2EE) world by:</p>
<ul>
<li>
<p>Calling out Web components, such as JSP and servlet</p>
</li>
<li>
<p>Bridging SQL and Web Services</p>
<ul>
<li>
<p>Calling out Web Services</p>
</li>
</ul>
</li>
<li>
<p>Using an Oracle JVM as ERP Integration Hub</p>
</li>
<li>
<p>Invalidating cache</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABGEHEA"></a>
<div id="JJDEV01520" class="sect2">
<h3 class="sect2">Java Programming Environment</h3>
<p>In addition to the Oracle JVM, the Java programming environment provides:</p>
<ul>
<li>
<p>Java <a id="sthref89"></a>stored procedures as the Java equivalent and companion for PL/SQL. Java stored procedures are tightly integrated with PL/SQL. You can call Java stored procedures from PL/SQL packages and PL/SQL procedures from Java stored procedures.</p>
</li>
<li>
<p>The JDBC and SQLJ programming interfaces for accessing SQL data.</p>
</li>
<li>
<p>Tools and scripts that assist in developing, loading, and managing classes.</p>
</li>
</ul>
<p>The following table helps you decide when to use which Java API:</p>
<div class="inftblinformal">
<table class="cellalignment4002" title="table" summary="table" dir="ltr">
<thead>
<tr class="cellalignment3996">
<th class="cellalignment4003" id="r1c1-t15">Type of functionality you need</th>
<th class="cellalignment4003" id="r1c2-t15">Java API to use</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r2c1-t15" headers="r1c1-t15">To have a Java procedure called from SQL, such as a trigger.</td>
<td class="cellalignment4004" headers="r2c1-t15 r1c2-t15">Java stored procedures</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r3c1-t15" headers="r1c1-t15">To call a static, simple SQL statement from a known table with known column names from a Java object.</td>
<td class="cellalignment4004" headers="r3c1-t15 r1c2-t15">SQLJ</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r4c1-t15" headers="r1c1-t15">To call dynamic, complex SQL statements from a Java object.</td>
<td class="cellalignment4004" headers="r4c1-t15 r1c2-t15">JDBC</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="sect2" -->
<a id="BABIAHCI"></a>
<div id="JJDEV01530" class="sect2">
<h3 class="sect2">Java Stored Procedures</h3>
<p>Java <a id="sthref90"></a>stored procedures are Java programs written and deployed on a server and run from the server, exactly like a PL/SQL stored procedure. You invoke it directly with products like SQL*Plus, or indirectly with a trigger. You can access it from any Oracle Net client, such as OCI and PRO*, or JDBC or SQLJ.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="chfive.htm#BABGCGBG">Chapter 5, &#34;Developing Java Stored Procedures&#34;</a></div>
<p>In addition, you can use Java to develop powerful, server-side programs, which can be independent of PL/SQL. Oracle Database provides a complete implementation of the standard Java programming language and a fully compliant JVM.</p>
</div>
<!-- class="sect2" -->
<a id="BABBFEFB"></a>
<div id="JJDEV01540" class="sect2">
<h3 class="sect2">PL/SQL Integration and Oracle RDBMS Functionality</h3>
<p>You can call existing PL/SQL programs from Java and Java programs from PL/SQL. This solution protects and leverages your PL/SQL and Java code and opens up the advantages and opportunities of Java-based Internet computing.</p>
<p><a id="sthref91"></a>Oracle Database offers two different Java APIs for accessing SQL data, JDBC and SQLJ. Both these APIs are available on the client and the server. As a result, you can deploy your applications on the client and server, without modifying the code.</p>
<p>The following topics introduce the Java APIs and the JPublisher tool provided by Oracle Database:</p>
<ul>
<li>
<p><a href="#BABGIHIG">JDBC Drivers</a></p>
</li>
<li>
<p><a href="#BABGAHGB">SQLJ</a></p>
</li>
<li>
<p><a href="#BABHFBBH">JPublisher</a></p>
</li>
</ul>
<a id="BABGIHIG"></a>
<div id="JJDEV13053" class="sect3">
<h4 class="sect3">JDBC<a id="sthref92"></a> Drivers</h4>
<p>JDBC is a database access protocol that enables you to connect to a database and run SQL statements and queries to the database. The core Java class libraries provide the following JDBC APIs: <code>java.sql</code> and <code>javax.sql</code>. However, JDBC is designed to enable vendors to supply drivers that offer the necessary specialization for a particular database. Oracle <a id="sthref93"></a>provides the following distinct JDBC drivers:</p>
<div class="inftblinformal">
<table class="cellalignment4002" title="table" summary="table" dir="ltr">
<thead>
<tr class="cellalignment3996">
<th class="cellalignment4003" id="r1c1-t17">Driver</th>
<th class="cellalignment4003" id="r1c2-t17">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r2c1-t17" headers="r1c1-t17">JDBC Thin driver</td>
<td class="cellalignment4004" headers="r2c1-t17 r1c2-t17">You can use the JDBC Thin driver to write pure Java applications and applets that access Oracle SQL data. The JDBC Thin driver is especially well-suited for Web-based applications and applets, because you can dynamically download it from a Web page, similar to any other Java applet.</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r3c1-t17" headers="r1c1-t17">JDBC OCI driver</td>
<td class="cellalignment4004" headers="r3c1-t17 r1c2-t17">The JDBC OCI driver accesses Oracle-specific native code, that is, non-Java code, and libraries on the client or middle tier, providing performance boost compared to the JDBC Thin driver, at the cost of significantly larger size and client-side installation.</td>
</tr>
<tr class="cellalignment3996">
<td class="cellalignment4004" id="r4c1-t17" headers="r1c1-t17">JDBC server-side internal driver</td>
<td class="cellalignment4004" headers="r4c1-t17 r1c2-t17">Oracle Database uses the server-side internal driver when the Java code runs on the server. It allows Java applications running in the Oracle JVM on the server to access locally defined data, that is, data on the same system and in the same process, with JDBC. It provides a performance boost, because of its ability to use the underlying Oracle RDBMS libraries directly, without the overhead of an intervening network connection between the Java code and SQL data. By supporting the same Java-SQL interface on the server, Oracle Database does not require you to rework code when deploying it.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="chthree.htm#CACCIEAH">&#34;Utilizing SQLJ and JDBC with Java in the Database&#34;</a></p>
</li>
<li>
<p><a class="olink JJDBC" href="../JJDBC/toc.htm"><span class="italic">Oracle Database JDBC Developer&#39;s Guide</span></a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="BABGAHGB"></a>
<div id="JJDEV13054" class="sect3">
<h4 class="sect3">SQLJ</h4>
<p>Oracle has worked with other vendors, including IBM, Tandem, and Sybase, to develop a standard way to embed SQL statements in Java programs called SQLJ. This work has resulted in a new standard, ANSI x.3.135.10-1998, for a simpler and more highly productive programming API than JDBC. A user writes applications to this higher-level API and then uses a preprocessor to translate the program to standard Java source with JDBC calls. At run time, the program can communicate with multi-vendor databases using standard JDBC drivers.</p>
<p>SQLJ provides a simple, but powerful, way to develop both client-side and middle-tier applications that access databases from Java. You can use SQLJ in stored procedures, triggers, and methods within the Oracle Database 12<span class="italic">c</span> environment. In addition, you can combine SQLJ programs with JDBC.</p>
<p>The SQLJ translator is a Java program that translates embedded SQL in Java source code to pure JDBC-based Java code. Oracle Database 12<span class="italic">c</span> provides a complete Java environment, so you cannot compile SQLJ programs on a client that will run on the server. Instead, you can compile them directly on the server. The adherence of Oracle Database to the Internet standards enables you to choose the development style as per your requirements.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="chthree.htm#CACCIEAH">&#34;Utilizing SQLJ and JDBC with Java in the Database&#34;</a></p>
</li>
<li>
<p><a class="olink JSQLJ" href="../JSQLJ/toc.htm"><span class="italic">Oracle Database SQLJ Developer&#39;s Guide</span></a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="BABHFBBH"></a>
<div id="JJDEV13055" class="sect3">
<h4 class="sect3">JPublisher</h4>
<p>JPublisher provides a simple and convenient tool to create Java programs that access existing Oracle relational database tables.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink JJPUB" href="../JJPUB/toc.htm"><span class="italic">Oracle Database JPublisher User&#39;s Guide</span></a></div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABJDGJJ"></a>
<div id="JJDEV01550" class="sect2">
<h3 class="sect2">Development Tools</h3>
<p><a id="sthref94"></a><a id="sthref95"></a>The introduction of Java in Oracle Database enables you to use several Java IDEs. The adherence of Oracle Database to the Java standards and specifications and the open Internet standards and protocols ensures that your Java programs work successfully, when you deploy them on Oracle Database. Oracle provides many tools or utilities that are written in Java making development and deployment of Java server applications easier. Oracle JDeveloper, a Java IDE provided by Oracle, has many features designed specifically to make deployment of Java stored procedures and EJBs easier. You can download JDeveloper from: <code><a href="http://www.oracle.com/technetwork/developer-tools/jdev/overview/index.html">http://www.oracle.com/technetwork/developer-tools/jdev/overview/index.html</a></code></p>
</div>
<!-- class="sect2" -->
<a id="CACDEEIB"></a>
<div id="JJDEV01410" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Internet Protocol Version 6 Support</h3>
<p>Starting from Oracle Database 11<span class="italic">g</span> Release 2, Oracle JVM supports Internet Protocol Version 6 (IPv6) addresses in the URL and machine names of the Java code in the database, which resolve to IPv6 addresses. IPv6 is a new Network layer protocol designed by the Internet Engineering Task Force (IETF) to replace the current version of Internet Protocol, Internet Protocol Version 4 (IPv4). The primary benefit of IPv6 is a large address space, derived from the use of 128-bit addresses. IPv6 also improves upon IPv4 in areas such as routing, network autoconfiguration, security, quality of service, and so on.</p>
<p>The following system properties enable you to configure IPv6 preferences:</p>
<p class="subhead2"><a id="JJDEV13056"></a>java.net.preferIPv4Stack</p>
<p>If IPv6 is available on the operating system, then the underlying native socket will be an IPv6 socket. This enables Java applications to connect to, and accept connections from both IPv4 and IPv6 hosts. If you have an application that has a preference to use only IPv4 sockets, then you can set this property to <code>true</code>. If you set the property to <code>true</code>, then it implies that the application will not be able to communicate with IPv6 hosts.</p>
<p class="subhead2"><a id="JJDEV13057"></a>java.net.preferIPv6Addresses</p>
<p>Even if IPv6 is available on the operating system, then for backward compatibility reasons, the addresses are mapped to IPv4. For example, applications that depend on access to only an IPv4 service, benefit from this type of mapping. If you want to change the preferences to use IPv6 addresses over IPv4 addresses, then you can set the <code>java.net.preferIPv6Addresses</code> property to <code>true</code>. This allows applications to be tested and deployed in environments, where the application is expected to connect to IPv6 services.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
All the new System classes that are required for IPv6 support are loaded when Java is enabled during database initialization. So, if your application does not have any addresses that are included in the software code, then you do not need to change your code to use IPv6 functionality.</div>
</div>
<!-- class="sect2" -->
<a id="CACBCBAC"></a>
<div id="JJDEV13628" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref96"></a>Multiple JDK Support</h3>
<p>Starting from Oracle Database 12<span class="italic">c</span> Release 1 (12.1), Oracle JVM provides support for multiple JDK versions, including the latest JDK version. Typically, the supported versions are a default version and the next higher version. Oracle Database 12<span class="italic">c</span> Release 1 (12.1) supports JDK 6 and JDK 7, where JDK 6 is the default JDK version. So, if you do not set the JDK version explicitly, the JDK version in effect is JDK 6.</p>
<p>At any given point of time, only one JDK version is in effect for the Database. You can switch from one JDK version to another depending on your needs.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>Every supported JDK version supports one JDBC version each.</p>
</li>
<li>
<p>If you change the JDK version for a CDB, then this change will affect all the corresponding PDBs uniformly. This is because all PDBs attached to a CDB share the same Oracle JVM libraries. So, you cannot have different JDK versions across PDBs under the same CDB. For example, if you have two PDBs <code>pdb1</code> and <code>pdb2</code> under a CDB, and the default JDK version is JDK 6 for both, then you can change the JDK version to JDK 7 for both <code>pdb1</code> and <code>pdb2</code> simultaneously, but cannot make it JDK 6 for <code>pdb1</code> and JDK 7 for <code>pdb2</code>.</p>
</li>
<li>
<p>When a class file fails verification, there can be several kinds of errors. Some of these errors, such as <code>UnsupportedClassVersionError</code>, are persisted in the database. So, even if the class is supposed to pass verification in a new JDK (after the JDK switch), these errors are still thrown. To resolve this, you must reload the class into the database using one of the following options:</p>
<ul>
<li>
<p>Using <code>-force</code> option of <code>loadjava</code></p>
</li>
<li>
<p>Dropping the class first and then loading it again</p>
</li>
</ul>
</li>
</ul>
</div>
<p class="subhead2"><a id="JJDEV13629"></a>Setting a JDK Version</p>
<p>This section describes the steps to set the JDK version of the Database in the following two scenarios:</p>
<ul>
<li>
<p><a href="#CACGFAHD">Without an Existing Database</a></p>
</li>
<li>
<p><a href="#CACDGBBI">With an Existing Database</a></p>
</li>
</ul>
<a id="CACGFAHD"></a>
<div id="JJDEV13630" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref97"></a>Without an Existing Database</h4>
<p>If you have installed Oracle Database 12c Release 1 (12.1) Server in your system with an <code><span class="codeinlineitalic">ORACLE_HOME</span></code>, but, have not created any database, then you can create a database with a particular JDK version.</p>
<p>If you want to create a Database with JDK 6, then you can perform the regular Database creation steps because it is the default JDK version. If you want to create a Database with JDK 7, then perform the following steps:</p>
<ol>
<li>
<p>Run the following Perl script:</p>
<pre>perl $ORACLE_HOME/javavm/install/update_javavm_binaries.pl 7
</pre></li>
<li>
<p>Optionally, relink Oracle, based on the platform.</p>
<p>For Windows platform, relinking is <span class="italic">not</span> required. For non-Windows platform, use the following commands to relink Oracle:</p>
<pre>cd $ORACLE_HOME/rdbms/lib
make -f ins_rdbms.mk ioracle
</pre>
<p>where, <code>ins_rdbms.mk</code> is the name of the makefile and <code>ioracle</code> is the target.</p>
</li>
<li>
<p>Perform the regular Database creation steps.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Any database that you create using this <code><span class="codeinlineitalic">ORACLE_HOME</span></code> later, will have the JDK version set to JDK 7. To change the JDK version of such a Database, follow the steps mentioned in <a href="#CACDGBBI">&#34;With an Existing Database&#34;</a>.</div>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="CACDGBBI"></a>
<div id="JJDEV13631" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref98"></a>With an Existing Database</h4>
<p>If you have installed Oracle Database 12<span class="italic">c</span> Release 1 (12.1) Server in your system with an <code><span class="codeinlineitalic">ORACLE_HOME</span></code>, and have created a database with JDK version <span class="italic">x</span>, then follow these steps to change the JDK version to <span class="italic">y</span>:</p>
<ol>
<li>
<p>Shutdown all the Databases running with the <code><span class="codeinlineitalic">ORACLE_HOME</span></code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
For Windows platform, you must stop all the Oracle Services corresponding to the specific <code>ORACLE_SID</code> as well.</div>
</li>
<li>
<p>Run the following Perl script:</p>
<pre>perl $ORACLE_HOME/javavm/install/update_javavm_binaries.pl <span class="italic">y</span>
</pre></li>
<li>
<p>Optionally, relink Oracle, based on the platform.</p>
<p>For Windows platform, relinking is <span class="italic">not</span> required. For non-Windows platform, use the following commands to relink Oracle:</p>
<pre>cd $ORACLE_HOME/rdbms/lib
make -f ins_rdbms.mk ioracle
</pre>
<p>where, <code>ins_rdbms.mk</code> is the name of the makefile and <code>ioracle</code> is the target.</p>
</li>
<li>
<p>Bring up the databases that are going to be used with JDK <span class="italic">y</span>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
For Windows platform, you must bring up all the Oracle Services corresponding to the specific <code>ORACLE_SID</code> before bringing up the databases.</div>
</li>
<li id="CACDFFBG">
<p>For a non-CDB<a id="sthref99" href="#sthref99" onclick="footdisplay(2,&#34;An Oracle database that is not a multitenant container database (CDB).&#34;)"><sup class="tablefootnote">Foot&nbsp;2&nbsp;</sup></a>, run the following <code>.sql</code> script in each of those databases as <code>SYS</code>:</p>
<pre>$ORACLE_HOME/javavm/install/update_javavm_db.sql
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
In case of Oracle RAC, you must perform the following:
<ul>
<li>
<p>Run the Perl script <code>$ORACLE_HOME/javavm/install/update_javavm_binaries.pl</code>, and link Oracle (if appropriate, based on the platform), on each of the nodes.</p>
</li>
<li>
<p>Repeat step <a href="#CACDFFBG">5</a> once in each of the Databases.</p>
</li>
</ul>
</div>
<p>For a CDB<a id="sthref100" href="#sthref100" onclick="footdisplay(3,&#34;An Oracle Database installation that contains at least one PDB.&#34;)"><sup class="tablefootnote">Foot&nbsp;3&nbsp;</sup></a>, perform the following:</p>
<ol>
<li>
<p>Run the following command as the SYS user to open all the containers:</p>
<pre>alter pluggable database all open;
</pre></li>
<li>
<p>Use the following command in a shell to run the <code>$ORACLE_HOME/javavm/install/update_javavm_db.sql</code> script in all the containers:</p>
<pre>perl -I $ORACLE_HOME/rdbms/admin $ORACLE_HOME/rdbms/admin/catcon.pl -b
 &lt;some_log_file_name&gt; $ORACLE_HOME/javavm/install/update_javavm_db.sql
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
Prior to running the preceding PERL command, make sure that the <code>PATH</code> variable contains the value <code>$ORACLE_HOME/bin</code> in it. You must have this <code>PATH</code> setting, so that SQL*Plus is found when you run the <code>catcon.pl</code> script.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADMIN13507" href="../ADMIN/cdb_intro.htm#ADMIN13507"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> for more information about CDB and non-CDB</div>
</li>
</ol>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABCGDHG"></a>
<div id="JJDEV01600" class="sect1">
<h2 class="sect1">Memory Model for Dedicated Mode Sessions</h2>
<p>Since Oracle Database 10<span class="italic">g</span>, the Oracle JVM has a new memory model for sessions that connect to the database through a dedicated server. The basic memory structures associated with Oracle include:</p>
<ul>
<li>
<p>System Global Area (SGA)</p>
<p>The SGA is a group of shared memory structures, known as SGA components, that contain data and control information for one Oracle Database instance. The SGA is shared by all server and background processes. Examples of data stored in the SGA include cached data blocks and shared SQL areas.</p>
</li>
<li>
<p>Program Global Areas (PGA)</p>
<p>A PGA is a memory region that contains data and control information for a server process. It is nonshared memory created by Oracle when a server process is started. Access to the PGA is exclusive to the server process. There is one PGA for each server process. Background processes also allocate their own PGAs. The total PGA memory allocated for all background and server processes attached to an Oracle instance is referred to as the <span class="bold">aggregate PGA</span>.</p>
</li>
</ul>
<p>The simplest way to manage memory is to allow the database to automatically manage and tune it for you. To do so, you set only a target memory size initialization parameter (<code>MEMORY_TARGET</code>) and a maximum memory size initialization parameter (<code>MEMORY_MAX_TARGET</code>), on most platforms. The database then tunes to the target memory size, redistributing memory as needed between the SGA and aggregate PGA. Because the target memory initialization parameter is dynamic, you can change the target memory size at any time without restarting the database. The maximum memory size serves as an upper limit so that you cannot accidentally set the target memory size too high. Because certain SGA components either cannot easily shrink or must remain at a minimum size, the database also prevents you from setting the target memory size too low.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADMIN11011" href="../ADMIN/memory.htm#ADMIN11011"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a></div>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" -->
<hr/>
<br/>
<p style="text-decoration:underline">Footnote Legend</p>
Footnote&nbsp;1:&nbsp;You cannot always define a class with the same name as one of the System classes. For the classes present in some packages, for example, <code>java.lang</code>, such definitions are explicitly prohibited by the code.<br/>
Footnote&nbsp;2:&nbsp;An Oracle database that is not a multitenant container database (CDB).<br/>
Footnote&nbsp;3:&nbsp;An Oracle Database installation that contains at least one PDB.<br/></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3995">
<tr>
<td class="cellalignment4004">
<table class="cellalignment4000">
<tr>
<td class="cellalignment3999"><a href="release_changes.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3999"><a href="chtwo.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment4006">
<table class="cellalignment3998">
<tr>
<td class="cellalignment3999"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3999"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3999"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3999"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3999"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3999"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>


</body></html>