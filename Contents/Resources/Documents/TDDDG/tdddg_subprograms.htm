<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-106203"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Developing%20Stored%20Subprograms%20and%20Packages"></a><title>Developing Stored Subprograms and Packages</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-07-01T1:46:13Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database 2 Day Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E53088-01"/>
<meta name="dcterms.isVersionOf" content="TDDDG"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="tdddg_objects.htm" title="Previous" type="text/html"/>
<link rel="Next" href="tdddg_triggers.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E53088-01.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">11/17</span> <!-- End Header -->
<script>
<!-- // <![CDATA[
window.name='tdddg_subprograms'
// ]]> -->
</script> <script>
// <![CDATA[
function footdisplay(footnum,footnote) {
    var msg = window.open('', 'NewWindow' + footnum,
        'directories=no,height=120,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');

    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">');
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>');
    msg.document.write('Footnote ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><h1>Footnote ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/body><\/html>');
    msg.document.close();
    msg.focus();
}
// ]]>
</script> <noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript>
<div id="TDDDG40000" class="chapter"><a id="CIHDFDJG"></a>
<h1 class="chapter"><span class="secnum">5</span> Developing Stored Subprograms and Packages</h1>
<p>This chapter contains:</p>
<ul>
<li>
<p><a href="#CIHGDECD">About Stored Subprograms</a></p>
</li>
<li>
<p><a href="#BABHHHIC">About Packages</a></p>
</li>
<li>
<p><a href="#BABHFBEA">About PL/SQL Identifiers</a></p>
</li>
<li>
<p><a href="#BABJDDFH">About PL/SQL Data Types</a></p>
</li>
<li>
<p><a href="#CIHCHIDB">Creating and Managing Standalone Subprograms</a></p>
</li>
<li>
<p><a href="#CIHGAGJG">Creating and Managing Packages</a></p>
</li>
<li>
<p><a href="#CIHBCBHC">Declaring and Assigning Values to Variables and Constants</a></p>
</li>
<li>
<p><a href="#CIHHFJFJ">Controlling Program Flow</a></p>
</li>
<li>
<p><a href="#CIHHCJDI">Using Records and Cursors</a></p>
</li>
<li>
<p><a href="#BABDFGAA">Using Associative Arrays</a></p>
</li>
<li>
<p><a href="#CIHIHAFG">Handling Exceptions (Runtime Errors)</a></p>
</li>
</ul>
<a id="CIHGDECD"></a>
<div id="TDDDG48000" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">About Stored Subprograms</h2>
<p>A <a id="sthref282"></a><span class="bold">subprogram</span> is a PL/SQL unit that consists of SQL and PL/SQL statements that solve a specific problem or perform a set of related tasks. A subprogram can have parameters, whose values are supplied by the invoker. A subprogram can be either a <a id="sthref283"></a>procedure or a <a id="sthref284"></a>function. Typically, you use a procedure to perform an action and a function to compute and return a value.</p>
<p>A <a id="sthref285"></a><a id="sthref286"></a><span class="bold">stored subprogram</span> is a subprogram that is stored in the database. Because they are stored in the database, stored programs can be used as building blocks for many different database applications. (A subprogram that is declared within another subprogram, or within an anonymous block, is called a <span class="bold">nested subprogram</span> or <a id="sthref287"></a><a id="sthref288"></a><span class="bold">local subprogram</span>. It cannot be invoked from outside the subprogram or block in which it is declared. An <a id="sthref289"></a><a id="sthref290"></a><a id="sthref291"></a><span class="bold">anonymous block</span> is a block that is not stored in the database.)</p>
<p>There are two kinds of stored subprograms:</p>
<ul>
<li>
<p><a id="sthref292"></a><span class="bold">Standalone subprogram</span>, which is created at schema level</p>
</li>
<li>
<p><a id="sthref293"></a><a id="sthref294"></a><span class="bold">Package subprogram</span>, which is created inside a package</p>
</li>
</ul>
<p>Standalone subprograms are useful for testing pieces of program logic, but when you are sure that they work as intended, Oracle recommends that you put them into packages.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink CNCPT1776" href="../CNCPT/srvrside.htm#CNCPT1776"><span class="italic">Oracle Database Concepts</span></a> for general information about stored subprograms</p>
</li>
<li>
<p><a class="olink LNPLS008" href="../LNPLS/overview.htm#LNPLS008"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for complete information about PL/SQL subprograms</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="BABHHHIC"></a>
<div id="TDDDG99991" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">About Packages</h2>
<p>A <a id="sthref295"></a><span class="bold">package</span> is a PL/SQL unit that consists of related subprograms and the declared cursors and variables that they use.</p>
<p><a id="sthref296"></a>Oracle recommends that you put your subprograms into packages. Some reasons are:</p>
<ul>
<li>
<p>Packages allow you to hide implementation details from client programs.</p>
<p>Hiding implementation details from client programs is a widely accepted best practice. Many Oracle customers follow this practice strictly, allowing client programs to access the database only by invoking PL/SQL subprograms. Some customers allow client programs to use <code>SELECT</code> statements to retrieve information from database tables, but require them to invoke PL/SQL subprograms for all business functions that change the database.</p>
</li>
<li>
<p>Package subprograms must be qualified with package names when invoked from outside the package, which ensures that their names will always work when invoked from outside the package.</p>
<p>For example, suppose that you developed a schema-level procedure named <code>CONTINUE</code> before Oracle Database 11<span class="italic">g</span> . Oracle Database 11<span class="italic">g</span> introduced the <code>CONTINUE</code> statement. Therefore, if you ported your code to Oracle Database 11<span class="italic">g</span> , it would no longer compile. However, if you had developed your procedure inside a package, your code would refer to the procedure as <code><span class="codeinlineitalic">package_name</span></code>.<code>CONTINUE</code>, so the code would still compile.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle Database supplies many PL/SQL packages to extend database functionality and provide PL/SQL access to SQL features. You can use the supplied packages when creating your applications or for ideas in creating your own stored procedures. For information about these packages, see <a class="olink ARPLS" href="../ARPLS/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink CNCPT1784" href="../CNCPT/srvrside.htm#CNCPT1784"><span class="italic">Oracle Database Concepts</span></a> for general information about packages</p>
</li>
<li>
<p><a class="olink LNPLS00902" href="../LNPLS/packages.htm#LNPLS00902"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more reasons to use packages</p>
</li>
<li>
<p><a class="olink LNPLS009" href="../LNPLS/overview.htm#LNPLS009"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for complete information about PL/SQL packages</p>
</li>
<li>
<p><a class="olink ARPLS" href="../ARPLS/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for complete information about the PL/SQL packages that Oracle provides</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="BABHFBEA"></a>
<div id="TDDDG42210" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">About PL/SQL Identifiers</h2>
<p><a id="sthref297"></a><a id="sthref298"></a>Every PL/SQL subprogram, package, parameter, variable, constant, exception, and declared cursor has a name, which is a PL/SQL identifier.</p>
<p>The minimum length of an identifier is one character; the maximum length is 30 characters. The first character must be a letter, but each later character can be either a letter, numeral, dollar sign ($), underscore (_), or number sign (#). For example, these are acceptable identifiers:</p>
<pre>X
t2
phone#
credit_limit
LastName
oracle$number
money$$$tree
SN##
try_again_
</pre>
<p><a id="sthref299"></a>PL/SQL is not case-sensitive for identifiers. For example, PL/SQL considers these to be the same:</p>
<pre>lastname
LastName
LASTNAME
</pre>
<p>You cannot use a PL/SQL reserved word as an identifier. You can use a PL/SQL keyword as an identifier, but it is not recommended. For lists of PL/SQL reserved words and keywords, see <a class="olink LNPLS019" href="../LNPLS/reservedwords.htm#LNPLS019"><span class="italic">Oracle Database PL/SQL Language Reference</span></a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink LNPLS99973" href="../LNPLS/fundamentals.htm#LNPLS99973"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for additional general information about PL/SQL identifiers</p>
</li>
<li>
<p><a class="olink LNPLS99973" href="../LNPLS/fundamentals.htm#LNPLS99973"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for additional information about PL/SQL naming conventions</p>
</li>
<li>
<p><a class="olink LNPLS99945" href="../LNPLS/fundamentals.htm#LNPLS99945"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for information about the scope and visibility of PL/SQL identifiers</p>
</li>
<li>
<p><a class="olink LNPLS01213" href="../LNPLS/tuning.htm#LNPLS01213"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for information how to collect data on PL/SQL identifiers</p>
</li>
<li>
<p><a class="olink LNPLS017" href="../LNPLS/nameresolution.htm#LNPLS017"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for information about how PL/SQL resolves identifier names</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="BABJDDFH"></a>
<div id="TDDDG42100" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">About PL/SQL Data Types</h2>
<p><a id="sthref300"></a><a id="sthref301"></a><a id="sthref302"></a><a id="sthref303"></a><a id="sthref304"></a><a id="sthref305"></a>Every PL/SQL constant, variable, subprogram parameter, and <a id="sthref306"></a>function return value has a data type that determines its storage format, constraints, valid range of values, and operations that can be performed on it.</p>
<p>A PL/SQL data type is either a SQL data type (such as <code>VARCHAR2</code>, <code>NUMBER</code>, or <code>DATE</code>) or a PL/SQL-only data type. The latter include <code>BOOLEAN</code>, <code>RECORD</code>, <code>REF</code> <code>CURSOR</code>, and many predefined subtypes. PL/SQL also lets you define your own subtypes.</p>
<p>A <a id="sthref307"></a><a id="sthref308"></a><span class="bold">subtype</span> is a subset of another data type, which is called its <a id="sthref309"></a><a id="sthref310"></a><span class="bold">base type</span>. A subtype has the same valid operations as its base type, but only a subset of its valid values. Subtypes can increase reliability, provide compatibility with ANSI/ISO types, and improve readability by indicating the intended use of constants and variables.</p>
<p>The predefined numeric subtype <a id="sthref311"></a><code>PLS_INTEGER</code> is especially useful, because its operations use hardware arithmetic, rather than the library arithmetic that its base type uses.</p>
<p>You cannot use PL/SQL-only data types at schema level (that is, in tables or standalone subprograms). Therefore, to use these data types in a stored subprogram, you must put them in a package.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink LNPLS003" href="../LNPLS/datatypes.htm#LNPLS003"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for general information about PL/SQL data types</p>
</li>
<li>
<p><a class="olink LNPLS00305" href="../LNPLS/datatypes.htm#LNPLS00305"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for information about the <code>PLS_INTEGER</code> data type</p>
</li>
<li>
<p><a href="tdddg_objects.htm#BABDACBC">&#34;About SQL Data Types&#34;</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="CIHCHIDB"></a>
<div id="TDDDG41000" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Creating and Managing Standalone Subprograms</h2>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#BABJGJGJ">About Subprogram Structure</a></p>
</li>
<li>
<p><a href="#BABDHFAC">Tutorial: Creating a Standalone Procedure</a></p>
</li>
<li>
<p><a href="#BABCIEHF">Tutorial: Creating a Standalone Function</a></p>
</li>
<li>
<p><a href="#CIHIEFDF">Changing Standalone Subprograms</a></p>
</li>
<li>
<p><a href="#CIHBFEHB">Tutorial: Testing a Standalone Function</a></p>
</li>
<li>
<p><a href="#CIHDBEAI">Dropping Standalone Subprograms</a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
To do the tutorials in this document, you must be connected to Oracle Database as the user <code>HR</code> from SQL&nbsp;Developer.</div>
<a id="BABJGJGJ"></a>
<div id="TDDDG42205" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">About Subprogram Structure</h3>
<p>A <a id="sthref312"></a><a id="sthref313"></a>subprogram follows PL/SQL block structure; that is, it has:</p>
<ul>
<li>
<p><a id="sthref314"></a><span class="bold">Declarative part</span> (optional)</p>
<p>The declarative part contains declarations of types, constants, variables, exceptions, declared cursors, and nested subprograms. These items are local to the subprogram and cease to exist when the subprogram completes execution.</p>
</li>
<li>
<p><a id="sthref315"></a><span class="bold">Executable part</span> (required)</p>
<p>The executable part contains statements that assign values, control execution, and manipulate data.</p>
</li>
<li>
<p><a id="sthref316"></a><span class="bold">Exception-handling part</span> (optional)</p>
<p>The exception-handling part contains code that handles exceptions (runtime errors).</p>
</li>
</ul>
<p><a id="sthref317"></a><span class="bold">Comments</span> can appear anywhere in PL/SQL code. The PL/SQL compiler ignores them. Adding comments to your program promotes readability and aids understanding. A <a id="sthref318"></a><span class="bold">single-line comment</span> starts with a double hyphen (<code>--</code>) and extends to the end of the line. A <a id="sthref319"></a><span class="bold">multiline comment</span> starts with a slash and asterisk (<code>/*</code>) and ends with an asterisk and a slash (<code>*/</code>).</p>
<p>The structure of a <a id="sthref320"></a>procedure is:</p>
<pre>  PROCEDURE <span class="italic">name</span> [ ( <span class="italic">parameter_list</span> ) ]
  { IS | AS }
    [ <span class="italic">declarative_part</span> ]
  BEGIN  -- executable part begins
    <span class="italic">statement</span>; [ <span class="italic">statement</span>; ]...
  [ EXCEPTION -- executable part ends, exception-handling part begins]
    <span class="italic">exception_handler</span>; [ <span class="italic">exception_handler</span>; ]... ]
  END; /* exception-handling part ends if it exists;
          otherwise, executable part ends */
</pre>
<p>The structure of a <a id="sthref321"></a>function is like that of a procedure, except that it includes a <a id="sthref322"></a><code>RETURN</code> clause and at least one <a id="sthref323"></a><code>RETURN</code> statement (and some optional clauses that are beyond the scope of this document):</p>
<pre>  FUNCTION <span class="italic">name</span> [ ( <span class="italic">parameter_list</span> ) ] <span class="bold">RETURN</span> <span class="codeinlineboldital">data_type</span> [ <span class="italic">clauses</span> ]
  { IS | AS }
    [ <span class="italic">declarative_part</span> ]
  BEGIN  -- executable part begins
    -- <span class="bold">at least one statement must be a RETURN statement</span>
    <span class="italic">statement</span>; [ <span class="italic">statement</span>; ]...
  [ EXCEPTION -- executable part ends, exception-handling part begins]
    <span class="italic">exception_handler</span>; [ <span class="italic">exception_handler</span>; ]... ]
  END; /* exception-handling part ends if it exists;
          otherwise, executable part ends */
</pre>
<p>The code that begins with <code>PROCEDURE</code> or <code>FUNCTION</code> and ends before <code>IS</code> or <code>AS</code> is the <a id="sthref324"></a><a id="sthref325"></a><span class="bold">subprogram signature</span>. The declarative, executable, and exception-handling parts comprise the <a id="sthref326"></a><a id="sthref327"></a><span class="bold">subprogram body</span>. The syntax of <code><span class="codeinlineitalic">exception-handler</span></code> is in <a href="#BABFIBHE">&#34;About Exceptions and Exception Handlers&#34;</a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNPLS99897" href="../LNPLS/subprograms.htm#LNPLS99897"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information about subprogram parts</div>
</div>
<!-- class="sect2" -->
<a id="BABDHFAC"></a>
<div id="TDDDG99975" class="sect2">
<h3 class="sect2">Tutorial: Creating a Standalone Procedure</h3>
<p>To create a <a id="sthref328"></a>standalone procedure, use either the SQL&nbsp;Developer tool <a id="sthref329"></a>Create Procedure or the DDL statement <a id="sthref330"></a><code>CREATE</code> <code>PROCEDURE</code>.</p>
<p>This tutorial shows how to use the Create Procedure tool to create a standalone procedure named <code>ADD_EVALUATION</code> that adds a row to the <code>EVALUATIONS</code> table created in <a href="tdddg_objects.htm#CHDJCGGG">Example 4-1</a>.</p>
<p class="subhead2"><a id="TDDDG215"></a>To create a standalone procedure using Create Procedure tool:</p>
<ol>
<li>
<p>In the Connections frame, expand <span class="bold">hr_conn</span>.</p>
</li>
<li>
<p>In the list of schema object types, right-click <span class="bold">Procedures</span>.</p>
</li>
<li>
<p>In the list of choices, click <span class="bold">New Procedure</span>.</p>
<p>The Create Procedure window opens.</p>
</li>
<li>
<p>For Schema, accept the default value, <code>HR</code>.</p>
</li>
<li>
<p>For Name, change <code>PROCEDURE1</code> to <code>ADD_EVALUATION</code>.</p>
</li>
<li id="BABJCIIF">
<p>Click the icon <span class="bold">Add Parameter</span>.</p>
<p>A row appears under the column headings. Its fields have these default values: Name, <code>PARAM1</code>; Mode, <code>IN</code>; No Copy, deselected; Data Type, <code>VARCHAR2</code>; Default Value, empty.</p>
</li>
<li>
<p>For Name, change <code>PARAM1</code> to <code>EVALUATION_ID</code>.</p>
</li>
<li>
<p>For Mode, accept the default value, <code>IN</code>.</p>
</li>
<li>
<p>For Data Type, select <code>NUMBER</code> from the menu.</p>
</li>
<li id="BABFCHHF">
<p>Leave Default Value empty.</p>
</li>
<li>
<p>Add a second parameter by repeating steps&nbsp;<a href="#BABJCIIF">6</a> through <a href="#BABFCHHF">10</a> with the Name <code>EMPLOYEE_ID</code> and the Data Type <code>NUMBER</code>.</p>
</li>
<li>
<p>Add a third parameter by repeating steps&nbsp;<a href="#BABJCIIF">6</a> through <a href="#BABFCHHF">10</a> with the Name <code>EVALUATION_DATE</code> and the Data Type <code>DATE</code>.</p>
</li>
<li>
<p>Add a fourth parameter by repeating steps&nbsp;<a href="#BABJCIIF">6</a> through <a href="#BABFCHHF">10</a> with the Name <code>JOB_ID</code> and the Data Type <code>VARCHAR2</code>.</p>
</li>
<li>
<p>Add a fifth parameter by repeating steps&nbsp;<a href="#BABJCIIF">6</a> through <a href="#BABFCHHF">10</a> with the Name <code>MANAGER_ID</code> and the Data Type <code>NUMBER</code>.</p>
</li>
<li>
<p>Add a sixth parameter by repeating steps&nbsp;<a href="#BABJCIIF">6</a> through <a href="#BABFCHHF">10</a> with the Name <code>DEPARTMENT_ID</code> and the Data Type <code>NUMBER</code>.</p>
</li>
<li>
<p>Add a seventh parameter by repeating steps&nbsp;<a href="#BABJCIIF">6</a> through <a href="#BABFCHHF">10</a> with the Name <code>TOTAL_SCORE</code> and the Data Type <code>NUMBER</code>.</p>
</li>
<li>
<p>Click <span class="bold">OK</span>.</p>
<p>The <code>ADD_EVALUATION</code> pane opens, showing the <code>CREATE</code> <code>PROCEDURE</code> statement that created the procedure:</p>
<pre><span class="bold">CREATE OR REPLACE PROCEDURE</span> ADD_EVALUATION
(
  EVALUATION_ID <span class="bold">IN NUMBER</span>
, EMPLOYEE_ID <span class="bold">IN NUMBER</span>
, EVALUATION_DATE <span class="bold">IN DATE</span>
, JOB_ID <span class="bold">IN VARCHAR2</span>
, MANAGER_ID <span class="bold">IN NUMBER</span>
, DEPARTMENT_ID <span class="bold">IN NUMBER</span>
, TOTAL_SCORE <span class="bold">IN NUMBER</span>
) <span class="bold">AS</span>
<span class="bold">BEGIN</span>
  <span class="bold">NULL</span>;
<span class="bold">END</span> ADD_EVALUATION;
</pre>
<p>The title of the <code>ADD_EVALUATION</code> pane is in italic font, indicating that the procedure is not yet saved in the database.</p>
<p>Because the only statement in the execution part of the procedure is <code>NULL</code>, the procedure does nothing.</p>
</li>
<li>
<p>Replace <code>NULL</code> with this statement:</p>
<pre>INSERT INTO EVALUATIONS (
   evaluation_id,
   employee_id,
   evaluation_date,
   job_id,
   manager_id,
   department_id,
   total_score 
)
VALUES (
  ADD_EVALUATION.evaluation_id,
  ADD_EVALUATION.employee_id,
  ADD_EVALUATION.evaluation_date,
  ADD_EVALUATION.job_id,
  ADD_EVALUATION.manager_id,
  ADD_EVALUATION.department_id,
  ADD_EVALUATION.total_score
);
</pre>
<p>(Qualifying the parameter names with the procedure name ensures that they are not confused with the columns that have the same names.)</p>
</li>
<li>
<p>From the File menu, select <span class="bold">Save</span>.</p>
<p>Oracle Database compiles the procedure and saves it. The title of the <code>ADD_EVALUATION</code> pane is no longer in italic font. The Message - Log has the message &#34;Compiled&#34;.</p>
</li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink RPTUG20600" href="../RPTUG/tut_library.htm#RPTUG20600"><span class="italic">Oracle SQL Developer User&#39;s Guide</span></a> for another example of using SQL&nbsp;Developer to create a standalone procedure</p>
</li>
<li>
<p><a href="tdddg_objects.htm#CIHGAJDJ">&#34;About Data Definition Language (DDL) Statements&#34;</a> for general information that applies to the <code>CREATE</code> <code>PROCEDURE</code> statement</p>
</li>
<li>
<p><a class="olink LNPLS01373" href="../LNPLS/create_procedure.htm#LNPLS01373"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for information about the <code>CREATE</code> <code>PROCEDURE</code> statement</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="BABCIEHF"></a>
<div id="TDDDG99984" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Tutorial: Creating a Standalone Function</h3>
<p>To create a <a id="sthref331"></a>standalone function, use either the SQL&nbsp;Developer tool <a id="sthref332"></a>Create Function or the DDL statement <a id="sthref333"></a><code>CREATE</code> <code>FUNCTION</code>.</p>
<p>This tutorial shows how to use the Create Function tool to create a standalone function named <code>CALCULATE_SCORE</code> that has three parameters and returns a value of type <code>NUMBER</code>.</p>
<p class="subhead2"><a id="TDDDG216"></a>To create a standalone function using Create Function tool:</p>
<ol>
<li>
<p>In the Connections frame, expand <span class="bold">hr_conn</span>.</p>
</li>
<li>
<p>In the list of schema object types, right-click <span class="bold">Functions</span>.</p>
</li>
<li>
<p>In the list of choices, click <span class="bold">New Function</span>.</p>
<p>The Create Function window opens.</p>
</li>
<li>
<p>For Schema, accept the default value, <code>HR</code>.</p>
</li>
<li>
<p>For Name, change <code>FUNCTION1</code> to <code>CALCULATE_SCORE</code>.</p>
</li>
<li>
<p>For Return Type, select <code>NUMBER</code> from the menu.</p>
</li>
<li id="BABBECCF">
<p>Click the icon <span class="bold">Add Parameter</span>.</p>
<p>A row appears under the column headings. Its fields have these default values: Name, <code>PARAM1</code>; Mode, <code>IN</code>; No Copy, deselected; Data Type, <code>VARCHAR2</code>; Default Value, empty.</p>
</li>
<li>
<p>For Name, change <code>PARAM1</code> to <code>cat</code>.</p>
</li>
<li>
<p>For Mode, accept the default value, <code>IN</code>.</p>
</li>
<li>
<p>For Data Type, accept the default, <code>VARCHAR2</code>.</p>
</li>
<li id="BABFDIBH">
<p>Leave Default Value empty.</p>
</li>
<li>
<p>Add a second parameter by repeating steps&nbsp;<a href="#BABBECCF">7</a> through <a href="#BABFDIBH">11</a> with the Name <code>score</code> and the Type <code>NUMBER</code>.</p>
</li>
<li>
<p>Add a third parameter by repeating steps&nbsp;<a href="#BABBECCF">7</a> through <a href="#BABFDIBH">11</a> with the Name <code>weight</code> and the Type <code>NUMBER</code>.</p>
</li>
<li>
<p>Click <span class="bold">OK</span>.</p>
<p>The <code>CALCULATE_SCORE</code> pane opens, showing the <code>CREATE</code> <code>FUNCTION</code> statement that created the function:</p>
<pre><span class="bold">CREATE OR REPLACE FUNCTION</span> CALCULATE_SCORE
(
  CAT <span class="bold">IN VARCHAR2</span>
, SCORE <span class="bold">IN NUMBER</span>
, WEIGHT <span class="bold">IN NUMBER</span>
) <span class="bold">RETURN NUMBER AS</span>
<span class="bold">BEGIN</span>
  <span class="bold">RETURN NULL</span>;
<span class="bold">END</span> CALCULATE_SCORE;
</pre>
<p>The title of the <code>CALCULATE_SCORE</code> pane is in italic font, indicating that the function is not yet saved in the database.</p>
<p>Because the only statement in the execution part of the function is <code>RETURN</code> <code>NULL</code>, the function does nothing.</p>
</li>
<li>
<p>Replace <code>NULL</code> with <code>score</code> <code>*</code> <code>weight</code>.</p>
</li>
<li>
<p>From the File menu, select <span class="bold">Save</span>.</p>
<p>Oracle Database compiles the function and saves it. The title of the <code>CALCULATE_SCORE</code> pane is no longer in italic font. The Message - Log has the message &#34;Compiled&#34;.</p>
</li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="tdddg_objects.htm#CIHGAJDJ">&#34;About Data Definition Language (DDL) Statements&#34;</a> for general information that applies to the <code>CREATE</code> <code>FUNCTION</code> statement</p>
</li>
<li>
<p><a class="olink LNPLS01370" href="../LNPLS/create_function.htm#LNPLS01370"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for information about the <code>CREATE</code> <code>FUNCTION</code> statement</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CIHIEFDF"></a>
<div id="TDDDG41200" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Changing Standalone Subprograms</h3>
<p><a id="sthref334"></a>To change a standalone subprogram, use either the SQL&nbsp;Developer tool <a id="sthref335"></a>Edit or the DDL statement <a id="sthref336"></a><code>ALTER</code> <code>PROCEDURE</code> or <a id="sthref337"></a><code>ALTER</code> <code>FUNCTION</code>.</p>
<p class="subhead2"><a id="TDDDG217"></a>To change a standalone subprogram using the Edit tool:</p>
<ol>
<li>
<p>In the Connections frame, expand <span class="bold">hr_conn</span>.</p>
</li>
<li>
<p>In the list of schema object types, expand either <span class="bold">Functions</span> or <span class="bold">Procedures</span>.</p>
<p>A list of functions or procedures appears.</p>
</li>
<li>
<p>Click the function or procedure to change.</p>
<p>To the right of the Connections frame, a frame appears. Its top tab has the name of the subprogram to change. The Code pane shows the code that created the subprogram.</p>
<p>The Code pane is in write mode. (Clicking the pencil icon switches the mode from write mode to read only, or the reverse.)</p>
</li>
<li>
<p>In the Code pane, change the code.</p>
<p>The title of the pane changes to italic font, indicating that the change is not yet saved in the database.</p>
</li>
<li>
<p>From the File menu, select <span class="bold">Save</span>.</p>
<p>Oracle Database compiles the subprogram and saves it. The title of the pane is no longer in italic font. The Message - Log has the message &#34;Compiled&#34;.</p>
</li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="tdddg_objects.htm#CIHGAJDJ">&#34;About Data Definition Language (DDL) Statements&#34;</a> for general information that applies to the <code>ALTER</code> <code>PROCEDURE</code> and <code>ALTER</code> <code>FUNCTION</code> statements</p>
</li>
<li>
<p><a class="olink LNPLS99997" href="../LNPLS/alter_procedure.htm#LNPLS99997"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for information about the <code>ALTER</code> <code>PROCEDURE</code> statement</p>
</li>
<li>
<p><a class="olink LNPLS99999" href="../LNPLS/alter_function.htm#LNPLS99999"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for information about the <code>ALTER</code> <code>FUNCTION</code> statement</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CIHBFEHB"></a>
<div id="TDDDG41400" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Tutorial: Testing a Standalone Function</h3>
<p>This tutorial shows how to use the SQL&nbsp;Developer tool <a id="sthref338"></a>Run to test the standalone function <code>CALCULATE_SCORE</code>.</p>
<p class="subhead2"><a id="TDDDG218"></a>To test the CALCULATE_SCORE function using the Run tool:</p>
<ol>
<li>
<p>In the Connections frame, expand <span class="bold">hr_conn</span>.</p>
</li>
<li>
<p>In the list of schema object types, expand <span class="bold">Functions</span>.</p>
</li>
<li>
<p>In the list of functions, right-click <span class="bold">CALCULATE_SCORE</span>.</p>
</li>
<li>
<p>In the list of choices, click <span class="bold">Run</span>.</p>
<p>The Run PL/SQL window opens. Its PL/SQL Block frame includes this code:</p>
<pre>v_Return := CALCULATE_SCORE (
    CAT =&gt; CAT,
    SCORE =&gt; SCORE,
    WEIGHT =&gt; WEIGHT
  );
</pre></li>
<li>
<p>Change the values of <code>SCORE</code> and <code>WEIGHT</code> to 8 and 0.2, respectively:</p>
<pre>v_Return := CALCULATE_SCORE (
    CAT =&gt; CAT,
    SCORE =&gt; <span class="bold">8</span>,
    WEIGHT =&gt; <span class="bold">0.2</span>
  );
</pre></li>
<li>
<p>Click <span class="bold">OK</span>.</p>
<p>Under the Code pane, the Running window opens, showing this result:</p>
<pre>Connecting to the database hr_conn.
Process exited.
Disconnecting from the database hr_conn.
</pre>
<p>To the right of the tab Running is the tab Output Variables.</p>
</li>
<li>
<p>Click the tab <span class="bold">Output Variables</span>.</p>
<p>Two frames appear, Variable and Value, which contain <code>&lt;Return Value&gt;</code> and <code>1.6</code>, respectively.</p>
</li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink RPTUG10600" href="../RPTUG/intro.htm#RPTUG10600"><span class="italic">Oracle SQL Developer User&#39;s Guide</span></a> for information about using SQL&nbsp;Developer to run and debug procedures and functions</div>
</div>
<!-- class="sect2" -->
<a id="CIHDBEAI"></a>
<div id="TDDDG41300" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Dropping Standalone Subprograms</h3>
<p><a id="sthref339"></a>To drop a standalone subprogram, use either the SQL&nbsp;Developer Connections frame and <a id="sthref340"></a>Drop tool, or the DDL statement <a id="sthref341"></a><code>DROP</code> <code>PROCEDURE</code> or <a id="sthref342"></a><code>DROP</code> <code>FUNCTION</code>.</p>
<div class="infobox-note">
<p class="notep1">Caution:</p>
Do not drop the procedure <code>ADD_EVALUATION</code> or the function <code>CALCULATE_SCORE</code>&mdash;you need them for later tutorials. If you want to practice dropping subprograms, create simple ones and then drop them.</div>
<p class="subhead2"><a id="TDDDG219"></a>To drop a standalone subprogram using the Drop tool:</p>
<ol>
<li>
<p>In the Connections frame, expand <span class="bold">hr_conn</span>.</p>
</li>
<li>
<p>In the list of schema object types, expand either <span class="bold">Functions</span> or <span class="bold">Procedures</span>.</p>
</li>
<li>
<p>In the list of functions or procedures, right-click the name of the function or procedure to drop.</p>
</li>
<li>
<p>In the list of choices, click <span class="bold">Drop</span>.</p>
</li>
<li>
<p>In the Drop window, click <span class="bold">Apply</span>.</p>
</li>
<li>
<p>In the Confirmation window, click <span class="bold">OK</span>.</p>
</li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="tdddg_objects.htm#CIHGAJDJ">&#34;About Data Definition Language (DDL) Statements&#34;</a> for general information that applies to the <code>DROP</code> <code>PROCEDURE</code> and <code>DROP</code> <code>FUNCTION</code> statements</p>
</li>
<li>
<p><a class="olink SQLRF01528" href="../SQLRF/statements_8029.htm#SQLRF01528"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about the <code>DROP</code> <code>PROCEDURE</code> statement</p>
</li>
<li>
<p><a class="olink SQLRF01518" href="../SQLRF/statements_8017.htm#SQLRF01518"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about the <code>DROP</code> <code>FUNCTION</code> statement</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHGAGJG"></a>
<div id="TDDDG47000" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Creating and Managing Packages</h2>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#BABDJEFH">About Package Structure</a></p>
</li>
<li>
<p><a href="#CIHHDBFE">Tutorial: Creating a Package Specification</a></p>
</li>
<li>
<p><a href="#CIHIEAGC">Tutorial: Changing a Package Specification</a></p>
</li>
<li>
<p><a href="#BABEIAGI">Tutorial: Creating a Package Body</a></p>
</li>
<li>
<p><a href="#CIHHAIBE">Dropping a Package</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIHBGDBA">&#34;Tutorial: Declaring Variables and Constants in a Subprogram&#34;</a>, which shows how to change a package body</div>
<a id="BABDJEFH"></a>
<div id="TDDDG99993" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">About Package Structure</h3>
<p><a id="sthref343"></a>A package always has a specification, and it usually has a body.</p>
<p>The <a id="sthref344"></a><span class="bold">package specification</span> defines the package, declaring the types, variables, constants, exceptions, declared cursors, and subprograms that can be referenced from outside the package. A package specification is an <a id="sthref345"></a><a id="sthref346"></a><span class="bold">application program interface (API)</span>: It has all the information that client programs need to invoke its subprograms, but no information about their implementation.</p>
<p>The <a id="sthref347"></a><span class="bold">package body</span> defines the queries for the declared cursors, and the code for the subprograms, that are declared in the package specification (therefore, a package with neither declared cursors nor subprograms does not need a body). The package body can also define <a id="sthref348"></a><span class="bold">local subprograms</span>, which are not declared in the specification and can be invoked only by other subprograms in the package. Package body contents are hidden from client programs. You can change the package body without invalidating the applications that call the package.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink LNPLS00904" href="../LNPLS/packages.htm#LNPLS00904"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information about the package specification</p>
</li>
<li>
<p><a class="olink LNPLS00905" href="../LNPLS/packages.htm#LNPLS00905"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information about the package body</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CIHHDBFE"></a>
<div id="TDDDG47200" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Tutorial: Creating a Package Specification</h3>
<p>To create a <a id="sthref349"></a>package specification, use either the SQL&nbsp;Developer tool <a id="sthref350"></a>Create Package or the DDL statement <a id="sthref351"></a><code>CREATE</code> <code>PACKAGE</code>.</p>
<p>This tutorial shows how to use the Create Package tool to create a specification for a package named <code>EMP_EVAL</code>, which appears in many tutorials and examples in this document.</p>
<p class="subhead2"><a id="TDDDG220"></a>To create a package specification using Create Package tool:</p>
<ol>
<li>
<p>In the Connections frame, expand <span class="bold">hr_conn</span>.</p>
</li>
<li>
<p>In the list of schema object types, right-click <span class="bold">Packages</span>.</p>
</li>
<li>
<p>In the list of choices, click <span class="bold">New Package</span>.</p>
<p>The Create Package window opens. The field Schema has the value <code>HR</code>, the field Name has the default value <code>PACKAGE1</code>, and the check box Add New Source In Lowercase is deselected.</p>
</li>
<li>
<p>For Schema, accept the default value, <code>HR</code>.</p>
</li>
<li>
<p>For Name, change <code>PACKAGE1</code> to <code>EMP_EVAL</code>.</p>
</li>
<li>
<p>Click <span class="bold">OK</span>.</p>
<p>The <code>EMP_EVAL</code> pane opens, showing the <code>CREATE</code> <code>PACKAGE</code> statement that created the package:</p>
<pre>CREATE OR REPLACE PACKAGE emp_eval AS
 
  /* TODO enter package declarations (types, exceptions, methods etc) here */
 
END emp_eval;
</pre>
<p>The title of the pane is in italic font, indicating that the package is not saved to the database.</p>
</li>
<li>
<p>(Optional) In the <code>CREATE</code> <code>PACKAGE</code> statement, replace the comment with declarations.</p>
<p>If you do not do this step now, you can do it later, as in <a href="#CIHIEAGC">&#34;Tutorial: Changing a Package Specification&#34;</a>.</p>
</li>
<li>
<p>From the File menu, select <span class="bold">Save</span>.</p>
<p>Oracle Database compiles the package and saves it. The title of the <code>EMP_EVAL</code> pane is no longer in italic font.</p>
</li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNPLS01371" href="../LNPLS/create_package.htm#LNPLS01371"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for information about the <code>CREATE</code> <code>PACKAGE</code> statement (for the package specification)</div>
</div>
<!-- class="sect2" -->
<a id="CIHIEAGC"></a>
<div id="TDDDG47300" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Tutorial: Changing a Package Specification</h3>
<p>To change a <a id="sthref352"></a>package specification, use either the SQL&nbsp;Developer tool Edit or the DDL statement <a id="sthref353"></a><code>CREATE</code> <code>PACKAGE</code> with the <code>OR</code> <code>REPLACE</code> clause.</p>
<p>This tutorial shows how to use the Edit tool to change the specification for the <code>EMP_EVAL</code> package, which appears in many tutorials and examples in this document. Specifically, the tutorial shows how to add declarations for a procedure, <code>EVAL_DEPARTMENT</code>, and a function, <code>CALCULATE_SCORE</code>.</p>
<p class="subhead2"><a id="TDDDG221"></a>To change EMP_EVAL package specification using the Edit tool:</p>
<ol>
<li>
<p>In the Connections frame, expand <span class="bold">hr_conn</span>.</p>
</li>
<li>
<p>In the list of schema object types, expand <span class="bold">Packages</span>.</p>
</li>
<li>
<p>In the list of packages, right-click <span class="bold">EMP_EVAL</span>.</p>
</li>
<li>
<p>In the list of choices, click <span class="bold">Edit</span>.</p>
<p>The <code>EMP_EVAL</code> pane opens, showing the <code>CREATE</code> <code>PACKAGE</code> statement that created the package:</p>
<pre>CREATE OR REPLACE PACKAGE emp_eval AS
 
  /* TODO enter package declarations (types, exceptions, methods etc) here */
 
END emp_eval;
</pre>
<p>The title of the pane is not in italic font, indicating that the package is saved in the database.</p>
</li>
<li>
<p>In the <code>EMP_EVAL</code> pane, replace the comment with this code:</p>
<pre>PROCEDURE eval_department ( dept_id IN NUMBER );

FUNCTION calculate_score ( evaluation_id IN NUMBER
                         , performance_id IN NUMBER)
                         RETURN NUMBER;
</pre>
<p>The title of the <code>EMP_EVAL</code> pane changes to italic font, indicating that the changes have not been saved to the database.</p>
</li>
<li>
<p>Click the icon <span class="bold">Compile</span>.</p>
<p>The changed package specification compiles and is saved to the database. The title of the <code>EMP_EVAL</code> pane is no longer in italic font.</p>
</li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNPLS01371" href="../LNPLS/create_package.htm#LNPLS01371"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for information about the <code>CREATE</code> <code>PACKAGE</code> statement with the <code>OR</code> <code>REPLACE</code> clause</div>
</div>
<!-- class="sect2" -->
<a id="BABEIAGI"></a>
<div id="TDDDG99992" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Tutorial: Creating a Package Body</h3>
<p>To create a <a id="sthref354"></a>package body, use either the SQL&nbsp;Developer tool <a id="sthref355"></a>Create Body or the DDL statement <a id="sthref356"></a><code>CREATE</code> <code>PACKAGE</code> <code>BODY</code>.</p>
<p>This tutorial shows how to use the Create Body tool to create a body for the <code>EMP_EVAL</code> package, which appears in many examples and tutorials in this document.</p>
<p class="subhead2"><a id="TDDDG222"></a>To create a body for the package EMP_EVAL using the Create Body tool:</p>
<ol>
<li>
<p>In the Connections frame, expand <span class="bold">hr_conn</span>.</p>
</li>
<li>
<p>In the list of schema object types, expand <span class="bold">Packages</span>.</p>
</li>
<li>
<p>In the list of packages, right-click <span class="bold">EMP_EVAL</span>.</p>
</li>
<li>
<p>In the list of choices, click <span class="bold">Create Body</span>.</p>
<p>The <code>EMP_EVAL</code> Body pane appears, showing the automatically generated code for the package body:</p>
<pre>CREATE OR REPLACE
PACKAGE BODY EMP_EVAL AS
 
  PROCEDURE eval_department(dept_id IN NUMBER) AS
  BEGIN
    -- TODO implementation required for PROCEDURE EMP_EVAL.eval_department
    NULL;
  END eval_department;
 
  FUNCTION calculate_score ( evaluation_id IN NUMBER
                           , performance_id IN NUMBER)
                           RETURN NUMBER AS
  BEGIN
    -- TODO implementation required for FUNCTION EMP_EVAL.calculate_score
    RETURN NULL;
  END calculate_score;

END EMP_EVAL;
</pre>
<p>The title of the pane is in italic font, indicating that the code is not saved in the database.</p>
</li>
<li>
<p>(Optional) In the <code>CREATE</code> <code>PACKAGE</code> <code>BODY</code> statement:</p>
<ul>
<li>
<p>Replace the comments with executable statements.</p>
</li>
<li>
<p>(Optional) In the executable part of the procedure, either delete <code>NULL</code> or replace it with an executable statement.</p>
</li>
<li>
<p>(Optional) In the executable part of the function, either replace <code>NULL</code> with another expression.</p>
</li>
</ul>
<p>If you do not do this step now, you can do it later, as in <a href="#CIHBGDBA">&#34;Tutorial: Declaring Variables and Constants in a Subprogram&#34;</a>.</p>
</li>
<li>
<p>Click the icon <span class="bold">Compile</span>.</p>
<p>The changed package body compiles and is saved to the database. The title of the <code>EMP_EVAL</code> Body pane is no longer in italic font.</p>
</li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNPLS01372" href="../LNPLS/create_package_body.htm#LNPLS01372"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for information about the <code>CREATE</code> <code>PACKAGE</code> <code>BODY</code> statement (for the package body)</div>
</div>
<!-- class="sect2" -->
<a id="CIHHAIBE"></a>
<div id="TDDDG47400" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Dropping a Package</h3>
<p><a id="sthref357"></a>To drop a package (both specification and body), use either the SQL&nbsp;Developer Connections frame and <a id="sthref358"></a>Drop tool, or the DDL statement <a id="sthref359"></a><code>DROP</code> <code>PACKAGE</code>.</p>
<div class="infobox-note">
<p class="notep1">Caution:</p>
Do not drop the package <code>EMP_EVAL</code>&mdash;you need it for later tutorials. If you want to practice dropping packages, create simple ones and then drop them.</div>
<p class="subhead2"><a id="TDDDG223"></a>To drop a package using the Drop tool:</p>
<ol>
<li>
<p>In the Connections frame, expand <span class="bold">hr_conn</span>.</p>
</li>
<li>
<p>In the list of schema object types, expand <span class="bold">Packages</span>.</p>
<p>A list of packages appears.</p>
</li>
<li>
<p>In the list of packages, right-click the name of the package to drop.</p>
</li>
<li>
<p>In the list of choices, click <span class="bold">Drop Package</span>.</p>
</li>
<li>
<p>In the Drop window, click <span class="bold">Apply</span>.</p>
</li>
<li>
<p>In the Confirmation window, click <span class="bold">OK</span>.</p>
</li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNPLS99992" href="../LNPLS/drop_package.htm#LNPLS99992"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for information about the <code>DROP</code> <code>PACKAGE</code> statement</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHBCBHC"></a>
<div id="TDDDG42000" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Declaring and Assigning Values to Variables and Constants</h2>
<p>One significant advantage that PL/SQL has over SQL is that PL/SQL lets you declare and use variables and constants.</p>
<p>A variable or constant declared in a package specification is available to any program that has access to the package. A variable or constant declared in a package body or subprogram is <a id="sthref360"></a><a id="sthref361"></a><a id="sthref362"></a><a id="sthref363"></a><a id="sthref364"></a><a id="sthref365"></a><a id="sthref366"></a><a id="sthref367"></a>local to that package or subprogram.</p>
<p>A <a id="sthref368"></a><span class="bold">variable</span> holds a value of a particular data type. Your program can change the value at runtime. A <a id="sthref369"></a><span class="bold">constant</span> holds a value that cannot be changed.</p>
<p>A variable or constant can have any PL/SQL data type. When declaring a variable, you can assign it an initial value; if you do not, its initial value is <code>NULL</code>. When declaring a constant, you must assign it an <a id="sthref370"></a>initial value. To assign an initial value to a variable or constant, use the <a id="sthref371"></a>assignment operator (<code>:=</code>).</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
Declare all values that do not change as constants. This practice optimizes your compiled code and makes your source code easier to maintain.</div>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#CIHBGDBA">Tutorial: Declaring Variables and Constants in a Subprogram</a></p>
</li>
<li>
<p><a href="#BABBHBGA">Ensuring that Variables, Constants, and Parameters Have Correct Data Types</a></p>
</li>
<li>
<p><a href="#BABEEIIC">Tutorial: Changing Declarations to Use the %TYPE Attribute</a></p>
</li>
<li>
<p><a href="#CIHBFAGE">Assigning Values to Variables</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNPLS00202" href="../LNPLS/fundamentals.htm#LNPLS00202"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for general information about variables and constants</div>
<a id="CIHBGDBA"></a>
<div id="TDDDG42200" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Tutorial: Declaring Variables and Constants in a Subprogram</h3>
<p><a id="sthref372"></a><a id="sthref373"></a>This tutorial shows how to use the SQL&nbsp;Developer tool Edit to declare variables and constants in the <code>EMP_EVAL</code>.<code>CALCULATE_SCORE</code> function (specified in <a href="#CIHHDBFE">&#34;Tutorial: Creating a Package Specification&#34;</a>). (This tutorial is also an example of changing a <a id="sthref374"></a>package body.)</p>
<p class="subhead2"><a id="TDDDG224"></a>To declare variables and constants in CALCULATE_SCORE function:</p>
<ol>
<li>
<p>In the Connections frame, expand <span class="bold">hr_conn</span>.</p>
</li>
<li>
<p>In the list of schema object types, expand <span class="bold">Packages</span>.</p>
</li>
<li>
<p>In the list of packages, expand <span class="bold">EMP_EVAL</span>.</p>
</li>
<li>
<p>In the list of choices, right-click <span class="bold">EMP_EVAL Body</span>.</p>
<p>A list of choices appears.</p>
</li>
<li>
<p>In the list of choices, click <span class="bold">Edit</span>.</p>
<p>The <code>EMP_EVAL</code> Body pane appears, showing the code for the package body:</p>
<pre>CREATE OR REPLACE
PACKAGE BODY EMP_EVAL AS
 
  PROCEDURE eval_department ( dept_id IN NUMBER ) AS

  BEGIN
    -- TODO implementation required for PROCEDURE EMP_EVAL.eval_department
    NULL;
  END eval_department;
 
  FUNCTION calculate_score ( evaluation_id IN NUMBER
                           , performance_id IN NUMBER)
                           RETURN NUMBER AS
  BEGIN
    -- TODO implementation required for FUNCTION EMP_EVAL.calculate_score
    RETURN NULL;
  END calculate_score;

END EMP_EVAL;
</pre></li>
<li>
<p>Between <code>RETURN</code> <code>NUMBER</code> <code>AS</code> and <code>BEGIN</code>, add these variable and constant declarations:</p>
<pre>n_score       NUMBER(1,0);                -- variable
n_weight      NUMBER;                     -- variable
max_score     CONSTANT NUMBER(1,0) := 9;  -- constant, initial value 9
max_weight    CONSTANT NUMBER(8,8) := 1;  -- constant, initial value 1
</pre>
<p>The title of the <code>EMP_EVAL</code> Body pane changes to italic font, indicating that the code is not saved in the database.</p>
</li>
<li>
<p>From the File menu, select <span class="bold">Save</span>.</p>
<p>Oracle Database compiles and saves the changed package body. The title of the <code>EMP_EVAL</code> Body pane is no longer in italic font.</p>
</li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink LNPLS00202" href="../LNPLS/fundamentals.htm#LNPLS00202"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for general information about declaring variables and constants</p>
</li>
<li>
<p><a href="#CIHIBCCJ">&#34;Assigning Values to Variables with the Assignment Operator&#34;</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="BABBHBGA"></a>
<div id="TDDDG42220" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Ensuring that Variables, Constants, and Parameters Have Correct Data Types</h3>
<p><a id="sthref375"></a><a id="sthref376"></a><a id="sthref377"></a>After <a href="#CIHBGDBA">&#34;Tutorial: Declaring Variables and Constants in a Subprogram&#34;</a>, the code for the <code>EMP_EVAL</code>.<code>CALCULATE_SCORE</code> function is:</p>
<pre>FUNCTION calculate_score ( evaluation_id IN NUMBER
                          , performance_id IN NUMBER )
                          RETURN NUMBER AS
  n_score       NUMBER(1,0);                -- variable
  n_weight      NUMBER;                     -- variable
  max_score     CONSTANT NUMBER(1,0) := 9;  -- constant, initial value 9
  max_weight    CONSTANT NUMBER(8,8) := 1;  -- constant, initial value 1
  BEGIN
    -- TODO implementation required for FUNCTION EMP_EVAL.calculate_score
    RETURN NULL;
  END calculate_score;
</pre>
<p>The variables, constants, and parameters of the function represent values from the tables <code>SCORES</code> and <code>PERFORMANCE_PARTS</code> (created in <a href="tdddg_objects.htm#BABFEIDE">&#34;Creating Tables&#34;</a>):</p>
<ul>
<li>
<p>Variable <code>n_score</code> will hold a value from the column <code>SCORE</code>.<code>SCORES</code> and constant <code>max_score</code> will be compared to such values.</p>
</li>
<li>
<p>Variable <code>n_weight</code> will hold a value from the column <code>PERFORMANCE_PARTS</code>.<code>WEIGHT</code> and constant <code>max_weight</code> will be compared to such values.</p>
</li>
<li>
<p>Parameter <code>evaluation_id</code> will hold a value from the column <code>SCORE</code>.<code>EVALUATION_ID</code>.</p>
</li>
<li>
<p>Parameter <code>performance_id</code> will hold a value from the column <code>SCORE</code>.<code>PERFORMANCE_ID</code>.</p>
</li>
</ul>
<p>Therefore, each variable, constant, and parameter has the same data type as its corresponding column.</p>
<p>If the data types of the columns change, you want the data types of the variables, constants, and parameters to change to the same data types; otherwise, the <code>CALCULATE_SCORE</code> function is invalidated.</p>
<p>To ensure that the data types of the variables, constants, and parameters always match those of the columns, declare them with the <a id="sthref378"></a><a id="sthref379"></a><code>%TYPE</code> attribute. The <code>%TYPE</code> attribute supplies the data type of a table column or another variable, ensuring the correct data type assignment.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink LNPLS99970" href="../LNPLS/fundamentals.htm#LNPLS99970"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information about the <code>%TYPE</code> attribute</p>
</li>
<li>
<p><a class="olink LNPLS01352" href="../LNPLS/type_attribute.htm#LNPLS01352"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for the syntax of the <code>%TYPE</code> attribute</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="BABEEIIC"></a>
<div id="TDDDG99960" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Tutorial: Changing Declarations to Use the %TYPE Attribute</h3>
<p><a id="sthref380"></a><a id="sthref381"></a>This tutorial shows how to use the SQL&nbsp;Developer tool Edit to change the declarations of the variables, constants, and formal parameters of the <code>EMP_EVAL</code>.<code>CALCULATE_SCORE</code> function (shown in <a href="#CIHBGDBA">&#34;Tutorial: Declaring Variables and Constants in a Subprogram&#34;</a>) to use the <code>%TYPE</code> attribute.</p>
<p class="subhead2"><a id="TDDDG225"></a>To change the declarations in CALCULATE_SCORE to use %TYPE:</p>
<ol>
<li>
<p>In the Connections frame, expand <span class="bold">hr_conn</span>.</p>
</li>
<li>
<p>In the list of schema object types, expand <span class="bold">Packages</span>.</p>
</li>
<li>
<p>In the list of packages, expand <span class="bold">EMP_EVAL</span>.</p>
</li>
<li>
<p>In the list of choices, right-click <span class="bold">EMP_EVAL Body</span>.</p>
</li>
<li>
<p>In the list of choices, click <span class="bold">Edit</span>.</p>
<p>The <code>EMP_EVAL</code> Body pane appears, showing the code for the package body:</p>
<pre>CREATE OR REPLACE
PACKAGE BODY emp_eval AS
 
  PROCEDURE eval_department ( dept_id IN NUMBER ) AS
  BEGIN
    -- TODO implementation required for PROCEDURE EMP_EVAL.eval_department
    NULL;
  END eval_department;
 
  FUNCTION calculate_score ( evaluation_id IN NUMBER
                           , performance_id IN NUMBER )
                           RETURN NUMBER AS
  n_score       NUMBER(1,0);                -- variable
  n_weight      NUMBER;                     -- variable
  max_score     CONSTANT NUMBER(1,0) := 9;  -- constant, initial value 9
  max_weight    CONSTANT NUMBER(8,8) := 1;  -- constant, initial value 1
  BEGIN
    -- TODO implementation required for FUNCTION EMP_EVAL.calculate_score
    RETURN NULL;
  END calculate_score;

END emp_eval;
</pre></li>
<li>
<p>In the code for the function, make the changes shown in bold font:</p>
<pre>  FUNCTION calculate_score ( evaluation_id IN <span class="bold">SCORES.EVALUATION_ID%TYPE</span>
                            , performance_id IN <span class="bold">SCORES.PERFORMANCE_ID%TYPE</span>)
                            RETURN NUMBER AS
  n_score       <span class="bold">SCORES.SCORE%TYPE</span>;
  n_weight      <span class="bold">PERFORMANCE_PARTS.WEIGHT%TYPE</span>;
  max_score     CONSTANT <span class="bold">SCORES.SCORE%TYPE</span> := 9;
  max_weight    CONSTANT <span class="bold">PERFORMANCE_PARTS.WEIGHT%TYPE</span> := 1;
</pre></li>
<li>
<p>Right-click <span class="bold">EMP_EVAL</span>.</p>
</li>
<li>
<p>In the list of choices, click <span class="bold">Edit</span>.</p>
<p>The <code>EMP_EVAL</code> pane opens, showing the <code>CREATE</code> <code>PACKAGE</code> statement that created the package:</p>
<pre>CREATE OR REPLACE PACKAGE EMP_EVAL AS
 
PROCEDURE eval_department(dept_id IN NUMBER);
FUNCTION calculate_score(evaluation_id IN NUMBER
                        , performance_id IN NUMBER)
                          RETURN NUMBER;
 
END EMP_EVAL;
</pre></li>
<li>
<p>In the code for the function, make the changes shown in bold font:</p>
<pre>FUNCTION calculate_score(evaluation_id IN <span class="bold">scores.evaluation_id%TYPE</span>
                        , performance_id IN <span class="bold">scores.performance_id%TYPE</span>)
</pre></li>
<li>
<p>Right-click <span class="bold">EMP_EVAL</span>.</p>
</li>
<li>
<p>In the list of choices, click <span class="bold">Compile</span>.</p>
</li>
<li>
<p>Right-click <span class="bold">EMP_EVAL Body</span>.</p>
</li>
<li>
<p>In the list of choices, click <span class="bold">Compile</span>.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CIHBFAGE"></a>
<div id="TDDDG42300" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Assigning Values to Variables</h3>
<p>You can assign a value to a variable in these ways:</p>
<ul>
<li>
<p>Use the assignment operator to assign it the value of an expression.</p>
</li>
<li>
<p>Use the <code>SELECT</code> <code>INTO</code> or <code>FETCH</code> statement to assign it a value from a table.</p>
</li>
<li>
<p>Pass it to a subprogram as an <code>OUT</code> or <code>IN</code> <code>OUT</code> parameter, and then assign the value inside the subprogram.</p>
</li>
<li>
<p>Bind the variable to a value.</p>
</li>
</ul>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#CIHIBCCJ">Assigning Values to Variables with the Assignment Operator</a></p>
</li>
<li>
<p><a href="#CIHGCBBB">Assigning Values to Variables with the SELECT INTO Statement</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink LNPLS00205" href="../LNPLS/fundamentals.htm#LNPLS00205"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information about assigning values to variables</p>
</li>
<li>
<p><a class="olink TDPNG" href="http://www.oracle.com/pls/topic/lookup?ctx=E50529-01&amp;id=TDPNG"><span class="italic">Oracle Database 2 Day + .NET Developer&#39;s Guide for Microsoft Windows</span></a> for information about binding variables</p>
</li>
<li>
<p><a class="olink TDPPH" href="../TDPPH/toc.htm"><span class="italic">Oracle Database 2 Day + PHP Developer&#39;s Guide</span></a> for information about binding variables</p>
</li>
<li>
<p><a class="olink TDPJD" href="../TDPJD/toc.htm"><span class="italic">Oracle Database 2 Day + Java Developer&#39;s Guide</span></a> for information about binding variables</p>
</li>
<li>
<p><a class="olink TDPAX" href="../TDPAX/toc.htm"><span class="italic">Oracle Database 2 Day + Application Express Developer&#39;s Guide</span></a> for information about binding variables</p>
</li>
</ul>
</div>
<a id="CIHIBCCJ"></a>
<div id="TDDDG42320" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Assigning Values to Variables with the Assignment Operator</h4>
<p><a id="sthref382"></a>With the <a id="sthref383"></a>assignment operator (<code>:=</code>), you can assign the value of an expression to a variable in either the declarative or executable part of a subprogram.</p>
<p>In the declarative part of a subprogram, you can assign an initial value to a variable when you declare it. The syntax is:</p>
<pre><span class="italic">variable_name</span> <span class="italic">data_type</span> <span class="bold">:=</span> <span class="italic">expression</span>;
</pre>
<p>In the executable part of a subprogram, you can assign a value to a variable with an assignment statement. The syntax is:</p>
<pre><span class="italic">variable_name</span> <span class="bold">:=</span> <span class="italic">expression</span>;
</pre>
<p><a href="#BABDEEDD">Example 5-1</a> shows, in bold font, the changes to make to the <code>EMP_EVAL</code>.<code>CALCULATE_SCORE</code> function to add a variable, <code>running_total</code>, and use it as the return value of the function. The assignment operator appears in both the declarative and executable parts of the function. (The data type of <code>running_total</code> must be <code>NUMBER</code>, rather than <code>SCORES</code>.<code>SCORE%TYPE</code> or <code>PERFORMANCE_PARTS</code>.<code>WEIGHT%TYPE</code>, because it holds the product of two <code>NUMBER</code> values with different precisions and scales.)</p>
<div id="TDDDG226" class="example">
<p class="titleinexample"><a id="BABDEEDD"></a>Example 5-1 Assigning Values to a Variable with Assignment Operator</p>
<pre>FUNCTION calculate_score(evaluation_id IN SCORES.EVALUATION_ID%TYPE
                         , performance_id IN SCORES.PERFORMANCE_ID%TYPE)
                         RETURN NUMBER AS
  n_score       SCORES.SCORE%TYPE;
  n_weight      PERFORMANCE_PARTS.WEIGHT%TYPE;
  <span class="bold">running_total NUMBER := 0;</span>
  max_score     CONSTANT SCORES.SCORE%TYPE := 9;
  max_weight    CONSTANT PERFORMANCE_PARTS.WEIGHT%TYPE:= 1;
BEGIN
  <span class="bold">running_total := max_score * max_weight;</span>
  RETURN <span class="bold">running_total</span>;
END calculate_score;
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink LNPLS01388" href="../LNPLS/scalar_variable_declaration.htm#LNPLS01388"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for variable declaration syntax</p>
</li>
<li>
<p><a class="olink LNPLS01301" href="../LNPLS/assignment_statement.htm#LNPLS01301"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for assignment statement syntax</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="CIHGCBBB"></a>
<div id="TDDDG42330" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Assigning Values to Variables with the SELECT INTO Statement</h4>
<p><a id="sthref384"></a><a id="sthref385"></a>To use table values in subprograms or packages, you must assign them to variables with <code>SELECT</code> <code>INTO</code> statements.</p>
<p><a href="#BABFIGBI">Example 5-2</a> shows, in bold font, the changes to make to the <code>EMP_EVAL</code>.<code>CALCULATE_SCORE</code> function to have it calculate <code>running_total</code> from table values.</p>
<div id="TDDDG227" class="example">
<p class="titleinexample"><a id="BABFIGBI"></a>Example 5-2 Assigning Table Values to Variables with SELECT INTO</p>
<pre>FUNCTION calculate_score ( evaluation_id IN scores.evaluation_id%TYPE
                         , performance_id IN scores.performance_id%TYPE )
                         RETURN NUMBER AS

  n_score       scores.score%TYPE;
  n_weight      performance_parts.weight%TYPE;
  running_total NUMBER := 0;
  max_score     CONSTANT scores.score%TYPE := 9;
  max_weight    CONSTANT performance_parts.weight%TYPE:= 1;
BEGIN
  <span class="bold">SELECT s.score INTO n_score</span>
  <span class="bold">FROM SCORES s</span>
  <span class="bold">WHERE evaluation_id = s.evaluation_id </span>
  <span class="bold">AND performance_id = s.performance_id;</span>

  <span class="bold">SELECT p.weight INTO n_weight</span>
  <span class="bold">FROM PERFORMANCE_PARTS p</span>
  <span class="bold">WHERE performance_id = p.performance_id;</span>

  running_total := <span class="bold">n_score * n_weight</span>;
  RETURN running_total;
END calculate_score;
</pre></div>
<!-- class="example" -->
<p>The <code>ADD_EVAL</code> procedure in <a href="#BABBDEHA">Example 5-3</a> inserts a row into the <code>EVALUATIONS</code> table, using values from the corresponding row in the <code>EMPLOYEES</code> table. Add the <code>ADD_EVAL</code> procedure to the body of the <code>EMP_EVAL</code> package, but not to the specification. Because it is not in the specification, <code>ADD_EVAL</code> is local to the package&mdash;it can be invoked only by other subprograms in the package, not from outside the package.</p>
<div id="TDDDG228" class="example">
<p class="titleinexample"><a id="BABBDEHA"></a>Example 5-3 Inserting a Table Row with Values from Another Table</p>
<pre>PROCEDURE add_eval ( employee_id IN EMPLOYEES.EMPLOYEE_ID%TYPE
                   , today IN DATE )
AS
  job_id         EMPLOYEES.JOB_ID%TYPE;
  manager_id     EMPLOYEES.MANAGER_ID%TYPE;
  department_id  EMPLOYEES.DEPARTMENT_ID%TYPE;
BEGIN
  INSERT INTO EVALUATIONS (
    evaluation_id,
    employee_id,
    evaluation_date,
    job_id,
    manager_id,
    department_id,
    total_score
  )
  SELECT
    evaluations_sequence.NEXTVAL,   -- evaluation_id
    add_eval.employee_id,      -- employee_id
    add_eval.today,            -- evaluation_date
    e.job_id,                  -- job_id
    e.manager_id,              -- manager_id
    e.department_id,           -- department_id
    0                          -- total_score
  FROM employees e;

  IF SQL%ROWCOUNT = 0 THEN
    RAISE NO_DATA_FOUND;
  END IF;
END add_eval;
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNPLS01345" href="../LNPLS/selectinto_statement.htm#LNPLS01345"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information about the <code>SELECT</code> <code>INTO</code> statement</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHHFJFJ"></a>
<div id="TDDDG44000" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Controlling Program Flow</h2>
<p><a id="sthref386"></a><a id="sthref387"></a>Unlike SQL, which runs statements in the order in which you enter them, PL/SQL has control statements that let you control the flow of your program.</p>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#BABJAEDA">About Control Statements</a></p>
</li>
<li>
<p><a href="#BABDFCCI">Using the IF Statement</a></p>
</li>
<li>
<p><a href="#BABCGEIH">Using the CASE Statement</a></p>
</li>
<li>
<p><a href="#BABGDIJD">Using the FOR LOOP Statement</a></p>
</li>
<li>
<p><a href="#BABIECGJ">Using the WHILE LOOP Statement</a></p>
</li>
<li>
<p><a href="#BABGFJCD">Using the Basic LOOP and EXIT WHEN Statements</a></p>
</li>
</ul>
<a id="BABJAEDA"></a>
<div id="TDDDG99959" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">About Control Statements</h3>
<p>PL/SQL has three categories of control statements:</p>
<ul>
<li>
<p><a id="sthref388"></a><span class="bold">Conditional selection statements</span>, which let you execute different statements for different data values.</p>
<p>The conditional selection statements are <code>IF</code> and <code>CASE</code>.</p>
</li>
<li>
<p><a id="sthref389"></a><span class="bold">Loop statements</span>, which let you repeat the same statements with a series of different data values.</p>
<p>The loop statements are <code>FOR</code> <code>LOOP</code>, <code>WHILE</code> <code>LOOP</code> and basic <code>LOOP</code>.</p>
<p>The <code>EXIT</code> statement transfers control to the end of a loop. The <code>CONTINUE</code> statement exits the current iteration of a loop and transfers control to the next iteration. Both <code>EXIT</code> and <code>CONTINUE</code> have an optional <code>WHEN</code> clause, in which you can specify a condition.</p>
</li>
<li>
<p><a id="sthref390"></a><span class="bold">Sequential control statements</span>, which let you go to a specified labeled statement or to do nothing.</p>
<p>The sequential control statements are <code>GOTO</code> and <code>NULL</code>.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNPLS00401" href="../LNPLS/controlstatements.htm#LNPLS00401"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for an overview of PL/SQL control statements</div>
</div>
<!-- class="sect2" -->
<a id="BABDFCCI"></a>
<div id="TDDDG44110" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using the IF Statement</h3>
<p><a id="sthref391"></a><a id="sthref392"></a>The <code>IF</code> statement either executes or skips a sequence of statements, depending on the value of a Boolean expression.</p>
<p>The <code>IF</code> statement has this syntax:</p>
<pre>IF <span class="italic">boolean_expression</span> THEN <span class="italic">statement</span> [, <span class="italic">statement</span> ]
[ ELSIF <span class="italic">boolean_expression</span> THEN <span class="italic">statement</span> [, <span class="italic">statement</span> ] ]...
[ ELSE  <span class="italic">statement</span> [, <span class="italic">statement</span> ] ]
END IF;
</pre>
<p>Suppose that your company evaluates employees twice a year in the first 10 years of employment, but only once a year afterward. You want a function that returns the evaluation frequency for an employee. You can use an <code>IF</code> statement to determine the return value of the function, as in <a href="#BABEIIJG">Example 5-4</a>.</p>
<p>Add the <code>EVAL_FREQUENCY</code> function to the body of the <code>EMP_EVAL</code> package, but not to the specification. Because it is not in the specification, <code>EVAL_FREQUENCY</code> is local to the package&mdash;it can be invoked only by other subprograms in the package, not from outside the package.</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
When using a PL/SQL variable in a SQL statement, as in the second <code>SELECT</code> statement in <a href="#BABEIIJG">Example 5-4</a>, qualify the variable with the subprogram name to ensure that it is not mistaken for a table column.</div>
<div id="TDDDG229" class="example">
<p class="titleinexample"><a id="BABEIIJG"></a>Example 5-4 IF Statement that Determines Return Value of Function</p>
<pre>FUNCTION eval_frequency (emp_id IN EMPLOYEES.EMPLOYEE_ID%TYPE)
  RETURN PLS_INTEGER
AS
  h_date     EMPLOYEES.HIRE_DATE%TYPE;
  today      EMPLOYEES.HIRE_DATE%TYPE;
  eval_freq  PLS_INTEGER;
BEGIN
  SELECT SYSDATE INTO today FROM DUAL;

  SELECT HIRE_DATE INTO h_date
  FROM EMPLOYEES
  WHERE EMPLOYEE_ID = <span class="bold">eval_frequency.emp_id</span>;

  <span class="bold">IF</span> ((h_date + (INTERVAL &#39;120&#39; MONTH)) &lt; today) <span class="bold">THEN</span>
    eval_freq := 1;
  <span class="bold">ELSE</span>
    eval_freq := 2;
  <span class="bold">END IF</span>;

  RETURN eval_freq;
END eval_frequency;
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink LNPLS01324" href="../LNPLS/if_statement.htm#LNPLS01324"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for the syntax of the <code>IF</code> statement</p>
</li>
<li>
<p><a class="olink LNPLS00402" href="../LNPLS/controlstatements.htm#LNPLS00402"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information about using the <code>IF</code> statement</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="BABCGEIH"></a>
<div id="TDDDG44120" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using the CASE Statement</h3>
<p><a id="sthref393"></a><a id="sthref394"></a>The <code>CASE</code> statement chooses from a sequence of conditions, and executes the corresponding statement.</p>
<p>The <a id="sthref395"></a>simple <code>CASE</code> statement evaluates a single expression and compares it to several potential values. It has this syntax:</p>
<pre>CASE <span class="italic">expression</span>
WHEN <span class="italic">value</span> THEN <span class="italic">statement</span>
[ WHEN <span class="italic">value</span> THEN <span class="italic">statement</span> ]...
[ ELSE <span class="italic">statement</span> [, <span class="italic">statement</span> ]... ]
END CASE;
</pre>
<p>The <a id="sthref396"></a>searched <code>CASE</code> statement evaluates multiple Boolean expressions and chooses the first one whose value is <code>TRUE</code>. For information about the searched <code>CASE</code> statement, see <a class="olink LNPLS99972" href="../LNPLS/controlstatements.htm#LNPLS99972"><span class="italic">Oracle Database PL/SQL Language Reference</span></a>.</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
When you can use either a <code>CASE</code> statement or nested <code>IF</code> statements, use a <code>CASE</code> statement&mdash;it is both more readable and more efficient.</div>
<p>Suppose that, if an employee is evaluated only once a year, you want the <code>EVAL_FREQUENCY</code> function to suggest a salary increase, which depends on the <code>JOB_ID</code>.</p>
<p>Change the <code>EVAL_FREQUENCY</code> function as shown in bold font in <a href="#BABGJFBG">Example 5-5</a>. (For information about the procedures that prints the strings, <a id="sthref397"></a><code>DBMS_OUTPUT.PUT_LINE</code>, see <a class="olink ARPLS036" href="../ARPLS/d_output.htm#ARPLS036"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.)</p>
<div id="TDDDG230" class="example">
<p class="titleinexample"><a id="BABGJFBG"></a>Example 5-5 CASE Statement that Determines Which String to Print</p>
<pre>FUNCTION eval_frequency (emp_id IN EMPLOYEES.EMPLOYEE_ID%TYPE)
  RETURN PLS_INTEGER
AS
  h_date     EMPLOYEES.HIRE_DATE%TYPE;
  today      EMPLOYEES.HIRE_DATE%TYPE;
  eval_freq  PLS_INTEGER;
  <span class="bold">j_id       EMPLOYEES.JOB_ID%TYPE;</span>

BEGIN
  SELECT SYSDATE INTO today FROM DUAL;

  SELECT HIRE_DATE, <span class="bold">JOB_ID</span> INTO h_date, <span class="bold">j_id</span>
  FROM EMPLOYEES
  WHERE EMPLOYEE_ID = eval_frequency.emp_id;

  IF ((h_date + (INTERVAL &#39;12&#39; MONTH)) &lt; today) THEN
    eval_freq := 1;

    <span class="bold">CASE</span> j_id
       <span class="bold">WHEN</span> &#39;PU_CLERK&#39; <span class="bold">THEN</span> DBMS_OUTPUT.PUT_LINE(
         &#39;Consider 8% salary increase for employee # &#39; || emp_id);
       <span class="bold">WHEN</span> &#39;SH_CLERK&#39; <span class="bold">THEN</span> DBMS_OUTPUT.PUT_LINE(
         &#39;Consider 7% salary increase for employee # &#39; || emp_id);
       <span class="bold">WHEN</span> &#39;ST_CLERK&#39; <span class="bold">THEN</span> DBMS_OUTPUT.PUT_LINE(
         &#39;Consider 6% salary increase for employee # &#39; || emp_id);
       <span class="bold">WHEN</span> &#39;HR_REP&#39; <span class="bold">THEN</span> DBMS_OUTPUT.PUT_LINE(
         &#39;Consider 5% salary increase for employee # &#39; || emp_id);
       <span class="bold">WHEN</span> &#39;PR_REP&#39; <span class="bold">THEN</span> DBMS_OUTPUT.PUT_LINE(
         &#39;Consider 5% salary increase for employee # &#39; || emp_id);
       <span class="bold">WHEN</span> &#39;MK_REP&#39; <span class="bold">THEN</span> DBMS_OUTPUT.PUT_LINE(
         &#39;Consider 4% salary increase for employee # &#39; || emp_id);
       <span class="bold">ELSE</span> DBMS_OUTPUT.PUT_LINE(
         &#39;Nothing to do for employee #&#39; || emp_id);
    <span class="bold">END CASE</span>;
  ELSE
    eval_freq := 2;
  END IF;
 
  RETURN eval_freq;
END eval_frequency;
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="tdddg_connecting.htm#CEGFFFAA">&#34;Using CASE Expressions in Queries&#34;</a></p>
</li>
<li>
<p><a class="olink LNPLS01304" href="../LNPLS/case_statement.htm#LNPLS01304"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for the syntax of the <code>CASE</code> statement</p>
</li>
<li>
<p><a class="olink LNPLS00402" href="../LNPLS/controlstatements.htm#LNPLS00402"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information about using the <code>CASE</code> statement</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="BABGDIJD"></a>
<div id="TDDDG44210" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using the FOR LOOP Statement</h3>
<p><a id="sthref398"></a><a id="sthref399"></a>The <code>FOR</code> <code>LOOP</code> statement repeats a sequence of statements once for each integer in the range <code><span class="codeinlineitalic">lower_bound</span></code> through <code><span class="codeinlineitalic">upper_bound</span></code>. Its syntax is:</p>
<pre>FOR <span class="italic">counter</span> IN <span class="italic">lower_bound</span>..<span class="italic">upper_bound</span> LOOP
  <span class="italic">statement</span> [, <span class="italic">statement</span> ]...
END LOOP;
</pre>
<p>The statements between <code>LOOP</code> and <code>END</code> <code>LOOP</code> can use <code><span class="codeinlineitalic">counter</span></code>, but cannot change its value.</p>
<p>Suppose that, instead of only suggesting a salary increase, you want the <code>EVAL_FREQUENCY</code> function to report what the salary would be if it increased by the suggested amount every year for five years.</p>
<p>Change the <code>EVAL_FREQUENCY</code> function as shown in bold font in <a href="#BABJDIHB">Example 5-6</a>. (For information about the procedure that prints the strings, <code>DBMS_OUTPUT.PUT_LINE</code>, see <a class="olink ARPLS036" href="../ARPLS/d_output.htm#ARPLS036"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.)</p>
<div id="TDDDG231" class="example">
<p class="titleinexample"><a id="BABJDIHB"></a>Example 5-6 FOR LOOP Statement that Computes Salary After Five Years</p>
<pre>FUNCTION eval_frequency (emp_id IN EMPLOYEES.EMPLOYEE_ID%TYPE)
  RETURN PLS_INTEGER
AS
  h_date      EMPLOYEES.HIRE_DATE%TYPE;
  today       EMPLOYEES.HIRE_DATE%TYPE;
  eval_freq   PLS_INTEGER;
  j_id        EMPLOYEES.JOB_ID%TYPE;
  <span class="bold">sal         EMPLOYEES.SALARY%TYPE;</span>
  <span class="bold">sal_raise   NUMBER(3,3) := 0;</span>

BEGIN
  SELECT SYSDATE INTO today FROM DUAL;

  SELECT HIRE_DATE, JOB_ID, <span class="bold">SALARY</span> INTO h_date, j_id, <span class="bold">sal</span>
  FROM EMPLOYEES
  WHERE EMPLOYEE_ID = eval_frequency.emp_id;

  IF ((h_date + (INTERVAL &#39;12&#39; MONTH)) &lt; today) THEN
    eval_freq := 1;

    CASE j_id
      WHEN &#39;PU_CLERK&#39; THEN <span class="bold">sal_raise := 0.08</span>;
      WHEN &#39;SH_CLERK&#39; THEN <span class="bold">sal_raise := 0.07</span>;
      WHEN &#39;ST_CLERK&#39; THEN <span class="bold">sal_raise := 0.06</span>;
      WHEN &#39;HR_REP&#39;   THEN <span class="bold">sal_raise := 0.05</span>;
      WHEN &#39;PR_REP&#39;   THEN <span class="bold">sal_raise := 0.05</span>;
      WHEN &#39;MK_REP&#39;   THEN <span class="bold">sal_raise := 0.04</span>;
      ELSE NULL;
    END CASE;

    <span class="bold">IF (sal_raise != 0) THEN</span>
      <span class="bold">BEGIN</span>
        <span class="bold">DBMS_OUTPUT.PUT_LINE(&#39;If salary &#39; || sal || &#39; increases by &#39; ||</span>
          <span class="bold">ROUND((sal_raise * 100),0) ||</span>
          <span class="bold">&#39;% each year for 5 years, it will be:&#39;);</span>

        <span class="bold">FOR i IN 1..5 LOOP</span>
          <span class="bold">sal := sal * (1 + sal_raise);</span>
          <span class="bold">DBMS_OUTPUT.PUT_LINE(ROUND(sal, 2) || &#39; after &#39; || i || &#39; year(s)&#39;);</span>
        <span class="bold">END LOOP;</span>
      <span class="bold">END;</span>
    <span class="bold">END IF;</span>

  ELSE
    eval_freq := 2;
  END IF;

  RETURN eval_freq;
END eval_frequency;
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink LNPLS01328" href="../LNPLS/basic_loop_statement.htm#LNPLS01328"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for the syntax of the <code>FOR</code> <code>LOOP</code> statement</p>
</li>
<li>
<p><a class="olink LNPLS00403" href="../LNPLS/controlstatements.htm#LNPLS00403"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information about using the <code>FOR</code> <code>LOOP</code> statement</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="BABIECGJ"></a>
<div id="TDDDG44220" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using the WHILE LOOP Statement</h3>
<p><a id="sthref400"></a><a id="sthref401"></a>The <code>WHILE</code> <code>LOOP</code> statement repeats a sequence of statements while a condition is <code>TRUE</code>. Its syntax is:</p>
<pre>WHILE <span class="italic">condition</span> LOOP
  <span class="italic">statement</span> [, <span class="italic">statement</span> ]...
END LOOP;
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
If the statements between <code>LOOP</code> and <code>END</code> <code>LOOP</code> never cause <code><span class="codeinlineitalic">condition</span></code> to become <code>FALSE</code>, then the <code>WHILE</code> <code>LOOP</code> statement runs indefinitely.</div>
<p>Suppose that the <code>EVAL_FREQUENCY</code> function uses the <code>WHILE</code> <code>LOOP</code> statement instead of the <code>FOR</code> <code>LOOP</code> statement and ends after the proposed salary exceeds the maximum salary for the <code>JOB_ID</code>.</p>
<p>Change the <code>EVAL_FREQUENCY</code> function as shown in bold font in <a href="#BABFBBDC">Example 5-7</a>. (For information about the procedures that prints the strings, <code>DBMS_OUTPUT.PUT_LINE</code>, see <a class="olink ARPLS036" href="../ARPLS/d_output.htm#ARPLS036"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.)</p>
<div id="TDDDG232" class="example">
<p class="titleinexample"><a id="BABFBBDC"></a>Example 5-7 WHILE LOOP Statement that Computes Salary to Maximum</p>
<pre>FUNCTION eval_frequency (emp_id IN EMPLOYEES.EMPLOYEE_ID%TYPE)
  RETURN PLS_INTEGER
AS
  h_date      EMPLOYEES.HIRE_DATE%TYPE;
  today       EMPLOYEES.HIRE_DATE%TYPE;
  eval_freq   PLS_INTEGER;
  j_id        EMPLOYEES.JOB_ID%TYPE;
  sal         EMPLOYEES.SALARY%TYPE;
  sal_raise   NUMBER(3,3) := 0;
  <span class="bold">sal_max     JOBS.MAX_SALARY%TYPE;</span>

BEGIN
  SELECT SYSDATE INTO today FROM DUAL;

  SELECT HIRE_DATE, j.JOB_ID, SALARY, <span class="bold">MAX_SALARY</span> INTO h_date, j_id, sal, <span class="bold">sal_max</span>
  <span class="bold">FROM EMPLOYEES e, JOBS j</span>
  WHERE EMPLOYEE_ID = eval_frequency.emp_id AND JOB_ID = eval_frequency.j_id;

  IF ((h_date + (INTERVAL &#39;12&#39; MONTH)) &lt; today) THEN
    eval_freq := 1;

    CASE j_id
      WHEN &#39;PU_CLERK&#39; THEN sal_raise := 0.08;
      WHEN &#39;SH_CLERK&#39; THEN sal_raise := 0.07;
      WHEN &#39;ST_CLERK&#39; THEN sal_raise := 0.06;
      WHEN &#39;HR_REP&#39;   THEN sal_raise := 0.05;
      WHEN &#39;PR_REP&#39;   THEN sal_raise := 0.05;
      WHEN &#39;MK_REP&#39;   THEN sal_raise := 0.04;
      ELSE NULL;
    END CASE;

    IF (sal_raise != 0) THEN
      BEGIN
        DBMS_OUTPUT.PUT_LINE(&#39;If salary &#39; || sal || &#39; increases by &#39; ||
          ROUND((sal_raise * 100),0) ||
          <span class="bold">&#39;% each year, it will be:&#39;</span>);

        <span class="bold">WHILE sal &lt;= sal_max LOOP</span>
          sal := sal * (1 + sal_raise);
          <span class="bold">DBMS_OUTPUT.PUT_LINE(ROUND(sal, 2));</span>
        END LOOP;

        <span class="bold">DBMS_OUTPUT.PUT_LINE(&#39;Maximum salary for this job is &#39; || sal_max);</span>
      END;
    END IF;
  ELSE
    eval_freq := 2;
  END IF;
 
  RETURN eval_freq;
END eval_frequency;
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink LNPLS01328" href="../LNPLS/basic_loop_statement.htm#LNPLS01328"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for the syntax of the <code>WHILE</code> <code>LOOP</code> statement</p>
</li>
<li>
<p><a class="olink LNPLS00403" href="../LNPLS/controlstatements.htm#LNPLS00403"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information about using the <code>WHILE</code> <code>LOOP</code> statement</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="BABGFJCD"></a>
<div id="TDDDG44230" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using the Basic LOOP and EXIT WHEN Statements</h3>
<p><a id="sthref402"></a><a id="sthref403"></a>The basic <code>LOOP</code> statement repeats a sequence of statements. Its syntax is:</p>
<pre>LOOP
  <span class="italic">statement</span> [, <span class="italic">statement</span> ]...
END LOOP;
</pre>
<p>At least one <code><span class="codeinlineitalic">statement</span></code> must be an <code>EXIT</code> statement; otherwise, the <code>LOOP</code> statement runs indefinitely.</p>
<p><a id="sthref404"></a><a id="sthref405"></a>The <code>EXIT</code> <code>WHEN</code> statement (the <code>EXIT</code> statement with its optional <code>WHEN</code> clause) exits a loop when a condition is <code>TRUE</code> and transfers control to the end of the loop.</p>
<p>In the <code>EVAL_FREQUENCY</code> function, in the last iteration of the <code>WHILE</code> <code>LOOP</code> statement, the last computed value usually exceeds the maximum salary.</p>
<p>Change the <code>WHILE</code> <code>LOOP</code> statement to a basic <code>LOOP</code> statement that includes an <code>EXIT</code> <code>WHEN</code> statement, as in <a href="#BABDCEFE">Example 5-8</a>.</p>
<div id="TDDDG233" class="example">
<p class="titleinexample"><a id="BABDCEFE"></a>Example 5-8 Using the EXIT WHEN Statement</p>
<pre>FUNCTION eval_frequency (emp_id IN EMPLOYEES.EMPLOYEE_ID%TYPE)
  RETURN PLS_INTEGER
AS
  h_date      EMPLOYEES.HIRE_DATE%TYPE;
  today       EMPLOYEES.HIRE_DATE%TYPE;
  eval_freq   PLS_INTEGER;
  j_id        EMPLOYEES.JOB_ID%TYPE;
  sal         EMPLOYEES.SALARY%TYPE;
  sal_raise   NUMBER(3,3) := 0;
  sal_max     JOBS.MAX_SALARY%TYPE;

BEGIN
  SELECT SYSDATE INTO today FROM DUAL;

  SELECT HIRE_DATE, j.JOB_ID, SALARY, MAX_SALARY INTO h_date, j_id, sal, sal_max
  FROM EMPLOYEES e, JOBS j
  WHERE EMPLOYEE_ID = eval_frequency.emp_id AND JOB_ID = eval_frequency.j_id;

  IF ((h_date + (INTERVAL &#39;12&#39; MONTH)) &lt; today) THEN
    eval_freq := 1;

    CASE j_id
      WHEN &#39;PU_CLERK&#39; THEN sal_raise := 0.08;
      WHEN &#39;SH_CLERK&#39; THEN sal_raise := 0.07;
      WHEN &#39;ST_CLERK&#39; THEN sal_raise := 0.06;
      WHEN &#39;HR_REP&#39;   THEN sal_raise := 0.05;
      WHEN &#39;PR_REP&#39;   THEN sal_raise := 0.05;
      WHEN &#39;MK_REP&#39;   THEN sal_raise := 0.04;
      ELSE NULL;
    END CASE;

    IF (sal_raise != 0) THEN
      BEGIN
        DBMS_OUTPUT.PUT_LINE(&#39;If salary &#39; || sal || &#39; increases by &#39; ||
          ROUND((sal_raise * 100),0) ||
          &#39;% each year, it will be:&#39;);

        <span class="bold">LOOP</span>
          <span class="bold">sal := sal * (1 + sal_raise);</span>
          <span class="bold">EXIT WHEN sal &gt; sal_max;</span>
          DBMS_OUTPUT.PUT_LINE(ROUND(sal,2));
        <span class="bold">END LOOP;</span>

        DBMS_OUTPUT.PUT_LINE(&#39;Maximum salary for this job is &#39; || sal_max);
      END;
    END IF;
  ELSE
    eval_freq := 2;
  END IF;
 
  RETURN eval_freq;
END eval_frequency;
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink LNPLS01328" href="../LNPLS/basic_loop_statement.htm#LNPLS01328"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for the syntax of the <code>LOOP</code> statement</p>
</li>
<li>
<p><a class="olink LNPLS01318" href="../LNPLS/exit_statement.htm#LNPLS01318"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for the syntax of the <code>EXIT</code> statement</p>
</li>
<li>
<p><a class="olink LNPLS00403" href="../LNPLS/controlstatements.htm#LNPLS00403"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information about using the <code>LOOP</code> and <code>EXIT</code> statements</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHHCJDI"></a>
<div id="TDDDG43000" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Using Records and Cursors</h2>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#BABJIJGC">About Records</a></p>
</li>
<li>
<p><a href="#BABGIEHF">Tutorial: Declaring a RECORD Type</a></p>
</li>
<li>
<p><a href="#BABCDCJA">Tutorial: Creating and Invoking a Subprogram with a Record Parameter</a></p>
</li>
<li>
<p><a href="#BABJBEGE">About Cursors</a></p>
</li>
<li>
<p><a href="#BABIEDFH">Using a Declared Cursor to Retrieve Result Set Rows One at a Time</a></p>
</li>
<li>
<p><a href="#BABJJDAJ">Tutorial: Using a Declared Cursor to Retrieve Result Set Rows One at a Time</a></p>
</li>
<li>
<p><a href="#BABEIDAC">About Cursor Variables</a></p>
</li>
<li>
<p><a href="#BABEHCAJ">Using a Cursor Variable to Retrieve Result Set Rows One at a Time</a></p>
</li>
<li>
<p><a href="#BABBEABD">Tutorial: Using a Cursor Variable to Retrieve Result Set Rows One at a Time</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNPLS005" href="../LNPLS/composites.htm#LNPLS005"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information about records</div>
<a id="BABJIJGC"></a>
<div id="TDDDG99958" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">About Records</h3>
<p>A <a id="sthref406"></a><span class="bold">record</span> is a PL/SQL <a id="sthref407"></a><a id="sthref408"></a>composite variable that can store data values of different types, similar to a <code>struct</code> type in C, C++, or Java. The internal components of a record are called <a id="sthref409"></a><span class="bold">fields</span>. To access a record field, you use <a id="sthref410"></a><span class="bold">dot notation</span>: <code><span class="codeinlineitalic">record_name</span></code>.<code><span class="codeinlineitalic">field_name</span></code>.</p>
<p>You can treat record fields like scalar variables. You can also pass entire records as <a id="sthref411"></a>subprogram parameters.</p>
<p>Records are useful for holding data from table rows, or from certain columns of table rows. Each record field corresponds to a table column.</p>
<p><a id="sthref412"></a>There are three ways to create a record:</p>
<ul>
<li>
<p>Declare a <code>RECORD</code> type and then declare a variable of that type.</p>
<p>The syntax is:</p>
<pre>TYPE <span class="italic">record_name</span> IS RECORD
  ( <span class="italic">field_name</span> <span class="italic">data_type</span> [:= <span class="italic">initial_value</span>]
 [, <span class="italic">field_name</span> <span class="italic">data_type</span> [:= <span class="italic">initial_value</span> ] ]... );

<span class="italic">variable_name record_name</span>;
</pre></li>
<li>
<p>Declare a variable of the type <code><span class="codeinlineitalic">table_name</span></code><a id="sthref413"></a><a id="sthref414"></a><code>%ROWTYPE</code>.</p>
<p>The fields of the record have the same names and data types as the columns of the table.</p>
</li>
<li>
<p>Declare a variable of the type <code><span class="codeinlineitalic">cursor_name</span></code><code>%ROWTYPE</code>.</p>
<p>The fields of the record have the same names and data types as the columns of the table in the <code>FROM</code> clause of the cursor <code>SELECT</code> statement.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink LNPLS00509" href="../LNPLS/composites.htm#LNPLS00509"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information about defining <code>RECORD</code> types and declaring records of that type</p>
</li>
<li>
<p><a class="olink LNPLS01338" href="../LNPLS/record_definition.htm#LNPLS01338"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for the syntax of a <code>RECORD</code> type definition</p>
</li>
<li>
<p><a class="olink LNPLS99971" href="../LNPLS/composites.htm#LNPLS99971"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information about the <code>%ROWTYPE</code> attribute</p>
</li>
<li>
<p><a class="olink LNPLS01342" href="../LNPLS/rowtype_attribute.htm#LNPLS01342"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for the syntax of the <code>%ROWTYPE</code> attribute</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="BABGIEHF"></a>
<div id="TDDDG99957" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Tutorial: Declaring a RECORD Type</h3>
<p><a id="sthref415"></a>This tutorial shows how to use the SQL&nbsp;Developer tool Edit to declare a <code>RECORD</code> type, <code>sal_info</code>, whose fields can hold salary information for an employee&mdash;job ID, minimum and maximum salary for that job ID, current salary, and suggested raise.</p>
<p class="subhead2"><a id="TDDDG234"></a>To declare RECORD type sal_info:</p>
<ol>
<li>
<p>In the Connections frame, expand <span class="bold">hr_conn</span>.</p>
<p>Under the <code>hr_conn</code> icon, a list of schema object types appears.</p>
</li>
<li>
<p>Expand <span class="bold">Packages</span>.</p>
<p>A list of packages appears.</p>
</li>
<li>
<p>Right-click <span class="bold">EMP_EVAL</span>.</p>
<p>A list of choices appears.</p>
</li>
<li>
<p>Click <span class="bold">Edit</span>.</p>
<p>The <code>EMP_EVAL</code> pane opens, showing the <code>CREATE</code> <code>PACKAGE</code> statement that created the package:</p>
<pre>CREATE OR REPLACE PACKAGE EMP_EVAL AS
 
PROCEDURE eval_department(dept_id IN NUMBER);
FUNCTION calculate_score(evaluation_id IN NUMBER
                        , performance_id IN NUMBER)
                          RETURN NUMBER;
 
END EMP_EVAL;
</pre></li>
<li>
<p>In the <code>EMP_EVAL</code> pane, immediately before <code>END EMP_EVAL</code>, add this code:</p>
<pre>TYPE sal_info IS RECORD
  ( j_id     jobs.job_id%type
  , sal_min  jobs.min_salary%type
  , sal_max  jobs.max_salary%type
  , sal      employees.salary%type
  , sal_raise NUMBER(3,3) );
</pre>
<p>The title of the pane is in italic font, indicating that the changes have not been saved to the database.</p>
</li>
<li>
<p>Click the icon <span class="bold">Compile</span>.</p>
<p>The changed package specification compiles and is saved to the database. The title of the <code>EMP_EVAL</code> pane is no longer in italic font.</p>
<p>Now you can declare records of the type <code>sal_info</code>, as in <a href="#BABCDCJA">&#34;Tutorial: Creating and Invoking a Subprogram with a Record Parameter&#34;</a>.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BABCDCJA"></a>
<div id="TDDDG99956" class="sect2">
<h3 class="sect2">Tutorial: Creating and Invoking a Subprogram with a Record Parameter</h3>
<p>If you declared the <code>RECORD</code> type <code>sal_info</code> in <a href="#BABGIEHF">&#34;Tutorial: Declaring a RECORD Type&#34;</a>, this tutorial shows how to use the SQL&nbsp;Developer tool Edit to do the following:</p>
<ul>
<li>
<p>Create a procedure, <code>SALARY_SCHEDULE</code>, which has a parameter of type <code>sal_info</code>.</p>
</li>
<li>
<p>Change the <code>EVAL_FREQUENCY</code> function so that it declares a record, <code>emp_sal</code>, of the type <code>sal_info</code>, populates its fields, and passes it to the <code>SALARY_SCHEDULE</code> procedure.</p>
</li>
</ul>
<p>Because <code>EVAL_FREQUENCY</code> will invoke <code>SALARY_SCHEDULE</code>, the declaration of <code>SALARY_SCHEDULE</code> must precede the declaration of <code>EVAL_FREQUENCY</code> (otherwise the package will not compile). However, the definition of <code>SALARY_SCHEDULE</code> can be anywhere in the package body.</p>
<p class="subhead2"><a id="TDDDG235"></a>To create SALARY_SCHEDULE and change EVAL_FREQUENCY:</p>
<ol>
<li>
<p>In the Connections frame, expand <span class="bold">hr_conn</span>.</p>
</li>
<li>
<p>In the list of schema object types, expand <span class="bold">Packages</span>.</p>
</li>
<li>
<p>In the list of packages, expand <span class="bold">EMP_EVAL</span>.</p>
</li>
<li>
<p>In the list of choices, right-click <span class="bold">EMP_EVAL Body</span>.</p>
</li>
<li>
<p>In the list of choices, click <span class="bold">Edit</span>.</p>
<p>The <code>EMP_EVAL</code> Body pane appears, showing the code for the package body.</p>
</li>
<li>
<p>In the <code>EMP_EVAL</code> Body pane, immediately before <code>END EMP_EVAL</code>, add this definition of the <code>SALARY_SCHEDULE</code> procedure:</p>
<pre>PROCEDURE salary_schedule (emp IN sal_info) AS
  accumulating_sal  NUMBER;
BEGIN
  DBMS_OUTPUT.PUT_LINE(&#39;If salary &#39; || emp.sal || 
    &#39; increases by &#39; || ROUND((emp.sal_raise * 100),0) || 
    &#39;% each year, it will be:&#39;);

  accumulating_sal := emp.sal;

  WHILE accumulating_sal &lt;= emp.sal_max LOOP
    accumulating_sal := accumulating_sal * (1 + emp.sal_raise);
    DBMS_OUTPUT.PUT_LINE(ROUND(accumulating_sal,2) ||&#39;, &#39;);
  END LOOP;
END salary_schedule;
</pre>
<p>The title of the pane is in italic font, indicating that the changes have not been saved to the database.</p>
</li>
<li>
<p>In the <code>EMP_EVAL</code> Body pane, enter the code shown in bold font, in this position:</p>
<pre>CREATE OR REPLACE
PACKAGE BODY EMP_EVAL AS

<span class="bold">FUNCTION eval_frequency (emp_id EMPLOYEES.EMPLOYEE_ID%TYPE)</span>
  <span class="bold">RETURN PLS_INTEGER;</span>
<span class="bold">PROCEDURE salary_schedule(emp IN sal_info);</span>
<span class="bold">PROCEDURE add_eval(employee_id IN employees.employee_id%type, today IN DATE);</span>
 
PROCEDURE eval_department (dept_id IN NUMBER) AS
</pre></li>
<li>
<p>Edit the <code>EVAL_FREQUENCY</code> function, making the changes shown in bold font:</p>
<pre>FUNCTION eval_frequency (emp_id EMPLOYEES.EMPLOYEE_ID%TYPE)
  RETURN PLS_INTEGER
AS
  h_date     EMPLOYEES.HIRE_DATE%TYPE;
  today      EMPLOYEES.HIRE_DATE%TYPE;
  eval_freq  PLS_INTEGER;
  <span class="bold">emp_sal    SAL_INFO;  -- replaces sal, sal_raise, and sal_max</span>
 
BEGIN
  SELECT SYSDATE INTO today FROM DUAL;
 
  SELECT HIRE_DATE INTO h_date
  FROM EMPLOYEES
  WHERE EMPLOYEE_ID = eval_frequency.emp_id;
 
  IF ((h_date + (INTERVAL &#39;120&#39; MONTH)) &lt; today) THEN
     eval_freq := 1;
 
     <span class="bold">/* populate emp_sal */</span>
 
     <span class="bold">SELECT j.JOB_ID, j.MIN_SALARY, j.MAX_SALARY, e.SALARY</span>
     <span class="bold">INTO emp_sal.j_id, emp_sal.sal_min, emp_sal.sal_max, emp_sal.sal</span>
     <span class="bold">FROM EMPLOYEES e, JOBS j</span>
     <span class="bold">WHERE e.EMPLOYEE_ID = eval_frequency.emp_id</span>
     <span class="bold">AND j.JOB_ID = eval_frequency.emp_id;</span>
 
     <span class="bold">emp_sal.sal_raise := 0;  -- default</span>
 
     CASE <span class="bold">emp_sal.</span>j_id
       WHEN &#39;PU_CLERK&#39; THEN <span class="bold">emp_sal.</span>sal_raise := 0.08;
       WHEN &#39;SH_CLERK&#39; THEN <span class="bold">emp_sal.</span>sal_raise := 0.07;
       WHEN &#39;ST_CLERK&#39; THEN <span class="bold">emp_sal.</span>sal_raise := 0.06;
       WHEN &#39;HR_REP&#39; THEN <span class="bold">emp_sal.</span>sal_raise := 0.05;
       WHEN &#39;PR_REP&#39; THEN <span class="bold">emp_sal.</span>sal_raise := 0.05;
       WHEN &#39;MK_REP&#39; THEN <span class="bold">emp_sal.</span>sal_raise := 0.04;
       ELSE NULL;
     END CASE;
 
     IF (<span class="bold">emp_sal.</span>sal_raise != 0) THEN
       <span class="bold">salary_schedule(emp_sal);</span>
     END IF;
   ELSE
     eval_freq := 2;
   END IF;
 
   RETURN eval_freq;
 END eval_frequency;
</pre></li>
<li>
<p>Click <span class="bold">Compile</span>.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BABJBEGE"></a>
<div id="TDDDG45000" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">About Cursors</h3>
<p>When Oracle Database executes a SQL statement, it stores the result set and processing information in an unnamed <a id="sthref416"></a>private SQL area. A pointer to this unnamed area, called a <a id="sthref417"></a><span class="bold">cursor</span>, lets you <a id="sthref418"></a><a id="sthref419"></a>retrieve the result set one row at a time. <a id="sthref420"></a><span class="bold">Cursor attributes</span> return information about the state of the cursor.</p>
<p>Every time you run either a SQL <a id="sthref421"></a>DML statement or a PL/SQL <a id="sthref422"></a><code>SELECT</code> <code>INTO</code> statement, PL/SQL opens an <a id="sthref423"></a><a id="sthref424"></a><span class="bold">implicit cursor</span><a id="sthref425"></a>. You can get information about this cursor from its attributes, but you cannot control it. After the statement runs, the database closes the cursor; however, its attribute values remain available until another DML or <code>SELECT</code> <code>INTO</code> statement runs.</p>
<p>PL/SQL also lets you declare cursors. A <a id="sthref426"></a><a id="sthref427"></a><span class="bold">declared cursor</span> has a name and is associated with a query (SQL <code>SELECT</code> statement)&mdash;usually one that returns multiple rows. After declaring a cursor, you must process it, either implicitly or explicitly. To process the cursor implicitly, use a cursor <code>FOR</code> <code>LOOP</code>. The syntax is:</p>
<pre>FOR <span class="italic">record_name</span> IN <span class="italic">cursor_name</span> LOOP
  <span class="italic">statement</span>
  [ <span class="italic">statement</span> ]...
END LOOP;
</pre>
<p>To process the cursor explicitly, open it (with the <code>OPEN</code> statement), fetch rows from the result set either one at a time or in bulk (with the <a id="sthref428"></a><code>FETCH</code> statement), and close the cursor (with the <code>CLOSE</code> statement). After closing the cursor, you can neither fetch records from the result set nor see the cursor attribute values.</p>
<p>The syntax for the value of an implicit <a id="sthref429"></a>cursor attribute is <code>SQL</code><code><span class="codeinlineitalic">attribute</span></code> (for example, <code>SQL%FOUND</code>). <code>SQL</code><code><span class="codeinlineitalic">attribute</span></code> always refers to the most recently run DML or <code>SELECT</code> <code>INTO</code> statement.</p>
<p>The syntax for the value of a declared cursor attribute is <code><span class="codeinlineitalic">cursor_name</span></code> immediately followed by <code><span class="codeinlineitalic">attribute</span></code> (for example, <code>c1%FOUND</code>).</p>
<p><a href="#BABCDDED">Table 5-1</a> lists the <a id="sthref430"></a>cursor attributes and the values that they can return. (Implicit cursors have additional attributes that are beyond the scope of this book.)</p>
<div id="TDDDG236" class="tblformal">
<p class="titleintable"><a id="sthref431"></a><a id="BABCDDED"></a>Table 5-1 Cursor Attribute Values</p>
<table class="cellalignment5846" title="Cursor Attribute Values" summary="This table has three columns and four rows. The first column lists the four cursor attributes. The second column describes the information that the attribute returns for an implicit cursor. The third column describes the information that the attribute returns for an explicit cursor.">
<thead>
<tr class="cellalignment5833">
<th class="cellalignment5843" id="r1c1-t40">Attribute</th>
<th class="cellalignment5843" id="r1c2-t40">Values for Declared Cursor</th>
<th class="cellalignment5843" id="r1c3-t40">Values for Implicit Cursor</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5833">
<td class="cellalignment5839" id="r2c1-t40" headers="r1c1-t40">
<p><a id="sthref432"></a><a id="sthref433"></a><code>%FOUND</code></p>
</td>
<td class="cellalignment5839" headers="r2c1-t40 r1c2-t40">
<p>If cursor is open<a id="CIHFEFJI" href="#CIHFEFJI" onclick="footdisplay(1,&#34;If the cursor is not open, the attribute raises the predefined exception \u003ccode\u003eINVALID_CURSOR\u003c/code\u003e.&#34;)"><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a> but no fetch was attempted, <code>NULL</code>.</p>
<p>If the most recent fetch returned a row, <code>TRUE</code>.</p>
<p>If the most recent fetch did not return a row, <code>FALSE</code>.</p>
</td>
<td class="cellalignment5839" headers="r2c1-t40 r1c3-t40">
<p>If no DML or <code>SELECT</code> <code>INTO</code> statement has run, <code>NULL</code>.</p>
<p>If the most recent DML or <code>SELECT</code> <code>INTO</code> statement returned a row, <code>TRUE</code>.</p>
<p>If the most recent DML or <code>SELECT</code> <code>INTO</code> statement did not return a row, <code>FALSE</code>.</p>
</td>
</tr>
<tr class="cellalignment5833">
<td class="cellalignment5839" id="r3c1-t40" headers="r1c1-t40">
<p><a id="sthref434"></a><a id="sthref435"></a><code>%NOTFOUND</code></p>
</td>
<td class="cellalignment5839" headers="r3c1-t40 r1c2-t40">
<p>If cursor is open<a id="sthref436" href="#sthref436" onclick="footdisplay(1,&#34;If the cursor is not open, the attribute raises the predefined exception \u003ccode\u003eINVALID_CURSOR\u003c/code\u003e.&#34;)"><sup class="footnotenumber">Footref&nbsp;1</sup></a> but no fetch was attempted, <code>NULL</code>.</p>
<p>If the most recent fetch returned a row, <code>FALSE</code>.</p>
<p>If the most recent fetch did not return a row, <code>TRUE</code>.</p>
</td>
<td class="cellalignment5839" headers="r3c1-t40 r1c3-t40">
<p>If no DML or <code>SELECT</code> <code>INTO</code> statement has run, <code>NULL</code>.</p>
<p>If the most recent DML or <code>SELECT</code> <code>INTO</code> statement returned a row, <code>FALSE</code>.</p>
<p>If the most recent DML or <code>SELECT</code> <code>INTO</code> statement did not return a row, <code>TRUE</code>.</p>
</td>
</tr>
<tr class="cellalignment5833">
<td class="cellalignment5839" id="r4c1-t40" headers="r1c1-t40">
<p><a id="sthref437"></a><a id="sthref438"></a><code>%ROWCOUNT</code></p>
</td>
<td class="cellalignment5839" headers="r4c1-t40 r1c2-t40">
<p>If cursor is open<a id="sthref439" href="#sthref439" onclick="footdisplay(1,&#34;If the cursor is not open, the attribute raises the predefined exception \u003ccode\u003eINVALID_CURSOR\u003c/code\u003e.&#34;)"><sup class="footnotenumber">Footref&nbsp;1</sup></a>, a number greater than or equal to zero.</p>
</td>
<td class="cellalignment5839" headers="r4c1-t40 r1c3-t40">
<p><code>NULL</code> if no DML or <code>SELECT</code> <code>INTO</code> statement has run; otherwise, a number greater than or equal to zero.</p>
</td>
</tr>
<tr class="cellalignment5833">
<td class="cellalignment5839" id="r5c1-t40" headers="r1c1-t40">
<p><a id="sthref440"></a><a id="sthref441"></a><code>%ISOPEN</code></p>
</td>
<td class="cellalignment5839" headers="r5c1-t40 r1c2-t40">
<p>If cursor is open, <code>TRUE</code>; if not, <code>FALSE</code>.</p>
</td>
<td class="cellalignment5839" headers="r5c1-t40 r1c3-t40">
<p>Always <code>FALSE</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>If the cursor is not open, the attribute raises the predefined exception <code>INVALID_CURSOR</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="tdddg_connecting.htm#CEGDGCJD">&#34;About Queries&#34;</a></p>
</li>
<li>
<p><a href="tdddg_dml.htm#BCGBGBIE">&#34;About Data Manipulation Language (DML) Statements&#34;</a></p>
</li>
<li>
<p><a class="olink ADFNS100" href="../ADFNS/preface.htm#ADFNS100"><span class="italic">Oracle Database Development Guide</span></a> for more information about using cursors in PL/SQL</p>
</li>
<li>
<p><a class="olink LNPLS01345" href="../LNPLS/selectinto_statement.htm#LNPLS01345"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information about the <code>SELECT</code> <code>INTO</code> statement</p>
</li>
<li>
<p><a class="olink LNPLS00602" href="../LNPLS/static.htm#LNPLS00602"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information about managing cursors in PL/SQL</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="BABIEDFH"></a>
<div id="TDDDG46100" class="sect2">
<h3 class="sect2">Using a Declared Cursor to Retrieve Result Set Rows One at a Time</h3>
<p><a id="sthref442"></a>The following procedure uses each necessary statement in its simplest form, but provides references to its complete syntax.</p>
<p class="subhead2"><a id="TDDDG237"></a>To use a declared cursor to retrieve result set rows one at a time:</p>
<ol>
<li>
<p>In the declarative part:</p>
<ol>
<li>
<p>Declare the cursor:</p>
<pre>CURSOR <span class="italic">cursor_name</span> IS <span class="italic">query</span>;
</pre>
<p>For complete declared cursor declaration syntax, see <a class="olink LNPLS01313" href="../LNPLS/explicit_cursor.htm#LNPLS01313"><span class="italic">Oracle Database PL/SQL Language Reference</span></a>.</p>
</li>
<li>
<p>Declare a record to hold the row returned by the cursor:</p>
<pre><span class="italic">record_name</span> <span class="italic">cursor_name</span>%ROWTYPE;
</pre>
<p>For complete <code>%ROWTYPE</code> syntax, see <a class="olink LNPLS01342" href="../LNPLS/rowtype_attribute.htm#LNPLS01342"><span class="italic">Oracle Database PL/SQL Language Reference</span></a>.</p>
</li>
</ol>
</li>
<li>
<p>In the executable part:</p>
<ol>
<li>
<p>Open the cursor:</p>
<pre>OPEN <span class="italic">cursor_name</span>;
</pre>
<p>For complete <code>OPEN</code> statement syntax, see <a class="olink LNPLS01332" href="../LNPLS/open_statement.htm#LNPLS01332"><span class="italic">Oracle Database PL/SQL Language Reference</span></a>.</p>
</li>
<li>
<p>Fetch rows from the cursor (rows from the result set) one at a time, using a <code>LOOP</code> statement that has syntax similar to this:</p>
<pre>LOOP
  FETCH <span class="italic">cursor_name</span> INTO <span class="italic">record_name</span>;
  EXIT WHEN <span class="italic">cursor_name</span>%NOTFOUND;
  -- Process row that is in <span class="italic">record_name</span>:
  <span class="italic">statement</span>;
  [ <span class="italic">statement</span>; ]...
END LOOP;
</pre>
<p>For complete <code>FETCH</code> statement syntax, see <a class="olink LNPLS01320" href="../LNPLS/fetch_statement.htm#LNPLS01320"><span class="italic">Oracle Database PL/SQL Language Reference</span></a>.</p>
</li>
<li>
<p>Close the cursor:</p>
<pre>CLOSE <span class="italic">cursor_name</span>;
</pre>
<p>For complete <code>CLOSE</code> statement syntax, see <a class="olink LNPLS01305" href="../LNPLS/close_statement.htm#LNPLS01305"><span class="italic">Oracle Database PL/SQL Language Reference</span></a>.</p>
</li>
</ol>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BABJJDAJ"></a>
<div id="TDDDG99953" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Tutorial: Using a Declared Cursor to Retrieve Result Set Rows One at a Time</h3>
<p>This tutorial shows how to implement the procedure <code>EMP_EVAL</code>.<code>EVAL_DEPARTMENT</code>, which uses a declared cursor, <code>emp_cursor</code>.</p>
<p class="subhead2"><a id="TDDDG238"></a>To implement the EMP_EVAL.EVAL_DEPARTMENT procedure:</p>
<ol>
<li>
<p>In the <code>EMP_EVAL</code> package specification, change the declaration of the <code>EVAL_DEPARTMENT</code> procedure as shown in bold font:</p>
<pre>PROCEDURE eval_department(dept_id IN <span class="bold">employees.department_id%TYPE</span>);
</pre></li>
<li>
<p>In the <code>EMP_EVAL</code> package body, change the definition of the <code>EVAL_DEPARTMENT</code> procedure as shown in bold font:</p>
<pre>PROCEDURE eval_department (dept_id IN <span class="bold">employees.department_id%TYPE</span>)
AS
  <span class="bold">CURSOR emp_cursor IS</span>
    <span class="bold">SELECT * FROM EMPLOYEES</span>
    <span class="bold">WHERE DEPARTMENT_ID = eval_department.dept_id;</span>

  <span class="bold">emp_record  EMPLOYEES%ROWTYPE;</span>  -- for row returned by cursor
  <span class="bold">all_evals   BOOLEAN;</span>  -- true if all employees in dept need evaluations
  <span class="bold">today       DATE;</span>

BEGIN
  <span class="bold">today := SYSDATE;</span>

  <span class="bold">IF (EXTRACT(MONTH FROM today) &lt; 6) THEN</span>
    <span class="bold">all_evals := FALSE;</span> -- only new employees need evaluations
  <span class="bold">ELSE</span>
    <span class="bold">all_evals := TRUE;</span>  -- all employees need evaluations
  <span class="bold">END IF;</span>

  <span class="bold">OPEN emp_cursor;</span>

  <span class="bold">DBMS_OUTPUT.PUT_LINE (</span>
    <span class="bold">&#39;Determining evaluations necessary in department # &#39; ||</span>
    <span class="bold">dept_id );</span>

  <span class="bold">LOOP</span>
    <span class="bold">FETCH emp_cursor INTO emp_record;</span>
    <span class="bold">EXIT WHEN emp_cursor%NOTFOUND;</span>

    <span class="bold">IF all_evals THEN</span>
      <span class="bold">add_eval(emp_record.employee_id, today);</span>
    <span class="bold">ELSIF (eval_frequency(emp_record.employee_id) = 2) THEN</span>
      <span class="bold">add_eval(emp_record.employee_id, today);</span>
    <span class="bold">END IF;</span>
  <span class="bold">END LOOP;</span>

  <span class="bold">DBMS_OUTPUT.PUT_LINE(&#39;Processed &#39; || emp_cursor%ROWCOUNT || &#39; records.&#39;);</span>

  <span class="bold">CLOSE emp_cursor;</span>
END eval_department;
</pre>
<p>(For a step-by-step example of changing a package body, see <a href="#CIHBGDBA">&#34;Tutorial: Declaring Variables and Constants in a Subprogram&#34;</a>.)</p>
</li>
<li>
<p>Compile the <code>EMP_EVAL</code> package specification.</p>
</li>
<li>
<p>Compile the <code>EMP_EVAL</code> package body.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BABEIDAC"></a>
<div id="TDDDG99939" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">About Cursor Variables</h3>
<p>A <a id="sthref443"></a><span class="bold">cursor variable</span> is like a cursor (see <a href="#BABJBEGE">&#34;About Cursors&#34;</a>), except that it is not limited to one query. You can open a cursor variable for a query, process the result set, and then use the cursor variable for another query. Cursor variables are useful for passing query results between <a id="sthref444"></a>subprograms.</p>
<p>To declare a cursor variable, you declare a <a id="sthref445"></a><code>REF</code> <code>CURSOR</code> type, and then declare a variable of that type (therefore, a cursor variable is often called a <code>REF</code> <code>CURSOR</code>). A <code>REF</code> <code>CURSOR</code> type can be either strong or weak.</p>
<p>A <a id="sthref446"></a><span class="bold">strong</span> <code><span class="codeinlinebold">REF</span></code> <code><span class="codeinlinebold">CURSOR</span></code> <span class="bold">type</span> specifies a <a id="sthref447"></a><a id="sthref448"></a><span class="bold">return type</span>, which is the <code>RECORD</code> type of its cursor variables. The PL/SQL compiler does not allow you to use these <a id="sthref449"></a><span class="bold">strongly typed</span> cursor variables for queries that return rows that are not of the return type. Strong <code>REF</code> <code>CURSOR</code> types are less error-prone than weak ones, but weak ones are more flexible.</p>
<p>A <a id="sthref450"></a><span class="bold">weak</span> <code><span class="codeinlinebold">REF</span></code> <code><span class="codeinlinebold">CURSOR</span></code> <span class="bold">type</span> does not specify a return type. The PL/SQL compiler accepts <a id="sthref451"></a><span class="bold">weakly typed</span> cursor variables in any queries. Weak <code>REF</code> <code>CURSOR</code> types are interchangeable; therefore, instead of creating weak <code>REF</code> <code>CURSOR</code> types, you can use the predefined type weak cursor type <a id="sthref452"></a><code>SYS_REFCURSOR</code>.</p>
<p>After declaring a cursor variable, you must open it for a specific query (with the <code>OPEN</code> <code>FOR</code> statement), fetch rows one at a time from the result set (with the <code>FETCH</code> statement), and then either close the cursor (with the <code>CLOSE</code> statement) or open it for another specific query (with the <code>OPEN</code> <code>FOR</code> statement). Opening the cursor variable for another query closes it for the previous query. After closing a cursor variable for a specific query, you can neither fetch records from the result set of that query nor see the cursor attribute values for that query.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink LNPLS00605" href="../LNPLS/static.htm#LNPLS00605"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information about using cursor variables</p>
</li>
<li>
<p><a class="olink LNPLS01312" href="../LNPLS/cursor_variable.htm#LNPLS01312"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for the syntax of cursor variable declaration</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="BABEHCAJ"></a>
<div id="TDDDG99954" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using a Cursor Variable to Retrieve Result Set Rows One at a Time</h3>
<p><a id="sthref453"></a>The following procedure uses each of the necessary statements in its simplest form, but provides references to their complete syntax.</p>
<p class="subhead2"><a id="TDDDG239"></a>To use a cursor variable to retrieve result set rows one at a time:</p>
<ol>
<li>
<p>In the declarative part:</p>
<ol>
<li>
<p>Declare the <code>REF</code> <code>CURSOR</code> type:</p>
<pre>TYPE <span class="italic">cursor_type</span> IS REF CURSOR [ RETURN <span class="codeinlineitalic">return_type</span> ];
</pre>
<p>For complete <code>REF</code> <code>CURSOR</code> type declaration syntax, see <a class="olink LNPLS01312" href="../LNPLS/cursor_variable.htm#LNPLS01312"><span class="italic">Oracle Database PL/SQL Language Reference</span></a>.</p>
</li>
<li>
<p>Declare a cursor variable of that type:</p>
<pre><span class="italic">cursor_variable cursor_type</span>;
</pre>
<p>For complete cursor variable declaration syntax, see <a class="olink LNPLS01312" href="../LNPLS/cursor_variable.htm#LNPLS01312"><span class="italic">Oracle Database PL/SQL Language Reference</span></a>.</p>
</li>
<li>
<p>Declare a record to hold the row returned by the cursor:</p>
<pre><span class="italic">record_name</span> <span class="codeinlineitalic">return_type</span>;
</pre>
<p>For complete information about record declaration syntax, see <a class="olink LNPLS01338" href="../LNPLS/record_definition.htm#LNPLS01338"><span class="italic">Oracle Database PL/SQL Language Reference</span></a>.</p>
</li>
</ol>
</li>
<li>
<p>In the executable part:</p>
<ol>
<li>
<p>Open the cursor variable for a specific query:</p>
<pre>OPEN <span class="italic">cursor_variable</span> FOR <span class="italic">query</span>;
</pre>
<p>For complete information about <code>OPEN</code> <code>FOR</code> statement syntax, see <a class="olink LNPLS01333" href="../LNPLS/openfor_statement.htm#LNPLS01333"><span class="italic">Oracle Database PL/SQL Language Reference</span></a>.</p>
</li>
<li>
<p>Fetch rows from the cursor variable (rows from the result set) one at a time, using a <code>LOOP</code> statement that has syntax similar to this:</p>
<pre>LOOP
  FETCH <span class="italic">cursor_variable</span> INTO <span class="italic">record_name</span>;
  EXIT WHEN <span class="italic">cursor_variable</span>%NOTFOUND;
  -- Process row that is in <span class="italic">record_name</span>:
  <span class="italic">statement</span>;
  [ <span class="italic">statement</span>; ]...
END LOOP;
</pre>
<p>For complete information about <code>FETCH</code> statement syntax, see <a class="olink LNPLS01320" href="../LNPLS/fetch_statement.htm#LNPLS01320"><span class="italic">Oracle Database PL/SQL Language Reference</span></a>.</p>
</li>
<li>
<p>Close the cursor variable:</p>
<pre>CLOSE <span class="italic">cursor_variable</span>;
</pre>
<p>Alternatively, you can open the cursor variable for another query, which closes it for the current query.</p>
<p>For complete information about <code>CLOSE</code> statement syntax, see <a class="olink LNPLS01305" href="../LNPLS/close_statement.htm#LNPLS01305"><span class="italic">Oracle Database PL/SQL Language Reference</span></a>.</p>
</li>
</ol>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BABBEABD"></a>
<div id="TDDDG99955" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Tutorial: Using a Cursor Variable to Retrieve Result Set Rows One at a Time</h3>
<p><a id="sthref454"></a>This tutorial shows how to change the <code>EMP_EVAL</code>.<code>EVAL_DEPARTMENT</code> procedure so that it uses a cursor variable instead of a declared cursor, which lets it process multiple departments. The change includes adding a procedure that uses the cursor variable.</p>
<p>This tutorial also shows how to make <code>EMP_EVAL</code>.<code>EVAL_DEPARTMENT</code> and <code>EMP_EVAL</code>.<code>ADD_EVAL</code> more efficient: Instead of passing one field of a record to <code>ADD_EVAL</code> and having <code>ADD_EVAL</code> use three queries to extract three other fields of the same record, <code>EVAL_DEPARTMENT</code> passes the entire record to <code>ADD_EVAL</code>, and <code>ADD_EVAL</code> uses dot notation to access the values of the other three fields.</p>
<p class="subhead2"><a id="TDDDG240"></a>To change the EMP_EVAL.EVAL_DEPARTMENT procedure to use a cursor variable:</p>
<ol>
<li>
<p>In the <code>EMP_EVAL</code> package specification, add the procedure declaration and the <code>REF</code> <code>CURSOR</code> type definition, as shown in bold font:</p>
<pre>CREATE OR REPLACE
PACKAGE emp_eval AS

  PROCEDURE eval_department (dept_id IN employees.department_id%TYPE);

  <span class="bold">PROCEDURE eval_everyone;</span>

  FUNCTION calculate_score(eval_id IN scores.evaluation_id%TYPE 
                         , perf_id IN scores.performance_id%TYPE) 
                           RETURN NUMBER;
  TYPE SAL_INFO IS RECORD
      ( j_id jobs.job_id%type
      , sal_min jobs.min_salary%type
      , sal_max jobs.max_salary%type
      , salary employees.salary%type
      , sal_raise NUMBER(3,3));
      

  <span class="bold">TYPE emp_refcursor_type IS REF CURSOR RETURN employees%ROWTYPE;</span>
END emp_eval;
</pre></li>
<li>
<p>In the <code>EMP_EVAL</code> package body, add a forward declaration for the procedure <code>EVAL_LOOP_CONTROL</code> and change the declaration of the procedure <code>ADD_EVAL</code>, as shown in bold font:</p>
<pre>CREATE OR REPLACE
PACKAGE BODY EMP_EVAL AS

  FUNCTION eval_frequency (emp_id IN EMPLOYEES.EMPLOYEE_ID%TYPE)
    RETURN PLS_INTEGER;

  PROCEDURE salary_schedule(emp IN sal_info);

  <span class="bold">PROCEDURE add_eval(emp_record IN EMPLOYEES%ROWTYPE, today IN DATE);</span>

  <span class="bold">PROCEDURE eval_loop_control(emp_cursor IN emp_refcursor_type);</span>
...
</pre>
<p>(For a step-by-step example of changing a package body, see <a href="#CIHBGDBA">&#34;Tutorial: Declaring Variables and Constants in a Subprogram&#34;</a>.)</p>
</li>
<li id="CIHCCIHH">
<p>Change the <code>EVAL_DEPARTMENT</code> procedure to retrieve three separate result sets based on the department, and to invoke the <code>EVAL_LOOP_CONTROL</code> procedure, as shown in bold font:</p>
<pre>PROCEDURE eval_department(dept_id IN employees.department_id%TYPE) AS
  <span class="bold">emp_cursor    emp_refcursor_type;</span>
  <span class="bold">current_dept  departments.department_id%TYPE;</span>

BEGIN
  <span class="bold">current_dept := dept_id;</span>

  <span class="bold">FOR loop_c IN 1..3 LOOP</span>
    <span class="bold">OPEN emp_cursor FOR</span>
      <span class="bold">SELECT *</span> 
      <span class="bold">FROM employees</span>
      <span class="bold">WHERE current_dept = eval_department.dept_id;</span>

    DBMS_OUTPUT.PUT_LINE
      (&#39;Determining necessary evaluations in department #&#39; ||
       <span class="bold">current_dept</span>);

    <span class="bold">eval_loop_control(emp_cursor);</span>

    DBMS_OUTPUT.PUT_LINE
      (&#39;Processed &#39; || emp_cursor%ROWCOUNT || &#39; records.&#39;);

    CLOSE emp_cursor;
    <span class="bold">current_dept := current_dept + 10;</span> 
  <span class="bold">END LOOP;</span>
END eval_department;
</pre></li>
<li>
<p>Change the <code>ADD_EVAL</code> procedure as shown in bold font:</p>
<pre>PROCEDURE add_eval(<span class="bold">emp_record IN employees%ROWTYPE</span>, today IN DATE)
AS
<span class="bold">-- (Delete local variables)</span>
BEGIN
  INSERT INTO EVALUATIONS (
    evaluation_id,
    employee_id,
    evaluation_date,
    job_id,
    manager_id,
    department_id,
    total_score
  )
  VALUES (
    evaluations_sequence.NEXTVAL,   -- evaluation_id
    <span class="bold">emp_record.employee_id,    -- employee_id</span>
    today,                     -- evaluation_date
    <span class="bold">emp_record.job_id,         -- job_id</span>
    <span class="bold">emp_record.manager_id,     -- manager_id</span>
    <span class="bold">emp_record.department_id,  -- department_id</span>
    0                           -- total_score
);
END add_eval;
</pre></li>
<li>
<p>Before <code>END</code> <code>EMP_EVAL</code>, add the following procedure, which fetches the individual records from the result set and processes them:</p>
<pre>PROCEDURE eval_loop_control (emp_cursor IN emp_refcursor_type) AS
   emp_record      EMPLOYEES%ROWTYPE;
   all_evals       BOOLEAN;
   today           DATE;
BEGIN
  today := SYSDATE;

  IF (EXTRACT(MONTH FROM today) &lt; 6) THEN
    all_evals := FALSE;
  ELSE 
    all_evals := TRUE;
  END IF;

  LOOP
    FETCH emp_cursor INTO emp_record;
    EXIT WHEN emp_cursor%NOTFOUND;

    IF all_evals THEN
      add_eval(emp_record, today);
    ELSIF (eval_frequency(emp_record.employee_id) = 2) THEN
      add_eval(emp_record, today);
    END IF;
  END LOOP;
END eval_loop_control;
</pre></li>
<li>
<p>Before <code>END</code> <code>EMP_EVAL</code>, add the following procedure, which retrieves a result set that contains all employees in the company:</p>
<pre>PROCEDURE eval_everyone AS
  emp_cursor emp_refcursor_type;
BEGIN
  OPEN emp_cursor FOR SELECT * FROM employees;
  DBMS_OUTPUT.PUT_LINE(&#39;Determining number of necessary evaluations.&#39;);
  eval_loop_control(emp_cursor);
  DBMS_OUTPUT.PUT_LINE(&#39;Processed &#39; || emp_cursor%ROWCOUNT || &#39; records.&#39;);
  CLOSE emp_cursor;
END eval_everyone;
</pre></li>
<li>
<p>Compile the <code>EMP_EVAL</code> package specification.</p>
</li>
<li>
<p>Compile the <code>EMP_EVAL</code> package body.</p>
</li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABDFGAA"></a>
<div id="TDDDG49000" class="sect1">
<h2 class="sect1">Using Associative Arrays</h2>
<p>An associative array is a type of collection.</p>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#BABGHDJD">About Collections</a></p>
</li>
<li>
<p><a href="#BABIEHDG">About Associative Arrays</a></p>
</li>
<li>
<p><a href="#BABBIBHD">Declaring Associative Arrays</a></p>
</li>
<li>
<p><a href="#BABJHJBJ">Populating Associative Arrays</a></p>
</li>
<li>
<p><a href="#CIHBIEFB">Traversing Dense Associative Arrays</a></p>
</li>
<li>
<p><a href="#BABCBIED">Traversing Sparse Associative Arrays</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
For more information about collections:
<ul>
<li>
<p><a class="olink CNCPT1787" href="../CNCPT/srvrside.htm#CNCPT1787"><span class="italic">Oracle Database Concepts</span></a></p>
</li>
<li>
<p><a class="olink LNPLS005" href="../LNPLS/composites.htm#LNPLS005"><span class="italic">Oracle Database PL/SQL Language Reference</span></a></p>
</li>
</ul>
</div>
<a id="BABGHDJD"></a>
<div id="TDDDG99952" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">About Collections</h3>
<p>A <a id="sthref455"></a><span class="bold">collection</span> is a PL/SQL <a id="sthref456"></a><a id="sthref457"></a>composite variable that stores elements of the same type in a specified order, similar to a one-dimensional array. The internal components of a collection are called <span class="bold">elements</span>. Each element has a unique subscript that identifies its position in the collection. To access a collection element, you use <a id="sthref458"></a><span class="bold">subscript notation</span>: <code><span class="codeinlineitalic">collection_name</span></code>(<code><span class="codeinlineitalic">element_subscript</span></code>).</p>
<p>You can treat collection elements like scalar variables. You can also pass entire collections as <a id="sthref459"></a>subprogram parameters (if neither the sending nor receiving subprogram is a standalone subprogram).</p>
<p>A <a id="sthref460"></a><a id="sthref461"></a><span class="bold">collection method</span> is a built-in PL/SQL subprogram that either returns information about a collection or operates on a collection. To invoke a collection method, you use <a id="sthref462"></a><a id="sthref463"></a><span class="bold">dot notation</span>: <code><span class="codeinlineitalic">collection_name</span></code>.<code><span class="codeinlineitalic">method_name</span></code>. For example, <code><span class="codeinlineitalic">collection_name</span></code>.<code>COUNT</code> returns the number of elements in the collection.</p>
<p>PL/SQL has three types of collections:</p>
<ul>
<li>
<p>Associative arrays (formerly called &#34;PL/SQL tables&#34; or &#34;index-by tables&#34;)</p>
</li>
<li>
<p><a id="sthref464"></a>Nested tables</p>
</li>
<li>
<p><a id="sthref465"></a><a id="sthref466"></a>Variable arrays (varrays)</p>
</li>
</ul>
<p>This document explains only associative arrays.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink LNPLS00501" href="../LNPLS/composites.htm#LNPLS00501"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information about PL/SQL collection types</p>
</li>
<li>
<p><a class="olink LNPLS00508" href="../LNPLS/composites.htm#LNPLS00508"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information about collection methods</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="BABIEHDG"></a>
<div id="TDDDG99951" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">About Associative Arrays</h3>
<p>An <a id="sthref467"></a><span class="bold">associative array</span> is an unbounded set of key-value pairs. Each key is unique, and serves as the subscript of the element that holds the corresponding value. Therefore, you can access elements without knowing their positions in the array, and without traversing the array.</p>
<p>The <a id="sthref468"></a>data type of the key can be either <code>PLS_INTEGER</code> or <code>VARCHAR2</code>&nbsp;<code>(</code><code><span class="codeinlineitalic">length</span></code><code>)</code>.</p>
<p>If the data type of the key is <code>PLS_INTEGER</code> and the associative array is <a id="sthref469"></a><span class="bold">indexed by integer</span> and is <a id="sthref470"></a><a id="sthref471"></a><span class="bold">dense</span> (that is, has no gaps between elements), then every element between the first and last element is defined and has a value (which can be <code>NULL</code>).</p>
<p>If the key type is <code>VARCHAR2</code>&nbsp;<code>(</code><code><span class="codeinlineitalic">length</span></code><code>)</code>, the associative array is <a id="sthref472"></a><span class="bold">indexed by string</span> (of <code><span class="codeinlineitalic">length</span></code> characters) and is <a id="sthref473"></a><a id="sthref474"></a><span class="bold">sparse</span>; that is, it might have gaps between elements.</p>
<p>When traversing a dense associative array, you need not beware of gaps between elements; when traversing a sparse associative array, you do.</p>
<p>To assign a value to an associative array element, you can use an <a id="sthref475"></a>assignment operator:</p>
<pre><span class="italic">array_name</span>(<span class="italic">key</span>) := <span class="italic">value</span>
</pre>
<p>If <code><span class="codeinlineitalic">key</span></code> is not in the array, then the assignment statement adds the <code><span class="codeinlineitalic">key</span></code>-<code><span class="codeinlineitalic">value</span></code> pair to the array. Otherwise, the statement changes the value of <code><span class="codeinlineitalic">array_name</span></code><code>(</code><code><span class="codeinlineitalic">key</span></code><code>)</code> to <code><span class="codeinlineitalic">value</span></code>.</p>
<p>Associative arrays are useful for storing data temporarily. They do not use the disk space or network operations that tables require. However, because associative arrays are intended for temporary storage, you cannot manipulate them with <a id="sthref476"></a>DML statements.</p>
<p>If you declare an associative array in a package and assign values to the variable in the package body, then the associative array exists for the life of the database session. Otherwise, it exists for the life of the subprogram in which you declare it.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNPLS99969" href="../LNPLS/composites.htm#LNPLS99969"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information about associative arrays</div>
</div>
<!-- class="sect2" -->
<a id="BABBIBHD"></a>
<div id="TDDDG99950" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Declaring Associative Arrays</h3>
<p>To declare an <a id="sthref477"></a>associative array, you declare an associative array type and then declare a variable of that type. The simplest syntax is:</p>
<pre>TYPE <span class="italic">array_type</span> IS TABLE OF <span class="italic">element_type</span> INDEX BY <span class="italic">key_type</span>;

<span class="italic">array_name  array_type</span>;
</pre>
<p>An efficient way to declare an associative array is with a <a id="sthref478"></a>cursor, using the following procedure. The procedure uses each necessary statement in its simplest form, but provides references to its complete syntax.</p>
<p class="subhead2"><a id="TDDDG241"></a>To use a cursor to declare an associative array:</p>
<ol>
<li>
<p>In the declarative part:</p>
<ol>
<li>
<p>Declare the cursor:</p>
<pre>CURSOR <span class="italic">cursor_name</span> IS <span class="italic">query</span>;
</pre>
<p>For complete declared cursor declaration syntax, see <a class="olink LNPLS01307" href="../LNPLS/collection_variable.htm#LNPLS01307"><span class="italic">Oracle Database PL/SQL Language Reference</span></a>.</p>
</li>
<li>
<p>Declare the associative array type:</p>
<pre>TYPE <span class="italic">array_type</span> IS TABLE OF <span class="italic">cursor_name</span>%ROWTYPE
  INDEX BY { PLS_INTEGER | VARCHAR2 <span class="codeinlineitalic">length</span> }
</pre>
<p>For complete associative array type declaration syntax, see <a class="olink LNPLS01313" href="../LNPLS/explicit_cursor.htm#LNPLS01313"><span class="italic">Oracle Database PL/SQL Language Reference</span></a>.</p>
</li>
<li>
<p>Declare an associative array variable of that type:</p>
<pre><span class="italic">array_name  array_type</span>;
</pre>
<p>For complete variable declaration syntax, see <a class="olink LNPLS01388" href="../LNPLS/scalar_variable_declaration.htm#LNPLS01388"><span class="italic">Oracle Database PL/SQL Language Reference</span></a>.</p>
</li>
</ol>
</li>
</ol>
<p><a href="#BABCJGAD">Example 5-9</a> uses the preceding procedure to declare two associative arrays, <code>employees_jobs</code> and <code>jobs_</code>, and then declares a third associative array, <code>job_titles</code>, without using a cursor. The first two arrays are indexed by integer; the third is indexed by string.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code>ORDER</code> <code>BY</code> clause in the declaration of <code>employees_jobs_cursor</code> determines the storage order of the elements of the associative array <code>employee_jobs</code>.</div>
<div id="TDDDG242" class="example">
<p class="titleinexample"><a id="BABCJGAD"></a>Example 5-9 Declaring Associative Arrays</p>
<pre>DECLARE
  -- Declare cursor:

  CURSOR employees_jobs_cursor IS
    SELECT FIRST_NAME, LAST_NAME, JOB_ID
    FROM EMPLOYEES
    ORDER BY JOB_ID, LAST_NAME, FIRST_NAME;

  -- Declare associative array type:

  TYPE employees_jobs_type IS TABLE OF employees_jobs_cursor%ROWTYPE
    INDEX BY PLS_INTEGER;

  -- Declare associative array:

  employees_jobs  employees_jobs_type;

  -- Use same procedure to declare another associative array:

  CURSOR jobs_cursor IS
    SELECT JOB_ID, JOB_TITLE
    FROM JOBS;

  TYPE jobs_type IS TABLE OF jobs_cursor%ROWTYPE
    INDEX BY PLS_INTEGER;

  jobs_  jobs_type;

-- Declare associative array without using cursor:

  TYPE job_titles_type IS TABLE OF JOBS.JOB_TITLE%TYPE
    INDEX BY JOBS.JOB_ID%TYPE;  -- jobs.job_id%type is varchar2(10)

  job_titles  job_titles_type;

BEGIN
  NULL;
END;
/
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#BABJBEGE">&#34;About Cursors&#34;</a></p>
</li>
<li>
<p><a class="olink LNPLS01307" href="../LNPLS/collection_variable.htm#LNPLS01307"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for associative array declaration syntax</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="BABJHJBJ"></a>
<div id="TDDDG99949" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Populating Associative Arrays</h3>
<p>The most efficient way to <a id="sthref479"></a>populate a dense associative array is usually with a <code>SELECT</code> statement with a <a id="sthref480"></a><code>BULK</code> <code>COLLECT</code> <code>INTO</code> clause.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If a dense associative array is so large that a <code>SELECT</code> statement would a return a result set too large to fit in memory, then do not use a <code>SELECT</code> statement. Instead, populate the array with a <a id="sthref481"></a><a id="sthref482"></a>cursor and the <a id="sthref483"></a><code>FETCH</code> statement with the clauses <code>BULK</code> <code>COLLECT</code> <code>INTO</code> and <code>LIMIT</code>. For information about using the <code>FETCH</code> statement with <code>BULK</code> <code>COLLECT</code> clause, see <a class="olink LNPLS894" href="../LNPLS/tuning.htm#LNPLS894"><span class="italic">Oracle Database PL/SQL Language Reference</span></a>.</div>
<p>You cannot use a <code>SELECT</code> statement to populate a sparse associative array (such as <code>job_titles</code> in <a href="#BABBIBHD">&#34;Declaring Associative Arrays&#34;</a>). Instead, you must use an assignment statement inside a loop statement. For information about <a id="sthref484"></a><a id="sthref485"></a>loop statements, see <a href="#CIHHFJFJ">&#34;Controlling Program Flow&#34;</a>.</p>
<p><a href="#CIHJHGAI">Example 5-10</a> uses <code>SELECT</code> statements to populate the associative arrays <code>employees_jobs</code> and <code>jobs_</code>, which are indexed by integer. Then it uses an assignment statement inside a <code>FOR</code> <code>LOOP</code> statement to populate the associative array <code>job_titles</code>, which is indexed by string.</p>
<div id="TDDDG244" class="example">
<p class="titleinexample"><a id="CIHJHGAI"></a>Example 5-10 Populating Associative Arrays</p>
<pre>-- Declarative part from <a href="#BABCJGAD">Example 5-9</a> goes here.
BEGIN
  -- Populate associative arrays indexed by integer:

SELECT FIRST_NAME, LAST_NAME, JOB_ID BULK COLLECT INTO employees_jobs
  FROM EMPLOYEES ORDER BY JOB_ID, LAST_NAME, FIRST_NAME;

SELECT JOB_ID, JOB_TITLE BULK COLLECT INTO jobs_ FROM JOBS;

  -- Populate associative array indexed by string:

  FOR i IN 1..jobs_.COUNT() LOOP
    job_titles(jobs_(i).job_id) := jobs_(i).job_title;
  END LOOP;
END;
/
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABJBEGE">&#34;About Cursors&#34;</a></div>
</div>
<!-- class="sect2" -->
<a id="CIHBIEFB"></a>
<div id="TDDDG49500" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Traversing Dense Associative Arrays</h3>
<p>A <a id="sthref486"></a><a id="sthref487"></a><span class="bold">dense associative array</span> (indexed by integer) has no gaps between elements&mdash;every element between the first and last element is defined and has a value (which can be <code>NULL</code>). You can traverse a dense array with a <code>FOR</code> <code>LOOP</code> statement, as in <a href="#CIHFJFDG">Example 5-11</a>.</p>
<p>When inserted in the executable part of <a href="#CIHJHGAI">Example 5-10</a>, after the code that populates the <code>employees_jobs</code> array, the <code>FOR</code> <code>LOOP</code> statement in <a href="#CIHFJFDG">Example 5-11</a> prints the elements of the <code>employees_jobs</code> array in the order in which they were stored. Their storage order was determined by the <code>ORDER</code> <code>BY</code> clause in the declaration of <code>employees_jobs_cursor</code>, which was used to declare <code>employees_jobs</code> (see <a href="#BABCJGAD">Example 5-9</a>).</p>
<p>The upper bound of the <code>FOR</code> <code>LOOP</code> statement, <code>employees_jobs</code>. <a id="sthref488"></a><a id="sthref489"></a><code>COUNT</code>, invokes a collection method that returns the number of elements in the array. For more information about <code>COUNT</code>, see <a class="olink LNPLS99967" href="../LNPLS/composites.htm#LNPLS99967"><span class="italic">Oracle Database PL/SQL Language Reference</span></a>.</p>
<div id="TDDDG245" class="example">
<p class="titleinexample"><a id="CIHFJFDG"></a>Example 5-11 Traversing a Dense Associative Array</p>
<pre>-- Code that populates employees_jobs must precede this code:

FOR i IN 1..<span class="bold">employees_jobs.COUNT</span> LOOP
  DBMS_OUTPUT.PUT_LINE(
    RPAD(employees_jobs(i).first_name, 23) ||
    RPAD(employees_jobs(i).last_name,  28) ||     employees_jobs(i).job_id);
  END LOOP;
</pre>
<p>Result:</p>
<pre>William                Gietz                       AC_ACCOUNT
Shelley                Higgins                     AC_MGR
Jennifer               Whalen                      AD_ASST
Steven                 King                        AD_PRES
Lex                    De Haan                     AD_VP
Neena                  Kochhar                     AD_VP
John                   Chen                        FI_ACCOUNT
...
Jose Manuel            Urman                       FI_ACCOUNT
Nancy                  Greenberg                   FI_MGR
Susan                  Mavris                      HR_REP
David                  Austin                      IT_PROG
...
Valli                  Pataballa                   IT_PROG
Michael                Hartstein                   MK_MAN
Pat                    Fay                         MK_REP
Hermann                Baer                        PR_REP
Shelli                 Baida                       PU_CLERK
...
Sigal                  Tobias                      PU_CLERK
Den                    Raphaely                    PU_MAN
Gerald                 Cambrault                   SA_MAN
...
Eleni                  Zlotkey                     SA_MAN
Ellen                  Abel                        SA_REP
...
Clara                  Vishney                     SA_REP
Sarah                  Bell                        SH_CLERK
...
Peter                  Vargas                      ST_CLERK
Adam                   Fripp                       ST_MAN
...
Matthew                Weiss                       ST_MAN
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="BABCBIED"></a>
<div id="TDDDG99948" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Traversing Sparse Associative Arrays</h3>
<p>A <a id="sthref490"></a><a id="sthref491"></a><span class="bold">sparse associative array</span> (indexed by string) might have gaps between elements. You can traverse it with a <code>WHILE</code> <code>LOOP</code> statement, as in <a href="#CIHFADJH">Example 5-12</a>.</p>
<p>To run the code in <a href="#CIHFADJH">Example 5-12</a>, which prints the elements of the <code>job_titles</code> array:</p>
<ol>
<li>
<p>At the end of the declarative part of <a href="#BABCJGAD">Example 5-9</a>, insert this variable declaration:</p>
<pre>i jobs.job_id%TYPE;
</pre></li>
<li>
<p>In the executable part of <a href="#CIHJHGAI">Example 5-10</a>, after the code that populates the <code>job_titles</code> array, insert the code from <a href="#CIHFADJH">Example 5-12</a>.</p>
</li>
</ol>
<p><a href="#CIHFADJH">Example 5-12</a> includes two collection method invocations, <code>job_titles</code>.<a id="sthref492"></a><a id="sthref493"></a><code>FIRST</code> and <code>job_titles</code>.<a id="sthref494"></a><a id="sthref495"></a><code>NEXT(i)</code>. <code>job_titles</code>.<code>FIRST</code> returns the first element of <code>job_titles</code>, and <code>job_titles</code>.<code>NEXT(i)</code> returns the subscript that succeeds <code>i</code>. For more information about <code>FIRST</code>, see <a class="olink LNPLS99965" href="../LNPLS/composites.htm#LNPLS99965"><span class="italic">Oracle Database PL/SQL Language Reference</span></a>. For more information about <code>NEXT</code>, see <a class="olink LNPLS99964" href="../LNPLS/composites.htm#LNPLS99964"><span class="italic">Oracle Database PL/SQL Language Reference</span></a>.</p>
<div id="TDDDG246" class="example">
<p class="titleinexample"><a id="CIHFADJH"></a>Example 5-12 Traversing a Sparse Associative Array</p>
<pre>/* Declare this variable in declarative part:

   i jobs.job_id%TYPE;

   Add this code to the executable part,
   after code that populates job_titles:
*/

i := <span class="bold">job_titles.FIRST</span>;

WHILE i IS NOT NULL LOOP
  DBMS_OUTPUT.PUT_LINE(RPAD(i, 12) || job_titles(i));
  i := <span class="bold">job_titles.NEXT(i)</span>;
END LOOP;
</pre>
<p>Result:</p>
<pre>AC_ACCOUNT  Public Accountant
AC_MGR      Accounting Manager
AD_ASST     Administration Assistant
AD_PRES     President
AD_VP       Administration Vice President
FI_ACCOUNT  Accountant
FI_MGR      Finance Manager
HR_REP      Human Resources Representative
IT_PROG     Programmer
MK_MAN      Marketing Manager
MK_REP      Marketing Representative
PR_REP      Public Relations Representative
PU_CLERK    Purchasing Clerk
PU_MAN      Purchasing Manager
SA_MAN      Sales Manager
SA_REP      Sales Representative
SH_CLERK    Shipping Clerk
ST_CLERK    Stock Clerk
ST_MAN      Stock Manager
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHIHAFG"></a>
<div id="TDDDG46000" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Handling Exceptions (Runtime Errors)</h2>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#BABFIBHE">About Exceptions and Exception Handlers</a></p>
</li>
<li>
<p><a href="#CIHJEDHJ">When to Use Exception Handlers</a></p>
</li>
<li>
<p><a href="#BABFCCGH">Handling Predefined Exceptions</a></p>
</li>
<li>
<p><a href="#BABGDFGJ">Declaring and Handling User-Defined Exceptions</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNPLS007" href="../LNPLS/errors.htm#LNPLS007"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information about handling PL/SQL errors</div>
<a id="BABFIBHE"></a>
<div id="TDDDG99947" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">About Exceptions and Exception Handlers</h3>
<p><a id="sthref496"></a>When a runtime error occurs in PL/SQL code, an <span class="bold">exception</span> is raised. If the subprogram (or block) in which the exception is raised has an exception-handling part, then control transfers to it; otherwise, execution stops. (<a href="#BABJGJGJ">&#34;About Subprogram Structure&#34;</a> shows where to put the exception-handling part.)</p>
<p>Runtime errors can arise from design faults, coding mistakes, hardware failures, and many other sources.</p>
<p>Oracle Database has many <a id="sthref497"></a><span class="bold">predefined exceptions</span>, which it raises automatically when a program violates database rules or exceeds system-dependent limits. For example, if a <code>SELECT</code> <code>INTO</code> statement returns no rows, then Oracle Database raises the predefined exception <code>NO_DATA_FOUND</code>. For a summary of predefined PL/SQL exceptions, see <a class="olink LNPLS00703" href="../LNPLS/errors.htm#LNPLS00703"><span class="italic">Oracle Database PL/SQL Language Reference</span></a>.</p>
<p>PL/SQL lets you define (declare) your own exceptions. An exception declaration has this syntax:</p>
<pre><span class="italic">exception_name</span> EXCEPTION;
</pre>
<p>Unlike a predefined exception, a <a id="sthref498"></a><span class="bold">user-defined exception</span> must be raised explicitly, using either the <a id="sthref499"></a><code>RAISE</code> statement or the <a id="sthref500"></a><a id="sthref501"></a><code>DBMS_STANDARD</code>.<code>RAISE_APPLICATION_ERROR</code> procedure. For example:</p>
<pre>IF <span class="italic">condition</span> THEN RAISE <span class="italic">exception_name</span>;
</pre>
<p>For information about the <code>DBMS_STANDARD</code>.<code>RAISE_APPLICATION_ERROR</code> procedure, see <a class="olink LNPLS99960" href="../LNPLS/errors.htm#LNPLS99960"><span class="italic">Oracle Database PL/SQL Language Reference</span></a>.</p>
<p>The exception-handling part of a subprogram contains one or more exception handlers. An <a id="sthref502"></a><span class="bold">exception handler</span> has this syntax:</p>
<pre>WHEN { <span class="italic">exception_name</span> [ OR <span class="italic">exception_name</span> ]... | OTHERS } THEN
  <span class="italic">statement</span>; [ <span class="italic">statement</span>; ]...
</pre>
<p>A <a id="sthref503"></a><code>WHEN</code> <code>OTHERS</code> exception handler handles unexpected runtime errors. If used, it must be last. For example:</p>
<pre>EXCEPTION
  WHEN <span class="italic">exception_1</span> THEN
    <span class="italic">statement</span>; [ <span class="italic">statement</span>; ]...
  WHEN <span class="italic">exception_2</span> OR <span class="italic">exception_3</span> THEN
    <span class="italic">statement</span>; [ <span class="italic">statement</span>; ]...
  WHEN OTHERS THEN
    <span class="italic">statement</span>; [ <span class="italic">statement</span>; ]...
    RAISE;  -- Reraise the exception (very important).
END;
</pre>
<p>An alternative to the <code>WHEN</code> <code>OTHERS</code> exception handler is the <a id="sthref504"></a><code>EXCEPTION_INIT</code> pragma, which associates a user-defined exception name with an Oracle Database error number.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink LNPLS01387" href="../LNPLS/exception_declaration.htm#LNPLS01387"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information about exception declaration syntax</p>
</li>
<li>
<p><a class="olink LNPLS01316" href="../LNPLS/exception_handler.htm#LNPLS01316"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information about exception handler syntax</p>
</li>
<li>
<p><a class="olink LNPLS01315" href="../LNPLS/exceptioninit_pragma.htm#LNPLS01315"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information about the <code>EXCEPTION_INIT</code> pragma</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CIHJEDHJ"></a>
<div id="TDDDG142" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">When to Use Exception Handlers</h3>
<p>Oracle recommends using exception handlers only in these situations:</p>
<ul>
<li>
<p>You expect an exception and want to handle it.</p>
<p>For example, you expect that eventually, a <code>SELECT</code> <code>INTO</code> statement will return no rows, causing Oracle Database to raise the predefined exception <code>NO_DATA_FOUND</code>. You want your subprogram or block to handle that exception (which is not an error) and then continue, as in <a href="#BABDJCJC">Example 5-13</a>.</p>
</li>
<li>
<p>You must relinquish or close a resource.</p>
<p>For example:</p>
<pre>...
file := UTL_FILE.OPEN ...
BEGIN
  <span class="italic">statement</span> <span class="italic">statement</span>]...  -- If this code fails for any reason,
EXCEPTION
  WHEN OTHERS THEN
    UTL_FILE.FCLOSE(file);     -- then you want to close the file.
    RAISE;                     -- Reraise the exception (very important).
END;
UTL_FILE.FCLOSE(file);
...
</pre></li>
<li>
<p>At the top level of the code, you want to log the error.</p>
<p>For example, a client process might issue this block:</p>
<pre>BEGIN
  proc(...);
EXCEPTION
  WHEN OTHERS THEN
    log_error_using_autonomous_transaction(...);
    RAISE;  -- Reraise the exception (very important).
END;
/
</pre>
<p>Alternatively, the standalone subprogram that the client invokes can include the same exception-handling logic&mdash;but only at the top level.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABFCCGH"></a>
<div id="TDDDG99940" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Handling Predefined Exceptions</h3>
<p><a id="sthref505"></a><a id="sthref506"></a><a href="#BABDJCJC">Example 5-13</a> shows, in bold font, how to change the <code>EMP_EVAL</code>.<code>EVAL_DEPARTMENT</code> procedure to handle the predefined exception <code>NO_DATA_FOUND</code>. Make this change and compile the changed procedure. (For an example of how to change a package body, see <a href="#CIHBGDBA">&#34;Tutorial: Declaring Variables and Constants in a Subprogram&#34;</a>.)</p>
<div id="TDDDG247" class="example">
<p class="titleinexample"><a id="BABDJCJC"></a>Example 5-13 Handling Predefined Exception NO_DATA_FOUND</p>
<pre>PROCEDURE eval_department(dept_id IN employees.department_id%TYPE) AS
  emp_cursor    emp_refcursor_type;
  current_dept  departments.department_id%TYPE;

BEGIN
  current_dept := dept_id;

  FOR loop_c IN 1..3 LOOP
    OPEN emp_cursor FOR
      SELECT * 
      FROM employees
      WHERE current_dept = eval_department.dept_id;

    DBMS_OUTPUT.PUT_LINE
      (&#39;Determining necessary evaluations in department #&#39; ||
       current_dept);

    eval_loop_control(emp_cursor);

    DBMS_OUTPUT.PUT_LINE
      (&#39;Processed &#39; || emp_cursor%ROWCOUNT || &#39; records.&#39;);

    CLOSE emp_cursor;
    current_dept := current_dept + 10; 
  END LOOP;
<span class="bold">EXCEPTION</span>
  <span class="bold">WHEN NO_DATA_FOUND THEN</span>
    <span class="bold">DBMS_OUTPUT.PUT_LINE (&#39;The query did not return a result set&#39;);</span>
END eval_department;
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNPLS00703" href="../LNPLS/errors.htm#LNPLS00703"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information about predefined exceptions</div>
</div>
<!-- class="sect2" -->
<a id="BABGDFGJ"></a>
<div id="TDDDG46200" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Declaring and Handling User-Defined Exceptions</h3>
<p><a href="#BABDJFFF">Example 5-14</a> shows, in bold font, how to change the <code>EMP_EVAL</code>.<code>CALCULATE_SCORE</code> function to declare and handle two user-defined exceptions, <code>wrong_weight</code> and <code>wrong_score</code>. Make this change and compile the changed function. (For an example of how to change a package body, see <a href="#CIHBGDBA">&#34;Tutorial: Declaring Variables and Constants in a Subprogram&#34;</a>.)</p>
<div id="TDDDG248" class="example">
<p class="titleinexample"><a id="BABDJFFF"></a>Example 5-14 Handling User-Defined Exceptions</p>
<pre>FUNCTION calculate_score ( evaluation_id IN scores.evaluation_id%TYPE
                         , performance_id IN scores.performance_id%TYPE )
                         RETURN NUMBER AS

  <span class="bold">weight_wrong  EXCEPTION;</span>
  <span class="bold">score_wrong   EXCEPTION;</span>
  n_score       scores.score%TYPE;
  n_weight      performance_parts.weight%TYPE;
  running_total NUMBER := 0;
  max_score     CONSTANT scores.score%TYPE := 9;
  max_weight    CONSTANT performance_parts.weight%TYPE:= 1;
BEGIN
  SELECT s.score INTO n_score
  FROM SCORES s
  WHERE evaluation_id = s.evaluation_id 
  AND performance_id = s.performance_id;

  SELECT p.weight INTO n_weight
  FROM PERFORMANCE_PARTS p
  WHERE performance_id = p.performance_id;

  <span class="bold">BEGIN</span>
    <span class="bold">IF (n_weight &gt; max_weight) OR (n_weight &lt; 0) THEN</span>
      <span class="bold">RAISE weight_wrong;</span>
    <span class="bold">END IF;</span>
  <span class="bold">END;</span>

  <span class="bold">BEGIN</span>
    <span class="bold">IF (n_score &gt; max_score) OR (n_score &lt; 0) THEN</span>
      <span class="bold">RAISE score_wrong;</span>
   <span class="bold"> END IF;</span>
 <span class="bold"> END;</span>

  running_total := n_score * n_weight;
  RETURN running_total;

<span class="bold">EXCEPTION</span>
  <span class="bold">WHEN weight_wrong THEN</span>
    <span class="bold">DBMS_OUTPUT.PUT_LINE(</span>
      <span class="bold">&#39;The weight of a score must be between 0 and &#39; || max_weight);</span>
    <span class="bold">RETURN -1;</span>
  <span class="bold">WHEN score_wrong THEN</span>
    <span class="bold">DBMS_OUTPUT.PUT_LINE(</span>
      <span class="bold">&#39;The score must be between 0 and &#39; || max_score);</span>
    <span class="bold">RETURN -1;</span>
END calculate_score;
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNPLS00704" href="../LNPLS/errors.htm#LNPLS00704"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information about user-defined exceptions</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment5832">
<tr>
<td class="cellalignment5839">
<table class="cellalignment5837">
<tr>
<td class="cellalignment5836"><a href="tdddg_objects.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5836"><a href="tdddg_triggers.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment5841">
<table class="cellalignment5835">
<tr>
<td class="cellalignment5836"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5836"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5836"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5836"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5836"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5836"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>


</body></html>