<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-106188"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Building%20Effective%20Applications"></a><title>Building Effective Applications</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-07-01T1:46:13Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database 2 Day Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E53088-01"/>
<meta name="dcterms.isVersionOf" content="TDDDG"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="tdddg_globalization.htm" title="Previous" type="text/html"/>
<link rel="Next" href="sample_app.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E53088-01.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">14/17</span> <!-- End Header -->
<div id="TDDDG99933" class="chapter"><a id="BACGGJHA"></a>
<h1 class="chapter"><span class="secnum">8</span> Building Effective Applications</h1>
<p>This chapter contains:</p>
<ul>
<li>
<p><a href="#BACHFAAA">Building Scalable Applications</a></p>
</li>
<li>
<p><a href="#BACFADEC">Recommended Programming Practices</a></p>
</li>
<li>
<p><a href="#BACHCDFC">Recommended Security Practices</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADFNS116" href="../ADFNS/adfns_part_fund.htm#ADFNS116"><span class="italic">Oracle Database Development Guide</span></a> for more information about creating and deploying applications that are optimized for Oracle Database</div>
<a id="BACHFAAA"></a>
<div id="TDDDG99932" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Building Scalable Applications</h2>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#BACCHIIJ">About Scalable Applications</a></p>
</li>
<li>
<p><a href="#BACGGAAJ">Using Bind Arguments to Improve Scalability</a></p>
</li>
<li>
<p><a href="#BACEIFDJ">Using PL/SQL to Improve Scalability</a></p>
</li>
<li>
<p><a href="#BACEDHFI">About Concurrency and Scalability</a></p>
</li>
<li>
<p><a href="#BACDDJHA">Limiting the Number of Concurrent Sessions</a></p>
</li>
<li>
<p><a href="#BACDFDBE">Comparing Programming Techniques with Runstats</a></p>
</li>
</ul>
<a id="BACCHIIJ"></a>
<div id="TDDDG99931" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">About Scalable Applications</h3>
<p>A <a id="sthref665"></a><span class="bold">scalable</span> application can process a larger workload with a proportional increase in system resource usage. For example, if you double its workload, a scalable application uses twice as many system resources.</p>
<p>An <a id="sthref666"></a><span class="bold">unscalable</span> application exhausts a system resource; therefore, if you increase the application workload, no more throughput is possible. Unscalable applications result in fixed throughputs and poor response times.</p>
<p>Examples of <a id="sthref667"></a><a id="sthref668"></a>resource exhaustion are:</p>
<ul>
<li>
<p>Hardware exhaustion</p>
</li>
<li>
<p>Table scans in high-volume transactions causing inevitable disk input/output (I/O) shortages</p>
</li>
<li>
<p>Excessive network requests causing network and scheduling bottlenecks</p>
</li>
<li>
<p>Memory allocation causing paging and swapping</p>
</li>
<li>
<p>Excessive process and thread allocation causing operating system thrashing</p>
</li>
</ul>
<p>Design your applications to use the same resources, regardless of user populations and data volumes, and not to overload system resources.</p>
</div>
<!-- class="sect2" -->
<a id="BACGGAAJ"></a>
<div id="TDDDG99930" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using Bind Arguments to Improve Scalability</h3>
<p><a id="sthref669"></a>Bind arguments, used correctly, let you develop efficient, scalable applications.</p>
<p>Just as a subprogram can have parameters, whose values are supplied by the invoker, a SQL statement can have bind argument placeholders, whose values (called <span class="bold">bind arguments</span>) are supplied at runtime. Just as a subprogram is compiled once and then run many times with different parameters, a SQL statement with bind argument placeholders is hard parsed once and then soft parsed with different bind arguments.</p>
<p>A <a id="sthref670"></a><a id="sthref671"></a><span class="bold">hard parse</span>, which includes optimization and row source generation, is a very CPU-intensive operation. A <a id="sthref672"></a><span class="bold">soft parse</span>, which skips optimization and row source generation and proceeds straight to execution, is usually much faster than a hard parse of the same statement. (For an overview of SQL processing, which includes the difference between a hard and soft parse, see <a class="olink CNCPT216" href="../CNCPT/sqllangu.htm#CNCPT216"><span class="italic">Oracle Database Concepts</span></a>.)</p>
<p>Not only is a hard parse a CPU-intensive operation, it is an unscalable operation, because it cannot be done concurrently with many other operations. For more information about concurrency and scalability, see <a href="#BACEDHFI">&#34;About Concurrency and Scalability&#34;</a>.</p>
<p><a href="#BACGGFEI">Example 8-1</a> shows the performance difference between a query without a bind variable and a semantically equivalent query with a bind variable. The former is slower and uses many more latches (for information about how latches affect scalability, see <a href="#BACGBAID">&#34;About Latches and Concurrency&#34;</a>). To collect and display performance statistics, the example uses the Runstats tool, described in <a href="#BACDFDBE">&#34;Comparing Programming Techniques with Runstats&#34;</a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p><a href="#BACGGFEI">Example 8-1</a> shows the performance cost <span class="italic">for a single user</span>. As more users are added, the cost escalates rapidly.</p>
</li>
<li>
<p>The result of <a href="#BACGGFEI">Example 8-1</a> was produced with this setting:</p>
<pre>SET SERVEROUTPUT ON FORMAT TRUNCATED
</pre></li>
</ul>
</div>
<div id="TDDDG322" class="example">
<p class="titleinexample"><a id="BACGGFEI"></a>Example 8-1 Bind Variable Improves Performance</p>
<pre>CREATE TABLE t ( x VARCHAR2(5) );
 
DECLARE
  TYPE rc IS REF CURSOR;
  l_cursor rc;
BEGIN
  runstats_pkg.rs_start;  -- Collect statistics for query without bind variable
 
  FOR i IN 1 .. 5000 LOOP
    OPEN l_cursor FOR <span class="bold">&#39;SELECT x FROM t WHERE x = &#39; || TO_CHAR(i)</span>;
    CLOSE l_cursor;
  END LOOP;
 
  runstats_pkg.rs_middle;  -- Collect statistics for query with bind variable
 
  FOR i IN 1 .. 5000 LOOP
    OPEN l_cursor FOR <span class="bold">&#39;SELECT x FROM t WHERE x = :x&#39; USING i</span>;
    CLOSE l_cursor;
  END LOOP;
 
  runstats_pkg.rs_stop(500);  -- Stop collecting statistics
end;
/
</pre>
<p>Result is similar to:</p>
<pre>Run 1 ran in 740 hsec
Run 2 ran in 30 hsec
<span class="bold">Run 1 ran in 2466.67% of the time of run 2</span>

Name                                   Run 1         Run 2    Difference
STAT...recursive cpu usage               729            19          -710
STAT...CPU used by this sessio           742            30          -712
STAT...parse time elapsed              1,051             4        -1,047
STAT...parse time cpu                  1,066             2        -1,064
STAT...session cursor cache hi             1         4,998         4,997
STAT...table scans (short tabl         5,000             1        -4,999
STAT...parse count (total)            10,003         5,004        -4,999
LATCH.session idle bit                 5,003             3        -5,000
LATCH.session allocation               5,003             3        -5,000
STAT...execute count                  10,003         5,003        -5,000
STAT...opened cursors cumulati        10,003         5,003        -5,000
STAT...parse count (hard)             10,001             5        -9,996
STAT...CCursor + sql area evic        10,000             1        -9,999
STAT...enqueue releases               10,008             7       -10,001
STAT...enqueue requests               10,009             7       -10,002
STAT...calls to get snapshot s        20,005         5,006       -14,999
STAT...calls to kcmgcs                20,028            35       -19,993
STAT...consistent gets pin (fa        20,013            17       -19,996
LATCH.call allocation                 20,002             6       -19,996
STAT...consistent gets from ca        20,014            18       -19,996
STAT...consistent gets                20,014            18       -19,996
STAT...consistent gets pin            20,013            17       -19,996
LATCH.simulator hash latch            20,014            11       -20,003
STAT...session logical reads          20,080            75       -20,005
LATCH.shared pool simulator           20,046             5       -20,041
LATCH.enqueue hash chains             20,343            15       -20,328
STAT...recursive calls                40,015        15,018       -24,997
LATCH.cache buffers chains            40,480           294       -40,186
STAT...session pga memory max        131,072        65,536       -65,536
STAT...session pga memory            131,072        65,536       -65,536
LATCH.row cache objects              165,209           139      -165,070
STAT...session uga memory max        219,000             0      -219,000
LATCH.shared pool                    265,108           152      -264,956
STAT...logical read bytes from   164,495,360       614,400  -163,880,960

<span class="bold">Run 1 latches total compared to run 2 -- difference and percentage</span>
         <span class="bold">Run 1         Run 2          Diff       Pct</span>
       <span class="bold">562,092           864      -561,228  2,466.67%</span>
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>Using <a id="sthref673"></a>bind arguments instead of string literals is the most effective way to make your code invulnerable to <a id="sthref674"></a>SQL injection attacks. For details, see <a class="olink LNPLS646" href="../LNPLS/dynamic.htm#LNPLS646"><span class="italic">Oracle Database PL/SQL Language Reference</span></a>.</p>
</li>
<li>
<p>Bind arguments sometimes reduce the efficiency of data <a id="sthref675"></a>warehousing systems. Because most queries take so long, the optimizer tries to produce the best plan for each query rather than the best generic query. Using bind arguments sometimes forces the optimizer to produce the best generic query. For information about improving performance in data warehousing systems, see <a class="olink DWHSG019" href="http://www.oracle.com/pls/topic/lookup?ctx=E50529-01&amp;id=DWHSG019"><span class="italic">Oracle Database Data Warehousing Guide</span></a>.</p>
</li>
</ul>
</div>
<p>Although soft parsing is more efficient than hard parsing, the cost of soft parsing a statement many times is still very high. To maximize the efficiency and scalability of your application, minimize parsing. The easiest way to minimize parsing is to use PL/SQL.</p>
</div>
<!-- class="sect2" -->
<a id="BACEIFDJ"></a>
<div id="TDDDG99929" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using PL/SQL to Improve Scalability</h3>
<p><a id="sthref676"></a>This section contains:</p>
<ul>
<li>
<p><a href="#BACFDHBE">How PL/SQL Minimizes Parsing</a></p>
</li>
<li>
<p><a href="#BACEBCCE">About the EXECUTE IMMEDIATE Statement</a></p>
</li>
<li>
<p><a href="#BACFEJJG">About the DBMS_SQL Package</a></p>
</li>
<li>
<p><a href="#BACHJDFG">About Bulk SQL</a></p>
</li>
</ul>
<a id="BACFDHBE"></a>
<div id="TDDDG273" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">How PL/SQL Minimizes Parsing</h4>
<p>PL/SQL, which is optimized for database access, silently caches statements. In PL/SQL, when you close a cursor, the cursor closes from your perspective&mdash;that is, you cannot use it where an open cursor is required&mdash;but PL/SQL actually keeps the cursor open and caches its statement. If you use the cached statement again, PL/SQL uses the same cursor, thereby avoiding a parse. (PL/SQL closes cached statements if necessary&mdash;for example, if your program must open another cursor but doing so would exceed the init.ora setting of <code>OPEN_CURSORS</code>.)</p>
<p>PL/SQL can silently cache only SQL statements that cannot change at runtime.</p>
</div>
<!-- class="sect3" -->
<a id="BACEBCCE"></a>
<div id="TDDDG274" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">About the EXECUTE IMMEDIATE Statement</h4>
<p>The basic syntax of the <a id="sthref677"></a><code>EXECUTE</code> <code>IMMEDIATE</code> statement is:</p>
<pre>EXECUTE IMMEDIATE <span class="italic">sql_statement</span>
</pre>
<p><code><span class="codeinlineitalic">sql_statement</span></code> is a string that represents a SQL statement. If <code><span class="codeinlineitalic">sql_statement</span></code> has the same value every time the <code>EXECUTE</code> <code>IMMEDIATE</code> statement runs, then PL/SQL can cache the <code>EXECUTE</code> <code>IMMEDIATE</code> statement. If <code><span class="codeinlineitalic">sql_statement</span></code> can be different every time the <code>EXECUTE</code> <code>IMMEDIATE</code> statement runs, then PL/SQL cannot cache the <code>EXECUTE</code> <code>IMMEDIATE</code> statement.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink LNPLS01115" href="../LNPLS/dynamic.htm#LNPLS01115"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for information about <code>EXECUTE</code> <code>IMMEDIATE</code></p>
</li>
<li>
<p><a href="#BACFEJJG">&#34;About the DBMS_SQL Package&#34;</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<div id="TDDDG278" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref678"></a>
<h4 class="sect3">About OPEN FOR Statements</h4>
<p>The basic syntax of the <a id="sthref679"></a><code>OPEN</code> <code>FOR</code> statement is:</p>
<pre>OPEN <span class="italic">cursor_variable</span> FOR <span class="italic">query</span>
</pre>
<p>Your application can open <code><span class="codeinlineitalic">cursor_variable</span></code> for several different queries before closing it. Because PL/SQL cannot determine the number of different queries until runtime, PL/SQL cannot cache the <code>OPEN</code> <code>FOR</code> statement.</p>
<p>If you do not need to use a <a id="sthref680"></a>cursor variable, then use <a id="sthref681"></a>a declared cursor, for both better performance and ease of programming. For details, see <a class="olink ADFNS160" href="../ADFNS/adfns_packages.htm#ADFNS160"><span class="italic">Oracle Database Development Guide</span></a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink LNPLS629" href="../LNPLS/dynamic.htm#LNPLS629"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for information about <code>OPEN</code> <code>FOR</code></p>
</li>
<li>
<p><a href="tdddg_subprograms.htm#BABEIDAC">&#34;About Cursor Variables&#34;</a></p>
</li>
<li>
<p><a href="tdddg_subprograms.htm#BABJBEGE">&#34;About Cursors&#34;</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="BACFEJJG"></a>
<div id="TDDDG275" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">About the DBMS_SQL Package</h4>
<p>The <a id="sthref682"></a><code>DBMS_SQL</code> package is an API for building, running, and describing dynamic SQL statements. Using the <code>DBMS_SQL</code> package takes more effort than using the <code>EXECUTE</code> <code>IMMEDIATE</code> statement, but you must use the <code>DBMS_SQL</code> package if the PL/SQL compiler cannot determine at compile time the number or types of output host variables (select list items) or input bind variables.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink LNPLS011" href="../LNPLS/dynamic.htm#LNPLS011"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information about when to use the <code>DBMS_SQL</code> package</p>
</li>
<li>
<p><a class="olink ARPLS058" href="../ARPLS/d_sql.htm#ARPLS058"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for complete information about the <code>DBMS_SQL</code> package</p>
</li>
<li>
<p><a href="#BACEBCCE">&#34;About the EXECUTE IMMEDIATE Statement&#34;</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="BACHJDFG"></a>
<div id="TDDDG276" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">About Bulk SQL</h4>
<p><a id="sthref683"></a>Bulk SQL reduces the number of &#34;round trips&#34; between PL/SQL and SQL, thereby using fewer resources. Without bulk SQL, you retrieve one row at a time from the database (SQL), process it (PL/SQL), and return it to the database (SQL). With bulk SQL, you retrieve a set of rows from the database, process the set of rows, and then return the whole set to the database.</p>
<p>Oracle recommends using Bulk SQL when you retrieve multiple rows from the database <span class="italic">and</span> return them to the database, as in <a href="#BACBCGDD">Example 8-2</a>. You do not need bulk SQL if you retrieve multiple rows but do not return them; for example:</p>
<pre>FOR x IN (SELECT * FROM t WHERE ... )  -- Retrieve row set (implicit array fetch)
  LOOP
    DBMS_OUTPUT.PUT_LINE(t.x);          -- Process rows but do not return them
  END LOOP;
</pre>
<p><a href="#BACBCGDD">Example 8-2</a> loops through a table <code>t</code> with a column <code>object_name</code>, retrieving sets of 100 rows, processing them, and returning them to the database. (Limiting the bulk <code>FETCH</code> statement to 100 rows requires an explicit cursor.)</p>
<div id="TDDDG280" class="example">
<p class="titleinexample"><a id="BACBCGDD"></a>Example 8-2 Bulk SQL</p>
<pre>CREATE OR REPLACE PROCEDURE bulk AS
  TYPE ridArray IS TABLE OF ROWID;
  TYPE onameArray IS TABLE OF t.object_name%TYPE;
 
  CURSOR c is SELECT ROWID rid, object_name  <span class="bold">-- explicit cursor</span>
              FROM t t_bulk;
 
  l_rids    ridArray;
  l_onames  onameArray;
  N         NUMBER := 100;
BEGIN
  OPEN c;
  <span class="bold">LOOP</span>
    FETCH c BULK COLLECT
    INTO l_rids, l_onames LIMIT N;   <span class="bold">-- retrieve N rows from t</span>

    FOR i in 1 .. l_rids.COUNT
      LOOP                           <span class="bold">-- process N rows</span>
        l_onames(i) := substr(l_onames(i),2) || substr(l_onames(i),1,1);
      END LOOP;

      FORALL i in 1 .. l_rids.count  <span class="bold">-- return processed rows to t</span>
        UPDATE t
        SET object_name = l_onames(i)
        WHERE ROWID = l_rids(i);
        EXIT WHEN c%NOTFOUND;
  <span class="bold">END LOOP;</span>
  CLOSE c;
END;
/
</pre></div>
<!-- class="example" -->
<p><a href="#BACCGHEI">Example 8-3</a> does the same job as <a href="#BACBCGDD">Example 8-2</a>, without bulk SQL.</p>
<div id="TDDDG336" class="example">
<p class="titleinexample"><a id="BACCGHEI"></a>Example 8-3 Without Bulk SQL</p>
<pre>CREATE OR REPLACE PROCEDURE slow_by_slow AS
BEGIN
  FOR x IN (SELECT rowid rid, object_name FROM t t_slow_by_slow)
    LOOP
      x.object_name := substr(x.object_name,2) || substr(x.object_name,1,1);

      UPDATE t
      SET object_name = x.object_name
      WHERE rowid = x.rid;
    END LOOP;
END;
</pre></div>
<!-- class="example" -->
<p>As these <code>TKPROF</code> reports for <a href="#BACBCGDD">Example 8-2</a> and <a href="#BACCGHEI">Example 8-3</a> show, using bulk SQL for this job uses almost 50% less CPU time:</p>
<pre><span class="bold">SELECT ROWID RID, OBJECT_NAME FROM T T_BULK</span>
 
call     count       cpu    elapsed       disk      query    current        rows
------- ------  -------- ---------- ---------- ---------- ----------  ----------
total      721      0.17       0.17          0      22582          0       71825
********************************************************************************
<span class="bold">UPDATE T SET OBJECT_NAME = :B1 WHERE ROWID = :B2</span>
 
call     count       cpu    elapsed       disk      query    current        rows
------- ------  -------- ---------- ---------- ---------- ----------  ----------
Parse        1      0.00       0.00          0          0          0           0
Execute    <span class="bold">719     12.83</span>      13.77          0      71853      74185       71825
Fetch        0      0.00       0.00          0          0          0           0
------- ------  -------- ---------- ---------- ---------- ----------  ----------
total      720     12.83      13.77          0      71853      74185       71825


<span class="bold">SELECT ROWID RID, OBJECT_NAME FROM T T_SLOW_BY_SLOW</span>
 
call     count       cpu    elapsed       disk      query    current        rows
------- ------  -------- ---------- ---------- ---------- ----------  ----------
total      721      0.17       0.17          0      22582          0       71825
********************************************************************************
<span class="bold">UPDATE T SET OBJECT_NAME = :B2 WHERE ROWID = :B1</span>
 
call     count       cpu    elapsed       disk      query    current        rows
------- ------  -------- ---------- ---------- ---------- ----------  ----------
Parse        1      0.00       0.00          0          0          0           0
Execute  <span class="bold">71824     21.25</span>      22.25          0      71836      73950       71824
Fetch        0      0.00       0.00          0          0          0           0
------- ------  -------- ---------- ---------- ---------- ----------  ----------
total    71825     21.25      22.25          0      71836      73950       71824
</pre>
<p>However, using bulk SQL for this job uses more CPU time&mdash;and more code&mdash;than using a single SQL statement, as this <code>TKPROF</code> report shows:</p>
<pre><span class="bold">UPDATE T SET OBJECT_NAME = SUBSTR(OBJECT_NAME,2) || SUBSTR(OBJECT_NAME,1,1)</span>
 
call     count       cpu    elapsed       disk      query    current        rows
------- ------  -------- ---------- ---------- ---------- ----------  ----------
Parse        1      0.00       0.00          0          0          0           0
Execute      <span class="bold">1      1.30</span>       1.44          0       2166      75736       71825
Fetch        0      0.00       0.00          0          0          0           0
------- ------  -------- ---------- ---------- ---------- ----------  ----------
total        2      1.30       1.44          0       2166      75736       71825
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADFNS343" href="../ADFNS/adfns_packages.htm#ADFNS343"><span class="italic">Oracle Database Development Guide</span></a> for an overview of bulk SQL</p>
</li>
<li>
<p><a class="olink ADFNS344" href="../ADFNS/adfns_trans_idemp_guard.htm#ADFNS344"><span class="italic">Oracle Database Development Guide</span></a> for more specific information about when to use bulk SQL</p>
</li>
<li>
<p><a class="olink LNPLS01205" href="../LNPLS/tuning.htm#LNPLS01205"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information about bulk SQL</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BACEDHFI"></a>
<div id="TDDDG99928" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">About Concurrency and Scalability</h3>
<p>The better your application handles concurrency, the more scalable it is.</p>
<p><a id="sthref684"></a><span class="bold">Concurrency</span> is the simultaneous execution of multiple transactions. Statements within concurrent transactions can update the same data. Concurrent transactions must produce meaningful and consistent results. Therefore, a multiuser database must provide the following:</p>
<ul>
<li>
<p><a id="sthref685"></a><span class="bold">Data concurrency</span> , which ensures that users can access data at the same time.</p>
</li>
<li>
<p><a id="sthref686"></a><span class="bold">Data consistency</span>, which ensures that each user sees a consistent view of the data, including visible changes from his or her own transactions and committed transactions of other users</p>
</li>
</ul>
<p>Oracle Database maintains data consistency by using a multiversion consistency model and various types of locks and transaction isolation levels. For an overview of the Oracle Database locking mechanism, see <a class="olink CNCPT1331" href="../CNCPT/consist.htm#CNCPT1331"><span class="italic">Oracle Database Concepts</span></a>. For an overview of Oracle Database transaction isolation levels, see <a class="olink CNCPT621" href="../CNCPT/consist.htm#CNCPT621"><span class="italic">Oracle Database Concepts</span></a>.</p>
<p>To describe consistent transaction behavior when transactions run concurrently, database researchers have defined a transaction isolation category called <span class="bold">serializable</span>. A <a id="sthref687"></a><a id="sthref688"></a><span class="bold">serializable transaction</span> operates in an environment that appears to be a single-user database. Serializable transactions are desirable in specific cases, but for 99% of the work load, read committed isolation is perfect.</p>
<p>Oracle Database has features that improve concurrency and scalability&mdash;for example, sequences, latches, nonblocking reads and writes, and shared SQL.</p>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#BACGHBDI">About Sequences and Concurrency</a></p>
</li>
<li>
<p><a href="#BACGBAID">About Latches and Concurrency</a></p>
</li>
<li>
<p><a href="#BACCGEGF">About Nonblocking Reads and Writes and Concurrency</a></p>
</li>
<li>
<p><a href="#BACCFBFB">About Shared SQL and Concurrency</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CNCPT020" href="../CNCPT/consist.htm#CNCPT020"><span class="italic">Oracle Database Concepts</span></a> for more information about data concurrency and consistency</div>
<a id="BACGHBDI"></a>
<div id="TDDDG277" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">About Sequences and Concurrency</h4>
<p>A <a id="sthref689"></a><span class="bold">sequence</span> is a schema object from which multiple users can generate unique integers, which is very useful when you need unique primary keys.</p>
<p>Without sequences, unique primary key values must be produced programmatically. A user gets a new primary key value by selecting the most recently produced value and incrementing it. This technique requires a lock during the transaction and causes multiple users to wait for the next primary key value&mdash;that is, the transactions serialize. Sequences eliminate serialization, thereby improving the concurrency and scalability of your application.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink CNCPT88879" href="../CNCPT/schemaob.htm#CNCPT88879"><span class="italic">Oracle Database Concepts</span></a> for information about concurrent access to sequences</p>
</li>
<li>
<p><a href="tdddg_objects.htm#BABJICJI">&#34;Creating and Managing Sequences&#34;</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="BACGBAID"></a>
<div id="TDDDG279" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">About Latches and Concurrency</h4>
<p>A <a id="sthref690"></a><span class="bold">latch</span> is a simple, low-level serialization mechanism that coordinates multiuser access to shared data structures. Latches protect shared memory resources from corruption when accessed by multiple processes.</p>
<p>An increase in latches means more concurrency-based waits, and therefore a decrease in scalability. If you can use either an approach that runs slightly faster during development or one that uses fewer latches, use the latter.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink CNCPT1358" href="../CNCPT/consist.htm#CNCPT1358"><span class="italic">Oracle Database Concepts</span></a> for information about latches</p>
</li>
<li>
<p><a class="olink CNCPT88983" href="../CNCPT/consist.htm#CNCPT88983"><span class="italic">Oracle Database Concepts</span></a> for information about mutexes, which are like latches for single objects</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="BACCGEGF"></a>
<div id="TDDDG282" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">About Nonblocking Reads and Writes and Concurrency</h4>
<p>In Oracle Database, <a id="sthref691"></a>nonblocking reads and writes let queries execute concurrently with changes to the data they are reading, without blocking or stopping. Nonblocking reads and writes let one session read data while another session is changing that data.</p>
</div>
<!-- class="sect3" -->
<a id="BACCFBFB"></a>
<div id="TDDDG329" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">About Shared SQL and Concurrency</h4>
<p>Oracle Database compiles a SQL statement into an executable object once, and then other sessions can reuse the object for as long as it exists. This Oracle Database feature, called <a id="sthref692"></a><span class="bold">shared SQL</span>, lets the database do very resource-intensive operations&mdash;compiling and optimizing SQL statements&mdash;only once, instead of every time a session uses the same SQL statement.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CNCPT1228" href="../CNCPT/memory.htm#CNCPT1228"><span class="italic">Oracle Database Concepts</span></a> for more information about shared SQL</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BACDDJHA"></a>
<div id="TDDDG99927" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Limiting the Number of Concurrent Sessions</h3>
<p>The more <a id="sthref693"></a>concurrent sessions you have, the more concurrency-based waits you have, and the slower your response time is.</p>
<p>If your computer has <span class="italic">n</span> CPU cores, then at most <span class="italic">n</span> sessions can really be concurrently active. Each additional &#34;concurrent&#34; session must wait for a CPU core to be available before it can become active. If some waiting sessions are waiting only for I/O, then increasing the number of concurrent sessions to slightly more than <span class="italic">n</span> might slightly improve runtime performance. However, increasing the number of concurrent sessions too much will significantly reduce runtime performance.</p>
<p>The <code>SESSIONS</code> initialization parameter determines the maximum number of concurrent users in the system. For details, see <a class="olink REFRN10197" href="../REFRN/GUID-52804B5A-164F-44F3-8980-F2593B58D807.htm#REFRN10197"><span class="italic">Oracle Database Reference</span></a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<code><a href="http://www.youtube.com/watch?v=xNDnVOCdvQ0">http://www.youtube.com/watch?v=xNDnVOCdvQ0</a></code> for a video that shows the effect of reducing the number of concurrent sessions on a computer with 12 CPU cores from thousands to 96</div>
</div>
<!-- class="sect2" -->
<a id="BACDFDBE"></a>
<div id="TDDDG323" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Comparing Programming Techniques with Runstats</h3>
<p><a id="sthref694"></a><a id="sthref695"></a>This section contains:</p>
<ul>
<li>
<p><a href="#BACDGDGF">About Runstats</a></p>
</li>
<li>
<p><a href="#BACIEJGI">Setting Up Runstats</a></p>
</li>
<li>
<p><a href="#BACFJFGF">Using Runstats</a></p>
</li>
</ul>
<a id="BACDGDGF"></a>
<div id="TDDDG327" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">About Runstats</h4>
<p><a id="sthref696"></a>The Runstats tool lets you compare the performance of two programming techniques to see which is better.</p>
<p>Runstats measures:</p>
<ul>
<li>
<p>Elapsed time for each technique in hundredths of seconds (hsec)</p>
</li>
<li>
<p>Elapsed time for the first technique as a percentage of that of the second technique</p>
</li>
<li>
<p>System statistics for the two techniques (for example, parse calls)</p>
</li>
<li>
<p>Latching for the two techniques</p>
</li>
</ul>
<p>Of the preceding measurements, the most important is latching (see <a href="#BACGBAID">&#34;About Latches and Concurrency&#34;</a>).</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BACGGFEI">Example 8-1</a>, which uses Runstats</div>
</div>
<!-- class="sect3" -->
<a id="BACIEJGI"></a>
<div id="TDDDG324" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Setting Up Runstats</h4>
<p>This section shows how set up the Runstats tool, which is implemented as a package that uses a view and a temporary table.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
For step&nbsp;<a href="#BACGFDGF">1</a> of the following procedure, you need the <code>SELECT</code> privilege on the dynamic performance views <code>V$STATNAME</code>, <code>V$MYSTAT</code>, and <code>V$LATCH</code>. If you cannot get this privilege, then have someone who has the privilege create the view in step&nbsp;<a href="#BACGFDGF">1</a> and grant you the <code>SELECT</code> privilege on it.</div>
<p class="subhead2"><a id="TDDDG328"></a>To set up the Runstats tool:</p>
<ol>
<li id="BACGFDGF">
<p>Create the view that Runstats uses:</p>
<pre>CREATE OR REPLACE VIEW stats
AS SELECT &#39;STAT...&#39; || a.name name, b.value
FROM V$STATNAME a, V$MYSTAT b
WHERE a.statistic# = b.statistic#
UNION ALL
SELECT &#39;LATCH.&#39; || name, gets
FROM V$LATCH;
</pre></li>
<li>
<p>Create the temporary table that Runstats uses:</p>
<pre>DROP TABLE run_stats;

CREATE GLOBAL TEMPORARY TABLE run_stats
( runid VARCHAR2(15),
  name VARCHAR2(80),
  value INT )
ON COMMIT PRESERVE ROWS;
</pre></li>
<li>
<p>Create this package specification:</p>
<pre>CREATE OR REPLACE PACKAGE runstats_pkg
AS
  PROCEDURE rs_start;
  PROCEDURE rs_middle;
  PROCEDURE rs_stop( p_difference_threshold IN NUMBER DEFAULT 0 );
end;
/
</pre>
<p>The parameter <code>p_difference_threshold</code> controls the amount of statistics and latching data that Runstats displays. Runstats displays data only when the difference for the two techniques is greater than <code>p_difference_threshold</code>. By default, Runstats displays all data.</p>
</li>
<li>
<p>Create this package body:</p>
<pre>CREATE OR REPLACE PACKAGE BODY runstats_pkg
AS
  g_start NUMBER;
  g_run1 NUMBER;
  g_run2 NUMBER;
 
  PROCEDURE rs_start
  IS
  BEGIN
    DELETE FROM run_stats;
 
    INSERT INTO run_stats
    SELECT &#39;before&#39;, stats.* FROM stats;
 
    g_start := DBMS_UTILITY.GET_TIME;
  END rs_start;
 
  PROCEDURE rs_middle
  IS
  BEGIN
    g_run1 := (DBMS_UTILITY.GET_TIME - g_start);
 
    INSERT INTO run_stats
    SELECT &#39;after 1&#39;, stats.* FROM stats;
 
    g_start := DBMS_UTILITY.GET_TIME; 
  END rs_middle;
 
  PROCEDURE rs_stop( p_difference_threshold IN NUMBER DEFAULT 0 )
  IS
  BEGIN
    g_run2 := (DBMS_UTILITY.GET_TIME - g_start);
 
    DBMS_OUTPUT.PUT_LINE 
      (&#39;Run 1 ran in &#39; || g_run1 || &#39; hsec&#39;);
 
    DBMS_OUTPUT.PUT_LINE 
      (&#39;Run 2 ran in &#39; || g_run2 || &#39; hsec&#39;);
 
    DBMS_OUTPUT.PUT_LINE 
      (&#39;Run 1 ran in &#39; || round(g_run1/g_run2*100, 2) || &#39;% of the time of run 2&#39;);
 
    DBMS_OUTPUT.PUT_LINE( CHR(9) );
 
    INSERT INTO run_stats
    SELECT &#39;after 2&#39;, stats.* FROM stats;
 
    DBMS_OUTPUT.PUT_LINE 
      ( RPAD( &#39;Name&#39;, 30 ) ||
        LPAD( &#39;Run 1&#39;, 14) ||
        LPAD( &#39;Run 2&#39;, 14) ||
        LPAD( &#39;Difference&#39;, 14)
      );
 
    FOR x IN
    ( SELECT RPAD( a.name, 30 ) ||
             TO_CHAR( b.value - a.value, &#39;9,999,999,999&#39; ) ||
             TO_CHAR( c.value - b.value, &#39;9,999,999,999&#39; ) ||
             TO_CHAR( ( (c.value - b.value) - (b.value - a.value)),
               &#39;9,999,999,999&#39; ) data
      FROM run_stats a, run_stats b, run_stats c
      WHERE a.name = b.name
        AND b.name = c.name
        AND a.runid = &#39;before&#39;
        AND b.runid = &#39;after 1&#39;
        AND c.runid = &#39;after 2&#39;
        AND (c.value - a.value) &gt; 0
        AND abs((c.value - b.value) - (b.value - a.value)) &gt;
          p_difference_threshold
     ORDER BY ABS((c.value - b.value) - (b.value - a.value))
    ) LOOP
        DBMS_OUTPUT.PUT_LINE( x.data ); 
    END LOOP;
 
    DBMS_OUTPUT.PUT_LINE( CHR(9) );
 
    DBMS_OUTPUT.PUT_LINE(
      &#39;Run 1 latches total compared to run 2 -- difference and percentage&#39; );
 
    DBMS_OUTPUT.PUT_LINE 
      ( LPAD( &#39;Run 1&#39;, 14) ||
        LPAD( &#39;Run 2&#39;, 14) ||
        LPAD( &#39;Diff&#39;, 14) ||
        LPAD( &#39;Pct&#39;, 10)
      );
 
    FOR x IN
    ( SELECT TO_CHAR( run1, &#39;9,999,999,999&#39; ) ||
             TO_CHAR( run2, &#39;9,999,999,999&#39; ) ||
             TO_CHAR( diff, &#39;9,999,999,999&#39; ) ||
             TO_CHAR( ROUND( g_run1/g_run2*100, 2), &#39;99,999.99&#39; ) || &#39;%&#39; data
      FROM ( SELECT SUM (b.value - a.value) run1,
                    SUM (c.value - b.value) run2,
                    SUM ( (c.value - b.value) - (b.value - a.value)) diff
             FROM run_stats a, run_stats b, run_stats c
             WHERE a.name = b.name
               AND b.name = c.name
               AND a.runid = &#39;before&#39;
               AND b.runid = &#39;after 1&#39;
               AND c.runid = &#39;after 2&#39;
               AND a.name like &#39;LATCH%&#39;
           )
    ) LOOP
        DBMS_OUTPUT.PUT_LINE( x.data ); 
    END LOOP;
 
  END rs_stop;
 
END;
/
</pre></li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="tdddg_objects.htm#BABDGIAC">&#34;Creating Views&#34;</a></p>
</li>
<li>
<p><a href="tdddg_objects.htm#BABFEIDE">&#34;Creating Tables&#34;</a></p>
</li>
<li>
<p><a href="tdddg_subprograms.htm#CIHHDBFE">&#34;Tutorial: Creating a Package Specification&#34;</a></p>
</li>
<li>
<p><a href="tdddg_subprograms.htm#BABEIAGI">&#34;Tutorial: Creating a Package Body&#34;</a></p>
</li>
<li>
<p><a class="olink REFRN003" href="../REFRN/GUID-8C5690B0-DE10-4460-86DF-80111869CF4C.htm#REFRN003"><span class="italic">Oracle Database Reference</span></a> for information about dynamic performance views</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="BACFJFGF"></a>
<div id="TDDDG325" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Using Runstats</h4>
<p>To use Runstats to compare two programming techniques, invoke the runstats_pkg procedures from an anonymous block, using this syntax:</p>
<pre>[ DECLARE <span class="italic">local_declarations</span> ]
BEGIN
  <span class="bold">runstats_pkg.rs_start;</span>
  <span class="italic">code_for_first_technique</span>
  <span class="bold">runstats_pkg.rs_middle;</span>
  <span class="italic">code_for_second_technique</span>
  <span class="bold">runstats_pkg.rs_stop(</span><span class="codeinlineboldital">n</span><span class="bold">);</span>
END;
/
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BACGGFEI">Example 8-1</a>, which uses Runstats</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BACFADEC"></a>
<div id="TDDDG99926" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Recommended Programming Practices</h2>
<p><a id="sthref697"></a><a id="sthref698"></a>This section contains:</p>
<ul>
<li>
<p><a href="#BACHACAG">Use Instrumentation Packages</a></p>
</li>
<li>
<p><a href="#BACCBEGE">Statistics Gathering and Application Tracing</a></p>
</li>
<li>
<p><a href="#BACIEGBF">Use Existing Functionality</a></p>
</li>
<li>
<p><a href="#BACHCGCD">Cover Database Tables with Editioning Views</a></p>
</li>
</ul>
<a id="BACHACAG"></a>
<div id="TDDDG99925" class="sect2">
<h3 class="sect2">Use Instrumentation Packages</h3>
<p>Oracle Database supplies <a id="sthref699"></a><a id="sthref700"></a>instrumentation packages whose subprograms let your application generate trace information whenever necessary. Using this trace information, you can debug your application without a debugger and identify code that performs badly. Instrumentation provides your application with considerable functionality; therefore, it is not overhead. Overhead is something that you can remove without losing much benefit.</p>
<p>Some instrumentation packages that Oracle Database supplies are:</p>
<ul>
<li>
<p><a id="sthref701"></a><code>DBMS_APPLICATION_INFO</code>, which enables a system administrator to track the performance of your application by module.</p>
<p>For more information about <code>DBMS_APPLICATION_INFO</code>, see <a class="olink ARPLS003" href="../ARPLS/d_appinf.htm#ARPLS003"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.</p>
</li>
<li>
<p><a id="sthref702"></a><code>DBMS_SESSION</code>, which enables your application to access session information and set preferences and security levels</p>
<p>For more information about <code>DBMS_SESSION</code>, see <a class="olink ARPLS054" href="../ARPLS/d_sessio.htm#ARPLS054"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.</p>
</li>
<li>
<p><a id="sthref703"></a><code>UTL_FILE</code>, which enables your application to read and write operating system text files</p>
<p>For more information about <code>UTL_FILE</code>, see <a class="olink ARPLS069" href="../ARPLS/u_file.htm#ARPLS069"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS139" href="../ARPLS/intro.htm#ARPLS139"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for a summary of PL/SQL packages that Oracle Database supplies</div>
</div>
<!-- class="sect2" -->
<a id="BACCBEGE"></a>
<div id="TDDDG99924" class="sect2">
<h3 class="sect2">Statistics Gathering and Application Tracing</h3>
<p>Database statistics provide information about the type of load on the database and the internal and external resources used by the database. To accurately diagnose performance problems with the database using ADDM, statistics must be available. For information about <a id="sthref704"></a>statistics gathering, see <a class="olink TDPPT007" href="../TDPPT/tdppt_method.htm#TDPPT007"><span class="italic">Oracle Database 2 Day + Performance Tuning Guide</span></a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If Oracle Enterprise Manager is unavailable, then you can gather statistics using <code>DBMS_MONITOR</code> subprograms, described in <a class="olink ARPLS091" href="../ARPLS/d_monitor.htm#ARPLS091"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.</div>
<p>Oracle Database provides several tracing tools that can help you monitor and analyze Oracle Database applications. For details, see <a class="olink TGSQL791" href="../TGSQL/tgsql_trace.htm#TGSQL791"><span class="italic">Oracle Database SQL Tuning Guide</span></a>.</p>
</div>
<!-- class="sect2" -->
<a id="BACIEGBF"></a>
<div id="TDDDG99922" class="sect2">
<h3 class="sect2">Use Existing Functionality</h3>
<p>When developing your application, use the existing functionality of your programming language, your operating system, Oracle Database, and the PL/SQL packages and types that Oracle Database supplies as much as possible. An application that uses existing functionality is easier to develop and maintain than one that does not, and it also runs faster.</p>
<p>Examples of existing functionality that many developers reinvent are:</p>
<ul>
<li>
<p><span class="bold">Constraints</span></p>
<p>For introductory information about constraints, see <a href="tdddg_objects.htm#BABJFCCE">&#34;Ensuring Data Integrity in Tables.&#34;</a></p>
</li>
<li>
<p><span class="bold">SQL functions</span> (functions that are &#34;built into&#34; SQL)</p>
<p>For information about SQL functions, see <a class="olink SQLRF006" href="../SQLRF/functions.htm#SQLRF006"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</li>
<li>
<p><span class="bold">Sequences</span> (which can generate unique sequential values)</p>
<p>See <a href="tdddg_objects.htm#BABJICJI">&#34;Creating and Managing Sequences&#34;</a>.</p>
</li>
<li>
<p><span class="bold">Auditing</span> (the monitoring and recording of selected user database actions)</p>
<p>For introductory information about auditing, see <a class="olink TDPSG50000" href="../TDPSG/GUID-BF747771-01D1-4BFB-8489-08988E1181F6.htm#TDPSG50000"><span class="italic">Oracle Database 2 Day + Security Guide</span></a>.</p>
</li>
<li>
<p><span class="bold">Replication</span> (the process of copying and maintaining database objects, such as tables, in multiple databases that comprise a distributed database system)</p>
<p>For an overview of replication, see <a class="olink REPLN126" href="../REPLN/repoverview.htm#REPLN126"><span class="italic">Oracle Database Advanced Replication</span></a>.</p>
</li>
<li>
<p><span class="bold">Message queuing</span> (how web-based business applications communicate with each other)</p>
<p>For introductory information about Oracle Database Advanced Queuing (AQ), see <a class="olink ADQUE0100" href="../ADQUE/aq_intro.htm#ADQUE0100"><span class="italic">Oracle Database Advanced Queuing User&#39;s Guide</span></a>.</p>
</li>
<li>
<p><span class="bold">Maintaining a history of record changes</span></p>
<p>For introductory information about Workspace Manager, see <a class="olink ADWSM010" href="../ADWSM/long_intro.htm#ADWSM010"><span class="italic">Oracle Database Workspace Manager Developer&#39;s Guide</span></a>.</p>
</li>
</ul>
<p>In <a href="#BACGDEFE">Example 8-4</a>, two concurrent transactions dequeue messages stored in a table (that is, each transaction finds and locks the next unprocessed row of the table). Rather than simply invoking the <code>DBMS_AQ.DEQUEUE</code> procedure (described in <a class="olink ARPLS098" href="../ARPLS/d_aq.htm#ARPLS098"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>), the example creates a function-based index on the table and then uses that function in each transaction to retrieve the rows and display the messages.</p>
<div id="TDDDG281" class="example">
<p class="titleinexample"><a id="BACGDEFE"></a>Example 8-4 Concurrent Dequeuing Transactions</p>
<p>Create table:</p>
<pre>DROP TABLE t;
CREATE TABLE t
  ( id             NUMBER PRIMARY KEY,
    processed_flag VARCHAR2(1),
    payload        VARCHAR2(20)
  );
</pre>
<p><span class="bold">Create index on table:</span></p>
<pre>CREATE INDEX t_idx ON
  t( DECODE( processed_flag, &#39;N&#39;, &#39;N&#39; ) );
</pre>
<p>Populate table:</p>
<pre>INSERT INTO t
  SELECT r,
         CASE WHEN MOD(r,2) = 0 THEN &#39;N&#39; ELSE &#39;Y&#39; END,
         &#39;payload &#39; || r
  FROM (SELECT LEVEL r FROM DUAL CONNECT BY LEVEL &lt;= 5);
</pre>
<p>Show table:</p>
<pre>SELECT * FROM t;
</pre>
<p>Result:</p>
<pre>        ID P PAYLOAD
---------- - --------------------
         1 Y payload 1
         2 N payload 2
         3 Y payload 3
         4 N payload 4
         5 Y payload 5
 
5 rows selected.
</pre>
<p><span class="bold">First transaction:</span></p>
<pre>DECLARE
  l_rec t%ROWTYPE;
  CURSOR c IS
    SELECT *
    FROM t
    WHERE DECODE(processed_flag,&#39;N&#39;,&#39;N&#39;) = &#39;N&#39;
    FOR UPDATE
    SKIP LOCKED;
BEGIN
  OPEN c;
 
  FETCH c INTO l_rec;
 
  IF ( c%FOUND ) THEN
    DBMS_OUTPUT.PUT_LINE( &#39;Got row &#39; || l_rec.id || &#39;, &#39; || l_rec.payload );
  END IF;
 
  CLOSE c;
END;
/
</pre>
<p>Result:</p>
<pre>Got row 2, payload 2
</pre>
<p><span class="bold">Concurrent transaction:</span></p>
<pre>DECLARE
  <span class="bold">PRAGMA AUTONOMOUS_TRANSACTION;</span>
  l_rec t%ROWTYPE;
  CURSOR c IS
    SELECT *
    FROM t
    WHERE DECODE(processed_flag,&#39;N&#39;,&#39;N&#39;) = &#39;N&#39;
    FOR UPDATE
    SKIP LOCKED;
BEGIN
  OPEN c;
 
  FETCH c INTO l_rec;
 
  IF ( c%FOUND ) THEN
    DBMS_OUTPUT.PUT_LINE( &#39;Got row &#39; || l_rec.id || &#39;, &#39; || l_rec.payload );
  END IF;
 
  CLOSE c;
  COMMIT;
END;
/
</pre>
<p>Result:</p>
<pre>Got row 4, payload 4
</pre></div>
<!-- class="example" -->
<p>The code in <a href="#BACGDEFE">Example 8-4</a> implements a feature similar to a <code>DBMS_AQ.DEQUEUE</code> invocation but with fewer capabilities. The development time saved by using existing functionality (in this case, function-based indexes) can be large.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ARPLS" href="../ARPLS/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a></p>
</li>
<li>
<p><a class="olink NEWFT" href="../NEWFT/toc.htm"><span class="italic">Oracle Database New Features Guide</span></a> (with each release)</p>
</li>
<li>
<p><a class="olink CNCPT" href="../CNCPT/toc.htm"><span class="italic">Oracle Database Concepts</span></a> (with each release)</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="BACHCGCD"></a>
<div id="TDDDG151" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Cover Database Tables with Editioning Views</h3>
<p>If your application uses database tables, then cover each one with an <a id="sthref705"></a>editioning view so that you can use edition-based redefinition (EBR) to upgrade the database component of your application while it is in use, thereby minimizing or eliminating down time. For information about EBR, see <span class="italic">Oracle Database Development Guide</span>. For information about editioning views, see <span class="italic">Oracle Database Development Guide</span>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BACHCDFC"></a>
<div id="TDDDG152" class="sect1">
<h2 class="sect1">Recommended Security Practices</h2>
<p>When granting <a id="sthref706"></a><a id="sthref707"></a>privileges on the schema objects that comprise your application, use the <span class="bold">principle of least privilege</span>. That is, give users <span class="italic">only</span> the privileges that they need. For more information about the principle of least privilege, see <a class="olink TDPSG30033" href="../TDPSG/GUID-800F33CF-26E2-4246-86D5-7DD5B3B7B2ED.htm#TDPSG30033"><span class="italic">Oracle Database 2 Day + Security Guide</span></a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BACGGAAJ">&#34;Using Bind Arguments to Improve Scalability&#34;</a> for information about using bind arguments instead of string literals, which is the most effective way to make your code invulnerable to SQL injection attacks</div>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment5832">
<tr>
<td class="cellalignment5839">
<table class="cellalignment5837">
<tr>
<td class="cellalignment5836"><a href="tdddg_globalization.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5836"><a href="sample_app.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment5841">
<table class="cellalignment5835">
<tr>
<td class="cellalignment5836"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5836"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5836"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5836"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5836"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5836"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>