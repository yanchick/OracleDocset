<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-106196"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Developing%20a%20Simple%20Oracle%20Database%20Application"></a><title>Developing a Simple Oracle Database Application</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="dcterms.created" content="2014-07-01T1:46:13Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database 2 Day Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E53088-01"/>
<meta name="dcterms.isVersionOf" content="TDDDG"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="effective_apps.htm" title="Previous" type="text/html"/>
<link rel="Next" href="tdddg_deploying.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E53088-01.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">15/17</span> <!-- End Header -->
<script>
<!-- // <![CDATA[
window.name='sample_app'
// ]]> -->
</script> <script>
// <![CDATA[
function footdisplay(footnum,footnote) {
    var msg = window.open('', 'NewWindow' + footnum,
        'directories=no,height=120,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');

    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">');
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>');
    msg.document.write('Footnote ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><h1>Footnote ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/body><\/html>');
    msg.document.close();
    msg.focus();
}
// ]]>
</script> <noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript>
<div id="TDDDG153" class="chapter"><a id="BABBDIEA"></a>
<h1 class="chapter"><span class="secnum">9</span> <a id="sthref708"></a>Developing a Simple Oracle Database Application</h1>
<p>This chapter shows how to develop a simple Oracle Database application.</p>
<p>This chapter contains:</p>
<ul>
<li>
<p><a href="#BABCBHJH">About the Application</a></p>
</li>
<li>
<p><a href="#BABJFIDE">Creating the Schemas for the Application</a></p>
</li>
<li>
<p><a href="#BABEEEAA">Granting Privileges to the Schemas</a></p>
</li>
<li>
<p><a href="#BABFECBG">Creating the Schema Objects and Loading the Data</a></p>
</li>
<li>
<p><a href="#BABFFCIF">Creating the employees_pkg Package</a></p>
</li>
<li>
<p><a href="#BABIHFDD">Creating the admin_pkg Package</a></p>
</li>
</ul>
<a id="BABCBHJH"></a>
<div id="TDDDG154" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">About the Application</h2>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#BABBJHDB">Purpose of the Application</a></p>
</li>
<li>
<p><a href="#BABCFCIA">Structure of the Application</a></p>
</li>
<li>
<p><a href="#BABEJCBC">Naming Conventions in the Application</a></p>
</li>
</ul>
<a id="BABBJHDB"></a>
<div id="TDDDG157" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Purpose of the Application</h3>
<p>The application is intended for two kinds of users in a company:</p>
<ul>
<li>
<p>Typical users (managers of employees)</p>
</li>
<li>
<p>Application administrators</p>
</li>
</ul>
<p>Typical users can do the following:</p>
<ul>
<li>
<p>Get the employees in a given department</p>
</li>
<li>
<p>Get the job history for a given employee</p>
</li>
<li>
<p>Show general information for a given employee (name, department, job, manager, salary, and so on)</p>
</li>
<li>
<p>Change the salary of a given employee</p>
</li>
<li>
<p>Change the job of a given employee</p>
</li>
</ul>
<p>Application administrators can do the following:</p>
<ul>
<li>
<p>Change the ID, title, or salary range of an existing job</p>
</li>
<li>
<p>Add a new job</p>
</li>
<li>
<p>Change the ID, name, or manager of an existing department</p>
</li>
<li>
<p>Add a new department</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABCFCIA"></a>
<div id="TDDDG158" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Structure of the Application</h3>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#BABHIBIE">Schema Objects of the Application</a></p>
</li>
<li>
<p><a href="#BABFDGAI">Schemas for the Application</a></p>
</li>
</ul>
<a id="BABHIBIE"></a>
<div id="TDDDG161" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Schema Objects of the Application</h4>
<p>The application is composed of these <a id="sthref709"></a>schema objects:</p>
<ul>
<li>
<p>Four tables, which store data about:</p>
<ul>
<li>
<p>Jobs</p>
</li>
<li>
<p>Departments</p>
</li>
<li>
<p>Employees</p>
</li>
<li>
<p>Job history of employees</p>
</li>
</ul>
</li>
<li>
<p>Four editioning views, which cover the tables, enabling you to use edition-based redefinition (EBR) to upgrade the finished application when it is in use</p>
</li>
<li>
<p>Two triggers, which enforce business rules</p>
</li>
<li>
<p>Two sequences that generate unique primary keys for new departments and new employees</p>
</li>
<li>
<p>Two packages:</p>
<ul>
<li>
<p><code>employees_pkg</code>, the application program interface (API) for typical users</p>
</li>
<li>
<p><code>admin_pkg</code>, the API for application administrators</p>
</li>
</ul>
<p>The typical users and application administrators access the application only through its APIs. Therefore, they can change the data only by invoking package subprograms.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="tdddg_intro.htm#CEGEBHHF">&#34;About Oracle Database&#34;</a> for information about schema objects</p>
</li>
<li>
<p><a class="olink ADFNS020" href="../ADFNS/adfns_editions.htm#ADFNS020"><span class="italic">Oracle Database Development Guide</span></a> for information about EBR</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="BABFDGAI"></a>
<div id="TDDDG162" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Schemas for the Application</h4>
<p>For <a id="sthref710"></a>security, the application uses these five <a id="sthref711"></a>schemas (or users), each of which has <span class="italic">only</span> the privileges that it needs:</p>
<ul>
<li>
<p><code>app_data</code>, who owns all the schema objects except the packages and loads its tables with data from tables in the sample schema <code>HR</code></p>
<p>The developers who create the packages never work in this schema. Therefore, they cannot accidently alter or drop application schema objects.</p>
</li>
<li>
<p><code>app_code</code>, who owns only the package <code>employees_pkg</code></p>
<p>The developers of <code>employees_pkg</code> work in this schema.</p>
</li>
<li>
<p><code>app_admin</code>, who owns only the package <code>admin_pkg</code></p>
<p>The developers of <code>admin_pkg</code> work in this schema.</p>
</li>
<li>
<p><code>app_user</code>, the typical application user, who owns nothing and can only execute <code>employees_pkg</code></p>
<p>The middle-tier application server connects to the database in the connection pool as <code>app_user</code>. If this schema is compromised&mdash;by a SQL injection bug, for example&mdash;the attacker can see and change only what <code>employees_pkg</code> subprograms let it see and change. The attacker cannot drop tables, escalate privileges, create or alter schema objects, or anything else.</p>
</li>
<li>
<p><code>app_admin_user</code>, an application administrator, who owns nothing and can only execute <code>admin_pkg</code> and <code>employees_pkg</code></p>
<p>The connection pool for this schema is very small, and only privileged users can access it. If this schema is compromised, the attacker can see and change only what <code>admin_pkg</code> and <code>employees_pkg</code> subprograms let it see and change.</p>
</li>
</ul>
<p>Suppose that instead of <code>app_user</code> and <code>app_admin_user</code>, the application had only one schema that owned nothing and could execute both <code>employees_pkg</code> and <code>admin_pkg</code>. The connection pool for this schema would have to be large enough for both the typical users and the application administrators. If there were a SQL injection bug in <code>employees_pkg</code>, a typical user who exploited that bug could access <code>admin_pkg</code>.</p>
<p>Suppose that instead of <code>app_data</code>, <code>app_code</code>, and <code>app_admin</code>, the application had only one schema that owned all the schema objects, including the packages. The packages would then have all privileges on the tables, which would be both unnecessary and undesirable.</p>
<p>For example, suppose that you have an audit trail table, <code>AUDIT_TRAIL</code>. You want the developers of <code>employees_pkg</code> to be able to write to <code>AUDIT_TRAIL</code>, but not read or change it. You want the developers of <code>admin_pkg</code> to be able to read <code>AUDIT_TRAIL</code> and write to it, but not change it. If <code>AUDIT_TRAIL</code>, <code>employees_pkg</code>, and <code>admin_pkg</code> belong to the same schema, then the developers of the two packages have all privileges on <code>AUDIT_TRAIL</code>. However, if <code>AUDIT_TRAIL</code> belongs to <code>app_data</code>, <code>employees_pkg</code> belongs to <code>app_code</code>, and <code>admin_pkg</code> belongs to <code>app_admin</code>, then you can connect to the database as <code>app_data</code> and do this:</p>
<pre>GRANT INSERT ON AUDIT_TRAIL TO app_code;
GRANT INSERT, SELECT ON AUDIT_TRAIL TO app_admin;
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="tdddg_intro.htm#CEGEBHHF">&#34;About Oracle Database&#34;</a> for information about schemas</p>
</li>
<li>
<p><a href="tdddg_intro.htm#BABGGFHJ">&#34;About Sample Schema HR&#34;</a> for information about sample schema <code>HR</code></p>
</li>
<li>
<p><a href="effective_apps.htm#BACHCDFC">&#34;Recommended Security Practices&#34;</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABEJCBC"></a>
<div id="TDDDG286" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Naming Conventions in the Application</h3>
<p>The application uses these <a id="sthref712"></a>naming conventions:</p>
<div class="inftblinformal">
<table class="cellalignment5842" title="Naming Conventions" summary="Left column lists the items for which the application has naming conventions. Right column describes those conventions.">
<thead>
<tr class="cellalignment5833">
<th class="cellalignment5843" id="r1c1-t4">Item</th>
<th class="cellalignment5843" id="r1c2-t4">Name</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5833">
<td class="cellalignment5839" id="r2c1-t4" headers="r1c1-t4">Table</td>
<td class="cellalignment5839" headers="r2c1-t4 r1c2-t4"><code><span class="codeinlineitalic">table</span></code><code>#</code></td>
</tr>
<tr class="cellalignment5833">
<td class="cellalignment5839" id="r3c1-t4" headers="r1c1-t4">Editioning view for <code><span class="codeinlineitalic">table</span></code><code>#</code></td>
<td class="cellalignment5839" headers="r3c1-t4 r1c2-t4"><code><span class="codeinlineitalic">table</span></code></td>
</tr>
<tr class="cellalignment5833">
<td class="cellalignment5839" id="r4c1-t4" headers="r1c1-t4">Trigger on editioning view <code><span class="codeinlineitalic">table</span></code></td>
<td class="cellalignment5839" headers="r4c1-t4 r1c2-t4"><code><span class="codeinlineitalic">table</span></code><code>_{a|b}</code><code><span class="codeinlineitalic">event</span></code><code>[_fer]</code> where:
<ul>
<li>
<p><code>a</code> identifies an <code>AFTER</code> trigger.</p>
</li>
<li>
<p><code>b</code> identifies a <code>BEFORE</code> trigger.</p>
</li>
<li>
<p><code>fer</code> identifies a <code>FOR</code> <code>EACH</code> <code>ROW</code> trigger.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">event</span></code> identifies the event that fires the trigger. For example: <code>i</code> for <code>INSERT</code>, <code>iu</code> for <code>INSERT</code> or <code>UPDATE</code>, <code>d</code> for <code>DELETE</code>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment5833">
<td class="cellalignment5839" id="r5c1-t4" headers="r1c1-t4"><code>PRIMARY</code> <code>KEY</code> constraint in <code><span class="codeinlineitalic">table</span></code><code>#</code></td>
<td class="cellalignment5839" headers="r5c1-t4 r1c2-t4"><code><span class="codeinlineitalic">table</span></code><code>_pk</code></td>
</tr>
<tr class="cellalignment5833">
<td class="cellalignment5839" id="r6c1-t4" headers="r1c1-t4"><code>NOT</code> <code>NULL</code> constraint on <code><span class="codeinlineitalic">table</span></code><code>#.</code><code><span class="codeinlineitalic">column</span></code></td>
<td class="cellalignment5839" headers="r6c1-t4 r1c2-t4"><code><span class="codeinlineitalic">table_column</span></code><code>_not_null</code><a id="BABDAEBB" href="#BABDAEBB" onclick="footdisplay(1,&#34;\u003ccode\u003e\u003cspan class=\&#34;codeinlineitalic\&#34;\u003etable\u003c/span\u003e\u003c/code\u003e, \u003ccode\u003e\u003cspan class=\&#34;codeinlineitalic\&#34;\u003etable1\u003c/span\u003e\u003c/code\u003e, and \u003ccode\u003e\u003cspan class=\&#34;codeinlineitalic\&#34;\u003etable2\u003c/span\u003e\u003c/code\u003e are abbreviated to \u003ccode\u003eemp\u003c/code\u003e for \u003ccode\u003eemployees\u003c/code\u003e, \u003ccode\u003edept\u003c/code\u003e for \u003ccode\u003edepartments\u003c/code\u003e, and \u003ccode\u003ejob_hist\u003c/code\u003e for \u003ccode\u003ejob_history\u003c/code\u003e.&#34;)"><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></td>
</tr>
<tr class="cellalignment5833">
<td class="cellalignment5839" id="r7c1-t4" headers="r1c1-t4"><code>UNIQUE</code> constraint on <code><span class="codeinlineitalic">table</span></code><code>#.</code><code><span class="codeinlineitalic">column</span></code></td>
<td class="cellalignment5839" headers="r7c1-t4 r1c2-t4"><code><span class="codeinlineitalic">table_column</span></code><code>_unique</code><a id="sthref713" href="#sthref713" onclick="footdisplay(1,&#34;\u003ccode\u003e\u003cspan class=\&#34;codeinlineitalic\&#34;\u003etable\u003c/span\u003e\u003c/code\u003e, \u003ccode\u003e\u003cspan class=\&#34;codeinlineitalic\&#34;\u003etable1\u003c/span\u003e\u003c/code\u003e, and \u003ccode\u003e\u003cspan class=\&#34;codeinlineitalic\&#34;\u003etable2\u003c/span\u003e\u003c/code\u003e are abbreviated to \u003ccode\u003eemp\u003c/code\u003e for \u003ccode\u003eemployees\u003c/code\u003e, \u003ccode\u003edept\u003c/code\u003e for \u003ccode\u003edepartments\u003c/code\u003e, and \u003ccode\u003ejob_hist\u003c/code\u003e for \u003ccode\u003ejob_history\u003c/code\u003e.&#34;)"><sup class="footnotenumber">Footref&nbsp;1</sup></a></td>
</tr>
<tr class="cellalignment5833">
<td class="cellalignment5839" id="r8c1-t4" headers="r1c1-t4"><code>CHECK</code> constraint on <code><span class="codeinlineitalic">table</span></code><code>#.</code><code><span class="codeinlineitalic">column</span></code></td>
<td class="cellalignment5839" headers="r8c1-t4 r1c2-t4"><code><span class="codeinlineitalic">table_column</span></code><code>_check</code><a id="sthref714" href="#sthref714" onclick="footdisplay(1,&#34;\u003ccode\u003e\u003cspan class=\&#34;codeinlineitalic\&#34;\u003etable\u003c/span\u003e\u003c/code\u003e, \u003ccode\u003e\u003cspan class=\&#34;codeinlineitalic\&#34;\u003etable1\u003c/span\u003e\u003c/code\u003e, and \u003ccode\u003e\u003cspan class=\&#34;codeinlineitalic\&#34;\u003etable2\u003c/span\u003e\u003c/code\u003e are abbreviated to \u003ccode\u003eemp\u003c/code\u003e for \u003ccode\u003eemployees\u003c/code\u003e, \u003ccode\u003edept\u003c/code\u003e for \u003ccode\u003edepartments\u003c/code\u003e, and \u003ccode\u003ejob_hist\u003c/code\u003e for \u003ccode\u003ejob_history\u003c/code\u003e.&#34;)"><sup class="footnotenumber">Footref&nbsp;1</sup></a></td>
</tr>
<tr class="cellalignment5833">
<td class="cellalignment5839" id="r9c1-t4" headers="r1c1-t4"><code>REF</code> constraint on <code><span class="codeinlineitalic">table1</span></code><code>#.</code><code><span class="codeinlineitalic">column</span></code> to <code><span class="codeinlineitalic">table2</span></code><code>#.</code><code><span class="codeinlineitalic">column</span></code></td>
<td class="cellalignment5839" headers="r9c1-t4 r1c2-t4"><code><span class="codeinlineitalic">table1</span></code><code>_to_</code><code><span class="codeinlineitalic">table2</span></code><code>_fk</code><a id="sthref715" href="#sthref715" onclick="footdisplay(1,&#34;\u003ccode\u003e\u003cspan class=\&#34;codeinlineitalic\&#34;\u003etable\u003c/span\u003e\u003c/code\u003e, \u003ccode\u003e\u003cspan class=\&#34;codeinlineitalic\&#34;\u003etable1\u003c/span\u003e\u003c/code\u003e, and \u003ccode\u003e\u003cspan class=\&#34;codeinlineitalic\&#34;\u003etable2\u003c/span\u003e\u003c/code\u003e are abbreviated to \u003ccode\u003eemp\u003c/code\u003e for \u003ccode\u003eemployees\u003c/code\u003e, \u003ccode\u003edept\u003c/code\u003e for \u003ccode\u003edepartments\u003c/code\u003e, and \u003ccode\u003ejob_hist\u003c/code\u003e for \u003ccode\u003ejob_history\u003c/code\u003e.&#34;)"><sup class="footnotenumber">Footref&nbsp;1</sup></a></td>
</tr>
<tr class="cellalignment5833">
<td class="cellalignment5839" id="r10c1-t4" headers="r1c1-t4"><code>REF</code> constraint on <code><span class="codeinlineitalic">table1</span></code><code>#.</code><code><span class="codeinlineitalic">column1</span></code> to <code><span class="codeinlineitalic">table2</span></code><code>#.</code><code><span class="codeinlineitalic">column2</span></code></td>
<td class="cellalignment5839" headers="r10c1-t4 r1c2-t4"><code><span class="codeinlineitalic">table1_col1</span></code><code>_to_</code><code><span class="codeinlineitalic">table2_col2</span></code><code>_fk</code><a id="sthref716" href="#sthref716" onclick="footdisplay(1,&#34;\u003ccode\u003e\u003cspan class=\&#34;codeinlineitalic\&#34;\u003etable\u003c/span\u003e\u003c/code\u003e, \u003ccode\u003e\u003cspan class=\&#34;codeinlineitalic\&#34;\u003etable1\u003c/span\u003e\u003c/code\u003e, and \u003ccode\u003e\u003cspan class=\&#34;codeinlineitalic\&#34;\u003etable2\u003c/span\u003e\u003c/code\u003e are abbreviated to \u003ccode\u003eemp\u003c/code\u003e for \u003ccode\u003eemployees\u003c/code\u003e, \u003ccode\u003edept\u003c/code\u003e for \u003ccode\u003edepartments\u003c/code\u003e, and \u003ccode\u003ejob_hist\u003c/code\u003e for \u003ccode\u003ejob_history\u003c/code\u003e.&#34;)"><sup class="footnotenumber">Footref&nbsp;1</sup></a> <a id="sthref717" href="#sthref717" onclick="footdisplay(2,&#34;\u003ccode\u003e\u003cspan class=\&#34;codeinlineitalic\&#34;\u003ecol1\u003c/span\u003e\u003c/code\u003e and \u003ccode\u003e\u003cspan class=\&#34;codeinlineitalic\&#34;\u003ecol2\u003c/span\u003e\u003c/code\u003e are abbreviations of column names \u003ccode\u003e\u003cspan class=\&#34;codeinlineitalic\&#34;\u003ecolumn1\u003c/span\u003e\u003c/code\u003e and \u003ccode\u003e\u003cspan class=\&#34;codeinlineitalic\&#34;\u003ecolumn2\u003c/span\u003e\u003c/code\u003e. A constraint name cannot have more than 30 characters.&#34;)"><sup class="tablefootnote">Foot&nbsp;2&nbsp;</sup></a></td>
</tr>
<tr class="cellalignment5833">
<td class="cellalignment5839" id="r11c1-t4" headers="r1c1-t4">Sequence for <code><span class="codeinlineitalic">table</span></code><code>#</code></td>
<td class="cellalignment5839" headers="r11c1-t4 r1c2-t4"><code><span class="codeinlineitalic">table_sequence</span></code></td>
</tr>
<tr class="cellalignment5833">
<td class="cellalignment5839" id="r12c1-t4" headers="r1c1-t4">Parameter name</td>
<td class="cellalignment5839" headers="r12c1-t4 r1c2-t4"><code>p_</code><code><span class="codeinlineitalic">name</span></code></td>
</tr>
<tr class="cellalignment5833">
<td class="cellalignment5839" id="r13c1-t4" headers="r1c1-t4">Local variable name</td>
<td class="cellalignment5839" headers="r13c1-t4 r1c2-t4"><code>l_</code><code><span class="codeinlineitalic">name</span></code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup><code><span class="codeinlineitalic">table</span></code>, <code><span class="codeinlineitalic">table1</span></code>, and <code><span class="codeinlineitalic">table2</span></code> are abbreviated to <code>emp</code> for <code>employees</code>, <code>dept</code> for <code>departments</code>, and <code>job_hist</code> for <code>job_history</code>.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;2&nbsp;</sup><code><span class="codeinlineitalic">col1</span></code> and <code><span class="codeinlineitalic">col2</span></code> are abbreviations of column names <code><span class="codeinlineitalic">column1</span></code> and <code><span class="codeinlineitalic">column2</span></code>. A constraint name cannot have more than 30 characters.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABJFIDE"></a>
<div id="TDDDG155" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Creating the Schemas for the Application</h2>
<p>Using the procedure in this section, create the <a id="sthref718"></a>schemas for the application, whose names are:</p>
<ul>
<li>
<p><code>app_data</code></p>
</li>
<li>
<p><code>app_code</code></p>
</li>
<li>
<p><code>app_admin</code></p>
</li>
<li>
<p><code>app_user</code></p>
</li>
<li>
<p><code>app_admin_user</code></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
For the following procedure, you need the name and password of a user who has the <code>CREATE</code> <code>USER</code> and <code>DROP</code> <code>USER</code> system privileges.</div>
<p class="subhead2"><a id="TDDDG164"></a>To create the schema (or user) <span class="italic">schema_name</span>:</p>
<ol>
<li>
<p>Using SQL*Plus, connect to Oracle Database as a user with the <code>CREATE</code> <code>USER</code> and <code>DROP</code> <code>USER</code> system privileges.</p>
<p>The <code>SQL&gt;</code> prompt appears.</p>
</li>
<li>
<p>In case the schema exists, drop the schema and its objects with this SQL statement:</p>
<pre>DROP USER <span class="italic">schema_name</span> CASCADE;
</pre>
<p>If the schema existed, the system responds:</p>
<pre>User dropped.
</pre>
<p>If the schema did not exist, the system responds:</p>
<pre>DROP USER <span class="italic">schema_name</span> CASCADE
          *
ERROR at line 1:
ORA-01918: user &#39;<span class="italic">schema_name</span>&#39; does not exist
</pre></li>
<li>
<p>If <code><span class="codeinlineitalic">schema_name</span></code> is either <code>app_data</code>, <code>app_code</code>, or <code>app_admin</code>, then create the schema with this SQL statement:</p>
<pre>CREATE USER <span class="italic">schema_name</span> IDENTIFIED BY <span class="italic">password</span>
DEFAULT TABLESPACE USERS
QUOTA UNLIMITED ON USERS
ENABLE EDITIONS;
</pre>
<p>Otherwise, create the schema with this SQL statement:</p>
<pre>CREATE USER <span class="italic">schema_name</span> IDENTIFIED BY <span class="italic">password</span>
ENABLE EDITIONS;
</pre>
<div class="infobox-note">
<p class="notep1">Caution:</p>
Choose a secure password. For guidelines for secure passwords, see <a class="olink DBSEG10005" href="../DBSEG/guidelines.htm#DBSEG10005"><span class="italic">Oracle Database Security Guide</span></a>.</div>
<p>The system responds:</p>
<pre>User created.
</pre></li>
<li>
<p>(Optional) In SQL&nbsp;Developer, create a connection for the schema, using the instructions in <a href="tdddg_connecting.htm#CEGFCEGG">&#34;Connecting to Oracle Database from SQL&nbsp;Developer&#34;</a>.</p>
</li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#BABCBHJH">&#34;About the Application&#34;</a></p>
</li>
<li>
<p><a href="tdddg_connecting.htm#CEGDIFBC">&#34;Connecting to Oracle Database from SQL*Plus&#34;</a></p>
</li>
<li>
<p><a class="olink SQLRF01811" href="../SQLRF/statements_9008.htm#SQLRF01811"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about the <code>DROP</code> <code>USER</code> statement</p>
</li>
<li>
<p><a class="olink SQLRF01503" href="../SQLRF/statements_8003.htm#SQLRF01503"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about the <code>CREATE</code> <code>USER</code> statement</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="BABEEEAA"></a>
<div id="TDDDG165" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Granting Privileges to the Schemas</h2>
<p>To grant <a id="sthref719"></a><a id="sthref720"></a>privileges to schemas, use the SQL statement <code>GRANT</code>. You can enter the <code>GRANT</code> statements either in SQL*Plus or in the Worksheet of SQL&nbsp;Developer. For security, grant each schema <span class="italic">only</span> the privileges that it needs.</p>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#BABGJEBG">Granting Privileges to the app_data Schema</a></p>
</li>
<li>
<p><a href="#BABCDJEE">Granting Privileges to the app_code Schema</a></p>
</li>
<li>
<p><a href="#BABJHBJJ">Granting Privileges to the app_admin Schema</a></p>
</li>
<li>
<p><a href="#BABIIIHE">Granting Privileges to the app_user and app_admin_user Schemas</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#BABCBHJH">&#34;About the Application&#34;</a></p>
</li>
<li>
<p><a class="olink SQLRF01603" href="../SQLRF/statements_9014.htm#SQLRF01603"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about the <code>GRANT</code> statement</p>
</li>
</ul>
</div>
<a id="BABGJEBG"></a>
<div id="TDDDG167" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Granting Privileges to the app_data Schema</h3>
<p>Grant to the <code>app_data</code> schema <span class="italic">only</span> the privileges to do the following:</p>
<ul>
<li>
<p>Connect to Oracle Database:</p>
<pre>GRANT CREATE SESSION TO app_data;
</pre></li>
<li>
<p>Create the tables, views, triggers, and sequences for the application:</p>
<pre>GRANT CREATE TABLE, CREATE VIEW, CREATE TRIGGER, CREATE SEQUENCE TO app_data;
</pre></li>
<li>
<p>Load data from four tables in the sample schema <code>HR</code> into its own tables:</p>
<pre>GRANT READ ON <span class="bold">HR.DEPARTMENTS</span> TO app_data;
GRANT READ ON <span class="bold">HR.EMPLOYEES</span> TO app_data;
GRANT READ ON <span class="bold">HR.JOB_HISTORY</span> TO app_data;
GRANT READ ON <span class="bold">HR.JOBS</span> TO app_data;
</pre></li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABCDJEE"></a>
<div id="TDDDG170" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Granting Privileges to the app_code Schema</h3>
<p>Grant to the <code>app_code</code> schema <span class="italic">only</span> the privileges to do the following:</p>
<ul>
<li>
<p>Connect to Oracle Database:</p>
<pre>GRANT CREATE SESSION TO app_code;
</pre></li>
<li>
<p>Create the package <code>employees_pkg</code>:</p>
<pre>GRANT CREATE PROCEDURE TO app_code;
</pre></li>
<li>
<p>Create synonyms (for convenience):</p>
<pre>GRANT CREATE SYNONYMS TO app_code;
</pre></li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABJHBJJ"></a>
<div id="TDDDG171" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Granting Privileges to the app_admin Schema</h3>
<p>Grant to the <code>app_admin</code> schema <span class="italic">only</span> the privileges to do the following:</p>
<ul>
<li>
<p>Connect to Oracle Database:</p>
<pre>GRANT CREATE SESSION TO app_admin;
</pre></li>
<li>
<p>Create the package <code>admin_pkg</code>:</p>
<pre>GRANT CREATE PROCEDURE TO app_admin;
</pre></li>
<li>
<p>Create synonyms (for convenience):</p>
<pre>GRANT CREATE SYNONYMS TO app_admin;
</pre></li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABIIIHE"></a>
<div id="TDDDG243" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Granting Privileges to the app_user and app_admin_user Schemas</h3>
<p>Grant to the <code>app_user</code> and <code>app_admin_user</code> schemas <span class="italic">only</span> the privileges to do the following:</p>
<ul>
<li>
<p>Connect to Oracle Database:</p>
<pre>GRANT CREATE SESSION TO app_user;
GRANT CREATE SESSION TO app_admin_user;
</pre></li>
<li>
<p>Create synonyms (for convenience):</p>
<pre>GRANT CREATE SYNONYMS TO app_user;
GRANT CREATE SYNONYMS TO app_admin_user;
</pre></li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABFECBG"></a>
<div id="TDDDG283" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Creating the Schema Objects and Loading the Data</h2>
<p><a id="sthref721"></a>This section shows how to create the tables, editioning views, triggers, and sequences for the application, how to load data into the tables, and how to grant privileges on these schema objects to the users that need them.</p>
<p class="subhead2"><a id="TDDDG284"></a>To create the schema objects and load the data:</p>
<ol>
<li>
<p>Connect to Oracle Database as user <code>app_data</code>.</p>
<p>For instructions, see either <a href="tdddg_connecting.htm#CEGDIFBC">&#34;Connecting to Oracle Database from SQL*Plus&#34;</a> or <a href="tdddg_connecting.htm#CEGFCEGG">&#34;Connecting to Oracle Database from SQL&nbsp;Developer&#34;</a>.</p>
</li>
<li>
<p>Create the tables, with all necessary constraints except the foreign key constraint that you must add after you load the data.</p>
</li>
<li>
<p>Create the editioning views.</p>
</li>
<li>
<p>Create the triggers.</p>
</li>
<li>
<p>Create the sequences.</p>
</li>
<li>
<p>Load the data into the tables.</p>
</li>
<li>
<p>Add the foreign key constraint.</p>
</li>
</ol>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#BABHEAEF">Creating the Tables</a></p>
</li>
<li>
<p><a href="#BABBJHBI">Creating the Editioning Views</a></p>
</li>
<li>
<p><a href="#BABIHGGE">Creating the Triggers</a></p>
</li>
<li>
<p><a href="#BABHHFHJ">Creating the Sequences</a></p>
</li>
<li>
<p><a href="#BABCBIBH">Loading the Data</a></p>
</li>
<li>
<p><a href="#BABECCAG">Adding the Foreign Key Constraint</a></p>
</li>
<li>
<p><a href="#BABJFEIJ">Granting Privileges on the Schema Objects to Users</a></p>
</li>
</ul>
<a id="BABHEAEF"></a>
<div id="TDDDG285" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Creating the Tables</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
You must be connected to Oracle Database as user <code>app_data</code>.</div>
<p>This section shows how to create the <a id="sthref722"></a>tables for the application, with all necessary constraints except one, which you must add after you load the data.</p>
<p>In the following procedure, you can enter the statements either in SQL*Plus or in the Worksheet of SQL&nbsp;Developer. Alternatively, you can create the tables with the SQL&nbsp;Developer tool Create Table.</p>
<p class="subhead2"><a id="TDDDG287"></a>To create the tables:</p>
<ol>
<li>
<p>Create <code>jobs#</code>, which stores information about the jobs in the company (one row for each job):</p>
<pre>CREATE TABLE jobs#
( job_id      VARCHAR2(10)
              CONSTRAINT jobs_pk PRIMARY KEY,
  job_title   VARCHAR2(35)
              CONSTRAINT jobs_job_title_not_null NOT NULL,
  min_salary  NUMBER(6)
              CONSTRAINT jobs_min_salary_not_null NOT NULL,
  max_salary  NUMBER(6)
              CONSTRAINT jobs_max_salary_not_null NOT NULL
)
/
</pre></li>
<li>
<p>Create <code>departments#</code>, which stores information about the departments in the company (one row for each department):</p>
<pre>CREATE TABLE departments#
( department_id    NUMBER(4)
                   CONSTRAINT departments_pk PRIMARY KEY,
  department_name  VARCHAR2(30)
                   CONSTRAINT department_name_not_null NOT NULL
                   CONSTRAINT department_name_unique UNIQUE,
  manager_id       NUMBER(6)
)
/
</pre></li>
<li>
<p>Create <code>employees#</code>, which stores information about the employees in the company (one row for each employee):</p>
<pre>CREATE TABLE employees#
( employee_id     NUMBER(6)
                  CONSTRAINT employees_pk PRIMARY KEY,
  first_name      VARCHAR2(20)
                  CONSTRAINT emp_first_name_not_null NOT NULL,
  last_name       VARCHAR2(25)
                  CONSTRAINT emp_last_name_not_null NOT NULL,
  email_addr      VARCHAR2(25) 
                  CONSTRAINT emp_email_addr_not_null NOT NULL,
  hire_date       DATE
                  DEFAULT TRUNC(SYSDATE)
                  CONSTRAINT emp_hire_date_not_null NOT NULL
                  CONSTRAINT emp_hire_date_check
                    CHECK(TRUNC(hire_date) = hire_date),
  country_code    VARCHAR2(5)
                  CONSTRAINT emp_country_code_not_null NOT NULL,
  phone_number    VARCHAR2(20)
                  CONSTRAINT emp_phone_number_not_null NOT NULL,
  <span class="bold">job_id</span>          CONSTRAINT emp_job_id_not_null NOT NULL
                  CONSTRAINT emp_jobs_fk <span class="bold">REFERENCES jobs#</span>,
  job_start_date  DATE
                  CONSTRAINT emp_job_start_date_not_null NOT NULL,
                  CONSTRAINT emp_job_start_date_check
                    CHECK(TRUNC(JOB_START_DATE) = job_start_date),
  salary          NUMBER(6)
                  CONSTRAINT emp_salary_not_null NOT NULL,
  <span class="bold">manager_id</span>      CONSTRAINT emp_mgr_to_empno_fk <span class="bold">REFERENCES employees#</span>,
  <span class="bold">department_id</span>   CONSTRAINT emp_to_dept_fk <span class="bold">REFERENCES departments#</span>
)
/
</pre>
<p>The reasons for the <code>REF</code> constraints are:</p>
<ul>
<li>
<p>An employee must have an existing job. That is, values in the column <code>employees#.job_id</code> must also be values in the column <code>jobs#.job_id</code>.</p>
</li>
<li>
<p>An employee must have a manager who is also an employee. That is, values in the column <code>employees#.manager_id</code> must also be values in the column <code>employees#.employee_id</code>.</p>
</li>
<li>
<p>An employee must work in an existing department. That is, values in the column <code>employees#.department_id</code> must also be values in the column <code>departments#.department_id</code>.</p>
</li>
</ul>
<p>Also, the manager of an employee must be the manager of the department in which the employee works. That is, values in the column <code>employees#.manager_id</code> must also be values in the column <code>departments#.manager_id</code>. However, you could not specify the necessary constraint when you created <code>departments#</code>, because <code>employees#</code> did not exist yet. Therefore, you must add a foreign key constraint to <code>departments#</code> later (see <a href="#BABECCAG">&#34;Adding the Foreign Key Constraint&#34;</a>).</p>
</li>
<li>
<p>Create <code>job_history#</code>, which stores the job history of each employee in the company (one row for each job held by the employee):</p>
<pre>CREATE TABLE job_history#
( employee_id  CONSTRAINT job_hist_to_employees_fk <span class="bold">REFERENCES employees#</span>,
  job_id       CONSTRAINT job_hist_to_jobs_fk <span class="bold">REFERENCES jobs#</span>,
  start_date   DATE
               CONSTRAINT job_hist_start_date_not_null NOT NULL,
  end_date     DATE
               CONSTRAINT job_hist_end_date_not_null NOT NULL,
  department_id
             CONSTRAINT job_hist_to_departments_fk <span class="bold">REFERENCES departments#</span>
             CONSTRAINT job_hist_dept_id_not_null NOT NULL,
             CONSTRAINT job_history_pk PRIMARY KEY(employee_id,start_date),
             CONSTRAINT job_history_date_check CHECK( start_date &lt; end_date )
)
/
</pre>
<p>The reasons for the <code>REF</code> constraints are that the employee, job, and department must exist. That is:</p>
<ul>
<li>
<p>Values in the column <code>job_history#.employee_id</code> must also be values in the column <code>employees#.employee_id</code>.</p>
</li>
<li>
<p>Values in the column <code>job_history#.job_id</code> must also be values in the column <code>jobs#.job_id</code>.</p>
</li>
<li>
<p>Values in the column <code>job_history#.department_id</code> must also be values in the column <code>departments#.department_id</code>.</p>
</li>
</ul>
</li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="tdddg_objects.htm#BABFEIDE">&#34;Creating Tables&#34;</a></div>
</div>
<!-- class="sect2" -->
<a id="BABBJHBI"></a>
<div id="TDDDG288" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Creating the Editioning Views</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
You must be connected to Oracle Database as user <code>app_data</code>.</div>
<p>To create the editioning <a id="sthref723"></a>views, use the following statements (in any order). You can enter the statements either in SQL*Plus or in the Worksheet of SQL&nbsp;Developer. Alternatively, you can create the tables with the SQL&nbsp;Developer tool Create View.</p>
<pre>CREATE EDITIONING VIEW jobs AS SELECT * FROM jobs#
/
CREATE EDITIONING VIEW departments AS SELECT * FROM departments#
/
CREATE EDITIONING VIEW employees AS SELECT * FROM employees#
/
CREATE EDITIONING VIEW job_history AS SELECT * FROM job_history#
/
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
The application must always reference the base tables through the <a id="sthref724"></a>editioning views. Otherwise, the editioning views do not cover the tables and you cannot use EBR to upgrade the finished application when it is in use.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="tdddg_objects.htm#BABDGIAC">&#34;Creating Views&#34;</a></p>
</li>
<li>
<p><a class="olink ADFNS0202" href="../ADFNS/adfns_editions.htm#ADFNS0202"><span class="italic">Oracle Database Development Guide</span></a> for general information about editioning views</p>
</li>
<li>
<p><a class="olink ADFNS99917" href="../ADFNS/adfns_editions.htm#ADFNS99917"><span class="italic">Oracle Database Development Guide</span></a> for information about preparing an application to use editioning views</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="BABIHGGE"></a>
<div id="TDDDG289" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Creating the Triggers</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
You must be connected to Oracle Database as user <code>app_data</code>.</div>
<p>The <a id="sthref725"></a>triggers in the application enforce these business rules:</p>
<ul>
<li>
<p>An employee with job <span class="italic">j</span> must have a salary between the minimum and maximum salaries for job <span class="italic">j</span>.</p>
</li>
<li>
<p>If an employee with job <span class="italic">j</span> has salary <span class="italic">s</span>, then you cannot change the minimum salary for <span class="italic">j</span> to a value greater than <span class="italic">s</span> or the maximum salary for <span class="italic">j</span> to a value less than <span class="italic">s</span>. (To do so would make existing data invalid.)</p>
</li>
</ul>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#BABHBEIF">Creating the Trigger to Enforce the First Business Rule</a></p>
</li>
<li>
<p><a href="#BABFGIGC">Creating the Trigger to Enforce the Second Business Rule</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="tdddg_triggers.htm#BABIEDEF">Chapter 6, &#34;Using Triggers,&#34;</a> for information about triggers</div>
<a id="BABHBEIF"></a>
<div id="TDDDG290" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Creating the Trigger to Enforce the First Business Rule</h4>
<p>The first business rule is: An employee with job <span class="italic">j</span> must have a salary between the minimum and maximum salaries for job <span class="italic">j</span>.</p>
<p>This rule could be violated either when a new row is inserted into the <code>employees</code> table or when the <code>salary</code> or <code>job_id</code> column of the <code>employees</code> table is updated.</p>
<p>To enforce the rule, create the following trigger on the editioning view <code>employees</code>. You can enter the <code>CREATE</code> <code>TRIGGER</code> statement either in SQL*Plus or in the Worksheet of SQL&nbsp;Developer. Alternatively, you can create the trigger with the SQL&nbsp;Developer tool Create Trigger.</p>
<pre>CREATE OR REPLACE TRIGGER employees_aiufer
AFTER INSERT OR UPDATE OF salary, job_id ON employees FOR EACH ROW
DECLARE
  l_cnt NUMBER;
BEGIN
  <span class="bold">LOCK TABLE jobs IN SHARE MODE;</span>  -- Ensure that jobs does not change
                                  -- during the following query.
  SELECT COUNT(*) INTO l_cnt
  FROM jobs
  WHERE job_id = :NEW.job_id
  AND :NEW.salary BETWEEN min_salary AND max_salary;
 
  IF (l_cnt&lt;&gt;1) THEN
    RAISE_APPLICATION_ERROR( -20002,
      CASE
        WHEN :new.job_id = :old.job_id
        THEN &#39;Salary modification invalid&#39;
        ELSE &#39;Job reassignment puts salary out of range&#39;
      END );
  END IF;
END;
/
</pre>
<p><code>LOCK</code> <code>TABLE</code> <code>jobs</code> <code>IN</code> <code>SHARE</code> <code>MODE</code> prevents other users from changing the table <code>jobs</code> while the trigger is querying it. Preventing changes to <code>jobs</code> during the query is necessary because nonblocking reads prevent the trigger from &#34;seeing&#34; changes that other users make to <code>jobs</code> while the trigger is changing <code>employees</code> (and prevent those users from &#34;seeing&#34; the changes that the trigger makes to <code>employees</code>).</p>
<p>Another way to prevent changes to <code>jobs</code> during the query is to include the <code>FOR</code> <code>UPDATE</code> clause in the <code>SELECT</code> statement. However, <code>SELECT</code> <code>FOR</code> <code>UPDATE</code> restricts concurrency more than <code>LOCK</code> <code>TABLE</code> <code>IN</code> <code>SHARE</code> <code>MODE</code> does.</p>
<p><code>LOCK</code> <code>TABLE</code> <code>jobs</code> <code>IN</code> <code>SHARE</code> <code>MODE</code> prevents other users from changing <code>jobs</code>, but not from locking <code>jobs</code> in share mode themselves. Changes to <code>jobs</code> will probably be much rarer than changes to <code>employees</code>. Therefore, locking <code>jobs</code> in share mode provides more concurrency than locking a single row of <code>jobs</code> in exclusive mode.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADFNS99941" href="../ADFNS/adfns_sqlproc.htm#ADFNS99941"><span class="italic">Oracle Database Development Guide</span></a> for information about locking tables <code>IN</code> <code>SHARE</code> <code>MODE</code></p>
</li>
<li>
<p><a class="olink LNPLS603" href="../LNPLS/static.htm#LNPLS603"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for information about <code>SELECT</code> <code>FOR</code> <code>UPDATE</code></p>
</li>
<li>
<p><a href="tdddg_triggers.htm#BABDAGJJ">&#34;Creating Triggers&#34;</a></p>
</li>
<li>
<p><a href="#BABCFIBB">&#34;Tutorial: Showing How the employees_pkg Subprograms Work&#34;</a> to see how the <code>employees_aiufer</code> trigger works</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="BABFGIGC"></a>
<div id="TDDDG291" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Creating the Trigger to Enforce the Second Business Rule</h4>
<p>The second business rule is: If an employee with job <span class="italic">j</span> has salary <span class="italic">s</span>, then you cannot change the minimum salary for <span class="italic">j</span> to a value greater than <span class="italic">s</span> or the maximum salary for <span class="italic">j</span> to a value less than <span class="italic">s</span>. (To do so would make existing data invalid.)</p>
<p>This rule could be violated when the <code>min_salary</code> or <code>max_salary</code> column of the <code>jobs</code> table is updated.</p>
<p>To enforce the rule, create the following trigger on the editioning view <code>jobs</code>. You can enter the <code>CREATE</code> <code>TRIGGER</code> statement either in SQL*Plus or in the Worksheet of SQL&nbsp;Developer. Alternatively, you can create the trigger with the SQL&nbsp;Developer tool Create Trigger.</p>
<pre>CREATE OR REPLACE TRIGGER jobs_aufer
AFTER UPDATE OF min_salary, max_salary ON jobs FOR EACH ROW
WHEN (NEW.min_salary &gt; OLD.min_salary OR NEW.max_salary &lt; OLD.max_salary)
DECLARE
  l_cnt NUMBER;
BEGIN
  <span class="bold">LOCK TABLE employees IN SHARE MODE;</span>

  SELECT COUNT(*) INTO l_cnt
  FROM employees
  WHERE job_id = :NEW.job_id
  AND salary NOT BETWEEN :NEW.min_salary and :NEW.max_salary;

  IF (l_cnt&gt;0) THEN
    RAISE_APPLICATION_ERROR( -20001,
      &#39;Salary update would violate &#39; || l_cnt || &#39; existing employee records&#39; );
  END IF;
END;
/
</pre>
<p><code>LOCK</code> <code>TABLE</code> <code>employees</code> <code>IN</code> <code>SHARE</code> <code>MODE</code> prevents other users from changing the table <code>employees</code> while the trigger is querying it. Preventing changes to <code>employees</code> during the query is necessary because nonblocking reads prevent the trigger from &#34;seeing&#34; changes that other users make to <code>employees</code> while the trigger is changing <code>jobs</code> (and prevent those users from &#34;seeing&#34; the changes that the trigger makes to <code>jobs</code>).</p>
<p>For this trigger, <code>SELECT</code> <code>FOR</code> <code>UPDATE</code> is not an alternative to <code>LOCK</code> <code>TABLE</code> <code>IN</code> <code>SHARE</code> <code>MODE</code>. While you are trying to change the salary range for this job, this trigger must prevent other users from changing a salary to be outside the new range. Therefore, the trigger must lock all rows in the <code>employees</code> table that have this <code>job_id</code> <span class="italic">and</span> lock all rows that someone could update to have this <code>job_id</code>.</p>
<p>One alternative to <code>LOCK</code> <code>TABLE</code> <code>employees</code> <code>IN</code> <code>SHARE</code> <code>MODE</code> is to use the <code>DBMS_LOCK</code> package to create a named lock with the name of the <code>job_id</code> and then use triggers on both the <code>employees</code> and <code>jobs</code> tables to use this named lock to prevent concurrent updates. However, using <code>DBMS_LOCK</code> and multiple triggers negatively impacts runtime performance.</p>
<p>Another alternative to <code>LOCK</code> <code>TABLE</code> <code>employees</code> <code>IN</code> <code>SHARE</code> <code>MODE</code> is to create a trigger on the <code>employees</code> table which, for each changed row of <code>employees</code>, locks the corresponding job row in <code>jobs</code>. However, this approach causes excessive work on updates to the <code>employees</code> table, which are frequent.</p>
<p><code>LOCK</code> <code>TABLE</code> <code>employees</code> <code>IN</code> <code>SHARE</code> <code>MODE</code> is simpler than the preceding alternatives, and changes to the <code>jobs</code> table are rare and likely to happen at application maintenance time, when locking the table does not inconvenience users.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADFNS99941" href="../ADFNS/adfns_sqlproc.htm#ADFNS99941"><span class="italic">Oracle Database Development Guide</span></a> for information about locking tables with <code>SHARE</code> <code>MODE</code></p>
</li>
<li>
<p><a class="olink ARPLS021" href="../ARPLS/d_lock.htm#ARPLS021"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about the <code>DBMS_LOCK</code> package</p>
</li>
<li>
<p><a href="tdddg_triggers.htm#BABDAGJJ">&#34;Creating Triggers&#34;</a></p>
</li>
<li>
<p><a href="#BABHBEJA">&#34;Tutorial: Showing How the admin_pkg Subprograms Work&#34;</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABHHFHJ"></a>
<div id="TDDDG295" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Creating the Sequences</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
You must be connected to Oracle Database as user <code>app_data</code>.</div>
<p>To create the <a id="sthref726"></a>sequences that generate unique primary keys for new departments and new employees, use the following statements (in either order). You can enter the statements either in SQL*Plus or in the Worksheet of SQL&nbsp;Developer. Alternatively, you can create the sequences with the SQL&nbsp;Developer tool Create Sequence.</p>
<pre>CREATE SEQUENCE employees_sequence START WITH 210;
CREATE SEQUENCE departments_sequence START WITH 275;
</pre>
<p>To avoid conflict with the data that you will load from tables in the sample schema <code>HR</code>, the starting numbers for <code>employees_sequence</code> and <code>departments_sequence</code> must exceed the maximum values of <code>employees.employee_id</code> and <code>departments.department_id</code>, respectively. After <a href="#BABCBIBH">&#34;Loading the Data&#34;</a>, this query displays these maximum values:</p>
<pre>SELECT MAX(e.employee_id), MAX(d.department_id)
FROM employees e, departments d;
 
</pre>
<p>Result:</p>
<pre>MAX(E.EMPLOYEE_ID) MAX(D.DEPARTMENT_ID)
------------------ --------------------
               206                  270
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="tdddg_objects.htm#BABJICJI">&#34;Creating and Managing Sequences&#34;</a></div>
</div>
<!-- class="sect2" -->
<a id="BABCBIBH"></a>
<div id="TDDDG292" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Loading the Data</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
You must be connected to Oracle Database as user <code>app_data</code>.</div>
<p>Load the tables of the application with data from tables in the sample schema <code>HR</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The following procedure references the tables of the application through their editioning views.</div>
<p>In the following procedure, you can enter the statements either in SQL*Plus or in the Worksheet of SQL&nbsp;Developer.</p>
<p class="subhead2"><a id="TDDDG293"></a><a id="sthref727"></a>To load data into the tables:</p>
<ol>
<li>
<p>Load <code>jobs</code> with data from the table <code>HR</code>.<code>JOBS</code>:</p>
<pre>INSERT INTO jobs (job_id, job_title, min_salary, max_salary)
SELECT job_id, job_title, min_salary, max_salary
  FROM HR.JOBS
/
</pre>
<p>Result:</p>
<pre>19 rows created.
</pre></li>
<li>
<p>Load <code>departments</code> with data from the table <code>HR</code>.<code>DEPARTMENTS</code>:</p>
<pre>INSERT INTO departments (department_id, department_name, manager_id)
SELECT department_id, department_name, manager_id
  FROM HR.DEPARTMENTS
/
</pre>
<p>Result:</p>
<pre>27 rows created.
</pre></li>
<li>
<p>Load <code>employees</code> with data from the tables <code>HR</code>.<code>EMPLOYEES</code> and <code>HR</code>.<code>JOB_HISTORY</code>, using searched <code>CASE</code> expressions and SQL functions to get <code>employees.country_code</code> and <code>employees.phone_number</code> from <code>HR.phone_number</code> and SQL functions and a scalar subquery to get <code>employees.job_start_date</code> from <code>HR</code>.<code>JOB_HISTORY</code>:</p>
<pre>INSERT INTO employees (employee_id, first_name, last_name, email_addr,
  hire_date, country_code, phone_number, job_id, job_start_date, salary,
  manager_id, department_id)
SELECT employee_id, first_name, last_name, email, hire_date,
  CASE WHEN phone_number LIKE &#39;011.%&#39;
    THEN &#39;+&#39; || SUBSTR( phone_number, INSTR( phone_number, &#39;.&#39; )+1,
      INSTR( phone_number, &#39;.&#39;, 1, 2 ) -  INSTR( phone_number, &#39;.&#39; ) - 1 )
    ELSE &#39;+1&#39;
  END country_code,
  CASE WHEN phone_number LIKE &#39;011.%&#39;
    THEN SUBSTR( phone_number, INSTR(phone_number, &#39;.&#39;, 1, 2 )+1 )
    ELSE phone_number
  END phone_number,
  job_id,
  NVL( (SELECT MAX(end_date+1)
        FROM HR.JOB_HISTORY jh
        WHERE jh.employee_id = employees.employee_id), hire_date),
  salary, manager_id, department_id  
  FROM HR.EMPLOYEES
/
</pre>
<p>Result:</p>
<pre>107 rows created.
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
The preceding <code>INSERT</code> statement fires the trigger created in <a href="#BABHBEIF">&#34;Creating the Trigger to Enforce the First Business Rule&#34;</a>.</div>
</li>
<li>
<p>Load <code>job_history</code> with data from the table <code>HR</code>.<code>JOB_HISTORY</code>:</p>
<pre>INSERT INTO job_history (employee_id, job_id, start_date, end_date,
  department_id)
SELECT employee_id, job_id, start_date, end_date, department_id
  FROM HR.JOB_HISTORY
/
</pre>
<p>Result:</p>
<pre>10 rows created.
</pre></li>
<li>
<p>Commit the changes:</p>
<pre>COMMIT;
</pre></li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="tdddg_dml.htm#BABCCIEG">&#34;About the INSERT Statement&#34;</a></p>
</li>
<li>
<p><a href="tdddg_intro.htm#BABGGFHJ">&#34;About Sample Schema HR&#34;</a></p>
</li>
<li>
<p><a href="tdddg_connecting.htm#CEGFFFAA">&#34;Using CASE Expressions in Queries&#34;</a></p>
</li>
<li>
<p><a href="tdddg_connecting.htm#CEGGJEEI">&#34;Using NULL-Related Functions in Queries&#34;</a> for information about the <code>NVL</code> function</p>
</li>
<li>
<p><a class="olink SQLRF006" href="../SQLRF/functions.htm#SQLRF006"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about the <code>SQL</code> functions</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="BABECCAG"></a>
<div id="TDDDG294" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Adding the Foreign Key Constraint</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
You must be connected to Oracle Database as user <code>app_data</code>.</div>
<p>Now that the tables <code>departments</code> and <code>employees</code> contain data, add a <a id="sthref728"></a>foreign key constraint with the following <code>ALTER</code> <code>TABLE</code> statement. You can enter the statement either in SQL*Plus or in the Worksheet of SQL&nbsp;Developer. Alternatively, you can add the constraint with the SQL&nbsp;Developer tool Add Foreign Key.</p>
<pre>ALTER TABLE departments#
ADD CONSTRAINT dept_to_emp_fk
FOREIGN KEY(manager_id) REFERENCES employees#;
</pre>
<p>If you add this foreign key constraint before <code>departments#</code> and <code>employees#</code> contain data, then you get this error when you try to load either of them with data:</p>
<pre>ORA-02291: integrity constraint (APP_DATA.JOB_HIST_TO_DEPT_FK) violated - parent key not found
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="tdddg_objects.htm#CIHHFGCB">&#34;Tutorial: Adding Constraints to Existing Tables&#34;</a></div>
</div>
<!-- class="sect2" -->
<a id="BABJFEIJ"></a>
<div id="TDDDG296" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Granting Privileges on the Schema Objects to Users</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
You must be connected to Oracle Database as user <code>app_data</code>.</div>
<p>To grant <a id="sthref729"></a>privileges to users, use the SQL statement <code>GRANT</code>. You can enter the <code>GRANT</code> statements either in SQL*Plus or in the Worksheet of SQL&nbsp;Developer.</p>
<p>Grant to <code>app_code</code> <span class="italic">only</span> the privileges that it needs to create <code>employees_pkg</code>:</p>
<pre>GRANT READ, INSERT, UPDATE, DELETE ON employees TO app_code;
GRANT READ ON departments TO app_code;
GRANT READ ON jobs TO app_code;
GRANT READ, INSERT on job_history TO app_code;
GRANT READ ON employees_sequence TO app_code;
</pre>
<p>Grant to <code>app_admin</code> <span class="italic">only</span> the privileges that it needs to create <code>admin_pkg</code>:</p>
<pre>GRANT READ, INSERT, UPDATE, DELETE ON jobs TO app_admin;
GRANT READ, INSERT, UPDATE, DELETE ON departments TO app_admin;
GRANT READ ON employees_sequence TO app_admin;
GRANT READ ON departments_sequence TO app_admin;
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF01603" href="../SQLRF/statements_9014.htm#SQLRF01603"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about the <code>GRANT</code> statement</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABFFCIF"></a>
<div id="TDDDG297" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Creating the employees_pkg Package</h2>
<p>This section shows how to create the <a id="sthref730"></a><code>employees_pkg</code> package, how its subprograms work, how to grant the execute privilege on the package to the users who need it, and how those users can invoke one of its subprograms.</p>
<p class="subhead2"><a id="TDDDG298"></a>To create the employees_pkg package:</p>
<ol>
<li>
<p>Connect to Oracle Database as user <code>app_code</code>.</p>
<p>For instructions, see either <a href="tdddg_connecting.htm#CEGDIFBC">&#34;Connecting to Oracle Database from SQL*Plus&#34;</a> or <a href="tdddg_connecting.htm#CEGFCEGG">&#34;Connecting to Oracle Database from SQL&nbsp;Developer&#34;</a>.</p>
</li>
<li>
<p>Create these synonyms:</p>
<pre>CREATE SYNONYM <span class="bold">employees</span> FOR app_data.employees;
CREATE SYNONYM <span class="bold">departments</span> FOR app_data.departments;
CREATE SYNONYM <span class="bold">jobs</span> FOR app_data.jobs;
CREATE SYNONYM <span class="bold">job_history</span> FOR app_data.job_history;
</pre>
<p>You can enter the <code>CREATE</code> <code>SYNONYM</code> statements either in SQL*Plus or in the Worksheet of SQL&nbsp;Developer. Alternatively, you can create the tables with the SQL&nbsp;Developer tool Create Synonym.</p>
</li>
<li>
<p>Create the package specification.</p>
</li>
<li>
<p>Create the package body.</p>
</li>
</ol>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#BABIABAA">Creating the Package Specification for employees_pkg</a></p>
</li>
<li>
<p><a href="#BABDFCBH">Creating the Package Body for employees_pkg</a></p>
</li>
<li>
<p><a href="#BABCFIBB">Tutorial: Showing How the employees_pkg Subprograms Work</a></p>
</li>
<li>
<p><a href="#BABICJBJ">Granting the Execute Privilege to app_user and app_user_admin</a></p>
</li>
<li>
<p><a href="#BABGJADG">Tutorial: Invoking get_job_history as app_user or app_admin_user</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="tdddg_objects.htm#CIHIDFHE">&#34;Creating Synonyms&#34;</a></p>
</li>
<li>
<p><a href="tdddg_subprograms.htm#BABHHHIC">&#34;About Packages&#34;</a></p>
</li>
</ul>
</div>
<a id="BABIABAA"></a>
<div id="TDDDG299" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Creating the Package Specification for employees_pkg</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
You must be connected to Oracle Database as user <code>app_code</code>.</div>
<p>To create the package specification for <code>employees_pkg</code>, the API for managers, use the following <code>CREATE</code> <code>PACKAGE</code> statement. You can enter the statement either in SQL*Plus or in the Worksheet of SQL&nbsp;Developer. Alternatively, you can create the package with the SQL&nbsp;Developer tool Create Package.</p>
<pre>CREATE OR REPLACE PACKAGE employees_pkg
AS
  PROCEDURE get_employees_in_dept
    ( p_deptno     IN     employees.department_id%TYPE,
      p_result_set IN OUT SYS_REFCURSOR );
 
  PROCEDURE get_job_history
    ( p_employee_id  IN     employees.department_id%TYPE,
      p_result_set   IN OUT SYS_REFCURSOR );
 
  PROCEDURE show_employee
    ( p_employee_id  IN     employees.employee_id%TYPE,
      p_result_set   IN OUT SYS_REFCURSOR );
 
  PROCEDURE update_salary
    ( p_employee_id IN employees.employee_id%TYPE,
      p_new_salary  IN employees.salary%TYPE );
 
  PROCEDURE change_job
    ( p_employee_id IN employees.employee_id%TYPE,
      p_new_job     IN employees.job_id%TYPE,
      p_new_salary  IN employees.salary%TYPE := NULL,
      p_new_dept    IN employees.department_id%TYPE := NULL );
 
END employees_pkg;
/
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#BABCBHJH">&#34;About the Application&#34;</a></p>
</li>
<li>
<p><a href="tdddg_subprograms.htm#CIHGAGJG">&#34;Creating and Managing Packages&#34;</a></p>
</li>
<li>
<p><a class="olink LNPLS01371" href="../LNPLS/create_package.htm#LNPLS01371"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for information about the <code>CREATE</code> <code>PACKAGE</code> statement</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="BABDFCBH"></a>
<div id="TDDDG300" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Creating the Package Body for employees_pkg</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
You must be connected to Oracle Database as user <code>app_code</code>.</div>
<p>To create the package body for <code>employees_pkg</code>, the API for managers, use the following <code>CREATE</code> <code>PACKAGE</code> <code>BODY</code> statement. You can enter the statement either in SQL*Plus or in the Worksheet of SQL&nbsp;Developer. Alternatively, you can create the package with the SQL&nbsp;Developer tool Create Body.</p>
<pre>CREATE OR REPLACE PACKAGE BODY employees_pkg
AS
  PROCEDURE get_employees_in_dept
    ( p_deptno     IN     employees.department_id%TYPE,
      p_result_set IN OUT SYS_REFCURSOR )
  IS
     l_cursor SYS_REFCURSOR;
  BEGIN
    OPEN p_result_set FOR
      SELECT e.employee_id,
        e.first_name || &#39; &#39; || e.last_name name,
        TO_CHAR( e.hire_date, &#39;Dy Mon ddth, yyyy&#39; ) hire_date,
        j.job_title,
        m.first_name || &#39; &#39; || m.last_name manager,
        d.department_name
      FROM employees e INNER JOIN jobs j ON (e.job_id = j.job_id)
        LEFT OUTER JOIN employees m ON (e.manager_id = m.employee_id)
        INNER JOIN departments d ON (e.department_id = d.department_id)
      WHERE e.department_id = p_deptno ;
  END get_employees_in_dept;
 
  PROCEDURE get_job_history
    ( p_employee_id  IN     employees.department_id%TYPE,
      p_result_set   IN OUT SYS_REFCURSOR )
  IS 
  BEGIN
    OPEN p_result_set FOR
      SELECT e.First_name || &#39; &#39; || e.last_name name, j.job_title,
        e.job_start_date start_date,
        TO_DATE(NULL) end_date
      FROM employees e INNER JOIN jobs j ON (e.job_id = j.job_id)
      WHERE e.employee_id = p_employee_id
      UNION ALL
      SELECT e.First_name || &#39; &#39; || e.last_name name,
        j.job_title,
        jh.start_date,
        jh.end_date
      FROM employees e INNER JOIN job_history jh
        ON (e.employee_id = jh.employee_id)
        INNER JOIN jobs j ON (jh.job_id = j.job_id)
      WHERE e.employee_id = p_employee_id
      ORDER BY start_date DESC;
  END get_job_history;
 
  PROCEDURE show_employee
    ( p_employee_id  IN     employees.employee_id%TYPE,
      p_result_set   IN OUT sys_refcursor )
  IS 
  BEGIN
    OPEN p_result_set FOR
      SELECT *
      FROM (SELECT TO_CHAR(e.employee_id) employee_id,
              e.first_name || &#39; &#39; || e.last_name name,
              e.email_addr,
              TO_CHAR(e.hire_date,&#39;dd-mon-yyyy&#39;) hire_date,
              e.country_code,
              e.phone_number,
              j.job_title,
              TO_CHAR(e.job_start_date,&#39;dd-mon-yyyy&#39;) job_start_date,
              to_char(e.salary) salary,
              m.first_name || &#39; &#39; || m.last_name manager,
              d.department_name
            FROM employees e INNER JOIN jobs j on (e.job_id = j.job_id)
              RIGHT OUTER JOIN employees m ON (m.employee_id = e.manager_id)
              INNER JOIN departments d ON (e.department_id = d.department_id)
            WHERE e.employee_id = p_employee_id)
      UNPIVOT (VALUE FOR ATTRIBUTE IN (employee_id, name, email_addr, hire_date,
        country_code, phone_number, job_title, job_start_date, salary, manager,
        department_name) );
  END show_employee;
 
  PROCEDURE update_salary
    ( p_employee_id IN employees.employee_id%type,
      p_new_salary  IN employees.salary%type )
  IS 
  BEGIN
    UPDATE employees
    SET salary = p_new_salary
    WHERE employee_id = p_employee_id;
  END update_salary;
 
  PROCEDURE change_job
    ( p_employee_id IN employees.employee_id%TYPE,
      p_new_job     IN employees.job_id%TYPE,
      p_new_salary  IN employees.salary%TYPE := NULL,
      p_new_dept    IN employees.department_id%TYPE := NULL )
  IS
  BEGIN
    INSERT INTO job_history (employee_id, start_date, end_date, job_id,
      department_id)
    SELECT employee_id, job_start_date, TRUNC(SYSDATE), job_id, department_id
      FROM employees
      WHERE employee_id = p_employee_id;
 
    UPDATE employees
    SET job_id = p_new_job,
      department_id = NVL( p_new_dept, department_id ),
      salary = NVL( p_new_salary, salary ),
      job_start_date = TRUNC(SYSDATE)
    WHERE employee_id = p_employee_id;
  END change_job;
END employees_pkg;
/
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#BABCBHJH">&#34;About the Application&#34;</a></p>
</li>
<li>
<p><a href="tdddg_subprograms.htm#CIHGAGJG">&#34;Creating and Managing Packages&#34;</a></p>
</li>
<li>
<p><a class="olink LNPLS01372" href="../LNPLS/create_package_body.htm#LNPLS01372"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for information about the <code>CREATE</code> <code>PACKAGE</code> <code>BODY</code> statement</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="BABCFIBB"></a>
<div id="TDDDG301" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Tutorial: Showing How the employees_pkg Subprograms Work</h3>
<p>Using SQL*Plus, this tutorial shows how the subprograms of the <code>employees_pkg</code> package work. The tutorial also shows how the trigger <code>employees_aiufer</code> and the <code>CHECK</code> constraint <code>job_history_date_check</code> work.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You must be connected to Oracle Database as user <code>app_code</code> from SQL*Plus.</div>
<p class="subhead2"><a id="TDDDG302"></a>To use SQL*Plus to show how the employees_pkg subprograms work:</p>
<ol>
<li>
<p>Use formatting commands to improve the readability of the output. For example:</p>
<pre>SET LINESIZE 80
SET RECSEP WRAPPED
SET RECSEPCHAR &#34;=&#34;
COLUMN NAME FORMAT A15 WORD_WRAPPED
COLUMN HIRE_DATE FORMAT A20 WORD_WRAPPED
COLUMN DEPARTMENT_NAME FORMAT A10 WORD_WRAPPED
COLUMN JOB_TITLE FORMAT A29 WORD_WRAPPED
COLUMN MANAGER FORMAT A11 WORD_WRAPPED
</pre></li>
<li>
<p>Declare a bind variable for the value of the subprogram parameter <code>p_result_set</code>:</p>
<pre>VARIABLE c REFCURSOR
</pre></li>
<li>
<p>Show the employees in department 90:</p>
<pre>EXEC <span class="bold">employees_pkg.get_employees_in_dept( 90, :c )</span>;
PRINT c
</pre>
<p>Result:</p>
<pre>EMPLOYEE_ID NAME            HIRE_DATE            JOB_TITLE                 
----------- --------------- -------------------- --------------------------
MANAGER     DEPARTMENT                                                          
----------- ----------                                                          
        100 Steven King     Tue Jun 17th, 2003   President                      
            Executive                                                         ===========================================================================
        102 Lex De Haan     Sat Jan 13th, 2001   Administration Vice President  
Steven King Executive                                                      
===========================================================================
        101 Neena Kochhar   Wed Sep 21st, 2005   Administration Vice President  
Steven King Executive                                                      
===========================================================================
</pre></li>
<li>
<p>Show the job history of employee 101:</p>
<pre>EXEC <span class="bold">employees_pkg.get_job_history( 101, :c )</span>;
PRINT c
</pre>
<p>Result:</p>
<pre>NAME            JOB_TITLE                     START_DAT END_DATE
--------------- ----------------------------- --------- ---------
Neena Kochhar   Administration Vice President 16-MAR-05          
Neena Kochhar   Accounting Manager            28-OCT-01 15-MAR-05
Neena Kochhar   Public Accountant             21-SEP-97 27-OCT-01
</pre></li>
<li>
<p>Show general information about employee 101:</p>
<pre>EXEC <span class="bold">employees_pkg.show_employee( 101, :c )</span>;
PRINT c
 
</pre>
<p>Result:</p>
<pre>ATTRIBUTE       VALUE
--------------- ----------------------------------------------
EMPLOYEE_ID     101
NAME            Neena Kochhar
EMAIL_ADDR      NKOCHHAR
HIRE_DATE       21-sep-2005
COUNTRY_CODE    +1
PHONE_NUMBER    515.123.4568
<span class="bold">JOB_TITLE       Administration Vice President</span>
JOB_START_DATE  16-mar-05
<span class="bold">SALARY          17000</span>
MANAGER         Steven King
DEPARTMENT_NAME Executive
 
11 rows selected.
</pre></li>
<li>
<p>Show the information about the job Administration Vice President:</p>
<pre>SELECT * FROM jobs WHERE job_title = &#39;Administration Vice President&#39;;
</pre>
<p>Result:</p>
<pre>JOB_ID     JOB_TITLE                     MIN_SALARY MAX_SALARY
---------- ----------------------------- ---------- ----------
AD_VP      Administration Vice President      15000      30000
</pre></li>
<li>
<p>Try to give employee 101 a new salary outside the range for her job:</p>
<pre>EXEC <span class="bold">employees_pkg.update_salary( 101, 30001 )</span>;
</pre>
<p>Result:</p>
<pre>SQL&gt; EXEC employees_pkg.update_salary( 101, 30001 );
BEGIN employees_pkg.update_salary( 101, 30001 ); END;
 
*
ERROR at line 1:
ORA-20002: Salary modification invalid
ORA-06512: at &#34;APP_DATA.EMPLOYEES_AIUFER&#34;, line 13
<span class="bold">ORA-04088: error during execution of trigger &#39;APP_DATA.EMPLOYEES_AIUFER&#39;</span>
ORA-06512: at &#34;APP_CODE.EMPLOYEES_PKG&#34;, line 77
ORA-06512: at line 1
</pre></li>
<li>
<p>Give employee 101 a new salary inside the range for her job and show general information about her again:</p>
<pre>EXEC <span class="bold">employees_pkg.update_salary( 101, 18000 )</span>;
EXEC <span class="bold">employees_pkg.show_employee( 101, :c )</span>;
PRINT c
</pre>
<p>Result:</p>
<pre>ATTRIBUTE       VALUE
--------------- ----------------------------------------------
EMPLOYEE_ID     101
NAME            Neena Kochhar
EMAIL_ADDR      NKOCHHAR
HIRE_DATE       21-sep-2005
COUNTRY_CODE    +1
PHONE_NUMBER    515.123.4568
JOB_TITLE       Administration Vice President
JOB_START_DATE  16-mar-05
<span class="bold">SALARY          18000</span>
MANAGER         Steven King
DEPARTMENT_NAME Executive
 
11 rows selected.
</pre></li>
<li>
<p>Change the job of employee 101 to her current job with a lower salary:</p>
<pre>EXEC employees_pkg.change_job( 101, &#39;AD_VP&#39;, 17500, 90 );
</pre>
<p>Result:</p>
<pre>SQL&gt; exec employees_pkg.change_job( 101, &#39;AD_VP&#39;, 17500, 90 );
BEGIN employees_pkg.change_job( 101, &#39;AD_VP&#39;, 17500, 80 ); END;
 
*
ERROR at line 1:
<span class="bold">ORA-02290: check constraint (APP_DATA.JOB_HISTORY_DATE_CHECK) violated</span>
ORA-06512: at &#34;APP_CODE.EMPLOYEES_PKG&#34;, line 101 
ORA-06512: at line 1
</pre></li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink SQPUG023" href="../SQPUG/ch_twelve001.htm#SQPUG023"><span class="italic">SQL*Plus User&#39;s Guide and Reference</span></a> for information about SQL*Plus commands</p>
</li>
<li>
<p><a href="tdddg_subprograms.htm#CIHGAGJG">&#34;Creating and Managing Packages&#34;</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="BABICJBJ"></a>
<div id="TDDDG303" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Granting the Execute Privilege to app_user and app_user_admin</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
You must be connected to Oracle Database as user <code>app_code</code>.</div>
<p>To grant the execute <a id="sthref731"></a>privilege on the package <code>employees_pkg</code> to <code>app_user</code> (typically a manager) and <code>app_admin_user</code> (an application administrator), use the following <code>GRANT</code> statements (in either order). You can enter the statements either in SQL*Plus or in the Worksheet of SQL&nbsp;Developer.</p>
<pre>GRANT EXECUTE ON employees_pkg TO app_user;
GRANT EXECUTE ON employees_pkg TO app_admin_user;
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#BABFDGAI">&#34;Schemas for the Application&#34;</a></p>
</li>
<li>
<p><a class="olink SQLRF01603" href="../SQLRF/statements_9014.htm#SQLRF01603"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about the <code>GRANT</code> statement</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="BABGJADG"></a>
<div id="TDDDG304" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Tutorial: Invoking get_job_history as app_user or app_admin_user</h3>
<p>Using SQL*Plus, this tutorial shows how to invoke the subprogram <code>app_code.employees_pkg.get_job_history</code> as the user <code>app_user</code> (typically a manager) or <code>app_admin_user</code> (an application administrator).</p>
<p class="subhead2"><a id="TDDDG305"></a>To invoke employees_pkg.get_job_history as app_user or app_admin_user:</p>
<ol>
<li>
<p>Connect to Oracle Database as user <code>app_user</code> or <code>app_admin_user</code> from SQL*Plus.</p>
<p>For instructions, see <a href="tdddg_connecting.htm#CEGDIFBC">&#34;Connecting to Oracle Database from SQL*Plus&#34;</a>.</p>
</li>
<li>
<p>Create this synonym:</p>
<pre>CREATE SYNONYM <span class="bold">employees_pkg</span> FOR app_code.employees_pkg;
</pre></li>
<li>
<p>Show the job history of employee 101:</p>
<pre>EXEC <span class="bold">employees_pkg.get_job_history( 101, :c )</span>;
PRINT c
</pre>
<p>Result:</p>
<pre>NAME            JOB_TITLE                     START_DAT END_DATE
--------------- ----------------------------- --------- ---------
Neena Kochhar   Administration Vice President 16-MAR-05 15-MAY-12
Neena Kochhar   Accounting Manager            28-OCT-01 15-MAR-05
Neena Kochhar   Public Accountant             21-SEP-97 27-OCT-01
</pre></li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABIHFDD"></a>
<div id="TDDDG306" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Creating the admin_pkg Package</h2>
<p>This section shows how to create the <a id="sthref732"></a><code>admin_pkg</code> package, how its subprograms work, how to grant the execute <a id="sthref733"></a>privilege on the package to the user who needs it, and how that user can invoke one of its subprograms.</p>
<p class="subhead2"><a id="TDDDG307"></a>To create the admin_pkg package:</p>
<ol>
<li>
<p>Connect to Oracle Database as user <code>app_admin</code>.</p>
<p>For instructions, see either <a href="tdddg_connecting.htm#CEGDIFBC">&#34;Connecting to Oracle Database from SQL*Plus&#34;</a> or <a href="tdddg_connecting.htm#CEGFCEGG">&#34;Connecting to Oracle Database from SQL&nbsp;Developer&#34;</a>.</p>
</li>
<li>
<p>Create these synonyms:</p>
<pre>CREATE SYNONYM <span class="bold">departments</span> FOR app_data.departments;
CREATE SYNONYM <span class="bold">jobs</span> FOR app_data.jobs;
CREATE SYNONYM <span class="bold">departments_sequence</span> FOR app_data.departments_sequence;
</pre>
<p>You can enter the <code>CREATE</code> <code>SYNONYM</code> statements either in SQL*Plus or in the Worksheet of SQL&nbsp;Developer. Alternatively, you can create the tables with the SQL&nbsp;Developer tool Create Synonym.</p>
</li>
<li>
<p>Create the package specification.</p>
</li>
<li>
<p>Create the package body.</p>
</li>
</ol>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#BABJJDEJ">Creating the Package Specification for admin_pkg</a></p>
</li>
<li>
<p><a href="#BABDJEHB">Creating the Package Body for admin_pkg</a></p>
</li>
<li>
<p><a href="#BABHBEJA">Tutorial: Showing How the admin_pkg Subprograms Work</a></p>
</li>
<li>
<p><a href="#BABDJHHG">Granting the Execute Privilege to app_user_admin</a></p>
</li>
<li>
<p><a href="#BABHIAIG">Tutorial: Invoking add_department as app_admin_user</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="tdddg_objects.htm#BABCFIFI">&#34;Creating and Managing Synonyms&#34;</a></p>
</li>
<li>
<p><a href="tdddg_subprograms.htm#BABHHHIC">&#34;About Packages&#34;</a></p>
</li>
</ul>
</div>
<a id="BABJJDEJ"></a>
<div id="TDDDG308" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Creating the Package Specification for admin_pkg</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
You must be connected to Oracle Database as user <code>app_admin</code>.</div>
<p>To create the package specification for <code>admin_pkg</code>, the API for application administrators, use the following <code>CREATE</code> <code>PACKAGE</code> statement. You can enter the statement either in SQL*Plus or in the Worksheet of SQL&nbsp;Developer. Alternatively, you can create the package with the SQL&nbsp;Developer tool Create Package.</p>
<pre>CREATE OR REPLACE PACKAGE admin_pkg
AS
  PROCEDURE update_job
    ( p_job_id      IN jobs.job_id%TYPE,
      p_job_title   IN jobs.job_title%TYPE := NULL,
      p_min_salary  IN jobs.min_salary%TYPE := NULL,
      p_max_salary  IN jobs.max_salary%TYPE := NULL );

  PROCEDURE add_job
    ( p_job_id      IN jobs.job_id%TYPE,
      p_job_title   IN jobs.job_title%TYPE,
      p_min_salary  IN jobs.min_salary%TYPE,
      p_max_salary  IN jobs.max_salary%TYPE );

  PROCEDURE update_department
    ( p_department_id     IN departments.department_id%TYPE,
      p_department_name   IN departments.department_name%TYPE := NULL,
      p_manager_id        IN departments.manager_id%TYPE := NULL,
      p_update_manager_id IN BOOLEAN := FALSE );

  FUNCTION add_department
    ( p_department_name   IN departments.department_name%TYPE,
      p_manager_id        IN departments.manager_id%TYPE )
    RETURN departments.department_id%TYPE;

END admin_pkg;
/
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#BABCBHJH">&#34;About the Application&#34;</a></p>
</li>
<li>
<p><a href="tdddg_subprograms.htm#CIHGAGJG">&#34;Creating and Managing Packages&#34;</a></p>
</li>
<li>
<p><a class="olink LNPLS01371" href="../LNPLS/create_package.htm#LNPLS01371"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for information about the <code>CREATE</code> <code>PACKAGE</code> statement</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="BABDJEHB"></a>
<div id="TDDDG309" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Creating the Package Body for admin_pkg</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
You must be connected to Oracle Database as user <code>app_admin</code>.</div>
<p>To create the package body for <code>admin_pkg</code>, the API for application administrators, use the following <code>CREATE</code> <code>PACKAGE</code> <code>BODY</code> statement. You can enter the statement either in SQL*Plus or in the Worksheet of SQL&nbsp;Developer. Alternatively, you can create the package with the SQL&nbsp;Developer tool Create Body.</p>
<pre>CREATE OR REPLACE PACKAGE BODY admin_pkg
AS
  PROCEDURE update_job
    ( p_job_id      IN jobs.job_id%TYPE,
      p_job_title   IN jobs.job_title%TYPE := NULL,
      p_min_salary  IN jobs.min_salary%TYPE := NULL,
      p_max_salary  IN jobs.max_salary%TYPE := NULL )
  IS
  BEGIN
    UPDATE jobs
    SET job_title  = NVL( p_job_title, job_title ),
        min_salary = NVL( p_min_salary, min_salary ),
        max_salary = NVL( p_max_salary, max_salary )
    WHERE job_id = p_job_id;
  END update_job;

  PROCEDURE add_job
    ( p_job_id      IN jobs.job_id%TYPE,
      p_job_title   IN jobs.job_title%TYPE,
      p_min_salary  IN jobs.min_salary%TYPE,
      p_max_salary  IN jobs.max_salary%TYPE )
  IS
  BEGIN
    INSERT INTO jobs ( job_id, job_title, min_salary, max_salary )
    VALUES ( p_job_id, p_job_title, p_min_salary, p_max_salary );
  END add_job;

  PROCEDURE update_department
    ( p_department_id     IN departments.department_id%TYPE,
      p_department_name   IN departments.department_name%TYPE := NULL,
      p_manager_id        IN departments.manager_id%TYPE := NULL,
      p_update_manager_id IN BOOLEAN := FALSE )
  IS
  BEGIN
    IF ( p_update_manager_id ) THEN
      UPDATE departments
      SET department_name = NVL( p_department_name, department_name ),
          manager_id = p_manager_id
      WHERE department_id = p_department_id;
    ELSE
      UPDATE departments
      SET department_name = NVL( p_department_name, department_name )
      WHERE department_id = p_department_id;
    END IF;
  END update_department;

  FUNCTION add_department
    ( p_department_name   IN departments.department_name%TYPE,
      p_manager_id        IN departments.manager_id%TYPE )
    RETURN departments.department_id%TYPE
  IS
    l_department_id departments.department_id%TYPE;
  BEGIN
    INSERT INTO departments ( department_id, department_name, manager_id )
    VALUES ( departments_sequence.NEXTVAL, p_department_name, p_manager_id );

    RETURN l_department_id;
  END add_department;

END admin_pkg;
/
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#BABCBHJH">&#34;About the Application&#34;</a></p>
</li>
<li>
<p><a href="tdddg_subprograms.htm#CIHGAGJG">&#34;Creating and Managing Packages&#34;</a></p>
</li>
<li>
<p><a class="olink LNPLS01372" href="../LNPLS/create_package_body.htm#LNPLS01372"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for information about the <code>CREATE</code> <code>PACKAGE</code> <code>BODY</code> statement</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="BABHBEJA"></a>
<div id="TDDDG310" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Tutorial: Showing How the admin_pkg Subprograms Work</h3>
<p>Using SQL*Plus, this tutorial shows how the subprograms of the <code>admin_pkg</code> package work. The tutorial also shows how the trigger <code>jobs_aufer</code> works.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You must be connected to Oracle Database as user <code>app_admin</code> from SQL*Plus.</div>
<p class="subhead2"><a id="TDDDG311"></a>To show how the admin_pkg subprograms work:</p>
<ol>
<li>
<p>Show the information about the job whose ID is <code>AD_VP</code>:</p>
<pre>SELECT * FROM jobs WHERE job_id = &#39;AD_VP&#39;;
</pre>
<p>Result:</p>
<pre>JOB_ID     JOB_TITLE                           MIN_SALARY MAX_SALARY
---------- ----------------------------------- ---------- ----------
AD_VP      Administration Vice President            15000      30000
</pre></li>
<li>
<p>Increase the maximum salary for this job and show the information about it again:</p>
<pre>EXEC <span class="bold">admin_pkg.update_job( &#39;AD_VP&#39;, p_max_salary =&gt; 31000 )</span>;
SELECT * FROM jobs WHERE job_id = &#39;AD_VP&#39;;
</pre>
<p>Result:</p>
<pre>JOB_ID     JOB_TITLE                           MIN_SALARY MAX_SALARY
---------- ----------------------------------- ---------- ----------
AD_VP      Administration Vice President            15000      <span class="bold">31000</span>
</pre></li>
<li>
<p>Show the information about the job whose ID is <code>IT_PROG</code>:</p>
<pre>SELECT * FROM jobs WHERE job_id = &#39;IT_PROG&#39;;
</pre>
<p>Result:</p>
<pre>JOB_ID     JOB_TITLE                           MIN_SALARY MAX_SALARY
---------- ----------------------------------- ---------- ----------
IT_PROG    Programmer                                4000      10000
</pre></li>
<li>
<p>Try to increase the minimum salary for this job:</p>
<pre>EXEC <span class="bold">admin_pkg.update_job( &#39;IT_PROG&#39;, p_max_salary =&gt; 4001 )</span>;
</pre>
<p>Result (from SQL*Plus):</p>
<pre>SQL&gt; EXEC admin_pkg.update_job( &#39;IT_PROG&#39;, p_max_salary =&gt; 4001 );
BEGIN admin_pkg.update_job( &#39;IT_PROG&#39;, p_max_salary =&gt; 4001 ); END;
 
*
ERROR at line 1:
ORA-20001: Salary update would violate 5 existing employee records
ORA-06512: at &#34;APP_DATA.JOBS_AUFER&#34;, line 12
<span class="bold">ORA-04088: error during execution of trigger &#39;APP_DATA.JOBS_AUFER&#39;</span>
ORA-06512: at &#34;APP_ADMIN.ADMIN_PKG&#34;, line 10
ORA-06512: at line 1
</pre></li>
<li>
<p>Add a new job and show the information about it:</p>
<pre>EXEC <span class="bold">admin_pkg.add_job( &#39;AD_CLERK&#39;, &#39;Administrative Clerk&#39;, 3000, 7000 )</span>;
SELECT * FROM jobs WHERE job_id = &#39;AD_CLERK&#39;;
</pre>
<p>Result:</p>
<pre>JOB_ID     JOB_TITLE                           MIN_SALARY MAX_SALARY
---------- ----------------------------------- ---------- ----------
AD_CLERK   Administrative Clerk                      3000       7000
</pre></li>
<li>
<p>Show the information about department 100:</p>
<pre>SELECT * FROM departments WHERE department_id = 100;
</pre>
<p>Result:</p>
<pre>DEPARTMENT_ID DEPARTMENT_NAME                MANAGER_ID
------------- ------------------------------ ----------
          100 Finance                               108
</pre></li>
<li>
<p>Change the name and manager of department 100 and show the information about it:</p>
<pre>EXEC <span class="bold">admin_pkg.update_department( 100, &#39;Financial Services&#39; )</span>;
EXEC <span class="bold">admin_pkg.update_department( 100, p_manager_id =&gt; 111,</span>
  <span class="bold">p_update_manager_id =&gt; true );</span>
SELECT * FROM departments WHERE department_id = 100;
</pre>
<p>Result:</p>
<pre>DEPARTMENT_ID DEPARTMENT_NAME                MANAGER_ID
------------- ------------------------------ ----------
          100 Financial Services                    111
</pre></li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="tdddg_subprograms.htm#CIHGAGJG">&#34;Creating and Managing Packages&#34;</a></div>
</div>
<!-- class="sect2" -->
<a id="BABDJHHG"></a>
<div id="TDDDG312" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Granting the Execute Privilege to app_user_admin</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
You must be connected to Oracle Database as user <code>app_admin</code>.</div>
<p>To grant the execute <a id="sthref734"></a>privilege on the package <code>admin_pkg</code> to <code>app_admin_user</code> (an application administrator), use the following <code>GRANT</code> statement. You can enter the statement either in SQL*Plus or in the Worksheet of SQL&nbsp;Developer.</p>
<pre>GRANT EXECUTE ON admin_pkg TO app_admin_user;
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#BABFDGAI">&#34;Schemas for the Application&#34;</a></p>
</li>
<li>
<p><a class="olink SQLRF01603" href="../SQLRF/statements_9014.htm#SQLRF01603"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about the <code>GRANT</code> statement</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="BABHIAIG"></a>
<div id="TDDDG313" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Tutorial: Invoking add_department as app_admin_user</h3>
<p>Using SQL*Plus, this tutorial shows how to invoke the function <code>app_admin.admin_pkg.add_department</code> as the user <code>app_admin_user</code> (an application administrator) and then see the information about the new department.</p>
<p class="subhead2"><a id="TDDDG314"></a>To invoke admin_pkg.add_department as app_admin_user:</p>
<ol>
<li>
<p>Connect to Oracle Database as user <code>app_admin_user</code> from SQL*Plus.</p>
<p>For instructions, see <a href="tdddg_connecting.htm#CEGDIFBC">&#34;Connecting to Oracle Database from SQL*Plus&#34;</a>.</p>
</li>
<li>
<p>Create this synonym:</p>
<pre>CREATE SYNONYM <span class="bold">admin_pkg</span> FOR app_admin.admin_pkg;
</pre></li>
<li>
<p>Declare a bind variable for the return value of the function:</p>
<pre>VARIABLE n NUMBER
</pre></li>
<li>
<p>Add a new department without a manager:</p>
<pre>EXEC :n := admin_pkg.add_department( &#39;New department&#39;, NULL );
</pre></li>
<li>
<p>Show the ID of the manager of the new department:</p>
<pre>PRINT :n
</pre>
<p>Result:</p>
<pre>         N
----------
       275
</pre></li>
</ol>
<p class="subhead2"><a id="TDDDG315"></a>To see the information about the new department:</p>
<ol>
<li>
<p>Connect to Oracle Database as user <code>app_admin</code>.</p>
</li>
<li>
<p>Show the information about the new department:</p>
<pre>SELECT * FROM departments WHERE department_name LIKE &#39;New department%&#39;;
</pre>
<p>Result:</p>
<pre>DEPARTMENT_ID DEPARTMENT_NAME                MANAGER_ID
------------- ------------------------------ ----------
          275 New department
</pre></li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment5832">
<tr>
<td class="cellalignment5839">
<table class="cellalignment5837">
<tr>
<td class="cellalignment5836"><a href="effective_apps.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5836"><a href="tdddg_deploying.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment5841">
<table class="cellalignment5835">
<tr>
<td class="cellalignment5836"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5836"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5836"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5836"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5836"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5836"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>


</body></html>