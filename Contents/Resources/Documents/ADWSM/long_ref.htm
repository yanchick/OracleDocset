<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-1462"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/DBMS_WM%20Package%3A%20Reference"></a><title>DBMS_WM Package: Reference</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="description" content="Provides usage and reference information about Oracle Workspace Manager, which enables applications to create workspaces and group different versions of table row values in different workspaces."/>
<meta name="dcterms.created" content="2014-06-30T13:47:16Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Workspace Manager Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E49170-01"/>
<meta name="dcterms.isVersionOf" content="ADWSM"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2000, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="long_prtref.htm" title="Previous" type="text/html"/>
<link rel="Next" href="long_views.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E49170-01.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">13/21</span> <!-- End Header -->
<div id="ADWSM020" class="chapter"><a id="g1035446"></a> <a id="i78440"></a>
<h1 class="chapter"><span class="secnum">4</span> DBMS_WM Package: Reference</h1>
<p>Workspace Manager includes PL/SQL subprograms (procedures and functions), in a package named <code>DBMS_WM</code>, that perform the available features of the product. This chapter provides reference information on each subprogram.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Most Workspace Manager subprograms are procedures, but a few are functions. (A function returns a value; a procedure does not return a value.)
<p>Most functions have names starting with <span class="italic">Get</span> (such as <a href="#i112529">GetConflictWorkspace</a> and <a href="#i79829">GetWorkspace</a>).</p>
</div>
<p>The subprograms are presented in alphabetical order. For a brief description of subprograms according to their logical groupings, see <a href="long_intro.htm#i1009170">Section 1.16</a>.</p>
<p>Errors (exceptions) that can occur with Workspace Manager subprograms are documented in <a href="long_msg.htm#g658329">Appendix D</a>, including the cause and suggested user action for each error.</p>
<p>Syntax notes:</p>
<ul>
<li>
<p>The <code><a id="sthref288"></a>DBMS_WM</code> public synonym for the Workspace Manager PL/SQL package must be used with the subprogram name. The <code>DBMS_WM</code> public synonym is included in the format and in any examples.</p>
</li>
<li>
<p>Subprogram calls are not case-sensitive, except for any quoted literal values. For example, the following code line excerpts are valid and semantically identical:</p>
<pre>EXECUTE DBMS_WM.CreateWorkspace (&#39;NEWWORKSPACE&#39;);
EXECUTE dbms_wm.createworkspace (&#39;NEWWORKSPACE&#39;);
EXECUTE dBms_Wm.cReatEwoRksPace (&#39;NEWWORKSPACE&#39;);
</pre></li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
When executing a DBMS_WM procedure from another procedure, the privilege checks take into account whether the procedure has definer&#39;s rights or the rights of the database user whose privileges are currently active.</div>
<div class="refentry"><a id="CACDHBFI"></a>
<div id="ADWSM99247" class="refsect1">
<h2 class="refsect1"><a id="sthref289"></a><a id="sthref290"></a><a id="sthref291"></a>Add_Topo_Geometry_Layer</h2>
<p>Adds a topology geometry layer from a version-enabled feature table to a topology.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref292"></a>Format</p>
<p class="synopsis">DBMS_WM.Add_Topo_Geometry_Layer(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;topology IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table_name IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;column_name IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tg_layer_type IN VARCHAR2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref293"></a>Parameters</p>
<div id="ADWSM99248" class="tblformal">
<p class="titleintable"><a id="sthref294"></a><a id="sthref295"></a>Table 4-1 Add_Topo_Geometry_Layer Procedure Parameters</p>
<table class="cellalignment5786" title="Add_Topo_Geometry_Layer Procedure Parameters" summary="Add_Topo_Geometry_Layer Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t4">Parameter</th>
<th class="cellalignment5787" id="r1c2-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t4" headers="r1c1-t4">
<pre>topology
</pre></td>
<td class="cellalignment5788" headers="r2c1-t4 r1c2-t4">
<p>Topology to which to add the topology geometry layer containing the topology geometries in the specified column. The topology must have been created using the SDO_TOPO.CREATE_TOPOLOGY procedure.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t4" headers="r1c1-t4">
<pre>table_name
</pre></td>
<td class="cellalignment5788" headers="r3c1-t4 r1c2-t4">
<p>Name of the topology geometry layer table containing the column specified in <code>column_name</code>.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t4" headers="r1c1-t4">
<pre>column_name
</pre></td>
<td class="cellalignment5788" headers="r4c1-t4 r1c2-t4">
<p>Name of the column (of type <code>SDO_TOPO_GEOMETRY</code>) containing the topology geometries in the topology geometry layer to be added to the topology.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r5c1-t4" headers="r1c1-t4">
<pre>tg_layer_type
</pre></td>
<td class="cellalignment5788" headers="r5c1-t4 r1c2-t4">
<p>Type of topology geometry layer: <code>POINT</code>, <code>LINE</code>, <code>CURVE</code>, or <code>POLYGON</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref296"></a>Usage Notes</p>
<p>This procedure has the same format and meaning as the SDO_TOPO.ADD_TOPO_GEOMETRY_LAYER procedure, which is documented in <a class="olink TOPOL" href="../TOPOL/toc.htm"><span class="italic">Oracle Spatial and Graph Topology Data Model and Network Data Model Graph Developer&#39;s Guide</span></a>. However, you must use DBMS_WM.Add_Topo_Geometry_Layer, and not SDO_TOPO.ADD_TOPO_GEOMETRY_LAYER, to add a topology geometry layer from a version-enabled feature table to a topology. For information about Workspace Manager support for topologies, see <a href="long_intro.htm#i1020573">Section 1.14</a>.</p>
<p>The first call to this procedure for a given topology creates the &lt;topology-name&gt;_RELATION$ table, which is described in <a class="olink TOPOL" href="../TOPOL/toc.htm"><span class="italic">Oracle Spatial and Graph Topology Data Model and Network Data Model Graph Developer&#39;s Guide</span></a>.</p>
<p>An exception is raised if <code>topology</code>, <code>table_name</code>, or <code>column_name</code> does not exist, if <code>topology</code> or <code>table_name</code> is not version-enabled, or if <code>tg_layer_type</code> is not one of the supported values.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref297"></a>Examples</p>
<p>The following example adds a topology geometry layer to the <code>CITY_DATA</code> topology. The topology geometry layer consists of polygon geometries in the <code>FEATURE</code> column of the <code>LAND_PARCELS</code> table.</p>
<pre>EXECUTE DBMS_WM.Add_Topo_Geometry_Layer(&#39;CITY_DATA&#39;, &#39;LAND_PARCELS&#39;, &#39;FEATURE&#39;, &#39;POLYGON&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="g1030204"></a>
<div id="ADWSM99249" class="refsect1">
<h2 class="refsect1"><a id="sthref298"></a><a id="sthref299"></a>AddAsParentWorkspace</h2>
<p>Adds a workspace as a parent workspace to a child workspace in a multiparent workspace environment.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref300"></a>Syntax</p>
<pre>DBMS_WM.AddAsParentWorkspace(
   workspace         IN VARCHAR2,
   parent_workspace  IN VARCHAR2,
   auto_commit       IN BOOLEAN DEFAULT TRUE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref301"></a>Parameters</p>
<div id="ADWSM99250" class="tblformal">
<p class="titleintable"><a id="sthref302"></a><a id="sthref303"></a>Table 4-2 AddAsParentWorkspace Procedure Parameters</p>
<table class="cellalignment5786" title="AddAsParentWorkspace Procedure Parameters" summary="AddAsParentWorkspace Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t5">Parameter</th>
<th class="cellalignment5787" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t5" headers="r1c1-t5">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r2c1-t5 r1c2-t5">
<p>Name of the workspace to which to add the parent workspace. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t5" headers="r1c1-t5">
<pre>parent_workspace
</pre></td>
<td class="cellalignment5788" headers="r3c1-t5 r1c2-t5">
<p>Name of the workspace to add as a parent workspace of <code>workspace</code>. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t5" headers="r1c1-t5">
<pre>auto_commit
</pre></td>
<td class="cellalignment5788" headers="r4c1-t5 r1c2-t5">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> (the default) causes the operation to be executed as an autonomous database transaction that will be committed when it finishes.</p>
<p><code>FALSE</code> causes the operation to be executed as part of the caller&#39;s open database transaction (if one exists). If there is no open database transaction, the operation is executed in a new database transaction. In either case, the caller is responsible for committing the transaction. For more information, see <a href="long_intro.htm#i1014370">Section 1.1.8</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref304"></a>Usage Notes</p>
<p>This procedure is part of the support for the multiparent workspaces feature, which is described in <a href="long_intro.htm#i1018503">Section 1.1.10</a>. If <code>workspace</code> has only one parent workspace, this procedure makes <code>workspace</code> a multiparent workspace. If <code>workspace</code> is already a multiparent workspace, this procedure adds another parent workspace to <code>workspace</code>.</p>
<p>An exception is raised if one or more of the following apply:</p>
<ul>
<li>
<p>The value of the Workspace Manager system parameter <code>ALLOW_MULTI_PARENT_WORKSPACES</code> is <code>OFF</code>.</p>
</li>
<li>
<p>The value of the Workspace Manager system parameter <code>CR_WORKSPACE_MODE</code> or <code>NONR_WORKSPACE_MODE</code> (whichever is applicable, depending on whether or not <code>workspace</code> is a continually refreshed workspace) is <code>OPTIMISTIC_LOCKING</code>.</p>
</li>
<li>
<p><code>workspace</code> or <code>parent_workspace</code> does not exist.</p>
</li>
<li>
<p><code>parent_workspace</code> is already in the ancestor hierarchy of <code>workspace</code>.</p>
</li>
<li>
<p><code>auto_commit</code> is <code>TRUE</code> and an open transaction exists in a parent or child workspace of any table that needs to be modified.</p>
</li>
<li>
<p>There is a violation of a primary key constraint, referential integrity constraint, or unique constraint in the view of the data in a version-enabled table in <code>workspace</code>.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref305"></a>Examples</p>
<p>The following example adds <code>Workspace4</code> as a parent workspace of <code>Workspace3</code>. (See the hierarchy illustration in <a href="long_intro.htm#i1018386">Figure 1-3</a> in <a href="long_intro.htm#i1018503">Section 1.1.10</a>.)</p>
<pre>-- Allow multiparent workspaces. (Required for AddAsParentWorkspace)
EXECUTE DBMS_WM.SetSystemParameter (&#39;ALLOW_MULTI_PARENT_WORKSPACES&#39;, &#39;ON&#39;);
-- Make Workspace3 multiparent by adding Workspace4 as a parent.
EXECUTE DBMS_WM.AddAsParentWorkspace (&#39;Workspace3&#39;, &#39;Workspace4&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACECHEH"></a>
<div id="ADWSM99251" class="refsect1">
<h2 class="refsect1"><a id="sthref306"></a><a id="sthref307"></a><a id="sthref308"></a>AddUserDefinedHint</h2>
<p>Adds a user-defined hint: that is, modifies (and thus overrides) a default optimizer hint, with the goal of improving the performance of SQL statements executed by the DBMS_WM package on a specified version-enabled table or all version-enabled tables.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref309"></a>Syntax</p>
<pre>DBMS_WM.AddUserDefinedHint(
   hint_id   IN NUMBER,
   table_id  IN VARCHAR2 DEFAULT NULL,
   hint      IN VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref310"></a>Parameters</p>
<div id="ADWSM99252" class="tblformal">
<p class="titleintable"><a id="sthref311"></a><a id="sthref312"></a>Table 4-3 AddUserDefinedHint Procedure Parameters</p>
<table class="cellalignment5786" title="AddUserDefinedHint Procedure Parameters" summary="AddAsParentWorkspace Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t6">Parameter</th>
<th class="cellalignment5787" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t6" headers="r1c1-t6">
<pre>hint_id
</pre></td>
<td class="cellalignment5788" headers="r2c1-t6 r1c2-t6">
<p>Numeric ID that uniquely identifies the user-defined hint. Must match an existing hint ID used by Workspace Manager for one or more SQL statements.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t6" headers="r1c1-t6">
<pre>table_id
</pre></td>
<td class="cellalignment5788" headers="r3c1-t6 r1c2-t6">
<p>Name of the table to which to apply the hint. The name is not case-sensitive. If this value is null, the hint is used with all version-enabled tables for any SQL statements that specify the hint.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t6" headers="r1c1-t6">
<pre>hint
</pre></td>
<td class="cellalignment5788" headers="r4c1-t6 r1c2-t6">
<p>The text of the optimizer hint. For an explanation of optimizer hints, see the chapter about using optimizer hints in <a class="olink TGSQL259" href="../TGSQL/tgsql_influence.htm#TGSQL259"><span class="italic">Oracle Database SQL Tuning Guide</span></a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref313"></a>Usage Notes</p>
<p>Use this procedure only if you are dissatisfied with the performance of any DBMS_WM package operations, and if you know how to use application tracing and SQL optimizer hints. For information about tracing, see the chapter about application tracing tools in <a class="olink TGSQL791" href="../TGSQL/tgsql_trace.htm#TGSQL791"><span class="italic">Oracle Database SQL Tuning Guide</span></a>.</p>
<p>In the trace output, any SQL statements using the DBMS_WM package that allow a user-defined hint include one or more comments in the following format:</p>
<pre>/* WM$SQL <span class="codeinlineitalic">(hint_id) (table_id)</span> */
</pre>
<p>If you have identified a statement that is performing poorly, and if you know an optimizer hint that will improve performance, you can use the <code>AddUserDefinedHint</code> procedure to specify the hint that should be used for the specified hint ID. You can also indicate whether to use the specified hint associated with the hint ID only for a specified table, or for all tables.</p>
<p>If you specify the <code>table_id</code> parameter, the specified hint will be used only when SQL statements that use the hint ID access the specified table, and the default Workspace Manager-supplied hint will be used with other tables. If the <code>table_id</code> parameter is null, the specified hint will be used when any DBMS_WM statement use the hint ID.</p>
<p>If the <code>hint</code> parameter specifies an object name (such as an index name), the <code>table_id</code> parameter must not be null.</p>
<p>Any table aliases can be used within user-defined hints; however, standard scoping rules still apply.</p>
<p>To remove a user-defined hint (that is, to cause the default hint associated with a hint ID to be used), use the <a href="#CACBFCBJ">RemoveUserDefinedHint</a> procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref314"></a>Examples</p>
<p>The following example specifies a full table scan on the TABLE1 table and any associated Workspace Manager infrastructure tables when a SQL statement specifies hint ID 1101 with the SCOTT.TABLE1 table.</p>
<pre>EXECUTE DBMS_WM.AddUSerDefinedHint (1101, &#39;scott.table1&#39;, &#39;full(t1)&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i86037"></a>
<div id="ADWSM99253" class="refsect1">
<h2 class="refsect1"><a id="sthref315"></a><a id="sthref316"></a><a id="sthref317"></a><a id="sthref318"></a>AlterSavepoint</h2>
<p>Modifies the description of a savepoint.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref319"></a>Syntax</p>
<pre>DBMS_WM.AlterSavepoint(
   workspace      IN VARCHAR2,
   sp_name        IN VARCHAR2,
   sp_description IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref320"></a>Parameters</p>
<div id="ADWSM99254" class="tblformal">
<p class="titleintable"><a id="sthref321"></a><a id="sthref322"></a>Table 4-4 AlterSavepoint Procedure Parameters</p>
<table class="cellalignment5786" title="AlterSavepoint Procedure Parameters" summary="AlterSavepoint Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t7">Parameter</th>
<th class="cellalignment5787" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t7" headers="r1c1-t7">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r2c1-t7 r1c2-t7">
<p>Name of the workspace in which the savepoint was created. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t7" headers="r1c1-t7">
<pre>sp_name
</pre></td>
<td class="cellalignment5788" headers="r3c1-t7 r1c2-t7">
<p>Name of the savepoint. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t7" headers="r1c1-t7">
<pre>sp_description
</pre></td>
<td class="cellalignment5788" headers="r4c1-t7 r1c2-t7">
<p>Description of the savepoint.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref323"></a>Usage Notes</p>
<p>To see the current description of the savepoint, examine the <code>DESCRIPTION</code> column value for the savepoint in the <a href="long_views.htm#i87102">ALL_WORKSPACE_SAVEPOINTS</a> metadata view, which is described in <a href="long_views.htm#i87102">Section 5.17</a>.</p>
<p>An exception is raised if the user is not the workspace owner or savepoint owner or does not have the <code>WM_ADMIN</code> system privilege.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref324"></a>Examples</p>
<p>The following example modifies the description of savepoint <code>SP1</code> in the <code>NEWWORKSPACE</code> workspace.</p>
<pre>EXECUTE DBMS_WM.AlterSavepoint (&#39;NEWWORKSPACE&#39;, &#39;SP1&#39;, &#39;First set of changes for scenario&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i118711"></a>
<div id="ADWSM99255" class="refsect1">
<h2 class="refsect1"><a id="sthref325"></a><a id="sthref326"></a><a id="sthref327"></a><a id="sthref328"></a>AlterVersionedTable</h2>
<p>Alters a version-enabled table to add valid time support, rename a constraint, or rename an index.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref329"></a>Syntax</p>
<pre>DBMS_WM.AlterVersionedTable(
   table_name         IN VARCHAR2,
   alter_option       IN VARCHAR2,
   parameter_options  IN VARCHAR2 DEFAULT NULL,
   ignore_last_error  IN BOOLEAN DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref330"></a>Parameters</p>
<div id="ADWSM99256" class="tblformal">
<p class="titleintable"><a id="sthref331"></a><a id="sthref332"></a>Table 4-5 AlterVersionedTable Procedure Parameters</p>
<table class="cellalignment5786" title="AlterVersionedTable Procedure Parameters" summary="BeginBulkLoading Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t8">Parameter</th>
<th class="cellalignment5787" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t8" headers="r1c1-t8">
<pre>table_name
</pre></td>
<td class="cellalignment5788" headers="r2c1-t8 r1c2-t8">
<p>Name of the version-enabled table to which to add valid time support. The name is not case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t8" headers="r1c1-t8">
<pre>alter_option
</pre></td>
<td class="cellalignment5788" headers="r3c1-t8 r1c2-t8">
<p>One of the following values: <code>ADD_VALID_TIME</code> to add valid time support, <code>DDL</code> to make DDL changes, <code>RENAME_CONSTRAINT</code> to rename a constraint, <code>REBUILD_INDEX</code> to rebuild an index, <code>RENAME_INDEX</code> to rename an index, or either <code>USE_SCALAR_TYPES_FOR_VALIDTIME</code> or <code>USE_WM_PERIOD_FOR_VALIDTIME</code> to specify whether views on an existing version-enabled table should use two scalar columns for the valid time range.</p>
<p>See the Usage Notes for information about these options, including when you must and can use this procedure to rename an index or a constraint.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t8" headers="r1c1-t8">
<pre>parameter_options
</pre></td>
<td class="cellalignment5788" headers="r4c1-t8 r1c2-t8">
<p>A quoted string (in the general format &#39;keyword=value, keyword2=value2, ...&#39;) containing keywords valid for the specified <code>alter_option</code> parameter value. See the Usage Notes for keywords that are valid for each <code>alter_option</code> parameter value.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r5c1-t8" headers="r1c1-t8">
<pre>ignore_last_error
</pre></td>
<td class="cellalignment5788" headers="r5c1-t8 r1c2-t8">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> ignores the last error, if any, that occurred during the previous call to the AlterVersionedTable procedure. Information about the last error is stored in the <a href="long_views.htm#i89006">USER_WM_VT_ERRORS</a> and <a href="long_views.htm#i89005">ALL_WM_VT_ERRORS</a> static data dictionary views, which are described in <a href="long_views.htm#g1008700">Chapter 5</a>. See the Usage Notes for more information.</p>
<p><code>FALSE</code> <code>(</code>the default) does not ignore the last error, if any, that occurred during the previous call to the AlterVersionedTable procedure.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref333"></a>Usage Notes</p>
<p>Use this procedure to add valid time support, rename a constraint, or rename an index for an existing version-enabled table. For more information about adding valid time support, see <a href="long_vt.htm#i1009670">Section 3.10</a>.</p>
<p>If the <code>alter_option</code> value is <code>ADD_VALID_TIME</code>, you can specify none, one, or more of the following <code>parameter_options</code> keywords:</p>
<ul>
<li>
<p><code>validFrom</code>: Starting time period to be set in the WM_VALID column of all existing rows. The default value is the current timestamp.</p>
</li>
<li>
<p><code>validTill</code>: Ending time period to be set in the WM_VALID column of all existing rows. The default value is <code>UNTIL_CHANGED</code>.</p>
</li>
<li>
<p><code>fmt</code>: Date format. The default value is <code>&#39;mmddyyyyhh24miss&#39;</code>. The options are the same as for the TO_TIMESTAMP_TZ function, which is described in <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</li>
<li>
<p><code>nlsparam</code>: Globalization support options. The options and default are the same as for the <code>nlsparam</code> argument to the TO_CHAR function for date conversion, which is described in <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</li>
</ul>
<p>If the <code>alter_option</code> value is <code>DDL</code>, the currently supported operations for this procedure are adding, merging, and splitting table partitions. You must have SYSDBA privileges, and you must specify the following <code>parameter_options</code> keywords:</p>
<ul>
<li>
<p><code>ddl</code>: The DDL (data definition language) statement to be executed. The DDL statement must refer to the fully qualified base table (for example, SCOTT.EMP_LT if SCOTT.EMP is the version-enabled table).</p>
</li>
<li>
<p><code>force</code>: A value of <code>true</code> causes Workspace Manager to attempt to execute the DDL statement, regardless of whether the operation is officially supported for this procedure; a value of <code>false</code> (the default) causes Workspace Manager not to attempt to execute the DDL statement. Thus, to execute the DDL statement, you must override the default value by explicitly specifying <code>&#39;force=true&#39;</code>; however, do not specify <code>&#39;force=true&#39;</code> unless you know what you are doing.</p>
</li>
</ul>
<p>If the <code>alter_option</code> value is <code>RENAME_CONSTRAINT</code>, you must specify both of the following <code>parameter_options</code> keywords:</p>
<ul>
<li>
<p><code>constraint_name</code>: The current name of the constraint to be renamed. The name is not case-sensitive.</p>
</li>
<li>
<p><code>new_constraint_name</code>: The new name for the constraint. The name is not case-sensitive.</p>
</li>
</ul>
<p>If the <code>alter_option</code> value is <code>RENAME_INDEX</code>, you must specify all of the following <code>parameter_options</code> keywords:</p>
<ul>
<li>
<p><code>index_owner</code>: The name of the schema that owns the index to be renamed. The schema name is not case-sensitive.</p>
</li>
<li>
<p><code>index_name</code>: The current name of the index to be renamed. The name is not case-sensitive.</p>
</li>
<li>
<p><code>new_index_name</code>: The new name for the index. The name is not case-sensitive.</p>
</li>
</ul>
<p>If the name of a constraint or index on a version-enabled table is longer than 26 characters, you must use the AlterVersionedTable procedure if you want to rename the constraint or index; you cannot use the ALTER TABLE (for a constraint) or ALTER INDEX (for an index) statement with the RENAME clause. If you use the AlterVersionedTable procedure, you do not need to include it between calls to the <a href="#i113441">BeginDDL</a> and <a href="#i98106">CommitDDL</a> procedures.</p>
<p>If the name of the constraint or index on a version-enabled table is 26 or fewer characters long, you can do either of the following to rename the constraint or index: use the AlterVersionedTable procedure, or use the ALTER TABLE (for a constraint) or ALTER INDEX (for an index) statement with the RENAME clause between calls to the <a href="#i113441">BeginDDL</a> and <a href="#i98106">CommitDDL</a> procedures (as explained in <a href="long_intro.htm#i1009427">Section 1.8</a>).</p>
<p>If the <code>alter_option</code> value is <code>REBUILD_INDEX</code>, you must specify the <code>index_owner</code> and <code>index_name</code> keywords to identify the database user that owns the index and the name of the index; and you can specify either the <code>reverse</code> or <code>noreverse</code> keyword, to specify whether or not to store the bytes of the index block in reverse order, excluding the rowid.</p>
<p>The <code>alter_option</code> values <code>USE_SCALAR_TYPES_FOR_VALIDTIME</code> and <code>USE_WM_PERIOD_FOR_VALIDTIME</code> can be used only to change the views on an existing version-enabled table to be consistent with the current setting for the Workspace Manager system parameter <code>USE_SCALAR_TYPES_FOR_VALIDTIME</code> (described in <a href="long_intro.htm#i1017681">Section 1.5</a>). For example, if you set the Workspace Manager system parameter <code>USE_SCALAR_TYPES_FOR_VALIDTIME</code> to <code>ON</code>, but an existing version-enabled table named MYTABLE has views that use a single column named WM_VALID (of type <code>WM_PERIOD</code>) to indicate the valid time range, you can change the views on MY_TABLE to use two columns of type TIMESTAMP WITH TIME ZONE by calling the AlterVersionedTable procedure and specifying the <code>alter_option</code> value <code>USE_SCALAR_TYPES_FOR_VALIDTIME</code>.</p>
<p>The <code>alter_option</code> parameter cannot be used to override the current value of the Workspace Manager system parameter <code>USE_SCALAR_TYPES_FOR_VALIDTIME</code>. If the system parameter value is <code>ON</code>, the <code>alter_option</code> parameter value must be <code>USE_SCALAR_TYPES_FOR_VALIDTIME</code>; and if the system parameter value is <code>OFF</code>, the <code>alter_option</code> parameter value must be <code>USE_WM_PERIOD_FOR_VALIDTIME</code>.</p>
<p>You can use double quotation marks for parameter values within the <code>parameter_options</code> string. For example, the following two specifications are semantically identical:</p>
<pre>&#39;index_owner=scott, index_name=my_index, new_index_name=my_new_index&#39;
&#39;index_owner=&#34;scott&#34;, index_name=&#34;my_index&#34;, new_index_name=&#34;my_new_index&#34;&#39;
</pre>
<p>If a call to the AlterVersionedTable procedure fails, you should try to fix the cause of the error. Examine the <a href="long_views.htm#i89006">USER_WM_VT_ERRORS</a> and <a href="long_views.htm#i89005">ALL_WM_VT_ERRORS</a> static data dictionary views to see the SQL statement and error message. Fix the cause of the error, and then call the AlterVersionedTable procedure again with the default <code>ignore_last_error</code> parameter value of <code>FALSE</code>. However, if the call still fails and you cannot fix the cause of the error, and if you are sure that it is safe and appropriate to ignore this error, then you can ignore the error by calling the AlterVersionedTable procedure with the <code>ignore_last_error</code> parameter value of <code>TRUE</code>. Note that you are responsible for ensuring that it is safe and appropriate to ignore the error.</p>
<p>An exception is raised if one or more of the following apply:</p>
<ul>
<li>
<p><code>table_name</code> does not exist.</p>
</li>
<li>
<p><code>alterOptions</code> is not <code>ADD_VALID_TIME</code>.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref334"></a>Examples</p>
<p>The following example creates a table named <code>MY_TABLE</code>, version-enables it without valid time support, and then adds valid time support. After valid time support is added, the <code>WM_VALID</code> column contains the default valid time period.</p>
<pre>CREATE TABLE my_table (id NUMBER PRIMARY KEY);
EXECUTE DBMS_WM.EnableVersioning (&#39;my_table&#39;);
INSERT INTO my_table VALUES (1);
SELECT * FROM my_table;

        ID
----------
         1

EXECUTE DBMS_WM.AlterVersionedTable(&#39;my_table&#39;, &#39;ADD_VALID_TIME&#39;);
SELECT * FROM my_table;

        ID
----------
WM_VALID(VALIDFROM, VALIDTILL)
--------------------------------------------------------------------------------
         1
WM_PERIOD(&#39;09-JUN-2003 10:04:13 -04:00&#39;, NULL)
</pre>
<p>The following example creates a table named <code>SCOTT.MY_TABLE</code>, creates an index named <code>MY_INDEX</code> on the <code>VALUE</code> column in that table, version-enables the table, and then renames the index to <code>MY_NEW_INDEX</code>.</p>
<pre>CREATE TABLE scott.my_table (id NUMBER PRIMARY KEY, value INTEGER);
CREATE INDEX scott.my_index on scott.my_table(value);
EXECUTE DBMS_WM.EnableVersioning (&#39;scott.my_table&#39;);
EXECUTE DBMS_WM.AlterVersionedTable (&#39;scott.my_table&#39;, &#39;RENAME_INDEX&#39;,
  &#39;index_owner=scott, index_name=my_index, new_index_name=my_new_index&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i86036"></a>
<div id="ADWSM99257" class="refsect1">
<h2 class="refsect1"><a id="sthref335"></a><a id="sthref336"></a><a id="sthref337"></a><a id="sthref338"></a>AlterWorkspace</h2>
<p>Modifies the description of a workspace.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref339"></a>Syntax</p>
<pre>DBMS_WM.AlterWorkspace(
   workspace              IN VARCHAR2,
   workspace_description  IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref340"></a>Parameters</p>
<div id="ADWSM99258" class="tblformal">
<p class="titleintable"><a id="sthref341"></a><a id="sthref342"></a>Table 4-6 AlterWorkspace Procedure Parameters</p>
<table class="cellalignment5786" title="AlterWorkspace Procedure Parameters" summary="AlterWorkspace Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t9">Parameter</th>
<th class="cellalignment5787" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t9" headers="r1c1-t9">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r2c1-t9 r1c2-t9">
<p>Name of the workspace. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t9" headers="r1c1-t9">
<pre>workspace_description
</pre></td>
<td class="cellalignment5788" headers="r3c1-t9 r1c2-t9">
<p>Description of the workspace.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref343"></a>Usage Notes</p>
<p>To see the current description of the workspace, examine the <code>DESCRIPTION</code> column value for the savepoint in the <a href="long_views.htm#i87120">ALL_WORKSPACES</a> metadata view, which is described in <a href="long_views.htm#i87120">Section 5.18</a>.</p>
<p>An exception is raised if the user is not the workspace owner or does not have the <code>WM_ADMIN</code> system privilege.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref344"></a>Examples</p>
<p>The following example modifies the description of the <code>NEWWORKSPACE</code> workspace.</p>
<pre>EXECUTE DBMS_WM.AlterWorkspace (&#39;NEWWORKSPACE&#39;, &#39;Testing proposed scenario B&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i117894"></a>
<div id="ADWSM99259" class="refsect1">
<h2 class="refsect1"><a id="sthref345"></a><a id="sthref346"></a><a id="sthref347"></a>BeginBulkLoading</h2>
<p>Starts the bulk loading process for a version-enabled table.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref348"></a>Syntax</p>
<pre>DBMS_WM.BeginBulkLoading(
   table_name            IN VARCHAR2,
   workspace             IN VARCHAR2,
   version               IN INTEGER DEFAULT NULL,
   check_for_duplicates  IN BOOLEAN DEFAULT TRUE,
   ignore_last_error     IN BOOLEAN DEFAULT FALSE,
   single_transaction    IN BOOLEAN DEFAULT FALSE,
   savepoint_name        IN DEFAULT LATEST);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref349"></a>Parameters</p>
<div id="ADWSM99260" class="tblformal">
<p class="titleintable"><a id="sthref350"></a><a id="sthref351"></a>Table 4-7 BeginBulkLoading Procedure Parameters</p>
<table class="cellalignment5786" title="BeginBulkLoading Procedure Parameters" summary="BeginBulkLoading Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t10">Parameter</th>
<th class="cellalignment5787" id="r1c2-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t10" headers="r1c1-t10">
<pre>table_name
</pre></td>
<td class="cellalignment5788" headers="r2c1-t10 r1c2-t10">
<p>Name of the version-enabled table into which data will be bulk loaded. The name is not case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t10" headers="r1c1-t10">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r3c1-t10 r1c2-t10">
<p>Name of the workspace in which bulk loading will be performed. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t10" headers="r1c1-t10">
<pre>version
</pre></td>
<td class="cellalignment5788" headers="r4c1-t10 r1c2-t10">
<p>(Ignored for the current release. Before Release 12.1, this was the version number returned by the <a href="#i114056">GetBulkLoadVersion</a> function.)</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r5c1-t10" headers="r1c1-t10">
<pre>check_for_duplicates
</pre></td>
<td class="cellalignment5788" headers="r5c1-t10 r1c2-t10">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> (the default) checks for rows in the data to be bulk loaded that have the same values in primary key columns. For any duplicate records, only the record with the lowest ROWID value is kept in the table, and the rest are moved to the discards table specified in the call to the <a href="#i114725">CommitBulkLoading</a> procedure. See the Usage Notes for more information about this parameter.</p>
<p><code>FALSE</code> does not check if any rows in the data to be bulk loaded have the same values in primary key columns.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r6c1-t10" headers="r1c1-t10">
<pre>ignore_last_error
</pre></td>
<td class="cellalignment5788" headers="r6c1-t10 r1c2-t10">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> ignores the last error, if any, that occurred during the previous call to the BeginBulkLoading procedure. Information about the last error is stored in the <a href="long_views.htm#i89006">USER_WM_VT_ERRORS</a> and <a href="long_views.htm#i89005">ALL_WM_VT_ERRORS</a> static data dictionary views, which are described in <a href="long_views.htm#g1008700">Chapter 5</a>. See the Usage Notes for more information.</p>
<p><code>FALSE</code> <code>(</code>the default) does not ignore the last error, if any, that occurred during the previous call to the BeginBulkLoading procedure.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r7c1-t10" headers="r1c1-t10">
<pre>single_transaction
</pre></td>
<td class="cellalignment5788" headers="r7c1-t10 r1c2-t10">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> causes Workspace Manager not to perform an internal commit operation after each of several steps that it will perform after you call the <a href="#i114725">CommitBulkLoading</a> procedure, but instead to perform a commit only after it has performed all the necessary steps. <code>TRUE</code> also allows queries to be made on the version-enabled table.</p>
<p><code>FALSE</code> (the default) causes Workspace Manager to perform an internal commit operation after each of several steps that it will perform after you call the <a href="#i114725">CommitBulkLoading</a> procedure, and it also disallows queries to be made on the table until a <a href="#i114725">CommitBulkLoading</a> or <a href="#i114047">RollbackBulkLoading</a> operation is complete.</p>
<p>See the Usage Notes for more information about this parameter.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r8c1-t10" headers="r1c1-t10">
<pre>savepoint_name
</pre></td>
<td class="cellalignment5788" headers="r8c1-t10 r1c2-t10">
<p>The version in the workspace in which data will be bulk loaded. If specified, must be one of the following: <code>LATEST</code> or <code>ROOT_VERSION</code>.</p>
<p><code>LATEST</code> (the default) is the current version in the workspace.</p>
<p><code>ROOT_VERSION</code> is the root version (version number 0, which is in the <code>LIVE</code> workspace). The root version is the ancestor of all other versions, so data in the root version is visible from all other workspaces (unless non-<code>LIVE</code> workspaces have updated the data). You can specify <code>ROOT_VERSION</code> only if <code>workspace</code> is <code>LIVE</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref352"></a>Usage Notes</p>
<p>Before you can begin bulk loading data into a version-enabled table, you must call the <a href="#i117894">BeginBulkLoading</a> procedure. You must end the bulk loading session by calling either the <a href="#i114725">CommitBulkLoading</a> procedure (to commit changes made when the data was loaded) or the <a href="#i114047">RollbackBulkLoading</a> procedure (to roll back changes made when the data was loaded). For more information about bulk loading with Workspace Manager, see <a href="long_intro.htm#i1019718">Section 1.7</a>.</p>
<p>If <code>single_transaction</code> is <code>FALSE</code> (the default), the BeginBulkLoading procedure drops some internal Workspace Manager views on the table, to prevent DML operations and certain Workspace Manager operations on the table; however, this also prevents any queries from being made using the specified version-enabled table. Regardless of the <code>single_transaction</code> parameter value, and especially if it is <code>FALSE</code>, you should complete the bulk loading as quickly as possible and at a time when applications and users will not need to access the table. The value of the <code>single_transaction</code> parameter must be the same for both the <a href="#i117894">BeginBulkLoading</a> and <a href="#i114725">CommitBulkLoading</a> procedures for a bulk loading session with a specified table.</p>
<p>A <code>TRUE</code> value for the <code>check_for_duplicates</code> parameter does not cause any existing data in the version-enabled table to be checked. If an existing row in the version in which data is being bulk loaded (which could be the latest version of a workspace or the root version) has the same primary key values as a row in the data to be bulk loaded, the behavior depends on the history option setting for the table: if <code>VIEW_WO_OVERWRITE</code> is set, the newly loaded row is chained to the existing row that has the same primary key values; if <code>VIEW_WO_OVERWRITE</code> is not set, the new data is not bulk loaded but is instead moved to the discards table.</p>
<p>If a call to the BeginBulkLoading procedure fails, you should try to fix the cause of the error. Examine the <a href="long_views.htm#i89006">USER_WM_VT_ERRORS</a> and <a href="long_views.htm#i89005">ALL_WM_VT_ERRORS</a> static data dictionary views to see the SQL statement and error message. Fix the cause of the error, and then call the BeginBulkLoading procedure again with the default <code>ignore_last_error</code> parameter value of <code>FALSE</code>. However, if the call still fails and you cannot fix the cause of the error, and if you are sure that it is safe and appropriate to ignore this error, then you have the option to ignore the error by calling the BeginBulkLoading procedure with the <code>ignore_last_error</code> parameter value of <code>TRUE</code>. Note that you are responsible for ensuring that it is safe and appropriate to ignore the error.</p>
<p>If performance is an issue, carefully consider whether or not you need to check for duplicate records, because a <code>check_for_duplicates</code> value of <code>TRUE</code> (the default) causes Workspace Manager to perform additional internal processing.</p>
<p>An exception is raised if one or more of the following apply:</p>
<ul>
<li>
<p><code>table_name</code> does not exist.</p>
</li>
<li>
<p><code>table_name</code> is not version-enabled.</p>
</li>
<li>
<p>The user does not own the table or does not have the <code>WM_ADMIN</code> system privilege.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref353"></a>Examples</p>
<p>The following example starts the bulk load operation into the <code>EMP</code> table in the <code>W1</code> workspace.</p>
<pre>EXECVUTE DBMS_WM.BeginBulkLoading (&#39;EMP&#39;, &#39;W1&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i113441"></a>
<div id="ADWSM99261" class="refsect1">
<h2 class="refsect1"><a id="sthref354"></a><a id="sthref355"></a>BeginDDL</h2>
<p>Starts a DDL (data definition language) session for a specified table.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref356"></a>Syntax</p>
<pre>DBMS_WM.BeginDDL(
   table_name  IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref357"></a>Parameters</p>
<div id="ADWSM99262" class="tblformal">
<p class="titleintable"><a id="sthref358"></a><a id="sthref359"></a>Table 4-8 BeginDDL Procedure Parameters</p>
<table class="cellalignment5786" title="BeginDDL Procedure Parameters" summary="BeginDDL Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t11">Parameter</th>
<th class="cellalignment5787" id="r1c2-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t11" headers="r1c1-t11">
<pre>table_name
</pre></td>
<td class="cellalignment5788" headers="r2c1-t11 r1c2-t11">
<p>Name of the version-enabled table. The name is not case-sensitive.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref360"></a>Usage Notes</p>
<p>This procedure starts a DDL session, and it creates a special table whose name is the same as <code>table_name</code> but with <span class="italic">_LTS</span> added to the table name. After calling this procedure, you can perform one or more DDL operations on the table or any indexes or triggers that are based on the table, and then call either the <a href="#i98106">CommitDDL</a> or <a href="#i98109">RollbackDDL</a> procedure.</p>
<p>In addition to creating the special <span class="italic">&lt;table-name&gt;_LTS</span> table, the procedure creates other objects:</p>
<ul>
<li>
<p>The <span class="italic">&lt;table-name&gt;_LTS</span> table has the same triggers, columns, and indexes as the <span class="italic">&lt;table-name&gt;</span> table.</p>
</li>
<li>
<p>For each parent table with which the <span class="italic">&lt;table-name&gt;</span> table has a referential integrity constraint, the same constraint is defined for the <span class="italic">&lt;table-name&gt;_LTS</span> table.</p>
</li>
<li>
<p>Triggers, columns, and referential integrity constraints on the <span class="italic">&lt;table-name&gt;_LTS</span> table have the same names as the corresponding ones on the <span class="italic">&lt;table-name&gt;</span> table.</p>
</li>
<li>
<p>For each index on the <span class="italic">&lt;table-name&gt;</span> table, the corresponding index on the <span class="italic">&lt;table-name&gt;_LTS</span> table has a name in the form <span class="italic">&lt;index-name&gt;_LTS</span>.</p>
</li>
<li>
<p>The primary key constraint on the <span class="italic">&lt;table-name&gt;_LTS</span> table has a name in the form <span class="italic">&lt;primary-key&gt;_LTS</span>.</p>
</li>
<li>
<p>All unique constraints on the <span class="italic">&lt;table-name&gt;_LTS</span> table have a name in the form <span class="italic">&lt;unique-constraint-name&gt;_LTS</span>.</p>
</li>
</ul>
<p>For detailed information about performing DDL operations related to version-enabled tables, see <a href="long_intro.htm#i1009427">Section 1.8</a>; and for DDL operations on version-enabled tables in an Oracle replication environment, see also <a href="long_repl.htm#i634767">Section C.3</a>.</p>
<p>An exception is raised if one or more of the following apply:</p>
<ul>
<li>
<p><code>table_name</code> does not exist or is not version-enabled.</p>
</li>
<li>
<p><code>table_name</code> has a domain index defined on it, and the user has not been directly granted the <code>CREATE TABLE</code> and <code>CREATE SEQUENCE</code> privileges.</p>
</li>
<li>
<p>An open DDL session exists for <code>table_name</code>. (That is, the BeginDDL procedure has already been called specifying this table, and the <a href="#i98106">CommitDDL</a> or <a href="#i98109">RollbackDDL</a> procedure has not been called specifying this table.)</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref361"></a>Examples</p>
<p>The following example begins a DDL session, adds a column named <code>COMMENTS</code> to the <code>COLA_MARKETING_BUDGET</code> table by using the special table named <code>COLA_MARKETING_BUDGET_LTS</code>, and ends the DDL session by committing the change.</p>
<pre>EXECUTE DBMS_WM.BeginDDL(&#39;COLA_MARKETING_BUDGET&#39;);
ALTER TABLE cola_marketing_budget_lts ADD (comments VARCHAR2(100));
EXECUTE DBMS_WM.CommitDDL(&#39;COLA_MARKETING_BUDGET&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i87363"></a>
<div id="ADWSM99263" class="refsect1">
<h2 class="refsect1"><a id="sthref362"></a><a id="sthref363"></a><a id="sthref364"></a><a id="sthref365"></a>BeginResolve</h2>
<p>Starts a conflict resolution session.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref366"></a>Syntax</p>
<pre>DBMS_WM.BeginResolve(
   workspace  IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref367"></a>Parameters</p>
<div id="ADWSM99264" class="tblformal">
<p class="titleintable"><a id="sthref368"></a><a id="sthref369"></a>Table 4-9 BeginResolve Procedure Parameters</p>
<table class="cellalignment5786" title="BeginResolve Procedure Parameters" summary="BeginDDL Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t12">Parameter</th>
<th class="cellalignment5787" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t12" headers="r1c1-t12">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r2c1-t12 r1c2-t12">
<p>Name of the workspace. The name is case-sensitive.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref370"></a>Usage Notes</p>
<p>This procedure starts a conflict resolution session. While this procedure is executing, the workspace is frozen in <code>1WRITER</code> mode, as explained in <a href="long_intro.htm#i1006773">Section 1.1.5</a>.</p>
<p>After calling this procedure, you can execute the <a href="#i83186">ResolveConflicts</a> procedure as needed for various tables that have conflicts, and then call either the <a href="#i90948">CommitResolve</a> or <a href="#i87840">RollbackResolve</a> procedure. For more information about conflict resolution, see <a href="long_intro.htm#i1004610">Section 1.1.4</a>.</p>
<p>An exception is raised if one or more of the following apply:</p>
<ul>
<li>
<p>There are one or more open database transactions in <code>workspace</code>.</p>
</li>
<li>
<p>The user executing the <a href="#i87363">BeginResolve</a> procedure does not have the privilege to access <code>workspace</code> and its parent workspace.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref371"></a>Examples</p>
<p>The following example starts a conflict resolution session in <code>Workspace1</code>.</p>
<pre>EXECUTE  DBMS_WM.BeginResolve (&#39;Workspace1&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i109527"></a>
<div id="ADWSM99265" class="refsect1">
<h2 class="refsect1"><a id="sthref372"></a><a id="sthref373"></a><a id="sthref374"></a><a id="sthref375"></a><a id="sthref376"></a>ChangeWorkspaceType</h2>
<p>Changes a workspace from not continually refreshed to continually refreshed. (<span class="italic">Continually refreshed workspaces</span> are explained in <a href="long_intro.htm#i1018583">Section 1.1.9</a>.)</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref377"></a>Syntax</p>
<pre>DBMS_WM.ChangeWorkspaceType(
   workspace       IN VARCHAR2,
   workspace_type  IN VARCHAR2 DEFAULT DBMS_WM.CR_WORKSPACE_TYPE,
   auto_commit     IN BOOLEAN DEFAULT TRUE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref378"></a>Parameters</p>
<div id="ADWSM99266" class="tblformal">
<p class="titleintable"><a id="sthref379"></a><a id="sthref380"></a>Table 4-10 ChangeWorkspaceType Procedure Parameters</p>
<table class="cellalignment5786" title="ChangeWorkspaceType Procedure Parameters" summary="ChangeWorkspaceType Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t13">Parameter</th>
<th class="cellalignment5787" id="r1c2-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t13" headers="r1c1-t13">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r2c1-t13 r1c2-t13">
<p>Name of the workspace. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t13" headers="r1c1-t13">
<pre>workspace_type
</pre></td>
<td class="cellalignment5788" headers="r3c1-t13 r1c2-t13">
<p>Must be <code>DBMS_WM.CR_WORKSPACE_TYPE</code> (the default), for continually refreshed.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t13" headers="r1c1-t13">
<pre>auto_commit
</pre></td>
<td class="cellalignment5788" headers="r4c1-t13 r1c2-t13">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> (the default) causes the operation to be executed as an autonomous database transaction that will be committed when it finishes.</p>
<p><code>FALSE</code> causes the operation to be executed as part of the caller&#39;s open database transaction (if one exists). If there is no open database transaction, the operation is executed in a new database transaction. In either case, the caller is responsible for committing the transaction. For more information, see <a href="long_intro.htm#i1014370">Section 1.1.8</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref381"></a>Usage Notes</p>
<p>For this release, you can only change a workspace that is not continually refreshed to continually refreshed; you cannot change a continually refreshed workspace to not continually refreshed.</p>
<p>An exception is raised if one or more of the following occur:</p>
<ul>
<li>
<p>The user is not the owner of <code>workspace</code>, and the user does not have the <code>WM_ADMIN</code> system privilege.</p>
</li>
<li>
<p><code>workspace_type</code> is not valid.</p>
</li>
<li>
<p><code>auto_commit</code> is <code>TRUE</code> and an open transaction exists in a parent or child workspace of any table that needs to be modified.</p>
</li>
<li>
<p>The workspace type cannot be changed. For example, the change cannot be made if the Workspace Manager system parameter <code>CR_WORKSPACE_MODE</code> is set to <code>PESSIMISTIC_LOCKING</code>, but the <code>NONCR_WORKSPACE_MODE</code> parameter is set to <code>OPTIMISTIC_LOCKING</code> and there is versioned data in any continually refreshed workspace.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref382"></a>Examples</p>
<p>The following example changes the <code>NEWWORKSPACE</code> workspace type from not continually refreshed to continually refreshed.</p>
<pre>EXECUTE DBMS_WM.ChangeWorkspaceType (&#39;NEWWORKSPACE&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i114725"></a>
<div id="ADWSM99267" class="refsect1">
<h2 class="refsect1"><a id="sthref383"></a><a id="sthref384"></a><a id="sthref385"></a>CommitBulkLoading</h2>
<p>Ends the bulk loading process for a version-enabled table by committing the bulk load changes.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref386"></a>Syntax</p>
<pre>DBMS_WM.CommitBulkLoading(
   table_name            IN VARCHAR2,
   discards_table        IN VARCHAR2,
   check_for_duplicates  IN BOOLEAN DEFAULT TRUE,
   enforceUCFlag         IN BOOLEAN DEFAULT TRUE,
   enforceRICFlag        IN BOOLEAN DEFAULT TRUE,
   ignore_last_error     IN BOOLEAN DEFAULT FALSE,
   single_transaction    IN BOOLEAN DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref387"></a>Parameters</p>
<div id="ADWSM99268" class="tblformal">
<p class="titleintable"><a id="sthref388"></a><a id="sthref389"></a>Table 4-11 CommitBulkLoading Procedure Parameters</p>
<table class="cellalignment5786" title="CommitBulkLoading Procedure Parameters" summary="ChangeWorkspaceType Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t14">Parameter</th>
<th class="cellalignment5787" id="r1c2-t14">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t14" headers="r1c1-t14">
<pre>table_name
</pre></td>
<td class="cellalignment5788" headers="r2c1-t14 r1c2-t14">
<p>Name of the version-enabled table into which data has been bulk loaded. The name is not case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t14" headers="r1c1-t14">
<pre>discards_table
</pre></td>
<td class="cellalignment5788" headers="r3c1-t14 r1c2-t14">
<p>Name of the table into which discard records are inserted. The name is not case-sensitive. If the table does not already exist, it is created.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t14" headers="r1c1-t14">
<pre>check_for_duplicates
</pre></td>
<td class="cellalignment5788" headers="r4c1-t14 r1c2-t14">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>). Note: Effective with Release 12.1, this parameter is ignored; the value from the call to the <a href="#i117894">BeginBulkLoading</a> procedure is used.</p>
<p><code>TRUE</code> (the default) checks for rows in the data to be bulk loaded that have the same values in primary key columns. For any duplicate records, only the record with the lowest ROWID value is kept in the table, and the rest are moved to the discards table. See the Usage Notes for more information about this parameter.</p>
<p><code>FALSE</code> does not check if any rows in the data to be bulk loaded have the same values in primary key columns.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r5c1-t14" headers="r1c1-t14">
<pre>enforceUCFlag
</pre></td>
<td class="cellalignment5788" headers="r5c1-t14 r1c2-t14">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> (the default) enforces any unique constraints defined on <code>to_table</code>, ensuring that the bulk load operation does not violate any such constraints.</p>
<p><code>FALSE</code> does not enforce any unique constraints defined on <code>to_table</code> for the bulk load operation.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r6c1-t14" headers="r1c1-t14">
<pre>enforceRICFlag
</pre></td>
<td class="cellalignment5788" headers="r6c1-t14 r1c2-t14">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> (the default) enforces any referential integrity constraints defined on <code>to_table</code>, ensuring that the bulk load operation does not violate any such constraints.</p>
<p><code>FALSE</code> does not enforce any referential integrity constraints defined on <code>to_table</code> for the bulk load operation.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r7c1-t14" headers="r1c1-t14">
<pre>ignore_last_error
</pre></td>
<td class="cellalignment5788" headers="r7c1-t14 r1c2-t14">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> ignores the last error, if any, that occurred during the previous call to the CommitBulkLoading procedure. Information about the last error is stored in the <a href="long_views.htm#i89006">USER_WM_VT_ERRORS</a> and <a href="long_views.htm#i89005">ALL_WM_VT_ERRORS</a> static data dictionary views, which are described in <a href="long_views.htm#g1008700">Chapter 5</a>. See the Usage Notes for more information.</p>
<p><code>FALSE</code> <code>(</code>the default) does not ignore the last error, if any, that occurred during the previous call to the CommitBulkLoading procedure.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r8c1-t14" headers="r1c1-t14">
<pre>single_transaction
</pre></td>
<td class="cellalignment5788" headers="r8c1-t14 r1c2-t14">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>). Note: Effective with Release 12.1, this parameter is ignored; the value from the call to the <a href="#i117894">BeginBulkLoading</a> procedure is used.</p>
<p><code>TRUE</code> causes Workspace Manager not to perform an internal commit operation after each of several steps that it performs after you call the <a href="#i114725">CommitBulkLoading</a> procedure, but instead to perform a commit only after it has performed all the necessary steps.</p>
<p><code>FALSE</code> (the default) causes Workspace Manager to perform an internal commit operation after each of several steps that it performs after you call the <a href="#i114725">CommitBulkLoading</a> procedure.</p>
<p>The value of this parameter must be the same as when you called the <a href="#i117894">BeginBulkLoading</a> procedure specifying the table in <code>table_name</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref390"></a>Usage Notes</p>
<p>For information about the requirements for bulk loading data into version-enabled tables, see <a href="long_intro.htm#i1019718">Section 1.7</a>.</p>
<p>This procedure generates versioning metadata for newly loaded data and synchronizes the newly loaded data with the existing versioned data in the table. It can also enforce unique and referential constraints on the newly loaded data. It re-creates all the views that were dropped by the <a href="#i117894">BeginBulkLoading</a> procedure.</p>
<p>A <code>TRUE</code> value for the <code>check_for_duplicates</code> parameter does not cause any existing data in the version-enabled table to be checked. If an existing row in the version in which data is being bulk loaded (which could be the latest version of a workspace or the root version) has the same primary key values as a row in the data to be bulk loaded, the behavior depends on the history option setting for the table: if <code>VIEW_WO_OVERWRITE</code> is set, the newly loaded row is chained to the existing row that has the same primary key values; if <code>VIEW_WO_OVERWRITE</code> is not set, the new data is not bulk loaded but is instead moved to the discards table.</p>
<p>If a call to the CommitBulkLoading procedure fails, you should try to fix the cause of the error. Examine the <a href="long_views.htm#i89006">USER_WM_VT_ERRORS</a> and <a href="long_views.htm#i89005">ALL_WM_VT_ERRORS</a> static data dictionary views to see the SQL statement and error message. Fix the cause of the error, and then call the CommitBulkLoading procedure again with the default <code>ignore_last_error</code> parameter value of <code>FALSE</code>. However, if the call still fails and you cannot fix the cause of the error, and if you are sure that it is safe and appropriate to ignore this error, then you have the option to ignore the error by calling the CommitBulkLoading procedure with the <code>ignore_last_error</code> parameter value of <code>TRUE</code>. Note that you are responsible for ensuring that it is safe and appropriate to ignore the error.</p>
<p>Note the following performance considerations:</p>
<ul>
<li>
<p>A <code>TRUE</code> value for <code>check_for_duplicates</code> requires additional processing time, and a <code>TRUE</code> value for <code>enforceUCFlag</code> or <code>enforceRICFlag</code> may require additional processing time.</p>
</li>
<li>
<p>If performance is an issue, carefully consider whether or not you need to check for duplicate records.</p>
</li>
<li>
<p>If the table does not have unique or referential constraints, setting the <code>enforceUCFlag</code> or <code>enforceRICFlag</code> parameter to <code>TRUE</code> does not have a significant effect on performance.</p>
</li>
</ul>
<p>An exception is raised if one or more of the following apply:</p>
<ul>
<li>
<p><code>table_name</code> does not exist.</p>
</li>
<li>
<p><code>table_name</code> is not version-enabled.</p>
</li>
<li>
<p>The <a href="#i117894">BeginBulkLoading</a> procedure has not been called on the table.</p>
</li>
<li>
<p>The user does not own the table or does not have the <code>WM_ADMIN</code> system privilege.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref391"></a>Examples</p>
<p>The following example commits changes made to the <code>EMP</code> table during a bulk load operation, and specifies <code>DISCARDS</code> as the table to hold discard records.</p>
<pre>EXECUTE DBMS_WM.CommitBulkLoading (&#39;EMP&#39;, &#39;DISCARDS&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i98106"></a>
<div id="ADWSM99269" class="refsect1">
<h2 class="refsect1"><a id="sthref392"></a><a id="sthref393"></a>CommitDDL</h2>
<p>Commits DDL (data definition language) changes made during a DDL session for a specified table, and ends the DDL session.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref394"></a>Syntax</p>
<pre>DBMS_WM.CommitDDL(
   table_name                  IN VARCHAR2,
   ignore_last_error           IN BOOLEAN DEFAULT FALSE,
   enforce_unique_constraints  IN BOOLEAN DEFAULT FALSE,
   enforce_RICs                IN BOOLEAN DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref395"></a>Parameters</p>
<div id="ADWSM99270" class="tblformal">
<p class="titleintable"><a id="sthref396"></a><a id="sthref397"></a>Table 4-12 CommitDDL Procedure Parameters</p>
<table class="cellalignment5786" title="CommitDDL Procedure Parameters" summary="CommitDDL Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t15">Parameter</th>
<th class="cellalignment5787" id="r1c2-t15">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t15" headers="r1c1-t15">
<pre>table_name
</pre></td>
<td class="cellalignment5788" headers="r2c1-t15 r1c2-t15">
<p>Name of the version-enabled table. The name is not case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t15" headers="r1c1-t15">
<pre>ignore_last_error
</pre></td>
<td class="cellalignment5788" headers="r3c1-t15 r1c2-t15">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> ignores the last error, if any, that occurred during the previous call to the CommitDDL procedure. Information about the last error is stored in the <a href="long_views.htm#i89006">USER_WM_VT_ERRORS</a> and <a href="long_views.htm#i89005">ALL_WM_VT_ERRORS</a> static data dictionary views, which are described in <a href="long_views.htm#g1008700">Chapter 5</a>. See the Usage Notes for more information.</p>
<p><code>FALSE</code> <code>(</code>the default) does not ignore the last error, if any, that occurred during the previous call to the CommitDDL procedure.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t15" headers="r1c1-t15">
<pre>enforce_unique_constraints
</pre></td>
<td class="cellalignment5788" headers="r4c1-t15 r1c2-t15">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> enforces any unique constraints defined on <code>table_name</code> on existing versioned data in the table. This ensures that the DDL changes do not cause any such constraints to be violated, but it causes Workspace Manager to take additional time to perform the operation.</p>
<p><code>FALSE</code> (the default) does not enforce any unique constraints defined on <code>table_name</code> on existing versioned data in the table.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r5c1-t15" headers="r1c1-t15">
<pre>enforce_RICs
</pre></td>
<td class="cellalignment5788" headers="r5c1-t15 r1c2-t15">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> enforces any referential integrity constraints defined on <code>table_name</code> on existing versioned data in the table. This ensures that the changes do not cause any such constraints to be violated, but it causes Workspace Manager to take additional time to perform the operation.</p>
<p><code>FALSE</code> (the default) does not enforce any referential integrity constraints defined on <code>table_name</code> on existing versioned data in the table.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref398"></a>Usage Notes</p>
<p>This procedure commits changes that were made to a version-enabled table and to any indexes, triggers, and referential integrity constraints based on the version-enabled table during a DDL session. It also deletes the special <span class="italic">&lt;table-name&gt;_LTS</span> table that was created by the <a href="#i113441">BeginDDL</a> procedure.</p>
<p>For detailed information about performing DDL operations related to version-enabled tables, see <a href="long_intro.htm#i1009427">Section 1.8</a>; and for DDL operations on version-enabled tables in an Oracle replication environment, see also <a href="long_repl.htm#i634767">Section C.3</a>.</p>
<p>The <code>enforce_unique_constraints</code> and <code>enforce_RICs</code> parameter settings apply only to existing versioned data, and do not affect whether or not existing constraints are enforced for future DML operations on the table.</p>
<p>If a call to the CommitDDL procedure fails, the table is left in an inconsistent state. If this occurs, you should try to fix the cause of the error. Examine the <a href="long_views.htm#i89006">USER_WM_VT_ERRORS</a> and <a href="long_views.htm#i89005">ALL_WM_VT_ERRORS</a> static data dictionary views to see the SQL statement and error message. For example, the CommitDDL procedure might have failed because the tablespace was not large enough to add a column. Fix the cause of the error, and then call the CommitDDL procedure again with the default <code>ignore_last_error</code> parameter value of <code>FALSE</code>. However, if the call still fails and you cannot fix the cause of the error, and if you are sure that it is safe and appropriate to ignore this error, then you have the option to ignore the error by calling the CommitDDL procedure with the <code>ignore_last_error</code> parameter value of <code>TRUE</code>. Note that you are responsible for ensuring that it is safe and appropriate to ignore the error.</p>
<p>An exception is raised if one or more of the following apply:</p>
<ul>
<li>
<p><code>table_name</code> does not exist or is not version-enabled.</p>
</li>
<li>
<p><code>table_name</code> has a domain index defined on it, and the user has not been directly granted the <code>CREATE TABLE</code> and <code>CREATE SEQUENCE</code> privileges.</p>
</li>
<li>
<p>An open DDL session does not exist for <code>table_name</code>. (That is, the <a href="#i113441">BeginDDL</a> procedure has not been called specifying this table, or the <a href="#i98106">CommitDDL</a> or <a href="#i98109">RollbackDDL</a> procedure was already called specifying this table.)</p>
</li>
</ul>
<p>Some invalid DDL operations also cause an exception when CommitDDL procedure is called. See <a href="long_intro.htm#i1009427">Section 1.8</a> for information about DDL operations that are supported.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref399"></a>Examples</p>
<p>The following example begins a DDL session, adds a column named <code>COMMENTS</code> to the <code>COLA_MARKETING_BUDGET</code> table by using the special table named <code>COLA_MARKETING_BUDGET_LTS</code>, and ends the DDL session by committing the change.</p>
<pre>EXECUTE DBMS_WM.BeginDDL(&#39;COLA_MARKETING_BUDGET&#39;);
ALTER TABLE cola_marketing_budget_lts ADD (comments VARCHAR2(100));
EXECUTE DBMS_WM.CommitDDL(&#39;COLA_MARKETING_BUDGET&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i90948"></a>
<div id="ADWSM99271" class="refsect1">
<h2 class="refsect1"><a id="sthref400"></a><a id="sthref401"></a><a id="sthref402"></a><a id="sthref403"></a>CommitResolve</h2>
<p>Ends a conflict resolution session and saves (makes permanent) any changes in the workspace since the <a href="#i87363">BeginResolve</a> procedure was executed.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref404"></a>Syntax</p>
<pre>DBMS_WM.CommitResolve(
   workspace  IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref405"></a>Parameters</p>
<div id="ADWSM99272" class="tblformal">
<p class="titleintable"><a id="sthref406"></a><a id="sthref407"></a>Table 4-13 CommitResolve Procedure Parameters</p>
<table class="cellalignment5786" title="CommitResolve Procedure Parameters" summary="CommitResolve Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t16">Parameter</th>
<th class="cellalignment5787" id="r1c2-t16">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t16" headers="r1c1-t16">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r2c1-t16 r1c2-t16">
<p>Name of the workspace. The name is case-sensitive.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref408"></a>Usage Notes</p>
<p>This procedure ends the current conflict resolution session (started by the <a href="#i87363">BeginResolve</a> procedure), and saves all changes in the workspace since the start of the conflict resolution session. Contrast this procedure with the <a href="#i87840">RollbackResolve</a> procedure, which discards all changes.</p>
<p>For more information about conflict resolution, see <a href="long_intro.htm#i1004610">Section 1.1.4</a>.</p>
<p>An exception is raised if one or more of the following apply:</p>
<ul>
<li>
<p>There are one or more open database transactions in <code>workspace</code>.</p>
</li>
<li>
<p>The procedure was called by a user that does not have the <code>WM_ADMIN</code> system privilege or that did not execute the <a href="#i87363">BeginResolve</a> procedure on <code>workspace</code>.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref409"></a>Examples</p>
<p>The following example ends the conflict resolution session in <code>Workspace1</code> and saves all changes.</p>
<pre>EXECUTE  DBMS_WM.CommitResolve (&#39;Workspace1&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i86067"></a>
<div id="ADWSM99273" class="refsect1">
<h2 class="refsect1"><a id="sthref410"></a><a id="sthref411"></a><a id="sthref412"></a><a id="sthref413"></a>CompressWorkspace</h2>
<p>Deletes removable savepoints in a workspace and minimizes the Workspace Manager metadata structures for the workspace. (<span class="italic">Removable savepoints</span> are explained in <a href="long_intro.htm#i1012409">Section 1.1.2</a>.)</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref414"></a>Syntax</p>
<pre>DBMS_WM.CompressWorkspace(
   workspace                   IN VARCHAR2,
   compress_view_wo_overwrite  IN BOOLEAN
   firstSP                     IN VARCHAR2 DEFAULT NULL,
   secondSP                    IN VARCHAR2 DEFAULT NULL,
   auto_commit                 IN BOOLEAN DEFAULT TRUE,
   commit_in_batches           IN BOOLEAN DEFAULT FALSE,
   batch_size                  IN VARCHAR2 DEFAULT &#39;PRIMARY_KEY_RANGE&#39;,
   remove_latest_deleted_rows  IN BOOLEAN DEFAULT FALSE);
</pre>
<p>or</p>
<pre>DBMS_WM.CompressWorkspace(
   workspace          IN VARCHAR2,
   firstSP            IN VARCHAR2 DEFAULT NULL,
   secondSP           IN VARCHAR2 DEFAULT NULL,
   auto_commit        IN BOOLEAN DEFAULT TRUE,
   commit_in_batches  IN BOOLEAN DEFAULT FALSE,
   batch_size         IN VARCHAR2 DEFAULT &#39;PRIMARY_KEY_RANGE&#39;,
   remove_latest_deleted_rows  IN BOOLEAN DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref415"></a>Parameters</p>
<div id="ADWSM99274" class="tblformal">
<p class="titleintable"><a id="sthref416"></a><a id="sthref417"></a>Table 4-14 CompressWorkspace Procedure Parameters</p>
<table class="cellalignment5786" title="CompressWorkspace Procedure Parameters" summary="CompressWorkspace Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t17">Parameter</th>
<th class="cellalignment5787" id="r1c2-t17">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t17" headers="r1c1-t17">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r2c1-t17 r1c2-t17">
<p>Name of the workspace. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t17" headers="r1c1-t17">
<pre>compress_view_wo_overwrite
</pre></td>
<td class="cellalignment5788" headers="r3c1-t17 r1c2-t17">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> causes history information between the affected savepoints to be deleted even if <code>VIEW_WO_OVERWRITE</code> was specified when versioning was enabled.</p>
<p><code>FALSE</code> causes history information (between the affected savepoints) for a table not to be deleted if <code>VIEW_WO_OVERWRITE</code> was specified when versioning was enabled. (If <code>VIEW_WO_OVERWRITE</code> was not specified for a table, history information for the table is deleted regardless of the parameter value.) <code>FALSE</code> is assumed if the procedure format without this parameter is used.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t17" headers="r1c1-t17">
<pre>firstSP
</pre></td>
<td class="cellalignment5788" headers="r4c1-t17 r1c2-t17">
<p>First savepoint. Savepoint names are case-sensitive.</p>
<p>If only <code>workspace</code> and <code>firstSP</code> are specified, all removable savepoints between workspace creation and <code>firstSP</code> (but not including <code>firstSP</code>) are deleted.</p>
<p>If <code>workspace</code>, <code>firstSP</code>, and <code>secondSP</code> are specified, all removable savepoints from <code>firstSP</code> (and including <code>firstSP</code> if it is a removable savepoint) to <code>secondSP</code> (but not including <code>secondSP</code>) are deleted.</p>
<p>If only <code>workspace</code> is specified (no savepoints), all removable savepoints in the workspace are deleted.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r5c1-t17" headers="r1c1-t17">
<pre>secondSP
</pre></td>
<td class="cellalignment5788" headers="r5c1-t17 r1c2-t17">
<p>Second savepoint. All removable savepoints from <code>firstSP</code> (and including <code>firstSP</code> if it is a removable savepoint) to <code>secondSP</code> (but not including <code>secondSP</code>) are deleted.</p>
<p>However, if <code>secondSP</code> is <code>LATEST</code>, all removable savepoints from <code>firstSP</code> (and including <code>firstSP</code> if it is a removable savepoint) to the end of the workspace are deleted.</p>
<p>Savepoint names are case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r6c1-t17" headers="r1c1-t17">
<pre>auto_commit
</pre></td>
<td class="cellalignment5788" headers="r6c1-t17 r1c2-t17">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> (the default) causes the operation to be executed as an autonomous database transaction that will be committed when it finishes.</p>
<p><code>FALSE</code> causes the operation to be executed as part of the caller&#39;s open database transaction (if one exists). If there is no open database transaction, the operation is executed in a new database transaction. In either case, the caller is responsible for committing the transaction. For more information, see <a href="long_intro.htm#i1014370">Section 1.1.8</a>.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r7c1-t17" headers="r1c1-t17">
<pre>commit_in_batches
</pre></td>
<td class="cellalignment5788" headers="r7c1-t17 r1c2-t17">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> causes an internal commit operation to be performed after compression operations on <code>batch_size</code> rows in version-enabled tables. Periodic commit operations can be useful or necessary if version-enabled tables have many rows affected by the compression, which can cause substantial Oracle database resources (such as rollback segments and undo tablespaces) to be used. If you specify <code>TRUE</code>, the <code>auto_commit</code> value must also be <code>TRUE</code>.</p>
<p><code>FALSE</code> (the default) causes internal commit operations not to be performed during the compression operation.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r8c1-t17" headers="r1c1-t17">
<pre>batch_size
</pre></td>
<td class="cellalignment5788" headers="r8c1-t17 r1c2-t17">
<p>Batch size for internal commit operations if <code>commit_in_batches</code> is <code>TRUE</code>; otherwise, the parameter is ignored. If specified, must be <code>TABLE</code> or <code>PRIMARY_KEY_RANGE</code>.</p>
<p><code>TABLE</code> causes an internal commit operation to be performed after compressing each version-enabled table that needs to be compressed.</p>
<p><code>PRIMARY_KEY_RANGE</code> specifies that each table is divided into batches of different ranges of primary key values, and an internal commit operation is to be performed after compressing each batch of rows in each version-enabled table that needs to be compressed. You must previously have generated statistics on the first column of the primary key, such as by using the DBMS_STATS.GATHER_TABLE_STATS procedure on the <span class="italic">&lt;table_name&gt;</span>_LT table associated with each affected version-enabled table. See the Usage Notes for more information. The following example generates histogram statistics:</p>
<p><code>EXECUTE DBMS_STATS.GATHER_TABLE_STATS(&#39;&#39;, &#39;cola_marketing_budget_lt&#39;, estimate_percent=&gt;50, method_opt=&gt;&#39;FOR COLUMNS SIZE 50 product_id&#39;);</code></p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r9c1-t17" headers="r1c1-t17">
<pre>remove_latest_deleted_rows
</pre></td>
<td class="cellalignment5788" headers="r9c1-t17 r1c2-t17">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> causes any <code>LATEST</code> row that has been deleted and that will not adversely affect conflict resolution to be removed, if <code>workspace</code> is <code>LIVE</code>. A value of <code>TRUE</code> is ignored for other workspaces.)</p>
<p><code>FALSE</code> (the default) causes any <code>LATEST</code> row that has been deleted to be preserved.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref418"></a>Usage Notes</p>
<p>You can compress a workspace when the explicit savepoints (all or some of them) in the workspace are no longer needed. The compression operation is useful for the following reasons:</p>
<ul>
<li>
<p>You can reuse savepoint names after they are deleted. (You cannot create a savepoint that has the same name as an existing savepoint.)</p>
</li>
<li>
<p>Less disk storage is used for Workspace Manager structures (fewer table rows, smaller indexes, less Workspace Manager metadata).</p>
</li>
<li>
<p>Because of the reduction in disk space usage, runtime performance for Workspace Manager operations is improved.</p>
</li>
</ul>
<p>This procedure deletes implicit savepoints only if they do not have any child dependencies, and the existence of any such non-removable savepoints will not allow the entire range to be compressed as a single unit. However, you can remove or move such savepoints by using the <a href="#i108854">RemoveWorkspace</a> or <a href="#i83811">RefreshWorkspace</a> procedure, respectively.</p>
<p>While this procedure is executing, the current workspace is frozen in <code>NO_ACCESS</code> mode, as explained in <a href="long_intro.htm#i1006773">Section 1.1.5</a>.</p>
<p>A workspace cannot be compressed if there are any sessions in the workspace (except for the <code>LIVE</code> workspace), or if any user has executed a <a href="#i90546">GotoDate</a> operation or a <a href="#i91086">GotoSavepoint</a> operation specifying a savepoint in the workspace.</p>
<p>If the procedure format without the <code>compress_view_wo_overwrite</code> parameter is used, a value of <code>FALSE</code> is assumed for the parameter.</p>
<p>For information about <code>VIEW_WO_OVERWRITE</code> and other history options, see the information about the <a href="#i80309">EnableVersioning</a> procedure.</p>
<p>If you expect to purge a subset of your historical data periodically, such as removing historical data older than one year, plan to create a savepoint at each expected deletion point on the day it occurs. For example, if you plan to purge 2005 historical data when it is a year old, you need to create a savepoint on January 1, 2006. Then, on January 1, 2007 you can call the CompressWorkspace procedure, specifying the workspace name and the January 1, 2006 savepoint, to delete all history that occurred before 2006.</p>
<p>To see if a version-enabled table can be compressed in primary key range batches, check the value of the <code>BATCH_SIZE</code> column in the <a href="long_views.htm#BABHBFHJ">WM_COMPRESS_BATCH_SIZES</a> metadata view, which is described in <a href="long_views.htm#BABHBFHJ">Section 5.46</a>.</p>
<p>To specify a <code>batch_size</code> value of <code>PRIMARY_KEY_RANGE</code>, you must first generate either histogram statistics (for columns of type <code>NUMBER</code>, <code>INTEGER</code>, <code>DATE</code>, <code>TIMESTAMP</code>, <code>CHAR</code>, or <code>VARCHAR2</code>) or general statistics (for columns of type <code>NUMBER</code>, <code>INTEGER</code>, <code>DATE</code>, or <code>TIMESTAMP</code>) on the first column of the primary key. The procedure DBMS_STATS.GATHER_TABLE_STATS generates general statistics. If general but not histogram statistics are available for columns of type <code>NUMBER</code>, <code>INTEGER</code>, <code>DATE</code>, or <code>TIMESTAMP</code>, the Workspace Manager system parameter <code>NUMBER_OF_COMPRESS_BATCHES</code> is used to compute the number of batches when <code>batch_size</code> is specified as <code>PRIMARY_KEY_RANGE</code>. For more information about statistics, see <a class="olink TGDBA" href="../TGDBA/toc.htm"><span class="italic">Oracle Database Performance Tuning Guide</span></a>.</p>
<p>An exception is raised if <code>auto_commit</code> is <code>TRUE</code> and an open transaction exists, if the user does not have sufficient privileges on all tables that need to be modified (including, for example, tables modified by triggers), or if the user does not have the privilege to access and merge changes in <code>workspace</code>.</p>
<p>To compress a workspace and all its descendant workspaces, use the <a href="#i86068">CompressWorkspaceTree</a> procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref419"></a>Examples</p>
<p>The following example compresses <code>NEWWORKSPACE</code>.</p>
<pre>EXECUTE DBMS_WM.CompressWorkspace (&#39;NEWWORKSPACE&#39;);
</pre>
<p>The following example compresses <code>NEWWORKSPACE</code>, deleting all explicit savepoints between the creation of the workspace and the savepoint <code>SP1</code>.</p>
<pre>EXECUTE DBMS_WM.CompressWorkspace (&#39;NEWWORKSPACE&#39;, &#39;SP1&#39;);
</pre>
<p>The following example compresses <code>NEWWORKSPACE</code>, deleting the explicit savepoint <code>SP1</code> and all explicit savepoints up to but not including <code>SP2</code>.</p>
<pre>EXECUTE DBMS_WM.CompressWorkspace (&#39;NEWWORKSPACE&#39;, &#39;SP1&#39;, &#39;SP2&#39;);
</pre>
<p>The following example compresses <code>B_focus_1</code>, accepts the default values for the <code>firstSP</code> and <code>secondSP</code> parameters (that is, deletes all explicit savepoints), and specifies <code>FALSE</code> for the <code>auto_commit</code> parameter.</p>
<pre>EXECUTE DBMS_WM.CompressWorkspace (&#39;B_focus_1&#39;, auto_commit =&gt; FALSE);
</pre>
<p>The following example analyzes the <code>COLA_MARKETING_BUDGET_LT</code> table to generate the necessary histogram statistics for the next statement, and then it compresses <code>B_focus_1</code>. The call to the <code>CompressWorkspace</code> procedure accepts the default values for the <code>firstSP</code>, <code>secondSP</code>, and <code>auto_commit</code> parameters; specifies <code>TRUE</code> for the <code>commit_in_batches</code> parameter; and specifies <code>PRIMARY_KEY_RANGE</code> for the <code>batch_size</code> parameter.</p>
<pre>EXECUTE DBMS_STATS.GATHER_TABLE_STATS(&#39;&#39;, &#39;cola_marketing_budget_lt&#39;, estimate_percent=&gt;50, method_opt=&gt;&#39;FOR COLUMNS SIZE 50 product_id&#39;);
EXECUTE DBMS_WM.CompressWorkspace (&#39;B_focus_1&#39;, NULL, NULL, NULL, TRUE, &#39;PRIMARY_KEY_RANGE&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i86068"></a>
<div id="ADWSM99275" class="refsect1">
<h2 class="refsect1"><a id="sthref420"></a><a id="sthref421"></a><a id="sthref422"></a><a id="sthref423"></a>CompressWorkspaceTree</h2>
<p>Deletes removable savepoints in a workspace and all its descendant workspaces. (<span class="italic">Removable savepoints</span> are explained in <a href="long_intro.htm#i1012409">Section 1.1.2</a>.) It also minimizes the Workspace Manager metadata structures for the affected workspaces, and eliminates any redundant data that might arise from the deletion of the savepoints.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref424"></a>Syntax</p>
<pre>DBMS_WM.CompressWorkspaceTree(
   workspace                   IN VARCHAR2,
   compress_view_wo_overwrite  IN BOOLEAN DEFAULT FALSE,
   auto_commit                 IN BOOLEAN DEFAULT TRUE,
   commit_in_batches           IN BOOLEAN DEFAULT FALSE,
   batch_size                  IN VARCHAR2 DEFAULT &#39;PRIMARY_KEY_RANGE&#39;,
   remove_latest_deleted_rows  IN BOOLEAN DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref425"></a>Parameters</p>
<div id="ADWSM99276" class="tblformal">
<p class="titleintable"><a id="sthref426"></a><a id="sthref427"></a>Table 4-15 CompressWorkspaceTree Procedure Parameters</p>
<table class="cellalignment5786" title="CompressWorkspaceTree Procedure Parameters" summary="CompressWorkspaceTree Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t18">Parameter</th>
<th class="cellalignment5787" id="r1c2-t18">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t18" headers="r1c1-t18">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r2c1-t18 r1c2-t18">
<p>Name of the workspace. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t18" headers="r1c1-t18">
<pre>compress_view_wo_overwrite
</pre></td>
<td class="cellalignment5788" headers="r3c1-t18 r1c2-t18">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> causes history information to be deleted even if <code>VIEW_WO_OVERWRITE</code> was specified when versioning was enabled.</p>
<p><code>FALSE</code> (the default) causes history information for a table not to be deleted if <code>VIEW_WO_OVERWRITE</code> was specified when versioning was enabled. (If <code>VIEW_WO_OVERWRITE</code> was not specified for a table, history information for the table is deleted regardless of the parameter value.)</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t18" headers="r1c1-t18">
<pre>auto_commit
</pre></td>
<td class="cellalignment5788" headers="r4c1-t18 r1c2-t18">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> (the default) causes the operation to be executed as an autonomous database transaction that will be committed when it finishes.</p>
<p><code>FALSE</code> causes the operation to be executed as part of the caller&#39;s open database transaction (if one exists). If there is no open database transaction, the operation is executed in a new database transaction. In either case, the caller is responsible for committing the transaction. For more information, see <a href="long_intro.htm#i1014370">Section 1.1.8</a>.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r5c1-t18" headers="r1c1-t18">
<pre>commit_in_batches
</pre></td>
<td class="cellalignment5788" headers="r5c1-t18 r1c2-t18">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> causes an internal commit operation to be performed after compression operations on <code>batch_size</code> rows in version-enabled tables. Periodic commit operations can be useful or necessary if version-enabled tables have many rows affected by the compression, which can cause substantial Oracle database resources (such as rollback segments and undo tablespaces) to be used. If you specify <code>TRUE</code>, the <code>auto_commit</code> value must also be <code>TRUE</code>.</p>
<p><code>FALSE</code> (the default) causes internal commit operations not to be performed during the compression operation.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r6c1-t18" headers="r1c1-t18">
<pre>batch_size
</pre></td>
<td class="cellalignment5788" headers="r6c1-t18 r1c2-t18">
<p>Batch size for internal commit operations if <code>commit_in_batches</code> is <code>TRUE</code>; otherwise, the parameter is ignored. If specified, must be <code>TABLE</code> or <code>PRIMARY_KEY_RANGE</code>.</p>
<p><code>TABLE</code> causes an internal commit operation to be performed after compressing each version-enabled table that needs to be compressed.</p>
<p><code>PRIMARY_KEY_RANGE</code> specifies that each table is divided into batches of different ranges of primary key values, and an internal commit operation is to be performed after compressing each batch of rows in each version-enabled table that needs to be compressed. You must previously have generated statistics on the first column of the primary key, such as by using the DBMS_STATS.GATHER_TABLE_STATS procedure on the <span class="italic">&lt;table_name&gt;</span>_LT table associated with each affected version-enabled table. See the Usage Notes for more information. The following example generates histogram statistics:</p>
<p><code>EXECUTE DBMS_STATS.GATHER_TABLE_STATS(&#39;&#39;, &#39;cola_marketing_budget_lt&#39;, estimate_percent=&gt;50, method_opt=&gt;&#39;FOR COLUMNS SIZE 50 product_id&#39;);</code></p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r7c1-t18" headers="r1c1-t18">
<pre>remove_latest_deleted_rows
</pre></td>
<td class="cellalignment5788" headers="r7c1-t18 r1c2-t18">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> causes any <code>LATEST</code> row that has been deleted and that will not adversely affect conflict resolution to be removed, if <code>workspace</code> is <code>LIVE</code>. A value of <code>TRUE</code> is ignored for other values of the <code>workspace</code> parameter.)</p>
<p><code>FALSE</code> (the default) causes any <code>LATEST</code> row that has been deleted to be preserved.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref428"></a>Usage Notes</p>
<p>You can compress a workspace and all its descendant workspaces when the explicit savepoints in the affected workspaces are no longer needed (for example, if you will not need to go to or roll back to any of these savepoints). For example, in the hierarchy shown in <a href="long_intro.htm#i1013821">Figure 1-1</a> in <a href="long_intro.htm#i1004554">Section 1.1.1</a>, a CompressWorkspaceTree operation specifying Workspace1 compresses Workspace1, Workspace2, and Workspace3. (For an explanation of database workspace hierarchy, see <a href="long_intro.htm#i1004554">Section 1.1.1</a>.)</p>
<p>The compression operation is useful for the following reasons:</p>
<ul>
<li>
<p>You can reuse savepoint names after they are deleted. (You cannot create a savepoint that has the same name as an existing savepoint.)</p>
</li>
<li>
<p>Runtime performance for Workspace Manager operations is improved.</p>
</li>
<li>
<p>Less disk storage is used for Workspace Manager structures.</p>
</li>
</ul>
<p>While this procedure is executing, the current workspace is frozen in <code>NO_ACCESS</code> mode, as explained in <a href="long_intro.htm#i1006773">Section 1.1.5</a>.</p>
<p>A workspace cannot be compressed if there are any sessions in the workspace (except for the <code>LIVE</code> workspace), or if any user has executed a <a href="#i90546">GotoDate</a> operation or a <a href="#i91086">GotoSavepoint</a> operation specifying a savepoint in the workspace.</p>
<p>To see if a version-enabled table can be compressed in primary key range batches, check the value of the <code>BATCH_SIZE</code> column in the <a href="long_views.htm#BABHBFHJ">WM_COMPRESS_BATCH_SIZES</a> metadata view, which is described in <a href="long_views.htm#BABHBFHJ">Section 5.46</a>.</p>
<p>To specify a <code>batch_size</code> value of <code>PRIMARY_KEY_RANGE</code>, you must first generate either histogram statistics (for columns of type <code>NUMBER</code>, <code>INTEGER</code>, <code>DATE</code>, <code>TIMESTAMP</code>, <code>CHAR,</code> or <code>VARCHAR2</code>) or general statistics (for columns of type <code>NUMBER</code>, <code>INTEGER</code>, <code>DATE</code>, or <code>TIMESTAMP</code>) on the first column of the primary key. The procedure DBMS_STATS.GATHER_TABLE_STATS generates general statistics. If general but not histogram statistics are available for columns of type <code>NUMBER</code>, <code>INTEGER</code>, <code>DATE</code>, or <code>TIMESTAMP</code>, the Workspace Manager system parameter <code>NUMBER_OF_COMPRESS_BATCHES</code> is used to compute the number of batches when <code>batch_size</code> is specified as <code>PRIMARY_KEY_RANGE</code>. For more information about statistics, see <a class="olink TGDBA" href="../TGDBA/toc.htm"><span class="italic">Oracle Database Performance Tuning Guide</span></a>.</p>
<p>An exception is raised if <code>auto_commit</code> is <code>TRUE</code> and an open transaction exists, if the user does not have sufficient privileges on all tables that need to be modified (including, for example, tables modified by triggers), or if the user does not have the privilege to access and merge changes in <code>workspace</code>.</p>
<p>If the CompressWorkspaceTree operation fails in any affected workspace, the entire operation is rolled back, and no workspaces are compressed.</p>
<p>To compress a single workspace (deleting all explicit savepoints or just some of them), use the <a href="#i86067">CompressWorkspace</a> procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref429"></a>Examples</p>
<p>The following example compresses <code>NEWWORKSPACE</code> and all its descendant workspaces.</p>
<pre>EXECUTE DBMS_WM.CompressWorkspaceTree (&#39;NEWWORKSPACE&#39;);
</pre>
<p>The following example compresses <code>NEWWORKSPACE</code> and all its descendant workspaces, accepts the default value for the <code>compress_view_wo_overwrite</code> parameter, and specifies <code>FALSE</code> for the <code>auto_commit</code> parameter.</p>
<pre>EXECUTE DBMS_WM.CompressWorkspaceTree (&#39;NEWWORKSPACE&#39;, auto_commit =&gt; FALSE);
</pre>
<p>The following example compresses <code>NEWWORKSPACE</code> and all its descendant workspaces; accepts the default value for the <code>compress_view_wo_overwrite</code> and <code>auto_commit</code> parameters; specifies <code>TRUE</code> for the <code>commit_in_batches</code> parameter; and specifies <code>PRIMARY_KEY_RANGE</code> for the <code>batch_size</code> parameter.</p>
<pre>EXECUTE DBMS_WM.CompressWorkspaceTree (&#39;NEWWORKSPACE&#39;, NULL, NULL, TRUE, &#39;PRIMARY_KEY_RANGE&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i107816"></a>
<div id="ADWSM99277" class="refsect1">
<h2 class="refsect1"><a id="sthref430"></a><a id="sthref431"></a><a id="sthref432"></a>CopyForUpdate</h2>
<p>Allows LOB columns (BLOB, CLOB, or NCLOB) in version-enabled tables to be modified. Use this procedure only if a version-enabled table has any LOB columns.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref433"></a>Syntax</p>
<pre>DBMS_WM.CopyForUpdate(
   table_name    IN VARCHAR2,
   where_clause  IN VARCHAR2 DEFAULT &#39;&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref434"></a>Parameters</p>
<div id="ADWSM99278" class="tblformal">
<p class="titleintable"><a id="sthref435"></a><a id="sthref436"></a>Table 4-16 CopyForUpdate Procedure Parameters</p>
<table class="cellalignment5786" title="CopyForUpdate Procedure Parameters" summary="CopyForUpdate Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t19">Parameter</th>
<th class="cellalignment5787" id="r1c2-t19">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t19" headers="r1c1-t19">
<pre>table_name
</pre></td>
<td class="cellalignment5788" headers="r2c1-t19 r1c2-t19">
<p>Name of the table containing one or more LOB columns. The name is not case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t19" headers="r1c1-t19">
<pre>where_clause
</pre></td>
<td class="cellalignment5788" headers="r3c1-t19 r1c2-t19">
<p>The <code>WHERE</code> clause (excluding the <code>WHERE</code> keyword) identifying the rows affected. Example: <code>&#39;department_id = 20&#39;</code></p>
<p>Only primary key columns can be specified in the <code>WHERE</code> clause, except in a subquery. The subquery can refer to columns that are not primary keys, but it cannot refer to a version-enabled table.</p>
<p>If the <code>where_clause</code> parameter is not specified, all rows in <code>table_name</code> are affected.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref437"></a>Usage Notes</p>
<p>This procedure is intended for use only with version-enabled tables containing one or more large object (LOB) columns. The CopyForUpdate procedure must be used because updates performed using the DBMS_LOB package do not fire <code>INSTEAD OF</code> triggers on the versioning views. Workspace Manager creates <code>INSTEAD OF</code> triggers on the versioning views to implement the copy-on-write semantics. (For non-LOB columns, you can directly perform the update operation, and the triggers work.)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref438"></a>Examples</p>
<p>The following example updates the <code>SOURCE_CLOB</code> column of <code>TABLE1</code> for the document with <code>DOC_ID = 1</code>.</p>
<pre>  Declare 
    clob_var 
  Begin
     /* This procedure copies the LOB columns if necessary, that is, 
        if the row with doc_id = 1 has not been versioned in the 
        current version */
     dbms_wm.copyForUpdate(&#39;table1&#39;, &#39;doc_id = 1&#39;);

     select source_clob into clob_var
     from   table1
     where  doc_id = 1 for update;

     dbms_lob.write(clob_var,&lt;amount&gt;, &lt;offset&gt;, buff);

  End;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79490"></a>
<div id="ADWSM99279" class="refsect1">
<h2 class="refsect1"><a id="sthref439"></a><a id="sthref440"></a><a id="sthref441"></a><a id="sthref442"></a>CreateSavepoint</h2>
<p>Creates a savepoint for the current version.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref443"></a>Syntax</p>
<pre>DBMS_WM.CreateSavepoint(
   workspace       IN VARCHAR2,
   savepoint_name  IN VARCHAR2,
   description     IN VARCHAR2 DEFAULT NULL,
   auto_commit     IN BOOLEAN DEFAULT TRUE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref444"></a>Parameters</p>
<div id="ADWSM99280" class="tblformal">
<p class="titleintable"><a id="sthref445"></a><a id="sthref446"></a>Table 4-17 CreateSavepoint Procedure Parameters</p>
<table class="cellalignment5786" title="CreateSavepoint Procedure Parameters" summary="CreateSavepoint Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t20">Parameter</th>
<th class="cellalignment5787" id="r1c2-t20">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t20" headers="r1c1-t20">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r2c1-t20 r1c2-t20">
<p>Name of the workspace in which to create the savepoint. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t20" headers="r1c1-t20">
<pre>savepoint_name
</pre></td>
<td class="cellalignment5788" headers="r3c1-t20 r1c2-t20">
<p>Name of the savepoint to be created. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t20" headers="r1c1-t20">
<pre>description
</pre></td>
<td class="cellalignment5788" headers="r4c1-t20 r1c2-t20">
<p>Description of the savepoint to be created.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r5c1-t20" headers="r1c1-t20">
<pre>auto_commit
</pre></td>
<td class="cellalignment5788" headers="r5c1-t20 r1c2-t20">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> (the default) causes the operation to be executed as an autonomous database transaction that will be committed when it finishes.</p>
<p><code>FALSE</code> causes the operation to be executed as part of the caller&#39;s open database transaction (if one exists). If there is no open database transaction, the operation is executed in a new database transaction. In either case, the caller is responsible for committing the transaction. For more information, see <a href="long_intro.htm#i1014370">Section 1.1.8</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref447"></a>Usage Notes</p>
<p>There are no explicit privileges associated with savepoints; any user who can access a workspace can create a savepoint in the workspace.</p>
<p>This procedure can be performed while there are users in the workspace. There can be open database transactions, but only if these transactions have not modified a versioned table.</p>
<p>While this procedure is executing, the current workspace is frozen in <code>READ_ONLY</code> mode, as explained in <a href="long_intro.htm#i1006773">Section 1.1.5</a>.</p>
<p>An exception is raised if one or more of the following apply:</p>
<ul>
<li>
<p>The user is not in the latest version in the workspace (for example, if the user has called the <a href="#i90546">GotoDate</a> procedure).</p>
</li>
<li>
<p><code>workspace</code> does not exist.</p>
</li>
<li>
<p><code>savepoint_name</code> already exists.</p>
</li>
<li>
<p><code>auto_commit</code> is <code>TRUE</code> and an open transaction exists in a parent or child workspace of any table that needs to be modified.</p>
</li>
<li>
<p>The user does not have the privilege to go to the specified workspace.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref448"></a>Examples</p>
<p>The following example creates a savepoint named <code>Savepoint1</code> in the <code>NEWWORKSPACE</code> workspace.</p>
<pre>EXECUTE DBMS_WM.CreateSavepoint (&#39;NEWWORKSPACE&#39;, &#39;Savepoint1&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78729"></a>
<div id="ADWSM99281" class="refsect1">
<h2 class="refsect1"><a id="sthref449"></a><a id="sthref450"></a><a id="sthref451"></a><a id="sthref452"></a>CreateWorkspace</h2>
<p>Creates a new workspace in the database.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref453"></a>Syntax</p>
<pre>DBMS_WM.CreateWorkspace(
   workspace    IN VARCHAR2,
   description  IN VARCHAR2 DEFAULT NULL,
   auto_commit  IN BOOLEAN DEFAULT TRUE);
</pre>
<p>or</p>
<pre>DBMS_WM.CreateWorkspace(
   workspace    IN VARCHAR2,
   isrefreshed  IN BOOLEAN,
   description  IN VARCHAR2 DEFAULT NULL,
   auto_commit  IN BOOLEAN DEFAULT TRUE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref454"></a>Parameters</p>
<div id="ADWSM99282" class="tblformal">
<p class="titleintable"><a id="sthref455"></a><a id="sthref456"></a>Table 4-18 CreateWorkspace Procedure Parameters</p>
<table class="cellalignment5786" title="CreateWorkspace Procedure Parameters" summary="CreateWorkspace Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t21">Parameter</th>
<th class="cellalignment5787" id="r1c2-t21">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t21" headers="r1c1-t21">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r2c1-t21 r1c2-t21">
<p>Name of the workspace. The name is case-sensitive, and it must be unique (no other workspace of the same name). The name must not contain any of the following characters: <code>&#34;</code> (double quotes), <code>&#39;</code> (single quote), <code>`</code> (grave accent), or <code>|</code> (vertical bar).</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t21" headers="r1c1-t21">
<pre><a id="sthref457"></a><a id="sthref458"></a>isrefreshed
</pre></td>
<td class="cellalignment5788" headers="r3c1-t21 r1c2-t21">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> causes the workspace to be continually refreshed. In a <span class="bold">continually refreshed workspace</span> (described in <a href="long_intro.htm#i1018583">Section 1.1.9</a>), changes made in the parent workspace are automatically applied to the workspace whenever data changes are committed in the parent workspace or are merged into the parent workspace from another child workspace. That is, you do not need to call the <a href="#i83811">RefreshWorkspace</a> procedure to apply the changes. See the Usage Notes for more information about continually refreshed workspaces.</p>
<p><code>FALSE</code> causes the workspace not to be continually refreshed. To refresh the workspace, you must call the <a href="#i83811">RefreshWorkspace</a> procedure.</p>
<p>If you use the syntax without the <code>isrefreshed</code> parameter, the workspace is not continually refreshed.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t21" headers="r1c1-t21">
<pre>description
</pre></td>
<td class="cellalignment5788" headers="r4c1-t21 r1c2-t21">
<p>Description of the workspace.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r5c1-t21" headers="r1c1-t21">
<pre>auto_commit
</pre></td>
<td class="cellalignment5788" headers="r5c1-t21 r1c2-t21">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> (the default) causes the operation to be executed as an autonomous database transaction that will be committed when it finishes.</p>
<p><code>FALSE</code> causes the operation to be executed as part of the caller&#39;s open database transaction (if one exists). If there is no open database transaction, the operation is executed in a new database transaction. In either case, the caller is responsible for committing the transaction. For more information, see <a href="long_intro.htm#i1014370">Section 1.1.8</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref459"></a>Usage Notes</p>
<p>The new workspace is a child of the current workspace. If the session has not explicitly entered a workspace, it is in the <code>LIVE</code> database workspace, and the new workspace is a child of the <code>LIVE</code> workspace. For an explanation of database workspace hierarchy, see <a href="long_intro.htm#i1004554">Section 1.1.1</a>.</p>
<p>An implicit savepoint is created in the current version of the current workspace. (The current version does not have to be the latest version in the current workspace.) For an explanation of savepoints (explicit and implicit), see <a href="long_intro.htm#i1012409">Section 1.1.2</a>.</p>
<p>While this procedure is executing, the current workspace is frozen in <code>READ_ONLY</code> mode, as explained in <a href="long_intro.htm#i1006773">Section 1.1.5</a>.</p>
<p>This procedure does not implicitly go to the workspace created. To go to the workspace, use the <a href="#i78730">GotoWorkspace</a> procedure.</p>
<p>The following rules apply to continually refreshed workspaces (<code>isrefreshed</code> value of <code>TRUE</code>):</p>
<ul>
<li>
<p>The session must be on the latest version in order to create a continually refreshed workspace.</p>
</li>
<li>
<p>You cannot turn off locking using the <a href="#i79467">SetLockingOFF</a> or <a href="#i107704">SetWorkspaceLockModeOFF</a> procedure for a continually refreshed workspace.</p>
</li>
</ul>
<p>An exception is raised if one or more of the following apply:</p>
<ul>
<li>
<p><code>workspace</code> already exists.</p>
</li>
<li>
<p><code>auto_commit</code> is <code>TRUE</code> and an open transaction exists in a parent or child workspace of any table that needs to be modified.</p>
</li>
<li>
<p>The user does not have the privilege to create a workspace.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref460"></a>Examples</p>
<p>The following example creates a workspace named <code>NEWWORKSPACE</code> in the database.</p>
<pre>EXECUTE DBMS_WM.CreateWorkspace (&#39;NEWWORKSPACE&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHEFHDHD"></a>
<div id="ADWSM99283" class="refsect1">
<h2 class="refsect1"><a id="sthref461"></a><a id="sthref462"></a><a id="sthref463"></a>Delete_Topo_Geometry_Layer</h2>
<p>Deletes a topology geometry layer from a topology.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref464"></a>Format</p>
<p class="synopsis">DBMS_WM.Delete_Topo_Geometry_Layer(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;topology IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table_name IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;column_name IN VARCHAR2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref465"></a>Parameters</p>
<div id="ADWSM99284" class="tblformal">
<p class="titleintable"><a id="sthref466"></a><a id="sthref467"></a>Table 4-19 Delete_Topo_Geometry_Layer Procedure Parameters</p>
<table class="cellalignment5786" title="Delete_Topo_Geometry_Layer Procedure Parameters" summary="Delete_Topo_Geometry_Layer Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t22">Parameter</th>
<th class="cellalignment5787" id="r1c2-t22">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t22" headers="r1c1-t22">
<pre>topology
</pre></td>
<td class="cellalignment5788" headers="r2c1-t22 r1c2-t22">
<p>Topology from which to delete the topology geometry layer containing the topology geometries in the specified column. The topology must have been created using the SDO_TOPO.CREATE_TOPOLOGY procedure.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t22" headers="r1c1-t22">
<pre>table_name
</pre></td>
<td class="cellalignment5788" headers="r3c1-t22 r1c2-t22">
<p>Name of the topology geometry layer table containing the column specified in <code>column_name</code>.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t22" headers="r1c1-t22">
<pre>column_name
</pre></td>
<td class="cellalignment5788" headers="r4c1-t22 r1c2-t22">
<p>Name of the column (of type <code>SDO_TOPO_GEOMETRY</code>) containing the topology geometries in the topology geometry layer to be deleted from the topology.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref468"></a>Usage Notes</p>
<p>This procedure has the same format and meaning as the SDO_TOPO.DELETE_TOPO_GEOMETRY_LAYER procedure, which is documented in <a class="olink TOPOL" href="../TOPOL/toc.htm"><span class="italic">Oracle Spatial and Graph Topology Data Model and Network Data Model Graph Developer&#39;s Guide</span></a>. However, you must use DBMS_WM.Delete_Topo_Geometry_Layer, and not SDO_TOPO.DELETE_TOPO_GEOMETRY_LAYER, to delete a topology geometry layer from a version-enabled feature table from a topology. For information about Workspace Manager support for topologies, see <a href="long_intro.htm#i1020573">Section 1.14</a>.</p>
<p>This procedure deletes data associated with the specified topology geometry layer from the edge, node, and face tables (described in <a class="olink TOPOL" href="../TOPOL/toc.htm"><span class="italic">Oracle Spatial and Graph Topology Data Model and Network Data Model Graph Developer&#39;s Guide</span></a>).</p>
<p>An exception is generated if <code>topology</code> or <code>table_name</code> is not version-enabled, or if <code>table_name</code> is the only feature table in <code>topology</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref469"></a>Examples</p>
<p>The following example deletes the topology geometry layer that is based on the geometries in the <code>FEATURE</code> column of the <code>LAND_PARCELS</code> table from the topology named <code>CITY_DATA</code>.</p>
<pre>EXECUTE DBMS_WM.Delete_Topo_Geometry_Layer(&#39;CITY_DATA&#39;, &#39;LAND_PARCELS&#39;, &#39;FEATURE&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i86069"></a>
<div id="ADWSM99285" class="refsect1">
<h2 class="refsect1"><a id="sthref470"></a><a id="sthref471"></a><a id="sthref472"></a><a id="sthref473"></a>DeleteSavepoint</h2>
<p>Deletes a savepoint and associated rows in version-enabled tables.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref474"></a>Syntax</p>
<pre>DBMS_WM.DeleteSavepoint(
   workspace                   IN VARCHAR2,
   savepoint_name              IN VARCHAR2,
   compress_view_wo_overwrite  IN BOOLEAN DEFAULT FALSE,
   auto_commit                 IN BOOLEAN DEFAULT TRUE,
   commit_in_batches           IN BOOLEAN DEFAULT FALSE,
   batch_size                  IN VARCHAR2 DEFAULT &#39;PRIMARY_KEY_RANGE&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref475"></a>Parameters</p>
<div id="ADWSM99286" class="tblformal">
<p class="titleintable"><a id="sthref476"></a><a id="sthref477"></a>Table 4-20 DeleteSavepoint Procedure Parameters</p>
<table class="cellalignment5786" title="DeleteSavepoint Procedure Parameters" summary="DeleteSavepoint Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t23">Parameter</th>
<th class="cellalignment5787" id="r1c2-t23">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t23" headers="r1c1-t23">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r2c1-t23 r1c2-t23">
<p>Name of the workspace in which the savepoint was created. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t23" headers="r1c1-t23">
<pre>savepoint_name
</pre></td>
<td class="cellalignment5788" headers="r3c1-t23 r1c2-t23">
<p>Name of the savepoint to be deleted. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t23" headers="r1c1-t23">
<pre>compress_view_wo_overwrite
</pre></td>
<td class="cellalignment5788" headers="r4c1-t23 r1c2-t23">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> causes history information to be deleted even if <code>VIEW_WO_OVERWRITE</code> was specified when versioning was enabled.</p>
<p><code>FALSE</code> (the default) causes history information for a table not to be deleted if <code>VIEW_WO_OVERWRITE</code> was specified when versioning was enabled. (If <code>VIEW_WO_OVERWRITE</code> was not specified for a table, history information for the table is deleted regardless of the parameter value.)</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r5c1-t23" headers="r1c1-t23">
<pre>auto_commit
</pre></td>
<td class="cellalignment5788" headers="r5c1-t23 r1c2-t23">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> (the default) causes the operation to be executed as an autonomous database transaction that will be committed when it finishes.</p>
<p><code>FALSE</code> causes the operation to be executed as part of the caller&#39;s open database transaction (if one exists). If there is no open database transaction, the operation is executed in a new database transaction. In either case, the caller is responsible for committing the transaction. For more information, see <a href="long_intro.htm#i1014370">Section 1.1.8</a>.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r6c1-t23" headers="r1c1-t23">
<pre>commit_in_batches
</pre></td>
<td class="cellalignment5788" headers="r6c1-t23 r1c2-t23">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> causes an internal commit operation to be performed after compression operations on <code>batch_size</code> rows in version-enabled tables. Periodic commit operations can be useful or necessary if version-enabled tables have many rows affected by the savepoint deletion, which can cause substantial Oracle database resources (such as rollback segments and undo tablespaces) to be used. If you specify <code>TRUE</code>, the <code>auto_commit</code> value must also be <code>TRUE</code>.</p>
<p><code>FALSE</code> (the default) causes internal commit operations not to be performed during the savepoint deletion operation.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r7c1-t23" headers="r1c1-t23">
<pre>batch_size
</pre></td>
<td class="cellalignment5788" headers="r7c1-t23 r1c2-t23">
<p>Batch size for internal commit operations if <code>commit_in_batches</code> is <code>TRUE</code>; otherwise, the parameter is ignored. If specified, must be <code>TABLE</code> or <code>PRIMARY_KEY_RANGE</code>.</p>
<p><code>TABLE</code> causes an internal commit operation to be performed after compressing each version-enabled table that needs to be compressed.</p>
<p><code>PRIMARY_KEY_RANGE</code> specifies that each table is divided into batches of different ranges of primary key values, and an internal commit operation is to be performed after compressing each batch of rows in each version-enabled table that needs to be compressed. You must previously have generated statistics on the first column of the primary key, such as by using the DBMS_STATS.GATHER_TABLE_STATS procedure on the <span class="italic">&lt;table_name&gt;</span>_LT table associated with each affected version-enabled table. See the Usage Notes for more information. The following example generates histogram statistics:</p>
<p><code>EXECUTE DBMS_STATS.GATHER_TABLE_STATS(&#39;&#39;, &#39;cola_marketing_budget_lt&#39;, estimate_percent=&gt;50, method_opt=&gt;&#39;FOR COLUMNS SIZE 50 product_id&#39;);</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref478"></a>Usage Notes</p>
<p>You can delete a savepoint when it is no longer needed (for example, you will not need to go to it or roll back to it).</p>
<p>Deleting a savepoint is useful for the following reasons:</p>
<ul>
<li>
<p>You can reuse a savepoint name after it is deleted. (You cannot create a savepoint that has the same name as an existing savepoint.)</p>
</li>
<li>
<p>Runtime performance for Workspace Manager operations is improved.</p>
</li>
<li>
<p>Less disk storage is used for Workspace Manager structures.</p>
</li>
</ul>
<p>While this procedure is executing, the current workspace is frozen in <code>NO_ACCESS</code> mode, as explained in <a href="long_intro.htm#i1006773">Section 1.1.5</a>.</p>
<p>To delete a savepoint, you must have the <code>WM_ADMIN</code> system privilege or be the owner of the workspace or the savepoint.</p>
<p>This procedure cannot be executed if there are any sessions with an open database transaction, or if any user has executed a <a href="#i90546">GotoDate</a> operation or a <a href="#i91086">GotoSavepoint</a> operation specifying a savepoint in the workspace.</p>
<p>To specify a <code>batch_size</code> value of <code>PRIMARY_KEY_RANGE</code>, you must first generate either histogram statistics (for columns of type <code>NUMBER</code>, <code>INTEGER</code>, <code>DATE</code>, <code>TIMESTAMP</code>, <code>CHAR</code>, or <code>VARCHAR2</code>) or general statistics (for columns of type <code>NUMBER</code>, <code>INTEGER</code>, <code>DATE</code>, or <code>TIMESTAMP</code>) on the first column of the primary key. The procedure DBMS_STATS.GATHER_TABLE_STATS generates general statistics. If general but not histogram statistics are available for columns of type <code>NUMBER</code>, <code>INTEGER</code>, <code>DATE</code>, or <code>TIMESTAMP</code>, the Workspace Manager system parameter <code>NUMBER_OF_COMPRESS_BATCHES</code> is used to compute the number of batches when <code>batch_size</code> is specified as <code>PRIMARY_KEY_RANGE</code>. For more information about statistics, see <a class="olink TGDBA" href="../TGDBA/toc.htm"><span class="italic">Oracle Database Performance Tuning Guide</span></a>.</p>
<p>An exception is raised if one or more of the following apply:</p>
<ul>
<li>
<p>One or more sessions are already in <code>workspace</code> (unless the workspace is <code>LIVE</code>).</p>
</li>
<li>
<p><code>workspace</code> does not exist.</p>
</li>
<li>
<p><code>savepoint_name</code> does not exist.</p>
</li>
<li>
<p><code>savepoint_name</code> is not a removable savepoint. (Removable savepoints are explained in <a href="long_intro.htm#i1012409">Section 1.1.2</a>.)</p>
</li>
<li>
<p><code>auto_commit</code> is <code>TRUE</code> and an open transaction exists in a parent or child workspace of any table that needs to be modified.</p>
</li>
<li>
<p>The user does not have the privilege to go to the specified workspace.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref479"></a>Examples</p>
<p>The following example deletes a savepoint named <code>Savepoint1</code> in the <code>NEWWORKSPACE</code> workspace.</p>
<pre>EXECUTE DBMS_WM.DeleteSavepoint (&#39;NEWWORKSPACE&#39;, &#39;Savepoint1&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78994"></a>
<div id="ADWSM99287" class="refsect1">
<h2 class="refsect1"><a id="sthref480"></a><a id="sthref481"></a><a id="sthref482"></a>DisableVersioning</h2>
<p>Deletes all support structures that were created to enable the table to support versioned rows.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref483"></a>Syntax</p>
<pre>DBMS_WM.DisableVersioning(
   table_name         IN VARCHAR2,
   force              IN BOOLEAN DEFAULT FALSE,
   ignore_last_error  IN BOOLEAN DEFAULT FALSE,
   isTopology         IN BOOLEAN DEFAULT FALSE,
   keepWMValid        IN BOOLEAN DEFAULT TRUE,
   undo_space         IN VARCHAR2 DEFAULT NULL;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref484"></a>Parameters</p>
<div id="ADWSM99288" class="tblformal">
<p class="titleintable"><a id="sthref485"></a><a id="sthref486"></a>Table 4-21 DisableVersioning Procedure Parameters</p>
<table class="cellalignment5786" title="DisableVersioning Procedure Parameters" summary="DisableVersioning Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t24">Parameter</th>
<th class="cellalignment5787" id="r1c2-t24">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t24" headers="r1c1-t24">
<pre>table_name
</pre></td>
<td class="cellalignment5788" headers="r2c1-t24 r1c2-t24">
<p>Name of the table or (if <code>isTopology</code> is <code>TRUE</code>) Oracle Spatial and Graph topology, or a comma-delimited list of names of tables related by multilevel referential integrity constraints. (Multilevel referential integrity constraints are explained in <a href="long_intro.htm#i1005885">Section 1.9.1</a>.) Table names are not case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t24" headers="r1c1-t24">
<pre>force
</pre></td>
<td class="cellalignment5788" headers="r3c1-t24 r1c2-t24">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> forces all data in workspaces other than <code>LIVE</code> to be discarded before versioning is disabled.</p>
<p><code>FALSE</code> <code>(</code>the default) prevents versioning from being disabled if <code>table_name</code> was modified in any workspace other than <code>LIVE</code> and if the workspace that modified <code>table_name</code> still exists.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t24" headers="r1c1-t24">
<pre>ignore_last_error
</pre></td>
<td class="cellalignment5788" headers="r4c1-t24 r1c2-t24">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> ignores the last error, if any, that occurred during the previous call to the DisableVersioning procedure. Information about the last error is stored in the <a href="long_views.htm#i89006">USER_WM_VT_ERRORS</a> and <a href="long_views.htm#i89005">ALL_WM_VT_ERRORS</a> static data dictionary views, which are described in <a href="long_views.htm#g1008700">Chapter 5</a>. See the Usage Notes for more information.</p>
<p><code>FALSE</code> <code>(</code>the default) does not ignore the last error, if any, that occurred during the previous call to the DisableVersioning procedure.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r5c1-t24" headers="r1c1-t24">
<pre>isTopology
</pre></td>
<td class="cellalignment5788" headers="r5c1-t24 r1c2-t24">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> indicates that the value specified for the <code>table_name</code> parameter is the name of an Oracle Spatial and Graph topology (not a database table name), as explained in <a href="long_intro.htm#i1020573">Section 1.14</a>.</p>
<p><code>FALSE</code> (the default) indicates that the value specified for the <code>table_name</code> parameter is not an Oracle Spatial and Graph topology name.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r6c1-t24" headers="r1c1-t24">
<pre>keepWMValid
</pre></td>
<td class="cellalignment5788" headers="r6c1-t24 r1c2-t24">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>). Applies only if valid time support (described in <a href="long_vt.htm#g1014747">Chapter 3</a>) has been enabled for the table.</p>
<p><code>TRUE</code> (the default) causes the <code>WM_VALID</code> column and all data in that column to be kept in the table after the procedure completes.</p>
<p><code>FALSE</code> causes the <code>WM_VALID</code> column to be dropped and all data in that column deleted as a result of the procedure. Only the current row for each primary key value is kept.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r7c1-t24" headers="r1c1-t24">
<pre>undo_space
</pre></td>
<td class="cellalignment5788" headers="r7c1-t24 r1c2-t24">
<p>The string <code>UNLIMITED</code> (for no specified limit) or a number representing the maximum number of bytes for undo space available for the version-enable operation. Example: <code>&#39;1048576&#39;</code> for 1 megabyte. Any value specified overrides the value of the <code>UNDO_SPACE</code> Workspace Manager system parameter (described in <a href="long_intro.htm#i1017681">Section 1.5</a>).</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref487"></a>Usage Notes</p>
<p>This procedure is used to reverse the effect of the <a href="#i80309">EnableVersioning</a> procedure. It deletes the Workspace Manager infrastructure (support structures) for versioning of rows, but does not affect any user data in the <code>LIVE</code> workspace. The workspace hierarchy and any savepoints still exist, but all rows are the same as in the <code>LIVE</code> workspace. (If there are multiple versions in the <code>LIVE</code> workspace of a row in the table for which versioning is disabled, only the most recent version of the row is kept.)</p>
<p>If <code>table_name</code> has valid time support (described in <a href="long_vt.htm#g1014747">Chapter 3</a>), this procedure deletes the <code>WM_VALID</code> column and all data in that column. If deleting the <code>WM_VALID</code> column would cause a primary key constraint violation, only the row valid at the current time is retained.</p>
<p>If a call to the DisableVersioning procedure fails, the table is left in an inconsistent state. If this occurs, you should try to fix the cause of the error (examine the <a href="long_views.htm#i89006">USER_WM_VT_ERRORS</a> and <a href="long_views.htm#i89005">ALL_WM_VT_ERRORS</a> static data dictionary views to see the SQL statement and error message), and then call the DisableVersioning procedure again with the default <code>ignore_last_error</code> parameter value of <code>FALSE</code>. However, if the call still fails and you cannot fix the cause of the error, and if you are sure that it is safe and appropriate to ignore this error, then you have the option to ignore the error by calling the DisableVersioning procedure with the <code>ignore_last_error</code> parameter value of <code>TRUE</code>. Note that you are responsible for ensuring that it is safe and appropriate to ignore the error.</p>
<p>Some causes for the failure of the DisableVersioning procedure include the following:</p>
<ul>
<li>
<p>The table contains much data in workspaces and the size of the undo tablespace required for the DisableVersioning procedure is not sufficient.</p>
</li>
<li>
<p>A compilation error occurred while transferring user-defined triggers from the version-enabled table to the version-disabled table.</p>
</li>
</ul>
<p>The DisableVersioning operation fails if the <code>force</code> value is <code>FALSE</code> and any of the following apply:</p>
<ul>
<li>
<p>The table is being modified by any user in any workspace other than the <code>LIVE</code> workspace.</p>
</li>
<li>
<p>There are versioned rows of the table in any workspace other than the <code>LIVE</code> workspace.</p>
</li>
</ul>
<p>Only the owner of a table or a user with the <code>WM_ADMIN</code> system privilege can disable versioning on the table.</p>
<p>Tables that are version-enabled and users that own version-enabled tables cannot be deleted. You must first disable versioning on the relevant table or tables.</p>
<p>An exception is raised if the table is not version-enabled.</p>
<p>If you want to disable versioning on a table in an Oracle replication environment, see <a href="long_repl.htm#i634687">Section C.2</a> for guidelines and other information.</p>
<p>For information about Workspace Manager support for tables in an Oracle Spatial and Graph topology, see <a href="long_intro.htm#i1020573">Section 1.14</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref488"></a>Examples</p>
<p>The following example disables the <code>EMPLOYEE</code> table for versioning.</p>
<pre>EXECUTE DBMS_WM.DisableVersioning (&#39;employee&#39;);
</pre>
<p>The following example disables the <code>EMPLOYEE</code> table for versioning and ignores the last error that occurred during the previous call to the DisableVersioning procedure.</p>
<pre>EXECUTE DBMS_WM.DisableVersioning (&#39;employee&#39;, ignore_last_error =&gt; true);
</pre>
<p>The following example disables the <code>EMPLOYEE</code>, <code>DEPARTMENT</code>, and <code>LOCATION</code> tables (which have multilevel referential integrity constraints) for versioning.</p>
<pre>EXECUTE DBMS_WM.DisableVersioning(&#39;employee,department,location&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i99531"></a>
<div id="ADWSM99289" class="refsect1">
<h2 class="refsect1"><a id="sthref489"></a><a id="sthref490"></a><a id="sthref491"></a>DropReplicationSupport</h2>
<p>Deletes replication support objects that were created by the <a href="#i99479">GenerateReplicationSupport</a> procedure.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref492"></a>Syntax</p>
<pre>DBMS_WM.DropReplicationSupport();
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref493"></a>Parameters</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref494"></a>Usage Notes</p>
<p>To use this procedure, you must understand how replication applies to Workspace Manager objects, as explained in <a href="long_repl.htm#g635775">Appendix C</a>. You must also understand the major Oracle replication concepts and techniques, which are documented in <a class="olink REPLN" href="../REPLN/toc.htm"><span class="italic">Oracle Database Advanced Replication</span></a> and <a class="olink REPMA" href="../REPMA/toc.htm"><span class="italic">Oracle Database Advanced Replication Management API Reference</span></a>.</p>
<p>You must execute this procedure as the replication administrator user at the writer site.</p>
<p>This procedure drops replication support for any version-enabled tables at the nonwriter sites; however, it does not version-disable any version-enabled tables.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref495"></a>Examples</p>
<p>The following example drops replication support that had previously been enabled using the <a href="#i99479">GenerateReplicationSupport</a> procedure.</p>
<pre>DBMS_WM.DropReplicationSupport();
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i80309"></a>
<div id="ADWSM99290" class="refsect1">
<h2 class="refsect1"><a id="sthref496"></a><a id="sthref497"></a><a id="sthref498"></a>EnableVersioning</h2>
<p>Version-enables a table, creating the necessary structures to enable the table to support multiple versions of rows.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref499"></a>Syntax</p>
<pre>DBMS_WM.EnableVersioning(
   table_name     IN VARCHAR2,
   hist           IN VARCHAR2 DEFAULT &#39;NONE&#39;,
   isTopology     IN BOOLEAN DEFAULT FALSE,
   validTime      IN BOOLEAN DEFAULT FALSE,
   undo_space     IN VARCHAR2 DEFAULT NULL,
   validTimeRange IN WM_PERIOD DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref500"></a>Parameters</p>
<div id="ADWSM99291" class="tblformal">
<p class="titleintable"><a id="sthref501"></a><a id="sthref502"></a>Table 4-22 EnableVersioning Procedure Parameters</p>
<table class="cellalignment5786" title="EnableVersioning Procedure Parameters" summary="EnableVersioning Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t25">Parameter</th>
<th class="cellalignment5787" id="r1c2-t25">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t25" headers="r1c1-t25">
<pre>table_name
</pre></td>
<td class="cellalignment5788" headers="r2c1-t25 r1c2-t25">
<p>Name of the table or (if <code>isTopology</code> is <code>TRUE</code>) Oracle Spatial and Graph topology, or a comma-delimited list of names of tables related by multilevel referential integrity constraints. (Multilevel referential integrity constraints are explained in <a href="long_intro.htm#i1005885">Section 1.9.1</a>.) The length of a table name must not exceed 25 characters. The table must not contain any columns with names that start with <span class="italic">WM_</span> or <span class="italic">WM$</span>. The table name and any column names must not contain any characters that need to be quoted, such as (but not restricted to) <code>!</code>, <code>?</code>, or <code>*</code>. The table name is not case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t25" headers="r1c1-t25">
<pre>hist
</pre></td>
<td class="cellalignment5788" headers="r3c1-t25 r1c2-t25">
<p><a id="sthref503"></a>History option, for tracking modifications to <code>table_name</code>. Must be one of the following values:</p>
<p><code>NONE</code>: The timestamps for modifications to the table are not tracked. (This is the default.) A view named <code>&lt;table_name&gt;_HIST</code> (described in <a href="long_views.htm#i87609">Section 5.53</a>) is created to contain limited history information, but it will show only the most recent modifications to the same version of the table, and it will not contain the WM_CREATETIME and WM_RETIRETIME columns. A history of modifications to the version is not maintained; that is, subsequent changes to a row in the same version overwrite earlier changes.</p>
<p><code>VIEW_W_OVERWRITE</code>: The <span class="italic">with</span> overwrite (<span class="italic">W</span>_OVERWRITE) option. A view named <code>&lt;table_name&gt;_HIST</code> (described in <a href="long_views.htm#i87609">Section 5.53</a>) is created to contain history information, but it will show only the most recent modifications to the same version of the table. A history of modifications to the version is not maintained; that is, subsequent changes to a row in the same version overwrite earlier changes.</p>
<p><code>VIEW_WO_OVERWRITE</code>: The <span class="italic">without</span> overwrite (<span class="italic">WO</span>_OVERWRITE) option. A view named <code>&lt;table_name&gt;_HIST</code> (described in <a href="long_views.htm#i87609">Section 5.53</a>) is created to contain history information, and it will show all modifications to the same version of the table. A history of modifications to the version is maintained; that is, subsequent changes to a row in the same version do not overwrite earlier changes.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t25" headers="r1c1-t25">
<pre>isTopology
</pre></td>
<td class="cellalignment5788" headers="r4c1-t25 r1c2-t25">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> indicates that the value specified for the <code>table_name</code> parameter is the name of an Oracle Spatial and Graph topology (not a database table name), as explained in <a href="long_intro.htm#i1020573">Section 1.14</a>.</p>
<p><code>FALSE</code> (the default) indicates that the value specified for the <code>table_name</code> parameter is not an Oracle Spatial and Graph topology name.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r5c1-t25" headers="r1c1-t25">
<pre>validTime
</pre></td>
<td class="cellalignment5788" headers="r5c1-t25 r1c2-t25">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> causes valid time support to be included. Workspace Manager valid time support is explained in <a href="long_vt.htm#g1014747">Chapter 3</a>.</p>
<p><code>FALSE</code> (the default) causes valid time support not to be included.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r6c1-t25" headers="r1c1-t25">
<pre>undo_space
</pre></td>
<td class="cellalignment5788" headers="r6c1-t25 r1c2-t25">
<p>A string containing <code>UNLIMITED</code> (for no specified limit) or a number representing the maximum number of bytes for undo space available for the version-enable operation. Example: <code>&#39;1048576&#39;</code> for 1 megabyte. Any value specified overrides the value of the <code>UNDO_SPACE</code> Workspace Manager system parameter (described in <a href="long_intro.htm#i1017681">Section 1.5</a>).</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r7c1-t25" headers="r1c1-t25">
<pre>validTimeRange
</pre></td>
<td class="cellalignment5788" headers="r7c1-t25 r1c2-t25">
<p>An object of type <code>WM_PERIOD</code> (explained in <a href="long_vt.htm#i1010219">Section 3.2</a>) that specifies the initial valid time range for the <code>WM_VALID</code> column. If you specify a value, you must also specify the <code>validTime</code> parameter value as <code>TRUE</code>. By default, if valid time support is included, the valid time range is from the current system time and until changed.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref504"></a>Usage Notes</p>
<p>The table that is being version-enabled must have a primary key defined. The primary key can be a composite (multicolumn) primary key.</p>
<p>Only the owner of a table or a user with the <code>WM_ADMIN</code> system privilege can enable versioning on the table.</p>
<p>Tables that are version-enabled and users that own version-enabled tables cannot be deleted. You must first disable versioning on the relevant table or tables.</p>
<p>Tables owned by <code>SYS</code> cannot be version-enabled, and version-enabled tables cannot have any associated indexes or triggers owned by <code>SYS</code>.</p>
<p>An exception is raised if one or more of the following apply:</p>
<ul>
<li>
<p><code>table_name</code> is already version-enabled.</p>
</li>
<li>
<p><code>table_name</code> contains a list of tables and any of the tables has a referential integrity constraint with a table that is not in the list.</p>
</li>
<li>
<p><code>table_name</code> contains any columns whose names start with <span class="italic">WM_</span> or <span class="italic">WM$</span>.</p>
</li>
<li>
<p><code>table_name</code> or the name of any related object of the table (including columns, indexes, and triggers) contains any quoted identifiers.</p>
</li>
</ul>
<p>If the table is version-enabled with the <code>VIEW_WO_OVERWRITE</code> <span class="italic">hist</span> option specified, this option can later be disabled and re-enabled by calling the <a href="#i89852">SetWoOverwriteOFF</a> and <a href="#i89736">SetWoOverwriteON</a> procedures.</p>
<p><a id="sthref505"></a><a id="sthref506"></a>The history option enables you to log and audit modifications.</p>
<p>The history option affects the behavior of the <a href="#i90546">GotoDate</a> procedure. See the Usage Notes for that procedure.</p>
<p>If you expect to purge a subset of your historical data periodically, such as removing historical data older than one year, plan to create a savepoint at each expected deletion point on the day it occurs. For example, if you plan to purge 2005 historical data when it is a year old, you need to create a savepoint on January 1, 2006. Then, on January 1, 2007 you can call the <a href="#i86067">CompressWorkspace</a> procedure, specifying the workspace name and the January 1, 2006 savepoint, to delete all history that occurred before 2006</p>
<p>If you want to version-enable a table in an Oracle replication environment, see <a href="long_repl.htm#i634687">Section C.2</a> for guidelines and other information.</p>
<p>For information about Workspace Manager support for tables in an Oracle Spatial and Graph topology, see <a href="long_intro.htm#i1020573">Section 1.14</a>.</p>
<p>Current notes and restrictions include the following:</p>
<ul>
<li>
<p>If you have referential integrity constraints on version-enabled tables, note the considerations and restrictions in <a href="long_intro.htm#i1005885">Section 1.9.1</a>.</p>
</li>
<li>
<p>If you have triggers defined on version-enabled tables, note the considerations and restrictions in <a href="long_intro.htm#i1006223">Section 1.10</a>.</p>
</li>
<li>
<p>Constraints and privileges defined on the table are carried over to the version-enabled table.</p>
</li>
<li>
<p>DDL operations on version-enabled tables are subject to the procedures and restrictions described in <a href="long_intro.htm#i1009427">Section 1.8</a>.</p>
</li>
<li>
<p>Index-organized tables cannot be version-enabled.</p>
</li>
<li>
<p>Object tables cannot be version-enabled.</p>
</li>
<li>
<p>A table with one or more columns of LONG data type cannot be version-enabled.</p>
</li>
<li>
<p>A table with one or more nested table columns cannot be version-enabled unless the <code>ALLOW_NESTED_TABLE_COLUMNS</code> Workspace Manager system parameter is set to <code>ON</code>.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref507"></a>Examples</p>
<p>The following example enables versioning on the <code>EMPLOYEE</code> table.</p>
<pre>EXECUTE DBMS_WM.EnableVersioning(&#39;employee&#39;);
</pre>
<p>The following example enables versioning on the <code>EMPLOYEE</code>, <code>DEPARTMENT</code>, and <code>LOCATION</code> tables, which have multilevel referential integrity constraints.</p>
<pre>EXECUTE DBMS_WM.EnableVersioning(&#39;employee,department,location&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i114714"></a>
<div id="ADWSM99292" class="refsect1">
<h2 class="refsect1"><a id="sthref508"></a><a id="sthref509"></a>Export</h2>
<p>Exports data from a version-enabled table (all rows, or as limited by any combination of several parameters) to a staging table.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref510"></a>Syntax</p>
<pre>DBMS_WM.Export(
   table_name          IN VARCHAR2,
   staging_table       IN VARCHAR2,
   workspace           IN VARCHAR2,
   where_clause        IN VARCHAR2 DEFAULT NULL,
   export_scope        IN VARCHAR2 DEFAULT DBMS_WM.EXPORT_MODIFIED_DATA_ONLY,
   after_savepoint_name  IN VARCHAR2 DEFAULT NULL,
   as_of_savepoint_name  IN VARCHAR2 DEFAULT NULL,
   after_instant       IN DATE DEFAULT NULL,
   as_of_instant       IN DATE DEFAULT NULL,
   versioned_db        IN BOOLEAN DEFAULT TRUE,
   overwrite_existing_data  IN BOOLEAN DEFAULT FALSE,
   auto_commit         IN BOOLEAN DEFAULT TRUE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref511"></a>Parameters</p>
<div id="ADWSM99293" class="tblformal">
<p class="titleintable"><a id="sthref512"></a><a id="sthref513"></a>Table 4-23 Export Procedure Parameters</p>
<table class="cellalignment5786" title="Export Procedure Parameters" summary="Export Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t26">Parameter</th>
<th class="cellalignment5787" id="r1c2-t26">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t26" headers="r1c1-t26">
<pre>table_name
</pre></td>
<td class="cellalignment5788" headers="r2c1-t26 r1c2-t26">
<p>Name of the table containing the data to be exported. The name is not case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t26" headers="r1c1-t26">
<pre>staging_table
</pre></td>
<td class="cellalignment5788" headers="r3c1-t26 r1c2-t26">
<p>Name of the table to hold the exported data. Must not exceed 25 characters. The name is not case-sensitive. If the table does not exist, a new table with this name is created, with a structure suitable for Workspace Manager export and import operations. (See the Usage Notes for more information about the staging table.)</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t26" headers="r1c1-t26">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r4c1-t26 r1c2-t26">
<p>Name of the workspace from which to export the data. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r5c1-t26" headers="r1c1-t26">
<pre>where_clause
</pre></td>
<td class="cellalignment5788" headers="r5c1-t26 r1c2-t26">
<p>The <code>WHERE</code> clause (excluding the <code>WHERE</code> keyword) identifying the rows to be exported. Example: <code>&#39;department_id = 20&#39;</code></p>
<p>Only primary key columns can be specified in the <code>WHERE</code> clause, except in a subquery. The subquery can refer to columns that are not primary keys, but it cannot refer to a version-enabled table.</p>
<p>If the <code>where_clause</code> parameter is not specified, all rows in <code>table_name</code> are exported.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r6c1-t26" headers="r1c1-t26">
<pre>export_scope
</pre></td>
<td class="cellalignment5788" headers="r6c1-t26 r1c2-t26">
<p>The scope (amount of data) for the export operation.</p>
<p><code>DBMS_WM.EXPORT_ALL_DATA</code> exports all relevant data in <code>workspace</code>.</p>
<p><code>DBMS_WM.EXPORT_MODIFIED_DATA_ONLY</code> (the default) exports only relevant data that was inserted, updated, or deleted in <code>workspace</code>.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r7c1-t26" headers="r1c1-t26">
<pre>after_savepoint_name
</pre></td>
<td class="cellalignment5788" headers="r7c1-t26 r1c2-t26">
<p>Name of a savepoint: only data inserted, updated, or deleted after this savepoint is exported.</p>
<p>If you do not specify <code>after_savepoint_name</code> or <code>as_of_savepoint_name</code>, savepoints are ignored in determining the data to be exported.</p>
<p>See the Usage Notes for guidelines relating to the savepoint-related and instant-related parameters.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r8c1-t26" headers="r1c1-t26">
<pre>as_of_savepoint_name
</pre></td>
<td class="cellalignment5788" headers="r8c1-t26 r1c2-t26">
<p>Name of a savepoint: only data in the workspace at the time the savepoint was created is exported.</p>
<p>If you do not specify <code>after_savepoint_name</code> or <code>as_of_savepoint_name</code>, savepoints are ignored in determining the data to be exported.</p>
<p>See the Usage Notes for guidelines relating to the savepoint-related and instant-related parameters.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r9c1-t26" headers="r1c1-t26">
<pre>after_instant
</pre></td>
<td class="cellalignment5788" headers="r9c1-t26 r1c2-t26">
<p>Date/time specification: only data inserted, updated, or deleted after this time is exported.</p>
<p>If you do not specify <code>after_instant</code> or <code>as_of_instant</code>, time is ignored in determining the data to be exported.</p>
<p>See the Usage Notes for guidelines relating to the savepoint-related and instant-related parameters.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r10c1-t26" headers="r1c1-t26">
<pre>as_of_instant
</pre></td>
<td class="cellalignment5788" headers="r10c1-t26 r1c2-t26">
<p>Date/time specification: only data that was in the workspace at this time is exported.</p>
<p>If you do not specify <code>after_instant</code> or <code>as_of_instant</code>, time is ignored in determining the data to be exported.</p>
<p>See the Usage Notes for guidelines relating to the savepoint-related and instant-related parameters.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r11c1-t26" headers="r1c1-t26">
<pre>versioned_db
</pre></td>
<td class="cellalignment5788" headers="r11c1-t26 r1c2-t26">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> (the default) creates a staging table that contains versioning information.</p>
<p><code>FALSE</code> creates a staging table that contains only user-defined columns and user-visible data.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r12c1-t26" headers="r1c1-t26">
<pre>overwrite_existing_data
</pre></td>
<td class="cellalignment5788" headers="r12c1-t26 r1c2-t26">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> overwrites existing data in the staging table with the data that is exported.</p>
<p><code>FALSE</code> (the default) preserves all existing data in the staging table, and raises an exception if the exported data conflicts with the existing data.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r13c1-t26" headers="r1c1-t26">
<pre>auto_commit
</pre></td>
<td class="cellalignment5788" headers="r13c1-t26 r1c2-t26">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> (the default) causes the operation to be executed as an autonomous database transaction that will be committed when it finishes.</p>
<p><code>FALSE</code> causes the operation to be executed as part of the caller&#39;s open database transaction (if one exists). If there is no open database transaction, the operation is executed in a new database transaction. In either case, the caller is responsible for committing the transaction. For more information, see <a href="long_intro.htm#i1014370">Section 1.1.8</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref514"></a>Usage Notes</p>
<p>All data that satisfies the <code>where_clause</code> in the version-enabled table <code>table_name</code>, the <code>export_scope</code> parameter, and any parameters relating to a time or a savepoint in <code>workspace</code> is exported to the staging table (<code>staging_table</code> parameter).</p>
<p>Each row of data to be exported is considered to be one of the following: inserted, updated, or deleted in <code>workspace</code> (that is, <span class="italic">modified data</span>); or data that was not modified in <code>workspace</code> but can be seen in it (that is, <span class="italic">ancestor data</span>). If data is exported from the <code>LIVE</code> workspace, it is all modified data. If a workspace is created and no data has yet been versioned in it, and the Export procedure is called, all the data is ancestor data.</p>
<p>The first time you export data from a version-enabled table, the staging table should not exist; that is, do not try to create a staging table, but let the procedure create one for you using the name specified for the <code>staging_table</code> parameter. The staging table will contain all columns in the original table (<code>table_name</code> parameter), plus some columns for use by Workspace Manager.</p>
<p>After the staging table is created, you can use it for subsequent export operations from the original table, as long as you have not done any of the following DDL operations on the original table: altered any column names or data types, or modified or deleted the primary key constraint. If you have made any of these alterations to the original table, drop the staging table before you call the Export procedure, so that Workspace Manager can create a new staging table. (If you want to overwrite data in an existing staging table, you must also specify <code>overwrite_existing_data</code> as <code>TRUE</code>.)</p>
<p>The staging table must be in the current user&#39;s schema; or if it is in another schema, the current user must have the <code>CREATE ANY TABLE</code> and <code>INSERT ANY TABLE</code> privileges.</p>
<p>It is recommended that you specify no more than one of the following savepoint-related and instant-related parameters: <code>after_savepoint_name</code>, <code>as_of_savepoint_name</code>, <code>after_instant</code>, <code>as_of_instant</code>. If you specify <code>after_savepoint_name</code> and <code>after_instant</code>, the interaction of the two parameters can have complex results. You cannot specify the following parameter combinations: <code>after_savepoint_name</code> and <code>as_of_savepoint_name</code>, <code>after_instant</code> and <code>as_of_instant</code>, or <code>as_of_savepoint_name</code> and <code>as_of_instant</code>.</p>
<p>An exception is raised if one or more of the following apply:</p>
<ul>
<li>
<p>A specified table, workspace, or savepoint does not exist.</p>
</li>
<li>
<p><code>table_name</code> contains a nested table column.</p>
</li>
<li>
<p><code>table_name</code> contains a column named WM_VALID of type WM_PERIOD. (That is, this procedure is not supported for tables with valid time support, which is explained in <a href="long_vt.htm#g1014747">Chapter 3</a>.)</p>
</li>
<li>
<p><code>staging_table</code> exists but is not in a valid format for the export operation.</p>
</li>
<li>
<p><code>staging_table</code> is not in the current user&#39;s schema and the current user does not have the <code>CREATE TABLE</code> and <code>INSERT TABLE</code> privileges.</p>
</li>
<li>
<p>The user does not have the <code>ACCESS_WORKSPACE</code> privilege for <code>workspace</code> or the <code>ACCESS_ANY_WORKSPACE</code> privilege.</p>
</li>
<li>
<p><code>overwrite_existing_data</code> is <code>FALSE</code> and data that needs to be exported already exists in <code>staging_table</code>.</p>
</li>
<li>
<p><code>auto_commit</code> is <code>TRUE</code> and an open transaction exists in a parent or child workspace of any table that needs to be modified.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref515"></a>Examples</p>
<p>The following example exports all data from the <code>COLA_MARKETING_BUDGET</code> table in workspace <code>B_Focus_2</code> into the staging table <code>COLA_MARKETING_BUDGET_STG</code>. (The <code>EXECUTE</code> statement is actually on a single line.)</p>
<pre>EXECUTE DBMS_WM.Export(table_name =&gt; &#39;COLA_MARKETING_BUDGET&#39;, staging_table =&gt; &#39;COLA_MARKETING_BUDGET_STG&#39;, workspace =&gt; &#39;B_focus_2&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACCAGBB"></a>
<div id="ADWSM99504" class="refsect1">
<h2 class="refsect1"><a id="sthref516"></a><a id="sthref517"></a>Export_Schemas</h2>
<p>Creates a dump file containing everything related to Workspace Manager. Uses the Oracle Data Pump Export utility.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref518"></a>Syntax</p>
<pre>DBMS_WM.Export_Schemas(
   job_name           IN VARCHAR2,
   alt_schema         IN VARCHAR2 DEFAULT &#39;WMSYS_N&#39;,
   ignore_last_error  IN BOOLEAN DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref519"></a>Parameters</p>
<div id="ADWSM99505" class="tblformal">
<p class="titleintable"><a id="sthref520"></a><a id="sthref521"></a>Table 4-24 Export_Schemas Procedure Parameters</p>
<table class="cellalignment5786" title="Export_Schemas Procedure Parameters" summary="Export_Schemas Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t27">Parameter</th>
<th class="cellalignment5787" id="r1c2-t27">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t27" headers="r1c1-t27">
<pre>table_name
</pre></td>
<td class="cellalignment5788" headers="r2c1-t27 r1c2-t27">
<p>Name of the Data Pump job to be used for the export operation.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t27" headers="r1c1-t27">
<pre>alt_schema
</pre></td>
<td class="cellalignment5788" headers="r3c1-t27 r1c2-t27">
<p>Name of the database schema to be used for temporary storage of Workspace Manager metadata. The default is <code>WMSYS_N</code>. This schema must not already exist when the procedure is called, and it is automatically dropped when the procedure completes successfully.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t27" headers="r1c1-t27">
<pre>ignore_last_error
</pre></td>
<td class="cellalignment5788" headers="r4c1-t27 r1c2-t27">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> ignores the last error, if any, that occurred during the previous call to the Export_Schemas procedure. Information about the last error is stored in the <a href="long_views.htm#BABCGBFG">DBA_WM_VT_ERRORS</a> static data dictionary view, which is described in <a href="long_views.htm#g1008700">Chapter 5</a>. See the Usage Notes for more information.</p>
<p><code>FALSE</code> <code>(</code>the default) does not ignore the last error, if any, that occurred during the previous call to the Export_Schemas procedure.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref522"></a>Usage Notes</p>
<p>This procedure creates a dump file that contains all of the schemas that contain a version-enabled table or a parent table in a referential integrity constraint of a version-enabled table, as well as any internal Workspace Manager metadata. For any included schema, all objects and data within the schema are included in the dump file, not just the objects related to Workspace Manager. All other schemas are excluded.</p>
<p>This procedure makes use of an already existing Data Pump Export job. When you create this job using the <code>DBMS_DATAPUMP.OPEN</code> procedure, the <code>operation</code> parameter must be set to <code>EXPORT</code> and the <code>mode</code> parameter must be set to <code>SCHEMA</code>. The dump file or files and log file should also be specified before you call <code>DBMS_WM.Export_Schemas</code>. No procedures that modify or limit what gets exported (such as <code>DBMS_DATAPUMP.METADATA_FILTER</code>) should be executed on this job.</p>
<p>Because the WMSYS schema cannot be exported by the Oracle Data Pump Export utility, a temporary schema is required to hold some of the required data. This schema, specified by the <code>alt_schema</code> parameter, cannot exist before you call this procedure. Because this schema will be included within the generated dump file, it should be a schema that does <span class="italic">not</span> exist on the target database.</p>
<p>For information about using the Data Pump Utility, see <a class="olink SUTIL" href="../SUTIL/toc.htm"><span class="italic">Oracle Database Utilities</span></a>.</p>
<p>If a call to the Export_Schemas procedure fails, you should try to fix the cause of the error. Examine the <a href="long_views.htm#BABCGBFG">DBA_WM_VT_ERRORS</a> static data dictionary view to see the SQL statement and error message. Fix the cause of the error, and then call the Export_Schemas procedure again with the default <code>ignore_last_error</code> parameter value of <code>FALSE</code>. However, if the call still fails and you cannot fix the cause of the error, and if you are sure that it is safe and appropriate to ignore this error, then you can ignore the error by calling the Export_Schemas procedure with the <code>ignore_last_error</code> parameter value of <code>TRUE</code>. Note that you are responsible for ensuring that it is safe and appropriate to ignore the error.</p>
<p>An exception is raised if one or more of the following apply:</p>
<ul>
<li>
<p><code>job_name</code> does not exist.</p>
</li>
<li>
<p><code>alt_schema</code> already exists.</p>
</li>
<li>
<p>The executing user does not have DBA privileges.</p>
</li>
<li>
<p>Errors exist in the <code>WMSYS</code> schema or in any required user schemas.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref523"></a>Examples</p>
<p>The following example exports the Workspace Manager metadata using the Oracle Data Pump job named <code>EXPORT_OWM_SCHEMAS</code>. It assumes that the <code>DUMP_DIR</code> directory has already been created.</p>
<pre>DECLARE
  job_name  varchar2(128) := &#39;EXPORT_OWM_SCHEMAS&#39; ;
  dpj  number ;
BEGIN
  dpj := dbms_datapump.open(&#39;EXPORT&#39;, &#39;SCHEMA&#39;, null, job_name, &#39;COMPATIBLE&#39;) ;
  dbms_datapump.add_file(dpj, &#39;owm_schema.dmp&#39;, &#39;DUMP_DIR&#39;) ;
  dbms_datapump.add_file(dpj, &#39;owm_schema_export.log&#39;, &#39;DUMP_DIR&#39;, filetype=&gt;dbms_datapump.KU$_FILE_TYPE_LOG_FILE) ;
  dbms_wm.export_schemas(job_name) ;
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="ADWSM99294" class="refsect1"><a id="sthref524"></a>
<h2 class="refsect1"><a id="sthref525"></a><a id="sthref526"></a><a id="sthref527"></a>FindRICSet</h2>
<p>Finds tables that need to be version-enabled along with a specified table, due to referential integrity constraint relationships.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref528"></a>Syntax</p>
<pre>DBMS_WM.FindRICSet(
   table_name    IN VARCHAR2,
   result_table  IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref529"></a>Parameters</p>
<div id="ADWSM99295" class="tblformal">
<p class="titleintable"><a id="sthref530"></a><a id="sthref531"></a>Table 4-25 FindRICSet Procedure Parameters</p>
<table class="cellalignment5786" title="FindRICSet Procedure Parameters" summary="FindRICSet Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t28">Parameter</th>
<th class="cellalignment5787" id="r1c2-t28">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t28" headers="r1c1-t28">
<pre>table_name
</pre></td>
<td class="cellalignment5788" headers="r2c1-t28 r1c2-t28">
<p>Name of the table for which to find all other tables that will need to be version-enabled along with it, because of referential integrity constraint relationships. The name is not case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t28" headers="r1c1-t28">
<pre>result_table
</pre></td>
<td class="cellalignment5788" headers="r3c1-t28 r1c2-t28">
<p>Name of the table to hold the results. The name is not case-sensitive.</p>
<p>This table must have two columns, <code>TABLE_OWNER</code> and <code>TABLE_NAME</code>, both of type <code>VARCHAR2</code>. If the table does not exist, a new table with this name and the required columns is created.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref532"></a>Usage Notes</p>
<p>Workspace Manager has several considerations relating to referential integrity constraints, as explained in <a href="long_intro.htm#i1005885">Section 1.9.1</a>. Sometimes, before you can version-enable a table, you must version-enable other tables that are in referential integrity constraints affecting the table. The <code>FindRICSet</code> procedure enables you to find all these other tables.</p>
<p>To display the results, use the <code>SET SERVEROUTPUT ON</code> statement before calling this procedure.</p>
<p>If the result table is not in the current user&#39;s schema, the following requirements apply:</p>
<ul>
<li>
<p>If the result table does not exist, the current user must have the <code>CREATE ANY TABLE</code> privilege.</p>
</li>
<li>
<p>If the result table already exists, the current user must have the required privileges to insert into the table.</p>
</li>
</ul>
<p>An exception is raised if one or more of the following apply:</p>
<ul>
<li>
<p><code>table_name</code> does not exist.</p>
</li>
<li>
<p><code>result_table</code> exists but is not in a valid format.</p>
</li>
<li>
<p><code>result_table</code> exists and the current user does not have the required privileges to insert into the table.</p>
</li>
<li>
<p><code>result_table</code> does not exist, is specified for a schema other than the current user&#39;s schema, and the current user does not have the <code>CREATE ANY TABLE</code> privilege.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref533"></a>Examples</p>
<p>The following example creates two tables, <code>EMPLOYEES</code> and <code>DEPARTMENTS</code>, where <code>DEPARTMENTS.MANAGER_ID</code> has a foreign key relationship referencing <code>EMPLOYEES.EMPLOYEE_ID</code>. The example then finds all tables that would need to be version-enabled if <code>EMPLOYEES</code> and <code>DEPARTMENTS</code> were version-enabled.</p>
<p>The results show that if you want to version-enable the <code>EMPLOYEES</code> table, you must version-enable both the <code>EMPLOYEES</code> and <code>DEPARTMENTS</code> tables; but if you want to version-enable the <code>DEPARTMENTS</code> table, you do not need to version-enable any other tables.</p>
<pre>create table employees (employee_id number primary key, employee_name varchar2(30));
create table departments (dept_id number primary key, manager_id number references employees(employee_id));

-- Check RICs; result table does not already exist.
EXECUTE DBMS_WM.FindRICSet(&#39;EMPLOYEES&#39;, &#39;EMPLOYEES_RESULTS&#39;);
SELECT * FROM employees_results;

TABLE_OWNER                    TABLE_NAME                                       
------------------------------ ------------------------------                   
WM_DEVELOPER                   EMPLOYEES                                        
WM_DEVELOPER                   DEPARTMENTS                                      

EXECUTE DBMS_WM.FindRICSet(&#39;DEPARTMENTS&#39;, &#39;DEPARTMENTS_RESULTS&#39;);
SELECT * FROM departments_results;

TABLE_OWNER                    TABLE_NAME                                       
------------------------------ ------------------------------                   
WM_DEVELOPER                   DEPARTMENTS 
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79088"></a>
<div id="ADWSM99296" class="refsect1">
<h2 class="refsect1"><a id="sthref534"></a><a id="sthref535"></a><a id="sthref536"></a><a id="sthref537"></a><a id="sthref538"></a>FreezeWorkspace</h2>
<p>Restricts access to a workspace and the ability of users to make changes in the workspace.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref539"></a>Syntax</p>
<pre>DBMS_WM.FreezeWorkspace(
   workspace     IN VARCHAR2,
   freezemode    IN VARCHAR2 DEFAULT &#39;NO_ACCESS&#39;,
   freezewriter  IN VARCHAR2 DEFAULT NULL,
   force         IN BOOLEAN DEFAULT FALSE);
</pre>
<p>or</p>
<pre>DBMS_WM.FreezeWorkspace(
   workspace         IN VARCHAR2,
   session_duration  IN BOOLEAN,
   freezemode        IN VARCHAR2 DEFAULT &#39;NO_ACCESS&#39;,
   freezewriter      IN VARCHAR2 DEFAULT NULL,
   force             IN BOOLEAN DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref540"></a>Parameters</p>
<div id="ADWSM99297" class="tblformal">
<p class="titleintable"><a id="sthref541"></a><a id="sthref542"></a>Table 4-26 FreezeWorkspace Procedure Parameters</p>
<table class="cellalignment5786" title="FreezeWorkspace Procedure Parameters" summary="FreezeWorkspace Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t29">Parameter</th>
<th class="cellalignment5787" id="r1c2-t29">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t29" headers="r1c1-t29">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r2c1-t29 r1c2-t29">
<p>Name of the workspace. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t29" headers="r1c1-t29">
<pre>session_duration
</pre></td>
<td class="cellalignment5788" headers="r3c1-t29 r1c2-t29">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> causes the workspace to be unfrozen when the session that called the FreezeWorkspace procedure disconnects from the database. This value is valid for all freeze modes.</p>
<p><code>FALSE</code> causes the workspace not to be unfrozen when the session that called the FreezeWorkspace procedure disconnects from the database.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t29" headers="r1c1-t29">
<pre>freezemode
</pre></td>
<td class="cellalignment5788" headers="r4c1-t29 r1c2-t29">
<p>Mode for the frozen workspace. Must be one of the following values:</p>
<p><code>NO_ACCESS</code>: No sessions are allowed in the workspace. (This is the default.)</p>
<p><code>READ_ONLY</code>: Sessions are allowed in the workspace, but no write operations (insert, update, delete) are allowed.</p>
<p><code>1WRITER</code>: Sessions are allowed in the workspace, but only one user (see the <code>freezewriter</code> parameter) is allowed to perform write operations (insert, update, delete).</p>
<p><code>1WRITER_SESSION</code>: Sessions are allowed in the workspace, but only the database session (as opposed to the database user) that called the FreezeWorkspace procedure is allowed to perform write operations (insert, update, delete). The workspace is unfrozen after the session that called the FreezeWorkspace procedure disconnects from the database.</p>
<p><code>WM_ONLY</code>: Only Workspace Manager operations are permitted. No sessions can directly modify data values; however, child workspaces can be merged into the workspace, and savepoints can be created in the workspace.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r5c1-t29" headers="r1c1-t29">
<pre>freezewriter
</pre></td>
<td class="cellalignment5788" headers="r5c1-t29 r1c2-t29">
<p>The user that is allowed to make changes in the workspace. Can be specified only if <code>freezemode</code> is <code>1WRITER</code>. The default is <code>USER</code> (the current user).</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r6c1-t29" headers="r1c1-t29">
<pre>force
</pre></td>
<td class="cellalignment5788" headers="r6c1-t29 r1c2-t29">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> forces the workspace to be frozen even if it is already frozen. For example, this value enables you to freeze the workspace with a different <code>freezemode</code> parameter value without having first to call the <a href="#i85162">UnfreezeWorkspace</a> procedure.</p>
<p><code>FALSE</code> (the default) prevents the workspace from being frozen if it is already frozen.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref543"></a>Usage Notes</p>
<p>If you specify the procedure syntax that does not include the <code>session_duration</code> parameter, it is equivalent to specifying <code>FALSE</code> for that parameter: that is, the workspace is not unfrozen when the session that called the FreezeWorkspace procedure disconnects from the database.</p>
<p>The operation fails if one or more of the following apply:</p>
<ul>
<li>
<p><code>workspace</code> is already frozen (unless <code>force</code> is <code>TRUE</code>).</p>
</li>
<li>
<p>Any sessions are in <code>workspace</code> and <code>freezemode</code> is <code>NO_ACCESS</code> (specified or defaulted).</p>
</li>
<li>
<p><code>session_duration</code> is <code>FALSE and freezemode</code> is <code>1WRITER_SESSION</code>.</p>
</li>
</ul>
<p>If <code>freezemode</code> is <code>READ_ONLY</code> or <code>1WRITER</code>, the workspace cannot be frozen if there is an active database transaction.</p>
<p>You can freeze a workspace only if one or more of the following apply:</p>
<ul>
<li>
<p>You are the owner of the specified workspace.</p>
</li>
<li>
<p>You have the <code>WM_ADMIN</code> system privilege, the <code>FREEZE_ANY_WORKSPACE</code> privilege, or the <code>FREEZE_WORKSPACE</code> privilege for the specified workspace.</p>
</li>
</ul>
<p>The <code>LIVE</code> workspace can be frozen only if <code>freezemode</code> is <code>READ_ONLY</code> or <code>1WRITER</code>.</p>
<p>To reverse the effect of FreezeWorkspace, use the <a href="#i85162">UnfreezeWorkspace</a> procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref544"></a>Examples</p>
<p>The following example freezes the <code>NEWWORKSPACE</code> workspace.</p>
<pre>EXECUTE DBMS_WM.FreezeWorkspace (&#39;NEWWORKSPACE&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i99479"></a>
<div id="ADWSM99298" class="refsect1">
<h2 class="refsect1"><a id="sthref545"></a><a id="sthref546"></a><a id="sthref547"></a>GenerateReplicationSupport</h2>
<p>Creates necessary structures for multimaster replication of Workspace Manager objects, and starts the master activity for the newly created master group.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref548"></a>Syntax</p>
<pre>DBMS_WM.GenerateReplicationSupport(
   mastersites       IN VARCHAR2,
   groupname         IN VARCHAR2,
   groupdescription  IN VARCHAR2 DEFAULT &#39;Replication Group for OWM&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref549"></a>Parameters</p>
<div id="ADWSM99299" class="tblformal">
<p class="titleintable"><a id="sthref550"></a><a id="sthref551"></a>Table 4-27 GenerateReplicationSupport Procedure Parameters</p>
<table class="cellalignment5786" title="GenerateReplicationSupport Procedure Parameters" summary="GenerateReplicationSupport Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t30">Parameter</th>
<th class="cellalignment5787" id="r1c2-t30">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t30" headers="r1c1-t30">
<pre>mastersites
</pre></td>
<td class="cellalignment5788" headers="r2c1-t30 r1c2-t30">
<p>Comma-delimited list of nonwriter site names (database links) to be added to the Workspace Manager replication environment. Do not include the local site (the writer site) in the list.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t30" headers="r1c1-t30">
<pre>groupname
</pre></td>
<td class="cellalignment5788" headers="r3c1-t30 r1c2-t30">
<p>Name of the master group to be created. This group will appear as a regular replication master group, and it can be managed from all the Oracle replication interfaces, including Oracle Enterprise Manager.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t30" headers="r1c1-t30">
<pre>groupdescription
</pre></td>
<td class="cellalignment5788" headers="r4c1-t30 r1c2-t30">
<p>Description of the new master group. The default is <code>Replication Group for OWM</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref552"></a>Usage Notes</p>
<p>To use this procedure, you must understand how replication applies to Workspace Manager objects, as explained in <a href="long_repl.htm#g635775">Appendix C</a>. You must also understand the major Oracle replication concepts and techniques, which are documented in <a class="olink REPLN" href="../REPLN/toc.htm"><span class="italic">Oracle Database Advanced Replication</span></a> and <a class="olink REPMA" href="../REPMA/toc.htm"><span class="italic">Oracle Database Advanced Replication Management API Reference</span></a>.</p>
<p>You must execute this procedure as the replication administrator user at the writer site.</p>
<p>Before executing this procedure, ensure that the following are true:</p>
<ul>
<li>
<p>There are no workspaces, savepoints, or version-enabled tables on any of the remote sites specified in the <code>mastersites</code> list.</p>
</li>
<li>
<p>All the remote sites and the local site have the same version of Workspace Manager installed. You can check the Workspace Manager version number in the <a href="long_views.htm#i89275">WM_INSTALLATION</a> metadata view.</p>
</li>
<li>
<p>If there are version-enabled tables on the local site, these tables must exist and must not be version-enabled on each of the remote sites.</p>
</li>
</ul>
<p>This procedure performs the following operations:</p>
<ul>
<li>
<p>Verifies that the local site and all the sites specified in the <code>mastersites</code> list are running the same version of Workspace Manager.</p>
</li>
<li>
<p>Verifies that there are no workspaces, savepoints, or version-enabled tables on any of the remote sites specified in the <code>mastersites</code> list.</p>
</li>
<li>
<p>Creates a master group, having the name specified in the <code>groupname</code> parameter, with the local site as the master definition site and the writer site.</p>
</li>
<li>
<p>Adds the Workspace Manager metadata tables to this group.</p>
</li>
<li>
<p>Disables Workspace Manager operations at all the nonwriter sites (the remote sites specified in the <code>mastersites</code> list).</p>
</li>
<li>
<p>If there are any version-enabled tables at the local site, version-enables these tables at each of the remote sites specified in the <code>mastersites</code> list and sets them up for replication.</p>
</li>
<li>
<p>Starts the master activity for the newly created master group.</p>
</li>
</ul>
<p>To drop replication support for the Workspace Manager environment, use the <a href="#i99531">DropReplicationSupport</a> procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref553"></a>Examples</p>
<p>The following example generates replication support for the Workspace Manager environment at a hypothetical company.</p>
<pre>DBMS_WM.GenerateReplicationSupport(
    mastersites       =&gt;  &#39;BACKUP-SITE1.EXAMPLE.COM, BACKUP-SITE2.EXAMPLE.COM&#39;),
    groupname         =&gt;  &#39;OWM-GROUP&#39;,
    groupdescription  =&gt;  &#39;OWM Replication group for Example Corp.&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i114056"></a>
<div id="ADWSM99300" class="refsect1">
<h2 class="refsect1"><a id="sthref554"></a><a id="sthref555"></a>GetBulkLoadVersion</h2>
<p>Returns a version number that can be specified in the call to the <a href="#i117894">BeginBulkLoading</a> procedure and in the SQL*Loader control file.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Effective with Oracle Database Release 12.1, this function is not necessary, and it always returns a null value.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref556"></a>Format</p>
<pre>DBMS_WM.GetBulkLoadVersion(
   workspace      IN VARCHAR2,
   savepoint_var  IN VARCVHAR2 DEFAULT &#39;LATEST&#39;) RETURN INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref557"></a>Parameters</p>
<div id="ADWSM99301" class="tblformal">
<p class="titleintable"><a id="sthref558"></a><a id="sthref559"></a>Table 4-28 GetBulkLoadVersion Function Parameters</p>
<table class="cellalignment5786" title="GetBulkLoadVersion Function Parameters" summary="GetBulkLoadVersion Function Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t32">Parameter</th>
<th class="cellalignment5787" id="r1c2-t32">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t32" headers="r1c1-t32">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r2c1-t32 r1c2-t32">
<p>Name of the workspace for which to return the bulk load version. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t32" headers="r1c1-t32">
<pre>savepoint_var
</pre></td>
<td class="cellalignment5788" headers="r3c1-t32 r1c2-t32">
<p>The version in the workspace in which data will be bulk loaded. Must be one of the following: <code>LATEST</code> or <code>ROOT_VERSION</code>.</p>
<p><code>LATEST</code> (the default) is the current version in the workspace.</p>
<p><code>ROOT_VERSION</code> is into the root version (version number 0, which is in the <code>LIVE</code> workspace). The root version is the ancestor of all other versions, so data in the root version is visible from all other workspaces (unless non-<code>LIVE</code> workspaces have updated the data). You can specify <code>ROOT_VERSION</code> only if <code>workspace</code> is <code>LIVE</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref560"></a>Usage</p>
<p>Effective with Oracle Database Release 12.1, this function is not necessary and it always returns a null value. The <a href="#i117894">BeginBulkLoading</a> procedure automatically determines the bulk load version based on the workspace name and the optional savepoint name. (However, the bulk loading process in effect for previous releases is still supported.)</p>
<p>Before you can begin bulk loading data into a version-enabled table, you must call the <a href="#i117894">BeginBulkLoading</a> procedure. You must end the bulk loading session by calling either the <a href="#i114725">CommitBulkLoading</a> procedure (to commit changes made when the data was loaded) or the <a href="#i114047">RollbackBulkLoading</a> procedure (to roll back changes made when the data was loaded). For more information about bulk loading with Workspace Manager, see <a href="long_intro.htm#i1019718">Section 1.7</a>.</p>
<p>An exception is raised if one or more of the following apply:</p>
<ul>
<li>
<p><code>workspace</code> does not exist.</p>
</li>
<li>
<p><code>savepoint_var</code> is not a valid value.</p>
</li>
<li>
<p><code>savepoint_var</code> is <code>ROOT_VERSION</code> but <code>workspace</code> is not <code>LIVE</code>.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref561"></a>Examples</p>
<p>The following example gets a bulk load version number for the <code>W1</code> workspace, and starts the bulk load operation into the <code>EMP</code> table in that workspace.</p>
<pre>DECLARE
  version INTEGER;
BEGIN
  SELECT DBMS_WM.GetBulkLoadVersion (&#39;W1&#39;) INTO version FROM DUAL;
  DBMS_WM.BeginBulkLoading (&#39;EMP&#39;, &#39;W1&#39;, version);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i112529"></a>
<div id="ADWSM99302" class="refsect1">
<h2 class="refsect1"><a id="sthref562"></a><a id="sthref563"></a>GetConflictWorkspace</h2>
<p>Returns the name of the workspace on which the session has performed the <a href="#i113360">SetConflictWorkspace</a> procedure.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref564"></a>Format</p>
<pre>DBMS_WM.GetConflictWorkspace() RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref565"></a>Parameters</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref566"></a>Usage Notes</p>
<p>If the <a href="#i113360">SetConflictWorkspace</a> procedure has not been executed, the name of the current workspace is returned.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref567"></a>Examples</p>
<p>The following example displays the name of the workspace on which the session has performed the <a href="#i113360">SetConflictWorkspace</a> procedure.</p>
<pre>SELECT DBMS_WM.GetConflictWorkspace FROM DUAL;

GETCONFLICTWORKSPACE                                                            
-----------------------------------------------------------------------------
B_focus_2  
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i87360"></a>
<div id="ADWSM99303" class="refsect1">
<h2 class="refsect1"><a id="sthref568"></a><a id="sthref569"></a>GetDiffVersions</h2>
<p>Returns the names of the (workspace, savepoint) pairs on which the session has performed the <a href="#i85583">SetDiffVersions</a> operation.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref570"></a>Format</p>
<pre>DBMS_WM.GetDiffVersions() RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref571"></a>Parameters</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref572"></a>Usage Notes</p>
<p>The returned string is in the format <code>&#39;(WS1,SP1), (WS2,SP2)&#39;</code>. This format, including the parentheses, is intended to help you if you later want to use parts of the returned string in a call to the <a href="#i85583">SetDiffVersions</a> procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref573"></a>Examples</p>
<p>The following example displays the names of the (workspace, savepoint) pairs on which the session has performed the <a href="#i85583">SetDiffVersions</a> operation.</p>
<pre>SELECT DBMS_WM.GetDiffVersions FROM DUAL;

GETDIFFVERSIONS                                                                 
--------------------------------------------------------------------------------
(B_focus_1, LATEST), (B_focus_2, LATEST) 
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i90040"></a>
<div id="ADWSM99304" class="refsect1">
<h2 class="refsect1"><a id="sthref574"></a><a id="sthref575"></a><a id="sthref576"></a>GetLockMode</h2>
<p>Returns the locking mode for the current session, which determines whether or not access is enabled to versioned rows and corresponding rows in the previous version.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref577"></a>Format</p>
<pre>DBMS_WM.GetLockMode() RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref578"></a>Parameters</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref579"></a>Usage Notes</p>
<p>This function returns <code>E</code>, <code>S</code>, <code>C</code>, or <code>NULL</code>.</p>
<ul>
<li>
<p>For explanations of <code>E</code> (exclusive), <code>S</code> (shared), and <code>C</code> (carry-forward), see the description of the <code>lockmode</code> parameter of the <a href="#i79459">SetLockingON</a> procedure.</p>
</li>
<li>
<p><code>NULL</code> indicates that locking is not in effect. (Calling the <a href="#i79467">SetLockingOFF</a> procedure results in this setting.)</p>
</li>
</ul>
<p>For an explanation of Workspace Manager locking, see <a href="long_intro.htm#i1006224">Section 1.3</a>. See also the descriptions of the <a href="#i79459">SetLockingON</a> and <a href="#i79467">SetLockingOFF</a> procedures.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref580"></a>Examples</p>
<p>The following example displays the locking mode in effect for the session.</p>
<pre>SELECT DBMS_WM.GetLockMode FROM DUAL;

GETLOCKMODE                                                                     
--------------------------------------------------------------------------------
C
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i96123"></a>
<div id="ADWSM99305" class="refsect1">
<h2 class="refsect1"><a id="sthref581"></a><a id="sthref582"></a>GetMultiWorkspaces</h2>
<p>Returns the names of workspaces visible in the multiworkspace views for version-enabled tables.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref583"></a>Format</p>
<pre>DBMS_WM.GetMultiWorkspaces() RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref584"></a>Parameters</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref585"></a>Usage Notes</p>
<p>This procedure returns the names of workspaces visible in the multiworkspace views, which are described in <a href="long_views.htm#i87680">Section 5.55</a>.</p>
<p>If no workspaces are visible in the multiworkspace views, <code>NULL</code> is returned. If more than one workspace name is returned, names are separated by a comma (for example: <code>workspace1,workspace2,workspace3</code>).</p>
<p>To make a workspace visible in the multiworkspace views, use the <a href="#i91423">SetMultiWorkspaces</a> procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref586"></a>Examples</p>
<p>The following example displays the names of workspaces visible in the multiworkspace views.</p>
<pre>SELECT DBMS_WM.GetMultiWorkspaces FROM DUAL;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i107561"></a>
<div id="ADWSM99306" class="refsect1">
<h2 class="refsect1"><a id="sthref587"></a><a id="sthref588"></a><a id="sthref589"></a><a id="sthref590"></a>GetOpContext</h2>
<p>Returns the context of the current operation for the current session.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref591"></a>Format</p>
<pre>DBMS_WM.GetOpContext() RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref592"></a>Parameters</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref593"></a>Usage Notes</p>
<p>This function returns one of the following values:</p>
<ul>
<li>
<p><code>DML</code>: The current operation is driven by data manipulation language (DML) initiated by the user.</p>
</li>
<li>
<p><code>MERGE_REMOVE</code>: The current operation was initiated by a <a href="#i89452">MergeWorkspace</a> procedure call with the <code>remove_workspace</code> parameter set to <code>TRUE</code> or a <a href="#i90863">MergeTable</a> procedure call with the <code>remove_data</code> parameter set to <code>TRUE</code>.</p>
</li>
<li>
<p><code>MERGE_NOREMOVE</code>: The current operation was initiated by a <a href="#i89452">MergeWorkspace</a> procedure call with the <code>remove_workspace</code> parameter set to <code>FALSE</code> or a <a href="#i90863">MergeTable</a> procedure call with the <code>remove_data</code> parameter set to <code>FALSE</code>.</p>
</li>
</ul>
<p>The returned value can be used in user-defined triggers to take appropriate action based on the current operation.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref594"></a>Examples</p>
<p>The following example displays the context of the current operation.</p>
<pre>SELECT DBMS_WM.GetOpContext FROM DUAL;

GETOPCONTEXT                                                                     
--------------------------------------------------------------------------------
DML
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACBHCHD"></a>
<div id="ADWSM99506" class="refsect1">
<h2 class="refsect1"><a id="sthref595"></a><a id="sthref596"></a>GetOriginalDDL</h2>
<p>Returns the original DDL of the version-enabled table as it existed before the call to the <a href="#i80309">EnableVersioning</a> procedure.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref597"></a>Format</p>
<pre>DBMS_WM.GetOriginalDDL
   table_id   IN VARCHAR2,
   ddl_stmts  IN OUT KU$_DDLS;
</pre>
<p>or</p>
<pre>DBMS_WM.GetOriginalDDL
   table_id  IN VARCHAR2,
   ddl_clob  IN OUT CLOB;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref598"></a>Parameters</p>
<div id="ADWSM99507" class="tblformal">
<p class="titleintable"><a id="sthref599"></a><a id="sthref600"></a>Table 4-29 GetOriginalDDL Procedure Parameters</p>
<table class="cellalignment5786" title="GetOriginalDDL Procedure Parameters" summary="GetOriginalDDL Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t33">Parameter</th>
<th class="cellalignment5787" id="r1c2-t33">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t33" headers="r1c1-t33">
<pre>table_id
</pre></td>
<td class="cellalignment5788" headers="r2c1-t33 r1c2-t33">
<p>Name of the table for which to return the original DDL for creating the table. The name is not case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t33" headers="r1c1-t33">
<pre>ddl_stmts
</pre></td>
<td class="cellalignment5788" headers="r3c1-t33 r1c2-t33">
<p>The original DDL statements for creating the table and any indexes, triggers, and grants on the table.</p>
<p>The type <code>KU$DLLS</code> is defined as <code>TABLE OF KU$_DD</code><code>L</code>. The type <code>KU$DDL</code> is defined as <code>(DDLTEXT CLOB, PARSEDITEMS KU$_PARSED_ITEMS)</code>. The type <code>KU$_PARSED_ITEMS</code> is defined as <code>TABLE OF KU$_PARSED_ITEM</code>. The type <code>KU$_PARSED_ITEM</code> is defined as <code>(ITEM VARCHAR2(30))</code>.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t33" headers="r1c1-t33">
<pre>ddl_clob
</pre></td>
<td class="cellalignment5788" headers="r4c1-t33 r1c2-t33">
<p>(Same information as for <code>ddl_stmts</code>, but using the type <code>CLOB</code>.)</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref601"></a>Usage</p>
<p>When the <a href="#i80309">EnableVersioning</a> procedure is called, DDL statements are executed on the table that modify its structure and that of related objects. (Some of these changes are outlined in <a href="long_intro.htm#i1012495">Section 1.1.11</a>.) The GetOriginalDDL procedure returns a series of DDL statements (CREATE TABLE, CREATE INDEX, CREATE TRIGGER, GRANT, and so on) that represent the table as if it was not a version-enabled table. These statements can then be used to create the table in a non-versioned form in another schema or in another database. This new table can then be version-enabled or used in its non-versioned form.</p>
<p>An exception is raised if either of the following applies:</p>
<ul>
<li>
<p><code>table_id</code> does not exist.</p>
</li>
<li>
<p>You do not have access to <code>table_id</code>.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref602"></a>Examples</p>
<p>The following example returns the original DDL statements for the <code>COLA_MARKETING_BUDGET</code> table into a variable of type <code>KU$_DLLS</code>.</p>
<pre>DECLARE
  original_ddl KU$_DDLS;
BEGIN
  DBMS_WM.GetOriginalDDL(&#39;cola_marketing_budget&#39;, 
                         original_ddl);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i115115"></a>
<div id="ADWSM99307" class="refsect1">
<h2 class="refsect1"><a id="sthref603"></a><a id="sthref604"></a><a id="sthref605"></a><a id="sthref606"></a><a id="sthref607"></a><a id="sthref608"></a>GetPhysicalTableName</h2>
<p>Returns the name (<span class="italic">&lt;table_name&gt;_</span>LT form) of the physical table for a version-enabled table.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref609"></a>Format</p>
<pre>DBMS_WM.GetPhysicalTableName(
   table_owner  IN VARCHAR2,
   table_name   IN VARCHAR2) RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref610"></a>Parameters</p>
<div id="ADWSM99308" class="tblformal">
<p class="titleintable"><a id="sthref611"></a><a id="sthref612"></a>Table 4-30 GetPhysicalTableName Function Parameters</p>
<table class="cellalignment5786" title="GetPhysicalTableName Function Parameters" summary="GetPhysicalTableName Function Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t34">Parameter</th>
<th class="cellalignment5787" id="r1c2-t34">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t34" headers="r1c1-t34">
<pre>table_owner
</pre></td>
<td class="cellalignment5788" headers="r2c1-t34 r1c2-t34">
<p>Name of the schema that owns <code>table_name</code>.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t34" headers="r1c1-t34">
<pre>table_name
</pre></td>
<td class="cellalignment5788" headers="r3c1-t34 r1c2-t34">
<p>Name of the version-enabled table for which to return the name of its associated physical table.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref613"></a>Usage</p>
<p>If <code>table_name</code> is a version-enabled table, this function returns the name of the table, whose name is in the form <span class="italic">&lt;table_name&gt;</span>_LT, that was created by Workspace Manager when the <a href="#i80309">EnableVersioning</a> procedure was called. For information about these <span class="italic">&lt;table_name&gt;</span>_LT tables, see <a href="long_intro.htm#i1012495">Section 1.1.11</a>.</p>
<p>If <code>table_name</code> is a not a version-enabled table, this function returns <code>table_name</code>. Thus, you can also use this function to check whether or not a table is version-enabled (that is, by checking whether a name in the form <span class="italic">&lt;table_name&gt;</span>_LT or the original table name is returned).</p>
<p>If the user executing the function does not have access to the table or the table does not exist, the function returns a null value.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref614"></a>Examples</p>
<p>The following example displays the physical table name associated with the <code>COLA_MARKETING_BUDGET</code> table after that table is version-enabled.</p>
<pre>SELECT DBMS_WM.GetPhysicalTableName(&#39;wm_developer&#39;, &#39;cola_marketing_budget&#39;)
   FROM DUAL;

DBMS_WM.GETPHYSICALTABLENAME(&#39;WM_DEVELOPER&#39;,&#39;COLA_MARKETING_BUDGET&#39;)            
--------------------------------------------------------------------------------
COLA_MARKETING_BUDGET_LT 
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i87361"></a>
<div id="ADWSM99309" class="refsect1">
<h2 class="refsect1"><a id="sthref615"></a><a id="sthref616"></a><a id="sthref617"></a>GetPrivs</h2>
<p>Returns a comma-delimited list of all privileges that the current user has for the specified workspace.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref618"></a>Format</p>
<pre>DBMS_WM.GetPrivs(
   workspace  IN VARCHAR2) RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref619"></a>Parameters</p>
<div id="ADWSM99310" class="tblformal">
<p class="titleintable"><a id="sthref620"></a><a id="sthref621"></a>Table 4-31 GetPrivs Function Parameters</p>
<table class="cellalignment5786" title="GetPrivs Function Parameters" summary="GetPrivs Function Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t35">Parameter</th>
<th class="cellalignment5787" id="r1c2-t35">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t35" headers="r1c1-t35">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r2c1-t35 r1c2-t35">
<p>Name of the workspace for which to return the list of privileges. The name is case-sensitive.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref622"></a>Usage</p>
<p>For information about Workspace Manager privileges, see <a href="long_intro.htm#i1017165">Section 1.4</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref623"></a>Examples</p>
<p>The following example displays the privileges that the current user has for the <code>B_focus_2</code> workspace.</p>
<pre>SELECT DBMS_WM.GetPrivs (&#39;B_focus_2&#39;) FROM DUAL;

DBMS_WM.GETPRIVS(&#39;B_FOCUS_2&#39;)                                                        
--------------------------------------------------------------------------------
ACCESS,MERGE,CREATE,REMOVE,ROLLBACK 
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i98221"></a>
<div id="ADWSM99311" class="refsect1">
<h2 class="refsect1"><a id="sthref624"></a><a id="sthref625"></a><a id="sthref626"></a><a id="sthref627"></a>GetSessionInfo</h2>
<p>Retrieves information about the current workspace and session context.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref628"></a>Format</p>
<pre>DBMS_WM.GetSessionInfo(
   workspace     OUT VARCHAR2,
   context       OUT VARCHAR2,
   context_type  OUT VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref629"></a>Parameters</p>
<div id="ADWSM99312" class="tblformal">
<p class="titleintable"><a id="sthref630"></a><a id="sthref631"></a>Table 4-32 GetSessionInfo Procedure Parameters</p>
<table class="cellalignment5786" title="GetSessionInfo Procedure Parameters" summary="GetSessionInfo Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t36">Parameter</th>
<th class="cellalignment5787" id="r1c2-t36">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t36" headers="r1c1-t36">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r2c1-t36 r1c2-t36">
<p>Name of the workspace that the current session is in.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t36" headers="r1c1-t36">
<pre>context
</pre></td>
<td class="cellalignment5788" headers="r3c1-t36 r1c2-t36">
<p>The context of the current session in the workspace, expressed as one of the following: <code>LATEST</code>, a savepoint name, or an instant (point in time) in &#39;DD-MON-YYYY HH24:MI:SS&#39; date format. (See the Usage Notes for details.)</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t36" headers="r1c1-t36">
<pre>context_type
</pre></td>
<td class="cellalignment5788" headers="r4c1-t36 r1c2-t36">
<p>The type of context for the current session in the workspace. Specifically, one of the following values: <code>LATEST</code> (if <code>context</code> is <code>LATEST</code>), <code>SAVEPOINT</code> (if <code>context</code> is a savepoint name), or <code>INSTANT</code> (if <code>context</code> is an instant).</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref632"></a>Usage Notes</p>
<p>This procedure is useful if you need to know where a session is (workspace and context) -- for example, after you have performed a combination of <a href="#i78730">GotoWorkspace</a>, <a href="#i91086">GotoSavepoint</a>, and <a href="#i90546">GotoDate</a> operations.</p>
<p>After the procedure successfully executes, the <code>context</code> parameter contains one of the following values:</p>
<ul>
<li>
<p><code>LATEST</code>: The session is currently on the <code>LATEST</code> logical savepoint (explained in <a href="long_intro.htm#i1012409">Section 1.1.2</a>), and it can see changes as they are made in the workspace. The context is automatically set to <code>LATEST</code> when the session enters the workspace (using the <a href="#i78730">GotoWorkspace</a> procedure).</p>
</li>
<li>
<p>A savepoint name: The session is currently on a savepoint in the workspace. The session cannot see changes as they are made in the latest version of the workspace, but instead sees a static view of the data as of the savepoint creation time. The session context is set to the savepoint name after a call to the <a href="#i91086">GotoSavepoint</a> procedure.</p>
</li>
<li>
<p>An instant (a point in time): The session is currently on a specific point in time. The session cannot see changes as they are made in the latest version of the workspace, but instead sees a static view of the data as of the specific time. The session context is set to an instant after a call to the <a href="#i90546">GotoDate</a> procedure.</p>
</li>
</ul>
<p>For detailed information about the session context, see <a href="long_intro.htm#i1013953">Section 1.2</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref633"></a>Examples</p>
<p>The following example retrieves and displays information about the current workspace and context in the session.</p>
<pre>DECLARE
  current_workspace VARCHAR2(30);
  current_context VARCHAR2(30);
  current_context_type VARCHAR2(30);
BEGIN
  DBMS_WM.GetSessionInfo(current_workspace, 
                         current_context, 
                         current_context_type);
  DBMS_OUTPUT.PUT_LINE(&#39;Session currently in workspace: &#39; ||current_workspace);
  DBMS_OUTPUT.PUT_LINE(&#39;Session context is: &#39; ||current_context);
  DBMS_OUTPUT.PUT_LINE(&#39;Session context is on: &#39; ||current_context_type);
END;
/
Session currently in workspace: B_focus_2                                       
Session context is: LATEST                                                      
Session context is on: LATEST                                                   

PL/SQL procedure successfully completed.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i108546"></a>
<div id="ADWSM99313" class="refsect1">
<h2 class="refsect1"><a id="sthref634"></a><a id="sthref635"></a>GetSystemParameter</h2>
<p>Returns the value of a Workspace Manager system parameter.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref636"></a>Syntax</p>
<pre>DBMS_WM.GetSytstemParameter(
   name   IN VARCHAR2) RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref637"></a>Parameters</p>
<div id="ADWSM99314" class="tblformal">
<p class="titleintable"><a id="sthref638"></a><a id="sthref639"></a>Table 4-33 GetSystemParameter Procedure Parameters</p>
<table class="cellalignment5786" title="GetSystemParameter Procedure Parameters" summary="GetSystemParameter Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t37">Parameter</th>
<th class="cellalignment5787" id="r1c2-t37">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t37" headers="r1c1-t37">
<pre>name
</pre></td>
<td class="cellalignment5788" headers="r2c1-t37 r1c2-t37">
<p>Name of the Workspace Manager system parameter for which to set the value. The name must be one of the following: <code>ALLOW_CAPTURE_EVENTS</code>, <code>ALLOW_MULTI_PARENT_WORKSPACES</code>, <code>ALLOW_NESTED_TABLE_COLUMNS</code>, <code>CR_WORKSPACE_MODE</code>, <code>FIRE_TRIGGERS_FOR_NONDML_EVENTS</code>, <code>NONCR_WORKSPACE_MODE</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref640"></a>Usage Notes</p>
<p>For information about Workspace Manager system parameters, see <a href="long_intro.htm#i1017681">Section 1.5</a>.</p>
<p>An exception is raised if the <code>name</code> value is not valid.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref641"></a>Examples</p>
<p>The following checks if multiparent workspaces (described in <a href="long_intro.htm#i1018503">Section 1.1.10</a>) are allowed.</p>
<pre>SELECT DBMS_WM.GetSystemParameter (&#39;ALLOW_MULTI_PARENT_WORKSPACES&#39;) FROM DUAL;

DBMS_WM.GETSYSTEMPARAMETER(&#39;ALLOW_MULTI_PARENT_WORKSPACES&#39;)                     
--------------------------------------------------------------------------------
ON 
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i118639"></a>
<div id="ADWSM99315" class="refsect1">
<h2 class="refsect1"><a id="sthref642"></a><a id="sthref643"></a>GetValidFrom</h2>
<p>Returns the <code>ValidFrom</code> attribute of the current session valid time. (Valid time support is described in <a href="long_vt.htm#g1014747">Chapter 3</a>.)</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref644"></a>Format</p>
<pre>DBMS_WM.GetValidFrom() RETURN TIMESTAMP WITH TIME ZONE;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref645"></a>Parameters</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref646"></a>Usage Notes</p>
<p>To set the session valid time period, use the <a href="#i118627">SetValidTime</a> procedure.</p>
<p>To get the <code>ValidTill</code> attribute of the current session valid time, use the <a href="#i118703">GetValidTill</a> function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref647"></a>Examples</p>
<p>The following example displays the <code>ValidFrom</code> attribute of the current session valid time.</p>
<pre>SELECT DBMS_WM.GetValidFrom FROM DUAL;

GETVALIDFROM
---------------------------------------------------------------------------
01-JAN-1995 12:00:00 -04:00
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i118703"></a>
<div id="ADWSM99316" class="refsect1">
<h2 class="refsect1"><a id="sthref648"></a><a id="sthref649"></a>GetValidTill</h2>
<p>Returns the <code>ValidTill</code> attribute of the current session valid time. (Valid time support is described in <a href="long_vt.htm#g1014747">Chapter 3</a>.)</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref650"></a>Format</p>
<pre>DBMS_WM.GetValidTill() RETURN TIMESTAMP WITH TIME ZONE;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref651"></a>Parameters</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref652"></a>Usage Notes</p>
<p>To set the session valid time period, use the <a href="#i118627">SetValidTime</a> procedure.</p>
<p>To get the <code>ValidFrom</code> attribute of the current session valid time, use the <a href="#i118639">GetValidFrom</a> function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref653"></a>Examples</p>
<p>The following example displays the <code>ValidTill</code> attribute of the current session valid time.</p>
<pre>SELECT DBMS_WM.GetValidTill FROM DUAL;

GETVALIDTILL
---------------------------------------------------------------------------
01-JAN-1996 12:00:00 -04:00
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACJDGBA"></a>
<div id="ADWSM99317" class="refsect1">
<h2 class="refsect1"><a id="sthref654"></a><a id="sthref655"></a><a id="sthref656"></a><a id="sthref657"></a>GetWMMetadataSpace</h2>
<p>Returns the number of bytes currently used to store the Workspace Manager metadata.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref658"></a>Format</p>
<pre>DBMS_WM.GetWMMetadataSpace() RETURN NUMBER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref659"></a>Parameters</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref660"></a>Usage Notes</p>
<p>The Workspace Manager metadata (views, internal tables, and other objects) is by default stored in the default tablespace of the <code>WMSYS</code> user. You cannot directly control the size of the Workspace Manager metadata, but you can control its placement by using the <a href="#CACBGBFH">Move_Proc</a> procedure to move the metadata to a different tablespace. You can use the GetWMMetadataSpace function to determine the approximate minimum space that you will need to have available in the tablespace into which you are considering moving the Workspace Manager metadata.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref661"></a>Examples</p>
<p>The following example displays the number of bytes currently used to store the Workspace Manager metadata.</p>
<pre>SELECT DBMS_WM.GetWMMetadataSpace FROM DUAL;
 
GETWMMETADATASPACE                                                              
------------------                                                              
           6750208 
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79829"></a>
<div id="ADWSM99318" class="refsect1">
<h2 class="refsect1"><a id="sthref662"></a><a id="sthref663"></a><a id="sthref664"></a>GetWorkspace</h2>
<p>Returns the current workspace for the session.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref665"></a>Format</p>
<pre>DBMS_WM.GetWorkspace() RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref666"></a>Parameters</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref667"></a>Usage Notes</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref668"></a>Examples</p>
<p>The following example displays the current workspace for the session.</p>
<pre>SELECT DBMS_WM.GetWorkspace FROM DUAL;

GETWORKSPACE                                                                        
--------------------------------------------------------------------------------
B_focus_2  
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i90546"></a>
<div id="ADWSM99319" class="refsect1">
<h2 class="refsect1"><a id="sthref669"></a><a id="sthref670"></a>GotoDate</h2>
<p>Goes to a point at or near the specified date and time in the current workspace.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref671"></a>Syntax</p>
<pre>DBMS_WM.GotoDate(
   in_date   IN VARCHAR2,
   fmt       IN VARCHAR2 DEFAULT &#39;mmddyyyyhh24miss&#39;,
   nlsparam  IN VARCHAR2 DEFAULT NULL,
   tsWtz     IN BOOLEAN DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref672"></a>Parameters</p>
<div id="ADWSM99320" class="tblformal">
<p class="titleintable"><a id="sthref673"></a><a id="sthref674"></a>Table 4-34 GotoDate Procedure Parameters</p>
<table class="cellalignment5786" title="GotoDate Procedure Parameters" summary="GotoDate Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t38">Parameter</th>
<th class="cellalignment5787" id="r1c2-t38">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t38" headers="r1c1-t38">
<pre>in_date
</pre></td>
<td class="cellalignment5788" headers="r2c1-t38 r1c2-t38">
<p>Date and time for the read-only view of the workspace. (See the Usage Notes for details.)</p>
<p>If <code>in_date</code> is a VARCHAR2 string, it is a date string or a timestamp with time zone, depending on the value of the <code>tsWtz</code> parameter.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t38" headers="r1c1-t38">
<pre>fmt
</pre></td>
<td class="cellalignment5788" headers="r3c1-t38 r1c2-t38">
<p>Date format. The options are the same as for the <code>TO_TIMESTAMP_TZ</code> function, which is described in <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<p>Default: <code>&#39;mmddyyyyhh24miss&#39;</code></p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t38" headers="r1c1-t38">
<pre>nlsparam
</pre></td>
<td class="cellalignment5788" headers="r4c1-t38 r1c2-t38">
<p>Globalization support options. The options are the same as for the <code>TO_TIMESTAMP_TZ</code> function, which is described in <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r5c1-t38" headers="r1c1-t38">
<pre>tsWtz
</pre></td>
<td class="cellalignment5788" headers="r5c1-t38 r1c2-t38">
<p>Timestamp with time zone flag. A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> means that <code>in_date</code> is considered a timestamp with time zone information.</p>
<p><code>FALSE</code> (the default) means that <code>in_date</code> is a date string.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref675"></a>Usage Notes</p>
<p>You are presented a read-only view of the current workspace at or near the specified date and time. The exact time point depends on the history option for tracking changes to data in version-enabled tables, as set by the <a href="#i80309">EnableVersioning</a> procedure or modified by the <a href="#i89852">SetWoOverwriteOFF</a> or <a href="#i89736">SetWoOverwriteON</a> procedure:</p>
<ul>
<li>
<p><code>NONE</code>: The read-only view reflects the first savepoint after <code>in_date</code>.</p>
</li>
<li>
<p><code>VIEW_W_OVERWRITE</code>: The read-only view reflects the data values in effect at <code>in_date</code>, except if <code>in_date</code> is between two savepoints and data was changed between the two savepoints. In this case, data that had been changed between the savepoints might be seen as empty or as having a previous value. To ensure the most complete and accurate view of the data, specify the <code>VIEW_WO_OVERWRITE</code> history option when version-enabling a table.</p>
</li>
<li>
<p><code>VIEW_WO_OVERWRITE</code>: The read-only view reflects the data values in effect at <code>in_date</code>.</p>
</li>
</ul>
<p>For an explanation of the history options, see the description of the <code>hist</code> parameter for the <a href="#i80309">EnableVersioning</a> procedure.</p>
<p>The following example scenario shows the effect of the <code>VIEW_WO_OVERWRITE</code> setting. Assume the following sequence of events:</p>
<ol>
<li>
<p>The <code>MANAGER_NAME</code> value in a row is <code>Adams</code>.</p>
</li>
<li>
<p>Savepoint <code>SP1</code> is created.</p>
</li>
<li>
<p>The <code>MANAGER_NAME</code> value is changed to <code>Baxter</code>.</p>
</li>
<li>
<p>The time point that will be specified as <code>in_date</code> (in step 7) occurs.</p>
</li>
<li>
<p>The <code>MANAGER_NAME</code> value is changed to <code>Chang</code>. (Thus, the value has been changed both before and after <code>in_date</code> since the first savepoint and before the second savepoint.)</p>
</li>
<li>
<p>Savepoint <code>SP2</code> is created.</p>
</li>
<li>
<p>A <a href="#i90546">GotoDate</a> operation is executed, specifying the time point in step 4 as <code>in_date</code>.</p>
</li>
</ol>
<p>In the preceding scenario:</p>
<ul>
<li>
<p>If the history option in effect is <code>VIEW_WO_OVERWRITE</code>, the <code>MANAGER_NAME</code> value after step 7 is <code>Baxter</code>. After step 5, the versioned table has three rows, each with a different <code>MANAGER_NAME</code> value (<code>Adams</code>, <code>Baxter</code>, <code>Chang</code>), because each change is made in a new copy of the row.</p>
</li>
<li>
<p>If the history option in effect is <code>VIEW_W_OVERWRITE</code>, no value is seen after step 7. The updates in steps 3 and 5 are made in the same copy of the row, and the update in step 5 overwrites the update in step 3. As a result, after step 5 the versioned table has two rows, with <code>MANAGER_NAME</code> values <code>Adams</code> and <code>Chang</code>. Because the <code>MANAGER_NAME</code> value (<code>Baxter</code>) that was in effect at the specified instant has been overwritten, no row is visible.</p>
</li>
<li>
<p>If the history option in effect is <code>NONE</code>, the <code>MANAGER_NAME</code> value after step 7 is <code>Chang</code>, because the first savepoint after the specified instant is <code>SP2</code>. After step 5, the versioned table has two rows, with <code>MANAGER_NAME</code> values <code>Adams</code> and <code>Chang</code>.</p>
</li>
</ul>
<p>The GotoDate procedure should be executed while users exist in the workspace. There are no explicit privileges associated with this procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref676"></a>Examples</p>
<p>The following example goes to a point at or near midnight at the start of 08-Jun-2004, depending on the history option currently in effect.</p>
<pre>EXECUTE DBMS_WM.GotoDate (&#39;08-JUN-04&#39;, &#39;DD-MON-YY&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i91086"></a>
<div id="ADWSM99321" class="refsect1">
<h2 class="refsect1"><a id="sthref677"></a><a id="sthref678"></a><a id="sthref679"></a>GotoSavepoint</h2>
<p>Goes to the specified savepoint in the current workspace.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref680"></a>Syntax</p>
<pre>DBMS_WM.GotoSavePoint(
   savepoint_name  IN VARCHAR2 DEFAULT &#39;LATEST&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref681"></a>Parameters</p>
<div id="ADWSM99322" class="tblformal">
<p class="titleintable"><a id="sthref682"></a><a id="sthref683"></a>Table 4-35 GotoSavepoint Procedure Parameters</p>
<table class="cellalignment5786" title="GotoSavepoint Procedure Parameters" summary="GotoSavepoint Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t39">Parameter</th>
<th class="cellalignment5787" id="r1c2-t39">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t39" headers="r1c1-t39">
<pre>savepoint_name
</pre></td>
<td class="cellalignment5788" headers="r2c1-t39 r1c2-t39">
<p>Name of the savepoint. The name is case-sensitive. If <code>savepoint_name</code> is not specified, the default is <code>LATEST</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref684"></a>Usage Notes</p>
<p>You are presented a read-only view of the workspace at the time of savepoint creation. This procedure is useful for examining the workspace from different savepoints before performing a rollback to a specific savepoint by calling the <a href="#i78733">RollbackToSP</a> procedure to delete all rows from that savepoint forward.</p>
<p>This operation can be executed while users exist in the workspace. There are no explicit privileges associated with this operation.</p>
<p>If you do not want to roll back to the savepoint, you can call the GotoSavepoint procedure with a null parameter to go to the currently active version in the workspace. (This achieves the same result as calling the <a href="#i78730">GotoWorkspace</a> procedure and specifying the workspace.)</p>
<p>For more information about savepoints, including the <code>LATEST</code> savepoint, see <a href="long_intro.htm#i1012409">Section 1.1.2</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref685"></a>Examples</p>
<p>The following example goes to the savepoint named <code>Savepoint1</code>.</p>
<pre>EXECUTE DBMS_WM.GotoSavepoint (&#39;Savepoint1&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78730"></a>
<div id="ADWSM99323" class="refsect1">
<h2 class="refsect1"><a id="sthref686"></a><a id="sthref687"></a><a id="sthref688"></a>GotoWorkspace</h2>
<p>Moves the current session to the specified workspace.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref689"></a>Syntax</p>
<pre>DBMS_WM.GotoWorkspace(
   workspace  IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref690"></a>Parameters</p>
<div id="ADWSM99324" class="tblformal">
<p class="titleintable"><a id="sthref691"></a><a id="sthref692"></a>Table 4-36 GotoWorkspace Procedure Parameters</p>
<table class="cellalignment5786" title="GotoWorkspace Procedure Parameters" summary="GotoWorkspace Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t40">Parameter</th>
<th class="cellalignment5787" id="r1c2-t40">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t40" headers="r1c1-t40">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r2c1-t40 r1c2-t40">
<p>Name of the workspace. The name is case-sensitive.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref693"></a>Usage Notes</p>
<p>After a user goes to a workspace, modifications to data can be made there.</p>
<p>To go to the live database, specify <code>workspace</code> as <code>LIVE</code>. Because many operations are prohibited when any users (including you) are in the workspace, it is often convenient to go to the <code>LIVE</code> workspace before performing operations on created workspaces.</p>
<p>An exception is raised if one or more of the following apply:</p>
<ul>
<li>
<p><code>workspace</code> does not exist.</p>
</li>
<li>
<p>The user does not have <code>ACCESS_WORKSPACE</code> privilege for <code>workspace</code>.</p>
</li>
<li>
<p><code>workspace</code> has been frozen in <code>NO_ACCESS</code> mode (see the <a href="#i79088">FreezeWorkspace</a> procedure).</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref694"></a>Examples</p>
<p>The following example includes the user in the <code>NEWWORKSPACE</code> workspace. The user will begin to work in the latest version in that workspace.</p>
<pre>EXECUTE DBMS_WM.GotoWorkspace (&#39;NEWWORKSPACE&#39;);
</pre>
<p>The following example includes the user in the <code>LIVE</code> database workspace. By default, when users connect to a database, they are placed in this workspace.</p>
<pre>EXECUTE DBMS_WM.GotoWorkspace (&#39;LIVE&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACHFHEJ"></a>
<div id="ADWSM99325" class="refsect1">
<h2 class="refsect1"><a id="sthref695"></a><a id="sthref696"></a><a id="sthref697"></a>Grant<a id="sthref698"></a>GraphPriv</h2>
<p>Grants privileges on multiparent graph workspaces to users and roles. The <code>grant_option</code> parameter enables the grantee to grant the specified privileges to other users and roles.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref699"></a>Syntax</p>
<pre>DBMS_WM.GrantGraphPriv(
   priv_types      IN VARCHAR2,
   leaf_workspace  IN VARCHAR2,
   grantee         IN VARCHAR2,
   node_types      IN VARCHAR2 DEFAULT &#39;(&#39;&#39;R&#39;&#39;,&#39;&#39;I&#39;&#39;,&#39;&#39;L&#39;&#39;)&#39;,
   grant_option    IN VARCHAR2 DEFAULT &#39;NO&#39;,
   auto_commit     IN BOOLEAN DEFAULT TRUE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref700"></a>Parameters</p>
<div id="ADWSM99326" class="tblformal">
<p class="titleintable"><a id="sthref701"></a><a id="sthref702"></a>Table 4-37 GrantGraphPriv Procedure Parameters</p>
<table class="cellalignment5786" title="GrantGraphPriv Procedure Parameters" summary="GrantGraphPriv Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t41">Parameter</th>
<th class="cellalignment5787" id="r1c2-t41">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t41" headers="r1c1-t41">
<pre>priv_types
</pre></td>
<td class="cellalignment5788" headers="r2c1-t41 r1c2-t41">
<p>A string of one or more keywords representing privileges. (<a href="long_intro.htm#i1017165">Section 1.4</a> discusses Workspace Manager privileges.) Use commas to separate privilege keywords. The available keywords are <code>ACCESS_WORKSPACE</code>, <code>MERGE_WORKSPACE</code>, <code>CREATE_WORKSPACE</code>, <code>REMOVE_WORKSPACE</code>, <code>ROLLBACK_WORKSPACE</code>, and <code>FREEZE_WORKSPACE</code>.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t41" headers="r1c1-t41">
<pre>leaf_workspace
</pre></td>
<td class="cellalignment5788" headers="r3c1-t41 r1c2-t41">
<p>Name of the leaf workspace in the directed acyclic graph. (Leaf workspaces, directed acyclic graphs, and other concepts related to multiparent workspaces are explained in <a href="long_intro.htm#i1018503">Section 1.1.10</a>.) The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t41" headers="r1c1-t41">
<pre>grantee
</pre></td>
<td class="cellalignment5788" headers="r4c1-t41 r1c2-t41">
<p>Name of the user (can be the <code>PUBLIC</code> user group) or role to which to grant <code>priv_types</code>.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r5c1-t41" headers="r1c1-t41">
<pre>node_types
</pre></td>
<td class="cellalignment5788" headers="r5c1-t41 r1c2-t41">
<p>List of letters (in parentheses and comma-delimited) representing the types of nodes on which to grant the privileges: <code>R</code> for the root of the graph, <code>I</code> for the specified intermediate node, <code>L</code> for the leaf of the graph. The default is all types of nodes.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r6c1-t41" headers="r1c1-t41">
<pre>grant_option
</pre></td>
<td class="cellalignment5788" headers="r6c1-t41 r1c2-t41">
<p>Specify <code>YES</code> to enable the grant option for grantee, or <code>NO</code> (the default) to disable the grant option for grantee. The grant option allows <code>grantee</code> to grant the privileges specified in <code>priv_types</code> on the workspace specified in <code>leaf_workspace</code> to other users and roles.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r7c1-t41" headers="r1c1-t41">
<pre>auto_commit
</pre></td>
<td class="cellalignment5788" headers="r7c1-t41 r1c2-t41">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> (the default) causes the operation to be executed as an autonomous database transaction that will be committed when it finishes.</p>
<p><code>FALSE</code> causes the operation to be executed as part of the caller&#39;s open database transaction (if one exists). If there is no open database transaction, the operation is executed in a new database transaction. In either case, the caller is responsible for committing the transaction. For more information, see <a href="long_intro.htm#i1014370">Section 1.1.8</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref703"></a>Usage Notes</p>
<p>Contrast this procedure with <a href="#i97023">GrantWorkspacePriv</a>, which grants workspace-level Workspace Manager privileges on workspaces other than multiparent graph workspaces.</p>
<p>If a user gets a privilege from more than one source and if any of those sources has the grant option for that privilege, the user has the grant option for the privilege. For example, assume that user <code>SCOTT</code> has been granted the <code>ACCESS_WORKSPACE</code> privilege with <code>grant_option</code> as <code>NO</code>, but that the <code>PUBLIC</code> user group has been granted the <code>ACCESS_WORKSPACE</code> privilege with <code>grant_option</code> as <code>YES</code>. Because user <code>SCOTT</code> is a member of <code>PUBLIC</code>, user <code>SCOTT</code> has the <code>ACCESS_WORKSPACE</code> privilege with the grant option.</p>
<p>The <code>WM_ADMIN_ROLE</code> role has all Workspace Manager privileges with the grant option. The <code>WM_ADMIN_ROLE</code> role is automatically given to the <code>DBA</code> role.</p>
<p>The <code>ACCESS_WORKSPACE</code> or <code>ACCESS_ANY_WORKSPACE</code> privilege is needed for all other Workspace Manager privileges.</p>
<p>To revoke workspace-level privileges on multiparent graph workspaces, use the <a href="#CACFCFGI">RevokeGraphPriv</a> procedure.</p>
<p>An exception is raised if one or more of the following apply:</p>
<ul>
<li>
<p><code>grantee</code> is not a valid user or role in the database.</p>
</li>
<li>
<p>You do not have the privilege to grant <code>priv_types</code>.</p>
</li>
<li>
<p><code>auto_commit</code> is <code>TRUE</code> and an open transaction exists in a parent or child workspace of any table that needs to be modified.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref704"></a>Examples</p>
<p>The following example enables user <code>Smith</code> to access all types of nodes in the directed acyclic graph in which the <code>NEWWORKSPACE</code> workspace is the leaf workspace and to merge changes in these workspaces, and it allows <code>Smith</code> to grant the two specified privileges on the leaf workspace to other users.</p>
<pre>DBMS_WM.GrantGraphPriv (&#39;ACCESS_WORKSPACE, MERGE_WORKSPACE&#39;, &#39;NEWWORKSPACE&#39;, &#39;Smith&#39;, &#39;YES&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="ADWSM99327" class="refsect1"><a id="sthref705"></a>
<h2 class="refsect1"><a id="sthref706"></a><a id="sthref707"></a><a id="sthref708"></a><a id="sthref709"></a><a id="sthref710"></a><a id="sthref711"></a>GrantPrivsOnPolicy</h2>
<p>Grants the privileges required to call the <a href="#i80309">EnableVersioning</a> procedure on a table that contains the specified Oracle Label Security (OLS) policy.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref712"></a>Syntax</p>
<pre>DBMS_WM.GrantPrivsOnPolicy(
   policy_name  IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref713"></a>Parameters</p>
<div id="ADWSM99328" class="tblformal">
<p class="titleintable"><a id="sthref714"></a><a id="sthref715"></a>Table 4-38 GrantPrivsOnPolicy Procedure Parameters</p>
<table class="cellalignment5786" title="GrantPrivsOnPolicy Procedure Parameters" summary="GrantPrivsOnPolicy Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t42">Parameter</th>
<th class="cellalignment5787" id="r1c2-t42">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t42" headers="r1c1-t42">
<pre>policy_name
</pre></td>
<td class="cellalignment5788" headers="r2c1-t42 r1c2-t42">
<p>Name of the policy for which privileges need to be granted.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref716"></a>Usage Notes</p>
<p>This procedure grants the necessary privileges on an OLS policy to the WMSYS schema. These privileges are required when executing workspace operations. If multiple tables protected by the same policy need to be version-enabled, this procedure only needs to be executed once.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref717"></a>Examples</p>
<p>The following grants the necessary privileges on a policy named <code>my_policy</code>.</p>
<pre>EXECUTE DBMS_WM.GrantPrivsOnPolicy(&#39;my_policy&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i80865"></a>
<div id="ADWSM99329" class="refsect1">
<h2 class="refsect1"><a id="sthref718"></a><a id="sthref719"></a><a id="sthref720"></a><a id="sthref721"></a>Grant<a id="sthref722"></a>SystemPriv</h2>
<p>Grants system-level privileges (not restricted to a particular workspace) to users and roles. The <code>grant_option</code> parameter enables the grantee to grant the specified privileges to other users and roles.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref723"></a>Syntax</p>
<pre>DBMS_WM.GrantSystemPriv(
   priv_types    IN VARCHAR2,
   grantee       IN VARCHAR2,
   grant_option  IN VARCHAR2 DEFAULT &#39;NO&#39;,
   auto_commit   IN BOOLEAN DEFAULT TRUE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref724"></a>Parameters</p>
<div id="ADWSM99330" class="tblformal">
<p class="titleintable"><a id="sthref725"></a><a id="sthref726"></a>Table 4-39 GrantSystemPriv Procedure Parameters</p>
<table class="cellalignment5786" title="GrantSystemPriv Procedure Parameters" summary="GrantSystemPriv Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t43">Parameter</th>
<th class="cellalignment5787" id="r1c2-t43">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t43" headers="r1c1-t43">
<pre>priv_types
</pre></td>
<td class="cellalignment5788" headers="r2c1-t43 r1c2-t43">
<p>A string of one or more keywords representing privileges. (<a href="long_intro.htm#i1017165">Section 1.4</a> discusses Workspace Manager privileges.) Use commas to separate privilege keywords. The available keywords are <code>ACCESS_ANY_WORKSPACE</code>, <code>MERGE_ANY_WORKSPACE</code>, <code>CREATE_ANY_WORKSPACE</code>, <code>REMOVE_ANY_WORKSPACE</code>, <code>ROLLBACK_ANY_WORKSPACE</code>, and <code>FREEZE_ANY_WORKSPACE</code>.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t43" headers="r1c1-t43">
<pre>grantee
</pre></td>
<td class="cellalignment5788" headers="r3c1-t43 r1c2-t43">
<p>Name of the user (can be the <code>PUBLIC</code> user group) or role to which to grant <code>priv_types</code>.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t43" headers="r1c1-t43">
<pre>grant_option
</pre></td>
<td class="cellalignment5788" headers="r4c1-t43 r1c2-t43">
<p>Specify <code>YES</code> to enable the grant option for grantee, or <code>NO</code> (the default) to disable the grant option for grantee. The grant option allows <code>grantee</code> to grant the privileges specified in <code>priv_types</code> to other users and roles.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r5c1-t43" headers="r1c1-t43">
<pre>auto_commit
</pre></td>
<td class="cellalignment5788" headers="r5c1-t43 r1c2-t43">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> (the default) causes the operation to be executed as an autonomous database transaction that will be committed when it finishes.</p>
<p><code>FALSE</code> causes the operation to be executed as part of the caller&#39;s open database transaction (if one exists). If there is no open database transaction, the operation is executed in a new database transaction. In either case, the caller is responsible for committing the transaction. For more information, see <a href="long_intro.htm#i1014370">Section 1.1.8</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref727"></a>Usage Notes</p>
<p>Contrast this procedure with <a href="#i97023">GrantWorkspacePriv</a>, which grants workspace-level Workspace Manager privileges with keywords that do not contain <code>ANY</code> and which has a <code>workspace</code> parameter.</p>
<p>If a user gets a privilege from more than one source and if any of those sources has the grant option for that privilege, the user has the grant option for the privilege. For example, assume that user <code>SCOTT</code> has been granted the <code>ACCESS_ANY_WORKSPACE</code> privilege with <code>grant_option</code> as <code>NO</code>, but that the <code>PUBLIC</code> user group has been granted the <code>ACCESS_ANY_WORKSPACE</code> privilege with <code>grant_option</code> as <code>YES</code>. Because user <code>SCOTT</code> is a member of <code>PUBLIC</code>, user <code>SCOTT</code> has the <code>ACCESS_ANY_WORKSPACE</code> privilege with the grant option.</p>
<p>The <code>WM_ADMIN_ROLE</code> role has all Workspace Manager privileges with the grant option. The <code>WM_ADMIN_ROLE</code> role is automatically given to the <code>DBA</code> role.</p>
<p>The <code>ACCESS_WORKSPACE</code> or <code>ACCESS_ANY_WORKSPACE</code> privilege is needed for all other Workspace Manager privileges.</p>
<p>To see which users have been granted Workspace Manager system-level privileges, examine the <a href="long_views.htm#i92679">DBA_WM_SYS_PRIVS</a> metadata view, which is described in <a href="long_views.htm#i92679">Section 5.20</a>.</p>
<p>To revoke system-level privileges, use the <a href="#i97252">RevokeSystemPriv</a> procedure.</p>
<p>An exception is raised if one or more of the following apply:</p>
<ul>
<li>
<p><code>grantee</code> is not a valid user or role in the database.</p>
</li>
<li>
<p>You do not have the privilege to grant <code>priv_types</code>.</p>
</li>
<li>
<p><code>auto_commit</code> is <code>TRUE</code> and an open transaction exists in a parent or child workspace of any table that needs to be modified.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref728"></a>Examples</p>
<p>The following example enables user <code>Smith</code> to access any workspace in the database, but does not allow <code>Smith</code> to grant the <code>ACCESS_ANY_WORKSPACE</code> privilege to other users.</p>
<pre>EXECUTE DBMS_WM.GrantSystemPriv (&#39;ACCESS_ANY_WORKSPACE&#39;, &#39;Smith&#39;, &#39;NO&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i97023"></a>
<div id="ADWSM99331" class="refsect1">
<h2 class="refsect1"><a id="sthref729"></a><a id="sthref730"></a><a id="sthref731"></a>Grant<a id="sthref732"></a>WorkspacePriv</h2>
<p>Grants workspace-level privileges to users and roles. The <code>grant_option</code> parameter enables the grantee to grant the specified privileges to other users and roles.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref733"></a>Syntax</p>
<pre>DBMS_WM.GrantWorkspacePriv(
   priv_types    IN VARCHAR2,
   workspace     IN VARCHAR2,
   grantee       IN VARCHAR2,
   grant_option  IN VARCHAR2 DEFAULT &#39;NO&#39;,
   auto_commit   IN BOOLEAN DEFAULT TRUE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref734"></a>Parameters</p>
<div id="ADWSM99332" class="tblformal">
<p class="titleintable"><a id="sthref735"></a><a id="sthref736"></a>Table 4-40 GrantWorkspacePriv Procedure Parameters</p>
<table class="cellalignment5786" title="GrantWorkspacePriv Procedure Parameters" summary="GrantWorkspacePriv Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t44">Parameter</th>
<th class="cellalignment5787" id="r1c2-t44">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t44" headers="r1c1-t44">
<pre>priv_types
</pre></td>
<td class="cellalignment5788" headers="r2c1-t44 r1c2-t44">
<p>A string of one or more keywords representing privileges. (<a href="long_intro.htm#i1017165">Section 1.4</a> discusses Workspace Manager privileges.) Use commas to separate privilege keywords. The available keywords are <code>ACCESS_WORKSPACE</code>, <code>MERGE_WORKSPACE</code>, <code>CREATE_WORKSPACE</code>, <code>REMOVE_WORKSPACE</code>, <code>ROLLBACK_WORKSPACE</code>, and <code>FREEZE_WORKSPACE</code>.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t44" headers="r1c1-t44">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r3c1-t44 r1c2-t44">
<p>Name of the workspace. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t44" headers="r1c1-t44">
<pre>grantee
</pre></td>
<td class="cellalignment5788" headers="r4c1-t44 r1c2-t44">
<p>Name of the user (can be the <code>PUBLIC</code> user group) or role to which to grant <code>priv_types</code>.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r5c1-t44" headers="r1c1-t44">
<pre>grant_option
</pre></td>
<td class="cellalignment5788" headers="r5c1-t44 r1c2-t44">
<p>Specify <code>YES</code> to enable the grant option for grantee, or <code>NO</code> (the default) to disable the grant option for grantee. The grant option allows <code>grantee</code> to grant the privileges specified in <code>priv_types</code> on the workspace specified in <code>workspace</code> to other users and roles.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r6c1-t44" headers="r1c1-t44">
<pre>auto_commit
</pre></td>
<td class="cellalignment5788" headers="r6c1-t44 r1c2-t44">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> (the default) causes the operation to be executed as an autonomous database transaction that will be committed when it finishes.</p>
<p><code>FALSE</code> causes the operation to be executed as part of the caller&#39;s open database transaction (if one exists). If there is no open database transaction, the operation is executed in a new database transaction. In either case, the caller is responsible for committing the transaction. For more information, see <a href="long_intro.htm#i1014370">Section 1.1.8</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref737"></a>Usage Notes</p>
<p>Contrast this procedure with <a href="#i80865">GrantSystemPriv</a>, which grants system-level Workspace Manager privileges with keywords in the form <span class="italic">xxx</span>_ANY_WORKSPACE (<code>ACCESS_ANY_WORKSPACE</code>, <code>MERGE_ANY_WORKSPACE</code>, and so on). Contrast this procedure also with <a href="#CACHFHEJ">GrantGraphPriv</a>, which grants privileges on multiparent graph workspaces to users and roles.</p>
<p>If a user gets a privilege from more than one source and if any of those sources has the grant option for that privilege, the user has the grant option for the privilege. For example, assume that user <code>SCOTT</code> has been granted the <code>ACCESS_WORKSPACE</code> privilege with <code>grant_option</code> as <code>NO</code>, but that the <code>PUBLIC</code> user group has been granted the <code>ACCESS_WORKSPACE</code> privilege with <code>grant_option</code> as <code>YES</code>. Because user <code>SCOTT</code> is a member of <code>PUBLIC</code>, user <code>SCOTT</code> has the <code>ACCESS_WORKSPACE</code> privilege with the grant option.</p>
<p>The <code>WM_ADMIN_ROLE</code> role has all Workspace Manager privileges with the grant option. The <code>WM_ADMIN_ROLE</code> role is automatically given to the <code>DBA</code> role.</p>
<p>The <code>ACCESS_WORKSPACE</code> or <code>ACCESS_ANY_WORKSPACE</code> privilege is needed for all other Workspace Manager privileges.</p>
<p>To revoke workspace-level privileges, use the <a href="#i79283">RevokeWorkspacePriv</a> procedure.</p>
<p>An exception is raised if one or more of the following apply:</p>
<ul>
<li>
<p><code>grantee</code> is not a valid user or role in the database.</p>
</li>
<li>
<p>You do not have the privilege to grant <code>priv_types</code>.</p>
</li>
<li>
<p><code>auto_commit</code> is <code>TRUE</code> and an open transaction exists in a parent or child workspace of any table that needs to be modified.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref738"></a>Examples</p>
<p>The following example enables user <code>Smith</code> to access the <code>NEWWORKSPACE</code> workspace and merge changes in that workspace, and allows <code>Smith</code> to grant the two specified privileges on <code>NEWWORKSPACE</code> to other users.</p>
<pre>DBMS_WM.GrantWorkspacePriv (&#39;ACCESS_WORKSPACE, MERGE_WORKSPACE&#39;, &#39;NEWWORKSPACE&#39;, &#39;Smith&#39;, &#39;YES&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i110329"></a>
<div id="ADWSM99333" class="refsect1">
<h2 class="refsect1"><a id="sthref739"></a><a id="sthref740"></a>Import</h2>
<p>Imports data from a staging table (all rows, or as limited by any combination of several parameters) into a version-enabled table in a specified workspace.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref741"></a>Syntax</p>
<pre>DBMS_WM.Import(
   staging_table   IN VARCHAR2,
   to_table        IN VARCHAR2,
   to_workspace    IN VARCHAR2,
   from_workspace  IN VARCHAR2 DEFAULT NULL,
   where_clause    IN VARCHAR2 DEFAULT NULL,
   import_scope    IN VARCHAR2 DEFAULT DBMS_WM.IMPORT_ALL_DATA,
   ancestor_savepoint_workspace  IN VARCHAR2 DEFAULT NULL,
   ancestor_savepoint_name       IN VARCHAR2 DEFAULT NULL,
   apply_locks     IN BOOLEAN DEFAULT FALSE,
   enforceUCFlag   IN BOOLEAN DEFAULT TRUE,
   enforceRICFlag  IN BOOLEAN DEFAULT TRUE,
   auto_commit     IN BOOLEAN DEFAULT TRUE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref742"></a>Parameters</p>
<div id="ADWSM99334" class="tblformal">
<p class="titleintable"><a id="sthref743"></a><a id="sthref744"></a>Table 4-41 Import Procedure Parameters</p>
<table class="cellalignment5786" title="Import Procedure Parameters" summary="Import Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t45">Parameter</th>
<th class="cellalignment5787" id="r1c2-t45">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t45" headers="r1c1-t45">
<pre>staging_table
</pre></td>
<td class="cellalignment5788" headers="r2c1-t45 r1c2-t45">
<p>Name of the table that holds the data that had previously been exported using the <a href="#i114714">Export</a> procedure. The name is not case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t45" headers="r1c1-t45">
<pre>to_table
</pre></td>
<td class="cellalignment5788" headers="r3c1-t45 r1c2-t45">
<p>Name of the table into which to import the data. The name is not case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t45" headers="r1c1-t45">
<pre>to_workspace
</pre></td>
<td class="cellalignment5788" headers="r4c1-t45 r1c2-t45">
<p>Name of the workspace in which to import the data. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r5c1-t45" headers="r1c1-t45">
<pre>from_workspace
</pre></td>
<td class="cellalignment5788" headers="r5c1-t45 r1c2-t45">
<p>Name of the workspace from which to import the data. The name is case-sensitive. If the staging table contains versioning information, you must specify <code>from_workspace</code>.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r6c1-t45" headers="r1c1-t45">
<pre>where_clause
</pre></td>
<td class="cellalignment5788" headers="r6c1-t45 r1c2-t45">
<p>The <code>WHERE</code> clause (excluding the <code>WHERE</code> keyword) identifying the rows to be imported. Example: <code>&#39;department_id = 20&#39;</code></p>
<p>Only primary key columns can be specified in the <code>WHERE</code> clause, except in a subquery. The subquery can refer to columns that are not primary keys, but it cannot refer to a version-enabled table.</p>
<p>If the <code>where_clause</code> parameter is not specified, all rows in <code>staging_table</code> are imported.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r7c1-t45" headers="r1c1-t45">
<pre>import_scope
</pre></td>
<td class="cellalignment5788" headers="r7c1-t45 r1c2-t45">
<p>The scope (amount of data) for the import operation.</p>
<p><code>DBMS_WM.IMPORT_ALL_DATA</code> (the default) imports all relevant data.</p>
<p><code>DBMS_WM.IMPORT_MODIFIED_DATA_ONLY</code> imports only relevant data that has been inserted, updated, or deleted in <code>from_workspace</code>.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r8c1-t45" headers="r1c1-t45">
<pre>ancestor_savepoint_workspace
</pre></td>
<td class="cellalignment5788" headers="r8c1-t45 r1c2-t45">
<p>Name of the workspace containing the ancestor savepoint specified in <code>ancestor_savepoint_name</code>. For the current release, if you specify <code>ancestor_savepoint_workspace</code>, the value must be <code>LIVE</code>.</p>
<p>If you specify this parameter, you must also specify <code>ancestor_savepoint_name</code>.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r9c1-t45" headers="r1c1-t45">
<pre>ancestor_savepoint_name
</pre></td>
<td class="cellalignment5788" headers="r9c1-t45 r1c2-t45">
<p>Name of a savepoint in <code>ancestor_savepoint_workspace</code>. All data that was ancestor data at the time of the export operation (see the Usage Notes for the <a href="#i114714">Export</a> procedure) is imported to the specified savepoint. For the current version, if you specify <code>ancestor_savepoint_name</code>, the value must be <code>DBMS_WM.ROOT_VERSION</code>.</p>
<p>If you specify this parameter, you must also specify <code>ancestor_savepoint_workspace</code>.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r10c1-t45" headers="r1c1-t45">
<pre>apply_locks
</pre></td>
<td class="cellalignment5788" headers="r10c1-t45 r1c2-t45">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> causes any locks that were present on the exported data to be applied to the data when importing, unless a more restrictive lock mode is in effect for the current session.</p>
<p><code>FALSE</code> (the default) ignores any locks on rows in the staging table, but instead always uses the lock mode is in effect for the current session.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r11c1-t45" headers="r1c1-t45">
<pre>enforceUCFlag
</pre></td>
<td class="cellalignment5788" headers="r11c1-t45 r1c2-t45">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> (the default) enforces any unique constraints defined on <code>to_table</code>, ensuring that the import operation does not violate any such constraints.</p>
<p><code>FALSE</code> does not enforce any unique constraints defined on <code>to_table</code> for the import operation.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r12c1-t45" headers="r1c1-t45">
<pre>enforceRICFlag
</pre></td>
<td class="cellalignment5788" headers="r12c1-t45 r1c2-t45">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> (the default) enforces any referential integrity constraints defined on <code>to_table</code>, ensuring that the import operation does not violate any such constraints.</p>
<p><code>FALSE</code> does not enforce any referential integrity constraints defined on <code>to_table</code> for the import operation.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r13c1-t45" headers="r1c1-t45">
<pre>auto_commit
</pre></td>
<td class="cellalignment5788" headers="r13c1-t45 r1c2-t45">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> (the default) causes the operation to be executed as an autonomous database transaction that will be committed when it finishes.</p>
<p><code>FALSE</code> causes the operation to be executed as part of the caller&#39;s open database transaction (if one exists). If there is no open database transaction, the operation is executed in a new database transaction. In either case, the caller is responsible for committing the transaction. For more information, see <a href="long_intro.htm#i1014370">Section 1.1.8</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref745"></a>Usage Notes</p>
<p>All data that satisfies the <code>where_clause</code> parameter value in the staging table named <code>staging_table</code> and the <code>import_scope</code> parameter value is imported into the version-enabled table named <code>to_table</code>.</p>
<p>The data must have been previously exported to the staging table using the <a href="#i114714">Export</a> procedure.</p>
<p>Each row of data to be imported is considered to be one of the following: inserted, updated, or deleted in <code>from_workspace</code> (that is, <span class="italic">modified data</span>); or data that was not modified in <code>from_workspace</code> but can be seen in it (that is, <span class="italic">ancestor data</span>). If data is exported from the <code>LIVE</code> workspace, it is all modified data.</p>
<p>An exception is raised if one or more of the following apply:</p>
<ul>
<li>
<p>A specified table or workspace does not exist.</p>
</li>
<li>
<p><code>staging_table</code> is not in a valid format for the import operation.</p>
</li>
<li>
<p><code>to_table</code> is not a version-enabled table, or does not have an appropriate definition (for example, contains columns not in the staging table).</p>
</li>
<li>
<p><code>from_workspace</code> is null and <code>staging_table</code> contains versioning information.</p>
</li>
<li>
<p><code>ancestor_savepoint_name</code> is not a valid savepoint in <code>ancestor_savepoint_workspace</code>.</p>
</li>
<li>
<p><code>auto_commit</code> is <code>TRUE</code> and an open transaction exists in a parent or child workspace of any table that needs to be modified.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref746"></a>Examples</p>
<p>The following example imports modified data from the staging table <code>COLA_MARKETING_BUDGET_STG</code> in workspace <code>B_focus_2</code> into the <code>COLA_MARKETING_BUDGET</code> table in workspace <code>B_Focus_1</code>. (The <code>EXECUTE</code> statement is actually on a single line.)</p>
<pre>EXECUTE DBMS_WM.Import(staging_table =&gt; &#39;COLA_MARKETING_BUDGET_STG&#39;,
  to_table =&gt; &#39;COLA_MARKETING_BUDGET&#39;, to_workspace =&gt; &#39;B_focus_1&#39;,
  from_workspace =&gt; &#39;B_focus_2&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACFJIAJ"></a>
<div id="ADWSM99508" class="refsect1">
<h2 class="refsect1"><a id="sthref747"></a><a id="sthref748"></a>Import_Schemas</h2>
<p>Imports the entire Workspace Manager installation from a dump file that had been created by the <a href="#CACCAGBB">Export_Schemas</a> procedure. Uses the Oracle Data Pump Import utility.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref749"></a>Syntax</p>
<pre>DBMS_WM.Import_Schemas(
   job_name           IN VARCHAR2,
   alt_schema         IN VARCHAR2 DEFAULT &#39;WMSYS_N&#39;,
   ignore_last_error  IN BOOLEAN DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref750"></a>Parameters</p>
<div id="ADWSM99509" class="tblformal">
<p class="titleintable"><a id="sthref751"></a><a id="sthref752"></a>Table 4-42 Import_Schemas Procedure Parameters</p>
<table class="cellalignment5786" title="Import_Schemas Procedure Parameters" summary="Import_Schemas Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t46">Parameter</th>
<th class="cellalignment5787" id="r1c2-t46">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t46" headers="r1c1-t46">
<pre>table_name
</pre></td>
<td class="cellalignment5788" headers="r2c1-t46 r1c2-t46">
<p>Name of the Data Pump job to be used for the import operation.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t46" headers="r1c1-t46">
<pre>alt_schema
</pre></td>
<td class="cellalignment5788" headers="r3c1-t46 r1c2-t46">
<p>Name of the database schema to be used for temporary storage of Workspace Manager metadata. The default is <code>WMSYS_N</code>. This schema must not already exist when the procedure is called, and it is automatically dropped when the procedure completes successfully.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t46" headers="r1c1-t46">
<pre>ignore_last_error
</pre></td>
<td class="cellalignment5788" headers="r4c1-t46 r1c2-t46">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> ignores the last error, if any, that occurred during the previous call to the Import_Schemas procedure. Information about the last error is stored in the <a href="long_views.htm#BABCGBFG">DBA_WM_VT_ERRORS</a> static data dictionary view, which is described in <a href="long_views.htm#g1008700">Chapter 5</a>. See the Usage Notes for more information.</p>
<p><code>FALSE</code> <code>(</code>the default) does not ignore the last error, if any, that occurred during the previous call to the Import_Schemas procedure.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref753"></a>Usage Notes</p>
<p>This procedure uses a dump file that had been created using the <a href="#CACCAGBB">Export_Schemas</a> procedure. There must be no existing version-enabled tables or workspaces, other than <code>LIVE</code>, before you call this procedure. All tables, types, views, functions, RLS policies, and grants of the schemas contained in the dump file are imported. (If you want to import any other objects, you must import them separately.) If any system or workspace privileges or any privileges on version-enabled tables were granted to users that were not contained in the generated dump file, those schemas must be created before you call this procedure; otherwise, the grants will be lost.</p>
<p>This procedure makes use of an already existing Data Pump Import job. When you create this job using the <code>DBMS_DATAPUMP.OPEN</code> procedure, the <code>operation</code> parameter must be set to <code>IMPORT</code> and the <code>mode</code> parameter must be set to <code>FULL</code>. The dump file or files and log file should also be specified before you call the <a href="#CACCAGBB">Export_Schemas</a> procedure. No procedures that modify or limit what gets imported (such as <code>DBMS_DATAPUMP.METADATA_FILTER</code>) should be executed on this job.</p>
<p>The schema specified by the <code>alt_schema</code> parameter cannot exist before you call this procedure. It must also be the same schema as specified for <code>alt_schema</code> when you called the <a href="#CACCAGBB">Export_Schemas</a> procedure.</p>
<p>For information about using the Data Pump Utility, see <a class="olink SUTIL" href="../SUTIL/toc.htm"><span class="italic">Oracle Database Utilities</span></a>.</p>
<p>If a call to the Import_Schemas procedure fails, you should try to fix the cause of the error. Examine the <a href="long_views.htm#BABCGBFG">DBA_WM_VT_ERRORS</a> static data dictionary view to see the SQL statement and error message. Fix the cause of the error, and then call the Import_Schemas procedure again with the default <code>ignore_last_error</code> parameter value of <code>FALSE</code>. However, if the call still fails and you cannot fix the cause of the error, and if you are sure that it is safe and appropriate to ignore this error, then you can ignore the error by calling the Import_Schemas procedure with the <code>ignore_last_error</code> parameter value of <code>TRUE</code>. Note that you are responsible for ensuring that it is safe and appropriate to ignore the error.</p>
<p>An exception is raised if one or more of the following apply:</p>
<ul>
<li>
<p><code>job_name</code> does not exist.</p>
</li>
<li>
<p><code>alt_schema</code> already exists.</p>
</li>
<li>
<p>The executing user does not have DBA privileges.</p>
</li>
<li>
<p>Errors exist in the <code>WMSYS</code> or user schemas.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref754"></a>Examples</p>
<p>The following example imports the Workspace Manager metadata using the Oracle Data Pump job named <code>IMPORT_OWM_SCHEMAS</code>.</p>
<pre>DECLARE
  job_name  varchar2(128) := upper(&#39;IMPORT_OWM_SCHEMAS&#39;) ;
  dpj  number ;
BEGIN
  dpj := dbms_datapump.open(&#39;IMPORT&#39;, &#39;FULL&#39;, null, job_name, &#39;COMPATIBLE&#39;) ;
  dbms_datapump.add_file(dpj, &#39;owm_schema.dmp&#39;, &#39;DUMP_DIR&#39;) ;
  dbms_datapump.add_file(dpj, &#39;owm_schema_import.log&#39;, &#39;DUMP_DIR&#39;, filetype=&gt;dbms_datapump.KU$_FILE_TYPE_LOG_FILE) ;
  dbms_wm.import_schemas(job_name) ;
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i110193"></a>
<div id="ADWSM99335" class="refsect1">
<h2 class="refsect1"><a id="sthref755"></a><a id="sthref756"></a>IsWorkspaceOccupied</h2>
<p>Checks whether or not a workspace has any active sessions.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref757"></a>Syntax</p>
<pre>DBMS_WM.IsWorkspaceOccupied(
   workspace  IN VARCHAR2) RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref758"></a>Parameters</p>
<div id="ADWSM99336" class="tblformal">
<p class="titleintable"><a id="sthref759"></a><a id="sthref760"></a>Table 4-43 IsWorkspaceOccupied Function Parameters</p>
<table class="cellalignment5786" title="IsWorkspaceOccupied Function Parameters" summary="IsWorkspaceOccupied Function Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t47">Parameter</th>
<th class="cellalignment5787" id="r1c2-t47">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t47" headers="r1c1-t47">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r2c1-t47 r1c2-t47">
<p>Name of the workspace. The name is case-sensitive.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref761"></a>Usage Notes</p>
<p>This function returns <code>YES</code> if the workspace has any active sessions, and it returns <code>NO</code> if the workspace has no active sessions.</p>
<p>An exception is raised if the <code>LIVE</code> workspace is specified or if the user does not have the privilege to access the workspace.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref762"></a>Examples</p>
<p>The following example checks if any sessions are in the <code>B_focus_2</code> workspace.</p>
<pre>SELECT DBMS_WM.IsWorkspaceOccupied(&#39;B_focus_2&#39;) FROM DUAL;

DBMS_WM.ISWORKSPACEOCCUPIED(&#39;B_FOCUS_2&#39;)                                                 
--------------------------------------------------------------------------------
YES     
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i90778"></a>
<div id="ADWSM99337" class="refsect1">
<h2 class="refsect1"><a id="sthref763"></a><a id="sthref764"></a><a id="sthref765"></a><a id="sthref766"></a>LockRows</h2>
<p>Controls access to versioned rows in a specified table and to corresponding rows in the parent workspace.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref767"></a>Syntax</p>
<pre>DBMS_WM.LockRows(
   workspace     IN VARCHAR2,
   table_name    IN VARCHAR2,
   where_clause  IN VARCHAR2 DEFAULT &#39;&#39;,
   lock_mode     IN VARCHAR2 DEFAULT &#39;E&#39;,
   Xmin          IN NUMBER DEFAULT NULL,
   Ymin          IN NUMBER DEFAULT NULL,
   Xmax          IN NUMBER DEFAULT NULL,
   Ymax          IN NUMBER DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref768"></a>Parameters</p>
<div id="ADWSM99338" class="tblformal">
<p class="titleintable"><a id="sthref769"></a><a id="sthref770"></a>Table 4-44 LockRows Procedure Parameters</p>
<table class="cellalignment5786" title="LockRows Procedure Parameters" summary="LockRows Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t48">Parameter</th>
<th class="cellalignment5787" id="r1c2-t48">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t48" headers="r1c1-t48">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r2c1-t48 r1c2-t48">
<p>Name of the workspace. The latest versions of rows visible from the workspace are locked. If a row has not been modified in this workspace, the locked version could be in an ancestor workspace. The name is case-sensitive.</p>
<p>A value of <code>NONE</code> can be used if <code>lock_mode</code> is set to <code>VE</code> (version-exclusive). This causes the latest versions of rows to be locked, regardless of the workspaces from which they are visible.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t48" headers="r1c1-t48">
<pre>table_name
</pre></td>
<td class="cellalignment5788" headers="r3c1-t48 r1c2-t48">
<p>Name of the table or (if <code>Xmin</code>, <code>Ymin</code>, <code>Xmax</code>, and <code>Ymax</code> are specified) Spatial and Graph topology in which rows are to be locked. The name is not case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t48" headers="r1c1-t48">
<pre>where_clause
</pre></td>
<td class="cellalignment5788" headers="r4c1-t48 r1c2-t48">
<p>The <code>WHERE</code> clause (excluding the <code>WHERE</code> keyword) identifying the rows to be locked. Example: <code>&#39;department_id = 20&#39;</code></p>
<p>Only primary key columns can be specified in the <code>WHERE</code> clause, except in a subquery. The subquery can refer to columns that are not primary keys, but it cannot refer to a version-enabled table.</p>
<p>If <code>where_clause</code> is not specified, all rows in <code>table_name</code> are locked.</p>
<p>Do not specify the <code>where_clause</code> parameter if <code>table_name</code> specifies a Spatial and Graph topology name.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r5c1-t48" headers="r1c1-t48">
<pre>lock_mode
</pre></td>
<td class="cellalignment5788" headers="r5c1-t48 r1c2-t48">
<p>Mode with which to set the locks: <code>E</code> (exclusive), <code>WE</code> (workspace-exclusive), <code>VE</code> (version-exclusive), or <code>S</code> (shared). The default is <code>E</code>.</p>
<p><code>E</code> (exclusive) mode locks the rows in the previous version and the corresponding rows in the current version; no other users in the workspace for either version can change any values.</p>
<p><code>WE</code> (workspace-exclusive) mode locks the rows in the previous version and the corresponding rows in the current version such that only the user that set the lock can change the values in the current workspace; however, other users in other workspaces can change the values.</p>
<p><code>VE</code> (version-exclusive) mode locks the rows in the previous version and the corresponding rows in the current version such that only the user that set the lock can change the values; no other users (in any workspace) can change the values.</p>
<p><code>S</code> (shared) mode locks the rows in the previous version and the corresponding rows in the current version; however, other users in the workspace for the current version (but no users in the workspace for the previous version) can change values in these rows.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r6c1-t48" headers="r1c1-t48">
<pre>Xmin, Ymin
</pre></td>
<td class="cellalignment5788" headers="r6c1-t48 r1c2-t48">
<p>For Oracle Spatial and Graph topologies only (see <a href="long_intro.htm#i1020591">Section 1.14.1</a>), the X and Y coordinate values, respectively, of the lower-left corner of the window containing the rows to be locked.You must specify these parameters if you specified a topology name for <code>table_name</code>; otherwise, do not specify these parameters.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r7c1-t48" headers="r1c1-t48">
<pre>Xmax, Ymax
</pre></td>
<td class="cellalignment5788" headers="r7c1-t48 r1c2-t48">
<p>For Oracle Spatial and Graph topologies only (see <a href="long_intro.htm#i1020591">Section 1.14.1</a>), the X and Y coordinate values, respectively, of the upper-right corner of the window containing the rows to be locked.You must specify these parameters if you specified a topology name for <code>table_name</code>; otherwise, do not specify these parameters.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref771"></a>Usage Notes</p>
<p>This procedure affects Workspace Manager locking, which occurs in addition to any standard Oracle database locking. For an explanation of Workspace Manager locking, see <a href="long_intro.htm#i1006224">Section 1.3</a>.</p>
<p>This procedure does not affect whether Workspace Manager locking is set on or off (determined by the <a href="#i79459">SetLockingON</a> and <a href="#i79467">SetLockingOFF</a> procedures).</p>
<p>To unlock rows, use the <a href="#i85344">UnlockRows</a> procedure.</p>
<p>For information about Workspace Manager locking for tables in an Oracle Spatial and Graph topology, see <a href="long_intro.htm#i1020591">Section 1.14.1</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref772"></a>Examples</p>
<p>The following example locks rows in the <code>EMPLOYEES</code> table where <code>last_name = &#39;Smith&#39;</code> in the <code>NEWWORKSPACE</code> workspace.</p>
<pre>EXECUTE DBMS_WM.LockRows (&#39;NEWWORKSPACE&#39;, &#39;employees&#39;, &#39;last_name = &#39;&#39;Smith&#39;&#39;&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i90863"></a>
<div id="ADWSM99339" class="refsect1">
<h2 class="refsect1"><a id="sthref773"></a><a id="sthref774"></a><a id="sthref775"></a>MergeTable</h2>
<p>Applies changes to one or more tables (all rows or as specified in the <code>WHERE</code> clause) in a workspace to its parent workspace.</p>
<p>For a multiparent workspace (explained in <a href="long_intro.htm#i1018503">Section 1.1.10</a>), applies changes to one or more tables (all rows or as specified in the <code>WHERE</code> clause) from all non-root workspaces in the directed acyclic graph to the multiparent root workspace.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref776"></a>Syntax</p>
<pre>DBMS_WM.MergeTable(
   workspace         IN VARCHAR2,
   table_id          IN VARCHAR2,
   where_clause      IN VARCHAR2 DEFAULT &#39;&#39;,
   create_savepoint  IN BOOLEAN DEFAULT FALSE,
   remove_data       IN BOOLEAN DEFAULT FALSE,
   auto_commit       IN BOOLEAN DEFAULT TRUE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref777"></a>Parameters</p>
<div id="ADWSM99340" class="tblformal">
<p class="titleintable"><a id="sthref778"></a><a id="sthref779"></a>Table 4-45 MergeTable Procedure Parameters</p>
<table class="cellalignment5786" title="MergeTable Procedure Parameters" summary="MergeTable Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t49">Parameter</th>
<th class="cellalignment5787" id="r1c2-t49">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t49" headers="r1c1-t49">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r2c1-t49 r1c2-t49">
<p>Name of the workspace. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t49" headers="r1c1-t49">
<pre>table_id
</pre></td>
<td class="cellalignment5788" headers="r3c1-t49 r1c2-t49">
<p>Name of the table or tables containing rows to be merged into the parent workspace. To specify multiple tables, separate the names with commas (for example, <code>&#39;table1, table2&#39;</code>). The names are not case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t49" headers="r1c1-t49">
<pre>where_clause
</pre></td>
<td class="cellalignment5788" headers="r4c1-t49 r1c2-t49">
<p>The <code>WHERE</code> clause (excluding the <code>WHERE</code> keyword) identifying the rows to be merged into the parent workspace. Example: <code>&#39;department_id = 20&#39;</code></p>
<p>Only primary key columns can be specified in the <code>WHERE</code> clause, except in a subquery. The subquery can refer to columns that are not primary keys, but it cannot refer to a version-enabled table.</p>
<p>If the <code>where_clause</code> parameter is not specified, all rows in <code>table_name</code> are merged.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r5c1-t49" headers="r1c1-t49">
<pre>create_savepoint
</pre></td>
<td class="cellalignment5788" headers="r5c1-t49 r1c2-t49">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> creates an implicit savepoint in the parent workspace before the merge operation. For a multiparent workspace, creates an implicit savepoint in the multiparent root workspace before the merge operation. (Implicit and explicit savepoints are described in <a href="long_intro.htm#i1012409">Section 1.1.2</a>.)</p>
<p><code>FALSE</code> (the default) does not create an implicit savepoint in the parent workspace before the merge operation.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r6c1-t49" headers="r1c1-t49">
<pre>remove_data
</pre></td>
<td class="cellalignment5788" headers="r6c1-t49 r1c2-t49">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> removes the data in the table (as specified by the <code>where_clause</code> parameter) in the child workspace. For a multiparent workspace, it removes the data in the table (as specified by the <code>where_clause</code> parameter) in the non-root workspaces in the directed acyclic graph. The <code>remove_data</code> option is permitted only if <code>workspace</code> has no child workspaces (that is, it is a leaf workspace).</p>
<p><code>FALSE</code> (the default) does not remove the data in the table in the child workspace.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r7c1-t49" headers="r1c1-t49">
<pre>auto_commit
</pre></td>
<td class="cellalignment5788" headers="r7c1-t49 r1c2-t49">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> (the default) causes the operation to be executed as an autonomous database transaction that will be committed when it finishes.</p>
<p><code>FALSE</code> causes the operation to be executed as part of the caller&#39;s open database transaction (if one exists). If there is no open database transaction, the operation is executed in a new database transaction. In either case, the caller is responsible for committing the transaction. For more information, see <a href="long_intro.htm#i1014370">Section 1.1.8</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref780"></a>Usage Notes</p>
<p>All data that satisfies the <code>where_clause</code> parameter value in the version-enabled table named <code>table_name</code> in <code>workspace</code> is applied to the parent workspace of <code>workspace</code>.</p>
<p>Any locks that are held by rows being merged are released.</p>
<p>If there are conflicts between the workspace being merged and its parent workspace, the merge operation fails and the user must manually resolve conflicts using the &lt;table_name&gt;_CONF view. (Conflict resolution is explained in <a href="long_intro.htm#i1004610">Section 1.1.4</a>.)</p>
<p>A table cannot be merged in the <code>LIVE</code> workspace (because that workspace has no parent workspace).</p>
<p>An exception is raised if one or more of the following apply:</p>
<ul>
<li>
<p>The user does not have access to <code>table_id</code>.</p>
</li>
<li>
<p>The user does not have the <code>MERGE_WORKSPACE</code> privilege for <code>workspace</code> or the <code>MERGE_ANY_WORKSPACE</code> privilege.</p>
</li>
<li>
<p><code>remove_data</code> is <code>TRUE</code> and there are any child workspaces of any workspace to be removed.</p>
</li>
<li>
<p><code>auto_commit</code> is <code>TRUE</code> and an open transaction exists in a parent or child workspace of any table that needs to be modified.</p>
</li>
<li>
<p>The merge involving a multiparent workspace would cause the violation of a referential integrity constraint or unique constraint in any continually refreshed child workspace of the multiparent root workspace.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref781"></a>Examples</p>
<p>The following example merges changes to the <code>EMP</code> table (in the <code>USER3</code> schema) where <code>last_name = &#39;Smith&#39;</code> in <code>NEWWORKSPACE</code> to its parent workspace.</p>
<pre>EXECUTE DBMS_WM.MergeTable (&#39;NEWWORKSPACE&#39;, &#39;user3.emp&#39;, &#39;last_name = &#39;&#39;Smith&#39;&#39;&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i89452"></a>
<div id="ADWSM99341" class="refsect1">
<h2 class="refsect1"><a id="sthref782"></a><a id="sthref783"></a><a id="sthref784"></a><a id="sthref785"></a>MergeWorkspace</h2>
<p>Applies all changes in a workspace to its parent workspace, and optionally removes the workspace.</p>
<p>For a multiparent workspace (explained in <a href="long_intro.htm#i1018503">Section 1.1.10</a>), applies all changes in the workspace to all other workspaces in the directed acyclic graph, and optionally removes the non-root workspaces in the directed acyclic graph.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref786"></a>Syntax</p>
<pre>DBMS_WM.MergeWorkspace(
   workspace         IN VARCHAR2,
   create_savepoint  IN BOOLEAN DEFAULT FALSE,
   remove_workspace  IN BOOLEAN DEFAULT FALSE,
   auto_commit       IN BOOLEAN DEFAULT TRUE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref787"></a>Parameters</p>
<div id="ADWSM99342" class="tblformal">
<p class="titleintable"><a id="sthref788"></a><a id="sthref789"></a>Table 4-46 MergeWorkspace Procedure Parameters</p>
<table class="cellalignment5786" title="MergeWorkspace Procedure Parameters" summary="MergeWorkspace Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t50">Parameter</th>
<th class="cellalignment5787" id="r1c2-t50">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t50" headers="r1c1-t50">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r2c1-t50 r1c2-t50">
<p>Name of the workspace. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t50" headers="r1c1-t50">
<pre>create_savepoint
</pre></td>
<td class="cellalignment5788" headers="r3c1-t50 r1c2-t50">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> creates an implicit savepoint in the parent workspace before the merge operation. (Implicit and explicit savepoints are described in <a href="long_intro.htm#i1012409">Section 1.1.2</a>.)</p>
<p><code>FALSE</code> (the default) does not create an implicit savepoint in the parent workspace before the merge operation.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t50" headers="r1c1-t50">
<pre>remove_workspace
</pre></td>
<td class="cellalignment5788" headers="r4c1-t50 r1c2-t50">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> removes <code>workspace</code> after the merge operation. For a multiparent workspace, all non-root workspaces in the directed acyclic graph are removed.</p>
<p><code>FALSE</code> (the default) does not remove <code>workspace</code> after the merge operation; the workspace continues to exist.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r5c1-t50" headers="r1c1-t50">
<pre>auto_commit
</pre></td>
<td class="cellalignment5788" headers="r5c1-t50 r1c2-t50">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> (the default) causes the operation to be executed as an autonomous database transaction that will be committed when it finishes.</p>
<p><code>FALSE</code> causes the operation to be executed as part of the caller&#39;s open database transaction (if one exists). If there is no open database transaction, the operation is executed in a new database transaction. In either case, the caller is responsible for committing the transaction. For more information, see <a href="long_intro.htm#i1014370">Section 1.1.8</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref790"></a>Usage Notes</p>
<p>All data in all version-enabled tables in <code>workspace</code> is merged to the parent workspace of <code>workspace</code>, and <code>workspace</code> is removed if <code>remove_workspace</code> is <code>TRUE</code>.</p>
<p>If workspace is a continually refreshed child workspace, an exclusive lock is taken on the parent workspace. This exclusive lock blocks other operations on the parent workspace, such as <a href="#i78730">GotoWorkspace</a>, which would try to take a shared lock.</p>
<p>Only the current row version for any given row is merged into the parent workspace. To retain all intermediate row versions and historical copies in the child workspace, the value of <code>remove_workspace</code> must be <code>FALSE</code> (the default). For more information about how Workspace Manager creates row versions and manages historical copies, see <a href="long_intro.htm#BABGJIEH">Section 1.1.12</a>.</p>
<p>While this procedure is executing, the current workspace is frozen in <code>NO_ACCESS</code> mode and the parent workspace is frozen in <code>READ_ONLY</code> mode, as explained in <a href="long_intro.htm#i1006773">Section 1.1.5</a>.</p>
<p>If there are conflicts between the workspace being merged and its parent workspace, the merge operation fails and the user must manually resolve conflicts using the &lt;table_name&gt;_CONF view. (Conflict resolution is explained in <a href="long_intro.htm#i1004610">Section 1.1.4</a>.)</p>
<p>If the <code>remove_workspace</code> parameter value is <code>TRUE</code>, the workspace to be merged must be a leaf workspace, that is, a workspace with no descendant workspaces. (For an explanation of workspace hierarchy, see <a href="long_intro.htm#i1004554">Section 1.1.1</a>.)</p>
<p>To update rows in the child workspace and merge those changes into the parent workspace in the same transaction, you must specify <code>autocommit=FALSE</code> and ensure that no other session (that is, other than the one performing the update transaction) is in the child workspace.</p>
<p>An exception is raised if one or more of the following apply:</p>
<ul>
<li>
<p>The user does not have the <code>MERGE_WORKSPACE</code> privilege for <code>workspace</code> or the <code>MERGE_ANY_WORKSPACE</code> privilege.</p>
</li>
<li>
<p>The user does not have sufficient privileges on all tables that need to be modified (including, for example, tables modified by triggers).</p>
</li>
<li>
<p><code>auto_commit</code> is <code>TRUE</code> and there is an open database transaction in any workspace under <code>workspace</code> in the workspace hierarchy.</p>
</li>
<li>
<p><code>remove_workspace</code> is <code>TRUE</code> and there are any sessions in any workspaces under <code>workspace</code> in the workspace hierarchy.</p>
</li>
<li>
<p><code>remove_workspace</code> is <code>TRUE</code> and there are any child workspaces of any workspace to be removed.</p>
</li>
<li>
<p><code>auto_commit</code> is <code>TRUE</code> and an open transaction exists in a parent or child workspace of any table that needs to be modified.</p>
</li>
<li>
<p>The merge of a multiparent workspace would cause the violation of a referential integrity constraint or unique constraint in any continually refreshed child workspace of the multiparent root workspace.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref791"></a>Examples</p>
<p>The following example merges changes in <code>NEWWORKSPACE</code> to its parent workspace.</p>
<pre>EXECUTE DBMS_WM.MergeWorkspace (&#39;NEWWORKSPACE&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACBGBFH"></a>
<div id="ADWSM99343" class="refsect1">
<h2 class="refsect1"><a id="sthref792"></a><a id="sthref793"></a>Move_Proc</h2>
<p>Moves the Workspace Manager metadata to a specified tablespace.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref794"></a>Syntax</p>
<pre>DBMS_WM.Move_Proc(
   dest_tablespace  IN VARCHAR2 DEFAULT &#39;SYSAUX&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref795"></a>Parameters</p>
<div id="ADWSM99344" class="tblformal">
<p class="titleintable"><a id="sthref796"></a><a id="sthref797"></a>Table 4-47 Move_Proc Procedure Parameters</p>
<table class="cellalignment5786" title="Move_Proc Procedure Parameters" summary="Move_Proc Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t51">Parameter</th>
<th class="cellalignment5787" id="r1c2-t51">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t51" headers="r1c1-t51">
<pre>dest_tablespace
</pre></td>
<td class="cellalignment5788" headers="r2c1-t51 r1c2-t51">
<p>The table space to which to move the Workspace Manager metadata. The default value is the <code>SYSAUX</code> tablespace.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref798"></a>Usage Notes</p>
<p>The Workspace Manager metadata (views, internal tables, and other objects) is by default stored in the default tablespace of the WMSYS user. You cannot directly control the size of the Workspace Manager metadata, but you can control its placement by using this procedure to move the metadata from its current tablespace to a different tablespace. If you call this procedure without specifying the <code>dest_tablespace</code> parameter, the Workspace manager metadata is moved to the SYSAUX tablespace.</p>
<p>Before you move the metadata, you can use the <a href="#CACJDGBA">GetWMMetadataSpace</a> function to determine the approximate minimum space that you will need to have available in the tablespace into which you are considering moving the Workspace Manager metadata.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref799"></a>Examples</p>
<p>The following example moves the Workspace Manager metadata to the <code>TBLSP_1</code> tablespace.</p>
<pre>EXECUTE DBMS_WM.Move_proc(&#39;TBLSP_1&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACDIIDG"></a>
<div id="ADWSM99484" class="refsect1">
<h2 class="refsect1"><a id="sthref800"></a><a id="sthref801"></a>PurgeTable</h2>
<p>Removes rows (all rows, or as limited by any combination of several parameters) from a version-enabled table, and optionally inserts them into an archive table.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref802"></a>Syntax</p>
<pre>DBMS_WM.PurgeTable(
   table_id       IN VARCHAR2,
   archive_table  IN VARCHAR2 DEFAULT NULL,
   where_clause   IN VARCHAR2 DEFAULT NULL,
   workspace      IN VARCHAR2 DEFAULT &#39;LIVE&#39;,
   savepoint_name IN VARCHAR2 DEFAULT NULL,
   instant        IN TIMESTAMP WITH TIME ZONE DEFAULT NULL,
   purgeAfter     IN BOOLEAN DEFAULT TRUE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref803"></a>Parameters</p>
<div id="ADWSM99485" class="tblformal">
<p class="titleintable"><a id="sthref804"></a><a id="sthref805"></a>Table 4-48 PurgeTable Procedure Parameters</p>
<table class="cellalignment5786" title="PurgeTable Procedure Parameters" summary="PurgeTable Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t52">Parameter</th>
<th class="cellalignment5787" id="r1c2-t52">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t52" headers="r1c1-t52">
<pre>table_id
</pre></td>
<td class="cellalignment5788" headers="r2c1-t52 r1c2-t52">
<p>Name of the table containing the data to be exported. The name is not case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t52" headers="r1c1-t52">
<pre>archive_table
</pre></td>
<td class="cellalignment5788" headers="r3c1-t52 r1c2-t52">
<p>Name of the table into which to insert the purged rows. If this parameter is not specified, purged rows are not archived. If this parameter is specified and if there is an open transaction, the transaction is committed before the table is created, and a new transaction is opened.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t52" headers="r1c1-t52">
<pre>where_clause
</pre></td>
<td class="cellalignment5788" headers="r4c1-t52 r1c2-t52">
<p>The <code>WHERE</code> clause (excluding the <code>WHERE</code> keyword) identifying the rows to be purged. Example: <code>&#39;department_id = 20&#39;</code></p>
<p>Only primary key columns can be specified in the <code>WHERE</code> clause, except in a subquery. The subquery can refer to columns that are not primary keys, but it cannot refer to a version-enabled table.</p>
<p>If the <code>where_clause</code> parameter is not specified, all rows in <code>table_name</code> are purged.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r5c1-t52" headers="r1c1-t52">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r5c1-t52 r1c2-t52">
<p>Name of the workspace from which to purge the data. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r6c1-t52" headers="r1c1-t52">
<pre>savepoint_name
</pre></td>
<td class="cellalignment5788" headers="r6c1-t52 r1c2-t52">
<p>Name of a savepoint: only data in the workspace either after or before (depending on the <code>purgeAfter</code> value) the time the savepoint was created is purged.</p>
<p>You cannot specify both the <code>savepoint_name</code> and <code>instant</code> parameters.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r7c1-t52" headers="r1c1-t52">
<pre>instant
</pre></td>
<td class="cellalignment5788" headers="r7c1-t52 r1c2-t52">
<p>Date/time specification: only data that was in the workspace either after or before (depending on the <code>purgeAfter</code> value) this time is purged.</p>
<p>You cannot specify both the <code>savepoint_name</code> and <code>instant</code> parameters.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r8c1-t52" headers="r1c1-t52">
<pre>purgeAfter
</pre></td>
<td class="cellalignment5788" headers="r8c1-t52 r1c2-t52">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> (the default) causes rows in the workspace <span class="italic">after</span> any specified <code>savepoint_name</code> or <code>instant</code> value to be purged.</p>
<p><code>FALSE</code> causes rows in the workspace <span class="italic">before</span> any specified <code>savepoint_name</code> or <code>instant</code> value to be purged.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref806"></a>Usage Notes</p>
<p>This procedure removes rows from a version-enabled table that is rooted at workspace. If the <code>purgeAfter</code> parameter value is <code>TRUE</code> (the default), applicable <span class="italic">child</span> rows rooted at the specified workspace are removed; if the <code>purgeAfter</code> parameter value is <code>FALSE</code>, applicable <span class="italic">ancestor</span> rows rooted at the specified workspace are removed.</p>
<p>You can use the <code>where_clause</code> parameter and the <code>savepoint_name</code> or <code>instant</code> parameter to limit the rows that are purged. For most uses of the procedure, you will probably want to specify a <code>where_clause</code> value to limit the rows to be purged; otherwise all rows are purged (unless limited by the <code>savepoint_name</code> or <code>instant</code> parameter).</p>
<p>An exclusive lock is obtained on the version-enabled table for the duration of the procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref807"></a>Examples</p>
<p>The following example purges any rows where the <code>ID</code> (primary ley) column value is 20 in the <code>USER2.TEST</code> table of the <code>project</code> workspace and its descendent workspaces. (The <code>EXECUTE</code> statement is actually on a single line.)</p>
<pre>EXECUTE DBMS_WM.PurgeTable(&#39;user2.test&#39;, where_clause=&gt;&#39;id=20&#39;, workspace=&gt;&#39;project&#39;, purgeAfter=&gt;TRUE);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i100181"></a>
<div id="ADWSM99345" class="refsect1">
<h2 class="refsect1"><a id="sthref808"></a><a id="sthref809"></a>RecoverAllMigratingTables</h2>
<p>Attempts to complete the migration process on all tables that were left in an inconsistent state after the Workspace Manager migration procedure failed.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref810"></a>Syntax</p>
<pre>DBMS_WM.RecoverAllMigratingTables(
   ignore_last_error IN BOOLEAN DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref811"></a>Parameters</p>
<div id="ADWSM99346" class="tblformal">
<p class="titleintable"><a id="sthref812"></a><a id="sthref813"></a>Table 4-49 RecoverAllMigratingTables Procedure Parameters</p>
<table class="cellalignment5786" title="RecoverAllMigratingTables Procedure Parameters" summary="RecoverAllMigratingTables Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t53">Parameter</th>
<th class="cellalignment5787" id="r1c2-t53">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t53" headers="r1c1-t53">
<pre>ignore_last_error
</pre></td>
<td class="cellalignment5788" headers="r2c1-t53 r1c2-t53">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> ignores the last error, if any, that occurred during the migration process. Information about the last error is stored in the <a href="long_views.htm#i89006">USER_WM_VT_ERRORS</a> and <a href="long_views.htm#i89005">ALL_WM_VT_ERRORS</a> static data dictionary views, which are described in <a href="long_views.htm#g1008700">Chapter 5</a>. See the Usage Notes for more information.</p>
<p><code>FALSE</code> <code>(</code>the default) does not ignore the last error, if any, that occurred during the migration process.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref814"></a>Usage Notes</p>
<p>If an error occurs while you are upgrading (migrating) to the current Workspace Manager release, one or more version-enabled tables can be left in an inconsistent state. (For information about upgrading to the current release, see <a href="long_migrate.htm#i634929">Section B.1</a>.) If the upgrade procedure fails, you should try to fix the cause of the error (examine the <a href="long_views.htm#i89006">USER_WM_VT_ERRORS</a> or <a href="long_views.htm#i89005">ALL_WM_VT_ERRORS</a> metadata view to see the SQL statement and error message), and then call the <a href="#i100379">RecoverMigratingTable</a> procedure (for a single table) or <a href="#i100181">RecoverAllMigratingTables</a> procedure (for all tables) with the default <code>ignore_last_error</code> parameter value of <code>FALSE</code>, to try to complete the upgrade process.</p>
<p>However, if the call still fails and you cannot fix the cause of the error, and if you are sure that it is safe and appropriate to ignore this error, then you have the option to ignore the error by calling the <a href="#i100379">RecoverMigratingTable</a> or <a href="#i100181">RecoverAllMigratingTables</a> procedure with the <code>ignore_last_error</code> parameter value of <code>TRUE</code>. Note that you are responsible for ensuring that it is safe and appropriate to ignore the error.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref815"></a>Examples</p>
<p>The following example attempts to recover all version-enabled tables that were left in an inconsistent state when the upgrade procedure failed.</p>
<pre>EXECUTE DBMS_WM.RecoverAllMigratingTables;
</pre>
<p>The following example attempts to recover all version-enabled tables that were left in an inconsistent state when the upgrade procedure failed, and it ignores the last error that caused the upgrade procedure to fail.</p>
<pre>EXECUTE DBMS_WM.RecoverAllMigratingTables(TRUE);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACEHCBC"></a>
<div id="ADWSM99347" class="refsect1">
<h2 class="refsect1"><a id="sthref816"></a><a id="sthref817"></a>RecoverFromDroppedUser</h2>
<p>Performs necessary operations after the dropping of one or more database users that owned one or more version-enabled tables.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref818"></a>Syntax</p>
<pre>DBMS_WM.RecoverFromDroppedUser(
   ignore_last_error IN BOOLEAN DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref819"></a>Parameters</p>
<div id="ADWSM99348" class="tblformal">
<p class="titleintable"><a id="sthref820"></a><a id="sthref821"></a>Table 4-50 RecoverFromDroppedUser Procedure Parameters</p>
<table class="cellalignment5786" title="RecoverFromDroppedUser Procedure Parameters" summary="RecoverAllMigratingTables Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t54">Parameter</th>
<th class="cellalignment5787" id="r1c2-t54">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t54" headers="r1c1-t54">
<pre>ignore_last_error
</pre></td>
<td class="cellalignment5788" headers="r2c1-t54 r1c2-t54">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> ignores the last error, if any, that occurred during the previous call to the RecoverFromDroppedUser procedure. Information about the last error is stored in the <a href="long_views.htm#i89006">USER_WM_VT_ERRORS</a> and <a href="long_views.htm#i89005">ALL_WM_VT_ERRORS</a> static data dictionary views, which are described in <a href="long_views.htm#g1008700">Chapter 5</a>. See the Usage Notes for more information.</p>
<p><code>FALSE</code> <code>(</code>the default) does not ignore the last error, if any, that occurred during the previous call to the RecoverFromDroppedUser procedure.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref822"></a>Usage Notes</p>
<p>If a database user with one or more version-enabled tables is dropped, you must execute this procedure as soon as possible. This procedure removes any foreign key constraints in existing tables that depended on any of the version-enabled tables that were dropped as a result of dropping the user that owned these tables. This procedure also fixes any invalid database metadata.</p>
<p>If a call to the RecoverFromDroppedUser procedure fails, the table is left in an inconsistent state. If this occurs, you should try to fix the cause of the error (examine the <a href="long_views.htm#BABCGBFG">DBA_WM_VT_ERRORS</a> metadata view to see the SQL statement and error message), and then call the RecoverFromDroppedUser procedure again with the default <code>ignore_last_error</code> parameter value of <code>FALSE</code>. However, if the call still fails and you cannot fix the cause of the error, and if you are sure that it is safe and appropriate to ignore this error, then you have the option to ignore the error by calling the RecoverFromDroppedUser procedure with the <code>ignore_last_error</code> parameter value of <code>TRUE</code>. Note that you are responsible for ensuring that it is safe and appropriate to ignore the error.</p>
<p>To execute this procedure, you must connect to the database instance as a user with SYSDBA privileges.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref823"></a>Examples</p>
<p>The following drops a user named <code>HERMAN</code> that owns one or more version-enabled tables, and then performs the necessary operations after the drop operation.</p>
<pre>DROP USER herman CASCADE;
EXECUTE DBMS_WM.RecoverFromDroppedUser;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i100379"></a>
<div id="ADWSM99349" class="refsect1">
<h2 class="refsect1"><a id="sthref824"></a><a id="sthref825"></a>RecoverMigratingTable</h2>
<p>Attempts to complete the migration process on a table that was left in an inconsistent state after the Workspace Manager migration procedure failed.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref826"></a>Syntax</p>
<pre>DBMS_WM.RecoverMigratingTable(
   table_name        IN VARCHAR2,
   ignore_last_error IN BOOLEAN DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref827"></a>Parameters</p>
<div id="ADWSM99350" class="tblformal">
<p class="titleintable"><a id="sthref828"></a><a id="sthref829"></a>Table 4-51 RecoverMigratingTable Procedure Parameters</p>
<table class="cellalignment5786" title="RecoverMigratingTable Procedure Parameters" summary="RecoverMigratingTable Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t55">Parameter</th>
<th class="cellalignment5787" id="r1c2-t55">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t55" headers="r1c1-t55">
<pre>table_name
</pre></td>
<td class="cellalignment5788" headers="r2c1-t55 r1c2-t55">
<p>Name of the version-enabled table to be recovered from the migration error. The name is not case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t55" headers="r1c1-t55">
<pre>ignore_last_error
</pre></td>
<td class="cellalignment5788" headers="r3c1-t55 r1c2-t55">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> ignores the last error, if any, that occurred during the migration process. Information about the last error is stored in the <a href="long_views.htm#i89006">USER_WM_VT_ERRORS</a> and <a href="long_views.htm#i89005">ALL_WM_VT_ERRORS</a> static data dictionary views, which are described in <a href="long_views.htm#g1008700">Chapter 5</a>. See the Usage Notes for more information.</p>
<p><code>FALSE</code> <code>(</code>the default) does not ignore the last error, if any, that occurred during the migration process.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref830"></a>Usage Notes</p>
<p>If an error occurs while you are upgrading to the current Workspace Manager release, one or more version-enabled tables can be left in an inconsistent state. (For information about upgrading to the current release, see <a href="long_migrate.htm#i634929">Section B.1</a>.) If the upgrade procedure fails, you should try to fix the cause of the error (examine the <a href="long_views.htm#i89006">USER_WM_VT_ERRORS</a> or <a href="long_views.htm#i89005">ALL_WM_VT_ERRORS</a> metadata view to see the SQL statement and error message), and then call the <a href="#i100379">RecoverMigratingTable</a> procedure (for a single table) or <a href="#i100181">RecoverAllMigratingTables</a> procedure (for all tables) with the default <code>ignore_last_error</code> parameter value of <code>FALSE</code>, to try to complete the upgrade process.</p>
<p>However, if the call still fails and you cannot fix the cause of the error, and if you are sure that it is safe and appropriate to ignore this error, then you have the option to ignore the error by calling the <a href="#i100379">RecoverMigratingTable</a> or <a href="#i100181">RecoverAllMigratingTables</a> procedure with the <code>ignore_last_error</code> parameter value of <code>TRUE</code>. Note that you are responsible for ensuring that it is safe and appropriate to ignore the error.</p>
<p>An exception is raised if <code>table_name</code> does not exist or is not version-enabled.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref831"></a>Examples</p>
<p>The following example attempts to recover the <code>COLA_MARKETING_BUDGET</code> table from the error that caused the upgrade procedure to fail.</p>
<pre>EXECUTE DBMS_WM.RecoverMigratingTable(&#39;COLA_MARKETING_BUDGET&#39;);
</pre>
<p>The following example attempts to recover the <code>COLA_MARKETING_BUDGET</code> table and ignores the last error that caused the upgrade procedure to fail.</p>
<pre>EXECUTE DBMS_WM.RecoverMigratingTable(&#39;COLA_MARKETING_BUDGET&#39;, TRUE);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i91234"></a>
<div id="ADWSM99351" class="refsect1">
<h2 class="refsect1"><a id="sthref832"></a><a id="sthref833"></a><a id="sthref834"></a><a id="sthref835"></a>RefreshTable</h2>
<p>Applies to a workspace all changes made to a table (all rows or as specified in the <code>WHERE</code> clause) in its parent workspace.</p>
<p>For a multiparent workspace (explained in <a href="long_intro.htm#i1018503">Section 1.1.10</a>), applies changes from the non-leaf workspaces in the directed acyclic graph to the specified leaf workspace for a specified table. (The table data in the intermediate workspaces is not changed.)</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref836"></a>Syntax</p>
<pre>DBMS_WM.RefreshTable(
   workspace     IN VARCHAR2,
   table_id      IN VARCHAR2,
   where_clause  IN VARCHAR2 DEFAULT &#39;&#39;,
   auto_commit   IN BOOLEAN DEFAULT TRUE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref837"></a>Parameters</p>
<div id="ADWSM99352" class="tblformal">
<p class="titleintable"><a id="sthref838"></a><a id="sthref839"></a>Table 4-52 RefreshTable Procedure Parameters</p>
<table class="cellalignment5786" title="RefreshTable Procedure Parameters" summary="RefreshTable Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t56">Parameter</th>
<th class="cellalignment5787" id="r1c2-t56">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t56" headers="r1c1-t56">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r2c1-t56 r1c2-t56">
<p>Name of the workspace. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t56" headers="r1c1-t56">
<pre>table_id
</pre></td>
<td class="cellalignment5788" headers="r3c1-t56 r1c2-t56">
<p>Name of the table containing the rows to be refreshed using values from the parent workspace. The name is not case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t56" headers="r1c1-t56">
<pre>where_clause
</pre></td>
<td class="cellalignment5788" headers="r4c1-t56 r1c2-t56">
<p>The <code>WHERE</code> clause (excluding the <code>WHERE</code> keyword) identifying the rows to be refreshed from the parent workspace. Example: <code>&#39;department_id = 20&#39;</code></p>
<p>Only primary key columns can be specified in the <code>WHERE</code> clause, except in a subquery. The subquery can refer to columns that are not primary keys, but it cannot refer to a version-enabled table.</p>
<p>If <code>the where_clause parameter</code> is not specified, all rows in <code>table_name</code> are refreshed.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r5c1-t56" headers="r1c1-t56">
<pre>auto_commit
</pre></td>
<td class="cellalignment5788" headers="r5c1-t56 r1c2-t56">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> (the default) causes the operation to be executed as an autonomous database transaction that will be committed when it finishes.</p>
<p><code>FALSE</code> causes the operation to be executed as part of the caller&#39;s open database transaction (if one exists). If there is no open database transaction, the operation is executed in a new database transaction. In either case, the caller is responsible for committing the transaction. For more information, see <a href="long_intro.htm#i1014370">Section 1.1.8</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref840"></a>Usage Notes</p>
<p>This procedure applies to <code>workspace</code> all changes in rows that satisfy the <code>where_clause</code> parameter value in the version-enabled table named <code>table_id</code> in the parent workspace since the time when <code>workspace</code> was created or last refreshed.</p>
<p>If there are conflicts between the workspace being refreshed and its parent workspace, the refresh operation fails and the user must manually resolve conflicts using the &lt;table_name&gt;_CONF view. (Conflict resolution is explained in <a href="long_intro.htm#i1004610">Section 1.1.4</a>.)</p>
<p>This procedure is ignored if <code>workspace</code> is a continually refreshed workspace.</p>
<p>A table cannot be refreshed in the <code>LIVE</code> workspace (because that workspace has no parent workspace).</p>
<p>An exception is raised if the user does not have access to <code>table_id</code>, if the user does not have the <code>MERGE_WORKSPACE</code> privilege for <code>workspace</code> or the <code>MERGE_ANY_WORKSPACE</code> privilege, or if <code>auto_commit</code> is <code>TRUE</code> and an open transaction exists in a parent or child workspace of any table that needs to be modified.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref841"></a>Examples</p>
<p>The following example refreshes <code>NEWWORKSPACE</code> by applying changes made to the <code>EMPLOYEES</code> table where <code>last_name = &#39;Smith&#39;</code> in its parent workspace.</p>
<pre>EXECUTE DBMS_WM.RefreshTable (&#39;NEWWORKSPACE&#39;, &#39;employees&#39;, &#39;last_name = &#39;&#39;Smith&#39;&#39;&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i83811"></a>
<div id="ADWSM99353" class="refsect1">
<h2 class="refsect1"><a id="sthref842"></a><a id="sthref843"></a><a id="sthref844"></a><a id="sthref845"></a>RefreshWorkspace</h2>
<p>Applies to a workspace all changes made in its parent workspace.</p>
<p>For a multiparent workspace (explained in <a href="long_intro.htm#i1018503">Section 1.1.10</a>), applies changes from the non-leaf workspaces in the directed acyclic graph to the specified leaf workspace. The changes are propagated beginning with the multiparent root workspace and continuing with the intermediate workspaces.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref846"></a>Syntax</p>
<pre>DBMS_WM.RefreshWorkspace(
   workspace    IN VARCHAR2,
   auto_commit  IN BOOLEAN DEFAULT TRUE,
   copy_data    IN BOOLEAN DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref847"></a>Parameters</p>
<div id="ADWSM99354" class="tblformal">
<p class="titleintable"><a id="sthref848"></a><a id="sthref849"></a>Table 4-53 RefreshWorkspace Procedure Parameters</p>
<table class="cellalignment5786" title="RefreshWorkspace Procedure Parameters" summary="RefreshWorkspace Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t57">Parameter</th>
<th class="cellalignment5787" id="r1c2-t57">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t57" headers="r1c1-t57">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r2c1-t57 r1c2-t57">
<p>Name of the workspace. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t57" headers="r1c1-t57">
<pre>auto_commit
</pre></td>
<td class="cellalignment5788" headers="r3c1-t57 r1c2-t57">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> (the default) causes the operation to be executed as an autonomous database transaction that will be committed when it finishes.</p>
<p><code>FALSE</code> causes the operation to be executed as part of the caller&#39;s open database transaction (if one exists). If there is no open database transaction, the operation is executed in a new database transaction. In either case, the caller is responsible for committing the transaction. For more information, see <a href="long_intro.htm#i1014370">Section 1.1.8</a>.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t57" headers="r1c1-t57">
<pre>copy_data
</pre></td>
<td class="cellalignment5788" headers="r4c1-t57 r1c2-t57">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> causes all changes in the parent workspace since the creation or last refresh of the child workspace to be copied to the child workspace. No changes occur in any descendent of the child workspace, and the history of changes to the child workspace is preserved.</p>
<p><code>FALSE</code> (the default) causes minimal data to be copied to the child workspace. The parent version of the child workspace is updated in order for the child workspace and its descendents to have access to the modified rows from the parent workspace. No history of changes to the child workspace is recorded for the operation.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref850"></a>Usage Notes</p>
<p>This procedure applies to <code>workspace</code> all changes made to version-enabled tables in the parent workspace since the time when <code>workspace</code> was created or last refreshed.</p>
<p>If there are conflicts between the workspace being refreshed and its parent workspace, the refresh operation fails and the user must manually resolve conflicts using the &lt;table_name&gt;_CONF view. (Conflict resolution is explained in <a href="long_intro.htm#i1004610">Section 1.1.4</a>.)</p>
<p>The specified workspace and the parent workspace are frozen in <code>READ_ONLY</code> mode, as explained in <a href="long_intro.htm#i1006773">Section 1.1.5</a>.</p>
<p>The <code>LIVE</code> workspace cannot be refreshed (because it has no parent workspace).</p>
<p>This procedure is ignored if <code>workspace</code> is a continually refreshed workspace.</p>
<p>An exception is raised if the user does not have the <code>MERGE_WORKSPACE</code> privilege for <code>workspace</code> or the <code>MERGE_ANY_WORKSPACE</code> privilege, if the user does not have sufficient privileges on all tables that need to be modified (including, for example, tables modified by triggers), or if <code>auto_commit</code> is <code>TRUE</code> and an open transaction exists in a parent or child workspace of any table that needs to be modified.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref851"></a>Examples</p>
<p>The following example refreshes <code>NEWWORKSPACE</code> by applying changes made in its parent workspace.</p>
<pre>EXECUTE DBMS_WM.RefreshWorkspace (&#39;NEWWORKSPACE&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i99822"></a>
<div id="ADWSM99355" class="refsect1">
<h2 class="refsect1"><a id="sthref852"></a><a id="sthref853"></a><a id="sthref854"></a>RelocateWriterSite</h2>
<p>Makes one of the nonwriter sites the new writer site in a Workspace Manager replication environment. (The old writer site becomes one of the nonwriter sites.)</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref855"></a>Syntax</p>
<pre>DBMS_WM.RelocateWriterSite(
   newwritersite           IN VARCHAR2,
   oldwritersiteavailable  IN BOOLEAN);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref856"></a>Parameters</p>
<div id="ADWSM99356" class="tblformal">
<p class="titleintable"><a id="sthref857"></a><a id="sthref858"></a>Table 4-54 RelocateWriterSite Procedure Parameters</p>
<table class="cellalignment5786" title="RelocateWriterSite Procedure Parameters" summary="RelocateWriterSite Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t58">Parameter</th>
<th class="cellalignment5787" id="r1c2-t58">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t58" headers="r1c1-t58">
<pre>newwritersite
</pre></td>
<td class="cellalignment5788" headers="r2c1-t58 r1c2-t58">
<p>Name of a current nonwriter site (database link) to be made the new writer site in the Workspace Manager replication environment.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t58" headers="r1c1-t58">
<pre>oldwritersiteavailable
</pre></td>
<td class="cellalignment5788" headers="r3c1-t58 r1c2-t58">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> causes the old writer site to be updated to reflect the fact that the writer site has changed.</p>
<p><code>FALSE</code> causes the old writer site not to be updated to reflect the fact that the writer site has changed. In this case, you must use the <a href="#i99848">SynchronizeSite</a> procedure when the old writer site becomes available.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref859"></a>Usage Notes</p>
<p>To use this procedure, you must understand how replication applies to Workspace Manager objects, as explained in <a href="long_repl.htm#g635775">Appendix C</a>. You must also understand the major Oracle replication concepts and techniques, which are documented in <a class="olink REPLN" href="../REPLN/toc.htm"><span class="italic">Oracle Database Advanced Replication</span></a> and <a class="olink REPMA" href="../REPMA/toc.htm"><span class="italic">Oracle Database Advanced Replication Management API Reference</span></a>.</p>
<p>You must execute this procedure as the replication administrator user. You can execute it at any master site.</p>
<p>You should specify the <code>oldwritersiteavailable</code> parameter as <code>TRUE</code> if the old writer site is currently available. If you specify the <code>oldwritersiteavailable</code> parameter as <code>FALSE</code>, you must execute the <a href="#i99848">SynchronizeSite</a> procedure after the old writer site becomes available, to bring that site up to date.</p>
<p>This procedure performs the following operations:</p>
<ul>
<li>
<p>If <code>oldwritersiteavailable</code> is <code>TRUE</code>, disables workspace operations and DML and DDL operations for all version-enabled tables on the old writer site.</p>
</li>
<li>
<p>Enables workspace operations and DML and DDL operations for all version-enabled tables on the new writer site.</p>
</li>
<li>
<p>Invokes replication API procedures to relocate the master definition site to <code>newwritersite</code> for the main master group and for the master groups for all the version-enabled tables.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref860"></a>Examples</p>
<p>The following example relocates the writer site for the Workspace Manager environment to <code>BACKUP-SITE1</code> at a hypothetical company.</p>
<pre>DBMS_WM.RelocateWriterSite(
    newwritersite           =&gt;  &#39;BACKUP-SITE1.EXAMPLE.COM&#39;),
    oldwritersiteavailable  =&gt;  TRUE);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i109279"></a>
<div id="ADWSM99357" class="refsect1">
<h2 class="refsect1"><a id="sthref861"></a><a id="sthref862"></a>RemoveAsParentWorkspace</h2>
<p>Removes a workspace as a parent workspace in a multiparent workspace environment.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref863"></a>Syntax</p>
<pre>DBMS_WM.RemoveAsParentWorkspace(
   mp_leafworkspace  IN VARCHAR2,
   parent_workspace  IN VARCHAR2,
   auto_commit       IN BOOLEAN DEFAULT TRUE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref864"></a>Parameters</p>
<div id="ADWSM99358" class="tblformal">
<p class="titleintable"><a id="sthref865"></a><a id="sthref866"></a>Table 4-55 RemoveAsParentWorkspace Procedure Parameters</p>
<table class="cellalignment5786" title="RemoveAsParentWorkspace Procedure Parameters" summary="RemoveAsParentWorkspace Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t59">Parameter</th>
<th class="cellalignment5787" id="r1c2-t59">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t59" headers="r1c1-t59">
<pre>mp_leaf_workspace
</pre></td>
<td class="cellalignment5788" headers="r2c1-t59 r1c2-t59">
<p>Name of the child workspace (multiparent leaf workspace) from which to remove <code>parent_workspace</code> as a parent workspace. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t59" headers="r1c1-t59">
<pre>parent_workspace
</pre></td>
<td class="cellalignment5788" headers="r3c1-t59 r1c2-t59">
<p>Name of the workspace to remove as a parent workspace of <code>mp_leaf_workspace</code>. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t59" headers="r1c1-t59">
<pre>auto_commit
</pre></td>
<td class="cellalignment5788" headers="r4c1-t59 r1c2-t59">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> (the default) causes the operation to be executed as an autonomous database transaction that will be committed when it finishes.</p>
<p><code>FALSE</code> causes the operation to be executed as part of the caller&#39;s open database transaction (if one exists). If there is no open database transaction, the operation is executed in a new database transaction. In either case, the caller is responsible for committing the transaction. For more information, see <a href="long_intro.htm#i1014370">Section 1.1.8</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref867"></a>Usage Notes</p>
<p>This procedure is part of the support for the multiparent workspaces feature, which is described in <a href="long_intro.htm#i1018503">Section 1.1.10</a>. This procedure must be used only on a parent workspace that was previously added to the child workspace using the <a href="#g1030204">AddAsParentWorkspace</a> procedure.</p>
<p>This procedure does not remove any workspaces. It only makes <code>parent_workspace</code> no longer a parent workspace of <code>mp_leaf_workspace</code>.</p>
<p>An exception is raised if one or more of the following apply:</p>
<ul>
<li>
<p><code>mp_leaf_workspace</code> or <code>parent_workspace</code> does not exist.</p>
</li>
<li>
<p><code>mp_leaf_workspace</code> has versioned any data in <code>parent_workspace</code> or an ancestor of <code>parent_workspace</code>, and this workspace would no longer be an ancestor of <code>mp_leaf_workspace</code> if the operation were to be performed.</p>
</li>
<li>
<p>There are any sessions with open database transactions in <code>mp_leaf_workspace</code>.</p>
</li>
<li>
<p><code>auto_commit</code> is <code>TRUE</code> and an open transaction exists in a parent or child workspace of any table that needs to be modified.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref868"></a>Examples</p>
<p>The following example removes <code>Workspace4</code> as a parent workspace of <code>Workspace3</code>. (See the hierarchy illustration in <a href="long_intro.htm#i1018386">Figure 1-3</a> in <a href="long_intro.htm#i1018503">Section 1.1.10</a>.)</p>
<pre>EXECUTE DBMS_WM.RemoveAsParentWorkspace (&#39;Workspace3&#39;, &#39;Workspace4&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACBFCBJ"></a>
<div id="ADWSM99359" class="refsect1">
<h2 class="refsect1"><a id="sthref869"></a><a id="sthref870"></a><a id="sthref871"></a>RemoveUserDefinedHint</h2>
<p>Removes a user-defined hint: that is, causes the default optimizer hint to be used with SQL statements executed by the DBMS_WM package on a specified version-enabled table or all version-enabled tables.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref872"></a>Syntax</p>
<pre>DBMS_WM.RemoveUserDefinedHint(
   hint_id   IN NUMBER,
   table_id  IN VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref873"></a>Parameters</p>
<div id="ADWSM99360" class="tblformal">
<p class="titleintable"><a id="sthref874"></a><a id="sthref875"></a>Table 4-56 RemoveUserDefinedHint Procedure Parameters</p>
<table class="cellalignment5786" title="RemoveUserDefinedHint Procedure Parameters" summary="AddAsParentWorkspace Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t60">Parameter</th>
<th class="cellalignment5787" id="r1c2-t60">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t60" headers="r1c1-t60">
<pre>hint_id
</pre></td>
<td class="cellalignment5788" headers="r2c1-t60 r1c2-t60">
<p>Numeric ID that uniquely identifies the user-defined hint. Must match an existing hint ID previously specified in a call to the <a href="#CACECHEH">AddUserDefinedHint</a> procedure.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t60" headers="r1c1-t60">
<pre>table_id
</pre></td>
<td class="cellalignment5788" headers="r3c1-t60 r1c2-t60">
<p>Name of the table from which to remove the hint. The name is not case-sensitive.</p>
<p>If this value is null and if the <code>table_id</code> parameter was null in the call to the <a href="#CACECHEH">AddUserDefinedHint</a> procedure that added the hint, the hint is no longer used with any version-enabled tables for any SQL statements that specify the hint ID.</p>
<p>However, if this value is null and if the <code>table_id</code> parameter was <span class="italic">not</span> null in the call to the <a href="#CACECHEH">AddUserDefinedHint</a> procedure that added the hint, the <code>RemoveUserDefinedHint</code> procedure will not remove any hints that were defined for the originally specified tables.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref876"></a>Usage Notes</p>
<p>Use this procedure only to remove or modify the effect of a user-defined hint that you previously specified using the <a href="#CACECHEH">AddUserDefinedHint</a> procedure. (See the Usage Notes for that procedure.)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref877"></a>Examples</p>
<p>The following example removes, for the SCOTT.TABLE1 table, the user-defined hint from SQL statements associated with the hint with the hint ID 1101, and causes the default hint to be used instead.</p>
<pre>EXECUTE DBMS_WM.RemoveUSerDefinedHint (1101, &#39;scott.table1&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i108854"></a>
<div id="ADWSM99361" class="refsect1">
<h2 class="refsect1"><a id="sthref878"></a><a id="sthref879"></a><a id="sthref880"></a><a id="sthref881"></a>RemoveWorkspace</h2>
<p>Discards all row versions associated with a workspace and deletes the workspace.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref882"></a>Syntax</p>
<pre>DBMS_WM.RemoveWorkspace(
   workspace    IN VARCHAR2,
   auto_commit  IN BOOLEAN DEFAULT TRUE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref883"></a>Parameters</p>
<div id="ADWSM99362" class="tblformal">
<p class="titleintable"><a id="sthref884"></a><a id="sthref885"></a>Table 4-57 RemoveWorkspace Procedure Parameters</p>
<table class="cellalignment5786" title="RemoveWorkspace Procedure Parameters" summary="RemoveWorkspace Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t61">Parameter</th>
<th class="cellalignment5787" id="r1c2-t61">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t61" headers="r1c1-t61">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r2c1-t61 r1c2-t61">
<p>Name of the workspace. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t61" headers="r1c1-t61">
<pre>auto_commit
</pre></td>
<td class="cellalignment5788" headers="r3c1-t61 r1c2-t61">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> (the default) causes the operation to be executed as an autonomous database transaction that will be committed when it finishes.</p>
<p><code>FALSE</code> causes the operation to be executed as part of the caller&#39;s open database transaction (if one exists). If there is no open database transaction, the operation is executed in a new database transaction. In either case, the caller is responsible for committing the transaction. For more information, see <a href="long_intro.htm#i1014370">Section 1.1.8</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref886"></a>Usage Notes</p>
<p>The RemoveWorkspace operation can only be performed on leaf workspaces (the bottom-most workspaces in a branch in the hierarchy). For an explanation of database workspace hierarchy, see <a href="long_intro.htm#i1004554">Section 1.1.1</a>.</p>
<p>If the workspace being removed is a child workspace, its parent workspace is exclusively locked for the duration of the operation.</p>
<p>There must be no other users in the workspace being removed.</p>
<p>An exception is raised if the user does not have the <code>REMOVE_WORKSPACE</code> privilege for <code>workspace</code> or the <code>REMOVE_ANY_WORKSPACE</code> privilege, if the user does not have sufficient privileges on all tables that need to be modified (including, for example, tables modified by triggers), or if <code>auto_commit</code> is <code>TRUE</code> and an open transaction exists in a parent or child workspace of any table that needs to be modified.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref887"></a>Examples</p>
<p>The following example removes the <code>NEWWORKSPACE</code> workspace.</p>
<pre>EXECUTE DBMS_WM.RemoveWorkspace(&#39;NEWWORKSPACE&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i89286"></a>
<div id="ADWSM99363" class="refsect1">
<h2 class="refsect1"><a id="sthref888"></a><a id="sthref889"></a><a id="sthref890"></a><a id="sthref891"></a>RemoveWorkspaceTree</h2>
<p>Discards all row versions associated with a workspace and its descendant workspaces, and deletes the affected workspaces.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref892"></a>Syntax</p>
<pre>DBMS_WM.RemoveWorkspaceTree(
   workspace    IN VARCHAR2,
   auto_commit  IN BOOLEAN DEFAULT TRUE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref893"></a>Parameters</p>
<div id="ADWSM99364" class="tblformal">
<p class="titleintable"><a id="sthref894"></a><a id="sthref895"></a>Table 4-58 RemoveWorkspaceTree Procedure Parameters</p>
<table class="cellalignment5786" title="RemoveWorkspaceTree Procedure Parameters" summary="RemoveWorkspaceTree Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t62">Parameter</th>
<th class="cellalignment5787" id="r1c2-t62">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t62" headers="r1c1-t62">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r2c1-t62 r1c2-t62">
<p>Name of the workspace. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t62" headers="r1c1-t62">
<pre>auto_commit
</pre></td>
<td class="cellalignment5788" headers="r3c1-t62 r1c2-t62">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> (the default) causes the operation to be executed as an autonomous database transaction that will be committed when it finishes.</p>
<p><code>FALSE</code> causes the operation to be executed as part of the caller&#39;s open database transaction (if one exists). If there is no open database transaction, the operation is executed in a new database transaction. In either case, the caller is responsible for committing the transaction. For more information, see <a href="long_intro.htm#i1014370">Section 1.1.8</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref896"></a>Usage Notes</p>
<p>The RemoveWorkspaceTree operation should be used with extreme caution, because it removes support structures and rolls back changes in a workspace and all its descendants down to the leaf workspace or workspaces. For example, in the hierarchy shown in <a href="long_intro.htm#i1013821">Figure 1-1</a> in <a href="long_intro.htm#i1004554">Section 1.1.1</a>, a RemoveWorkspaceTree operation specifying <code>Workspace1</code> removes <code>Workspace1</code>, <code>Workspace2</code>, and <code>Workspace3</code>. (For an explanation of database workspace hierarchy, see <a href="long_intro.htm#i1004554">Section 1.1.1</a>.)</p>
<p>There must be no other users in <code>workspace</code> or any of its descendant workspaces.</p>
<p>An exception is raised if the user does not have the <code>REMOVE_WORKSPACE</code> privilege for <code>workspace</code> or any of its descendant workspaces, if the user does not have sufficient privileges on all tables that need to be modified (including, for example, tables modified by triggers), or if <code>auto_commit</code> is <code>TRUE</code> and an open transaction exists in a parent or child workspace of any table that needs to be modified.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref897"></a>Examples</p>
<p>The following example removes the <code>NEWWORKSPACE</code> workspace and all its descendant workspaces.</p>
<pre>EXECUTE DBMS_WM.RemoveWorkspaceTree(&#39;NEWWORKSPACE&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACCGBIA"></a>
<div id="ADWSM99486" class="refsect1">
<h2 class="refsect1"><a id="sthref898"></a><a id="sthref899"></a><a id="sthref900"></a><a id="sthref901"></a>RenameSavepoint</h2>
<p>Renames a savepoint in a specified workspace.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref902"></a>Syntax</p>
<pre>DBMS_WM.RenameSavepoint(
   workspace_name     IN VARCHAR2,
   savepoint_name     IN VARCHAR2;
   new_savepoint_name IN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref903"></a>Parameters</p>
<div id="ADWSM99487" class="tblformal">
<p class="titleintable"><a id="sthref904"></a><a id="sthref905"></a>Table 4-59 RenameSavepoint Procedure Parameters</p>
<table class="cellalignment5786" title="RenameSavepoint Procedure Parameters" summary="RenameSavepoint Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t63">Parameter</th>
<th class="cellalignment5787" id="r1c2-t63">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t63" headers="r1c1-t63">
<pre>workspace_name
</pre></td>
<td class="cellalignment5788" headers="r2c1-t63 r1c2-t63">
<p>Name of the existing workspace in which the savepoint to be renamed exists. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t63" headers="r1c1-t63">
<pre>savepoint_name
</pre></td>
<td class="cellalignment5788" headers="r3c1-t63 r1c2-t63">
<p>Name of the existing explicit savepoint to be renamed. (Must not be an implicit savepoint.)</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t63" headers="r1c1-t63">
<pre>new_savepoint_name
</pre></td>
<td class="cellalignment5788" headers="r4c1-t63 r1c2-t63">
<p>New name to be given to the savepoint. Must not be the name of an existing savepoint.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref906"></a>Usage Notes</p>
<p>An exception is raised if the user does not own the workspace or savepoint or does not have the <code>WM_ADMIN</code> system privilege.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref907"></a>Examples</p>
<p>The following example renames savepoint <code>SP1</code> in the <code>LIVE</code> workspace to <code>2009 milestone</code>.</p>
<pre>EXECUTE DBMS_WM.RenameSavepoint(&#39;LIVE&#39;, &#39;SP11&#39;, &#39;2009 milestone&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACBFECF"></a>
<div id="ADWSM99488" class="refsect1">
<h2 class="refsect1"><a id="sthref908"></a><a id="sthref909"></a><a id="sthref910"></a><a id="sthref911"></a>RenameWorkspace</h2>
<p>Renames a workspace.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref912"></a>Syntax</p>
<pre>DBMS_WM.RenameWorkspace(
   workspace_name     IN VARCHAR2,
   new_workspace_name IN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref913"></a>Parameters</p>
<div id="ADWSM99489" class="tblformal">
<p class="titleintable"><a id="sthref914"></a><a id="sthref915"></a>Table 4-60 RenameWorkspace Procedure Parameters</p>
<table class="cellalignment5786" title="RenameWorkspace Procedure Parameters" summary="RenameWorkspace Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t64">Parameter</th>
<th class="cellalignment5787" id="r1c2-t64">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t64" headers="r1c1-t64">
<pre>workspace_name
</pre></td>
<td class="cellalignment5788" headers="r2c1-t64 r1c2-t64">
<p>Name of the existing workspace to be renamed. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t64" headers="r1c1-t64">
<pre>new_workspace_name
</pre></td>
<td class="cellalignment5788" headers="r3c1-t64 r1c2-t64">
<p>New name to be given to the workspace. The new name must not be <code>LIVE</code> or the name of an existing workspace, and it must not contain any of the following characters: <code>&#34;</code> (double quotes), <code>&#39;</code> (single quote), <code>`</code> (grave accent), or <code>|</code> (vertical bar).</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref916"></a>Usage Notes</p>
<p>This procedure automatically updates the metadata for existing version-enabled tables to refer to the new workspace name. The time required for the procedure to complete will depend on the number of version-enabled tables.</p>
<p>An exception is raised if the user does not own the workspace or does not have the <code>WM_ADMIN</code> system privilege.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref917"></a>Examples</p>
<p>The following example renames workspace <code>WS1</code> to <code>Construction Project</code>.</p>
<pre>EXECUTE DBMS_WM.RenameWorkspace(&#39;WS1&#39;, &#39;Construction Project&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i83186"></a>
<div id="ADWSM99365" class="refsect1">
<h2 class="refsect1"><a id="sthref918"></a><a id="sthref919"></a><a id="sthref920"></a><a id="sthref921"></a>ResolveConflicts</h2>
<p>Resolves conflicts between workspaces.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref922"></a>Syntax</p>
<pre>DBMS_WM.ResolveConflicts(
   workspace       IN VARCHAR2,
   table_name      IN VARCHAR2,
   where_clause    IN VARCHAR2,
   keep            IN VARCHAR2,
   resolve_base_ne IN BOOLEAN DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref923"></a>Parameters</p>
<div id="ADWSM99366" class="tblformal">
<p class="titleintable"><a id="sthref924"></a><a id="sthref925"></a>Table 4-61 ResolveConflicts Procedure Parameters</p>
<table class="cellalignment5786" title="ResolveConflicts Procedure Parameters" summary="ResolveConflicts Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t65">Parameter</th>
<th class="cellalignment5787" id="r1c2-t65">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t65" headers="r1c1-t65">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r2c1-t65 r1c2-t65">
<p>Name of the workspace to check for conflicts with other workspaces. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t65" headers="r1c1-t65">
<pre>table_name
</pre></td>
<td class="cellalignment5788" headers="r3c1-t65 r1c2-t65">
<p>Name of the table to check for conflicts. The name is not case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t65" headers="r1c1-t65">
<pre>where_clause
</pre></td>
<td class="cellalignment5788" headers="r4c1-t65 r1c2-t65">
<p>The <code>WHERE</code> clause (excluding the <code>WHERE</code> keyword) identifying the rows to be refreshed from the parent workspace. Example: <code>&#39;department_id = 20&#39;</code></p>
<p>Only primary key columns can be specified in the <code>WHERE</code> clause, except in a subquery. The subquery can refer to columns that are not primary keys, but it cannot refer to a version-enabled table.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r5c1-t65" headers="r1c1-t65">
<pre>keep
</pre></td>
<td class="cellalignment5788" headers="r5c1-t65 r1c2-t65">
<p>Workspace in favor of which to resolve conflicts: <code>PARENT</code>, <code>CHILD</code>, or <code>BASE</code>.</p>
<p><code>PARENT</code> causes the parent workspace rows to be copied to the child workspace.</p>
<p><code>CHILD</code> does not cause the child workspace rows to be copied immediately to the parent workspace. However, the conflict is considered resolved, and the child workspace rows are copied to the parent workspace when the child workspace is merged.</p>
<p><code>BASE</code> causes the base rows to be copied to the child workspace but not to the parent workspace. However, the conflict is considered resolved; and when the child workspace is merged, the base rows are copied to the parent workspace. Note that <code>BASE</code> is ignored for insert-insert conflicts where a base row does not exist; in this case, the <code>keep</code> parameter value must be <code>PARENT</code> or <code>CHILD</code>.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r6c1-t65" headers="r1c1-t65">
<pre>resolve_bnase_ne
</pre></td>
<td class="cellalignment5788" headers="r6c1-t65 r1c2-t65">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>). Applies only if the value of <code>keep</code> is <code>BASE</code>.</p>
<p><code>TRUE</code> allows the resolution of conflicts in favor of the base row, even when the base row was nonexistent, as is the case in an insert-insert conflict.</p>
<p><code>FALSE</code> (the default) disallows the resolution of conflicts in favor of nonexistent base rows. If a nonexistent base row is encountered while other conflicts are being resolved, the conflict is effectively ignored and will not be considered resolved.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref926"></a>Usage Notes</p>
<p>This procedure checks the condition identified by the <code>table_name</code> and <code>where_clause</code> parameters, and it finds any conflicts between row values in <code>workspace</code> and its parent workspace. This procedure resolves conflicts by using the row values in the parent or child workspace, as specified in the <code>keep</code> parameter; however, the conflict resolution is not actually merged until you commit the transaction (standard database commit operation) and call the <a href="#i90948">CommitResolve</a> procedure to end the conflict resolution session. (For more information about conflict resolution, including an overall view of the process, see <a href="long_intro.htm#i1004610">Section 1.1.4</a>.)</p>
<p>For example, assume that for Department 20 (<code>DEPARTMENT_ID = 20</code>), the <code>MANAGER_NAME</code> in the <code>LIVE</code> and <code>Workspace1</code> workspaces is <code>Tom</code>. Then, the following operations occur:</p>
<ol>
<li>
<p>The <code>manager_name</code> for Department 20 is changed in the <code>LIVE</code> database workspace from <code>Tom</code> to <code>Mary</code>.</p>
</li>
<li>
<p>The change is committed (a standard database commit operation).</p>
</li>
<li>
<p>The <code>manager_name</code> for Department 20 is changed in <code>Workspace1</code> from <code>Tom</code> to <code>Franco</code>.</p>
</li>
<li>
<p>The <a href="#i89452">MergeWorkspace</a> procedure is called to merge <code>Workspace1</code> changes to the <code>LIVE</code> workspace.</p>
<p>At this point, however, a conflict exists with respect to <code>MANAGER_NAME</code> for Department 20 in <code>Workspace1</code> (<code>Franco</code>, which conflicts with <code>Mary</code> in the <code>LIVE</code> workspace), and therefore the call to <a href="#i89452">MergeWorkspace</a> does not succeed.</p>
</li>
<li>
<p>The ResolveConflicts procedure is called with the following parameters: (<code>&#39;Workspace1&#39;</code>, <code>&#39;department&#39;</code>, <code>&#39;department_id = 20&#39;</code>, <code>&#39;child&#39;</code>).</p>
<p>After the <a href="#i89452">MergeWorkspace</a> operation in step 7, the <code>MANAGER_NAME</code> value will be <code>Franco</code> in both the <code>Workspace1</code> and <code>LIVE</code> workspaces.</p>
</li>
<li>
<p>The change is committed (a standard database commit operation).</p>
</li>
<li>
<p>The <a href="#i89452">MergeWorkspace</a> procedure is called to merge <code>Workspace1</code> changes to the <code>LIVE</code> workspace.</p>
</li>
</ol>
<p>The following considerations apply during a conflict resolution session:</p>
<ul>
<li>
<p>A ResolveConflicts operation prevents other workspace operations (such as a merge, refresh, or removal) on the target workspace or table until after the <a href="#i90948">CommitResolve</a> or <a href="#i87840">RollbackResolve</a> procedure is executed.</p>
</li>
<li>
<p>Multiple sessions can perform ResolveConflicts operations and perform insert, update, and delete operations on the same table. However, during such operations, the target rows are locked. If more than one session attempts to perform an insert, update, or delete operation on the same row or to resolve a conflict affecting the same row, the first session is allowed to continue; and after that session executes the <a href="#i90948">CommitResolve</a> or <a href="#i87840">RollbackResolve</a> procedure, another session is allowed to proceed.</p>
</li>
</ul>
<p>For more information about conflict resolution, see <a href="long_intro.htm#i1004610">Section 1.1.4</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref927"></a>Examples</p>
<p>The following example resolves conflicts involving rows in the <code>DEPARTMENT</code> table in <code>Workspace1</code> where <code>DEPARTMENT_ID</code> is 20, and uses the values in the child workspace to resolve all such conflicts. It then merges the results of the conflict resolution by first committing the transaction (standard commit) and then calling the <a href="#i89452">MergeWorkspace</a> procedure.</p>
<pre>EXECUTE DBMS_WM.BeginResolve (&#39;Workspace1&#39;);
EXECUTE  DBMS_WM.ResolveConflicts (&#39;Workspace1&#39;, &#39;department&#39;, &#39;department_id = 20&#39;, &#39;child&#39;);
COMMIT;
EXECUTE DBMS_WM.CommitResolve (&#39;Workspace1&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACFCFGI"></a>
<div id="ADWSM99367" class="refsect1">
<h2 class="refsect1"><a id="sthref928"></a><a id="sthref929"></a><a id="sthref930"></a><a id="sthref931"></a>RevokeGraphPriv</h2>
<p>Revokes (removes) privileges on multiparent graph workspaces from users and roles for a specified leaf workspace.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref932"></a>Syntax</p>
<pre>DBMS_WM.RevokeGraphPriv(
   priv_types      IN VARCHAR2,
   leaf_workspace  IN VARCHAR2,
   grantee         IN VARCHAR2.
   node_types      IN VARCHAR2 DEFAULT &#39;(&#39;&#39;R&#39;&#39;,&#39;&#39;I&#39;&#39;,&#39;&#39;L&#39;&#39;)&#39;,
   auto_commit     IN BOOLEAN DEFAULT TRUE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref933"></a>Parameters</p>
<div id="ADWSM99368" class="tblformal">
<p class="titleintable"><a id="sthref934"></a><a id="sthref935"></a>Table 4-62 RevokeGraphPriv Procedure Parameters</p>
<table class="cellalignment5786" title="RevokeGraphPriv Procedure Parameters" summary="RevokeGraphPriv Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t66">Parameter</th>
<th class="cellalignment5787" id="r1c2-t66">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t66" headers="r1c1-t66">
<pre>priv_types
</pre></td>
<td class="cellalignment5788" headers="r2c1-t66 r1c2-t66">
<p>A string of one or more keywords representing privileges. (<a href="long_intro.htm#i1017165">Section 1.4</a> discusses Workspace Manager privileges.) Use commas to separate privilege keywords. The available keywords are <code>ACCESS_WORKSPACE</code>, <code>MERGE_WORKSPACE</code>, <code>CREATE_WORKSPACE</code>, <code>REMOVE_WORKSPACE</code>, and <code>ROLLBACK_WORKSPACE</code>.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t66" headers="r1c1-t66">
<pre>leaf_workspace
</pre></td>
<td class="cellalignment5788" headers="r3c1-t66 r1c2-t66">
<p>Name of the leaf workspace in the directed acyclic graph. (Leaf workspaces, directed acyclic graphs, and other concepts related to multiparent workspaces are explained in <a href="long_intro.htm#i1018503">Section 1.1.10</a>.) The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t66" headers="r1c1-t66">
<pre>grantee
</pre></td>
<td class="cellalignment5788" headers="r4c1-t66 r1c2-t66">
<p>Name of the user (can be the <code>PUBLIC</code> user group) or role from which to revoke <code>priv_types</code>.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r5c1-t66" headers="r1c1-t66">
<pre>node_types
</pre></td>
<td class="cellalignment5788" headers="r5c1-t66 r1c2-t66">
<p>List of letters (in parentheses and comma-delimited) representing the types of nodes on which to revoke the privileges: <code>R</code> for the root of the graph, <code>I</code> for the specified intermediate node, <code>L</code> for the leaf of the graph. The default is all types of nodes.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r6c1-t66" headers="r1c1-t66">
<pre>auto_commit
</pre></td>
<td class="cellalignment5788" headers="r6c1-t66 r1c2-t66">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> (the default) causes the operation to be executed as an autonomous database transaction that will be committed when it finishes.</p>
<p><code>FALSE</code> causes the operation to be executed as part of the caller&#39;s open database transaction (if one exists). If there is no open database transaction, the operation is executed in a new database transaction. In either case, the caller is responsible for committing the transaction. For more information, see <a href="long_intro.htm#i1014370">Section 1.1.8</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref936"></a>Usage Notes</p>
<p>Contrast this procedure with <a href="#i79283">RevokeWorkspacePriv</a>, which grants workspace-level Workspace Manager privileges on workspaces other than multiparent graph workspaces.</p>
<p>To grant workspace-level privileges on multiparent graph workspaces, use the <a href="#CACHFHEJ">GrantGraphPriv</a> procedure.</p>
<p>An exception is raised if one or more of the following apply:</p>
<ul>
<li>
<p><code>grantee</code> is not a valid user or role in the database.</p>
</li>
<li>
<p>You were not the grantor of <code>priv_types</code> to <code>grantee</code>.</p>
</li>
<li>
<p><code>auto_commit</code> is <code>TRUE</code> and an open transaction exists in a parent or child workspace of any table that needs to be modified.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref937"></a>Examples</p>
<p>The following example disallows user <code>Smith</code> from accessing all types of nodes in the directed acyclic graph in which the <code>NEWWORKSPACE</code> workspace is the leaf workspace and from merging changes in these workspaces.</p>
<pre>EXECUTE DBMS_WM.RevokeWorkspacePriv (&#39;ACCESS_WORKSPACE, MERGE_WORKSPACE&#39;, &#39;NEWWORKSPACE&#39;, &#39;Smith&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i97252"></a>
<div id="ADWSM99369" class="refsect1">
<h2 class="refsect1"><a id="sthref938"></a><a id="sthref939"></a><a id="sthref940"></a><a id="sthref941"></a>RevokeSystemPriv</h2>
<p>Revokes (removes) system-level privileges from users and roles.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref942"></a>Syntax</p>
<pre>DBMS_WM.RevokeSystemPriv(
   priv_types   IN VARCHAR2,
   grantee      IN VARCHAR2,
   auto_commit  IN BOOLEAN DEFAULT TRUE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref943"></a>Parameters</p>
<div id="ADWSM99370" class="tblformal">
<p class="titleintable"><a id="sthref944"></a><a id="sthref945"></a>Table 4-63 RevokeSystemPriv Procedure Parameters</p>
<table class="cellalignment5786" title="RevokeSystemPriv Procedure Parameters" summary="RevokeSystemPriv Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t67">Parameter</th>
<th class="cellalignment5787" id="r1c2-t67">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t67" headers="r1c1-t67">
<pre>priv_types
</pre></td>
<td class="cellalignment5788" headers="r2c1-t67 r1c2-t67">
<p>A string of one or more keywords representing privileges. (<a href="long_intro.htm#i1017165">Section 1.4</a> discusses Workspace Manager privileges.) Use commas to separate privilege keywords. The available keywords are <code>ACCESS_ANY_WORKSPACE</code>, <code>MERGE_ANY_WORKSPACE</code>, <code>CREATE_ANY_WORKSPACE</code>, <code>REMOVE_ANY_WORKSPACE</code>, and <code>ROLLBACK_ANY_WORKSPACE</code>.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t67" headers="r1c1-t67">
<pre>grantee
</pre></td>
<td class="cellalignment5788" headers="r3c1-t67 r1c2-t67">
<p>Name of the user (can be the <code>PUBLIC</code> user group) or role from which to revoke <code>priv_types</code>.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t67" headers="r1c1-t67">
<pre>auto_commit
</pre></td>
<td class="cellalignment5788" headers="r4c1-t67 r1c2-t67">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> (the default) causes the operation to be executed as an autonomous database transaction that will be committed when it finishes.</p>
<p><code>FALSE</code> causes the operation to be executed as part of the caller&#39;s open database transaction (if one exists). If there is no open database transaction, the operation is executed in a new database transaction. In either case, the caller is responsible for committing the transaction. For more information, see <a href="long_intro.htm#i1014370">Section 1.1.8</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref946"></a>Usage Notes</p>
<p>Contrast this procedure with <a href="#i79283">RevokeWorkspacePriv</a>, which revokes workspace-level Workspace Manager privileges with keywords in the form <span class="italic">xxx</span>_WORKSPACE (<code>ACCESS_WORKSPACE</code>, <code>MERGE_WORKSPACE</code>, and so on).</p>
<p>To grant system-level privileges, use the <a href="#i80865">GrantSystemPriv</a> procedure.</p>
<p>An exception is raised if one or more of the following apply:</p>
<ul>
<li>
<p><code>grantee</code> is not a valid user or role in the database.</p>
</li>
<li>
<p>You were not the grantor of <code>priv_types</code> to <code>grantee</code>.</p>
</li>
<li>
<p><code>auto_commit</code> is <code>TRUE</code> and an open transaction exists in a parent or child workspace of any table that needs to be modified.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref947"></a>Examples</p>
<p>The following example disallows user <code>Smith</code> from accessing workspaces and merging changes in workspaces.</p>
<pre>EXECUTE DBMS_WM.RevokeSystemPriv (&#39;ACCESS_ANY_WORKSPACE, MERGE_ANY_WORKSPACE&#39;, &#39;Smith&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79283"></a>
<div id="ADWSM99371" class="refsect1">
<h2 class="refsect1"><a id="sthref948"></a><a id="sthref949"></a><a id="sthref950"></a><a id="sthref951"></a>RevokeWorkspacePriv</h2>
<p>Revokes (removes) workspace-level privileges from users and roles for a specified workspace.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref952"></a>Syntax</p>
<pre>DBMS_WM.RevokeWorkspacePriv(
   priv_types   IN VARCHAR2,
   workspace    IN VARCHAR2,
   grantee      IN VARCHAR2.
   auto_commit  IN BOOLEAN DEFAULT TRUE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref953"></a>Parameters</p>
<div id="ADWSM99372" class="tblformal">
<p class="titleintable"><a id="sthref954"></a><a id="sthref955"></a>Table 4-64 RevokeWorkspacePriv Procedure Parameters</p>
<table class="cellalignment5786" title="RevokeWorkspacePriv Procedure Parameters" summary="RevokeWorkspacePriv Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t68">Parameter</th>
<th class="cellalignment5787" id="r1c2-t68">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t68" headers="r1c1-t68">
<pre>priv_types
</pre></td>
<td class="cellalignment5788" headers="r2c1-t68 r1c2-t68">
<p>A string of one or more keywords representing privileges. (<a href="long_intro.htm#i1017165">Section 1.4</a> discusses Workspace Manager privileges.) Use commas to separate privilege keywords. The available keywords are <code>ACCESS_WORKSPACE</code>, <code>MERGE_WORKSPACE</code>, <code>CREATE_WORKSPACE</code>, <code>REMOVE_WORKSPACE</code>, and <code>ROLLBACK_WORKSPACE</code>.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t68" headers="r1c1-t68">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r3c1-t68 r1c2-t68">
<p>Name of the workspace. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t68" headers="r1c1-t68">
<pre>grantee
</pre></td>
<td class="cellalignment5788" headers="r4c1-t68 r1c2-t68">
<p>Name of the user (can be the <code>PUBLIC</code> user group) or role from which to revoke <code>priv_types</code>.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r5c1-t68" headers="r1c1-t68">
<pre>auto_commit
</pre></td>
<td class="cellalignment5788" headers="r5c1-t68 r1c2-t68">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> (the default) causes the operation to be executed as an autonomous database transaction that will be committed when it finishes.</p>
<p><code>FALSE</code> causes the operation to be executed as part of the caller&#39;s open database transaction (if one exists). If there is no open database transaction, the operation is executed in a new database transaction. In either case, the caller is responsible for committing the transaction. For more information, see <a href="long_intro.htm#i1014370">Section 1.1.8</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref956"></a>Usage Notes</p>
<p>Contrast this procedure with <a href="#i97252">RevokeSystemPriv</a>, which revokes system-level Workspace Manager privileges with keywords in the form <span class="italic">xxx</span>_ANY_WORKSPACE (<code>ACCESS_ANY_WORKSPACE</code>, <code>MERGE_ANY_WORKSPACE</code>, and so on). Also contrast this procedure with <a href="#CACFCFGI">RevokeGraphPriv</a>, which grants workspace-level Workspace Manager privileges on multiparent graph workspaces</p>
<p>To grant workspace-level privileges, use the <a href="#i97023">GrantWorkspacePriv</a> procedure.</p>
<p>An exception is raised if one or more of the following apply:</p>
<ul>
<li>
<p><code>grantee</code> is not a valid user or role in the database.</p>
</li>
<li>
<p>You were not the grantor of <code>priv_types</code> to <code>grantee</code>.</p>
</li>
<li>
<p><code>auto_commit</code> is <code>TRUE</code> and an open transaction exists in a parent or child workspace of any table that needs to be modified.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref957"></a>Examples</p>
<p>The following example disallows user <code>Smith</code> from accessing the <code>NEWWORKSPACE</code> workspace and merging changes in that workspace.</p>
<pre>EXECUTE DBMS_WM.RevokeWorkspacePriv (&#39;ACCESS_WORKSPACE, MERGE_WORKSPACE&#39;, &#39;NEWWORKSPACE&#39;, &#39;Smith&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i114047"></a>
<div id="ADWSM99373" class="refsect1">
<h2 class="refsect1"><a id="sthref958"></a><a id="sthref959"></a><a id="sthref960"></a>RollbackBulkLoading</h2>
<p>Rolls back changes made to a version-enabled table during a bulk load operation.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref961"></a>Syntax</p>
<pre>DBMS_WM.RollbackBulkLoading(
   table_name         IN VARCHAR2,
   ignore_last_error  IN BOOLEAN DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref962"></a>Parameters</p>
<div id="ADWSM99374" class="tblformal">
<p class="titleintable"><a id="sthref963"></a><a id="sthref964"></a>Table 4-65 RollbackBulkLoading Procedure Parameters</p>
<table class="cellalignment5786" title="RollbackBulkLoading Procedure Parameters" summary="RollbackBulkLoading Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t69">Parameter</th>
<th class="cellalignment5787" id="r1c2-t69">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t69" headers="r1c1-t69">
<pre>table_name
</pre></td>
<td class="cellalignment5788" headers="r2c1-t69 r1c2-t69">
<p>Name of the version-enabled table into which data will be bulk loaded. The name is not case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t69" headers="r1c1-t69">
<pre>ignore_last_error
</pre></td>
<td class="cellalignment5788" headers="r3c1-t69 r1c2-t69">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> ignores the last error, if any, that occurred during the previous call to the RollbackBulkLoading procedure. Information about the last error is stored in the <a href="long_views.htm#i89006">USER_WM_VT_ERRORS</a> and <a href="long_views.htm#i89005">ALL_WM_VT_ERRORS</a> static data dictionary views, which are described in <a href="long_views.htm#g1008700">Chapter 5</a>. See the Usage Notes for more information.</p>
<p><code>FALSE</code> <code>(</code>the default) does not ignore the last error, if any, that occurred during the previous call to the RollbackBulkLoading procedure.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref965"></a>Usage Notes</p>
<p>For information about the requirements for bulk loading data into version-enabled tables, see <a href="long_intro.htm#i1019718">Section 1.7</a>.</p>
<p>This procedure re-creates all the views that were dropped by the <a href="#i117894">BeginBulkLoading</a> procedure.</p>
<p>If a call to the RollbackBulkLoading procedure fails, you should try to fix the cause of the error. Examine the <a href="long_views.htm#i89006">USER_WM_VT_ERRORS</a> and <a href="long_views.htm#i89005">ALL_WM_VT_ERRORS</a> static data dictionary views to see the SQL statement and error message. Fix the cause of the error, and then call the RollbackBulkLoading procedure again with the default <code>ignore_last_error</code> parameter value of <code>FALSE</code>. However, if the call still fails and you cannot fix the cause of the error, and if you are sure that it is safe and appropriate to ignore this error, then you have the option to ignore the error by calling the RollbackBulkLoading procedure with the <code>ignore_last_error</code> parameter value of <code>TRUE</code>. Note that you are responsible for ensuring that it is safe and appropriate to ignore the error.</p>
<p>An exception is raised if one or more of the following apply:</p>
<ul>
<li>
<p><code>table_name</code> does not exist.</p>
</li>
<li>
<p><code>table_name</code> is not version-enabled.</p>
</li>
<li>
<p>The <a href="#i117894">BeginBulkLoading</a> procedure has not been called on the table.</p>
</li>
<li>
<p>The user does not own the table or does not have the <code>WM_ADMIN</code> system privilege.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref966"></a>Examples</p>
<p>The following example rolls back changes made to <code>EMP</code> table during a bulk load operation.</p>
<pre>EXECUTE DBMS_WM.RollbackBulkLoading (&#39;EMP&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i98109"></a>
<div id="ADWSM99375" class="refsect1">
<h2 class="refsect1"><a id="sthref967"></a><a id="sthref968"></a>RollbackDDL</h2>
<p>Rolls back (cancels) DDL (data definition language) changes made during a DDL session for a specified table, and ends the DDL session.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref969"></a>Syntax</p>
<pre>DBMS_WM.RollbackDDL(
   table_name  IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref970"></a>Parameters</p>
<div id="ADWSM99376" class="tblformal">
<p class="titleintable"><a id="sthref971"></a><a id="sthref972"></a>Table 4-66 RollbackDDL Procedure Parameters</p>
<table class="cellalignment5786" title="RollbackDDL Procedure Parameters" summary="RollbackDDL Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t70">Parameter</th>
<th class="cellalignment5787" id="r1c2-t70">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t70" headers="r1c1-t70">
<pre>table_name
</pre></td>
<td class="cellalignment5788" headers="r2c1-t70 r1c2-t70">
<p>Name of the version-enabled table. The name is not case-sensitive.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref973"></a>Usage Notes</p>
<p>This procedure rolls back (cancels) changes that were made to a version-enabled table and to any indexes and triggers based on the version-enabled table during a DDL session. It also deletes the <span class="italic">&lt;table-name&gt;_LTS</span> skeleton table that was created by the <a href="#i113441">BeginDDL</a> procedure.</p>
<p>For detailed information about performing DDL operations related to version-enabled tables, see <a href="long_intro.htm#i1009427">Section 1.8</a>; and for DDL operations on version-enabled tables in an Oracle replication environment, see also <a href="long_repl.htm#i634767">Section C.3</a>.</p>
<p>An exception is raised if one or more of the following apply:</p>
<ul>
<li>
<p><code>table_name</code> does not exist or is not version-enabled.</p>
</li>
<li>
<p>An open DDL session does not exist for <code>table_name</code>. (That is, the <a href="#i113441">BeginDDL</a> procedure has not been called specifying this table, or the <a href="#i98106">CommitDDL</a> or <a href="#i98109">RollbackDDL</a> procedure was already called specifying this table.)</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref974"></a>Examples</p>
<p>The following example begins a DDL session, adds a column named <code>COMMENTS</code> to the <code>COLA_MARKETING_BUDGET</code> table by using the skeleton table named <code>COLA_MARKETING_BUDGET_LTS</code>, and ends the DDL session by canceling the change.</p>
<pre>EXECUTE DBMS_WM.BeginDDL(&#39;COLA_MARKETING_BUDGET&#39;);
ALTER TABLE cola_marketing_budget_lts ADD (comments VARCHAR2(100));
EXECUTE DBMS_WM.RollbackDDL(&#39;COLA_MARKETING_BUDGET&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i87840"></a>
<div id="ADWSM99377" class="refsect1">
<h2 class="refsect1"><a id="sthref975"></a><a id="sthref976"></a><a id="sthref977"></a><a id="sthref978"></a>RollbackResolve</h2>
<p>Quits a conflict resolution session and discards all changes in the workspace since the <a href="#i87363">BeginResolve</a> procedure was executed.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref979"></a>Syntax</p>
<pre>DBMS_WM.RollbackResolve(
   workspace  IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref980"></a>Parameters</p>
<div id="ADWSM99378" class="tblformal">
<p class="titleintable"><a id="sthref981"></a><a id="sthref982"></a>Table 4-67 RollbackResolve Procedure Parameters</p>
<table class="cellalignment5786" title="RollbackResolve Procedure Parameters" summary="RollbackResolve Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t71">Parameter</th>
<th class="cellalignment5787" id="r1c2-t71">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t71" headers="r1c1-t71">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r2c1-t71 r1c2-t71">
<p>Name of the workspace. The name is case-sensitive.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref983"></a>Usage Notes</p>
<p>This procedure quits the current conflict resolution session (started by the <a href="#i87363">BeginResolve</a> procedure), and discards all changes in the workspace since the start of the conflict resolution session. Contrast this procedure with <a href="#i90948">CommitResolve</a>, which saves all changes.</p>
<p>While the conflict resolution session is being rolled back, the workspace is frozen in <code>1WRITER</code> mode, as explained in <a href="long_intro.htm#i1006773">Section 1.1.5</a>.</p>
<p>For more information about conflict resolution, see <a href="long_intro.htm#i1004610">Section 1.1.4</a>.</p>
<p>An exception is raised if one or more of the following apply:</p>
<ul>
<li>
<p>There are one or more open database transactions in <code>workspace</code>.</p>
</li>
<li>
<p>The procedure was called by a user that does not have the <code>WM_ADMIN</code> system privilege or that did not execute the <a href="#i87363">BeginResolve</a> procedure on <code>workspace</code>.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref984"></a>Examples</p>
<p>The following example quits the conflict resolution session in <code>Workspace1</code> and discards all changes.</p>
<pre>EXECUTE  DBMS_WM.RollbackResolve (&#39;Workspace1&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i87881"></a>
<div id="ADWSM99379" class="refsect1">
<h2 class="refsect1"><a id="sthref985"></a><a id="sthref986"></a><a id="sthref987"></a>RollbackTable</h2>
<p>Discards all changes made in the workspace to a specified table (all rows or as specified in the <code>WHERE</code> clause).</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref988"></a>Syntax</p>
<pre>DBMS_WM.RollbackTable(
   workspace     IN VARCHAR2,
   table_id      IN VARCHAR2,
   sp_name       IN VARCHAR2 DEFAULT &#39;&#39;,
   where_clause  IN VARCHAR2 DEFAULT &#39;&#39;,
   remove_locks  IN BOOLEAN DEFAULT TRUE,
   auto_commit   IN BOOLEAN DEFAULT TRUE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref989"></a>Parameters</p>
<div id="ADWSM99380" class="tblformal">
<p class="titleintable"><a id="sthref990"></a><a id="sthref991"></a>Table 4-68 RollbackTable Procedure Parameters</p>
<table class="cellalignment5786" title="RollbackTable Procedure Parameters" summary="RollbackTable Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t72">Parameter</th>
<th class="cellalignment5787" id="r1c2-t72">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t72" headers="r1c1-t72">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r2c1-t72 r1c2-t72">
<p>Name of the workspace. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t72" headers="r1c1-t72">
<pre>table_id
</pre></td>
<td class="cellalignment5788" headers="r3c1-t72 r1c2-t72">
<p>Name of the table containing rows to be discarded. The name is not case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t72" headers="r1c1-t72">
<pre>sp_name
</pre></td>
<td class="cellalignment5788" headers="r4c1-t72 r1c2-t72">
<p>Name of the savepoint to which to roll back. The name is case-sensitive. The default is to discard all changes (that is, ignore any savepoints).</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r5c1-t72" headers="r1c1-t72">
<pre>where_clause
</pre></td>
<td class="cellalignment5788" headers="r5c1-t72 r1c2-t72">
<p>The <code>WHERE</code> clause (excluding the <code>WHERE</code> keyword) identifying the rows to be discarded. Example: <code>&#39;department_id = 20&#39;</code></p>
<p>Only primary key columns can be specified in the <code>WHERE</code> clause, except in a subquery. The subquery can refer to columns that are not primary keys, but it cannot refer to a version-enabled table.</p>
<p>If <code>the where_clause parameter</code> is not specified, all rows that meet the criteria of the other parameters are discarded.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r6c1-t72" headers="r1c1-t72">
<pre>remove_locks
</pre></td>
<td class="cellalignment5788" headers="r6c1-t72 r1c2-t72">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> (the default) releases those locks on rows in the parent workspace that satisfy the condition in <code>the where_clause parameter</code> and that were not versioned in the child workspace. This option has no effect if a savepoint is specified (<code>sp_name</code> parameter).</p>
<p><code>FALSE</code> does not release any locks in the parent workspace.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r7c1-t72" headers="r1c1-t72">
<pre>auto_commit
</pre></td>
<td class="cellalignment5788" headers="r7c1-t72 r1c2-t72">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> (the default) causes the operation to be executed as an autonomous database transaction that will be committed when it finishes.</p>
<p><code>FALSE</code> causes the operation to be executed as part of the caller&#39;s open database transaction (if one exists). If there is no open database transaction, the operation is executed in a new database transaction. In either case, the caller is responsible for committing the transaction. For more information, see <a href="long_intro.htm#i1014370">Section 1.1.8</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref992"></a>Usage Notes</p>
<p>You cannot roll back to a savepoint if any implicit savepoints were created since the specified savepoint, unless you first merge or remove the descendant workspaces that caused the implicit savepoints to be created. For example, referring to <a href="long_intro.htm#i1004384">Figure 1-2</a> in <a href="long_intro.htm#i1012409">Section 1.1.2</a>, the user in Workspace1 cannot roll back to savepoint SP1 until Workspace3 (which caused implicit savepoint SPc to be created) is merged or removed.</p>
<p>An exception is raised if one or more of the following apply:</p>
<ul>
<li>
<p><code>workspace</code> does not exist.</p>
</li>
<li>
<p>You do not have the privilege to roll back <code>workspace</code> or any affected table.</p>
</li>
<li>
<p>A database transaction affecting <code>table_id</code> is open in any workspace.</p>
</li>
<li>
<p><code>auto_commit</code> is <code>TRUE</code> and an open transaction exists in a parent or child workspace of any table that needs to be modified.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref993"></a>Examples</p>
<p>The following example rolls back all changes made to the <code>EMP</code> table (in the <code>USER3</code> schema) in the <code>NEWWORKSPACE</code> workspace since that workspace was created.</p>
<pre>EXECUTE DBMS_WM.RollbackTable (&#39;NEWWORKSPACE&#39;, &#39;user3.emp&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78733"></a>
<div id="ADWSM99381" class="refsect1">
<h2 class="refsect1"><a id="sthref994"></a><a id="sthref995"></a><a id="sthref996"></a><a id="sthref997"></a>RollbackToSP</h2>
<p>Discards all data changes made in the workspace to version-enabled tables since the specified savepoint.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref998"></a>Syntax</p>
<pre>DBMS_WM.RollbackToSP(
   workspace       IN VARCHAR2,
   savepoint_name  IN VARCHAR2,
   auto_commit     IN BOOLEAN DEFAULT TRUE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref999"></a>Parameters</p>
<div id="ADWSM99382" class="tblformal">
<p class="titleintable"><a id="sthref1000"></a><a id="sthref1001"></a>Table 4-69 RollbackToSP Procedure Parameters</p>
<table class="cellalignment5786" title="RollbackToSP Procedure Parameters" summary="RollbackToSP Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t73">Parameter</th>
<th class="cellalignment5787" id="r1c2-t73">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t73" headers="r1c1-t73">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r2c1-t73 r1c2-t73">
<p>Name of the workspace. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t73" headers="r1c1-t73">
<pre>savepoint_name
</pre></td>
<td class="cellalignment5788" headers="r3c1-t73 r1c2-t73">
<p>Name of the savepoint to which to roll back changes. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t73" headers="r1c1-t73">
<pre>auto_commit
</pre></td>
<td class="cellalignment5788" headers="r4c1-t73 r1c2-t73">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> (the default) causes the operation to be executed as an autonomous database transaction that will be committed when it finishes.</p>
<p><code>FALSE</code> causes the operation to be executed as part of the caller&#39;s open database transaction (if one exists). If there is no open database transaction, the operation is executed in a new database transaction. In either case, the caller is responsible for committing the transaction. For more information, see <a href="long_intro.htm#i1014370">Section 1.1.8</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1002"></a>Usage Notes</p>
<p>While this procedure is executing, the workspace is frozen in <code>NO_ACCESS</code> mode.</p>
<p>Contrast this procedure with <a href="#i89943">RollbackWorkspace</a>, which rolls back all changes made since the creation of the workspace.</p>
<p>You cannot roll back to a savepoint if any implicit savepoints were created since the specified savepoint, unless you first merge or remove the descendant workspaces that caused the implicit savepoints to be created. For example, referring to <a href="long_intro.htm#i1004384">Figure 1-2</a> in <a href="long_intro.htm#i1012409">Section 1.1.2</a>, the user in <code>Workspace1</code> cannot roll back to savepoint <code>SP1</code> until <code>Workspace3</code> (which caused implicit savepoint <code>SPc</code> to be created) is merged or removed.</p>
<p>An exception is raised if one or more of the following apply:</p>
<ul>
<li>
<p><code>workspace</code> does not exist.</p>
</li>
<li>
<p><code>savepoint_name</code> does not exist.</p>
</li>
<li>
<p><code>auto_commit</code> is <code>TRUE</code> and an open transaction exists in a parent or child workspace of any table that needs to be modified.</p>
</li>
<li>
<p>One or more implicit savepoints were created in <code>workspace</code> after <code>savepoint_name</code>, and the descendant workspaces that caused the implicit savepoints to be created still exist.</p>
</li>
<li>
<p>You do not have the privilege to roll back <code>workspace</code> or any affected table.</p>
</li>
<li>
<p>Any sessions are in <code>workspace</code>.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1003"></a>Examples</p>
<p>The following example rolls back any changes made in the <code>NEWWORKSPACE</code> workspace to all tables since the creation of <code>Savepoint1</code>.</p>
<pre>EXECUTE DBMS_WM.RollbackToSP (&#39;NEWWORKSPACE&#39;, &#39;Savepoint1&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i89943"></a>
<div id="ADWSM99383" class="refsect1">
<h2 class="refsect1"><a id="sthref1004"></a><a id="sthref1005"></a><a id="sthref1006"></a>RollbackWorkspace</h2>
<p>Discards all data changes made in the workspace to version-enabled tables.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1007"></a>Syntax</p>
<pre>DBMS_WM.RollbackWorkspace(
   workspace    IN VARCHAR2,
   auto_commit  IN BOOLEAN DEFAULT TRUE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1008"></a>Parameters</p>
<div id="ADWSM99384" class="tblformal">
<p class="titleintable"><a id="sthref1009"></a><a id="sthref1010"></a>Table 4-70 RollbackWorkspace Procedure Parameters</p>
<table class="cellalignment5786" title="RollbackWorkspace Procedure Parameters" summary="RollbackWorkspace Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t74">Parameter</th>
<th class="cellalignment5787" id="r1c2-t74">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t74" headers="r1c1-t74">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r2c1-t74 r1c2-t74">
<p>Name of the workspace. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t74" headers="r1c1-t74">
<pre>auto_commit
</pre></td>
<td class="cellalignment5788" headers="r3c1-t74 r1c2-t74">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> (the default) causes the operation to be executed as an autonomous database transaction that will be committed when it finishes.</p>
<p><code>FALSE</code> causes the operation to be executed as part of the caller&#39;s open database transaction (if one exists). If there is no open database transaction, the operation is executed in a new database transaction. In either case, the caller is responsible for committing the transaction. For more information, see <a href="long_intro.htm#i1014370">Section 1.1.8</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1011"></a>Usage Notes</p>
<p>Only leaf workspaces can be rolled back. That is, a workspace cannot be rolled back if it has any descendant workspaces. (For an explanation of workspace hierarchy, see <a href="long_intro.htm#i1004554">Section 1.1.1</a>.)</p>
<p>Contrast this procedure with <a href="#i78733">RollbackToSP</a>, which rolls back changes to a specified savepoint.</p>
<p>Like the <a href="#i108854">RemoveWorkspace</a> procedure, RollbackWorkspace deletes the data in the workspace; however, unlike the <a href="#i108854">RemoveWorkspace</a> procedure, RollbackWorkspace does not delete the Workspace Manager workspace structure.</p>
<p>While this procedure is executing, the specified workspace is frozen in <code>NO_ACCESS</code> mode, as explained in <a href="long_intro.htm#i1006773">Section 1.1.5</a>.</p>
<p>An exception is raised if one or more of the following apply:</p>
<ul>
<li>
<p><code>workspace</code> has any descendant workspaces.</p>
</li>
<li>
<p><code>workspace</code> does not exist.</p>
</li>
<li>
<p><code>auto_commit</code> is <code>TRUE</code> and an open transaction exists in a parent or child workspace of any table that needs to be modified.</p>
</li>
<li>
<p>You do not have the privilege to roll back <code>workspace</code> or any affected table.</p>
</li>
<li>
<p>Any sessions are in <code>workspace</code>.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1012"></a>Examples</p>
<p>The following example rolls back any changes made in the <code>NEWWORKSPACE</code> workspace since that workspace was created.</p>
<pre>EXECUTE DBMS_WM.RollbackWorkspace (&#39;NEWWORKSPACE&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i113021"></a>
<div id="ADWSM99385" class="refsect1">
<h2 class="refsect1"><a id="sthref1013"></a><a id="sthref1014"></a><a id="sthref1015"></a>SetCaptureEvent</h2>
<p>Enables or disables the capture of all Workspace Manager events or events of a specific type.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1016"></a>Syntax</p>
<pre>DBMS_WM.SetCaptureEvent(
   event_name  IN VARCHAR2,
   capture     IN VARCHAR2 DEFAULT &#39;ON&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1017"></a>Parameters</p>
<div id="ADWSM99386" class="tblformal">
<p class="titleintable"><a id="sthref1018"></a><a id="sthref1019"></a>Table 4-71 SetCaptureEvent Procedure Parameters</p>
<table class="cellalignment5786" title="SetCaptureEvent Procedure Parameters" summary="SetCaptureEvent Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t75">Parameter</th>
<th class="cellalignment5787" id="r1c2-t75">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t75" headers="r1c1-t75">
<pre>event_name
</pre></td>
<td class="cellalignment5788" headers="r2c1-t75 r1c2-t75">
<p>One of the following values: <code>ALL_EVENTS</code>, <code>TABLE_MERGE_W_REMOVE_DATA</code>, <code>TABLE_MERGE_WO_REMOVE_DATA</code>, <code>TABLE_REFRESH</code>, <code>TABLE_ROLLBACK</code>, <code>WORKSPACE_COMPRESS</code>, <code>WORKSPACE_CREATE</code>, <code>WORKSPACE_MERGE_W_REMOVE</code>, <code>WORKSPACE_MERGE_WO_REMOVE</code>, <code>WORKSPACE_REFRESH</code>, <code>WORKSPACE_REMOVE</code>, <code>WORKSPACE_ROLLBACK</code>, <code>WORKSPACE_VERSION</code>.</p>
<p><code>ALL_EVENTS</code> includes all Workspace Manager events. The other values reflect specific event types, which are listed and explained in <a href="long_events.htm#i1021333">Section 2.1</a>.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t75" headers="r1c1-t75">
<pre>capture
</pre></td>
<td class="cellalignment5788" headers="r3c1-t75 r1c2-t75">
<p><code>ON</code> (the default) enables the capture of <code>event_name</code> events.</p>
<p><code>OFF</code> disables the capture of <code>event_name</code> events.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1020"></a>Usage Notes</p>
<p>For information about Workspace Manager events, see <a href="long_events.htm#g1023698">Chapter 2</a>.</p>
<p>This procedure requires that the Workspace Manager system parameter <code>ALLOW_CAPTURE_EVENTS</code> be set to <code>ON</code>. To check the value of a Workspace Manager system parameter, use the <a href="#i108546">GetSystemParameter</a> procedure; to set a Workspace Manager system parameter, use the <a href="#i108545">SetSystemParameter</a> procedure.</p>
<p>You can use this procedure to control which types of events are captured. For example, you can enable the capture of all events, and then disable the capture of a few types of events; or you can disable the capture of all events, and then enable the capture of a few types of events.</p>
<p>To see which types of events are currently being captured, examine the <a href="long_views.htm#i94402">WM_EVENTS_INFO</a> metadata view, which is described in <a href="long_views.htm#i94402">Section 5.48</a>.</p>
<p>If this procedure completes successfully, it commits the caller&#39;s open database transaction.</p>
<p>An exception is raised if one or more of the following apply:</p>
<ul>
<li>
<p>You do not have the <code>WM_ADMIN</code> system privilege.</p>
</li>
<li>
<p>The value of the <code>ALLOW_CAPTURE_EVENTS</code> system parameter is <code>OFF</code> and you are trying to set <code>event_name</code> to <code>ON</code> (the default value for that parameter).</p>
</li>
<li>
<p><code>event_name</code> is not valid.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1021"></a>Examples</p>
<p>The following example captures all Workspace Manager events except workspace compression events, by first specifying that all events are to be captured, and then excluding workspace compression events.</p>
<pre>-- Allow Workspace Manager events to be captured. (Required for SetCaptureEvent)
EXECUTE DBMS_WM.SetSystemParameter (&#39;ALLOW_CAPTURE_EVENTS&#39;, &#39;ON&#39;);
-- Start capturing all Workspace Manager events.
EXECUTE DBMS_WM.SetCaptureEvent (&#39;ALL_EVENTS&#39;,&#39;ON&#39;);
-- Exclude workspace compression events.
EXECUTE DBMS_WM.SetCaptureEvent (&#39;WORKSPACE_COMPRESS&#39;,&#39;OFF&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACBBCJI"></a>
<div id="ADWSM99387" class="refsect1">
<h2 class="refsect1"><a id="sthref1022"></a><a id="sthref1023"></a><a id="sthref1024"></a>SetCompressWorkspace</h2>
<p>Creates rows in the <a href="long_views.htm#BABGJEJJ">WM_COMPRESSIBLE_TABLES</a> metadata view with information about version-enabled tables that need to be compressed if workspace compression operations are performed.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1025"></a>Syntax</p>
<pre>DBMS_WM.SetCompressWorkspace(
   workspace  IN VARCHAR2,
   firstSP    IN VARCHAR2 DEFAULT NULL,
   secondSP   IN VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1026"></a>Parameters</p>
<div id="ADWSM99388" class="tblformal">
<p class="titleintable"><a id="sthref1027"></a><a id="sthref1028"></a>Table 4-72 SetCompressWorkspace Procedure Parameters</p>
<table class="cellalignment5786" title="SetCompressWorkspace Procedure Parameters" summary="SetCompressWorkspace Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t76">Parameter</th>
<th class="cellalignment5787" id="r1c2-t76">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t76" headers="r1c1-t76">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r2c1-t76 r1c2-t76">
<p>Name of the workspace. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t76" headers="r1c1-t76">
<pre>firstSP
</pre></td>
<td class="cellalignment5788" headers="r3c1-t76 r1c2-t76">
<p>Savepoint on the first version of the compression range. Savepoint names are case-sensitive.</p>
<p>If only <code>workspace</code> and <code>firstSP</code> are specified, all rows in version-enabled tables affected between workspace creation and <code>firstSP</code> are checked to see if they need to be compressed in a workspace compression operation is performed.</p>
<p>If <code>workspace</code>, <code>firstSP</code>, and <code>secondSP</code> are specified, all rows in version-enabled tables affected between <code>firstSP</code> and <code>secondSP</code> are checked.</p>
<p>If only <code>workspace</code> is specified (no savepoints), all rows in version-enabled tables are checked.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t76" headers="r1c1-t76">
<pre>secondSP
</pre></td>
<td class="cellalignment5788" headers="r4c1-t76 r1c2-t76">
<p>Savepoint on the first version of the compression range. All rows in version-enabled tables from <code>firstSP</code> to <code>secondSP</code> are checked to see if they need to be compressed in a workspace compression operation is performed. Savepoint names are case-sensitive.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1029"></a>Usage Notes</p>
<p>You can (but do not need to) use this procedure before calling the <a href="#i86067">CompressWorkspace</a> or <a href="#i86068">CompressWorkspaceTree</a> procedure.</p>
<p>This procedure creates rows in the <a href="long_views.htm#BABGJEJJ">WM_COMPRESSIBLE_TABLES</a> metadata view (described in <a href="long_views.htm#BABGJEJJ">WM_COMPRESSIBLE_TABLES</a>) only for version-enabled tables that would need to be compressed during a workspace compression operation.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1030"></a>Examples</p>
<p>The following example creates rows in the <a href="long_views.htm#BABGJEJJ">WM_COMPRESSIBLE_TABLES</a> metadata view for any version-enabled tables that would need to be compressed during an operation that compressed the <code>B_focus_1</code> workspace.</p>
<pre>EXECUTE DBMS_WM.SetCompressWorkspace (&#39;B_focus_1&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i113360"></a>
<div id="ADWSM99389" class="refsect1">
<h2 class="refsect1"><a id="sthref1031"></a><a id="sthref1032"></a><a id="sthref1033"></a>Set<a id="sthref1034"></a>ConflictWorkspace</h2>
<p>Determines whether or not conflicts exist between a workspace and its parent.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1035"></a>Syntax</p>
<pre>DBMS_WM.SetConflictWorkspace(
   workspace  IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1036"></a>Parameters</p>
<div id="ADWSM99390" class="tblformal">
<p class="titleintable"><a id="sthref1037"></a><a id="sthref1038"></a>Table 4-73 SetConflictWorkspace Procedure Parameters</p>
<table class="cellalignment5786" title="SetConflictWorkspace Procedure Parameters" summary="SetConflictWorkspace Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t77">Parameter</th>
<th class="cellalignment5787" id="r1c2-t77">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t77" headers="r1c1-t77">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r2c1-t77 r1c2-t77">
<p>Name of the workspace. The name is case-sensitive.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1039"></a>Usage Notes</p>
<p>This procedure checks for any conflicts between <code>workspace</code> and its parent workspace, and it modifies the content of the &lt;table_name&gt;_CONF views (explained in <a href="long_views.htm#i87420">Section 5.51</a>) as needed.</p>
<p>A <code>SELECT</code> operation from the &lt;table_name&gt;_CONF views for all tables modified in a workspace displays all rows in the workspace that are in conflict with the parent workspace. (To obtain a list of tables that have conflicts for the current conflict workspace setting, use the SQL statement <code>SELECT * FROM ALL_WM_VERSIONED_TABLES WHERE conflict = &#39;YES&#39;;</code>. The SQL statement <code>SELECT * FROM &lt;table_name&gt;_CONF</code> displays conflicts for &lt;table_name&gt; between the current workspace and its parent workspace.)</p>
<p>Any conflicts must be resolved before a workspace can be merged or refreshed. To resolve a conflict, you must use the <a href="#i83186">ResolveConflicts</a> procedure, and then merge the result of the resolution by using the <a href="#i89452">MergeWorkspace</a> procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1040"></a>Examples</p>
<p>The following example checks for any conflicts between <code>B_focus_2</code> and its parent workspace, and modifies the contents of the &lt;table_name&gt;_CONF views as needed.</p>
<pre>EXECUTE DBMS_WM.SetConflictWorkspace (&#39;B_focus_2&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i85583"></a>
<div id="ADWSM99391" class="refsect1">
<h2 class="refsect1"><a id="sthref1041"></a><a id="sthref1042"></a>SetDiffVersions</h2>
<p>Finds differences in values in version-enabled tables for two savepoints and their common ancestor (base). It modifies the contents of the differences views that describe these differences.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1043"></a>Syntax</p>
<pre>DBMS_WM.SetDiffVersions(
   workspace1   IN VARCHAR2,
   workspace2   IN VARCHAR2,
   onlyModified IN BOOLEAN DEFAULT FALSE);
</pre>
<p>or</p>
<pre>DBMS_WM.SetDiffVersions(
   workspace1   IN VARCHAR2,
   savepoint1   IN VARCHAR2,
   workspace2   IN VARCHAR2,
   savepoint2   IN VARCHAR2,
   onlyModified IN BOOLEAN DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1044"></a>Parameters</p>
<div id="ADWSM99392" class="tblformal">
<p class="titleintable"><a id="sthref1045"></a><a id="sthref1046"></a>Table 4-74 SetDiffVersions Procedure Parameters</p>
<table class="cellalignment5786" title="SetDiffVersions Procedure Parameters" summary="SetDiffVersions Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t78">Parameter</th>
<th class="cellalignment5787" id="r1c2-t78">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t78" headers="r1c1-t78">
<pre>workspace1
</pre></td>
<td class="cellalignment5788" headers="r2c1-t78 r1c2-t78">
<p>Name of the first workspace to be checked for differences in version-enabled tables. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t78" headers="r1c1-t78">
<pre>savepoint1
</pre></td>
<td class="cellalignment5788" headers="r3c1-t78 r1c2-t78">
<p>Name of the savepoint in <code>workspace1</code> for which values are to be checked. The name is case-sensitive.</p>
<p>If <code>savepoint1</code> and <code>savepoint2</code> are not specified, the rows in version-enabled tables for the <code>LATEST</code> savepoint in each workspace are checked. (The <code>LATEST</code> savepoint is explained in <a href="long_intro.htm#i1012409">Section 1.1.2</a>.)</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t78" headers="r1c1-t78">
<pre>workspace2
</pre></td>
<td class="cellalignment5788" headers="r4c1-t78 r1c2-t78">
<p>Name of the second workspace to be checked for differences in version-enabled tables. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r5c1-t78" headers="r1c1-t78">
<pre>savepoint2
</pre></td>
<td class="cellalignment5788" headers="r5c1-t78 r1c2-t78">
<p>Name of the savepoint in <code>workspace2</code> for which values are to be checked. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r6c1-t78" headers="r1c1-t78">
<pre>onlyModified
</pre></td>
<td class="cellalignment5788" headers="r6c1-t78 r1c2-t78">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> removes from the _DIFF any rows that have a <code>NC</code> (no change) or <code>NE</code> (nonexistent) value for the WM_CODE column. This improves the performance of the view when these rows are not needed. As such, each primary key can have from one through three rows, instead of the usual three.</p>
<p><code>FALSE</code> (the default) causes queries on the _DIFF view to always return three rows for each primary key value: one for the base row, and one for each of the specified savepoints.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1047"></a>Usage Notes</p>
<p>This procedure modifies the contents of the differences views (<span class="italic">xxx</span>_DIFF), which are described in <a href="long_views.htm#i87490">Section 5.52</a>. Each call to the procedure populates one or more sets of three rows, each set consisting of:</p>
<ul>
<li>
<p>Values for the common ancestor</p>
</li>
<li>
<p>Values for <code>workspace1</code> (<code>savepoint1</code> or <code>LATEST</code> savepoint values)</p>
</li>
<li>
<p>Values for <code>workspace2</code> (<code>savepoint2</code> or <code>LATEST</code> savepoint values)</p>
</li>
</ul>
<p>You can then select rows from the appropriate <span class="italic">xxx</span>_DIFF view or views to check comparable table values in the two savepoints and their common ancestor. The common ancestor (or <span class="italic">base</span>) is identified as <code>DiffBase</code> in <span class="italic">xxx</span>_DIFF view rows.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1048"></a>Examples</p>
<p>The following example checks the differences in version-enabled tables for the <code>B_focus_1</code> and <code>B_focus_2</code> workspaces. (The output has been reformatted for readability.)</p>
<pre>-- Add rows to difference view: COLA_MARKETING_BUDGET_DIFF
EXECUTE DBMS_WM.SetDiffVersions (&#39;B_focus_1&#39;, &#39;B_focus_2&#39;);

-- View the rows that were just added.
SELECT * from COLA_MARKETING_BUDGET_DIFF;
    
PRODUCT_ID  PRODUCT_NAME  MANAGER  BUDGET  WM_DIFFVER          WMCODE
----------  ------------  -------  ------  -----------         --------
       1        cola_a    Alvarez   2      DiffBase            NC
       1        cola_a    Alvarez   1.5    B_focus_1, LATEST   U       
       1        cola_a    Alvarez   2      B_focus_2, LATEST   NC      
       2        cola_b    Burton    2      DiffBase            NC      
       2        cola_b    Beasley   3      B_focus_1, LATEST   U       
       2        cola_b    Burton    2.5    B_focus_2, LATEST   U    
       3        cola_c    Chen      1.5    DiffBase            NC   
       3        cola_c    Chen      1      B_focus_1, LATEST   U   
       3        cola_c    Chen      1.5    B_focus_2, LATEST   NC  
       4        cola_d    Davis     3.5    DiffBase            NC  
       4        cola_d    Davis     3      B_focus_1, LATEST   U   
       4        cola_d    Davis     2.5    B_focus_2, LATEST   U   
         
12 rows selected.
</pre>
<p><a href="long_views.htm#i87490">Section 5.52</a> explains how to interpret and use the information in the differences (<span class="italic">xxx</span>_DIFF) views.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79467"></a>
<div id="ADWSM99393" class="refsect1">
<h2 class="refsect1"><a id="sthref1049"></a><a id="sthref1050"></a><a id="sthref1051"></a>SetLockingOFF</h2>
<p>Disables Workspace Manager locking for the current session.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1052"></a>Syntax</p>
<pre>DBMS_WM.SetLockingOFF();
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1053"></a>Parameters</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1054"></a>Usage Notes</p>
<p>This procedure turns off Workspace Manager locking that was set on by the <a href="#i79459">SetLockingON</a> procedure. Existing locks applied by this session remain locked. All new changes by this session are not locked.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1055"></a>Examples</p>
<p>The following example sets locking off for the session.</p>
<pre>EXECUTE DBMS_WM.SetLockingOFF;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i79459"></a>
<div id="ADWSM99394" class="refsect1">
<h2 class="refsect1"><a id="sthref1056"></a><a id="sthref1057"></a><a id="sthref1058"></a><a id="sthref1059"></a><a id="sthref1060"></a>SetLockingON</h2>
<p>Enables Workspace Manager locking for the current session.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1061"></a>Syntax</p>
<pre>DBMS_WM.SetLockingON(
   lockmode  IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1062"></a>Parameters</p>
<div id="ADWSM99395" class="tblformal">
<p class="titleintable"><a id="sthref1063"></a><a id="sthref1064"></a>Table 4-75 SetLockingON Procedure Parameters</p>
<table class="cellalignment5786" title="SetLockingON Procedure Parameters" summary="SetLockingON Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t79">Parameter</th>
<th class="cellalignment5787" id="r1c2-t79">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t79" headers="r1c1-t79">
<pre>lockmode
</pre></td>
<td class="cellalignment5788" headers="r2c1-t79 r1c2-t79">
<p>Locking mode. Must be <code>E</code>, <code>WE</code>, <code>VE</code>, <code>S</code>, or <code>C</code>.</p>
<p><code>E</code> (exclusive) mode locks the rows in the previous version and the corresponding rows in the current version; no other users in the workspace for either version can change any values.</p>
<p><code>WE</code> (workspace-exclusive) mode locks the rows in the previous version and the corresponding rows in the current version such that only the user that set the lock can change the values in the current workspace; however, other users in other workspaces can change the values.</p>
<p><code>VE</code> (version-exclusive) mode locks the rows in the previous version and the corresponding rows in the current version such that only the user that set the lock can change the values; no other users (in any workspace) can change the values.</p>
<p><code>S</code> (shared) mode locks the rows in the previous version and the corresponding rows in the current version; however, other users in the workspace for the current version (but no users in the workspace for the previous version) can change values in these rows.</p>
<p><code>C</code> (carry-forward) mode locks rows in the current workspace with the same locking mode as the corresponding rows in the previous version. (If a row is not locked in the previous version, its corresponding row in the current version is not locked.)</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1065"></a>Usage Notes</p>
<p>This procedure affects Workspace Manager locking, which occurs in addition to any standard Oracle database locking. Workspace Manager locks can be used to prevent conflicts. When a user locks a row, the corresponding row in the parent workspace is also locked. Thus, when this workspace merges with the parent at merge time, it is guaranteed that this row will not have a conflict.</p>
<p>For information about Workspace Manager lock management, see <a href="long_intro.htm#i1006224">Section 1.3</a>.</p>
<p>Exclusive locking (<code>lockmode</code> value of <code>E</code>) prevents the use of <span class="italic">what-if</span> scenarios in which different values for one or more columns are tested. Thus, plan any testing of scenarios when exclusive locking is not in effect.</p>
<p>Locking is enabled at the user session level, and the locking mode stays in effect until any of the following occurs:</p>
<ul>
<li>
<p>The session goes to another workspace or connects to the database, in which case the locking mode is set to <code>C</code> (carry-forward) unless another locking mode has been specified using the <a href="#i91682">SetWorkspaceLockModeON</a> procedure.</p>
</li>
<li>
<p>The session executes the <a href="#i79467">SetLockingOFF</a> procedure.</p>
</li>
</ul>
<p>The locks remain in effect for the duration of the workspace, unless unlocked by the <a href="#i85344">UnlockRows</a> procedure. (Existing locks are not affected by the <a href="#i79467">SetLockingOFF</a> procedure.)</p>
<p>There are no specific privileges associated with locking. Any session that can go to a workspace can set locking on.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1066"></a>Examples</p>
<p>The following example sets exclusive locking on for the session.</p>
<pre>EXECUTE DBMS_WM.SetLockingON (&#39;E&#39;);
</pre>
<p>All rows locked by this user remain locked until the workspace is merged or rolled back.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i91423"></a>
<div id="ADWSM99396" class="refsect1">
<h2 class="refsect1"><a id="sthref1067"></a><a id="sthref1068"></a>SetMultiWorkspaces</h2>
<p>Makes the specified workspace or workspaces visible in the multiworkspace views for version-enabled tables.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1069"></a>Syntax</p>
<pre>DBMS_WM.SetMultiWorkspaces(
   workspaces  IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1070"></a>Parameters</p>
<div id="ADWSM99397" class="tblformal">
<p class="titleintable"><a id="sthref1071"></a><a id="sthref1072"></a>Table 4-76 SetMultiWorkspaces Procedure Parameters</p>
<table class="cellalignment5786" title="SetMultiWorkspaces Procedure Parameters" summary="SetMultiWorkspaces Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t80">Parameter</th>
<th class="cellalignment5787" id="r1c2-t80">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t80" headers="r1c1-t80">
<pre>workspaces
</pre></td>
<td class="cellalignment5788" headers="r2c1-t80 r1c2-t80">
<p>The workspace or workspaces for which information is to be added to the multiworkspace views (described in <a href="long_views.htm#i87680">Section 5.55</a>). The workspace names are case-sensitive.</p>
<p>To specify more than one workspace (but no more than eight), use a comma to separate workspace names. For example: <code>&#39;workspace1,workspace2&#39;</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1073"></a>Usage Notes</p>
<p>This procedure adds rows to the multiworkspace views (<span class="italic">xxx</span>_MW). See <a href="long_views.htm#i87680">Section 5.55</a> for information about the contents and uses of these views.</p>
<p>To see the names of workspaces visible in the multiworkspace views, use the <a href="#i96123">GetMultiWorkspaces</a> function.</p>
<p>An exception is raised if one or more of the following apply:</p>
<ul>
<li>
<p>The user does not have the privilege to go to one or more of the workspaces named in <code>workspaces</code>.</p>
</li>
<li>
<p>A workspace named in <code>workspaces</code> is not valid.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1074"></a>Examples</p>
<p>The following example adds information to the multiworkspace views for version-enabled tables in the <code>B_focus_1</code> workspace.</p>
<pre>EXECUTE DBMS_WM.SetMultiWorkspaces (&#39;B_focus_1&#39;);
</pre>
<p>The following example shows the use of the SetMultiWorkspaces procedure to view information without leaving the current workspace, and the use of the <a href="#i78730">GotoWorkspace</a> procedure to view the same information.</p>
<pre>-- These two pairs of statements select the same information.
EXECUTE DBMS_WM.SetMultiWorkspaces (&#39;myworkspace&#39;);
SELECT * from mytable_mw;

EXECUTE DBMS_WM.GotoWorkspace (&#39;myworkspace&#39;);
SELECT * from mytable;
</pre>
<p>To select only the rows modified in <code>myworkspace</code>, change the first <code>SELECT</code> statement in the preceding example to the following:</p>
<pre>SELECT * from mytable_mw WHERE wm_modified_by = &#39;myworkspace&#39;;
</pre>
<p>The following example shows the latest rows in the combined ancestor versions of the workspaces named <code>myworkspace</code> and <code>yourworkspace</code>. If the same row is selected from more than workspace, that row is shown only once. Note that there may be more than one row for a primary key because different workspaces might be selecting different versions of the primary key.</p>
<pre>EXECUTE DBMS_WM.SetMultiWorkspaces (&#39;myworkspace,yourworkspace&#39;);
SELECT * from mytable_mw;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i108545"></a>
<div id="ADWSM99398" class="refsect1">
<h2 class="refsect1"><a id="sthref1075"></a><a id="sthref1076"></a>SetSystemParameter</h2>
<p>Sets the value of a Workspace Manager system parameter.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1077"></a>Syntax</p>
<pre>DBMS_WM.SetSystemParameter(
   name   IN VARCHAR2,
   value  IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1078"></a>Parameters</p>
<div id="ADWSM99399" class="tblformal">
<p class="titleintable"><a id="sthref1079"></a><a id="sthref1080"></a>Table 4-77 SetSystemParameter Procedure Parameters</p>
<table class="cellalignment5786" title="SetSystemParameter Procedure Parameters" summary="SetSystemParameter Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t81">Parameter</th>
<th class="cellalignment5787" id="r1c2-t81">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t81" headers="r1c1-t81">
<pre>name
</pre></td>
<td class="cellalignment5788" headers="r2c1-t81 r1c2-t81">
<p>Name of the Workspace Manager system parameter for which to set the value. The name must be one of the parameter names listed in <a href="long_intro.htm#g1022080">Table 1-6</a> in <a href="long_intro.htm#i1017681">Section 1.5</a>.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t81" headers="r1c1-t81">
<pre>value
</pre></td>
<td class="cellalignment5788" headers="r3c1-t81 r1c2-t81">
<p>Value for the specified Workspace Manager system parameter, as explained in <a href="long_intro.htm#g1022080">Table 1-6</a> in <a href="long_intro.htm#i1017681">Section 1.5</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1081"></a>Usage Notes</p>
<p>For information about Workspace Manager system parameters, see <a href="long_intro.htm#i1017681">Section 1.5</a>.</p>
<p>If this procedure completes successfully, it commits the caller&#39;s open database transaction.</p>
<p>An exception is raised if one or more of the following apply:</p>
<ul>
<li>
<p>The user does not have the <code>WM_ADMIN</code> system privilege.</p>
</li>
<li>
<p>The system parameter name is not valid.</p>
</li>
<li>
<p>The value is not valid for the system parameter.</p>
</li>
<li>
<p>You tried to disallow capturing of events, and one or more types of events were being captured. You must first disable the capturing of all events (for example, by calling the <a href="#i113021">SetCaptureEvent</a> procedure and specifying <code>ALL_EVENTS</code> for <code>event_type</code> and <code>OFF</code> for <code>capture</code>).</p>
</li>
<li>
<p>You tried to disallow multiparent workspaces, and one or more multiparent workspaces already existed. You must first ensure that all workspaces have no more than one parent workspace (for example, by calling the <a href="#i109279">RemoveAsParentWorkspace</a> procedure as needed).</p>
</li>
<li>
<p>You tried to disallow nested table columns, and one or more tables with a nested table column were version-enabled. You must first disable versioning on all tables with nested table columns.</p>
</li>
<li>
<p>You tried to change <code>CR_WORKSPACE_MODE</code> or <code>NONCR_WORKSPACE_MODE</code> to <code>PESSIMISTIC_LOCKING</code>, and data exists in a non-<code>LIVE</code> workspace for the corresponding type of workspace (continually refreshed or not continually refreshed).</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1082"></a>Examples</p>
<p>The following example allows multiparent workspaces (described in <a href="long_intro.htm#i1018503">Section 1.1.10</a>) to be created.</p>
<pre>EXECUTE DBMS_WM.SetSystemParameter (&#39;ALLOW_MULTI_PARENT_WORKSPACES&#39;, &#39;ON&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i112201"></a>
<div id="ADWSM99400" class="refsect1">
<h2 class="refsect1"><a id="sthref1083"></a><a id="sthref1084"></a><a id="sthref1085"></a>SetTriggerEvents</h2>
<p>Enables the execution of a trigger for a specified set of triggering events. The trigger will not be executed for events not specified</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1086"></a>Syntax</p>
<pre>DBMS_WM.SetTriggerEvents(
   triggerName    IN VARCHAR2,
   triggerEvents  IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1087"></a>Parameters</p>
<div id="ADWSM99401" class="tblformal">
<p class="titleintable"><a id="sthref1088"></a><a id="sthref1089"></a>Table 4-78 SetTriggerEvents Procedure Parameters</p>
<table class="cellalignment5786" title="SetTriggerEvents Procedure Parameters" summary="SetTriggerEvents Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t82">Parameter</th>
<th class="cellalignment5787" id="r1c2-t82">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t82" headers="r1c1-t82">
<pre>triggerName
</pre></td>
<td class="cellalignment5788" headers="r2c1-t82 r1c2-t82">
<p>Name of the trigger for which to set one or more events.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t82" headers="r1c1-t82">
<pre>triggerEvents
</pre></td>
<td class="cellalignment5788" headers="r3c1-t82 r1c2-t82">
<p>A comma-delimited list of trigger event names, where each trigger event name is one of the following string constants:</p>
<p><code>DBMS_WM.DML</code>: Only for DML operations.</p>
<p><code>DBMS_WM.TABLE_IMPORT</code>: Import table (using the <a href="#i110329">Import</a> procedure).</p>
<p><code>DBMS_WM.TABLE_MERGE_W_REMOVE_DATA</code>: Merge table and remove data.</p>
<p><code>DBMS_WM.TABLE_MERGE_WO_REMOVE_DATA</code>: Merge table without removing data.</p>
<p><code>DBMS_WM.WORKSPACE_MERGE_W_REMOVE</code>: Merge workspace and remove the workspace</p>
<p><code>DBMS_WM.WORKSPACE_MERGE_WO_REMOVE</code>: Merge workspace without removing the workspace.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1090"></a>Usage Notes</p>
<p>For information about using triggers with Workspace Manager, see <a href="long_intro.htm#i1006223">Section 1.10</a>.</p>
<p>By default, user-defined triggers are executed for both DML and workspace events, unless the default behavior is changed by using the Workspace Manager system parameter <code>FIRE_TRIGGERS_FOR_NONDML_EVENTS</code> (described in <a href="long_intro.htm#i1017681">Section 1.5</a>). You can use the <code>SetTriggerEvents</code> procedure to override the current <code>FIRE_TRIGGERS_FOR_NONDML_EVENTS</code> setting for specific triggers; however, if you later change the value of the <code>FIRE_TRIGGERS_FOR_NONDML_EVENTS</code> system parameter, this new value overrides any setting previously specified using the <code>SetTriggerEvents</code> procedure.</p>
<p>If this procedure completes successfully, it commits the caller&#39;s open database transaction.</p>
<p>An exception is raised if one or more of the following apply:</p>
<ul>
<li>
<p>The user is not the trigger owner or does not have the <code>WM_ADMIN</code> system privilege.</p>
</li>
<li>
<p><code>triggerName</code> does not exist.</p>
</li>
<li>
<p>one or more <code>triggerEvents</code> values are not valid.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1091"></a>Examples</p>
<p>The following example enables the trigger <code>SCOTT.InsertTrigger</code> only for DML events.</p>
<pre>EXECUTE DBMS_WM.setTriggerEvents(&#39;SCOTT.InsertTrigger&#39;, DBMS_WM.DML);
</pre>
<p>The following example enables the trigger <code>SCOTT.InsertTrigger</code> for DML events and table merge operations.</p>
<pre>EXECUTE DBMS_WM.setTriggerEvents(&#39;SCOTT.InsertTrigger&#39;, dbms_wm.DML || &#39;,&#39; || 
                         dbms_wm.TABLE_MERGE_WO_REMOVE_DATA || &#39;,&#39; ||
                         dbms_wm.TABLE_MERGE_W_REMOVE_DATA);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i118627"></a>
<div id="ADWSM99402" class="refsect1">
<h2 class="refsect1"><a id="sthref1092"></a><a id="sthref1093"></a><a id="sthref1094"></a>SetValidTime</h2>
<p>Sets the session valid time period. (Valid time support is described in <a href="long_vt.htm#g1014747">Chapter 3</a>.)</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1095"></a>Syntax</p>
<pre>DBMS_WM.SetValidTime(
   validFrom IN TIMESTAMP WITH TIME ZONE DEFAULT DBMS_WM.CURRENT_TIME,
   validTill IN TIMESTAMP WITH TIME ZONE DEFAULT DBMS_WM.UNTIL_CHANGED);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1096"></a>Parameters</p>
<div id="ADWSM99403" class="tblformal">
<p class="titleintable"><a id="sthref1097"></a><a id="sthref1098"></a>Table 4-79 SetValidTime Procedure Parameters</p>
<table class="cellalignment5786" title="SetValidTime Procedure Parameters" summary="SetSystemParameter Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t83">Parameter</th>
<th class="cellalignment5787" id="r1c2-t83">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t83" headers="r1c1-t83">
<pre>validFrom
</pre></td>
<td class="cellalignment5788" headers="r2c1-t83 r1c2-t83">
<p>The start of the session valid time period. The default value is the current timestamp value.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t83" headers="r1c1-t83">
<pre>validTill
</pre></td>
<td class="cellalignment5788" headers="r3c1-t83 r1c2-t83">
<p>The end of the session valid time period. The default is that the time remains valid until the session valid time is changed.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1099"></a>Usage Notes</p>
<p>For information about Workspace Manager valid time support, see <a href="long_vt.htm#g1014747">Chapter 3</a>. <a href="long_vt.htm#i1010219">Section 3.2</a> explains how <code>validFrom</code> and <code>validTill</code> values are interpreted.</p>
<p>If this procedure is not invoked in the session or if it is invoked with no parameters, all rows that are valid at the current time are considered valid, and the valid time period is considered to be from the current time forward without limit.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1100"></a>Examples</p>
<p>The following example sets the session valid time to include all of the year 2003.</p>
<pre>EXECUTE DBMS_WM.SetValidTime(TO_DATE(&#39;01-01-2003&#39;, &#39;MM-DD-YYYY&#39;), TO_DATE(&#39;01-01-2004&#39;, &#39;MM-DD-YYYY&#39;));
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACHJADG"></a>
<div id="ADWSM99404" class="refsect1">
<h2 class="refsect1"><a id="sthref1101"></a><a id="sthref1102"></a><a id="sthref1103"></a>SetValidTimeFilterOFF</h2>
<p>Removes the valid time filter for the current session.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1104"></a>Syntax</p>
<pre>DBMS_WM.SetValidTimeFilterOFF();
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1105"></a>Parameters</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1106"></a>Usage Notes</p>
<p>This procedure reverses the effect of the<a href="#CACCHFII">SetValidTimeFilterON</a> procedure, and causes the previously defined valid time filter to be ignored for queries against tables with valid time support. Workspace Manager valid time support is explained in <a href="long_vt.htm#g1014747">Chapter 3</a>.</p>
<p>See also the Usage Notes for the <a href="#CACCHFII">SetValidTimeFilterON</a> procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1107"></a>Examples</p>
<p>The following example removes the valid time filter for the current session.</p>
<pre>EXECUTE DBMS_WM.SetValidTimeFilterOFF;<a id="sthref1108"></a>
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACCHFII"></a>
<div id="ADWSM99405" class="refsect1">
<h2 class="refsect1"><a id="sthref1109"></a><a id="sthref1110"></a><a id="sthref1111"></a>SetValidTimeFilterON</h2>
<p>Sets a valid time filter for the current session (that is, a time to be applied to version-enabled tables.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1112"></a>Syntax</p>
<pre>DBMS_WM.SetValidTimeFilterON(
   filtertime  IN TIMESTAMP WITH TIME ZONE DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1113"></a>Parameters</p>
<div id="ADWSM99406" class="tblformal">
<p class="titleintable"><a id="sthref1114"></a><a id="sthref1115"></a>Table 4-80 SetValidTimeFilterON Procedure Parameters</p>
<table class="cellalignment5786" title="SetValidTimeFilterON Procedure Parameters" summary="SetMultiWorkspaces Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t84">Parameter</th>
<th class="cellalignment5787" id="r1c2-t84">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t84" headers="r1c1-t84">
<pre>filtertime
</pre></td>
<td class="cellalignment5788" headers="r2c1-t84 r1c2-t84">
<p>Date to be used as a filter when querying version-enabled tables that have valid time support.</p>
<p>The default value is the current time; that is, each select operation on a version-enabled table with valid time support returns data that is valid as of the current time.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1116"></a>Usage Notes</p>
<p>A <span class="bold">valid time filter</span> is a time that is applied to queries against version-enabled tables that have valid time support. When a valid time filter is set for the current session, only rows that are valid for the specified time are returned. Workspace Manager valid time support is explained in <a href="long_vt.htm#g1014747">Chapter 3</a>.</p>
<p>The purpose for setting a valid time filter is usually to work with only one row for a given primary key value. For example, assume that for the current valid time period, the session has two rows for employee Adams: the first row is valid from 01-Mar-2004 to 30-Apr-2005, and the second row is valid from 01-May-2005 until it is changed. If you set the valid time filter to 01-Jan-2005 and select all rows for Adams, only the first row (the one valid from 01-Mar-2004 to 30-Apr-2005) is returned. If you remove the valid time filter and select all rows for Adams, both rows are returned.</p>
<p>The <code>filtertime</code> value must be in the valid time range for the session. You can set the valid time range using the <a href="#i118627">SetValidTime</a> procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1117"></a>Examples</p>
<p>The following example sets a valid time filter so that for queries against version-enabled tables with valid time support, only rows that are valid on January 1, 2005 are returned.</p>
<pre>EXECUTE DBMS_WM.SetValidTimeFilterOn(TO_DATE(&#39;2005-01-01&#39;, &#39;yyyy-mm-dd&#39;));
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACDJEAI"></a>
<div id="ADWSM99407" class="refsect1">
<h2 class="refsect1"><a id="sthref1118"></a><a id="sthref1119"></a><a id="sthref1120"></a><a id="sthref1121"></a>SetWMValidUpdateModeOFF</h2>
<p>Disables sequenced and nonsequenced update operations and sequenced delete operations on tables that have valid time support.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1122"></a>Syntax</p>
<pre>DBMS_WM.SetWMValidUpdateModeOFF();
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1123"></a>Parameters</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1124"></a>Usage Notes</p>
<p>This procedure disables sequenced and nonsequenced update operations and sequenced delete operations on tables that have valid time support. Workspace Manager valid time support is explained in <a href="long_vt.htm#g1014747">Chapter 3</a>; sequenced and nonsequenced update operations and sequenced delete operations are explained in <a href="long_vt.htm#CHDFJHIC">Section 3.6.2.1</a>.</p>
<p>When sequenced update and delete operations are enabled, when an update or delete operation is performed on a table with valid time support, the session&#39;s current valid time period is used so that only rows valid during that period are updated or deleted. However, calling the SetWMValidUpdateModeOFF procedure enables all row data to be updated or deleted, regardless of the valid time period, and causes WM_VALID column values in the table not to be updated. (This procedure does not affect insert or query operations on tables with valid time support.)</p>
<p>See also the Usage Notes for the <a href="#CACJBJEC">SetWMValidUpdateModeON</a> procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1125"></a>Examples</p>
<p>The following example disables sequenced and nonsequenced update operations and sequenced delete operations on tables that have valid time support.</p>
<pre>EXECUTE DBMS_WM.SetWMValidUpdateModeOFF;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACJBJEC"></a>
<div id="ADWSM99408" class="refsect1">
<h2 class="refsect1"><a id="sthref1126"></a><a id="sthref1127"></a><a id="sthref1128"></a><a id="sthref1129"></a>SetWMValidUpdateModeON</h2>
<p>Enables sequenced and nonsequenced update operations and sequenced delete operations on tables that have valid time support.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1130"></a>Syntax</p>
<pre>DBMS_WM.SetWMValidUpdateModeON();
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1131"></a>Parameters</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1132"></a>Usage Notes</p>
<p>This procedure enables sequenced and nonsequenced update operations and sequenced delete operations on tables that have valid time support. Sequenced update and delete operations are enabled when a table is version-enabled with valid time support or when valid time support is added to a version-enabled table; however, sequenced update and delete operations can be disabled using the <a href="#CACDJEAI">SetWMValidUpdateModeOFF</a> procedure.</p>
<p>Workspace Manager valid time support is explained in <a href="long_vt.htm#g1014747">Chapter 3</a>; sequenced and nonsequenced update operations and sequenced delete operations are explained in <a href="long_vt.htm#CHDCHJFD">Section 3.6.2.2</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1133"></a>Examples</p>
<p>The following example enables sequenced and nonsequenced update operations and sequenced delete operations on tables that have valid time support. It reverses the effect of the <a href="#CACDJEAI">SetWMValidUpdateModeOFF</a> procedure.</p>
<pre>EXECUTE DBMS_WM.SetWMValidUpdateModeON;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i89852"></a>
<div id="ADWSM99409" class="refsect1">
<h2 class="refsect1"><a id="sthref1134"></a><a id="sthref1135"></a><a id="sthref1136"></a>SetWoOverwriteOFF</h2>
<p>Disables the <code>VIEW_WO_OVERWRITE</code> history option that was enabled by the <a href="#i80309">EnableVersioning</a> or <a href="#i89736">SetWoOverwriteON</a> procedure, changing the option to <code>VIEW_W_OVERWRITE</code> (<span class="italic">with overwrite</span>).</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1137"></a>Syntax</p>
<pre>DBMS_WM.SetWoOverwriteOFF();
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1138"></a>Parameters</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1139"></a>Usage Notes</p>
<p>This procedure affects the recording of history information in the views named &lt;table_name&gt;_HIST by changing the <code>VIEW_WO_OVERWRITE</code> option to <code>VIEW_W_OVERWRITE</code>. That is, from this point forward, the views show only the most recent modifications to the same version of the table. A history of modifications to the version is not maintained; that is, subsequent changes to a row in the same version overwrite earlier changes.</p>
<p>This procedure affects only tables that were version-enabled with the <code>hist</code> parameter set to <code>VIEW_WO_OVERWRITE</code> in the call to the <a href="#i80309">EnableVersioning</a> procedure.</p>
<p>The &lt;table_name&gt;_HIST views are described in <a href="long_views.htm#i87609">Section 5.53</a>. The <code>VIEW_WO_OVERWRITE</code> and <code>VIEW_W_OVERWRITE</code> options are further described in the description of the <a href="#i80309">EnableVersioning</a> procedure.</p>
<p>The history option affects the behavior of the <a href="#i90546">GotoDate</a> procedure. See the Usage Notes for that procedure.</p>
<p>The result of the SetWoOverwriteOFF procedure remains in effect only for the duration of the current session. To reverse the effect of this procedure, use the <a href="#i89736">SetWoOverwriteON</a> procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1140"></a>Examples</p>
<p>The following example disables the <code>VIEW_WO_OVERWRITE</code> history option.</p>
<pre>EXECUTE DBMS_WM.SetWoOverwriteOFF;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i89736"></a>
<div id="ADWSM99410" class="refsect1">
<h2 class="refsect1"><a id="sthref1141"></a><a id="sthref1142"></a><a id="sthref1143"></a>SetWoOverwriteON</h2>
<p>Enables the <code>VIEW_WO_OVERWRITE</code> history option that was disabled by the <a href="#i89852">SetWoOverwriteOFF</a> procedure.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1144"></a>Syntax</p>
<pre>DBMS_WM.SetWoOverwriteON();
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1145"></a>Parameters</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1146"></a>Usage Notes</p>
<p>This procedure affects the recording of history information in the views named &lt;table_name&gt;_HIST by changing the <code>VIEW_W_OVERWRITE</code> option to <code>VIEW_WO_OVERWRITE</code> (<span class="italic">without overwrite</span>). That is, from this point forward, the views show all modifications to the same version of the table. A history of modifications to the version is maintained; that is, subsequent changes to a row in the same version do not overwrite earlier changes.</p>
<p>This procedure affects only tables that were affected by a previous call to the <a href="#i89852">SetWoOverwriteOFF</a> procedure.</p>
<p>The &lt;table_name&gt;_HIST views are described in <a href="long_views.htm#i87609">Section 5.53</a>. The <code>VIEW_WO_OVERWRITE</code> and <code>VIEW_W_OVERWRITE</code> options are further described in the description of the <a href="#i80309">EnableVersioning</a> procedure.</p>
<p>The <code>VIEW_WO_OVERWRITE</code> history option can be overridden when a workspace is compressed by specifying the <code>compress_view_wo_overwrite</code> parameter as <code>TRUE</code> with the <a href="#i86067">CompressWorkspace</a> or <a href="#i86068">CompressWorkspaceTree</a> procedure.</p>
<p>The history option affects the behavior of the <a href="#i90546">GotoDate</a> procedure. See the Usage Notes for that procedure.</p>
<p>To reverse the effect of this procedure, use the <a href="#i89852">SetWoOverwriteOFF</a> procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1147"></a>Examples</p>
<p>The following example enables the <code>VIEW_WO_OVERWRITE</code> history option.</p>
<pre>EXECUTE DBMS_WM.SetWoOverwriteON;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i107704"></a>
<div id="ADWSM99411" class="refsect1">
<h2 class="refsect1"><a id="sthref1148"></a><a id="sthref1149"></a><a id="sthref1150"></a>SetWorkspaceLockModeOFF</h2>
<p>Disables Workspace Manager locking for the specified workspace.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1151"></a>Syntax</p>
<pre>DBMS_WM.SetWorkspaceLockModeOFF(
   workspace    IN VARCHAR2,
   auto_commit  IN BOOLEAN DEFAULT TRUE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1152"></a>Parameters</p>
<div id="ADWSM99412" class="tblformal">
<p class="titleintable"><a id="sthref1153"></a><a id="sthref1154"></a>Table 4-81 SetWorkspaceLockModeOFF Procedure Parameters</p>
<table class="cellalignment5786" title="SetWorkspaceLockModeOFF Procedure Parameters" summary="SetWorkspaceLockModeOFF Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t85">Parameter</th>
<th class="cellalignment5787" id="r1c2-t85">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t85" headers="r1c1-t85">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r2c1-t85 r1c2-t85">
<p>Name of the workspace for which to set the locking mode off. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t85" headers="r1c1-t85">
<pre>auto_commit
</pre></td>
<td class="cellalignment5788" headers="r3c1-t85 r1c2-t85">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> (the default) causes the operation to be executed as an autonomous database transaction that will be committed when it finishes.</p>
<p><code>FALSE</code> causes the operation to be executed as part of the caller&#39;s open database transaction (if one exists). If there is no open database transaction, the operation is executed in a new database transaction. In either case, the caller is responsible for committing the transaction. For more information, see <a href="long_intro.htm#i1014370">Section 1.1.8</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1155"></a>Usage Notes</p>
<p>This procedure turns off Workspace Manager locking that was set on by the <a href="#i91682">SetWorkspaceLockModeON</a> procedure. Existing locks applied by this session remain locked. All new changes by this session or a subsequent session are not locked, unless the session turns locking on by executing the <a href="#i79459">SetLockingON</a> procedure.</p>
<p>An exception is raised if any of the following occurs:</p>
<ul>
<li>
<p>The user does not have the <code>WM_ADMIN</code> system privilege or is not the owner of <code>workspace</code>.</p>
</li>
<li>
<p><code>auto_commit</code> is <code>TRUE</code> and an open transaction exists.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1156"></a>Examples</p>
<p>The following example sets locking off for the workspace named <code>NEWWORKSPACE</code>.</p>
<pre>EXECUTE DBMS_WM.SetWorkspaceLockModeOFF(&#39;NEWWORKSPACE&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i91682"></a>
<div id="ADWSM99413" class="refsect1">
<h2 class="refsect1"><a id="sthref1157"></a><a id="sthref1158"></a><a id="sthref1159"></a>SetWorkspaceLockModeON</h2>
<p>Enables Workspace Manager locking for the specified workspace.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1160"></a>Syntax</p>
<pre>DBMS_WM.SetWorkspaceLockModeON(
   workspace    IN VARCHAR2,
   lockmode     IN VARCHAR2,
   override     IN BOOLEAN DEFAULT FALSE,
   auto_commit  IN BOOLEAN DEFAULT TRUE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1161"></a>Parameters</p>
<div id="ADWSM99414" class="tblformal">
<p class="titleintable"><a id="sthref1162"></a><a id="sthref1163"></a>Table 4-82 SetWorkspaceLockModeON Procedure Parameters</p>
<table class="cellalignment5786" title="SetWorkspaceLockModeON Procedure Parameters" summary="SetWorkspaceLockModeON Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t86">Parameter</th>
<th class="cellalignment5787" id="r1c2-t86">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t86" headers="r1c1-t86">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r2c1-t86 r1c2-t86">
<p>Name of the workspace for which to enable Workspace Manager locking. The name is case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t86" headers="r1c1-t86">
<pre>lockmode
</pre></td>
<td class="cellalignment5788" headers="r3c1-t86 r1c2-t86">
<p>Default locking mode for row-level locking. Must be <code>E</code>, <code>WE</code>, <code>VE</code>, <code>S</code>, or <code>C</code>.</p>
<p><code>D</code> (disregard) mode disregards all locks. Any row can be updated in the workspace, even if it is locked by another workspace or the workspace is within a pessimistic setting. The consequences of using this mode are: (1) The workspace for which this mode is set cannot have its lockmode turned off (using <a href="#i79467">SetLockingOFF</a>) or changed (using <a href="#i79459">SetLockingON</a>) after rows have been modified. (2) The workspace cannot be merged. (3) The workspace cannot be refreshed. (4) The <code>override</code> option must be set to <code>false</code>. (5) When any child workspace is created from this workspace, the new workspace will inherit this same lockmode along with its restrictions.</p>
<p><code>E</code> (exclusive) mode locks the rows in the parent workspace and the corresponding rows in the current workspace; no other users in either workspace can change any values.</p>
<p><code>WE</code> (workspace-exclusive) mode locks the rows in the previous version and the corresponding rows in the current version such that only the user that set the lock can change the values in the current workspace; however, other users in other workspaces can change the values.</p>
<p><code>VE</code> (version-exclusive) mode locks the rows in the previous version and the corresponding rows in the current version such that only the user that set the lock can change the values; no other users (in any workspace) can change the values.</p>
<p><code>S</code> (shared) mode locks the rows in the parent workspace and the corresponding rows in the current workspace; however, other users in the current workspace (but no users in the parent workspace) can change values in these rows.</p>
<p><code>C</code> (carry-forward) mode locks rows in the current workspace with the same locking mode as the corresponding rows in the parent workspace. (If a row is not locked in the parent workspace, its corresponding row in the child workspace is not locked.)</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t86" headers="r1c1-t86">
<pre>override
</pre></td>
<td class="cellalignment5788" headers="r4c1-t86 r1c2-t86">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>)</p>
<p><code>TRUE</code> allows a session in the workspace to change the <code>lockmode</code> value by using the <a href="#i79459">SetLockingON</a> and <a href="#i79467">SetLockingOFF</a> procedures.</p>
<p><code>FALSE</code> (the default) prevents a session in the workspace from changing the <code>lockmode</code> value.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r5c1-t86" headers="r1c1-t86">
<pre>auto_commit
</pre></td>
<td class="cellalignment5788" headers="r5c1-t86 r1c2-t86">
<p>A Boolean value (<code>TRUE</code> or <code>FALSE</code>).</p>
<p><code>TRUE</code> (the default) causes the operation to be executed as an autonomous database transaction that will be committed when it finishes.</p>
<p><code>FALSE</code> causes the operation to be executed as part of the caller&#39;s open database transaction (if one exists). If there is no open database transaction, the operation is executed in a new database transaction. In either case, the caller is responsible for committing the transaction. For more information, see <a href="long_intro.htm#i1014370">Section 1.1.8</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1164"></a>Usage Notes</p>
<p>This procedure affects Workspace Manager locking, which occurs in addition to any standard Oracle database locking. Workspace Manager locks can be used to prevent conflicts. When a user locks a row, the corresponding row in the parent workspace is also locked. Thus, when this workspace merges with the parent at merge time, it is guaranteed that this row will not have a conflict.</p>
<p>For information about Workspace Manager lock management, see <a href="long_intro.htm#i1006224">Section 1.3</a>.</p>
<p>The main use for the &#34;Disregard&#34; locking mode (<code>lockmode</code> value of <code>D</code>) is so that a workspace can be completely isolated from the rest of the workspaces in the system and is free to update any rows it wants. It turns the workspace into a test (&#34;sandbox&#34;) workspace where anything can be tested, but because it cannot merge or refresh, the workspace is unable to propagate its changes to other workspaces. It is meant for testing only, after which the workspace can be removed.</p>
<p>Exclusive locking (<code>lockmode</code> value of <code>E</code>) prevents the use of <span class="italic">what-if</span> scenarios in which different values for one or more columns are tested. Thus, plan any testing of scenarios when exclusive locking is not in effect.</p>
<p>If the override parameter value is <code>TRUE</code>, locking can also be enabled and disabled at the user session level with the <a href="#i79459">SetLockingON</a> and <a href="#i79467">SetLockingOFF</a> procedures, respectively.</p>
<p>All new changes by this session or a subsequent session are locked, unless the session turns locking off by executing the <a href="#i79467">SetLockingOFF</a> procedure.</p>
<p>This procedure requires that the user either have the <code>WM_ADMIN</code> system privilege or be the owner of the workspace. The owner of the workspace is the user that executed the procedure, not the user that has the active permissions at the time the procedure was being executed.</p>
<p>An exception is raised if any of the following occurs:</p>
<ul>
<li>
<p>The user does not have the <code>WM_ADMIN</code> system privilege or is not the owner of <code>workspace</code>.</p>
</li>
<li>
<p><code>auto_commit</code> is <code>TRUE</code> and an open transaction exists.</p>
</li>
<li>
<p><code>lockmode</code> is <code>D</code> and the workspace either is continually refreshed or is the <code>LIVE</code> workspace.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1165"></a>Examples</p>
<p>The following example sets exclusive locking on for the workspace named <code>NEWWORKSPACE</code>.</p>
<pre>EXECUTE DBMS_WM.SetWorkspaceLockModeON (&#39;NEWWORKSPACE&#39;, &#39;E&#39;);
</pre>
<p>All locked rows remain locked until the workspace is merged or rolled back.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i99848"></a>
<div id="ADWSM99415" class="refsect1">
<h2 class="refsect1"><a id="sthref1166"></a><a id="sthref1167"></a><a id="sthref1168"></a>SynchronizeSite</h2>
<p>Brings the local site (the old writer site) up to date in the Workspace Manager replication environment after the writer site was moved using the <a href="#i99822">RelocateWriterSite</a> procedure.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1169"></a>Syntax</p>
<pre>DBMS_WM.SynchronizeSite(
   newwritersite  IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1170"></a>Parameters</p>
<div id="ADWSM99416" class="tblformal">
<p class="titleintable"><a id="sthref1171"></a><a id="sthref1172"></a>Table 4-83 SynchronizeSite Procedure Parameters</p>
<table class="cellalignment5786" title="SynchronizeSite Procedure Parameters" summary="SynchronizeSite Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t87">Parameter</th>
<th class="cellalignment5787" id="r1c2-t87">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t87" headers="r1c1-t87">
<pre>newwritersite
</pre></td>
<td class="cellalignment5788" headers="r2c1-t87 r1c2-t87">
<p>Name of the new writer site (database link) with which the local site needs to be brought up to date.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1173"></a>Usage Notes</p>
<p>To use this procedure, you must understand how replication applies to Workspace Manager objects, as explained in <a href="long_repl.htm#g635775">Appendix C</a>. You must also understand the major Oracle replication concepts and techniques, which are documented in <a class="olink REPLN" href="../REPLN/toc.htm"><span class="italic">Oracle Database Advanced Replication</span></a> and <a class="olink REPMA" href="../REPMA/toc.htm"><span class="italic">Oracle Database Advanced Replication Management API Reference</span></a>.</p>
<p>You must execute this procedure as the replication administrator user.</p>
<p>You must execute this procedure on the old writer site if you specified the <code>oldwritersiteavailable</code> parameter as <code>FALSE</code> when you executed the <a href="#i99822">RelocateWriterSite</a> procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1174"></a>Examples</p>
<p>The following example brings the local system up to date with the new writer site (<code>BACKUP-SITE1.EXAMPLE.COM</code>) in the Workspace Manager replication environment.</p>
<pre>DBMS_WM.SynchronizeSite(&#39;BACKUP-SITE1.EXAMPLE.COM&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i85162"></a>
<div id="ADWSM99417" class="refsect1">
<h2 class="refsect1"><a id="sthref1175"></a><a id="sthref1176"></a><a id="sthref1177"></a><a id="sthref1178"></a>UnfreezeWorkspace</h2>
<p>Enables access and changes to a workspace, reversing the effect of the <a href="#i79088">FreezeWorkspace</a> procedure.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1179"></a>Syntax</p>
<pre>DBMS_WM.UnfreezeWorkspace(
   workspace  IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1180"></a>Parameters</p>
<div id="ADWSM99418" class="tblformal">
<p class="titleintable"><a id="sthref1181"></a><a id="sthref1182"></a>Table 4-84 UnfreezeWorkspace Procedure Parameters</p>
<table class="cellalignment5786" title="UnfreezeWorkspace Procedure Parameters" summary="UnfreezeWorkspace Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t88">Parameter</th>
<th class="cellalignment5787" id="r1c2-t88">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t88" headers="r1c1-t88">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r2c1-t88 r1c2-t88">
<p>Name of the workspace. The name is case-sensitive.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1183"></a>Usage Notes</p>
<p>The operation fails if any sessions are in <code>workspace</code>.</p>
<p>You can unfreeze a workspace only if one or more of the following apply:</p>
<ul>
<li>
<p>You are the owner of the specified workspace.</p>
</li>
<li>
<p>You have the <code>WM_ADMIN</code> system privilege, the <code>FREEZE_ANY_WORKSPACE</code> privilege, or the <code>FREEZE_WORKSPACE</code> privilege for the specified workspace.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1184"></a>Examples</p>
<p>The following example unfreezes the <code>NEWWORKSPACE</code> workspace.</p>
<pre>EXECUTE DBMS_WM.UnfreezeWorkspace (&#39;NEWWORKSPACE&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i85344"></a>
<div id="ADWSM99419" class="refsect1">
<h2 class="refsect1"><a id="sthref1185"></a><a id="sthref1186"></a><a id="sthref1187"></a><a id="sthref1188"></a>UnlockRows</h2>
<p>Enables access to versioned rows in a specified table and to corresponding rows in the parent workspace.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1189"></a>Syntax</p>
<pre>DBMS_WM.UnlockRows(
   workspace     IN VARCHAR2,
   table_name    IN VARCHAR2,
   where_clause  IN VARCHAR2 DEFAULT &#39;&#39;,
   all_or_user   IN VARCHAR2 DEFAULT &#39;USER&#39;,
   lock_mode     IN VARCHAR2 DEFAULT &#39;ES&#39;,
   Xmin          IN NUMBER DEFAULT NULL,
   Ymin          IN NUMBER DEFAULT NULL,
   Xmax          IN NUMBER DEFAULT NULL,
   Ymax          IN NUMBER DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1190"></a>Parameters</p>
<div id="ADWSM99420" class="tblformal">
<p class="titleintable"><a id="sthref1191"></a><a id="sthref1192"></a>Table 4-85 UnlockRows Procedure Parameters</p>
<table class="cellalignment5786" title="UnlockRows Procedure Parameters" summary="UnlockRows Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t89">Parameter</th>
<th class="cellalignment5787" id="r1c2-t89">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t89" headers="r1c1-t89">
<pre>workspace
</pre></td>
<td class="cellalignment5788" headers="r2c1-t89 r1c2-t89">
<p>Name of the workspace: locked rows in this workspace and corresponding rows in the parent workspace will be unlocked, as specified in the remaining parameters. The name is case-sensitive.</p>
<p>A value of <code>NONE</code> can be used if <code>lock_mode</code> is set to <code>VE</code> (version-exclusive). This causes rows locked by any workspace to be unlocked.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t89" headers="r1c1-t89">
<pre>table_name
</pre></td>
<td class="cellalignment5788" headers="r3c1-t89 r1c2-t89">
<p>Name of the table or (if <code>Xmin</code>, <code>Ymin</code>, <code>Xmax</code>, and <code>Ymax</code> are specified) Spatial and Graph topology in which rows are to be unlocked. The name is not case-sensitive.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t89" headers="r1c1-t89">
<pre>where_clause
</pre></td>
<td class="cellalignment5788" headers="r4c1-t89 r1c2-t89">
<p>The <code>WHERE</code> clause (excluding the <code>WHERE</code> keyword) identifying the rows to be unlocked. Example: <code>&#39;department_id = 20&#39;</code></p>
<p>Only primary key columns can be specified in the <code>WHERE</code> clause, except in a subquery. The subquery can refer to columns that are not primary keys, but it cannot refer to a version-enabled table.</p>
<p>If the <code>where_clause</code> parameter is not specified, all rows in <code>table_name</code> are made accessible.</p>
<p>Do not specify the <code>where_clause</code> parameter if <code>table_name</code> specifies a Spatial and Graph topology name.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r5c1-t89" headers="r1c1-t89">
<pre>all_or_user
</pre></td>
<td class="cellalignment5788" headers="r5c1-t89 r1c2-t89">
<p>Scope of the request: <code>ALL</code> or <code>USER</code>.</p>
<p><code>ALL</code>: All locks accessible by the user in the specified workspace are considered.</p>
<p><code>USER</code> (default): Only locks owned by the user in the specified workspace are considered.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r6c1-t89" headers="r1c1-t89">
<pre>lock_mode
</pre></td>
<td class="cellalignment5788" headers="r6c1-t89 r1c2-t89">
<p>Locking mode: <code>E</code>, <code>WE</code>, <code>VE</code>, <code>S</code>, or <code>ES</code> (default).</p>
<p><code>E</code> (exclusive): Only exclusive mode locks are considered.</p>
<p><code>WE</code> (workspace-exclusive): Only workspace-exclusive mode locks are considered.</p>
<p><code>VE</code> (version-exclusive): Only version-exclusive mode locks are considered.</p>
<p><code>S</code> (shared): Only shared mode locks are considered.</p>
<p><code>ES</code> (exclusive and shared: the default): Both exclusive mode and shared mode locks are considered.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r7c1-t89" headers="r1c1-t89">
<pre>Xmin, Ymin
</pre></td>
<td class="cellalignment5788" headers="r7c1-t89 r1c2-t89">
<p>For Oracle Spatial and Graph topologies only (see <a href="long_intro.htm#i1020591">Section 1.14.1</a>), the X and Y coordinate values, respectively, of the lower-left corner of the window containing the rows to be locked.You must specify these parameters if you specified a topology name for <code>table_name</code>; otherwise, do not specify these parameters.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r8c1-t89" headers="r1c1-t89">
<pre>Xmax, Ymax
</pre></td>
<td class="cellalignment5788" headers="r8c1-t89 r1c2-t89">
<p>For Oracle Spatial and Graph topologies only (see <a href="long_intro.htm#i1020591">Section 1.14.1</a>), the X and Y coordinate values, respectively, of the upper-right corner of the window containing the rows to be locked.You must specify these parameters if you specified a topology name for <code>table_name</code>; otherwise, do not specify these parameters.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1193"></a>Usage Notes</p>
<p>This procedure affects Workspace Manager locking, which occurs in addition to any standard Oracle database locking. For an explanation of Workspace Manager locking, see <a href="long_intro.htm#i1006224">Section 1.3</a>.</p>
<p>This procedure unlocks rows that were previously locked (see the <a href="#i90778">LockRows</a> procedure). It does not affect whether Workspace Manager locking is set on or off (determined by the <a href="#i79459">SetLockingON</a> and <a href="#i79467">SetLockingOFF</a> procedures).</p>
<p>For information about Workspace Manager locking for tables in an Oracle Spatial and Graph topology, see <a href="long_intro.htm#i1020591">Section 1.14.1</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1194"></a>Examples</p>
<p>The following example unlocks the <code>EMPLOYEES</code> table where <code>last_name = &#39;Smith&#39;</code> in the <code>NEWWORKSPACE</code> workspace.</p>
<pre>EXECUTE DBMS_WM.UnlockRows (&#39;employees&#39;, &#39;NEWWORKSPACE&#39;, &#39;last_name = &#39;&#39;Smith&#39;&#39;&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACCDIJB"></a>
<div id="ADWSM99421" class="refsect1">
<h2 class="refsect1"><a id="sthref1195"></a><a id="sthref1196"></a><a id="sthref1197"></a>UseDefaultValuesForNulls</h2>
<p>Determines whether or not Workspace Manager, for the current session, uses the default value for a column when the user either specifies a null value or does not specify any value for the column in an insert operation on a version-enabled table.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1198"></a>Syntax</p>
<pre>DBMS_WM.UseDefaultValuesForNulls(
   mode_var IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1199"></a>Parameters</p>
<div id="ADWSM99524" class="tblformal">
<p class="titleintable"><a id="sthref1200"></a><a id="sthref1201"></a>Table 4-86 UseDefaultValuesForNulls Procedure Parameters</p>
<table class="cellalignment5786" title="UseDefaultValuesForNulls Procedure Parameters" summary="UseDefaultValuesForNulls Procedure Parameters" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t90">Parameter</th>
<th class="cellalignment5787" id="r1c2-t90">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t90" headers="r1c1-t90">
<pre>mode_var
</pre></td>
<td class="cellalignment5788" headers="r2c1-t90 r1c2-t90">
<p>Mode for handling the insertion of null values: <code>OFF</code> or <code>ON</code>.</p>
<p><code>OFF</code>: A null value is inserted into the column. (This is the normal Oracle behavior.)</p>
<p><code>ON</code>: The default value for the column is inserted into the column.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1202"></a>Usage Notes</p>
<p>This procedure affects what Workspace Manager does only if an INSERT statement into a version-enabled table explicitly specifies NULL for a column when the column has been defined as having a default value or leaves the column unspecified. For example, assume the following table definition:</p>
<pre>CREATE TABLE players (name VARCHAR2(20), rating NUMBER DEFAULT 10);
</pre>
<p>If the <code>PLAYERS</code> table is version-enabled and if you have not executed this procedure with a <code>mode_var</code> parameter value of <code>OFF</code>, the following statement inserts a row for <code>Smith</code> with a null <code>RATING</code> value:</p>
<p>If the <code>PLAYERS</code> table is version-enabled and if you have executed this procedure with a <code>mode_var</code> parameter value of <code>OFF</code>, either of the following statements would insert a row for <code>Smith</code> with a null <code>RATING</code> value</p>
<pre>INSERT INTO players VALUES (&#39;Smith&#39;, NULL);
INSERT INTO players(name) VALUES (&#39;Smith&#39;);
</pre>
<p>However, if you have executed the UseDefaultValuesForNulls procedure with a <code>mode_var</code> parameter value of <code>ON</code>, both statements insert a row for <code>Smith</code> with a <code>RATING</code> value of 10. If this procedure is not executed in a session, the default behavior is the same as if <code>mode_var</code> was specified as <code>ON</code>.</p>
<p>If the INSERT statement does not specify a value for a column that has a default value, the default value is inserted regardless of whether or not you previously called the UseDefaultValuesForNulls procedure or what the <code>mode_var</code> parameter value was. For example, the following statement always inserts a row for <code>Smith</code> with a <code>RATING</code> value of 10:</p>
<pre>INSERT INTO players VALUES (&#39;Smith&#39;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1203"></a>Examples</p>
<p>The following example causes the column default value to be used during the rest of the current session whenever an INSERT statement into a version-enabled table specifies a null value for a column that has a default value or the column is left unspecified.</p>
<pre>EXECUTE DBMS_WM.UseDefaultValuesForNulls(&#39;ON&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment5779">
<tr>
<td class="cellalignment5788">
<table class="cellalignment5784">
<tr>
<td class="cellalignment5783"><a href="long_prtref.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5783"><a href="long_views.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2000, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment5790">
<table class="cellalignment5782">
<tr>
<td class="cellalignment5783"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5783"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5783"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5783"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5783"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5783"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>