<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-1465"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Workspace%20Manager%20Valid%20Time%20Support"></a><title>Workspace Manager Valid Time Support</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="description" content="Provides usage and reference information about Oracle Workspace Manager, which enables applications to create workspaces and group different versions of table row values in different workspaces."/>
<meta name="dcterms.created" content="2014-06-30T13:47:16Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Workspace Manager Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E49170-01"/>
<meta name="dcterms.isVersionOf" content="ADWSM"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2000, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="long_events.htm" title="Previous" type="text/html"/>
<link rel="Next" href="long_prtref.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E49170-01.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">11/21</span> <!-- End Header -->
<div id="ADWSM035" class="chapter"><a id="g1014747"></a> <a id="i1010463"></a>
<h1 class="chapter"><span class="secnum">3</span> Workspace <a id="sthref251"></a>Manager Valid Time Support</h1>
<p>This chapter describes the support for valid time, also known as effective dating, with version-enabled tables. It contains the following major sections:</p>
<ul>
<li>
<p><a href="#CHDDIGII">Section 3.1, &#34;Valid Time Support: Introduction and Example&#34;</a></p>
</li>
<li>
<p><a href="#i1010219">Section 3.2, &#34;WM_PERIOD Data Type&#34;</a></p>
</li>
<li>
<p><a href="#CHDIJBFH">Section 3.3, &#34;Valid Time Constants&#34;</a></p>
</li>
<li>
<p><a href="#CHDIDJCF">Section 3.4, &#34;API Features for Valid Time Support&#34;</a></p>
</li>
<li>
<p><a href="#i1010273">Section 3.5, &#34;Operators for Valid Time Support&#34;</a></p>
</li>
<li>
<p><a href="#CHDCBFJG">Section 3.6, &#34;Queries and DML Operations with Valid Time Support&#34;</a></p>
</li>
<li>
<p><a href="#CHDJIGJD">Section 3.7, &#34;Constraint Management for Valid Time Support&#34;</a></p>
</li>
<li>
<p><a href="#CHDCHGFA">Section 3.8, &#34;Locking with Valid Time Support&#34;</a></p>
</li>
<li>
<p><a href="#CHDJAHEC">Section 3.9, &#34;Static Data Dictionary Views Affected by Valid Time Support&#34;</a></p>
</li>
<li>
<p><a href="#i1009670">Section 3.10, &#34;Adding Valid Time Support to an Existing Table&#34;</a></p>
</li>
</ul>
<a id="CHDDIGII"></a>
<div id="ADWSM99198" class="sect1">
<h2 class="sect1"><span class="secnum">3.1</span> Valid Time Support: Introduction and Example</h2>
<p>Some applications need to store data with an associated time range that indicates the validity of the data. That is, each record is valid only within the time range associated with the record.</p>
<p>You can enable valid time support when you version-enable a table. (You can also add valid time support to an existing version-enabled table, as explained in <a href="#i1009670">Section 3.10</a>.) If you enable valid time support, each row contains an added column to hold the valid time period associated with the row. You can specify a valid time range for the session, and Workspace Manager will ensure that queries and insert, update, and delete operations correctly reflect and accommodate the valid time range. The valid time range specified can be in the past or the future, or it can include the past, present, and future.</p>
<p><a href="#i1008793">Example 3-1</a> presents a simple example of valid time support. The example does the following:</p>
<ol>
<li>
<p>Creates a table of employees and their salaries.</p>
</li>
<li>
<p>Version-enables the table, specifying valid time support, which causes a column named <code>WM_VALID</code> to be added to the table automatically.</p>
</li>
<li>
<p>Inserts rows into the table. For each row, it specifies the employee name, salary, and valid time period.</p>
</li>
<li>
<p>Sets the valid time range for the session.</p>
</li>
<li>
<p>Updates a row, specifying a new salary and valid time period for an employee.</p>
</li>
<li>
<p>Disables versioning on the table.</p>
</li>
</ol>
<p><a href="#i1008793">Example 3-1</a>:</p>
<ul>
<li>
<p>Refers to valid time support concepts and techniques that will be explained in other sections of this chapter.</p>
</li>
<li>
<p>Assumes that you are familiar with the Workspace Manager concepts and techniques explained in <a href="long_intro.htm#g1032767">Chapter 1</a>.</p>
</li>
<li>
<p>Does not create workspaces or savepoints. (These are shown in <a href="long_intro.htm#i1014953">Example 1-4</a> and <a href="long_intro.htm#i1016960">Example 1-5</a> in <a href="long_intro.htm#i1019103">Section 1.17</a>.)</p>
</li>
</ul>
<div id="ADWSM99199" class="example">
<p class="titleinexample"><a id="i1008793"></a>Example 3-1 Valid Time Support</p>
<pre>-- Create a very simple employees table (deliberately oversimplified
-- for purposes of illustration).
CREATE TABLE employees (
  name VARCHAR2(16) PRIMARY KEY,
  salary NUMBER 
);

-- Version-enable the table. Specify TRUE for valid time support.
EXECUTE DBMS_WM.EnableVersioning (&#39;employees&#39;, &#39;VIEW_WO_OVERWRITE&#39;, FALSE, TRUE);

INSERT INTO employees VALUES(
  &#39;Adams&#39;,
  30000,
  WMSYS.WM_PERIOD(TO_DATE(&#39;01-01-1990&#39;, &#39;MM-DD-YYYY&#39;), 
                  TO_DATE(&#39;01-01-2005&#39;, &#39;MM-DD-YYYY&#39;))
);
INSERT INTO employees VALUES(
  &#39;Baxter&#39;,
  40000,
  WMSYS.WM_PERIOD(TO_DATE(&#39;01-01-2000&#39;, &#39;MM-DD-YYYY&#39;), DBMS_WM.UNTIL_CHANGED)
);

INSERT INTO employees VALUES(
  &#39;Coleman&#39;,
  50000,
  WMSYS.WM_PERIOD(TO_DATE(&#39;01-01-2003&#39;, &#39;MM-DD-YYYY&#39;), 
                  TO_DATE(&#39;12-31-9999&#39;, &#39;MM-DD-YYYY&#39;))
);

COMMIT;

-- Set valid time period to virtually all time.
EXECUTE DBMS_WM.SetValidTime(TO_DATE(&#39;01-01-1900&#39;, &#39;MM-DD-YYYY&#39;),
  TO_DATE(&#39;01-01-9999&#39;, &#39;MM-DD-YYYY&#39;));

-- Update the salary for an existing employee. Perform &#34;sequenced&#34; update, so
-- that existing time-related information is preserved. This results in two rows
-- for Baxter.
-- First, set valid time to the intended range for Baxter&#39;s raise.
EXECUTE DBMS_WM.SetValidTime(TO_DATE(&#39;01-01-2003&#39;, &#39;MM-DD-YYYY&#39;), DBMS_WM.UNTIL_CHANGED);
-- Give Baxter a raise, effective 01-Jan-2003 until changed.
UPDATE employees SET salary = 45000 WHERE name = &#39;Baxter&#39;;

-- Disable versioning. By default (keepWMValid parameter value of TRUE),
-- the WM_VALID column is kept, with all its data. 
COMMIT;
EXECUTE DBMS_WM.DisableVersioning (&#39;employees&#39;);
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="i1010219"></a>
<div id="ADWSM99200" class="sect1">
<h2 class="sect1"><span class="secnum">3.2</span> WM_PERIOD Data Type</h2>
<p>The <code>WM_PERIOD</code> data type is used to specify a valid time range for the session or workspace, and for a row in a version-enabled table. The <code>WM_PERIOD</code> type is defined as follows:</p>
<pre>CREATE TYPE WM_PERIOD AS OBJECT  (
  validFrom  TIMESTAMP WITH TIME ZONE,
  validTill  TIMESTAMP WITH TIME ZONE,
MAP member function wm_period_map return varchar2);
</pre>
<p>The <code>validFrom</code> date is inclusive, and the <code>validTill</code> period is exclusive; that is, the valid date range starts on the <code>validFrom</code> date and extends up to but not including the <code>validTill</code> date.</p>
<p>The <code>wm_period_map</code> member function enables ordering (sorting) and the use of <code>DISTINCT</code> on columns of type <code>WM_PERIOD</code>.</p>
<p><a href="#i1008819">Example 3-2</a> sets the session valid time range to 01-Jan-2003.</p>
<div id="ADWSM99201" class="example">
<p class="titleinexample"><a id="i1008819"></a>Example 3-2 Setting the Session Valid Time to a Specific Date</p>
<pre>EXECUTE DBMS_WM.SetValidTime(TO_DATE(&#39;01-01-2003&#39;, &#39;MM-DD-YYYY&#39;), TO_DATE(&#39;01-02-2003&#39;, &#39;MM-DD-YYYY&#39;));
</pre>
<p><a href="#i1008827">Example 3-3</a> inserts a row that is valid from 01-Jan-2003 until it is changed.</p>
</div>
<!-- class="example" -->
<div id="ADWSM99202" class="example">
<p class="titleinexample"><a id="i1008827"></a>Example 3-3 Inserting a Row Valid for a Time Range</p>
<pre>INSERT INTO employees VALUES(
  &#39;Baxter&#39;,
  40000,
  WMSYS.WM_PERIOD(TO_DATE(&#39;01-01-2003&#39;, &#39;MM-DD-YYYY&#39;), DBMS_WM.UNTIL_CHANGED)
);
</pre></div>
<!-- class="example" -->
<p>If you want the valid time range to be stored, in views created on tables with valid time support, using two columns of type <code>TIMEZONE WITH TIMESTAMP</code> instead of a single column of type <code>WM_VALID</code>, you can set the Workspace Manager system parameter <code>USE_SCALAR_TYPES_FOR_VALIDTIME</code> to <code>ON</code>, as explained in <a href="long_intro.htm#i1017681">Section 1.5</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHDIJBFH"></a>
<div id="ADWSM99203" class="sect1">
<h2 class="sect1"><span class="secnum">3.3</span> Valid Time Constants</h2>
<p><a href="#CHDHJDHI">Table 3-1</a> lists constants that can be used in the <code>validFrom</code> and <code>validTill</code> timestamps of a <code>WM_PERIOD</code> specification. (Workspace Manager uses these as constants, but they are implemented as functions.)</p>
<div id="ADWSM99204" class="tblformal">
<p class="titleintable"><a id="sthref252"></a><a id="CHDHJDHI"></a>Table 3-1 Constants for Valid Time Support</p>
<table class="cellalignment5786" title="Constants for Valid Time Support" summary="Constants for Valid Time Support" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t2">Constant</th>
<th class="cellalignment5787" id="r1c2-t2">Explanation</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t2" headers="r1c1-t2">
<p>DBMS_WM.MIN_TIME</p>
</td>
<td class="cellalignment5788" headers="r2c1-t2 r1c2-t2">
<p>The minimum (earliest) timestamp value supported by Workspace Manager. Currently the beginning of the day on 01-Jan in the year -4712 (4712 BCE).</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t2" headers="r1c1-t2">
<p>DBMS_WM.MAX_TIME</p>
</td>
<td class="cellalignment5788" headers="r3c1-t2 r1c2-t2">
<p>The maximum (latest) timestamp value supported by Workspace Manager. Currently the end of the day (11:59.999999000 pm) on 31-Dec-9999.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t2" headers="r1c1-t2">
<p>DBMS_WM.UNTIL_CHANGED</p>
</td>
<td class="cellalignment5788" headers="r4c1-t2 r1c2-t2">
<p>A timestamp that is treated as DBMS_WM.MAX_TIME until a subsequent modification overrides the value.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="sect1" -->
<a id="CHDIDJCF"></a>
<div id="ADWSM99205" class="sect1">
<h2 class="sect1"><span class="secnum">3.4</span> API Features for Valid Time Support</h2>
<p><a href="#g1010564">Table 3-2</a> lists DBMS_WM subprograms that are devoted to valid time support or that have parameters related to valid time support.</p>
<div id="ADWSM99206" class="tblformal">
<p class="titleintable"><a id="sthref253"></a><a id="g1010564"></a>Table 3-2 API Features for Valid Time Support</p>
<table class="cellalignment5786" title="API Features for Valid Time Support" summary="API Features for Valid Time Support" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t3">Subprogram</th>
<th class="cellalignment5787" id="r1c2-t3">Valid Time Support</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t3" headers="r1c1-t3">
<p><a href="long_ref.htm#i80309">EnableVersioning</a></p>
</td>
<td class="cellalignment5788" headers="r2c1-t3 r1c2-t3">
<p>If the <code>validTime</code> parameter value is TRUE, the table is version-enabled <code>with</code> valid time support. A column named <code>WM_VALID</code> of type WM_PERIOD is added to the table. For any existing rows, the <code>WM_VALID</code> column is set with a <code>validFrom</code> timestamp of SYSTIMESTAMP and a <code>validTill</code> timestamp of DBMS_WM.UNTIL_CHANGED.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t3" headers="r1c1-t3">
<p><a href="long_ref.htm#i78994">DisableVersioning</a></p>
</td>
<td class="cellalignment5788" headers="r3c1-t3 r1c2-t3">
<p>The <code>keepWMValid</code> parameter determines whether to keep (the default) or delete the <code>WM_VALID</code> column and its data when the table is version-disabled.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t3" headers="r1c1-t3">
<p><a href="long_ref.htm#i118639">GetValidFrom</a></p>
</td>
<td class="cellalignment5788" headers="r4c1-t3 r1c2-t3">
<p>Returns the <code>validFrom</code> timestamp from the session valid time period.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r5c1-t3" headers="r1c1-t3">
<p><a href="long_ref.htm#i118703">GetValidTill</a></p>
</td>
<td class="cellalignment5788" headers="r5c1-t3 r1c2-t3">
<p>Returns the <code>validTill</code> timestamp from the session valid time period.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r6c1-t3" headers="r1c1-t3">
<p><a href="long_ref.htm#i118627">SetValidTime</a></p>
</td>
<td class="cellalignment5788" headers="r6c1-t3 r1c2-t3">
<p>Sets the session valid time period to the specified range. You can execute the procedure with no parameters (to have the valid time range set as from the current time and until changed), with only the <code>validFrom</code> parameter, or with both the <code>validFrom</code> and <code>validTill</code> parameters.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r7c1-t3" headers="r1c1-t3">
<p><a href="long_ref.htm#CACHJADG">SetValidTimeFilterOFF</a></p>
</td>
<td class="cellalignment5788" headers="r7c1-t3 r1c2-t3">
<p>Removes the valid time filter for the current session.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r8c1-t3" headers="r1c1-t3">
<p><a href="long_ref.htm#CACCHFII">SetValidTimeFilterON</a></p>
</td>
<td class="cellalignment5788" headers="r8c1-t3 r1c2-t3">
<p>Sets a valid time filter for the current session (that is, a time to be applied to version-enabled tables.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r9c1-t3" headers="r1c1-t3">
<p><a href="long_ref.htm#CACDJEAI">SetWMValidUpdateModeOFF</a></p>
</td>
<td class="cellalignment5788" headers="r9c1-t3 r1c2-t3">
<p>Disables sequenced and nonsequenced update operations and sequenced delete operations on tables that have valid time support.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r10c1-t3" headers="r1c1-t3">
<p><a href="long_ref.htm#CACJBJEC">SetWMValidUpdateModeON</a></p>
</td>
<td class="cellalignment5788" headers="r10c1-t3 r1c2-t3">
<p>Enables sequenced and nonsequenced update operations and sequenced delete operations on tables that have valid time support.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="sect1" -->
<a id="i1010273"></a>
<div id="ADWSM99207" class="sect1">
<h2 class="sect1"><span class="secnum">3.5</span> <a id="sthref254"></a><a id="sthref255"></a>Operators for Valid Time Support</h2>
<p>Workspace Manager provides relationship checking operators and set operators that accept two time period parameters and that can be used to apply valid time filters in a query.</p>
<p>The relationship checking operators return the integer value 1 if the relationship between the two periods exists, and 0 if the relationship does not exist. The following relationship checking operators for are provided for valid time support:</p>
<ul>
<li>
<p><a href="#i1007490">WM_OVERLAPS</a> checks if two periods overlap.</p>
</li>
<li>
<p><a href="#i1007738">WM_CONTAINS</a> checks if the first period contains the second period.</p>
</li>
<li>
<p><a href="#i1007760">WM_MEETS</a> checks if the end of the first period is the start of the second period.</p>
</li>
<li>
<p><a href="#i1008180">WM_EQUALS</a> checks if the two periods are equal (that is, their start and end times are the same).</p>
</li>
<li>
<p><a href="#i1008197">WM_LESSTHAN</a> checks if the end of the first period is less than (that is, earlier than) the start of the second period.</p>
</li>
<li>
<p><a href="#i1008204">WM_GREATERTHAN</a> checks if the start of the first period is greater than (that is, later than) the end of the second period.</p>
</li>
</ul>
<p>The set operators return the period reflecting the relationship between the two periods, or a null value if the two periods do not have the specified relationship. The following set operators for are provided for valid time support:</p>
<ul>
<li>
<p><a href="#i1008048">WM_INTERSECTION</a> returns the intersection of the two periods, that is, the time range common to both periods.</p>
</li>
<li>
<p><a href="#i1007834">WM_LDIFF</a> returns the difference between the two periods on the left (that is, earlier in time).</p>
</li>
<li>
<p><a href="#i1007826">WM_RDIFF</a> returns the difference between the two periods on the right (that is, later in time).</p>
</li>
</ul>
<p>You can use the relationship checking operators as alternatives to using the wm_valid.validFrom and wm_valid.validTill attributes of the row. For example, the following two queries, which select data valid on 01-Jan-1991, are equivalent:</p>
<pre>SELECT * FROM employees e WHERE WM_CONTAINS (e.wm_valid,
   WMSYS.WM_PERIOD(TO_DATE(&#39;01-01-1991&#39;, &#39;MM-DD-YYYY&#39;), 
                   TO_DATE(&#39;01-02-1991&#39;, &#39;MM-DD-YYYY&#39;)) = 1;
SELECT * from employees e 
   WHERE e.wm_valid.validFrom &lt;= TO_DATE(&#39;01-01-1991&#39;, &#39;MM-DD-YYYY&#39;)
     AND e.wm_valid.validTill &gt; TO_DATE(&#39;01-03-1991&#39;, &#39;MM-DD-YYYY&#39;);
</pre>
<p>The rest of this section contains additional information about each operator. The operators are listed in alphabetical order.</p>
<a id="i1007738"></a>
<div id="ADWSM99208" class="sect2">
<h3 class="sect2"><span class="secnum">3.5.1</span> <a id="sthref256"></a><a id="sthref257"></a>WM_CONTAINS</h3>
<p>The WM_CONTAINS operator checks if the first period contains the second period. <code>WM_CONTAINS(p1, p2)</code> returns <code>1</code> only if the period <code>p1</code> contains the period <code>p2</code>; otherwise, it returns <code>0</code>.</p>
<p>For example:</p>
<pre>WM_CONTAINS(
   WM_PERIOD(
      TO_DATE(&#39;01-01-1980&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1990&#39;, &#39;MM-DD-YYYY&#39;)),
   WM_PERIOD(
      TO_DATE(&#39;01-01-1985&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1988&#39;, &#39;MM-DD-YYYY&#39;))) = 1
 
WM_CONTAINS(
   WM_PERIOD(
      TO_DATE(&#39;01-01-1980&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1990&#39;, &#39;MM-DD-YYYY&#39;)),
   WM_PERIOD(
      TO_DATE(&#39;01-01-1985&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1995&#39;, &#39;MM-DD-YYYY&#39;))) = 0
</pre>
<p><a href="#i1008299">Example 3-4</a> returns all rows in the <code>EMPLOYEES</code> table that were valid on 01-Jan-1995 (that is, where the <code>WM_VALID</code> column value contains the period for 01-Jan-1995).</p>
<div id="ADWSM99209" class="example">
<p class="titleinexample"><a id="i1008299"></a>Example 3-4 WM_CONTAINS Operator</p>
<pre>SELECT * FROM employees e
  WHERE WM_CONTAINS(e.wm_valid,
    wm_period(TO_DATE(&#39;01-01-1995&#39;, &#39;MM-DD-YYYY&#39;),
              TO_DATE(&#39;01-02-1995&#39;, &#39;MM-DD-YYYY&#39;))) = 1;

NAME                 SALARY                                                     
---------------- ----------                                                     
WM_VALID(VALIDFROM, VALIDTILL)                                                  
--------------------------------------------------------------------------------
Adams                 30000                                                     
WM_PERIOD(&#39;01-JAN-1990 12:00:00 -04:00&#39;, &#39;01-JAN-2005 12:00:00 -04:00&#39;)
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i1008180"></a>
<div id="ADWSM99210" class="sect2">
<h3 class="sect2"><span class="secnum">3.5.2</span> <a id="sthref258"></a><a id="sthref259"></a>WM_EQUALS</h3>
<p>The WM_EQUALS operator checks if the first period is equal to (that is, the same as) the second period. <code>WM_CONTAINS(p1, p2)</code> returns <code>1</code> only if the period <code>p1</code> is equal to the period <code>p2</code>; otherwise, it returns <code>0</code>.</p>
<p>For example:</p>
<pre>WM_EQUALS(
   WM_PERIOD(
      TO_DATE(&#39;01-01-1980&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1990&#39;, &#39;MM-DD-YYYY&#39;)),
   WM_PERIOD(
      TO_DATE(&#39;01-01-1980&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1990&#39;, &#39;MM-DD-YYYY&#39;))) = 1
 
WM_EQUALS(
   WM_PERIOD(
      TO_DATE(&#39;01-01-1980&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1990&#39;, &#39;MM-DD-YYYY&#39;)),
   WM_PERIOD(
      TO_DATE(&#39;01-01-1985&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1995&#39;, &#39;MM-DD-YYYY&#39;))) = 0
</pre>
<p><a href="#i1008785">Example 3-5</a> returns all rows in the <code>EMPLOYEES</code> table that are valid from 01-Jan-1990 until 01-Jan-2005 (that is, where the <code>WM_VALID</code> column value is equal to that period).</p>
<div id="ADWSM99211" class="example">
<p class="titleinexample"><a id="i1008785"></a>Example 3-5 WM_EQUALS Operator</p>
<pre>SELECT * FROM employees e
  WHERE WM_EQUALS(e.wm_valid,
    wm_period(TO_DATE(&#39;01-01-1990&#39;, &#39;MM-DD-YYYY&#39;),
              TO_DATE(&#39;01-01-2005&#39;, &#39;MM-DD-YYYY&#39;))) = 1;

NAME                 SALARY                                                     
---------------- ----------                                                     
WM_VALID(VALIDFROM, VALIDTILL)                                                  
--------------------------------------------------------------------------------
Adams                 30000                                                     
WM_PERIOD(&#39;01-JAN-1990 12:00:00 -04:00&#39;, &#39;01-JAN-2005 12:00:00 -04:00&#39;) 
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i1008204"></a>
<div id="ADWSM99212" class="sect2">
<h3 class="sect2"><span class="secnum">3.5.3</span> <a id="sthref260"></a><a id="sthref261"></a>WM_GREATERTHAN</h3>
<p>The WM_GREATERTHAN operator checks if the first period is greater than (that is, occurs after) the second period. <code>WM_CONTAINS(p1, p2)</code> returns <code>1</code> only if the entire period <code>p1</code> is later than the period <code>p2</code>; otherwise, it returns <code>0</code>.</p>
<p>For example:</p>
<pre>WM_GREATERTHAN(
   WM_PERIOD(
      TO_DATE(&#39;01-01-1980&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1990&#39;, &#39;MM-DD-YYYY&#39;)),
   WM_PERIOD(
      TO_DATE(&#39;01-01-1970&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1980&#39;, &#39;MM-DD-YYYY&#39;))) = 1
 
WM_GREATERTHAN(
   WM_PERIOD(
      TO_DATE(&#39;01-01-1980&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1990&#39;, &#39;MM-DD-YYYY&#39;)),
   WM_PERIOD(
      TO_DATE(&#39;01-01-1970&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1981&#39;, &#39;MM-DD-YYYY&#39;))) = 0
</pre>
<p><a href="#i1008786">Example 3-6</a> returns all rows in the <code>EMPLOYEES</code> table that are valid only after 01-Jan-2001 (that is, where the <code>WM_VALID</code> column timestamps are both after 01-Jan-2001).</p>
<div id="ADWSM99213" class="example">
<p class="titleinexample"><a id="i1008786"></a>Example 3-6 WM_GREATERTHAN Operator</p>
<pre>SELECT * FROM employees e
  WHERE WM_GREATERTHAN(e.wm_valid,
    wm_period(TO_DATE(&#39;01-01-2001&#39;, &#39;MM-DD-YYYY&#39;),
              TO_DATE(&#39;01-02-2001&#39;, &#39;MM-DD-YYYY&#39;))) = 1;

NAME                 SALARY                                                     
---------------- ----------                                                     
WM_VALID(VALIDFROM, VALIDTILL)                                                  
--------------------------------------------------------------------------------
Coleman               50000                                                     
WM_PERIOD(&#39;01-JAN-2003 12:00:00 -04:00&#39;, &#39;31-DEC-9999 12:00:00 -04:00&#39;)
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i1008048"></a>
<div id="ADWSM99214" class="sect2">
<h3 class="sect2"><span class="secnum">3.5.4</span> <a id="sthref262"></a><a id="sthref263"></a>WM_INTERSECTION</h3>
<p>The WM_INTERSECTION operator returns the intersection of the two periods, that is, the period common to both specified periods. <code>WM_INTERSECTION(p1, p2)</code> returns a period that is the intersection of periods <code>p1</code> and <code>p2</code>.</p>
<p>The following example returns the period between 01-Jan-1985 to 01-Jan-1988:</p>
<pre>WM_INTERSECTION(
   WM_PERIOD(
      TO_DATE(&#39;01-01-1980&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1990&#39;, &#39;MM-DD-YYYY&#39;)),
   WM_PERIOD(
      TO_DATE(&#39;01-01-1985&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1988&#39;, &#39;MM-DD-YYYY&#39;)))
</pre>
<p>The following example returns the period between 01-Jan-1985 to 01-Jan-1990:</p>
<pre>WM_INTERSECTION(
   WM_PERIOD(
      TO_DATE(&#39;01-01-1980&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1990&#39;, &#39;MM-DD-YYYY&#39;)),
   WM_PERIOD(
      TO_DATE(&#39;01-01-1985&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1995&#39;, &#39;MM-DD-YYYY&#39;)))
</pre>
<p>The following example returns a null value, because there is no intersection of the periods:</p>
<pre>WM_INTERSECTION(
   WM_PERIOD(
      TO_DATE(&#39;01-01-1980&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1990&#39;, &#39;MM-DD-YYYY&#39;)),
   WM_PERIOD(
      TO_DATE(&#39;01-01-1992&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1995&#39;, &#39;MM-DD-YYYY&#39;)))
</pre>
<p><a href="#i1008787">Example 3-7</a> returns, for each row in the <code>EMPLOYEES</code> table, the employee name and the period in which the <code>WM_PERIOD</code> column value intersects the period on 01-Jan-1995.</p>
<div id="ADWSM99215" class="example">
<p class="titleinexample"><a id="i1008787"></a>Example 3-7 WM_INTERSECTION Operator</p>
<pre>SELECT e.name, WM_INTERSECTION(e.wm_valid,
  wm_period(TO_DATE(&#39;01-01-1995&#39;, &#39;MM-DD-YYYY&#39;),
            TO_DATE(&#39;01-02-1995&#39;, &#39;MM-DD-YYYY&#39;)))
 FROM employees e;

NAME                                                                            
----------------                                                                
WM_INTERSECTION(E.WM_VALID,WM_PERIOD(TO_DATE(&#39;01-01-1995&#39;,&#39;MM-DD-
--------------------------------------------------------------------------------
Adams                                                                           
WM_PERIOD(&#39;01-JAN-1995 12:00:00 -04:00&#39;, &#39;02-JAN-1995 12:00:00 -04:00&#39;)         
                                                                                
Baxter                                                                          
                                                                                
                                                                                
Coleman 
</pre>
<p>As you can see in the output of <a href="#i1008787">Example 3-7</a>, only Adams has a row that is valid on 01-Jan-1995.</p>
</div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i1007834"></a>
<div id="ADWSM99216" class="sect2">
<h3 class="sect2"><span class="secnum">3.5.5</span> <a id="sthref264"></a><a id="sthref265"></a>WM_LDIFF</h3>
<p>The WM_LDIFF operator returns the difference between the two periods on the left (that is, earlier in time). <code>WM_LDIFF(p1, p2)</code> returns a period that is the difference between periods <code>p1</code> and <code>p2</code> on the left.</p>
<p>The following example returns the period between 01-Jan-1980 to 01-Jan-1985:</p>
<pre>WM_LDIFF(
   WM_PERIOD(
      TO_DATE(&#39;01-01-1980&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1990&#39;, &#39;MM-DD-YYYY&#39;)),
   WM_PERIOD(
      TO_DATE(&#39;01-01-1985&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1988&#39;, &#39;MM-DD-YYYY&#39;)))
</pre>
<p>The following example returns a null value because <code>p1.validFrom</code> is greater than <code>p2.validFrom</code>:</p>
<pre>WM_LDIFF(
   WM_PERIOD(
      TO_DATE(&#39;01-01-1980&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1990&#39;, &#39;MM-DD-YYYY&#39;)),
   WM_PERIOD(
      TO_DATE(&#39;01-01-1975&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1995&#39;, &#39;MM-DD-YYYY&#39;)))
</pre>
<p>The following example returns a null value because <code>p2</code> is completely outside (in this case, later than) <code>p1</code>:</p>
<pre>WM_LDIFF(
   WM_PERIOD(
      TO_DATE(&#39;01-01-1980&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1990&#39;, &#39;MM-DD-YYYY&#39;)),
   WM_PERIOD(
      TO_DATE(&#39;01-01-1992&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1995&#39;, &#39;MM-DD-YYYY&#39;)))
</pre>
<p><a href="#i1008788">Example 3-8</a> returns, for each row in the <code>EMPLOYEES</code> table, the employee name and the period in which the <code>WM_PERIOD</code> column value is different on the left from 01-Jan-1995.</p>
<div id="ADWSM99217" class="example">
<p class="titleinexample"><a id="i1008788"></a>Example 3-8 WM_LDIFF Operator</p>
<pre>SELECT e.name, WM_LDIFF(e.wm_valid,
  wm_period(TO_DATE(&#39;01-01-1995&#39;, &#39;MM-DD-YYYY&#39;),
            TO_DATE(&#39;01-02-1995&#39;, &#39;MM-DD-YYYY&#39;)))
 FROM employees e;

NAME                                                                            
----------------                                                                
WM_LDIFF(E.WM_VALID,WM_PERIOD(TO_DATE(&#39;01-01-1995&#39;,&#39;MM-DD-YYYY&#39;),
--------------------------------------------------------------------------------
Adams                                                                           
WM_PERIOD(&#39;01-JAN-1990 12:00:00 -04:00&#39;, &#39;01-JAN-1995 12:00:00 -04:00&#39;)         
                                                                                
Baxter                                                                          
                                                                                
                                                                                
Coleman
</pre>
<p>As you can see in the output of <a href="#i1008788">Example 3-8</a>, only Adams has a row that is valid during the period of difference on the left.</p>
</div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i1008197"></a>
<div id="ADWSM99218" class="sect2">
<h3 class="sect2"><span class="secnum">3.5.6</span> <a id="sthref266"></a><a id="sthref267"></a>WM_LESSTHAN</h3>
<p>The WM_LESSTHAN operator checks if the first period is less than (that is, occurs before) the second period. <code>WM_CONTAINS(p1, p2)</code> returns <code>1</code> only if the entire period <code>p1</code> is less than the period <code>p2</code>; otherwise, it returns <code>0</code>.</p>
<p>For example:</p>
<pre>WM_LESSTHAN(
   WM_PERIOD(
      TO_DATE(&#39;01-01-1980&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1990&#39;, &#39;MM-DD-YYYY&#39;)),
   WM_PERIOD(
      TO_DATE(&#39;01-01-1991&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1992&#39;, &#39;MM-DD-YYYY&#39;))) = 1
 
WM_LESSTHAN(
   WM_PERIOD(
      TO_DATE(&#39;01-01-1980&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1990&#39;, &#39;MM-DD-YYYY&#39;)),
   WM_PERIOD(
      TO_DATE(&#39;01-01-1989&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1992&#39;, &#39;MM-DD-YYYY&#39;))) = 0
</pre>
<p><a href="#i1008789">Example 3-9</a> returns all rows in the <code>EMPLOYEES</code> table that are valid only before 01-Jan-2010 (that is, where the <code>WM_VALID</code> column timestamps are both before 01-Jan-2001).</p>
<div id="ADWSM99219" class="example">
<p class="titleinexample"><a id="i1008789"></a>Example 3-9 WM_LESSTHAN Operator</p>
<pre>SELECT * FROM employees e
  WHERE WM_LESSTHAN(e.wm_valid,
    wm_period(TO_DATE(&#39;01-01-2010&#39;, &#39;MM-DD-YYYY&#39;),
              TO_DATE(&#39;01-02-2010&#39;, &#39;MM-DD-YYYY&#39;))) = 1;

NAME                 SALARY                                                     
---------------- ----------                                                     
WM_VALID(VALIDFROM, VALIDTILL)                                                  
--------------------------------------------------------------------------------
Adams                 30000                                                     
WM_PERIOD(&#39;01-JAN-1990 12:00:00 -04:00&#39;, &#39;01-JAN-2005 12:00:00 -04:00&#39;)
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i1007760"></a>
<div id="ADWSM99220" class="sect2">
<h3 class="sect2"><span class="secnum">3.5.7</span> <a id="sthref268"></a><a id="sthref269"></a>WM_MEETS</h3>
<p>The WM_MEETS operator checks if the end of the first period is the start of the second period. <code>WM_MEETS(p1, p2)</code> returns <code>1</code> only if <code>p1.validTill = p2.validFrom</code>; otherwise, it returns <code>0</code>.</p>
<p>For example:</p>
<pre>WM_MEETS(
   WM_PERIOD(
      TO_DATE(&#39;01-01-1980&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1990&#39;, &#39;MM-DD-YYYY&#39;)),
   WM_PERIOD(
      TO_DATE(&#39;01-01-1990&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1995&#39;, &#39;MM-DD-YYYY&#39;))) = 1
 
WM_MEETS(
   WM_PERIOD(
      TO_DATE(&#39;01-01-1980&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1990&#39;, &#39;MM-DD-YYYY&#39;)),
   WM_PERIOD(
      TO_DATE(&#39;01-01-1992&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1995&#39;, &#39;MM-DD-YYYY&#39;))) = 0
</pre>
<p><a href="#i1008790">Example 3-10</a> returns all rows in the <code>EMPLOYEES</code> table that are valid only if the ending timestamp of the valid date period is the same as the start of the period from 01-Jan-2005 until 01-Jan-2006 (that is, if <code>WM_VALID</code>.validTill is equal to the start of the specified period).</p>
<div id="ADWSM99221" class="example">
<p class="titleinexample"><a id="i1008790"></a>Example 3-10 WM_MEETS Operator</p>
<pre>SELECT * FROM employees e
  WHERE WM_MEETS(e.wm_valid,
    wm_period(TO_DATE(&#39;01-01-2005&#39;, &#39;MM-DD-YYYY&#39;),
              TO_DATE(&#39;01-01-2006&#39;, &#39;MM-DD-YYYY&#39;))) = 1;

NAME                 SALARY                                                     
---------------- ----------                                                     
WM_VALID(VALIDFROM, VALIDTILL)                                                  
--------------------------------------------------------------------------------
Adams                 30000                                                     
WM_PERIOD(&#39;01-JAN-1990 12:00:00 -04:00&#39;, &#39;01-JAN-2005 12:00:00 -04:00&#39;)
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i1007490"></a>
<div id="ADWSM99222" class="sect2">
<h3 class="sect2"><span class="secnum">3.5.8</span> <a id="sthref270"></a><a id="sthref271"></a>WM_OVERLAPS</h3>
<p>The WM_OVERLAPS operator checks if two periods overlap. <code>WM_OVERLAPS(p1, p2)</code> returns <code>1</code> if the periods <code>p1</code> and <code>p2</code> overlap; otherwise, it returns <code>0</code>.</p>
<p>For example:</p>
<pre>WM_OVERLAPS(
   WM_PERIOD(
      TO_DATE(&#39;01-01-1980&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1990&#39;, &#39;MM-DD-YYYY&#39;)),
   WM_PERIOD(
      TO_DATE(&#39;01-01-1985&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1995&#39;, &#39;MM-DD-YYYY&#39;))) = 1
 
WM_OVERLAPS(
   WM_PERIOD(
      TO_DATE(&#39;01-01-1980&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1990&#39;, &#39;MM-DD-YYYY&#39;)),
   WM_PERIOD(
      TO_DATE(&#39;01-01-1970&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1980&#39;, &#39;MM-DD-YYYY&#39;))) = 0
</pre>
<p><a href="#i1008791">Example 3-11</a> returns all rows in the <code>EMPLOYEES</code> table whose valid date range overlaps the period from 01-Jan-1990 until 01-Jan-2000.</p>
<div id="ADWSM99223" class="example">
<p class="titleinexample"><a id="i1008791"></a>Example 3-11 WM_OVERLAPS Operator</p>
<pre>SELECT * FROM employees e
  WHERE WM_OVERLAPS(e.wm_valid,
    wm_period(TO_DATE(&#39;01-01-1990&#39;, &#39;MM-DD-YYYY&#39;),
              TO_DATE(&#39;01-01-2000&#39;, &#39;MM-DD-YYYY&#39;))) = 1;

NAME                 SALARY                                                     
---------------- ----------                                                     
WM_VALID(VALIDFROM, VALIDTILL)                                                  
--------------------------------------------------------------------------------
Adams                 30000                                                     
WM_PERIOD(&#39;01-JAN-1990 12:00:00 -04:00&#39;, &#39;01-JAN-2005 12:00:00 -04:00&#39;) 
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i1007826"></a>
<div id="ADWSM99224" class="sect2">
<h3 class="sect2"><span class="secnum">3.5.9</span> <a id="sthref272"></a><a id="sthref273"></a>WM_RDIFF</h3>
<p>The WM_RDIFF operator returns the difference between the two periods on the right (that is, later in time). <code>WM_RDIFF(p1, p2)</code> returns a period that is the difference between periods <code>p1</code> and <code>p2</code> on the right.</p>
<p>The following example returns the period between 01-Jan-1988 to 01-Jan-1990:</p>
<pre>WM_RDIFF(
   WM_PERIOD(
      TO_DATE(&#39;01-01-1980&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1990&#39;, &#39;MM-DD-YYYY&#39;)),
   WM_PERIOD(
      TO_DATE(&#39;01-01-1985&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1988&#39;, &#39;MM-DD-YYYY&#39;)))
</pre>
<p>The following example returns a null value because <code>p1.validTill</code> is less than <code>p2.validTill</code>:</p>
<pre>WM_RDIFF(
   WM_PERIOD(
      TO_DATE(&#39;01-01-1980&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1990&#39;, &#39;MM-DD-YYYY&#39;)),
   WM_PERIOD(
      TO_DATE(&#39;01-01-1975&#39;, &#39;MM-DD-YYYY&#39;), 
      TO_DATE(&#39;01-01-1995&#39;, &#39;MM-DD-YYYY&#39;)))
</pre>
<p><a href="#i1008792">Example 3-12</a> returns, for each row in the <code>EMPLOYEES</code> table, the employee name and the period in which the <code>WM_PERIOD</code> column value is different on the right from 01-Jan-1995.</p>
<div id="ADWSM99225" class="example">
<p class="titleinexample"><a id="i1008792"></a>Example 3-12 WM_RDIFF Operator</p>
<pre>SELECT e.name, WM_RDIFF(e.wm_valid,
  wm_period(TO_DATE(&#39;01-01-1995&#39;, &#39;MM-DD-YYYY&#39;),
            TO_DATE(&#39;01-02-1995&#39;, &#39;MM-DD-YYYY&#39;)))
 FROM employees e;

NAME                                                                            
----------------                                                                
WM_RDIFF(E.WM_VALID,WM_PERIOD(TO_DATE(&#39;01-01-1995&#39;,&#39;MM-DD-YYYY&#39;),
--------------------------------------------------------------------------------
Adams                                                                           
WM_PERIOD(&#39;02-JAN-1995 12:00:00 -04:00&#39;, &#39;01-JAN-2005 12:00:00 -04:00&#39;)         
                                                                                
Baxter                                                                          
                                                                                
                                                                                
Coleman                                                                         
WM_PERIOD(&#39;01-JAN-2003 12:00:00 -04:00&#39;, &#39;31-DEC-9999 12:00:00 -04:00&#39;) 
</pre>
<p>As you can see in the output of <a href="#i1008792">Example 3-12</a>, only Adams and Coleman have rows that are valid during the period of difference on the right.</p>
</div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDCBFJG"></a>
<div id="ADWSM99226" class="sect1">
<h2 class="sect1"><span class="secnum">3.6</span> Queries and DML Operations with Valid Time Support</h2>
<p>This section describes some behaviors and considerations for queries and data manipulation language (insert, update, and delete) operations related to valid time support.</p>
<div id="ADWSM99227" class="sect2"><a id="sthref274"></a>
<h3 class="sect2"><span class="secnum">3.6.1</span> Queries</h3>
<p>All queries issued against a version-enabled table with valid time support take into account the current session&#39;s valid time setting (set using the <a href="long_ref.htm#i118627">SetValidTime</a> or <a href="long_ref.htm#CACCHFII">SetValidTimeFilterON</a> procedure). Unless the query specifies otherwise (for example, by using one of the valid time support operators described in <a href="#i1010273">Section 3.5</a>), each query displays all rows from the underlying table having a valid time range that overlaps the session valid time or valid time filter, and that satisfy the other conditions of the query.</p>
<p>By default (that is, if the <a href="long_ref.htm#i118627">SetValidTime</a> procedure has not been invoked in the session or if it was invoked with no parameters), all rows that are valid at the current time are considered valid, and the valid time period is considered to be from the current time forward without limit.</p>
</div>
<!-- class="sect2" -->
<div id="ADWSM99228" class="sect2"><a id="sthref275"></a>
<h3 class="sect2"><span class="secnum">3.6.2</span> Data Manipulation (DML) Operations</h3>
<p>All DML statements (INSERT, UPDATE, and DELETE) issued against a version-enabled table with valid time support take into account the current session&#39;s valid time setting and update mode. (The update mode is controlled by the <a href="long_ref.htm#CACJBJEC">SetWMValidUpdateModeON</a> and <a href="long_ref.htm#CACDJEAI">SetWMValidUpdateModeOFF</a> procedures.) The DML statements can affect all rows that are valid for the valid time period.</p>
<p>By default (that is, if the <a href="long_ref.htm#i118627">SetValidTime</a> procedure has not been invoked in the session or if it was invoked with no parameters), all rows that are valid at the current time can be affected by DML statements, and all modified rows have their valid time range timestamps set as from the current time until changed.</p>
<p>The following sections describe additional considerations that apply to specific kinds of DML operations.</p>
<a id="CHDFJHIC"></a>
<div id="ADWSM99229" class="sect3">
<h4 class="sect3"><span class="secnum">3.6.2.1</span> Update Operations</h4>
<p>Update operations to version-enabled tables with valid time support can be sequenced or nonsequenced.</p>
<p><a id="sthref276"></a>A <span class="bold">sequenced update</span> operation occurs when you do not specify a change to the <code>WM_VALID</code> column in the UPDATE statement. In a sequenced update operation, the <code>WM_VALID.ValidTill</code> value for the row is changed to the <code>ValidFrom</code> timestamp of the current session valid time range, and a new row is created in which the <code>WM_VALID</code> period reflects the current session valid time range. Sequenced updates ensure that no duplicate records are created by an UPDATE statement, because the <code>WM_VALID</code> column values are different.</p>
<p><a href="#i1009191">Example 3-13</a> shows a sequenced update operation, in which employee Baxter is given a raise. Before the update, there is one row for Baxter, with a salary of 40000 and a valid time period from 01-Jan-2000 until changed.</p>
<div id="ADWSM99230" class="example">
<p class="titleinexample"><a id="i1009191"></a>Example 3-13 Sequenced Update Operation</p>
<pre>-- Update the salary for an existing employee. Perform &#34;sequenced&#34; update, so
-- that existing time-related information is preserved. This results in two rows
-- for Baxter.
-- First, set valid time to the intended range for Baxter&#39;s raise.
EXECUTE DBMS_WM.SetValidTime(TO_DATE(&#39;01-01-2003&#39;, &#39;MM-DD-YYYY&#39;), 
  DBMS_WM.UNTIL_CHANGED);
-- Give Baxter a raise, effective 01-Jan-2003 until changed.
UPDATE employees SET salary = 45000 WHERE name = &#39;Baxter&#39;;
</pre>
<p>The update operation in <a href="#i1009191">Example 3-13</a> modifies the <code>WM_VALID</code> value of the existing row and creates a new row with the new salary value and the <code>WM_VALID</code> value reflecting the session valid time range, as shown by the following statements:</p>
<pre>-- Set valid time to encompass virtually all time.
EXECUTE DBMS_WM.SetValidTime(TO_DATE(&#39;01-01-1900&#39;, &#39;MM-DD-YYYY&#39;), TO_DATE(&#39;01-02-9999&#39;, &#39;MM-DD-YYYY&#39;));

-- See what data exists for Baxter.
SELECT * FROM employees WHERE name = &#39;Baxter&#39;;

NAME                 SALARY
---------------- ----------
WM_VALID(VALIDFROM, VALIDTILL)
--------------------------------------------------------------------------------
Baxter                45000
WM_PERIOD(&#39;01-JAN-2003 12:00:00 -04:00&#39;, NULL)

Baxter                40000
WM_PERIOD(&#39;01-JAN-2000 12:00:00 -04:00&#39;, &#39;01-JAN-2003 12:00:00 -04:00&#39;)
</pre>
<p><a id="sthref277"></a>A <span class="bold">sequenced delete</span> operation deletes the portion of a row that falls within the session valid time range; that is, a new row is created in which the <code>WM_VALID</code> period reflects the current session valid time range, and then that row is deleted. If the UPDATE statement in <a href="#i1009191">Example 3-13</a> had instead been <code>DELETE FROM employees WHERE name = &#39;Baxter&#39;;</code>, the new row for Baxter, valid from 01-Jan-2003 until changed, would have been deleted, but any rows for Baxter valid before 01-Jan-2003 would not be affected. There is no concept of a non-sequenced delete operation; for example, if a valid time was not set in <a href="#i1009191">Example 3-13</a>, a delete operation <code>WHERE name = &#39;Baxter&#39;</code> would delete all rows for Baxter.</p>
<p>Sequenced update and delete operations are enabled when a table is version-enabled with valid time support or when valid time support is added to a version-enabled table. However, you can disable support for sequenced update and delete operations (as well as for nonsequenced update operations) by using the <a href="long_ref.htm#CACDJEAI">SetWMValidUpdateModeOFF</a> procedure, and you can re-enable support by using the <a href="long_ref.htm#CACJBJEC">SetWMValidUpdateModeON</a> procedure. (Both procedures are described in <a href="long_ref.htm#g1035446">Chapter 4</a>.)</p>
<p><a id="sthref278"></a>A <span class="bold">nonsequenced update</span> operation occurs when you specify a change to the <code>WM_VALID</code> column in the UPDATE statement. In a nonsequenced update operation, no additional row is created, and the <code>WM_VALID</code> column value of the updated row or rows reflects what you specified in the UPDATE statement. You must ensure that a nonsequenced update operation will not result in multiple rows with the same primary key value being valid in the period specified in the UPDATE statement; otherwise, the update fails because of a primary key constraint violation.</p>
<p>If the UPDATE statement in <a href="#i1009191">Example 3-13</a> had been a nonsequenced update operation, the result would have been only one row for Baxter: the existing row would have had the salary set to 45000 and the <code>WM_VALID</code> column set to the period specified in the UPDATE statement.</p>
</div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="CHDCHJFD"></a>
<div id="ADWSM99231" class="sect3">
<h4 class="sect3"><span class="secnum">3.6.2.2</span> Insert Operations</h4>
<p>When you insert a row into a version-enabled table with valid time support, you can specify a valid time period for the row. If you specify null timestamps for the period, the session valid time period is used.</p>
<p>When a row is inserted into a version-enabled table with valid time support, Workspace Manager checks to ensure that no existing rows with the same primary key value have a valid time range that overlaps the valid time range of the newly inserted row. If such a row is found, an exception is raised. <a href="#i1008980">Example 3-14</a> shows an attempted insert operation that violates a primary key constraint because overlapping valid time periods.</p>
<div id="ADWSM99232" class="example">
<p class="titleinexample"><a id="i1008980"></a>Example 3-14 Insert Operation Failing Because of Overlapping Time Periods</p>
<pre>-- Insert. Should violate primary key constraint, because of overlapping times:
-- existing Coleman row is valid from 01-Jan-2003 until 31-Dec-9999.
INSERT INTO employees VALUES(
  &#39;Coleman&#39;,
  55000,
  WMSYS.WM_PERIOD(TO_DATE(&#39;01-01-2004&#39;, &#39;MM-DD-YYYY&#39;),
                  TO_DATE(&#39;12-31-9999&#39;, &#39;MM-DD-YYYY&#39;))
);
)
*
ERROR at line 6:
ORA-20010: unique key violation 
ORA-06512: at &#34;WM_DEVELOPER.OVM_INSERT_10&#34;, line 1 
ORA-04088: error during execution of trigger &#39;WM_DEVELOPER.OVM_INSERT_10&#39;
</pre>
<p>To make the statement in <a href="#i1008980">Example 3-14</a> succeed, first change the WM_VALID.ValidTill attribute for the Coleman row to a timestamp reflecting 01-Jan-2004 or an earlier date.</p>
</div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDJIGJD"></a>
<div id="ADWSM99233" class="sect1">
<h2 class="sect1"><span class="secnum">3.7</span> Constraint Management for Valid Time Support</h2>
<p>This section describes considerations related to valid time support that affect referential integrity constraints and unique constraints.</p>
<div id="ADWSM99234" class="sect2"><a id="sthref279"></a>
<h3 class="sect2"><span class="secnum">3.7.1</span> Referential Integrity Constraints</h3>
<p>If a referential integrity constraint exists between two version-enabled tables that have valid time support, the valid time periods of rows are considered when the constraint is enforced. For example, assume that a <code>DEPARTMENTS</code> table has a <code>MANAGER_ID</code> column that is a foreign key referencing the <code>EMPLOYEE_ID</code> column in an <code>EMPLOYEES</code> table (that is, the department manager must be an existing employee). If both tables are version-enabled with valid time support, and if an insert or update operation would result in a new <code>DEPARTMENTS.MANAGER_ID</code> value, the operation will fail if the <code>D</code><code>EPARTMENTS.WM_VALID</code> value is not within the range of the <code>EMPLOYEES.WM_VALID</code> value for the employee who is being made the department manager. (That is, the operation will fail if the new department manager is not a valid employee for the time period specified or defaulted for the insert or update operation.)</p>
<p>If either or both tables in a referential integrity constraint are not version-enabled with valid time support, valid time periods are ignored in enforcing the constraint.</p>
</div>
<!-- class="sect2" -->
<div id="ADWSM99235" class="sect2"><a id="sthref280"></a>
<h3 class="sect2"><span class="secnum">3.7.2</span> Unique Constraints</h3>
<p>If a unique constraint exists in a version-enabled table with valid time support, the valid time periods of rows are considered when the constraint is enforced. For example, assume that an <code>EMPLOYEES</code> table has an <code>EMPLOYEE_ID</code> column that has a unique constraint. If an insert or update operation would result in a new <code>EMPLOYEE_ID</code> value that is the same as an existing <code>EMPLOYEE_ID</code> value, the operation will fail if the <code>WM_VALID</code> values of the existing and inserted rows overlap. (That is, the operation will fail if the new employee and an existing employee have the same ID numbers and their rows are both valid at any given time. However, the operation will succeed if the valid time periods for the two employees do not overlap.)</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDCHGFA"></a>
<div id="ADWSM99236" class="sect1">
<h2 class="sect1"><span class="secnum">3.8</span> Locking with Valid Time Support</h2>
<p>If a row in a version-enabled table with valid time support is locked, it is automatically locked for its entire valid time period. There is no way to lock a row for a specified time period.</p>
<p>Any updates in a pessimistically locked workspace will lock the rows seen from an ancestor workspace as the updates are performed in the workspace. The locked rows in ancestor workspaces will not be further updatable in their valid time periods as long as they are locked.</p>
<p>For an explanation of Workspace Manager locking, see <a href="long_intro.htm#i1006224">Section 1.3</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHDJAHEC"></a>
<div id="ADWSM99237" class="sect1">
<h2 class="sect1"><span class="secnum">3.9</span> Static Data Dictionary Views Affected by Valid Time Support</h2>
<p>This section describes the effect on valid time support on Workspace Manager static data dictionary views. These views are documented in <a href="long_views.htm#g1008700">Chapter 5</a>.</p>
<div id="ADWSM99238" class="sect2"><a id="sthref281"></a>
<h3 class="sect2"><span class="secnum">3.9.1</span> xxx_CONF Views and Valid Time Support</h3>
<p>For a versioned-enabled table with valid time support, the <span class="italic">xxx</span>_CONF view (described in <a href="long_views.htm#i87420">Section 5.51</a>) will include any temporal conflicts. Such a conflict results when the valid time of a row in a parent workspace, containing the same key as a row in its child workspace, overlaps with the valid time of that row in the child workspace. Setting the session context valid time has no effect on the results of the <span class="italic">xxx</span>_CONF views, because all applicable conflicts are displayed for the entire time dimension.</p>
<p>For a version-enabled table with valid time support, a column named <code>WM_VALID</code>, of type <code>WM_PERIOD</code>, is added to the <span class="italic">xxx</span>_CONF view, to indicate the time period during which the row is valid. A column named <code>WM_CONFLICTPERIOD</code>, of type <code>WM_PERIOD</code>, is also added to the view, to indicate the overlapping period of the rows for which conflicts were detected.</p>
</div>
<!-- class="sect2" -->
<div id="ADWSM99239" class="sect2"><a id="sthref282"></a>
<h3 class="sect2"><span class="secnum">3.9.2</span> xxx_DIFF Views and Valid Time Support</h3>
<p>For a version-enabled table with valid time support, the <span class="italic">xxx</span>_DIFF view (described in <a href="long_views.htm#i87490">Section 5.52</a>) will include temporal differences for a primary key between two distinct workspaces or savepoints. Such a difference occurs when a row is modified (inserted, updated, or deleted) in either a parent or child workspace. If two rows with the same primary key value are modified in both a parent and child workspace, the two rows are only correlated in the <span class="italic">xxx</span>_DIFF view when the valid time ranges of the rows overlap. Setting the session context valid time has no effect on the results of the <span class="italic">xxx</span>_DIFF views, because all applicable differences are displayed for the entire time dimension.</p>
<p>For a version-enabled table with valid time support, a column named <code>WM_VALID</code>, of type <code>WM_PERIOD</code>, is added to the <span class="italic">xxx</span>_DIFF view, to indicate the time period during which the row is valid. A column named <code>WM_DIFFPERIOD</code>, of type <code>WM_PERIOD</code>, is also added to the view, to indicate the overlapping period of the rows for which a difference was detected.</p>
</div>
<!-- class="sect2" -->
<div id="ADWSM99240" class="sect2"><a id="sthref283"></a>
<h3 class="sect2"><span class="secnum">3.9.3</span> xxx_HIST Views and Valid Time Support</h3>
<p>The <span class="italic">xxx</span>_HIST views (described in <a href="long_views.htm#i87609">Section 5.53</a>) include information about both valid times and transaction times. It also includes audit information, such as the name of the user that created the row. For a version-enabled table with valid time support, a column named <code>WM_VALID</code>, of type <code>WM_PERIOD</code>, is added to the <span class="italic">xxx</span>_HIST view, to indicate the time period during which the row is valid.</p>
</div>
<!-- class="sect2" -->
<div id="ADWSM99241" class="sect2"><a id="sthref284"></a>
<h3 class="sect2"><span class="secnum">3.9.4</span> xxx_LOCK Views and Valid Time Support</h3>
<p>For a version-enabled table with valid time support, a column named <code>WM_VALID</code>, of type <code>WM_PERIOD</code>, is added to the <span class="italic">xxx</span>_LOCK view (described in <a href="long_views.htm#i87554">Section 5.54</a>), to indicate the time period during which the row is valid. The row is locked for its entire valid time period, so this is also the locking period.</p>
</div>
<!-- class="sect2" -->
<div id="ADWSM99242" class="sect2"><a id="sthref285"></a>
<h3 class="sect2"><span class="secnum">3.9.5</span> xxx_MW Views and Valid Time Support</h3>
<p>For a version-enabled table with valid time support, a column named <code>WM_VALID</code>, of type <code>WM_PERIOD</code>, is added to the <span class="italic">xxx</span>_MW view (described in <a href="long_views.htm#i87680">Section 5.55</a>), to indicate the time period during which the row is valid. To see only the rows that are valid during a specific period, use the <a href="#i1007490">WM_OVERLAPS</a> operator.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1009670"></a>
<div id="ADWSM99244" class="sect1">
<h2 class="sect1"><span class="secnum">3.10</span> Adding Valid Time Support to an Existing Table</h2>
<p>You can add valid time support to an existing version-enabled table by using the <a href="long_ref.htm#i118711">AlterVersionedTable</a> procedure. You can specify a valid time period to be set in the WM_VALID column of all existing rows, or you can accept the default period of the current timestamp until changed.</p>
<p><a href="#i1009682">Example 3-15</a> creates a table named <code>MY_TABLE</code>, version-enables it without valid time support, and then adds valid time support. After the valid time support is added, the <code>WM_VALID</code> column contains the default valid time period.</p>
<div id="ADWSM99245" class="example">
<p class="titleinexample"><a id="i1009682"></a>Example 3-15 Adding Valid Time Support to an Existing Version-Enabled Table</p>
<pre>CREATE TABLE my_table (id NUMBER PRIMARY KEY);
EXECUTE DBMS_WM.EnableVersioning (&#39;my_table&#39;);
INSERT INTO my_table VALUES (1);
SELECT * FROM my_table;

        ID
----------
         1

EXECUTE DBMS_WM.AlterVersionedTable(&#39;my_table&#39;, &#39;ADD_VALID_TIME&#39;);
SELECT * FROM my_table;

        ID
----------
WM_VALID(VALIDFROM, VALIDTILL)
--------------------------------------------------------------------------------
         1
WM_PERIOD(&#39;09-JUN-2003 10:04:13 -04:00&#39;, NULL)
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<div id="ADWSM99502" class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref286"></a>
<h2 class="sect1"><span class="secnum">3.11</span> Merging and Refreshing Workspaces for Tables with Valid Time Support</h2>
<p>When tables that have valid time support are merged or refreshed, you can determine the resulting rows by considering the distinct cases when there is an intersection between rows for the same primary key value. To determine if two row intersect, you can use the <a href="#i1007490">WM_OVERLAPS</a> operator.</p>
<p>In the <code>validTill</code> cases shown in <a href="#CHDIHIID">Table 3-3</a>:</p>
<ul>
<li>
<p>For a merge operation, the target workspace is the parent workspace.</p>
</li>
<li>
<p>For a refresh operation, the target workspace is the child workspace of the specified workspace.</p>
</li>
<li>
<p>Because of the intersecting nature of the rows, conflict resolution was performed before the merge or refresh operation. (A single source row might conflict with multiple target rows, and a single target row might conflict with multiple source rows.)</p>
</li>
</ul>
<div id="ADWSM99503" class="tblformal">
<p class="titleintable"><a id="sthref287"></a><a id="CHDIHIID"></a>Table 3-3 validTill Values and Intersection Result from Merge or Refresh Operation</p>
<table class="cellalignment5786" title="validTill Values and Intersection Result from Merge or Refresh Operation" summary="validTill Values and Intersection Result from Merge or Refresh Operation" dir="ltr">
<thead>
<tr class="cellalignment5780">
<th class="cellalignment5787" id="r1c1-t4">validTill Values</th>
<th class="cellalignment5787" id="r1c2-t4">Intersection Result</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r2c1-t4" headers="r1c1-t4">
<p>Both the source and the target rows have a <code>validTill</code> value that is not <code>DBMS_WM.UNTIL_CHANGED</code>.</p>
</td>
<td class="cellalignment5788" headers="r2c1-t4 r1c2-t4">
<p>The intersecting portion of the row is modified in the target workspace to equal that of the source row.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r3c1-t4" headers="r1c1-t4">
<p>The <code>validTill</code> value of the source row is not <code>DBMS_WM.UNTIL_CHANGED</code>, and the value for the target is <code>DBMS_WM.UNTIL_CHANGED</code>.</p>
</td>
<td class="cellalignment5788" headers="r3c1-t4 r1c2-t4">
<p>The intersecting portion of the row is modified and the resulting row has a <code>validTill</code> value equal to that of the source row.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r4c1-t4" headers="r1c1-t4">
<p>The <code>validTill</code> value of the source row is <code>DBMS_WM.UNTIL_CHANGED</code>, and the value for the target row is not <code>DBMS_WM.UNTIL_CHANGED</code>.</p>
</td>
<td class="cellalignment5788" headers="r4c1-t4 r1c2-t4">
<p>The intersecting portion of the row is modified and the resulting row has a <code>validTill</code> value equal to that of the target row.</p>
</td>
</tr>
<tr class="cellalignment5780">
<td class="cellalignment5788" id="r5c1-t4" headers="r1c1-t4">
<p>The <code>validTill</code> value of both the source and target rows are both <code>DBMS_WM.UNTIL_CHANGED</code>.</p>
</td>
<td class="cellalignment5788" headers="r5c1-t4 r1c2-t4">
<p>The intersecting portion is modified and the resulting row has a <code>validTill</code> value of DBMS_WM.UNTIL_CHANGED.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>For all cases in <a href="#CHDIHIID">Table 3-3</a>, any non-intersecting portion of the target row is left unchanged. When there is no overlapping row in the target workspace, then no special consideration needs to be made; the row is merged or refreshed as is without any additional changes.</p>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment5779">
<tr>
<td class="cellalignment5788">
<table class="cellalignment5784">
<tr>
<td class="cellalignment5783"><a href="long_events.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5783"><a href="long_prtref.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2000, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment5790">
<table class="cellalignment5782">
<tr>
<td class="cellalignment5783"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5783"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5783"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5783"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5783"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5783"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>