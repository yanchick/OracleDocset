<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-80"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Using%20PL%2FScope"></a><title>Using PL/Scope</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1080"/>
<meta name="dcterms.created" content="2016-05-05T16:23:34Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Development Guide"/>
<meta name="dcterms.identifier" content="E41452-07"/>
<meta name="dcterms.isVersionOf" content="ADFNS"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="adfns_packages.htm" title="Previous" type="text/html"/>
<link rel="Next" href="adfns_profiler.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41452-07.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">22/38</span> <!-- End Header -->
<div id="ADFNS022" class="chapter"><a id="g1010526"></a>
<h1 class="chapter"><span class="secnum">12</span> Using PL/Scope</h1>
<p><a id="sthref724"></a><a id="sthref725"></a>PL/Scope is a compiler-driven tool that collects data about identifiers in PL/SQL source code at program-unit compilation time and makes it available in static data dictionary views. The collected data includes information about identifier types, usages (declaration, definition, reference, call, assignment) and the location of each usage in the source code.</p>
<p>PL/Scope lets you develop powerful and effective PL/Scope source code browsers that increase PL/SQL developer productivity by minimizing time spent browsing and understanding source code.</p>
<p>PL/Scope is intended for application developers, and is usually used in the environment of a development database.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
PL/Scope cannot collect data for a PL/SQL unit whose source code is wrapped. For information about wrapping PL/SQL source code, see <a class="olink LNPLS016" href="../LNPLS/wrap.htm#LNPLS016"><span class="italic">Oracle Database PL/SQL Language Reference</span></a>.</div>
<p class="subhead2"><a id="ADFNS1043"></a>Topics:</p>
<ul>
<li>
<p><a href="#BABDGJAF">Specifying Identifier Collection</a></p>
</li>
<li>
<p><a href="#CDEHHFBI">PL/Scope Identifier Data for STANDARD and DBMS_STANDARD</a></p>
</li>
<li>
<p><a href="#g3183317">How Much Space is PL/Scope Data Using?</a></p>
</li>
<li>
<p><a href="#BABDHFIF">Viewing PL/Scope Data</a></p>
</li>
<li>
<p><a href="#BABCAEII">Identifier Types that PL/Scope Collects</a></p>
</li>
<li>
<p><a href="#BABBJEBB">Usages that PL/Scope Reports</a></p>
</li>
<li>
<p><a href="#BABJCFGC">Sample PL/Scope Session</a></p>
</li>
</ul>
<a id="BABDGJAF"></a>
<div id="ADFNS02201" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">12.1</span> Specifying Identifier Collection</h2>
<p>By default, PL/Scope does not collect data for identifiers in the PL/SQL source program. To have PL/Scope collect data for all identifiers in the PL/SQL source program, including identifiers in package bodies, set the PL/SQL compilation parameter <code dir="ltr">PLSCOPE_SETTINGS</code> to <code dir="ltr">&#39;IDENTIFIERS</code>:<code dir="ltr">ALL&#39;</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Collecting all identifiers might generate large amounts of data and slow compile time.</div>
<p>PL/Scope stores the data that it collects in the <code dir="ltr">SYSAUX</code> tablespace. If the <code dir="ltr">SYSAUX</code> tablespace is unavailable, and you compile a program unit with <code dir="ltr">PLSCOPE_SETTINGS=&#39;IDENTIFIERS:ALL&#39;</code>, PL/Scope does not collect data for the compiled object. The compiler does not issue a warning, but it saves a warning in <code dir="ltr">USER_ERRORS</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink REFRN10271" href="../REFRN/GUID-E420D72D-4199-4444-9D9A-080CBEA09DD4.htm#REFRN10271"><span class="italic">Oracle Database Reference</span></a> for information about <code dir="ltr">PLSCOPE_SETTINGS</code></p>
</li>
<li>
<p><a class="olink LNPLS0121" href="../LNPLS/overview.htm#LNPLS0121"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for information about PL/SQL compilation parameters</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="CDEHHFBI"></a>
<div id="ADFNS396" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">12.2</span> PL/Scope Identifier Data for STANDARD and DBMS_STANDARD</h2>
<p>The packages <code dir="ltr">STANDARD</code> and <code dir="ltr">DBMS_STANDARD</code> declare and define base types, such as <code dir="ltr">VARCHAR2</code> and <code dir="ltr">NUMBER</code>, and subprograms such as <code dir="ltr">RAISE_APPLICATION_ERROR</code>. If your database has PL/Scope identifier data for these packages, PL/Scope can track your usage of the identifiers that these packages create.</p>
<p class="subhead2"><a id="ADFNS1056"></a>Topics:</p>
<ul>
<li>
<p><a href="#CDEHJEBA">Do You Need STANDARD and DBMS_STANDARD Identifier Data?</a></p>
</li>
<li>
<p><a href="#CDEJGAHF">Does Your Database Have STANDARD and DBMS_STANDARD Identifier Data?</a></p>
</li>
<li>
<p><a href="#CDEDJEFI">Recompiling STANDARD and DBMS_STANDARD</a></p>
</li>
<li>
<p><a href="#CDEEGHJE">Running utlrp.sql to Recompile Invalid PL/SQL Objects</a></p>
</li>
</ul>
<a id="CDEHJEBA"></a>
<div id="ADFNS397" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">12.2.1</span> Do You Need STANDARD and DBMS_STANDARD Identifier Data?</h3>
<p>You can use PL/Scope without <code dir="ltr">STANDARD</code> and <code dir="ltr">DBMS_STANDARD</code> identifier data. You need this data only if you must know where your code uses the base types or subprograms that these packages create&mdash;for example, to know where your code uses the base type <code dir="ltr">BINARY_INTEGER</code>, so that you can substitute <code dir="ltr">PLS_INTEGER</code>.</p>
</div>
<!-- class="sect2" -->
<a id="CDEJGAHF"></a>
<div id="ADFNS398" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">12.2.2</span> Does Your Database Have STANDARD and DBMS_STANDARD Identifier Data?</h3>
<p>A newly created Oracle 11.1.0.7 database, or a database that was upgraded to 11.1.0.7 from 10.2, has PL/Scope identifier data for the packages <code dir="ltr">STANDARD</code> and <code dir="ltr">DBMS_STANDARD</code>. A database that was upgraded to 11.1.0.7 from 11.1.0.6 does not have this data.</p>
<p>To see if your database has this data, use the query in <a href="#CDEBABDF">Example 12-1</a>.</p>
<p><a href="#CDEBABDF">Example 12-1</a> shows what the query returns when the database has PL/Scope identifier data for <code dir="ltr">STANDARD</code> and <code dir="ltr">DBMS_STANDARD</code>.</p>
<div id="ADFNS399" class="example">
<p class="titleinexample"><a id="CDEBABDF"></a>Example 12-1 STANDARD and DBMS_STANDARD PL/Scope Identifier Data Available?</p>
<p>Query:</p>
<pre dir="ltr">COLUMN OBJECT_NAME FORMAT A14

SELECT UNIQUE OBJECT_NAME
FROM ALL_IDENTIFIERS
WHERE OBJECT_NAME IN (&#39;STANDARD&#39;, &#39;DBMS_STANDARD&#39;)
AND OWNER=&#39;SYS&#39;
ORDER BY OBJECT_NAME;
 
</pre>
<p>Result:</p>
<pre dir="ltr">OBJECT_NAME
--------------
DBMS_STANDARD
STANDARD
 
2 rows selected.
</pre></div>
<!-- class="example" -->
<p>If the query in <a href="#CDEBABDF">Example 12-1</a> selects no rows, then the database does not have PL/Scope identifier data for the packages <code dir="ltr">STANDARD</code> and <code dir="ltr">DBMS_STANDARD</code>. To collect this data, a DBA must recompile the packages <code dir="ltr">STANDARD</code> and <code dir="ltr">DBMS_STANDARD</code>, as explained in <a href="#CDEDJEFI">Section 12.2.3</a>.</p>
</div>
<!-- class="sect2" -->
<a id="CDEDJEFI"></a>
<div id="ADFNS400" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">12.2.3</span> Recompiling STANDARD and DBMS_STANDARD</h3>
<p>A DBA can use this procedure to recompile the packages <code dir="ltr">STANDARD</code> and <code dir="ltr">DBMS_STANDARD</code>:</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This procedure invalidates and revalidates (by recompiling) every PL/SQL object in the database.</div>
<ol>
<li>
<p>Connect to the database, shut it down, and then start it in <code dir="ltr">UPGRADE</code> mode:</p>
<pre dir="ltr">CONNECT / AS SYSDBA;
SHUTDOWN IMMEDIATE;
STARTUP PFILE=<span class="italic">parameter_initialization_file</span> <span class="bold">UPGRADE</span>;
</pre></li>
<li>
<p>Have PL/Scope collect data for all identifiers in the packages <code dir="ltr">STANDARD</code> and <code dir="ltr">DBMS_STANDARD</code>:</p>
<pre dir="ltr">ALTER SESSION SET PLSCOPE_SETTINGS=&#39;IDENTIFIERS:ALL&#39;;
</pre></li>
<li id="CDEHDECA">
<p>Invalidate and recompile the database:</p>
<pre dir="ltr">@?/rdbms/admin/utlirp.sql
</pre>
<p>Now all PL/SQL objects in the database are invalid except <code dir="ltr">STANDARD</code> and <code dir="ltr">DBMS_STANDARD</code>, which were recompiled with <code dir="ltr">PLSCOPE_SETTINGS=&#39;IDENTIFIERS:ALL&#39;</code>.</p>
</li>
<li id="CDECECCC">
<p>(Optional) Invalidate any other PL/SQL objects to be recompiled with <code dir="ltr">PLSCOPE_SETTINGS=&#39;IDENTIFIERS:ALL&#39;</code>, using a script similar to this.</p>
<p>Customize the query on lines 5 through 9 to invalidate only those objects for which you need PL/Scope identifier data. Collecting all identifiers for all objects, as this script does, might generate large amounts of data and slow compile time:</p>
<pre dir="ltr">DECLARE
  TYPE ObjIDArray IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
  ObjIDs  ObjIDArray;
BEGIN
  <span class="bold">SELECT object_id BULK COLLECT INTO ObjIDs</span>
  <span class="bold">FROM ALL_OBJECTS</span>
  <span class="bold">WHERE object_type IN</span>
    <span class="bold">(SELECT DISTINCT TYPE</span>
     <span class="bold">FROM ALL_PLSQL_OBJECT_SETTINGS);</span>
  FOR i IN 1..SQL%ROWCOUNT LOOP
    BEGIN
      DBMS_UTILITY.INVALIDATE(ObjIDs(i),
        &#39;PLSCOPE_SETTINGS=IDENTIFIERS:ALL REUSE SETTINGS&#39;);
      NULL;
    END;
  END LOOP;
END;
/
</pre>
<div class="infobox-note">
<p class="notep1">Notes:</p>
In the preceding script:
<ul>
<li>
<p>Do not substitute <code dir="ltr">ObjIDs</code>.<code dir="ltr">LAST</code> for <code dir="ltr">SQL%ROWCOUNT</code>, because <code dir="ltr">ObjIDs</code> attributes are dependent on a package that is locked by the anonymous block.</p>
</li>
<li>
<p>If your database is large, do not substitute a cursor <code dir="ltr">FOR</code> <code dir="ltr">LOOP</code> for the <code dir="ltr">BULK</code> <code dir="ltr">COLLECT</code> statement, or you will run out of resources.</p>
</li>
</ul>
</div>
</li>
<li id="CDEHHDID">
<p>Shut down the database, and then start it in <code dir="ltr">NORMAL</code> mode:</p>
<pre dir="ltr">SHUTDOWN IMMEDIATE;
STARTUP PFILE=<span class="italic">parameter_initialization_file</span>;
</pre></li>
<li id="CDEEIJBH">
<p>For any remaining invalid PL/SQL objects, do either of these:</p>
<ul>
<li>
<p>Allow them to be recompiled automatically, as they are referenced.</p>
<p>(This can be slow if there are complex dependencies.)</p>
</li>
<li>
<p>Run the script <code dir="ltr">utlrp</code>.<code dir="ltr">sql</code> to recompile the invalid PL/SQL objects, as explained in <a href="#CDEEGHJE">Section 12.2.4</a>.</p>
</li>
</ul>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CDEEGHJE"></a>
<div id="ADFNS401" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">12.2.4</span> Running utlrp.sql to Recompile Invalid PL/SQL Objects</h3>
<p>If the database was restarted in <code dir="ltr">NORMAL</code> mode (step <a href="#CDEHHDID">5</a>), then a DBA, or a user who has been granted the DBA role, can use this procedure:</p>
<ol>
<li>
<p>Connect to the database as <code dir="ltr">SYS</code>:</p>
<pre dir="ltr">CONNECT / AS SYS;
</pre></li>
<li id="CDEIAHEH">
<p>Run the script <code dir="ltr">utlrp</code>.<code dir="ltr">sql</code>:</p>
<pre dir="ltr">@?/rdbms/admin/utlrp.sql
</pre>
<p>If the script gives you any instructions, follow them, and then run the script again.</p>
<p>If the script terminates abnormally without giving any instructions, run it again.</p>
</li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="g3183317"></a>
<div id="ADFNS02202" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">12.3</span> How Much Space is PL/Scope Data Using?</h2>
<p>PL/Scope stores its data in the <code dir="ltr">SYSAUX</code> tablespace. If you are logged on as <code dir="ltr">SYSDBA</code>, you can use the query in <a href="#CDEFCGAF">Example 12-2</a> to display the amount of space that PL/Scope data is using.</p>
<div id="ADFNS402" class="example">
<p class="titleinexample"><a id="CDEFCGAF"></a>Example 12-2 How Much Space is PL/Scope Data Using?</p>
<p>Query:</p>
<pre dir="ltr">SELECT SPACE_USAGE_KBYTES
FROM V$SYSAUX_OCCUPANTS
WHERE OCCUPANT_NAME=&#39;PL/SCOPE&#39;;
 
</pre>
<p>Result:</p>
<pre dir="ltr">SPACE_USAGE_KBYTES
------------------
              1600
 
1 row selected.
</pre></div>
<!-- class="example" -->
<p>For information about managing the <code dir="ltr">SYSAUX</code> tablespace, see <a class="olink ADMIN11384" href="../ADMIN/tspaces.htm#ADMIN11384"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a>.</p>
</div>
<!-- class="sect1" -->
<a id="BABDHFIF"></a>
<div id="ADFNS02203" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">12.4</span> Viewing PL/Scope Data</h2>
<p>To view the data that PL/Scope has collected, you can use either:</p>
<ul>
<li>
<p><a href="#BABDBGFH">Section 12.4.1, &#34;Static Data Dictionary Views&#34;</a></p>
</li>
<li>
<p><a href="#BABGIBGB">Section 12.4.2, &#34;Demo Tool&#34;</a></p>
</li>
<li>
<p><a href="#BABBDBFE">Section 12.4.3, &#34;SQL Developer&#34;</a></p>
</li>
</ul>
<a id="BABDBGFH"></a>
<div id="ADFNS403" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">12.4.1</span> Static Data Dictionary Views</h3>
<p>The static data dictionary views <code dir="ltr">*_IDENTIFIERS</code> display information about PL/Scope identifiers, including their types and usages. For general information about these views, see <a class="olink REFRN20599" href="../REFRN/GUID-F4B4C9F7-6335-42FF-97F4-FEB902A15E6E.htm#REFRN20599"><span class="italic">Oracle Database Reference</span></a>.</p>
<p class="subhead2"><a id="ADFNS1044"></a>Topics:</p>
<ul>
<li>
<p><a href="#CHDJAHDG">Unique Keys</a></p>
</li>
<li>
<p><a href="#CHDBEDJB">Context</a></p>
</li>
<li>
<p><a href="#CHDBDHDJ">Signature</a></p>
</li>
</ul>
<a id="CHDJAHDG"></a>
<div id="ADFNS404" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">12.4.1.1</span> Unique Keys</h4>
<p>Each row of a <code dir="ltr">*_IDENTIFIERS</code> view represents a unique usage of an identifier in the PL/SQL unit. In each of these views, these are equivalent unique keys within a compilation unit:</p>
<ul>
<li>
<p><code dir="ltr">LINE</code>, <code dir="ltr">COL</code>, and <code dir="ltr">USAGE</code></p>
</li>
<li>
<p><code dir="ltr">USAGE_ID</code></p>
</li>
</ul>
<p>For the usages in the <code dir="ltr">*_IDENTIFIERS</code> views, see <a href="#BABBJEBB">Section 12.6</a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
An identifier that is passed to a subprogram in <code dir="ltr">IN</code> <code dir="ltr">OUT</code> mode has two rows in <code dir="ltr">*_IDENTIFIERS</code>: a <code dir="ltr">REFERENCE</code> usage (corresponding to <code dir="ltr">IN</code>) and an <code dir="ltr">ASSIGNMENT</code> usage (corresponding to <code dir="ltr">OUT</code>).</div>
</div>
<!-- class="sect3" -->
<a id="CHDBEDJB"></a>
<div id="ADFNS00097" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">12.4.1.2</span> Context</h4>
<p>Context is useful for discovering relationships between usages. Except for top-level schema object declarations and definitions, every usage of an identifier happens within the context of another usage. For example:</p>
<ul>
<li>
<p>A local variable declaration happens within the context of a top-level procedure declaration.</p>
</li>
<li>
<p>If an identifier is declared as a variable, such as <code dir="ltr">x</code> <code dir="ltr">VARCHAR2(10)</code>, the <code dir="ltr">USAGE_CONTEXT_ID</code> of the <code dir="ltr">VARCHAR2</code> type reference contains the <code dir="ltr">USAGE_ID</code> of the <code dir="ltr">x</code> declaration, allowing you to associate the variable declaration with its type.</p>
</li>
</ul>
<p>In other words, <code dir="ltr">USAGE_CONTEXT_ID</code> is a reflexive foreign key to <code dir="ltr">USAGE_ID</code>, as <a href="#CHDBBBJE">Example 12-3</a> shows.</p>
<div id="ADFNS405" class="example">
<p class="titleinexample"><a id="CHDBBBJE"></a>Example 12-3 USAGE_CONTEXT_ID and USAGE_ID</p>
<pre dir="ltr">ALTER SESSION SET PLSCOPE_SETTINGS = &#39;IDENTIFIERS:ALL&#39;;

CREATE OR REPLACE PROCEDURE a (p1 IN BOOLEAN) AUTHID DEFINER IS
  v PLS_INTEGER;
BEGIN
  v := 42;
  DBMS_OUTPUT.PUT_LINE(v);
  RAISE_APPLICATION_ERROR (-20000, &#39;Bad&#39;);
EXCEPTION
  WHEN Program_Error THEN NULL;
END a;
/
CREATE or REPLACE PROCEDURE b (
  p2 OUT PLS_INTEGER,
  p3 IN OUT VARCHAR2
)  AUTHID DEFINER
IS
  n NUMBER;
  q BOOLEAN := TRUE;
BEGIN
  FOR j IN 1..5 LOOP
    a(q); a(TRUE); a(TRUE);
    IF j &gt; 2 THEN
       GOTO z;
    END IF;
  END LOOP;
&lt;&lt;z&gt;&gt; DECLARE
  d CONSTANT CHAR(1) := &#39;X&#39;;
  BEGIN
    SELECT COUNT(*) INTO n FROM Dual WHERE Dummy = d;
  END z;
END b;
/
WITH v AS (
  SELECT    Line,
            Col,
            INITCAP(NAME) Name,
            LOWER(TYPE)   Type,
            LOWER(USAGE)  Usage,
            USAGE_ID,
            USAGE_CONTEXT_ID
    FROM USER_IDENTIFIERS
      WHERE Object_Name = &#39;B&#39;
        AND Object_Type = &#39;PROCEDURE&#39;
)
SELECT RPAD(LPAD(&#39; &#39;, 2*(Level-1)) ||
                 Name, 20, &#39;.&#39;)||&#39; &#39;||
                 RPAD(Type, 20)||
                 RPAD(Usage, 20)
                 IDENTIFIER_USAGE_CONTEXTS
  FROM v
  START WITH USAGE_CONTEXT_ID = 0
  <span class="bold">CONNECT BY PRIOR USAGE_ID = USAGE_CONTEXT_ID</span>
  ORDER SIBLINGS BY Line, Col
/
</pre>
<p>Result:</p>
<pre dir="ltr">IDENTIFIER_USAGE_CONTEXTS
-------------------------------------------------------------
B................... procedure           declaration
  B................. procedure           definition
    P2.............. formal out          declaration
      Pls_Integer... subtype             reference
    P3.............. formal in out       declaration
      Varchar2...... character datatype  reference
    N............... variable            declaration
      Number........ number datatype     reference
    Q............... variable            declaration
      Q............. variable            assignment
      Boolean....... boolean datatype    reference
    J............... iterator            declaration
      A............. procedure           call
        Q........... variable            reference
      A............. procedure           call
      A............. procedure           call
      J............. iterator            reference
      Z............. label               reference
    Z............... label               declaration
      D............. constant            declaration
        D........... constant            assignment
        Char........ subtype             reference
      N............. variable            assignment
      D............. constant            reference
 
24 rows selected.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="CHDBDHDJ"></a>
<div id="ADFNS00098" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">12.4.1.3</span> Signature</h4>
<p>The signature of an identifier is unique, within and across program units. That is, the signature distinguishes the identifier from other identifiers with the same name, whether they are defined in the same program unit or different program units.</p>
<p>For the program unit in <a href="#CHDIGGCG">Example 12-4</a>, which has two identifiers named <code dir="ltr">p</code>, the static data dictionary view <code dir="ltr">USER_IDENTIFIERS</code> has several rows in which <code dir="ltr">NAME</code> is <code dir="ltr">p</code>, but in these rows, <code dir="ltr">SIGNATURE</code> varies. The rows associated with the outer procedure <code dir="ltr">p</code> have one signature, and the rows associated with the inner procedure <code dir="ltr">p</code> have another signature. If program unit <code dir="ltr">q</code> calls procedure <code dir="ltr">p</code>, the <code dir="ltr">USER_IDENTIFIERS</code> view for <code dir="ltr">q</code> has a row in which <code dir="ltr">NAME</code> is <code dir="ltr">p</code> and <code dir="ltr">SIGNATURE</code> is the signature of the outer procedure <code dir="ltr">p</code>.</p>
<div id="ADFNS406" class="example">
<p class="titleinexample"><a id="CHDIGGCG"></a>Example 12-4 Program Unit with Two Identifiers Named p</p>
<pre dir="ltr">CREATE OR REPLACE PROCEDURE p AUTHID DEFINER IS
  PROCEDURE p IS
  BEGIN
    DBMS_OUTPUT.PUT_LINE(&#39;Inner p&#39;);
  END p;
BEGIN
  DBMS_OUTPUT.PUT_LINE(&#39;Outer p&#39;);
  p();
END p;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABGIBGB"></a>
<div id="ADFNS407" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">12.4.2</span> Demo Tool</h3>
<p><code dir="ltr">$ORACLE_HOME</code>/<code dir="ltr">plsql</code>/<code dir="ltr">demo</code>/<code dir="ltr">plscopedemo</code>.<code dir="ltr">sql</code> is an HTML-based demo implemented as a PL/SQL web application using the PL/SQL Web Toolkit.</p>
</div>
<!-- class="sect2" -->
<a id="BABBDBFE"></a>
<div id="ADFNS408" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">12.4.3</span> SQL Developer</h3>
<p>PL/Scope is a feature of SQL Developer. For information about using PL/Scope from SQL Developer, see the SQL Developer online help or documentation.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABCAEII"></a>
<div id="ADFNS02204" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">12.5</span> Identifier Types that PL/Scope Collects</h2>
<p><a href="#g3152275">Table 12-1</a> shows the identifier types that PL/Scope collects, in alphabetical order. The identifier types in <a href="#g3152275">Table 12-1</a> appear in the <code dir="ltr">TYPE</code> column of the <code dir="ltr">*_IDENTIFIER</code> static data dictionary views, which are described in <a class="olink REFRN20599" href="../REFRN/GUID-F4B4C9F7-6335-42FF-97F4-FEB902A15E6E.htm#REFRN20599"><span class="italic">Oracle Database Reference</span></a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Identifiers declared in compilation units that were not compiled with <code dir="ltr">PLSCOPE_SETTINGS=&#39;IDENTIFIERS:ALL&#39;</code> do not appear in <code dir="ltr">*_IDENTIFIER</code> static data dictionary views.</div>
<div id="ADFNS409" class="tblformal">
<p class="titleintable"><a id="sthref726"></a><a id="g3152275"></a>Table 12-1 Identifier Types that PL/Scope Collects</p>
<table class="cellalignment293" title="Identifier Types that PL/Scope Collects" summary="This table summarizes the identifier types that PL/Scope collects." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t9">TYPE Column Value</th>
<th class="cellalignment294" id="r1c2-t9">Comment</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t9" headers="r1c1-t9">
<p><code dir="ltr">ASSOCIATIVE</code> <code dir="ltr">ARRAY</code></p>
</td>
<td class="cellalignment295" headers="r2c1-t9 r1c2-t9">&nbsp;</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t9" headers="r1c1-t9">
<p><code dir="ltr">CONSTANT</code></p>
</td>
<td class="cellalignment295" headers="r3c1-t9 r1c2-t9">&nbsp;</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t9" headers="r1c1-t9">
<p><code dir="ltr">CURSOR</code></p>
</td>
<td class="cellalignment295" headers="r4c1-t9 r1c2-t9">&nbsp;</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t9" headers="r1c1-t9">
<p><code dir="ltr">BFILE</code> <code dir="ltr">DATATYPE</code><code dir="ltr">BLOB</code> <code dir="ltr">DATATYPE</code><code dir="ltr">BOOLEAN</code> <code dir="ltr">DATATYPE</code><code dir="ltr">CHARACTER</code> <code dir="ltr">DATATYPE</code><code dir="ltr">CLOB</code> <code dir="ltr">DATATYPE</code><code dir="ltr">DATE</code> <code dir="ltr">DATATYPE</code><code dir="ltr">INTERVAL</code> <code dir="ltr">DATATYPE</code><code dir="ltr">NUMBER</code> <code dir="ltr">DATATYPE</code><code dir="ltr">TIME</code> <code dir="ltr">DATATYPE</code><code dir="ltr">TIMESTAMP</code> <code dir="ltr">DATATYPE</code></p>
</td>
<td class="cellalignment295" headers="r5c1-t9 r1c2-t9">
<p>Each <code dir="ltr">DATATYPE</code> is a base type declared in package <code dir="ltr">STANDARD</code>.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r6c1-t9" headers="r1c1-t9">
<p><code dir="ltr">EXCEPTION</code></p>
</td>
<td class="cellalignment295" headers="r6c1-t9 r1c2-t9">&nbsp;</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r7c1-t9" headers="r1c1-t9">
<p><code dir="ltr">FORMAL</code> <code dir="ltr">IN</code><code dir="ltr">FORMAL</code> <code dir="ltr">IN</code> <code dir="ltr">OUT</code><code dir="ltr">FORMAL</code> <code dir="ltr">OUT</code></p>
</td>
<td class="cellalignment295" headers="r7c1-t9 r1c2-t9">&nbsp;</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r8c1-t9" headers="r1c1-t9">
<p><code dir="ltr">FUNCTION</code></p>
</td>
<td class="cellalignment295" headers="r8c1-t9 r1c2-t9">&nbsp;</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r9c1-t9" headers="r1c1-t9">
<p><code dir="ltr">INDEX</code> <code dir="ltr">TABLE</code></p>
</td>
<td class="cellalignment295" headers="r9c1-t9 r1c2-t9">&nbsp;</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r10c1-t9" headers="r1c1-t9">
<p><code dir="ltr">ITERATOR</code></p>
</td>
<td class="cellalignment295" headers="r10c1-t9 r1c2-t9">
<p>An iterator is the index of a <code dir="ltr">FOR</code> loop.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r11c1-t9" headers="r1c1-t9">
<p><code dir="ltr">LABEL</code></p>
</td>
<td class="cellalignment295" headers="r11c1-t9 r1c2-t9">
<p>A label declaration also acts as a context.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r12c1-t9" headers="r1c1-t9">
<p><code dir="ltr">LIBRARY</code></p>
</td>
<td class="cellalignment295" headers="r12c1-t9 r1c2-t9">&nbsp;</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r13c1-t9" headers="r1c1-t9">
<p><code dir="ltr">NESTED</code> <code dir="ltr">TABLE</code></p>
</td>
<td class="cellalignment295" headers="r13c1-t9 r1c2-t9">&nbsp;</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r14c1-t9" headers="r1c1-t9">
<p><code dir="ltr">OBJECT</code></p>
</td>
<td class="cellalignment295" headers="r14c1-t9 r1c2-t9">&nbsp;</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r15c1-t9" headers="r1c1-t9">
<p><code dir="ltr">OPAQUE</code></p>
</td>
<td class="cellalignment295" headers="r15c1-t9 r1c2-t9">
<p>Examples of internal opaque types are <code dir="ltr">ANYDATA</code> and <code dir="ltr">XMLType</code>.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r16c1-t9" headers="r1c1-t9">
<p><code dir="ltr">PACKAGE</code></p>
</td>
<td class="cellalignment295" headers="r16c1-t9 r1c2-t9">&nbsp;</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r17c1-t9" headers="r1c1-t9">
<p><code dir="ltr">PROCEDURE</code></p>
</td>
<td class="cellalignment295" headers="r17c1-t9 r1c2-t9">&nbsp;</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r18c1-t9" headers="r1c1-t9">
<p><code dir="ltr">RECORD</code></p>
</td>
<td class="cellalignment295" headers="r18c1-t9 r1c2-t9">&nbsp;</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r19c1-t9" headers="r1c1-t9">
<p><code dir="ltr">REFCURSOR</code></p>
</td>
<td class="cellalignment295" headers="r19c1-t9 r1c2-t9">&nbsp;</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r20c1-t9" headers="r1c1-t9">
<p><code dir="ltr">SUBTYPE</code></p>
</td>
<td class="cellalignment295" headers="r20c1-t9 r1c2-t9">&nbsp;</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r21c1-t9" headers="r1c1-t9">
<p><code dir="ltr">SYNONYM</code></p>
</td>
<td class="cellalignment295" headers="r21c1-t9 r1c2-t9">
<p>PL/Scope does not resolve the base object name of a synonym. To find the base object name of a synonym, query <code dir="ltr">*_SYNONYMS</code>.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r22c1-t9" headers="r1c1-t9">
<p><code dir="ltr">TRIGGER</code></p>
</td>
<td class="cellalignment295" headers="r22c1-t9 r1c2-t9">&nbsp;</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r23c1-t9" headers="r1c1-t9">
<p><code dir="ltr">UROWID</code></p>
</td>
<td class="cellalignment295" headers="r23c1-t9 r1c2-t9">&nbsp;</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r24c1-t9" headers="r1c1-t9">
<p><code dir="ltr">VARRAY</code></p>
</td>
<td class="cellalignment295" headers="r24c1-t9 r1c2-t9">&nbsp;</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r25c1-t9" headers="r1c1-t9">
<p><code dir="ltr">VARIABLE</code></p>
</td>
<td class="cellalignment295" headers="r25c1-t9 r1c2-t9">
<p>Can be object attribute, local variable, package variable, or record field.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="sect1" -->
<a id="BABBJEBB"></a>
<div id="ADFNS02205" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">12.6</span> Usages that PL/Scope Reports</h2>
<p><a href="#g3158742">Table 12-2</a> shows the usages that PL/Scope reports, in alphabetical order. The identifier types in <a href="#g3158742">Table 12-2</a> appear in the <code dir="ltr">USAGE</code> column of the <code dir="ltr">*_IDENTIFIER</code> static data dictionary views, which are described in <a class="olink REFRN20599" href="../REFRN/GUID-F4B4C9F7-6335-42FF-97F4-FEB902A15E6E.htm#REFRN20599"><span class="italic">Oracle Database Reference</span></a>.</p>
<div id="ADFNS410" class="tblformal">
<p class="titleintable"><a id="sthref727"></a><a id="g3158742"></a>Table 12-2 Usages that PL/Scope Reports</p>
<table class="cellalignment293" title="Usages that PL/Scope Reports" summary="This table summarizes that actions that PL/Scope reports." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t10">USAGE Column Value</th>
<th class="cellalignment294" id="r1c2-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t10" headers="r1c1-t10">
<p><code dir="ltr">ASSIGNMENT</code></p>
</td>
<td class="cellalignment295" headers="r2c1-t10 r1c2-t10">
<p><a id="sthref728"></a>An assignment can be made only to an identifier that can have a value, such as a <code dir="ltr">VARIABLE</code>. Examples of assignments are:</p>
<ul>
<li>
<p>Using an identifier to the left of an assignment operator</p>
</li>
<li>
<p>Using an identifier in the <code dir="ltr">INTO</code> clause of a <code dir="ltr">FETCH</code> statement</p>
</li>
<li>
<p>Passing an identifier to a subprogram by reference (<code dir="ltr">OUT</code> mode)</p>
</li>
<li>
<p>Using an identifier as the bind variable in the <code dir="ltr">USING</code> clause of an <code dir="ltr">EXECUTE</code> <code dir="ltr">IMMEDIATE</code> statement in either <code dir="ltr">OUT</code> or <code dir="ltr">IN</code> <code dir="ltr">OUT</code> mode</p>
</li>
</ul>
<p>An identifier that is passed to a subprogram in <code dir="ltr">IN</code> <code dir="ltr">OUT</code> mode has both a <code dir="ltr">REFERENCE</code> usage (corresponding to <code dir="ltr">IN</code>) and an <code dir="ltr">ASSIGNMENT</code> usage (corresponding to <code dir="ltr">OUT</code>).</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t10" headers="r1c1-t10">
<p><code dir="ltr">CALL</code></p>
</td>
<td class="cellalignment295" headers="r3c1-t10 r1c2-t10">
<p>In the context of PL/Scope, a <code dir="ltr">CALL</code> is an operation that pushes a call onto the call stack; that is:</p>
<ul>
<li>
<p>A call to a <code dir="ltr">FUNCTION</code> or <code dir="ltr">PROCEDURE</code></p>
</li>
<li>
<p>Running or fetching a cursor identifier (a logical call to SQL)</p>
</li>
</ul>
<p>A <code dir="ltr">GOTO</code> statement or raise of an exception is not a <code dir="ltr">CALL</code>, because neither pushes a call onto the call stack.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t10" headers="r1c1-t10">
<p><code dir="ltr">DECLARATION</code></p>
</td>
<td class="cellalignment295" headers="r4c1-t10 r1c2-t10">
<p>A <code dir="ltr">DECLARATION</code> tells the compiler that an identifier exists, and each identifier has exactly one <code dir="ltr">DECLARATION</code>. Each <code dir="ltr">DECLARATION</code> can have an associated data type.</p>
<p>For a loop index declaration, <code dir="ltr">LINE</code> and <code dir="ltr">COL</code> (in <code dir="ltr">*_IDENTIFIERS</code> views) are the line and column of the <code dir="ltr">FOR</code> clause that implicitly declares the loop index.</p>
<p>For a label declaration, <code dir="ltr">LINE</code> and <code dir="ltr">COL</code> are the line and column on which the label appears (and is implicitly declared) within the delimiters <code dir="ltr">&lt;&lt;</code> and <code dir="ltr">&gt;&gt;</code>.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t10" headers="r1c1-t10">
<p><code dir="ltr">DEFINITION</code></p>
</td>
<td class="cellalignment295" headers="r5c1-t10 r1c2-t10">
<p>A <code dir="ltr">DEFINITION</code> tells the compiler how to implement or use a previously declared identifier.</p>
<p>Each of these types of identifiers has a <code dir="ltr">DEFINITION</code>:</p>
<ul>
<li>
<p><code dir="ltr">EXCEPTION</code> (can have multiple definitions)</p>
</li>
<li>
<p><code dir="ltr">FUNCTION</code></p>
</li>
<li>
<p><code dir="ltr">OBJECT</code></p>
</li>
<li>
<p><code dir="ltr">PACKAGE</code></p>
</li>
<li>
<p><code dir="ltr">PROCEDURE</code></p>
</li>
<li>
<p><code dir="ltr">TRIGGER</code></p>
</li>
</ul>
<p>For a top-level identifier only, the <code dir="ltr">DEFINITION</code> and <code dir="ltr">DECLARATION</code> are in the same place.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r6c1-t10" headers="r1c1-t10">
<p><code dir="ltr">REFERENCE</code></p>
</td>
<td class="cellalignment295" headers="r6c1-t10 r1c2-t10">
<p>A <code dir="ltr">REFERENCE</code> uses an identifier without changing its value. Examples of references are:</p>
<ul>
<li>
<p>Raising an exception identifier</p>
</li>
<li>
<p>Using a type identifier in the declaration of a variable or formal parameter</p>
</li>
<li>
<p>Using a variable identifier whose type contains fields to access a field. For example, in <code dir="ltr">myrecordvar</code>.<code dir="ltr">myfield</code> <code dir="ltr">:=</code> <code dir="ltr">1</code>, a reference is made to <code dir="ltr">myrecordvar</code>, and an assignment is made to <code dir="ltr">myfield</code>.</p>
</li>
<li>
<p>Using a cursor for any purpose except <code dir="ltr">FETCH</code></p>
</li>
<li>
<p>Passing an identifier to a subprogram by value (<code dir="ltr">IN</code> mode)</p>
</li>
<li>
<p>Using an identifier as the bind variable in the <code dir="ltr">USING</code> clause of an <code dir="ltr">EXECUTE</code> <code dir="ltr">IMMEDIATE</code> statement in either <code dir="ltr">IN</code> or <code dir="ltr">IN</code> <code dir="ltr">OUT</code> mode</p>
</li>
</ul>
<p>An identifier that is passed to a subprogram in <code dir="ltr">IN</code> <code dir="ltr">OUT</code> mode has both a <code dir="ltr">REFERENCE</code> usage (corresponding to <code dir="ltr">IN</code>) and an <code dir="ltr">ASSIGNMENT</code> usage (corresponding to <code dir="ltr">OUT</code>).</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="sect1" -->
<a id="BABJCFGC"></a>
<div id="ADFNS02206" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">12.7</span> Sample PL/Scope Session</h2>
<p>In this sample session, assume that you are logged in as <code dir="ltr">HR</code>.</p>
<ol>
<li>
<p>Set the session parameter:</p>
<pre dir="ltr">ALTER SESSION SET PLSCOPE_SETTINGS=&#39;IDENTIFIERS:ALL&#39;;
</pre></li>
<li>
<p>Create this package:</p>
<pre dir="ltr">CREATE OR REPLACE PACKAGE PACK1 AUTHID DEFINER IS
  TYPE r1 is RECORD (rf1 VARCHAR2(10));
  FUNCTION F1(fp1 NUMBER) RETURN NUMBER;
  PROCEDURE P1(pp1 VARCHAR2);
END PACK1;
/
CREATE OR REPLACE PACKAGE BODY PACK1 IS
  FUNCTION F1(fp1 NUMBER) RETURN NUMBER IS
    a NUMBER := 10;
  BEGIN
    RETURN a;
  END F1;
  PROCEDURE P1(pp1 VARCHAR2) IS
    pr1 r1;
  BEGIN
    pr1.rf1 := pp1;
  END;
END PACK1;
/
</pre></li>
<li>
<p>Verify that PL/Scope collected all identifiers for the package body:</p>
<pre dir="ltr">SELECT PLSCOPE_SETTINGS
FROM USER_PLSQL_OBJECT_SETTINGS
WHERE NAME=&#39;PACK1&#39; AND TYPE=&#39;PACKAGE BODY&#39;
</pre>
<p>Result:</p>
<pre dir="ltr">PLSCOPE_SETTINGS
------------------------------------------------------------------------
IDENTIFIERS:ALL
</pre></li>
<li>
<p>Display unique identifiers in <code dir="ltr">HR</code> by querying for all <code dir="ltr">DECLARATION</code> usages. For example, to see all unique identifiers with name like <code dir="ltr">%1</code>, use these SQL*Plus formatting commands and this query:</p>
<pre dir="ltr">COLUMN NAME FORMAT A6
COLUMN SIGNATURE FORMAT A32
COLUMN TYPE FORMAT A9

SELECT NAME, SIGNATURE, TYPE
FROM USER_IDENTIFIERS
WHERE NAME LIKE &#39;%1&#39; AND USAGE=&#39;DECLARATION&#39;
ORDER BY OBJECT_TYPE, USAGE_ID;
</pre>
<p>Result is similar to:</p>
<pre dir="ltr">NAME   SIGNATURE                        TYPE
------ -------------------------------- ---------
PACK1  41820FA4D5EF6BE707895178D0C5C4EF PACKAGE
R1     EEBB6849DEE31BC77BF186EBAE5D4E2D RECORD
RF1    41D70040337349634A7F547BC83517C7 VARIABLE
F1     D51E825FF334817C977174423E3D0765 FUNCTION
FP1    CAC3474C112DBEC67AB926978D9A16C1 FORMAL IN
P1     B7C0576BA4D00C33A65CC0C64CADAB89 PROCEDURE
PP1    6B74CF95A5B7377A735925DFAA280266 FORMAL IN
FP1    98EB63B8A4AFEB5EF94D50A20165D6CC FORMAL IN
PP1    62D8463A314BE1F996794723402278CF FORMAL IN
PR1    BDB1CB26C97562CCC20CD1F32D341D7C VARIABLE
 
10 rows selected.
</pre>
<p>The <code dir="ltr">*_IDENTIFIERS</code> static data dictionary views display only basic type names; for example, the <code dir="ltr">TYPE</code> of a local variable or record field is <code dir="ltr">VARIABLE</code>. To determine the exact type of a <code dir="ltr">VARIABLE</code>, you must use its <code dir="ltr">USAGE_CONTEXT_ID</code>.</p>
</li>
<li id="BABHAIFJ">
<p>Find all local variables:</p>
<pre dir="ltr">COLUMN VARIABLE_NAME FORMAT A13
COLUMN CONTEXT_NAME FORMAT A12

SELECT a.NAME variable_name,
        b.NAME context_name,
        a.SIGNATURE
FROM USER_IDENTIFIERS a, USER_IDENTIFIERS b
WHERE a.USAGE_CONTEXT_ID = b.USAGE_ID
AND a.TYPE = &#39;VARIABLE&#39;
AND a.USAGE = &#39;DECLARATION&#39;
AND a.OBJECT_NAME = &#39;PACK1&#39;
AND a.OBJECT_NAME = b.OBJECT_NAME
AND a.OBJECT_TYPE =  b.OBJECT_TYPE
AND (b.TYPE = &#39;FUNCTION&#39; or b.TYPE = &#39;PROCEDURE&#39;)
ORDER BY a.OBJECT_TYPE, a.USAGE_ID;
</pre>
<p>Result is similar to:</p>
<pre dir="ltr">VARIABLE_NAME CONTEXT_NAME SIGNATURE
------------- ------------ --------------------------------
A             F1           1691C6B3C951FCAA2CBEEB47F85CF128
PR1           P1           BDB1CB26C97562CCC20CD1F32D341D7C
 
2 rows selected.
</pre></li>
<li id="BABDDHHH">
<p>Find all usages performed on the local variable <code dir="ltr">A</code>:</p>
<pre dir="ltr">COLUMN USAGE FORMAT A11
COLUMN USAGE_ID FORMAT 999
COLUMN OBJECT_NAME FORMAT A11
COLUMN OBJECT_TYPE FORMAT A12

SELECT USAGE, USAGE_ID, OBJECT_NAME, OBJECT_TYPE
FROM USER_IDENTIFIERS
WHERE SIGNATURE=&#39;1691C6B3C951FCAA2CBEEB47F85CF128&#39;  -- signature of A
ORDER BY OBJECT_TYPE, USAGE_ID;
</pre>
<p>Result:</p>
<pre dir="ltr">USAGE       USAGE_ID OBJECT_NAME OBJECT_TYPE
----------- -------- ----------- ------------
DECLARATION        6 PACK1       PACKAGE BODY
ASSIGNMENT         8 PACK1       PACKAGE BODY
REFERENCE          9 PACK1       PACKAGE BODY
 
3 rows selected.
</pre>
<p>The usages performed on the local identifier <code dir="ltr">A</code> are the identifier declaration (<code dir="ltr">USAGE_ID</code> <code dir="ltr">6</code>), an assignment (<code dir="ltr">USAGE_ID</code> <code dir="ltr">8</code>), and a reference (<code dir="ltr">USAGE_ID</code> <code dir="ltr">9</code>).</p>
</li>
<li id="CDEDHADB">
<p><a id="CDEHGJEB"></a>From the declaration of the local identifier <code dir="ltr">A</code>, find its type:</p>
<pre dir="ltr">COLUMN NAME FORMAT A6
COLUMN TYPE FORMAT A15

SELECT a.NAME, a.TYPE
FROM USER_IDENTIFIERS a, USER_IDENTIFIERS b
WHERE a.USAGE = &#39;REFERENCE&#39;
AND a.USAGE_CONTEXT_ID = b.USAGE_ID
AND b.USAGE = &#39;DECLARATION&#39;
AND b.SIGNATURE = &#39;D51E825FF334817C977174423E3D0765&#39;  -- signature of F1
AND a.OBJECT_TYPE = b.OBJECT_TYPE
AND a.OBJECT_NAME = b.OBJECT_NAME;
</pre>
<p>Result:</p>
<pre dir="ltr">NAME   TYPE
------ ---------------
NUMBER NUMBER DATATYPE
 
1 row selected.
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
This query produces the output shown only if your database has PL/Scope identifier data for the packages <code dir="ltr">STANDARD</code> and <code dir="ltr">DBMS_STANDARD</code>. For more information, see <a href="#CDEHHFBI">Section 12.2</a>.</div>
</li>
<li>
<p>Find out where the assignment to local identifier <code dir="ltr">A</code> occurred:</p>
<pre dir="ltr">SELECT LINE, COL, OBJECT_NAME, OBJECT_TYPE
FROM USER_IDENTIFIERS
WHERE SIGNATURE=&#39;1691C6B3C951FCAA2CBEEB47F85CF128&#39;  -- signature of A
AND USAGE=&#39;ASSIGNMENT&#39;;
</pre>
<p>Result:</p>
<pre dir="ltr">      LINE        COL OBJECT_NAME OBJECT_TYPE
---------- ---------- ----------- ------------
         3          5 PACK1       PACKAGE BODY
 
1 row selected.
</pre></li>
</ol>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment286">
<tr>
<td class="cellalignment295">
<table class="cellalignment291">
<tr>
<td class="cellalignment290"><a href="adfns_packages.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment290"><a href="adfns_profiler.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment298">
<table class="cellalignment289">
<tr>
<td class="cellalignment290"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment290"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment290"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment290"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment290"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment290"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>