<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-64"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Using%20Continuous%20Query%20Notification%20%28CQN%29"></a><title>Using Continuous Query Notification (CQN)</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1080"/>
<meta name="dcterms.created" content="2016-05-05T16:23:34Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Development Guide"/>
<meta name="dcterms.identifier" content="E41452-07"/>
<meta name="dcterms.isVersionOf" content="ADFNS"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="adfns_web.htm" title="Previous" type="text/html"/>
<link rel="Next" href="adfns_part_special.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41452-07.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">25/38</span> <!-- End Header -->
<script>
<!-- // <![CDATA[
window.name='adfns_cqn'
// ]]> -->
</script> <script>
// <![CDATA[
function footdisplay(footnum,footnote) {
    var msg = window.open('', 'NewWindow' + footnum,
        'directories=no,height=120,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');

    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">');
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>');
    msg.document.write('Footnote&nbsp; ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><h1>Footnote&nbsp; ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/body><\/html>');
    msg.document.close();
    msg.focus();
}
// ]]>
</script> <noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript>
<div id="ADFNS018" class="chapter"><a id="BDCGGACA"></a>
<h1 class="chapter"><span class="secnum">15</span> Using Continuous Query Notification (CQN)</h1>
<p><a id="sthref760"></a><a id="sthref761"></a><span class="bold">Continuous Query Notification (CQN)</span> lets an application register queries with the database for either object change notification (the default) or query result change notification. An object referenced by a registered query is a <span class="bold">registered object</span>.</p>
<p>If a query is registered for <span class="bold">object change notification (OCN)</span>, the database notifies the application whenever a transaction changes an object that the query references and commits, regardless of whether the query result changed.</p>
<p>If a query is registered for <span class="bold">query result change notification (QRCN)</span>, the database notifies the application whenever a transaction changes the result of the query and commits.</p>
<p>A <span class="bold">CQN registration</span> associates a list of one or more queries with a notification type (OCN or QRCN) and a notification handler. To create a CQN registration, you can use either the PL/SQL interface or Oracle Call Interface (OCI). If you use the PL/SQL interface, the notification handler is a server-side PL/SQL stored procedure; if you use OCI, the notification handler is a client-side C callback procedure.</p>
<p>This chapter explains general CQN concepts and explains how to use the PL/SQL CQN interface. For information about using OCI for CQN, see <a class="olink LNOCI13111" href="../LNOCI/oci10new.htm#LNOCI13111"><span class="italic">Oracle Call Interface Programmer&#39;s Guide</span></a>.</p>
<p class="subhead2"><a id="ADFNS1060"></a>Topics:</p>
<ul>
<li>
<p><a href="#CHDEFIFJ">About Object Change Notification (OCN)</a></p>
</li>
<li>
<p><a href="#CHDIEHHJ">About Query Result Change Notification (QRCN)</a></p>
</li>
<li>
<p><a href="#CHDHIADC">Events that Generate Notifications</a></p>
</li>
<li>
<p><a href="#CHDFHHJA">Notification Contents</a></p>
</li>
<li>
<p><a href="#CHEIJIHI">Good Candidates for CQN</a></p>
</li>
<li>
<p><a href="#BGBGAGEF">Creating CQN Registrations</a></p>
</li>
<li>
<p><a href="#BAJHBFDH">Using PL/SQL to Create CQN Registrations</a></p>
</li>
<li>
<p><a href="#BAJBDFFE">Using OCI to Create CQN Registrations</a></p>
</li>
<li>
<p><a href="#BGBIAEBB">Querying CQN Registrations</a></p>
</li>
<li>
<p><a href="#BGBDEDGJ">Interpreting Notifications</a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
The terms <span class="bold">OCN</span> and <span class="bold">QRCN</span> refer to both the notification type and the notification itself: An application registers a query <span class="italic">for OCN</span>, and the database sends the application <span class="italic">an OCN</span>; an application registers a query <span class="italic">for QRCN</span>, and the database sends the application <span class="italic">a QRCN</span>.</div>
<a id="CHDEFIFJ"></a>
<div id="ADFNS544" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">15.1</span> About Object Change Notification (OCN)</h2>
<p><a id="sthref762"></a>If an application registers a query for object change notification (OCN), the database sends the application an OCN whenever a transaction changes an object associated with the query and commits, regardless of whether the result of the query changed.</p>
<p>For example, if an application registers the query in <a href="#CHDIDFIB">Example 15-1</a> for OCN, and a user commits a transaction that changes the <code>EMPLOYEES</code> table, the database sends the application an OCN, even if the changed row or rows did not satisfy the query predicate (for example, if <code dir="ltr">DEPARTMENT_ID</code> = 5).</p>
<div id="ADFNS545" class="example">
<p class="titleinexample"><a id="CHDIDFIB"></a>Example 15-1 Query to be Registered for Change Notification</p>
<pre dir="ltr">SELECT EMPLOYEE_ID, SALARY
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 10;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="CHDIEHHJ"></a>
<div id="ADFNS546" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">15.2</span> About Query Result Change Notification (QRCN)</h2>
<div class="infobox-note">
<p class="notep1">Note:</p>
For QRCN support, the <code dir="ltr">COMPATIBLE</code> initialization parameter of the database must be at least 11.0.0, and Automatic Undo Management (AUM) must be enabled (as it is by default).
<p>For information about the <code dir="ltr">COMPATIBLE</code> initialization parameter, see <a class="olink ADMIN11112" href="../ADMIN/create.htm#ADMIN11112"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a>.</p>
<p>For information about AUM, see <a class="olink ADMIN013" href="../ADMIN/undo.htm#ADMIN013"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a>.</p>
</div>
<p><a id="sthref763"></a>If an application registers a query for query result change notification (QRCN), the database sends the application a QRCN whenever a transaction changes the result of the query and commits.</p>
<p>For example, if an application registers the query in <a href="#CHDIDFIB">Example 15-1</a> for QRCN, the database sends the application a QRCN only if the query result set changes; that is, if one of these data manipulation language (DML) statements commits:</p>
<ul>
<li>
<p>An <code dir="ltr">INSERT</code> or <code dir="ltr">DELETE</code> of a row that satisfies the query predicate (<code dir="ltr">DEPARTMENT_ID</code> = 10).</p>
</li>
<li>
<p>An <code dir="ltr">UPDATE</code> to the <code dir="ltr">EMPLOYEE_ID</code> or <code dir="ltr">SALARY</code> column of a row that satisfied the query predicate (<code dir="ltr">DEPARTMENT_ID</code> = 10).</p>
</li>
<li>
<p>An <code dir="ltr">UPDATE</code> to the <code dir="ltr">DEPARTMENT_ID</code> column of a row that changed its value from 10 to a value other than 10, causing the row to be deleted from the result set.</p>
</li>
<li>
<p>An <code dir="ltr">UPDATE</code> to the <code dir="ltr">DEPARTMENT_ID</code> column of a row that changed its value to 10 from a value other than 10, causing the row to be added to the result set.</p>
</li>
</ul>
<p>The default notification type is OCN. For QRCN, specify <code dir="ltr">QOS_QUERY</code> in the <code dir="ltr">QOSFLAGS</code> attribute of the <code dir="ltr">CQ_NOTIFICATION$_REG_INFO</code> object.</p>
<p>With QRCN, you have a choice of guaranteed mode (the default) or best-effort mode.</p>
<p class="subhead2"><a id="ADFNS1061"></a>Topics:</p>
<ul>
<li>
<p><a href="#CHDDDGBE">Guaranteed Mode</a></p>
</li>
<li>
<p><a href="#CHDEJCJF">Best-Effort Mode</a></p>
</li>
</ul>
<a id="CHDDDGBE"></a>
<div id="ADFNS547" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">15.2.1</span> Guaranteed Mode</h3>
<p>In guaranteed mode, there are no false positives: the database sends the application a QRCN only when the query result set is guaranteed to have changed.</p>
<p>For example, suppose that an application registered the query in <a href="#CHDIDFIB">Example 15-1</a> for QRCN, that employee 201 is in department 10, and that these statements are executed:</p>
<pre dir="ltr">UPDATE EMPLOYEES
SET SALARY = SALARY + 10
WHERE EMPLOYEE_ID = 201;

UPDATE EMPLOYEES
SET SALARY = SALARY - 10
WHERE EMPLOYEE_ID = 201;

COMMIT;
</pre>
<p>Each <code dir="ltr">UPDATE</code> statement in the preceding transaction changes the query result set, but together they have no effect on the query result set; therefore, the database does not send the application a QRCN for the transaction.</p>
<p>For guaranteed mode, specify <code dir="ltr">QOS_QUERY</code>, but not <code dir="ltr">QOS_BEST_EFFORT</code>, in the <code dir="ltr">QOSFLAGS</code> attribute of the <code dir="ltr">CQ_NOTIFICATION$_REG_INFO</code> object.</p>
<p>Some queries are too complex for QRCN in guaranteed mode. For the characteristics of queries that can be registered in guaranteed mode, see <a href="#CHDEHADG">Section 15.7.5.1</a>.</p>
</div>
<!-- class="sect2" -->
<a id="CHDEJCJF"></a>
<div id="ADFNS548" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">15.2.2</span> Best-Effort Mode</h3>
<p>Some queries that are too complex for guaranteed mode can be registered for QRCN in best-effort mode, in which CQN creates and registers simpler versions of them.</p>
<p>For example, the query in <a href="#CHDEFDDD">Example 15-2</a> is too complex for QRCN in guaranteed mode because it contains the aggregate function <code dir="ltr">SUM</code>.</p>
<div id="ADFNS549" class="example">
<p class="titleinexample"><a id="CHDEFDDD"></a>Example 15-2 Query Too Complex for QRCN in Guaranteed Mode</p>
<pre dir="ltr">SELECT <span class="bold">SUM(SALARY)</span>
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 20;
</pre></div>
<!-- class="example" -->
<p>In best-effort mode, CQN registers this simpler version of the query in <a href="#CHDEFDDD">Example 15-2</a>:</p>
<pre dir="ltr">SELECT <span class="bold">SALARY</span>
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 20;
</pre>
<p>Whenever the result of the original query changes, the result of its simpler version also changes; therefore, no notifications are lost from the simplification. However, the simplification might cause false positives, because the result of the simpler version can change when the result of the original query does not.</p>
<p>In best-effort mode, the database:</p>
<ul>
<li>
<p>Minimizes the OLTP response overhead that is from notification-related processing, as follows:</p>
<ul>
<li>
<p>For a single-table query, the database determines whether the query result has changed by which columns changed and which predicates the changed rows satisfied.</p>
</li>
<li>
<p>For a multiple-table query (a join), the database uses the primary-key/foreign-key constraint relationships between the tables to determine whether the query result has changed.</p>
</li>
</ul>
</li>
<li>
<p>Sends the application a QRCN whenever a DML statement changes the query result set, even if a subsequent DML statement nullifies the change made by the first DML statement.</p>
</li>
</ul>
<p>The overhead minimization of best-effort mode infrequently causes false positives, even for queries that CQN does not simplify. For example, consider the query in <a href="#CHDIDFIB">Example 15-1</a> and the transaction in <a href="#CHDDDGBE">Section 15.2.1</a>. In best-effort mode, CQN does not simplify the query, but the transaction generates a false positive.</p>
<p>Some types of queries are so simplified that invalidations are generated at object level; that is, whenever any object referenced in those queries changes. Examples of such queries are those that use unsupported column types or include subqueries. The solution to this problem is to rewrite the original queries.</p>
<p>For example, the query in <a href="#CHDJBIFC">Example 15-3</a> is too complex for QRCN in guaranteed mode because it includes a subquery.</p>
<div id="ADFNS550" class="example">
<p class="titleinexample"><a id="CHDJBIFC"></a>Example 15-3 Query Whose Simplified Version Invalidates Objects</p>
<pre dir="ltr">SELECT SALARY
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN <span class="bold">(</span>
  <span class="bold">SELECT DEPARTMENT_ID</span>
  <span class="bold">FROM DEPARTMENTS</span>
  <span class="bold">WHERE LOCATION_ID = 1700</span>
<span class="bold">)</span>;
</pre></div>
<!-- class="example" -->
<p>In best-effort mode, CQN simplifies the query in <a href="#CHDJBIFC">Example 15-3</a> to this:</p>
<pre dir="ltr">SELECT * FROM EMPLOYEES, DEPARTMENTS;
</pre>
<p>The simplified query can cause objects to be invalidated. However, if you rewrite the original query as follows, you can register it in either guaranteed mode or best-effort mode:</p>
<pre dir="ltr">SELECT SALARY
FROM EMPLOYEES, DEPARTMENTS
WHERE EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID
  AND DEPARTMENTS.LOCATION_ID = 1700;
</pre>
<p>Queries that can be registered only in best-effort mode are described in <a href="#CHDGHCCC">Section 15.7.5.2</a>.</p>
<p>The default for QRCN mode is guaranteed mode. For best-effort mode, specify <code dir="ltr">QOS_BEST_EFFORT</code> in the <code dir="ltr">QOSFLAGS</code> attribute of the <code dir="ltr">CQ_NOTIFICATION$_REG_INFO</code> object.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDHIADC"></a>
<div id="ADFNS551" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">15.3</span> Events that Generate Notifications</h2>
<p>These events generate notifications:</p>
<ul>
<li>
<p><a href="#CHDEBHGG">Committed DML Transactions</a></p>
</li>
<li>
<p><a href="#CHDFIBGD">Committed DDL Statements</a></p>
</li>
<li>
<p><a href="#CHDEABJJ">Deregistration</a></p>
</li>
<li>
<p><a href="#CHDCGCBC">Global Events</a></p>
</li>
</ul>
<a id="CHDEBHGG"></a>
<div id="ADFNS552" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">15.3.1</span> Committed DML Transactions</h3>
<p>When the notification type is OCN, any DML transaction that changes one or more registered objects generates one notification for each object when it commits.</p>
<p>When the notification type is QRCN, any DML transaction that changes the result of one or more registered queries generates a notification when it commits. The notification includes the query IDs of the queries whose results changed.</p>
<p>For either notification type, the notification includes:</p>
<ul>
<li>
<p>Name of each changed table</p>
</li>
<li>
<p>Operation type (<code dir="ltr">INSERT</code>, <code dir="ltr">UPDATE</code>, or <code dir="ltr">DELETE</code>)</p>
</li>
<li>
<p><code dir="ltr">ROWID</code> of each changed row, if the registration was created with the <code dir="ltr">ROWID</code> option and the number of modified rows was not too large. For more information, see <a href="#CHDCHCGG">Section 15.7.2.3</a>.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDFIBGD"></a>
<div id="ADFNS553" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">15.3.2</span> Committed DDL Statements</h3>
<p>For both OCN and QRCN, these <a id="sthref764"></a>data definition language (DDL) statements, when committed, generate notifications:</p>
<ul>
<li>
<p><code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code></p>
</li>
<li>
<p><code dir="ltr">TRUNCATE</code> <code dir="ltr">TABLE</code></p>
</li>
<li>
<p><code dir="ltr">FLASHBACK</code> <code dir="ltr">TABLE</code></p>
</li>
<li>
<p><code dir="ltr">DROP</code> <code dir="ltr">TABLE</code></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
When the notification type is OCN, a committed <code dir="ltr">DROP</code> <code dir="ltr">TABLE</code> statement generates a <code dir="ltr">DROP</code> <code dir="ltr">NOTIFICATION</code>.
<p>Any OCN registrations of queries on the dropped table become disassociated from that table (which no longer exists), but the registrations themselves continue to exist. If any of these registrations are associated with objects other than the dropped table, committed changes to those other objects continue to generate notifications. Registrations associated only with the dropped table also continue to exist, and their creator can add queries (and their referenced objects) to them.</p>
<p>An OCN registration is based on the version and definition of an object at the time the query was registered. If an object is dropped, registrations on that object are disassociated from it forever. If an object is created with the same name, and in the same schema, as the dropped object, the created object is not associated with OCN registrations that were associated with the dropped object.</p>
</div>
<p>When the notification type is QRCN:</p>
<ul>
<li>
<p>The notification includes:</p>
<ul>
<li>
<p>Query IDs of the queries whose results have changed</p>
</li>
<li>
<p>Name of the modified table</p>
</li>
<li>
<p>Type of DDL operation</p>
</li>
</ul>
</li>
<li>
<p>Some DDL operations that invalidate registered queries can cause those queries to be deregistered.</p>
<p>For example, suppose that this query is registered for QRCN:</p>
<pre dir="ltr">SELECT COL1 FROM TEST_TABLE
  WHERE COL2 = 1;
</pre>
<p>Suppose that <code dir="ltr">TEST_TABLE</code> has this schema:</p>
<pre dir="ltr">(COL1 NUMBER, COL2 NUMBER, COL3 NUMBER)
</pre>
<p>This DDL statement, when committed, invalidates the query and causes it to be removed from the registration:</p>
<pre dir="ltr">ALTER TABLE DROP COLUMN COL2;
</pre></li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDEABJJ"></a>
<div id="ADFNS554" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">15.3.3</span> Deregistration</h3>
<p>For both OCN and QRCN, deregistration&mdash;removal of a registration from the database&mdash;generates a notification. The reasons that the database removes a registration are:</p>
<ul>
<li>
<p>Timeout</p>
<p>If <code dir="ltr">TIMEOUT</code> is specified with a nonzero value when the queries are registered, the database purges the registration after the specified time interval.</p>
<p>If <code dir="ltr">QOS_DEREG_NFY</code> is specified when the queries are registered, the database purges the registration after it generates its first notification.</p>
</li>
<li>
<p>Loss of privileges</p>
<p>If privileges are lost on an object associated with a registered query, and the notification type is OCN, the database purges the registration. (When the notification type is QRCN, the database removes that query from the registration, but does not purge the registration.)</p>
<p>For privileges needed to register queries, see <a href="#BDCEJDDG">Section 15.7.3</a>.</p>
</li>
</ul>
<p>A notification is not generated when a client application performs an explicit deregistration.</p>
</div>
<!-- class="sect2" -->
<a id="CHDCGCBC"></a>
<div id="ADFNS555" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">15.3.4</span> Global Events</h3>
<p>The global events <code dir="ltr">EVENT_STARTUP</code> and <code dir="ltr">EVENT_SHUTDOWN</code> generate notifications.</p>
<p>In an Oracle RAC environment, these events generate notifications:</p>
<ul>
<li>
<p><code dir="ltr">EVENT_STARTUP</code> when the first instance of the database starts</p>
</li>
<li>
<p><code dir="ltr">EVENT_SHUTDOWN</code> when the last instance of the database shuts down</p>
</li>
<li>
<p><code dir="ltr">EVENT_SHUTDOWN_ANY</code> when any instance of the database shuts down</p>
</li>
</ul>
<p>The preceding global events are constants defined in the <code dir="ltr">DBMS_CQ_NOTIFICATION</code> package.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS201" href="../ARPLS/d_cqnotif.htm#ARPLS201"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about the <code dir="ltr">DBMS_CQ_NOTIFICATION</code> package</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDFHHJA"></a>
<div id="ADFNS556" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">15.4</span> Notification Contents</h2>
<p>A notification contains some or all of this information:</p>
<ul>
<li>
<p>Type of event, which is one of:</p>
<ul>
<li>
<p>Startup</p>
</li>
<li>
<p>Object change</p>
</li>
<li>
<p>Query result change</p>
</li>
<li>
<p>Deregistration</p>
</li>
<li>
<p>Shutdown</p>
</li>
</ul>
</li>
<li>
<p>Registration ID of affected registration</p>
</li>
<li>
<p>Names of changed objects</p>
</li>
<li>
<p>If <code dir="ltr">ROWID</code> option was specified, <code dir="ltr">ROWID</code>s of changed rows</p>
</li>
<li>
<p>If the notification type is QRCN: Query IDs of queries whose results changed</p>
</li>
<li>
<p>If notification resulted from a DML or DDL statement:</p>
<ul>
<li>
<p>Array of names of modified tables</p>
</li>
<li>
<p>Operation type (for example, <code dir="ltr">INSERT</code> or <code dir="ltr">UPDATE</code>)</p>
</li>
</ul>
</li>
</ul>
<p>A notification does not contain the changed data itself. For example, the notification does not say that a monthly salary increased from 5000 to 6000. To obtain more recent values for the changed objects or rows or query results, the application must query the database.</p>
</div>
<!-- class="sect1" -->
<a id="CHEIJIHI"></a>
<div id="ADFNS1015" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">15.5</span> Good Candidates for CQN</h2>
<p>Good candidates for CQN are applications that cache the result sets of queries on infrequently changed objects in the middle tier, to avoid network round trips to the database. These applications can use CQN to register the queries to be cached. When such an application receives a notification, it can refresh its cache by rerunning the registered queries.</p>
<p>An example of such an application is a web forum. Because its users need not view content as soon as it is inserted into the database, this application can cache information in the middle tier and have CQN tell it when it when to refresh the cache.</p>
<p><a href="#BGBIFFAE">Figure 15-1</a> illustrates a typical scenario in which the database serves data that is cached in the middle tier and then accessed over the Internet.</p>
<div id="ADFNS557" class="figure">
<p class="titleinfigure"><a id="BGBIFFAE"></a>Figure 15-1 Middle-Tier Caching</p>
<img width="447" height="431" src="img/adfns022.gif" alt="Description of Figure 15-1 follows"/><br/>
<a id="sthref765" href="img_text/adfns022.htm">Description of &#39;&#39;Figure 15-1 Middle-Tier Caching&#39;&#39;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>Applications in the middle tier require rapid access to cached copies of database objects while keeping the cache as current as possible in relation to the database. Cached data becomes obsolete when a transaction modifies the data and commits, thereby putting the application at risk of accessing incorrect results. If the application uses CQN, the database can publish a notification when a change occurs to registered objects with details on what changed. In response to the notification, the application can refresh cached data by fetching it from the back-end database.</p>
<p><a href="#CHECFHCH">Figure 15-2</a> illustrates the process by which middle-tier web clients receive and process notifications.</p>
<div id="ADFNS558" class="figure">
<p class="titleinfigure"><a id="CHECFHCH"></a>Figure 15-2 Basic Process of Continuous Query Notification (CQN)</p>
<img width="447" height="408" src="img/adfns104.gif" alt="Description of Figure 15-2 follows"/><br/>
<a id="sthref766" href="img_text/adfns104.htm">Description of &#39;&#39;Figure 15-2 Basic Process of Continuous Query Notification (CQN)&#39;&#39;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>Explanation of steps in <a href="#CHECFHCH">Figure 15-2</a> (if registrations are created using PL/SQL and that the application has cached the result set of a query on <code dir="ltr">HR</code>.<code dir="ltr">EMPLOYEES</code>):</p>
<ol>
<li>
<p>The developer uses PL/SQL to create a CQN registration for the query, which consists of creating a stored PL/SQL procedure to process notifications and then using the PL/SQL CQN interface to create a registration for the query, specifying the PL/SQL procedure as the notification handler.</p>
</li>
<li>
<p>The database populates the registration information in the data dictionary.</p>
</li>
<li>
<p>A user updates a row in the <code dir="ltr">HR</code>.<code dir="ltr">EMPLOYEES</code> table in the back-end database and commits the update, causing the query result to change. The data for <code dir="ltr">HR</code>.<code dir="ltr">EMPLOYEES</code> cached in the middle tier is now outdated.</p>
</li>
<li>
<p>The database adds a message that describes the change to an internal queue.</p>
</li>
<li>
<p>The database notifies a <code dir="ltr">JOBQ</code> background process of a notification message.</p>
</li>
<li id="CHDCABFC">
<p>The <code dir="ltr">JOBQ</code> process runs the stored procedure specified by the client application. In this example, <code dir="ltr">JOBQ</code> passes the data to a server-side PL/SQL procedure. The implementation of the PL/SQL notification handler determines how the notification is handled.</p>
</li>
<li>
<p>Inside the server-side PL/SQL procedure, the developer can implement logic to notify the middle-tier client application of the changes to the registered objects. For example, it notifies the application of the <code dir="ltr">ROWID</code> of the changed row in <code dir="ltr">HR</code>.<code dir="ltr">EMPLOYEES</code>.</p>
</li>
<li>
<p>The client application in the middle tier queries the back-end database to retrieve the data in the changed row.</p>
</li>
<li>
<p>The client application updates the cache with the data.</p>
</li>
</ol>
</div>
<!-- class="sect1" -->
<a id="BGBGAGEF"></a>
<div id="ADFNS1016" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">15.6</span> Creating CQN Registrations</h2>
<p><a id="sthref767"></a><a id="sthref768"></a>A <span class="bold">CQN registration</span> associates a list of one or more queries with a notification type and a notification handler.</p>
<p>The notification type is either OCN or QRCN. For information about these types, see <a href="#CHDEFIFJ">Section 15.1</a> and <a href="#CHDIEHHJ">Section 15.2</a>.</p>
<p>To create a CQN registration, you can use one of two interfaces:</p>
<ul>
<li>
<p>PL/SQL interface</p>
<p>If you use the PL/SQL interface, the notification handler is a server-side PL/SQL stored procedure. See <a href="#BAJHBFDH">Section 15.7</a>.</p>
</li>
<li>
<p>Oracle Call Interface (OCI)</p>
<p>If you use OCI, the notification handler is a client-side C callback procedure. See <a href="#BAJBDFFE">Section 15.8</a>.</p>
</li>
</ul>
<p>After being created, a registration is stored in the database. In an Oracle RAC environment, it is visible to all database instances. Transactions that change the query results in any database instance generate notifications.</p>
<p>By default, a registration survives until the application that created it explicitly deregisters it or until the database implicitly purges it (from loss of privileges, for example).</p>
</div>
<!-- class="sect1" -->
<a id="BAJHBFDH"></a>
<div id="ADFNS542" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">15.7</span> Using PL/SQL to Create CQN Registrations</h2>
<p>This section describes using PL/SQL to create CQN registrations. When you use the PL/SQL interface, the notification handler is a server-side PL/SQL stored procedure.</p>
<p class="subhead2"><a id="ADFNS543"></a>Topics:</p>
<ul>
<li>
<p><a href="#CHDCDCFI">PL/SQL CQN Registration Interface</a></p>
</li>
<li>
<p><a href="#BDCIDBFJ">CQN Registration Options</a></p>
</li>
<li>
<p><a href="#BDCEJDDG">Prerequisites for Creating CQN Registrations</a></p>
</li>
<li>
<p><a href="#BDCEHIDF">Queries that Can Be Registered for Object Change Notification (OCN)</a></p>
</li>
<li>
<p><a href="#CHDGEBFH">Queries that Can Be Registered for Query Result Change Notification (QRCN)</a></p>
</li>
<li>
<p><a href="#BGBHFEDC">Using PL/SQL to Register Queries for CQN</a></p>
</li>
<li>
<p><a href="#CHDJBFEC">Best Practices for CQN Registrations</a></p>
</li>
<li>
<p><a href="#CHDIEJEI">Troubleshooting CQN Registrations</a></p>
</li>
<li>
<p><a href="#CHDDEECH">Deleting Registrations</a></p>
</li>
<li>
<p><a href="#CHEJIHGB">Configuring CQN: Scenario</a></p>
</li>
</ul>
<a id="CHDCDCFI"></a>
<div id="ADFNS559" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">15.7.1</span> PL/SQL CQN Registration Interface</h3>
<p>The PL/SQL CQN registration interface is implemented with the <code dir="ltr">DBMS_CQ_NOTIFICATION</code> package. You use the <code dir="ltr">DBMS_CQ_NOTIFICATION</code>.<code dir="ltr">NEW_REG_START</code> function to open a registration block. You specify the registration details, including the notification type and notification handler, as part of the <code dir="ltr">CQ_NOTIFICATION$_REG_INFO</code> object, which is passed as an argument to the <code dir="ltr">NEW_REG_START</code> procedure. Every query that you run while the registration block is open is registered with CQN. If you specified notification type QRCN, the database assigns a query ID to each query. You can retrieve these query IDs with the <code dir="ltr">DBMS_CQ_NOTIFICATION</code>.<code dir="ltr">CQ_NOTIFICATION_QUERYID</code> function. To close the registration block, you use the <code dir="ltr">DBMS_CQ_NOTIFICATION</code>.<code dir="ltr">REG_END</code> function.</p>
<p>For step-by-step instructions, see <a href="#BGBHFEDC">Section 15.7.6</a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS201" href="../ARPLS/d_cqnotif.htm#ARPLS201"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about the <code dir="ltr">DBMS_CQ_NOTIFICATION</code> package</div>
</div>
<!-- class="sect2" -->
<a id="BDCIDBFJ"></a>
<div id="ADFNS560" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">15.7.2</span> CQN Registration Options</h3>
<p>You can change the CQN registration defaults with the options summarized in <a href="#g1826201">Table 15-1</a>.</p>
<div id="ADFNS561" class="tblformal">
<p class="titleintable"><a id="sthref769"></a><a id="g1826201"></a>Table 15-1 Continuous Query Notification Registration Options</p>
<table class="cellalignment293" title="Continuous Query Notification Registration Options" summary="This table summarizes the Database Change Notification registration options." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t7">Option</th>
<th class="cellalignment294" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t7" headers="r1c1-t7">
<p>Notification Type</p>
</td>
<td class="cellalignment295" headers="r2c1-t7 r1c2-t7">
<p>Specifies QRCN (the default is OCN).</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t7" headers="r1c1-t7">
<p>QRCN Mode<a id="CHDGDJDD" href="#CHDGDJDD" onclick="footdisplay(1,&#34;Applies only when notification type is QRCN.&#34;)"><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></p>
</td>
<td class="cellalignment295" headers="r3c1-t7 r1c2-t7">
<p>Specifies best-effort mode (the default is guaranteed mode).</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t7" headers="r1c1-t7">
<p><code dir="ltr">ROWID</code></p>
</td>
<td class="cellalignment295" headers="r4c1-t7 r1c2-t7">
<p>Includes the value of the <code dir="ltr">ROWID</code> pseudocolumn for each changed row in the notification.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t7" headers="r1c1-t7">
<p>Operations Filter<a id="CHDGJDDD" href="#CHDGJDDD" onclick="footdisplay(2,&#34;Applies only when notification type is OCN.&#34;)"><sup class="tablefootnote">Foot&nbsp;2&nbsp;</sup></a></p>
</td>
<td class="cellalignment295" headers="r5c1-t7 r1c2-t7">
<p>Publishes the notification only if the operation type matches the specified filter condition.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r6c1-t7" headers="r1c1-t7">
<p>Transaction Lag<a id="sthref770" href="#sthref770" onclick="footdisplay(2,&#34;Applies only when notification type is OCN.&#34;)"><sup class="footnotenumber">Footref&nbsp;2</sup></a></p>
</td>
<td class="cellalignment295" headers="r6c1-t7 r1c2-t7">
<p>Deprecated. Use Notification Grouping instead.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r7c1-t7" headers="r1c1-t7">
<p>Notification Grouping</p>
</td>
<td class="cellalignment295" headers="r7c1-t7 r1c2-t7">
<p>Specifies how notifications are grouped.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r8c1-t7" headers="r1c1-t7">
<p>Reliable</p>
</td>
<td class="cellalignment295" headers="r8c1-t7 r1c2-t7">
<p>Stores notifications in a persistent database queue (instead of in shared memory, the default).</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r9c1-t7" headers="r1c1-t7">
<p>Purge on Notify</p>
</td>
<td class="cellalignment295" headers="r9c1-t7 r1c2-t7">
<p>Purges the registration after the first notification.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r10c1-t7" headers="r1c1-t7">
<p>Timeout</p>
</td>
<td class="cellalignment295" headers="r10c1-t7 r1c2-t7">
<p>Purges the registration after a specified time interval.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>Applies only when notification type is QRCN.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;2&nbsp;</sup>Applies only when notification type is OCN.</p>
<p class="subhead2"><a id="ADFNS1063"></a>Topics:</p>
<ul>
<li>
<p><a href="#CHDJCHGG">Notification Type Option</a></p>
</li>
<li>
<p><a href="#CHDFIGEB">QRCN Mode (QRCN Notification Type Only)</a></p>
</li>
<li>
<p><a href="#CHDCHCGG">ROWID Option</a></p>
</li>
<li>
<p><a href="#CHDIIIIJ">Operations Filter Option (OCN Notification Type Only)</a></p>
</li>
<li>
<p><a href="#CHDDAAAE">Transaction Lag Option (OCN Notification Type Only)</a></p>
</li>
<li>
<p><a href="#CHDBHCGH">Notification Grouping Options</a></p>
</li>
<li>
<p><a href="#CHDGJBFH">Reliable Option</a></p>
</li>
<li>
<p><a href="#CHDJHGCB">Purge-on-Notify and Timeout Options</a></p>
</li>
</ul>
<a id="CHDJCHGG"></a>
<div id="ADFNS562" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">15.7.2.1</span> Notification Type Option</h4>
<p>The notification types are OCN (described in <a href="#CHDEFIFJ">Section 15.1</a>) and QRCN (described in <a href="#CHDIEHHJ">Section 15.2</a>).</p>
</div>
<!-- class="sect3" -->
<a id="CHDFIGEB"></a>
<div id="ADFNS563" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">15.7.2.2</span> QRCN Mode (QRCN Notification Type Only)</h4>
<p>The QRCN mode option applies only when the notification type is QRCN. Instructions for setting the notification type to QRCN are in <a href="#CHDJCHGG">Section 15.7.2.1</a>.</p>
<p>The QRCN modes are guaranteed (described in <a href="#CHDDDGBE">Section 15.2.1</a>) and best-effort (described in <a href="#CHDEJCJF">Section 15.2.2</a>).</p>
<p>The default is guaranteed mode. For best-effort mode, specify <code dir="ltr">QOS_BEST_EFFORT</code> in the <code dir="ltr">QOSFLAGS</code> attribute of the <code dir="ltr">CQ_NOTIFICATION$_REG_INFO</code> object.</p>
</div>
<!-- class="sect3" -->
<a id="CHDCHCGG"></a>
<div id="ADFNS564" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">15.7.2.3</span> ROWID Option</h4>
<p>The <code dir="ltr">ROWID</code> option includes the value of the <a id="sthref771"></a><code dir="ltr">ROWID</code> pseudocolumn (the rowid of the row) for each changed row in the notification. To include the <code dir="ltr">ROWID</code> option of each changed row in the notification, specify <code dir="ltr">QOS_ROWIDS</code> in the <code dir="ltr">QOSFLAGS</code> attribute of the <code dir="ltr">CQ_NOTIFICATION$_REG_INFO</code> object.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When you update a row in a table compressed with Hybrid Columnar Compression (HCC), the <code dir="ltr">ROWID</code> of the row changes. HCC, a feature of certain Oracle storage systems, is described in <a class="olink CNCPT89198" href="../CNCPT/tablecls.htm#CNCPT89198"><span class="italic">Oracle Database Concepts</span></a>.</div>
<p>From the <code dir="ltr">ROWID</code> information in the notification, the application can retrieve the contents of the changed rows by performing queries of this form:</p>
<pre dir="ltr">SELECT * FROM <span class="italic">table_name_from_notification</span>
WHERE ROWID = <span class="italic">rowid_from_notification</span>;
</pre>
<p><code dir="ltr">ROWID</code>s are published in the external string format. For a regular heap table, the length of a <code dir="ltr">ROWID</code> is 18 character bytes. For an Index Organized Table (IOT), the length of the <code dir="ltr">ROWID</code> depends on the size of the primary key, and might exceed 18 bytes.</p>
<p>If the server does not have enough memory for the <code dir="ltr">ROWID</code>s, the notification might be &#34;rolled up&#34; into a <code dir="ltr">FULL-TABLE-NOTIFICATION</code>, indicated by a special flag in the notification descriptor. Possible reasons for a <code dir="ltr">FULL-TABLE-NOTIFICATION</code> are:</p>
<ul>
<li>
<p>Total shared memory consumption from <code dir="ltr">ROWID</code>s exceeds 1% of the dynamic shared pool size.</p>
</li>
<li>
<p>Too many rows were changed in a single registered object within a transaction (the upper limit is approximately 80).</p>
</li>
<li>
<p>Total length of the logical <code dir="ltr">ROWID</code>s of modified rows for an IOT is too large (the upper limit is approximately 1800 bytes).</p>
</li>
<li>
<p>You specified the Notification Grouping option <code dir="ltr">NTFN_GROUPING_TYPE</code> with the value <code dir="ltr">DBMS_CQ_NOTIFICATION</code>.<code dir="ltr">NTFN_GROUPING_TYPE_SUMMARY</code>, described in <a href="#CHDBHCGH">Section 15.7.2.6</a>.</p>
</li>
</ul>
<p>Because a <code dir="ltr">FULL-TABLE-NOTIFICATION</code> does not include <code dir="ltr">ROWID</code>s, the application that receives it must assume that the entire table (that is, all rows) might have changed.</p>
</div>
<!-- class="sect3" -->
<a id="CHDIIIIJ"></a>
<div id="ADFNS565" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">15.7.2.4</span> Operations Filter Option (OCN Notification Type Only)</h4>
<p>The Operations Filter option applies only when the notification type is OCN.</p>
<p>The Operations Filter option enables you to specify the types of operations that generate notifications.</p>
<p>The default is all operations. To specify that only some operations generate notifications, use the <code dir="ltr">OPERATIONS_FILTER</code> attribute of the <code dir="ltr">CQ_NOTIFICATION$_REG_INFO</code> object. With the <code dir="ltr">OPERATIONS_FILTER</code> attribute, specify the type of operation with the constant that represents it, which is defined in the <code dir="ltr">DBMS_CQ_NOTIFICATION</code> package, as follows:</p>
<div class="inftblinformal">
<table class="cellalignment296" title="Constants for Operations that Can Generate Change Notifications" summary="This table summarizes the operations that can generate change notifications and the constants that represent them in the DBMS_CQ_NOTIFICATIONS package." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t9">Operation</th>
<th class="cellalignment294" id="r1c2-t9">Constant</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t9" headers="r1c1-t9"><code dir="ltr">INSERT</code></td>
<td class="cellalignment295" headers="r2c1-t9 r1c2-t9"><code dir="ltr">DBMS_CQ_NOTIFICATION.INSERTOP</code></td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t9" headers="r1c1-t9"><code dir="ltr">UPDATE</code></td>
<td class="cellalignment295" headers="r3c1-t9 r1c2-t9"><code dir="ltr">DBMS_CQ_NOTIFICATION.UPDATEOP</code></td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t9" headers="r1c1-t9"><code dir="ltr">DELETE</code></td>
<td class="cellalignment295" headers="r4c1-t9 r1c2-t9"><code dir="ltr">DBMS_CQ_NOTIFICATION.DELETEOP</code></td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t9" headers="r1c1-t9"><code dir="ltr">ALTEROP</code></td>
<td class="cellalignment295" headers="r5c1-t9 r1c2-t9"><code dir="ltr">DBMS_CQ_NOTIFICATION.ALTEROP</code></td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r6c1-t9" headers="r1c1-t9"><code dir="ltr">DROPOP</code></td>
<td class="cellalignment295" headers="r6c1-t9 r1c2-t9"><code dir="ltr">DBMS_CQ_NOTIFICATION.DROPOP</code></td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r7c1-t9" headers="r1c1-t9"><code dir="ltr">UNKNOWNOP</code></td>
<td class="cellalignment295" headers="r7c1-t9 r1c2-t9"><code dir="ltr">DBMS_CQ_NOTIFICATION.UNKNOWNOP</code></td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r8c1-t9" headers="r1c1-t9">All (default)</td>
<td class="cellalignment295" headers="r8c1-t9 r1c2-t9"><code dir="ltr">DBMS_CQ_NOTIFICATION.ALL_OPERATIONS</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p>To specify multiple operations, use bitwise <code dir="ltr">OR</code>. For example:</p>
<pre dir="ltr">DBMS_CQ_NOTIFICATION.INSERTOP + DBMS_CQ_NOTIFICATION.DELETEOP
</pre>
<p><code dir="ltr">OPERATIONS_FILTER</code> has no effect if you also specify <code dir="ltr">QOS_QUERY</code> in the <code dir="ltr">QOSFLAGS</code> attribute, because <code dir="ltr">QOS_QUERY</code> specifies notification type QRCN.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS201" href="../ARPLS/d_cqnotif.htm#ARPLS201"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about the <code dir="ltr">DBMS_CQ_NOTIFICATION</code> package</div>
</div>
<!-- class="sect3" -->
<a id="CHDDAAAE"></a>
<div id="ADFNS566" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">15.7.2.5</span> Transaction Lag Option (OCN Notification Type Only)</h4>
<p>The Transaction Lag option applies only when the notification type is OCN.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This option is deprecated. To implement flow-of-control notifications, use <a href="#CHDBHCGH">Section 15.7.2.6</a>.</div>
<p>The Transaction Lag option specifies the number of transactions by which the client application can lag behind the database. If the number is 0, every transaction that changes a registered object results in a notification. If the number is 5, every fifth transaction that changes a registered object results in a notification. The database tracks intervening changes at object granularity and includes them in the notification, so that the client does not lose them.</p>
<p>A transaction lag greater than 0 is useful only if an application implements flow-of-control notifications. Ensure that the application generates notifications frequently enough to satisfy the lag, so that they are not deferred indefinitely.</p>
<p>If you specify <code dir="ltr">TRANSACTION_LAG</code>, then notifications do not include <code dir="ltr">ROWID</code>s, even if you also specified <code dir="ltr">QOS_ROWIDS</code>.</p>
</div>
<!-- class="sect3" -->
<a id="CHDBHCGH"></a>
<div id="ADFNS567" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">15.7.2.6</span> Notification Grouping Options</h4>
<p>By default, notifications are generated immediately after the event that causes them.</p>
<p>Notification Grouping options, which are attributes of the <code dir="ltr">CQ_NOTIFICATION$_REG_INFO</code> object, are:</p>
<div class="inftblinformal">
<table class="cellalignment296" title="Notification Grouping Options" summary="This table summarizes the notification grouping options." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t12">Attribute</th>
<th class="cellalignment294" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t12" headers="r1c1-t12"><code dir="ltr">NTFN_GROUPING_CLASS</code></td>
<td class="cellalignment295" headers="r2c1-t12 r1c2-t12">Specifies the class by which to group notifications. The only allowed values are <code dir="ltr">DBMS_CQ_NOTIFICATION</code>.<code dir="ltr">NTFN_GROUPING_CLASS_TIME</code>, which groups notifications by time, and zero, which is the default (notifications are generated immediately after the event that causes them).</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t12" headers="r1c1-t12"><code dir="ltr">NTFN_GROUPING_VALUE</code></td>
<td class="cellalignment295" headers="r3c1-t12 r1c2-t12">Specifies the time interval that defines the group, in seconds. For example, if this value is 900, notifications generated in the same 15-minute interval are grouped.</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t12" headers="r1c1-t12"><code dir="ltr">NTFN_GROUPING_TYPE</code></td>
<td class="cellalignment295" headers="r4c1-t12 r1c2-t12">Specifies the type of grouping, which is either of:
<ul>
<li>
<p><code dir="ltr">DBMS_CQ_NOTIFICATION</code>.<code dir="ltr">NTFN_GROUPING_TYPE_SUMMARY</code>: All notifications in the group are summarized into a single notification.</p>
<p><span class="bold">Note:</span> The single notification does not include <code dir="ltr">ROWID</code>s, even if you specified the <code dir="ltr">ROWID</code> option.</p>
</li>
<li>
<p><code dir="ltr">DBMS_CQ_NOTIFICATION</code>.<code dir="ltr">NTFN_GROUPING_TYPE_LAST</code>: Only the last notification in the group is published and the earlier ones discarded.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t12" headers="r1c1-t12"><code dir="ltr">NTFN_GROUPING_START_TIME</code></td>
<td class="cellalignment295" headers="r5c1-t12 r1c2-t12">Specifies when to start generating notifications. If specified as <code dir="ltr">NULL</code>, it defaults to the current system-generated time.</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r6c1-t12" headers="r1c1-t12"><code dir="ltr">NTFN_GROUPING_REPEAT_COUNT</code></td>
<td class="cellalignment295" headers="r6c1-t12 r1c2-t12">Specifies how many times to repeat the notification. Set to <code dir="ltr">DBMS_CQ_NOTIFICATION</code>.<code dir="ltr">NTFN_GROUPING_FOREVER</code> to receive notifications for the life of the registration. To receive at most <span class="italic">n</span> notifications during the life of the registration, set to <span class="italic">n</span>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
Notifications generated by timeouts, loss of privileges, and global events might be published before the specified grouping interval expires. If they are, any pending grouped notifications are also published before the interval expires.</div>
</div>
<!-- class="sect3" -->
<a id="CHDGJBFH"></a>
<div id="ADFNS568" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">15.7.2.7</span> Reliable Option</h4>
<p>By default, a CQN registration is stored in shared memory. To store it in a persistent database queue instead&mdash;that is, to generate <span class="bold">reliable notifications</span>&mdash;specify <code dir="ltr">QOS_RELIABLE</code> in the <code dir="ltr">QOSFLAGS</code> attribute of the <code dir="ltr">CQ_NOTIFICATION$_REG_INFO</code> object.</p>
<p>The advantage of reliable notifications is that if the database fails after generating them, it can still deliver them after it restarts. In an Oracle RAC environment, a surviving database instance can deliver them.</p>
<p>The disadvantage of reliable notifications is that they have higher CPU and I/O costs than default notifications do.</p>
</div>
<!-- class="sect3" -->
<a id="CHDJHGCB"></a>
<div id="ADFNS569" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">15.7.2.8</span> Purge-on-Notify and Timeout Options</h4>
<p>By default, a CQN registration survives until the application that created it explicitly deregisters it or until the database implicitly purges it (from loss of privileges, for example).</p>
<p>To purge the registration after it generates its first notification, specify <code dir="ltr">QOS_DEREG_NFY</code> in the <code dir="ltr">QOSFLAGS</code> attribute of the <code dir="ltr">CQ_NOTIFICATION$_REG_INFO</code> object.</p>
<p>To purge the registration after <span class="italic">n</span> seconds, specify <span class="italic">n</span> in the <code dir="ltr">TIMEOUT</code> attribute of the <code dir="ltr">CQ_NOTIFICATION$_REG_INFO</code> object.</p>
<p>You can use the Purge-on-Notify and Timeout options together.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BDCEJDDG"></a>
<div id="ADFNS570" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">15.7.3</span> Prerequisites for Creating CQN Registrations</h3>
<p>These are prerequisites for creating CQN registrations:</p>
<ul>
<li>
<p>You must have these privileges:</p>
<ul>
<li>
<p><code dir="ltr">EXECUTE</code> privilege on the <code dir="ltr">DBMS_CQ_NOTIFICATION</code> package, whose subprograms you use to create a registration</p>
</li>
<li>
<p><code dir="ltr">CHANGE</code> <code dir="ltr">NOTIFICATION</code> system privilege</p>
</li>
<li>
<p><code dir="ltr">READ</code> or <code dir="ltr">SELECT</code> privilege on each object to be registered</p>
</li>
</ul>
<p>Loss of privileges on an object associated with a registered query generates a notification&mdash;see <a href="#CHDEABJJ">Section 15.3.3</a>.</p>
</li>
<li>
<p>You must be connected as a non-SYS user.</p>
</li>
<li>
<p>You must not be in the middle of an uncommitted transaction.</p>
</li>
<li>
<p>The <code dir="ltr">dml_locks</code> <code dir="ltr">init</code>.<code dir="ltr">ora</code> parameter must have a nonzero value (as its default value does).</p>
<p>(This is also a prerequisite for receiving notifications.)</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
For QRCN support, the <code dir="ltr">COMPATIBLE</code> setting of the database must be at least 11.0.0.</div>
</div>
<!-- class="sect2" -->
<a id="BDCEHIDF"></a>
<div id="ADFNS571" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">15.7.4</span> Queries that Can Be Registered for Object Change Notification (OCN)</h3>
<p>Most queries can be registered for OCN, including those executed as part of stored procedures and <code dir="ltr">REF</code> cursors.</p>
<p>Queries that cannot be registered for OCN are:</p>
<ul>
<li>
<p>Queries on fixed tables or fixed views</p>
</li>
<li>
<p>Queries on user views</p>
</li>
<li>
<p>Queries that contain database links (dblinks)</p>
</li>
<li>
<p>Queries over materialized views</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can use synonyms in OCN registrations, but not in QRCN registrations.</div>
</div>
<!-- class="sect2" -->
<a id="CHDGEBFH"></a>
<div id="ADFNS572" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">15.7.5</span> Queries that Can Be Registered for Query Result Change Notification (QRCN)</h3>
<p>Some queries can be registered for QRCN in guaranteed mode, some can be registered for QRCN only in best-effort mode, and some cannot be registered for QRCN in either mode. (For information about modes, see <a href="#CHDDDGBE">Section 15.2.1</a> and <a href="#CHDEJCJF">Section 15.2.2</a>.)</p>
<p class="subhead2"><a id="ADFNS1064"></a>Topics:</p>
<ul>
<li>
<p><a href="#CHDEHADG">Queries that Can Be Registered for QRCN in Guaranteed Mode</a></p>
</li>
<li>
<p><a href="#CHDGHCCC">Queries that Can Be Registered for QRCN Only in Best-Effort Mode</a></p>
</li>
<li>
<p><a href="#CHDFADHD">Queries that Cannot Be Registered for QRCN in Either Mode</a></p>
</li>
</ul>
<a id="CHDEHADG"></a>
<div id="ADFNS573" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">15.7.5.1</span> Queries that Can Be Registered for QRCN in Guaranteed Mode</h4>
<p>To be registered for QRCN in guaranteed mode, a query must conform to these rules:</p>
<ul>
<li>
<p>Every column that it references is either a <code dir="ltr">NUMBER</code> data type or a <code dir="ltr">VARCHAR2</code> data type.</p>
</li>
<li>
<p>Arithmetic operators in column expressions are limited to these binary operators, and their operands are columns with numeric data types:</p>
<ul>
<li>
<p><code dir="ltr">+</code> (addition)</p>
</li>
<li>
<p><code dir="ltr">-</code> (subtraction, not unary minus)</p>
</li>
<li>
<p><code dir="ltr">*</code> (multiplication)</p>
</li>
<li>
<p><code dir="ltr">/</code> (division)</p>
</li>
</ul>
</li>
<li>
<p>Comparison operators in the predicate are limited to:</p>
<ul>
<li>
<p><code dir="ltr">&lt;</code> (less than)</p>
</li>
<li>
<p><code dir="ltr">&lt;=</code> (less than or equal to)</p>
</li>
<li>
<p><code dir="ltr">=</code> (equal to)</p>
</li>
<li>
<p><code dir="ltr">&gt;=</code> (greater than or equal to)</p>
</li>
<li>
<p><code dir="ltr">&gt;</code> (greater than)</p>
</li>
<li>
<p><code dir="ltr">&lt;&gt;</code> or <code dir="ltr">!=</code> (not equal to)</p>
</li>
<li>
<p><code dir="ltr">IS</code> <code dir="ltr">NULL</code></p>
</li>
<li>
<p><code dir="ltr">IS</code> <code dir="ltr">NOT</code> <code dir="ltr">NULL</code></p>
</li>
</ul>
</li>
<li>
<p>Boolean operators in the predicate are limited to <code dir="ltr">AND</code>, <code dir="ltr">OR</code>, and <code dir="ltr">NOT</code>.</p>
</li>
<li>
<p>The query contains no aggregate functions (such as <code dir="ltr">SUM</code>, <code dir="ltr">COUNT</code>, <code dir="ltr">AVERAGE</code>, <code dir="ltr">MIN</code>, and <code dir="ltr">MAX</code>).</p>
<p>For a list of SQL aggregate functions, see <a class="olink SQLRF20035" href="../SQLRF/functions003.htm#SQLRF20035"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</li>
</ul>
<p>Guaranteed mode supports most queries on single tables and some inner equijoins, such as:</p>
<pre dir="ltr">SELECT SALARY FROM EMPLOYEES, DEPARTMENTS
  WHERE EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID
    AND DEPARTMENTS.LOCATION_ID = 1700;
</pre>
<div class="infobox-note">
<p class="notep1">Notes:</p>
<ul>
<li>
<p>Sometimes the query optimizer uses an execution plan that makes a query incompatible for guaranteed mode (for example, <code dir="ltr">OR</code>-expansion). For information about the query optimizer, see <a class="olink TGSQL193" href="../TGSQL/tgsql_optcncpt.htm#TGSQL193"><span class="italic">Oracle Database SQL Tuning Guide</span></a>.</p>
</li>
<li>
<p>Queries that can be registered in guaranteed mode can also be registered in best-effort mode, but results might differ, because best-effort mode can cause false positives even for queries that CQN does not simplify. For details, see <a href="#CHDEJCJF">Section 15.2.2</a>.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="CHDGHCCC"></a>
<div id="ADFNS574" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">15.7.5.2</span> Queries that Can Be Registered for QRCN Only in Best-Effort Mode</h4>
<p>A query that does any of the following can be registered for QRCN only in best-effort mode, and its simplified version generates notifications at object granularity:</p>
<ul>
<li>
<p>Refers to columns that have encryption enabled</p>
</li>
<li>
<p>Has more than 10 items of the same type in the <code dir="ltr">SELECT</code> list</p>
</li>
<li>
<p>Has expressions that include any of these:</p>
<ul>
<li>
<p>String functions (such as <code dir="ltr">SUBSTR</code>, <code dir="ltr">LTRIM</code>, and <code dir="ltr">RTRIM</code>)</p>
</li>
<li>
<p>Arithmetic functions (such as <code dir="ltr">TRUNC</code>, <code dir="ltr">ABS</code>, and <code dir="ltr">SQRT</code>)</p>
<p>For a list of SQL functions, see <a class="olink SQLRF006" href="../SQLRF/functions.htm#SQLRF006"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</li>
<li>
<p>Pattern-matching conditions <code dir="ltr">LIKE</code> and <code dir="ltr">REGEXP_LIKE</code></p>
</li>
<li>
<p><code dir="ltr">EXISTS</code> or <code dir="ltr">NOT</code> <code dir="ltr">EXISTS</code> condition</p>
</li>
</ul>
</li>
</ul>
<ul>
<li>
<p>Has disjunctions involving predicates defined on columns from different tables. For example:</p>
<pre dir="ltr">SELECT EMPLOYEE_ID, DEPARTMENT_ID
  FROM EMPLOYEES, DEPARTMENTS
    WHERE EMPLOYEES.EMPLOYEE_ID = 10
      OR DEPARTMENTS.DEPARTMENT_ID = &#39;IT&#39;;
</pre></li>
<li>
<p>Has user rowid access. For example:</p>
<pre dir="ltr">SELECT DEPARTMENT_ID
  FROM DEPARTMENTS
    WHERE ROWID = &#39;AAANkdAABAAALinAAF&#39;;
</pre></li>
<li>
<p>Has any join other than an inner join</p>
</li>
<li>
<p>Has an execution plan that involves any of these:</p>
<ul>
<li>
<p>Bitmap join, domain, or function-based indexes</p>
</li>
<li>
<p><code dir="ltr">UNION</code> <code dir="ltr">ALL</code> or <code dir="ltr">CONCATENATION</code></p>
<p>(Either in the query itself, or as the result of an <code dir="ltr">OR</code>-expansion execution plan chosen by the query optimizer.)</p>
</li>
<li>
<p><code dir="ltr">ORDER</code> <code dir="ltr">BY</code> or <code dir="ltr">GROUP</code> <code dir="ltr">BY</code></p>
<p>(Either in the query itself, or as the result of a <code dir="ltr">SORT</code> operation with an <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> option in the execution plan chosen by the query optimizer.)</p>
</li>
<li>
<p>Partitioned index-organized table (IOT) with overflow segment</p>
</li>
<li>
<p>Clustered objects</p>
</li>
<li>
<p>Parallel execution</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CHDFADHD"></a>
<div id="ADFNS575" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">15.7.5.3</span> Queries that Cannot Be Registered for QRCN in Either Mode</h4>
<p>A query that refers to any of the following cannot be registered for QRCN in either guaranteed or best-effort mode:</p>
<ul>
<li>
<p>Views</p>
</li>
<li>
<p>Tables that are fixed, remote, or have Virtual Private Database (VPD) policies enabled</p>
</li>
<li>
<p><code dir="ltr">DUAL</code> (in the <code dir="ltr">SELECT</code> list)</p>
</li>
<li>
<p>Synonyms</p>
</li>
<li>
<p>Calls to user-defined PL/SQL subprograms</p>
</li>
<li>
<p>Operators not listed in <a href="#CHDEHADG">Section 15.7.5.1</a></p>
</li>
<li>
<p>The aggregate function <code dir="ltr">COUNT</code></p>
<p>(Other aggregate functions are allowed in best-effort mode, but not in guaranteed mode.)</p>
</li>
<li>
<p>Application contexts; for example:</p>
<pre dir="ltr">SELECT SALARY FROM EMPLOYEES
WHERE USER = SYS_CONTEXT(&#39;USERENV&#39;, &#39;SESSION_USER&#39;);
</pre></li>
<li>
<p><code dir="ltr">SYSDATE</code>, <code dir="ltr">SYSTIMESTAMP</code>, or <code dir="ltr">CURRENT</code> <code dir="ltr">TIMESTAMP</code></p>
</li>
</ul>
<p>Also, a query that the query optimizer has rewritten using a materialized view cannot be registered for QRCN. For information about the query optimizer, see <a class="olink TGSQL193" href="../TGSQL/tgsql_optcncpt.htm#TGSQL193"><span class="italic">Oracle Database SQL Tuning Guide</span></a>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BGBHFEDC"></a>
<div id="ADFNS576" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">15.7.6</span> Using PL/SQL to Register Queries for CQN</h3>
<p>To use PL/SQL to create a CQN registration, follow these steps:</p>
<ol>
<li>
<p>Create a stored PL/SQL procedure to serve as the notification handler.</p>
</li>
<li>
<p>Create a <code dir="ltr">CQ_NOTIFICATION$_REG_INFO</code> object that specifies the name of the notification handler, the notification type, and other attributes of the registration.</p>
</li>
<li>
<p>In your client application, use the <code dir="ltr">DBMS_CQ_NOTIFICATION</code>.<code dir="ltr">NEW_REG_START</code> function to open a registration block.</p>
</li>
<li>
<p>Run the queries to register. (Do not run DML or DDL operations.)</p>
</li>
<li>
<p>Close the registration block, using the <code dir="ltr">DBMS_CQ_NOTIFICATION</code>.<code dir="ltr">REG_END</code> function.</p>
</li>
</ol>
<p class="subhead2"><a id="ADFNS1065"></a>Topics:</p>
<ul>
<li>
<p><a href="#CHDEDCCG">Creating a PL/SQL Notification Handler</a></p>
</li>
<li>
<p><a href="#g1721714">Creating a CQ_NOTIFICATION$_REG_INFO Object</a></p>
</li>
<li>
<p><a href="#CHDDGFCA">Identifying Individual Queries in a Notification</a></p>
</li>
<li>
<p><a href="#g1683079">Adding Queries to an Existing Registration</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS201" href="../ARPLS/d_cqnotif.htm#ARPLS201"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about the <code dir="ltr">CQ_NOTIFICATION$_REG_INFO</code> object and the functions <code dir="ltr">NEW_REG_START</code> and <code dir="ltr">REG_END</code>, all of which are defined in the <code dir="ltr">DBMS_CQ_NOTIFICATION</code> package</div>
<a id="CHDEDCCG"></a>
<div id="ADFNS577" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">15.7.6.1</span> Creating a PL/SQL Notification Handler</h4>
<p>The PL/SQL stored procedure that you create to serve as the notification handler must have this signature:</p>
<pre dir="ltr">PROCEDURE <span class="italic">schema_name.proc_name</span>(<span class="italic">ntfnds</span> IN CQ_NOTIFICATION$_DESCRIPTOR)
</pre>
<p>In the preceding signature, <code dir="ltr"><span class="codeinlineitalic">schema_name</span></code> is the name of the database schema, <code dir="ltr"><span class="codeinlineitalic">proc_name</span></code> is the name of the stored procedure, and <code dir="ltr"><span class="codeinlineitalic">ntfnds</span></code> is the notification descriptor.</p>
<p>The notification descriptor is a <code dir="ltr">CQ_NOTIFICATION$_DESCRIPTOR</code> object, whose attributes describe the details of the change (transaction ID, type of change, queries affected, tables modified, and so on).</p>
<p>The <code dir="ltr">JOBQ</code> process passes the notification descriptor, <code dir="ltr"><span class="codeinlineitalic">ntfnds</span></code>, to the notification handler, <code dir="ltr"><span class="codeinlineitalic">proc_name</span></code>, which handles the notification according to its application requirements. (This is step <a href="#CHDCABFC">6</a> in <a href="#CHECFHCH">Figure 15-2</a>.)</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The notification handler runs inside a job queue process. The <a class="olink REFRN10077" href="../REFRN/GUID-B8B68D16-00A3-43DD-BE39-01F877880955.htm#REFRN10077"><code dir="ltr">JOB_QUEUE_PROCESSES</code></a> initialization parameter specifies the maximum number of processes that can be created for the execution of jobs. You must set <a class="olink REFRN10077" href="../REFRN/GUID-B8B68D16-00A3-43DD-BE39-01F877880955.htm#REFRN10077"><code dir="ltr">JOB_QUEUE_PROCESSES</code></a> to a nonzero value to receive PL/SQL notifications.</div>
</div>
<!-- class="sect3" -->
<a id="g1721714"></a>
<div id="ADFNS578" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">15.7.6.2</span> Creating a CQ_NOTIFICATION$_REG_INFO Object</h4>
<p>An object of type <a id="sthref772"></a><code dir="ltr">CQ_NOTIFICATION$_REG_INFO</code> specifies the notification handler that the database runs when a registered objects changes. In SQL*Plus, you can view its type attributes by running this statement:</p>
<pre dir="ltr">DESC CQ_NOTIFICATION$_REG_INFO
</pre>
<p><a href="#CHEEDHCG">Table 15-2</a> describes the attributes of <code dir="ltr">SYS</code>.<code dir="ltr">CQ_NOTIFICATION$_REG_INFO</code>.</p>
<div id="ADFNS579" class="tblhruleformal">
<p class="titleintable"><a id="sthref773"></a><a id="CHEEDHCG"></a>Table 15-2 Attributes of CQ_NOTIFICATION$_REG_INFO</p>
<table class="cellalignment296" title="Attributes of CQ_NOTIFICATION$_REG_INFO" summary="This table summarizes the attributes of the SYS.CHNF$_REG_INFO_OC4J datatype." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t19">Attribute</th>
<th class="cellalignment294" id="r1c2-t19">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t19" headers="r1c1-t19">
<p><code dir="ltr">CALLBACK</code></p>
</td>
<td class="cellalignment295" headers="r2c1-t19 r1c2-t19">
<p>Specifies the name of the PL/SQL procedure to be executed when a notification is generated (a notification handler). You must specify the name in the form <code dir="ltr"><span class="codeinlineitalic">schema_name</span></code>.<code dir="ltr"><span class="codeinlineitalic">procedure_name</span></code>, for example, <code dir="ltr">hr</code>.<code dir="ltr">dcn_callback</code>.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t19" headers="r1c1-t19">
<p><code dir="ltr">QOSFLAGS</code></p>
</td>
<td class="cellalignment295" headers="r3c1-t19 r1c2-t19">
<p>Specifies one or more quality-of-service flags, which are constants in the <code dir="ltr">DBMS_CQ_NOTIFICATION</code> package. For their names and descriptions, see <a href="#g4923183">Table 15-3</a>.</p>
<p>To specify multiple quality-of-service flags, use bitwise <code dir="ltr">OR</code>. For example: <code dir="ltr">DBMS_CQ_NOTIFICATION.QOS_RELIABLE + DBMS_CQ_NOTIFICATION.QOS_ROWIDS</code></p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t19" headers="r1c1-t19">
<p><code dir="ltr">TIMEOUT</code></p>
</td>
<td class="cellalignment295" headers="r4c1-t19 r1c2-t19">
<p>Specifies the timeout period for registrations. If set to a nonzero value, it specifies the time in seconds after which the database purges the registration. If <code dir="ltr">0</code> or <code dir="ltr">NULL</code>, then the registration persists until the client explicitly deregisters it.</p>
<p>Can be combined with the <code dir="ltr">QOSFLAGS</code> attribute with its <code dir="ltr">QOS_DEREG_NFY</code> flag.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t19" headers="r1c1-t19">
<p><code dir="ltr">OPERATIONS_FILTER</code></p>
</td>
<td class="cellalignment295" headers="r5c1-t19 r1c2-t19">
<p>Applies only to OCN (described in <a href="#CHDEFIFJ">Section 15.1</a>). Has no effect if you specify the <code dir="ltr">QOS_FLAGS</code> attribute with its <code dir="ltr">QOS_QUERY</code> flag.</p>
<p>Filters messages based on types of SQL statement. You can specify these constants in the <code dir="ltr">DBMS_CQ_NOTIFICATION</code> package:</p>
<ul>
<li>
<p><code dir="ltr">ALL_OPERATIONS</code> notifies on all changes</p>
</li>
<li>
<p><code dir="ltr">INSERTOP</code> notifies on inserts</p>
</li>
<li>
<p><code dir="ltr">UPDATEOP</code> notifies on updates</p>
</li>
<li>
<p><code dir="ltr">DELETEOP</code> notifies on deletes</p>
</li>
<li>
<p><code dir="ltr">ALTEROP</code> notifies on <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> operations</p>
</li>
<li>
<p><code dir="ltr">DROPOP</code> notifies on <code dir="ltr">DROP</code> <code dir="ltr">TABLE</code> operations</p>
</li>
<li>
<p><code dir="ltr">UNKNOWNOP</code> notifies on unknown operations</p>
</li>
</ul>
<p>You can specify a combination of operations with a bitwise <code dir="ltr">OR</code>. For example: <code dir="ltr">DBMS_CQ_NOTIFICATION.INSERTOP</code> + <code dir="ltr">DBMS_CQ_NOTIFICATION.DELETEOP</code>.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r6c1-t19" headers="r1c1-t19">
<p><code dir="ltr">TRANSACTION_LAG</code></p>
</td>
<td class="cellalignment295" headers="r6c1-t19 r1c2-t19">
<p><span class="bold">Deprecated</span>. To implement flow-of-control notifications, use the <code dir="ltr">NTFN_GROUPING_*</code> attributes.</p>
<p>Applies only to OCN (described in <a href="#CHDEFIFJ">Section 15.1</a>). Has no effect if you specify the <code dir="ltr">QOS_FLAGS</code> attribute with its <code dir="ltr">QOS_QUERY</code> flag.</p>
<p>Specifies the number of transactions or database changes by which the client can lag behind the database. If 0, then the client receives an invalidation message as soon as it is generated. If 5, then every fifth transaction that changes a registered object results in a notification. The database tracks intervening changes at an object granularity and bundles the changes along with the notification. Thus, the client does not lose intervening changes.</p>
<p>Most applications that must be notified of changes to an object on transaction commit without further deferral are expected to chose 0 transaction lag. A nonzero transaction lag is useful only if an application implements flow control on notifications. When using nonzero transaction lag, Oracle recommends that the application workload has the property that notifications are generated at a reasonable frequency. Otherwise, notifications might be deferred indefinitely till the lag is satisfied.</p>
<p>If you specify <code dir="ltr">TRANSACTION_LAG</code>, then the <code dir="ltr">ROWID</code> level granularity is unavailable in the notification messages even if you specified <code dir="ltr">QOS_ROWIDS</code> during registration.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r7c1-t19" headers="r1c1-t19">
<p><code dir="ltr">NTFN_GROUPING_CLASS</code></p>
</td>
<td class="cellalignment295" headers="r7c1-t19 r1c2-t19">
<p>Specifies the class by which to group notifications. The only allowed value is <code dir="ltr">DBMS_CQ_NOTIFICATION</code>.<code dir="ltr">NTFN_GROUPING_CLASS_TIME</code>, which groups notifications by time.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r8c1-t19" headers="r1c1-t19">
<p><code dir="ltr">NTFN_GROUPING_VALUE</code></p>
</td>
<td class="cellalignment295" headers="r8c1-t19 r1c2-t19">
<p>Specifies the time interval that defines the group, in seconds. For example, if this value is 900, notifications generated in the same 15-minute interval are grouped.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r9c1-t19" headers="r1c1-t19">
<p><code dir="ltr">NTFN_GROUPING_TYPE</code></p>
</td>
<td class="cellalignment295" headers="r9c1-t19 r1c2-t19">
<p>Specifies either of these types of grouping:</p>
<ul>
<li>
<p><code dir="ltr">DBMS_CQ_NOTIFICATION</code>.<code dir="ltr">NTFN_GROUPING_TYPE_SUMMARY</code>: All notifications in the group are summarized into a single notification.</p>
</li>
<li>
<p><code dir="ltr">DBMS_CQ_NOTIFICATION</code>.<code dir="ltr">NTFN_GROUPING_TYPE_LAST</code>: Only the last notification in the group is published and the earlier ones discarded.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r10c1-t19" headers="r1c1-t19">
<p><code dir="ltr">NTFN_GROUPING_START_TIME</code></p>
</td>
<td class="cellalignment295" headers="r10c1-t19 r1c2-t19">
<p>Specifies when to start generating notifications. If specified as <code dir="ltr">NULL</code>, it defaults to the current system-generated time.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r11c1-t19" headers="r1c1-t19">
<p><code dir="ltr">NTFN_GROUPING_REPEAT_COUNT</code></p>
</td>
<td class="cellalignment295" headers="r11c1-t19 r1c2-t19">
<p>Specifies how many times to repeat the notification. Set to <code dir="ltr">DBMS_CQ_NOTIFICATION</code>.<code dir="ltr">NTFN_GROUPING_FOREVER</code> to receive notifications for the life of the registration. To receive at most <span class="italic">n</span> notifications during the life of the registration, set to <span class="italic">n</span>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p>The <a id="sthref774"></a>quality-of-service flags in <a href="#g4923183">Table 15-3</a> are constants in the <code dir="ltr">DBMS_CQ_NOTIFICATION</code> package. You can specify them with the <code dir="ltr">QOS_FLAGS</code> attribute of <code dir="ltr">CQ_NOTIFICATION$_REG_INFO</code> (see <a href="#CHEEDHCG">Table 15-2</a>).</p>
<div id="ADFNS580" class="tblhruleformal">
<p class="titleintable"><a id="sthref775"></a><a id="g4923183"></a>Table 15-3 Quality-of-Service Flags</p>
<table class="cellalignment296" title="Quality-of-Service Flags" summary="This table summarizes the quality-of-service flags." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t20">Flag</th>
<th class="cellalignment294" id="r1c2-t20">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t20" headers="r1c1-t20">
<p><code dir="ltr">QOS_DEREG_NFY</code></p>
</td>
<td class="cellalignment295" headers="r2c1-t20 r1c2-t20">
<p>Purges the registration after the first notification.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t20" headers="r1c1-t20">
<p><code dir="ltr">QOS_RELIABLE</code></p>
</td>
<td class="cellalignment295" headers="r3c1-t20 r1c2-t20">
<p>Stores notifications in a persistent database queue.</p>
<p>In an Oracle RAC environment, if a database instance fails, surviving database instances can deliver any queued notification messages.</p>
<p><span class="bold">Default:</span> Notifications are stored in shared memory, which performs more efficiently.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t20" headers="r1c1-t20">
<p><code dir="ltr">QOS_ROWIDS</code></p>
</td>
<td class="cellalignment295" headers="r4c1-t20 r1c2-t20">
<p>Includes the <code dir="ltr">ROWID</code> of each changed row in the notification.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t20" headers="r1c1-t20">
<p><code dir="ltr">QOS_QUERY</code></p>
</td>
<td class="cellalignment295" headers="r5c1-t20 r1c2-t20">
<p>Registers queries for QRCN, described in <a href="#CHDIEHHJ">Section 15.2</a>.</p>
<p>If a query cannot be registered for QRCN, an error is generated at registration time, unless you also specify <code dir="ltr">QOS_BEST_EFFORT</code>.</p>
<p><span class="bold">Default:</span> Queries are registered for OCN, described in <a href="#CHDEFIFJ">Section 15.1</a></p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r6c1-t20" headers="r1c1-t20">
<p><code dir="ltr">QOS_BEST_EFFORT</code></p>
</td>
<td class="cellalignment295" headers="r6c1-t20 r1c2-t20">
<p>Used with <code dir="ltr">QOS_QUERY</code>. Registers simplified versions of queries that are too complex for query result change evaluation; in other words, registers queries for QRCN in best-effort mode, described in <a href="#CHDEJCJF">Section 15.2.2</a>.</p>
<p>To see which queries were simplified, query the static data dictionary view <code dir="ltr">DBA_CQ_NOTIFICATION_QUERIES</code> or <code dir="ltr">USER_CQ_NOTIFICATION_QUERIES</code>. These views give the <code dir="ltr">QUERYID</code> and the text of each registered query.</p>
<p><span class="bold">Default:</span> Queries are registered for QRCN in guaranteed mode, described in <a href="#CHDDDGBE">Section 15.2.1</a></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p>Suppose that you must invoke the procedure <code dir="ltr">HR</code>.<code dir="ltr">dcn_callback</code> whenever a registered object changes. In <a href="#BGBFBHFD">Example 15-4</a>, you create a <code dir="ltr">CQ_NOTIFICATION$_REG_INFO</code> object that specifies that <code dir="ltr">HR</code>.<code dir="ltr">dcn_callback</code> receives notifications. To create the object you must have <code dir="ltr">EXECUTE</code> privileges on the <code dir="ltr">DBMS_CQ_NOTIFICATION</code> package.</p>
<div id="ADFNS581" class="example">
<p class="titleinexample"><a id="BGBFBHFD"></a>Example 15-4 Creating a CQ_NOTIFICATION$_REG_INFO Object</p>
<pre dir="ltr">DECLARE
  v_cn_addr CQ_NOTIFICATION$_REG_INFO;

BEGIN
  -- Create object:

  v_cn_addr := CQ_NOTIFICATION$_REG_INFO (
    &#39;HR.dcn_callback&#39;,                 -- PL/SQL notification handler
    DBMS_CQ_NOTIFICATION.QOS_QUERY     -- notification type QRCN
    + DBMS_CQ_NOTIFICATION.QOS_ROWIDS, -- include rowids of changed objects
    0,                          -- registration persists until unregistered
    0,                          -- notify on all operations
    0                           -- notify immediately
    );

  -- Register queries: ...
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="CHDDGFCA"></a>
<div id="ADFNS582" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">15.7.6.3</span> Identifying Individual Queries in a Notification</h4>
<p>Any query in a registered list of queries can cause a continuous query notification. To know when a certain query causes a notification, use the <code dir="ltr">DBMS_CQ_NOTIFICATION</code>.<code dir="ltr">CQ_NOTIFICATION_QUERYID</code> function in the <code dir="ltr">SELECT</code> list of that query. For example:</p>
<pre dir="ltr">SELECT EMPLOYEE_ID, SALARY, <span class="bold">DBMS_CQ_NOTIFICATION.CQ_NOTIFICATION_QUERYID</span>
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 10;
</pre>
<p>Result:</p>
<pre dir="ltr">EMPLOYEE_ID     SALARY <span class="bold">CQ_NOTIFICATION_QUERYID</span>
----------- ---------- -----------------------
        200       2800                       <span class="bold">0</span>
 
1 row selected.
</pre>
<p>When that query causes a notification, the notification includes the query ID.</p>
</div>
<!-- class="sect3" -->
<a id="g1683079"></a>
<div id="ADFNS583" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">15.7.6.4</span> Adding Queries to an Existing Registration</h4>
<p>To add queries to an existing registration, follow these steps:</p>
<ol>
<li>
<p>Retrieve the registration ID of the existing registration.</p>
<p>You can retrieve it from either saved output or a query of <code dir="ltr">*_CHANGE_NOTIFICATION_REGS</code>.</p>
</li>
<li>
<p>Open the existing registration by calling the procedure <code dir="ltr">DBMS_CQ_NOTIFICATION</code>.<code dir="ltr">ENABLE_REG</code> with the registration ID as the parameter.</p>
</li>
<li>
<p>Run the queries to register. (Do not run DML or DDL operations.)</p>
</li>
<li>
<p>Close the registration, using the <code dir="ltr">DBMS_CQ_NOTIFICATION</code>.<code dir="ltr">REG_END</code> function.</p>
</li>
</ol>
<p><a href="#BGBDIIBJ">Example 15-5</a> adds a query to an existing registration whose registration ID is 21.</p>
<div id="ADFNS584" class="example">
<p class="titleinexample"><a id="BGBDIIBJ"></a>Example 15-5 Adding a Query to an Existing Registration</p>
<pre dir="ltr">DECLARE
  v_cursor SYS_REFCURSOR;

BEGIN
  <span class="bold">-- Open existing registration</span>
  DBMS_CQ_NOTIFICATION.ENABLE_REG(21);
  OPEN v_cursor FOR
    <span class="bold">-- Run query to be registered</span>
    SELECT DEPARTMENT_ID
      FROM HR.DEPARTMENTS;  -- register this query
  CLOSE v_cursor;
  <span class="bold">-- Close registration</span>
  DBMS_CQ_NOTIFICATION.REG_END;
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDJBFEC"></a>
<div id="ADFNS1303" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">15.7.7</span> Best Practices for CQN Registrations</h3>
<p>For best CQN performance, follow these registration guidelines:</p>
<ul>
<li>
<p>Register few queries&mdash;preferably those that reference objects that rarely change.</p>
<p>Extremely volatile registered objects cause numerous notifications, whose overhead slows OLTP throughput.</p>
</li>
<li>
<p>Minimize the number of duplicate registrations of any given object, to avoid replicating a notification message for multiple recipients.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDIEJEI"></a>
<div id="ADFNS1020" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">15.7.8</span> Troubleshooting CQN Registrations</h3>
<p>If you are unable to create a registration, or if you have created a registration but are not receiving the notifications that you expected, the problem might be one of these:</p>
<ul>
<li>
<p>The <code dir="ltr">JOB_QUEUE_PROCESSES</code> parameter is not set to a nonzero value.</p>
<p>This prevents you from receiving PL/SQL notifications through the notification handler.</p>
</li>
<li>
<p>You were connected as a SYS user when you created the registrations.</p>
<p>You must be connected as a non-SYS user to create CQN registrations.</p>
</li>
<li>
<p>You changed a registered object, but did not commit the transaction.</p>
<p>Notifications are generated only when the transaction commits.</p>
</li>
<li>
<p>The registrations were not successfully created in the database.</p>
<p>To check, query the static data dictionary view <code dir="ltr">*_CHANGE_NOTIFICATION_REGS</code>. For example, this statement displays all registrations and registered objects for the current user:</p>
<pre dir="ltr">SELECT REGID, TABLE_NAME FROM USER_CHANGE_NOTIFICATION_REGS;
</pre></li>
<li>
<p>Runtime errors occurred during the execution of the notification handler.</p>
<p>If so, they were logged to the trace file of the <code dir="ltr">JOBQ</code> process that tried to run the procedure. The name of the trace file usually has this form:</p>
<pre dir="ltr"><span class="italic">ORACLE_SID</span>_j<span class="italic">number</span>_<span class="italic">PID</span>.trc
</pre>
<p>For example, if the ORACLE_SID is <code dir="ltr">dbs1</code> and the process ID (PID) of the <code dir="ltr">JOBQ</code> process is 12483, the name of the trace file is usually <code dir="ltr">dbs1_j000_12483</code>.<code dir="ltr">trc</code>.</p>
<p>Suppose that a registration is created with <code dir="ltr">&#39;chnf_callback</code>&#39; as the notification handler and registration ID 100. Suppose that <code dir="ltr">&#39;chnf_callback</code>&#39; was not defined in the database. Then the <code dir="ltr">JOBQ</code> trace file might contain a message of the form:</p>
<pre dir="ltr">****************************************************************************
   Runtime error during execution of PL/SQL cbk <span class="bold">chnf_callback</span> for reg CHNF<span class="bold">100</span>.
   Error in PLSQL notification of msgid:
   Queue :
   Consumer Name :
   PLSQL function :<span class="bold">chnf_callback</span>
   Exception Occured, Error msg:
   ORA-00604: error occurred at recursive SQL level 2
   ORA-06550: line 1, column 7: 
   <span class="bold">PLS-00201: identifier &#39;CHNF_CALLBACK&#39; must be declared</span>
   ORA-06550: line 1, column 7:
   PL/SQL: Statement ignored
****************************************************************************
</pre>
<p>If runtime errors occurred during the execution of the notification handler, create a very simple version of the notification handler to verify that you are receiving notifications, and then gradually add application logic.</p>
<p>An example of a very simple notification handler is:</p>
<pre dir="ltr">REM Create table in HR schema to hold count of notifications received.
CREATE TABLE nfcount(cnt NUMBER);
INSERT INTO nfcount (cnt) VALUES(0);
COMMIT;
CREATE OR REPLACE PROCEDURE chnf_callback
  (ntfnds IN CQ_NOTIFICATION$_DESCRIPTOR)
IS
BEGIN
  UPDATE nfcount SET cnt = cnt+1;
  COMMIT;
END;
/
</pre></li>
<li>
<p>There is a time lag between the commit of a transaction and the notification received by the end user.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDDEECH"></a>
<div id="ADFNS593" class="sect2">
<h3 class="sect2"><span class="secnum">15.7.9</span> Deleting Registrations</h3>
<p>To delete a registration, call the procedure <code dir="ltr">DBMS_CQ_NOTIFICATION</code>.<code dir="ltr">DEREGISTER</code> with the registration ID as the parameter. For example, this statement deregisters the registration whose registration ID is 21:</p>
<pre dir="ltr">DBMS_CQ_NOTIFICATION.DEREGISTER(21);
</pre>
<p>Only the user who created the registration or the SYS user can deregister it.</p>
</div>
<!-- class="sect2" -->
<a id="CHEJIHGB"></a>
<div id="ADFNS1302" class="sect2">
<h3 class="sect2"><span class="secnum">15.7.10</span> Configuring CQN: Scenario</h3>
<p>In this scenario, you are a developer who manages a web application that provides employee data: name, location, phone number, and so on. The application, which runs on Oracle Application Server, is heavily used and processes frequent queries of the <code dir="ltr">HR</code>.<code dir="ltr">EMPLOYEES</code> and <code dir="ltr">HR</code>.<code dir="ltr">DEPARTMENTS</code> tables in the back-end database. Because these tables change relatively infrequently, the application can improve performance by caching the query results. Caching avoids a round trip to the back-end database and server-side execution latency.</p>
<p>You can use the <code dir="ltr">DBMS_CQ_NOTIFICATION</code> package to register queries based on <code dir="ltr">HR</code>.<code dir="ltr">EMPLOYEES</code> and <code dir="ltr">HR</code>.<code dir="ltr">DEPARTMENTS</code> tables. To configure CQN, you follow these steps:</p>
<ol>
<li id="CHDIDAHJ">
<p>Create a server-side PL/SQL stored procedure to process the notifications, as instructed in <a href="#CHEIFAEJ">Section 15.7.10.1</a>.</p>
</li>
<li id="CHDCGHHG">
<p>Register the queries on the <code dir="ltr">HR</code>.<code dir="ltr">EMPLOYEES</code> and <code dir="ltr">HR</code>.<code dir="ltr">DEPARTMENTS</code> tables for QRCN, as instructed in <a href="#CHECHGED">Section 15.7.10.2</a>.</p>
</li>
</ol>
<p>After you complete these steps, any committed change to the result of a query registered in step <a href="#CHDCGHHG">2</a> causes the notification handler created in step <a href="#CHDIDAHJ">1</a> to notify the web application of the change, whereupon the web application refreshes the cache by querying the back-end database.</p>
<p class="subhead2"><a id="ADFNS1067"></a>Topics:</p>
<ul>
<li>
<p><a href="#CHEIFAEJ">Creating a PL/SQL Notification Handler</a></p>
</li>
<li>
<p><a href="#CHECHGED">Registering the Queries</a></p>
</li>
</ul>
<a id="CHEIFAEJ"></a>
<div id="ADFNS594" class="sect3">
<h4 class="sect3"><span class="secnum">15.7.10.1</span> Creating a PL/SQL Notification Handler</h4>
<p>Create a server-side stored PL/SQL procedure to process notifications as follows:</p>
<ol>
<li>
<p>Connect to the database <code dir="ltr">AS</code> <code dir="ltr">SYSDBA</code>.</p>
</li>
<li>
<p>Grant the required privileges to <code dir="ltr">HR</code>:</p>
<pre dir="ltr">GRANT EXECUTE ON DBMS_CQ_NOTIFICATION TO HR;
GRANT CHANGE NOTIFICATION TO HR;
</pre></li>
<li>
<p>Enable the <code dir="ltr">JOB_QUEUE_PROCESSES</code> parameter to receive notifications:</p>
<pre dir="ltr">ALTER SYSTEM SET &#34;JOB_QUEUE_PROCESSES&#34;=4;
</pre></li>
<li>
<p>Connect to the database as a non-SYS user (such as <code dir="ltr">HR</code>).</p>
</li>
<li>
<p>Create database tables to hold records of notification events received:</p>
<pre dir="ltr">-- Create table to record notification events.
DROP TABLE nfevents;
CREATE TABLE nfevents (
  regid      NUMBER,
  event_type NUMBER
);

-- Create table to record notification queries:
DROP TABLE nfqueries;
CREATE TABLE nfqueries (
  qid NUMBER,
  qop NUMBER
);

-- Create table to record changes to registered tables:
DROP TABLE nftablechanges;
CREATE TABLE nftablechanges (
  qid             NUMBER,
  table_name      VARCHAR2(100),
  table_operation NUMBER
);

-- Create table to record ROWIDs of changed rows:
DROP TABLE nfrowchanges;
CREATE TABLE nfrowchanges (
  qid        NUMBER,
  table_name VARCHAR2(100),
  row_id     VARCHAR2(2000)
);
</pre></li>
<li>
<p>Create the procedure <code dir="ltr">HR</code>.<code dir="ltr">chnf_callback</code>, as shown in <a href="#CHEJCBFE">Example 15-6</a>.</p>
</li>
</ol>
<div id="ADFNS595" class="example">
<p class="titleinexample"><a id="CHEJCBFE"></a>Example 15-6 Creating Server-Side PL/SQL Notification Handler</p>
<pre dir="ltr">CREATE OR REPLACE PROCEDURE chnf_callback (
  ntfnds IN CQ_NOTIFICATION$_DESCRIPTOR
)
IS
  regid           NUMBER;
  tbname          VARCHAR2(60);
  event_type      NUMBER;
  numtables       NUMBER;
  operation_type  NUMBER;
  numrows         NUMBER;
  row_id          VARCHAR2(2000);
  numqueries      NUMBER;
  qid             NUMBER;
  qop             NUMBER;

BEGIN
  regid := ntfnds.registration_id;
  event_type := ntfnds.event_type;

  INSERT INTO nfevents (regid, event_type)
  VALUES (chnf_callback.regid, chnf_callback.event_type);

  numqueries :=0;

  IF (event_type = DBMS_CQ_NOTIFICATION.EVENT_QUERYCHANGE) THEN
    numqueries := ntfnds.query_desc_array.count;

    FOR i IN 1..numqueries LOOP  -- loop over queries
      qid := ntfnds.query_desc_array(i).queryid;
      qop := ntfnds.query_desc_array(i).queryop;

      INSERT INTO nfqueries (qid, qop)
      VALUES(chnf_callback.qid, chnf_callback.qop);

      numtables := 0;
      numtables := ntfnds.query_desc_array(i).table_desc_array.count;

      FOR j IN 1..numtables LOOP  -- loop over tables
        tbname :=
          ntfnds.query_desc_array(i).table_desc_array(j).table_name;
        operation_type :=
          ntfnds.query_desc_array(i).table_desc_array(j).Opflags;

        INSERT INTO nftablechanges (qid, table_name, table_operation) 
        VALUES (
          chnf_callback.qid,
          tbname,
          operation_type
        );

        IF (bitand(operation_type, DBMS_CQ_NOTIFICATION.ALL_ROWS) = 0) THEN
          numrows := ntfnds.query_desc_array(i).table_desc_array(j).numrows;
        ELSE
          numrows :=0;  -- ROWID info not available
        END IF;

        -- Body of loop does not run when numrows is zero.
        FOR k IN 1..numrows LOOP  -- loop over rows
          Row_id :=
 ntfnds.query_desc_array(i).table_desc_array(j).row_desc_array(k).row_id;

          INSERT INTO nfrowchanges (qid, table_name, row_id)
          VALUES (chnf_callback.qid, tbname, chnf_callback.Row_id);

        END LOOP;  -- loop over rows
      END LOOP;  -- loop over tables
    END LOOP;  -- loop over queries
  END IF;
  COMMIT;
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="CHECHGED"></a>
<div id="ADFNS596" class="sect3">
<h4 class="sect3"><span class="secnum">15.7.10.2</span> Registering the Queries</h4>
<p>After creating the notification handler, you register the queries for which you want to receive notifications, specifying <code dir="ltr">HR</code>.<code dir="ltr">chnf_callback</code> as the notification handler, as in <a href="#CHEHHFFF">Example 15-7</a>.</p>
<div id="ADFNS597" class="example">
<p class="titleinexample"><a id="CHEHHFFF"></a>Example 15-7 Registering a Query</p>
<pre dir="ltr">DECLARE
  reginfo   CQ_NOTIFICATION$_REG_INFO;
  mgr_id    NUMBER;
  dept_id   NUMBER;
  v_cursor  SYS_REFCURSOR;
  regid     NUMBER;

BEGIN
  /* Register two queries for QRNC: */
  /* 1. Construct registration information.
        chnf_callback is name of notification handler.
        QOS_QUERY specifies result-set-change notifications. */

  reginfo := cq_notification$_reg_info (
    &#39;chnf_callback&#39;,
    DBMS_CQ_NOTIFICATION.QOS_QUERY,
    0, 0, 0
  );

  /* 2. Create registration. */

  regid := DBMS_CQ_NOTIFICATION.new_reg_start(reginfo);

  OPEN v_cursor FOR
    SELECT dbms_cq_notification.CQ_NOTIFICATION_QUERYID, manager_id
    FROM HR.EMPLOYEES
    WHERE employee_id = 7902;
  CLOSE v_cursor;

  OPEN v_cursor FOR
    SELECT dbms_cq_notification.CQ_NOTIFICATION_QUERYID, department_id
    FROM HR.departments
    WHERE department_name = &#39;IT&#39;;
  CLOSE v_cursor;

  DBMS_CQ_NOTIFICATION.reg_end;
END;
/
</pre></div>
<!-- class="example" -->
<p>View the newly created registration:</p>
<pre dir="ltr">SELECT queryid, regid, TO_CHAR(querytext)
FROM user_cq_notification_queries;
</pre>
<p>Result is similar to:</p>
<pre dir="ltr">QUERYID REGID                               TO_CHAR(QUERYTEXT)
------- ----- ------------------------------------------------
     22    41 SELECT HR.DEPARTMENTS.DEPARTMENT_ID
                FROM HR.DEPARTMENTS
                  WHERE HR.DEPARTMENTS.DEPARTMENT_NAME  = &#39;IT&#39;

     21    41 SELECT HR.EMPLOYEES.MANAGER_ID
                FROM HR.EMPLOYEES
                  WHERE HR.EMPLOYEES.EMPLOYEE_ID  = 7902
</pre>
<p>Run this transaction, which changes the result of the query with <code dir="ltr">QUERYID</code> 22:</p>
<pre dir="ltr">UPDATE DEPARTMENTS
SET DEPARTMENT_NAME = &#39;FINANCE&#39;
WHERE department_name = &#39;IT&#39;;
</pre>
<p>The notification procedure <code dir="ltr">chnf_callback</code> (which you created in <a href="#CHEJCBFE">Example 15-6</a>) runs.</p>
<p>Query the table in which notification events are recorded:</p>
<pre dir="ltr">SELECT * FROM nfevents;
</pre>
<p>Result is similar to:</p>
<pre dir="ltr">REGID EVENT_TYPE
----- ----------
   61          7
</pre>
<p><code dir="ltr">EVENT_TYPE</code> 7 corresponds to <code dir="ltr">EVENT_QUERYCHANGE</code> (query result change).</p>
<p>Query the table in which changes to registered tables are recorded:</p>
<pre dir="ltr">SELECT * FROM nftablechanges;
</pre>
<p>Result is similar to:</p>
<pre dir="ltr">REGID     TABLE_NAME TABLE_OPERATION
----- -------------- ---------------
   42 HR.DEPARTMENTS               4
</pre>
<p><code dir="ltr">TABLE_OPERATION</code> 4 corresponds to <code dir="ltr">UPDATEOP</code> (update operation).</p>
<p>Query the table in which <code dir="ltr">ROWID</code>s of changed rows are recorded:</p>
<pre dir="ltr">SELECT * FROM nfrowchanges;
</pre>
<p>Result is similar to:</p>
<pre dir="ltr">REGID     TABLE_NAME              ROWID
----- -------------- ------------------
   61 HR.DEPARTMENTS AAANkdAABAAALinAAF
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BAJBDFFE"></a>
<div id="ADFNS680" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">15.8</span> Using OCI to Create CQN Registrations</h2>
<p>This section describes using OCI to create CQN registrations. When you use OCI, the notification handler is a client-side C callback procedure.</p>
<p class="subhead2"><a id="ADFNS681"></a>Topics</p>
<ul>
<li>
<p><a href="#BAJCIHIF">Using OCI for Query Result Set Notifications</a></p>
</li>
<li>
<p><a href="#BAJIGIGH">Using OCI to Register a Continuous Query Notification</a></p>
</li>
<li>
<p><a href="#BAJBIDBA">Using OCI Subscription Handle Attributes for Continuous Query Notification</a></p>
</li>
<li>
<p><a href="#BAJBEIBC">Using OCI_ATTR_CQ_QUERYID Attribute</a></p>
</li>
<li>
<p><a href="#BAJBJDDC">Using OCI Continuous Query Notification Descriptors</a></p>
</li>
<li>
<p><a href="#BAJCABGC">Demonstrating Continuous Query Notification in an OCI Sample Program</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<span class="italic">Oracle Call Interface Programmer&#39;s Guide</span> for more information about <a class="olink LNOCI16713" href="../LNOCI/oci09adv.htm#LNOCI16713">publish-subscribe notification in OCI</a></div>
<a id="BAJCIHIF"></a>
<div id="ADFNS682" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">15.8.1</span> Using OCI for Query Result Set Notifications</h3>
<p>To record QOS (quality of service flags) specific to continuous query (CQ) notifications, set the attribute <code dir="ltr">OCI_ATTR_SUBSCR_CQ_QOSFLAGS</code> on the subscription handle <code dir="ltr">OCI_HTYPE_SUBSCR</code>. To request that the registration is at query granularity, as opposed to object granularity, set the <code dir="ltr">OCI_SUBSCR_CQ_QOS_QUERY</code> flag bit on the attribute <code dir="ltr">OCI_ATTR_SUBSCR_CQ_QOSFLAGS</code>.</p>
<p>The pseudocolumn <code dir="ltr">CQ_NOTIFICATION_QUERY_ID</code> can be optionally specified to retrieve the query ID of a registered query. This does not automatically convert the granularity to query level. The value of the pseudocolumn on return is set to the unique query ID assigned to the query. The query ID pseudocolumn can be omitted for OCI-based registrations, in which case the query ID is returned as a <code dir="ltr">READ</code> attribute of the statement handle. (This attribute is called <code dir="ltr">OCI_ATTR_CQ_QUERYID</code>).</p>
<p>During notifications, the client-specified callback is invoked and the top-level notification descriptor is passed as an argument.</p>
<p>Information about the query IDs of the changed queries is conveyed through a special descriptor type called <code dir="ltr">OCI_DTYPE_CQDES</code>. A collection (<code dir="ltr">OCIColl</code>) of query descriptors is embedded inside the top-level notification descriptor. Each descriptor is of type <code dir="ltr">OCI_DTYPE_CQDES</code>. The query descriptor has the following attributes:</p>
<ul>
<li>
<p><code dir="ltr">OCI_ATTR_CQDES_OPERATION</code> - can be one of <code dir="ltr">OCI_EVENT_QUERYCHANGE</code> or <code dir="ltr">OCI_EVENT_DEREG</code>.</p>
</li>
<li>
<p><code dir="ltr">OCI_ATTR_CQDES_QUERYID</code> - query ID of the changed query.</p>
</li>
<li>
<p><code dir="ltr">OCI_ATTR_CQDES_TABLE_CHANGES</code> - array of table descriptors describing DML operations on tables that led to the query result set change. Each table descriptor is of the type <code dir="ltr">OCI_DTYPE_TABLE_CHDES</code>.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BAJHIDHF">Section 15.8.5.1, &#34;OCI_DTYPE_CHDES&#34;</a></div>
</div>
<!-- class="sect2" -->
<a id="BAJIGIGH"></a>
<div id="ADFNS683" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">15.8.2</span> Using OCI to Register a Continuous Query Notification</h3>
<p>The calling session must have the <code dir="ltr">CHANGE</code> <code dir="ltr">NOTIFICATION</code> system privilege and <code dir="ltr">SELECT</code> privileges on all objects that it attempts to register. A registration is a persistent entity that is recorded in the database, and is visible to all instances of Oracle RAC. If the registration was at query granularity, transactions that cause the query result set to change and commit in any instance of Oracle RAC generate notification.If the registration was at object granularity, transactions that modify registered objects in any instance of Oracle RAC generate notification.</p>
<p>Queries involving materialized views or nonmaterialized views are <span class="italic">not</span> supported.</p>
<p>The registration interface employs a callback to respond to changes in underlying objects of a query and uses a namespace extension (<code dir="ltr">DBCHANGE</code>) to AQ.</p>
<p>The steps in writing the registration are:</p>
<ol>
<li>
<p>Create the environment in <code dir="ltr">OCI_EVENTS</code> and <code dir="ltr">OCI_OBJECT</code> mode.</p>
</li>
<li>
<p>Set the subscription handle attribute <code dir="ltr">OCI_ATTR_SUBSCR_NAMESPACE</code> to namespace <code dir="ltr">OCI_SUBSCR_NAMESPACE_DBCHANGE</code>.</p>
</li>
<li>
<p>Set the subscription handle attribute <code dir="ltr">OCI_ATTR_SUBSCR_CALLBACK</code> to store the OCI callback associated with the query handle. The callback has the following prototype:</p>
<pre dir="ltr">void notification_callback (void *ctx, OCISubscription *subscrhp, 
                            void *payload, ub4 paylen, void *desc, ub4 mode);
</pre>
<p>The parameters are described in &#34;<a class="olink LNOCI16723" href="../LNOCI/oci09adv.htm#LNOCI16723">Notification Callback in OCI</a>&#34; in <span class="italic">Oracle Call Interface Programmer&#39;s Guide</span>.</p>
</li>
<li>
<p>Optionally associate a client-specific context using <code dir="ltr">OCI_ATTR_SUBSCR_CTX</code> attribute.</p>
</li>
<li>
<p>Set the <code dir="ltr">OCI_ATTR_SUBSCR_TIMEOUT</code> attribute to specify a <code dir="ltr">ub4</code> timeout interval in seconds. If it is not set, there is no timeout.</p>
</li>
<li>
<p>Set the <code dir="ltr">OCI_ATTR_SUBSCR_QOSFLAGS</code> attribute, the QOS (quality of service) levels, with the following values:</p>
<ul>
<li>
<p>The <code dir="ltr">OCI_SUBSCR_QOS_PURGE_ON_NTFN</code> flag allows the registration to be purged on the first notification.</p>
</li>
<li>
<p>The <code dir="ltr">OCI_SUBSCR_QOS_RELIABLE</code> flag allows notifications to be persistent. You can use surviving instances of Oracle RAC to send and retrieve continuous query notification messages, even after a node failure, because invalidations associated with this registration are queued persistently into the database. If <code dir="ltr">FALSE</code>, then invalidations are enqueued into a fast in-memory queue. This option describes the persistence of notifications and not the persistence of registrations. Registrations are automatically persistent by default.</p>
</li>
</ul>
</li>
<li>
<p>Call <code dir="ltr">OCISubscriptionRegister()</code> to create a new registration in the <code dir="ltr">DBCHANGE</code> namespace.</p>
</li>
<li>
<p>Associate multiple query statements with the subscription handle by setting the attribute <code dir="ltr">OCI_ATTR_CHNF_REGHANDLE</code> of the statement handle, <code dir="ltr">OCI_HTYPE_STMT</code>. The registration is completed when the query is executed.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<span class="italic">Oracle Call Interface Programmer&#39;s Guide</span> for more information about <a class="olink LNOCI17861" href="../LNOCI/ociaahan.htm#LNOCI17861"><code dir="ltr">OCI_ATTR_CHNF_REGHANDLE</code></a></div>
</li>
<li>
<p>Optionally unregister a subscription. The client can call the OCISubscriptionRegister() function with the subscription handle as a parameter.</p>
</li>
</ol>
<p>A binding of a statement handle to a subscription handle is valid only for only the first execution of a query. If the application must use the same OCI statement handle for subsequent executions, it must repopulate the registration handle attribute of the statement handle. A binding of a subscription handle to a statement handle is permitted only when the statement is a query (determined at execute time). If a DML statement is executed as part of the execution, then an exception is issued.</p>
</div>
<!-- class="sect2" -->
<a id="BAJBIDBA"></a>
<div id="ADFNS684" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">15.8.3</span> Using OCI Subscription Handle Attributes for Continuous Query Notification</h3>
<p>The subscription handle attributes for continuous query notification can be divided into generic attributes (common to all subscriptions) and namespace-specific attributes (particular to continuous query notification).</p>
<p>The <code dir="ltr">WRITE</code> attributes on the statement handle can be modified only before the registration is created.</p>
<p class="subhead2"><a id="ADFNS685"></a>Generic Attributes - Common to All Subscriptions</p>
<p><code dir="ltr"><a id="sthref776"></a>OCI_ATTR_SUBSCR_NAMESPACE</code> (<code dir="ltr">WRITE</code>) - Set this attribute to <code dir="ltr">OCI_SUBSCR_NAMESPACE_DBCHANGE</code> for subscription handles.</p>
<p><a id="sthref777"></a><code dir="ltr">OCI_ATTR_SUBSCR_CALLBACK</code> (<code dir="ltr">WRITE</code>) - Use this attribute to store the callback associated with the subscription handle. The callback is executed when a notification is received.</p>
<p>When a new continuous query notification message becomes available, the callback is invoked in the listener thread with <code dir="ltr">desc</code> pointing to a descriptor of type <code dir="ltr">OCI_DTYPE_CHDES</code> that contains detailed information about the invalidation.</p>
<p><code dir="ltr"><a id="sthref778"></a>OCI_ATTR_SUBSCR_QOSFLAGS</code> - This attribute is a generic flag with the following values:</p>
<pre dir="ltr">#define OCI_SUBSCR_QOS_RELIABLE             0x01                 /* reliable */
#define OCI_SUBSCR_QOS_PURGE_ON_NTFN        0x10      /* purge on first ntfn */
</pre>
<ul>
<li>
<p><code dir="ltr"><a id="sthref779"></a>OCI_SUBSCR_QOS_RELIABLE</code> - Set this bit to allow notifications to be persistent. Therefore, you can use surviving instances of an Oracle RAC cluster to send and retrieve invalidation messages, even after a node failure, because invalidations associated with this registration ID are queued persistently into the database. If this bit is <code dir="ltr">FALSE</code>, then invalidations are enqueued in to a fast in-memory queue. This option describes the persistence of notifications and not the persistence of registrations. Registrations are automatically persistent by default.</p>
</li>
<li>
<p><a id="sthref780"></a><code dir="ltr">OCI_SUBSCR_QOS_PURGE_ON_NTFN</code> - Set this bit to allow the registration to be purged on the first notification.</p>
</li>
</ul>
<p>A parallel example is presented in <span class="italic">Oracle Call Interface Programmer&#39;s Guide</span> in <a class="olink LNOCI16715" href="../LNOCI/oci09adv.htm#LNOCI16715">publish-subscribe registration functions in OCI</a>.</p>
<p><a id="sthref781"></a><code dir="ltr">OCI_ATTR_SUBSCR_CQ_QOSFLAGS</code> - This attribute describes the continuous query notification-specific QOS flags (mode is <code dir="ltr">WRITE</code>, data type is <code dir="ltr">ub4</code>), which are:</p>
<ul>
<li>
<p><code dir="ltr">0x1 OCI_SUBSCR_CQ_QOS_QUERY</code> - Set this flag to indicate that query-level granularity is required. Generate notification only if the query result set changes. By default, this level of QOS has no false positives.</p>
</li>
<li>
<p><code dir="ltr">0x2 OCI_SUBSCR_CQ_QOS_BEST_EFFORT</code> - Set this flag to indicate that best effort filtering is acceptable. It can be used by caching applications. The database can use heuristics based on cost of evaluation and avoid full pruning in some cases.</p>
</li>
</ul>
<p><a id="sthref782"></a><code dir="ltr">OCI_ATTR_SUBSCR_TIMEOUT</code> - Use this attribute to specify a <code dir="ltr">ub4</code> timeout value defined in seconds. If the timeout value is 0 or not specified, then the registration is active until explicitly unregistered.</p>
<p class="subhead2"><a id="ADFNS686"></a>Namespace- Specific or Feature-Specific Attributes</p>
<p>The following attributes are namespace-specific or feature-specific to the continuous query notification feature.</p>
<p><code dir="ltr"><a id="sthref783"></a>OCI_ATTR_CHNF_TABLENAMES</code> (data type is <code dir="ltr">(OCIColl *)</code>) - These attributes are provided to retrieve the list of table names that were registered. These attributes are available from the subscription handle, after the query is executed.</p>
<p><a id="sthref784"></a><code dir="ltr">OCI_ATTR_CHNF_ROWIDS</code> - A Boolean attribute (default <code dir="ltr">FALSE</code>). If <code dir="ltr">TRUE</code>, then the continuous query notification message includes row-level details such as operation type and <code dir="ltr">ROWID</code>.</p>
<p><code dir="ltr"><a id="sthref785"></a>OCI_ATTR_CHNF_OPERATIONS</code> - Use this <code dir="ltr">ub4</code> flag to selectively filter notifications based on operation type. This option is ignored if the registration is of query-level granularity. Flags stored are:</p>
<ul>
<li>
<p><code dir="ltr">OCI_OPCODE_ALL</code> - All operations</p>
</li>
<li>
<p><code dir="ltr">OCI_OPCODE_INSERT</code> - Insert operations on the table</p>
</li>
<li>
<p><code dir="ltr">OCI_OPCODE_UPDATE</code> - Update operations on the table</p>
</li>
<li>
<p><code dir="ltr">OCI_OPCODE_DELETE</code> - Delete operations on the table</p>
</li>
</ul>
<p><a id="sthref786"></a><code dir="ltr">OCI_ATTR_CHNF_CHANGELAG</code> - The client can use this <code dir="ltr">ub4</code> value to specify the number of transactions by which the client is willing to lag behind. The client can also use this option as a throttling mechanism for continuous query notification messages. When you choose this option, <code dir="ltr">ROWID</code>-level granularity of information is unavailable in the notifications, even if <code dir="ltr">OCI_ATTR_CHNF_ROWIDS</code> was <code dir="ltr">TRUE</code>. This option is ignored if the registration is of query-level granularity.</p>
<p>After the OCISubscriptionRegister() call is invoked, none of the preceding attributes (generic, name-specific, or feature-specific) can be modified on the registration already created. Any attempt to modify those attributes is not reflected on the registration already created, but it does take effect on newly created registrations that use the same registration handle.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<span class="italic">Oracle Call Interface Programmer&#39;s Guide</span> for more information about <a class="olink LNOCI17976" href="../LNOCI/ociaahan.htm#LNOCI17976">continuous query notification descriptor attributes</a></div>
<p>Notifications can be spaced out by using the grouping NTFN option. The relevant generic notification attributes are:</p>
<pre dir="ltr">OCI_ATTR_SUBSCR_NTFN_GROUPING_VALUE
OCI_ATTR_SUBSCR_NTFN_GROUPING_TYPE
OCI_ATTR_SUBSCR_NTFN_GROUPING_START_TIME
OCI_ATTR_SUBSCR_NTFN_GROUPING_REPEAT_COUNT
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<span class="italic">Oracle Call Interface Programmer&#39;s Guide</span> for more details about these attributes in <a class="olink LNOCI16716" href="../LNOCI/oci09adv.htm#LNOCI16716">publish-subscribe register directly to the database</a></div>
</div>
<!-- class="sect2" -->
<a id="BAJBEIBC"></a>
<div id="ADFNS687" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">15.8.4</span> Using <a id="sthref787"></a>OCI_ATTR_CQ_QUERYID Attribute</h3>
<p>The attribute <code dir="ltr">OCI_ATTR_CQ_QUERYID</code> on the statement handle, <code dir="ltr">OCI_HTYPE_STMT</code>, obtains the query ID of a registered query after registration is made by the call to <code dir="ltr">OCIStmtExecute()</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<span class="italic">Oracle Call Interface Programmer&#39;s Guide</span> for more information about <a class="olink LNOCI17862" href="../LNOCI/ociaahan.htm#LNOCI17862"><code dir="ltr">OCI_ATTR_CQ_QUERYID</code></a></div>
</div>
<!-- class="sect2" -->
<a id="BAJBJDDC"></a>
<div id="ADFNS688" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">15.8.5</span> Using OCI Continuous Query Notification Descriptors</h3>
<p>The continuous query notification descriptor is passed into the <code dir="ltr">desc</code> parameter of the notification callback specified by the application. The following attributes are specific to continuous query notification. The OCI type constant of the continuous query notification descriptor is <code dir="ltr">OCI_DTYPE_CHDES</code>.</p>
<p>The notification callback receives the top-level notification descriptor, <code dir="ltr">OCI_DTYPE_CHDES</code>, as an argument. This descriptor in turn includes either a collection of <code dir="ltr">OCI_DTYPE_CQDES</code> or <code dir="ltr">OCI_DTYPE_TABLE_CHDES</code> descriptors based on whether the event type was <code dir="ltr">OCI_EVENT_QUERYCHANGE</code> or <code dir="ltr">OCI_EVENT_OBJCHANGE</code>. An array of table continuous query descriptors is embedded inside the continuous query descriptor for notifications of type <code dir="ltr">OCI_EVENT_QUERYCHANGE</code>. If <code dir="ltr">ROWID</code> level granularity of information was requested, each <code dir="ltr">OCI_DTYPE_TABLE_CHDES</code> contains an array of row-level continuous query descriptors (<code dir="ltr">OCI_DTYPE_ROW_CHDES</code>) corresponding to each modified <code dir="ltr">ROWID</code>.</p>
<a id="BAJHIDHF"></a>
<div id="ADFNS689" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">15.8.5.1</span> OCI_DTYPE_CHDES</h4>
<p>This is the top-level continuous query notification descriptor type.</p>
<p><a id="sthref788"></a><code dir="ltr">OCI_ATTR_CHDES_DBNAME</code> (<code dir="ltr">oratext *</code>) - Name of the database (source of the continuous query notification)</p>
<p><a id="sthref789"></a><code dir="ltr">OCI_ATTR_CHDES_XID</code> (<code dir="ltr">RAW(8)</code>) - Message ID of the message</p>
<p><a id="sthref790"></a><code dir="ltr">OCI_ATTR_CHDES_NFYTYPE</code> - Flags describing the notification type:</p>
<ul>
<li>
<p><code dir="ltr">0x0 OCI_EVENT_NONE</code> - No further information about the continuous query notification</p>
</li>
<li>
<p><code dir="ltr">0x1 OCI_EVENT_STARTUP</code> - Instance startup</p>
</li>
<li>
<p><code dir="ltr">0x2 OCI_EVENT_SHUTDOWN</code> - Instance shutdown</p>
</li>
<li>
<p><code dir="ltr">0x3 OCI_EVENT_SHUTDOWN_ANY</code> - Any instance shutdown - Oracle Real Application Clusters (Oracle RAC)</p>
</li>
<li>
<p><code dir="ltr">0x5 OCI_EVENT_DEREG</code> - Unregistered or timed out</p>
</li>
<li>
<p><code dir="ltr">0x6 OCI_EVENT_OBJCHANGE</code> - Object change notification</p>
</li>
<li>
<p><code dir="ltr">0x7 OCI_EVENT_QUERYCHANGE</code> - Query change notification</p>
</li>
</ul>
<p><a id="sthref791"></a><code dir="ltr">OCI_ATTR_CHDES_TABLE_CHANGES</code> - A collection type describing operations on tables of data type <code dir="ltr">(OCIColl *)</code>. This attribute is present only if the <code dir="ltr">OCI_ATTR_CHDES_NFTYPE</code> attribute was of type <code dir="ltr">OCI_EVENT_OBJCHANGE</code>; otherwise, it is <code dir="ltr">NULL</code>. Each element of the collection is a table of continuous query descriptors of type <code dir="ltr">OCI_DTYPE_TABLE_CHDES</code>.</p>
<p><code dir="ltr"><a id="sthref792"></a>OCI_ATTR_CHDES_QUERIES</code> - A collection type describing the queries that were invalidated. Each member of the collection is of type <code dir="ltr">OCI_DTYPE_CQDES</code>. This attribute is present only if the attribute <code dir="ltr">OCI_ATTR_CHDES_NFTYPE</code> was of type <code dir="ltr">OCI_EVENT_QUERYCHANGE</code>; otherwise, it is <code dir="ltr">NULL</code>.</p>
<div id="ADFNS690" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref793"></a>
<h5 class="sect4"><span class="secnum">15.8.5.1.1</span> <a id="sthref794"></a>OCI_DTYPE_CQDES</h5>
<p>This notification descriptor describes a query that was invalidated, usually in response to the commit of a DML or a DDL transaction. It has the following attributes:</p>
<ul>
<li>
<p><a id="sthref795"></a><code dir="ltr">OCI_ATTR_CQDES_OPERATION</code> (<code dir="ltr">ub4</code>, <code dir="ltr">READ</code>) - Operation that occurred on the query. It can be one of these values:</p>
<ul>
<li>
<p><code dir="ltr">OCI_EVENT_QUERYCHANGE</code> - Query result set change</p>
</li>
<li>
<p><code dir="ltr">OCI_EVENT_DEREG</code> - Query unregistered</p>
</li>
</ul>
</li>
<li>
<p><a id="sthref796"></a><code dir="ltr">OCI_ATTR_CQDES_TABLE_CHANGES</code> (<code dir="ltr">OCIColl *</code>, <code dir="ltr">READ</code>) - A collection of table continuous query descriptors describing DML or DDL operations on tables that caused the query result set change. Each element of the collection is of type <code dir="ltr">OCI_DTYPE_TABLE_CHDES</code>.</p>
</li>
<li>
<p><a id="sthref797"></a><code dir="ltr">OCI_ATTR_CQDES_QUERYID</code> (<code dir="ltr">ub8</code>, <code dir="ltr">READ</code>) - Query ID of the query that was invalidated.</p>
</li>
</ul>
</div>
<!-- class="sect4" -->
<div id="ADFNS691" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref798"></a>
<h5 class="sect4"><span class="secnum">15.8.5.1.2</span> OCI_DTYPE_TABLE_CHDES</h5>
<p>This notification descriptor conveys information about changes to a table involved in a registered query. It has the following attributes:</p>
<ul>
<li>
<p><a id="sthref799"></a><code dir="ltr">OCI_ATTR_CHDES_TABLE_NAME</code> <code dir="ltr">(oratext *)</code> - Schema annotated table name.</p>
</li>
<li>
<p><a id="sthref800"></a><code dir="ltr">OCI_ATTR_CHDES_TABLE_OPFLAGS</code> (<code dir="ltr">ub4</code>) - Flag field describing the operations on the table. Each of the following flag fields is in a separate bit position in the attribute:</p>
<ul>
<li>
<p><code dir="ltr">0x1 OCI_OPCODE_ALLROWS</code> - The table is completely invalidated.</p>
</li>
<li>
<p><code dir="ltr">0x2 OCI_OPCODE_INSERT</code> - Insert operations on the table.</p>
</li>
<li>
<p><code dir="ltr">0x4 OCI_OPCODE_UPDATE</code> - Update operations on the table.</p>
</li>
<li>
<p><code dir="ltr">0x8 OCI_OPCODE_DELETE</code> - Delete operations on the table.</p>
</li>
<li>
<p><code dir="ltr">0x10 OCI_OPCODE_ALTER</code> - Table altered (schema change). This includes DDL statements and internal operations that cause row migration.</p>
</li>
<li>
<p><code dir="ltr">0x20 OCI_OPCODE_DROP</code> - Table dropped.</p>
</li>
</ul>
</li>
<li>
<p><a id="sthref801"></a><code dir="ltr">OCI_ATTR_CHDES_TABLE_ROW_CHANGES</code> - This is an embedded collection describing the changes to the rows within the table. Each element of the collection is a row continuous query descriptor of type <code dir="ltr">OCI_DTYPE_ROW_CHDES</code> that has the following attributes:</p>
<ul>
<li>
<p><code dir="ltr"><a id="sthref802"></a>OCI_ATTR_CHDES_ROW_ROWID</code> (<code dir="ltr">OraText *</code>) - String representation of a <code dir="ltr">ROWID</code>.</p>
</li>
<li>
<p><code dir="ltr"><a id="sthref803"></a>OCI_ATTR_CHDES_ROW_OPFLAGS</code> - Reflects the operation type: <code dir="ltr">INSERT</code>, <code dir="ltr">UPDATE</code>, <code dir="ltr">DELETE</code>, or <code dir="ltr">OTHER</code>.</p>
</li>
</ul>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<span class="italic">Oracle Call Interface Programmer&#39;s Guide</span> for more information about <a class="olink LNOCI17976" href="../LNOCI/ociaahan.htm#LNOCI17976">continuous query notification descriptor attributes</a></div>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BAJCABGC"></a>
<div id="ADFNS692" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">15.8.6</span> <a id="sthref804"></a>Demonstrating Continuous Query Notification in an OCI Sample Program</h3>
<p><a href="#BAJHEGDB">Example 15-8</a> is a simple OCI program, <code dir="ltr">demoquery.c</code>. See the comments in the listing. The calling session must have the <code dir="ltr">CHANGE</code> <code dir="ltr">NOTIFICATION</code> system privilege and <code dir="ltr">SELECT</code> privileges on all objects that it attempts to register.</p>
<div id="ADFNS693" class="example">
<p class="titleinexample"><a id="BAJHEGDB"></a>Example 15-8 Program Listing That Demonstrates Continuous Query Notification</p>
<pre dir="ltr">/* Copyright (c) 2010, Oracle. All rights reserved.  */
 
#ifndef S_ORACLE
# include &lt;oratypes.h&gt;
#endif
 
/**************************************************************************
 *This is a DEMO program. To test, compile the file to generate the executable
 *demoquery. Then demoquery can be invoked from a command prompt.
 *It will have the following output:
 
Initializing OCI Process
Registering query : select last_name, employees.department_id, department_name 
                     from employees, departments 
                     where employee_id = 200 
                     and employees.department_id = departments.department_id
Query Id 23
Waiting for Notifications

*Then from another session, log in as HR/HR and perform the following
* DML transactions. It will cause two notifications to be generated.
 
update departments set department_name =&#39;Global Admin&#39; where department_id=10;
commit;
update departments set department_name =&#39;Administration&#39; where department_id=10;
commit;

*The demoquery program will now show the following output corresponding
*to the notifications received.
 
 
Query 23 is changed
Table changed is HR.DEPARTMENTS table_op 4
Row changed is AAAMBoAABAAAKX2AAA row_op 4
Query 23 is changed
Table changed is HR.DEPARTMENTS table_op 4
Row changed is AAAMBoAABAAAKX2AAA row_op 4
 
 
*The demo program waits for exactly 10 notifications to be received before
*logging off and unregistering the subscription.
 
***************************************************************************/
 
/*---------------------------------------------------------------------------
                     PRIVATE TYPES AND CONSTANTS
  ---------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------
                     STATIC FUNCTION DECLARATIONS 
  ---------------------------------------------------------------------------*/
 
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;oci.h&gt;
 
#define MAXSTRLENGTH 1024
#define bit(a,b) ((a)&amp;(b))
 
static int notifications_processed = 0;
static OCISubscription *subhandle1 = (OCISubscription *)0;
static OCISubscription *subhandle2 = (OCISubscription *)0;
static void checker(/*_ OCIError *errhp, sword status _*/);
static void registerQuery(/*_ OCISvcCtx *svchp, OCIError *errhp, OCIStmt *stmthp,
                           OCIEnv *envhp _*/);
static void myCallback (/*_  dvoid *ctx, OCISubscription *subscrhp, 
                        dvoid *payload, ub4 *payl, dvoid *descriptor, 
                        ub4 mode _*/);
static int NotificationDriver(/*_ int argc, char *argv[]  _*/);
static sword status;
static boolean logged_on = FALSE;
static void processRowChanges(OCIEnv *envhp, OCIError *errhp, OCIStmt *stmthp, 
                               OCIColl *row_changes);
static void processTableChanges(OCIEnv *envhp, OCIError *errhp,
                 OCIStmt *stmthp, OCIColl *table_changes);
static void processQueryChanges(OCIEnv *envhp, OCIError *errhp, OCIStmt *stmthp,
                 OCIColl *query_changes);
static int nonractests2(/*_ int argc, char *argv[] _*/);
 
 
int main(int argc, char **argv)
{
 
  NotificationDriver(argc, argv);
  return 0;
}
 
 
int NotificationDriver(argc, argv)
int argc;
char *argv[];
{
  OCIEnv *envhp;
  OCISvcCtx *svchp, *svchp2;
  OCIError *errhp, *errhp2;
  OCISession *authp, *authp2;
  OCIStmt *stmthp, *stmthp2;
  OCIDuration dur, dur2;
  int i;
  dvoid *tmp;
  OCISession *usrhp;
  OCIServer *srvhp;
 
  printf(&#34;Initializing OCI Process\n&#34;);
/* Initialize the environment. The environment must be initialized
     with OCI_EVENTS and OCI_OBJECT to create a continuous query notification
     registration and receive notifications.
  */
  OCIEnvCreate( (OCIEnv **) &amp;envhp, OCI_EVENTS|OCI_OBJECT, (dvoid *)0,
                    (dvoid * (*)(dvoid *, size_t)) 0,
                    (dvoid * (*)(dvoid *, dvoid *, size_t))0,
                    (void (*)(dvoid *, dvoid *)) 0,
                    (size_t) 0, (dvoid **) 0 );
 
  OCIHandleAlloc( (dvoid *) envhp, (dvoid **) &amp;errhp, OCI_HTYPE_ERROR,
                         (size_t) 0, (dvoid **) 0);
   /* server contexts */
  OCIHandleAlloc((dvoid *) envhp, (dvoid **) &amp;srvhp, OCI_HTYPE_SERVER, 
                 (size_t) 0, (dvoid **) 0);
  OCIHandleAlloc((dvoid *) envhp, (dvoid **) &amp;svchp, OCI_HTYPE_SVCCTX,
                 (size_t) 0, (dvoid **) 0);
   checker(errhp,OCIServerAttach(srvhp, errhp, (text *) 0, (sb4) 0, 
                                 (ub4) OCI_DEFAULT));
  /* set attribute server context in the service context */
  OCIAttrSet( (dvoid *) svchp, (ub4) OCI_HTYPE_SVCCTX, (dvoid *)srvhp,
              (ub4) 0, (ub4) OCI_ATTR_SERVER, (OCIError *) errhp);
 
   /* allocate a user context handle */
  OCIHandleAlloc((dvoid *)envhp, (dvoid **)&amp;usrhp, (ub4) OCI_HTYPE_SESSION,
                               (size_t) 0, (dvoid **) 0);
 
  OCIAttrSet((dvoid *)usrhp, (ub4)OCI_HTYPE_SESSION,
             (dvoid *)((text *)&#34;HR&#34;), (ub4)strlen((char *)&#34;HR&#34;), 
              OCI_ATTR_USERNAME, errhp);
 
 OCIAttrSet((dvoid *)usrhp, (ub4)OCI_HTYPE_SESSION,
            (dvoid *)((text *)&#34;HR&#34;), (ub4)strlen((char *)&#34;HR&#34;),  
             OCI_ATTR_PASSWORD, errhp);
   checker(errhp,OCISessionBegin (svchp, errhp, usrhp, OCI_CRED_RDBMS,
           OCI_DEFAULT));
   /* Allocate a statement handle */
  OCIHandleAlloc( (dvoid *) envhp, (dvoid **) &amp;stmthp,
                                (ub4) OCI_HTYPE_STMT, 52, (dvoid **) &amp;tmp);
 
  OCIAttrSet((dvoid *)svchp, (ub4)OCI_HTYPE_SVCCTX, (dvoid *)usrhp, (ub4)0,
                       OCI_ATTR_SESSION, errhp);
 
  registerQuery(svchp, errhp, stmthp, envhp);
  printf(&#34;Waiting for Notifications\n&#34;);
  while (notifications_processed !=10)
  {
    sleep(1);
  }
  printf (&#34;Going to unregister HR\n&#34;);
  fflush(stdout);
  /* Unregister HR */
  checker(errhp,
           OCISubscriptionUnRegister(svchp, subhandle1, errhp, OCI_DEFAULT));
  checker(errhp, OCISessionEnd(svchp, errhp, usrhp, (ub4) 0));
   printf(&#34;HR Logged off.\n&#34;);
 
  if (subhandle1)
     OCIHandleFree((dvoid *)subhandle1, OCI_HTYPE_SUBSCRIPTION);
  if (stmthp)
     OCIHandleFree((dvoid *)stmthp, OCI_HTYPE_STMT);
  if (srvhp)
     OCIHandleFree((dvoid *) srvhp, (ub4) OCI_HTYPE_SERVER);
  if (svchp)
     OCIHandleFree((dvoid *) svchp, (ub4) OCI_HTYPE_SVCCTX);
  if (authp)
     OCIHandleFree((dvoid *) usrhp, (ub4) OCI_HTYPE_SESSION);
  if (errhp)
     OCIHandleFree((dvoid *) errhp, (ub4) OCI_HTYPE_ERROR);
  if (envhp)
     OCIHandleFree((dvoid *) envhp, (ub4) OCI_HTYPE_ENV);
 
 
  return 0;
 
}
 
void checker(errhp, status)
OCIError *errhp;
sword status;
{
  text errbuf[512];
  sb4 errcode = 0;
  int retval = 1;
 
  switch (status)
  {
  case OCI_SUCCESS:
    retval = 0;
    break;
  case OCI_SUCCESS_WITH_INFO:
    (void) printf(&#34;Error - OCI_SUCCESS_WITH_INFO\n&#34;);
    break;
 case OCI_NEED_DATA:
    (void) printf(&#34;Error - OCI_NEED_DATA\n&#34;);
    break;
  case OCI_NO_DATA:
    (void) printf(&#34;Error - OCI_NODATA\n&#34;);
    break;
  case OCI_ERROR:
    (void) OCIErrorGet((dvoid *)errhp, (ub4) 1, (text *) NULL, &amp;errcode,
                        errbuf, (ub4) sizeof(errbuf), OCI_HTYPE_ERROR);
    (void) printf(&#34;Error - %.*s\n&#34;, 512, errbuf);
    break;
  case OCI_INVALID_HANDLE:
    (void) printf(&#34;Error - OCI_INVALID_HANDLE\n&#34;);
    break;
  case OCI_STILL_EXECUTING:
    (void) printf(&#34;Error - OCI_STILL_EXECUTE\n&#34;);
    break; 
  case OCI_CONTINUE:
    (void) printf(&#34;Error - OCI_CONTINUE\n&#34;);
    break; 
  default:
    break;
 }
  if (retval)
  {
    exit(1);
  }
}
 
 
void processRowChanges(OCIEnv *envhp, OCIError *errhp, OCIStmt *stmthp,
                         OCIColl *row_changes)
{
  dvoid **row_descp;
  dvoid *row_desc;
  boolean exist; 
  ub2 i, j;
  dvoid *elemind = (dvoid *)0;
  oratext *row_id;
  ub4 row_op;
 
 
   sb4 num_rows;
   if (!row_changes) return;
    checker(errhp, OCICollSize(envhp, errhp,
                    (CONST OCIColl *) row_changes, &amp;num_rows));
    for (i=0; i&lt;num_rows; i++)
    {
      checker(errhp, OCICollGetElem(envhp,
                     errhp, (OCIColl *) row_changes,
                     i, &amp;exist, &amp;row_descp, &amp;elemind));
 
      row_desc = *row_descp;
      checker(errhp, OCIAttrGet (row_desc, 
                  OCI_DTYPE_ROW_CHDES, (dvoid *)&amp;row_id,
                  NULL, OCI_ATTR_CHDES_ROW_ROWID, errhp));
      checker(errhp, OCIAttrGet (row_desc, 
                  OCI_DTYPE_ROW_CHDES, (dvoid *)&amp;row_op, 
                  NULL, OCI_ATTR_CHDES_ROW_OPFLAGS, errhp));
 
      printf (&#34;Row changed is %s row_op %d\n&#34;, row_id, row_op);
      fflush(stdout); 
    }  
}
 
void processTableChanges(OCIEnv *envhp, OCIError *errhp, OCIStmt *stmthp,
                         OCIColl *table_changes)
{
  dvoid **table_descp;
  dvoid *table_desc;
  dvoid **row_descp;
  dvoid *row_desc;
  OCIColl *row_changes = (OCIColl *)0;
  boolean exist; 
  ub2 i, j;
  dvoid *elemind = (dvoid *)0;
  oratext *table_name;
  ub4 table_op;
 
 
   sb4 num_tables;
   if (!table_changes) return;
    checker(errhp, OCICollSize(envhp, errhp,
                    (CONST OCIColl *) table_changes, &amp;num_tables));
    for (i=0; i&lt;num_tables; i++)
    {
      checker(errhp, OCICollGetElem(envhp,
                     errhp, (OCIColl *) table_changes,
                     i, &amp;exist, &amp;table_descp, &amp;elemind));
 
      table_desc = *table_descp;
      checker(errhp, OCIAttrGet (table_desc, 
                  OCI_DTYPE_TABLE_CHDES, (dvoid *)&amp;table_name,
                  NULL, OCI_ATTR_CHDES_TABLE_NAME, errhp));
      checker(errhp, OCIAttrGet (table_desc, 
                  OCI_DTYPE_TABLE_CHDES, (dvoid *)&amp;table_op, 
                  NULL, OCI_ATTR_CHDES_TABLE_OPFLAGS, errhp));
      checker(errhp, OCIAttrGet (table_desc, 
                  OCI_DTYPE_TABLE_CHDES, (dvoid *)&amp;row_changes, 
                  NULL, OCI_ATTR_CHDES_TABLE_ROW_CHANGES, errhp));
 
      printf (&#34;Table changed is %s table_op %d\n&#34;, table_name,table_op);
      fflush(stdout); 
     if (!bit(table_op, OCI_OPCODE_ALLROWS))
       processRowChanges(envhp, errhp, stmthp, row_changes);
    }  
}
 
void processQueryChanges(OCIEnv *envhp, OCIError *errhp, OCIStmt *stmthp,
                         OCIColl *query_changes)
{
  sb4 num_queries;
  ub8 queryid;
  OCINumber qidnum;
  ub4 queryop;
  dvoid *elemind = (dvoid *)0;
  dvoid *query_desc;
  dvoid **query_descp;
  ub2 i;
  boolean exist;
  OCIColl *table_changes = (OCIColl *)0;
  
  if (!query_changes) return;
  checker(errhp, OCICollSize(envhp, errhp,
                     (CONST OCIColl *) query_changes, &amp;num_queries));
  for (i=0; i &lt; num_queries; i++)
  {
    checker(errhp, OCICollGetElem(envhp,
                     errhp, (OCIColl *) query_changes,
                     i, &amp;exist, &amp;query_descp, &amp;elemind));
 
    query_desc = *query_descp;
    checker(errhp, OCIAttrGet (query_desc,
                  OCI_DTYPE_CQDES, (dvoid *)&amp;queryid,
                  NULL, OCI_ATTR_CQDES_QUERYID, errhp));
    checker(errhp, OCIAttrGet (query_desc,
                  OCI_DTYPE_CQDES, (dvoid *)&amp;queryop,
                  NULL, OCI_ATTR_CQDES_OPERATION, errhp));
    printf(&#34; Query %d is changed\n&#34;, queryid);
    if (queryop == OCI_EVENT_DEREG)
      printf(&#34;Query Deregistered\n&#34;);
      checker(errhp, OCIAttrGet (query_desc,
                  OCI_DTYPE_CQDES, (dvoid *)&amp;table_changes,
                  NULL, OCI_ATTR_CQDES_TABLE_CHANGES, errhp));
      processTableChanges(envhp, errhp, stmthp, table_changes);
 
 
   }
}
 
   
void myCallback (ctx, subscrhp, payload, payl, descriptor, mode)
dvoid *ctx;
OCISubscription *subscrhp;
dvoid *payload;
ub4 *payl; 
dvoid *descriptor;
ub4 mode;
{
  OCIColl *table_changes = (OCIColl *)0;
  OCIColl *row_changes = (OCIColl *)0;
  dvoid *change_descriptor = descriptor;
  ub4 notify_type;
  ub2 i, j;
  OCIEnv *envhp;
  OCIError *errhp;
  OCIColl *query_changes = (OCIColl *)0;
  OCIServer *srvhp;
  OCISvcCtx *svchp;
  OCISession *usrhp;
  dvoid     *tmp; 
  OCIStmt *stmthp;
 
 (void)OCIEnvInit( (OCIEnv **) &amp;envhp, OCI_DEFAULT, (size_t)0, (dvoid **)0 );
  
  (void) OCIHandleAlloc( (dvoid *) envhp, (dvoid **) &amp;errhp, OCI_HTYPE_ERROR,
                   (size_t) 0, (dvoid **) 0);
   /* server contexts */
  (void) OCIHandleAlloc( (dvoid *) envhp, (dvoid **) &amp;srvhp, OCI_HTYPE_SERVER,
                   (size_t) 0, (dvoid **) 0);
 
  (void) OCIHandleAlloc( (dvoid *) envhp, (dvoid **) &amp;svchp, OCI_HTYPE_SVCCTX,
                   (size_t) 0, (dvoid **) 0);
 
  OCIAttrGet (change_descriptor, OCI_DTYPE_CHDES, (dvoid *) &amp;notify_type,
              NULL, OCI_ATTR_CHDES_NFYTYPE, errhp);
  fflush(stdout);
  if (notify_type == OCI_EVENT_SHUTDOWN ||
      notify_type == OCI_EVENT_SHUTDOWN_ANY)
  {
     printf(&#34;SHUTDOWN NOTIFICATION RECEIVED\n&#34;);
     fflush(stdout);
     notifications_processed++;
     return;
  }
 if (notify_type == OCI_EVENT_STARTUP)
  {
     printf(&#34;STARTUP NOTIFICATION RECEIVED\n&#34;);
     fflush(stdout);
     notifications_processed++; 
     return;
  }
  
  notifications_processed++;
  checker(errhp, OCIServerAttach( srvhp, errhp, (text *) 0, (sb4) 0,
                                  (ub4) OCI_DEFAULT));
 
  OCIHandleAlloc( (dvoid *) envhp, (dvoid **) &amp;svchp, (ub4) OCI_HTYPE_SVCCTX,
                  52, (dvoid **) &amp;tmp);
  /* set attribute server context in the service context */
  OCIAttrSet( (dvoid *) svchp, (ub4) OCI_HTYPE_SVCCTX, (dvoid *)srvhp,
              (ub4) 0, (ub4) OCI_ATTR_SERVER, (OCIError *) errhp);
 
  /* allocate a user context handle */
  OCIHandleAlloc((dvoid *)envhp, (dvoid **)&amp;usrhp, (ub4) OCI_HTYPE_SESSION,
           (size_t) 0, (dvoid **) 0);
 
  OCIAttrSet((dvoid *)usrhp, (ub4)OCI_HTYPE_SESSION,
           (dvoid *)&#34;HR&#34;, (ub4)strlen(&#34;HR&#34;), OCI_ATTR_USERNAME, errhp);
 
  OCIAttrSet((dvoid *)usrhp, (ub4)OCI_HTYPE_SESSION,
           (dvoid *)&#34;HR&#34;, (ub4)strlen(&#34;HR&#34;),
           OCI_ATTR_PASSWORD, errhp);
 
  checker(errhp, OCISessionBegin (svchp, errhp, usrhp, OCI_CRED_RDBMS,
                                   OCI_DEFAULT));
 
  OCIAttrSet((dvoid *)svchp, (ub4)OCI_HTYPE_SVCCTX,
           (dvoid *)usrhp, (ub4)0, OCI_ATTR_SESSION, errhp);
 
  /* Allocate a statement handle */
  OCIHandleAlloc( (dvoid *) envhp, (dvoid **) &amp;stmthp,
                  (ub4) OCI_HTYPE_STMT, 52, (dvoid **) &amp;tmp);
 
  if (notify_type == OCI_EVENT_OBJCHANGE)
  {
    checker(errhp, OCIAttrGet (change_descriptor,
                OCI_DTYPE_CHDES, &amp;table_changes, NULL,
                OCI_ATTR_CHDES_TABLE_CHANGES, errhp));
    processTableChanges(envhp, errhp, stmthp, table_changes);
  }
  else if (notify_type == OCI_EVENT_QUERYCHANGE)
  {
     checker(errhp, OCIAttrGet (change_descriptor,
                OCI_DTYPE_CHDES, &amp;query_changes, NULL,
                OCI_ATTR_CHDES_QUERIES, errhp));
      processQueryChanges(envhp, errhp, stmthp, query_changes);
  }
   checker(errhp, OCISessionEnd(svchp, errhp, usrhp, OCI_DEFAULT));
  checker(errhp, OCIServerDetach(srvhp, errhp, OCI_DEFAULT));
 if (stmthp)
    OCIHandleFree((dvoid *)stmthp, OCI_HTYPE_STMT);
  if (errhp)
    OCIHandleFree((dvoid *)errhp, OCI_HTYPE_ERROR);
  if (srvhp)
    OCIHandleFree((dvoid *)srvhp, OCI_HTYPE_SERVER);
  if (svchp)
    OCIHandleFree((dvoid *)svchp, OCI_HTYPE_SVCCTX);
  if (usrhp)
    OCIHandleFree((dvoid *)usrhp, OCI_HTYPE_SESSION);
  if (envhp)
    OCIHandleFree((dvoid *)envhp, OCI_HTYPE_ENV);
 
}
 
void registerQuery(svchp, errhp, stmthp, envhp)
OCISvcCtx *svchp; 
OCIError *errhp; 
OCIStmt *stmthp;
OCIEnv *envhp;
{
  OCISubscription *subscrhp;
  ub4 namespace = OCI_SUBSCR_NAMESPACE_DBCHANGE;
  ub4 timeout = 60;
  OCIDefine *defnp1 = (OCIDefine *)0;
  OCIDefine *defnp2 = (OCIDefine *)0;
  OCIDefine *defnp3 = (OCIDefine *)0;
  OCIDefine *defnp4 = (OCIDefine *)0;
  OCIDefine *defnp5 = (OCIDefine *)0;
  int mgr_id =0;
text query_text1[] = &#34;select last_name, employees.department_id, department_name \
 from employees,departments where employee_id = 200 and employees.department_id =\
  departments.department_id&#34;;
 
  ub4 num_prefetch_rows = 0;
  ub4 num_reg_tables;
  OCIColl *table_names;
  ub2 i;
  boolean rowids = TRUE;
  ub4 qosflags = OCI_SUBSCR_CQ_QOS_QUERY  ;
  int empno=0;
  OCINumber qidnum;
  ub8 qid;
  char outstr[MAXSTRLENGTH], dname[MAXSTRLENGTH];
  int q3out;
 
    fflush(stdout);
  /* allocate subscription handle */
  OCIHandleAlloc ((dvoid *) envhp, (dvoid **) &amp;subscrhp,
                  OCI_HTYPE_SUBSCRIPTION, (size_t) 0, (dvoid **) 0);
  
  /* set the namespace to DBCHANGE */
  checker(errhp, OCIAttrSet (subscrhp, OCI_HTYPE_SUBSCRIPTION,
                  (dvoid *) &amp;namespace, sizeof(ub4),
                  OCI_ATTR_SUBSCR_NAMESPACE, errhp));
  
  /* Associate a notification callback with the subscription */
  checker(errhp, OCIAttrSet (subscrhp, OCI_HTYPE_SUBSCRIPTION,
                  (void *)myCallback, 0, OCI_ATTR_SUBSCR_CALLBACK, errhp));
 /* Allow extraction of rowid information */
  checker(errhp, OCIAttrSet (subscrhp, OCI_HTYPE_SUBSCRIPTION,
                  (dvoid *)&amp;rowids, sizeof(ub4), 
                  OCI_ATTR_CHNF_ROWIDS, errhp));
   
     checker(errhp, OCIAttrSet (subscrhp, OCI_HTYPE_SUBSCRIPTION,
                  (dvoid *)&amp;qosflags, sizeof(ub4),
                  OCI_ATTR_SUBSCR_CQ_QOSFLAGS, errhp));
 
  /* Create a new registration in the DBCHANGE namespace */
  checker(errhp,
           OCISubscriptionRegister(svchp, &amp;subscrhp, 1, errhp, OCI_DEFAULT));
 
  /* Multiple queries can now be associated with the subscription */
 
    subhandle1 = subscrhp;
 
 
    printf(&#34;Registering query : %s\n&#34;, (const signed char *)query_text1);
    /* Prepare the statement */
    checker(errhp, OCIStmtPrepare (stmthp, errhp, query_text1, 
            (ub4)strlen((const signed char *)query_text1), OCI_V7_SYNTAX,
            OCI_DEFAULT));
 
    checker(errhp,
           OCIDefineByPos(stmthp, &amp;defnp1,
                  errhp, 1, (dvoid *)outstr, MAXSTRLENGTH * sizeof(char),
                  SQLT_STR, (dvoid *)0, (ub2 *)0, (ub2 *)0, OCI_DEFAULT));
    checker(errhp,
           OCIDefineByPos(stmthp, &amp;defnp2,
                     errhp, 2, (dvoid *)&amp;empno, sizeof(empno),
                     SQLT_INT, (dvoid *)0, (ub2 *)0, (ub2 *)0, OCI_DEFAULT));
    checker(errhp,
           OCIDefineByPos(stmthp, &amp;defnp3,
                      errhp, 3, (dvoid *)&amp;dname, sizeof(dname),
                     SQLT_STR, (dvoid *)0, (ub2 *)0, (ub2 *)0, OCI_DEFAULT));
 
    /* Associate the statement with the subscription handle */
    OCIAttrSet (stmthp, OCI_HTYPE_STMT, subscrhp, 0,
              OCI_ATTR_CHNF_REGHANDLE, errhp);
 
    /* Execute the statement, the execution performs object registration */
    checker(errhp, OCIStmtExecute (svchp, stmthp, errhp, (ub4) 1, (ub4) 0,
                 (CONST OCISnapshot *) NULL, (OCISnapshot *) NULL ,
                 OCI_DEFAULT));
    fflush(stdout);
 
    OCIAttrGet(stmthp, OCI_HTYPE_STMT, &amp;qid, (ub4 *)0,
                OCI_ATTR_CQ_QUERYID, errhp);
    printf(&#34;Query Id %d\n&#34;, qid);
 
  /* commit */
  checker(errhp, OCITransCommit(svchp, errhp, (ub4) 0));
 
}
 
static void cleanup(envhp, svchp, srvhp, errhp, usrhp)
OCIEnv *envhp;
OCISvcCtx *svchp;
OCIServer *srvhp;
OCIError *errhp;
OCISession *usrhp;
{
  /* detach from the server */
  checker(errhp, OCISessionEnd(svchp, errhp, usrhp, OCI_DEFAULT));
  checker(errhp, OCIServerDetach(srvhp, errhp, (ub4)OCI_DEFAULT));
 
  if (usrhp)
    (void) OCIHandleFree((dvoid *) usrhp, (ub4) OCI_HTYPE_SESSION);
  if (svchp)
    (void) OCIHandleFree((dvoid *) svchp, (ub4) OCI_HTYPE_SVCCTX);
  if (srvhp)
    (void) OCIHandleFree((dvoid *) srvhp, (ub4) OCI_HTYPE_SERVER);
  if (errhp)
    (void) OCIHandleFree((dvoid *) errhp, (ub4) OCI_HTYPE_ERROR);
  if (envhp)
    (void) OCIHandleFree((dvoid *) envhp, (ub4) OCI_HTYPE_ENV);
 
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BGBIAEBB"></a>
<div id="ADFNS1301" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">15.9</span> Querying CQN Registrations</h2>
<p>To see top-level information about all registrations, including their QOS options, query the static data dictionary view <code dir="ltr">*_CHANGE_NOTIFICATION_REGS</code>.</p>
<p>For example, you can obtain the registration ID for a client and the list of objects for which it receives notifications. To view registration IDs and table names for <code dir="ltr">HR</code>, use this query:</p>
<pre dir="ltr">SELECT <span class="italic">regid</span>, <span class="italic">table_name</span> FROM USER_CHANGE_NOTIFICATION_REGS;
</pre>
<p>To see which queries are registered for QRCN, query the static data dictionary view <code dir="ltr">USER_CQ_NOTIFICATION_QUERIES</code> or <code dir="ltr">DBA_CQ_NOTIFICATION_QUERIES</code>. These views include information about any bind values that the queries use. In these views, bind values in the original query are included in the query text as constants. The query text is equivalent, but maybe not identical, to the original query that was registered.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<span class="italic">Oracle Database Reference</span> for more information about the static data dictionary views <a class="olink REFRN23537" href="../REFRN/GUID-32CCF6DF-65FF-4ABE-8FB5-9051C0AD33C9.htm#REFRN23537"><code dir="ltr">USER_CHANGE_NOTIFICATION_REGS</code></a> and <a class="olink REFRN23626" href="../REFRN/GUID-F17C77B5-80D9-4BD6-A16E-ADBE1947BE84.htm#REFRN23626"><code dir="ltr">DBA_CQ_NOTIFICATION_QUERIES</code></a></div>
</div>
<!-- class="sect1" -->
<a id="BGBDEDGJ"></a>
<div id="ADFNS1017" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">15.10</span> Interpreting Notifications</h2>
<p>When a transaction commits, the database determines whether registered objects were modified in the transaction. If so, it runs the notification handler specified in the registration.</p>
<p class="subhead2"><a id="ADFNS1066"></a>Topics:</p>
<ul>
<li>
<p><a href="#BDCFHCJE">Interpreting a CQ_NOTIFICATION$_DESCRIPTOR Object</a></p>
</li>
<li>
<p><a href="#g1828864">Interpreting a CQ_NOTIFICATION$_TABLE Object</a></p>
</li>
<li>
<p><a href="#CHDIDGDD">Interpreting a CQ_NOTIFICATION$_QUERY Object</a></p>
</li>
<li>
<p><a href="#g1828852">Interpreting a CQ_NOTIFICATION$_ROW Object</a></p>
</li>
</ul>
<a id="BDCFHCJE"></a>
<div id="ADFNS585" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">15.10.1</span> Interpreting a CQ_NOTIFICATION$_DESCRIPTOR Object</h3>
<p><a id="sthref805"></a>When a CQN registration generates a notification, the database passes a <code dir="ltr">CQ_NOTIFICATION$_DESCRIPTOR</code> object to the notification handler. The notification handler can find the details of the database change in the attributes of the <code dir="ltr">CQ_NOTIFICATION$_DESCRIPTOR</code> object.</p>
<p>In SQL*Plus, you can list these attributes by connecting as <code dir="ltr">SYS</code> and running this statement:</p>
<pre dir="ltr">DESC CQ_NOTIFICATION$_DESCRIPTOR
</pre>
<p><a href="#CHEDAHIA">Table 15-4</a> summarizes the attributes of <code dir="ltr">CQ_NOTIFICATION$_DESCRIPTOR</code>.</p>
<div id="ADFNS586" class="tblhruleformal">
<p class="titleintable"><a id="sthref806"></a><a id="CHEDAHIA"></a>Table 15-4 Attributes of CQ_NOTIFICATION$_DESCRIPTOR</p>
<table class="cellalignment296" title="Attributes of CQ_NOTIFICATION$_DESCRIPTOR" summary="This table summarizes the attributes of the SYS.CHNF$_REG_INFO_OC4J datatype." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t29">Attribute</th>
<th class="cellalignment294" id="r1c2-t29">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t29" headers="r1c1-t29">
<p><code dir="ltr">REGISTRATION_ID</code></p>
</td>
<td class="cellalignment295" headers="r2c1-t29 r1c2-t29">
<p>The registration ID that was returned during registration.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t29" headers="r1c1-t29">
<p><code dir="ltr">TRANSACTION_ID</code></p>
</td>
<td class="cellalignment295" headers="r3c1-t29 r1c2-t29">
<p>The ID for the transaction that made the change.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t29" headers="r1c1-t29">
<p><code dir="ltr">DBNAME</code></p>
</td>
<td class="cellalignment295" headers="r4c1-t29 r1c2-t29">
<p>The name of the database in which the notification was generated.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t29" headers="r1c1-t29">
<p><code dir="ltr">EVENT_TYPE</code></p>
</td>
<td class="cellalignment295" headers="r5c1-t29 r1c2-t29">
<p>The database event that triggers a notification. For example, the attribute can contain these constants, which correspond to different database events:</p>
<ul>
<li>
<p><code dir="ltr">EVENT_NONE</code></p>
</li>
<li>
<p><code dir="ltr">EVENT_STARTUP</code> (Instance startup)</p>
</li>
<li>
<p><code dir="ltr">EVENT_SHUTDOWN</code> (Instance shutdown - last instance shutdown for Oracle RAC)</p>
</li>
<li>
<p><code dir="ltr">EVENT_SHUTDOWN_ANY</code> (Any instance shutdown for Oracle RAC)</p>
</li>
<li>
<p><code dir="ltr">EVENT_DEREG</code> (Registration was removed)</p>
</li>
<li>
<p><code dir="ltr">EVENT_OBJCHANGE</code> (Change to a registered table)</p>
</li>
<li>
<p><code dir="ltr">EVENT_QUERYCHANGE</code> (Change to a registered result set)</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r6c1-t29" headers="r1c1-t29">
<p><code dir="ltr">NUMTABLES</code></p>
</td>
<td class="cellalignment295" headers="r6c1-t29 r1c2-t29">
<p>The number of tables that were modified.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r7c1-t29" headers="r1c1-t29">
<p><code dir="ltr">TABLE_DESC_ARRAY</code></p>
</td>
<td class="cellalignment295" headers="r7c1-t29 r1c2-t29">
<p>This field is present only for OCN registrations. For QRCN registrations, it is <code dir="ltr">NULL</code>.</p>
<p>If <code dir="ltr">EVENT_TYPE</code> is <code dir="ltr">EVENT_OBJCHANGE</code>]: a <code dir="ltr">VARRAY</code> of table change descriptors of type <code dir="ltr">CQ_NOTIFICATION$_TABLE</code>, each of which corresponds to a changed table. For attributes of <code dir="ltr">CQ_NOTIFICATION$_TABLE</code>, see <a href="#CHEGCHEE">Table 15-5</a>.</p>
<p>Otherwise: <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r8c1-t29" headers="r1c1-t29">
<p><code dir="ltr">QUERY_DESC_ARRAY</code></p>
</td>
<td class="cellalignment295" headers="r8c1-t29 r1c2-t29">
<p>This field is present only for QRCN registrations. For OCN registrations, it is <code dir="ltr">NULL</code>.</p>
<p>If <code dir="ltr">EVENT_TYPE</code> is <code dir="ltr">EVENT_QUERYCHANGE</code>]: a <code dir="ltr">VARRAY</code> of result set change descriptors of type <code dir="ltr">CQ_NOTIFICATION$_QUERY</code>, each of which corresponds to a changed result set. For attributes of <code dir="ltr">CQ_NOTIFICATION$_QUERY</code>, see <a href="#CHDGBGHJ">Table 15-6</a>.</p>
<p>Otherwise: <code dir="ltr">NULL</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" --></div>
<!-- class="sect2" -->
<a id="g1828864"></a>
<div id="ADFNS587" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">15.10.2</span> Interpreting a CQ_NOTIFICATION$_TABLE Object</h3>
<p>The <a id="sthref807"></a><code dir="ltr">CQ_NOTIFICATION$_DESCRIPTOR</code> type contains an attribute called <code dir="ltr">TABLE_DESC_ARRAY</code>, which holds a <code dir="ltr">VARRAY</code> of table descriptors of type <code dir="ltr">CQ_NOTIFICATION$_TABLE</code>.</p>
<p>In SQL*Plus, you can list these attributes by connecting as <code dir="ltr">SYS</code> and running this statement:</p>
<pre dir="ltr">DESC CQ_NOTIFICATION$_TABLE
</pre>
<p><a href="#CHEGCHEE">Table 15-5</a> summarizes the attributes of <code dir="ltr">CQ_NOTIFICATION$_TABLE</code>.</p>
<div id="ADFNS588" class="tblhruleformal">
<p class="titleintable"><a id="sthref808"></a><a id="CHEGCHEE"></a>Table 15-5 Attributes of CQ_NOTIFICATION$_TABLE</p>
<table class="cellalignment296" title="Attributes of CQ_NOTIFICATION$_TABLE" summary="This table summarizes the attributes of the SYS.CHNF$_REG_INFO_OC4J datatype." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t30">Attribute</th>
<th class="cellalignment294" id="r1c2-t30">Specifies . . .</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t30" headers="r1c1-t30">
<p><code dir="ltr">OPFLAGS</code></p>
</td>
<td class="cellalignment295" headers="r2c1-t30 r1c2-t30">
<p>The type of operation performed on the modified table. For example, the attribute can contain these constants, which correspond to different database operations:</p>
<ul>
<li>
<p><code dir="ltr">ALL_ROWS</code> signifies that either the entire table is modified, as in a <code dir="ltr">DELETE</code> <code dir="ltr">*</code>, or row-level granularity of information is not requested or unavailable in the notification, and the recipient must assume that the entire table has changed</p>
</li>
<li>
<p><code dir="ltr">UPDATEOP</code> signifies an update</p>
</li>
<li>
<p><code dir="ltr">DELETEOP</code> signifies a deletion</p>
</li>
<li>
<p><code dir="ltr">ALTEROP</code> signifies an <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code></p>
</li>
<li>
<p><code dir="ltr">DROPOP</code> signifies a <code dir="ltr">DROP</code> <code dir="ltr">TABLE</code></p>
</li>
<li>
<p><code dir="ltr">UNKNOWNOP</code> signifies an unknown operation</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t30" headers="r1c1-t30">
<p><code dir="ltr">TABLE_NAME</code></p>
</td>
<td class="cellalignment295" headers="r3c1-t30 r1c2-t30">
<p>The name of the modified table.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t30" headers="r1c1-t30">
<p><code dir="ltr">NUMROWS</code></p>
</td>
<td class="cellalignment295" headers="r4c1-t30 r1c2-t30">
<p>The number of modified rows.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t30" headers="r1c1-t30">
<p><code dir="ltr">ROW_DESC_ARRAY</code></p>
</td>
<td class="cellalignment295" headers="r5c1-t30 r1c2-t30">
<p>A <code dir="ltr">VARRAY</code> of row descriptors of type <code dir="ltr">CQ_NOTIFICATION$_ROW</code>, which <a href="#CHEBBJJB">Table 15-7</a> describes. If <code dir="ltr">ALL_ROWS</code> was set in the <code dir="ltr">opflags</code>, then the <code dir="ltr">ROW_DESC_ARRAY</code> member is <code dir="ltr">NULL</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" --></div>
<!-- class="sect2" -->
<a id="CHDIDGDD"></a>
<div id="ADFNS589" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">15.10.3</span> Interpreting a CQ_NOTIFICATION$_QUERY Object</h3>
<p>The <a id="sthref809"></a><code dir="ltr">CQ_NOTIFICATION$_DESCRIPTOR</code> type contains an attribute called <code dir="ltr">QUERY_DESC_ARRAY</code>, which holds a <code dir="ltr">VARRAY</code> of result set change descriptors of type <code dir="ltr">CQ_NOTIFICATION$_QUERY</code>.</p>
<p>In SQL*Plus, you can list these attributes by connecting as <code dir="ltr">SYS</code> and running this statement:</p>
<pre dir="ltr">DESC CQ_NOTIFICATION$_QUERY
</pre>
<p><a href="#CHDGBGHJ">Table 15-6</a> summarizes the attributes of <code dir="ltr">CQ_NOTIFICATION$_QUERY</code>.</p>
<div id="ADFNS590" class="tblhruleformal">
<p class="titleintable"><a id="sthref810"></a><a id="CHDGBGHJ"></a>Table 15-6 Attributes of CQ_NOTIFICATION$_QUERY</p>
<table class="cellalignment296" title="Attributes of CQ_NOTIFICATION$_QUERY" summary="This table summarizes the attributes of the SYS.CHNF$_REG_INFO_OC4J datatype." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t31">Attribute</th>
<th class="cellalignment294" id="r1c2-t31">Specifies . . .</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t31" headers="r1c1-t31">
<p><code dir="ltr">QUERYID</code></p>
</td>
<td class="cellalignment295" headers="r2c1-t31 r1c2-t31">
<p>Query ID of the changed query.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t31" headers="r1c1-t31">
<p><code dir="ltr">QUERYOP</code></p>
</td>
<td class="cellalignment295" headers="r3c1-t31 r1c2-t31">
<p>Operation that changed the query (either <code dir="ltr">EVENT_QUERYCHANGE</code> or <code dir="ltr">EVENT_DEREG</code>).</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t31" headers="r1c1-t31">
<p><code dir="ltr">TABLE_DESC_ARRAY</code></p>
</td>
<td class="cellalignment295" headers="r4c1-t31 r1c2-t31">
<p>A <code dir="ltr">VARRAY</code> of table change descriptors of type <code dir="ltr">CQ_NOTIFICATION$_TABLE</code>, each of which corresponds to a changed table that caused a change in the result set. For attributes of <code dir="ltr">CQ_NOTIFICATION$_TABLE</code>, see <a href="#CHEGCHEE">Table 15-5</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" --></div>
<!-- class="sect2" -->
<a id="g1828852"></a>
<div id="ADFNS591" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">15.10.4</span> Interpreting a CQ_NOTIFICATION$_ROW Object</h3>
<p>If the <code dir="ltr">ROWID</code> option was specified during registration, the <code dir="ltr">CQ_NOTIFICATION$_TABLE</code> type has a <code dir="ltr">ROW_DESC_ARRAY</code> attribute, a <code dir="ltr">VARRAY</code> of type <a id="sthref811"></a><code dir="ltr">CQ_NOTIFICATION$_ROW</code> that contains the <code dir="ltr">ROWID</code>s for the changed rows. If <code dir="ltr">ALL_ROWS</code> was set in the <code dir="ltr">OPFLAGS</code> field of the <code dir="ltr">CQ_NOTIFICATION$_TABLE</code> object, then <code dir="ltr">ROWID</code> information is unavailable.</p>
<p><a href="#CHEBBJJB">Table 15-7</a> summarizes the attributes of <code dir="ltr">CQ_NOTIFICATION$_ROW</code>.</p>
<div id="ADFNS592" class="tblhruleformal">
<p class="titleintable"><a id="sthref812"></a><a id="CHEBBJJB"></a>Table 15-7 Attributes of CQ_NOTIFICATION$_ROW</p>
<table class="cellalignment296" title="Attributes of CQ_NOTIFICATION$_ROW" summary="This table summarizes the attributes of the SYS.CHNF$_REG_INFO_OC4J datatype." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t32">Attribute</th>
<th class="cellalignment294" id="r1c2-t32">Specifies . . .</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t32" headers="r1c1-t32">
<p><code dir="ltr">OPFLAGS</code></p>
</td>
<td class="cellalignment295" headers="r2c1-t32 r1c2-t32">
<p>The type of operation performed on the modified table. See the description of <code dir="ltr">OPFLAGS</code> in <a href="#CHEGCHEE">Table 15-5</a>.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t32" headers="r1c1-t32">
<p><code dir="ltr">ROW_ID</code></p>
</td>
<td class="cellalignment295" headers="r3c1-t32 r1c2-t32">
<p>The <code dir="ltr">ROWID</code> of the changed row.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment286">
<tr>
<td class="cellalignment295">
<table class="cellalignment291">
<tr>
<td class="cellalignment290"><a href="adfns_web.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment290"><a href="adfns_part_special.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment298">
<table class="cellalignment289">
<tr>
<td class="cellalignment290"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment290"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment290"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment290"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment290"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment290"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>


</body></html>