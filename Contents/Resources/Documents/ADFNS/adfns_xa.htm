<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-89"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Developing%20Applications%20with%20Oracle%20XA"></a><title>Developing Applications with Oracle XA</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1080"/>
<meta name="dcterms.created" content="2016-05-05T16:23:35Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Development Guide"/>
<meta name="dcterms.identifier" content="E41452-07"/>
<meta name="dcterms.isVersionOf" content="ADFNS"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="adfns_externproc.htm" title="Previous" type="text/html"/>
<link rel="Next" href="adfns_publish.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41452-07.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">30/38</span> <!-- End Header -->
<div id="ADFNS017" class="chapter"><a id="g1027587"></a>
<h1 class="chapter"><span class="secnum">19</span> Developing Applications with Oracle XA</h1>
<div class="infobox-note">
<p class="notep1">Note:</p>
Avoid using XA if possible, for these reasons:
<ul>
<li>
<p>XA can degrade performance.</p>
</li>
<li>
<p>XA can cause in-doubt transactions.</p>
</li>
<li>
<p>XA might be unable to take advantage of Oracle Database 12<span class="italic">c</span> Release 1 (12.1.0.1) features that enhance the ability of applications to continue after recoverable outages.</p>
</li>
</ul>
<p>It might be possible to avoid using XA even when that seems avoidable (for example, if Oracle and non-Oracle resources must be used in the same transaction).</p>
</div>
<p><a id="sthref954"></a>This chapter explains how to use the Oracle XA library. Typically, you use this library in applications that work with transaction monitors. The XA features are most useful in applications in which transactions interact with multiple databases.</p>
<p class="subhead2"><a id="ADFNS1097"></a>Topics:</p>
<ul>
<li>
<p><a href="#BGBDAJCI">X/Open Distributed Transaction Processing (DTP)</a></p>
</li>
<li>
<p><a href="#i1006316">Oracle XA Library Subprograms</a></p>
</li>
<li>
<p><a href="#BGBJFJCJ">Developing and Installing XA Applications</a></p>
</li>
<li>
<p><a href="#i1007004">Troubleshooting XA Applications</a></p>
</li>
<li>
<p><a href="#i1007056">Oracle XA Issues and Restrictions</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<ul>
<li>
<p><span class="italic">Distributed TP: The XA Specification</span>, for an overview of XA, including basic architecture<span class="italic">.</span> Access at <code dir="ltr"><a href="https://www2.opengroup.org/ogsys/jsp/publications/PublicationDetails.jsp?publicationid=11144">https://www2.opengroup.org/ogsys/jsp/publications/PublicationDetails.jsp?publicationid=11144</a></code>.</p>
</li>
<li>
<p><a class="olink LNOCI350" href="../LNOCI/ociadwin.htm#LNOCI350"><span class="italic">Oracle Call Interface Programmer&#39;s Guide</span></a> for background and reference information about the Oracle XA library</p>
</li>
<li>
<p>The Oracle Database platform-specific documentation for information about library linking filenames</p>
</li>
<li>
<p>README for changes, bugs, and restrictions in the Oracle XA library for your platform</p>
</li>
</ul>
</div>
<a id="BGBDAJCI"></a>
<div id="ADFNS1501" class="sect1">
<h2 class="sect1"><span class="secnum">19.1</span> X/Open Distributed Transaction Processing (DTP)</h2>
<p>The <a id="sthref955"></a>X/Open Distributed Transaction Processing (<a id="sthref956"></a>DTP) architecture defines a standard architecture or interface that enables multiple application programs (APs) to share resources provided by multiple, and possibly different, resource managers (RMs). It coordinates the work between APs and RMs into global transactions.</p>
<p>The Oracle XA library conforms to the X/Open software architecture&#39;s XA interface specification. The Oracle XA library is an external interface that enables a client-side transaction manager (TM) that is not an Oracle client-side TM to coordinate global transactions, thereby allowing inclusion of database RMs that are not Oracle Database RMs in distributed transactions. For example, a client application can manage an Oracle Database transaction and a transaction in an NTFS file system as a single, global transaction.</p>
<p><a href="#BGBJEHGJ">Figure 19-1</a> illustrates a possible X/Open DTP model.</p>
<div id="ADFNS760" class="figure">
<p class="titleinfigure"><a id="BGBJEHGJ"></a>Figure 19-1 Possible DTP Model</p>
<img width="446" height="453" src="img/adfns079.gif" alt="Description of Figure 19-1 follows"/><br/>
<a id="sthref957" href="img_text/adfns079.htm">Description of &#39;&#39;Figure 19-1 Possible DTP Model&#39;&#39;</a><br/>
<br/></div>
<!-- class="figure" -->
<p class="subhead2"><a id="ADFNS1098"></a>Topics:</p>
<ul>
<li>
<p><a href="#g1405585">DTP Terminology</a></p>
</li>
<li>
<p><a href="#g1026535">Required Public Information</a></p>
</li>
</ul>
<a id="g1405585"></a>
<div id="ADFNS761" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">19.1.1</span> DTP Terminology</h3>
<ul>
<li>
<p><a href="#BABDCAIG">Resource Manager (RM)</a></p>
</li>
<li>
<p><a href="#BABFFCHB">Distributed Transaction</a></p>
</li>
<li>
<p><a href="#BABHEGBF">Branch</a></p>
</li>
<li>
<p><a href="#BABIACJA">Transaction Manager (TM)</a></p>
</li>
<li>
<p><a href="#BABDBFFB">Transaction Processing Monitor (TPM)</a></p>
</li>
<li>
<p><a href="#BABBBCHD">Two-Phase Commit Protocol</a></p>
</li>
<li>
<p><a href="#BABCBIAH">Application Program (AP)</a></p>
</li>
<li>
<p><a href="#BABFDADA">TX Interface</a></p>
</li>
<li>
<p><a href="#BABBDDFC">Tight and Loose Coupling</a></p>
</li>
<li>
<p><a href="#BABGHHEG">Dynamic and Static Registration</a></p>
</li>
</ul>
<p class="subhead2"><a id="BABDCAIG"></a><a id="ADFNS762"></a>Resource Manager (RM)</p>
<p>A <a id="sthref958"></a><a id="sthref959"></a>resource manager controls a shared, recoverable resource that can be returned to a consistent state after a failure. Examples are relational databases, transactional queues, and transactional file systems. Oracle Database is an RM and uses its online redo log and undo segments to return to a consistent state after a failure.</p>
<p class="subhead2"><a id="BABFFCHB"></a><a id="ADFNS763"></a>Distributed Transaction</p>
<p>A <a id="sthref960"></a><a id="sthref961"></a>distributed transaction, also called a <a id="sthref962"></a><a id="sthref963"></a><span class="glossaryterm">global transaction</span>, is a client transaction that involves updates to multiple distributed resources and requires &#34;all-or-none&#34; semantics across distributed RMs.</p>
<p class="subhead2"><a id="BABHEGBF"></a><a id="ADFNS764"></a>Branch</p>
<p>A <a id="sthref964"></a>branch is a unit of work contained within one RM. Multiple branches comprise a global transaction. For Oracle Database, each branch maps to a local transaction inside the database server.</p>
<p class="subhead2"><a id="BABIACJA"></a><a id="ADFNS765"></a>Transaction Manager (TM)</p>
<p>A <a id="sthref965"></a><a id="sthref966"></a>transaction manager provides an API for specifying the boundaries of the transaction and manages commit and recovery. The TM implements a two-phase commit engine to provide &#34;all-or-none&#34; semantics across distributed RMs.</p>
<p><a id="sthref967"></a>An <span class="glossaryterm">external TM</span> is a middle-tier component that resides outside Oracle Database. Normally, the database is its own internal TM. Using a standards-based TM enables Oracle Database to cooperate with other heterogeneous RMs in a single transaction.</p>
<p class="subhead2"><a id="BABDBFFB"></a><a id="ADFNS766"></a>Transaction Processing Monitor (TPM)</p>
<p>A TM is usually provided by a <a id="sthref968"></a><a id="sthref969"></a>transaction processing monitor (TPM), such as:</p>
<ul>
<li>
<p><a id="sthref970"></a>Oracle Tuxedo</p>
</li>
<li>
<p><a id="sthref971"></a>IBM Transarc Encina</p>
</li>
<li>
<p><a id="sthref972"></a>IBM CICS</p>
</li>
</ul>
<p>A TPM coordinates the flow of transaction requests between the client processes that issue requests and the back-end servers that process them. Basically, a TPM coordinates transactions that require the services of several different types of back-end processes, such as application servers and RMs distributed over a network.</p>
<p>The TPM synchronizes any commits or rollbacks required to complete a distributed transaction. The TM portion of the TPM is responsible for controlling when distributed commits and rollbacks take place. Thus, if a distributed application program takes advantage of a TPM, then the TM portion of the TPM is responsible for controlling the two-phase commit protocol. The RMs enable the TMs to perform this task.</p>
<p>Because the TM controls distributed commits or rollbacks, it must communicate directly with Oracle Database (or any other RM) through the XA interface. It uses Oracle XA library subprograms, which are described in <a href="#BGBJHBHA">&#34;Oracle XA Library Subprograms&#34;</a>, to tell Oracle Database how to process the transaction, based on its knowledge of all RMs in the transaction.</p>
<p class="subhead2"><a id="BABBBCHD"></a><a id="ADFNS767"></a>Two-Phase Commit Protocol</p>
<p>The Oracle XA library interface follows the <a id="sthref973"></a>two-phase commit protocol. The sequence of events is as follows:</p>
<ol>
<li>
<p>In the prepare phase, the TM asks each RM to guarantee that it can commit any part of the transaction. If this is possible, then the RM records its prepared state and replies affirmatively to the TM. If it is not possible, then the RM might roll back any work, reply negatively to the TM, and forget about the transaction. The protocol allows the application, or any RM, to roll back the transaction unilaterally until the prepare phase completes.</p>
</li>
<li>
<p>In phase two, the TM records the commit decision and issues a commit or rollback to all RMs participating in the transaction. TM can issue a commit for an RM only if all RMs have replied affirmatively to phase one.</p>
</li>
</ol>
<p class="subhead2"><a id="BABCBIAH"></a><a id="ADFNS768"></a>Application Program (AP)</p>
<p>An <a id="sthref974"></a><a id="sthref975"></a>application program defines transaction boundaries and specifies actions that constitute a transaction. For example, an AP can be a precompiler or Oracle Call Interface (OCI) program. The AP operates on the RM resource through its native interface, for example, SQL.</p>
<p class="subhead2"><a id="BABFDADA"></a><a id="ADFNS769"></a>TX Interface</p>
<p><a id="sthref976"></a><a id="sthref977"></a>An application program starts and completes all transaction control operations through the TM through an interface called <span class="glossaryterm">TX</span>. The AP does not directly use the XA interface. APs are not aware of branches that fork in the middle-tier: application threads do not explicitly join, leave, suspend, and resume branch work, instead the TM portion of the transaction processing monitor manages the branches of a global transaction for APs. Ultimately, APs call the TM to commit all-or-none.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The naming conventions for the TX interface and associated subprograms are vendor-specific. For example, the <code dir="ltr">tx_open</code> call might be referred to as <code dir="ltr">tp_open</code> on your system. In some cases, the calls might be implicit, for example, at the entry to a transactional RPC. See the documentation supplied with the transaction processing monitor for details.</div>
<p class="subhead2"><a id="BABBDDFC"></a><a id="ADFNS770"></a>Tight and Loose Coupling</p>
<p><a id="sthref978"></a><a id="sthref979"></a><a id="sthref980"></a>Application threads are <span class="bold">tightly coupled</span> if the RM considers them as a single entity for all isolation semantic purposes. Tightly coupled branches must see changes in each other. Furthermore, an external client must either see all changes of a tightly coupled set or none of the changes. If application threads are not tightly coupled, then they are <span class="bold">loosely coupled</span>.</p>
<p class="subhead2"><a id="BABGHHEG"></a><a id="ADFNS771"></a>Dynamic and Static Registration</p>
<p>Oracle Database supports both dynamic and static registration. In <a id="sthref981"></a><a id="sthref982"></a><span class="bold">dynamic registration</span>, the RM runs an application callback before starting any work. In <a id="sthref983"></a><a id="sthref984"></a><span class="bold">static registration</span>, you must call <code dir="ltr">xa_start</code> for each RM before starting any work, even if some RMs are not involved.</p>
</div>
<!-- class="sect2" -->
<a id="g1026535"></a>
<div id="ADFNS772" class="sect2">
<h3 class="sect2"><span class="secnum">19.1.2</span> Required Public Information</h3>
<p><a id="sthref985"></a><a id="sthref986"></a>As a resource manager, Oracle Database must publish the information described in <a href="#BGBFABGJ">Table 19-1</a>.</p>
<div id="ADFNS773" class="tblhruleformal">
<p class="titleintable"><a id="sthref987"></a><a id="BGBFABGJ"></a>Table 19-1 Required XA Features Published by Oracle Database</p>
<table class="cellalignment296" title="Required XA Features Published by Oracle Database" summary="This table summarizes the required XA features published by Oracle Database." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t5">XA Feature</th>
<th class="cellalignment294" id="r1c2-t5">Oracle Database Details</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t5" headers="r1c1-t5">
<p><code dir="ltr">xa_switch_t</code> structures</p>
</td>
<td class="cellalignment295" headers="r2c1-t5 r1c2-t5">
<p>The Oracle Database <code dir="ltr">xa_switch_t</code> structure name is <code dir="ltr">xaosw</code> for static registration and <code dir="ltr">xaoswd</code> for dynamic registration. These structures contain entry points and other information for the resource manager.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t5" headers="r1c1-t5">
<p><code dir="ltr">xa_switch_t</code> resource manager</p>
</td>
<td class="cellalignment295" headers="r3c1-t5 r1c2-t5">
<p>The Oracle Database resource manager name within the <code dir="ltr">xa_switch_t</code> structure is <code dir="ltr">Oracle_XA</code>.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t5" headers="r1c1-t5">
<p>Close string</p>
</td>
<td class="cellalignment295" headers="r4c1-t5 r1c2-t5">
<p>The close string used by <code dir="ltr">xa_close</code> is ignored and can be null.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t5" headers="r1c1-t5">
<p>Open string</p>
</td>
<td class="cellalignment295" headers="r5c1-t5 r1c2-t5">
<p>For the description of the format of the open string that <code dir="ltr">xa_open</code> uses, see <a href="#i1006488">Section 19.3.3, &#34;Defining the xa_open String.&#34;</a></p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r6c1-t5" headers="r1c1-t5">
<p>Libraries</p>
</td>
<td class="cellalignment295" headers="r6c1-t5 r1c2-t5">
<p>Libraries needed to link applications using Oracle XA have platform-specific names. The procedure is similar to linking an ordinary precompiler or OCI program except that you might have to link any TPM-specific libraries.</p>
<p>If you are not using <code dir="ltr">sqllib</code>, then link with <code dir="ltr">$ORACLE_HOME/rdbms/lib/xaonsl.o</code> or <code dir="ltr">$ORACLE_HOME/rdbms/lib32/xaonsl.o</code> (for 32 bit application on 64 bit platforms).</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r7c1-t5" headers="r1c1-t5">
<p>Requirements</p>
</td>
<td class="cellalignment295" headers="r7c1-t5 r1c2-t5">
<p>None. The functionality to support XA is part of both Standard Edition and Enterprise Edition.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006316"></a>
<div id="ADFNS1502" class="sect1">
<h2 class="sect1"><span class="secnum">19.2</span> Oracle XA Library Subprograms</h2>
<p>The <a id="sthref988"></a><a id="sthref989"></a>Oracle XA library subprograms enable a TM to tell Oracle Database how to process transactions. Generally, the TM must open the resource by using <code dir="ltr">xa_open</code>. Typically, the opening of the resource results from the AP call to <code dir="ltr">tx_open</code>. Some TMs might call <code dir="ltr">xa_open</code> implicitly when the application begins.</p>
<p>Similarly, there is a close (using <code dir="ltr">xa_close</code>) that occurs when the application is finished with the resource. The close might occur when the AP calls <code dir="ltr">tx_close</code> or when the application terminates.</p>
<p>The TM instructs the RMs to perform several other tasks, which include:</p>
<ul>
<li>
<p>Starting a transaction and associating it with an ID</p>
</li>
<li>
<p>Rolling back a transaction</p>
</li>
<li>
<p>Preparing and committing a transaction</p>
</li>
</ul>
<p class="subhead2"><a id="ADFNS1099"></a>Topics:</p>
<ul>
<li>
<p><a href="#BGBJHBHA">Oracle XA Library Subprograms</a></p>
</li>
<li>
<p><a href="#i1006369">Oracle XA Interface Extensions</a></p>
</li>
</ul>
<a id="BGBJHBHA"></a>
<div id="ADFNS774" class="sect2">
<h3 class="sect2"><span class="secnum">19.2.1</span> Oracle XA Library Subprograms</h3>
<p>XA Library subprograms are described in <a href="#g1017655">Table 19-2</a>.</p>
<div id="ADFNS775" class="tblformal">
<p class="titleintable"><a id="sthref990"></a><a id="g1017655"></a>Table 19-2 XA Library Subprograms</p>
<table class="cellalignment293" title=" XA Library Subprograms" summary="This table summarizes the XA library subroutines." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t6">XA Subprogram</th>
<th class="cellalignment294" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t6" headers="r1c1-t6">
<p><code dir="ltr">xa_open</code></p>
</td>
<td class="cellalignment295" headers="r2c1-t6 r1c2-t6">
<p>Connects to the RM.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t6" headers="r1c1-t6">
<p><code dir="ltr">xa_close</code></p>
</td>
<td class="cellalignment295" headers="r3c1-t6 r1c2-t6">
<p>Disconnects from the RM.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t6" headers="r1c1-t6">
<p><code dir="ltr">xa_start</code></p>
</td>
<td class="cellalignment295" headers="r4c1-t6 r1c2-t6">
<p>Starts a transaction and associates it with the given transaction ID (XID), or associates the process with an existing transaction.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t6" headers="r1c1-t6">
<p><code dir="ltr">xa_end</code></p>
</td>
<td class="cellalignment295" headers="r5c1-t6 r1c2-t6">
<p>Disassociates the process from the given XID.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r6c1-t6" headers="r1c1-t6">
<p><code dir="ltr">xa_rollback</code></p>
</td>
<td class="cellalignment295" headers="r6c1-t6 r1c2-t6">
<p>Rolls back the transaction associated with the given XID.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r7c1-t6" headers="r1c1-t6">
<p><code dir="ltr">xa_prepare</code></p>
</td>
<td class="cellalignment295" headers="r7c1-t6 r1c2-t6">
<p>Prepares the transaction associated with the given XID. This is the first phase of the two-phase commit protocol.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r8c1-t6" headers="r1c1-t6">
<p><code dir="ltr">xa_commit</code></p>
</td>
<td class="cellalignment295" headers="r8c1-t6 r1c2-t6">
<p>Commits the transaction associated with the given XID. This is the second phase of the two-phase commit protocol.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r9c1-t6" headers="r1c1-t6">
<p><code dir="ltr">xa_recover</code></p>
</td>
<td class="cellalignment295" headers="r9c1-t6 r1c2-t6">
<p>Retrieves a list of prepared, heuristically committed, or heuristically rolled back transactions.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r10c1-t6" headers="r1c1-t6">
<p><code dir="ltr">xa_forget</code></p>
</td>
<td class="cellalignment295" headers="r10c1-t6 r1c2-t6">
<p>Forgets the heuristically completed transaction associated with the given XID.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>In general, the AP need not worry about the subprograms in <a href="#g1017655">Table 19-2</a> except to understand the role played by the <code dir="ltr">xa_open</code> string.</p>
</div>
<!-- class="sect2" -->
<a id="i1006369"></a>
<div id="ADFNS776" class="sect2">
<h3 class="sect2"><span class="secnum">19.2.2</span> Oracle XA Interface Extensions</h3>
<p>Oracle Database&#39;s XA interface includes some additional functions, which are described in <a href="#BGBEDJAG">Table 19-3</a>.</p>
<div id="ADFNS777" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref991"></a><a id="BGBEDJAG"></a>Table 19-3 Oracle XA Interface Extensions</p>
<table class="cellalignment296" title="Oracle XA Interface Extensions" summary="This table summarizes additional functions in the XA interface for Oracle Database." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t7">Function</th>
<th class="cellalignment294" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t7" headers="r1c1-t7">
<p><code dir="ltr">OCISvcCtx *xaoSvcCtx(text *dbname)</code></p>
</td>
<td class="cellalignment295" headers="r2c1-t7 r1c2-t7">
<p>Returns the OCI service handle for a given XA connection. The <code dir="ltr">dbname</code> parameter must be the same as the <code dir="ltr">DB</code> parameter passed in the <code dir="ltr">xa_open</code> string. OCI applications can use this routing instead of the <code dir="ltr">sqlld2</code> calls to obtain the connection handle. Hence, OCI applications need not link with the <code dir="ltr">sqllib</code> library. The service handle can be converted to the Version 7 OCI logon data area (LDA) by using <code dir="ltr">OCISvcCtxToLda</code> [Version 8 OCI]. Client applications must remember to convert the Version 7 LDA to a service handle by using <code dir="ltr">OCILdaToSvcCtx</code> after completing the OCI calls.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t7" headers="r1c1-t7">
<p><code dir="ltr">OCIEnv *xaoEnv(text *dbname)</code></p>
</td>
<td class="cellalignment295" headers="r3c1-t7 r1c2-t7">
<p>Returns the OCI environment handle for a given XA connection. The <code dir="ltr">dbname</code> parameter must be the same as the <code dir="ltr">DB</code> parameter passed in the <code dir="ltr">xa_open</code> string.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t7" headers="r1c1-t7">
<p><code dir="ltr">int xaosterr(OCISvcCtx *SvcCtx,sb4 error)</code></p>
</td>
<td class="cellalignment295" headers="r4c1-t7 r1c2-t7">
<p>Converts an Oracle Database error code to an XA error code (applicable only to dynamic registration). The first parameter is the service handle used to run the work in the database. The second parameter is the error code that was returned from Oracle Database. Use this function to determine if the error returned from an OCI statement was caused because the <code dir="ltr">xa_start</code> failed. The function returns XA_OK if the error was not generated by the XA module or a valid XA error if the error was generated by the XA module.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformalwide" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BGBJFJCJ"></a>
<div id="ADFNS1503" class="sect1">
<h2 class="sect1"><span class="secnum">19.3</span> Developing and Installing XA Applications</h2>
<p>This section explains how to develop and install Oracle XA applications:</p>
<ul>
<li>
<p><a href="#i1006430">DBA or System Administrator Responsibilities</a></p>
</li>
<li>
<p><a href="#i1006469">Application Developer Responsibilities</a></p>
</li>
<li>
<p><a href="#i1006488">Defining the xa_open String</a></p>
</li>
<li>
<p><a href="#BGBJFJCJ">Developing and Installing XA Applications</a></p>
</li>
<li>
<p><a href="#i1006851">Managing Transaction Control with Oracle XA</a></p>
</li>
<li>
<p><a href="#i1006932">Migrating Precompiler or OCI Applications to TPM Applications</a></p>
</li>
<li>
<p><a href="#BGBIFGIB">Managing Oracle XA Library Thread Safety</a></p>
</li>
<li>
<p><a href="#BABDGBIC">Using the DBMS_XA Package</a></p>
</li>
</ul>
<a id="i1006430"></a>
<div id="ADFNS778" class="sect2">
<h3 class="sect2"><span class="secnum">19.3.1</span> DBA or System Administrator Responsibilities</h3>
<p>The responsibilities of the DBA or system administrator are:</p>
<ol>
<li>
<p>Define the open string, with help from the application developer. For details, see <a href="#i1006488">Section 19.3.3, &#34;Defining the xa_open String.&#34;</a></p>
</li>
<li>
<p>Ensure that the static data dictionary view <code dir="ltr">DBA_PENDING_TRANSACTIONS</code> exists and grant the <code dir="ltr">READ</code> or <code dir="ltr">SELECT</code> privilege to the view for all Oracle users specified in the <code dir="ltr">xa_open</code> string.</p>
<p>Grant <code dir="ltr">FORCE</code> <code dir="ltr">TRANSACTION</code> privilege to the Oracle user who might commit or roll back pending (in-doubt) transactions that he or she created, using the command <code dir="ltr">COMMIT</code> <code dir="ltr">FORCE</code> <code dir="ltr"><span class="codeinlineitalic">local_tran_id</span></code> or <code dir="ltr">ROLLBACK</code> <code dir="ltr">FORCE</code> <code dir="ltr"><span class="codeinlineitalic">local_tran_id</span></code>.</p>
<p>Grant <code dir="ltr">FORCE</code> <code dir="ltr">ANY</code> <code dir="ltr">TRANSACTION</code> privilege to the Oracle user who might commit or roll back XA transactions created by other users. For example, if user A might commit or roll back a transaction that was created by user B, user A must have <code dir="ltr">FORCE</code> <code dir="ltr">ANY</code> <code dir="ltr">TRANSACTION</code> privilege.</p>
<p>In Oracle Database version 7 client applications, all Oracle Database accounts used by Oracle XA library must have the <code dir="ltr">SELECT</code> privilege on the dynamic performance view <code dir="ltr">V$XATRANS$</code>. This view must have been created during the XA library installation. If necessary, you can manually create the view by running the SQL script <code dir="ltr">xaview</code>.<code dir="ltr">sql</code> as Oracle Database user <code dir="ltr">SYS</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
Your Oracle Database platform-specific documentation for the location of the <code dir="ltr">catxpend</code>.<code dir="ltr">sql</code> script</div>
</li>
<li>
<p>Using the open string information, install the RM into the TPM configuration. Follow the TPM vendor instructions.</p>
<p>The DBA or system administrator must be aware that a TPM system starts the process that connects to Oracle Database. See your TPM documentation to determine what environment exists for the process and what user ID it must have. Ensure that correct values are set for <code dir="ltr">$ORACLE_HOME</code> and <code dir="ltr">$ORACLE_SID</code> in this environment.</p>
</li>
<li>
<p>Grant the user ID write permission to the directory in which the system is to write the XA trace file.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1006488">Section 19.3.3, &#34;Defining the xa_open String,&#34;</a> for information about how to specify an Oracle System Identifier (SID) or a trace directory that is different from the defaults</div>
</li>
<li>
<p>Start the relevant database instances to bring Oracle XA applications on-line. Perform this task before starting any TPM servers.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="i1006469"></a>
<div id="ADFNS779" class="sect2">
<h3 class="sect2"><span class="secnum">19.3.2</span> Application Developer Responsibilities</h3>
<p>The responsibilities of the application developer are:</p>
<ol>
<li>
<p>Define the open string with help from the DBA or system administrator, as explained in <a href="#i1006488">Section 19.3.3, &#34;Defining the xa_open String.&#34;</a>.</p>
</li>
<li>
<p>Develop the applications.</p>
<p>Observe special restrictions on transaction-oriented SQL statements for precompilers.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BGBJFJCJ">Section 19.3, &#34;Developing and Installing XA Applications&#34;</a></div>
</li>
<li>
<p>Link the application according to TPM vendor instructions.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="i1006488"></a>
<div id="ADFNS780" class="sect2">
<h3 class="sect2"><span class="secnum">19.3.3</span> Defining the xa_open String</h3>
<p><a id="sthref992"></a>The open string is used by the transaction monitor to open the database. The maximum number of characters in an open string is 256.</p>
<p class="subhead2"><a id="ADFNS1100"></a>Topics:</p>
<ul>
<li>
<p><a href="#i1006505">Syntax of the xa_open String</a></p>
</li>
<li>
<p><a href="#i1006531">Required Fields for the xa_open String</a></p>
</li>
<li>
<p><a href="#i1006591">Optional Fields for the xa_open String</a></p>
</li>
</ul>
<a id="i1006505"></a>
<div id="ADFNS781" class="sect3">
<h4 class="sect3"><span class="secnum">19.3.3.1</span> Syntax of the xa_open String</h4>
<p>You can define an open string with the syntax shown in <a href="#BGBJCIHB">Example 19-1</a>.</p>
<div id="ADFNS782" class="example">
<p class="titleinexample"><a id="BGBJCIHB"></a>Example 19-1 xa_open String</p>
<pre dir="ltr">ORACLE_XA{+<span class="codeinlineitalic">required_fields</span>...} [+<span class="codeinlineitalic">optional_fields</span><span class="italic">..</span>.]
</pre></div>
<!-- class="example" -->
<p>These strings shows sample parameter settings:</p>
<pre dir="ltr">ORACLE_XA+DB=MANAGERS+SqlNet=SID1+ACC=P/<span class="italic">username</span>/<span class="italic">password</span>
  +SesTM=10+LogDir=/usr/local/xalog
ORACLE_XA+DB=PAYROLL+SqlNet=SID2+ACC=P/<span class="italic">username</span>/<span class="italic">password</span>
  +SesTM=10+LogDir=/usr/local/xalog
ORACLE_XA+SqlNet=SID3+ACC=P/<span class="italic">username</span>/<span class="italic">password</span>
  +SesTM=10+LogDir=/usr/local/xalog
</pre>
<p>These topics describe valid parameters for the <code dir="ltr"><span class="codeinlineitalic">required_fields</span></code> and <code dir="ltr"><span class="codeinlineitalic">optional_fields</span></code> placeholders:</p>
<ul>
<li>
<p><a href="#i1006531">Required Fields for the xa_open String</a></p>
</li>
<li>
<p><a href="#i1006591">Optional Fields for the xa_open String</a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>You can enter the required fields and optional fields in any order when constructing the open string.</p>
</li>
<li>
<p>All field names are case insensitive. Whether their values are case-sensitive depends on the platform.</p>
</li>
<li>
<p>There is no way to use the plus character (<code dir="ltr">+</code>) as part of the actual information string.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="i1006531"></a>
<div id="ADFNS783" class="sect3">
<h4 class="sect3"><span class="secnum">19.3.3.2</span> Required Fields for the xa_open String</h4>
<p>The <code dir="ltr"><span class="codeinlineitalic">required_fields</span></code> placeholder in <a href="#BGBJCIHB">Example 19-1</a> refers to any of the name-value pairs described in <a href="#BGBDIACH">Table 19-4</a>.</p>
<div id="ADFNS784" class="tblhruleformal">
<p class="titleintable"><a id="sthref993"></a><a id="BGBDIACH"></a>Table 19-4 Required Fields of xa_open string</p>
<table class="cellalignment296" title="Required Fields of xa_open string" summary="This table summarizes the required fields of the xa_open string." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t12">Syntax Element</th>
<th class="cellalignment294" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t12" headers="r1c1-t12">
<p><code dir="ltr">Acc=P//</code></p>
</td>
<td class="cellalignment295" headers="r2c1-t12 r1c2-t12">
<p>Specifies that no explicit user or password information is provided and that the operating system authentication form is used. For more information see <a class="olink ADMIN11046" href="../ADMIN/dba.htm#ADMIN11046"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a>.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t12" headers="r1c1-t12">
<p><code dir="ltr">Acc=P/</code><code dir="ltr"><span class="codeinlineitalic">user</span></code><code dir="ltr">/</code><code dir="ltr"><span class="codeinlineitalic">password</span></code></p>
</td>
<td class="cellalignment295" headers="r3c1-t12 r1c2-t12">
<p>Specifies the user name and password for a valid Oracle Database account. As described in <a href="#i1006430">Section 19.3.1, &#34;DBA or System Administrator Responsibilities,&#34;</a> ensure that HR has the <code dir="ltr">READ</code> or <code dir="ltr">SELECT</code> privilege on the <code dir="ltr">DBA_PENDING_TRANSACTIONS</code> table.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t12" headers="r1c1-t12">
<p><code dir="ltr">SesTm=</code><code dir="ltr"><span class="codeinlineitalic">session_time_limit</span></code></p>
</td>
<td class="cellalignment295" headers="r4c1-t12 r1c2-t12">
<p>Specifies the maximum number of seconds allowed in a transaction between one service and the next, or between a service and the commit or rollback of the transaction, before the system terminates the transaction. For example, <code dir="ltr">SesTM=15</code> indicates that the session idle time limit is 15 seconds.</p>
<p>For example, if the TPM uses remote subprogram calls between the client and the servers, then <code dir="ltr">SesTM</code> applies to the time between the completion of one RPC and the initiation of the next RPC, or the <code dir="ltr">tx_commit</code>, or the <code dir="ltr">tx_rollback</code>.</p>
<p>The value of <code dir="ltr">0</code> indicates no limit. Entering a value of <code dir="ltr">0</code> is strongly discouraged. It might tie up resources for a long time if something goes wrong. Also, if a child process has <code dir="ltr">SesTM=0</code>, then the <code dir="ltr">SesTM</code> setting is not effective after the parent process is terminated.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" --></div>
<!-- class="sect3" -->
<a id="i1006591"></a>
<div id="ADFNS785" class="sect3">
<h4 class="sect3"><span class="secnum">19.3.3.3</span> Optional Fields for the xa_open String</h4>
<p>The <code dir="ltr"><span class="codeinlineitalic">optional_fields</span></code> placeholder in <a href="#BGBJCIHB">Example 19-1</a> refers to any of the name-value pairs described in <a href="#BGBFICJB">Table 19-5</a>.</p>
<div id="ADFNS786" class="tblhruleformal">
<p class="titleintable"><a id="sthref994"></a><a id="BGBFICJB"></a>Table 19-5 Optional Fields in the xa_open String</p>
<table class="cellalignment296" title="Optional Fields in the xa_open String" summary="This table summarizes the optional fields of the xa_open string." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t13">Syntax Element</th>
<th class="cellalignment294" id="r1c2-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t13" headers="r1c1-t13">
<p><code dir="ltr">NoLocal= true | false</code></p>
</td>
<td class="cellalignment295" headers="r2c1-t13 r1c2-t13">
<p>Specifies whether local transactions are allowed. The default value is <code dir="ltr">false</code>. If the application must disallow local transactions, then set the value to <code dir="ltr">true</code>.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t13" headers="r1c1-t13">
<p><code dir="ltr">DB=</code><code dir="ltr"><span class="codeinlineitalic">db_name</span></code></p>
</td>
<td class="cellalignment295" headers="r3c1-t13 r1c2-t13">
<p>Specifies the name used by Oracle Database precompilers to identify the database. For example, <code dir="ltr">DB=payroll</code> specifies that the database name is <code dir="ltr">payroll</code> and that the application server program uses that name in <code dir="ltr">AT</code> clauses.</p>
<p>Application programs that use only the default database for the Oracle Database precompiler (that is, they do not use the <code dir="ltr">AT</code> clause in their SQL statements) must omit the <code dir="ltr">DB=</code><code dir="ltr"><span class="codeinlineitalic">db_name</span></code> clause in the open string. Applications that use explicitly named databases must indicate that database name in their <code dir="ltr">DB=</code><code dir="ltr"><span class="codeinlineitalic">db_name</span></code> field. Oracle Database Version 7 OCI programs must call the <code dir="ltr">sqlld2</code> function to obtain the correct context for logon data area (<code dir="ltr">Lda_Def</code>), which is the equivalent of an OCI service context. Version 8 and higher OCI programs must call the <code dir="ltr">xaoSvcCtx</code> function to get the <code dir="ltr">OCISvcCtx</code> service context.</p>
<p>The <code dir="ltr"><span class="codeinlineitalic">db_name</span></code> is not the SID and is not used to locate the database to be opened. Rather, it correlates the database opened by this open string with the name used in the application program to run SQL statements. The SID is set from either the environment variable <code dir="ltr">ORACLE_SID</code> of the TPM application server or the SID given in the Oracle Net clause in the open string. The Oracle Net clause is described later in this section.Some TPM vendors provide a way to name a group of servers that use the same open string. You might find it convenient to choose the same name both for that purpose and for db_name.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t13" headers="r1c1-t13">
<p><code dir="ltr">LogDir=</code><code dir="ltr"><span class="codeinlineitalic">log_dir</span></code></p>
</td>
<td class="cellalignment295" headers="r4c1-t13 r1c2-t13">
<p>Specifies the path name on the local system where the Oracle XA library error and tracing information is to be logged. The default is <code dir="ltr">$ORACLE_HOME/rdbms/log</code> if <code dir="ltr">ORACLE_HOME</code> is set; otherwise, it specifies the current directory. For example, <code dir="ltr">LogDir=/xa_trace</code> indicates that the logging information is located under the <code dir="ltr">/xa_trace</code> directory. Ensure that the directory exists and the application server can write to it.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t13" headers="r1c1-t13">
<p><code dir="ltr">Objects= true</code> | <code dir="ltr">false</code></p>
</td>
<td class="cellalignment295" headers="r5c1-t13 r1c2-t13">
<p>Specifies whether the application is initialized in object mode. The default value is false. If the application must use certain API calls that require object mode, such as <code dir="ltr">OCIRawAssignBytes</code>, then set the value to <code dir="ltr">true</code>.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r6c1-t13" headers="r1c1-t13">
<p><code dir="ltr">MaxCur=</code><code dir="ltr"><span class="codeinlineitalic">maximum_#_of_open_cursors</span></code></p>
</td>
<td class="cellalignment295" headers="r6c1-t13 r1c2-t13">
<p>Specifies the number of cursors to be allocated when the database is opened. It serves the same purpose as the precompiler option <code dir="ltr">maxopencursors</code>. For example, <code dir="ltr">MaxCur=5</code> indicates that the precompiler tries to keep five open cursors cached. This parameter overrides the precompiler option <code dir="ltr">maxopencursors</code> that you might have specified in your source code or at compile time.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r7c1-t13" headers="r1c1-t13">
<p><code dir="ltr">SqlNet=</code><code dir="ltr"><span class="codeinlineitalic">db_link</span></code></p>
</td>
<td class="cellalignment295" headers="r7c1-t13 r1c2-t13">
<p>Specifies the Oracle Net database link to use to log on to the system. This string must be an entry in <code dir="ltr">tnsnames.ora</code>. For example, the string <code dir="ltr">SqlNet=inst1_disp</code> might connect to a shared server at instance 1 if so defined in <code dir="ltr">tnsnames.ora</code>.</p>
<p>You can use the <code dir="ltr">SqlNet</code> parameter to specify the <code dir="ltr">ORACLE_SID</code> in cases where you cannot control the server environment variable. You must also use it when the server must access multiple Oracle Database instances. To use the Oracle Net string without actually accessing a remote database, use the Pipe driver. For example, specify <code dir="ltr">SqlNet=localsid1</code>, where <code dir="ltr">localsid1</code> is an alias defined in the <code dir="ltr">tnsnames.ora</code> file.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r8c1-t13" headers="r1c1-t13">
<p><code dir="ltr">Loose_Coupling=true | false</code></p>
</td>
<td class="cellalignment295" headers="r8c1-t13 r1c2-t13">
<p>Specifies whether locks are shared. Oracle Database transaction branches within the same global transaction can be coupled tightly or loosely. If branches are loosely coupled, then they do not share locks. Set the value to <code dir="ltr">true</code> for loosely coupled branches. If branches are tightly coupled, then they share locks. Set the value to <code dir="ltr">false</code> for tightly coupled branches. The default value is <code dir="ltr">false</code>.</p>
<p><span class="bold">Note:</span> When running Oracle RAC, if transaction branches land on different Oracle RAC instances, then they are loosely coupled even if <code dir="ltr">Loose_Coupling=false</code>.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r9c1-t13" headers="r1c1-t13">
<p><code dir="ltr">SesWt=</code><code dir="ltr"><span class="codeinlineitalic">session_wait_limit</span></code></p>
</td>
<td class="cellalignment295" headers="r9c1-t13 r1c2-t13">
<p>Specifies the number of seconds Oracle Database waits for a transaction branch that is being used by another session before <code dir="ltr">XA_RETRY</code> is returned. The default value is 60 seconds.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r10c1-t13" headers="r1c1-t13">
<p><code dir="ltr">Threads=true</code> | <code dir="ltr">false</code></p>
</td>
<td class="cellalignment295" headers="r10c1-t13 r1c2-t13">
<p>Specifies whether the application is multithreaded. The default value is <code dir="ltr">false</code>. If the application is multithreaded, then the setting is <code dir="ltr">true</code>.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r11c1-t13" headers="r1c1-t13">
<p><code dir="ltr">FAN=true</code> | <code dir="ltr">false</code></p>
</td>
<td class="cellalignment295" headers="r11c1-t13 r1c2-t13">
<p>Specifies whether the application will use Fast Application Notification (FAN). The default value is <code dir="ltr">false</code>. If the application will use FAN, then the setting is <code dir="ltr">true</code>. For information about FAN, see <a class="olink ADMIN13178" href="../ADMIN/restart.htm#ADMIN13178"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="ADFNS787" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref995"></a>
<h3 class="sect2"><span class="secnum">19.3.4</span> Using Oracle XA with Precompilers</h3>
<p><a id="sthref996"></a><a id="sthref997"></a>When used in an Oracle XA application, cursors are valid only for the duration of the transaction. Explicit cursors must be opened after the transaction begins, and closed before the commit or rollback.</p>
<p>You have these options when interfacing with precompilers:</p>
<ul>
<li>
<p><a href="#g1603091">Using Precompilers with the Default Database</a></p>
</li>
<li>
<p><a href="#g1603111">Using Precompilers with a Named Database</a></p>
</li>
</ul>
<p>The examples in this topic use the precompiler Pro*C/C++.</p>
<a id="g1603091"></a>
<div id="ADFNS788" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">19.3.4.1</span> Using Precompilers with the Default Database</h4>
<p>To interface to a precompiler with the default database, ensure that the <code dir="ltr">DB</code>=<code dir="ltr"><span class="codeinlineitalic">db_name</span></code> field used in the open string is not present. The absence of this field indicates the default connection. Only one default connection is allowed for each process.</p>
<p>This is an example of an open string identifying a default Pro*C/C++ connection:</p>
<pre dir="ltr">ORACLE_XA+SqlNet=maildb+ACC=P/<span class="italic">username</span>/<span class="italic">password</span>
  +SesTM=10+LogDir=/usr/local/logs
</pre>
<p>The <code dir="ltr">DB</code>=<code dir="ltr"><span class="codeinlineitalic">db_name</span></code> is absent, indicating an empty database ID string.</p>
<p>The syntax of a SQL statement is:</p>
<pre dir="ltr">EXEC SQL UPDATE Emp_tab SET Sal = Sal*1.5;
</pre></div>
<!-- class="sect3" -->
<a id="g1603111"></a>
<div id="ADFNS789" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">19.3.4.2</span> Using Precompilers with a Named Database</h4>
<p>To interface to a precompiler with a named database, include the <code dir="ltr">DB</code>=<code dir="ltr"><span class="codeinlineitalic">db_name</span></code> field in the open string. Any database you refer to must reference the same <code dir="ltr"><span class="codeinlineitalic">db_name</span></code> you specified in the corresponding open string.</p>
<p>An application might include the default database and one or more named databases. For example, suppose you want to update an employee&#39;s salary in one database, his department number (<code dir="ltr">DEPTNO</code>) in another, and his manager in a third database. Configure the open strings in the transaction manager as shown in <a href="#BGBIEBII">Example 19-2</a>.</p>
<div id="ADFNS790" class="example">
<p class="titleinexample"><a id="BGBIEBII"></a>Example 19-2 Sample Open String Configuration</p>
<pre dir="ltr">ORACLE_XA+DB=MANAGERS+SqlNet=SID1+ACC=P/<span class="italic">username</span>/<span class="italic">password</span>
  +SesTM=10+LogDir=/usr/local/xalog
ORACLE_XA+DB=PAYROLL+SqlNet=SID2+ACC=P/<span class="italic">username</span>/<span class="italic">password</span>
  +SesTM=10+LogDir=/usr/local/xalog
ORACLE_XA+SqlNet=SID3+ACC=P/<span class="italic">username</span>/<span class="italic">password</span>
  +SesTM=10+LogDir=/usr/local/xalog
</pre></div>
<!-- class="example" -->
<p>There is no <code dir="ltr">DB</code>=<code dir="ltr"><span class="codeinlineitalic">db_name</span></code> field in the last open string in <a href="#BGBIEBII">Example 19-2</a>.</p>
<p>In the application server program, enter declarations such as:</p>
<pre dir="ltr">EXEC SQL DECLARE PAYROLL DATABASE;
EXEC SQL DECLARE MANAGERS DATABASE;
</pre>
<p>Again, the default connection (corresponding to the third open string that does not contain the <code dir="ltr">DB</code> field) needs no declaration.</p>
<p>When doing the update, enter statements similar to these:</p>
<pre dir="ltr">EXEC SQL AT PAYROLL UPDATE Emp_Tab SET Sal=4500 WHERE Empno=7788;
EXEC SQL AT MANAGERS UPDATE Emp_Tab SET Mgr=7566 WHERE Empno=7788;
EXEC SQL UPDATE Emp_Tab SET Deptno=30 WHERE Empno=7788;
</pre>
<p>There is no <code dir="ltr">AT</code> clause in the last statement because it is referring to the default database.</p>
<p>In Oracle Database precompilers release 1.5.3 or later, you can use a character host variable in the <code dir="ltr">AT</code> clause, as this example shows:</p>
<pre dir="ltr">EXEC SQL BEGIN DECLARE SECTION;
  DB_NAME1 CHARACTER(10);
  DB_NAME2 CHARACTER(10);
EXEC SQL END DECLARE SECTION;
    ...
SET DB_NAME1 = &#39;PAYROLL&#39;
SET DB_NAME2 = &#39;MANAGERS&#39;
    ...
EXEC SQL AT :DB_NAME1 UPDATE...
EXEC SQL AT :DB_NAME2 UPDATE...
</pre>
<div class="infobox-note">
<p class="notep1">Caution:</p>
Do not have XA applications create connections other than those created through <code dir="ltr">xa_open</code>. Work performed on non-XA connections is outside the global transaction and must be committed separately.</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="ADFNS791" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref998"></a>
<h3 class="sect2"><span class="secnum">19.3.5</span> Using Oracle XA with OCI</h3>
<p><a id="sthref999"></a>Oracle Call Interface applications that use the Oracle XA library must not call <code dir="ltr">OCISessionBegin</code> to log on to the resource manager. Rather, the logon must be done through the TPM. The applications can run the function <code dir="ltr">xaoSvcCtx</code> to obtain the service context structure when they must access the resource manager.</p>
<p>In applications that must pass the environment handle to OCI functions, you can also call <code dir="ltr">xaoEnv</code> to find that handle.</p>
<p>Because an application server can have multiple concurrent open Oracle Database resource managers, it must call the function <code dir="ltr">xaoSvcCtx</code> with the correct arguments to obtain the correct service context.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNOCI" href="../LNOCI/toc.htm"><span class="italic">Oracle Call Interface Programmer&#39;s Guide</span></a></div>
</div>
<!-- class="sect2" -->
<a id="i1006851"></a>
<div id="ADFNS792" class="sect2">
<h3 class="sect2"><span class="secnum">19.3.6</span> Managing Transaction Control with Oracle XA</h3>
<p>When you use the XA library, transactions are not controlled by the SQL statements that commit or roll back transactions. Rather, they are controlled by an API accepted by the TM that starts and stops transactions. You call the API that is provided by the transaction manager, including the TX interface listed in <a href="#g1017842">Table 19-6</a>, but not the XA Library Subprograms listed in <a href="#g1017655">Table 19-2</a>.</p>
<p>The TMs typically control the transactions through the XA interface. This interface includes the functions described in <a href="#g1017655">Table 19-2</a>.</p>
<div id="ADFNS793" class="tblformal">
<p class="titleintable"><a id="sthref1000"></a><a id="g1017842"></a>Table 19-6 TX Interface Functions</p>
<table class="cellalignment293" title=" TX Interface Functions" summary="This table summarizes the TX interface functions." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t16">TX Function</th>
<th class="cellalignment294" id="r1c2-t16">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t16" headers="r1c1-t16">
<p><code dir="ltr">tx_open</code></p>
</td>
<td class="cellalignment295" headers="r2c1-t16 r1c2-t16">
<p>Logs into the resource manager(s)</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t16" headers="r1c1-t16">
<p><code dir="ltr">tx_close</code></p>
</td>
<td class="cellalignment295" headers="r3c1-t16 r1c2-t16">
<p>Logs out of the resource manager(s)</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t16" headers="r1c1-t16">
<p><code dir="ltr">tx_begin</code></p>
</td>
<td class="cellalignment295" headers="r4c1-t16 r1c2-t16">
<p>Starts a transaction</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t16" headers="r1c1-t16">
<p><code dir="ltr">tx_commit</code></p>
</td>
<td class="cellalignment295" headers="r5c1-t16 r1c2-t16">
<p>Commits a transaction</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r6c1-t16" headers="r1c1-t16">
<p><code dir="ltr">tx_rollback</code></p>
</td>
<td class="cellalignment295" headers="r6c1-t16 r1c2-t16">
<p>Rolls back the transaction</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>Most TPM applications use a client/server architecture in which an application client requests services and an application server provides them. The examples shown in <a href="#g1603435">&#34;Examples of Precompiler Applications&#34;</a> use such a client/server model. A service is a logical unit of work that, for Oracle Database as the resource manager, comprises a set of SQL statements that perform a related unit of work.</p>
<p>For example, when a service named &#34;credit&#34; receives an account number and the amount to be credited, it runs SQL statements to update information in certain tables in the database. Also, a service might request other services. For example, a &#34;transfer fund&#34; service might request services from a &#34;credit&#34; and &#34;debit&#34; service.</p>
<p>Typically, application clients request services from the application servers to perform tasks within a transaction. For some TPM systems, however, the application client itself can offer its own local services. As shown in <a href="#g1603435">&#34;Examples of Precompiler Applications&#34;</a>, you can encode transaction control statements within either the client or the server.</p>
<p>To have multiple processes participating in the same transaction, the TPM provides a communication API that enables transaction information to flow between the participating processes. Examples of communications APIs include RPC, pseudo-RPC functions, and send/receive functions.</p>
<p>Because the leading vendors support different communication functions, these examples use the communication pseudo-function <code dir="ltr">tpm_service</code> to generalize the communications API.</p>
<p>X/Open includes several alternative methods for providing communication functions in their preliminary specification. At least one of these alternatives is supported by each of the leading TPM vendors.</p>
</div>
<!-- class="sect2" -->
<a id="g1603435"></a>
<div id="ADFNS794" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">19.3.7</span> Examples of Precompiler Applications</h3>
<p>These examples illustrate precompiler applications. Assume that the application server has logged onto the RMs system, in a TPM-specific manner. <a href="#BGBDDBJJ">Example 19-3</a> shows a transaction started by an application server.</p>
<div id="ADFNS795" class="example">
<p class="titleinexample"><a id="BGBDDBJJ"></a>Example 19-3 Transaction Started by an Application Server</p>
<pre dir="ltr">/***** Client: *****/
tpm_service(&#34;ServiceName&#34;);            <span class="italic">  /*Request Service*/</span>

/***** Server: *****/
ServiceName()
{
  &lt;get service specific data&gt;
  tx_begin();                             <span class="italic">/* Begin transaction boundary */</span>
  EXEC SQL UPDATE ...;

  /* This application server temporarily becomes */
  /* a client and requests another service. */

  tpm_service(&#34;AnotherService&#34;);
  tx_commit();                            <span class="italic"> /* Commit the transaction */</span>
  &lt;return service status back to the client&gt;
}
</pre></div>
<!-- class="example" -->
<p><a href="#BGBGFADB">Example 19-4</a> shows a transaction started by an application client.</p>
<div id="ADFNS796" class="example">
<p class="titleinexample"><a id="BGBGFADB"></a>Example 19-4 Transaction Started by an Application Client</p>
<pre dir="ltr">/***** Client: *****/
tx_begin();                           <span class="italic"> /* Begin transaction boundary */</span>
tpm_service(&#34;Service1&#34;);
tpm_service(&#34;Service2&#34;);
tx_commit();                           /* Commit the transaction */

/***** Server: *****/
Service1()
{
  &lt;get service specific data&gt;
  EXEC SQL UPDATE ...;
  &lt;return service status back to the client&gt;
}
Service2()
{
  &lt;get service specific data&gt;
  EXEC SQL UPDATE ...;
  ...
  &lt;return service status back to client&gt;
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i1006932"></a>
<div id="ADFNS797" class="sect2">
<h3 class="sect2"><span class="secnum">19.3.8</span> Migrating Precompiler or OCI Applications to TPM Applications</h3>
<p>To migrate existing precompiler or OCI applications to a TPM application that uses the Oracle XA library, you must:</p>
<ol>
<li>
<p>Reorganize the application into a framework of &#34;services&#34; so that application clients request services from application servers. Some TPMs require the application to use the <code dir="ltr">tx_open</code> and <code dir="ltr">tx_close</code> functions, whereas other TPMs do the logon and logoff implicitly.</p>
<p>If you do not specify the <code dir="ltr">SqlNet</code> parameter in your open string, then the application uses the default Oracle Net driver. Thus, ensure that the application server is brought up with the <code dir="ltr">ORACLE_HOME</code> and <code dir="ltr">ORACLE_SID</code> environment variables properly defined. This is accomplished in a TPM-specific fashion. See your TPM vendor documentation for instructions on how to accomplish this.</p>
</li>
<li>
<p>Ensure that the application replaces the regular connect and disconnect statements. For example, replace the connect statements <code dir="ltr">EXEC</code> <code dir="ltr">SQL</code> <code dir="ltr">CONNECT</code> (for precompilers) or <code dir="ltr">OCISessionBegin</code>, <code dir="ltr">OCIServerAttach</code>, and <code dir="ltr">OCIEnvCreate</code> (for OCI) with <code dir="ltr">tx_open</code>. Replace the disconnect statements <code dir="ltr">EXEC</code> <code dir="ltr">SQL</code> <code dir="ltr">COMMIT</code>/<code dir="ltr">ROLLBACK</code> <code dir="ltr">WORK RELEASE</code> (for precompilers) or <code dir="ltr">OCISessionEnd</code>/<code dir="ltr">OCIServerDetach</code> (for OCI) with <code dir="ltr">tx_close</code>.</p>
</li>
<li>
<p>Ensure that the application replaces the regular commit or rollback statements for any global transactions and begins the transaction explicitly.</p>
<p>For example, replace the <code dir="ltr">COMMIT</code>/<code dir="ltr">ROLLBACK</code> statements <code dir="ltr">EXEC</code> <code dir="ltr">SQL</code> <code dir="ltr">COMMIT</code>/<code dir="ltr">ROLLBACK</code> <code dir="ltr">WORK</code> (for precompilers), or <code dir="ltr">OCITransCommit</code><code dir="ltr">/</code><code dir="ltr">OCITransRollback</code> (for OCI) with <code dir="ltr">tx_commit/tx_rollback</code> and start the transaction by calling <code dir="ltr">tx_begin</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The preceding is true only for global rather than local transactions. Commit or roll back local transactions with the Oracle API.</div>
</li>
<li>
<p>Ensure that the application resets the fetch state before ending a transaction. In general, use <code dir="ltr">release_cursor=no</code>. Use <code dir="ltr">release_cursor=yes</code> only when you are certain that a statement will run only once.</p>
</li>
</ol>
<p><a href="#g1017864">Table 19-7</a> lists the TPM functions that replace regular Oracle Database statements when migrating precompiler or OCI applications to TPM applications.</p>
<div id="ADFNS798" class="tblformal">
<p class="titleintable"><a id="sthref1001"></a><a id="g1017864"></a>Table 19-7 TPM Replacement Statements</p>
<table class="cellalignment293" title=" TPM Replacement Statements" summary="This table summarizes the TPM replacement commands." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t18">Regular Oracle Database Statements</th>
<th class="cellalignment294" id="r1c2-t18">TPM Functions</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t18" headers="r1c1-t18">
<p><code dir="ltr">CONNECT</code><code dir="ltr"><span class="codeinlineitalic">user</span></code>/<code dir="ltr"><span class="codeinlineitalic">password</span></code></p>
</td>
<td class="cellalignment295" headers="r2c1-t18 r1c2-t18">
<p><code dir="ltr">tx_open</code> (possibly implicit)</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t18" headers="r1c1-t18">
<p>implicit start of transaction</p>
</td>
<td class="cellalignment295" headers="r3c1-t18 r1c2-t18">
<p><code dir="ltr">tx_begin</code></p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t18" headers="r1c1-t18">
<p><code dir="ltr">SQL</code></p>
</td>
<td class="cellalignment295" headers="r4c1-t18 r1c2-t18">
<p>Service that runs the SQL</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t18" headers="r1c1-t18">
<p><code dir="ltr">COMMIT</code></p>
</td>
<td class="cellalignment295" headers="r5c1-t18 r1c2-t18">
<p><code dir="ltr">tx_commit</code></p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r6c1-t18" headers="r1c1-t18">
<p><code dir="ltr">ROLLBACK</code></p>
</td>
<td class="cellalignment295" headers="r6c1-t18 r1c2-t18">
<p><code dir="ltr">tx_rollback</code></p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r7c1-t18" headers="r1c1-t18">
<p>disconnect</p>
</td>
<td class="cellalignment295" headers="r7c1-t18 r1c2-t18">
<p><code dir="ltr">tx_close</code> (possibly implicit)</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<a id="BGBIFGIB"></a>
<div id="ADFNS799" class="sect2">
<h3 class="sect2"><span class="secnum">19.3.9</span> Managing Oracle XA Library Thread Safety</h3>
<p><a id="sthref1002"></a>If you use a transaction monitor that supports threads, then the Oracle XA library enables you to write applications that are thread-safe. Nevertheless, keep certain issues in mind.</p>
<p>A <span class="glossaryterm">thread of control</span> (or thread) refers to the set of connections to resource managers. In an nonthreaded system, each process is considered a thread of control because each process has its own set of connections to RMs and maintains its own independent resource manager table. In a threaded system, each thread has an autonomous set of connections to RMs and each thread maintains a <span class="italic">private</span> RM table. This private table must be allocated for each thread and deallocated when the thread terminates, even if the termination is abnormal.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
In Oracle Database, each thread that accesses the database must have its own connection.</div>
<p class="subhead2"><a id="ADFNS1106"></a>Topics:</p>
<ul>
<li>
<p><a href="#g1026420">Specifying Threading in the Open String</a></p>
</li>
<li>
<p><a href="#g1026430">Restrictions on Threading in Oracle XA</a></p>
</li>
</ul>
<a id="g1026420"></a>
<div id="ADFNS800" class="sect3">
<h4 class="sect3"><span class="secnum">19.3.9.1</span> Specifying Threading in the Open String</h4>
<p>The <code dir="ltr">xa_open</code> string provides the clause <code dir="ltr">Threads=</code>. You must specify this clause as <code dir="ltr">true</code> to enable the use of threads by the TM. The default is <code dir="ltr">false</code>. In most cases, the TM creates the threads; the application does not know when a thread is created. Therefore, it is advisable to allocate a service context on the stack within each service that is written for a TM application. Before doing any Oracle Database-related calls in that service, you must call the <code dir="ltr">xaoSvcCtx</code> function to retrieve the initialized OCI service context. You can then use this context for OCI calls within the service.</p>
</div>
<!-- class="sect3" -->
<a id="g1026430"></a>
<div id="ADFNS801" class="sect3">
<h4 class="sect3"><span class="secnum">19.3.9.2</span> Restrictions on Threading in Oracle XA</h4>
<p>These restrictions apply when using threads:</p>
<ul>
<li>
<p>Any Pro* or OCI code that runs as part of the application server process on the transaction monitor cannot be threaded unless the transaction monitor is explicitly told when each application thread is started. This is typically accomplished by using a special C compiler provided by the TM vendor.</p>
</li>
<li>
<p>The Pro* statements <code dir="ltr">EXEC</code> <code dir="ltr">SQL</code> <code dir="ltr">ALLOCATE</code> and <code dir="ltr">EXEC</code> <code dir="ltr">SQL</code> <code dir="ltr">USE</code> are not supported. Therefore, when threading is enabled, you cannot use embedded SQL statements across non-XA connections.</p>
</li>
<li>
<p>If one thread in a process connects to Oracle Database through XA, then all other threads in the process that connect to Oracle Database must also connect through XA. You cannot connect through <code dir="ltr">EXEC</code> <code dir="ltr">SQL</code> <code dir="ltr">CONNECT</code> in one thread and through <code dir="ltr">xa_open</code> in another thread.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABDGBIC"></a>
<div id="ADFNS0171" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">19.3.10</span> Using the DBMS_XA Package</h3>
<p>PL/SQL applications can use the Oracle XA library with the <a id="sthref1003"></a><code dir="ltr">DBMS_XA</code> package. For information about this package, see <a class="olink ARPLS209" href="../ARPLS/d_xa.htm#ARPLS209"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.</p>
<p>In <a href="#BABJDBFH">Example 19-5</a>, one PL/SQL session starts a transaction but does not commit it, a second session resumes the transaction, and a third session commits the transaction. All three sessions are connected to the <code dir="ltr">HR</code> schema.</p>
<div id="ADFNS802" class="example">
<p class="titleinexample"><a id="BABJDBFH"></a>Example 19-5 Using the DBMS_XA Package</p>
<pre dir="ltr"><span class="bold">REM Session 1 starts a transaction and does some work.</span>
DECLARE
  rc  PLS_INTEGER;
  oer PLS_INTEGER;
  xae EXCEPTION;
BEGIN
  rc  := <span class="bold">DBMS_XA.XA_START(DBMS_XA_XID(123), DBMS_XA.TMNOFLAGS</span>);

  IF rc!=<span class="bold">DBMS_XA.XA_OK</span> THEN
    oer := <span class="bold">DBMS_XA.XA_GETLASTOER()</span>;
    DBMS_OUTPUT.PUT_LINE(&#39;ORA-&#39; || oer || &#39; occurred, XA_START failed&#39;);
    RAISE xae;
  ELSE DBMS_OUTPUT.PUT_LINE(&#39;XA_START(new xid=123)     OK&#39;);
  END IF;

  UPDATE employees SET salary=salary*1.1 WHERE employee_id = 100;
  rc  := <span class="bold">DBMS_XA.XA_END(DBMS_XA_XID(123), DBMS_XA.TMSUSPEND)</span>;

  IF rc!=<span class="bold">DBMS_XA.XA_OK</span> THEN
    oer := <span class="bold">DBMS_XA.XA_GETLASTOER()</span>;
    DBMS_OUTPUT.PUT_LINE(&#39;ORA-&#39; || oer || &#39; occurred, XA_END failed&#39;);
    RAISE xae;
  ELSE DBMS_OUTPUT.PUT_LINE(&#39;XA_END(suspend xid=123)   OK&#39;);
  END IF;

  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE
       (&#39;XA error(&#39;||rc||&#39;) occurred, rolling back the transaction ...&#39;);
      rc := <span class="bold">DBMS_XA.XA_END(DBMS_XA_XID(123), DBMS_XA.TMSUCCESS)</span>;
      rc := <span class="bold">DBMS_XA.XA_ROLLBACK(DBMS_XA_XID(123))</span>;

      IF rc != <span class="bold">DBMS_XA.XA_OK</span> THEN
        oer := <span class="bold">DBMS_XA.XA_GETLASTOER()</span>;
        DBMS_OUTPUT.PUT_LINE(&#39;XA-&#39;||rc||&#39;, ORA-&#39; || oer ||
         &#39; XA_ROLLBACK does not return XA_OK&#39;);
        raise_application_error(-20001, &#39;ORA-&#39;||oer||
         &#39; error in rolling back a failed transaction&#39;);
      END IF;

      raise_application_error(-20002, &#39;ORA-&#39;||oer||
       &#39; error in transaction processing, transaction rolled back&#39;);
END;
/
SHOW ERRORS
<span class="bold">DISCONNECT</span>

<span class="bold">REM Session 2 resumes the transaction and does some work.</span>
DECLARE
  rc  PLS_INTEGER;
  oer PLS_INTEGER;
  s   NUMBER;
  xae EXCEPTION;
BEGIN
  rc  := <span class="bold">DBMS_XA.XA_START(DBMS_XA_XID(123), DBMS_XA.TMRESUME)</span>;

  IF rc!=<span class="bold">DBMS_XA.XA_OK</span> THEN
    oer := <span class="bold">DBMS_XA.XA_GETLASTOER()</span>;
    DBMS_OUTPUT.PUT_LINE(&#39;ORA-&#39; || oer || &#39; occurred, xa_start failed&#39;);
    RAISE xae;
  ELSE DBMS_OUTPUT.PUT_LINE(&#39;XA_START(resume xid=123)  OK&#39;);
  END IF;

  SELECT salary INTO s FROM employees WHERE employee_id = 100;
  DBMS_OUTPUT.PUT_LINE(&#39;employee_id = 100, salary = &#39; || s);
  rc  := <span class="bold">DBMS_XA.XA_END(DBMS_XA_XID(123), DBMS_XA.TMSUCCESS)</span>;

  IF rc!=<span class="bold">DBMS_XA.XA_OK</span> THEN
    oer := <span class="bold">DBMS_XA.XA_GETLASTOER()</span>;
    DBMS_OUTPUT.PUT_LINE(&#39;ORA-&#39; || oer || &#39; occurred, XA_END failed&#39;);
    RAISE xae;
  ELSE DBMS_OUTPUT.PUT_LINE(&#39;XA_END(detach xid=123)    OK&#39;);
  END IF;

  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE
       (&#39;XA error(&#39;||rc||&#39;) occurred, rolling back the transaction ...&#39;);
      rc := <span class="bold">DBMS_XA.XA_END(DBMS_XA_XID(123), DBMS_XA.TMSUCCESS)</span>;
      rc := <span class="bold">DBMS_XA.XA_ROLLBACK(DBMS_XA_XID(123))</span>;

      IF rc != <span class="bold">DBMS_XA.XA_OK</span> THEN
        oer := <span class="bold">DBMS_XA.XA_GETLASTOER()</span>;
        DBMS_OUTPUT.PUT_LINE(&#39;XA-&#39;||rc||&#39;, ORA-&#39; || oer ||
         &#39; XA_ROLLBACK does not return XA_OK&#39;);
        raise_application_error(-20001, &#39;ORA-&#39;||oer||
         &#39; error in rolling back a failed transaction&#39;);
      END IF;

      raise_application_error(-20002, &#39;ORA-&#39;||oer||
       &#39; error in transaction processing, transaction rolled back&#39;);
END;
/
SHOW ERRORS
<span class="bold">DISCONNECT</span>

<span class="bold">REM Session 3 commits the transaction.</span>
DECLARE
  rc  PLS_INTEGER;
  oer PLS_INTEGER;
  xae EXCEPTION;
BEGIN
  rc  := <span class="bold">DBMS_XA.XA_COMMIT(DBMS_XA_XID(123), TRUE)</span>;

  IF rc!=<span class="bold">DBMS_XA.XA_OK</span> THEN
    oer := <span class="bold">DBMS_XA.XA_GETLASTOER()</span>;
    DBMS_OUTPUT.PUT_LINE(&#39;ORA-&#39; || oer || &#39; occurred, XA_COMMIT failed&#39;);
    RAISE xae;
  ELSE DBMS_OUTPUT.PUT_LINE(&#39;XA_COMMIT(commit xid=123)  OK&#39;);
  END IF;

  EXCEPTION
    WHEN xae THEN
      DBMS_OUTPUT.PUT_LINE
       (&#39;XA error(&#39;||rc||&#39;) occurred, rolling back the transaction ...&#39;);
      rc := <span class="bold">DBMS_XA.XA_ROLLBACK(DBMS_XA_XID(123))</span>;

      IF rc != <span class="bold">DBMS_XA.XA_OK</span> THEN
        oer := <span class="bold">DBMS_XA.XA_GETLASTOER()</span>;
        DBMS_OUTPUT.PUT_LINE(&#39;XA-&#39;||rc||&#39;, ORA-&#39; || oer ||
         &#39; XA_ROLLBACK does not return XA_OK&#39;);
        raise_application_error(-20001, &#39;ORA-&#39;||oer||
         &#39; error in rolling back a failed transaction&#39;);
      END IF;

      raise_application_error(-20002, &#39;ORA-&#39;||oer||
       &#39; error in transaction processing, transaction rolled back&#39;);
END;
/
SHOW ERRORS
<span class="bold">DISCONNECT</span>
<span class="bold">QUIT</span>
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007004"></a>
<div id="ADFNS1504" class="sect1">
<h2 class="sect1"><span class="secnum">19.4</span> Troubleshooting XA Applications</h2>
<p class="subhead2"><a id="ADFNS1107"></a>Topics:</p>
<ul>
<li>
<p><a href="#BGBBGCBH">Accessing Oracle XA Trace Files</a></p>
</li>
<li>
<p><a href="#BGBFHHJC">Managing In-Doubt or Pending Oracle XA Transactions</a></p>
</li>
<li>
<p><a href="#BGBBGBBJ">Using SYS Account Tables to Monitor Oracle XA Transactions</a></p>
</li>
</ul>
<a id="BGBBGCBH"></a>
<div id="ADFNS803" class="sect2">
<h3 class="sect2"><span class="secnum">19.4.1</span> Accessing Oracle XA Trace Files</h3>
<p>The Oracle XA library logs any error and tracing information to its trace file. This information is useful in supplementing the XA error codes. For example, it can indicate whether an <code dir="ltr">xa_open</code> failure is caused by an incorrect open string, failure to find the Oracle Database instance, or a logon authorization failure.</p>
<p>The name of the trace file is <code dir="ltr">xa_</code><code dir="ltr"><span class="codeinlineitalic">db_namedate</span></code>.<code dir="ltr">trc</code>, where <code dir="ltr"><span class="codeinlineitalic">db_name</span></code> is the database name specified in the open string field <code dir="ltr">DB</code>=<code dir="ltr"><span class="codeinlineitalic">db_name</span></code>, and <code dir="ltr"><span class="codeinlineitalic">date</span></code> is the date when the information is logged to the trace file. If you do not specify <code dir="ltr">DB</code>=<code dir="ltr"><span class="codeinlineitalic">db_name</span></code> in the open string, then it automatically defaults to <code dir="ltr">NULL</code>.</p>
<p>For example, <code dir="ltr">xa_NULL06022005</code>.<code dir="ltr">trc</code> indicates a trace file that was created on June 2, 2005. Its <code dir="ltr">DB</code> field was not specified in the open string when the resource manager was opened. The filename <code dir="ltr">xa_Finance12152004</code>.<code dir="ltr">trc</code> indicates a trace file was created on December 15, 2004. Its <code dir="ltr">DB</code> field was specified as &#34;Finance&#34; in the open string when the resource manager was opened.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Multiple Oracle XA library resource managers with the same <code dir="ltr">DB</code> field and <code dir="ltr">LogDir</code> field in their open strings log all trace information that occurs on the same day to the same trace file.</div>
<p>Suppose that a trace file contains these contents:</p>
<pre dir="ltr">1032.12345.2:  ORA-01017:  invalid username/password;  logon denied
1032.12345.2:  xaolgn:  XAER_INVAL;  logon denied
</pre>
<p><a href="#BGBHBCIJ">Table 19-8</a> explains the meaning of each element.</p>
<div id="ADFNS804" class="tblhruleformal">
<p class="titleintable"><a id="sthref1004"></a><a id="BGBHBCIJ"></a>Table 19-8 Sample Trace File Contents</p>
<table class="cellalignment296" title="Sample Trace File Contents" summary="This table describes sample trace file contents." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t21">String</th>
<th class="cellalignment294" id="r1c2-t21">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t21" headers="r1c1-t21">
<p><code dir="ltr">1032</code></p>
</td>
<td class="cellalignment295" headers="r2c1-t21 r1c2-t21">
<p>The time when the information is logged.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t21" headers="r1c1-t21">
<p><code dir="ltr">12345</code></p>
</td>
<td class="cellalignment295" headers="r3c1-t21 r1c2-t21">
<p>The process ID (PID).</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t21" headers="r1c1-t21">
<p><code dir="ltr">2</code></p>
</td>
<td class="cellalignment295" headers="r4c1-t21 r1c2-t21">
<p>Resource manager ID</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t21" headers="r1c1-t21">
<p><code dir="ltr">xaolgn</code></p>
</td>
<td class="cellalignment295" headers="r5c1-t21 r1c2-t21">
<p>Name of module</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r6c1-t21" headers="r1c1-t21">
<p><code dir="ltr">XAER_INVAL</code></p>
</td>
<td class="cellalignment295" headers="r6c1-t21 r1c2-t21">
<p>Error returned as specified in the XA standard</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r7c1-t21" headers="r1c1-t21">
<p>ORA-01017</p>
</td>
<td class="cellalignment295" headers="r7c1-t21 r1c2-t21">
<p>Oracle Database information that was returned</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p class="subhead2"><a id="ADFNS1108"></a>Topics:</p>
<ul>
<li>
<p><a href="#g1026444">xa_open String DbgFl</a></p>
</li>
<li>
<p><a href="#g1026453">Trace File Locations</a></p>
</li>
</ul>
<a id="g1026444"></a>
<div id="ADFNS805" class="sect3">
<h4 class="sect3"><span class="secnum">19.4.1.1</span> xa_open String DbgFl</h4>
<p>Normally, the XA trace file is opened only if an error is detected. The <code dir="ltr">xa_open</code> string <code dir="ltr">DbgFl</code> provides a tracing facility to record additional detail about the XA library. By default, its value is zero. You can set it to any combination of these values:</p>
<ul>
<li>
<p><code dir="ltr">0x1</code>, which enables you to trace the entry and exit to each subprogram in the XA interface. This value can be useful in seeing exactly which XA calls the TP Monitor is making and which transaction identifier it is generating.</p>
</li>
<li>
<p><code dir="ltr">0x2</code>, which enables you to trace the entry to and exit from other nonpublic XA library programs. This is generally useful only to Oracle Database developers.</p>
</li>
<li>
<p><code dir="ltr">0x4</code>, which enables you to trace various other &#34;interesting&#34; calls made by the XA library, such as specific calls to the OCI. This is generally useful only to Oracle Database developers.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
The flags are independent bits of an <code dir="ltr">ub4</code>, so to obtain printout from two or more flags, you must set a combined value of the flags.</div>
</div>
<!-- class="sect3" -->
<a id="g1026453"></a>
<div id="ADFNS806" class="sect3">
<h4 class="sect3"><span class="secnum">19.4.1.2</span> Trace File Locations</h4>
<p>The XA application determines a location for the trace file according to this algorithm:</p>
<ol>
<li>
<p>The <code dir="ltr">LogDir</code> directory specified in the open string.</p>
</li>
<li>
<p>If you do not specify <code dir="ltr">LogDir</code> in the open string, then the Oracle XA application attempts to create the trace file in this directory (if the Oracle home is accessible):</p>
<ul>
<li>
<p><code dir="ltr">%ORACLE_HOME%\rdbms\trace</code> on Windows</p>
</li>
<li>
<p><code dir="ltr">$ORACLE_HOME/rdbms/log</code> on Linux and UNIX</p>
</li>
</ul>
</li>
<li>
<p>If the Oracle XA application cannot determine where the Oracle home is located, then the application creates the trace file in the current working directory.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BGBFHHJC"></a>
<div id="ADFNS807" class="sect2">
<h3 class="sect2"><span class="secnum">19.4.2</span> Managing In-Doubt or Pending Oracle XA Transactions</h3>
<p>In-doubt or pending transactions are transactions that were prepared but not committed to the database. In general, the TM provided by the TPM system resolves any failure and recovery of in-doubt or pending transactions. The DBA might have to override an in-doubt transaction if these situations occur:</p>
<ul>
<li>
<p>It is locking data that is required by other transactions.</p>
</li>
<li>
<p>It is not resolved in a reasonable amount of time.</p>
</li>
</ul>
<p>See the TPM documentation for more information about overriding in-doubt transactions in such circumstances and about how to decide whether to commit or roll back the in-doubt transaction.</p>
</div>
<!-- class="sect2" -->
<a id="BGBBGBBJ"></a>
<div id="ADFNS808" class="sect2">
<h3 class="sect2"><span class="secnum">19.4.3</span> Using SYS Account Tables to Monitor Oracle XA Transactions</h3>
<p>These views under the Oracle Database <code dir="ltr">SYS</code> account contain transactions generated by regular Oracle Database applications and Oracle XA applications:</p>
<ul>
<li>
<p><code dir="ltr">DBA_PENDING_TRANSACTIONS</code></p>
</li>
<li>
<p><code dir="ltr">V$GLOBAL_TRANSACTION</code></p>
</li>
<li>
<p><code dir="ltr">DBA_2PC_PENDING</code></p>
</li>
<li>
<p><code dir="ltr">DBA_2PC_NEIGHBORS</code></p>
</li>
</ul>
<p>For transactions generated by Oracle XA applications, this column information applies specifically to the <code dir="ltr">DBA_2PC_NEIGHBORS</code> table:</p>
<ul>
<li>
<p>The <code dir="ltr">DBID</code> column is always <code dir="ltr">xa_orcl</code></p>
</li>
<li>
<p>The <code dir="ltr">DBUSER_OWNER</code> column is always <code dir="ltr"><span class="codeinlineitalic">db_name</span></code><code dir="ltr">xa</code>.<code dir="ltr">oracle</code>.<code dir="ltr">com</code></p>
</li>
</ul>
<p>Remember that the <span class="italic">db_name</span> is always specified as <code dir="ltr">DB</code>=<code dir="ltr"><span class="codeinlineitalic">db_name</span></code> in the open string. If you do not specify this field in the open string, then the value of this column is <code dir="ltr">NULLxa</code>.<code dir="ltr">oracle</code>.<code dir="ltr">com</code> for transactions generated by Oracle XA applications.</p>
<p>For example, this SQL statement provide more information about in-doubt transactions generated by Oracle XA applications:</p>
<pre dir="ltr">SELECT * 
FROM DBA_2PC_PENDING p, DBA_2PC_NEIGHBORS n
WHERE p.LOCAL_TRAN_ID = n.LOCAL_TRAN_ID
AND n.DBID = &#39;xa_orcl&#39;;
</pre>
<p>Alternatively, if you know the format <code dir="ltr">ID</code> used by the transaction processing monitor, then you can use <code dir="ltr">DBA_PENDING_TRANSACTIONS</code> or <code dir="ltr">V$GLOBAL_TRANSACTION</code>. Whereas <code dir="ltr">DBA_PENDING_TRANSACTIONS</code> gives a list of prepared transactions, <code dir="ltr">V$GLOBAL_TRANSACTION</code> provides a list of all active global transactions.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007056"></a>
<div id="ADFNS1505" class="sect1">
<h2 class="sect1"><span class="secnum">19.5</span> Oracle XA Issues and Restrictions</h2>
<p class="subhead2"><a id="ADFNS1109"></a>Topics:</p>
<ul>
<li>
<p><a href="#BGBEBBDF">Using Database Links in Oracle XA Applications</a></p>
</li>
<li>
<p><a href="#i1007088">Managing Transaction Branches in Oracle XA Applications</a></p>
</li>
<li>
<p><a href="#BGBBCJJI">Using Oracle XA with Oracle Real Application Clusters (Oracle RAC)</a></p>
</li>
<li>
<p><a href="#BGBIBHJC">SQL-Based Oracle XA Restrictions</a></p>
</li>
<li>
<p><a href="#BGBICGBH">Miscellaneous Restrictions</a></p>
</li>
</ul>
<a id="BGBEBBDF"></a>
<div id="ADFNS809" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">19.5.1</span> Using Database Links in Oracle XA Applications</h3>
<p>Oracle XA applications can access other Oracle Database instances through database links with these restrictions:</p>
<ul>
<li>
<p>They must use the shared server configuration.</p>
<p>The transaction processing monitors (TPMs) use shared servers to open the connection to an Oracle Database A. Then the operating system network connection required for the database link is opened by the dispatcher instead of a dedicated server process. This allows different services or threads to operate on the transaction.</p>
<p>If this restriction is not satisfied, then when you use database links within an XA transaction, it creates an operating system network connection between the dedicated server process and the other Oracle Database B. Because this network connection cannot be moved from one dedicated server process to another, you cannot detach from this dedicated server process of database A. Then when you access the database B through a database link, you receive an ORA-24777 error.</p>
</li>
<li>
<p>The other database being accessed must be another Oracle Database.</p>
</li>
</ul>
<p>If these restrictions are satisfied, Oracle Database allows such links and propagates the transaction protocol (prepare, rollback, and commit) to the other Oracle Database instances.</p>
<p>If using the shared server configuration is not possible, then access the remote database through the Pro*C/C++ application by using <code dir="ltr">EXEC</code> <code dir="ltr">SQL</code> <code dir="ltr">AT</code> syntax.</p>
<p>The <code dir="ltr">init.ora</code> parameter <code dir="ltr">OPEN_LINKS_PER_INSTANCE</code> specifies the number of open database link connections that can be migrated. These <code dir="ltr">dblink</code> connections are used by XA transactions so that the connections are cached after a transaction is committed. Another transaction can use the database link connection if the user who created the connection also created the transaction. This parameter is different from the <code dir="ltr">init</code>.<code dir="ltr">ora</code> parameter <code dir="ltr">OPEN_LINKS</code>, which specifies the maximum number of concurrent open connections (including database links) to remote databases in one session. The <code dir="ltr">OPEN_LINKS</code> parameter does not apply to XA applications.</p>
</div>
<!-- class="sect2" -->
<a id="i1007088"></a>
<div id="ADFNS810" class="sect2">
<h3 class="sect2"><span class="secnum">19.5.2</span> Managing Transaction Branches in Oracle XA Applications</h3>
<p>Oracle Database transaction branches within the same global transaction can be coupled tightly or loosely. If the transaction branches are <span class="glossaryterm">tightly coupled</span>, then they share locks. Consequently, pre-<code dir="ltr">COMMIT</code> updates in one transaction branch are visible in other branches that belong to the same global transaction. In loosely coupled transaction branches, the branches do not share locks and do not see updates in other branches.</p>
<p>In a tightly coupled branch, Oracle Database obtains the DX lock before running any statement. Because the system does not obtain a lock before running the statement, loosely coupled transaction branches result in greater concurrency. The disadvantage is that all transaction branches must go through the two phases of commit, that is, the system cannot use XA one-phase optimization.</p>
<p><a href="#g1017904">Table 19-9</a> summarizes the trade-offs between tightly coupled branches and loosely coupled branches.</p>
<div id="ADFNS811" class="tblformal">
<p class="titleintable"><a id="sthref1005"></a><a id="g1017904"></a>Table 19-9 Tightly and Loosely Coupled Transaction Branches</p>
<table class="cellalignment293" title=" Tightly and Loosely Coupled Transaction Branches" summary="This table compares tightly and loosely coupled transaction branches." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t23">Attribute</th>
<th class="cellalignment294" id="r1c2-t23">Tightly Coupled Branches</th>
<th class="cellalignment294" id="r1c3-t23">Loosely Coupled Branches</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t23" headers="r1c1-t23">
<p>Two Phase Commit</p>
</td>
<td class="cellalignment295" headers="r2c1-t23 r1c2-t23">
<p>Read-only optimization</p>
<p>[prepare for all branches, commit for last branch]</p>
</td>
<td class="cellalignment295" headers="r2c1-t23 r1c3-t23">
<p>Two phases</p>
<p>[prepare and commit for all branches]</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t23" headers="r1c1-t23">
<p>Serialization</p>
</td>
<td class="cellalignment295" headers="r3c1-t23 r1c2-t23">
<p>Database call</p>
</td>
<td class="cellalignment295" headers="r3c1-t23 r1c3-t23">
<p>None</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<a id="BGBBCJJI"></a>
<div id="ADFNS812" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">19.5.3</span> Using Oracle XA with Oracle Real Application Clusters (Oracle RAC)</h3>
<p><a id="sthref1006"></a><a id="sthref1007"></a>As of Oracle Database 11<span class="italic">g</span> Release 1 (11.1), an XA transaction can span Oracle RAC instances, allowing any application that uses XA to take full advantage of the Oracle RAC environment, enhancing the availability and scalability of the application.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
External procedure callouts combined with distributed transactions is not supported.</div>
<p class="subhead2"><a id="ADFNS1110"></a>Topics:</p>
<ul>
<li>
<p><a href="#BABCGFIJ">GLOBAL_TXN_PROCESSES Initialization Parameter</a></p>
</li>
<li>
<p><a href="#BGBEECIE">Managing Transaction Branches on Oracle RAC</a></p>
</li>
<li>
<p><a href="#BGBDHJBG">Managing Instance Recovery in Oracle RAC with DTP Services (10.2)</a></p>
</li>
<li>
<p><a href="#BGBHDAEH">Global Uniqueness of XIDs in Oracle RAC</a></p>
</li>
<li>
<p><a href="#BABCDFGE">Tight and Loose Coupling</a></p>
</li>
</ul>
<a id="BABCGFIJ"></a>
<div id="ADFNS813" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">19.5.3.1</span> GLOBAL_TXN_PROCESSES Initialization Parameter</h4>
<p>The initialization parameter <code dir="ltr">GLOBAL_TXN_PROCESSES</code> specifies the initial number of GTX<span class="italic">n</span> background processes for each Oracle RAC instance. Its default value is 1.</p>
<p>Leave this parameter at its default value clusterwide if distributed transactions might span multiple Oracle RAC instances. This allows the units of work performed across these Oracle RAC instances to share resources and act as a single transaction (that is, the units of work are tightly coupled). It also allows 2PC requests to be sent to any node in the cluster.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink REFRN10291" href="../REFRN/GUID-EDBA5E11-C2FB-4370-9CDC-A098D3951C7E.htm#REFRN10291"><span class="italic">Oracle Database Reference</span></a> for more information about <code dir="ltr">GLOBAL_TXN_PROCESSES</code></div>
</div>
<!-- class="sect3" -->
<a id="BGBEECIE"></a>
<div id="ADFNS814" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">19.5.3.2</span> Managing Transaction Branches on Oracle RAC</h4>
<div class="infobox-note">
<p class="notep1">Note:</p>
This topic applies if either of the following is true:
<ul>
<li>
<p>The initialization parameter <code dir="ltr">GLOBAL_TXN_PROCESSES</code> is not at its default value in the initialization file of every Oracle RAC instance.</p>
</li>
<li>
<p>The Oracle XA application resumes or joins previously detached branches of a transaction.</p>
</li>
</ul>
</div>
<p>Oracle Database permits different instances to operate on different transaction branches in Oracle RAC. For example, Node 1 can operate on branch A while Node 2 operates on branch B. Before Oracle Database 11<span class="italic">g</span> Release 1 (11.1), if transaction branches were on different instances, then they were loosely coupled and did not share locks. In this case, Oracle Database treated different units of work in different application threads as separate entities that did not share resources.</p>
<p>A different case is when multiple instances operate on a single transaction branch. For example, assume that a single transaction lands on Node 1 and Node 2 as follows:</p>
<p class="subhead2"><a id="ADFNS815"></a>Node 1</p>
<ol>
<li>
<p><code dir="ltr">xa_start</code></p>
</li>
<li>
<p>SQL operations</p>
</li>
<li>
<p><code dir="ltr">xa_end</code> (SUSPEND)</p>
</li>
</ol>
<p class="subhead2"><a id="ADFNS816"></a>Node 2</p>
<ol>
<li>
<p><code dir="ltr">xa_start</code> (RESUME)</p>
</li>
<li>
<p><code dir="ltr">xa_prepare</code></p>
</li>
<li>
<p><code dir="ltr">xa_commit</code></p>
</li>
<li>
<p><code dir="ltr">xa_end</code></p>
</li>
</ol>
<p>In the immediately preceding sequence, Oracle Database returns an error because Node 2 must not resume a branch that is physically located on a different node (Node 1).</p>
<p>Before Oracle Database 11<span class="italic">g</span> Release 1 (11.1), the way to achieve tight coupling in Oracle RAC was to use <span class="glossaryterm">Distributed Transaction Processing (DTP) services</span>, that is, services whose cardinality (one) ensured that all tightly-coupled branches landed on the same instance&mdash;regardless of whether load balancing was enabled. Middle-tier components addressed Oracle Database through a common logical database service name that mapped to a single Oracle RAC instance at any point in time. An intermediate name resolver for the database service hid the physical characteristics of the database instance. DTP services enabled all participants of a tightly-coupled global transaction to create branches on one instance.</p>
<p>As of Oracle Database 11<span class="italic">g</span> Release 1 (11.1), the DTP service is no longer required to support XA transactions with tightly coupled branches. By default, tightly coupled branches that land on different Oracle RAC instances remain tightly coupled; that is, they share locks and resources across Oracle RAC instances.</p>
<p>For example, when you use a DTP service, this sequence of actions occurs on the same instance:</p>
<ol>
<li>
<p><code dir="ltr">xa_start</code></p>
</li>
<li>
<p>SQL operations</p>
</li>
<li>
<p><code dir="ltr">xa_end</code> (SUSPEND)</p>
</li>
<li>
<p><code dir="ltr">xa_start</code> (RESUME)</p>
</li>
<li>
<p>SQL operations</p>
</li>
<li>
<p><code dir="ltr">xa_prepare</code></p>
</li>
<li>
<p><code dir="ltr">xa_commit</code> or <code dir="ltr">xa_rollback</code></p>
</li>
</ol>
<p>Moreover, multiple tightly-coupled branches land on the same instance if each addresses the Oracle RM with the same DTP service.</p>
<p>To leverage all instances in the cluster, create multiple DTP services, with one or more on each node that hosts distributed transactions. All branches of a global distributed transaction exist on the same instance. Thus, you can leverage all instances and nodes of an Oracle RAC cluster to balance the load of many distributed XA transactions, thereby maximizing application throughput.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink RACAD967" href="../RACAD/GUID-7C278D82-3DCC-423F-B1E7-4267B1EFC38F.htm#RACAD967"><span class="italic">Oracle Real Application Clusters Administration and Deployment Guide</span></a> to learn how to manage distributed transactions in a Real Application Clusters configuration</div>
</div>
<!-- class="sect3" -->
<a id="BGBDHJBG"></a>
<div id="ADFNS817" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">19.5.3.3</span> Managing Instance Recovery in Oracle RAC with DTP Services (10.2)</h4>
<p>Before Oracle Database 10<span class="italic">g</span> Release 2 (10.2), TM was responsible for detecting failure and triggering failover and failback in Oracle RAC. To ensure that information about in-doubt transactions was propagated to <code dir="ltr">DBA_2PC_PENDING</code>, TM had to call <code dir="ltr">xa_recover</code> before resolving the in-doubt transactions. If an instance failed, then the XA client library could not fail over to another instance until it had run the<code dir="ltr">SYS.DBMS_XA.DIST_TXN_SYNC</code> procedure to ensure that the undo segments of the failed instance were recovered. As of Oracle Database 10<span class="italic">g</span> Release 2 (10.2), there is no such requirement to call <code dir="ltr">xa_recover</code> in cases where the TM has enough information about in-flight transactions.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
As of Oracle Database 9<span class="italic">g</span> Release 2 (9.2), <code dir="ltr">xa_recover</code> is required to wait for distributed data manipulation language (DML) statements to complete on remote sites.</div>
<p>Using DTP services in Oracle RAC has these benefits:</p>
<ul>
<li>
<p>Automates instance failure detection.</p>
</li>
<li>
<p>Automates instance failover and failback. When an instance fails, the DTP service hosted on this instance fails over to another instance. The failover forces clients to reconnect; nevertheless, the logical names for the service remain the same. Failover is automatic and does not require an administrator intervention. The administrator can induce failback by a service relocate statement, but all failback-related recovery is automatically handled within the database server.</p>
</li>
<li>
<p>Enables Oracle Database rather than the client to drive instance recovery. The database does not require middle-tier TM involvement to determine the state of transactions prepared by other instances.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink RACAD063" href="../RACAD/GUID-0AAFAEC9-2FDB-47D3-83E8-B70BA460F13E.htm#RACAD063"><span class="italic">Oracle Real Application Clusters Administration and Deployment Guide</span></a> to learn how to manage instance recovery</p>
</li>
<li>
<p><a class="olink RACAD7147" href="../RACAD/GUID-7948E56B-D455-4852-A3EF-20E4F59156A5.htm#RACAD7147"><span class="italic">Oracle Real Application Clusters Administration and Deployment Guide</span></a> for information about services and distributed transaction processing in Oracle RAC</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="BGBHDAEH"></a>
<div id="ADFNS818" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">19.5.3.4</span> Global Uniqueness of XIDs in Oracle RAC</h4>
<p>Before Oracle Database 11<span class="italic">g</span> Release 1 (11.1), Oracle RAC database cannot determine whether a given XID is unique for XA transactions throughout the cluster.</p>
<p>For example, suppose that there is an XID <code dir="ltr">Fmt(</code><code dir="ltr"><span class="codeinlineitalic">x</span></code><code dir="ltr">)</code>.<code dir="ltr">Tx(1)</code>.<code dir="ltr">Br(1)</code> on Oracle RAC instance 1 and another XID <code dir="ltr">Fmt(</code><code dir="ltr"><span class="codeinlineitalic">x</span></code><code dir="ltr">)</code>.<code dir="ltr">Tx(1)</code>.<code dir="ltr">Br(1)</code> on Oracle RAC instance 2. Each of these can start a branch and run SQL even though the XID is not unique across Oracle RAC instances.</p>
<p>As of Oracle Database 11<span class="italic">g</span> Release 1 (11.1), Oracle RAC database detects the duplicate XIDs across Oracle RAC instances and prevents a branch with a duplicate XID from starting.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink RACAD7147" href="../RACAD/GUID-7948E56B-D455-4852-A3EF-20E4F59156A5.htm#RACAD7147"><span class="italic">Oracle Real Application Clusters Administration and Deployment Guide</span></a> for information about services and distributed transaction processing in Oracle RAC</div>
</div>
<!-- class="sect3" -->
<a id="BABCDFGE"></a>
<div id="ADFNS819" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">19.5.3.5</span> Tight and Loose Coupling</h4>
<p>Oracle Database transaction branches within the same global transaction can be coupled either tightly or loosely (for details, see <a href="#i1007088">Section 19.5.2, &#34;Managing Transaction Branches in Oracle XA Applications&#34;</a>). Ordinarily, coupling type is determined by the value of the <code dir="ltr">Loose_Coupling</code> field of the <code dir="ltr">xa_open</code> string (see <a href="#BGBFICJB">Table 19-5</a>). However, if transaction branches land on different Oracle RAC instances when running Oracle RAC, they are loosely coupled even if <code dir="ltr">Loose_Coupling=false</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink RACAD7147" href="../RACAD/GUID-7948E56B-D455-4852-A3EF-20E4F59156A5.htm#RACAD7147"><span class="italic">Oracle Real Application Clusters Administration and Deployment Guide</span></a> for information about services and distributed transaction processing in Oracle RAC</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BGBIBHJC"></a>
<div id="ADFNS820" class="sect2">
<h3 class="sect2"><span class="secnum">19.5.4</span> SQL-Based Oracle XA Restrictions</h3>
<p>This section describes restrictions concerning these SQL operations:</p>
<ul>
<li>
<p><a href="#BGBIFBGH">Rollbacks and Commits</a></p>
</li>
<li>
<p><a href="#BGBDHGIF">DDL Statements</a></p>
</li>
<li>
<p><a href="#BGBIEDHI">Session State</a></p>
</li>
<li>
<p><a href="#BGBBHDJD">EXEC SQL</a></p>
</li>
</ul>
<a id="BGBIFBGH"></a>
<div id="ADFNS821" class="sect3">
<h4 class="sect3"><span class="secnum">19.5.4.1</span> Rollbacks and Commits</h4>
<p>Because the transaction manager is responsible for coordinating and monitoring the progress of the global transaction, the application must not contain any Oracle Database-specific statement that independently rolls back or commits a global transaction. However, you can use rollbacks and commits in a local transaction.</p>
<p>Do not use <code dir="ltr">EXEC</code> <code dir="ltr">SQL</code> <code dir="ltr">ROLLBACK</code> <code dir="ltr">WORK</code> for precompiler applications when you are in the middle of a global transaction. Similarly, an OCI application must not run <code dir="ltr">OCITransRollback</code>, or the Version 7 equivalent <code dir="ltr">orol</code>. You can roll back a global transaction by calling <code dir="ltr">tx_rollback</code>.</p>
<p>Similarly, a precompiler application must not have the <code dir="ltr">EXEC</code> <code dir="ltr">SQL</code> <code dir="ltr">COMMIT</code> <code dir="ltr">WORK</code> statement in the middle of a global transaction. An OCI application must not run <code dir="ltr">OCITransCommit</code> or the Version 7 equivalent <code dir="ltr">ocom</code>. For example, use <code dir="ltr">tx_commit</code> or <code dir="ltr">tx_rollback</code> to end a global transaction.</p>
</div>
<!-- class="sect3" -->
<a id="BGBDHGIF"></a>
<div id="ADFNS822" class="sect3">
<h4 class="sect3"><span class="secnum">19.5.4.2</span> DDL Statements</h4>
<p>Because a <a id="sthref1008"></a>data definition language (DDL) statement, such as <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code>, implies an implicit commit, the Oracle XA application cannot run any DDL statements.</p>
</div>
<!-- class="sect3" -->
<a id="BGBIEDHI"></a>
<div id="ADFNS823" class="sect3">
<h4 class="sect3"><span class="secnum">19.5.4.3</span> Session State</h4>
<p>Oracle Database does not guarantee that session state is valid between TPM services. For example, if a TPM service updates a session variable (such as a global package variable), then another TPM service that runs as part of the same global transaction might not see the change. Use savepoints only within a TPM service. The application must not refer to a savepoint that was created in another TPM service. Similarly, an application must not attempt to fetch from a cursor that was executed in another TPM service.</p>
</div>
<!-- class="sect3" -->
<a id="BGBBHDJD"></a>
<div id="ADFNS824" class="sect3">
<h4 class="sect3"><span class="secnum">19.5.4.4</span> EXEC SQL</h4>
<ul>
<li>
<p>Do not use the <code dir="ltr">EXEC</code> <code dir="ltr">SQL</code> statement to connect or disconnect. That is, do not use <code dir="ltr">EXEC</code> <code dir="ltr">SQL</code> <code dir="ltr">CONNECT</code>, <code dir="ltr">EXEC</code> <code dir="ltr">SQL</code> <code dir="ltr">COMMIT</code> <code dir="ltr">WORK</code> <code dir="ltr">RELEASE</code> or <code dir="ltr">EXEC</code> <code dir="ltr">SQL</code> <code dir="ltr">ROLLBACK</code> <code dir="ltr">WORK</code> <code dir="ltr">RELEASE</code>.</p>
</li>
<li>
<p><code dir="ltr">EXEC</code> <code dir="ltr">SQL</code> <code dir="ltr">SET</code> <code dir="ltr">TRANSACTION</code> must be the first operation in a transaction.</p>
<p>If a transaction has multiple branches, only one branch can set the transaction name. Otherwise, error ORA-1453 occurs.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BGBICGBH"></a>
<div id="ADFNS825" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">19.5.5</span> Miscellaneous Restrictions</h3>
<ul>
<li>
<p>You cannot use both Oracle XA and a gateway in the same session.</p>
</li>
<li>
<p>Oracle Database does not support association migration (a means whereby a transaction manager might resume a suspended branch association in another branch).</p>
</li>
<li>
<p>The optional XA feature asynchronous XA calls is not supported.</p>
</li>
<li>
<p>Set the <code dir="ltr">TRANSACTIONS</code> initialization parameter to the expected number of concurrent global transactions. The initialization parameter <code dir="ltr">OPEN_LINKS_PER_INSTANCE</code> specifies the number of open database link connections that can be migrated. These database link connections are used by XA transactions so that the connections are cached after a transaction is committed.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BGBEBBDF">Section 19.5.1, &#34;Using Database Links in Oracle XA Applications&#34;</a></div>
</li>
<li>
<p>The maximum number of <code dir="ltr">xa_open</code> calls for each thread is 32.</p>
</li>
<li>
<p>When building an XA application based on TP-monitor, ensure that the TP-monitors libraries (that define the symbols <code dir="ltr">ax_reg</code> and <code dir="ltr">ax_unreg</code>) are placed in the link line before Oracle Database&#39;s client shared library. If your platform does not support shared libraries or if your linker is not sensitive to ordering of libraries in the link line, use Oracle Database&#39;s nonshared client library. These link restrictions are applicable only when using XA&#39;s dynamic registration (Oracle XA switch <code dir="ltr">xaoswd</code>).</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment286">
<tr>
<td class="cellalignment295">
<table class="cellalignment291">
<tr>
<td class="cellalignment290"><a href="adfns_externproc.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment290"><a href="adfns_publish.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment298">
<table class="cellalignment289">
<tr>
<td class="cellalignment290"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment290"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment290"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment290"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment290"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment290"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>