<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-83"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Using%20Regular%20Expressions%20in%20Database%20Applications"></a><title>Using Regular Expressions in Database Applications</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1080"/>
<meta name="dcterms.created" content="2016-05-05T16:23:34Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Development Guide"/>
<meta name="dcterms.identifier" content="E41452-07"/>
<meta name="dcterms.isVersionOf" content="ADFNS"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="adfns_sqltypes.htm" title="Previous" type="text/html"/>
<link rel="Next" href="adfns_indexes.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41452-07.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">17/38</span> <!-- End Header -->
<script>
<!-- // <![CDATA[
window.name='adfns_regexp'
// ]]> -->
</script> <script>
// <![CDATA[
function footdisplay(footnum,footnote) {
    var msg = window.open('', 'NewWindow' + footnum,
        'directories=no,height=120,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');

    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">');
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>');
    msg.document.write('Footnote&nbsp; ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><h1>Footnote&nbsp; ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/body><\/html>');
    msg.document.close();
    msg.focus();
}
// ]]>
</script> <noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript>
<div id="ADFNS1003" class="chapter"><a id="g1015343"></a> <a id="i1010949"></a>
<h1 class="chapter"><span class="secnum">8</span> Using Regular Expressions in Database Applications</h1>
<p>This chapter describes <a id="sthref443"></a>regular expressions and explains how to use them in database applications.</p>
<p class="subhead2"><a id="ADFNS1004"></a>Topics:</p>
<ul>
<li>
<p><a href="#CHDGAFIC">Overview of Regular Expressions</a></p>
</li>
<li>
<p><a href="#i1007663">Oracle SQL Support for Regular Expressions</a></p>
</li>
<li>
<p><a href="#CHDJGBGG">Oracle SQL and POSIX Regular Expression Standard</a></p>
</li>
<li>
<p><a href="#i1007670">Operators in Oracle SQL Regular Expressions</a></p>
</li>
<li>
<p><a href="#CHDBCCDJ">Using Regular Expressions in SQL Statements: Scenarios</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink NLSPG0052" href="../NLSPG/ch5lingsort.htm#NLSPG0052"><span class="italic">Oracle Database Globalization Support Guide</span></a> for information about using SQL regular expression functions in a multilingual environment</p>
</li>
<li>
<p><span class="italic">Oracle Regular Expressions Pocket Reference</span> by Jonathan Gennick, O&#39;Reilly &amp; Associates</p>
</li>
<li>
<p><span class="italic">Mastering Regular Expressions</span> by Jeffrey E. F. Friedl, O&#39;Reilly &amp; Associates</p>
</li>
</ul>
</div>
<a id="CHDGAFIC"></a>
<div id="ADFNS1013" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">8.1</span> Overview of Regular Expressions</h2>
<p>A regular expression specifies a search pattern, using <a id="sthref444"></a><a id="sthref445"></a><span class="bold">metacharacters</span> (which are, or belong to, <span class="bold">operators</span>) and <span class="bold">character literals</span> (described in <a class="olink SQLRF00218" href="../SQLRF/sql_elements003.htm#SQLRF00218"><span class="italic">Oracle Database SQL Language Reference</span></a>).</p>
<p>The search pattern can be complex. For example, this regular expression matches any string that begins with either <code>f</code> or <code dir="ltr">ht</code>, followed by <code dir="ltr">tp</code>, optionally followed by <code dir="ltr">s</code>, followed by the colon (<code dir="ltr">:</code>):</p>
<pre dir="ltr">(f|ht)tps?:
</pre>
<p>The metacharacters (which are also operators) in the preceding example are the parentheses, the pipe symbol (<code dir="ltr">|</code>), and the question mark (<code dir="ltr">?</code>). The character literals are <code dir="ltr">f</code>, <code dir="ltr">ht</code>, <code dir="ltr">tp</code>, <code dir="ltr">s</code>, and the colon (<code dir="ltr">:</code>).</p>
<p>Parentheses group multiple pattern elements into a single element. The pipe symbol (<code dir="ltr">|</code>) indicates a choice between the elements on either side of it, <code dir="ltr">f</code> and <code dir="ltr">ht</code>. The question mark (<code dir="ltr">?</code>) indicates that the preceding element, <code dir="ltr">s</code>, is optional. Thus, the preceding regular expression matches these strings:</p>
<ul>
<li>
<p><code dir="ltr">http:</code></p>
</li>
<li>
<p><code dir="ltr">https:</code></p>
</li>
<li>
<p><code dir="ltr">ftp:</code></p>
</li>
<li>
<p><code dir="ltr">ftps:</code></p>
</li>
</ul>
<p>Regular expressions are a powerful text-processing component of the programming languages Java and PERL. For example, a PERL script can read the contents of each HTML file in a directory into a single string variable and then use a regular expression to search that string for URLs. This robust pattern-matching functionality is one reason that many application developers use PERL.</p>
</div>
<!-- class="sect1" -->
<a id="i1007663"></a>
<div id="ADFNS9999" class="sect1">
<h2 class="sect1"><span class="secnum">8.2</span> Oracle SQL Support for Regular Expressions</h2>
<p><a id="sthref446"></a>Oracle SQL support for regular expressions lets application developers implement complex pattern-matching logic in the database, which is useful for these reasons:</p>
<ul>
<li>
<p>By centralizing pattern-matching logic in the database, you avoid intensive string processing of SQL results sets by middle-tier applications.</p>
<p>For example, life science customers often rely on PERL to do pattern analysis on bioinformatics data stored in huge databases of DNA and proteins. Previously, finding a match for a protein sequence such as <code dir="ltr">[AG]</code>.<code dir="ltr">{4}GK[ST]</code> was handled in the middle tier. The SQL regular expression functions move the processing logic closer to the data, thereby providing a more efficient solution.</p>
</li>
<li>
<p>By using server-side regular expressions to enforce constraints, you avoid duplicating validation logic on multiple clients.</p>
</li>
</ul>
<p>Oracle SQL supports regular expressions with the pattern-matching condition and functions summarized in <a href="#CHDIAFEI">Table 8-1</a>. Each pattern matcher searches a given string for a given pattern (described with a regular expression), and each has the pattern-matching options described in <a href="#CHDHFCFC">Table 8-2</a>. The functions have additional options (for example, the character position at which to start searching the string for the pattern). For details, see <a class="olink SQLRF51178" href="../SQLRF/functions002.htm#SQLRF51178"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<div id="ADFNS1007" class="tblformal">
<p class="titleintable"><a id="sthref447"></a><a id="CHDIAFEI"></a>Table 8-1 Oracle SQL Pattern-Matching Condition and Functions</p>
<table class="cellalignment293" title="Oracle SQL Pattern-Matching Condition and Functions" summary="This table summarizes the Oracle SQL pattern-matching condition and functions. The first column gives the names of the condition and functions, which are links to their topics in SQLRF. The second column briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t3">Name</th>
<th class="cellalignment294" id="r1c2-t3">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t3" headers="r1c1-t3">
<p><a id="sthref448"></a><a class="olink SQLRF00501" href="../SQLRF/conditions007.htm#SQLRF00501"><code dir="ltr">REGEXP_LIKE</code></a></p>
</td>
<td class="cellalignment295" headers="r2c1-t3 r1c2-t3">
<p><span class="bold">Condition</span> that can appear in the <code dir="ltr">WHERE</code> clause of a query, causing the query to return rows that match the given pattern.</p>
<p><span class="bold">Example:</span> This <code dir="ltr">WHERE</code> clause identifies employees with the first name of Steven or Stephen:</p>
<pre dir="ltr">WHERE REGEXP_LIKE((hr.employees.first_name, &#39;^Ste(v|ph)en$&#39;)
</pre></td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t3" headers="r1c1-t3">
<p><a id="sthref449"></a><a class="olink SQLRF20014" href="../SQLRF/functions161.htm#SQLRF20014"><code dir="ltr">REGEXP_COUNT</code></a></p>
</td>
<td class="cellalignment295" headers="r3c1-t3 r1c2-t3">
<p><span class="bold">Function</span> that returns the number of times the given pattern appears in the given string.</p>
<p><span class="bold">Example:</span> This function invocation returns the number of times that <code dir="ltr">e</code> (but not <code dir="ltr">E</code>) appears in the string <code dir="ltr">&#39;Albert Einstein&#39;</code>, starting at character position 7:</p>
<pre dir="ltr">REGEXP_COUNT(&#39;Albert Einstein&#39;, &#39;e&#39;, 7, &#39;c&#39;)
</pre>
<p>(The returned value is 1, because the <code dir="ltr">c</code> option specifies case-sensitive matching.)</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t3" headers="r1c1-t3">
<p><a id="sthref450"></a><a class="olink SQLRF06300" href="../SQLRF/functions162.htm#SQLRF06300"><code dir="ltr">REGEXP_INSTR</code></a></p>
</td>
<td class="cellalignment295" headers="r4c1-t3 r1c2-t3">
<p><span class="bold">Function</span> that returns an integer that indicates the starting position of the given pattern in the given string. Alternatively, the integer can indicate the position immediately following the end of the pattern.</p>
<p><span class="bold">Example:</span> This function invocation returns the starting position of the first valid email address in the column <code dir="ltr">hr</code>.<code dir="ltr">employees</code>.<code dir="ltr">email</code>:</p>
<pre dir="ltr">REGEXP_INSTR(hr.employees.email, &#39;\w+@\w+(\.\w+)+&#39;)
</pre>
<p>If the returned value is greater than zero, then the column contains a valid email address.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t3" headers="r1c1-t3">
<p><a id="sthref451"></a><a class="olink SQLRF06302" href="../SQLRF/functions163.htm#SQLRF06302"><code dir="ltr">REGEXP_REPLACE</code></a></p>
</td>
<td class="cellalignment295" headers="r5c1-t3 r1c2-t3">
<p><span class="bold">Function</span> that returns the string that results from replacing occurrences of the given pattern in the given string with a replacement string.</p>
<p><span class="bold">Example:</span> This function invocation puts a space after each character in the column <code dir="ltr">hr</code>.<code dir="ltr">countries</code>.<code dir="ltr">country_name</code>:</p>
<pre dir="ltr">REGEXP_REPLACE(hr.countries.country_name, &#39;(.)&#39;, &#39;\1 &#39;)
</pre></td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r6c1-t3" headers="r1c1-t3">
<p><a id="sthref452"></a><a class="olink SQLRF06303" href="../SQLRF/functions164.htm#SQLRF06303"><code dir="ltr">REGEXP_SUBSTR</code></a></p>
</td>
<td class="cellalignment295" headers="r6c1-t3 r1c2-t3">
<p><span class="bold">Function</span> that is like <code dir="ltr">REGEXP_INSTR</code> except that instead of returning the starting position of the given pattern in the given string, it returns the matching substring itself.</p>
<p><span class="bold">Example:</span> This function invocation returns <code dir="ltr">&#39;Oracle&#39;</code> because the <code dir="ltr">x</code> option ignores the spaces in the pattern:</p>
<pre dir="ltr">REGEXP_SUBSTR(&#39;Oracle 2010&#39;, &#39;O r a c l e&#39;, 1, 1, &#39;x&#39;)
</pre></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p><a href="#CHDHFCFC">Table 8-2</a> describes the pattern-matching options that are available to each pattern matcher in <a href="#CHDIAFEI">Table 8-1</a>.</p>
<div id="ADFNS237" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref453"></a><a id="CHDHFCFC"></a>Table 8-2 Pattern-Matching Options for Oracle SQL Pattern-Matching Condition and Functions</p>
<table class="cellalignment296" title="Pattern-Matching Options for Oracle SQL Pattern-Matching Condition and Functions" summary="This table summarizes the Perl-influenced matching operators." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t4">Option</th>
<th class="cellalignment294" id="r1c2-t4">Description</th>
<th class="cellalignment294" id="r1c3-t4">Example</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t4" headers="r1c1-t4">
<p><code dir="ltr">i</code></p>
</td>
<td class="cellalignment295" headers="r2c1-t4 r1c2-t4">
<p>Specifies case-insensitive matching.</p>
</td>
<td class="cellalignment295" headers="r2c1-t4 r1c3-t4">
<p>This function invocation returns 3:</p>
<pre dir="ltr">REGEXP_COUNT(&#39;Albert Einstein&#39;, &#39;e&#39;, &#39;<span class="bold">i</span>&#39;)
</pre></td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t4" headers="r1c1-t4">
<p><code dir="ltr">c</code></p>
</td>
<td class="cellalignment295" headers="r3c1-t4 r1c2-t4">
<p>Specifies case-sensitive matching.</p>
</td>
<td class="cellalignment295" headers="r3c1-t4 r1c3-t4">
<p>This function invocation returns 2:</p>
<pre dir="ltr">REGEXP_COUNT(&#39;Albert Einstein&#39;, &#39;e&#39;, &#39;<span class="bold">c</span>&#39;)
</pre></td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t4" headers="r1c1-t4">
<p><code dir="ltr">n</code></p>
</td>
<td class="cellalignment295" headers="r4c1-t4 r1c2-t4">
<p>Allows the Dot operator (<code dir="ltr">.</code>) to match the newline character, which is not the default (see <a href="#CHDIEGEI">Table 8-3</a>).</p>
</td>
<td class="cellalignment295" headers="r4c1-t4 r1c3-t4">
<p>In this function invocation, the string and search pattern match only because the <code dir="ltr">n</code> option is specified:</p>
<pre dir="ltr">REGEXP_SUBSTR(&#39;a&#39;||CHR(10)||&#39;d&#39;, &#39;a.d&#39;, 1, 1, &#39;<span class="bold">n</span>&#39;)
</pre></td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t4" headers="r1c1-t4">
<p><code dir="ltr">m</code></p>
</td>
<td class="cellalignment295" headers="r5c1-t4 r1c2-t4">
<p>Specifies <a id="sthref454"></a><span class="bold">multiline mode</span>, where a newline character inside a string terminates a line. The string can contain multiple lines.</p>
<p>Multiline mode affects POSIX operators Beginning-of-Line Anchor (<code dir="ltr">^</code>) and End-of-Line Anchor (<code dir="ltr">$</code>) (described in <a href="#CHDIEGEI">Table 8-3</a>) but not PERL-influenced operators <code dir="ltr">\A</code>, <code dir="ltr">\Z</code>, and <code dir="ltr">\z</code> (described in <a href="#CHDDGICJ">Table 8-5</a>).</p>
</td>
<td class="cellalignment295" headers="r5c1-t4 r1c3-t4">
<p>This function invocation returns <code dir="ltr">ac</code>:</p>
<pre dir="ltr">REGEXP_SUBSTR(&#39;ab&#39;||CHR(10)||&#39;ac&#39;, &#39;^a.&#39;, 1, 2, &#39;<span class="bold">m</span>&#39;)
</pre></td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r6c1-t4" headers="r1c1-t4">
<p><code dir="ltr">x</code></p>
</td>
<td class="cellalignment295" headers="r6c1-t4 r1c2-t4">
<p>Ignores whitespace characters in the search pattern. By default, whitespace characters match themselves.</p>
</td>
<td class="cellalignment295" headers="r6c1-t4 r1c3-t4">
<p>This function invocation returns <code dir="ltr">abcd</code>:</p>
<pre dir="ltr">REGEXP_SUBSTR(&#39;abcd&#39;, &#39;a b c d&#39;, 1, 1, &#39;<span class="bold">x</span>&#39;)
</pre></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformalwide" --></div>
<!-- class="sect1" -->
<a id="CHDJGBGG"></a>
<div id="ADFNS231" class="sect1">
<h2 class="sect1"><span class="secnum">8.3</span> Oracle SQL and POSIX Regular Expression Standard</h2>
<p>Oracle SQL implementation of regular expressions conforms to these standards:</p>
<ul>
<li>
<p>IEEE Portable Operating System Interface (<a id="sthref455"></a>POSIX) standard draft 1003.2/D11.2</p>
<p>Oracle SQL follows exactly the syntax and matching semantics for regular expression operators as defined in the POSIX standard for matching ASCII (English language) data. You can find the POSIX standard draft at this URL:</p>
<pre dir="ltr"><a href="http://pubs.opengroup.org/onlinepubs/007908799/xbd/re.html">http://pubs.opengroup.org/onlinepubs/007908799/xbd/re.html</a>
</pre>
<p>For more information, see <a href="#CHDIDJJC">&#34;POSIX Operators in Oracle SQL Regular Expressions&#34;</a>.</p>
</li>
<li>
<p><a id="sthref456"></a><a id="sthref457"></a>Unicode Regular Expression Guidelines of the Unicode Consortium</p>
</li>
</ul>
<p>Oracle SQL extends regular expression support beyond the POSIX standard in these ways:</p>
<ul>
<li>
<p>Extends the matching capabilities for multilingual data</p>
<p>For details, see <a href="#i690823">Section 8.4.2, &#34;Oracle SQL Multilingual Extensions to POSIX Standard.&#34;</a></p>
</li>
<li>
<p>Supports some commonly used PERL regular expression operators that are not included in the POSIX standard but do not conflict with it (for example, character class shortcuts and the nongreedy modifier (<code dir="ltr">?</code>))</p>
<p>For details, see <a href="#CHDGHBHF">Section 8.4.3, &#34;Oracle SQL PERL-Influenced Extensions to POSIX Standard.&#34;</a></p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="i1007670"></a>
<div id="ADFNS00401" class="sect1">
<h2 class="sect1"><span class="secnum">8.4</span> Operators in Oracle SQL Regular Expressions</h2>
<p>Oracle SQL supports a set of common <a id="sthref458"></a>operators (composed of metacharacters) used in regular expressions.</p>
<div class="infobox-note">
<p class="notep1">Caution:</p>
The interpretation of metacharacters differs between tools that support regular expressions. If you are porting regular expressions from another environment to Oracle Database, ensure that Oracle SQL supports their syntax and interprets them as you expect.</div>
<p class="subhead2"><a id="ADFNS1014"></a>Topics:</p>
<ul>
<li>
<p><a href="#CHDIDJJC">POSIX Operators in Oracle SQL Regular Expressions</a></p>
</li>
<li>
<p><a href="#i690823">Oracle SQL Multilingual Extensions to POSIX Standard</a></p>
</li>
<li>
<p><a href="#CHDGHBHF">Oracle SQL PERL-Influenced Extensions to POSIX Standard</a></p>
</li>
</ul>
<a id="CHDIDJJC"></a>
<div id="ADFNS1012" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">8.4.1</span> POSIX Operators in Oracle SQL Regular Expressions</h3>
<p><a href="#CHDIEGEI">Table 8-3</a> summarizes the POSIX operators defined in the <a id="sthref459"></a>POSIX standard Extended Regular Expression (ERE) syntax. Oracle SQL follows the exact syntax and matching semantics for these operators as defined in the POSIX standard for matching ASCII (English language) data. Any differences in action between Oracle SQL and the POSIX standard are noted in the Description column.</p>
<div id="ADFNS232" class="tblhruleformalwidemax">
<p class="titleintable"><a id="sthref460"></a><a id="CHDIEGEI"></a>Table 8-3 POSIX Operators in Oracle SQL Regular Expressions</p>
<table class="cellalignment296" title="POSIX Operators in Oracle SQL Regular Expressions" summary="This table summarizes the POSIX metacharacters supported in Oracle Database regular expressions." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t6">Operator Syntax</th>
<th class="cellalignment294" id="r1c2-t6">Names</th>
<th class="cellalignment294" id="r1c3-t6">Description</th>
<th class="cellalignment294" id="r1c4-t6">Examples</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t6" headers="r1c1-t6">
<p><code dir="ltr">.</code></p>
</td>
<td class="cellalignment295" headers="r2c1-t6 r1c2-t6">
<p>Any Character</p>
<p>Dot</p>
</td>
<td class="cellalignment295" headers="r2c1-t6 r1c3-t6">
<p>Matches any character in the database character set, including the newline character if you specify matching option <code dir="ltr">n</code> (see <a href="#CHDHFCFC">Table 8-2</a>).</p>
<p>The Linux, UNIX, and Windows platforms recognize the newline character as the linefeed character (<code dir="ltr">\x0a</code>).</p>
<p>The Macintosh platforms recognize the newline character as the carriage return character (<code dir="ltr">\x0d</code>).</p>
<p><span class="bold">Note:</span> In the POSIX standard, this operator matches any English character except NULL and the newline character.</p>
</td>
<td class="cellalignment295" headers="r2c1-t6 r1c4-t6">
<p>The expression <code dir="ltr"><span class="codeinlinebold">a.b</span></code> matches the strings <code dir="ltr">abb</code>, <code dir="ltr">acb</code>, and <code dir="ltr">adb</code>, but does not match <code dir="ltr">acc</code>.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t6" headers="r1c1-t6">
<p><code dir="ltr">+</code></p>
</td>
<td class="cellalignment295" headers="r3c1-t6 r1c2-t6">
<p>One or More</p>
<p>Plus Quantifier</p>
</td>
<td class="cellalignment295" headers="r3c1-t6 r1c3-t6">
<p>Matches one or more occurrences of the preceding subexpression (<a id="sthref461"></a><a id="sthref462"></a>greedy<a id="CHDJFDHH" href="#CHDJFDHH" onclick="footdisplay(1,&#34;A \u003cspan class=\&#34;bold\&#34;\u003egreedy\u003c/span\u003e operator matches as many occurrences as possible while allowing the rest of the match to succeed. To make the operator nongreedy, follow it with the nongreedy modifier (\u003ccode dir=\&#34;ltr\&#34;\u003e?\u003c/code\u003e) (see \u003ca target=\&#34;adfns_regexp\&#34; href=\&#34;#CHDDGICJ\&#34;\u003eTable 8-5\u003c/a\u003e).&#34;)"><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a>).</p>
</td>
<td class="cellalignment295" headers="r3c1-t6 r1c4-t6">
<p>The expression <code dir="ltr"><span class="codeinlinebold">a+</span></code> matches the strings <code dir="ltr">a</code>, <code dir="ltr">aa</code>, and <code dir="ltr">aaa</code>, but does not match <code dir="ltr">ba</code> or <code dir="ltr">ab</code>.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t6" headers="r1c1-t6">
<p><code dir="ltr">*</code></p>
</td>
<td class="cellalignment295" headers="r4c1-t6 r1c2-t6">
<p>Zero or More</p>
<p>Star Quantifier</p>
</td>
<td class="cellalignment295" headers="r4c1-t6 r1c3-t6">
<p>Matches zero or more occurrences of the preceding subexpression (greedy<a id="sthref463" href="#sthref463" onclick="footdisplay(1,&#34;A \u003cspan class=\&#34;bold\&#34;\u003egreedy\u003c/span\u003e operator matches as many occurrences as possible while allowing the rest of the match to succeed. To make the operator nongreedy, follow it with the nongreedy modifier (\u003ccode dir=\&#34;ltr\&#34;\u003e?\u003c/code\u003e) (see \u003ca target=\&#34;adfns_regexp\&#34; href=\&#34;#CHDDGICJ\&#34;\u003eTable 8-5\u003c/a\u003e).&#34;)"><sup class="footnotenumber">Footref&nbsp;1</sup></a>).</p>
</td>
<td class="cellalignment295" headers="r4c1-t6 r1c4-t6">
<p>The expression <code dir="ltr"><span class="codeinlinebold">ab*c</span></code> matches the strings <code dir="ltr">ac</code>, <code dir="ltr">abc</code>, and <code dir="ltr">abbc</code>, but does not match <code dir="ltr">abb</code> or <code dir="ltr">bbc</code>.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t6" headers="r1c1-t6">
<p><code dir="ltr">?</code></p>
</td>
<td class="cellalignment295" headers="r5c1-t6 r1c2-t6">
<p>Zero or One</p>
<p>Question Mark Quantifier</p>
</td>
<td class="cellalignment295" headers="r5c1-t6 r1c3-t6">
<p>Matches zero or one occurrences of the preceding subexpression (greedy<a id="sthref464" href="#sthref464" onclick="footdisplay(1,&#34;A \u003cspan class=\&#34;bold\&#34;\u003egreedy\u003c/span\u003e operator matches as many occurrences as possible while allowing the rest of the match to succeed. To make the operator nongreedy, follow it with the nongreedy modifier (\u003ccode dir=\&#34;ltr\&#34;\u003e?\u003c/code\u003e) (see \u003ca target=\&#34;adfns_regexp\&#34; href=\&#34;#CHDDGICJ\&#34;\u003eTable 8-5\u003c/a\u003e).&#34;)"><sup class="footnotenumber">Footref&nbsp;1</sup></a>).</p>
</td>
<td class="cellalignment295" headers="r5c1-t6 r1c4-t6">
<p>The expression <code dir="ltr"><span class="codeinlinebold">ab?c</span></code> matches the strings <code dir="ltr">abc</code> and <code dir="ltr">ac</code>, but does not match <code dir="ltr">abbc</code> or <code dir="ltr">adc</code>.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r6c1-t6" headers="r1c1-t6">
<p><code dir="ltr">{</code><code dir="ltr"><span class="codeinlineitalic">m</span></code><code dir="ltr">}</code></p>
</td>
<td class="cellalignment295" headers="r6c1-t6 r1c2-t6">
<p>Interval</p>
<p>Exact Count</p>
</td>
<td class="cellalignment295" headers="r6c1-t6 r1c3-t6">
<p>Matches exactly <code dir="ltr"><span class="codeinlineitalic">m</span></code> occurrences of the preceding subexpression.</p>
</td>
<td class="cellalignment295" headers="r6c1-t6 r1c4-t6">
<p>The expression <code dir="ltr"><span class="codeinlinebold">a{3}</span></code> matches the string <code dir="ltr">aaa</code>, but does not match <code dir="ltr">aa</code>.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r7c1-t6" headers="r1c1-t6">
<p><code dir="ltr">{</code><code dir="ltr"><span class="codeinlineitalic">m</span></code><code dir="ltr">,}</code></p>
</td>
<td class="cellalignment295" headers="r7c1-t6 r1c2-t6">
<p>Interval</p>
<p>At-Least Count</p>
</td>
<td class="cellalignment295" headers="r7c1-t6 r1c3-t6">
<p>Matches at least <code dir="ltr"><span class="codeinlineitalic">m</span></code> occurrences of the preceding subexpression (greedy<a id="sthref465" href="#sthref465" onclick="footdisplay(1,&#34;A \u003cspan class=\&#34;bold\&#34;\u003egreedy\u003c/span\u003e operator matches as many occurrences as possible while allowing the rest of the match to succeed. To make the operator nongreedy, follow it with the nongreedy modifier (\u003ccode dir=\&#34;ltr\&#34;\u003e?\u003c/code\u003e) (see \u003ca target=\&#34;adfns_regexp\&#34; href=\&#34;#CHDDGICJ\&#34;\u003eTable 8-5\u003c/a\u003e).&#34;)"><sup class="footnotenumber">Footref&nbsp;1</sup></a>).</p>
</td>
<td class="cellalignment295" headers="r7c1-t6 r1c4-t6">
<p>The expression <code dir="ltr"><span class="codeinlinebold">a{3,}</span></code> matches the strings <code dir="ltr">aaa</code> and <code dir="ltr">aaaa</code>, but does not match <code dir="ltr">aa</code>.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r8c1-t6" headers="r1c1-t6">
<p><code dir="ltr">{</code><code dir="ltr"><span class="codeinlineitalic">m</span></code><code dir="ltr">,</code><code dir="ltr"><span class="codeinlineitalic">n</span></code><code dir="ltr">}</code></p>
</td>
<td class="cellalignment295" headers="r8c1-t6 r1c2-t6">
<p>Interval</p>
<p>Between Count</p>
</td>
<td class="cellalignment295" headers="r8c1-t6 r1c3-t6">
<p>Matches at least <code dir="ltr"><span class="codeinlineitalic">m</span></code> but not more than <code dir="ltr"><span class="codeinlineitalic">n</span></code> occurrences of the preceding subexpression (greedy<a id="sthref466" href="#sthref466" onclick="footdisplay(1,&#34;A \u003cspan class=\&#34;bold\&#34;\u003egreedy\u003c/span\u003e operator matches as many occurrences as possible while allowing the rest of the match to succeed. To make the operator nongreedy, follow it with the nongreedy modifier (\u003ccode dir=\&#34;ltr\&#34;\u003e?\u003c/code\u003e) (see \u003ca target=\&#34;adfns_regexp\&#34; href=\&#34;#CHDDGICJ\&#34;\u003eTable 8-5\u003c/a\u003e).&#34;)"><sup class="footnotenumber">Footref&nbsp;1</sup></a>).</p>
</td>
<td class="cellalignment295" headers="r8c1-t6 r1c4-t6">
<p>The expression <code dir="ltr"><span class="codeinlinebold">a{3,5}</span></code> matches the strings <code dir="ltr">aaa</code>, <code dir="ltr">aaaa</code>, and <code dir="ltr">aaaaa</code>, but does not match <code dir="ltr">aa</code> or <code dir="ltr">aaaaaa</code>.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r9c1-t6" headers="r1c1-t6">
<p><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">char</span></code><code dir="ltr">...]</code></p>
</td>
<td class="cellalignment295" headers="r9c1-t6 r1c2-t6">
<p>Matching Character List</p>
</td>
<td class="cellalignment295" headers="r9c1-t6 r1c3-t6">
<p>Matches any single character in the list within the brackets. In the list, all operators except these are treated as literals:</p>
<ul>
<li>
<p>Range operator: <code dir="ltr">-</code></p>
</li>
<li>
<p>POSIX character class: <code dir="ltr">[: :]</code></p>
</li>
<li>
<p>POSIX collation element: <code dir="ltr">[. .]</code></p>
</li>
<li>
<p>POSIX character equivalence class: <code dir="ltr">[= =]</code></p>
</li>
</ul>
<p>A dash (<code dir="ltr">-</code>) is a literal when it occurs first or last in the list, or as an ending range point in a range expression, as in <code dir="ltr">[#--]</code>. A right bracket (<code dir="ltr">]</code>) is treated as a literal if it occurs first in the list.</p>
<p><span class="bold">Note:</span> In the POSIX standard, a range includes all collation elements between the start and end of the range in the linguistic definition of the current locale. Thus, ranges are linguistic rather than byte value ranges; the semantics of the range expression are independent of the character set. In Oracle Database, the linguistic range is determined by the <code dir="ltr">NLS_SORT</code> initialization parameter.</p>
</td>
<td class="cellalignment295" headers="r9c1-t6 r1c4-t6">
<p>The expression <code dir="ltr"><span class="codeinlinebold">[abc]</span></code> matches the first character in the strings <code dir="ltr">all</code>, <code dir="ltr">bill</code>, and <code dir="ltr">cold</code>, but does not match any characters in <code dir="ltr">doll</code>.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r10c1-t6" headers="r1c1-t6">
<p><code dir="ltr">[^</code><code dir="ltr"><span class="codeinlineitalic">char</span></code><code dir="ltr">...]</code></p>
</td>
<td class="cellalignment295" headers="r10c1-t6 r1c2-t6">
<p>Nonmatching Character List</p>
</td>
<td class="cellalignment295" headers="r10c1-t6 r1c3-t6">
<p>Matches any single character <span class="italic">not</span> in the list within the brackets.</p>
<p>For information about operators and ranges in the character list, see the description of the Matching Character List operator.</p>
</td>
<td class="cellalignment295" headers="r10c1-t6 r1c4-t6">
<p>The expression <code dir="ltr"><span class="codeinlinebold">[^abc]def</span></code> matches the string <code dir="ltr">xdef</code>, but not <code dir="ltr">adef</code>, <code dir="ltr">bdef</code>, or <code dir="ltr">cdef</code>.</p>
<p>The expression <code dir="ltr"><span class="codeinlinebold">[^a-i]x</span></code> matches the string <code dir="ltr">jx</code>, but does not match <code dir="ltr">ax</code>, <code dir="ltr">fx</code>, or <code dir="ltr">ix</code>.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r11c1-t6" headers="r1c1-t6">
<p><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">alt1</span></code> <code dir="ltr">|</code><code dir="ltr"><span class="codeinlineitalic">alt2</span></code><code dir="ltr">]</code></p>
</td>
<td class="cellalignment295" headers="r11c1-t6 r1c2-t6">
<p>Or</p>
</td>
<td class="cellalignment295" headers="r11c1-t6 r1c3-t6">
<p>Matches either alternative.</p>
</td>
<td class="cellalignment295" headers="r11c1-t6 r1c4-t6">
<p>The expression <code dir="ltr"><span class="codeinlinebold">a|b</span></code> matches the character <code dir="ltr">a</code> or <code dir="ltr">b</code>.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r12c1-t6" headers="r1c1-t6">
<p><code dir="ltr">(</code><code dir="ltr"><span class="codeinlineitalic">expr</span></code><code dir="ltr">)</code></p>
</td>
<td class="cellalignment295" headers="r12c1-t6 r1c2-t6">
<p>Subexpression</p>
<p>Grouping</p>
</td>
<td class="cellalignment295" headers="r12c1-t6 r1c3-t6">
<p>Treats the expression within the parentheses as a unit. The expression can be a string or a complex expression containing operators.</p>
<p>You can refer to a subexpression in a back reference.</p>
</td>
<td class="cellalignment295" headers="r12c1-t6 r1c4-t6">
<p>The expression <code dir="ltr"><span class="codeinlinebold">(abc)?def</span></code> matches the strings <code dir="ltr">abcdef</code> and <code dir="ltr">def</code>, but does not match <code dir="ltr">abcdefg</code> or <code dir="ltr">xdef</code>.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r13c1-t6" headers="r1c1-t6">
<p><code dir="ltr">\</code><code dir="ltr"><span class="codeinlineitalic">n</span></code></p>
</td>
<td class="cellalignment295" headers="r13c1-t6 r1c2-t6">
<p>Back Reference</p>
</td>
<td class="cellalignment295" headers="r13c1-t6 r1c3-t6">
<p>Matches the <span class="italic">n</span><sup>th</sup> preceding subexpression, where <code dir="ltr"><span class="codeinlineitalic">n</span></code> is an integer from 1 through 9. A back reference counts subexpressions from left to right, starting with the opening parenthesis of each preceding subexpression. The expression is invalid if fewer than <span class="italic">n</span> subexpressions precede <code dir="ltr">\</code><code dir="ltr"><span class="codeinlineitalic">n</span></code>.</p>
<p>A back reference lets you search for a repeated string without knowing what it is.</p>
<p>For the <a id="sthref467"></a><code dir="ltr">REGEXP_REPLACE</code> function, Oracle SQL supports back references in both the regular expression pattern and the replacement string.</p>
</td>
<td class="cellalignment295" headers="r13c1-t6 r1c4-t6">
<p>The expression <code dir="ltr"><span class="codeinlinebold">(abc|def)xy\1</span></code> matches the strings <code dir="ltr">abcxyabc</code> and <code dir="ltr">defxydef</code>, but does not match <code dir="ltr">abcxydef</code> or <code dir="ltr">abcxy</code>.</p>
<p>The expression <code dir="ltr"><span class="codeinlinebold">^(.*)\1$</span></code> matches a line consisting of two adjacent instances of the same string.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r14c1-t6" headers="r1c1-t6">
<p><code dir="ltr">\</code></p>
</td>
<td class="cellalignment295" headers="r14c1-t6 r1c2-t6">
<p>Escape Character</p>
</td>
<td class="cellalignment295" headers="r14c1-t6 r1c3-t6">
<p>Treats the subsequent character as a literal.</p>
<p>A backslash (\) lets you search for a character that would otherwise be treated as a metacharacter. Use consecutive backslashes (<code dir="ltr">\\</code>) to match the backslash literal itself.</p>
</td>
<td class="cellalignment295" headers="r14c1-t6 r1c4-t6">
<p>The expression <code dir="ltr"><span class="codeinlinebold">abc\+def</span></code> matches the string <code dir="ltr">abc+def</code>, but does not match <code dir="ltr">abcdef</code> or <code dir="ltr">abccdef</code>.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r15c1-t6" headers="r1c1-t6">
<p><code dir="ltr">^</code></p>
</td>
<td class="cellalignment295" headers="r15c1-t6 r1c2-t6">
<p>Beginning-of-Line Anchor</p>
</td>
<td class="cellalignment295" headers="r15c1-t6 r1c3-t6">
<p><span class="bold">Default mode:</span> Matches the beginning of a string.</p>
<p><span class="bold">Multiline mode:</span><a id="CHDHAGGI" href="#CHDHAGGI" onclick="footdisplay(2,&#34;Specify multiline mode with the pattern-matching option \u003ccode dir=\&#34;ltr\&#34;\u003em\u003c/code\u003e, described in \u003ca target=\&#34;adfns_regexp\&#34; href=\&#34;#CHDHFCFC\&#34;\u003eTable 8-2\u003c/a\u003e.&#34;)"><sup class="tablefootnote">Foot&nbsp;2&nbsp;</sup></a> Matches the beginning of any line the source string.</p>
</td>
<td class="cellalignment295" headers="r15c1-t6 r1c4-t6">
<p>The expression <code dir="ltr"><span class="codeinlinebold">^def</span></code> matches the substring <code dir="ltr">def</code> in the string <code dir="ltr">defghi</code> but not in the string <code dir="ltr">abcdef</code>.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r16c1-t6" headers="r1c1-t6">
<p><code dir="ltr">$</code></p>
</td>
<td class="cellalignment295" headers="r16c1-t6 r1c2-t6">
<p>End-of-Line Anchor</p>
</td>
<td class="cellalignment295" headers="r16c1-t6 r1c3-t6">
<p><span class="bold">Default mode:</span> Matches the end of a string.</p>
<p><span class="bold">Multiline mode:</span><a id="sthref468" href="#sthref468" onclick="footdisplay(2,&#34;Specify multiline mode with the pattern-matching option \u003ccode dir=\&#34;ltr\&#34;\u003em\u003c/code\u003e, described in \u003ca target=\&#34;adfns_regexp\&#34; href=\&#34;#CHDHFCFC\&#34;\u003eTable 8-2\u003c/a\u003e.&#34;)"><sup class="footnotenumber">Footref&nbsp;2</sup></a> Matches the end of any line the source string.</p>
</td>
<td class="cellalignment295" headers="r16c1-t6 r1c4-t6">
<p>The expression <code dir="ltr"><span class="codeinlinebold">def$</span></code> matches the substring <code dir="ltr">def</code> in the string <code dir="ltr">abcdef</code> but not in the string <code dir="ltr">defghi</code>.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r17c1-t6" headers="r1c1-t6">
<p><code dir="ltr">[:</code><code dir="ltr"><span class="codeinlineitalic">class</span></code><code dir="ltr">:]</code></p>
</td>
<td class="cellalignment295" headers="r17c1-t6 r1c2-t6">
<p>POSIX Character Class</p>
</td>
<td class="cellalignment295" headers="r17c1-t6 r1c3-t6">
<p>Matches any character in the specified POSIX character class (such as uppercase characters, digits, or punctuation characters).</p>
<p><span class="bold">Note:</span> In English regular expressions, range expressions often indicate a character class. For example, <code dir="ltr">[a-z]</code> indicates any lowercase character. This convention is not useful in multilingual environments, where the first and last character of a given character class might not be the same in all languages.</p>
</td>
<td class="cellalignment295" headers="r17c1-t6 r1c4-t6">
<p>The expression <code dir="ltr"><span class="codeinlinebold">[:upper:]+</span></code>, which specifies one or more consecutive uppercase characters, matches the substring <code dir="ltr">DEF</code> in the string <code dir="ltr">abcDEFghi</code>, but does not match any substring in <code dir="ltr">abcdefghi</code>.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r18c1-t6" headers="r1c1-t6">
<p><code dir="ltr">[.</code><code dir="ltr"><span class="codeinlineitalic">element</span></code><code dir="ltr">.]</code></p>
</td>
<td class="cellalignment295" headers="r18c1-t6 r1c2-t6">
<p>POSIX Collating Element Operator</p>
</td>
<td class="cellalignment295" headers="r18c1-t6 r1c3-t6">
<p>Specifies a collating element defined in the current locale. The <code dir="ltr">NLS_SORT</code> initialization parameter determines the supported collation elements.</p>
<p>This syntax lets you use a multicharacter collating element where otherwise only single-character collating elements are allowed. For example, you can ensure that the collating element <code dir="ltr">ch</code>, when defined in a locale such as Traditional Spanish, is treated as one character in operations that depend on the ordering of characters.</p>
</td>
<td class="cellalignment295" headers="r18c1-t6 r1c4-t6">
<p>The expression <code dir="ltr"><span class="codeinlinebold">[.ch.]</span></code>, which specifies the collating element <code dir="ltr">ch</code>, matches <code dir="ltr">ch</code> in the string <code dir="ltr">chabc</code>, but does not match any substring in <code dir="ltr">cdefg</code>.</p>
<p>The expression <code dir="ltr"><span class="codeinlinebold">[a-[.ch.]]</span></code> specifies the range from <code dir="ltr">a</code> through <code dir="ltr">ch</code>.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r19c1-t6" headers="r1c1-t6">
<p><code dir="ltr">[=</code><code dir="ltr"><span class="codeinlineitalic">char</span></code><code dir="ltr">=]</code></p>
</td>
<td class="cellalignment295" headers="r19c1-t6 r1c2-t6">
<p>POSIX Character Equivalence Class</p>
</td>
<td class="cellalignment295" headers="r19c1-t6 r1c3-t6">
<p>Matches all characters that belong to the same POSIX character equivalence class as the specified character, in the current locale.</p>
<p>This syntax must appear within a character list; that is, it must be nested within the brackets for a character list.</p>
<p>Character equivalents depend on how canonical rules are defined for your database locale. For details, see <a class="olink NLSPG305" href="../NLSPG/ch5lingsort.htm#NLSPG305"><span class="italic">Oracle Database Globalization Support Guide</span></a>.</p>
</td>
<td class="cellalignment295" headers="r19c1-t6 r1c4-t6">
<p>The expression <code dir="ltr"><span class="codeinlinebold">[[=n=]]</span></code>, which specifies characters equivalent to <code dir="ltr">n</code> in a Spanish locale, matches both <code dir="ltr">N</code> and <code dir="ltr">&ntilde;</code> in the string <code dir="ltr">El Ni&ntilde;o</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformalwidemax" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>A <span class="bold">greedy</span> operator matches as many occurrences as possible while allowing the rest of the match to succeed. To make the operator nongreedy, follow it with the nongreedy modifier (<code dir="ltr">?</code>) (see <a href="#CHDDGICJ">Table 8-5</a>).</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;2&nbsp;</sup>Specify multiline mode with the pattern-matching option <code dir="ltr">m</code>, described in <a href="#CHDHFCFC">Table 8-2</a>.</p>
</div>
<!-- class="sect2" -->
<a id="i690823"></a>
<div id="ADFNS233" class="sect2">
<h3 class="sect2"><span class="secnum">8.4.2</span> Oracle SQL Multilingual Extensions to POSIX Standard</h3>
<p>When applied to multilingual data, Oracle SQL POSIX operators extend beyond the matching capabilities specified in the <a id="sthref469"></a>POSIX standard.</p>
<p><a href="#g692318">Table 8-4</a> shows, for each POSIX operator, which POSIX standards define its syntax and whether Oracle SQL extends its semantics for handling multilingual data. The POSIX standards are Basic Regular Expression (BRE) and Extended Regular Expression (ERE).</p>
<div id="ADFNS234" class="tblhruleformal">
<p class="titleintable"><a id="sthref470"></a><a id="g692318"></a>Table 8-4 POSIX Operators and Multilingual Operator Relationships</p>
<table class="cellalignment296" title="POSIX Operators and Multilingual Operator Relationships" summary="This table is described in the preceding text." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t7">Operator</th>
<th class="cellalignment294" id="r1c2-t7">POSIX BRE Syntax</th>
<th class="cellalignment294" id="r1c3-t7">POSIX ERE Syntax</th>
<th class="cellalignment294" id="r1c4-t7">Multilingual Enhancement</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t7" headers="r1c1-t7">
<p><code dir="ltr">\</code></p>
</td>
<td class="cellalignment295" headers="r2c1-t7 r1c2-t7">
<p>Yes</p>
</td>
<td class="cellalignment295" headers="r2c1-t7 r1c3-t7">
<p>Yes</p>
</td>
<td class="cellalignment295" headers="r2c1-t7 r1c4-t7">
<p>--</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t7" headers="r1c1-t7">
<p><code dir="ltr">*</code></p>
</td>
<td class="cellalignment295" headers="r3c1-t7 r1c2-t7">
<p>Yes</p>
</td>
<td class="cellalignment295" headers="r3c1-t7 r1c3-t7">
<p>Yes</p>
</td>
<td class="cellalignment295" headers="r3c1-t7 r1c4-t7">
<p>--</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t7" headers="r1c1-t7">
<p><code dir="ltr">+</code></p>
</td>
<td class="cellalignment295" headers="r4c1-t7 r1c2-t7">
<p>--</p>
</td>
<td class="cellalignment295" headers="r4c1-t7 r1c3-t7">
<p>Yes</p>
</td>
<td class="cellalignment295" headers="r4c1-t7 r1c4-t7">
<p>--</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t7" headers="r1c1-t7">
<p><code dir="ltr">?</code></p>
</td>
<td class="cellalignment295" headers="r5c1-t7 r1c2-t7">
<p>--</p>
</td>
<td class="cellalignment295" headers="r5c1-t7 r1c3-t7">
<p>Yes</p>
</td>
<td class="cellalignment295" headers="r5c1-t7 r1c4-t7">
<p>--</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r6c1-t7" headers="r1c1-t7">
<p><code dir="ltr">|</code></p>
</td>
<td class="cellalignment295" headers="r6c1-t7 r1c2-t7">
<p>--</p>
</td>
<td class="cellalignment295" headers="r6c1-t7 r1c3-t7">
<p>Yes</p>
</td>
<td class="cellalignment295" headers="r6c1-t7 r1c4-t7">
<p>--</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r7c1-t7" headers="r1c1-t7">
<p><code dir="ltr">^</code></p>
</td>
<td class="cellalignment295" headers="r7c1-t7 r1c2-t7">
<p>Yes</p>
</td>
<td class="cellalignment295" headers="r7c1-t7 r1c3-t7">
<p>Yes</p>
</td>
<td class="cellalignment295" headers="r7c1-t7 r1c4-t7">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r8c1-t7" headers="r1c1-t7">
<p><code dir="ltr">$</code></p>
</td>
<td class="cellalignment295" headers="r8c1-t7 r1c2-t7">
<p>Yes</p>
</td>
<td class="cellalignment295" headers="r8c1-t7 r1c3-t7">
<p>Yes</p>
</td>
<td class="cellalignment295" headers="r8c1-t7 r1c4-t7">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r9c1-t7" headers="r1c1-t7">
<p><code dir="ltr">.</code></p>
</td>
<td class="cellalignment295" headers="r9c1-t7 r1c2-t7">
<p>Yes</p>
</td>
<td class="cellalignment295" headers="r9c1-t7 r1c3-t7">
<p>Yes</p>
</td>
<td class="cellalignment295" headers="r9c1-t7 r1c4-t7">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r10c1-t7" headers="r1c1-t7">
<p><code dir="ltr">[ ]</code></p>
</td>
<td class="cellalignment295" headers="r10c1-t7 r1c2-t7">
<p>Yes</p>
</td>
<td class="cellalignment295" headers="r10c1-t7 r1c3-t7">
<p>Yes</p>
</td>
<td class="cellalignment295" headers="r10c1-t7 r1c4-t7">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r11c1-t7" headers="r1c1-t7">
<p><code dir="ltr">( )</code></p>
</td>
<td class="cellalignment295" headers="r11c1-t7 r1c2-t7">
<p>Yes</p>
</td>
<td class="cellalignment295" headers="r11c1-t7 r1c3-t7">
<p>Yes</p>
</td>
<td class="cellalignment295" headers="r11c1-t7 r1c4-t7">
<p>--</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r12c1-t7" headers="r1c1-t7">
<p><code dir="ltr">{m}</code></p>
</td>
<td class="cellalignment295" headers="r12c1-t7 r1c2-t7">
<p>Yes</p>
</td>
<td class="cellalignment295" headers="r12c1-t7 r1c3-t7">
<p>Yes</p>
</td>
<td class="cellalignment295" headers="r12c1-t7 r1c4-t7">
<p>--</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r13c1-t7" headers="r1c1-t7">
<p><code dir="ltr">{m,}</code></p>
</td>
<td class="cellalignment295" headers="r13c1-t7 r1c2-t7">
<p>Yes</p>
</td>
<td class="cellalignment295" headers="r13c1-t7 r1c3-t7">
<p>Yes</p>
</td>
<td class="cellalignment295" headers="r13c1-t7 r1c4-t7">
<p>--</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r14c1-t7" headers="r1c1-t7">
<p><code dir="ltr">{m,n}</code></p>
</td>
<td class="cellalignment295" headers="r14c1-t7 r1c2-t7">
<p>Yes</p>
</td>
<td class="cellalignment295" headers="r14c1-t7 r1c3-t7">
<p>Yes</p>
</td>
<td class="cellalignment295" headers="r14c1-t7 r1c4-t7">
<p>--</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r15c1-t7" headers="r1c1-t7">
<p><code dir="ltr">\n</code></p>
</td>
<td class="cellalignment295" headers="r15c1-t7 r1c2-t7">
<p>Yes</p>
</td>
<td class="cellalignment295" headers="r15c1-t7 r1c3-t7">
<p>Yes</p>
</td>
<td class="cellalignment295" headers="r15c1-t7 r1c4-t7">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r16c1-t7" headers="r1c1-t7">
<p><code dir="ltr">[..]</code></p>
</td>
<td class="cellalignment295" headers="r16c1-t7 r1c2-t7">
<p>Yes</p>
</td>
<td class="cellalignment295" headers="r16c1-t7 r1c3-t7">
<p>Yes</p>
</td>
<td class="cellalignment295" headers="r16c1-t7 r1c4-t7">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r17c1-t7" headers="r1c1-t7">
<p><code dir="ltr">[::]</code></p>
</td>
<td class="cellalignment295" headers="r17c1-t7 r1c2-t7">
<p>Yes</p>
</td>
<td class="cellalignment295" headers="r17c1-t7 r1c3-t7">
<p>Yes</p>
</td>
<td class="cellalignment295" headers="r17c1-t7 r1c4-t7">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r18c1-t7" headers="r1c1-t7">
<p><code dir="ltr">[==]</code></p>
</td>
<td class="cellalignment295" headers="r18c1-t7 r1c2-t7">
<p>Yes</p>
</td>
<td class="cellalignment295" headers="r18c1-t7 r1c3-t7">
<p>Yes</p>
</td>
<td class="cellalignment295" headers="r18c1-t7 r1c4-t7">
<p>Yes</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p><a id="sthref471"></a>Multilingual data might have multibyte characters. Oracle Database lets you enter multibyte characters directly (if you have a direct input method) or use functions to compose them. You cannot use the Unicode hexadecimal encoding value of the form <code dir="ltr">\</code><code dir="ltr"><span class="codeinlineitalic">xxxx</span></code>. Oracle Database evaluates the characters based on the byte values used to encode the character, not the graphical representation of the character.</p>
</div>
<!-- class="sect2" -->
<a id="CHDGHBHF"></a>
<div id="ADFNS235" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">8.4.3</span> Oracle SQL PERL-Influenced Extensions to POSIX Standard</h3>
<p>Oracle SQL supports some commonly used <a id="sthref472"></a>PERL regular expression operators that are not included in the POSIX standard but do not conflict with it.</p>
<p><a href="#CHDDGICJ">Table 8-5</a> summarizes the PERL-influenced operators that Oracle SQL supports.</p>
<div class="infobox-note">
<p class="notep1">Caution:</p>
PERL character class matching is based on the locale model of the operating system, whereas Oracle SQL regular expressions are based on the language-specific data of the database. In general, you cannot expect a regular expression involving locale data to produce the same results in PERL and Oracle SQL.</div>
<div id="ADFNS236" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref473"></a><a id="CHDDGICJ"></a>Table 8-5 PERL-Influenced Operators in Oracle SQL Regular Expressions</p>
<table class="cellalignment296" title="PERL-Influenced Operators in Oracle SQL Regular Expressions" summary="Describes the Perl-influenced extensions in Oracle regular expressions." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t9">Operator Syntax</th>
<th class="cellalignment294" id="r1c2-t9">Description</th>
<th class="cellalignment294" id="r1c3-t9">Examples</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t9" headers="r1c1-t9">
<p><code dir="ltr">\d</code></p>
</td>
<td class="cellalignment295" headers="r2c1-t9 r1c2-t9">
<p>Matches a digit character.</p>
<p>Equivalent to POSIX expression <code dir="ltr">[[:digit:]]</code>.</p>
</td>
<td class="cellalignment295" headers="r2c1-t9 r1c3-t9">
<p>The expression <code dir="ltr"><span class="codeinlinebold">^\(\d{3}\) \d{3}-\d{4}$</span></code> matches <code dir="ltr">(650) 555-0100</code> but does not match <code dir="ltr">650-555-0100</code>.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t9" headers="r1c1-t9">
<p><code dir="ltr">\D</code></p>
</td>
<td class="cellalignment295" headers="r3c1-t9 r1c2-t9">
<p>Matches a nondigit character.</p>
<p>Equivalent to POSIX expression <code dir="ltr">[^[:digit:]]</code>.</p>
</td>
<td class="cellalignment295" headers="r3c1-t9 r1c3-t9">
<p>The expression <code dir="ltr"><span class="codeinlinebold">\w\d\D</span></code> matches <code dir="ltr">b2b</code> and <code dir="ltr">b2_</code> but does not match <code dir="ltr">b22</code>.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t9" headers="r1c1-t9">
<p><code dir="ltr">\w</code></p>
</td>
<td class="cellalignment295" headers="r4c1-t9 r1c2-t9">
<p>Matches a word character (that is, an alphanumeric or underscore (<code dir="ltr">_</code>) character).</p>
<p>Equivalent to POSIX expression <code dir="ltr">[[:alnum:]_]</code>.</p>
</td>
<td class="cellalignment295" headers="r4c1-t9 r1c3-t9">
<p>The expression <code dir="ltr"><span class="codeinlinebold">\w+@\w+(\.\w+)+</span></code> matches the string <code dir="ltr">jdoe@company.co.uk</code> but does not match <code dir="ltr">jdoe@company</code>.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t9" headers="r1c1-t9">
<p><code dir="ltr">\W</code></p>
</td>
<td class="cellalignment295" headers="r5c1-t9 r1c2-t9">
<p>Matches a nonword character.</p>
<p>Equivalent to POSIX expression <code dir="ltr">[^[:alnum:]_]</code>.</p>
</td>
<td class="cellalignment295" headers="r5c1-t9 r1c3-t9">
<p>The expression <code dir="ltr"><span class="codeinlinebold">\w+\W\s\w+</span></code> matches the string <code dir="ltr">to: bill</code> but does not match <code dir="ltr">to bill</code>.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r6c1-t9" headers="r1c1-t9">
<p><code dir="ltr">\s</code></p>
</td>
<td class="cellalignment295" headers="r6c1-t9 r1c2-t9">
<p>Matches a whitespace character.</p>
<p>Equivalent to POSIX expression <code dir="ltr">[[:space:]]</code>.</p>
</td>
<td class="cellalignment295" headers="r6c1-t9 r1c3-t9">
<p>The expression <code dir="ltr"><span class="codeinlinebold">\(\w\s\w\s\)</span></code> matches the string <code dir="ltr">(a b )</code> but does not match <code dir="ltr">(ab)</code> or <code dir="ltr">(a,b.)</code>.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r7c1-t9" headers="r1c1-t9">
<p><code dir="ltr">\S</code></p>
</td>
<td class="cellalignment295" headers="r7c1-t9 r1c2-t9">
<p>Matches a nonwhitespace character.</p>
<p>Equivalent to POSIX expression <code dir="ltr">[^[:space:]]</code>.</p>
</td>
<td class="cellalignment295" headers="r7c1-t9 r1c3-t9">
<p>The expression <code dir="ltr"><span class="codeinlinebold">\(\w\S\w\S\)</span></code> matches the strings <code dir="ltr">(abde)</code> and <code dir="ltr">(a,b.)</code> but does not match <code dir="ltr">(a b d e)</code>.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r8c1-t9" headers="r1c1-t9">
<p><code dir="ltr">\A</code></p>
</td>
<td class="cellalignment295" headers="r8c1-t9 r1c2-t9">
<p>Matches the beginning of a string, in either single-line or multiline mode.</p>
<p>Not equivalent to POSIX operator <code dir="ltr">^</code>.</p>
</td>
<td class="cellalignment295" headers="r8c1-t9 r1c3-t9">
<p>The expression <code dir="ltr"><span class="codeinlinebold">\AL</span></code> matches only the first <code dir="ltr">L</code> in the string <code dir="ltr">Line1\nLine2\n</code> (where <code dir="ltr">\n</code> is the newline character), in either single-line or multiline mode.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r9c1-t9" headers="r1c1-t9">
<p><code dir="ltr">\Z</code></p>
</td>
<td class="cellalignment295" headers="r9c1-t9 r1c2-t9">
<p>Matches the end of a string, in either single-line or multiline mode.</p>
<p>Not equivalent to POSIX operator <code dir="ltr">$</code>.</p>
</td>
<td class="cellalignment295" headers="r9c1-t9 r1c3-t9">
<p>The expression <code dir="ltr"><span class="codeinlinebold">\s\Z</span></code> matches the last space in the string <code dir="ltr">L i n e \n</code> (where <code dir="ltr">\n</code> is the newline character), in either single-line or multiline mode.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r10c1-t9" headers="r1c1-t9">
<p><code dir="ltr">\z</code></p>
</td>
<td class="cellalignment295" headers="r10c1-t9 r1c2-t9">
<p>Matches the end of a string, in either single-line or multiline mode.</p>
<p>Not equivalent to POSIX operator <code dir="ltr">$</code>.</p>
</td>
<td class="cellalignment295" headers="r10c1-t9 r1c3-t9">
<p>The expression <code dir="ltr"><span class="codeinlinebold">\s\z</span></code> matches the newline character (<code dir="ltr">\n</code>) in the string <code dir="ltr">L i n e \n</code>, in either single-line or multiline mode.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r11c1-t9" headers="r1c1-t9">
<p><code dir="ltr">+?</code></p>
</td>
<td class="cellalignment295" headers="r11c1-t9 r1c2-t9">
<p>Matches one or more occurrences of the preceding subexpression (<a id="sthref474"></a><a id="sthref475"></a>nongreedy<a id="CHDIBFIH" href="#CHDIBFIH" onclick="footdisplay(1,&#34;A \u003cspan class=\&#34;bold\&#34;\u003enongreedy\u003c/span\u003e operator matches as few occurrences as possible while allowing the rest of the match to succeed. To make the operator greedy, omit the nongreedy modifier (\u003ccode dir=\&#34;ltr\&#34;\u003e?\u003c/code\u003e).&#34;)"><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a>).</p>
</td>
<td class="cellalignment295" headers="r11c1-t9 r1c3-t9">
<p>The expression <code dir="ltr"><span class="codeinlinebold">\w+?x\w</span></code> matches <code dir="ltr"><span class="codeinlinebold">ab</span></code><code dir="ltr">xc</code> in the string <code dir="ltr">abxcxd</code> (and the greedy expression <code dir="ltr"><span class="codeinlinebold">\w+x\w</span></code> matches <code dir="ltr"><span class="codeinlinebold">abxc</span></code><code dir="ltr">xd</code>).</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r12c1-t9" headers="r1c1-t9">
<p><code dir="ltr">*?</code></p>
</td>
<td class="cellalignment295" headers="r12c1-t9 r1c2-t9">
<p>Matches zero or more occurrences of the preceding subexpression (nongreedy<a id="sthref476" href="#sthref476" onclick="footdisplay(1,&#34;A \u003cspan class=\&#34;bold\&#34;\u003enongreedy\u003c/span\u003e operator matches as few occurrences as possible while allowing the rest of the match to succeed. To make the operator greedy, omit the nongreedy modifier (\u003ccode dir=\&#34;ltr\&#34;\u003e?\u003c/code\u003e).&#34;)"><sup class="footnotenumber">Footref&nbsp;1</sup></a>). Matches the empty string whenever possible.</p>
</td>
<td class="cellalignment295" headers="r12c1-t9 r1c3-t9">
<p>The expression <code dir="ltr"><span class="codeinlinebold">\w*?x\w</span></code> matches <code dir="ltr">xa</code> in the string <code dir="ltr">xaxbxc</code> (and the greedy expression <code dir="ltr"><span class="codeinlinebold">\w*x\w</span></code> matches <code dir="ltr"><span class="codeinlinebold">xaxb</span></code><code dir="ltr">xc</code>.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r13c1-t9" headers="r1c1-t9">
<p><code dir="ltr">??</code></p>
</td>
<td class="cellalignment295" headers="r13c1-t9 r1c2-t9">
<p>Matches zero or one occurrences of the preceding subexpression (nongreedy<a id="sthref477" href="#sthref477" onclick="footdisplay(1,&#34;A \u003cspan class=\&#34;bold\&#34;\u003enongreedy\u003c/span\u003e operator matches as few occurrences as possible while allowing the rest of the match to succeed. To make the operator greedy, omit the nongreedy modifier (\u003ccode dir=\&#34;ltr\&#34;\u003e?\u003c/code\u003e).&#34;)"><sup class="footnotenumber">Footref&nbsp;1</sup></a>). Matches the empty string whenever possible.</p>
</td>
<td class="cellalignment295" headers="r13c1-t9 r1c3-t9">
<p>The expression <code dir="ltr"><span class="codeinlinebold">a??aa</span></code> matches <code dir="ltr">aa</code> in the string <code dir="ltr">aaaa</code> (and the greedy expression <code dir="ltr"><span class="codeinlinebold">a?aa</span></code> matches <code dir="ltr"><span class="codeinlinebold">a</span></code><code dir="ltr">aa</code>).</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r14c1-t9" headers="r1c1-t9">
<p><code dir="ltr">{</code><code dir="ltr"><span class="codeinlineitalic">m</span></code><code dir="ltr">}?</code></p>
</td>
<td class="cellalignment295" headers="r14c1-t9 r1c2-t9">
<p>Matches exactly <code dir="ltr">m</code> occurrences of the preceding subexpression (nongreedy<a id="sthref478" href="#sthref478" onclick="footdisplay(1,&#34;A \u003cspan class=\&#34;bold\&#34;\u003enongreedy\u003c/span\u003e operator matches as few occurrences as possible while allowing the rest of the match to succeed. To make the operator greedy, omit the nongreedy modifier (\u003ccode dir=\&#34;ltr\&#34;\u003e?\u003c/code\u003e).&#34;)"><sup class="footnotenumber">Footref&nbsp;1</sup></a>).</p>
</td>
<td class="cellalignment295" headers="r14c1-t9 r1c3-t9">
<p>The expression <code dir="ltr"><span class="codeinlinebold">(a|aa){2}?</span></code> matches <code dir="ltr">aa</code> in the string <code dir="ltr">aaaa</code> (and the greedy expression <code dir="ltr"><span class="codeinlinebold">(a|aa){2}</span></code> matches <code dir="ltr">aaaa</code>.</p>
<p>Both the expression <code dir="ltr"><span class="codeinlinebold">b{2}?</span></code> and the greedy expression <code dir="ltr"><span class="codeinlinebold">b{2}</span></code> match <code dir="ltr">bb</code> in the string <code dir="ltr">bbbb</code>.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r15c1-t9" headers="r1c1-t9">
<p><code dir="ltr">{</code><code dir="ltr"><span class="codeinlineitalic">m</span></code><code dir="ltr">,}?</code></p>
</td>
<td class="cellalignment295" headers="r15c1-t9 r1c2-t9">
<p>Matches at least <code dir="ltr">m</code> occurrences of the preceding subexpression (nongreedy<a id="sthref479" href="#sthref479" onclick="footdisplay(1,&#34;A \u003cspan class=\&#34;bold\&#34;\u003enongreedy\u003c/span\u003e operator matches as few occurrences as possible while allowing the rest of the match to succeed. To make the operator greedy, omit the nongreedy modifier (\u003ccode dir=\&#34;ltr\&#34;\u003e?\u003c/code\u003e).&#34;)"><sup class="footnotenumber">Footref&nbsp;1</sup></a>).</p>
</td>
<td class="cellalignment295" headers="r15c1-t9 r1c3-t9">
<p>The expression <code dir="ltr"><span class="codeinlinebold">a{2,}?</span></code> matches <code dir="ltr">aa</code> in the string <code dir="ltr">aaaaa</code> (and the greedy expression <code dir="ltr"><span class="codeinlinebold">a{2,}</span></code> matches <code dir="ltr">aaaaa</code>.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r16c1-t9" headers="r1c1-t9">
<p><code dir="ltr">{</code><code dir="ltr"><span class="codeinlineitalic">m</span></code><code dir="ltr">,</code><code dir="ltr"><span class="codeinlineitalic">n</span></code><code dir="ltr">}?</code></p>
</td>
<td class="cellalignment295" headers="r16c1-t9 r1c2-t9">
<p>Matches at least <code dir="ltr">m</code> but not more than <code dir="ltr">n</code> occurrences of the preceding subexpression (nongreedy<a id="sthref480" href="#sthref480" onclick="footdisplay(1,&#34;A \u003cspan class=\&#34;bold\&#34;\u003enongreedy\u003c/span\u003e operator matches as few occurrences as possible while allowing the rest of the match to succeed. To make the operator greedy, omit the nongreedy modifier (\u003ccode dir=\&#34;ltr\&#34;\u003e?\u003c/code\u003e).&#34;)"><sup class="footnotenumber">Footref&nbsp;1</sup></a>). <code dir="ltr">{0,n}?</code> matches the empty string whenever possible.</p>
</td>
<td class="cellalignment295" headers="r16c1-t9 r1c3-t9">
<p>The expression <code dir="ltr"><span class="codeinlinebold">a{2,4}?</span></code> matches <code dir="ltr">aa</code> in the string <code dir="ltr">aaaaa</code> (and the greedy expression <code dir="ltr"><span class="codeinlinebold">a{2,4}</span></code> matches <code dir="ltr">aaaa</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformalwide" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>A <span class="bold">nongreedy</span> operator matches as few occurrences as possible while allowing the rest of the match to succeed. To make the operator greedy, omit the nongreedy modifier (<code dir="ltr">?</code>).</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDBCCDJ"></a>
<div id="ADFNS00402" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">8.5</span> Using Regular Expressions in SQL Statements: Scenarios</h2>
<p><a id="sthref481"></a>Scenarios:</p>
<ul>
<li>
<p><a href="#CHDJAGEF">Using a Constraint to Enforce a Phone Number Format</a></p>
</li>
<li>
<p><a href="#CHDHCIGH">Using Back References to Reposition Characters</a></p>
</li>
</ul>
<a id="CHDJAGEF"></a>
<div id="ADFNS238" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">8.5.1</span> Using a Constraint to Enforce a Phone Number Format</h3>
<p>Regular expressions are useful for enforcing constraints&mdash;for example, to ensure that phone numbers are entered into the database in a standard format. <a href="#CHDHIHII">Example 8-1</a> creates a <code dir="ltr">contacts</code> table and adds a <code dir="ltr">CHECK</code> constraint to the <code dir="ltr">p_number</code> column to enforce this format model:</p>
<pre dir="ltr">(XXX) XXX-XXXX
</pre>
<div id="ADFNS239" class="example">
<p class="titleinexample"><a id="CHDHIHII"></a>Example 8-1 Enforcing a Phone Number Format with Regular Expressions</p>
<pre dir="ltr">DROP TABLE contacts;
CREATE TABLE contacts (
  l_name    VARCHAR2(30),
  p_number  VARCHAR2(30)
  <span class="bold">CONSTRAINT c_contacts_pnf</span>
  <span class="bold">CHECK (REGEXP_LIKE (p_number, &#39;^\(\d{3}\) \d{3}-\d{4}$&#39;))</span>
);
</pre></div>
<!-- class="example" -->
<p><a href="#CHDEIEIC">Table 8-6</a> explains the elements of the regular expression.</p>
<div id="ADFNS240" class="tblhruleformal">
<p class="titleintable"><a id="sthref482"></a><a id="CHDEIEIC"></a>Table 8-6 Explanation of the Regular Expression Elements in <a href="#CHDHIHII">Example 8-1</a></p>
<table class="cellalignment296" title="Explanation of the Regular Expression Elements in Example 8-1" summary="This table explains the syntax elements used in the preceding example." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t10">Regular Expression Element</th>
<th class="cellalignment294" id="r1c2-t10">Matches . . .</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t10" headers="r1c1-t10">
<p><code dir="ltr">^</code></p>
</td>
<td class="cellalignment295" headers="r2c1-t10 r1c2-t10">
<p>The beginning of the string.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t10" headers="r1c1-t10">
<p><code dir="ltr">\(</code></p>
</td>
<td class="cellalignment295" headers="r3c1-t10 r1c2-t10">
<p>A left parenthesis. The backslash (<code dir="ltr">\</code>) is an escape character that indicates that the left parenthesis after it is a literal rather than a subexpression delimiter.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t10" headers="r1c1-t10">
<p><code dir="ltr">\d{3}</code></p>
</td>
<td class="cellalignment295" headers="r4c1-t10 r1c2-t10">
<p>Exactly three digits.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t10" headers="r1c1-t10">
<p><code dir="ltr">\)</code></p>
</td>
<td class="cellalignment295" headers="r5c1-t10 r1c2-t10">
<p>A right parenthesis. The backslash (<code dir="ltr">\</code>) is an escape character that indicates that the right parenthesis after it is a literal rather than a subexpression delimiter.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r6c1-t10" headers="r1c1-t10">
<p>space character</p>
</td>
<td class="cellalignment295" headers="r6c1-t10 r1c2-t10">
<p>A space character.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r7c1-t10" headers="r1c1-t10">
<p><code dir="ltr">\d{3}</code></p>
</td>
<td class="cellalignment295" headers="r7c1-t10 r1c2-t10">
<p>Exactly three digits.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r8c1-t10" headers="r1c1-t10">
<p><code dir="ltr">-</code></p>
</td>
<td class="cellalignment295" headers="r8c1-t10 r1c2-t10">
<p>A hyphen.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r9c1-t10" headers="r1c1-t10">
<p><code dir="ltr">\d{4}</code></p>
</td>
<td class="cellalignment295" headers="r9c1-t10 r1c2-t10">
<p>Exactly four digits.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r10c1-t10" headers="r1c1-t10">
<p><code dir="ltr">$</code></p>
</td>
<td class="cellalignment295" headers="r10c1-t10 r1c2-t10">
<p>The end of the string.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p><a href="#CHDBDIFJ">Example 8-2</a> shows some statements that correctly and incorrectly insert phone numbers into the <code dir="ltr">contacts</code> table.</p>
<div id="ADFNS241" class="example">
<p class="titleinexample"><a id="CHDBDIFJ"></a>Example 8-2 Inserting Phone Numbers in Correct and Incorrect Formats</p>
<p>These are correct:</p>
<pre dir="ltr">INSERT INTO contacts (p_number) VALUES(&#39;(650) 555-0100&#39;);
INSERT INTO contacts (p_number) VALUES(&#39;(215) 555-0100&#39;);
 
</pre>
<p>These generate <code dir="ltr">CHECK</code> constraint errors:</p>
<pre dir="ltr">INSERT INTO contacts (p_number) VALUES(&#39;650 555-0100&#39;);
INSERT INTO contacts (p_number) VALUES(&#39;650 555 0100&#39;);
INSERT INTO contacts (p_number) VALUES(&#39;650-555-0100&#39;);
INSERT INTO contacts (p_number) VALUES(&#39;(650)555-0100&#39;);
INSERT INTO contacts (p_number) VALUES(&#39; (650) 555-0100&#39;);
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CHDHCIGH"></a>
<div id="ADFNS242" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">8.5.2</span> Using Back References to Reposition Characters</h3>
<p>A back reference (described in <a href="#CHDIEGEI">Table 8-3</a>) stores the referenced subexpression in a temporary buffer. Therefore, you can use back references to reposition characters, as in <a href="#CHDICBBC">Example 8-3</a>. For an explanation of the elements of the regular expression in <a href="#CHDICBBC">Example 8-3</a>, see <a href="#CHDBIJBI">Table 8-7</a>.</p>
<div id="ADFNS243" class="example">
<p class="titleinexample"><a id="CHDICBBC"></a>Example 8-3 Using Back References to Reposition Characters</p>
<p>Create table and populate it with names in different formats:</p>
<pre dir="ltr">DROP TABLE famous_people;
CREATE TABLE famous_people (names VARCHAR2(20));
INSERT INTO famous_people (names) VALUES (&#39;John Quincy Adams&#39;);
INSERT INTO famous_people (names) VALUES (&#39;Harry S. Truman&#39;);
INSERT INTO famous_people (names) VALUES (&#39;John Adams&#39;);
INSERT INTO famous_people (names) VALUES (&#39; John Quincy Adams&#39;);
INSERT INTO famous_people (names) VALUES (&#39;John_Quincy_Adams&#39;);
</pre>
<p>SQL*Plus formatting command:</p>
<pre dir="ltr">COLUMN &#34;names after regexp&#34; FORMAT A20
</pre>
<p>For each name in the table whose format is &#34;first middle last&#34;, use back references to reposition characters so that the format becomes &#34;last, first middle&#34;:</p>
<pre dir="ltr">SELECT names &#34;names&#34;,
  <span class="bold">REGEXP_REPLACE(names, &#39;^(\S+)\s(\S+)\s(\S+)$&#39;, &#39;\3, \1 \2&#39;)</span>
    <span class="bold">AS &#34;names after regexp&#34;</span>
FROM famous_people
ORDER BY &#34;names&#34;;
 
</pre>
<p>Result:</p>
<pre dir="ltr">names                names after regexp
-------------------- --------------------
 John Quincy Adams    John Quincy Adams
Harry S. Truman      Truman, Harry S.
John Adams           John Adams
John Quincy Adams    Adams, John Quincy
John_Quincy_Adams    John_Quincy_Adams
 
5 rows selected.
</pre></div>
<!-- class="example" -->
<p><a href="#CHDBIJBI">Table 8-7</a> explains the elements of the regular expression.</p>
<div id="ADFNS244" class="tblhruleformal">
<p class="titleintable"><a id="sthref483"></a><a id="CHDBIJBI"></a>Table 8-7 Explanation of the Regular Expression Elements in <a href="#CHDICBBC">Example 8-3</a></p>
<table class="cellalignment296" title="Explanation of the Regular Expression Elements in Example 8-3" summary="This table describes the regular expression syntax elements used in the preceding example." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t11">Regular Expression Element</th>
<th class="cellalignment294" id="r1c2-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t11" headers="r1c1-t11">
<p><code dir="ltr">^</code></p>
</td>
<td class="cellalignment295" headers="r2c1-t11 r1c2-t11">
<p>Matches the beginning of the string.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t11" headers="r1c1-t11">
<p><code dir="ltr">$</code></p>
</td>
<td class="cellalignment295" headers="r3c1-t11 r1c2-t11">
<p>Matches the end of the string.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t11" headers="r1c1-t11">
<p><code dir="ltr">(\S+)</code></p>
</td>
<td class="cellalignment295" headers="r4c1-t11 r1c2-t11">
<p>Matches one or more nonspace characters. The parentheses are not escaped so they function as a grouping expression.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t11" headers="r1c1-t11">
<p><code dir="ltr">\s</code></p>
</td>
<td class="cellalignment295" headers="r5c1-t11 r1c2-t11">
<p>Matches a whitespace character.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r6c1-t11" headers="r1c1-t11">
<p><code dir="ltr">\1</code></p>
</td>
<td class="cellalignment295" headers="r6c1-t11 r1c2-t11">
<p>Substitutes the first subexpression, that is, the first group of parentheses in the matching pattern.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r7c1-t11" headers="r1c1-t11">
<p><code dir="ltr">\2</code></p>
</td>
<td class="cellalignment295" headers="r7c1-t11 r1c2-t11">
<p>Substitutes the second subexpression, that is, the second group of parentheses in the matching pattern.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r8c1-t11" headers="r1c1-t11">
<p><code dir="ltr">\3</code></p>
</td>
<td class="cellalignment295" headers="r8c1-t11 r1c2-t11">
<p>Substitutes the third subexpression, that is, the third group of parentheses in the matching pattern.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r9c1-t11" headers="r1c1-t11">
<p><code dir="ltr">,</code></p>
</td>
<td class="cellalignment295" headers="r9c1-t11 r1c2-t11">
<p>Inserts a comma character.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment286">
<tr>
<td class="cellalignment295">
<table class="cellalignment291">
<tr>
<td class="cellalignment290"><a href="adfns_sqltypes.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment290"><a href="adfns_indexes.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment298">
<table class="cellalignment289">
<tr>
<td class="cellalignment290"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment290"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment290"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment290"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment290"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment290"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>


</body></html>