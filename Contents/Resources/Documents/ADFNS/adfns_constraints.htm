<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-63"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Maintaining%20Data%20Integrity%20in%20Database%20Applications"></a><title>Maintaining Data Integrity in Database Applications</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1080"/>
<meta name="dcterms.created" content="2016-05-05T16:23:34Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Development Guide"/>
<meta name="dcterms.identifier" content="E41452-07"/>
<meta name="dcterms.isVersionOf" content="ADFNS"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="adfns_indexes.htm" title="Previous" type="text/html"/>
<link rel="Next" href="adfns_part_plsql.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41452-07.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">19/38</span> <!-- End Header -->
<div id="ADFNS004" class="chapter"><a id="g1023643"></a>
<h1 class="chapter"><span class="secnum">10</span> Maintaining Data Integrity in Database Applications</h1>
<p>In a database application, <a id="sthref497"></a><span class="bold">maintaining data integrity</span> means ensuring that the data in the tables that the application manipulates conform to the appropriate business rules. A <a id="sthref498"></a><span class="bold">business rule</span> specifies a condition or relationship that must always be true or must always be false. For example, a business rule might be that no employee can have a salary over $100,000 or that every employee in the <code dir="ltr">EMPLOYEES</code> table must belong to a department in the <code dir="ltr">DEPARTMENTS</code> table. Business rules vary from company to company, because each company defines its own policies about salaries, employee numbers, inventory tracking, and so on.</p>
<p>As explained in <a class="olink CNCPT122" href="../CNCPT/datainte.htm#CNCPT122"><span class="italic">Oracle Database Concepts</span></a>, there are several ways to ensure data integrity, and the one to use whenever possible is the <span class="bold">integrity constraint</span> (or <a id="sthref499"></a><span class="bold">constraint</span>).</p>
<p>This chapter supplements this information:</p>
<ul>
<li>
<p>The explanation of data integrity and constraints in <a class="olink CNCPT021" href="../CNCPT/datainte.htm#CNCPT021"><span class="italic">Oracle Database Concepts</span></a></p>
</li>
<li>
<p>The information about managing constraints in <a class="olink ADMIN11537" href="../ADMIN/general.htm#ADMIN11537"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a></p>
</li>
<li>
<p>The syntactic and semantic information about constraints in <a class="olink SQLRF52180" href="../SQLRF/clauses002.htm#SQLRF52180"><span class="italic">Oracle Database SQL Language Reference</span></a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1"><a id="ADFNS271"></a>Note:</p>
This chapter applies to only to constraints on tables. <a id="sthref500"></a><a id="sthref501"></a>Constraints on views do not help maintain data integrity or have associated indexes. Instead, they enable query rewrites on queries involving views, thereby improving performance when using materialized views and other data warehousing features.
<p>For more information about constraints on views, see <a class="olink SQLRF52181" href="../SQLRF/clauses002.htm#SQLRF52181"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<p>For information about using constraints in data warehouses, see <a class="olink DWHSG007" href="http://www.oracle.com/pls/topic/lookup?ctx=E50529-01&amp;id=DWHSG007"><span class="italic">Oracle Database Data Warehousing Guide</span></a>.</p>
</div>
<p class="subhead2"><a id="ADFNS1023"></a>Topics:</p>
<ul>
<li>
<p><a href="#BEIDIHBC">Enforcing Business Rules with Constraints</a></p>
</li>
<li>
<p><a href="#BEIJHFGI">Enforcing Business Rules with Both Constraints and Application Code</a></p>
</li>
<li>
<p><a href="#BEIDDADF">Creating Indexes for Use with Constraints</a></p>
</li>
<li>
<p><a href="#BEIGBDIF">When to Use NOT NULL Constraints</a></p>
</li>
<li>
<p><a href="#BEIGDECE">When to Use Default Column Values</a></p>
</li>
<li>
<p><a href="#BEIJDIIG">Choosing a Primary Key for a Table (PRIMARY KEY Constraint)</a></p>
</li>
<li>
<p><a href="#BEIDFGAH">When to Use UNIQUE Constraints</a></p>
</li>
<li>
<p><a href="#i1006359">Enforcing Referential Integrity with FOREIGN KEY Constraints</a></p>
</li>
<li>
<p><a href="#i1006495">Minimizing Space and Time Overhead for Indexes Associated with Constraints</a></p>
</li>
<li>
<p><a href="#i1006514">Guidelines for Indexing Foreign Keys</a></p>
</li>
<li>
<p><a href="#i1006526">Referential Integrity in a Distributed Database</a></p>
</li>
<li>
<p><a href="#i1006547">When to Use CHECK Constraints</a></p>
</li>
<li>
<p><a href="#i1006615">Examples of Defining Constraints</a></p>
</li>
<li>
<p><a href="#i1006697">Enabling and Disabling Constraints</a></p>
</li>
<li>
<p><a href="#i1006855">Modifying Constraints</a></p>
</li>
<li>
<p><a href="#BEIJJDAF">Renaming Constraints</a></p>
</li>
<li>
<p><a href="#i1006940">Dropping Constraints</a></p>
</li>
<li>
<p><a href="#i1006974">Managing FOREIGN KEY Constraints</a></p>
</li>
<li>
<p><a href="#BEIGAGDB">Viewing Information About Constraints</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="adfns_sqltypes.htm#BABECIGJ">Section 7.1.1, &#34;How the Correct Data Type Increases Data Integrity,&#34;</a> for information about the role that data type plays in data integrity</div>
<a id="BEIDIHBC"></a>
<div id="ADFNS262" class="sect1">
<h2 class="sect1"><span class="secnum">10.1</span> Enforcing Business Rules with Constraints</h2>
<p>Whenever possible, enforce business rules with constraints. In addition to the advantages explained in <a class="olink CNCPT33334" href="../CNCPT/datainte.htm#CNCPT33334"><span class="italic">Oracle Database Concepts</span></a>, constraints have the advantage of speed: Oracle Database can check that all the data in a table obeys a constraint faster than application code can do the equivalent checking.</p>
<p><a href="#BEIIEFFJ">Example 10-1</a> creates a table of departments, a table of employees, a constraint to enforce the rule that all values in the department table are unique, and a constraint to enforce the rule that every employee must work for a valid department.</p>
<div id="ADFNS1024" class="example">
<p class="titleinexample"><a id="BEIIEFFJ"></a>Example 10-1 Enforcing Business Rules with Constraints</p>
<p>Create table of departments:</p>
<pre dir="ltr">DROP TABLE dept_tab;
CREATE TABLE dept_tab (
  deptname VARCHAR2(20),
  deptno   INTEGER
);
 
</pre>
<p>Create table of employees:</p>
<pre dir="ltr">DROP TABLE emp_tab;
CREATE TABLE emp_tab (
  empname VARCHAR2(80),
  empno   INTEGER,
  deptno  INTEGER
);
</pre>
<p>Create constraint to enforce rule that all values in department table are unique:</p>
<pre dir="ltr">ALTER TABLE dept_tab ADD PRIMARY KEY (deptno);
</pre>
<p>Create constraint to enforce rule that every employee must work for a valid department:</p>
<pre dir="ltr">ALTER TABLE emp_tab ADD FOREIGN KEY (deptno) REFERENCES dept_tab(deptno);
</pre>
<p>Now, whenever you insert an employee record into <code dir="ltr">emp_tab</code>, Oracle Database checks that its <code dir="ltr">deptno</code> value appears in <code dir="ltr">dept_tab</code>.</p>
</div>
<!-- class="example" -->
<p>Suppose that instead of using a constraint to enforce the rule that every employee must work for a valid department, you use a <a id="sthref502"></a><a id="sthref503"></a>trigger that queries <code dir="ltr">dept_tab</code> to check that it contains the <code dir="ltr">deptno</code> value of the employee record to be inserted into <code dir="ltr">emp_tab</code>. Because the query uses consistent read (CR), it might miss uncommitted changes from other transactions. For more information about using triggers to enforce business rules, see <a class="olink CNCPT88945" href="../CNCPT/srvrside.htm#CNCPT88945"><span class="italic">Oracle Database Concepts</span></a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF52180" href="../SQLRF/clauses002.htm#SQLRF52180"><span class="italic">Oracle Database SQL Language Reference</span></a> for syntactic and semantic information about constraints</div>
</div>
<!-- class="sect1" -->
<a id="BEIJHFGI"></a>
<div id="ADFNS263" class="sect1">
<h2 class="sect1"><span class="secnum">10.2</span> Enforcing Business Rules with Both Constraints and Application Code</h2>
<p>Enforcing business rules with both constraints and application code is recommended when application code can determine that data values are invalid without querying tables. The application code can provide immediate feedback to the user and reduce the load on the database by preventing attempts to insert invalid data into tables.</p>
<p>For <a href="#BEIHIABH">Example 10-2</a>, assume that <a href="#BEIIEFFJ">Example 10-1</a> was run and then this column was added to the table <code dir="ltr">emp_tab</code>:</p>
<pre dir="ltr">empgender VARCHAR2(1)
</pre>
<p>The only valid values for <code dir="ltr">empgender</code> are <code dir="ltr">&#39;M&#39;</code> and <code dir="ltr">&#39;F&#39;</code>. When someone tries to insert a row into <code dir="ltr">emp_tab</code> or update the value of <code dir="ltr">emp_tab</code>.<code dir="ltr">empgender</code>, application code can determine whether the new value for <code dir="ltr">emp_tab</code>.<code dir="ltr">empgender</code> is valid without querying a table. If the value is invalid, the application code can notify the user instead of trying to insert the invalid value, as in <a href="#BEIHIABH">Example 10-2</a>.</p>
<div id="ADFNS1025" class="example">
<p class="titleinexample"><a id="BEIHIABH"></a>Example 10-2 Enforcing Business Rules with Both Constraints and Application Code</p>
<pre dir="ltr">CREATE OR REPLACE PROCEDURE add_employee (
  e_name   emp_tab.empname%TYPE,
  e_gender emp_tab.empgender%TYPE,
  e_number emp_tab.empno%TYPE,
  e_dept   emp_tab.deptno%TYPE
) AUTHID DEFINER IS
BEGIN
  <span class="bold">IF UPPER(e_gender) IN (&#39;M&#39;,&#39;F&#39;) THEN</span>
    <span class="bold">INSERT INTO emp_tab VALUES (e_name, e_gender, e_number, e_dept);</span>
  <span class="bold">ELSE</span>
    <span class="bold">DBMS_OUTPUT.PUT_LINE(&#39;Gender must be M or F.&#39;);</span>
  <span class="bold">END IF;</span>
END;
/
 
BEGIN
  add_employee (&#39;Smith&#39;, <span class="bold">&#39;H&#39;</span>, 356, 20);
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr"><span class="bold">Gender must be M or F.</span>
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="BEIDDADF"></a>
<div id="ADFNS264" class="sect1">
<h2 class="sect1"><span class="secnum">10.3</span> Creating Indexes for Use with Constraints</h2>
<p>When a unique or primary key constraint is enabled, Oracle Database creates an index automatically, but Oracle recommends that you create these indexes explicitly. If you want to use an index with a foreign key constraint, then you must create the index explicitly. For information about creating indexes explicitly, see <a class="olink ADMIN11723" href="../ADMIN/indexes.htm#ADMIN11723"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> or <a class="olink SQLRF01209" href="../SQLRF/statements_5013.htm#SQLRF01209"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<p>When a constraint can use an existing index, Oracle Database does not create an index for that constraint. Note that:</p>
<ul>
<li>
<p>A unique or primary key constraint can use either a unique index, an entire nonunique index, or the first few columns of a nonunique index.</p>
</li>
<li>
<p>If a unique or primary key constraint uses a nonunique index, then no other unique or primary key constraint can use that nonunique index.</p>
</li>
<li>
<p>The column order in the constraint and index need not match.</p>
</li>
<li>
<p>The object number of the index used by a unique or primary key constraint is stored in <code dir="ltr">CDEF$</code>.<code dir="ltr">ENABLED</code> for that constraint. No static data dictionary view or dynamic performance view shows this information.</p>
<p>If an enabled unique or primary key constraint is using an index, you cannot drop only the index. To drop the index, you must either drop the constraint itself or disable the constraint and then drop the index. For information about disabling and dropping constraints, see <a class="olink ADMIN11546" href="../ADMIN/general.htm#ADMIN11546"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a>.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADMIN11725" href="../ADMIN/indexes.htm#ADMIN11725"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> for more information about indexes associated with constraints</p>
</li>
<li>
<p><a href="adfns_indexes.htm#g1012606">Chapter 9, &#34;Using Indexes in Database Applications&#34;</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="BEIGBDIF"></a>
<div id="ADFNS265" class="sect1">
<h2 class="sect1"><span class="secnum">10.4</span> When to Use NOT NULL Constraints</h2>
<p>By default, a column can contain a <code dir="ltr">NULL</code> value. To ensure that the column never contains a <code dir="ltr">NULL</code> value, use the <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint (described in <a class="olink SQLRF30038" href="../SQLRF/clauses002.htm#SQLRF30038"><span class="italic">Oracle Database SQL Language Reference</span></a>).</p>
<p><a id="sthref504"></a>Use a <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint in both of these situations:</p>
<ul>
<li>
<p>A column must contain a non-<code dir="ltr">NULL</code> value.</p>
<p>For example, in the table <code dir="ltr">HR</code>.<code dir="ltr">EMPLOYEES</code>, each employee must have an employee ID. Therefore, the column <code dir="ltr">HR</code>.<code dir="ltr">EMPLOYEES</code>.<code dir="ltr">EMPLOYEE_ID</code> has a <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint, and nobody can insert a new employee record into <code dir="ltr">HR</code>.<code dir="ltr">EMPLOYEES</code> without specifying a non-<code dir="ltr">NULL</code> value for <code dir="ltr">EMPLOYEE_ID</code>. You <span class="italic">can</span> insert a new employee record into <code dir="ltr">HR</code>.<code dir="ltr">EMPLOYEES</code> without specifying a salary; therefore, the column <code dir="ltr">HR</code>.<code dir="ltr">EMPLOYEES</code>.<code dir="ltr">SALARY</code> does <span class="italic">not</span> have a <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint.</p>
</li>
<li>
<p>You want to allow index scans of the table, or allow an operation that requires indexing all rows.</p>
<p>Oracle Database indexes do not store keys whose values are all <a id="sthref505"></a><code dir="ltr">NULL</code>. Therefore, for the preceding kinds of operations, at least one indexed column must have a <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint.</p>
</li>
</ul>
<p><a href="#CHDFBFDH">Example 10-3</a> uses the SQL*Plus command <code dir="ltr">DESCRIBE</code> to show which columns of the <code dir="ltr">DEPARTMENTS</code> table have <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraints, and then shows what happens if you try to insert <code dir="ltr">NULL</code> values in columns that have <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraints.</p>
<div id="ADFNS266" class="example">
<p class="titleinexample"><a id="CHDFBFDH"></a>Example 10-3 Inserting NULL Values into Columns with NOT NULL Constraints</p>
<pre dir="ltr">DESCRIBE DEPARTMENTS;
</pre>
<p>Result:</p>
<pre dir="ltr"> Name                                      Null?    Type
 ----------------------------------------- -------- ------------
 
 DEPARTMENT_ID                             NOT NULL NUMBER(4)
 DEPARTMENT_NAME                           NOT NULL VARCHAR2(30)
 MANAGER_ID                                         NUMBER(6)
 LOCATION_ID                                        NUMBER(4)
</pre>
<p>Try to insert <code dir="ltr">NULL</code> into <code dir="ltr">DEPARTMENT_ID</code> column:</p>
<pre dir="ltr">INSERT INTO DEPARTMENTS (
 <span class="bold">DEPARTMENT_ID</span>, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID
)
VALUES (<span class="bold">NULL</span>, &#39;Sales&#39;, 200, 1700);
</pre>
<p>Result:</p>
<pre dir="ltr">VALUES (NULL, &#39;Sales&#39;, 200, 1700)
        *
ERROR at line 4:
ORA-01400: cannot insert NULL into (&#34;HR&#34;.&#34;DEPARTMENTS&#34;.&#34;DEPARTMENT_ID&#34;)
</pre>
<p>Omitting a value for a column that cannot be <code dir="ltr">NULL</code> is the same as assigning it the value <code dir="ltr">NULL</code>:</p>
<pre dir="ltr">INSERT INTO DEPARTMENTS (
  DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID
)
VALUES (&#39;Sales&#39;, 200, 1700);
</pre>
<p>Result:</p>
<pre dir="ltr">INSERT INTO DEPARTMENTS (
*
ERROR at line 1:
ORA-01400: cannot insert NULL into (&#34;HR&#34;.&#34;DEPARTMENTS&#34;.&#34;DEPARTMENT_ID&#34;)
</pre></div>
<!-- class="example" -->
<p>You can prevent the preceding error by giving <code dir="ltr">DEPARTMENT_ID</code> a non-<code dir="ltr">NULL</code> default value. For more information, see <a href="#BEIGDECE">Section 10.5, &#34;When to Use Default Column Values.&#34;</a></p>
<p>You can combine <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraints with other constraints to further restrict the values allowed in specific columns. For example, the combination of <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> and <code dir="ltr">UNIQUE</code> constraints forces the input of values in the <code dir="ltr">UNIQUE</code> key, eliminating the possibility that data in a new conflicts with data in an existing row. For more information, see <a href="#BEIBDAJJ">&#34;UNIQUE and NOT NULL Constraints on the Foreign Key&#34;</a>.</p>
</div>
<!-- class="sect1" -->
<a id="BEIGDECE"></a>
<div id="ADFNS267" class="sect1">
<h2 class="sect1"><span class="secnum">10.5</span> When to Use Default Column Values</h2>
<p><a id="sthref506"></a><a id="sthref507"></a>When an <code dir="ltr">INSERT</code> statement (described in <a class="olink SQLRF01604" href="../SQLRF/statements_9015.htm#SQLRF01604"><span class="italic">Oracle Database SQL Language Reference</span></a>) does not specify a value for a specific column, that column receives its default value. By default, that default value is <code dir="ltr">NULL</code>. You can change the default value when you define the column (with the <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> statement, described in <a class="olink SQLRF01402" href="../SQLRF/statements_7002.htm#SQLRF01402"><span class="italic">Oracle Database SQL Language Reference</span></a>) or when you alter the column (with the <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> statement, described in <a class="olink SQLRF01001" href="../SQLRF/statements_3001.htm#SQLRF01001"><span class="italic">Oracle Database SQL Language Reference</span></a>).</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Giving a column a non-<code dir="ltr">NULL</code> default value does not ensure that the value of the column will never have the value <code dir="ltr">NULL</code>, as the <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint does. For information about the <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint, see <a href="#BEIGBDIF">Section 10.4, &#34;When to Use NOT NULL Constraints.&#34;</a></div>
<p>Use a default column value in these situations:</p>
<ul>
<li>
<p>The column has a <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint.</p>
<p>Giving the column a non-<code dir="ltr">NULL</code> default value prevents the error that would occur if someone inserted a row without specifying a value for the column.</p>
</li>
<li>
<p>There is a most common value for the column.</p>
<p>For example, if most departments in the company are in New York, then set the default value of the column <code dir="ltr">DEPARTMENTS</code>.<code dir="ltr">LOCATION</code> to <code dir="ltr">&#39;NEW YORK&#39;</code>.</p>
</li>
<li>
<p>There is a non-<code dir="ltr">NULL</code> value that signifies no entry.</p>
<p>For example, if the value zero in the column <code dir="ltr">EMPLOYEES</code>.<code dir="ltr">SALARY</code> means that the salary has not yet been determined, then set the default value of that column to zero.</p>
<p>A default column value that signifies no entry can simplify testing. For example, it lets you change this test:</p>
<pre dir="ltr">IF (employees.salary IS NOT NULL) AND (employees.salary &lt; 50000)
</pre>
<p>To this test:</p>
<pre dir="ltr">IF employees.salary &lt; 50000
</pre></li>
<li>
<p>You want to automatically record the names of users who modify a table.</p>
<p>For example, suppose that you allow users to insert rows into a table through a view. You give the base table a column named <code dir="ltr">inserter</code> (which need not be included in the definition of the view), to store the name of the user who inserted the row. To record the user name automatically, define a default value that invokes the <code dir="ltr">USER</code> function. For example:</p>
<pre dir="ltr">CREATE TABLE audit_trail (
  value1   NUMBER,
  value2   VARCHAR2(32),
  inserter VARCHAR2(30) <span class="codeinlinebold">DEFAULT USER</span>);
</pre></li>
</ul>
</div>
<!-- class="sect1" -->
<a id="BEIJDIIG"></a>
<div id="ADFNS99957" class="sect1">
<h2 class="sect1"><span class="secnum">10.6</span> Choosing a Primary Key for a Table (PRIMARY KEY Constraint)</h2>
<p>The primary key of a table uniquely identifies each row and ensures that no duplicate rows exist (and typically, this is its only purpose). Therefore, a primary key value cannot be <code dir="ltr">NULL</code>.</p>
<p>A table can have at most one primary key, but that key can have multiple columns (that is, it can be a composite key). To designate a primary key, use the <a id="sthref508"></a><code dir="ltr">PRIMARY</code> <code dir="ltr">KEY</code> constraint.</p>
<p>Whenever practical, choose as the primary key a single column whose values are generated by a sequence. For information about sequences, see <a class="olink SQLRF00253" href="../SQLRF/pseudocolumns002.htm#SQLRF00253"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<p>The second-best choice for a primary key is a single column whose values are all of the following:</p>
<ul>
<li>
<p>Unique</p>
</li>
<li>
<p>Never changed</p>
</li>
<li>
<p>Never <code dir="ltr">NULL</code></p>
</li>
<li>
<p>Short and numeric (and therefore easy to type)</p>
</li>
</ul>
<p>Minimize your use of composite primary keys, whose values are long and cannot be generated by a sequence.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink CNCPT1646" href="../CNCPT/datainte.htm#CNCPT1646"><span class="italic">Oracle Database Concepts</span></a> for general information about primary key constraints</p>
</li>
<li>
<p><a class="olink SQLRF52197" href="../SQLRF/clauses002.htm#SQLRF52197"><span class="italic">Oracle Database SQL Language Reference</span></a> for complete information about primary key constraints, including restrictions</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="BEIDFGAH"></a>
<div id="ADFNS269" class="sect1">
<h2 class="sect1"><span class="secnum">10.7</span> When to Use UNIQUE Constraints</h2>
<p>Use a <a id="sthref509"></a><code dir="ltr">UNIQUE</code> constraint (which designates a unique key) on any column or combination of columns (except the primary key) where duplicate non-<code dir="ltr">NULL</code> values are not allowed. For example:</p>
<div class="inftblinformal">
<table class="cellalignment296" title="Examples of Unique and Primary Keys" summary="This table shows four examples of unique keys and primary keys in the same table." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t8">Unique Key</th>
<th class="cellalignment294" id="r1c2-t8">Primary Key</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t8" headers="r1c1-t8">Employee Social Security Number</td>
<td class="cellalignment295" headers="r2c1-t8 r1c2-t8">Employee number</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t8" headers="r1c1-t8">Truck license plate number</td>
<td class="cellalignment295" headers="r3c1-t8 r1c2-t8">Truck number</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t8" headers="r1c1-t8">Customer phone number (country code column, area code column, and local phone number column)</td>
<td class="cellalignment295" headers="r4c1-t8 r1c2-t8">Customer number</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t8" headers="r1c1-t8">Department name column and location column</td>
<td class="cellalignment295" headers="r5c1-t8 r1c2-t8">Department number</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p><a href="#i1015083">Figure 10-1</a> shows a table with a <code dir="ltr">UNIQUE</code> constraint, a row that violates the constraint, and a row that satisfies it.</p>
<div id="ADFNS270" class="figure">
<p class="titleinfigure"><a id="i1015083"></a>Figure 10-1 Rows That Violate and Satisfy a UNIQUE Constraint</p>
<img width="600" height="287" src="img/adfns039.gif" alt="Description of Figure 10-1 follows"/><br/>
<a id="sthref510" href="img_text/adfns039.htm">Description of &#39;&#39;Figure 10-1 Rows That Violate and Satisfy a UNIQUE Constraint&#39;&#39;</a><br/>
<br/></div>
<!-- class="figure" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink CNCPT1642" href="../CNCPT/datainte.htm#CNCPT1642"><span class="italic">Oracle Database Concepts</span></a> for general information about <code dir="ltr">UNIQUE</code> constraints</p>
</li>
<li>
<p><a class="olink SQLRF52195" href="../SQLRF/clauses002.htm#SQLRF52195"><span class="italic">Oracle Database SQL Language Reference</span></a> for complete information about <code dir="ltr">UNIQUE</code> constraints, including restrictions</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="i1006359"></a>
<div id="ADFNS00602" class="sect1">
<h2 class="sect1"><span class="secnum">10.8</span> Enforcing Referential Integrity with FOREIGN KEY Constraints</h2>
<p>When two tables share one or more columns, you use can use a <a id="sthref511"></a><code dir="ltr">FOREIGN</code> <code dir="ltr">KEY</code> constraint to enforce referential integrity&mdash;that is, to ensure that the shared columns always have the same values in both tables.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
A <code dir="ltr">FOREIGN</code> <code dir="ltr">KEY</code> constraint is also called a <span class="bold">referential integrity constraint</span>, and its <code dir="ltr">CONSTRAINT_TYPE</code> is <code dir="ltr">R</code> in the static data dictionary views <code dir="ltr">*_CONSTRAINTS</code>.</div>
<p>Designate one table as the <span class="bold">referenced or parent table</span> and the other as the <span class="bold">dependent or child table</span>. In the parent table, define either a <code dir="ltr">PRIMARY</code> <code dir="ltr">KEY</code> or <code dir="ltr">UNIQUE</code> constraint on the shared columns. In the child table, define a <code dir="ltr">FOREIGN</code> <code dir="ltr">KEY</code> constraint on the shared columns. The shared columns now comprise a <span class="bold">foreign key</span>. Defining additional constraints on the foreign key affects the parent-child relationship&mdash;for details, see <a href="#i1006395">Section 10.8.2, &#34;Defining Relationships Between Parent and Child Tables.&#34;</a></p>
<p><a href="#i1011998">Figure 10-2</a> shows a foreign key defined on the department number. It guarantees that every value in this column must match a value in the primary key of the department table. This constraint prevents erroneous department numbers from getting into the employee table.</p>
<p><a href="#i1011998">Figure 10-2</a> shows parent and child tables that share one column, a row that violates the <code dir="ltr">FOREIGN</code> <code dir="ltr">KEY</code> constraint, and a row that satisfies it.</p>
<div id="ADFNS272" class="figure">
<p class="titleinfigure"><a id="i1011998"></a>Figure 10-2 Rows That Violate and Satisfy a FOREIGN KEY Constraint</p>
<img width="684" height="630" src="img/adfns040.gif" alt="Description of Figure 10-2 follows"/><br/>
<a id="sthref512" href="img_text/adfns040.htm">Description of &#39;&#39;Figure 10-2 Rows That Violate and Satisfy a FOREIGN KEY Constraint&#39;&#39;</a><br/>
<br/></div>
<!-- class="figure" -->
<p class="subhead2"><a id="ADFNS1026"></a>Topics:</p>
<ul>
<li>
<p><a href="#BEIBJFCF">FOREIGN KEY Constraints and NULL Values</a></p>
</li>
<li>
<p><a href="#i1006395">Defining Relationships Between Parent and Child Tables</a></p>
</li>
<li>
<p><a href="#BEIIHIEB">Rules for Multiple FOREIGN KEY Constraints</a></p>
</li>
<li>
<p><a href="#BEIGJCIF">Deferring Constraint Checks</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink CNCPT1649" href="../CNCPT/datainte.htm#CNCPT1649"><span class="italic">Oracle Database Concepts</span></a> for general information about foreign key constraints</p>
</li>
<li>
<p><a class="olink SQLRF52199" href="../SQLRF/clauses002.htm#SQLRF52199"><span class="italic">Oracle Database SQL Language Reference</span></a> for complete information about foreign key constraints, including restrictions</p>
</li>
</ul>
</div>
<a id="BEIBJFCF"></a>
<div id="ADFNS273" class="sect2">
<h3 class="sect2"><span class="secnum">10.8.1</span> FOREIGN KEY Constraints and NULL Values</h3>
<p><a id="sthref513"></a><a id="sthref514"></a>Foreign keys allow key values that are all <code dir="ltr">NULL</code>, even if there are no matching <code dir="ltr">PRIMARY</code> or <code dir="ltr">UNIQUE</code> keys.</p>
<ul>
<li>
<p>By default (without any <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> or <code dir="ltr">CHECK</code> clauses), the <code dir="ltr">FOREIGN</code> <code dir="ltr">KEY</code> constraint enforces the <span class="bold">match</span> <span class="bold">none</span> rule for composite foreign keys in the ANSI/ISO standard.</p>
</li>
<li>
<p>To enforce the <span class="bold">match</span> <span class="bold">full</span> rule for <code dir="ltr">NULL</code> values in composite foreign keys, which requires that all components of the key be <code dir="ltr">NULL</code> or all be non-<code dir="ltr">NULL</code>, define a <code dir="ltr">CHECK</code> constraint that allows only all <code dir="ltr">NULL</code> or all non-<code dir="ltr">NULL</code> values in the composite foreign key. For example, with a composite key comprised of columns <code dir="ltr">A</code>, <code dir="ltr">B</code>, and <code dir="ltr">C</code>:</p>
<pre dir="ltr">CHECK ((A IS NULL AND B IS NULL AND C IS NULL) OR
       (A IS NOT NULL AND B IS NOT NULL AND C IS NOT NULL))
</pre></li>
<li>
<p>In general, it is not possible to use declarative referential integrity to enforce the <span class="bold">match</span> <span class="bold">partial</span> rule for <code dir="ltr">NULL</code> values in composite foreign keys, which requires the non-<code dir="ltr">NULL</code> portions of the key to appear in the corresponding portions in the primary or unique key of a single row in the referenced table. You can often use triggers to handle this case, as described in <a class="olink LNPLS020" href="../LNPLS/overview.htm#LNPLS020"><span class="italic">Oracle Database PL/SQL Language Reference</span></a>.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1006395"></a>
<div id="ADFNS274" class="sect2">
<h3 class="sect2"><span class="secnum">10.8.2</span> Defining Relationships Between Parent and Child Tables</h3>
<p>Several relationships between parent and child tables can be determined by the other types of constraints defined on the foreign key in the child table.</p>
<p><a id="ADFNS275"></a><span class="subhead3">No Constraints on the Foreign Key&nbsp;</span><a id="sthref515"></a>When no other constraints are defined on the foreign key, any number of rows in the child table can reference the same parent key value. This model allows nulls in the foreign key.</p>
<p>This model establishes a one-to-many relationship between the parent and foreign keys that allows undetermined values (nulls) in the foreign key. An example of such a relationship is shown in <a href="#i1011998">Figure 10-2</a> between the <code dir="ltr">employee</code> and <code dir="ltr">department</code> tables. Each department (parent key) has many employees (foreign key), and some employees might not be in a department (nulls in the foreign key).</p>
<p><a id="ADFNS276"></a><span class="subhead3">NOT NULL Constraint on the Foreign Key&nbsp;</span><a id="sthref516"></a><a id="sthref517"></a>When nulls are not allowed in a foreign key, each row in the child table must explicitly reference a value in the parent key because nulls are not allowed in the foreign key.</p>
<p>Any number of rows in the child table can reference the same parent key value, so this model establishes a one-to-many relationship between the parent and foreign keys. However, each row in the child table must have a reference to a parent key value; the absence of a value (a null) in the foreign key is not allowed. The same example in the previous section illustrates such a relationship. However, in this case, employees must have a reference to a specific department.</p>
<p><a id="ADFNS277"></a><span class="subhead3">UNIQUE Constraint on the Foreign Key&nbsp;</span><a id="sthref518"></a><a id="sthref519"></a>When a <code dir="ltr">UNIQUE</code> constraint is defined on the foreign key, only one row in the child table can reference a given parent key value. This model allows nulls in the foreign key.</p>
<p>This model establishes a one-to-one relationship between the parent and foreign keys that allows undetermined values (nulls) in the foreign key. For example, assume that the employee table had a column named <code dir="ltr">MEMBERNO</code>, referring to an employee membership number in the company insurance plan. Also, a table named <code dir="ltr">INSURANCE</code> has a primary key named <code dir="ltr">MEMBERNO</code>, and other columns of the table keep respective information relating to an employee insurance policy. The <code dir="ltr">MEMBERNO</code> in the employee table must be both a foreign key and a unique key:</p>
<ul>
<li>
<p>To enforce referential integrity rules between the <code dir="ltr">EMP_TAB</code> and <code dir="ltr">INSURANCE</code> tables (the <code dir="ltr">FOREIGN KEY</code> constraint)</p>
</li>
<li>
<p>To guarantee that each employee has a unique membership number (the <code dir="ltr">UNIQUE</code> key constraint)</p>
</li>
</ul>
<p><a id="BEIBDAJJ"></a><a id="ADFNS278"></a><span class="subhead3">UNIQUE and NOT NULL Constraints on the Foreign Key&nbsp;</span><a id="sthref520"></a><a id="sthref521"></a><a id="sthref522"></a><a id="sthref523"></a>When both <code dir="ltr">UNIQUE</code> and <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraints are defined on the foreign key, only one row in the child table can reference a given parent key value, and because <code dir="ltr">NULL</code> values are not allowed in the foreign key, each row in the child table must explicitly reference a value in the parent key.</p>
<p>This model establishes a one-to-one relationship between the parent and foreign keys that does not allow undetermined values (nulls) in the foreign key. If you expand the previous example by adding a <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint on the <code dir="ltr">MEMBERNO</code> column of the employee table, in addition to guaranteeing that each employee has a unique membership number, you also ensure that no undetermined values (nulls) are allowed in the <code dir="ltr">MEMBERNO</code> column of the employee table.</p>
</div>
<!-- class="sect2" -->
<a id="BEIIHIEB"></a>
<div id="ADFNS279" class="sect2">
<h3 class="sect2"><span class="secnum">10.8.3</span> Rules for Multiple FOREIGN KEY Constraints <a id="sthref524"></a></h3>
<p><a id="sthref525"></a>Oracle Database allows a column to be referenced by multiple <code dir="ltr">FOREIGN</code> <code dir="ltr">KEY</code> constraints; there is no limit on the number of dependent keys. This situation might be present if a single column is part of two different composite foreign keys.</p>
</div>
<!-- class="sect2" -->
<a id="BEIGJCIF"></a>
<div id="ADFNS280" class="sect2">
<h3 class="sect2"><span class="secnum">10.8.4</span> Deferring Constraint Checks</h3>
<p><a id="sthref526"></a><a id="sthref527"></a>When Oracle Database checks a constraint, it signals an error if the constraint is not satisfied. To defer checking constraints until the end of the current transaction, use the <a id="sthref528"></a><code dir="ltr">SET</code> <code dir="ltr">CONSTRAINTS</code> statement.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot use the <code dir="ltr">SET</code> <code dir="ltr">CONSTRAINTS</code> statement inside a trigger.</div>
<p>When deferring constraint checks:</p>
<ul>
<li>
<p>Select appropriate data.</p>
<p>You might want to defer constraint checks on <code dir="ltr">UNIQUE</code> and <code dir="ltr">FOREIGN</code> keys if the data you are working with has any of these characteristics:</p>
<ul>
<li>
<p>Tables are snapshots.</p>
</li>
<li>
<p>Some tables contain a large amount of data being manipulated by another application, which might not return the data in the same order.</p>
</li>
</ul>
</li>
<li>
<p>Update cascade operations on foreign keys.</p>
</li>
<li>
<p>Ensure that constraints are deferrable.</p>
<p>After identifying the appropriate tables, ensure that their <code dir="ltr">FOREIGN</code>, <code dir="ltr">UNIQUE</code> and <code dir="ltr">PRIMARY</code> key constraints are created <code dir="ltr">DEFERRABLE</code>.</p>
</li>
<li>
<p>Within the application that manipulates the data, set all constraints deferred before you begin processing any data, as follows:</p>
<pre dir="ltr">SET CONSTRAINTS ALL DEFERRED;
</pre></li>
<li>
<p>(Optional) Check for constraint violations immediately before committing the transaction.</p>
<p>Immediately before the <code dir="ltr">COMMIT</code> statement, run the <code dir="ltr">SET</code> <code dir="ltr">CONSTRAINTS</code> <code dir="ltr">ALL</code> <code dir="ltr">IMMEDIATE</code> statement. If there are any problems with a constraint, this statement fails, and identifies the constraint that caused the error. If you commit while constraints are violated, the transaction rolls back and you get an error message.</p>
</li>
</ul>
<p>In <a href="#BEICHCGC">Example 10-4</a>, the <code dir="ltr">PRIMARY</code> and <code dir="ltr">FOREIGN</code> keys of the table <code dir="ltr">emp</code> are created <code dir="ltr">DEFERRABLE</code> and then deferred.</p>
<div id="ADFNS281" class="example">
<p class="titleinexample"><a id="BEICHCGC"></a>Example 10-4 Deferring Constraint Checks</p>
<pre dir="ltr">DROP TABLE dept; 
CREATE TABLE dept (
  deptno NUMBER PRIMARY KEY,
  dname  VARCHAR2 (30)
);
 
DROP TABLE emp; 
CREATE TABLE emp (
  empno  NUMBER,
  ename  VARCHAR2(30),
  deptno NUMBER,
  <span class="bold">CONSTRAINT pk_emp_empno PRIMARY KEY (empno) DEFERRABLE,</span>
  <span class="bold">CONSTRAINT fk_emp_deptno FOREIGN KEY (deptno) REFERENCES dept(deptno) DEFERRABLE</span>
);
 
INSERT INTO dept (deptno, dname) VALUES (10, &#39;Accounting&#39;);
INSERT INTO dept (deptno, dname) VALUES (20, &#39;SALES&#39;);
 
INSERT INTO emp (empno, ename, deptno) VALUES (1, &#39;Corleone&#39;, 10);
INSERT INTO emp (empno, ename, deptno) VALUES (2, &#39;Costanza&#39;, 20);
COMMIT;
 
<span class="bold">SET CONSTRAINTS ALL DEFERRED;</span>
 
UPDATE dept
SET deptno = deptno + 10
WHERE deptno = 20;
 
</pre>
<p>Query:</p>
<pre dir="ltr">SELECT * from dept
ORDER BY deptno;
 
</pre>
<p>Result:</p>
<pre dir="ltr">    DEPTNO DNAME
---------- ------------------------------
        10 Accounting
        30 SALES
 
2 rows selected.
 
</pre>
<p>Update:</p>
<pre dir="ltr">UPDATE emp
SET deptno = deptno + 10
WHERE deptno = 20;
 
</pre>
<p>Result:</p>
<pre dir="ltr">1 row updated.
 
</pre>
<p>Query:</p>
<pre dir="ltr">SELECT * from emp
ORDER BY deptno;
 
</pre>
<p>Result:</p>
<pre dir="ltr">     EMPNO ENAME                              DEPTNO
---------- ------------------------------ ----------
         1 Corleone                               10
         2 Costanza                               30
 
2 rows selected.
</pre></div>
<!-- class="example" -->
<p>The <code dir="ltr">SET</code> <code dir="ltr">CONSTRAINTS</code> applies only to the current transaction, and its setting lasts for the duration of the transaction, or until another <code dir="ltr">SET</code> <code dir="ltr">CONSTRAINTS</code> statement resets the mode. The <code dir="ltr">ALTER</code> <code dir="ltr">SESSION</code> <code dir="ltr">SET</code> <code dir="ltr">CONSTRAINTS</code> statement applies only for the current session. The defaults specified when you create a constraint remain while the constraint exists.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF01703" href="../SQLRF/statements_10003.htm#SQLRF01703"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about the <code dir="ltr">SET</code> <code dir="ltr">CONSTRAINTS</code> statement</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006495"></a>
<div id="ADFNS00603" class="sect1">
<h2 class="sect1"><span class="secnum">10.9</span> Minimizing Space and Time Overhead for Indexes Associated with Constraints</h2>
<p><a id="sthref529"></a>When you create a <code dir="ltr">UNIQUE</code> or <code dir="ltr">PRIMARY</code> key, Oracle Database checks to see if an existing index enforces uniqueness for the constraint. If there is no such index, the database creates one.</p>
<p>When Oracle Database uses a unique index to enforce a constraint, and constraints associated with the unique index are dropped or disabled, the index is dropped. To preserve the statistics associated with the index (which would take a long time to re-create), specify the <code dir="ltr">KEEP</code> <code dir="ltr">INDEX</code> clause on the <code dir="ltr">DROP</code> <code dir="ltr">CONSTRAINT</code> statement.</p>
<p>While enabled foreign keys reference a <code dir="ltr">PRIMARY</code> or <code dir="ltr">UNIQUE</code> key, you cannot disable or drop the <code dir="ltr">PRIMARY</code> or <code dir="ltr">UNIQUE</code> key constraint or the index.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<code dir="ltr">UNIQUE</code> and <code dir="ltr">PRIMARY</code> keys with deferrable constraints must all use nonunique indexes.</div>
<p>To use existing indexes when creating unique and primary key constraints, include <code dir="ltr">USING</code> <code dir="ltr">INDEX</code> in the <code dir="ltr">CONSTRAINT</code> clause. For details and examples, see <a class="olink SQLRF52180" href="../SQLRF/clauses002.htm#SQLRF52180"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</div>
<!-- class="sect1" -->
<a id="i1006514"></a>
<div id="ADFNS00604" class="sect1">
<h2 class="sect1"><span class="secnum">10.10</span> Guidelines for Indexing Foreign Keys</h2>
<p><a id="sthref530"></a>Index foreign keys unless the matching unique or primary key is never updated or deleted.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CNCPT1657" href="../CNCPT/datainte.htm#CNCPT1657"><span class="italic">Oracle Database Concepts</span></a> for more information about indexing foreign keys</div>
</div>
<!-- class="sect1" -->
<a id="i1006526"></a>
<div id="ADFNS00605" class="sect1">
<h2 class="sect1"><span class="secnum">10.11</span> Referential Integrity in a Distributed Database</h2>
<p><a id="sthref531"></a><a id="sthref532"></a>The declaration of a referential constraint cannot specify a foreign key that references a primary or unique key of a remote table.</p>
<p>However, you can maintain parent/child table relationships across nodes using triggers.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNPLS020" href="../LNPLS/overview.htm#LNPLS020"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information about triggers that enforce referential integrity</div>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you decide to define referential integrity across the nodes of a distributed database using triggers, be aware that network failures can make both the parent table and the child table inaccessible.
<p>For example, assume that the child table is in the <code dir="ltr">SALES</code> database, and the parent table is in the <code dir="ltr">HQ</code> database.</p>
<p>If the network connection between the two databases fails, then some data manipulation language (DML) statements against the child table (those that insert rows or update a foreign key value) cannot proceed, because the referential integrity triggers must have access to the parent table in the <code dir="ltr">HQ</code> database.</p>
</div>
</div>
<!-- class="sect1" -->
<a id="i1006547"></a>
<div id="ADFNS00606" class="sect1">
<h2 class="sect1"><span class="secnum">10.12</span> When to Use CHECK Constraints</h2>
<p><a id="sthref533"></a>Use <code dir="ltr">CHECK</code> constraints when you must enforce integrity rules based on logical expressions, such as comparisons. Never use <code dir="ltr">CHECK</code> constraints when any of the other types of constraints can provide the necessary checking.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1006603">Section 10.12.4, &#34;Choosing Between CHECK and NOT NULL Constraints&#34;</a></div>
<p>Examples of <code dir="ltr">CHECK</code> constraints include:</p>
<ul>
<li>
<p>A <code dir="ltr">CHECK</code> constraint on employee salaries so that no salary value is greater than 10000.</p>
</li>
<li>
<p>A <code dir="ltr">CHECK</code> constraint on department locations so that only the locations &#34;<code dir="ltr">BOSTON</code>&#34;, &#34;<code dir="ltr">NEW</code> <code dir="ltr">YORK</code>&#34;, and &#34;<code dir="ltr">DALLAS</code>&#34; are allowed.</p>
</li>
<li>
<p>A <code dir="ltr">CHECK</code> constraint on the salary and commissions columns to prevent the commission from being larger than the salary.</p>
</li>
</ul>
<div id="ADFNS282" class="sect2"><a id="sthref534"></a>
<h3 class="sect2"><span class="secnum">10.12.1</span> Restrictions on CHECK Constraints</h3>
<p><a id="sthref535"></a>A <code dir="ltr">CHECK</code> constraint requires that a condition be true or unknown for every row of the table. If a statement causes the condition to evaluate to false, then the statement is rolled back. The condition of a <code dir="ltr">CHECK</code> constraint has these limitations:</p>
<ul>
<li>
<p>The condition must be a Boolean expression that can be evaluated using the values in the row being inserted or updated.</p>
</li>
<li>
<p>The condition cannot contain subqueries or sequences.</p>
</li>
<li>
<p>The condition cannot include the <code dir="ltr">SYSDATE</code>, <code dir="ltr">UID</code>, <code dir="ltr">USER</code>, or <code dir="ltr">USERENV</code> SQL functions.</p>
</li>
<li>
<p>The condition cannot contain the pseudocolumns <code dir="ltr">LEVEL</code> or <code dir="ltr">ROWNUM</code>.</p>
</li>
<li>
<p>The condition cannot contain the <code dir="ltr">PRIOR</code> operator.</p>
</li>
<li>
<p>The condition cannot contain a user-defined function.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink SQLRF00251" href="../SQLRF/pseudocolumns001.htm#SQLRF00251"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about the <code dir="ltr">LEVEL</code> pseudocolumn</p>
</li>
<li>
<p><a class="olink SQLRF00255" href="../SQLRF/pseudocolumns009.htm#SQLRF00255"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about the <code dir="ltr">ROWNUM</code> pseudocolumn</p>
</li>
<li>
<p><a class="olink SQLRF007" href="../SQLRF/queries.htm#SQLRF007"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about the <code dir="ltr">PRIOR</code> operator (used in hierarchical queries)</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<div id="ADFNS283" class="sect2"><a id="sthref536"></a>
<h3 class="sect2"><span class="secnum">10.12.2</span> Designing CHECK Constraints</h3>
<p><a id="sthref537"></a>When using <code dir="ltr">CHECK</code> constraints, remember that a <code dir="ltr">CHECK</code> constraint is violated only if the condition evaluates to false; true and unknown values (such as comparisons with nulls) do not violate a check condition. Ensure that any <code dir="ltr">CHECK</code> constraint that you define is specific enough to enforce the rule.</p>
<p>For example, consider this <code dir="ltr">CHECK</code> constraint:</p>
<pre dir="ltr">CHECK (Sal &gt; 0 OR Comm &gt;= 0)
</pre>
<p>At first glance, this rule may be interpreted as &#34;do not allow a row in the employee table unless the employee salary is greater than zero or the employee commission is greater than or equal to zero.&#34; But if a row is inserted with a null salary, that row does not violate the <code dir="ltr">CHECK</code> constraint, regardless of whether the commission value is valid, because the entire check condition is evaluated as unknown. In this case, you can prevent such violations by placing <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraints on both the <code dir="ltr">SAL</code> and <code dir="ltr">COMM</code> columns.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are not sure when unknown values result in <code dir="ltr">NULL</code> conditions, review the truth tables for the logical conditions in <a class="olink SQLRF005" href="../SQLRF/conditions.htm#SQLRF005"><span class="italic">Oracle Database SQL Language Reference</span></a></div>
</div>
<!-- class="sect2" -->
<div id="ADFNS284" class="sect2"><a id="sthref538"></a>
<h3 class="sect2"><span class="secnum">10.12.3</span> Rules for Multiple CHECK Constraints</h3>
<p><a id="sthref539"></a>A single column can have multiple <code dir="ltr">CHECK</code> constraints that reference the column in its definition. There is no limit to the number of <code dir="ltr">CHECK</code> constraints that can be defined that reference a column.</p>
<p>The order in which the constraints are evaluated is not defined, so be careful not to rely on the order or to define multiple constraints that conflict with each other.</p>
</div>
<!-- class="sect2" -->
<a id="i1006603"></a>
<div id="ADFNS285" class="sect2">
<h3 class="sect2"><span class="secnum">10.12.4</span> Choosing Between CHECK and NOT NULL Constraints</h3>
<p><a id="sthref540"></a><a id="sthref541"></a>According to the ANSI/ISO standard, a <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint is an example of a <code dir="ltr">CHECK</code> constraint, where the condition is:</p>
<pre dir="ltr">CHECK (<span class="italic">column_name</span> IS NOT NULL)
</pre>
<p>Therefore, you can write <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraints for a single column using either a <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint or a <code dir="ltr">CHECK</code> constraint. The <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint is easier to use than the <code dir="ltr">CHECK</code> constraint.</p>
<p>In the case where a composite key can allow only all <code dir="ltr">NULL</code> or all non-<code dir="ltr">NULL</code> values, you must use a <code dir="ltr">CHECK</code> constraint. For example, this <code dir="ltr">CHECK</code> constraint allows a key value in the composite key made up of columns <code dir="ltr">C1</code> and <code dir="ltr">C2</code> to contain either all nulls or all values:</p>
<pre dir="ltr">CHECK ((C1 IS NULL AND C2 IS NULL) OR (C1 IS NOT NULL AND C2 IS NOT NULL))
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006615"></a>
<div id="ADFNS00607" class="sect1">
<h2 class="sect1"><span class="secnum">10.13</span> Examples of Defining Constraints</h2>
<p><a href="#BEICHGDE">Example 10-5</a> and <a href="#BEIDBAAF">Example 10-6</a> show how to create simple constraints during the prototype phase of your database design. In these examples, each constraint is given a name. Naming the constraints prevents the database from creating multiple copies of the same constraint, with different system-generated names, if the data definition language (DDL) statement runs multiple times.</p>
<p><a href="#BEICHGDE">Example 10-5</a> creates tables and their constraints at the same time, using the <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> statement.</p>
<div id="ADFNS286" class="example">
<p class="titleinexample"><a id="BEICHGDE"></a>Example 10-5 Defining Constraints with the CREATE TABLE Statement</p>
<pre dir="ltr">DROP TABLE DeptTab;
CREATE TABLE DeptTab (
  Deptno  NUMBER(3) <span class="bold">CONSTRAINT pk_DeptTab_Deptno PRIMARY KEY</span>,
  Dname   VARCHAR2(15),
  Loc     VARCHAR2(15),
  <span class="bold">CONSTRAINT u_DeptTab_Dname_Loc UNIQUE (Dname, Loc)</span>,
  <span class="bold">CONSTRAINT c_DeptTab_Loc</span>
    <span class="bold">CHECK (Loc IN (&#39;NEW YORK&#39;, &#39;BOSTON&#39;, &#39;CHICAGO&#39;)))</span>;
 
DROP TABLE EmpTab;
CREATE TABLE EmpTab (
  Empno    NUMBER(5) <span class="bold">CONSTRAINT pk_EmpTab_Empno PRIMARY KEY</span>,
  Ename    VARCHAR2(15) <span class="bold">NOT NULL</span>,
  Job      VARCHAR2(10),
  Mgr      NUMBER(5) <span class="bold">CONSTRAINT r_EmpTab_Mgr REFERENCES EmpTab</span>,
  Hiredate DATE,
  Sal      NUMBER(7,2),
  Comm     NUMBER(5,2),
  Deptno   NUMBER(3) <span class="bold">NOT NULL</span>
  <span class="bold">CONSTRAINT r_EmpTab_DeptTab REFERENCES DeptTab ON DELETE CASCADE</span>);
</pre></div>
<!-- class="example" -->
<p><a href="#BEIDBAAF">Example 10-6</a> creates constraints for existing tables, using the <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> statement.</p>
<p>You cannot create a validated constraint on a table if the table contains rows that violate the constraint.</p>
<div id="ADFNS287" class="example">
<p class="titleinexample"><a id="BEIDBAAF"></a>Example 10-6 Defining Constraints with the ALTER TABLE Statement</p>
<pre dir="ltr">-- Create tables without constraints:

DROP TABLE DeptTab; 
CREATE TABLE DeptTab (
  Deptno  NUMBER(3),
  Dname   VARCHAR2(15),
  Loc     VARCHAR2(15)
);
 
DROP TABLE EmpTab; 
CREATE TABLE EmpTab (
  Empno    NUMBER(5),
  Ename    VARCHAR2(15),
  Job      VARCHAR2(10),
  Mgr      NUMBER(5),
  Hiredate DATE,
  Sal      NUMBER(7,2),
  Comm     NUMBER(5,2),
  Deptno   NUMBER(3)
);
 
<span class="bold">--Define constraints with the ALTER TABLE statement:</span>

<span class="bold">ALTER TABLE DeptTab</span>
<span class="bold">ADD CONSTRAINT pk_DeptTab_Deptno PRIMARY KEY (Deptno);</span>
 
<span class="bold">ALTER TABLE EmpTab</span>
<span class="bold">ADD CONSTRAINT fk_DeptTab_Deptno</span>
<span class="bold">FOREIGN KEY (Deptno) REFERENCES DeptTab;</span>
 
<span class="bold">ALTER TABLE EmpTab MODIFY (Ename VARCHAR2(15) NOT NULL);</span>
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADMIN11537" href="../ADMIN/general.htm#ADMIN11537"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> for information about creating and maintaining constraints for a large production database</div>
<div id="ADFNS288" class="sect2"><a id="sthref542"></a>
<h3 class="sect2"><span class="secnum">10.13.1</span> Privileges Needed to Define Constraints</h3>
<p><a id="sthref543"></a><a id="sthref544"></a>If you have the <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> or <code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">TABLE</code> system privilege, then you can define constraints on the tables that you create.</p>
<p>If you have the <code dir="ltr">ALTER</code> <code dir="ltr">ANY</code> <code dir="ltr">TABLE</code> system privilege, then you can define constraints on any existing table.</p>
<p>If you have the <code dir="ltr">ALTER</code> object privilege for a specific table, then you can define constraints on that table.</p>
<p><code dir="ltr">UNIQUE</code> and <code dir="ltr">PRIMARY</code> <code dir="ltr">KEY</code> constraints require that the table owner has either the <code dir="ltr">UNLIMITED</code> <code dir="ltr">TABLESPACE</code> system privilege or a quota for the tablespace that contains the associated index.</p>
<p>You can define <code dir="ltr">FOREIGN</code> <code dir="ltr">KEY</code> constraints if the parent table or view is in your schema or you have the <code dir="ltr">REFERENCES</code> privilege on the columns of the referenced key in the parent table or view. For more information, see <a href="#i1006987">Section 10.18.4, &#34;Privileges Required to Create FOREIGN KEY Constraints.&#34;</a></p>
</div>
<!-- class="sect2" -->
<div id="ADFNS289" class="sect2"><a id="sthref545"></a>
<h3 class="sect2"><span class="secnum">10.13.2</span> Naming Constraints <a id="sthref546"></a></h3>
<p>Assign names to constraints <a id="sthref547"></a><code dir="ltr">NOT</code> <code dir="ltr">NULL</code>, <a id="sthref548"></a><code dir="ltr">UNIQUE</code>, <a id="sthref549"></a><code dir="ltr">PRIMARY</code> <code dir="ltr">KEY</code>, <a id="sthref550"></a><code dir="ltr">FOREIGN</code> <code dir="ltr">KEY</code>, and <a id="sthref551"></a><code dir="ltr">CHECK</code> using the <code dir="ltr">CONSTRAINT</code> option of the constraint clause. This name must be unique among the constraints that you own. If you do not specify a constraint name, one is assigned automatically by Oracle Database.</p>
<p>Choosing your own name makes error messages for constraint violations more understandable, and prevents the creation of duplicate constraints with different names if the SQL statements are run more than once.</p>
<p>See the previous examples of the <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> and <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> statements for examples of the <code dir="ltr">CONSTRAINT</code> option of the <code dir="ltr">constraint</code> clause. The name of each constraint is included with other information about the constraint in the data dictionary.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BEIGAGDB">&#34;Viewing Information About Constraints&#34;</a> for examples of static data dictionary views</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006697"></a>
<div id="ADFNS00608" class="sect1">
<h2 class="sect1"><span class="secnum">10.14</span> Enabling and Disabling Constraints</h2>
<p>This section explains the mechanisms and procedures for manually enabling and disabling constraints.</p>
<p><a id="sthref552"></a><a id="sthref553"></a><span class="glossaryterm">enabled constraint</span>. When a constraint is enabled, the corresponding rule is enforced on the data values in the associated columns. The definition of the constraint is stored in the data dictionary.</p>
<p><a id="sthref554"></a><a id="sthref555"></a><span class="glossaryterm">disabled constraint</span>. When a constraint is disabled, the corresponding rule is not enforced. The definition of the constraint is still stored in the data dictionary.</p>
<p>An integrity constraint represents an assertion about the data in a database. This assertion is always true when the constraint is enabled. The assertion might not be true when the constraint is disabled, because data that violates the integrity constraint can be in the database.</p>
<p class="subhead2"><a id="ADFNS1027"></a>Topics:</p>
<ul>
<li>
<p><a href="#CHDCGEHF">Why Disable Constraints?</a></p>
</li>
<li>
<p><a href="#CHDEDHJI">Creating Enabled Constraints (Default)</a></p>
</li>
<li>
<p><a href="#CHDBIDED">Creating Disabled Constraints</a></p>
</li>
<li>
<p><a href="#CHDJFDGE">Enabling Existing Constraints</a></p>
</li>
<li>
<p><a href="#CHDFEEGJ">Disabling Existing Constraints</a></p>
</li>
<li>
<p><a href="#i1006822">Guidelines for Enabling and Disabling Key Constraints</a></p>
</li>
<li>
<p><a href="#i1006841">Fixing Constraint Exceptions</a></p>
</li>
</ul>
<a id="CHDCGEHF"></a>
<div id="ADFNS290" class="sect2">
<h3 class="sect2"><span class="secnum">10.14.1</span> Why Disable Constraints?</h3>
<p><a id="sthref556"></a><a id="sthref557"></a>During day-to-day operations, keep constraints enabled. In certain situations, temporarily disabling the constraints of a table makes sense for performance reasons. For example:</p>
<ul>
<li>
<p>When loading large amounts of data into a table using SQL*Loader</p>
</li>
<li>
<p>When performing batch operations that make massive changes to a table (such as changing each employee number by adding 1000 to the existing number)</p>
</li>
<li>
<p>When importing or exporting one table at a time</p>
</li>
</ul>
<p>Temporarily turning off constraints can speed up these operations.</p>
</div>
<!-- class="sect2" -->
<a id="CHDEDHJI"></a>
<div id="ADFNS291" class="sect2">
<h3 class="sect2"><span class="secnum">10.14.2</span> Creating Enabled Constraints (Default)</h3>
<p><a id="sthref558"></a><a id="sthref559"></a>When you define an integrity constraint (using either <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> or <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code>), Oracle Database enables the constraint by default. For code clarity, you can explicitly enable the constraint by including the <code dir="ltr">ENABLE</code> clause in its definition, as in <a href="#BEIEHFFC">Example 10-7</a>.</p>
<div id="ADFNS292" class="example">
<p class="titleinexample"><a id="BEIEHFFC"></a>Example 10-7 Creating Enabled Constraints</p>
<pre dir="ltr">/* Use CREATE TABLE statement to create enabled constraint
   (ENABLE keyword is optional): */
 
DROP TABLE t1; 
CREATE TABLE t1 (Empno NUMBER(5) PRIMARY KEY <span class="bold">ENABLE</span>);
 
/* Create table without constraint
   and then use ALTER TABLE statement to add enabled constraint
   (ENABLE keyword is optional): */

DROP TABLE t2;
CREATE TABLE t2 (Empno NUMBER(5));
 
ALTER TABLE t2 ADD PRIMARY KEY (Empno) <span class="bold">ENABLE</span>;
</pre></div>
<!-- class="example" -->
<p>Include the <code dir="ltr">ENABLE</code> clause when defining a constraint for a table to be populated a row at a time by individual transactions. This ensures that data is always consistent, and reduces the performance overhead of each DML statement.</p>
<p>An <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> statement that tries to enable an integrity constraint fails if an existing row of the table violates the integrity constraint. The statement rolls back and the constraint definition is neither stored nor enabled.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1006841">Section 10.14.7, &#34;Fixing Constraint Exceptions,&#34;</a> for more information about rows that violate constraints</div>
</div>
<!-- class="sect2" -->
<a id="CHDBIDED"></a>
<div id="ADFNS293" class="sect2">
<h3 class="sect2"><span class="secnum">10.14.3</span> Creating Disabled Constraints</h3>
<p><a id="sthref560"></a><a id="sthref561"></a><a id="sthref562"></a>You define and disable an integrity constraint (using either <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> or <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code>), by including the <code dir="ltr">DISABLE</code> clause in its definition, as in <a href="#BEIDJABH">Example 10-8</a>.</p>
<div id="ADFNS294" class="example">
<p class="titleinexample"><a id="BEIDJABH"></a>Example 10-8 Creating Disabled Constraints</p>
<pre dir="ltr">/* Use CREATE TABLE statement to create disabled constraint */
 
DROP TABLE t1; 
CREATE TABLE t1 (Empno NUMBER(5) PRIMARY KEY <span class="bold">DISABLE</span>);
 
/* Create table without constraint
   and then use ALTER TABLE statement to add disabled constraint */
 
DROP TABLE t2; 
CREATE TABLE t2 (Empno NUMBER(5));
 
ALTER TABLE t2 ADD PRIMARY KEY (Empno) <span class="bold">DISABLE</span>;
</pre></div>
<!-- class="example" -->
<p>Include the <code dir="ltr">DISABLE</code> clause when defining a constraint for a table to have large amounts of data inserted before anybody else accesses it, particularly if you must cleanse data after inserting it, or must fill empty columns with sequence numbers or parent/child relationships.</p>
<p>An <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> statement that defines and disables a constraint never fails, because its rule is not enforced.</p>
</div>
<!-- class="sect2" -->
<a id="CHDJFDGE"></a>
<div id="ADFNS295" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">10.14.4</span> Enabling Existing Constraints</h3>
<p><a id="sthref563"></a><a id="sthref564"></a>After you have cleansed the data and filled the empty columns, you can enable constraints that were disabled during data insertion.</p>
<p>To enable an existing constraint, use the <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> statement with the <code dir="ltr">ENABLE</code> clause, as in <a href="#BEIFJEII">Example 10-9</a>.</p>
<div id="ADFNS296" class="example">
<p class="titleinexample"><a id="BEIFJEII"></a>Example 10-9 Enabling Existing Constraints</p>
<pre dir="ltr">-- Create table with disabled constraints:
 
DROP TABLE DeptTab;
CREATE TABLE DeptTab (
  Deptno  NUMBER(3) PRIMARY KEY DISABLE,
  Dname   VARCHAR2(15),
  Loc     VARCHAR2(15),
  CONSTRAINT uk_DeptTab_Dname_Loc UNIQUE (Dname, Loc) DISABLE,
  CONSTRAINT c_DeptTab_Loc
  CHECK (Loc IN (&#39;NEW YORK&#39;, &#39;BOSTON&#39;, &#39;CHICAGO&#39;)) DISABLE
);
 
<span class="bold">-- Enable constraints:</span>
 
 ALTER TABLE DeptTab
<span class="bold">ENABLE PRIMARY KEY</span>
<span class="bold">ENABLE CONSTRAINT uk_DeptTab_Dname_Loc</span>
<span class="bold">ENABLE CONSTRAINT c_DeptTab_Loc;</span>
</pre></div>
<!-- class="example" -->
<p>An <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> statement that attempts to enable an integrity constraint fails if any of the table rows violate the integrity constraint. The statement is rolled back and the constraint is not enabled.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1006841">Section 10.14.7, &#34;Fixing Constraint Exceptions,&#34;</a> for more information about rows that violate constraints</div>
</div>
<!-- class="sect2" -->
<a id="CHDFEEGJ"></a>
<div id="ADFNS297" class="sect2">
<h3 class="sect2"><span class="secnum">10.14.5</span> Disabling Existing Constraints</h3>
<p><a id="sthref565"></a><a id="sthref566"></a><a id="sthref567"></a>If you must perform a large insert or update when a table contains data, you can temporarily disable constraints to improve performance of the bulk operation.</p>
<p>To disable an existing constraint, use the <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> statement with the <code dir="ltr">DISABLE</code> clause, as in <a href="#BEIBEAEF">Example 10-10</a>.</p>
<div id="ADFNS298" class="example">
<p class="titleinexample"><a id="BEIBEAEF"></a>Example 10-10 Disabling Existing Constraints</p>
<pre dir="ltr">-- Create table with enabled constraints:
 
DROP TABLE DeptTab; 
CREATE TABLE DeptTab (
  Deptno  NUMBER(3) PRIMARY KEY ENABLE,
  Dname   VARCHAR2(15),
  Loc     VARCHAR2(15),
  CONSTRAINT uk_DeptTab_Dname_Loc UNIQUE (Dname, Loc) ENABLE,
  CONSTRAINT c_DeptTab_Loc
  CHECK (Loc IN (&#39;NEW YORK&#39;, &#39;BOSTON&#39;, &#39;CHICAGO&#39;)) ENABLE
);
 
<span class="bold">-- Disable constraints:</span>
 
ALTER TABLE DeptTab
<span class="bold">DISABLE PRIMARY KEY</span>
<span class="bold">DISABLE CONSTRAINT uk_DeptTab_Dname_Loc</span>
<span class="bold">DISABLE CONSTRAINT c_DeptTab_Loc;</span>
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i1006822"></a>
<div id="ADFNS299" class="sect2">
<h3 class="sect2"><span class="secnum">10.14.6</span> Guidelines for Enabling and Disabling Key Constraints</h3>
<p>When enabling or disabling <code dir="ltr">UNIQUE</code>, <code dir="ltr">PRIMARY</code> <code dir="ltr">KEY</code>, and <code dir="ltr">FOREIGN</code> <code dir="ltr">KEY</code> constraints, be aware of several important issues and prerequisites. <code dir="ltr">UNIQUE</code> key and <code dir="ltr">PRIMARY</code> <code dir="ltr">KEY</code> constraints are usually managed by the database administrator.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADMIN11537" href="../ADMIN/general.htm#ADMIN11537"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> and <a href="#i1006974">Section 10.18, &#34;Managing FOREIGN KEY Constraints&#34;</a></div>
</div>
<!-- class="sect2" -->
<a id="i1006841"></a>
<div id="ADFNS300" class="sect2">
<h3 class="sect2"><span class="secnum">10.14.7</span> Fixing Constraint Exceptions</h3>
<p><a id="sthref568"></a><a id="sthref569"></a><a id="sthref570"></a>If a row of a table disobeys an integrity constraint, then this row is in violation of the constraint and is called an <span class="glossaryterm">exception</span> to the constraint. If any exceptions exist, then the constraint cannot be enabled. The rows that violate the constraint must be updated or deleted before the constraint can be enabled.</p>
<p>You can identify exceptions for a specific integrity constraint as you try to enable the constraint.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1006841">Section 10.14.7, &#34;Fixing Constraint Exceptions,&#34;</a> for more information about this procedure</div>
<p>When you try to create or enable a constraint, and the statement fails because integrity constraint exceptions exist, the statement is rolled back. You cannot enable the constraint until all exceptions are either updated or deleted. To determine which rows violate the integrity constraint, include the <code dir="ltr">EXCEPTIONS</code> option in the <code dir="ltr">ENABLE</code> clause of a <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> or <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> statement.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADMIN11537" href="../ADMIN/general.htm#ADMIN11537"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> for more information about responding to constraint exceptions</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006855"></a>
<div id="ADFNS00609" class="sect1">
<h2 class="sect1"><span class="secnum">10.15</span> Modifying Constraints</h2>
<p><a id="sthref571"></a>Starting with Oracle8<span class="italic">i</span>, you can modify an existing constraint with the <a id="sthref572"></a><code dir="ltr">MODIFY</code> <code dir="ltr">CONSTRAINT</code> clause, as in <a href="#BEIJBACB">Example 10-11</a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF01001" href="../SQLRF/statements_3001.htm#SQLRF01001"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about the parameters you can modify</div>
<div id="ADFNS301" class="example">
<p class="titleinexample"><a id="BEIJBACB"></a>Example 10-11 Modifying Constraints</p>
<pre dir="ltr">/* Create &amp; then modify a CHECK constraint: */
 
DROP TABLE X1Tab;
CREATE TABLE X1Tab (
  a1 NUMBER
  CONSTRAINT c_X1Tab_a1 CHECK (a1&gt;3)
  DEFERRABLE DISABLE
);
 
ALTER TABLE X1Tab
<span class="bold">MODIFY CONSTRAINT c_X1Tab_a1 ENABLE</span>;
 
ALTER TABLE X1Tab
<span class="bold">MODIFY CONSTRAINT c_X1Tab_a1 RELY</span>;
 
ALTER TABLE X1Tab
<span class="bold">MODIFY CONSTRAINT c_X1Tab_a1 INITIALLY DEFERRED</span>;
 
ALTER TABLE X1Tab
<span class="bold">MODIFY CONSTRAINT c_X1Tab_a1 ENABLE NOVALIDATE</span>;
 
/* Create &amp; then modify a PRIMARY KEY constraint: */
 
DROP TABLE t1; 
CREATE TABLE t1 (a1 INT, b1 INT);
 
ALTER TABLE t1
ADD CONSTRAINT pk_t1_a1 PRIMARY KEY(a1) DISABLE;
 
ALTER TABLE t1
<span class="bold">MODIFY PRIMARY KEY INITIALLY IMMEDIATE</span>
<span class="bold">USING INDEX PCTFREE = 30 ENABLE NOVALIDATE</span>;
 
ALTER TABLE t1
<span class="bold">MODIFY PRIMARY KEY ENABLE NOVALIDATE</span>;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="BEIJJDAF"></a>
<div id="ADFNS302" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">10.16</span> Renaming Constraints</h2>
<p>One property of a constraint that you can modify is its name. Situations in which you would rename a constraint include:</p>
<ul>
<li>
<p>You want to clone a table and its constraints.</p>
<p><a id="sthref573"></a>Constraint names must be unique, even across multiple schemas. Therefore, the constraints in the original table cannot have the same names as those in the cloned table.</p>
</li>
<li>
<p>You created a constraint with a default system-generated name, and now you want to give it a name that is easy to remember, so that you can easily enable and disable it.</p>
</li>
</ul>
<p><a href="#BEIBIHGF">Example 10-12</a> shows how to find the system-generated name of a constraint and change it.</p>
<div id="ADFNS303" class="example">
<p class="titleinexample"><a id="BEIBIHGF"></a>Example 10-12 Renaming a Constraint</p>
<pre dir="ltr">DROP TABLE T;
CREATE TABLE T (
  C1 NUMBER PRIMARY KEY,
  C2 NUMBER
);
 
</pre>
<p>Query:</p>
<pre dir="ltr">SELECT CONSTRAINT_NAME FROM USER_CONSTRAINTS
WHERE TABLE_NAME = &#39;T&#39;
AND CONSTRAINT_TYPE = &#39;P&#39;;
 
</pre>
<p>Result (system-generated name of constraint name varies):</p>
<pre dir="ltr">CONSTRAINT_NAME
------------------------------
<span class="bold">SYS_C0013059</span>
 
1 row selected.
 
</pre>
<p>Rename constraint from name reported in preceding query to <code dir="ltr">T_C1_PK</code>:</p>
<pre dir="ltr">ALTER TABLE T
RENAME CONSTRAINT SYS_C0013059
TO T_C1_PK;
 
</pre>
<p>Query:</p>
<pre dir="ltr">SELECT CONSTRAINT_NAME FROM USER_CONSTRAINTS
WHERE TABLE_NAME = &#39;T&#39;
AND CONSTRAINT_TYPE = &#39;P&#39;;
 
</pre>
<p>Result:</p>
<pre dir="ltr">CONSTRAINT_NAME
------------------------------
T_C1_PK
 
1 row selected.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="i1006940"></a>
<div id="ADFNS00610" class="sect1">
<h2 class="sect1"><span class="secnum">10.17</span> Dropping Constraints</h2>
<p><a id="sthref574"></a><a id="sthref575"></a>You can drop a constraint using the <code dir="ltr">DROP</code> clause of the <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> statement. Situations in which you would drop a constraint include:</p>
<ul>
<li>
<p>The constraint enforces a rule that is no longer true.</p>
</li>
<li>
<p>The constraint is no longer needed.</p>
</li>
</ul>
<p>To drop a constraint and all other integrity constraints that depend on it, specify <code dir="ltr">CASCADE</code>.</p>
<div id="ADFNS304" class="example">
<p class="titleinexample"><a id="BEIEAJIB"></a>Example 10-13 Dropping Constraints</p>
<pre dir="ltr">-- Create table with constraints:

DROP TABLE DeptTab; 
CREATE TABLE DeptTab (
  Deptno  NUMBER(3) PRIMARY KEY,
  Dname   VARCHAR2(15),
  Loc     VARCHAR2(15),
  CONSTRAINT uk_DeptTab_Dname_Loc UNIQUE (Dname, Loc),
  CONSTRAINT c_DeptTab_Loc
  CHECK (Loc IN (&#39;NEW YORK&#39;, &#39;BOSTON&#39;, &#39;CHICAGO&#39;))
);
 
-- Drop constraints:
 
ALTER TABLE DeptTab
<span class="bold">DROP PRIMARY KEY</span>
<span class="bold">DROP CONSTRAINT uk_DeptTab_Dname_Loc</span>
<span class="bold">DROP CONSTRAINT c_DeptTab_Loc</span>;
</pre></div>
<!-- class="example" -->
<p>When dropping <a id="sthref576"></a><code dir="ltr">UNIQUE</code>, <a id="sthref577"></a><code dir="ltr">PRIMARY</code> <code dir="ltr">KEY</code>, and <a id="sthref578"></a><code dir="ltr">FOREIGN</code> <code dir="ltr">KEY</code> constraints, be aware of several important issues and prerequisites. <code dir="ltr">UNIQUE</code> and <code dir="ltr">PRIMARY</code> <code dir="ltr">KEY</code> constraints are usually managed by the database administrator.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink SQLRF01001" href="../SQLRF/statements_3001.htm#SQLRF01001"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about the <code dir="ltr">DROP</code> clause of the <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> statement.</p>
</li>
<li>
<p><a class="olink ADMIN11549" href="../ADMIN/general.htm#ADMIN11549"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> for more information about dropping constraints.</p>
</li>
<li>
<p><a class="olink SQLRF01806" href="../SQLRF/statements_9003.htm#SQLRF01806"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about the <code dir="ltr">CASCADE</code> <code dir="ltr">CONSTRAINTS</code> clause of the <code dir="ltr">DROP</code> <code dir="ltr">TABLE</code> statement, which drops all referential integrity constraints that refer to primary and unique keys in the dropped table</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="i1006974"></a>
<div id="ADFNS00611" class="sect1">
<h2 class="sect1"><span class="secnum">10.18</span> Managing FOREIGN KEY Constraints</h2>
<p><a id="sthref579"></a><code dir="ltr">FOREIGN</code> <code dir="ltr">KEY</code> constraints enforce relationships between columns in different tables. Therefore, they cannot be enabled if the constraint of the referenced primary or unique key is not present or not enabled.</p>
<div id="ADFNS305" class="sect2"><a id="sthref580"></a>
<h3 class="sect2"><span class="secnum">10.18.1</span> Data Types and Names for Foreign Key Columns</h3>
<p>You must use the same data type for corresponding columns in the dependent and referenced tables. The column names need not match.</p>
</div>
<!-- class="sect2" -->
<div id="ADFNS306" class="sect2"><a id="sthref581"></a>
<h3 class="sect2"><span class="secnum">10.18.2</span> Limit on Columns in Composite Foreign Keys</h3>
<p>Because foreign keys reference primary and unique keys of the parent table, and <code dir="ltr">PRIMARY</code> <code dir="ltr">KEY</code> and <code dir="ltr">UNIQUE</code> key constraints are enforced using indexes, composite foreign keys are limited to 32 columns.</p>
</div>
<!-- class="sect2" -->
<div id="ADFNS307" class="sect2"><a id="sthref582"></a>
<h3 class="sect2"><span class="secnum">10.18.3</span> Foreign Key References Primary Key by Default</h3>
<p>If the column list is not included in the <code dir="ltr">REFERENCES</code> option when defining a <code dir="ltr">FOREIGN</code> <code dir="ltr">KEY</code> constraint (single column or composite), then Oracle Database assumes that you intend to reference the primary key of the specified table. Alternatively, you can explicitly specify the column(s) to reference in the parent table within parentheses. Oracle Database automatically checks to verify that this column list references a primary or unique key of the parent table. If it does not, then an informative error is returned.</p>
</div>
<!-- class="sect2" -->
<a id="i1006987"></a>
<div id="ADFNS308" class="sect2">
<h3 class="sect2"><span class="secnum">10.18.4</span> Privileges Required to Create FOREIGN KEY Constraints</h3>
<p><a id="sthref583"></a>To create a <code dir="ltr">FOREIGN</code> <code dir="ltr">KEY</code> constraint, the creator of the constraint must have privileged access to the parent and child tables.</p>
<ul>
<li>
<p><span class="glossaryterm">Parent Table</span> The creator of the referential integrity constraint must own the parent table or have <code dir="ltr">REFERENCES</code> object privileges on the columns that constitute the parent key of the parent table.</p>
</li>
<li>
<p><span class="glossaryterm">Child Table</span> The creator of the referential integrity constraint must have the ability to create tables (that is, the <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> or <code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">TABLE</code> system privilege) or the ability to alter the child table (that is, the <code dir="ltr">ALTER</code> object privilege for the child table or the <code dir="ltr">ALTER</code> <code dir="ltr">ANY</code> <code dir="ltr">TABLE</code> system privilege).</p>
</li>
</ul>
<p>In both cases, necessary privileges cannot be obtained through a role; they must be explicitly granted to the creator of the constraint.</p>
<p>These restrictions allow:</p>
<ul>
<li>
<p>The owner of the child table to explicitly decide which constraints are enforced and which other users can create constraints</p>
</li>
<li>
<p>The owner of the parent table to explicitly decide if foreign keys can depend on the primary and unique keys in her tables</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="ADFNS309" class="sect2"><a id="sthref584"></a>
<h3 class="sect2"><span class="secnum">10.18.5</span> Choosing How Foreign Keys Enforce Referential Integrity</h3>
<p><a id="sthref585"></a>Oracle Database allows different types of referential integrity actions to be enforced, as specified with the definition of a <code dir="ltr">FOREIGN</code> <code dir="ltr">KEY</code> constraint:</p>
<ul>
<li>
<p><span class="glossaryterm">Prevent Delete or Update of Parent Key</span> The default setting prevents the deletion or update of a parent key if there is a row in the child table that references the key. For example:</p>
<pre dir="ltr">CREATE TABLE Emp_tab (
FOREIGN KEY (Deptno) REFERENCES Dept_tab);
 
</pre></li>
<li>
<p><span class="glossaryterm">Delete Child Rows When Parent Key Deleted</span> The <code dir="ltr">ON</code> <code dir="ltr">DELETE</code> <code dir="ltr">CASCADE</code> action allows parent key data that is referenced from the child table to be deleted, but not updated. When data in the parent key is deleted, all rows in the child table that depend on the deleted parent key values are also deleted. To specify this referential action, include the <code dir="ltr">ON</code> <code dir="ltr">DELETE</code> <code dir="ltr">CASCADE</code> option in the definition of the <code dir="ltr">FOREIGN</code> <code dir="ltr">KEY</code> constraint. For example:</p>
<pre dir="ltr">CREATE TABLE Emp_tab (
FOREIGN KEY (Deptno) REFERENCES Dept_tab
ON DELETE CASCADE);
</pre></li>
<li>
<p><span class="glossaryterm">Set Foreign Keys to Null When Parent Key Deleted</span> The <code dir="ltr">ON</code> <code dir="ltr">DELETE</code> <code dir="ltr">SET</code> <code dir="ltr">NULL</code> action allows data that references the parent key to be deleted, but not updated. When referenced data in the parent key is deleted, all rows in the child table that depend on those parent key values have their foreign keys set to <code dir="ltr">NULL</code>. To specify this referential action, include the <code dir="ltr">ON</code> <code dir="ltr">DELETE</code> <code dir="ltr">SET</code> <code dir="ltr">NULL</code> option in the definition of the <code dir="ltr">FOREIGN</code> <code dir="ltr">KEY</code> constraint. For example:</p>
<pre dir="ltr">CREATE TABLE Emp_tab (
FOREIGN KEY (Deptno) REFERENCES Dept_tab  
ON DELETE SET NULL); 
</pre></li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BEIGAGDB"></a>
<div id="ADFNS00613" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">10.19</span> Viewing Information About Constraints</h2>
<p><a id="sthref586"></a>To find the names of constraints, what columns they affect, and other information to help you manage them, query the static data dictionary views <code dir="ltr">*_CONSTRAINTS</code> and <code dir="ltr">*_CONS_COLUMNS</code>, as in <a href="#BEIHBHDA">Example 10-14</a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<span class="italic">Oracle Database Reference</span> for information about <a class="olink REFRN20047" href="../REFRN/GUID-9C96DA92-CFE0-4A3F-9061-C5ED17B43EFE.htm#REFRN20047"><code dir="ltr">*_CONSTRAINTS</code></a> and <a class="olink REFRN20045" href="../REFRN/GUID-5B08133E-40D0-4A9E-9033-BFCC1493BA3F.htm#REFRN20045"><code dir="ltr">*_CONS_COLUMNS</code></a></div>
<div id="ADFNS310" class="example">
<p class="titleinexample"><a id="BEIHBHDA"></a>Example 10-14 Viewing Information About Constraints</p>
<pre dir="ltr">DROP TABLE DeptTab;
CREATE TABLE DeptTab (
  Deptno  NUMBER(3) PRIMARY KEY,
  Dname   VARCHAR2(15),
  Loc     VARCHAR2(15),
  CONSTRAINT uk_DeptTab_Dname_Loc UNIQUE (Dname, Loc),
  CONSTRAINT c_DeptTab_Loc
  CHECK (Loc IN (&#39;NEW YORK&#39;, &#39;BOSTON&#39;, &#39;CHICAGO&#39;))
);
 
DROP TABLE EmpTab; 
CREATE TABLE EmpTab (
  Empno    NUMBER(5) PRIMARY KEY,
  Ename    VARCHAR2(15) NOT NULL,
  Job      VARCHAR2(10),
  Mgr      NUMBER(5) CONSTRAINT r_EmpTab_Mgr
             REFERENCES EmpTab ON DELETE CASCADE,
  Hiredate DATE,
  Sal      NUMBER(7,2),
  Comm     NUMBER(5,2),
  Deptno   NUMBER(3) NOT NULL
  CONSTRAINT r_EmpTab_Deptno REFERENCES DeptTab
);
 
-- Format columns (optional):
 
COLUMN CONSTRAINT_NAME   FORMAT A20;
COLUMN CONSTRAINT_TYPE   FORMAT A4 HEADING &#39;TYPE&#39;;
COLUMN TABLE_NAME        FORMAT A10;
COLUMN R_CONSTRAINT_NAME FORMAT A17;
COLUMN SEARCH_CONDITION  FORMAT A40;
COLUMN COLUMN_NAME       FORMAT A12;
</pre>
<p>List accessible constraints in DeptTab and EmpTab:</p>
<pre dir="ltr">SELECT CONSTRAINT_NAME, CONSTRAINT_TYPE, TABLE_NAME, R_CONSTRAINT_NAME
FROM USER_CONSTRAINTS
WHERE (TABLE_NAME = &#39;DEPTTAB&#39; OR TABLE_NAME = &#39;EMPTAB&#39;)
ORDER BY CONSTRAINT_NAME;
 
</pre>
<p>Result:</p>
<pre dir="ltr">CONSTRAINT_NAME      TYPE TABLE_NAME R_CONSTRAINT_NAME
-------------------- ---- ---------- -----------------
C_DEPTTAB_LOC        C    DEPTTAB
R_EMPTAB_DEPTNO      R    EMPTAB     SYS_C006286
R_EMPTAB_MGR         R    EMPTAB     SYS_C006290
SYS_C006286          P    DEPTTAB
SYS_C006288          C    EMPTAB
SYS_C006289          C    EMPTAB
SYS_C006290          P    EMPTAB
UK_DEPTTAB_DNAME_LOC U    DEPTTAB
 
8 rows selected.
 
</pre>
<p>Distinguish between <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> and <code dir="ltr">CHECK</code> constraints in <code dir="ltr">DeptTab</code> and <code dir="ltr">EmpTab</code>:</p>
<pre dir="ltr">SELECT CONSTRAINT_NAME, SEARCH_CONDITION
FROM USER_CONSTRAINTS
WHERE (TABLE_NAME = &#39;DEPTTAB&#39; OR TABLE_NAME = &#39;EMPTAB&#39;)
AND CONSTRAINT_TYPE = &#39;C&#39;
ORDER BY CONSTRAINT_NAME;
 
</pre>
<p>Result:</p>
<pre dir="ltr">CONSTRAINT_NAME      SEARCH_CONDITION
-------------------- ----------------------------------------
C_DEPTTAB_LOC        Loc IN (&#39;NEW YORK&#39;, &#39;BOSTON&#39;, &#39;CHICAGO&#39;)
SYS_C006288          &#34;ENAME&#34; IS NOT NULL
SYS_C006289          &#34;DEPTNO&#34; IS NOT NULL
 
3 rows selected.
 
</pre>
<p>For <code dir="ltr">DeptTab</code> and <code dir="ltr">EmpTab</code>, list columns that constitute constraints:</p>
<pre dir="ltr">SELECT CONSTRAINT_NAME, TABLE_NAME, COLUMN_NAME
FROM USER_CONS_COLUMNS
WHERE (TABLE_NAME = &#39;DEPTTAB&#39; OR TABLE_NAME = &#39;EMPTAB&#39;)
ORDER BY CONSTRAINT_NAME;
 
</pre>
<p>Result:</p>
<pre dir="ltr">CONSTRAINT_NAME      TABLE_NAME COLUMN_NAME
-------------------- ---------- ------------
C_DEPTTAB_LOC        DEPTTAB    LOC
R_EMPTAB_DEPTNO      EMPTAB     DEPTNO
R_EMPTAB_MGR         EMPTAB     MGR
SYS_C006286          DEPTTAB    DEPTNO
SYS_C006288          EMPTAB     ENAME
SYS_C006289          EMPTAB     DEPTNO
SYS_C006290          EMPTAB     EMPNO
UK_DEPTTAB_DNAME_LOC DEPTTAB    LOC
UK_DEPTTAB_DNAME_LOC DEPTTAB    DNAME
 
9 rows selected.
</pre></div>
<!-- class="example" -->
<p>Note that:</p>
<ul>
<li>
<p>Some constraint names are user specified (such as <code dir="ltr">UK_DEPTTAB_DNAME_LOC</code>), while others are system specified (such as <code dir="ltr">SYS_C006290</code>).</p>
</li>
<li>
<p>Each constraint type is denoted with a different character in the <code dir="ltr">CONSTRAINT_TYPE</code> column. This table summarizes the characters used for each constraint type:</p>
<div class="inftblinformal">
<table class="cellalignment296" title="CONSTRAINT_TYPE column characters" summary="This table summarizes CONSTRAINT_TYPE column characters." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t31">Constraint Type</th>
<th class="cellalignment294" id="r1c2-t31">Character</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t31" headers="r1c1-t31"><code dir="ltr">PRIMARY</code> <code dir="ltr">KEY</code></td>
<td class="cellalignment295" headers="r2c1-t31 r1c2-t31"><code dir="ltr">P</code></td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t31" headers="r1c1-t31"><code dir="ltr">UNIQUE</code> <code dir="ltr">KEY</code></td>
<td class="cellalignment295" headers="r3c1-t31 r1c2-t31"><code dir="ltr">U</code></td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t31" headers="r1c1-t31"><code dir="ltr">FOREIGN</code> <code dir="ltr">KEY</code></td>
<td class="cellalignment295" headers="r4c1-t31 r1c2-t31"><code dir="ltr">R</code></td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t31" headers="r1c1-t31"><code dir="ltr">CHECK</code>, <code dir="ltr">NOT</code> <code dir="ltr">NULL</code></td>
<td class="cellalignment295" headers="r5c1-t31 r1c2-t31"><code dir="ltr">C</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
An additional constraint type is indicated by the character &#34;<code dir="ltr">V</code>&#34; in the <code dir="ltr">CONSTRAINT_TYPE</code> column. This constraint type corresponds to constraints created using the <code dir="ltr">WITH</code> <code dir="ltr">CHECK</code> <code dir="ltr">OPTION</code> for views.</div>
</li>
</ul>
<p>These constraints are explicitly listed in the <code dir="ltr">SEARCH_CONDITION</code> column:</p>
<ul>
<li>
<p><code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraints</p>
</li>
<li>
<p>The conditions for user-defined <code dir="ltr">CHECK</code> constraints</p>
</li>
</ul>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment286">
<tr>
<td class="cellalignment295">
<table class="cellalignment291">
<tr>
<td class="cellalignment290"><a href="adfns_indexes.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment290"><a href="adfns_part_plsql.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment298">
<table class="cellalignment289">
<tr>
<td class="cellalignment290"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment290"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment290"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment290"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment290"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment290"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>