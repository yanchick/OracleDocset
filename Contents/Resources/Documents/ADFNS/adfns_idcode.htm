<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-71"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Using%20the%20Identity%20Code%20Package"></a><title>Using the Identity Code Package</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1080"/>
<meta name="dcterms.created" content="2016-05-05T16:23:35Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Development Guide"/>
<meta name="dcterms.identifier" content="E41452-07"/>
<meta name="dcterms.isVersionOf" content="ADFNS"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="adfns_odbc.htm" title="Previous" type="text/html"/>
<link rel="Next" href="adfns_dependencies.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41452-07.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">33/38</span> <!-- End Header -->
<div id="ADFNS019" class="chapter"><a id="BABDGHCD"></a>
<h1 class="chapter"><span class="secnum">22</span> Using the Identity Code Package</h1>
<p><a id="sthref1041"></a>The Identity Code Package is a feature in the Oracle Database that offers tools and techniques to store, retrieve, encode, decode, and translate between various product or identity codes, including Electronic Product Code (EPC), in an Oracle Database. The Identity Code Package provides data types, metadata tables and views, and PL/SQL packages for storing EPC standard RFID tags or new types of RFID tags in a user table.</p>
<p>The Identity Code Package empowers Oracle Database with the knowledge to recognize EPC coding schemes, support efficient storage and component level retrieval of EPC data, and comply with the EPCglobal Tag Data Translation 1.0 (TDT) standard that defines how to decode, encode, and translate between various EPC RFID tag representations.</p>
<p>The Identity Code Package also provides an extensible framework that allows developers to use pre-existing coding schemes with their applications that are not included in the EPC standard and make the Oracle Database adaptable to these older systems and to any evolving identity codes that may some day be part of a future EPC standard.</p>
<p>The Identity Code Package also lets developers create their own identity codes by first registering the encoding category, registering the encoding type, and then registering the components associated with each encoding type.</p>
<p>Topics:</p>
<ul>
<li>
<p><a href="#CHDGCJAC">Identity Concepts</a></p>
</li>
<li>
<p><a href="#BGBEIHJE">What is the Identity Code Package?</a></p>
</li>
<li>
<p><a href="#BCGBAHIJ">Using the Identity Code Package</a></p>
</li>
<li>
<p><a href="#BCGCAAAF">Identity Code Package Types</a></p>
</li>
<li>
<p><a href="#BCGIDGIE">DBMS_MGD_ID_UTL Package</a></p>
</li>
<li>
<p><a href="#BCGHGAGG">Identity Code Metadata Tables and Views</a></p>
</li>
<li>
<p><a href="#BCGJIDEJ">Electronic Product Code (EPC) Concepts</a></p>
</li>
<li>
<p><a href="#CHDJJJGG">Oracle Database Tag Data Translation Schema</a></p>
</li>
</ul>
<a id="CHDGCJAC"></a>
<div id="ADFNS1701" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">22.1</span> Identity Concepts</h2>
<p><a id="sthref1042"></a>A database object <code dir="ltr">MGD_ID</code> is defined that lets users use EPC standard identity codes and use their own existing identity codes. See <a href="#BCGJIDEJ">Section 22.7</a> for a brief description of EPC concepts. The <code dir="ltr">MGD_ID</code> object serves as the base code object to which belong certain categories, or types of the RFID tag, such as the EPC category, NASA category, and many other categories. Each category has a set of tag schemes or documents that define tag representation structures and their components. For the EPC category, the metadata needed to define encoding schemes (SGTIN-64, SGTIN-96, GID-96, and so on) representing different encoding types (defined in the EPC standard v1.1) is loaded by default into the database. Users can define encoding their own categories and schemes as shown in <a href="#CHDEGECG">Figure 22-1</a> and load these into the database as well.</p>
<div id="ADFNS842" class="figure">
<p class="titleinfigure"><a id="CHDEGECG"></a>Figure 22-1 RFID Code Categories and Their Schemes</p>
<img width="510" height="270" src="img/adfns109.gif" alt="Description of Figure 22-1 follows"/><br/>
<a id="sthref1043" href="img_text/adfns109.htm">Description of &#39;&#39;Figure 22-1 RFID Code Categories and Their Schemes&#39;&#39;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>An <code dir="ltr">MGD_ID</code> object contains two attributes, a category_id and a list of components consisting of name-value pairs. When <code dir="ltr">MGD_ID</code> objects are stored, the tag representation must be parsed into these component name-value pairs upon object creation.</p>
<p>EPC standard version 1.1 defines one General Identifier type (GID) that is independent of any known, existing code schemes, five Domain Identifier types that are based on EAN.UCC specifications, and the identity type United States Department of Defense (USDOD). The five EAN.UCC based identity types are the serialized global trade identification number (SGTIN), the serial shipping container code (SSCC), the serialized global location number (SGLN), the global returnable asset identifier (GRAI) and the global individual asset identifier (GIAI).</p>
<p>Except GID, which has one bit-level encoding, all the other identity types each have two encodings depending on their length: 64-bit and 96-bit. So in total there are thirteen different standard encodings for EPC tags. Also, tags can be encoded in representations other than binary, such as the tag URI and pure identity representations.</p>
<p>Each EPC encoding has its own structure and organization, see <a href="#BABIEICJ">Table 22-1</a>. The EPC encoding structure field names relate to the names in the parameter_list parameter name-value pairs in the Identity Code Package API. For example, for SGTIN-64, the structure field names are Filter Value, Company Prefix Index, Item Reference, and Serial Number.</p>
<div id="ADFNS843" class="tblformal">
<p class="titleintable"><a id="sthref1044"></a><a id="BABIEICJ"></a>Table 22-1 General Structure of EPC Encodings</p>
<table class="cellalignment293" title="General Structure of EPC Encodings" summary="This table summarizes EPC encodings." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t2">Encoding Name</th>
<th class="cellalignment294" id="r1c2-t2">Header Length in bits</th>
<th class="cellalignment294" id="r1c3-t2">Field Names (parameter_list name-value pairs) and (length in bits)</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t2" headers="r1c1-t2">
<p>GID-96</p>
</td>
<td class="cellalignment295" headers="r2c1-t2 r1c2-t2">
<p>8</p>
</td>
<td class="cellalignment295" headers="r2c1-t2 r1c3-t2">
<p>General Manager Number (8), Object Class (24), Serial Number (36)</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t2" headers="r1c1-t2">
<p>SGTIN-64</p>
</td>
<td class="cellalignment295" headers="r3c1-t2 r1c2-t2">
<p>2</p>
</td>
<td class="cellalignment295" headers="r3c1-t2 r1c3-t2">
<p>Filter Value (3), Company Prefix Index (14), Item Reference 20), Serial Number (25)</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t2" headers="r1c1-t2">
<p>SGTIN-96</p>
</td>
<td class="cellalignment295" headers="r4c1-t2 r1c2-t2">
<p>8</p>
</td>
<td class="cellalignment295" headers="r4c1-t2 r1c3-t2">
<p>Filter Value (3), Partition (3), Company Prefix (20-40), Item Reference (24-4), Serial Number (38)</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t2" headers="r1c1-t2">
<p>SSCC-64</p>
</td>
<td class="cellalignment295" headers="r5c1-t2 r1c2-t2">
<p>8</p>
</td>
<td class="cellalignment295" headers="r5c1-t2 r1c3-t2">
<p>Filter Value (3), Company Prefix Index (14), Serial Reference (39)</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r6c1-t2" headers="r1c1-t2">
<p>SSCC-96</p>
</td>
<td class="cellalignment295" headers="r6c1-t2 r1c2-t2">
<p>8</p>
</td>
<td class="cellalignment295" headers="r6c1-t2 r1c3-t2">
<p>Filter Value (3), Partition (3), Company Prefix (20-40), Serial Reference (38-18), Unallocated (24)</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r7c1-t2" headers="r1c1-t2">
<p>SGLN-64</p>
</td>
<td class="cellalignment295" headers="r7c1-t2 r1c2-t2">
<p>8</p>
</td>
<td class="cellalignment295" headers="r7c1-t2 r1c3-t2">
<p>Filter Value (3), Company Prefix Index (14), Location Reference (20), Serial Number (19)</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r8c1-t2" headers="r1c1-t2">
<p>SGLN-96</p>
</td>
<td class="cellalignment295" headers="r8c1-t2 r1c2-t2">
<p>8</p>
</td>
<td class="cellalignment295" headers="r8c1-t2 r1c3-t2">
<p>Filter Value (3), Partition (3), Company Prefix (20-40), Location Reference (21-1), Serial Number (41)</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r9c1-t2" headers="r1c1-t2">
<p>GRAI-64</p>
</td>
<td class="cellalignment295" headers="r9c1-t2 r1c2-t2">
<p>8</p>
</td>
<td class="cellalignment295" headers="r9c1-t2 r1c3-t2">
<p>Filter Value (3), Company Prefix Index (14), Asset Type (20), Serial Number (19)</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r10c1-t2" headers="r1c1-t2">
<p>GRAI-96</p>
</td>
<td class="cellalignment295" headers="r10c1-t2 r1c2-t2">
<p>8</p>
</td>
<td class="cellalignment295" headers="r10c1-t2 r1c3-t2">
<p>Filter Value (3), Partition (3), Company Prefix (20-40), Asset Type (24-4), Serial Number (38)</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r11c1-t2" headers="r1c1-t2">
<p>GIAI-64</p>
</td>
<td class="cellalignment295" headers="r11c1-t2 r1c2-t2">
<p>8</p>
</td>
<td class="cellalignment295" headers="r11c1-t2 r1c3-t2">
<p>Filter Value (3), Company Prefix Index (14), Individual Asset Reference (39)</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r12c1-t2" headers="r1c1-t2">
<p>GIAI-96</p>
</td>
<td class="cellalignment295" headers="r12c1-t2 r1c2-t2">
<p>8</p>
</td>
<td class="cellalignment295" headers="r12c1-t2 r1c3-t2">
<p>Filter Value (3), Partition (3), Company Prefix (20-40), Individual Asset Reference (62-42)</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r13c1-t2" headers="r1c1-t2">
<p>USDOD-64</p>
</td>
<td class="cellalignment295" headers="r13c1-t2 r1c2-t2">
<p>8</p>
</td>
<td class="cellalignment295" headers="r13c1-t2 r1c3-t2">
<p>Filter Value (2), Government Managed Identifier (30), Serial Number (24)</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r14c1-t2" headers="r1c1-t2">
<p>USDOD-96</p>
</td>
<td class="cellalignment295" headers="r14c1-t2 r1c2-t2">
<p>8</p>
</td>
<td class="cellalignment295" headers="r14c1-t2 r1c3-t2">
<p>Filter Value (4), Government Managed Identifier (48), Serial Number (36)</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>EPCglobal defines eleven tag schemes (GID-96, SGTIN-64, SGTIN-96, and so on). Each of these schemes has various representations; today, the most often used are BINARY, TAG_URI, and PURE_IDENTITY. For example, information in an SGTIN-64 can be represented in these ways:</p>
<pre dir="ltr">BINARY: 1001100000000000001000001110110001000010000011111110011000110010
PURE_IDENTITY:  urn:epc:id:sgtin:0037000.030241.1041970
TAG_URI: urn:epc:tag:sgtin-64:3.0037000.030241.1041970
LEGACY: gtin=00037000302414;serial=1041970
ONS_HOSTNAME: 030241.0037000.sgtin.id.example.com
</pre>
<p>Some representations contain all information about the tag (<code dir="ltr">BINARY</code> and <code dir="ltr">TAG_URI</code>), while other representations contain partial information (<code dir="ltr">PURE_IDENTITY</code>). It is therefore possible to translate a tag from its <code dir="ltr">TAG_URI</code> to its <code dir="ltr">PURE_IDENTITY</code> representation, but it is not possible to translate in the other direction without more information being provided, namely the filter value must be supplied.</p>
<p>EPCglobal released a Tag Data Translation 1.0 (TDT) standard that defines how to decode, encode, and translate between various EPC RFID tag representations. Decoding refers to parsing a given representation into field/value pairs, and encoding refers to reconstructing representations from these fields. Translating refers to decoding one representation and instantly encoding it into another.TDT defines this information using a set of XML files, each referred to as a scheme. For example, the SGTIN-64 scheme defines how to decode, encode, and translate between various SGTIN-64 representations, such as binary and pure identity. For details about the EPCglobal TDT schema, see the EPCglobal Tag Data Translation specification.</p>
<p>A key feature of the TDT specification is its ability to define any EPC scheme using the same XML schema. This approach creates a standard way of defining EPC metadata that RFID applications can then use to write their parsers, encoders, and translators. When the application is written according to the TDT specification, it must be able to update its set of EPC tag schemes and modify its action according to the metadata.</p>
<p>The Oracle Database metadata structure is similar, but not identical to the TDT standard. To fit the EPCglobal TDT specification, the Oracle RFID package must be able to ingest any TDT compatible scheme and seamlessly translate it into the generic Oracle Database defined metadata. See the <code dir="ltr">EPC_TO_ORACLE</code> Function in <a href="#CACHGFGD">Table 22-4</a> for more information.</p>
<p>Reconstructing tag representation from fields, or in other words, encoding tag data into predefined representations is easily accomplished using the <code dir="ltr">MGD_ID</code>.<code dir="ltr">format</code> function. Likewise, the decoding of tag representations into <code dir="ltr">MGD_ID</code> objects and then encoding these objects into tag representations is also easily accomplished using the <code dir="ltr">MGDID</code>.<code dir="ltr">translate</code> function. See the <code dir="ltr">FORMAT</code> Member Function and the <code dir="ltr">TRANSLATE</code> Static Function in <a href="#CACHGFDG">Table 22-3</a> for more information.</p>
<p>Because the EPCglobal TDT standard is powerful and highly extensible, the Oracle RFID standard metadata is a close relative of the TDT specification. See <a href="#CHDJJJGG">Section 22.8</a> for the actual Oracle Database TDT XML schema. Developers can refer to this Oracle Database TDT XML schema to define their own tag structures.</p>
<p><a href="#CHDHCEGF">Figure 22-2</a> shows the Oracle Database <a id="sthref1045"></a>Tag Data Translation Markup Language Schema diagram.</p>
<div id="ADFNS844" class="figure">
<p class="titleinfigure"><a id="CHDHCEGF"></a>Figure 22-2 Oracle Database Tag Data Translation Markup Language Schema</p>
<img width="174" height="237" src="img/adfns108.gif" alt="Description of Figure 22-2 follows"/><br/>
<a id="sthref1046" href="img_text/adfns108.htm">Description of &#39;&#39;Figure 22-2 Oracle Database Tag Data Translation Markup Language Schema&#39;&#39;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>The top level element in a tag data translation xml is &#39;scheme&#39;. Each scheme defines various tag encoding representations, or levels. SGTIN-64 and GID-96 are examples of tag encoding schemes, and <code dir="ltr">BINARY</code> or <code dir="ltr">PURE_IDENTITY</code> are examples of levels within these schemes. Each level has a set of options that define how to parse various representations into fields, and rules that define how to derive values for fields that require additional work, such as an external table lookup or the concatenation of other parsed fields. See the EPCGlobal Tag Translator Specification for more information.</p>
</div>
<!-- class="sect1" -->
<a id="BGBEIHJE"></a>
<div id="ADFNS1702" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">22.2</span> What is the Identity Code Package?</h2>
<p>The Identity Code Package provides an extensible framework that supports the current RFID tags with the standard family of EPC bit encodings for the supported encoding types and new and evolving tag encodings that are not included in the current EPC standard.</p>
<p>The Identity Code Package defines these ADTs:</p>
<ul>
<li>
<p><code dir="ltr">MGD_ID</code> -- defines these (see <code dir="ltr">MGD_ID</code> ADT in <a href="#BABHBJCF">Table 22-2</a> for more information):</p>
<ul>
<li>
<p>Two attributes, <code dir="ltr">category_id</code> and <code dir="ltr">components</code>.</p>
</li>
<li>
<p>Four <code dir="ltr">MGD_ID</code> constructor functions for constructing identity code type objects to represent RFID tags.</p>
</li>
<li>
<p>A set of member subprograms for operating on these ADTs.</p>
</li>
</ul>
<p><a href="#BCGBAHIJ">Section 22.3</a> describes how to use these ADTs and member functions.</p>
<p><a href="#BCGCAAAF">Section 22.4</a> and <a href="#BCGIDGIE">Section 22.5</a> briefly describe the reference information for these ADTs along with a set of utility subprograms. See <a class="olink ARPLS413" href="../ARPLS/t_mgd_id.htm#ARPLS413"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for detailed reference information.</p>
</li>
<li>
<p><code dir="ltr">MGD_ID_COMPONENT</code> &mdash; defines two attributes, <code dir="ltr">comp_name</code>, which identifies the name of the component and <code dir="ltr">comp_value</code>, which identifies the components value.</p>
</li>
<li>
<p><code dir="ltr">MGD_ID_COMPONENT_VARRAY</code> &mdash; defines an array type that can store up to 128 elements of <code dir="ltr">MGD_IDCOMPONENT</code> type, which is used in two constructor functions for creating an identity code type object with a list of components.</p>
</li>
</ul>
<p>The Identity Code Package supports EPC spec v1.1 by supplying the predefined <code dir="ltr">EPC_ENCODING_CATEGORY</code> encoding_category attribute definition with its bit-encoding structures for the supported encoding types. This information is stored as meta information in the supplied encoding metadata views, <code dir="ltr">MGD_USR_ID_CATEGORY</code>, <code dir="ltr">MGD_USR_ID_SCHEME</code>, the read-only views <code dir="ltr">MGD_ID_CATEGORY</code>, <code dir="ltr">MGD_ID_SCHEME</code>, and their underlying tables: <code dir="ltr">MGD_ID_CATEGORY_TAB</code>, <code dir="ltr">MGD_ID_SCHEME_TAB</code>, <code dir="ltr">MGD_ID_XML_VALIDATOR</code>. See these topics and files for more information:</p>
<ul>
<li>
<p><a href="#BCGJIDEJ">Section 22.7</a> describes the EPC spec v1.1 product code and its family of coding schemes.</p>
</li>
<li>
<p><a href="#BCGHGAGG">Section 22.6</a> describes the structure of the identity code meta tables and views and how metadata are used by the Identity Code Package to interpret the various RFID tags.</p>
</li>
<li>
<p>The <code dir="ltr">mgdmeta</code>.<code dir="ltr">sql</code> file describes the meta table data for the <code dir="ltr">EPC_ENCODING_CATEGORY</code> categories and each of its specific encoding schemes.</p>
</li>
</ul>
<p>After storing many thousands of RFID tags into the column of <code dir="ltr">MGD_ID</code> column type of your user table, you can improve query performance by creating an index on this column. See these topics for more information:</p>
<ul>
<li>
<p><a href="#CHDHGDFE">Section 22.3.2</a> describes how to create a function based index or bitmap function based index using the member functions of the <code dir="ltr">MGD_ID</code> ADT.</p>
</li>
</ul>
<p>The Identity Code Package provides a utility package that consists of various utility subprograms. See this topic for more information:</p>
<ul>
<li>
<p><a href="#BCGCAAAF">Section 22.4</a> and <a href="#BCGIDGIE">Section 22.5</a> describes each of the member subprograms. A proxy utility sets and removes proxy information. A metadata utility gets a category ID, refreshes a tag scheme for a category, removes a tag scheme for a category, and validates a tag scheme. A conversion utility translates standard EPCglobal Tag Data Translation (TDT) files into Oracle Database TDT files.</p>
</li>
</ul>
<p>The Identity Code Package is extensible and lets you create your own identity code types for your new or evolving RFID tags. You can define your identity code types, <code dir="ltr">catagory_id</code> attribute values, and components structures for your own encoding types. See these topics for more information:</p>
<ul>
<li>
<p><a href="#CHDJIGJC">Section 22.3.4.1</a> describes how to create your own identity codes by first registering the encoding category, and then registering the schemes associated to the encoding category.</p>
</li>
<li>
<p><a href="#BCGHGAGG">Section 22.6</a> describes the structure of the identity code meta tables and views and how to register meta information by storing it in the supplied metadata tables and views.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="BCGBAHIJ"></a>
<div id="ADFNS1703" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">22.3</span> Using the Identity Code Package</h2>
<p class="subhead2"><a id="ADFNS1260"></a>Topics:</p>
<ul>
<li>
<p><a href="#CHDJBDJI">Storing RFID Tags in Oracle Database Using MGD_ID ADT</a></p>
</li>
<li>
<p><a href="#CHDHGDFE">Building a Function-Based Index Using the Member Functions of the MGD_ID Column Type</a></p>
</li>
<li>
<p><a href="#CHDCFFDC">Using MGD_ID ADT Functions</a></p>
</li>
<li>
<p><a href="#CHDDFHED">Defining a Category of Identity Codes and Adding Encoding Schemes to an Existing Category</a></p>
</li>
</ul>
<a id="CHDJBDJI"></a>
<div id="ADFNS845" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">22.3.1</span> Storing RFID Tags in Oracle Database Using MGD_ID ADT</h3>
<p class="subhead2"><a id="ADFNS1261"></a>Topics:</p>
<ul>
<li>
<p><a href="#CHDFEJAC">Creating a Table with MGD_ID Column Type and Storing EPC Tag Encodings in the Column</a></p>
</li>
<li>
<p><a href="#CHDGFGAI">Constructing MGD_ID Objects to Represent RFID Tags</a></p>
</li>
<li>
<p><a href="#CHDJBEBE">Inserting an MGD_ID Object into a Database Table</a></p>
</li>
<li>
<p><a href="#CHDJHJIH">Querying MGD_ID Column Type</a></p>
</li>
</ul>
<a id="CHDFEJAC"></a>
<div id="ADFNS846" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">22.3.1.1</span> Creating a Table with MGD_ID Column Type and Storing EPC Tag Encodings in the Column</h4>
<p>You can create tables using <code dir="ltr">MGD_ID</code> as the column type to represent RFID tags, for example:</p>
<p>Example 1. Using the <code dir="ltr">MGD_ID</code> column type:</p>
<pre dir="ltr">CREATE TABLE Warehouse_info (
             Code          MGD_ID,
             Arrival_time  TIMESTAMP, 
             Location      VARCHAR2(256);
             ...); 
</pre>
<p>SQL*Plus command:</p>
<pre dir="ltr">describe warehouse_info;
</pre>
<p>Result:</p>
<pre dir="ltr">Name                                      Null?    Type
----------------------------------------- -------- ----------------------------
CODE                                      NOT NULL MGDSYS.MGD_ID
ARRIVAL_TIME                                       TIMESTAMP(6)
LOCATION                                           VARCHAR2(256)
</pre></div>
<!-- class="sect3" -->
<a id="CHDGFGAI"></a>
<div id="ADFNS847" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">22.3.1.2</span> Constructing MGD_ID Objects to Represent RFID Tags</h4>
<p>There are several ways to construct <code dir="ltr">MGD_ID</code> objects:</p>
<ul>
<li>
<p><a href="#CHDBCDHI">Constructing an MGD_ID Object (SGTIN-64) Passing in the Category ID and a List of Components</a></p>
</li>
<li>
<p><a href="#CHDFGEHG">Constructing an MGD_ID object (SGTIN-64) and Passing in the Category ID, the Tag Identifier, and the List of Additional Required Parameters</a></p>
</li>
<li>
<p><a href="#CHDECACE">Constructing an MGD_ID object (SGTIN-64) and Passing in the Category Name, Category Version (if null, then the latest version is used), and a List of Components</a></p>
</li>
<li>
<p><a href="#BCGDFIHD">Constructing an MGD_ID object (SGTIN-64) and Passing in the Category Name and Category Version, the Tag Identifier, and the List of Additional Required Parameters</a></p>
</li>
</ul>
<a id="CHDBCDHI"></a>
<div id="ADFNS848" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4"><span class="secnum">22.3.1.2.1</span> Constructing an MGD_ID Object (SGTIN-64) Passing in the Category ID and a List of Components</h5>
<p>If a RFID tag complies to the EPC standard, an <code dir="ltr">MGD_ID</code> object can be created using its category ID and a list of components. For example:</p>
<pre dir="ltr">call DBMS_MGD_ID_UTL.set_proxy(&#39;example.com&#39;, &#39;80&#39;);
call DBMS_MGD_ID_UTL.refresh_category(&#39;1&#39;);
select MGD_ID (&#39;1&#39;, 
               MGD_ID_COMPONENT_VARRAY(
               MGD_ID_COMPONENT(&#39;companyprefix&#39;,&#39;0037000&#39;),
               MGD_ID_COMPONENT(&#39;itemref&#39;,&#39;030241&#39;),
               MGD_ID_COMPONENT(&#39;serial&#39;,&#39;1041970&#39;),
               MGD_ID_COMPONENT(&#39;schemes&#39;,&#39;SGTIN-64&#39;)
              )
             ) from DUAL;
call DBMS_MGD_ID_UTL.remove_proxy();

@constructor11.sql
.
.
.
MGD_ID (&#39;1&#39;, MGD_ID_COMPONENT_VARRAY
        (MGD_ID_COMPONENT(&#39;companyprefix&#39;, &#39;0037000&#39;),
        MGD_ID_COMPONENT(&#39;itemref&#39;, &#39;030241&#39;), 
        MGD_ID_COMPONENT(&#39;serial&#39;, &#39;1041970&#39;),
        MGD_ID_COMPONENT(&#39;schemes&#39;, &#39;SGTIN-64&#39;)))
.
.
.
</pre></div>
<!-- class="sect4" -->
<a id="CHDFGEHG"></a>
<div id="ADFNS849" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4"><span class="secnum">22.3.1.2.2</span> Constructing an MGD_ID object (SGTIN-64) and Passing in the Category ID, the Tag Identifier, and the List of Additional Required Parameters</h5>
<p>Use this constructor when there is a list of additional parameters required to create the <code dir="ltr">MGD_ID</code> object. For example:</p>
<pre dir="ltr">call DBMS_MGD_ID_UTL.set_proxy(&#39;example.com&#39;, &#39;80&#39;);
call DBMS_MGD_ID_UTL.refresh_category(&#39;1&#39;);
select MGD_ID(&#39;1&#39;, 
              &#39;urn:epc:id:sgtin:0037000.030241.1041970&#39;, 
              &#39;filter=3;scheme=SGTIN-64&#39;) from DUAL;
call DBMS_MGD_ID_UTL.remove_proxy();


@constructor22.sql
.
.
.
MGD_ID(&#39;1&#39;, MGD_ID_COMPONENT_VARRAY(MGD_ID_COMPONENT(&#39;filter&#39;, &#39;3&#39;), 
       MGD_ID_COMPONENT(&#39;schemes&#39;, &#39;SGTIN-64&#39;), 
       MGD_ID_COMPONENT(&#39;companyprefixlength&#39;, &#39;7&#39;), 
       MGD_ID_COMPONENT(&#39;companyprefix&#39;, &#39;0037000&#39;), 
       MGD_ID_COMPONENT(&#39;scheme&#39;, &#39;SGTIN-64&#39;), 
       MGD_ID_COMPONENT(&#39;serial&#39;, &#39;1041970&#39;), 
       MGD_ID_COMPONENT(&#39;itemref&#39;, &#39;030241&#39;)))
.
.
.
</pre></div>
<!-- class="sect4" -->
<a id="CHDECACE"></a>
<div id="ADFNS850" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4"><span class="secnum">22.3.1.2.3</span> Constructing an MGD_ID object (SGTIN-64) and Passing in the Category Name, Category Version (if null, then the latest version is used), and a List of Components</h5>
<p>Use this constructor when a category version must be specified along with a category ID and a list of components. For example:</p>
<pre dir="ltr">call DBMS_MGD_ID_UTL.set_proxy(&#39;example.com&#39;, &#39;80&#39;);
call DBMS_MGD_ID_UTL.refresh_category
  (DBMS_MGD_ID_UTL.get_category_id(&#39;EPC&#39;, NULL));
select MGD_ID(&#39;EPC&#39;, NULL, 
              MGD_ID_COMPONENT_VARRAY(
              MGD_ID_COMPONENT(&#39;companyprefix&#39;,&#39;0037000&#39;),
              MGD_ID_COMPONENT(&#39;itemref&#39;,&#39;030241&#39;),
              MGD_ID_COMPONENT(&#39;serial&#39;,&#39;1041970&#39;),
              MGD_ID_COMPONENT(&#39;schemes&#39;,&#39;SGTIN-64&#39;)
             )
            ) from DUAL;
call DBMS_MGD_ID_UTL.remove_proxy();

@constructor33.sql
.
.
.
MGD_ID(&#39;1&#39;, MGD_ID_COMPONENT_VARRAY
             (MGD_ID_COMPONENT(&#39;companyprefix&#39;, &#39;0037000&#39;),
              MGD_ID_COMPONENT(&#39;itemref&#39;, &#39;030241&#39;), 
              MGD_ID_COMPONENT(&#39;serial&#39;, &#39;1041970&#39;),
              MGD_ID_COMPONENT(&#39;schemes&#39;, &#39;SGTIN-64&#39;)
             )
       )
.
.
.
</pre></div>
<!-- class="sect4" -->
<a id="BCGDFIHD"></a>
<div id="ADFNS851" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4"><span class="secnum">22.3.1.2.4</span> Constructing an MGD_ID object (SGTIN-64) and Passing in the Category Name and Category Version, the Tag Identifier, and the List of Additional Required Parameters</h5>
<p>Use this constructor when the category version and an additional list of parameters is required.</p>
<pre dir="ltr">call DBMS_MGD_ID_UTL.set_proxy(&#39;example.com&#39;, &#39;80&#39;);
call DBMS_MGD_ID_UTL.refresh_category
  (DBMS_MGD_ID_UTL.get_category_id(&#39;EPC&#39;, NULL));
select MGD_ID(&#39;EPC&#39;, NULL,
              &#39;urn:epc:id:sgtin:0037000.030241.1041970&#39;, 
              &#39;filter=3;scheme=SGTIN-64&#39;) from DUAL;
call DBMS_MGD_ID_UTL.remove_proxy();

@constructor44.sql
.
.
.
MGD_ID(&#39;1&#39;, MGD_ID_COMPONENT_VARRAY
       (MGD_ID_COMPONENT(&#39;filter&#39;, &#39;3&#39;),
        MGD_ID_COMPONENT(&#39;schemes&#39;, &#39;SGTIN-64&#39;), 
        MGD_ID_COMPONENT(&#39;companyprefixlength&#39;, &#39;7&#39;), 
        MGD_ID_COMPONENT(&#39;companyprefix&#39;, &#39;0037000&#39;), 
        MGD_ID_COMPONENT(&#39;scheme&#39;, &#39;SGTIN-64&#39;), 
        MGD_ID_COMPONENT(&#39;serial&#39;, &#39;1041970&#39;), 
        MGD_ID_COMPONENT(&#39;itemref&#39;, &#39;030241&#39;)
       )
      )
.
.
.
</pre></div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="CHDJBEBE"></a>
<div id="ADFNS852" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">22.3.1.3</span> Inserting an MGD_ID Object into a Database Table</h4>
<p>This example shows how to populate the <code dir="ltr">WAREHOUSE_INFO</code> table by inserting each <code dir="ltr">MGD_ID</code> object into the table along with the additional column values:</p>
<pre dir="ltr">call DBMS_MGD_ID_UTL.set_proxy(&#39;example.com&#39;, &#39;80&#39;);

call DBMS_MGD_ID_UTL.refresh_category
  (DBMS_MGD_ID_UTL.get_category_id(&#39;EPC&#39;, NULL));

INSERT INTO WAREHOUSE_INFO (code, arrival_time, location)
   values (MGDSYS.MGD_ID (&#39;EPC&#39;,
                          NULL,
                          &#39;urn:epc:id:sgtin:0037000.030241.1041970&#39;,
                          null
                         ),
           SYSDATE,
           &#39;SHELF_123&#39;);

INSERT INTO WAREHOUSE_INFO (code, arrival_time, location)
  values (MGDSYS.MGD_ID (&#39;EPC&#39;,
                         NULL,
                         &#39;urn:epc:id:sgtin:0037000.053021.1012353&#39;,
                         null
                        ),
          SYSDATE,
          &#39;SHELF_456&#39;);
INSERT INTO WAREHOUSE_INFO (code, arrival_time, location)
  values (MGDSYS.MGD_ID (&#39;EPC&#39;,
                         NULL,
                         &#39;urn:epc:id:sgtin:0037000.020140.10174832&#39;,
                         null
                        ),
          SYSDATE,
          &#39;SHELF_1034&#39;);

COMMITT;
call DBMS_MGD_ID_UTL.remove_proxy();
</pre></div>
<!-- class="sect3" -->
<a id="CHDJHJIH"></a>
<div id="ADFNS853" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">22.3.1.4</span> Querying MGD_ID Column Type</h4>
<p>There are three ways to query on <code dir="ltr">MGD_ID</code> column type.</p>
<ul>
<li>
<p>Query the <code dir="ltr">MGD_ID</code> column type. Find all items with item reference 030241.</p>
<pre dir="ltr">SELECT location, wi.code.get_component(&#39;itemref&#39;) as itemref, 
                 wi.code.get_component(&#39;serial&#39;) as serial 
FROM warehouse_info wi WHERE wi.code.get_component(&#39;itemref&#39;) = &#39;030241&#39;;

LOCATION       |ITEMREF   |SERIAL
---------------|----------|----------
SHELF_123      |030241    |1041970
</pre></li>
<li>
<p>Query using the member functions of the <code dir="ltr">MGD_ID</code> ADT. Select the pure identity representations of all RFID tags in the table.</p>
<pre dir="ltr">SELECT wi.code.format(null,&#39;PURE_IDENTITY&#39;)
   as PURE_IDENTITY FROM warehouse_info wi;

PURE_IDENTITY
-------------------------------------------------------------------------------
urn:epc:id:sgtin:0037000.030241.1041970
urn:epc:id:gid:0037000.053021.1012353
urn:epc:id:sgtin:0037000.020140.10174832
</pre>
<p>See <a href="#CHDCBAHG">Section 22.3.3.1</a> for more information and see <a href="#CACHGFDG">Table 22-3</a> for a list of member functions.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDHGDFE"></a>
<div id="ADFNS854" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">22.3.2</span> Building a Function-Based Index Using the Member Functions of the MGD_ID Column Type</h3>
<p><a id="sthref1047"></a>You can improve the performance of queries based on a certain component of the RFID tags by creating a function-based index that uses the <code dir="ltr">get_component</code> member function or its variation convenience functions. For example:</p>
<pre dir="ltr">CREATE INDEX warehouseinfo_idx2
  on warehouse_info(code.get_component(&#39;itemref&#39;));
</pre>
<p>You can also improve the performance of queries based on a certain component of the RFID tags by creating a bitmap function based index that uses the <code dir="ltr">get_component</code> member function or its variation convenience functions. For example:</p>
<pre dir="ltr">CREATE BITMAP INDEX warehouseinfo_idx3
  on warehouse_info(code.get_component(&#39;serial&#39;));
</pre></div>
<!-- class="sect2" -->
<a id="CHDCFFDC"></a>
<div id="ADFNS855" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">22.3.3</span> Using MGD_ID ADT Functions</h3>
<p><a id="sthref1048"></a><a id="sthref1049"></a>The <code dir="ltr">MGD_ID</code> ADT contains member subprograms that operate on these ADTs. See <a href="#BABHBJCF">Table 22-2</a> for <code dir="ltr">MGD_ID_COMPONENT</code>, <code dir="ltr">MGD_ID_COMPONENT_VARRAY</code>, <code dir="ltr">MGD_ID</code> ADT reference information. See the <code dir="ltr">mgdtyp</code>.<code dir="ltr">sql</code> file for the <code dir="ltr">MGD_ID</code> ADT definition and its member subprograms.</p>
<p class="subhead2"><a id="ADFNS1262"></a>Topics:</p>
<ul>
<li>
<p><a href="#CHDCBAHG">Using the get_component Function with the MGD_ID Object</a></p>
</li>
<li>
<p><a href="#BABEJGDA">Parsing Tag Data from Standard Representations</a></p>
</li>
<li>
<p><a href="#BABIBIAI">Reconstructing Tag Representations from Fields</a></p>
</li>
<li>
<p><a href="#BABFJCAH">Translating Between Tag Representations</a></p>
</li>
</ul>
<a id="CHDCBAHG"></a>
<div id="ADFNS856" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">22.3.3.1</span> Using the get_component Function with the MGD_ID Object</h4>
<p>The <code dir="ltr">get_component</code> function is defined as follows:</p>
<pre dir="ltr">MEMBER FUNCTION get_component(component_name IN VARCHAR2)
   RETURN VARCHAR2 DETERMINISTIC,
</pre>
<p>Each component in a identity code has a name. It is defined when the code type is registered. See <a href="#CHDDFHED">Section 22.3.4</a> for more information about how to create a identity code type.</p>
<p>The <code dir="ltr">get_component</code> function takes the name of the component, <code dir="ltr">component_name</code> as a parameter, uses the metadata registered in the metadata table to analyze the identity code, and returns the component with the name <code dir="ltr">component_name</code>.</p>
<p>The <code dir="ltr">get_component</code> function can be used in a SQL query. For example, find the current location of the coded item for the component named <code dir="ltr">itemref</code>; or, in other words find all items with the item reference of 03024. Because the code tag has encoded <code dir="ltr">itemref</code> as a component, you can use this SQL query:</p>
<pre dir="ltr">SELECT location,
       w.code.get_component(&#39;itemref&#39;) as itemref,
       w.code.get_component(&#39;serial&#39;)  as serial
FROM   warehouse_info w
       WHERE  w.code.get_component(&#39;itemref&#39;)  = &#39;030241&#39;;

LOCATION       |ITEMREF   |SERIAL
---------------|----------|----------
SHELF_123      |030241    |1041970
</pre>
<p>See <a href="#CACHGFDG">Table 22-3</a> for a list of other member functions.</p>
</div>
<!-- class="sect3" -->
<a id="BABEJGDA"></a>
<div id="ADFNS857" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">22.3.3.2</span> Parsing Tag Data from Standard Representations</h4>
<p>RFID readers read the bit strings stored in the tags. The tag data and other information, such as the reader ID and the time stamp, first go through an edge server to be processed, normalized, and preliminarily filtered. Then, in many application scenarios, the information must be persistently stored and later on be retrieved. The Oracle Database understands the code structures representations of various EPC tags as described in <a href="#BABIEICJ">Table 22-1</a> because these code representation schemes defined in the EPC Standard are preregistered. This gives the Oracle Database the ability to understand all the EPC code schemes and parse various tag representations into fields. Users can also register their own coding structures for the identity codes that use other encoding technologies. In this way the system is extensible.</p>
<p>As mentioned in <a href="#CHDGCJAC">Section 22.1</a>, each of the EPCGlobal tag schemes (GID-96, SGTIN-64, SGTIN-96, and so on) has various representations with the most often used being <code dir="ltr">BINARY</code>, <code dir="ltr">TAG_URI</code>, and <code dir="ltr">PURE_IDENTITY</code>.</p>
<p>Some representations contain all the information about the tag (<code dir="ltr">BINARY</code> and <code dir="ltr">TAG_URI</code>), while representations contain partial information (<code dir="ltr">PURE_IDENTITY</code>). It is therefore possible to translate a tag from it&#39;s <code dir="ltr">TAG_URI</code> to it&#39;s <code dir="ltr">PURE_IDENTITY</code> representation, but it is not possible to translate in the other direction (<code dir="ltr">PURE_IDENTITY</code> to <code dir="ltr">TAG_URI</code>) without supplying more information, namely the filter value.</p>
<p>One MGD_ID constructor takes in four fields, the category name (such as EPC), the category version, the tag identifier (for EPC, the identifier must be in a representation previously described), and a parameter list for any additional parameters required to parse the tag representation. For example, this code creates an MGD_ID object from its BINARY representation.</p>
<pre dir="ltr">SELECT MGD_ID 
   (&#39;EPC&#39;,
    null,
    &#39;1001100000000000001000001110110001000010000011111110011000110010&#39;,
    null
   )
   AS NEW_RFID_CODE FROM DUAL;

NEW_RFID_CODE(CATEGORY_ID, COMPONENTS(NAME, VALUE))
--------------------------------------------------------------------------------
MGD_ID (&#39;1&#39;, 
        MGD_ID_COMPONENT_VARRAY(MGD_ID_COMPONENT(&#39;filter&#39;, &#39;3&#39;), 
        MGD_ID_COMPONENT(&#39;schemes&#39;, &#39;SGTIN-64&#39;), 
        MGD_ID_COMPONENT(&#39;companyprefixlength&#39;, &#39;7&#39;), 
        MGD_ID_COMPONENT(&#39;companyprefix&#39;, &#39;0037000&#39;), 
        MGD_ID_COMPONENT(&#39;companyprefixindex&#39;, &#39;1&#39;), 
        MGD_ID_COMPONENT(&#39;serial&#39;, &#39;1041970&#39;), 
        MGD_ID_COMPONENT(&#39;itemref&#39;, &#39;030241&#39;)
       )
      )
</pre>
<p>For example, an identical object can be created if the call is done with the TAG_URI representation of the tag as follows with the addition of the value of the filter value:</p>
<pre dir="ltr">SELECT MGD_ID (&#39;EPC&#39;,
                null,
                &#39;urn:epc:tag:sgtin-64:3.0037000.030241.1041970&#39;,
                null
              )
  as NEW_RFID_CODE FROM DUAL;

NEW_RFID_CODE(CATEGORY_ID, COMPONENTS(NAME, VALUE))
--------------------------------------------------------------------------------
MGD_ID (&#39;1&#39;, 
        MGD_ID_COMPONENT_VARRAY (
         ( MGD_ID_COMPONENT(&#39;filter&#39;, &#39;3&#39;), 
           MGD_ID_COMPONENT(&#39;schemes&#39;, &#39;SGTIN-64&#39;), 
           MGD_ID_COMPONENT(&#39;companyprefixlength&#39;, &#39;7&#39;), 
           MGD_ID_COMPONENT(&#39;companyprefix&#39;, &#39;0037000&#39;), 
           MGD_ID_COMPONENT(&#39;serial&#39;, &#39;1041970&#39;), 
           MGD_ID_COMPONENT(&#39;itemref&#39;, &#39;030241&#39;)
         )
       )
</pre></div>
<!-- class="sect3" -->
<a id="BABIBIAI"></a>
<div id="ADFNS858" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">22.3.3.3</span> Reconstructing Tag Representations from Fields</h4>
<p>Another useful feature of the Identity Code package is the ability to encode tag data into predefined representations. For example, a warehouse wants to send certain inventory to a retailer, but first it wants to send an invoice that tells the retailer what inventory to expect. The invoice can be a list of pure identity URIs that the warehouse intends to send. If all the inventory in the <code dir="ltr">WAREHOUSE_INFO</code> table is to be sent, this example constructs the desired URIs:</p>
<pre dir="ltr">SELECT wi.code.format (null,&#39;PURE_IDENTITY&#39;) 
  as PURE_IDENTITY FROM warehouse_info wi;

PURE_IDENTITY
--------------------------------------------------------------------------------
urn:epc:id:sgtin:0037000.030241.1041970
urn:epc:id:gid:0037000.053021.1012353
urn:epc:id:sgtin:0037000.020140.10174832
</pre></div>
<!-- class="sect3" -->
<a id="BABFJCAH"></a>
<div id="ADFNS859" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">22.3.3.4</span> Translating Between Tag Representations</h4>
<p>The Identity Code package can decode tag representations into MGD_ID objects and encode these objects into tag representations. These two steps can be combined into one step using the <code dir="ltr">MGD_ID</code>.<code dir="ltr">translate</code> function. Static translation allows for the conversion of an RFID tag from one representation to another. For example:</p>
<pre dir="ltr">SELECT MGD_ID.translate (&#39;EPC&#39;,
                         null,
                         &#39;urn:epc:id:sgtin:0037000.030241.1041970&#39;,
                         &#39;filter=3;scheme=SGTIN-64&#39;,
                         &#39;BINARY&#39;
                        )
  as BINARY FROM DUAL;

BINARY
--------------------------------------------------------------------------------
1001100000000000001000001110110001000010000011111110011000110010
</pre>
<p>In this example, the binary representation contains more information than the pure identity representation. Specifically, it also contains the filter value and in this case the scheme value must also be specified to distinguish SGTIN-64 from SGTIN-96. Thus, the function call must provide the missing filter parameter information and specify the scheme name in order for translation call to succeed.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDDFHED"></a>
<div id="ADFNS860" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">22.3.4</span> Defining a Category of Identity Codes and Adding Encoding Schemes to an Existing Category</h3>
<p class="subhead2"><a id="ADFNS1263"></a><a id="sthref1050"></a>Topics:</p>
<ul>
<li>
<p><a href="#CHDJIGJC">Creating a Category of Identity Codes</a></p>
</li>
<li>
<p><a href="#CHDFIGIC">Adding Two Metadata Schemes to a Newly Created Category</a></p>
</li>
</ul>
<a id="CHDJIGJC"></a>
<div id="ADFNS861" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">22.3.4.1</span> Creating a Category of Identity Codes</h4>
<p>Because the EPCglobal TDT standard is powerful and highly extensible, the Oracle Database RFID standard metadata is a close relative of the TDT specification. Thus, the Identity Code package is extensible: You can create your own categories and tag structures using generic metadata. To create a category of identity codes, use the <code dir="ltr">DBMS_MGD_ID_UTIL</code>.<code dir="ltr">create_category</code> function.</p>
<p>For example, suppose you want to create a category called <code dir="ltr">MGD_SAMPLE_CATEGORY</code>, which has two types of tags, a <code dir="ltr">CONTRACTOR_TAG</code> and an <code dir="ltr">EMPLOYEE_TAG</code>. This category and its two metadata schemes might be used within a company that must grant different access privileges to people who are full time employees from those who are contractors, and thus require that their security software be able to identify quickly between the two badge types at an RFID reader. This script creates a category named <code dir="ltr">MGD_SAMPLE_CATEGORY</code>, with a 1.0 category version, having an agency name as Oracle, with a URI as <code dir="ltr">http://www.oracle.com/mgd/sample</code>. See <a href="#CHDFIGIC">Section 22.3.4.2</a> for an example.</p>
</div>
<!-- class="sect3" -->
<a id="CHDFIGIC"></a>
<div id="ADFNS862" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">22.3.4.2</span> Adding Two Metadata Schemes to a Newly Created Category</h4>
<p>Next, create an <code dir="ltr">CONTRACTOR_TAG</code> metadata scheme such as:</p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;
&lt;TagDataTranslation version=&#34;0.04&#34; date=&#34;2005-04-18T16:05:00Z&#34; 
                    xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema&#34; 
                    xmlns=&#34;oracle.mgd.idcode&#34;&gt;
 &lt;scheme name=&#34;CONTRACTOR_TAG&#34; optionKey=&#34;1&#34; xmlns=&#34;&#34;&gt;
  &lt;level type=&#34;URI&#34; prefixMatch=&#34;mycompany.contractor.&#34;&gt;
   &lt;option optionKey=&#34;1&#34; pattern=&#34;mycompany.contractor.([0-9]*).([0-9]*)&#34; 
           grammar=&#34;&#39;&#39;mycompany.contractor.&#39;&#39; contractorID &#39;&#39;.&#39;&#39; divisionID&#34;&gt;
    &lt;field seq=&#34;1&#34; characterSet=&#34;[0-9]*&#34; name=&#34;contractorID&#34;/&gt;
    &lt;field seq=&#34;2&#34; characterSet=&#34;[0-9]*&#34; name=&#34;divisionID&#34;/&gt;
   &lt;/option&gt;
  &lt;/level&gt;
  &lt;level type=&#34;BINARY&#34; prefixMatch=&#34;11&#34;&gt;
   &lt;option optionKey=&#34;1&#34; pattern=&#34;11([01]{7})([01]{6})&#34; 
           grammar=&#34;&#39;&#39;11&#39;&#39; contractorID divisionID &#34;&gt;
    &lt;field seq=&#34;1&#34; characterSet=&#34;[01]*&#34; name=&#34;contractorID&#34;/&gt;
    &lt;field seq=&#34;2&#34; characterSet=&#34;[01]*&#34; name=&#34;divisionID&#34;/&gt;
   &lt;/option&gt;
  &lt;/level&gt;
 &lt;/scheme&gt;
&lt;/TagDataTranslation&gt;
</pre>
<p>The <code dir="ltr">CONTRACTOR_TAG</code> scheme contains two encoding levels, or ways in which the tag can be represented. The first level is <code dir="ltr">URI</code> and the second level is <code dir="ltr">BINARY</code>. The <code dir="ltr">URI</code> representation starts with the prefix &#34;<code dir="ltr">mycompany</code>.<code dir="ltr">contractor</code>.&#34; and is then followed by two numeric fields separated by a period. The names of the two fields are <code dir="ltr">contractorID</code> and <code dir="ltr">divisionID</code>. The pattern field in the option tag defines the parsing structure of the tag <code dir="ltr">URI</code> representation, and the grammar field defines how to reconstruct the URI representation. The <code dir="ltr">BINARY</code> representation can be understood in a similar fashion. This representation starts with the prefix &#34;01&#34; and is then followed by the same two fields, <code dir="ltr">contractorID</code> and <code dir="ltr">divisionID</code>, this time, in their respective binary formats. Given this XML metadata structure, contractor tags can now be decoded from their <code dir="ltr">URI</code> and <code dir="ltr">BINARY</code> representations and the resulting fields can be re-encoded into one of these representations.</p>
<p>The <code dir="ltr">EMPLOYEE_TAG</code> scheme is defined in a similar fashion and is shown as follows.</p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;
&lt;TagDataTranslation version=&#34;0.04&#34; date=&#34;2005-04-18T16:05:00Z&#34; 
                    xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema&#34; 
                    xmlns=&#34;oracle.mgd.idcode&#34;&gt;
 &lt;scheme name=&#34;EMPLOYEE_TAG&#34; optionKey=&#34;1&#34; xmlns=&#34;&#34;&gt;
  &lt;level type=&#34;URI&#34; prefixMatch=&#34;mycompany.employee.&#34;&gt;
   &lt;option optionKey=&#34;1&#34; pattern=&#34;mycompany.employee.([0-9]*).([0-9]*)&#34; 
           grammar=&#34;&#39;&#39;mycompany.employee.&#39;&#39; employeeID &#39;&#39;.&#39;&#39; divisionID&#34;&gt;
    &lt;field seq=&#34;1&#34; characterSet=&#34;[0-9]*&#34; name=&#34;employeeID&#34;/&gt;
    &lt;field seq=&#34;2&#34; characterSet=&#34;[0-9]*&#34; name=&#34;divisionID&#34;/&gt;
   &lt;/option&gt;
  &lt;/level&gt;
  &lt;level type=&#34;BINARY&#34; prefixMatch=&#34;01&#34;&gt;
   &lt;option optionKey=&#34;1&#34; pattern=&#34;01([01]{7})([01]{6})&#34; 
           grammar=&#34;&#39;&#39;01&#39;&#39; employeeID divisionID &#34;&gt;
    &lt;field seq=&#34;1&#34; characterSet=&#34;[01]*&#34; name=&#34;employeeID&#34;/&gt;
    &lt;field seq=&#34;2&#34; characterSet=&#34;[01]*&#34; name=&#34;divisionID&#34;/&gt;
   &lt;/option&gt;
  &lt;/level&gt;
 &lt;/scheme&gt;
&lt;/TagDataTranslation&gt;;
</pre>
<p>To add these schemes to the category ID previously created, use the <code dir="ltr">DBMS_MGD_ID_UTIL</code>.<code dir="ltr">add_scheme</code> function.</p>
<p>This script creates the <code dir="ltr">MGD_SAMPLE_CATEGORY</code> category, adds a contractor scheme and an employee scheme to the <code dir="ltr">MGD_SAMPLE_CATEGORY</code> category, validates the <code dir="ltr">MGD_SAMPLE_CATEGORY</code> scheme, tests the tag translation of the contractor scheme and the employee scheme, then removes the contractor scheme, tests the tag translation of the contractor scheme and this returns the expected exception for the removed contractor scheme, tests the tag translation of the employee scheme and this returns the expected values, then removes the <code dir="ltr">MGD_SAMPLE_CATEGORY</code> category:</p>
<pre dir="ltr">--contents of add_scheme2.sql
SET LINESIZE 160
CALL DBMS_MGD_ID_UTL.set_proxy(&#39;example.com&#39;, &#39;80&#39;);
---------------------------------------------------------------------
---CREATE CATEGORY, ADD_SCHEME, REMOVE_SCHEME, REMOVE_CATEGORY-------
---------------------------------------------------------------------
DECLARE
  amt          NUMBER;
  buf          VARCHAR2(32767);
  pos          NUMBER;
  tdt_xml      CLOB;
  validate_tdtxml VARCHAR2(1042);
  category_id  VARCHAR2(256);
BEGIN
  -- remove the testing category if it exists
  DBMS_MGD_ID_UTL.remove_category(&#39;MGD_SAMPLE_CATEGORY&#39;, &#39;1.0&#39;);
  -- create the testing category &#39;MGD_SAMPLE_CATEGORY&#39;, version 1.0
  category_id := DBMS_MGD_ID_UTL.CREATE_CATEGORY(&#39;MGD_SAMPLE_CATEGORY&#39;, &#39;1.0&#39;, &#39;Oracle&#39;, 
&#39;http://www.oracle.com/mgd/sample&#39;);
  -- add contractor scheme to the category
  DBMS_LOB.CREATETEMPORARY(tdt_xml, true);
  DBMS_LOB.OPEN(tdt_xml, DBMS_LOB.LOB_READWRITE);
 
  buf := &#39;&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;
&lt;TagDataTranslation version=&#34;0.04&#34; date=&#34;2005-04-18T16:05:00Z&#34; 
                    xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema&#34; 
                    xmlns=&#34;oracle.mgd.idcode&#34;&gt;
 &lt;scheme name=&#34;CONTRACTOR_TAG&#34; optionKey=&#34;1&#34; xmlns=&#34;&#34;&gt;
  &lt;level type=&#34;URI&#34; prefixMatch=&#34;mycompany.contractor.&#34;&gt;
   &lt;option optionKey=&#34;1&#34; pattern=&#34;mycompany.contractor.([0-9]*).([0-9]*)&#34; 
           grammar=&#34;&#39;&#39;mycompany.contractor.&#39;&#39; contractorID &#39;&#39;.&#39;&#39; divisionID&#34;&gt;
    &lt;field seq=&#34;1&#34; characterSet=&#34;[0-9]*&#34; name=&#34;contractorID&#34;/&gt;
    &lt;field seq=&#34;2&#34; characterSet=&#34;[0-9]*&#34; name=&#34;divisionID&#34;/&gt;
   &lt;/option&gt;
  &lt;/level&gt;
  &lt;level type=&#34;BINARY&#34; prefixMatch=&#34;11&#34;&gt;
   &lt;option optionKey=&#34;1&#34; pattern=&#34;11([01]{7})([01]{6})&#34; 
           grammar=&#34;&#39;&#39;11&#39;&#39; contractorID divisionID &#34;&gt;
    &lt;field seq=&#34;1&#34; characterSet=&#34;[01]*&#34; name=&#34;contractorID&#34;/&gt;
    &lt;field seq=&#34;2&#34; characterSet=&#34;[01]*&#34; name=&#34;divisionID&#34;/&gt;
   &lt;/option&gt;
  &lt;/level&gt;
 &lt;/scheme&gt;
&lt;/TagDataTranslation&gt;&#39;;

  amt := length(buf);
  pos := 1;
  DBMS_LOB.WRITE(tdt_xml, amt, pos, buf);
  DBMS_LOB.CLOSE(tdt_xml);

  DBMS_MGD_ID_UTL.ADD_SCHEME(category_id, tdt_xml);

  -- add employee scheme to the category
  DBMS_LOB.CREATETEMPORARY(tdt_xml, true);
  DBMS_LOB.OPEN(tdt_xml, DBMS_LOB.LOB_READWRITE);
 
  buf := &#39;&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;
&lt;TagDataTranslation version=&#34;0.04&#34; date=&#34;2005-04-18T16:05:00Z&#34; 
                    xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema&#34; 
                    xmlns=&#34;oracle.mgd.idcode&#34;&gt;
 &lt;scheme name=&#34;EMPLOYEE_TAG&#34; optionKey=&#34;1&#34; xmlns=&#34;&#34;&gt;
  &lt;level type=&#34;URI&#34; prefixMatch=&#34;mycompany.employee.&#34;&gt;
   &lt;option optionKey=&#34;1&#34; pattern=&#34;mycompany.employee.([0-9]*).([0-9]*)&#34; 
           grammar=&#34;&#39;&#39;mycompany.employee.&#39;&#39; employeeID &#39;&#39;.&#39;&#39; divisionID&#34;&gt;
    &lt;field seq=&#34;1&#34; characterSet=&#34;[0-9]*&#34; name=&#34;employeeID&#34;/&gt;
    &lt;field seq=&#34;2&#34; characterSet=&#34;[0-9]*&#34; name=&#34;divisionID&#34;/&gt;
   &lt;/option&gt;
  &lt;/level&gt;
  &lt;level type=&#34;BINARY&#34; prefixMatch=&#34;01&#34;&gt;
   &lt;option optionKey=&#34;1&#34; pattern=&#34;01([01]{7})([01]{6})&#34; 
           grammar=&#34;&#39;&#39;01&#39;&#39; employeeID divisionID &#34;&gt;
    &lt;field seq=&#34;1&#34; characterSet=&#34;[01]*&#34; name=&#34;employeeID&#34;/&gt;
    &lt;field seq=&#34;2&#34; characterSet=&#34;[01]*&#34; name=&#34;divisionID&#34;/&gt;
   &lt;/option&gt;
  &lt;/level&gt;
 &lt;/scheme&gt;
&lt;/TagDataTranslation&gt;&#39;;

  amt := length(buf);
  pos := 1;
  DBMS_LOB.WRITE(tdt_xml, amt, pos, buf);
  DBMS_LOB.CLOSE(tdt_xml);
  DBMS_MGD_ID_UTL.ADD_SCHEME(category_id, tdt_xml);

  -- validate the scheme
  dbms_output.put_line(&#39;Validate the MGD_SAMPLE_CATEGORY Scheme&#39;);
  validate_tdtxml := DBMS_MGD_ID_UTL.validate_scheme(tdt_xml);
  dbms_output.put_line(validate_tdtxml);
  dbms_output.put_line(&#39;Length of scheme xml is: &#39;||DBMS_LOB.GETLENGTH(tdt_xml));

  -- test tag translation of contractor scheme
  dbms_output.put_line(
    mgd_id.translate(&#39;MGD_SAMPLE_CATEGORY&#39;, NULL, 
                     &#39;mycompany.contractor.123.45&#39;, 
                     NULL, &#39;BINARY&#39;));

  dbms_output.put_line(
    mgd_id.translate(&#39;MGD_SAMPLE_CATEGORY&#39;, NULL, 
                     &#39;111111011101101&#39;,
                     NULL, &#39;URI&#39;));

  -- test tag translation of employee scheme
  dbms_output.put_line(
    mgd_id.translate(&#39;MGD_SAMPLE_CATEGORY&#39;, NULL, 
                     &#39;mycompany.employee.123.45&#39;, 
                     NULL, &#39;BINARY&#39;));

  dbms_output.put_line(
    mgd_id.translate(&#39;MGD_SAMPLE_CATEGORY&#39;, NULL, 
                     &#39;011111011101101&#39;,
                     NULL, &#39;URI&#39;));

  DBMS_MGD_ID_UTL.REMOVE_SCHEME(category_id, &#39;CONTRACTOR_TAG&#39;);

  -- Test tag translation of contractor scheme. Doesn&#39;t work any more.
  BEGIN
    dbms_output.put_line(
      mgd_id.translate(&#39;MGD_SAMPLE_CATEGORY&#39;, NULL, 
                       &#39;mycompany.contractor.123.45&#39;, 
                       NULL, &#39;BINARY&#39;));

    dbms_output.put_line(
      mgd_id.translate(&#39;MGD_SAMPLE_CATEGORY&#39;, NULL, 
                       &#39;111111011101101&#39;,
                       NULL, &#39;URI&#39;));
  EXCEPTION 
    WHEN others THEN
      dbms_output.put_line(&#39;Contractor tag translation failed: &#39;||SQLERRM);
  END;

  -- Test tag translation of employee scheme. Still works.
  BEGIN
    dbms_output.put_line(
      mgd_id.translate(&#39;MGD_SAMPLE_CATEGORY&#39;, NULL, 
                       &#39;mycompany.employee.123.45&#39;, 
                       NULL, &#39;BINARY&#39;));
    dbms_output.put_line(
      mgd_id.translate(&#39;MGD_SAMPLE_CATEGORY&#39;, NULL, 
                       &#39;011111011101101&#39;,
                       NULL, &#39;URI&#39;));
  EXCEPTION 
    WHEN others THEN
      dbms_output.put_line(&#39;Employee tag translation failed: &#39;||SQLERRM);
  END;

  -- remove the testing category, which also removes all the associated schemes
  DBMS_MGD_ID_UTL.remove_category(&#39;MGD_SAMPLE_CATEGORY&#39;, &#39;1.0&#39;);
END;
/
SHOW ERRORS;
call DBMS_MGD_ID_UTL.remove_proxy();

@add_scheme3.sql
.
.
.
Validate the MGD_SAMPLE_CATEGORY Scheme
EMPLOYEE_TAG;URI,BINARY;divisionID,employeeID
Length of scheme xml is: 933
111111011101101
mycompany.contractor.123.45
011111011101101
mycompany.employee.123.45
Contractor tag translation failed: ORA-55203: Tag data translation level not found
ORA-06512: at &#34;MGDSYS.DBMS_MGD_ID_UTL&#34;, line 54
ORA-06512: at &#34;MGDSYS.MGD_ID&#34;, line 242
ORA-29532: Java call terminated by uncaught Java
exception: oracle.mgd.idcode.exceptions.TDTLevelNotFound: Matching level not
found for any configured scheme
011111011101101
mycompany.employee.123.45
.
.
.
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BCGCAAAF"></a>
<div id="ADFNS1704" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">22.4</span> Identity Code Package Types</h2>
<p><a href="#BABHBJCF">Table 22-2</a> describes the Identity Code Package ADTs.</p>
<div id="ADFNS863" class="tblformal">
<p class="titleintable"><a id="sthref1051"></a><a id="BABHBJCF"></a>Table 22-2 Identity Code Package ADTs</p>
<table class="cellalignment293" title="Identity Code Package ADTs" summary="This table summarizes the object types in the Identity Code Package." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t3">ADT Name</th>
<th class="cellalignment294" id="r1c2-t3">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t3" headers="r1c1-t3">
<p><a class="olink ARPLS412" href="../ARPLS/t_mgd_id.htm#ARPLS412"><code dir="ltr">MGD_ID_COMPONENT</code></a> ADT</p>
</td>
<td class="cellalignment295" headers="r2c1-t3 r1c2-t3">
<p>A data type that specifies the name and value pair attributes that define a component.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t3" headers="r1c1-t3">
<p><a class="olink ARPLS413" href="../ARPLS/t_mgd_id.htm#ARPLS413"><code dir="ltr">MGD_ID_COMPONENT_VARRAY</code></a> ADT</p>
</td>
<td class="cellalignment295" headers="r3c1-t3 r1c2-t3">
<p>A data type that specifies a list of up to 128 components as name-value attribute pairs used in two constructor functions for creating an identity code type object.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t3" headers="r1c1-t3">
<p><a class="olink ARPLS414" href="../ARPLS/t_mgd_id.htm#ARPLS414"><code dir="ltr">MGD_ID</code></a> ADT</p>
</td>
<td class="cellalignment295" headers="r4c1-t3 r1c2-t3">
<p>Represents an identity code type that specifies the category identifier for the code category for this identity code and its list of components.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p><a href="#CACHGFDG">Table 22-3</a> describes the subprograms in the <code dir="ltr">MGD_ID</code> ADT.</p>
<p>All the values and names passed to the subprograms defined in the <code dir="ltr">MGD_ID</code> ADT are case-insensitive unless otherwise noted. To preserve case, enclose values in double quotation marks.</p>
<div id="ADFNS864" class="tblformal">
<p class="titleintable"><a id="sthref1052"></a><a id="CACHGFDG"></a>Table 22-3 MGD_ID ADT Subprograms</p>
<table class="cellalignment293" title="MGD_ID ADT Subprograms" summary="This table summarizes the MGD_ID object type subprograms." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t4">Subprogram</th>
<th class="cellalignment294" id="r1c2-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t4" headers="r1c1-t4">
<p><a class="olink ARPLS415" href="../ARPLS/t_mgd_id.htm#ARPLS415"><code dir="ltr">MGD_ID</code></a> Constructor Function</p>
</td>
<td class="cellalignment295" headers="r2c1-t4 r1c2-t4">
<p>Creates an identity code type object, <code dir="ltr">MGD_ID</code>, and returns self.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t4" headers="r1c1-t4">
<p><a class="olink ARPLS416" href="../ARPLS/t_mgd_id.htm#ARPLS416"><code dir="ltr">FORMAT</code></a> Member Function</p>
</td>
<td class="cellalignment295" headers="r3c1-t4 r1c2-t4">
<p>Returns a representation of an identity code given an <code dir="ltr">MGD_ID</code> component.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t4" headers="r1c1-t4">
<p><a class="olink ARPLS417" href="../ARPLS/t_mgd_id.htm#ARPLS417"><code dir="ltr">GET_COMPONENT</code></a> Member Function</p>
</td>
<td class="cellalignment295" headers="r4c1-t4 r1c2-t4">
<p>Returns the value of an <code dir="ltr">MGD_ID</code> component.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t4" headers="r1c1-t4">
<p><a class="olink ARPLS418" href="../ARPLS/t_mgd_id.htm#ARPLS418"><code dir="ltr">TO_STRING</code></a> Member Function</p>
</td>
<td class="cellalignment295" headers="r5c1-t4 r1c2-t4">
<p>Concatenates the <code dir="ltr">category_id</code> parameter value with the components name-value attribute pair.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r6c1-t4" headers="r1c1-t4">
<p><a class="olink ARPLS419" href="../ARPLS/t_mgd_id.htm#ARPLS419"><code dir="ltr">TRANSLATE</code></a> Static Function</p>
</td>
<td class="cellalignment295" headers="r6c1-t4 r1c2-t4">
<p>Translates one <code dir="ltr">MGD_ID</code> representation of an identity code into a different <code dir="ltr">MGD_ID</code> representation.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="sect1" -->
<a id="BCGIDGIE"></a>
<div id="ADFNS1705" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">22.5</span> DBMS_MGD_ID_UTL Package</h2>
<p><a href="#CACHGFGD">Table 22-4</a> describes the Utility subprograms in the <code dir="ltr">DBMS_MGD_ID_UTL</code> package.</p>
<p>All the values and names passed to the subprograms defined in the <code dir="ltr">MGD_ID</code> ADT are case-insensitive unless otherwise noted. To preserve case, enclose values in double quotation marks.</p>
<div id="ADFNS865" class="tblformal">
<p class="titleintable"><a id="sthref1053"></a><a id="CACHGFGD"></a>Table 22-4 DBMS_MGD_ID_UTL Package Utility Subprograms</p>
<table class="cellalignment293" title="DBMS_MGD_ID_UTL Package Utility Subprograms" summary="This table summarizes the subprograms of the DBMS_MGD_ID_UTL package." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t5">Subprogram</th>
<th class="cellalignment294" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t5" headers="r1c1-t5">
<p><a class="olink ARPLS420" href="../ARPLS/d_mgd_id_utl.htm#ARPLS420"><code dir="ltr">ADD_SCHEME</code></a> Procedure</p>
</td>
<td class="cellalignment295" headers="r2c1-t5 r1c2-t5">
<p>Adds a tag data translation scheme to an existing category.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t5" headers="r1c1-t5">
<p><a class="olink ARPLS421" href="../ARPLS/d_mgd_id_utl.htm#ARPLS421"><code dir="ltr">CREATE_CATEGORY</code></a> Function</p>
</td>
<td class="cellalignment295" headers="r3c1-t5 r1c2-t5">
<p>Creates a category or a version of a category.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t5" headers="r1c1-t5">
<p><a class="olink ARPLS422" href="../ARPLS/d_mgd_id_utl.htm#ARPLS422"><code dir="ltr">EPC_TO_ORACLE</code></a> Function</p>
</td>
<td class="cellalignment295" headers="r4c1-t5 r1c2-t5">
<p>Converts the EPCglobal tag data translation (TDT) XML to Oracle Database tag data translation XML.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t5" headers="r1c1-t5">
<p><a class="olink ARPLS423" href="../ARPLS/d_mgd_id_utl.htm#ARPLS423"><code dir="ltr">GET_CATEGORY_ID</code></a> Function</p>
</td>
<td class="cellalignment295" headers="r5c1-t5 r1c2-t5">
<p>Returns the category ID given the category name and the category version.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r6c1-t5" headers="r1c1-t5">
<p><a class="olink ARPLS424" href="../ARPLS/d_mgd_id_utl.htm#ARPLS424"><code dir="ltr">GET_COMPONENTS</code></a> Function</p>
</td>
<td class="cellalignment295" headers="r6c1-t5 r1c2-t5">
<p>Returns all relevant separated component names separated by semicolon (&#39;;&#39;) for the specified scheme.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r7c1-t5" headers="r1c1-t5">
<p><a class="olink ARPLS425" href="../ARPLS/d_mgd_id_utl.htm#ARPLS425"><code dir="ltr">GET_ENCODINGS</code></a> Function</p>
</td>
<td class="cellalignment295" headers="r7c1-t5 r1c2-t5">
<p>Returns a list of semicolon (&#39;;&#39;) separated encodings (formats) for the specified scheme.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r8c1-t5" headers="r1c1-t5">
<p><a class="olink ARPLS426" href="../ARPLS/d_mgd_id_utl.htm#ARPLS426"><code dir="ltr">GET_JAVA_LOGGING_LEVEL</code></a> Function</p>
</td>
<td class="cellalignment295" headers="r8c1-t5 r1c2-t5">
<p>Returns an integer representing the current Java trace logging level.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r9c1-t5" headers="r1c1-t5">
<p><a class="olink ARPLS427" href="../ARPLS/d_mgd_id_utl.htm#ARPLS427"><code dir="ltr">GET_PLSQL_LOGGING_LEVEL</code></a> Function</p>
</td>
<td class="cellalignment295" headers="r9c1-t5 r1c2-t5">
<p>Returns an integer representing the current PL/SQL trace logging level.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r10c1-t5" headers="r1c1-t5">
<p><a class="olink ARPLS428" href="../ARPLS/d_mgd_id_utl.htm#ARPLS428"><code dir="ltr">GET_SCHEME_NAMES</code></a> Function</p>
</td>
<td class="cellalignment295" headers="r10c1-t5 r1c2-t5">
<p>Returns a list of semicolon (&#39;;&#39;) separated scheme names for the specified category.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r11c1-t5" headers="r1c1-t5">
<p><a class="olink ARPLS429" href="../ARPLS/d_mgd_id_utl.htm#ARPLS429"><code dir="ltr">GET_TDT_XML</code></a> Function</p>
</td>
<td class="cellalignment295" headers="r11c1-t5 r1c2-t5">
<p>Returns the Oracle Database tag data translation XML for the specified scheme.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r12c1-t5" headers="r1c1-t5">
<p><a class="olink ARPLS430" href="../ARPLS/d_mgd_id_utl.htm#ARPLS430"><code dir="ltr">GET_VALIDATOR</code></a> Function</p>
</td>
<td class="cellalignment295" headers="r12c1-t5 r1c2-t5">
<p>Returns the Oracle Database tag data translation schema.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r13c1-t5" headers="r1c1-t5">
<p><a class="olink ARPLS431" href="../ARPLS/d_mgd_id_utl.htm#ARPLS431"><code dir="ltr">REFRESH_CATEGORY</code></a> Function</p>
</td>
<td class="cellalignment295" headers="r13c1-t5 r1c2-t5">
<p>Refreshes the metadata information about the Java stack for the specified category.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r14c1-t5" headers="r1c1-t5">
<p><a class="olink ARPLS432" href="../ARPLS/d_mgd_id_utl.htm#ARPLS432"><code dir="ltr">REMOVE_CATEORY</code></a> Function</p>
</td>
<td class="cellalignment295" headers="r14c1-t5 r1c2-t5">
<p>Removes a category including all the related TDT XML.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r15c1-t5" headers="r1c1-t5">
<p><a class="olink ARPLS433" href="../ARPLS/d_mgd_id_utl.htm#ARPLS433"><code dir="ltr">REMOVE_PROXY</code></a> Procedure</p>
</td>
<td class="cellalignment295" headers="r15c1-t5 r1c2-t5">
<p>Unsets the host and port of the proxy server.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r16c1-t5" headers="r1c1-t5">
<p><a class="olink ARPLS434" href="../ARPLS/d_mgd_id_utl.htm#ARPLS434"><code dir="ltr">REMOVE_SCHEME</code></a> Procedure</p>
</td>
<td class="cellalignment295" headers="r16c1-t5 r1c2-t5">
<p>Removes the tag scheme for a category.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r17c1-t5" headers="r1c1-t5">
<p><a class="olink ARPLS435" href="../ARPLS/d_mgd_id_utl.htm#ARPLS435"><code dir="ltr">SET_JAVA_LOGGING_LEVEL</code></a> Procedure</p>
</td>
<td class="cellalignment295" headers="r17c1-t5 r1c2-t5">
<p>Sets the Java logging level.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r18c1-t5" headers="r1c1-t5">
<p><a class="olink ARPLS436" href="../ARPLS/d_mgd_id_utl.htm#ARPLS436"><code dir="ltr">SET_PLSQL_LOGGING_LEVEL</code></a> Procedure</p>
</td>
<td class="cellalignment295" headers="r18c1-t5 r1c2-t5">
<p>Sets the PL/SQL tracing logging level.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r19c1-t5" headers="r1c1-t5">
<p><a class="olink ARPLS463" href="../ARPLS/d_mgd_id_utl.htm#ARPLS463"><code dir="ltr">SET_PROXY</code></a> Procedure</p>
</td>
<td class="cellalignment295" headers="r19c1-t5 r1c2-t5">
<p>Sets the host and port of the proxy server for Internet access.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r20c1-t5" headers="r1c1-t5">
<p><a class="olink ARPLS464" href="../ARPLS/d_mgd_id_utl.htm#ARPLS464"><code dir="ltr">VALIDATE_SCHEME</code></a> Function</p>
</td>
<td class="cellalignment295" headers="r20c1-t5 r1c2-t5">
<p>Validates the input tag data translation XML against the Oracle Database tag data translation schema.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="sect1" -->
<a id="BCGHGAGG"></a>
<div id="ADFNS1706" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">22.6</span> Identity Code Metadata Tables and Views</h2>
<p>This topic describes the structure of identity code metadata tables and views and explains how the metadata are used by the Identity Code Package to interpret the various RFID tags. The creation of these meta tables, views, and triggers is done automatically during the Identity Code Package installation.</p>
<p>Encoding metadata views are used to store encoding categories and schemes. Application developers can insert the meta information of their own identity codes into these views. The <code dir="ltr">MGD_ID</code> ADT is designed to understand the encodings if the metadata for the encodings are stored in the meta tables. If an application developer uses only the encodings defined in the EPC specification v1.1, the developer does not have to worry about the meta tables because product codes specified in EPC spec v1.1 are predefined.</p>
<p>There are two encoding metadata views:</p>
<ul>
<li>
<p><code dir="ltr">user_mgd_id_category</code> stores the encoding category information defined by the session user.</p>
</li>
<li>
<p><code dir="ltr">user_mgd_id_scheme</code> stores the encoding type information defined by the session user.</p>
</li>
</ul>
<p>You can query the following read-only views to see the system&#39;s predefined encoding metadata and the metadata defined by the user:</p>
<ul>
<li>
<p><code dir="ltr">mgd_id_category</code> lets you query the encoding category information defined by the system or the session user</p>
</li>
<li>
<p><code dir="ltr">mgd_id_scheme</code> lets you query the encoding type information defined by the system or the session user.</p>
</li>
</ul>
<p>The underlying metadata tables for the preceding views are:</p>
<ul>
<li>
<p><code dir="ltr">mgd_id_xml_validator</code></p>
</li>
<li>
<p><code dir="ltr">mgd_id_category_tab</code></p>
</li>
<li>
<p><code dir="ltr">mgd_id_scheme_tab</code></p>
</li>
</ul>
<p>Users other than the Identity Code Package system users cannot operate on these tables. Users must not use the metadata tables directly. They must use the read-only views and the metadata functions described in the <code dir="ltr">DBMS_MGD_ID_UTL</code> package.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS283" href="../ARPLS/d_mgd_id_utl.htm#ARPLS283"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about the <code dir="ltr">DBMS_MGD_ID_UTL</code> package</div>
<p class="subhead2"><a id="ADFNS866"></a>Metadata View Definitions</p>
<p><a href="#CACBHJHE">Table 22-5</a>, <a href="#CACJFGGH">Table 22-6</a>, <a href="#CACDEGIJ">Table 22-7</a>, and <a href="#CACBHDDF">Table 22-8</a> describe the metadata view definitions for the <code dir="ltr">MGD_ID_CATEGORY</code>, <code dir="ltr">USER_ID_CATEGORY</code>, <code dir="ltr">MGD_ID_SCHME</code>, and <code dir="ltr">USER_MGD_ID_SCHME</code> respectively as defined in the <code dir="ltr">mgdview</code>.<code dir="ltr">sql</code> file.</p>
<div id="ADFNS867" class="tblformal">
<p class="titleintable"><a id="sthref1054"></a><a id="CACBHJHE"></a>Table 22-5 Definition and Description of the MGD_ID_CATEGORY Metadata View</p>
<table class="cellalignment293" title="Definition and Description of the MGD_ID_CATEGORY Metadata View" summary="This table desribes the column names, datatype, and description for the MGD_ID_CATEGORY view." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t7">Column Name</th>
<th class="cellalignment294" id="r1c2-t7">Data Type</th>
<th class="cellalignment294" id="r1c3-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t7" headers="r1c1-t7">
<p><code dir="ltr">CATEGORY_ID</code></p>
</td>
<td class="cellalignment295" headers="r2c1-t7 r1c2-t7">
<p><code dir="ltr">NUMBER(4)</code></p>
</td>
<td class="cellalignment295" headers="r2c1-t7 r1c3-t7">
<p>Category identifier</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t7" headers="r1c1-t7">
<p><code dir="ltr">CATEGORY_NAME</code></p>
</td>
<td class="cellalignment295" headers="r3c1-t7 r1c2-t7">
<p><code dir="ltr">VARCHAR2(256)</code></p>
</td>
<td class="cellalignment295" headers="r3c1-t7 r1c3-t7">
<p>Category name</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t7" headers="r1c1-t7">
<p><code dir="ltr">AGENCY</code></p>
</td>
<td class="cellalignment295" headers="r4c1-t7 r1c2-t7">
<p><code dir="ltr">VARCHAR2(256)</code></p>
</td>
<td class="cellalignment295" headers="r4c1-t7 r1c3-t7">
<p>Organization that defined the category</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t7" headers="r1c1-t7">
<p><code dir="ltr">VERSION</code></p>
</td>
<td class="cellalignment295" headers="r5c1-t7 r1c2-t7">
<p><code dir="ltr">VARCHAR2(256)</code></p>
</td>
<td class="cellalignment295" headers="r5c1-t7 r1c3-t7">
<p>Category version</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r6c1-t7" headers="r1c1-t7">
<p><code dir="ltr">URI</code></p>
</td>
<td class="cellalignment295" headers="r6c1-t7 r1c2-t7">
<p><code dir="ltr">VARCHAR2(256)</code></p>
</td>
<td class="cellalignment295" headers="r6c1-t7 r1c3-t7">
<p>URI that describes the category</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="ADFNS868" class="tblformal">
<p class="titleintable"><a id="sthref1055"></a><a id="CACJFGGH"></a>Table 22-6 Definition and Description of the USER_MGD_ID_CATEGORY Metadata View</p>
<table class="cellalignment293" title="Definition and Description of the USER_MGD_ID_CATEGORY Metadata View" summary="This table desribes the column names, datatype, and description for the USER_MGD_ID_CATEGORY view." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t8">Column Name</th>
<th class="cellalignment294" id="r1c2-t8">Data Type</th>
<th class="cellalignment294" id="r1c3-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t8" headers="r1c1-t8">
<p><code dir="ltr">CATEGORY_ID</code></p>
</td>
<td class="cellalignment295" headers="r2c1-t8 r1c2-t8">
<p><code dir="ltr">NUMBER(4)</code></p>
</td>
<td class="cellalignment295" headers="r2c1-t8 r1c3-t8">
<p>Category identifier</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t8" headers="r1c1-t8">
<p><code dir="ltr">CATEGORY_NAME</code></p>
</td>
<td class="cellalignment295" headers="r3c1-t8 r1c2-t8">
<p><code dir="ltr">VARCHAR2(256)</code></p>
</td>
<td class="cellalignment295" headers="r3c1-t8 r1c3-t8">
<p>Category name</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t8" headers="r1c1-t8">
<p><code dir="ltr">AGENCY</code></p>
</td>
<td class="cellalignment295" headers="r4c1-t8 r1c2-t8">
<p><code dir="ltr">VARCHAR2(256)</code></p>
</td>
<td class="cellalignment295" headers="r4c1-t8 r1c3-t8">
<p>Organization that defined the category</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t8" headers="r1c1-t8">
<p><code dir="ltr">VERSION</code></p>
</td>
<td class="cellalignment295" headers="r5c1-t8 r1c2-t8">
<p><code dir="ltr">VARCHAR2(256)</code></p>
</td>
<td class="cellalignment295" headers="r5c1-t8 r1c3-t8">
<p>Category version</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r6c1-t8" headers="r1c1-t8">
<p><code dir="ltr">URI</code></p>
</td>
<td class="cellalignment295" headers="r6c1-t8 r1c2-t8">
<p><code dir="ltr">VARCHAR2(256)</code></p>
</td>
<td class="cellalignment295" headers="r6c1-t8 r1c3-t8">
<p>URI that describes the category</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="ADFNS869" class="tblformal">
<p class="titleintable"><a id="sthref1056"></a><a id="CACDEGIJ"></a>Table 22-7 Definition and Description of the MGD_ID_SCHEME Metadata View</p>
<table class="cellalignment293" title="Definition and Description of the MGD_ID_SCHEME Metadata View" summary="This table desribes the column names, datatype, and description for the MGD_ID_SCHEME view." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t9">Column Name</th>
<th class="cellalignment294" id="r1c2-t9">Data Type</th>
<th class="cellalignment294" id="r1c3-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t9" headers="r1c1-t9">
<p><code dir="ltr">CATEGORY_ID</code></p>
</td>
<td class="cellalignment295" headers="r2c1-t9 r1c2-t9">
<p><code dir="ltr">NUMBER(4)</code></p>
</td>
<td class="cellalignment295" headers="r2c1-t9 r1c3-t9">
<p>Category identifier</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t9" headers="r1c1-t9">
<p><code dir="ltr">TYPE_NAME</code></p>
</td>
<td class="cellalignment295" headers="r3c1-t9 r1c2-t9">
<p><code dir="ltr">VARCHAR2(256)</code></p>
</td>
<td class="cellalignment295" headers="r3c1-t9 r1c3-t9">
<p>Encoding scheme name, for example, SGTIN-96, GID-96, and so on</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t9" headers="r1c1-t9">
<p><code dir="ltr">TDT_XML</code></p>
</td>
<td class="cellalignment295" headers="r4c1-t9 r1c2-t9">
<p><code dir="ltr">CLOB</code></p>
</td>
<td class="cellalignment295" headers="r4c1-t9 r1c3-t9">
<p>Tag data translation XML for this encoding scheme</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t9" headers="r1c1-t9">
<p><code dir="ltr">ENCODINGS</code></p>
</td>
<td class="cellalignment295" headers="r5c1-t9 r1c2-t9">
<p><code dir="ltr">VARCHAR2(256)</code></p>
</td>
<td class="cellalignment295" headers="r5c1-t9 r1c3-t9">
<p>Encodings separated by a comma (,), for example, <code dir="ltr">LEGACY</code>, <code dir="ltr">TAG_ENCODING</code>, <code dir="ltr">PURE_IDENTITY</code>, <code dir="ltr">BINARY</code> (for SGTIN-96)</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r6c1-t9" headers="r1c1-t9">
<p><code dir="ltr">COMPONENTS</code></p>
</td>
<td class="cellalignment295" headers="r6c1-t9 r1c2-t9">
<p><code dir="ltr">VARCHAR2(1024)</code></p>
</td>
<td class="cellalignment295" headers="r6c1-t9 r1c3-t9">
<p>Relevant component names, extracted from each level and then combined. Each is separated by a comma (,). For example, objectclass, generalmanager, serial (for GID-96)</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div id="ADFNS870" class="tblformal">
<p class="titleintable"><a id="sthref1057"></a><a id="CACBHDDF"></a>Table 22-8 Definition and Description of the USER_MGD_ID_SCHEME Metadata View</p>
<table class="cellalignment293" title="Definition and Description of the USER_MGD_ID_SCHEME Metadata View" summary="This table desribes the column names, datatype, and description for the USER_MGD_ID_SCHEME view." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t10">Column Name</th>
<th class="cellalignment294" id="r1c2-t10">Data Type</th>
<th class="cellalignment294" id="r1c3-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t10" headers="r1c1-t10">
<p><code dir="ltr">CATEGORY_ID</code></p>
</td>
<td class="cellalignment295" headers="r2c1-t10 r1c2-t10">
<p><code dir="ltr">NUMBER(4)</code></p>
</td>
<td class="cellalignment295" headers="r2c1-t10 r1c3-t10">
<p>Category identifier</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t10" headers="r1c1-t10">
<p><code dir="ltr">TYPE_NAME</code></p>
</td>
<td class="cellalignment295" headers="r3c1-t10 r1c2-t10">
<p><code dir="ltr">VARCHAR2(256)</code></p>
</td>
<td class="cellalignment295" headers="r3c1-t10 r1c3-t10">
<p>Encoding scheme name, for example, SGTIN-96, GID-96, and so on</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t10" headers="r1c1-t10">
<p><code dir="ltr">TDT_XML</code></p>
</td>
<td class="cellalignment295" headers="r4c1-t10 r1c2-t10">
<p><code dir="ltr">CLOB</code></p>
</td>
<td class="cellalignment295" headers="r4c1-t10 r1c3-t10">
<p>Tag data translation XML for this encoding scheme</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t10" headers="r1c1-t10">
<p><code dir="ltr">ENCODINGS</code></p>
</td>
<td class="cellalignment295" headers="r5c1-t10 r1c2-t10">
<p><code dir="ltr">VARCHAR2(256)</code></p>
</td>
<td class="cellalignment295" headers="r5c1-t10 r1c3-t10">
<p>Encodings separated by a comma (,), for example, <code dir="ltr">LEGACY</code>, <code dir="ltr">TAG_ENCODING</code>, <code dir="ltr">PURE_IDENTITY</code>, <code dir="ltr">BINARY</code> (for SGTIN-96)</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r6c1-t10" headers="r1c1-t10">
<p><code dir="ltr">COMPONENTS</code></p>
</td>
<td class="cellalignment295" headers="r6c1-t10 r1c2-t10">
<p><code dir="ltr">VARCHAR2(1024)</code></p>
</td>
<td class="cellalignment295" headers="r6c1-t10 r1c3-t10">
<p>Relevant component names, extracted from each level and then combined. Each is separated by a comma (,). For example, objectclass, generalmanager, serial (for GID-96)</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="sect1" -->
<a id="BCGJIDEJ"></a>
<div id="ADFNS1707" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">22.7</span> Electronic Product Code (EPC) Concepts</h2>
<p class="subhead2"><a id="ADFNS1264"></a>Topics:</p>
<ul>
<li>
<p><a href="#CHDDJGAB">RFID Technology and EPC v1.1 Coding Schemes</a></p>
</li>
<li>
<p><a href="#CHDBHEDF">Product Code Concepts and Their Current Use</a></p>
</li>
</ul>
<a id="CHDDJGAB"></a>
<div id="ADFNS871" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">22.7.1</span> RFID Technology and EPC v1.1 Coding Schemes</h3>
<p><a id="sthref1058"></a><a id="sthref1059"></a>Radio Frequency Identification (RFID) technology continues to gain momentum with suppliers, distributors, manufacturers, and retailers for its ability to eliminate line-of-site processes and automate critical supply chain transactions. Electronic Product Code (EPC), an identification scheme for universally identifying objects using RFID tags and other means, is gaining widespread acceptance as an emerging standard. Its capabilities enable companies to reduce warehouse and distribution costs through improved inventory control and extended supply chain visibility.</p>
<p>The standardized EPC Identifier is a metacoding scheme designed to support the needs of various industries. Therefore, the EPC represents a family of coding schemes and a means to make them unique across all possible EPC-compliant tags. EPC Version 1.1 includes these specific coding schemes:</p>
<ul>
<li>
<p>General Identifier (GID)</p>
</li>
<li>
<p>Serialized version of the EAN.UCC Global Trade Item Number (GTIN)</p>
</li>
<li>
<p>EAN.UCC Serial Shipping Container Code (SSCC)</p>
</li>
<li>
<p>EAN.UCC Global Location Number (GLN)</p>
</li>
<li>
<p>EAN.UCC Global Returnable Asset Identifier (GRAI)</p>
</li>
<li>
<p>EAN.UCC Global Individual Asset Identifier (GIAI)</p>
</li>
</ul>
<p>RFID applications require the storage of a large volume of EPC data into a database. The efficient use of EPC data also requires that the database recognizes the different coding schemes of EPC data.</p>
<p>EPC is an emerging standard. It does not cover all the numbering schemes used in the various industries and is itself still evolving (the changes from EPC version 1.0 to EPC version 1.1 are significant).</p>
<p>Identity Code Package empowers the Oracle Database with the knowledge to recognize EPC coding schemes. It makes the Oracle Database a database system that not only provides efficient storage and component level retrieval for EPC data, but also has features to support EPC data encoding and decoding, and conversion between bit encoding and URI encoding.</p>
<p>Identity Code Package provides an extensible framework that allows developers to define their own coding schemes that are not included in the EPC standard. This extensibility feature also makes the Oracle Database adaptable to the evolving future EPC standard.</p>
<p>This chapter describes the requirement of storing, retrieving, encoding and decoding various product codes, including EPC, in an Oracle Database and shows how the Identity Code Package solution meets all these requirements by providing data types, metadata tables, and PL/SQL packages for these purposes.</p>
</div>
<!-- class="sect2" -->
<a id="CHDBHEDF"></a>
<div id="ADFNS872" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">22.7.2</span> Product Code Concepts and Their Current Use</h3>
<p><a id="sthref1060"></a>This topic describes these product codes:</p>
<ul>
<li>
<p><a href="#CHDEJHDF">Electronic Product Code (EPC)</a></p>
</li>
<li>
<p><a href="#CHDHEGDJ">Global Trade Identification Number (GTIN) and Serializable Global Trade Identification Number (SGTIN)</a></p>
</li>
<li>
<p><a href="#CHDBDBAF">Serial Shipping Container Code (SSCC)</a></p>
</li>
<li>
<p><a href="#CHDBEJIF">Global Location Number (GLN) and Serializable Global Location Number (SGLN)</a></p>
</li>
<li>
<p><a href="#CHDFEEFA">Global Returnable Asset Identifier (GRAI)</a></p>
</li>
<li>
<p><a href="#CHDDJCDF">Global Individual Asset Identifier (GIAI)</a></p>
</li>
<li>
<p><a href="#CHDFFEBF">RFID EPC Network</a></p>
</li>
</ul>
<a id="CHDEJHDF"></a>
<div id="ADFNS873" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">22.7.2.1</span> Electronic Product Code (EPC)</h4>
<p><a id="sthref1061"></a><a id="sthref1062"></a>The Electronic Product Code&trade; (EPC&trade;) is an identification scheme for universally identifying physical objects using Radio Frequency Identification (RFID) tags and other means. The standardized EPC data consists of an EPC (or EPC Identifier) that uniquely identifies an individual object, and an optional Filter Value when judged to be necessary to enable effective and efficient reading of the EPC tags. In addition to this standardized data, certain classes of EPC tags allow user-defined data.</p>
<p>The EPC Identifier is a meta-coding scheme designed to support the needs of various industries by accommodating both existing coding schemes where possible and defining schemes where necessary. The various coding schemes are referred to as Domain Identifiers, to indicate that they provide object identification within certain domains such as a particular industry or group of industries. As such, EPC represents a family of coding schemes (or &#34;namespaces&#34;) and a means to make them unique across all possible EPC-compliant tags.</p>
<p>The EPCGlobal EPC Data Standards Version 1.1 defines the abstract content of the Electronic Product Code, and its concrete realization in the form of RFID tags, Internet URIs, and other representations. In EPC Version 1.1, the specific coding schemes include a General Identifier (GID), a serialized version of the EAN.UCC Global Trade Item Number (GTIN&reg;), the EAN.UCC Serial Shipping Container Code (SSCC&reg;), the EAN.UCC Global Location Number (GLN&reg;), the EAN.UCC Global Returnable Asset Identifier (GRAI&reg;), and the EAN.UCC Global Individual Asset Identifier (GIAI&reg;).</p>
<div id="ADFNS874" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref1063"></a>
<h5 class="sect4"><span class="secnum">22.7.2.1.1</span> EPC Pure Identity</h5>
<p>The EPC pure identity is the identity associated with a specific physical or logical entity, independent of any particular encoding vehicle such as an RF tag, bar code or database field. As such, a pure identity is an abstract name or number used to identify an entity. A pure identity consists of the information required to uniquely identify a specific entity, and no more.</p>
</div>
<!-- class="sect4" -->
<div id="ADFNS875" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref1064"></a>
<h5 class="sect4"><span class="secnum">22.7.2.1.2</span> EPC Encoding</h5>
<p>EPC encoding is a pure identity with more information, such as filter value, rendered into a specific syntax (typically consisting of value fields of specific sizes). A given pure identity might have several possible encodings, such as a Barcode Encoding, various Tag Encodings, and various URI Encodings. Encodings can also incorporate additional data besides the identity (such as the Filter Value used in some encodings), in which case the encoding scheme specifies what additional data it can hold.</p>
<p>For example, the Serial Shipping Container Code (SSCC) format as defined by the EAN.UCC System is an example of a pure identity. An SSCC encoded into the EPC- SSCC 96-bit format is an example of an encoding.</p>
</div>
<!-- class="sect4" -->
<div id="ADFNS876" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref1065"></a>
<h5 class="sect4"><span class="secnum">22.7.2.1.3</span> EPC Tag Bit-Level Encoding</h5>
<p>EPC encoding on a tag is a string of bits, consisting of a tiered, variable length header followed by a series of numeric fields whose overall length, structure, and function are completely determined by the header value.</p>
</div>
<!-- class="sect4" -->
<div id="ADFNS877" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref1066"></a>
<h5 class="sect4"><span class="secnum">22.7.2.1.4</span> EPC Identity URI</h5>
<p>The EPC identity URI is a representation of a pure identity as a Uniform Resource Identifier (URI).</p>
</div>
<!-- class="sect4" -->
<div id="ADFNS878" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref1067"></a>
<h5 class="sect4"><span class="secnum">22.7.2.1.5</span> EPC Tag URI Encoding</h5>
<p>The EPC tag URI encoding represents a specific EPC tag bit-level encoding, for example, urn:epc:tag:sgtin-64:3.0652642.800031.400.</p>
</div>
<!-- class="sect4" -->
<div id="ADFNS879" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref1068"></a>
<h5 class="sect4"><span class="secnum">22.7.2.1.6</span> EPC Encoding Procedure</h5>
<p>The EPC encoding procedure generates an EPC tag bit-level encoding using various information.</p>
</div>
<!-- class="sect4" -->
<div id="ADFNS880" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref1069"></a>
<h5 class="sect4"><span class="secnum">22.7.2.1.7</span> EPC Decoding Procedure</h5>
<p>The EPC decoding procedure converts an EPC tag bit-level encoding to an EAN.UCC code.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="CHDHEGDJ"></a>
<div id="ADFNS881" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">22.7.2.2</span> Global Trade Identification Number (GTIN) and Serializable Global Trade Identification Number (SGTIN)</h4>
<p>A Global Trade Identification Number (GTIN) is used for the unique identification of trade items worldwide within the EAN.UCC system. The Serialized Global Trade Identification Number (SGTIN) is an identity type in EPC standard version1.1. It is based on the EAN.UCC GTIN code defined in the General EAN.UCC Specifications [GenSpec5.0]. A GTIN identifies a particular class of object, such as a particular kind of product or SKU. The combination of GTIN and a unique serial number is called a Serialized GTIN (SGTIN).</p>
</div>
<!-- class="sect3" -->
<a id="CHDBDBAF"></a>
<div id="ADFNS882" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">22.7.2.3</span> Serial Shipping Container Code (SSCC)</h4>
<p>The Serial Shipping Container Code (SSCC) is defined by the General EAN.UCC Specifications [GenSpec5.0]. The unique identification of logistics units is achieved in the EAN.UCC system by the use of the SSCC. The SSCC is intended for assignment to individual objects.</p>
</div>
<!-- class="sect3" -->
<a id="CHDBEJIF"></a>
<div id="ADFNS883" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">22.7.2.4</span> Global Location Number (GLN) and Serializable Global Location Number (SGLN)</h4>
<p>The Global Location Number (GLN) is defined by the General EAN.UCC Specifications [GenSpec5.0]. A GLN can represent either a discrete, unique physical location such as a dock door or a warehouse slot, or an aggregate physical location such as an entire warehouse. Also, a GLN can represent a logical entity such as an organization that performs a business function (for example, placing an order). The combination of GLN and a unique serial number is called a Serialized GLN (SGLN). However, until the EAN.UCC community determines the appropriate way to extend GLN, the serial number field is reserved and must not be used.</p>
</div>
<!-- class="sect3" -->
<a id="CHDFEEFA"></a>
<div id="ADFNS884" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">22.7.2.5</span> Global Returnable Asset Identifier (GRAI)</h4>
<p>A returnable asset is a reusable package or transport equipment of a certain value. Global Returnable Asset Identifier is (GRAI) is defined by the General EAN.UCC Specifications [GenSpec5.0] for the unique identification of a returnable asset.</p>
</div>
<!-- class="sect3" -->
<a id="CHDDJCDF"></a>
<div id="ADFNS885" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">22.7.2.6</span> Global Individual Asset Identifier (GIAI)</h4>
<p>The Global Individual Asset Identifier (GIAI) is defined by the General EAN.UCC Specifications [GenSpec5.0]. Unlike the GTIN, the GIAI is intended for assignment to individual objects. Global Individual Asset Identifier (GIAI) uniquely identifies an entity that is part of the fixed inventory of a company. The GIAI identifies any fixed asset of an organization.</p>
</div>
<!-- class="sect3" -->
<a id="CHDFFEBF"></a>
<div id="ADFNS886" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">22.7.2.7</span> RFID EPC Network</h4>
<p>The RFID EPC network identifies, tracks, and locates assets. Physical objects are identified by a unique RFID enabled EPC.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDJJJGG"></a>
<div id="ADFNS1708" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">22.8</span> Oracle Database Tag Data Translation Schema</h2>
<p>The Oracle Database Tag Data Translation Schema is closely related to the EPCglobal TDT schema, however it is not exact. The Oracle Database TDT is shown as follows:</p>
<pre dir="ltr">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;
&lt;xsd:schema targetNamespace=&#34;oracle.mgd.idcode&#34; 
   xmlns:xsd=&#34;http://www.w3.org/2001/XMLSchema&#34;
     xmlns:tdt=&#34;oracle.mgd.idcode&#34; elementFormDefault=&#34;qualified&#34; 
       attributeFormDefault=&#34;unqualified&#34; version=&#34;1.0&#34;&gt;

 &lt;xsd:simpleType name=&#34;InputFormatList&#34;&gt;
  &lt;xsd:restriction base=&#34;xsd:string&#34;&gt;
   &lt;xsd:enumeration value=&#34;BINARY&#34;/&gt;
   &lt;xsd:enumeration value=&#34;STRING&#34;/&gt;
  &lt;/xsd:restriction&gt;
 &lt;/xsd:simpleType&gt;

 &lt;xsd:simpleType name=&#34;LevelTypeList&#34;&gt;
  &lt;xsd:restriction base=&#34;xsd:string&#34;&gt;
  &lt;/xsd:restriction&gt;
 &lt;/xsd:simpleType&gt;
 &lt;xsd:simpleType name=&#34;SchemeNameList&#34;&gt;
  &lt;xsd:restriction base=&#34;xsd:string&#34;&gt;
  &lt;/xsd:restriction&gt;
 &lt;/xsd:simpleType&gt;

 &lt;xsd:simpleType name=&#34;ModeList&#34;&gt;
  &lt;xsd:restriction base=&#34;xsd:string&#34;&gt;
   &lt;xsd:enumeration value=&#34;EXTRACT&#34;/&gt;
   &lt;xsd:enumeration value=&#34;FORMAT&#34;/&gt;
  &lt;/xsd:restriction&gt;
 &lt;/xsd:simpleType&gt;

 &lt;xsd:simpleType name=&#34;CompactionMethodList&#34;&gt;
  &lt;xsd:restriction base=&#34;xsd:string&#34;&gt;
   &lt;xsd:enumeration value=&#34;32-bit&#34;/&gt;
   &lt;xsd:enumeration value=&#34;16-bit&#34;/&gt;
   &lt;xsd:enumeration value=&#34;8-bit&#34;/&gt;
   &lt;xsd:enumeration value=&#34;7-bit&#34;/&gt;
   &lt;xsd:enumeration value=&#34;6-bit&#34;/&gt;
   &lt;xsd:enumeration value=&#34;5-bit&#34;/&gt;
  &lt;/xsd:restriction&gt;
 &lt;/xsd:simpleType&gt;

 &lt;xsd:simpleType name=&#34;PadDirectionList&#34;&gt;
  &lt;xsd:restriction base=&#34;xsd:string&#34;&gt;
   &lt;xsd:enumeration value=&#34;LEFT&#34;/&gt;
   &lt;xsd:enumeration value=&#34;RIGHT&#34;/&gt;
  &lt;/xsd:restriction&gt;
 &lt;/xsd:simpleType&gt;

 &lt;xsd:complexType name=&#34;Field&#34;&gt;
  &lt;xsd:attribute name=&#34;seq&#34; type=&#34;xsd:integer&#34; use=&#34;required&#34;/&gt;
  &lt;xsd:attribute name=&#34;name&#34; type=&#34;xsd:string&#34; use=&#34;required&#34;/&gt;
  &lt;xsd:attribute name=&#34;bitLength&#34; type=&#34;xsd:integer&#34;/&gt;
  &lt;xsd:attribute name=&#34;characterSet&#34; type=&#34;xsd:string&#34; use=&#34;required&#34;/&gt;
  &lt;xsd:attribute name=&#34;compaction&#34; type=&#34;tdt:CompactionMethodList&#34;/&gt;
  &lt;xsd:attribute name=&#34;compression&#34; type=&#34;xsd:string&#34;/&gt;
  &lt;xsd:attribute name=&#34;padChar&#34; type=&#34;xsd:string&#34;/&gt;
  &lt;xsd:attribute name=&#34;padDir&#34; type=&#34;tdt:PadDirectionList&#34;/&gt;
  &lt;xsd:attribute name=&#34;decimalMinimum&#34; type=&#34;xsd:long&#34;/&gt;
  &lt;xsd:attribute name=&#34;decimalMaximum&#34; type=&#34;xsd:long&#34;/&gt;
  &lt;xsd:attribute name=&#34;length&#34; type=&#34;xsd:integer&#34;/&gt;
 &lt;/xsd:complexType&gt;

 &lt;xsd:complexType name=&#34;Option&#34;&gt;
  &lt;xsd:sequence&gt;
   &lt;xsd:element name=&#34;field&#34; type=&#34;tdt:Field&#34; maxOccurs=&#34;unbounded&#34;/&gt;
  &lt;/xsd:sequence&gt;
  &lt;xsd:attribute name=&#34;optionKey&#34; type=&#34;xsd:string&#34; use=&#34;required&#34;/&gt;
  &lt;xsd:attribute name=&#34;pattern&#34; type=&#34;xsd:string&#34;/&gt;
  &lt;xsd:attribute name=&#34;grammar&#34; type=&#34;xsd:string&#34; use=&#34;required&#34;/&gt;
 &lt;/xsd:complexType&gt;

 &lt;xsd:complexType name=&#34;Rule&#34;&gt;
  &lt;xsd:attribute name=&#34;type&#34; type=&#34;tdt:ModeList&#34; use=&#34;required&#34;/&gt;
  &lt;xsd:attribute name=&#34;inputFormat&#34; type=&#34;tdt:InputFormatList&#34; use=&#34;required&#34;/&gt;
  &lt;xsd:attribute name=&#34;seq&#34; type=&#34;xsd:integer&#34; use=&#34;required&#34;/&gt;
  &lt;xsd:attribute name=&#34;newFieldName&#34; type=&#34;xsd:string&#34; use=&#34;required&#34;/&gt;
  &lt;xsd:attribute name=&#34;characterSet&#34; type=&#34;xsd:string&#34; use=&#34;required&#34;/&gt;
  &lt;xsd:attribute name=&#34;padChar&#34; type=&#34;xsd:string&#34;/&gt;
  &lt;xsd:attribute name=&#34;padDir&#34; type=&#34;tdt:PadDirectionList&#34;/&gt;
  &lt;xsd:attribute name=&#34;decimalMinimum&#34; type=&#34;xsd:long&#34;/&gt;
  &lt;xsd:attribute name=&#34;decimalMaximum&#34; type=&#34;xsd:long&#34;/&gt;
  &lt;xsd:attribute name=&#34;length&#34; type=&#34;xsd:string&#34;/&gt;
  &lt;xsd:attribute name=&#34;function&#34; type=&#34;xsd:string&#34; use=&#34;required&#34;/&gt;
  &lt;xsd:attribute name=&#34;tableURI&#34; type=&#34;xsd:string&#34;/&gt;
  &lt;xsd:attribute name=&#34;tableParams&#34; type=&#34;xsd:string&#34;/&gt;
  &lt;xsd:attribute name=&#34;tableXPath&#34; type=&#34;xsd:string&#34;/&gt;
  &lt;xsd:attribute name=&#34;tableSQL&#34; type=&#34;xsd:string&#34;/&gt;
 &lt;/xsd:complexType&gt;

 &lt;xsd:complexType name=&#34;Level&#34;&gt;
  &lt;xsd:sequence&gt;
   &lt;xsd:element name=&#34;option&#34; type=&#34;tdt:Option&#34; minOccurs=&#34;1&#34; 
     maxOccurs=&#34;unbounded&#34;/&gt;
   &lt;xsd:element name=&#34;rule&#34; type=&#34;tdt:Rule&#34; minOccurs=&#34;0&#34; 
     maxOccurs=&#34;unbounded&#34;/&gt;
  &lt;/xsd:sequence&gt;
  &lt;xsd:attribute name=&#34;type&#34; type=&#34;tdt:LevelTypeList&#34; use=&#34;required&#34;/&gt;
  &lt;xsd:attribute name=&#34;prefixMatch&#34; type=&#34;xsd:string&#34;/&gt;
  &lt;xsd:attribute name=&#34;requiredParsingParameters&#34; type=&#34;xsd:string&#34;/&gt;
  &lt;xsd:attribute name=&#34;requiredFormattingParameters&#34; type=&#34;xsd:string&#34;/&gt;
 &lt;/xsd:complexType&gt;

 &lt;xsd:complexType name=&#34;Scheme&#34;&gt;
  &lt;xsd:sequence&gt;
   &lt;xsd:element name=&#34;level&#34; type=&#34;tdt:Level&#34; minOccurs=&#34;4&#34; maxOccurs=&#34;5&#34;/&gt;
  &lt;/xsd:sequence&gt;
  &lt;xsd:attribute name=&#34;name&#34; type=&#34;tdt:SchemeNameList&#34; use=&#34;required&#34;/&gt;
  &lt;xsd:attribute name=&#34;optionKey&#34; type=&#34;xsd:string&#34; use=&#34;required&#34;/&gt;
 &lt;/xsd:complexType&gt;
 &lt;xsd:complexType name=&#34;TagDataTranslation&#34;&gt;
  &lt;xsd:sequence&gt;
   &lt;xsd:element name=&#34;scheme&#34; type=&#34;tdt:Scheme&#34; maxOccurs=&#34;unbounded&#34;/&gt;
  &lt;/xsd:sequence&gt;
  &lt;xsd:attribute name=&#34;version&#34; type=&#34;xsd:string&#34; use=&#34;required&#34;/&gt;
  &lt;xsd:attribute name=&#34;date&#34; type=&#34;xsd:dateTime&#34; use=&#34;required&#34;/&gt;
 &lt;/xsd:complexType&gt;
 &lt;xsd:element name=&#34;TagDataTranslation&#34; type=&#34;tdt:TagDataTranslation&#34;/&gt;
&lt;/xsd:schema&gt;
</pre></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment286">
<tr>
<td class="cellalignment295">
<table class="cellalignment291">
<tr>
<td class="cellalignment290"><a href="adfns_odbc.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment290"><a href="adfns_dependencies.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment298">
<table class="cellalignment289">
<tr>
<td class="cellalignment290"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment290"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment290"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment290"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment290"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment290"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>