<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-86"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Using%20SQL%20Data%20Types%20in%20Database%20Applications"></a><title>Using SQL Data Types in Database Applications</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1080"/>
<meta name="dcterms.created" content="2016-05-05T16:23:33Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Development Guide"/>
<meta name="dcterms.identifier" content="E41452-07"/>
<meta name="dcterms.isVersionOf" content="ADFNS"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="adfns_sqlproc.htm" title="Previous" type="text/html"/>
<link rel="Next" href="adfns_regexp.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E41452-07.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">16/38</span> <!-- End Header -->
<script>
<!-- // <![CDATA[
window.name='adfns_sqltypes'
// ]]> -->
</script> <script>
// <![CDATA[
function footdisplay(footnum,footnote) {
    var msg = window.open('', 'NewWindow' + footnum,
        'directories=no,height=120,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');

    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">');
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>');
    msg.document.write('Footnote&nbsp; ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><h1>Footnote&nbsp; ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/body><\/html>');
    msg.document.close();
    msg.focus();
}
// ]]>
</script> <noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript>
<div id="ADFNS0002" class="chapter"><a id="i1006173"></a>
<h1 class="chapter"><span class="secnum">7</span> Using SQL Data Types in Database Applications</h1>
<p>This chapter explains how to choose the correct <a id="sthref278"></a><a id="sthref279"></a>SQL data types for database columns that you create for your database applications. For syntactic and semantic information about SQL data types, see <a class="olink SQLRF0021" href="../SQLRF/sql_elements001.htm#SQLRF0021"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<p class="subhead2"><a id="ADFNS987"></a>Topics:</p>
<ul>
<li>
<p><a href="#BABCDHAH">Using the Correct and Most Specific Data Type</a></p>
</li>
<li>
<p><a href="#BABEFDEF">Representing Character Data</a></p>
</li>
<li>
<p><a href="#BABBAHFE">Representing Numeric Data</a></p>
</li>
<li>
<p><a href="#BABJJCAI">Representing Date and Time Data</a></p>
</li>
<li>
<p><a href="#BABECADE">Representing Specialized Data</a></p>
</li>
<li>
<p><a href="#BABIIHAA">Identifying Rows by Address</a></p>
</li>
<li>
<p><a href="#CIHEHJIB">Displaying Metadata for SQL Operators and Functions</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink SQLRF00214" href="../SQLRF/sql_elements002.htm#SQLRF00214"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about data type conversion</p>
</li>
<li>
<p><a href="adfns_packages.htm#BABJEAEG">Section 11.4.4, &#34;PL/SQL Data Types&#34;</a></p>
</li>
</ul>
</div>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle precompilers recognize, in embedded SQL programs, data types other than SQL and PL/SQL data types. These <a id="sthref280"></a><a id="sthref281"></a><span class="glossaryterm">external data types</span> are associated with host variables. For information about Oracle precompilers, see <a href="adfns_environments.htm#BABCFEGI">Section 17.6</a>.</div>
<a id="BABCDHAH"></a>
<div id="ADFNS1322" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">7.1</span> Using the Correct and Most Specific Data Type</h2>
<p>Using the correct and most specific <a id="sthref282"></a>data type for each database column that you create for your database application increases data integrity, decreases storage requirements, and improves performance.</p>
<p class="subhead2"><a id="ADFNS1329"></a>Topics:</p>
<ul>
<li>
<p><a href="#BABECIGJ">How the Correct Data Type Increases Data Integrity</a></p>
</li>
<li>
<p><a href="#BABBFFEC">How the Most Specific Data Type Decreases Storage Requirements</a></p>
</li>
<li>
<p><a href="#BABDCIDC">How the Correct Data Type Improves Performance</a></p>
</li>
</ul>
<a id="BABECIGJ"></a>
<div id="ADFNS1330" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">7.1.1</span> How the Correct Data Type Increases Data Integrity</h3>
<p>The correct data type increases <a id="sthref283"></a>data integrity by acting as a constraint. For example, if you use a datetime data type for a column of dates, then only dates can be stored in that column. However, if you use a character or numeric data type for the column, then eventually someone will store a character or numeric value that does not represent a date. You could write code to prevent this problem, but it is more efficient to use the correct data type. Therefore, store characters in character data types, numbers in numeric data types, and dates and times in datetime data types.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="adfns_constraints.htm#g1023643">Appendix P, &#34;Maintaining Data Integrity in Database Applications,&#34;</a> for information about data integrity and constraints</div>
</div>
<!-- class="sect2" -->
<a id="BABBFFEC"></a>
<div id="ADFNS1331" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">7.1.2</span> How the Most Specific Data Type Decreases Storage Requirements</h3>
<p><a id="sthref284"></a>In addition to using the correct data type, use the most specific length or precision; for example:</p>
<ul>
<li>
<p>When creating a <code>VARCHAR2</code> column intended for strings of at most <span class="italic">n</span> characters, specify <code dir="ltr">VARCHAR2(</code><code dir="ltr"><span class="codeinlineitalic">n</span></code><code dir="ltr">)</code>.</p>
</li>
<li>
<p>When creating a column intended for integers, use the data type <code dir="ltr">NUMBER(38)</code> rather than <code dir="ltr">NUMBER</code>.</p>
</li>
</ul>
<p>Besides acting as constraints and thereby increasing data integrity, length and precision affect storage requirements.</p>
<p>If you give every column the maximum length or precision for its data type, then your application needlessly allocates many megabytes of RAM. For example, suppose that a query selects 10 <code dir="ltr">VARCHAR2(4000)</code> columns and a bulk fetch operation returns 100 rows. The RAM that your application must allocate is 10&nbsp;x&nbsp;4,000&nbsp;x&nbsp;100&mdash;almost 4&nbsp;MB. In contrast, if the column length is 80, the RAM that your application must allocate is 10&nbsp;x&nbsp;80&nbsp;x&nbsp;100&mdash;about 78&nbsp;KB. This difference is significant for a single query, and your application will process many queries concurrently. Therefore, your application must allocate the 4&nbsp;MB or 78&nbsp;KB of RAM <span class="italic">for each connection</span>.</p>
<p>Therefore, do not give a column the maximum length or precision for its data type only because you might need to increase that property later. If you must change a column after creating it, then use the <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> statement (described in <a class="olink SQLRF01001" href="../SQLRF/statements_3001.htm#SQLRF01001"><span class="italic">Oracle Database SQL Language Reference</span></a>). For example, to increase the length of a column, use:</p>
<pre dir="ltr">ALTER TABLE <span class="italic">table_name</span> MODIFY <span class="italic">column_name</span> VARCHAR2(<span class="italic">larger_number</span>)
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
The maximum length of the <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NVARCHAR2</code>, and <code dir="ltr">RAW</code> data types is 32,767 bytes if the <code dir="ltr">MAX_STRING_SIZE</code> initialization parameter is <code dir="ltr">EXTENDED</code>. For more information about extended data types, see <a class="olink SQLRF55623" href="../SQLRF/sql_elements001.htm#SQLRF55623"><span class="italic">Oracle Database SQL Language Reference</span></a>.</div>
</div>
<!-- class="sect2" -->
<a id="BABDCIDC"></a>
<div id="ADFNS1332" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">7.1.3</span> How the Correct Data Type Improves Performance</h3>
<p>The correct data type improves <a id="sthref285"></a>performance because the incorrect data type can result in the incorrect <a id="sthref286"></a>execution plan. (For information about the execution plan, see <a href="adfns_perf_scale.htm#CACEJBAF">Section 2.2.3</a>.)</p>
<p><a href="#BABIFJFA">Example 7-1</a> performs the same conceptual operation&mdash;selecting rows whose dates are between December 31, 2000 and January 1, 2001&mdash;for three columns with different data types and shows the execution plan for each query. In the three execution plans, compare Rows (cardinality), Cost, and Operation.</p>
<div id="ADFNS1333" class="example">
<p class="titleinexample"><a id="BABIFJFA"></a>Example 7-1 Performance Comparison of Three Data Types</p>
<p>Create a table that stores the same dates in three columns: <code dir="ltr">str_date</code>, with data type <code dir="ltr">VARCHAR2</code>; <code dir="ltr">date_date</code>, with data type <code dir="ltr">DATE</code>, and <code dir="ltr">number_date</code>, with data type <code dir="ltr">NUMBER</code>:</p>
<pre dir="ltr">CREATE TABLE t (str_date, date_date, number_date, data)
AS
SELECT TO_CHAR(dt+rownum,&#39;yyyymmdd&#39;)              <span class="bold">str_date,    -- VARCHAR2</span>
       dt+rownum                                  <span class="bold">date_date,   -- DATE</span>
       TO_NUMBER(TO_CHAR(dt+rownum,&#39;yyyymmdd&#39;))   <span class="bold">number_date, -- NUMBER</span>
       RPAD(&#39;*&#39;,45,&#39;*&#39;)                           data
FROM (SELECT TO_DATE(&#39;01-jan-1995&#39;, &#39;dd-mm-yyyy&#39;) dt
      FROM all_objects)
ORDER BY DBMS_RANDOM.VALUE
/
</pre>
<p>Create an index on each column:</p>
<pre dir="ltr">CREATE INDEX t_str_date_idx ON t(str_date);
CREATE INDEX t_date_date_idx ON t(date_date);
CREATE INDEX t_number_date_idx ON t(number_date);
</pre>
<p>Gather statistics for the table:</p>
<pre dir="ltr">BEGIN
  DBMS_STATS.GATHER_TABLE_STATS (
    &#39;HR&#39;,
    &#39;T&#39;,
    method_opt =&gt; &#39;for all indexed columns size 254&#39;,
    cascade =&gt; TRUE
  );
END;
/
</pre>
<p>Show the execution plans of subsequent SQL statements (SQL*Plus command):</p>
<pre dir="ltr">SET AUTOTRACE ON EXPLAIN
</pre>
<p>Select the rows for which the dates in <code dir="ltr">str_date</code> are between December 31, 2000 and January 1, 2001:</p>
<pre dir="ltr"><span class="bold">SELECT * FROM t WHERE str_date BETWEEN &#39;20001231&#39; AND &#39;20010101&#39;</span>
<span class="bold">ORDER BY str_date;</span>
</pre>
<p>Result and execution plan:</p>
<pre dir="ltr">STR_DATE DATE_DATE NUMBER_DATE DATA
-------- --------- ----------- ---------------------------------------------
20001231 31-DEC-00    20001231 *********************************************
20010101 01-JAN-01    20010101 *********************************************
 
2 rows selected.
 
 
<span class="bold">Execution Plan</span>
----------------------------------------------------------
Plan hash value: 948745535
 
---------------------------------------------------------------------------
| Id  | Operation          | Name | Rows  | Bytes | Cost (%CPU)| Time     |
---------------------------------------------------------------------------
|   0 | SELECT STATEMENT   |      |   236 | 11092 |   216   (8)| 00:00:01 |
|   1 |  SORT ORDER BY     |      |   236 | 11092 |   216   (8)| 00:00:01 |
|*  2 |   TABLE ACCESS FULL| T    |   236 | 11092 |   215   (8)| 00:00:01 |
---------------------------------------------------------------------------
 
Predicate Information (identified by operation id):
---------------------------------------------------
 
   2 - filter(&#34;STR_DATE&#34;&lt;=&#39;20010101&#39; AND &#34;STR_DATE&#34;&gt;=&#39;20001231&#39;)
</pre>
<p>Select the rows for which the dates in <code dir="ltr">number_date</code> are between December 31, 2000 and January 1, 2001:</p>
<pre dir="ltr"><span class="bold">SELECT * FROM t WHERE number_date BETWEEN 20001231 AND 20010101;</span>
<span class="bold">ORDER BY str_date;</span>
</pre>
<p>Result and execution plan:</p>
<pre dir="ltr">STR_DATE DATE_DATE NUMBER_DATE DATA
-------- --------- ----------- ---------------------------------------------
20001231 31-DEC-00    20001231 *********************************************
20010101 01-JAN-01    20010101 *********************************************
 
2 rows selected.
 
 
<span class="bold">Execution Plan</span>
----------------------------------------------------------
Plan hash value: 948745535
 
---------------------------------------------------------------------------
| Id  | Operation          | Name | Rows  | Bytes | Cost (%CPU)| Time     |
---------------------------------------------------------------------------
|   0 | SELECT STATEMENT   |      |   234 | 10998 |   219  (10)| 00:00:01 |
|   1 |  SORT ORDER BY     |      |   234 | 10998 |   219  (10)| 00:00:01 |
|*  2 |   TABLE ACCESS FULL| T    |   234 | 10998 |   218   (9)| 00:00:01 |
---------------------------------------------------------------------------
 
Predicate Information (identified by operation id):
---------------------------------------------------
 
   2 - filter(&#34;NUMBER_DATE&#34;&lt;=20010101 AND &#34;NUMBER_DATE&#34;&gt;=20001231)
</pre>
<p>Select the rows for which the dates in <code dir="ltr">date_date</code> are between December 31, 2000 and January 1, 2001:</p>
<pre dir="ltr"><span class="bold">SELECT * FROM t WHERE date_date</span>
  <span class="bold">BETWEEN TO_DATE(&#39;20001231&#39;,&#39;yyyymmdd&#39;)</span>
  <span class="bold">AND     TO_DATE(&#39;20010101&#39;,&#39;yyyymmdd&#39;);</span>
  <span class="bold">ORDER BY str_date;</span>
</pre>
<p>Result and execution plan (reformatted to fit the page):</p>
<pre dir="ltr">STR_DATE DATE_DATE NUMBER_DATE DATA
-------- --------- ----------- ---------------------------------------------
20001231 31-DEC-00    20001231 *********************************************
20010101 01-JAN-01    20010101 *********************************************
 
2 rows selected.
 
 
<span class="bold">Execution Plan</span>
----------------------------------------------------------
Plan hash value: 2411593187
 
--------------------------------------------------------------------------------
 
| Id  | Operation                            | Name            | Rows  | Bytes |
|   1 |  SORT ORDER BY                       |                 |     1 |    47 |
|   2 |   TABLE ACCESS BY INDEX ROWID BATCHED| T               |     1 |    47 |
|*  3 |    INDEX RANGE SCAN                  | T_DATE_DATE_IDX |     1 |       |
|   0 | SELECT STATEMENT                     |                 |     1 |    47 |
 
------------------------
 Cost (%CPU)| Time     |
 
     4  (25)| 00:00:01 |
     4  (25)| 00:00:01 |
     3   (0)| 00:00:01 |
     2   (0)| 00:00:01 |
 
Predicate Information (identified by operation id):
---------------------------------------------------
 
   3 - access(&#34;DATE_DATE&#34;&gt;=TO_DATE(&#39; 2000-12-31 00:00:00&#39;,
   &#39;syyyy-mm-dd hh24:mi:ss&#39;) AND
 
  &#34;DATE_DATE&#34;&lt;=TO_DATE(&#39; 2001-01-01 00:00:00&#39;, &#39;syyyy-mm-dd hh24:mi:ss&#39;))
</pre>
<p>Performance improved for the final query because, for the <code dir="ltr">DATE</code> data type, the optimizer could determine that there was only one day between December 31, 2000 and January 1, 2001. Therefore, it performed an index range scan, which is faster than a full table scan. (For information about full table scans, see <a class="olink TGSQL231" href="../TGSQL/tgsql_optop.htm#TGSQL231"><span class="italic">Oracle Database SQL Tuning Guide</span></a>. For information about index range scans, see <a class="olink TGSQL236" href="../TGSQL/tgsql_optop.htm#TGSQL236"><span class="italic">Oracle Database SQL Tuning Guide</span></a>.)</p>
</div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABEFDEF"></a>
<div id="ADFNS00302" class="sect1">
<h2 class="sect1"><span class="secnum">7.2</span> Representing Character Data</h2>
<p><a id="sthref287"></a><a id="sthref288"></a><a href="#BABGACCH">Table 7-1</a> summarizes the SQL data types that store character data.</p>
<div id="ADFNS988" class="tblformal">
<p class="titleintable"><a id="sthref289"></a><a id="BABGACCH"></a>Table 7-1 SQL Character Data Types</p>
<table class="cellalignment293" title="SQL Character Data Types" summary="This table lists and briefly describes each SQL character data type." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t6">Data Types</th>
<th class="cellalignment294" id="r1c2-t6">Values Stored</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t6" headers="r1c1-t6">
<p><a id="sthref290"></a><a class="olink SQLRF50974" href="../SQLRF/sql_elements001.htm#SQLRF50974"><code dir="ltr">CHAR</code></a></p>
</td>
<td class="cellalignment295" headers="r2c1-t6 r1c2-t6">
<p>Fixed-length character literals</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t6" headers="r1c1-t6">
<p><a id="sthref291"></a><a class="olink SQLRF50977" href="../SQLRF/sql_elements001.htm#SQLRF50977"><code dir="ltr">VARCHAR2</code></a></p>
</td>
<td class="cellalignment295" headers="r3c1-t6 r1c2-t6">
<p>Variable-length character literals</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t6" headers="r1c1-t6">
<p><a id="sthref292"></a><a class="olink SQLRF50975" href="../SQLRF/sql_elements001.htm#SQLRF50975"><code dir="ltr">NCHAR</code></a></p>
</td>
<td class="cellalignment295" headers="r4c1-t6 r1c2-t6">
<p>Fixed-length <a id="sthref293"></a>Unicode character literals</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t6" headers="r1c1-t6">
<p><a id="sthref294"></a><a class="olink SQLRF50976" href="../SQLRF/sql_elements001.htm#SQLRF50976"><code dir="ltr">NVARCHAR2</code></a></p>
</td>
<td class="cellalignment295" headers="r5c1-t6 r1c2-t6">
<p>Variable-length Unicode character literals</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r6c1-t6" headers="r1c1-t6">
<p><a id="sthref295"></a><a class="olink SQLRF20041" href="../SQLRF/sql_elements001.htm#SQLRF20041"><code dir="ltr">CLOB</code></a></p>
</td>
<td class="cellalignment295" headers="r6c1-t6 r1c2-t6">
<p>Single-byte and multibyte character strings of up to (4&nbsp;gigabytes&nbsp;-&nbsp;1) * (the value obtained from <code dir="ltr">DBMS_LOB.GETCHUNKSIZE</code>)</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r7c1-t6" headers="r1c1-t6">
<p><a id="sthref296"></a><a class="olink SQLRF20042" href="../SQLRF/sql_elements001.htm#SQLRF20042"><code dir="ltr">NCLOB</code></a></p>
</td>
<td class="cellalignment295" headers="r7c1-t6 r1c2-t6">
<p>Single-byte and multibyte Unicode character strings of up to (4&nbsp;gigabytes&nbsp;-&nbsp;1) * (the value obtained from <code dir="ltr">DBMS_LOB.GETCHUNKSIZE</code>)</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r8c1-t6" headers="r1c1-t6">
<p><a id="sthref297"></a><a class="olink SQLRF00201" href="../SQLRF/sql_elements001.htm#SQLRF00201"><code dir="ltr">LONG</code></a></p>
</td>
<td class="cellalignment295" headers="r8c1-t6 r1c2-t6">
<p>Variable-length character data of up to 2&nbsp;gigabytes&nbsp;-&nbsp;1. Provided only for backward compatibility.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
Do not use the <a id="sthref298"></a><code dir="ltr">VARCHAR</code> data type. Use the <code dir="ltr">VARCHAR2</code> data type instead. Although the <code dir="ltr">VARCHAR</code> data type is currently synonymous with <code dir="ltr">VARCHAR2</code>, the <code dir="ltr">VARCHAR</code> data type is scheduled to be redefined as a separate data type used for variable-length character strings compared with different comparison semantics.</div>
<p>When choosing between <code dir="ltr">CHAR</code> and <code dir="ltr">VARCHAR2</code>, consider:</p>
<ul>
<li>
<p>Space usage</p>
<p>Oracle Database blank-pads values stored in <code dir="ltr">CHAR</code> columns but not values stored in <code dir="ltr">VARCHAR2</code> columns. Therefore, <code dir="ltr">VARCHAR2</code> columns use space more efficiently than <code dir="ltr">CHAR</code> columns.</p>
</li>
<li>
<p>Performance</p>
<p>Because of the blank-padding difference, a full table scan on a large table containing <code dir="ltr">VARCHAR2</code> columns might read fewer data blocks than a full table scan on a table containing the same data stored in <code dir="ltr">CHAR</code> columns. If your application often performs full table scans on large tables containing character data, then you might be able to improve performance by storing data in <code dir="ltr">VARCHAR2</code> columns rather than in <code dir="ltr">CHAR</code> columns.</p>
</li>
<li>
<p>Comparison semantics</p>
<p>When you need ANSI compatibility in comparison semantics, use the <code dir="ltr">CHAR</code> data type. When trailing blanks are important in string comparisons, use the <code dir="ltr">VARCHAR2</code> data type.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF0021" href="../SQLRF/sql_elements001.htm#SQLRF0021"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about comparison semantics for these data types</div>
</li>
</ul>
<p>For a client/server application, if the character set on the client side differs from the character set on the server side, then Oracle Database converts <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, and <code dir="ltr">LONG</code> data from the database character set (determined by the <code dir="ltr">NLS_LANGUAGE</code> parameter) to the character set defined for the user session.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink SQLRF50973" href="../SQLRF/sql_elements001.htm#SQLRF50973"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NCHAR</code>, and <code dir="ltr">NVARCHAR2</code> data types</p>
</li>
<li>
<p><a href="#BABBEIHB">Section 7.5.3.1, &#34;Large Objects (LOBs),&#34;</a> for more information about <code dir="ltr">CLOB</code> and <code dir="ltr">NCLOB</code> data types</p>
</li>
<li>
<p><a href="#BABDBGJA">Section 7.5.3.2, &#34;LONG and LONG RAW Data Types,&#34;</a> for more information about <code dir="ltr">LONG</code> data type</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="BABBAHFE"></a>
<div id="ADFNS00303" class="sect1">
<h2 class="sect1"><span class="secnum">7.3</span> Representing Numeric Data</h2>
<p><a id="sthref299"></a><a id="sthref300"></a>The SQL data types that store numeric data are <code dir="ltr">NUMBER</code>, <code dir="ltr">BINARY_FLOAT</code>, and <code dir="ltr">BINARY_DOUBLE</code>.</p>
<p>The <a id="sthref301"></a><code dir="ltr">NUMBER</code> data type stores real numbers in either a <a id="sthref302"></a>fixed-point or <a id="sthref303"></a>floating-point format. <code dir="ltr">NUMBER</code> offers up to 38 decimal digits of precision. In a <code dir="ltr">NUMBER</code> column, you can store positive and negative numbers of magnitude 1&nbsp;x&nbsp;10<sup>-130</sup> through 9.99&nbsp;x10<sup>125</sup>, and 0. All Oracle Database platforms support <code dir="ltr">NUMBER</code> values.</p>
<p>The <a id="sthref304"></a><code dir="ltr">BINARY_FLOAT</code> and <a id="sthref305"></a><code dir="ltr">BINARY_DOUBLE</code> data types store floating-point numbers in the single-precision (32-bit) IEEE 754 format and the double-precision (64-bit) IEEE 754 format, respectively. High-precision values use less space when stored as <code dir="ltr">BINARY_FLOAT</code> and <code dir="ltr">BINARY_DOUBLE</code> than when stored as <code dir="ltr">NUMBER</code>. Arithmetic operations on floating-point numbers are usually faster for <code dir="ltr">BINARY_FLOAT</code> and <code dir="ltr">BINARY_DOUBLE</code> values than for <code dir="ltr">NUMBER</code> values.</p>
<p>In client interfaces that Oracle Database supports, arithmetic operations on <code dir="ltr">BINARY_FLOAT</code> and <code dir="ltr">BINARY_DOUBLE</code> values are performed by the native instruction set that the hardware vendor supplies. The term <a id="sthref306"></a><span class="glossaryterm">native floating-point data type</span> includes <code dir="ltr">BINARY_FLOAT</code> and <code dir="ltr">BINARY_DOUBLE</code> data types and all implementations of these types in supported client interfaces.</p>
<p>Native floating-point data types conform substantially with the <a id="sthref307"></a>Institute of Electrical and Electronics Engineers (IEEE) Standard for Binary Floating-Point Arithmetic, IEEE Standard 754-1985 (IEEE754). For details, see <a class="olink SQLRF50985" href="../SQLRF/sql_elements001.htm#SQLRF50985"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle recommends using <code dir="ltr">BINARY_FLOAT</code> and <code dir="ltr">BINARY_DOUBLE</code> instead of <a id="sthref308"></a><code dir="ltr">FLOAT</code>, a subtype of <code dir="ltr">NUMBER</code> described in <a class="olink SQLRF50981" href="../SQLRF/sql_elements001.htm#SQLRF50981"><span class="italic">Oracle Database SQL Language Reference</span></a>.</div>
<p class="subhead2"><a id="ADFNS990"></a>Topics:</p>
<ul>
<li>
<p><a href="#BABEFAJI">Floating-Point Number Components</a></p>
</li>
<li>
<p><a href="#BABGHIHF">Floating-Point Number Formats</a></p>
</li>
<li>
<p><a href="#g1604808">Representing Special Values with Native Floating-Point Data Types</a></p>
</li>
<li>
<p><a href="#BABEBBFG">Comparing Native Floating-Point Values</a></p>
</li>
<li>
<p><a href="#BABBCCJF">Arithmetic Operations with Native Floating-Point Data Types</a></p>
</li>
<li>
<p><a href="#BABJAEGB">Conversion Functions for Native Floating-Point Data Types</a></p>
</li>
<li>
<p><a href="#BABJJBAD">Client Interfaces for Native Floating-Point Data Types</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink SQLRF00222" href="../SQLRF/sql_elements001.htm#SQLRF00222"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about the <code dir="ltr">NUMBER</code> data type</p>
</li>
<li>
<p><a class="olink SQLRF00209" href="../SQLRF/sql_elements001.htm#SQLRF00209"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about the <code dir="ltr">BINARY_FLOAT</code> and <code dir="ltr">BINARY_DOUBLE</code> data types</p>
</li>
</ul>
</div>
<a id="BABEFAJI"></a>
<div id="ADFNS99868" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">7.3.1</span> Floating-Point Number Components</h3>
<p><a id="sthref309"></a>The formula for a floating-point value is:</p>
<pre dir="ltr">(-1)<span class="superscript">sign</span>.<span class="italic">significand</span>.<span class="italic">base</span><span class="superscript">exponent</span>
</pre>
<p>For example, the floating-point value 4.31 is represented:</p>
<pre dir="ltr">(-1)<span class="superscript">0</span>.431.10<span class="superscript">-2</span>
</pre>
<p>The components of the preceding representation are:</p>
<div class="inftblinformal">
<table class="cellalignment296" title="Floating-Point Number Components" summary="This table gives the name and value of each component of the preceding floating-point number." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t12">Component Name</th>
<th class="cellalignment294" id="r1c2-t12">Component Value</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t12" headers="r1c1-t12">Sign</td>
<td class="cellalignment295" headers="r2c1-t12 r1c2-t12">0</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t12" headers="r1c1-t12">Significand</td>
<td class="cellalignment295" headers="r3c1-t12 r1c2-t12">431</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t12" headers="r1c1-t12">Base</td>
<td class="cellalignment295" headers="r4c1-t12 r1c2-t12">10</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t12" headers="r1c1-t12">Exponent</td>
<td class="cellalignment295" headers="r5c1-t12 r1c2-t12">-2</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="sect2" -->
<a id="BABGHIHF"></a>
<div id="ADFNS163" class="sect2">
<h3 class="sect2"><span class="secnum">7.3.2</span> Floating-Point Number Formats</h3>
<p>A floating-point number <a id="sthref310"></a>format specifies how the components of a floating-point number are represented, thereby determining the range and precision of the values that the format can represent. The <span class="bold">range</span> is the interval bounded by the smallest and largest values and the <span class="bold">precision</span> is the number of significant digits. Both range and precision are finite. If a floating-point number is too precise for a given format, then the number is <a id="sthref311"></a><a id="sthref312"></a>rounded.</p>
<p>How the number is rounded depends on the base of its format, which can be either <a id="sthref313"></a><a id="sthref314"></a>decimal or <a id="sthref315"></a><a id="sthref316"></a>binary. A number stored in decimal format is rounded to the nearest decimal place (for example, 1000, 10, or 0.01). A number stored in binary format is rounded to the nearest binary place (for example, 1024, 512, or 1/64).</p>
<p><code dir="ltr">NUMBER</code> values are stored in decimal format. For calculations that need decimal rounding, use the <code dir="ltr">NUMBER</code> data type.</p>
<p>Native floating-point values are stored in binary format.</p>
<p><a id="sthref317"></a><a href="#BABIABAB">Table 7-2</a> shows the range and precision of the IEEE 754 single- and double-precision formats and Oracle Database <code dir="ltr">NUMBER</code>. Range limits are expressed as positive numbers, but they also apply to absolute values of negative numbers. (The notation &#34;<span class="italic">number</span>&nbsp;e&nbsp;<span class="italic">exponent</span>&#34; means <span class="italic">number</span>&nbsp;*&nbsp;10<sup>exponent</sup>.)</p>
<div id="ADFNS168" class="tblformal">
<p class="titleintable"><a id="sthref318"></a><a id="BABIABAB"></a>Table 7-2 Range and Precision of Floating-Point Data Types</p>
<table class="cellalignment293" title=" Range and Precision of Floating-Point Data Types" summary="This table summarizes the ranges and precisions of IEEE 754 formats." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t13">Range and Precision</th>
<th class="cellalignment294" id="r1c2-t13"><a id="sthref319"></a>Single-precision <a id="sthref320"></a>32-bit<a id="sthref321" href="#sthref321" onclick="footdisplay(1,&#34;These numbers are from the \u003cspan class=\&#34;italic\&#34;\u003eIEEE Numerical Computation Guide\u003c/span\u003e. &#34;)"><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></th>
<th class="cellalignment294" id="r1c3-t13"><a id="sthref322"></a>Double-precision <a id="sthref323"></a>64-bit<sup>1</sup></th>
<th class="cellalignment294" id="r1c4-t13">Oracle Database NUMBER Data Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t13" headers="r1c1-t13">
<p>Maximum positive normal number</p>
</td>
<td class="cellalignment295" headers="r2c1-t13 r1c2-t13">
<p>3.40282347e+38</p>
</td>
<td class="cellalignment295" headers="r2c1-t13 r1c3-t13">
<p>1.7976931348623157e+308</p>
</td>
<td class="cellalignment295" headers="r2c1-t13 r1c4-t13">
<p>&lt; 1.0e126</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t13" headers="r1c1-t13">
<p>Minimum positive normal number</p>
</td>
<td class="cellalignment295" headers="r3c1-t13 r1c2-t13">
<p>1.17549435e-38</p>
</td>
<td class="cellalignment295" headers="r3c1-t13 r1c3-t13">
<p>2.2250738585072014e-308</p>
</td>
<td class="cellalignment295" headers="r3c1-t13 r1c4-t13">
<p>1.0e-130</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t13" headers="r1c1-t13">
<p>Maximum positive subnormal number</p>
</td>
<td class="cellalignment295" headers="r4c1-t13 r1c2-t13">
<p>1.17549421e-38</p>
</td>
<td class="cellalignment295" headers="r4c1-t13 r1c3-t13">
<p>2.2250738585072009e-308</p>
</td>
<td class="cellalignment295" headers="r4c1-t13 r1c4-t13">
<p>not applicable</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t13" headers="r1c1-t13">
<p>Minimum positive subnormal number</p>
</td>
<td class="cellalignment295" headers="r5c1-t13 r1c2-t13">
<p>1.40129846e-45</p>
</td>
<td class="cellalignment295" headers="r5c1-t13 r1c3-t13">
<p>4.9406564584124654e-324</p>
</td>
<td class="cellalignment295" headers="r5c1-t13 r1c4-t13">
<p>not applicable</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r6c1-t13" headers="r1c1-t13">
<p>Precision (decimal digits)</p>
</td>
<td class="cellalignment295" headers="r6c1-t13 r1c2-t13">
<p>6 - 9</p>
</td>
<td class="cellalignment295" headers="r6c1-t13 r1c3-t13">
<p>15 - 17</p>
</td>
<td class="cellalignment295" headers="r6c1-t13 r1c4-t13">
<p>38 - 40</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>These numbers are from the <span class="italic">IEEE Numerical Computation Guide</span>.</p>
<a id="g1603939"></a>
<div id="ADFNS164" class="sect3">
<h4 class="sect3"><span class="secnum">7.3.2.1</span> Binary Floating-Point Formats</h4>
<p><a id="sthref324"></a><a id="sthref325"></a>This formula determines the value of a floating-point number that uses a binary format:</p>
<pre dir="ltr">(-1)<span class="superscript">sign</span> 2<span class="superscript">E</span> (bit<span class="subscript">0</span> bit<span class="subscript">1</span> bit<span class="subscript">2</span> ... bit<span class="subscript">p-1</span>)
</pre>
<p><a href="#BABBDEEJ">Table 7-3</a> describes the components of the preceding formula.</p>
<div id="ADFNS165" class="tblformal">
<p class="titleintable"><a id="sthref326"></a><a id="BABBDEEJ"></a>Table 7-3 Binary Floating-Point Format Components</p>
<table class="cellalignment293" title="Binary Floating-Point Format Components" summary="The table describes the components of the binary format for floating-point numbers" dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t14">Component</th>
<th class="cellalignment294" id="r1c2-t14">Component Value</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t14" headers="r1c1-t14">
<p><code dir="ltr">sign</code></p>
</td>
<td class="cellalignment295" headers="r2c1-t14 r1c2-t14">
<p>0 or 1</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t14" headers="r1c1-t14">
<p><code dir="ltr">E</code> (exponent)</p>
</td>
<td class="cellalignment295" headers="r3c1-t14 r1c2-t14">
<p>For single-precision (32-bit) data type, an integer from -126 through 127.</p>
<p>For double-precision (64-bit) data type, an integer from -1022 through 1023.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t14" headers="r1c1-t14">
<p><code dir="ltr">bit</code><sub>i</sub></p>
</td>
<td class="cellalignment295" headers="r4c1-t14 r1c2-t14">
<p>0 or 1. (The bit sequence represents a number in base 2.)</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t14" headers="r1c1-t14">
<p><code dir="ltr">p</code> (precision)</p>
</td>
<td class="cellalignment295" headers="r5c1-t14 r1c2-t14">
<p>For single-precision data type, 24.</p>
<p>For double-precision data type, 53.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>The leading bit of the significand, b<sub>0</sub>, must be set (1), except for subnormal numbers (explained later). Therefore, the leading bit is not stored, and a binary format provides <span class="italic">n</span> bits of precision while storing only <span class="italic">n</span>-1 bits. The IEEE 754 standard defines the in-memory formats for single-precision and double-precision data types, as <a href="#BABHAGJG">Table 7-4</a> shows.</p>
<div id="ADFNS167" class="tblformal">
<p class="titleintable"><a id="sthref327"></a><a id="BABHAGJG"></a>Table 7-4 Summary of Binary Format Storage Parameters</p>
<table class="cellalignment293" title=" Summary of Binary Format Storage Parameters" summary="This table summarizes the storage parameters of single-precision and double-precision binary formats." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t15">Data Type</th>
<th class="cellalignment294" id="r1c2-t15">Sign Bit</th>
<th class="cellalignment294" id="r1c3-t15">Exponent Bits</th>
<th class="cellalignment294" id="r1c4-t15">Significand Bits</th>
<th class="cellalignment294" id="r1c5-t15">Total Bits</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t15" headers="r1c1-t15">
<p>Single-precision</p>
</td>
<td class="cellalignment295" headers="r2c1-t15 r1c2-t15">
<p>1</p>
</td>
<td class="cellalignment295" headers="r2c1-t15 r1c3-t15">
<p>8</p>
</td>
<td class="cellalignment295" headers="r2c1-t15 r1c4-t15">
<p>24 (23 stored)</p>
</td>
<td class="cellalignment295" headers="r2c1-t15 r1c5-t15">
<p>32</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t15" headers="r1c1-t15">
<p>Double-precision</p>
</td>
<td class="cellalignment295" headers="r3c1-t15 r1c2-t15">
<p>1</p>
</td>
<td class="cellalignment295" headers="r3c1-t15 r1c3-t15">
<p>11</p>
</td>
<td class="cellalignment295" headers="r3c1-t15 r1c4-t15">
<p>53 (52 stored)</p>
</td>
<td class="cellalignment295" headers="r3c1-t15 r1c5-t15">
<p>64</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle Database does not support the extended single- and double-precision formats that the IEEE 754 standard defines.</div>
<p>A significand whose leading bit is set is called <a id="sthref328"></a><span class="glossaryterm">normalized</span>. The IEEE 754 standard defines <a id="sthref329"></a><a id="sthref330"></a><span class="glossaryterm">subnormal numbers</span> (also called <a id="sthref331"></a><a id="sthref332"></a><span class="glossaryterm">denormal numbers</span>) that are too small to represent with normalized significands. If the significand of a subnormal number were normalized, then its exponent would be too large. Subnormal numbers preserve this property: If <span class="italic">x</span>-<span class="italic">y</span>==0.0 (using floating-point subtraction), then <span class="italic">x</span>==<span class="italic">y</span>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="g1604808"></a>
<div id="ADFNS169" class="sect2">
<h3 class="sect2"><span class="secnum">7.3.3</span> Representing Special Values with Native Floating-Point Data Types</h3>
<p><a id="sthref333"></a><a id="sthref334"></a>The IEEE 754 standard supports the special values shown in <a href="#CIHDBGJD">Table 7-5</a>.</p>
<div id="ADFNS170" class="tblformal">
<p class="titleintable"><a id="sthref335"></a><a id="CIHDBGJD"></a>Table 7-5 Special Values for Native Floating-Point Formats</p>
<table class="cellalignment293" title="Special Values for Native Floating-Point Formats" summary="This table summarizes the special values that IEEE 754 uses to represent negative floating-point formats." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t17">Value</th>
<th class="cellalignment294" id="r1c2-t17">Meaning</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t17" headers="r1c1-t17">
<p><code dir="ltr">+INF</code></p>
</td>
<td class="cellalignment295" headers="r2c1-t17 r1c2-t17">
<p><a id="sthref336"></a><a id="sthref337"></a><a id="sthref338"></a>Positive infinity</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t17" headers="r1c1-t17">
<p><code dir="ltr">-INF</code></p>
</td>
<td class="cellalignment295" headers="r3c1-t17 r1c2-t17">
<p><a id="sthref339"></a>Negative infinity</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t17" headers="r1c1-t17">
<p><code dir="ltr">+0</code></p>
</td>
<td class="cellalignment295" headers="r4c1-t17 r1c2-t17">
<p><a id="sthref340"></a>Positive zero</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t17" headers="r1c1-t17">
<p><code dir="ltr">-0</code></p>
</td>
<td class="cellalignment295" headers="r5c1-t17 r1c2-t17">
<p><a id="sthref341"></a>Negative zero</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r6c1-t17" headers="r1c1-t17">
<p><code dir="ltr">NaN</code></p>
</td>
<td class="cellalignment295" headers="r6c1-t17 r1c2-t17">
<p><a id="sthref342"></a>Not a number</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>Each value in <a href="#CIHDBGJD">Table 7-5</a> is represented by a specific bit pattern, except <code dir="ltr">NaN</code>. <code dir="ltr">NaN</code>, the result of any undefined operation, is represented by many bit patterns. Some of these bits patterns have the sign bit set and some do not, but the sign bit has no meaning.</p>
<p>The IEEE 754 standard distinguishes between quiet <code dir="ltr">NaN</code>s (which do not raise additional exceptions as they propagate through most operations) and signaling <code dir="ltr">NaN</code>s (which do). The IEEE 754 standard specifies action for when exceptions are enabled and action for when they are disabled.</p>
<p>In Oracle Database, exceptions cannot be enabled. Oracle Database acts as the IEEE 754 standard specifies for when exceptions are disabled. In particular, Oracle Database does not distinguish between quiet and signaling <code dir="ltr">NaN</code>s. You can use Oracle Call Interface (OCI) to retrieve <code dir="ltr">NaN</code> values from Oracle Database, but whether a retrieved <code dir="ltr">NaN</code> value is signaling or quiet depends on the client platform and is beyond the control of Oracle Database.</p>
<p>The IEEE 754 standard defines these classes of special values:</p>
<ul>
<li>
<p>Zero</p>
</li>
<li>
<p>Subnormal</p>
</li>
<li>
<p>Normal</p>
</li>
<li>
<p>Infinity</p>
</li>
<li>
<p><code dir="ltr">NaN</code></p>
</li>
</ul>
<p>The values in each class in the preceding list are larger than the values in the classes that precede it in the list (ignoring signs), except <code dir="ltr">NaN</code>. <code dir="ltr">NaN</code> is unordered with other classes of special values and with itself.</p>
<p>In Oracle Database:</p>
<ul>
<li>
<p>All <code dir="ltr">NaN</code>s are quiet.</p>
</li>
<li>
<p>Any non-<code dir="ltr">NaN</code> value &lt; <code dir="ltr">NaN</code></p>
</li>
<li>
<p>Any <code dir="ltr">NaN</code> == any other <code dir="ltr">NaN</code></p>
</li>
<li>
<p>All <code dir="ltr">NaN</code>s are converted to the same bit pattern.</p>
</li>
<li>
<p>-0 is converted to +0.</p>
</li>
<li>
<p><a id="sthref343"></a><a id="sthref344"></a>IEEE 754 exceptions are not raised.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF52113" href="../SQLRF/conditions003.htm#SQLRF52113"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about floating-point conditions, which let you determine whether an expression is infinite or is the undefined result of an operation (is not a number or <code dir="ltr">NaN</code>).</div>
</div>
<!-- class="sect2" -->
<a id="BABEBBFG"></a>
<div id="ADFNS171" class="sect2">
<h3 class="sect2"><span class="secnum">7.3.4</span> Comparing Native Floating-Point Values</h3>
<p>When comparing numeric expressions, Oracle Database uses numeric precedence to determine whether the condition compares <code dir="ltr">NUMBER</code>, <code dir="ltr">BINARY_FLOAT</code>, or <code dir="ltr">BINARY_DOUBLE</code> values. For information about numeric precedence, see <a class="olink SQLRF50986" href="../SQLRF/sql_elements001.htm#SQLRF50986"><span class="italic">Oracle Database SQL Language Reference</span></a>. For general information about comparing numeric expressions, see <a class="olink SQLRF52105" href="../SQLRF/conditions002.htm#SQLRF52105"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<p>Comparisons ignore the sign of zero (<code dir="ltr">-0</code> equals <code dir="ltr">+0</code>).</p>
</div>
<!-- class="sect2" -->
<a id="BABBCCJF"></a>
<div id="ADFNS172" class="sect2">
<h3 class="sect2"><span class="secnum">7.3.5</span> Arithmetic Operations with Native Floating-Point Data Types</h3>
<p><a id="sthref345"></a><a id="sthref346"></a>IEEE 754 does not require floating-point arithmetic to be exactly reproducible. Therefore, results of operations can be delivered to a destination that uses a range greater than the range that the operands of the operation use.</p>
<p>You can compute the result of a double-precision multiplication at an extended double-precision destination, but the result must be rounded as if the destination were single-precision or double-precision. The range of the result (that is, the number of bits used for the exponent) can use the range supported by the wider (extended double-precision) destination; however, this might cause a double-rounding error in which the least significant bit of the result is incorrect.</p>
<p>This situation can occur only for double-precision multiplication and division on hardware that implements the <a id="sthref347"></a>IA-32 and IA-64 instruction set architecture. Therefore, except for this case, arithmetic for these data types is reproducible across platforms. When the result of a computation is <code dir="ltr">NaN</code>, all platforms produce a value for which <code dir="ltr">IS&nbsp;NAN</code> is true. However, all platforms do not have to use the same bit pattern.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF51156" href="../SQLRF/operators002.htm#SQLRF51156"><span class="italic">Oracle Database SQL Language Reference</span></a> for general information about arithmetic operations</div>
</div>
<!-- class="sect2" -->
<a id="BABJAEGB"></a>
<div id="ADFNS173" class="sect2">
<h3 class="sect2"><span class="secnum">7.3.6</span> Conversion Functions for Native Floating-Point Data Types</h3>
<p><a id="sthref348"></a><a id="sthref349"></a>Oracle Database defines functions that convert between floating-point and other data types, including string formats that use decimal precision (but precision might be lost during the conversion). For example:</p>
<ul>
<li>
<p><a class="olink SQLRF06309" href="../SQLRF/functions212.htm#SQLRF06309"><code dir="ltr">TO_BINARY_DOUBLE</code></a>, described in <a class="olink SQLRF06309" href="../SQLRF/functions212.htm#SQLRF06309"><span class="italic">Oracle Database SQL Language Reference</span></a></p>
</li>
<li>
<p><a class="olink SQLRF06310" href="../SQLRF/functions213.htm#SQLRF06310"><code dir="ltr">TO_BINARY_FLOAT</code></a>, described in <a class="olink SQLRF06310" href="../SQLRF/functions213.htm#SQLRF06310"><span class="italic">Oracle Database SQL Language Reference</span></a></p>
</li>
<li>
<p><a class="olink SQLRF06130" href="../SQLRF/functions217.htm#SQLRF06130"><code dir="ltr">TO_CHAR</code></a>, described in <a class="olink SQLRF06128" href="../SQLRF/functions215.htm#SQLRF06128"><span class="italic">Oracle Database SQL Language Reference</span></a></p>
</li>
<li>
<p><a class="olink SQLRF06140" href="../SQLRF/functions227.htm#SQLRF06140"><code dir="ltr">TO_NUMBER</code></a>, described in <a class="olink SQLRF06130" href="../SQLRF/functions217.htm#SQLRF06130"><span class="italic">Oracle Database SQL Language Reference</span></a></p>
</li>
</ul>
<p>Oracle Database can raise exceptions during conversion. The <a id="sthref350"></a><a id="sthref351"></a>IEEE 754 standard defines these exceptions:</p>
<ul>
<li>
<p>Invalid</p>
</li>
<li>
<p>Inexact</p>
</li>
<li>
<p>Divide by zero</p>
</li>
<li>
<p>Underflow</p>
</li>
<li>
<p>Overflow</p>
</li>
</ul>
<p>However, Oracle Database does not raise these exceptions for native floating-point data types. Generally, operations that raise exceptions produce the values described in <a href="#BABCHEII">Table 7-6</a>.</p>
<div id="ADFNS174" class="tblformal">
<p class="titleintable"><a id="sthref352"></a><a id="BABCHEII"></a>Table 7-6 Values Resulting from Exceptions</p>
<table class="cellalignment293" title="Values Resulting from Exceptions" summary="This table summarizes the values that can result from exceptions." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t20">Exception</th>
<th class="cellalignment294" id="r1c2-t20">Value</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t20" headers="r1c1-t20">
<p>Underflow</p>
</td>
<td class="cellalignment295" headers="r2c1-t20 r1c2-t20">
<p><code dir="ltr">0</code></p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t20" headers="r1c1-t20">
<p>Overflow</p>
</td>
<td class="cellalignment295" headers="r3c1-t20 r1c2-t20">
<p><code dir="ltr">-INF</code>, <code dir="ltr">+INF</code></p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t20" headers="r1c1-t20">
<p>Invalid Operation</p>
</td>
<td class="cellalignment295" headers="r4c1-t20 r1c2-t20">
<p><code dir="ltr">NaN</code></p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t20" headers="r1c1-t20">
<p>Divide by Zero</p>
</td>
<td class="cellalignment295" headers="r5c1-t20 r1c2-t20">
<p><code dir="ltr">-INF</code>, <code dir="ltr">+INF</code>, <code dir="ltr">NaN</code></p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r6c1-t20" headers="r1c1-t20">
<p>Inexact</p>
</td>
<td class="cellalignment295" headers="r6c1-t20 r1c2-t20">
<p>Any value &ndash; rounding was performed</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<a id="BABJJBAD"></a>
<div id="ADFNS175" class="sect2">
<h3 class="sect2"><span class="secnum">7.3.7</span> Client Interfaces for Native Floating-Point Data Types</h3>
<p>Oracle Database supports native floating-point data types in these <a id="sthref353"></a>client interfaces:</p>
<ul>
<li>
<p>SQL and PL/SQL</p>
<p>Support for <code dir="ltr">BINARY_FLOAT</code> and <code dir="ltr">BINARY_DOUBLE</code> includes their use as attributes of <a id="sthref354"></a>Abstract Data Types (ADTs), which you create with the SQL statement <code dir="ltr">CREATE</code> <code dir="ltr">TYPE</code> (fully described in <a class="olink LNPLS01375" href="../LNPLS/create_type.htm#LNPLS01375"><span class="italic">Oracle Database PL/SQL Language Reference</span></a>).</p>
</li>
<li>
<p><a id="sthref355"></a>Oracle Call Interface (OCI)</p>
<p>For information about using <code dir="ltr">BINARY_FLOAT</code> and <code dir="ltr">BINARY_DOUBLE</code> with OCI, see <a class="olink LNOCI031" href="../LNOCI/oci03typ.htm#LNOCI031"><span class="italic">Oracle Call Interface Programmer&#39;s Guide</span></a>.</p>
</li>
<li>
<p><a id="sthref356"></a>Oracle C++ Call Interface (OCCI)</p>
<p>For information about using <code dir="ltr">BINARY_FLOAT</code> with OCCI, see <a class="olink LNCPP20220" href="../LNCPP/types.htm#LNCPP20220"><span class="italic">Oracle C++ Call Interface Programmer&#39;s Guide</span></a>.</p>
<p>For information about using <code dir="ltr">BINARY_DOUBLE</code> with OCCI, see <a class="olink LNCPP20218" href="../LNCPP/types.htm#LNCPP20218"><span class="italic">Oracle C++ Call Interface Programmer&#39;s Guide</span></a>.</p>
</li>
<li>
<p><a id="sthref357"></a>Pro*C/C++ precompiler</p>
<p>To use <code dir="ltr">BINARY_FLOAT</code> and <code dir="ltr">BINARY_DOUBLE</code>, set the Pro*C/C++ precompiler command line option <code dir="ltr">NATIVE_TYPES</code> to <code dir="ltr">YES</code> when you compile your application. For information about the <code dir="ltr">NATIVE_TYPES</code> option, see <a class="olink LNPCC3797" href="../LNPCC/pc_10opt.htm#LNPCC3797"><span class="italic">Pro*C/C++ Programmer&#39;s Guide</span></a>.</p>
</li>
<li>
<p><a id="sthref358"></a>Oracle JDBC</p>
<p>For information about using <code dir="ltr">BINARY_FLOAT</code> and <code dir="ltr">BINARY_DOUBLE</code> with Oracle JDBC, see <a class="olink JJDBC28906" href="../JJDBC/apxref.htm#JJDBC28906"><span class="italic">Oracle Database JDBC Developer&#39;s Guide</span></a>.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABJJCAI"></a>
<div id="ADFNS00304" class="sect1">
<h2 class="sect1"><span class="secnum">7.4</span> Representing Date and Time Data</h2>
<p>Oracle Database stores <code dir="ltr">DATE</code> and <code dir="ltr">TIMESTAMP</code> (<a id="sthref359"></a><a id="sthref360"></a><span class="bold">datetime</span>) data in a binary format that represents the century, year, month, day, hour, minute, second, and optionally, fractional seconds and timezones.</p>
<p><a href="#BABDBGIE">Table 7-7</a> summarizes the SQL datetime data types. For more information about these data types, see <a class="olink SQLRF00200" href="../SQLRF/sql_elements001.htm#SQLRF00200"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<div id="ADFNS993" class="tblformal">
<p class="titleintable"><a id="sthref361"></a><a id="BABDBGIE"></a>Table 7-7 SQL Datetime Data Types</p>
<table class="cellalignment293" title="SQL Datetime Data Types" summary="This table lists and briefly describes the SQL data types that store date and time data." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t21">Date Type</th>
<th class="cellalignment294" id="r1c2-t21">Usage</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t21" headers="r1c1-t21">
<p><a class="olink SQLRF00202" href="../SQLRF/sql_elements001.htm#SQLRF00202"><code dir="ltr">DATE</code></a></p>
</td>
<td class="cellalignment295" headers="r2c1-t21 r1c2-t21">
<p>For storing datetime values in a table&mdash;for example, dates of jobs.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t21" headers="r1c1-t21">
<p><a class="olink SQLRF00203" href="../SQLRF/sql_elements001.htm#SQLRF00203"><code dir="ltr">TIMESTAMP</code></a></p>
</td>
<td class="cellalignment295" headers="r3c1-t21 r1c2-t21">
<p>For storing datetime values that are precise to fractional seconds&mdash;for example, times of events that must be compared to determine the order in which they occurred.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t21" headers="r1c1-t21">
<p><a class="olink SQLRF00204" href="../SQLRF/sql_elements001.htm#SQLRF00204"><code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code></a></p>
</td>
<td class="cellalignment295" headers="r4c1-t21 r1c2-t21">
<p>For storing datetime values that must be gathered or coordinated across geographic regions.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t21" headers="r1c1-t21">
<p><a class="olink SQLRF00205" href="../SQLRF/sql_elements001.htm#SQLRF00205"><code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">LOCAL</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code></a></p>
</td>
<td class="cellalignment295" headers="r5c1-t21 r1c2-t21">
<p>For storing datetime values when the time zone is insignificant&mdash;for example, in an application that schedules teleconferences, where participants see the start and end times for their own time zone.</p>
<p>Appropriate for two-tier applications in which you want to display dates and times that use the time zone of the client system. Usually inappropriate for three-tier applications, because data displayed in a web browser is formatted according to the time zone of the web server, not the time zone of the browser. The web server is the database client, so its local time is used.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r6c1-t21" headers="r1c1-t21">
<p><a class="olink SQLRF00206" href="../SQLRF/sql_elements001.htm#SQLRF00206"><code dir="ltr">INTERVAL</code> <code dir="ltr">YEAR</code> <code dir="ltr">TO</code> <code dir="ltr">MONTH</code></a></p>
</td>
<td class="cellalignment295" headers="r6c1-t21 r1c2-t21">
<p>For storing the difference between two datetime values, where only the year and month are significant&mdash;for example, to set a reminder for a date 18 months in the future, or check whether 6 months have elapsed since a particular date.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r7c1-t21" headers="r1c1-t21">
<p><a class="olink SQLRF00207" href="../SQLRF/sql_elements001.htm#SQLRF00207"><code dir="ltr">INTERVAL</code> <code dir="ltr">DAY</code> <code dir="ltr">TO</code> <code dir="ltr">SECOND</code></a></p>
</td>
<td class="cellalignment295" headers="r7c1-t21 r1c2-t21">
<p>For storing the precise difference between two datetime values&mdash;for example, to set a reminder for a time 36 hours in the future or to record the time between the start and end of a race. To represent long spans of time with high precision, use a large number of days.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="ADFNS994"></a>Topics:</p>
<ul>
<li>
<p><a href="#BABECDEC">Displaying Current Date and Time</a></p>
</li>
<li>
<p><a href="#BABHDJBH">Inserting and Displaying Dates</a></p>
</li>
<li>
<p><a href="#BABGCHCC">Inserting and Displaying Times</a></p>
</li>
<li>
<p><a href="#BABBDBFI">Arithmetic Operations with Datetime Data Types</a></p>
</li>
<li>
<p><a href="#BABBHEGE">Conversion Functions for Datetime Data Types</a></p>
</li>
<li>
<p><a href="#BABFCHAJ">Importing, Exporting, and Comparing Datetime Types</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNCPP20210" href="../LNCPP/types.htm#LNCPP20210"><span class="italic">Oracle Call Interface Programmer&#39;s Guide</span></a> for more information about Oracle Database internal date types</div>
<a id="BABECDEC"></a>
<div id="ADFNS180" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">7.4.1</span> Displaying Current Date and Time</h3>
<p>The simplest way to display the <a id="sthref362"></a><a id="sthref363"></a><a id="sthref364"></a>current date and time is:</p>
<pre dir="ltr">SELECT TO_CHAR(<a id="sthref365"></a>SYSDATE, <span class="italic">format_model</span>) FROM DUAL
</pre>
<p>The <a id="sthref366"></a>default format model depends on the initialization parameter <a id="sthref367"></a><a id="sthref368"></a><code dir="ltr">NLS_DATE_FORMAT</code>.</p>
<p>The standard Oracle Database default date format is <code dir="ltr">DD-MON-RR</code>. The <a id="sthref369"></a><code dir="ltr">RR</code> datetime format element lets you store 20th century dates in the 21st century by specifying only the last two digits of the year. For example, in the datetime format <code dir="ltr">DD-MON-YY</code>, <code dir="ltr">13-NOV-54</code> refers to the year 1954 in a query issued between 1950 and 2049, but to the year 2054 in a query issued between 2050 and 2149.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
For program correctness and to avoid problems with SQL injection and dynamic SQL, Oracle recommends specifying a format model for every datetime value.</div>
<p>The simplest way to display the current date and time using a format model is:</p>
<pre dir="ltr">SELECT TO_CHAR(SYSDATE, <span class="italic">format_model</span>) FROM DUAL
</pre>
<p><a href="#BABHFGBE">Example 7-2</a> uses <code dir="ltr">TO_CHAR</code> with a format model to display <code dir="ltr">SYSDATE</code> in a format with the qualifier BC or AD. (By default, <code dir="ltr">SYSDATE</code> is displayed without this qualifier.)</p>
<div id="ADFNS181" class="example">
<p class="titleinexample"><a id="BABHFGBE"></a>Example 7-2 Displaying Current Date and Time</p>
<pre dir="ltr">SELECT <span class="bold">TO_CHAR(SYSDATE, &#39;DD-MON-YYYY BC&#39;)</span> NOW FROM DUAL;
 
</pre>
<p>Result:</p>
<pre dir="ltr">NOW
-----------------------
18-MAR-2009 AD
 
1 row selected.
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
When testing code that uses <code dir="ltr">SYSDATE</code>, it can be helpful to set <code dir="ltr">SYSDATE</code> to a constant. Do this with the initialization parameter <a id="sthref370"></a><a id="sthref371"></a><code dir="ltr">FIXED_DATE</code>, described in <a class="olink REFRN10062" href="../REFRN/GUID-2AE0D45E-C4EB-4A12-87F0-69F7CFF1CB30.htm#REFRN10062"><span class="italic">Oracle Database Reference</span></a>.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink SQLRF06124" href="../SQLRF/functions207.htm#SQLRF06124"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about <code dir="ltr">SYSDATE</code></p>
</li>
<li>
<p><a class="olink NLSPG204" href="../NLSPG/ch3globenv.htm#NLSPG204"><span class="italic">Oracle Database Globalization Support Guide</span></a> for information about <code dir="ltr">NLS_DATE_FORMAT</code></p>
</li>
<li>
<p><a class="olink SQLRF06129" href="../SQLRF/functions216.htm#SQLRF06129"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about <code dir="ltr">TO_CHAR</code></p>
</li>
<li>
<p><a class="olink SQLRF00212" href="../SQLRF/sql_elements004.htm#SQLRF00212"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about datetime format models</p>
</li>
<li>
<p><a class="olink SQLRF00215" href="../SQLRF/sql_elements004.htm#SQLRF00215"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about the <code dir="ltr">RR</code> datetime format element</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="BABHDJBH"></a>
<div id="ADFNS182" class="sect2">
<h3 class="sect2"><span class="secnum">7.4.2</span> Inserting and Displaying Dates</h3>
<p>When you <a id="sthref372"></a>display and <a id="sthref373"></a>insert dates, Oracle recommends using the <code dir="ltr">TO_CHAR</code> and <code dir="ltr">TO_DATE</code> functions, respectively, with datetime format models.</p>
<p><a href="#BABICJIB">Example 7-3</a> creates a table with a <code dir="ltr">DATE</code> column and inserts a date into it, specifying a format model. Then the example displays the date with and without specifying a format model.</p>
<div id="ADFNS183" class="example">
<p class="titleinexample"><a id="BABICJIB"></a>Example 7-3 Inserting and Displaying Dates</p>
<p>Create table:</p>
<pre dir="ltr">DROP TABLE dates;
CREATE TABLE dates (d DATE);
 
</pre>
<p>Insert date specified into table, specifying a format model:</p>
<pre dir="ltr">INSERT INTO dates VALUES (<span class="bold">TO_DATE(&#39;OCT 27, 1998&#39;, &#39;MON DD, YYYY&#39;)</span>);
 
</pre>
<p>Display date without specifying a format model:</p>
<pre dir="ltr">SELECT d FROM dates;
 
</pre>
<p>Result:</p>
<pre dir="ltr">D
---------
<span class="bold">27-OCT-98</span>
 
1 row selected.
</pre>
<p>Display date, specifying a format model:</p>
<pre dir="ltr">SELECT <span class="bold">TO_CHAR(d, &#39;YYYY-MON-DD&#39;)</span> D FROM dates;
</pre>
<p>Result:</p>
<pre dir="ltr">D
--------------------
<span class="bold">1998-OCT-27</span>
 
1 row selected.
</pre></div>
<!-- class="example" -->
<div class="infobox-note">
<p class="notep1">Caution:</p>
Be careful when using the <a id="sthref374"></a><code dir="ltr">YY</code> datetime format element, which indicates the year in the current century. For example, in the 21st century, the format <code dir="ltr">DD-MON-YY</code>, <code dir="ltr">31-DEC-92</code> is December 31, 2092 (not December 31, 1992, as you might expect). To store 20th century dates in the 21st century by specifying only the last two digits of the year, use the <code dir="ltr">RR</code> datetime format element (the default).</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink NLSPG204" href="../NLSPG/ch3globenv.htm#NLSPG204"><span class="italic">Oracle Database Globalization Support Guide</span></a> for information about <code dir="ltr">NLS_DATE_FORMAT</code></p>
</li>
<li>
<p><a class="olink SQLRF06129" href="../SQLRF/functions216.htm#SQLRF06129"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about <code dir="ltr">TO_CHAR</code></p>
</li>
<li>
<p><a class="olink SQLRF06132" href="../SQLRF/functions219.htm#SQLRF06132"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about <code dir="ltr">TO_DATE</code></p>
</li>
<li>
<p><a class="olink SQLRF00212" href="../SQLRF/sql_elements004.htm#SQLRF00212"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about datetime format models</p>
</li>
<li>
<p><a class="olink SQLRF00215" href="../SQLRF/sql_elements004.htm#SQLRF00215"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about the <code dir="ltr">RR</code> datetime format element</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="BABGCHCC"></a>
<div id="ADFNS184" class="sect2">
<h3 class="sect2"><span class="secnum">7.4.3</span> Inserting and Displaying Times</h3>
<p>When you <a id="sthref375"></a>display and <a id="sthref376"></a>insert times, Oracle recommends using the <code dir="ltr">TO_CHAR</code> and <code dir="ltr">TO_DATE</code> functions, respectively, with datetime format models.</p>
<p>In a <code dir="ltr">DATE</code> column:</p>
<ul>
<li>
<p>The <a id="sthref377"></a>default time is 12:00:00 A.M. (midnight).</p>
<p>The default time applies to any value in the column that has no time portion, either because none was specified or because the value was truncated.</p>
</li>
<li>
<p>The <a id="sthref378"></a>default day is the first day of the current month.</p>
<p>The default date applies to any value in the column that has no date portion, because none was specified.</p>
</li>
</ul>
<p><a href="#BABBHIGI">Example 7-4</a> creates a table with a <code dir="ltr">DATE</code> column and inserts three dates into it, specifying a different format model for each date. The first format model has both date and time portions, the second has no time portion, and the third has no date portion. Then the example displays the three dates, specifying a format model that includes both date and time portions.</p>
<div id="ADFNS185" class="example">
<p class="titleinexample"><a id="BABBHIGI"></a>Example 7-4 Inserting and Displaying Dates and Times</p>
<p>Create table:</p>
<pre dir="ltr">DROP TABLE birthdays;
CREATE TABLE birthdays (name VARCHAR2(20), day DATE);
 
</pre>
<p>Insert three dates, specifying a different format model for each date:</p>
<pre dir="ltr">INSERT INTO birthdays (name, day)
VALUES (&#39;Annie&#39;,
        <span class="bold">TO_DATE(&#39;13-NOV-92 10:56 A.M.&#39;,&#39;DD-MON-RR HH:MI A.M.&#39;)</span>
       );
 
INSERT INTO birthdays (name, day)
VALUES (&#39;Bobby&#39;,
        <span class="bold">TO_DATE(&#39;5-APR-02&#39;,&#39;DD-MON-RR&#39;)</span>
       );
 
INSERT INTO birthdays (name, day)
VALUES (&#39;Cindy&#39;,
        <span class="bold">TO_DATE(&#39;8:25 P.M.&#39;,&#39;HH:MI A.M.&#39;)</span>
       );
 
</pre>
<p>Display both date and time portions of stored datetime values:</p>
<pre dir="ltr">SELECT name,
       <span class="bold">TO_CHAR(day, &#39;Mon DD, RRRR&#39;)</span> DAY,
       <span class="bold">TO_CHAR(day, &#39;HH:MI A.M.&#39;)</span> TIME
FROM birthdays;
 
</pre>
<p>Result:</p>
<pre dir="ltr">NAME                 DAY                   TIME
-------------------- --------------------- ----------
Annie                <span class="bold">Nov 13, 1992          10:56 A.M.</span>
Bobby                <span class="bold">Apr 05, 2002          12:00 A.M.</span>
Cindy                <span class="bold">Nov 01, 2010          08:25 P.M.</span>
 
3 rows selected.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="BABBDBFI"></a>
<div id="ADFNS202" class="sect2">
<h3 class="sect2"><span class="secnum">7.4.4</span> Arithmetic Operations with Datetime Data Types</h3>
<p><a id="sthref379"></a><a id="sthref380"></a>The results of arithmetic operations on datetime values are determined by the rules in <a class="olink SQLRF00208" href="../SQLRF/sql_elements001.htm#SQLRF00208"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<p>SQL has many datetime functions that you can use in datetime expressions. For example, the function <code dir="ltr">ADD_MONTHS</code> returns the date that is a specified number of months from a specified date. For the complete list of datetime functions, see <a class="olink SQLRF20033" href="../SQLRF/functions002.htm#SQLRF20033"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</div>
<!-- class="sect2" -->
<a id="BABBHEGE"></a>
<div id="ADFNS203" class="sect2">
<h3 class="sect2"><span class="secnum">7.4.5</span> Conversion Functions for Datetime Data Types</h3>
<p><a id="sthref381"></a><a id="sthref382"></a><a href="#BABBDBEI">Table 7-8</a> summarizes the <a id="sthref383"></a>SQL functions that convert to or from datetime data types. For more information about these functions, see <a class="olink SQLRF20034" href="../SQLRF/functions002.htm#SQLRF20034"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<div id="ADFNS995" class="tblformal">
<p class="titleintable"><a id="sthref384"></a><a id="BABBDBEI"></a>Table 7-8 SQL Conversion Functions for Datetime Data Types</p>
<table class="cellalignment293" title="SQL Conversion Functions for Datetime Data Types" summary="This table summarizes the SQL functions that convert to or from datetime data types. The first column lists the functions by name, in alphabetical order, and each name is a link to the description of the function in SQLRF. The second column gives the data type of the value to be converted. The third column gives the data type of the value that the function returns." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t28">Function</th>
<th class="cellalignment294" id="r1c2-t28">Converts ...</th>
<th class="cellalignment294" id="r1c3-t28">To ...</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t28" headers="r1c1-t28">
<p><a class="olink SQLRF00682" href="../SQLRF/functions129.htm#SQLRF00682"><code dir="ltr">NUMTODSINTERVAL</code></a></p>
</td>
<td class="cellalignment295" headers="r2c1-t28 r1c2-t28">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment295" headers="r2c1-t28 r1c3-t28">
<p><code dir="ltr">INTERVAL</code> <code dir="ltr">DAY</code> <code dir="ltr">TO</code> <code dir="ltr">SECOND</code></p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t28" headers="r1c1-t28">
<p><a class="olink SQLRF00683" href="../SQLRF/functions130.htm#SQLRF00683"><code dir="ltr">NUMTOYMINTERVAL</code></a></p>
</td>
<td class="cellalignment295" headers="r3c1-t28 r1c2-t28">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment295" headers="r3c1-t28 r1c3-t28">
<p><code dir="ltr">INTERVAL</code> <code dir="ltr">DAY</code> <code dir="ltr">TO</code> <code dir="ltr">MONTH</code></p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t28" headers="r1c1-t28">
<p><a class="olink SQLRF06129" href="../SQLRF/functions216.htm#SQLRF06129"><code dir="ltr">TO_CHAR</code></a></p>
</td>
<td class="cellalignment295" headers="r4c1-t28 r1c2-t28">
<p><code dir="ltr">DATE</code></p>
<p><code dir="ltr">TIMESTAMP</code></p>
<p><code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code></p>
<p><code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">LOCAL</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code></p>
<p><code dir="ltr">INTERVAL</code> <code dir="ltr">DAY</code> <code dir="ltr">TO</code> <code dir="ltr">SECOND</code></p>
<p><code dir="ltr">INTERVAL</code> <code dir="ltr">YEAR</code> <code dir="ltr">TO</code> <code dir="ltr">MONTH</code></p>
</td>
<td class="cellalignment295" headers="r4c1-t28 r1c3-t28">
<p><code dir="ltr">VARCHAR2</code></p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t28" headers="r1c1-t28">
<p><a class="olink SQLRF06132" href="../SQLRF/functions219.htm#SQLRF06132"><code dir="ltr">TO_DATE</code></a></p>
</td>
<td class="cellalignment295" headers="r5c1-t28 r1c2-t28">
<p><code dir="ltr">CHAR</code></p>
<p><code dir="ltr">VARCHAR2</code></p>
<p><code dir="ltr">NCHAR</code></p>
<p><code dir="ltr">NVARCHAR2</code></p>
</td>
<td class="cellalignment295" headers="r5c1-t28 r1c3-t28">
<p><code dir="ltr">DATE</code></p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r6c1-t28" headers="r1c1-t28">
<p><a class="olink SQLRF06133" href="../SQLRF/functions220.htm#SQLRF06133"><code dir="ltr">TO_DSINTERVAL</code></a></p>
</td>
<td class="cellalignment295" headers="r6c1-t28 r1c2-t28">
<p><code dir="ltr">CHAR</code></p>
<p><code dir="ltr">VARCHAR2</code></p>
<p><code dir="ltr">NCHAR</code></p>
<p><code dir="ltr">NVARCHAR2</code></p>
</td>
<td class="cellalignment295" headers="r6c1-t28 r1c3-t28">
<p><code dir="ltr">INTERVAL</code> <code dir="ltr">DAY</code> <code dir="ltr">TO</code> <code dir="ltr">SECOND</code></p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r7c1-t28" headers="r1c1-t28">
<p><a class="olink SQLRF06142" href="../SQLRF/functions229.htm#SQLRF06142"><code dir="ltr">TO_TIMESTAMP</code></a></p>
</td>
<td class="cellalignment295" headers="r7c1-t28 r1c2-t28">
<p><code dir="ltr">CHAR</code></p>
<p><code dir="ltr">VARCHAR2</code></p>
<p><code dir="ltr">NCHAR</code></p>
<p><code dir="ltr">NVARCHAR2</code></p>
</td>
<td class="cellalignment295" headers="r7c1-t28 r1c3-t28">
<p><code dir="ltr">TIMESTAMP</code></p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r8c1-t28" headers="r1c1-t28">
<p><a class="olink SQLRF06143" href="../SQLRF/functions230.htm#SQLRF06143"><code dir="ltr">TO_TIMESTAMP_TZ</code></a></p>
</td>
<td class="cellalignment295" headers="r8c1-t28 r1c2-t28">
<p><code dir="ltr">CHAR</code></p>
<p><code dir="ltr">VARCHAR2</code></p>
<p><code dir="ltr">NCHAR</code></p>
<p><code dir="ltr">NVARCHAR2</code></p>
</td>
<td class="cellalignment295" headers="r8c1-t28 r1c3-t28">
<p><code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code></p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r9c1-t28" headers="r1c1-t28">
<p><a class="olink SQLRF06144" href="../SQLRF/functions231.htm#SQLRF06144"><code dir="ltr">TO_YMINTERVAL</code></a></p>
</td>
<td class="cellalignment295" headers="r9c1-t28 r1c2-t28">
<p><code dir="ltr">CHAR</code></p>
<p><code dir="ltr">VARCHAR2</code></p>
<p><code dir="ltr">NCHAR</code></p>
<p><code dir="ltr">NVARCHAR2</code></p>
</td>
<td class="cellalignment295" headers="r9c1-t28 r1c3-t28">
<p><code dir="ltr">INTERVAL</code> <code dir="ltr">DAY</code> <code dir="ltr">TO</code> <code dir="ltr">MONTH</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<a id="BABFCHAJ"></a>
<div id="ADFNS204" class="sect2">
<h3 class="sect2"><span class="secnum">7.4.6</span> Importing, Exporting, and Comparing Datetime Types</h3>
<p>You can <a id="sthref385"></a>import, export, and compare <code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code> and <code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">LOCAL</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code> values without worrying about time zone offsets, because the database stores these values in normalized format.</p>
<p>When importing, exporting, and comparing <code dir="ltr">DATE</code> and <code dir="ltr">TIMESTAMP</code> values, you must adjust them to account for any time zone differences between source and target databases, because the database does not store their time zones.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABECADE"></a>
<div id="ADFNS00305" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">7.5</span> Representing Specialized Data</h2>
<p class="subhead2"><a id="ADFNS996"></a>Topics:</p>
<ul>
<li>
<p><a href="#BABCEJHF">Representing Spatial Data</a></p>
</li>
<li>
<p><a href="#BABJBEAF">Representing Multimedia Data</a></p>
</li>
<li>
<p><a href="#BABBGGGA">Representing Large Amounts of Data</a></p>
</li>
<li>
<p><a href="#BABFAAGA">Representing Searchable Text</a></p>
</li>
<li>
<p><a href="#BABFFECA">Representing XML Data</a></p>
</li>
<li>
<p><a href="#BABBIIFB">Representing Dynamically Typed Data</a></p>
</li>
<li>
<p><a href="#BABCHDCD">Representing ANSI, DB2, and SQL/DS Data</a></p>
</li>
</ul>
<a id="BABCEJHF"></a>
<div id="ADFNS205" class="sect2">
<h3 class="sect2"><span class="secnum">7.5.1</span> Representing Spatial Data</h3>
<p><a id="sthref386"></a><a id="sthref387"></a>Spatial data is used by location-enabled applications, <a id="sthref388"></a><a id="sthref389"></a>geographic information system (GIS) applications, and geoimaging applications. For information about representing spatial data in Oracle Database, see <a class="olink SQLRF30025" href="../SQLRF/sql_elements001.htm#SQLRF30025"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</div>
<!-- class="sect2" -->
<a id="BABJBEAF"></a>
<div id="ADFNS206" class="sect2">
<h3 class="sect2"><span class="secnum">7.5.2</span> Representing Multimedia Data</h3>
<p><a id="sthref390"></a><a id="sthref391"></a><a id="sthref392"></a>Oracle Multimedia lets Oracle Database store, manage, and retrieve images, audio, video, or other heterogeneous media data. For information about representing multimedia data in Oracle Database, see <a class="olink SQLRF30026" href="../SQLRF/sql_elements001.htm#SQLRF30026"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</div>
<!-- class="sect2" -->
<a id="BABBGGGA"></a>
<div id="ADFNS207" class="sect2">
<h3 class="sect2"><span class="secnum">7.5.3</span> Representing Large Amounts of Data</h3>
<p>For representing <a id="sthref393"></a>large amounts of data, Oracle Database provides:</p>
<ul>
<li>
<p><a href="#BABBEIHB">Large Objects (LOBs)</a></p>
</li>
<li>
<p><a href="#BABDBGJA">LONG and LONG RAW Data Types</a> (for backward compatibility)</p>
</li>
</ul>
<a id="BABBEIHB"></a>
<div id="ADFNS99867" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">7.5.3.1</span> Large Objects (LOBs)</h4>
<p><a id="sthref394"></a><span class="bold">Large Objects (LOBs)</span> are data types that are designed to store large amounts of data in a way that lets your application access and manipulate it efficiently.</p>
<p><a href="#BABBFEJI">Table 7-9</a> summarizes the LOBs. For more information about these functions, see <a class="olink SQLRF50994" href="../SQLRF/sql_elements001.htm#SQLRF50994"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<div id="ADFNS208" class="tblformal">
<p class="titleintable"><a id="sthref395"></a><a id="BABBFEJI"></a>Table 7-9 Large Objects (LOBs)</p>
<table class="cellalignment293" title=" Large Objects (LOBs)" summary="This table summarizes large object datatypes." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t29">Data Type</th>
<th class="cellalignment294" id="r1c2-t29">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t29" headers="r1c1-t29">
<p><a class="olink SQLRF50997" href="../SQLRF/sql_elements001.htm#SQLRF50997"></a><a id="sthref396"></a>BLOB</p>
</td>
<td class="cellalignment295" headers="r2c1-t29 r1c2-t29">
<p><a id="sthref397"></a><span class="bold">Binary large object</span></p>
<p>Stores any kind of data in binary format.</p>
<p>Typically used for multimedia data such as images, audio, and video.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t29" headers="r1c1-t29">
<p><a class="olink SQLRF20041" href="../SQLRF/sql_elements001.htm#SQLRF20041"></a><a id="sthref398"></a>CLOB</p>
</td>
<td class="cellalignment295" headers="r3c1-t29 r1c2-t29">
<p><a id="sthref399"></a><span class="bold">Character large object</span></p>
<p>Stores string data in the database character set format.</p>
<p>Used for large strings or documents that use the database character set exclusively.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t29" headers="r1c1-t29">
<p><a class="olink SQLRF20042" href="../SQLRF/sql_elements001.htm#SQLRF20042"></a><a id="sthref400"></a>NCLOB</p>
</td>
<td class="cellalignment295" headers="r4c1-t29 r1c2-t29">
<p><a id="sthref401"></a><span class="bold">National character large object</span></p>
<p>Stores string data in National Character Set format.</p>
<p>Used for large strings or documents in the National Character Set.</p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t29" headers="r1c1-t29">
<p><a class="olink SQLRF50996" href="../SQLRF/sql_elements001.htm#SQLRF50996"></a><a id="sthref402"></a>BFILE</p>
</td>
<td class="cellalignment295" headers="r5c1-t29 r1c2-t29">
<p><a id="sthref403"></a><span class="bold">External large object</span></p>
<p>Stores a binary file outside the database in the host operating system file system. Applications have read-only access to <code dir="ltr">BFILE</code>s.</p>
<p>Used for static data that applications do not manipulate, such as image data.</p>
<p>Any kind of data (that is, any operating system file) can be stored in a <code dir="ltr">BFILE</code>. For example, you can store character data in a <code dir="ltr">BFILE</code> and then load the <code dir="ltr">BFILE</code> data into a <code dir="ltr">CLOB</code>, specifying the character set when loading.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" -->
<p>An instance of type <code dir="ltr">BLOB</code>, <code dir="ltr">CLOB</code>, or <code dir="ltr">NCLOB</code> can be either <a id="sthref404"></a><span class="bold">temporary</span> (declared in the scope of your application) or <a id="sthref405"></a><span class="bold">persistent</span> (created and stored in the database).</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB001" href="../ADLOB/adlob_intro.htm#ADLOB001"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for information about using LOBs in application development</div>
</div>
<!-- class="sect3" -->
<a id="BABDBGJA"></a>
<div id="ADFNS99866" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">7.5.3.2</span> LONG and LONG RAW Data Types</h4>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle supports the <a id="sthref406"></a><code dir="ltr">LONG</code> and <code dir="ltr">LONG</code> <code dir="ltr">RAW</code> data types for <a id="sthref407"></a>backward compatibility, but strongly recommends that you convert <code dir="ltr">LONG</code> columns to LOB columns and <code dir="ltr">LONG</code> <code dir="ltr">RAW</code> columns to <code dir="ltr">BLOB</code> columns.</div>
<p><code dir="ltr">LONG</code> columns store variable-length character strings containing up to 2&nbsp;gigabytes&nbsp;-&nbsp;1 bytes. For more information about the <code dir="ltr">LONG</code> data type, including its many restrictions, see <a class="olink SQLRF00201" href="../SQLRF/sql_elements001.htm#SQLRF00201"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<p>The <code dir="ltr">LONG</code> <code dir="ltr">RAW</code> (and <a id="sthref408"></a><code dir="ltr">RAW</code>) data types store data that is not to be explicitly converted by Oracle Database when moving data between different systems. These data types are intended for binary data or byte strings. For more information about the <code dir="ltr">RAW</code> and <code dir="ltr">LONG</code> <code dir="ltr">RAW</code> data types, see <a class="olink SQLRF50993" href="../SQLRF/sql_elements001.htm#SQLRF50993"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABFAAGA"></a>
<div id="ADFNS209" class="sect2">
<h3 class="sect2"><span class="secnum">7.5.4</span> Representing Searchable Text</h3>
<p><a id="sthref409"></a><a id="sthref410"></a>Rather than writing low-level code to do full-text searches, you can use <a id="sthref411"></a>Oracle Text. Oracle Text provides indexing, word and theme searching, and viewing capabilities for text in query applications and document classification applications. You can also use Oracle Text to search XML data.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CCAPP" href="../CCAPP/toc.htm"><span class="italic">Oracle Text Application Developer&#39;s Guide</span></a> for more information about Oracle Text</div>
</div>
<!-- class="sect2" -->
<a id="BABFFECA"></a>
<div id="ADFNS00309" class="sect2">
<h3 class="sect2"><span class="secnum">7.5.5</span> Representing XML Data</h3>
<p>If you have information stored as files in XML format, or want to store an ADT in XML format, then you can use the Oracle-supplied type <a id="sthref412"></a><a id="sthref413"></a><code dir="ltr">XMLType</code>, described in <a class="olink SQLRF51012" href="../SQLRF/sql_elements001.htm#SQLRF51012"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<p>With <code dir="ltr">XMLType</code> values, you can use:</p>
<ul>
<li>
<p><code dir="ltr">XMLType</code> member functions (see <a class="olink ADXDB0400" href="../ADXDB/xdb04cre.htm#ADXDB0400"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a>).</p>
</li>
<li>
<p>SQL XML functions (see <a class="olink SQLRF51185" href="../SQLRF/functions002.htm#SQLRF51185"><span class="italic">Oracle Database SQL Language Reference</span></a>)</p>
</li>
<li>
<p>PL/SQL <code dir="ltr">DBMS_XML</code> packages (see <a class="olink ARPLS" href="../ARPLS/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>)</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADXDB" href="../ADXDB/toc.htm"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a> for information about Oracle XML DB and how you can use it to store, generate, manipulate, manage, and query XML data in the database</p>
</li>
<li>
<p><a class="olink ADXDK" href="../ADXDK/toc.htm"><span class="italic">Oracle XML Developer&#39;s Kit Programmer&#39;s Guide</span></a> for information about client-side programming with XML</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="BABBIIFB"></a>
<div id="ADFNS210" class="sect2">
<h3 class="sect2"><span class="secnum">7.5.6</span> Representing Dynamically Typed Data</h3>
<p><a id="sthref414"></a><a id="sthref415"></a><a id="sthref416"></a>Some languages allow data types to change at runtime, and some let a program check the type of a variable. For example, C has the <code dir="ltr">union</code> keyword and the <code dir="ltr">void&nbsp;*</code> pointer, and Java has the <code dir="ltr">typeof</code> operator and wrapper types such as <code dir="ltr">Number</code>.</p>
<p>In Oracle Database, you can create variables and columns that can hold data of any type and test their values to determine their underlying representation. For example, a single table column can have a numeric value in one row, a string value in another row, and an object in another row.</p>
<p>You can use the Oracle-supplied ADT <code dir="ltr">SYS</code>.<a id="sthref417"></a><code dir="ltr">ANYDATA</code> to represent values of any scalar type or ADT. <code dir="ltr">SYS</code>.<code dir="ltr">ANYDATA</code> has methods that accept scalar values of any type, and turn them back into scalars or objects. Similarly, you can use the Oracle-supplied ADT <code dir="ltr">SYS</code>.<a id="sthref418"></a><code dir="ltr">ANYDATASET</code> to represent values of any collection type. For more information about these ADTs, see <a class="olink ADOBJ010" href="../ADOBJ/adobjadv.htm#ADOBJ010"><span class="italic">Oracle Database Object-Relational Developer&#39;s Guide</span></a>.</p>
<p>To check and manipulate type information, use the <code dir="ltr">DBMS_TYPES</code> package (described in <a class="olink ARPLS076" href="../ARPLS/d_types.htm#ARPLS076"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>), as in <a href="#BABIFGBF">Example 7-5</a>.</p>
<p>With OCI, use the <a id="sthref419"></a><code dir="ltr">OCIAnyData</code> and <code dir="ltr">OCIAnyDataSet</code> interfaces, described in <a class="olink LNOCI16877" href="../LNOCI/oci12oty.htm#LNOCI16877"><span class="italic">Oracle Call Interface Programmer&#39;s Guide</span></a>.</p>
<div id="ADFNS211" class="example">
<p class="titleinexample"><a id="BABIFGBF"></a>Example 7-5 Accessing Information in a SYS.ANYDATA Column</p>
<pre dir="ltr">CREATE OR REPLACE TYPE employee_type AS
  OBJECT (empno NUMBER, ename VARCHAR2(10));
/
 
DROP TABLE mytab;
CREATE TABLE mytab (id NUMBER, data <span class="bold">SYS.ANYDATA</span>);
 
INSERT INTO mytab (id, data)
VALUES (1, <span class="bold">SYS.ANYDATA.ConvertNumber(5)</span>);
 
INSERT INTO mytab (id, data)
VALUES (2, <span class="bold">SYS.ANYDATA.ConvertObject(Employee_type(5555, &#39;john&#39;)</span>));
 
CREATE OR REPLACE PROCEDURE p IS
  CURSOR cur IS SELECT id, data FROM mytab;
  v_id                        mytab.id%TYPE;
  v_data                      mytab.data%TYPE;
  v_type                      <span class="bold">SYS.ANYTYPE</span>;
  v_typecode                  PLS_INTEGER;
  v_typename                  VARCHAR2(60);
  v_dummy                     PLS_INTEGER;
  v_n                         NUMBER;
  v_employee                  employee_type;
  non_null_anytype_for_NUMBER exception;
  unknown_typename            exception;
BEGIN
  FOR x IN cur LOOP
    FETCH cur INTO v_id, v_data;
    EXIT WHEN cur%NOTFOUND;
 
    /* typecode signifies type represented by v_data.
       GetType also produces a value of type SYS.ANYTYPE with methods you
       can call to find precision and scale of a number, length of a
       string, and so on. */
 
       v_typecode := v_data.GetType (v_type /* OUT */);
 
    /* Compare typecode to DBMS_TYPES constants to determine type of data
       and decide how to display it. */
  
    CASE v_typecode
      WHEN <span class="bold">DBMS_TYPES.TYPECODE_NUMBER</span> THEN
        IF v_type IS NOT NULL THEN  -- This condition should never happen.
          RAISE non_null_anytype_for_NUMBER;
        END IF;
 
      -- For each type, there is a Get method.
      v_dummy := v_data.GetNUMBER (v_n /* OUT */);
      DBMS_OUTPUT.PUT_LINE
        (TO_CHAR(v_id) || &#39;: NUMBER = &#39; || TO_CHAR(v_n) );
 
       WHEN <span class="bold">DBMS_TYPES.TYPECODE_OBJECT</span> THEN
         v_typename := v_data.GetTypeName();
         IF v_typename NOT IN (&#39;HR.EMPLOYEE_TYPE&#39;) THEN
           RAISE unknown_typename;
         END IF;
         v_dummy := v_data.GetObject (v_employee /* OUT */);
         DBMS_OUTPUT.PUT_LINE
           (TO_CHAR(v_id) || &#39;: user-defined type = &#39; || v_typename ||
            &#39; ( &#39; || v_employee.empno || &#39;, &#39; || v_employee.ename || &#39; )&#39; );
    END CASE;
  END LOOP;
EXCEPTION
  WHEN non_null_anytype_for_NUMBER THEN
    RAISE_Application_Error (-20000,
      &#39;Paradox: the return AnyType instance FROM GetType &#39; ||
      &#39;should be NULL for all but user-defined types&#39;);
  WHEN unknown_typename THEN
    RAISE_Application_Error( -20000, &#39;Unknown user-defined type &#39; ||
      v_typename || &#39; - program written to handle only HR.EMPLOYEE_TYPE&#39;);
END;
/
 
SELECT t.data.gettypename() AS &#34;Type Name&#34; FROM mytab t;
 
</pre>
<p>Result:</p>
<pre dir="ltr">Type Name
--------------------------------------------------------------------------------
SYS.NUMBER
HR.EMPLOYEE_TYPE
 
2 rows selected.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="BABCHDCD"></a>
<div id="ADFNS212" class="sect2">
<h3 class="sect2"><span class="secnum">7.5.7</span> Representing ANSI, DB2, and SQL/DS Data</h3>
<p>SQL statements that create tables and clusters can use <a id="sthref420"></a><a id="sthref421"></a>ANSI data types and data types from the IBM products <a id="sthref422"></a><a id="sthref423"></a>SQL/DS and <a id="sthref424"></a><a id="sthref425"></a>DB2 (except those noted after this paragraph). Oracle Database <a id="sthref426"></a>converts the ANSI or IBM data type to the equivalent Oracle data type, records the Oracle data type as the name of the column data type, and stores the column data in the Oracle data type. For conversion details, see <a class="olink SQLRF00213" href="../SQLRF/sql_elements001.htm#SQLRF00213"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
SQL statements cannot use the SQL/DS and DB2 data types <code dir="ltr">TIME</code>, <code dir="ltr">GRAPHIC</code>, <code dir="ltr">VARGRAPHIC</code>, and <code dir="ltr">LONG</code> <code dir="ltr">VARGRAPHIC</code>, because they have no equivalent Oracle data types.</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABIIHAA"></a>
<div id="ADFNS00306" class="sect1">
<h2 class="sect1"><span class="secnum">7.6</span> Identifying Rows by Address</h2>
<p><a id="sthref427"></a><a id="sthref428"></a>The fastest way to access the row of a database table is by its address, or <a id="sthref429"></a><span class="bold">rowid</span>, which uniquely identifies it. Different rows in the same data block can have the same rowid only if they are in different clustered tables. If a row is larger than one data block, then its rowid identifies its initial row piece.</p>
<p>To see rowids, query the <a id="sthref430"></a><code dir="ltr">ROWID</code> pseudocolumn. Each value in the <code dir="ltr">ROWID</code> pseudocolumn is a string that represents the address of a row. The data type of the string is either <a id="sthref431"></a><code dir="ltr">ROWID</code> or <a id="sthref432"></a><code dir="ltr">UROWID</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink CNCPT88813" href="../CNCPT/tablecls.htm#CNCPT88813"><span class="italic">Oracle Database Concepts</span></a> for an overview of the <code dir="ltr">ROWID</code> pseudocolumn</p>
</li>
<li>
<p><a class="olink CNCPT88811" href="../CNCPT/tablecls.htm#CNCPT88811"><span class="italic">Oracle Database Concepts</span></a> for an overview of rowid data types</p>
</li>
<li>
<p><a class="olink SQLRF00254" href="../SQLRF/pseudocolumns008.htm#SQLRF00254"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about the <code dir="ltr">ROWID</code> pseudocolumn</p>
</li>
<li>
<p><a class="olink SQLRF50999" href="../SQLRF/sql_elements001.htm#SQLRF50999"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about the <code dir="ltr">ROWID</code> data type</p>
</li>
<li>
<p><a class="olink SQLRF51000" href="../SQLRF/sql_elements001.htm#SQLRF51000"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about the <code dir="ltr">UROWID</code> data type</p>
</li>
<li>
<p><a class="olink LNOCI16203" href="../LNOCI/oci02bas.htm#LNOCI16203"><span class="italic">Oracle Call Interface Programmer&#39;s Guide</span></a> for information about using the <code dir="ltr">ROWID</code> data type in C</p>
</li>
<li>
<p><a class="olink LNPCC3172" href="../LNPCC/pc_04dat.htm#LNPCC3172"><span class="italic">Pro*C/C++ Programmer&#39;s Guide</span></a> for information about using the <code dir="ltr">ROWID</code> data type with the Pro*C/C++ precompiler</p>
</li>
<li>
<p><a class="olink JJDBC28149" href="../JJDBC/oraint.htm#JJDBC28149"><span class="italic">Oracle Database JDBC Developer&#39;s Guide</span></a> for information about using the <code dir="ltr">ROWID</code> data type in Java</p>
</li>
</ul>
</div>
<div class="infobox-note">
<p class="notep1">Note:</p>
When you update a row in a table compressed with Hybrid Columnar Compression (HCC), the <code dir="ltr">ROWID</code> of the row changes. HCC, a feature of certain Oracle storage systems, is described in <a class="olink CNCPT89198" href="../CNCPT/tablecls.htm#CNCPT89198"><span class="italic">Oracle Database Concepts</span></a>.</div>
<p><a href="#BABHBJEG">Example 7-6</a> creates a table with a column of the data type <code dir="ltr">ROWID</code>, populates it with rowids by querying the <code dir="ltr">ROWID</code> pseudocolumn inside an <code dir="ltr">INSERT</code> statement, and then displays it. The rowids of the table rows show how they are stored.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Merely creating a column of the type <code dir="ltr">ROWID</code> (like <code dir="ltr">col1</code> in <a href="#BABHBJEG">Example 7-6</a>) does not guarantee that its values will be valid rowids.</div>
<div id="ADFNS216" class="example">
<p class="titleinexample"><a id="BABHBJEG"></a>Example 7-6 Querying the ROWID Pseudocolumn</p>
<pre dir="ltr">DROP TABLE t_tab;  -- in case it exists
CREATE TABLE t_tab (col1 <span class="bold">ROWID</span>);
 
INSERT INTO t_tab (col1)
<span class="bold">SELECT ROWID</span>
FROM employees
WHERE employee_id &gt; 199;
 
</pre>
<p>Query:</p>
<pre dir="ltr">SELECT employee_id, <span class="bold">rowid</span>
FROM employees
WHERE employee_id &gt; 199;
 
</pre>
<p><code dir="ltr">ROWID</code> varies, but result is similar to:</p>
<pre dir="ltr">EMPLOYEE_ID <span class="bold">ROWID</span>
----------- ------------------
        200 AAAPeSAAFAAAABTAAC
        201 AAAPeSAAFAAAABTAAD
        202 AAAPeSAAFAAAABTAAE
        203 AAAPeSAAFAAAABTAAF
        204 AAAPeSAAFAAAABTAAG
        205 AAAPeSAAFAAAABTAAH
        206 AAAPeSAAFAAAABTAAI
 
7 rows selected.
 
</pre>
<p>Query:</p>
<pre dir="ltr">SELECT * FROM t_tab;
 
</pre>
<p><code dir="ltr">COL1</code> varies, but result is similar to:</p>
<pre dir="ltr">COL1
------------------
AAAPeSAAFAAAABTAAC
AAAPeSAAFAAAABTAAD
AAAPeSAAFAAAABTAAE
AAAPeSAAFAAAABTAAF
AAAPeSAAFAAAABTAAG
AAAPeSAAFAAAABTAAH
AAAPeSAAFAAAABTAAI
 
7 rows selected.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="CIHEHJIB"></a>
<div id="ADFNS00308" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">7.7</span> Displaying Metadata for SQL Operators and Functions</h2>
<p>The dynamic performance view <code dir="ltr">V$SQLFN_METADATA</code> displays <a id="sthref433"></a><a id="sthref434"></a>metadata about SQL operators and <a id="sthref435"></a>functions. For every function that <code dir="ltr">V$SQLFN_METADATA</code> displays, the dynamic performance view <code dir="ltr">V$SQLFN_ARG_METADATA</code> has one row of metadata about each function argument. If a function argument can be repeated (as in the functions <code dir="ltr">LEAST</code> and <code dir="ltr">GREATEST</code>), then <code dir="ltr">V$SQLFN_ARG_METADATA</code> has only one row for each repeating argument. You can join the views <code dir="ltr">V$SQLFN_METADATA</code> and <code dir="ltr">V$SQLFN_ARG_METADATA</code> on the column <code dir="ltr">FUNC_ID</code>.</p>
<p>These views let third-party tools leverage SQL functions without maintaining their metadata in the application layer.</p>
<p class="subhead2"><a id="ADFNS225"></a>Topics:</p>
<ul>
<li>
<p><a href="#BABGJIJG">ARGn Data Type</a></p>
</li>
<li>
<p><a href="#BABEEGDC">DISP_TYPE Data Type</a></p>
</li>
<li>
<p><a href="#BABHDFDI">SQL Data Type Families</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink REFRN30501" href="../REFRN/GUID-D1A7E52B-D7EF-493C-B7EA-EA7EA9D60DE2.htm#REFRN30501"><span class="italic">Oracle Database Reference</span></a> for more information about <code dir="ltr">V$SQLFN_METADATA</code></p>
</li>
<li>
<p><a class="olink REFRN30500" href="../REFRN/GUID-BE910440-7920-40B0-B796-269AB05C62C7.htm#REFRN30500"><span class="italic">Oracle Database Reference</span></a> for more information about <code dir="ltr">V$SQLFN_ARG_METADATA</code></p>
</li>
</ul>
</div>
<a id="BABGJIJG"></a>
<div id="ADFNS99865" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">7.7.1</span> ARGn Data Type</h3>
<p><a id="sthref436"></a>In the view <code dir="ltr">V$SQLFN_METADATA</code>, the column <code dir="ltr">DATATYPE</code> is the data type of the function (that is, the data type that the function returns). This data type can be an Oracle data type, data type family (see <a href="#BABHDFDI">Section 7.7.3</a>), or <code dir="ltr">ARG</code><code dir="ltr"><span class="codeinlineitalic">n</span></code>. <code dir="ltr">ARG</code><code dir="ltr"><span class="codeinlineitalic">n</span></code> is the data type of the <span class="italic">n</span>th argument of the function. For example:</p>
<ul>
<li>
<p>The <code dir="ltr">MAX</code> function (described in <a class="olink SQLRF00666" href="../SQLRF/functions110.htm#SQLRF00666"><span class="italic">Oracle Database SQL Language Reference</span></a>) returns a value that has the data type of its first argument, so the <code dir="ltr">MAX</code> function has return data type <code dir="ltr">ARG1</code>.</p>
</li>
<li>
<p>The <code dir="ltr">DECODE</code> function (described in <a class="olink SQLRF00631" href="../SQLRF/functions057.htm#SQLRF00631"><span class="italic">Oracle Database SQL Language Reference</span></a>) returns a value that has the data type of its third argument, so the <code dir="ltr">DECODE</code> function has data type <code dir="ltr">ARG3</code>.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABEEGDC"></a>
<div id="ADFNS99864" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">7.7.2</span> DISP_TYPE Data Type</h3>
<p><a id="sthref437"></a>In the view <code dir="ltr">V$SQLFN_METADATA</code>, the column <code dir="ltr">DISP_TYPE</code> is the data type of an argument that can be any expression. An expression is either a single value or a combination of values and SQL functions that has a single value.</p>
<div id="ADFNS227" class="tblformal">
<p class="titleintable"><a id="sthref438"></a><a id="g1771782"></a>Table 7-10 <a id="sthref439"></a>Display Types of SQL Functions</p>
<table class="cellalignment293" title="Display Types of SQL Functions" summary="This table summarizes the display types of SQL built-in functions." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t39">Display Type</th>
<th class="cellalignment294" id="r1c2-t39">Description</th>
<th class="cellalignment294" id="r1c3-t39">Example</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t39" headers="r1c1-t39">
<p><code dir="ltr">NORMAL</code></p>
</td>
<td class="cellalignment295" headers="r2c1-t39 r1c2-t39">
<p><code dir="ltr">FUNC(A,B,...)</code></p>
</td>
<td class="cellalignment295" headers="r2c1-t39 r1c3-t39">
<p><code dir="ltr">LEAST(A,B,C)</code></p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t39" headers="r1c1-t39">
<p><code dir="ltr">ARITHMETIC</code></p>
</td>
<td class="cellalignment295" headers="r3c1-t39 r1c2-t39">
<p><code dir="ltr">A FUNC B)</code></p>
</td>
<td class="cellalignment295" headers="r3c1-t39 r1c3-t39">
<p><code dir="ltr">A+B</code></p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t39" headers="r1c1-t39">
<p><code dir="ltr">PARENTHESIS</code></p>
</td>
<td class="cellalignment295" headers="r4c1-t39 r1c2-t39">
<p><code dir="ltr">FUNC()</code></p>
</td>
<td class="cellalignment295" headers="r4c1-t39 r1c3-t39">
<p><code dir="ltr">SYS_GUID()</code></p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t39" headers="r1c1-t39">
<p><code dir="ltr">RELOP</code></p>
</td>
<td class="cellalignment295" headers="r5c1-t39 r1c2-t39">
<p><code dir="ltr">A FUNC B</code></p>
</td>
<td class="cellalignment295" headers="r5c1-t39 r1c3-t39">
<p><code dir="ltr">A IN B</code></p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r6c1-t39" headers="r1c1-t39">
<p><code dir="ltr">CASE_LIKE</code></p>
</td>
<td class="cellalignment295" headers="r6c1-t39 r1c2-t39">
<p><code dir="ltr">CASE</code> statement or <code dir="ltr">DECODE</code> decode</p>
</td>
<td class="cellalignment295" headers="r6c1-t39 r1c3-t39">&nbsp;</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r7c1-t39" headers="r1c1-t39">
<p><code dir="ltr">NOPAREN</code></p>
</td>
<td class="cellalignment295" headers="r7c1-t39 r1c2-t39">
<p><code dir="ltr">FUNC</code></p>
</td>
<td class="cellalignment295" headers="r7c1-t39 r1c3-t39">
<p><code dir="ltr">SYSDATE</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<a id="BABHDFDI"></a>
<div id="ADFNS99863" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">7.7.3</span> SQL Data Type Families</h3>
<p>Often, a SQL function argument can have any data type in a <a id="sthref440"></a><a id="sthref441"></a>data type family. <a href="#g1765492">Table 7-11</a> shows the SQL data type families and their member data types.</p>
<div id="ADFNS224" class="tblformal">
<p class="titleintable"><a id="sthref442"></a><a id="g1765492"></a>Table 7-11 SQL Data Type Families</p>
<table class="cellalignment293" title="SQL Data Type Families" summary="This table summarizes the datatype families." dir="ltr">
<thead>
<tr class="cellalignment287">
<th class="cellalignment294" id="r1c1-t40">Family</th>
<th class="cellalignment294" id="r1c2-t40">Data Types</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment287">
<td class="cellalignment295" id="r2c1-t40" headers="r1c1-t40">
<p><code dir="ltr">STRING</code></p>
</td>
<td class="cellalignment295" headers="r2c1-t40 r1c2-t40">
<p><code dir="ltr">CHARACTER</code></p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r3c1-t40" headers="r1c1-t40">&nbsp;</td>
<td class="cellalignment295" headers="r3c1-t40 r1c2-t40">
<p><code dir="ltr">VARCHAR2</code></p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r4c1-t40" headers="r1c1-t40">&nbsp;</td>
<td class="cellalignment295" headers="r4c1-t40 r1c2-t40">
<p><code dir="ltr">CLOB</code></p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r5c1-t40" headers="r1c1-t40">&nbsp;</td>
<td class="cellalignment295" headers="r5c1-t40 r1c2-t40">
<p><code dir="ltr">NCHAR</code></p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r6c1-t40" headers="r1c1-t40">&nbsp;</td>
<td class="cellalignment295" headers="r6c1-t40 r1c2-t40">
<p><code dir="ltr">NVARCHAR2</code></p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r7c1-t40" headers="r1c1-t40">&nbsp;</td>
<td class="cellalignment295" headers="r7c1-t40 r1c2-t40">
<p><code dir="ltr">NCLOB</code></p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r8c1-t40" headers="r1c1-t40">&nbsp;</td>
<td class="cellalignment295" headers="r8c1-t40 r1c2-t40">
<p><code dir="ltr">LONG</code></p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r9c1-t40" headers="r1c1-t40">
<p><code dir="ltr">NUMERIC</code></p>
</td>
<td class="cellalignment295" headers="r9c1-t40 r1c2-t40">
<p><code dir="ltr">NUMBER</code></p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r10c1-t40" headers="r1c1-t40">&nbsp;</td>
<td class="cellalignment295" headers="r10c1-t40 r1c2-t40">
<p><code dir="ltr">BINARY_FLOAT</code></p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r11c1-t40" headers="r1c1-t40">&nbsp;</td>
<td class="cellalignment295" headers="r11c1-t40 r1c2-t40">
<p><code dir="ltr">BINARY_DOUBLE</code></p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r12c1-t40" headers="r1c1-t40">
<p><code dir="ltr">DATETYPE</code></p>
</td>
<td class="cellalignment295" headers="r12c1-t40 r1c2-t40">
<p><code dir="ltr">DATE</code></p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r13c1-t40" headers="r1c1-t40">&nbsp;</td>
<td class="cellalignment295" headers="r13c1-t40 r1c2-t40">
<p><code dir="ltr">TIMESTAMP</code></p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r14c1-t40" headers="r1c1-t40">&nbsp;</td>
<td class="cellalignment295" headers="r14c1-t40 r1c2-t40">
<p><code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code></p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r15c1-t40" headers="r1c1-t40">&nbsp;</td>
<td class="cellalignment295" headers="r15c1-t40 r1c2-t40">
<p><code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">LOCAL</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code></p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r16c1-t40" headers="r1c1-t40">&nbsp;</td>
<td class="cellalignment295" headers="r16c1-t40 r1c2-t40">
<p><code dir="ltr">INTERVAL</code> <code dir="ltr">YEAR</code> <code dir="ltr">TO</code> <code dir="ltr">MONTH</code></p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r17c1-t40" headers="r1c1-t40">&nbsp;</td>
<td class="cellalignment295" headers="r17c1-t40 r1c2-t40">
<p><code dir="ltr">INTERVAL</code> <code dir="ltr">DAY</code> <code dir="ltr">TO</code> <code dir="ltr">SECOND</code></p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r18c1-t40" headers="r1c1-t40">
<p><code dir="ltr">BINARY</code></p>
</td>
<td class="cellalignment295" headers="r18c1-t40 r1c2-t40">
<p><code dir="ltr">BLOB</code></p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r19c1-t40" headers="r1c1-t40">&nbsp;</td>
<td class="cellalignment295" headers="r19c1-t40 r1c2-t40">
<p><code dir="ltr">RAW</code></p>
</td>
</tr>
<tr class="cellalignment287">
<td class="cellalignment295" id="r20c1-t40" headers="r1c1-t40">&nbsp;</td>
<td class="cellalignment295" headers="r20c1-t40 r1c2-t40">
<p><code dir="ltr">LONGRAW</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment286">
<tr>
<td class="cellalignment295">
<table class="cellalignment291">
<tr>
<td class="cellalignment290"><a href="adfns_sqlproc.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment290"><a href="adfns_regexp.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment298">
<table class="cellalignment289">
<tr>
<td class="cellalignment290"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment290"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment290"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment290"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment290"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment290"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>


</body></html>