<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-5125"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Real%20Application%20Security%20HR%20Demo%20Files"></a><title>Real Application Security HR Demo Files</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="dcterms.created" content="2017-02-17T18:31:46Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Real Application Security Administrator&#39;s and Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E48189-13"/>
<meta name="dcterms.isVersionOf" content="DBFSG"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2012, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="oci_jdbc.htm" title="Previous" type="text/html"/>
<link rel="Next" href="troubleshooting.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E48189-13.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-9289D66D-6426-4CE5-9E5E-941A360B0E9C"></a> <span id="PAGE" style="display:none;">22/25</span> <!-- End Header -->
<a id="DBFSG819"></a>
<h1 id="DBFSG-GUID-9289D66D-6426-4CE5-9E5E-941A360B0E9C" class="sect1"><span class="enumeration_appendix">C</span> Real Application Security HR Demo Files</h1>
<div>
<p>This appendix contains both the source files and log files. A detailed description of the HR Demo can be found in <a href="security_hr_demo_tutorial.htm#GUID-F38C8CA7-05B0-4939-AF59-741D8EF7FB87" title="Describes how to use RASADM to create Real Application Security data security policies using a graphical user interface.Describes how to run the RASADM application.In the design phase, you identify all the tasks an application performs that require application privileges to control data access.To develop data security policies using RASADM, you must follow some basic steps.Describes how to use RASADM to create the HR Demo application.Describes how to create application roles and specifically the database DB_EMP role.Describes using the directory server created roles to create application roles.Describes how to create application roles using RASADM.Describes creating application users and granting them roles.Describes creating application users using RASADM.Describes creating application users using the directory server.Describes the process flow for creating the data security policy.Describes entering data security policy information using the RASADM application.Describes creating the column authorization part of the data security policy.Describes the creating the data realm authorizations part of the data security policy.Describes applying the data security policy.">Real Application Security HR Demo</a>.</p>
<div class="p">This appendix describes the following topics:
<ul style="list-style-type: disc;">
<li>
<p><a href="security_hr_demo_files.htm#GUID-8DB26655-69C4-41C0-8C55-66415125BDB0">How to Run the Security HR Demo</a></p>
</li>
<li>
<p><a href="security_hr_demo_files.htm#GUID-5953585D-D2F7-47E5-B27E-A81DCEC2CA52">Scripts for the Security HR Demo</a></p>
</li>
<li>
<p><a href="security_hr_demo_files.htm#GUID-95FB6E3E-1119-47A6-9E82-C17AC5CC6850">Generated Log Files for Each Script</a></p>
</li>
</ul>
</div>
</div>
<a id="DBFSG820"></a>
<div class="props_rev_3"><a id="GUID-8DB26655-69C4-41C0-8C55-66415125BDB0"></a>
<h2 id="DBFSG-GUID-8DB26655-69C4-41C0-8C55-66415125BDB0" class="sect2">How to Run the Security HR Demo</h2>
<div>
<div class="section">
<p>To run the Security HR demo, run the following scripts in the order shown:</p>
</div>
<!-- class="section" -->
<ol>
<li><span>Run the setup script <code class="codeph">hrdemo_setup.sql</code>, which creates the log file: <code class="codeph">hrdemo_setup.log</code>.</span></li>
<li><span>Run the demo script <code class="codeph">hrdemo_run.sql</code> with direct logon, which creates the log file: <code class="codeph">hrdemo_run.log</code>.</span></li>
<li><span>Run the demo script to explicitly create and attach to the Real Application Security session <code class="codeph">hrdemo_run_sess.sql</code>, which creates the log file: <code class="codeph">hrdemo_run_sess.log</code>.</span></li>
<li><span>Run the Java demo <code class="codeph">HRDemo.java</code> file, which creates the log file: <code class="codeph">HRDemo.log</code>.</span></li>
<li><span>Run the clean up script <code class="codeph">hrdemo_clean.sql</code>, which creates the log file: <code class="codeph">hrdemo_clean.log</code>.</span></li>
</ol>
</div>
</div>
<a id="DBFSG822"></a><a id="DBFSG821"></a>
<div class="props_rev_3"><a id="GUID-5953585D-D2F7-47E5-B27E-A81DCEC2CA52"></a>
<h2 id="DBFSG-GUID-5953585D-D2F7-47E5-B27E-A81DCEC2CA52" class="sect2">Scripts for the Security HR Demo</h2>
<div>
<div class="section">
<p><a href="security_hr_demo_files.htm#GUID-5953585D-D2F7-47E5-B27E-A81DCEC2CA52__CEGGEEAB" title="This table lists the source files and the generated log files for the HR demo scripts.">Table C-1</a> lists the scripts and generated log files with links to the content of each file.</p>
</div>
<!-- class="section" -->
<div class="tblformal" id="GUID-5953585D-D2F7-47E5-B27E-A81DCEC2CA52__CEGGEEAB">
<p class="titleintable">Table C-1 HR Demo Scripts and Log Files</p>
<table class="cellalignment5205" title=" HR Demo Scripts and Log Files" summary="This table lists the source files and the generated log files for the HR demo scripts.">
<thead>
<tr class="cellalignment5199">
<th class="cellalignment5279" id="d119619e398">Scripts</th>
<th class="cellalignment5280" id="d119619e401">Log Files</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5199">
<td class="cellalignment5281" id="d119619e406" headers="d119619e398">
<p><a href="security_hr_demo_files.htm#GUID-E7974492-8418-4DAD-8497-530F3A669064">hrdemo_setup.sql</a></p>
</td>
<td class="cellalignment5282" headers="d119619e406 d119619e401">
<p><a href="security_hr_demo_files.htm#GUID-2EFC5D83-9586-4B06-93B7-190197A8821A">hrdemo_setup.log</a></p>
</td>
</tr>
<tr class="cellalignment5199">
<td class="cellalignment5281" id="d119619e415" headers="d119619e398">
<p><a href="security_hr_demo_files.htm#GUID-37A422AF-7AAB-4CC0-9E49-0D4BD2ED5F0F">hrdemo_run.sql</a></p>
</td>
<td class="cellalignment5282" headers="d119619e415 d119619e401">
<p><a href="security_hr_demo_files.htm#GUID-65F8FD60-F26D-4E63-97CB-DC310B64C078">hrdemo_run.log</a></p>
</td>
</tr>
<tr class="cellalignment5199">
<td class="cellalignment5281" id="d119619e424" headers="d119619e398">
<p><a href="security_hr_demo_files.htm#GUID-933185DA-9B2F-4530-9B3A-91A034818B0A">hrdemo_run_sess.sql</a></p>
</td>
<td class="cellalignment5282" headers="d119619e424 d119619e401">
<p><a href="security_hr_demo_files.htm#GUID-9D131D01-1A54-4771-AD08-1FD36415E2AD">hrdemo_run_sess.log</a></p>
</td>
</tr>
<tr class="cellalignment5199">
<td class="cellalignment5281" id="d119619e433" headers="d119619e398">
<p><a href="security_hr_demo_files.htm#GUID-C19275DF-6D8C-4D3B-8B8F-A83766CB5F61">HRDemo.java</a></p>
</td>
<td class="cellalignment5282" headers="d119619e433 d119619e401">
<p><a href="security_hr_demo_files.htm#GUID-E041C7EE-68C9-4495-BC1F-F87A3B567A98">HRDemo.log</a></p>
</td>
</tr>
<tr class="cellalignment5199">
<td class="cellalignment5281" id="d119619e442" headers="d119619e398">
<p><a href="security_hr_demo_files.htm#GUID-4BAA592E-CD45-4789-A371-96A3BC3668D0">hrdemo_clean.sql</a></p>
</td>
<td class="cellalignment5282" headers="d119619e442 d119619e401">
<p><a href="security_hr_demo_files.htm#GUID-027FBD01-2EFE-47C8-A84F-5E52B5469382">hrdemo_clean.log</a></p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<a id="DBFSG823"></a>
<div class="props_rev_3"><a id="GUID-E7974492-8418-4DAD-8497-530F3A669064"></a>
<h3 id="DBFSG-GUID-E7974492-8418-4DAD-8497-530F3A669064" class="sect3">hrdemo_setup.sql</h3>
<div>
<div class="section">
<p>The source file for the set up script <code class="codeph">hrdemo_setup.sql</code>.</p>
<pre dir="ltr">SET ECHO OFF
SET FEEDBACK 1
SET NUMWIDTH 10
SET LINESIZE 80
SET TRIMSPOOL ON
SET TAB OFF
SET PAGESIZE 100
SET ECHO ON
 
-- Create a database user as RAS administrator
connect sys/<span class="italic">password</span> as sysdba
grant dba, xs_session_admin to rasadm identified by rasadm;
 
pause;
 
----------------------------------------------------------------------
--  Introduction
----------------------------------------------------------------------
-- The HR Demo shows how to use basic Real Application Security features.
-- The demo secures HR.EMPLOYEES table by creating a data security 
-- policy that grants the table access to:
-- 1) DAUSTIN, an application user in IT department. He has role EMP_ROLE
--             and IT_ROLE. He can view employee records in IT department,
--             but he cannot view the salary column except for his own. 
-- 2) SMAVRIS, an application user in HR department. She has role EMP_ROLE
--             and HR_ROLE. She can view and update all the employee records.
 
----------------------------------------------------------------------
-- 1. SETUP - User and Roles
----------------------------------------------------------------------
 
-- Connect as RAS administrator
connect rasadm/rasadm;
 
-- Create database role DB_EMP and grant necessary table privileges.
-- This role will be used to grant the required object privileges to
-- application users.
create role db_emp;
grant select, insert, update, delete on hr.employees to db_emp; 
pause;
 
-- Create an application role EMP_ROLE for common employees.
exec sys.xs_principal.create_role(name =&gt; &#39;emp_role&#39;, enabled =&gt; true);
 
-- Create an application role IT_ROLE for IT department.
exec sys.xs_principal.create_role(name =&gt; &#39;it_role&#39;, enabled =&gt; true);
 
-- Create an application role HR_ROLE for HR department.
exec sys.xs_principal.create_role(name =&gt; &#39;hr_role&#39;, enabled =&gt; true);
 
-- Grant DB_EMP to the three application roles, so they have the required 
-- object privilege to access the table. 
grant db_emp to emp_role;
grant db_emp to it_role;
grant db_emp to hr_role;
 
-- Create two application users:
-- DAUSTIN (in IT department), granted EMP_ROLE and IT_ROLE.
exec  sys.xs_principal.create_user(name =&gt; &#39;daustin&#39;, schema =&gt; &#39;hr&#39;);
exec  sys.xs_principal.set_password(&#39;daustin&#39;, &#39;welcome1&#39;);
exec  sys.xs_principal.grant_roles(&#39;daustin&#39;, &#39;emp_role&#39;);
exec  sys.xs_principal.grant_roles(&#39;daustin&#39;, &#39;it_role&#39;);
 
-- SMAVRIS (in HR department), granted EMP_ROLE and HR_ROLE.
exec  sys.xs_principal.create_user(name =&gt; &#39;smavris&#39;, schema =&gt; &#39;hr&#39;);
exec  sys.xs_principal.set_password(&#39;smavris&#39;, &#39;welcome1&#39;);
exec  sys.xs_principal.grant_roles(&#39;smavris&#39;, &#39;emp_role&#39;);
exec  sys.xs_principal.grant_roles(&#39;smavris&#39;, &#39;hr_role&#39;);
 
pause;
 
 
----------------------------------------------------------------------
-- 2. SETUP - Security class and ACL
----------------------------------------------------------------------
 
-- Create a security class HRPRIVS based on the predefined DML security class.
-- HRPRIVS has a new privilege VIEW_SALARY, which is used to control the 
-- access to SALARY column.
declare
begin
  sys.xs_security_class.create_security_class(
    name        =&gt; &#39;hrprivs&#39;, 
    parent_list =&gt; xs$name_list(&#39;sys.dml&#39;),
    priv_list   =&gt; xs$privilege_list(xs$privilege(&#39;view_salary&#39;)));
end;
/
 
pause;
 
-- Create three ACLs to grant privileges for the policy defined later.
declare  
  aces xs$ace_list := xs$ace_list();  
begin 
  aces.extend(1);
 
  -- EMP_ACL: This ACL grants EMP_ROLE the privileges to view an employee&#39;s
  --          own record including SALARY column.
  aces(1) := xs$ace_type(privilege_list =&gt; xs$name_list(&#39;select&#39;,&#39;view_salary&#39;),
                         principal_name =&gt; &#39;emp_role&#39;);
 
  sys.xs_acl.create_acl(name      =&gt; &#39;emp_acl&#39;,
                    ace_list  =&gt; aces,
                    sec_class =&gt; &#39;hrprivs&#39;);
  
  -- IT_ACL:  This ACL grants IT_ROLE the privilege to view the employee
  --          records in IT department, but it does not grant the VIEW_SALARY
  --          privilege that is required for access to SALARY column.
  aces(1) := xs$ace_type(privilege_list =&gt; xs$name_list(&#39;select&#39;),
                         principal_name =&gt; &#39;it_role&#39;);
 
  sys.xs_acl.create_acl(name      =&gt; &#39;it_acl&#39;,
                    ace_list  =&gt; aces,
                    sec_class =&gt; &#39;hrprivs&#39;);
 
  -- HR_ACL:  This ACL grants HR_ROLE the privileges to view and update all
  --          employees&#39; records including SALARY column.
  aces(1):= xs$ace_type(privilege_list =&gt; xs$name_list(&#39;all&#39;),
                        principal_name =&gt; &#39;hr_role&#39;);
 
  sys.xs_acl.create_acl(name      =&gt; &#39;hr_acl&#39;,
                    ace_list  =&gt; aces,
                    sec_class =&gt; &#39;hrprivs&#39;);
end;
/
 
pause;
 
----------------------------------------------------------------------
-- 3. SETUP - Data security policy
----------------------------------------------------------------------
-- Create data security policy for EMPLOYEES table. The policy defines three
-- realm constraints and a column constraint that protects SALARY column.
declare
  realms   xs$realm_constraint_list := xs$realm_constraint_list();      
  cols     xs$column_constraint_list := xs$column_constraint_list();
begin  
  realms.extend(3);
 
  -- Realm #1: Only the employee&#39;s own record. 
  --           EMP_ROLE can view the realm including SALARY column.     
  realms(1) := xs$realm_constraint_type(
    realm    =&gt; &#39;email = xs_sys_context(&#39;&#39;xs$session&#39;&#39;,&#39;&#39;username&#39;&#39;)&#39;,
    acl_list =&gt; xs$name_list(&#39;emp_acl&#39;));
 
  -- Realm #2: The records in the IT department.
  --           IT_ROLE can view the realm excluding SALARY column.
  realms(2) := xs$realm_constraint_type(
    realm    =&gt; &#39;department_id = 60&#39;,
    acl_list =&gt; xs$name_list(&#39;it_acl&#39;));
 
  -- Realm #3: All the records.
  --           HR_ROLE can view and update the realm including SALARY column.
  realms(3) := xs$realm_constraint_type(
    realm    =&gt; &#39;1 = 1&#39;,
    acl_list =&gt; xs$name_list(&#39;hr_acl&#39;));
 
  -- Column constraint protects SALARY column by requiring VIEW_SALARY 
  -- privilege.
  cols.extend(1);
  cols(1) := xs$column_constraint_type(
    column_list =&gt; xs$list(&#39;salary&#39;),
    privilege   =&gt; &#39;view_salary&#39;);
 
  sys.xs_data_security.create_policy(
    name                   =&gt; &#39;employees_ds&#39;,
    realm_constraint_list  =&gt; realms,
    column_constraint_list =&gt; cols);
end;
/
 
pause;
 
-- Apply the data security policy to the table.
begin
  sys.xs_data_security.apply_object_policy(
    policy =&gt; &#39;employees_ds&#39;, 
    schema =&gt; &#39;hr&#39;,
    object =&gt;&#39;employees&#39;);
end;
/
 
pause;
 
----------------------------------------------------------------------
-- 4. SETUP - Validate the objects we have set up.
----------------------------------------------------------------------
set serveroutput on;
begin
  if (sys.xs_diag.validate_workspace()) then
    dbms_output.put_line(&#39;All configurations are correct.&#39;);
  else
    dbms_output.put_line(&#39;Some configurations are incorrect.&#39;);
  end if;
end;
/
-- XS$VALIDATION_TABLE contains validation errors if any.
-- Expect no rows selected.
select * from xs$validation_table order by 1, 2, 3, 4;
 
pause;
 
----------------------------------------------------------------------
-- 5. SETUP - Mid-Tier related configuration.
----------------------------------------------------------------------
exec sys.xs_principal.create_user(name=&gt;&#39;dispatcher&#39;, schema=&gt;&#39;HR&#39;);
exec sys.xs_principal.set_password(&#39;dispatcher&#39;, &#39;welcome1&#39;);
 
exec sys.xs_principal.grant_roles(&#39;dispatcher&#39;, &#39;xscacheadmin&#39;);
exec sys.xs_principal.grant_roles(&#39;dispatcher&#39;, &#39;xssessionadmin&#39;);
 
exit
</pre></div>
<!-- class="section" --></div>
</div>
<a id="DBFSG824"></a>
<div class="props_rev_3"><a id="GUID-37A422AF-7AAB-4CC0-9E49-0D4BD2ED5F0F"></a>
<h3 id="DBFSG-GUID-37A422AF-7AAB-4CC0-9E49-0D4BD2ED5F0F" class="sect3">hrdemo_run.sql</h3>
<div>
<div class="section">
<p>The source file for the <code class="codeph">hrdemo_run.sql</code> script. This script runs the demo with direct logon.</p>
<pre dir="ltr">SET ECHO OFF
SET FEEDBACK 1
SET NUMWIDTH 10
SET LINESIZE 80
SET TRIMSPOOL ON
SET TAB OFF
SET PAGESIZE 100
COLUMN EMAIL FORMAT A10
COLUMN FIRST_NAME FORMAT A15
COLUMN LAST_NAME FORMAT A15
COLUMN DEPARTMENT_ID FORMAT 9999
COLUMN MANAGER_ID FORMAT 9999
COLUMN SALARY FORMAT 999999
SET ECHO ON
 
-- Connect as DAUSTIN, who has only EMP_ROLE and IT_ROLE
conn daustin/welcome1;
 
SET SECUREDCOL ON UNAUTH *******
 
-- DAUSTIN can view the records in IT department, but can only view his own
-- SALARY column.
select email, first_name, last_name, department_id, manager_id, salary 
from employees order by email;
 
 
SET SECUREDCOL OFF 
pause;
 
-- DAUSTIN cannot update the record.
update employees set manager_id = 102 where email = &#39;DAUSTIN&#39;;
 
-- Record is not changed.
select email, first_name, last_name, department_id, manager_id, salary
from employees where email = &#39;DAUSTIN&#39;;
 
pause;
 
-- Connect as SMAVRIS, who has both EMP_ROLE and HR_ROLE role. 
conn smavris/welcome1;
 
-- SMAVRIS can view all the records including SALARY column.
select email, first_name, last_name, department_id, manager_id, salary 
from employees where department_id = 60 or department_id = 40
order by department_id, email;
 
-- EMPLOYEES table has 107 rows, we expect to see all of them.
select count(*) from employees;
 
pause;
 
-- SMAVRIS can update the record.
update employees set manager_id = 102 where email = &#39;DAUSTIN&#39;;
 
-- Record is changed.
select email, first_name, last_name, department_id, manager_id, salary
from employees where email = &#39;DAUSTIN&#39;;
 
-- change the record back to the original. 
update employees set manager_id = 103 where email = &#39;DAUSTIN&#39;;
 
exit
</pre></div>
<!-- class="section" --></div>
</div>
<a id="DBFSG825"></a>
<div class="props_rev_3"><a id="GUID-933185DA-9B2F-4530-9B3A-91A034818B0A"></a>
<h3 id="DBFSG-GUID-933185DA-9B2F-4530-9B3A-91A034818B0A" class="sect3">hrdemo_run_sess.sql</h3>
<div>
<div class="section">
<p>The source file for the <code class="codeph">hrdemo_run_sess.sql</code> script. This script explicitly creates and attaches a Real Application Security session.</p>
<pre dir="ltr">SET ECHO OFF
SET FEEDBACK 1
SET NUMWIDTH 10
SET LINESIZE 80
SET TRIMSPOOL ON
SET TAB OFF
SET PAGESIZE 100
COLUMN EMAIL FORMAT A10
COLUMN FIRST_NAME FORMAT A15
COLUMN LAST_NAME FORMAT A15
COLUMN DEPARTMENT_ID FORMAT 9999
COLUMN MANAGER_ID FORMAT 9999
COLUMN SALARY FORMAT 999999
SET ECHO ON
 
-- Connect as RAS administrator
connect rasadm/rasadm;
 
-- Variable used to remember the session ID;
var gsessionid varchar2(32);
 
-- Create an application session for SMARVIS and attach to it.
declare
  sessionid raw(16);
begin
  sys.dbms_xs_sessions.create_session(&#39;SMAVRIS&#39;, sessionid);
  :gsessionid := rawtohex(sessionid);
  sys.dbms_xs_sessions.attach_session(sessionid, null);
end ;
/
 
pause;
 
-- Display the current user, it should be SMAVRIS now.
select xs_sys_context(&#39;xs$session&#39;,&#39;username&#39;) from dual;
 
-- Display the enabled application roles and database roles.
select role_name from v$xs_session_roles union
select role from session_roles order by 1;
 
pause;
 
-- SMAVRIS can view all the records including SALARY column.
select email, first_name, last_name, department_id, manager_id, salary 
from employees where department_id = 60 or department_id = 40
order by department_id, email;
 
-- EMPLOYEES table has 107 rows, we expect to see all of them.
select count(*) from employees;
 
pause;
 
-- Disable HR_ROLE.
exec sys.dbms_xs_sessions.disable_role(&#39;hr_role&#39;);
 
-- SMAVRIS should only be able to see her own record.
select email, first_name, last_name, department_id, manager_id, salary 
from employees where department_id = 60 or department_id = 40
order by department_id, email;
 
pause;
 
-- Enable HR_ROLE
exec sys.dbms_xs_sessions.enable_role(&#39;hr_role&#39;);
 
-- SMAVRIS can view all the records again.
select email, first_name, last_name, department_id, manager_id, salary 
from employees where department_id = 60 or department_id = 40
order by department_id, email;
 
-- EMPLOYEES table has 107 rows, we expect to see all of them.
select count(*) from employees;
 
pause;
 
-- Detach and destroy the application session.
declare
  sessionid raw(16);
begin
  sessionid := hextoraw(:gsessionid);
  sys.dbms_xs_sessions.detach_session;
  sys.dbms_xs_sessions.destroy_session(sessionid);
end;
/
 
exit
</pre></div>
<!-- class="section" --></div>
</div>
<a id="DBFSG826"></a>
<div class="props_rev_3"><a id="GUID-C19275DF-6D8C-4D3B-8B8F-A83766CB5F61"></a>
<h3 id="DBFSG-GUID-C19275DF-6D8C-4D3B-8B8F-A83766CB5F61" class="sect3">HRDemo.java</h3>
<div>
<div class="section">
<p>The source file for the Java demo is <code class="codeph">HRDemo.java</code>.</p>
<pre dir="ltr">import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
 
 
import java.util.ArrayList;
import java.util.List;
import oracle.jdbc.OracleDriver;
import oracle.jdbc.OracleResultSet;
import oracle.jdbc.OracleResultSet.AuthorizationIndicator;
 
import oracle.security.xs.Role;
import oracle.security.xs.Session;
import oracle.security.xs.XSAccessController;
import oracle.security.xs.XSSessionManager;
 
/**
 * HR demo java version, check data security related privilege at mid-tier
 */
public class HRDemo {
 
  static Connection mgrConnection = null;
  static Connection appConnection = null;
  static XSSessionManager mgr = null;
  static String user = null;
 
  public static void main(String[] args)  {
 
    try {
      DriverManager.registerDriver(new OracleDriver());
 
 
      if (args.length &gt;=3) {
        user = args[0];
      } else {
        System.out.println(&#34;Usage HRDemo user pwd dbURL&#34;);
        System.exit(1);
      }
 
      setupConnection(args);
 
      queryAsUser(&#34;DAUSTIN&#34;);
      queryAsUser(&#34;SMAVRIS&#34;);
      
      cleanupConnection();
 
    } catch (Exception e1) {
      e1.printStackTrace();
    }
  }
 
  private static void queryAsUser(String user) throws SQLException {
   
    System.out.println(&#34;\nQuery HR.EMPLOYEES table as user \&#34;&#34; + user + &#34;\&#34;&#34;);
 
    try {
      Session lws = mgr.createSession(appConnection, user, null,null);
      mgr.attachSession(appConnection, lws, null, null, null, null, null);
 
      queryEmployees(lws);
  
      mgr.detachSession(lws);
      mgr.destroySession(appConnection, lws);
    } catch (Exception e) {
      // do nothing since this is just a cleanup action
      e.printStackTrace();
    }
  }
 
  public static void setupConnection(String[] args) throws Exception {
    mgrConnection =
        DriverManager.getConnection(args[2], &#34;dispatcher&#34;, &#34;welcome1&#34;);
 
    mgr = XSSessionManager.getSessionManager(mgrConnection, 30, 2048000);
   
    appConnection = DriverManager.getConnection(args[2], args[0], args[1]);
  }
 
  public static void cleanupConnection() throws Exception {
    mgrConnection.close();
    appConnection.close();
 
  }
 
  public static void queryEmployees(Session lws) throws SQLException {
 
    Connection conn = lws.getConnection();
    String query =
      &#34; select email, first_name, last_name, department_id, salary, ora_get_aclids(emp) from hr.employees emp where department_id in (40, 60, 100) order by email&#34;;
 
    Statement stmt = null;
    ResultSet rs = null;
 
    System.out.printf(&#34;  EMAIL  | FIRST_NAME | LAST_NAME  | DEPT | SALARY | UPDATE | VIEW_SALARY\n&#34;);
   
    try {
 
      stmt = conn.createStatement();
      rs = stmt.executeQuery(query);
      
      while (rs.next()) {
 
        String email = rs.getString(&#34;EMAIL&#34;);
        String first_name = rs.getString(&#34;FIRST_NAME&#34;);
        String last_name = rs.getString(&#34;LAST_NAME&#34;);
        String department_id = rs.getString(&#34;DEPARTMENT_ID&#34;);
        String salary;
        
        if (((OracleResultSet)rs).getAuthorizationIndicator(&#34;SALARY&#34;) == AuthorizationIndicator.NONE) {
          salary = rs.getString(&#34;SALARY&#34;);
        }
        else {
          salary = &#34;*****&#34;;
        }
 
        byte[] aclRaw = rs.getBytes(6);
        String update, viewSalary;
        if (XSAccessController.checkAcl(lws, aclRaw, &#34;UPDATE&#34;)) {
          update = &#34;true&#34;;
        }
        else {
          update = &#34;false&#34;;
        }
        
        if (XSAccessController.checkAcl(lws, aclRaw, &#34;VIEW_SALARY&#34;)) {
          viewSalary = &#34;true&#34;;
        }
        else {
          viewSalary = &#34;false&#34;;
        }
 
        System.out.printf(&#34;%9s|%12s|%12s|%6s|%8s|%8s|%8s\n&#34;, email, 
                          first_name, last_name, department_id, 
                          salary, update, viewSalary);
       }
    } catch (Exception e) {
      // do nothing since this is just a cleanup action
      e.printStackTrace();
    } finally {
      try { if (rs != null) rs.close(); } catch (Exception e) {};
      try { if (stmt != null) stmt.close(); } catch (Exception e) {};
    }
  }
}
</pre></div>
<!-- class="section" --></div>
</div>
<a id="DBFSG827"></a>
<div class="props_rev_3"><a id="GUID-4BAA592E-CD45-4789-A371-96A3BC3668D0"></a>
<h3 id="DBFSG-GUID-4BAA592E-CD45-4789-A371-96A3BC3668D0" class="sect3">hrdemo_clean.sql</h3>
<div>
<div class="section">
<p>The source file for the cleanup script is <code class="codeph">hrdemo_clean.sql</code>.</p>
<pre dir="ltr">SET ECHO OFF
SET FEEDBACK 1
SET NUMWIDTH 10
SET LINESIZE 80
SET TRIMSPOOL ON
SET TAB OFF
SET PAGESIZE 100
SET ECHO ON
 
-- Connect as RAS administrator
connect rasadm/rasadm;
 
-- Remove policy from the table. 
begin
  sys.xs_data_security.remove_object_policy(policy=&gt;&#39;employees_ds&#39;, 
                                        schema=&gt;&#39;hr&#39;, object=&gt;&#39;employees&#39;);
end;
/
 
pause;
 
-- Delete application users and roles
exec sys.xs_principal.delete_principal(&#39;emp_role&#39;, xs_admin_util.cascade_option);
exec sys.xs_principal.delete_principal(&#39;hr_role&#39;, xs_admin_util.cascade_option);
exec sys.xs_principal.delete_principal(&#39;it_role&#39;, xs_admin_util.cascade_option);
exec sys.xs_principal.delete_principal(&#39;smavris&#39;, xs_admin_util.cascade_option);
exec sys.xs_principal.delete_principal(&#39;daustin&#39;, xs_admin_util.cascade_option);
pause;
 
-- Delete security class and ACLs
exec sys.xs_security_class.delete_security_class(&#39;hrprivs&#39;, xs_admin_util.cascade_option);
exec sys.xs_acl.delete_acl(&#39;emp_acl&#39;, xs_admin_util.cascade_option);
exec sys.xs_acl.delete_acl(&#39;it_acl&#39;, xs_admin_util.cascade_option);
exec sys.xs_acl.delete_acl(&#39;hr_acl&#39;, xs_admin_util.cascade_option);
 
-- Delete data security policy
exec sys.xs_data_security.delete_policy(&#39;employees_ds&#39;, xs_admin_util.cascade_option);
pause;
 
-- Delete database role
drop role db_emp;
 
-- Delete RAS admin user
connect sys/<span class="italic">password</span> as sysdba
drop user rasadm;
pause;
 
-- Delete dispatcher user used by mid-tier
exec sys.xs_principal.delete_principal(&#39;dispatcher&#39;, xs_admin_util.cascade_option);
 
exit
</pre></div>
<!-- class="section" --></div>
</div>
</div>
<a id="DBFSG828"></a>
<div class="props_rev_3"><a id="GUID-95FB6E3E-1119-47A6-9E82-C17AC5CC6850"></a>
<h2 id="DBFSG-GUID-95FB6E3E-1119-47A6-9E82-C17AC5CC6850" class="sect2">Generated Log Files for Each Script</h2>
<div>
<div class="section">
<div class="p">This section includes the following log files that are generated from running the scripts listed in <a href="security_hr_demo_files.htm#GUID-5953585D-D2F7-47E5-B27E-A81DCEC2CA52__CEGGEEAB" title="This table lists the source files and the generated log files for the HR demo scripts.">Table C-1</a>:
<ul style="list-style-type: disc;">
<li>
<p><a href="security_hr_demo_files.htm#GUID-2EFC5D83-9586-4B06-93B7-190197A8821A">hrdemo_setup.log</a></p>
</li>
<li>
<p><a href="security_hr_demo_files.htm#GUID-65F8FD60-F26D-4E63-97CB-DC310B64C078">hrdemo_run.log</a></p>
</li>
<li>
<p><a href="security_hr_demo_files.htm#GUID-9D131D01-1A54-4771-AD08-1FD36415E2AD">hrdemo_run_sess.log</a></p>
</li>
<li>
<p><a href="security_hr_demo_files.htm#GUID-E041C7EE-68C9-4495-BC1F-F87A3B567A98">HRDemo.log</a></p>
</li>
<li>
<p><a href="security_hr_demo_files.htm#GUID-027FBD01-2EFE-47C8-A84F-5E52B5469382">hrdemo_clean.log</a></p>
</li>
</ul>
</div>
</div>
<!-- class="section" --></div>
<a id="DBFSG829"></a>
<div class="props_rev_3"><a id="GUID-2EFC5D83-9586-4B06-93B7-190197A8821A"></a>
<h3 id="DBFSG-GUID-2EFC5D83-9586-4B06-93B7-190197A8821A" class="sect3">hrdemo_setup.log</h3>
<div>
<div class="section">
<p>The <code class="codeph">hrdemo_setup.log</code> file.</p>
<pre dir="ltr">The hrdemo_setup.log file.

SQL*Plus: Release 12.1.0.0.2 Beta on Tue Sep 11 14:09:23 2012
 
Copyright (c) 1982, 2012, Oracle.  All rights reserved.
 
SQL&gt; 
SQL&gt; -- Create a database user as RAS administrator
SQL&gt; connect sys/password as sysdba
Connected.
SQL&gt; grant dba, xs_session_admin to rasadm identified by rasadm;
 
Grant succeeded.
 
SQL&gt; 
SQL&gt; pause;
SQL&gt; 
SQL&gt; ----------------------------------------------------------------------
SQL&gt; --  Introduction
SQL&gt; ----------------------------------------------------------------------
SQL&gt; -- The HR Demo shows how to use basic Real Application Security features.
SQL&gt; -- The demo secures HR.EMPLOYEES table by creating a data security
SQL&gt; -- policy that grants the table access to:
SQL&gt; -- 1) DAUSTIN, an application user in IT department. He has role EMP_ROLE
SQL&gt; --             and IT_ROLE. He can view employee records in IT department,
SQL&gt; --             but he cannot view the salary column except for his own.
SQL&gt; -- 2) SMAVRIS, an application user in HR department. She has role EMP_ROLE
SQL&gt; --             and HR_ROLE. She can view and update all the employee records.
SQL&gt; 
SQL&gt; ----------------------------------------------------------------------
SQL&gt; -- 1. SETUP - User and Roles
SQL&gt; ----------------------------------------------------------------------
SQL&gt; 
SQL&gt; -- Connect as RAS administrator
SQL&gt; connect rasadm/rasadm;
Connected.
SQL&gt; 
SQL&gt; -- Create database role DB_EMP and grant necessary table privileges.
SQL&gt; -- This role will be used to grant the required object privileges to
SQL&gt; -- application users.
SQL&gt; create role db_emp;
 
Role created.
 
SQL&gt; grant select, insert, update, delete on hr.employees to db_emp;
 
Grant succeeded.
 
SQL&gt; pause;
SQL&gt; 
SQL&gt; -- Create an application role EMP_ROLE for common employees.
SQL&gt; exec sys.xs_principal.create_role(name =&gt; &#39;emp_role&#39;, enabled =&gt; true);
 
PL/SQL procedure successfully completed.
 
SQL&gt; 
SQL&gt; -- Create an application role IT_ROLE for IT department.
SQL&gt; exec sys.xs_principal.create_role(name =&gt; &#39;it_role&#39;, enabled =&gt; true);
 
PL/SQL procedure successfully completed.
 
SQL&gt; 
SQL&gt; -- Create an application role HR_ROLE for HR department.
SQL&gt; exec sys.xs_principal.create_role(name =&gt; &#39;hr_role&#39;, enabled =&gt; true);
 
PL/SQL procedure successfully completed.
 
SQL&gt; 
SQL&gt; -- Grant DB_EMP to the three application roles, so they have the required
SQL&gt; -- object privilege to access the table.
SQL&gt; grant db_emp to emp_role;
 
Grant succeeded.
 
SQL&gt; grant db_emp to it_role;
 
Grant succeeded.
 
SQL&gt; grant db_emp to hr_role;
 
Grant succeeded.
 
SQL&gt; 
SQL&gt; -- Create two application users:
SQL&gt; -- DAUSTIN (in IT department), granted EMP_ROLE and IT_ROLE.
SQL&gt; exec  sys.xs_principal.create_user(name =&gt; &#39;daustin&#39;, schema =&gt; &#39;hr&#39;);
 
PL/SQL procedure successfully completed.
 
SQL&gt; exec  sys.xs_principal.set_password(&#39;daustin&#39;, &#39;welcome1&#39;);
 
PL/SQL procedure successfully completed.
 
SQL&gt; exec  sys.xs_principal.grant_roles(&#39;daustin&#39;, &#39;emp_role&#39;);
 
PL/SQL procedure successfully completed.
 
SQL&gt; exec  sys.xs_principal.grant_roles(&#39;daustin&#39;, &#39;it_role&#39;);
 
PL/SQL procedure successfully completed.
 
SQL&gt; 
SQL&gt; -- SMAVRIS (in HR department), granted EMP_ROLE and HR_ROLE.
SQL&gt; exec  sys.xs_principal.create_user(name =&gt; &#39;smavris&#39;, schema =&gt; &#39;hr&#39;);
 
PL/SQL procedure successfully completed.
 
SQL&gt; exec  sys.xs_principal.set_password(&#39;smavris&#39;, &#39;welcome1&#39;);
 
PL/SQL procedure successfully completed.
 
SQL&gt; exec  sys.xs_principal.grant_roles(&#39;smavris&#39;, &#39;emp_role&#39;);
 
PL/SQL procedure successfully completed.
 
SQL&gt; exec  sys.xs_principal.grant_roles(&#39;smavris&#39;, &#39;hr_role&#39;);
 
PL/SQL procedure successfully completed.
 
SQL&gt; 
SQL&gt; pause;
SQL&gt; 
SQL&gt; 
SQL&gt; ----------------------------------------------------------------------
SQL&gt; -- 2. SETUP - Security class and ACL
SQL&gt; ----------------------------------------------------------------------
SQL&gt; 
SQL&gt; -- Create a security class HRPRIVS based on the predefined DML security class.
SQL&gt; -- HRPRIVS has a new privilege VIEW_SALARY, which is used to control the
SQL&gt; -- access to SALARY column.
SQL&gt; declare
  2  begin
  3    sys.xs_security_class.create_security_class(
  4      name        =&gt; &#39;hrprivs&#39;,
  5      parent_list =&gt; xs$name_list(&#39;sys.dml&#39;),
  6      priv_list   =&gt; xs$privilege_list(xs$privilege(&#39;view_salary&#39;)));
  7  end;
  8  /
 
PL/SQL procedure successfully completed.
 
SQL&gt; 
SQL&gt; pause;
SQL&gt; 
SQL&gt; -- Create three ACLs to grant privileges for the policy defined later.
SQL&gt; declare
  2    aces xs$ace_list := xs$ace_list();
  3  begin
  4    aces.extend(1);
  5  
  6    -- EMP_ACL: This ACL grants EMP_ROLE the privileges to view an employee&#39;s
  7    --          own record including SALARY column.
  8    aces(1) := xs$ace_type(privilege_list =&gt; xs$name_list(&#39;select&#39;,&#39;view_salary&#39;),
  9                           principal_name =&gt; &#39;emp_role&#39;);
 10  
 11    sys.xs_acl.create_acl(name      =&gt; &#39;emp_acl&#39;,
 12                      ace_list  =&gt; aces,
 13                      sec_class =&gt; &#39;hrprivs&#39;);
 14  
 15    -- IT_ACL:  This ACL grants IT_ROLE the privilege to view the employee
 16    --          records in IT department, but it does not grant the VIEW_SALARY
 17    --          privilege that is required for access to SALARY column.
 18    aces(1) := xs$ace_type(privilege_list =&gt; xs$name_list(&#39;select&#39;),
 19                           principal_name =&gt; &#39;it_role&#39;);
 20  
 21    sys.xs_acl.create_acl(name      =&gt; &#39;it_acl&#39;,
 22                      ace_list  =&gt; aces,
 23                      sec_class =&gt; &#39;hrprivs&#39;);
 24  
 25    -- HR_ACL:  This ACL grants HR_ROLE the privileges to view and update all
 26    --          employees&#39; records including SALARY column.
 27    aces(1):= xs$ace_type(privilege_list =&gt; xs$name_list(&#39;all&#39;),
 28                          principal_name =&gt; &#39;hr_role&#39;);
 29  
 30    sys.xs_acl.create_acl(name      =&gt; &#39;hr_acl&#39;,
 31                      ace_list  =&gt; aces,
 32                      sec_class =&gt; &#39;hrprivs&#39;);
 33  end;
 34  /
 
PL/SQL procedure successfully completed.
 
SQL&gt; 
SQL&gt; pause;
SQL&gt; 
SQL&gt; ----------------------------------------------------------------------
SQL&gt; -- 3. SETUP - Data security policy
SQL&gt; ----------------------------------------------------------------------
SQL&gt; -- Create data security policy for EMPLOYEES table. The policy defines three
SQL&gt; -- realm constraints and a column constraint that protects SALARY column.
SQL&gt; declare
  2    realms   xs$realm_constraint_list := xs$realm_constraint_list();
  3    cols     xs$column_constraint_list := xs$column_constraint_list();
  4  begin
  5    realms.extend(3);
  6  
  7    -- Realm #1: Only the employee&#39;s own record.
  8    --           EMP_ROLE can view the realm including SALARY column.
  9    realms(1) := xs$realm_constraint_type(
 10      realm    =&gt; &#39;email = xs_sys_context(&#39;&#39;xs$session&#39;&#39;,&#39;&#39;username&#39;&#39;)&#39;,
 11      acl_list =&gt; xs$name_list(&#39;emp_acl&#39;));
 12  
 13    -- Realm #2: The records in the IT department.
 14    --           IT_ROLE can view the realm excluding SALARY column.
 15    realms(2) := xs$realm_constraint_type(
 16      realm    =&gt; &#39;department_id = 60&#39;,
 17      acl_list =&gt; xs$name_list(&#39;it_acl&#39;));
 18  
 19    -- Realm #3: All the records.
 20    --           HR_ROLE can view and update the realm including SALARY column.
 21    realms(3) := xs$realm_constraint_type(
 22      realm    =&gt; &#39;1 = 1&#39;,
 23      acl_list =&gt; xs$name_list(&#39;hr_acl&#39;));
 24  
 25    -- Column constraint protects SALARY column by requiring VIEW_SALARY
 26    -- privilege.
 27    cols.extend(1);
 28    cols(1) := xs$column_constraint_type(
 29      column_list =&gt; xs$list(&#39;salary&#39;),
 30      privilege   =&gt; &#39;view_salary&#39;);
 31  
 32    sys.xs_data_security.create_policy(
 33      name                   =&gt; &#39;employees_ds&#39;,
 34      realm_constraint_list  =&gt; realms,
 35      column_constraint_list =&gt; cols);
 36  end;
 37  /
 
PL/SQL procedure successfully completed.
 
SQL&gt; 
SQL&gt; pause;
SQL&gt; 
SQL&gt; -- Apply the data security policy to the table.
SQL&gt; begin
  2    sys.xs_data_security.apply_object_policy(
  3      policy =&gt; &#39;employees_ds&#39;,
  4      schema =&gt; &#39;hr&#39;,
  5      object =&gt;&#39;employees&#39;);
  6  end;
  7  /
 
PL/SQL procedure successfully completed.
 
SQL&gt; 
SQL&gt; pause;
SQL&gt; 
SQL&gt; ----------------------------------------------------------------------
SQL&gt; -- 4. SETUP - Validate the objects we have set up.
SQL&gt; ----------------------------------------------------------------------
SQL&gt; set serveroutput on;
SQL&gt; begin
  2    if (sys.xs_diag.validate_workspace()) then
  3      dbms_output.put_line(&#39;All configurations are correct.&#39;);
  4    else
  5      dbms_output.put_line(&#39;Some configurations are incorrect.&#39;);
  6    end if;
  7  end;
  8  /
All configurations are correct.
 
PL/SQL procedure successfully completed.
 
SQL&gt; -- XS$VALIDATION_TABLE contains validation errors if any.
SQL&gt; -- Expect no rows selected.
SQL&gt; select * from xs$validation_table order by 1, 2, 3, 4;
 
no rows selected
 
SQL&gt; 
SQL&gt; pause;
SQL&gt; 
SQL&gt; ----------------------------------------------------------------------
SQL&gt; -- 5. SETUP - Mid-Tier related configuration.
SQL&gt; ----------------------------------------------------------------------
SQL&gt; exec sys.xs_principal.create_user(name=&gt;&#39;dispatcher&#39;, schema=&gt;&#39;HR&#39;);
 
PL/SQL procedure successfully completed.
 
SQL&gt; exec sys.xs_principal.set_password(&#39;dispatcher&#39;, &#39;welcome1&#39;);
 
PL/SQL procedure successfully completed.
 
SQL&gt; 
SQL&gt; exec sys.xs_principal.grant_roles(&#39;dispatcher&#39;, &#39;xscacheadmin&#39;);
 
PL/SQL procedure successfully completed.
 
SQL&gt; exec sys.xs_principal.grant_roles(&#39;dispatcher&#39;, &#39;xssessionadmin&#39;);
 
PL/SQL procedure successfully completed.
 
SQL&gt; 
SQL&gt; exit
Disconnected from Oracle Database 12c Enterprise Edition Release 12.1.0.0.2 - 64bit Beta
With the Partitioning, Advanced Analytics and Real Application Testing options
</pre></div>
<!-- class="section" --></div>
</div>
<a id="DBFSG830"></a>
<div class="props_rev_3"><a id="GUID-65F8FD60-F26D-4E63-97CB-DC310B64C078"></a>
<h3 id="DBFSG-GUID-65F8FD60-F26D-4E63-97CB-DC310B64C078" class="sect3">hrdemo_run.log</h3>
<div>
<div class="section">
<p>The <code class="codeph">hrdemo_run.log</code> file.</p>
<pre dir="ltr">SQL*Plus: Release 12.1.0.0.2 Beta on Tue Sep 11 14:09:47 2012
 
Copyright (c) 1982, 2012, Oracle.  All rights reserved.
 
SQL&gt; 
SQL&gt; -- Connect as DAUSTIN, who has only EMP_ROLE and IT_ROLE
SQL&gt; conn daustin/welcome1;
Connected.
SQL&gt; 
SQL&gt; SET SECUREDCOL ON UNAUTH *******
SQL&gt; 
SQL&gt; -- DAUSTIN can view the records in IT department, but can only view his own
SQL&gt; -- SALARY column.
SQL&gt; select email, first_name, last_name, department_id, manager_id, salary
  2  from employees order by email;
 
EMAIL      FIRST_NAME      LAST_NAME       DEPARTMENT_ID MANAGER_ID  SALARY
---------- --------------- --------------- ------------- ---------- -------
AHUNOLD    Alexander       Hunold                     60        102 *******
BERNST     Bruce           Ernst                      60        103 *******
DAUSTIN    David           Austin                     60        103    4800
DLORENTZ   Diana           Lorentz                    60        103 *******
VPATABAL   Valli           Pataballa                  60        103 *******
 
5 rows selected.
 
SQL&gt; 
SQL&gt; 
SQL&gt; SET SECUREDCOL OFF
SQL&gt; pause;
SQL&gt; 
SQL&gt; -- DAUSTIN cannot update the record.
SQL&gt; update employees set manager_id = 102 where email = &#39;DAUSTIN&#39;;
 
0 rows updated.
 
SQL&gt; 
SQL&gt; -- Record is not changed.
SQL&gt; select email, first_name, last_name, department_id, manager_id, salary
  2  from employees where email = &#39;DAUSTIN&#39;;
 
EMAIL      FIRST_NAME      LAST_NAME       DEPARTMENT_ID MANAGER_ID  SALARY
---------- --------------- --------------- ------------- ---------- -------
DAUSTIN    David           Austin                     60        103    4800
 
1 row selected.
 
SQL&gt; 
SQL&gt; pause;
SQL&gt; 
SQL&gt; -- Connect as SMAVRIS, who has both EMP_ROLE and HR_ROLE role.
SQL&gt; conn smavris/welcome1;
Connected.
SQL&gt; 
SQL&gt; -- SMAVRIS can view all the records including SALARY column.
SQL&gt; select email, first_name, last_name, department_id, manager_id, salary
  2  from employees where department_id = 60 or department_id = 40
  3  order by department_id, email;
 
EMAIL      FIRST_NAME      LAST_NAME       DEPARTMENT_ID MANAGER_ID  SALARY
---------- --------------- --------------- ------------- ---------- -------
SMAVRIS    Susan           Mavris                     40        101    6500
AHUNOLD    Alexander       Hunold                     60        102    9000
BERNST     Bruce           Ernst                      60        103    6000
DAUSTIN    David           Austin                     60        103    4800
DLORENTZ   Diana           Lorentz                    60        103    4200
VPATABAL   Valli           Pataballa                  60        103    4800
 
6 rows selected.
 
SQL&gt; 
SQL&gt; -- EMPLOYEES table has 107 rows, we expect to see all of them.
SQL&gt; select count(*) from employees;
 
  COUNT(*)
----------
       107
 
1 row selected.
 
SQL&gt; 
SQL&gt; pause;
SQL&gt; 
SQL&gt; -- SMAVRIS can update the record.
SQL&gt; update employees set manager_id = 102 where email = &#39;DAUSTIN&#39;;
 
1 row updated.
 
SQL&gt; 
SQL&gt; -- Record is changed.
SQL&gt; select email, first_name, last_name, department_id, manager_id, salary
  2  from employees where email = &#39;DAUSTIN&#39;;
 
EMAIL      FIRST_NAME      LAST_NAME       DEPARTMENT_ID MANAGER_ID  SALARY
---------- --------------- --------------- ------------- ---------- -------
DAUSTIN    David           Austin                     60        102    4800
 
1 row selected.
 
SQL&gt; 
SQL&gt; -- change the record back to the original.
SQL&gt; update employees set manager_id = 103 where email = &#39;DAUSTIN&#39;;
 
1 row updated.
 
SQL&gt; 
SQL&gt; exit
Disconnected from Oracle Database 12c Enterprise Edition Release 12.1.0.0.2 - 64bit Beta
With the Partitioning, Advanced Analytics and Real Application Testing options
</pre></div>
<!-- class="section" --></div>
</div>
<a id="DBFSG831"></a>
<div class="props_rev_3"><a id="GUID-9D131D01-1A54-4771-AD08-1FD36415E2AD"></a>
<h3 id="DBFSG-GUID-9D131D01-1A54-4771-AD08-1FD36415E2AD" class="sect3">hrdemo_run_sess.log</h3>
<div>
<div class="section">
<p>The <code class="codeph">hrdemo_run_sess.log</code> file.</p>
<pre dir="ltr">SQL*Plus: Release 12.1.0.0.2 Beta on Tue Sep 11 14:09:59 2012
 
Copyright (c) 1982, 2012, Oracle.  All rights reserved.
 
SQL&gt; 
SQL&gt; -- Connect as RAS administrator
SQL&gt; connect rasadm/rasadm;
Connected.
SQL&gt; 
SQL&gt; -- Variable used to remember the session ID;
SQL&gt; var gsessionid varchar2(32);
SQL&gt; 
SQL&gt; -- Create an application session for SMARVIS and attach to it.
SQL&gt; declare
  2    sessionid raw(16);
  3  begin
  4    sys.dbms_xs_sessions.create_session(&#39;SMAVRIS&#39;, sessionid);
  5    :gsessionid := rawtohex(sessionid);
  6    sys.dbms_xs_sessions.attach_session(sessionid, null);
  7  end ;
  8  /
 
PL/SQL procedure successfully completed.
 
SQL&gt; 
SQL&gt; pause;
SQL&gt; 
SQL&gt; -- Display the current user, it should be SMAVRIS now.
SQL&gt; select xs_sys_context(&#39;xs$session&#39;,&#39;username&#39;) from dual;
 
XS_SYS_CONTEXT(&#39;XS$SESSION&#39;,&#39;USERNAME&#39;)
--------------------------------------------------------------------------------
SMAVRIS
 
1 row selected.
 
SQL&gt; 
SQL&gt; -- Display the enabled application roles and database roles.
SQL&gt; select role_name from v$xs_session_roles union
  2  select role from session_roles order by 1;
 
ROLE_NAME
--------------------------------------------------------------------------------
DB_EMP
EMP_ROLE
HR_ROLE
XSPUBLIC
 
4 rows selected.
 
SQL&gt; 
SQL&gt; pause;
SQL&gt; 
SQL&gt; -- SMAVRIS can view all the records including SALARY column.
SQL&gt; select email, first_name, last_name, department_id, manager_id, salary
  2  from employees where department_id = 60 or department_id = 40
  3  order by department_id, email;
 
EMAIL      FIRST_NAME      LAST_NAME       DEPARTMENT_ID MANAGER_ID  SALARY
---------- --------------- --------------- ------------- ---------- -------
SMAVRIS    Susan           Mavris                     40        101    6500
AHUNOLD    Alexander       Hunold                     60        102    9000
BERNST     Bruce           Ernst                      60        103    6000
DAUSTIN    David           Austin                     60        103    4800
DLORENTZ   Diana           Lorentz                    60        103    4200
VPATABAL   Valli           Pataballa                  60        103    4800
 
6 rows selected.
 
SQL&gt; 
SQL&gt; -- EMPLOYEES table has 107 rows, we expect to see all of them.
SQL&gt; select count(*) from employees;
 
  COUNT(*)
----------
       107
 
1 row selected.
 
SQL&gt; 
SQL&gt; pause;
SQL&gt; 
SQL&gt; -- Disable HR_ROLE.
SQL&gt; exec sys.dbms_xs_sessions.disable_role(&#39;hr_role&#39;);
 
PL/SQL procedure successfully completed.
 
SQL&gt; 
SQL&gt; -- SMAVRIS should only be able to see her own record.
SQL&gt; select email, first_name, last_name, department_id, manager_id, salary
  2  from employees where department_id = 60 or department_id = 40
  3  order by department_id, email;
 
EMAIL      FIRST_NAME      LAST_NAME       DEPARTMENT_ID MANAGER_ID  SALARY
---------- --------------- --------------- ------------- ---------- -------
SMAVRIS    Susan           Mavris                     40        101    6500
 
1 row selected.
 
SQL&gt; 
SQL&gt; pause;
SQL&gt; 
SQL&gt; -- Enable HR_ROLE
SQL&gt; exec sys.dbms_xs_sessions.enable_role(&#39;hr_role&#39;);
 
PL/SQL procedure successfully completed.
 
SQL&gt; 
SQL&gt; -- SMAVRIS can view all the records again.
SQL&gt; select email, first_name, last_name, department_id, manager_id, salary
  2  from employees where department_id = 60 or department_id = 40
  3  order by department_id, email;
 
EMAIL      FIRST_NAME      LAST_NAME       DEPARTMENT_ID MANAGER_ID  SALARY
---------- --------------- --------------- ------------- ---------- -------
SMAVRIS    Susan           Mavris                     40        101    6500
AHUNOLD    Alexander       Hunold                     60        102    9000
BERNST     Bruce           Ernst                      60        103    6000
DAUSTIN    David           Austin                     60        103    4800
DLORENTZ   Diana           Lorentz                    60        103    4200
VPATABAL   Valli           Pataballa                  60        103    4800
 
6 rows selected.
 
SQL&gt; 
SQL&gt; -- EMPLOYEES table has 107 rows, we expect to see all of them.
SQL&gt; select count(*) from employees;
 
  COUNT(*)
----------
       107
 
1 row selected.
 
SQL&gt; 
SQL&gt; pause;
SQL&gt; 
SQL&gt; -- Detach and destroy the application session.
SQL&gt; declare
  2    sessionid raw(16);
  3  begin
  4    sessionid := hextoraw(:gsessionid);
  5    sys.dbms_xs_sessions.detach_session;
  6    sys.dbms_xs_sessions.destroy_session(sessionid);
  7  end;
  8  /
 
PL/SQL procedure successfully completed.
 
SQL&gt; 
SQL&gt; exit
Disconnected from Oracle Database 12c Enterprise Edition Release 12.1.0.0.2 - 64bit Beta
With the Partitioning, Advanced Analytics and Real Application Testing options
</pre></div>
<!-- class="section" --></div>
</div>
<a id="DBFSG832"></a>
<div class="props_rev_3"><a id="GUID-E041C7EE-68C9-4495-BC1F-F87A3B567A98"></a>
<h3 id="DBFSG-GUID-E041C7EE-68C9-4495-BC1F-F87A3B567A98" class="sect3">HRDemo.log</h3>
<div>
<div class="section">
<p>The Java <code class="codeph">HRDemo.log</code> file.</p>
<pre dir="ltr">Query HR.EMPLOYEES table as user &#34;DAUSTIN&#34;
  EMAIL  | FIRST_NAME | LAST_NAME  | DEPT | SALARY | UPDATE | VIEW_SALARY
  AHUNOLD|   Alexander|      Hunold|    60|   *****|   false|   false
   BERNST|       Bruce|       Ernst|    60|   *****|   false|   false
  DAUSTIN|       David|      Austin|    60|    4800|   false|    true
 DLORENTZ|       Diana|     Lorentz|    60|   *****|   false|   false
 VPATABAL|       Valli|   Pataballa|    60|   *****|   false|   false
 
Query HR.EMPLOYEES table as user &#34;SMAVRIS&#34;
  EMAIL  | FIRST_NAME | LAST_NAME  | DEPT | SALARY | UPDATE | VIEW_SALARY
  AHUNOLD|   Alexander|      Hunold|    60|    9000|    true|    true
   BERNST|       Bruce|       Ernst|    60|    6000|    true|    true
  DAUSTIN|       David|      Austin|    60|    4800|    true|    true
  DFAVIET|      Daniel|      Faviet|   100|    9000|    true|    true
 DLORENTZ|       Diana|     Lorentz|    60|    4200|    true|    true
 ISCIARRA|      Ismael|     Sciarra|   100|    7700|    true|    true
    JCHEN|        John|        Chen|   100|    8200|    true|    true
  JMURMAN| Jose Manuel|       Urman|   100|    7800|    true|    true
    LPOPP|        Luis|        Popp|   100|    6900|    true|    true
 NGREENBE|       Nancy|   Greenberg|   100|   12008|    true|    true
  SMAVRIS|       Susan|      Mavris|    40|    6500|    true|    true
 VPATABAL|       Valli|   Pataballa|    60|    4800|    true|    true
</pre></div>
<!-- class="section" --></div>
</div>
<a id="DBFSG833"></a>
<div class="props_rev_3"><a id="GUID-027FBD01-2EFE-47C8-A84F-5E52B5469382"></a>
<h3 id="DBFSG-GUID-027FBD01-2EFE-47C8-A84F-5E52B5469382" class="sect3">hrdemo_clean.log</h3>
<div>
<div class="section">
<p>The <code class="codeph">hrdemo_clean.log</code> file.</p>
<pre dir="ltr">SQL*Plus: Release 12.1.0.0.2 Beta on Tue Sep 11 14:10:43 2012
 
Copyright (c) 1982, 2012, Oracle.  All rights reserved.
 
SQL&gt; 
SQL&gt; -- Connect as RAS administrator
SQL&gt; connect rasadm/rasadm;
Connected.
SQL&gt; 
SQL&gt; -- Remove policy from the table.
SQL&gt; begin
  2    sys.xs_data_security.remove_object_policy(policy=&gt;&#39;employees_ds&#39;,
  3                                          schema=&gt;&#39;hr&#39;, object=&gt;&#39;employees&#39;);
  4  end;
  5  /
 
PL/SQL procedure successfully completed.
 
SQL&gt; 
SQL&gt; pause;
SQL&gt; 
SQL&gt; -- Delete application users and roles
SQL&gt; exec sys.xs_principal.delete_principal(&#39;emp_role&#39;, xs_admin_util.cascade_option);
 
PL/SQL procedure successfully completed.
 
SQL&gt; exec sys.xs_principal.delete_principal(&#39;hr_role&#39;, xs_admin_util.cascade_option);
 
PL/SQL procedure successfully completed.
 
SQL&gt; exec sys.xs_principal.delete_principal(&#39;it_role&#39;, xs_admin_util.cascade_option);
 
PL/SQL procedure successfully completed.
 
SQL&gt; exec sys.xs_principal.delete_principal(&#39;smavris&#39;, xs_admin_util.cascade_option);
 
PL/SQL procedure successfully completed.
 
SQL&gt; exec sys.xs_principal.delete_principal(&#39;daustin&#39;, xs_admin_util.cascade_option);
 
PL/SQL procedure successfully completed.
 
SQL&gt; pause;
SQL&gt; 
SQL&gt; -- Delete security class and ACLs
SQL&gt; exec xs_security_class.delete_security_class(&#39;hrprivs&#39;, xs_admin_util.cascade_option);
 
PL/SQL procedure successfully completed.
 
SQL&gt; exec sys.xs_acl.delete_acl(&#39;emp_acl&#39;, xs_admin_util.cascade_option);
 
PL/SQL procedure successfully completed.
 
SQL&gt; exec sys.xs_acl.delete_acl(&#39;it_acl&#39;, xs_admin_util.cascade_option);
 
PL/SQL procedure successfully completed.
 
SQL&gt; exec sys.xs_acl.delete_acl(&#39;hr_acl&#39;, xs_admin_util.cascade_option);
 
PL/SQL procedure successfully completed.
 
SQL&gt; 
SQL&gt; -- Delete data security policy
SQL&gt; exec sys.xs_data_security.delete_policy(&#39;employees_ds&#39;, xs_admin_util.cascade_option);
 
PL/SQL procedure successfully completed.
 
SQL&gt; pause;
SQL&gt; 
SQL&gt; -- Delete database role
SQL&gt; drop role db_emp;
 
Role dropped.
 
SQL&gt; 
SQL&gt; -- Delete RAS admin user
SQL&gt; connect sys/<span class="italic">password</span> as sysdba
Connected.
SQL&gt; drop user rasadm;
 
User dropped.
 
SQL&gt; pause;
SQL&gt; 
SQL&gt; -- Delete dispatcher user used by mid-tier
SQL&gt; exec sys.xs_principal.delete_principal(&#39;dispatcher&#39;, xs_admin_util.cascade_option);
 
PL/SQL procedure successfully completed.
 
SQL&gt; 
SQL&gt; exit
Disconnected from Oracle Database 12c Enterprise Edition Release 12.1.0.0.2 - 64bit Beta
With the Partitioning, Advanced Analytics and Real Application Testing options
</pre></div>
<!-- class="section" --></div>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment5198">
<tr>
<td class="cellalignment5287">
<table class="cellalignment5203">
<tr>
<td class="cellalignment5202"><a href="oci_jdbc.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5202"><a href="troubleshooting.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2012, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment5289">
<table class="cellalignment5201">
<tr>
<td class="cellalignment5202"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5202"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5202"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5202"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5202"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5202"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>