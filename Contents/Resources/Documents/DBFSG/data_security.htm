<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-5091"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Configuring%20Data%20Security"></a><title>Configuring Data Security</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="keywords" content="data security, about, data realms, Oracle Virtual Private Database (VPD), extended for Real Application Security, validating, data security policy, XS_DIAG PL/SQL package, VALIDATE_DATA_SECURITY, data security documents, example, structure, membership rules (WHERE predicate) in data realm constraints, data realm constraints, membership rule (WHERE predicate), types defined by WHERE predicates, membership methods, parameterized, parameterized data realm constraints, membership rules in data realm constraints, session variables, guideline for, membership rules, access control lists (ACL), directories, trace files, using to resolve predicate errors, trace files, policy predicate errors, ORA-28113((colon)) policy predicate has error message, privileges, columns, applying additional to, column-level security, privileges, column-level security, applying, additional application privileges, to a column, affect on database tables, XS_DATA_SECURITY PL/SQL package, ENABLE_OBJECT_POLICY, ACLS, access control lists, APPLY_OBJECT_POLICY, user-managed, evaluation order, static data realm constraints, ACL evaluation order, static data realms, constraints, dynamic data realm constraints, master-detail tables, inheritedFrom element, components, when element, specifies a predicate for detail table, master detail data realm, parentSchemaName element, specifies name of schema containing master table, parentObjectName element, specifies name of master table, primary_key, specifies primary key from master table, foreign_key, specifies foreign key of detail table, create views, using BEQUEATH clause, determining, invoker&rsquo;s rights use for nested program units, using BEQUEATH clause when creating views, the invoking application user, using SQL functions, using, SQL functions, to determine the invoking application user, ORA_INVOKING_USER function, returns name of current database user, SQL functions, ORA_INVOKING_USER, returns name of current datanase user, ORA_INVOKING_USERID function, returns ID of current database user, ORA_INVOKING_USERID, ORA_INVOKING_XS_USER function, returns name of current Real Application Security application user, ORA_INVOKING_XS_USER, ORA_INVOKING_XS_USER_GUID function, returns ID of current Real Application Security application user, ORA_INVOKING_XS_USER_GUID, defining a basic data security policy, use case, implementation tasks"/>
<meta name="dcterms.created" content="2017-02-17T18:31:46Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Real Application Security Administrator&#39;s and Developer&#39;s Guide"/>
<meta name="dcterms.identifier" content="E48189-13"/>
<meta name="dcterms.isVersionOf" content="DBFSG"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2012, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="acls_sec_classes.htm" title="Previous" type="text/html"/>
<link rel="Next" href="midtierjava.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E48189-13.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-ED34EBA9-8906-41A9-9491-B303DA4824E1"></a> <span id="PAGE" style="display:none;">12/25</span> <!-- End Header -->
<a id="DBFSG4000"></a>
<h1 id="DBFSG-GUID-ED34EBA9-8906-41A9-9491-B303DA4824E1" class="sect1"><span class="enumeration_chapter">5</span> Configuring Data Security</h1>
<div>
<p>This chapter contains:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="data_security.htm#GUID-3059E7B0-F02B-48FE-89B1-1172CF031CFC">About Data Security</a></p>
</li>
<li>
<p><a href="data_security.htm#GUID-A33BDFB0-E8B1-46D2-9EB5-FAE392C18EBC">About Validating the Data Security Policy</a></p>
</li>
<li>
<p><a href="data_security.htm#GUID-B6D452FA-CD3E-4909-8512-904C9EF684A5">Understanding the Structure of the Data Security Policy</a></p>
</li>
<li>
<p><a href="data_security.htm#GUID-8765D94C-B658-4958-802B-621215F856F0">About Designing Data Realms</a></p>
</li>
<li>
<p><a href="data_security.htm#GUID-8282C70D-87F2-46D6-BDA5-53174EB0207C">Applying Additional Application Privileges to a Column</a></p>
</li>
<li>
<p><a href="data_security.htm#GUID-B7EA7D53-8573-4AAD-8EC7-F6DF7C0B3859">About Enabling Data Security Policy for a Database Table or View</a></p>
</li>
<li>
<p><a href="data_security.htm#GUID-9B12C1F0-26D3-41AC-B9F7-2FA7D6B99135">About Creating Real Application Security Policies on Master-Detail Related Tables</a></p>
</li>
<li>
<p><a href="data_security.htm#GUID-2F86855F-5039-4DC8-848B-8887357A3672">About Managing Application Privileges for Data Security Policies</a></p>
</li>
<li>
<p><a href="data_security.htm#GUID-81E7B4AE-B04F-415D-BC51-30097C0384A2">Using BEQUEATH CURRENT_USER Views</a></p>
</li>
<li>
<p><a href="data_security.htm#GUID-C6EF75C9-C167-4482-828E-065BD552E0B7">Real Application Security: Putting It All Together</a></p>
</li>
</ul>
</div>
<a id="DBFSG99154"></a>
<div class="props_rev_3"><a id="GUID-3059E7B0-F02B-48FE-89B1-1172CF031CFC"></a>
<h2 id="DBFSG-GUID-3059E7B0-F02B-48FE-89B1-1172CF031CFC" class="sect2">About Data Security</h2>
<div>
<p>Data security refers to the ability to control application user access to data in an Oracle database throughout all components of an Oracle Enterprise, using a uniform methodology. In Oracle Database Real Application Security, to secure a database table or view, you must specify the rows that you want to secure by creating a data realm (see also, <a href="glossary.htm#GUID-749D6B46-2F31-4C0D-BCF6-B2030352BA75"><span class="xrefglossterm">data realm</span></a>).</p>
<p>To restrict access to the data realm, you associate one or more access control lists (<a href="glossary.htm#GUID-BEF74ACD-C696-405B-BF57-C8DAA4C016BC"><span class="xrefglossterm">ACL</span></a>s) that list the application users or application roles and their application privileges for each data realm. A data realm together with its associated ACL is known as a data realm constraint.</p>
<p>You can further restrict access to specific columns by applying one or more application privileges to each column. This is useful in situations where you want only privileged application users to see the data in that column.</p>
<p>Data security is an extension of Oracle Virtual Private Database (VPD). VPD adds a <code class="codeph">WHERE</code> predicate to restrict data access each time an application user selects or modifies a database table. For more information about VPD, see <a class="olink DBSEG007" target="_blank" href="../DBSEG/vpd.htm#DBSEG007"><span><cite>Oracle Database Security Guide</cite></span></a>. Oracle Database Real Application Security extends VPD concepts further by implementing an authorization model that can further restrict access at both the row and column by means of associating ACLs to these objects. In addition, the application session and session context (through user roles and session namespace) are made more secure. Furthermore Real Application Security provides its own data dictionaries.</p>
<p>To configure data security in Oracle Database Real Application Security, you must follow these steps:</p>
<ol>
<li>
<p><span class="bold">Create a data security policy.</span> The data security policy defines one or more data realms and associates ACLs for each data realm to create data realm constraints. The data security policy can also contain column-specific attributes to further control data access. Multiple tables or views can share the same data security policy. This lets you create a uniform security strategy that can be used across a set of tables and views.</p>
<p><a href="data_security.htm#GUID-B6D452FA-CD3E-4909-8512-904C9EF684A5__CDDEDIDF">Example 5-1</a><a href="data_security.htm#GUID-B6D452FA-CD3E-4909-8512-904C9EF684A5__CDDEDIDF">Example 5-1</a> shows the structure a data security policy.</p>
</li>
<li>
<p><span class="bold">Associate the data security policy with the table or view you want to secure.</span></p>
<p>You can run the <code class="codeph">XS_DATA_SECURITY.APPLY_OBJECT_POLICY</code> PL/SQL procedure to enable the data security policy for the table or view that contains the data realms and columns that you want to secure.</p>
<p>Note that if your application security requires that you update table rows and also restrict read access to certain columns in the same table, you must use two <code class="codeph">APPLY_OBJECT_POLICY</code> procedures to enforce both data security policies. For example, one <code class="codeph">APPLY_OBJECT_POLICY</code> procedure would enforce the DML <code class="codeph">statement_types</code> required for updating table rows (for example, <code class="codeph">INSERT</code>, <code class="codeph">UPDATE</code>, <code class="codeph">DELETE</code>), while the other <code class="codeph">APPLY_OBJECT_POLICY</code> procedure would enforce only the <code class="codeph">statement_types</code> of <code class="codeph">SELECT</code> for the column constraint.</p>
<p><a href="data_security.htm#GUID-E388D927-4433-4B6C-8B10-93625EDF6FE6__CDDFGDEC">Example 5-5</a><a href="data_security.htm#GUID-E388D927-4433-4B6C-8B10-93625EDF6FE6__CDDFGDEC">Example 5-5</a> shows how to use the APPLY_OBJECT_POLICY procedure. See <span class="q">&#34;<a href="plsql_pkg.htm#GUID-E0F31931-07F6-460F-9DE0-34AC681327EE">APPLY_OBJECT_POLICY Procedure</a>&#34;</span> for more information.</p>
</li>
<li>
<p><span class="bold">Validate the data security policy.</span> See <span class="q">&#34;<a href="data_security.htm#GUID-A33BDFB0-E8B1-46D2-9EB5-FAE392C18EBC">About Validating the Data Security Policy</a>&#34;</span> for more information.</p>
</li>
</ol>
</div>
</div>
<a id="DBFSG253"></a>
<div class="props_rev_3"><a id="GUID-A33BDFB0-E8B1-46D2-9EB5-FAE392C18EBC"></a>
<h2 id="DBFSG-GUID-A33BDFB0-E8B1-46D2-9EB5-FAE392C18EBC" class="sect2">About Validating the Data Security Policy</h2>
<div>
<p>Oracle recommends that you should always validate the Real Application Security objects after administrative configuration changes. The <code class="codeph">XS_DIAG</code> package provides a set of validation APIs to help ensure that the complicated relationships among your Real Application Security objects are not damaged unintentionally by these changes.</p>
<p>See <span class="q">&#34;<a href="plsql_pkg.htm#GUID-39061A4F-C36E-410E-9944-D8A57E302853">VALIDATE_DATA_SECURITY Function</a>&#34;</span> for more information about validating a data security policy.</p>
</div>
</div>
<a id="DBFSG390"></a><a id="DBFSG99156"></a><a id="DBFSG99155"></a>
<div class="props_rev_3"><a id="GUID-B6D452FA-CD3E-4909-8512-904C9EF684A5"></a>
<h2 id="DBFSG-GUID-B6D452FA-CD3E-4909-8512-904C9EF684A5" class="sect2">Understanding the Structure of the Data Security Policy</h2>
<div>
<p>You can create a data security policy using the <code class="codeph">XS_DATA_SECURITY.CREATE_POLICY</code> PL/SQL procedure.</p>
<p><a href="data_security.htm#GUID-B6D452FA-CD3E-4909-8512-904C9EF684A5__CDDJJFHJ">Figure 5-1</a> shows the structure of a Real Application Security data security policy named <code class="codeph">HR.EMPLOYEES_DS</code> that is created from a data realm constraint and a column constraint, both of which are to be applied to the <code class="codeph">EMPLOYEES</code> table. The data realm constraint defines the rows (<code class="codeph">DEPARTMENT_ID</code> with a value of 60 or 100) on which the data security policy applies and the ACL (<code class="codeph">HRACL</code>) that is associated with these rows. The column constraint defines a constraint for the sensitive column data in the <code class="codeph">SALARY</code> column of the <code class="codeph">EMPLOYEES</code> table by using the <code class="codeph">VIEW_SENSITIVE_INFO</code> privilege that is required to view this sensitive data.</p>
<div class="figure" id="GUID-B6D452FA-CD3E-4909-8512-904C9EF684A5__CDDJJFHJ">
<p class="titleinfigure">Figure 5-1 Real Application Security Data Security Policy Created on the EMPLOYEES Table</p>
<img width="657" height="336" src="img/GUID-3523CBDA-D4D1-410C-A7DA-90E79BA1D6F2-default.png" alt="Description of Figure 5-1 follows" title="Description of Figure 5-1 follows"/><br/>
<a href="img_text/GUID-3523CBDA-D4D1-410C-A7DA-90E79BA1D6F2-print.htm">Description of &#34;Figure 5-1 Real Application Security Data Security Policy Created on the EMPLOYEES Table&#34;</a></div>
<!-- class="figure" -->
<p><a href="data_security.htm#GUID-B6D452FA-CD3E-4909-8512-904C9EF684A5__CDDEDIDF">Example 5-1</a> creates the data security policy shown in <a href="data_security.htm#GUID-B6D452FA-CD3E-4909-8512-904C9EF684A5__CDDJJFHJ">Figure 5-1</a>.</p>
<div class="infoboxnotealso" id="GUID-B6D452FA-CD3E-4909-8512-904C9EF684A5__GUID-2B3CF960-88AF-402E-B69D-BD93642E2CD9">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="plsql_pkg.htm#GUID-BC06195D-9ED9-4095-942E-5651B543B11F">CREATE_POLICY Procedure</a>&#34;</span></p>
</div>
<p>You should validate the data security policy after you create it. See <span class="q">&#34;<a href="plsql_pkg.htm#GUID-39061A4F-C36E-410E-9944-D8A57E302853">VALIDATE_DATA_SECURITY Function</a>&#34;</span> for more information.</p>
<p>The main parameters of a data security policy are as follows:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold">Policy Name:</span> This defines the name of the data security policy.</p>
<p><a href="data_security.htm#GUID-B6D452FA-CD3E-4909-8512-904C9EF684A5__CDDEDIDF">Example 5-1</a> uses the name <code class="codeph">EMPLOYEES_DS</code> for the data security policy that it creates.</p>
</li>
<li>
<p><span class="bold">Data Realm Constraints:</span> The data realm constraints define the data realms, or the rows, on which the data security policy applies, together with the ACLs to be associated with these data realms.</p>
<p><a href="data_security.htm#GUID-B6D452FA-CD3E-4909-8512-904C9EF684A5__CDDEDIDF">Example 5-1</a> uses the <code class="codeph">realm_cons</code> list to define the data realm constraint for the <code class="codeph">EMPLOYEES_DS</code> policy. <code class="codeph">realm_cons</code> comprises of rows that have a <code class="codeph">DEPARTMENT_ID</code> value of <code class="codeph">60</code> or <code class="codeph">100</code>. These rows are associated with the <code class="codeph">HRACL</code> access control list.</p>
</li>
<li>
<p><span class="bold">Column Constraint:</span> Column constraint defines additional constraint for sensitive column data in the data realm constraint.</p>
<p><a href="data_security.htm#GUID-B6D452FA-CD3E-4909-8512-904C9EF684A5__CDDEDIDF">Example 5-1</a> associates the column_cons column constraint with the <code class="codeph">EMPLOYEES_DS</code> policy. <code class="codeph">column_cons</code> protects the <code class="codeph">SALARY</code> column with the <code class="codeph">VIEW_SENSITIVE_INFO</code> privilege.</p>
</li>
</ul>
<div class="example" id="GUID-B6D452FA-CD3E-4909-8512-904C9EF684A5__CDDEDIDF">
<p class="titleinexample">Example 5-1 Structure of a Data Security Policy</p>
<pre dir="ltr">-- Create the ACL HRACL.
DECLARE
ace_list XS$ACE_LIST;
BEGIN
ace_list := XS$ACE_LIST(
XS$ACE_TYPE(privilege_list =&gt; XS$NAME_LIST(&#39;SELECT&#39;),
granted =&gt; true,principal_name =&gt; &#39;Employee_Role&#39;),
XS$ACE_TYPE(privilege_list =&gt; XS$NAME_LIST(&#39;SELECT&#39;, &#39;VIEW_SENSITIVE_INFO&#39;), granted =&gt; true, principal_name =&gt; &#39;Manager_Role&#39;));
 
sys.xs_acl.create_acl(name =&gt; &#39;HRACL&#39;,ace_list =&gt; ace_list, sec_class =&gt; &#39;HR.EMPOLYEES_SC&#39;);
END;

-- Create variables to store the data realm constraints and the column constraint.
DECLARE
  realm_cons XS$REALM_CONSTRAINT_LIST;      
BEGIN  

-- Create a data realm constraint comprising of a data realm (rule) and
-- an associated ACL.
  realm_cons := 
    XS$REALM_CONSTRAINT_LIST(
      XS$REALM_CONSTRAINT_TYPE(realm=&gt; &#39;DEPARTMENT_ID in (60, 100)&#39;,
                               acl_list=&gt; XS$NAME_LIST(&#39;HRACL&#39;)));
  
-- Create the column constraint.
  column_cons := 
    XS$COLUMN_CONSTRAINT_LIST(
      XS$COLUMN_CONSTRAINT_TYPE(column_list=&gt; XS$LIST(&#39;SALARY&#39;),
                            privilege=&gt; &#39;VIEW_SENSITIVE_INFO&#39;));

 -- Create the data security policy.
<span class="bold">  SYS.XS_DATA_SECURITY.CREATE_POLICY(</span>
<span class="bold">          name=&gt;&#39;HR.EMPLOYEES_DS&#39;,</span>
<span class="bold">          realm_constraint_list=&gt;realm_cons,</span>
<span class="bold">          column_constraint_list=&gt;column_cons);</span>

-- Enforce the data security policy to protect READ access of the EMPLOYEES table
-- and restrict access to the SALARY column using the VIEW_SENSITIVE_INFO
-- privilege.
  sys.xs_data_security.apply_object_policy(
           policy =&gt; &#39;HR.EMPLOYEES_DS&#39;,
           schema =&gt; &#39;HR&#39;,
           object =&gt; &#39;EMPLOYEES&#39;,
           statement_types =&gt; &#39;SELECT&#39;,
           owner_bypass =&gt; true);

END;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="DBFSG99157"></a>
<div class="props_rev_3"><a id="GUID-8765D94C-B658-4958-802B-621215F856F0"></a>
<h2 id="DBFSG-GUID-8765D94C-B658-4958-802B-621215F856F0" class="sect2">About Designing Data Realms</h2>
<div>
<div class="p">This section includes the following topics:
<ul style="list-style-type: disc;">
<li>
<p><a href="data_security.htm#GUID-203EE648-B203-484A-BA93-3AA1D95ABA97">About Understanding the Structure of a Data Realm</a></p>
</li>
<li>
<p><a href="data_security.htm#GUID-0A027C06-5706-4A97-A852-B4BB36E4D57F">About Using Static Data Realms</a></p>
</li>
<li>
<p><a href="data_security.htm#GUID-F3F8335C-320E-4689-A865-ED3CDB73A5E0">Using Trace Files to Check for Policy Predicate Errors</a></p>
</li>
</ul>
</div>
</div>
<a id="DBFSG99159"></a><a id="DBFSG99158"></a>
<div class="props_rev_3"><a id="GUID-203EE648-B203-484A-BA93-3AA1D95ABA97"></a>
<h3 id="DBFSG-GUID-203EE648-B203-484A-BA93-3AA1D95ABA97" class="sect3">About Understanding the Structure of a Data Realm</h3>
<div>
<p>A data realm is a collection of one or more object instances. An object instance is associated with a single row in a table or view and is identified by the primary key value of the row in the storage table of the object. A table can have both static and dynamic data realms defined for it at the same time. As described earlier, an ACL defines the application privilege grants for the data realm.</p>
<p>A data realm constraint is used to associate a data realm with an ACL. <a href="data_security.htm#GUID-203EE648-B203-484A-BA93-3AA1D95ABA97__CDDBGBDJ">Example 5-2</a> creates a data realm constraint called <code class="codeph">realm_cons</code>. The data realm constraint includes a membership rule to create a data realm. The data realm includes rows where <code class="codeph">DEPARTMENT_ID</code> is 60 or 100. <code class="codeph">realm_cons</code> also declares an ACL, called <code class="codeph">HRACL</code>, to associate with the data realm.</p>
<p>The membership of the object instances within a data realm is determined by a rule in the form of a SQL predicate, which must be applicable to the <code class="codeph">WHERE</code> clause of a single-table query against the storage table of the object. The SQL predicate in <a href="data_security.htm#GUID-203EE648-B203-484A-BA93-3AA1D95ABA97__CDDBGBDJ">Example 5-2</a> is <code class="codeph">DEPARTMENT_ID in (60, 100)</code>.</p>
<p>If the SQL you write causes errors, such as <code class="codeph">ORA-28113: policy predicate has error</code>, then you can use trace files to find cause of the error. See <span class="q">&#34;<a href="data_security.htm#GUID-F3F8335C-320E-4689-A865-ED3CDB73A5E0">Using Trace Files to Check for Policy Predicate Errors</a>&#34;</span> for more information.</p>
<p><a href="data_security.htm#GUID-203EE648-B203-484A-BA93-3AA1D95ABA97__CDDBGBDJ">Example 5-2</a> uses a single ACL called <code class="codeph">HRACL</code>. A data realm can be associated with multiple ACLs, and the same ACL can be used across multiple data realms.</p>
<p>Consider the following columns from the <code class="codeph">ORDERS</code> purchase order table in the <code class="codeph">OE</code> sample schema:</p>
<div class="tblformal" id="GUID-203EE648-B203-484A-BA93-3AA1D95ABA97__GUID-16C8CF69-9EEF-4F87-BA25-1BB9122CD600">
<table class="cellalignment5205" summary="Shows the columns for the ORDERS purchase order table of the OE sample schema.">
<thead>
<tr class="cellalignment5199">
<th class="cellalignment5328" id="d18311e1054">ORDER_ID</th>
<th class="cellalignment5239" id="d18311e1057">CUSTOMER_ID</th>
<th class="cellalignment5259" id="d18311e1060">ORDER_STATUS</th>
<th class="cellalignment5255" id="d18311e1063">SALES_REP_ID</th>
<th class="cellalignment5255" id="d18311e1066">ORDER_TOTAL</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5199">
<td class="cellalignment5329" id="d18311e1071" headers="d18311e1054">
<p>2354</p>
</td>
<td class="cellalignment5241" headers="d18311e1071 d18311e1057">
<p>104</p>
</td>
<td class="cellalignment5261" headers="d18311e1071 d18311e1060">
<p>0</p>
</td>
<td class="cellalignment5257" headers="d18311e1071 d18311e1063">
<p>155</p>
</td>
<td class="cellalignment5257" headers="d18311e1071 d18311e1066">
<p>46257</p>
</td>
</tr>
<tr class="cellalignment5199">
<td class="cellalignment5329" id="d18311e1087" headers="d18311e1054">
<p>2355</p>
</td>
<td class="cellalignment5241" headers="d18311e1087 d18311e1057">
<p>104</p>
</td>
<td class="cellalignment5261" headers="d18311e1087 d18311e1060">
<p>8</p>
</td>
<td class="cellalignment5257" headers="d18311e1087 d18311e1063">
<p>NULL</p>
</td>
<td class="cellalignment5257" headers="d18311e1087 d18311e1066">
<p>94513.5</p>
</td>
</tr>
<tr class="cellalignment5199">
<td class="cellalignment5329" id="d18311e1103" headers="d18311e1054">
<p>2356</p>
</td>
<td class="cellalignment5241" headers="d18311e1103 d18311e1057">
<p>105</p>
</td>
<td class="cellalignment5261" headers="d18311e1103 d18311e1060">
<p>5</p>
</td>
<td class="cellalignment5257" headers="d18311e1103 d18311e1063">
<p>NULL</p>
</td>
<td class="cellalignment5257" headers="d18311e1103 d18311e1066">
<p>29473.8</p>
</td>
</tr>
<tr class="cellalignment5199">
<td class="cellalignment5329" id="d18311e1119" headers="d18311e1054">
<p>2357</p>
</td>
<td class="cellalignment5241" headers="d18311e1119 d18311e1057">
<p>108</p>
</td>
<td class="cellalignment5261" headers="d18311e1119 d18311e1060">
<p>5</p>
</td>
<td class="cellalignment5257" headers="d18311e1119 d18311e1063">
<p>158</p>
</td>
<td class="cellalignment5257" headers="d18311e1119 d18311e1066">
<p>59872.4</p>
</td>
</tr>
<tr class="cellalignment5199">
<td class="cellalignment5329" id="d18311e1135" headers="d18311e1054">
<p>2358</p>
</td>
<td class="cellalignment5241" headers="d18311e1135 d18311e1057">
<p>105</p>
</td>
<td class="cellalignment5261" headers="d18311e1135 d18311e1060">
<p>2</p>
</td>
<td class="cellalignment5257" headers="d18311e1135 d18311e1063">
<p>155</p>
</td>
<td class="cellalignment5257" headers="d18311e1135 d18311e1066">
<p>7826</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>Each row in the <code class="codeph">ORDERS</code> table is an object instance in the purchase order object. The number listed in the <code class="codeph">ORDER_ID</code> column is the primary key used to uniquely identify a particular purchase order object instance. For example:</p>
<ul style="list-style-type: disc;">
<li>
<p>A data realm comprised of one object instance, that is, one row. For example, you could use the <code class="codeph">WHERE</code> predicate of <code class="codeph">ORDER_ID=2354</code>.</p>
</li>
<li>
<p>A data realm comprised of multiple object instances. For example, you could have multiple rows using the <code class="codeph">WHERE</code> predicate of <code class="codeph">CUSTOMER_ID=104</code>.</p>
</li>
<li>
<p>A data realm comprised of the entire contents of the table, defined by the <code class="codeph">WHERE</code> predicate of <code class="codeph">1=1</code>.</p>
</li>
</ul>
<p>Examples of ways to define data realms are as follows:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold">Use valid SQL attributes such as columns in a table.</span></p>
<p>In this case, you are using <code class="codeph">WHERE</code> predicates such as the following:</p>
<pre dir="ltr">CUSTOMER_ID=104
</pre>
<p>Changes made to the data in the rows and columns are automatically reflected in the data collected by the data realm.</p>
</li>
<li>
<p><span class="bold">Use parameters in the WHERE predicate.</span></p>
<p>You can parameterize an data realm, for example:</p>
<pre dir="ltr">CUSTOMER_ID=&amp;PARAM
</pre>
<p>This example assumes that the parameter <code class="codeph">PARAM</code> has been associated with different customer IDs. When you grant permissions in this situation, you need to grant the permission to the specific parameter value. You must specify the values of the parameters in the ACL associated with the data realm that contains this type of <code class="codeph">WHERE</code> predicate. This enables you to create the grant based on customer IDs without having to create many customer ID-specific data realms.</p>
</li>
<li>
<p><span class="bold">Use a membership rule based on runtime application session variables or subqueries.</span></p>
<p>An example of this type of membership rule is:</p>
<pre dir="ltr">CUSTOMER_ID=XS_SYS_CONTEXT(&#39;order&#39;, &#39;cust_id&#39;)
</pre>
<p>However, be careful about creating membership rules that are based on session variables or subqueries. For example, suppose you wanted to use the session variable <code class="codeph">USER</code>, which reflects the current application user, in the membership rule <code class="codeph">col=USER</code>. Oracle Database cannot pre-compute the resultant row set because the result is not deterministic. Application user <code class="codeph">SCOTT</code> and application user <code class="codeph">JSMITH</code> may have a different result for the same row. However, the membership rule <code class="codeph">col=&#39;SCOTT&#39;</code> works because the rule is always evaluated to the same result for any given row.</p>
<p>See <span class="q">&#34;<a href="data_security.htm#GUID-0A027C06-5706-4A97-A852-B4BB36E4D57F">About Using Static Data Realms</a>&#34;</span> for more information about creating data realms. See also <span class="q">&#34;<a href="plsql_fun.htm#GUID-BC19F7BA-354D-49D2-B9E8-F47B68FCE921">XS_SYS_CONTEXT Function</a>&#34;</span> for more information about <code class="codeph">XS_SYS_CONTEXT</code>.</p>
</li>
</ul>
<div class="example" id="GUID-203EE648-B203-484A-BA93-3AA1D95ABA97__CDDBGBDJ">
<p class="titleinexample">Example 5-2 Components of a Data Realm Constraint</p>
<pre dir="ltr">realm_cons := XS$REALM_CONSTRAINT_TYPE(realm=&gt; &#39;DEPARTMENT_ID in (60, 100)&#39;,
                                       acl_list=&gt; XS$NAME_LIST(&#39;HRACL&#39;));
</pre></div>
<!-- class="example" --></div>
</div>
<a id="DBFSG99160"></a>
<div class="props_rev_3"><a id="GUID-0A027C06-5706-4A97-A852-B4BB36E4D57F"></a>
<h3 id="DBFSG-GUID-0A027C06-5706-4A97-A852-B4BB36E4D57F" class="sect3">About Using Static Data Realms</h3>
<div>
<p>In <a id="d18311e1371" class="indexterm-anchor"></a><a id="d18311e1377" class="indexterm-anchor"></a>a static data realm, <a id="d18311e1382" class="indexterm-anchor"></a>Oracle Database evaluates changes to data affected by a data realm when the data is updated. You can use static data realms with tables, but not with views.</p>
<p>To set an data realm to be static, set its <code class="codeph">is_static</code> attribute to <code class="codeph">true</code>. The following example creates a static data realm:</p>
<pre dir="ltr">realm_cons := XS$REALM_CONSTRAINT_TYPE(realm=&gt; &#39;DEPARTMENT_ID in (60, 100)&#39;,
                                       acl_list=&gt; XS$NAME_LIST(&#39;HRACL&#39;),
                                       <span class="bold">is_static=&gt; TRUE</span>);
</pre>
<p><a id="d18311e1401" class="indexterm-anchor"></a>Materialized Views (MVs) will be used to maintain the binding between rows in the protected table and the ACLs that protect them. They will be generated automatically whenever static data realms are included in the data security policy. These MVs will support complete refresh only and will allow up to 125 ACLs to be associated with any single row.</p>
<p>The MV that is generated will be of the form <code class="codeph">mv(TABLEROWID, ACLIDLIST)</code> where <code class="codeph">TABLEROWID</code> refers to a row in the table being protected and ACLIDLIST is a list of ACLID values stored in a <code class="codeph">RAW</code> type column. The individual 16-byte values will be concatenated to form the list.</p>
<p>Oracle <a id="d18311e1417" class="indexterm-anchor"></a><a id="d18311e1423" class="indexterm-anchor"></a>Database evaluates dynamic data realms each time the application user performs a query on the data realm data. You can use dynamic data realms to protect rows for both tables and views. A dynamic data realm has the most flexibility, because it is not bound by the requirements needed for static data realms. Be aware that an overly complex rule within the dynamic data realm definition may affect performance.</p>
<p>If the base table update is infrequent or the data realm member evaluation rule is complex, then you should consider using static data realms to protect the base table. A frequently updated base table may be constantly out of sync with the ACLIDS storage MV, unless the MV is refreshed accordingly. The administrator should make the decision based on the base table statistics and performance requirements of the system.</p>
<p>To set a data realm constraint to be dynamic, set its <code class="codeph">is_static</code> attribute to <code class="codeph">FALSE</code>, or omit the <code class="codeph">is_static</code> attribute. The following example creates a dynamic data realm:</p>
<pre dir="ltr">realm_cons := XS$REALM_CONSTRAINT_TYPE(realm=&gt; &#39;DEPARTMENT_ID in (60, 100)&#39;,
                                       acl_list=&gt; XS$NAME_LIST(&#39;HRACL&#39;),
                                       <span class="bold">is_static=&gt; FALSE</span>);
</pre></div>
</div>
<a id="DBFSG99167"></a>
<div class="props_rev_3"><a id="GUID-F3F8335C-320E-4689-A865-ED3CDB73A5E0"></a>
<h3 id="DBFSG-GUID-F3F8335C-320E-4689-A865-ED3CDB73A5E0" class="sect3">Using Trace Files to Check for Policy Predicate Errors</h3>
<div>
<div class="section">
<p>If the SQL defined in the <code class="codeph">realm</code> element causes an <code class="codeph">ORA-28113: policy predicate has error</code> or similar message, then you can use trace files to find the cause of the error. The trace file shows the actual error, along with the VPD view showing the reason for the problem. Often, the syntax of the view has a trivial error, which you can solve by analyzing the SQL text of the view.</p>
<p>To enable tracing, log into SQL*Plus as a user who has the <code class="codeph">ALTER SESSION</code> privilege.</p>
<p>If you want to dump all the data realm constraint rules (with their parameter values resolved) into the trace file, enter the following statement:</p>
<pre dir="ltr">ALTER SESSION SET EVENTS &#39;TRACE[XSXDS] disk=high&#39;;
</pre>
<p>If you want to dump the VPD views of the XDS-enabled table during the initial (hard) parse of a query, enter the following statement:</p>
<pre dir="ltr">ALTER SESSION SET EVENTS &#39;TRACE[XSVPD] disk=high&#39;;
</pre>
<p>Alternatively, you can enable tracing by adding the following lines to the initialization file for the database instance:</p>
<pre dir="ltr">event=&#34;TRACE[XSXDS] disk=high&#34;
event=&#34;TRACE[XSVPD] disk=high&#34;
</pre>
<p>You can find the location of this trace file by issuing the following SQL command:</p>
<pre dir="ltr">SHOW PARAMETER USER_DUMP_DEST;
</pre>
<p>If you need to disable tracing, issue the following statements:</p>
<pre dir="ltr">ALTER SESSION SET EVENTS &#39;TRACE[XSVPD] off&#39;;
ALTER SESSION SET EVENTS &#39;TRACE[XSXDS] off&#39;;
</pre>
<div class="infoboxnotealso" id="GUID-F3F8335C-320E-4689-A865-ED3CDB73A5E0__GUID-24293BFF-407B-48AF-BFA7-105B9371B1BE">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="q">&#34;<a href="troubleshooting.htm#GUID-1B37573C-FD97-48A4-99D0-2AEDAD471EC5">About Data Security (XSXDS and XSVPD) Event-Based Tracing</a>&#34;</span></p>
</li>
<li>
<p><a class="olink ADMIN11243" target="_blank" href="../ADMIN/monitoring.htm#ADMIN11243"><span><cite>Oracle Database Administrator&rsquo;s Guide</cite></span></a> for more information about using trace files</p>
</li>
</ul>
</div>
</div>
<!-- class="section" --></div>
</div>
</div>
<a id="DBFSG99180"></a><a id="DBFSG99181"></a><a id="DBFSG99179"></a>
<div class="props_rev_3"><a id="GUID-8282C70D-87F2-46D6-BDA5-53174EB0207C"></a>
<h2 id="DBFSG-GUID-8282C70D-87F2-46D6-BDA5-53174EB0207C" class="sect2">Applying Additional Application Privileges to a Column</h2>
<div>
<div class="section">
<p>By default, access to rows is protected by the ACL associated with the data realm. In addition, you can protect a particular column with custom application privileges.</p>
<p>To protect a column for table <code class="codeph">T</code>, add a list of column constraints to the data security policy that will be applied to table <code class="codeph">T</code>.</p>
<div class="infobox-note" id="GUID-8282C70D-87F2-46D6-BDA5-53174EB0207C__GUID-B421A8AF-1438-49F4-8CF7-9F2FE6A1B7B7">
<p class="notep1">Note:</p>
<p>For tables approaching 1000 columns, there is a limitation on the number of columns that can be protected as Real Application Security uses an internal virtual column to compute and store the authorization indicator. The sum of the number of columns and the number of protected columns should not exceed 1000. (Number of table columns + Number of protected table columns &lt;=1000). For example, if a table has 998 columns, up to and including 2 protected columns are allowed; or, if a table has 990 columns, up to and including 10 protected columns are allowed, and so forth. If the number of columns to be protected exceeds the number allowed, an <code class="codeph">ORA-28113: policy predicate has error</code> is returned.</p>
</div>
<p>For example, the <code class="codeph">PRODUCT_INFORMATION</code> table in the <code class="codeph">OE</code> schema contains the <code class="codeph">LIST_PRICE</code> column. If you want to restrict the display of product prices to specific categories, you can apply an additional application privilege to the <code class="codeph">LIST_COLUMN</code> table, so that only the sales representative who has logged in can see the product list prices for the categories he or she manages.</p>
<p><a href="data_security.htm#GUID-8282C70D-87F2-46D6-BDA5-53174EB0207C__CDDGIIBF">Example 5-3</a> shows a column constraint that protects the <code class="codeph">LIST_PRICE</code> column with the <code class="codeph">ACCESS_PRICE</code> application privilege.</p>
<p>Before you add the column constraint, a <code class="codeph">SELECT</code> statement on the following columns from the <code class="codeph">OE.PRODUCT_INFORMATION</code> table for products in categories 13 and 14 shows the following output:</p>
<div class="tblformal" id="GUID-8282C70D-87F2-46D6-BDA5-53174EB0207C__GUID-0B14DEA3-EBA8-4A44-A18E-C0D5F7773CE8">
<table class="cellalignment5205" summary="Shows the output from a SELECT statement on four columns of the OE.PRODUCT_INFORMATION table before the column constraint is applied..">
<thead>
<tr class="cellalignment5199">
<th class="cellalignment5294" id="d18311e1799">PRODUCT_ID</th>
<th class="cellalignment5294" id="d18311e1802">PRODUCT_NAME</th>
<th class="cellalignment5294" id="d18311e1805">CATEGORY_ID</th>
<th class="cellalignment5294" id="d18311e1808">LIST_PRICE</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5199">
<td class="cellalignment5297" id="d18311e1813" headers="d18311e1799">
<p>3400</p>
</td>
<td class="cellalignment5297" headers="d18311e1813 d18311e1802">
<p>HD 8GB /SE</p>
</td>
<td class="cellalignment5297" headers="d18311e1813 d18311e1805">
<p>13</p>
</td>
<td class="cellalignment5297" headers="d18311e1813 d18311e1808">
<p>389</p>
</td>
</tr>
<tr class="cellalignment5199">
<td class="cellalignment5297" id="d18311e1826" headers="d18311e1799">
<p>3355</p>
</td>
<td class="cellalignment5297" headers="d18311e1826 d18311e1802">
<p>HD 8GB /SI</p>
</td>
<td class="cellalignment5297" headers="d18311e1826 d18311e1805">
<p>13</p>
</td>
<td class="cellalignment5297" headers="d18311e1826 d18311e1808">
<p>NULL</p>
</td>
</tr>
<tr class="cellalignment5199">
<td class="cellalignment5297" id="d18311e1839" headers="d18311e1799">
<p>2395</p>
</td>
<td class="cellalignment5297" headers="d18311e1839 d18311e1802">
<p>32MB Cache /M</p>
</td>
<td class="cellalignment5297" headers="d18311e1839 d18311e1805">
<p>14</p>
</td>
<td class="cellalignment5297" headers="d18311e1839 d18311e1808">
<p>123</p>
</td>
</tr>
<tr class="cellalignment5199">
<td class="cellalignment5297" id="d18311e1852" headers="d18311e1799">
<p>1755</p>
</td>
<td class="cellalignment5297" headers="d18311e1852 d18311e1802">
<p>32MB Cache /NM</p>
</td>
<td class="cellalignment5297" headers="d18311e1852 d18311e1805">
<p>14</p>
</td>
<td class="cellalignment5297" headers="d18311e1852 d18311e1808">
<p>121</p>
</td>
</tr>
<tr class="cellalignment5199">
<td class="cellalignment5297" id="d18311e1865" headers="d18311e1799">
<p>...</p>
</td>
<td class="cellalignment5297" headers="d18311e1865 d18311e1802">
<p>...</p>
</td>
<td class="cellalignment5297" headers="d18311e1865 d18311e1805">
<p>...</p>
</td>
<td class="cellalignment5297" headers="d18311e1865 d18311e1808">
<p>...</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>After the column constraint is applied, the sales representatives who are responsible for category 13 products see the following output:</p>
<div class="tblformal" id="GUID-8282C70D-87F2-46D6-BDA5-53174EB0207C__GUID-3E76988F-3896-4334-A60D-580B9D0217A5">
<table class="cellalignment5205" summary="Shows the output from a SELECT statement on four columns of the OE.PRODUCT_INFORMATION table after the column constraint is applied that the sales rep for category 13 sees.">
<thead>
<tr class="cellalignment5199">
<th class="cellalignment5294" id="d18311e1889">PRODUCT_ID</th>
<th class="cellalignment5294" id="d18311e1892">PRODUCT_NAME</th>
<th class="cellalignment5294" id="d18311e1895">CATEGORY_ID</th>
<th class="cellalignment5294" id="d18311e1898">LIST_PRICE</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5199">
<td class="cellalignment5297" id="d18311e1903" headers="d18311e1889">
<p>3400</p>
</td>
<td class="cellalignment5297" headers="d18311e1903 d18311e1892">
<p>HD 8GB /SE</p>
</td>
<td class="cellalignment5297" headers="d18311e1903 d18311e1895">
<p>13</p>
</td>
<td class="cellalignment5297" headers="d18311e1903 d18311e1898">
<p>389</p>
</td>
</tr>
<tr class="cellalignment5199">
<td class="cellalignment5297" id="d18311e1916" headers="d18311e1889">
<p>3355</p>
</td>
<td class="cellalignment5297" headers="d18311e1916 d18311e1892">
<p>HD 8GB /SI</p>
</td>
<td class="cellalignment5297" headers="d18311e1916 d18311e1895">
<p>13</p>
</td>
<td class="cellalignment5297" headers="d18311e1916 d18311e1898">
<p>NULL</p>
</td>
</tr>
<tr class="cellalignment5199">
<td class="cellalignment5297" id="d18311e1929" headers="d18311e1889">
<p>2395</p>
</td>
<td class="cellalignment5297" headers="d18311e1929 d18311e1892">
<p>32MB Cache /M</p>
</td>
<td class="cellalignment5297" headers="d18311e1929 d18311e1895">
<p>14</p>
</td>
<td class="cellalignment5297" headers="d18311e1929 d18311e1898">
<p>NULL</p>
</td>
</tr>
<tr class="cellalignment5199">
<td class="cellalignment5297" id="d18311e1942" headers="d18311e1889">
<p>1755</p>
</td>
<td class="cellalignment5297" headers="d18311e1942 d18311e1892">
<p>32MB Cache /NM</p>
</td>
<td class="cellalignment5297" headers="d18311e1942 d18311e1895">
<p>14</p>
</td>
<td class="cellalignment5297" headers="d18311e1942 d18311e1898">
<p>NULL</p>
</td>
</tr>
<tr class="cellalignment5199">
<td class="cellalignment5297" id="d18311e1955" headers="d18311e1889">
<p>...</p>
</td>
<td class="cellalignment5297" headers="d18311e1955 d18311e1892">
<p>...</p>
</td>
<td class="cellalignment5297" headers="d18311e1955 d18311e1895">
<p>...</p>
</td>
<td class="cellalignment5297" headers="d18311e1955 d18311e1898">
<p>...</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>Conversely, sales representatives responsible for category 14 products see this output:</p>
<div class="tblformal" id="GUID-8282C70D-87F2-46D6-BDA5-53174EB0207C__GUID-9DEBA17B-D287-4C39-BA38-68774E41C737">
<table class="cellalignment5205" summary="Shows the output from a SELECT statement on four columns of the OE.PRODUCT_INFORMATION table after the column constraint is applied that the sales rep for category 14 sees.">
<thead>
<tr class="cellalignment5199">
<th class="cellalignment5294" id="d18311e1979">PRODUCT_ID</th>
<th class="cellalignment5294" id="d18311e1982">PRODUCT_NAME</th>
<th class="cellalignment5294" id="d18311e1985">CATEGORY_ID</th>
<th class="cellalignment5294" id="d18311e1988">LIST_PRICE</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5199">
<td class="cellalignment5297" id="d18311e1993" headers="d18311e1979">
<p>3400</p>
</td>
<td class="cellalignment5297" headers="d18311e1993 d18311e1982">
<p>HD 8GB /SE</p>
</td>
<td class="cellalignment5297" headers="d18311e1993 d18311e1985">
<p>13</p>
</td>
<td class="cellalignment5297" headers="d18311e1993 d18311e1988">
<p>NULL</p>
</td>
</tr>
<tr class="cellalignment5199">
<td class="cellalignment5297" id="d18311e2006" headers="d18311e1979">
<p>3355</p>
</td>
<td class="cellalignment5297" headers="d18311e2006 d18311e1982">
<p>HD 8GB /SI</p>
</td>
<td class="cellalignment5297" headers="d18311e2006 d18311e1985">
<p>13</p>
</td>
<td class="cellalignment5297" headers="d18311e2006 d18311e1988">
<p>NULL</p>
</td>
</tr>
<tr class="cellalignment5199">
<td class="cellalignment5297" id="d18311e2019" headers="d18311e1979">
<p>2395</p>
</td>
<td class="cellalignment5297" headers="d18311e2019 d18311e1982">
<p>32MB Cache /M</p>
</td>
<td class="cellalignment5297" headers="d18311e2019 d18311e1985">
<p>14</p>
</td>
<td class="cellalignment5297" headers="d18311e2019 d18311e1988">
<p>123</p>
</td>
</tr>
<tr class="cellalignment5199">
<td class="cellalignment5297" id="d18311e2032" headers="d18311e1979">
<p>1755</p>
</td>
<td class="cellalignment5297" headers="d18311e2032 d18311e1982">
<p>32MB Cache /NM</p>
</td>
<td class="cellalignment5297" headers="d18311e2032 d18311e1985">
<p>14</p>
</td>
<td class="cellalignment5297" headers="d18311e2032 d18311e1988">
<p>121</p>
</td>
</tr>
<tr class="cellalignment5199">
<td class="cellalignment5297" id="d18311e2045" headers="d18311e1979">
<p>...</p>
</td>
<td class="cellalignment5297" headers="d18311e2045 d18311e1982">
<p>...</p>
</td>
<td class="cellalignment5297" headers="d18311e2045 d18311e1985">
<p>...</p>
</td>
<td class="cellalignment5297" headers="d18311e2045 d18311e1988">
<p>...</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>In these examples, the list price for product 3355 is <code class="codeph">NULL</code>. To enable a mid-tier application to distinguish between the true value of authorized data, which could include <code class="codeph">NULL</code>, and an unauthorized value that is always <code class="codeph">NULL</code>, use the <code class="codeph">COLUMN_AUTH_INDICATOR</code> SQL function to check if the column value in a row is authorized. You can mask the unauthorized data with a value different from <code class="codeph">NULL</code> by modifying the <code class="codeph">SELECT</code> statement to include a <code class="codeph">DECODE</code> or <code class="codeph">CASE</code> function that contains the <code class="codeph">COLUMN_AUTH_INDICATOR</code> SQL function.</p>
<p><a href="data_security.htm#GUID-8282C70D-87F2-46D6-BDA5-53174EB0207C__CDDBECFA">Example 5-4</a> shows a <code class="codeph">SELECT</code> statement that uses the <code class="codeph">COLUMN_AUTH_INDICATOR</code> function to check authorized data and the <code class="codeph">DECODE</code> function to replace <code class="codeph">NULL</code> with the value <code class="codeph">restricted</code>.</p>
<p>Afterward, the masked value appears in place of <code class="codeph">NULL</code>. For example, if our category 13 sales representative logs on and searches for product list prices, he or she sees the following output:</p>
<div class="tblformal" id="GUID-8282C70D-87F2-46D6-BDA5-53174EB0207C__GUID-764F2AED-526C-417F-975B-3517A5AE7397">
<table class="cellalignment5330">
<thead>
<tr class="cellalignment5199">
<th class="cellalignment5294" id="d18311e2121">PRODUCT_ID</th>
<th class="cellalignment5294" id="d18311e2124">PRODUCT_NAME</th>
<th class="cellalignment5294" id="d18311e2127">CATEGORY_ID</th>
<th class="cellalignment5294" id="d18311e2130">LIST_PRICE</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5199">
<td class="cellalignment5297" id="d18311e2135" headers="d18311e2121">
<p>3400</p>
</td>
<td class="cellalignment5297" headers="d18311e2135 d18311e2124">
<p>HD 8GB /SE</p>
</td>
<td class="cellalignment5297" headers="d18311e2135 d18311e2127">
<p>13</p>
</td>
<td class="cellalignment5297" headers="d18311e2135 d18311e2130">
<p>389</p>
</td>
</tr>
<tr class="cellalignment5199">
<td class="cellalignment5297" id="d18311e2148" headers="d18311e2121">
<p>3355</p>
</td>
<td class="cellalignment5297" headers="d18311e2148 d18311e2124">
<p>HD 8GB /SI</p>
</td>
<td class="cellalignment5297" headers="d18311e2148 d18311e2127">
<p>13</p>
</td>
<td class="cellalignment5297" headers="d18311e2148 d18311e2130">
<p>NULL</p>
</td>
</tr>
<tr class="cellalignment5199">
<td class="cellalignment5297" id="d18311e2161" headers="d18311e2121">
<p>2395</p>
</td>
<td class="cellalignment5297" headers="d18311e2161 d18311e2124">
<p>32MB Cache /M</p>
</td>
<td class="cellalignment5297" headers="d18311e2161 d18311e2127">
<p>14</p>
</td>
<td class="cellalignment5297" headers="d18311e2161 d18311e2130">
<p>restricted</p>
</td>
</tr>
<tr class="cellalignment5199">
<td class="cellalignment5297" id="d18311e2174" headers="d18311e2121">
<p>1755</p>
</td>
<td class="cellalignment5297" headers="d18311e2174 d18311e2124">
<p>32MB Cache /NM</p>
</td>
<td class="cellalignment5297" headers="d18311e2174 d18311e2127">
<p>14</p>
</td>
<td class="cellalignment5297" headers="d18311e2174 d18311e2130">
<p>restricted</p>
</td>
</tr>
<tr class="cellalignment5199">
<td class="cellalignment5297" id="d18311e2187" headers="d18311e2121">
<p>...</p>
</td>
<td class="cellalignment5297" headers="d18311e2187 d18311e2124">
<p>...</p>
</td>
<td class="cellalignment5297" headers="d18311e2187 d18311e2127">
<p>...</p>
</td>
<td class="cellalignment5297" headers="d18311e2187 d18311e2130">
<p>...</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<div class="infoboxnotealso" id="GUID-8282C70D-87F2-46D6-BDA5-53174EB0207C__GUID-8051354E-4452-48E3-A6EB-DA9A239CF375">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="parm_views.htm#GUID-1146556A-3BCB-467A-9DAB-1C0CDB3E0EBC">Oracle Database Real Application Security Data&nbsp;Dictionary&nbsp;Views</a> for information about the column constraints data dictionary views, which list existing tables that use column level security</p>
</li>
<li>
<p><span class="q">&#34;<a href="plsql_fun.htm#GUID-D1D62656-1156-4D6E-A9EC-D3BED1CD4A7D">COLUMN_AUTH_INDICATOR Function</a>&#34;</span></p>
</li>
<li>
<p><a href="data_security.htm#GUID-B6D452FA-CD3E-4909-8512-904C9EF684A5__CDDEDIDF">Example 5-1</a> for an example of a column constraint element within a data security policy.</p>
</li>
<li>
<p><a href="oci_jdbc.htm#GUID-07681DFA-7A8E-4F3C-B655-3C202882AC03">Configuring OCI and JDBC Applications for Column Authorization</a> if your applications use either Oracle Call Interface (OCI) or JDBC</p>
</li>
</ul>
</div>
</div>
<!-- class="section" -->
<div class="example" id="GUID-8282C70D-87F2-46D6-BDA5-53174EB0207C__CDDGIIBF">
<p class="titleinexample">Example 5-3 Column with an Additional Application Privilege That Has Been Applied</p>
<pre dir="ltr">column_cons := 
  XS$COLUMN_CONSTRAINT_LIST(
    XS$COLUMN_CONSTRAINT_TYPE(column_list=&gt; XS$LIST(&#39;LIST_PRICE&#39;),
                          privilege=&gt; &#39;ACCESS_PRICE&#39;));
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-8282C70D-87F2-46D6-BDA5-53174EB0207C__CDDBECFA">
<p class="titleinexample">Example 5-4 Checking Authorized Data and Masking NULL Values</p>
<pre dir="ltr">SELECT PRODUCT_ID, PRODUCT_NAME, CATEGORY_ID
DECODE(COLUMN_AUTH_INDICATOR(LIST_PRICE), 0, &#39;restricted&#39;, 1, LIST_PRICE) LIST_PRICE
FROM PRODUCT_INFORMATION
WHERE CATEGORY_ID = 13;
</pre></div>
<!-- class="example" --></div>
</div>
<a id="DBFSG99187"></a>
<div class="props_rev_3"><a id="GUID-B7EA7D53-8573-4AAD-8EC7-F6DF7C0B3859"></a>
<h2 id="DBFSG-GUID-B7EA7D53-8573-4AAD-8EC7-F6DF7C0B3859" class="sect2">About Enabling Data Security Policy for a Database Table or View</h2>
<div>
<p>The <code class="codeph">XS_DATA_SECURITY.APPLY_OBJECT_POLICY</code> procedure applies a data security policy on a table or view.</p>
<div class="p">This section includes the following topics:
<ul style="list-style-type: disc;">
<li>
<p><a href="data_security.htm#GUID-E388D927-4433-4B6C-8B10-93625EDF6FE6">Enabling Real Application Security Using the APPLY_OBJECT_POLICY Procedure</a></p>
</li>
<li>
<p><a href="data_security.htm#GUID-65920F85-727D-42B3-B17F-99C6608BD32C">About How the APPLY_OBJECT_POLICY Procedure Alters a Database Table</a></p>
</li>
<li>
<p><a href="data_security.htm#GUID-376C9FDE-61AF-4088-8654-C4FA85BE4D1A">About How ACLs on Table Data Are Evaluated</a></p>
</li>
</ul>
</div>
</div>
<a id="DBFSG99192"></a><a id="DBFSG99191"></a>
<div class="props_rev_3"><a id="GUID-E388D927-4433-4B6C-8B10-93625EDF6FE6"></a>
<h3 id="DBFSG-GUID-E388D927-4433-4B6C-8B10-93625EDF6FE6" class="sect3">Enabling Real Application Security Using the APPLY_OBJECT_POLICY Procedure</h3>
<div>
<div class="section">
<p>Use the <code class="codeph">XS_DATA_SECURITY.APPLY_OBJECT_POLICY</code> procedure to enable Real Application Security for a database table or view. <a href="data_security.htm#GUID-E388D927-4433-4B6C-8B10-93625EDF6FE6__CDDFGDEC">Example 5-5</a> enables the <code class="codeph">ORDERS_DS</code> data security policy for the <code class="codeph">OE.ORDERS</code> table. See <span class="q">&#34;<a href="plsql_pkg.htm#GUID-E0F31931-07F6-460F-9DE0-34AC681327EE">APPLY_OBJECT_POLICY Procedure</a>&#34;</span> for more information.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-E388D927-4433-4B6C-8B10-93625EDF6FE6__CDDFGDEC">
<p class="titleinexample">Example 5-5 Using XS_DATA_SECURITY.APPLY_OBJECT_POLICY</p>
<pre dir="ltr">BEGIN  SYS.XS_DATA_SECURITY.APPLY_OBJECT_POLICY(policy=&gt;&#39;ORDERS_DS&#39;,
                                       schema=&gt;&#39;OE&#39;,
                                       object=&gt;&#39;ORDERS&#39;);
END;
</pre></div>
<!-- class="example" -->
<div class="section">This section includes the following topic: <a href="data_security.htm#GUID-FF788B16-CBD7-42AE-9336-84ED3BA93563">About Applying Multiple Policies for a Table or View</a>.</div>
<!-- class="section" --></div>
<a id="DBFSG425"></a>
<div class="props_rev_3"><a id="GUID-FF788B16-CBD7-42AE-9336-84ED3BA93563"></a>
<h4 id="DBFSG-GUID-FF788B16-CBD7-42AE-9336-84ED3BA93563" class="sect4">About Applying Multiple Policies for a Table or View</h4>
<div>
<p>You can apply multiple data security policies for a table or view. When a table or view is protected by multiple data security policies, an application user has access to only those rows that are allowed by all the policies. So, for example, if the data realm for Policy 1 includes a row, but the data realm for Policy 2 does not include the same row, the application user would be unable to access the row.</p>
<p>Column security works similarly. Consider the case where column Col1 is protected by multiple policies: Policy1 protects it with Priv1, Policy2 protects it with Priv2, and so forth. Then an application user must have been granted all application privileges (Priv1, Priv2, and so forth) to access Col1.Thus, for columns protected by column policies, an application user must have been granted access by all policies protecting the column.</p>
</div>
</div>
</div>
<a id="DBFSG99193"></a>
<div class="props_rev_3"><a id="GUID-65920F85-727D-42B3-B17F-99C6608BD32C"></a>
<h3 id="DBFSG-GUID-65920F85-727D-42B3-B17F-99C6608BD32C" class="sect3">About How the APPLY_OBJECT_POLICY Procedure Alters a Database Table</h3>
<div>
<p>The following table, <code class="codeph">OE.ORDERS</code>, shown earlier under <span class="q">&#34;<a href="data_security.htm#GUID-203EE648-B203-484A-BA93-3AA1D95ABA97">About Understanding the Structure of a Data Realm</a>&#34;</span>, has been enabled with <code class="codeph">XS_DATA_SECURITY.APPLY_OBJECT_POLICY</code>. It shows the addition of the hidden <code class="codeph">SYS_ACLOID</code> column. This column, whose data type is <code class="codeph">NUMBER</code>, lists application user-managed ACL identifiers. The following table contains the application user-managed ACL identifier 500, which is a direct grant on the object instance identified by the order ID 2356.</p>
<div class="infobox-note" id="GUID-65920F85-727D-42B3-B17F-99C6608BD32C__GUID-DA345DAF-476C-4C24-A791-BFB79F047A2E">
<p class="notep1">Note:</p>
<p>The <code class="codeph">SYS_ACLOID</code> hidden column can be enabled by passing the value <code class="codeph">XS_DATA_SECURITY.APPLY_ACLOID_COLUMN</code> for the <code class="codeph">apply_option</code> parameter when invoking the <code class="codeph">XS_DATA_SECURITY</code> procedure. Real Application Security allows only one ACLID to be added to the <code class="codeph">SYS_ACLOID</code> column.</p>
</div>
<div class="tblformalwide" id="GUID-65920F85-727D-42B3-B17F-99C6608BD32C__GUID-C297713A-0DE9-44BB-9C02-8471C4DC28A5">
<table class="cellalignment5210" summary="Shows the cloumns of the OE.ORDERS table with the additional hidden SYS_ALCOID column listing the application user-managed ACL identifier 500.">
<thead>
<tr class="cellalignment5199">
<th class="cellalignment5331" id="d18311e2772">ORDER_ID</th>
<th class="cellalignment5235" id="d18311e2775">CUSTOMER_ID</th>
<th class="cellalignment5227" id="d18311e2778">ORDER_STATUS</th>
<th class="cellalignment5235" id="d18311e2781">SALES_REP_ID</th>
<th class="cellalignment5227" id="d18311e2784">ORDER_TOTAL</th>
<th class="cellalignment5235" id="d18311e2787">SYS_ALCOID</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5199">
<td class="cellalignment5332" id="d18311e2792" headers="d18311e2772">
<p><code class="codeph">2354</code></p>
</td>
<td class="cellalignment5237" headers="d18311e2792 d18311e2775">
<p><code class="codeph">104</code></p>
</td>
<td class="cellalignment5229" headers="d18311e2792 d18311e2778">
<p><code class="codeph">0</code></p>
</td>
<td class="cellalignment5237" headers="d18311e2792 d18311e2781">
<p><code class="codeph">155</code></p>
</td>
<td class="cellalignment5229" headers="d18311e2792 d18311e2784">
<p><code class="codeph">46257</code></p>
</td>
<td class="cellalignment5237" headers="d18311e2792 d18311e2787">&nbsp;</td>
</tr>
<tr class="cellalignment5199">
<td class="cellalignment5332" id="d18311e2814" headers="d18311e2772">
<p><code class="codeph">2355</code></p>
</td>
<td class="cellalignment5237" headers="d18311e2814 d18311e2775">
<p><code class="codeph">104</code></p>
</td>
<td class="cellalignment5229" headers="d18311e2814 d18311e2778">
<p><code class="codeph">8</code></p>
</td>
<td class="cellalignment5237" headers="d18311e2814 d18311e2781">
<p><code class="codeph">NULL</code></p>
</td>
<td class="cellalignment5229" headers="d18311e2814 d18311e2784">
<p><code class="codeph">94513.5</code></p>
</td>
<td class="cellalignment5237" headers="d18311e2814 d18311e2787">&nbsp;</td>
</tr>
<tr class="cellalignment5199">
<td class="cellalignment5332" id="d18311e2836" headers="d18311e2772">
<p><code class="codeph">2356</code></p>
</td>
<td class="cellalignment5237" headers="d18311e2836 d18311e2775">
<p><code class="codeph">105</code></p>
</td>
<td class="cellalignment5229" headers="d18311e2836 d18311e2778">
<p><code class="codeph">5</code></p>
</td>
<td class="cellalignment5237" headers="d18311e2836 d18311e2781">
<p><code class="codeph">NULL</code></p>
</td>
<td class="cellalignment5229" headers="d18311e2836 d18311e2784">
<p><code class="codeph">29473.8</code></p>
</td>
<td class="cellalignment5237" headers="d18311e2836 d18311e2787">
<p><code class="codeph">500</code></p>
</td>
</tr>
<tr class="cellalignment5199">
<td class="cellalignment5332" id="d18311e2861" headers="d18311e2772">
<p><code class="codeph">2357</code></p>
</td>
<td class="cellalignment5237" headers="d18311e2861 d18311e2775">
<p><code class="codeph">108</code></p>
</td>
<td class="cellalignment5229" headers="d18311e2861 d18311e2778">
<p><code class="codeph">5</code></p>
</td>
<td class="cellalignment5237" headers="d18311e2861 d18311e2781">
<p><code class="codeph">158</code></p>
</td>
<td class="cellalignment5229" headers="d18311e2861 d18311e2784">
<p><code class="codeph">59872.4</code></p>
</td>
<td class="cellalignment5237" headers="d18311e2861 d18311e2787">&nbsp;</td>
</tr>
<tr class="cellalignment5199">
<td class="cellalignment5332" id="d18311e2883" headers="d18311e2772">
<p><code class="codeph">2358</code></p>
</td>
<td class="cellalignment5237" headers="d18311e2883 d18311e2775">
<p><code class="codeph">105</code></p>
</td>
<td class="cellalignment5229" headers="d18311e2883 d18311e2778">
<p><code class="codeph">2</code></p>
</td>
<td class="cellalignment5237" headers="d18311e2883 d18311e2781">
<p><code class="codeph">155</code></p>
</td>
<td class="cellalignment5229" headers="d18311e2883 d18311e2784">
<p><code class="codeph">7826</code></p>
</td>
<td class="cellalignment5237" headers="d18311e2883 d18311e2787">&nbsp;</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>The system-managed static ACL identifiers, are stored in a Materialized View (MV).</p>
<div class="tblformalwide" id="GUID-65920F85-727D-42B3-B17F-99C6608BD32C__GUID-0EA4F327-2FD6-4B29-8F47-CC3141219060">
<table class="cellalignment5210" summary="Shows the content of the Materialized view listing the system-managed static ACL identifiers.">
<thead>
<tr class="cellalignment5199">
<th class="cellalignment5263" id="d18311e2914">TABLEROWID</th>
<th class="cellalignment5264" id="d18311e2917">ACLIDLIST</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5199">
<td class="cellalignment5265" id="d18311e2922" headers="d18311e2914">
<p><code class="codeph">AAAO/8AABAAANrCABJ</code></p>
</td>
<td class="cellalignment5266" headers="d18311e2922 d18311e2917">
<p><code class="codeph">60FB8AAA40D46C9EE040449864653987</code></p>
</td>
</tr>
<tr class="cellalignment5199">
<td class="cellalignment5265" id="d18311e2931" headers="d18311e2914">
<p><code class="codeph">AAAO/8AABAAANrCAB</code>L</p>
</td>
<td class="cellalignment5266" headers="d18311e2931 d18311e2917">
<p><code class="codeph">60FB8AAA40D46C9EE040449864653987</code></p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>To find detailed information on the data realms or data realm constraints associated with a table, query the <code class="codeph">DBA_XS_REALM_CONSTRAINTS</code> data dictionary view. See <span class="q">&#34;<a href="parm_views.htm#GUID-93E684FD-576E-432F-81E5-84A1A3ABC642">DBA_XS_REALM_CONSTRAINTS</a>&#34;</span> for more information.</p>
</div>
</div>
<a id="DBFSG99194"></a>
<div class="props_rev_3"><a id="GUID-376C9FDE-61AF-4088-8654-C4FA85BE4D1A"></a>
<h3 id="DBFSG-GUID-376C9FDE-61AF-4088-8654-C4FA85BE4D1A" class="sect3">About How ACLs on Table Data Are Evaluated</h3>
<div>
<p>When Oracle Database evaluates a set of ACLs, it stops the evaluation when it finds the first grant or deny. For this reason, it is important to plan the order of ACLs carefully. The ACLs associated with each row in a table are evaluated in the following order:</p>
<ol>
<li>
<p><span class="bold">The ACLs from grants directly on object instances (that is, application user-managed ACL identifiers) are evaluated first.</span> See <span class="q">&#34;<a href="acls_sec_classes.htm#GUID-AB53EC7B-C593-4AF3-B991-70E6503586F6">About Configuring Access Control Lists</a>&#34;</span> for more information about creating an ACL and adding it to the object instance.</p>
</li>
<li>
<p><span class="bold">The ACLs from static data realm constraint grants are evaluated next, after application user-managed ACLs.</span> If you have multiple static data realms, they are evaluated in the order of their physical appearance in the data security policy. See <span class="q">&#34;<a href="data_security.htm#GUID-0A027C06-5706-4A97-A852-B4BB36E4D57F">About Using Static Data Realms</a>&#34;</span> for more information about static data realms.</p>
</li>
<li>
<p><span class="bold">The ACLs from dynamic data realm constraint grants are evaluated last.</span> If you have multiple dynamic data realms, they are evaluated in the order of their physical appearance in the policy. See <span class="q">&#34;<a href="data_security.htm#GUID-0A027C06-5706-4A97-A852-B4BB36E4D57F">About Using Static Data Realms</a>&#34;</span> for more information about dynamic data realms.</p>
</li>
</ol>
</div>
</div>
</div>
<a id="DBFSG99169"></a>
<div class="props_rev_3"><a id="GUID-9B12C1F0-26D3-41AC-B9F7-2FA7D6B99135"></a>
<h2 id="DBFSG-GUID-9B12C1F0-26D3-41AC-B9F7-2FA7D6B99135" class="sect2">About Creating Real Application Security Policies on Master-Detail Related Tables</h2>
<div>
<div class="p">This section includes the following topics:
<ul style="list-style-type: disc;">
<li>
<p><a href="data_security.htm#GUID-7D84E5C9-BCB7-4B61-9CC2-C3049D30BC61">About Real Application Security Policies on Master-Detail Related Tables</a></p>
</li>
<li>
<p><a href="data_security.htm#GUID-B4AF8584-DA48-416D-AD8E-76A8E7466092">About Understanding the Structure of Master Detail Data Realms</a></p>
</li>
<li>
<p><a href="data_security.htm#GUID-8C309EBB-F1D6-47A9-8DBE-08C2E6D2D21C">Example of Creating a Real Application Security Policy on Master-Detail Related Tables</a></p>
</li>
</ul>
</div>
<p>For more information about master-detail tables, see the chapter about creating a master-detail application using JPA and Oracle ADF in <a class="olink TDPJD224" target="_blank" href="http://www.oracle.com/pls/topic/lookup?ctx=E50529-01&amp;id=TDPJD224"><span><cite>Oracle Database 2 Day + Java Developer&#39;s Guide</cite></span></a>.</p>
</div>
<a id="DBFSG99170"></a>
<div class="props_rev_3"><a id="GUID-7D84E5C9-BCB7-4B61-9CC2-C3049D30BC61"></a>
<h3 id="DBFSG-GUID-7D84E5C9-BCB7-4B61-9CC2-C3049D30BC61" class="sect3">About Real Application Security Policies on Master-Detail Related Tables</h3>
<div>
<p>You can create a data security policy that <a id="d18311e3343" class="indexterm-anchor"></a>can be used<a id="d18311e3348" class="indexterm-anchor"></a> for <a id="d18311e3355" class="indexterm-anchor"></a>master-detail related tables. Typically, you may want the same policy that protects the master table to protect its detail tables. Creating a Real Application Security policy for master-detail tables enables anyone accessing these tables to do so under a uniform policy that can be inherited from master table to detail table.</p>
<p>The possible inheritance paths for policies and master-detail tables are as follows:</p>
<ul style="list-style-type: disc;">
<li>
<p>Multiple detail tables can inherit policies from one master table.</p>
</li>
<li>
<p>Detail tables can inherit policies from other detail tables.</p>
</li>
<li>
<p>One detail table can inherit policies from multiple master tables.</p>
</li>
</ul>
<p>If any one of the policies in the master table is satisfied, then application users can access the corresponding rows in the detail table.</p>
</div>
</div>
<a id="DBFSG99172"></a><a id="DBFSG99171"></a>
<div class="props_rev_3"><a id="GUID-B4AF8584-DA48-416D-AD8E-76A8E7466092"></a>
<h3 id="DBFSG-GUID-B4AF8584-DA48-416D-AD8E-76A8E7466092" class="sect3">About Understanding the Structure of Master Detail Data Realms</h3>
<div>
<p>To create a Real Application Security policy for master-detail related tables, you must create a data security policy for each table. In each data security policy for the detail tables, you indicate the master table from which the detail table inherits by including master detail data realms. Steps <a href="data_security.htm#GUID-8C309EBB-F1D6-47A9-8DBE-08C2E6D2D21C__CDDCEICE">4</a>, <a href="data_security.htm#GUID-8C309EBB-F1D6-47A9-8DBE-08C2E6D2D21C__CDDFFCEB">6</a> and <a href="data_security.htm#GUID-8C309EBB-F1D6-47A9-8DBE-08C2E6D2D21C__CDDIIAIC">7</a> in the procedure under <span class="q">&#34;<a href="data_security.htm#GUID-8C309EBB-F1D6-47A9-8DBE-08C2E6D2D21C">Example of Creating a Real Application Security Policy on Master-Detail Related Tables</a>&#34;</span> shows examples of creating and using master-detail data realms and creating and applying master-detail data security policies to master-detail tables.</p>
<p><a href="data_security.htm#GUID-B4AF8584-DA48-416D-AD8E-76A8E7466092__CDDJHIIA">Example 5-6</a> shows a sample master detail data realm.</p>
<p>In this specification:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">when_condition</code> specifies a predicate for the detail table, similar to a <code class="codeph">WHERE</code> clause, to filter data. If <code class="codeph">when_condition</code> evaluates to true, then Oracle Database applies the master policy. This element is optional.</p>
</li>
<li>
<p><code class="codeph">parent_schema</code> specifies the name of the schema that contains the master table.</p>
</li>
<li>
<p><code class="codeph">parent_object</code> specifies the name of the master table.</p>
</li>
<li>
<p><code class="codeph">primary_key</code> specifies the primary key from the master table.</p>
</li>
<li>
<p><code class="codeph">foreign_key</code> specifies the foreign key of the detail table.</p>
</li>
</ul>
<div class="example" id="GUID-B4AF8584-DA48-416D-AD8E-76A8E7466092__CDDJHIIA">
<p class="titleinexample">Example 5-6 A Master Detail Data Realm</p>
<pre dir="ltr">  realm_cons :=  XS$REALM_CONSTRAINT_TYPE
                 (parent_schema=&gt; &#39;OE&#39;,
                  parent_object=&gt; &#39;CUSTOMERS&#39;,
                  key_list=&gt; XS$KEY_LIST(XS$KEY_TYPE(primary_key=&gt; &#39;CUSTOMER_ID&#39;,
                                                 foreign_key=&gt; &#39;CUSTOMER_ID&#39;,
                                                 foreign_key_type=&gt; 1)),
                  when_condition=&gt; &#39;ORDER_STATUS IS NOT NULL&#39;)
</pre></div>
<!-- class="example" --></div>
</div>
<a id="DBFSG391"></a><a id="DBFSG99174"></a>
<div class="props_rev_2"><a id="GUID-8C309EBB-F1D6-47A9-8DBE-08C2E6D2D21C"></a>
<h3 id="DBFSG-GUID-8C309EBB-F1D6-47A9-8DBE-08C2E6D2D21C" class="sect3">Example of Creating a Real Application Security Policy on Master-Detail Related Tables</h3>
<div>
<div class="section">
<p>This example uses the <code class="codeph">SH</code> sample schema. The <code class="codeph">SH</code> schema has a table called <code class="codeph">CUSTOMERS</code>, which is the master table. <a id="d18311e3715" class="indexterm-anchor"></a><a id="d18311e3721" class="indexterm-anchor"></a><a id="d18311e3725" class="indexterm-anchor"></a>The master table <code class="codeph">CUSTOMERS</code> has a detail table called <code class="codeph">SALES</code>, and another detail table called <code class="codeph">COUNTRIES</code>. The following example demonstrates how to enforce a Real Application Security policy that virtually partitions the customer and sales data along their regional boundary defined in the <code class="codeph">COUNTRIES</code> table for read access of the <code class="codeph">CUSTOMERS</code> and <code class="codeph">SALES</code> tables. In addition, there is a requirement to mask out data on the columns <code class="codeph">CUST_INCOME_LEVEL</code> and <code class="codeph">CUST_CREDIT_LIMIT</code> to users, except for those users who need full table access for business analysis, such as the business analyst.</p>
<div class="infobox-note" id="GUID-8C309EBB-F1D6-47A9-8DBE-08C2E6D2D21C__GUID-F75FA07C-43B3-4569-9914-90539C67DD53">
<p class="notep1">Note:</p>
<p>All administrative commands in this example can be performed by a database user, such as the <code class="codeph">SYSTEM</code> account who has the <code class="codeph">DBA</code> roles in the database, because the <code class="codeph">DBA</code> role has been granted appropriate privilege for Real Application Security administrative tasks. In addition, because security classes, ACLs, and data security policies are schema qualified objects, you must explicitly use the intended schema name when these objects are specified in the APIs, so they will not be resolved to objects under the database session default schema of <code class="codeph">SYSTEM</code>.</p>
</div>
<p>The descriptions for the three tables, which are all in the same schema (<code class="codeph">SH</code>), are as follows:</p>
<pre dir="ltr">-- SH.CUSTOMERS in the master table.
 Name                                      Null?    Type
 ----------------------------------------- -------- ----------------------------
 CUST_ID                                   NOT NULL NUMBER
 CUST_FIRST_NAME                           NOT NULL VARCHAR2(20)
 CUST_LAST_NAME                            NOT NULL VARCHAR2(40)
 CUST_GENDER                                        CHAR(1)
 CUST_YEAR_OF_BIRTH                                 NUMBER(4)
 CUST_MARITAL_STATUS                                VARCHAR2(20)
 CUST_STREET_ADDRESS                       NOT NULL VARCHAR2(40)
 CUST_POSTAL_CODE                          NOT NULL VARCHAR2(10)
 CUST_CITY                                 NOT NULL VARCHAR2(30)
 CUST_STATE_PROVINCE                                VARCHAR2(40)
 COUNTRY_ID                                NOT NULL CHAR(2)
 CUST_MAIN_PHONE_NUMBER                             VARCHAR2(25)
 CUST_INCOME_LEVEL                                  VARCHAR2(30)
 CUST_CREDIT_LIMIT                                  NUMBER
 CUST_EMAIL                                         VARCHAR2(30)

-- SH.SALES is a detail table.
 Name                                      Null?    Type
 ----------------------------------------- -------- ----------------------------
 PROD_ID                                   NOT NULL NUMBER(6)
 CUST_ID                                   NOT NULL NUMBER
 TIME_ID                                   NOT NULL DATE
 CHANNEL_ID                                NOT NULL CHAR(1)
 PROMO_ID                                  NOT NULL NUMBER(6)
 QUANTITY_SOLD                             NOT NULL NUMBER(3)
 AMOUNT_SOLD                               NOT NULL NUMBER(10,2)

-- SH.COUNTRIES is a detail table.
 Name                                      Null?    Type
 ----------------------------------------- -------- ----------------------------
 COUNTRY_ID                                NOT NULL CHAR(2)
 COUNTRY_NAME                              NOT NULL VARCHAR2(40)
 COUNTRY_SUBREGION                                  VARCHAR2(30)
 COUNTRY_REGION                                     VARCHAR2(20)
</pre>
<p><a href="data_security.htm#GUID-8C309EBB-F1D6-47A9-8DBE-08C2E6D2D21C__CDDDFDJB">Figure 5-2</a> shows an overview of the completed Real Application Security data security policies created and applied to the master-detail related tables (<code class="codeph">CUSTOMERS</code> - <code class="codeph">SALES</code> - <code class="codeph">COUNTRIES</code>) that are described as an overview in the following steps and in more detail in the steps that follow this figure.</p>
<ol>
<li>
<p>Create the principals, an application role and an application user, for each of four geographic regions: Europe, Americas, Asia, and Africa, in addition to a business analyst role and an associated application user.</p>
</li>
<li>
<p>Create the <code class="codeph">VIEW_SENSITIVE_INFO</code> privilege and create the <code class="codeph">SH.CUST_SEC_CLASS</code> in which to scope the privilege.</p>
</li>
<li>
<p>Grant the <code class="codeph">VIEW_SENSITIVE_INFO</code> privilege to the business analyst role.</p>
</li>
<li>
<p>Define a data realm constraint with a rule that parameterizes regions in order for the system to recognize the string <code class="codeph">&amp;REGION</code>, which will later be used in a policy.</p>
</li>
<li>
<p>Create a column constraint to secure the two columns, <code class="codeph">CUST_INCOME_LEVEL</code> and <code class="codeph">CUST_CREDIT_LEVEL</code> using the <code class="codeph">VIEW_SENSITIVE_INFO</code> privilege.</p>
</li>
<li>
<p>Create the data security policy <code class="codeph">SH.CUSTOMER_DS</code> specifying the data realm constraint and the column constraint that was previously created.</p>
</li>
<li>
<p>Register the name and data type of the parameter in the rule for the <code class="codeph">SH.CUSTOMER_DS</code> data security policy.</p>
</li>
<li>
<p>Create the ACLs for each region to authorize read access to the respective roles needing read access. For example for the Europe region, you grant <code class="codeph">SELECT</code> privilege to the <code class="codeph">Europe_sales</code> role and grant <code class="codeph">SELECT</code> and <code class="codeph">VIEW_SENSITIVE_INFO</code> privileges to the <code class="codeph">Business_Analyst</code> role.</p>
</li>
<li>
<p>Associate each ACL in each region with the rows that satisfy the rule where the value of the parameter <code class="codeph">REGION</code> is equal to region name, for example, Europe. You do this for each of the four regions, and then add this ACL to the <code class="codeph">SH.CUSTOMER_DS</code> data security policy.</p>
</li>
<li>
<p>Create the data realm constraint for the master-detail tables, so users can access a record in the <code class="codeph">SALES</code> detail table only if a user is authorized to access its parent row in the <code class="codeph">CUSTOMERS</code> master table.</p>
</li>
<li>
<p>Create the <code class="codeph">SH.SALES_DS</code> data security policy to enforce this data realm constraint.</p>
</li>
</ol>
<p>In <a href="data_security.htm#GUID-8C309EBB-F1D6-47A9-8DBE-08C2E6D2D21C__CDDDFDJB">Figure 5-2</a>, the master-detail tables also show the primary key (PK) fields and foreign key (FK) fields and a number of additional fields that are used in creating the data realm constraints and column constraints. Using these PK and FK relationships, the same data security policies that apply to the master table also apply to the detail tables. In this particular case, for example, all ACLs granting <code class="codeph">SELECT</code> privilege to the <code class="codeph">CUSTOMERS</code> master table and enforced by the <code class="codeph">SH.CUSTOMER_DS</code> data security policy, also applies to the <code class="codeph">SALES</code> detail table.</p>
<div class="figure" id="GUID-8C309EBB-F1D6-47A9-8DBE-08C2E6D2D21C__CDDDFDJB">
<p class="titleinfigure">Figure 5-2 Real Application Security Data Security Policy Created on Master-Detail Related Tables</p>
<img width="668" height="629" src="img/GUID-544E2AE3-3D92-40BE-8B41-B2DF93019D33-default.png" alt="Description of Figure 5-2 follows" title="Description of Figure 5-2 follows"/><br/>
<a href="img_text/GUID-544E2AE3-3D92-40BE-8B41-B2DF93019D33-print.htm">Description of &#34;Figure 5-2 Real Application Security Data Security Policy Created on Master-Detail Related Tables&#34;</a></div>
<!-- class="figure" -->
<p>To create a Real Application Security policy for these master-detail tables, follow these steps:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span>Create the roles and users needed for each country, (role <code class="codeph">Europe_sales</code>, user <code class="codeph">SMITH</code>), (role <code class="codeph">Americas_sales</code>, user <code class="codeph">JAMES</code>), (role <code class="codeph">Asia_sales</code>, user <code class="codeph">MILLER</code>), (role <code class="codeph">Africa_sales</code>, user <code class="codeph">MARTIN</code>), and (role <code class="codeph">Business_Analyst</code>, user <code class="codeph">TURNER</code>), who is the only user who will have full table access.</span>
<div>
<pre dir="ltr">BEGIN
   sys.xs_principal.create_role(name =&gt; &#39;Europe_sales&#39;, enabled =&gt; TRUE);
   sys.xs_principal.create_role(name =&gt; &#39;Americas_sales&#39;, enabled =&gt; TRUE);
   sys.xs_principal.create_role(name =&gt; &#39;Asia_sales&#39;, enabled =&gt; TRUE);
   sys.xs_principal.create_role(name =&gt; &#39;Africa_sales&#39;, enabled =&gt; TRUE);
   sys.xs_principal.create_role(name =&gt; &#39;Business_Analyst&#39;, enabled =&gt; TRUE);
 
   sys.xs_principal.create_user(name =&gt; &#39;SMITH&#39;, schema =&gt; &#39;SH&#39;);
   sys.dbms_xs_principals.set_password(username =&gt; &#39;SMITH&#39;,
                                       password =&gt; &#39;<span class="italic">password</span>&#39;,
                                       type =&gt; XS_PRINCIPAL.XS_SHA512);
   sys.xs_principal.grant_roles(grantee =&gt; &#39;SMITH&#39;, role =&gt; &#39;Europe_sales&#39;);
 
   sys.xs_principal.create_user(name =&gt;&#39; JAMES&#39;, schema =&gt; &#39;SH&#39;);
   sys.dbms_xs_principals.set_password(username =&gt; &#39;JAMES&#39;,
                                       password =&gt; &#39;password&#39;,
                                       type =&gt; XS_PRINCIPAL.XS_SHA512);
   sys.xs_principal.grant_roles(grantee =&gt; &#39;JAMES&#39;, role =&gt; &#39;Americas_sales&#39;);
 
   sys.xs_principal.create_user(name =&gt; &#39;MILLER&#39;, schema =&gt; &#39;SH&#39;);
   sys.dbms_xs_principals.set_password(username =&gt; &#39;MILLER&#39;,
                                       password =&gt; &#39;password&#39;,
                                       type =&gt; XS_PRINCIPAL.XS_SHA512);
   sys.xs_principal.grant_roles(grantee =&gt; &#39;MILLER&#39;, role =&gt; &#39;Asia_sales&#39;);
 
   sys.xs_principal.create_user(name =&gt; &#39;MARTIN&#39;, schema =&gt; &#39;SH&#39;);
   sys.dbms_xs_principals.set_password(username =&gt; &#39;MARTIN&#39;,
                                       password =&gt; &#39;password&#39;,
                                       type =&gt; XS_PRINCIPAL.XS_SHA512);
   sys.xs_principal.grant_roles(grantee =&gt; &#39;MARTIN&#39;, role =&gt; &#39;Africa_sales&#39;);
 
   sys.xs_principal.create_user(name =&gt; &#39;TURNER&#39;, schema=&gt; &#39;SH&#39;);
   sys.dbms_xs_principals.set_password(username =&gt; &#39;TURNER&#39;,
                                       password =&gt; &#39;password&#39;,
                                       type =&gt; XS_PRINCIPAL.XS_SHA512);
   sys.xs_principal.grant_roles(grantee =&gt; &#39;TURNER&#39;, role =&gt; &#39;Business_Analyst&#39;);
END;
</pre></div>
</li>
<li class="stepexpand"><span>Define the <code class="codeph">SH.CUST_SEC_CLASS</code> security class for the privilege, <code class="codeph">VIEW_SENSITIVE_INFO</code> to protect the sensitive columns.</span>
<div>
<p>The row level privileges to access data security protected objects for query and DML are predefined in the Security Class DML under the <code class="codeph">SYS</code> schema.</p>
<pre dir="ltr">DECLARE
  pr_list  XS$PRIVILEGE_LIST;
BEGIN
-- Let&#39;s call the new privilege VIEW_SENSIATIVE_INFO
  pr_list := XS$PRIVILEGE_LIST(XS$PRIVILEGE(name =&gt; &#39;VIEW_SENSITIVE_INFO&#39;));
 
  sys.xs_security_class.create_security_class(
           name =&gt; &#39;SH.CUST_SEC_CLASS&#39;, 
           description =&gt; &#39;Security Class to protect CUSTOMERS and SALES data&#39;,
           parent_list =&gt; XS$NAME_LIST(&#39;SYS.DML&#39;),
           priv_list =&gt; pr_list);
END;
</pre></div>
</li>
<li class="stepexpand" id="GUID-8C309EBB-F1D6-47A9-8DBE-08C2E6D2D21C__CDDDEAGH"><span>Define the data realm constraint with a rule that parameterizes regions, then define the column constraint and specify the name of the two columns, <code class="codeph">CUST_INCOME_LEVEL</code> and <code class="codeph">CUST_CREDIT_LIMIT</code>, to be secured by the <code class="codeph">VIEW_SENSITIVE_INFO</code> privilege. Then, create a <code class="codeph">SH.CUSTOMER_DS</code> data security policy and register the name and data type of the parameter in the rule.</span>
<div>
<p>The security policy requires that regional customers and sales data be partitioned with different ACLs. One way to achieve this is to define as many data realms as regions and do this for both tables. However, in this example, another way is shown. That is, to parameterize the region in a data realm with a single rule and use the master-detail relationship to simplify the administrative tasks.</p>
<p>So, instead of creating many constraints for the policy, it is more efficient to create only one constraint with the following rule that parameterizes the region:</p>
<pre dir="ltr">COUNTRY_ID in
 (select COUNTRY_ID from SH.COUNTRIES where COUNTRY_REGION = &amp;REGION)
</pre>
<p>In order for the system to recognize that the string <code class="codeph">&amp;REGION</code> in the rule is indeed a parameter, you must invoke the <code class="codeph">xs_data_security.create_acl_parameter</code> procedure to register the parameter name after the policy is created. In addition, you must specify the data type of the parameter value. Since regions are stored as character string data, the <code class="codeph">XS_ACL.TYPE_VARCHAR</code> macro is used for this example. Another supported data type is <code class="codeph">XS_ACL.TYPE_NUMBER</code> for numbers.</p>
<pre dir="ltr">DECLARE
  rows_secs XS$REALM_CONSTRAINT_LIST;
  cols_secs XS$COLUMN_CONSTRAINT_LIST;
BEGIN
-- Define the realm constraint with a rule that parameterizes regions.
  rows_secs := xs$REALM_CONSTRAINT_LIST(
          XS$REALM_CONSTRAINT_TYPE(
            realm =&gt; &#39;COUNTRY_ID in (select COUNTRY_ID from SH.COUNTRIES &#39; ||
                     &#39;where COUNTRY_REGION = &amp;&#39; || &#39;REGION)&#39;));
 
-- Define the column constraint to secure CUST_INCOME_LEVEL and
-- CUST_CREDIT_LIMIT columns by using the VIEW_SENSITIVE_INFO privilege.
  cols_secs := XS$COLUMN_CONSTRAINT_LIST(
        XS$COLUMN_CONSTRAINT_TYPE(
          column_list =&gt; XS$LIST(&#39;CUST_INCOME_LEVEL&#39;, &#39;CUST_CREDIT_LIMIT&#39;),
          privilege =&gt; &#39;VIEW_SENSITIVE_INFO&#39;));
 
-- Create the data security policy.
  sys.xs_data_security.create_policy(
          name =&gt; &#39;SH.CUSTOMER_DS&#39;,
          realm_constraint_list =&gt; rows_secs,
          column_constraint_list =&gt; cols_secs,
          description =&gt; &#39;Policy to protect sh.customers table&#39;);
 
-- Register the name and data type of the parameter in the rule.
  sys.xs_data_security.create_acl_parameter(
           policy =&gt; &#39;SH.CUSTOMER_DS&#39;,
           parameter =&gt; &#39;REGION&#39;,
           param_type =&gt; XS_ACL.TYPE_VARCHAR);
END;
</pre></div>
</li>
<li class="stepexpand" id="GUID-8C309EBB-F1D6-47A9-8DBE-08C2E6D2D21C__CDDCEICE"><span>Create ACLs to authorize read access for each region. For the Europe region, grant <code class="codeph">SELECT</code> to the <code class="codeph">Europe_sales</code> role. In addition, <code class="codeph">SELECT</code> and <code class="codeph">VIEW_SENSITIVE_INFO</code> privileges are granted to the <code class="codeph">Business_Analyst</code> role so that the grantee of the role has full table access and is able to see data in the columns of <code class="codeph">CUST_INCOME_LEVEL</code> and <code class="codeph">CUST_CREDIT_LIMIT</code> as well.</span>
<div>
<pre dir="ltr">DECLARE
  ace_list XS$ACE_LIST;
BEGIN
  ace_list := XS$ACE_LIST(
              XS$ACE_TYPE(privilege_list =&gt; XS$NAME_LIST(&#39;SELECT&#39;),
                          granted =&gt; true,
                          principal_name =&gt; &#39;Europe_sales&#39;),
              XS$ACE_TYPE(privilege_list =&gt;
                            XS$NAME_LIST(&#39;SELECT&#39;, &#39;VIEW_SENSITIVE_INFO&#39;),
                          granted =&gt; true,
                          principal_name =&gt; &#39;Business_Analyst&#39;));
 
  sys.xs_acl.create_acl(name =&gt; &#39;View_Europe_sales&#39;,
                  ace_list =&gt; ace_list,
                  sec_class =&gt; &#39;SH.CUST_SEC_CLASS&#39;,
                  description =&gt; &#39;Authorize read access for the Europe region&#39;);
 
-- The ACL must be associated with rows that satisfy the rule where the value
-- of the parameter REGION is equal to Europe. For example the constraint 
-- rule becomes the COUNTRY_ID in 
--  (select COUNTRY_ID from SH.COUNTRIES where COUNTRY_REGION = &#39;Europe&#39;).
 
  sys.xs_acl.add_acl_parameter(acl =&gt; &#39;View_Europe_sales&#39;,
                           policy =&gt; &#39;SH.CUSTOMER_DS&#39;,
                           parameter =&gt; &#39;REGION&#39;,
                           value =&gt; &#39;Europe&#39;);
END;
</pre></div>
</li>
<li class="stepexpand"><span>Create ACLs to authorize read access for the other three regions, Americas, Asia, and Africa.</span>
<div>
<pre dir="ltr">DECLARE
  ace_list XS$ACE_LIST;
BEGIN
  ace_list := XS$ACE_LIST(
              XS$ACE_TYPE(privilege_list =&gt; XS$NAME_LIST(&#39;SELECT&#39;),
                          granted =&gt; true,
                          principal_name =&gt; &#39;Americas_sales&#39;),
              XS$ACE_TYPE(privilege_list =&gt;
                            XS$NAME_LIST(&#39;SELECT&#39;, &#39;VIEW_SENSITIVE_INFO&#39;),
                          granted =&gt; true,
                          principal_name =&gt; &#39;Business_Analyst&#39;));
 
  sys.xs_acl.create_acl(name =&gt; &#39;View_Americas_sales&#39;,
                ace_list =&gt; ace_list,
                sec_class =&gt; &#39;SH.CUST_SEC_CLASS&#39;,
                description =&gt; &#39;Authorize read access for the Americas region&#39;);
 
  sys.xs_acl.add_acl_parameter(acl =&gt; &#39;View_Americas_sales&#39;,
                           policy =&gt; &#39;SH.CUSTOMER_DS&#39;,
                           parameter =&gt; &#39;REGION&#39;,
                           value =&gt; &#39;Americas&#39;);
END;

DECLARE
  ace_list XS$ACE_LIST;
BEGIN
  ace_list := XS$ACE_LIST(
              XS$ACE_TYPE(privilege_list =&gt; XS$NAME_LIST(&#39;SELECT&#39;),
                          granted =&gt; true,
                          principal_name =&gt; &#39;Asia_sales&#39;),
              XS$ACE_TYPE(privilege_list =&gt;
                            XS$NAME_LIST(&#39;SELECT&#39;, &#39;VIEW_SENSITIVE_INFO&#39;),
                          granted =&gt; true,
                          principal_name =&gt; &#39;Business_Analyst&#39;));
 
  sys.xs_acl.create_acl(name =&gt; &#39;View_Asia_sales&#39;,
                ace_list =&gt; ace_list,
                sec_class =&gt; &#39;SH.CUST_SEC_CLASS&#39;,
                description =&gt; &#39;Authorize read access for the Asia region&#39;);
 
  sys.xs_acl.add_acl_parameter(acl =&gt; &#39;View_Asia_sales&#39;,
                           policy =&gt; &#39;SH.CUSTOMER_DS&#39;,
                           parameter =&gt; &#39;REGION&#39;,
                           value =&gt; &#39;Asia&#39;);
END;

DECLARE
  ace_list XS$ACE_LIST;
BEGIN
  ace_list := XS$ACE_LIST(
              XS$ACE_TYPE(privilege_list =&gt; XS$NAME_LIST(&#39;SELECT&#39;),
                          granted =&gt; true,
                          principal_name =&gt; &#39;Africa_sales&#39;),
              XS$ACE_TYPE(privilege_list =&gt;
                            XS$NAME_LIST(&#39;SELECT&#39;, &#39;VIEW_SENSITIVE_INFO&#39;),
                          granted =&gt; true,
                          principal_name =&gt; &#39;Business_Analyst&#39;));
 
  sys.xs_acl.create_acl(name =&gt; &#39;View_Africa_sales&#39;,
                ace_list =&gt; ace_list,
                sec_class =&gt; &#39;SH.CUST_SEC_CLASS&#39;,
                description =&gt; &#39;Authorize read access for the Africa region&#39;);
 
  sys.xs_acl.add_acl_parameter(acl =&gt; &#39;View_Africa_sales&#39;,
                           policy =&gt; &#39;SH.CUSTOMER_DS&#39;,
                           parameter =&gt; &#39;REGION&#39;,
                           value =&gt; &#39;Africa&#39;);
END;
</pre></div>
</li>
<li class="stepexpand" id="GUID-8C309EBB-F1D6-47A9-8DBE-08C2E6D2D21C__CDDFFCEB"><span>Apply the <code class="codeph">SH.CUSTOMER_DS</code> policy created in Step <a href="data_security.htm#GUID-8C309EBB-F1D6-47A9-8DBE-08C2E6D2D21C__CDDDEAGH">3</a> to protect read access to the <code class="codeph">CUSTOMERS</code> table.</span>
<div>
<pre dir="ltr">BEGIN
  sys.xs_data_security.apply_object_policy(
           policy =&gt; &#39;SH.CUSTOMER_DS&#39;,
           schema =&gt; &#39;SH&#39;,
           object =&gt; &#39;CUSTOMERS&#39;,
           statement_types =&gt; &#39;SELECT&#39;,
           owner_bypass =&gt; true);
END;
</pre></div>
</li>
<li class="stepexpand" id="GUID-8C309EBB-F1D6-47A9-8DBE-08C2E6D2D21C__CDDIIAIC"><span>Create the data realm master-detail constraint to protect the <code class="codeph">SALES</code> table. This master-detail constraint utilizes the same regional partitioning policy as previously described in Steps <a href="data_security.htm#GUID-8C309EBB-F1D6-47A9-8DBE-08C2E6D2D21C__CDDDEAGH">3</a> through <a href="data_security.htm#GUID-8C309EBB-F1D6-47A9-8DBE-08C2E6D2D21C__CDDFFCEB">6</a>. This means that a user can access a record in the <code class="codeph">SALES</code> detail table only if that user is authorized to access its parent row in the <code class="codeph">CUSTOMERS</code> master table.</span>
<div>
<pre dir="ltr">DECLARE
  rows_secs XS$REALM_CONSTRAINT_LIST;
BEGIN
-- Define the master-detail constraint.
  rows_secs := xs$REALM_CONSTRAINT_LIST(
    XS$REALM_CONSTRAINT_TYPE(
      parent_schema =&gt; &#39;SH&#39;,
      parent_object =&gt; &#39;CUSTOMERS&#39;,
      key_list =&gt; xs$key_list(xs$key_type(primary_key =&gt; &#39;CUST_ID&#39;,
                                          foreign_key =&gt; &#39;CUST_ID&#39;,
                                          foreign_key_type =&gt; 1))));
 
-- Create a policy to enforce the constraint.
  sys.xs_data_security.create_policy(
         name =&gt; &#39;SH.SALES_DS&#39;,
         realm_constraint_list =&gt; rows_secs,
         column_constraint_list =&gt; null);
 
-- Apply the policy to protect read access of the SALES table.
  sys.xs_data_security.apply_object_policy(
           policy =&gt; &#39;SH.SALES_DS&#39;,
           schema =&gt; &#39;SH&#39;,
           object =&gt; &#39;SALES&#39;,
           statement_types =&gt; &#39;SELECT&#39;,
           owner_bypass =&gt; true);
END;
</pre></div>
</li>
<li class="stepexpand"><span>Grant object level <code class="codeph">SELECT</code> privilege to <code class="codeph">PUBLIC</code> for users to perform a query.</span>
<div>
<pre dir="ltr">GRANT SELECT ON sh.customers TO PUBLIC;
GRANT SELECT ON sh.countries TO PUBLIC;
GRANT SELECT ON sh.sales TO PUBLIC;
</pre></div>
</li>
<li class="stepexpand"><span>Connect as user <code class="codeph">MARTIN</code> and perform a query to display user <code class="codeph">MARTIN</code>&#39;s sales data for the Africa region and to show the masking of the sensitive sales information for the <code class="codeph">CUST_INCOME_LEVEL</code> and <code class="codeph">CUST_CREDIT_LIMIT</code> columns.</span>
<div>
<pre dir="ltr">CONNECT MARTIN/welcome

SELECT c.COUNTRY_NAME, c.COUNTRY_ID, ct.CUST_FIRST_NAME, PROD_ID, QUANTITY_SOLD
 FROM sh.customers ct, sh.sales s, sh.countries c
 WHERE  ct.CUST_ID = s.CUST_ID AND
        ct.COUNTRY_ID = c.COUNTRY_ID;
 
COUNTRY_NAME         CO CUST_FIRST_NAME         PROD_ID QUANTITY_SOLD
-------------------- -- -------------------- ---------- -------------
South Africa         ZA Forrest                    8050             2
South Africa         ZA Mitch                     17505            11
South Africa         ZA Murry                     32785             7
South Africa         ZA Heath                      3585            12
</pre></div>
</li>
</ol>
</div>
</div>
</div>
<a id="DBFSG99175"></a>
<div class="props_rev_3"><a id="GUID-2F86855F-5039-4DC8-848B-8887357A3672"></a>
<h2 id="DBFSG-GUID-2F86855F-5039-4DC8-848B-8887357A3672" class="sect2">About Managing Application Privileges for Data Security Policies</h2>
<div>
<div class="p">This section includes the following topics:
<ul style="list-style-type: disc;">
<li>
<p><a href="data_security.htm#GUID-C713D40B-8D64-41DB-838B-50BEAAAD8888">About Bypassing the Security Checks of a Real Application Security Policy</a></p>
</li>
<li>
<p><a href="data_security.htm#GUID-EE5C9EBE-FB84-4DB8-B78A-FFC7E4592D80">Using the SQL*Plus SET SECUREDCOL Command</a></p>
</li>
</ul>
</div>
</div>
<a id="DBFSG99176"></a>
<div class="props_rev_3"><a id="GUID-C713D40B-8D64-41DB-838B-50BEAAAD8888"></a>
<h3 id="DBFSG-GUID-C713D40B-8D64-41DB-838B-50BEAAAD8888" class="sect3">About Bypassing the Security Checks of a Real Application Security Policy</h3>
<div>
<p>The <a id="d18311e4321" class="indexterm-anchor"></a><a id="d18311e4327" class="indexterm-anchor"></a>following database users can bypass the security checks of a Real Application Security Policy:</p>
<ul style="list-style-type: disc;">
<li>
<p>User <code class="codeph">SYS</code></p>
</li>
<li>
<p>Database users who have the <code class="codeph">EXEMPT ACCESS POLICY</code> system privilege</p>
</li>
<li>
<p>The owner of the object to which the policy is applied.</p>
<p><a id="d18311e4350" class="indexterm-anchor"></a>If the data security policy is applied to an object with the owner bypass specification, the owner of the object may bypass such policy. By default, owner bypass is not allowed.</p>
<p>The object owner also can create another view on the same table and assign this view a different Real Application Security policy.</p>
</li>
</ul>
</div>
</div>
<a id="DBFSG99183"></a><a id="DBFSG99184"></a><a id="DBFSG99185"></a><a id="DBFSG99186"></a><a id="DBFSG99182"></a>
<div class="props_rev_3"><a id="GUID-EE5C9EBE-FB84-4DB8-B78A-FFC7E4592D80"></a>
<h3 id="DBFSG-GUID-EE5C9EBE-FB84-4DB8-B78A-FFC7E4592D80" class="sect3">Using the SQL*Plus SET SECUREDCOL Command</h3>
<div>
<div class="section">
<p>The SQL*Plus <code class="codeph">SET SECUREDCOL</code> command <a id="d18311e4471" class="indexterm-anchor"></a><a id="d18311e4477" class="indexterm-anchor"></a>enables you to customize how secure column values are displayed in SQL*Plus output for users without permission to view a column and for columns with unknown security. You can choose either the default text or specify the text that is displayed. The default is <code class="codeph">OFF</code>.</p>
<p>When column level security is enabled, and <code class="codeph">SET SECUREDCOL</code> is set <code class="codeph">ON</code>, output from SQL*Plus for secured columns or columns of unknown security level is replaced with either your customized text or the default indicators. This only applies to scalar data types. Complex object data output is not affected.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Syntax</p>
</div>
<!-- class="section" -->
<div class="section">
<pre dir="ltr">SET SECUREDCOL {OFF&brvbar;ON} [UNAUTH[ORIZED] text][UNK[NOWN] text]
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Parameters</p>
</div>
<!-- class="section" -->
<div class="section">
<div class="tblformalwide" id="GUID-EE5C9EBE-FB84-4DB8-B78A-FFC7E4592D80__GUID-F0E1BC37-9A79-4617-A0CF-FBF08A00E325">
<table class="cellalignment5210" summary="Shows the parameter descriptions for the SET SECUREDCOL command.">
<thead>
<tr class="cellalignment5199">
<th class="cellalignment5251" id="d18311e4511">Parameter</th>
<th class="cellalignment5252" id="d18311e4514">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5199">
<td class="cellalignment5253" id="d18311e4519" headers="d18311e4511">
<p><code class="codeph">ON</code></p>
</td>
<td class="cellalignment5254" headers="d18311e4519 d18311e4514">
<p>Displays the default indicator asterisks (<code class="codeph">****</code>) in place of column values for users without authorization to view the column, and displays question marks (<code class="codeph">?????</code>) in place of column values where the security level is unknown for the column (when the specific privileges applied to the column are not known). The indicators &#34;<code class="codeph">*</code>&#34; and &#34;<code class="codeph">?</code>&#34; are filled to the defined column length or the column length defined by a current <code class="codeph">COLUMN</code> command.</p>
<p>By default this command will be <code class="codeph">OFF</code>.</p>
</td>
</tr>
<tr class="cellalignment5199">
<td class="cellalignment5253" id="d18311e4547" headers="d18311e4511">
<p><code class="codeph">OFF</code></p>
</td>
<td class="cellalignment5254" headers="d18311e4547 d18311e4514">
<p>Displays null values in place of column values for application users without authorization to view the column, and in place of column values where the security level is unknown for the column.</p>
</td>
</tr>
<tr class="cellalignment5199">
<td class="cellalignment5253" id="d18311e4555" headers="d18311e4511">
<p><code class="codeph">UNAUTH[ORIZED]</code></p>
</td>
<td class="cellalignment5254" headers="d18311e4555 d18311e4514">
<p>Text enables you to specify the text to be displayed in a secured column for application users without authorization to view the column. This text appears instead of the default <code class="codeph">*****</code>.</p>
<p>You can specify any alphanumeric text up to the column length or a maximum of 30 characters. Longer text is truncated. Text containing spaces must be quoted.</p>
</td>
</tr>
<tr class="cellalignment5199">
<td class="cellalignment5253" id="d18311e4568" headers="d18311e4511">
<p><code class="codeph">UNK[NOWN]</code></p>
</td>
<td class="cellalignment5254" headers="d18311e4568 d18311e4514">
<p>Text enables you to specify the text to be displayed in a column of unknown security level (when the specific privileges applied to the column are not known). This text appears instead of the default <code class="codeph">??????</code>.</p>
<p>You can specify any alphanumeric text up to the column length or a maximum of 30 characters. Longer text is truncated. Text containing spaces must be quoted.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Example 1</p>
</div>
<!-- class="section" -->
<div class="section">
<pre dir="ltr">SET SECUREDCOL ON
SELECT empno, ename, sal FROM emp ORDER BY deptno;
</pre>
<p>The output of the example will be as follows:</p>
<pre dir="ltr">EMPNO ENAME   DEPTNO SAL
----- ------ ------ --------
7539 KING     10    ********
7369 SMITH    20    800
7566 JONES    20    2975 
7788 SCOTT    20    3000
7521 WARD     30    ********
7499 ALLEN    30    ********

6 rows selected. 
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Example 2</p>
</div>
<!-- class="section" -->
<div class="section">
<pre dir="ltr">SET SECUREDCOL ON UNAUTH notallowed
SELECT empno, ename, sal FROM emp ORDER BY deptno;
</pre>
<p>The output of the example will be as follows:</p>
<pre dir="ltr">EMPNO ENAME  DEPTNO SAL
----- ------ ------ -------
7539 KING    10    notallowed
7369 SMITH   20    800
7566 JONES   20    2975
7788 SCOTT   20    3000
7521 WARD    30    notallowed
7499 ALLEN   30    notallowed

6 rows selected. 
</pre></div>
<!-- class="section" --></div>
</div>
</div>
<a id="DBFSG434"></a><a id="DBFSG435"></a><a id="DBFSG433"></a>
<div class="props_rev_3"><a id="GUID-81E7B4AE-B04F-415D-BC51-30097C0384A2"></a>
<h2 id="DBFSG-GUID-81E7B4AE-B04F-415D-BC51-30097C0384A2" class="sect2">Using BEQUEATH CURRENT_USER Views</h2>
<div>
<div class="section">
<p>Traditionally, views in Oracle Database use definer&#39;s rights. This means that if you invoke an identity or privilege-sensitive SQL function or an invoker&#39;s rights PL/SQL or Java function, then current schema, and current user, are set to the view owner and currently enabled roles is set to the view owner plus <code class="codeph">PUBLIC</code> within the functions&#39;s execution.</p>
<p>If you need background information on invoker&#39;s rights and definer&#39;s rights, see <a class="olink LNPLS00809" target="_blank" href="../LNPLS/subprograms.htm#LNPLS00809"><span><cite>Oracle Database PL/SQL Language Reference</cite></span></a>.</p>
<div class="infobox-note" id="GUID-81E7B4AE-B04F-415D-BC51-30097C0384A2__GUID-072BDE33-BBA1-4197-B1EB-FEB3FAFFA4E1">
<p class="notep1">Note:</p>
<p>Certain built-in SQL functions, such as <code class="codeph">SYS_CONTEXT()</code> and <code class="codeph">USERENV()</code> are exceptions to the preceding rule. These functions always use the current application user&#39;s environment, even when called from definer&#39;s rights views.</p>
</div>
<p>Oracle Database 12<span class="italic">c</span> Release 1 (12.1) and later enables you to create views with the <code class="codeph">BEQUEATH</code> clause, which lets you configure this behavior. The <code class="codeph">BEQUEATH</code> clause determines whether identity or privilege-sensitive SQL functions, invoker&#39;s rights PL/SQL program units, and Java functions referenced in the view inherit the current schema, current user, and currently enabled roles from the querying user&#39;s environment. This is especially useful for Real Application Security applications, which often need to run code in the invoking application user&#39;s environment.</p>
<p>Using <code class="codeph">BEQUEATH CURRENT_USER</code> in the view definition creates a view that allows privilege-sensitive, and invoker&#39;s rights functions referenced in the view to inherit current schema, current user, and currently enabled roles from the querying user&#39;s environment. See <a class="olink SQLRF01504" target="_blank" href="../SQLRF/statements_8004.htm#SQLRF01504"><span><cite>Oracle Database SQL Language Reference</cite></span></a> for the syntax of the <code class="codeph">CREATE OR REPLACE VIEW</code> statement.</p>
<p><a href="data_security.htm#GUID-81E7B4AE-B04F-415D-BC51-30097C0384A2__BGBFHCJB">Example 5-7</a> illustrates how a <code class="codeph">BEQUEATH CURRENT_USER</code> view enables invoker right&#39;s program units to run in the invoking application user&#39;s environment. When <code class="codeph">USER2</code> selects from <code class="codeph">USER1</code>&#39;s view, the invoker&#39;s rights function is invoked in <code class="codeph">USER2</code>&#39;s environment.</p>
<p>Using <code class="codeph">BEQUEATH DEFINER</code> in the view definition creates a view that causes privilege-sensitive, and invoker&#39;s rights functions referenced in the view to inherit current schema, current user, and currently enabled roles from the view definer&#39;s environment. If no <code class="codeph">BEQUEATH</code> clause is specified, then <code class="codeph">BEQUEATH DEFINER</code> is assumed.</p>
<p>If a <code class="codeph">BEQUEATH_DEFINER</code> view contains a reference to a <code class="codeph">BEQUEATH CURRENT_USER</code> view, then invoker&#39;s rights functions in the referenced view would use the parent view owner&#39;s rights.</p>
<p><a href="data_security.htm#GUID-81E7B4AE-B04F-415D-BC51-30097C0384A2__BGBFIGGB">Example 5-8</a> illustrates how a <code class="codeph">BEQUEATH DEFINER</code> view defines a boundary for nested invoker right&#39;s program units to run in the view owner&#39;s environment. When <code class="codeph">USER2</code> selects from <code class="codeph">USER1</code>&#39;s view, the view&#39;s invoker&#39;s rights function is invoked in <code class="codeph">USER1</code>&#39;s environment.</p>
<div class="infoboxnotealso" id="GUID-81E7B4AE-B04F-415D-BC51-30097C0384A2__GUID-8382E9BF-56E3-4B19-966F-F9F5E8B0C09A">
<p class="notep1">See Also:</p>
<p><a class="olink DBSEG-GUID-EF5300C7-E153-4316-805E-0A87FF2EA676" target="_blank" href="../DBSEG/dr_ir.htm#DBSEG-GUID-EF5300C7-E153-4316-805E-0A87FF2EA676"><span><cite>Oracle Database Security Guide</cite></span></a> for the use of invoker&#39;s rights and definer&#39;s rights in VPD and FGA policies</p>
</div>
</div>
<!-- class="section" -->
<div class="example" id="GUID-81E7B4AE-B04F-415D-BC51-30097C0384A2__BGBFHCJB">
<p class="titleinexample">Example 5-7 How a BEQUEATH CURRENT_USER View Works</p>
<pre dir="ltr">SQL&gt; CONNECT USER1/USER1
Connected.
SQL&gt;
SQL&gt; -- You first create an invoker&#39;s rights function to determine who the current SQL&gt; -- user really is.
SQL&gt; CREATE OR REPLACE FUNCTION CALLED_AS_USER RETURN VARCHAR2 AUTHID CURRENT_USER IS
2 BEGIN
3 RETURN SYS_CONTEXT(&#39;USERENV&#39;, &#39;CURRENT_USER&#39;);
4 END;
5 /
Function created.

SQL&gt; -- Note that you do not need to grant EXECUTE to called_as_user, because even
SQL&gt; -- BEQUEATH CURRENT_USER views do name resolution and privilege checking on 
SQL&gt; -- the references present in the view body using definer&#39;s rights.

SQL&gt; CREATE OR REPLACE VIEW BEQUEATH_INVOKER_VIEW <span class="bold">BEQUEATH CURRENT_USER</span> AS
2 SELECT CALLED_AS_USER FROM DUAL;
View created.

SQL&gt; GRANT SELECT ON BEQUEATH_INVOKER_VIEW TO PUBLIC;
Grant succeeded.

SQL&gt; CONNECT USER2/USER2
Connected.

SQL&gt; SELECT * FROM USER1.BEQUEATH_INVOKER_VIEW;
CALLED_AS_USER
--------------------------------------------------------------------------------
USER2
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-81E7B4AE-B04F-415D-BC51-30097C0384A2__BGBFIGGB">
<p class="titleinexample">Example 5-8 How a BEQUEATH DEFINER View Works</p>
<pre dir="ltr">SQL&gt; CONNECT USER1/USER1
Connected.
SQL&gt;
SQL&gt; -- You first create an invoker&#39;s rights function to determine who the current SQL&gt; -- user really is.
SQL&gt; CREATE OR REPLACE FUNCTION CALLED_AS_USER RETURN VARCHAR2 AUTHID CURRENT_USER IS
2 BEGIN
3 RETURN SYS_CONTEXT(&#39;USERENV&#39;, &#39;CURRENT_USER&#39;);
4 END;
5 /
Function created.

SQL&gt; -- Note that you do not need to grant EXECUTE to called_as_user, because even
SQL&gt; -- BEQUEATH CURRENT_USER views do name resolution and privilege checking on 
SQL&gt; -- the references present in the view body using definer&#39;s rights.

SQL&gt; CREATE OR REPLACE VIEW BEQUEATH_DEFINER_VIEW <span class="bold">BEQUEATH DEFINER</span> AS
2 SELECT CALLED_AS_USER FROM DUAL;
View created.

SQL&gt; GRANT SELECT ON BEQUEATH_DEFINER_VIEW TO PUBLIC;
Grant succeeded.

SQL&gt; CONNECT USER2/USER2
Connected.

SQL&gt; SELECT * FROM USER1.BEQUEATH_DEFINER_VIEW;
CALLED_AS_USER
--------------------------------------------------------------------------------
USER1
</pre></div>
<!-- class="example" -->
<div class="section">This section includes the following topic: <a href="data_security.htm#GUID-0E7D6CB2-5D60-4516-9FFE-989BAEB895CA">Using SQL Functions to Determine the Invoking Application User</a>.</div>
<!-- class="section" --></div>
<a id="DBFSG436"></a>
<div class="props_rev_3"><a id="GUID-0E7D6CB2-5D60-4516-9FFE-989BAEB895CA"></a>
<h3 id="DBFSG-GUID-0E7D6CB2-5D60-4516-9FFE-989BAEB895CA" class="sect3">Using SQL Functions to Determine the Invoking Application User</h3>
<div>
<div class="section">
<p>SQL functions, such as <code class="codeph">SYS_CONTEXT()</code> and <code class="codeph">USERENV()</code>, and <code class="codeph">XS_SYS_CONTEXT()</code>, always return the current application user&#39;s environment, even when called from definer&#39;s rights views. Sometimes, applications need to determine the invoking application user based on the security context (<code class="codeph">BEQUEATH</code> property) of views referenced in the statement.</p>
<p>The following new functions introduced in Oracle Database 12<span class="italic">c</span> Release 1 (12.1) enable you to figure out the invoking application user taking into account the <code class="codeph">BEQUEATH</code> property of views referenced in the statement:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">ORA_INVOKING_USER:</code> Use this function to return the name of the database user whose context is currently used. If the function is invoked from within a definer&#39;s rights boundary, then the name of the database object owner is returned. If the invoking user is a Real Application Security application user, then the constant <code class="codeph">XS$USER</code> is returned.</p>
</li>
<li>
<p><code class="codeph">ORA_INVOKING_USERID:</code> Use this function to return the identifier (ID) of the database user whose context is currently used. If the function is invoked from within a definer&#39;s rights boundary, then the ID of the database object owner is returned.</p>
<p>If the invoking user is a Real Application Security application user, then the function returns an identifier common to all Real Application Security application users, but distinct from the identifier for any database user.</p>
</li>
<li>
<p><code class="codeph">ORA_INVOKING_XS_USER:</code> Use this function to return the name of the Real Application Security application user whose context is currently used.</p>
<p>If the invoking user is a database user, then the value <code class="codeph">NULL</code> is returned.</p>
</li>
<li>
<p><code class="codeph">ORA_INVOKING_XS_USER_GUID:</code> Use this function to return the identifier (ID) of the Real Application Security application user whose context is currently used.</p>
<p>If the invoking user is a database user, then the value <code class="codeph">NULL</code> is returned.</p>
</li>
</ul>
<p>The following example shows a database user <code class="codeph">USER1</code> querying <code class="codeph">ORA_INVOKING_USER</code> and <code class="codeph">ORA_INVOKING_XS_USER.</code> <code class="codeph">ORA_INVOKING_XS_USER</code> returns <code class="codeph">NULL</code>, as the user is not a Real Application security application user.</p>
<pre dir="ltr">SQL&gt; CONNECT USER1
Enter password:
Connected.
SQL&gt; SELECT ORA_INVOKING_USER FROM DUAL;
 
ORA_INVOKING_USER
--------------------------------------------------------------------------------
USER1
 
SQL&gt; SELECT ORA_INVOKING_XS_USER FROM DUAL;
 
ORA_INVOKING_XS_USER
--------------------------------------------------------------------------------
</pre>
<div class="infoboxnotealso" id="GUID-0E7D6CB2-5D60-4516-9FFE-989BAEB895CA__GUID-9EFEF967-5279-4290-84D8-3D2ABAF5C78C">
<p class="notep1">See Also:</p>
<ul style="list-style-type: disc;">
<li>
<p><a class="olink SQLRF06117" target="_blank" href="../SQLRF/functions199.htm#SQLRF06117"><span><cite>Oracle Database SQL Language Reference</cite></span></a> for detailed information on the preceding SQL functions and other functions like <code class="codeph">SYS_CONTEXT</code></p>
</li>
<li>
<p><span class="q">&#34;<a href="plsql_fun.htm#GUID-BC19F7BA-354D-49D2-B9E8-F47B68FCE921">XS_SYS_CONTEXT Function</a>&#34;</span></p>
</li>
</ul>
</div>
</div>
<!-- class="section" --></div>
</div>
</div>
<a id="DBFSG437"></a>
<div class="props_rev_3"><a id="GUID-C6EF75C9-C167-4482-828E-065BD552E0B7"></a>
<h2 id="DBFSG-GUID-C6EF75C9-C167-4482-828E-065BD552E0B7" class="sect2">Real Application Security: Putting It All Together</h2>
<div>
<p>This section puts all the Real Application Security concepts together in order to define a basic data security policy. It builds upon the <code class="codeph">HR</code> scenario example introduced in <span class="q">&#34;<a href="intro.htm#GUID-586753AB-4D90-4196-8D02-CBB2FD7891B0">Scenario: Security Human Resources (HR) Demonstration of Employee Information</a>&#34;</span>.</p>
<p>The section includes the following topic that discusses each implementation task described in the scenario with the help of an example.</p>
<div class="p">This section includes the following topics:
<ul style="list-style-type: disc;">
<li>
<p><a href="data_security.htm#GUID-16B08684-CCEA-472B-B9BD-EBFE8B80602E">Basic HR Scenario: Implementation Tasks</a></p>
</li>
<li>
<p><a href="data_security.htm#GUID-EE972F05-4F5E-4A60-B1F9-B26BA9A60533">Running the Security HR Demo</a></p>
</li>
</ul>
</div>
</div>
<a id="DBFSG438"></a>
<div class="props_rev_3"><a id="GUID-16B08684-CCEA-472B-B9BD-EBFE8B80602E"></a>
<h3 id="DBFSG-GUID-16B08684-CCEA-472B-B9BD-EBFE8B80602E" class="sect3">Basic HR Scenario: Implementation Tasks</h3>
<div>
<div class="p">The following implementation tasks are discussed:
<ul style="list-style-type: disc;">
<li>
<p><a href="data_security.htm#GUID-B0BD62FD-9C05-4382-BE5A-96669D999201">Creating a Database User as the Real Application Security Administrator</a></p>
</li>
<li>
<p><a href="data_security.htm#GUID-E8DC6EA1-D1AB-47E3-A1F9-17E4EE64F0FA">Creating Roles and Application Users</a></p>
</li>
<li>
<p><a href="data_security.htm#GUID-BF7A1CDF-E728-4AF4-B5AE-BC349CA36E6F">Creating the Security Class and ACLS</a></p>
</li>
<li>
<p><a href="data_security.htm#GUID-389095E3-8F07-4C9F-9C57-35C546E242F1">Creating the Data Security Policy</a></p>
</li>
<li>
<p><a href="data_security.htm#GUID-826AAD8C-E182-4CFF-8421-F9FFFC333228">Validating the Real Application Security Objects</a></p>
</li>
<li>
<p><a href="data_security.htm#GUID-EFE8A9C2-9B17-4770-9EDA-CE92F6162B2B">Disabling a Data Security Policy for a Table</a></p>
</li>
</ul>
</div>
</div>
<a id="DBFSG410"></a><a id="DBFSG396"></a>
<div class="props_rev_3"><a id="GUID-B0BD62FD-9C05-4382-BE5A-96669D999201"></a>
<h4 id="DBFSG-GUID-B0BD62FD-9C05-4382-BE5A-96669D999201" class="sect4">Creating a Database User as the Real Application Security Administrator</h4>
<div>
<div class="section">
<p>Before you can create Real Application Security components, you must first create a database user as the Real Application Security Administrator, grant this administrator <code class="codeph">dba</code> and <code class="codeph">xs_session_admin</code> privileges, and then connect to the database as the Real Application Security Administrator.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-B0BD62FD-9C05-4382-BE5A-96669D999201__GUID-74AF35AD-7F50-4428-A67A-C4CCCE9DF7AA">
<p class="titleinexample">Example 5-9 Creating the Database User</p>
<pre dir="ltr">SQL&gt; connect sys/<span class="italic">password</span> as sysdba
Connected.
SQL&gt; grant dba, xs_session_admin to rasadm identified by rasadm;
 
Grant succeeded.
SQL&gt; connect rasadm/<span class="italic">password</span>;
Connected.
</pre></div>
<!-- class="example" --></div>
</div>
<a id="DBFSG427"></a><a id="DBFSG429"></a><a id="DBFSG439"></a><a id="DBFSG441"></a><a id="DBFSG428"></a><a id="DBFSG430"></a><a id="DBFSG431"></a><a id="DBFSG432"></a><a id="DBFSG440"></a><a id="DBFSG442"></a><a id="DBFSG443"></a><a id="DBFSG426"></a>
<div class="props_rev_3"><a id="GUID-E8DC6EA1-D1AB-47E3-A1F9-17E4EE64F0FA"></a>
<h4 id="DBFSG-GUID-E8DC6EA1-D1AB-47E3-A1F9-17E4EE64F0FA" class="sect4">Creating Roles and Application Users</h4>
<div>
<div class="section">
<p class="subhead3">Creating the Database Role</p>
</div>
<!-- class="section" -->
<div class="section">
<p>Create the database role <code class="codeph">DB_EMP</code> and grant this role the necessary table privileges. This role is used to grant the required object privileges to application users.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Creating the Application Roles</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Grant the DB_EMP Database Role to the Application Roles</p>
</div>
<!-- class="section" -->
<div class="section">
<p>Grant the <code class="codeph">DB_EMP</code> database role to the three application roles, so they each have the required object privilege to access the table.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Create the Application Users</p>
</div>
<!-- class="section" -->
<div class="section">
<p>Create application user <code class="codeph">DAUSTIN</code> (in the IT department) and grant this user application roles <code class="codeph">EMP_ROLE</code> and <code class="codeph">IT_ROLE</code>.</p>
<p>In this example:</p>
<div class="infobox-note" id="GUID-E8DC6EA1-D1AB-47E3-A1F9-17E4EE64F0FA__GUID-DC6A7F74-3BA2-4C6C-94FF-6709998CC7A8">
<p class="notep1">Note:</p>
<p>To make logins easier, you can create the name in upper case. That way, the user can omit the quotation marks when logging in or connecting to SQL*Plus. For example:</p>
<pre dir="ltr">sqlplus DAUSTIN
</pre></div>
<div class="infoboxnotealso" id="GUID-E8DC6EA1-D1AB-47E3-A1F9-17E4EE64F0FA__GUID-7B7A094D-D4DC-4BC9-B8F1-3AFE4401F330">
<p class="notep1">See Also:</p>
<p><span class="q">&#34;<a href="users_roles.htm#GUID-7FAC6DD4-6D98-4EBB-A68E-101E1C576D0D">Creating a Simple Application User Account</a>&#34;</span> for information about how case sensitivity affects database logins for application users</p>
</div>
<p>Create application user <code class="codeph">SMAVRIS</code> (in the HR department) and grant this user application roles <code class="codeph">EMP_ROLE</code> and <code class="codeph">HR_ROLE</code>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-E8DC6EA1-D1AB-47E3-A1F9-17E4EE64F0FA__GUID-0E8B29B9-CE0E-41CF-B2EC-5427513A6CD0">
<p class="titleinexample">Example 5-10 Creating the DB_EMP Database User</p>
<pre dir="ltr">SQL&gt; create role db_emp;
 
Role created.
 
SQL&gt; grant select, insert, update, delete on hr.employees to db_emp;
 
Grant succeeded.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-E8DC6EA1-D1AB-47E3-A1F9-17E4EE64F0FA__GUID-284AB98E-CB0B-49E0-86FD-B8F4499D3855">
<p class="titleinexample">Example 5-11 Creating the Application Role EMP_ROLE for Common Employees</p>
<pre dir="ltr">SQL&gt; exec sys.xs_principal.create_role(name =&gt; &#39;emp_role&#39;, enabled =&gt; true);
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-E8DC6EA1-D1AB-47E3-A1F9-17E4EE64F0FA__GUID-C62EF6E9-AD6A-4E10-9D07-3FC848C999DF">
<p class="titleinexample">Example 5-12 Creating the Application Role IT_ROLE for the IT Department</p>
<pre dir="ltr">SQL&gt; exec sys.xs_principal.create_role(name =&gt; &#39;it_role&#39;, enabled =&gt; true);
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-E8DC6EA1-D1AB-47E3-A1F9-17E4EE64F0FA__GUID-C632B1B3-7168-4766-9AA6-FE821CDC85FA">
<p class="titleinexample">Example 5-13 Creating the Application Role HR_ROLE for the HR Department</p>
<pre dir="ltr">SQL&gt; exec sys.xs_principal.create_role(name =&gt; &#39;hr_role&#39;, enabled =&gt; true);
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-E8DC6EA1-D1AB-47E3-A1F9-17E4EE64F0FA__GUID-0550AC4C-3DAA-4C96-B842-D0D748FCD3EF">
<p class="titleinexample">Example 5-14 Granting DB_EMP Database Role to Each Application Role</p>
<pre dir="ltr">SQL&gt; grant db_emp to emp_role;
 
Grant succeeded.
 
SQL&gt; grant db_emp to it_role;
 
Grant succeeded.
 
SQL&gt; grant db_emp to hr_role;
 
Grant succeeded.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-E8DC6EA1-D1AB-47E3-A1F9-17E4EE64F0FA__GUID-EF859CF5-4636-49ED-9AC6-EC8AD1EA02D1">
<p class="titleinexample">Example 5-15 Creating Application User DAUSTIN</p>
<pre dir="ltr">SQL&gt; exec  sys.xs_principal.create_user(name =&gt; &#39;daustin&#39;, schema =&gt; &#39;hr&#39;);
 
PL/SQL procedure successfully completed.
 
SQL&gt; exec  sys.xs_principal.set_password(&#39;daustin&#39;, &#39;<span class="italic">password</span>&#39;);
 
PL/SQL procedure successfully completed.
 
SQL&gt; exec  sys.xs_principal.grant_roles(&#39;daustin&#39;, &#39;emp_role&#39;);
 
PL/SQL procedure successfully completed.
 
SQL&gt; exec  sys.xs_principal.grant_roles(&#39;daustin&#39;, &#39;it_role&#39;);
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-E8DC6EA1-D1AB-47E3-A1F9-17E4EE64F0FA__GUID-F25454B4-FFFB-4725-9783-CF5508C86425">
<p class="titleinexample">Example 5-16 Creating Application User SMAVRIS</p>
<pre dir="ltr">SQL&gt; exec  sys.xs_principal.create_user(name =&gt; &#39;smavris&#39;, schema =&gt; &#39;hr&#39;);
 
PL/SQL procedure successfully completed.
 
SQL&gt; exec  sys.xs_principal.set_password(&#39;smavris&#39;, &#39;<span class="italic">password</span>&#39;);
 
PL/SQL procedure successfully completed.
 
SQL&gt; exec  sys.xs_principal.grant_roles(&#39;smavris&#39;, &#39;emp_role&#39;);
 
PL/SQL procedure successfully completed.
 
SQL&gt; exec  sys.xs_principal.grant_roles(&#39;smavris&#39;, &#39;hr_role&#39;);
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" --></div>
</div>
<a id="DBFSG445"></a><a id="DBFSG447"></a><a id="DBFSG446"></a><a id="DBFSG448"></a><a id="DBFSG444"></a>
<div class="props_rev_3"><a id="GUID-BF7A1CDF-E728-4AF4-B5AE-BC349CA36E6F"></a>
<h4 id="DBFSG-GUID-BF7A1CDF-E728-4AF4-B5AE-BC349CA36E6F" class="sect4">Creating the Security Class and ACLS</h4>
<div>
<div class="section">
<p class="subhead3">Creating the Security Class</p>
</div>
<!-- class="section" -->
<div class="section">
<p>Create a security class <code class="codeph">HRPRIVS</code> based on the predefined DML security class. <code class="codeph">HRPRIVS</code> has a new privilege <code class="codeph">VIEW_SALARY</code>, which controls access to the <code class="codeph">SALARY</code> column.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Creating the ACls</p>
</div>
<!-- class="section" -->
<div class="section">
<p>Create three ACLs, <code class="codeph">EMP_ACL</code>, <code class="codeph">IT_ACL</code>, and <code class="codeph">HR_ACL</code> to grant privileges for the data security policy to be defined later.</p>
<p>In this example:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold">Lines 11 through 13:</span> Creates the <code class="codeph">EMP_ACL</code> and grants <code class="codeph">EMP_ROLE</code> the <code class="codeph">SELECT</code> and <code class="codeph">VIEW_SALARY</code> privileges.</p>
</li>
<li>
<p><span class="bold">Lines 21 through 23:</span> Creates the <code class="codeph">IT_ACL</code> and grants <code class="codeph">IT_ROLE</code> the <code class="codeph">SELECT</code> privileges.</p>
</li>
<li>
<p><span class="bold">Lines 30 through 32:</span> Creates the <code class="codeph">HR_ACL</code> and grants <code class="codeph">HR_ROLE</code> the <code class="codeph">ALL</code> privileges. The <code class="codeph">ALL</code> privilege means all the privileges in the ACL&#39;s security class. In this case, <code class="codeph">ALL</code> privileges includes <code class="codeph">SELECT</code>, <code class="codeph">INSERT</code>, <code class="codeph">UPDATE</code>, and <code class="codeph">DELETE</code> database privileges to view and update all employee&#39;s records, and granting the <code class="codeph">VIEW_SALARY</code> application privilege to view the <code class="codeph">SALARY</code> column.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="example" id="GUID-BF7A1CDF-E728-4AF4-B5AE-BC349CA36E6F__GUID-B39EA2E9-9BEF-4A97-9870-246C38AE1B0C">
<p class="titleinexample">Example 5-17 Creating the HRPRIVS Security Class</p>
<pre dir="ltr">SQL&gt; declare
  2  begin
  3    xs_security_class.create_security_class(
  4      name        =&gt; &#39;hrprivs&#39;,
  5      parent_list =&gt; xs$name_list(&#39;sys.dml&#39;),
  6      priv_list   =&gt; xs$privilege_list(xs$privilege(&#39;view_salary&#39;)));
  7  end;
  8  /
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-BF7A1CDF-E728-4AF4-B5AE-BC349CA36E6F__GUID-2FB6CCBA-8A2E-4494-8073-BD5030BB1E3D">
<p class="titleinexample">Example 5-18 Creating ACLs: EMP_ACL, IT_ACL, and HR_ACL</p>
<pre dir="ltr">SQL&gt; declare
  2    aces xs$ace_list := xs$ace_list();
  3  begin
  4    aces.extend(1);
  5  
  6    -- EMP_ACL: This ACL grants EMP_ROLE the privileges to view an employee&#39;s
  7    --          own record including SALARY column.
  8    aces(1) := xs$ace_type(privilege_list =&gt; xs$name_list(&#39;select&#39;,&#39;view_salary&#39;),
  9                           principal_name =&gt; &#39;emp_role&#39;);
 10  
 11    sys.xs_acl.create_acl(name      =&gt; &#39;emp_acl&#39;,
 12                      ace_list  =&gt; aces,
 13                      sec_class =&gt; &#39;hrprivs&#39;);
 14  
 15    -- IT_ACL:  This ACL grants IT_ROLE the privilege to view the employee
 16    --          records in IT department, but it does not grant the VIEW_SALARY
 17    --          privilege that is required for access to SALARY column.
 18    aces(1) := xs$ace_type(privilege_list =&gt; xs$name_list(&#39;select&#39;),
 19                           principal_name =&gt; &#39;it_role&#39;);
 20  
 21    sys.xs_acl.create_acl(name      =&gt; &#39;it_acl&#39;,
 22                      ace_list  =&gt; aces,
 23                      sec_class =&gt; &#39;hrprivs&#39;);
 24  
 25    -- HR_ACL:  This ACL grants HR_ROLE the privileges to view and update all
 26    --          employees&#39; records including SALARY column.
 27    aces(1):= xs$ace_type(privilege_list =&gt; xs$name_list(&#39;all&#39;),
 28                          principal_name =&gt; &#39;hr_role&#39;);
 29  
 30    sys.xs_acl.create_acl(name      =&gt; &#39;hr_acl&#39;,
 31                      ace_list  =&gt; aces,
 32                      sec_class =&gt; &#39;hrprivs&#39;);
 33  end;
 34  /
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" --></div>
</div>
<a id="DBFSG451"></a><a id="DBFSG450"></a><a id="DBFSG452"></a><a id="DBFSG449"></a>
<div class="props_rev_3"><a id="GUID-389095E3-8F07-4C9F-9C57-35C546E242F1"></a>
<h4 id="DBFSG-GUID-389095E3-8F07-4C9F-9C57-35C546E242F1" class="sect4">Creating the Data Security Policy</h4>
<div>
<div class="section">
<p>Create the data security policy for the <code class="codeph">EMPLOYEES</code> table. The policy defines three data realm constraints and a column constraint that protects the <code class="codeph">SALARY</code> column.</p>
<p>In this example:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><span class="bold">Lines 7 through 23</span>: Defines the three data realm constraints.</p>
</li>
<li>
<p><span class="bold">Lines 27 through 30:</span> Defines the column constraint requiring the <code class="codeph">VIEW_SALARY</code> application privilege to view the <code class="codeph">SALARY</code> column.</p>
</li>
<li>
<p><span class="bold">Lines 32 through 35:</span> Creates the <span class="bold">EMPLOYEES_DS</span> data security policy encompassing the three data realm constraints and the column constraint.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Applying the Data Security Policy to the Table</p>
</div>
<!-- class="section" -->
<div class="section">
<p>Apply the data security policy to the <code class="codeph">EMPLOYEES</code> table.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-389095E3-8F07-4C9F-9C57-35C546E242F1__CDDIEHFH">
<p class="titleinexample">Example 5-19 Creating the EMPLOYEES_DS Data Security Policy</p>
<pre dir="ltr">SQL&gt; declare
  2    realms   xs$realm_constraint_list := xs$realm_constraint_list();
  3    cols     xs$column_constraint_list := xs$column_constraint_list();
  4  begin
  5    realms.extend(3);
  6  
  7    -- Realm #1: Only the employee&#39;s own record.
  8    --           EMP_ROLE can view the realm including SALARY column.
  9    realms(1) := xs$realm_constraint_type(
 10      realm    =&gt; &#39;email = xs_sys_context(&#39;&#39;xs$session&#39;&#39;,&#39;&#39;username&#39;&#39;)&#39;,
 11      acl_list =&gt; xs$name_list(&#39;emp_acl&#39;));
 12  
 13    -- Realm #2: The records in the IT department.
 14    --           IT_ROLE can view the realm excluding SALARY column.
 15    realms(2) := xs$realm_constraint_type(
 16      realm    =&gt; &#39;department_id = 60&#39;,
 17      acl_list =&gt; xs$name_list(&#39;it_acl&#39;));
 18  
 19    -- Realm #3: All the records.
 20    --           HR_ROLE can view and update the realm including SALARY column.
 21    realms(3) := xs$realm_constraint_type(
 22      realm    =&gt; &#39;1 = 1&#39;,
 23      acl_list =&gt; xs$name_list(&#39;hr_acl&#39;));
 24  
 25    -- Column constraint protects SALARY column by requiring VIEW_SALARY
 26    -- privilege.
 27    cols.extend(1);
 28    cols(1) := xs$column_constraint_type(
 29      column_list =&gt; xs$list(&#39;salary&#39;),
 30      privilege   =&gt; &#39;view_salary&#39;);
 31  
 32    sys.xs_data_security.create_policy(
 33      name                   =&gt; &#39;employees_ds&#39;,
 34      realm_constraint_list  =&gt; realms,
 35      column_constraint_list =&gt; cols);
 36  end;
 37  /
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-389095E3-8F07-4C9F-9C57-35C546E242F1__GUID-B91D008F-5A3A-410A-8C29-345063C6206A">
<p class="titleinexample">Example 5-20 Applying the EMPLOYEES_DS Security Policy to the EMPLOYEES Table</p>
<pre dir="ltr">SQL&gt; begin
  2    sys.xs_data_security.apply_object_policy(
  3      policy =&gt; &#39;employees_ds&#39;,
  4      schema =&gt; &#39;hr&#39;,
  5      object =&gt;&#39;employees&#39;);
  6  end;
  7  /
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" --></div>
</div>
<a id="DBFSG454"></a><a id="DBFSG453"></a>
<div class="props_rev_3"><a id="GUID-826AAD8C-E182-4CFF-8421-F9FFFC333228"></a>
<h4 id="DBFSG-GUID-826AAD8C-E182-4CFF-8421-F9FFFC333228" class="sect4">Validating the Real Application Security Objects</h4>
<div>
<div class="section">
<p>After you create these Real Application Security objects, validate them to ensure they are all properly configured.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-826AAD8C-E182-4CFF-8421-F9FFFC333228__GUID-49A2A0CB-22FC-458B-A97D-151968DAB7CC">
<p class="titleinexample">Example 5-21 Validating the Real Application Security Objects</p>
<pre dir="ltr">SQL&gt; set serveroutput on;
SQL&gt; begin
  2    if (xs_diag.validate_workspace()) then
  3      dbms_output.put_line(&#39;All configurations are correct.&#39;);
  4    else
  5      dbms_output.put_line(&#39;Some configurations are incorrect.&#39;);
  6    end if;
  7  end;
  8  /
All configurations are correct.
 
PL/SQL procedure successfully completed.
 
SQL&gt; -- XS$VALIDATION_TABLE contains validation errors if any.
SQL&gt; -- Expect no rows selected.
SQL&gt; select * from xs$validation_table order by 1, 2, 3, 4;
 
no rows selected
</pre></div>
<!-- class="example" --></div>
</div>
<a id="DBFSG461"></a><a id="DBFSG458"></a>
<div class="props_rev_3"><a id="GUID-EFE8A9C2-9B17-4770-9EDA-CE92F6162B2B"></a>
<h4 id="DBFSG-GUID-EFE8A9C2-9B17-4770-9EDA-CE92F6162B2B" class="sect4">Disabling a Data Security Policy for a Table</h4>
<div>
<div class="section">
<p><a href="data_security.htm#GUID-EFE8A9C2-9B17-4770-9EDA-CE92F6162B2B__CDDJIDCG">Example 5-22</a> shows the complementary operation of <a id="d18311e6321" class="indexterm-anchor"></a>disabling data security for table <code class="codeph">HR.EMPLOYEES</code>.</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-EFE8A9C2-9B17-4770-9EDA-CE92F6162B2B__CDDJIDCG">
<p class="titleinexample">Example 5-22 Disabling a Data Security Policy for a Table</p>
<pre dir="ltr">BEGIN
  SYS.XS_DATA_SECURITY.DISABLE_OBJECT_POLICY(policy =&gt; &#39;EMPLOYEES_DS&#39;, schema =&gt; &#39;HR&#39;, object =&gt; &#39;EMPLOYEES&#39;);
END;
/
</pre></div>
<!-- class="example" --></div>
</div>
</div>
<a id="DBFSG455"></a>
<div class="props_rev_3"><a id="GUID-EE972F05-4F5E-4A60-B1F9-B26BA9A60533"></a>
<h3 id="DBFSG-GUID-EE972F05-4F5E-4A60-B1F9-B26BA9A60533" class="sect3">Running the Security HR Demo</h3>
<div>
<div class="section">
<p>The Security HR Demo is run in two ways:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>Using direct logon first as application user <code class="codeph">DAUSTIN</code> and later as application user <code class="codeph">SMAVRIS</code>.</p>
<p>In each case, each user performs queries on the <code class="codeph">HR.EMPLOYEES</code> table to demonstrate what each can access or cannot access to view employee records and the <code class="codeph">SALARY</code> column. See <span class="q">&#34;<a href="security_hr_demo_tutorial.htm#GUID-FA992EC6-83D5-4465-86D8-334EAA195C41">Running the Security HR Demo Using Direct Logon</a>&#34;</span> for a description of this demonstration.</p>
</li>
<li>
<p>Attached to a Real Application Security session</p>
<p>In this demonstration, the Real Application Security Administrator creates a Real Application Security session for an application user to attach to. See <span class="q">&#34;<a href="security_hr_demo_tutorial.htm#GUID-158CF5F1-BF4C-46C3-9C99-B2686C340F7A">Running the Security HR Demo Attached to a Real Application Security Session</a>&#34;</span> for a description of this demonstration.</p>
</li>
</ul>
</div>
<!-- class="section" --></div>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment5198">
<tr>
<td class="cellalignment5287">
<table class="cellalignment5203">
<tr>
<td class="cellalignment5202"><a href="acls_sec_classes.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5202"><a href="midtierjava.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2012, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment5289">
<table class="cellalignment5201">
<tr>
<td class="cellalignment5202"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5202"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5202"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5202"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5202"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5202"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>