<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-107479"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Data%20Availability%20and%20Integrity"></a><title>Data Availability and Integrity</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 726"/>
<meta name="dcterms.created" content="2014-06-06T13:40:25Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="TimesTen Application-Tier Database Cache Introduction"/>
<meta name="dcterms.identifier" content="E21631-06"/>
<meta name="dcterms.isVersionOf" content="TTCIN"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2012, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="query.htm" title="Previous" type="text/html"/>
<link rel="Next" href="event.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E21631-06.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">10/14</span> <!-- End Header -->
<div id="TTCIN196" class="chapter"><a id="CHDDEEGE"></a>
<h1 class="chapter"><span class="secnum">6</span> Data Availability and Integrity</h1>
<p>TimesTen and TimesTen Cache ensure the availability, durability, and integrity of data through the following mechanisms:</p>
<ul>
<li>
<p><a href="#CHDGGIFA">Transaction logging</a></p>
</li>
<li>
<p><a href="#CHDEBFFH">Checkpointing</a></p>
</li>
<li>
<p><a href="#CHDJFEHJ">Replication</a></p>
</li>
</ul>
<a id="CHDGGIFA"></a>
<div id="TTCIN197" class="sect1">
<h2 class="sect1">Transaction logging<a id="sthref138"></a><a id="sthref139"></a><a id="sthref140"></a></h2>
<p>The TimesTen or TimesTen Cache transaction log is used for the following purposes:</p>
<ul>
<li>
<p>Redo transactions if a system failure occurs</p>
</li>
<li>
<p>Undo transactions that are rolled back</p>
</li>
<li>
<p>Replicate changes to other TimesTen databases or TimesTen Cache databases</p>
</li>
<li>
<p>Replicate changes to an Oracle database</p>
</li>
<li>
<p>Enable applications to monitor changes to tables through the XLA interface</p>
</li>
</ul>
<p>The transaction log is stored in files on disk. The end of the transaction log resides in an in-memory buffer.</p>
<div id="TTCIN198" class="sect2"><a id="sthref141"></a>
<h3 class="sect2">Writing the log buffer to disk<a id="sthref142"></a><a id="sthref143"></a></h3>
<p>TimesTen and TimesTen Cache write the contents of the in-memory log buffer to transaction log files on disk at every durable commit, at every checkpoint, and at other times defined by the implementation. Applications that cannot tolerate the loss of any committed transactions if a failure occurs should request a durable commit for every transaction that is not read-only. They can do so by setting the <code>DurableCommits</code> general connection attribute to 1 when they connect to the database.</p>
<p>Applications that can tolerate the loss of some recently committed transactions can significantly improve their performance by committing some or all of their transactions nondurably. To do so, they set the <code>DurableCommits</code> general connection attribute to 0 (the default) and typically request explicit durable commits either at regular time intervals or at specific points in their application logic. To request a durable commit, applications call the <code>ttDurableCommit</code> built-in procedure.</p>
</div>
<!-- class="sect2" -->
<a id="CHDBJADJ"></a>
<div id="TTCIN199" class="sect2">
<h3 class="sect2">When are transaction log files deleted?<a id="sthref144"></a></h3>
<p>Transaction log files are kept until TimesTen or the TimesTen Cache declares them to be purgeable. A transaction log file cannot be purged until all of the following actions have been completed:</p>
<ul>
<li>
<p>All transactions writing log records to the transaction log file (or a previous transaction log file) have committed or rolled back.</p>
</li>
<li>
<p>All changes recorded in the transaction log file have been written to the checkpoint files.</p>
</li>
<li>
<p>All changes recorded in the transaction log file have been replicated (if replication is used).</p>
</li>
<li>
<p>All changes recorded in the transaction log file have been propagated to the Oracle database if the TimesTen Cache has been configured for that behavior.</p>
</li>
<li>
<p>All changes recorded in transaction log files have been reported to the XLA applications (if XLA is used).</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="TTCIN200" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref145"></a>
<h3 class="sect2">TimesTen commits<a id="sthref146"></a></h3>
<p>ODBC provides an autocommit mode that forces a commit after each statement. By default, autocommit is enabled so that an implicit commit is issued immediately after a statement executes successfully. TimesTen recommends that you turn autocommit off so that commits are intentional.</p>
<p>TimesTen issues an implicit commit before and after any data definition language (DDL) statement by default. This behavior is controlled by the <code>DDLCommitBehavior</code> general connection attribute. You can use the attribute to specify instead that DDL statements be executed as part of the current transaction and committed or rolled back along with the rest of the transaction.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDEBFFH"></a>
<div id="TTCIN201" class="sect1">
<h2 class="sect1">Checkpointing</h2>
<p>Checkpoints are used to keep a snapshot of the database. If a system failure occurs, TimesTen and the TimesTen Cache can use a checkpoint file with transaction log files to restore a database to its last transactionally consistent state.</p>
<p>Only the data that has changed since the last checkpoint operation is written to the checkpoint file. The checkpoint operation scans the database for blocks that have changed since the last checkpoint. It then updates the checkpoint file with the changes and removes any transaction log files that are no longer needed.</p>
<p>TimesTen and TimesTen Cache provide two kinds of checkpoints:</p>
<ul>
<li>
<p><a href="#CHDHGIJJ">Nonblocking checkpoints</a></p>
</li>
<li>
<p><a href="#CHDFHGJI">Blocking checkpoints</a></p>
</li>
</ul>
<p>TimesTen and TimesTen Cache create nonblocking checkpoints automatically.</p>
<a id="CHDHGIJJ"></a>
<div id="TTCIN202" class="sect2">
<h3 class="sect2">Nonblocking checkpoints<a id="sthref147"></a><a id="sthref148"></a></h3>
<p>TimesTen and TimesTen Cache initiate nonblocking checkpoints in the background automatically. Nonblocking checkpoints are also known as <span class="italic">fuzzy</span> checkpoints. The frequency of these checkpoints can be adjusted by the application. Nonblocking checkpoints do not require any locks on the database, so multiple applications can asynchronously commit or roll back transactions on the same database while the checkpoint operation is in progress.</p>
</div>
<!-- class="sect2" -->
<a id="CHDFHGJI"></a>
<div id="TTCIN203" class="sect2">
<h3 class="sect2">Blocking checkpoints<a id="sthref149"></a></h3>
<p>An application can call the <code>ttCkptBlocking</code> built-in procedure to initiate a blocking checkpoint in order to construct a transaction-consistent checkpoint. While a blocking checkpoint operation is in progress, any other new transactions are put in a queue behind the checkpointing transaction. If any transaction is long-running, it may cause many other transactions to be held up. No log is needed to recover from a blocking checkpoint because the checkpoint record contains the information needed to recover.</p>
</div>
<!-- class="sect2" -->
<div id="TTCIN204" class="sect2"><a id="sthref150"></a>
<h3 class="sect2">Recovery from log and checkpoint files<a id="sthref151"></a><a id="sthref152"></a></h3>
<p>If a database becomes invalid or corrupted by a system or process failure, every connection to the database is invalidated. When an application reconnects to a failed database, the subdaemon allocates a new memory segment for the database and recovers its data from the checkpoint and transaction log files.</p>
<p>During recovery, the latest checkpoint file is read into memory. All transactions that have been committed since the last checkpoint and whose log records are on disk are rolled forward from the appropriate transaction log files. Note that such transactions include all transactions that were committed durably as well as all transactions whose log records aged out of the in-memory log buffer. Uncommitted or rolled-back transactions are not recovered.</p>
<p>For applications that require uninterrupted access to TimesTen data in the event of failures, see <a href="#CHDJFEHJ">&#34;Replication&#34;</a>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDJFEHJ"></a>
<div id="TTCIN205" class="sect1">
<h2 class="sect1">Replicatio<a id="sthref153"></a><a id="sthref154"></a><a id="sthref155"></a>n</h2>
<p>The fundamental motivation behind replication is to make data highly available to applications with minimal performance impact. In addition to its role in failure recovery, replication is also useful for distributing application workloads across multiple databases for maximum performance and for facilitating online upgrades and maintenance.</p>
<p>Replication is the process of copying data from a <span class="italic">master</span> database to a <span class="italic">subscriber</span> database. Replication at each master and subscriber database is controlled by <span class="italic">replication</span> <span class="italic">agents</span> that communicate through TCP/IP stream sockets. The replication agent on the master database reads the records from the transaction log for the master database. It forwards changes to replicated elements to the replication agent on the subscriber database. The replication agent on the subscriber then applies the updates to its database. If the subscriber agent is not running when the updates are forwarded by the master, the master retains the updates in its transaction log until they can be applied at the subscriber.</p>
<p>You can increase replication throughput by configuring <a id="sthref156"></a><a id="sthref157"></a><a id="sthref158"></a>parallel replication at database creation time. Parallel replication is enabled by default. You configure the number of threads for applying updates to subscribers. The updates are transmitted in commit order.</p>
<p>TimesTen recommends the active standby pair configuration for highest availability. It is the only replication configuration that you can use for replicating TimesTen Cache.</p>
<p>The rest of this section includes the following topics:</p>
<ul>
<li>
<p><a href="#CHDBCCBH">Active standby pair</a></p>
</li>
<li>
<p><a href="#CHDHEHGE">Classic replication configurations</a></p>
</li>
<li>
<p><a href="#CHDFIGDB">Asynchronous and return service replication</a></p>
</li>
<li>
<p><a href="#CHDFACAI">Replication failover and recovery</a></p>
</li>
<li>
<p><a href="#CDDEBDGA">Automatic client failover for active standby pair replication</a></p>
</li>
</ul>
<a id="CHDBCCBH"></a>
<div id="TTCIN206" class="sect2">
<h3 class="sect2">Active standby pair<a id="sthref159"></a></h3>
<p>An active standby pair includes an active database, a standby database, optional read-only subscriber databases, and the tables and cache groups that comprise the databases. <a href="#CHDGJIGA">Figure 6-1</a> shows an active standby pair.</p>
<div id="TTCIN207" class="figure">
<p class="titleinfigure"><a id="CHDGJIGA"></a>Figure 6-1 Active standby pair</p>
<img width="209" height="369" src="img/activestandby.gif" alt="Description of Figure 6-1 follows"/><br/>
<a id="sthref160" href="img_text/activestandby.htm">Description of &#34;Figure 6-1 Active standby pair&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>In an active standby pair, two databases are defined as masters. One is an active database, and the other is a standby database. The active database is updated directly. The standby database cannot be updated directly. It receives the updates from the active database and propagates the changes to read-only subscribers. This arrangement ensures that the standby database is always ahead of the read-only subscribers and enables rapid failover to the standby database if the active database fails.</p>
<p>Only one of the master databases can function as an active database at a specific time. If the active database fails, the role of the standby database must be changed to active before recovering the failed database as a standby database. The replication agent must be started on the new standby database.</p>
<p>If the standby database fails, the active database replicates changes directly to the read-only subscribers. After the standby database has recovered, it contacts the active database to receive any updates that have been sent to the read-only subscribers while the standby was down or was recovering. When the active and the standby databases have been synchronized, then the standby resumes propagating changes to the subscribers.</p>
<p>Active standby replication can be used with TimesTen Cache to achieve cross-tier high availability. Active standby replication is available for both read-only and asynchronous writethrough cache groups. When used with read-only cache groups, updates are sent from the Oracle database to the active database. Thus, the Oracle database plays the role of the application in this configuration. When used with asynchronous writethrough cache groups, the standby database propagates updates that it receives from the active database to the Oracle database. In this scenario, the Oracle database plays the role of one of the read-only subscribers.</p>
<p>An active standby pair that replicates one of these types of cache groups can perform failover and recovery automatically with minimal chance of data loss. See <a class="olink TTREP232" href="../TTREP/standbycache.htm#TTREP232">&#34;Active standby pairs with cache groups&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span>.</p>
</div>
<!-- class="sect2" -->
<a id="CHDHEHGE"></a>
<div id="TTCIN208" class="sect2">
<h3 class="sect2"><a id="sthref161"></a><a id="sthref162"></a>Classic replication configurations</h3>
<p>TimesTen replication architecture is flexible enough to achieve balance between performance and availability. In general, classic replication can be configured to be unidirectional from a master to one or more subscribers, or bidirectional between two or more databases that serve as both master and subscriber.</p>
<div id="TTCIN209" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref163"></a>
<h4 class="sect3">Unidirectional replication<a id="sthref164"></a></h4>
<p><a href="#CHDFGEAE">Figure 6-2</a> shows a <span class="italic">unidirectional</span> replication scheme. The application is configured on both hosts so that the subscriber is ready to take over if the master host fails. While the master is up, updates from the application to the master database are replicated to the subscriber database. The application on the subscriber host does not execute any updates against the subscriber database, but may read from that database. If the master fails, the application on the subscriber host takes over the update function and starts updating the subscriber database.</p>
<div id="TTCIN211" class="figure">
<p class="titleinfigure"><a id="CHDFGEAE"></a>Figure 6-2 Unidirectional replication scheme</p>
<img width="197" height="190" src="img/uni_rep.gif" alt="Description of Figure 6-2 follows"/><br/>
<a id="sthref165" href="img_text/uni_rep.htm">Description of &#34;Figure 6-2 Unidirectional replication scheme&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>Replication <a id="sthref166"></a>can also be used to copy updates from a master database to many subscriber databases. <a href="#CHDDAJCJ">Figure 6-3</a> shows a replication scheme with multiple subscribers.</p>
<div id="TTCIN212" class="figure">
<p class="titleinfigure"><a id="CHDDAJCJ"></a>Figure 6-3 Unidirectional replication to multiple subscribers</p>
<img width="318" height="210" src="img/rep_multi.gif" alt="Description of Figure 6-3 follows"/><br/>
<a id="sthref167" href="img_text/rep_multi.htm">Description of &#34;Figure 6-3 Unidirectional replication to multiple subscribers&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p><a href="#CHDDGCBC">Figure 6-4</a> shows a <a id="sthref168"></a><span class="italic">propagation</span> configuration. One master propagates updates to three subscribers. The subscribers are also masters that propagate updates to additional subscribers.</p>
<div id="TTCIN213" class="figure">
<p class="titleinfigure"><a id="CHDDGCBC"></a>Figure 6-4 Propagation configuration</p>
<img width="418" height="250" src="img/propagationtree.gif" alt="Description of Figure 6-4 follows"/><br/>
<a id="sthref169" href="img_text/propagationtree.htm">Description of &#34;Figure 6-4 Propagation configuration&#34;</a><br/>
<br/></div>
<!-- class="figure" --></div>
<!-- class="sect3" -->
<div id="TTCIN214" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref170"></a>
<h4 class="sect3">Bidirectional replication<a id="sthref171"></a></h4>
<p>Bidirectional replication schemes are used for load balancing. The workload can be split between two bidirectionally replicated databases. There are two basic types of load-balancing configurations:</p>
<ul>
<li>
<p><span class="italic">Split workload</span> where <a id="sthref172"></a>each database bidirectionally replicates a portion of its data to the other database. <a href="#CHDFFAJB">Figure 6-5</a> shows a split workload configuration.</p>
</li>
<li>
<p><span class="italic">Distributed workload</span> where user access is distributed across duplicate application/database combinations that replicate updates to each other. In a <a id="sthref173"></a>distributed workload configuration, the application has the responsibility to divide the work between the two systems so that replication collisions do not occur. If collisions do occur, TimesTen has a timestamp-based collision detection and resolution capability. <a href="#CHDFJGJB">Figure 6-6</a> shows a distributed workload configuration.</p>
</li>
</ul>
<div id="TTCIN215" class="figure">
<p class="titleinfigure"><a id="CHDFFAJB"></a>Figure 6-5 Split workload replication</p>
<img width="260" height="291" src="img/splitwkload.gif" alt="Description of Figure 6-5 follows"/><br/>
<a id="sthref174" href="img_text/splitwkload.htm">Description of &#34;Figure 6-5 Split workload replication&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<div id="TTCIN216" class="figure">
<p class="titleinfigure"><a id="CHDFJGJB"></a>Figure 6-6 Distributed workload replication</p>
<img width="264" height="225" src="img/distworkload.gif" alt="Description of Figure 6-6 follows"/><br/>
<a id="sthref175" href="img_text/distworkload.htm">Description of &#34;Figure 6-6 Distributed workload replication&#34;</a><br/>
<br/></div>
<!-- class="figure" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDFIGDB"></a>
<div id="TTCIN217" class="sect2">
<h3 class="sect2">Asynchronous and return service replication</h3>
<p>TimesTen replication is by default an asynchronous mechanism. When using asynchronous replication, an application updates the master database and continues working without waiting for the updates to be received by the subscribers. The master and subscriber databases have internal mechanisms to confirm that the updates have been successfully received and committed by the subscriber. These mechanisms ensure that updates are applied at a subscriber only once, but they are invisible to the application.</p>
<p>Asynchronous replication provides maximum performance, but the application is completely decoupled from the receipt process of the replicated elements on the subscriber. TimesTen also provides two <span class="italic">return service</span> options for applications that need higher levels of confidence that the replicated data is consistent between the master and subscriber databases:</p>
<ul>
<li>
<p>The <span class="italic">return receipt service</span> synchronizes the application with the replication mechanism by blocking the application until replication confirms that the update has been received by the subscriber replication agent.</p>
</li>
<li>
<p>The <span class="italic">return twosafe service</span> enables fully synchronous replication by blocking the application until replication confirms that the update has been both received <span class="italic">and committed</span> on the subscriber.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
Do not use return twosafe service in a distributed workload configuration. This can produce deadlocks.</div>
<p>Applications that use the return services trade some performance to ensure higher levels of consistency and reduce the risk of transaction loss between the master and subscriber databases. In the event of a master failure, the application has a higher degree of confidence that a transaction committed at the master persists in the subscribing database. Return receipt replication has less performance impact than return twosafe at the expense of potential loss of transactions.</p>
</div>
<!-- class="sect2" -->
<a id="CHDFACAI"></a>
<div id="TTCIN218" class="sect2">
<h3 class="sect2">Replication failover and recovery<a id="sthref176"></a><a id="sthref177"></a><a id="sthref178"></a><a id="sthref179"></a></h3>
<p>For replication to make data highly available to applications with minimal performance impact, there must be a way to shift applications from the failed database to its surviving backup as seamlessly as possible.</p>
<p>You can use Oracle Clusterware to manage failures automatically in systems with active standby pairs. Other kinds of replication schemes can be managed with custom and third-party cluster managers. They detect failures, redirect users or applications from the failed database to either a standby database or a subscriber, and manage recovery of the failed database. The cluster manager or administrator can use TimesTen-provided utilities and functions to duplicate the surviving database and recover the failed database.</p>
<p>Subscriber failures generally have no impact on the applications connected to the master databases and can be recovered without disrupting user service. If a failure occurs on a master database, the cluster manager must redirect the application load to a standby database or a subscriber in order to continue service with no or minimal interruption.</p>
</div>
<!-- class="sect2" -->
<a id="CDDEBDGA"></a>
<div id="TTCIN294" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Automatic client failover for active standby pair replication</h3>
<p>You can configure <a id="sthref180"></a><a id="sthref181"></a><a id="sthref182"></a>automatic client failover for databases that have active standby pairs with client/server connections. This enables the client to fail over automatically to the server on which the standby database resides.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<div id="TTCIN219" class="sect1"><a id="sthref183"></a>
<h2 class="sect1">For more information</h2>
<p>For more information about logging and checkpointing, see <a class="olink TTOPR392" href="../TTOPR/trans.htm#TTOPR392">&#34;Transaction Management&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span>.</p>
<p>For more information about replication, see <a class="olink TTREP" href="../TTREP/toc.htm"><span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span></a>.</p>
<p>For more information about automatic client failover, see <a class="olink TTOPR736" href="../TTOPR/client_server.htm#TTOPR736">&#34;Using automatic client failover&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span>.</p>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2928">
<tr>
<td class="cellalignment2937">
<table class="cellalignment2933">
<tr>
<td class="cellalignment2932"><a href="query.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2932"><a href="event.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2012, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2939">
<table class="cellalignment2931">
<tr>
<td class="cellalignment2932"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2932"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2932"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2932"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2932"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2932"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>