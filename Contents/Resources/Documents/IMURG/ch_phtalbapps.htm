<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-48249"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Oracle%20Multimedia%20Photo%20Album%20Sample%20Applications"></a><title>Oracle Multimedia Photo Album Sample Applications</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="description" content="Presents information about using Oracle Database to store, manage, and retrieve images, audio, video, DICOM format medical images and other objects, or other heterogeneous media data in an integrated fashion with other enterprise information. Oracle Multimedia extends Oracle Database reliability, availability, and data management to multimedia content in traditional, Internet, electronic commerce, medical, financial, and other media-rich applications."/>
<meta name="dcterms.created" content="2014-07-31T9:32:45Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Multimedia User&#39;s Guide"/>
<meta name="dcterms.identifier" content="E17697-09"/>
<meta name="dcterms.isVersionOf" content="IMURG"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="im_glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="ch_appdev.htm" title="Previous" type="text/html"/>
<link rel="Next" href="ch_cdwizapp.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17697-09.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">10/20</span> <!-- End Header -->
<div id="IMURG3000" class="chapter"><a id="BABGIDFB"></a>
<h1 class="chapter"><span class="secnum">3</span> Oracle Multimedia Photo Album Sample Applications</h1>
<p>This chapter describes media upload and retrieval Web applications using Oracle Multimedia object types, using these distinct Oracle Multimedia Photo Album sample Web applications:</p>
<ul>
<li>
<p><a href="#CHDCHCDE">Oracle Multimedia PL/SQL Photo Album Sample Application</a> uses the PL/SQL Gateway and PL/SQL Web Toolkit for Oracle Fusion Middleware and Oracle Database (see <a href="#CHDCHCDE">Section 3.1</a>)</p>
</li>
<li>
<p><a href="#BCEEDIEB">Oracle Multimedia Java Servlet Photo Album Sample Application</a> uses the Oracle Multimedia Servlets and JSP Java API (see <a href="#BCEEDIEB">Section 3.2</a>)</p>
</li>
<li>
<p><a href="#BABHCJFJ">Oracle Multimedia JSP Photo Album Sample Application</a> uses the Oracle Multimedia Servlets and JSP Java API (see <a href="#BABHCJFJ">Section 3.3</a>)</p>
</li>
</ul>
<p>This chapter assumes the following:</p>
<ul>
<li>
<p>You are familiar with:</p>
<ul>
<li>
<p>Developing PL/SQL applications using the PL/SQL Gateway and PL/SQL Web Toolkit</p>
</li>
<li>
<p>Developing Java-based Web applications using JDBC, creating Java source code, compiling it into byte code (<code>.class</code>) files, and deploying class files into respective servlet containers required by Oracle HTTP Server for Oracle Fusion Middleware and Oracle Database</p>
</li>
</ul>
</li>
<li>
<p>You have installed and configured these sample applications:</p>
<ul>
<li>
<p>Oracle Multimedia PL/SQL Web Toolkit Photo Album application</p>
</li>
<li>
<p>Oracle Multimedia Java Servlet Photo Album application</p>
</li>
<li>
<p>Oracle Multimedia JSP Photo Album application</p>
</li>
</ul>
</li>
</ul>
<p>See the <code>README.txt</code> file for each respective sample application for installation and configuration information.</p>
<p class="subhead2"><a id="IMURG11832"></a>More Sample Applications</p>
<p>See these chapters for more sample applications:</p>
<p><a href="ch_cdwizapp.htm#BCEHIBCE">Chapter 4</a> describes the Oracle Multimedia Code Wizard sample application, a media upload and retrieval Web application for the PL/SQL Gateway.</p>
<p><a href="ch_imexapp.htm#CHDCBCDA">Chapter 5</a> describes the Oracle Multimedia Java API sample application. This sample application lets you retrieve, save, play, and delete multimedia data from the Oracle Database sample schemas using Oracle Multimedia Java classes and Oracle Multimedia object types.</p>
<a id="CHDCHCDE"></a>
<div id="IMURG3100" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">3.1</span> Oracle Multimedia PL/SQL Photo Album Sample Application</h2>
<p>The Oracle Multimedia PL/SQL Web Toolkit Photo Album sample application<a id="sthref104"></a><a id="sthref105"></a> demonstrates how to perform the following operations:</p>
<ul>
<li>
<p>Use the Oracle Multimedia image object type to upload, retrieve, and process media data stored in Oracle Database.</p>
</li>
<li>
<p>Combine the image metadata methods of Oracle Multimedia with the XML document management capabilities of Oracle XML DB and the full-text indexing and search features of Oracle Text to create a solution that can extract, store, and search metadata that is embedded in binary image files.<a id="sthref106"></a><a id="sthref107"></a><a id="sthref108"></a></p>
</li>
<li>
<p>Collect new metadata from a user, format the metadata into an XML document, and store the document in the binary image.<a id="sthref109"></a></p>
</li>
</ul>
<p>When installed, this photo album application creates several schema objects that are important to the following discussion. These objects include the <code>photos</code> table, which is defined by the following CREATE TABLE statement:</p>
<pre>CREATE TABLE photos( id           NUMBER PRIMARY KEY,
                     description  VARCHAR2(40) NOT NULL,
                     metaORDImage XMLTYPE,
                     metaEXIF     XMLTYPE,
                     metaIPTC     XMLTYPE,
                     metaXMP      XMLTYPE,
                     image        ORDSYS.ORDIMAGE,
                     thumb        ORDSYS.ORDIMAGE )
--
-- store full-size and thumbnail images as SecureFiles LOBS
--
LOB(image.source.localdata)  STORE AS SECUREFILE
LOB(thumb.source.localdata)  STORE AS SECUREFILE
--
-- and bind the XMLType columns to the Oracle Multimedia metadata schemas
XMLType COLUMN metaORDImage
  STORE AS SecureFile CLOB
  XMLSCHEMA &#34;http://xmlns.oracle.com/ord/meta/ordimage&#34;
  ELEMENT &#34;ordImageAttributes&#34;
XMLType COLUMN metaEXIF
  STORE AS SecureFile CLOB
  XMLSCHEMA &#34;http://xmlns.oracle.com/ord/meta/exif&#34;
  ELEMENT &#34;exifMetadata&#34;
XMLType COLUMN metaIPTC
  STORE AS SecureFile CLOB
  XMLSCHEMA &#34;http://xmlns.oracle.com/ord/meta/iptc&#34;
  ELEMENT &#34;iptcMetadata&#34;
XMLType COLUMN metaXMP
  STORE AS SecureFile CLOB
  XMLSCHEMA &#34;http://xmlns.oracle.com/ord/meta/xmp&#34;
  ELEMENT &#34;xmpMetadata&#34;;
</pre>
<p>The data types for the <code>image</code> and <code>thumb</code> columns are defined as Oracle Multimedia image object types. These columns are used to store the full-size images and the generated thumbnail images, respectively. The LOB storage clauses direct the database to store the full-size and thumbnail images in SecureFiles LOBs, which are the highest performing storage option for binary data.</p>
<p>The table also defines four columns of type <code>XMLType</code> to store XML documents that contain four different kinds of image metadata. Each column is bound to a specific Oracle Multimedia metadata schema. Each metadata schema defines precisely the data model of the metadata document. These schemas are registered with Oracle XML DB when the database is created.<a id="sthref110"></a> The column definitions specify that the database uses unstructured storage to manage the XML metadata documents. Some advantages of using unstructured storage to manage XML include fast retrieval of the complete document and the ability to use XMLIndex indexes to improve the performance of XPath-based queries.</p>
<p>When installed, this photo album application also creates other schema objects. These schema objects include two types of indexes that accelerate metadata searches: a <code>CONTEXT</code> text index and an <code>XMLIndex</code> index.</p>
<p>The <code>CONTEXT</code> type is a text index over all columns that contain descriptive information about the image. These columns include <code>PHOTOS.DESCRIPTION</code>, which is a VARCHAR2 data type, and these four <code>XMLType</code> columns: <code>PHOTOS.METAIPTC</code>, <code>PHOTOS.METAEXIF</code>, <code>PHOTOS.METAXMP</code>, and <code>PHOTOS.METAORDIMAGE</code>. The <code>CONTEXT</code> text index is used to accelerate metadata searches by implementing the photo album search feature that enables users to search for photographs by keyword or phrase.</p>
<p>The <code>CONTEXT</code> text index is created by the following statements. (This example assumes that this photo album application has been installed in the SCOTT schema.)</p>
<pre>-- Create preference PA_CTXIDX.
ctx_ddl.create_preference(&#39;SCOTT.PA_CTXIDX&#39;, &#39;MULTI_COLUMN_DATASTORE&#39;);
 
-- Create a multicolumn datastore.
ctxcols := &#39;description, &#39;                   ||
            &#39;SCOTT.photo_album.getClob(METAIPTC), &#39; ||
            &#39;SCOTT.photo_album.getClob(METAEXIF), &#39; ||
            &#39;SCOTT.photo_album.getClob(METAXMP), &#39;  ||
            &#39;SCOTT.photo_album.getClob(METAORDIMAGE)&#39;;
ctx_ddl.set_attribute( ctxpref, &#39;COLUMNS&#39;, ctxcols );
 
 
-- Create the CONTEXT text index.
create  index pa_ctx_idx on photos(description)
indextype is ctxsys.context
parameters ( &#39;DATASTORE SCOTT.PA_CTXIDX&#39; );
</pre>
<p>The <code>XMLIndex</code> index is used to accelerate metadata searches by permitting users to search only certain types of image metadata and limiting the search to specific portions of an XML document. For example, the following statements create three indexes of type <code>XMLIndex</code> to speed up existsNode( ) queries on columns of type <code>XMLType</code>:</p>
<pre>create index pa_path_iptc_idx  on photos( metaIptc )
 indextype is XDB.XMLIndex;
 
create index pa_path_exif_idx  on photos( metaExif )
 indextype is XDB.XMLIndex;
 
create index pa_path_xmp_idx  on photos( metaXMP )
 indextype is XDB.XMLIndex;
</pre>
<p>During the installation, as prescribed by the PL/SQL Gateway, a document upload table is defined by the following CREATE TABLE statement:</p>
<pre>CREATE TABLE PHOTOS_UPLOAD( name           VARCHAR2(256) UNIQUE NOT NULL,
                            mime_type      VARCHAR2(128),
                            doc_size       NUMBER,
                            dad_charset    VARCHAR2(128),
                            last_updated   DATE,
                            content_type   VARCHAR2(128),
                            blob_content   BLOB )
-- 
-- store BLOBs as SecureFiles LOBs
-- 
LOB(blob_content)  STORE AS SECUREFILE;
</pre>
<p>Each image uploaded using the PL/SQL Gateway is stored in the <code>PHOTOS_UPLOAD</code> table. An upload procedure (<code>insert_new_photo</code>) automatically moves the uploaded image from the specified <code>PHOTOS_UPLOAD</code> table to the photo album applications table called <code>photos</code>.</p>
<p>After installing the Oracle Database Examples media, the sample application files and <code>README.txt</code> file are located at:</p>
<p><code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>/ord/http/demo/plsqlwtk</code> (on Linux and UNIX)</p>
<p><code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>\ord\http\demo\plsqlwtk</code> (on Windows)</p>
<p>See the <code>README.txt</code> file for additional requirements and instructions on installing and using this sample application.</p>
<p>The following subsections provide more information about the PL/SQL Photo Album application:</p>
<ul>
<li>
<p><a href="#BACBCIBB">Running the PL/SQL Photo Album Application</a></p>
</li>
<li>
<p><a href="#BACGAJHD">Description of the PL/SQL Photo Album Application</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADXDB4332" href="../ADXDB/xdb_indexing.htm#ADXDB4332"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a> for more information about XML DB and <code>XMLIndex</code> indexes</p>
</li>
<li>
<p><a class="olink CCAPP0300" href="../CCAPP/GUID-F6B60A4A-B256-415A-9C54-C67C612BFA9B.htm#CCAPP0300"><span class="italic">Oracle Text Application Developer&#39;s Guide</span></a> for more information about creating and using text indexing</p>
</li>
</ul>
</div>
<a id="BACBCIBB"></a>
<div id="IMURG11561" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">3.1.1</span> Running the PL/SQL Photo Album Application</h3>
<p>After you have completed the setup tasks and have built the PL/SQL Photo Album application, including creating a database access descriptor (DAD) entry (as described in the <code>README.txt</code> file), you are ready to run this application.</p>
<p>In the address field of your Web browser, enter the following URL:</p>
<pre><span class="codeinlineitalic">&lt;protocol&gt;</span><span class="codeinlineitalic">&lt;hostname:port-number&gt;</span>/photoalbum
</pre>
<ol>
<li>
<p>In the <code><span class="codeinlineitalic">&lt;protocol&gt;</span></code> field, enter <code>http://</code>.</p>
</li>
<li>
<p>In the <code><span class="codeinlineitalic">&lt;hostname:port-number&gt;</span></code> field, enter the host name and port number of the system where your HTTP server is running.</p>
</li>
</ol>
<p>When first invoked, this photo album application displays any images that are currently stored in the album. By default, the photo album is empty when first installed. To upload a new photograph, select <span class="bold">Upload photo</span>. Enter a description of the photograph and the name of the image file, or browse to its directory location. Then, click <span class="bold">Upload photo</span>.</p>
<p>The contents of the photo album are displayed, along with a picture of the new photograph. Click the thumbnail image to view the full-size version of the photograph. When this photo album application displays the text <span class="bold">view image</span> instead of its thumbnail image, the image format that was uploaded was not recognized by Oracle Multimedia. Click <span class="bold">view image</span> to display the full-size image.</p>
<p>You can now begin to load your photo album application with your favorite photographs.</p>
</div>
<!-- class="sect2" -->
<a id="BACGAJHD"></a>
<div id="IMURG11562" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">3.1.2</span> Description of the PL/SQL Photo Album Application</h3>
<p>The PL/SQL Photo Album application is implemented as a set of PL/SQL procedures and functions, organized in a single PL/SQL package. These procedures combine several database features to create the application. Oracle Multimedia is used to store and process image data. It is also used to extract metadata from images and embed new metadata into images. The XMLType feature is used to store and process the XML metadata documents. Oracle Text indexes are used to accelerate two kinds of metadata searches. Finally, the PL/SQL Web Toolkit is used to create HTML pages and deliver media content.</p>
<p>The user interface for the PL/SQL Photo Album application consists of a set of Web pages. You can use these Web pages to perform the tasks shown in <a href="#CHDEFAJG">Table 3-1</a>. The tasks and the Web pages are introduced in this section and described in further detail in the following sections.</p>
<div id="IMURG11563" class="tblruleformal">
<p class="titleintable"><a id="sthref111"></a><a id="CHDEFAJG"></a>Table 3-1 PL/SQL Photo Album Sample Application Overview</p>
<table class="cellalignment1321" title="PL/SQL Photo Album Sample Application Overview" summary="Overview of PL/SQL Photo Album sample application" dir="ltr">
<thead>
<tr class="cellalignment1312">
<th class="cellalignment1322" id="r1c1-t3">User Task</th>
<th class="cellalignment1322" id="r1c2-t3">Web Page</th>
<th class="cellalignment1322" id="r1c3-t3">PL/SQL Procedures</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r2c1-t3" headers="r1c1-t3"><br/>
Browsing the photo album<br/>
<a href="#CHDFHHFH">Section 3.1.2.1</a></td>
<td class="cellalignment1318" headers="r2c1-t3 r1c2-t3"><br/>
<span class="bold">View album</span><br/>
<a href="#CIHHBGEH">Figure 3-1</a></td>
<td class="cellalignment1318" headers="r2c1-t3 r1c3-t3"><br/>
<code>view_album</code><br/>
<a href="#CHDHCGGA">Example 3-1</a><br/>
<br/>
<code>print_album</code><br/>
<a href="#CHDHACIA">Example 3-2</a><br/>
<br/>
<code>print_image_link</code><br/>
<a href="#CHDGCDEH">Example 3-3</a><br/>
<br/>
<code>deliver_media</code><br/>
<a href="#CHDICAEI">Example 3-4</a></td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r3c1-t3" headers="r1c1-t3"><br/>
Adding images to the photo album<br/>
<a href="#CHDGHFBE">Section 3.1.2.2</a></td>
<td class="cellalignment1318" headers="r3c1-t3 r1c2-t3"><br/>
<span class="bold">Upload photo</span><br/>
<a href="#CIHHHGFD">Figure 3-2</a></td>
<td class="cellalignment1318" headers="r3c1-t3 r1c3-t3"><br/>
<code>view_upload_form</code><br/>
<br/>
<code>print_upload_form</code><br/>
<a href="#CHDHEIFI">Example 3-5</a><br/>
<br/>
<code>insert_new_photo</code><br/>
<a href="#CHDHDFAG">Example 3-6</a></td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r4c1-t3" headers="r1c1-t3"><br/>
Searching for images by keyword or phrase<br/>
<a href="#CHDBJHGJ">Section 3.1.2.3</a></td>
<td class="cellalignment1318" headers="r4c1-t3 r1c2-t3"><br/>
<span class="bold">Search album</span><br/>
<a href="#CIHFJDFB">Figure 3-3</a></td>
<td class="cellalignment1318" headers="r4c1-t3 r1c3-t3"><br/>
<code>view_album</code><br/>
<a href="#CHDHCGGA">Example 3-1</a><br/>
<br/>
<code>print_album</code><br/>
<a href="#CHDHACIA">Example 3-2</a></td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r5c1-t3" headers="r1c1-t3"><br/>
Viewing full-size images<br/>
<a href="#CHDCDJID">Section 3.1.2.4</a></td>
<td class="cellalignment1318" headers="r5c1-t3 r1c2-t3"><br/>
<span class="bold">View entry</span><br/>
<a href="#CIHCJGJD">Figure 3-4</a></td>
<td class="cellalignment1318" headers="r5c1-t3 r1c3-t3"><br/>
<code>view_entry</code><br/>
<a href="#CHDCGHCC">Example 3-7</a><br/>
<br/>
<code>print_image_link</code><br/>
<a href="#CHDGCDEH">Example 3-3</a><br/>
<br/>
<code>deliver_media</code><br/>
<a href="#CHDICAEI">Example 3-4</a></td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r6c1-t3" headers="r1c1-t3"><br/>
Examining image metadata<br/>
<a href="#CHDJCGFB">Section 3.1.2.5</a></td>
<td class="cellalignment1318" headers="r6c1-t3 r1c2-t3"><br/>
<span class="bold">View metadata</span><br/>
<a href="#CIHCFJBI">Figure 3-5</a></td>
<td class="cellalignment1318" headers="r6c1-t3 r1c3-t3"><br/>
<code>view_metadata</code><br/>
<a href="#CHDBADEC">Example 3-8</a><br/>
<br/>
<code>print_metadata</code><br/>
<a href="#CHDBEGHF">Example 3-9</a></td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r7c1-t3" headers="r1c1-t3"><br/>
Writing new XMP metadata to images<br/>
<a href="#CHDEHJBB">Section 3.1.2.6</a></td>
<td class="cellalignment1318" headers="r7c1-t3 r1c2-t3"><br/>
<span class="bold">Write XMP metadata</span><br/>
<a href="#CIHHIAHH">Figure 3-6</a></td>
<td class="cellalignment1318" headers="r7c1-t3 r1c3-t3"><br/>
<code>write_metadata</code><br/>
<a href="#CHDEDAAE">Example 3-10</a></td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r8c1-t3" headers="r1c1-t3"><br/>
Searching for images that contain specific metadata attributes<br/>
<a href="#CHDEDBJB">Section 3.1.2.7</a></td>
<td class="cellalignment1318" headers="r8c1-t3 r1c2-t3"><br/>
<span class="bold">Search metadata</span><br/>
<a href="#CIHGBAIG">Figure 3-7</a></td>
<td class="cellalignment1318" headers="r8c1-t3 r1c3-t3"><br/>
<code>search_metadata</code><br/>
<a href="#CHDGDFCD">Example 3-11</a></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblruleformal" -->
<p>You can explore this photo album application using the navigation bar near the top of each Web task page. The leftmost entry of the navigation bar displays the name of the current Web page. On the right, there are links to other Web pages you can access from the current page. Each Web task page contains a link to the <span class="bold">View album</span> page, which is the home page for the application.</p>
<p class="subhead2"><a id="IMURG11842"></a>Pages in the PL/SQL Photo Album Sample Application</p>
<p>The following subsections, which are summarized here, describe each page in the PL/SQL Photo Album application:</p>
<ul>
<li>
<p><a href="#CHDFHHFH">Browsing the Photo Album</a></p>
<p>Use the <span class="bold">View album</span> page to display thumbnail-size versions of all the images in the photo album and a description link positioned under each thumbnail image. When you select a thumbnail image, the full-size image is displayed. When you select the description link for an image, all the metadata for that image is displayed. The <span class="bold">View album</span> page is the home page for the application.</p>
</li>
<li>
<p><a href="#CHDGHFBE">Adding Images to the Photo Album</a></p>
<p>Use the <span class="bold">Upload photo</span> page to display a simple form to collect a description for a new image, and the directory path to the location of the image on the local computer. When you click the <span class="bold">Upload photo</span> button, the browser sends the image to the Web server and the image is stored in the database.</p>
</li>
<li>
<p><a href="#CHDBJHGJ">Searching for Images by Keyword or Phrase</a></p>
<p>Use the <span class="bold">Search album</span> page to display a search album form to collect keywords or phrases to initiate full-text searches through all image metadata. The application queries the database for all images with metadata that contains the specified keywords or phrases. The search results are displayed as a set of thumbnail images. The search album form is also available from the <span class="bold">View album</span> page.</p>
</li>
<li>
<p><a href="#CHDCDJID">Viewing Full-Size Images</a></p>
<p>Use the <span class="bold">View entry</span> page to display the full-size image of a specified photograph, including any description text that was entered for that image when it was uploaded.</p>
</li>
<li>
<p><a href="#CHDJCGFB">Examining Image Metadata</a></p>
<p>Use the <span class="bold">View metadata</span> page to display all the metadata that was extracted from the image when it was uploaded. Up to four types of metadata can be displayed.</p>
</li>
<li>
<p><a href="#CHDEHJBB">Writing New XMP Metadata to Images</a></p>
<p>Use the <span class="bold">Write XMP metadata</span> page to display a form to collect input for five metadata attributes. These attributes are formatted into an XML document that is embedded within the binary image. The new XMP metadata overwrites any existing XMP metadata.</p>
</li>
<li>
<p><a href="#CHDEDBJB">Searching for Images That Contain Specific Metadata Attributes</a></p>
<p>Use the <span class="bold">Search metadata</span> page to collect input and perform advanced metadata searches. You can specify the type of metadata to be searched. Optionally, you can also limit the search to a specific XML tag within the specified document. The search results are displayed as a set of thumbnail images.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADXDB0400" href="../ADXDB/xdb04cre.htm#ADXDB0400"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a></p>
</li>
<li>
<p><a class="olink CCAPP0300" href="../CCAPP/GUID-F6B60A4A-B256-415A-9C54-C67C612BFA9B.htm#CCAPP0300"><span class="italic">Oracle Text Application Developer&#39;s Guide</span></a></p>
</li>
<li>
<p><a class="olink ADFNS015" href="../ADFNS/adfns_web.htm#ADFNS015"><span class="italic">Oracle Database Advanced Application Developer&#39;s Guide</span></a></p>
</li>
</ul>
</div>
<a id="CHDFHHFH"></a>
<div id="IMURG11571" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">3.1.2.1</span> Browsing the Photo Album</h4>
<p>The home page for this photo album application, <span class="bold">View album</span>, displays the contents of the photo album as thumbnail images in four-column format. Each thumbnail image is also a link to the <span class="bold">View entry</span> page. When you click a thumbnail image link, the application displays the full-size image on a View entry page. Included under each thumbnail image on the <span class="bold">View album</span> page is the image description that was entered when the image was uploaded to the album. The description is also a link to the <span class="bold">View metadata</span> page where all the metadata for this photograph can be examined.</p>
<p>Near the top of the <span class="bold">View album</span> page, there is a text entry field (in the shape of a rectangular box) that accepts user input for a full-text search through all the photo album metadata. The <span class="bold">Search</span> button to the right of the text field initiates the search. The search results are displayed on the <span class="bold">Search album</span> page, which is discussed in <a href="#CHDBJHGJ">Section 3.1.2.3</a>.</p>
<p>At the top of the <span class="bold">View album</span> page, there is a navigation bar, which includes links to other photo album pages. From the <span class="bold">View album</span> page, you can navigate to the <span class="bold">Search metadata</span> page or the <span class="bold">Upload photo</span> page. These pages are described in <a href="#CHDEDBJB">Section 3.1.2.7</a> and <a href="#CHDGHFBE">Section 3.1.2.2</a>, respectively.</p>
<p><a href="#CIHHBGEH">Figure 3-1</a> shows the <span class="bold">View album</span> page for an album that contains several images.</p>
<div id="IMURG11572" class="figure">
<p class="titleinfigure"><a id="CIHHBGEH"></a>Figure 3-1 View album Page with Uploaded Images</p>
<img width="689" height="308" src="img/view_album.gif" alt="Description of Figure 3-1 follows"/><br/>
<a id="sthref112" href="img_text/view_album.htm">Description of &#34;Figure 3-1 View album Page with Uploaded Images&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>The PL/SQL procedures <code>view_album</code>, <code>print_album</code>, <code>print_image_link</code>, and <code>deliver_media</code> are the primary application components that implement the <span class="bold">View album</span> page. The <code>view_album</code> procedure is a public procedure that takes a single optional argument. By default, the argument has a <code>NULL</code> value. Or, it can have the value of the string entered in the text entry field on the <span class="bold">Search album</span> page. When the search argument is <code>NULL</code>, the SELECT statement retrieves the <code>id,</code><code>description</code>, and <code>thumb</code> columns for all entries in the <code>photos</code> table. When the search string is not <code>NULL</code>, the SELECT statement uses the CONTAINS operator to restrict the result set to only images with metadata that matches the search string. (<a href="#CHDCHCDE">Section 3.1</a> describes how the application creates a multicolumn text index over the four XMLType columns <code>PHOTOS.METAIPTC</code>, <code>PHOTOS.METAEXIF</code>, <code>PHOTOS.METAXMP</code>, and <code>PHOTOS.METAORDIMAGE</code> as well as the <code>PHOTOS.DESCRIPTION</code> column.)</p>
<p><a href="#CHDHCGGA">Example 3-1</a> contains some relevant lines of code in the <code>view_album</code> procedure.</p>
<div id="IMURG11573" class="example">
<p class="titleinexample"><a id="CHDHCGGA"></a>Example 3-1 Procedure view_album</p>
<pre>   --
   -- no search criteria so fetch all entries
   --
   IF search IS NULL THEN
     OPEN album_cur FOR
       SELECT id, description, thumb
       FROM photos
       ORDER BY id;
     print_album( album_cur, &#39;The photo album is empty.&#39; );
     CLOSE album_cur;
   ELSE
   --    -- use the full-text index to select entries matching the search criteria
   --
     OPEN album_cur FOR
       SELECT id, description, thumb
       FROM photos
       WHERE CONTAINS( description, trim(search) ) &gt; 0
       ORDER BY id;
     print_album( album_cur, &#39;No photos were found.&#39; );
     CLOSE album_cur;
   END IF; 
</pre></div>
<!-- class="example" -->
<p>The SELECT statement is bound to the cursor variable <code>album_cur</code> and passed to the procedure <code>print_album</code>, which creates the HTML output.</p>
<p>The <code>print_album</code> procedure uses the HTP and HTF packages from the PL/SQL Web Toolkit to create the HTML tags that format the output into a four-column table. Each cell in the table contains two links or anchor tags. The first link is to the <span class="bold">View entry</span> page, which displays the full-size version of the image. This anchor is implemented by PHOTO_ALBUM.VIEW_ENTRY, and passes <code>entry_id</code> as a query string input argument. If the thumbnail image has a nonzero length, then procedure <code>print_image_link</code> is called to create an HTML <code>&lt;img&gt;</code> tag that is the content (the thumbnail image) of the anchor link. The string <code>thumb</code> and the <code>entry_id</code> are passed to procedure <code>print_image_link</code>, along with the image description, and the height and width of the thumbnail image. These values are used to create the <code>&lt;img&gt;</code> tag.</p>
<p>If an image is in a format that Oracle Multimedia does not support, the application cannot create a thumbnail version of the image. In this case, the content of the anchor link is the text <span class="bold">view image</span>.</p>
<p><a href="#CHDHACIA">Example 3-2</a> contains some relevant lines of code in the <code>print_album</code> procedure.</p>
<div id="IMURG11574" class="example">
<p class="titleinexample"><a id="CHDHACIA"></a>Example 3-2 Procedure print_album</p>
<pre>       -- escape the description text
       sc_description := htf.escape_sc( entry.description );
 
       --
       -- Display the thumbnail image as an anchor tag which can be used
       -- to display the full-size image. If the image format is not
       -- supported by Oracle Multimedia, then a thumbnail would not have been
       -- produced when the image was uploaded, so use the text &#39;[view
       -- image]&#39; instead of the thumbnail.
       --
 
       htp.print( &#39;&lt;td headers=&#34;c&#39; || colIdx || &#39;&#34; align=&#34;center&#34; &gt;
                   &lt;a href=&#34;PHOTO_ALBUM.VIEW_ENTRY?entry_id=&#39; ||
                   entry.id || &#39;&#34;&gt;&#39; );
       IF entry.thumb.contentLength &gt; 0
       THEN
           print_image_link( &#39;thumb&#39;, entry.id, sc_description,
                             entry.thumb.height, entry.thumb.width );
       ELSE
           htp.prn( &#39;[view image]&#39; );
       END IF;
       htp.print( &#39;&lt;/a&gt;&#39; );
 
       -- Create link to the metadata
       htp.prn(&#39;&lt;br&gt;&#39;);
       htp.anchor( curl=&gt;&#39;PHOTO_ALBUM.VIEW_METADATA?entry_id=&#39; || entry.id,
                   ctext=&gt;sc_description );
       htp.prn(&#39;&lt;/td&gt;&#39;);
</pre></div>
<!-- class="example" -->
<p>The procedure <code>print_image_link</code> uses the <code>height</code> and <code>width</code> arguments to populate the <code>height</code> and <code>width</code> attributes of the <code>&lt;img&gt;</code> tag. The <code>description</code> argument is used to create text for the <code>alt</code> attribute. If the <code>description</code> argument is empty, a default string is constructed. Finally, the <code>src</code> attribute is set to the URL PHOTO_ALBUM.DELIVER_MEDIA with two query string arguments, <code>media</code> and <code>entry_id</code>. The <code>media</code> argument controls whether the thumbnail or full-size version of the image is delivered. The <code>entry_id</code> argument identifies the image to be delivered.</p>
<p><a href="#CHDGCDEH">Example 3-3</a> contains some relevant lines of code in the <code>print_image_link</code> procedure.</p>
<div id="IMURG11575" class="example">
<p class="titleinexample"><a id="CHDGCDEH"></a>Example 3-3 Procedure print_image_link</p>
<pre> -- add height and width to tag if non zero
 IF height &gt; 0 AND width &gt; 0 THEN
   attributes := attributes || &#39; height=&#39; || height || &#39; width=&#39; || width;
 END IF;
 
 -- create an alt text if none given
 IF alt IS NULL THEN
   IF type = &#39;thumb&#39; THEN
     alt2 := &#39;thumb-nail image &#39;;
   ELSE
     alt2 := &#39;full-size image &#39;;
   END IF;
   alt2 := alt2 || &#39;for album entry &#39; || entry_id;
 ELSE
   alt2 := alt;
 END IF;
 
 htp.img( curl=&gt;&#39;PHOTO_ALBUM.DELIVER_MEDIA?media=&#39; || type ||
                  ampersand || &#39;entry_id=&#39; || entry_id,
            calt=&gt;alt2, cattributes=&gt;attributes ); 
</pre></div>
<!-- class="example" -->
<p>The procedure <code>deliver_media</code> fetches the image content from the database. The <code>If-Modified-Since</code> HTTP request header is compared to the last modification time of the image. If the image has not been modified, a response is sent that the browser can display the image from its cache. Otherwise, the image MIME type and last modified time are sent to the Web server, along with the image content.</p>
<p><a href="#CHDICAEI">Example 3-4</a> contains some relevant lines of code in the <code>deliver_media</code> procedure.</p>
<div id="IMURG11576" class="example">
<p class="titleinexample"><a id="CHDICAEI"></a>Example 3-4 Procedure deliver_media</p>
<pre>   --
   -- Fetch the thumbnail or full-size image from the database.
   --
   IF media = &#39;thumb&#39;
   THEN
       SELECT thumb INTO local_image FROM photos WHERE id = entry_id;
   ELSE
       SELECT image INTO local_image FROM photos WHERE id = entry_id;
   END IF;
 
   --
   -- Check update time if browser sent If-Modified-Since header
   --
   IF ordplsgwyutil.cache_is_valid( local_image.getUpdateTime() )
   THEN
     owa_util.status_line( ordplsgwyutil.http_status_not_modified );
     RETURN;
   END IF;
 
   --
   -- Set the MIME type and deliver the image to the browser.
   --
   owa_util.mime_header( local_image.mimeType, FALSE );
   ordplsgwyutil.set_last_modified( local_image.getUpdateTime() );
   owa_util.http_header_close();
 
   IF owa_util.get_cgi_env( &#39;REQUEST_METHOD&#39; ) &lt;&gt; &#39;HEAD&#39; THEN
     wpg_docload.download_file( local_image.source.localData );
   END IF; 
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="CHDGHFBE"></a>
<div id="IMURG11577" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">3.1.2.2</span> Adding Images to the Photo Album</h4>
<p>The <span class="bold">Upload photo</span> page is used to add new images to the photo album. The page displays a form with two text entry fields. In the <span class="bold">Description:</span> field, you can optionally enter a word or short phrase that describes the image. In the <span class="bold">File name:</span> field, enter the name of the image file or click <span class="bold">Browse...</span> to locate the image file to be uploaded. The <span class="bold">Upload photo</span> button under the <span class="bold">File name:</span> field starts the upload operation. When the image is successfully uploaded, the <span class="bold">View album</span> page appears. From that page, you can display the contents of the photo album, as described in <a href="#CHDFHHFH">Section 3.1.2.1</a>.</p>
<p>At the top of the <span class="bold">Upload photo</span> page, there is a navigation bar, which includes links to other photo album pages. From the <span class="bold">Upload photo</span> page, you can return to the <span class="bold">View album</span> page or select the <span class="bold">Search metadata</span> page. These pages are described in <a href="#CHDFHHFH">Section 3.1.2.1</a> and <a href="#CHDEDBJB">Section 3.1.2.7</a>, respectively.</p>
<p><a href="#CIHHHGFD">Figure 3-2</a> shows an <span class="bold">Upload photo</span> page with all the entry fields completed.</p>
<div id="IMURG11578" class="figure">
<p class="titleinfigure"><a id="CIHHHGFD"></a>Figure 3-2 Completed Upload photo Page</p>
<img width="664" height="227" src="img/upload_photo.gif" alt="Description of Figure 3-2 follows"/><br/>
<a id="sthref113" href="img_text/upload_photo.htm">Description of &#34;Figure 3-2 Completed Upload photo Page&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>The PL/SQL procedures <code>view_upload_form</code>, <code>print_upload_form</code>, and <code>insert_new_photo</code> are the primary application components that implement the <span class="bold">Upload photo</span> page. Together, view_upload_form and print_upload_form create the HTML page that is displayed. The page contains a form tag, a portion of which is shown in <a href="#CHDHEIFI">Example 3-5</a>. The target of the form is PHOTO_ALBUM.INSERT_NEW_PHOTO.</p>
<p><a href="#CHDHEIFI">Example 3-5</a> contains some relevant lines of code in the <code>print_upload_form</code> procedure.</p>
<div id="IMURG11579" class="example">
<p class="titleinexample"><a id="CHDHEIFI"></a>Example 3-5 Procedure print_upload_form</p>
<pre>&lt;form action=&#34;PHOTO_ALBUM.INSERT_NEW_PHOTO&#34;
method=&#34;post&#34;
enctype=&#34;multipart/form-data&#34;&gt;
database. 
</pre></div>
<!-- class="example" -->
<p>Procedure <code>insert_new_photo</code> receives the form, processes the inputs, and stores the new image in the database.</p>
<p>First, the <code>insert_new_photo</code> procedure checks that a file name was entered into the upload form. The image size, MIME type, and BLOB locator for the image content are selected from the document upload table, and the size is checked to ensure that the image is not of zero length. If the <code>description</code> field is blank, a description is created using the file name.</p>
<p>Next, the ORDSYS.ORDIMAGE.INIT( ) function is called to initialize the <code>thumb</code> and <code>image</code> ORDImage object type columns with an empty BLOB for the new row to be stored in the <code>photos</code> table. A SQL SELECT FOR UPDATE statement fetches the newly initialized thumbnail image and full-size image object type columns for updating. A DBMS_LOB.COPY operation loads the image from the upload table into the <code>image</code> ORDImage object type column.</p>
<p>The ORDImage object method setProperties( ) reads the image and sets the image object attributes. Because some browsers cannot display some image formats inline, in this sample application, BMP formatted images are converted to a JPEG image format (for images with more than 8 bits of color), or a GIFF image format (for images with less than 9 bits of color) by calling the <code>get_preferred_format</code> function. A processCopy( ) operation is performed on the full-size image to create the thumbnail image.</p>
<p>The ORDImage object getMetadata( ) method is called to extract all supported types of image metadata. The root element of each XML document in the return vector is examined to discover the metadata type so that the documents can be stored in the correct columns.</p>
<p>Then, a SQL UPDATE statement stores the full-size image, the thumbnail image, and the image metadata documents in the database. Procedure <code>sync_indexes</code> is called to force an update of the text indexes. Finally, the form data input is deleted from the document upload table. A success message is returned to the browser, and the browser is redirected to the <span class="bold">View album</span> page.</p>
<p><a href="#CHDHDFAG">Example 3-6</a> contains some relevant lines of code in the <code>insert_new_photo</code> procedure.</p>
<div id="IMURG11580" class="example">
<p class="titleinexample"><a id="CHDHDFAG"></a>Example 3-6 Procedure insert_new_photo</p>
<pre>   --
   -- Make sure a file name has been provided. If not, display an error
   -- message, then re-display the form.
   --
   IF new_photo IS NULL OR LENGTH( new_photo ) = 0
   THEN
       print_page_header;
       print_error( &#39;Please supply a file name.&#39; );
       print_upload_form;
       print_page_trailer( TRUE );
       return;
   END IF;
 
   --
   -- Get the length, MIME type and the BLOB of the new photo from the
   -- upload table.
   --
   SELECT doc_size,
          mime_type,
          blob_content
   INTO   upload_size,
          upload_mime_type,
          upload_blob
   FROM photos_upload
   WHERE name = new_photo;
 
   --
   -- Make sure we have a valid file. 
   --
   IF upload_size = 0
   THEN
       print_page_header;
       print_heading( &#39;Error message&#39; );
       htp.print( &#39;&lt;hr size=&#34;-1&#34;&gt;&lt;p&gt;Please supply a valid image file.&lt;/p&gt;&#39; );
       print_upload_form;
       print_page_trailer( TRUE );
       return;
   END IF;
 
   --
   -- If the description is blank, then use the file name.
   --
   IF c_description IS NULL
   THEN
       c_description := new_photo;
       pos := INSTR( c_description, &#39;/&#39;, -1 );
       IF pos &gt; 0
       THEN
           c_description := SUBSTR( c_description, pos + 1 );
       END IF;
       c_description := SUBSTR( &#39;Image from file: &#39; ||
                        c_description || &#39;.&#39;, 1, 40 );
   END IF;
   --
   -- Insert a new row into the table, returning the newly allocated sequence
   -- number.
   INSERT INTO photos ( id, description, metaExif, metaIPTC, metaXMP,
                        image, thumb )
   VALUES ( photos_sequence.nextval, c_description, NULL, NULL, NULL,
                ORDSYS.ORDIMAGE.INIT(), ORDSYS.ORDIMAGE.INIT() )
   RETURN id
   INTO new_id;
 
   --
   -- Fetch the newly initialized full-size and thumbnail image objects.
   --
   SELECT image,
          thumb
   INTO new_image,
        new_thumb
   FROM photos
   WHERE id = new_id
   FOR UPDATE;
 
   --
   -- Load the photo from the upload table into the image object.
   --
   DBMS_LOB.COPY( new_image.source.localData, upload_blob, upload_size );
   new_image.setLocal(); 
   --
   -- Set the properties. If the image format is not recognized, then
   -- the exception handler will set the MIME type and length from the
   -- upload table.
   --
   BEGIN
       new_image.setProperties();
   EXCEPTION
       WHEN OTHERS THEN
            new_image.contentLength := upload_size;
            new_image.mimeType := upload_mime_type;
   END;
 
   --
   -- Some image formats are supported by Oracle Multimedia but cannot be 
   -- displayed inline by a browser. The BMP format is one example.
   -- Convert the image to a GIF or JPEG based on number of colors in the
   -- image.
   --
   IF new_image.contentFormat IS NOT NULL AND
      ( new_image.mimeType = &#39;image/bmp&#39; OR
        new_image.mimeType = &#39;image/x-bmp&#39; )
   THEN
       BEGIN
           new_image.process(
                        &#39;fileFormat=&#39; ||
                        get_preferred_format( new_image.contentFormat ) ); 
       EXCEPTION
           WHEN OTHERS THEN
               NULL;
       END;
   END IF;
 
   --
   -- Try to copy the full-size image and process it to create the thumbnail.
   -- This may not be possible if the image format is not recognized.
   --
   BEGIN
       new_image.processCopy( thumb_scale, new_thumb );
   EXCEPTION
       WHEN OTHERS THEN
           new_thumb.deleteContent();
           new_thumb.contentLength := 0;
   END;
  --
   -- fetch the metadata and sort the results
   --
   BEGIN
     metav := new_image.getMetadata( &#39;ALL&#39; );
     FOR i IN 1..metav.count() LOOP
       meta_root := metav(i).getRootElement();
       CASE meta_root
         WHEN &#39;ordImageAttributes&#39; THEN xmlORD := metav(i);
         WHEN &#39;xmpMetadata&#39;  THEN xmlXMP  := metav(i);
         WHEN &#39;iptcMetadata&#39; THEN xmlIPTC := metav(i);
         WHEN &#39;exifMetadata&#39; THEN xmlEXIF := metav(i);
         ELSE NULL;
       END CASE;
     END LOOP;
   EXCEPTION
     WHEN OTHERS THEN
       NULL;
   END;
 
   --
   -- Update the full-size and thumbnail images in the database.
   -- Update metadata columns 
   --
   UPDATE photos
   SET image = new_image,
       thumb = new_thumb,
       metaORDImage = xmlORD,
       metaEXIF = xmlEXIF,
       metaIPTC = xmlIPTC,
       metaXMP = xmlXMP
   WHERE id = new_id;
 
   --    -- update the text indexes
   --    sync_indexes;
 
   --
   -- Delete the row from the upload table.
   --
   DELETE FROM photos_upload WHERE name = new_photo;
   COMMIT;
 
   --
   -- Redirect browser to display full album.
   --    print_page_header(
       &#39;&lt;meta http-equiv=&#34;refresh&#34; content=&#34;2;url=PHOTO_ALBUM.VIEW_ALBUM&#34;&gt;&#39; );
   print_heading( &#39;Photo successfully uploaded into photo album&#39; );
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="CHDBJHGJ"></a>
<div id="IMURG11581" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">3.1.2.3</span> Searching for Images by Keyword or Phrase</h4>
<p>You can use the <span class="bold">View album</span> and <span class="bold">Search album</span> pages to perform a keyword or phrase search of the metadata stored in the photo album. On either of these pages, enter the keyword or phrase in the <span class="bold">Full text search:</span> text entry field and click <span class="bold">Search</span>. This photo album application uses the <code>CONTEXT</code> text index to locate images that have metadata containing the text you entered. If the search is successful, the thumbnail versions of the matching images are displayed in a four-column table. Select the thumbnail image to view the full-size version, or select the description link below the thumbnail image to view the metadata for the image. If the search fails, the message &#34;No photos were found&#34; is displayed.</p>
<p>At the top of the <span class="bold">Search album</span> page, there is a navigation bar, which includes links to other photo album pages. From the <span class="bold">Search album</span> page, you can return to the <span class="bold">View album</span> page or select the <span class="bold">Search metadata</span> or <span class="bold">Upload photo</span> pages. These pages are described in <a href="#CHDFHHFH">Section 3.1.2.1</a>, <a href="#CHDEDBJB">Section 3.1.2.7</a>, and <a href="#CHDGHFBE">Section 3.1.2.2</a>, respectively.</p>
<p><a href="#CIHFJDFB">Figure 3-3</a> shows a <span class="bold">Search album</span> page that contains the results of a successful search operation.</p>
<div id="IMURG11582" class="figure">
<p class="titleinfigure"><a id="CIHFJDFB"></a>Figure 3-3 Search album Page Showing Results</p>
<img width="673" height="235" src="img/search_album.gif" alt="Description of Figure 3-3 follows"/><br/>
<a id="sthref114" href="img_text/search_album.htm">Description of &#34;Figure 3-3 Search album Page Showing Results&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>Full-text searching of the photo album is implemented by the <code>view_album</code> procedure. See <a href="#CHDFHHFH">Section 3.1.2.1</a> for a discussion of this procedure.</p>
</div>
<!-- class="sect3" -->
<a id="CHDCDJID"></a>
<div id="IMURG11583" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">3.1.2.4</span> Viewing Full-Size Images</h4>
<p>When you select a thumbnail image, the application directs you to the <span class="bold">View entry</span> page. This page displays the description of the image and the full-size version of the image.</p>
<p>At the top of the <span class="bold">View entry</span> page, there is a navigation bar, which includes links to other photo album pages. From the <span class="bold">View entry</span> page, you can return to the <span class="bold">View album</span> page, or select any of the <span class="bold">View metadata</span>, <span class="bold">Write metadata</span>, <span class="bold">Search metadata</span>, or <span class="bold">Upload photo</span> pages. These pages are described in <a href="#CHDFHHFH">Section 3.1.2.1</a>, <a href="#CHDJCGFB">Section 3.1.2.5</a>, <a href="#CHDEHJBB">Section 3.1.2.6</a>, <a href="#CHDEDBJB">Section 3.1.2.7</a>, and <a href="#CHDGHFBE">Section 3.1.2.2</a>, respectively.</p>
<p><a href="#CIHCJGJD">Figure 3-4</a> shows a <span class="bold">View entry</span> page that contains the description and the full-size version of an image.</p>
<div id="IMURG11584" class="figure">
<p class="titleinfigure"><a id="CIHCJGJD"></a>Figure 3-4 View entry Page with a Full-Size Image</p>
<img width="678" height="488" src="img/view_entry.gif" alt="Description of Figure 3-4 follows"/><br/>
<a id="sthref115" href="img_text/view_entry.htm">Description of &#34;Figure 3-4 View entry Page with a Full-Size Image&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>The PL/SQL procedures <code>view_entry</code>, <code>print_image_link</code>, and <code>deliver_media</code> are the primary application components that implement the <span class="bold">View entry</span> page. The procedure <code>view_entry</code> takes a single parameter, <code>entry_id</code>, which uniquely locates the image in the <code>photos</code> table. The description and image object are fetched from the <code>photos</code> table. The procedure <code>print_image_link</code> creates the HTML <code>&lt;img&gt;</code> tag, and then calls procedure <code>deliver_media</code> to fetch the image content. See <a href="#CHDFHHFH">Section 3.1.2.1</a> for more information about the <code>print_image_link</code> and <code>deliver_media</code> procedures.</p>
<p><a href="#CHDCGHCC">Example 3-7</a> contains some relevant lines of code in the <code>view_entry</code> procedure.</p>
<div id="IMURG11585" class="example">
<p class="titleinexample"><a id="CHDCGHCC"></a>Example 3-7 Procedure view_entry</p>
<pre>   --
   -- Fetch the row.
   --
   BEGIN
     SELECT htf.escape_sc(description), image
     INTO sc_description, photo
     FROM photos
     WHERE id = entry_id;
     EXCEPTION
     WHEN no_data_found THEN
       print_error( &#39;Image &lt;b&gt;&#39; || htf.escape_sc(entry_id) ||
                    &#39;&lt;/b&gt; was not found.&lt;/p&gt;&#39; );
       print_page_trailer( TRUE );
       return;
   END;
 
   print_image_link( &#39;image&#39;, entry_id, sc_description,
                      photo.height, photo.width );
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="CHDJCGFB"></a>
<div id="IMURG11586" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">3.1.2.5</span> Examining Image Metadata</h4>
<p>You can use the <span class="bold">View metadata</span> page to examine all the metadata for a specific image. Typically, you access this page from the <span class="bold">View album</span> page by selecting the description link below a thumbnail image. You can also access this page by selecting the <span class="bold">View metadata</span> link from the navigation bar. The <span class="bold">View metadata</span> page displays the thumbnail version of the image. To the right of the thumbnail image, there is a list of the metadata documents for this image. Each entry in the list is a link that takes you to the metadata document on the <span class="bold">View metadata</span> page.</p>
<p>At the top of the <span class="bold">View metadata</span> page, there is a navigation bar, which includes links to other photo album pages. From the <span class="bold">View metadata</span> page, you can return to the <span class="bold">View album</span> page, or select any of the <span class="bold">View entry</span>, <span class="bold">Write metadata</span>, <span class="bold">Search metadata</span>, or <span class="bold">Upload photo</span> pages. These pages are described in <a href="#CHDFHHFH">Section 3.1.2.1</a>, <a href="#CHDCDJID">Section 3.1.2.4</a>, <a href="#CHDEHJBB">Section 3.1.2.6</a>, <a href="#CHDEDBJB">Section 3.1.2.7</a>, and <a href="#CHDGHFBE">Section 3.1.2.2</a>, respectively.</p>
<p><a href="#CIHCFJBI">Figure 3-5</a> shows a <span class="bold">View metadata</span> page that contains two types of metadata (XMP and ORDIMAGE) for an image.</p>
<div id="IMURG11587" class="figure">
<p class="titleinfigure"><a id="CIHCFJBI"></a>Figure 3-5 View metadata Page with Metadata for an Uploaded Image</p>
<img width="598" height="415" src="img/view_metadata.gif" alt="Description of Figure 3-5 follows"/><br/>
<a id="sthref116" href="img_text/view_metadata.htm">Description of &#34;Figure 3-5 View metadata Page with Metadata for an Uploaded Image&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>The PL/SQL procedures <code>view_metadata</code> and <code>print_metadata</code> are the primary application components that implement the <span class="bold">View metadata</span> page. The procedure <code>view_metadata</code> is passed the argument <code>entry_id</code>, which uniquely identifies the image in the <code>photos</code> table. A SELECT statement retrieves all the <code>XMLtype</code> metadata columns for the specified entry. If the metadata column is not <code>NULL</code>, procedure <code>print_metadata</code> is called to display the XML document inside an HTML <code>&lt;pre&gt;</code> tag.</p>
<p><a href="#CHDBADEC">Example 3-8</a> contains some relevant lines of code in the <code>view_metadata</code> procedure.</p>
<div id="IMURG11588" class="example">
<p class="titleinexample"><a id="CHDBADEC"></a>Example 3-8 Procedure view_metadata</p>
<pre>   --
   -- Fetch the row.
   --
   SELECT metaOrdImage, metaEXIF, metaIPTC, metaXMP
   INTO   metaO, metaE, metaI, metaX
   FROM   photos
   WHERE  id = entry_id;
 
   -- display the EXIF metadata
   IF metaE IS NOT NULL THEN
     htp.print( &#39;&lt;span class=&#34;bigBlue&#34; id=&#34;exifMetadata&#34;&gt;EXIF&lt;/span&gt;&#39; );
     htp.print( &#39;&lt;br&gt;&lt;pre&gt;&#39; );
     print_metadata( metaE );      htp.print( &#39;&lt;/pre&gt;&#39; );
   END IF;
</pre></div>
<!-- class="example" -->
<p>The <code>print_metadata</code> procedure accepts an XMLType document as an argument. It uses the getClobVal( ) method to access the document as a CLOB. The content of the CLOB is read in a loop and formatted in the HTML page using the <code>htp.prints</code> procedure. The <code>htp.prints</code> procedure escapes the &#39;&lt;&#39; and &#39;&gt;&#39; characters so that they are rendered properly by the Web browser.</p>
<p><a href="#CHDBEGHF">Example 3-9</a> contains some relevant lines of code in the <code>print_metadata</code> procedure.</p>
<div id="IMURG11589" class="example">
<p class="titleinexample"><a id="CHDBEGHF"></a>Example 3-9 Procedure print_metadata</p>
<pre>   metaClob := meta.getClobVal();
   len := dbms_lob.getLength( metaClob );
   IF bufSize &gt; len THEN
     bufSize := len;
   END IF;
   WHILE len &gt; 0 LOOP
     dbms_lob.read( metaClob, bufSize, pos, buf );
     htp.prints( buf );
     pos := pos + bufSize;
     len := len - bufSize;
   END LOOP;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="CHDEHJBB"></a>
<div id="IMURG11590" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">3.1.2.6</span> Writing New XMP Metadata to Images</h4>
<p>You can use the <span class="bold">Write XMP metadata</span> page to write new or replace existing XMP metadata in an image. Oracle Multimedia provides support for writing XMP metadata only. You can access the <span class="bold">Write XMP metadata</span> page by selecting the <span class="bold">Write metadata</span> link in the navigation bar from either the <span class="bold">View entry</span> page or the <span class="bold">View metadata</span> page.</p>
<p>The <span class="bold">Write XMP metadata</span> page displays the thumbnail version of the image to be modified. The page also displays an input form to collect metadata attributes in these five text entry fields:</p>
<ul>
<li>
<p><span class="bold">Title:</span> Specify a title for the photograph.</p>
</li>
<li>
<p><span class="bold">Creator:</span> Enter the name of the person who took the photograph. This field is optional.</p>
</li>
<li>
<p><span class="bold">Date:</span> Enter the date the photograph was taken. This field is optional.</p>
</li>
<li>
<p><span class="bold">Description:</span> Enter a description, such as the subject of the photograph. This field is optional.</p>
</li>
<li>
<p><span class="bold">Copyright:</span> Enter the month and year when the photograph was taken. This field is optional.</p>
</li>
</ul>
<p>Click <span class="bold">Write it!</span> to send the form to the application and embed the metadata in XMP format in the image.</p>
<p>At the top of the <span class="bold">Write XMP metadata</span> page, there is a navigation bar, which includes links to other photo album pages. From the <span class="bold">Write XMP metadata</span> page, you can return to the <span class="bold">View album</span> page, or select any of the <span class="bold">View entry</span>, <span class="bold">View metadata</span>, <span class="bold">Search metadata</span>, or <span class="bold">Upload photo</span> pages. These pages are described in <a href="#CHDFHHFH">Section 3.1.2.1</a>, <a href="#CHDCDJID">Section 3.1.2.4</a>, <a href="#CHDJCGFB">Section 3.1.2.5</a>, <a href="#CHDEDBJB">Section 3.1.2.7</a>, and <a href="#CHDGHFBE">Section 3.1.2.2</a>, respectively.</p>
<p><a href="#CIHHIAHH">Figure 3-6</a> shows a <span class="bold">Write XMP metadata</span> page with completed entries for an image.</p>
<div id="IMURG11591" class="figure">
<p class="titleinfigure"><a id="CIHHIAHH"></a>Figure 3-6 Completed Write XMP metadata Page with XMP Metadata for an Uploaded Image</p>
<img width="669" height="301" src="img/write_metadata.gif" alt="Description of Figure 3-6 follows"/><br/>
<a id="sthref117" href="img_text/write_metadata.htm">Description of &#34;Figure 3-6 Completed Write XMP metadata Page with XMP Metadata for an Uploaded Image&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>The PL/SQL procedure <code>write_metadata</code> receives the form input fields from the browser. The procedure creates an XML document (as a string buffer) that is valid to the Oracle Multimedia XMP schema <code>http://xmlns.oracle.com/ord/meta/xmp</code>. The string buffer is used to create an XMLType object.</p>
<p>A SELECT FOR UPDATE statement retrieves the image to be modified. The Oracle Multimedia method putMetadata( ) is called to embed the XML document into the image. The modified image is stored back to the photos table. Finally, procedure <code>sync_indexes</code> is called to update the text indexes.</p>
<p><a href="#CHDEDAAE">Example 3-10</a> contains some relevant lines of code in the <code>write_metadata</code> procedure.</p>
<div id="IMURG11592" class="example">
<p class="titleinexample"><a id="CHDEDAAE"></a>Example 3-10 Procedure write_metadata</p>
<pre>   -- Create the XMP packet it must be schema valid
   -- to &#34;http://xmlns.oracle.com/ord/meta/xmp&#34;
   -- and contain an &lt;RDF&gt; element. This example uses
   -- the Dublin Core schema as implemented by Adobe XMP
   buf := &#39;&lt;xmpMetadata xmlns=&#34;http://xmlns.oracle.com/ord/meta/xmp&#34;
            xsi:schemaLocation=&#34;http://xmlns.oracle.com/ord/meta/xmp
            http://xmlns.oracle.com/ord/meta/xmp&#34;
            xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34; &gt;
     &lt;rdf:RDF xmlns:rdf=&#34;http://www.w3.org/1999/02/22-rdf-syntax-ns#&#34;&gt;
     &lt;rdf:Description about=&#34;&#34; xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34;&gt;
     &lt;dc:title&gt;&#39; || htf.escape_sc(title) || &#39;&lt;/dc:title&gt;&#39;;

   IF c_creator IS NOT NULL THEN
     buf := buf || &#39;&lt;dc:creator&gt;&#39; || htf.escape_sc(c_creator)
                || &#39;&lt;/dc:creator&gt;&#39;;
   END IF;
   IF c_date IS NOT NULL THEN
     buf := buf || &#39;&lt;dc:date&gt;&#39; || htf.escape_sc(c_date)
                || &#39;&lt;/dc:date&gt;&#39;;
   END IF;
   IF c_description IS NOT NULL THEN
     buf := buf || &#39;&lt;dc:description&gt;&#39; || htf.escape_sc(c_description)
                || &#39;&lt;/dc:description&gt;&#39;;
   END IF;
   IF c_copyright IS NOT NULL THEN
     buf := buf || &#39;&lt;dc:copyright&gt;&#39; || htf.escape_sc(c_copyright)
                || &#39;&lt;/dc:copyright&gt;&#39;;
   END IF;
   buf := buf || &#39;
     &lt;/rdf:Description&gt;
     &lt;/rdf:RDF&gt;
     &lt;/xmpMetadata&gt;&#39;;
 
   xmp := XMLType.createXML(buf, &#39;http://xmlns.oracle.com/ord/meta/xmp&#39;); 

   --    -- select image for update
   -- description is selected to force update of CTX index
   --
   SELECT image, description
   INTO img, des
   FROM photos
   WHERE id = entry_id
   FOR UPDATE;
 
   --
   -- write the metadata
   --
   img.putMetadata( xmp, &#39;XMP&#39; );
 
   --
   -- save updated image and new metadata to table
   -- description updated to force update of CTX index
   --
   UPDATE photos
   SET image = img,
       metaXMP = xmp,
       description = des
   WHERE id = entry_id;
 
   -- update the text indexes
   sync_indexes;
</pre></div>
<!-- class="example" -->
<p>The input data shown in <a href="#CHDEDAAE">Example 3-10</a> would result in the storage of the following metadata in the image:</p>
<pre>&lt;xmpMetadata xmlns=&#34;http://xmlns.oracle.com/ord/meta/xmp&#34;
            xsi:schemaLocation=&#34;http://xmlns.oracle.com/ord/meta/xmp
            http://xmlns.oracle.com/ord/meta/xmp&#34;
            xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;&gt;
 &lt;rdf:RDF xmlns:rdf=&#34;http://www.w3.org/1999/02/22-rdf-syntax-ns#&#34;&gt;
   &lt;rdf:Description about=&#34;&#34; xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34;&gt;
     &lt;dc:title&gt;Story time&lt;/dc:title&gt;
     &lt;dc:creator&gt;father&lt;/dc:creator&gt;
     &lt;dc:date&gt;July 4, 2001&lt;/dc:date&gt;
     &lt;dc:description&gt;family reading&lt;/dc:description&gt;
     &lt;dc:copyright&gt;mother&lt;/dc:copyright&gt;
   &lt;/rdf:Description&gt;
 &lt;/rdf:RDF&gt;
&lt;/xmpMetadata&gt; 
</pre></div>
<!-- class="sect3" -->
<a id="CHDEDBJB"></a>
<div id="IMURG11593" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">3.1.2.7</span> Searching for Images That Contain Specific Metadata Attributes</h4>
<p>You can use the <span class="bold">Search metadata</span> page to search a specific metadata type and to limit your search to a specific tag within a metadata document. You can access the <span class="bold">Search metadata</span> page by selecting the <span class="bold">Search metadata</span> link in the navigation bar of any photo album application Web page.</p>
<p>The <span class="bold">Search metadata</span> page displays a form with four fields to define how the search is to be performed. Use the menu in the <span class="bold">Search in metadata:</span> field to select the type of metadata (<span class="bold">EXIF</span>, <span class="bold">IPTC</span>, or <span class="bold">XMP</span>) to be searched. When this field is changed, the fields <span class="bold">Search in tag:</span> and <span class="bold">Search method:</span> are initialized with values that are appropriate to the type of metadata search.</p>
<p>Use the drop-down list in the <span class="bold">Search in tag:</span> field to limit the search to a specific XML element within a metadata document. The list is populated with element names that are appropriate for the selected metadata type. When the value <span class="bold">--Any tag--</span> is showing, the search looks at all elements within the document type. When the <span class="bold">XMP</span> metadata type is selected, searches are limited to Description elements within the parent RDF element. If the metadata document is properly constructed, selecting <span class="bold">RDF/Description</span> in this field searches all relevant metadata within XMP documents.</p>
<p>In the <span class="bold">Search method:</span> field, select <span class="bold">Contains</span> to specify a search where an element contains the search string. Select <span class="bold">Equals</span> to specify a search where element values are matched exactly to the search string. For searches in XMP metadata, only the <span class="bold">Contains</span> search method is available.</p>
<p>Finally, enter a keyword or phrase in the <span class="bold">Search string:</span> field and click <span class="bold">Search</span>. If the search is successful, the thumbnail versions of the matching images are displayed in a four-column table. Select the thumbnail image to view the full-size version of an image. Or, select the description link below the thumbnail image to view the metadata for the image. If the search fails, the message &#34;No photos matched the search criteria.&#34; is displayed.</p>
<p>At the top of the <span class="bold">Search metadata</span> page, there is a navigation bar, which includes links to other photo album pages. From the <span class="bold">Search metadata</span> page, you can return to the <span class="bold">View album</span> page or select the <span class="bold">Upload photo</span> page. These pages are described in <a href="#CHDFHHFH">Section 3.1.2.1</a> and <a href="#CHDGHFBE">Section 3.1.2.2</a>, respectively.</p>
<p><a href="#CIHGBAIG">Figure 3-7</a> shows a <span class="bold">Search metadata</span> page that contains sample search criteria and results from a successful search operation.</p>
<div id="IMURG11594" class="figure">
<p class="titleinfigure"><a id="CIHGBAIG"></a>Figure 3-7 Completed Search metadata Page for an Uploaded Image</p>
<img width="670" height="378" src="img/search_metadata.gif" alt="Description of Figure 3-7 follows"/><br/>
<a id="sthref118" href="img_text/search_metadata.htm">Description of &#34;Figure 3-7 Completed Search metadata Page for an Uploaded Image&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>The PL/SQL procedure s<code>earch_metadata</code> receives the form input fields from the Web browser. The search parameters are used to build a query to find images that contain the desired metadata. The search is accomplished using the SQL function XMLExists. The XMLExists function is used to search an XML document for content that matches a given XQuery expression. The function returns <code>TRUE</code> if the document matched the search, and <code>FALSE</code> otherwise.</p>
<p>For example, assume that the <code>search_metadata</code> procedure receives input that specifies to search the <code>caption</code> tag in IPTC metadata for an exact match of the word &#34;farm&#34;. The query to accomplish this search is as follows:</p>
<pre> SELECT id, description, thumb
 FROM photos
 WHERE xmlexists(&#39;declare default element namespace &#39; ||
                 &#39; &#34;http://xmlns.oracle.com/ord/meta/iptc&#34;; $x&#39; ||
                 &#39;/iptcMetadata[//caption=&#34;farm&#34;]&#39; passing metaIptc as &#34;x&#34;);
</pre>
<p>The XPath component of the XQuery expression, <code>&#39;/iptcMetadata[//caption=&#34;farm&#34;]&#39;</code>, specifies a search for all <code>&lt;caption&gt;</code> elements under the root element <code>&lt;iptcMetadata&gt;</code> where the <code>&lt;caption&gt;</code> content is <code>&#34;farm&#34;</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<p><a class="olink ADXDB4238" href="../ADXDB/xdb_xquery.htm#ADXDB4238"><span class="italic">Oracle XML DB Developer&#39;s Guide</span></a> for more information about the XMLExists function</p>
</div>
<p><a href="#CHDGDFCD">Example 3-11</a> contains some relevant lines of code in the <code>search_metadata</code> procedure.</p>
<div id="IMURG11595" class="example">
<p class="titleinexample"><a id="CHDGDFCD"></a>Example 3-11 Procedure search_metadata</p>
<pre>    -- Set up search variables for EXIF documents.
    IF mtype = &#39;exif&#39; THEN
      IF op = &#39;equals&#39; THEN
        xpath  := &#39;/exifMetadata[//&#39; || tag || &#39;=&#34;&#39; || c_search || &#39;&#34;]&#39;;
      ELSE  -- default to contains
        xpath  := &#39;/exifMetadata//&#39; || tag ||
                  &#39;[contains(., &#34;&#39; || c_search || &#39;&#34;)]&#39;;
      END IF;
 
      xquery := &#39;declare default element namespace &#39; ||
                &#39; &#34;http://xmlns.oracle.com/ord/meta/exif&#34;; $x&#39; || xpath;
 
      OPEN album_cur FOR
        SELECT id, description, thumb
        FROM photos
        WHERE xmlexists(xquery passing metaExif as &#34;x&#34;);
 
    -- Set up search variables for IPTC documents.
    ELSIF mtype = &#39;iptc&#39; THEN
      IF op = &#39;equals&#39; THEN
        xpath  := &#39;/iptcMetadata[//&#39; || tag || &#39;=&#34;&#39; || c_search || &#39;&#34;]&#39;;
      ELSE  -- default to contains
        xpath  := &#39;/iptcMetadata//&#39; || tag ||
                  &#39;[contains(., &#34;&#39; || c_search || &#39;&#34;)]&#39;;
      END IF;
 
      xquery := &#39;declare default element namespace &#39; ||
            &#39; &#34;http://xmlns.oracle.com/ord/meta/iptc&#34;; $x&#39; || xpath;
 
      OPEN album_cur FOR
        SELECT id, description, thumb
        FROM photos
        WHERE xmlexists(xquery passing metaIptc as &#34;x&#34;);
 
    -- Set up search variables for XMP documents.
    ELSIF mtype = &#39;xmp&#39; THEN
      -- default to contains
      xpath  := &#39;//rdf:Description//*[contains(., &#34;&#39;
                || c_search || &#39;&#34;)]&#39;;
 
      -- Add rdf namespace prefix.
      xquery := &#39;declare namespace rdf = &#39; ||
             &#39; &#34;http://www.w3.org/1999/02/22-rdf-syntax-ns#&#34;; &#39; ||
             &#39;declare default element namespace &#39; ||
             &#39; &#34;http://xmlns.oracle.com/ord/meta/xmp&#34;; $x&#39; || xpath;
 
      OPEN album_cur FOR
        SELECT id, description, thumb
        FROM photos
        WHERE xmlexists(xquery passing metaXMP as &#34;x&#34;);
 
    ELSE
      errorMsg := &#39;Search domain is invalid: &#39; || htf.escape_sc(mtype);
    END IF;
 
    print_search_form( mtype, tag, op, c_search );
    htp.print(&#39;&lt;hr size=&#34;-1&#34;&gt;&#39;);
    print_album( album_cur, &#39;No photos matched the search criteria.&#39; );
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BCEEDIEB"></a>
<div id="IMURG3200" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">3.2</span> Oracle Multimedia Java Servlet Photo Album Sample Application</h2>
<p>The Oracle Multimedia Java Servlet Photo Album sample application<a id="sthref119"></a><a id="sthref120"></a> demonstrates the use of the Oracle Multimedia Servlets and JSP Java API to upload and retrieve multimedia data to and from the database. Users access this photo album application to view the contents of the photo album, including thumbnail versions of each photograph, to view the full-size version of any photograph, and to upload new photographs into the album.</p>
<p>This photo album application demonstrates the use of the Oracle Multimedia image object type to upload and retrieve media data stored in Oracle Database.</p>
<p>When installed, this photo album application creates a table named <code>photos</code> and a sequence named <code>photos_sequence</code>.</p>
<p>The <code>photos</code> table is described by the following CREATE TABLE statement:</p>
<pre>CREATE TABLE photos( id          NUMBER PRIMARY KEY,
                    description VARCHAR2(40) NOT NULL,
                    location    VARCHAR2(40),
                    image       ORDSYS.ORDIMAGE,
                    thumb       ORDSYS.ORDIMAGE )
--
-- store full-size images and thumbnail images as SecureFiles LOBs
--
LOB(image.source.localdata)  STORE AS SECUREFILE
LOB(thumb.source.localdata)  STORE AS SECUREFILE;
</pre>
<p>The data type for the <code>image</code> and <code>thumb</code> columns are defined as Oracle Multimedia image object types to store the full-size images and the generated thumbnail images.</p>
<p>The <code>photos_sequence</code> sequence is defined by the following CREATE SEQUENCE statement:</p>
<pre>CREATE SEQUENCE photos_sequence;
</pre>
<p>After installing the Oracle Database Examples media, the sample application files and <code>README.txt</code> file are located at:</p>
<p><code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>/ord/http/demo/servlet</code> (on Linux and UNIX)</p>
<p><code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>\ord\http\demo\servlet</code> (on Windows)</p>
<p>See the <code>README.txt</code> file for additional requirements and instructions on installing and using this sample application.</p>
<p>The following subsections provide more information about the Java Servlet Photo Album application:</p>
<ul>
<li>
<p><a href="#BACGHHCG">Running the Java Servlet Photo Album Application</a></p>
</li>
<li>
<p><a href="#BACIGDHB">Description of the Java Servlet Photo Album Application</a></p>
</li>
</ul>
<a id="BACGHHCG"></a>
<div id="IMURG11596" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">3.2.1</span> Running the Java Servlet Photo Album Application</h3>
<p>After you have completed the setup tasks and have built the Java Servlet Photo Album application, you are ready to run it.</p>
<p>In the address field of your Web browser, enter the URL for the default installation of Oracle Fusion Middleware, as follows:</p>
<pre><span class="codeinlineitalic">&lt;protocol&gt;</span><span class="codeinlineitalic">&lt;hostname:port-number&gt;</span>/servlet/PhotoAlbumServlet
</pre>
<ol>
<li>
<p>In the <code><span class="codeinlineitalic">&lt;protocol&gt;</span></code> field, enter <code>http://</code>.</p>
</li>
<li>
<p>In the <code><span class="codeinlineitalic">&lt;hostname:port-number&gt;</span></code> field, enter the host name and port number of the system where your HTTP server is running.</p>
</li>
</ol>
<p>When first invoked, this photo album application displays any images that are currently stored in the album. By default, the photo album is empty when first installed. To upload a new photograph, select <span class="bold">Upload new photo</span>. Enter a description of the photograph, the location where the photograph was taken, and the name of the image file (or browse to its directory location), then click <span class="bold">Upload photo</span>. The contents of the photo album are displayed along with a picture of the new photograph. Click the thumbnail image to view the full-size version of the photograph.</p>
<p>When this photo album application displays the text <span class="bold">view image</span> instead of its thumbnail image, the image format that was uploaded was not recognized by Oracle Multimedia. Click <span class="bold">view image</span> to display the full-size image.</p>
<p>You can now begin to load your photo album application with your favorite photographs.</p>
</div>
<!-- class="sect2" -->
<a id="BACIGDHB"></a>
<div id="IMURG11597" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">3.2.2</span> Description of the Java Servlet Photo Album Application</h3>
<p>The Java Servlet Photo Album application combines both business logic and the presentation into a single servlet, which when compiled, creates two class files, <code>PhotoAlbumServlet.class</code> and <code>PhotoAlbumRequest.class</code>.</p>
<p>To follow along with the description of tasks, refer to a copy of the <code>PhotoAlbumServlet.java</code> file, which is available in:</p>
<p><code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>/ord/http/demo/servlet</code> (on Linux and UNIX)</p>
<p><code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>\ord\http\demo\servlet</code> (on Windows)</p>
<p class="subhead2"><a id="IMURG11598"></a>PhotoAlbumServlet Class</p>
<p>The <code>PhotoAlbumServlet</code> class performs these tasks:</p>
<ul>
<li>
<p>Extends the HttpServlet and contains the user-entered connection information.</p>
<pre>public class PhotoAlbumServlet extends HttpServlet
</pre></li>
<li>
<p>Instantiates a Java stack used to implement a simple connection-pooling mechanism.</p>
<pre>private static Stack connStack = new Stack();
</pre></li>
<li>
<p>Defines a flag to indicate whether the JDBC Thin driver has been loaded.</p>
<pre>private static boolean driverLoaded = false;
</pre></li>
<li>
<p>Defines a servlet initialization method.</p>
<pre>public void init( ServletConfig config ) throws ServletException
{
    super.init(config);
}
</pre></li>
<li>
<p>Defines a doGet( ) method to process an HTTP GET request containing an HttpServletRequest object and HttpServletResponse object, and instantiates a PhotoAlbumRequest object to process the request to deliver either a full-size or thumbnail image to the browser, or to display an upload form or the contents of the photo album as thumbnail images.</p>
<pre>public void doGet( HttpServletRequest request,
                   HttpServletResponse response )
    throws ServletException, IOException
{
    Connection conn = null;

    //
    // Use a try-block to ensure that JDBC connections are always returned
    // to the pool.
    //
    try
    {
        //
        // Get a JDBC connection from the pool.
        //
        conn = getConnection();

        //
        // Instantiate a PhotoAlbumRequest object to process the request.
        //
        PhotoAlbumRequest albumRequest =
            new PhotoAlbumRequest( conn, request, response );

        //
        // Figure out what to do based on query string parameters.
        //
        String view_media = request.getParameter( &#34;view_media&#34; );
        if ( view_media != null )
        {
            //
            // Deliver a full-size or thumbnail image to the browser.
            //
            albumRequest.viewMedia( view_media );
            return;
        }
        else if ( request.getParameter( &#34;view_form&#34; ) != null )
        {
            //
            // Display the HTML upload form.
            //
            albumRequest.viewUploadForm();
        }
        else if ( request.getParameter( &#34;view_entry&#34; ) != null )
        {
            //
            // Display full-size photo image.
            //
            albumRequest.viewPhoto();
        }
        else
        {
            //
            // Display album contents with thumbnail images by default.
            //
            albumRequest.viewAlbum();
        }
    }
    catch ( SQLException e )
    {
        //
        // Log what went wrong.
        //
        e.printStackTrace( System.out );

        //
        // Turn SQL exceptions into ServletExceptions.
        //
        throw new ServletException( e.toString() );
    }
    finally
    {
        //
        // If we have a JDBC connection, then return it to the pool.
        //
        freeConnection( conn );
    }
}
</pre></li>
<li>
<p>Defines a doPost( ) method to process an HTTP POST request used to upload a new photograph into the album by instantiating a PhotoAlbumRequest object to process the request and then calling the insertNewPhoto( ) method.</p>
<pre>public void doPost( HttpServletRequest request,
                    HttpServletResponse response )
    throws ServletException, IOException
{
    Connection conn = null;

    //
    // Use a try-block to ensure that JDBC connections are always returned
    // to the pool.
    //
    try
    {
        //
        // Get a JDBC connection from the pool.
        //
        conn = getConnection();

        //        // Instantiate a PhotoAlbumRequest object to process the request.
        //
        PhotoAlbumRequest albumRequest =
            new PhotoAlbumRequest( conn, request, response );

        //
        // Insert the photo into the album.
        //
        albumRequest.insertNewPhoto();
    }
    catch ( SQLException e )
    {
        //
        // Log what went wrong.
        //        e.printStackTrace( System.out );

        //
        // Turn SQL exceptions into ServletExceptions.
        //
        throw new ServletException( e.toString() );
    }
    finally
    {
        //
        // If we have a JDBC connection, then return it to the pool.
        //
        freeConnection( conn );
    }
}
</pre></li>
</ul>
<p>In summary, the <code>PhotoAlbumServlet</code> class responds to the HTTP GET and POST requests by allocating a JDBC connection from a connection pool. Each HTTP GET or POST request is assigned its own JDBC connection from the pool to ensure that multiple requests can be serviced concurrently. An HTTP GET request is used to retrieve image data from the photo album, and an HTTP POST request is used to upload image data into the photo album. Then, an instance of the <code>PhotoAlbumRequest</code> class is created to execute the request, it executes the request, then it releases the JDBC connection back to the pool after completing the request.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<p><a class="olink JJDBC28266" href="../JJDBC/part3.htm#JJDBC28266"><span class="italic">Oracle Database JDBC Developer&#39;s Guide</span></a> for detailed information about using JDBC connections</p>
</div>
<p class="subhead2"><a id="IMURG11599"></a>PhotoAlbumRequest Class</p>
<p>The <code>PhotoAlbumRequest</code> class does the actual processing of an HTTP GET or POST request, and defines the getPreferredFormat( ) function and these methods:</p>
<br/>
viewAlbum( )<br/>
viewPhoto( )<br/>
viewMedia( )<br/>
viewUploadForm( )<br/>
insertNewPhoto( )<br/>
printPageHeader( )<br/>
printPageTrailer( )<br/>
printMessage( )<br/>
printHeading( )<br/>
printLink( )<br/>
<p>In the viewMedia( ) and insertNewPhoto( ) methods, three objects, OrdHttpResponseHandler, OrdHttpUploadFormData, and OrdHttpUploadFile, are instantiated. These objects are used to call the methods of the respective <code>OrdHttpResponseHandler</code>, <code>OrdHttpUploadFormData</code>, <code>OrdHttpUploadFile</code> classes of Oracle Multimedia Servlets and JSP Java API. For example, in the viewMedia( ) method, the OrdHttpResponseHandler object is instantiated and used to call the sendImage( ) method, as shown in the following code:</p>
<pre>OrdHttpResponseHandler handler =
    new OrdHttpResponseHandler( request, response );
handler.sendImage( img );
</pre>
<p>The viewAlbum( ), viewPhoto( ), viewMedia( ), and insertNewPhoto( ) methods use the getORAData( ) and getORADataFactory( ) methods supplied by Oracle to get the image or thumbnail OrdImage object from the result set to obtain height and width information, to retrieve an image from an OrdImage Java object and deliver it to the browser, and to upload an image in an OrdImage Java object and to also update it in the <code>photos</code> table. For example, the following code segment is from the viewAlbum( ) method:</p>
<pre>OrdImage img =
    (OrdImage)rset.getORAData( 4, OrdImage.getORADataFactory() );
.
.
.
out.print( &#34;&lt;td headers=\&#34;image\&#34;&gt;&lt;a href=\&#34;&#34; + servletUri +
           &#34;?view_entry=yes&amp;id=&#34; + id + &#34;\&#34;&gt;&#34; );
if ( img.getContentLength() &gt; 0 )
{
    if (img.getMimeType().startsWith(&#34;image/&#34;))
    {
     out.print( &#34;&lt;img src=\&#34;&#34; + servletUri +
                           &#34;?view_media=thumb&amp;id=&#34; + id + &#34;\&#34;&#34; +
                           &#34; height=&#34; + img.getHeight() +
                           &#34; width=&#34; + img.getWidth() +
                           &#34; alt=\&#34;&#34; + description + &#34;\&#34;&#34; +
         &#34; border=1&gt;&#34; );
    }
}
else
{
    out.print( &#34;[view image]&#34; );
}
out.println( &#34;&lt;/a&gt;&lt;/td&gt;&#34; );
out.println( &#34;&lt;/tr&gt;&#34; );
</pre>
<p>What follows is a more detailed description of each method and what it does:</p>
<ul>
<li>
<p>The viewAlbum( ) method does the following:</p>
<ul>
<li>
<p>Initializes the row count to zero.</p>
</li>
<li>
<p>Writes a common page header on the HTML page using the function printPageHeader( ).</p>
</li>
<li>
<p>Executes a SELECT statement to fetch all the thumbnail images in the photo album, order them by description, and display the description and location information for each along with the thumbnail image if it exists, and returns the results in a result set.</p>
</li>
<li>
<p>Displays the thumbnail images in an HTML table with column headers labeled <code>Description</code>, <code>Location</code>, and <code>Image</code>.</p>
</li>
<li>
<p>Within a <code>while</code> block, reads the contents of the result set by reading the first row&#39;s contents beginning with the <code>id</code> value, displays the description and location values, then gets the thumbnail OrdImage object and builds the height and width attributes for each thumbnail image.</p>
</li>
<li>
<p>Displays the thumbnail image using an HTML anchor tag that can be used to display the full-size image. When a user clicks the thumbnail image or <span class="bold">view image</span>, the full-size image is displayed.</p>
</li>
<li>
<p>Displays the contents of the photo album within an HTML anchor tag using the tag <code>&lt;IMG SRC=&#34;&lt;servlet-path&gt;?view_media=thumb&amp;id=...&#34;&gt;</code> to display the thumbnail images, where <code>&lt;servlet-path&gt;</code> is the value of <code>servletUri</code>. If the thumbnail image was not created because the image format was not supported by Oracle Multimedia, the text <span class="bold">view image</span> is displayed instead.</p>
</li>
<li>
<p>Increments the row count to see if the photo album is empty; if so, it displays the message &#34;The photo album is empty&#34;.</p>
</li>
<li>
<p>Displays an HTML anchor tag near the bottom of the HTML page using the printLink( ) function with the text <span class="bold">Upload new photo</span>.</p>
</li>
<li>
<p>Writes a common trailer at the bottom of the HTML page by calling the printPageHeader( ) function, however, in this case, sets the Boolean argument to false to not display the common page trailer.</p>
</li>
<li>
<p>Closes the result set and the statement.</p>
</li>
</ul>
</li>
<li>
<p>The viewPhoto( ) method displays the full-size version of a photograph and does the following:</p>
<ul>
<li>
<p>Writes a common page header on the HTML page using the function printPageHeader( ).</p>
</li>
<li>
<p>Gets the value of the <code>id</code> column for the entry being viewed.</p>
</li>
<li>
<p>Executes a SQL SELECT statement to fetch the entry&#39;s description, location, and full-size image where the value of <code>id</code> in the <code>where</code> clause is a parameter marker and returns the results in a result set.</p>
</li>
<li>
<p>Gets the image OrdImage object from the result set so it can later build the image height and width attributes within the <code>&lt;IMG SRC=...&gt;</code> image tag.</p>
</li>
<li>
<p>Displays the full-size image in an HTML table beginning with the column names <code>Description</code> and <code>Location</code>, and displays the entry&#39;s values for these two columns.</p>
</li>
<li>
<p>Builds the URL to fetch a full-size image for this entry by using an image tag <code>&lt;IMG SRC=&#34;&lt;servlet-path&gt;?view_media=image&amp;id=...&#34;&gt;</code> to display an image in the column labeled <code>Photo</code>, where <code>&lt;servlet-path&gt;</code> is the value of <code>servletUri</code>.</p>
</li>
<li>
<p>Displays the full-size images height and width by calling the getHeight( ) and getWidth( ) Oracle Multimedia object methods. If the image format is not recognized by Oracle Multimedia, height and width values are zero and are not displayed.</p>
</li>
<li>
<p>Writes a common page trailer at the bottom of the HTML page by calling the printPageHeader( ) function and setting its Boolean argument to true to display the common page trailer.</p>
</li>
<li>
<p>Closes the result set and the statement.</p>
</li>
</ul>
</li>
<li>
<p>The viewMedia( ) method is invoked by both thumbnail and full-size image URLs to retrieve a thumbnail or full-size image from the <code>photos</code> table and deliver it to the browser using the <code>OrdHttpResponseHandler</code> class. This method does the following:</p>
<ul>
<li>
<p>Executes a SQL SELECT statement to fetch either the thumbnail or full-size image where the value of <code>id</code> in the <code>where</code> clause is a parameter marker and returns the results in a result set. The SQL SELECT statement is built dynamically with the string <code>media</code> equating to either the thumbnail image column or the full-size image column.</p>
</li>
<li>
<p>Fetches a row from the result set.</p>
</li>
<li>
<p>Gets the OrdImage object from the result set.</p>
</li>
<li>
<p>Uses the <code>OrdHttpResponseHandler</code> class to create an OrdHttpResponseHandler object to retrieve the image from the OrdImage object and deliver it to the browser using the sendImage( ) method. The sendImage( ) method supports browser content caching by supporting the If-Modified-Since and Last-Modified headers.</p>
</li>
<li>
<p>Closes the result set and the statement.</p>
</li>
</ul>
</li>
<li>
<p>The viewUploadForm( ) method displays an HTML form that enables users to upload new photographs and does the following:</p>
<ul>
<li>
<p>Calls the printPageHeader( ) function to produce the common page header.</p>
</li>
<li>
<p>Defines the form action as a multipart/form-data POST request.</p>
</li>
<li>
<p>Calls the <code>upload_form_fields</code> static string containing the contents of the upload form. The upload form is defined as a table with rows labeled <code>Description</code> and <code>Location</code>, with an input type of text and named description and location respectively, followed by a row labeled <code>File name:</code>, with an input type of <code>file</code> and named <code>photo</code>, and finally a row with no label, an input type of <code>submit</code>, and a value of <code>Upload photo</code>.</p>
</li>
<li>
<p>Calls the printPageTrailer( ) function to produce the common page trailer.</p>
</li>
</ul>
</li>
<li>
<p>The insertNewPhoto( ) method does the following:</p>
<ul>
<li>
<p>Uses the <code>OrdHttpUploadFormData</code> class to parse a multipart/form-data POST request containing an uploaded photograph.</p>
</li>
<li>
<p>Uses the <code>OrdHttpUploadFile</code> class to upload the new photograph into the database.</p>
</li>
<li>
<p>Executes a SQL SELECT photos_sequence.nextval statement to get the next value of the <code>id</code> column for the new row to be inserted into the <code>photos</code> table.</p>
</li>
<li>
<p>Executes a SQL INSERT statement to insert a new row in the <code>photos</code> table.</p>
</li>
<li>
<p>Executes a SQL SELECT...FOR UPDATE statement to fetch the initialized full-size and thumbnail image objects from the <code>photos</code> table.</p>
</li>
<li>
<p>Calls the loadImage( ) method in the <code>OrdHttpUploadFile</code> class to populate an OrdImage object named <code>image</code> with the full-size image and sets the properties or attribute values of the image object based on the image contents.</p>
</li>
<li>
<p>Checks to see what the image format is and if it is an image format that cannot be displayed inline by a browser, such as a BMP image format, then calls the getPreferredFormat( ) method to convert a BMP image format and return the preferred image format.</p>
</li>
<li>
<p>Calls the ProcessCopy( ) method in the <code>OrdImage</code> class to process the full-size image, create a thumbnail image, and populate an OrdImage object named <code>thumb</code>.</p>
</li>
<li>
<p>Executes a SQL UPDATE statement to update the full-size and thumbnail images in the database.</p>
</li>
<li>
<p>Displays a photo upload success message and then directs the browser to refresh the page.</p>
</li>
</ul>
</li>
<li>
<p>A getPreferredFormat( ) private function, in this sample application, converts a BMP image format and returns the preferred image file format based on the number of colors in the image; returns a MONOCHROME image format if there are no colors, or a JPEG if there are more than 8 colors, or a GIF if there are greater than 0 and fewer than 8 colors.</p>
</li>
<li>
<p>A printPageHeader( ) private function displays an HTML header that is common to all HTML responses.</p>
</li>
<li>
<p>A printPageTrailer( ) private function displays an HTML trailer that is common to all HTML responses.</p>
</li>
<li>
<p>A printMessage( ) private function prints a message on the HTML page.</p>
</li>
<li>
<p>A printHeading( ) private function prints a header on the HTML page.</p>
</li>
<li>
<p>A printLink( ) function produces an HTML anchor tag in a standard format.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABHCJFJ"></a>
<div id="IMURG3300" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">3.3</span> Oracle Multimedia JSP Photo Album Sample Application</h2>
<p>The Oracle Multimedia JSP Photo Album sample application<a id="sthref121"></a><a id="sthref122"></a> is a JavaServer Pages (JSP) application that demonstrates the use of the Oracle Multimedia Servlets and JSP Java API to upload and retrieve multimedia data to and from a database. Users access the JSP files that constitute the application to view the contents of the photo album, including thumbnail versions of each photograph, to view the full-size version of any photograph, and to upload new photographs into the album.</p>
<p>This photo album application demonstrates the use of the Oracle Multimedia image object type to upload and retrieve media data stored in Oracle Database.</p>
<p>This photo album application, when installed, creates a table named <code>photos</code> and a sequence named <code>photos_sequence</code>.</p>
<p>The <code>photos</code> table is described by the following CREATE TABLE statement:</p>
<pre>CREATE TABLE photos( id          NUMBER PRIMARY KEY,
                    description VARCHAR2(40) NOT NULL,
                    location    VARCHAR2(40),
                    image       ORDSYS.ORDIMAGE,
                    thumb       ORDSYS.ORDIMAGE )
--
-- store full-size images and thumbnail images as SecureFiles LOBs
--
LOB(image.source.localdata)  STORE AS SECUREFILE
LOB(thumb.source.localdata)  STORE AS SECUREFILE;
</pre>
<p>The data type for the <code>image</code> and <code>thumb</code> columns are defined as Oracle Multimedia image object types to store the full-size images and the generated thumbnail images.</p>
<p>The <code>photos_sequence</code> sequence is defined by the following CREATE SEQUENCE statement:</p>
<pre>CREATE SEQUENCE photos_sequence;
</pre>
<p>After installing the Oracle Database Examples media, the sample application files and <code>README.txt</code> file are located at:</p>
<p><code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>/ord/http/demo/jsp</code> (on Linux and UNIX)</p>
<p><code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>\ord\http\demo\jsp</code> (on Windows)</p>
<p>See the <code>README.txt</code> file for additional requirements and instructions on installing and using this sample application.</p>
<p>The following subsections provide more information about the JSP Photo Album application:</p>
<ul>
<li>
<p><a href="#BACGBHAJ">Running the JSP Photo Album Application</a></p>
</li>
<li>
<p><a href="#BACEDGBA">Description of the JSP Photo Album Application</a></p>
</li>
</ul>
<a id="BACGBHAJ"></a>
<div id="IMURG11600" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">3.3.1</span> Running the JSP Photo Album Application</h3>
<p>After you have completed the setup tasks and have built the JSP Photo Album application, you are ready to run it.</p>
<p>In the address field of your Web browser, enter the URL for the default installation of Oracle Fusion Middleware, as follows:</p>
<pre><span class="codeinlineitalic">&lt;protocol&gt;</span><span class="codeinlineitalic">&lt;hostname:port-number&gt;</span>/demo/PhotoAlbum.jsp
</pre>
<ol>
<li>
<p>In the <code><span class="codeinlineitalic">&lt;protocol&gt;</span></code> field, enter <code>http://</code>.</p>
</li>
<li>
<p>In the <code><span class="codeinlineitalic">&lt;hostname:port-number&gt;</span></code> field, enter the host name and port number of the system where your HTTP server is running.</p>
</li>
</ol>
<p>When first invoked, this photo album application displays any images that are currently stored in the album. By default, the photo album is empty when first installed. To upload a new photograph, select <span class="bold">Upload new photo</span>. Enter a description of the photograph, the location where the photograph was taken, and the name of the image file or browse to its directory location, then click <span class="bold">Upload photo</span>. The contents of the photo album are displayed along with a picture of the new photograph. Click the thumbnail image to view the full-size version of the photograph.</p>
<p>When this photo album application displays the text <span class="bold">view image</span> instead of its thumbnail image, the image format that was uploaded was not recognized by Oracle Multimedia. Click <span class="bold">view image</span> to display the full-size image.</p>
<p>You can now begin to load your photo album application with your favorite photographs.</p>
</div>
<!-- class="sect2" -->
<a id="BACEDGBA"></a>
<div id="IMURG11601" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">3.3.2</span> Description of the JSP Photo Album Application</h3>
<p>The JSP Photo Album application separates the business logic from the presentation by having a JavaBean containing methods that are accessed from each of five JSP files. When compiled, the application creates the <code>PhotoAlbumBean.class</code> file, which contains the user-entered connection information and defines the functions: getId( ), getDescription( ), getLocation( ), and getPreferredFormat( ) and the following methods:</p>
<br/>
selectTable( )<br/>
selectRowById( )<br/>
fetch( )<br/>
insertNewPhoto( )<br/>
release( )<br/>
getConnection( )<br/>
freeConnection( )<br/>
setId( )<br/>
setDescription( )<br/>
setLocation( )<br/>
getImage( )<br/>
getThumb( )<br/>
<p>To follow along with the description of tasks, refer to a copy of each JSP file, which is available in:</p>
<p><code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>/ord/http/demo/jsp</code> (on Linux and UNIX)</p>
<p><code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>\ord\http\demo\jsp</code> (on Windows)</p>
<p>In the <code>PhotoAlbumEntryViewer</code>, <code>PhotoAlbumMediaViewer</code>, <code>PhotoAlbum</code>, and <code>PhotoAlbumInsertPhoto</code> JSP files, the <code>jsp:useBean</code> action tag is used to establish an ID and association with the <code>PhotoAlbumBean</code> class and the <code>OrdHttpJspResponseHandler</code> and <code>OrdHttpUploadFormData</code> classes of Oracle Multimedia Servlets and JSP Java API. For example, the following code appears in the <code>PhotoAlbumInsertPhoto</code> JSP file:</p>
<pre>&lt;jsp:useBean id=&#34;album&#34; scope=&#34;page&#34; class=&#34;PhotoAlbumBean&#34;/&gt;
&lt;jsp:useBean id=&#34;handler&#34; scope=&#34;page&#34;
             class=&#34;oracle.ord.im.OrdHttpJspResponseHandler&#34;/&gt;
&lt;jsp:useBean id=&#34;formData&#34; scope=&#34;page&#34;
             class=&#34;oracle.ord.im.OrdHttpUploadFormData&#34;/&gt;
</pre>
<p>This <code>jsp:useBean</code> action tag is used so these objects can be referenced by their respective ID values (<code>album</code>, <code>handler</code>, and <code>formData</code>) to call the methods of these classes.</p>
<p>The <code>OrdHttpUploadFile</code> class of Oracle Multimedia Servlets and JSP Java API is defined as an object with the name <code>uploadPhoto</code> in the insertNewPhoto( ) method in the <code>PhotoAlbumBean.java</code> file and then used to call its loadImage( ) method to load the photograph into the <code>photos</code> table, as shown in the following code segments:</p>
<pre>public void insertNewPhoto( OrdHttpUploadFile uploadPhoto )
        throws SQLException, ServletException, IOException
.
.
.
uploadPhoto.loadImage( image );
.
.
.
</pre>
<p>The insertNewPhoto( ) method defined in the <code>PhotoAlbumBean.java</code> file, uses the getORAData( ) and getORADataFactory( ) methods supplied by Oracle to upload an image and a thumbnail image in an OrdImage Java object. First, the method executes a SQL SELECT...FOR UPDATE statement to select the row for update, and then, executes a SQL UPDATE statement to update the <code>image</code> and <code>thumb</code> columns for that row in the <code>photos</code> table, as shown in the following code segments:</p>
<pre>stmt = (OraclePreparedStatement)conn.prepareStatement(
            &#34;select image,thumb from photos where id = ? for update&#34; );
stmt.setString( 1, id );
rset = (OracleResultSet)stmt.executeQuery();
if ( !rset.next() )
{
    throw new ServletException( &#34;new row not found in table&#34; );
}
image = (OrdImage)rset.getORAData( 1, OrdImage.getORADataFactory());
thumb = (OrdImage)rset.getORAData( 2, OrdImage.getORADataFactory());

rset.close();
stmt.close();
.
.
.
    //
    // Prepare and execute a SQL statement to update the full-size and
    // thumbnail images in the database.
    //
    stmt = (OraclePreparedStatement)conn.prepareStatement(
               &#34;update photos set image = ?, thumb = ? where id = ?&#34; );
    stmt.setORAData( 1, image );
    stmt.setORAData( 2, thumb );
    stmt.setString( 3, id );
    stmt.execute();
    stmt.close();

    //
    // Commit the changes.
    //
    conn.commit();
}
</pre>
<p>The fetch( ) method defined in the <code>PhotoAlbumBean.java</code> file or the PhotoAlbumBean JavaBean, fetches the next row from the result set using the getORAData( ) and getORADataFactory( ) methods to retrieve the image and the thumbnail image from an OrdImage Java object, and delivers each to the browser, as shown in the following example:</p>
<pre>public boolean fetch()
    throws SQLException
{
    if ( rset.next() )
    {
        id = rset.getString( 1 );
        description = rset.getString( 2 );
        location = rset.getString( 3 );
        image = (OrdImage)rset.getORAData( 4, OrdImage.getORADataFactory() );
        thumb = (OrdImage)rset.getORAData( 5, OrdImage.getORADataFactory() );
        return true;
    }
    else
    {
        rset.close();
        stmt.close();
        return false;
    }
}
</pre>
<p>What follows is a more detailed description of each JSP file.</p>
<p class="subhead2"><a id="IMURG11602"></a>PhotoAlbum.jsp</p>
<p>This JSP file is the entry point to the JSP Photo Album application and does the following:</p>
<ul>
<li>
<p>Uses the PhotoAlbumBean JavaBean to access the contents of the <code>photos</code> table.</p>
</li>
<li>
<p>Uses the <code>OrdHttpJspResponseHandler</code> class to facilitate the retrieval of image data from the <code>photos</code> table and its delivery to a browser or other HTTP client from a Java servlet.</p>
</li>
<li>
<p>Displays the title of the page in the HTML header and in the common page header.</p>
</li>
<li>
<p>Displays the thumbnail images in a table using column headers labeled, <code>Description</code>, <code>Location</code>, and <code>Image</code>.</p>
</li>
<li>
<p>Uses a <code>try/catch</code> block to ensure the JDBC connection is released.</p>
</li>
<li>
<p>Calls the selectTable( ) method to select all the rows in the <code>photos</code> table.</p>
</li>
<li>
<p>Initializes the row count to zero.</p>
</li>
<li>
<p>Displays an entry in the photo album by calling the getDescription( ) method, then the getLocation( ) method, and then printing the values in the appropriate columns. If the location information is blank, print a space in the <code>Location</code> column.</p>
</li>
<li>
<p>Displays the contents of the photo album as thumbnail images using an HTML anchor tag to call the <code>PhotoAlbumEntryViewer.jsp</code> file to get the ID value by calling the getID( ) function.</p>
</li>
<li>
<p>Calls the getThumb( ) method to get the thumbnail image and calls the getContentLength( ) method to determine the image length.</p>
</li>
<li>
<p>Tests to see if the value returned for the image length is greater than 0, and if so uses an image tag of the form <code>&lt;IMG SRC=&#34;PhotoAlbumMediaViewer.jsp?media=thumb&amp;...&gt;</code> to display the thumbnail image; otherwise, prints the link <span class="bold">view image</span> in the column header labeled <code>Image</code>, which, when clicked, retrieves the full-size image.</p>
</li>
<li>
<p>Displays a message &#34;The photo album is empty&#34; if the photo album is empty. If the photo album is not empty, this message is displayed &#34;Select the thumbnail to view the full-sized image&#34;.</p>
</li>
<li>
<p>Ends the <code>try/catch</code> block with a <code>finally</code> clause and releases the JDBC connection by calling the release( ) method.</p>
</li>
<li>
<p>Displays a link to the upload form with the text <span class="bold">Upload new photo</span> at the bottom of the page that calls the <code>PhotoAlbumUploadForm.jsp</code> file.</p>
</li>
</ul>
<p class="subhead2"><a id="IMURG11603"></a>PhotoAlbumEntryViewer.jsp</p>
<p>This JSP file is called by the <code>PhotoAlbum.jsp</code> file that displays one full-size version of a photograph in the album. This JSP file does the following:</p>
<ul>
<li>
<p>Uses the PhotoAlbumBean JavaBean to access the contents of the <code>photos</code> table.</p>
</li>
<li>
<p>Uses the <code>OrdHttpJspResponseHandler</code> class to facilitate the retrieval of image data from the <code>photos</code> table and its delivery to a browser or other HTTP client from a Java servlet.</p>
</li>
<li>
<p>Displays the title of the page in the HTML header and in the common page header.</p>
</li>
<li>
<p>Defines a string named <code>id</code> that calls the getParameter( ) method to get the <code>id</code> value.</p>
</li>
<li>
<p>Displays a message &#34;Malformed URL, no id parameter&#34; in the event the value of the <code>id</code> string is null.</p>
</li>
<li>
<p>Uses a <code>try/catch</code> block to ensure the JDBC connection is released.</p>
</li>
<li>
<p>Calls the selectRowById( ) method with the value of <code>id</code> to select the entry to be displayed. If the next row to be fetched for that <code>id</code> value is not found, display a message &#34;Entry not found: &lt;id value&gt;&#34;.</p>
</li>
<li>
<p>Displays the entry in the album by calling the getDescription( ) method and displaying its value under the header <code>Description</code>, calling the getLocation( ) method and displaying its value under the <code>Location</code> header.</p>
</li>
<li>
<p>Displays one full-size version of a photograph in the album using an image tag in the form <code>&lt;IMG SRC=&#34;PhotoAlbumMediaViewer.jsp?media=image&amp;...&#34;&gt;</code> under the <code>Photo</code> header.</p>
</li>
<li>
<p>Displays the full-size images height and width by calling the getHeight( ) and getWidth( ) methods. If the image format is not recognized by Oracle Multimedia, height and width values are zero and are not be displayed.</p>
</li>
<li>
<p>Displays a link at the bottom of the page <span class="bold">Return to photo album</span> that calls the <code>PhotoAlbum.jsp</code> file.</p>
</li>
<li>
<p>Ends the <code>try/catch</code> block, and with a <code>finally</code> clause, releases the JDBC connection by calling the release( ) method.</p>
</li>
</ul>
<p class="subhead2"><a id="IMURG11604"></a>PhotoAlbumMediaViewer.jsp</p>
<p>This JSP file is called by the <code>PhotoAlbum.jsp</code> and <code>PhotoAlbumEntryViewer.jsp</code> files and retrieves a single thumbnail or full-size image from the <code>photos</code> table using the PhotoAlbumBean JavaBean and delivers it to the browser using the <code>OrdHttpResponseHandler</code> class. This JSP file does the following:</p>
<ul>
<li>
<p>Uses the PhotoAlbumBean JavaBean to access the contents of the <code>photos</code> table.</p>
</li>
<li>
<p>Uses the <code>OrdHttpJspResponseHandler</code> class to facilitate the retrieval of image data from the <code>photos</code> table and its delivery to a browser or other HTTP client from a Java servlet.</p>
</li>
<li>
<p>Defines a string named <code>id</code> that calls the getParameter( ) method to get the <code>id</code> value.</p>
</li>
<li>
<p>Defines a string named <code>media</code> that calls the getParameter( ) method to get the <code>media</code> value.</p>
</li>
<li>
<p>Sets a condition to proceed as long as the value of the string <code>id</code> and the value of the string <code>media</code> is not null.</p>
</li>
<li>
<p>Uses a <code>try/catch</code> block to ensure the JDBC connection is released.</p>
</li>
<li>
<p>Calls the selectRowById( ) method to select a specific row from the <code>photos</code> table for the value of <code>id</code>.</p>
</li>
<li>
<p>Delivers the full-size or thumbnail image by first calling the setPageContext( ) method of the <code>OrdHttpJspResponseHandler</code> class to specify the page context object; then, calling the getImage( ) method to return the image to the OrdImage object; then, calling the sendImage( ) method of the <code>OrdHttpResponseHandler</code> class to retrieve the image from the OrdImage object and deliver it to the browser. If the value of media is <code>image</code>, an image is delivered to the browser; if the value of media is <code>thumb</code>, a thumbnail image is delivered to the browser. The sendImage( ) method supports browser content caching by supporting the If-Modified-Since and Last-Modified headers.</p>
</li>
<li>
<p>Ends the <code>try/catch</code> block with a <code>finally</code> clause and releases the JDBC connection by calling the release( ) method.</p>
</li>
<li>
<p>Displays this message in the event the request is not understood &#34;PhotoAlbumMediaViewer.jsp - malformed URL&#34;.</p>
</li>
</ul>
<p class="subhead2"><a id="IMURG11605"></a>PhotoAlbumUploadForm.jsp</p>
<p>This JSP file is called by the <code>PhotoAlbum.jsp</code> file that displays an HTML form to enable users to upload new photographs into the album. This JSP file does the following:</p>
<ul>
<li>
<p>Displays the title of the page in the HTML header and in its common page header.</p>
</li>
<li>
<p>Displays any error message under the header &#34;Error message&#34; from a previous attempt to upload an image to determine whether the value of a string is not null after calling the getParameter( ) method with an argument of <code>error</code>.</p>
</li>
<li>
<p>Displays a header with the text <span class="bold">Upload a new photo</span>.</p>
</li>
<li>
<p>Defines the form action specifying the <code>PhotoAlbumInsertPhoto.jsp</code> file to process the upload request as a multipart/form-data POST request.</p>
</li>
<li>
<p>Displays the upload form with rows labeled <code>Description</code>, <code>Location</code>, and <code>File name:</code>.</p>
</li>
<li>
<p>Displays the contents of the upload form defined as a table with rows labeled <code>Description</code> and <code>Location</code>, both with an input type of <code>text</code> and named <code>description</code> and <code>location</code> respectively, followed by a row labeled <code>File name:</code> with an input type of <code>file</code> and named <code>photo</code>, and finally followed by a row with no label and an input type of <code>submit</code> and a value of <code>Upload photo</code>.</p>
</li>
<li>
<p>Displays a link at the bottom of the page <span class="bold">Return to photo album</span> that calls the <code>PhotoAlbum.jsp</code> file.</p>
</li>
</ul>
<p class="subhead2"><a id="IMURG11606"></a>PhotoAlbumInsertPhoto.jsp</p>
<p>This JSP file is called by the <code>PhotoAlbumUploadForm.jsp</code> file that uses the <code>OrdHttpUploadFormData</code> class to parse the POST data in a POST request containing the uploaded photograph. This JSP file does the following:</p>
<ul>
<li>
<p>Uses the PhotoAlbumBean JavaBean to access the contents of the <code>photos</code> table.</p>
</li>
<li>
<p>Uses the <code>OrdHttpJspResponseHandler</code> class to facilitate the retrieval of image data from the <code>photos</code> table and its delivery to a browser or other HTTP client from a JSP file.</p>
</li>
<li>
<p>Uses the <code>OrdHttpUploadFormData</code> class to facilitate the processing of POST requests by parsing the POST data containing the multipart/form-data encoding, and making the contents of regular form fields and uploaded files readily accessible to a JSP file.</p>
</li>
<li>
<p>Sets the value of the strings <code>description</code> and <code>location</code> to <code>null</code> and the OrdHttpUploadFile object uploadPhoto to <code>null</code>.</p>
</li>
<li>
<p>Uses a <code>try/catch</code> block to ensure the JDBC connection is released.</p>
</li>
<li>
<p>Passes an OrdHttpUploadFile object to the <code>PhotoAlbumBean</code> class to store the photograph in the database.</p>
</li>
<li>
<p>Calls the setServletRequest( ) method of the <code>OrdHttpUploadFormData</code> class to specify the ServletRequest object for the request.</p>
</li>
<li>
<p>Tests to see if the request is encoded using the multipart/form-data encoding by calling the isUploadRequest( ) method of the <code>OrdHttpUploadFormData</code> class.</p>
</li>
<li>
<p>Forwards the request to the <code>PhotoAlbumUploadForm.jsp</code> file if the call to the isUploadRequest( ) method returns a Boolean expression of not false.</p>
</li>
<li>
<p>Parses the form data by calling the parseFormData( ) method of the <code>OrdHttpUploadFormData</code> class.</p>
</li>
<li>
<p>Gets the form field values for description and location by calling the<br/>
getParameter( ) method of the <code>OrdHttpUploadFormData</code> class, and also gets the name of the file to be uploaded by calling the getFileParameter( ) method of the same class.</p>
</li>
<li>
<p>Tests to make sure the file name is not null from the getFileParameter( ) method call of the <code>OrdHttpUploadFormData</code> class, then calls the getOriginalFileName( ) method of the <code>OrdHttpUploadFile</code> class to ensure that the original file name as provided by the browser is not null, or that the content length of the file is empty by calling the getContentLength( ) method of the <code>OrdHttpUploadFile</code> class.</p>
</li>
<li>
<p>Forwards the request to the <code>PhotoAlbumUploadForm.jsp</code> file if there is a valid image file.</p>
</li>
<li>
<p>If the description is null or empty, uses the file name as the description by calling the getSimpleFileName( ) method of the <code>OrdHttpUploadFile</code> class.</p>
</li>
<li>
<p>Inserts the new entry into the <code>photos</code> table by calling the setDescription( ), setLocation( ), and insertNewPhoto( ) methods in the <code>PhotoAlbumBean.java</code> JavaBean.</p>
</li>
<li>
<p>Ends the <code>try/catch</code> block with a <code>finally</code> clause and releases the JDBC connection by calling the release( ) method and releases all resources held by the OrdHttpUploadFormData object by calling its release( ) method.</p>
</li>
<li>
<p>Displays the updated photo album by displaying the title of the page in the HTML header and in its common page header, directing the browser to the main page by calling the <code>PhotoAlbum.jsp</code> file, then displays the header &#34;Photo successfully uploaded into photo album&#34; and the instruction, &#34;Please click on link below or wait for the browser to refresh the page&#34;.</p>
</li>
<li>
<p>Displays a link at the bottom of the main page <span class="bold">Return to photo album</span> that calls the <code>PhotoAlbum.jsp</code> file.</p>
</li>
</ul>
<p class="subhead2"><a id="IMURG11607"></a>PhotoAlbumBean.java</p>
<p>This is a JavaBean used by the JSP files to access the database.</p>
<p>The first call to the JavaBean for a request causes it to allocate a JDBC connection from a connection pool. Subsequent calls by the same request reuse the same connection. After completing a request, each JSP file is responsible for calling the JavaBean to release the JDBC connection back to the pool. Each HTTP GET or POST request is assigned its own JDBC connection from the pool to ensure that multiple requests can be serviced concurrently.</p>
<p>These methods are defined:</p>
<ul>
<li>
<p>The selectTable( ) method selects all the rows in the <code>photos</code> table, orders them by location, and returns the results in a result set.</p>
</li>
<li>
<p>The selectRowById( ) method selects a specific row from the <code>photos</code> table where the value of <code>id</code> in the <code>where</code> clause is a parameter marker and returns the results in a result set.</p>
</li>
<li>
<p>The fetch( ) method fetches the next row from the result set.</p>
</li>
<li>
<p>The insertNewPhoto( ) method does the following:</p>
<ul>
<li>
<p>Uses the <code>OrdHttpUploadFile</code> class to upload the new photograph into the database.</p>
</li>
<li>
<p>Disables auto-commit by calling the setAutoCommit( ) method with an argument of false.</p>
</li>
<li>
<p>Executes a SQL SELECT photos_sequence.nextval statement to get the next value for the value of the <code>id</code> column for the new row to be inserted into the <code>photos</code> table.</p>
</li>
<li>
<p>Executes a SQL INSERT statement to insert a new row in the <code>photos</code> table.</p>
</li>
<li>
<p>Executes a SQL SELECT...FOR UPDATE statement to fetch the initialized full-size and thumbnail image objects from the <code>photos</code> table.</p>
</li>
<li>
<p>Loads the image by calling the loadImage( ) method in the <code>OrdHttpUploadFile</code> class to populate an OrdImage object named <code>image</code> with the full-size image, and sets the properties or attribute values of the image object based on the image contents.</p>
</li>
<li>
<p>Gets the image file format by calling the getContentFormat( ) method and if it is not null, and if the MIME type is BMP, then tries to process the image by calling the process( ) method and calling the getPreferredFormat( ) method to convert it to a MONOCHROME, GIF, or JPEG image format, based on the number of colors in the image.</p>
</li>
<li>
<p>Tries to copy the full-size image and process it to create the thumbnail image by calling the processCopy( ) method in the <code>OrdImage</code> class and populate the OrdImage object named <code>thumb</code>.</p>
</li>
<li>
<p>Executes a SQL UPDATE statement to update the full-size and thumbnail images in the database.</p>
</li>
<li>
<p>Commits the changes.</p>
</li>
</ul>
</li>
<li>
<p>A release( ) method to release the result set and statement objects, and places the JDBC connection back on the free list or stack.</p>
</li>
<li>
<p>Get methods (getId( ), getDescription( ), getLocation( ), getImage( ), and getThumb( )) and the set methods (setId( ), setDescription( ), and setLocation( )) are used to get or set attributes for all attributes or columns.</p>
</li>
<li>
<p>A getConnection( ) private function implements a simple JDBC connection pool.</p>
</li>
<li>
<p>A freeConnection( ) private function releases the JDBC connection back to the pool after completing the request.</p>
</li>
<li>
<p>A getPreferredFormat( ) private function returns the preferred image file format based on the number of bits of color in the BMP image; returns a MONOCHROME image if there are no bits of color, returns JPEG if there are more than 8 bits of color, or returns GIF if there are between 1 and 8 bits of color.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1311">
<tr>
<td class="cellalignment1318">
<table class="cellalignment1316">
<tr>
<td class="cellalignment1315"><a href="ch_appdev.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1315"><a href="ch_cdwizapp.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1320">
<table class="cellalignment1314">
<tr>
<td class="cellalignment1315"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1315"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1315"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1315"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1315"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1315"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>