<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-48241"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Oracle%20Multimedia%20Application%20Development"></a><title>Oracle Multimedia Application Development</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="description" content="Presents information about using Oracle Database to store, manage, and retrieve images, audio, video, DICOM format medical images and other objects, or other heterogeneous media data in an integrated fashion with other enterprise information. Oracle Multimedia extends Oracle Database reliability, availability, and data management to multimedia content in traditional, Internet, electronic commerce, medical, financial, and other media-rich applications."/>
<meta name="dcterms.created" content="2014-07-31T9:32:45Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Multimedia User&#39;s Guide"/>
<meta name="dcterms.identifier" content="E17697-09"/>
<meta name="dcterms.isVersionOf" content="IMURG"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="im_glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="ch_intr.htm" title="Previous" type="text/html"/>
<link rel="Next" href="ch_phtalbapps.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17697-09.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">9/20</span> <!-- End Header -->
<script>
<!-- // <![CDATA[
window.name='ch_appdev'
// ]]> -->
</script> <script>
// <![CDATA[
function footdisplay(footnum,footnote) {
    var msg = window.open('', 'NewWindow' + footnum,
        'directories=no,height=120,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');

    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">');
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>');
    msg.document.write('Footnote ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><h1>Footnote ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/body><\/html>');
    msg.document.close();
    msg.focus();
}
// ]]>
</script> <noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript>
<div id="IMURG2000" class="chapter"><a id="BABIEAHF"></a>
<h1 class="chapter"><span class="secnum">2</span> Oracle Multimedia Application Development</h1>
<p>Oracle Multimedia enables you to develop either traditional client/server or two-tier applications, or multitier applications. Either method can then deploy Web applications to run on an application server tier, be tightly integrated with Oracle Database, and enable users to access the application from their desktop through a Web browser.</p>
<p>Using a complete development framework supported by class library interfaces, you can create production quality Oracle Multimedia applications for use in a production environment where users can interact with the application through either the standalone client interface or a Web browser. For Web applications, which are based on standards such as TCP/IP, HTTP, HTML, XML, and XHTML, this capability is facilitated by rapid developments in the underlying technology. As key software components become more tightly integrated, developers&#39; tasks to design, create, and manage Web applications become faster, easier, and simpler to implement.</p>
<p>Using either the object type interface or the relational interface, Oracle Multimedia provides Internet support for Oracle Fusion Middleware and Oracle Database and authoring tools so you can quickly develop Web-based applications to upload to the database, retrieve from it, and manipulate multimedia data for delivery to Web browsers.</p>
<p>This chapter includes these sections:</p>
<ul>
<li>
<p><a href="#CACJGEHE">Overview of the Application Development Environment</a></p>
</li>
<li>
<p><a href="#CACJDABC">Developing PL/SQL Client Applications Using the PL/SQL API</a></p>
</li>
<li>
<p><a href="#BJEDCGEI">Developing PL/SQL Web Applications</a></p>
</li>
<li>
<p><a href="#CCHJHFEG">Developing Java Client Applications Using JDBC</a></p>
</li>
<li>
<p><a href="#CHDGDBBC">Developing Java-Based Web Applications</a></p>
</li>
</ul>
<p>See these chapters for more sample applications:</p>
<div class="inftblruleinformal">
<table class="cellalignment1321" summary="List of sample applications">
<thead>
<tr class="cellalignment1312">
<th class="cellalignment1322" id="r1c1-t2">Chapter</th>
<th class="cellalignment1322" id="r1c2-t2">Sample Application</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r2c1-t2" headers="r1c1-t2"><a href="ch_phtalbapps.htm#BABGIDFB">Chapter 3</a></td>
<td class="cellalignment1318" headers="r2c1-t2 r1c2-t2">Describes the Oracle Multimedia Photo Album sample Web application, which is implemented using PL/SQL, Java servlets, and JavaServer Pages (JSP). This sample application demonstrates how to apply the steps described in <a href="#BJEDCGEI">Section 2.3</a> and <a href="#CHDGDBBC">Section 2.5</a> in a real Web application to upload and retrieve media data stored in a database.</td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r3c1-t2" headers="r1c1-t2"><a href="ch_cdwizapp.htm#BCEHIBCE">Chapter 4</a></td>
<td class="cellalignment1318" headers="r3c1-t2 r1c2-t2">Describes the Oracle Multimedia Code Wizard application, which lets you create PL/SQL stored procedures for the PL/SQL Gateway for uploading and retrieving media data stored in a database using Oracle Multimedia object types.</td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r4c1-t2" headers="r1c1-t2"><a href="ch_imexapp.htm#CHDCBCDA">Chapter 5</a></td>
<td class="cellalignment1318" headers="r4c1-t2 r1c2-t2">Describes the Oracle Multimedia Java API sample application, which is implemented using Java, JDBC, and Oracle Multimedia Java classes. This sample application demonstrates how to apply the steps described in <a href="#CCHJHFEG">Section 2.4</a> in a real Java application to upload and retrieve media data stored in a database.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblruleinformal" -->
<a id="CACJGEHE"></a>
<div id="IMURG11800" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">2.1</span> Overview of the Application Development Environment</h2>
<p>Oracle Multimedia supports application development<a id="sthref54"></a> by providing these tools and capabilities, which are briefly described in the following subsections:</p>
<ul>
<li>
<p><a href="#CCHFJBFC">Java Class Libraries and Other Packages and Interfaces</a></p>
</li>
<li>
<p><a href="#CCHDACCF">Integration With PL/SQL Gateway and PL/SQL Web Toolkit</a></p>
</li>
<li>
<p><a href="#CCHEADAA">Integration With Components in Other Oracle Development Tools</a></p>
</li>
<li>
<p><a href="#CCHIICFA">Integration With Third-Party Streaming Media Servers</a></p>
</li>
</ul>
<a id="CCHFJBFC"></a>
<div id="IMURG11815" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">2.1.1</span> Java Class Libraries and Other Packages and Interfaces</h3>
<p>Oracle Multimedia provides several Java class libraries<a id="sthref55"></a><a id="sthref56"></a> that enable access (insert, update, and retrieve) and manipulation (process) of multimedia data stored in the database. Oracle Multimedia also provides specialized Java class libraries.</p>
<p><a href="#CCHBDHJJ">Table 2-1</a> lists the Java application programming interfaces that are available for Oracle Multimedia, and points to additional information.</p>
<div id="IMURG11895" class="tblruleformal">
<p class="titleintable"><a id="sthref57"></a><a id="CCHBDHJJ"></a>Table 2-1 Java APIs for Oracle Multimedia</p>
<table class="cellalignment1321" title="Java APIs for Oracle Multimedia" summary="List of Multimedia Java APIs" dir="ltr">
<thead>
<tr class="cellalignment1312">
<th class="cellalignment1322" id="r1c1-t3">Name of Java API Class Library</th>
<th class="cellalignment1322" id="r1c2-t3">More Information</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r2c1-t3" headers="r1c1-t3">
<p>Oracle Multimedia Java API</p>
</td>
<td class="cellalignment1318" headers="r2c1-t3 r1c2-t3">
<p><a class="olink IMJVC" href="../IMJVC/toc.htm"><span class="italic">Oracle Multimedia Java API Reference</span></a></p>
</td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r3c1-t3" headers="r1c1-t3">
<p>Java Advanced Imaging (JAI) classes</p>
<p><span class="bold">Note:</span> These classes are included in the Oracle Multimedia Java API class library.</p>
</td>
<td class="cellalignment1318" headers="r3c1-t3 r1c2-t3">
<p><a class="olink IMJVC" href="../IMJVC/toc.htm"><span class="italic">Oracle Multimedia Java API Reference</span></a></p>
</td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r4c1-t3" headers="r1c1-t3">
<p>Oracle Multimedia Servlets and JSP Java API</p>
</td>
<td class="cellalignment1318" headers="r4c1-t3 r1c2-t3">
<p><a class="olink IMJSV" href="../IMJSV/toc.htm"><span class="italic">Oracle Multimedia Servlets and JSP Java API Reference</span></a></p>
</td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r5c1-t3" headers="r1c1-t3">
<p>Oracle Multimedia JSP Tag Library</p>
</td>
<td class="cellalignment1318" headers="r5c1-t3 r1c2-t3">
<p><a class="olink IMJSP" href="http://www.oracle.com/pls/topic/lookup?ctx=E50529-01&amp;id=IMJSP"><span class="italic">Oracle Multimedia JSP Tag Library Guide</span></a></p>
</td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r6c1-t3" headers="r1c1-t3">
<p>Oracle Multimedia DICOM Java API</p>
</td>
<td class="cellalignment1318" headers="r6c1-t3 r1c2-t3">
<p><a class="olink IMDJC" href="../IMDJC/toc.htm"><span class="italic">Oracle Multimedia DICOM Java API Reference</span></a></p>
</td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r7c1-t3" headers="r1c1-t3">
<p>Oracle Multimedia Mid-Tier Java API</p>
</td>
<td class="cellalignment1318" headers="r7c1-t3 r1c2-t3">
<p><a class="olink IMMTJ" href="../IMMTJ/toc.htm"><span class="italic">Oracle Multimedia Mid-Tier Java API Reference</span></a></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblruleformal" -->
<p>Oracle Multimedia also integrates with the Oracle Multimedia/Oracle Application Development Framework Business Components (ADF Business Components) integration package, and with C++ and traditional 3GLs through modern class library interfaces. Class libraries provide access to multimedia data stored in the database in several ways.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink JJDBC28025" href="../JJDBC/overvw.htm#JJDBC28025"><span class="italic">Oracle Database JDBC Developer&#39;s Guide</span></a> for more information about using JDBC</p>
</li>
<li>
<p><code><a href="http://www.oracle.com/technetwork/java/index.html">http://www.oracle.com/technetwork/java/index.html</a></code> for more information about Java Advanced Imaging (JAI)</p>
</li>
<li>
<p><a class="olink IMDCM13870" href="../IMDCM/release_changes.htm#IMDCM13870"><span class="italic">Oracle Multimedia DICOM Developer&#39;s Guide</span></a> for more information about Oracle Multimedia DICOM features and enhancements</p>
</li>
<li>
<p><a class="olink TDPJD101" href="../TDPJD/introduction.htm#TDPJD101"><span class="italic">Oracle Database 2 Day + Java Developer&#39;s Guide</span></a> for more information about Oracle JDeveloper and ADF Business Components</p>
</li>
</ul>
</div>
<p>The following subsections briefly describe each of these components.</p>
<p class="subhead2"><a id="IMURG11816"></a>Oracle Multimedia Java API Class Library</p>
<p>Using the Java database connectivity (JDBC) interface, the Oracle Multimedia Java API class library enables you to use Java proxy classes for Oracle Multimedia database objects to quickly develop Java applications for use on any tier (client, application server, or database) to manipulate and modify audio, image, and video data, or heterogeneous media data stored in a database. Oracle Multimedia Java API makes it possible for JDBC result sets to include both traditional relational data and Oracle Multimedia columns of object type media data, to easily select and operate on the result set, to access object attributes, and to invoke object methods. <a href="ch_intr.htm#i625297">Section 1.10.1</a> for general information, and <a href="#CCHJHFEG">Section 2.4</a> for a description of how to use Java and JDBC to develop media-rich Java client applications using this Java class library.</p>
<p class="subhead2"><a id="IMURG11817"></a>Java Advanced Imaging Classes</p>
<p>The Oracle Multimedia Java API class library includes several Java Advanced Imaging (JAI) classes. The Oracle Multimedia Java API describes three types of stream objects, which provide interfaces to BLOB and BFILE data, that can be used by JAI. These classes enable a JAI application to read and write image data stored in a database using Oracle Multimedia OrdImage objects, or in BLOBs or BFILEs. See <a href="ch_intr.htm#BABBAIEH">Section 1.10.4</a> for general information.</p>
<p class="subhead2"><a id="IMURG11818"></a>Oracle Multimedia Servlets and JSP Java API Class Library</p>
<p>The Oracle Multimedia Servlets and JSP Java API class library supports Web technologies, enabling you to quickly develop Java applications using Java servlets and JavaServer Pages (JSP). See <a href="ch_intr.htm#i618552">Section 1.10.3</a> for general information. <a href="#CHDGDBBC">Section 2.5</a> describes how to develop media-rich Java-based Web applications using this Java class library. <a href="ch_phtalbapps.htm#BCEEDIEB">Section 3.2</a> includes an example of a Java servlet application, and <a href="ch_phtalbapps.htm#BABHCJFJ">Section 3.3</a> includes an example of a JSP application.</p>
<p class="subhead2"><a id="IMURG11819"></a>Oracle Multimedia JSP Tag Library</p>
<p>The Oracle Multimedia JSP Tag Library is an extension of the Oracle Multimedia Servlets and JSP Java API class library. This Java class library provides JSP tags that simplify retrieving and uploading media data from and to Oracle Database in multimedia JSP Web applications.</p>
<p class="subhead2"><a id="IMURG11820"></a>Oracle Multimedia DICOM Java API Class Library</p>
<p>Oracle Multimedia DICOM Java API is a specialized class library that enables users to write Java applications using the Oracle Multimedia object designed to store Digital Imaging and Communications in Medicine (DICOM) data. See <a href="ch_intr.htm#CHDHIAFI">Section 1.6.4</a> for general information.</p>
<p class="subhead2"><a id="IMURG11821"></a>Oracle Multimedia Mid-Tier Java API Class Library</p>
<p>Oracle Multimedia Mid-Tier Java API is a specialized class library that enables users to write Java applications for extracting DICOM metadata outside of Oracle Database before the data is loaded into the database.</p>
<p class="subhead2"><a id="IMURG11822"></a>Oracle Multimedia/Oracle Application Development Framework Business Components Integration Package</p>
<p>The Oracle Multimedia/Oracle Application Development Framework Business Components (ADF Business Components) integration package includes the Oracle Multimedia domain classes and a set of utilities for use with Oracle JDeveloper. Oracle JDeveloper is a Java-integrated development environment (IDE) tool that supports the application framework (ADF Business Components), enabling you to build multitier, component-based Internet applications. See <a href="ch_intr.htm#i618552">Section 1.10.3</a> for general information.</p>
</div>
<!-- class="sect2" -->
<a id="CCHDACCF"></a>
<div id="IMURG11823" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">2.1.2</span> Integration With PL/SQL Gateway and PL/SQL Web Toolkit</h3>
<p>Oracle Multimedia uses the PL/SQL Gateway (mod_plsql) feature<a id="sthref58"></a><a id="sthref59"></a> of the Oracle HTTP Server and the PL/SQL Web Toolkit features of Oracle Fusion Middleware and Oracle Database to listen for browser requests, to execute stored PL/SQL procedures in the database using Oracle Net and Oracle Call Interface (OCI), and to generate an HTML page containing data and code for the response returned to the Web browser for display. As a Web application developer, you can write PL/SQL servlets and PL/SQL server pages (PSP) that invoke PL/SQL procedures stored in the database through an Oracle Net connection and OCI. See <a href="#BJEDCGEI">Section 2.3</a> for a description of how to use PL/SQL Gateway and PL/SQL Web Toolkit to develop PL/SQL Web applications. See <a href="ch_phtalbapps.htm#CHDCHCDE">Section 3.1</a> for an example of an application that uses the PL/SQL Gateway and PL/SQL Web Toolkit for Oracle Fusion Middleware and Oracle Database.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<p><a class="olink ADFNS015" href="../ADFNS/adfns_web.htm#ADFNS015"><span class="italic">Oracle Database Development Guide</span></a> for more information about developing PL/SQL Web applications</p>
</div>
</div>
<!-- class="sect2" -->
<a id="CCHEADAA"></a>
<div id="IMURG11824" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">2.1.3</span> Integration With Components in Other Oracle Development Tools</h3>
<p>Oracle Multimedia integrates Oracle development tools<a id="sthref60"></a><a id="sthref61"></a> with tightly integrated components to enable you to quickly and easily develop applications that provide access to (insert, update, and retrieve) and manipulation (process) of multimedia data stored in the database for delivery to Web browsers and client applications. These development tools include:</p>
<ul>
<li>
<p>Oracle JDeveloper</p>
</li>
<li>
<p>Oracle Designer</p>
</li>
</ul>
<p class="subhead2"><a id="IMURG11826"></a>Oracle JDeveloper</p>
<p>Oracle JDeveloper is an IDE tool, which is written 100% in Java, that supports the application framework (Oracle Application Development Framework Business Components). An Oracle Multimedia/ADF Business Components integration package includes the Oracle Multimedia domain classes and a set of utilities. The domain classes are wrappers of Oracle Multimedia Java API and inherit all the underlying multimedia retrieval, upload, and manipulation methods. The domain classes support the ADF Business Components APIs and provide built-in integrated multimedia capabilities, while the utility classes support the retrieval, rendering, and uploading of multimedia content. See <a href="ch_intr.htm#i618552">Section 1.10.3</a> for general information.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<p><a class="olink ESDKJ" href="http://www.oracle.com/pls/topic/lookup?ctx=E50529-01&amp;id=ESDKJ"><span class="italic">Oracle Fusion Middleware Extension SDK Reference for Oracle JDeveloper</span></a> in the Oracle Fusion Middleware Online Documentation Library for more information about this tool</p>
</div>
<p class="subhead2"><a id="IMURG11827"></a>Oracle Designer</p>
<p>Oracle Designer is a tool used to manage software configuration management for controlling the evolution of an application from identification of components, through initiation, evaluation, authorization, development, and implementation. Oracle Designer can generate C++ classes that enable applications running on the client, on Oracle Fusion Middleware, or on Oracle Database to call Oracle Multimedia methods.</p>
</div>
<!-- class="sect2" -->
<a id="CCHIICFA"></a>
<div id="IMURG11829" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">2.1.4</span> Integration With Third-Party Streaming Media Servers</h3>
<p>Oracle Multimedia integrates with third-party streaming media servers to enable dynamic and direct delivery of multimedia data stored in the database to a media player client. These third-party streaming servers include:</p>
<ul>
<li>
<p>Oracle Multimedia Plug-in for RealNetworks Server</p>
</li>
<li>
<p>Oracle Multimedia Plug-in for Microsoft Windows Media Services</p>
</li>
</ul>
<p>You can download these plug-ins from <a class="olink mm_otn_index" href="http://www.oracle.com/pls/topic/lookup?ctx=E50529-01&amp;id=mm_otn_index"><span class="italic">Oracle Multimedia</span></a> on the Oracle Technology Network Web site.</p>
<p class="subhead2"><a id="IMURG11830"></a>Oracle Multimedia Plug-in for RealNetworks Server</p>
<p>Oracle Multimedia Plug-in for RealNetworks Server is a data source plug-in that enables a <a id="sthref62"></a><a id="sthref63"></a>RealNetworks server to stream media data directly from Oracle Database to a media player client. The plug-in is installed with RealNetworks Server, and configured and managed using the administration tool of the streaming server. See <span class="italic">Oracle Multimedia Plug-in for RealNetworks Streaming Servers Readme</span>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<p><code><a href="http://www.realnetworks.com/">http://www.realnetworks.com/</a></code> for more information about streaming servers from RealNetworks</p>
</div>
<p class="subhead2"><a id="IMURG11831"></a>Oracle Multimedia Plug-in for Microsoft Windows Media Services</p>
<p>Oracle Multimedia Plug-in for Microsoft Windows Media Services enables <a id="sthref64"></a><a id="sthref65"></a>Microsoft Windows Media servers to stream multimedia content to a client directly from Oracle Database. This plug-in is installed on Windows 2003 Server, and configured with Windows Media Services. See <span class="italic">Oracle Multimedia Plug-in for Microsoft Windows Media Services Readme</span>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CACJDABC"></a>
<div id="IMURG2100" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">2.2</span> Developing PL/SQL Client Applications Using the PL/SQL API</h2>
<p>PL/SQL is a completely portable, high-performance transaction processing language that combines the data manipulation power of SQL with the data processing power of procedural languages.</p>
<p>This section briefly describes how to manipulate Oracle Multimedia database objects with the PL/SQL Application Programming Interface (API).<a id="sthref66"></a> The following Oracle Multimedia object types are available for storing media in the database:</p>
<ul>
<li>
<p>ORDAudio</p>
</li>
<li>
<p>ORDDoc</p>
</li>
<li>
<p>ORDImage</p>
</li>
<li>
<p>ORDVideo</p>
</li>
</ul>
<p>The examples in this section use the sample schemas, which may be installed when you install Oracle.</p>
<p>The following subsections describe how to use various components of the PL/SQL development environment:</p>
<ul>
<li>
<p><a href="#CHDJFECH">Setting Up Your Environment for PL/SQL</a></p>
</li>
<li>
<p><a href="#CHDIHFCB">Media Query in PL/SQL</a></p>
</li>
<li>
<p><a href="#CHDDFCEA">Media Download in PL/SQL</a></p>
</li>
<li>
<p><a href="#CHDGAFAI">Media Upload in PL/SQL</a></p>
</li>
<li>
<p><a href="#CHDBBIAE">Handling Oracle Multimedia Exceptions in PL/SQL</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink AIVUG1000" href="../AIVUG/ch_intro.htm#AIVUG1000"><span class="italic">Oracle Multimedia Reference</span></a> for details about the Oracle Multimedia object types and available methods in the PL/SQL API</p>
</li>
<li>
<p><a class="olink COMSC005" href="../COMSC/overview.htm#COMSC005"><span class="italic">Oracle Database Sample Schemas</span></a> for information about how the sample schemas were created and how you can use them</p>
</li>
</ul>
</div>
<a id="CHDJFECH"></a>
<div id="IMURG11537" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">2.2.1</span> Setting Up Your Environment for PL/SQL</h3>
<p>To access files with PL/SQL<a id="sthref67"></a>, you must create a directory object in the database that points to a directory that is accessible by the database server. For example, the following command creates the <code>MEDIA_DIR</code> directory in the sample schema:</p>
<pre>CREATE DIRECTORY MEDIA_DIR AS
    &#39;c:\oracle\product\10.2.0\db_1\demo\schema\product_media&#39;;
</pre>
<p>To retrieve media data from the database to a file, you must grant the write permission on the specified directory to the appropriate user. For example:</p>
<pre>GRANT WRITE ON DIRECTORY MEDIA_DIR TO SCOTT;
</pre>
<p>To upload media data from a file to the database, you must grant the read permission on the specified directory to the appropriate user. For example:</p>
<pre>GRANT READ ON DIRECTORY MEDIA_DIR TO SCOTT;
</pre>
<div class="infobox-note">
<p class="notep1">Caution:</p>
Performing any of these unsupported and prohibited actions could cause internal errors and security violations in the database management system.
<p>These users are created during database installation, and might change in future releases:</p>
<ul>
<li>
<p>Users in which Oracle-supplied Oracle Multimedia is installed: <code>ORDSYS</code>, <code>ORDPLUGINS</code>, <code>SI_INFORMTN_SCHEMA</code>, and <code>ORDDATA</code></p>
</li>
<li>
<p>User in which Oracle Multimedia Locator is installed if Oracle Spatial and Graph is not installed: <code>MDSYS</code></p>
</li>
</ul>
<p>Do not delete any of these users.</p>
<p>Do not connect to, modify, or change the privileges of any of these users or their contents (which are supplied by Oracle Multimedia and reserved by Oracle), with these exceptions:</p>
<ul>
<li>
<p>You can add user-defined packages to the user <code>ORDPLUGINS</code> (see <a href="ch_extend.htm#BABIEAHB">Chapter 7</a>).</p>
</li>
<li>
<p>DICOM administrators can store user-defined DICOM data model configuration documents in the user <code>ORDDATA</code>, using the DICOM data model repository API. See <a class="olink IMDCM13436" href="../IMDCM/part_three.htm#IMDCM13436"><span class="italic">Oracle Multimedia DICOM Developer&#39;s Guide</span></a> for more information about inserting documents into the data model repository.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CHDIHFCB"></a>
<div id="IMURG11538" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">2.2.2</span> Media Query in PL/SQL</h3>
<p>You can include media attributes (for example: height, width, and MIME type) in standard SQL queries <a id="sthref68"></a><a id="sthref69"></a>by using accessor methods (for example: getHeight, getWidth, and getMimeType). <a href="#CHDEDEEB">Example 2-1</a>, <a href="#CHDECAFF">Example 2-2</a>, and <a href="#CHDFJIAA">Example 2-3</a> show how to use these accessor methods to query one or more object attributes for image, audio, and video objects, respectively.</p>
<div id="IMURG11539" class="example">
<p class="titleinexample"><a id="CHDEDEEB"></a>Example 2-1 Image Query (Height, Width, and MimeType Attributes)</p>
<pre>SELECT t.product_id                  id,
       t.product_photo.getHeight()   height,
       t.product_photo.getWidth()    width,
       t.product_photo.getMimeType() mimetype
  FROM pm.online_media t;
</pre></div>
<!-- class="example" -->
<div id="IMURG11540" class="example">
<p class="titleinexample"><a id="CHDECAFF"></a>Example 2-2 Audio Query (MimeType Attribute)</p>
<pre>SELECT t.product_id                  id,
       t.product_audio.getMimeType() mimetype
  FROM pm.online_media t;
</pre></div>
<!-- class="example" -->
<div id="IMURG11541" class="example">
<p class="titleinexample"><a id="CHDFJIAA"></a>Example 2-3 Video Query (MimeType Attribute)</p>
<pre>SELECT t.product_id                  id,
       t.product_video.getMimeType() mimetype
  FROM pm.online_media t;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CHDDFCEA"></a>
<div id="IMURG11542" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">2.2.3</span> Media Download in PL/SQL</h3>
<p>To download media<a id="sthref70"></a><a id="sthref71"></a> from the database into a file on the file system, call the export method of the Oracle Multimedia object. The following code example exports the image in the row with product_id <code>3117</code> to a file named <code>3117.jpg</code> in the directory <code>MEDIA_DIR</code>. This code example highlights in bold the PL/SQL statements where this export operation takes place.</p>
<pre>DECLARE
  img ORDImage;
  ctx RAW(64) := NULL;
BEGIN
  SELECT  product_photo 
    INTO  img 
    FROM  pm.online_media
    WHERE <span class="codeinlinebold">product_id = 3117</span>;
  <span class="codeinlinebold">img.export(ctx, &#39;FILE&#39;, &#39;MEDIA_DIR&#39;, &#39;3117.jpg&#39;);</span>
END;
/
</pre></div>
<!-- class="sect2" -->
<a id="CHDGAFAI"></a>
<div id="IMURG11543" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">2.2.4</span> Media Upload in PL/SQL</h3>
<p>Media upload<a id="sthref72"></a><a id="sthref73"></a> means importing media data from the file system into the database tablespaces. The following series of steps is typical:</p>
<ol>
<li>
<p>Insert a new row into the table, creating new objects by using the init method of the Oracle Multimedia object type.</p>
</li>
<li>
<p>Call the import method of the Oracle Multimedia object to bring the data from the file system into the database.</p>
</li>
<li>
<p>Call the setProperties method of the Oracle Multimedia object to determine and populate the attributes of the object.</p>
</li>
<li>
<p>Update the table so that the Oracle Multimedia object in the table contains the attribute values extracted in the previous step.</p>
</li>
</ol>
<p>The PL/SQL code that implements these steps for inserting a new row in the <code>PM.ONLINE_MEDIA</code> table is shown in this example:</p>
<pre>DECLARE
  img ORDImage;
  aud ORDAudio;
  vid ORDVideo;
  ctx RAW(64) := NULL;
BEGIN
  -- Insert a new row into the pm.online_media table.
  DELETE FROM pm.online_media WHERE product_id = 3003;
  INSERT INTO pm.online_media 
         (product_id, 
          product_photo, 
          product_audio,
          product_video)
  VALUES (3003, 
          ORDImage.init(&#39;FILE&#39;, &#39;MEDIA_DIR&#39;, &#39;laptop.jpg&#39;),
          ORDAudio.init(&#39;FILE&#39;, &#39;MEDIA_DIR&#39;, &#39;laptop.mpa&#39;),
          ORDVideo.init(&#39;FILE&#39;, &#39;MEDIA_DIR&#39;, &#39;laptop.rm&#39;))
  RETURNING product_photo, product_audio, product_video
  INTO img, aud, vid;
  
  -- Bring the media into the database and populate the attributes.
  img.import(ctx); 
  -- ORDImage.import also calls ORDImage.setProperties.
  
  aud.import(ctx);
  aud.setProperties(ctx);
 
  vid.import(ctx);
  vid.setProperties(ctx);
    
  -- Update the table with the properties we have extracted.
  UPDATE pm.online_media
  SET    product_photo = img,
         product_audio = aud,
         product_video = vid
  WHERE  product_id = 3003;
  
  COMMIT;
END;
/
</pre></div>
<!-- class="sect2" -->
<a id="CHDBBIAE"></a>
<div id="IMURG11544" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">2.2.5</span> Handling Oracle Multimedia Exceptions in PL/SQL</h3>
<p>Possible errors that can occur during run time should always be handled in your application. This practice enables the program to continue its operation even when it encounters a run-time error. This practice also enables users to know what went wrong during program operation. Proper error handling practices ensure that, whenever possible, you are always able to recover from an error while running an application. In addition, proper error handling provides you with the information you need so you always know what went wrong.</p>
<p>This section demonstrates proper error handling practices using code examples. These examples show how to handle some common Oracle Multimedia errors and other types of errors in PL/SQL programs. These examples are extracted from the PL/SQL sample applications that are described in <a href="ch_phtalbapps.htm#BABGIDFB">Chapter 3</a> and <a href="ch_cdwizapp.htm#BCEHIBCE">Chapter 4</a>.</p>
<p>When handling exceptions<a id="sthref74"></a><a id="sthref75"></a>, PL/SQL uses exception blocks. For example, in PL/SQL, the exception can appear as:</p>
<pre>BEGIN
&lt;some program logic&gt;
EXCEPTION
     WHEN OTHERS THEN
     &lt;some exception logic&gt;
END;
</pre>
<p>When you design, code, and debug your application, you are aware of the places in your program where processing might stop due to a failure to anticipate an error. Those are the places in your program where you must add exception handling blocks to handle the potential errors.</p>
<p>The examples in this section describe exception handling in the Oracle Multimedia PL/SQL Web Toolkit Photo Album sample application.</p>
<p>The following subsections provide additional details and examples of exception handling in PL/SQL:</p>
<ul>
<li>
<p><a href="#CCHBFCFI">Handling the Setting of Properties for Unknown Image Formats in PL/SQL</a></p>
</li>
<li>
<p><a href="#CCHBIDIG">Handling Image Processing for Unknown Image Formats in PL/SQL</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<p><a class="olink LNPLS007" href="../LNPLS/errors.htm#LNPLS007"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information about handling PL/SQL exceptions</p>
</div>
<a id="CCHBFCFI"></a>
<div id="IMURG11545" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">2.2.5.1</span> Handling the Setting of Properties for Unknown Image Formats in PL/SQL</h4>
<p>If your program tries to set the properties of an uploaded image (it reads the image data to get the values of the object attributes so it can store them in the appropriate attribute fields) and the image format is not recognized, then the setProperties( ) method fails. To catch this exception and work around this potential problem, the application uses the following exception block:</p>
<pre>BEGIN
   new_image.setProperties();
EXCEPTION
   WHEN OTHERS THEN
         new_image.contentLength := upload_size;
         new_image.mimeType := upload_mime_type;
END;
</pre>
<p>In this example, this exception handler sets the MIME type and length of the image based on the values from the upload table described at the beginning of the <code>insert_new_photo</code> procedure. The browser sets a MIME type header when the file is uploaded. The application reads this header to set the ORDImage field.</p>
</div>
<!-- class="sect3" -->
<a id="CCHBIDIG"></a>
<div id="IMURG11546" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">2.2.5.2</span> Handling Image Processing for Unknown Image Formats in PL/SQL</h4>
<p>If your program tries to process an image in cases when the image format is unknown, the processCopy( ) method always fails. To work around this potential problem, the application uses the following exception block:</p>
<pre>BEGIN
   new_image.processCopy( &#39;maxScale=50,50&#39;, new_thumb);
EXCEPTION
   WHEN OTHERS THEN
      new_thumb.deleteContent();
      new_thumb.contentLength := 0;
END;
</pre>
<p>In this example from the Oracle Multimedia PL/SQL Web Toolkit Photo Album application, when the image format is unknown and a thumbnail image cannot be created, this exception handler deletes the content of the thumbnail image and sets its length to zero.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BJEDCGEI"></a>
<div id="IMURG2200" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">2.3</span> Developing PL/SQL Web Applications</h2>
<p>SQL developers who are familiar with the database can develop Web applications that exclusively use Oracle Fusion Middleware and Oracle Database using the PL/SQL development environment. With the PL/SQL development environment, developers can come quickly up to speed to develop PL/SQL-based Web applications<a id="sthref76"></a>.</p>
<p>Developing Web applications using PL/SQL consists of developing one or more PL/SQL packages<a id="sthref77"></a> consisting of sets of stored procedures that interact with Web browsers through HTTP. Stored procedures can be executed in several ways:</p>
<ul>
<li>
<p>From a hypertext link that calls a stored procedure when it is selected</p>
</li>
<li>
<p>By clicking <span class="bold">Submit</span> on an HTML form to denote the completion of a task such as filling out a form supplied on the HTML page</p>
</li>
<li>
<p>By passing parameters to a stored procedure based on user choices from a list</p>
</li>
</ul>
<p>Information in the stored procedure, such as tagged HTML text, is displayed in the Web browser as a Web page. These dynamic Web pages are generated by the database and are based on the database contents and the input parameters passed in to the stored procedure. Using PL/SQL stored procedures is especially efficient and powerful for generating dynamic Web page content.</p>
<p>There are two ways of generating HTML output from PL/SQL<a id="sthref78"></a>:</p>
<ul>
<li>
<p>Using function calls to generate each HTML tag for output using the PL/SQL Web Toolkit package that is part of Oracle Fusion Middleware and Oracle Database and whose <code>owa</code> packages are loaded into a common schema so that all users can access it</p>
</li>
<li>
<p>Embedding PL/SQL code in Web pages (PL/SQL server pages)</p>
</li>
</ul>
<p>Use Oracle Multimedia when media data such as images, audio, video, or combinations of all three are to be uploaded into and retrieved from database tables using the Oracle Multimedia object types and their respective sets of methods.</p>
<p>Media upload procedure<a id="sthref79"></a><a id="sthref80"></a>s first perform a SQL INSERT operation to insert a row of data in the media table, which also initializes instances of the respective Oracle Multimedia object columns with an empty BLOB. Next, a SQL SELECT FOR UPDATE operation selects the object columns for update. Finally, a SQL UPDATE operation updates the media objects in their respective columns. Oracle Multimedia methods are called to perform these tasks:</p>
<ul>
<li>
<p>Initialize the object columns with an empty BLOB.</p>
</li>
<li>
<p>Set attributes to indicate media data is stored internally in a BLOB.</p>
</li>
<li>
<p>Get values of the object attributes and store them in the object attributes.</p>
</li>
<li>
<p>When exceptions occur, determine the length of the BLOB content and its MIME type.</p>
</li>
</ul>
<p>Media retrieval operations<a id="sthref81"></a><a id="sthref82"></a> involve these tasks:</p>
<ul>
<li>
<p>Retrieving the object from the database into a local object</p>
</li>
<li>
<p>Checking the cache validity of the object based on its updated time versus that of the HTTP header time</p>
</li>
<li>
<p>Determining where the media object is located: in the database, in a BFILE, or at a URL location; then, getting the media, and downloading it for display on an HTML page</p>
</li>
</ul>
<p>Oracle Multimedia methods are called to get the time that the media object was last updated, to determine if the media is stored locally in the database, in a BFILE, or at a URL location, to get the MIME type of the media object, and finally to retrieve the media data.</p>
<p>The following subsection describes how to use some Web components of the PL/SQL development environment:</p>
<ul>
<li>
<p><a href="#CCHFBBFF">Using the PL/SQL Gateway and PL/SQL Web Toolkit</a></p>
</li>
</ul>
<a id="CCHFBBFF"></a>
<div id="IMURG11547" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">2.3.1</span> Using the PL/SQL Gateway and PL/SQL Web Toolkit</h3>
<p>Oracle Fusion Middleware and Oracle Database install Oracle HTTP Server powered by the Apache HTTP server that contains the PL/SQL Gateway to communicate directly with a client Web browser.</p>
<p>Oracle HTTP Server serves mainly the static HTML files, images, and so on, that a Web application uses, and is usually located in the file system where Oracle HTTP Server is installed. Oracle HTTP Server contains modules or plug-ins that extend its functions. One of these modules supplied by Oracle is the mod_plsql module, also known as the PL/SQL Gateway. The PL/SQL Gateway serves data dynamically from the database to Web browsers by calling PL/SQL stored procedures. The PL/SQL Gateway receives requests from a Web browser in the form of PL/SQL servlets or PL/SQL server pages that are mapped to PL/SQL stored procedure calls. PL/SQL stored procedures retrieve data from the database and generate an HTTP response containing the data and code from the PL/SQL Web Toolkit to display the generated Web page in a Web browser. The PL/SQL Web Toolkit contains a set of packages called <code>htp</code>, <code>htf</code>, and <code>owa</code> packages that can be used in the stored procedures to get information about the request, construct HTML tags, and return header information to the client Web browser.</p>
<p><a href="#BABEJCBI">Figure 2-1</a> shows these main components of the PL/SQL development environment, Oracle HTTP Server (a component of Oracle Fusion Middleware and Oracle Database), the Web browser, and the database. The following information describes how a client Web browser request is turned into a Web page response from the execution of the PL/SQL procedure:</p>
<ol>
<li>
<p>A client Web browser sends a PL/SQL server page or servlet request to Oracle HTTP Server.</p>
</li>
<li>
<p>Oracle HTTP Server routes the request to the PL/SQL Gateway (mod_plsql).</p>
</li>
<li>
<p>The PL/SQL Gateway forwards the request to the database using configuration information stored in the database access descriptor (DAD) and connects to the database.</p>
</li>
<li>
<p>The PL/SQL Gateway prepares the call parameters and invokes the PL/SQL package and the PL/SQL stored procedure in the application.</p>
</li>
<li>
<p>The PL/SQL procedure generates an HTML page using data from the database and special packages in the PL/SQL Web Toolkit accessed from the database. The PL/SQL Web Toolkit contains a set of packages called <code>htp</code>, <code>htf</code>, and <code>owa</code> packages that are used in the stored procedures to get information about the request, construct HTML tags, and return header information back to the client Web browser as the response returned to the PL/SQL Gateway.</p>
</li>
<li>
<p>The PL/SQL Gateway sends the response to Oracle HTTP Server.</p>
</li>
<li>
<p>Oracle HTTP Server sends the response to the client Web browser for display as a formatted Web page.</p>
</li>
</ol>
<div id="IMURG11548" class="figure">
<p class="titleinfigure"><a id="BABEJCBI"></a>Figure 2-1 Components of the PL/SQL Development Environment</p>
<img width="431" height="222" src="img/imurg001.gif" alt="Description of Figure 2-1 follows"/><br/>
<a id="sthref83" href="img_text/imurg001.htm">Description of &#34;Figure 2-1 Components of the PL/SQL Development Environment&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>Usually, the returned formatted Web page has one or more additional links, and each link, when selected, sends another request to the database through the PL/SQL Gateway to execute one or more stored procedures. The generated response displays data on the client Web page usually with additional links, which, when selected, execute more stored procedures that return the generated response for display as yet another formatted Web page, and so on. This is how the PL/SQL application in the PL/SQL development environment is designed to work.</p>
<p>Web application developers who use the PL/SQL development environment, create a PL/SQL package specification and body that describe procedures and functions that comprise the application. The package specification defines the procedures and functions used by the application, and the package body is the implementation of each procedure and function. All packages are compiled and stored in the database to perform specific operations for accessing data in the database and formatting HTML output for Web page presentation. To invoke these stored PL/SQL procedures, Web application developers use the request/response PL/SQL servlets and PL/SQL server pages (PSP) to enable Web browser clients to send requests and get back responses using HTTP.</p>
<p>Oracle HTTP Server maps a URL entered in a browser to a specific PL/SQL procedure stored in the database. It does this by storing specific configuration information in a DAD for each stored procedure. Thus, each DAD contains the database connection information that the Web server requires to translate the URL entered into a database connection to call the stored procedure.</p>
<p>Oracle HTTP Server listens for a request, routes the request to the PL/SQL Gateway, which forwards it to the database. Configuration information values stored in a DAD determine the database alias to use, the connection string to use for remote access, the procedure to use for uploading or downloading documents, and the user name and password information to enable access to the database. From the Web browser, the user specifies the URL that invokes the PL/SQL Gateway. The URL has a defined format for specifying all the required and optional parameters, including the location of the DAD and the name of the PL/SQL stored procedure to run, as shown in <a href="#BABDDDBD">Example 2-4</a>.</p>
<div id="IMURG11549" class="example">
<p class="titleinexample"><a id="BABDDDBD"></a>Example 2-4 URL Format to Invoke mod_plsql in a Web Browser</p>
<pre>protocol://hostname[:port number]/DAD-name/[[!][schema name.]
 [package name.]procedure_name[?query_string]]
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<p><a class="olink YPMOD" href="http://www.oracle.com/pls/topic/lookup?ctx=E50529-01&amp;id=YPMOD"><span class="italic">Oracle Fusion Middleware User&#39;s Guide for mod_plsql</span></a> in the Oracle Fusion Middleware Online Documentation Library for a detailed description of each parameter and the available options</p>
</div>
<p>To use the Oracle Multimedia Photo Album sample application and the PL/SQL Web Toolkit described in <a href="ch_phtalbapps.htm#CHDCHCDE">Section 3.1</a>, the URL can be simplified to the format shown in <a href="#CCHFEFDJ">Example 2-5</a>.</p>
<div id="IMURG11550" class="example">
<p class="titleinexample"><a id="CCHFEFDJ"></a>Example 2-5 URL Format to Invoke mod_plsql for the Photo Album Application</p>
<pre>protocol://<span class="codeinlineitalic">&lt;hostname&gt;</span>[:<span class="codeinlineitalic">&lt;port-number&gt;</span>]/DAD-name/]procedure_name
</pre></div>
<!-- class="example" -->
<p>When the URL is entered in the Web browser, it includes the protocol (HTTP or HTTPS), the name of the hosting Web server, and the port number to which it is listening to handle requests. Next, the specified virtual path includes <code>/pls/&lt;DAD-name&gt;</code> to indicate that the Web server is configured to invoke mod_plsql, and the location of the DAD on the Web server.</p>
<p>In <a href="#BABDDDBD">Example 2-4</a>, the last five parameters include the exclamation point (!) character, schema name, package name, procedure name, and query string. From the syntax, the exclamation point, schema name, package name, and query string parameters are optional; only the procedure name is required.</p>
<p>The exclamation point indicates that flexible parameter passing is being used. The schema name, if omitted, is resolved based on the user name. The package name, if omitted, means the procedure is standalone. The query string parameters are for the stored procedure and follow a special format. Of these five parameters, the procedure name must be specified in both the DAD and the URL. The other four parameters are specified in either the DAD or the URL, or not at all, depending on the application.</p>
<p>The URL displays the home page for the specified DAD. When the URL is entered in the address field of the Web browser page, it invokes either the specified DAD location only, or the specified DAD location along with the procedure name, or the specified DAD location along with the <code>schema.package.procedure</code> name. The response is returned as an HTML page. The HTML page contains the requested data and any other specified code for display in the client&#39;s Web browser. The Code Wizard described in <a href="ch_cdwizapp.htm#BCEHIBCE">Chapter 4</a> demonstrates how this operation works. For example, to invoke the Code Wizard administration URL, enter the following URL shown in that chapter:</p>
<pre>http://<span class="codeinlineitalic">&lt;hostname&gt;</span>:&lt;port-number&gt;/pls/ordcwadmin
</pre>
<p>The virtual path includes <code>pls</code> to indicate that the Web server is configured to invoke mod_plsql, followed by the name of the DAD used for the Code Wizard administrator, <code>ordcwadmin</code>.</p>
<p>When the HTML page is displayed, it resolves to the following URL for the Code Wizard administrator:</p>
<pre>http://<span class="codeinlineitalic">&lt;hostname&gt;</span>:<span class="codeinlineitalic">&lt;port-number&gt;</span>/pls/ordcwadmin/ORDCWPKG.menu
</pre>
<p><code>ORDCWPKG.menu</code> represents the <code>package.procedure</code> name, which is specified as the default home page in the <code>ordcwadmin</code> DAD.</p>
<p>When the PL/SQL Gateway is invoked, it uses the stateless model and does not permit a transaction to span across multiple HTTP requests. In this stateless model, applications typically can create a session to maintain state by using one of these techniques: HTTP cookies, a hidden HTML field as an HTML form element of the HTML Form package, or storage of vital information in database tables for query.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<p><a class="olink ADFNS015" href="../ADFNS/adfns_web.htm#ADFNS015"><span class="italic">Oracle Database Development Guide</span></a> for more information about PL/SQL Web applications</p>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CCHJHFEG"></a>
<div id="IMURG2300" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">2.4</span> Developing Java Client Applications Using JDBC</h2>
<p>Developers who are familiar with Java and Java database connectivity (JDBC) can write media-rich Java applications<a id="sthref84"></a> using Oracle Multimedia Java API. The classes in Oracle Multimedia Java API<a id="sthref85"></a> are the Java proxy classes for Oracle Multimedia database objects. These Java classes provide access to Oracle Multimedia database objects through JDBC<a id="sthref86"></a> in a Java application.</p>
<p>The Java classes in Oracle Multimedia Java API are included in the <code>oracle.ord.im.*</code> package. These Java classes are named similarly to the Oracle Multimedia database objects, and in compliance with the standard Java naming convention:</p>
<ul>
<li>
<p>OrdAudio</p>
</li>
<li>
<p>OrdDoc</p>
</li>
<li>
<p>OrdImage</p>
</li>
<li>
<p>OrdVideo</p>
</li>
</ul>
<p>Developers who write medical imaging applications can use Oracle Multimedia DICOM Java API and Oracle Multimedia Mid-Tier Java API. In Oracle Multimedia DICOM Java API<a id="sthref87"></a>, the OrdDicom class provides access to Oracle Multimedia DICOM database objects in a Java application. The classes in Oracle Multimedia Mid-Tier Java API<a id="sthref88"></a> enable developers to write Java applications for extracting DICOM metadata outside of Oracle Database.</p>
<p>The examples in this section use the sample schemas, which may be installed when you install Oracle.</p>
<p>The following subsections describe how to use various components of the Java development environment with JDBC:</p>
<ul>
<li>
<p><a href="#CHDGJDIB">Setting Up Your Environment for Java</a></p>
</li>
<li>
<p><a href="#CHDEEIJI">Media Retrieval in Java</a></p>
</li>
<li>
<p><a href="#CHDJJAHA">Media Upload in Java</a></p>
</li>
<li>
<p><a href="#CHDFDCII">Handling Oracle Multimedia Exceptions in Java</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink IMJVC" href="../IMJVC/toc.htm"><span class="italic">Oracle Multimedia Java API Reference</span></a> for details about the available classes and methods in this Java API</p>
</li>
<li>
<p><a class="olink IMDJC" href="../IMDJC/toc.htm"><span class="italic">Oracle Multimedia DICOM Java API Reference</span></a> for details about the available classes and methods in this Java API</p>
</li>
<li>
<p><a class="olink IMMTJ" href="../IMMTJ/toc.htm"><span class="italic">Oracle Multimedia Mid-Tier Java API Reference</span></a> for details about the available classes and methods in this Java API</p>
</li>
<li>
<p><a class="olink IMDCM13870" href="../IMDCM/release_changes.htm#IMDCM13870"><span class="italic">Oracle Multimedia DICOM Developer&#39;s Guide</span></a> for more information about Oracle Multimedia DICOM features and enhancements</p>
</li>
<li>
<p><a class="olink COMSC005" href="../COMSC/overview.htm#COMSC005"><span class="italic">Oracle Database Sample Schemas</span></a> for information about how the sample schemas were created and how you can use them</p>
</li>
</ul>
</div>
<a id="CHDGJDIB"></a>
<div id="IMURG11551" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">2.4.1</span> Setting Up Your Environment for Java</h3>
<p>Before you can begin using any of the Java APIs provided by Oracle Multimedia, you must set up your environment to compile and run Java programs<a id="sthref89"></a>.</p>
<p>Follow these steps:</p>
<a id="CHDIACDC"></a>
<ol>
<li>
<p>Specify the environment variable CLASSPATH, and ensure that this variable includes the appropriate Oracle Java archive (JAR) files for the Oracle Multimedia features and any other features that you intend to use.</p>
<p>For each Oracle JAR file, <a href="#CACDBHED">Table 2-2</a> lists the name of the file and its contents, the Oracle Multimedia and other features that require it, and details about the JDK version, the platform, and the path name under the <code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code> directory where you can obtain it.</p>
<div id="IMURG11783" class="tblruleformalwidemax">
<p class="titleintable"><a id="sthref90"></a><a id="CACDBHED"></a>Table 2-2 Java Archive Files for Oracle Multimedia</p>
<table class="cellalignment1321" title="Java Archive Files for Oracle Multimedia" summary="List of Java libraries for Oracle Multimedia" dir="ltr">
<thead>
<tr class="cellalignment1312">
<th class="cellalignment1322" id="r1c1-t14">Oracle JAR File and Contents</th>
<th class="cellalignment1322" id="r1c2-t14">Required By</th>
<th class="cellalignment1322" id="r1c3-t14">JDK Version, Platform, and Location</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r2c1-t14" headers="r1c1-t14">
<p>Name: <code>ordim.jar</code></p>
<p>Description:</p>
<p>Oracle Multimedia Java proxy classes</p>
</td>
<td class="cellalignment1318" headers="r2c1-t14 r1c2-t14">
<p>All Oracle Multimedia features</p>
</td>
<td class="cellalignment1318" headers="r2c1-t14 r1c3-t14">
<p>JDK 6 or later, on Linux and UNIX:</p>
<p><code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>/ord/jlib/ordim.jar</code></p>
<p>JDK 6 or later, on Windows:</p>
<p><code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>\ord\jlib\ordim.jar</code></p>
</td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r3c1-t14" headers="r1c1-t14">
<p>Name: <code>ojdbc6.jar</code></p>
<p>Description:</p>
<p>Oracle JDBC library</p>
</td>
<td class="cellalignment1318" headers="r3c1-t14 r1c2-t14">
<p>All Oracle Multimedia features</p>
</td>
<td class="cellalignment1318" headers="r3c1-t14 r1c3-t14">
<p>JDK 6 or later, on Linux and UNIX:</p>
<p><code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>/jdbc/lib/ojdbc6.jar</code></p>
<p>JDK 6 or later, on Windows:</p>
<p><code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>\jdbc\lib\ojdbc6.jar</code></p>
</td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r4c1-t14" headers="r1c1-t14">
<p>Name: <code>xdb.jar</code></p>
<p>Description:</p>
<p>Oracle XDB Java classes library</p>
</td>
<td class="cellalignment1318" headers="r4c1-t14 r1c2-t14">
<p>DICOM feature</p>
<p>Oracle Multimedia metadata extraction</p>
</td>
<td class="cellalignment1318" headers="r4c1-t14 r1c3-t14">
<p>JDK 6 or later, on Linux and UNIX:</p>
<p><code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>/rdbms/jlib/xdb.jar</code></p>
<p>JDK 6 or later, on Windows:</p>
<p><code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>\rdbms\jlib\xdb.jar</code></p>
</td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r5c1-t14" headers="r1c1-t14">
<p>Name: <code>xmlparserv2.jar</code></p>
<p>Description:</p>
<p>Oracle XML Parser library</p>
</td>
<td class="cellalignment1318" headers="r5c1-t14 r1c2-t14">
<p>DICOM feature</p>
<p>Oracle Multimedia metadata extraction</p>
<p>Mid-Tier Java API feature</p>
</td>
<td class="cellalignment1318" headers="r5c1-t14 r1c3-t14">
<p>JDK 6 or later, on Linux and UNIX:</p>
<p><code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>/lib/xmlparserv2.jar</code></p>
<p>JDK 6 or later, on Windows:</p>
<p><code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>\lib\xmlparserv2.jar</code></p>
</td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r6c1-t14" headers="r1c1-t14">
<p>Name: <code>orddcmmt.jar</code></p>
<p>Description:</p>
<p>Oracle Multimedia Mid-Tier Java classes</p>
</td>
<td class="cellalignment1318" headers="r6c1-t14 r1c2-t14">
<p>Mid-Tier Java API feature</p>
</td>
<td class="cellalignment1318" headers="r6c1-t14 r1c3-t14">
<p>JDK 6 or later, on Linux and UNIX:</p>
<p><code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>/ord/jlib/orddcmmt.jar</code></p>
<p>JDK 6 or later, on Windows:</p>
<p><code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>\ord\jlib\orddcmmt.jar</code></p>
</td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r7c1-t14" headers="r1c1-t14">
<p>Name: <code>ordimdcm.jar</code></p>
<p>Description:</p>
<p>Oracle Multimedia DICOM Java library</p>
</td>
<td class="cellalignment1318" headers="r7c1-t14 r1c2-t14">
<p>Mid-Tier Java API feature</p>
</td>
<td class="cellalignment1318" headers="r7c1-t14 r1c3-t14">
<p>JDK 6 or later, on Linux and UNIX:</p>
<p><code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>/ord/jlib/ordimdcm.jar</code></p>
<p>JDK 6 or later, on Windows:</p>
<p><code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>\ord\jlib\ordimdcm.jar</code></p>
</td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r8c1-t14" headers="r1c1-t14">
<p>Name: <code>orddicom.jar</code></p>
<p>Description:</p>
<p>Oracle Multimedia DICOM Java proxy classes</p>
</td>
<td class="cellalignment1318" headers="r8c1-t14 r1c2-t14">
<p>DICOM feature</p>
</td>
<td class="cellalignment1318" headers="r8c1-t14 r1c3-t14">
<p>JDK 6 or later, on Linux and UNIX:</p>
<p><code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>/ord/jlib/orddicom.jar</code></p>
<p>JDK 6 or later, on Windows:</p>
<p><code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>\ord\jlib\orddicom.jar</code></p>
</td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r9c1-t14" headers="r1c1-t14">
<p>Name: <code>ordhttp.jar</code></p>
<p>Description:</p>
<p>Oracle Multimedia Servlets and JSP Java HTTP classes</p>
</td>
<td class="cellalignment1318" headers="r9c1-t14 r1c2-t14">
<p>Java servlets and JavaServer Pages (JSP) applications</p>
</td>
<td class="cellalignment1318" headers="r9c1-t14 r1c3-t14">
<p>JDK 6 or later, on Linux and UNIX:</p>
<p><code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>/ord/jlib/ordhttp.jar</code></p>
<p>JDK 6 or later, on Windows:</p>
<p><code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>\ord\jlib\ordhttp.jar</code></p>
</td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r10c1-t14" headers="r1c1-t14">
<p>Name: <code>ordjsptag.jar</code></p>
<p>Description:</p>
<p>Oracle Multimedia JSP Tag Library</p>
<p>(Optional)</p>
</td>
<td class="cellalignment1318" headers="r10c1-t14 r1c2-t14">
<p>JavaServer Pages (JSP) applications</p>
</td>
<td class="cellalignment1318" headers="r10c1-t14 r1c3-t14">
<p>JDK 6 or later, on Linux and UNIX:</p>
<p><code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>/ord/jlib/ordjsptag.jar</code></p>
<p>JDK 6 or later, on Windows:</p>
<p><code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>\ord\jlib\ordjsptag.jar</code></p>
</td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r11c1-t14" headers="r1c1-t14">
<p>Name: <code>orai18n.jar</code></p>
<p>Description:</p>
<p>NLS Character Set Conversion library</p>
<p>(Optional)</p>
</td>
<td class="cellalignment1318" headers="r11c1-t14 r1c2-t14">
<p>NLS character set conversion required<a id="sthref91" href="#sthref91" onclick="footdisplay(1,&#34;If NLS character set conversion is required between the client application and the database, you must include the \u003ccode\u003eorai18n.jar\u003c/code\u003e file in the CLASSPATH variable. If NLS character set conversion is required, but the appropriate library is not specified, character-based attributes of Oracle Multimedia object types may be returned as hexadecimal-encoded strings. See \u003cspan class=\&#34;italic\&#34;\u003eOracle Database JDBC Developer\x27s Guide\u003c/span\u003e for more information about NLS character set conversion.&#34;)"><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></p>
</td>
<td class="cellalignment1318" headers="r11c1-t14 r1c3-t14">
<p>JDK 6 or later, on Linux and UNIX:</p>
<p><code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>/jlib/orai18n.jar</code></p>
<p>JDK 6 or later, on Windows:</p>
<p><code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>\jlib\orai18n.jar</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblruleformalwidemax" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>If NLS character set conversion is required between the client application and the database, you must include the <code>orai18n.jar</code> file in the CLASSPATH variable. If NLS character set conversion is required, but the appropriate library is not specified, character-based attributes of Oracle Multimedia object types may be returned as hexadecimal-encoded strings. See <span class="italic">Oracle Database JDBC Developer&#39;s Guide</span> for more information about NLS character set conversion.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are using the JDBC OCI driver, specify the location of the JDBC OCI shared library in one of these variables:
<ul>
<li>
<p>LD_LIBRARY_PATH (for Linux or UNIX)</p>
</li>
<li>
<p>PATH (for Windows)</p>
</li>
</ul>
<p>Depending on your platform, store the JDBC OCI shared library at one of these locations under the <code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code> directory:</p>
<br/>
<code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>/lib</code> (for <code>libocijdbc12.so</code> on Linux and UNIX)<br/>
<code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>\bin</code> (for <code>ocijdbc12.dll</code> on Windows)<br/>
<p>Because this library path is shared, it may have been specified previously to enable the use of other client applications, such as SQL*Plus.</p>
</div>
</li>
<li>
<p>Add one or more of the following import statements to the Java program:</p>
<p>Along with the standard JDBC classes included in the <code>java.sql</code> package, you must also import the Oracle JDBC extension class <code>oracle.jdbc.OracleResultSet</code>, as follows:</p>
<pre>import oracle.jdbc.OracleResultSet;
</pre>
<p>Based on the type of media to be handled in the Java application, you might also have to add one or more of following import statements:</p>
<pre>import oracle.ord.im.OrdAudio;
import oracle.ord.im.OrdDoc;
import oracle.ord.im.OrdImage;
import oracle.ord.im.OrdVideo;
</pre></li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CHDEEIJI"></a>
<div id="IMURG11552" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">2.4.2</span> Media Retrieval in Java</h3>
<p>Oracle Multimedia objects can be retrieved into Java applications<a id="sthref92"></a> as Java proxy objects to the Oracle Multimedia database objects with the same names: OrdAudio, OrdDoc, OrdImage, and OrdVideo. After the JDBC connection is established, follow these steps to retrieve Oracle Multimedia Java objects:</p>
<ol>
<li>
<p>Create the JDBC statement to select Oracle Multimedia objects from the database:</p>
<pre>String query = &#34;select product_photo, product_audio,&#34;+
  &#34; product_video, product_testimonials from&#34; +   
  &#34; pm.online_media where product_id=3117&#34;;
PreparedStatement pstmt = conn.prepareStatement(query);
</pre></li>
<li>
<p>Execute the query and obtain the result set:</p>
<pre>OracleResultSet rset = (OracleResultSet)pstmt.executeQuery();
</pre></li>
<li>
<p>Retrieve the Oracle Multimedia Java object from the result set:</p>
<pre>if ( rset.next() )
{

  OrdImage imgProxy = (OrdImage)rset.getORAData(
          &#34;product_photo&#34;, OrdImage.getORADataFactory());
  OrdAudio audProxy = (OrdAudio)rset.getORAData(
          &#34;product_audio&#34;, OrdAudio.getORADataFactory());
  OrdVideo vidProxy = (OrdVideo)rset.getORAData(
          &#34;product_video&#34;, OrdVideo.getORADataFactory());
  OrdDoc docProxy = (OrdDoc)rset.getORAData(
          &#34;product_testimonials&#34;,
          OrdDoc.getORADataFactory());
}
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
In your Java program environment, be sure to use the same version for both the Oracle Multimedia Java Client library (<code>ordim.jar</code>) and the Oracle JDBC library.</div>
</li>
<li>
<p>Retrieve the media attributes. Media attributes can be retrieved directly from Oracle Multimedia Java objects. For example:</p>
<pre>int height = imgProxy.getHeight();
int width = imgProxy.getWidth();
String audFormat = audProxy.getFormat();
String vidMimetype = vidProxy.getMimeType();
</pre></li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CHDJJAHA"></a>
<div id="IMURG11553" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">2.4.3</span> Media Upload in Java</h3>
<p>Follow these steps to upload media data into Oracle Multimedia database objects in a Java<a id="sthref93"></a> application:</p>
<a id="CHDBFECH"></a>
<ol>
<li>
<p>Enter this statement to enable the JDBC connection object to set the autocommit flag to <code>false</code>:</p>
<pre>conn.setAutoCommit(false);
</pre></li>
<li>
<p>Retrieve Oracle Multimedia Java objects from the database for updating. You can load media data into existing Oracle Multimedia objects in a table or into nonexisting Oracle Multimedia objects by creating a new row in a table.</p>
<p>The following example includes a query you can use to load media data into existing Oracle Multimedia objects<a id="sthref94"></a> in a table.</p>
<pre>//&#34;for update&#34; is required in the query string 
//since we will update the row later.
String query1 = &#34;select product_photo,&#34; +
&#34; product_audio, product_video,&#34; +         
&#34; product_testimonials from&#34; + 
&#34; pm.online_media where product_id=3106&#34; +
&#34; for update&#34;;
 
PreparedStatement pstmt = conn.prepareStatement(query1);
 
OracleResultSet rset = (OracleResultSet)pstmt.executeQuery();

if ( rset.next() )
{
 
  OrdImage imgProxy = (OrdImage)rset.getORAData(
          &#34;product_photo&#34;, OrdImage.getORADataFactory());
  OrdAudio audProxy = (OrdAudio)rset.getORAData( 
          &#34;product_audio&#34;, OrdAudio.getORADataFactory());
  OrdVideo vidProxy = (OrdVideo)rset.getORAData( 
          &#34;product_video&#34;, OrdVideo.getORADataFactory());
  OrdDoc docProxy = (OrdDoc)rset.getORAData( 
          &#34;product_testimonials&#34;,
          OrdDoc.getORADataFactory());
}
 
rset.close();
pstmt.close();
</pre>
<p>The following example includes a query you can use to load media data into nonexisting Oracle Multimedia objects<a id="sthref95"></a> by creating a new row.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This code segment assumes that there is no row with <code>product_id=3106</code> in the <code>pm.online_media</code> table.</div>
<pre>String query2 = 
  &#34;begin insert into pm.online_media &#34; +
  &#34; (product_id, product_photo, product_audio,&#34; +
  &#34; product_video, product_testimonials) values&#34; +
  &#34; (3106, ordimage.init(),&#34; +
  &#34; ordaudio.init(), ordvideo.init(),&#34; +
  &#34; orddoc.init()) returning product_photo,&#34; +    
  &#34; product_audio, product_video,&#34; +   
  &#34; product_testimonials into ?, ?, ?, ?;end;&#34;;
 
OracleCallableStatement cstmt =
 (OracleCallableStatement) conn.prepareCall(query2);
cstmt.registerOutParameter(1, OrdImage._SQL_TYPECODE,
                               OrdImage._SQL_NAME);
cstmt.registerOutParameter(2, OrdAudio._SQL_TYPECODE,
                               OrdAudio._SQL_NAME);
cstmt.registerOutParameter(3, OrdVideo._SQL_TYPECODE,
                               OrdVideo._SQL_NAME);
cstmt.registerOutParameter(4, OrdDoc._SQL_TYPECODE,
                               OrdDoc._SQL_NAME);
 
cstmt.execute();
 
OrdImage imgProxy = (OrdImage)cstmt.getORAData(1,
                     OrdImage.getORADataFactory());
OrdAudio audProxy = (OrdAudio)cstmt.getORAData(2, 
                     OrdAudio.getORADataFactory());
OrdVideo vidProxy = (OrdVideo)cstmt.getORAData(3, 
                     OrdVideo.getORADataFactory());
OrdDoc docProxy = (OrdDoc)cstmt.getORAData(4, 
                     OrdDoc.getORADataFactory());
 
cstmt.close();
</pre></li>
<li>
<p>Load the media data from a file to the Oracle Multimedia Java objects by calling the loadDataFromFile method:</p>
<pre>String imageFileName = &#34;laptop.jpg&#34;;
String audioFileName = &#34;laptop.mpa&#34;;
String videoFileName = &#34;laptop.rm&#34;;
String docFileName = &#34;laptop.jpg&#34;;
imgProxy.loadDataFromFile(imageFileName);
audProxy.loadDataFromFile(audioFileName);
vidProxy.loadDataFromFile(videoFileName);
docProxy.loadDataFromFile(docFileName);
</pre></li>
<li id="CHDIBGGF">
<p>Set the properties of the Oracle Multimedia objects by populating the Java object fields with media attributes (optional):</p>
<pre>imgProxy.setProperties();
audProxy.setProperties(new byte[1][64]);
vidProxy.setProperties(new byte[1][64]);
docProxy.setProperties(new byte[1][64], true);
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
The setProperties method tries to recognize the format of the media and populate the objects field with media information such as image height, image width, format, MIME type, and so on. If the media format is not recognized, the java.sql.SQLException error is thrown.</div>
</li>
<li id="CHDHABBA">
<p>Update the database table with Oracle Multimedia Java objects that have data already loaded:</p>
<pre>   String query3 = &#34;update pm.online_media set&#34; +
    &#34; product_photo=?, product_audio=?,&#34; + 
    &#34; product_video=?, product_testimonials=?&#34; +
    &#34; where product_id=3106&#34;;
    OraclePreparedStatement pstmt = 
 (OraclePreparedStatement)conn.prepareStatement(query3);
    pstmt.setORAData(1, imgProxy);
    pstmt.setORAData(2, audProxy);
    pstmt.setORAData(3, vidProxy);
    pstmt.setORAData(4, docProxy);
 
    pstmt.execute();
    pstmt.close();
</pre></li>
<li>
<p>Commit the transaction:</p>
<pre>conn.commit();
</pre></li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CHDFDCII"></a>
<div id="IMURG11554" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">2.4.4</span> Handling Oracle Multimedia Exceptions in Java</h3>
<p>Possible errors that can occur during run time should always be handled in your application. This practice enables the program to continue its operation even when it encounters a run-time error. This practice also enables users to know what went wrong during program operation. Proper error handling practices ensure that, whenever possible, you are always able to recover from an error while running an application. In addition, proper error handling provides you with the information you need so you always know what went wrong.</p>
<p>This section demonstrates proper error handling practices using code examples. These examples show how to handle some common Oracle Multimedia errors and other types of errors in Java programs<a id="sthref96"></a>. These examples are extracted from the Java sample applications that are described in <a href="ch_phtalbapps.htm#BABGIDFB">Chapter 3</a> and <a href="ch_imexapp.htm#CHDCBCDA">Chapter 5</a>.</p>
<p>When handling exceptions<a id="sthref97"></a>, Java uses the try/catch block. For example, in Java, the exception can appear as:</p>
<pre>try {
    //&lt;some program logic&gt;)
}
catch (exceptionName a) {
//Exception logic
}
finally {
//Execute logic if try block is executed even if an exception is caught
}
</pre>
<p>When you design, code, and debug your application, you are aware of the places in your program where processing might stop due to a failure to anticipate an error. Those are the places in your program where you must add exception handling blocks to handle the potential errors.</p>
<p>The examples in this section describe exception handling using the try/catch block. These examples are included in the Oracle Multimedia Java API sample application, the Oracle Multimedia Java Servlet Photo Album application, and the Oracle Multimedia JavaServer Pages Photo Album application.</p>
<p>The following subsections provide additional details and examples of exception handling in Java:</p>
<ul>
<li>
<p><a href="#CCHGDIIG">Handling the Setting of Properties for Unknown Image Formats in Java</a></p>
</li>
<li>
<p><a href="#CCHCHGCF">Handling Image Processing for Unknown Image Formats in Java</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink JJDEV13293" href="../JJDEV/chseven.htm#JJDEV13293"><span class="italic">Oracle Database Java Developer&#39;s Guide</span></a> for more information about handling Java exceptions</p>
</li>
<li>
<p><a class="olink JJDBC28078" href="../JJDBC/getsta.htm#JJDBC28078"><span class="italic">Oracle Database JDBC Developer&#39;s Guide</span></a> for more information about handling Java exceptions using JDBC</p>
</li>
</ul>
</div>
<a id="CCHGDIIG"></a>
<div id="IMURG11555" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">2.4.4.1</span> Handling the Setting of Properties for Unknown Image Formats in Java</h4>
<p>The <code>IMUtil</code> class of the Oracle Multimedia Java API sample application contains utility methods for common image functions. One of these methods is the setProperties( ) method. The static method takes an OrdImage object as an input parameter and calls the setProperties( ) method on the object.</p>
<pre>static boolean setProperties(OrdImage img)
  {
    try
    {
      img.setProperties();
      return true;
    }
    catch (SQLException e)
    {
      return false;
    }
  }
</pre>
<p>If an exception is thrown, the setProperties( ) method returns false to indicate failure; otherwise it returns true. See <a href="ch_imexapp.htm#CHDCBCDA">Chapter 5</a> for a full description of the Oracle Multimedia Java API sample application, and for more information about using the setProperties( ) method in a Java application.</p>
</div>
<!-- class="sect3" -->
<a id="CCHCHGCF"></a>
<div id="IMURG11556" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">2.4.4.2</span> Handling Image Processing for Unknown Image Formats in Java</h4>
<p>In the insertNewPhoto( ) method in both the <code>PhotoAlbumServlet</code> class of the Oracle Multimedia Java Servlet Photo Album application and in the <code>PhotoAlbumBean</code> class of the Oracle Multimedia JavaServer Pages Photo Album application, a new photograph is inserted into the photo album, creating a thumbnail image at the same time. If the application tries to process an image in cases when the image format is unknown, then when the application calls the processCopy( ) method, the application always fails. To work around this potential problem, the application uses the following <code>try</code> block and <code>catch</code> block to catch any SQL exceptions:</p>
<pre>        try
        {
            image.processCopy( &#34;maxScale=50,50&#34;, thumb );
        }
        catch ( SQLException e )
        {
            thumb.deleteContent();
            thumb.setContentLength( 0 );
        }
</pre>
<p>In this example, when the image format is unknown and a thumbnail image cannot be created, the application catches the SQL exception and calls the deleteContent( ) method to delete the content of the thumbnail image, and then calls the setContentLength( ) method to set its length to zero.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDGDBBC"></a>
<div id="IMURG2400" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">2.5</span> Developing Java-Based Web Applications</h2>
<p>On the Java platform, a Web application is a dynamic extension of a Web server. A Java-based Web application<a id="sthref98"></a> is composed of Java servlets, JSP pages, or both. Java servlets are Java classes that dynamically process HTTP requests and construct HTTP responses. JSP pages are text-based documents that execute as servlets, but enable a more natural approach to creating static content.</p>
<p>Oracle Multimedia Servlets and JSP Java API<a id="sthref99"></a> is based on Oracle Multimedia Java API. The classes in Oracle Multimedia Servlets and JSP Java API facilitate the retrieval and uploading of media data from and to Oracle Database in a Java-based Web application.</p>
<p>The Java classes in Oracle Multimedia Servlets and JSP Java API are included in the <code>oracle.ord.im.*</code> package. The classes are as follows:</p>
<ul>
<li>
<p>OrdHttpResponseHandler</p>
</li>
<li>
<p>OrdHttpJspResponseHandler</p>
</li>
<li>
<p>OrdHttpUploadFormData</p>
</li>
<li>
<p>OrdHttpUploadFile</p>
</li>
<li>
<p>OrdMultipartFilter</p>
</li>
<li>
<p>OrdMultipartWrapper</p>
</li>
</ul>
<p>The OrdHttpResponseHandler class facilitates the retrieval of the media data from Oracle Database and its delivery to an HTTP client from a Java servlet. The OrdHttpJspResponseHandler class provides the same features for JSP pages. The OrdHttpUploadFormData, OrdHttpUploadFile, OrdMultipartFilter, and OrdMultipartWrapper classes facilitate the uploading of media data from a Web client to Oracle Database.</p>
<p>Before you can begin using Oracle Multimedia Servlets and JSP Java API, you must set up your environment with the appropriate Java libraries, as described in Step 1, <a href="#CHDGJDIB">Section 2.4.1</a>.</p>
<p>The following subsections describe how to use various components of the Java development environment for Web applications:</p>
<ul>
<li>
<p><a href="#CHDEEEIG">Media Retrieval in Java-Based Web Applications</a></p>
</li>
<li>
<p><a href="#CHDIFGEC">Media Upload in Java-Based Web Applications</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<p><a class="olink IMJSV" href="../IMJSV/toc.htm"><span class="italic">Oracle Multimedia Servlets and JSP Java API Reference</span></a> for details about the available classes and methods in this Java API</p>
</div>
<a id="CHDEEEIG"></a>
<div id="IMURG11557" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">2.5.1</span> Media Retrieval in Java-Based Web Applications</h3>
<p>In general, displaying a Web page that contains images in a Web browser requires two HTTP round trips<a id="sthref100"></a>.</p>
<p>In the first trip, the Web browser makes an HTTP request to the URL of the Web page that contains the images. The Web server responds with the Web page text content and the URLs for the media content. The URL is the <code>src</code> attribute of the <code>&lt;img&gt;</code> tag in the Web page.</p>
<p>In the second trip, the Web browser makes another HTTP request to the URL in the <code>&lt;img&gt;</code> tag to get the image binary data, and then displays the image in the browser.</p>
<p>In a Java-based Web application, sending media data from the database to an HTTP client (Web browser) requires the proper media URL (generated in the first HTTP response); and the proper media delivery component (a servlet or JSP for the second HTTP response).</p>
<p>The following subsections provide additional details and examples of this process:</p>
<ul>
<li>
<p><a href="#CCHFGEGH">Media URL</a></p>
</li>
<li>
<p><a href="#CCHIDCAB">Media Delivery Component</a></p>
</li>
</ul>
<a id="CCHFGEGH"></a>
<div id="IMURG11558" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">2.5.1.1</span> Media URL</h4>
<p>When media data is stored as static files on the Web server, the media URL is the relative or absolute path to the media files on the file system. When media data is stored in a database, the media URL is generally composed of a media delivery component (a servlet or JSP) and the parameters for the media delivery component. The media delivery component is the target for the second HTTP request to retrieve the media data. The parameters for the media delivery component are used by the media delivery component to query and locate the media data in the database. For example:</p>
<pre>&lt;img src=&#34;OrdGetMedia.jsp?id=1&#34;/&gt;
</pre>
<p>where <code>OrdGetMedia.jsp</code> in the media URL <code>&#34;OrdGetMedia.jsp?id=1&#34;</code> is the media delivery component, and <code>id=1</code> is the parameter to the media delivery component.</p>
</div>
<!-- class="sect3" -->
<a id="CCHIDCAB"></a>
<div id="IMURG11559" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">2.5.1.2</span> Media Delivery Component</h4>
<p>Because media data is stored in the database as Oracle Multimedia objects, the media delivery component must dynamically retrieve the media data as Java objects (see <a href="#CHDEEIJI">Section 2.4.2</a>), based on certain query conditions. Then, you can use either the OrdHttpResponseHandler or the OrdHttpJspResponsehandler class in Oracle Multimedia Servlets and JSP Java API to deliver the data to the HTTP client (Web browser).</p>
<p>The following example demonstrates the use of a Java servlet<a id="sthref101"></a> as the media delivery component, and highlights in bold the SQL statements and significant areas in the code where this operation takes place.</p>
<pre><span class="bold">import oracle.ord.im.OrdHttpResponseHandler;</span>
 
protected void doGet(HttpServletRequest request,
 HttpServletResponse response)
  throws ServletException, java.io.IOException
{
// obtain oracle.ord.im.OrdImage object 
// <span class="bold">imgProxy</span> follows the Section &#34;Media Retrieval in Java&#34;
 . . . 
 
// deliver the image data to the browser
<span class="bold">OrdHttpResponseHandler handler = </span>
<span class="bold">new OrdHttpResponseHandler( request, response);</span>
<span class="bold">handler.sendImage(imgProxy)</span>;
 
 . . . 
 }
</pre>
<p>The following example demonstrates the use of a JSP page<a id="sthref102"></a> as the media delivery component, and highlights in bold the SQL statements and significant areas in the code where this operation takes place.</p>
<pre><span class="bold">&lt;%@ page </span>
<span class="bold">import=&#34;oracle.ord.im.OrdHttpJspResponseHandler&#34; </span>
<span class="bold">%&gt;</span>
 
<span class="bold">&lt;jsp:useBean id = &#34;handler&#34; scope=&#34;page&#34;</span>
     <span class="bold">class = &#34;oracle.ord.im.OrdHttpJspResponseHandler&#34;</span> 
<span class="bold">/&gt;</span>
 
&lt;%
// obtain oracle.ord.im.OrdImage object 
// <span class="bold">imgProxy</span> follows the Section &#34;Media Retrieval in Java&#34;
. . . 
 
// deliver the image data to the browser
 <span class="bold">  handler.setPageContext( pageContext );</span>
 <span class="bold">  handler.sendImage(imgProxy);</span>
   return;
%&gt;
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDIFGEC"></a>
<div id="IMURG11560" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">2.5.2</span> Media Upload in Java-Based Web Applications</h3>
<p>The HTML form enables you to input and upload data from a Web browser to a Web server for processing.<a id="sthref103"></a> The following HTML code segment is an example of the HTML form that uploads a file. This code example highlights in bold the SQL statements and areas in the code where this operation takes place.</p>
<pre>&lt;form action=&#34;uploadAction.jsp&#34; <span class="bold">method=&#34;post&#34;</span> 
<span class="bold">enctype=&#34;multipart/form-data&#34;</span>&gt;
id: &lt;input type=&#34;text&#34; name=&#34;id&#34;/&gt;
description: &lt;input type=&#34;text&#34; name=&#34;description&#34;/&gt;
<span class="bold">Photo: &lt;input type=&#34;file&#34; name=&#34;photo&#34;/&gt;</span>
&lt;/form&gt;
</pre>
<p>Referring to the preceding code example, setting the value of the <code>enctype</code> attribute in the <code>&lt;form&gt;</code> tag to &#34;<code>multipart/form-data</code>&#34; specifies multipart/form-data format encoding of the uploaded data. The value of the <code>action</code> attribute in the <code>&lt;form&gt;</code> tag represents the name of the JSP that handles the uploaded data.</p>
<p>To handle the uploaded data in a JSP or servlet, follow these steps:</p>
<ol>
<li>
<p>Decode the uploaded file. Because this file is encoded in multipart/form-data format, the data must be decoded before further processing can proceed. You can use the OrdHttpUploadFormData class to decode the encoded HTTP request data and obtain the uploaded file as an instance of the OrdHttpUploadFile object. You can use this class explicitly or implicitly to get the decoded uploaded file.</p>
<p>The following example demonstrates how to use the OrdHttpUploadFormData class <span class="italic">explicitly</span> to get the uploaded file, and highlights in bold the SQL statements and significant areas in the code where this operation takes place. Use this method within the servlet or JSP that handles the upload HTTP request.</p>
<pre>//
// Import OrdHttpUploadFormData and OrdHttpUploadFile class:
// In a servlet:
// import oracle.ord.im.OrdHttpUploadFormData;
// import oracle.ord.im.OrdHttpUploadFile;
// In a JSP:
// &lt;%@ page import=&#34;oracle.ord.im.OrdHttpUploadFormData&#34; %&gt;
// &lt;%@ page import=&#34;oracle.ord.im.OrdHttpUploadFile&#34; %&gt;
//
 
//
// Following code snippets should be within &lt;% %&gt; if in a JSP.
//
 
// Create an OrdHttpUploadFormData object and use it to parse 
// the multipart/form-data message.
//
<span class="bold">OrdHttpUploadFormData formData = new OrdHttpUploadFormData(</span>
 <span class="bold">request );</span>
<span class="bold">formData.parseFormData();</span>
 
//
// Get the description, location, and photo.
//
String id = <span class="bold">formData</span>.getParameter( &#34;id&#34; );
String description = <span class="bold">formData</span>.getParameter( &#34;description&#34; );
<span class="bold">OrdHttpUploadFile photo = formData.getFileParameter( &#34;photo&#34; )</span>;
 
//
// Process the uploaded file.
//
 ...
 
//
// Release the resources.
//
<span class="bold">formData.release()</span>;
</pre>
<p>To avoid instantiating and releasing the OrdHttpUploadFormData class explicitly in each JSP or servlet that handles the uploaded data, you can use the OrdHttpUploadFormData class implicitly by configuring the Web application with the OrdMultipartFilter class. Using the OrdMultipartFilter class ensures that any HTTP request that is encoded in multipart/form-data format is decoded and passed along to the JSP or servlet that further processes the request.</p>
<p>The following substeps and accompanying examples describe how to use the OrdHttpUploadFormData class <span class="italic">implicitly</span> to get the uploaded file. These code examples highlight in bold the SQL statements and significant areas in the code where this operation takes place.</p>
<ol>
<li>
<p>Configure the filter by adding this code to the <code>web.xml</code> file in your Web application:</p>
<pre>&lt;filter&gt;
    &lt;filter-name&gt;OrdMultipartFilter&lt;/filter-name&gt;
    &lt;filter-class&gt;
oracle.ord.im.OrdMultipartFilter
    &lt;/filter-class&gt;
&lt;/filter&gt;
&lt;filter-mapping&gt;
    &lt;filter-name&gt;OrdMultipartFilter&lt;/filter-name&gt;
    &lt;servlet-name&gt;*.jsp&lt;/servlet-name&gt;
&lt;/filter-mapping&gt;
</pre></li>
<li>
<p>Obtain the form data and the uploaded file in the JSP or servlet after the filter is configured:</p>
<pre>//
// Get the id, description, and photo.
//
String id = <span class="bold">request</span>.getParameter( &#34;id&#34; );
String description = <span class="bold">request</span>.getParameter( &#34;description&#34; );
 <span class="bold">oracle.ord.im.OrdHttpUploadFile photoFile =</span> 
<span class="bold">  request.getFileParameter(&#34;photo&#34;)</span>;
</pre>
<p>where <code>request</code> is the HttpServletRequest object passed to the JSP or servlet.</p>
</li>
</ol>
</li>
<li>
<p>Save the uploaded file to the database. After the OrdHttpUploadFile object is obtained by explicitly or implicitly using the OrdHttpUploadFormData class, the uploaded file is ready to be loaded into an Oracle Multimedia object in the database, using this statement:</p>
<pre>photoFile.loadImage(imgProxy);
</pre>
<p>where <code>photoFile</code> is the OrdHttpUploadFile object and <code>imgProxy</code> is an OrdImage object obtained in Step 1 in <a href="#CHDJJAHA">Section 2.4.3</a>.</p>
<p>The loadImage method implicitly calls the setProperties method to populate the object fields.</p>
<p>After the data is loaded into the Oracle Multimedia Java object, you can update the corresponding Oracle Multimedia object in the database table by following Steps 4 and 5 in <a href="#CHDJJAHA">Section 2.4.3</a>.</p>
</li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1311">
<tr>
<td class="cellalignment1318">
<table class="cellalignment1316">
<tr>
<td class="cellalignment1315"><a href="ch_intr.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1315"><a href="ch_phtalbapps.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1320">
<table class="cellalignment1314">
<tr>
<td class="cellalignment1315"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1315"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1315"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1315"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1315"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1315"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>


</body></html>