<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-48242"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Oracle%20Multimedia%20Code%20Wizard%20Sample%20Application%20for%20the%20PL%2FSQL%20Gateway"></a><title>Oracle Multimedia Code Wizard Sample Application for the PL/SQL Gateway</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="description" content="Presents information about using Oracle Database to store, manage, and retrieve images, audio, video, DICOM format medical images and other objects, or other heterogeneous media data in an integrated fashion with other enterprise information. Oracle Multimedia extends Oracle Database reliability, availability, and data management to multimedia content in traditional, Internet, electronic commerce, medical, financial, and other media-rich applications."/>
<meta name="dcterms.created" content="2014-07-31T9:32:45Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Multimedia User&#39;s Guide"/>
<meta name="dcterms.identifier" content="E17697-09"/>
<meta name="dcterms.isVersionOf" content="IMURG"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="im_glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="ch_phtalbapps.htm" title="Previous" type="text/html"/>
<link rel="Next" href="ch_imexapp.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17697-09.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">11/20</span> <!-- End Header -->
<div id="IMURG4500" class="chapter"><a id="BCEHIBCE"></a>
<h1 class="chapter"><span class="secnum">4</span> Oracle Multimedia Code Wizard Sample Application for the PL/SQL Gateway</h1>
<p>This chapter describes the Oracle Multimedia Code Wizard sample application. The Oracle Multimedia Code Wizard sample application for the PL/SQL Gateway is a media upload and retrieval Web application that uses these Oracle Multimedia image, audio, video, and heterogeneous media object types.</p>
<p>This chapter assumes the following:</p>
<ul>
<li>
<p>You are familiar with developing PL/SQL applications using the PL/SQL Gateway.</p>
</li>
<li>
<p>You have installed and configured the Oracle Multimedia Code Wizard sample application.</p>
</li>
</ul>
<p>You can install the Oracle Multimedia Code Wizard sample application from the Oracle Database Examples media, which is available for download from the Oracle Technology Network (OTN). After installing the Oracle Database Examples media, the sample application files and <code>README.txt</code> file are located at:</p>
<p><code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>/ord/http/demo/plsgwycw</code> (on Linux and UNIX)</p>
<p><code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>\ord\http\demo\plsgwycw</code> (on Windows)</p>
<p>This chapter describes how to run the Code Wizard Photo Album application. See the <code>README.txt</code> file for additional requirements and instructions on installing and configuring this sample application.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This discussion assumes that the Code Wizard has been installed in the ORDSYS schema.</div>
<p>This chapter includes these sections:</p>
<ul>
<li>
<p><a href="#CHDFIBBA">Running the Code Wizard Sample Application</a></p>
</li>
<li>
<p><a href="#BCEFIJEI">Description of the Code Wizard Sample Application</a></p>
</li>
<li>
<p><a href="#CEGFHCBI">Sample Session 1: Using Images</a></p>
</li>
<li>
<p><a href="#CEGHDIIF">Sample Session 2: Using Multiple Object Columns</a></p>
</li>
<li>
<p><a href="#BABIGBAD">Known Restrictions of the Oracle Multimedia Code Wizard</a></p>
</li>
</ul>
<p class="subhead2"><a id="IMURG11833"></a>More Sample Applications</p>
<p>See these chapters for more sample applications:</p>
<p><a href="ch_phtalbapps.htm#BABGIDFB">Chapter 3</a> describes these Photo Album sample Web applications, which use PL/SQL scripts, Java servlet files, and JSP files to demonstrate various ways to upload and retrieve media using Oracle Multimedia object types:</p>
<ul>
<li>
<p>Oracle Multimedia PL/SQL Web Toolkit Photo Album application (<a href="ch_phtalbapps.htm#CHDCHCDE">Section 3.1</a>)</p>
</li>
<li>
<p>Oracle Multimedia Java Servlet Photo Album application (<a href="ch_phtalbapps.htm#BCEEDIEB">Section 3.2</a>)</p>
</li>
<li>
<p>Oracle Multimedia JSP Photo Album application (<a href="ch_phtalbapps.htm#BABHCJFJ">Section 3.3</a>)</p>
</li>
</ul>
<p><a href="ch_imexapp.htm#CHDCBCDA">Chapter 5</a> describes the Oracle Multimedia Java API sample application. This sample application lets you retrieve, save, play, and delete multimedia data from the Oracle Database sample schemas using Oracle Multimedia Java classes and Oracle Multimedia object types.</p>
<a id="CHDFIBBA"></a>
<div id="IMURG11843" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">4.1</span> Running the Code Wizard Sample Application</h2>
<p>To use the Code Wizard sample application to create and test media access procedures, you must perform these steps:</p>
<ol>
<li>
<p>Create a new database access descriptor (DAD) or choose an existing DAD for use with the Code Wizard.</p>
</li>
<li>
<p>Authorize use of the DAD using the Code Wizard&#39;s administration function.</p>
</li>
<li>
<p>Create and test media upload and retrieval procedures.</p>
</li>
</ol>
<p>The following sections describe these steps and other related topics in more detail.</p>
</div>
<!-- class="sect1" -->
<a id="BCEFIJEI"></a>
<div id="IMURG4510" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">4.2</span> Description of the Code Wizard Sample Application</h2>
<p>The Oracle Multimedia Code Wizard sample application<a id="sthref123"></a><a id="sthref124"></a> lets you create PL/SQL stored procedures for the PL/SQL Gateway to upload and retrieve media data (images, audio, video, and general media) stored in a database using these Oracle Multimedia object types and their respective methods:</p>
<ul>
<li>
<p>ORDImage</p>
</li>
<li>
<p>ORDAudio</p>
</li>
<li>
<p>ORDVideo</p>
</li>
<li>
<p>ORDDoc</p>
</li>
</ul>
<p>The Code Wizard guides you through a series of self-explanatory steps to create either a media retrieval procedure or a media upload procedure. You can create and compile standalone media access procedures. Or, you can create the source of media access procedures for inclusion in a PL/SQL package. Finally, after creating media access procedures, you can customize them to meet your specific application requirements.</p>
<p>These processes are similar to how the Oracle Multimedia PL/SQL Web Toolkit Photo Album application uses the <code>insert_new_photo</code> procedure as the image upload procedure, and the <code>deliver_media</code> procedure as the image retrieval procedure (see <a href="ch_phtalbapps.htm#CHDCHCDE">Section 3.1</a>).</p>
<p>The following subsections describe how to use the Code Wizard application:</p>
<ul>
<li>
<p><a href="#BCEEJFCA">Creating a New DAD or Choosing an Existing DAD</a></p>
</li>
<li>
<p><a href="#CEGCADIJ">Authorizing a DAD</a></p>
</li>
<li>
<p><a href="#CEGBBAFC">Creating and Testing Media Upload and Retrieval Procedures</a></p>
</li>
<li>
<p><a href="#CEGFEJGG">Creating a Media Upload Procedure</a></p>
</li>
<li>
<p><a href="#CEGBIECF">Creating a Media Retrieval Procedure</a></p>
</li>
<li>
<p><a href="#CEGJEIAB">Using the PL/SQL Gateway Document Table</a></p>
</li>
<li>
<p><a href="#CEGGAHAF">How Time Zone Information Is Used to Support Browser Caching</a></p>
</li>
</ul>
<a id="BCEEJFCA"></a>
<div id="IMURG11608" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">4.2.1</span> Creating a New DAD or Choosing an Existing DAD</h3>
<p>To create media upload or retrieval procedures, you must select one or more DADs for use with the Code Wizard. To prevent the unauthorized browsing of schema tables and to prevent the unauthorized creation of media access procedures, you must authorize each DAD using the Code Wizard administration function. Depending on your database and application security requirements, you can create and authorize one or more new DADs specifically for use with the Code Wizard. Or, you can authorize the use of one or more existing DADs.</p>
<p>Oracle recommends that any DAD authorized for use with the Code Wizard employ some form of user authentication mechanism. The simplest approach is to create or use a DAD that uses database authentication. To use this approach, select <span class="bold">Basic Authentication Mode</span> and omit the password in the DAD specification. Alternatively, you can use a DAD that specifies an existing application-specific authentication mechanism.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<p><a class="olink HSADM" href="http://www.oracle.com/pls/topic/lookup?ctx=E50529-01&amp;id=HSADM"><span class="italic">Oracle Fusion Middleware Administrator&#39;s Guide for Oracle HTTP Server</span></a> in the Oracle Fusion Middleware Online Documentation Library for more information about configuring DADs</p>
</div>
<p>The following example describes how to create a DAD that enables you to create and test media upload and retrieval procedures in the <code>SCOTT</code> schema.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
To test media upload procedures, you must specify the name of a document table in the DAD. When testing an upload procedure, you can choose either the DAD you used to create the procedure or the DAD you used to access the application. You can choose a document table name when you create a DAD, edit a DAD to specify the document table name at a later time, or use an existing DAD that specifies a document table name. This example shows how to specify the document table name when you create the DAD.</div>
<ol>
<li>
<p>Set your Web browser to the Oracle HTTP Server Home page. Select <span class="bold">PL/SQL Properties</span> in the Administration page to open the mod_plsql Services page.</p>
</li>
<li>
<p>Scroll to the DAD Status section on the mod_plsql Services page. Then, click <span class="bold">Create</span> to open the DAD Type page.</p>
</li>
<li>
<p>Select the DAD type to be <span class="bold">General</span>. Then, click <span class="bold">Next</span> to open the Database Connection page.</p>
</li>
<li>
<p>Enter <code>/scottcw</code> in the DAD Name field. Enter <code>SCOTT</code> for the database account, and leave the password blank. Enter the connection information in the Database Connectivity Information section. Enter <code>ORDCWPKG.MENU</code> in the Default page field, and leave the other fields blank. Then, click <span class="bold">Next</span> to open the Document, Alias, and Session page.</p>
</li>
<li>
<p>Enter <code>MEDIA_UPLOAD_TABLE</code> for the Document Table on the Document, Alias, and Session page. Then, click <span class="bold">Apply.</span></p>
</li>
<li>
<p>Restart Oracle HTTP Server for the changes to take effect.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CEGCADIJ"></a>
<div id="IMURG11609" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">4.2.2</span> Authorizing a DAD</h3>
<p>To authorize a DAD for use with the Code Wizard, perform these steps:</p>
<ol>
<li>
<p>Enter the Code Wizard&#39;s administration URL into the location bar for your browser. For example:</p>
<pre>http://<span class="codeinlineitalic">&lt;host-name&gt;</span>:<span class="codeinlineitalic">&lt;port-number&gt;</span>/ordcwadmin
</pre></li>
<li>
<p>Enter the user name and password when prompted by the browser.</p>
</li>
<li>
<p>Select <span class="bold">DAD authorization</span> from the <span class="bold">Main menu</span>, as shown in <a href="#CHDCFBGE">Figure 4-1</a>. Then, click <span class="bold">Next</span>.</p>
<div id="IMURG11844" class="figure">
<p class="titleinfigure"><a id="CHDCFBGE"></a>Figure 4-1 Main Menu for the Code Wizard</p>
<img width="419" height="414" src="img/cw1.gif" alt="Description of Figure 4-1 follows"/><br/>
<a id="sthref125" href="img_text/cw1.htm">Description of &#34;Figure 4-1 Main Menu for the Code Wizard &#34;</a><br/>
<br/></div>
<!-- class="figure" --></li>
<li>
<p>Enter the name of the DAD you want to authorize along with the user name, as shown in <a href="#CHDEGFGG">Figure 4-2</a>. Then, click <span class="bold">Apply</span>.</p>
<div id="IMURG11845" class="figure">
<p class="titleinfigure"><a id="CHDEGFGG"></a>Figure 4-2 Authorize the SCOTTCW DAD</p>
<img width="426" height="401" src="img/cw2.gif" alt="Description of Figure 4-2 follows"/><br/>
<a id="sthref126" href="img_text/cw2.htm">Description of &#34;Figure 4-2 Authorize the SCOTTCW DAD&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
Duplicate DADs are not permitted, and each authorized DAD must indicate which database schema the user is authorized to access with the Code Wizard, using the DAD. Use this same page to delete the authorization for any existing DADs that no longer require the Code Wizard.</div>
</li>
<li>
<p>Review the updated list of DADs that are authorized to use the Oracle Multimedia Code Wizard, as shown in <a href="#CHDGCBFA">Figure 4-3</a>. Then, click <span class="bold">Done</span>.</p>
<div id="IMURG11846" class="figure">
<p class="titleinfigure"><a id="CHDGCBFA"></a>Figure 4-3 List of Authorized DADs</p>
<img width="427" height="256" src="img/cw3.gif" alt="Description of Figure 4-3 follows"/><br/>
<a id="sthref127" href="img_text/cw3.htm">Description of &#34;Figure 4-3 List of Authorized DADs&#34;</a><br/>
<br/></div>
<!-- class="figure" --></li>
<li>
<p>Select <span class="bold">Logout</span> from the <span class="bold">Main menu</span> to log out (clear HTTP authentication information), then click <span class="bold">Next</span>. The log out operation redirects the request to the PL/SQL Gateway built-in <code>logmeoff</code> function.</p>
</li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<p><a class="olink YPMOD" href="http://www.oracle.com/pls/topic/lookup?ctx=E50529-01&amp;id=YPMOD"><span class="italic">Oracle Fusion Middleware User&#39;s Guide for mod_plsql</span></a> in the Oracle Fusion Middleware Online Documentation Library</p>
</div>
</div>
<!-- class="sect2" -->
<a id="CEGBBAFC"></a>
<div id="IMURG11613" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">4.2.3</span> Creating and Testing Media Upload and Retrieval Procedures</h3>
<p>After you have completed the setup tasks (as described in <a href="#BCEEJFCA">Section 4.2.1</a>, <a href="#CEGCADIJ">Section 4.2.2</a>, and the <code>README.txt</code> file), you are ready to run this application.</p>
<p>To start the Code Wizard, follow these steps:</p>
<ol>
<li>
<p>Enter the appropriate URL into the address field of your Web browser.</p>
<p>For example:</p>
<p><code>http://</code><code><span class="codeinlineitalic">&lt;hostname&gt;</span></code><code>:</code><code><span class="codeinlineitalic">&lt;port-number&gt;</span></code><code>/scottcw</code></p>
<p>or</p>
<p><code>http://</code><code><span class="codeinlineitalic">&lt;hostname&gt;</span></code><code>:</code><code><span class="codeinlineitalic">&lt;port-number&gt;</span></code><code>/mediadad/ordcwpkg.menu</code></p>
</li>
<li>
<p>Enter the user name and password when prompted by the browser. The <span class="bold">Main menu</span> page of the Oracle Multimedia Code Wizard for the PL/SQL Gateway is displayed, as shown in <a href="#CHDCFIAF">Figure 4-4</a>.</p>
<div id="IMURG11847" class="figure">
<p class="titleinfigure"><a id="CHDCFIAF"></a>Figure 4-4 Use the SCOTTCW DAD</p>
<img width="423" height="381" src="img/cw4.gif" alt="Description of Figure 4-4 follows"/><br/>
<a id="sthref128" href="img_text/cw4.htm">Description of &#34;Figure 4-4 Use the SCOTTCW DAD&#34;</a><br/>
<br/></div>
<!-- class="figure" --></li>
<li>
<p>If the DAD is configured specifically for use with the Code Wizard, enter the DAD name. To use another DAD, enter the DAD name along with the Code Wizard package name and <span class="bold">Main menu</span> procedure name (<code>ORDCWPKG.MENU</code>) after the DAD name.</p>
</li>
<li>
<p>After logging in, you can log out (clear HTTP authentication information) at any time by selecting <span class="bold">Logout</span> from the <span class="bold">Main menu</span>, then clicking <span class="bold">Next</span>. The logout operation redirects the request to the PL/SQL Gateway&#39;s built-in <code>logmeoff</code> function.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<p><a class="olink YPMOD" href="http://www.oracle.com/pls/topic/lookup?ctx=E50529-01&amp;id=YPMOD"><span class="italic">Oracle Fusion Middleware User&#39;s Guide for mod_plsql</span></a> in the Oracle Fusion Middleware Online Documentation Library</p>
</div>
</li>
</ol>
<p>To create a media upload procedure (see <a href="#CEGFEJGG">Section 4.2.4</a>) or a media retrieval procedure (see <a href="#CEGBIECF">Section 4.2.5</a>), select the appropriate option from the <span class="bold">Main menu</span> page, then click <span class="bold">Next</span>. The Code Wizard then guides you through a series of self-explanatory steps to create the procedure.</p>
<p>If you create a standalone media upload or retrieval procedure, you will have the opportunity to view the contents of the procedure and test it. <a href="#CEGFHCBI">Section 4.3</a> and <a href="#CEGHDIIF">Section 4.4</a>, respectively, include sample sessions that demonstrate how to create and test a media upload procedure and a media retrieval procedure.</p>
</div>
<!-- class="sect2" -->
<a id="CEGFEJGG"></a>
<div id="IMURG11615" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">4.2.4</span> Creating a Media Upload Procedure</h3>
<p>To create a media upload procedure using the Oracle Multimedia Code Wizard for the PL/SQL Gateway, perform these steps:</p>
<ol>
<li>
<p>Select <span class="bold">Create media upload procedure</span> from the <span class="bold">Main menu</span> page, as shown in <a href="#CHDGEHFD">Figure 4-5</a>. Then, click <span class="bold">Next</span>.</p>
<div id="IMURG11848" class="figure">
<p class="titleinfigure"><a id="CHDGEHFD"></a>Figure 4-5 Create a Media Upload Procedure</p>
<img width="284" height="84" src="img/cw5.gif" alt="Description of Figure 4-5 follows"/><br/>
<a id="sthref129" href="img_text/cw5.htm">Description of &#34;Figure 4-5 Create a Media Upload Procedure&#34;</a><br/>
<br/></div>
<!-- class="figure" --></li>
<li>
<p>Select <span class="bold">PHOTOS</span> and <span class="bold">Standalone procedure</span> from <span class="bold">Step 1: Select database table and procedure type</span>, as shown in <a href="#CHDIHBBC">Figure 4-6</a>. Then, click <span class="bold">Next</span>.</p>
<div id="IMURG11849" class="figure">
<p class="titleinfigure"><a id="CHDIHBBC"></a>Figure 4-6 Media Upload Step 1: Select Database Table and Procedure Type</p>
<img width="427" height="355" src="img/cw6.gif" alt="Description of Figure 4-6 follows"/><br/>
<a id="sthref130" href="img_text/cw6.htm">Description of &#34;Figure 4-6 Media Upload Step 1: Select Database Table and Procedure Type&#34;</a><br/>
<br/></div>
<!-- class="figure" --></li>
<li>
<p>Select <span class="bold">Use existing document table</span> from <span class="bold">Step 2: Select PL/SQL Gateway document upload table</span>, as shown in <a href="#CHDBIBJJ">Figure 4-7</a>, because the <code>SCOTTCW</code> DAD is configured to use this document table. Then, click <span class="bold">Next</span>.</p>
<div id="IMURG11850" class="figure">
<p class="titleinfigure"><a id="CHDBIBJJ"></a>Figure 4-7 Media Upload Step 2: Select PL/SQL Gateway Document Upload Table</p>
<img width="422" height="557" src="img/cw7.gif" alt="Description of Figure 4-7 follows"/><br/>
<a id="sthref131" href="img_text/cw7.htm">Description of &#34;Figure 4-7 Media Upload Step 2: Select PL/SQL Gateway Document Upload Table&#34;</a><br/>
<br/></div>
<!-- class="figure" --></li>
<li>
<p>Check <span class="bold">PHOTO (ORDIMAGE),</span> select <span class="bold">ID (Primary key)</span>, and select <span class="bold">Conditional insert or update</span> from <span class="bold">Step 3: Select data access and media column(s)</span>, as shown in <a href="#CHDJHIGH">Figure 4-8</a>. Then, click <span class="bold">Next</span>.</p>
<div id="IMURG11851" class="figure">
<p class="titleinfigure"><a id="CHDJHIGH"></a>Figure 4-8 Media Upload Step 3: Select Data Access and Media Column(s)</p>
<img width="419" height="495" src="img/cw8.gif" alt="Description of Figure 4-8 follows"/><br/>
<a id="sthref132" href="img_text/cw8.htm">Description of &#34;Figure 4-8 Media Upload Step 3: Select Data Access and Media Column(s)&#34;</a><br/>
<br/></div>
<!-- class="figure" --></li>
<li>
<p>Check <span class="bold">DESCRIPTION</span>, accept the default procedure name, <span class="bold">UPLOAD_PHOTOS_PHOTO</span>, and select <span class="bold">Create procedure in the database</span> from <span class="bold">Step 4: Select additional columns and procedure name</span>, as shown in <a href="#CHDCCCDJ">Figure 4-9</a>. Then, click <span class="bold">Next</span>.</p>
<div id="IMURG11852" class="figure">
<p class="titleinfigure"><a id="CHDCCCDJ"></a>Figure 4-9 Media Upload Step 4: Select Additional Columns and Procedure Name</p>
<img width="422" height="456" src="img/cw9.gif" alt="Description of Figure 4-9 follows"/><br/>
<a id="sthref133" href="img_text/cw9.htm">Description of &#34;Figure 4-9 Media Upload Step 4: Select Additional Columns and Procedure Name&#34;</a><br/>
<br/></div>
<!-- class="figure" --></li>
<li>
<p>Review the options you selected from <span class="bold">Step 5: Review selected options</span>, as shown in <a href="#CHDDFHDF">Figure 4-10</a>. If the options selected are correct, click <span class="bold">Finish</span>.</p>
<div id="IMURG11853" class="figure">
<p class="titleinfigure"><a id="CHDDFHDF"></a>Figure 4-10 Media Upload Step 5: Review Selected Options</p>
<img width="423" height="321" src="img/cw10.gif" alt="Description of Figure 4-10 follows"/><br/>
<a id="sthref134" href="img_text/cw10.htm">Description of &#34;Figure 4-10 Media Upload Step 5: Review Selected Options&#34;</a><br/>
<br/></div>
<!-- class="figure" --></li>
<li>
<p>The message <code>Procedure created successfully: UPLOAD_PHOTOS_PHOTO</code> is displayed on the <span class="bold">Compile procedure and review generated source</span> page, as shown in <a href="#CHDFCACI">Figure 4-11</a>.</p>
<div id="IMURG11854" class="figure">
<p class="titleinfigure"><a id="CHDFCACI"></a>Figure 4-11 Compiled Upload Procedure with Success Message</p>
<img width="420" height="370" src="img/cw11.gif" alt="Description of Figure 4-11 follows"/><br/>
<a id="sthref135" href="img_text/cw11.htm">Description of &#34;Figure 4-11 Compiled Upload Procedure with Success Message&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>To review the compiled PL/SQL source code in another window, click <span class="bold">View</span> (see <a href="#CHDGCCJB">Example 4-1</a> for a copy of the generated upload procedure). Assuming you have configured the <code>SCOTTCW</code> DAD and specified <code>MEDIA_UPLOAD_TABLE</code> as the document table, in the <span class="bold">DAD:</span> field, the DAD name <code>scottcw</code> is displayed by default.</p>
<p>To test the PL/SQL procedure created, click <span class="bold">Test</span>.</p>
<p>The <span class="bold">Oracle Multimedia Code Wizard: Template Upload Form</span> is displayed in another window.</p>
</li>
<li>
<p>Enter the value <code>1</code> in the <span class="bold">ID</span> field on the <span class="bold">Oracle Multimedia Code Wizard: Template Upload Form</span> window. Click <span class="bold">Browse...</span> to find and select the image you want to upload in the <span class="bold">PHOTO</span> field, and enter a brief description of the image to be uploaded in the <span class="bold">DESCRIPTION</span> field, as shown in <a href="#CHDFFIHG">Figure 4-12</a>. Then, click <span class="bold">Upload media</span>.</p>
<div id="IMURG11855" class="figure">
<p class="titleinfigure"><a id="CHDFFIHG"></a>Figure 4-12 Template Upload Form for the Code Wizard</p>
<img width="288" height="165" src="img/cw12.gif" alt="Description of Figure 4-12 follows"/><br/>
<a id="sthref136" href="img_text/cw12.htm">Description of &#34;Figure 4-12 Template Upload Form for the Code Wizard&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>The image is uploaded into the table row, and this message is displayed:</p>
<p><code>Media uploaded successfully.</code></p>
</li>
<li>
<p>Return to the <span class="bold">Compile procedure and review generated source</span> page. If you are finished testing, click <span class="bold">Done</span> to return to the <span class="bold">Main menu</span> page.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CEGBIECF"></a>
<div id="IMURG11626" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">4.2.5</span> Creating a Media Retrieval Procedure</h3>
<p>To create a media retrieval procedure using the Oracle Multimedia Code Wizard for the PL/SQL Gateway, perform these steps:</p>
<ol>
<li>
<p>Select <span class="bold">Create media retrieval procedure</span> from the <span class="bold">Main menu</span> page, as shown in <a href="#CHDJDDGA">Figure 4-13</a>. Then, click <span class="bold">Next</span>.</p>
<div id="IMURG11856" class="figure">
<p class="titleinfigure"><a id="CHDJDDGA"></a>Figure 4-13 Create a Media Retrieval Procedure</p>
<img width="285" height="81" src="img/cw13.gif" alt="Description of Figure 4-13 follows"/><br/>
<a id="sthref137" href="img_text/cw13.htm">Description of &#34;Figure 4-13 Create a Media Retrieval Procedure&#34;</a><br/>
<br/></div>
<!-- class="figure" --></li>
<li>
<p>Select <span class="bold">PHOTOS</span> and <span class="bold">Standalone procedure</span> from <span class="bold">Step 1: Select database table and procedure type</span>, as shown in <a href="#CHDCEEEH">Figure 4-14</a>. Then, click <span class="bold">Next</span>.</p>
<div id="IMURG11857" class="figure">
<p class="titleinfigure"><a id="CHDCEEEH"></a>Figure 4-14 Media Retrieval Step 1: Select Database Table and Procedure Type</p>
<img width="423" height="351" src="img/cw14.gif" alt="Description of Figure 4-14 follows"/><br/>
<a id="sthref138" href="img_text/cw14.htm">Description of &#34;Figure 4-14 Media Retrieval Step 1: Select Database Table and Procedure Type&#34;</a><br/>
<br/></div>
<!-- class="figure" --></li>
<li>
<p>Select <span class="bold">PHOTO (ORDIMAGE)</span> and <span class="bold">ID (Primary key)</span> from <span class="bold">Step 2: Select media column and key column</span>, as shown in <a href="#CHDFBIID">Figure 4-15</a>. Then, click <span class="bold">Next</span>.</p>
<div id="IMURG11858" class="figure">
<p class="titleinfigure"><a id="CHDFBIID"></a>Figure 4-15 Media Retrieval Step 2: Select Media Column and Key Column</p>
<img width="426" height="334" src="img/cw15.gif" alt="Description of Figure 4-15 follows"/><br/>
<a id="sthref139" href="img_text/cw15.htm">Description of &#34;Figure 4-15 Media Retrieval Step 2: Select Media Column and Key Column&#34;</a><br/>
<br/></div>
<!-- class="figure" --></li>
<li>
<p>Accept the default procedure name, <code>GET_PHOTOS_PHOTO</code>, the default parameter name, <code>MEDIA_ID</code>, and <span class="bold">Create procedure in the database</span> from <span class="bold">Step 3: Select procedure name and parameter name</span>, as shown in <a href="#CHDHDHCE">Figure 4-16</a>. Then, click <span class="bold">Next</span>.</p>
<div id="IMURG11859" class="figure">
<p class="titleinfigure"><a id="CHDHDHCE"></a>Figure 4-16 Media Retrieval Step 3: Select Procedure Name and Parameter Name</p>
<img width="427" height="421" src="img/cw16.gif" alt="Description of Figure 4-16 follows"/><br/>
<a id="sthref140" href="img_text/cw16.htm">Description of &#34;Figure 4-16 Media Retrieval Step 3: Select Procedure Name and Parameter Name&#34;</a><br/>
<br/></div>
<!-- class="figure" --></li>
<li>
<p>Review the options you selected from <span class="bold">Step 4: Review Selected Options</span>, as shown in <a href="#CHDBGAFC">Figure 4-17</a>. If the options selected are correct, click <span class="bold">Finish</span>.</p>
<div id="IMURG11860" class="figure">
<p class="titleinfigure"><a id="CHDBGAFC"></a>Figure 4-17 Media Retrieval Step 4: Review Selected Options</p>
<img width="431" height="299" src="img/cw17.gif" alt="Description of Figure 4-17 follows"/><br/>
<a id="sthref141" href="img_text/cw17.htm">Description of &#34;Figure 4-17 Media Retrieval Step 4: Review Selected Options&#34;</a><br/>
<br/></div>
<!-- class="figure" --></li>
<li>
<p>The message <code>Procedure created successfully: GET_PHOTOS_PHOTO</code> is displayed in the <span class="bold">Compile procedure and review generated source</span> page, as shown in <a href="#CHDJDCAH">Figure 4-18</a>.</p>
<div id="IMURG11861" class="figure">
<p class="titleinfigure"><a id="CHDJDCAH"></a>Figure 4-18 Compiled Retrieval Procedure with Success Message</p>
<img width="426" height="411" src="img/cw18.gif" alt="Description of Figure 4-18 follows"/><br/>
<a id="sthref142" href="img_text/cw18.htm">Description of &#34;Figure 4-18 Compiled Retrieval Procedure with Success Message&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>To review the compiled PL/SQL source code in another window, click <span class="bold">View</span> (see <a href="#CHDGHFJC">Example 4-2</a> for a copy of the generated retrieval procedure).</p>
<p>To test the PL/SQL procedure created, assuming you have an image loaded in the database with an ID value of <code>1</code>, enter the value <code>1</code> for the Key parameter (<code>MEDIA_ID</code>), then click <span class="bold">Test</span>.</p>
<p>The image is retrieved from the table row and displayed in another window.</p>
</li>
<li>
<p>Click <span class="bold">Done</span> to return to the <span class="bold">Main menu</span> page.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CEGJEIAB"></a>
<div id="IMURG11634" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">4.2.6</span> Using the PL/SQL Gateway Document Table</h3>
<p>All files uploaded using the PL/SQL Gateway are stored in a document table. Media upload procedures created by the Code Wizard automatically move uploaded media from the specified document table to the application&#39;s table. To avoid transient files from appearing temporarily in a document table used by another application component, use a document table that is not being used to store documents permanently.</p>
<p>Specify the selected document table in the application&#39;s database access descriptor (DAD). If the DAD specifies a different document table, create a new DAD for media upload procedures. If you choose to create a new document table, the Code Wizard creates a table with the following format:</p>
<pre>CREATE TABLE document-table-name
  ( name           VARCHAR2(256) UNIQUE NOT NULL,
    mime_type      VARCHAR2(128),
    doc_size       NUMBER,
    dad_charset    VARCHAR2(128),
    last_updated   DATE,
    content_type   VARCHAR2(128),
    blob_content   BLOB )
-- 
-- store BLOBs as SecureFiles LOBs
-- 
LOB(blob_content)  STORE AS SECUREFILE;
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<p><a class="olink YPMOD" href="http://www.oracle.com/pls/topic/lookup?ctx=E50529-01&amp;id=YPMOD"><span class="italic">Oracle Fusion Middleware User&#39;s Guide for mod_plsql</span></a> in the Oracle Fusion Middleware Online Documentation Library for more information about file upload and document tables</p>
</div>
</div>
<!-- class="sect2" -->
<a id="CEGGAHAF"></a>
<div id="IMURG11635" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">4.2.7</span> How Time Zone Information Is Used to Support Browser Caching</h3>
<p>User response times are improved and network traffic is reduced if a browser can cache resources received from a Web server and subsequently use those cached resources to satisfy future requests. This section describes at a very high level, how the browser caching mechanism works and how the Code Wizard utility package is used to support that mechanism. When reading this discussion, keep in mind that all HTTP date and time stamps are expressed in Coordinated Universal Time (UTC).</p>
<p>All HTTP responses include a Date header, which indicates the date and time when the response was generated. When a Web server sends a resource in response to a request from a browser, it can also include the Last-Modified HTTP response header, which indicates the date and time when the requested resource was last modified. The Last-Modified header must not be <span class="italic">later</span> than the Date header.</p>
<p>After receiving and caching a resource, if a browser must retrieve the same resource again, it sends a request to the Web server with the If-Modified-Since request header specified as the value of the Last-Modified date, which was returned by the application server when the resource was previously retrieved and cached. When the Web server receives the request, it compares the date in the If-Modified-Since request header with the last update time of the resource. Assuming the resource still exists, if the resource has not changed since it was cached by the browser, the Web server responds with an HTTP <code>304 Not Modified</code> status with no response body, which indicates that the browser can use the resource currently stored in its cache. Assuming again that the resource still exists, if the request does not include an If-Modified-Since header or if the resource has been updated since it was cached by the browser, the Web server responds with an HTTP <code>200 OK</code> status and sends the resource to the browser.</p>
<p>The ORDImage, ORDAudio, ORDVideo, and ORDDoc objects all possess an updateTime attribute stored as a DATE in the embedded ORDSource object. Although the DATE data type has no support for time zones or daylight savings time, the Oracle9<span class="italic">i</span> and later database versions do support time zones and also provide functions for converting a DATE value stored in a database to UTC.</p>
<p>When a response is first returned to a browser, a media retrieval procedure sets the Last-Modified HTTP response header based on the updateTime attribute. If a request for media data includes an If-Modified-Since header, the media retrieval procedure compares the value with the updateTime attribute and returns an appropriate response. If the resource in the browser&#39;s cache is still valid, an HTTP <code>304 Not Modified</code> status is returned with no response body. If the resource has been updated since it was cached by the browser, then an HTTP <code>200 OK</code> status is returned with the media resource as the response body.Media retrieval procedures created by the Code Wizard call the utility package to convert a DATE value stored in the database to UTC. The utility package uses the time zone information stored with an Oracle9<span class="italic">i</span> or later database and the date and time functions to convert database date and time stamps to UTC. To ensure that the resulting date conforms to the rule for the Last-Modified date described previously, the time zone information must be specified correctly.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><code><a href="http://www.w3.org/Protocols/">http://www.w3.org/Protocols/</a></code> for more information about the HTTP specification</p>
</li>
<li>
<p><a class="olink ADMIN11095" href="../ADMIN/create.htm#ADMIN11095"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> for more information about how to set a time zone for a database</p>
</li>
<li>
<p><a class="olink SQLRF20033" href="../SQLRF/functions002.htm#SQLRF20033"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about date and time functions</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CEGFHCBI"></a>
<div id="IMURG4520" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">4.3</span> Sample Session 1: Using Images</h2>
<p>The following sample session uses the <code>SCOTT</code> schema to demonstrate the creation of image media upload and retrieval procedures. To use a different schema, substitute a different schema name and password. Or, if you have changed the password for the <code>SCOTT</code> schema, use your new password.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<p><a class="olink DBSEG33223" href="../DBSEG/authentication.htm#DBSEG33223"><span class="italic">Oracle Database Security Guide</span> f</a>or more information about creating secure passwords</p>
</div>
<p>This sample session assumes the Oracle Multimedia Code Wizard has been installed in the ORDSYS schema.</p>
<p>Perform these steps:</p>
<dl>
<dd><a id="IMURG11862"></a><a id="sthref143"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Create a table to store images for the application by starting SQL*Plus and connecting to the <code><span class="codeinlinebold">SCOTT</span></code> (or other) schema in the database.</dt>
<dd>
<p>For example:</p>
<pre>sqlplus SCOTT [@&lt;connect_identifer&gt;]

Enter password: <span class="italic">password</span>

SQL&gt; CREATE TABLE cw_images_table( id NUMBER PRIMARY KEY,
                                  description VARCHAR2(30) NOT NULL,
                                  location VARCHAR2(30),
                                  image ORDSYS.ORDIMAGE )
--
-- store media as SecureFiles LOBs
--
LOB(image.source.localdata)  STORE AS SECUREFILE;
</pre></dd>
<dd><a id="IMURG11863"></a><a id="sthref144"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Create the <code><span class="codeinlinebold">SCOTTCW</span></code> DAD to be used to create the procedures.</dt>
<dd>
<ol>
<li>
<p>Set your Web browser to the Oracle HTTP Server Home page. Select <span class="bold">PL/SQL Properties</span> in the Administration page to open the mod_plsql Services page.</p>
</li>
<li>
<p>On the mod_plsql Services page, scroll to the DAD Status section. Then, click <span class="bold">Create</span> to open the DAD Type page.</p>
</li>
<li>
<p>Select the DAD type to be <span class="bold">General</span>. Then, click <span class="bold">Next</span> to open the Database Connection page.</p>
</li>
<li>
<p>Enter <code>/scottcw</code> in the DAD Name field. Enter <code>SCOTT</code> for the database account, and leave the password blank. Enter the connection information in the Database Connectivity Information section. Enter <code>ORDCWPKG.MENU</code> in the Default page field, and leave the other fields blank. Then, click <span class="bold">Next</span> to open the Document, Alias, and Session page.</p>
</li>
<li>
<p>On the Document, Alias, and Session page, enter <code>MEDIA_UPLOAD_TABLE</code> for the Document Table. Then, click <span class="bold">Apply.</span></p>
</li>
<li>
<p>Restart Oracle HTTP Server for the changes to take effect.</p>
</li>
</ol>
</dd>
<dd><a id="IMURG11864"></a><a id="sthref145"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;Authorize the use of the <code><span class="codeinlinebold">SCOTTCW</span></code> DAD and <code><span class="codeinlinebold">SCOTT</span></code> schema with the Code Wizard.</dt>
<dd>
<ol>
<li>
<p>Enter the Code Wizard&#39;s administration URL into your browser&#39;s location bar, then enter the <code>ORDSYS</code> user name and password when prompted by the browser, for example:</p>
<pre>http://<span class="codeinlineitalic">&lt;hostname&gt;</span>:<span class="codeinlineitalic">&lt;port-number&gt;</span>/ordcwadmin
</pre></li>
<li>
<p>Select the DAD authorization function from the Code Wizard&#39;s <span class="bold">Main menu</span> and click <span class="bold">Next</span>. Enter the name of the demonstration DAD, <code>SCOTTCW</code>, and the user name <code>SCOTT</code>, then click <span class="bold">Apply</span>. Click <span class="bold">Done</span> when the confirmation window is displayed.</p>
</li>
</ol>
</dd>
<dd><a id="IMURG11865"></a><a id="sthref146"></a></dd>
<dt class="seghead">Step 4&nbsp;&nbsp;&nbsp;Change DADs to the <code><span class="codeinlinebold">SCOTTCW</span></code> DAD.</dt>
<dd>
<ol>
<li>
<p>Click <span class="bold">Change DAD</span> from the Code Wizard&#39;s <span class="bold">Main menu</span>.</p>
</li>
<li>
<p>Click Change to SCOTTCW, if it is not already selected, then click <span class="bold">Next</span>.</p>
</li>
<li>
<p>Enter the user name <code>SCOTT</code> and the password for the user SCOTT when prompted for the user name and password, then click <span class="bold">OK</span>.</p>
<p>The <span class="bold">Main menu</span> now displays the current DAD as <code>SCOTTCW</code> and the current schema as <code>SCOTT</code>.</p>
</li>
</ol>
</dd>
<dd><a id="IMURG11866"></a><a id="sthref147"></a></dd>
<dt class="seghead">Step 5&nbsp;&nbsp;&nbsp;Create and test the media upload procedure.</dt>
<dd>
<p>Click <span class="bold">Create media upload procedure</span> from the <span class="bold">Main menu</span>, then click <span class="bold">Next</span>.</p>
<ol>
<li>
<p>Select the database table and procedure type.</p>
<ol>
<li>
<p>Click the <span class="bold">CW_IMAGES_TABLE</span> database table.</p>
</li>
<li>
<p>Click <span class="bold">Standalone procedure</span>.</p>
</li>
<li>
<p>Click <span class="bold">Next</span>.</p>
</li>
</ol>
</li>
<li>
<p>Select the PL/SQL document upload table.</p>
<p>If there are no document tables in the <code>SCOTT</code> schema, the Code Wizard displays a message indicating this situation. In this case, accept the default table name provided, <code>CW_SAMPLE_UPLOAD_TABLE</code>, then click <span class="bold">Next</span>.</p>
<p>If there are existing document tables, but the <code>CW_SAMPLE_UPLOAD_TABLE</code> is not among them, click <span class="bold">Create new document table</span>, accept the default table name provided, <code>CW_SAMPLE_UPLOAD_TABLE</code>, then click <span class="bold">Next</span>.</p>
<p>If the <code>CW_SAMPLE_UPLOAD_TABLE</code> document table already exists, ensure that the <span class="bold">Use existing document table</span> and the <span class="bold">CW_SAMPLE_UPLOAD_TABLE</span> options are selected. Click <span class="bold">Next</span>.</p>
</li>
<li>
<p>Select the data access and media columns.</p>
<ol>
<li>
<p>Click <span class="bold">IMAGE (ORDIMAGE)</span>.</p>
</li>
<li>
<p>Click <span class="bold">ID (Primary key)</span>.</p>
</li>
<li>
<p>Click <span class="bold">Conditional insert or update</span>.</p>
</li>
<li>
<p>Click <span class="bold">Next</span>.</p>
</li>
</ol>
</li>
<li>
<p>Select additional columns and procedure names.</p>
<ol>
<li>
<p>Ensure that <span class="bold">DESCRIPTION</span> checkmarked because this column has a <code>NOT NULL</code> constraint. (The <span class="bold">LOCATION</span> column is not checkmarked by default as there are no constraints on this column.)</p>
</li>
<li>
<p>Accept the procedure name provided, <code>UPLOAD_CW_IMAGES_TABLE_IMAGE</code>.</p>
</li>
<li>
<p>Click <span class="bold">Create procedure in the database</span>.</p>
</li>
<li>
<p>Click <span class="bold">Next</span>.</p>
</li>
</ol>
</li>
<li>
<p>Review the following selected procedure creation options that are displayed:</p>
<pre>Procedure type:        Standalone
Table name:            CW_IMAGES_TABLE
Media column(s):       IMAGE (ORDIMAGE)
Key column:            ID
Additional column(s):  DESCRIPTION
Table access mode:     Conditional update or insert
Procedure name:        UPLOAD_CW_IMAGES_TABLE_IMAGE
Function:              Create procedure in the database
</pre>
<p>Click <span class="bold">Finish</span>.</p>
</li>
<li>
<p>Compile the procedure and review the generated source information.</p>
<p>The Code Wizard displays this message:</p>
<pre>Procedure created successfully: UPLOAD_CW_IMAGES_TABLE_IMAGE
</pre>
<ol>
<li>
<p>At the option <span class="bold">Click to display generated source:</span>, click <span class="bold">View</span> to view the generated source in another window. A copy of the generated source is shown at the end of Step 5, substep 6g.</p>
</li>
<li>
<p>Close the window after looking at the generated source.</p>
</li>
<li>
<p>Accept the <span class="bold">DAD:</span> name provided, <code>SCOTTCW</code>, then click <span class="bold">Test</span> to produce another window that displays a template file upload form that you can use to test the generated procedure.</p>
</li>
<li>
<p>To customize the template file upload form, select <span class="bold">Save As...</span> from your browser&#39;s <span class="bold">File</span> menu to save the HTML source for editing.</p>
</li>
<li>
<p>To test the template upload form, enter this information:</p>
<ul>
<li>
<p>For the <span class="bold">ID:</span> column, enter the number <code>1</code> as the row&#39;s primary key.</p>
</li>
<li>
<p>For the <span class="bold">IMAGE</span> column, click <span class="bold">Browse...</span> and choose an image file to upload to the database.</p>
</li>
<li>
<p>For the <span class="bold">DESCRIPTION</span> column, enter a brief description of the image.</p>
</li>
<li>
<p>Click <span class="bold">Upload media</span>.</p>
</li>
</ul>
<p>The Code Wizard displays a template completion window with the heading <span class="bold">Oracle Multimedia Code Wizard: Template Upload Procedure</span>, and, if the procedure is successful, the message: <code>Media uploaded successfully</code>.</p>
</li>
<li>
<p>Close the window.</p>
</li>
<li>
<p>Click <span class="bold">Done</span> on the <span class="bold">Compile procedure and review generated source</span> window to return to the <span class="bold">Main menu</span> of the Code Wizard.</p>
</li>
</ol>
<p><a href="#CHDGCCJB">Example 4-1</a> shows a copy of the generated image upload procedure:</p>
<div id="IMURG11867" class="example">
<p class="titleinexample"><a id="CHDGCCJB"></a>Example 4-1 Image Upload Procedure Generated in Sample Session 1</p>
<pre>CREATE OR REPLACE PROCEDURE UPLOAD_CW_IMAGES_TABLE_IMAGE
  ( in_ID IN VARCHAR2,
    in_IMAGE IN VARCHAR2 DEFAULT NULL,
    in_DESCRIPTION IN VARCHAR2 DEFAULT NULL )
AS
  local_IMAGE ORDSYS.ORDIMAGE := ORDSYS.ORDIMAGE.init();
  local_ID CW_IMAGES_TABLE.ID%TYPE := NULL;
  upload_size     INTEGER;
  upload_mimetype VARCHAR2( 128 );
  upload_blob     BLOB;
BEGIN
  --
  -- Update the existing row.
  --
  UPDATE CW_IMAGES_TABLE mtbl
    SET mtbl.IMAGE = local_IMAGE,
        mtbl.DESCRIPTION = in_DESCRIPTION
    WHERE mtbl.ID = in_ID
    RETURN mtbl.ID INTO local_ID;
  --
  -- Conditionally insert a new row if no existing row is updated.
  --
  IF local_ID IS NULL
  THEN
    --
    -- Insert the new row into the table.
    --
    INSERT INTO CW_IMAGES_TABLE ( ID, IMAGE, DESCRIPTION )
      VALUES ( in_ID, local_IMAGE, in_DESCRIPTION );
  END IF;
  --
  -- Select Oracle Multimedia object(s) for update.
  --
  SELECT mtbl.IMAGE INTO local_IMAGE
    FROM CW_IMAGES_TABLE mtbl WHERE mtbl.ID = in_ID FOR UPDATE;
  --
  -- Store media data for the column in_IMAGE.
  --
  IF in_IMAGE IS NOT NULL
  THEN
    SELECT dtbl.doc_size, dtbl.mime_type, dtbl.blob_content INTO
           upload_size, upload_mimetype, upload_blob
      FROM CW_IMAGE_UPLOAD_TABLE dtbl WHERE dtbl.name = in_IMAGE;
    IF upload_size &amp;gt; 0
    THEN
      dbms_lob.copy( local_IMAGE.source.localData, 
                     upload_blob, 
                     upload_size );
      local_IMAGE.setLocal();
      BEGIN
        local_IMAGE.setProperties();
      EXCEPTION
        WHEN OTHERS THEN
          local_IMAGE.contentLength := upload_size;
          local_IMAGE.mimeType := upload_mimetype;
      END;
    END IF;
    DELETE FROM CW_IMAGE_UPLOAD_TABLE dtbl WHERE dtbl.name = in_IMAGE;
  END IF;
  --
  -- Update Oracle Multimedia objects in the table.
  --
  UPDATE CW_IMAGES_TABLE mtbl
    SET mtbl.IMAGE = local_IMAGE
    WHERE mtbl.ID = in_ID;
  --
  -- Display the template completion message.
  --
  htp.print( &#39;&amp;lt;html&amp;gt;&#39; );
  htp.print( &#39;&amp;lt;title&amp;gt;Oracle Multimedia Code Wizard: Template Upload
Procedure&amp;lt;/title&amp;gt;&#39; );
  htp.print( &#39;&amp;lt;body&amp;gt;&#39; );
  htp.print( &#39;&amp;lt;h2&amp;gt; Oracle Multimedia Code Wizard:
Template Upload Procedure&amp;lt;/h2&amp;gt;&#39; );
  htp.print( &#39;Media uploaded successfully.&#39; );
  htp.print( &#39;&amp;lt;/body&amp;gt;&#39; );
  htp.print( &#39;&amp;lt;/html&amp;gt;&#39; );
END UPLOAD_CW_IMAGES_TABLE_IMAGE;
</pre></div>
<!-- class="example" -->
<p>The image upload procedure shown in <a href="#CHDGCCJB">Example 4-1</a> declares these input parameters and variables:</p>
<ol>
<li>
<p>In the declaration section, the procedure declares three input parameters: <code>in_ID</code>, <code>in_IMAGE</code>, and <code>in_DESCRIPTION</code>, then initializes the latter two to <code>NULL</code>.</p>
</li>
<li>
<p>In the subprogram section, the following variables are declared:</p>
<ul>
<li>
<p>The variable <code>local_IMAGE</code> is assigned the data type ORDSYS.ORDIMAGE and initialized with an empty BLOB using the ORDIMAGE.init( ) method.</p>
</li>
<li>
<p>The variable <code>local_ID</code> takes the same data type as the <code>ID</code> column in the table <code>CW_IMAGES_TABLE</code> and is initialized to <code>NULL</code>.</p>
</li>
<li>
<p>Three additional variables are declared <code>upload_size</code>, <code>upload_mimetype</code>, and <code>upload_blob</code>, which are later given values from comparable column names <code>doc_size</code>, <code>mime_type</code>, and <code>blob_content</code> from the document table <code>CW_IMAGE_UPLOAD_TABLE</code>, using a SELECT statement in preparation for copying the content of the image BLOB data to the ORDSYS.ORDIMAGE.source.localData attribute.</p>
</li>
</ul>
</li>
</ol>
<p>Within the outer BEGIN...END executable statement section, the following operations are executed:</p>
<ol>
<li>
<p>Update the existing row in the table <code>CW_IMAGES_TABLE</code> for the <code>IMAGE</code> and <code>DESCRIPTION</code> columns and return the value of <code>local_ID</code> where the value of the <code>ID</code> column is the value of the <code>in_ID</code> input parameter.</p>
</li>
<li>
<p>If the value returned of <code>local_ID</code> is <code>NULL</code>, conditionally insert a new row into the table <code>CW_IMAGES_TABLE</code> and initialize the instance of the ORDImage object type in the <code>image</code> column with an empty BLOB.</p>
</li>
<li>
<p>Select the ORDImage object column <code>IMAGE</code> in the table <code>CW_IMAGES_TABLE</code> for update where the value of the <code>ID</code> column is the value of the <code>in_ID</code> input parameter.</p>
</li>
<li>
<p>Select a row for the <code>doc_size</code>, <code>mime_type</code>, and <code>blob_content</code> columns from the document table and pass the values to the <code>upload_size</code>, <code>upload_mimetype</code>, and <code>upload_blob</code> variables where the value of the document table <code>Name</code> column is the value of the <code>in_IMAGE</code> input parameter.</p>
</li>
<li>
<p>Perform a DBMS_LOB copy of the BLOB data from the table <code>CW_IMAGE_UPLOAD_TABLE</code> into the ORDSYS.ORDIMAGE.source.localData attribute, then call the setLocal( ) method to indicate that the image data is stored locally in the BLOB, and ORDImage methods are to look for corresponding data in the source.localData attribute.</p>
</li>
<li>
<p>In the inner executable block, call the ORDImage setProperties( ) method to read the image data to get the values of the object attributes and store them in the image object attributes for the ORDImage object.</p>
</li>
<li>
<p>If the setProperties( ) call fails, catch the exception and call the contentLength( ) method to get the size of the image and call the mimeType( ) method to get the MIME type of the image.</p>
</li>
<li>
<p>Delete the row of data from the document table <code>CW_IMAGE_UPLOAD_TABLE</code> that was copied to the row in the table <code>CW_IMAGES_TABLE</code> where the value of the <code>Name</code> column is the value of the <code>in_IMAGE</code> input parameter.</p>
</li>
<li>
<p>Update the ORDImage object <code>IMAGE</code> column in the table <code>CW_IMAGES_TABLE</code> with the content of the variable <code>local_IMAGE</code> where the value of the <code>ID</code> column is the value of the <code>in_ID</code> input parameter.</p>
</li>
<li>
<p>Display a completion message on the HTML page to indicate that the media uploaded successfully using the <code>htp.print</code> function from the PL/SQL Web Toolkit.</p>
</li>
</ol>
</li>
</ol>
</dd>
<dd><a id="IMURG11868"></a><a id="sthref148"></a></dd>
<dt class="seghead">Step 6&nbsp;&nbsp;&nbsp;Create and test a media retrieval.</dt>
<dd>
<p>Select <span class="bold">Create media retrieval procedure</span> from the <span class="bold">Main menu</span>, then click <span class="bold">Next</span>.</p>
<ol>
<li>
<p>Select the database table and procedure type.</p>
<ol>
<li>
<p>Click <span class="bold">CW_IMAGES_TABLE</span>.</p>
</li>
<li>
<p>Click <span class="bold">Standalone procedure</span>.</p>
</li>
<li>
<p>Click <span class="bold">Next</span>.</p>
</li>
</ol>
</li>
<li>
<p>Select the media column and key column.</p>
<ol>
<li>
<p>Click <span class="bold">IMAGE (ORDIMAGE)</span>.</p>
</li>
<li>
<p>Click <span class="bold">ID (Primary key)</span>.</p>
</li>
<li>
<p>Click <span class="bold">Next</span>.</p>
</li>
</ol>
</li>
<li>
<p>Select the procedure name and parameter name.</p>
<ol>
<li>
<p>Accept the procedure name provided, <code>GET_CW_IMAGES_TABLE_IMAGE</code>.</p>
</li>
<li>
<p>Accept the parameter name provided, <code>MEDIA_ID</code>.</p>
</li>
<li>
<p>Click <span class="bold">Create procedure in the database</span>.</p>
</li>
<li>
<p>Click <span class="bold">Next</span>.</p>
</li>
</ol>
</li>
<li>
<p>Review the following selected procedure creation options:</p>
</li>
<li>
<pre>Procedure type:        Standalone
Table name:            CW_IMAGES_TABLE
Media column(s):       IMAGE (ORDIMAGE)
Key column:            ID
Procedure name:        GET_CW_IMAGES_TABLE_IMAGE
Parameter Name:        MEDIA_ID
Function:              Create procedure in the database
</pre>
<p>Click <span class="bold">Next</span>.</p>
</li>
<li>
<p>Compile the procedure and review the generated source.</p>
<p>The Code Wizard displays this message:</p>
<pre>Procedure created successfully: GET_CW_IMAGES_TABLE_IMAGE
</pre>
<ol>
<li>
<p>Click <span class="bold">View</span> to view the generated source in another window. Close the window after looking at the generated source. A copy of the generated source is shown at the end of Step 6, substep 5e.</p>
</li>
<li>
<p>Review the URL format used to retrieve images using the <code>GET_CW_IMAGES_TABLE_IMAGE</code> procedure.</p>
</li>
<li>
<p>Enter the number <code>1</code> as the Key parameter, then click <span class="bold">Test</span> to test the procedure by retrieving the image uploaded previously.</p>
<p>The retrieved image is displayed in another window.</p>
</li>
<li>
<p>Close the window.</p>
</li>
<li>
<p>Click <span class="bold">Done</span> to return to the <span class="bold">Main menu</span>.</p>
</li>
</ol>
<p><a href="#CHDGHFJC">Example 4-2</a> shows a copy of the generated image retrieval procedure:</p>
<div id="IMURG11869" class="example">
<p class="titleinexample"><a id="CHDGHFJC"></a>Example 4-2 Image Retrieval Procedure Generated in Sample Session 1</p>
<pre>CREATE OR REPLACE PROCEDURE GET_CW_IMAGES_TABLE_IMAGE (
 MEDIA_ID IN VARCHAR2 )
AS
  localObject ORDSYS.ORDIMAGE;
  localBlob  BLOB;
  localBfile BFILE;
  httpStatus NUMBER;
  lastModDate VARCHAR2(256);
BEGIN
  --
  -- Retrieve the object from the database into a local object.
  --
  BEGIN
    SELECT mtbl.IMAGE INTO localObject FROM CW_IMAGES_TABLE mtbl
      WHERE mtbl.ID = MEDIA_ID;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      ordplsgwyutil.resource_not_found( &#39;MEDIA_ID&#39;, MEDIA_ID );
      RETURN;
  END;

  --
  -- Check the update time if the browser sent an If-Modified-Since header.
  --
  IF ordplsgwyutil.cache_is_valid( localObject.getUpdateTime() )
  THEN
    owa_util.status_line( ordplsgwyutil.http_status_not_modified );
    RETURN;
  END IF;

  --
  -- Figure out where the image is.
  --
  IF localObject.isLocal() THEN
    --
    -- Data is stored locally in the localData BLOB attribute.
    --
    localBlob := localObject.getContent();
    owa_util.mime_header( localObject.getMimeType(), FALSE );
    ordplsgwyutil.set_last_modified( localObject.getUpdateTime() );
    owa_util.http_header_close();
    IF owa_util.get_cgi_env( &#39;REQUEST_METHOD&#39; ) &amp;lt;&amp;gt; &#39;HEAD&#39; THEN
      wpg_docload.download_file( localBlob );
    END IF;
  ELSIF UPPER( localObject.getSourceType() ) = &#39;FILE&#39; THEN

    --
    -- Data is stored as a file from which ORDSource creates 
    -- a BFILE.
    --
    localBfile  := localObject.getBFILE();
    owa_util.mime_header( localObject.getMimeType(), FALSE );
    ordplsgwyutil.set_last_modified( localObject.getUpdateTime() );
    owa_util.http_header_close();
    IF owa_util.get_cgi_env( &#39;REQUEST_METHOD&#39; ) &amp;lt;&amp;gt; &#39;HEAD&#39; THEN
      wpg_docload.download_file( localBfile );
    END IF;

  ELSIF UPPER( localObject.getSourceType() ) = &#39;HTTP&#39; THEN    --
    -- The image is referenced as an HTTP entity, so we have to 
    -- redirect the client to the URL that ORDSource provides.
    --
    owa_util.redirect_url( localObject.getSource() );
  ELSE
    --
    -- The image is stored in an application-specific data
    -- source type for which no default action is available.
    --
    NULL;
  END IF;
END GET_CW_IMAGES_TABLE_IMAGE;
</pre></div>
<!-- class="example" -->
<p>The image retrieval procedure shown in <a href="#CHDGHFJC">Example 4-2</a> declares these input parameters and variables:</p>
<ol>
<li>
<p>In the declaration section, the procedure declares one input parameter: <code>MEDIA_ID</code>.</p>
</li>
<li>
<p>In the subprogram section, the following variables are declared:</p>
<ul>
<li>
<p>The variable <code>localObject</code> is assigned the data type ORDSYS.ORDIMAGE.</p>
</li>
<li>
<p>The variable <code>localBlob</code> is a BLOB data type, the variable <code>localBfile</code> is a BFILE data type, <code>httpStatus</code> is a NUMBER, and <code>lastModDate</code> is a VARCHAR2 with a maximum size of 256 characters.</p>
</li>
</ul>
</li>
</ol>
<p>Within the outer BEGIN...END executable statement section, the following operations are executed:</p>
<ol>
<li>
<p>Select the ORDImage object column <code>IMAGE</code> in the table <code>CW_IMAGES_TABLE</code> where the value of the <code>ID</code> column is the value of the <code>MEDIA_ID</code> input parameter.</p>
</li>
<li>
<p>In the inner executable block, when no data is found, raise an exception and call the <code>resource_not_found</code> function of the PL/SQL Gateway and get the value of the <code>MEDIA_ID</code> input parameter.</p>
</li>
<li>
<p>Check the update time if the browser sent an If-Modified-Since header by calling the getUpdateTime( ) method passed into the <code>cache_is_valid</code> function of the PL/SQL Gateway.</p>
</li>
<li>
<p>If the cache is valid, send an HTTP status code to the client using the PL/SQL Web Toolkit <code>owa_util</code> package <code>status_line</code> procedure passing in the call to the <code>http_status_not_modified</code> function.</p>
</li>
<li>
<p>Determine where the image data is stored; call the ORDImage isLocal( ) method, which returns a Boolean expression of true if the image data is stored locally in the BLOB, then get the handle to the local BLOB.</p>
<ul>
<li>
<p>If the value is true, assign the variable <code>localBlob</code> the ORDImage getContent( ) method to get the handle of the local BLOB containing the image data.</p>
</li>
<li>
<p>Call the ORDImage getMimeType( ) method to determine the image&#39;s MIME type and pass this to the <code>owa_util.mime_header</code> procedure and keep the HTTP header open.</p>
</li>
<li>
<p>Call the ORDImage getUpdateTime( ) method to get the time the image was last modified and pass this to the <code>ordplsgwyutil.set_last_modified</code> procedure.</p>
</li>
<li>
<p>Close the HTTP header by calling the <code>owa_util.http_header_close( )</code> procedure.</p>
</li>
<li>
<p>Call the <code>owa_util.get_cgi_env</code> procedure and if the value of the request method is not <code>HEAD</code>, then use the <code>wpg_docload.download_file</code> procedure to pass in the value of <code>localBlob</code> that contains the LOB locator of the BLOB containing the image data to download the image from the database.</p>
</li>
</ul>
</li>
<li>
<p>If the ORDImage isLocal( ) method returns false, call the ORDImage getSourceType( ) method to determine if the value is <code>FILE</code>; if so, then the image data is stored as an external file on the local file system. Then, get the LOB locator of the BFILE containing the image data.</p>
<ul>
<li>
<p>Assign the variable <code>localBfile</code> the ORDImage getBfile( ) method to get the LOB locator of the BFILE containing the image data.</p>
</li>
<li>
<p>Call the ORDImage getMimeType( ) method to determine the image&#39;s MIME type and pass this to the <code>owa_util.mime_header</code> procedure and keep the HTTP header open.</p>
</li>
<li>
<p>Call the ORDImage getUpdateTime( ) method to get the time the image was last modified and pass this to the <code>ordplsgwyutil.set_last_modified</code> procedure.</p>
</li>
<li>
<p>Close the HTTP header by calling the <code>owa_util.http_header_close()</code> procedure.</p>
</li>
<li>
<p>Call the <code>owa_util.get_cgi_env</code> procedure and if the value of the request method is not <code>HEAD</code>, then use the <code>wpg_docload.download_file</code> procedure to pass in the value of <code>localBfile</code> that contains the LOB locator of the BFILE containing the image data to download the image from the file.</p>
</li>
</ul>
</li>
<li>
<p>If the ORDImage isLocal( ) method returns false, call the ORDImage getSourceType( ) method to determine if the value is <code>HTTP</code>; if so, then the image data is stored at an HTTP URL location, which then redirects the client to the URL that ORDSource provides using the <code>owa_util.redirect_url</code> procedure.</p>
</li>
<li>
<p>If the ORDImage isLocal( ) method returns false, call the ORDImage getSourceType( ) method to determine if the value is <code>FILE</code> or <code>HTTP</code>; if it is neither, then the image is stored in an application-specific data source type that is not recognized or supported by Oracle Multimedia.</p>
</li>
</ol>
</li>
</ol>
</dd>
</dl>
</div>
<!-- class="sect1" -->
<a id="CEGHDIIF"></a>
<div id="IMURG4530" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">4.4</span> Sample Session 2: Using Multiple Object Columns</h2>
<p>The following sample session uses the <code>SCOTT</code> schema to demonstrate the creation of a multiple media (multiple Oracle Multimedia object columns) upload procedure and a single media retrieval procedure. To use a different schema, substitute a different schema name and password. Or, if you have changed the password for the <code>SCOTT</code> schema, use your new password.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<p><a class="olink DBSEG33223" href="../DBSEG/authentication.htm#DBSEG33223"><span class="italic">Oracle Database Security Guide</span> f</a>or more information about creating secure passwords</p>
</div>
<p>This sample session assumes the Oracle Multimedia Code Wizard has been installed.</p>
<p>Perform these steps:</p>
<dl>
<dd><a id="IMURG11870"></a><a id="sthref149"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Create a table to store audio for the application by starting SQL*Plus and connecting to the <code><span class="codeinlinebold">SCOTT</span></code> (or other) schema in the database.</dt>
<dd>
<p>For example:</p>
<pre>sqlplus SCOTT [@&lt;connect_identifer&gt;]

Enter password: <span class="italic">password</span>

SQL&gt; CREATE TABLE cw_media_table( id NUMBER PRIMARY KEY,
                                 description VARCHAR2(30) NOT NULL,
                                 location VARCHAR2(30),
                                 image ORDSYS.ORDIMAGE,
                                 thumb ORDSYS.ORDIMAGE,
                                 audio ORDSYS.ORDAUDIO,
                                 video ORDSYS.ORDVIDEO,
                                 media ORDSYS.ORDDOC )
--
-- store media as SecureFiles LOBs
--
LOB(image.source.localdata) STORE AS SECUREFILE
LOB(thumb.source.localdata) STORE AS SECUREFILE
LOB(audio.source.localdata) STORE AS SECUREFILE
LOB(video.source.localdata) STORE AS SECUREFILE
LOB(media.source.localdata) STORE AS SECUREFILE;
</pre></dd>
<dd><a id="IMURG11871"></a><a id="sthref150"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Use the <code><span class="codeinlinebold">SCOTTCW</span></code> DAD you created in Step 2. Then, authorize the use of it in Step 3.</dt>
<dd>
<p>If you have not created the <code>SCOTTCW</code> DAD and authorized the use of this DAD, perform Steps 2 and 3 in this section, then continue to next step that follows in this section.</p>
</dd>
<dd><a id="IMURG11872"></a><a id="sthref151"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;Change DADs to the <code><span class="codeinlinebold">SCOTTCW</span></code> DAD.</dt>
<dd>
<ol>
<li>
<p>Enter the Code Wizard&#39;s administration URL into your browser&#39;s location bar, then enter the <code>ORDSYS</code> user name and password when prompted by the browser, for example:</p>
<pre>http://<span class="italic">&lt;hostname&gt;</span>:<span class="codeinlineitalic">&lt;port-number&gt;</span>/ordcwadmin
</pre></li>
<li>
<p>Click <span class="bold">Change DAD</span> from the Code Wizard&#39;s <span class="bold">Main menu</span>.</p>
</li>
<li>
<p>Click Change to SCOTTCW, if it is not already selected, then click <span class="bold">Next</span>.</p>
</li>
<li>
<p>Enter the user name <code>SCOTT</code> and the password for the user SCOTT when prompted for the user name and password, then press <span class="bold">OK</span>.</p>
<p>The <span class="bold">Main menu</span> now displays the current DAD as <code>SCOTTCW</code> and the current schema as <code>SCOTT</code>.</p>
</li>
</ol>
</dd>
<dd><a id="IMURG11873"></a><a id="sthref152"></a></dd>
<dt class="seghead">Step 4&nbsp;&nbsp;&nbsp;Create and test the media upload procedure.</dt>
<dd>
<p>Click <span class="bold">Create media upload procedure</span> from the <span class="bold">Main menu</span>, then click <span class="bold">Next</span>.</p>
<ol>
<li>
<p>Select the database table and procedure Type.</p>
<ol>
<li>
<p>Click <span class="bold">CW_MEDIA_TABLE</span>.</p>
</li>
<li>
<p>Click <span class="bold">Standalone procedure</span>.</p>
</li>
<li>
<p>Click <span class="bold">Next</span>.</p>
</li>
</ol>
</li>
<li>
<p>Select the PL/SQL document upload table.</p>
<p>If there are no document tables in the <code>SCOTT</code> schema, the Code Wizard displays a message indicating this situation. In this case, accept the default table name provided, <code>CW_MEDIA_UPLOAD_TABLE</code>, then click <span class="bold">Next</span>.</p>
<p>If there are existing document tables, but the table <code>CW_MEDIA_UPLOAD_TABLE</code> is not among them, click <span class="bold">Create new document table</span>, accept the default table name provided, <code>CW_MEDIA_UPLOAD_TABLE</code>, then click <span class="bold">Next</span>.</p>
<p>If the <code>CW_MEDIA_UPLOAD_TABLE</code> document table already exists, select <span class="bold">Use existing document table</span> and <span class="bold">CW_MEDIA_UPLOAD_TABLE</span>, then click <span class="bold">Next</span>.</p>
</li>
<li>
<p>Select the data access and media columns.</p>
<ol>
<li>
<p>Ensure that <span class="bold">IMAGE (ORDIMAGE)</span>, <span class="bold">THUMB (ORDIMAGE)</span>, <span class="bold">AUDIO (ORDAUDIO)</span>, <span class="bold">VIDEO (ORDVIDEO)</span>, and <span class="bold">MEDIA (ORDDOC)</span> are all checkmarked.</p>
</li>
<li>
<p>Click <span class="bold">ID (Primary key)</span>.</p>
</li>
<li>
<p>Click <span class="bold">Conditional insert or update</span>.</p>
</li>
<li>
<p>Click <span class="bold">Next</span>.</p>
</li>
</ol>
</li>
<li>
<p>Select additional columns and procedure names.</p>
<ol>
<li>
<p>Ensure that <span class="bold">DESCRIPTION</span> is checkmarked because this column has a <code>NOT NULL</code> constraint. (The <span class="bold">LOCATION</span> column is not checkmarked by default as there are no constraints on this column.)</p>
</li>
<li>
<p>Accept the procedure name provided, <code>UPLOAD_CW_MEDIA_TABLE_IMAGE</code>.</p>
</li>
<li>
<p>Click <span class="bold">Create procedure in the database</span>.</p>
</li>
<li>
<p>Click <span class="bold">Next</span>.</p>
</li>
</ol>
</li>
<li>
<p>Review the following selected procedure creation options that are displayed:</p>
<pre>Procedure type:        Standalone
Table name:            CW_MEDIA_TABLE
Media column(s):       IMAGE (ORDIMAGE)
                       THUMB (ORDIMAGE)
                       AUDIO (ORDAUDIO)
                       VIDEO (ORDVIDEO)
                       MEDIA (ORDDOC)
Key column:            ID
Additional column(s):  DESCRIPTION
Table access mode:     Conditional update or insert
Procedure name:        UPLOAD_CW_MEDIA_TABLE_IMAGE
Function:              Create procedure in the database
</pre>
<p>Click <span class="bold">Finish</span>.</p>
</li>
<li>
<p>Compile the procedure and review the generated source information.</p>
<p>The Code Wizard displays this message:</p>
<pre>Procedure created successfully: UPLOAD_CW_MEDIA_TABLE_IMAGE
</pre>
<ol>
<li>
<p>At the option <span class="bold">Click to display generated source:</span>, click <span class="bold">View</span> to view the generated source in another window. A copy of the generated source is shown at the end of Step 4, substep 6g.</p>
</li>
<li>
<p>Close the window after looking at the generated source.</p>
</li>
<li>
<p>Accept the <span class="bold">DAD:</span> name provided, <code>SCOTTCW</code>, then click <span class="bold">Test</span> to display in another window a template file upload form that you can use to test the generated procedure.</p>
</li>
<li>
<p>To customize the template file upload form, select <span class="bold">Save As...</span> from your browser&#39;s <span class="bold">File</span> menu to save the HTML source for editing.</p>
</li>
<li>
<p>To test the template upload form, enter the following information:</p>
<ul>
<li>
<p>For the <span class="bold">ID:</span> column, enter the number <code>1</code> as the row&#39;s primary key.</p>
</li>
<li>
<p>For each Oracle Multimedia object column, click <span class="bold">Browse...</span> and choose the appropriate media to upload to each column of the table. You can choose one or more or all columns to test.</p>
</li>
<li>
<p>For the <span class="bold">DESCRIPTION</span> column, enter a brief description of the media.</p>
</li>
<li>
<p>Click <span class="bold">Upload media</span>.</p>
</li>
</ul>
<p>The Code Wizard displays a template completion window with the heading <span class="bold">Oracle Multimedia Code Wizard: Template Upload Procedure</span>, and, if the procedure is successful, the message: <code>Media uploaded successfully</code>.</p>
</li>
<li>
<p>Close the window.</p>
</li>
<li>
<p>Click <span class="bold">Done</span> on the <span class="bold">Compile procedure and review generated source</span> window to return to the <span class="bold">Main menu</span> of the Code Wizard.</p>
</li>
</ol>
<p><a href="#CHDGJDBB">Example 4-3</a> shows a copy of the generated multiple media upload procedure:</p>
<div id="IMURG11874" class="example">
<p class="titleinexample"><a id="CHDGJDBB"></a>Example 4-3 Multiple Media Upload Procedure Generated in Sample Session 2</p>
<pre>CREATE OR REPLACE PROCEDURE UPLOAD_CW_MEDIA_TABLE_IMAGE
  ( in_ID IN VARCHAR2,
    in_IMAGE IN VARCHAR2 DEFAULT NULL,
    in_THUMB IN VARCHAR2 DEFAULT NULL,
    in_AUDIO IN VARCHAR2 DEFAULT NULL,
    in_VIDEO IN VARCHAR2 DEFAULT NULL,
    in_MEDIA IN VARCHAR2 DEFAULT NULL,
    in_DESCRIPTION IN VARCHAR2 DEFAULT NULL )
AS
  local_IMAGE ORDSYS.ORDIMAGE := ORDSYS.ORDIMAGE.init();
  local_THUMB ORDSYS.ORDIMAGE := ORDSYS.ORDIMAGE.init();
  local_AUDIO ORDSYS.ORDAUDIO := ORDSYS.ORDAUDIO.init();
  local_AUDIO_ctx RAW( 64 );
  local_VIDEO ORDSYS.ORDVIDEO := ORDSYS.ORDVIDEO.init();
  local_VIDEO_ctx RAW( 64 );
  local_MEDIA ORDSYS.ORDDOC := ORDSYS.ORDDOC.init();
  local_MEDIA_ctx RAW( 64 );
  local_ID CW_MEDIA_TABLE.ID%TYPE := NULL;
  upload_size     INTEGER;
  upload_mimetype VARCHAR2( 128 );
  upload_blob     BLOB;
BEGIN
  --
  -- Update the existing row.
  --
  UPDATE CW_MEDIA_TABLE mtbl
    SET mtbl.IMAGE = local_IMAGE,
        mtbl.THUMB = local_THUMB,
        mtbl.AUDIO = local_AUDIO,
        mtbl.VIDEO = local_VIDEO,
        mtbl.MEDIA = local_MEDIA,
        mtbl.DESCRIPTION = in_DESCRIPTION
    WHERE mtbl.ID = in_ID
    RETURN mtbl.ID INTO local_ID;
  --
  -- Conditionally insert a new row if no existing row is updated.
  --
  IF local_ID IS NULL
  THEN
    --
    -- Insert a new row into the table.
    --
    INSERT INTO CW_MEDIA_TABLE ( ID, IMAGE, THUMB, AUDIO, VIDEO, MEDIA,
 DESCRIPTION )
      VALUES ( in_ID, local_IMAGE, local_THUMB, local_AUDIO, 
               local_VIDEO, local_MEDIA, in_DESCRIPTION );
  END IF;
  --
  -- Select Oracle Multimedia object(s) for update.
  --
  SELECT mtbl.IMAGE, mtbl.THUMB, mtbl.AUDIO, mtbl.VIDEO, mtbl.MEDIA INTO
 local_IMAGE, local_THUMB, local_AUDIO, local_VIDEO, local_MEDIA
    FROM CW_MEDIA_TABLE mtbl WHERE mtbl.ID = in_ID FOR UPDATE;
  --
  -- Store media data for the column in_IMAGE.
  --
  IF in_IMAGE IS NOT NULL
  THEN
    SELECT dtbl.doc_size, dtbl.mime_type, dtbl.blob_content INTO
           upload_size, upload_mimetype, upload_blob
      FROM MEDIA_UPLOAD_TABLE dtbl WHERE dtbl.name = in_IMAGE;
    IF upload_size &amp;gt; 0
    THEN
      dbms_lob.copy( local_IMAGE.source.localData, 
                     upload_blob, 
                     upload_size );
      local_IMAGE.setLocal();
      BEGIN
        local_IMAGE.setProperties();
      EXCEPTION
        WHEN OTHERS THEN
          local_IMAGE.contentLength := upload_size;
          local_IMAGE.mimeType := upload_mimetype;
      END;
    END IF;
    DELETE FROM MEDIA_UPLOAD_TABLE dtbl WHERE dtbl.name = in_IMAGE;
  END IF;
  --
  -- Store media data for the column in_THUMB.
  --
  IF in_THUMB IS NOT NULL
  THEN
    SELECT dtbl.doc_size, dtbl.mime_type, dtbl.blob_content INTO
           upload_size, upload_mimetype, upload_blob
      FROM MEDIA_UPLOAD_TABLE dtbl WHERE dtbl.name = in_THUMB;
    IF upload_size &amp;gt; 0
    THEN
      dbms_lob.copy( local_THUMB.source.localData, 
                     upload_blob, 
                     upload_size );
      local_THUMB.setLocal();
      BEGIN
        local_THUMB.setProperties();
      EXCEPTION
        WHEN OTHERS THEN
          local_THUMB.contentLength := upload_size;
          local_THUMB.mimeType := upload_mimetype;
      END;
    END IF;
    DELETE FROM MEDIA_UPLOAD_TABLE dtbl WHERE dtbl.name = in_THUMB;
  END IF;
  --
  -- Store media data for the column in_AUDIO.
  --
  IF in_AUDIO IS NOT NULL
  THEN
    SELECT dtbl.doc_size, dtbl.mime_type, dtbl.blob_content INTO
           upload_size, upload_mimetype, upload_blob
      FROM MEDIA_UPLOAD_TABLE dtbl WHERE dtbl.name = in_AUDIO;
    IF upload_size &amp;gt; 0
    THEN
      dbms_lob.copy( local_AUDIO.source.localData, 
                     upload_blob, 
                     upload_size );
      local_AUDIO.setLocal();
      BEGIN
        local_AUDIO.setProperties(local_AUDIO_ctx);
      EXCEPTION
        WHEN OTHERS THEN
          local_AUDIO.mimeType := upload_mimetype;
      END;
    END IF;
    DELETE FROM MEDIA_UPLOAD_TABLE dtbl WHERE dtbl.name = in_AUDIO;
  END IF;
  --
  -- Store media data for the column in_VIDEO.
  --
  IF in_VIDEO IS NOT NULL
  THEN
    SELECT dtbl.doc_size, dtbl.mime_type, dtbl.blob_content INTO
           upload_size, upload_mimetype, upload_blob
      FROM MEDIA_UPLOAD_TABLE dtbl WHERE dtbl.name = in_VIDEO;
    IF upload_size &amp;gt; 0
    THEN
      dbms_lob.copy( local_VIDEO.source.localData, 
                     upload_blob, 
                     upload_size );
      local_VIDEO.setLocal();
      BEGIN
        local_VIDEO.setProperties(local_VIDEO_ctx);
      EXCEPTION
        WHEN OTHERS THEN
          local_VIDEO.mimeType := upload_mimetype;
      END;
    END IF;
    DELETE FROM MEDIA_UPLOAD_TABLE dtbl WHERE dtbl.name = in_VIDEO;
  END IF;
  --
  -- Store media data for the column in_MEDIA.
  --
  IF in_MEDIA IS NOT NULL
  THEN
    SELECT dtbl.doc_size, dtbl.mime_type, dtbl.blob_content INTO
           upload_size, upload_mimetype, upload_blob
      FROM MEDIA_UPLOAD_TABLE dtbl WHERE dtbl.name = in_MEDIA;
    IF upload_size &amp;gt; 0
    THEN
      dbms_lob.copy( local_MEDIA.source.localData, 
                     upload_blob, 
                     upload_size );
      local_MEDIA.setLocal();
      BEGIN
        local_MEDIA.setProperties(local_MEDIA_ctx, FALSE);
      EXCEPTION
        WHEN OTHERS THEN
          local_MEDIA.contentLength := upload_size;
          local_MEDIA.mimeType := upload_mimetype;
      END;
    END IF;
    DELETE FROM MEDIA_UPLOAD_TABLE dtbl WHERE dtbl.name = in_MEDIA;
  END IF;
  --
  -- Update Oracle Multimedia objects in the table.
  --
  UPDATE CW_MEDIA_TABLE mtbl
    SET mtbl.IMAGE = local_IMAGE,
        mtbl.THUMB = local_THUMB,
        mtbl.AUDIO = local_AUDIO,
        mtbl.VIDEO = local_VIDEO,
        mtbl.MEDIA = local_MEDIA
    WHERE mtbl.ID = in_ID;
  --
  -- Display the template completion message.
  --
  htp.print( &#39;&amp;lt;html&amp;gt;&#39; );
  htp.print( &#39;&amp;lt;title&amp;gt;Oracle Multimedia Code Wizard: Template Upload
 Procedure&amp;lt;/title&amp;gt;&#39; );
  htp.print( &#39;&amp;lt;body&amp;gt;&#39; );
  htp.print( &#39;&amp;lt;h2&amp;gt; Oracle Multimedia Code Wizard:
 Template Upload Procedure&amp;lt;/h2&amp;gt;&#39; );
  htp.print( &#39;Media uploaded successfully.&#39; );
  htp.print( &#39;&amp;lt;/body&amp;gt;&#39; );
  htp.print( &#39;&amp;lt;/html&amp;gt;&#39; );

END UPLOAD_CW_MEDIA_TABLE_IMAGE;
</pre></div>
<!-- class="example" -->
<p>The multiple media upload procedure shown in <a href="#CHDGJDBB">Example 4-3</a> declares these input parameters and variables:</p>
<ol>
<li>
<p>In the declaration section, the procedure declares seven input parameters: <code>in_ID</code>, <code>in_IMAGE</code>, <code>in_THUMB</code>, <code>in_AUDIO</code>, <code>in_VIDEO</code>, <code>in_MEDIA</code>, and <code>in_DESCRIPTION</code>, then initializes the last six to <code>NULL</code>.</p>
</li>
<li>
<p>In the subprogram section, the following variables are declared:</p>
<ul>
<li>
<p>The variables <code>local_IMAGE</code> and <code>local_THUMB</code> are assigned the data type ORDSYS.ORDIMAGE and initialized with an empty BLOB using the ORDIMAGE.init( ) method.</p>
</li>
<li>
<p>The variable <code>local_AUDIO</code> is assigned the data type ORDSYS.ORDAUDIO and initialized with an empty BLOB using the ORDAUDIO.init( ) method. Also a context variable <code>local_AUDIO_ctx</code> is assigned the data type RAW(64).</p>
</li>
<li>
<p>The variable <code>local_VIDEO</code> is assigned the data type ORDSYS.ORDVIDEO and initialized with an empty BLOB using the ORDVIDEO.init( ) method. Also, a context variable <code>local_VIDEO_ctx</code> is assigned the data type RAW(64).</p>
</li>
<li>
<p>The variable <code>local_MEDIA</code> is assigned the data type ORDSYS.ORDDOC and initialized with an empty BLOB using the ORDDOC.init( ) method. Also, a context variable <code>local_MEDIA_ctx</code> is assigned the data type RAW(64).</p>
</li>
<li>
<p>The variable <code>local_ID</code> takes the same data type as the <code>ID</code> column in the table <code>CW_MEDIA_TABLE</code> and is initialized to <code>NULL</code>.</p>
</li>
<li>
<p>Three additional variables are declared <code>upload_size</code>, <code>upload_mimetype</code>, and <code>upload_blob</code>, which are later given values from comparable column names <code>doc_size</code>, <code>mime_type</code>, and <code>blob_content</code> from the document table <code>MEDIA_UPLOAD_TABLE</code> using a SELECT statement. This is all in preparation for copying the content of the image, thumb, audio, video, and media BLOB data to the respective ORDSYS.ORDIMAGE.source.localData, ORDSYS.ORDIMAGE.source.localData, ORDSYS.ORDAUDIO.source.localData, ORDSYS.ORDVIDEO.source.localData, and ORDSYS.ORDDOC.source.localData attributes.</p>
</li>
</ul>
</li>
</ol>
<p>Within the outer BEGIN...END executable statement section, the following operations are executed:</p>
<ol>
<li>
<p>Update the existing row in the table <code>CW_MEDIA_TABLE</code> for the <code>IMAGE</code>, <code>THUMB</code>, <code>AUDIO</code>, <code>VIDEO</code>, <code>MEDIA</code>, and <code>DESCRIPTION</code> columns and return the value of <code>local_ID</code> where the value of the <code>ID</code> column is the value of the <code>in_ID</code> input parameter.</p>
</li>
<li>
<p>If the value returned of <code>local_ID</code> is <code>NULL</code>, conditionally insert a new row into the table <code>CW_MEDIA_TABLE</code> and initialize the instance of the ORDImage object type in the <code>IMAGE</code> column with an empty BLOB, the instance of the ORDImage object type in the <code>THUMB</code> column with an empty BLOB, the instance of the ORDAudio object type in the <code>AUDIO</code> column with an empty BLOB, the instance of the ORDVideo object type in the <code>VIDEO</code> column with an empty BLOB, and the instance of the ORDDoc object type in the <code>MEDIA</code> column with an empty BLOB.</p>
</li>
<li>
<p>Select the ORDImage object column <code>IMAGE</code>, ORDImage object column <code>THUMB</code>, ORDAudio object column <code>AUDIO</code>, ORDVideo object column <code>VIDEO</code>, and ORDDoc object column <code>MEDIA</code> in the table <code>CW_MEDIA_TABLE</code> for update where the value of the <code>ID</code> column is the value of the <code>in_ID</code> input parameter.</p>
</li>
<li>
<p>Select a row for the <code>doc_size</code>, <code>mime_type</code>, and <code>blob_content</code> columns from the document table and pass the values to the <code>upload_size</code>, <code>upload_mimetype</code>, and <code>upload_blob</code> variables where the value of the <code>Name</code> column is the value of one of these input parameters: <code>in_IMAGE</code>; <code>in_THUMB</code>; <code><br/>
in_AUDIO</code>; <code>in_VIDEO</code>; or <code>in_MEDIA</code>.</p>
</li>
<li>
<p>Perform a DBMS LOB copy of the BLOB data from the table <code>MEDIA_UPLOAD_TABLE</code> into the ORDSYS.ORDIMAGE.source.localData, ORDSYS.ORDIMAGE.source.localData, ORDSYS.ORDAUDIO.source.localData, ORDSYS.ORDVIDEO.source.localData, and ORDSYS.ORDDoc.source.localData attribute, then call the setLocal( ) method to indicate that the image, audio, and video data are stored locally in the BLOB, and ORDImage, ORDAudio, ORDVideo, and ORDDoc methods are to look for corresponding data in the source.localData attribute.</p>
</li>
<li>
<p>In the inner executable block, call the respective ORDImage, ORDAudio, ORDVideo, and ORDDoc setProperties( ) method to read the image, audio, and video data to get the values of the object attributes and store them in the image, audio, video, and media object attributes for the ORDImage, ORDAudio, ORDVideo, and ORDDoc objects.</p>
</li>
<li>
<p>If the setProperties( ) call fails, catch the exception and call the contentLength( ) method to get the size of the media data and call the mimeType( ) method to get the MIME type of the media data.</p>
</li>
<li>
<p>Delete the row of data from the document table <code>MEDIA_UPLOAD_TABLE</code> hat was copied to the row in the table <code>CW_MEDIA_TABLE</code> where the value of the <code>Name</code> column is the value of the respective <code>in_IMAGE</code>, <code>in_THUMB</code>, <code>in_AUDIO</code>, <code>in_VIDEO</code>, and <code>in_MEDIA</code> input parameter.</p>
</li>
<li>
<p>Update the ORDImage object <code>IMAGE</code> column, the ORDImage object <code>THUMB</code> column, the ORDAudio object <code>AUDIO</code> column, the ORDVideo object <code>VIDEO</code> column, and the ORDDoc object <code>MEDIA</code> column in the table <code>CW_MEDIA_TABLE</code> with the content of the variables <code>local_IMAGE</code>, <code>local_THUMB</code>, <code>local_AUDIO</code>, <code>local_VIDEO</code>, and <code>local_MEDIA</code> respectively, where the value of the <code>ID</code> column is the value of the <code>in_ID</code> input parameter.</p>
</li>
<li>
<p>Display a completion message on the HTML page to indicate that the media uploaded successfully using the <code>htp.print</code> function from the PL/SQL Web Toolkit.</p>
</li>
</ol>
</li>
</ol>
</dd>
<dd><a id="IMURG11875"></a><a id="sthref153"></a></dd>
<dt class="seghead">Step 5&nbsp;&nbsp;&nbsp;Create and test a media retrieval.</dt>
<dd>
<p>Select <span class="bold">Create media retrieval procedure</span> from the <span class="bold">Main menu</span>, then click <span class="bold">Next</span>.</p>
<ol>
<li>
<p>Select the database table and procedure type.</p>
<ol>
<li>
<p>Click <span class="bold">CW_MEDIA_TABLE</span>.</p>
</li>
<li>
<p>Click <span class="bold">Standalone procedure</span>.</p>
</li>
<li>
<p>Click <span class="bold">Next</span>.</p>
</li>
</ol>
</li>
<li>
<p>Select the media column and key column.</p>
<ol>
<li>
<p>Ensure that one the following object columns is checkmarked. For example, if you loaded media data into the media column in Step 4, substep 6e, then select the <span class="bold">MEDIA (ORDDOC)</span> column.</p>
</li>
<li>
<p>Click <span class="bold">ID (Primary key)</span>.</p>
</li>
<li>
<p>Click <span class="bold">Next</span>.</p>
</li>
</ol>
</li>
<li>
<p>Select the procedure name and parameter name.</p>
<ol>
<li>
<p>Accept the procedure name provided, <code>GET_CW_MEDIA_TABLE_IMAGE</code>.</p>
</li>
<li>
<p>Accept the parameter name provided, <code>MEDIA_ID</code>.</p>
</li>
<li>
<p>Click <span class="bold">Create procedure in the database</span>.</p>
</li>
<li>
<p>Click <span class="bold">Next</span>.</p>
</li>
</ol>
</li>
<li>
<p>Review the following selected procedure creation options:</p>
</li>
<li>
<pre>Procedure type:        Standalone
Table name:            CW_MEDIA_TABLE
Key column:            ID
Media column:          IMAGE (ORDDOC)
Procedure name:        GET_CW_MEDIA_TABLE_IMAGE
Parameter name:        MEDIA_ID
Function:              Create procedure in the database
</pre>
<p>Click <span class="bold">Finish</span>.</p>
</li>
<li>
<p>Compile the procedure and review the generated source.</p>
<p>The Code Wizard displays this message:</p>
<pre>Procedure created successfully: GET_CW_MEDIA_TABLE_IMAGE
</pre>
<ol>
<li>
<p>Click <span class="bold">View</span> to view the generated source in another window. Close the window after looking at the generated source. A copy of the generated source is shown at the end of this step.</p>
</li>
<li>
<p>Review the URL format used to retrieve images using the <code>GET_CW_MEDIA_TABLE_IMAGE</code> procedure.</p>
</li>
<li>
<p>Enter the number <code>1</code> as the Key parameter, then click <span class="bold">Test</span> to test the procedure by retrieving the image uploaded previously.</p>
</li>
<li>
<p>The retrieved image is displayed in another window.</p>
</li>
<li>
<p>Close the window.</p>
</li>
<li>
<p>Click <span class="bold">Done</span> to return to the <span class="bold">Main menu</span>.</p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
A generated media retrieval script, unlike the multiple media upload script shown at the end of Step 4, handles only the type of media data designed for that Oracle Multimedia object type. To retrieve media data stored in other Oracle Multimedia object types, generate a retrieval script for each desired media data type and add it to your PL/SQL package.</div>
<p><a href="#CHDEBDAE">Example 4-4</a> shows a copy of the generated media retrieval procedure:</p>
<div id="IMURG11876" class="example">
<p class="titleinexample"><a id="CHDEBDAE"></a>Example 4-4 Media Retrieval Procedure Generated in Sample Session 2</p>
<pre>CREATE OR REPLACE PROCEDURE GET_CW_MEDIA_TABLE_MEDIA ( MEDIA_ID
 IN VARCHAR2 )
AS
  localObject ORDSYS.ORDDOC;
  localBlob  BLOB;
  localBfile BFILE;
  httpStatus NUMBER;
  lastModDate VARCHAR2(256);

BEGIN
  --
  -- Retrieve the object from the database into a local object.
  --
  BEGIN
    SELECT mtbl.MEDIA INTO localObject FROM CW_MEDIA_TABLE mtbl 
      WHERE mtbl.ID = MEDIA_ID;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      ordplsgwyutil.resource_not_found( &#39;MEDIA_ID&#39;, MEDIA_ID );
      RETURN;
  END;
  --  -- Check the update time if the browser sent an If-Modified-Since header.
  --
  IF ordplsgwyutil.cache_is_valid( localObject.getUpdateTime() )
  THEN
    owa_util.status_line( ordplsgwyutil.http_status_not_modified );
    RETURN;
  END IF;
  --
  -- Figure out where the image is.
  --
  IF localObject.isLocal() THEN
    --
    -- Data is stored locally in the localData BLOB attribute.
    --
    localBlob := localObject.getContent();
    owa_util.mime_header( localObject.getMimeType(), FALSE );
    ordplsgwyutil.set_last_modified( localObject.getUpdateTime() );
    owa_util.http_header_close();
    IF owa_util.get_cgi_env( &#39;REQUEST_METHOD&#39; ) &amp;lt;&amp;gt; &#39;HEAD&#39; THEN
      wpg_docload.download_file( localBlob );
    END IF;

  ELSIF UPPER( localObject.getSourceType() ) = &#39;FILE&#39; THEN
    --
    -- Data is stored as a file from which ORDSource creates 
    -- a BFILE.
    --
    localBfile  := localObject.getBFILE();
    owa_util.mime_header( localObject.getMimeType(), FALSE );
    ordplsgwyutil.set_last_modified( localObject.getUpdateTime() );
    owa_util.http_header_close();
    IF owa_util.get_cgi_env( &#39;REQUEST_METHOD&#39; ) &amp;lt;&amp;gt; &#39;HEAD&#39; THEN
      wpg_docload.download_file( localBfile );
    END IF;

  ELSIF UPPER( localObject.getSourceType() ) = &#39;HTTP&#39; THEN
    --
    -- The image is referenced as an HTTP entity, so we have to 
    -- redirect the client to the URL that ORDSource provides.
    --
    owa_util.redirect_url( localObject.getSource() );
  ELSE
    --
    -- The image is stored in an application-specific data
    -- source type for which no default action is available.
    --
    NULL;
  END IF;
END GET_CW_MEDIA_TABLE_MEDIA;
</pre></div>
<!-- class="example" -->
<p>For a description of the media retrieval procedure shown in <a href="#CHDEBDAE">Example 4-4</a>, see the description that follows <a href="#CHDGHFJC">Example 4-2</a> (in <a href="#CEGFHCBI">Section 4.3</a>). The only difference between these two retrieval procedures is the type of object that is retrieved. <a href="#CHDGHFJC">Example 4-2</a> uses an ORDImage object type; <a href="#CHDEBDAE">Example 4-4</a> uses an ORDDoc object type.</p>
</li>
</ol>
</dd>
</dl>
</div>
<!-- class="sect1" -->
<a id="BABIGBAD"></a>
<div id="IMURG4540" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">4.5</span> Known Restrictions of the Oracle Multimedia Code Wizard</h2>
<p>The following restrictions are known for the Oracle Multimedia Code Wizard:</p>
<ul>
<li>
<p>Tables with composite primary keys are not supported.</p>
<p>To use a table with a composite primary key, create an upload or download procedure, then edit the generated source to support all the primary key columns. For example, for a media retrieval procedure, this might involve adding an additional parameter, then specifying that parameter in the <code>where</code> clause of the SELECT statement.</p>
</li>
<li>
<p>User object types containing embedded Oracle Multimedia object types are not recognized by the Oracle Multimedia Code Wizard.</p>
</li>
</ul>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1311">
<tr>
<td class="cellalignment1318">
<table class="cellalignment1316">
<tr>
<td class="cellalignment1315"><a href="ch_phtalbapps.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1315"><a href="ch_imexapp.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1320">
<table class="cellalignment1314">
<tr>
<td class="cellalignment1315"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1315"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1315"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1315"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1315"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1315"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>