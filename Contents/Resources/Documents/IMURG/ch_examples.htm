<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-48244"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Oracle%20Multimedia%20Examples"></a><title>Oracle Multimedia Examples</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023"/>
<meta name="description" content="Presents information about using Oracle Database to store, manage, and retrieve images, audio, video, DICOM format medical images and other objects, or other heterogeneous media data in an integrated fashion with other enterprise information. Oracle Multimedia extends Oracle Database reliability, availability, and data management to multimedia content in traditional, Internet, electronic commerce, medical, financial, and other media-rich applications."/>
<meta name="dcterms.created" content="2014-07-31T9:32:46Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Multimedia User&#39;s Guide"/>
<meta name="dcterms.identifier" content="E17697-09"/>
<meta name="dcterms.isVersionOf" content="IMURG"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Glossary" href="im_glossary.htm" title="Glossary" type="text/html"/>
<link rel="Prev" href="ch_dba.htm" title="Previous" type="text/html"/>
<link rel="Next" href="ap_demos.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E17697-09.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">16/20</span> <!-- End Header -->
<div id="IMURG9000" class="chapter"><a id="g1014010"></a>
<h1 class="chapter"><span class="secnum">9</span> Oracle Multimedia Examples</h1>
<p>This chapter provides examples that show common operations with Oracle Multimedia.</p>
<p>This chapter includes these sections:</p>
<ul>
<li>
<p><a href="#CHDJBCFJ">Audio Data Examples</a></p>
</li>
<li>
<p><a href="#CHDGBIJJ">Media Data Examples</a></p>
</li>
<li>
<p><a href="#i600896">Image Data Examples</a></p>
</li>
<li>
<p><a href="#CHDJEFEB">Video Data Examples</a></p>
</li>
</ul>
<a id="CHDJBCFJ"></a>
<div id="IMURG9100" class="sect1">
<h2 class="sect1"><span class="secnum">9.1</span> Audio Data Examples</h2>
<p>Audio data examples<a id="sthref217"></a> using Oracle Multimedia include common operations on audio data, such as using audio types with object views and using a set of scripts for populating an ORDAudio object with BLOB data stored in the database. The following subsections describe these operations:</p>
<ul>
<li>
<p><a href="#BABGICGI">Using Audio Types with Object Views</a></p>
</li>
<li>
<p><a href="#BABFIJGD">Scripts for Populating an ORDAudio Object with BLOB Data</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<p><a class="olink AIVUG4000" href="../AIVUG/ch_audref.htm#AIVUG4000"><span class="italic">Oracle Multimedia Reference</span></a> for reference information about the methods used in these examples</p>
</div>
<a id="BABGICGI"></a>
<div id="IMURG11687" class="sect2">
<h3 class="sect2"><span class="secnum">9.1.1</span> Using Audio Types with Object Views</h3>
<p>This section describes how to use audio types with object views. Just as a view is a virtual table, an object view is a virtual object table.</p>
<p>Oracle provides object views as an extension of the basic relational view mechanism. By using object views, you can create virtual object tables -- of either built-in or user-defined types -- from data stored in the columns of relational or object tables in the database.</p>
<p>Object views can offer specialized or restricted access to the data and objects in a database. For example, you might use an object view to provide a version of an employee object table that does not have attributes containing sensitive data or a deletion method. Object views also let you try object-oriented programming without permanently converting your tables. Using object views, you can convert data gradually and transparently from relational tables to object-relational tables.</p>
<p>In <a href="#i610140">Example 9-1</a>, consider the following relational table (containing no ORDAudio objects).</p>
<div id="IMURG11688" class="example">
<p class="titleinexample"><a id="i610140"></a>Example 9-1 Define a Relational Table Containing No ORDAudio Object</p>
<pre>create table flat (
   id                NUMBER,
   description       VARCHAR2(4000),
   localData         BLOB,
   srcType           VARCHAR2(4000),
   srcLocation       VARCHAR2(4000),
   srcName           VARCHAR2(4000),
   upDateTime        DATE,
   local             NUMBER,
   format            VARCHAR2(31),
   mimeType          VARCHAR2(4000),
   comments          CLOB,
   encoding          VARCHAR2(256),
   numberOfChannels  NUMBER,
   samplingRate      NUMBER,
   sampleSize        NUMBER,
   compressionType   VARCHAR2(4000),
   audioDuration     NUMBER,
)
--
-- Store audio data as SecureFiles LOBs.
--
LOB(localData) STORE AS SECUREFILE;
</pre></div>
<!-- class="example" -->
<p>You can create an object view on the relational table shown in <a href="#i610140">Example 9-1</a>, as shown in <a href="#i610144">Example 9-2</a>.</p>
<div id="IMURG11689" class="example">
<p class="titleinexample"><a id="i610144"></a>Example 9-2 Define an Object View Containing an ORDAudio Object and Relational Columns</p>
<pre>create or replace view object_audio_v as 
  select
      id,
      ORDSYS.ORDAudio(T.description,
      ORDSYS.ORDSource(
         T.localData, T.srctype, T.srcLocation, T.srcName, T.updateTime,
         T.local),
         T.format,
         T.mimeType,
         T.comments, 
         T.encoding, 
         T.numberOfChannels, 
         T.samplingRate, 
         T.sampleSize, 
         T.compressionType, 
         T.audioDuration)
   from flat T;
</pre></div>
<!-- class="example" -->
<p>Object views provide the flexibility of looking at the same relational or object data in more than one way. Therefore, you can use different in-memory object representations for different applications without changing the way you store the data in the database.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<p><a class="olink CNCPT88858" href="../CNCPT/schemaob.htm#CNCPT88858"><span class="italic">Oracle Database Concepts</span></a> for more information about defining, using, and updating object views</p>
</div>
</div>
<!-- class="sect2" -->
<a id="BABFIJGD"></a>
<div id="IMURG11690" class="sect2">
<h3 class="sect2"><span class="secnum">9.1.2</span> Scripts for Populating an ORDAudio Object with BLOB Data</h3>
<p>The scripts presented in this section demonstrate how to populate an Oracle Multimedia ORDAudio object from an existing BLOB stored in the database.</p>
<p><a href="#BABBGIGG">Table 9-1</a> lists each script by name, along with a brief description of the operations it performs. Each script is included and described in further detail in the following sections.</p>
<div id="IMURG11691" class="tblruleformal">
<p class="titleintable"><a id="sthref218"></a><a id="BABBGIGG"></a>Table 9-1 Audio Scripts</p>
<table class="cellalignment1321" title="Audio Scripts" summary="Table of scripts for ORDAudio" dir="ltr">
<thead>
<tr class="cellalignment1312">
<th class="cellalignment1322" id="r1c1-t4">Script Name</th>
<th class="cellalignment1322" id="r1c2-t4">Operations Performed</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r2c1-t4" headers="r1c1-t4">
<p><code>create_mediadir.sql</code></p>
<p>(See <a href="#BABBFBDB">Example 9-3</a>)</p>
</td>
<td class="cellalignment1318" headers="r2c1-t4 r1c2-t4">
<p>Creates an audio data load directory.</p>
<p>(See <a href="#BABCEEFG">Section 9.1.2.1</a>)</p>
</td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r3c1-t4" headers="r1c1-t4">
<p><code>create_soundtable.sql</code></p>
<p>(See <a href="#BABFFHDG">Example 9-4</a>)</p>
</td>
<td class="cellalignment1318" headers="r3c1-t4 r1c2-t4">
<p>Creates and populates the <code>soundtable</code> table.</p>
<p>(See <a href="#BABIEBCE">Section 9.1.2.2</a>)</p>
</td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r4c1-t4" headers="r1c1-t4">
<p><code>create_audtable.sql</code></p>
<p>(See <a href="#BABDIAJJ">Example 9-5</a>)</p>
</td>
<td class="cellalignment1318" headers="r4c1-t4 r1c2-t4">
<p>Creates the <code>audio_table</code> table.</p>
<p>(See <a href="#BABIAGCF">Section 9.1.2.3</a>)</p>
</td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r5c1-t4" headers="r1c1-t4">
<p><code>import_aud.sql</code></p>
<p>(See <a href="#BABEJHFJ">Example 9-6</a>)</p>
</td>
<td class="cellalignment1318" headers="r5c1-t4 r1c2-t4">
<p>Loads the audio data. This script imports the audio data from an audio file into the <code>audio_table</code> table using the ORDAudio import( ) method.</p>
<p>(See <a href="#BABHHEEH">Section 9.1.2.4</a>)</p>
</td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r6c1-t4" headers="r1c1-t4">
<p><code>copy_audblob.sql</code></p>
<p>(See <a href="#BABCAJED">Example 9-7</a>)</p>
</td>
<td class="cellalignment1318" headers="r6c1-t4 r1c2-t4">
<p>Copies the BLOB data from the <code>soundtable</code> table to the <code>audio_table</code> table.</p>
<p>(See <a href="#BABGCFFB">Section 9.1.2.5</a>)</p>
</td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r7c1-t4" headers="r1c1-t4">
<p><code>showprop_aud.sql</code></p>
<p>(See <a href="#BABBDCCI">Example 9-8</a>)</p>
</td>
<td class="cellalignment1318" headers="r7c1-t4 r1c2-t4">
<p>Displays the properties of the loaded audio data stored in the <code>audio_table</code> table.</p>
<p>(See <a href="#BABFBEIE">Section 9.1.2.6</a>)</p>
</td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r8c1-t4" headers="r1c1-t4">
<p><code>setup_audsample.sql</code></p>
<p>(See <a href="#BABFDIDE">Example 9-9</a>)</p>
</td>
<td class="cellalignment1318" headers="r8c1-t4 r1c2-t4">
<p>Automates the process by running the previous audio scripts in the required order.</p>
<p>(See <a href="#BABEBHII">Section 9.1.2.7</a>)</p>
</td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r9c1-t4" headers="r1c1-t4">
<p><code>cleanup_audsample.sql</code></p>
<p>(See <a href="#BABFFDCH">Example 9-10</a>)</p>
</td>
<td class="cellalignment1318" headers="r9c1-t4 r1c2-t4">
<p>Cleans up by removing the sample tables, directories, and procedures from your database.</p>
<p>(See <a href="#BABIFIJE">Section 9.1.2.8</a>)</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblruleformal" -->
<a id="BABCEEFG"></a>
<div id="IMURG11692" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">9.1.2.1</span> Create an Audio Data Load Directory</h4>
<p>The <code>create_mediadir.sql</code> script creates the audio data load directory. This script is shown in <a href="#BABBFBDB">Example 9-3</a>. (See <a href="#BABIBJDD">Section 9.2.1.1</a> and <a href="#BABHIHEG">Section 9.3.1.1</a>, respectively, for information about how to use this script to create the load directories for media data and image data.)</p>
<p>To load the audio data successfully, you must create a database directory object that points to a file directory on your system. <a href="#BABBFBDB">Example 9-3</a> uses the <code>media_dir</code> directory, which points to the file directory <code>C:\media_dir</code>. You can edit the <code>create_mediadir.sql</code> script to replace the directory path in the CREATE OR REPLACE DIRECTORY statement with your directory specification.</p>
<p>This directory specified in the <code>create_mediadir.sql</code> script must contain your sample audio files. The audio examples use the sample file <code>aud1.wav</code>, which is installed in the <code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>/ord/aud/demo</code> directory. You can copy any supported audio files to the <code>C:\media_dir</code> directory to run the scripts in these examples.</p>
<p>Before running the <code>create_mediadir.sql</code> script, ensure that you have these privileges:</p>
<ul>
<li>
<p>CREATE ANY DIRECTORY (to specify the directory specification for your audio files)</p>
</li>
<li>
<p>DROP ANY DIRECTORY (to delete previous instances of the audio data load directory)</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you run the <code>create_mediadir.sql</code> script as a different user than the user who ran the other audio scripts, you must perform these steps:
<ol>
<li>
<p>Uncomment the GRANT READ ON DIRECTORY statement.</p>
</li>
<li>
<p>Replace the string <code>&lt;USER&gt;</code> in this statement with the new user (for example: <code>SCOTT</code>).</p>
</li>
</ol>
</div>
<div id="IMURG11879" class="example">
<p class="titleinexample"><a id="BABBFBDB"></a>Example 9-3 create_mediadir.sql Script</p>
<pre>-- create_mediadir.sql
--
SET SERVEROUTPUT ON;
SET ECHO ON;
 
-- To delete the directory, uncomment the next statement; 
-- otherwise, leave it commented out.
-- DROP DIRECTORY media_dir;
 
-- To specify a different directory path, replace the default directory 
-- path with the new path in the next statement.
CREATE OR REPLACE DIRECTORY media_dir AS &#39;C:\media_dir&#39;;

-- To change the user, uncomment the next statement and replace the 
-- string &#34;&lt;USER&gt;&#34; with the new user. Otherwise, leave the statement 
-- commented out.
-- GRANT READ ON DIRECTORY media_dir TO &lt;USER&gt;;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="BABIEBCE"></a>
<div id="IMURG11694" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">9.1.2.2</span> Create and Populate the soundtable Table</h4>
<p>The <code>create_soundtable.sql</code> script creates and populates the <code>soundtable</code> table. This table contains a BLOB column; it is created to demonstrate how to populate a table with an Oracle Multimedia ORDAudio column from a table with a BLOB column. This script is shown in <a href="#BABFFHDG">Example 9-4</a>.</p>
<p>This script creates the <code>soundtable</code> table, inserts a row with an empty BLOB, loads the BLOB with audio data, and then checks the length of the BLOB data. You can replace the name of the data file in the <code>create_soundtable.sql</code> script with the name of the data file you plan to use.</p>
<p>Before running this script, ensure that you have the CREATE TABLE privilege.</p>
<div id="IMURG11784" class="example">
<p class="titleinexample"><a id="BABFFHDG"></a>Example 9-4 create_soundtable.sql Script</p>
<pre>-- create_soundtable.sql
--
-- Create the soundtable table. This table is used ONLY to show
-- how to copy data from a BLOB column to an ORDAudio column.
--
-- Insert a row into the table with an empty BLOB.
-- Load the row with BLOB data by pointing to the audio file to 
-- be loaded from the directory specified using the BFILE data 
-- type.
-- Close the files and commit the transaction.
-- Check the length of the BLOB loaded. Is the length
-- what you are expecting?
--
SET SERVEROUTPUT ON;
 
CREATE TABLE soundtable ( id number,
                         sound BLOB default EMPTY_BLOB() )
--
-- Store audio data as SecureFiles LOBs.
--
LOB(sound) STORE AS SECUREFILE;
 
-- 
INSERT INTO soundtable(id, sound) VALUES (1, EMPTY_BLOB());
COMMIT;

DECLARE
   f_lob BFILE := BFILENAME(&#39;MEDIA_DIR&#39;,&#39;aud1.wav&#39;);
   b_lob BLOB;
   length INTEGER;
BEGIN
 
  SELECT sound INTO b_lob FROM soundtable WHERE id=1 FOR UPDATE;
 
  -- Open the LOBs.
  dbms_lob.open(f_lob, dbms_lob.file_readonly);
  dbms_lob.open(b_lob, dbms_lob.lob_readwrite);
 
  -- Populate the BLOB from the &#39;aud1.wav&#39; file in the BFILE.
  dbms_lob.loadfromfile (b_lob, f_lob, dbms_lob.getlength(f_lob));
 
  -- Close the LOBs.
  dbms_lob.close(b_lob);
  dbms_lob.close(f_lob);
  COMMIT;
 
  -- Check the length of the LOB.
  SELECT dbms_lob.getlength(t.sound) INTO length FROM soundtable t WHERE id = 1;
  DBMS_OUTPUT.PUT_LINE(&#39;The length is &#39;|| length);
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="BABIAGCF"></a>
<div id="IMURG11696" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">9.1.2.3</span> Create the audio_table Table</h4>
<p>The <code>create_audtable.sql</code> script creates the <code>audio_table</code> table with the two columns <code>id</code> and <code>audio</code>. The <code>audio</code> column is defined as type ORDAudio. This script is shown in <a href="#BABDIAJJ">Example 9-5</a>.</p>
<p>Before running this script, ensure that you have the CREATE TABLE privilege.</p>
<div id="IMURG11697" class="example">
<p class="titleinexample"><a id="BABDIAJJ"></a>Example 9-5 create_audtable.sql Script</p>
<pre>-- create_audtable.sql
--
CREATE TABLE audio_table ( id NUMBER,
                       audio ORDAudio )
LOB(audio.source.localData) STORE AS SECUREFILE;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="BABHHEEH"></a>
<div id="IMURG11698" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">9.1.2.4</span> Load the Audio Data</h4>
<p>The <code>import_aud.sql</code> script inserts a row into the <code>audio_table</code> table, and imports audio data from an audio file into the <code>audio</code> column in the <code>audio_table</code> table using the ORDAudio import( ) method. This script is shown in <a href="#BABEJHFJ">Example 9-6</a>.</p>
<p>To run this script successfully, you must copy one audio clip to your <code>media_dir</code> directory using the name specified in this script, or modify this script to match the file names of your audio clips.</p>
<p>This script loads the same audio clip that was loaded by the <code>create_soundtable.sql</code> script. It is used later in the <code>showprop_aud.sql</code> script to show that data loaded with the import( ) method matches the data copied from the BLOB column of the <code>soundtable</code> table.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Run this script as the user who ran the previous audio scripts.</div>
<div id="IMURG11785" class="example">
<p class="titleinexample"><a id="BABEJHFJ"></a>Example 9-6 import_aud.sql Script</p>
<pre>--import_aud.sql
--
DECLARE
  obj ORDAUDIO;
  ctx RAW(64) := NULL;
 
BEGIN
 
  -- Insert a row with an ORDAudio object.
  INSERT INTO audio_table VALUES 
    (1, ORDAudio(&#39;FILE&#39;, &#39;MEDIA_DIR&#39;, &#39;aud1.wav&#39;))
    returning audio into obj;
 
  --Import the audio clip aud1.wav from media_dir.
  obj.import(ctx);
 
  --Set the properties.
  obj.setProperties(ctx);
 
  --Update the table with the audio object. 
  UPDATE audio_table SET audio = obj WHERE id = 1;
 
  COMMIT;
 
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="BABGCFFB"></a>
<div id="IMURG11700" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">9.1.2.5</span> Copy the BLOB Data to the ORDAudio Object</h4>
<p>The <code>copy_audblob.sql</code> script inserts a row with <code>id=2</code> into the <code>audio_table</code> table and copies the audio data in the <code>sound</code> column of the <code>soundtable</code> table into the <code>audio</code> column of the <code>audio_table</code> table for a row with <code>id=2</code>. The script uses the ORDAudio constructor that takes a BLOB as the input parameter. It also sets the properties of the audio data after inserting it. This script is shown in <a href="#BABCAJED">Example 9-7</a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Run this script as the user who ran the previous audio scripts.</div>
<div id="IMURG11786" class="example">
<p class="titleinexample"><a id="BABCAJED"></a>Example 9-7 copy_audblob.sql Script</p>
<pre>--copy_audblob.sql
-- 
-- Use the ORDAudio constructor that takes a BLOB as the input parameter
-- in the SQL INSERT statement.
-- 
-- In this case, the BLOB (an audio clip), which was stored in
-- a row with ID = 1 in the soundtable table, is copied to a row 
-- with ID = 2 in the audio_table table containing an audio column 
-- defined as an ORDAudio object type.
-- 
INSERT INTO audio_table
  (select 2, ORDAudio(S.sound) FROM soundtable S WHERE S.id = 1);
 
DECLARE
 obj ORDSYS.ORDAudio;
 ctx RAW(40) := NULL;
BEGIN
SELECT audio INTO obj FROM audio_table WHERE id = 2 for update;
obj.setProperties(ctx);
UPDATE audio_table SET audio = obj WHERE ID = 2;
END;
/
 
COMMIT; 
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="BABFBEIE"></a>
<div id="IMURG11702" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">9.1.2.6</span> Show the Properties of the Loaded Audio Data</h4>
<p>The <code>showprop_aud.sql</code> script displays the properties of the audio data clips stored in the <code>audio_table</code> table. They should be identical. Different load methods were used to load the same audio clip into two rows in the <code>audio_table</code> table. This script verifies that the audio data that was loaded using the ORDAudio import( ) method matches the audio data that was copied from a BLOB column of the <code>soundtable</code> table. This script is shown in <a href="#BABBDCCI">Example 9-8</a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Run this script as the user who ran the previous audio scripts.</div>
<div id="IMURG11787" class="example">
<p class="titleinexample"><a id="BABBDCCI"></a>Example 9-8 showprop_aud.sql Script</p>
<pre>-- showprop_aud.sql
--
SET SERVEROUTPUT ON;
 
--
--Query audio_table for ORDAudio content in PL/SQL.
--
 
BEGIN
  -- Check the properties of the audio data clip imported into the
  -- ORDAudio object type. Properties for ID=1 should be identical
  -- with ID=2.
 
  dbms_output.put_line(&#39; Properties of these audio clips are identical:&#39;);
 
  FOR rec in (SELECT id, audio FROM audio_table ORDER BY id) LOOP 
    dbms_output.put_line(&#39;Properties for id: &#39; || rec.id);
 
    dbms_output.put_line(&#39;audio encoding: &#39; || rec.audio.getEncoding);
    dbms_output.put_line(&#39;audio number of channels: &#39;|| 
                        rec.audio.getNumberOfChannels);
    dbms_output.put_line(&#39;audio MIME type: &#39; || rec.audio.getMimeType);
    dbms_output.put_line(&#39;audio file format: &#39; || rec.audio.getFormat);
    dbms_output.put_line
        (&#39;----------------------------------------------&#39;);
  END LOOP;
END;
/
--
-- Query audio_table for ORDAudio and list the properties using SQL.
--
clear columns
column id       format 99;
column encoding format a15;
column mimetype   format a20;
column fileformat   format a15;
column channels     format 99;
SELECT t.id, 
       t.audio.getEncoding() encoding, 
       t.audio.getNumberOfChannels() channels, 
       t.audio.getMimetype() mimetype, 
       t.audio.getFormat() fileformat 
from audio_table t ORDER BY t.id;
</pre></div>
<!-- class="example" -->
<p>The results from running the script <code>showprop_aud.sql</code> show that the properties are identical for each stored audio clip.</p>
<pre>Properties of these audio clips are identical:
Properties for id: 1
audio encoding: MS_PCM
audio number of channels: 1
audio MIME type: audio/x-wav
audio file format: WAVE
----------------------------------------------
Properties for id: 2
audio encoding: MS_PCM
audio number of channels: 1
audio MIME type: audio/x-wav
audio file format: WAVE
----------------------------------------------
 
PL/SQL procedure successfully completed.
 
 
ID ENCODING        CHANNELS MIMETYPE             FILEFORMAT     
--- --------------- -------- -------------------- ---------------
  1 MS_PCM                 1 audio/x-wav          WAVE
  2 MS_PCM                 1 audio/x-wav          WAVE
</pre></div>
<!-- class="sect3" -->
<a id="BABEBHII"></a>
<div id="IMURG11704" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">9.1.2.7</span> Automate the ORDAudio Examples</h4>
<p>The <code>setup_audsample.sql</code> script runs each of the previous audio scripts in the correct order to automate this process. This script is shown in <a href="#BABFDIDE">Example 9-9</a>.</p>
<p>Before running this script, ensure that you have these privileges:</p>
<ul>
<li>
<p>CREATE ANY DIRECTORY</p>
</li>
<li>
<p>CREATE TABLE</p>
</li>
</ul>
<div id="IMURG11705" class="example">
<p class="titleinexample"><a id="BABFDIDE"></a>Example 9-9 setup_audsample.sql Script</p>
<pre>-- setup_audsample.sql
--
 
-- Create the media_dir load directory:
@create_mediadir.sql
 
-- Create the soundtable table and populate it with
-- an audio clip:
@create_soundtable.sql
 
-- Create the audio_table table:
@create_audtable.sql
 
--Import an audio clip:
@import_aud.sql
 
-- Copy a BLOB into an ORDAudio object, set the properties,
-- and update the time:
@copy_audblob.sql
 
-- Check the properties of the audio clips. The properties
-- should be identical:
@showprop_aud.sql
 
--exit;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="BABIFIJE"></a>
<div id="IMURG11706" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">9.1.2.8</span> Clean Up the ORDAudio Examples</h4>
<p>The <code>cleanup_audsample.sql</code> script removes the sample tables, directories, and procedures created by the previous audio scripts from your database. This script is shown in <a href="#BABFFDCH">Example 9-10</a>.</p>
<p>Before running this script, ensure that you have the DROP ANY DIRECTORY privilege.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Run this script as the user who ran the previous audio scripts.</div>
<div id="IMURG11788" class="example">
<p class="titleinexample"><a id="BABFFDCH"></a>Example 9-10 cleanup_audsample.sql Script</p>
<pre>-- cleanup_audsample.sql
--
-- Drop the audio load directory.
-- DROP DIRECTORY media_dir;
 
-- Drop the tables created by the demo.
DROP TABLE soundtable PURGE;
DROP TABLE audio_table PURGE;

exit;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDGBIJJ"></a>
<div id="IMURG9200" class="sect1">
<h2 class="sect1"><span class="secnum">9.2</span> Media Data Examples</h2>
<p>Media data examples<a id="sthref219"></a> using Oracle Multimedia include common operations on heterogeneous data, such as using a set of scripts for populating an ORDDoc object from a file data source. The following subsection describes this operation:</p>
<ul>
<li>
<p><a href="#i611334">Scripts for Populating an ORDDoc Object from a File Data Source</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<p><a class="olink AIVUG5000" href="../AIVUG/ch_docref.htm#AIVUG5000"><span class="italic">Oracle Multimedia Reference</span></a> for reference information about the methods used in these examples</p>
</div>
<a id="i611334"></a>
<div id="IMURG11708" class="sect2">
<h3 class="sect2"><span class="secnum">9.2.1</span> Scripts for Populating an ORDDoc Object from a File Data Source</h3>
<p>The scripts presented in this section demonstrate how to populate an ORDDoc object from an existing file.</p>
<p><a href="#BABCCFDD">Table 9-2</a> lists each script by name, along with a brief description of the operations it performs. Each script is included and described in further detail in the following sections.</p>
<div id="IMURG11709" class="tblruleformal">
<p class="titleintable"><a id="sthref220"></a><a id="BABCCFDD"></a>Table 9-2 Media Scripts</p>
<table class="cellalignment1321" title="Media Scripts" summary="Table of scripts for ORDDoc" dir="ltr">
<thead>
<tr class="cellalignment1312">
<th class="cellalignment1322" id="r1c1-t11">Script Name</th>
<th class="cellalignment1322" id="r1c2-t11">Operations Performed</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r2c1-t11" headers="r1c1-t11">
<p><code>create_mediadir.sql</code></p>
<p>(See <a href="#BABBFBDB">Example 9-3</a>)</p>
</td>
<td class="cellalignment1318" headers="r2c1-t11 r1c2-t11">
<p>Creates a media data load directory.</p>
<p>(See <a href="#BABIBJDD">Section 9.2.1.1</a>)</p>
</td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r3c1-t11" headers="r1c1-t11">
<p><code>create_doctable.sql</code></p>
<p>(See <a href="#BABIBJCD">Example 9-11</a>)</p>
</td>
<td class="cellalignment1318" headers="r3c1-t11 r1c2-t11">
<p>Creates the <code>doc_table</code> table.</p>
<p>(See <a href="#BABEAJGG">Section 9.2.1.2</a>)</p>
</td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r4c1-t11" headers="r1c1-t11">
<p><code>import_doc.sql</code></p>
<p>(See <a href="#BABGCEJB">Example 9-12</a>)</p>
</td>
<td class="cellalignment1318" headers="r4c1-t11 r1c2-t11">
<p>Loads the media data. This script imports the media data from a file into the <code>doc_table</code> table using the ORDDoc import( ) method.</p>
<p>(See <a href="#BABJGDHI">Section 9.2.1.3</a>)</p>
</td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r5c1-t11" headers="r1c1-t11">
<p><code>read_doc.sql</code></p>
<p>(See <a href="#BABBAEIF">Example 9-13</a>)</p>
</td>
<td class="cellalignment1318" headers="r5c1-t11 r1c2-t11">
<p>Reads the media data from a BLOB using a stored procedure.</p>
<p>(See <a href="#BABEHIDF">Section 9.2.1.4</a>)</p>
</td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r6c1-t11" headers="r1c1-t11">
<p><code>showprop_doc.sql</code></p>
<p>(See <a href="#BABCHDEI">Example 9-14</a>)</p>
</td>
<td class="cellalignment1318" headers="r6c1-t11 r1c2-t11">
<p>Displays the properties of the loaded media data stored in the <code>doc_table</code> table.</p>
<p>(See <a href="#BABJDHGA">Section 9.2.1.5</a>)</p>
</td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r7c1-t11" headers="r1c1-t11">
<p><code>setup_docsample.sql</code></p>
<p>(See <a href="#BABHFGEJ">Example 9-15</a>)</p>
</td>
<td class="cellalignment1318" headers="r7c1-t11 r1c2-t11">
<p>Automates the process by running the previous media scripts in the required order.</p>
<p>(See <a href="#BABJGBGA">Section 9.2.1.6</a>)</p>
</td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r8c1-t11" headers="r1c1-t11">
<p><code>cleanup_docsample.sql</code></p>
<p>(See <a href="#BABDGBIH">Example 9-16</a>)</p>
</td>
<td class="cellalignment1318" headers="r8c1-t11 r1c2-t11">
<p>Cleans up by removing the sample tables, directories, and procedures from your database.</p>
<p>(See <a href="#BABDFDIG">Section 9.2.1.7</a>)</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblruleformal" -->
<a id="BABIBJDD"></a>
<div id="IMURG11710" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">9.2.1.1</span> Create a Media Data Load Directory</h4>
<p>The <code>create_mediadir.sql</code> script creates the media data load directory. This script is shown in <a href="#BABBFBDB">Example 9-3</a>.</p>
<p>To load the media data successfully, you must create a database directory object that points to a file directory on your system. <a href="#BABBFBDB">Example 9-3</a> uses the <code>media_dir</code> directory, which points to the file directory <code>C:\media_dir</code>. You can edit the <code>create_mediadir.sql</code> script to replace the directory path in the CREATE OR REPLACE DIRECTORY statement with your directory specification.</p>
<p>This directory specified in the <code>create_mediadir.sql</code> script must contain your sample media files. The media examples use the sample files <code>aud1.wav</code> and <code>aud2.mp3</code>, which are installed in the <code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>/ord/aud/demo</code> directory. You can copy any supported media files to the <code>C:\media_dir</code> directory to run the scripts in these examples.</p>
<p>Before running the <code>create_mediadir.sql</code> script, ensure that you have these privileges:</p>
<ul>
<li>
<p>CREATE ANY DIRECTORY (to specify the directory specification for your media files)</p>
</li>
<li>
<p>DROP ANY DIRECTORY (to delete previous instances of the media data load directory)</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you run the <code>create_mediadir.sql</code> script as a different user than the user who ran the other media scripts, you must perform these steps:
<ol>
<li>
<p>Uncomment the GRANT READ ON DIRECTORY statement.</p>
</li>
<li>
<p>Replace the string <code>&lt;USER&gt;</code> in this statement with the new user (for example: <code>SCOTT</code>).</p>
</li>
</ol>
</div>
</div>
<!-- class="sect3" -->
<a id="BABEAJGG"></a>
<div id="IMURG11712" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">9.2.1.2</span> Create the doc_table Table</h4>
<p>The <code>create_doctable.sql</code> script creates the <code>doc_table</code> table with the two columns <code>id</code> and <code>document</code>. The <code>document</code> column is defined as type ORDDoc. This script is shown in <a href="#BABIBJCD">Example 9-11</a>.</p>
<p>Before running this script, ensure that you have the CREATE TABLE privilege.</p>
<div id="IMURG11789" class="example">
<p class="titleinexample"><a id="BABIBJCD"></a>Example 9-11 create_doctable.sql Script</p>
<pre>-- create_doctable.sql
--
CREATE TABLE doc_table ( id NUMBER,
                         document ORDDoc )
LOB(document.source.localData) STORE AS SECUREFILE;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="BABJGDHI"></a>
<div id="IMURG11714" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">9.2.1.3</span> Load the Media Data</h4>
<p>The <code>import_doc.sql</code> script inserts two rows into the <code>doc_table</code> table, and imports media data from a media file into the <code>document</code> column in the <code>doc_table</code> table using the ORDDoc import( ) method. This script is shown in <a href="#BABGCEJB">Example 9-12</a>.</p>
<p>To run this script successfully, you must copy two media files to your <code>media_dir</code> directory using the names specified in this script, or modify this script to match the file names of your media files.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Run this script as the user who ran the previous media scripts.</div>
<div id="IMURG11790" class="example">
<p class="titleinexample"><a id="BABGCEJB"></a>Example 9-12 import_doc.sql Script</p>
<pre>-- import_doc.sql
--
CREATE OR REPLACE PROCEDURE load_document (in_id INTEGER, 
                                           in_dir VARCHAR2, 
                                           in_fname VARCHAR2)
AS
  obj ORDDOC;
  ctx RAW(64) := NULL;
BEGIN
  INSERT INTO doc_table VALUES 
    (in_id, ORDDoc(&#39;FILE&#39;, in_dir, in_fname))
    RETURNING document INTO obj;
  obj.import(ctx,TRUE);
  UPDATE doc_table SET document = obj WHERE id = in_id;
  COMMIT;
END;
/
show errors;
 
-- Import the audio files aud1.wav and aud2.mp3 from the MEDIA_DIR directory
-- on a local file system. 
EXECUTE load_document(1, &#39;MEDIA_DIR&#39;, &#39;aud1.wav&#39;);
EXECUTE load_document(2, &#39;MEDIA_DIR&#39;, &#39;aud2.mp3&#39;);
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="BABEHIDF"></a>
<div id="IMURG11716" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">9.2.1.4</span> Read the Media Data from the BLOB</h4>
<p>The <code>read_doc.sql</code> script reads media data from a BLOB by creating the stored procedure <code>read_document</code>. This procedure reads a specified amount of media data from the BLOB attribute, beginning at a particular offset, until all the media data is read. This script is shown in <a href="#BABBAEIF">Example 9-13</a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Run this script as the user who ran the previous media scripts.</div>
<div id="IMURG11791" class="example">
<p class="titleinexample"><a id="BABBAEIF"></a>Example 9-13 read_doc.sql Script</p>
<pre>--read_doc.sql
--
SET SERVEROUTPUT ON
 
create or replace procedure read_document( in_id integer) as
obj ORDDoc;
buffer RAW (32767);
numBytes integer;
bytesRead integer := 0;
startpos integer := 1;
ctx RAW(64) := NULL;
BEGIN
  select document into obj from doc_table where id = in_id;
  DBMS_OUTPUT.PUT_LINE(&#39;Content length is: &#39; || obj.getContentLength());
 
  LOOP
    numBytes := 32767;
    startpos := startpos + bytesRead;
    obj.readFromSource(ctx,startPos,numBytes,buffer);
    bytesRead := numBytes;
 
    DBMS_OUTPUT.PUT_LINE(&#39;start position: &#39;|| startPos);
    DBMS_OUTPUT.PUT_LINE(&#39;read &#39; || bytesRead || &#39; bytes.&#39;);
 
   -- Note: Add your own code here to process the media data being read.
   -- This routine reads the data into the buffer 32767 bytes at a time,
   -- then reads the next chunk, overwriting the first buffer full of data.
 END LOOP;
 EXCEPTION
     WHEN NO_DATA_FOUND THEN
       DBMS_OUTPUT.PUT_LINE(&#39;End of data &#39;);
     WHEN ORDSYS.ORDSourceExceptions.METHOD_NOT_SUPPORTED THEN
       DBMS_OUTPUT.PUT_LINE(&#39;ORDSourceExceptions.METHOD_NOT_SUPPORTED caught&#39;);
     WHEN OTHERS THEN
       DBMS_OUTPUT.PUT_LINE(&#39;EXCEPTION caught:&#39; || SQLERRM);
END;
/
show errors
 
</pre></div>
<!-- class="example" -->
<p>To execute the stored procedure, enter the following SQL statements:</p>
<pre>SQL&gt; set serveroutput on; 
SQL&gt; execute read_document(1); 

Content length is: 93594
start position: 1
read 32767 bytes.
start position: 32768
read 32767 bytes.
start position: 65535
read 28060 bytes.
End of data

PL/SQL procedure successfully completed.
</pre></div>
<!-- class="sect3" -->
<a id="BABJDHGA"></a>
<div id="IMURG11718" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">9.2.1.5</span> Show the Properties of the Loaded Media Data</h4>
<p>The <code>showprop_doc.sql</code> script displays the properties of the media data loaded into the <code>doc_table</code> table. This script is shown in <a href="#BABCHDEI">Example 9-14</a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Run this script as the user who ran the previous media scripts.</div>
<div id="IMURG11792" class="example">
<p class="titleinexample"><a id="BABCHDEI"></a>Example 9-14 showprop_doc.sql Script</p>
<pre>-- showprop_doc.sql
--
SET SERVEROUTPUT ON;
 
--
-- Query doc_table for ORDDoc and print the properties using PL/SQL.
--
 
BEGIN
  FOR rec in (SELECT id, document FROM doc_table ORDER BY id) LOOP 
    dbms_output.put_line(&#39;document id: &#39;|| rec.id);
    dbms_output.put_line(&#39;document MIME type: &#39;|| rec.document.getMimeType());
    dbms_output.put_line(&#39;document file format: &#39;|| rec.document.getFormat());
    dbms_output.put_line(&#39;BLOB Length: &#39;|| rec.document.getContentLength());
    dbms_output.put_line(&#39;----------------------------------------------&#39;);
  END loop;
END;
/
 
--
-- Query doc_table for ORDDoc and list the properties using SQL.
--
clear columns
column id    format 99;
column mimetype format a20;
column format   format a10;
column length   format 99999999;
SELECT t.id, 
       t.document.getMimeType() mimetype, 
       t.document.getFormat() format, 
       t.document.getContentLength() length
from doc_table t ORDER BY t.id;
</pre></div>
<!-- class="example" -->
<p>The results from running the script <code>showprop_doc.sql</code> are the following:</p>
<pre>SQL&gt; @showprop_doc.sql 

document id: 1
document MIME type: audio/x-wav
document file format: WAVE
BLOB Length: 93594
----------------------------------------------
document id: 2
document MIME type: audio/mpeg
document file format: MPGA
BLOB Length: 51537
----------------------------------------------
 
PL/SQL procedure successfully completed.
 
 
 ID MIMETYPE             FORMAT        LENGTH
--- -------------------- ---------- ---------
  1 audio/x-wav          WAVE           93594
  2 audio/mpeg           MPGA           51537
</pre></div>
<!-- class="sect3" -->
<a id="BABJGBGA"></a>
<div id="IMURG11720" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">9.2.1.6</span> Automate the ORDDoc Examples</h4>
<p>The <code>setup_docsample.sql</code> script runs each of the previous media scripts in the correct order to automate this process. This script is shown in <a href="#BABHFGEJ">Example 9-15</a>.</p>
<p>Before running this script, ensure that you have these privileges:</p>
<ul>
<li>
<p>CREATE ANY DIRECTORY</p>
</li>
<li>
<p>CREATE TABLE</p>
</li>
</ul>
<div id="IMURG11721" class="example">
<p class="titleinexample"><a id="BABHFGEJ"></a>Example 9-15 setup_docsample.sql Script</p>
<pre>-- setup_docsample.sql
--
 
-- Create the media_dir load directory:
@create_mediadir.sql
 
-- Create the doc_table table:
@create_doctable.sql
 
--Import 2 media clips and set the properties:
@import_doc.sql
 
--Display the properties of the media clips:
@showprop_doc.sql
 
--Create a stored procedure to read from ordDoc:
@read_doc.sql
 
--Execute the stored procedure:
execute read_document(1);
 
--exit;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="BABDFDIG"></a>
<div id="IMURG11722" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">9.2.1.7</span> Clean Up the ORDDoc Examples</h4>
<p>The <code>cleanup_docsample.sql</code> script removes the sample tables, directories, and procedures created by the previous media scripts from your database. This script is shown in <a href="#BABDGBIH">Example 9-16</a>.</p>
<p>Before running this script, ensure that you have the DROP ANY DIRECTORY privilege.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Run this script as the user who ran the previous media scripts.</div>
<div id="IMURG11793" class="example">
<p class="titleinexample"><a id="BABDGBIH"></a>Example 9-16 cleanup_docsample.sql Script</p>
<pre>-- cleanup_docsample.sql
--
-- Drop the doc load directory.
-- DROP DIRECTORY media_dir;
 
-- Drop the table and procedures created by the demo.
DROP TABLE doc_table PURGE;
DROP PROCEDURE read_document;
DROP PROCEDURE load_document;

exit;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i600896"></a>
<div id="IMURG9300" class="sect1">
<h2 class="sect1"><span class="secnum">9.3</span> Image Data Examples</h2>
<p>Image data examples<a id="sthref221"></a> using Oracle Multimedia include common operations on image data, such as using a set of scripts for populating an ORDImage object from a file data source, using a set of scripts for loading an image table from an HTTP data source, and addressing issues related to globalization support. The following subsections describe these operations:</p>
<ul>
<li>
<p><a href="#i608757">Scripts for Populating an ORDImage Object from a File Data Source</a></p>
</li>
<li>
<p><a href="#BABHGBEB">Loading an Image Table from an HTTP Data Source</a></p>
</li>
<li>
<p><a href="#BABJHDDD">Addressing Globalization Support Issues</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<p><a class="olink AIVUG6000" href="../AIVUG/ch_imgref.htm#AIVUG6000"><span class="italic">Oracle Multimedia Reference</span></a> for reference information about the methods used in these examples</p>
</div>
<a id="i608757"></a>
<div id="IMURG11724" class="sect2">
<h3 class="sect2"><span class="secnum">9.3.1</span> Scripts for Populating an ORDImage Object from a File Data Source</h3>
<p>The scripts presented in this section demonstrate how to populate an Oracle Multimedia ORDImage object from an existing file.</p>
<p><a href="#BABDIGAC">Table 9-3</a> lists each script by name, along with a brief description of the operations it performs. Each script is included and described in further detail in the following sections.</p>
<div id="IMURG11725" class="tblruleformal">
<p class="titleintable"><a id="sthref222"></a><a id="BABDIGAC"></a>Table 9-3 Image Scripts</p>
<table class="cellalignment1321" title="Image Scripts" summary="Table of scripts for ORDImage" dir="ltr">
<thead>
<tr class="cellalignment1312">
<th class="cellalignment1322" id="r1c1-t18">Script Name</th>
<th class="cellalignment1322" id="r1c2-t18">Operations Performed</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r2c1-t18" headers="r1c1-t18">
<p><code>create_mediadir.sql</code></p>
<p>(See <a href="#BABBFBDB">Example 9-3</a>)</p>
</td>
<td class="cellalignment1318" headers="r2c1-t18 r1c2-t18">
<p>Creates an image data load directory.</p>
<p>(See <a href="#BABHIHEG">Section 9.3.1.1</a>)</p>
</td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r3c1-t18" headers="r1c1-t18">
<p><code>create_imgtable.sql</code></p>
<p>(See <a href="#BABIBCJD">Example 9-17</a>)</p>
</td>
<td class="cellalignment1318" headers="r3c1-t18 r1c2-t18">
<p>Creates the <code>image_table</code> table.</p>
<p>(See <a href="#BABDFBDA">Section 9.3.1.2</a>)</p>
</td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r4c1-t18" headers="r1c1-t18">
<p><code>import_img.sql</code></p>
<p>(See <a href="#BABEBGEG">Example 9-18</a>)</p>
</td>
<td class="cellalignment1318" headers="r4c1-t18 r1c2-t18">
<p>Loads the image data. This script imports the image data from a file into the <code>image_table</code> table using the ORDImage import( ) method.</p>
<p>(See <a href="#BABBEDJE">Section 9.3.1.3</a>)</p>
</td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r5c1-t18" headers="r1c1-t18">
<p><code>read_image.sql</code></p>
<p>(See <a href="#BABGCIDE">Example 9-19</a>)</p>
</td>
<td class="cellalignment1318" headers="r5c1-t18 r1c2-t18">
<p>Reads the image data from a BLOB using a stored procedure.</p>
<p>(See <a href="#BABCDDHJ">Section 9.3.1.4</a>)</p>
</td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r6c1-t18" headers="r1c1-t18">
<p><code>showprop_img.sql</code></p>
<p>(See <a href="#BABJHHFE">Example 9-20</a>)</p>
</td>
<td class="cellalignment1318" headers="r6c1-t18 r1c2-t18">
<p>Displays the properties of the loaded image data stored in the <code>image_table</code> table.</p>
<p>(See <a href="#BABFAGJG">Section 9.3.1.5</a>)</p>
</td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r7c1-t18" headers="r1c1-t18">
<p><code>setup_imgsample.sql</code></p>
<p>(See <a href="#BABGHABC">Example 9-21</a>)</p>
</td>
<td class="cellalignment1318" headers="r7c1-t18 r1c2-t18">
<p>Automates the process by running the previous image scripts in the required order.</p>
<p>(See <a href="#BABBBEFA">Section 9.3.1.6</a>)</p>
</td>
</tr>
<tr class="cellalignment1312">
<td class="cellalignment1318" id="r8c1-t18" headers="r1c1-t18">
<p><code>cleanup_imgsample.sql</code></p>
<p>(See <a href="#BABCBEGG">Example 9-22</a>)</p>
</td>
<td class="cellalignment1318" headers="r8c1-t18 r1c2-t18">
<p>Cleans up by removing the sample tables, directories, and procedures from your database.</p>
<p>(See <a href="#BABDAHJE">Section 9.3.1.7</a>)</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblruleformal" -->
<a id="BABHIHEG"></a>
<div id="IMURG11726" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">9.3.1.1</span> Create an Image Data Load Directory</h4>
<p>The <code>create_mediadir.sql</code> script creates the image data load directory. This script is shown in <a href="#BABBFBDB">Example 9-3</a>.</p>
<p>To load the image data successfully, you must create a database directory object that points to a file directory on your system. <a href="#BABBFBDB">Example 9-3</a> uses the <code>media_dir</code> directory, which points to the file directory <code>C:\media_dir</code>. You can edit the <code>create_mediadir.sql</code> script to replace the directory path in the CREATE OR REPLACE DIRECTORY statement with your directory specification.</p>
<p>This directory specified in the <code>create_mediadir.sql</code> script must contain your sample image files. The image examples use the sample files <code>img71.gif</code> and <code>img50.gif</code>, which are installed in the <code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>/ord/img/demo</code> directory. You can copy any supported image files to the <code>C:\media_dir</code> directory to run the scripts in these examples.</p>
<p>Before running the <code>create_mediadir.sql</code> script, ensure that you have these privileges:</p>
<ul>
<li>
<p>CREATE ANY DIRECTORY (to specify the directory specification for your image files)</p>
</li>
<li>
<p>DROP ANY DIRECTORY (to delete previous instances of the image data load directory)</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you run the <code>create_mediadir.sql</code> script as a different user than the user who ran the other image scripts, you must perform these steps:
<ol>
<li>
<p>Uncomment the GRANT READ ON DIRECTORY statement.</p>
</li>
<li>
<p>Replace the string <code>&lt;USER&gt;</code> in this statement with the new user (for example: <code>SCOTT</code>).</p>
</li>
</ol>
</div>
</div>
<!-- class="sect3" -->
<a id="BABDFBDA"></a>
<div id="IMURG11728" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">9.3.1.2</span> Create the image_table Table</h4>
<p>The <code>create_imgtable.sql</code> script creates the <code>image_table</code> table with the two columns <code>id</code> and <code>image</code>. The <code>image</code> column is defined as type ORDImage. This script is shown in <a href="#BABIBCJD">Example 9-17</a>.</p>
<p>Before running this script, ensure that you have the CREATE TABLE privilege.</p>
<div id="IMURG11794" class="example">
<p class="titleinexample"><a id="BABIBCJD"></a>Example 9-17 create_imgtable.sql Script</p>
<pre>-- create_imgtable.sql
--
CREATE TABLE image_table ( id NUMBER,
                           image ORDImage )
LOB(image.source.localData) STORE AS SECUREFILE;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="BABBEDJE"></a>
<div id="IMURG11730" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">9.3.1.3</span> Load the Image Data</h4>
<p>The <code>import_img.sql</code> script inserts two rows into the <code>image_table</code> table, and imports image data from an image file into the <code>image</code> column in the <code>image_table</code> table using the ORDImage import( ) method. This script is shown in <a href="#BABEBGEG">Example 9-18</a>.</p>
<p>To run this script successfully , you must copy two image files to your <code>media_dir</code> directory using the file names specified in this script, or modify this script to match the file names of your image files.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Run this script as the user who ran the previous image scripts.</div>
<div id="IMURG11795" class="example">
<p class="titleinexample"><a id="BABEBGEG"></a>Example 9-18 import_img.sql Script</p>
<pre>-- import_img.sql
--
CREATE OR REPLACE PROCEDURE load_image(in_id INTEGER,
                                       in_dir VARCHAR2,
                                       in_fname VARCHAR2)
AS
  obj ORDIMAGE;
  ctx RAW(64) := NULL;
BEGIN
  INSERT INTO image_table VALUES
      (in_id, ORDImage(&#39;FILE&#39;, in_dir, in_fname))
      RETURNING image INTO obj;
  obj.import(ctx);
  UPDATE image_table SET image = obj WHERE id = in_id;
  COMMIT;
END;
/
show errors
 
-- Import the two files into the database.
EXECUTE load_image(1, &#39;MEDIA_DIR&#39;, &#39;img71.gif&#39;);
EXECUTE load_image(2, &#39;MEDIA_DIR&#39;, &#39;img50.gif&#39;);
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="BABCDDHJ"></a>
<div id="IMURG11732" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">9.3.1.4</span> Read the Image Data from the BLOB</h4>
<p>The <code>read_image.sql</code> script reads image data from a BLOB by creating the stored procedure <code>read_image</code>. This procedure reads a specified amount of image data from the BLOB attribute, beginning at a particular offset, until all the image data is read. This script is shown in <a href="#BABGCIDE">Example 9-19</a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Run this script as the user who ran the previous image scripts.</div>
<div id="IMURG11796" class="example">
<p class="titleinexample"><a id="BABGCIDE"></a>Example 9-19 read_image.sql Script</p>
<pre>-- read_image.sql
--
set serveroutput on
create or replace procedure read_image (in_id integer) as
-- Note: ORDImage has no readFromSource method like ORDAudio
-- and ORDVideo; therefore, you must use the DBMS_LOB package to
-- read image data from a BLOB.
buffer RAW (32767);
src BLOB;
amt integer; 
pos integer := 1;
bytesRead integer := 0;
length integer;
BEGIN
  Select t.image.getcontent(), t.image.getContentLength()
    into src, length from image_table t where t.id = in_id;
  DBMS_OUTPUT.PUT_LINE(&#39;Content length is: &#39;|| length);
 
  LOOP
    amt := 32767;
    pos := pos + bytesRead;
    DBMS_LOB.READ(src,amt,pos,buffer);
    bytesRead := amt;
 
    DBMS_OUTPUT.PUT_LINE(&#39;start position: &#39;|| pos);
    DBMS_OUTPUT.PUT_LINE(&#39;bytes read &#39;|| bytesRead);
-- Note: Add your own code here to process the image data being read.
-- This routine reads data into the buffer 32767 bytes at a time, 
-- then reads the next chunk, overwriting the first buffer full of data.
  END LOOP;
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE(&#39;----------------&#39;);
    DBMS_OUTPUT.PUT_LINE(&#39;End of data &#39;);
END;
/
show errors
 
</pre></div>
<!-- class="example" -->
<p>To execute the stored procedure, enter the following SQL statements:</p>
<pre>SQL&gt; set serveroutput on;
SQL&gt; execute read_image(1);
Content length is: 1124
start position: 1
bytes read 1124
----------------
End of data

PL/SQL procedure successfully completed.
</pre></div>
<!-- class="sect3" -->
<a id="BABFAGJG"></a>
<div id="IMURG11734" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">9.3.1.5</span> Show the Properties of the Loaded Image Data</h4>
<p>The <code>showprop_img.sql</code> script displays the properties of the image data loaded into the <code>image_table</code> table. This script is shown in <a href="#BABJHHFE">Example 9-20</a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Run this script as the user who ran the previous image scripts.</div>
<div id="IMURG11797" class="example">
<p class="titleinexample"><a id="BABJHHFE"></a>Example 9-20 showprop_img.sql Script</p>
<pre>-- showprop_img.sql
--
SET SERVEROUTPUT ON;
 
--
-- Display the properties of the images stored in image_table using PL/SQL.
--
 
BEGIN
 
  FOR rec in (SELECT id, image from image_table ORDER BY id) LOOP
    dbms_output.put_line(&#39;Image properties:&#39;);
    dbms_output.put_line(&#39;image id: &#39;|| rec.id);
    dbms_output.put_line(&#39;image height: &#39;|| rec.image.getHeight());
    dbms_output.put_line(&#39;image width: &#39;|| rec.image.getWidth());
    dbms_output.put_line(&#39;image MIME type: &#39;|| rec.image.getMimeType());
    dbms_output.put_line(&#39;image file format: &#39;|| rec.image.getFileFormat());
    dbms_output.put_line(&#39;BLOB Length: &#39;|| rec.image.getContentLength());
    dbms_output.put_line(&#39;-------------------------------------------&#39;);
  END loop;
END;
/

--
-- Display the properties of the images stored in image_table using SQL.
--
clear columns
column id        format 99;
column height    format 999999;
column width     format 999999;
column mimetype  format a15;
column fileformat format a10;
column length     format 999999999;
select t.id, 
       t.image.getHeight() height,
       t.image.getWidth() width,
       t.image.getMimetype() mimetype,
       t.image.getFileFormat() fileformat,
       t.image.getContentLength() length
from image_table t ORDER BY t.id;
</pre></div>
<!-- class="example" -->
<p>The results from running the script <code>showprop_img.sql</code> are the following:</p>
<pre>SQL&gt; @showprop_img.sql
Image properties:
image id: 1
image height: 15
image width: 43
image MIME type: image/gif
image file format: GIFF
BLOB Length: 1124
-------------------------------------------
Image properties:
image id: 2
image height: 32
image width: 110
image MIME type: image/gif
image file format: GIFF
BLOB Length: 686
-------------------------------------------
 
PL/SQL procedure successfully completed.
 
 
 ID  HEIGHT   WIDTH MIMETYPE        FILEFORMAT     LENGTH
--- ------- ------- --------------- ---------- ----------
  1      15      43 image/gif       GIFF             1124
  2      32     110 image/gif       GIFF              686
 
</pre></div>
<!-- class="sect3" -->
<a id="BABBBEFA"></a>
<div id="IMURG11736" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">9.3.1.6</span> Automate the ORDImage Examples</h4>
<p>The <code>setup_imgsample.sql</code> script runs each of the previous image scripts in the correct order to automate this process. This script is shown in <a href="#BABGHABC">Example 9-21</a>.</p>
<p>Before running this script, ensure that you have these privileges:</p>
<ul>
<li>
<p>CREATE ANY DIRECTORY</p>
</li>
<li>
<p>CREATE TABLE</p>
</li>
</ul>
<div id="IMURG11737" class="example">
<p class="titleinexample"><a id="BABGHABC"></a>Example 9-21 setup_imgsample.sql Script</p>
<pre>-- setup_imgsample.sql
--
 
--Create the media_dir load directory:
@create_mediadir.sql
 
--Create the image_table table:
@create_imgtable.sql
 
--Import images into the image_table table:
@import_img.sql
 
--Show the properties of the images:
@showprop_img.sql
 
--Create a stored procedure to read from ordImage:
@read_image.sql
 
--Execute the stored procedure:
execute read_image(1);
 
--exit;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="BABDAHJE"></a>
<div id="IMURG11738" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">9.3.1.7</span> Clean Up the ORDImage Examples</h4>
<p>The <code>cleanup_imgsample.sql</code> script removes the sample tables, directories, and procedures created by the previous image scripts from your database. This script is shown in <a href="#BABCBEGG">Example 9-22</a>.</p>
<p>Before running this script, ensure that you have the DROP ANY DIRECTORY privilege.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Run this script as the user who ran the previous image scripts.</div>
<div id="IMURG11739" class="example">
<p class="titleinexample"><a id="BABCBEGG"></a>Example 9-22 cleanup_imgsample.sql Script</p>
<pre>-- cleanup_imgsample.sql
--
-- Drop the image load directory.
DROP DIRECTORY media_dir;
 
-- Drop the tables created by the demo.
DROP TABLE image_table PURGE;
 
-- Drop the procedures.
DROP PROCEDURE read_image;
DROP PROCEDURE load_image;
 
exit;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABHGBEB"></a>
<div id="IMURG11740" class="sect2">
<h3 class="sect2"><span class="secnum">9.3.2</span> Loading an Image Table from an HTTP Data Source</h3>
<p>The <code>import_imghttp.sql</code> script imports the image data from an HTTP data source. This script inserts two rows into the <code>image_table</code> table and loads the image data from the specified HTTP data source (source type <code>HTTP</code>, URL location, and HTTP object name). This script is shown in <a href="#BABBCIEC">Example 9-23</a>.</p>
<p>To run this script successfully, you must modify it to point to two images located on your Web site, as described in <a href="#BABBCIEC">Example 9-23</a>.</p>
<div id="IMURG11798" class="example">
<p class="titleinexample"><a id="BABBCIEC"></a>Example 9-23 Import Image Data from an HTTP Data Source</p>
<pre>-- import_imghttp.sql
--
-- Import the two HTTP images from a Web site into the database.
-- Prerequisites
--    Follow these steps before running this script:
--        1. Run create_imgdir.sql.
--        2. Run create_imgtable.sql.
--        3. Modify the HTTP URL and object name to point to two images on 
--           your Web site.

-- Insert two rows with an empty BLOB.
 
insert into image_table values (7,ORDImage(
&#39;http&#39;,&#39;http://your_website/images&#39;,&#39;image1.jpg&#39;));
 
insert into image_table values (8,ORDImage(
&#39;http&#39;,&#39;http://your_website/images&#39;,&#39;image2.gif&#39;));
 
commit;
 
DECLARE 
  obj ORDSYS.ORDIMAGE;
  ctx RAW(64) := NULL;
BEGIN
-- This imports the image file image1.gif from the HTTP source URL 
-- (srcType=HTTP), and automatically sets the properties.
 
  select Image into obj from image_table where id = 7 for update;
    obj.import(ctx);
 
  update image_table set image = obj where id = 7;
  commit;
 
-- This imports the image file image2.gif from the HTTP source URL
-- (srcType=HTTP), and automatically sets the properties.
 
  select Image into obj from image_table where id = 8 for update;
    obj.import(ctx);
 
  update image_table set image = obj where id = 8;
  commit;
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="BABJHDDD"></a>
<div id="IMURG11742" class="sect2">
<h3 class="sect2"><span class="secnum">9.3.3</span> Addressing Globalization Support Issues</h3>
<p>The <code>globalization.sql</code> script demonstrates how to address issues related to globalization support. It shows how to use the process( ) method<a id="sthref223"></a><a id="sthref224"></a> with language settings that use the comma as the decimal point. For example, when the territory is <code>FRANCE</code>, the decimal point is expected to be a comma. Thus,<code>&#34;,75&#34;</code> is specified as the scale factor. This script is shown in <a href="#BABHIJDA">Example 9-24</a>.</p>
<div id="IMURG11799" class="example">
<p class="titleinexample"><a id="BABHIJDA"></a>Example 9-24 Address a Globalization Support Issue</p>
<pre>-- globalization.sql
--
ALTER SESSION SET NLS_LANGUAGE = FRENCH;
ALTER SESSION SET NLS_TERRITORY = FRANCE;
DECLARE
myimage ORDImage;
BEGIN
 
SELECT image into myimage from image_table where id=1 for update;
myimage.process(&#39;scale=&#34;,75&#34;&#39;);
UPDATE image_table SET image = myimage where id=1;
COMMIT;
END;
/
</pre></div>
<!-- class="example" -->
<p>Run the <code>showprop_img.sql</code> script (<a href="#BABJHHFE">Example 9-20</a>) to see the properties of the scaled image.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<p><a class="olink AIVUG80485" href="../AIVUG/ch_imgref.htm#AIVUG80485"><span class="italic">Oracle Multimedia Reference</span></a> for more information about ensuring the correct globalization support interpretation when using the process( ) method</p>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDJEFEB"></a>
<div id="IMURG9400" class="sect1">
<h2 class="sect1"><span class="secnum">9.4</span> Video Data Examples</h2>
<p>Video data examples<a id="sthref225"></a> using Oracle Multimedia are not available in this chapter.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<p><a class="olink AIVUG8000" href="../AIVUG/ch_vidref.htm#AIVUG8000"><span class="italic">Oracle Multimedia Reference</span></a> for reference information and video data examples</p>
</div>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1311">
<tr>
<td class="cellalignment1318">
<table class="cellalignment1316">
<tr>
<td class="cellalignment1315"><a href="ch_dba.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1315"><a href="ap_demos.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1320">
<table class="cellalignment1314">
<tr>
<td class="cellalignment1315"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1315"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1315"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1315"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1315"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1315"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>