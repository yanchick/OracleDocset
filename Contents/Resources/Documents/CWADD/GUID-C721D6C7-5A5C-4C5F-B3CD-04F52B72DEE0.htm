<!DOCTYPE html><html lang="en-US"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="UTF-8"/>
<a class="dashingAutolink" name="autolink-4693"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Operational%20Notes"></a><title>Operational Notes</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"/>
<meta name="dcterms.created" content="2017-07-14T14:47:18Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Clusterware Administration and Deployment Guide"/>
<meta name="dcterms.identifier" content="E48819-11"/>
<meta name="dcterms.isVersionOf" content="CWADD"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2007, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="GUID-871B5632-6FFA-4E4B-B294-A2E5ECD70FDE.htm" title="Previous" type="text/html"/>
<link rel="Next" href="GUID-7D987935-A4B8-4496-BB45-A4487682E70A.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E48819-11.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0"></a> <span id="PAGE" style="display:none;">624/713</span> <!-- End Header -->
<a id="CWADD92011"></a><a id="CWADD92012"></a><a id="CWADD92013"></a><a id="CWADD92014"></a><a id="CWADD92015"></a><a id="CWADD92016"></a><a id="CWADD92017"></a><a id="CWADD92018"></a><a id="CWADD92019"></a><a id="CWADD92020"></a><a id="CWADD92021"></a><a id="CWADD91811"></a><a id="CWADD92783"></a>
<h1 id="CWADD-GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0" class="sect1">Operational Notes</h1>
<div>
<p>This section includes the following topics:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0.htm#GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0__BGBGJCGJ">Context Initialization and Persistence</a></p>
</li>
<li>
<p><a href="GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0.htm#GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0__BGBJGEBE">Threading Support</a></p>
</li>
<li>
<p><a href="GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0.htm#GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0__BGBCAIEH">CLSCRS API Data Structures</a></p>
</li>
<li>
<p><a href="GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0.htm#GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0__BGBBBEJA">Memory Management</a></p>
</li>
<li>
<p><a href="GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0.htm#GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0__BGBECEJB">Error Handling and Tracing</a></p>
</li>
<li>
<p><a href="GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0.htm#GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0__BGBBIGJA">Callback Mechanism</a></p>
</li>
<li>
<p><a href="GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0.htm#GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0__BGBGGBHD">Filters</a></p>
</li>
<li>
<p><a href="GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0.htm#GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0__BGBIICHE">Script Agent Usage</a></p>
</li>
<li>
<p><a href="GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0.htm#GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0__BGBEBFDG">Help Interface</a></p>
</li>
</ul>
<div class="section" id="GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0__BGBGJCGJ">
<p class="subhead1">Context Initialization and Persistence</p>
</div>
<!-- class="section" -->
<p>To use the <a id="d142263e154" class="indexterm-anchor"></a>CLSCRS APIs, you must first initialize the <code class="codeph">clscrs</code> context. The calls to create and terminate this context are:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">clscrs_init_crs</code>: Initializes the <code class="codeph">clscrs</code> context</p>
</li>
<li>
<p><code class="codeph">clscrs_term_crs</code>: Terminates the <code class="codeph">clscrs</code> context</p>
</li>
</ul>
<p>The caller is responsible for terminating the context when it is no longer needed.</p>
<div class="section" id="GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0__BGBJGEBE">
<p class="subhead1">Threading Support</p>
</div>
<!-- class="section" -->
<p>If <a id="d142263e186" class="indexterm-anchor"></a>initialized with the <code class="codeph">CLSCRS_FLAG_USETHREADS</code> flag, then the CLSCRS API may spawn threads internally. Every API function executes in the context of the calling thread. The API context object may not be used concurrently by multiple threads. However, no thread-affinity on the part of the client is required. A process may create multiple API contexts and use those on different threads, subject to the one-thread-per-one-context-at-a-time rule.</p>
<div class="section" id="GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0__BGBCAIEH">
<p class="subhead1">CLSCRS API Data Structures</p>
</div>
<!-- class="section" -->
<p>The following <a id="d142263e199" class="indexterm-anchor"></a>entities are passed into the API calls and contain return values from the API call:</p>
<ul style="list-style-type: disc;">
<li>
<p><a id="d142263e207" class="indexterm-anchor"></a><a id="d142263e213" class="indexterm-anchor"></a><code class="codeph">clscrs_sp</code>: A <span class="italic">stringpair</span> (<code class="codeph">sp</code>) contains a name and a value string. The value can be NULL. It is created and destroyed, and its contents can be examined and the value replaced. A stringpair can be a member of exactly one stringpair list (<code class="codeph">splist</code>).</p>
</li>
<li>
<p><a id="d142263e229" class="indexterm-anchor"></a><a id="d142263e235" class="indexterm-anchor"></a><code class="codeph">clscrs_splist</code>: A stringpair list (<code class="codeph">splist</code>) is a list of zero or more stringpairs used in various contexts. An API can add stringpairs to or remove them from a stringpair list, or the API can iterate stringpairs.</p>
</li>
<li>
<p><a id="d142263e245" class="indexterm-anchor"></a><a id="d142263e251" class="indexterm-anchor"></a><code class="codeph">clscrs_entity_type</code>: The enumeration type you can use to identify the type of Oracle Clusterware entity.</p>
<p>The enumeration types are defined, as follows:</p>
<pre dir="ltr">/* enum to specify the entity type */ 
typedef enum
{ 
   clscrs_entity_res              = 1, /* resource */ 
   clscrs_entity_restype          = 2, /* resource type */ 
   clscrs_entity_serverpool       = 3, /* server pool */ 
   clscrs_entity_server           = 4, /* server */ 
   clscrs_entity_resinst          = 5, /* resource instances */ 
   clscrs_entity_config_policy    = 6, /* configuration policy */ 
   clscrs_entity_config_policyset = 7, /* configuration policy 
set */ 
   clscrs_entity_server_category  = 8  /* server category */ 
} clscrs_entity_type;
</pre></li>
<li>
<p><a id="d142263e262" class="indexterm-anchor"></a><a id="d142263e268" class="indexterm-anchor"></a><code class="codeph">clscrs_crsentity</code>: This data structure (<code class="codeph">crsentity</code>) represents an Oracle Clusterware entity, which contains the name and additional data appropriate to the context in which the Oracle Clusterware entity is used. Sometimes an API contains Oracle Clusterware entity attribute data and other times it carries status and return messages about an operation. A single entity can be a member of exactly one <code class="codeph">clscrs_crsentitylist</code>.</p>
</li>
<li>
<p><a id="d142263e281" class="indexterm-anchor"></a><a id="d142263e287" class="indexterm-anchor"></a><code class="codeph">clscrs_crsentitylist</code>: An entity list (<code class="codeph">crsentitylist</code>) is a data structure that contains zero or more instances of a <code class="codeph">clscrs_crsentity</code>. An API can add entities to or remove them from an entity list, or the API can iterate entities.</p>
</li>
</ul>
<div class="section" id="GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0__BGBBBEJA">
<p class="subhead1">Memory Management</p>
</div>
<!-- class="section" -->
<p>The <a id="d142263e304" class="indexterm-anchor"></a>CLSCRS APIs work on elements and lists. The elements are added to lists. The memory for both elements and lists is allocated and released through explicit API calls. It is the caller&#39;s responsibility to release the memory that they allocate. However, when elements are added to lists, only the list must be destroyed: the destruction of the list destroys its elements implicitly. The elements must be destroyed when they are not added to any list. For recursive lists, destroying the parent list also destroys any lists contained within it. The <code class="codeph">clscrs_sp</code> and <code class="codeph">clscrs_crsentity</code> elements must be destroyed by the caller. If they are part of a <code class="codeph">clscrs_splist</code> or <code class="codeph">clscrs_crsentitylist</code>, destroying the list destroys the respective <code class="codeph">clscrs_sp</code> and <code class="codeph">clscrs_crsentity</code> entities.</p>
<p>For example, when a resource is created and added to a resource list, only the resource list must be destroyed, but not the individual resource. Destroying the resource list releases the memory for the individual resource, too.</p>
<p>Memory is allocated by the API through the following calls:</p>
<pre dir="ltr">clscrs_sp_create()
clscrs_crsentity_create()
clscrs_serverpool_create()
clscrs_type_create()
clscrs_splist_create()
clscrs_crsentitylist_create()
clscrs_entity_id_create()
</pre>
<p>Each of the calls in the preceding list has a corresponding <code class="codeph">clscrs_*_destroy()</code> call.</p>
<div class="section" id="GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0__BGBECEJB">
<p class="subhead1">Error Handling and Tracing</p>
</div>
<!-- class="section" -->
<p>Interactive and non-interactive <a id="d142263e344" class="indexterm-anchor"></a>CLSCRS APIs each use a different error-handling mechanism.</p>
<p>For non-interactive CLSCRS APIs, the error code is returned as the return value of the function call. For example:</p>
<pre dir="ltr">clscrsret clscrs_sp_get_value(clscrs_sp *sp, oratext **value);
</pre>
<p>The error code is returned as a <code class="codeph">clscrsret</code> value.</p>
<p>For interactive CLSCRS APIs, the output result is represented, as follows:</p>
<ol>
<li>
<p>The return value of the function call provides a high-level output of the request. Did the request reach the server? Was it completely successful, or completely or only partially unsuccessful? A successful return value means the request was received, processed, and the outcome was successful for all entities requested.</p>
</li>
<li>
<p>For each entity on which the request operated, there is a programmatic completion code stored in the <code class="codeph">op_status</code> list. If the value is not <code class="codeph">success</code>, it indicates the high-level type of the problem specific to processing the request for the particular object.</p>
</li>
<li>
<p>Optionally, the API might indicate that it wants to receive localized, human-readable error, warning, or status messages by using the callback mechanism. Each invocation of the callback provides the message, message type (severity), and the ID of the object to which the callback invocation pertains.</p>
</li>
</ol>
<p>For example:</p>
<pre dir="ltr">CLSCRS_STAT clscrs_register_resource2(clscrs_crsentitylist *in_crsentitylist, uword flags,
                                       clscrs_msgf2 msgf, void *msgarg,
                                       clscrs_crsentitylist *op_status);
</pre>
<ol>
<li>
<p>The function returns an error code of value <code class="codeph">CLSCRS_STAT</code>.</p>
</li>
<li>
<p>The CRSD sends error messages, warning messages, and progress messages back to the client through the <code class="codeph">clscrs_msgf2</code> callback. The client must implement the callback to process these messages returned by the CRSD.</p>
</li>
<li>
<p>In previous Oracle Clusterware releases, the API also contained results of each operation on the Oracle Clusterware entities as part of the <code class="codeph">op_status</code> list. You can access that information using the following API:</p>
<pre dir="ltr">clscrsret clscrs_entity_get_op_status(clscrs_entity *res, CLSCRS_STAT *status,
                                    oratext **msg);
</pre>
<p>The <code class="codeph">status</code> argument contains a status code about the CRSD operation on the Oracle Clusterware entity. Additionally, the <code class="codeph">msg</code> argument contains a message from the CRSD about the result of the operation. Though the <code class="codeph">op_status</code> list continues to contain the results of the CRSD operation for each Oracle Clusterware entity in the <code class="codeph">msg</code> argument, usage of the <code class="codeph">msg</code> argument to get the error codes and messages has now been deprecated and is not supported for any use of the API on a new entity. Only pre-existing use cases (for acting on resources, specifically) are supported. Use the callback function to process any messages returned by the CRSD.</p>
</li>
</ol>
<div class="section" id="GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0__BGBBIGJA">
<p class="subhead1">Callback Mechanism</p>
</div>
<!-- class="section" -->
<p>Interactive <a id="d142263e424" class="indexterm-anchor"></a>CLSCRS APIs provide a callback mechanism that the clients can use to process error messages, warning messages, and progress messages sent by the CRSD.</p>
<p>The signature of the callback mechanism is:</p>
<pre dir="ltr">typedef  void (*clscrs_msgf2)(void *usrp, const oratext *id, const oratext *msg,
                clscrs_msgtype msgtype);
</pre>
<p>In the preceding syntax:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">usrp</code>: Is a user-supplied pointer that probably contains the context of the call</p>
</li>
<li>
<p><code class="codeph">id</code>: Is the identifier of the entity to which the message corresponds</p>
</li>
<li>
<p><code class="codeph">msg</code>: Is the output text</p>
</li>
<li>
<p><code class="codeph">msgtype</code>: Is the type of the message; either error, warning, or progress</p>
</li>
</ul>
<p><a href="GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0.htm#GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0__BGBFEEED">Example H-1</a> describes an example of the callback mechanism.</p>
<div class="example" id="GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0__BGBFEEED">
<p class="titleinexample">Example H-1 Callback Mechanism</p>
<pre dir="ltr">void myCallback(void *arg, const oratext *pId, const oratext *pMsg,
                clscrs_msgtype msgType)
{
    if (pMsg != NULL)
   {
       cout &lt;&lt; pMsg &lt;&lt; endl;
    }
}
</pre></div>
<!-- class="example" -->
<p><a href="GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0.htm#GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0__BGBGHECD">Example H-2</a> describes how to use the callback mechanism in an interactive API.</p>
<div class="example" id="GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0__BGBGHECD">
<p class="titleinexample">Example H-2 Using the Callback Mechanism In an Interactive API</p>
<pre dir="ltr">clscrs_start_resource2(pResIdList, NULL,
                       env, myCallback, NULL,
                       0, pOpStatus);
</pre></div>
<!-- class="example" -->
<p>You can also print debug trace messages for the API, itself by passing the <code class="codeph">CLSCRS_FLAG_TRACE</code> flag when creating the context. The signature for context creation is:</p>
<pre dir="ltr">CLSCRS_STAT clscrs_init_crs(clscrs_ctx **ctx, clscrs_msgf2 errf, void *errCtx,
                             ub4 flags);
</pre>
<p>For the trace messages to work, you must specify both the <code class="codeph">CLSCRS_FLAG_TRACE</code> flag and a <code class="codeph">clscrs_msgf2</code> callback mechanism in the <code class="codeph">clscrs_init_crs</code> API.</p>
<p>The <code class="codeph">clscrs_msgf2</code> callback mechanism has the following signature:</p>
<pre dir="ltr">typedef  void (*clscrs_msgf)(void *usrp, const oratext *msg, sword msglen);
</pre>
<div class="section" id="GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0__BGBGGBHD">
<p class="subhead1">Filters</p>
</div>
<!-- class="section" -->
<p>You can use <a id="d142263e503" class="indexterm-anchor"></a>filters to narrow down Oracle Clusterware entities upon which a CLSCRS API operates. Simple filters are attribute-value pairs with an operator. Operators must be surrounded by spaces, as shown in the examples. You can combine simple filters into expressions called expression filters using Boolean operators.</p>
<p>Supported filter operators are:</p>
<ul class="simple" style="list-style-type: none;padding-left:0;">
<li><code class="codeph">=</code></li>
<li><code class="codeph">&gt;</code></li>
<li><code class="codeph">&lt;</code></li>
<li><code class="codeph">!=</code></li>
<li><code class="codeph">co</code>: Contains</li>
<li><code class="codeph">st</code>: Starts with</li>
<li><code class="codeph">en</code>: Ends with</li>
</ul>
<p>Supported Boolean operators are <code class="codeph">AND</code> and <code class="codeph">OR</code>.</p>
<p>Examples of filters are:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">TYPE = type1</code></p>
</li>
<li>
<p><code class="codeph">((TYPE = type1) AND (CHECK_INTERVAL &gt; 50))</code></p>
</li>
<li>
<p><code class="codeph">(TYPE = type1) AND ((CHECK_INTERVAL &gt; 30) OR (AUTO_START co never))</code></p>
</li>
<li>
<p><code class="codeph">NAME en network.res</code></p>
</li>
<li>
<p><code class="codeph">TYPE st ora.db</code></p>
</li>
</ul>
<div class="infoboxnotealso" id="GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0__GUID-5B02D9E4-322E-4D6F-8411-478E1B0DD384">
<p class="notep1">See Also:</p>
<p>Use the <code class="codeph">clscrs_comparator enum</code> and the <code class="codeph">clscrs_operator enum</code> located in the <code class="codeph">$ORA_CRS_HOME/crs/demo/clscrsx.h</code> file to get the correct type for the above comparators and operators, respectively, in the API calls</p>
</div>
<p>There are two types of filters and CLSCRS has a set of APIs to create these filters:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="bold">Comparison filter</span>: <a id="d142263e588" class="indexterm-anchor"></a>A simple filter that compares two values. For example:</p>
<pre dir="ltr">TYPE = ora.db.type
</pre>
<p>Use the <code class="codeph">clscrs_compfilter_create</code> API to create a comparison filter. For example, to create the <code class="codeph">(TYPE = ora.db.type)</code> comparison filter:</p>
<pre dir="ltr">clscrs_compfilter_create(ctx, clscrs_TYPE,
                    clscrs_comparator_eq, (const oratext *)&#34;ora.db.type&#34;,
                    &amp;myCompFilter);
</pre></li>
<li>
<p><span class="bold">Expression filter</span>: <a id="d142263e612" class="indexterm-anchor"></a>A filter that is created from either a set of comparison filters or expression filters, or both. For example:</p>
<pre dir="ltr">((TYPE = ora.db.type) AND (CHECK_INTERVAL &gt; 50))
</pre>
<p>Use the <code class="codeph">clscrs_expfilter_create</code> API to create a comparison filter. For example, to create an expression filter:</p>
<pre dir="ltr">clscrs_exprfilter_create(myCompFilter1, clscrs_operator_or,
                          myCompFilter2, &amp;myExprFilter);
</pre></li>
</ul>
<div class="infoboxnotealso" id="GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0__GUID-0DAA5B37-10A3-45DC-8430-061A5C060213">
<p class="notep1">See Also:</p>
<p>The <code class="codeph">$ORA_CRS_HOME/crs/demo/clscrsx.h</code> file for usage information for the <code class="codeph">clscrs_compfilter_create</code> and <code class="codeph">clscrs_expfilter_create</code> APIs</p>
</div>
<div class="infobox-note" id="GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0__GUID-57178EF4-2ADF-403D-AC42-755FE49081EA">
<p class="notep1">Note:</p>
<p>Both the <code class="codeph">clscrs_compfilter_create</code> and <code class="codeph">clscrs_expfilter_create</code> APIs allocate memory that must be freed by calling <code class="codeph">clscrs_filter_destroy()</code>.</p>
</div>
<p>You can use filters in the following interactive CLSCRS APIs in place of an entity list:</p>
<ul class="simple" style="list-style-type: none;padding-left:0;">
<li><code class="codeph">clscrs_start_resource2</code></li>
<li><code class="codeph">clscrs_stat2</code></li>
<li><code class="codeph">clscrs_stop_resource2</code></li>
<li><code class="codeph">clscrs_check_resource2</code></li>
<li><code class="codeph">clscrs_relocate_resource2</code></li>
</ul>
<p><a href="GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0.htm#GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0__BGBJEFEG">Example H-3</a> describes using filters in an interactive CLSCRS API.</p>
<div class="example" id="GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0__BGBJEFEG">
<p class="titleinexample">Example H-3 Filters In an Interactive CLSCRS API</p>
<pre dir="ltr">clscrs_start_resource2(myCompFilter, NULL,
                       env, msgf2, NULL,
                       0, pOpStatus);
</pre></div>
<!-- class="example" -->
<div class="section" id="GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0__BGBIICHE">
<p class="subhead1">Script Agent Usage</p>
</div>
<!-- class="section" -->
<p>When you use CLSCRS APIs inside script agent entry points, keep the following in mind:</p>
<ol>
<li>
<p>Some actions, such as start, stop, and clean, are executed under a lock on the resource instance. Thus, issuing a request to the server to act on the resource directly or by extension of a relation results in a dead-lock.</p>
</li>
<li>
<p>Issuing read-only (<code class="codeph">clscrs_stat2</code>) is generally safe unless it is an initial check, where the script agent must not call back on the server, because that results in a dead-lock, as well. Use the <code class="codeph">clsagfw</code> APIs to query the check entry point.</p>
</li>
</ol>
<div class="infoboxnotealso" id="GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0__GUID-9B83554A-2349-4A07-BDEE-25E12F375DF0">
<p class="notep1">See Also:</p>
<p><a href="GUID-9C074F34-F180-4200-A99B-72186DAB56E1.htm">Oracle Clusterware Resource Reference</a> for examples of script agents</p>
</div>
<div class="section" id="GUID-C721D6C7-5A5C-4C5F-B3CD-04F52B72DEE0__BGBEBFDG">
<p class="subhead1">Help Interface</p>
</div>
<!-- class="section" -->
<p>You can find the entire list of CLSCRS APIs, including usage information for each, in the <code class="codeph">$ORA_CRS_HOME/crs/demo/clscrsx.h</code> file, along with a demo called <code class="codeph">crsapp.c</code>.</p>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment5560">
<tr>
<td class="cellalignment5574">
<table class="cellalignment5565">
<tr>
<td class="cellalignment5564"><a href="GUID-871B5632-6FFA-4E4B-B294-A2E5ECD70FDE.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5564"><a href="GUID-7D987935-A4B8-4496-BB45-A4487682E70A.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2007, 2017, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment5576">
<table class="cellalignment5563">
<tr>
<td class="cellalignment5564"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5564"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5564"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5564"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5564"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5564"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>