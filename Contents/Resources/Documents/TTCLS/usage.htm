<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-107522"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Understanding%20and%20Using%20TTClasses"></a><title>Understanding and Using TTClasses</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1033"/>
<meta name="dcterms.created" content="2015-03-17T11:50:26Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="TimesTen In-Memory Database TTClasses Guide"/>
<meta name="dcterms.identifier" content="E21640-08"/>
<meta name="dcterms.isVersionOf" content="TTCLS"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2006, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="compiling.htm" title="Previous" type="text/html"/>
<link rel="Next" href="description.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E21640-08.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">6/8</span> <!-- End Header -->
<div id="TTCLS133" class="chapter"><a id="i82165"></a>
<h1 class="chapter"><span class="secnum">2</span> Understanding and Using TTClasses</h1>
<p>This chapter provides some general overview and best practices for TTClasses. It includes the following topics:</p>
<ul>
<li>
<p><a href="#i80918">Overview of TTClasses</a></p>
</li>
<li>
<p><a href="#i82204">Using TTCmd, TTConnection, and TTConnectionPool</a></p>
</li>
<li>
<p><a href="#CDEHEBFE">Considering TimesTen features for access control</a></p>
</li>
<li>
<p><a href="#CDEDDHHB">Managing TimesTen connections</a></p>
</li>
<li>
<p><a href="#CDEJJCBE">Managing TimesTen data</a></p>
</li>
<li>
<p><a href="#i83245">Using TTClasses logging</a></p>
</li>
<li>
<p><a href="#i82212">Using TTClasses XLA</a></p>
</li>
</ul>
<a id="i80918"></a>
<div id="TTCLS111" class="sect1">
<h2 class="sect1">Overview of TTClasses</h2>
<p>The TimesTen C++ Interface Classes library (TTClasses) provides wrappers around the most common ODBC functionality to allow database access. It was developed to meet the demand for an API that is easier to use than ODBC but does not sacrifice performance.</p>
<p>Refer to ODBC API reference documentation for detailed information about ODBC. TimesTen supports ODBC 2.5, Extension Level 1, with additional features for Extension Level 2 as documented in <a class="olink TTCDV473" href="../TTCDV/odbc_supported.htm#TTCDV473">&#34;TimesTen ODBC Functions and Options&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database C Developer&#39;s Guide</span>.</p>
<p>In addition to providing a C++ interface to the TimesTen ODBC interface, TTClasses supplies an interface to the TimesTen Transaction Log API (XLA). XLA allows an application to monitor one or more tables in a database. When other applications change that table, the changes are reported through XLA to the monitoring application. TTClasses provides a convenient interface to the most commonly used aspects of XLA functionality. For general information about XLA, see <a class="olink TTCDV246" href="../TTCDV/xla_event.htm#TTCDV246">&#34;XLA and TimesTen Event Management&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database C Developer&#39;s Guide</span>.</p>
<p>TTClasses is also intended to promote best practices when writing application software that uses the TimesTen Data Manager. The library uses TimesTen in an optimal manner. For example, autocommit is disabled by default. Parameterized SQL is strongly encouraged and its use is greatly simplified in TTClasses compared to hand-coded ODBC.</p>
</div>
<!-- class="sect1" -->
<a id="i82204"></a>
<div id="TTCLS134" class="sect1">
<h2 class="sect1">Us<a id="sthref84"></a><a id="sthref85"></a><a id="sthref86"></a>ing TTCmd, TTConnection, and TTConnectionPool</h2>
<p>While TTClasses can be used in several ways, the following general approach has been used successfully and can easily be adapted to a variety of applications.</p>
<p>To achieve optimal performance, real-time applications should use prepared SQL statements. Ideally, all SQL statements used by an application are prepared when the application begins, using a separate <code dir="ltr"><a href="description.htm#i95294">TTCmd</a></code> object for each statement. In ODBC, and thus in TTClasses, statements are bound to a particular connection, so a full set of the statements used by the application are often associated with every connection to the database.</p>
<p>A convenient way to accomplish this is to develop an application-specific class that is derived from <code dir="ltr"><a href="description.htm#i95276">TTConnection</a></code>. For an application named <code dir="ltr">XYZ</code>, you can create a class <code dir="ltr">XYZConnection</code>, for example. The <code dir="ltr">XYZConnection</code> class contains private <code dir="ltr">TTCmd</code> members representing the prepared SQL statements that can be used in the application, and provides new public methods to implement the application-specific database functionality through these private <code dir="ltr">TTCmd</code> members.</p>
<p>Before a <code dir="ltr">TTCmd</code> object can be used, a SQL statement (such as <code dir="ltr">SELECT</code>, <code dir="ltr">INSERT</code>, <code dir="ltr">UPDATE</code>, or <code dir="ltr">DELETE</code>) must be associated with it. The association is accomplished by using the <code dir="ltr"><a href="description.htm#i104817">Prepare()</a></code> method, which also compiles and optimizes the SQL statement to ensure it is executed in an efficient manner. Note that the <code dir="ltr">Prepare()</code> method only prepares and does not execute the statement.</p>
<p>With TimesTen, statements are typically parameterized for better performance. Consider the following SQL statements:</p>
<pre dir="ltr">SELECT col1 FROM table1 WHERE C = 10;
SELECT col1 FROM table1 WHERE C = 11;
</pre>
<p>It is more efficient to prepare a single parameterized statement and execute it multiple times:</p>
<pre dir="ltr">SELECT col1 FROM table1 WHERE C = ?;
</pre>
<p>The value for &#34;<code dir="ltr">?</code>&#34; is specified at runtime by using the <code dir="ltr">TTCmd::setParam()</code> method.</p>
<p>There is no need to explicitly bind columns or parameters to a SQL statement, as is necessary when you use ODBC directly. <code dir="ltr">TTCmd</code> automatically defines and binds all necessary columns at prepare time. Parameters are bound at execution time.</p>
<p>Be aware that preparing is a relatively expensive operation. When an application establishes a connection to TimesTen, using <code dir="ltr">TTConnection::Connect()</code>, it should prepare all <code dir="ltr">TTCmd</code> objects associated with the connection. Prepare all SQL statements prior to the main execution loop of the application.</p>
<p>In normal operations, where TTClasses and applications are compiled with the <code dir="ltr">TTEXCEPT</code> flag, a <code dir="ltr">TTStatus</code> object is thrown as an exception if an error or warning occurs during the operation. In general, anytime a TTClasses method encounters an error or warning, it throws an exception in this way, which the application should catch and handle appropriately. See <a href="compiling.htm#BCGGBBBI">&#34;TTEXCEPT: Throw C++ exceptions&#34;</a> and <a href="description.htm#i83881">&#34;TTStatus&#34;</a> for additional information. Also, the TTClasses Quick Start demo applications show examples of how this is done. See <a href="compiling.htm#BCGGJCJF">&#34;About the TimesTen TTClasses demos&#34;</a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If <code dir="ltr">TTConnection</code> or <code dir="ltr">TTCmd</code> lacks the specific get or set method you need, you can access underlying ODBC connection and statement handles directly, through the <code dir="ltr">TTConnection::<a href="description.htm#i98860">getHdbc()</a></code> and <code dir="ltr">TTCmd::<a href="description.htm#CHDFCHHG">getHandle()</a></code> methods. Similarly, there is a <code dir="ltr">TTGlobal::<a href="description.htm#CHDIHEEJ">sqlhenv()</a></code> method to access the ODBC environment handle.</div>
<div id="TTCLS135" class="example">
<p class="titleinexample"><a id="CDEHHHFE"></a>Example 2-1 <a id="sthref87"></a>Definition of a connection class</p>
<p>This is an example of a class that inherits from <code dir="ltr"><a href="description.htm#i95276">TTConnection</a></code>.</p>
<pre dir="ltr">class XYZConnection : public TTConnection {
private:
  TTCmd updateData;
  TTCmd insertData;
  TTCmd queryData;

public:
  XYZConnection();
  ~XYZConnection();
  virtual void Connect (const char* connStr, const char* user, const char* pwd);
  void updateUser ();
  void addUser (char* nameP);
  void queryUser (const char* nameP, int* valueP);
};
</pre>
<p>In this example, an <code dir="ltr">XYZConnection</code> object is a connection to TimesTen that can be used to perform three application-specific operations: <code dir="ltr">addUser()</code>, <code dir="ltr">updateUser()</code>, and <code dir="ltr">queryUser()</code>. These operations are specific to the <code dir="ltr">XYZ</code> application. The implementation of these three methods can use the <code dir="ltr">updateData</code>, <code dir="ltr">insertData</code>, and <code dir="ltr">queryData</code> <code dir="ltr"><a href="description.htm#i95294">TTCmd</a></code> objects to implement the database operations of the application.</p>
<p>To prepare the SQL statements of the application, the <code dir="ltr">XYZConnection</code> class overloads the <code dir="ltr">Connect()</code> method provided by the <code dir="ltr"><a href="description.htm#i95276">TTConnection</a></code> base class. The <code dir="ltr">XYZConnection::Connect()</code> method calls the <code dir="ltr">Connect()</code> method of the base class to establish the database connection and also calls the <code dir="ltr">Prepare()</code> method for each <code dir="ltr">TTCmd</code> object to prepare the SQL statements for later use.</p>
</div>
<!-- class="example" -->
<div id="TTCLS136" class="example">
<p class="titleinexample"><a id="CDEIIGIE"></a>Example 2-2 <a id="sthref88"></a><a id="sthref89"></a>Definition of a Connect() method</p>
<p>This example shows an implementation of the <code dir="ltr">XYZConnection::Connect()</code> method.</p>
<pre dir="ltr">void
XYZConnection::Connect(const char* connStr, const char* user, const char* pwd)
{
  try {
    TTConnection::Connect(connStr, user, pwd);
    updateData.Prepare(this, &#34;update mydata v set foo = ? where bar = ?&#34;);
    insertData.Prepare(this, &#34;insert into mydata values(?,0)&#34;);
    queryData.Prepare(this, &#34;select i from mydata where name = ?&#34;);
  }
  catch (TTStatus st) {
    cerr &lt;&lt; &#34;Error in XYZConnection::Connect: &#34; &lt;&lt; st &lt;&lt; endl;
  }
  return;
}
</pre>
<p>This <code dir="ltr">Connect()</code> method makes the <code dir="ltr">XYZConnection</code> object and its application-specific methods fully operational.</p>
<p>This approach also works well with the design of the <code dir="ltr">TTConnectionPool</code> class. The application can create numerous objects of type <code dir="ltr">XYZConnection</code> and add them to a <code dir="ltr">TTConnectionPool</code> object. By calling <code dir="ltr">TTConnectionPool</code><code dir="ltr">::ConnectAll()</code>, the application connects all connections in the pool to the database and prepares all SQL statements. Use <code dir="ltr">TTConnectionPool::DisconnectAll()</code> to disconnect. Refer to the usage discussion under <a href="description.htm#i95299">&#34;TTConnectionPool&#34;</a>, which provides important information.</p>
<p>This application design allows database access to be easily separated from the application business logic. Only the <code dir="ltr">XYZConnection</code> class contains database-specific code.</p>
<p>Examples of this application design can be found in several of the TTClasses sample programs that come with the TimesTen Quick Start. See <a href="compiling.htm#BCGGJCJF">&#34;About the TimesTen TTClasses demos&#34;</a>.</p>
<p>Note that other configurations are possible. Some customers have extended this scheme further, so that SQL statements to be used in an application are listed in a table in the database, rather than being hard-coded in the application itself. This allows changes to database functionality to be implemented by making database changes rather than application changes.</p>
</div>
<!-- class="example" -->
<div id="TTCLS346" class="example">
<p class="titleinexample"><a id="sthref90"></a>Example 2-3 <a id="sthref91"></a>Definition of a Disconnect() method</p>
<p>This example shows an implementation of the <code dir="ltr">XYZConnection::Disconnect()</code> method.</p>
<pre dir="ltr">void
XYZConnection::Disconnect()
{
  updateData.Drop();
  insertData.Drop();
  queryData.Drop();
 
  TTConnection::Disconnect();
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="CDEHEBFE"></a>
<div id="TTCLS373" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Considering TimesTen features for ac<a id="sthref92"></a>cess control</h2>
<p>TimesTen has features to control database access with object-level resolution for database objects such as tables, views, materialized views, sequences, and synonyms. You can refer to <a class="olink TTOPR236" href="../TTOPR/accesscontrol.htm#TTOPR236">&#34;Managing Access Control&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span> for general information about these features. Also see <a class="olink TTCDV164" href="../TTCDV/writing_app.htm#TTCDV164">&#34;Considering TimesTen features for access control&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database C Developer&#39;s Guide</span>.</p>
<p>For any query or SQL DML or DDL statement discussed in this document or used in an example, it is assumed that the user has appropriate privileges to execute the statement. For example, a <code dir="ltr">SELECT</code> statement on a table requires ownership of the table, <code dir="ltr">SELECT</code> privilege granted on the table, or the <code dir="ltr">SELECT ANY TABLE</code> system privilege.</p>
<p>Refer to <a class="olink TTSQL277" href="../TTSQL/state.htm#TTSQL277">&#34;SQL Statements&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database SQL Reference</span> for the privilege required for any given SQL statement.</p>
<p>Privileges are granted through the SQL statement <code dir="ltr">GRANT</code> and revoked through the SQL statement <code dir="ltr">REVOKE</code>. Some privileges are granted to all users through the <code dir="ltr">PUBLIC</code> role, of which each user is a member. See <a class="olink TTSQL345" href="../TTSQL/privileges.htm#TTSQL345">&#34;The PUBLIC role&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database SQL Reference</span> for information about that role.</p>
<p>In addition, access control affects connecting to a database (as discussed in <a href="#CDEJBGDF">&#34;Access control for connections&#34;</a>), setting connection attributes, using XLA (as discussed in <a href="#CDEBFEHD">&#34;Access control impact on XLA&#34;</a>), and executing C utility functions.</p>
<div class="infobox-note">
<p class="notep1">Notes:</p>
<ul>
<li>
<p>Access control cannot be disabled.</p>
</li>
<li>
<p>Access control privileges are checked both when SQL is prepared and when it is executed in the database, with most of the performance cost coming at prepare time.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="CDEDDHHB"></a>
<div id="TTCLS347" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Managing TimesTen con<a id="sthref93"></a>nections</h2>
<p>This section covers topics related to connecting to a database:</p>
<ul>
<li>
<p><a href="#CDEFEAEJ">About DSNs</a></p>
</li>
<li>
<p><a href="#CDECFBHI">Connecting and disconnecting</a></p>
</li>
<li>
<p><a href="#CDEJBGDF">Access control for connections</a></p>
</li>
</ul>
<a id="CDEFEAEJ"></a>
<div id="TTCLS348" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Ab<a id="sthref94"></a><a id="sthref95"></a>out DSNs</h3>
<p><span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span> contains information about creating a DSN (data source name) for a database. The type of DSN you create depends on whether your application connects directly to the database or connects by a client.</p>
<p>If you intend to connect directly to the database, refer to <a class="olink TTOPR120" href="../TTOPR/using.htm#TTOPR120">&#34;Managing TimesTen Databases&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span>. There are sections on creating a DSN for a direct connection from UNIX or Windows.</p>
<p>If you intend to create a client connection to the database, refer to <a class="olink TTOPR177" href="../TTOPR/client_server.htm#TTOPR177">&#34;Working with the TimesTen Client and Server&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span>. There are sections on creating a DSN for a client/server connection from UNIX or Windows.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
A TimesTen connection cannot be inherited from a parent process. If a process opens a database connection before creating (forking) a child process, the child must not use the connection.</div>
</div>
<!-- class="sect2" -->
<a id="CDECFBHI"></a>
<div id="TTCLS349" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Con<a id="sthref96"></a>necting and disconnecting</h3>
<p>Based on the <code dir="ltr">XYZConnection</code> class discussed in <a href="#i82204">&#34;Using TTCmd, TTConnection, and TTConnectionPool&#34;</a>, you could connect to and disconnect from TimesTen as shown in the following example.</p>
<div id="TTCLS350" class="example">
<p class="titleinexample"><a id="sthref97"></a>Example 2-4 Connecting to and disconnecting from TimesTen</p>
<pre dir="ltr">  ...

  XYZConnection conn;
  char connStr[256];
  char user[30];
  char pwd[30];
 
  ...
 
  try {
    conn.Connect(connStr, user, pwd);
  }
  catch (TTWarning st) {
    cerr &lt;&lt; &#34;Warning connecting to TimesTen: &#34; &lt;&lt; st &lt;&lt; endl;
  }
  catch (TTError st) {
    cerr &lt;&lt; &#34;Error connecting to TimesTen &#34; &lt;&lt; st &lt;&lt; endl;
    exit(1);
  }

// ... Work with the database connection...

  try {
    conn.Disconnect();
  }
  catch (TTStatus st) {
    cerr &lt;&lt; &#34;Error disconnecting from TimesTen: &#34; &lt;&lt; st &lt;&lt; endl;
    exit(1);
  }
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CDEJBGDF"></a>
<div id="TTCLS351" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Ac<a id="sthref98"></a><a id="sthref99"></a>cess control for connections</h3>
<p>This section covers access control features related to how you connect to the database with TTClasses.</p>
<p>For a general access control overview, refer to <a href="#CDEHEBFE">&#34;Considering TimesTen features for access control&#34;</a>.</p>
<div id="TTCLS352" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref100"></a>
<h4 class="sect3">Connection method signatures for access control</h4>
<p>The following method signatures are defined for the <code dir="ltr"><a href="description.htm#i95276">TTConnection</a></code>, <code dir="ltr"><a href="description.htm#i95299">TTConnectionPool</a></code>, and <code dir="ltr"><a href="description.htm#i111047">TTXlaPersistConnection</a></code> classes.</p>
<pre dir="ltr">virtual void 
TTConnection::Connect(const char* <span class="italic">connStr</span>)
 
virtual void
TTConnection::Connect(const char* <span class="italic">connStr</span>, const char* <span class="italic">username</span>, 
                      const char* <span class="italic">password</span>)
 
virtual void
TTConnection::Connect(const char* <span class="italic">connStr</span>, 
                      DRIVER_COMPLETION_ENUM <span class="italic">driverCompletion</span>)

void 
TTConnectionPool::ConnectAll(const char* <span class="italic">connStr</span>)

void
TTConnectionPool::ConnectAll(const char* <span class="italic">connStr</span>, const char* <span class="italic">username</span>, 
                             const char* <span class="italic">password</span>)
 
virtual void
TTXlaPersistConnection::Connect(const char* <span class="italic">connStr</span>, const char* <span class="italic">username</span>, 
                                const char* <span class="italic">password</span>, const char* <span class="italic">bookmarkStr</span>, 
                                bool <span class="italic">createBookmarkFlag</span>)
 
virtual void
TTXlaPersistConnection::Connect(const char* <span class="italic">connStr</span>, 
                                DRIVER_COMPLETION_ENUM <span class="italic">driverCompletion</span>, 
                                const char * <span class="italic">bookmarkStr</span>, bool <span class="italic">createBookmarkFlag</span>)
 
virtual void
TTXlaPersistConnection::Connect(const char* <span class="italic">connStr</span>, const char* <span class="italic">username</span>, 
                                const char* <span class="italic">password</span>, const char* <span class="italic">bookmarkStr</span>)

virtual void
TTXlaPersistConnection::Connect(const char* <span class="italic">connStr</span>, 
                                DRIVER_COMPLETION_ENUM <span class="italic">driverCompletion</span>, 
                                const char * <span class="italic">bookmarkStr</span>)
</pre>
<div class="infobox-note">
<p class="notep1">Notes:</p>
<ul>
<li>
<p>The connection string (<code dir="ltr"><span class="codeinlineitalic">connStr</span></code> value) can specify the user name and password, such as &#34;<code dir="ltr">DSN=testdb;uid=brian;pwd=welcome</code>&#34;. Be aware that for signatures that take connection string, user name, and password arguments, the user name and password arguments take precedence over any user name or password specified in the connection string.</p>
</li>
<li>
<p>See <a href="description.htm#i95276">&#34;TTConnection&#34;</a> for information about <code dir="ltr">DRIVER_COMPLETION_ENUM</code> values.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<div id="TTCLS353" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref101"></a>
<h4 class="sect3">CREA<a id="sthref102"></a><a id="sthref103"></a><a id="sthref104"></a>TE SESSION privilege for access control</h4>
<p>Privilege to connect to a database must be explicitly granted to every user other than the instance administrator, through the <code dir="ltr">CREATE SESSION</code> privilege. This is a system privilege. It must be granted by an administrator to the user, either directly or through the <code dir="ltr">PUBLIC</code> role. Refer to <a class="olink TTOPR236" href="../TTOPR/accesscontrol.htm#TTOPR236">&#34;Managing Access Control&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span> for additional information and examples.</p>
</div>
<!-- class="sect3" -->
<div id="TTCLS487" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref105"></a>
<h4 class="sect3">XL<a id="sthref106"></a><a id="sthref107"></a><a id="sthref108"></a><a id="sthref109"></a>A privilege for XLA connections</h4>
<p>In addition to the <code dir="ltr">CREATE SESSION</code> privilege, a user must be granted the <code dir="ltr">XLA</code> privilege to create an XLA connection and execute XLA functionality, as noted in <a href="#CDEBFEHD">&#34;Access control impact on XLA&#34;</a>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CDEJJCBE"></a>
<div id="TTCLS354" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Managing TimesTen data</h2>
<p>This section covers the following topics for working with data.</p>
<ul>
<li>
<p><a href="#CDEBGEAF">Binding parameters</a></p>
</li>
<li>
<p><a href="#CDEBAFHB">Working with REF CURSORs</a></p>
</li>
<li>
<p><a href="#CDEJDHIJ">Working with rowids</a></p>
</li>
<li>
<p><a href="#CDEGGAJF">Working with LOBs</a></p>
</li>
<li>
<p><a href="#CDEJEJEF">Setting a timeout or threshold for executing SQL statements</a></p>
</li>
</ul>
<a id="CDEBGEAF"></a>
<div id="TTCLS355" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Binding parameters</h3>
<p>This section discusses parameter binding for SQL statements. The <code dir="ltr"><a href="description.htm#i95294">TTCmd</a></code> class supplies the methods <code dir="ltr">setParam()</code> and <code dir="ltr">BindParameter()</code> (for batch operations) to bind parameters. It also supplies the method <code dir="ltr">registerParam()</code> to support output and input/output parameters or to override default bind types. There is also functionality to support the <code dir="ltr">DuplicateBindMode</code> TimesTen connection attribute if there are duplicate parameters (to determine TimesTen mode or Oracle mode).</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The TimesTen binding mechanism (early binding) differs from that of Oracle Database (late binding). TimesTen requires the data types before preparing queries. As a result, there will be an error if the data type of each bind parameter is not specified or cannot be inferred from the SQL statement. This would apply, for example, to the following statement:
<pre dir="ltr">SELECT &#39;x&#39; FROM DUAL WHERE ? = ?;
</pre>
<p>You could address the issue as follows, for example:</p>
<pre dir="ltr">SELECT &#39;x&#39; from DUAL WHERE CAST(? as VARCHAR2(10)) = 
                           CAST(? as VARCHAR2(10)); 
</pre></div>
<p>The following topics are covered:</p>
<ul>
<li>
<p><a href="#CDEFCHCG">Binding input parameters</a></p>
</li>
<li>
<p><a href="#CDEIIABF">Registering parameters</a></p>
</li>
<li>
<p><a href="#CDEEICCH">Binding output or input/output parameters</a></p>
</li>
<li>
<p><a href="#CDEEDEAC">Binding duplicate parameters</a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
The term &#34;bind parameter&#34; as used in TimesTen developer guides (in keeping with ODBC terminology) is equivalent to the term &#34;bind variable&#34; as used in TimesTen PL/SQL documents (in keeping with Oracle Database PL/SQL terminology).</div>
<a id="CDEFCHCG"></a>
<div id="TTCLS356" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Bin<a id="sthref110"></a><a id="sthref111"></a>ding input parameters</h4>
<p>For non-batch operations, use the <code dir="ltr"><a href="description.htm#i95294">TTCmd</a></code><code dir="ltr">::setParam()</code> method to bind input parameters for SQL statements, specifying the parameter position and the value to be bound. For batch operations, use the <code dir="ltr">TTCmd::BindParameter()</code> method. (See <a href="description.htm#BABHHBHI">Example 3-5, &#34;Using the ExecuteBatch() method&#34;</a> for an example of batch operations.)</p>
<p>For non-batch operations, <a href="#CDEDBJDD">Example 2-5</a> shows snippets from a class <code dir="ltr">SampleConnection</code>, where parameters are bound to insert a row into a table. (This example is from the TimesTen Quick Start demo <code dir="ltr">basics.cpp</code>. See <a href="compiling.htm#BCGGJCJF">&#34;About the TimesTen TTClasses demos&#34;</a>.) Implementation of the <code dir="ltr">Connect()</code> method is omitted here, but see <a href="#CDEIIGIE">Example 2-2</a> for a <code dir="ltr">Connect()</code> implementation.</p>
<p>Assume a table <code dir="ltr">basics</code>, defined as follows:</p>
<pre dir="ltr">create table basics (name char(10) not null primary key, i tt_integer);
</pre>
<div id="TTCLS357" class="example">
<p class="titleinexample"><a id="CDEDBJDD"></a>Example 2-5 Binding parameters to insert a row (non-batch)</p>
<pre dir="ltr">class SampleConnection : public TTConnection 
{
  using TTConnection::Connect;
 
  private:
    TTCmd        insertData;
    ...
 
  protected:
 
  public:
    SampleConnection();
    ~SampleConnection();
    virtual void Connect(const char* connStr, 
                         DRIVER_COMPLETION_ENUM driverCompletion);
    void insert(char* nameP);
    ...
 
  ...
  // Assume a Connect() method implemented with the following:
  // insertData.Prepare(this, &#34;insert into basics values(:name, :value)&#34;);
  ...
}

//----------------------------------------------------------------------
 

void
SampleConnection::insert(char* nameP)
{
  static long i = 0;
  insertData.setParam(1, nameP);
  insertData.setParam(2, i++);
  insertData.Execute();
}
 
//----------------------------------------------------------------------

...

int
main(int argc, char** argv)
{
  ...
  char name[10];
  SampleConnection conn;
  ...

// Assume conn is an open connection.
  sprintf(name, &#34;Robert&#34;);
  try {
    conn.insert(name); 
  }
  catch (TTStatus st) {
    cerr &lt;&lt; &#34;Error inserting row &#34; &lt;&lt; name &lt;&lt; &#34;:&#34; &lt;&lt; st &lt;&lt; endl;
    conn.Rollback();
  }
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="CDEIIABF"></a>
<div id="TTCLS358" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Reg<a id="sthref112"></a><a id="sthref113"></a><a id="sthref114"></a>istering parameters</h4>
<p>The <code dir="ltr">TTCmd</code> class provides the method <code dir="ltr"><a href="description.htm#CHDCEHGD">registerParam()</a></code>, which enables you to specify the SQL type, precision, and scale of a parameter (as applicable) and whether the parameter is input, output, or input/output. A <code dir="ltr">registerParam()</code> call is required for an output or input/output parameter, which could be a REF CURSOR (output only) or a parameter from a PL/SQL <code dir="ltr">RETURNING INTO</code> clause (output only), procedure, or function.</p>
<p>For an input parameter, TTClasses by default derives the SQL type from the bound C type for the <code dir="ltr">setParam()</code> or <code dir="ltr">BindParameter()</code> call according to the mappings shown in <a href="#CDEBCBJA">Table 2-1</a>. It is not typical to need a <code dir="ltr">registerParam()</code> call for an input parameter, but you can call it if you must use a particular SQL type or precision or scale.</p>
<div id="TTCLS359" class="tblhruleformal">
<p class="titleintable"><a id="sthref115"></a><a id="CDEBCBJA"></a>Table 2-1 TTClasses C type to SQL type mappings</p>
<table class="cellalignment2189" title="TTClasses C type to SQL type mappings" summary="Provides mappings between C types and SQL types." dir="ltr">
<thead>
<tr class="cellalignment2183">
<th class="cellalignment2190" id="r1c1-t8">C type</th>
<th class="cellalignment2190" id="r1c2-t8">SQL type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2183">
<td class="cellalignment2191" id="r2c1-t8" headers="r1c1-t8">
<p><code dir="ltr">char*</code></p>
</td>
<td class="cellalignment2191" headers="r2c1-t8 r1c2-t8">
<p><code dir="ltr">SQL_CHAR, SQL_VARCHAR</code></p>
</td>
</tr>
<tr class="cellalignment2183">
<td class="cellalignment2191" id="r3c1-t8" headers="r1c1-t8">
<p><code dir="ltr">void*</code></p>
</td>
<td class="cellalignment2191" headers="r3c1-t8 r1c2-t8">
<p><code dir="ltr">SQL_BINARY, SQL_VARBINARY</code></p>
</td>
</tr>
<tr class="cellalignment2183">
<td class="cellalignment2191" id="r4c1-t8" headers="r1c1-t8">
<p><code dir="ltr">double</code></p>
</td>
<td class="cellalignment2191" headers="r4c1-t8 r1c2-t8">
<p><code dir="ltr">SQL_FLOAT, SQL_DOUBLE</code></p>
</td>
</tr>
<tr class="cellalignment2183">
<td class="cellalignment2191" id="r5c1-t8" headers="r1c1-t8">
<p><code dir="ltr">DATE_STRUCT</code></p>
</td>
<td class="cellalignment2191" headers="r5c1-t8 r1c2-t8">
<p><code dir="ltr">SQL_DATE</code></p>
</td>
</tr>
<tr class="cellalignment2183">
<td class="cellalignment2191" id="r6c1-t8" headers="r1c1-t8">
<p><code dir="ltr">float</code></p>
</td>
<td class="cellalignment2191" headers="r6c1-t8 r1c2-t8">
<p><code dir="ltr">SQL_REAL, SQL_DECIMAL</code></p>
</td>
</tr>
<tr class="cellalignment2183">
<td class="cellalignment2191" id="r7c1-t8" headers="r1c1-t8">
<p><code dir="ltr">int</code></p>
</td>
<td class="cellalignment2191" headers="r7c1-t8 r1c2-t8">
<p><code dir="ltr">SQL_INTEGER</code></p>
</td>
</tr>
<tr class="cellalignment2183">
<td class="cellalignment2191" id="r8c1-t8" headers="r1c1-t8">
<p><code dir="ltr">SQLBIGINT</code></p>
</td>
<td class="cellalignment2191" headers="r8c1-t8 r1c2-t8">
<p><code dir="ltr">SQL_BIGINT</code></p>
</td>
</tr>
<tr class="cellalignment2183">
<td class="cellalignment2191" id="r9c1-t8" headers="r1c1-t8">
<p><code dir="ltr">SQLCHAR*</code></p>
</td>
<td class="cellalignment2191" headers="r9c1-t8 r1c2-t8">
<p><code dir="ltr">SQL_VARCHAR</code></p>
</td>
</tr>
<tr class="cellalignment2183">
<td class="cellalignment2191" id="r10c1-t8" headers="r1c1-t8">
<p><code dir="ltr">SQLINTEGER</code></p>
</td>
<td class="cellalignment2191" headers="r10c1-t8 r1c2-t8">
<p><code dir="ltr">SQL_INTEGER</code></p>
</td>
</tr>
<tr class="cellalignment2183">
<td class="cellalignment2191" id="r11c1-t8" headers="r1c1-t8">
<p><code dir="ltr">SQLSMALLINT</code></p>
</td>
<td class="cellalignment2191" headers="r11c1-t8 r1c2-t8">
<p><code dir="ltr">SQL_SMALLINT</code></p>
</td>
</tr>
<tr class="cellalignment2183">
<td class="cellalignment2191" id="r12c1-t8" headers="r1c1-t8">
<p><code dir="ltr">SQLTINYINT</code></p>
</td>
<td class="cellalignment2191" headers="r12c1-t8 r1c2-t8">
<p><code dir="ltr">SQL_TINYINT</code></p>
</td>
</tr>
<tr class="cellalignment2183">
<td class="cellalignment2191" id="r13c1-t8" headers="r1c1-t8">
<p><code dir="ltr">SQLWCHAR*</code></p>
</td>
<td class="cellalignment2191" headers="r13c1-t8 r1c2-t8">
<p><code dir="ltr">SQL_WCHAR, SQL_WVARCHAR</code></p>
</td>
</tr>
<tr class="cellalignment2183">
<td class="cellalignment2191" id="r14c1-t8" headers="r1c1-t8">
<p><code dir="ltr">TIME_STRUCT</code></p>
</td>
<td class="cellalignment2191" headers="r14c1-t8 r1c2-t8">
<p><code dir="ltr">SQL_TIME</code></p>
</td>
</tr>
<tr class="cellalignment2183">
<td class="cellalignment2191" id="r15c1-t8" headers="r1c1-t8">
<p><code dir="ltr">TIMESTAMP_STRUCT</code></p>
</td>
<td class="cellalignment2191" headers="r15c1-t8 r1c2-t8">
<p><code dir="ltr">SQL_TIMESTAMP</code></p>
</td>
</tr>
<tr class="cellalignment2183">
<td class="cellalignment2191" id="r16c1-t8" headers="r1c1-t8">
<p><code dir="ltr">SQLHSTMT</code></p>
</td>
<td class="cellalignment2191" headers="r16c1-t8 r1c2-t8">
<p><code dir="ltr">SQL_REFCURSOR</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<div class="infobox-note">
<p class="notep1">Important:</p>
Not all C types shown in the preceding table are supported if you are using a driver manager. Refer to <a href="compiling.htm#BCGEIJGG">&#34;Considerations when using an ODBC driver manager (Windows)&#34;</a>.</div>
<p>A <code dir="ltr">registerParam()</code> call can be either before or after the related <code dir="ltr">setParam()</code> or <code dir="ltr">BindParameter()</code> call and takes precedence regarding SQL type, precision, and scale (as applicable).</p>
<p>The method signature is as follows:</p>
<pre dir="ltr">inline void
TTCmd::registerParam(int <span class="italic">pno</span>,
                     int <span class="italic">inputOutputType</span>, 
                     int <span class="italic">sqltype</span>, 
                     int <span class="italic">precision</span> = 0, 
                     int <span class="italic">scale</span> = 0)
</pre>
<ul>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">pno</span></code> is the parameter position in the statement.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">inputOutputType</span></code> can be <code dir="ltr">TTCmd::PARAM_IN</code>, <code dir="ltr">TTCmd::PARAM_OUT</code>, or <code dir="ltr">TTCmd::PARAM_INOUT</code>.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">sqltype</span></code> is the SQL type of the data (for example, <code dir="ltr">SQL_INTEGER</code>).</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">precision</span></code> and <code dir="ltr"><span class="codeinlineitalic">scale</span></code> (both optional) are used the same way as in an ODBC <code dir="ltr">SQLBindParameter</code> call. For primitive types (such as <code dir="ltr">int</code>), <code dir="ltr">precision</code> and <code dir="ltr">scale</code> settings are ignored.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
See the next section, <a href="#CDEEICCH">&#34;Binding output or input/output parameters&#34;</a>, for an example. Also see <a href="description.htm#CHDCEHGD">&#34;registerParam()&#34;</a> for additional reference information.</div>
</div>
<!-- class="sect3" -->
<a id="CDEEICCH"></a>
<div id="TTCLS360" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Bin<a id="sthref116"></a><a id="sthref117"></a>ding output or input/output parameters</h4>
<p>TTClasses supports output and input/output parameters such as REF CURSORs (output only), parameters from a PL/SQL procedure or function that has <code dir="ltr">OUT</code> or <code dir="ltr">IN OUT</code> parameters, or a parameter from a <code dir="ltr">RETURNING INTO</code> clause (output only).</p>
<p>You must use the <code dir="ltr"><a href="description.htm#i95294">TTCmd</a>::registerParam()</code> method, described in the preceding section, to inform TTClasses if a parameter in a SQL statement is output or input/output. For the <code dir="ltr"><span class="codeinlineitalic">intputOutputType</span></code> setting in the method call, use <code dir="ltr">TTCmd::PARAM_OUT</code> or <code dir="ltr">TTCmd::PARAM_INOUT</code> as appropriate.</p>
<p>For non-batch operations, after the SQL statement has been executed, use the appropriate <code dir="ltr">TTCmd::<a href="description.htm#CHDFFAII">getParam()</a></code> method to retrieve the output value, specifying the parameter position and the variable into which the value is placed. There is a signature for each data type.</p>
<p>For batch operations, <code dir="ltr">TTCmd::BindParameter()</code> is used for output or input/output parameters as well as for input parameters. It is called before the statement is executed. After statement execution, the data for an output value is in the buffer specified in the <code dir="ltr">BindParameter()</code> call. <code dir="ltr">BindParameter()</code> has a signature for each data type. For an input/output parameter in batch operations, <code dir="ltr">BindParameter()</code> is called only once, before statement execution. Before execution the specified buffer contains the input, and after statement execution it contains the output.</p>
<p>The following examples provide code fragments showing the use of output and input/output parameters.</p>
<div id="TTCLS361" class="example">
<p class="titleinexample"><a id="sthref118"></a>Example 2-6 Using input and input/output parameters (non-batch)</p>
<p>This example uses input and output parameters. The <code dir="ltr">setParam()</code> call binds the value of the input parameter <code dir="ltr">:a</code>. The <code dir="ltr">getParam()</code> call retrieves the value of the output parameter <code dir="ltr">:b</code>. The output parameter is also registered as required.</p>
<pre dir="ltr">...
// t1 has a single TT_INTEGER column
cmd.Prepare(&amp;conn, &#34;insert into t1 values (:a) returning c1 into :b&#34;);
cmd.setParam(1, 99);
cmd.registerParam(2, TTCmd::PARAM_OUT, SQL_INTEGER);
cmd.Execute();
SQLINTEGER outval;

if (cmd.getParam(2, &amp;outval))
  cerr &lt;&lt; &#34;The output value is null.&#34; &lt;&lt; endl;
else
  cerr &lt;&lt; &#34;The output value is &#34; &lt;&lt; outval &lt;&lt; endl;
...
</pre></div>
<!-- class="example" -->
<div id="TTCLS362" class="example">
<p class="titleinexample"><a id="sthref119"></a>Example 2-7 Using input and output parameters (batch operations)</p>
<p>This example uses input and output parameters in a batch operation. The first <code dir="ltr">BindParameter()</code> call provides the input data for the first parameter <code dir="ltr">:a</code>. The second <code dir="ltr">BindParameter()</code> call provides a buffer for output data for the second parameter <code dir="ltr">:b</code>.</p>
<pre dir="ltr">...
#define BATCH_SIZE  5
int input_int_array[BATCH_SIZE] = { 91, 92, 93, 94, 95 };
int output_int_array[BATCH_SIZE] = { -1, -1, -1, -1, -1 };
int numrows;
 
cmd.PrepareBatch(&amp;conn, &#34;insert into t1 values (:a) returning c1 into :b&#34;,
                 BATCH_SIZE);
cmd.BindParameter(1, BATCH_SIZE, input_int_array);
cmd.BindParameter(2, BATCH_SIZE, output_int_array);
cmd.registerParam(2, TTCmd::PARAM_OUT, SQL_INTEGER);
numrows = cmd.ExecuteBatch(BATCH_SIZE);
...
</pre></div>
<!-- class="example" -->
<div id="TTCLS363" class="example">
<p class="titleinexample"><a id="sthref120"></a>Example 2-8 Using input/output parameters</p>
<p>This example uses an input/output parameter. It is registered as required. The <code dir="ltr">setParam()</code> call binds its input value and the <code dir="ltr">getParam()</code> call retrieves its output value.</p>
<pre dir="ltr">...
cmd.Prepare(&amp;conn, &#34;begin :x := :x + 1; end;&#34;);
cmd.registerParam(1, TTCmd::PARAM_INOUT, SQL_INTEGER);
cmd.setParam(1, 99);
cmd.Execute();
SQLINTEGER outval;

if (cmd.getParam(1, &amp;outval))
  cerr &lt;&lt; &#34;The output value is null.&#34; &lt;&lt; endl;
else
  cerr &lt;&lt; &#34;The output value is &#34; &lt;&lt; outval &lt;&lt; endl;
...
</pre></div>
<!-- class="example" -->
<div id="TTCLS364" class="example">
<p class="titleinexample"><a id="sthref121"></a>Example 2-9 Using output and input/output parameters</p>
<p>This example uses output and input/output parameters. Assume a PL/SQL procedure as follows:</p>
<pre dir="ltr">create or replace procedure my_proc (
  a in number,
  b in number,
  c out number,
  d in out number ) as

begin
  c := a + b; 
  d := a + b - d; 
end my_proc;
</pre>
<p>The input parameters for the procedure are taken as constants in this example rather than as bound parameters, so only the <code dir="ltr">OUT</code> parameter and <code dir="ltr">IN OUT</code> parameter are bound. Both are registered as required. The <code dir="ltr">setParam()</code> call provides the input value for the <code dir="ltr">IN OUT</code> parameter <code dir="ltr">:var1</code>. The first <code dir="ltr">getParam()</code> call retrieves the value for the <code dir="ltr">OUT</code> parameter <code dir="ltr">:sum</code>. The second <code dir="ltr">getParam()</code> call retrieves the output value for the <code dir="ltr">IN OUT</code> parameter <code dir="ltr">:var1</code>.</p>
<pre dir="ltr">...
cmd.Prepare(&amp;conn, &#34;begin my_proc (10, 5, :sum, :var1); end;&#34;);
cmd.registerParam (1, TTCmd::PARAM_OUT, SQL_DECIMAL, 38);
cmd.registerParam (2, TTCmd::PARAM_INOUT, SQL_DECIMAL, 38);
cmd.setParam(2, &#34;99&#34;);
cmd.Execute();
SQLINTEGER outval1, outval2;

if (cmd.getParam(1, &amp;outval1))
  cerr &lt;&lt; &#34;The first output value is null.&#34; &lt;&lt; endl;
else
  cerr &lt;&lt; &#34;The first output value is &#34; &lt;&lt; outval &lt;&lt; endl;
if (cmd.getParam(2, &amp;outval2))
  cerr &lt;&lt; &#34;The second output value is null.&#34; &lt;&lt; endl;
else
  cerr &lt;&lt; &#34;The second output value is &#34; &lt;&lt; outval &lt;&lt; endl;
...
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="CDEEDEAC"></a>
<div id="TTCLS365" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Binding d<a id="sthref122"></a><a id="sthref123"></a><a id="sthref124"></a>uplicate parameters</h4>
<p>TimesTen supports two distinct modes for binding duplicate parameters in a SQL statement. In the Oracle mode, with the TimesTen connection attribute setting <code dir="ltr">DuplicateBindMode=0</code> (the default), multiple occurrences of the same parameter name are considered to be distinct parameters. In the traditional TimesTen mode, where <code dir="ltr">DuplicateBindMode=1</code>, multiple occurrences of the same parameter name are considered to be the same parameter (as in earlier TimesTen releases).</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Refer to <a class="olink TTREF161" href="../TTREF/attribute.htm#TTREF161">&#34;DuplicateBindMode&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Reference</span> and <a class="olink TTCDV141" href="../TTCDV/writing_app.htm#TTCDV141">&#34;Binding duplicate parameters in SQL statements&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database C Developer&#39;s Guide</span> for additional information.</div>
<p>For illustration, consider the following query:</p>
<pre dir="ltr">SELECT * FROM employees
  WHERE employee_id &lt; :a AND manager_id &gt; :a AND salary &lt; :b;
</pre>
<p>In the Oracle mode, when parameter position numbers are assigned, a number is given to each parameter occurrence without regard to name duplication. The application must, at a minimum, bind a value for the first occurrence of each parameter name. For any subsequent occurrence of a given parameter name, the application can bind a different value for the occurrence or it can leave the parameter occurrence unbound. In the latter case, the subsequent occurrence takes the same value as the first occurrence. In either case, each occurrence still has a distinct parameter position number.</p>
<p>In TimesTen mode, SQL statements containing duplicate parameters are parsed such that only distinct parameter names are considered as separate parameters. Binding is based on the position of the first occurrence of a parameter name. Subsequent occurrences of the parameter name are not given their own position numbers, and all occurrences of the same parameter name take on the same value.</p>
<div id="TTCLS366" class="example">
<p class="titleinexample"><a id="sthref125"></a>Example 2-10 Duplicate parameters: Oracle mode</p>
<p>This example uses a different value for the second occurrence of <code dir="ltr">a</code> in the SQL statement above in the Oracle mode:</p>
<pre dir="ltr">mycmd.setParam(1, ...); // first occurrence of :a
mycmd.setParam(2, ...); // second occurrence of :a
mycmd.setParam(3, ...); // occurrence of :b
</pre>
<p>To use the same value for both occurrences of <code dir="ltr">a</code>:</p>
<pre dir="ltr">mycmd.setParam(1, ...); // both occurrences of :a
mycmd.setParam(3, ...); // occurrence of :b
</pre>
<p>Parameter <code dir="ltr">b</code> is considered to be in position 3 regardless, and the number of parameters is considered to be three.</p>
</div>
<!-- class="example" -->
<div id="TTCLS367" class="example">
<p class="titleinexample"><a id="sthref126"></a>Example 2-11 Duplicate parameters: TimesTen mode</p>
<p>For the SQL statement above, in TimesTen mode the two occurrences of <code dir="ltr">a</code> are considered to be a single parameter, so cannot be bound separately:</p>
<pre dir="ltr">mycmd.setParam(1, ...); // both occurrences of :a
mycmd.setParam(2, ...); // occurrence of :b
</pre>
<p>Note that in TimesTen mode, parameter <code dir="ltr">b</code> is considered to be in position 2, not position 3, and the number of parameters is considered to be two.</p>
</div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CDEBAFHB"></a>
<div id="TTCLS368" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Wo<a id="sthref127"></a>rking with REF CURSORs</h3>
<p><span class="italic">REF CURSOR</span> is a PL/SQL concept, a handle to a cursor over a SQL result set that can be passed between PL/SQL and an application. In TimesTen, the cursor can be opened in PL/SQL, then the REF CURSOR can be passed to the application for processing. This usage is an <code dir="ltr">OUT</code> REF CURSOR, an <code dir="ltr">OUT</code> parameter with respect to PL/SQL. As with any output parameter, it must be registered using the <code dir="ltr">TTCmd::registerParam()</code> method. (See <a href="#CDEIIABF">&#34;Registering parameters&#34;</a> and <a href="#CDEEICCH">&#34;Binding output or input/output parameters&#34;</a>.)</p>
<p>In the TimesTen implementation, the REF CURSOR is attached to a separate statement handle. The application prepares a SQL statement that has a REF CURSOR parameter on one statement handle, then, before executing the statement, binds a second statement handle as the value of the REF CURSOR. After the statement is executed, the application can describe, bind, and fetch the results using the same APIs as for any result set.</p>
<p>In TTClasses, because a <code dir="ltr"><a href="description.htm#i95294">TTCmd</a></code> object encapsulates a single SQL statement, two <code dir="ltr">TTCmd</code> objects are used to support this REF CURSOR model.</p>
<p>See <a class="olink TTPLS176" href="../TTPLS/dtypesfunc.htm#TTPLS176">&#34;PL/SQL REF CURSORs&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database PL/SQL Developer&#39;s Guide</span> for additional information about REF CURSORs.</p>
<div class="infobox-note">
<p class="notep1">Important:</p>
<ul>
<li>
<p>In addition to supporting only <code dir="ltr">OUT</code> REF CURSORs (from PL/SQL to the application), TimesTen supports only one REFCURSOR per statement.</p>
</li>
<li>
<p>As noted in <a href="compiling.htm#BCGEIJGG">&#34;Considerations when using an ODBC driver manager (Windows)&#34;</a>, REF CURSOR functionality is not supported in TTClasses when you use an ODBC driver manager. (This restriction does not apply to the demo <code dir="ltr">ttdm</code> driver manager supplied with TimesTen Quick Start.)</p>
</li>
</ul>
</div>
<p><a href="#CDEHFCBH">Example 2-12</a> below demonstrates the following steps for using a REF CURSOR in TTClasses.</p>
<ol>
<li>
<p>Declare a <code dir="ltr">TTCmd</code> object for the PL/SQL statement that returns a REF CURSOR (<code dir="ltr">cmdPLSQL</code> in the example).</p>
</li>
<li>
<p>Declare a <code dir="ltr">TTCmd*</code> pointer to point to a second <code dir="ltr">TTCmd</code> object for the REF CURSOR (<code dir="ltr">cmdRefCursor</code> in the example).</p>
</li>
<li>
<p>Use the first <code dir="ltr">TTCmd</code> object (<code dir="ltr">cmdPLSQL</code>) to prepare the PL/SQL statement.</p>
</li>
<li>
<p>Use the <code dir="ltr">TTCmd::registerParam()</code> method of the first <code dir="ltr">TTCmd</code> object to register the REF CURSOR as an output parameter.</p>
</li>
<li>
<p>Use the first <code dir="ltr">TTCmd</code> object to execute the statement.</p>
</li>
<li>
<p>Use the <code dir="ltr">TTCmd::getParam()</code> method of the first <code dir="ltr">TTCmd</code> object to retrieve the REF CURSOR into the second <code dir="ltr">TTCmd</code> object (using <code dir="ltr">&amp;cmdRefCursor</code>). There is a <code dir="ltr">getParam(int</code> <code dir="ltr"><span class="codeinlineitalic">paramNo</span></code><code dir="ltr">, TTCmd**</code> <code dir="ltr"><span class="codeinlineitalic">rcCmd</span></code><code dir="ltr">)</code> signature for REF CURSORs.</p>
</li>
<li>
<p>Fetch the results from the <code dir="ltr">TTCmd</code> object for the REF CURSOR and process as desired.</p>
</li>
<li>
<p>Drop the first <code dir="ltr">TTCmd</code> object.</p>
</li>
<li>
<p>Drop the pointer to the <code dir="ltr">TTCmd</code> object for the REF CURSOR.</p>
</li>
<li>
<p>Issue a <code dir="ltr">delete</code> statement to delete the <code dir="ltr">TTCmd</code> object for the REF CURSOR.</p>
</li>
</ol>
<div id="TTCLS369" class="example">
<p class="titleinexample"><a id="CDEHFCBH"></a>Example 2-12 Using a REF CURSOR</p>
<p>This example retrieves and processes a REF CURSOR from a PL/SQL anonymous block. See the preceding steps for an explanation.</p>
<pre dir="ltr">...
TTCmd  cmdPLSQL;
TTCmd* cmdRefCur;
TTConnection conn;
...
 
// c1 is a TT_INTEGER column.
cmdPLSQL.Prepare(&amp;conn, &#34;begin open :rc for select c1 from t; end;&#34;)
cmdPLSQL.registerParam(1, TTCmd::PARAM_OUT, SQL_REFCURSOR);
cmdPLSQL.Execute();

if (cmdPLSQL.getParam(1, &amp;cmdRefCur) == false)
{
  SQLINTEGER fetchval;
 
  while (!cmdRefCursor-&gt;FetchNext()) {
    cmdRefCur-&gt;getColumn(1, &amp;fetchval);
  }
  cmdRefCursor-&gt;Drop();
  delete cmdRefCursor;
}

cmdPLSQL.Drop();
</pre></div>
<!-- class="example" -->
<p>Be aware of the following usage notes when using REF CURSORs in TTClasses:</p>
<ul>
<li>
<p>For passing REF CURSORs between PL/SQL and an application, TimesTen supports only <code dir="ltr">OUT</code> REF CURSORs, from PL/SQL to the application, and supports a statement returning only a single REF CURSOR.</p>
</li>
<li>
<p>Unlike <code dir="ltr">TTCmd::getParam()</code> calls for other data types, a <code dir="ltr">getParam()</code> call with a <code dir="ltr">TTCmd**</code> parameter for a REF CURSOR can only be called once. Subsequent calls return <code dir="ltr">NULL</code>. If you must retrieve a REF CURSOR a second time, you must reexecute the statement.</p>
</li>
<li>
<p>If the statement is executed multiple times, the REF CURSOR parameter must be reregistered each time. For example, if you are executing the statement, getting the REF CURSOR parameter, and fetching from the REF CURSOR within a loop, then the parameter registration must also be in the loop, such as follows:</p>
<pre dir="ltr">cmdPLSQL.Prepare(...);

<span class="italic">loop</span>
   cmdPLSQL.registerParam(...);
   cmdPLSQL.Execute();
   cmdPLSQL.getParam(...);
   <span class="italic">fetch loop</span>
<span class="italic">end loop</span>
</pre>
<p>This is shown in <a href="#CDEIACED">Example 2-13</a> below.</p>
</li>
<li>
<p>Any <code dir="ltr">TTCmd</code> object, including one for a REF CURSOR, has an ODBC statement handle allocated for it. The REF CURSOR statement handle is dropped at the time of the <code dir="ltr">Drop()</code> statement and the resource is freed after the <code dir="ltr">delete</code> statement.</p>
</li>
</ul>
<div id="TTCLS499" class="example">
<p class="titleinexample"><a id="CDEIACED"></a>Example 2-13 Using a REF CURSOR in a loop</p>
<p>This example uses a REF CURSOR in a loop. Assume the following declarations and a <code dir="ltr">TTConnection</code> instance <code dir="ltr">conn</code>.</p>
<pre dir="ltr">...
TTCmd query;
TTCmd* ref_cur;
...
</pre>
<p>Here is the loop:</p>
<pre dir="ltr">...
      cerr &lt;&lt; &#34;Selecting values using cursor&#34; &lt;&lt; endl;
      query.Prepare(&amp;conn, &#34;begin open :rc for select c1 from t1; end;&#34;);
      
      for (int round = 0; round &lt; ROUNDS; round++) {
         cerr &lt;&lt; &#34;executing ref cursor round# &#34; &lt;&lt; (round+1) &lt;&lt; endl;
         query.registerParam(1, TTCmd::PARAM_OUT, SQL_REFCURSOR);
         query.Execute();
         query.getParam(1, &amp;ref_cur);
 
         while(true) {
            fetch_next = ref_cur -&gt; FetchNext();
            if (fetch_next == 1)
                break;
 
            ref_cur -&gt; getColumn(1, &amp;val);
            cerr &lt;&lt; &#34;val = &#34; &lt;&lt; val &lt;&lt; endl;
         }
         ref_cur-&gt;Drop();
         delete ref_cur;
      }
 
      conn.Commit();
      query.Drop();
...
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CDEJDHIJ"></a>
<div id="TTCLS370" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Wo<a id="sthref128"></a>rking with rowids</h3>
<p>Each row in a table has a unique identifier known as its <span class="italic">rowid</span>. An application can retrieve the rowid of a row from the <code dir="ltr">ROWID</code> pseudocolumn. Rowids can be represented in either binary or character format.</p>
<p>An application can specify literal rowid values in SQL statements, such as in <code dir="ltr">WHERE</code> clauses, as <code dir="ltr">CHAR</code> constants enclosed in single quotes.</p>
<p>The ODBC SQL type <code dir="ltr">SQL_ROWID</code> corresponds to the SQL type <code dir="ltr">ROWID</code>.</p>
<p>For parameters and result set columns, rowids are convertible to and from the C types <code dir="ltr">SQL_C_BINARY</code>, <code dir="ltr">SQL_C_WCHAR</code>, and <code dir="ltr">SQL_C_CHAR</code>. <code dir="ltr">SQL_C_CHAR</code> is the default C type for rowids. The size of a rowid is 12 bytes as <code dir="ltr">SQL_C_BINARY</code>, 18 bytes as <code dir="ltr">SQL_C_CHAR</code>, and 36 bytes as <code dir="ltr">SQL_C_WCHAR</code>.</p>
<p>Note that TTClasses has always supported rowids as character strings; however, a TTClasses application can now pass a rowid to a PL/SQL anonymous block as a <code dir="ltr">ROWID</code> type instead of as a string. This involves using the <code dir="ltr">TTCmd::registerParam()</code> method to register the rowid input parameter as <code dir="ltr">SQL_ROWID</code> type, as shown in <a href="#CDEHCJJC">Example 2-14</a>.</p>
<div id="TTCLS371" class="example">
<p class="titleinexample"><a id="CDEHCJJC"></a>Example 2-14 Using a rowid</p>
<pre dir="ltr">...
TTConnection conn;
TTCmd cmd;
...
cmd.Prepare(&amp;conn, &#34;begin delete from t1 where rowid = :x; end;&#34;);
cmd.registerParam(1, TTCmd::PARAM_IN, SQL_ROWID);
cmd.setParam(1, rowid_string);
cmd.Execute();
...
</pre></div>
<!-- class="example" -->
<p>Refer to <a class="olink TTSQL150" href="../TTSQL/types.htm#TTSQL150">&#34;ROWID data type&#34;</a> and <a class="olink TTSQL195" href="../TTSQL/express.htm#TTSQL195">&#34;ROWID&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database SQL Reference</span> for additional information about rowids and the <code dir="ltr">ROWID</code> data type, including usage and life.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
TimesTen does not support the PL/SQL type <code dir="ltr">UROWID</code>.</div>
</div>
<!-- class="sect2" -->
<a id="CDEGGAJF"></a>
<div id="TTCLS490" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Wor<a id="sthref129"></a>king with LOBs</h3>
<p>TimesTen supports LOBs (large objects). This includes CLOBs (character LOBs), NCLOBs (national character LOBs), and BLOBs (binary LOBs).</p>
<p>For an overview of LOBs and LOB programming interfaces for C and C++, see <a class="olink TTCDV512" href="../TTCDV/writing_app.htm#TTCDV512">&#34;Working with LOBs&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database C Developer&#39;s Guide</span>. Only the LOB simple data interface is applicable to TTClasses.</p>
<p>This section discusses the use of LOBs in TTClasses, covering the following topics:</p>
<ul>
<li>
<p><a href="#CDEHDJAD">Differences between TimesTen LOBs and Oracle Database LOBs</a></p>
</li>
<li>
<p><a href="#CDEDCHEA">Using the LOB simple data interface in TTClasses</a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Important:</p>
In TimesTen a LOB used in an application does not remain valid past the end of the transaction.</div>
<div class="infobox-note">
<p class="notep1">Note:</p>
TimesTen does not support CLOBs if the database character set is <code dir="ltr">TIMESTEN8</code>.</div>
<p>You can also refer to the following.</p>
<ul>
<li>
<p><a class="olink TTSQL481" href="../TTSQL/types.htm#TTSQL481">&#34;LOB data types&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database SQL Reference</span> for additional information about LOBs in TimesTen</p>
</li>
<li>
<p><a class="olink ADLOB" href="../ADLOB/toc.htm"><span class="italic">Oracle Database SecureFiles and Large Objects Developer&#39;s Guide</span></a> for general information about programming with LOBs (but not specific to TimesTen functionality)</p>
</li>
</ul>
<a id="CDEHDJAD"></a>
<div id="TTCLS491" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Differences between TimesTen LOBs and Oracle Database LOBs</h4>
<p>Be aware of the following points.</p>
<ul>
<li>
<p>A key difference between the TimesTen LOB implementation and the Oracle Database implementation is that in TimesTen, a LOB used in an application does not remain valid past the end of the transaction. All such LOBs are invalidated after a commit or rollback, whether explicit or implicit. This includes after any DDL statement if TimesTen <code dir="ltr">DDLCommitBehavior</code> is set to 0 (the default), for Oracle Database behavior.</p>
</li>
<li>
<p>TimesTen does not support BFILEs, SecureFiles, array reads and writes for LOBs, or callback functions for LOBs.</p>
</li>
<li>
<p>TimesTen does not support binding arrays of LOBs.</p>
</li>
<li>
<p>TimesTen does not support batch processing of LOBs.</p>
</li>
<li>
<p>Relevant to BLOBs, there are differences in the usage of hexadecimal literals in TimesTen. see the description of <code dir="ltr"><span class="codeinlineitalic">HexadecimalLiteral</span></code> in <a class="olink TTSQL202" href="../TTSQL/express.htm#TTSQL202">&#34;Constants&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database SQL Reference</span>.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CDEDCHEA"></a>
<div id="TTCLS492" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Using the LOB simple data interface in TTClasses</h4>
<p>The simple data interface allows applications to access LOB data by binding and defining, just as with other scalar types. For the simple data interface in TTClasses, use <code dir="ltr">getParam()</code> and <code dir="ltr">setParam()</code> to bind parameters and use <code dir="ltr">getColumn()</code> or <code dir="ltr">getColumnNullable()</code> to define result columns. The application can bind or define using a SQL type that is compatible with the corresponding variable type, as follows:</p>
<ul>
<li>
<p>For BLOB data, use SQL type <code dir="ltr">SQL_LONGVARBINARY</code> and C type <code dir="ltr">SQL_C_BINARY</code>.</p>
</li>
<li>
<p>For CLOB data, use SQL type <code dir="ltr">SQL_LONGVARCHAR</code> and C type <code dir="ltr">SQL_C_CHAR</code>.</p>
</li>
<li>
<p>For NCLOB data, use SQL type <code dir="ltr">SQL_WLONGVARCHAR</code> and C type <code dir="ltr">SQL_C_WCHAR</code>.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Notes:</p>
<ul>
<li>
<p>TTClasses does not support batch mode for LOBs.</p>
</li>
<li>
<p>Binding a CLOB or NCLOB with a C type of <code dir="ltr">SQL_C_BINARY</code> is prohibited.</p>
</li>
</ul>
</div>
<p><a href="#CDEHAAHE">Example 2-15</a> shows use of the LOB simple data interface in TTClasses.</p>
<div id="TTCLS493" class="example">
<p class="titleinexample"><a id="CDEHAAHE"></a>Example 2-15 Using LOBs in TTClasses</p>
<p>This example assumes a table with <code dir="ltr">NCLOB</code>, <code dir="ltr">BLOB</code>, and <code dir="ltr">CLOB</code> columns has been created and populated. The methods executed on these LOB types are the same as for <code dir="ltr">NCHAR</code>, <code dir="ltr">BINARY</code>, and <code dir="ltr">CHAR</code>, respectively.</p>
<pre dir="ltr">#ifdef _WIN32
#include &lt;ttcommon.h&gt;
#endif
#include &#34;TTInclude.h&#34;
#define LOB_COL_SIZE 4194304

int main(int argc, char** argv) {

   TTConnection conn;
   TTCmd query;
   char conn_str[100] = &#34;... your connection string ...&#34;;
   char tbl_name[20] = &#34;... test table name ...&#34;;

   int num_rows = 0;
   char query_stmt[1000];
   int fetch_next;
   int value_is_null = 0;
   int column_type;
   SQLWCHAR * unicode_val;
   u_char * binary_val;
   char * alfanum_val;
   int b_len;
   int u_len;
 
   cerr &lt;&lt; &#34;Connecting to TimesTen &lt;&#34; &lt;&lt; conn_str &lt;&lt; &#34;&gt;&#34; &lt;&lt; endl;
 
   try {
      conn.Connect(conn_str);
      sprintf(query_stmt, &#34;select * from %s&#34;, tbl_name);
      query.Prepare(&amp;conn, query_stmt);
      query.Execute();
      const int num_result_cols = query.getNColumns();
 
      while (true) {
         // loop until no rows found
         // fetch a row; if no more rows, break out of loop
         // FetchNext returns 0 for success, 1 for SQL_NO_DATA_FOUND
         fetch_next = query.FetchNext();
         if (fetch_next == 1)
            break;
 
         for (int col = 1; col &lt;= num_result_cols; col++) {
            value_is_null = 0;
            column_type = query.getColumnType(col);
 
            switch (column_type) {
 
               case SQL_WLONGVARCHAR:
 
                  value_is_null = query.getColumnNullable(col,
                          (SQLWCHAR**) &amp; unicode_val, &amp;u_len);
                  if (value_is_null) {
                     cerr &lt;&lt; &#34;NCLOB value is NULL&#34;;
                  } else {
                     cerr &lt;&lt; &#34;NCLOB value length = &#34; &lt;&lt; u_len &lt;&lt; endl;
                     // do something with NCLOB value
                  }
                  break;
 
               case SQL_LONGVARBINARY:
 
                  value_is_null = query.getColumnNullable(col,
                          (void**) &amp; binary_val, &amp;b_len);
                  if (value_is_null) {
                     cerr &lt;&lt; &#34;BLOB value is NULL&#34;;
                  } else {
                     cerr &lt;&lt; &#34;BLOB value length = &#34; &lt;&lt; b_len &lt;&lt; endl;
                     // do something with BLOB value
                  }
                  break;
 
               case SQL_LONGVARCHAR:
 
                  alfanum_val = (char*) malloc(LOB_COL_SIZE + 1);
                  value_is_null = query.getColumnNullable(col, alfanum_val);
                  if (value_is_null) {
                     cerr &lt;&lt; &#34;CLOB value is NULL&#34;;
                  } else {
                    cerr &lt;&lt; &#34;CLOB value length = &#34; &lt;&lt; strlen(alfanum_val) &lt;&lt; endl;
                     // do something with BLOB value
                  }
                  free(alfanum_val);
                  break;
 
               default:
                  break;
            }
         }
 
         num_rows++;
         cerr &lt;&lt; &#34;row &#34; &lt;&lt; num_rows &lt;&lt; &#34; fetched&#34; &lt;&lt; endl;
      }
      cerr &lt;&lt; num_rows &lt;&lt; &#34; rows returned&#34; &lt;&lt; endl;
   } catch (TTError err) {
      cerr &lt;&lt; &#34;\nError&#34; &lt;&lt; err &lt;&lt; endl;
   }
   query.Drop();
   conn.Disconnect();
   return 0;
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<div id="TTCLS494" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref130"></a>
<h4 class="sect3">Passthrough LOBs in TTClasses</h4>
<p>Passthrough LOBs, which are LOBs in Oracle Database accessed through TimesTen, are exposed as TimesTen LOBs and are supported by TimesTen in much the same way that any TimesTen LOB is supported, but note the following:</p>
<ul>
<li>
<p>TimesTen LOB size limitations do not apply to storage of LOBs in the Oracle database through passthrough.</p>
</li>
<li>
<p>As with TimesTen local LOBs, a passthrough LOB used in an application does not remain valid past the end of the transaction.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CDEJEJEF"></a>
<div id="TTCLS372" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Set<a id="sthref131"></a><a id="sthref132"></a><a id="sthref133"></a>ting a timeout or threshold for executing SQL statements</h3>
<p>TimesTen offers two ways for you to limit the time for SQL statements or procedure calls to execute, by setting either a timeout value or a threshold value. For the former, if the timeout duration is reached, the statement stops executing and an error is thrown. A value of 0 indicates no timeout. For the latter, if the threshold is reached, an SNMP trap is thrown but execution continues.</p>
<p>The query timeout limit has effect only when a SQL statement is actively executing. A timeout does not occur during commit or rollback.</p>
<p>Use the <code dir="ltr">TTCmd</code> methods <code dir="ltr"><a href="description.htm#i114811">setQueryTimeout()</a></code> and <code dir="ltr"><a href="description.htm#CHDFEEJC">setQueryThreshold()</a></code> to specify these settings for the <code dir="ltr">TTCmd</code> object. Note that these methods override the settings specified by the TimesTen connection attributes <code dir="ltr">SqlQueryTimeout</code> and <code dir="ltr">QueryThreshold</code>, respectively.</p>
<p>There is also a <code dir="ltr"><a href="description.htm#CHDJFGEB">getQueryThreshold()</a></code> method to read the current threshold setting.</p>
<p>In TTClasses, these features can be used only at the statement level, not the connection level.</p>
<p>For related information, see <a class="olink TTCDV155" href="../TTCDV/writing_app.htm#TTCDV155">&#34;Setting a timeout or threshold for executing SQL statements&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database C Developer&#39;s Guide</span>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If both a lock timeout value and a SQL query timeout value are specified, the lesser of the two values causes a timeout first. Regarding lock timeouts, you can refer to <a class="olink TTREF260" href="../TTREF/proced.htm#TTREF260">&#34;ttLockWait&#34;</a> (built-in procedure) or <a class="olink TTREF165" href="../TTREF/attribute.htm#TTREF165">&#34;LockWait&#34;</a> (general connection attribute) in <span class="italic">Oracle TimesTen In-Memory Database Reference</span>, or to <a class="olink TTTRB200" href="../TTTRB/datastore_trouble.htm#TTTRB200">&#34;Check for deadlocks and timeouts&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Troubleshooting Guide</span>.</div>
</div>
<!-- class="sect2" -->
<div id="TTCLS495" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref134"></a>
<h3 class="sect2">Using automatic client failover in a TTClasses application</h3>
<p>TTClasses does not have its own functionality for automatic client failover, but a TTClasses application can configure TimesTen automatic client failover in the same way that an ODBC application can. This is discussed in <a class="olink TTCDV174" href="../TTCDV/writing_app.htm#TTCDV174">&#34;Using automatic client failover in your application&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database C Developer&#39;s Guide</span>. Also see <a class="olink TTOPR736" href="../TTOPR/client_server.htm#TTOPR736">&#34;Using automatic client failover&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span> for more general information about this feature.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i83245"></a>
<div id="TTCLS137" class="sect1">
<h2 class="sect1">Using T<a id="sthref135"></a>TClasses logging</h2>
<p>TTClasses has a logging facility that allows applications to capture debugging information. TTClasses logging is associated with processes. You can enable logging for a specific process and produce a single output log stream for the process.</p>
<p>TTClasses supports different levels of logging information. See <a href="#i86124">Example 2-17</a> for more information about what is printed at each log level.</p>
<p>Log level <code dir="ltr">TTLOG_WARN</code> is very useful while developing a TTClasses application. It can also be appropriate for production applications because in this log level, database query plans are generated.</p>
<p>At the more verbose log levels (<code dir="ltr">TTLOG_INFO</code> and <code dir="ltr">TTLOG_DEBUG</code>), so much log data is generated that application performance is adversely affected. Do not use these log levels in a production environment.</p>
<p>Although TTClasses logging can print to either <code dir="ltr">stdout</code> or <code dir="ltr">stderr</code>, the best approach is to write directly to a TTClasses log file. <a href="#i86125">Example 2-16</a> demonstrates how to print TTClasses log information at log level <code dir="ltr">TTLOG_WARN</code> into the <code dir="ltr">/tmp/ttclasses.log</code> output file.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
TTClasses logging is disabled by default.</div>
<div id="TTCLS138" class="example">
<p class="titleinexample"><a id="i86125"></a>Example 2-16 Printing TTClasses log information</p>
<pre dir="ltr">ofstream output;
output.open(&#34;/tmp/ttclasses.log&#34;);
TTGlobal::setLogStream(output);
TTGlobal::setLogLevel(TTLog::TTLOG_WARN);
</pre>
<p>First-time users of TTClasses should spend a little time experimenting with TTClasses logging to see how errors are printed at log level <code dir="ltr">TTLOG_ERROR</code> and how much information is generated at log levels <code dir="ltr">TTLOG_INFO</code> and <code dir="ltr">TTLOG_DEBUG</code>.</p>
<p>See <a href="description.htm#i95316">&#34;TTGlobal&#34;</a> for more information about using the <code dir="ltr">TTGlobal</code> class for logging.</p>
</div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="i82212"></a>
<div id="TTCLS139" class="sect1">
<h2 class="sect1">Using T<a id="sthref136"></a><a id="sthref137"></a>TClasses XLA</h2>
<p>The Transaction Log API (XLA) is a set of functions that enable you to implement applications that monitor TimesTen for changes to specified database tables and receive real-time notification of these changes.</p>
<p>The primary purpose of XLA is as a high-performance, asynchronous alternative to triggers.</p>
<p>XLA returns notification of changes to specific tables in the database and information about the transaction boundaries for those database changes. This section shows how to acknowledge updates only at transaction boundaries (a common requirement for XLA applications), using one example that does not use and one example that does use transaction boundaries.</p>
<p>This section covers the following topics:</p>
<ul>
<li>
<p><a href="#CDEIECAH">Acknowledging XLA updates without using transaction boundaries</a></p>
</li>
<li>
<p><a href="#CDEBFJJA">Acknowledging XLA updates at transaction boundaries</a></p>
</li>
<li>
<p><a href="#CDEBFEHD">Access control impact on XLA</a></p>
</li>
</ul>
<p>For additional information about XLA, see <a class="olink TTCDV246" href="../TTCDV/xla_event.htm#TTCDV246">&#34;XLA and TimesTen Event Management&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database C Developer&#39;s Guide</span>. In addition, the TTClasses Quick Start demos provide XLA demos. See <a href="compiling.htm#BCGGJCJF">&#34;About the TimesTen TTClasses demos&#34;</a>.</p>
<div class="infobox-note">
<p class="notep1">Important:</p>
<ul>
<li>
<p>As noted in <a href="compiling.htm#BCGEIJGG">&#34;Considerations when using an ODBC driver manager (Windows)&#34;</a>, XLA functionality cannot be used in an application connected to an ODBC driver manager.</p>
</li>
<li>
<p>If an XLA bookmark becomes stuck, which can occur if an XLA application terminates unexpectedly or disconnects without first deleting its bookmark or disabling change tracking, there may be an excessive accumulation of transaction log files. This accumulation may result in disk space being filled. For information about monitoring and addressing this situation, see <a class="olink TTOPR711" href="../TTOPR/trans.htm#TTOPR711">&#34;Monitoring accumulation of transaction log files&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span>.</p>
</li>
</ul>
</div>
<div class="infobox-note">
<p class="notep1">No<a id="sthref138"></a><a id="sthref139"></a>tes:</p>
<ul>
<li>
<p>You can subscribe to tables containing LOB columns, but information about the LOB value itself is unavailable.</p>
</li>
<li>
<p>Columns containing LOBs are reported as empty (zero length) or null (if the value is actually <code dir="ltr">NULL</code>). In this way, you can tell the difference between a null column and a non-null column.</p>
</li>
<li>
<p>An XLA reader cannot subscribe to a table that uses in-memory columnar compression.</p>
</li>
</ul>
</div>
<a id="CDEIECAH"></a>
<div id="TTCLS141" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Ackn<a id="sthref140"></a><a id="sthref141"></a><a id="sthref142"></a>owledging XLA updates without using transaction boundaries</h3>
<p><a href="#i86124">Example 2-17</a> below shows basic usage of XLA, without using transaction boundaries.</p>
<p>Inside the <code dir="ltr">HandleChange()</code> method, depending on whether the record is an insert, update, or delete, the appropriate method from among the following is called: <code dir="ltr">HandleInsert()</code>, <code dir="ltr">HandleUpdate()</code>, or <code dir="ltr">HandleDelete()</code>.</p>
<p>It is inside <code dir="ltr">HandleChange()</code> that you can access the flag that indicates whether the XLA record is the last record in a particular transaction. Thus there is no way in the <a href="#i86124">Example 2-17</a> loop for the <code dir="ltr">HandleChange()</code> method to pass the information about the transaction boundary to the loop, so that this information can influence when to call <code dir="ltr">conn.ackUpdates()</code>.</p>
<p>This is not an issue under typical circumstances of only a few records per transaction. Usually only a few records are returned when you ask XLA to return at most 1000 records with a <code dir="ltr">fetchUpdatesWait()</code> call. XLA returns records as quickly as it can, and even if huge numbers of transactions are occurring in the database, you usually can pull the XLA records out quickly, a few at a time, and XLA makes sure that the last record returned is on a transaction boundary. For example, if you ask for 1000 records from XLA but only 15 are returned, it is highly probable that the 15th record is at the end of a transaction.</p>
<p>XLA guarantees one of the following:</p>
<ul>
<li>
<p>A batch of records ends with a completed transaction (perhaps multiple transactions in a single batch of XLA records).</p>
</li>
</ul>
<p>Or:</p>
<ul>
<li>
<p>A batch of records contains a partial transaction, with no completed transactions in the same batch, and subsequent batches of XLA records are returned for that single transaction until its transaction boundary has been reached.</p>
</li>
</ul>
<div id="TTCLS142" class="example">
<p class="titleinexample"><a id="i86124"></a>Example 2-17 TTClasses XLA program</p>
<p>This example shows a typical main loop of a TTClasses XLA program. (It also assumes a signal handler is in place.)</p>
<pre dir="ltr">TTXlaPersistConnection conn; // XLA connection
TTXlaTableList list(&amp;conn); // tables being monitored
ttXlaUpdateDesc_t ** arry; // pointer to returned XLA records
int records_fetched;
// ...

while (!signal_received) {
  // fetch the updates
  conn.fetchUpdatesWait(&amp;arry, MAX_RECS_TO_FETCH, &amp;records_fetched, ...); 

  // Interpret the updates
  for(j=0;j &lt; records_fetched;j++){
    ttXlaUpdateDesc_t *p;
    p = arry[j];
    list.HandleChange(p, NULL);
  } // end for each record fetched

  // periodically call ackUpdates()
  if (/* some condition is reached */) {
    conn.ackUpdates(); 
  }
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CDEBFJJA"></a>
<div id="TTCLS340" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Ackn<a id="sthref143"></a><a id="sthref144"></a><a id="sthref145"></a>owledging XLA updates at transaction boundaries</h3>
<p>XLA applications should verify whether the last record in a batch of XLA records is at a transaction boundary, and call <code dir="ltr">ackUpdates()</code> only on transaction boundaries. This way, when the application or system or database fails, the XLA bookmark is at the start of a transaction after the system recovers. This is especially important when operations involve a large number of rows. If a bulk insert, update, or delete operation has been performed on the database and the XLA application asks for 1000 records, it may or may not receive all 1000 records. The last record returned through XLA probably does <span class="italic">not</span> have the end-of-transaction flag. In fact, if the transaction has made changes to 10,000 records, then clearly a minimum of 10 blocks of 1000 XLA records must be fetched before reaching the transaction boundary.</p>
<p>Calling <code dir="ltr">ackUpdates()</code> for every transaction boundary is not recommended, however, because <code dir="ltr">ackUpdates()</code> is a relatively expensive operation. Users should balance overall system throughput with recovery time and disk space requirements. (Recall that a TimesTen transaction log file cannot be deleted by a checkpoint operation if XLA has a bookmark that references that log file. See <a class="olink TTREF261" href="../TTREF/proced.htm#TTREF261">&#34;ttLogHolds&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Reference</span> for related information.) Depending on system throughput, recovery time, and disk space requirements, some applications may find it appropriate to call <code dir="ltr">ackUpdates()</code> once or several times per minute, while other applications may need only call it once or several times per hour.</p>
<p>The <code dir="ltr">HandleChange()</code> method has a second parameter to allow passing information between <code dir="ltr">HandleChange()</code> and the main XLA loop. Compare <a href="#i86124">Example 2-17</a> above with <a href="#i86123">Example 2-18</a>, specifically the <code dir="ltr">do_acknowledge</code> setting and the <code dir="ltr">&amp;do_acknowledge</code> parameter of the <code dir="ltr">HandleChange()</code> call.</p>
<div id="TTCLS143" class="example">
<p class="titleinexample"><a id="i86123"></a>Example 2-18 TTClasses XLA program using transaction boundaries</p>
<p>In this example, <code dir="ltr">ackUpdates()</code> is called only when the <code dir="ltr">do_acknowledge</code> flag indicates that this batch of XLA records is at a transaction boundary. (The example also assumes a signal handler is in place.)</p>
<pre dir="ltr">TTXlaPersistConnection conn; // XLA connection
TTXlaTableList list(&amp;conn); // tables being monitored
ttXlaUpdateDesc_t ** arry; // ptr to returned XLA recs
int records_fetched;
int do_acknowledge;
int j;

// ...
while (!signal_received) {
  // fetch the updates
  conn.fetchUpdatesWait(&amp;arry, MAX_RECS_TO_FETCH, &amp;records_fetched, ...); 

  do_acknowledge = FALSE;

  // Interpret the updates
  for(j=0;j &lt; records_fetched;j++){
    ttXlaUpdateDesc_t *p;
    p = arry[j];
    list.HandleChange(p, &amp;do_acknowledge);
  } // end for each record fetched

  // periodically call ackUpdates()
  if (do_acknowledge == TRUE  /* and some other conditions ... */ ) {
    conn.ackUpdates();
  }
}
</pre>
<p>In addition to this change to the XLA main loop, the <code dir="ltr">HandleChange()</code> method must be overloaded to have two parameters <code dir="ltr">(ttXlaUpdateDesc_t*, void*</code> <code dir="ltr"><span class="codeinlineitalic">pData</span></code><code dir="ltr">)</code>. See <a href="description.htm#i103631">&#34;HandleChange()&#34;</a>. The Quick Start <code dir="ltr">xlasubscriber1</code> demo shows the use of a <code dir="ltr"><span class="codeinlineitalic">pData</span></code> parameter. (See <a href="compiling.htm#BCGGJCJF">&#34;About the TimesTen TTClasses demos&#34;</a>.)</p>
</div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CDEBFEHD"></a>
<div id="TTCLS374" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Ac<a id="sthref146"></a><a id="sthref147"></a>cess control impact on XLA</h3>
<p><a href="#CDEHEBFE">&#34;Considering TimesTen features for access control&#34;</a> provides a brief overview of how TimesTen access control affects operations in the database. Access control impacts XLA.</p>
<p>The system privilege <code dir="ltr">XLA</code> is required for any XLA functionality, such as connecting to TimesTen (which also requires the <code dir="ltr">CREATE SESSION</code> privilege) as an XLA reader, executing XLA-related TimesTen C functions, and executing XLA-related TimesTen built-in procedures.</p>
<p>You can refer to <a class="olink TTCDV262" href="../TTCDV/xla_event.htm#TTCDV262">&#34;Access control impact on XLA&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database C Developer&#39;s Guide</span> for additional details.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
A user with the <code dir="ltr">XLA</code> privilege can be notified of any DML statement that executes in the database. As a result, the user with <code dir="ltr">XLA</code> privilege can obtain information about database objects that he or she has not otherwise been granted access to. In practical terms, the <code dir="ltr">XLA</code> privilege is effectively the same as the <code dir="ltr">SELECT ANY TABLE</code>, <code dir="ltr">SELECT ANY VIEW</code>, and <code dir="ltr">SELECT ANY SEQUENCE</code> privileges.</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2182">
<tr>
<td class="cellalignment2191">
<table class="cellalignment2187">
<tr>
<td class="cellalignment2186"><a href="compiling.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2186"><a href="description.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2006, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2193">
<table class="cellalignment2185">
<tr>
<td class="cellalignment2186"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2186"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2186"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2186"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2186"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2186"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>