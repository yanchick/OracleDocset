<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-91722"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Deployment%C2%A0Templates%20Concepts%20and%20Architecture"></a><title>Deployment&nbsp;Templates Concepts and Architecture</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1042"/>
<meta name="dcterms.created" content="2015-02-06T8:21:52Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="Database Advanced Replication"/>
<meta name="dcterms.identifier" content="E53117-02"/>
<meta name="dcterms.isVersionOf" content="REPLN"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="repmview.htm" title="Previous" type="text/html"/>
<link rel="Next" href="repconflicts.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E53117-02.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">10/15</span> <!-- End Header -->
<div id="REPLN004" class="chapter"><a id="g49875"></a> <a id="i27807"></a>
<h1 class="chapter"><span class="secnum">4</span> Deployment&nbsp;Templates Concepts and Architecture</h1>
<p><a id="sthref694"></a><a id="sthref695"></a><a id="sthref696"></a>This chapter introduces deployment templates and describes how to use them to easily and efficiently distribute materialized view environments.</p>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#i22658">Mass Deployment Challenge</a></p>
</li>
<li>
<p><a href="#i22673">Oracle Deployment Templates Concepts</a></p>
</li>
<li>
<p><a href="#i22677">Deployment Template Architecture</a></p>
</li>
<li>
<p><a href="#i17891">Deployment Template Design</a></p>
</li>
<li>
<p><a href="#i22696">Local Control of Materialized View Creation</a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
Read <a href="repmview.htm#i34980">Chapter 3, &#34;Materialized View Concepts and Architecture&#34;</a> before you create a deployment template. Understanding materialized views better prepares you to build deployment templates.</div>
<a id="i22658"></a>
<div id="REPLN361" class="sect1">
<h2 class="sect1">Mass Deployment Challenge<a id="sthref697"></a><a id="sthref698"></a></h2>
<p>Oracle deployment templates provide you with the tools to efficiently deploy and administer a widely distributed materialized view environment. Before learning about the concepts, architecture, and use of deployment templates, consider the challenges of a mass deployment environment.</p>
<p>The need to have accurate information at any time and at any place continues to grow rapidly. At the same time, information is becoming decentralized and users are often disconnected from the network, requiring the information to be distributed to the active points-of-usage.</p>
<p>Consider the mobile sales force. Potentially hundreds, if not thousands, of professionals need accurate information about their customers on a laptop in a manner that causes the salesperson very little inconvenience. The challenge, therefore, is for the database administrator to roll out the data and the database infrastructure (tables, indexes, constraints, triggers, and so on) to all sites in an efficient and timely manner.</p>
<p>Traditionally, DBAs have been required to develop a deployment method of their own. Typically, the DBA was responsible for developing a very complex script to create the materialized view environment at the remote materialized view site. In addition to building the script, the DBA was often forced to customize data sets at the materialized view site. After the DBA completed engineering the script, deploying the script required manual packaging and implementation, both of which often required extensive troubleshooting.</p>
<p>The problems encountered in the preceding scenario have spawned technologies and resources dedicated to the art of efficient mass deployment. Mass deployment is the term used to describe the process of distributing database infrastructure, data, and front-end applications to a large number of users. For the purposes of Advanced Replication, the discussion of mass deployment is limited to the delivery of data and data infrastructure.</p>
<a id="CIHDEFDC"></a>
<div id="REPLN362" class="sect2">
<h3 class="sect2">Deployment Templates and the Mass Deployment Goal</h3>
<p>Mass deployment tools and technologies should aid the database administrator in delivering the data and database infrastructure. The goal is to define the environment once and create as many instances of the deployment template as necessary, while still maintaining the ability to customize individual sites.</p>
<p>To support this goal, Oracle&#39;s deployment templates enable you accomplish the following objectives:</p>
<p class="subhead2"><a id="REPLN363"></a>Define the materialized view environment once</p>
<p>You define the structure of a materialized view environment once using a deployment template so that each user (site) receives the database infrastructure to support the front-end application.</p>
<p class="subhead2"><a id="REPLN364"></a>Customize materialized view sites individually</p>
<p>You use deployment template parameters to customize each materialized view environment so that each user receives the particular data subset needed.</p>
<p>Mass deployment has many applications, such as distributing information to mobile sales forces, field technicians, retail stores, remote inventory collection sites, and so on. Such environments use deployment templates to build the database infrastructure at the remote site, largely because deployment templates support data subsetting, disconnected replication, and lower resource requirements, making them ideal for laptop users.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i22673"></a>
<div id="REPLN365" class="sect1">
<h2 class="sect1">Oracle Deployment Templates Concepts<a id="sthref699"></a></h2>
<p>Oracle offers deployment templates to allow the database administrator to <span class="bold">package</span> a materialized view environment for easy, custom, and secure deployment. Packaging a deployment template is the process of defining the materialized view environment that will be created by the deployment template. Packaging a deployment template prepares it for <span class="bold">instantiation</span> at the remote materialized view site. Instantiation creates the materialized view site objects and populates the materialized views with data.</p>
<p>A deployment template can be as simple as a single materialized view with a fixed data set, or as complex as hundreds of materialized views with a dynamic data set based on one or more variables. Deployment template features include the following:</p>
<ul>
<li>
<p>Centralized control</p>
</li>
<li>
<p>Ability to repeatedly deploy a materialized view environment</p>
</li>
<li>
<p>Template parameters that allow data subsetting or customization at remote site</p>
</li>
<li>
<p>Authorized user lists to control template instantiation and data access</p>
</li>
</ul>
<p>To prepare a materialized view environment for deployment, create a deployment template at the master site. This template stores all of the information needed to deploy a materialized view environment, including the data definition language (DDL) to create the objects at the remote site and the target refresh group. This template also maintains links to user security information and template parameters for custom materialized view creation.</p>
<p>This section contains these topics:</p>
<ul>
<li>
<p><a href="#CIHDEFDC">Deployment Templates and the Mass Deployment Goal</a></p>
</li>
<li>
<p><a href="#CIHDJGGJ">Deployment Template Elements</a></p>
</li>
<li>
<p><a href="#i27111">Deployment Template Packaging and Instantiation</a></p>
</li>
</ul>
<a id="CIHDJGGJ"></a>
<div id="REPLN366" class="sect2">
<h3 class="sect2">Deployment Template Elements<a id="sthref700"></a></h3>
<p>Each deployment template contains the &#34;blueprint&#34; for creating the necessary materialized views and related objects at a materialized view site. Specifically, you create the deployment template at the master site, adding the necessary materialized views, triggers, views, and so on to the template as needed to create the materialized view environment. You can optionally define template parameters and authorized users, giving the template greater flexibility and security during the instantiation process.</p>
<p>Deployment template elements can be divided into the following four categories:</p>
<ul>
<li>
<p><a href="#i18215">General Template Information</a></p>
</li>
<li>
<p><a href="#i24250">Template Object Definitions</a></p>
</li>
<li>
<p><a href="#i15773">Template Parameters</a></p>
</li>
<li>
<p><a href="#i24257">User Authorization</a></p>
</li>
</ul>
<a id="i18215"></a>
<div id="REPLN367" class="sect3">
<h4 class="sect3">General Template Information<a id="sthref701"></a></h4>
<p>Oracle deployment templates use the general template information, which consists of the template name, target refresh group, and private/public status. As illustrated in <a href="#i18376">Figure 4-1</a>, the <code dir="ltr">REFRESH_TEMPLATE_NAME</code> is used in all aspects of deployment template data dictionary views. You add the materialized view environment objects to the template before releasing the template for distribution according to the specified template identification (see <a href="#i19192">Figure 4-2</a>).</p>
<p>A deployment template is defined at a single master site. While you cannot have two deployment templates at the master site with the same name, you can copy a deployment template to another site using the same deployment template name.</p>
<div id="REPLN368" class="figure">
<p class="titleinfigure"><a id="i18376"></a>Figure 4-1 Deployment Template View Relationships</p>
<img width="600" height="448" src="img/repln059.gif" alt="Description of Figure 4-1 follows"/><br/>
<a id="sthref702" href="img_text/repln059.htm">Description of &#34;Figure 4-1 Deployment Template View Relationships&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<div id="REPLN369" class="figure">
<p class="titleinfigure"><a id="i19192"></a>Figure 4-2 Deployment Template Elements Added to Template</p>
<img width="600" height="544" src="img/repln058.gif" alt="Description of Figure 4-2 follows"/><br/>
<a id="sthref703" href="img_text/repln058.htm">Description of &#34;Figure 4-2 Deployment Template Elements Added to Template&#34;</a><br/>
<br/></div>
<!-- class="figure" --></div>
<!-- class="sect3" -->
<a id="i24250"></a>
<div id="REPLN370" class="sect3">
<h4 class="sect3">Template Object Definitions<a id="sthref704"></a></h4>
<p>After the template has been defined, add objects to the template. When the template is instantiated at the materialized view site, the object DDL (that is, <code dir="ltr">CREATE</code> <code dir="ltr">MATERIALIZED</code> <code dir="ltr">VIEW</code>, <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code>, and so on) is executed to create the appropriate objects at the materialized view site.</p>
<p>You can add objects to a deployment template that are based on a existing master objects, but if necessary, you can create a template object by defining DDL to create the object. Oracle checks any new object DDL to ensure that it is lexically correct, which prevents the execution of faulty DDL. Updatable materialized views added to a deployment template must be based on a table in a master group, but other objects, such as read-only materialized views, can be based on objects that are not in master groups.</p>
<p>In most cases, you add materialized views to the template, but if necessary, you can add other objects. For example, constraints can be added to enforce data integrity at the materialized view site, views can be added for displaying data, or tables can be added for local data storage. In some cases, you might even include all objects for an application in a deployment template. Materialized views created using a deployment template are automatically added to the refresh group defined for the template.</p>
<p><a id="sthref705"></a><a id="sthref706"></a><a id="sthref707"></a>You cannot use deployment templates to instantiate the following types of objects:</p>
<ul>
<li>
<p>User-defined types</p>
</li>
<li>
<p>User-defined type bodies</p>
</li>
<li>
<p>User-defined operators</p>
</li>
<li>
<p>Indextypes</p>
</li>
</ul>
<p>Nor can you use deployment templates to instantiate any objects based on these types of objects.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i18215">&#34;General Template Information&#34;</a> for more information about the refresh group</div>
</div>
<!-- class="sect3" -->
<a id="i15773"></a>
<div id="REPLN371" class="sect3">
<h4 class="sect3">Template Parameters<a id="sthref708"></a><a id="sthref709"></a></h4>
<p>If each target materialized view site requires a data set unique to its site, then you can define variables in the object DDL. These variables create a parameterized template that allows for custom data sets when the template is instantiated, allowing different materialized view sites to have different data sets. These parameters are embedded in the object DDL. During template instantiation, the individual user values for these parameters are substituted.</p>
<p>Oracle enables you to specify default values and user-specific parameter values for a template. You can enter the parameter values during the creation of the deployment template or after the template is created, but you must enter the parameter values before the template is instantiated. Users cannot enter values for parameters during instantiation.</p>
<p>If user-specific parameter values exist, then these values are automatically used when the specified user instantiates the template. For example, consider the variable <code dir="ltr">region</code>. Suppose you establish the following user-specific parameter values for template <code dir="ltr">sales_temp</code>:</p>
<div class="inftblinformal">
<table class="cellalignment5774" title="Users and Regions" summary="This table shows two users in different regions." dir="ltr">
<thead>
<tr class="cellalignment5765">
<th class="cellalignment5775" id="r1c1-t4">User</th>
<th class="cellalignment5775" id="r1c2-t4">Region</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5765">
<td class="cellalignment5771" id="r2c1-t4" headers="r1c1-t4">fay</td>
<td class="cellalignment5771" headers="r2c1-t4 r1c2-t4">east</td>
</tr>
<tr class="cellalignment5765">
<td class="cellalignment5771" id="r3c1-t4" headers="r1c1-t4">baer</td>
<td class="cellalignment5771" headers="r3c1-t4 r1c2-t4">west</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p>The defining <code dir="ltr">SELECT</code> statement for the materialized view is the following:</p>
<pre dir="ltr">SELECT cust_id, sales_to_date, status FROM table_x WHERE region_id=:region;
</pre>
<p>When users fay and baer instantiate template <code dir="ltr">sales_temp</code>, their resulting materialized view data sets are the following:</p>
<div class="inftblinformal">
<table class="cellalignment5774" title="Regions and Materialized View Data" summary="This table shows two users with customer information specific to the user&rsquo;s region." dir="ltr">
<thead>
<tr class="cellalignment5765">
<th class="cellalignment5775" id="r1c1-t5" colspan="2">User fay</th>
<th class="cellalignment5775" id="r1c2-t5">-</th>
<th class="cellalignment5775" id="r1c3-t5" colspan="2">User baer</th>
</tr>
<tr class="cellalignment5765">
<th class="cellalignment5775" id="r2c1-t5" headers="r1c1-t5">cust_id</th>
<th class="cellalignment5775" id="r2c2-t5" headers="r2c1-t5 r1c1-t5 r1c2-t5">region</th>
<th class="cellalignment5775" id="r2c3-t5" headers="r2c1-t5 r1c3-t5">-</th>
<th class="cellalignment5775" id="r2c4-t5" headers="r2c1-t5 r1c3-t5">cust_id</th>
<th class="cellalignment5775" id="r2c5-t5" headers="r2c1-t5">region</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5765">
<td class="cellalignment5771" id="r3c1-t5" headers="r1c1-t5 r2c1-t5">a123</td>
<td class="cellalignment5771" headers="r3c1-t5 r1c1-t5 r1c2-t5 r2c2-t5">east</td>
<td class="cellalignment5771" headers="r3c1-t5 r1c3-t5 r2c3-t5">-</td>
<td class="cellalignment5771" headers="r3c1-t5 r1c3-t5 r2c4-t5">b123</td>
<td class="cellalignment5771" headers="r3c1-t5 r2c5-t5">west</td>
</tr>
<tr class="cellalignment5765">
<td class="cellalignment5771" id="r4c1-t5" headers="r1c1-t5 r2c1-t5">a234</td>
<td class="cellalignment5771" headers="r4c1-t5 r1c1-t5 r1c2-t5 r2c2-t5">east</td>
<td class="cellalignment5771" headers="r4c1-t5 r1c3-t5 r2c3-t5">-</td>
<td class="cellalignment5771" headers="r4c1-t5 r1c3-t5 r2c4-t5">b234</td>
<td class="cellalignment5771" headers="r4c1-t5 r2c5-t5">west</td>
</tr>
<tr class="cellalignment5765">
<td class="cellalignment5771" id="r5c1-t5" headers="r1c1-t5 r2c1-t5">a345</td>
<td class="cellalignment5771" headers="r5c1-t5 r1c1-t5 r1c2-t5 r2c2-t5">east</td>
<td class="cellalignment5771" headers="r5c1-t5 r1c3-t5 r2c3-t5">-</td>
<td class="cellalignment5771" headers="r5c1-t5 r1c3-t5 r2c4-t5">b345</td>
<td class="cellalignment5771" headers="r5c1-t5 r2c5-t5">west</td>
</tr>
<tr class="cellalignment5765">
<td class="cellalignment5771" id="r6c1-t5" headers="r1c1-t5 r2c1-t5">a456</td>
<td class="cellalignment5771" headers="r6c1-t5 r1c1-t5 r1c2-t5 r2c2-t5">east</td>
<td class="cellalignment5771" headers="r6c1-t5 r1c3-t5 r2c3-t5">-</td>
<td class="cellalignment5771" headers="r6c1-t5 r1c3-t5 r2c4-t5">b456</td>
<td class="cellalignment5771" headers="r6c1-t5 r2c5-t5">west</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="sect3" -->
<div id="REPLN372" class="sect3"><a id="sthref710"></a>
<h4 class="sect3">Template Parameters in the WHERE Clause and Security<a id="sthref711"></a><a id="sthref712"></a><a id="sthref713"></a><a id="sthref714"></a></h4>
<p>In addition to creating customized data subsets, you can use template parameters in the <code dir="ltr">WHERE</code> clause of a <code dir="ltr">CREATE</code> <code dir="ltr">MATERIALIZED</code> <code dir="ltr">VIEW</code> statement to securely limit the materialized view site to viewing and changing only the data that satisfies the <code dir="ltr">WHERE</code> clause. For example, suppose you have specified the following for the <code dir="ltr">region</code> parameter in the user specific parameters list:</p>
<div class="inftblinformal">
<table class="cellalignment5774" title="Users and Regions" summary="This table shows two users in different regions." dir="ltr">
<thead>
<tr class="cellalignment5765">
<th class="cellalignment5775" id="r1c1-t6">User</th>
<th class="cellalignment5775" id="r1c2-t6">Region</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5765">
<td class="cellalignment5771" id="r2c1-t6" headers="r1c1-t6">fay</td>
<td class="cellalignment5771" headers="r2c1-t6 r1c2-t6">east</td>
</tr>
<tr class="cellalignment5765">
<td class="cellalignment5771" id="r3c1-t6" headers="r1c1-t6">baer</td>
<td class="cellalignment5771" headers="r3c1-t6 r1c2-t6">west</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" -->
<p>Users accessing the materialized view instantiated by user <code dir="ltr">fay</code> only see data for region <code dir="ltr">east</code> and can only view, update, or delete data that complies with this <code dir="ltr">WHERE</code> clause. In other words, a user of this materialized view cannot view, update, or delete data for region <code dir="ltr">west</code>, because the materialized view only contains data for region <code dir="ltr">east</code>.</p>
</div>
<!-- class="sect3" -->
<a id="i24257"></a>
<div id="REPLN373" class="sect3">
<h4 class="sect3">User Authorization<a id="sthref715"></a></h4>
<p>Deployment templates can be either public or private. You set this when you create the template. If a template is public, then any user with access to the master site can instantiate the template.</p>
<p>If a template has been created for private use, then only authorized users can instantiate the target template. To enforce private use, create a list of authorized users at the master site. If an unauthorized user attempts to instantiate the target template, then the instantiation process fails.</p>
</div>
<!-- class="sect3" -->
<div id="REPLN374" class="sect3"><a id="sthref716"></a>
<h4 class="sect3">Deployment Sites<a id="sthref717"></a><a id="sthref718"></a></h4>
<p>Maintaining the emphasis on centralized control, you can monitor and manage certain characteristics of the instantiated environment at the remote materialized view site. Specifically, you have the ability to view the sites that have instantiated a deployment template, which includes the deployment template name, authorized user, and status of the instantiated environment.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i27111"></a>
<div id="REPLN375" class="sect2">
<h3 class="sect2">Deployment Template Packaging and Instantiation<a id="sthref719"></a><a id="sthref720"></a><a id="sthref721"></a><a id="sthref722"></a></h3>
<p>When you have completed defining your deployment template, the template must be packaged to prepare it for instantiation at the remote materialized view site. When the packaged deployment template is instantiated at a materialized view site, the materialized view site objects are created and the materialized views are populated with data. Remote materialized view sites can be created either through online or offline instantiation.</p>
<div id="REPLN376" class="sect3"><a id="sthref723"></a>
<h4 class="sect3">Online Instantiation<a id="sthref724"></a></h4>
<p><span class="glossaryterm">Online instantiation</span> allows a materialized view site to instantiate a deployment template while connected to the target master site. During the online instantiation process, the structure of the materialized view site is created, and the specified data subset is pulled from the master site and stored in the appropriate materialized views.</p>
<div id="REPLN377" class="figure">
<p class="titleinfigure"><a id="sthref725"></a>Figure 4-3 Online Instantiation</p>
<img width="600" height="112" src="img/repln060.gif" alt="Description of Figure 4-3 follows"/><br/>
<a id="sthref726" href="img_text/repln060.htm">Description of &#34;Figure 4-3 Online Instantiation&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>Packaging a deployment template for online instantiation means generating a script file that, when run at the materialized view site, creates the materialized view objects and connects to the master site to populate the materialized views with data. SQL statements such as <code dir="ltr">CREATE</code> <code dir="ltr">MATERIALIZED</code> <code dir="ltr">VIEW</code> <code dir="ltr">...</code> <code dir="ltr">AS</code> <code dir="ltr">SELECT</code> are used to populate the materialized views with data over a network from the master site.</p>
<p>One of the benefits of online instantiation is that the data subset is current as of the instantiation process. This data currency, however, comes at a cost. Online instantiation requires a &#34;live&#34; connection between the materialized view and master sites, which, depending on the size of the materialized view environment created, might increase network traffic.</p>
<p>Furthermore, laptop users connected by a modem might need to stay connected for a long time. The duration of the connection depends on the number of objects created, the complexity of the materialized view subqueries, and the amount of data transmitted, especially over low bandwidth modem lines.</p>
</div>
<!-- class="sect3" -->
<div id="REPLN378" class="sect3"><a id="sthref727"></a>
<h4 class="sect3">Offline Instantiation<a id="sthref728"></a></h4>
<p>To decrease server loads during peak usage periods and reduce remote connection times, you can choose <span class="glossaryterm">offline instantiation</span> of the template for your environment. Packaging a template for offline instantiation means generating a script or a binary file that contains the DDL and data manipulation language (DML) to build the materialized view environment defined in the deployment template and populate the environment with data. You package the script or binary file and save the file to some type of storage media (such as tape, CD-ROM, and so on), and then provide a means of transferring the script or binary file to the materialized view site. Each materialized view site requires a separate offline instantiation script.</p>
<p>When you package a template for instantiation, the materialized view logs for each master table on which a materialized view is based in the template begin to log changes. The materialized view log for a particular master table does not clear these changes until every materialized view based on the master table refreshes after instantiation. Therefore, to prevent the materialized view log from growing large, the template should be instantiated, and the materialized views should be refreshed as soon as possible after packaging.</p>
<p>During instantiation, the template and data are pulled from the storage media, instead of being pulled from the master site. This operation has the benefit of reducing network traffic and eliminating the need for a constant network connection. However, after instantiation, the data in the materialized view site reflects the master site data at packaging time and must be made current by a refresh.</p>
<div id="REPLN379" class="figure">
<p class="titleinfigure"><a id="sthref729"></a>Figure 4-4 Offline Instantiation</p>
<img width="600" height="112" src="img/repln061.gif" alt="Description of Figure 4-4 follows"/><br/>
<a id="sthref730" href="img_text/repln061.htm">Description of &#34;Figure 4-4 Offline Instantiation&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>Offline instantiation is an ideal solution for mass deployment situations where many laptops and other disconnected computers are instantiating the target template.</p>
<div id="REPLN380" class="sect4"><a id="sthref731"></a>
<h5 class="sect4">Offline Instantiation of Multitier Materialized Views</h5>
<p>When you use deployment templates to create a materialized view site using offline instantiation, the conflict resolution methods defined on the master tables are not pulled down to the materialized view site. These conflict resolution methods might be required to ensure data consistency if you plan to create materialized views based on this materialized view site (multitier materialized views). If you use online instantiation, then the conflict resolution methods are pulled down during instantiation.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<div id="REPLN381" class="sect3"><a id="sthref732"></a>
<h4 class="sect3">Scenarios for Instantiating a Deployment Template<a id="sthref733"></a></h4>
<p><a href="#g45306">Table 4-1</a> summarizes the scenarios for instantiating of a deployment template.</p>
<div id="REPLN382" class="tblruleformal">
<p class="titleintable"><a id="sthref734"></a><a id="g45306"></a>Table 4-1 Scenarios for Instantiating a Deployment Template</p>
<table class="cellalignment5774" title="Scenarios for Instantiating a Deployment Template" summary="This table lists scenarios for instantiating a deployment template for online and offline instantiations." dir="ltr">
<thead>
<tr class="cellalignment5765">
<th class="cellalignment5775" id="r1c1-t7">Type of Instantiation</th>
<th class="cellalignment5775" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5765">
<td class="cellalignment5771" id="r2c1-t7" headers="r1c1-t7">
<p>Offline</p>
</td>
<td class="cellalignment5771" headers="r2c1-t7 r1c2-t7">
<p>The user runs the offline instantiation script with SQL*Plus. The offline instantiation script contains both <code dir="ltr">CREATE</code> statements to create materialized view site objects and <code dir="ltr">INSERT</code> statements to populate the materialized views with data.</p>
</td>
</tr>
<tr class="cellalignment5765">
<td class="cellalignment5771" id="r3c1-t7" headers="r1c1-t7">
<p>Online</p>
</td>
<td class="cellalignment5771" headers="r3c1-t7 r1c2-t7">
<p>The user runs the online instantiation script with SQL*Plus. The online instantiation script contains <code dir="ltr">CREATE</code> statements to create materialized view site objects. When materialized view objects are created, the online instantiation script connects to the master site and uses <code dir="ltr">CREATE</code> <code dir="ltr">MATERIALIZED</code> <code dir="ltr">VIEW</code> <code dir="ltr">...</code> <code dir="ltr">AS</code> <code dir="ltr">SELECT</code> statements to create the materialized views and populate them with data.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblruleformal" -->
<p>Either you (the DBA) or the target user can package the deployment template. Either use the Advanced Replication interface&#39;s Create Deployment Template Wizard to package a template for offline instantiation, or the replication management API to package a template for offline or online instantiation. End-users use the public API to package a deployment template, while DBAs generally use the private API for packaging.</p>
<p>Typically, when a deployment template will be instantiated offline, the DBA performs the packaging, but when the deployment template will be instantiated online, the user can perform the packaging. However, there are no restrictions on users or DBAs performing either online or offline packaging, other than the use of different API calls.</p>
<p><a id="sthref735"></a>The following replication management API functions can package a deployment template.</p>
<p>Private functions (DBA only):</p>
<ul>
<li>
<p><code dir="ltr">DBMS_REPCAT_RGT.INSTANTIATE_OFFLINE</code> function</p>
</li>
<li>
<p><code dir="ltr">DBMS_REPCAT_RGT.INSTANTIATE_ONLINE</code> function</p>
</li>
</ul>
<p>Public functions:</p>
<ul>
<li>
<p><code dir="ltr">DBMS_REPCAT_INSTANTIATE.INSTANTIATE_OFFLINE</code> function</p>
</li>
<li>
<p><code dir="ltr">DBMS_REPCAT_INSTANTIATE.INSTANTIATE_ONLINE</code> function</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
<a id="sthref736"></a><a id="sthref737"></a>When you package a deployment template for offline instantiation, the related materialized view logs begin logging for the materialized views that were packaged in the template. This immediate logging enables the remote materialized view site to perform a fast refresh after completing the offline instantiation process. Monitor the materialized view logs to ensure that remote materialized view sites refresh quickly after performing an offline instantiation. Remote materialized view sites that have not refreshed cause the materialized view log to grow quite large, because logging begins when the template is packaged.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="repplan.htm#i15472">&#34;Preparing Materialized View Sites for Instantiation of Deployment Templates&#34;</a>, and see <a class="olink REPMA" href="../REPMA/toc.htm"><span class="italic">Oracle Database Advanced Replication Management API Reference</span></a> for information about the functions</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i22677"></a>
<div id="REPLN383" class="sect1">
<h2 class="sect1">Deployment Template Architecture<a id="sthref738"></a></h2>
<p>Oracle uses standard materialized view architecture with deployment templates to distribute materialized view environments quickly and effectively. Deployment templates use the same methods in creating materialized view definitions, refresh characteristics, conflict resolution, and grouping as used when manually building a materialized view environment. The distinction to remember is that instead of executing the DDL to create the object immediately, the object DDL is simply contained in a deployment template and is executed when the template is instantiated.</p>
<p>This section contains these topics:</p>
<ul>
<li>
<p><a href="#CIHIAIID">Template Definitions Stored in System Tables</a></p>
</li>
<li>
<p><a href="#i24457">Packaging and Instantiation Process</a></p>
</li>
<li>
<p><a href="#CIHGJIJI">After Instantiation</a></p>
</li>
</ul>
<a id="CIHIAIID"></a>
<div id="REPLN384" class="sect2">
<h3 class="sect2">Template Definitions Stored in System Tables<a id="sthref739"></a></h3>
<p>Instead of executing DDL at the materialized view site to immediately create a materialized view environment, the materialized view and other related object definitions are stored within the deployment template. After all of the object definitions have been added to the deployment template, the template can be instantiated to execute all of the stored DDL at the remote materialized view site, which creates the necessary materialized view environment.</p>
<p>All of these object definitions are stored in system tables maintained at the deployment template definition site, keyed on the deployment template name. When the deployment template is packaged, the stored object DDL is pulled from these system tables to create the instantiation script of binary file.</p>
<div id="REPLN385" class="sect3"><a id="sthref740"></a>
<h4 class="sect3">Use of Standard DDL<a id="sthref741"></a><a id="sthref742"></a><a id="sthref743"></a></h4>
<p>Template object definitions are created using the same DDL that is used to create the objects locally at the materialized view site. For example, you can issue the following statement to create a materialized view:</p>
<pre dir="ltr">CREATE MATERIALIZED VIEW hr.departments_mv 
      REFRESH FAST WITH PRIMARY KEY FOR UPDATE AS SELECT 
      department_id, department_name, manager_id, location_id
    FROM hr.departments@orc1.example.com;
</pre>
<p>To add this same materialized view to a deployment template, you can use the Advanced Replication interface&#39;s Create Deployment Template Wizard, or execute the <code dir="ltr">CREATE_TEMPLATE_OBJECT</code> function, as shown in the following example:</p>
<pre dir="ltr">DECLARE
   tempstring VARCHAR2(3000);
   a NUMBER;
BEGIN
   tempstring := &#39;CREATE MATERIALIZED VIEW hr.departments_mv 
      REFRESH FAST WITH PRIMARY KEY FOR UPDATE AS SELECT 
      department_id, department_name, manager_id, location_id
      FROM hr.departments@orc1.example.com&#39;;
   a := DBMS_REPCAT_RGT.CREATE_TEMPLATE_OBJECT (
           refresh_template_name =&gt; &#39;hr_refg_dt&#39;,
           object_name =&gt; &#39;departments_mv&#39;,
           object_type =&gt; &#39;MATERIALIZED VIEW&#39;,
           ddl_text =&gt; tempstring,
           master_rollback_seg =&gt; &#39;rbs&#39;);
END;
/
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
Do not place a terminating semicolon in the DDL statement inside the single quotation marks for the <code dir="ltr">ddl_text</code> parameter.</div>
<p>Executing the preceding function adds the materialized view definition to the deployment template named <code dir="ltr">dt_mviewenv</code>. When this particular materialized view is instantiated, the materialized view <code dir="ltr">mview_test</code> is created. In addition to creating materialized views, you can add table, trigger, procedure, index, and other object definitions to the deployment template.</p>
<p>Whenever you create a materialized view, always specify the schema name of the table owner in the query for the materialized view. In the preceding example, <code dir="ltr">hr</code> is specified as the owner of the <code dir="ltr">employees</code> table.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<code dir="ltr">DBMS_REPCAT_RGT.CREATE_TEMPLATE_OBJECT</code> in the <a class="olink REPMA106" href="../REPMA/rarrcatrgtpac.htm#REPMA106"><span class="variable">Oracle Database Advanced Replication Management API Reference</span></a> for information about using this function</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i24457"></a>
<div id="REPLN386" class="sect2">
<h3 class="sect2">Packaging and Instantiation Process<a id="sthref744"></a><a id="sthref745"></a></h3>
<p>When a deployment template is packaged in preparation for remote materialized view site instantiation, the template is being prepared for online or offline instantiation. The instantiation procedure creates the remote materialized view environment and populates the environment with data.</p>
<div id="REPLN387" class="sect3"><a id="sthref746"></a>
<h4 class="sect3">Packaging a Deployment Template for Online Instantiation<a id="sthref747"></a></h4>
<p>When a deployment template is packaged for online instantiation, the resulting DDL that is required to create the remote materialized view environment is generated and all template parameter substitutions are performed. Where this generated DDL is stored depends on the type of materialized view client.</p>
<p>The online instantiation script is stored locally on the hard drive of the computer from which replication management API is executed to package the template. If this computer is not the materialized view site computer, then the online instantiation file must be transferred to the materialized view site for online instantiation.</p>
</div>
<!-- class="sect3" -->
<div id="REPLN388" class="sect3"><a id="sthref748"></a>
<h4 class="sect3">Packaging a Deployment Template for Offline Instantiation<a id="sthref749"></a></h4>
<p>When a deployment template is packaged for offline instantiation, the DDL that is required to create the remote materialized view environment and the DML that is required to populate the environment with the data are both stored in a generated file. Also, during packaging, all template parameter substitutions are performed.</p>
<p>When a template is packaged, a script or binary file is created for offline instantiation and is saved to a storage device, such as hard disk, CD-ROM, tape, and so on. Either the Advanced Replication interface&#39;s Create Deployment Template Wizard or the replication management API can package a deployment template for offline instantiation.</p>
<p>The offline instantiation script is stored locally on the hard drive of the computer from which the request is made to package the template. If this computer is not the materialized view site computer, then the offline instantiation file must be transferred to the materialized view site for offline instantiation.</p>
<p>When the remote materialized view site instantiates the template, the script or binary file is executed from the storage media or from the local hard drive. This execution creates the materialized view environment and populates the environment according to the data set defined during the packaging process. Recall that any template parameters that define the data set for individual sites are defined during the packaging process.</p>
</div>
<!-- class="sect3" -->
<a id="i24470"></a>
<div id="REPLN389" class="sect3">
<h4 class="sect3">Online Instantiation<a id="sthref750"></a></h4>
<p>During the online instantiation process, the structure of the materialized view site is created, and the specified data subset is pulled from the master site and stored in the appropriate materialized views. Also, after the remote materialized view site begins the online instantiation process, Oracle evaluates the parameters that have been defined for the deployment template. Any values defined for these parameters are used when the object DDL in the template is executed so that custom data sets can be installed at the remote materialized view site. At the same time, the materialized views are registered at the master site, and the materialized view logs begin logging the changes to the master tables.</p>
<p>Two possible methods can define template parameter values: default parameter values and user parameter values. Oracle checks to see if these parameter values exist and then uses them according to the hierarchy:</p>
<ol>
<li>
<p>User Parameter Values</p>
</li>
<li>
<p>Default Parameter Values</p>
</li>
</ol>
<p>If user parameter values have been defined and a listed user is instantiating the template, then the user parameter values are used when instantiating the template. If no user parameter values have been defined, then Oracle uses the default parameter values. <a href="#i26991">Figure 4-5</a> shows the parameter checking process.</p>
<div id="REPLN390" class="figure">
<p class="titleinfigure"><a id="i26991"></a>Figure 4-5 Checking for Parameters During Online Instantiation</p>
<img width="600" height="304" src="img/repln062.gif" alt="Description of Figure 4-5 follows"/><br/>
<a id="sthref751" href="img_text/repln062.htm">Description of &#34;Figure 4-5 Checking for Parameters During Online Instantiation&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>After the parameters are checked, the objects created by the template are added to the refresh group specified when the template was created.</p>
</div>
<!-- class="sect3" -->
<div id="REPLN391" class="sect3"><a id="sthref752"></a>
<h4 class="sect3">Offline Instantiation<a id="sthref753"></a></h4>
<p>In a mass deployment environment, most materialized view environments use the offline instantiation method to create the necessary materialized view environment. When you package the deployment template, a script or binary file is created to store the DDL needed to create the materialized view environment, the parameter values used during the instantiation process, and the DML necessary to populate the materialized view environment with data.</p>
<p>The script or binary file can be copied to a CD-ROM, floppy disk, or other storage media or can be posted on a Web or FTP site to be downloaded to the remote materialized view site. It can also be transferred using the <code dir="ltr">DBMS_FILE_TRANSFER</code> package. The flexibility in delivery mechanisms allows you and your users to choose the most effective method for instantiating a deployment template.</p>
</div>
<!-- class="sect3" -->
<div id="REPLN392" class="sect3"><a id="sthref754"></a>
<h4 class="sect3">Packaging and Instantiation Options<a id="sthref755"></a><a id="sthref756"></a></h4>
<p>Various possibilities for deployment template packaging and instantiation are available. <a href="#g45345">Table 4-2</a> illustrates the possibilities, identifies the mechanism for packaging and instantiation, and lists the documentation to use when you perform an operation.</p>
<div id="REPLN393" class="tblruleformalwidemax">
<p class="titleintable"><a id="sthref757"></a><a id="g45345"></a>Table 4-2 Packaging and Instantiation Options</p>
<table class="cellalignment5774" title="Packaging and Instantiation Options" summary="This table lists the types of instantiation and, for each type of instantiation, what to use to package the template, the documentation relating to the packaging, what to use to instantiate the template, and the documentation relating to instantiation." dir="ltr">
<thead>
<tr class="cellalignment5765">
<th class="cellalignment5775" id="r1c1-t12">Type of Instantiation</th>
<th class="cellalignment5775" id="r1c2-t12">Package Template Using</th>
<th class="cellalignment5775" id="r1c3-t12">Packaging Documentation</th>
<th class="cellalignment5775" id="r1c4-t12">Instantiate Template Using</th>
<th class="cellalignment5775" id="r1c5-t12">Instantiating Documentation</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment5765">
<td class="cellalignment5771" id="r2c1-t12" headers="r1c1-t12">
<p>Offline</p>
</td>
<td class="cellalignment5771" headers="r2c1-t12 r1c2-t12">
<p>Advanced Replication interface Create Deployment Template Wizard</p>
</td>
<td class="cellalignment5771" headers="r2c1-t12 r1c3-t12">
<p>See the Advanced Replication interface&#39;s online Help.</p>
</td>
<td class="cellalignment5771" headers="r2c1-t12 r1c4-t12">
<p>Offline Instantiation Script and SQL*Plus</p>
</td>
<td class="cellalignment5771" headers="r2c1-t12 r1c5-t12">
<p>See the Advanced Replication interface&#39;s online Help.</p>
</td>
</tr>
<tr class="cellalignment5765">
<td class="cellalignment5771" id="r3c1-t12" headers="r1c1-t12">
<p>Offline</p>
</td>
<td class="cellalignment5771" headers="r3c1-t12 r1c2-t12">
<p>The Replication Management API (PL/SQL Packages and SQL*Plus)</p>
</td>
<td class="cellalignment5771" headers="r3c1-t12 r1c3-t12">
<p>See the instructions for packaging in <a class="olink REPMA107" href="../REPMA/rardt.htm#REPMA107"><span class="italic">Oracle Database Advanced Replication Management API Reference</span></a>.</p>
</td>
<td class="cellalignment5771" headers="r3c1-t12 r1c4-t12">
<p>Offline Instantiation Script and SQL*Plus</p>
</td>
<td class="cellalignment5771" headers="r3c1-t12 r1c5-t12">
<p>See the instructions for instantiating a deployment template in <a class="olink REPMA108" href="../REPMA/rardt.htm#REPMA108"><span class="italic">Oracle Database Advanced Replication Management API Reference</span></a>.</p>
</td>
</tr>
<tr class="cellalignment5765">
<td class="cellalignment5771" id="r4c1-t12" headers="r1c1-t12">
<p>Online</p>
</td>
<td class="cellalignment5771" headers="r4c1-t12 r1c2-t12">
<p>The Replication Management API (PL/SQL Packages and SQL*Plus)</p>
</td>
<td class="cellalignment5771" headers="r4c1-t12 r1c3-t12">
<p>See the instructions for packaging in <a class="olink REPMA107" href="../REPMA/rardt.htm#REPMA107"><span class="italic">Oracle Database Advanced Replication Management API Reference</span></a>.</p>
</td>
<td class="cellalignment5771" headers="r4c1-t12 r1c4-t12">
<p>Online Instantiation Script and SQL*Plus</p>
</td>
<td class="cellalignment5771" headers="r4c1-t12 r1c5-t12">
<p>See the instructions for instantiating a deployment template in <a class="olink REPMA108" href="../REPMA/rardt.htm#REPMA108"><span class="italic">Oracle Database Advanced Replication Management API Reference</span></a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblruleformalwidemax" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHGJIJI"></a>
<div id="REPLN394" class="sect2">
<h3 class="sect2">After Instantiation<a id="sthref758"></a></h3>
<p>After instantiating a deployment template at a remote materialized view site, the structure created is the same as if you had created the materialized view environment locally at the materialized view site. Specifically, Oracle creates the materialized view, with the specified name, and an index based on the primary key to maintain constraint consistency. Other objects in the template are also created as if they were created manually at the materialized view site.</p>
<p>With respect to offline instantiations, the longer the duration between the packaging at the server and the instantiation at the remote site, the longer it takes for the first refresh after instantiation at the remote materialized view site. The materialized view site uses the materialized view log at the master site to perform the fast refresh from the time that the template was packaged. Recall that changes made to the master table are logged to the materialized view log as soon as you package the deployment template.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="repmview.htm#i29896">&#34;Materialized View Architecture&#34;</a> for more information</div>
<div id="REPLN395" class="sect3"><a id="sthref759"></a>
<h4 class="sect3">Materialized View Groups<a id="sthref760"></a><a id="sthref761"></a></h4>
<p>Objects created by an instantiated deployment template are added automatically to a materialized view group with the same name as the object&#39;s master group. For example, if you instantiated the <code dir="ltr">dt_mviewenv</code> deployment template, which contains objects from the <code dir="ltr">personnel</code> and <code dir="ltr">technical</code> master groups, then your template objects are added to materialized view groups <code dir="ltr">personnel</code> and <code dir="ltr">technical</code>, respectively. Remember that a materialized view group helps to maintain organizational consistency with the target master group and, more importantly, is required for updatable materialized views.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="repmview.htm#i30731">&#34;Materialized View Groups&#34;</a> for more information</div>
</div>
<!-- class="sect3" -->
<div id="REPLN396" class="sect3"><a id="sthref762"></a>
<h4 class="sect3">Refresh Groups<a id="sthref763"></a><a id="sthref764"></a><a id="sthref765"></a></h4>
<p>When you first begin building a deployment template, you define the name of the refresh group to which the template&#39;s materialized view objects will be added. After the instantiation process is finished, you can specify that the materialized views in the refresh group be refreshed automatically at set intervals, assuming a constant network connection to the master site.</p>
<p>You can use the Advanced Replication interface in Oracle Enterprise Manager Cloud Control, or <code dir="ltr">DBMS_REFRESH.CHANGE</code> procedure, to change the refresh interval and next refresh data of a refresh group. To change these settings in the Advanced Replication interface, select the refresh group and edit the Next Date and Interval fields. To change these settings with the <code dir="ltr">DBMS_REFRESH.CHANGE</code> procedure, set the <code dir="ltr">interval</code> and <code dir="ltr">next_date</code> parameters appropriately. If materialized view sites do not have a constant network connection to the master site, then they can refresh their refresh groups on-demand.</p>
<p>The following are examples of simple date expressions that you can use to specify <code dir="ltr">next_date</code> and <code dir="ltr">interval</code>:</p>
<ul>
<li>
<p>A <code dir="ltr">next_date</code> or <code dir="ltr">interval</code> of one hour is specifies as:</p>
<pre dir="ltr">SYSDATE + 1/24
</pre></li>
<li>
<p>A <code dir="ltr">next_date</code> or <code dir="ltr">interval</code> of seven days is specifies as:</p>
<pre dir="ltr">SYSDATE + 7 
</pre></li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADMIN" href="../ADMIN/toc.htm"><span class="italic">Oracle Database Administrator&#39;s Guide</span></a> and <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about date arithmetic</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i17891"></a>
<div id="REPLN397" class="sect1">
<h2 class="sect1">Deployment Template Design<a id="sthref766"></a></h2>
<p>The combination of deployment template parameters and subquery subsetting gives the database administrator a powerful tool to administer a widely distributed database environment using subqueries and row-subsetted data. Additional design consideration must be given to column subsetting requirements and data sets needed for a replication environment.</p>
<p>Materialized view data sets are defined based on the materialized view&#39;s query, meaning that the user only sees data that complies with the materialized view&#39;s defining query. Both row and column subsetting enable you to create materialized views that contain customized data sets. Such materialized views can be helpful for regional offices or sales forces that do not require the complete corporate data set.</p>
<p>This section contains these topics:</p>
<ul>
<li>
<p><a href="#i29069">Column Subsetting with Deployment Templates</a></p>
</li>
<li>
<p><a href="#i27287">Row Subsetting</a></p>
</li>
<li>
<p><a href="#CIHJICFE">Data Sets</a></p>
</li>
<li>
<p><a href="#CIHFJIFF">Additional Design Considerations</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="repmview.htm#i28635">&#34;Data Subsetting with Materialized Views&#34;</a> for more information about data subsetting</div>
<a id="i29069"></a>
<div id="REPLN116" class="sect2">
<h3 class="sect2">Column Subsetting with Deployment Templates<a id="sthref767"></a><a id="sthref768"></a></h3>
<p>Column subsetting enables you to exclude columns that are in master tables from materialized views. You do this by specifying certain select columns in the <code dir="ltr">SELECT</code> statement during materialized view creation. Column subsetting is only possible with deployment templates. Before you begin assembling your deployment template, consider how to build your templates.</p>
<p>For example, in a mass deployment environment with many &#34;lightweight&#34; clients, you might need to replicate tables that contain LOB data without actually replicating the LOB data itself. This goal can be achieved by excluding the LOB column from the selected columns to be replicated when defining the column subset.</p>
<p>You can select any subset of columns in a read-only materialized view. For an updatable materialized view, the subset of columns must contain the following columns:</p>
<ul>
<li>
<p>Primary key column(s)</p>
</li>
<li>
<p>All columns used for conflict resolution for the replicated columns (see <a href="#i27239">Figure 4-6</a>)</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
While it is possible to configure column subsetting within a column group, it is not recommended because it can result in data inconsistencies between sites. When using column subsetting, you should eliminate columns at the column group level.</div>
<div id="REPLN398" class="figure">
<p class="titleinfigure"><a id="i27239"></a>Figure 4-6 Replicate Column-Subsetted Data</p>
<img width="600" height="256" src="img/repln069.gif" alt="Description of Figure 4-6 follows"/><br/>
<a id="sthref769" href="img_text/repln069.htm">Description of &#34;Figure 4-6 Replicate Column-Subsetted Data&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>If you are adding a materialized view that replicates columns <code dir="ltr">pk</code>, <code dir="ltr">empid</code>, <code dir="ltr">salary</code>, and <code dir="ltr">level</code> (illustrated in <a href="#i27239">Figure 4-6</a>), then you also need to include the <code dir="ltr">Time</code> <code dir="ltr">Stamp</code> column because it is used for conflict resolution for columns contained in Column Group A.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>Column subsetting is only available when you add a materialized view to a deployment template using the Advanced Replication interface in Oracle Enterprise Manager Cloud Control. Column subsetting is not available when using the replication management API.</p>
</li>
<li>
<p>The master definition site must be available when defining a column subset. If your deployment template contains column-subsetted materialized views from multiple master groups, then the master definition site for each group must be available.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="i27287"></a>
<div id="REPLN399" class="sect2">
<h3 class="sect2">Row Subsetting<a id="sthref770"></a><a id="sthref771"></a></h3>
<p>Row subsetting enables you to exclude rows that are in master tables from materialized views by using a <code dir="ltr">WHERE</code> clause. For example, the following statement creates a materialized view based on the <code dir="ltr">oe.orders@orc1.example.com</code> master table and includes only the rows for the sales representative with a <code dir="ltr">sales_rep_id</code> number of <code dir="ltr">173</code>:</p>
<pre dir="ltr">CREATE MATERIALIZED VIEW oe.orders REFRESH FAST FOR UPDATE AS
  SELECT * FROM oe.orders@orc1.example.com
  WHERE sales_rep_id = 173;
</pre>
<p>Rows of the <code dir="ltr">orders</code> table with a <code dir="ltr">sales_rep_id</code> number other than <code dir="ltr">173</code> are excluded from this materialized view.</p>
<div id="REPLN114" class="sect3"><a id="sthref772"></a>
<h4 class="sect3">Row Subsetting with an Assignment Table<a id="sthref773"></a><a id="sthref774"></a></h4>
<p>In some situations, you can benefit from using row subsetting with an <span class="bold">assignment table</span>. An assignment table lets you relate one entity to another entity in your database, without storing the assignment information in either of the tables for the two entities. This technique is best illustrated through an example.</p>
<p>In the <code dir="ltr">oe</code> schema, the <code dir="ltr">product_id</code> column is the primary key in the <code dir="ltr">product_information</code> table, and the <code dir="ltr">warehouse_id</code> column is the primary key in the <code dir="ltr">warehouses</code> table. In this schema, the <code dir="ltr">inventories</code> table functions as an assignment table because it assigns a product to a warehouse using the <code dir="ltr">product_id</code> column and the <code dir="ltr">warehouse_id</code> column. These two columns form the primary key of the <code dir="ltr">inventories</code> table.</p>
<p>With these three tables in <code dir="ltr">oe</code> schema (<code dir="ltr">inventories</code>, <code dir="ltr">product_information</code>, and <code dir="ltr">warehouses</code>), you can track which products are in which warehouses without storing the <code dir="ltr">product_id</code> information in the <code dir="ltr">warehouses</code> table, nor the <code dir="ltr">warehouse_id</code> information in the <code dir="ltr">product_information</code> table. To illustrate why this is important, consider what would happen if the <code dir="ltr">inventories</code> table did not exist and the <code dir="ltr">warehouse_id</code> column was a foreign key in the <code dir="ltr">product_information</code> table.</p>
<p>In this case, if a salesperson wants to store product information for the nearest warehouse, then the sales person would need to specify the <code dir="ltr">warehouse_id</code> for the warehouse in the <code dir="ltr">WHERE</code> clause of the <code dir="ltr">CREATE</code> <code dir="ltr">MATERIALIZED</code> <code dir="ltr">VIEW</code> statement. For example, the salesperson might create the materialized view using the following statement:</p>
<pre dir="ltr">CREATE MATERIALIZED VIEW oe.product_information REFRESH FAST FOR UPDATE AS 
<a id="i34978"></a>  SELECT * FROM oe.product_information@orc1.example.com 
<a id="i34979"></a>  WHERE warehouse_id = 1; 
</pre>
<p>The drawback to this configuration is that the <code dir="ltr">warehouse_id</code> is &#34;hard coded&#34; into the materialized view definition. If the company closes warehouse 1 or opens a new warehouse that is even closer to the salesperson, then the preceding materialized view definitions would need to be altered or re-created. With this in mind, if you use assignment tables with row subsetting in a subquery, then you can easily control changes to a materialized view environment.</p>
<p>In the <code dir="ltr">oe</code> schema, the <code dir="ltr">warehouse_id</code> column is not part of the <code dir="ltr">product_information</code> table. Instead, a product is assigned to a warehouse through the <code dir="ltr">inventories</code> table. This relationship between products and warehouses is illustrated in <a href="#i29432">Figure 4-7</a>.</p>
<div id="REPLN400" class="figure">
<p class="titleinfigure"><a id="i29432"></a>Figure 4-7 Product/Warehouse Relationship</p>
<img width="600" height="568" src="img/repln091.gif" alt="Description of Figure 4-7 follows"/><br/>
<a id="sthref775" href="img_text/repln091.htm">Description of &#34;Figure 4-7 Product/Warehouse Relationship&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>If new warehouses are built or other warehouses are closed, then you can use the <code dir="ltr">inventories</code> table to assign products to different warehouses. Besides creating a single point of administration, assignment tables, such as the <code dir="ltr">inventories</code> table, used with row subsetting in subqueries, can ensure security. For example, if necessary, you can limit a certain salesperson to see data for some warehouses but not others.</p>
<p>Assume that each salesperson is responsible for a particular location and only requires product information for products that are stored in a warehouse in that location. In this case, the <code dir="ltr">inventories</code> table can be an assignment table along with row subsetting in subqueries to create the <code dir="ltr">product_information</code> materialized view that contains only the relevant information for a particular salesperson. The following statement provides a salesperson with the proper data:</p>
<pre dir="ltr">CREATE MATERIALIZED VIEW oe.product_information REFRESH FAST FOR UPDATE AS
  SELECT * FROM oe.product_information@orc1.example.com pi
  WHERE EXISTS 
    (SELECT * FROM oe.inventories@orc1.example.com inv
    WHERE pi.product_id = inv.product_id 
    AND EXISTS
      (SELECT * FROM oe.warehouses@orc1.example.com w
      WHERE inv.warehouse_id = w.warehouse_id
      AND EXISTS
        (SELECT * FROM hr.locations@orc1.example.com loc
        WHERE w.location_id = loc.location_id 
        AND loc.postal_code = :p_code)));
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
To create this <code dir="ltr">oe.product_information</code> materialized view, <code dir="ltr">postal_code</code> in must be logged in the materialized view log for the <code dir="ltr">hr.locations</code> table. See <a href="repplan.htm#i16640">&#34;Logging Columns in the Materialized View Log&#34;</a> for more information.</div>
<p>The <code dir="ltr">product_information</code> materialized view is populated with product information for the products that are stored in the warehouse located at the postal code specified with the <span class="italic">p_code</span> variable. Notice the <span class="italic">p_code</span> variable in the last line of the <code dir="ltr">CREATE</code> <code dir="ltr">MATERIALIZED</code> <code dir="ltr">VIEW</code> statement.</p>
<p>With this flexibility, managers can easily control materialized view data sets by making simple changes to the <code dir="ltr">inventories</code> table, without requiring modification of the SQL for the materialized view creation statements. For example, if a new product is added to a particular warehouse, then the manager would simply add a row to the <code dir="ltr">inventories</code> table that assigns the product to the warehouse. After the next materialized view refresh, the data for the product is added to the materialized view site that tracks product information for the warehouse.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHJICFE"></a>
<div id="REPLN401" class="sect2">
<h3 class="sect2">Data Sets<a id="sthref776"></a></h3>
<p>When designing your deployment templates, consider the different sets of users that need to access the target data. For example, both salespersons and technicians need customer information, but the technicians might not need sales information. You do not want users to instantiate deployment templates that contain extraneous data, because it requires extra storage space and incurs longer refresh time.</p>
<p>On the other hand, if you have users that require both sales and customer support information, then you do not want users to have to instantiate multiple deployment templates that share redundant data. Instantiating multiple templates might cause data consistency problems. Each deployment template uses a different refresh group, which means that data in the two deployment templates can be refreshed at different times, possibly causing data consistency problems.</p>
<p>In this case, the best solution would be to have one deployment template for salespersons, one for customer service technicians, and one for users that require both sets of data.</p>
<p>To save time and effort, the best way to create these three templates is to create the template with both sets of data first, copy the template twice, deleting unneeded items to create the other deployment templates.</p>
<div id="REPLN402" class="figure">
<p class="titleinfigure"><a id="i31365"></a>Figure 4-8 The Different Needs of Salespersons and Customer Support Technicians</p>
<img width="600" height="205" src="img/repln064.gif" alt="Description of Figure 4-8 follows"/><br/>
<a id="sthref777" href="img_text/repln064.htm">Description of &#34;Figure 4-8 The Different Needs of Salespersons and Customer Support Technicians&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>Another design consideration is the usage of parameters. If many of the tables in <a href="#i31365">Figure 4-8</a> use the <code dir="ltr">customer_id</code> field, then you could define the same parameter in each of the template objects. By using the same parameter, you would only need to define the default parameter value once, and it would be used for all objects during the instantiation process.</p>
<p>Using a single template parameter is even more useful when used with materialized views that use subquery subsetting. One parameter allows a user to receive only the data for the customers that the user needs. Consider the following <code dir="ltr">CREATE</code> <code dir="ltr">MATERIALIZED</code> <code dir="ltr">VIEW</code> statements:</p>
<pre dir="ltr">CREATE MATERIALIZED VIEW sales.orders AS
 SELECT * FROM sales.orders@orc1.example.com o
  -- conditions for customers
  WHERE EXISTS
  ( SELECT c_id FROM sales.customer@orc1.example.com c
    WHERE o.c_id = c.c_id
      AND EXISTS
    ( SELECT * FROM sales.assignment@orc1.example.com a
     WHERE a.c_id = c.c_id
     AND EXISTS
     ( SELECT * FROM sales.salesperson@orc1.example.com s
       WHERE s.s_id = :salesperson_id)));

CREATE MATERIALIZED VIEW sales.customer AS
SELECT c_id FROM sales.customer@orc1.example.com c
  -- conditions for customers
  WHERE EXISTS
   ( SELECT * FROM sales.assignment@orc1.example.com a
     WHERE a.c_id = c.c_id
     AND EXISTS
     ( SELECT * FROM sales.salesperson@orc1.example.com s
       WHERE s.s_id = :salesperson_id)));
</pre>
<p>Even though the two materialized views being created do not explicitly contain the <code dir="ltr">salesperson_id</code> field, using subquery subsetting makes using parameters very effective for instantiating only required data sets. Using a single parameter (<code dir="ltr">:salesperson_id</code>) makes managing and instantiating these materialized views easier for both the DBA and the user instantiating the deployment template.</p>
</div>
<!-- class="sect2" -->
<a id="CIHFJIFF"></a>
<div id="REPLN403" class="sect2">
<h3 class="sect2">Additional Design Considerations</h3>
<p>Finally, consider what other objects need to be created at the remote materialized view site. Consider the following questions:</p>
<ul>
<li>
<p>Do you need to include the DDL to create the necessary database links from the materialized view site to the master site?</p>
</li>
<li>
<p>What triggers or procedures does the materialized view environment require?</p>
</li>
<li>
<p>Do any tables need to be created that store nonreplicated data?</p>
</li>
<li>
<p>Are any extra indexes required?</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i22696"></a>
<div id="REPLN404" class="sect1">
<h2 class="sect1">Local Control of Materialized View Creation<a id="sthref778"></a></h2>
<p>A deployment template is the most effective method of building and distributing a materialized view environment. Even if distribution is limited to only two or three sites, you still significantly reduce the amount of steps needed to build a materialized view environment by using deployment templates as opposed to individually creating the materialized view environment at those two or three sites. With deployment templates, you build once and distribute as needed.</p>
<p>However, one question remains: If a deployment template is the most effective means for building and distributing a materialized view environment, then when should you locally build the materialized view environment at the remote materialized view site? In most cases, you should build a materialized view environment using the Materialized View Group Wizard or locally at the materialized view site when local control must be maintained at the materialized view site.</p>
<p>One scenario where you might find local control of materialized view creation helpful is when it is desirable for the materialized view site to control what data it receives. For example, this is especially true of decision support sites (DSS), which are typically read-only materialized view sites. A DSS site might occasionally need to run complex queries and they do not want to slow the OLTP site, or bother the DBA at the OLTP site.</p>
<div id="REPLN405" class="sect2"><a id="sthref779"></a>
<h3 class="sect2">Local Materialized View Control<a id="sthref780"></a><a id="sthref781"></a></h3>
<p>One of the major benefits of deployment templates is that control is maintained centrally by the DBA building the deployment template. In some cases, however, the materialized view site must retain some control.</p>
<p>Local control might be required if the materialized view site:</p>
<ul>
<li>
<p>Has an experienced DBA</p>
</li>
<li>
<p>Is considered a trusted site</p>
</li>
<li>
<p>Is a materialized view instead of a master site because of row subsetting requirements</p>
</li>
</ul>
<p>Because materialized view groups are created with the Advanced Replication interface&#39;s Create Materialized View Group Wizard locally at the materialized view site by its DBA, or perhaps a systems analyst with SQL knowledge, control can also be maintained at the materialized view site.</p>
<p>Consider the following as a perfect example for maintaining local control. Because multimaster replication does not allow for row and column data subsetting, updatable materialized view sites are sometimes created primarily for their ability to subset data. These sites are typically secure, have experienced DBAs, and require the ability to maintain control locally to meet user and application requirements. Materialized view groups created with the Materialized View Group Wizard or with the replication management API allow for the localized control necessary to meet the requirements of the secure updatable materialized view sites.</p>
<p>Also, remember that when a materialized view environment is created with a deployment template, all objects in the materialized view environment are added to the same refresh group. While this might be fine for most installations, certain situations might require that the objects in a materialized view group are assigned to several different refresh groups.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment5764">
<tr>
<td class="cellalignment5771">
<table class="cellalignment5769">
<tr>
<td class="cellalignment5768"><a href="repmview.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5768"><a href="repconflicts.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment5773">
<table class="cellalignment5767">
<tr>
<td class="cellalignment5768"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5768"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5768"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5768"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5768"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5768"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>