<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-114063"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Functions"></a><title>Functions</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1040"/>
<meta name="dcterms.created" content="2015-03-12T19:51:43Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="TimesTen In-Memory Database SQL Reference"/>
<meta name="dcterms.identifier" content="E21642-12"/>
<meta name="dcterms.isVersionOf" content="TTSQL"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2011, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="express.htm" title="Previous" type="text/html"/>
<link rel="Next" href="search.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E21642-12.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">8/13</span> <!-- End Header -->
<div id="TTSQL446" class="chapter"><a id="CACFCGCD"></a>
<h1 class="chapter"><span class="secnum">4</span> Functions</h1>
<p>Functions manipulate data and return a result. In addition to an alphabetical listing of all functions, this chapter contains an overview of functions including:</p>
<ul>
<li>
<p><a href="#CACFCAAI">Numeric functions</a></p>
</li>
<li>
<p><a href="#CACIDBIB">Character functions returning character values</a></p>
</li>
<li>
<p><a href="#CACHJBBF">Character functions returning number values</a></p>
</li>
<li>
<p><a href="#CIHDBGCC">String functions</a></p>
</li>
<li>
<p><a href="#CACDDABJ">LOB functions</a></p>
</li>
<li>
<p><a href="#CACDEGBC">NLS character set functions</a></p>
</li>
<li>
<p><a href="#CACJFGCC">General comparison functions</a></p>
</li>
<li>
<p><a href="#CACDBACJ">Null-related comparison functions</a></p>
</li>
<li>
<p><a href="#CACBJBBD">Conversion functions</a></p>
</li>
<li>
<p><a href="#CACHGGIC">Datetime functions</a></p>
</li>
<li>
<p><a href="#i988417">Aggregate functions</a></p>
</li>
<li>
<p><a href="#CACCGJBB">Analytic functions</a></p>
</li>
<li>
<p><a href="#CACHBDAE">Encoding function</a></p>
</li>
<li>
<p><a href="#CIHFHCFB">User and session functions</a></p>
</li>
<li>
<p><a href="#CACJJEEC">Cache grid functions</a></p>
</li>
</ul>
<a id="CACFCAAI"></a>
<div id="TTSQL465" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Nu<a id="sthref382"></a><a id="sthref383"></a>meric functions</h2>
<p>Numeric functions accept numeric input and return numeric values. The numeric functions are:</p>
<ul>
<li>
<p><a href="#CIHJGBJF">ABS</a></p>
</li>
<li>
<p><a href="#CIHEDIID">CEIL</a></p>
</li>
<li>
<p><a href="#CIHCGGHJ">FLOOR</a></p>
</li>
<li>
<p><a href="#i1045028">MOD</a></p>
</li>
<li>
<p><a href="#CIHDEDIG">POWER</a></p>
</li>
<li>
<p><a href="#CIHICJDB">ROUND (expression)</a></p>
</li>
<li>
<p><a href="#CIHIHHCG">SIGN</a></p>
</li>
<li>
<p><a href="#CIHFBGJJ">SQRT</a></p>
</li>
<li>
<p><a href="#CIHDAEDB">TRUNC (expression)</a></p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="CACIDBIB"></a>
<div id="TTSQL466" class="sect1">
<h2 class="sect1">Ch<a id="sthref384"></a><a id="sthref385"></a>aracter functions returning character values</h2>
<p>The character functions that return character values are:</p>
<ul>
<li>
<p><a href="#i1036513">CHR</a></p>
</li>
<li>
<p><a href="#i1000740">CONCAT</a></p>
</li>
<li>
<p><a href="#i1085135">LOWER and UPPER</a></p>
</li>
<li>
<p><a href="#CIHGHEJD">LPAD</a></p>
</li>
<li>
<p><a href="#CIHEDBHJ">LTRIM</a></p>
</li>
<li>
<p><a href="#i1037003">NCHR</a></p>
</li>
<li>
<p><a href="#i1033321">NLSSORT</a></p>
</li>
<li>
<p><a href="#CACGEDBC">REPLACE</a></p>
</li>
<li>
<p><a href="#CIHIGDAB">RPAD</a></p>
</li>
<li>
<p><a href="#i1098318">RTRIM</a></p>
</li>
<li>
<p><a href="#CACBFDJD">SOUNDEX</a></p>
</li>
<li>
<p><a href="#i1120276">SUBSTR, SUBSTRB, SUBSTR4</a></p>
</li>
<li>
<p><a href="#CIHFIBBG">TRIM</a></p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="CACHJBBF"></a>
<div id="TTSQL467" class="sect1">
<h2 class="sect1">Character functions returning number values</h2>
<p>Character functions that return number values are:</p>
<ul>
<li>
<p><a href="#i1097348">ASCIISTR</a></p>
</li>
<li>
<p><a href="#i1120281">INSTR, INSTRB, INSTR4</a></p>
</li>
<li>
<p><a href="#i1120286">LENGTH, LENGTHB, LENGTH4</a></p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="CIHDBGCC"></a>
<div id="TTSQL242" class="sect1">
<h2 class="sect1">St<a id="sthref386"></a><a id="sthref387"></a>ring functions</h2>
<p>TimesTen supports these string functions in <code dir="ltr">SELECT</code> statements:</p>
<ul>
<li>
<p><a href="#i1120281">INSTR, INSTRB, INSTR4</a></p>
</li>
<li>
<p><a href="#i1120286">LENGTH, LENGTHB, LENGTH4</a></p>
</li>
<li>
<p><a href="#i1120276">SUBSTR, SUBSTRB, SUBSTR4</a></p>
</li>
</ul>
<p>A selected value that specifies a string function causes the <code dir="ltr">SELECT</code> result to be materialized. This causes overhead in both time and space.</p>
</div>
<!-- class="sect1" -->
<a id="CACDDABJ"></a>
<div id="TTSQL487" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">LOB functions<a id="sthref388"></a><a id="sthref389"></a></h2>
<p>The following <code dir="ltr">EMPTY_*</code> functions initialize LOBs to a non-null value:</p>
<ul>
<li>
<p><a href="#CACIJDCD">EMPTY_BLOB</a></p>
</li>
<li>
<p><a href="#CACBIAJH">EMPTY_CLOB</a></p>
</li>
</ul>
<p>The following <code dir="ltr">TO_*</code> functions convert specific data types into the desired LOB data type.</p>
<ul>
<li>
<p><a href="#CACHJAJE">TO_BLOB</a></p>
</li>
<li>
<p><a href="#CACJCCDJ">TO_CLOB</a></p>
</li>
<li>
<p><a href="#CACFFDIF">TO_LOB</a></p>
</li>
<li>
<p><a href="#CACCHEAC">TO_NCLOB</a></p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="CACDEGBC"></a>
<div id="TTSQL468" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">NLS character set functions</h2>
<p>The NLS character set functions return information about the specified character set.</p>
<ul>
<li>
<p><a href="#CACJDFJH">NLS_CHARSET_ID</a></p>
</li>
<li>
<p><a href="#CACGJHEG">NLS_CHARSET_NAME</a></p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="CACJFGCC"></a>
<div id="TTSQL469" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">General comparison functions</h2>
<p>The general comparison functions perform comparisons between input expressions. The general comparison functions are:</p>
<ul>
<li>
<p><a href="#i1035748">DECODE</a></p>
</li>
<li>
<p><a href="#CIHHGEHE">GREATEST</a></p>
</li>
<li>
<p><a href="#CIHHIIHJ">LEAST</a></p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="CACDBACJ"></a>
<div id="TTSQL540" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Null-related comparison functions</h2>
<p>The null-related comparison functions compare expressions against <code dir="ltr">NULL</code> or return <code dir="ltr">NULL</code> based on comparison of expressions. The null-related comparison functions are:</p>
<ul>
<li>
<p><a href="#i1051444">COALESCE</a></p>
</li>
<li>
<p><a href="#CACBBIBE">NULLIF</a></p>
</li>
<li>
<p><a href="#i1027380">NVL</a></p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="CACBJBBD"></a>
<div id="TTSQL470" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Conversion functions</h2>
<p>Conversion functions convert a value from one data type to another. Some of the conversion function names follow the convention of <code dir="ltr">TO</code><code dir="ltr"><span class="codeinlineitalic">_datatype</span></code>.</p>
<p>The SQL conversion functions are:</p>
<ul>
<li>
<p><a href="#i1097348">ASCIISTR</a></p>
</li>
<li>
<p><a href="#i1000097">CAST</a></p>
</li>
<li>
<p><a href="#i1022177">NUMTODSINTERVAL</a></p>
</li>
<li>
<p><a href="#i1022166">NUMTOYMINTERVAL</a></p>
</li>
<li>
<p><a href="#i1000743">TO_CHAR</a></p>
</li>
<li>
<p><a href="#i1058153">TO_DATE</a></p>
</li>
<li>
<p><a href="#i1030328">TO_NUMBER</a></p>
</li>
<li>
<p><a href="#i1040226">UNISTR</a></p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="CACHGGIC"></a>
<div id="TTSQL471" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Datetime functions</h2>
<p>For a full description of the datetime data types, see <a href="types.htm#BABGDDBI">&#34;Datetime data types&#34;</a>.</p>
<p>The datetime functions are:</p>
<ul>
<li>
<p><a href="#CIHBCJAB">ADD_MONTHS</a></p>
</li>
<li>
<p><a href="#i1017701">EXTRACT</a></p>
</li>
<li>
<p><a href="#CACIIGGA">MONTHS_BETWEEN</a></p>
</li>
<li>
<p><a href="#i1022177">NUMTODSINTERVAL</a></p>
</li>
<li>
<p><a href="#i1022166">NUMTOYMINTERVAL</a></p>
</li>
<li>
<p><a href="#CIHBFIGB">ROUND (date)</a></p>
</li>
<li>
<p><a href="#i1001775">SYSDATE and GETDATE</a></p>
</li>
<li>
<p><a href="#CACEHCGA">TIMESTAMPADD</a></p>
</li>
<li>
<p><a href="#CACGFCFA">TIMESTAMPDIFF</a></p>
</li>
<li>
<p><a href="#i1058153">TO_DATE</a></p>
</li>
<li>
<p><a href="#i1027996">TRUNC (date)</a></p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="i988417"></a>
<div id="TTSQL201" class="sect1">
<h2 class="sect1">Ag<a id="sthref390"></a><a id="sthref391"></a>gregate functions</h2>
<p><a id="sthref392"></a><a id="sthref393"></a>Aggregate functions perform a specific operation over all rows in a group. Aggregate functions return a single result row based on groups of rows, rather than on single rows. They are commonly used with the <code dir="ltr">GROUP BY</code> clause in a <code dir="ltr">SELECT</code> statement, where the returned rows are divided into groups. If you omit the <code dir="ltr">GROUP BY</code> clause, the aggregate functions in the select list are applied to all the rows in the queried table or view.</p>
<p>Aggregate functions can be specified in the select list or the <code dir="ltr">HAVING</code> clause. See <a href="state.htm#i1049447">&#34;SELECT&#34;</a> for more information. The value of the expression is computed using each row that satisfies the <code dir="ltr">WHERE</code> clause.</p>
<p>M<a id="sthref394"></a><a id="sthref395"></a>any aggregate functions that take a single argument can use the <code dir="ltr">ALL</code> or <code dir="ltr">DISTINCT</code> keywords. The default is <code dir="ltr">ALL</code>. See each aggregate function syntax to see if <code dir="ltr">ALL</code> or <code dir="ltr">DISTINCT</code> can be used.</p>
<ul>
<li>
<p>Specify <code dir="ltr">DISTINCT</code> in an aggregate function to consider only distinct values of the argument expression.</p>
</li>
<li>
<p>Specify <code dir="ltr">ALL</code> in an aggregate function to consider all values, including duplicates.</p>
</li>
</ul>
<p>For example, the <code dir="ltr">DISTINCT</code> average of 1, 1, 1, and 3 is 2. The <code dir="ltr">ALL</code> average for these results is 1.5.</p>
<p><a id="sthref396"></a><a id="sthref397"></a><a id="sthref398"></a><a id="sthref399"></a>The <code dir="ltr">ROLLUP</code> and <code dir="ltr">CUBE</code> clauses within a <code dir="ltr">GROUP BY</code> clause produce superaggregate rows where the column values are represented by null values. Because the superaggregate rows are denoted by <code dir="ltr">NULL</code>, it can be a challenge to differentiate between query results that include a null value and the superaggregate result. In addition, within the returned subtotals, how do you find the exact level of aggregation for a given subtotal? Use the <a href="#BABGIDFD">GROUP_ID</a>, <a href="#BABJEEAH">GROUPING</a> and <a href="#BABFCCHD">GROUPING_ID</a> functions to resolve these issues.</p>
<p>See <a href="types.htm#i1008748">Chapter 1, &#34;Data Types&#34;</a> for information about the following.</p>
<ul>
<li>
<p>Truncation and type conversion that may occur during the evaluation of aggregate functions.</p>
</li>
<li>
<p>Precision and scale of aggregate functions involving numeric arguments.</p>
</li>
<li>
<p>Control of the result type of an aggregate function.</p>
</li>
</ul>
<p><a id="sthref400"></a>The following is a list of aggregate functions:</p>
<ul>
<li>
<p><a href="#CACDJEHI">AVG</a></p>
</li>
<li>
<p><a href="#CACIBBFB">COUNT</a></p>
</li>
<li>
<p><a href="#BABGIDFD">GROUP_ID</a></p>
</li>
<li>
<p><a href="#BABJEEAH">GROUPING</a></p>
</li>
<li>
<p><a href="#BABFCCHD">GROUPING_ID</a></p>
</li>
<li>
<p><a href="#CACGHBHB">MAX</a></p>
</li>
<li>
<p><a href="#CACBFFGF">MIN</a></p>
</li>
<li>
<p><a href="#CACBIJHC">SUM</a></p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="CACCGJBB"></a>
<div id="TTSQL488" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref401"></a><a id="sthref402"></a>Analytic functions</h2>
<p>Analytic functions compute an aggregate value based on a group of rows. They differ from aggregate functions in that they return multiple rows for each group. The group of rows is called a <span class="bold">window</span> and is defined by the <code dir="ltr"><span class="codeinlineitalic">analytic_clause</span></code>.</p>
<p>Analytic functions are the last set of operations performed in a query except for the final <code dir="ltr">ORDER BY</code> clause. All joins, <code dir="ltr">WHERE</code>, <code dir="ltr">GROUP BY</code>, and <code dir="ltr">HAVING</code> clauses are completed before the analytic functions are processed. The final <code dir="ltr">ORDER BY</code> clause is used to order the result of analytic functions. Analytic functions can appear in the select list of a query or subquery and in the <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> clause.</p>
<p>Analytic functions allow you to divide query result sets into groups of rows called partitions. You can define partitions on columns or expressions. You can partition a query result set into just one partition holding all rows, a few large partitions or many small partitions holding just a few rows each.</p>
<p>You can define a sliding window for each row in the partition. This window determines the range of rows used to perform the calculations for the current row. Window sizes are based on a physical number of rows. The window has a starting row and an ending row and the window may move at one or both ends. For example, a window defined for a cumulative sum function would have its starting row fixed at the first row of the partition and the ending rows would slide from the start point to the last row of the partition. In contrast, a window defined for a moving average would have both the start point and end point slide.</p>
<p>You can set the window as large as all the rows in the partition or as small as one row within a partition.</p>
<p>You can specify multiple ordering expressions within each function. This is useful when using functions that rank values because the second expression can resolve ties between identical values for the first expression.</p>
<p>Analytic functions are commonly used to compute cumulative, moving, centered, and reporting aggregates.</p>
<p>Restrictions:</p>
<ul>
<li>
<p>Analytic functions are not supported in global queries or materialized views.</p>
</li>
</ul>
<p><a id="sthref403"></a>The list of analytic functions follows. Functions followed by an asterisk (*) support the <code dir="ltr"><span class="codeinlineitalic">WindowingClause</span></code>.</p>
<ul>
<li>
<p><a href="#CACDJEHI">AVG</a> *</p>
</li>
<li>
<p><a href="#CACIBBFB">COUNT</a> *</p>
</li>
<li>
<p><a href="#CACBHFAI">DENSE_RANK</a></p>
</li>
<li>
<p><a href="#CACGHDII">FIRST_VALUE</a> *</p>
</li>
<li>
<p><a href="#CACCBFJF">LAST_VALUE</a> *</p>
</li>
<li>
<p><a href="#CACGHBHB">MAX</a> *</p>
</li>
<li>
<p><a href="#CACBFFGF">MIN</a> *</p>
</li>
<li>
<p><a href="#CACEHDDC">RANK</a></p>
</li>
<li>
<p><a href="#CACEIFIB">ROW_NUMBER</a></p>
</li>
<li>
<p><a href="#CACBIJHC">SUM</a> *</p>
</li>
</ul>
<div id="TTSQL489" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref404"></a>
<h3 class="sect2">SQL syntax</h3>
<p>Analytic function syntax:</p>
<pre dir="ltr"><span class="italic">AnalyticFunctionName</span> ([<span class="codeinlineitalic">arguments</span>]) OVER ([<span class="italic">AnalyticClause</span>])

<span class="italic">AnalyticClause</span>::= <span class="italic">QueryPartitionClause</span> [ORDER BY <span class="italic">OrderByClause</span> [,...]
                                          [<span class="italic">WindowingClause</span>]] |
                  ORDER BY <span class="italic">OrderByClause</span> [,...] [<span class="italic">WindowingClause</span>]

<span class="italic">QueryPartitionClause</span>::= PARTITION BY { <span class="codeinlineitalic">Expression</span>[,<span class="codeinlineitalic">Expression</span>]... |
                                      (<span class="codeinlineitalic">Expression</span> [,<span class="codeinlineitalic">Expression</span>]...) 
                                     }

<span class="italic">OrderByClause</span>::= <span class="codeinlineitalic">Expression</span> [ASC|DESC] [NULLS {FIRST|LAST}]

<span class="italic">WindowingClause</span>::= ROWS { BETWEEN <span class="italic">StartPoint </span>AND <span class="italic">EndPoint</span> |
                          <span class="italic">StartPoint</span>
                        }

<span class="italic">StartPoint</span>::= UNBOUNDED PRECEDING | CURRENT ROW | <span class="codeinlineitalic">PosNumConstantExpr</span> 
                                                    { PRECEDING | FOLLOWING }

<span class="italic">EndPoint</span>::= UNBOUNDED FOLLOWING | CURRENT ROW | <span class="codeinlineitalic">PosNumConstantExpr</span>
                                                   { PRECEDING | FOLLOWING }
</pre></div>
<!-- class="sect2" -->
<div id="TTSQL511" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref405"></a>
<h3 class="sect2">Parameters</h3>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter definitions for analytic functions" summary="Parameters and descriptions for analytic functions" dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t2">Parameter</th>
<th class="cellalignment6331" id="r1c2-t2">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t2" headers="r1c1-t2"><code dir="ltr"><span class="codeinlineitalic">AnalyticFunctionName</span></code></td>
<td class="cellalignment6332" headers="r2c1-t2 r1c2-t2">Name of analytic function.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t2" headers="r1c1-t2"><code dir="ltr"><span class="codeinlineitalic">arguments</span></code></td>
<td class="cellalignment6332" headers="r3c1-t2 r1c2-t2">Arguments for the analytic function. Number of arguments depends on the analytic function. Refer to the particular function for specific information on the arguments to the function.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t2" headers="r1c1-t2"><code dir="ltr">OVER ( [</code> <code dir="ltr"><span class="codeinlineitalic">AnalyticClause</span></code> <code dir="ltr">] )</code></td>
<td class="cellalignment6332" headers="r4c1-t2 r1c2-t2">Indicates that the function is an analytic function. This clause is computed after the <code dir="ltr">FROM</code>, <code dir="ltr">WHERE</code>, <code dir="ltr">GROUP BY</code>, and <code dir="ltr">HAVING</code> clauses.
<p>If you do not specify the <code dir="ltr"><span class="codeinlineitalic">AnalyticClause</span></code>, then the analytic function is evaluated over the entire result set without partitioning, ordering, or using a window.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t2" headers="r1c1-t2"><code dir="ltr"><span class="codeinlineitalic">QueryPartitionClause</span></code></td>
<td class="cellalignment6332" headers="r5c1-t2 r1c2-t2">Optional clause used in <code dir="ltr"><span class="codeinlineitalic">AnalyticClause</span></code>. Denoted by the <code dir="ltr">PARTITION</code> <code dir="ltr">BY</code> clause. If specified, the query result set is partitioned into groups based on the <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> list. If you omit this clause, then the function treats all rows of the query result set as a single group.
<p>You can specify multiple analytic functions in the same query using either the same or different <code dir="ltr">PARTITION</code> keys.</p>
<p>Valid values for <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> are constants, columns, non-analytic functions or function expressions.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t2" headers="r1c1-t2"><code dir="ltr">ORDER BY</code> <code dir="ltr"><span class="codeinlineitalic">OrderByClause</span></code></td>
<td class="cellalignment6332" headers="r6c1-t2 r1c2-t2">Optional clause used in <code dir="ltr"><span class="codeinlineitalic">AnalyticClause</span></code>. Use this clause to specify how data is ordered within the partition. <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> cannot be a column alias or position.
<p>You can order the values in a partition on multiple keys each defined by <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> and each qualified by an ordering sequence.</p>
<p>Analytic functions operate in the order specified in this clause. However this clause does not guarantee the order of the result. Use the <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> clause of the query to guarantee the final result ordering.</p>
<p>If you specify the <code dir="ltr">ORDER BY</code> <code dir="ltr"><span class="codeinlineitalic">OrderByClause</span></code> and you do not specify either a <code dir="ltr"><span class="codeinlineitalic">QueryPartitionClause</span></code> or a <code dir="ltr"><span class="codeinlineitalic">WindowingClause</span></code>, then the default window is <code dir="ltr">ROWS</code> <code dir="ltr">BETWEEN</code> <code dir="ltr">UNBOUNDED</code> <code dir="ltr">PRECEDING</code> <code dir="ltr">AND</code> <code dir="ltr">CURRENT</code> <code dir="ltr">ROW</code>.</p>
<p>If you do not specify the <code dir="ltr">ORDER BY</code> <code dir="ltr"><span class="codeinlineitalic">OrderByClause</span></code>, then the order is indeterminate.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r7c1-t2" headers="r1c1-t2"><code dir="ltr">ASC | DESC</code></td>
<td class="cellalignment6332" headers="r7c1-t2 r1c2-t2">Specifies the ordering sequence (ascending or descending). <code dir="ltr">ASC</code> is the default.
<p>Clause is optional.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r8c1-t2" headers="r1c1-t2"><code dir="ltr">NULLS FIRST | NULLS LAST</code></td>
<td class="cellalignment6332" headers="r8c1-t2 r1c2-t2">Specifies whether rows that contain <code dir="ltr">NULL</code> values are specified first or last in the ordering sequence. <code dir="ltr">NULLS</code> <code dir="ltr">LAST</code> is the default for ascending order. <code dir="ltr">NULLS</code> <code dir="ltr">FIRST</code> is the default for descending order.
<p>Clause is optional.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r9c1-t2" headers="r1c1-t2"><code dir="ltr"><span class="codeinlineitalic">WindowingClause</span></code></td>
<td class="cellalignment6332" headers="r9c1-t2 r1c2-t2">Clause is denoted by the <code dir="ltr">ROWS</code> keyword. Specifies for each row a window expressed in physical units (rows). The window is used for calculating the function result. The function is applied to all the rows in the window. The window moves through the query result set or partition from top to bottom.
<p>You cannot specify the <code dir="ltr"><span class="codeinlineitalic">WindowingClause</span></code> if you have not specified the <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> <code dir="ltr"><span class="codeinlineitalic">OrderByClause</span></code>.</p>
<p>The value returned by the analytic function may produce nondeterministic results unless the ordering sequence results in unique ordering. In this case, specify multiple columns in the <code dir="ltr"><span class="codeinlineitalic">OrderByClause</span></code> to achieve unique ordering.</p>
<p>For the list of functions that allow the <code dir="ltr"><span class="codeinlineitalic">WindowingClause</span></code>, see <a href="#CACCGJBB">&#34;Analytic functions&#34;</a>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r10c1-t2" headers="r1c1-t2"><code dir="ltr">BETWEEN...AND</code></td>
<td class="cellalignment6332" headers="r10c1-t2 r1c2-t2">Use the <code dir="ltr">BETWEEN</code>...<code dir="ltr">AND</code> clause to specify a start point (<code dir="ltr"><span class="codeinlineitalic">StartPoint</span></code>) and end point (<code dir="ltr"><span class="codeinlineitalic">EndPoint</span></code>) for the window.
<p>If you omit the <code dir="ltr">BETWEEN</code>...<code dir="ltr">AND</code> clause and attempt to specify one end point, then TimesTen considers this end point the start point and the end point defaults to the current row.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r11c1-t2" headers="r1c1-t2"><code dir="ltr"><span class="codeinlineitalic">StartPoint</span></code></td>
<td class="cellalignment6332" headers="r11c1-t2 r1c2-t2">Valid values are <code dir="ltr">UNBOUNDED PRECEDING</code>, <code dir="ltr">CURRENT ROW</code>, <code dir="ltr"><span class="codeinlineitalic">PosNumConstantExpr</span></code> <code dir="ltr">PRECEDING</code> or <code dir="ltr"><span class="codeinlineitalic">PosNumConstantExpr</span></code> <code dir="ltr">FOLLOWING</code>.
<p><code dir="ltr"><span class="codeinlineitalic">PosNumConstantExpr</span></code> must be either a constant positive numeric value or an expression that evaluates to a constant positive numeric value.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r12c1-t2" headers="r1c1-t2"><code dir="ltr"><span class="codeinlineitalic">EndPoint</span></code></td>
<td class="cellalignment6332" headers="r12c1-t2 r1c2-t2">Valid values are <code dir="ltr">UNBOUNDED FOLLOWING</code>, <code dir="ltr">CURRENT ROW</code>, <code dir="ltr"><span class="codeinlineitalic">PosNumConstantExpr</span></code> <code dir="ltr">PRECEDING</code> or <code dir="ltr"><span class="codeinlineitalic">PosNumConstantExpr</span></code> <code dir="ltr">FOLLOWING</code>.
<p><code dir="ltr"><span class="codeinlineitalic">PosNumConstantExpr</span></code> must be either a constant positive numeric value or an expression that evaluates to a constant positive numeric value.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r13c1-t2" headers="r1c1-t2"><code dir="ltr">UNBOUNDED</code> <code dir="ltr">PRECEDING</code></td>
<td class="cellalignment6332" headers="r13c1-t2 r1c2-t2">Use <code dir="ltr">UNBOUNDED</code> <code dir="ltr">PRECEDING</code> to indicate that the window starts at the first row of the partition.
<p>Cannot be used as the end point.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r14c1-t2" headers="r1c1-t2"><code dir="ltr">UNBOUNDED</code> <code dir="ltr">FOLLOWING</code></td>
<td class="cellalignment6332" headers="r14c1-t2 r1c2-t2">Use <code dir="ltr">UNBOUNDED</code> <code dir="ltr">FOLLOWING</code> to indicate that the window ends at the last row of the partition.
<p>Cannot be used as the start point.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r15c1-t2" headers="r1c1-t2"><code dir="ltr">CURRENT</code> <code dir="ltr">ROW</code></td>
<td class="cellalignment6332" headers="r15c1-t2 r1c2-t2">As a start point, <code dir="ltr">CURRENT ROW</code> specifies that the window begins at the current row. In this case, the end point cannot be <code dir="ltr"><span class="codeinlineitalic">PosNumConstantExpr</span></code> <code dir="ltr">PRECEDING</code>.
<p>As an end point, <code dir="ltr">CURRENT ROW</code> specifies that the window ends at the current row. In this case, the start point cannot be <code dir="ltr"><span class="codeinlineitalic">PosNumConstantExpr</span></code> <code dir="ltr">FOLLOWING</code>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r16c1-t2" headers="r1c1-t2"><code dir="ltr"><span class="codeinlineitalic">PosNumConstantExpr</span></code> <code dir="ltr">{PRECEDING | FOLLOWING }</code></td>
<td class="cellalignment6332" headers="r16c1-t2 r1c2-t2">If <code dir="ltr"><span class="codeinlineitalic">PosNumConstantExpr</span></code> <code dir="ltr">FOLLOWING</code> is the start point, then the end point must be <code dir="ltr"><span class="codeinlineitalic">PosNumConstantExpr</span></code> <code dir="ltr">FOLLOWING</code> or <code dir="ltr">UNBOUNDED</code> <code dir="ltr">FOLLOWING</code>. If <code dir="ltr"><span class="codeinlineitalic">PosNumConstantExpr</span></code> <code dir="ltr">PRECEDING</code> is the end point, then the start point must be <code dir="ltr"><span class="codeinlineitalic">PosNumConstantExpr</span></code> <code dir="ltr">PRECEDING</code> or <code dir="ltr">UNBOUNDED</code> <code dir="ltr">PRECEDING</code>.
<p>The end point <code dir="ltr"><span class="codeinlineitalic">PosNumConstantExpr</span></code> must be greater or equal to the start point <code dir="ltr"><span class="codeinlineitalic">PosNumConstantExpr</span></code>.</p>
<p><code dir="ltr"><span class="codeinlineitalic">PosNumConstantExpr</span></code> must be either a constant positive numeric value or an expression that evaluates to a constant positive numeric value.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CACHBDAE"></a>
<div id="TTSQL541" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref406"></a><a id="sthref407"></a>Encoding function</h2>
<p>Encoding functions return a value based on input expressions.</p>
<ul>
<li>
<p><a href="#i1041970">TT_HASH</a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
<code dir="ltr">DECODE</code> is included in <a href="#CACJFGCC">&#34;General comparison functions&#34;</a>.</div>
</div>
<!-- class="sect1" -->
<a id="CIHFHCFB"></a>
<div id="TTSQL257" class="sect1">
<h2 class="sect1"><a id="sthref408"></a><a id="sthref409"></a><a id="sthref410"></a>User and session functions</h2>
<p>TimesTen supports these user and session functions:</p>
<ul>
<li>
<p><a href="#CIHEICCA">CURRENT_USER</a></p>
</li>
<li>
<p><a href="#i1120511">SESSION_USER</a></p>
</li>
<li>
<p><a href="#CIHEJJCG">SYS_CONTEXT</a></p>
</li>
<li>
<p><a href="#i1120532">SYSTEM_USER</a></p>
</li>
<li>
<p><a href="#CIHGHCIJ">UID</a></p>
</li>
<li>
<p><a href="#CIHFABDA">USER</a></p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="CACJJEEC"></a>
<div id="TTSQL472" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref411"></a><a id="sthref412"></a>Cache grid functions</h2>
<p>You may want to execute a global query without changing the location of the data. You can use cache grid functions to determine the location of data in a cache grid and then execute a query for the information from that member.</p>
<p><a id="sthref413"></a><a id="sthref414"></a>Use these SQL functions in a global query to obtain information about the location of data in the cache grid, which the user can use to map each returned row to a member of the grid.</p>
<ul>
<li>
<p><a id="sthref415"></a><a href="#CACEGBHF">TTGRIDMEMBERID</a>() - When executed within a global query, gives the member ID in the cache grid of the owning member for each returned row.</p>
</li>
<li>
<p><a id="sthref416"></a><a href="#CACDEECC">TTGRIDNODENAME</a>() - When executed within a global query, returns the name of the node in a cache grid on which the data is located.</p>
</li>
<li>
<p><a id="sthref417"></a><a href="#CACGBCGA">TTGRIDUSERASSIGNEDNAME</a>() - Within a global query, returns the user-assigned name of the node in a cache grid on which the data is located.</p>
</li>
</ul>
<p>These functions can be used in a <code dir="ltr">SELECT</code> statement and in these clauses of a <code dir="ltr">SELECT</code> statement:</p>
<ul>
<li>
<p><code dir="ltr">WHERE</code> clause</p>
</li>
<li>
<p><code dir="ltr">GROUP BY</code> clause</p>
</li>
<li>
<p><code dir="ltr">ORDER BY</code> clause</p>
</li>
</ul>
<p>See <a class="olink TTCAC449" href="../TTCAC/gridmembers.htm#TTCAC449">&#34;Obtaining information about the location of data in the cache grid&#34;</a> in <span class="italic">Oracle TimesTen Application-Tier Database Cache User&#39;s Guide</span> for more information.</p>
</div>
<!-- class="sect1" -->
<div class="refentry"><a id="CIHJGBJF"></a>
<div id="TTSQL212" class="refsect1">
<h2 class="refsect1"><a id="sthref418"></a>ABS</h2>
<p>The <code dir="ltr">ABS</code> function returns the absolute value of <code dir="ltr"><span class="codeinlineitalic">Expression.</span></code></p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref419"></a>SQL syntax</p>
<pre dir="ltr">ABS(<span class="italic">Expression</span>)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref420"></a>Parameters</p>
<p><code dir="ltr">ABS</code> has the parameter:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table describes the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t4">Parameter</th>
<th class="cellalignment6331" id="r1c2-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t4" headers="r1c1-t4"><code dir="ltr"><span class="codeinlineitalic">Expression</span></code></td>
<td class="cellalignment6332" headers="r2c1-t4 r1c2-t4">Operand or column can be any numeric data type. Absolute value of <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is returned.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref421"></a>Description</p>
<ul>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is of type <code dir="ltr">TT_DECIMAL</code> or <code dir="ltr">NUMBER</code>, the data type returned is <code dir="ltr">NUMBER</code> with maximum precision and scale. Otherwise, <code dir="ltr">ABS</code> returns the same data type as the numeric data type of <code dir="ltr"><span class="codeinlineitalic">Expression</span></code>.</p>
</li>
<li>
<p>If the value of <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is <code dir="ltr">NULL</code>, <code dir="ltr">NULL</code> is returned. If the value of the <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is <code dir="ltr">-INF</code>, <code dir="ltr">INF</code> is returned.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref422"></a>Examples</p>
<p>Create table <code dir="ltr">abstest</code> and define columns with type <code dir="ltr">BINARY_FLOAT</code> and <code dir="ltr">TT_INTEGER</code>. Insert values <code dir="ltr">-BINARY_FLOAT_INFINITY</code> and -10. Call <code dir="ltr">ABS</code> to return the absolute value. You see <code dir="ltr">INF</code> and 10 are the returned values:</p>
<pre dir="ltr">Command&gt; CREATE TABLE abstest (col1 BINARY_FLOAT, col2 TT_INTEGER);
Command&gt; INSERT INTO abstest VALUES 
       &gt; (-BINARY_FLOAT_INFINITY, -10);
1 row inserted.
Command&gt; SELECT ABS (col1) FROM abstest;
&lt; INF &gt;
1 row found.
Command&gt; SELECT ABS (col2) FROM abstest;
&lt; 10 &gt;
1 row found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CIHBCJAB"></a>
<div id="TTSQL213" class="refsect1">
<h2 class="refsect1"><a id="sthref423"></a>ADD_MONTHS</h2>
<p>The <code dir="ltr">ADD_MONTHS</code> function returns the date resulting from <code dir="ltr"><span class="codeinlineitalic">date</span></code> plus <code dir="ltr"><span class="codeinlineitalic">integer</span></code> months.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref424"></a>SQL syntax</p>
<pre dir="ltr">ADD_MONTHS(<span class="codeinlineitalic">Date</span>,<span class="codeinlineitalic">Integer</span>)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref425"></a>Parameters</p>
<p><code dir="ltr">ADD_MONTHS</code> has the parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table describes the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t5">Parameter</th>
<th class="cellalignment6331" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t5" headers="r1c1-t5"><code dir="ltr"><span class="codeinlineitalic">Date</span></code></td>
<td class="cellalignment6332" headers="r2c1-t5 r1c2-t5">A datetime value or any value that can be converted to a datetime value.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t5" headers="r1c1-t5"><code dir="ltr"><span class="codeinlineitalic">Integer</span></code></td>
<td class="cellalignment6332" headers="r3c1-t5 r1c2-t5">An integer or any value that can be converted to an integer.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref426"></a>Description</p>
<ul>
<li>
<p>The return type is always <code dir="ltr">DATE</code> regardless of the data type of <code dir="ltr"><span class="codeinlineitalic">date.</span></code> Supported data types are <code dir="ltr">DATE</code>, <code dir="ltr">TIMESTAMP</code>, <code dir="ltr">ORA_TIMESTAMP</code> and <code dir="ltr">ORA_DATE</code>.</p>
</li>
<li>
<p>Data types <code dir="ltr">TIME</code>, <code dir="ltr">TT_TIME</code>, <code dir="ltr">TT_DATE</code> and <code dir="ltr">TT_TIMESTAMP</code> are not supported.</p>
</li>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">date</span></code> is the last day of the month or if the resulting month has fewer days than the day component of <code dir="ltr"><span class="codeinlineitalic">date</span></code>, then the result is the last day of the resulting month. Otherwise, the result has the same day component as <code dir="ltr"><span class="codeinlineitalic">date</span></code>.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref427"></a>Examples</p>
<p>Call the <code dir="ltr">ADD_MONTHS</code> function to add 1 month to date January 31, 2007. The last day of February is returned.</p>
<pre dir="ltr">Command&gt; SELECT ADD_MONTHS (DATE &#39;2007-01-31&#39;, 1) FROM dual;
&lt; 2007-02-28 00:00:00 &gt;
1 row found.
</pre>
<p><code dir="ltr">ADD_MONTHS</code> returns data type <code dir="ltr">DATE</code> if <code dir="ltr"><span class="codeinlineitalic">date</span></code> is of type <code dir="ltr">TIMESTAMP</code>:</p>
<pre dir="ltr">Command&gt; DESCRIBE SELECT ADD_MONTHS (TIMESTAMP &#39;2007-01-31
       &gt; 10:00:00&#39;, 1) FROM dual;
Prepared Statement:
  Columns:
    EXP                             DATE NOT NULL
</pre>
<p>Use the <code dir="ltr">HR</code> schema to select the first 5 rows of the <code dir="ltr">employees</code> table, showing <code dir="ltr">employee_id</code>, <code dir="ltr">last_name</code> and <code dir="ltr">hire_date</code>. Create new table <code dir="ltr">temp_hire_date</code> using the <code dir="ltr">CREATE TABLE ... AS SELECT</code> statement. Call <code dir="ltr">ADD_MONTHS</code> to add 23 months to the original <code dir="ltr">hire_date</code>.</p>
<pre dir="ltr">Command&gt; SELECT FIRST 5 employee_id, last_name, hire_date FROM employees;
&lt; 100, King, 1987-06-17 00:00:00 &gt;
&lt; 101, Kochhar, 1989-09-21 00:00:00 &gt;
&lt; 102, De Haan, 1993-01-13 00:00:00 &gt;
&lt; 103, Hunold, 1990-01-03 00:00:00 &gt;
&lt; 104, Ernst, 1991-05-21 00:00:00 &gt;
5 rows found.
Command&gt; CREATE TABLE temp_hire_date (employee_id, last_name,
        &gt; hire_date) AS SELECT FIRST 5 employee_id, last_name,
        &gt; ADD_MONTHS (hire_date, 23) FROM employees;
5 rows inserted.
Command&gt; SELECT * FROM temp_hire_date;
&lt; 100, King, 1989-05-17 00:00:00 &gt;
&lt; 101, Kochhar, 1991-08-21 00:00:00 &gt;
&lt; 102, De Haan, 1994-12-13 00:00:00 &gt;
&lt; 103, Hunold, 1991-12-03 00:00:00 &gt;
&lt; 104, Ernst, 1993-04-21 00:00:00 &gt;
5 rows found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1097348"></a>
<div id="TTSQL214" class="refsect1">
<h2 class="refsect1">ASCIISTR<a id="sthref428"></a></h2>
<p>The <code dir="ltr">ASCIISTR</code> function takes as its argument, either a string or any expression that resolves to a string, in any character set, and returns the ASCII version of the string in the database character set. Non-ASCII characters are converted to Unicode escapes.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref429"></a>SQL syntax</p>
<pre dir="ltr">ASCIISTR ([N]&#39;<span class="codeinlineitalic">String</span>&#39;)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref430"></a>Parameters</p>
<p><code dir="ltr">ASCIISTR</code> has the parameter:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table describes the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t6">Parameter</th>
<th class="cellalignment6331" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t6" headers="r1c1-t6"><code dir="ltr">[N]&#39;String&#39;</code></td>
<td class="cellalignment6332" headers="r2c1-t6 r1c2-t6">The string or expression that evaluates to a string that is passed to the <code dir="ltr">ASCIISTR</code> function. The string can be in any character set. Value can be of any supported character data types including <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NCHAR</code>, <code dir="ltr">NVARCHAR</code>, <code dir="ltr">NVARCHAR2</code>, <code dir="ltr">CLOB</code>, or <code dir="ltr">NCLOB</code> data types. Both TimesTen and Oracle Database data types are supported. The ASCII version of the string in the database character set is returned. Specify <code dir="ltr">N</code> if you want to pass the string in UTF-16 format.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref431"></a>Description</p>
<p>The <code dir="ltr">ASCIISTR</code> function enables you to see the representation of a string value that is not in the database character set.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref432"></a>Examples</p>
<p>The following example invokes the <code dir="ltr">ASCIISTR</code> function passing as an argument the string <code dir="ltr">&#39;A&auml;a&#39;</code> in UTF-16 format. The ASCII version is returned in the <code dir="ltr">WE8ISO8859P1</code> character set. The non-ASCII character <code dir="ltr">&auml;</code> is converted to Unicode encoding value:</p>
<pre dir="ltr">Command&gt; connect &#34;dsn=test; ConnectionCharacterSet= WE8ISO8859P1&#34;;
Connection successful: DSN=test;UID=user1;DataStore=/datastore/user1/test;
DatabaseCharacterSet=WE8ISO8859P1;
ConnectionCharacterSet=WE8ISO8859P1;PermSize=32;TypeMode=0;
(Default setting AutoCommit=1)
Command&gt; SELECT ASCIISTR (n&#39;A&auml;a&#39;) FROM dual;
&lt; A\00E4a &gt;
1 row found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACDJEHI"></a>
<div id="TTSQL447" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref433"></a>AVG</h2>
<p>Computes the arithmetic mean of the values in the argument. Null values are ignored.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref434"></a>SQL syntax</p>
<pre dir="ltr">AVG ([ALL | DISTINCT] <span class="codeinlineitalic">Expression</span>) [OVER ([<span class="italic">AnalyticClause</span>])]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref435"></a>Parameters</p>
<p><code dir="ltr">AVG</code> has the following parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table describes the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t7">Parameter</th>
<th class="cellalignment6331" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t7" headers="r1c1-t7"><code dir="ltr"><span class="codeinlineitalic">Expression</span></code></td>
<td class="cellalignment6332" headers="r2c1-t7 r1c2-t7">Can be any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t7" headers="r1c1-t7"><a id="sthref436"></a><a id="sthref437"></a><code dir="ltr">ALL</code></td>
<td class="cellalignment6332" headers="r3c1-t7 r1c2-t7">Includes duplicate rows in the argument of an aggregate function. If neither <code dir="ltr">ALL</code> nor <code dir="ltr">DISTINCT</code> is specified, <code dir="ltr">ALL</code> is assumed.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t7" headers="r1c1-t7"><a id="sthref438"></a><a id="sthref439"></a><code dir="ltr">DISTINCT</code></td>
<td class="cellalignment6332" headers="r4c1-t7 r1c2-t7">Eliminates duplicate column values from the argument of an aggregate function.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t7" headers="r1c1-t7"><code dir="ltr">OVER ([</code><code dir="ltr"><span class="codeinlineitalic">AnalyticClause</span></code><code dir="ltr">])</code></td>
<td class="cellalignment6332" headers="r5c1-t7 r1c2-t7">If specified, indicates aggregate analytic function. For more information on analytic functions, see <a href="#CACCGJBB">&#34;Analytic functions&#34;</a>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref440"></a>Description</p>
<ul>
<li>
<p>If <code dir="ltr">AVG</code> is computed over an empty table in which <code dir="ltr">GROUP BY</code> is not used, then <code dir="ltr">AVG</code> returns <code dir="ltr">NULL</code>.</p>
</li>
<li>
<p>If <code dir="ltr">AVG</code> is computed over an empty group or an empty grouped table (<code dir="ltr">GROUP BY</code> is used), <code dir="ltr">AVG</code> returns nothing.</p>
</li>
<li>
<p><code dir="ltr">AVG</code> is evaluated as <code dir="ltr">SUM</code>/<code dir="ltr">COUNT</code>. The result data type is derived using the rule that is applied for the <code dir="ltr">DIV</code> operator.</p>
</li>
<li>
<p>If you do not specify the <code dir="ltr"><span class="codeinlineitalic">AnalyticClause</span></code> in your query, then <code dir="ltr">AVG</code> acts as an aggregate function.</p>
</li>
<li>
<p>If you specify <code dir="ltr">DISTINCT</code> and the <code dir="ltr"><span class="codeinlineitalic">AnalyticClause</span></code>, then you can only specify the <code dir="ltr"><span class="codeinlineitalic">QueryPartitionClause</span></code>. The <code dir="ltr"><span class="codeinlineitalic">OrderByClause</span></code> and <code dir="ltr"><span class="codeinlineitalic">WindowingClause</span></code> are not allowed.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref441"></a>Examples</p>
<p>Calculate the average salary for employees in the <code dir="ltr">HR</code> schema. Use <code dir="ltr">CAST</code> to cast the average as the data type of the column:</p>
<pre dir="ltr">Command&gt; SELECT CAST(AVG (salary) AS NUMBER (8,2)) FROM employees;
&lt; 6461.68 &gt;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1000097"></a>
<div id="TTSQL216" class="refsect1">
<h2 class="refsect1">CAST<a id="sthref442"></a></h2>
<p>Enables you to convert data of one type to another type. <code dir="ltr">CAST</code> can be used wherever a constant can be used. <code dir="ltr">CAST</code> is useful in specifying the exact data type for an argument. This is especially true for unary operators like &#39;<code dir="ltr">-</code>&#39; or functions with one operand like <code dir="ltr">TO_CHAR</code> or <code dir="ltr">TO_DATE</code>.</p>
<p>A value can only be <code dir="ltr">CAST</code> to a compatible data type, with the exception of <code dir="ltr">NULL</code>. <code dir="ltr">NULL</code> can be cast to any data type. <code dir="ltr">CAST</code> is not needed to convert a <code dir="ltr">NULL</code> literal to the desired target type.</p>
<p>The following conversions are supported:</p>
<ul>
<li>
<p>Numeric value to numeric or BCD (Binary Coded Decimal)</p>
</li>
<li>
<p><code dir="ltr">NCHAR</code> to <code dir="ltr">NCHAR</code></p>
</li>
<li>
<p><code dir="ltr">CHAR</code> string to <code dir="ltr">BINARY</code> string or <code dir="ltr">DATE</code>, <code dir="ltr">TIME</code> or <code dir="ltr">TIMESTAMP</code></p>
</li>
<li>
<p><code dir="ltr">BINARY</code> string to <code dir="ltr">BINARY</code> or <code dir="ltr">CHAR</code> string</p>
</li>
<li>
<p><code dir="ltr">DATE</code>, <code dir="ltr">TIME</code> or <code dir="ltr">TIMESTAMP</code> to <code dir="ltr">CHAR</code></p>
</li>
</ul>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref443"></a>SQL syntax</p>
<pre dir="ltr">CAST
  ( {<span class="codeinlineitalic">Expression</span> | NULL} AS <span class="codeinlineitalic">DataType</span> )
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref444"></a>Parameters</p>
<p><code dir="ltr">CAST</code> has the parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table describes the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t8">Parameter</th>
<th class="cellalignment6331" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t8" headers="r1c1-t8"><code dir="ltr"><span class="codeinlineitalic">Expression</span></code></td>
<td class="cellalignment6332" headers="r2c1-t8 r1c2-t8">Specifies the value to be converted.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t8" headers="r1c1-t8"><code dir="ltr">AS</code> <code dir="ltr"><span class="codeinlineitalic">DataType</span></code></td>
<td class="cellalignment6332" headers="r3c1-t8 r1c2-t8">Specifies the resulting data type.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref445"></a>Description</p>
<ul>
<li>
<p><code dir="ltr">CAST</code> to a domain name is not supported.</p>
</li>
<li>
<p>Casting a selected value may cause the <code dir="ltr">SELECT</code> statement to take more time and memory than a <code dir="ltr">SELECT</code> statement without a <code dir="ltr">CAST</code> expression.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref446"></a>Examples</p>
<pre dir="ltr">INSERT INTO t1 VALUES(TO_CHAR(CAST(? AS REAL)));
SELECT CONCAT(x1, CAST (? AS CHAR(10))) FROM t1;        
SELECT * FROM t1 WHERE CAST (? AS INT)=CAST(? AS INT);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1036513"></a>
<div id="TTSQL217" class="refsect1">
<h2 class="refsect1">CHR<a id="sthref447"></a><a id="sthref448"></a></h2>
<p>The <code dir="ltr">CHR</code> function returns the character having the specified binary value in the database character set.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref449"></a>SQL syntax</p>
<pre dir="ltr">CHR(<span class="codeinlineitalic">n</span>)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref450"></a>Parameters</p>
<p><code dir="ltr">CHR</code> has the parameter:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table describes the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t9">Parameter</th>
<th class="cellalignment6331" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t9" headers="r1c1-t9"><code dir="ltr"><span class="codeinlineitalic">n</span></code></td>
<td class="cellalignment6332" headers="r2c1-t9 r1c2-t9">The binary value in the database character set. The character having this binary value is returned. The result is of type <code dir="ltr">VARCHAR2</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref451"></a>Description</p>
<ul>
<li>
<p>For single-byte character sets, if <code dir="ltr"><span class="codeinlineitalic">n</span></code> &gt;256, then TimesTen returns the binary value of <code dir="ltr"><span class="codeinlineitalic">n</span></code> mod 256.</p>
</li>
<li>
<p>For multibyte character sets, <code dir="ltr"><span class="codeinlineitalic">n</span></code> must resolve to one code point. Invalid code points are not validated. If you specify an invalid code point, the result is indeterminate.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref452"></a>Examples</p>
<p>The following example is run on an ASCII-based system with the <code dir="ltr">WE8ISO8859P1</code> character set.</p>
<pre dir="ltr">Command&gt; SELECT CHR(67)||CHR(65)||CHR(84) FROM dual;
&lt; CAT &gt;
1 row found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CIHEDIID"></a>
<div id="TTSQL218" class="refsect1">
<h2 class="refsect1"><a id="sthref453"></a>CEIL</h2>
<p>The <code dir="ltr">CEIL</code> function returns the smallest integer greater than or equal to <code dir="ltr"><span class="codeinlineitalic">Expression</span></code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref454"></a>SQL syntax</p>
<pre dir="ltr">CEIL(<span class="italic">Expression</span>)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref455"></a>Parameters</p>
<p><code dir="ltr">CEIL</code> has the parameter:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t10">Parameter</th>
<th class="cellalignment6331" id="r1c2-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t10" headers="r1c1-t10"><code dir="ltr"><span class="codeinlineitalic">Expression</span></code></td>
<td class="cellalignment6332" headers="r2c1-t10 r1c2-t10">Operand or column can be any numeric data type.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref456"></a>Description</p>
<ul>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is of type <code dir="ltr">TT_DECIMAL</code> or <code dir="ltr">NUMBER</code>, the data type returned is <code dir="ltr">NUMBER</code> with maximum precision and scale. Otherwise, <code dir="ltr">CEIL</code> returns the same data type as the numeric data type of <code dir="ltr"><span class="codeinlineitalic">Expression</span></code>.</p>
</li>
<li>
<p>If the value of <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is <code dir="ltr">NULL</code>, <code dir="ltr">NULL</code> is returned. If the value of <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is <code dir="ltr">-INF</code>, <code dir="ltr">INF</code>, or <code dir="ltr">NaN</code>, the value returned is <code dir="ltr">-INF</code>, <code dir="ltr">INF</code>, or <code dir="ltr">NaN</code> respectively.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref457"></a>Examples</p>
<p>Sum the <code dir="ltr">commission_pct</code> for employees in the <code dir="ltr">employees</code> table, and then call <code dir="ltr">CEIL</code> to return the smallest integer greater than or equal to the value returned by <code dir="ltr">SUM</code>. You see the value returned by the <code dir="ltr">SUM</code> function is 7.8 and the value returned by the <code dir="ltr">CEIL</code> function is 8.</p>
<pre dir="ltr">Command&gt; SELECT SUM (commission_pct) FROM employees;
&lt; 7.8 &gt;
1 row found.
Command&gt; SELECT CEIL (SUM (commission_pct)) FROM employees;
&lt; 8 &gt;
1 row found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1051444"></a>
<div id="TTSQL219" class="refsect1">
<h2 class="refsect1">COALESCE<a id="sthref458"></a><a id="sthref459"></a></h2>
<p>The <code dir="ltr">COALESCE</code> function returns the first non-null <code dir="ltr"><span class="codeinlineitalic">expression</span></code> in the expression list. If all occurrences of <code dir="ltr"><span class="codeinlineitalic">expression</span></code> evaluate to <code dir="ltr">NULL</code>, then the function returns <code dir="ltr">NULL</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref460"></a>SQL syntax</p>
<pre dir="ltr">COALESCE(<span class="italic">Expression1, Expression2</span> [,...])
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref461"></a>Parameters</p>
<p><code dir="ltr">COALESCE</code> has the parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table describes the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t11">Parameter</th>
<th class="cellalignment6331" id="r1c2-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t11" headers="r1c1-t11"><code dir="ltr"><span class="codeinlineitalic">Expression1, Expression2</span></code> <code dir="ltr">[,...]</code></td>
<td class="cellalignment6332" headers="r2c1-t11 r1c2-t11">The expressions in the expression list. The first non-null expression in the expression list is returned.
<p>Each expression is evaluated in order and there must be at least two expressions.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref462"></a>Description</p>
<ul>
<li>
<p>This function is a generalization of the <code dir="ltr"><a href="#i1027380">NVL</a></code> function.</p>
</li>
<li>
<p>Use <code dir="ltr">COALESCE</code> as a variation of the <code dir="ltr"><a href="express.htm#i1040507">CASE expressions</a></code>. For example:</p>
<pre dir="ltr">COALESCE (<span class="codeinlineitalic">Expression1</span>, <span class="codeinlineitalic">Expression2</span>)
</pre>
<p>is equivalent to:</p>
<pre dir="ltr">CASE WHEN <span class="codeinlineitalic">Expression1</span> IS NOT NULL THEN <span class="codeinlineitalic">Expression1</span>
   ELSE <span class="codeinlineitalic">Expression2</span>
END
</pre></li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref463"></a>Examples</p>
<p>The example illustrates the use of the <code dir="ltr">COALESCE</code> expression. The <code dir="ltr">COALESCE</code> expression is used to return the <code dir="ltr">commission_pct</code> for the first 10 employees with <code dir="ltr">manager_id</code> <code dir="ltr">= 100</code>. If the <code dir="ltr">commission_pct</code> is <code dir="ltr">NOT NULL</code>, then the original value for <code dir="ltr">commission_pct</code> is returned. If <code dir="ltr">commission_pct</code> is <code dir="ltr">NULL</code>, then <code dir="ltr">0</code> is returned.</p>
<pre dir="ltr">Command&gt; SELECT FIRST 10 employee_id, COALESCE (commission_pct, 0) FROM
 employees WHERE manager_id = 100;
&lt; 101, 0 &gt;
&lt; 102, 0 &gt;
&lt; 114, 0 &gt;
&lt; 120, 0 &gt;
&lt; 121, 0 &gt;
&lt; 122, 0 &gt;
&lt; 123, 0 &gt;
&lt; 124, 0 &gt;
&lt; 145, .4 &gt;
&lt; 146, .3 &gt;
10 rows found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1000740"></a>
<div id="TTSQL220" class="refsect1">
<h2 class="refsect1"><a id="sthref464"></a>CONCAT</h2>
<p>The <code dir="ltr">CONCAT</code> function concatenates one character string with another to form a new character string.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref465"></a>SQL syntax</p>
<pre dir="ltr">CONCAT(<span class="italic">Expression1</span>, <span class="italic">Expression2</span>)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref466"></a>Parameters</p>
<p><code dir="ltr">CONCAT</code> has the parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function&rsquo;s parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t12">Parameter</th>
<th class="cellalignment6331" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t12" headers="r1c1-t12"><code dir="ltr"><span class="codeinlineitalic">Expression1</span></code></td>
<td class="cellalignment6332" headers="r2c1-t12 r1c2-t12">A <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NCHAR</code>, <code dir="ltr">NVARCHAR2</code>, <code dir="ltr">CLOB</code>, or <code dir="ltr">NCLOB</code> expression.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t12" headers="r1c1-t12"><code dir="ltr"><span class="codeinlineitalic">Expression2</span></code></td>
<td class="cellalignment6332" headers="r3c1-t12 r1c2-t12">A <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NCHAR</code>, <code dir="ltr">NVARCHAR2</code>, <code dir="ltr">CLOB</code>, or <code dir="ltr">NCLOB</code> expression.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref467"></a>Description</p>
<ul>
<li>
<p><code dir="ltr">CONCAT</code> returns <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> concatenated with <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code>.</p>
</li>
<li>
<p>The type of <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> and <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code> must be compatible.</p>
</li>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code> is <code dir="ltr">NULL</code>, <code dir="ltr">CONCAT</code> returns <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code>. If <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is <code dir="ltr">NULL</code>, <code dir="ltr">CONCAT</code> returns <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code>.</p>
</li>
<li>
<p>If both <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> and <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code> are <code dir="ltr">NULL</code>, <code dir="ltr">CONCAT</code> returns <code dir="ltr">NULL</code>.</p>
</li>
<li>
<p>The treatment of <code dir="ltr">NCHAR</code> and <code dir="ltr">NVARCHAR2</code> is similar. If one of the operands is of varying length, the result is of varying length. Otherwise the result is of a fixed length.</p>
</li>
<li>
<p>The return data type of <code dir="ltr">CONCAT</code> depends on the types of <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> and <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code>. In concatenations of two different data types, the database returns the data type that can contain the result. Therefore, if one of the arguments is a national character data type, the returned value is a national character data type. If one of the arguments is a LOB, the returned value is a LOB.</p>
<p>The following table provides examples of how the return type is determined.</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Results of concatenting expressions" summary="This table shows the data type that results from the operation of CONCAT on expressions of different data types." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t13">Expression1</th>
<th class="cellalignment6331" id="r1c2-t13">Expression2</th>
<th class="cellalignment6331" id="r1c3-t13">CONCAT</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t13" headers="r1c1-t13"><code dir="ltr">CHAR</code><code dir="ltr">(</code><code dir="ltr"><span class="codeinlineitalic">m</span></code><code dir="ltr">)</code></td>
<td class="cellalignment6332" headers="r2c1-t13 r1c2-t13"><code dir="ltr">CHAR</code><code dir="ltr">(</code><code dir="ltr"><span class="codeinlineitalic">n</span></code><code dir="ltr">)</code></td>
<td class="cellalignment6332" headers="r2c1-t13 r1c3-t13"><code dir="ltr">CHAR</code><code dir="ltr">(</code><code dir="ltr"><span class="codeinlineitalic">m+n</span></code><code dir="ltr">)</code></td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t13" headers="r1c1-t13"><code dir="ltr">CHAR</code><code dir="ltr">(</code><code dir="ltr"><span class="codeinlineitalic">m</span></code><code dir="ltr">)</code></td>
<td class="cellalignment6332" headers="r3c1-t13 r1c2-t13"><code dir="ltr">VARCHAR2</code><code dir="ltr">(</code><code dir="ltr"><span class="codeinlineitalic">n</span></code><code dir="ltr">)</code></td>
<td class="cellalignment6332" headers="r3c1-t13 r1c3-t13"><code dir="ltr">VARCHAR2</code><code dir="ltr">(</code><code dir="ltr"><span class="codeinlineitalic">m+n</span></code><code dir="ltr">)</code></td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t13" headers="r1c1-t13"><code dir="ltr">VARCHAR2</code><code dir="ltr">(</code><code dir="ltr"><span class="codeinlineitalic">m</span></code><code dir="ltr">)</code></td>
<td class="cellalignment6332" headers="r4c1-t13 r1c2-t13"><code dir="ltr">CHAR</code><code dir="ltr">(</code><code dir="ltr"><span class="codeinlineitalic">n</span></code><code dir="ltr">)</code></td>
<td class="cellalignment6332" headers="r4c1-t13 r1c3-t13"><code dir="ltr">VARCHAR2</code><code dir="ltr">(</code><code dir="ltr"><span class="codeinlineitalic">m+n</span></code><code dir="ltr">)</code></td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t13" headers="r1c1-t13"><code dir="ltr">VARCHAR2</code><code dir="ltr">(</code><code dir="ltr"><span class="codeinlineitalic">m</span></code><code dir="ltr">)</code></td>
<td class="cellalignment6332" headers="r5c1-t13 r1c2-t13"><code dir="ltr">VARCHAR2</code><code dir="ltr">(</code><code dir="ltr"><span class="codeinlineitalic">n</span></code><code dir="ltr">)</code></td>
<td class="cellalignment6332" headers="r5c1-t13 r1c3-t13"><code dir="ltr">VARCHAR2</code><code dir="ltr">(</code><code dir="ltr"><span class="codeinlineitalic">m+n</span></code><code dir="ltr">)</code></td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t13" headers="r1c1-t13"><code dir="ltr">CLOB</code></td>
<td class="cellalignment6332" headers="r6c1-t13 r1c2-t13"><code dir="ltr">NCLOB</code></td>
<td class="cellalignment6332" headers="r6c1-t13 r1c3-t13"><code dir="ltr">NCLOB</code></td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r7c1-t13" headers="r1c1-t13"><code dir="ltr">NCLOB</code></td>
<td class="cellalignment6332" headers="r7c1-t13 r1c2-t13"><code dir="ltr">NCHAR</code></td>
<td class="cellalignment6332" headers="r7c1-t13 r1c3-t13"><code dir="ltr">NCLOB</code></td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r8c1-t13" headers="r1c1-t13"><code dir="ltr">NCLOB</code></td>
<td class="cellalignment6332" headers="r8c1-t13 r1c2-t13"><code dir="ltr">CHAR</code><code dir="ltr">(</code><code dir="ltr"><span class="codeinlineitalic">n</span></code><code dir="ltr">)</code></td>
<td class="cellalignment6332" headers="r8c1-t13 r1c3-t13"><code dir="ltr">NCLOB</code></td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r9c1-t13" headers="r1c1-t13"><code dir="ltr">NCHAR</code><code dir="ltr">(</code><code dir="ltr"><span class="codeinlineitalic">n</span></code><code dir="ltr">)</code></td>
<td class="cellalignment6332" headers="r9c1-t13 r1c2-t13"><code dir="ltr">CLOB</code></td>
<td class="cellalignment6332" headers="r9c1-t13 r1c3-t13"><code dir="ltr">NCLOB</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref468"></a>Examples</p>
<p>The following example concatenates first names and last names.</p>
<pre dir="ltr">Command&gt; SELECT CONCAT(CONCAT(first_name, &#39; &#39;), last_name), salary 
 FROM employees;
&lt; Steven King, 24000 &gt;
&lt; Neena Kochhar, 17000 &gt;
&lt; Lex De Haan, 17000 &gt;
&lt; Alexander Hunold, 9000 &gt;
...
107 rows found.
</pre>
<p>The following example concatenates column <code dir="ltr">id</code> with column <code dir="ltr">id2</code>. In this example, the result type is <code dir="ltr">NCHAR(40)</code>.</p>
<pre dir="ltr">Command&gt; CREATE TABLE cat (id CHAR (20), id2 NCHAR (20));
Command&gt; INSERT INTO cat VALUES (&#39;abc&#39;, &#39;def&#39;);
1 row inserted.
Command&gt; SELECT CONCAT (id,id2) FROM cat;
&lt; abc                 def                  &gt;
1 row found.
</pre>
<p>The description of the <code dir="ltr">||</code> operator is in <a href="express.htm#i1028917">&#34;Expression specification&#34;</a>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACIBBFB"></a>
<div id="TTSQL448" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref469"></a>COUNT</h2>
<p>Counts all rows that satisfy the <code dir="ltr">WHERE</code> clause, including rows containing null values. The data type of the result is <code dir="ltr">TT_INTEGER</code>.</p>
<p><code dir="ltr">COUNT</code> is an aggregate function and can also be an aggregate analytic function. For more details on aggregate functions, see <a href="#i988417">&#34;Aggregate functions&#34;</a>. For information on analytic functions, see <a href="#CACCGJBB">&#34;Analytic functions&#34;</a>. For more information on the number of rows in a table, see the description for the <code dir="ltr">NUMTUPS</code> field in <a class="olink TTSYS379" href="../TTSYS/systemtables.htm#TTSYS379">&#34;SYS.TABLES&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database System Tables and Views Reference</span>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref470"></a>SQL syntax</p>
<pre dir="ltr">COUNT ({* | [ALL | DISTINCT]{<span class="codeinlineitalic">Expression</span>|ROWID}}) 
[OVER ([<span class="italic">AnalyticClause</span>])]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref471"></a>Parameters</p>
<p><code dir="ltr">COUNT</code> has the parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table describes the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t14">Parameter</th>
<th class="cellalignment6331" id="r1c2-t14">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t14" headers="r1c1-t14"><code dir="ltr"><span class="codeinlineitalic">Expression</span></code></td>
<td class="cellalignment6332" headers="r2c1-t14 r1c2-t14">Can be any numeric data type or any nonnumeric type that can be implicitly converted to a numeric type.
<p>Counts all rows. Rows containing null values are not counted. The data type of the result is <code dir="ltr">TT_INTEGER</code>. For more information on the number of rows in a table, see the description for the <code dir="ltr">NUMTUPS</code> field in <a class="olink TTSYS379" href="../TTSYS/systemtables.htm#TTSYS379">&#34;SYS.TABLES&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database System Tables and Views Reference</span>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t14" headers="r1c1-t14"><code dir="ltr">*</code></td>
<td class="cellalignment6332" headers="r3c1-t14 r1c2-t14">Counts all rows that satisfy the <code dir="ltr">WHERE</code> clause, including duplicates and null values. <code dir="ltr">COUNT</code> never returns <code dir="ltr">NULL</code>.The data type of the result is <code dir="ltr">TT_INTEGER</code>. For more information on the number of rows in a table, see the description for the <code dir="ltr">NUMTUPS</code> field in <a class="olink TTSYS379" href="../TTSYS/systemtables.htm#TTSYS379">&#34;SYS.TABLES&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database System Tables and Views Reference</span>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t14" headers="r1c1-t14"><a id="sthref472"></a><a id="sthref473"></a><code dir="ltr">ALL</code></td>
<td class="cellalignment6332" headers="r4c1-t14 r1c2-t14">Includes duplicate rows in the argument of an aggregate function. If neither <code dir="ltr">ALL</code> nor <code dir="ltr">DISTINCT</code> is specified, <code dir="ltr">ALL</code> is assumed.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t14" headers="r1c1-t14"><a id="sthref474"></a><a id="sthref475"></a><code dir="ltr">DISTINCT</code></td>
<td class="cellalignment6332" headers="r5c1-t14 r1c2-t14">Eliminates duplicate column values from the argument of an aggregate function.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t14" headers="r1c1-t14"><code dir="ltr">ROWID</code></td>
<td class="cellalignment6332" headers="r6c1-t14 r1c2-t14">TimesTen assigns a unique ID called a rowid to each row stored in a table. The rowid value can be retrieved through the <code dir="ltr">ROWID</code> pseudocolumn. See <a href="express.htm#i1052771">&#34;ROWID&#34;</a> for more details.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r7c1-t14" headers="r1c1-t14"><code dir="ltr">OVER ([</code><code dir="ltr"><span class="codeinlineitalic">AnalyticClause</span></code><code dir="ltr">])</code></td>
<td class="cellalignment6332" headers="r7c1-t14 r1c2-t14">If specified, indicates aggregate analytic function. For more information on analytic functions, see <a href="#CACCGJBB">&#34;Analytic functions&#34;</a>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref476"></a>Description</p>
<ul>
<li>
<p>If an aggregate function is computed over an empty table in which <code dir="ltr">GROUP BY</code> is not used, <code dir="ltr">COUNT</code> returns 0.</p>
</li>
<li>
<p>If an aggregate function is computed over an empty group or an empty grouped table (<code dir="ltr">GROUP BY</code> is used), <code dir="ltr">COUNT</code> returns nothing.</p>
</li>
<li>
<p>If you do not use the <code dir="ltr"><span class="codeinlineitalic">AnalyticClause</span></code> in your query, then <code dir="ltr">COUNT</code> acts as an aggregate function.</p>
</li>
<li>
<p>If you specify <code dir="ltr">DISTINCT</code> and the <code dir="ltr"><span class="codeinlineitalic">AnalyticClause</span></code>, then you can only specify the <code dir="ltr"><span class="codeinlineitalic">QueryPartitionClause</span></code>. The <code dir="ltr"><span class="codeinlineitalic">OrderByClause</span></code> and <code dir="ltr"><span class="codeinlineitalic">WindowingClause</span></code> are not allowed.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref477"></a>Examples</p>
<p>Count the number of employees.</p>
<pre dir="ltr">Command&gt; SELECT COUNT(*) &#34;TOTAL EMP&#34; FROM employees;
 
TOTAL EMP
&lt; 107 &gt;
1 row found.
</pre></div>
<!-- class="refsubsect" -->
<p>Count the number of managers by selecting out each individual manager ID without duplication.</p>
<pre dir="ltr">Command&gt; SELECT COUNT(DISTINCT manager_id) &#34;Managers&#34; FROM employees;
 
MANAGERS
&lt; 18 &gt;
1 row found.
</pre></div>
<!-- class="refsect1" -->
<a id="CIHEICCA"></a>
<div id="TTSQL258" class="refsect1">
<h2 class="refsect1">CURRENT_USER<a id="sthref478"></a><a id="sthref479"></a><a id="sthref480"></a></h2>
<p>Returns the name of the TimesTen user currently connected to the database.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref481"></a>SQL syntax</p>
<pre dir="ltr">CURRENT_USER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref482"></a>Parameters</p>
<p><code dir="ltr">CURRENT_USER</code> has no parameters.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref483"></a>Examples</p>
<p>To return the name of the user who is currently connected to the database:</p>
<pre dir="ltr">SELECT CURRENT_USER FROM dual;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1035748"></a>
<div id="TTSQL221" class="refsect1">
<h2 class="refsect1">DECODE<a id="sthref484"></a></h2>
<p>The <code dir="ltr">DECODE</code> function compares an expression to each search value one by one. If the expression is equal to the search value, the result value is returned. If no match is found, then the default value (if specified) is returned. Otherwise <code dir="ltr">NULL</code> is returned.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref485"></a>SQL syntax</p>
<pre dir="ltr">DECODE(<span class="italic">Expression</span>, {<span class="italic">SearchValue</span>, <span class="italic">Result</span> [,...])} [,<span class="italic">Default</span>])
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref486"></a>Parameters</p>
<p><code dir="ltr">DECODE</code> has the parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t15">Parameter</th>
<th class="cellalignment6331" id="r1c2-t15">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t15" headers="r1c1-t15"><code dir="ltr"><span class="codeinlineitalic">Expression</span></code></td>
<td class="cellalignment6332" headers="r2c1-t15 r1c2-t15">The expression that is compared to the search value. <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> can be <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NCHAR</code>, or <code dir="ltr">NVARCHAR2</code> data types. Both TimesTen and Oracle Database data types are supported.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t15" headers="r1c1-t15"><code dir="ltr"><span class="codeinlineitalic">SearchValue</span></code></td>
<td class="cellalignment6332" headers="r3c1-t15 r1c2-t15">An expression is compared to one or more search values.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t15" headers="r1c1-t15"><code dir="ltr"><span class="codeinlineitalic">Result</span></code></td>
<td class="cellalignment6332" headers="r4c1-t15 r1c2-t15">If the expression is equal to a <code dir="ltr"><span class="codeinlineitalic">SearchValue</span></code>, the specified <code dir="ltr"><span class="codeinlineitalic">Result</span></code> value is returned.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t15" headers="r1c1-t15"><code dir="ltr"><span class="codeinlineitalic">Default</span></code></td>
<td class="cellalignment6332" headers="r5c1-t15 r1c2-t15">If no match is found, the default value is returned. <code dir="ltr"><span class="codeinlineitalic">Default</span></code> is optional. If <code dir="ltr"><span class="codeinlineitalic">Default</span></code> is not specified and no match is found, then <code dir="ltr">NULL</code> is returned.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref487"></a>Description</p>
<p>If an expression is <code dir="ltr">NULL</code>, then the null expression equals a null search value.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref488"></a>Examples</p>
<p>The following example invokes the <code dir="ltr">DECODE</code> function. In the <code dir="ltr">locations</code> table, if the column <code dir="ltr">country_id</code> is equal to <code dir="ltr">&#39;IT&#39;</code>, the function returns <code dir="ltr">&#39;Italy&#39;</code>. If the <code dir="ltr">country_id</code> is equal to <code dir="ltr">&#39;JP&#39;</code>, the function returns <code dir="ltr">&#39;Japan&#39;</code>. If the <code dir="ltr">country_id</code> is equal to <code dir="ltr">&#39;US&#39;</code>, <code dir="ltr">&#39;United States&#39;</code> is returned. If the <code dir="ltr">country_id</code> is not equal to <code dir="ltr">&#39;IT&#39;</code> or <code dir="ltr">&#39;JP&#39;</code> or <code dir="ltr">&#39;US&#39;</code>, the function returns <code dir="ltr">&#39;Other&#39;</code>.</p>
<pre dir="ltr">Command&gt; SELECT location_id, 
&gt; DECODE (country_id, &#39;IT&#39;, &#39;Italy&#39;, 
&gt; &#39;JP&#39;, &#39;Japan&#39;, &#39;US&#39;, &#39;United States&#39;, &#39;Other&#39;) 
&gt; FROM locations WHERE location_id &lt; 2000;

LOCATION_ID, EXP
&lt; 1000, Italy &gt;
&lt; 1100, Italy &gt;
&lt; 1200, Japan &gt;
&lt; 1300, Japan &gt;
&lt; 1400, United States &gt;
&lt; 1500, United States &gt;
&lt; 1600, United States &gt;
&lt; 1700, United States &gt;
&lt; 1800, Other &gt;
&lt; 1900, Other &gt;
10 rows found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACBHFAI"></a>
<div id="TTSQL490" class="refsect1">
<h2 class="refsect1">DENSE_RANK<a id="sthref489"></a></h2>
<p>The <code dir="ltr">DENSE_RANK</code> function is an analytic function that computes the rank of rows in an ordered group of rows and returns the ranks as type <code dir="ltr">NUMBER</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref490"></a>SQL syntax</p>
<pre dir="ltr">DENSE_RANK () OVER ( [<span class="italic">QueryPartitionClause</span>] <span class="italic">OrderByClause</span> )
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref491"></a>Parameters</p>
<p><code dir="ltr">DENSE_RANK</code> has the parameters:</p>
</div>
<!-- class="refsubsect" -->
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t16">Parameter</th>
<th class="cellalignment6331" id="r1c2-t16">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t16" headers="r1c1-t16"><code dir="ltr"><span class="codeinlineitalic">QueryPartitionClause</span></code></td>
<td class="cellalignment6332" headers="r2c1-t16 r1c2-t16">For information on syntax, semantics, and restrictions, see <a href="#CACCGJBB">&#34;Analytic functions&#34;</a>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t16" headers="r1c1-t16"><code dir="ltr"><span class="codeinlineitalic">OrderByClause</span></code></td>
<td class="cellalignment6332" headers="r3c1-t16 r1c2-t16">For information on syntax, semantics, and restrictions, see <a href="#CACCGJBB">&#34;Analytic functions&#34;</a>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref492"></a>Description</p>
<ul>
<li>
<p>The ranks are consecutive integers beginning with 1. The largest rank value is the number of unique values returned by the query. Rank values are not skipped in the event of ties. Rows with equal values for the ranking criteria receive the same rank.</p>
</li>
<li>
<p><code dir="ltr">DENSE_RANK</code> computes the rank of each row returned from a query with respect to the other rows, based on the values of the <code dir="ltr"><span class="codeinlineitalic">Expressions</span></code> in the <code dir="ltr"><span class="codeinlineitalic">OrderByClause</span></code>.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref493"></a>Example</p>
<p>Select the department name, employee name, and salary of all employees who work in the human resources or purchasing department. Compute a rank for each unique salary in each of the two departments. The salaries that are equal receive the same rank.</p>
<pre dir="ltr">Command&gt; SELECT d.department_name, e.last_name, e.salary, DENSE_RANK()
       &gt;  OVER (PARTITION BY e.department_id ORDER BY e.salary) AS dense
       &gt; FROM employees e, departments d
       &gt; WHERE e.department_id = d.department_id
       &gt;    AND d.department_id IN (&#39;30&#39;, &#39;40&#39;)
       &gt; ORDER BY e.last_name, e.salary, d.department_name, dense;
&lt; Purchasing, Baida, 2900, 4 &gt;
&lt; Purchasing, Colmenares, 2500, 1 &gt;
&lt; Purchasing, Himuro, 2600, 2 &gt;
&lt; Purchasing, Khoo, 3100, 5 &gt;
&lt; Human Resources, Mavris, 6500, 1 &gt;
&lt; Purchasing, Raphaely, 11000, 6 &gt;
&lt; Purchasing, Tobias, 2800, 3 &gt;
7 rows found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACIJDCD"></a>
<div id="TTSQL491" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">EMPTY_BLOB<a id="sthref494"></a><a id="sthref495"></a><a id="sthref496"></a></h2>
<p>A <code dir="ltr">BLOB</code> column can be initialized to a zero-length, empty <code dir="ltr">BLOB</code> using the <code dir="ltr">EMPTY_BLOB</code> function. This function initializes the LOB to a non-null value, so can be used for initializing any <code dir="ltr">BLOB</code> that has been declared as <code dir="ltr">NOT NULL</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref497"></a>SQL syntax</p>
<pre dir="ltr">EMPTY_BLOB ()
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref498"></a>Parameters</p>
<p><code dir="ltr">EMPTY_BLOB</code> has no parameters.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref499"></a>Description</p>
<p>You can only use <code dir="ltr">EMPTY_BLOB</code> in the <code dir="ltr">VALUES</code> clause of an <code dir="ltr">INSERT</code> statement or the <code dir="ltr">SET</code> clause of an <code dir="ltr">UPDATE</code> statement.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref500"></a>Examples</p>
<p>The following example uses the <code dir="ltr">EMPTY_BLOB</code> function to initialize a non-null <code dir="ltr">BLOB</code> column to a zero-length value.</p>
<pre dir="ltr">Command&gt; CREATE TABLE blob_content (
 &gt; id NUMBER PRIMARY KEY, 
 &gt; blob_column BLOB NOT NULL); -- Does not allow a NULL value

Command&gt; INSERT INTO blob_content (id, blob_column) 
 &gt; VALUES (1, EMPTY_BLOB( ) );
1 row inserted.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACBIAJH"></a>
<div id="TTSQL492" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">EMPTY_CLOB<a id="sthref501"></a><a id="sthref502"></a><a id="sthref503"></a><a id="sthref504"></a><a id="sthref505"></a></h2>
<p>A <code dir="ltr">CLOB</code> or <code dir="ltr">NCLOB</code> column can be initialized to a zero-length, empty <code dir="ltr">CLOB</code> or <code dir="ltr">NCLOB</code> using the <code dir="ltr">EMPTY_CLOB</code> function. Both <code dir="ltr">CLOB</code> and <code dir="ltr">NCLOB</code> data types are initialized with the <code dir="ltr">EMPTY_CLOB</code> function. This function initializes the LOB to a non-null value, so can be used for initializing any <code dir="ltr">CLOB</code> or <code dir="ltr">NCLOB</code> that has been declared as <code dir="ltr">NOT NULL</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref506"></a>SQL syntax</p>
<pre dir="ltr">EMPTY_CLOB () 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref507"></a>Parameters</p>
<p><code dir="ltr">EMPTY_CLOB</code> has no parameters.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref508"></a>Description</p>
<p>You can only use <code dir="ltr">EMPTY_CLOB</code> in the <code dir="ltr">VALUES</code> clause of an <code dir="ltr">INSERT</code> statement or the <code dir="ltr">SET</code> clause of an <code dir="ltr">UPDATE</code> statement.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref509"></a>Examples</p>
<p>The following example uses the <code dir="ltr">EMPTY_CLOB</code> function to initialize a non-null <code dir="ltr">CLOB</code> column to a zero-length value.</p>
<pre dir="ltr">Command&gt; CREATE TABLE clob_content ( 
 &gt; id NUMBER PRIMARY KEY, 
 &gt; clob_column CLOB NOT NULL ); -- This definition does not allow a NULL value

Command&gt; INSERT INTO clob_content (id, clob_column)
       &gt; VALUES (1, EMPTY_CLOB( ) );
1 row inserted.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1017701"></a>
<div id="TTSQL222" class="refsect1">
<h2 class="refsect1">EXTRACT<a id="sthref510"></a></h2>
<p>The <code dir="ltr">EXTRACT</code> function extracts and returns the value of a specified datetime field from a datetime or interval value expression as a <code dir="ltr">NUMBER</code> data type. This function can be useful for manipulating datetime field values in very large tables.</p>
<p>If you are using TimesTen type mode, see the Oracle TimesTen In-Memory Database Release 6.0.3 documentation for information about the <code dir="ltr">EXTRACT</code> function.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref511"></a>SQL syntax</p>
<pre dir="ltr">EXTRACT (<span class="italic">DateTimeField</span> FROM <span class="italic">IntervalExpression</span> | <span class="italic">DateTimeExpression</span>)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref512"></a>Parameters</p>
<p><code dir="ltr">EXTRACT</code> has the following parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t17">Parameter</th>
<th class="cellalignment6331" id="r1c2-t17">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t17" headers="r1c1-t17"><code dir="ltr"><span class="codeinlineitalic">DateTimeField</span></code></td>
<td class="cellalignment6332" headers="r2c1-t17 r1c2-t17">The field to be extracted from <code dir="ltr"><span class="codeinlineitalic">IntervalExpression</span></code> or <code dir="ltr"><span class="codeinlineitalic">DateTimeExpression</span></code>. Accepted fields are <code dir="ltr">YEAR</code>, <code dir="ltr">MONTH</code>, <code dir="ltr">DAY</code>, <code dir="ltr">HOUR</code>, <code dir="ltr">MINUTE</code> or <code dir="ltr">SECOND</code>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t17" headers="r1c1-t17"><code dir="ltr"><span class="codeinlineitalic">IntervalExpression</span></code></td>
<td class="cellalignment6332" headers="r3c1-t17 r1c2-t17">An interval result.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t17" headers="r1c1-t17"><code dir="ltr"><span class="codeinlineitalic">DateTimeExpression</span></code></td>
<td class="cellalignment6332" headers="r4c1-t17 r1c2-t17">A datetime expression. For example, <code dir="ltr">TIME</code>, <code dir="ltr">DATE</code>, <code dir="ltr">TIMESTAMP</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i1107311"></a>Description</p>
<ul>
<li>
<p>Some combinations of <code dir="ltr"><span class="codeinlineitalic">DateTimeField</span></code> and <code dir="ltr"><span class="codeinlineitalic">DateTimExpression</span></code> or <code dir="ltr"><span class="codeinlineitalic">IntervalExpression</span></code> result in ambiguity. In these cases, TimesTen returns <code dir="ltr">UNKNOWN</code>.</p>
</li>
<li>
<p>The field you are extracting must be a field of the <code dir="ltr"><span class="codeinlineitalic">IntervalExpression</span></code> or <code dir="ltr"><span class="codeinlineitalic">DateTimeExpression</span></code>. For example, you can extract only <code dir="ltr">YEAR</code>, <code dir="ltr">MONTH</code>, and <code dir="ltr">DAY</code> from a <code dir="ltr">DATE</code> value. Likewise, you can extract <code dir="ltr">HOUR</code>, <code dir="ltr">MINUTE</code> or <code dir="ltr">SECOND</code> only from the <code dir="ltr">TIME</code>, <code dir="ltr">DATE</code>, or <code dir="ltr">TIMESTAMP</code> data type.</p>
</li>
<li>
<p>The fields are extracted into a <code dir="ltr">NUMBER</code> value.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref513"></a>Examples</p>
<p>The following example extracts the second field out of the interval result <code dir="ltr">sysdate-t1.createtime</code>.</p>
<pre dir="ltr">SELECT EXTRACT(SECOND FROM sysdate-t1.createtime) FROM t1;
</pre>
<p>The following example extracts the second field out of <code dir="ltr">sysdate</code> from the <code dir="ltr">dual</code> system table.</p>
<pre dir="ltr">Command&gt; SELECT EXTRACT (SECOND FROM sysdate) FROM dual;
&lt; 20 &gt;
1 row found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACGHDII"></a>
<div id="TTSQL493" class="refsect1">
<h2 class="refsect1">FIRST_VALUE<a id="sthref514"></a></h2>
<p>The <code dir="ltr">FIRST_VALUE</code> function is an analytic function that returns the first value in an ordered set of values.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref515"></a>SQL syntax</p>
<pre dir="ltr">FIRST_VALUE (<span class="codeinlineitalic">Expression</span> [IGNORE NULLS]) OVER (<span class="italic">AnalyticClause</span>)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref516"></a>Parameters</p>
<p><code dir="ltr">FIRST_VALUE</code> has the parameters:</p>
</div>
<!-- class="refsubsect" -->
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t18">Parameter</th>
<th class="cellalignment6331" id="r1c2-t18">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t18" headers="r1c1-t18"><code dir="ltr"><span class="codeinlineitalic">Expression</span></code></td>
<td class="cellalignment6332" headers="r2c1-t18 r1c2-t18">For information on supported <code dir="ltr"><span class="codeinlineitalic">Expressions</span></code>, see <a href="#CACCGJBB">&#34;Analytic functions&#34;</a>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t18" headers="r1c1-t18"><code dir="ltr">IGNORE</code> <code dir="ltr">NULLS</code></td>
<td class="cellalignment6332" headers="r3c1-t18 r1c2-t18">Specify <code dir="ltr">IGNORE</code> <code dir="ltr">NULLS</code> if you want <code dir="ltr">FIRST_VALUE</code> to return the first non-null value in the set or <code dir="ltr">NULL</code> if all values in the set are <code dir="ltr">NULL</code>. Clause is optional.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t18" headers="r1c1-t18"><code dir="ltr">OVER (</code><code dir="ltr"><span class="codeinlineitalic">AnalyticClause</span></code><code dir="ltr">)</code></td>
<td class="cellalignment6332" headers="r4c1-t18 r1c2-t18">For information on syntax, semantics, and restrictions, see <a href="#CACCGJBB">&#34;Analytic functions&#34;</a>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref517"></a>Description</p>
<ul>
<li>
<p>If the first value in the set is <code dir="ltr">NULL</code>, then <code dir="ltr">FIRST_VALUE</code> returns <code dir="ltr">NULL</code> unless you specify <code dir="ltr">IGNORE NULLS</code>. Specify <code dir="ltr">IGNORE NULLS</code> if you want the function to return the first non-null value in the set or <code dir="ltr">NULL</code> if all values in the set are <code dir="ltr">NULL</code>.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref518"></a>Example</p>
<p>Use the <code dir="ltr">FIRST_VALUE</code> function to select for each employee in department 90, the last name of the employee with the lowest salary.</p>
<pre dir="ltr">Command&gt; SELECT department_id, last_name, salary, FIRST_VALUE (last_name) OVER
       &gt;   (ORDER BY salary ASC ROWS UNBOUNDED PRECEDING) AS lowest_sal
       &gt; FROM
       &gt;  (SELECT * FROM employees WHERE department_id = 90 ORDER BY employee_id)
       &gt; ORDER BY department_id, last_name, salary, lowest_sal;
&lt; 90, De Haan, 17000, Kochhar &gt;
&lt; 90, King, 24000, Kochhar &gt;
&lt; 90, Kochhar, 17000, Kochhar &gt;
3 rows found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CIHCGGHJ"></a>
<div id="TTSQL223" class="refsect1">
<h2 class="refsect1"><a id="sthref519"></a>FLOOR</h2>
<p>The <code dir="ltr">FLOOR</code> function returns the largest integer equal to or less than <code dir="ltr"><span class="codeinlineitalic">Expression</span></code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref520"></a>SQL syntax</p>
<pre dir="ltr">FLOOR (<span class="italic">Expression</span>)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref521"></a>Parameters</p>
<p><code dir="ltr">FLOOR</code> has the parameter:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t19">Parameter</th>
<th class="cellalignment6331" id="r1c2-t19">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t19" headers="r1c1-t19"><code dir="ltr"><span class="codeinlineitalic">Expression</span></code></td>
<td class="cellalignment6332" headers="r2c1-t19 r1c2-t19">Operand or column can be any numeric data type.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref522"></a>Description</p>
<ul>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is of type <code dir="ltr">TT_DECIMAL</code> or <code dir="ltr">NUMBER</code>, the data type returned is <code dir="ltr">NUMBER</code> with maximum precision and scale. Otherwise, <code dir="ltr">FLOOR</code> returns the same data type as the numeric data type of <code dir="ltr"><span class="codeinlineitalic">Expression</span></code>.</p>
</li>
<li>
<p>If the value of <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is <code dir="ltr">NULL</code>, <code dir="ltr">NULL</code> is returned. If the value of <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is <code dir="ltr">-INF</code>, <code dir="ltr">INF</code>, or <code dir="ltr">NaN</code>, the value returned is <code dir="ltr">-INF</code>, <code dir="ltr">INF</code>, or <code dir="ltr">NaN</code> respectively.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref523"></a>Examples</p>
<p>Sum the <code dir="ltr">commission_pct</code> for employees in the <code dir="ltr">employees</code> table. Then call <code dir="ltr">FLOOR</code> to return the largest integer equal to or less than the value returned by <code dir="ltr">SUM</code>. You see the value returned by the <code dir="ltr">SUM</code> function is <code dir="ltr">7.8</code> and the value returned by the <code dir="ltr">FLOOR</code> function is 7:</p>
<pre dir="ltr">Command&gt; SELECT SUM (commission_pct) FROM employees;
&lt; 7.8 &gt;
1 row found.
Command&gt; SELECT FLOOR (SUM (commission_pct)) FROM employees;
&lt; 7 &gt;
1 row found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CIHHGEHE"></a>
<div id="TTSQL224" class="refsect1">
<h2 class="refsect1"><a id="sthref524"></a><a id="sthref525"></a>GREATEST</h2>
<p>The <code dir="ltr">GREATEST</code> function returns the greatest of the list of one or more expressions.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref526"></a>SQL syntax</p>
<pre dir="ltr">GREATEST (<span class="italic">Expression </span>[,...])
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref527"></a>Parameters</p>
<p><code dir="ltr">GREATEST</code> has the parameter:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t20">Parameter</th>
<th class="cellalignment6331" id="r1c2-t20">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t20" headers="r1c1-t20"><code dir="ltr"><span class="codeinlineitalic">Expression</span></code> <code dir="ltr">[,...]</code></td>
<td class="cellalignment6332" headers="r2c1-t20 r1c2-t20">List of one or more expressions that is evaluated to determine the greatest expression value. Operand or column can be numeric, character or date. Each expression in the list must be from the same data type family.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref528"></a>Description</p>
<ul>
<li>
<p>Each expression in the list must be from the same data type family or date subfamily. Data type families include numeric, character and date. The date family includes four subfamilies: date family, <code dir="ltr">TIME</code> family, <code dir="ltr">TT_DATE</code> family, and <code dir="ltr">TT_TIMESTAMP</code> family. As an example, do not specify a numeric expression and a character expression in the list of expressions. Similarly, do not specify a date expression and a <code dir="ltr">TT_TIMESTAMP</code> expression in the list of expressions.</p>
</li>
<li>
<p>If the first <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is numeric, then TimesTen determines the argument with the highest numeric precedence, implicitly converts the remaining arguments to that data type before the comparison, and returns that data type.</p>
</li>
<li>
<p>If the first <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is in the character family, and the operand or column is of type <code dir="ltr">CHAR</code> or <code dir="ltr">VARCHAR2</code>, the data type returned is <code dir="ltr">VARCHAR2</code>. If the operand or column is of type <code dir="ltr">NCHAR</code> or <code dir="ltr">NVARCHAR2</code>, the data type returned is <code dir="ltr">NVARCHAR2</code>. The returned data type length is equal to the length of the largest expression. If one operand or column is of type <code dir="ltr">CHAR</code> or <code dir="ltr">VARCHAR2</code> and the second operand or column is of type <code dir="ltr">NCHAR</code> or <code dir="ltr">NVARCHAR2</code>, the data type returned is <code dir="ltr">NVARCHAR2</code>.</p>
</li>
<li>
<p>TimesTen uses nonpadded comparison semantics for data types from the character family.</p>
</li>
<li>
<p>If the first expression is in the date family, the data type returned is the same data type as the first expression.</p>
</li>
<li>
<p>If any of the expressions is <code dir="ltr">NULL</code>, the result is <code dir="ltr">NULL</code>.</p>
</li>
<li>
<p>If the first <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is in the character family, and the operand or column is of type <code dir="ltr">TT_CHAR</code> or <code dir="ltr">TT_VARCHAR</code>, the data type returned is <code dir="ltr">TT_VARCHAR</code>. If the operand or column is of type <code dir="ltr">TT_NCHAR</code> or <code dir="ltr">TT_NVARCHAR</code>, the data type returned is <code dir="ltr">TT_NVARCHAR</code>. The returned data type length is equal to the largest of the expressions.</p>
</li>
<li>
<p>You can specify a maximum of 256 expressions.</p>
</li>
</ul>
<p>Use the <code dir="ltr">GREATEST</code> function to return the string with the greatest value:</p>
<pre dir="ltr">Command&gt; SELECT GREATEST (&#39;GREAT&#39;, &#39;GREATER&#39;, &#39;GREATEST&#39;) FROM dual;
&lt; GREATEST &gt;
1 row found.
</pre>
<p>Use the <code dir="ltr">GREATEST</code> function to return the numeric expression with the greatest value. In this example, <code dir="ltr">BINARY_DOUBLE</code> is the data type with the highest numeric precedence, so arguments are implicitly converted to <code dir="ltr">BINARY_DOUBLE</code> before the comparison and the data type <code dir="ltr">BINARY_DOUBLE</code> is returned:</p>
<pre dir="ltr">Command&gt; SELECT GREATEST (10, 10.55, 10.1D) FROM dual;
&lt; 10.5500000000000 &gt;
1 row found.
</pre>
<p>Use the <code dir="ltr">DESCRIBE</code> command to confirm the data type returned is <code dir="ltr">BINARY_DOUBLE</code>:</p>
<pre dir="ltr">Command&gt; DESCRIBE SELECT GREATEST (10, 10.55, 10.1D) FROM dual;

Prepared Statement:
  Columns:
    EXP                             BINARY_DOUBLE NOT NULL
</pre>
<p>Use the <code dir="ltr">GREATEST</code> function to return the <code dir="ltr">DATE</code> expression with the greatest value. <code dir="ltr">DATE</code> and <code dir="ltr">TIMESTAMP</code> are in the same date family.</p>
<pre dir="ltr">Command&gt; SELECT GREATEST (DATE &#39;2007-09-30&#39;,
       &gt; TIMESTAMP &#39;2007-09-30:10:00:00&#39;) FROM dual;
&lt; 2007-09-30 10:00:00 &gt;
1 row found.
</pre>
<p>Attempt to use the <code dir="ltr">GREATEST</code> function to return the greatest value in the list of <code dir="ltr">TT_DATE</code> and <code dir="ltr">TT_TIMESTAMP</code> expressions. You see an error because <code dir="ltr">TT_DATE</code> and <code dir="ltr">TT_TIMESTAMP</code> are in different date subfamilies and cannot be used in the same list of expressions.</p>
<pre dir="ltr">Command&gt; SELECT GREATEST (TT_DATE &#39;2007-09-30&#39;, TT_TIMESTAMP
       &gt; &#39;2007-09-30:10:00:00&#39;) FROM dual;
2817: Invalid data type TT_TIMESTAMP for argument 2 for function GREATEST
The command failed.
</pre>
<p>Use the <code dir="ltr">GREATEST</code> function to return the <code dir="ltr">TT_DATE</code> expression with the greatest value.</p>
<pre dir="ltr">Command&gt; SELECT GREATEST (TT_DATE &#39;2007-09-30&#39;,
       &gt; TT_DATE &#39;2007-09-29&#39;, TT_DATE &#39;2007-09-28&#39;) FROM dual;
&lt; 2007-09-30 &gt;
1 row found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABGIDFD"></a>
<div id="TTSQL449" class="refsect1">
<h2 class="refsect1"><a id="sthref529"></a><a id="sthref530"></a><a id="sthref531"></a><a id="sthref532"></a>GROUP_ID</h2>
<p>The <code dir="ltr">GROUP_ID</code> function identifies duplicate groups in a <code dir="ltr">SELECT</code> query resulting from a <code dir="ltr">GROUP</code> <code dir="ltr">BY</code> clause. This function returns the number 0 for a unique group; any subsequent duplicate grouping row receives a higher number, starting with 1. The <code dir="ltr">GROUP_ID</code> function filters out duplicate groupings from the query result. If you have complicated queries that may generate duplicate values, you can eliminate those rows by including the <code dir="ltr">HAVING GROUP_ID() = 0</code> condition.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
For full details on the <code dir="ltr">GROUP BY</code> clause, see <a href="state.htm#BABCDBAF">&#34;GROUP BY clause&#34;</a>. For details on the <code dir="ltr">HAVING</code> clause, see <a href="state.htm#i1049447">&#34;SELECT&#34;</a>.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref533"></a><span class="bold">Syntax</span></p>
<p>The <code dir="ltr">GROUP_ID</code> function is applicable only in a <code dir="ltr">SELECT</code> statement that contains a <code dir="ltr">GROUP BY</code> clause; it can be used in the select list and <code dir="ltr">HAVING</code> clause of the <code dir="ltr">SELECT</code> query.</p>
<pre dir="ltr">GROUP_ID()
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref534"></a>Parameters</p>
<p><code dir="ltr">GROUP_ID</code> has no parameters.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref535"></a><span class="bold">Example</span></p>
<p>The following example shows how <code dir="ltr">GROUP_ID</code> returns 0 for a unique group and a number &gt; 0 to identify duplicate groups. The following example prints out the department number, manager id and the sum of the salary within the manager. The resulting output is grouped using the <code dir="ltr">ROLLUP</code> clause on the manager and department providing superaggregate results.</p>
<pre dir="ltr">Command&gt; SELECT department_id as DEPT, manager_id AS MGR, 
 GROUP_ID(), SUM(salary) as SALARY
 FROM employees 
 WHERE manager_id &gt; 146 
 GROUP BY manager_id, ROLLUP(manager_id, department_id) 
 ORDER BY manager_id, department_id;
 
DEPT, MGR, EXP, SALARY
&lt; 80, 147, 0, 46600 &gt;
&lt; &lt;NULL&gt;, 147, 1, 46600 &gt;
&lt; &lt;NULL&gt;, 147, 0, 46600 &gt;
&lt; 80, 148, 0, 51900 &gt;
&lt; &lt;NULL&gt;, 148, 0, 51900 &gt;
&lt; &lt;NULL&gt;, 148, 1, 51900 &gt;
&lt; 80, 149, 0, 43000 &gt;
&lt; &lt;NULL&gt;, 149, 0, 7000 &gt;
&lt; &lt;NULL&gt;, 149, 0, 50000 &gt;
&lt; &lt;NULL&gt;, 149, 1, 50000 &gt;
&lt; 20, 201, 0, 6000 &gt;
&lt; &lt;NULL&gt;, 201, 0, 6000 &gt;
&lt; &lt;NULL&gt;, 201, 1, 6000 &gt;
&lt; 110, 205, 0, 8300 &gt;
&lt; &lt;NULL&gt;, 205, 0, 8300 &gt;
&lt; &lt;NULL&gt;, 205, 1, 8300 &gt;
16 rows found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABJEEAH"></a>
<div id="TTSQL450" class="refsect1">
<h2 class="refsect1"><a id="sthref536"></a>GROUPING</h2>
<p>The <code dir="ltr">GROUPING</code> function enables you to determine whether a <code dir="ltr">NULL</code> is a stored <code dir="ltr">NULL</code> or an indication of a subtotal or grand total. Using a single column as its argument, <code dir="ltr">GROUPING</code> returns a 1 when it encounters a null value created by a <code dir="ltr">ROLLUP</code> or <code dir="ltr">CUBE</code> operation, indicating a subtotal or grand total. Any other type of value, including a stored <code dir="ltr">NULL</code>, returns a 0.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
For full details on <code dir="ltr">ROLLUP</code> and <code dir="ltr">CUBE</code> clauses, see <a href="state.htm#BABCDBAF">&#34;GROUP BY clause&#34;</a>.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref537"></a>Syntax</p>
<p><a id="sthref538"></a>The <code dir="ltr">GROUPING</code> function is applicable only in a <code dir="ltr">SELECT</code> statement that contains a <code dir="ltr">GROUP BY</code> clause. It can be used in the select list and <code dir="ltr">HAVING</code> clause of the <code dir="ltr">SELECT</code> query that includes the <code dir="ltr">GROUP BY</code> clause. The expression indicated in the <code dir="ltr">GROUPING</code> function syntax must match one of the expressions contained in the <code dir="ltr">GROUP BY</code> clause.</p>
<p>The following syntax uses <code dir="ltr">GROUPING</code> to identify the results from the expression listed as an aggregate or not:</p>
<pre dir="ltr">SELECT ...  [GROUPING(<span class="italic">Expression</span>) ... ]  ... 
  GROUP BY ... { <span class="italic">RollupCubeClause</span> | <span class="italic">GroupingSetsClause</span> } ...
</pre>
<p><a id="sthref539"></a>The following syntax uses <code dir="ltr">GROUPING</code> within a <code dir="ltr">HAVING</code> clause to identify the results from the expression listed as an aggregate or not:</p>
<pre dir="ltr">SELECT ...
  GROUP BY ... { <span class="italic">RollupCubeClause</span> | <span class="italic">GroupingSetsClause</span> } ...
 HAVING GROUPING(<span class="italic">Expression</span>) = 1
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref540"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for the DerivedTable parameter of the TableSpec clause of SELECT." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t23">Parameter</th>
<th class="cellalignment6331" id="r1c2-t23">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t23" headers="r1c1-t23"><code dir="ltr"><span class="codeinlineitalic">Expression</span></code></td>
<td class="cellalignment6332" headers="r2c1-t23 r1c2-t23">Valid expression syntax. See <a href="express.htm#i996218">Chapter 3, &#34;Expressions&#34;</a>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t23" headers="r1c1-t23"><code dir="ltr"><span class="codeinlineitalic">RollupCubeClause</span></code></td>
<td class="cellalignment6332" headers="r3c1-t23 r1c2-t23">The <code dir="ltr">GROUP BY</code> clause may include one or more <code dir="ltr">ROLLUP</code> or <code dir="ltr">CUBE</code> clauses. See <a href="state.htm#BABCDBAF">&#34;GROUP BY clause&#34;</a> for full details.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t23" headers="r1c1-t23"><code dir="ltr"><span class="codeinlineitalic">GroupingSetsClause</span></code></td>
<td class="cellalignment6332" headers="r4c1-t23 r1c2-t23">The <code dir="ltr">GROUP BY</code> clause may include one or more <code dir="ltr">GROUPING SETS</code> clauses. The <code dir="ltr">GROUPING SETS</code> clause enables you to explicitly specify which groupings of data that the database returns. For more information, see <a href="state.htm#BABEFAGA">&#34;GROUPING SETS&#34;</a>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref541"></a>Examples</p>
<p>The following example shows how the grouping function returns a &#39;1&#39; when it encounters the grand total for the department.</p>
<pre dir="ltr">Command&gt; SELECT department_id AS DEPT, 
GROUPING(department_id) AS DEPT_GRP, SUM(salary) AS SALARY 
FROM emp_details_view 
GROUP BY ROLLUP(department_id) 
ORDER BY department_id; 
DEPT, DEPT_GRP, SALARY
&lt; 10, 0, 4400 &gt;
&lt; 20, 0, 19000 &gt;
&lt; 30, 0, 24900 &gt;
&lt; 40, 0, 6500 &gt;
&lt; 50, 0, 156400 &gt;
&lt; 60, 0, 28800 &gt;
&lt; 70, 0, 10000 &gt;
&lt; 80, 0, 304500 &gt;
&lt; 90, 0, 58000 &gt;
&lt; 100, 0, 51600 &gt;
&lt; 110, 0, 20300 &gt;
&lt; &lt;NULL&gt;, 1, 684400 &gt;
12 rows found.
</pre>
<p>The following example shows that you can use the <code dir="ltr">GROUPING</code> function for each column to determine which null values are for the totals.</p>
<pre dir="ltr">Command&gt; SELECT department_id AS DEPT, job_id AS JOB, 
GROUPING(department_id) AS DEPT_GRP, GROUPING(job_id) AS JOB_GRP, 
GROUPING_ID(department_id, job_id) AS GRP_ID, SUM(salary) AS SALARY 
FROM emp_details_view 
GROUP BY CUBE(department_id, job_id) 
ORDER BY department_id, job_id, grp_id ASC;
 
DEPT, JOB, DEPT_GRP, JOB_GRP, GRP_ID, SALARY
&lt; 10, AD_ASST, 0, 0, 0, 4400 &gt;
&lt; 10, &lt;NULL&gt;, 0, 1, 1, 4400 &gt;
&lt; 20, MK_MAN, 0, 0, 0, 13000 &gt;
&lt; 20, MK_REP, 0, 0, 0, 6000 &gt;
&lt; 20, &lt;NULL&gt;, 0, 1, 1, 19000 &gt;
&lt; 30, PU_CLERK, 0, 0, 0, 13900 &gt;
&lt; 30, PU_MAN, 0, 0, 0, 11000 &gt;
&lt; 30, &lt;NULL&gt;, 0, 1, 1, 24900 &gt;
...
&lt; 110, AC_ACCOUNT, 0, 0, 0, 8300 &gt;
&lt; 110, AC_MGR, 0, 0, 0, 12000 &gt;
&lt; 110, &lt;NULL&gt;, 0, 1, 1, 20300 &gt;
&lt; &lt;NULL&gt;, AC_ACCOUNT, 1, 0, 2, 8300 &gt;
&lt; &lt;NULL&gt;, AC_MGR, 1, 0, 2, 12000 &gt;
&lt; &lt;NULL&gt;, AD_ASST, 1, 0, 2, 4400 &gt;
&lt; &lt;NULL&gt;, AD_PRES, 1, 0, 2, 24000 &gt;
&lt; &lt;NULL&gt;, AD_VP, 1, 0, 2, 34000 &gt;
&lt; &lt;NULL&gt;, FI_ACCOUNT, 1, 0, 2, 39600 &gt;
&lt; &lt;NULL&gt;, FI_MGR, 1, 0, 2, 12000 &gt;
&lt; &lt;NULL&gt;, HR_REP, 1, 0, 2, 6500 &gt;
&lt; &lt;NULL&gt;, IT_PROG, 1, 0, 2, 28800 &gt;
&lt; &lt;NULL&gt;, MK_MAN, 1, 0, 2, 13000 &gt;
&lt; &lt;NULL&gt;, MK_REP, 1, 0, 2, 6000 &gt;
&lt; &lt;NULL&gt;, PR_REP, 1, 0, 2, 10000 &gt;
&lt; &lt;NULL&gt;, PU_CLERK, 1, 0, 2, 13900 &gt;
&lt; &lt;NULL&gt;, PU_MAN, 1, 0, 2, 11000 &gt;
&lt; &lt;NULL&gt;, SA_MAN, 1, 0, 2, 61000 &gt;
&lt; &lt;NULL&gt;, SA_REP, 1, 0, 2, 243500 &gt;
&lt; &lt;NULL&gt;, SH_CLERK, 1, 0, 2, 64300 &gt;
&lt; &lt;NULL&gt;, ST_CLERK, 1, 0, 2, 55700 &gt;
&lt; &lt;NULL&gt;, ST_MAN, 1, 0, 2, 36400 &gt;
&lt; &lt;NULL&gt;, &lt;NULL&gt;, 1, 1, 3, 684400 &gt;
50 rows found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABFCCHD"></a>
<div id="TTSQL451" class="refsect1">
<h2 class="refsect1"><a id="sthref542"></a><a id="sthref543"></a><a id="sthref544"></a><a id="sthref545"></a>GROUPING_ID</h2>
<p>The <code dir="ltr">GROUPING_ID</code> function returns a number that shows the exact <code dir="ltr">GROUP BY</code> level of aggregation resulting from a <code dir="ltr">ROLLUP</code> or <code dir="ltr">CUBE</code> clause.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
For details on <code dir="ltr">ROLLUP</code> and <code dir="ltr">CUBE</code> clauses, see <a href="state.htm#BABCDBAF">&#34;GROUP BY clause&#34;</a>.</div>
<p>The <code dir="ltr">GROUPING_ID</code> function takes the ordered list of grouping columns from the <code dir="ltr">ROLLUP</code> or <code dir="ltr">CUBE</code> as input and computes the grouping ID as follows:</p>
<ol>
<li>
<p>Applies the <code dir="ltr">GROUPING</code> function to each of the individual columns in the list. The result is a set of ones and zeros, where 1 represents a superaggregate generated by the <code dir="ltr">ROLLUP</code> or <code dir="ltr">CUBE</code>.</p>
</li>
<li>
<p>Puts these ones and zeros in the same order as the order of the columns in its argument list to produce a bit vector.</p>
</li>
<li>
<p>Converts this bit vector from a binary number into a decimal (base 10) number, which is returned as the grouping ID.</p>
</li>
</ol>
<p>For instance, if you group with <code dir="ltr">CUBE(department_id, job_id)</code>, the returned values are as shown in <a href="#BABEHJFJ">Table 4-1</a>.</p>
<div id="TTSQL452" class="tblhruleformal">
<p class="titleintable"><a id="sthref546"></a><a id="BABEHJFJ"></a>Table 4-1 GROUPING_ID Example for CUBE(department_id, job_id)</p>
<table class="cellalignment6330" title="GROUPING_ID Example for CUBE(department_id, job_id)" summary="GROUPING_ID example" dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t25">Aggregation Level</th>
<th class="cellalignment6331" id="r1c2-t25">Bit Vector</th>
<th class="cellalignment6331" id="r1c3-t25">GROUPING_ID</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t25" headers="r1c1-t25">
<p>Normal grouping rows for department and job</p>
</td>
<td class="cellalignment6332" headers="r2c1-t25 r1c2-t25">
<p>0 0</p>
</td>
<td class="cellalignment6332" headers="r2c1-t25 r1c3-t25">
<p>0</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t25" headers="r1c1-t25">
<p>Subtotal for <code dir="ltr">department_id</code>, aggregated at <code dir="ltr">job_id</code></p>
</td>
<td class="cellalignment6332" headers="r3c1-t25 r1c2-t25">
<p>0 1</p>
</td>
<td class="cellalignment6332" headers="r3c1-t25 r1c3-t25">
<p>1</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t25" headers="r1c1-t25">
<p>Subtotal for <code dir="ltr">job_id</code>, aggregated at <code dir="ltr">department_id</code></p>
</td>
<td class="cellalignment6332" headers="r4c1-t25 r1c2-t25">
<p>1 0</p>
</td>
<td class="cellalignment6332" headers="r4c1-t25 r1c3-t25">
<p>2</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t25" headers="r1c1-t25">
<p>Grand total</p>
</td>
<td class="cellalignment6332" headers="r5c1-t25 r1c2-t25">
<p>1 1</p>
</td>
<td class="cellalignment6332" headers="r5c1-t25 r1c3-t25">
<p>3</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" -->
<p>The <code dir="ltr">GROUPING_ID</code> function can be used in a query to filter rows so that only the summary rows are displayed. You can use the <code dir="ltr">GROUPING_ID</code> function in the <code dir="ltr">HAVING</code> clause to restrict output to only those rows that contain totals and subtotals. This can be accomplished when adding a comparison of the <code dir="ltr">GROUPING_ID</code> function results as greater than zero in the <code dir="ltr">HAVING</code> clause.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref547"></a>Syntax</p>
<p>The <code dir="ltr">GROUPING_ID</code> function is applicable only in a <code dir="ltr">SELECT</code> statement that contains the <code dir="ltr">GROUP BY</code> clause, a <code dir="ltr">GROUPING</code> function, and one of the following clauses: <code dir="ltr">ROLLUP</code>, <code dir="ltr">CUBE</code> or <code dir="ltr">GROUPING SETS</code> clauses. It can be used in the select list and <code dir="ltr">HAVING</code> clause of the <code dir="ltr">SELECT</code> query.</p>
<pre dir="ltr">GROUPING_ID(<span class="italic">Expression</span> [, <span class="italic">Expression</span> ]...)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref548"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for the DerivedTable parameter of the TableSpec clause of SELECT." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t26">Parameter</th>
<th class="cellalignment6331" id="r1c2-t26">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t26" headers="r1c1-t26"><code dir="ltr"><span class="codeinlineitalic">Expression</span></code></td>
<td class="cellalignment6332" headers="r2c1-t26 r1c2-t26">Valid expression syntax. See <a href="express.htm#i996218">Chapter 3, &#34;Expressions&#34;</a>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref549"></a>Examples</p>
<p>The following example has the <code dir="ltr">HAVING</code> clause filter on the <code dir="ltr">GROUPING_ID</code> function, where the returned value is greater than zero. This excludes rows that do not contain either a subtotal or grand total. The following example shows the subtotals for the departments are identified with a group ID of 1, subtotals for the job ID with a group ID of 2 and the grand total with a group ID of 3:</p>
<pre dir="ltr">Command&gt; SELECT department_id AS DEPT, job_id AS JOB, 
GROUPING_ID(department_id, job_id) AS GRP_ID, 
SUM(salary) AS SALARY 
FROM emp_details_view 
GROUP BY CUBE(department_id, job_id) 
HAVING GROUPING_ID(department_id, job_id) &gt; 0 
ORDER BY department_id, job_id, grp_id ASC;
 
DEPT, JOB, GRP_ID, SALARY
&lt; 10, &lt;NULL&gt;, 1, 4400 &gt;
&lt; 20, &lt;NULL&gt;, 1, 19000 &gt;
&lt; 30, &lt;NULL&gt;, 1, 24900 &gt;
&lt; 40, &lt;NULL&gt;, 1, 6500 &gt;
&lt; 50, &lt;NULL&gt;, 1, 156400 &gt;
&lt; 60, &lt;NULL&gt;, 1, 28800 &gt;
&lt; 70, &lt;NULL&gt;, 1, 10000 &gt;
&lt; 80, &lt;NULL&gt;, 1, 304500 &gt;
&lt; 90, &lt;NULL&gt;, 1, 58000 &gt;
&lt; 100, &lt;NULL&gt;, 1, 51600 &gt;
&lt; 110, &lt;NULL&gt;, 1, 20300 &gt;
&lt; &lt;NULL&gt;, AC_ACCOUNT, 2, 8300 &gt;
&lt; &lt;NULL&gt;, AC_MGR, 2, 12000 &gt;
&lt; &lt;NULL&gt;, AD_ASST, 2, 4400 &gt;
&lt; &lt;NULL&gt;, AD_PRES, 2, 24000 &gt;
&lt; &lt;NULL&gt;, AD_VP, 2, 34000 &gt;
&lt; &lt;NULL&gt;, FI_ACCOUNT, 2, 39600 &gt;
&lt; &lt;NULL&gt;, FI_MGR, 2, 12000 &gt;
&lt; &lt;NULL&gt;, HR_REP, 2, 6500 &gt;
&lt; &lt;NULL&gt;, IT_PROG, 2, 28800 &gt;
&lt; &lt;NULL&gt;, MK_MAN, 2, 13000 &gt;
&lt; &lt;NULL&gt;, MK_REP, 2, 6000 &gt;
&lt; &lt;NULL&gt;, PR_REP, 2, 10000 &gt;
&lt; &lt;NULL&gt;, PU_CLERK, 2, 13900 &gt;
&lt; &lt;NULL&gt;, PU_MAN, 2, 11000 &gt;
&lt; &lt;NULL&gt;, SA_MAN, 2, 61000 &gt;
&lt; &lt;NULL&gt;, SA_REP, 2, 243500 &gt;
&lt; &lt;NULL&gt;, SH_CLERK, 2, 64300 &gt;
&lt; &lt;NULL&gt;, ST_CLERK, 2, 55700 &gt;
&lt; &lt;NULL&gt;, ST_MAN, 2, 36400 &gt;
&lt; &lt;NULL&gt;, &lt;NULL&gt;, 3, 684400 &gt;
31 rows found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1120281"></a>
<div id="TTSQL244" class="refsect1">
<h2 class="refsect1">INSTR, INSTRB, INSTR4<a id="sthref550"></a><a id="sthref551"></a><a id="sthref552"></a><a id="sthref553"></a><a id="sthref554"></a></h2>
<p>Determines the first position, if any, at which one string occurs within another. If the substring does not occur in the string, <code dir="ltr">0</code> is returned. The position returned is always relative to the beginning of <code dir="ltr"><span class="codeinlineitalic">SourceExpr</span></code>. <code dir="ltr">INSTR</code> returns type <code dir="ltr">NUMBER</code>.</p>
<p>If you are using TimesTen type mode, for information on the <code dir="ltr">INSTR</code> function, see the Oracle TimesTen In-Memory Database Release 6.0.3 documentation.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref555"></a>SQL syntax</p>
<pre dir="ltr">{INSTR | INSTRB | INSTR4} ( <span class="codeinlineitalic">SourceExpr</span>, <span class="codeinlineitalic">SearchExpr</span> [,<span class="codeinlineitalic">m</span>[,<span class="codeinlineitalic">n</span>]])
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref556"></a>Parameters</p>
<p><code dir="ltr">INSTR</code> has the parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t27">Parameter</th>
<th class="cellalignment6331" id="r1c2-t27">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t27" headers="r1c1-t27"><code dir="ltr"><span class="codeinlineitalic">SourceExpr</span></code></td>
<td class="cellalignment6332" headers="r2c1-t27 r1c2-t27">The string to be searched to find the position of <code dir="ltr"><span class="codeinlineitalic">SearchExpr.</span></code> Value can be any supported character data types including <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NCHAR</code>, <code dir="ltr">NVARCHAR2</code>, <code dir="ltr">CLOB</code>, or <code dir="ltr">NCLOB</code> data types. Both TimesTen and Oracle Database data types are supported.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t27" headers="r1c1-t27"><code dir="ltr"><span class="codeinlineitalic">SearchExpr</span></code></td>
<td class="cellalignment6332" headers="r3c1-t27 r1c2-t27">The substring to be found in string <code dir="ltr"><span class="codeinlineitalic">SourceExpr.</span></code> If <code dir="ltr"><span class="codeinlineitalic">SearchExpr</span></code> does not occur in <code dir="ltr"><span class="codeinlineitalic">SourceExpr</span></code>, zero is returned. If either string is of length zero, <code dir="ltr">NULL</code> is returned.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t27" headers="r1c1-t27"><code dir="ltr"><span class="codeinlineitalic">m</span></code></td>
<td class="cellalignment6332" headers="r4c1-t27 r1c2-t27">The optional position at which to begin the search. If <code dir="ltr"><span class="codeinlineitalic">m</span></code> is specified as zero, the result is zero. If <code dir="ltr"><span class="codeinlineitalic">m</span></code> is positive, the search begins at the <code dir="ltr"><span class="codeinlineitalic">CharExpr2</span></code>+<code dir="ltr"><span class="codeinlineitalic">m</span></code>. If <code dir="ltr"><span class="codeinlineitalic">m</span></code> is negative, the search begins <span class="italic">m</span> characters from the end of <code dir="ltr"><span class="codeinlineitalic">CharExpr2</span></code>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t27" headers="r1c1-t27"><code dir="ltr"><span class="codeinlineitalic">n</span></code></td>
<td class="cellalignment6332" headers="r5c1-t27 r1c2-t27">If <code dir="ltr"><span class="codeinlineitalic">n</span></code> is specified it must be a positive value and the search returns the position of the <code dir="ltr"><span class="codeinlineitalic">n</span></code>th occurrence of <code dir="ltr"><span class="codeinlineitalic">CharExpr1</span></code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref557"></a>Description</p>
<p><code dir="ltr">INSTR</code> calculates strings using characters as defined by character set. <code dir="ltr">INSTRB</code> uses bytes instead of characters. <code dir="ltr">INSTR4</code> uses UCS4 code points.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref558"></a>Examples</p>
<p>The following example uses <code dir="ltr">INSTR</code> to determine the position at which the substring <code dir="ltr">&#39;ing&#39;</code> occurs in the string <code dir="ltr">&#39;Washington&#39;</code>:</p>
<pre dir="ltr">Command&gt; SELECT INSTR (&#39;Washington&#39;, &#39;ing&#39;) FROM dual;
&lt; 5 &gt;
1 row found.
</pre>
<p>The following example uses <code dir="ltr">INSTR</code> to provide the number of employees with a &#39;650&#39; area code as input to the <code dir="ltr">COUNT</code> function:</p>
<pre dir="ltr">Command&gt; SELECT COUNT(INSTR(phone_number, &#39;650&#39;)) FROM employees;
&lt; 107 &gt;
1 row found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACCBFJF"></a>
<div id="TTSQL494" class="refsect1">
<h2 class="refsect1">LAST_VALUE<a id="sthref559"></a></h2>
<p>The <code dir="ltr">LAST_VALUE</code> function is an analytic function that returns the last value in an ordered set of values.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref560"></a>SQL syntax</p>
<pre dir="ltr">LAST_VALUE (<span class="codeinlineitalic">Expression</span> [IGNORE NULLS]) OVER (<span class="italic">AnalyticClause</span>)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref561"></a>Parameters</p>
<p><code dir="ltr">LAST_VALUE</code> has the parameters:</p>
</div>
<!-- class="refsubsect" -->
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t28">Parameter</th>
<th class="cellalignment6331" id="r1c2-t28">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t28" headers="r1c1-t28"><code dir="ltr"><span class="codeinlineitalic">Expression</span></code></td>
<td class="cellalignment6332" headers="r2c1-t28 r1c2-t28">For information on supported <code dir="ltr"><span class="codeinlineitalic">Expressions</span></code>, see <a href="#CACCGJBB">&#34;Analytic functions&#34;</a>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t28" headers="r1c1-t28"><code dir="ltr">IGNORE</code> <code dir="ltr">NULLS</code></td>
<td class="cellalignment6332" headers="r3c1-t28 r1c2-t28">Specify <code dir="ltr">IGNORE NULLS</code> if you want <code dir="ltr">LAST_VALUE</code> to return the last non-NULL value in the set or <code dir="ltr">NULL</code> if all values in the set are NULL. Clause is optional.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t28" headers="r1c1-t28"><code dir="ltr">OVER (</code><code dir="ltr"><span class="codeinlineitalic">AnalyticClause</span></code><code dir="ltr">)</code></td>
<td class="cellalignment6332" headers="r4c1-t28 r1c2-t28">For information on syntax, semantics, and restrictions, see <a href="#CACCGJBB">&#34;Analytic functions&#34;</a>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref562"></a>Description</p>
<ul>
<li>
<p>If the last value in the set is <code dir="ltr">NULL</code>, then <code dir="ltr">LAST_VALUE</code> returns <code dir="ltr">NULL</code> unless you specify <code dir="ltr">IGNORE NULLS</code>. Specify <code dir="ltr">IGNORE NULLS</code> if you want the function to return the last non-null value in the set or <code dir="ltr">NULL</code> if all values in the set are <code dir="ltr">NULL</code>.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref563"></a>Example</p>
<p>Use the <code dir="ltr">LAST_VALUE</code> function to return for each row the hire date of the employee with the highest salary.</p>
<pre dir="ltr">Command&gt; SELECT last_name, salary, hire_date,
       &gt;  LAST_VALUE (hire_date) OVER (ORDER BY salary
       &gt;    ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS lv
       &gt; FROM
       &gt; (SELECT * FROM employees WHERE department_id = 90 ORDER BY hire_date)
       &gt; ORDER BY last_name, salary, hire_date, lv;
&lt; De Haan, 17000, 1993-01-13 00:00:00, 1987-06-17 00:00:00 &gt;
&lt; King, 24000, 1987-06-17 00:00:00, 1987-06-17 00:00:00 &gt;
&lt; Kochhar, 17000, 1989-09-21 00:00:00, 1987-06-17 00:00:00 &gt;
3 rows found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CIHHIIHJ"></a>
<div id="TTSQL225" class="refsect1">
<h2 class="refsect1"><a id="sthref564"></a><a id="sthref565"></a>LEAST</h2>
<p>The <code dir="ltr">LEAST</code> function returns the smallest of the list of one or more expressions.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref566"></a>SQL syntax</p>
<pre dir="ltr">LEAST (<span class="italic">Expression </span>[,...])
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref567"></a>Parameters</p>
<p><code dir="ltr">LEAST</code> has the parameter:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t29">Parameter</th>
<th class="cellalignment6331" id="r1c2-t29">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t29" headers="r1c1-t29"><code dir="ltr"><span class="codeinlineitalic">Expression</span></code> <code dir="ltr">[,...]</code></td>
<td class="cellalignment6332" headers="r2c1-t29 r1c2-t29">List of one or more expressions that is evaluated to determine the smallest expression value. Operand or column can be numeric, character, or date. Each expression in the list must be from the same data type family.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref568"></a>Description</p>
<ul>
<li>
<p>Each expression in the list must be from the same data type family or date subfamily. Data type families include numeric, character and date. The date family includes four subfamilies: date family, <code dir="ltr">TIME</code> family, <code dir="ltr">TT_DATE</code> family, and <code dir="ltr">TT_TIMESTAMP</code> family. As an example, do not specify a numeric expression and a character expression in the list of expressions. Similarly, do not specify a date expression and a <code dir="ltr">TT_TIMESTAMP</code> expression in the list of expressions.</p>
</li>
<li>
<p>If the first <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is numeric, then TimesTen determines the argument with the highest numeric precedence, implicitly converts the remaining arguments to that data type before the comparison, and returns that data type.</p>
</li>
<li>
<p>If the first <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is in the character family, and the operand or column is of type <code dir="ltr">CHAR</code> or <code dir="ltr">VARCHAR2</code>, the data type returned is <code dir="ltr">VARCHAR2</code>. If the operand or column is of type <code dir="ltr">NCHAR</code> or <code dir="ltr">NVARCHAR2</code>, the data type returned is <code dir="ltr">NVARCHAR2</code>. The returned data type length is equal to the length of the largest expression. If one operand or column is of type <code dir="ltr">CHAR</code> or <code dir="ltr">VARCHAR2</code> and the second operand or column is of type <code dir="ltr">NCHAR</code> or <code dir="ltr">NVARCHAR2</code>, the data type returned is <code dir="ltr">NVARCHAR2</code>.</p>
</li>
<li>
<p>TimesTen uses nonpadded comparison semantics for data types from the character family.</p>
</li>
<li>
<p>If the first expression is in the date family, the data type returned is the same data type as the first expression.</p>
</li>
<li>
<p>If any of the expressions is <code dir="ltr">NULL</code>, the result is <code dir="ltr">NULL</code>.</p>
</li>
<li>
<p>If the first <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is in the character family, and the operand or column is of type <code dir="ltr">TT_CHAR</code> or <code dir="ltr">TT_VARCHAR</code>, the data type returned is <code dir="ltr">TT_VARCHAR</code>. If the operand or column is of type <code dir="ltr">TT_NCHAR</code> or <code dir="ltr">TT_NVARCHAR</code>, the data type returned is <code dir="ltr">TT_NVARCHAR</code>. The returned data type length is equal to the largest of the expressions.</p>
</li>
<li>
<p>You can specify a maximum of 256 expressions.</p>
</li>
</ul>
<p>Use the <code dir="ltr">LEAST</code> function to return the string with the smallest value:</p>
<pre dir="ltr">Command&gt; SELECT LEAST (&#39;SMALL&#39;,&#39;SMALLER&#39;,&#39;SMALLEST&#39;) FROM dual;
&lt; SMALL &gt;
1 row found.
</pre>
<p>Use the <code dir="ltr">LEAST</code> function to return the numeric expression with the smallest value. In this example, <code dir="ltr">NUMBER</code> is the data type with the highest numeric precedence, so arguments are implicitly converted to <code dir="ltr">NUMBER</code> before the comparison and the data type <code dir="ltr">NUMBER</code> is returned. First describe the table <code dir="ltr">leastex</code> to see the data types defined for columns <code dir="ltr">col1</code> and <code dir="ltr">col2</code>. Then <code dir="ltr">SELECT *</code> from <code dir="ltr">leastex</code> to see the data. Then invoke the <code dir="ltr">LEAST</code> function.</p>
<pre dir="ltr">Command&gt; DESCRIBE leastex;

Table SAMPLEUSER.LEASTEX:
  Columns:
    COL1                            NUMBER (2,1)
    COL2                            TT_BIGINT

1 table found.
(primary key columns are indicated with *)
Command&gt; SELECT * FROM leastex;
&lt; 1.1, 1 &gt;
1 row found.
Command&gt; SELECT LEAST (Col2,Col1) from leastex;
&lt; 1 &gt;
1 row found.
</pre>
<p>Use the <code dir="ltr">DESCRIBE</code> command to confirm that the data type returned is <code dir="ltr">NUMBER</code>:</p>
<pre dir="ltr">Command&gt; DESCRIBE SELECT LEAST (Col2,Col1) FROM leastex;

Prepared Statement:
  Columns:
    EXP                             NUMBER
</pre>
<p>Use the <code dir="ltr">LEAST</code> function to return the <code dir="ltr">DATE</code> expression with the smallest value. <code dir="ltr">DATE</code> and <code dir="ltr">TIMESTAMP</code> are in the same date family.</p>
<pre dir="ltr">Command&gt; SELECT LEAST (DATE &#39;2007-09-17&#39;, 
       &gt; TIMESTAMP &#39;2007-09-17:10:00:00&#39;) FROM dual;
&lt; 2007-09-17 00:00:00 &gt;
1 row found.
</pre>
<p>Attempt to use the <code dir="ltr">LEAST</code> function to return the smallest value in the list of <code dir="ltr">TT_DATE</code> and <code dir="ltr">TT_TIMESTAMP</code> expressions. You see an error because <code dir="ltr">TT_DATE</code> and <code dir="ltr">TT_TIMESTAMP</code> are in different date subfamilies and cannot be used in the same list of expressions.</p>
<pre dir="ltr">Command&gt; SELECT LEAST (TT_DATE &#39;2007-09-17&#39;,
       &gt; TT_TIMESTAMP &#39;2007-09-17:01:00:00&#39;) FROM dual;
2817: Invalid data type TT_TIMESTAMP for argument 2 for function LEAST
The command failed.
</pre>
<p>Use the <code dir="ltr">LEAST</code> function to return the <code dir="ltr">TIME</code> expression with the smallest value.</p>
<pre dir="ltr">Command&gt; SELECT LEAST (TIME &#39;13:59:59&#39;, TIME &#39;13:59:58&#39;,
       &gt; TIME &#39;14:00:00&#39;) FROM dual;
&lt; 13:59:58 &gt;
1 row found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1120286"></a>
<div id="TTSQL245" class="refsect1">
<h2 class="refsect1">LENGTH, LENGTHB, LENGTH4<a id="sthref569"></a><a id="sthref570"></a><a id="sthref571"></a></h2>
<p>Returns the length of a given character string in an expression. <code dir="ltr">LENGTH</code> returns type <code dir="ltr">NUMBER</code>.</p>
<p>If you are using TimesTen type mode, for information on the <code dir="ltr">LENGTH</code> function, see the Oracle TimesTen In-Memory Database Release 6.0.3 documentation.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref572"></a>SQL syntax</p>
<pre dir="ltr">{LENGTH|LENGTHB|LENGTH4} (<span class="italic">CharExpr</span>) 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref573"></a>Parameters</p>
<p><code dir="ltr">LENGTH</code> has the parameter:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t30">Parameter</th>
<th class="cellalignment6331" id="r1c2-t30">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t30" headers="r1c1-t30"><code dir="ltr"><span class="codeinlineitalic">CharExpr</span></code></td>
<td class="cellalignment6332" headers="r2c1-t30 r1c2-t30">The string for which to return the length. Supported data types for <code dir="ltr"><span class="codeinlineitalic">CharExpr</span></code> for are <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NCHAR</code>, or <code dir="ltr">NVARCHAR2</code>. <code dir="ltr">LENGTH</code> and <code dir="ltr">LENGTHB</code> also support <code dir="ltr">CLOB</code>, <code dir="ltr">NCLOB</code>, and <code dir="ltr">BLOB</code> data types.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref574"></a>Description</p>
<p>The <code dir="ltr">LENGTH</code> functions return the length of <code dir="ltr"><span class="codeinlineitalic">CharExpr</span></code>. <code dir="ltr">LENGTH</code> calculates the length using characters as defined by the character set. <code dir="ltr">LENGTHB</code> uses bytes rather than characters. <code dir="ltr">LENGTH4</code> uses UCS4 code points.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref575"></a>Examples</p>
<p>Determine the length of the string <code dir="ltr">&#39;William&#39;</code>:</p>
<pre dir="ltr">Command&gt; SELECT LENGTH(&#39;William&#39;) FROM dual;
&lt; 7 &gt;
1 row found.
</pre></div>
<!-- class="refsubsect" -->
<p>The following determines the length of the <code dir="ltr">NCLOB</code> data:</p>
<pre dir="ltr">Command&gt; SELECT nclob_column FROM nclob_content;
&lt; Demonstration of the NCLOB data type &gt;
1 row found.

Command&gt; SELECT LENGTH(nclob_column) FROM nclob_content;
&lt; 36 &gt;
1 row found.
</pre></div>
<!-- class="refsect1" -->
<a id="i1085135"></a>
<div id="TTSQL226" class="refsect1">
<h2 class="refsect1">LOWER and UPPER<a id="sthref576"></a><a id="sthref577"></a><a id="sthref578"></a><a id="sthref579"></a></h2>
<p>The <code dir="ltr">LOWER</code> function converts expressions of type <code dir="ltr">CHAR</code>, <code dir="ltr">NCHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NVARCHAR2</code>, <code dir="ltr">CLOB</code>, or <code dir="ltr">NCLOB</code> to lowercase. The <code dir="ltr">UPPER</code> function converts expressions of type <code dir="ltr">CHAR</code>, <code dir="ltr">NCHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NVARCHAR2</code>, <code dir="ltr">CLOB</code>, or <code dir="ltr">NCLOB</code> to uppercase. Character semantics are supported for <code dir="ltr">CHAR</code> and <code dir="ltr">VARCHAR2</code> types. The data type of the result is the same as the data type of the expression.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref580"></a>SQL syntax</p>
<pre dir="ltr">{UPPER | LOWER} (<span class="italic">Expression1</span>)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref581"></a>Parameters</p>
<p><code dir="ltr">LOWER</code> and <code dir="ltr">UPPER</code> have the following parameter:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t31">Parameter</th>
<th class="cellalignment6331" id="r1c2-t31">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t31" headers="r1c1-t31"><code dir="ltr"><span class="codeinlineitalic">Expression1</span></code></td>
<td class="cellalignment6332" headers="r2c1-t31 r1c2-t31">An expression which is converted to lowercase (using <code dir="ltr">LOWER</code>) or uppercase (using <code dir="ltr">UPPER</code>).</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref582"></a>Description</p>
<p><code dir="ltr">LOWER(?)</code> and <code dir="ltr">UPPER(?)</code> are not supported, but you can combine it with the <code dir="ltr">CAST</code> operator. For example:</p>
<pre dir="ltr">LOWER(CAST(? AS CHAR(30))) 

Command&gt; SELECT LOWER (last_name) FROM employees WHERE employee_id = 100;
&lt; king &gt;
1 row found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CIHGHEJD"></a>
<div id="TTSQL227" class="refsect1">
<h2 class="refsect1"><a id="sthref583"></a><a id="sthref584"></a><a id="sthref585"></a>LPAD</h2>
<p>The <code dir="ltr">LPAD</code> function returns <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code>, left-padded to length <span class="italic">n</span> characters with the sequence of characters in <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code>. This function is useful for formatting the output of a query.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref586"></a>SQL syntax</p>
<pre dir="ltr">LPAD (<span class="italic">Expression1</span>, <span class="codeinlineitalic">n</span> [,<span class="italic">Expression2</span>])
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref587"></a>Parameters</p>
<p><code dir="ltr">LPAD</code> has the parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t32">Parameter</th>
<th class="cellalignment6331" id="r1c2-t32">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t32" headers="r1c1-t32"><code dir="ltr"><span class="codeinlineitalic">Expression1</span></code></td>
<td class="cellalignment6332" headers="r2c1-t32 r1c2-t32"><code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NCHAR</code>, <code dir="ltr">NVARCHAR2</code>, <code dir="ltr">CLOB</code> or <code dir="ltr">NCLOB</code> operand or column to be left-padded. If <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is longer than <code dir="ltr"><span class="codeinlineitalic">n</span></code>, then <code dir="ltr">LPAD</code> returns the portion of <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> that fits in <code dir="ltr"><span class="codeinlineitalic">n</span></code>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t32" headers="r1c1-t32"><code dir="ltr"><span class="codeinlineitalic">n</span></code></td>
<td class="cellalignment6332" headers="r3c1-t32 r1c2-t32">Length of characters returned by the <code dir="ltr">LPAD</code> function. Must be a <code dir="ltr">NUMBER</code> integer or a value that can be implicitly converted to a <code dir="ltr">NUMBER</code> integer.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t32" headers="r1c1-t32"><code dir="ltr"><span class="codeinlineitalic">Expression2</span></code></td>
<td class="cellalignment6332" headers="r4c1-t32 r1c2-t32">Sequence of characters to be left-padded in <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code>. If you do not specify <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code>, the default is a single blank. Operand or column can be of type <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NCHAR</code>, <code dir="ltr">NVARCHAR2</code>, <code dir="ltr">CLOB</code> or <code dir="ltr">NCLOB</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref588"></a>Description</p>
<ul>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is of type <code dir="ltr">CHAR</code> or <code dir="ltr">VARCHAR2</code>, the data type returned is <code dir="ltr">VARCHAR2</code>. If <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is of type <code dir="ltr">NCHAR</code> or <code dir="ltr">NVARCHAR2</code>, the data type returned is <code dir="ltr">NVARCHAR2</code>. If <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is a LOB, the data type returned is the same as the LOB data type provided.</p>
</li>
<li>
<p>The returned data type length is equal to <code dir="ltr"><span class="codeinlineitalic">n</span></code> if <code dir="ltr"><span class="codeinlineitalic">n</span></code> is a constant. Otherwise, the maximum result length of 8300 is returned.</p>
</li>
<li>
<p>You can specify <code dir="ltr">TT_CHAR</code>, <code dir="ltr">TT_VARCHAR</code>, <code dir="ltr">TT_NCHAR</code>, and <code dir="ltr">TT_NVARCHAR</code> for <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> and <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code>. If <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is of type <code dir="ltr">TT_CHAR</code> or <code dir="ltr">TT_VARCHAR</code>, the data type returned is <code dir="ltr">TT_VARCHAR</code>. If <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is of type <code dir="ltr">TT_NCHAR</code> or <code dir="ltr">TT_NVARCHAR</code>, the data type returned is <code dir="ltr">TT_NVARCHAR</code>.</p>
</li>
<li>
<p>For <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NCHAR</code>, <code dir="ltr">NVARCHAR2</code>, <code dir="ltr">CLOB</code> or <code dir="ltr">NCLOB</code> data types:</p>
<ul>
<li>
<p>If either <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> or <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code> is <code dir="ltr">NULL</code>, the result is <code dir="ltr">NULL</code>. If <code dir="ltr"><span class="codeinlineitalic">n</span></code> is less than or equal to <code dir="ltr">0</code>, the result is <code dir="ltr">NULL</code>.</p>
</li>
</ul>
</li>
<li>
<p>For <code dir="ltr">TT_CHAR</code>, <code dir="ltr">TT_VARCHAR</code>, <code dir="ltr">TT_NCHAR</code> and <code dir="ltr">TT_NVARCHAR</code> types:</p>
<ul>
<li>
<p>If either <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> or <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code> is not <code dir="ltr">NULL</code> and if <code dir="ltr"><span class="codeinlineitalic">n</span></code> is less than or equal to 0, the result is the empty string.</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref589"></a>Examples</p>
<p>The following prints out the last names of the first 5 employees, left-padded with periods out to 20 characters.</p>
<pre dir="ltr">Command&gt; SELECT FIRST 5 LPAD (last_name, 20, &#39;.&#39;) 
 &gt; FROM employees
 &gt; ORDER BY last_name;
&lt; ................Abel &gt;
&lt; ................Ande &gt;
&lt; ............Atkinson &gt;
&lt; ..............Austin &gt;
&lt; ................Baer &gt;
5 rows found.
</pre>
<p>Use <code dir="ltr">LPAD</code> function to left-pad the string <code dir="ltr">&#39;LPAD Function&#39;</code> with string <code dir="ltr">&#39;DEMO-ONLY&#39;</code> plus 2 spaces. The <code dir="ltr">DEMO-ONLY</code> string is replicated as much as it can as defined by the total characters output by the function, which is replicated three times.</p>
<pre dir="ltr">Command&gt; SELECT LPAD (&#39;LPAD Function&#39;, 46, &#39;DEMO-ONLY  &#39;) FROM dual;
&lt; DEMO-ONLY  DEMO-ONLY  DEMO-ONLY  LPAD Function &gt;
1 row found.
</pre>
<p>Call <code dir="ltr">LPAD</code> function with length of -1. <code dir="ltr">NULL</code> is returned.</p>
<pre dir="ltr">Command&gt; SELECT LPAD (&#39;abc&#39;, -1, &#39;a&#39;)  FROM dual;
&lt; &lt;NULL&gt; &gt;
1 row found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CIHEDBHJ"></a>
<div id="TTSQL228" class="refsect1">
<h2 class="refsect1"><a id="sthref590"></a><a id="sthref591"></a><a id="sthref592"></a>LTRIM</h2>
<p>The <code dir="ltr">LTRIM</code> function removes from the left end of <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> all of the characters contained in <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code>. TimesTen begins scanning <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> from its first character and removes all characters that appear in <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code> until reaching a character not in <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code> and returns the result.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref593"></a>SQL syntax</p>
<pre dir="ltr">LTRIM (<span class="italic">Expression1</span> [,<span class="italic">Expression2</span>])
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref594"></a>Parameters</p>
<p><code dir="ltr">LTRIM</code> has the parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t33">Parameter</th>
<th class="cellalignment6331" id="r1c2-t33">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t33" headers="r1c1-t33"><code dir="ltr"><span class="codeinlineitalic">Expression1</span></code></td>
<td class="cellalignment6332" headers="r2c1-t33 r1c2-t33">The <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NCHAR</code>, <code dir="ltr">NVARCHAR2</code>, <code dir="ltr">CLOB</code> or <code dir="ltr">NCLOB</code> operand or column to be trimmed. If <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is a character literal, then enclose it in single quotes.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t33" headers="r1c1-t33"><code dir="ltr"><span class="codeinlineitalic">Expression2</span></code></td>
<td class="cellalignment6332" headers="r3c1-t33 r1c2-t33">Optional expression used for trimming <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code>. If <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code> is a character literal, enclose it in single quotes. If you do not specify <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code>, it defaults to a single blank. Operand or column can be of type <code dir="ltr">CHAR</code>,<code dir="ltr">VARCHAR2</code>, <code dir="ltr">NCHAR</code>, <code dir="ltr">NVARCHAR2</code>, <code dir="ltr">CLOB</code> or <code dir="ltr">NCLOB</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref595"></a>Description</p>
<ul>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is of type <code dir="ltr">CHAR</code> or <code dir="ltr">VARCHAR2</code>, the data type returned is <code dir="ltr">VARCHAR2</code>. If <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is of type <code dir="ltr">NCHAR</code> or <code dir="ltr">NVARCHAR2</code>, the data type returned is <code dir="ltr">NVARCHAR2</code>. If <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is a <code dir="ltr">CLOB</code> or <code dir="ltr">NCLOB</code>, the data type returned is the same as the LOB data type provided. The returned data type length is equal to the data type length of <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code>.</p>
</li>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is a data type defined with <code dir="ltr">CHAR</code> length semantics, the returned length is expressed in <code dir="ltr">CHAR</code> length semantics.</p>
</li>
<li>
<p>If either <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> or <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code> is <code dir="ltr">NULL</code>, the result is <code dir="ltr">NULL</code>.</p>
</li>
<li>
<p>You can specify <code dir="ltr">TT_CHAR</code>, <code dir="ltr">TT_VARCHAR</code>, <code dir="ltr">TT_NCHAR</code>, and <code dir="ltr">TT_NVARCHAR</code> for <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> and <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code>. If <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is of type <code dir="ltr">TT_CHAR</code> or <code dir="ltr">TT_VARCHAR</code>, the data type returned is <code dir="ltr">TT_VARCHAR</code>. If <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is of type <code dir="ltr">TT_NCHAR</code> or <code dir="ltr">TT_NVARCHAR</code>, the data type returned is <code dir="ltr">TT_NVARCHAR</code>.</p>
</li>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is of type <code dir="ltr">CHAR</code> or <code dir="ltr">VARCHAR2</code> and <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code> is of type <code dir="ltr">NCHAR</code> or <code dir="ltr">NVARCHAR2</code>, then <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code> is demoted to <code dir="ltr">CHAR</code> or <code dir="ltr">VARCHAR2</code> before <code dir="ltr">LTRIM</code> is invoked. The conversion of <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code> could be lost. If the trim character of <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code> is not in the database character set, then the query may produce unexpected results.</p>
</li>
<li>
<p>For <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NCHAR</code>, <code dir="ltr">NVARCHAR2</code>, <code dir="ltr">CLOB</code> or <code dir="ltr">NCLOB</code> types:</p>
<ul>
<li>
<p>If all the characters in <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> are removed by the <code dir="ltr">LTRIM</code> function, the result is <code dir="ltr">NULL</code>.</p>
</li>
</ul>
</li>
<li>
<p>For <code dir="ltr">TT_CHAR</code>, <code dir="ltr">TT_VARCHAR</code>, <code dir="ltr">TT_NCHAR</code> and <code dir="ltr">TT_NVARCHAR</code> types:</p>
<ul>
<li>
<p>If all the characters in <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> are removed by the <code dir="ltr">LTRIM</code> function, the result is the empty string.</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref596"></a>Examples</p>
<p>Call the <code dir="ltr">LTRIM</code> function to remove left-most <code dir="ltr">&#39;x&#39;</code> and <code dir="ltr">&#39;y&#39;</code> from string. <code dir="ltr">LTRIM</code> removes individual occurrences of <code dir="ltr">&#39;x&#39;</code> and <code dir="ltr">&#39;y&#39;</code>, not pattern <code dir="ltr">&#39;xy&#39;</code>.</p>
<pre dir="ltr">Command&gt; SELECT LTRIM (&#39;xxxyyyxyxyLTRIM Example&#39;, &#39;xy&#39;) FROM dual;
&lt; LTRIM Example &gt;
1 row found.
</pre>
<p>Call the <code dir="ltr">LTRIM</code> function to remove <code dir="ltr">YYYY-MM-DD</code> from <code dir="ltr">SYSDATE</code>. Call <code dir="ltr">TO_CHAR</code> to convert <code dir="ltr">SYSDATE</code> to <code dir="ltr">VARCHAR2</code>.</p>
<pre dir="ltr">Command&gt; SELECT LTRIM (TO_CHAR(SYSDATE), &#39;2007-08-21&#39;) FROM dual;
&lt;  22:54:39 &gt;
1 row found.
</pre>
<p>Call <code dir="ltr">LTRIM</code> to remove all characters from <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code>. In the first example, the data type is <code dir="ltr">CHAR</code>, so <code dir="ltr">NULL</code> is returned. In the second example, the data type is <code dir="ltr">TT_CHAR</code>, so the empty string is returned.</p>
<pre dir="ltr">Command&gt; CREATE TABLE ltrimtest (col1 CHAR (4), col2 TT_CHAR (4));
Command&gt; INSERT INTO ltrimtest VALUES (&#39;ABBB&#39;,&#39;ABBB&#39;);
1 row inserted.
Command&gt; SELECT LTRIM (col1, &#39;AB&#39;) FROM ltrimtest;
&lt; &lt;NULL&gt; &gt;
1 row found.
Command&gt; SELECT LTRIM (col2, &#39;AB&#39;) FROM ltrimtest;
&lt;  &gt;
1 row found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACGHBHB"></a>
<div id="TTSQL453" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref597"></a>MAX</h2>
<p>Finds the largest of the values in the argument (ASCII comparison for alphabetic types). Null values are ignored. <code dir="ltr">MAX</code> can be applied to numeric, character, and <code dir="ltr">BINARY</code> data types. <code dir="ltr">MAX</code> is an aggregate function and can also be an aggregate analytic function. For more details on aggregate functions, see <a href="#i988417">&#34;Aggregate functions&#34;</a>. For more information on analytic functions, see <a href="#CACCGJBB">&#34;Analytic functions&#34;</a>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref598"></a>SQL syntax</p>
<pre dir="ltr">MAX ([ALL | DISTINCT]{<span class="codeinlineitalic">Expression</span> | ROWID}) [OVER ([<span class="italic">AnalyticClause</span>])]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref599"></a>Parameters</p>
<p><code dir="ltr">MAX</code> has the parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table describes the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t34">Parameter</th>
<th class="cellalignment6331" id="r1c2-t34">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t34" headers="r1c1-t34"><code dir="ltr"><span class="codeinlineitalic">Expression</span></code></td>
<td class="cellalignment6332" headers="r2c1-t34 r1c2-t34">Can be any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t34" headers="r1c1-t34"><a id="sthref600"></a><a id="sthref601"></a><code dir="ltr">ALL</code></td>
<td class="cellalignment6332" headers="r3c1-t34 r1c2-t34">Includes any duplicate rows in the argument of an aggregate function. If neither <code dir="ltr">ALL</code> nor <code dir="ltr">DISTINCT</code> is specified, <code dir="ltr">ALL</code> is assumed.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t34" headers="r1c1-t34"><a id="sthref602"></a><a id="sthref603"></a><code dir="ltr">DISTINCT</code></td>
<td class="cellalignment6332" headers="r4c1-t34 r1c2-t34">Eliminates duplicate column values from the argument of an aggregate function.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t34" headers="r1c1-t34"><code dir="ltr">ROWID</code></td>
<td class="cellalignment6332" headers="r5c1-t34 r1c2-t34">TimesTen assigns a unique ID called a rowid to each row stored in a table. The rowid value can be retrieved through the <code dir="ltr">ROWID</code> pseudocolumn. See <a href="express.htm#i1052771">&#34;ROWID&#34;</a> for more details.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t34" headers="r1c1-t34"><code dir="ltr">OVER ([</code><code dir="ltr"><span class="codeinlineitalic">AnalyticClause</span></code><code dir="ltr">])</code></td>
<td class="cellalignment6332" headers="r6c1-t34 r1c2-t34">If specified, indicates aggregate analytic function. For more information on analytic functions, see <a href="#CACCGJBB">&#34;Analytic functions&#34;</a>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref604"></a>Description</p>
<ul>
<li>
<p>If <code dir="ltr">MAX</code> is computed over an empty table in which <code dir="ltr">GROUP BY</code> is not used, <code dir="ltr">MAX</code> returns <code dir="ltr">NULL</code>.</p>
</li>
<li>
<p>If <code dir="ltr">MAX</code> is computed over an empty group or an empty grouped table (<code dir="ltr">GROUP BY</code> is used), <code dir="ltr">MAX</code> returns nothing.</p>
</li>
<li>
<p>The result data type is the same as the source.</p>
</li>
<li>
<p>If you do not use the <code dir="ltr"><span class="codeinlineitalic">AnalyticClause</span></code> in your query, then <code dir="ltr">MAX</code> acts as an aggregate function.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref605"></a>Examples</p>
<p>Find the largest salary:</p>
<pre dir="ltr">Command&gt; SELECT MAX(salary) &#34;Max Salary&#34; FROM employees;
 
MAX SALARY
&lt; 24000 &gt;
1 row found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACBFFGF"></a>
<div id="TTSQL454" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref606"></a>MIN</h2>
<p>Finds the smallest of the values in the argument (ASCII comparison for alphabetic types). Null values are ignored. <code dir="ltr">MIN</code> can be applied to numeric, character, and <code dir="ltr">BINARY</code> data types. For more details on aggregate functions, see <a href="#i988417">&#34;Aggregate functions&#34;</a>. <code dir="ltr">MIN</code> can also be an aggregate analytic function. For information on analytic functions, see <a href="#CACCGJBB">&#34;Analytic functions&#34;</a>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref607"></a>SQL syntax</p>
<pre dir="ltr"> MIN ([ALL | DISTINCT]{<span class="codeinlineitalic">Expression</span>|ROWID}) [OVER (AnalyticClause)]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref608"></a>Parameters</p>
<p><code dir="ltr">MIN</code> has the parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table describes the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t35">Parameter</th>
<th class="cellalignment6331" id="r1c2-t35">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t35" headers="r1c1-t35"><code dir="ltr"><span class="codeinlineitalic">Expression</span></code></td>
<td class="cellalignment6332" headers="r2c1-t35 r1c2-t35">Can be any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t35" headers="r1c1-t35"><a id="sthref609"></a><a id="sthref610"></a><code dir="ltr">ALL</code></td>
<td class="cellalignment6332" headers="r3c1-t35 r1c2-t35">Includes any duplicate rows in the argument of an aggregate function. If neither <code dir="ltr">ALL</code> nor <code dir="ltr">DISTINCT</code> is specified, <code dir="ltr">ALL</code> is assumed.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t35" headers="r1c1-t35"><a id="sthref611"></a><a id="sthref612"></a><code dir="ltr">DISTINCT</code></td>
<td class="cellalignment6332" headers="r4c1-t35 r1c2-t35">Eliminates duplicate column values from the argument of an aggregate function.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t35" headers="r1c1-t35"><code dir="ltr">ROWID</code></td>
<td class="cellalignment6332" headers="r5c1-t35 r1c2-t35">TimesTen assigns a unique ID called a rowid to each row stored in a table. The rowid value can be retrieved through the <code dir="ltr">ROWID</code> pseudocolumn. See <a href="express.htm#i1052771">&#34;ROWID&#34;</a> for more details.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t35" headers="r1c1-t35"><code dir="ltr">OVER (</code><code dir="ltr"><span class="codeinlineitalic">AnalyticClause</span></code><code dir="ltr">)</code></td>
<td class="cellalignment6332" headers="r6c1-t35 r1c2-t35">If specified, indicates aggregate analytic function. For more information on analytic functions, see <a href="#CACCGJBB">&#34;Analytic functions&#34;</a>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref613"></a>Description</p>
<ul>
<li>
<p>If the <code dir="ltr">MIN</code> function is computed over an empty table in which <code dir="ltr">GROUP BY</code> is not used, <code dir="ltr">MIN</code> returns <code dir="ltr">NULL</code>.</p>
</li>
<li>
<p>If the <code dir="ltr">MIN</code> function is computed over an empty group or an empty grouped table (<code dir="ltr">GROUP BY</code> is used), <code dir="ltr">MIN</code> returns nothing.</p>
</li>
<li>
<p>The result data type is the same as the source.</p>
</li>
<li>
<p>If you do not use the <code dir="ltr"><span class="codeinlineitalic">AnalyticClause</span></code> in your query, then <code dir="ltr">MIN</code> acts as an aggregate function.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref614"></a>Examples</p>
<p>Show the smallest salary:</p>
</div>
<!-- class="refsubsect" -->
<pre dir="ltr">Command&gt; SELECT MIN(salary) &#34;Min Salary&#34; FROM employees;
 
MIN SALARY
&lt; 2100 &gt;
</pre>
<p>Show the earliest hire date:</p>
<pre dir="ltr">Command&gt; SELECT MIN(hire_date) &#34;Earliest Hire Date&#34; FROM employees;
 
EARLIEST HIRE DATE
&lt; 1987-06-17 00:00:00 &gt;
1 row found.
</pre></div>
<!-- class="refsect1" -->
<a id="i1045028"></a>
<div id="TTSQL229" class="refsect1">
<h2 class="refsect1">MOD<a id="sthref615"></a></h2>
<p>Returns the remainder of an <code dir="ltr">INTEGER</code> expression divided by a second <code dir="ltr">INTEGER</code> expression.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref616"></a>SQL syntax</p>
<pre dir="ltr">MOD(<span class="italic">Expression1</span>, <span class="italic">Expression2</span>)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref617"></a>Parameters</p>
<p><code dir="ltr">MOD</code> has the following parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t36">Parameter</th>
<th class="cellalignment6331" id="r1c2-t36">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t36" headers="r1c1-t36"><code dir="ltr"><span class="codeinlineitalic">Expression1</span></code></td>
<td class="cellalignment6332" headers="r2c1-t36 r1c2-t36">An <code dir="ltr">INTEGER</code> expression.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t36" headers="r1c1-t36"><code dir="ltr"><span class="codeinlineitalic">Expression2</span></code></td>
<td class="cellalignment6332" headers="r3c1-t36 r1c2-t36">An <code dir="ltr">INTEGER</code> expression.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref618"></a>Description</p>
<ul>
<li>
<p><code dir="ltr">MOD</code> returns the remainder of <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> divided by <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code>.</p>
</li>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code> is <code dir="ltr">0</code>, then <code dir="ltr">MOD</code> returns <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code>.</p>
</li>
<li>
<p>If either <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> or <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code> is <code dir="ltr">NULL</code>, <code dir="ltr">MOD</code> returns <code dir="ltr">NULL</code>.</p>
</li>
<li>
<p><code dir="ltr">MOD</code> is treated as a binary arithmetic operation, so the return type is determined according to the rules specified in <a href="types.htm#i1008748">Chapter 1, &#34;Data Types&#34;</a>.</p>
</li>
<li>
<p>The <code dir="ltr">MOD</code> function behaves differently from the classic mathematical modulus function when one of the operands is negative. The following table illustrates this difference:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Comparison of MOD function with mathematical modulus function" summary="This table compares the results of the classic mathematical modulus function with the results of MOD." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t37">M</th>
<th class="cellalignment6331" id="r1c2-t37">N</th>
<th class="cellalignment6331" id="r1c3-t37">Classic Modulus</th>
<th class="cellalignment6331" id="r1c4-t37">MOD(M,N)</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t37" headers="r1c1-t37"><code dir="ltr">11</code></td>
<td class="cellalignment6332" headers="r2c1-t37 r1c2-t37"><code dir="ltr">3</code></td>
<td class="cellalignment6332" headers="r2c1-t37 r1c3-t37"><code dir="ltr">2</code></td>
<td class="cellalignment6332" headers="r2c1-t37 r1c4-t37"><code dir="ltr">2</code></td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t37" headers="r1c1-t37"><code dir="ltr">11</code></td>
<td class="cellalignment6332" headers="r3c1-t37 r1c2-t37">-<code dir="ltr">3</code></td>
<td class="cellalignment6332" headers="r3c1-t37 r1c3-t37"><code dir="ltr">-1</code></td>
<td class="cellalignment6332" headers="r3c1-t37 r1c4-t37"><code dir="ltr">2</code></td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t37" headers="r1c1-t37"><code dir="ltr">-11</code></td>
<td class="cellalignment6332" headers="r4c1-t37 r1c2-t37"><code dir="ltr">3</code></td>
<td class="cellalignment6332" headers="r4c1-t37 r1c3-t37"><code dir="ltr">1</code></td>
<td class="cellalignment6332" headers="r4c1-t37 r1c4-t37"><code dir="ltr">-2</code></td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t37" headers="r1c1-t37"><code dir="ltr">-11</code></td>
<td class="cellalignment6332" headers="r5c1-t37 r1c2-t37"><code dir="ltr">-3</code></td>
<td class="cellalignment6332" headers="r5c1-t37 r1c3-t37"><code dir="ltr">-2</code></td>
<td class="cellalignment6332" headers="r5c1-t37 r1c4-t37"><code dir="ltr">-2</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></li>
</ul>
<p>The following example tests whether the value of the expression <code dir="ltr"><span class="codeinlineitalic">m</span></code> is divisible by the value of expression <code dir="ltr"><span class="codeinlineitalic">n</span></code>.</p>
<pre dir="ltr">SELECT <span class="codeinlineitalic">m</span>, <span class="codeinlineitalic">n</span> FROM test WHERE MOD(<span class="codeinlineitalic">m</span>, <span class="codeinlineitalic">n</span>) = 0;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACIIGGA"></a>
<div id="TTSQL455" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref619"></a><a id="sthref620"></a>MONTHS_BETWEEN</h2>
<p>The <code dir="ltr">MONTHS_BETWEEN</code> function returns number of months between dates <code dir="ltr"><span class="codeinlineitalic">date1</span></code> and <code dir="ltr"><span class="codeinlineitalic">date2</span></code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref621"></a>SQL syntax</p>
<pre dir="ltr">MONTHS_BETWEEN(<span class="italic">date1</span>, <span class="italic">date2</span>)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref622"></a>Parameters</p>
<p><code dir="ltr">MONTHS_BETWEEN</code> has the parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" summary="MONTHS_BETWEEN parameters" dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t38">Parameter</th>
<th class="cellalignment6331" id="r1c2-t38">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t38" headers="r1c1-t38"><code dir="ltr"><span class="codeinlineitalic">date1</span></code></td>
<td class="cellalignment6332" headers="r2c1-t38 r1c2-t38">A datetime value or any value that can be converted to a datetime value.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t38" headers="r1c1-t38"><code dir="ltr"><span class="codeinlineitalic">date2</span></code></td>
<td class="cellalignment6332" headers="r3c1-t38 r1c2-t38">A datetime value or any value that can be converted to a datetime value.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref623"></a>Description</p>
<p>Input parameters can be any combination of all supported datetime data types, excluding the <code dir="ltr">TIME</code> or <code dir="ltr">TT_TIME</code> data types. The supported datetime data types include <code dir="ltr">DATE</code>, <code dir="ltr">TIMESTAMP</code>, <code dir="ltr">TT_DATE</code>, <code dir="ltr">TT_TIMESTAMP</code>, <code dir="ltr">ORA_DATE</code>, and <code dir="ltr">ORA_TIMESTAMP</code>. For details on all datetime data types, see <a href="types.htm#i1008748">Chapter 1, &#34;Data Types&#34;</a>.</p>
<p>The return data type is a <code dir="ltr">NUMBER</code>.</p>
<p><code dir="ltr">MONTHS_BETWEEN</code> returns number of months between dates <code dir="ltr"><span class="codeinlineitalic">date1</span></code> and <code dir="ltr"><span class="codeinlineitalic">date2</span></code>.</p>
<ul>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">date1</span></code> is later than <code dir="ltr"><span class="codeinlineitalic">date2</span></code>, the returned result is positive.</p>
</li>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">date1</span></code> is earlier than <code dir="ltr"><span class="codeinlineitalic">date2</span></code>, the returned result is negative.</p>
</li>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">date1</span></code> and <code dir="ltr"><span class="codeinlineitalic">date2</span></code> are both either the same day of the month or the last day of the month, the returned result is an integer. For all other cases, the returned result is a fraction based on a 31-day month that considers the difference in time components for <code dir="ltr"><span class="codeinlineitalic">date1</span></code> and <code dir="ltr"><span class="codeinlineitalic">date2</span></code> parameters.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref624"></a>Examples</p>
<p>The following examples calculate months between two given dates.</p>
<pre dir="ltr">Command&gt; SELECT MONTHS_BETWEEN(DATE &#39;1995-02-02&#39;, DATE &#39;1995-01-01&#39;) 
AS Months FROM dual;
 
MONTHS
&lt; 1.03225806451613 &gt;
1 row found. 

Command&gt; SELECT MONTHS_BETWEEN(DATE &#39;2010-02-02&#39;, DATE &#39;2010-10-01&#39;) &#34;Months&#34;
 FROM dual;
 
MONTHS
&lt; -7.96774193548387 &gt;
1 row found.
 
</pre>
<p>The following command uses <code dir="ltr">CAST</code> to explicitly convert <code dir="ltr">CHAR</code> strings into timestamps. The first result is rounded to an integer.</p>
<pre dir="ltr">Command&gt; SELECT ROUND ( MONTHS_BETWEEN (CAST (&#39;2010-04-15 14:13:52&#39; 
AS TIMESTAMP), CAST (&#39;2000-12-31 00:00:00&#39; AS TIMESTAMP))), 
MONTHS_BETWEEN (CAST (&#39;2010-04-15 14:13:52&#39; AS TIMESTAMP), 
CAST (&#39;2000-12-31 00:00:00&#39; AS TIMESTAMP)) 
FROM dual;

&lt; 112, 111.502998805257 &gt;
1 row found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1037003"></a>
<div id="TTSQL230" class="refsect1">
<h2 class="refsect1">NCHR<a id="sthref625"></a><a id="sthref626"></a></h2>
<p>The <code dir="ltr">NCHR</code> function returns the character having the specified Unicode value.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref627"></a>SQL syntax</p>
<pre dir="ltr">NCHR(<span class="codeinlineitalic">n</span>)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref628"></a>Parameters</p>
<p><code dir="ltr">NCHR</code> has the parameter:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t39">Parameter</th>
<th class="cellalignment6331" id="r1c2-t39">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t39" headers="r1c1-t39"><code dir="ltr"><span class="codeinlineitalic">n</span></code></td>
<td class="cellalignment6332" headers="r2c1-t39 r1c2-t39">The specified Unicode value. The character having this Unicode value is returned. The result is of type <code dir="ltr">NVARCHAR2</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref629"></a>Example</p>
<p>The following example returns the <code dir="ltr">NCHAR</code> character <code dir="ltr">187</code>:</p>
</div>
<!-- class="refsubsect" -->
<pre dir="ltr">Command&gt; SELECT NCHR(187) FROM dual;
&lt; &gt; &gt;
1 row found.
</pre></div>
<!-- class="refsect1" -->
<a id="CACJDFJH"></a>
<div id="TTSQL473" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref630"></a>NLS_CHARSET_ID</h2>
<p><code dir="ltr">NLS_CHARSET_ID</code> returns the character set ID number corresponding to the character set name.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
For a complete list of supported character sets, see <a class="olink TTREF739" href="../TTREF/attribute.htm#TTREF739">&#34;Supported character sets&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref631"></a>SQL syntax</p>
<pre dir="ltr">NLS_CHARSET_ID(<span class="italic">String</span>)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref632"></a>Parameters</p>
<p><code dir="ltr">NLS_CHARSET_ID</code> has the parameter:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t41">Parameter</th>
<th class="cellalignment6331" id="r1c2-t41">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t41" headers="r1c1-t41"><code dir="ltr"><span class="codeinlineitalic">String</span></code></td>
<td class="cellalignment6332" headers="r2c1-t41 r1c2-t41">The input string argument is a run-time <code dir="ltr">VARCHAR2</code> value that represents the character set. This string is case-insensitive.
<p>If the input string corresponds to a legal TimesTen character set, the associated character set ID number is returned; otherwise, <code dir="ltr">NULL</code> is returned.</p>
<p>Providing <code dir="ltr">CHAR_CS</code> returns the database character set ID number. Providing <code dir="ltr">NCHAR_CS</code> returns the national character set ID number. Other input string values are interpreted as Oracle Database NLS character set names, such as <code dir="ltr">AL32UTF8</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref633"></a>Examples</p>
<p>The following example returns the character set ID number of character set <code dir="ltr">US7ASCII</code>:</p>
<pre dir="ltr">Command&gt; select nls_charset_id(&#39;US7ASCII&#39;) from dual;
&lt; 1 &gt;
1 row found.
</pre>
<p>Also see the example in the next section, <a href="#CACGJHEG">&#34;NLS_CHARSET_NAME&#34;</a>, that uses the <code dir="ltr">NLS_CHARSET_ID</code> result as input to <code dir="ltr">NLS_CHARSET_NAME</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACGJHEG"></a>
<div id="TTSQL474" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref634"></a>NLS_CHARSET_NAME</h2>
<p><code dir="ltr">NLS_CHARSET_NAME</code> returns the name of the character set corresponding to the character set ID number.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
For a complete list of supported character sets, see <a class="olink TTREF739" href="../TTREF/attribute.htm#TTREF739">&#34;Supported character sets&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref635"></a>SQL syntax</p>
<pre dir="ltr">NLS_CHARSET_NAME(<span class="italic">Number</span>)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref636"></a>Parameters</p>
<p><code dir="ltr">NLS_CHARSET_NAME</code> has the parameter:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t43">Parameter</th>
<th class="cellalignment6331" id="r1c2-t43">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t43" headers="r1c1-t43"><code dir="ltr"><span class="codeinlineitalic">Number</span></code></td>
<td class="cellalignment6332" headers="r2c1-t43 r1c2-t43">The number represents a character set ID. If the number does not correspond to a legal TimesTen character set ID, <code dir="ltr">NULL</code> is returned.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref637"></a>Description</p>
<p>The character set name is returned as a <code dir="ltr">VARCHAR2</code> value in the database character set.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref638"></a>Examples</p>
<p>The following example returns the database character set corresponding to character set ID number 1:</p>
<pre dir="ltr">Command&gt; select nls_charset_name(1) from dual;
&lt; US7ASCII &gt;
1 row found.
</pre>
<p>The following example gets the same result, determining the name of the database character set by providing <code dir="ltr">CHAR_CS</code> as the character set name within the <code dir="ltr">NLS_CHARSET_ID</code> function, whose results are provided to the <code dir="ltr">NLS_CHARSET_NAME</code> function:</p>
<pre dir="ltr">SELECT NLS_CHARSET_NAME(NLS_CHARSET_ID(&#39;CHAR_CS&#39;)) FROM dual;
&lt; US7ASCII &gt;
1 row found.
</pre>
<p>See the previous section, <a href="#CACJDFJH">&#34;NLS_CHARSET_ID&#34;</a>, for related information.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1033321"></a>
<div id="TTSQL231" class="refsect1">
<h2 class="refsect1">NLSSORT<a id="sthref639"></a></h2>
<p>Returns the sort key value for the given string.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref640"></a>SQL syntax</p>
<pre dir="ltr">NLSSORT (<span class="codeinlineitalic">String</span> [,&#39;NLS_SORT = <span class="codeinlineitalic">SortName</span>&#39;])
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref641"></a>Parameters</p>
<p><code dir="ltr">NLSSORT</code> has the following parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t44">Parameter</th>
<th class="cellalignment6331" id="r1c2-t44">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t44" headers="r1c1-t44"><code dir="ltr"><span class="codeinlineitalic">String</span></code></td>
<td class="cellalignment6332" headers="r2c1-t44 r1c2-t44">Given the <code dir="ltr"><span class="codeinlineitalic">String</span></code>, <code dir="ltr">NLSSORT</code> returns the sort key value used to sort the <code dir="ltr"><span class="codeinlineitalic">String</span></code>. Supported data types for <code dir="ltr"><span class="codeinlineitalic">String</span></code> are <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NCHAR</code>, <code dir="ltr">NVARCHAR2</code>, <code dir="ltr">CLOB</code>, and <code dir="ltr">NCLOB</code>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t44" headers="r1c1-t44"><code dir="ltr">[&#39;NLS_SORT =</code> <code dir="ltr"><span class="codeinlineitalic">SortName</span></code>&#39;<code dir="ltr">]</code></td>
<td class="cellalignment6332" headers="r3c1-t44 r1c2-t44"><code dir="ltr"><span class="codeinlineitalic">SortName</span></code> is either the linguistic sort sequence or <code dir="ltr">BINARY</code>. If you omit this parameter, then the default sort sequence for the session is used. Append to the <code dir="ltr"><span class="codeinlineitalic">SortName</span></code> the suffix <code dir="ltr">-ai</code> for accent-insensitive sorting or <code dir="ltr">-ci</code> for case-insensitive sorting. For more information on acceptable linguistic <code dir="ltr"><span class="codeinlineitalic">SortName</span></code> values, see <a class="olink TTREF746" href="../TTREF/attribute.htm#TTREF746">&#34;Supported linguistic sorts&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref642"></a>Description</p>
<ul>
<li>
<p>The returned sort key value is of type <code dir="ltr">VARBINARY</code>.</p>
</li>
<li>
<p>You can create a linguistic index for linguistic comparisons.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref643"></a>Examples</p>
<p>The following example illustrates sorting and comparison operations based on a linguistic sort sequence rather than on the binary value of the string. In addition, the example shows the same results can be obtained by using the <code dir="ltr">ALTER SESSION... SET NLS_SORT</code> statement.</p>
<pre dir="ltr">Command&gt; CREATE TABLE nsortdemo (name VARCHAR2 (15));
Command&gt; INSERT INTO nsortdemo VALUES (&#39;Gaardiner&#39;);
1 row inserted.
Command&gt; INSERT INTO nsortdemo VALUES (&#39;Gaberd&#39;);
1 row inserted.
Command&gt; INSERT INTO nsortdemo VALUES (&#39;Gaasten&#39;);
1 row inserted.
Command&gt; # Perform Sort
Command&gt; SELECT * FROM nsortdemo ORDER BY name;
&lt; Gaardiner &gt;
&lt; Gaasten &gt;
&lt; Gaberd &gt;
3 rows found.
Command&gt; #Use function to perform sort
Command&gt; SELECT * FROM nsortdemo ORDER BY NLSSORT (name, &#39;NLS_SORT = XDanish&#39;);
&lt; Gaberd &gt;
&lt; Gaardiner &gt;
&lt; Gaasten &gt;
3 rows found.
Command&gt;# comparison operation
Command&gt; SELECT * FROM nsortdemo where Name &gt; &#39;Gaberd&#39;;
&lt; Gardiner &gt;
1 row found.
Command&gt; #Use function in comparison operation
Command&gt; SELECT * FROM nsortdemo WHERE NLSSORT (name, &#39;NLS_SORT = XDanish&#39;) &gt;
&gt; NLSSORT (&#39;Gaberd&#39;, &#39;NLS_SORT = XDanish&#39;);
&lt; Gaardiner &gt;
&lt; Gaasten &gt;
2 rows found.
Command&gt; #Use ALTER SESSION to obtain the same results
Command&gt; ALTER SESSION SET NLS_SORT = &#39;XDanish&#39;;
Session altered.
Command&gt; SELECT * FROM nsortdemo ORDER BY name;
&lt; Gaberd &gt;
&lt; Gaardiner &gt;
&lt; Gaasten &gt;
3 rows found.
Command&gt; SELECT * FROM nsortdemo WHERE name &gt; &#39;Gaberd&#39;;
&lt; Gaardiner &gt;
&lt; Gaasten &gt;
2 rows found.
</pre>
<p>The following example creates a linguistic index:</p>
<pre dir="ltr">Command&gt; CREATE INDEX danishindex 
       &gt; ON nsortdemo (NLSSORT (name, &#39;NLS_SORT =XDanish&#39;));
Command&gt; INDEXES N%;
Indexes on table USER1.NSORTDEMO:
  DANISHINDEX: non-unique range index on columns:
    NLSSORT(NAME,&#39;NLS_SORT = XDanish&#39;)
  1 index found.
1 index found on 1 table.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACBBIBE"></a>
<div id="TTSQL456" class="refsect1">
<h2 class="refsect1"><a id="sthref644"></a><a id="sthref645"></a><a id="sthref646"></a>NULLIF</h2>
<p><code dir="ltr">NULLIF</code> compares two expressions. If the values are equal, <code dir="ltr">NULLIF</code> returns a <code dir="ltr">NULL</code>; otherwise, the function returns the first expression.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref647"></a>SQL syntax</p>
<pre dir="ltr">NULLIF(<span class="italic">Expression1</span>, <span class="italic">Expression2</span>)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref648"></a>Parameters</p>
<p><code dir="ltr">NULLIF</code> has the following parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t45">Parameter</th>
<th class="cellalignment6331" id="r1c2-t45">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t45" headers="r1c1-t45"><code dir="ltr"><span class="codeinlineitalic">Expression1</span></code></td>
<td class="cellalignment6332" headers="r2c1-t45 r1c2-t45">The expression that is tested to see whether it is equal to <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code>. You cannot specify the literal <code dir="ltr">NULL</code> for <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t45" headers="r1c1-t45"><code dir="ltr"><span class="codeinlineitalic">Expression2</span></code></td>
<td class="cellalignment6332" headers="r3c1-t45 r1c2-t45">The expression that is tested to see whether it is equal to <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref649"></a>Description</p>
<ul>
<li>
<p>If both parameters are numeric data types, Timesten determines the argument with the higher numeric precedence, implicitly converts the other argument to this data type, and returns this data type. If the parameters are not numeric data types, they must be in the same data type family.</p>
</li>
<li>
<p><code dir="ltr">LOB</code> data types are not supported in <code dir="ltr">NULLIF</code>. The <code dir="ltr">TIME</code> data type is only supported if both columns are of the <code dir="ltr">TIME</code> data type.</p>
</li>
<li>
<p>The <code dir="ltr">NULLIF</code> function is logically equivalent to the following <code dir="ltr">CASE</code> expression:</p>
<pre dir="ltr">CASE WHEN <span class="italic">Expression1</span> = <span class="italic">Expression2</span> THEN NULL ELSE <span class="italic">Expression1</span> END
</pre></li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
See <a href="express.htm#i1040507">&#34;CASE expressions&#34;</a> for more details.</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref650"></a>Examples</p>
<p>The following example selects employees who have changed jobs since they were hired, which is indicated by a different <code dir="ltr">job_id</code> in the <code dir="ltr">job_history</code> table from the current <code dir="ltr">job_id</code> in the <code dir="ltr">employees</code> table. Thus, when you apply <code dir="ltr">NULLIF</code> to the old and new <code dir="ltr">job_id</code> entries, those that are the same returns a <code dir="ltr">NULL</code>; those that are different indicate those employees who have changed jobs.</p>
<pre dir="ltr">Command&gt; SELECT e.last_name, NULLIF(e.job_id, j.job_id) &#34;Old Job ID&#34; 
 FROM employees e, job_history j 
 WHERE e.employee_id = j.employee_id 
 ORDER BY last_name, &#34;Old Job ID&#34;;

&lt; De Haan, AD_VP &gt;
&lt; Hartstein, MK_MAN &gt;
&lt; Kaufling, ST_MAN &gt;
&lt; Kochhar, AD_VP &gt;
&lt; Kochhar, AD_VP &gt;
&lt; Raphaely, PU_MAN &gt;
&lt; Taylor, SA_REP &gt;
&lt; Taylor, &lt;NULL&gt; &gt;
&lt; Whalen, AD_ASST &gt;
&lt; Whalen, &lt;NULL&gt; &gt;
10 rows found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1022177"></a>
<div id="TTSQL232" class="refsect1">
<h2 class="refsect1">NUMTODSINTERVAL<a id="sthref651"></a><a id="sthref652"></a><a id="sthref653"></a></h2>
<p>Converts a number or expression to an <code dir="ltr">INTERVAL</code> <code dir="ltr">DAY TO SECOND</code> type.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref654"></a>SQL syntax</p>
<pre dir="ltr">NUMTODSINTERVAL (<span class="italic">Expression1</span>, <span class="italic">IntervalUnit</span>)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref655"></a>Parameters</p>
<p><code dir="ltr">NUMTODSINTERVAL</code> has the parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters" dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t47">Parameter</th>
<th class="cellalignment6331" id="r1c2-t47">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t47" headers="r1c1-t47"><code dir="ltr"><span class="codeinlineitalic">Expression1</span></code></td>
<td class="cellalignment6332" headers="r2c1-t47 r1c2-t47">The argument can be any <code dir="ltr">NUMBER</code> value or an expression that can be implicitly converted to a <code dir="ltr">NUMBER</code> value.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t47" headers="r1c1-t47"><code dir="ltr"><span class="codeinlineitalic">IntervalUnit</span></code></td>
<td class="cellalignment6332" headers="r3c1-t47 r1c2-t47">One of the string constants: &#39;<code dir="ltr">DAY</code>&#39;, &#39;<code dir="ltr">HOUR</code>&#39;, &#39;<code dir="ltr">MINUTE</code>&#39;, or &#39;<code dir="ltr">SECOND</code>&#39;.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref656"></a>Examples</p>
<p>Example using <code dir="ltr">NUMTODSINTERVAL</code> with <code dir="ltr">SYSDATE</code>:</p>
<pre dir="ltr">Command&gt; SELECT SYSDATE + NUMTODSINTERVAL(20,&#39;SECOND&#39;) FROM dual;
&lt; 2007-01-28 09:11:06 &gt;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1022166"></a>
<div id="TTSQL233" class="refsect1">
<h2 class="refsect1">NUMTOYMINTERVAL<a id="sthref657"></a><a id="sthref658"></a><a id="sthref659"></a></h2>
<p>Converts a number or expression to an <code dir="ltr">INTERVAL YEAR TO MONTH</code> type.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref660"></a>SQL syntax</p>
<pre dir="ltr">NUMTOYMINTERVAL (<span class="italic">Expression1</span>, &#39;<span class="italic">IntervalUnit&#39;</span>)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref661"></a>Parameters</p>
<p><code dir="ltr">NUMTOYMINTERVAL</code> has the parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t48">Parameter</th>
<th class="cellalignment6331" id="r1c2-t48">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t48" headers="r1c1-t48"><code dir="ltr"><span class="codeinlineitalic">Expression1</span></code></td>
<td class="cellalignment6332" headers="r2c1-t48 r1c2-t48">The argument can be any <code dir="ltr">NUMBER</code> value or an expression that can be implicitly converted to a <code dir="ltr">NUMBER</code> value.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t48" headers="r1c1-t48"><code dir="ltr"><span class="codeinlineitalic">IntervalUnit</span></code></td>
<td class="cellalignment6332" headers="r3c1-t48 r1c2-t48">One of the string constants <code dir="ltr">&#39;YEAR&#39;</code> or <code dir="ltr">&#39;MONTH&#39;</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref662"></a>Examples</p>
<p>An example using <code dir="ltr">NUMTOYMINTERVAL</code>:</p>
<pre dir="ltr">Command&gt; SELECT SYSDATE + NUMTOYMINTERVAL(1,&#39;MONTH&#39;) FROM dual;
&lt; 2007-02-28 09:23:28 &gt;
1 row found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1027380"></a>
<div id="TTSQL234" class="refsect1">
<h2 class="refsect1">NVL<a id="sthref663"></a><a id="sthref664"></a><a id="sthref665"></a></h2>
<p>The <code dir="ltr">NVL</code> function replaces a null value with a second value.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref666"></a>SQL syntax</p>
<pre dir="ltr">NVL(<span class="italic">Expression1</span>, <span class="italic">Expression2</span>)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref667"></a>Parameters</p>
<p><code dir="ltr">NVL</code> has the parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t49">Parameter</th>
<th class="cellalignment6331" id="r1c2-t49">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t49" headers="r1c1-t49"><code dir="ltr"><span class="codeinlineitalic">Expression1</span></code></td>
<td class="cellalignment6332" headers="r2c1-t49 r1c2-t49">The expression whose values are to be tested for <code dir="ltr">NULL</code>, which can be a <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NCHAR</code>, <code dir="ltr">NVARCHAR2</code>, <code dir="ltr">CLOB</code>, <code dir="ltr">NCLOB</code>, or <code dir="ltr">BLOB</code> expression.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t49" headers="r1c1-t49"><code dir="ltr"><span class="codeinlineitalic">Expression2</span></code></td>
<td class="cellalignment6332" headers="r3c1-t49 r1c2-t49">The alternate value to use if the value of <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is <code dir="ltr">NULL</code>, which can be a <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NCHAR</code>, <code dir="ltr">NVARCHAR2</code>, <code dir="ltr">CLOB</code>, <code dir="ltr">NCLOB</code>, or <code dir="ltr">BLOB</code> expression.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref668"></a>Description</p>
<ul>
<li>
<p>The data types of <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> and <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code> must be compatible. If the data types are different, the data types are implicitly converted, if possible. If they cannot be implicitly converted, an error is returned.</p>
<p>The following describes how the implicit conversion of data types is performed:</p>
<ul>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is character data, then <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code> is converted to the same data type of <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> and returns the result in a <code dir="ltr">VARCHAR2</code> in the character set of <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code>.</p>
</li>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is numeric data, then TimesTen determines which expression has the highest numeric precedence and implicitly converts the other argument to that data type, which is also the data type that is returned.</p>
</li>
</ul>
</li>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is <code dir="ltr">NULL</code>, the <code dir="ltr">NVL</code> function returns <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code>. If <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is <code dir="ltr">NOT NULL</code>, the <code dir="ltr">NVL</code> function returns <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code>.</p>
</li>
<li>
<p>The <code dir="ltr">NVL</code> function can be used in the <code dir="ltr">WHERE</code> or <code dir="ltr">HAVING</code> clause of <code dir="ltr">SELECT</code>, <code dir="ltr">UPDATE</code>, or <code dir="ltr">DELETE</code> statements and in the <code dir="ltr">SELECT</code> list of a <code dir="ltr">SELECT</code> statement.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref669"></a>Examples</p>
<p>This example checks for null values of <code dir="ltr">commission_pct</code> and replaces them with <code dir="ltr">&#39;Not Applicable&#39;</code> for employees whose last names start with &#34;B&#34;.</p>
<pre dir="ltr">Command&gt; SELECT last_name, NVL(TO_CHAR(commission_pct), &#39;Not Applicable&#39;)
       &gt; FROM employees 
       &gt; WHERE last_name LIKE &#39;B%&#39;
       &gt; ORDER BY last_name;

&lt; Baer, Not Applicable &gt;
&lt; Baida, Not Applicable &gt;
&lt; Banda, .1 &gt;
&lt; Bates, .15 &gt;
&lt; Bell, Not Applicable &gt;
&lt; Bernstein, .25 &gt;
&lt; Bissot, Not Applicable &gt;
&lt; Bloom, .2 &gt;
&lt; Bull, Not Applicable &gt;
9 rows found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CIHDEDIG"></a>
<div id="TTSQL235" class="refsect1">
<h2 class="refsect1"><a id="sthref670"></a><a id="sthref671"></a><a id="sthref672"></a>POWER</h2>
<p>The <code dir="ltr">POWER</code> function returns <code dir="ltr"><span class="codeinlineitalic">Base</span></code> raised to the <code dir="ltr"><span class="codeinlineitalic">Exponent</span></code> power. The <code dir="ltr"><span class="codeinlineitalic">Base</span></code> and <code dir="ltr"><span class="codeinlineitalic">Exponent</span></code> can be any numbers, but if the <code dir="ltr"><span class="codeinlineitalic">Base</span></code> is negative, the <code dir="ltr"><span class="codeinlineitalic">Exponent</span></code> must be an integer.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref673"></a>SQL syntax</p>
<pre dir="ltr">POWER (<span class="codeinlineitalic">Base</span>, <span class="codeinlineitalic">Exponent</span>)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref674"></a>Parameters</p>
<p><code dir="ltr">POWER</code> has the parameters:</p>
</div>
<!-- class="refsubsect" -->
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t50">Parameter</th>
<th class="cellalignment6331" id="r1c2-t50">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t50" headers="r1c1-t50"><code dir="ltr"><span class="codeinlineitalic">Base</span></code></td>
<td class="cellalignment6332" headers="r2c1-t50 r1c2-t50">Operand or column can be any numeric type. <code dir="ltr">POWER</code> returns this value raised to <code dir="ltr"><span class="codeinlineitalic">Exponent</span></code> power.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t50" headers="r1c1-t50"><code dir="ltr"><span class="codeinlineitalic">Exponent</span></code></td>
<td class="cellalignment6332" headers="r3c1-t50 r1c2-t50">Operand or column can be any numeric type. If <code dir="ltr"><span class="codeinlineitalic">Base</span></code> is negative, <code dir="ltr"><span class="codeinlineitalic">Exponent</span></code> must be an integer.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref675"></a>Description</p>
<p>If either <code dir="ltr"><span class="codeinlineitalic">Base</span></code> or <code dir="ltr"><span class="codeinlineitalic">Exponent</span></code> is of type <code dir="ltr">BINARY_FLOAT</code> or <code dir="ltr">BINARY_DOUBLE</code>, the data type returned is <code dir="ltr">BINARY_DOUBLE</code>. If the <code dir="ltr"><span class="codeinlineitalic">Base</span></code> is of type <code dir="ltr">NUMBER</code> or <code dir="ltr">TT_DECIMAL</code>, and the <code dir="ltr"><span class="codeinlineitalic">Exponent</span></code> is not of type <code dir="ltr">BINARY_FLOAT</code> or <code dir="ltr">BINARY_DOUBLE</code>, the date type returned is <code dir="ltr">NUMBER</code> with maximum precision and scale. If <code dir="ltr"><span class="codeinlineitalic">Base</span></code> is one of the TT* numeric types (<code dir="ltr">TT_BIGINT</code>, <code dir="ltr">TT_INTEGER</code>, <code dir="ltr">TT_SMALLINT</code>, or <code dir="ltr">TT_TINYINT</code>), the data type returned is <code dir="ltr">BINARY_DOUBLE</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref676"></a>Example</p>
<p>Use the <code dir="ltr">POWER</code> function to return the <code dir="ltr">commission_pct</code> squared for the employee with <code dir="ltr">employee_id</code> equal to 145.</p>
<pre dir="ltr">Command&gt; SELECT employee_id, commission_pct FROM employees 
 WHERE employee_id = 145;

&lt; 145, .4 &gt;
1 row found.

Command&gt; SELECT POWER (commission_pct,2) FROM employees WHERE employee_id = 145;
&lt; .16 &gt;
1 row found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACEHDDC"></a>
<div id="TTSQL495" class="refsect1">
<h2 class="refsect1">RANK<a id="sthref677"></a></h2>
<p>The <code dir="ltr">RANK</code> function is an analytic function that calculates the rank of a value in a group of values.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref678"></a>SQL syntax</p>
<pre dir="ltr">RANK () OVER ( [<span class="italic">QueryPartitionClause</span>] <span class="italic">OrderByClause</span> )
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref679"></a>Parameters</p>
<p><code dir="ltr">RANK</code> has the parameters:</p>
</div>
<!-- class="refsubsect" -->
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t51">Parameter</th>
<th class="cellalignment6331" id="r1c2-t51">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t51" headers="r1c1-t51"><code dir="ltr"><span class="codeinlineitalic">QueryPartitionClause</span></code></td>
<td class="cellalignment6332" headers="r2c1-t51 r1c2-t51">For information on syntax, semantics, and restrictions, see <a href="#CACCGJBB">&#34;Analytic functions&#34;</a>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t51" headers="r1c1-t51"><code dir="ltr"><span class="codeinlineitalic">OrderByClause</span></code></td>
<td class="cellalignment6332" headers="r3c1-t51 r1c2-t51">For information on syntax, semantics, and restrictions, see <a href="#CACCGJBB">&#34;Analytic functions&#34;</a>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref680"></a>Description</p>
<ul>
<li>
<p>The return type is <code dir="ltr">NUMBER</code>.</p>
</li>
<li>
<p>Rows with equal values for the ranking criteria receive the same rank. TimesTen then adds the number of tied rows to the ties rank to calculate the next rank. Therefore, the ranks may not be consecutive numbers.</p>
</li>
<li>
<p><code dir="ltr">RANK</code> computes the rank of each row returned from a query with respect to the other rows returned by the query, based on the values of the expressions in the <code dir="ltr"><span class="codeinlineitalic">OrderByClause</span></code>.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref681"></a>Example</p>
<p>Use the <code dir="ltr">RANK</code> function to rank the first 10 employees in department 80 based on their salary and commission. Identical salary values receive the same rank and cause nonconsecutive ranks.</p>
<pre dir="ltr">Command&gt; SELECT first 10 department_id, last_name, salary, commission_pct,
       &gt;  RANK() OVER (PARTITION BY department_id
       &gt;    ORDER BY salary DESC, commission_pct) &#34;Rank&#34;
       &gt; FROM employees WHERE department_id = 80
       &gt; ORDER BY department_id, last_name, salary, commission_pct, &#34;Rank&#34;;
&lt; 80, Abel, 11000, .3, 5 &gt;
&lt; 80, Ande, 6400, .1, 31 &gt;
&lt; 80, Banda, 6200, .1, 32 &gt;
&lt; 80, Bates, 7300, .15, 26 &gt;
&lt; 80, Bernstein, 9500, .25, 14 &gt;
&lt; 80, Bloom, 10000, .2, 9 &gt;
&lt; 80, Cambrault, 7500, .2, 23 &gt;
&lt; 80, Cambrault, 11000, .3, 5
&lt; 80, Doran, 7500, .3, 24 &gt;
&lt; 80, Errazuriz, 12000, .3, 3 &gt;
10 rows found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACGEDBC"></a>
<div id="TTSQL475" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref682"></a><a id="sthref683"></a>REPLACE</h2>
<p><code dir="ltr">REPLACE</code> substitutes a sequence of characters in a given string with another set of characters or removes the string entirely.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref684"></a>SQL syntax</p>
<pre dir="ltr">REPLACE (<span class="italic">String</span>, <span class="italic">SearchString</span> [,<span class="italic">ReplacementString</span>] )
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref685"></a>Parameters</p>
<p><code dir="ltr">REPLACE</code> has the parameters:</p>
</div>
<!-- class="refsubsect" -->
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t52">Parameter</th>
<th class="cellalignment6331" id="r1c2-t52">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t52" headers="r1c1-t52"><code dir="ltr"><span class="codeinlineitalic">String</span></code></td>
<td class="cellalignment6332" headers="r2c1-t52 r1c2-t52">Source string containing the substring to replace.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t52" headers="r1c1-t52"><code dir="ltr"><span class="codeinlineitalic">SearchString</span></code></td>
<td class="cellalignment6332" headers="r3c1-t52 r1c2-t52">String of characters to be replaced in the original string. If <code dir="ltr"><span class="codeinlineitalic">SearchString</span></code> is <code dir="ltr">NULL</code>, the original <code dir="ltr"><span class="codeinlineitalic">String</span></code> is returned without any modification.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t52" headers="r1c1-t52"><code dir="ltr"><span class="codeinlineitalic">ReplacementString</span></code></td>
<td class="cellalignment6332" headers="r4c1-t52 r1c2-t52">String of characters that are used to replace all occurrences of the search string in the original string. If <code dir="ltr"><span class="codeinlineitalic">ReplacementString</span></code> is omitted or <code dir="ltr">NULL</code>, all occurrences of <code dir="ltr"><span class="codeinlineitalic">SearchString</span></code> are removed from the source <code dir="ltr"><span class="codeinlineitalic">String</span></code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref686"></a>Description</p>
<ul>
<li>
<p><code dir="ltr">REPLACE</code> returns a string where every occurrence of the <code dir="ltr"><span class="codeinlineitalic">SearchString</span></code> is replaced with <code dir="ltr"><span class="codeinlineitalic">ReplacementString</span></code> in the source <code dir="ltr"><span class="codeinlineitalic">String</span></code>.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">String</span></code>, <code dir="ltr"><span class="codeinlineitalic">SearchString</span></code> and <code dir="ltr"><span class="codeinlineitalic">ReplacementString</span></code> can be any of the following data types: <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NCHAR</code>, <code dir="ltr">NVARCHAR2</code>, <code dir="ltr">CLOB</code>, or <code dir="ltr">NCLOB</code>. Both TimesTen and Oracle Database data types are supported. All non-character data types, except for <code dir="ltr">BLOB</code>, are implicitly converted to a string data type.</p>
</li>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">String</span></code> is a <code dir="ltr">CHAR</code> or <code dir="ltr">VARCHAR2</code>, the returned string is of data type <code dir="ltr">VARCHAR2</code>. If <code dir="ltr"><span class="codeinlineitalic">String</span></code> is an <code dir="ltr">NCHAR</code> or <code dir="ltr">NVARCHAR2</code>, the returned string is of data type <code dir="ltr">NVARCHAR2</code>. For <code dir="ltr">CLOB</code> or <code dir="ltr">NCLOB</code> data types, the data type returned is the same as the data type provided in <code dir="ltr"><span class="codeinlineitalic">String</span></code>. The character set is the same as the source <code dir="ltr"><span class="codeinlineitalic">String</span></code>.</p>
</li>
<li>
<p>If the returned string length is zero, <code dir="ltr">NULL</code> is returned for Oracle Database data types and a zero length string is returned for TimesTen data types. See <a href="types.htm#i1008748">Chapter 1, &#34;Data Types&#34;</a> for details on all data types.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref687"></a>Examples</p>
<p>The following prints out all locations in Canada, replacing the country code of CA with Canada for easier readability.</p>
<pre dir="ltr">Command&gt; SELECT location_id, street_address,
&gt; city, state_province, postal_code,
&gt; REPLACE(country_id, &#39;CA&#39;, &#39;Canada&#39;) 
&gt; FROM LOCATIONS 
&gt; WHERE country_id LIKE &#39;CA&#39;;

&lt; 1800, 147 Spadina Ave, Toronto, Ontario, M5V 2L7, Canada &gt;
&lt; 1900, 6092 Boxwood St, Whitehorse, Yukon, YSW 9T2, Canada &gt;
2 rows found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CIHBFIGB"></a>
<div id="TTSQL236" class="refsect1">
<h2 class="refsect1"><a id="sthref688"></a><a id="sthref689"></a>ROUND (date)</h2>
<p>Returns date rounded to the unit specified by the format model <code dir="ltr"><span class="codeinlineitalic">fmt</span></code>. The value returned is of type <code dir="ltr">DATE</code>. If you do not specify <code dir="ltr"><span class="codeinlineitalic">fmt</span></code>, then <code dir="ltr"><span class="codeinlineitalic">date</span></code> is rounded to the nearest day.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref690"></a>SQL syntax</p>
<pre dir="ltr">ROUND (<span class="codeinlineitalic">Date</span> [,<span class="codeinlineitalic">Fmt</span>]) 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref691"></a>Parameters</p>
<p><code dir="ltr">ROUND (</code><code dir="ltr"><span class="codeinlineitalic">Date</span></code><code dir="ltr">)</code> has the parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t53">Parameter</th>
<th class="cellalignment6331" id="r1c2-t53">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t53" headers="r1c1-t53"><code dir="ltr"><span class="codeinlineitalic">Date</span></code></td>
<td class="cellalignment6332" headers="r2c1-t53 r1c2-t53">The date that is rounded. Must resolve to a date value.
<p>If you do not specify <code dir="ltr"><span class="codeinlineitalic">fmt</span></code>, then <code dir="ltr"><span class="codeinlineitalic">date</span></code> is rounded to the nearest day.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t53" headers="r1c1-t53"><code dir="ltr">[,</code><code dir="ltr"><span class="codeinlineitalic">Fmt</span></code><code dir="ltr">]</code></td>
<td class="cellalignment6332" headers="r3c1-t53 r1c2-t53">The format model rounding unit. Specify either a constant or a parameter for <code dir="ltr"><span class="codeinlineitalic">fmt</span></code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref692"></a>Description</p>
<ul>
<li>
<p>Date can be of type <code dir="ltr">DATE</code> or <code dir="ltr">TIMESTAMP</code>. The data type returned is <code dir="ltr">DATE</code>.</p>
</li>
<li>
<p>Data types <code dir="ltr">TT_DATE</code> and <code dir="ltr">TT_TIMESTAMP</code> are not supported.</p>
</li>
<li>
<p>For the supported format models to use in <code dir="ltr"><span class="codeinlineitalic">fmt</span></code>, see <a href="express.htm#i1094088">&#34;Format model for ROUND and TRUNC date functions&#34;</a>.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref693"></a>Examples</p>
<p>Round <code dir="ltr"><span class="codeinlineitalic">Date</span></code> to the first day of the following year by specifying <code dir="ltr">&#39;YEAR&#39;</code> as the format model:</p>
<pre dir="ltr">Command&gt; SELECT ROUND (DATE &#39;2007-08-25&#39;,&#39;YEAR&#39;) FROM dual;
&lt; 2008-01-01 00:00:00 &gt;
1 row found.
</pre>
<p>Omit <code dir="ltr"><span class="codeinlineitalic">Fmt</span></code>. Specify <code dir="ltr"><span class="codeinlineitalic">Date</span></code> as type <code dir="ltr">TIMESTAMP</code> with a time of <code dir="ltr">13:00:00</code>. <code dir="ltr"><span class="codeinlineitalic">Date</span></code> is rounded to nearest day:</p>
<pre dir="ltr">Command&gt; SELECT ROUND (TIMESTAMP &#39;2007-08-16 13:00:00&#39;) FROM dual;
&lt; 2007-08-17 00:00:00 &gt;
1 row found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CIHICJDB"></a>
<div id="TTSQL237" class="refsect1">
<h2 class="refsect1"><a id="sthref694"></a><a id="sthref695"></a>ROUND (expression)</h2>
<p>The <code dir="ltr">ROUND</code> function returns <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> rounded to <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code> places to the right of the decimal point.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref696"></a>SQL syntax</p>
<pre dir="ltr">ROUND (<span class="italic">Expression1</span> [,<span class="italic">Expression2</span>])
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref697"></a>Parameters</p>
<p><code dir="ltr">ROUND</code> has the parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t54">Parameter</th>
<th class="cellalignment6331" id="r1c2-t54">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t54" headers="r1c1-t54"><code dir="ltr"><span class="codeinlineitalic">Expression1</span></code></td>
<td class="cellalignment6332" headers="r2c1-t54 r1c2-t54">Operand or column can be any numeric type.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t54" headers="r1c1-t54"><code dir="ltr"><span class="codeinlineitalic">Expression2</span></code></td>
<td class="cellalignment6332" headers="r3c1-t54 r1c2-t54">Operand or column that indicates how many places to round. Can be negative to round off digits left of the decimal point. If you omit <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code>, then <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is rounded to 0 places. Must be an integer.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref698"></a>Description</p>
<ul>
<li>
<p>If you omit <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code>, the data type returned is the same as the numeric data type of <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code>, unless <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is of type <code dir="ltr">TT_DECIMAL</code>. If <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is of type <code dir="ltr">TT_DECIMAL</code> and you omit <code dir="ltr"><span class="codeinlineitalic">Expression2,</span></code>the data type returned is <code dir="ltr">NUMBER</code> with maximum precision and scale.</p>
</li>
<li>
<p>If you specify <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code>, the data type returned is <code dir="ltr">NUMBER</code> with maximum precision and scale.</p>
</li>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is of type <code dir="ltr">BINARY_FLOAT</code> or <code dir="ltr">BINARY_DOUBLE</code>, the value of <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is rounded to the nearest even value. Otherwise, the value of <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is rounded away from 0 (for example, to <code dir="ltr"><span class="codeinlineitalic">x</span></code><code dir="ltr">+1</code> when <code dir="ltr"><span class="codeinlineitalic">x</span></code><code dir="ltr">.5</code> is positive and to <code dir="ltr"><span class="codeinlineitalic">x</span></code><code dir="ltr">-1</code> when <code dir="ltr"><span class="codeinlineitalic">x</span></code>.5 is negative).</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref699"></a>Examples</p>
<p>Round a number two places to the right of the decimal point.</p>
<pre dir="ltr">Command&gt; SELECT ROUND (15.5555,2) FROM dual;
&lt; 15.56 &gt;
1 row found.
</pre>
<p>Round a number to the left of the decimal point by specifying a negative number for <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code>.</p>
<pre dir="ltr">Command&gt; SELECT ROUND (15.5555,-1) FROM dual;
&lt; 20 &gt;
1 row found.
</pre>
<p>Round a floating point number. Floating point numbers are rounded to nearest even value. Contrast this to rounding an expression of type <code dir="ltr">NUMBER</code> where the value is rounded up (for positive values).</p>
<pre dir="ltr">Command&gt; SELECT ROUND (1.5f), ROUND (2.5f) FROM dual;
&lt; 2.00000000000000, 2.00000000000000 &gt;
1 row found.
Command&gt; SELECT ROUND (1.5), ROUND (2.5) FROM dual;
&lt; 2, 3 &gt;
1 row found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACEIFIB"></a>
<div id="TTSQL496" class="refsect1">
<h2 class="refsect1">ROW_NUMBER<a id="sthref700"></a></h2>
<p>The <code dir="ltr">ROW_NUMBER</code> function is an analytic function that assigns a unique number to each row to which it is applied (either each row in a partition or each row returned by the query), in the ordered sequence of rows specified in <code dir="ltr"><span class="codeinlineitalic">OrderByClause</span></code>, beginning with 1.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref701"></a>SQL syntax</p>
<pre dir="ltr">ROW_NUMBER () OVER ( [<span class="italic">QueryPartitionClause</span>] <span class="italic">OrderByClause</span> )
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref702"></a>Parameters</p>
<p><code dir="ltr">ROW_NUMBER</code> has the parameters:</p>
</div>
<!-- class="refsubsect" -->
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t55">Parameter</th>
<th class="cellalignment6331" id="r1c2-t55">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t55" headers="r1c1-t55"><code dir="ltr"><span class="codeinlineitalic">QueryPartitionClause</span></code></td>
<td class="cellalignment6332" headers="r2c1-t55 r1c2-t55">For information on syntax, semantics, and restrictions, see <a href="#CACCGJBB">&#34;Analytic functions&#34;</a>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t55" headers="r1c1-t55"><code dir="ltr"><span class="codeinlineitalic">OrderByClause</span></code></td>
<td class="cellalignment6332" headers="r3c1-t55 r1c2-t55">For information on syntax, semantics, and restrictions, see <a href="#CACCGJBB">&#34;Analytic functions&#34;</a>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref703"></a>Description</p>
<ul>
<li>
<p><code dir="ltr">ROWNUM</code> pseudo column returns a number indicating the order in which TimesTen selects a row from a table or a set of joined rows. In contrast, the analytic function, <code dir="ltr">ROW_NUMBER</code>, gives superior support in ordering the results of a query before assigning the number.</p>
</li>
<li>
<p>By nesting a subquery, using <code dir="ltr">ROW_NUMBER</code>, inside a query that retrieves the <code dir="ltr">ROW_NUMBER</code> values for a specified range, you can find a precise subset or rows from the results of the inner query. For consistent results, the query must ensure a deterministic sort order.</p>
</li>
<li>
<p>The return data type is <code dir="ltr">NUMBER</code>.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref704"></a>Example</p>
<p>Use <code dir="ltr">ROW_NUMBER</code> to return the three highest paid employees in each department. Fewer then three rows are returned for departments with fewer than three employees.</p>
<pre dir="ltr">Command&gt; SELECT FIRST 10 department_id, first_name, last_name, salary
       &gt; FROM
       &gt;    (SELECT department_id, first_name, last_name, salary, ROW_NUMBER()
       &gt;       OVER (PARTITION BY department_id ORDER BY salary desc) rn
       &gt;     FROM employees )
       &gt; WHERE rn &lt;= 3
       &gt; ORDER BY department_id, salary DESC, last_name;
&lt; 10, Jennifer, Whalen, 4400 &gt;
&lt; 20, Michael, Hartstein, 13000 &gt;
&lt; 20, Pat, Fay, 6000 &gt;
&lt; 30, Den, Raphaely, 11000 &gt;
&lt; 30, Alexander, Khoo, 3100 &gt;
&lt; 30, Shelli, Baida, 2900 &gt;
&lt; 40, Susan, Mavris, 6500 &gt;
&lt; 50, Adam, Fripp, 8200 &gt;
&lt; 50, Matthew, Weiss, 8000 &gt;
&lt; 50, Payam, Kaufling, 7900 &gt;
10 rows found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CIHIGDAB"></a>
<div id="TTSQL238" class="refsect1">
<h2 class="refsect1"><a id="sthref705"></a><a id="sthref706"></a><a id="sthref707"></a>RPAD</h2>
<p>The <code dir="ltr">RPAD</code> function returns <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code>, right-padded to length <code dir="ltr"><span class="codeinlineitalic">n</span></code> characters with <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code>, replicated as many times as necessary. This function is useful for formatting the output of a query.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref708"></a>SQL syntax</p>
<pre dir="ltr">RPAD (<span class="italic">Expression1</span>, <span class="italic">n</span> [,<span class="italic">Expression2</span>])
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref709"></a>Parameters</p>
<p><code dir="ltr">RPAD</code> has the parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t56">Parameter</th>
<th class="cellalignment6331" id="r1c2-t56">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t56" headers="r1c1-t56"><code dir="ltr"><span class="codeinlineitalic">Expression1</span></code></td>
<td class="cellalignment6332" headers="r2c1-t56 r1c2-t56"><code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NCHAR</code>, <code dir="ltr">NVARCHAR2</code>, <code dir="ltr">CLOB</code> or <code dir="ltr">NCLOB</code> operand or column to be right-padded. If <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is longer than <code dir="ltr"><span class="codeinlineitalic">n</span></code>, then <code dir="ltr">RPAD</code> returns the portion of <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> that fits in <code dir="ltr"><span class="codeinlineitalic">n</span></code>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t56" headers="r1c1-t56"><code dir="ltr"><span class="codeinlineitalic">n</span></code></td>
<td class="cellalignment6332" headers="r3c1-t56 r1c2-t56">Length of characters returned by <code dir="ltr">RPAD</code> function. Must be a <code dir="ltr">NUMBER</code> integer or a value that can be implicitly converted to a <code dir="ltr">NUMBER</code> integer.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t56" headers="r1c1-t56"><code dir="ltr"><span class="codeinlineitalic">Expression2</span></code></td>
<td class="cellalignment6332" headers="r4c1-t56 r1c2-t56"><code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NCHAR</code>, <code dir="ltr">NVARCHAR2</code>, <code dir="ltr">CLOB</code> or <code dir="ltr">NCLOB</code> operand or column to be right-padded to <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code>. If you do not specify <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code>, the default is a single blank.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref710"></a>Description</p>
<ul>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is of type <code dir="ltr">CHAR</code> or <code dir="ltr">VARCHAR2</code>, the data type returned is <code dir="ltr">VARCHAR2</code>. If <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is of type <code dir="ltr">NCHAR</code> or <code dir="ltr">NVARCHAR2</code>, the data type returned is <code dir="ltr">NVARCHAR2</code>. If <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is a LOB, the data type returned is the same as the LOB data type provided.</p>
</li>
<li>
<p>The returned data type length is equal to <code dir="ltr"><span class="codeinlineitalic">n</span></code> if <code dir="ltr"><span class="codeinlineitalic">n</span></code> is a constant. Otherwise, the maximum result length of 8300 is returned.</p>
</li>
<li>
<p>You can specify <code dir="ltr">TT_CHAR</code>, <code dir="ltr">TT_VARCHAR</code>, <code dir="ltr">TT_NCHAR</code>, and <code dir="ltr">TT_NVARCHAR</code> for <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> and <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code>. If <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is of type <code dir="ltr">TT_CHAR</code> or <code dir="ltr">TT_VARCHAR</code>, the data type returned is <code dir="ltr">TT_VARCHAR</code>. If <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is of type <code dir="ltr">TT_NCHAR</code> or <code dir="ltr">TT_NVARCHAR</code>, the data type returned is <code dir="ltr">TT_NVARCHAR</code>.</p>
</li>
<li>
<p>For <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NCHAR</code>, <code dir="ltr">NVARCHAR2</code>, <code dir="ltr">CLOB</code> or <code dir="ltr">NCLOB</code> data types:</p>
<ul>
<li>
<p>If either <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> or <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code> is <code dir="ltr">NULL</code>, the result is <code dir="ltr">NULL</code>. If <code dir="ltr"><span class="codeinlineitalic">n</span></code> is less than or equal to <code dir="ltr">0</code>, the result is <code dir="ltr">NULL</code>.</p>
</li>
</ul>
</li>
<li>
<p>For <code dir="ltr">TT_CHAR</code>, <code dir="ltr">TT_VARCHAR</code>, <code dir="ltr">TT_NCHAR</code> and <code dir="ltr">TT_NVARCHAR</code> types:</p>
<ul>
<li>
<p>If either <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> or <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code> is not <code dir="ltr">NULL</code> and if <code dir="ltr"><span class="codeinlineitalic">n</span></code> is less than or equal to <code dir="ltr">0</code>, the result is the empty string.</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref711"></a>Examples</p>
<p>Concatenate <code dir="ltr">first_name</code> and <code dir="ltr">last_name</code> from the <code dir="ltr">employees</code> table. Call the <code dir="ltr">RPAD</code> function to return <code dir="ltr">first_name</code> right-padded to length 12 with spaces and call <code dir="ltr">RPAD</code> a second time to return <code dir="ltr">last_name</code> right-padded to length 12 with spaces. Select first five rows.</p>
<pre dir="ltr">Command&gt; SELECT FIRST 5 CONCAT (RPAD (first_name,12),
       &gt; RPAD (last_name,12)) FROM employees
       &gt; ORDER BY first_name, last_name;
&lt; Adam        Fripp        &gt;
&lt; Alana       Walsh        &gt;
&lt; Alberto     Errazuriz    &gt;
&lt; Alexander   Hunold       &gt;
&lt; Alexander   Khoo         &gt;
5 rows found.
</pre>
<p>Call the <code dir="ltr">RPAD</code> function to return <code dir="ltr">last_name</code> right-padded to length 20 characters with the dot (&#39;<code dir="ltr">.</code>&#39;) character. Use the <code dir="ltr">employees</code> table and select first five rows.</p>
<pre dir="ltr">Command&gt; SELECT FIRST 5 RPAD (last_name,20,&#39;.&#39;) FROM employees
       &gt; ORDER BY last_name;
&lt; Abel................ &gt;
&lt; Ande................ &gt;
&lt; Atkinson............ &gt;
&lt; Austin.............. &gt;
&lt; Baer................ &gt;
5 rows found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1098318"></a>
<div id="TTSQL239" class="refsect1">
<h2 class="refsect1">RTRIM<a id="sthref712"></a><a id="sthref713"></a><a id="sthref714"></a></h2>
<p>The <code dir="ltr">RTRIM</code> function removes from the right end of <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> all of the characters contained in <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code>. TimesTen scans <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> backward from its last character and removes all characters that appear in <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code> until reaching a character not in <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code> and then returns the result.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref715"></a>SQL syntax</p>
<pre dir="ltr">RTRIM (<span class="codeinlineitalic">Expression1</span> [,<span class="codeinlineitalic">Expression2</span>])
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref716"></a>Parameters</p>
<p><code dir="ltr">RTRIM</code> has the parameters:</p>
</div>
<!-- class="refsubsect" -->
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t57">Parameter</th>
<th class="cellalignment6331" id="r1c2-t57">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t57" headers="r1c1-t57"><code dir="ltr"><span class="codeinlineitalic">Expression1</span></code></td>
<td class="cellalignment6332" headers="r2c1-t57 r1c2-t57">The <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NCHAR</code>, <code dir="ltr">NVARCHAR2</code>, <code dir="ltr">CLOB</code> or <code dir="ltr">NCLOB</code> operand or column to be trimmed. If <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is a character literal, then enclose it in quotes.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t57" headers="r1c1-t57"><code dir="ltr"><span class="codeinlineitalic">Expression2</span></code></td>
<td class="cellalignment6332" headers="r3c1-t57 r1c2-t57">Optional expression used for trimming <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code>. If <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code> is a character literal, enclose it in single quotes. If you do not specify <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code>, it defaults to a single blank. Operand or column can be of type <code dir="ltr">CHAR</code>,<code dir="ltr">VARCHAR2</code>, <code dir="ltr">NCHAR</code>, <code dir="ltr">NVARCHAR2</code>, <code dir="ltr">CLOB</code> or <code dir="ltr">NCLOB</code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref717"></a>Description</p>
<ul>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is of type <code dir="ltr">CHAR</code> or <code dir="ltr">VARCHAR2</code>, the data type returned is <code dir="ltr">VARCHAR2</code>. If <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is of type <code dir="ltr">NCHAR</code> or <code dir="ltr">NVARCHAR2</code>, the data type returned is <code dir="ltr">NVARCHAR2</code>. If <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is a <code dir="ltr">CLOB</code> or <code dir="ltr">NCLOB</code>, the data type returned is the same as the LOB data type provided. The returned data type length is equal to the data type length of <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code>.</p>
</li>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is a data type defined with <code dir="ltr">CHAR</code> length semantics, the returned length is expressed in <code dir="ltr">CHAR</code> length semantics.</p>
</li>
<li>
<p>If either <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> or <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code> is <code dir="ltr">NULL</code>, the result is <code dir="ltr">NULL</code>.</p>
</li>
<li>
<p>You can specify <code dir="ltr">TT_CHAR</code>, <code dir="ltr">TT_VARCHAR</code>, <code dir="ltr">TT_NCHAR</code>, and <code dir="ltr">TT_NVARCHAR</code> for <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> and <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code>. If <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is of type <code dir="ltr">TT_CHAR</code> or <code dir="ltr">TT_VARCHAR</code>, the data type returned is <code dir="ltr">TT_VARCHAR</code>. If <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is of type <code dir="ltr">TT_NCHAR</code> or <code dir="ltr">TT_NVARCHAR</code>, the data type returned is <code dir="ltr">TT_NVARCHAR</code>.</p>
</li>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is of type <code dir="ltr">CHAR</code> or <code dir="ltr">VARCHAR2</code> and <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code> is of type <code dir="ltr">NCHAR</code> or <code dir="ltr">NVARCHAR2</code>, then <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code> is demoted to <code dir="ltr">CHAR</code> or <code dir="ltr">VARCHAR2</code> before <code dir="ltr">RTRIM</code> is invoked. The conversion of <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code> could be lost. If the trim character of <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code> is not in the database character set, then the query may produce unexpected results.</p>
</li>
<li>
<p>For <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NCHAR</code>, <code dir="ltr">NVARCHAR2</code>, <code dir="ltr">CLOB</code> and <code dir="ltr">NCLOB</code> types:</p>
<ul>
<li>
<p>If all the characters in <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> are removed by the <code dir="ltr">RTRIM</code> function, the result is <code dir="ltr">NULL</code>.</p>
</li>
</ul>
</li>
<li>
<p>For <code dir="ltr">TT_CHAR</code>, <code dir="ltr">TT_VARCHAR</code>, <code dir="ltr">TT_NCHAR</code> and <code dir="ltr">TT_NVARCHAR</code> types:</p>
<ul>
<li>
<p>If all the characters in <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> are removed by the <code dir="ltr">RTRIM</code> function, the result is the empty string.</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref718"></a>Examples</p>
<p>The following example trims the trailing spaces from <code dir="ltr">col1</code> in table <code dir="ltr">rtrimtest</code>.</p>
<pre dir="ltr">Command&gt; CREATE TABLE rtrimtest (col1 VARCHAR2 (25));
Command&gt; INSERT INTO rtrimtest VALUES (&#39;abc     &#39;);
1 row inserted.
Command&gt; SELECT * FROM rtrimtest;
&lt; abc      &gt;
1 row found.
Command&gt; SELECT RTRIM (col1) FROM rtrimtest;
&lt; abc &gt;
1 row found.
</pre>
<p>Call the <code dir="ltr">RTRIM</code> function to remove right-most <code dir="ltr">&#39;x&#39;</code> and <code dir="ltr">&#39;y&#39;</code> from string. <code dir="ltr">RTRIM</code> removes individual occurrences of <code dir="ltr">&#39;x&#39;</code> and <code dir="ltr">&#39;y&#39;</code>, not pattern <code dir="ltr">&#39;xy&#39;</code>.</p>
<pre dir="ltr">Command&gt; SELECT RTRIM (&#39;RTRIM Examplexxxyyyxyxy&#39;, &#39;xy&#39;) FROM dual;
&lt; RTRIM Example &gt;
1 row found.
</pre>
<p>Call <code dir="ltr">RTRIM</code> to remove all characters from <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code>. In the first example, the data type is <code dir="ltr">CHAR</code>, so <code dir="ltr">NULL</code> is returned. In the second example, the data type is <code dir="ltr">TT_CHAR</code>, so the empty string is returned.</p>
<pre dir="ltr">Command&gt; CREATE TABLE rtrimtest (col1 CHAR (4), col2 TT_CHAR (4));
Command&gt; INSERT INTO rtrimtest VALUES (&#39;BBBA&#39;, &#39;BBBA&#39;);
1 row inserted.
Command&gt; SELECT RTRIM (col1, &#39;AB&#39;) FROM rtrimtest;
&lt; &lt;NULL&gt; &gt;
1 row found.
Command&gt; SELECT RTRIM (col2, &#39;AB&#39;) FROM rtrimtest;
&lt;  &gt;
1 row found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1120511"></a>
<div id="TTSQL260" class="refsect1">
<h2 class="refsect1">SESSION_USER<a id="sthref719"></a><a id="sthref720"></a><a id="sthref721"></a></h2>
<p>Returns the name of the TimesTen user currently connected to the database.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref722"></a>SQL syntax</p>
<pre dir="ltr">SESSION_USER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref723"></a>Parameters</p>
<p><code dir="ltr">SESSION_USER</code> has no parameters.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref724"></a>Examples</p>
<p>To return the name of the session user:</p>
<pre dir="ltr">SELECT SESSION_USER FROM dual;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CIHIHHCG"></a>
<div id="TTSQL240" class="refsect1">
<h2 class="refsect1"><a id="sthref725"></a><a id="sthref726"></a>SIGN</h2>
<p>The <code dir="ltr">SIGN</code> function returns the sign of <code dir="ltr"><span class="codeinlineitalic">Expression</span></code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref727"></a>SQL syntax</p>
<pre dir="ltr">SIGN (<span class="codeinlineitalic">Expression</span>)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref728"></a>Parameters</p>
<p><code dir="ltr">SIGN</code> has the parameter:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t58">Parameter</th>
<th class="cellalignment6331" id="r1c2-t58">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t58" headers="r1c1-t58"><code dir="ltr"><span class="codeinlineitalic">Expression</span></code></td>
<td class="cellalignment6332" headers="r2c1-t58 r1c2-t58">Operand or column can be any numeric data type.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref729"></a>Description</p>
<ul>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is of type <code dir="ltr">NUMBER</code> or <code dir="ltr">TT_DECIMAL</code>, the data type returned is <code dir="ltr">NUMBER</code> with maximum precision and scale. Otherwise, the data type returned is <code dir="ltr">TT_INTEGER</code>.</p>
<p>For numeric types that are not binary floating-point numbers, the sign is:</p>
<ul>
<li>
<p>-1 if the value of <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is <code dir="ltr">&lt;0</code></p>
</li>
<li>
<p>0 if the value of <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is <code dir="ltr">= 0</code></p>
</li>
<li>
<p>1 if the value of <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is <code dir="ltr">&gt; 0</code></p>
</li>
</ul>
</li>
<li>
<p>For binary floating-point numbers (<code dir="ltr">BINARY_FLOAT</code> and <code dir="ltr">BINARY_DOUBLE</code>), this function returns the sign bit of the number. The sign bit is:</p>
<ul>
<li>
<p>-1 if the value of <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is <code dir="ltr">&lt;0</code></p>
</li>
<li>
<p><code dir="ltr">+1</code> if the value of <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is <code dir="ltr">&gt;= 0</code> or the value of <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is equal to <code dir="ltr">NaN</code></p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref730"></a>Examples</p>
<p>These examples illustrate use of the <code dir="ltr">SIGN</code> function with different data types. Table <code dir="ltr">signex</code> has been created and the columns have been defined with different data types. First, describe the table <code dir="ltr">signex</code> to see the data types of the columns. Then select each column to retrieve values for that column. Use the <code dir="ltr">SIGN</code> function to return the sign for the column.</p>
<pre dir="ltr">Command&gt; DESCRIBE signex;

Table SAMPLEUSER.SIGNEX:
  Columns:
    COL1                            TT_INTEGER
    COL2                            TT_BIGINT
    COL3                            BINARY_FLOAT
    COL4                            NUMBER (3,2)

1 table found.
(primary key columns are indicated with *)
Command&gt; SELECT col1 FROM signex;
&lt; 10 &gt;
&lt; -10 &gt;
&lt; 0 &gt;
3 rows found.
Command&gt; SELECT SIGN (col1) FROM signex;
&lt; 1 &gt;
&lt; -1 &gt;
&lt; 0 &gt;
3 rows found.
Command&gt; SELECT col2 FROM signex;
&lt; 0 &gt;
&lt; -3 &gt;
&lt; 0 &gt;
3 rows found.
Command&gt; SELECT SIGN (col2) FROM signex;
&lt; 0 &gt;
&lt; -1 &gt;
&lt; 0 &gt;
3 rows found.
Command&gt; SELECT col3 FROM signex;
&lt; 3.500000 &gt;
&lt; -3.560000 &gt;
&lt; NAN &gt;
3 rows found.
Command&gt; SELECT SIGN (col3) FROM signex;
&lt; 1 &gt;
&lt; -1 &gt;
&lt; 1 &gt;
3 rows found.
Command&gt; SELECT col4 FROM signex;
&lt; 2.2 &gt;
&lt; -2.2 &gt;
&lt; 0 &gt;
3 rows found.
Command&gt; SELECT SIGN (col4) FROM signex;
&lt; 1 &gt;
&lt; -1 &gt;
&lt; 0 &gt;
3 rows found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACBFDJD"></a>
<div id="TTSQL497" class="refsect1">
<h2 class="refsect1">SOUNDEX<a id="sthref731"></a><a id="sthref732"></a><a id="sthref733"></a></h2>
<p>The <code dir="ltr">SOUNDEX</code> function determines a phonetic signature for a string and allows comparisons of strings based on phonetic similarity. <code dir="ltr">SOUNDEX</code> lets you compare words that are spelled differently, but sound alike in English.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref734"></a>SQL syntax</p>
<pre dir="ltr">SOUNDEX (<span class="codeinlineitalic">InputString</span>)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref735"></a>Parameters</p>
<p><code dir="ltr">SOUNDEX</code> has the parameters:</p>
</div>
<!-- class="refsubsect" -->
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t59">Parameter</th>
<th class="cellalignment6331" id="r1c2-t59">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t59" headers="r1c1-t59"><code dir="ltr"><span class="codeinlineitalic">InputString</span></code></td>
<td class="cellalignment6332" headers="r2c1-t59 r1c2-t59">Valid types are <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NCHAR</code> and <code dir="ltr">NVARCHAR2</code> with both ORA and TT variants and <code dir="ltr">CLOB</code> and <code dir="ltr">NCLOB</code>. If the data type is <code dir="ltr">CLOB</code> or <code dir="ltr">NCLOB</code>, TimesTen performs implicit conversion before returning the result.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref736"></a>Description</p>
<ul>
<li>
<p>Converts an alpha-numeric string into a 4 character code, beginning with the first letter encountered in the string, followed by three numbers.</p>
</li>
<li>
<p>The phonetic representation is defined in <span class="italic">The Art of Computer Programming</span>, Volume 3: Sorting and Searching, by Donald E. Knuth, as follows:</p>
<ol>
<li>
<p>Retain the first letter of the string and drop all other occurrences of the following letters: A, E, I, O, U. The treatment of the letters is case insensitive.</p>
</li>
<li>
<p>Drop all occurrences of H, W, and Y.</p>
</li>
<li>
<p>Assign numbers to the remaining letters (after the first) as follows:</p>
<pre dir="ltr">B, F, P, V = 1
C, G, J, K, Q, S, X, Z = 2
D, T = 3
L = 4
M, N = 5
R = 6
</pre></li>
<li>
<p>If two or more letters with the same number were adjacent in the original name (before step 1), omit all but the first.</p>
</li>
<li>
<p>Return the first four characters of the result (padded with &#39;0&#39; if the result has less than four characters).</p>
</li>
</ol>
</li>
<li>
<p>The function returns <code dir="ltr">NULL</code> if no <code dir="ltr">soundex</code> code could be generated for the <code dir="ltr"><span class="codeinlineitalic">InputString</span></code>. For example, <code dir="ltr">NULL</code> is returned when the <code dir="ltr"><span class="codeinlineitalic">InputString</span></code> contains no English letters.</p>
</li>
<li>
<p>The input to output type mapping is:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Input to Output Type Mapping" summary="Table of input and output values for the function SOUNDEX" dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t60">Input Type</th>
<th class="cellalignment6331" id="r1c2-t60">Output Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t60" headers="r1c1-t60"><code dir="ltr">VARCHAR2</code>(<code dir="ltr"><span class="codeinlineitalic">x</span></code>), <code dir="ltr">CHAR</code>, <code dir="ltr">CLOB</code></td>
<td class="cellalignment6332" headers="r2c1-t60 r1c2-t60"><code dir="ltr">VARCHAR2(4)</code></td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t60" headers="r1c1-t60"><code dir="ltr">TT_CHAR</code>(<code dir="ltr"><span class="codeinlineitalic">x</span></code>), <code dir="ltr">TT_VARCHAR</code>(<code dir="ltr"><span class="codeinlineitalic">x</span></code>)</td>
<td class="cellalignment6332" headers="r3c1-t60 r1c2-t60"><code dir="ltr">TT_VARCHAR(4)</code></td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t60" headers="r1c1-t60"><code dir="ltr">NVARCHAR2</code>(<code dir="ltr"><span class="codeinlineitalic">x</span></code>), <code dir="ltr">NCHAR</code>(<code dir="ltr"><span class="codeinlineitalic">x</span></code>), <code dir="ltr">NCLOB</code></td>
<td class="cellalignment6332" headers="r4c1-t60 r1c2-t60"><code dir="ltr">NVARCHAR2(4)</code></td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t60" headers="r1c1-t60"><code dir="ltr">TT_NCHAR</code>(<code dir="ltr"><span class="codeinlineitalic">x</span></code>), <code dir="ltr">TT_NVARCHAR</code>(<code dir="ltr"><span class="codeinlineitalic">x</span></code>)</td>
<td class="cellalignment6332" headers="r5c1-t60 r1c2-t60"><code dir="ltr">TT_NVARCHAR(4)</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref737"></a>Examples</p>
<p>Use <code dir="ltr">SOUNDEX</code> function to return the phonetic signature for employees with last name equal to &#39;Taylor&#39;.</p>
<pre dir="ltr">Command&gt; SELECT last_name, first_name, SOUNDEX (last_name)
       &gt; FROM employees where last_name = &#39;Taylor&#39;;
&lt; Taylor, Jonathon, T460 &gt;
&lt; Taylor, Winston, T460 &gt;
2 rows found.
</pre>
<p>Invoke the function again to return the phonetic signature for the string &#39;Tailor&#39;. Invoke the function a third time to return the last name and first name of each employee whose last name is phonetically similar to the string &#39;Tailor&#39;.</p>
<pre dir="ltr">Command&gt; SELECT SOUNDEX (&#39;Tailor&#39;) FROM dual;
&lt; T460 &gt;
1 row found.

Command&gt; SELECT last_name, first_name FROM employees WHERE SOUNDEX (last_name) = 
       &gt; SOUNDEX (&#39;Tailor&#39;);
&lt; Taylor, Jonathon &gt;
&lt; Taylor, Winston &gt;
2 rows found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CIHFBGJJ"></a>
<div id="TTSQL241" class="refsect1">
<h2 class="refsect1"><a id="sthref738"></a><a id="sthref739"></a>SQRT</h2>
<p>The <code dir="ltr">SQRT</code> function returns the square root of <code dir="ltr"><span class="codeinlineitalic">Expression</span></code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref740"></a>SQL syntax</p>
<pre dir="ltr">SQRT(<span class="codeinlineitalic">Expression</span>)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref741"></a>Parameters</p>
<p><code dir="ltr">SQRT</code> has the parameter:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t61">Parameter</th>
<th class="cellalignment6331" id="r1c2-t61">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t61" headers="r1c1-t61"><code dir="ltr"><span class="codeinlineitalic">Expression</span></code></td>
<td class="cellalignment6332" headers="r2c1-t61 r1c2-t61">Operand or column can be any numeric data type.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref742"></a>Description</p>
<ul>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is of type <code dir="ltr">NUMBER</code> or <code dir="ltr">TT_DECIMAL</code>, the data type returned is <code dir="ltr">NUMBER</code> with maximum precision and scale. If <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is of type <code dir="ltr">BINARY_FLOAT</code>, the data type returned is <code dir="ltr">BINARY_FLOAT</code>. Otherwise, the data type returned is <code dir="ltr">BINARY_DOUBLE</code>.</p>
</li>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is of type <code dir="ltr">NUMBER</code> or <code dir="ltr">TT_DECIMAL</code>, the value of <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> cannot be negative.</p>
</li>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> resolves to a binary floating-point number (<code dir="ltr">BINARY_FLOAT</code> or <code dir="ltr">BINARY_DOUBLE</code>):</p>
<ul>
<li>
<p>If the value of the <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is <code dir="ltr">&gt; = 0</code>, the result is positive.</p>
</li>
<li>
<p>If the value of the <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is <code dir="ltr">= -0</code>, the result is <code dir="ltr">-0</code>.</p>
</li>
<li>
<p>If the value of the <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is <code dir="ltr">&lt; 0</code>, the result is <code dir="ltr">NaN</code>.</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref743"></a>Examples</p>
<p>Use <code dir="ltr">SQRT</code> function to return the square root of the absolute value of <code dir="ltr">-10</code>. Then cast the value as <code dir="ltr">BINARY_FLOAT</code>.</p>
<pre dir="ltr">Command&gt; SELECT CAST (SQRT (ABS (-10)) AS BINARY_FLOAT ) FROM dual;
&lt; 3.162278 &gt;
1 row found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1120276"></a>
<div id="TTSQL243" class="refsect1">
<h2 class="refsect1">SUBSTR, SUBSTRB, SUBSTR4<a id="sthref744"></a><a id="sthref745"></a><a id="sthref746"></a><a id="sthref747"></a><a id="sthref748"></a></h2>
<p>Returns a string that represents a substring of a source string. The returned substring is of a specified number of characters, beginning from a designated starting point, relative to either the beginning or end of the string.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref749"></a>SQL syntax</p>
<pre dir="ltr">{SUBSTR | SUBSTRB | SUBSTR4}=(<span class="codeinlineitalic">Source</span>, <span class="codeinlineitalic">m</span>, <span class="codeinlineitalic">n</span>)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref750"></a>Parameters</p>
<p><code dir="ltr">SUBSTR</code> has the parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t62">Parameter</th>
<th class="cellalignment6331" id="r1c2-t62">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t62" headers="r1c1-t62"><code dir="ltr"><span class="codeinlineitalic">Source</span></code></td>
<td class="cellalignment6332" headers="r2c1-t62 r1c2-t62">The string for which this function returns a substring. Value can be any supported character data types including <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NCHAR</code>, <code dir="ltr">NVARCHAR2</code>, <code dir="ltr">CLOB</code>, or <code dir="ltr">NCLOB</code> data types. Both TimesTen and Oracle Database data types are supported.
<p>If <code dir="ltr"><span class="codeinlineitalic">Source</span></code> is a <code dir="ltr">CHAR</code> string, the result is a <code dir="ltr">CHAR</code> or <code dir="ltr">VARCHAR2</code> string. If <code dir="ltr"><span class="codeinlineitalic">Source</span></code> is a <code dir="ltr">NCHAR</code> string, the result is a <code dir="ltr">NVARCHAR2</code> string. If <code dir="ltr"><span class="codeinlineitalic">Source</span></code> is a LOB, the result is the same LOB data type.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t62" headers="r1c1-t62"><code dir="ltr"><span class="codeinlineitalic">m</span></code></td>
<td class="cellalignment6332" headers="r3c1-t62 r1c2-t62">The position at which to begin the substring. If <code dir="ltr"><span class="codeinlineitalic">m</span></code> is positive, the first character of the returned string is <code dir="ltr"><span class="codeinlineitalic">m</span></code> characters from the beginning of the string specified in <code dir="ltr"><span class="codeinlineitalic">char</span></code>. Otherwise it is <code dir="ltr"><span class="codeinlineitalic">m</span></code> characters from the end of the string. If <code dir="ltr">ABS</code>(<code dir="ltr"><span class="codeinlineitalic">m</span></code>) is bigger than the length of the character string, a null value is returned.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t62" headers="r1c1-t62"><code dir="ltr"><span class="codeinlineitalic">n</span></code></td>
<td class="cellalignment6332" headers="r4c1-t62 r1c2-t62">The number of characters to be included in the substring. If <code dir="ltr"><span class="codeinlineitalic">n</span></code> is omitted, all characters to the end of the string specified in <code dir="ltr"><span class="codeinlineitalic">char</span></code> are returned. If <code dir="ltr"><span class="codeinlineitalic">n</span></code> is less than 1 or if <code dir="ltr"><span class="codeinlineitalic">char</span></code>, <code dir="ltr"><span class="codeinlineitalic">m</span></code> or <code dir="ltr"><span class="codeinlineitalic">n</span></code> is <code dir="ltr">NULL</code>, <code dir="ltr">NULL</code> is returned.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref751"></a>Description</p>
<p><code dir="ltr">SUBSTR</code> calculates lengths using characters as defined by character set. <code dir="ltr">SUBSTRB</code> uses bytes instead of characters. <code dir="ltr">SUBSTR4</code> uses UCS4 code points.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref752"></a>Examples</p>
<p>In the first five rows of <code dir="ltr">employees</code>, select the first three characters of <code dir="ltr">last_name</code>:</p>
<pre dir="ltr">SELECT FIRST 5 SUBSTR(last_name,1,3) FROM employees;
&lt; Kin &gt;
&lt; Koc &gt;
&lt; De  &gt;
&lt; Hun &gt;
&lt; Ern &gt;
5 rows found.
</pre>
<p>In the first five rows of <code dir="ltr">employees</code>, select the last five characters of <code dir="ltr">last_name</code>:</p>
<pre dir="ltr">SELECT FIRST 5 SUBSTR(last_name,-5,5) FROM employees;
&lt; &lt;NULL&gt; &gt;
&lt; chhar &gt;
&lt;  Haan &gt;
&lt; unold &gt;
&lt; Ernst &gt;
5 rows found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACBIJHC"></a>
<div id="TTSQL457" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref753"></a><a id="sthref754"></a>SUM</h2>
<p>Finds the total of all values in the argument. Null values are ignored. <code dir="ltr">SUM</code> is an aggregate function. <code dir="ltr">SUM</code> can also be an aggregate analytic function. For more details on aggregate functions, see <a href="#i988417">&#34;Aggregate functions&#34;</a>. For more information on analytic functions, see <a href="#CACCGJBB">&#34;Analytic functions&#34;</a>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref755"></a>SQL syntax</p>
<pre dir="ltr">SUM ([ALL | DISTINCT] <span class="codeinlineitalic">Expression</span>) [OVER ([<span class="italic">AnalyticClause</span>])]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref756"></a>Parameters</p>
<p><code dir="ltr">SUM</code> has the parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table describes the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t63">Parameter</th>
<th class="cellalignment6331" id="r1c2-t63">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t63" headers="r1c1-t63"><code dir="ltr"><span class="codeinlineitalic">Expression</span></code></td>
<td class="cellalignment6332" headers="r2c1-t63 r1c2-t63">Can be any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t63" headers="r1c1-t63"><a id="sthref757"></a><a id="sthref758"></a><code dir="ltr">ALL</code></td>
<td class="cellalignment6332" headers="r3c1-t63 r1c2-t63">Includes any duplicate rows in the argument of an aggregate function. If neither <code dir="ltr">ALL</code> nor <code dir="ltr">DISTINCT</code> is specified, <code dir="ltr">ALL</code> is assumed.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t63" headers="r1c1-t63"><a id="sthref759"></a><a id="sthref760"></a><code dir="ltr">DISTINCT</code></td>
<td class="cellalignment6332" headers="r4c1-t63 r1c2-t63">Eliminates duplicate column values from the argument of an aggregate function.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t63" headers="r1c1-t63"><code dir="ltr">OVER ([</code><code dir="ltr"><span class="codeinlineitalic">AnalyticClause</span></code><code dir="ltr">])</code></td>
<td class="cellalignment6332" headers="r5c1-t63 r1c2-t63">If specified, indicates aggregate analytic function. For more information on analytic functions, see <a href="#CACCGJBB">&#34;Analytic functions&#34;</a>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref761"></a>Description</p>
<ul>
<li>
<p>If the <code dir="ltr">SUM</code> function is computed over an empty table in which <code dir="ltr">GROUP BY</code> is not used, <code dir="ltr">SUM</code> returns <code dir="ltr">NULL</code>.</p>
</li>
<li>
<p>If the <code dir="ltr">SUM</code> function is computed over an empty group or an empty grouped table (<code dir="ltr">GROUP BY</code> is used), <code dir="ltr">SUM</code> returns nothing.</p>
</li>
<li>
<p>If the source is <code dir="ltr">TT_TINYINT</code>, <code dir="ltr">TT_SMALLINT</code>, or <code dir="ltr">TT_INTEGER</code>, the result data type is <code dir="ltr">TT_INTEGER</code>.</p>
</li>
<li>
<p>If the source is <code dir="ltr">NUMBER</code>, then the result data type is <code dir="ltr">NUMBER</code> with undefined scale and precision.</p>
</li>
<li>
<p>If the source is <code dir="ltr">TT_DECIMAL</code>, then the result data type is <code dir="ltr">TT_DECIMAL</code> with maximum precision.</p>
</li>
<li>
<p>For all other data types, the result data type is the same as the source.</p>
</li>
<li>
<p>If you do not use the <code dir="ltr"><span class="codeinlineitalic">AnalyticClause</span></code> in your query, then <code dir="ltr">SUM</code> acts as an aggregate function.</p>
</li>
<li>
<p>If you specify <code dir="ltr">DISTINCT</code> and the <code dir="ltr"><span class="codeinlineitalic">AnalyticClause</span></code>, then you can only specify the <code dir="ltr"><span class="codeinlineitalic">QueryPartitionClause</span></code>. The <code dir="ltr"><span class="codeinlineitalic">OrderByClause</span></code> and <code dir="ltr"><span class="codeinlineitalic">WindowingClause</span></code> are not allowed.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref762"></a>Examples</p>
<p>Sum all employee salaries:</p>
<pre dir="ltr">Command&gt; SELECT SUM(salary) Total FROM employees;
 
TOTAL
&lt; 691400 &gt;
1 row found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CIHEJJCG"></a>
<div id="TTSQL246" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref763"></a><a id="sthref764"></a><a id="sthref765"></a>SYS_CONTEXT</h2>
<p>Returns information about the current session.</p>
<p>The data type of the return value is <code dir="ltr">VARCHAR2</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref766"></a>SQL syntax</p>
<pre dir="ltr">SYS_CONTEXT(&#39;<span class="italic">namespace</span>&#39;, &#39;<span class="italic">parameter</span>&#39; [, <span class="italic">length</span> ])
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref767"></a>Parameters</p>
<p><code dir="ltr">SYS_CONTEXT</code> has the parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t64">Parameter</th>
<th class="cellalignment6331" id="r1c2-t64">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t64" headers="r1c1-t64"><code dir="ltr"><span class="codeinlineitalic">namespace</span></code></td>
<td class="cellalignment6332" headers="r2c1-t64 r1c2-t64">Value: <code dir="ltr">USERENV</code>
<p>Other values result in a return of <code dir="ltr">NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t64" headers="r1c1-t64"><code dir="ltr"><span class="codeinlineitalic">parameter</span></code></td>
<td class="cellalignment6332" headers="r3c1-t64 r1c2-t64">Supported values:
<ul>
<li>
<p><code dir="ltr">AUTHENTICATION_METHOD</code></p>
</li>
<li>
<p><code dir="ltr">CURRENT_USER</code></p>
</li>
<li>
<p><code dir="ltr">CURRENT_USERID</code></p>
</li>
<li>
<p><code dir="ltr">IDENTIFICATION_TYPE</code></p>
</li>
<li>
<p><code dir="ltr">LANG</code></p>
</li>
<li>
<p><code dir="ltr">LANGUAGE</code></p>
</li>
<li>
<p><code dir="ltr">NLS_SORT</code></p>
</li>
<li>
<p><code dir="ltr">SESSION_USER</code></p>
</li>
<li>
<p><code dir="ltr">SESSION_USERID</code></p>
</li>
<li>
<p><code dir="ltr">SID</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t64" headers="r1c1-t64"><code dir="ltr"><span class="codeinlineitalic">length</span></code></td>
<td class="cellalignment6332" headers="r4c1-t64 r1c2-t64">Length in bytes, from 1 to 4000.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" -->
<p>These are descriptions of the supported values for <code dir="ltr"><span class="codeinlineitalic">parameter</span></code>:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t65">Parameter</th>
<th class="cellalignment6331" id="r1c2-t65">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t65" headers="r1c1-t65"><code dir="ltr">AUTHENTICATION_METHOD</code></td>
<td class="cellalignment6332" headers="r2c1-t65 r1c2-t65">Returns the method of authentication for these types of users:
<ul>
<li>
<p>Local database user authenticated by password</p>
</li>
<li>
<p>External user authenticated by the operating system</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t65" headers="r1c1-t65"><code dir="ltr">CURRENT_USER</code></td>
<td class="cellalignment6332" headers="r3c1-t65 r1c2-t65">The name of the database user whose privileges are currently active. This may change during the duration of a session to reflect the owner of any active definer&#39;s rights object. When no definer&#39;s rights object is active, <code dir="ltr">CURRENT_USER</code> returns the same value as <code dir="ltr">SESSION_USER</code>. When used directly in the body of a view definition, this returns the user that is executing the cursor that is using the view. It does not respect views used in the cursor as being definer&#39;s rights.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t65" headers="r1c1-t65"><code dir="ltr">CURRENT_USERID</code></td>
<td class="cellalignment6332" headers="r4c1-t65 r1c2-t65">The identifier of the database user whose privileges are currently active.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t65" headers="r1c1-t65"><code dir="ltr">IDENTIFICATION_TYPE</code></td>
<td class="cellalignment6332" headers="r5c1-t65 r1c2-t65">Returns the way the user was created in the database. Specifically, it reflects the <code dir="ltr">IDENTIFIED</code> clause in the <code dir="ltr">CREATE</code>/<code dir="ltr">ALTER</code> <code dir="ltr">USER</code> syntax. In the list that follows, the syntax used during user creation is followed by the identification type returned:
<ul>
<li>
<p><code dir="ltr">IDENTIFIED BY</code> <code dir="ltr"><span class="codeinlineitalic">password</span></code>: <code dir="ltr">LOCAL</code></p>
</li>
<li>
<p><code dir="ltr">IDENTIFIED EXTERNALLY: EXTERNAL</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t65" headers="r1c1-t65"><code dir="ltr">LANG</code></td>
<td class="cellalignment6332" headers="r6c1-t65 r1c2-t65">The ISO abbreviation for the language name, a shorter form than the existing <code dir="ltr">&#39;LANGUAGE&#39;</code> parameter.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r7c1-t65" headers="r1c1-t65"><code dir="ltr">LANGUAGE</code></td>
<td class="cellalignment6332" headers="r7c1-t65 r1c2-t65">The language and territory currently used by the session, along with the database character set, in this form:
<p><code dir="ltr"><span class="codeinlineitalic">language_territory.characterset</span></code></p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r8c1-t65" headers="r1c1-t65"><code dir="ltr">NLS_SORT</code></td>
<td class="cellalignment6332" headers="r8c1-t65 r1c2-t65">Binary or linguistic sort.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r9c1-t65" headers="r1c1-t65"><code dir="ltr">SESSION_USER</code></td>
<td class="cellalignment6332" headers="r9c1-t65 r1c2-t65">The name of the database user at logon. This value remains the same throughout the duration of the session.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r10c1-t65" headers="r1c1-t65"><code dir="ltr">SESSION_USERID</code></td>
<td class="cellalignment6332" headers="r10c1-t65 r1c2-t65">The identifier of the database user at logon.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r11c1-t65" headers="r1c1-t65"><code dir="ltr">SID</code></td>
<td class="cellalignment6332" headers="r11c1-t65 r1c2-t65">The connection ID of the current connection.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref768"></a>Description</p>
<p>The data type of the return value is <code dir="ltr">VARCHAR2</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref769"></a>Examples</p>
<pre dir="ltr">SELECT SYS_CONTEXT(&#39;USERENV&#39;, &#39;CURRENT_USER&#39;) FROM dual;
&lt; TTUSER &gt;
1 row found.

SELECT SYS_CONTEXT(&#39;USERENV&#39;, &#39;LANGUAGE&#39;) FROM dual;
&lt; AMERICAN_AMERICA.AL32UTF8 &gt;
1 row found.

SELECT SYS_CONTEXT(&#39;USERENV&#39;, &#39;IDENTIFICATION_TYPE&#39;) FROM dual;
&lt; EXTERNAL &gt;
1 row found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1001775"></a>
<div id="TTSQL247" class="refsect1">
<h2 class="refsect1">SYSDATE and GETDATE<a id="sthref770"></a><a id="sthref771"></a><a id="sthref772"></a><a id="sthref773"></a><a id="sthref774"></a><a id="sthref775"></a></h2>
<p>Returns the date in the format <code dir="ltr">YYYY-MM-DD HH:MI:SS</code>. The date represents the local current date and time, which is determined by the system on which the statement is executed.</p>
<p>If you are using TimesTen type mode, for information on <code dir="ltr">SYSDATE</code>, see the Oracle TimesTen In-Memory Database Release 6.0.3 documentation.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref776"></a>SQL syntax</p>
<pre dir="ltr">SYSDATE | GETDATE( )
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref777"></a>Parameters</p>
<p>The <code dir="ltr">SYSDATE</code> and <code dir="ltr">GETDATE</code> functions have no parameters.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref778"></a>Description</p>
<ul>
<li>
<p><code dir="ltr">SYSDATE</code> and <code dir="ltr">GETDATE</code> perform identically. <code dir="ltr">SYSDATE</code> is compatible with Oracle Database syntax. <code dir="ltr">GETDATE</code> is compatible with Microsoft SQL Server syntax.</p>
</li>
<li>
<p><code dir="ltr">SYSDATE</code> and <code dir="ltr">GETDATE</code> have no arguments, and return a <code dir="ltr">DATE</code> value.</p>
</li>
<li>
<p>The <code dir="ltr">SYSDATE</code> or <code dir="ltr">GETDATE</code> value is only retrieved during execution.</p>
</li>
<li>
<p>Any required changes to the date (to incorporate a different time zone or Daylight Savings Time, for example) must occur at the system level. The date cannot be altered using <code dir="ltr">SYSDATE</code> or <code dir="ltr">GETDATE</code>.</p>
</li>
<li>
<p>The <code dir="ltr">SYSDATE</code> and <code dir="ltr">GETDATE</code> functions return the <code dir="ltr">DATE</code> data type. The <code dir="ltr">DATE</code> format is <code dir="ltr">&#39;</code><code dir="ltr">YYYY-MM-DD HH:MI:SS</code><code dir="ltr">&#39;</code>.</p>
</li>
<li>
<p><code dir="ltr">SYSDATE</code> and <code dir="ltr">GETDATE</code> are built-in functions and can be used anywhere a date expression may be used. They can be used in a <code dir="ltr"><a href="state.htm#g1513908">INSERT...SELECT</a></code> projection list, a <code dir="ltr">WHERE</code> clause or to insert values. They cannot be used with a <code dir="ltr">SUM</code> or <code dir="ltr">AVG</code> aggregate (operands must be numeric) or with a <code dir="ltr">COUNT</code> aggregate (column names are expected).</p>
</li>
<li>
<p><code dir="ltr">SYSDATE</code> and <code dir="ltr">GETDATE</code> return the same <code dir="ltr">DATE</code> value in a single SQL statement context.</p>
</li>
<li>
<p>The literals <code dir="ltr">TT_SYSDATE</code> and <code dir="ltr">ORA_SYSDATE</code> are supported. <code dir="ltr">TT_SYSDATE</code> returns the <code dir="ltr">TT_TIMESTAMP</code> data type. <code dir="ltr">ORA_SYSDATE</code> returns the <code dir="ltr">DATE</code> data type.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref779"></a>Examples</p>
<p>In this example, invoking <code dir="ltr">SYSDATE</code> returns the same date and time for all rows in the table:</p>
<pre dir="ltr">Command&gt; SELECT SYSDATE FROM dual;
&lt; 2006-09-03 10:33:43 &gt;
1 row found. 
</pre>
<p>This example invokes <code dir="ltr">SYSDATE</code> to insert the current data and time into column <code dir="ltr">datecol</code>:</p>
<pre dir="ltr">Command&gt; CREATE TABLE t (datecol DATE);
Command&gt; INSERT INTO t VALUES (SYSDATE);
1 row inserted.
Command&gt; SELECT * FROM t;
&lt; 2006-09-03 10:35:50 &gt;
1 row found.
</pre>
<p>In this example, <code dir="ltr">GETDATE</code> inserts the same date value for each new row in the table, even if the query takes several seconds.</p>
<pre dir="ltr">INSERT INTO t1 SELECT GETDATE(), col1
   FROM t2 WHERE ...;
</pre>
<p><code dir="ltr">TO_CHAR</code> is used with <code dir="ltr">SYSDATE</code> to return the date from table <code dir="ltr">dual</code>:</p>
<pre dir="ltr">Command&gt; SELECT TO_CHAR (SYSDATE) FROM dual;
&lt; 2006-09-03 10:56:35 &gt;
1 row found.
</pre>
<p>This example invokes <code dir="ltr">TT_SYSDATE</code> to return the <code dir="ltr">TT_TIMESTAMP</code> data type and then invokes <code dir="ltr">ORA_SYSDATE</code> to return the <code dir="ltr">DATE</code> data type:</p>
<pre dir="ltr">Command&gt; SELECT tt_sysdate FROM dual;
&lt; 2006-10-31 20:02:19.440611 &gt;
1 row found.
Command&gt; SELECT ora_sysdate FROM dual;
&lt; 2006-10-31 20:02:30 &gt;
1 row found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1120532"></a>
<div id="TTSQL261" class="refsect1">
<h2 class="refsect1">SYSTEM_USER<a id="sthref780"></a><a id="sthref781"></a><a id="sthref782"></a></h2>
<p>Returns the name of the current database user as identified by the operating system.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref783"></a>SQL syntax</p>
<pre dir="ltr">SYSTEM_USER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref784"></a>Parameters</p>
<p><code dir="ltr">SYSTEM_USER</code> has no parameters.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref785"></a>Examples</p>
<p>To return the name of the operating system user:</p>
<pre dir="ltr">SELECT SYSTEM_USER FROM dual;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACEHCGA"></a>
<div id="TTSQL498" class="refsect1">
<h2 class="refsect1"><a id="sthref786"></a><a id="sthref787"></a><a id="sthref788"></a><a id="sthref789"></a>TIMESTAMPADD</h2>
<p>The <code dir="ltr">TIMESTAMPADD</code> function adds a specified number of intervals to a timestamp and returns the modified timestamp.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref790"></a>SQL syntax</p>
<pre dir="ltr">TIMESTAMPADD (<span class="italic">Interval</span>, <span class="italic">IntegerExpression</span>, <span class="italic">TimestampExpression</span>)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref791"></a>Parameters</p>
<p><code dir="ltr">TIMESTAMPADD</code> has the parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t66">Parameter</th>
<th class="cellalignment6331" id="r1c2-t66">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t66" headers="r1c1-t66"><code dir="ltr"><span class="codeinlineitalic">Interval</span></code></td>
<td class="cellalignment6332" headers="r2c1-t66 r1c2-t66">Specified interval. Must be expressed as literal. Valid values are listed in the description section.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t66" headers="r1c1-t66"><code dir="ltr"><span class="codeinlineitalic">IntegerExpression</span></code></td>
<td class="cellalignment6332" headers="r3c1-t66 r1c2-t66">Expression that evaluates to <code dir="ltr">TT_BIGINT</code>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t66" headers="r1c1-t66"><code dir="ltr"><span class="codeinlineitalic">TimestampExpression</span></code></td>
<td class="cellalignment6332" headers="r4c1-t66 r1c2-t66">Datetime expressions. Valid data types are <code dir="ltr">ORA_DATE</code>, <code dir="ltr">ORA_</code><code dir="ltr">TIMESTAMP</code>, <code dir="ltr">TT_DATE</code>, and <code dir="ltr">TT_TIMESTAMP</code>. (The alias <code dir="ltr">DATE</code> and <code dir="ltr">TIMESTAMP</code> data types are also valid). <code dir="ltr">TT_TIME</code> is not supported.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref792"></a>Description</p>
<ul>
<li>
<p>Valid values for <code dir="ltr"><span class="codeinlineitalic">Interval</span></code> are:</p>
<ul>
<li>
<p><code dir="ltr">SQL_TSI_FRAC_SECOND</code></p>
</li>
<li>
<p><code dir="ltr">SQL_TSI_SECOND</code></p>
</li>
<li>
<p><code dir="ltr">SQL_TSI_MINUTE</code></p>
</li>
<li>
<p><code dir="ltr">SQL_TSI_HOUR</code></p>
</li>
<li>
<p><code dir="ltr">SQL_TSI_DAY</code></p>
</li>
<li>
<p><code dir="ltr">SQL_TSI_WEEK</code></p>
</li>
<li>
<p><code dir="ltr">SQL_TSI_MONTH</code></p>
</li>
<li>
<p>S<code dir="ltr">QL_TSI_QUARTER</code></p>
</li>
<li>
<p><code dir="ltr">SQL_TSI_YEAR</code></p>
</li>
</ul>
</li>
<li>
<p><code dir="ltr">SQL_TSI_FRAC_SECOND</code> is expressed in billionths of a second.</p>
</li>
<li>
<p>The return type is the same as the original data type. For example, if your expression is of type <code dir="ltr">TIMESTAMP</code>, then the resulting data type is <code dir="ltr">TIMESTAMP</code>. Only positive timestamp expressions (0001-01-01) are allowed both in the query and the result. For <code dir="ltr">TT_DATE</code> and <code dir="ltr">TT_TIMESTAMP</code>, because the starting range for these data types is 1753-01-01, the timestamp expression must be equal to or greater than this date.</p>
</li>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">IntegerExpression</span></code> or <code dir="ltr"><span class="codeinlineitalic">TimestampExpression</span></code> is <code dir="ltr">NULL</code>, then the result is <code dir="ltr">NULL</code>.</p>
</li>
<li>
<p>The function computes the total time interval as a product of the <code dir="ltr"><span class="codeinlineitalic">IntegerExpression</span></code> and the interval and adds it to the specified <code dir="ltr"><span class="codeinlineitalic">TimestampExpression</span></code>. Adding a year advances the timestamp by 12 months and adding a week advances the timestamp by seven days. If the <code dir="ltr"><span class="codeinlineitalic">IntegerExpression</span></code> is negative, the specified interval is subtracted from the <code dir="ltr"><span class="codeinlineitalic">TimestampExpression</span></code>.</p>
</li>
<li>
<p>There is a possibility of precision loss depending on your use of the specified interval and timestamp expression. For example, if your interval is <code dir="ltr">SQL_TSI_</code><code dir="ltr">HOUR</code>, and you specify 2 for <code dir="ltr"><span class="codeinlineitalic">IntegerExpression</span></code> and <code dir="ltr">TT_DATE</code> for <code dir="ltr"><span class="codeinlineitalic">TimestampExpression</span></code>, TimesTen treats the two hours as zero days and returns the sum of the original date plus zero days resulting in some loss of precision. If however, your <code dir="ltr"><span class="codeinlineitalic">IntegerExpression</span></code> is 48, TimesTen treats the 48 hours as two days and returns the sum of the original date plus two days. In this case, there is no loss of precision.</p>
</li>
<li>
<p>If the addition of the timestamp results in an overflow of the specified component (such as more than 60 seconds, or more than 24 hours, or more than 12 months), then the overflow is carried over to the next component. For example, if the seconds component overflows, then the minutes component is advanced.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref793"></a>Examples</p>
<p>Use the <code dir="ltr">TIMESTAMPADD</code> function to add 3 months to timestamp &#39;2009-11-30 10:00:00&#39;. TimesTen increments the year and adjusts the day component to accommodate the 28 days in the month of February.</p>
<pre dir="ltr">Command&gt; SELECT TIMESTAMPADD (SQL_TSI_MONTH, 3, TIMESTAMP &#39;2010-11-30 10:00:00&#39;)
       &gt; FROM dual;
&lt; 2011-02-28 10:00:00 &gt;
1 row found.
</pre>
<p>Use the <code dir="ltr">TIMESTAMPADD</code> function to add 1 second to timestamp &#39;2010-12-31 23:59:59&#39;. TimesTen propagates the overflow through all components of the timestamp and advances the components appropriately.</p>
<pre dir="ltr">Command&gt; SELECT TIMESTAMPADD (SQL_TSI_SECOND, 1, TIMESTAMP &#39;2010-12-31 23:59:59&#39;)
       &gt; FROM dual;
&lt; 2011-01-01 00:00:00 &gt;
1 row found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACGFCFA"></a>
<div id="TTSQL505" class="refsect1">
<h2 class="refsect1">TIMESTAMPDIFF<a id="sthref794"></a><a id="sthref795"></a><a id="sthref796"></a><a id="sthref797"></a></h2>
<p>The <code dir="ltr">TIMESTAMPDIFF</code> function returns the total number of specified intervals between two timestamps.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref798"></a>SQL syntax</p>
<pre dir="ltr">TIMESTAMPDIFF (<span class="italic">Interval</span>, <span class="italic">TimestampExpression1</span>, <span class="italic">TimestampExpression2</span>)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref799"></a>Parameters</p>
<p><code dir="ltr">TIMESTAMPDIFF</code> has the parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t67">Parameter</th>
<th class="cellalignment6331" id="r1c2-t67">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t67" headers="r1c1-t67"><code dir="ltr"><span class="codeinlineitalic">Interval</span></code></td>
<td class="cellalignment6332" headers="r2c1-t67 r1c2-t67">Specified interval. Must be expressed as literal. Valid values are listed in the description section.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t67" headers="r1c1-t67"><code dir="ltr"><span class="codeinlineitalic">TimestampExpression</span></code>1</td>
<td class="cellalignment6332" headers="r3c1-t67 r1c2-t67">Datetime expressions. Valid data types are <code dir="ltr">ORA_DATE</code>, <code dir="ltr">ORA_</code><code dir="ltr">TIMESTAMP</code>, <code dir="ltr">TT_DATE</code>, and <code dir="ltr">TT_TIMESTAMP</code>. (The alias <code dir="ltr">DATE</code> and <code dir="ltr">TIMESTAMP</code> data types are also valid.) <code dir="ltr">TT_TIME</code> is not supported.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t67" headers="r1c1-t67"><code dir="ltr"><span class="codeinlineitalic">TimestampExpression</span></code>2</td>
<td class="cellalignment6332" headers="r4c1-t67 r1c2-t67">Datetime expressions. Valid data types are <code dir="ltr">ORA_DATE</code>, <code dir="ltr">ORA_</code><code dir="ltr">TIMESTAMP</code>, <code dir="ltr">TT_DATE</code>, and <code dir="ltr">TT_TIMESTAMP</code>. (The alias <code dir="ltr">DATE</code> and <code dir="ltr">TIMESTAMP</code> data types are also valid.) <code dir="ltr">TT_TIME</code> is not supported.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref800"></a>Description</p>
<ul>
<li>
<p>Valid values for <code dir="ltr"><span class="codeinlineitalic">Interval</span></code> are:</p>
<ul>
<li>
<p><code dir="ltr">SQL_TSI_FRAC_SECOND</code></p>
</li>
<li>
<p><code dir="ltr">SQL_TSI_SECOND</code></p>
</li>
<li>
<p><code dir="ltr">SQL_TSI_MINUTE</code></p>
</li>
<li>
<p><code dir="ltr">SQL_TSI_HOUR</code></p>
</li>
<li>
<p><code dir="ltr">SQL_TSI_DAY</code></p>
</li>
<li>
<p><code dir="ltr">SQL_TSI_WEEK</code></p>
</li>
<li>
<p><code dir="ltr">SQL_TSI_MONTH</code></p>
</li>
<li>
<p><code dir="ltr">SQL_TSI_QUARTER</code></p>
</li>
<li>
<p><code dir="ltr">SQL_TSI_YEAR</code></p>
</li>
</ul>
</li>
<li>
<p><code dir="ltr">SQL_TSI_FRAC_SECOND</code> is expressed in billionths of a second.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">Interval</span></code> determines the units in which the difference in timestamps is returned. For example, if you specify <code dir="ltr">SQL_TSI_YEAR</code>, the difference in timestamps is returned in years.</p>
</li>
<li>
<p>TimesTen returns the result as the difference between <code dir="ltr"><span class="codeinlineitalic">TimestampExpression2</span></code> minus (-) <code dir="ltr"><span class="codeinlineitalic">TimestampExpression1</span></code>. The return type is <code dir="ltr">TT_BIGINT</code>.</p>
</li>
<li>
<p>Only positive timestamp expressions (0001-01-01) are allowed. For <code dir="ltr">TT_DATE</code> and <code dir="ltr">TT_TIMESTAMP</code>, because the starting range for these data types is 1753-01-01, the timestamp expression must be equal to or greater than this date.</p>
</li>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">TimestampExpression1</span></code> or <code dir="ltr"><span class="codeinlineitalic">TimestampExpression2</span></code> is <code dir="ltr">NULL</code>, then the result is <code dir="ltr">NULL</code>.</p>
</li>
<li>
<p>If either timestamp expression is a date value and <code dir="ltr"><span class="codeinlineitalic">Interval</span></code> specifies fractional seconds, seconds, minutes, or hours, the time portion of the timestamp is set to 0 before TimesTen calculates the difference between the timestamps.</p>
</li>
<li>
<p>The function first expresses each of the timestamps in units of the specified <code dir="ltr"><span class="codeinlineitalic">Interval</span></code> by converting the higher order interval type to the specified interval type. For example, TimesTen converts years to months if the specified interval is months. Thus, one year is 12 months, one week is seven days, and so on. To find the number of days between two timestamps, the exact number of days is computed. Since months vary in the number of days, TimesTen does not make an assumption about the number of days in a month.</p>
</li>
<li>
<p>The function increments the specified interval whenever fractional intervals cross an interval boundary. For example, the difference in years between 2009-12-31 and 2010-01-01 is one year because the fractional year represents a crossing from one year to the next (2009 to 2010). However, the difference between 2010-01-01 and 2010-12-31 is zero years because the fractional interval does not cross a boundary. It falls within the year 2010.</p>
</li>
<li>
<p>The function calculates the difference in weeks by first calculating the difference in days and then divides the result by seven before rounding. TimesTen assumes a week starts on a Sunday. Therefore the difference in weeks between 2010-10-21 (a Thursday) and 2010-10-25 (the following Monday) results in a value of one week. The difference in the same dates, if Tuesday denoted the start of the week, would result in zero weeks.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref801"></a>Examples</p>
<p>Use the <code dir="ltr">TIMESTAMPDIFF</code> function to calculate the difference in days between dates 2008-02-01 and 2008-03-01. Because 2008 is a leap year, the result is 29 days. The calculation is precise with no assumption of a 30-day month.</p>
<pre dir="ltr">Command&gt; SELECT TIMESTAMPDIFF (SQL_TSI_DAY, DATE &#39;2008-02-01&#39;,
       &gt; DATE &#39;2008-03-01&#39;) FROM dual;
&lt; 29 &gt;
1 row found.
</pre>
<p>Use the <code dir="ltr">TIMESTAMPDIFF</code> function to calculate the difference in months between dates 2009-02-01 and 2009-03-01. Because there is a crossing of the interval month boundary, the function returns 1. In the second example, because days is specified for the interval, the result is 28.</p>
<pre dir="ltr">Command&gt; SELECT TIMESTAMPDIFF (SQL_TSI_MONTH, DATE &#39;2009-02-01&#39;,
       &gt; DATE &#39;2009-03-01&#39;) FROM dual;
&lt; 1 &gt;
1 row found.

Command&gt; SELECT TIMESTAMPDIFF (SQL_TSI_DAY, DATE &#39;2009-02-01&#39;,
       &gt; DATE &#39;2009-03-01&#39;) FROM dual;
&lt; 28 &gt;
1 row found.
</pre>
<p>Use the <code dir="ltr">TIMESTAMPDIFF</code> function to calculate the difference in months between dates 2009-02-01 and 2009-02-29. Because there is not a crossing of the interval month boundary, the function returns 0.</p>
<pre dir="ltr">Command&gt; SELECT TIMESTAMPDIFF (SQL_TSI_MONTH, DATE &#39;2009-02-01&#39;,
       &gt; DATE &#39;2009-02-28&#39;) FROM dual;
&lt; 0 &gt;
1 row found.
</pre>
<p>Use the <code dir="ltr">TIMESTAMPDIFF</code> function to illustrate the time difference in fractional seconds between mixed types. The time difference of one hour is returned in nanoseconds (unit for fractional seconds). The time element of the data type is set to 00:00:00.</p>
<pre dir="ltr">Command&gt; SELECT TIMESTAMPDIFF (SQL_TSI_FRAC_SECOND,
       &gt; TT_TIMESTAMP &#39;2009-12-31 01:00:00.00&#39;, DATE &#39;2009-12-31&#39;) FROM dual;
&lt; -3600000000000 &gt;
1 row found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACHJAJE"></a>
<div id="TTSQL499" class="refsect1">
<h2 class="refsect1">TO_BLOB<a id="sthref802"></a><a id="sthref803"></a><a id="sthref804"></a></h2>
<p>The <code dir="ltr">TO_BLOB</code> function converts <code dir="ltr">VARBINARY</code> or <code dir="ltr">BINARY</code> to a <code dir="ltr">BLOB</code>:</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref805"></a>SQL syntax</p>
<pre dir="ltr">TO_BLOB ( <span class="italic">ValidDataType</span> )
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref806"></a>Parameters</p>
<p><code dir="ltr">TO_BLOB</code> has the parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t68">Parameter</th>
<th class="cellalignment6331" id="r1c2-t68">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t68" headers="r1c1-t68"><code dir="ltr"><span class="codeinlineitalic">ValidDataType</span></code></td>
<td class="cellalignment6332" headers="r2c1-t68 r1c2-t68">A value that is of <code dir="ltr">VARBINARY</code> or <code dir="ltr">BINARY</code> data type.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref807"></a>Examples</p>
<p>The following example creates a table with a <code dir="ltr">BINARY</code> and a <code dir="ltr">VARBINARY</code> columns. The <code dir="ltr">TO_BLOB</code> function is used on the values of these columns to convert the <code dir="ltr">BINARY</code> and <code dir="ltr">VARBINARY</code> data to a <code dir="ltr">BLOB</code>.</p>
<pre dir="ltr">Command&gt; CREATE TABLE bvar 
 &gt; (col1 BINARY (10), col2 VARBINARY (10));

Command&gt; INSERT INTO bvar (col1, col2)
 &gt; VALUES (0x4D7953514C, 0x39274D);
1 row inserted.

Command&gt; SELECT * FROM bvar;
 &lt; 4D7953514C0000000000, 39274D &gt;
1 row found.

Command&gt; SELECT TO_BLOB(col1), TO_BLOB(col2) 
 &gt; FROM bvar;
&lt; 4D7953514C0000000000, 39274D &gt;
1 row found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1000743"></a>
<div id="TTSQL248" class="refsect1">
<h2 class="refsect1">TO_CHAR<a id="sthref808"></a><a id="sthref809"></a></h2>
<p>The <code dir="ltr">TO_CHAR</code> function converts a <code dir="ltr">DATE</code>, <code dir="ltr">TIMESTAMP</code> or numeric input value to a <code dir="ltr">VARCHAR2</code>.</p>
<p>If you are using TimesTen type mode, for information on the <code dir="ltr">TO_CHAR</code> function, see the Oracle TimesTen In-Memory Database Release 6.0.3 documentation.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref810"></a>SQL syntax</p>
<pre dir="ltr">TO_CHAR ( <span class="codeinlineitalic">Expression1</span>[, <span class="codeinlineitalic">Expression2</span> [, <span class="codeinlineitalic">Expression3</span>]])
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref811"></a>Parameters</p>
<p><code dir="ltr">TO_CHAR</code> has the parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t69">Parameter</th>
<th class="cellalignment6331" id="r1c2-t69">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t69" headers="r1c1-t69"><code dir="ltr"><span class="codeinlineitalic">Expression1</span></code></td>
<td class="cellalignment6332" headers="r2c1-t69 r1c2-t69">A <code dir="ltr">DATE</code>, <code dir="ltr">TIMESTAMP</code>, <code dir="ltr">CLOB</code>, <code dir="ltr">NCLOB</code>, or numeric expression.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t69" headers="r1c1-t69"><code dir="ltr"><span class="codeinlineitalic">Expression2</span></code></td>
<td class="cellalignment6332" headers="r3c1-t69 r1c2-t69">The format string. If omitted, TimesTen uses the default date format (<code dir="ltr">YYYY-MM-DD</code>).</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t69" headers="r1c1-t69"><code dir="ltr"><span class="codeinlineitalic">Expression3</span></code></td>
<td class="cellalignment6332" headers="r4c1-t69 r1c2-t69">A <code dir="ltr">CHAR</code> or <code dir="ltr">VARCHAR2</code> expression to specify the NLS parameter, which is currently ignored.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref812"></a>Description</p>
<ul>
<li>
<p><code dir="ltr">TO_CHAR</code> supports different datetime format models depending on the data type specified for the expression. For information on the datetime format model used for <code dir="ltr">TO_CHAR</code> of data type <code dir="ltr">DATE</code> or <code dir="ltr">TIMESTAMP</code>, see <a href="express.htm#i1057765">&#34;Datetime format models&#34;</a>. For information on the datetime format model used for <code dir="ltr">TO_CHAR</code> of data type <code dir="ltr">TT_DATE</code> or <code dir="ltr">TT_TIMESTAMP</code>, see <a href="express.htm#i1094088">&#34;Format model for ROUND and TRUNC date functions&#34;</a>.</p>
</li>
<li>
<p><code dir="ltr">TO_CHAR</code> supports different number format models depending on the numeric data type specified for the expression. For information on the number format model used for <code dir="ltr">TO_CHAR</code> of data type <code dir="ltr">NUMBER</code> or <code dir="ltr">ORA_FLOAT</code>, see <a href="express.htm#i1055501">&#34;Number format models&#34;</a>. For information on the number format model used for <code dir="ltr">TO_CHAR</code> of all other numeric data types, see <a href="express.htm#i1094088">&#34;Format model for ROUND and TRUNC date functions&#34;</a>.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref813"></a>Examples</p>
<pre dir="ltr">SELECT FIRST 5 first_name, 
               TO_CHAR (hire_date, &#39;MONTH DD, YYYY&#39;),
               TO_CHAR (salary, &#39;$999999.99&#39;)
  FROM employees;
&lt; Steven, JUNE      17, 1987,   $24000.00 &gt;
&lt; Neena, SEPTEMBER 21, 1989,   $17000.00 &gt;
&lt; Lex, JANUARY   13, 1993,   $17000.00 &gt;
&lt; Alexander, JANUARY   03, 1990,    $9000.00 &gt;
&lt; Bruce, MAY       21, 1991,    $6000.00 &gt;
5 rows found.

SELECT TO_CHAR(-0.12,&#39;$B99.9999&#39;) FROM dual;
&lt;   -$.1200 &gt;
1 row found.

SELECT TO_CHAR(-12, &#39;B99999PR&#39;) FROM dual;
&lt;     12  &gt;
1 row found.

SELECT TO_CHAR(-12,&#39;FM99999&#39;) FROM dual;
&lt; -12 &gt;
1 row found.

SELECT TO_CHAR(1234.1,&#39;9,999.999&#39;) FROM dual;
&lt;  1,234.100 &gt;
1 row found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACJCCDJ"></a>
<div id="TTSQL500" class="refsect1">
<h2 class="refsect1">TO_CLOB<a id="sthref814"></a><a id="sthref815"></a><a id="sthref816"></a></h2>
<p>The <code dir="ltr">TO_CLOB</code> function converts one of the following values to a <code dir="ltr">CLOB</code>:</p>
<ul>
<li>
<p>Character value contained in one of the following data types: <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NVARCHAR2</code>, <code dir="ltr">TT_VARCHAR</code>, <code dir="ltr">TT_NVARCHAR</code>, or <code dir="ltr">NCLOB</code></p>
</li>
<li>
<p>Datetime value contained in a <code dir="ltr">DATE</code> or <code dir="ltr">TIMESTAMP</code> data type</p>
</li>
<li>
<p>Number value contained in a <code dir="ltr">NUMBER</code>, <code dir="ltr">BINARY_FLOAT</code>, or <code dir="ltr">BINARY_DOUBLE</code> data type</p>
</li>
</ul>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref817"></a>SQL syntax</p>
<pre dir="ltr">TO_CLOB ( <span class="italic">ValidDataType</span> )
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref818"></a>Parameters</p>
<p><code dir="ltr">TO_CLOB</code> has the parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t70">Parameter</th>
<th class="cellalignment6331" id="r1c2-t70">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t70" headers="r1c1-t70"><code dir="ltr"><span class="codeinlineitalic">ValidDataType</span></code></td>
<td class="cellalignment6332" headers="r2c1-t70 r1c2-t70">A value of one of the valid data types mentioned above.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref819"></a>Description</p>
<p>The <code dir="ltr">TO_CLOB</code> function will not operate on values contained in <code dir="ltr">INTERVAL</code> or <code dir="ltr">TIMESTAMP with TIMEZONE</code> data types.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref820"></a>Examples</p>
<p>The following example uses the <code dir="ltr">TO_CLOB</code> function to convert a string.</p>
<pre dir="ltr">Command&gt; DESCRIBE clob_content;
 
Table USER1.CLOB_CONTENT:
  Columns:
   *ID                              NUMBER (38) NOT NULL
    CLOB_COLUMN                     CLOB NOT NULL
 
1 table found.
(primary key columns are indicated with *)

Command&gt; INSERT INTO clob_content (id, clob_column) 
 &gt; VALUES (3, EMPTY_CLOB());
1 row inserted.

Command&gt; UPDATE clob_content 
 &gt; SET clob_column = TO_CLOB(&#39;Demonstration of the TO_CLOB function.&#39;) 
 &gt; WHERE id = 3;
1 row updated.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1058153"></a>
<div id="TTSQL249" class="refsect1">
<h2 class="refsect1"><a id="sthref821"></a><a id="sthref822"></a><a id="sthref823"></a><a id="sthref824"></a><a id="sthref825"></a>TO_DATE</h2>
<p>The <code dir="ltr">TO_DATE</code> function converts a <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">CLOB</code>, or <code dir="ltr">NCLOB</code> argument to a value of <code dir="ltr">DATE</code> data type.</p>
<p>If you are using TimesTen type mode, for information on the <code dir="ltr">TO_DATE</code> function, see the Oracle TimesTen In-Memory Database Release 6.0.3 documentation.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref826"></a>SQL syntax</p>
<pre dir="ltr">TO_DATE (<span class="codeinlineitalic">Expression1</span>[, <span class="codeinlineitalic">Expression2</span> [, <span class="codeinlineitalic">Expression3</span>]])
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref827"></a>Parameters</p>
<p><code dir="ltr">TO_DATE</code> has the parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t71">Parameter</th>
<th class="cellalignment6331" id="r1c2-t71">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t71" headers="r1c1-t71"><code dir="ltr"><span class="codeinlineitalic">Expression1</span></code></td>
<td class="cellalignment6332" headers="r2c1-t71 r1c2-t71">A <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">CLOB</code>, or <code dir="ltr">NCLOB</code> expression.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t71" headers="r1c1-t71"><code dir="ltr"><span class="codeinlineitalic">Expression2</span></code></td>
<td class="cellalignment6332" headers="r3c1-t71 r1c2-t71">The format string. This expression is usually required. It is optional only when <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> is in the default date format <code dir="ltr">YYYY-MM-DD HHMISS</code>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t71" headers="r1c1-t71"><code dir="ltr"><span class="codeinlineitalic">Expression3</span></code></td>
<td class="cellalignment6332" headers="r4c1-t71 r1c2-t71">A <code dir="ltr">CHAR</code> or <code dir="ltr">VARCHAR2</code> expression to specify the <code dir="ltr">NLS</code> parameter, which is currently ignored.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref828"></a>Description</p>
<p>You can use a datetime format model with the <code dir="ltr">TO_DATE</code> function. For more information on datetime format models, see <a href="express.htm#i1057765">&#34;Datetime format models&#34;</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref829"></a>Examples</p>
<pre dir="ltr">Command&gt; SELECT TO_DATE (&#39;1999, JAN 14&#39;, &#39;YYYY, MON DD&#39;) FROM dual;
&lt; 1999-01-14 00:00:00 &gt;
1 row found.

Command&gt; SELECT TO_CHAR(TO_DATE(&#39;1999-12:23&#39;,&#39;YYYY-MM:DD&#39;)) FROM dual;
&lt; 1999-12-23 00:00:00 &gt;
1 row found.

Command&gt; SELECT TO_CHAR(TO_DATE(&#39;12-23-1997 10 AM:56:20&#39;, 
&#39;MM-DD-YYYY HH AM:MI:SS&#39;), &#39;MONTH DD, YYYY HH:MI-SS AM&#39;) FROM DUAL;
&lt; DECEMBER  23, 1997 10:56-20 AM &gt;
1 row found.

Command&gt; SELECT TO_CHAR(TO_DATE(&#39;12-23-1997 15:56:20&#39;, 
&#39;MM-DD-YYYY HH24:MI:SS&#39;), &#39;MONTH DD, YYYY HH24:MI-SS&#39;) FROM DUAL;
&lt; DECEMBER  23, 1997 15:56-20 &gt;
1 row found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACFFDIF"></a>
<div id="TTSQL501" class="refsect1">
<h2 class="refsect1">TO_LOB<a id="sthref830"></a><a id="sthref831"></a><a id="sthref832"></a><a id="sthref833"></a></h2>
<p>The <code dir="ltr">TO_LOB</code> function converts supplied <code dir="ltr">TT_VARCHAR</code> and <code dir="ltr">VARCHAR2</code> data types to a <code dir="ltr">CLOB</code> and <code dir="ltr">VARBINARY</code> data types to a <code dir="ltr">BLOB</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref834"></a>SQL syntax</p>
<pre dir="ltr">TO_LOB ( <span class="italic">ValidDataType</span> )
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref835"></a>Parameters</p>
<p><code dir="ltr">TO_LOB</code> has the parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t72">Parameter</th>
<th class="cellalignment6331" id="r1c2-t72">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t72" headers="r1c1-t72"><code dir="ltr"><span class="codeinlineitalic">ValidDataType</span></code></td>
<td class="cellalignment6332" headers="r2c1-t72 r1c2-t72">A value that is of <code dir="ltr">TT_VARCHAR</code>, <code dir="ltr">VARCHAR2</code>, or <code dir="ltr">BINARY</code> data types.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref836"></a>Description</p>
<p>You can use this function only on a <code dir="ltr">TT_VARCHAR</code>, <code dir="ltr">VARCHAR2</code>, or <code dir="ltr">VARBINARY</code> column, and only with the <code dir="ltr">CREATE TABLE AS SELECT</code> or <code dir="ltr">INSERT...SELECT</code> statements on tables with a defined LOB column.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref837"></a>Examples</p>
<p>The following example shows how to use the <code dir="ltr">TO_LOB</code> function within the <code dir="ltr">INSERT...SELECT</code> statement on a table with a LOB column.</p>
<pre dir="ltr">Command&gt; CREATE TABLE clb(c CLOB);
Command&gt; CREATE TABLE vc (v VARCHAR2(2000));
Command&gt; INSERT INTO vc(v) 
 &gt; VALUES (&#39;Showing the functionality of the TO_LOB function&#39;);
1 row inserted.

Command&gt; INSERT INTO clb 
SELECT TO_LOB(v) FROM vc; 
1 row inserted.

Command&gt; SELECT * FROM clb;
&lt; Showing the functionality of the TO_LOB function &gt;
1 row found.
</pre>
<p>Because of the restriction mentioned above, you cannot use the <code dir="ltr">TO_LOB</code> function in all cases where you can use the <code dir="ltr">TO_CLOB</code> or <code dir="ltr">TO_BLOB</code> functions. The following example demonstrates the error you receive when you try to use the <code dir="ltr">TO_LOB</code> function in this manner:</p>
<pre dir="ltr">Command&gt; SELECT TO_LOB(col1) 
 &gt; FROM bvar;
 2610: Operand data type &#39;BINARY&#39; invalid for operator 
 &#39;TO_LOB&#39; in expr ( TO_LOB( BVAR.COL1 ))
The command failed. 
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACCHEAC"></a>
<div id="TTSQL502" class="refsect1">
<h2 class="refsect1">TO_NCLOB<a id="sthref838"></a><a id="sthref839"></a><a id="sthref840"></a></h2>
<p>The <code dir="ltr">TO_NCLOB</code> function converts one of the following values to a <code dir="ltr">NCLOB</code>:</p>
<ul>
<li>
<p>Character value contained in one of the following data types: <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NVARCHAR2</code>, <code dir="ltr">TT_VARCHAR</code>, <code dir="ltr">TT_NVARCHAR</code>, or <code dir="ltr">NCLOB</code></p>
</li>
<li>
<p>Datetime value contained in a <code dir="ltr">DATE</code> or <code dir="ltr">TIMESTAMP</code> data type</p>
</li>
<li>
<p>Number value contained in a <code dir="ltr">NUMBER</code>, <code dir="ltr">BINARY_FLOAT</code>, or <code dir="ltr">BINARY_DOUBLE</code> data type</p>
</li>
</ul>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref841"></a>SQL syntax</p>
<pre dir="ltr">TO_NCLOB ( <span class="italic">ValidDataType</span> )
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref842"></a>Parameters</p>
<p><code dir="ltr">TO_NCLOB</code> has the parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t73">Parameter</th>
<th class="cellalignment6331" id="r1c2-t73">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t73" headers="r1c1-t73"><code dir="ltr"><span class="codeinlineitalic">ValidDataType</span></code></td>
<td class="cellalignment6332" headers="r2c1-t73 r1c2-t73">A value of one of the valid data types mentioned above.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref843"></a>Examples</p>
<p>The following converts the data in the <code dir="ltr">VARCHAR2</code> <code dir="ltr">job_title</code> column to be of data type <code dir="ltr">NCLOB</code>.</p>
<pre dir="ltr">Command&gt; SELECT TO_NCLOB(job_title) FROM jobs;

&lt; Public Accountant &gt;
&lt; Accounting Manager &gt;
&lt; Administration Assistant &gt;
&lt; President &gt;
&lt; Administration Vice President &gt;
&lt; Accountant &gt;
&lt; Finance Manager &gt;
&lt; Human Resources Representative &gt;
&lt; Programmer &gt;
&lt; Marketing Manager &gt;
&lt; Marketing Representative &gt;
&lt; Public Relations Representative &gt;
&lt; Purchasing Clerk &gt;
&lt; Purchasing Manager &gt;
&lt; Sales Manager &gt;
&lt; Sales Representative &gt;
&lt; Shipping Clerk &gt;
&lt; Stock Clerk &gt;
&lt; Stock Manager &gt;
19 rows found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1030328"></a>
<div id="TTSQL250" class="refsect1">
<h2 class="refsect1">TO_NUMBER<a id="sthref844"></a><a id="sthref845"></a></h2>
<p>Converts an expression to a value of <code dir="ltr">NUMBER</code> type.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref846"></a>SQL syntax</p>
<pre dir="ltr">TO_NUMBER (<span class="italic">Expression</span>[, <span class="italic">Format]</span>) 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref847"></a>Parameters</p>
<p><code dir="ltr">TO_NUMBER</code> has the parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t74">Parameter</th>
<th class="cellalignment6331" id="r1c2-t74">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t74" headers="r1c1-t74"><code dir="ltr"><span class="codeinlineitalic">Expression</span></code></td>
<td class="cellalignment6332" headers="r2c1-t74 r1c2-t74">The expression to be converted, where the value can be of type <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NCHAR</code>, <code dir="ltr">NVARCHAR2</code>, <code dir="ltr">BINARY_FLOAT</code>, <code dir="ltr">BINARY_DOUBLE</code>, <code dir="ltr">CLOB</code>, or <code dir="ltr">NCLOB</code>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t74" headers="r1c1-t74"><code dir="ltr"><span class="codeinlineitalic">Format</span></code></td>
<td class="cellalignment6332" headers="r3c1-t74 r1c2-t74">If specified, the format is used to convert <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> to a value of <code dir="ltr">NUMBER</code> type. The format string identifies the number format model. The format and can be either a constant or a parameter.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref848"></a>Description</p>
<p>You can use a number format model with the <code dir="ltr">TO_NUMBER</code> function. For more information on number format models, see <a href="express.htm#i1055501">&#34;Number format models&#34;</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref849"></a>Examples</p>
<pre dir="ltr">Command&gt; SELECT TO_NUMBER (&#39;100.00&#39;, &#39;999D99&#39;) FROM dual;
&lt; 100 &gt;
1 row found.

Command&gt; SELECT TO_NUMBER (&#39;1210.73&#39;, &#39;9999.99&#39;) FROM dual;
&lt; 1210.73 &gt;
1 row found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CIHFIBBG"></a>
<div id="TTSQL251" class="refsect1">
<h2 class="refsect1"><a id="sthref850"></a><a id="sthref851"></a>TRIM</h2>
<p>The <code dir="ltr">TRIM</code> function trims leading or trailing characters (or both) from a character string.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref852"></a>SQL syntax</p>
<p>There are four syntax options for <code dir="ltr">TRIM</code>:</p>
<ul>
<li>
<p>You can specify one of the <code dir="ltr">TRIM</code> qualifiers (<code dir="ltr">LEADING</code> or <code dir="ltr">TRAILING</code> or <code dir="ltr">BOTH</code>) with the <code dir="ltr"><span class="codeinlineitalic">Trim_character</span></code>:</p>
<pre dir="ltr">TRIM ( LEADING|TRAILING|BOTH <span class="codeinlineitalic">Trim_character</span> FROM <span class="codeinlineitalic">Expression</span> )
</pre></li>
<li>
<p>You can specify one of the <code dir="ltr">TRIM</code> qualifiers (<code dir="ltr">LEADING</code> or <code dir="ltr">TRAILING</code> or <code dir="ltr">BOTH</code>) without the <code dir="ltr"><span class="codeinlineitalic">Trim_character</span></code>. In this case, <code dir="ltr"><span class="codeinlineitalic">Trim_character</span></code> defaults to a blank.</p>
<pre dir="ltr">TRIM ( LEADING|TRAILING|BOTH FROM <span class="codeinlineitalic">Expression</span> )
</pre></li>
<li>
<p>You can specify the <code dir="ltr"><span class="codeinlineitalic">Trim_character</span></code> without one of the <code dir="ltr">TRIM</code> qualifiers, which removes both leading and trailing instances of <code dir="ltr"><span class="codeinlineitalic">Trim_character</span></code> from <code dir="ltr"><span class="codeinlineitalic">Expression</span></code>.</p>
<pre dir="ltr">TRIM (<span class="codeinlineitalic">Trim_character</span> FROM <span class="codeinlineitalic">Expression</span> )
</pre></li>
<li>
<p>You can specify the <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> without a qualifier or a <code dir="ltr"><span class="codeinlineitalic">Trim_character</span></code>, which results in leading and trailing blank spaces removed from <code dir="ltr"><span class="codeinlineitalic">Expression</span></code>.</p>
<pre dir="ltr">TRIM ( <span class="codeinlineitalic">Expression</span> )
</pre></li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref853"></a>Parameters</p>
<p><code dir="ltr">TRIM</code> has the parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t75">Parameter</th>
<th class="cellalignment6331" id="r1c2-t75">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t75" headers="r1c1-t75"><code dir="ltr">LEADING | TRAILING | BOTH</code></td>
<td class="cellalignment6332" headers="r2c1-t75 r1c2-t75"><code dir="ltr">LEADING</code> <code dir="ltr">| TRAILING| BOTH</code> are qualifiers to <code dir="ltr">TRIM</code> function. <code dir="ltr">LEADING</code> removes all leading instances of <code dir="ltr"><span class="codeinlineitalic">Trim_character</span></code> from <code dir="ltr"><span class="codeinlineitalic">Expression</span></code>. <code dir="ltr">TRAILING</code> removes all trailing instances of <code dir="ltr"><span class="codeinlineitalic">Trim_character</span></code> from <code dir="ltr"><span class="codeinlineitalic">Expression</span></code>. <code dir="ltr">BOTH</code> removes leading and trailing instances of <code dir="ltr"><span class="codeinlineitalic">Trim_character</span></code> from <code dir="ltr"><span class="codeinlineitalic">Expression</span></code>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t75" headers="r1c1-t75"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Trim_character</span></code><code dir="ltr">]</code></td>
<td class="cellalignment6332" headers="r3c1-t75 r1c2-t75">If specified, <code dir="ltr"><span class="codeinlineitalic">Trim_character</span></code> represents the <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NCHAR</code>, <code dir="ltr">NVARCHAR2</code>, <code dir="ltr">CLOB</code> or <code dir="ltr">NCLOB</code> operand or column used for trimming <code dir="ltr"><span class="codeinlineitalic">Expression</span></code>. Must be only one character. If you do not specify <code dir="ltr"><span class="codeinlineitalic">Trim_character</span></code>, it defaults to a single blank. If <code dir="ltr"><span class="codeinlineitalic">Trim_character</span></code> is a character literal, enclose it in single quotes.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t75" headers="r1c1-t75"><code dir="ltr"><span class="codeinlineitalic">Expression</span></code></td>
<td class="cellalignment6332" headers="r4c1-t75 r1c2-t75"><code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is the <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NCHAR</code>, <code dir="ltr">NVARCHAR2</code>, <code dir="ltr">CLOB</code> or <code dir="ltr">NCLOB</code> operand or column to be trimmed. If <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is a character literal, enclose it in single quotes.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref854"></a>Description</p>
<ul>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is of type <code dir="ltr">CHAR</code> or <code dir="ltr">VARCHAR2</code>, the data type returned is <code dir="ltr">VARCHAR2</code>. If <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is of type <code dir="ltr">NCHAR</code> or <code dir="ltr">NVARCHAR2</code>, the data type returned is <code dir="ltr">NVARCHAR2</code>. If <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is of type <code dir="ltr">CLOB</code>, the data type returned is <code dir="ltr">CLOB</code>. If <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is of type <code dir="ltr">NCLOB</code>, the data type returned is <code dir="ltr">NCLOB</code>. The returned data type length is equal to the data type length of <code dir="ltr"><span class="codeinlineitalic">Expression</span></code>.</p>
</li>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is a data type defined with <code dir="ltr">CHAR</code> length semantics, the returned length is expressed in <code dir="ltr">CHAR</code> length semantics.</p>
</li>
<li>
<p>If either <code dir="ltr"><span class="codeinlineitalic">Trim_character</span></code> or <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is <code dir="ltr">NULL</code>, the result is <code dir="ltr">NULL</code>.</p>
</li>
<li>
<p>You can specify <code dir="ltr">TT_CHAR</code>, <code dir="ltr">TT_VARCHAR</code>, <code dir="ltr">TT_NCHAR</code>, and <code dir="ltr">TT_NVARCHAR</code> for <code dir="ltr"><span class="codeinlineitalic">Trim_character</span></code> and <code dir="ltr"><span class="codeinlineitalic">Expression</span></code>. If <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is of type <code dir="ltr">TT_CHAR</code> or <code dir="ltr">TT_VARCHAR</code>, the data type returned is <code dir="ltr">TT_VARCHAR</code>. If <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is of type <code dir="ltr">TT_NCHAR</code> or <code dir="ltr">TT_NVARCHAR</code>, the data type returned is <code dir="ltr">TT_NVARCHAR</code>.</p>
</li>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">Trim_character</span></code> is of type <code dir="ltr">NCHAR</code> or <code dir="ltr">NVARCHAR2</code> and <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> is of type <code dir="ltr">CHAR</code> or <code dir="ltr">VARCHAR2</code>, then <code dir="ltr"><span class="codeinlineitalic">Trim_character</span></code> is demoted to <code dir="ltr">CHAR</code> or <code dir="ltr">VARCHAR2</code> before <code dir="ltr">TRIM</code> is invoked. The conversion of <code dir="ltr"><span class="codeinlineitalic">Trim_character</span></code> could be lost. If <code dir="ltr"><span class="codeinlineitalic">Trim_character</span></code> is not in the database character set, then the query may produce unexpected results.</p>
</li>
<li>
<p>For <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NCHAR</code>, <code dir="ltr">NVARCHAR2</code>, <code dir="ltr">CLOB</code> and <code dir="ltr">NCLOB</code> types:</p>
<ul>
<li>
<p>If all the characters in <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> are removed by the <code dir="ltr">TRIM</code> function, the result is <code dir="ltr">NULL</code>.</p>
</li>
</ul>
</li>
<li>
<p>For <code dir="ltr">TT_CHAR</code>, <code dir="ltr">TT_VARCHAR</code>, <code dir="ltr">TT_NCHAR</code> and <code dir="ltr">TT_NVARCHAR</code> types:</p>
<ul>
<li>
<p>If all the characters in <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> are removed by the <code dir="ltr">TRIM</code> function, the result is the empty string.</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref855"></a>Examples</p>
<p>Use <code dir="ltr">TRIM</code> function with qualifier to remove <code dir="ltr"><span class="codeinlineitalic">Trim_character</span></code> <code dir="ltr">&#39;0&#39;</code> from <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> <code dir="ltr">&#39;0000TRIM Example0000&#39;</code>:</p>
<pre dir="ltr">Command&gt; SELECT TRIM (LEADING &#39;0&#39; FROM &#39;0000TRIM Example0000&#39;) FROM dual;
&lt; TRIM Example0000 &gt;
1 row found.
Command&gt; SELECT TRIM (TRAILING &#39;0&#39; FROM &#39;0000TRIM Example0000&#39;) FROM dual;
&lt; 0000TRIM Example &gt;
1 row found.
Command&gt; SELECT TRIM (BOTH &#39;0&#39; FROM &#39;0000TRIM Example0000&#39;) FROM dual;
&lt; TRIM Example &gt;
1 row found.
</pre>
<p>Use <code dir="ltr">TRIM</code> function with qualifier to remove blank spaces. Do not specify a <code dir="ltr"><span class="codeinlineitalic">Trim_character</span></code>. Default value for <code dir="ltr"><span class="codeinlineitalic">Trim_character</span></code> is blank space:</p>
<pre dir="ltr">Command&gt; SELECT TRIM (LEADING FROM &#39;    TRIM Example    &#39;) FROM dual;
&lt; TRIM Example     &gt;
1 row found.
Command&gt; SELECT TRIM (TRAILING FROM &#39;    TRIM Example    &#39;) FROM dual;
&lt;     TRIM Example &gt;
1 row found.
Command&gt; SELECT TRIM (BOTH FROM &#39;    TRIM Example    &#39;) FROM dual;
&lt; TRIM Example &gt;
1 row found.
</pre>
<p>Use <code dir="ltr">TRIM</code> function with <code dir="ltr"><span class="codeinlineitalic">Trim_character</span></code> <code dir="ltr">&#39;0&#39;</code>. Do not specify a qualifier. Leading and trailing <code dir="ltr">&#39;0&#39;</code>s are removed from <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> <code dir="ltr">&#39;0000TRIM Example0000&#39;</code>:</p>
<pre dir="ltr">Command&gt; SELECT TRIM (&#39;0&#39; FROM &#39;0000TRIM Example0000&#39;) FROM dual;
&lt; TRIM Example &gt;
1 row found.
</pre>
<p>Use <code dir="ltr">TRIM</code> function without a qualifier or <code dir="ltr"><span class="codeinlineitalic">Trim_character</span></code>. Leading and trailing spaces are removed.</p>
<pre dir="ltr">&lt; TRIM Example &gt;
1 row found.
Command&gt; SELECT TRIM (&#39;    TRIM Example    &#39;) FROM dual;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1027996"></a>
<div id="TTSQL252" class="refsect1">
<h2 class="refsect1"><a id="sthref856"></a><a id="sthref857"></a>TRUNC (date)</h2>
<p>Returns date with the time portion of the day truncated to the unit specified by the format model <code dir="ltr"><span class="codeinlineitalic">fmt</span></code>. The value returned is of type <code dir="ltr">DATE</code>. If you do not specify <code dir="ltr"><span class="codeinlineitalic">fmt</span></code>, then <code dir="ltr"><span class="codeinlineitalic">date</span></code> is truncated to the nearest day.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref858"></a>SQL syntax</p>
<pre dir="ltr">TRUNC (<span class="codeinlineitalic">date</span> [,<span class="codeinlineitalic">fmt</span>]) 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref859"></a>Parameters</p>
<p><code dir="ltr">TRUNC (</code><code dir="ltr"><span class="codeinlineitalic">date</span></code><code dir="ltr">)</code> has the parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t76">Parameter</th>
<th class="cellalignment6331" id="r1c2-t76">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t76" headers="r1c1-t76"><code dir="ltr"><span class="codeinlineitalic">date</span></code></td>
<td class="cellalignment6332" headers="r2c1-t76 r1c2-t76">The date that is truncated. Specify the <code dir="ltr">DATE</code> data type for <code dir="ltr"><span class="codeinlineitalic">date</span></code>. The function returns data type <code dir="ltr">DATE</code> with the time portion of the day truncated to the unit specified by the format model. If you do not specify <code dir="ltr"><span class="codeinlineitalic">fmt</span></code>, the date is truncated to the nearest day. An error is returned if you do not specify the <code dir="ltr">DATE</code> data type.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t76" headers="r1c1-t76"><code dir="ltr">[,</code><code dir="ltr"><span class="codeinlineitalic">fmt</span></code><code dir="ltr">]</code></td>
<td class="cellalignment6332" headers="r3c1-t76 r1c2-t76">The format model truncating unit. Specify either a constant or a parameter for <code dir="ltr"><span class="codeinlineitalic">fmt</span></code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref860"></a>Description</p>
<p>For the permitted format models to use in <code dir="ltr"><span class="codeinlineitalic">fmt</span></code>, see <a href="express.htm#i1094088">&#34;Format model for ROUND and TRUNC date functions&#34;</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref861"></a>Examples</p>
<pre dir="ltr">Command&gt; SELECT TRUNC (TO_DATE (&#39;27-OCT-92&#39;,&#39;DD-MON-YY&#39;),&#39;YEAR&#39;) FROM dual;
&lt; 2092-01-01 00:00:00 &gt;
1 row found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CIHDAEDB"></a>
<div id="TTSQL253" class="refsect1">
<h2 class="refsect1"><a id="sthref862"></a><a id="sthref863"></a>TRUNC (expression)</h2>
<p>Returns a number truncated to a certain number of decimal places.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref864"></a>SQL syntax</p>
<pre dir="ltr">TRUNC (<span class="codeinlineitalic">Expression</span> [,<span class="codeinlineitalic">m</span>]) 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref865"></a>Parameters</p>
<p><code dir="ltr">TRUNC</code> has the parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t77">Parameter</th>
<th class="cellalignment6331" id="r1c2-t77">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t77" headers="r1c1-t77"><code dir="ltr"><span class="codeinlineitalic">Expression</span></code></td>
<td class="cellalignment6332" headers="r2c1-t77 r1c2-t77">The <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> to truncate. Operands must be of type <code dir="ltr">NUMBER</code>. An error is returned if operands are not of type <code dir="ltr">NUMBER</code>. The value returned is of type <code dir="ltr">NUMBER</code>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t77" headers="r1c1-t77"><code dir="ltr">[,</code><code dir="ltr"><span class="codeinlineitalic">m</span></code><code dir="ltr">]</code></td>
<td class="cellalignment6332" headers="r3c1-t77 r1c2-t77">The number of decimal places to truncate to. If <code dir="ltr"><span class="codeinlineitalic">m</span></code> is omitted, then the number is truncated to 0 places. The value of <code dir="ltr"><span class="codeinlineitalic">m</span></code> can be negative to truncate (make zero) <code dir="ltr"><span class="codeinlineitalic">m</span></code> digits left of the decimal point.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref866"></a>Examples</p>
<pre dir="ltr">SELECT TRUNC (15.79,1) FROM dual;
&lt; 15.7 &gt;
1 row found.

SELECT TRUNC (15.79,-1) FROM dual;
&lt; 10 &gt;
1 row found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1041970"></a>
<div id="TTSQL254" class="refsect1">
<h2 class="refsect1">TT_HASH<a id="sthref867"></a><a id="sthref868"></a><a id="sthref869"></a></h2>
<p>The <code dir="ltr">TT_HASH</code> function returns the hash value of an expression or list of expressions. This value is the value that is used by a hash index.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref870"></a>SQL syntax</p>
<pre dir="ltr">TT_HASH(<span class="italic">Expression</span> [,...])
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref871"></a>Parameters</p>
<p><code dir="ltr">TT_HASH</code> has the parameter:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t78">Parameter</th>
<th class="cellalignment6331" id="r1c2-t78">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t78" headers="r1c1-t78"><code dir="ltr"><span class="codeinlineitalic">Expression</span></code> <code dir="ltr">[,...]</code></td>
<td class="cellalignment6332" headers="r2c1-t78 r1c2-t78">One or more expressions to be used to determine the hash value of the expression or list of expressions.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref872"></a>Description</p>
<ul>
<li>
<p>Each expression must have a known data type and must be non-nullable. The hash value of the expression depends on both the value of the expression and its type. For example, <code dir="ltr">TT_HASH</code> of an <code dir="ltr">TT_INTEGER</code> with value 25 may be different from <code dir="ltr">TT_HASH</code> of a <code dir="ltr">NUMBER</code> or <code dir="ltr">BINARY_DOUBLE</code> with value 25. If you specify a list of expressions, the <code dir="ltr">TT_HASH</code> result depends on the order of the expressions in the list.</p>
</li>
<li>
<p>Since constants and expressions that are not simple column references are subject to internal typing rules, over which applications have no control, the best way to ensure that <code dir="ltr">TT_HASH</code> computes the desired value for expressions that are not simple column references is to <code dir="ltr"><a href="#i1000097">CAST</a></code> the expression to the desired type.</p>
</li>
<li>
<p>The result type of <code dir="ltr">TT_HASH</code> is <code dir="ltr">TT_INTEGER</code> in 32-bit mode and <code dir="ltr">TT_BIGINT</code> in 64-bit mode.</p>
</li>
<li>
<p><code dir="ltr">TT_HASH</code> can be used in a SQL statement anywhere an expression can be used. For example, <code dir="ltr">TT_HASH</code> can be used in a <code dir="ltr">SELECT</code> list, a <code dir="ltr">WHERE</code> or <code dir="ltr">HAVING</code> clause, an <code dir="ltr">ORDER BY</code> clause, or a <code dir="ltr">GROUP BY</code> clause.</p>
</li>
<li>
<p>The output of error messages, trace messages, and <code dir="ltr">ttXactAdmin</code> display the hash value as a signed decimal so that the value matches <code dir="ltr">TT_HASH</code> output.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref873"></a>Examples</p>
<p>The following query finds the set of rows whose primary key columns hash to a given hash value:</p>
<pre dir="ltr">SELECT * FROM t1 
  WHERE TT_HASH(pkey_col1, pkey_col2, pkey_col3) = 12345678; 
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACEGBHF"></a>
<div id="TTSQL476" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref874"></a><a id="sthref875"></a>TTGRIDMEMBERID</h2>
<p>When executed within a global query, gives the member ID in the cache grid of the owning member for each returned row.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref876"></a>SQL syntax</p>
<pre dir="ltr">TTGRIDMEMBERID()
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref877"></a>Parameters</p>
<p><code dir="ltr">TTGRIDMEMBERID()</code> has no parameters.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref878"></a>Description</p>
<p><code dir="ltr">TTGRIDMEMBERID()</code>, when executed within a global query, returns a <code dir="ltr">TT_INTEGER</code> with the member ID of the member where each returned row is located in the cache grid. If not executed within a global query, the current member ID is returned. <code dir="ltr">NULL</code> is returned if the member&#39;s node is not attached to a grid.</p>
<p>Autocommit should be set to <code dir="ltr">OFF</code>.</p>
<p>See <a class="olink TTCAC449" href="../TTCAC/gridmembers.htm#TTCAC449">&#34;Obtaining information about the location of data in the cache grid&#34;</a> in <span class="italic">Oracle TimesTen Application-Tier Database Cache User&#39;s Guide</span> for more information on this function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref879"></a>Examples</p>
<p>The following example shows autocommit set to <code dir="ltr">OFF</code> and sets the <code dir="ltr">GlobalProcessing</code> optimizer hint to 1, which makes the statements following part of a global query. The <code dir="ltr">SELECT</code> statement retrieves the employee number and member ID of the member where the employee data resides. The following output shows that the employee rows exist on members 2 and 4.</p>
<pre dir="ltr">Command&gt; AUTOCOMMIT OFF;
Command&gt; CALL ttOptSetFlag(&#39;GlobalProcessing&#39;, 1);
Command&gt; SELECT employee_id, TTGRIDMEMBERID() FROM employees;
&lt; 7900, 2 &gt;
&lt; 7902, 4 &gt;
2 rows found.
</pre>
<p>The following example uses <code dir="ltr">TTGRIDMEMBERID()</code> in an <code dir="ltr">ORDER BY</code> clause.</p>
<pre dir="ltr">Command&gt; AUTOCOMMIT OFF;
Command&gt; CALL ttOptSetFlag(&#39;GlobalProcessing&#39;, 1);
Command&gt; SELECT employee_id, TTGRIDMEMBERID() FROM employees 
 ORDER BY TTGRIDMEMBERID();
&lt; 7900, 2 &gt;
&lt; 7902, 4 &gt;
2 rows found.
 
</pre>
<p>The following example uses <code dir="ltr">TTGRIDMEMBERID()</code> in a <code dir="ltr">WHERE</code> clause:</p>
<pre dir="ltr">Command&gt; AUTOCOMMIT OFF;
Command&gt; CALL ttOptSetFlag(&#39;GlobalProcessing&#39;, 1);
Command&gt; SELECT employee_id, TTGRIDMEMBERID() FROM employees 
 WHERE TTGRIDMEMBERID()=2;
&lt; 7900, 2 &gt;
1 row found.
</pre></div>
<!-- class="refsubsect" -->
<p>The following example executes <code dir="ltr">TTGRIDMEMBERID()</code> as a local query to retrieve the local member ID, which is 1.</p>
<pre dir="ltr">Command&gt; SELECT TTGRIDMEMBERID() FROM dual;
&lt; 1 &gt;
1 row found.
</pre></div>
<!-- class="refsect1" -->
<a id="CACDEECC"></a>
<div id="TTSQL477" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref880"></a><a id="sthref881"></a>TTGRIDNODENAME</h2>
<p>When executed within a global query, returns the name of the node in a cache grid on which the data is located.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref882"></a>SQL syntax</p>
<pre dir="ltr">TTGRIDNODENAME()
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref883"></a>Parameters</p>
<p><code dir="ltr">TTGRIDNODENAME()</code> has no parameters.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref884"></a>Description</p>
<p><code dir="ltr">TTGRIDNODENAME()</code> returns a <code dir="ltr">TT_VARCHAR(64)</code> with the node name of the node on which each returned row is located, which shows the location of data in a cache grid. <code dir="ltr">NULL</code> is returned if the node is not attached to a grid.</p>
<p>Autocommit should be set to <code dir="ltr">OFF</code>.</p>
<p>See <a class="olink TTCAC449" href="../TTCAC/gridmembers.htm#TTCAC449">&#34;Obtaining information about the location of data in the cache grid&#34;</a> in <span class="italic">Oracle TimesTen Application-Tier Database Cache User&#39;s Guide</span> for more information.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref885"></a>Examples</p>
<p>The following example shows autocommit set to <code dir="ltr">OFF</code> and sets the <code dir="ltr">GlobalProcessing</code> optimizer hint to 1, which makes the statements following part of a global query. The <code dir="ltr">SELECT</code> statement retrieves the employee number and name of the node where the employee data resides. The following output shows that the employee rows exist on members 2 and 4.</p>
<pre dir="ltr">Command&gt; AUTOCOMMIT OFF;
Command&gt; CALL ttOptSetFlag(&#39;GlobalProcessing&#39;, 1);
Command&gt; SELECT employee_id, TTGRIDNODENAME() FROM employees;
&lt; 7900, MYGRID_member2 &gt;
&lt; 7902, MYGRID_member4 &gt;
2 rows found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACGBCGA"></a>
<div id="TTSQL478" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref886"></a><a id="sthref887"></a>TTGRIDUSERASSIGNEDNAME</h2>
<p>Within a global query, returns the user-assigned name of the node in a cache grid on which the data is located.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref888"></a>SQL syntax</p>
<pre dir="ltr">TTGRIDUSERASSIGNEDNAME()
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref889"></a>Parameters</p>
<p><code dir="ltr">TTGRIDUSERASSIGNEDNAME()</code> has no parameters.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref890"></a>Description</p>
<p><code dir="ltr">TTGRIDUSERASSIGNEDNAME()</code> returns a <code dir="ltr">TT_VARCHAR(30)</code> with the node name assigned by the user to the node of the grid on which the data is located. <code dir="ltr">NULL</code> is returned if the node is not attached to a grid.</p>
<p>Autocommit should be set to <code dir="ltr">OFF</code>.</p>
<p>See <a class="olink TTCAC449" href="../TTCAC/gridmembers.htm#TTCAC449">&#34;Obtaining information about the location of data in the cache grid&#34;</a> in <span class="italic">Oracle TimesTen Application-Tier Database Cache User&#39;s Guide</span> for more information.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref891"></a>Examples</p>
<p>The following example includes a cache grid whose members have user-assigned names <code dir="ltr">alone1</code>, <code dir="ltr">alone2</code>, and an active standby pair on nodes <code dir="ltr">cacheact</code> and <code dir="ltr">cachestand</code>. The standby database has the same data as the active database, but the query does not return data from the standby database.</p>
<p>The following example retrieves <code dir="ltr">employee_id</code> and the user-assigned node name with <code dir="ltr">TTGRIDUSERASSIGNEDNAME()</code> from the <code dir="ltr">employees</code> table from the grid members. The returned rows show which grid node owns each row of the cache instance.</p>
<pre dir="ltr">Command&gt; AUTOCOMMIT OFF;
Command&gt; CALL ttOptSetFlag(&#39;GlobalProcessing&#39;, 1);
Command&gt; SELECT employee_id, TTGRIDUSERASSIGNEDNAME() FROM employees;
Command&gt; COMMIT;
&lt; 100, alone1&gt;
&lt; 101, alone2&gt;
&lt; 102, cacheact&gt;
&lt; 103, alone1&gt;
&lt; 104, cacheact&gt;
...
</pre>
<p>Subsequent queries can access the appropriate node without changing the ownership of the data. For example, execute this query on grid node <code dir="ltr">cacheact</code>, including <code dir="ltr">TTGRIDUSERASSIGNEDNAME()</code> to verify that <code dir="ltr">cacheact</code> is the node where the data is located:</p>
<pre dir="ltr">Command&gt; AUTOCOMMIT OFF;
Command&gt; CALL ttOptSetFlag(&#39;GlobalProcessing&#39;, 1);
Command&gt; SELECT employee_id, last_name, hire_date, TTGRIDUSERASSIGNEDNAME() 
 FROM employees WHERE employee_id=104;
&lt; 104, Ernst, cacheact, 1991-05-21 00:00:00 &gt;
</pre>
<p>The following example retrieves the employee number and user-assigned name for the node on which the employee data exists and orders the returned data by the user-assigned name:</p>
<pre dir="ltr">Command&gt; AUTOCOMMIT OFF;
Command&gt; CALL ttOptSetFlag(&#39;GlobalProcessing&#39;, 1);
Command&gt; SELECT employee_id, TTGRIDUSERASSIGNEDNAME() FROM employees ORDER BY
 TTGRIDUSERASSIGNEDNAME() ASC;
&lt; 7900, member2 &gt;
&lt; 7902, member4 &gt;
2 rows found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CIHGHCIJ"></a>
<div id="TTSQL255" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref892"></a><a id="sthref893"></a><a id="sthref894"></a>UID</h2>
<p>This function returns an integer (<code dir="ltr">TT_INTEGER</code>) that uniquely identifies the session user.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref895"></a>SQL syntax</p>
<pre dir="ltr">UID
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref896"></a>Parameters</p>
<p><code dir="ltr">UID</code> has no parameters.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref897"></a>Examples</p>
<pre dir="ltr">SELECT UID FROM dual;
&lt; 10 &gt;
1 row found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1040226"></a>
<div id="TTSQL256" class="refsect1">
<h2 class="refsect1">UNISTR<a id="sthref898"></a><a id="sthref899"></a><a id="sthref900"></a></h2>
<p>The <code dir="ltr">UNISTR</code> function takes as its argument a string that resolves to data of type <code dir="ltr">NVARCHAR2</code> and returns the value in UTF-16 format. Unicode escapes are supported. You can specify the Unicode encoding value of the characters in the string.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref901"></a>SQL syntax</p>
<pre dir="ltr">UNISTR (&#39;<span class="codeinlineitalic">String</span>&#39;)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref902"></a>Parameters</p>
<p><code dir="ltr">UNISTR</code> has the parameter:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the function parameters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t79">Parameter</th>
<th class="cellalignment6331" id="r1c2-t79">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t79" headers="r1c1-t79"><code dir="ltr"><span class="codeinlineitalic">&#39;String&#39;</span></code></td>
<td class="cellalignment6332" headers="r2c1-t79 r1c2-t79">The string passed to the <code dir="ltr">UNISTR</code> function. The string resolves to type <code dir="ltr">NVARCHAR2</code>. TimesTen returns the value in UTF-16 format. You can specify Unicode escapes as part of the string.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref903"></a>Examples</p>
<p>The following example invokes the <code dir="ltr">UNISTR</code> function passing as an argument the string <code dir="ltr">&#39;A\00E4a&#39;</code>. The value returned is the value of the string in UTF-16 format:</p>
<pre dir="ltr">Command&gt; SELECT UNISTR (&#39;A\00E4a&#39;) FROM dual;
&lt;A&auml;a&gt; 1 row found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CIHFABDA"></a>
<div id="TTSQL259" class="refsect1">
<h2 class="refsect1">USER<a id="sthref904"></a><a id="sthref905"></a><a id="sthref906"></a></h2>
<p>Returns the name of the TimesTen user who is currently connected to the database.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref907"></a>SQL syntax</p>
<pre dir="ltr">USER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref908"></a>Parameters</p>
<p><code dir="ltr">USER</code> has no parameters.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref909"></a>Examples</p>
<p>To return the name of the user who is currently connected to the database:</p>
<pre dir="ltr">SELECT USER FROM dual;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment6323">
<tr>
<td class="cellalignment6332">
<table class="cellalignment6328">
<tr>
<td class="cellalignment6327"><a href="express.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment6327"><a href="search.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2011, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment6334">
<table class="cellalignment6326">
<tr>
<td class="cellalignment6327"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment6327"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment6327"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment6327"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment6327"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment6327"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>