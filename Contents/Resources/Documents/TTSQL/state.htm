<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-114073"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/SQL%20Statements"></a><title>SQL Statements</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1040"/>
<meta name="dcterms.created" content="2015-03-12T19:51:47Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="TimesTen In-Memory Database SQL Reference"/>
<meta name="dcterms.identifier" content="E21642-12"/>
<meta name="dcterms.isVersionOf" content="TTSQL"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2011, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="search.htm" title="Previous" type="text/html"/>
<link rel="Next" href="privileges.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E21642-12.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">10/13</span> <!-- End Header -->
<div id="TTSQL277" class="chapter"><a id="i1165937"></a>
<h1 class="chapter"><span class="secnum">6</span> SQL Statements</h1>
<p>This chapter provides information about the SQL statements available in TimesTen.</p>
<p><a id="sthref1039"></a><a id="sthref1040"></a>SQL statements are generally considered to be either Data Manipulation Language (DML) statements or Data Definition Language (DDL) statements.</p>
<p>DML statements modify database objects. <code dir="ltr"><a href="#g1513888">INSERT</a></code>, <code dir="ltr"><a href="#i994046">UPDATE</a></code> and <code dir="ltr"><a href="#BABBJCCI">DELETE</a></code> are examples of DML statements.</p>
<p>DDL statements modify the database schema. <code dir="ltr"><a href="#i1211666">CREATE TABLE</a></code> and <code dir="ltr"><a href="#g1513813">DROP TABLE</a></code> are examples of DDL statements.</p>
<a id="CACCGCFC"></a>
<div id="TTSQL278" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref1041"></a>Comments within SQL statements</h2>
<p>A comment can appear between keywords, parameters, or punctuation marks in a statement. You can include a comment in a statement in two ways:</p>
<ul>
<li>
<p>Begin the comment with a slash and an asterisk (<code dir="ltr">/*</code>). Proceed with the text of the comment. The text can span multiple lines. End the comment with an asterisk and a slash. (<code dir="ltr">*/</code>). You do not need to separate the opening and terminating characters from the text by a space or line break.</p>
</li>
<li>
<p>Begin the comment with two hyphens (<code dir="ltr">--</code>). Proceed with the text of the comment. The text cannot extend to a new line. End the comment with a line break.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="BABJFIBC"></a>
<div id="TTSQL528" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Statement level <a id="sthref1042"></a>optimizer hints</h2>
<p>Statement level optimizer hints are comments in a SQL statement that pass instructions to the TimesTen query optimizer. The optimizer considers these hints when choosing the best execution plan for your query.</p>
<p>Topics include:</p>
<ul>
<li>
<p><a href="#BABDJBCJ">SQL Syntax</a></p>
</li>
<li>
<p><a href="#BABGEGHJ">Parameters</a></p>
</li>
<li>
<p><a href="#BABBIJEI">Description</a></p>
</li>
<li>
<p><a href="#CIACJBJC">SQL statements that support statement level optimizer hints</a></p>
</li>
<li>
<p><a href="#BABDDDHE">Understanding hints</a></p>
</li>
<li>
<p><a href="#BABHAJDD">Examples</a></p>
</li>
</ul>
<p>Also see <a class="olink TTOPR540" href="../TTOPR/query.htm#TTOPR540">&#34;Use optimizer hints to modify the execution plan&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span> for information about statement level and transaction level optimizer hints.</p>
<a id="BABDJBCJ"></a>
<div id="TTSQL529" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref1043"></a>SQL Syntax</h3>
<p>A SQL statement can have one comment that includes one or more statement level optimizer hints. SQL statements that support statement level optimizer hints are <code dir="ltr">DELETE</code>, <code dir="ltr">INSERT</code>, <code dir="ltr">MERGE</code>, <code dir="ltr">SELECT</code>, <code dir="ltr">UPDATE</code>, <code dir="ltr">INSERT...SELECT</code>, and <code dir="ltr">CREATE</code> <code dir="ltr">TABLE...AS SELECT</code>. The hint must follow the <code dir="ltr">DELETE</code>, <code dir="ltr">INSERT</code>, <code dir="ltr">MERGE</code>, <code dir="ltr">SELECT</code>, or <code dir="ltr">UPDATE</code> keyword. (A <code dir="ltr">DELETE</code>, <code dir="ltr">INSERT</code>, <code dir="ltr">MERGE</code>, <code dir="ltr">SELECT</code>, or <code dir="ltr">UPDATE</code> keyword is also known as a <code dir="ltr">SQL</code> <code dir="ltr">VERB</code>.) <a href="#BABGIDAG">Table 6-1, &#34;Placement of statement level hints in SQL statements&#34;</a> shows the proper placement of hints in a SQL statement.</p>
<p>You embed statement level optimizer hints in comment syntax. TimesTen supports hints in comments that span one line and in comments that span more than one line. If your comment that contains the hint spans one or more lines, use the comment syntax, <code dir="ltr">/*+...*/</code>. If your comment that contains the hint spans one line, use the comment syntax, <code dir="ltr">--+</code>.</p>
<p>Syntax:</p>
<pre dir="ltr"><span class="italic">SQL</span> <span class="italic">VERB</span> {/*+ [<span class="italic">CommentText</span>] <span class="italic">hint</span> [{<span class="italic">hint</span>|<span class="italic">CommentText</span>} [...]] */ |
          --+ [<span class="italic">CommentText</span>] <span class="italic">hint</span> [{<span class="italic">hint</span>|<span class="italic">CommentText</span>} [...]] }
<span class="italic">hint</span>::= <span class="italic">FlagHint</span> | <span class="italic">JoinOrderHint</span> | <span class="italic">IndexHint</span>
<span class="italic">FlagHint</span>::= <span class="italic">FlagName</span> (0|1)
<span class="italic">JoinOrderHint</span>::= TT_JoinOrder (<span class="italic">CorrelationName CorrelationName </span>[...])
<span class="italic">IndexHint</span>::= TT_Index (<span class="italic">CorrelationName</span>,<span class="italic">IndexName</span>,{0|1} [;...])
<span class="italic">FlagName</span>::= TT_BranchAndBound|TT_DynamicLoadEnable|TT_DynamicLoadErrorMode|
            TT_FirstRow|TT_ForceCompile|TT_GenPlan|TT_GlobalLocalJoin|
            TT_GlobalProcessing|TT_HashGb|TT_HashScan|TT_IndexedOr|TT_MergeJoin|
            TT_NestedLoop|TT_NoRemRowIdOpt|TT_Range|TT_Rowid|TT_RowLock|
            TT_ShowJoinOrder|TT_TblLock|TT_TblScan|TT_TmpHash|TT_TmpRange|
            TT_TmpTable|TT_UseBoyerMooreStringSearch
</pre></div>
<!-- class="sect2" -->
<a id="BABGEGHJ"></a>
<div id="TTSQL527" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Parameters</h3>
<div class="inftblhruleinformal">
<table class="cellalignment6330" summary="Parameter definitions for statement level optimizer hints" dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t2">Parameter</th>
<th class="cellalignment6331" id="r1c2-t2">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t2" headers="r1c1-t2"><code dir="ltr"><span class="codeinlineitalic">SQL</span></code> <code dir="ltr"><span class="codeinlineitalic">VERB</span></code></td>
<td class="cellalignment6332" headers="r2c1-t2 r1c2-t2"><code dir="ltr"><span class="codeinlineitalic">SQL</span></code> <code dir="ltr"><span class="codeinlineitalic">VERB</span></code> refers to one of the keywords: <code dir="ltr">DELETE</code>, <code dir="ltr">INSERT</code>, <code dir="ltr">MERGE</code>, <code dir="ltr">SELECT</code>, or <code dir="ltr">UPDATE</code>. You embed a statement level optimizer hint in comment syntax and if the comment syntax contains a statement level optimizer hint, the comment syntax must follow the <code dir="ltr"><span class="codeinlineitalic">SQL</span></code> <code dir="ltr"><span class="codeinlineitalic">VERB</span></code>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t2" headers="r1c1-t2"><code dir="ltr">/*+</code> <code dir="ltr"><span class="codeinlineitalic">hint</span></code> <code dir="ltr">*/</code></td>
<td class="cellalignment6332" headers="r3c1-t2 r1c2-t2">One or more hints that are embedded in comment syntax. The comment syntax can span one or more lines. The plus sign (<code dir="ltr">+</code>) denotes the start of a statement level optimizer hint.
<p>Make sure there is no space between the star (<code dir="ltr">*</code>) and the plus sign (<code dir="ltr">+</code>).</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t2" headers="r1c1-t2"><code dir="ltr">--+</code> <code dir="ltr"><span class="codeinlineitalic">hint</span></code></td>
<td class="cellalignment6332" headers="r4c1-t2 r1c2-t2">One or more hints that are embedded in comment syntax. The comment syntax can only span one line. The plus sign (<code dir="ltr">+</code>) denotes the start of a statement level optimizer hint.
<p>Make sure there is no space between the dash (<code dir="ltr">-</code>) and the plus sign (<code dir="ltr">+</code>).</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t2" headers="r1c1-t2"><code dir="ltr"><span class="codeinlineitalic">hint</span></code></td>
<td class="cellalignment6332" headers="r5c1-t2 r1c2-t2">A statement level optimizer hint. A SQL statement supports one or more statement level optimizer hints as one comment string. So for one SQL statement, you can specify one comment that contains one or more hints and that comment must follow a <code dir="ltr">DELETE</code>, <code dir="ltr">INSERT</code>, <code dir="ltr">MERGE</code>, <code dir="ltr">SELECT</code>, or <code dir="ltr">UPDATE</code> keyword.
<p>If you specify more than one hint within the comment, make sure there is a space between the hints.</p>
<p>Statement level optimizer hints are scoped to a SQL statement and have per query semantics.</p>
<p>T<a id="sthref1044"></a><a id="sthref1045"></a>he name and type of statement level optimizer hints map to the transaction level optimizer hints. Transaction level optimizer hints are invoked by calling the built-in procedures <code dir="ltr">ttOptSetFlag</code>, <code dir="ltr">ttOptSetOrder</code>, or <code dir="ltr">ttOptUseIndex</code>.</p>
<p>Transaction level hints are scoped to the transaction and have transaction semantics. You must set autocommit to 0 and the transaction level optimizer hint is in effect for the duration of your transaction.</p>
<p>For more information, see &#34;<a class="olink TTREF271" href="../TTREF/proced.htm#TTREF271">ttOptSetFlag</a>,&#34; &#34;<a class="olink TTREF274" href="../TTREF/proced.htm#TTREF274">ttOptSetOrder</a>&#34; or &#34;<a class="olink TTREF278" href="../TTREF/proced.htm#TTREF278">ttOptUseIndex</a>&#34; in the <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t2" headers="r1c1-t2"><code dir="ltr"><span class="codeinlineitalic">CommentText</span></code></td>
<td class="cellalignment6332" headers="r6c1-t2 r1c2-t2">Text within a comment string. You can use both statement level optimizer hints and commenting text within one comment. Make sure to include a space between the hint and the commenting text.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r7c1-t2" headers="r1c1-t2"><code dir="ltr"><span class="codeinlineitalic">FlagHint</span></code></td>
<td class="cellalignment6332" headers="r7c1-t2 r1c2-t2"><code dir="ltr"><span class="codeinlineitalic">FlagHint</span></code> refers to statement level optimizer flags that you enable or disable to influence the execution plan of the TimesTen query optimizer. These flags map to the flags used in the <code dir="ltr">ttOptSetFlag</code> built-in procedure.
<p>Sta<a id="sthref1046"></a>tement level optimizer hint flags are in effect for the statement only whereas transaction level optimizer hint flags are in effect for the duration of your transaction.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r8c1-t2" headers="r1c1-t2"><code dir="ltr"><span class="codeinlineitalic">FlagName</span></code> <code dir="ltr">( 0|1</code>)</td>
<td class="cellalignment6332" headers="r8c1-t2 r1c2-t2"><code dir="ltr"><span class="codeinlineitalic">FlagName</span></code> re<a id="sthref1047"></a>fers to the name of the statement level optimizer hint flag.
<p>Specify either 0 or 1 for the value of the flag. A value of 1 enables the flag. A value of 0 disables the flag. Enclose the value in parentheses, ().</p>
<p>For example, to set the statement level nested loop flag in <code dir="ltr">ttIsql</code>:</p>
<pre dir="ltr">Command&gt; SELECT /*+ TT_NestedLoop (1)
       &gt; */ ...
</pre>
<p>To se<a id="sthref1048"></a>t the transaction level nested loop flag in <code dir="ltr">ttIsql</code>:</p>
<pre dir="ltr">Command&gt; AUTOCOMMIT OFF;
Command&gt; CALL 
       &gt; ttOptSetFlag(&#39;NestedLoop&#39;,1);
</pre></td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r9c1-t2" headers="r1c1-t2"><code dir="ltr">TT_BranchAndBound</code></td>
<td class="cellalignment6332" headers="r9c1-t2 r1c2-t2">Flag that maps to the flag <code dir="ltr">BranchAndBound</code> in the <code dir="ltr">ttOptSetFlag</code> built-in procedure.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r10c1-t2" headers="r1c1-t2"><code dir="ltr">TT_DynamicLoadEnable</code></td>
<td class="cellalignment6332" headers="r10c1-t2 r1c2-t2">Flag that maps to the flag <code dir="ltr">DynamicLoadEnable</code> in the <code dir="ltr">ttOptSetFlag</code> built-in procedure.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r11c1-t2" headers="r1c1-t2"><code dir="ltr">TT_DynamicLoadErrorMode</code></td>
<td class="cellalignment6332" headers="r11c1-t2 r1c2-t2">Flag that maps to the flag <code dir="ltr">DynamicLoadErrorMode</code> in the <code dir="ltr">ttOptSetFlag</code> built-in procedure.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r12c1-t2" headers="r1c1-t2"><code dir="ltr">TT_FirstRow</code></td>
<td class="cellalignment6332" headers="r12c1-t2 r1c2-t2">Flag that maps to the flag <code dir="ltr">FirstRow</code> in the <code dir="ltr">ttOptSetFlag</code> built-in procedure.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r13c1-t2" headers="r1c1-t2"><code dir="ltr">TT_ForceCompile</code></td>
<td class="cellalignment6332" headers="r13c1-t2 r1c2-t2">Flag that maps to the flag <code dir="ltr">ForceCompile</code> in the <code dir="ltr">ttOptSetFlag</code> built-in procedure.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r14c1-t2" headers="r1c1-t2"><code dir="ltr">TT_GenPlan</code></td>
<td class="cellalignment6332" headers="r14c1-t2 r1c2-t2">Flag that maps to the flag <code dir="ltr">GenPlan</code> in the <code dir="ltr">ttOptSetFlag</code> built-in procedure.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r15c1-t2" headers="r1c1-t2"><code dir="ltr">TT_GlobalLocalJoin</code></td>
<td class="cellalignment6332" headers="r15c1-t2 r1c2-t2">Flag that maps to the flag <code dir="ltr">GlobalLocalJoin</code> in the <code dir="ltr">ttOptSetFlag</code> built-in procedure.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r16c1-t2" headers="r1c1-t2"><code dir="ltr">TT_GlobalProcessing</code></td>
<td class="cellalignment6332" headers="r16c1-t2 r1c2-t2">Flag that maps to the flag <code dir="ltr">GlobalProcessing</code> in the <code dir="ltr">ttOptSetFlag</code> built-in procedure.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r17c1-t2" headers="r1c1-t2"><code dir="ltr">TT_HashGb</code></td>
<td class="cellalignment6332" headers="r17c1-t2 r1c2-t2">Flag that maps to the flag <code dir="ltr">HashGb</code> in the <code dir="ltr">ttOptSetFlag</code> built-in procedure.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r18c1-t2" headers="r1c1-t2"><code dir="ltr">TT_HashScan</code></td>
<td class="cellalignment6332" headers="r18c1-t2 r1c2-t2">Flag that maps to the flag <code dir="ltr">Hash</code> in the <code dir="ltr">ttOptSetFlag</code> built-in procedure.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r19c1-t2" headers="r1c1-t2"><code dir="ltr">TT_IndexedOr</code></td>
<td class="cellalignment6332" headers="r19c1-t2 r1c2-t2">Flag that maps to the flag <code dir="ltr">IndexedOr</code> in the <code dir="ltr">ttOptSetFlag</code> built-in procedure.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r20c1-t2" headers="r1c1-t2"><code dir="ltr">TT_MergeJoin</code></td>
<td class="cellalignment6332" headers="r20c1-t2 r1c2-t2">Flag that maps to the flag <code dir="ltr">MergeJoin</code> in the <code dir="ltr">ttOptSetFlag</code> built-in procedure.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r21c1-t2" headers="r1c1-t2"><code dir="ltr">TT_NestedLoop</code></td>
<td class="cellalignment6332" headers="r21c1-t2 r1c2-t2">Flag that maps to the flag <code dir="ltr">NestedLoop</code> in the <code dir="ltr">ttOptSetFlag</code> built-in procedure.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r22c1-t2" headers="r1c1-t2"><code dir="ltr">TT_NoRemRowIdOpt</code></td>
<td class="cellalignment6332" headers="r22c1-t2 r1c2-t2">Flag that maps to the flag <code dir="ltr">NoRemRowIdOpt</code> in the <code dir="ltr">ttOptSetFlag</code> built-in procedure.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r23c1-t2" headers="r1c1-t2"><code dir="ltr">TT_Range</code></td>
<td class="cellalignment6332" headers="r23c1-t2 r1c2-t2">Flag that maps to the flag <code dir="ltr">Range</code> in the <code dir="ltr">ttOptSetFlag</code> built-in procedure.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r24c1-t2" headers="r1c1-t2"><code dir="ltr">TT_Rowid</code></td>
<td class="cellalignment6332" headers="r24c1-t2 r1c2-t2">Flag that maps to the flag <code dir="ltr">Rowid</code> in the <code dir="ltr">ttOptSetFlag</code> built-in procedure.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r25c1-t2" headers="r1c1-t2"><code dir="ltr">TT_RowLock</code></td>
<td class="cellalignment6332" headers="r25c1-t2 r1c2-t2">Flag that maps to the flag <code dir="ltr">Rowlock</code> in the <code dir="ltr">ttOptSetFlag</code> built-in procedure.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r26c1-t2" headers="r1c1-t2"><code dir="ltr">TT_ShowJoinOrder</code></td>
<td class="cellalignment6332" headers="r26c1-t2 r1c2-t2">Flag that maps to the flag <code dir="ltr">ShowJoinOrder</code> in the <code dir="ltr">ttOptSetFlag</code> built-in procedure.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r27c1-t2" headers="r1c1-t2"><code dir="ltr">TT_TblLock</code></td>
<td class="cellalignment6332" headers="r27c1-t2 r1c2-t2">Flag that maps to the flag <code dir="ltr">TblLock</code> in the <code dir="ltr">ttOptSetFlag</code> built-in procedure.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r28c1-t2" headers="r1c1-t2"><code dir="ltr">TT_TblScan</code></td>
<td class="cellalignment6332" headers="r28c1-t2 r1c2-t2">Flag that maps to the flag <code dir="ltr">Scan</code> in the <code dir="ltr">ttOptSetFlag</code> built-in procedure.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r29c1-t2" headers="r1c1-t2"><code dir="ltr">TT_TmpHash</code></td>
<td class="cellalignment6332" headers="r29c1-t2 r1c2-t2">Flag that maps to the flag <code dir="ltr">TmpHash</code> in the <code dir="ltr">ttOptSetFlag</code> built-in procedure.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r30c1-t2" headers="r1c1-t2"><code dir="ltr">TT_TmpRange</code></td>
<td class="cellalignment6332" headers="r30c1-t2 r1c2-t2">Flag that maps to the flag <code dir="ltr">TmpRange</code> in the <code dir="ltr">ttOptSetFlag</code> built-in procedure.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r31c1-t2" headers="r1c1-t2"><code dir="ltr">TT_TmpTable</code></td>
<td class="cellalignment6332" headers="r31c1-t2 r1c2-t2">Flag that maps to the flag <code dir="ltr">TmpTable</code> in the <code dir="ltr">ttOptSetFlag</code> built-in procedure.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r32c1-t2" headers="r1c1-t2"><code dir="ltr">TT_UseBoyerMooreStringSearch</code></td>
<td class="cellalignment6332" headers="r32c1-t2 r1c2-t2">Flag that maps to the flag <code dir="ltr">UseBoyerMooreStringSearch</code> in the <code dir="ltr">ttOptSetFlag</code> built-in procedure.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r33c1-t2" headers="r1c1-t2"><code dir="ltr"><span class="codeinlineitalic">JoinOrderHint</span></code>::= <code dir="ltr">TT_JoinOrder</code> <code dir="ltr">(</code> <code dir="ltr"><span class="codeinlineitalic">CorrelationName</span></code> <code dir="ltr"><span class="codeinlineitalic">CorrelationName</span></code> [...] <code dir="ltr">)</code></td>
<td class="cellalignment6332" headers="r33c1-t2 r1c2-t2"><code dir="ltr"><span class="codeinlineitalic">JoinOrderHint</span></code> refers to the syntax for the <code dir="ltr">TT_JoinOrder</code> statement level optimizer hint. The <code dir="ltr">TT_JoinOrder</code> hint instructs the optimizer to join your tables in a specified order. The join order is in effect for the statement only.
<p>Specify <code dir="ltr">TT_JoinOrder</code> and two or more correlation names. Make sure to enclose the correlation names in parentheses.</p>
<p><code dir="ltr"><span class="codeinlineitalic">CorrelationName</span></code> refers to the alias of your table specified in the query or subquery of your SQL statement. Make sure to use the correlation name rather than the actual table name when using this hint.</p>
<p>For example, if you are joining the <code dir="ltr">employees</code> and <code dir="ltr">departments</code> tables and you specify the <code dir="ltr">emps</code> correlation name for the <code dir="ltr">employees</code> table and the <code dir="ltr">depts</code> correlation name for the <code dir="ltr">departments</code> table, then to specify the <code dir="ltr">TT_JoinOrder</code> hint in <code dir="ltr">ttIsql</code>:</p>
<pre dir="ltr">Command&gt; SELECT /*+ TT_JoinOrder
       &gt; (EMPS DEPTS)*/...
</pre>
<p>If your <code dir="ltr">TT_JoinOrder</code> hint contains syntax errors, TimesTen ignores the hint. If your <code dir="ltr">TT_JoinOrder</code> hint does not contain a closing parenthesis, then the remainder of the comment string is ignored. So if you specify additional statement level optimizer hints after the <code dir="ltr">TT_JoinOrder</code> hint, and the <code dir="ltr">TT_JoinOrder</code> hint is missing the closing parenthesis, these additional statement level optimizer hints are ignored.</p>
<p>You can execute the built-in procedure, <code dir="ltr">ttOptSetOrder</code>, to specify a join order for the duration of your transaction. The <code dir="ltr">TT_JoinOrder</code> statement level optimizer hint is in effect for the statement only.</p>
<p>For more information on <code dir="ltr">ttOptSetOrder</code>, see &#34;<a class="olink TTREF274" href="../TTREF/proced.htm#TTREF274">ttOptSetOrder</a>&#34; in the <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r34c1-t2" headers="r1c1-t2"><code dir="ltr"><span class="codeinlineitalic">IndexHint</span></code>::= <code dir="ltr">TT_INDEX</code> (<code dir="ltr"><span class="codeinlineitalic">CorrelationName</span></code> <code dir="ltr"><span class="codeinlineitalic">IndexName</span></code> {<code dir="ltr">0</code>|<code dir="ltr">1</code>} [<code dir="ltr">;</code>...] <code dir="ltr">)</code></td>
<td class="cellalignment6332" headers="r34c1-t2 r1c2-t2"><code dir="ltr"><span class="codeinlineitalic">IndexHint</span></code> refers to the syntax for the <code dir="ltr">TT_INDEX</code> statement level optimizer hint. Use the <code dir="ltr">TT_INDEX</code> hint to direct the optimizer to use or not use an index for your table. The index hint is in effect for the statement only.
<p><code dir="ltr"><span class="codeinlineitalic">CorrelationName</span></code> refers to the alias of your table specified in the query or subquery of your SQL statement. Make sure to use the correlation name rather than the actual table name.</p>
<p><code dir="ltr"><span class="codeinlineitalic">IndexName</span></code> refers to the index you want the optimizer to consider or not consider for the table.</p>
<p>Specify a value of 0 to ask the optimizer not to consider the index. Specify a value of 1 to ask the optimizer to consider the index.</p>
<p>For example, To direct the optimizer to use the index <code dir="ltr">emp_name_ix</code> for a query on the <code dir="ltr">employees</code> table and you specify the correlation name, <code dir="ltr">e</code>, for the <code dir="ltr">employees</code> table, then to specify the <code dir="ltr">TT_INDEX</code> hint in <code dir="ltr">ttIsql</code>:</p>
<pre dir="ltr">Command&gt; SELECT /*+ TT_INDEX
       &gt; (E,EMP_NAME_IX,1) */ ...
</pre>
<p>Use a semicolon (;) to include more than one <code dir="ltr"><span class="codeinlineitalic">CorrelationName</span></code>, <code dir="ltr"><span class="codeinlineitalic">IndexName</span></code>, {<code dir="ltr">0</code>|<code dir="ltr">1</code>} for the <code dir="ltr">TT_INDEX</code> hint. You must specify each of the parameters: the <code dir="ltr"><span class="codeinlineitalic">CorrelationName</span></code>, the <code dir="ltr"><span class="codeinlineitalic">IndexName</span></code>, and either 0 or 1.</p>
<p>If your <code dir="ltr">TT_Index</code> hint contains syntax errors, TimesTen ignores the hint. If your <code dir="ltr">TT_Index</code> hint does not contain a closing parenthesis, then the remainder of the comment string is ignored. So if you specify additional statement level optimizer hints after the <code dir="ltr">TT_Index</code> hint and the <code dir="ltr">TT_Index</code> hint is missing the closing parenthesis, these additional statement level optimizer hints are ignored.</p>
<p>You can execute the built-in procedure, <code dir="ltr">ttOptUseIndex</code>, to specify an index hint for the duration of your transaction. The <code dir="ltr">TT_INDEX</code> statement level optimizer hint is in effect for the statement only.</p>
<p>For more information on <code dir="ltr">ttOptUseIndex</code>, see &#34;<a class="olink TTREF278" href="../TTREF/proced.htm#TTREF278">ttOptUseIndex</a>&#34; in the <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
For descriptions of flags discussed in the preceding table, see &#34;<a class="olink TTREF271" href="../TTREF/proced.htm#TTREF271">ttOptSetFlag</a>&#34; in the <span class="italic">Oracle TimesTen In-Memory Database Reference</span></div>
</div>
<!-- class="sect2" -->
<a id="BABBIJEI"></a>
<div id="TTSQL530" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref1049"></a>Description</h3>
<ul>
<li>
<p>Embed statement level optimizer hints in comment syntax. Begin the comment with either <code dir="ltr">/*</code> or <code dir="ltr">--</code>. Follow the beginning comment syntax with a plus sign (<code dir="ltr">+</code>). The plus sign (<code dir="ltr">+</code>) signals TimesTen to interpret the comment as a list of hints. The plus sign (+) must follow immediately after the comment delimiter. (For example, after <code dir="ltr">/*</code> or after <code dir="ltr">--</code>). No space is permitted between the comment delimiter and the plus sign (+).</p>
<p>In the following example, there is a space between the star (*) and the plus sign (+), so the hint is ignored:</p>
<pre dir="ltr">Command&gt; SELECT /* + TT_TblScan (1) This hint is ignored because there is a
       &gt; space between the star (*) and the plus (+) sign. */ ...
</pre></li>
<li>
<p>A <code dir="ltr"><span class="codeinlineitalic">hint</span></code> is one of the statement level optimizer hints supported by TimesTen. There can be a space between the plus sign (+) and the hint. If the comment contains multiple hints, separate the hints by at least one space. For example, to specify two hints on one line:</p>
<pre dir="ltr">Command&gt; SELECT --+ TT_MergeJoin (0) TT_NestedLoop (1) 
       &gt; ...
</pre></li>
<li>
<p>You can intersperse commenting text with hints in a comment. For example,</p>
<pre dir="ltr">Command&gt; SELECT /*+ TT_HashScan (1) This demonstrates a hint followed by a
       &gt; comment string. */ ...
</pre></li>
<li>
<p>TimesTen ignores hints and does not return an error if:</p>
<ul>
<li>
<p>Your hint does not follow the <code dir="ltr">DELETE</code>, <code dir="ltr">INSERT</code>, <code dir="ltr">MERGE</code>, <code dir="ltr">SELECT</code> or <code dir="ltr">UPDATE</code> keyword.</p>
</li>
<li>
<p>Your hint contains misspellings or syntax errors. If you have hints that are within the same comment and some hints are correct syntactically and some hints are incorrect syntactically, TimesTen ignores the incorrect hints and accepts the correct hints.</p>
</li>
<li>
<p>You use either the <code dir="ltr">TT_JoinOrder</code> or <code dir="ltr">TT_Index</code> hint and you do not supply a closing parenthesis, the remainder of the hint string is ignored.</p>
</li>
</ul>
</li>
<li>
<p>For hints that conflict with each other, TimesTen uses the rightmost hint in the comment. For example, if the comment string is <code dir="ltr">/*+TT_TblScan (0)...TT_TblScan (1) */</code>, the rightmost hint, <code dir="ltr">TT_TblScan(1)</code>, is used.</p>
</li>
<li>
<p>Sta<a id="sthref1050"></a>tement level optimizer hints override conflicting transaction level optimizer hints. So if you specify a transaction level optimizer hint that conflicts with a statement level optimizer hint, the statement level optimizer hint overrides the conflicting transaction level optimizer hint. For example, if you call <code dir="ltr">ttOptSetFlag</code>, and enable the <code dir="ltr">Range</code> flag and then you issue a SQL query and disable the statement level optimizer flag, <code dir="ltr">TT_Range</code>, TimesTen disables the range flag for the query. After the query is executed, the original range flag setting that was in place in the transaction before the query was executed remains in effect for the duration of the transaction. For more information, see <a href="#BABIFAJG">Example 6-1, &#34;Using statement level optimizer hints for a SELECT query&#34;</a>.</p>
</li>
<li>
<p>Do not use statement level optimizer hints in a subquery.</p>
</li>
<li>
<p>The TimesTen query optimizer does not recognize statement level optimizer hints for passthrough statements. TimesTen passes the SQL text for passthrough statements to the Oracle database and the SQL text is processed according to the SQL rules of the Oracle database.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CIACJBJC"></a>
<div id="TTSQL521" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref1051"></a>SQL statements that support statement level optimizer hints</h3>
<p>You can specify statement level optimizer hints in <code dir="ltr">DELETE</code>, <code dir="ltr">INSERT</code>, <code dir="ltr">MERGE</code>, <code dir="ltr">SELECT</code>, and <code dir="ltr">UPDATE</code> statements. You can also specify statement level optimizer hints in the <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code><code dir="ltr">...AS</code> <code dir="ltr">SELECT</code> statement and in the <code dir="ltr">INSERT... SELECT</code> statement. You must specify the hint within comment syntax and the comment syntax must immediately follow the <code dir="ltr">SQL</code> <code dir="ltr">VERB</code>. (For example, <code dir="ltr">DELETE</code> <code dir="ltr">/*+</code> <code dir="ltr"><span class="codeinlineitalic">hint</span></code> <code dir="ltr">*</code><code dir="ltr">/...</code>). <a href="#BABGIDAG">Table 6-1</a> shows the correct placement of the statement level hint.</p>
<div id="TTSQL526" class="tblhruleformal">
<p class="titleintable"><a id="sthref1052"></a><a id="BABGIDAG"></a>Table 6-1 Placement of statement level hints in SQL statements</p>
<table class="cellalignment6330" title="Placement of statement level hints in SQL statements" summary="This table shows the placement of the statement level optimizer hint in the SQL statement." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t4">SQL statement</th>
<th class="cellalignment6331" id="r1c2-t4">Placement of hint</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t4" headers="r1c1-t4">
<p><code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code><code dir="ltr">... AS SELECT</code></p>
</td>
<td class="cellalignment6332" headers="r2c1-t4 r1c2-t4">
<p><code dir="ltr">CREATE TABLE...AS SELECT</code> [<code dir="ltr"><span class="codeinlineitalic">hint</span></code>]...</p>
<p>Do not use transaction level hints with the <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code><code dir="ltr">...AS SELECT</code> statement.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t4" headers="r1c1-t4">
<p><code dir="ltr">DELETE</code></p>
</td>
<td class="cellalignment6332" headers="r3c1-t4 r1c2-t4">
<p><code dir="ltr">DELETE</code> [<code dir="ltr"><span class="codeinlineitalic">hint</span></code>] ...</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t4" headers="r1c1-t4">
<p><code dir="ltr">INSERT</code></p>
</td>
<td class="cellalignment6332" headers="r4c1-t4 r1c2-t4">
<p><code dir="ltr">INSERT</code> [<code dir="ltr"><span class="codeinlineitalic">hint</span></code>] ...</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t4" headers="r1c1-t4">
<p><code dir="ltr">INSERT...SELECT</code></p>
</td>
<td class="cellalignment6332" headers="r5c1-t4 r1c2-t4">
<p><code dir="ltr">INSERT...SELECT</code> [<code dir="ltr"><span class="codeinlineitalic">hint</span></code>]...</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t4" headers="r1c1-t4">
<p><code dir="ltr">MERGE</code></p>
</td>
<td class="cellalignment6332" headers="r6c1-t4 r1c2-t4">
<p><code dir="ltr">MERGE</code> [<code dir="ltr"><span class="codeinlineitalic">hint</span></code>]...</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r7c1-t4" headers="r1c1-t4">
<p><code dir="ltr">SELECT</code></p>
</td>
<td class="cellalignment6332" headers="r7c1-t4 r1c2-t4">
<p><code dir="ltr">SELECT</code> [<code dir="ltr"><span class="codeinlineitalic">hint</span></code>]...</p>
<p>Do not specify a hint in a subquery.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r8c1-t4" headers="r1c1-t4">
<p><code dir="ltr">SELECT...{UNION|MINUS| INTERSECT} SELECT...</code></p>
</td>
<td class="cellalignment6332" headers="r8c1-t4 r1c2-t4">
<p><code dir="ltr">SELECT</code> [<code dir="ltr"><span class="codeinlineitalic">hint</span></code>] <code dir="ltr">{UNION|MINUS|INTERSECT}</code> <code dir="ltr">SELECT</code>...</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r9c1-t4" headers="r1c1-t4">
<p><code dir="ltr">UPDATE</code></p>
</td>
<td class="cellalignment6332" headers="r9c1-t4 r1c2-t4">
<p><code dir="ltr">UPDATE</code> [<code dir="ltr"><span class="codeinlineitalic">hint</span></code>]...</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" --></div>
<!-- class="sect2" -->
<a id="BABDDDHE"></a>
<div id="TTSQL531" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref1053"></a>Understanding hints</h3>
<p>Use optimizer hints to influence the TimesTen query optimizer in determining the choice of the execution plan for your query.</p>
<p>To view transaction level optimizer hints, execute the built-in procedure, <code dir="ltr">ttOptSetFlag</code>. For more information on the built-in procedure, <code dir="ltr">ttOptGetFlag</code>, see &#34;<a class="olink TTREF266" href="../TTREF/proced.htm#TTREF266">ttOptGetFlag</a>&#34; in <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</p>
<p><a href="#BABBCJDA">Table 6-2, &#34;Differences between statement level and transaction level optimizer hints&#34;</a> summarizes the differences between statement level optimizer hints and transaction level optimizer hints. Before using hints, confirm whether you need to update statistics, because the TimesTen optimizer is a cost based optimizer and uses statistics and indexes to generate a query plan. For more information on the query optimizer, see &#34;<a class="olink TTOPR512" href="../TTOPR/query.htm#TTOPR512">The TimesTen Query Optimizer</a>&#34; in the <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span>.</p>
<div id="TTSQL532" class="tblhruleformal">
<p class="titleintable"><a id="sthref1054"></a><a id="BABBCJDA"></a>Table 6-2 Differences between statement level and transaction level optimizer hints</p>
<table class="cellalignment6330" title="Differences between statement level and transaction level optimizer hints" summary="This table summarizes the differences and similarities between statement level and transaction level optimizer hints." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t5">Statement level optimizer hints</th>
<th class="cellalignment6331" id="r1c2-t5">Transaction level optimizer hints</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t5" headers="r1c1-t5">
<p>Specify within comment syntax and after a <code dir="ltr">SQL</code> <code dir="ltr">VERB</code> in a SQL statement.</p>
</td>
<td class="cellalignment6332" headers="r2c1-t5 r1c2-t5">
<p>Specify by invoking the built-in procedures, <code dir="ltr">ttOptSetFlag</code>, <code dir="ltr">ttOptSetOrder</code>, <code dir="ltr">ttOptUseIndex</code>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t5" headers="r1c1-t5">
<p>Hint is scoped to SQL statement. This means you want to influence the optimizer at the statement level.</p>
</td>
<td class="cellalignment6332" headers="r3c1-t5 r1c2-t5">
<p>Hint is scoped to the transaction. This means you want to influence the optimizer at the transaction level.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t5" headers="r1c1-t5">
<p>Autocommit setting has no effect. This is because the hint is scoped to the SQL statement. After the statement is executed, the hint has no effect on future statements or queries.</p>
</td>
<td class="cellalignment6332" headers="r4c1-t5 r1c2-t5">
<p>Autocommit has an effect. Set autocommit to off. If you do not set autocommit to off, then the hint has no effect because the statement is executed in its own transaction. When you set autocommit to off, the hint is in effect for the duration of the transaction (until you issue a commit or rollback).</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t5" headers="r1c1-t5">
<p>Optimizer uses the hint for the statement only.</p>
</td>
<td class="cellalignment6332" headers="r5c1-t5 r1c2-t5">
<p>Optimizer uses the hint for all statements in the transaction.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t5" headers="r1c1-t5">
<p>Hint is supported in <code dir="ltr">CREATE TABLE...AS</code> <code dir="ltr">SELECT</code>.</p>
</td>
<td class="cellalignment6332" headers="r6c1-t5 r1c2-t5">
<p>Hint is not supported in <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code><code dir="ltr">...AS</code> <code dir="ltr">SELECT</code>. This is because the statement is a DDL statement and TimesTen implicitly commits DDL statements.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r7c1-t5" headers="r1c1-t5">
<p>If you specify the hint in a transaction in which transaction level optimizer hints are specified, the statement level optimizer hint overrides the transaction level hint for the SQL statement. After TimesTen executes the SQL statement, the original transaction level optimizer hint remains in effect for the duration of the transaction.</p>
</td>
<td class="cellalignment6332" headers="r7c1-t5 r1c2-t5">
<p>Hints are in effect for the duration of the transaction. If you specify a statement level optimizer hint in a SQL statement, the statement level optimizer hint is in effect for the statement and the optimizer does not use the transaction level hint for the statement. After TimesTen executes the transaction, the original transaction level optimizer hint remains in effect for the duration of the transaction.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r8c1-t5" headers="r1c1-t5">
<p>Use statement level optimizer hints if you want to influence the optimizer for a specific statement. This means you have to specify a hint for each statement that you want to influence the optimizer. This could result in multiple alterations to your statements.</p>
</td>
<td class="cellalignment6332" headers="r8c1-t5 r1c2-t5">
<p>Use transaction level optimizer hints to influence the optimizer for all statements in a transaction. This means you do not have to specify a hint for each statement. The hint is in effect for the duration of the transaction so the hint applies to all statements in the transaction.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="tblhruleformal" --></div>
<!-- class="sect2" -->
<a id="BABHAJDD"></a>
<div id="TTSQL533" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref1055"></a><a id="sthref1056"></a>Examples</h3>
<p>The following examples illustrate usages of statement level and transaction level optimizer hints. The TimesTen optimizer is a cost based query optimizer and generates what it thinks is the most optimal execution plan for your statement. The plan is based on the indexes that exist on the referenced tables as well as the column and table statistics that are available. When you recompute statistics or change indexes, the TimesTen optimizer may change the execution plan based on the recomputed statistics and index changes. Because the execution plan may vary, these examples are included for demonstration purposes only. Examples include:</p>
<ul>
<li>
<p><a href="#BABIFAJG">Example 6-1, &#34;Using statement level optimizer hints for a SELECT query&#34;</a></p>
</li>
<li>
<p><a href="#BABBAJCF">Example 6-2, &#34;Using on and off hinting&#34;</a></p>
</li>
<li>
<p><a href="#BABHAFHI">Example 6-3, &#34;Using TT_JoinOrder to specify a join order&#34;</a></p>
</li>
<li>
<p><a href="#BABFJDIF">Example 6-4, &#34;Using the statement level optimizer hint TT_INDEX&#34;</a></p>
</li>
</ul>
<div id="TTSQL534" class="example">
<p class="titleinexample"><a id="BABIFAJG"></a>Example 6-1 Using statement level optimizer hints for a SELECT query</p>
<p>View the execution plan for a query. Then use statement level optimizer hints to influence the optimizer to choose a different execution plan. Consider the query:</p>
<pre dir="ltr">Command&gt; SELECT r.region_name, c.country_name
       &gt; FROM regions r, countries c
       &gt; WHERE r.region_id = c.region_id
       &gt; ORDER BY c.region_id;
</pre>
<p>Use the <code dir="ltr">ttIsql</code> <code dir="ltr">EXPLAIN</code> command to view the plan generated by the optimizer. Note:</p>
<ul>
<li>
<p>The optimizer performs two range scans using table level locking for both scans.</p>
</li>
<li>
<p>The optimizer uses the <code dir="ltr">MergeJoin</code> operation to join the two tables.</p>
</li>
</ul>
<pre dir="ltr">Command&gt; EXPLAIN SELECT r.region_name, c.country_name
FROM regions r, countries c
WHERE r.region_id = c.region_id
ORDER BY c.region_id;
 
Query Optimizer Plan:
 
  STEP:                1
  LEVEL:               2
  OPERATION:           TblLkRangeScan
  TBLNAME:             COUNTRIES
  IXNAME:              COUNTR_REG_FK
  INDEXED CONDITION:   &lt;NULL&gt;
  NOT INDEXED:         &lt;NULL&gt;
 
 
  STEP:                2
  LEVEL:               2
  OPERATION:           TblLkRangeScan
  TBLNAME:             REGIONS
  IXNAME:              REGIONS
  INDEXED CONDITION:   R.REGION_ID &gt;= C.REGION_ID
  NOT INDEXED:         &lt;NULL&gt;
 
  STEP:                3
  LEVEL:               1
  OPERATION:           MergeJoin
  TBLNAME:             &lt;NULL&gt;
  IXNAME:              &lt;NULL&gt;
  INDEXED CONDITION:   C.REGION_ID = R.REGION_ID
  NOT INDEXED:         &lt;NULL&gt;
</pre>
<p>Now use statement level optimizer hints to direct the optimizer to perform the scans using row level locking and to use a <code dir="ltr">NestedLoop</code> operation to join the tables. Set autocommit to on to illustrate that the autocommit setting has no effect because statement level optimizer hints are scoped to the SQL statement.</p>
<pre dir="ltr">Command&gt; autocommit on;
Command&gt; EXPLAIN SELECT /*+ TT_RowLock (1), TT_TblLock (0), TT_MergeJoin (0),
       &gt; TT_NestedLoop (1) */
       &gt; r.region_name, c.country_name
       &gt; FROM regions r, countries c
       &gt; WHERE r.region_id = c.region_id
       &gt; ORDER BY c.region_id;
 
Query Optimizer Plan:
 
  STEP:                1
  LEVEL:               3
  OPERATION:           RowLkRangeScan
  TBLNAME:             REGIONS
  IXNAME:              REGIONS
  INDEXED CONDITION:   &lt;NULL&gt;
  NOT INDEXED:         &lt;NULL&gt;
 
  STEP:                2
  LEVEL:               3
  OPERATION:           RowLkRangeScan
  TBLNAME:             COUNTRIES
  IXNAME:              COUNTR_REG_FK
  INDEXED CONDITION:   C.REGION_ID = R.REGION_ID
  NOT INDEXED:         &lt;NULL&gt;
 
  STEP:                3
  LEVEL:               2
  OPERATION:           NestedLoop
  TBLNAME:             &lt;NULL&gt;
  IXNAME:              &lt;NULL&gt;
  INDEXED CONDITION:   &lt;NULL&gt;
  NOT INDEXED:         &lt;NULL&gt;
 
  STEP:                4
  LEVEL:               1
  OPERATION:           OrderBy
  TBLNAME:             &lt;NULL&gt;
  IXNAME:              &lt;NULL&gt;
  INDEXED CONDITION:   &lt;NULL&gt;
  NOT INDEXED:         &lt;NULL&gt;
</pre>
<p>Prepare the query again without statement level optimizer hints. The optimizer reverts back to the original execution plan because statement level optimizer hints are scoped to the SQL statement.</p>
<pre dir="ltr">Command&gt; EXPLAIN SELECT r.region_name, c.country_name
FROM regions r, countries c
WHERE r.region_id = c.region_id
ORDER BY c.region_id;
 
Query Optimizer Plan:
 
  STEP:                1
  LEVEL:               2
  OPERATION:           TblLkRangeScan
  TBLNAME:             COUNTRIES
  IXNAME:              COUNTR_REG_FK
  INDEXED CONDITION:   &lt;NULL&gt;
  NOT INDEXED:         &lt;NULL&gt;
 
  STEP:                2
  LEVEL:               2
  OPERATION:           TblLkRangeScan
  TBLNAME:             REGIONS
  IXNAME:              REGIONS
  INDEXED CONDITION:   R.REGION_ID &gt;= C.REGION_ID
  NOT INDEXED:         &lt;NULL&gt;
 
  STEP:                3
  LEVEL:               1
  OPERATION:           MergeJoin
  TBLNAME:             &lt;NULL&gt;
  IXNAME:              &lt;NULL&gt;
  INDEXED CONDITION:   C.REGION_ID = R.REGION_ID
  NOT INDEXED:         &lt;NULL&gt;
</pre></div>
<!-- class="example" -->
<div id="TTSQL535" class="example">
<p class="titleinexample"><a id="BABBAJCF"></a>Example 6-2 Using on and off hinting</p>
<p>This example illustrates the importance of directing the optimizer to specifically enable or disable hints that perform a similar function. For example, the hash and range hints direct the optimizer to use either a hash or range access path for the table. In order to ensure the optimizer chooses the specific access path, enable one hint and disable all other related hints.</p>
<p>Create a table and create a hash index on the first column of the table and a range index on the second column.</p>
<pre dir="ltr">Command&gt; CREATE TABLE test (col1 NUMBER, col2 NUMBER);
Command&gt; CREATE HASH INDEX h_index ON test (col1);
Command&gt; CREATE INDEX hr_index ON test (col2);
</pre>
<p>Set autocommit to off and execute the built-in procedure, <code dir="ltr">ttOptGetFlag</code>, to review the current transaction level optimizer hint settings for the transaction. A setting of 1 means the flag is enabled.</p>
<pre dir="ltr">Command&gt; autocommit off;
Command&gt; CALL ttOptGetFlag (&#39;Hash&#39;);
&lt; Hash, 1 &gt;
1 row found.
Command&gt; CALL ttOptGetFlag (&#39;Scan&#39;);
&lt; Scan, 1 &gt;
1 row found.
</pre>
<p>Use the <code dir="ltr">ttIsql</code> <code dir="ltr">EXPLAIN</code> command to review the plan for a <code dir="ltr">SELECT</code> query using a <code dir="ltr">WHERE</code> clause and dynamic parameters. The optimizer uses a hash scan.</p>
<pre dir="ltr">Command&gt; EXPLAIN SELECT * FROM test WHERE col1 = ? and col2 = ?;
 
Query Optimizer Plan:
 
  STEP:                1
  LEVEL:               1
  OPERATION:           RowLkHashScan
  TBLNAME:             TEST
  IXNAME:              H_INDEX
  INDEXED CONDITION:   TEST.COL1 = _QMARK_1
  NOT INDEXED:         TEST.COL2 = _QMARK_2
</pre>
<p>Use the statement level optimizer hint <code dir="ltr">TT_Range</code> to direct the optimizer to use a range scan. Note that the optimizer ignores the <code dir="ltr">TT_Range</code> hint and uses a hash scan because you did not direct the optimizer to disable the hash scan. Alter the statement and direct the optimizer to use a range scan and not use a hash scan. To accomplish this, enable the statement level optimizer hint <code dir="ltr">TT_Range</code> and disable the statement level optimizer hint <code dir="ltr">TT_HashScan</code>. The optimizer no longer ignores the <code dir="ltr">TT_Range</code> hint.</p>
<pre dir="ltr">Command&gt; EXPLAIN SELECT --+ TT_Range (1) Single line comment to set TT_Range
       &gt; * FROM TEST WHERE col1 = ? and col2 = ?;
 
Query Optimizer Plan:
 
  STEP:                1
  LEVEL:               1
  OPERATION:           RowLkHashScan
  TBLNAME:             TEST
  IXNAME:              H_INDEX
  INDEXED CONDITION:   TEST.COL1 = _QMARK_1
  NOT INDEXED:         TEST.COL2 = _QMARK_2

Command&gt; EXPLAIN SELECT /*+ TT_Range (1) TT_HashScan (0)
       &gt; Multiple line comment to enable TT_Range and disable TT_HashScan */
       &gt; * FROM TEST WHERE col1 = ? and col2 = ?;
 
Query Optimizer Plan:
 
  STEP:                1
  LEVEL:               1
  OPERATION:           RowLkRangeScan
  TBLNAME:             TEST
  IXNAME:              HR_INDEX
  INDEXED CONDITION:   TEST.COL2 = _QMARK_2
  NOT INDEXED:         TEST.COL1 = _QMARK_1
</pre>
<p>Prepare the query again without using statement level optimizer hints and without issuing a commit or rollback. The optimizer uses the transaction level optimizer hints settings that were in effect before executing the query. The optimizer uses transaction level optimizer hints because statement level optimizer hints are scoped to the SQL statement.</p>
<pre dir="ltr">Command&gt; EXPLAIN SELECT * FROM TEST WHERE col1 = ? and col2 = ?;
 
Query Optimizer Plan:
 
  STEP:                1
  LEVEL:               1
  OPERATION:           RowLkHashScan
  TBLNAME:             TEST
  IXNAME:              H_INDEX
  INDEXED CONDITION:   TEST.COL1 = _QMARK_1
  NOT INDEXED:         TEST.COL2 = _QMARK_2
</pre></div>
<!-- class="example" -->
<div id="TTSQL536" class="example">
<p class="titleinexample"><a id="BABHAFHI"></a>Example 6-3 Using TT_JoinOrder to specify a join order</p>
<p>Use the statement level optimizer hint <code dir="ltr">TT_JoinOrder</code> to direct the optimizer to use a specific join order. First use a transaction level optimizer hint to direct the optimizer to use a specific join order for the transaction. Then use a statement level optimizer hint to direct the optimizer to change the join order for the statement only.</p>
<pre dir="ltr">Command&gt; CALL ttOptSetOrder (&#39;e d j&#39;);
Command&gt; EXPLAIN SELECT *
FROM employees e, departments d, job_history j
WHERE e.department_id = d.department_id
AND e.hire_date = j.start_date;
 
Query Optimizer Plan:
 
  STEP:                1
  LEVEL:               3
  OPERATION:           TblLkRangeScan
  TBLNAME:             EMPLOYEES
  IXNAME:              EMP_DEPT_FK
  INDEXED CONDITION:   &lt;NULL&gt;
  NOT INDEXED:         &lt;NULL&gt;
 
  STEP:                2
  LEVEL:               3
  OPERATION:           TblLkRangeScan
  TBLNAME:             DEPARTMENTS
  IXNAME:              DEPARTMENTS
  INDEXED CONDITION:   D.DEPARTMENT_ID &gt;= E.DEPARTMENT_ID
  NOT INDEXED:         &lt;NULL&gt;
 
  STEP:                3
  LEVEL:               2
  OPERATION:           MergeJoin
  TBLNAME:             &lt;NULL&gt;
  IXNAME:              &lt;NULL&gt;
  INDEXED CONDITION:   E.DEPARTMENT_ID = D.DEPARTMENT_ID
  NOT INDEXED:         &lt;NULL&gt;
 
  STEP:                4
  LEVEL:               2
  OPERATION:           TblLkRangeScan
  TBLNAME:             JOB_HISTORY
  IXNAME:              JOB_HISTORY
  INDEXED CONDITION:   &lt;NULL&gt;
  NOT INDEXED:         E.HIRE_DATE = J.START_DATE
 
  STEP:                5
  LEVEL:               1
  OPERATION:           NestedLoop
  TBLNAME:             &lt;NULL&gt;
  IXNAME:              &lt;NULL&gt;
  INDEXED CONDITION:   &lt;NULL&gt;
  NOT INDEXED:         &lt;NULL&gt;
</pre>
<p>Use the statement level optimizer hint, <code dir="ltr">TT_JoinOrder</code>, to direct the optimizer to override the transaction level join order optimizer hint for the SQL statement only.</p>
<pre dir="ltr">Command&gt; EXPLAIN SELECT --+ TT_JoinOrder (e j d)
       &gt; *
       &gt; FROM employees e, departments d, job_history j
       &gt; WHERE e.department_id = d.department_id
       &gt; AND e.hire_date = j.start_date;
 
Query Optimizer Plan:
 
  STEP:                1
  LEVEL:               3
  OPERATION:           TblLkRangeScan
  TBLNAME:             EMPLOYEES
  IXNAME:              EMP_DEPT_FK
  INDEXED CONDITION:   &lt;NULL&gt;
  NOT INDEXED:         &lt;NULL&gt;
 
  STEP:                2
  LEVEL:               3
  OPERATION:           TblLkRangeScan
  TBLNAME:             JOB_HISTORY
  IXNAME:              JOB_HISTORY
  INDEXED CONDITION:   &lt;NULL&gt;
  NOT INDEXED:         E.HIRE_DATE = J.START_DATE
 
  STEP:                3
  LEVEL:               2
  OPERATION:           NestedLoop
  TBLNAME:             &lt;NULL&gt;
  IXNAME:              &lt;NULL&gt;
  INDEXED CONDITION:   &lt;NULL&gt;
  NOT INDEXED:         &lt;NULL&gt;
 
  STEP:                4
  LEVEL:               2
  OPERATION:           TblLkRangeScan
  TBLNAME:             DEPARTMENTS
  IXNAME:              DEPARTMENTS
  INDEXED CONDITION:   D.DEPARTMENT_ID &gt;= E.DEPARTMENT_ID
  NOT INDEXED:         &lt;NULL&gt;
 
  STEP:                5
  LEVEL:               1
  OPERATION:           MergeJoin
  TBLNAME:             &lt;NULL&gt;
  IXNAME:              &lt;NULL&gt;
  INDEXED CONDITION:   E.DEPARTMENT_ID = D.DEPARTMENT_ID
  NOT INDEXED:         &lt;NULL&gt;
</pre>
<p>Prepare the query again to verify that the join order that was in effect for the transaction remains in effect.</p>
<pre dir="ltr">Command&gt; EXPLAIN SELECT *
       &gt; FROM employees e, departments d, job_history j
       &gt; WHERE e.department_id = d.department_id
       &gt; AND e.hire_date = j.start_date;
 
Query Optimizer Plan:
 
  STEP:                1
  LEVEL:               3
  OPERATION:           TblLkRangeScan
  TBLNAME:             EMPLOYEES
  IXNAME:              EMP_DEPT_FK
  INDEXED CONDITION:   &lt;NULL&gt;
  NOT INDEXED:         &lt;NULL&gt;
 
  STEP:                2
  LEVEL:               3
  OPERATION:           TblLkRangeScan
  TBLNAME:             DEPARTMENTS
  IXNAME:              DEPARTMENTS
  INDEXED CONDITION:   D.DEPARTMENT_ID &gt;= E.DEPARTMENT_ID
  NOT INDEXED:         &lt;NULL&gt;
 
  STEP:                3
  LEVEL:               2
  OPERATION:           MergeJoin
  TBLNAME:             &lt;NULL&gt;
  IXNAME:              &lt;NULL&gt;
  INDEXED CONDITION:   E.DEPARTMENT_ID = D.DEPARTMENT_ID
  NOT INDEXED:         &lt;NULL&gt;
 
  STEP:                4
  LEVEL:               2
  OPERATION:           TblLkRangeScan
  TBLNAME:             JOB_HISTORY
  IXNAME:              JOB_HISTORY
  INDEXED CONDITION:   &lt;NULL&gt;
  NOT INDEXED:         E.HIRE_DATE = J.START_DATE
 
  STEP:                5
  LEVEL:               1
  OPERATION:           NestedLoop
  TBLNAME:             &lt;NULL&gt;
  IXNAME:              &lt;NULL&gt;
  INDEXED CONDITION:   &lt;NULL&gt;
  NOT INDEXED:         &lt;NULL&gt;
</pre></div>
<!-- class="example" -->
<div id="TTSQL538" class="example">
<p class="titleinexample"><a id="BABFJDIF"></a>Example 6-4 Using the statement level optimizer hint TT_INDEX</p>
<p>Perform a query on the <code dir="ltr">employees</code> table that uses the index, <code dir="ltr">emp_name_ix</code>. Then use the statement level optimizer hint <code dir="ltr">TT_INDEX</code> to direct the optimizer not to use this index. First run the <code dir="ltr">ttIsql</code> command, <code dir="ltr">indexes</code>, to view the indexes for the <code dir="ltr">employees</code> table.</p>
<pre dir="ltr">Command&gt; indexes employees;
 
Indexes on table TESTUSER.EMPLOYEES:
  EMPLOYEES: unique range index on columns:
    EMPLOYEE_ID
    (referenced by foreign key index JHIST_EMP_FK on table TESTUSER.JOB_HISTORY)
  TTUNIQUE_0: unique range index on columns:
    EMAIL
  EMP_DEPT_FK: non-unique range index on columns:
    DEPARTMENT_ID
    (foreign key index references table TESTUSER.DEPARTMENTS(DEPARTMENT_ID))
  EMP_JOB_FK: non-unique range index on columns:
    JOB_ID
    (foreign key index references table TESTUSER.JOBS(JOB_ID))
  EMP_NAME_IX: non-unique range index on columns:
    LAST_NAME
    FIRST_NAME
  5 indexes found.
 
5 indexes found on 1 table.
</pre>
<p>Use the <code dir="ltr">ttIsql</code> command, <code dir="ltr">EXPLAIN</code>, to view the execution plan for a <code dir="ltr">SELECT</code> query on the <code dir="ltr">employees</code> table that uses a <code dir="ltr">WHERE</code> clause on the <code dir="ltr">last_name</code> column.</p>
<pre dir="ltr">Command&gt; EXPLAIN SELECT e.first_name
       &gt; FROM employees e
       &gt; WHERE e.last_name BETWEEN &#39;A&#39; AND &#39;B&#39;;
 
Query Optimizer Plan:
 
  STEP:                1
  LEVEL:               1
  OPERATION:           RowLkRangeScan
  TBLNAME:             EMPLOYEES
  IXNAME:              EMP_NAME_IX
  INDEXED CONDITION:   E.LAST_NAME &gt;= &#39;A&#39; AND E.LAST_NAME &lt;= &#39;B&#39;
  NOT INDEXED:         &lt;NULL&gt;
</pre>
<p>Use the statement level optimizer hint, <code dir="ltr">TT_INDEX</code>, to direct the optimizer not to use the index, <code dir="ltr">emp_name_ix</code>.</p>
<pre dir="ltr">Command&gt; EXPLAIN SELECT --+ TT_INDEX (E,EMP_NAME_IX,0)
       &gt; e.first_name
       &gt; FROM employees e
       &gt; WHERE e.last_name BETWEEN &#39;A&#39; AND &#39;B&#39;;
 
Query Optimizer Plan:
 
  STEP:                1
  LEVEL:               1
  OPERATION:           TblLkRangeScan
  TBLNAME:             EMPLOYEES
  IXNAME:              EMPLOYEES
  INDEXED CONDITION:   &lt;NULL&gt;
  NOT INDEXED:         E.LAST_NAME &lt;= &#39;B&#39; AND E.LAST_NAME &gt;= &#39;A&#39;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<div class="refentry"><a id="i1027059"></a>
<div id="TTSQL279" class="refsect1">
<h2 class="refsect1"><a id="sthref1057"></a><a id="sthref1058"></a>ALTER ACTIVE STANDBY PAIR</h2>
<p>You can change an active standby pair by:</p>
<ul>
<li>
<p>Adding or dropping a subscriber database</p>
</li>
<li>
<p>Altering store attributes</p>
<p>Only the <code dir="ltr">PORT</code> and <code dir="ltr">TIMEOUT</code> attributes can be set for subscribers.</p>
</li>
<li>
<p>Including tables, sequences or cache groups in the replication scheme</p>
</li>
<li>
<p>Excluding tables, sequences or cache groups from the replication scheme</p>
</li>
</ul>
<p>See <a class="olink TTREP674" href="../TTREP/alterpair.htm#TTREP674">&#34;Making other changes to an active standby pair&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1059"></a>Required privilege</p>
<p><code dir="ltr">ADMIN</code></p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1060"></a>SQL syntax</p>
<pre dir="ltr">ALTER ACTIVE STANDBY PAIR { 
      <span class="codeinlineitalic">SubscriberOperation</span> | 
      <span class="codeinlineitalic">StoreOperation</span> | <span class="codeinlineitalic">InclusionOperation</span> |
      <span class="codeinlineitalic">NetworkOperation</span> } [...]
</pre>
<p>Syntax for <code dir="ltr"><span class="codeinlineitalic">SubscriberOperation</span></code>:</p>
<pre dir="ltr">{ADD | DROP } SUBSCRIBER <span class="codeinlineitalic">FullStoreName</span>
</pre>
<p>Syntax for <code dir="ltr"><span class="codeinlineitalic">StoreOperation</span></code>:</p>
<pre dir="ltr">ALTER STORE <span class="codeinlineitalic">FullStoreName</span> SET <span class="codeinlineitalic">StoreAttribute</span>
</pre>
<p>Syntax for <code dir="ltr"><span class="codeinlineitalic">InclusionOperation</span></code>:</p>
<pre dir="ltr">    [{ INCLUDE | EXCLUDE }{TABLE [[<span class="italic">Owner</span>.]<span class="italic">TableName</span> [,...]]|
         CACHE GROUP [[<span class="italic">Owner</span>.]<span class="italic">CacheGroupName</span> [,...]]|
         SEQUENCE [[<span class="italic">Owner</span>.]<span class="italic">SequenceName</span> [,...]]} [,...]]
</pre>
<p>Syntax for <code dir="ltr"><span class="codeinlineitalic">NetworkOperation</span></code>:</p>
<pre dir="ltr">ADD ROUTE MASTER <span class="italic">FullStoreName</span> SUBSCRIBER <span class="italic">FullStoreName</span>
      { { MASTERIP <span class="italic">MasterHost</span> | SUBSCRIBERIP <span class="italic">SubscriberHost</span> }
          PRIORITY <span class="italic">Priority</span> } [...] 
DROP ROUTE MASTER <span class="italic">FullStoreName</span> SUBSCRIBER <span class="italic">FullStoreName</span>
      { MASTERIP <span class="italic">MasterHost</span> | SUBSCRIBERIP <span class="italic">SubscriberHost</span> } [...] 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1061"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters of ALTER ACTIVE STANDBY PAIR." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t6">Parameter</th>
<th class="cellalignment6331" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t6" headers="r1c1-t6"><code dir="ltr">A<a id="sthref1062"></a><a id="sthref1063"></a>DD SUBSCRIBER</code> <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code></td>
<td class="cellalignment6332" headers="r2c1-t6 r1c2-t6">Indicates a subscriber database. <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code> is the database file name specified in the <code dir="ltr">DataStore</code> attribute of the DSN description.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t6" headers="r1c1-t6"><code dir="ltr">D<a id="sthref1064"></a><a id="sthref1065"></a>ROP SUBSCRIBER</code> <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code></td>
<td class="cellalignment6332" headers="r3c1-t6 r1c2-t6">Indicates that updates should no longer be sent to the specified subscriber database. This operation fails if the replication scheme has only one subscriber. <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code> is the database file name specified in the <code dir="ltr">DataStore</code> attribute of the DSN description.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t6" headers="r1c1-t6"><code dir="ltr">ALTER STORE</code> <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code> <code dir="ltr"><a id="sthref1066"></a>SET</code> <code dir="ltr"><span class="codeinlineitalic">StoreAttribute</span></code></td>
<td class="cellalignment6332" headers="r4c1-t6 r1c2-t6">Indicates changes to the attributes of a database. Only the <code dir="ltr">PORT</code> and <code dir="ltr">TIMEOUT</code> attributes can be set for subscribers. <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code> is the database file name specified in the <code dir="ltr">DataStore</code> attribute of the DSN description.
<p>For information on <code dir="ltr"><span class="codeinlineitalic">StoreAttribute</span></code> clauses, see <a href="#i1438072">&#34;CREATE ACTIVE STANDBY PAIR&#34;</a>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t6" headers="r1c1-t6"><code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code></td>
<td class="cellalignment6332" headers="r5c1-t6 r1c2-t6">The database, specified as one of the following:
<ul>
<li>
<p><code dir="ltr">SELF</code></p>
</li>
<li>
<p>The prefix of the database file name</p>
</li>
</ul>
<p>For example, if the database path is <code dir="ltr"><span class="codeinlineitalic">directory</span></code>/<code dir="ltr"><span class="codeinlineitalic">subdirectory</span></code><code dir="ltr">/data.ds0</code>, then <code dir="ltr">data</code> is the database name that should be used.</p>
<p>This is the database file name specified in the <code dir="ltr">DataStore</code> attribute of the DSN description with optional host ID in the form:</p>
<p><code dir="ltr"><span class="codeinlineitalic">DataStoreName</span></code> <code dir="ltr">[ON</code> <code dir="ltr"><span class="codeinlineitalic">Host</span></code><code dir="ltr">]</code></p>
<p><code dir="ltr"><span class="codeinlineitalic">Host</span></code> can be either an IP address or a literal host name assigned to one or more IP addresses, as described in <a class="olink TTREP401" href="../TTREP/attrib.htm#TTREP401">&#34;Configuring the network&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span>. Host names containing special characters must be surrounded by double quotes. For example: <code dir="ltr">&#34;MyHost-500&#34;</code>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t6" headers="r1c1-t6"><code dir="ltr">{I<a id="sthref1067"></a>NCLUDE|EXCLUDE}</code>
<p><code dir="ltr">{[TABLE [</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">TableName</span></code><code dir="ltr">[,...]</code><code dir="ltr">|</code></p>
<p><code dir="ltr">CACHE GROUP</code></p>
<p><code dir="ltr">[[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">CacheGroupName</span></code><code dir="ltr">]|</code><code dir="ltr">[,...]</code></p>
<p><code dir="ltr">SEQUENCE [[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">SequenceName</span></code> <code dir="ltr">[,...]}</code></p>
<p><code dir="ltr">[,...]</code></p>
</td>
<td class="cellalignment6332" headers="r6c1-t6 r1c2-t6">Includes in or excludes from replication the tables, sequences or cache groups listed.
<p><code dir="ltr">INCLUDE</code> adds the tables, sequences or cache groups to replication. Use one <code dir="ltr">INCLUDE</code> clause for each object type (table, sequence or cache group).</p>
<p><code dir="ltr">EXCLUDE</code> removes the tables, sequences or cache groups from replication. Use one <code dir="ltr">EXCLUDE</code> clause for each object type (table, sequence or cache group).</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r7c1-t6" headers="r1c1-t6"><code dir="ltr">ADD ROUTE MASTER</code> <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code> <code dir="ltr">SUBSCRIBER</code> <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code></td>
<td class="cellalignment6332" headers="r7c1-t6 r1c2-t6">Adds <code dir="ltr"><span class="codeinlineitalic">NetworkOperation</span></code> to replication scheme. Enables you to control the network interface that a master store uses for every outbound connection to each of its subscriber stores. In the context of the <code dir="ltr">ADD ROUTE</code> clause, each master database is a subscriber of the other master database and each read-only subscriber is a subscriber of both master databases.
<p>Can be specified more than once.</p>
<p>For <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code>, &#34;<code dir="ltr">ON</code> <code dir="ltr"><span class="codeinlineitalic">host</span></code>&#34; must be specified.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r8c1-t6" headers="r1c1-t6"><code dir="ltr">DROP ROUTE MASTER</code> <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code> <code dir="ltr">SUBSCRIBER</code> <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code></td>
<td class="cellalignment6332" headers="r8c1-t6 r1c2-t6">Drops <code dir="ltr"><span class="codeinlineitalic">NetworkOperation</span></code> from replication scheme.
<p>Can be specified more than once.</p>
<p>For <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code>, &#34;<code dir="ltr">ON</code> <code dir="ltr"><span class="codeinlineitalic">host</span></code>&#34; must be specified.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r9c1-t6" headers="r1c1-t6"><code dir="ltr">MASTERIP</code> <code dir="ltr"><span class="codeinlineitalic">MasterHost</span></code> <code dir="ltr">|</code> <code dir="ltr">SUBSCRIBERIP</code> <code dir="ltr"><span class="codeinlineitalic">SubscriberHost</span></code></td>
<td class="cellalignment6332" headers="r9c1-t6 r1c2-t6"><code dir="ltr"><span class="codeinlineitalic">MasterHost</span></code> and <code dir="ltr"><span class="codeinlineitalic">SubscriberHost</span></code> are the IP addresses for the network interface on the master and subscriber stores. Specify in dot notation or canonical format or in colon notation for IPV6.
<p>Clause can be specified more than once. Valid for both <code dir="ltr">ADD</code> and <code dir="ltr">DROP ROUTE MASTER</code>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r10c1-t6" headers="r1c1-t6"><code dir="ltr">PRIORITY</code> <code dir="ltr"><span class="codeinlineitalic">Priority</span></code></td>
<td class="cellalignment6332" headers="r10c1-t6 r1c2-t6">Variable expressed as an integer from 1 to 99. Denotes the priority of the IP address. Lower integral values have higher priority. An error is returned if multiple addresses with the same priority are specified. Controls the order in which multiple IP addresses are used to establish peer connections.
<p>Required syntax of <code dir="ltr"><span class="codeinlineitalic">NetworkOperation</span></code> clause. Follows <code dir="ltr">MASTERIP</code> <code dir="ltr"><span class="codeinlineitalic">MasterHost</span></code> <code dir="ltr">| SUBSCRIBERIP</code> <code dir="ltr"><span class="codeinlineitalic">SubscriberHost</span></code> clause.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1068"></a>Description</p>
<ul>
<li>
<p>You must stop the replication agent before altering an active standby pair. The exceptions are for those objects and statements that are automatically replicated and included based on the values of the <code dir="ltr">DDL_REPLICATION_LEVEL</code> and <code dir="ltr">DDL_REPLICATION_ACTION</code> attributes, as described in <a href="#i1333852">&#34;ALTER SESSION&#34;</a>.</p>
</li>
<li>
<p>You may only alter the active standby pair replication scheme on the active database. See <a class="olink TTREP674" href="../TTREP/alterpair.htm#TTREP674">&#34;Making other changes to an active standby pair&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span> for more information.</p>
</li>
<li>
<p>You may not use <code dir="ltr">ALTER ACTIVE STANDBY PAIR</code> when using Oracle Clusterware with TimesTen. See <a class="olink TTREP263" href="../TTREP/cluster.htm#TTREP263">&#34;Restricted commands and SQL statements&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span> for more information.</p>
<p>Instead, perform the tasks described in <a class="olink TTREP295" href="../TTREP/cluster.htm#TTREP295">&#34;Changing the schema&#34;</a> section of the <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span>.</p>
</li>
<li>
<p>Use <code dir="ltr">ADD SUBSCRIBER</code> <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code> to add a subscriber to the replication scheme.</p>
</li>
<li>
<p>Use <code dir="ltr">DROP SUBSCRIBER</code> <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code> to drop a subscriber from the replication scheme.</p>
</li>
<li>
<p>Use the <code dir="ltr">INCLUDE</code> or <code dir="ltr">EXCLUDE</code> clause to include the listed tables, sequences or cache groups in the replication scheme or to exclude them from the replication scheme. Use one <code dir="ltr">INCLUDE</code> or <code dir="ltr">EXCLUDE</code> clause for each object type (table, sequence or cache group). The <code dir="ltr">ALTER ACTIVE STANDBY</code> statement is not necessary for those objects and statements that are automatically replicated and included based on the values of the <code dir="ltr">DDL_REPLICATION_LEVEL</code> and <code dir="ltr">DDL_REPLICATION_ACTION</code> attributes, as described in <a href="#i1333852">&#34;ALTER SESSION&#34;</a>. However, if <code dir="ltr">DDL_REPLICATION_LEVEL</code> is 2 or greater and <code dir="ltr">DDL_REPLICATION_ACTION</code>=&#34;<code dir="ltr">EXCLUDE</code>&#34;, use the <code dir="ltr">INCLUDE</code> clause to include replicated objects into the replication scheme.</p>
</li>
<li>
<p>When <code dir="ltr">DDL_REPLICATION_LEVEL</code> is 2 or greater, the <code dir="ltr">INCLUDE</code> clause can only be used with empty tables on the active database. The contents of the corresponding tables on the standby and any subscribers will be truncated before the table is added to the replication scheme.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1069"></a>Examples</p>
<p>Add a subscriber to the replication scheme.</p>
<pre dir="ltr">ALTER ACTIVE STANDBY PAIR
    ADD SUBSCRIBER rep4;
</pre>
<p>Drop two subscribers from the replication scheme.</p>
<pre dir="ltr">ALTER ACTIVE STANDBY PAIR
    DROP SUBCRIBER rep3
    DROP SUBSCRIBER rep4;
</pre>
<p>Alter the store attributes of the <code dir="ltr">rep3</code> and <code dir="ltr">rep4</code> databases.</p>
<pre dir="ltr">ALTER ACTIVE STANDBY PAIR
    ALTER STORE rep3 SET PORT 23000 TIMEOUT 180
    ALTER STORE rep4 SET PORT 23500 TIMEOUT 180;
</pre>
<p>Add a table, a sequence and two cache groups to the replication scheme.</p>
<pre dir="ltr">ALTER ACTIVE STANDBY PAIR
    INCLUDE TABLE my.newtab
    INCLUDE SEQUENCE my.newseq
    INCLUDE CACHE GROUP my.newcg1, my.newcg2;
</pre>
<p>Add <code dir="ltr"><span class="codeinlineitalic">NetworkOperation</span></code> clause to active standby pair:</p>
<pre dir="ltr">ALTER ACTIVE STANDBY PAIR
ADD ROUTE MASTER rep1 ON &#34;machine1&#34; SUBSCRIBER rep2 ON &#34;machine2&#34;
MASTERIP &#34;1.1.1.1&#34; PRIORITY 1 SUBSCRIBERIP &#34;2.2.2.2&#34; PRIORITY 1;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1070"></a>See also</p>
<br/>
<code dir="ltr"><a href="#i1438072">CREATE ACTIVE STANDBY PAIR</a></code><br/>
<code dir="ltr"><a href="#i1028075">DROP ACTIVE STANDBY PAIR</a></code></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1055226"></a>
<div id="TTSQL280" class="refsect1">
<h2 class="refsect1"><a id="sthref1071"></a><a id="sthref1072"></a>ALTER CACHE GROUP</h2>
<p>The <code dir="ltr">ALTER CACHE GROUP</code> statement enables changes to the state, interval and mode of <code dir="ltr">AUTOREFRESH</code>.</p>
<p>Updates on the Oracle Database tables can be propagated back to the TimesTen cache group with the use of <code dir="ltr">AUTOREFRESH</code>. <code dir="ltr">AUTOREFRESH</code> can be enabled when the cache group is a user managed cache group or is defined as <code dir="ltr">READONLY</code> with an <code dir="ltr">AUTOREFRESH</code> clause.</p>
<p>Any values or states set by <code dir="ltr">ALTER CACHE GROUP</code> are persistent. They are stored in the database and survive daemon and cache agent restarts.</p>
<p>For a description of cache group types, see <a href="#BABEDHHA">&#34;User managed and system managed cache groups&#34;</a>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1073"></a>Required privilege</p>
<p>No privilege is required for the cache group owner.</p>
<p><code dir="ltr">ALTER ANY CACHE GROUP</code> for another user&#39;s cache group.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1074"></a>SQL syntax</p>
<p>This statement changes the <code dir="ltr">AUTOREFRESH</code> mode of the cache group, which determines which rows are updated during an autorefresh operation:</p>
<pre dir="ltr">ALTER CACHE GROUP [<span class="italic">Owner</span>.]<span class="italic">GroupName</span>
        SET AUTOREFRESH MODE
        {INCREMENTAL | FULL}
</pre>
<p>This statement changes the <code dir="ltr">AUTOREFRESH</code> interval on the cache group:</p>
<pre dir="ltr">ALTER CACHE GROUP [<span class="italic">Owner</span>.]<span class="italic">GroupName</span> 
        <a id="sthref1075"></a>SET AUTOREFRESH INTERVAL <span class="italic">IntervalValue</span> 
        {MINUTE[S] | SECOND[S] | MILLISECOND[S] }
</pre>
<p>This statement alters the <code dir="ltr">AUTOREFRESH</code> state:</p>
<pre dir="ltr">ALTER CACHE GROUP [<span class="italic">Owner</span>.]<span class="italic">GroupName</span> 
        SET AUTOREFRESH STATE
        {ON | OFF | PAUSED}
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1076"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters of ALTER CACHE GROUP." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t7">Parameter</th>
<th class="cellalignment6331" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t7" headers="r1c1-t7"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code>.<code dir="ltr">]</code><code dir="ltr"><span class="codeinlineitalic">GroupName</span></code></td>
<td class="cellalignment6332" headers="r2c1-t7 r1c2-t7">Name assigned to the new cache group.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t7" headers="r1c1-t7"><code dir="ltr">AUTOREFRESH</code></td>
<td class="cellalignment6332" headers="r3c1-t7 r1c2-t7">Indicates that changes to the Oracle Database tables should be automatically propagated to TimesTen. For details, see <a href="#BABBHIFH">&#34;AUTOREFRESH in cache groups&#34;</a>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t7" headers="r1c1-t7"><code dir="ltr">MODE</code></td>
<td class="cellalignment6332" headers="r4c1-t7 r1c2-t7">Determines which rows in the cache are updated during an autorefresh. If the <code dir="ltr">INCREMENTAL</code> clause is specified, TimesTen refreshes only rows that have been changed on the Oracle Database since the last propagation. If the <code dir="ltr">FULL</code> clause is specified or if there is neither <code dir="ltr">FULL</code> nor <code dir="ltr">INCREMENTAL</code> clause specified, TimesTen updates all rows in the cache with each autorefresh. The default mode is <code dir="ltr">INCREMENTAL</code>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t7" headers="r1c1-t7"><code dir="ltr">INTERVAL</code>
<p><code dir="ltr"><span class="codeinlineitalic">IntervalValue</span></code></p>
</td>
<td class="cellalignment6332" headers="r5c1-t7 r1c2-t7">An integer value that specifies how often <code dir="ltr">AUTOREFRESH</code> should be scheduled, in minutes, seconds or milliseconds. The default value is 10 minutes. If the specified interval is not long enough for an <code dir="ltr">AUTOREFRESH</code> to complete, a runtime warning is generated and the next <code dir="ltr">AUTOREFRESH</code> waits until the current one finishes. An informational message is generated in the support log if the wait queue reaches 10.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t7" headers="r1c1-t7"><a id="sthref1077"></a><code dir="ltr">STATE</code></td>
<td class="cellalignment6332" headers="r6c1-t7 r1c2-t7">Specifies whether <code dir="ltr">AUTOREFRESH</code> should be changed to on, off or paused. By default, the <code dir="ltr">AUTOREFRESH STATE</code> is <code dir="ltr">ON</code>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r7c1-t7" headers="r1c1-t7"><code dir="ltr">ON</code></td>
<td class="cellalignment6332" headers="r7c1-t7 r1c2-t7"><code dir="ltr">AUTOREFRESH</code> is scheduled to occur at the specified interval.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r8c1-t7" headers="r1c1-t7"><code dir="ltr">OFF</code></td>
<td class="cellalignment6332" headers="r8c1-t7 r1c2-t7">A scheduled <code dir="ltr">AUTOREFRESH</code> is canceled, and TimesTen does not try to maintain the information necessary for an <code dir="ltr">INCREMENTAL</code> refresh. Therefore if <code dir="ltr">AUTOREFRESH</code> is turned on again at a later time, the first refresh is <code dir="ltr">FULL</code>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r9c1-t7" headers="r1c1-t7"><code dir="ltr">PAUSED</code></td>
<td class="cellalignment6332" headers="r9c1-t7 r1c2-t7">A scheduled <code dir="ltr">AUTOREFRESH</code> is canceled, but TimesTen tries to maintain the information necessary for an <code dir="ltr">INCREMENTAL</code> refresh. Therefore if <code dir="ltr">AUTOREFRESH</code> is turned on again at a later time, a full refresh may not be necessary.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1078"></a>Description</p>
<ul>
<li>
<p>A <a id="sthref1079"></a>refresh does not occur immediately after issuing <code dir="ltr">ALTER CACHE GROUP...SET AUTOREFRESH STATE</code>. This statement only changes the state of <code dir="ltr">AUTOREFRESH</code>. When the transaction that contains the <code dir="ltr">ALTER CACHE GROUP</code> statement is committed, the cache agent is notified to schedule an <code dir="ltr">AUTOREFRESH</code> immediately, but the commit goes through without waiting for the completion of the refresh. The scheduling of the autorefresh operation is part of the transaction, but the refresh itself is not.</p>
</li>
<li>
<p>If you issue an <code dir="ltr">ALTER CACHE GROUP... SET AUTOREFRESH STATE OFF</code> statement and there is an autorefresh operation currently running, then:</p>
<ul>
<li>
<p>If <code dir="ltr">LockWait</code> interval is 0, the <code dir="ltr">ALTER</code> statement fails with a lock timeout error.</p>
</li>
<li>
<p>If <code dir="ltr">LockWait</code> interval is nonzero, then the current autorefresh transaction is rolled back, and the <code dir="ltr">ALTER</code> statement continues. This affects all cache groups with the same autorefresh interval.</p>
</li>
</ul>
</li>
<li>
<p>Replication cannot occur between cache groups with <code dir="ltr">AUTOREFRESH</code> and cache groups without <code dir="ltr">AUTOREFRESH</code>.</p>
</li>
<li>
<p>If the <code dir="ltr">ALTER CACHE GROUP</code> statement is part of a transaction that is being replicated, and if the replication scheme has the <code dir="ltr">RETURN TWOSAFE</code> attribute, the transaction may fail.</p>
</li>
<li>
<p>You cannot execute the <code dir="ltr">ALTER CACHE GROUP</code> statement when performed under the serializable isolation level. An error message is returned when attempted.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1080"></a>See also</p>
<br/>
<code dir="ltr"><a href="#i1228554">CREATE CACHE GROUP</a></code></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACGIIDB"></a>
<div id="TTSQL281" class="refsect1">
<h2 class="refsect1"><a id="sthref1081"></a><a id="sthref1082"></a>ALTER FUNCTION</h2>
<p>The <code dir="ltr">ALTER FUNCTION</code> statement recompiles a standalone stored function. Explicit recompilation eliminates the need for implicit runtime recompilation and prevents associated runtime compilation errors and performance overhead.</p>
<p>To recompile a function that is part of a package, recompile the package using the <code dir="ltr"><a href="#CACFECCB">ALTER PACKAGE</a></code> statement.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1083"></a>Required privilege</p>
<p>No privilege is required for the PL/SQL function owner.</p>
<p><code dir="ltr">ALTER ANY PROCEDURE</code> for another user&#39;s function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1084"></a>SQL syntax</p>
<pre dir="ltr">ALTER FUNCTION [<span class="italic">Owner</span>.]<span class="italic">FunctionName</span><span class="codeinlineitalic"> </span>COMPILE
      [<span class="codeinlineitalic">CompilerParametersClause</span> [...]] 
      [REUSE SETTINGS] 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1085"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters of ALTER USER." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t8">Parameter</th>
<th class="cellalignment6331" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t8" headers="r1c1-t8"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">FunctionName</span></code></td>
<td class="cellalignment6332" headers="r2c1-t8 r1c2-t8">Name of the function to be recompiled.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t8" headers="r1c1-t8"><code dir="ltr">COMPILE</code></td>
<td class="cellalignment6332" headers="r3c1-t8 r1c2-t8">Required keyword that causes recompilation of the function. If the function does not compile successfully, use the <code dir="ltr">ttIsql</code> command <code dir="ltr">SHOW ERRORS</code> to display the compiler error messages.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t8" headers="r1c1-t8"><code dir="ltr"><span class="codeinlineitalic">CompilerParametersClause</span></code></td>
<td class="cellalignment6332" headers="r4c1-t8 r1c2-t8">Use this optional clause to specify a value for one of the PL/SQL persistent compiler parameters. The PL/SQL persistent compiler parameters are <code dir="ltr">PLSQL_OPTIMIZE_LEVEL</code>, <code dir="ltr">PLSCOPE_SETTINGS</code> and <code dir="ltr">NLS_LENGTH_SEMANTICS</code>.
<p>You can specify each parameter once in the statement.</p>
<p>If you omit a parameter from this clause and you specify <code dir="ltr">REUSE SETTINGS</code>, then if a value was specified for the parameter in an earlier compilation, TimesTen uses that earlier value. If you omit a parameter and either you do not specify <code dir="ltr">REUSE SETTINGS</code> or no value has been specified for the parameter in an earlier compilation, then TimesTen obtains the value for the parameter from the session environment.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t8" headers="r1c1-t8"><code dir="ltr">REUSE SETTINGS</code></td>
<td class="cellalignment6332" headers="r5c1-t8 r1c2-t8">Use this optional clause to prevent TimesTen from dropping and reacquiring compiler switch settings. When you specify <code dir="ltr">REUSE</code> <code dir="ltr">SETTINGS</code>, TimesTen preserves the existing settings and uses them for the compilation of any parameters for which values are not specified.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1086"></a>Description</p>
<ul>
<li>
<p>The <code dir="ltr">ALTER FUNCTION</code> statement does not change the declaration or definition of an existing function. To redeclare or redefine a function, use the <code dir="ltr"><a href="#CHDDCEDC">CREATE FUNCTION</a></code> statement.</p>
</li>
<li>
<p>TimesTen first recompiles objects upon which the function depends, if any of those objects are invalid.</p>
</li>
<li>
<p>TimesTen also invalidates any objects that depend on the function, such as functions that call the recompiled function or package bodies that define functions that call the recompiled function.</p>
</li>
<li>
<p>If TimesTen recompiles the function successfully, then the function becomes valid. If recompiling the function results in compilation errors, then TimesTen returns an error and the function remains invalid. Use the <code dir="ltr">ttIsql</code> command <code dir="ltr">SHOW ERRORS</code> to display compilation errors.</p>
</li>
<li>
<p>During recompilation, TimesTen drops all persistent compiler settings, retrieves them again from the session, and stores them at the end of compilation. To avoid this process, specify the <code dir="ltr">REUSE SETTINGS</code> clause.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1087"></a>See also</p>
<br/>
<code dir="ltr"><a href="#CHDDCEDC">CREATE FUNCTION</a></code></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACFECCB"></a>
<div id="TTSQL282" class="refsect1">
<h2 class="refsect1"><a id="sthref1088"></a><a id="sthref1089"></a>ALTER PACKAGE</h2>
<p>The <code dir="ltr">ALTER PACKAGE</code> statement explicitly recompiles a package specification, package body, or both. Explicit recompilation eliminates the need for implicit runtime recompilation and prevents associated runtime compilation errors.</p>
<p>This statement recompiles all package objects together. You cannot use the <code dir="ltr"><a href="#CACIEDDE">ALTER PROCEDURE</a></code> or <code dir="ltr"><a href="#CACGIIDB">ALTER FUNCTION</a></code> statement to individually recompile a procedure or function that is part of a package.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1090"></a>Required privilege</p>
<p>No privilege is required for the package owner.</p>
<p><code dir="ltr">ALTER ANY PROCEDURE</code> for another user&#39;s package.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1091"></a>SQL syntax</p>
<pre dir="ltr">ALTER PACKAGE [<span class="italic">Owner</span>.]<span class="italic">PackageName</span><span class="codeinlineitalic"> </span>COMPILE
      [PACKAGE|SPECIFICATION|BODY]
      [<span class="codeinlineitalic">CompilerParametersClause</span> [...]] 
      [REUSE SETTINGS] 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1092"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters of ALTER USER." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t9">Parameter</th>
<th class="cellalignment6331" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t9" headers="r1c1-t9"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">PackageName</span></code></td>
<td class="cellalignment6332" headers="r2c1-t9 r1c2-t9">Name of the package to be recompiled.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t9" headers="r1c1-t9"><code dir="ltr">COMPILE</code></td>
<td class="cellalignment6332" headers="r3c1-t9 r1c2-t9">Required clause used to force the recompilation of the package specification, package body, or both.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t9" headers="r1c1-t9">[<code dir="ltr">PACKAGE|SPECIFICATION|BODY</code>]</td>
<td class="cellalignment6332" headers="r4c1-t9 r1c2-t9">Specify <code dir="ltr">PACKAGE</code> to recompile both the package specification and the body. Specify <code dir="ltr">SPECIFICATION</code> to recompile the package specification. Specify <code dir="ltr">BODY t</code>o recompile the package body.
<p><code dir="ltr">PACKAGE</code> is the default.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t9" headers="r1c1-t9"><code dir="ltr"><span class="codeinlineitalic">CompilerParametersClause</span></code></td>
<td class="cellalignment6332" headers="r5c1-t9 r1c2-t9">Use this optional clause to specify a value for one of the PL/SQL persistent compiler parameters. The PL/SQL persistent compiler parameters are <code dir="ltr">PLSQL_OPTIMIZE_LEVEL</code>, <code dir="ltr">PLSCOPE_SETTINGS</code> and <code dir="ltr">NLS_LENGTH_SEMANTICS</code>.
<p>You can specify each parameter once in the statement.</p>
<p>If you omit a parameter from this clause and you specify <code dir="ltr">REUSE SETTINGS</code>, then if a value was specified for the parameter in an earlier compilation, TimesTen uses that earlier value. If you omit a parameter and either you do not specify <code dir="ltr">REUSE SETTINGS</code> or no value has been specified for the parameter in an earlier compilation, then TimesTen obtains the value for the parameter from the session environment.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t9" headers="r1c1-t9"><code dir="ltr">REUSE SETTINGS</code></td>
<td class="cellalignment6332" headers="r6c1-t9 r1c2-t9">Use this optional clause to prevent TimesTen from dropping and reacquiring compiler switch settings. When you specify <code dir="ltr">REUSE SETTINGS</code>, TimesTen preserves the existing settings and uses them for the compilation of any parameters for which values are not specified.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1093"></a>Description</p>
<ul>
<li>
<p>When you recompile a package specification, TimesTen invalidates local objects that depend on the specification, such as procedures that call procedures or functions in the package. The body of the package also depends on the specification. If you subsequently reference one of these dependent objects without first explicitly recompiling it, then TimesTen recompiles it implicitly at runtime.</p>
</li>
<li>
<p>When you recompile a package body, TimesTen does not invalidate objects that depend on the package specification. TimesTen first recompiles objects upon which the body depends, if any of those objects are invalid. If TimesTen recompiles the body successfully, then the body become valid.</p>
</li>
<li>
<p>When you recompile a package, both the specification and the body are explicitly recompiled. If there are no compilation errors, then the specification and body become valid. If there are compilation errors, then TimesTen returns an error and the package remains invalid.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1094"></a>See also</p>
<br/>
<code dir="ltr"><a href="#CHDGJEGG">CREATE PACKAGE</a></code></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACIEDDE"></a>
<div id="TTSQL283" class="refsect1">
<h2 class="refsect1"><a id="sthref1095"></a><a id="sthref1096"></a>ALTER PROCEDURE</h2>
<p>The <code dir="ltr">ALTER PROCEDURE</code> statement recompiles a standalone stored procedure. Explicit recompilation eliminates the need for implicit runtime recompilation and prevents associated runtime compilation errors and performance overhead.</p>
<p>To recompile a procedure that is part of a package, recompile the package using the <code dir="ltr"><a href="#CACFECCB">ALTER PACKAGE</a></code> statement.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1097"></a>Required privilege</p>
<p>No privilege is required for the procedure owner.</p>
<p><code dir="ltr">ALTER ANY PROCEDURE</code> for another user&#39;s procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1098"></a>SQL syntax</p>
<pre dir="ltr">ALTER PROCEDURE [<span class="italic">Owner</span>.]<span class="italic">ProcedureName</span><span class="codeinlineitalic"> </span>COMPILE
      [<span class="codeinlineitalic">CompilerParametersClause</span> [...]] 
      [REUSE SETTINGS] 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1099"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters of ALTER USER." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t10">Parameter</th>
<th class="cellalignment6331" id="r1c2-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t10" headers="r1c1-t10"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">ProcedureName</span></code></td>
<td class="cellalignment6332" headers="r2c1-t10 r1c2-t10">Name of the procedure to be recompiled.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t10" headers="r1c1-t10"><code dir="ltr">COMPILE</code></td>
<td class="cellalignment6332" headers="r3c1-t10 r1c2-t10">Required keyword that causes recompilation of the procedure. If the procedure does not compile successfully, use the <code dir="ltr">ttIsql</code> command <code dir="ltr">SHOW ERRORS</code> to display the compiler error messages.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t10" headers="r1c1-t10"><code dir="ltr"><span class="codeinlineitalic">CompilerParametersClause</span></code></td>
<td class="cellalignment6332" headers="r4c1-t10 r1c2-t10">Use this optional clause to specify a value for one of the PL/SQL persistent compiler parameters. The PL/SQL persistent compiler parameters are <code dir="ltr">PLSQL_OPTIMIZE_LEVEL</code>, <code dir="ltr">PLSCOPE_SETTINGS</code> and <code dir="ltr">NLS_LENGTH_SEMANTICS</code>.
<p>You can specify each parameter once in the statement.</p>
<p>If you omit a parameter from this clause and you specify <code dir="ltr">REUSE SETTINGS</code>, then if a value was specified for the parameter in an earlier compilation, TimesTen uses that earlier value. If you omit a parameter and either you do not specify <code dir="ltr">REUSE SETTINGS</code> or no value has been specified for the parameter in an earlier compilation, then TimesTen obtains the value for the parameter from the session environment.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t10" headers="r1c1-t10"><code dir="ltr">REUSE SETTINGS</code></td>
<td class="cellalignment6332" headers="r5c1-t10 r1c2-t10">Use this optional clause to prevent TimesTen from dropping and reacquiring compiler switch settings. When you specify <code dir="ltr">REUSE SETTINGS</code>, TimesTen preserves the existing settings and uses them for the compilation of any parameters for which values are not specified.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1100"></a>Description</p>
<ul>
<li>
<p>The <code dir="ltr">ALTER PROCEDURE</code> statement does not change the declaration or definition of an existing procedure. To redeclare or redefine a procedure, use the <code dir="ltr"><a href="#CACCAHCB">CREATE PROCEDURE</a></code> statement.</p>
</li>
<li>
<p>TimesTen first recompiles objects upon which the procedure depends, if any of those objects are invalid.</p>
</li>
<li>
<p>TimesTen also invalidates any objects that depend on the procedure, such as procedures that call the recompiled procedure or package bodies that define procedures that call the recompiled procedure.</p>
</li>
<li>
<p>If TimesTen recompiles the procedure successfully, then the procedure becomes valid. If recompiling the procedure results in compilation errors, then TimesTen returns an error and the procedure remains invalid. Use the <code dir="ltr">ttIsql</code> command <code dir="ltr">SHOW ERRORS</code> to display compilation errors.</p>
</li>
<li>
<p>During recompilation, TimesTen drops all persistent compiler settings, retrieves them again from the session, and stores them at the end of compilation. To avoid this process, specify the <code dir="ltr">REUSE SETTINGS</code> clause.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1101"></a>Examples</p>
<p>Query the system view <code dir="ltr">USER_PLSQL_OBJECT_SETTINGS</code> to check <code dir="ltr">PLSQL_OPTIMIZE_LEVEL</code> and <code dir="ltr">PLSCOPE_SETTINGS</code> for procedure <code dir="ltr"><span class="codeinlineitalic">query_emp</span></code>. Alter <code dir="ltr"><span class="codeinlineitalic">query_emp</span></code> by changing <code dir="ltr">PLSQL_OPTIMIZE_LEVEL</code> to 3. Verify results.</p>
<pre dir="ltr">Command&gt; SELECT PLSQL_OPTIMIZE_LEVEL, PLSCOPE_SETTINGS
       &gt; FROM user_plsql_object_settings WHERE  name = &#39;QUERY_EMP&#39;;
&lt; 2, IDENTIFIERS:NONE &gt;
1 row found.

Command&gt; ALTER PROCEDURE query_emp COMPILE PLSQL_OPTIMIZE_LEVEL = 3;
 
Procedure altered.
 
Command&gt; SELECT PLSQL_OPTIMIZE_LEVEL, PLSCOPE_SETTINGS
       &gt; FROM user_plsql_object_settings WHERE  name = &#39;QUERY_EMP&#39;;
&lt; 3, IDENTIFIERS:NONE &gt;
1 row found.
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1102"></a>See also</p>
<br/>
<code dir="ltr"><a href="#CACCAHCB">CREATE PROCEDURE</a></code></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i990933"></a>
<div id="TTSQL284" class="refsect1">
<h2 class="refsect1"><a id="sthref1103"></a><a id="sthref1104"></a>ALTER REPLICATION</h2>
<p>The <code dir="ltr">ALTER REPLICATION</code> statement adds, alters, or drops replication elements and changes the replication attributes of participating databases involved in a classic replication scheme.</p>
<p>Most <code dir="ltr">ALTER REPLICATION</code> operations are supported only when the replication agent is stopped (<code dir="ltr">ttAdmin</code> <code dir="ltr">-repStop</code>). However, it is possible to dynamically add a subscriber database to a replication scheme while the replication agent is running. See <a class="olink TTREP481" href="../TTREP/alter.htm#TTREP481">&#34;Altering a Classic Replication Scheme&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span> for more information.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1105"></a>Required privilege</p>
<p><code dir="ltr">ADMIN</code></p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1106"></a>SQL syntax</p>
<p>The <code dir="ltr">ALTER REPLICATION</code> statement has the syntax:</p>
<pre dir="ltr">ALTER REPLICATION [<span class="italic">Owner.</span>]<span class="italic">ReplicationSchemeName</span>
<span class="italic">     ElementOperation </span>[...] | <span class="italic">StoreOperation </span>|
     <span class="italic">NetworkOperation</span> [...]
</pre>
<p>Specify <code dir="ltr"><span class="codeinlineitalic">ElementOperation</span></code> one or more times:</p>
<pre dir="ltr">ADD ELEMENT <span class="italic">ElementName</span>
   { DATASTORE | 
     { TABLE [<span class="italic">Owner</span>.]<span class="italic">TableName</span> [<span class="italic">CheckConflicts</span>] } | 
       SEQUENCE [<span class="italic">Owner</span>.]<span class="italic">SequenceName</span> }
   { MASTER | PROPAGATOR } <span class="italic">FullStoreName</span>
   { SUBSCRIBER <span class="italic">FullStoreName</span> [,... ] [<span class="italic">ReturnServiceAttribute</span>] } [ ... ] }
   { INCLUDE | EXCLUDE }
   { TABLE [[<span class="italic">Owner</span>.]<span class="italic">TableName</span>[,...]] | 
     CACHE GROUP [[<span class="italic">Owner</span>.]<span class="italic">CacheGroupName</span>[,...]] | 
     SEQUENCE [[<span class="italic">Owner</span>.]<span class="italic">SequenceName</span>[,...]] } [,...]

ALTER ELEMENT { <span class="italic">ElementName</span> | * IN <span class="italic">FullStoreName </span>]
    ADD SUBSCRIBER <span class="italic">FullStoreName</span> [,...] [<span class="italic">ReturnServiceAttribute</span>] |
        ALTER SUBSCRIBER <span class="italic">FullStoreName</span> [,...]   |
            SET [<span class="italic">ReturnServiceAttribute</span>]   |
        DROP SUBSCRIBER <span class="italic">FullStoreName</span> [,... ]

ALTER ELEMENT * IN <span class="italic">FullStoreName</span>
    SET { MASTER | PROPAGATOR } <span class="italic">FullStoreName</span>

ALTER ELEMENT <span class="italic">ElementName</span>
    {<a id="sthref1107"></a>SET NAME <span class="italic">NewElementName </span>| SET <span class="italic">CheckConflicts</span>}

ALTER ELEMENT <span class="italic">ElementName</span> 
    { INCLUDE | EXCLUDE } { TABLE [<span class="italic">Owner</span>.]<span class="italic">TableName</span> |
          CACHE GROUP [<span class="italic">Owner</span>.]<span class="italic">CacheGroupName</span> | 
          SEQUENCE [<span class="italic">Owner</span>.]<span class="italic">SequenceName </span>}[,...] 

DROP ELEMENT { <span class="italic">ElementName</span> | * IN <span class="italic">FullStoreName</span> }
</pre>
<p><code dir="ltr"><span class="codeinlineitalic">CheckConflicts</span></code> can only be set when replicating <code dir="ltr">TABLE</code> elements. The syntax is described in <a href="#BABIGDCE">&#34;CHECK CONFLICTS&#34;</a>.</p>
<p>Syntax for <code dir="ltr"><span class="codeinlineitalic">ReturnServiceAttribute</span></code> is:</p>
<pre dir="ltr">{ RETURN RECEIPT [BY REQUEST] | NO RETURN }
</pre>
<p><code dir="ltr"><span class="codeinlineitalic">StoreOperation</span></code> clauses:</p>
<pre dir="ltr">ADD STORE <span class="italic">FullStoreName</span> [<span class="italic">StoreAttribute</span> [... ]]
ALTER STORE <span class="italic">FullStoreName</span> SET <span class="italic">StoreAttribute</span> [... ]
</pre>
<p>Syntax for the <code dir="ltr"><span class="codeinlineitalic">StoreAttribute</span></code> is:</p>
<pre dir="ltr">DISABLE RETURN {SUBSCRIBER | ALL} <span class="italic">NumFailures</span>
RETURN SERVICES {ON | OFF} WHEN [REPLICATION] STOPPED
DURABLE COMMIT {ON | OFF}
RESUME RETURN <span class="italic">Milliseconds</span> 
LOCAL COMMIT ACTION {NO ACTION | COMMIT}
RETURN WAIT TIME <span class="italic">Seconds</span>
COMPRESS TRAFFIC {ON | OFF} 
PORT <span class="italic">PortNumber</span> 
TIMEOUT <span class="italic">Seconds</span> 
FAILTHRESHOLD <span class="italic">Value</span>
CONFLICT REPORTING SUSPEND AT <span class="italic">Value</span> 
CONFLICT REPORTING RESUME AT <span class="italic">Value</span> 
TABLE DEFINITION CHECKING {EXACT|RELAXED}
</pre>
<p>Specify <code dir="ltr"><span class="codeinlineitalic">NetworkOperation</span></code> one or more times:</p>
<pre dir="ltr">ADD ROUTE MASTER <span class="italic">FullStoreName</span> SUBSCRIBER <span class="italic">FullStoreName</span>
  { { MASTERIP <span class="italic">MasterHost</span> | SUBSCRIBERIP <span class="italic">SubscriberHost</span> }
      PRIORITY <span class="italic">Priority</span> } [...] 

DROP ROUTE MASTER <span class="italic">FullStoreName</span> SUBSCRIBER <span class="italic">FullStoreName</span>
  { MASTERIP <span class="italic">MasterHost</span> | SUBSCRIBERIP <span class="italic">SubscriberHost</span> } [...] 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1108"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters of ALTER REPLICATION." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t11">Parameter</th>
<th class="cellalignment6331" id="r1c2-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t11" headers="r1c1-t11"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">ReplicationSchemeName</span></code></td>
<td class="cellalignment6332" headers="r2c1-t11 r1c2-t11">Name assigned to the classic replication scheme.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t11" headers="r1c1-t11"><a id="sthref1109"></a><a id="sthref1110"></a><code dir="ltr">ADD ELEMENT</code> <code dir="ltr"><span class="codeinlineitalic">ElementName</span></code></td>
<td class="cellalignment6332" headers="r3c1-t11 r1c2-t11">Adds a new element to the existing classic replication scheme. <code dir="ltr"><span class="codeinlineitalic">ElementName</span></code> is an identifier of up to 30 characters. With <code dir="ltr">DATASTORE</code> elements, the <code dir="ltr"><span class="codeinlineitalic">ElementName</span></code> must be unique with respect to other <code dir="ltr">DATASTORE</code> element names within the first 20 characters.
<p>If the element is a <code dir="ltr">DATASTORE</code>, all tables and cache groups are included in the database. <code dir="ltr">SEQUENCE</code> elements that are part of the database do not have their return services modified by this statement.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t11" headers="r1c1-t11"><code dir="ltr">ADD ELEMENT</code> <code dir="ltr"><span class="codeinlineitalic">ElementName</span></code> <code dir="ltr">DATASTORE</code>
<p><code dir="ltr">{INCLUDE | EXCLUDE}</code></p>
<p><code dir="ltr">{TABLE [[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">TableName</span></code> <code dir="ltr">[,...]]|</code></p>
<p><code dir="ltr">CACHE GROUP</code> <code dir="ltr">[[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">CacheGroupName</span></code> <code dir="ltr">[,...]]|</code></p>
<p><code dir="ltr">SEQUENCE</code> <code dir="ltr">[[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">SequenceName</span></code><code dir="ltr">[,...]]} [,...]</code></p>
</td>
<td class="cellalignment6332" headers="r4c1-t11 r1c2-t11">Adds a new <code dir="ltr">DATASTORE</code> element to the existing classic replication scheme. <code dir="ltr"><span class="codeinlineitalic">ElementName</span></code> is an identifier of up to 30 characters. With <code dir="ltr">DATASTORE</code> elements, the <code dir="ltr"><span class="codeinlineitalic">ElementName</span></code> must be unique with respect to other <code dir="ltr">DATASTORE</code> element names within the first 20 characters.
<p><code dir="ltr">INCLUDE</code> includes in the database only the tables and cache groups listed. Use one <code dir="ltr">INCLUDE</code> clause for each object type (table, cache group or sequence).</p>
<p><code dir="ltr">EXCLUDE</code> includes in the database all tables and cache groups <span class="italic">except</span> the tables, cache groups and sequences listed. Use one <code dir="ltr">EXCLUDE</code> clause for each object type (table, cache group or sequence).</p>
<p>If the element is a sequence, <code dir="ltr">RETURN</code> attributes are not applied, no conflict checking is supported and sequences that cycle return an error.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t11" headers="r1c1-t11"><a id="sthref1111"></a><a id="sthref1112"></a><code dir="ltr">ADD SUBSCRIBER</code> <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code></td>
<td class="cellalignment6332" headers="r5c1-t11 r1c2-t11">Indicates an additional subscriber database. <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code> is the database file name specified in the <code dir="ltr">DataStore</code> attribute of the DSN description.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t11" headers="r1c1-t11"><a id="sthref1113"></a><a id="sthref1114"></a><code dir="ltr">ALTER ELEMENT * IN</code> <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code>
<p><code dir="ltr">SET { MASTER | PROPAGATOR }</code> <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code></p>
</td>
<td class="cellalignment6332" headers="r6c1-t11 r1c2-t11">Makes a change to all elements for which <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code> is the <code dir="ltr">MASTER</code> or <code dir="ltr">PROPAGATOR</code>. <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code> is the database file name specified in the <code dir="ltr">DataStore</code> attribute of the DSN description.
<p>This syntax can be used on a set of element names to:</p>
<ul>
<li>
<p>Add, alter, or drop subscribers.</p>
</li>
<li>
<p>Set the <code dir="ltr">MASTER</code> or <code dir="ltr">PROPAGATOR</code> status of the element set.</p>
</li>
</ul>
<p><code dir="ltr">SEQUENCE</code> elements that are part of the database being altered do not have their return services modified by this statement.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r7c1-t11" headers="r1c1-t11"><code dir="ltr">ALTER ELEMENT</code> <code dir="ltr"><span class="codeinlineitalic">ElementName</span></code></td>
<td class="cellalignment6332" headers="r7c1-t11 r1c2-t11">Name of the element to which a subscriber is to be added or dropped.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r8c1-t11" headers="r1c1-t11"><code dir="ltr">ALTER ELEMENT</code>
<p><code dir="ltr"><span class="codeinlineitalic">ElementName1</span></code></p>
<p><code dir="ltr">SET NAME</code> <code dir="ltr"><span class="codeinlineitalic">ElementName2</span></code></p>
</td>
<td class="cellalignment6332" headers="r8c1-t11 r1c2-t11">Renames <code dir="ltr"><span class="codeinlineitalic">ElementName1</span></code> with the name <code dir="ltr"><span class="codeinlineitalic">ElementName2</span></code>. You can only rename elements of type <code dir="ltr">TABLE</code>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r9c1-t11" headers="r1c1-t11"><code dir="ltr">ALTER ELEMENT</code> <code dir="ltr"><span class="codeinlineitalic">ElementName</span></code>
<p><code dir="ltr">{INCLUDE|EXCLUDE}</code></p>
<p><code dir="ltr">{TABLE [</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">TableName</span></code> <code dir="ltr">|</code></p>
<p><code dir="ltr">CACHE GROUP [</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">CacheGroupName</span></code> <code dir="ltr">| SEQUENCE [</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">SequenceName</span></code>} <code dir="ltr">[,...]</code></p>
</td>
<td class="cellalignment6332" headers="r9c1-t11 r1c2-t11"><code dir="ltr"><span class="codeinlineitalic">ElementName</span></code> is the name of the element to be altered.
<p><code dir="ltr">INCLUDE</code> adds to the database the tables and cache groups listed. Use one <code dir="ltr">INCLUDE</code> clause for each object type (table or cache group).</p>
<p><code dir="ltr">EXCLUDE</code> removes from the database the tables and cache groups listed. Use one <code dir="ltr">EXCLUDE</code> clause for each object type (table, cache group or sequence).</p>
<p>If the element is a sequence, <code dir="ltr">RETURN</code> attributes are not applied, no conflict checking is supported and sequences that cycle return an error.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r10c1-t11" headers="r1c1-t11"><a id="sthref1115"></a><a id="sthref1116"></a><code dir="ltr">ALTER SUBSCRIBER</code> <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code>
<p><code dir="ltr">SET RETURN RECEIPT</code></p>
<p><code dir="ltr">[BY REQUEST]|NO RETURN</code></p>
</td>
<td class="cellalignment6332" headers="r10c1-t11 r1c2-t11">Indicates an alteration to a subscriber database to enable, disable, or change the return receipt service. <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code> is the database file name specified in the <code dir="ltr">DataStore</code> attribute of the DSN description.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r11c1-t11" headers="r1c1-t11"><code dir="ltr"><span class="codeinlineitalic">CheckConflicts</span></code><a id="sthref1117"></a></td>
<td class="cellalignment6332" headers="r11c1-t11 r1c2-t11">Check for replication conflicts when simultaneously writing to bidirectionally replicating <code dir="ltr">TABLE</code> elements between databases. You cannot check for conflicts when replicating elements of type <code dir="ltr">DATASTORE</code>. See <a href="#i992387">&#34;CHECK CONFLICTS&#34;</a>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r12c1-t11" headers="r1c1-t11"><code dir="ltr">COMPRESS TRAFFIC {ON | OFF}</code></td>
<td class="cellalignment6332" headers="r12c1-t11 r1c2-t11">Compress replicated traffic to reduce the amount of network bandwidth. <code dir="ltr">ON</code> specifies that all replicated traffic for the database defined by <code dir="ltr">STORE</code> be compressed. <code dir="ltr">OFF</code> (the default) specifies no compression. See <a class="olink TTREP200" href="../TTREP/attrib.htm#TTREP200">&#34;Compressing replicated traffic&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span> for details.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r13c1-t11" headers="r1c1-t11"><code dir="ltr">CONFLICT REPORTING SUSPEND AT</code> <code dir="ltr"><span class="codeinlineitalic">Value</span></code></td>
<td class="cellalignment6332" headers="r13c1-t11 r1c2-t11">Suspends conflict resolution reporting.
<p><code dir="ltr"><span class="codeinlineitalic">Value</span></code> is a non-negative integer. The default is 0 and means never suspend. Conflict reporting is suspended when the rate of conflict exceeds <code dir="ltr"><span class="codeinlineitalic">Value</span></code>. If you set <code dir="ltr"><span class="codeinlineitalic">Value</span></code> to 0, conflict reporting suspension is turned off.</p>
<p>This clause is valid for table level replication.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r14c1-t11" headers="r1c1-t11"><code dir="ltr">CONFLICT REPORTING RESUME AT</code> <code dir="ltr"><span class="codeinlineitalic">Value</span></code></td>
<td class="cellalignment6332" headers="r14c1-t11 r1c2-t11">Resumes conflict resolution reporting.
<p><code dir="ltr"><span class="codeinlineitalic">Value</span></code> is a non-negative integer. Conflict reporting is resumed when the rate of conflict falls below <code dir="ltr"><span class="codeinlineitalic">Value.</span></code> The default is 1.</p>
<p>This clause is valid for table level replication.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r15c1-t11" headers="r1c1-t11"><code dir="ltr">DISABLE RETURN</code> <code dir="ltr">{SUBSCRIBER | ALL}</code> <code dir="ltr"><span class="codeinlineitalic">NumFailures</span></code></td>
<td class="cellalignment6332" headers="r15c1-t11 r1c2-t11">Set the return service failure policy so that return service blocking is disabled after the number of timeouts specified by <code dir="ltr"><span class="codeinlineitalic">NumFailures</span></code>. Selecting <code dir="ltr">SUBSCRIBER</code> applies this policy only to the subscriber that fails to acknowledge replicated updates within the set timeout period. <code dir="ltr">ALL</code> applies this policy to all subscribers should any of the subscribers fail to respond. This failure policy can be specified for either the <code dir="ltr">RETURN RECEIPT</code> or <code dir="ltr">RETURN TWOSAFE</code> service.
<p>If <code dir="ltr">DISABLE RETURN</code> is specified but <code dir="ltr">RESUME RETURN</code> is not specified, the return services remain off until the replication agent for the database has been restarted.</p>
<p>See <a class="olink TTREP795" href="../TTREP/attrib.htm#TTREP795">&#34;Managing return service timeout errors and replication state changes&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span> for details.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r16c1-t11" headers="r1c1-t11"><code dir="ltr">DURABLE COMMIT {ON | OFF}</code></td>
<td class="cellalignment6332" headers="r16c1-t11 r1c2-t11">Overrides the <code dir="ltr">DurableCommits</code> general connection attribute setting. <code dir="ltr">DURABLE COMMIT ON</code> enables durable commits regardless of whether the replication agent is running or stopped.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r17c1-t11" headers="r1c1-t11"><a id="sthref1118"></a><a id="sthref1119"></a><code dir="ltr">DROP ELEMENT * IN</code> <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code></td>
<td class="cellalignment6332" headers="r17c1-t11 r1c2-t11">Deletes the replication description of all elements for which <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code> is the <code dir="ltr">MASTER</code>. <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code> is the database file name specified in the <code dir="ltr">DataStore</code> attribute of the DSN description.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r18c1-t11" headers="r1c1-t11"><code dir="ltr">DROP ELEMENT</code> <code dir="ltr"><span class="codeinlineitalic">ElementName</span></code></td>
<td class="cellalignment6332" headers="r18c1-t11 r1c2-t11">Deletes the replication description of <code dir="ltr"><span class="codeinlineitalic">ElementName</span></code>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r19c1-t11" headers="r1c1-t11"><code dir="ltr"><a id="sthref1120"></a><a id="sthref1121"></a>DROP SUBSCRIBER</code> <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code></td>
<td class="cellalignment6332" headers="r19c1-t11 r1c2-t11">Indicates that updates should no longer be sent to the specified subscriber database. This operation fails if the classic replication scheme has only one subscriber. <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code> is the database file name specified in the <code dir="ltr">DataStore</code> attribute of the DSN description.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r20c1-t11" headers="r1c1-t11"><a id="sthref1122"></a><a id="sthref1123"></a><code dir="ltr">FAILTHRESHOLD</code> <code dir="ltr"><span class="codeinlineitalic">Value</span></code></td>
<td class="cellalignment6332" headers="r20c1-t11 r1c2-t11">The number of log files that can accumulate for a subscriber database. If this value is exceeded, the subscriber is set to the <code dir="ltr">Failed</code> state.
<p>The value 0 means &#34;No Limit.&#34; This is the default.</p>
<p>See <a class="olink TTREP205" href="../TTREP/attrib.htm#TTREP205">&#34;Setting the transaction log failure threshold&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span> for more information.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r21c1-t11" headers="r1c1-t11"><code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code></td>
<td class="cellalignment6332" headers="r21c1-t11 r1c2-t11">The database, specified as one of the following:
<ul>
<li>
<p><code dir="ltr">SELF</code></p>
</li>
<li>
<p>The prefix of the database file name</p>
</li>
</ul>
<p>For example, if the database path is <code dir="ltr"><span class="codeinlineitalic">directory</span></code><code dir="ltr">/</code><code dir="ltr"><span class="codeinlineitalic">subdirectory</span></code><code dir="ltr">/data.ds0</code>, then <code dir="ltr">data</code> is the database name.</p>
<p>This is the database file name specified in the <code dir="ltr">DataStore</code> attribute of the DSN description with optional host ID in the form:</p>
<p><code dir="ltr"><span class="codeinlineitalic">DataStoreName</span></code> <code dir="ltr">[ON</code> <code dir="ltr"><span class="codeinlineitalic">Host</span></code><code dir="ltr">]</code></p>
<p><code dir="ltr"><span class="codeinlineitalic">Host</span></code> can be either an IP address or a literal host name assigned to one or more IP addresses, as described in <a class="olink TTREP401" href="../TTREP/attrib.htm#TTREP401">&#34;Configuring the network&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span>. Host names containing special characters must be surrounded by double quotes. For example: <code dir="ltr">&#34;MyHost-500&#34;</code>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r22c1-t11" headers="r1c1-t11"><code dir="ltr">LOCAL COMMIT ACTION</code> <code dir="ltr">{NO ACTION | COMMIT}</code></td>
<td class="cellalignment6332" headers="r22c1-t11 r1c2-t11">Specifies the default action to be taken for a <code dir="ltr">RETURN TWOSAFE</code> transaction in the event of a timeout.
<p><code dir="ltr">NO ACTION</code>: On timeout, the commit function returns to the application, leaving the transaction in the same state it was in when it entered the commit call, with the exception that the application is not able to update any replicated tables. The application can only reissue the commit. The transaction may not be rolled back. This is the default.</p>
<p><code dir="ltr">COMMIT</code>: On timeout, the commit function attempts to perform a <code dir="ltr">COMMIT</code> to end the transaction locally. No more operations are possible on the same transaction.</p>
<p>This setting can be overridden for specific transactions by calling the <code dir="ltr">ttRepSyncSet</code> procedure with the <code dir="ltr">localAction</code> parameter.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r23c1-t11" headers="r1c1-t11"><a id="sthref1124"></a><a id="sthref1125"></a><code dir="ltr">MASTER</code> <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code></td>
<td class="cellalignment6332" headers="r23c1-t11 r1c2-t11">The database on which applications update the specified element. The <code dir="ltr">MASTER</code> database sends updates to its <code dir="ltr">SUBSCRIBER</code> databases. <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code> is the database file name specified in the <code dir="ltr">DataStore</code> attribute of the DSN description.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r24c1-t11" headers="r1c1-t11"><code dir="ltr">NO RETURN</code></td>
<td class="cellalignment6332" headers="r24c1-t11 r1c2-t11">Specifies that no return service is to be used. This is the default.
<p>For details on the use of the return services, see <a class="olink TTREP183" href="../TTREP/attrib.htm#TTREP183">&#34;Using a return service&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r25c1-t11" headers="r1c1-t11"><code dir="ltr">PORT</code> <code dir="ltr"><span class="codeinlineitalic">PortNumber</span></code></td>
<td class="cellalignment6332" headers="r25c1-t11 r1c2-t11">The TCP/IP port number on which the replication agent on this database listens for connections. If not specified, the replication agent allocates a port number automatically.
<p>All TimesTen databases that replicate to each other must use the same port number.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r26c1-t11" headers="r1c1-t11"><a id="sthref1126"></a><a id="sthref1127"></a><code dir="ltr">PROPAGATOR</code> <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code></td>
<td class="cellalignment6332" headers="r26c1-t11 r1c2-t11">The database that receives replicated updates and passes them on to other databases.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r27c1-t11" headers="r1c1-t11"><code dir="ltr">RESUME RETURN</code> <code dir="ltr"><span class="codeinlineitalic">Milliseconds</span></code></td>
<td class="cellalignment6332" headers="r27c1-t11 r1c2-t11">If return service blocking has been disabled by <code dir="ltr">DISABLE RETURN</code>, this attribute sets the policy on when to re-enable return service blocking. Return service blocking is re-enabled as soon as the failed subscriber acknowledges the replicated update in a period of time that is less than the specified <code dir="ltr"><span class="codeinlineitalic">Milliseconds</span></code>.
<p>If <code dir="ltr">DISABLE RETURN</code> is specified but <code dir="ltr">RESUME RETURN</code> is not specified, the return services remain off until the replication agent for the database has been restarted.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r28c1-t11" headers="r1c1-t11"><a id="sthref1128"></a><a id="sthref1129"></a><code dir="ltr">RETURN RECEIPT [BY REQUEST]</code></td>
<td class="cellalignment6332" headers="r28c1-t11 r1c2-t11">Enables the return receipt service, so that applications that commit a transaction to a master database are blocked until the transaction is received by all subscribers.
<p><code dir="ltr">RETURN RECEIPT</code> applies the service to all transactions. If you specify <code dir="ltr">RETURN RECEIPT BY REQUEST</code>, you can use the <code dir="ltr">ttRepSyncSet</code> procedure to enable the return receipt service for selected transactions. For details on the use of the return services, see <a class="olink TTREP183" href="../TTREP/attrib.htm#TTREP183">&#34;Using a return service&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r29c1-t11" headers="r1c1-t11"><code dir="ltr">RETURN SERVICES {ON | OFF} WHEN [REPLICATION] STOPPED</code></td>
<td class="cellalignment6332" headers="r29c1-t11 r1c2-t11">Sets return services on or off when replication is disabled (stopped or paused state).
<p><code dir="ltr">OFF</code> disables return services when replication is disabled and is the default for <code dir="ltr">RETURN RECEIPT</code> service. <code dir="ltr">ON</code> allows return services to continue to be enabled when replication is disabled and is the default for <code dir="ltr">RETURN TWOSAFE</code> service.</p>
<p>See <a class="olink TTREP795" href="../TTREP/attrib.htm#TTREP795">&#34;Managing return service timeout errors and replication state changes&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span> for details.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r30c1-t11" headers="r1c1-t11"><a id="sthref1130"></a><a id="sthref1131"></a><code dir="ltr">RETURN TWOSAFE [BY REQUEST]</code></td>
<td class="cellalignment6332" headers="r30c1-t11 r1c2-t11">Enables the return twosafe service, so that applications that commit a transaction to a master database are blocked until the transaction is committed on all subscribers.
<p><code dir="ltr">RETURN TWOSAFE</code> applies the service to all transactions. If you specify <code dir="ltr">RETURN TWOSAFE BY REQUEST</code>, you can use the <code dir="ltr">ttRepSyncSet</code> procedure to enable the return receipt service for selected transactions. For details on the use of the return services, see <a class="olink TTREP183" href="../TTREP/attrib.htm#TTREP183">&#34;Using a return service&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r31c1-t11" headers="r1c1-t11"><code dir="ltr">RETURN WAIT TIME</code> <code dir="ltr"><span class="codeinlineitalic">Seconds</span></code></td>
<td class="cellalignment6332" headers="r31c1-t11 r1c2-t11">Specifies the number of seconds to wait for return service acknowledgment. The default value is 10 seconds. A value of 0 (zero) means there is no timeout. Your application can override this timeout setting by calling the <code dir="ltr">ttRepSyncSet</code> procedure with the <code dir="ltr">returnWait</code> parameter.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r32c1-t11" headers="r1c1-t11"><code dir="ltr">SET {MASTER | PROPAGATOR}</code> <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code></td>
<td class="cellalignment6332" headers="r32c1-t11 r1c2-t11">Sets the given database to be the <code dir="ltr">MASTER</code> or <code dir="ltr">PROPAGATOR</code> of the given elements. The <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code> must the be database&#39;s file base name.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r33c1-t11" headers="r1c1-t11"><a id="sthref1132"></a><a id="sthref1133"></a><code dir="ltr">SUBSCRIBER</code> <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code></td>
<td class="cellalignment6332" headers="r33c1-t11 r1c2-t11">A database that receives updates from the <code dir="ltr">MASTER</code> databases. <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code> is the database file name specified in the <code dir="ltr">DataStore</code> attribute of the DSN description.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r34c1-t11" headers="r1c1-t11"><code dir="ltr">TABLE DEFINITION CHECKING {EXACT|RELAXED}</code></td>
<td class="cellalignment6332" headers="r34c1-t11 r1c2-t11">Specifies type of table definition checking that occurs on the subscriber:
<ul>
<li>
<p><code dir="ltr">EXACT</code> - The tables must be identical on master and subscriber.</p>
</li>
<li>
<p><code dir="ltr">RELAXED</code> - The tables must have the same key definition, number of columns and column data types.</p>
</li>
</ul>
<p>The default is <code dir="ltr">RELAXED</code>.</p>
<p><span class="bold">Note:</span> If you use <code dir="ltr">TABLE DEFINITION CHECKING EXACT</code>, use <code dir="ltr">ttMigrate -exactUpgrade</code> if you migrate the database. If you use <code dir="ltr">TABLE DEFINITION CHECKING RELAXED</code>, use <code dir="ltr">ttMigrate -relaxedUpgrade</code> if you migrate the database.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r35c1-t11" headers="r1c1-t11"><a id="sthref1134"></a><a id="sthref1135"></a><code dir="ltr">TIMEOUT</code> <code dir="ltr"><span class="codeinlineitalic">Seconds</span></code></td>
<td class="cellalignment6332" headers="r35c1-t11 r1c2-t11">The maximum number of seconds the replication agent waits for a response from remote replication agents. The default is 120 seconds.
<p><span class="bold">Note:</span> For large transactions that may cause a delayed response from the remote replication agent, the agent scales the timeout to increasingly larger values, as needed, based on the size of the transaction. This scaling will not occur, and the agent may time out waiting for responses, if you set <code dir="ltr">TIMEOUT</code> to less than or equal to 60 seconds for large transactions. Also see <a class="olink TTREP820" href="../TTREP/attrib.htm#TTREP820">&#34;Setting wait timeout for response from remote replication agents&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r36c1-t11" headers="r1c1-t11"><code dir="ltr">ADD ROUTE MASTER</code> <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code> <code dir="ltr">SUBSCRIBER</code> <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code></td>
<td class="cellalignment6332" headers="r36c1-t11 r1c2-t11">Adds <code dir="ltr"><span class="codeinlineitalic">NetworkOperation</span></code> to replication scheme. Enables you to control the network interface that a master store uses for every outbound connection to each of its subscriber stores.
<p>Can be specified more than once.</p>
<p>For <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code>, <code dir="ltr">ON</code> <code dir="ltr"><span class="codeinlineitalic">&#34;host</span></code><code dir="ltr">&#34;</code> must be specified.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r37c1-t11" headers="r1c1-t11"><code dir="ltr">DROP ROUTE MASTER</code> <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code> <code dir="ltr">SUBSCRIBER</code> <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code></td>
<td class="cellalignment6332" headers="r37c1-t11 r1c2-t11">Drops <code dir="ltr"><span class="codeinlineitalic">NetworkOperation</span></code> from the classic replication scheme.
<p>Can be specified more than once.</p>
<p>For <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code>, <code dir="ltr">ON</code> <code dir="ltr"><span class="codeinlineitalic">&#34;host&#34;</span></code> must be specified.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r38c1-t11" headers="r1c1-t11"><code dir="ltr">MASTERIP</code> <code dir="ltr"><span class="codeinlineitalic">MasterHost</span></code> <code dir="ltr">|</code> <code dir="ltr">SUBSCRIBERIP</code> <code dir="ltr"><span class="codeinlineitalic">SubscriberHost</span></code></td>
<td class="cellalignment6332" headers="r38c1-t11 r1c2-t11"><code dir="ltr"><span class="codeinlineitalic">MasterHost</span></code> and <code dir="ltr"><span class="codeinlineitalic">SubscriberHost</span></code> are the IP addresses for the network interface on the master and subscriber stores. Specify in dot notation or canonical format or in colon notation for IPV6.
<p>Clause can be specified more than once. Valid for both <code dir="ltr">ADD</code> and <code dir="ltr">DROP ROUTE MASTER</code>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r39c1-t11" headers="r1c1-t11"><code dir="ltr">PRIORITY</code> <code dir="ltr"><span class="codeinlineitalic">Priority</span></code></td>
<td class="cellalignment6332" headers="r39c1-t11 r1c2-t11">Variable expressed as an integer from 1 to 99. Denotes the priority of the IP address. Lower integral values have higher priority. An error is returned if multiple addresses with the same priority are specified. Controls the order in which multiple IP addresses are used to establish peer connections.
<p>Required syntax of <code dir="ltr"><span class="codeinlineitalic">NetworkOperation</span></code> clause. Follows <code dir="ltr">MASTERIP</code> <code dir="ltr"><span class="codeinlineitalic">MasterHost</span></code> <code dir="ltr">| SUBSCRIBERIP</code> <code dir="ltr"><span class="codeinlineitalic">SubscriberHost</span></code> clause.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1136"></a>Description</p>
<ul>
<li>
<p><a id="sthref1137"></a><a id="sthref1138"></a><code dir="ltr">ALTER ELEMENT DROP SUBSCRIBER</code> deletes a subscriber for a particular replication element.</p>
</li>
<li>
<p><code dir="ltr"><a id="sthref1139"></a><a id="sthref1140"></a>ALTER ELEMENT SET NAME</code> may be used to change the name of a replication element when it conflicts with one already defined at another database. <code dir="ltr">SET NAME</code> does not admit the use of <code dir="ltr">* IN</code> <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code>. The <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code> must be the database&#39;s file base name. For example, if the database file name is <code dir="ltr">data.ds0</code>, then <code dir="ltr">data</code> is the file base name.</p>
</li>
<li>
<p><code dir="ltr"><a id="sthref1141"></a><a id="sthref1142"></a>ALTER ELEMENT SET MASTER</code> may be used to change the master database for replication elements. The <code dir="ltr">* IN</code> <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code> option must be used for the <code dir="ltr">MASTER</code> operation. That is, a master database must transfer ownership of all of its replication elements, thereby giving up its master role entirely. Typically, this option is used in <code dir="ltr">ALTER REPLICATION</code> statements requested at <code dir="ltr">SUBSCRIBER</code> databases after the failure of a (common) <code dir="ltr">MASTER</code>.</p>
</li>
<li>
<p>To transfer ownership of the master elements to the subscriber:</p>
<ol>
<li>
<p>Manually drop the replicated elements by executing an <code dir="ltr">ALTER REPLICATION DROP ELEMENT</code> statement for each replicated table.</p>
</li>
<li>
<p>Use <code dir="ltr">ALTER REPLICATION ADD ELEMENT</code> to add each table back to the replication scheme, with the newly designated <code dir="ltr">MASTER</code> / <code dir="ltr">SUBSCRIBER</code> roles.</p>
</li>
</ol>
</li>
<li>
<p><code dir="ltr">ALTER REPLICATION ALTER ELEMENT SET MASTER</code> does not automatically retain the old master as a subscriber in the scheme. If this is desired, execute an <code dir="ltr">ALTER REPLICATION ALTER ELEMENT ADD SUBSCRIBER</code> statement.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
There is no <code dir="ltr">ALTER ELEMENT DROP MASTER</code>. Each replication element must have exactly one <code dir="ltr">MASTER</code> database, and the currently designated <code dir="ltr">MASTER</code> cannot be deleted from the replication scheme.</div>
</li>
<li>
<p>Stop the replication agent before you use the <code dir="ltr"><span class="codeinlineitalic">NetworkOperation</span></code> clause.</p>
</li>
<li>
<p>You cannot alter the following replication schemes with the <code dir="ltr">ALTER REPLICATION</code> statement:</p>
<ul>
<li>
<p>Any active standby pair. Instead, use <code dir="ltr"><a href="#i1027059">ALTER ACTIVE STANDBY PAIR</a></code>.</p>
</li>
<li>
<p>A Clusterware-managed active standby pair. Instead, perform the tasks described in <a class="olink TTREP295" href="../TTREP/cluster.htm#TTREP295">&#34;Changing the schema&#34;</a> section of the <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span>.</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1143"></a>Examples</p>
<p>This example sets up a classic replication scheme for an additional table <code dir="ltr">westleads</code> that is updated on database <code dir="ltr">west</code> and replicated to database <code dir="ltr">east</code>.</p>
<pre dir="ltr">ALTER REPLICATION r1
   ADD ELEMENT e3 TABLE westleads
     MASTER west ON &#34;westcoast&#34;
     SUBSCRIBER east ON &#34;eastcoast&#34;;
</pre>
<p>This example adds an additional subscriber (<code dir="ltr">backup</code>) to table <code dir="ltr">westleads</code>.</p>
<pre dir="ltr">ALTER REPLICATION r1
   ALTER ELEMENT e3
     ADD SUBSCRIBER backup ON &#34;backupserver&#34;;
</pre>
<p>This example changes the element name of table <code dir="ltr">westleads</code> from <code dir="ltr">e3</code> to <code dir="ltr">newelementname</code>.</p>
<pre dir="ltr">ALTER REPLICATION r1
   ALTER ELEMENT e3
     SET NAME newelementname;
</pre>
<p>This example makes <code dir="ltr">newwest</code> the master for all elements for which <code dir="ltr">west</code> currently is the master.</p>
<pre dir="ltr">ALTER REPLICATION r1
   ALTER ELEMENT * IN west
     SET MASTER newwest;
</pre>
<p>This element changes the port number for <code dir="ltr">east</code>.</p>
<pre dir="ltr">ALTER REPLICATION r1
   ALTER STORE east ON &#34;eastcoast&#34; SET PORT 22251;
</pre>
<p>This example adds <code dir="ltr">my.tab1</code> table to the <code dir="ltr">ds1</code> database element in <code dir="ltr">my.rep1</code> replication scheme.</p>
<pre dir="ltr">ALTER REPLICATION my.rep1
  ALTER ELEMENT ds1 DATASTORE
     INCLUDE TABLE my.tab1;
</pre>
<p>This example adds <code dir="ltr">my.cg1</code> cache group to <code dir="ltr">ds1</code> database in <code dir="ltr">my.rep1</code> replication scheme.</p>
<pre dir="ltr">ALTER REPLICATION my.rep1
  ALTER ELEMENT ds1 DATASTORE
     INCLUDE CACHE GROUP my.cg1;
</pre>
<p>This example adds <code dir="ltr">ds1</code> database to <code dir="ltr">my.rep1</code> replication scheme. Include <code dir="ltr">my.tab2</code> table, <code dir="ltr">my.cg2</code> cache group, and <code dir="ltr">my.cg3</code> cache group in the database.</p>
<pre dir="ltr">ALTER REPLICATION my.rep1
  ADD ELEMENT ds1 DATASTORE
     MASTER rep2
     SUBSCRIBER rep1, rep3
     INCLUDE TABLE my.tab2
     INCLUDE CACHE GROUP my.cg2, my.cg3;
</pre>
<p>This example adds <code dir="ltr">ds2</code> database to a replication scheme but exclude <code dir="ltr">my.tab1</code> table, <code dir="ltr">my.cg0</code> cache group and <code dir="ltr">my.cg1</code> cache group.</p>
<pre dir="ltr">ALTER REPLICATION my.rep1
  ADD ELEMENT ds2 DATASTORE
     MASTER rep2
     SUBSCRIBER rep1
     EXCLUDE TABLE my.tab1
     EXCLUDE CACHE GROUP my.cg0, my.cg1;
</pre>
<p>Add <code dir="ltr"><span class="codeinlineitalic">NetworkOperation</span></code> clause:</p>
<pre dir="ltr">ALTER REPLICATION r
ADD ROUTE MASTER rep1 ON &#34;machine1&#34; SUBSCRIBER rep2 ON &#34;machine2&#34;
MASTERIP &#34;1.1.1.1&#34; PRIORITY 1 SUBSCRIBERIP &#34;2.2.2.2&#34;
    PRIORITY 1
MASTERIP &#34;3.3.3.3&#34; PRIORITY 2 SUBSCRIBERIP &#34;4.4.4.4&#34; PRIORITY 2;
</pre>
<p>Drop <code dir="ltr"><span class="codeinlineitalic">NetworkOperation</span></code> clause:</p>
<pre dir="ltr">ALTER REPLICATION r
DROP ROUTE MASTER repl ON &#34;machine1&#34; SUBSCRIBER rep2 ON &#34;machine2&#34;
MASTERIP &#34;1.1.1.1&#34; SUBSCRIBERIP &#34;2.2.2.2&#34;
MASTERIP &#34;3.3.3.3&#34; SUBSCRIBERIP &#34;4.4.4.4&#34;;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1144"></a>See also</p>
<br/>
<code dir="ltr"><a href="#i1027059">ALTER ACTIVE STANDBY PAIR</a></code><br/>
<code dir="ltr"><a href="#i1438072">CREATE ACTIVE STANDBY PAIR</a></code><br/>
<code dir="ltr"><a href="#i992040">CREATE REPLICATION</a></code><br/>
<code dir="ltr"><a href="#i1028075">DROP ACTIVE STANDBY PAIR</a></code><br/>
<code dir="ltr"><a href="#g1513799">DROP REPLICATION</a></code><br/>
<p>To drop a table from a database, see <a class="olink TTREP514" href="../TTREP/alter.htm#TTREP514">&#34;Altering a replicated table in a classic replication scheme&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1333852"></a>
<div id="TTSQL285" class="refsect1">
<h2 class="refsect1"><a id="sthref1145"></a><a id="sthref1146"></a>ALTER SESSION</h2>
<p>The <code dir="ltr">ALTER SESSION</code> statement changes session parameters dynamically. This overrides the setting of the equivalent connection attribute for the current session, as applicable.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1147"></a>Required privilege</p>
<p>None</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1148"></a>SQL syntax</p>
<pre dir="ltr">ALTER SESSION SET
  {DDL_REPLICATION_ACTION={&#39;INCLUDE&#39;|&#39;EXCLUDE&#39;} | 
   DDL_REPLICATION_LEVEL={1|2|3} |
   NLS_SORT = {BINARY| <span class="italic">SortName</span>} |
   NLS_LENGTH_SEMANTICS = {BYTE|CHAR} |
   NLS_NCHAR_CONV_EXCP = {TRUE|FALSE} |
   ISOLATION_LEVEL = {SERIALIZABLE | READ COMMITTED} |
   PLSQL_TIMEOUT = <span class="italic">n</span> |
   PLSQL_OPTIMIZE_LEVEL = {0|1|2|3}|
   PLSCOPE_SETTINGS = {&#39;IDENTIFIERS:ALL&#39;|&#39;IDENTIFIERS:NONE&#39;} |
   PLSQL_CONN_MEM_LIMIT = <span class="italic">n</span> |
   PLSQL_CCFLAGS = &#39;<span class="italic">name1</span>:<span class="italic">value1</span>,<span class="italic"> name2</span>:<span class="italic">value2</span>,..., <span class="italic">nameN</span>:<span class="italic">valueN</span>&#39; |
   REPLICATION_TRACK = <span class="italic">TrackNumber </span>|
   COMMIT_BUFFER_SIZE_MAX = <span class="italic">n</span>
   } 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1149"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters of ALTER SESSION." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t13">Parameter</th>
<th class="cellalignment6331" id="r1c2-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t13" headers="r1c1-t13"><code dir="ltr">DDL_REPLICATION_ACTION={&#39;INCLUDE&#39;|&#39;EXCLUDE&#39;}</code></td>
<td class="cellalignment6332" headers="r2c1-t13 r1c2-t13">To include a table or sequence in the active standby pair when either is created, set <code dir="ltr">DDL_REPLICATION_ACTION</code> to <code dir="ltr">INCLUDE</code>. If you do not want to include a table or sequence in the active standby pair when either is created, set <code dir="ltr">DDL_REPLICATION_ACTION</code> to <code dir="ltr">EXCLUDE</code>. The default is <code dir="ltr">INCLUDE</code>.
<p>If set to <code dir="ltr">EXCLUDE</code>:</p>
<ul>
<li>
<p>A subsequent <code dir="ltr">ALTER ACTIVE STANDBY PAIR</code> ... <code dir="ltr">INCLUDE TABLE</code> is required to be executed on the active database to add the table to the replication scheme. All tables must be empty on all active standby databases and subscribers as the table contents will be truncated when this statement is executed.</p>
</li>
<li>
<p>A subsequent <code dir="ltr">ALTER ACTIVE STANDBY PAIR</code> ... <code dir="ltr">INCLUDE SEQUENCE</code> is required to be executed on the active database to add the sequence to the replication scheme.</p>
</li>
</ul>
<p>This attribute is valid only if <code dir="ltr">DDL_REPLICATION_LEVEL</code> is 2 or greater.</p>
<p>See <a class="olink TTREP693" href="../TTREP/alterpair.htm#TTREP693">&#34;Making DDL changes in an active standby pair&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span> for more information.</p>
<p><span class="bold">Note:</span> The equivalent connection attribute is <code dir="ltr">DDLReplicationAction</code>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t13" headers="r1c1-t13"><code dir="ltr">DDL_REPLICATION_LEVEL={1|2|3}</code></td>
<td class="cellalignment6332" headers="r3c1-t13 r1c2-t13">Indicates whether DDL is replicated across all databases in an active standby pair. The value can be one of the following:
<ul>
<li>
<p>1: Default. Add or drop a column to or from a replicated table on the active database using <code dir="ltr">ALTER TABLE</code>. The change is replicated to the table in the standby database.</p>
</li>
<li>
<p>2: Supports replication of the creation or dropping of tables, synonyms or indexes from the active database to the standby database. This does include creating or dropping global temporary tables, but does not include <code dir="ltr">CREATE TABLE AS SELECT</code>. The statement is replicated only when the index is created on an empty table.</p>
</li>
<li>
<p>3: Supports replication of all DDL supported by level 2 as well as replication of creation or dropping of views and sequences (not including materialized views) and changes to the cache administration user ID and password settings when you call the <code dir="ltr">ttCacheUidPwdSet</code> built-in procedure.</p>
<p><span class="bold">Note</span>: After you have defined cache groups, you cannot change the cache administration user ID, but can still change the cache administration password.</p>
</li>
</ul>
<p>See <a class="olink TTREP693" href="../TTREP/alterpair.htm#TTREP693">&#34;Making DDL changes in an active standby pair&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span> for more information.</p>
<p><span class="bold">Note:</span> The equivalent connection attribute is <code dir="ltr">DDLReplicationLevel</code>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t13" headers="r1c1-t13"><code dir="ltr">NLS_SORT=</code><code dir="ltr">{BINARY|</code> <code dir="ltr"><span class="codeinlineitalic">SortName</span></code><code dir="ltr">}</code></td>
<td class="cellalignment6332" headers="r4c1-t13 r1c2-t13">Indicates which collation sequence to use for linguistic comparisons.
<p>Append <code dir="ltr">_CI</code> or <code dir="ltr">_AI</code> to either <code dir="ltr">BINARY</code> or the <code dir="ltr"><span class="codeinlineitalic">SortName</span></code> value to do case-insensitive or accent-insensitive sorting.</p>
<p>If you do not specify <code dir="ltr">NLS_SORT</code>, the default is <code dir="ltr">BINARY</code>.</p>
<p>For a complete list of supported values for <code dir="ltr"><span class="codeinlineitalic">SortName</span></code>, see <a class="olink TTOPR283" href="../TTOPR/globalization.htm#TTOPR283">&#34;Linguistic sorts&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span>.</p>
<p>For more information on case-insensitive or accent-insensitive sorting, see <a class="olink TTOPR286" href="../TTOPR/globalization.htm#TTOPR286">&#34;Case-insensitive and accent-insensitive linguistic sorts&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t13" headers="r1c1-t13"><code dir="ltr">NLS_LENGTH_</code><code dir="ltr">SEMANTICS ={BYTE|CHAR}</code></td>
<td class="cellalignment6332" headers="r5c1-t13 r1c2-t13">Sets the default length semantics configuration. <code dir="ltr">BYTE</code> indicates byte length semantics. <code dir="ltr">CHAR</code> indicates character length semantics. The default is <code dir="ltr">BYTE</code>.
<p>For more information on length semantics, see <a class="olink TTOPR281" href="../TTOPR/globalization.htm#TTOPR281">&#34;Length semantics and data storage&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t13" headers="r1c1-t13"><code dir="ltr">NLS_NCHAR_CONV_EXCP =</code> <code dir="ltr">{TRUE|FALSE}</code></td>
<td class="cellalignment6332" headers="r6c1-t13 r1c2-t13">Determines whether an error should be reported when there is data loss during an implicit or explicit character type conversion between <code dir="ltr">NCHAR</code>/<code dir="ltr">NVARCHAR2</code> data and <code dir="ltr">CHAR</code>/<code dir="ltr">VARCHAR2</code> data. Specify <code dir="ltr">TRUE</code> to enable error reporting. Specify <code dir="ltr">FALSE</code> to not report errors. The default is <code dir="ltr">FALSE</code>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r7c1-t13" headers="r1c1-t13"><code dir="ltr">ISOLATION_LEVEL = {SERIALIZABLE|READ COMMITTED}</code></td>
<td class="cellalignment6332" headers="r7c1-t13 r1c2-t13">Sets isolation level. Change takes effect starting with the <span class="italic">next</span> transaction.
<p>For a descriptions of the isolation levels, see <a class="olink TTOPR402" href="../TTOPR/trans.htm#TTOPR402">&#34;Transaction isolation levels&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span>.</p>
<p><span class="bold">Note:</span> The equivalent connection attribute is <code dir="ltr">Isolation</code>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r8c1-t13" headers="r1c1-t13"><code dir="ltr">PLSQL_TIMEOUT=</code> <code dir="ltr"><span class="codeinlineitalic">n</span></code></td>
<td class="cellalignment6332" headers="r8c1-t13 r1c2-t13">Controls how long PL/SQL procedures run before being automatically terminated. <code dir="ltr"><span class="codeinlineitalic">n</span></code> represents the time, in seconds. Specify 0 for no time limit or any positive integer. The default is 30.
<p>When you modify this value, the new value impacts PL/SQL program units that are currently running as well as any other program units subsequently executed in the same connection.</p>
<p>If PL/SQL is not enabled in your database and you specify this attribute, TimesTen throws an error.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r9c1-t13" headers="r1c1-t13"><code dir="ltr">PLSQL_OPTIMIZE_LEVEL = {0|1|2|3}</code></td>
<td class="cellalignment6332" headers="r9c1-t13 r1c2-t13">Specifies the optimization level used to compile PL/SQL library units. The higher the setting, the more effort the compiler makes to optimize PL/SQL library units. Possible values are 0, 1, 2 or 3. The default is 2.
<p>If PL/SQL is not enabled in your database and you specify this attribute, TimesTen returns an error.</p>
<p>For more information, see <a class="olink TTREF189" href="../TTREF/attribute.htm#TTREF189">&#34;PLSQL_OPTIMIZE_LEVEL&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r10c1-t13" headers="r1c1-t13"><code dir="ltr">PLSCOPE_SETTINGS = &#39;{IDENTIFIERS:ALL |IDENTIFIERS:NONE}&#39;</code></td>
<td class="cellalignment6332" headers="r10c1-t13 r1c2-t13">Controls whether the PL/SQL compiler generates cross-reference information. Specify <code dir="ltr">IDENTIFIERS:ALL</code> to generate cross-reference information. The default is <code dir="ltr">IDENTIFIERS:NONE</code>.
<p>If PL/SQL is not enabled in your database and you specify this attribute, TimesTen returns an error.</p>
<p>For more information, see <a class="olink TTREF185" href="../TTREF/attribute.htm#TTREF185">&#34;PLSCOPE_SETTINGS&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r11c1-t13" headers="r1c1-t13"><code dir="ltr">PLSQL_CONN_MEM_LIMIT =</code> <code dir="ltr"><span class="codeinlineitalic">n</span></code></td>
<td class="cellalignment6332" headers="r11c1-t13 r1c2-t13">Specifies the maximum amount of process heap memory that PL/SQL can use for this connection, where <code dir="ltr"><span class="codeinlineitalic">n</span></code> is an integer expressed in MB. The default is 100.
<p>If PL/SQL is not enabled in your database and you specify this attribute, TimesTen returns an error.</p>
<p>For more information, see <a class="olink TTREF188" href="../TTREF/attribute.htm#TTREF188">&#34;PLSQL_CONN_MEM_LIMIT&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r12c1-t13" headers="r1c1-t13"><code dir="ltr">PLSQL_CCFLAGS = &#39;</code><code dir="ltr"><span class="codeinlineitalic">name1:value1, name2:value2, ..., nameN:valueN</span></code><code dir="ltr">&#39;</code></td>
<td class="cellalignment6332" headers="r12c1-t13 r1c2-t13">Specifies inquiry directives to control conditional compilation of PL/SQL units, which enables you to customize the functionality of a PL/SQL program depending on conditions that are checked. For example, to activate debugging features:
<pre dir="ltr">PLSQL_CCFLAGS = &#39;DEBUG:TRUE&#39;
</pre></td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r13c1-t13" headers="r1c1-t13"><code dir="ltr">REPLICATION_TRACK =</code> <code dir="ltr"><span class="codeinlineitalic">TrackNumber</span></code></td>
<td class="cellalignment6332" headers="r13c1-t13 r1c2-t13">When managing track-based parallel replication, you can assign a connection to a replication track. All transactions issued by the connection are assigned to this track, unless the track is altered.
<p>If the number specified is for a non-existent replication track <code dir="ltr">X</code>, the transaction is assigned to a track number computed as <code dir="ltr">X</code> modulo <code dir="ltr">ReplicationParallelism</code>.</p>
<p>You cannot change tracks in the middle of a transaction unless all preceding operations have been read operations.</p>
<p>For more information, see &#34;<a class="olink TTREP837" href="../TTREP/setup.htm#TTREP837">Specifying replication tracks within an automatic parallel replication environment</a>&#34; in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span>.</p>
<p>The equivalent connection attribute is <code dir="ltr">ReplicationTrack</code>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r14c1-t13" headers="r1c1-t13"><code dir="ltr">COMMIT_BUFFER_SIZE_MAX=</code> <code dir="ltr"><span class="codeinlineitalic">n</span></code></td>
<td class="cellalignment6332" headers="r14c1-t13 r1c2-t13">Changes the maximum size of the commit buffer when a connection is in progress. <span class="italic">n</span> is expressed as an integer and represents the maximum size of the commit buffer (in MB).
<p>Change takes effect starting with the <span class="italic">next</span> transaction.</p>
<p>Call the <code dir="ltr">ttConfiguration</code> built-in procedure to see the currently configured maximum size of the commit buffer. A value of 0 means the buffer is configured with a default size. The default size is 128 KB.</p>
<p>For more information on the commit buffer and transaction reclaim operations, see &#34;<a class="olink TTOPR762" href="../TTOPR/trans.htm#TTOPR762">Transaction reclaim operations</a>&#34; in the <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span> and &#34;<a class="olink TTREF798" href="../TTREF/attribute.htm#TTREF798">CommitBufferSizeMax</a>&#34; in the <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</p>
<p><span class="bold">Note:</span> The equivalent connection attribute is <code dir="ltr">CommitBufferSizeMax</code>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1150"></a>Description</p>
<ul>
<li>
<p>The <code dir="ltr">ALTER SESSION</code> statement affects commands that are subsequently executed by the session. The new session parameters take effect immediately.</p>
</li>
<li>
<p>Operations involving character comparisons support linguistic sensitive collating sequences. Case-insensitive sorts may affect <code dir="ltr">DISTINCT</code> value interpretation.</p>
</li>
<li>
<p>Implicit and explicit conversions between <code dir="ltr">CHAR</code> and <code dir="ltr">NCHAR</code> are supported.</p>
</li>
<li>
<p>Conversions between <code dir="ltr">CHAR</code> and <code dir="ltr">NCHAR</code> are not allowed when using the <code dir="ltr">TIMESTEN8</code> character set.</p>
</li>
<li>
<p>You can use the SQL string functions with the supported character sets. For example, <code dir="ltr">UPPER</code> and <code dir="ltr">LOWER</code> functions support non-<code dir="ltr">ASCII</code> <code dir="ltr">CHAR</code> and <code dir="ltr">VARCHAR2</code> characters as well as <code dir="ltr">NCHAR</code> and <code dir="ltr">NVARCHAR2</code> characters.</p>
</li>
<li>
<p>Choice of character set could have an impact on memory consumption for <code dir="ltr">CHAR</code> and <code dir="ltr">VARCHAR2</code> column data.</p>
</li>
<li>
<p>The character sets of all databases involved in a replication scheme must match.</p>
</li>
<li>
<p>To add an existing table to an active standby pair, set <code dir="ltr">DDL_REPLICATION_LEVEL</code> to 2 or greater and <code dir="ltr">DDL_REPLICATION_ACTION</code> to <code dir="ltr">INCLUDE</code>. Alternatively, you can use the <code dir="ltr">ALTER ACTIVE STANDBY PAIR ... INCLUDE TABLE</code> statement if <code dir="ltr">DDL_REPLICATION_ACTION</code> is set to <code dir="ltr">EXCLUDE</code>. In this case, the table must be empty and present on all databases before executing the <code dir="ltr">ALTER ACTIVE STANDBY PAIR ... INCLUDE TABLE</code> statement as the table contents will be truncated when this statement is executed.</p>
</li>
<li>
<p>To add an existing sequence or view to an active standby pair, set <code dir="ltr">DDL_REPLICATION_LEVEL</code> to 3. To include the sequence in the replication scheme, <code dir="ltr">DDL_REPLICATION_ACTION</code> must be set to <code dir="ltr">INCLUDE</code>. This does not apply to materialized views.</p>
</li>
<li>
<p>Objects are replicated only when the receiving database is of a TimesTen release that supports that level of replication, and is configured for an active standby pair replication scheme. For example, replication of sequences (requiring <code dir="ltr">DDL_REPLICATION_LEVEL=3</code>) to a database release prior to 11.2.2.7.0 is not supported. The receiving database must be of at least release 11.2.1.8.0 for replication of objects supported by <code dir="ltr">DDL_REPLICATION_LEVEL=2</code>.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1151"></a>Examples</p>
<p>Use the <code dir="ltr">ALTER</code> <code dir="ltr">SESSION</code> statement to change <code dir="ltr">COMMIT_BUFFER_SIZE_MAX</code> to 500 MB. First, call <code dir="ltr">ttConfiguration</code> to display the current connection setting. Use the <code dir="ltr">ALTER</code> <code dir="ltr">SESSION</code> statement to change the <code dir="ltr">COMMIT_BUFFER_SIZE_MAX</code> setting to 500. Call <code dir="ltr">ttConfiguration</code> to display the new setting.</p>
<pre dir="ltr">Command&gt;  CALL ttConfiguration (&#39;CommitBufferSizeMax&#39;);
&lt; CommitBufferSizeMax, 0 &gt;
1 row found.
Command&gt; ALTER SESSION SET COMMIT_BUFFER_SIZE_MAX = 500;
 
Session altered.
 
Command&gt; CALL ttConfiguration (&#39;CommitBufferSizeMax&#39;);
&lt; CommitBufferSizeMax, 500 &gt;
1 row found.
</pre>
<p>Use the <code dir="ltr">ALTER SESSION</code> statement to change <code dir="ltr">PLSQL_TIMEOUT</code> to 60 seconds. Use a second <code dir="ltr">ALTER SESSION</code> statement to change <code dir="ltr">PLSQL_OPTIMIZE_LEVEL</code> to 3. Then call <code dir="ltr">ttConfiguration</code> to display the new values.</p>
<pre dir="ltr">Command&gt; ALTER SESSION SET PLSQL_TIMEOUT = 60;
Session altered.Command&gt; ALTER SESSION SET PLSQL_OPTIMIZE_LEVEL = 3;
Session altered.

Command&gt; CALL TTCONFIGURATION ();
&lt; CkptFrequency, 600 &gt;
&lt; CkptLogVolume, 0 &gt;
&lt; CkptRate, 0 &gt;
...
&lt; PLSQL_OPTIMIZE_LEVEL, 3 &gt;
&lt; PLSQL_TIMEOUT, 60 &gt;
...
47 rows found.
</pre>
<p>In this example, set <code dir="ltr">PLSQL_TIMEOUT</code> to 20 seconds. Attempt to execute a program that loops indefinitely. In 20 seconds, execution is terminated and an error is returned.</p>
<pre dir="ltr">Command&gt; ALTER SESSION SET PLSQL_TIMEOUT = 20;

Command&gt; DECLARE v_timeout NUMBER;
       &gt; BEGIN
       &gt;   LOOP
       &gt;     v_timeout :=0;
       &gt;     EXIT WHEN v_timeout &lt; 0;
       &gt;   END LOOP;
       &gt; END;
       &gt; /
 8509: PL/SQL execution terminated; PLSQL_TIMEOUT exceeded
</pre>
<p>Call <code dir="ltr">ttConfiguration</code> to display the current <code dir="ltr">PLSCOPE_SETTINGS</code> value. Use the <code dir="ltr">ALTER SESSION</code> statement to change the <code dir="ltr">PLSCOPE_SETTINGS</code> value to <code dir="ltr">IDENTIFIERS:ALL</code>. Create a dummy procedure <code dir="ltr">p</code>. Query the system view <code dir="ltr">SYS.USER_PLSQL_OBJECT_SETTINGS</code> to confirm that the new setting is applied to procedure <code dir="ltr">p</code>.</p>
<pre dir="ltr">Command&gt; CALL TTCONFIGURATION ();
&lt; CkptFrequency, 600 &gt;
&lt; CkptLogVolume, 0 &gt;
&lt; CkptRate, 0 &gt;
...
&lt; PLSCOPE_SETTINGS, IDENTIFIERS:NONE &gt;
...
47 rows found.

Command&gt; ALTER SESSION SET PLSCOPE_SETTINGS = &#39;IDENTIFIERS:ALL&#39;;
Session altered.
 
Command&gt; CREATE OR REPLACE PROCEDURE p IS
       &gt; BEGIN
       &gt;  NULL;
       &gt; END;
       &gt; /
Procedure created.
 
Command&gt; SELECT PLSCOPE_SETTINGS FROM SYS.USER_PLSQL_OBJECT_SETTINGS WHERE
       &gt; NAME = &#39;p&#39;;
&lt; IDENTIFIERS:ALL &gt;
1 row found.
</pre>
<p>The following example uses the <code dir="ltr">ALTER SESSION</code> statement to change the <code dir="ltr">NLS_SORT</code> setting from <code dir="ltr">BINARY</code> to <code dir="ltr">BINARY_CI</code> to <code dir="ltr">BINARY_AI</code>. The database and connection character sets are <code dir="ltr">WE8ISO8859P1</code>.</p>
<pre dir="ltr">Command&gt; connect &#34;dsn=cs;ConnectionCharacterSet=WE8ISO8859P1&#34;;
Connection successful: DSN=cs;UID=user;DataStore=/datastore/user/cs;
DatabaseCharacterSet=WE8ISO8859P1;
ConnectionCharacterSet=WE8ISO8859P1;PermSize=32;TypeMode=0;
(Default setting AutoCommit=1)
Command&gt;#Create the Table
Command&gt; CREATE TABLE collatingdemo (letter VARCHAR2 (10));
Command&gt;#Insert values
Command&gt; INSERT INTO collatingdemo VALUES (&#39;a&#39;);
1 row inserted.
Command&gt; INSERT INTO collatingdemo VALUES (&#39;A&#39;);
1 row inserted.
Command&gt; INSERT INTO collatingdemo VALUES (&#39;Y&#39;);
1 row inserted.
Command&gt; INSERT INTO collatingdemo VALUES (&#39;&auml;&#39;);
1 row inserted.
Command&gt;#SELECT
Command&gt; SELECT * FROM collatingdemo;
&lt; a &gt;
&lt; A &gt;
&lt; Y &gt;
&lt; &auml; &gt;
4 rows found.
Command&gt;#SELECT with ORDER BY
Command&gt; SELECT * FROM collatingdemo ORDER BY letter;
&lt; A &gt;
&lt; Y &gt;
&lt; a &gt;
&lt; &auml; &gt;
4 rows found.
Command&gt;#set NLS_SORT to BINARY_CI and SELECT
Command&gt; ALTER SESSION SET NLS_SORT = BINARY_CI;
Command&gt; SELECT * FROM collatingdemo ORDER BY letter;
&lt; a &gt;
&lt; A &gt;
&lt; Y &gt;
&lt; &Auml; &gt;
&lt; &auml; &gt;
4 rows found.
Command&gt;#Set NLS_SORT to BINARY_AI and SELECT
Command&gt; ALTER SESSION SET NLS_SORT = BINARY_AI;
Command&gt; SELECT * FROM collatingdemo ORDER BY letter;
&lt; &auml; &gt;
&lt; a &gt;
&lt; A &gt;
&lt; Y &gt;
4 rows found.
</pre>
<p>The following example enables user-defined parallel replication (not supported for active standby pairs) and uses the <code dir="ltr">ALTER SESSION</code> statement to change the replication track number to 5 for the current connection. To enable parallel replication for replication schemes, set <code dir="ltr">ReplicationApplyOrdering</code> to 1. Then, always set <code dir="ltr">REPLICATION_TRACK</code> to a number less than or equal to <code dir="ltr">ReplicationParallelism</code>. For example, the <code dir="ltr">ReplicationParallelism</code> connection attribute could be set to 6, which is higher than the value of 5 set for <code dir="ltr">REPLICATION_TRACK</code>.</p>
<pre dir="ltr">Command&gt; ALTER SESSION SET REPLICATION_TRACK = 5;
Session altered.
</pre>
<p>The following example enables replication of adding and dropping columns, tables, synonyms and indexes by setting the following on the active database in an alter standby replication pair: <code dir="ltr">DDL_REPLICATON_LEVEL</code> set to <code dir="ltr">2</code> and <code dir="ltr">DDLReplicationAction</code> set to <code dir="ltr">&#39;INCLUDE&#39;</code>.</p>
<pre dir="ltr">Command &gt; ALTER SESSION SET DDL_REPLICATION_LEVEL=2;
Session altered.

Command &gt; ALTER SESSION SET DDL_REPLICATION_ACTION=&#39;INCLUDE&#39;;
Session altered.
</pre></div>
<!-- class="refsubsect" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
The equivalent connection attributes for <code dir="ltr">DDL_REPLICATION_LEVEL</code> and <code dir="ltr">DDL_REPLICATION_ACTION</code> are <code dir="ltr">DDLReplicationLevel</code> and <code dir="ltr">DDLReplicationAction</code>, respectively.</div>
</div>
<!-- class="refsect1" -->
<a id="i1407906"></a>
<div id="TTSQL286" class="refsect1">
<h2 class="refsect1"><a id="sthref1152"></a><a id="sthref1153"></a>ALTER TABLE</h2>
<p>The <code dir="ltr">ALTER TABLE</code> statement changes an existing table definition.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1154"></a>Required privilege</p>
<p>No privilege is required for the table owner.</p>
<p><code dir="ltr">ALTER ANY TABLE</code> for another user&#39;s table.</p>
<p>For <code dir="ltr">ALTER TABLE...ADD FOREIGN KEY</code>, the owner of the altered table must have the <code dir="ltr">REFERENCES</code> privilege on the table referenced by the foreign key clause.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1155"></a>SQL syntax</p>
<p>T<a id="sthref1156"></a><a id="sthref1157"></a><a id="sthref1158"></a>o add one column:</p>
<pre dir="ltr">ALTER TABLE [<span class="italic">Owner</span>.]<span class="italic">TableName</span> 
  ADD [COLUMN] <span class="italic">ColumnName</span> <span class="italic">ColumnDataType</span>
    [DEFAULT <span class="italic">DefaultVal</span>] [[NOT] INLINE] [UNIQUE] [NULL]
  [COMPRESS (<span class="italic">CompressColumns</span> [,...])]
</pre>
<p>To add multiple columns:</p>
<pre dir="ltr">ALTER TABLE [<span class="italic">Owner</span>.]<span class="italic">TableName</span> 
 ADD (<span class="italic">ColumnName</span> <span class="italic">ColumnDataType</span> 
      [DEFAULT <span class="italic">DefaultVal</span>] [[NOT] INLINE] [UNIQUE] [NULL] [,... ] )
  [COMPRESS (<span class="italic">CompressColumns</span> [,...])]
</pre>
<p>To add a <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> column (note that the <code dir="ltr">DEFAULT</code> clause is required):</p>
<pre dir="ltr">ALTER TABLE [Owner.]TableName
  ADD [COLUMN] ColumnName <span class="italic">ColumnDataType</span>
    NOT NULL [ENABLE] DEFAULT <span class="italic">DefaultVal</span> [[NOT] INLINE] [UNIQUE]
  [COMPRESS (<span class="italic">CompressColumns</span> [,...])]
</pre>
<p>To add multiple <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> columns (note that the <code dir="ltr">DEFAULT</code> clause is required):</p>
<pre dir="ltr">ALTER TABLE [Owner.]TableName
  ADD (ColumnName <span class="italic">ColumnDataType</span>
       NOT NULL [ENABLE] DEFAULT <span class="italic">DefaultVal</span> [[NOT] INLINE] [UNIQUE] [,...])
  [COMPRESS (<span class="italic">CompressColumns</span> [,...])]
</pre>
<p>The <code dir="ltr"><span class="codeinlineitalic">CompressColumns</span></code> syntax is as follows:</p>
<pre dir="ltr">{<span class="italic">ColumnDefinition</span> | (<span class="italic">ColumnDefinition</span> [,...])} BY DICTIONARY 
   [MAXVALUES = <span class="italic">CompressMax</span>]
</pre>
<p>T<a id="sthref1159"></a><a id="sthref1160"></a>o remove columns.</p>
<pre dir="ltr">ALTER TABLE [<span class="italic">Owner</span>.]<span class="italic">TableName</span> 
  DROP {[COLUMN] <span class="italic">ColumnName </span>| (<span class="italic">ColumnName</span> [,... ] )}
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
If removing columns in a compressed column group, all columns in the compressed column group must be specified.</div>
<p>T<a id="sthref1161"></a><a id="sthref1162"></a>o add a primary key constraint using a range index:</p>
<pre dir="ltr">ALTER TABLE [<span class="italic">Owner</span>.]<span class="italic">TableName</span> ADD CONSTRAINT <span class="italic">ConstraintName</span>
  PRIMARY KEY (<span class="italic">ColumnName</span> [,... ])
</pre>
<p>To add a primary key constraint using a hash index:</p>
<pre dir="ltr">ALTER TABLE [<span class="italic">Owner</span>.]<span class="italic">TableName</span> ADD CONSTRAINT <span class="italic">ConstraintName</span>
  PRIMARY KEY (<span class="italic">ColumnName</span> [,... ])
  USE HASH INDEX PAGES = <span class="italic">RowPages </span>| CURRENT
</pre>
<p>T<a id="sthref1163"></a><a id="sthref1164"></a>o add a foreign key and optionally add <code dir="ltr">ON DELETE CASCADE</code>:</p>
<pre dir="ltr">ALTER TABLE [<span class="italic">Owner</span>.]<span class="italic">TableName</span> 
ADD [CONSTRAINT <span class="italic">ForeignKeyName</span>] FOREIGN KEY
    (<span class="italic">ColumnName</span> [,...]) REFERENCES <span class="italic">RefTableName</span>
       [(<span class="italic">ColumnName</span> [,...])] [ON DELETE CASCADE]
</pre>
<p>T<a id="sthref1165"></a><a id="sthref1166"></a>o remove a foreign key:</p>
<pre dir="ltr">ALTER TABLE [<span class="italic">Owner</span>.]<span class="italic">TableName</span> 
DROP CONSTRAINT <span class="italic">ForeignKeyName</span>
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot use <code dir="ltr">ALTER TABLE</code> to drop a primary key constraint. You would have to drop and recreate the table in order to drop the constraint.</div>
<p>T<a id="sthref1167"></a><a id="sthref1168"></a>o resize a hash index:</p>
<pre dir="ltr">ALTER TABLE [<span class="italic">Owner</span>.]<span class="italic">TableName</span>
SET PAGES = <span class="italic">RowPages </span>| CURRENT
</pre>
<p>T<a id="sthref1169"></a><a id="sthref1170"></a>o change the primary key to use a hash index:</p>
<pre dir="ltr">ALTER TABLE [<span class="italic">Owner</span>.]<span class="italic">TableName</span>
USE HASH INDEX PAGES = <span class="italic">RowPages </span>| CURRENT
</pre>
<p>To change the primary key to use a range index with the <code dir="ltr">USE RANGE INDEX</code> clause:</p>
<pre dir="ltr">ALTER TABLE [<span class="italic">Owner</span>.]<span class="italic">TableName</span>
USE RANGE INDEX
</pre>
<p>To change the default value of a column:</p>
<pre dir="ltr">ALTER TABLE [<span class="italic">Owner</span>.]<span class="italic">TableName</span>
MODIFY (<span class="italic">ColumnName</span> DEFAULT <span class="italic">DefaultVal</span>)
</pre>
<p>T<a id="sthref1171"></a><a id="sthref1172"></a>o add or drop a unique constraint on a column:</p>
<pre dir="ltr">ALTER TABLE <span class="italic">Owner</span>.]<span class="italic">TableName</span>
{ADD | DROP} UNIQUE (<span class="italic">ColumnName</span>)
</pre>
<p>To remove the default value of a column that is nullable, by changing it to <code dir="ltr">NULL</code>:</p>
<pre dir="ltr">ALTER TABLE [<span class="italic">Owner</span>.]<span class="italic">TableName</span>
MODIFY (<span class="italic">ColumnName</span> DEFAULT NULL)
</pre>
<p>T<a id="sthref1173"></a><a id="sthref1174"></a>o add LRU aging:</p>
<pre dir="ltr">ALTER TABLE [<span class="italic">Owner</span>.]<span class="italic">TableName</span>
ADD AGING LRU [ON | OFF]
</pre>
<p>To add time-based aging:</p>
<pre dir="ltr">ALTER TABLE [<span class="italic">Owner</span>.]<span class="italic">TableName</span>
ADD AGING USE <span class="italic">ColumnName</span> LIFETIME <span class="italic">num1</span>
    {SECOND[S] | MINUTE[S] | HOUR[S] | DAY[S]}
     [CYCLE <span class="italic">num2</span> {SECOND[S] | MINUTE[S] | HOUR[S] | DAY[S] }]
    [ON | OFF]
</pre>
<p>To change the aging state:</p>
<pre dir="ltr">ALTER TABLE [<span class="italic">Owner</span>.]<span class="italic">TableName</span>
SET AGING {ON | OFF}
</pre>
<p>T<a id="sthref1175"></a><a id="sthref1176"></a>o drop aging:</p>
<pre dir="ltr">ALTER TABLE [<span class="italic">Owner</span>.]<span class="italic">TableName</span>
DROP AGING
</pre>
<p>To change the lifetime for time-based aging:</p>
<pre dir="ltr">ALTER TABLE [<span class="italic">Owner</span>.]<span class="italic">TableName</span>
SET AGING LIFETIME <span class="italic">num1</span> {SECOND[S] | MINUTE[S] | HOUR[S] | DAY[S]}
</pre>
<p>To change the cycle for time-based aging:</p>
<pre dir="ltr">ALTER TABLE [<span class="italic">Owner</span>.]<span class="italic">TableName</span>
SET AGING CYCLE <span class="italic">num2</span> {SECOND[S] | MINUTE[S] | HOUR[S] | DAY[S]}
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1177"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters of ALTER TABLE." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t17">Parameter</th>
<th class="cellalignment6331" id="r1c2-t17">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t17" headers="r1c1-t17"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code> <code dir="ltr"><span class="codeinlineitalic">TableName</span></code></td>
<td class="cellalignment6332" headers="r2c1-t17 r1c2-t17">Identifies the table to be altered.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t17" headers="r1c1-t17"><code dir="ltr">UNIQUE</code></td>
<td class="cellalignment6332" headers="r3c1-t17 r1c2-t17">Specifies that in the column <code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code> each row must contain a unique value.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t17" headers="r1c1-t17"><code dir="ltr">MODIFY</code></td>
<td class="cellalignment6332" headers="r4c1-t17 r1c2-t17">Specifies that an attribute of a given column is to be changed to a new value.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t17" headers="r1c1-t17"><code dir="ltr">DEFAULT [</code><code dir="ltr"><span class="codeinlineitalic">DefaultVal</span></code> <code dir="ltr">|NULL]</code></td>
<td class="cellalignment6332" headers="r5c1-t17 r1c2-t17">Specifies that the column has a default value, <code dir="ltr"><span class="codeinlineitalic">DefaultVal</span></code>. If <code dir="ltr">NULL</code>, specifies that the default value of the columns is to be dropped. If a column with a default value of <code dir="ltr">SYSDATE</code> is added, the value of the column of the existing rows only is the system date at the time the column was added. If the default value is one of the <code dir="ltr">USER</code> functions the column value is the user value of the session that executed the <code dir="ltr">ALTER TABLE</code> statement. Currently, you cannot assign a default value for the <code dir="ltr">ROWID</code> data type.
<p>Altering the default value of a column has no impact on existing rows.</p>
<p><span class="bold">Note:</span> To add a <code dir="ltr">NOT NULL</code> column to a table that is part of a replication scheme, <code dir="ltr">DDL_REPLICATON_LEVEL</code> must be 3 or greater.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t17" headers="r1c1-t17"><code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code></td>
<td class="cellalignment6332" headers="r6c1-t17 r1c2-t17">Name of the column participating in the <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> statement. A new column cannot have the same name as an existing column or another new column. If you add a <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> column, you must include the <code dir="ltr">DEFAULT</code> clause.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r7c1-t17" headers="r1c1-t17"><code dir="ltr"><span class="codeinlineitalic">ColumnDataType</span></code></td>
<td class="cellalignment6332" headers="r7c1-t17 r1c2-t17">Type of the column to be added. Some types require additional parameters. See <a href="types.htm#i1008748">Chapter 1, &#34;Data Types&#34;</a> for the data types that can be specified.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r8c1-t17" headers="r1c1-t17"><code dir="ltr">NOT NULL [ENABLE]</code></td>
<td class="cellalignment6332" headers="r8c1-t17 r1c2-t17">If you add a column, you can specify <code dir="ltr">NOT</code> <code dir="ltr">NULL</code>. If you specify <code dir="ltr">NOT</code> <code dir="ltr">NULL</code>, then you must include the <code dir="ltr">DEFAULT</code> clause. Optionally, you can specify <code dir="ltr">ENABLE</code> after the <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> clause. Because <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraints are always enabled, you are not required to specify <code dir="ltr">ENABLE</code>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r9c1-t17" headers="r1c1-t17"><code dir="ltr"><a id="sthref1178"></a><a id="sthref1179"></a><a id="sthref1180"></a>INLINE|</code><code dir="ltr">NOT INLINE</code></td>
<td class="cellalignment6332" headers="r9c1-t17 r1c2-t17">By default, variable-length columns whose declared column length is &gt; 128 bytes are stored out of line. Variable-length columns whose declared column length is &lt;= 128 bytes are stored inline. The default behavior can be overridden during table creation through the use of the <code dir="ltr">INLINE</code> and <code dir="ltr">NOT INLINE</code> keywords.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r10c1-t17" headers="r1c1-t17"><code dir="ltr">C<a id="sthref1181"></a><a id="sthref1182"></a><a id="sthref1183"></a>OMPRESS (</code><code dir="ltr"><span class="codeinlineitalic">CompressColumns</span></code> <code dir="ltr">[,...])</code></td>
<td class="cellalignment6332" headers="r10c1-t17 r1c2-t17">Defines a compressed column group for a table that is enabled for compression. This can include one or more columns in the table.
<p>If you define multiple columns for a compression group, you must specify the columns as <code dir="ltr">INLINE</code>. An out-of-line column can be in a compression group only if it is the only column in the group.</p>
<p>Each compressed column group is limited to a maximum of 16 columns.</p>
<p>For more details on compression columns, see <a href="#BABFGIHD">&#34;In-memory columnar compression of tables&#34;</a>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r11c1-t17" headers="r1c1-t17"><code dir="ltr">BY DICTIONARY</code></td>
<td class="cellalignment6332" headers="r11c1-t17 r1c2-t17">Defines a compression dictionary for each compressed column group.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r12c1-t17" headers="r1c1-t17"><code dir="ltr">MAXVALUES</code> = <code dir="ltr"><span class="codeinlineitalic">CompressMax</span></code></td>
<td class="cellalignment6332" headers="r12c1-t17 r1c2-t17"><code dir="ltr"><span class="codeinlineitalic">CompressMax</span></code> is the total number of distinct values in the table and sets the size for the compressed column group pointer column to 1, 2, or 4 bytes and sets the size for the maximum number of entries in the dictionary table.
<p>For the dictionary table, <code dir="ltr">NULL</code> is counted as one unique value.</p>
<p><code dir="ltr"><span class="codeinlineitalic">CompressMax</span></code> takes an integer between 1 and 2<sup>32</sup>-1.</p>
<p>The maximum size defaults to size of 2<sup>32</sup>-1 if the <code dir="ltr">MAXVALUES</code> clause is omitted, which uses 4 bytes for the pointer column. An error is thrown if the value is greater than 2<sup>32</sup>-1.</p>
<p>For more details on maximum sizing for compression dictionaries, see <a href="#BABFGIHD">&#34;In-memory columnar compression of tables&#34;</a>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r13c1-t17" headers="r1c1-t17"><code dir="ltr">ADD CONSTRAINT</code> <code dir="ltr"><span class="codeinlineitalic">ConstraintName</span></code> <code dir="ltr">PRIMARY KEY</code> <code dir="ltr">(</code><code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code>
<p><code dir="ltr">[,... ] ) [USE HASH INDEX PAGES =</code> <code dir="ltr"><span class="codeinlineitalic">RowPages</span></code> <code dir="ltr">| CURRENT]</code></p>
</td>
<td class="cellalignment6332" headers="r13c1-t17 r1c2-t17">Adds a primary key constraint to the table. Columns of the primary key must be defined as <code dir="ltr">NOT NULL</code>.
<p>Specify <code dir="ltr"><span class="codeinlineitalic">ConstraintName</span></code> as the name of the index used to enforce the primary key constraint. Specify <code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code> as the name(s) of the <code dir="ltr">NOT NULL</code> column(s) used for the primary key.</p>
<p>Specify the <code dir="ltr">USE HASH INDEX</code> clause to use a hash index for the primary key. If not specified, a range index is used for the primary key constraint.</p>
<p>If you specify <code dir="ltr">CURRENT</code>, the current number of rows in the table is used to calculate the page count value. If you specify <code dir="ltr"><span class="codeinlineitalic">RowPages</span></code>, the number of pages is used. To determine the value for <code dir="ltr"><span class="codeinlineitalic">RowPages</span></code>, divide the number of expected rows in your table by 256. For example, if your table has 256,000 rows, specify 1000 for RowPages (256000/256=1000).</p>
<p>The value for <code dir="ltr"><span class="codeinlineitalic">RowPages</span></code> must be a positive constant and must be greater than 0.</p>
<p>TimesTen recommends that you do not specify <code dir="ltr">PAGES</code><code dir="ltr">=</code><code dir="ltr">CURRENT</code> if there are no rows in your table.</p>
<p>If your estimate is too small, performance may be degraded. For more information on hash indexes, see <a href="#i992776">&#34;Column Definition&#34;</a>.</p>
<p><span class="bold">Note:</span> Before you use <code dir="ltr">ADD CONSTRAINT</code> to add a named primary key constraint, be aware that you cannot use <code dir="ltr">ALTER TABLE</code> to drop a primary key constraint. You would have to drop and recreate the table in order to drop the constraint.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r14c1-t17" headers="r1c1-t17"><code dir="ltr">CONSTRAINT</code></td>
<td class="cellalignment6332" headers="r14c1-t17 r1c2-t17">Specifies that a foreign key is to be dropped. Optionally specifies that an added foreign key is named by the user.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r15c1-t17" headers="r1c1-t17"><code dir="ltr"><span class="codeinlineitalic">ForeignKeyName</span></code></td>
<td class="cellalignment6332" headers="r15c1-t17 r1c2-t17">Name of the foreign key to be added or dropped. All foreign keys are assigned a default name by the system if the name was not specified by the user. Either the user-provided name or system name can be specified in the <code dir="ltr">DROP FOREIGN KEY</code> clause.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r16c1-t17" headers="r1c1-t17"><code dir="ltr">FOREIGN KEY</code></td>
<td class="cellalignment6332" headers="r16c1-t17 r1c2-t17">Specifies that a foreign key is to be added. Under <code dir="ltr">CREATE TABLE</code>, see <a href="#i992736">&#34;<code dir="ltr">FOREIGN KEY</code>&#34;</a>. (This is not part of the syntax to drop a foreign key.)</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r17c1-t17" headers="r1c1-t17"><code dir="ltr">REFERENCES</code></td>
<td class="cellalignment6332" headers="r17c1-t17 r1c2-t17">Specifies that the foreign key references another table.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r18c1-t17" headers="r1c1-t17"><code dir="ltr"><span class="codeinlineitalic">RefTableName</span></code></td>
<td class="cellalignment6332" headers="r18c1-t17 r1c2-t17">The name of the table that the foreign key references.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r19c1-t17" headers="r1c1-t17"><code dir="ltr">[ON DELETE</code> <code dir="ltr">CASCADE]</code></td>
<td class="cellalignment6332" headers="r19c1-t17 r1c2-t17">Enables the <code dir="ltr">ON DELETE CASCADE</code> referential action. If specified, when rows containing referenced key values are deleted from a parent table, rows in child tables with dependent foreign key values are also deleted.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r20c1-t17" headers="r1c1-t17"><code dir="ltr">USE</code> <code dir="ltr">HASH</code> <code dir="ltr">INDEX</code><br/>
<code dir="ltr">PAGES</code> = <code dir="ltr"><span class="codeinlineitalic">RowPages</span></code> | <code dir="ltr">CURRENT</code></td>
<td class="cellalignment6332" headers="r20c1-t17 r1c2-t17">Changes primary key to use a hash index. If the primary key already uses a hash index, then this clause is equivalent to the <code dir="ltr">SET PAGES</code> clause.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r21c1-t17" headers="r1c1-t17"><code dir="ltr">USE RANGE INDEX</code></td>
<td class="cellalignment6332" headers="r21c1-t17 r1c2-t17">Changes primary key to use a range index. If the primary key already uses a range index, TimesTen ignores this clause.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r22c1-t17" headers="r1c1-t17"><code dir="ltr">SET PAGES =</code> <code dir="ltr"><span class="codeinlineitalic">RowPages</span></code> <code dir="ltr">| CURRENT</code></td>
<td class="cellalignment6332" headers="r22c1-t17 r1c2-t17">Resizes the hash index to reflect the expected number of pages in the table. If you specify <code dir="ltr">CURRENT</code>, the current number of rows in the table is used to calculate the page count value. If you specify <code dir="ltr"><span class="codeinlineitalic">RowPages</span></code>, the number of pages is used. To determine the value for <code dir="ltr"><span class="codeinlineitalic">RowPages</span></code>, divide the number of expected rows in your table by 256. For example, if your table has 256,000 rows, specify 1000 for <code dir="ltr"><span class="codeinlineitalic">RowPages</span></code> (256000/256=1000).
<p>The value for <code dir="ltr"><span class="codeinlineitalic">RowPages</span></code> must be a positive constant and must be greater than 0.</p>
<p>TimesTen recommends that you do not specify <code dir="ltr">PAGES</code><code dir="ltr">=</code><code dir="ltr">CURRENT</code> if there are no rows in your table.</p>
<p>If your estimate is too small, performance may be degraded. For more information on hash indexes, see <a href="#i992776">&#34;Column Definition&#34;</a>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r23c1-t17" headers="r1c1-t17"><code dir="ltr">ADD <a id="sthref1184"></a><a id="sthref1185"></a>AGING LRU [ON | OFF]</code></td>
<td class="cellalignment6332" headers="r23c1-t17 r1c2-t17">Adds least recently used (LRU) aging to an existing table that has no aging policy defined.
<p>The LRU aging policy defines the type of aging (least recently used (LRU)), the aging state (<code dir="ltr">ON</code> or <code dir="ltr">OFF</code>) and the LRU aging attributes.</p>
<p>Set the aging state to either <code dir="ltr">ON</code> or <code dir="ltr">OFF</code>. <code dir="ltr">ON</code> indicates that the aging state is enabled and aging is done automatically. <code dir="ltr">OFF</code> indicates that the aging state is disabled and aging is not done automatically. In both cases, the aging policy is defined. The default is <code dir="ltr">ON</code>.</p>
<p>LRU attributes are defined by calling the <code dir="ltr">ttAgingLRUConfig</code> procedure. LRU attributes are not defined at the SQL level.</p>
<p>For more information about LRU aging, see <a class="olink TTOPR348" href="../TTOPR/comp.htm#TTOPR348">&#34;Implementing aging in your tables&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r24c1-t17" headers="r1c1-t17"><code dir="ltr">ADD AGING USE</code> <code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code><code dir="ltr">...</code><code dir="ltr">[ON| OFF]</code></td>
<td class="cellalignment6332" headers="r24c1-t17 r1c2-t17">Adds time-based aging to an existing table that has no aging policy defined.
<p>The time-based aging policy defines the type of aging (time-based), the aging state (<code dir="ltr">ON</code> or <code dir="ltr">OFF</code>) and the time-based aging attributes.</p>
<p>Set the aging state to either <code dir="ltr">ON</code> or <code dir="ltr">OFF</code>. <code dir="ltr">ON</code> indicates that the aging state is enabled and aging is done automatically. <code dir="ltr">OFF</code> indicates that the aging state is disabled and aging is not done automatically. In both cases, the aging policy is defined. The default is <code dir="ltr">ON</code>.</p>
<p>Time-based aging attributes are defined at the SQL level and are specified by the <code dir="ltr">LIFETIME</code> and <code dir="ltr">CYCLE</code> clauses.</p>
<p>Specify <code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code> as the name of the column used for time-based aging. Define the column as <code dir="ltr">NOT NULL</code> and of data type <code dir="ltr">TIMESTAMP</code> or <code dir="ltr">DATE</code>. The value of this column is subtracted from <code dir="ltr">SYSDATE</code>, truncated using the specified unit (minute, hour, day) and then compared to the <code dir="ltr">LIFETIME</code> value. If the result is greater than the <code dir="ltr">LIFETIME</code> value, then the row is a candidate for aging.</p>
<p>The values of the column used for aging are updated by your applications. If the value of this column is unknown for some rows, and you do not want the rows to be aged, define the column with a large default value (the column cannot be <code dir="ltr">NULL</code>).</p>
<p>You can define your aging column with a data type of <code dir="ltr">TT_TIMESTAMP</code> or <code dir="ltr">TT_DATE</code>. If you choose data type <code dir="ltr">TT_DATE</code>, then you must specify the <code dir="ltr">LIFETIME</code> unit as days.</p>
<p>For more information about time-based aging, see <a class="olink TTOPR348" href="../TTOPR/comp.htm#TTOPR348">&#34;Implementing aging in your tables&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r25c1-t17" headers="r1c1-t17"><code dir="ltr">LIFETIME</code> <code dir="ltr"><span class="codeinlineitalic">Num1</span></code> <code dir="ltr">{SECOND[S] | MINUTE[S] | HOUR[S] | DAY[S]</code></td>
<td class="cellalignment6332" headers="r25c1-t17 r1c2-t17">Specify the <code dir="ltr">LIFETIME</code> clause after the <code dir="ltr">ADD AGING USE</code> <code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code> clause if you are adding the time-based aging policy to an existing table. Specify the <code dir="ltr">LIFETIME</code> clause after the <code dir="ltr">SET AGING</code> clause to change the <code dir="ltr">LIFETIME</code> setting.
<p>The <code dir="ltr">LIFETIME</code> clause specifies the minimum amount of time data is kept in cache.</p>
<p>Specify <code dir="ltr"><span class="codeinlineitalic">Num1</span></code> as a positive integer constant to indicate the unit of time expressed in seconds, minutes, hours or days that rows should be kept in cache. Rows that exceed the <code dir="ltr">LIFETIME</code> value are aged out (deleted from the table). If you define your aging column with data type <code dir="ltr">TT_DATE</code>, then you must specify <code dir="ltr">DAYS</code> as the <code dir="ltr">LIFETIME</code> unit.</p>
<p>The concept of time resolution is supported. If <code dir="ltr">DAYS</code> is specified as the time resolution, then all rows whose timestamp belongs to the same day are aged out at the same time. If <code dir="ltr">HOURS</code> is specified as the time resolution, then all rows with timestamp values within that hour are aged at the same time. A <code dir="ltr">LIFETIME</code> of 3 days is different than a <code dir="ltr">LIFETIME</code> of 72 hours (3*24) or a <code dir="ltr">LIFETIME</code> of 432 minutes (3*24*60).</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r26c1-t17" headers="r1c1-t17"><code dir="ltr">CYCLE</code> <code dir="ltr"><span class="codeinlineitalic">Num2</span></code> <code dir="ltr">{SECOND[S]| MINUTE[S]| HOUR[S]|DAY[S]}</code></td>
<td class="cellalignment6332" headers="r26c1-t17 r1c2-t17">Specify the optional <code dir="ltr">CYCLE</code> clause after the <code dir="ltr">LIFETIME</code> clause if you are adding the time-based aging policy to an existing table.
<p><code dir="ltr">CYCLE</code> is a time-based aging attribute.</p>
<p>The <code dir="ltr">CYCLE</code> clause indicates how often the system should examine rows to see if data exceeds the specified <code dir="ltr">LIFETIME</code> value and should be aged out (deleted).</p>
<p>Specify <code dir="ltr"><span class="codeinlineitalic">Num2</span></code> as a positive integer constant.</p>
<p>If you do not specify the <code dir="ltr">CYCLE</code> clause, then the default value is 5 minutes. If you specify 0 for <code dir="ltr"><span class="codeinlineitalic">Num2,</span></code> then the aging thread wakes up every second.</p>
<p>If the aging state is <code dir="ltr">OFF</code>, then aging is not done automatically and the <code dir="ltr">CYCLE</code> clause is ignored.</p>
<p>Specify the <code dir="ltr">CYCLE</code> clause after the <code dir="ltr">SET AGING</code> clause to change the <code dir="ltr">CYCLE</code> setting.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r27c1-t17" headers="r1c1-t17"><code dir="ltr">SET AGING {ON|OFF}</code></td>
<td class="cellalignment6332" headers="r27c1-t17 r1c2-t17">Changes the aging state. The aging policy must be previously defined. <code dir="ltr">ON</code> enables automatic aging. <code dir="ltr">OFF</code> disables automatic aging. To control aging with an external scheduler, then disable aging and invoke the <code dir="ltr">ttAgingScheduleNow</code> built-in procedure.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r28c1-t17" headers="r1c1-t17"><code dir="ltr">D<a id="sthref1186"></a><a id="sthref1187"></a>ROP AGING</code></td>
<td class="cellalignment6332" headers="r28c1-t17 r1c2-t17">Drops the aging policy from the table. After you define an aging policy, you cannot alter it. Drop aging, then redefine.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r29c1-t17" headers="r1c1-t17"><code dir="ltr">SET AGING LIFETIME</code> <code dir="ltr"><span class="codeinlineitalic">Num1</span></code> <code dir="ltr">{SECOND[S]| MINUTE[S]|HOUR[S] |DAY[S]}</code></td>
<td class="cellalignment6332" headers="r29c1-t17 r1c2-t17">Use this clause to change the lifetime for time-based aging.
<p><code dir="ltr"><span class="codeinlineitalic">Num1</span></code> must be a positive integer constant.</p>
<p>If you defined your aging column with data type <code dir="ltr">TT_DATE</code>, then you must specify <code dir="ltr">DAYS</code> as the <code dir="ltr">LIFETIME</code> unit.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r30c1-t17" headers="r1c1-t17"><code dir="ltr">SET AGING CYCLE</code> <code dir="ltr"><span class="codeinlineitalic">Num2</span></code> <code dir="ltr">{SECOND[S]| MINUTE[S]| HOUR[S]|DAY[S]}</code></td>
<td class="cellalignment6332" headers="r30c1-t17 r1c2-t17">Use this clause to change the cycle for time-based aging.
<p><code dir="ltr"><span class="codeinlineitalic">Num2</span></code> must be a positive integer constant.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1188"></a>Understanding<a id="sthref1189"></a><a id="sthref1190"></a> partitions when using ALTER TABLE</p>
<p>When you create a table, an initial partition is created. If you <code dir="ltr">ALTER</code> the table, and add additional columns, secondary partitions are created. There is one secondary partition created for each <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> statement. For a column in secondary partitions, you cannot create a primary key constraint on the column or use the column for time-based aging.</p>
<p>You can use <code dir="ltr">ttMigrate</code> <code dir="ltr">-r</code> <code dir="ltr">-relaxedUpgrade</code> to condense multiple partitions. This means the initial partition plus one or more secondary partitions are condensed into a single partition called the initial partition. Once you condense the partitions, you can then <code dir="ltr">ALTER</code> the table and add a primary key constraint on the column or use the column for time-based aging. This is because the columns are no longer in secondary partitions but are now in the initial partition.</p>
<p>If your database is involved in replication and you want to condense multiple partitions, you must use the <code dir="ltr">StoreAttribute</code> <code dir="ltr">TABLE</code> <code dir="ltr">DEFINITION</code> <code dir="ltr">CHECKING</code> <code dir="ltr">RELAXED</code> (of the <code dir="ltr">CREATE</code> <code dir="ltr">REPLICATION</code> statement). Run <code dir="ltr">ttMigrate</code> <code dir="ltr">-r</code> <code dir="ltr">-relaxedUpgrade</code> on both the master and subscriber or on either the master or subscriber by using <code dir="ltr">-duplicate</code>.</p>
<p>Use <code dir="ltr">ttSchema</code> to view partition numbers for columns. <code dir="ltr">ttSchema</code> displays secondary partition number 1 as partition 1, secondary partition number 2 as partition 2 and so on.</p>
<p>As an example, create a table <code dir="ltr"><span class="codeinlineitalic">MyTab</span></code> with 2 columns. Then <code dir="ltr">ALTER</code> the table adding 2 columns (<code dir="ltr"><span class="codeinlineitalic">Col3</span></code> and <code dir="ltr"><span class="codeinlineitalic">Col4</span></code>) with the <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> <code dir="ltr">DEFAULT</code> clause.</p>
<pre dir="ltr">Command&gt; CREATE TABLE MyTab (Col1 NUMBER, Col2 VARCHAR2 (30));
Command&gt; ALTER TABLE MyTab ADD (Col3 NUMBER NOT NULL DEFAULT 10, Col4 TIMESTAMP
         NOT NULL DEFAULT TIMESTAMP &#39;2012-09-03 12:00:00&#39;);
</pre>
<p>Use <code dir="ltr">ttSchema</code> to verify <code dir="ltr"><span class="codeinlineitalic">Col3</span></code> and <code dir="ltr"><span class="codeinlineitalic">Col4</span></code> are in secondary partition 1.</p>
<pre dir="ltr">ttschema -DSN sampledb_1122
-- Database is in Oracle type mode
create table TESTUSER.MYTAB (
        COL1 NUMBER,
        COL2 VARCHAR2(30 BYTE) INLINE,
        COL3 NUMBER NOT NULL DEFAULT 10,
        COL4 TIMESTAMP(6) NOT NULL DEFAULT TIMESTAMP &#39;2012-09-03 12:00:00&#39;);
-- column COL3 partition 1
-- column COL4 partition 1
</pre>
<p>Attempt to add a primary key constraint on <code dir="ltr"><span class="codeinlineitalic">Col3</span></code> and time-based aging on <code dir="ltr"><span class="codeinlineitalic">Col4</span></code>. You see errors because you can neither add a primary key constraint nor add time-based aging to a column that is not in the initial partition.</p>
<pre dir="ltr">Command&gt; ALTER TABLE MyTab ADD CONSTRAINT PriKey PRIMARY KEY (Col3);
 2419: All columns in a primary key constraint must be in the initial partition;
column COL3 was added by ALTER TABLE
The command failed.

Command&gt; ALTER TABLE MyTab ADD AGING USE Col4 LIFETIME 3 DAYS;
 3023: Aging column must be in the initial partition; column COL4 was added by
ALTER TABLE
The command failed.
</pre>
<p>Use <code dir="ltr">ttMigrate</code> with the -<code dir="ltr">relaxedUpgrade</code> option to condense the partitions. Then use <code dir="ltr">ttSchema</code> to verify the partitions are condensed and there are no columns in secondary partition 1.</p>
<pre dir="ltr">ttMigrate -c dsn=sampledb_1122 test.migrate
 
Saving user PUBLIC
User successfully saved.
 
Saving table TESTUSER.MYTAB
  Saving rows...
  0/0 rows saved.
Table successfully saved.

ttDestroy sampledb_1122

ttMigrate -r -relaxedUpgrade
 dsn=sampledb_1122 test.migrate
 
Restoring table TESTUSER.MYTAB
  Restoring rows...
  0/0 rows restored.
Table successfully restored.

ttSchema DSN=sampledb_1122
-- Database is in Oracle type mode
create table TESTUSER.MYTAB (
        COL1 NUMBER,
        COL2 VARCHAR2(30 BYTE) INLINE,
        COL3 NUMBER NOT NULL DEFAULT 10,
        COL4 TIMESTAMP(6) NOT NULL DEFAULT TIMESTAMP &#39;2012-09-03 12:00:00&#39;);
</pre>
<p>Now add a primary key constraint on <code dir="ltr"><span class="codeinlineitalic">Col3</span></code> and time-based aging on <code dir="ltr"><span class="codeinlineitalic">Col4</span></code>. The results are successful because <code dir="ltr"><span class="codeinlineitalic">Col3</span></code> and <code dir="ltr"><span class="codeinlineitalic">Col4</span></code> are in the initial partition as a result of <code dir="ltr">ttMigrate</code>. Use <code dir="ltr">ttSchema</code> to verify results.</p>
<pre dir="ltr">Command&gt; ALTER TABLE MyTab ADD CONSTRAINT PriKey PRIMARY KEY (Col3);
Command&gt; ALTER TABLE MyTab ADD AGING USE Col4 LIFETIME 3 DAYS;

ttschema sampledb_1122
-- Database is in Oracle type mode
create table TESTUSER.MYTAB (
        COL1 NUMBER,
        COL2 VARCHAR2(30 BYTE) INLINE,
        COL3 NUMBER NOT NULL DEFAULT 10,
        COL4 TIMESTAMP(6) NOT NULL DEFAULT TIMESTAMP &#39;2012-09-03 12:00:00&#39;)
    AGING USE COL4 LIFETIME 3 days CYCLE 5 minutes ON;
 
    alter table TESTUSER.MYTAB add constraint PRIKEY primary key (COL3);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1191"></a>Description</p>
<ul>
<li>
<p>The <code dir="ltr">ALTER TABLE</code> statement cannot be used to alter a temporary table.</p>
</li>
<li>
<p>The <code dir="ltr">ALTER TABLE <a id="sthref1192"></a><a id="sthref1193"></a><a id="sthref1194"></a><a id="sthref1195"></a>ADD [COLUMN]</code> <code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code> statement adds one or more new columns to an existing table. The new columns are added to the end of all existing rows of the table in one new partition. The <code dir="ltr">ALTER TABLE</code> <code dir="ltr">ADD</code> or <code dir="ltr">DROP COLUMN</code> statement can be used to add or drop columns from replicated tables.</p>
<p>Do not use <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> to alter a replicated table that is part of a <code dir="ltr">TWOSAFE BY REQUEST</code> transaction. If you attempt to do this when <code dir="ltr">DDLCommitBehavior=1</code>, TimesTen throws an error. If you attempt to do this when <code dir="ltr">DDLCommitBehavior=0</code>, the <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> operation is not part of the <code dir="ltr">TWOSAFE</code> <code dir="ltr">BY</code> <code dir="ltr">REQUEST</code> transaction. This is because the <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> operation does an implicit commit and operates in its own transaction. The <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> statement succeeds but the transaction is not part of the <code dir="ltr">TWOSAFE</code> <code dir="ltr">BY</code> <code dir="ltr">REQUEST</code> transaction.</p>
</li>
<li>
<p>Columns referenced by materialized views cannot be dropped.</p>
</li>
<li>
<p>You cannot use the <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> statement to add a column, drop a column, or add a constraint for cache group tables.</p>
</li>
<li>
<p>Only one partition is added to the table per statement regardless of the number of columns added.</p>
</li>
<li>
<p>You can <code dir="ltr">ALTER</code> a table to add a <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> column with a default value. The <code dir="ltr">DEFAULT</code> clause is required. Restrictions include:</p>
<ul>
<li>
<p>You cannot use the column as a primary key column. Specifically, you cannot specify the column in the statement: <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> <code dir="ltr">ADD</code> <code dir="ltr"><span class="codeinlineitalic">ConstraintName</span></code> <code dir="ltr">PRIMARY</code> <code dir="ltr">KEY</code> <code dir="ltr">(</code><code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code> <code dir="ltr">[,...])</code>.</p>
</li>
<li>
<p>You cannot use the column for time-based aging. Specifically, you cannot specify the column in the statement <code dir="ltr">ALTER TABLE ADD AGING USE</code> <code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
To add a <code dir="ltr">NOT NULL</code> column to a table that is part of a replication scheme, <code dir="ltr">DDL_REPLICATON_LEVEL</code> must be 3 or greater.</div>
</li>
</ul>
</li>
<li>
<p><code dir="ltr">NULL</code> is the initial value for all added columns, unless a default value is specified for the new column.</p>
</li>
<li>
<p>The total number of columns in the table cannot exceed 1000. In addition, the total number of partitions in a table cannot exceed 1000, one of which is used by TimesTen.</p>
</li>
<li>
<p>Use the <code dir="ltr">ADD CONSTRAINT ... <a id="sthref1196"></a><a id="sthref1197"></a><a id="sthref1198"></a>PRIMARY KEY</code> clause to add a primary key constraint to a regular table or to a detailed or materialized view table. Do not use this clause on a table that already has a primary key.</p>
</li>
<li>
<p>If you use the <code dir="ltr">ADD CONSTRAINT... PRIMARY KEY</code> clause to add a primary key constraint, and you do not specify the <code dir="ltr">USE HASH INDEX</code> clause, then a range index is used for the primary key constraint.</p>
</li>
<li>
<p>If a table is replicated and the replication agent is active, you cannot use the <code dir="ltr">ADD CONSTRAINT ... PRIMARY KEY</code> clause. Stop the replication agent first.</p>
</li>
<li>
<p>Do not specify the <code dir="ltr">ADD CONSTRAINT ... PRIMARY KEY</code> clause on a global temporary table.</p>
</li>
<li>
<p>Do not specify the <code dir="ltr">ADD CONSTRAINT ... PRIMARY KEY</code> clause on a cache group table because cache group tables defined with a primary key must be defined in the <code dir="ltr">CREATE CACHE GROUP</code> statement.</p>
</li>
<li>
<p>As the result of an <code dir="ltr">ALTER TABLE ADD</code> statement, an additional read occurs for each new partition during queries. Therefore, altered tables may have slightly degraded performance. The performance can only by restored by dropping and recreating the table, or by using the <code dir="ltr">ttMigrate create -c</code> <code dir="ltr">-relaxedUpgrade</code> command, and restoring the table using the <code dir="ltr">ttRestore -r</code> <code dir="ltr">-relaxedUpgrade</code> command. Dropping the added column does not recover the lost performance or decrease the number of partitions.</p>
</li>
<li>
<p>When you use the <code dir="ltr">ALTER TABLE <a id="sthref1199"></a><a id="sthref1200"></a><a id="sthref1201"></a>DROP</code> statement to remove one or more columns from an existing table, dropped columns are removed from all current rows of the table. Subsequent SQL statements must not attempt to make any use of the dropped columns. You cannot drop columns that are in the table&#39;s primary key. You cannot drop columns that are in any of the table&#39;s foreign keys until you have dropped all foreign keys. You cannot drop columns that are indexed until all indexes on the column have been dropped. <code dir="ltr">ALTER TABLE</code> cannot be used to drop all of the columns of a table. Use <code dir="ltr">DROP TABLE</code> instead.</p>
</li>
<li>
<p>When a column is dropped from a table, all commands referencing that table need to be recompiled. An error may result at recompilation time if a dropped column was referenced. The application must re-prepare those commands, and rebuild any parameters and result columns. When a column is added to a table, the commands that contain a <code dir="ltr">SELECT *</code> statement are invalidated. Only these commands must be re-prepared. All other commands continue to work as expected.</p>
</li>
<li>
<p>When you drop a column, the column space is not freed.</p>
</li>
<li>
<p>W<a id="sthref1202"></a>hen you add a <code dir="ltr">UNIQUE</code> constraint, there is overhead incurred (in terms of additional space and additional time). This is because an index is created to maintain the <code dir="ltr">UNIQUE</code> constraint. You cannot use the <code dir="ltr">DROP INDEX</code> statement to drop an index used to maintain the <code dir="ltr">UNIQUE</code> constraint.</p>
</li>
<li>
<p>A <code dir="ltr">UNIQUE</code> constraint and its associated index cannot be dropped if it is being used as a unique index on a replicated table.</p>
</li>
<li>
<p>Use <code dir="ltr">ALTER TABLE...USE RANGE INDEX</code> if your application performs range queries over a table&#39;s primary key.</p>
</li>
<li>
<p>Use <code dir="ltr">ALTER TABLE...USE HASH INDEX</code> if your application performs exact match lookups on a table&#39;s primary key.</p>
</li>
<li>
<p>An error is generated if a table has no primary key and either the <code dir="ltr">USE HASH INDEX</code> clause or the <code dir="ltr">USE RANGE INDEX</code> clause is specified.</p>
</li>
<li>
<p>Make sure to stop the replication agent before adding or dropping a foreign key on a replicated table.</p>
</li>
<li>
<p>If <code dir="ltr">ON DELETE CASCADE</code> is specified on a foreign key constraint for a child table, a user can delete rows from a parent table for which the user has the <code dir="ltr">DELETE</code> privilege without requiring explicit <code dir="ltr">DELETE</code> privilege on the child table.</p>
</li>
<li>
<p>To change the <code dir="ltr">ON DELETE CASCADE</code> triggered action, drop then redefine the foreign key constraint.</p>
</li>
<li>
<p><code dir="ltr">ON DELETE CASCADE</code> is supported on <a id="sthref1203"></a><a id="sthref1204"></a>detail tables of a materialized view. If you have a materialized view defined over a child table, a deletion from the parent table causes cascaded deletes in the child table. This, in turn, triggers changes in the materialized view.</p>
</li>
<li>
<p>The total number of rows reported by the <code dir="ltr">DELETE</code> statement does not include rows deleted from child tables as a result of the <code dir="ltr">ON DELETE CASCADE</code> action.</p>
</li>
<li>
<p>For <code dir="ltr">ON DELETE CASCADE</code>, since different paths may lead from a parent table to a child table, the following rule is enforced:</p>
</li>
<li>
<p>Either all paths from a parent table to a child table are &#34;delete&#34; paths or all paths from a parent table to a child table are &#34;do not delete&#34; paths.</p>
<ul>
<li>
<p>Specify <code dir="ltr">ON DELETE CASCADE</code> on all child tables on the &#34;delete&#34; path.</p>
</li>
<li>
<p>This rule does not apply to paths from one parent to different children or from different parents to the same child.</p>
</li>
</ul>
</li>
<li>
<p>For <code dir="ltr">ON DELETE CASCADE</code>, a second rule is also enforced:</p>
</li>
<li>
<p>If a table is reached by a &#34;delete&#34; path, then all its children are also reached by a &#34;delete&#34; path.</p>
</li>
<li>
<p>For <code dir="ltr">ON DELETE CASCADE</code> with replication, the following restrictions apply:</p>
<ul>
<li>
<p>The foreign keys specified with <code dir="ltr">ON DELETE CASCADE</code> must match between the Master and subscriber for replicated tables. Checking is done at runtime. If there is an error, the receiver thread stops working.</p>
</li>
<li>
<p>All tables in the delete cascade tree have to be replicated if any table in the tree is replicated. This restriction is checked when the replication scheme is created or when a foreign key with <code dir="ltr">ON DELETE CASCADE</code> is added to one of the replication tables. If an error is found, the operation is aborted. You may be required to drop the replication scheme first before trying to change the foreign key constraint.</p>
</li>
</ul>
</li>
<li>
<p>The <code dir="ltr">ALTER TABLE ADD/DROP CONSTRAINT</code> statement has the following restrictions:</p>
<ul>
<li>
<p>When a foreign key is dropped, TimesTen also drops the index associated with the foreign key. Attempting to drop an index associated with a foreign key using the regular <code dir="ltr">DROP INDEX</code> statement results in an error.</p>
</li>
<li>
<p>Foreign keys cannot be added or dropped on tables in a cache group.</p>
</li>
<li>
<p>Foreign keys cannot be added or dropped on views or temporary tables.</p>
</li>
<li>
<p>You cannot use <code dir="ltr">ALTER TABLE</code> to drop a primary key constraint. You would have to drop and recreate the table in order to drop the constraint.</p>
</li>
</ul>
</li>
<li>
<p>A<a id="sthref1205"></a><a id="sthref1206"></a>fter you have defined an aging policy for the table, you cannot change the policy from LRU to time-based or from time-based to LRU. You must first drop aging and then alter the table to add a new aging policy.</p>
</li>
<li>
<p>The aging policy must be defined to change the aging state.</p>
</li>
<li>
<p>The following rules determine if a row is accessed or referenced for LRU aging:</p>
<ul>
<li>
<p>Any rows used to build the result set of a <code dir="ltr">SELECT</code> statement.</p>
</li>
<li>
<p>Any rows used to build the result set of an <code dir="ltr">INSERT ... SELECT</code> statement.</p>
</li>
<li>
<p>Any rows that are about to be updated or deleted.</p>
</li>
</ul>
</li>
<li>
<p>Compiled commands are marked invalid and need recompilation when you either drop LRU aging from or add LRU aging to tables that are referenced in the commands.</p>
</li>
<li>
<p>Call the <code dir="ltr">ttAgingScheduleNow</code> procedure to schedule the aging process right away regardless if the aging state is <code dir="ltr">ON</code> or <code dir="ltr">OFF</code>.</p>
</li>
<li>
<p>For the time-based aging policy, you cannot add or modify the aging column. This is because you cannot add or modify a <code dir="ltr">NOT NULL</code> column.</p>
</li>
<li>
<p>A<a id="sthref1207"></a><a id="sthref1208"></a>ging restrictions:</p>
<ul>
<li>
<p>You cannot drop the column that is used for time-based aging.</p>
</li>
<li>
<p>Tables that are related by foreign keys must have the same aging policy.</p>
</li>
<li>
<p>For LRU aging, if a child row is not a candidate for aging, neither this child row nor its parent row are deleted. <code dir="ltr">ON DELETE CASCADE</code> settings are ignored.</p>
</li>
<li>
<p>For time-based aging, if a parent row is a candidate for aging, then all child rows are deleted. <code dir="ltr">ON DELETE CASCADE</code> (whether specified or not) is ignored.</p>
</li>
</ul>
</li>
<li>
<p>R<a id="sthref1209"></a><a id="sthref1210"></a>estrictions for in-memory columnar compression of tables:</p>
<ul>
<li>
<p>You can add compressed column groups with the <code dir="ltr">ALTER TABLE</code> statement only if the table was enabled for compression at table creation. You can add uncompressed columns to any table, including tables enabled for compression. A table is enabled for compression during creation when <code dir="ltr">OPTIMIZED FOR READ</code> is specified. Refer to <a href="#BABFGIHD">&#34;In-memory columnar compression of tables&#34;</a> for more details on adding compressed column groups to a table.</p>
</li>
<li>
<p>You cannot modify columns of a compressed column group.</p>
</li>
<li>
<p>You can drop all columns within a compressed column group with the <code dir="ltr">ALTER TABLE</code> command; when removing columns in a compressed column group, all columns in the compressed column group must be specified for removal.</p>
</li>
<li>
<p>You cannot use <code dir="ltr">ALTER TABLE</code> to modify an existing uncompressed column to make it compressed. For example:</p>
<pre dir="ltr">Command&gt; create table mytab (a varchar2 (30), b int, c int) compress ((a,b)
by dictionary) optimized for read;
Command&gt; alter table mytab add (d int) compress (c by dictionary);
2246: Cannot change compression clause for already defined column C 
The command failed.
</pre></li>
</ul>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1211"></a>Examples</p>
<p>Add <code dir="ltr">returnrate</code> column to <code dir="ltr">parts</code> table.</p>
<pre dir="ltr">ALTER TABLE parts ADD COLUMN returnrate DOUBLE;
</pre>
<p>Add <code dir="ltr">numsssign</code> and <code dir="ltr">prevdept</code> columns to <code dir="ltr">contractor</code> table.</p>
<pre dir="ltr">ALTER TABLE contractor
  ADD ( numassign INTEGER, prevdept CHAR(30) );
</pre>
<p>Remove <code dir="ltr">addr1</code> and <code dir="ltr">addr2</code> columns from <code dir="ltr">employee</code> table.</p>
<pre dir="ltr">ALTER TABLE employee DROP ( addr1, addr2 );
</pre>
<p>Drop the <code dir="ltr">UNIQUE</code> title column of the <code dir="ltr">books</code> table.</p>
<pre dir="ltr">ALTER TABLE books DROP UNIQUE (title);
</pre>
<p>Add the <code dir="ltr">x1</code> column to the <code dir="ltr">t1</code> table with a default value of 5:</p>
<pre dir="ltr">ALTER TABLE t1 ADD (x1 INT DEFAULT 5);
</pre>
<p>Change the default value of column <code dir="ltr">x1</code> to 2:</p>
<pre dir="ltr">ALTER TABLE t1 MODIFY (x1 DEFAULT 2);
</pre>
<p>Alter table <code dir="ltr">primarykeytest</code> to add the primary key constraint <code dir="ltr">c1</code>. Use the <code dir="ltr">ttIsql</code> <code dir="ltr">INDEXES</code> command to show that the primary key constraint <code dir="ltr">c1</code> is created and a range index is used:</p>
<pre dir="ltr">Command&gt; CREATE TABLE primarykeytest (col1 TT_INTEGER NOT NULL);
Command&gt; ALTER TABLE primarykeytest ADD CONSTRAINT c1 
&gt;        PRIMARY KEY (col1);
Command&gt; INDEXES primarykeytest;

Indexes on table SAMPLEUSER.PRIMARYKEYTEST:
  C1: unique range index on columns:
    COL1
  1 index found.

1 index found on 1 table.
</pre>
<p>Alter table <code dir="ltr">prikeyhash</code> to add the primary key constraint <code dir="ltr">c2</code> using a hash index. Use the <code dir="ltr">ttIsql</code> <code dir="ltr">INDEXES</code> command to show that the primary key constraint <code dir="ltr">c2</code> is created and a hash index is used:</p>
<pre dir="ltr">Command&gt; CREATE TABLE prikeyhash (col1 NUMBER (3,2) NOT NULL);
Command&gt; ALTER TABLE prikeyhash ADD CONSTRAINT c2
&gt;        PRIMARY KEY (col1) USE HASH INDEX PAGES = 20;
Command&gt; INDEXES prikeyhash;

Indexes on table SAMPLEUSER.PRIKEYHASH:
  C2: unique hash index on columns:
    COL1
  1 index found.

1 table found.
</pre>
<p>Attempt to add a primary key constraint on a table already defined with a primary key. You see an error:</p>
<pre dir="ltr">Command&gt; CREATE TABLE oneprikey (col1 VARCHAR2 (30) NOT NULL, 
&gt;        col2 TT_BIGINT NOT NULL, col3 CHAR (15) NOT NULL, 
&gt;        PRIMARY KEY (col1,col2));
Command&gt; ALTER TABLE oneprikey ADD CONSTRAINT c2 
&gt;        PRIMARY KEY (col1,col2);
 2235: Table can have only one primary key
The command failed.
</pre>
<p>Attempt to add a primary key constraint on a column that is not defined as <code dir="ltr">NOT NULL</code>. You see an error:</p>
<pre dir="ltr">Command&gt; CREATE TABLE prikeynull (col1 CHAR (30));
Command&gt; ALTER TABLE prikeynull ADD CONSTRAINT c3 
&gt;        PRIMARY KEY (col1);
 2236: Nullable column cannot be part of a primary key
The command failed.
</pre>
<p>This example illustrates the use of range and hash indexes. It creates the <code dir="ltr">pkey</code> table with <code dir="ltr">col1</code> as the primary key. A range index is created by default. The table is then altered to change the index on <code dir="ltr">col1</code> to a hash index. The table is altered again to change the index back to a range index.</p>
<pre dir="ltr">Command&gt; CREATE TABLE pkey (col1 TT_INTEGER PRIMARY KEY, col2 VARCHAR2 (20));
Command&gt; INDEXES pkey;
Indexes on table SAMPLEUSER.PKEY:
   PKEY: unique range index on columns:
    COL1
 1 index found.
1 index found on 1 table.
</pre>
<p>Alter the <code dir="ltr">pkey</code> table to use a hash index:</p>
<pre dir="ltr">Command&gt; ALTER TABLE pkey USE HASH INDEX PAGES = CURRENT;
Command&gt; INDEXES pkey;
Indexes on table SAMPLEUSER.PKEY:
  PKEY: unique hash index on columns:
    COL1
  1 index found.
1 table found.
</pre>
<p>Alter the <code dir="ltr">pkey</code> table to use a range index with the <code dir="ltr">USE RANGE INDEX</code> clause:</p>
<pre dir="ltr">Command&gt; ALTER TABLE pkey USE RANGE INDEX;
Command&gt; INDEXES pkey;
Indexes on table SAMPLEUSER.PKEY:
  PKEY: unique range index on columns:
    COL1
  1 index found.
1 table found.
</pre>
<p>This example generates an error when attempting to alter a table to define either a range or hash index on a column without a primary key.</p>
<pre dir="ltr">Command&gt; CREATE TABLE illegalindex (Ccl1 CHAR (20));
Command&gt; ALTER TABLE illegalindex USE RANGE INDEX;
 2810: The table has no primary key so cannot change its index type
The command failed.
Command&gt; ALTER TABLE illegalindex USE HASH INDEX PAGES = CURRENT;
 2810: The table has no primary key so cannot change its index type
The command failed.
</pre>
<p>These examples show how time resolution works with aging. In this example, lifetime is three days.</p>
<ul>
<li>
<p>If <code dir="ltr">(SYSDATE - ColumnValue) &lt;= 3</code>, do not age out the row.</p>
</li>
<li>
<p>If <code dir="ltr">(SYSDATE - ColumnValue) &gt; 3</code>, then the row is a candidate for aging.</p>
</li>
<li>
<p>If <code dir="ltr">(SYSDATE - ColumnValue) = 3 day</code>s, 22 hours, then row is not aged out because lifetime was specified in days. The row would be aged out if lifetime had been specified as 72 hours.</p>
</li>
</ul>
<p>This example alters a table by adding LRU aging. The table has no previous aging policy. The aging state is <code dir="ltr">ON</code> by default.</p>
<pre dir="ltr">ALTER TABLE agingdemo3 ADD AGING LRU;
Command&gt; DESCRIBE agingdemo3;
Table USER.AGINGDEMO3:
  Columns:
   *AGINGID                         NUMBER NOT NULL
    NAME                            VARCHAR2 (20) INLINE
  Aging lru on
1 table found.
(primary key columns are indicated with *)
</pre>
<p>This example alters a table by adding time-based aging. The table has no previous aging policy. The <code dir="ltr">agingcolumn</code> column is used for aging. <code dir="ltr">LIFETIME</code> is 2 days. <code dir="ltr">CYCLE</code> is 30 minutes.</p>
<pre dir="ltr">ALTER TABLE agingdemo4
       ADD AGING USE agingcolumn LIFETIME 2 DAYS CYCLE 30 MINUTES;
Command&gt; DESCRIBE agingdemo4;
Table USER.AGINGDEMO4:
  Columns:
   *AGINGID                         NUMBER NOT NULL
    NAME                            VARCHAR2 (20) INLINE
    AGINGCOLUMN                     TIMESTAMP (6) NOT NULL
  Aging use AGINGCOLUMN lifetime 2 days cycle 30 minutes on
</pre>
<p>This example illustrates that after you create an aging policy, you cannot change it. You must drop aging and redefine.</p>
<pre dir="ltr">CREATE TABLE agingdemo5
       (agingid NUMBER NOT NULL PRIMARY KEY
       ,name VARCHAR2 (20)
       ,agingcolumn TIMESTAMP NOT NULL
       )
       AGING USE agingcolumn LIFETIME 3 DAYS OFF;
ALTER TABLE agingdemo5
      ADD AGING LRU;
 2980: Cannot add aging policy to a table with an existing aging policy. Have to
 drop the old aging first
The command failed.
</pre>
<p>Drop aging on the table and redefine with LRU aging.</p>
<pre dir="ltr">ALTER TABLE agingdemo5
      DROP AGING;
ALTER TABLE agingdemo5
       ADD AGING LRU;
Command&gt; DESCRIBE agingdemo5;
Table USER.AGINGDEMO5:
  Columns:
   *AGINGID                         NUMBER NOT NULL
    NAME                            VARCHAR2 (20) INLINE
    AGINGCOLUMN                     TIMESTAMP (6) NOT NULL
  Aging lru on
1 table found.
(primary key columns are indicated with *)
</pre>
<p>This example alters a table by setting the aging state to <code dir="ltr">OFF</code>. The table has been defined with a time-based aging policy. If you set the aging state to <code dir="ltr">OFF</code>, aging is not done automatically. This is useful to use an external scheduler to control the aging process. Set aging state to <code dir="ltr">OFF</code> and then call the <code dir="ltr">ttAgingScheduleNow</code> procedure to start the aging process.</p>
<pre dir="ltr">Command&gt; DESCRIBE agingdemo4;
Table USER.AGINGDEMO4:
  Columns:
   *AGINGID                         NUMBER NOT NULL
    NAME                            VARCHAR2 (20) INLINE
    AGINGCOLUMN                     TIMESTAMP (6) NOT NULL
  Aging use AGINGCOLUMN lifetime 2 days cycle 30 minutes on

ALTER TABLE AgingDemo4
       SET AGING OFF;
</pre>
<p>Note that when you describe <code dir="ltr">agingdemo4</code>, the aging policy is defined and the aging state is set to <code dir="ltr">OFF</code>.</p>
<pre dir="ltr">Command&gt; DESCRIBE agingdemo4;
Table USER.AGINGDEMO4:
  Columns:
   *AGINGID                         NUMBER NOT NULL
    NAME                            VARCHAR2 (20) INLINE
    AGINGCOLUMN                     TIMESTAMP (6) NOT NULL
  Aging use AGINGCOLUMN lifetime 2 days cycle 30 minutes off
1 table found.
(primary key columns are indicated with *)
</pre>
<p>Call <code dir="ltr">ttAgingScheduleNow</code> to invoke aging with an external scheduler:</p>
<pre dir="ltr">Command&gt; CALL ttAgingScheduleNow (&#39;agingdemo4&#39;);
</pre>
<p>Attempt to alter a table adding the aging column and then use that column for time-based aging. An error is generated.</p>
<pre dir="ltr">Command&gt; DESCRIBE x;
Table USER1.X:
  Columns:
   *ID                              TT_INTEGER NOT NULL
1 table found.
(primary key columns are indicated with *)
Command&gt; ALTER TABLE x ADD COLUMN t TIMESTAMP;
Command&gt; ALTER TABLE x ADD AGING USE t LIFETIME 2 DAYS;
 2993: Aging column cannot be nullable
The command failed.
</pre>
<p>Attempt to alter the <code dir="ltr">LIFETIME</code> clause for a table defined with time-based aging. The aging column is defined with data type <code dir="ltr">TT_DATE</code>. An error is generated because the <code dir="ltr">LIFETIME</code> unit is not expressed in <code dir="ltr">DAYS</code>.</p>
<pre dir="ltr">Command&gt; CREATE TABLE aging1 (col1 TT_DATE NOT NULL) AGING USE 
         col1 LIFETIME 2 DAYS;
Command&gt; ALTER TABLE aging1 SET AGING LIFETIME 2 HOURS;
 2977: Only DAY lifetime unit is allowed with a TT_DATE column
The command failed.
</pre>
<p>Alter the <code dir="ltr">employees</code> table to add a new compressed column of <code dir="ltr">state</code>, which contains the full name of the state. Note that the <code dir="ltr">employees</code> table already has a compressed column group consisting of <code dir="ltr">job_id</code> and <code dir="ltr">manager_id</code>.</p>
<pre dir="ltr">Command&gt; ALTER TABLE employees 
 ADD COLUMN state VARCHAR2(20) 
 COMPRESS (state BY DICTIONARY);

Command&gt; DESCRIBE employees; 
Table MYSCHEMA.EMPLOYEES:
  Columns:
   *EMPLOYEE_ID                     NUMBER (6) NOT NULL
    FIRST_NAME                      VARCHAR2 (20) INLINE
    LAST_NAME                       VARCHAR2 (25) INLINE NOT NULL
    EMAIL                           VARCHAR2 (25) INLINE NOT NULL
    PHONE_NUMBER                    VARCHAR2 (20) INLINE
    HIRE_DATE                       DATE NOT NULL
    JOB_ID                          VARCHAR2 (10) INLINE NOT NULL
    SALARY                          NUMBER (8,2)
    COMMISSION_PCT                  NUMBER (2,2)
    MANAGER_ID                      NUMBER (6)
    DEPARTMENT_ID                   NUMBER (4)
    STATE                           VARCHAR2 (20) INLINE
  COMPRESS ( ( JOB_ID, MANAGER_ID ) BY DICTIONARY,
             STATE BY DICTIONARY ) OPTIMIZED FOR READ
 
1 table found.
(primary key columns are indicated with *)
</pre>
<p>The following example drops the compressed column <code dir="ltr">state</code> from the <code dir="ltr">employees</code> table:</p>
<pre dir="ltr">Command&gt; ALTER TABLE employees
 DROP state;
Command&gt; DESCRIBE employees; 
Table MYSCHEMA.EMPLOYEES:
  Columns:
   *EMPLOYEE_ID                     NUMBER (6) NOT NULL
    FIRST_NAME                      VARCHAR2 (20) INLINE
    LAST_NAME                       VARCHAR2 (25) INLINE NOT NULL
    EMAIL                           VARCHAR2 (25) INLINE NOT NULL
    PHONE_NUMBER                    VARCHAR2 (20) INLINE
    HIRE_DATE                       DATE NOT NULL
    JOB_ID                          VARCHAR2 (10) INLINE NOT NULL
    SALARY                          NUMBER (8,2)
    COMMISSION_PCT                  NUMBER (2,2)
    MANAGER_ID                      NUMBER (6)
    DEPARTMENT_ID                   NUMBER (4)
 COMPRESS ( ( JOB_ID, MANAGER_ID ) BY DICTIONARY ) OPTIMIZED FOR READ
 
1 table found.
(primary key columns are indicated with *)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1212"></a>See also</p>
<br/>
<code dir="ltr"><a href="#i1211666">CREATE TABLE</a></code><br/>
<code dir="ltr"><a href="#g1513813">DROP TABLE</a></code>
<p><a class="olink TTOPR348" href="../TTOPR/comp.htm#TTOPR348">&#34;Implementing aging in your tables&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1334963"></a>
<div id="TTSQL287" class="refsect1">
<h2 class="refsect1"><a id="sthref1213"></a><a id="sthref1214"></a>ALTER USER</h2>
<p>The <code dir="ltr">ALTER USER</code> statement enables a user to change the user&#39;s own password. A user with the <code dir="ltr">ADMIN</code> privilege can change another user&#39;s password.</p>
<p>This statement also enables a user to change another user from internal to external or from external to internal.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1215"></a>Required privilege</p>
<p>No privilege is required to change the user&#39;s own password.</p>
<p><code dir="ltr">ADMIN</code> privilege is required to change another user&#39;s password.</p>
<p><code dir="ltr">ADMIN</code> privilege is required to change users from internal to external and from external to internal.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1216"></a>SQL syntax</p>
<pre dir="ltr">ALTER USER <span class="codeinlineitalic">user</span> IDENTIFIED BY {<span class="italic">password</span> | &#34;<span class="italic">password</span>&#34;}
ALTER USER <span class="italic">user</span> IDENTIFIED EXTERNALLY
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1217"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters of ALTER USER." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t19">Parameter</th>
<th class="cellalignment6331" id="r1c2-t19">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t19" headers="r1c1-t19"><code dir="ltr"><span class="codeinlineitalic">user</span></code></td>
<td class="cellalignment6332" headers="r2c1-t19 r1c2-t19">Name of the user whose password is being changed.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t19" headers="r1c1-t19"><code dir="ltr">IDENTIFIED</code></td>
<td class="cellalignment6332" headers="r3c1-t19 r1c2-t19">Identification clause, to specify the password for an internal user or that the user is external.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t19" headers="r1c1-t19"><code dir="ltr">BY</code> <code dir="ltr"><span class="codeinlineitalic">password</span></code> <code dir="ltr">|&#34;</code><code dir="ltr"><span class="codeinlineitalic">password</span></code><code dir="ltr">&#34;</code></td>
<td class="cellalignment6332" headers="r4c1-t19 r1c2-t19">Specifies the password that identifies the internal user to the TimesTen database.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t19" headers="r1c1-t19"><code dir="ltr">EXTERNALLY</code></td>
<td class="cellalignment6332" headers="r5c1-t19 r1c2-t19">Identifies the operating system <code dir="ltr"><span class="codeinlineitalic">user</span></code> to the TimesTen database. To perform database operations as an external user, the process needs a TimesTen external user name that matches the user name authenticated by the operating system or network. A password is not required by TimesTen because the user has been authenticated by the operating system at login time.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1218"></a>Description</p>
<ul>
<li>
<p>Database users can be internal or external.</p>
<ul>
<li>
<p>Internal users are defined for a TimesTen database.</p>
</li>
<li>
<p>External users are defined by an external authority, such as the operating system. External users cannot be assigned a TimesTen password.</p>
</li>
</ul>
</li>
<li>
<p>If you are an internal user connected as <code dir="ltr"><span class="codeinlineitalic">user</span></code>, execute this statement to change your TimesTen password.</p>
</li>
<li>
<p>Passwords are case-sensitive.</p>
</li>
<li>
<p>You cannot alter a user across a client/server connection. You must use a direct connection when altering a user.</p>
</li>
<li>
<p>When replication is configured, this statement is replicated.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1219"></a>Examples</p>
<p>To change the password for internal user <code dir="ltr">terry</code> to <code dir="ltr">&#34;12345&#34;</code> from its current setting, use:</p>
<pre dir="ltr">ALTER USER terry IDENTIFIED BY &#34;12345&#34;;
User altered.
</pre>
<p>To change user <code dir="ltr">terry</code> to an external user:</p>
<pre dir="ltr">ALTER USER terry IDENTIFIED EXTERNALLY;
User altered.
</pre>
<p>To change user <code dir="ltr">terry</code> back to an internal user, provide a password:</p>
<pre dir="ltr">ALTER USER terry IDENTIFIED BY &#34;secret&#34;;
User altered.
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1220"></a>See also</p>
<br/>
<code dir="ltr"><a href="#g1513697">CREATE USER</a></code><br/>
<code dir="ltr"><a href="#BABEFCHB">DROP USER</a></code><br/>
<code dir="ltr"><a href="#g1513872">GRANT</a></code><br/>
<code dir="ltr"><a href="#g1513967">REVOKE</a></code></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABJCDGD"></a>
<div id="TTSQL443" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref1221"></a><a id="sthref1222"></a><a id="sthref1223"></a>CALL</h2>
<p>Use the <code dir="ltr">CALL</code> statement to invoke a TimesTen built-in procedure or to execute a PL/SQL procedure or function that is standalone or part of a package from within SQL.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1224"></a>Required privilege</p>
<p>The privileges required for invoking each TimesTen built-in procedure are listed in the description of each procedure in the <a class="olink TTREF213" href="../TTREF/proced.htm#TTREF213">&#34;Built-In Procedures&#34;</a> section in the <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</p>
<p>No privileges are required for an owner calling its own PL/SQL procedure or function that is standalone or part of a package using the <code dir="ltr">CALL</code> statement. For all other users, the <code dir="ltr">EXECUTE</code> privilege on the procedure or function or on the package in which it is defined is required.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1225"></a>SQL syntax</p>
<p>To call a TimesTen built-in procedure:</p>
<pre dir="ltr">CALL [<span class="italic">TimesTenBuiltIn</span> [( <span class="codeinlineitalic">arguments</span> )] 
</pre>
<p>When calling PL/SQL procedures or functions that are standalone or part of a package, you can either call these by name or as the result of an expression.</p>
<p>To call a PL/SQL procedure:</p>
<pre dir="ltr">CALL [<span class="italic">Owner</span>.][<span class="italic">Package</span>.]<span class="italic">ProcedureName</span> [( <span class="codeinlineitalic">arguments</span> )] 
</pre>
<p>To call a PL/SQL function that returns a parameter, one of the following are appropriate:</p>
<pre dir="ltr">CALL [<span class="italic">Owner</span>.][<span class="italic">Package</span>.]<span class="italic">FunctionName</span> [( <span class="codeinlineitalic">arguments</span> )] INTO :<span class="codeinlineitalic">return_param</span>
</pre></div>
<!-- class="refsubsect" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
A user&#39;s own PL/SQL procedure or function takes precedence over a TimesTen built-in procedure with the same name.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1226"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters of COMMIT." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t21">Parameter</th>
<th class="cellalignment6331" id="r1c2-t21">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t21" headers="r1c1-t21"><code dir="ltr"><span class="codeinlineitalic">TimesTenBuiltIn</span></code></td>
<td class="cellalignment6332" headers="r2c1-t21 r1c2-t21">Name of the TimesTen built-in procedure. For a full list of TimesTen built-in procedures, see <a class="olink TTREF213" href="../TTREF/proced.htm#TTREF213">&#34;Built-In Procedures&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Reference</span>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t21" headers="r1c1-t21"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">ProcedureName</span></code></td>
<td class="cellalignment6332" headers="r3c1-t21 r1c2-t21">Name of the PL/SQL procedure. You can optionally specify the owner of the procedure.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t21" headers="r1c1-t21"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">FunctionName</span></code></td>
<td class="cellalignment6332" headers="r4c1-t21 r1c2-t21">Name of the PL/SQL function. You can optionally specify the owner of the function.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t21" headers="r1c1-t21"><code dir="ltr"><span class="codeinlineitalic">arguments</span></code></td>
<td class="cellalignment6332" headers="r5c1-t21 r1c2-t21">Specify 0 or more arguments for the PL/SQL procedure or function.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t21" headers="r1c1-t21"><code dir="ltr">INTO</code></td>
<td class="cellalignment6332" headers="r6c1-t21 r1c2-t21">If the routine is a function, the <code dir="ltr">INTO</code> clause is required.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r7c1-t21" headers="r1c1-t21"><code dir="ltr"><span class="codeinlineitalic">return_param</span></code></td>
<td class="cellalignment6332" headers="r7c1-t21 r1c2-t21">Specify the host variable that stores the return value of the function.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1227"></a>Description</p>
<p>Detailed information on how to execute PL/SQL procedures or functions with the <code dir="ltr">CALL</code> statement in TimesTen is provided in <a class="olink TTPLS136" href="../TTPLS/overview.htm#TTPLS136">&#34;How to execute PL/SQL procedures and functions&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database PL/SQL Developer&#39;s Guide</span>, <a class="olink TTCDV154" href="../TTCDV/writing_app.htm#TTCDV154">&#34;Using CALL to execute procedures and functions&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database C Developer&#39;s Guide</span>, or <a class="olink TTJDV152" href="../TTJDV/writing_app.htm#TTJDV152">&#34;Using CALL to execute procedures and functions&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Java Developer&#39;s Guide</span>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1228"></a>Examples</p>
<p>The following is the definition of the <code dir="ltr">mytest</code> function:</p>
<pre dir="ltr">create or replace function mytest return number is
begin
  return 1;
end;
/
</pre>
<p>Perform the following to execute the <code dir="ltr">mytest</code> function in a <code dir="ltr">CALL</code> statement:</p>
<pre dir="ltr">Command&gt; variable n number;
Command&gt; call mytest() into :n;
Command&gt; print n;
N                    : 1
</pre>
<p>The following example creates a function that returns the salary of the employee whose employee ID is specified as input, then calls the function and displays the result that was returned.</p>
<pre dir="ltr">Command&gt; CREATE OR REPLACE FUNCTION get_sal
       &gt;   (p_id employees.employee_id%TYPE) RETURN NUMBER IS
       &gt;    v_sal employees.salary%TYPE := 0;
       &gt; BEGIN
       &gt;   SELECT salary INTO v_sal FROM employees
       &gt;     WHERE employee_id = p_id;
       &gt;   RETURN v_sal;
       &gt; END get_sal;
       &gt; /
 
Function created.
 
Command&gt; variable n number;
Command&gt; call get_sal(100) into :n;
Command&gt; print n;
N                    : 24000
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1440984"></a>
<div id="TTSQL288" class="refsect1">
<h2 class="refsect1"><a id="sthref1229"></a><a id="sthref1230"></a>COMMIT</h2>
<p>The <code dir="ltr">COMMIT</code> statement ends the current transaction and makes permanent all changes performed in the transaction.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1231"></a>Required privilege</p>
<p>None</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1232"></a>SQL syntax</p>
<pre dir="ltr">COMMIT [WORK]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1233"></a>Parameters</p>
<p>The <code dir="ltr">COMMIT</code> statement enables the following optional keyword:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters of COMMIT." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t22">Parameter</th>
<th class="cellalignment6331" id="r1c2-t22">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t22" headers="r1c1-t22"><code dir="ltr">[WORK]</code></td>
<td class="cellalignment6332" headers="r2c1-t22 r1c2-t22">Optional clause supported for compliance with the SQL standard. <code dir="ltr">COMMIT</code> and <code dir="ltr">COMMIT WORK</code> are equivalent.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1234"></a>Description</p>
<ul>
<li>
<p>Until you commit a transaction:</p>
<ul>
<li>
<p>You can see any changes you have made during the transaction but other users cannot see the changes. After you commit the transaction, the changes are visible to other users&#39; statements that execute after the commit.</p>
</li>
<li>
<p>You can roll back (undo) changes made during the transaction with the <code dir="ltr"><a href="#i1440999">ROLLBACK</a></code> statement.</p>
</li>
</ul>
</li>
<li>
<p>This statement releases transaction locks.</p>
</li>
<li>
<p>For passthrough, the Oracle Database transaction will also be committed.</p>
</li>
<li>
<p>A commit closes all open cursors.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1235"></a>Examples</p>
<p>Insert a row into <code dir="ltr">regions</code> table of the <code dir="ltr">HR</code> schema and commit transaction. First set autocommit to 0:</p>
<pre dir="ltr">Command&gt; SET AUTOCOMMIT 0;
Command&gt; INSERT INTO regions VALUES (5,&#39;Australia&#39;);
1 row inserted.
Command&gt; COMMIT;
Command&gt; SELECT * FROM regions;
&lt; 1, Europe &gt;
&lt; 2, Americas &gt;
&lt; 3, Asia &gt;
&lt; 4, Middle East and Africa &gt;
&lt; 5, Australia &gt;
5 rows found.
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1236"></a>See also</p>
<p><code dir="ltr"><a href="#i1440999">ROLLBACK</a></code></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1438072"></a>
<div id="TTSQL289" class="refsect1">
<h2 class="refsect1"><a id="sthref1237"></a><a id="sthref1238"></a>CREATE ACTIVE STANDBY PAIR</h2>
<p>This statement creates an active standby pair. It includes an active master database, a standby master database, and may also include one or more read-only subscribers. The active master database replicates updates to the standby master database, which propagates the updates to the subscribers.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1239"></a>Required privilege</p>
<p><code dir="ltr">ADMIN</code></p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1240"></a>SQL syntax</p>
<pre dir="ltr">CREATE ACTIVE STANDBY PAIR
  <span class="italic">FullStoreName</span>, <span class="italic">FullStoreName</span> [<span class="italic">ReturnServiceAttribute</span>]
    [SUBSCRIBER <span class="italic">FullStoreName</span> [,...]]
    [STORE <span class="italic">FullStoreName</span> [<span class="italic">StoreAttribute</span> [...]]]
    [<span class="italic">NetworkOperation</span> [...] ]
    [{ INCLUDE | EXCLUDE }{TABLE [[<span class="italic">Owner</span>.]<span class="italic">TableName</span> [,...]]|
         CACHE GROUP [[<span class="italic">Owner</span>.]<span class="italic">CacheGroupName</span> [,...]]|
         SEQUENCE [[<span class="italic">Owner</span>.]<span class="italic">SequenceName</span> [,...]]} [,...]]
</pre>
<p>Syntax for <code dir="ltr"><span class="codeinlineitalic">ReturnServiceAttribute</span></code>:</p>
<pre dir="ltr">{ RETURN RECEIPT [BY REQUEST] |
  RETURN TWOSAFE [BY REQUEST] |
  NO RETURN }
</pre>
<p>Syntax for <code dir="ltr"><span class="codeinlineitalic">StoreAttribute</span></code>:</p>
<pre dir="ltr">  DISABLE RETURN {SUBSCRIBER | ALL} <span class="italic">NumFailures </span>
  RETURN SERVICES {ON | OFF} WHEN [REPLICATION] STOPPED 
  DURABLE COMMIT {ON | OFF}
  RESUME RETURN <span class="italic">Milliseconds </span>
  LOCAL COMMIT ACTION {NO ACTION | COMMIT} 
  RETURN WAIT TIME <span class="italic">Seconds </span>
  COMPRESS TRAFFIC {ON | OFF}
  PORT <span class="italic">PortNumber </span>
  TIMEOUT <span class="italic">Seconds </span>
  FAILTHRESHOLD <span class="italic">Value </span>
  TABLE DEFINITION CHECKING {RELAXED|EXACT}
</pre>
<p>Syntax for <code dir="ltr"><span class="codeinlineitalic">NetworkOperation</span></code>:</p>
<pre dir="ltr">ROUTE MASTER <span class="italic">FullStoreName</span> SUBSCRIBER <span class="italic">FullStoreName</span>
  { { MASTERIP <span class="italic">MasterHost</span> | SUBSCRIBERIP <span class="italic">SubscriberHost</span> }
      PRIORITY <span class="italic">Priority</span> } [...]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1241"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters of CREATE ACTIVE STANDBY PAIR." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t23">Parameter</th>
<th class="cellalignment6331" id="r1c2-t23">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t23" headers="r1c1-t23"><code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code></td>
<td class="cellalignment6332" headers="r2c1-t23 r1c2-t23">The database, specified as one of the following:
<ul>
<li>
<p><code dir="ltr">SELF</code></p>
</li>
<li>
<p>The prefix of the database file name</p>
</li>
</ul>
<p>For example, if the database path is <code dir="ltr"><span class="codeinlineitalic">directory</span></code><code dir="ltr">/</code><code dir="ltr"><span class="codeinlineitalic">subdirectory</span></code><code dir="ltr">/data.ds0</code>, then <code dir="ltr">data</code> is the database name that should be used.</p>
<p>This is the database file name specified in the <code dir="ltr">DataStore</code> attribute of the DSN description with optional host ID in the form:</p>
<p><code dir="ltr"><span class="codeinlineitalic">DataStoreName</span></code> <code dir="ltr">[ON</code> <code dir="ltr"><span class="codeinlineitalic">Host</span></code><code dir="ltr">]</code></p>
<p><code dir="ltr"><span class="codeinlineitalic">Host</span></code> can be either an IP address or a literal host name assigned to one or more IP addresses, as described in <a class="olink TTREP401" href="../TTREP/attrib.htm#TTREP401">&#34;Configuring the network&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span>. Host names containing special characters must be surrounded by double quotes. For example: <code dir="ltr">&#34;MyHost-500&#34;</code>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t23" headers="r1c1-t23"><code dir="ltr">RETURN RECEIPT [BY REQUEST]</code></td>
<td class="cellalignment6332" headers="r3c1-t23 r1c2-t23">Enables the return receipt service, so that applications that commit a transaction to an active master database are blocked until the transaction is received by the standby master database.
<p>Specifying <code dir="ltr">RETURN RECEIPT</code> applies the service to all transactions. If you specify <code dir="ltr">RETURN RECEIPT BY REQUEST</code>, you can use the <code dir="ltr">ttRepSyncSet</code> procedure to enable the return receipt service for selected transactions. For details on the use of the return services, see <a class="olink TTREP183" href="../TTREP/attrib.htm#TTREP183">&#34;Using a return service&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t23" headers="r1c1-t23"><code dir="ltr">RETURN TWOSAFE [BY REQUEST]</code></td>
<td class="cellalignment6332" headers="r4c1-t23 r1c2-t23">Enables the return twosafe service, so that applications that commit a transaction to an active master database are blocked until the transaction is committed on the standby master database.
<p>Specifying <code dir="ltr">RETURN TWOSAFE</code> applies the service to all transactions. If you specify <code dir="ltr">RETURN TWOSAFE BY REQUEST</code>, you can use the <code dir="ltr">ttRepSyncSet</code> procedure to enable the return receipt service for selected transactions.</p>
<p>For details on the use of the return services, see <a class="olink TTREP183" href="../TTREP/attrib.htm#TTREP183">&#34;Using a return service&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t23" headers="r1c1-t23"><code dir="ltr">DISABLE RETURN<br/>
{SUBSCRIBER | ALL}</code> <code dir="ltr"><span class="codeinlineitalic">NumFailures</span></code></td>
<td class="cellalignment6332" headers="r5c1-t23 r1c2-t23">Set the return service failure policy so that return service blocking is disabled after the number of timeouts specified by <code dir="ltr"><span class="codeinlineitalic">NumFailures</span></code>.
<p>Specifying <code dir="ltr">SUBSCRIBER</code> is the same as specifying <code dir="ltr">ALL</code>. Both settings refer to the standby master database.</p>
<p>This failure policy can be specified for either the <code dir="ltr">RETURN RECEIPT</code> or <code dir="ltr">RETURN TWOSAFE</code> service.</p>
<p>See <a class="olink TTREP795" href="../TTREP/attrib.htm#TTREP795">&#34;Managing return service timeout errors and replication state changes&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span> for details.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t23" headers="r1c1-t23"><code dir="ltr">RETURN SERVICES {ON | OFF} WHEN [REPLICATION] STOPPED</code></td>
<td class="cellalignment6332" headers="r6c1-t23 r1c2-t23">Sets return services on or off when replication is disabled (stopped or paused state).
<p><code dir="ltr">OFF</code> disables return services when replication is disabled and is the default for <code dir="ltr">RETURN RECEIPT</code> service. <code dir="ltr">ON</code> allows return services to continue to be enabled when replication is disabled and is the default for <code dir="ltr">RETURN TWOSAFE</code> service.</p>
<p>See <a class="olink TTREP194" href="../TTREP/attrib.htm#TTREP194">&#34;Establishing return service failure/recovery policies&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r7c1-t23" headers="r1c1-t23"><code dir="ltr">RESUME RETURN</code> <code dir="ltr"><span class="codeinlineitalic">Milliseconds</span></code></td>
<td class="cellalignment6332" headers="r7c1-t23 r1c2-t23">If <code dir="ltr">DISABLE RETURN</code> has disabled return service blocking, this attribute sets the policy for when to re-enable the return service.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r8c1-t23" headers="r1c1-t23"><code dir="ltr">NO RETURN</code></td>
<td class="cellalignment6332" headers="r8c1-t23 r1c2-t23">Specifies that no return service is to be used. This is the default.
<p>For details on the use of the return services, see <a class="olink TTREP183" href="../TTREP/attrib.htm#TTREP183">&#34;Using a return service&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r9c1-t23" headers="r1c1-t23"><code dir="ltr">RETURN WAIT TIME</code> <code dir="ltr"><span class="codeinlineitalic">Seconds</span></code></td>
<td class="cellalignment6332" headers="r9c1-t23 r1c2-t23">S<a id="sthref1242"></a><a id="sthref1243"></a><a id="sthref1244"></a>pecifies the number of seconds to wait for return service acknowledgment. A value of 0 (zero) means that there is no waiting. The default value is 10 seconds.
<p>The application can override this timeout setting by using the <code dir="ltr">returnWait</code> parameter in the <code dir="ltr">ttRepSyncSet</code> built-in procedure.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r10c1-t23" headers="r1c1-t23"><code dir="ltr">S<a id="sthref1245"></a><a id="sthref1246"></a>UBSCRIBER</code> <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code> <code dir="ltr">[,...]]</code></td>
<td class="cellalignment6332" headers="r10c1-t23 r1c2-t23">A database that receives updates from a master database. <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code> is the database file name specified in the <code dir="ltr">DataStore</code> attribute of the DSN description.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r11c1-t23" headers="r1c1-t23"><code dir="ltr">STORE</code> <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code> <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">StoreAttribute</span></code> <code dir="ltr">[...]]</code></td>
<td class="cellalignment6332" headers="r11c1-t23 r1c2-t23">Defines the attributes for the specified database. Attributes include <code dir="ltr">PORT</code>, <code dir="ltr">TIMEOUT</code> and <code dir="ltr">FAILTHRESHOLD</code>. <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code> is the database file name specified in the <code dir="ltr">DataStore</code> attribute of the DSN description.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r12c1-t23" headers="r1c1-t23"><code dir="ltr">TABLE DEFINITION CHECKING {EXACT|RELAXED}</code></td>
<td class="cellalignment6332" headers="r12c1-t23 r1c2-t23">StoreAttribute clause.
<p>Specifies type of table definition checking that occurs on the subscriber:</p>
<ul>
<li>
<p><code dir="ltr">EXACT</code> - The tables must be identical on master and subscriber.</p>
</li>
<li>
<p><code dir="ltr">RELAXED</code> - The tables must have the same key definition, number of columns and column data types.</p>
</li>
</ul>
<p>The default is <code dir="ltr">RELAXED</code>.</p>
<p><span class="bold">Note:</span> If you use <code dir="ltr">TABLE DEFINITION CHECKING EXACT</code>, use <code dir="ltr">ttMigrate -exactUpgrade</code> if you migrate the database. If you use <code dir="ltr">TABLE DEFINITION CHECKING RELAXED</code>, use <code dir="ltr">ttMigrate -relaxedUpgrade</code> if you migrate the database.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r13c1-t23" headers="r1c1-t23"><code dir="ltr">{INCLUDE | EXCLUDE}</code>
<p><code dir="ltr">{TABLE [[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">TableName</span></code><code dir="ltr">[,...]]|</code></p>
<p><code dir="ltr">CACHE GROUP</code></p>
<p><code dir="ltr">[[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">CacheGroupName</span></code></p>
<p><code dir="ltr">[,...]]|</code></p>
<p><code dir="ltr">SEQUENCE</code></p>
<p><code dir="ltr">[[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">SequenceName</span></code></p>
<p><code dir="ltr">[,...]]}</code></p>
<p><code dir="ltr">[,...]</code></p>
</td>
<td class="cellalignment6332" headers="r13c1-t23 r1c2-t23">An active standby pair replicates an entire database by default.
<p><code dir="ltr">INCLUDE</code> includes only the listed tables, sequences or cache groups to replication. Use one <code dir="ltr">INCLUDE</code> clause for each object type (table, sequence or cache group).</p>
<p><code dir="ltr">EXCLUDE</code> removes tables, sequences or cache groups from the replication scheme. Use one <code dir="ltr">EXCLUDE</code> clause for each object type (table, sequence or cache group).</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r14c1-t23" headers="r1c1-t23"><code dir="ltr">COMPRESS TRAFFIC {ON | OFF}</code></td>
<td class="cellalignment6332" headers="r14c1-t23 r1c2-t23">Compress replicated traffic to reduce the amount of network bandwidth. <code dir="ltr">ON</code> specifies that all replicated traffic for the database defined by <code dir="ltr">STORE</code> be compressed. <code dir="ltr">OFF</code> (the default) specifies no compression. See <a class="olink TTREP200" href="../TTREP/attrib.htm#TTREP200">&#34;Compressing replicated traffic&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span> for details.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r15c1-t23" headers="r1c1-t23"><code dir="ltr">DURABLE COMMIT {ON | OFF}</code></td>
<td class="cellalignment6332" headers="r15c1-t23 r1c2-t23">Overrides the <code dir="ltr">DurableCommits</code> general connection attribute setting. <code dir="ltr">DURABLE COMMIT ON</code> enables durable commits regardless of whether the replication agent is running or stopped. It also enables durable commits when the <code dir="ltr">ttRepStateSave</code> built-in procedure has marked the standby database as failed.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r16c1-t23" headers="r1c1-t23"><a id="sthref1247"></a><a id="sthref1248"></a><code dir="ltr">FAILTHRESHOLD</code> <code dir="ltr"><span class="codeinlineitalic">Value</span></code></td>
<td class="cellalignment6332" headers="r16c1-t23 r1c2-t23">The number of log files that can accumulate for a subscriber database. If this value is exceeded, the subscriber is set to the <code dir="ltr">Failed</code> state.The value 0 means &#34;No Limit.&#34; This is the default.
<p>See <a class="olink TTREP205" href="../TTREP/attrib.htm#TTREP205">&#34;Setting the transaction log failure threshold&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span> for more information.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r17c1-t23" headers="r1c1-t23"><code dir="ltr">LOCAL COMMIT ACTION</code> <code dir="ltr">{NO ACTION | COMMIT}</code></td>
<td class="cellalignment6332" headers="r17c1-t23 r1c2-t23">Specifies the default action to be taken for a return twosafe transaction in the event of a timeout.
<p><span class="bold">Note</span>: This attribute is valid only when the <code dir="ltr">RETURN TWOSAFE</code> or <code dir="ltr">RETURN TWOSAFE BY REQUEST</code> attribute is set in the <code dir="ltr">SUBSCRIBER</code> clause.</p>
<p><code dir="ltr">NO ACTION</code>: On timeout, the commit function returns to the application, leaving the transaction in the same state it was in when it entered the commit call, with the exception that the application is not able to update any replicated tables. The application can only reissue the commit. The transaction may not be rolled back. This is the default.</p>
<p><code dir="ltr">COMMIT</code>: On timeout, the commit function attempts to perform a <code dir="ltr">COMMIT</code> to end the transaction locally. No more operations are possible on the same transaction.</p>
<p>This setting can be overridden for specific transactions by calling the <code dir="ltr">localAction</code> parameter in the <code dir="ltr">ttRepSyncSet</code> procedure.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r18c1-t23" headers="r1c1-t23"><a id="sthref1249"></a><a id="sthref1250"></a><code dir="ltr">MASTER</code> <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code></td>
<td class="cellalignment6332" headers="r18c1-t23 r1c2-t23">The database on which applications update the specified element. The <code dir="ltr">MASTER</code> database sends updates to its <code dir="ltr">SUBSCRIBER</code> databases. The <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code> must be the database specified in the <code dir="ltr">DataStore</code> attribute of the DSN description.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r19c1-t23" headers="r1c1-t23"><a id="sthref1251"></a><code dir="ltr">PORT</code> <code dir="ltr"><span class="codeinlineitalic">PortNumber</span></code></td>
<td class="cellalignment6332" headers="r19c1-t23 r1c2-t23">The TCP/IP port number on which the replication agent for the database listens for connections. If not specified, the replication agent automatically allocates a port number.
<p>In an active standby pair, the standby master database listens for updates from the active master database. Read-only subscribers listen for updates from the standby master database.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r20c1-t23" headers="r1c1-t23"><code dir="ltr">ROUTE MASTER</code> <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code> <code dir="ltr">SUBSCRIBER</code> <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code></td>
<td class="cellalignment6332" headers="r20c1-t23 r1c2-t23">Denotes the <code dir="ltr"><span class="codeinlineitalic">NetworkOperation</span></code> clause. If specified, enables you to control the network interface that a master store uses for every outbound connection to each of its subscriber stores. In the context of the <code dir="ltr">ROUTE</code> clause, you can define the following:
<ul>
<li>
<p>A route for the active database to the standby database and for the standby database to the active database for when failover occurs</p>
</li>
<li>
<p>A route for a read-only subscriber to the active and standby databases</p>
</li>
</ul>
<p>When using active standby pairs, <code dir="ltr">ROUTE</code> should be specified at least twice for an active standby pair with no read only subscribers. Then, <code dir="ltr">ROUTE</code> should be specified twice more for each read only subscriber on the active standby pair.</p>
<p>For <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code>, <code dir="ltr">ON</code> <code dir="ltr"><span class="codeinlineitalic">&#34;host</span></code><code dir="ltr">&#34;</code> must be specified.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r21c1-t23" headers="r1c1-t23"><code dir="ltr">MASTERIP</code> <code dir="ltr"><span class="codeinlineitalic">MasterHost</span></code> <code dir="ltr">|</code> <code dir="ltr">SUBSCRIBERIP</code> <code dir="ltr"><span class="codeinlineitalic">SubscriberHost</span></code></td>
<td class="cellalignment6332" headers="r21c1-t23 r1c2-t23"><code dir="ltr"><span class="codeinlineitalic">MasterHost</span></code> and <code dir="ltr"><span class="codeinlineitalic">SubscriberHost</span></code> are the IP addresses for the network interface on the master and subscriber stores. Specify in dot notation or canonical format or in colon notation for IPV6.
<p>Clause can be specified more than once.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r22c1-t23" headers="r1c1-t23"><code dir="ltr">PRIORITY</code> <code dir="ltr"><span class="codeinlineitalic">Priority</span></code></td>
<td class="cellalignment6332" headers="r22c1-t23 r1c2-t23">Variable expressed as an integer from 1 to 99. Denotes the priority of the IP address. Lower integral values have higher priority. An error is returned if multiple addresses with the same priority are specified. Controls the order in which multiple IP addresses are used to establish peer connections.
<p>Required syntax of <code dir="ltr"><span class="codeinlineitalic">NetworkOperation</span></code> clause. Follows <code dir="ltr">MASTERIP</code> <code dir="ltr"><span class="codeinlineitalic">MasterHost</span></code> <code dir="ltr">|</code> <code dir="ltr">SUBSCRIBERIP</code> <code dir="ltr"><span class="codeinlineitalic">SubscriberHost</span></code> clause.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r23c1-t23" headers="r1c1-t23"><code dir="ltr">T<a id="sthref1252"></a><a id="sthref1253"></a>IMEOUT</code> <code dir="ltr"><span class="codeinlineitalic">Seconds</span></code></td>
<td class="cellalignment6332" headers="r23c1-t23 r1c2-t23">The maximum number of seconds the replication agent waits for a response from remote replication agents. The default is 120 seconds.
<p>In an active standby pair, the active master database sends messages to the standby master database. The standby master database sends messages to the read-only subscribers.</p>
<p><span class="bold">Note:</span> For large transactions that may cause a delayed response from the remote replication agent, the agent scales the timeout based on the size of the transaction. This scaling is disabled if you set <code dir="ltr">TIMEOUT</code> to less than or equal to 60 seconds. Also see <a class="olink TTREP820" href="../TTREP/attrib.htm#TTREP820">&#34;Setting wait timeout for response from remote replication agents&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1254"></a>Description</p>
<ul>
<li>
<p>After you create an active standby pair, make one of your databases the active database. To accomplish this, call <code dir="ltr">ttRepStateSet</code> <code dir="ltr">(&#39;ACTIVE&#39;)</code>. Then use <code dir="ltr">ttRepAdmin</code> to duplicate the active database to the second database. When the operation is successful, the second database becomes the standby database. For more information, see <a class="olink TTREP213" href="../TTREP/standby.htm#TTREP213">&#34;Setting up an active standby pair with no cache groups&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span>.</p>
</li>
<li>
<p>The <code dir="ltr">SUBSCRIBER</code> clause lists one or more read-only subscriber databases. You can designate up to 127 subscriber databases.</p>
</li>
<li>
<p>Replication between the active master database and the standby master database can be <code dir="ltr">RETURN TWOSAFE</code>, <code dir="ltr">RETURN RECEIPT</code>, or asynchronous. <code dir="ltr">RETURN TWOSAFE</code> ensures no transaction loss.</p>
</li>
<li>
<p>Use the <code dir="ltr">INCLUDE</code> and <code dir="ltr">EXCLUDE</code> clauses to exclude the listed tables, sequences and cache groups from replication, or to include only the listed tables, sequences and cache groups, excluding all others.</p>
</li>
<li>
<p>If the active standby pair has the <code dir="ltr">RETURN TWOSAFE</code> attribute and replicates a cache group, a transaction may fail if:</p>
<ul>
<li>
<p>The transaction that is being replicated contains an <code dir="ltr"><a href="#i1407906">ALTER TABLE</a></code> statement or an <code dir="ltr"><a href="#i1055226">ALTER CACHE GROUP</a></code> statement.</p>
</li>
<li>
<p>The transaction contains an <code dir="ltr">INSERT</code>, <code dir="ltr">UPDATE</code> or <code dir="ltr">DELETE</code> statement on a replicated table, replicated cache group or an asynchronous writethrough cache group.</p>
</li>
</ul>
</li>
<li>
<p>You can use an active standby pair to replicate read-only cache groups and asynchronous writethrough (AWT) cache groups. You cannot use an active standby pair to replicate synchronous writethrough (SWT) cache groups or user managed cache groups.</p>
</li>
<li>
<p>You cannot execute the <code dir="ltr">CREATE ACTIVE STANDBY PAIR</code> statement when Oracle Clusterware is used with TimesTen.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1255"></a>Examples</p>
<p>This example creates an active standby pair whose master databases are <code dir="ltr">rep1</code> and <code dir="ltr">rep2</code>. There is one subscriber, <code dir="ltr">rep3</code>. The type of replication is <code dir="ltr">RETURN RECEIPT</code>. The statement also sets <code dir="ltr">PORT</code> and <code dir="ltr">TIMEOUT</code> attributes for the master databases.</p>
<pre dir="ltr">CREATE ACTIVE STANDBY PAIR rep1, rep2 RETURN RECEIPT
  SUBSCRIBER rep3
  STORE rep1 PORT 21000 TIMEOUT 30
  STORE rep2 PORT 22000 TIMEOUT 30;
</pre>
<p>Specify <code dir="ltr"><span class="codeinlineitalic">NetworkOperation</span></code> clause to control network interface:</p>
<pre dir="ltr">CREATE ACTIVE STANDBY PAIR rep1,rep2
ROUTE MASTER rep1 ON &#34;machine1&#34; SUBSCRIBER rep2 ON &#34;machine2&#34;
MASTERIP &#34;1.1.1.1&#34; PRIORITY 1 SUBSCRIBERIP &#34;2.2.2.2&#34; PRIORITY 1;
ROUTE MASTER rep2 ON &#34;machine2&#34; SUBSCRIBER rep1 ON &#34;machine1&#34;
MASTERIP &#34;2.2.2.2&#34; PRIORITY 1 SUBSCRIBERIP &#34;1.1.1.1&#34; PRIORITY 1;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1256"></a>See also</p>
<br/>
<code dir="ltr"><a href="#i1027059">ALTER ACTIVE STANDBY PAIR</a></code><br/>
<code dir="ltr"><a href="#i1028075">DROP ACTIVE STANDBY PAIR</a></code></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1228554"></a>
<div id="TTSQL290" class="refsect1">
<h2 class="refsect1"><a id="sthref1257"></a><a id="sthref1258"></a>CREATE CACHE GROUP</h2>
<p>The <code dir="ltr">CREATE CACHE GROUP</code> statement:</p>
<ul>
<li>
<p>Creates the table defined by the cache group.</p>
</li>
<li>
<p>Loads all new information associated with the cache group in the appropriate system tables.</p>
</li>
</ul>
<p>A <a id="sthref1259"></a><span class="italic">cache group</span> is a set of tables related through foreign keys that cache data from tables in an Oracle database. There is one root table that does not reference any of the other tables. All other <span class="italic">cache tables</span> in the cache group reference exactly one other table in the cache group. In other words, the foreign key relationships form a tree.</p>
<p>A cache table is a set of rows satisfying the conditions:</p>
<ul>
<li>
<p>The rows constitute a subset of the rows of a vertical partition of an Oracle database table.</p>
</li>
<li>
<p>The rows are stored in a TimesTen table with the same name as the Oracle database table.</p>
</li>
</ul>
<p>If a database has more than one cache group, the cache groups must correspond to different Oracle database (and TimesTen) tables.</p>
<p><a id="sthref1260"></a><a id="sthref1261"></a><span class="italic">Cache group instance</span> refers to a row in the root table and all the child table rows related directly or indirectly to the root table rows.</p>
<p class="subhead2"><a id="BABEDHHA"></a><a id="TTSQL401"></a><a id="sthref1262"></a><a id="sthref1263"></a><a id="sthref1264"></a><a id="sthref1265"></a>User managed and system managed cache groups</p>
<p>A cache group can be either system managed or user managed.</p>
<p>A <span class="italic">system managed cache group</span> is fully managed by TimesTen and has fixed properties. System managed cache group types include:</p>
<ul>
<li>
<p>Read-only cache groups are updated in the Oracle database, and the updates are propagated from the Oracle database to the cache.</p>
</li>
<li>
<p>Asynchronous writethrough (AWT) cache groups are updated in the cache and the updates are propagated to the Oracle database. Transactions continue executing on the cache without waiting for a commit on the Oracle database.</p>
</li>
<li>
<p>Synchronous writethrough (SWT) cache groups are updated in the cache and the updates are propagated to the Oracle database. Transactions are committed on the cache after notification that a commit has occurred on the Oracle database.</p>
</li>
</ul>
<p>Because TimesTen manages system managed cache groups, including loading and unloading the cache group, certain statements and clauses cannot be used in the definition of these cache groups, including:</p>
<ul>
<li>
<p><code dir="ltr">WHERE</code> clauses in AWT and SWT cache group definitions</p>
</li>
<li>
<p><code dir="ltr">READONLY</code>, <code dir="ltr">PROPAGATE</code> and <code dir="ltr">NOT PROPAGATE</code> in cache table definitions</p>
</li>
<li>
<p><code dir="ltr">AUTOREFRESH</code> in AWT and SWT cache group definitions</p>
</li>
</ul>
<p>The <code dir="ltr"><a href="#BABEAGCC">FLUSH CACHE GROUP</a></code> and <code dir="ltr"><a href="#i1280541">REFRESH CACHE GROUP</a></code> operations are not allowed for AWT and SWT cache groups.</p>
<p>You must stop the replication agent before creating an AWT cache group.</p>
<p>A <span class="italic">user managed cache group</span> must be managed by the application or user. <code dir="ltr">PROPAGATE</code> in a user managed cache group is synchronous. The table-level <code dir="ltr">READONLY</code> keyword can only be used for user managed cache groups.</p>
<p>In addition, both TimesTen and Oracle Database must be able to parse all <code dir="ltr">WHERE</code> clauses.</p>
<p class="subhead2"><a id="TTSQL402"></a><a id="sthref1266"></a><a id="sthref1267"></a><a id="sthref1268"></a><a id="sthref1269"></a>Explicitly loaded cache groups and dynamic cache groups</p>
<p>Cache groups can be explicitly or dynamically loaded.</p>
<p>In cache groups that are explicitly loaded, new cache instances are loaded manually into the TimesTen cache tables from the Oracle database tables using a <code dir="ltr"><a href="#i993508">LOAD CACHE GROUP</a></code> or <code dir="ltr"><a href="#i1280541">REFRESH CACHE GROUP</a></code> statement or automatically using an autorefresh operation.</p>
<p>In a dynamic cache group, new cache instances can be loaded manually into the TimesTen cache tables by using a <code dir="ltr"><a href="#i993508">LOAD CACHE GROUP</a></code> or on demand using a dynamic load operation. In a dynamic load operation, data is automatically loaded into the TimesTen cache tables from the cached Oracle database tables when a <code dir="ltr">SELECT</code>, <code dir="ltr">UPDATE</code>, <code dir="ltr">DELETE</code> or <code dir="ltr">INSERT</code> statement is issued on one of the cache tables, where the data is not present in the cache table but does exist in the cached Oracle database table. A manual refresh or automatic refresh operation on a dynamic cache group can result in the updating or deleting of existing cache instances, but not in the loading of new cache instances.</p>
<p>Any cache group type (read-only, asynchronous writethrough, synchronous writethrough, user managed) can be defined as an explicitly loaded cache group.</p>
<p>Any cache group type can be defined as a dynamic cache group <span class="italic">except</span> a user managed cache group that has both the <code dir="ltr">AUTOREFRESH</code> cache group attribute and the <code dir="ltr">PROPAGATE</code> cache table attribute.</p>
<p>Data in a dynamic cache group is aged out because LRU aging is defined by default. Use the <code dir="ltr">ttAgingLRUConfig</code> built-in procedure to override the space usage thresholds for LRU aging. You can also define time-based aging on a dynamic cache group to override LRU aging.</p>
<p>For more information on explicitly loaded and dynamic cache groups, see <a class="olink TTCAC127" href="../TTCAC/concepts.htm#TTCAC127">&#34;Loading data into a cache group: Explicitly loaded and dynamic cache groups&#34;</a> in <span class="italic">Oracle TimesTen Application-Tier Database Cache User&#39;s Guide</span>. For more information about the dynamic load operation, see &#34;<a class="olink TTCAC498" href="../TTCAC/operations.htm#TTCAC498">Dynamically loading a cache instance</a>&#34; in that document.</p>
<p class="subhead2"><a id="TTSQL403"></a><a id="sthref1270"></a><a id="sthref1271"></a><a id="sthref1272"></a><a id="sthref1273"></a>Local and global cache groups</p>
<p>You can create either local or global cache groups.</p>
<p>In a local cache group, data in the cache tables are not shared across TimesTen databases even if the databases are members of the same cache grid. Therefore, the databases can have overlapping data or the same data. Any cache group type can be defined as a local cache group. A local cache group can be either dynamically or explicitly loaded.</p>
<p>In a global cache group, data in the cache tables are shared among TimesTen databases within a cache grid. Updates to the same data by different grid members are coordinated by the grid. Only an AWT cache group can be defined as a global cache group.</p>
<p>For more information on local and global cache groups, see <a class="olink TTCAC203" href="../TTCAC/define.htm#TTCAC203">&#34;Defining Cache Groups&#34;</a> in the <span class="italic">Oracle TimesTen Application-Tier Database Cache User&#39;s Guide</span>. In addition, see <a class="olink TTCAC301" href="../TTCAC/gridmembers.htm#TTCAC301">&#34;Example of data sharing among the grid members&#34;</a> in <span class="italic">Oracle TimesTen Application-Tier Database Cache User&#39;s Guide</span>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1274"></a>Required privilege</p>
<p><code dir="ltr">CREATE CACHE GROUP</code> or <code dir="ltr">CREATE ANY CACHE GROUP</code> <span class="italic">and</span> <code dir="ltr">CREATE TABLE</code> (if all tables in the cache group are owned by the current user) <span class="italic">or</span> <code dir="ltr">CREATE ANY TABLE</code> (if at least one of the tables in the cache group is not owned by the current user).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1275"></a>SQL syntax</p>
<p>There are <code dir="ltr">CREATE CACHE GROUP</code> statements for each type of cache group:</p>
<ul>
<li>
<p><code dir="ltr"><a href="#BABHAGJA">CREATE READONLY CACHE GROUP</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#BABJHDDB">CREATE ASYNCHRONOUS WRITETHROUGH CACHE GROUP</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#BABGFDHG">CREATE SYNCHRONOUS WRITETHROUGH CACHE GROUP</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#BABGEDFC">CREATE USERMANAGED CACHE GROUP</a></code></p>
</li>
</ul>
<p>There is one <code dir="ltr">CREATE CACHE GROUP</code> statement to create a global cache group:</p>
<ul>
<li>
<p><code dir="ltr"><a href="#BABBGBHD">CREATE WRITETHROUGH GLOBAL CACHE GROUP</a></code></p>
</li>
</ul>
<p class="subhead2"><a id="BABHAGJA"></a><a id="TTSQL404"></a>CREATE READONLY CACHE GROUP</p>
<p>For read-only cache groups, the syntax is:</p>
<pre dir="ltr">CREATE [DYNAMIC] READONLY CACHE GROUP [<span class="italic">Owner</span>.]<span class="italic">GroupName</span>
 [AUTOREFRESH
  [MODE {INCREMENTAL | FULL}]
  [INTERVAL <span class="italic">IntervalValue</span> {MINUTE[S] | SECOND[S] | MILLISECOND[S] }]
  [STATE {ON|OFF|PAUSED}]
 ]
 FROM
  {[<span class="italic">Owner</span>.]<span class="italic">TableName</span> (
    {<span class="italic">ColumnDefinition</span>[,...]}
    [,PRIMARY KEY(<span class="italic">ColumnName</span>[,...])]
    [,FOREIGN KEY(<span class="italic">ColumnName </span>[,...])
            REFERENCES <span class="italic">RefTableName</span> (<span class="italic">ColumnName</span> [,...])
                    [ON DELETE CASCADE]
 [UNIQUE HASH ON (<span class="italic">HashColumnName</span>[,...]) PAGES=<span class="italic">PrimaryPages</span>]
 [AGING USE <span class="italic">ColumnName</span>
        LIFETIME <span class="italic">Num1</span> {SECOND[S] | MINUTE[S] |HOUR[S] | DAY[S]}
        [CYCLE <span class="italic">Num2</span> {SECOND[S] | MINUTE[S] |HOUR[S] |DAY[S]}]
 [ON|OFF]
 ]
 [WHERE <span class="italic">ExternalSearchCondition</span>]
} [,...];
</pre>
<p class="subhead2"><a id="BABJHDDB"></a><a id="TTSQL405"></a>CREATE ASYNCHRONOUS WRITETHROUGH CACHE GROUP</p>
<p>For asynchronous writethrough cache groups, the syntax is:</p>
<pre dir="ltr">CREATE [DYNAMIC] [ASYNCHRONOUS] WRITETHROUGH CACHE GROUP   [<span class="italic">Owner</span>.]<span class="italic">GroupName</span>
  FROM
   {[<span class="italic">Owner</span>.]<span class="italic">TableName</span> (
     {<span class="italic">ColumnDefinition</span>[,...]}
    [,PRIMARY KEY(<span class="italic">ColumnName</span>[,...])]
     [FOREIGN KEY(<span class="italic">ColumnName</span> [,...])
          REFERENCES <span class="italic">RefTableName</span> (<span class="italic">ColumnName</span> [,...])]
                         [ ON DELETE CASCADE ]
 UNIQUE HASH ON (<span class="italic">HashColumnName</span>[,...]) PAGES=<span class="italic">PrimaryPages</span>]
 [AGING {LRU|
     USE <span class="italic">ColumnName</span>
          LIFETIME <span class="italic">Num1</span> {SECOND[S] | MINUTE[S] |HOUR[S] |DAY[S]}
         [CYCLE <span class="italic">Num2</span> {SECOND[S] | MINUTE[S] |HOUR[S] |DAY[S]}]
     }[ON|OFF]
 ]
} [,...];
</pre>
<p class="subhead2"><a id="BABGFDHG"></a><a id="TTSQL406"></a>CREATE SYNCHRONOUS WRITETHROUGH CACHE GROUP</p>
<p>For synchronous writethrough cache groups, the syntax is:</p>
<pre dir="ltr">CREATE [DYNAMIC] SYNCHRONOUS WRITETHROUGH
CACHE GROUP [<span class="italic">Owner</span>.]<span class="italic">GroupName</span>
 FROM 
   {[<span class="italic">Owner</span>.]<span class="italic">TableName</span> (
     {<span class="italic">ColumnDefinition</span>[,...]}
    [,PRIMARY KEY(<span class="italic">ColumnName</span>[,...])]
     [FOREIGN KEY(<span class="italic">ColumnName </span>[,...])
            REFERENCES <span class="italic">RefTableName</span> (<span class="italic">ColumnName</span> [,...])}]
                             [ ON DELETE CASCADE ]
 [UNIQUE HASH ON (<span class="italic">HashColumnName</span>[,...]) PAGES=<span class="italic">PrimaryPages</span>]
 [AGING {LRU|
     USE <span class="italic">ColumnName</span>
         LIFETIME Num1 {SECOND[S] | MINUTE[S] |HOUR[S] |DAY[S]}
         [CYCLE Num2 {SECOND[S] | MINUTE[S] |HOUR[S] |DAY[S]}]
     }[ON|OFF]
 ]
} [,...];
</pre>
<p class="subhead2"><a id="BABGEDFC"></a><a id="TTSQL407"></a>CREATE USERMANAGED CACHE GROUP</p>
<p>For user managed cache groups, the syntax is:</p>
<pre dir="ltr">CREATE [DYNAMIC][USERMANAGED] CACHE GROUP [<span class="italic">Owner</span>.]<span class="italic">GroupName</span>
 [AUTOREFRESH
   [MODE {INCREMENTAL | FULL}]
   [INTERVAL <span class="italic">IntervalValue</span> {MINUTE[S] | SECOND[S] | MILLISECOND[S] }]
   [STATE {ON|OFF|PAUSED}]
 ]
  FROM 
   {[<span class="italic">Owner</span>.]<span class="italic">TableName</span> (
    {<span class="italic">ColumnDefinition</span>[,...]}
    [,PRIMARY KEY(<span class="italic">ColumnName</span>[,...])]
    [FOREIGN KEY(<span class="italic">ColumnName</span>[,...])
          REFERENCES <span class="italic">RefTableName</span> (<span class="italic">ColumnName</span> [,...])]
                  [ON DELETE CASCADE]
    [, {READONLY | PROPAGATE | NOT PROPAGATE}]
 [UNIQUE HASH ON (<span class="italic">HashColumnName</span>[,...]) PAGES=<span class="italic">PrimaryPages</span>]
 [AGING {LRU|
         USE <span class="italic">ColumnName</span>
             LIFETIME Num1 {SECOND[S] | MINUTE[S] |HOUR[S] |DAY[S]}
             [CYCLE Num2 {SECOND[S] | MINUTE[S] |HOUR[S] |DAY[S]}]
        }[ON|OFF]
 ]
 [WHERE <span class="italic">ExternalSearchCondition</span>]
} [,...];
</pre>
<p class="subhead2"><a id="BABBGBHD"></a><a id="TTSQL408"></a>CREATE WRITETHROUGH GLOBAL CACHE GROUP</p>
<p>The following syntax demonstrates how to create a global cache group to cache data within a cache grid. Specify the <code dir="ltr">DYNAMIC</code> attribute to enable dynamic load from the Oracle database for the cache group.</p>
<pre dir="ltr">CREATE [DYNAMIC] [ASYNCHRONOUS] WRITETHROUGH GLOBAL CACHE GROUP  [<span class="italic">Owner</span>.]<span class="italic">GroupName</span>
  FROM
   {[<span class="italic">Owner</span>.]<span class="italic">TableName</span> (
     {<span class="italic">ColumnDefinition</span>[,...]}
    [,PRIMARY KEY(<span class="italic">ColumnName</span>[,...])]
     [FOREIGN KEY(<span class="italic">ColumnName</span> [,...])
          REFERENCES <span class="italic">RefTableName</span> (<span class="italic">ColumnName</span> [,...])]
                         [ ON DELETE CASCADE ]
 UNIQUE HASH ON (<span class="italic">HashColumnName</span>[,...]) PAGES=<span class="italic">PrimaryPages</span>]
 [AGING {LRU|
     USE <span class="italic">ColumnName</span>
          LIFETIME <span class="italic">Num1</span> {SECOND[S] | MINUTE[S] |HOUR[S] |DAY[S]}
         [CYCLE <span class="italic">Num2</span> {SECOND[S] | MINUTE[S] |HOUR[S] |DAY[S]}]
     }[ON|OFF]
 ]
} [,...];
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1276"></a>Parameters</p>
<p>Following are the parameters for the cache group definition before the <code dir="ltr">FROM</code> keyword:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters of CREATE CACHE GROUP before FROM." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t24">Parameter</th>
<th class="cellalignment6331" id="r1c2-t24">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t24" headers="r1c1-t24"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">GroupName</span></code></td>
<td class="cellalignment6332" headers="r2c1-t24 r1c2-t24">Owner and name assigned to the new cache group.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t24" headers="r1c1-t24"><code dir="ltr">[DYNAMIC]</code></td>
<td class="cellalignment6332" headers="r3c1-t24 r1c2-t24">If specified, a dynamic cache group is created.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t24" headers="r1c1-t24"><code dir="ltr">AUTOREFRESH</code></td>
<td class="cellalignment6332" headers="r4c1-t24 r1c2-t24">The <code dir="ltr">AUTOREFRESH</code> parameter automatically propagates changes from the Oracle database to the cache group. For details, see <a href="#BABBHIFH">&#34;AUTOREFRESH in cache groups&#34;</a>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t24" headers="r1c1-t24"><code dir="ltr">MODE [INCREMENTAL | FULL]</code></td>
<td class="cellalignment6332" headers="r5c1-t24 r1c2-t24">Determines which rows in the cache are updated during an autorefresh. If the <code dir="ltr">INCREMENTAL</code> clause is specified, TimesTen refreshes only rows that have been changed on the Oracle database since the last propagation. If the <code dir="ltr">FULL</code> clause is specified, TimesTen updates all rows in the cache with each autorefresh. The default autorefresh mode is <code dir="ltr">INCREMENTAL</code>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t24" headers="r1c1-t24"><code dir="ltr">INTERVAL</code> <code dir="ltr"><span class="codeinlineitalic">IntervalValue</span></code></td>
<td class="cellalignment6332" headers="r6c1-t24 r1c2-t24">Indicates the interval at which autorefresh should occur in units of minutes, seconds or milliseconds. <code dir="ltr"><span class="codeinlineitalic">IntervalValue</span></code> is an integer value that specifies how often autorefresh should be scheduled, in <code dir="ltr">MINUTES</code>, <code dir="ltr">SECONDS</code> or <code dir="ltr">MILLISECONDS</code>. The default <code dir="ltr"><span class="codeinlineitalic">IntervalValue</span></code> value is 5 minutes. If the specified interval is not long enough for an autorefresh to complete, a runtime warning is generated and the next autorefresh waits until the current one finishes. An informational message is generated in the support log if the wait queue reaches 10.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r7c1-t24" headers="r1c1-t24"><code dir="ltr">STATE [ON | OFF | PAUSED]</code></td>
<td class="cellalignment6332" headers="r7c1-t24 r1c2-t24">Specifies whether autorefresh should be <code dir="ltr">ON</code> or <code dir="ltr">OFF</code> or <code dir="ltr">PAUSED</code> when the cache group is created. You can alter this setting later by using the <code dir="ltr"><a href="#i1055226">ALTER CACHE GROUP</a></code> statement. By default, the <code dir="ltr">AUTOREFRESH</code> state is <code dir="ltr">PAUSED</code>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r8c1-t24" headers="r1c1-t24"><code dir="ltr">FROM</code></td>
<td class="cellalignment6332" headers="r8c1-t24 r1c2-t24">Designates one or more table definitions for the cache group.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" -->
<p>Everything after the <code dir="ltr">FROM</code> keyword comprises the definitions of the Oracle database tables cached in the cache group. The syntax for each table definition is similar to that of a <code dir="ltr"><a href="#i1211666">CREATE TABLE</a></code> statement. However, primary key constraints are required for the cache group table.</p>
<p>Table definitions have the following parameters.</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters of the table definition in the CREATE CACHE GROUP statement." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t25">Parameter</th>
<th class="cellalignment6331" id="r1c2-t25">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t25" headers="r1c1-t25"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">TableName</span></code></td>
<td class="cellalignment6332" headers="r2c1-t25 r1c2-t25">Owner and name to be assigned to the new table. If you do not specify the owner name, your login becomes the owner name for the new table.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t25" headers="r1c1-t25"><code dir="ltr"><span class="codeinlineitalic">ColumnDefinition</span></code></td>
<td class="cellalignment6332" headers="r3c1-t25 r1c2-t25">Name of an individual column in a table, its data type and whether it is nullable. Each table must have at least one column. See <a href="#i992776">&#34;Column Definition&#34;</a>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t25" headers="r1c1-t25"><code dir="ltr">PRIMARY KEY</code> <code dir="ltr">(</code><code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code><code dir="ltr">[,...])</code></td>
<td class="cellalignment6332" headers="r4c1-t25 r1c2-t25">Specifies that the table has a primary key. Primary key constraints are required for a cache group. <code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code> is the name of the column that forms the primary key for the table to be created. Up to 16 columns can be specified for the primary key. Cannot be specified with <code dir="ltr">UNIQUE</code> in one specification.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t25" headers="r1c1-t25"><code dir="ltr">FOREIGN KEY</code> <code dir="ltr">(</code><code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code><code dir="ltr">[,...])</code></td>
<td class="cellalignment6332" headers="r5c1-t25 r1c2-t25">Specifies that the table has a foreign key. <code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code> is the name of the column that forms the foreign key for the table to be created. See <a href="#i992736">&#34;<code dir="ltr">FOREIGN KEY</code>&#34;</a>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t25" headers="r1c1-t25"><code dir="ltr">REFERENCES</code> <code dir="ltr"><span class="codeinlineitalic">RefTableName</span></code> <code dir="ltr">(</code><code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code><code dir="ltr">[,...])</code></td>
<td class="cellalignment6332" headers="r6c1-t25 r1c2-t25">Specifies the table which the foreign key is associated with. <code dir="ltr"><span class="codeinlineitalic">RefTableName</span></code> is the name of the referenced table and <code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code> is the name of the column referenced in the table.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r7c1-t25" headers="r1c1-t25"><code dir="ltr">[ON DELETE</code> <code dir="ltr">CASCADE]</code></td>
<td class="cellalignment6332" headers="r7c1-t25 r1c2-t25">Enables the <code dir="ltr">ON DELETE CASCADE</code> referential action. If specified, when rows containing referenced key values are deleted from a parent table, rows in child tables with dependent foreign key values are also deleted.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r8c1-t25" headers="r1c1-t25"><code dir="ltr">READONLY</code></td>
<td class="cellalignment6332" headers="r8c1-t25 r1c2-t25">Specifies that changes cannot be made on the cached table.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r9c1-t25" headers="r1c1-t25"><code dir="ltr">PROPAGATE|</code><code dir="ltr">NOT PROPAGATE</code></td>
<td class="cellalignment6332" headers="r9c1-t25 r1c2-t25">Specifies whether changes to the cached table are automatically propagate to the corresponding Oracle database table at commit time.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r10c1-t25" headers="r1c1-t25"><code dir="ltr">UNIQUE HASH ON</code> <code dir="ltr">(</code><code dir="ltr"><span class="codeinlineitalic">HashColumnName</span></code><code dir="ltr">)</code></td>
<td class="cellalignment6332" headers="r10c1-t25 r1c2-t25">Specifies that a hash index is created on this table. <code dir="ltr"><span class="codeinlineitalic">HashColumnName</span></code> identifies the column that is to participate in the hash key of this table. The columns specified in the hash index must be identical to the columns in the primary key.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r11c1-t25" headers="r1c1-t25"><code dir="ltr">PAGES</code> = <code dir="ltr"><span class="codeinlineitalic">PrimaryPages</span></code></td>
<td class="cellalignment6332" headers="r11c1-t25 r1c2-t25">Sizes the hash index to reflect the expected number of pages in your table. To determine the value for <code dir="ltr"><span class="codeinlineitalic">PrimaryPages</span></code>, divide the number of expected rows in your table by 256. For example, if your table has 256,000 rows, specify 1000 for <code dir="ltr"><span class="codeinlineitalic">PrimaryPages</span></code> (256000/256=1000).
<p>The value for <code dir="ltr"><span class="codeinlineitalic">PrimaryPages</span></code> must be a positive constant and must be greater than 0.</p>
<p>If your estimate for <code dir="ltr"><span class="codeinlineitalic">PrimaryPages</span></code> is too small, performance may be degraded.</p>
<p>For more information on hash indexes, see <a href="#i1211666">&#34;CREATE TABLE&#34;</a>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r12c1-t25" headers="r1c1-t25"><code dir="ltr">WHERE</code> <code dir="ltr"><span class="codeinlineitalic">ExternalSearchCondition</span></code></td>
<td class="cellalignment6332" headers="r12c1-t25 r1c2-t25">The <code dir="ltr">WHERE</code> clause evaluated by the Oracle database for the cache group table. This <code dir="ltr">WHERE</code> clause is added to every <code dir="ltr">LOAD</code> and <code dir="ltr">REFRESH</code> operation on the cache group. It may not directly reference other tables. It is parsed by both TimesTen and Oracle Database. See <a class="olink TTCAC241" href="../TTCAC/define.htm#TTCAC241">&#34;Using a WHERE clause&#34;</a> in <span class="italic">Oracle TimesTen Application-Tier Database Cache User&#39;s Guide</span>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r13c1-t25" headers="r1c1-t25"><code dir="ltr">AGING LRU [ON | OFF]</code></td>
<td class="cellalignment6332" headers="r13c1-t25 r1c2-t25">If specified, defines the LRU aging policy on the root table. The LRU aging policy applies to all tables in the cache group. The LRU aging policy defines the type of aging (least recently used (LRU)), the aging state (<code dir="ltr">ON</code> or <code dir="ltr">OFF</code>) and the LRU aging attributes.
<p>Set the aging state to either <code dir="ltr">ON</code> or <code dir="ltr">OFF</code>. <code dir="ltr">ON</code> indicates that the aging state is enabled and aging is done automatically. <code dir="ltr">OFF</code> indicates that the aging state is disabled and aging is not done automatically. In both cases, the aging policy is defined. The default is <code dir="ltr">ON</code>.</p>
<p>In dynamic cache groups, LRU aging is set <code dir="ltr">ON</code> by default. You can specify time-based aging instead. Aging is disabled by default on an explicitly loaded global cache group.</p>
<p>LRU aging cannot be specified on a cache group with the autorefresh attribute, unless the cache group is dynamic.</p>
<p>LRU attributes are defined by calling the <code dir="ltr">ttAgingLRUConfig</code> procedure. LRU attributes are not defined at the SQL level.</p>
<p>For more information about LRU aging, see <a class="olink TTCAC249" href="../TTCAC/define.htm#TTCAC249">&#34;Implementing aging in a cache group&#34;</a> in <span class="italic">Oracle TimesTen Application-Tier Database Cache User&#39;s Guide</span>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r14c1-t25" headers="r1c1-t25"><code dir="ltr">AGING USE</code> <code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code><code dir="ltr">...[ON|OFF]</code></td>
<td class="cellalignment6332" headers="r14c1-t25 r1c2-t25">If specified, defines the time-based aging policy on the root table. The time-based aging policy applies to all tables in the cache group. The time-based aging policy defines the type of aging (time-based), the aging state (<code dir="ltr">ON</code> or <code dir="ltr">OFF</code>) and the time-based aging attributes.
<p>Set the aging state to either <code dir="ltr">ON</code> or <code dir="ltr">OFF</code>. <code dir="ltr">ON</code> indicates that the aging state is enabled and aging is done automatically. <code dir="ltr">OFF</code> indicates that the aging state is disabled and aging is not done automatically. In both cases, the aging policy is defined. The default is <code dir="ltr">ON</code>.</p>
<p>Time-based aging attributes are defined at the SQL level and are specified by the <code dir="ltr">LIFETIME</code> and <code dir="ltr">CYCLE</code> clauses.</p>
<p>Specify <code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code> as the name of the column used for time-based aging. Define the column as <code dir="ltr">NOT NULL</code> and of data type <code dir="ltr">TIMESTAMP</code> or <code dir="ltr">DATE</code>. The value of this column is subtracted from <code dir="ltr">SYSDATE</code>, truncated using the specified unit (second, minute, hour, day) and then compared to the <code dir="ltr">LIFETIME</code> value. If the result is greater than the <code dir="ltr">LIFETIME</code> value, then the row is a candidate for aging.</p>
<p>The values of the column used for aging are updated by your applications. If the value of this column is unknown for some rows, and you do not want the rows to be aged, define the column with a large default value (the column cannot be <code dir="ltr">NULL</code>).</p>
<p>Aging is disabled by default on an explicitly loaded global cache group.</p>
<p>For more information about time-based aging, see <a class="olink TTCAC249" href="../TTCAC/define.htm#TTCAC249">&#34;Implementing aging in a cache group&#34;</a> in <span class="italic">Oracle TimesTen Application-Tier Database Cache User&#39;s Guide</span>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r15c1-t25" headers="r1c1-t25"><code dir="ltr">LIFETIME</code> <code dir="ltr"><span class="codeinlineitalic">Num1</span></code> <code dir="ltr">{SECOND[S]|MINUTE[S]|HOUR[S]DAY[S]}</code></td>
<td class="cellalignment6332" headers="r15c1-t25 r1c2-t25"><code dir="ltr">LIFETIME</code> is a time-based aging attribute and is a required clause.
<p>Specify the <code dir="ltr">LIFETIME</code> clause after the <code dir="ltr">AGING USE</code> <code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code> clause.</p>
<p>The <code dir="ltr">LIFETIME</code> clause specifies the minimum amount of time data is kept in cache.</p>
<p>Specify <code dir="ltr"><span class="codeinlineitalic">Num1</span></code> as a positive integer constant to indicate the unit of time expressed in seconds, minutes, hours or days that rows should be kept in cache. Rows that exceed the <code dir="ltr">LIFETIME</code> value are aged out (deleted from the table).</p>
<p>The concept of time resolution is supported. If <code dir="ltr">DAYS</code> is specified as the time resolution, then all rows whose timestamp belongs to the same day are aged out at the same time. If <code dir="ltr">HOURS</code> is specified as the time resolution, then all rows with timestamp values within that hour are aged at the same time. A <code dir="ltr">LIFETIME</code> of 3 days is different than a <code dir="ltr">LIFETIME</code> of 72 hours (3*24) or a <code dir="ltr">LIFETIME</code> of 432 minutes (3*24*60).</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r16c1-t25" headers="r1c1-t25"><code dir="ltr">[CYCLE</code> <code dir="ltr"><span class="codeinlineitalic">Num2</span></code> <code dir="ltr">{SECOND[S] | MINUTE[S] |HOUR[S]|</code><code dir="ltr">DAY[S]}]</code></td>
<td class="cellalignment6332" headers="r16c1-t25 r1c2-t25"><code dir="ltr">CYCLE</code> is a time-based aging attribute and is optional. Specify the <code dir="ltr">CYCLE</code> clause after the <code dir="ltr">LIFETIME</code> clause.
<p>The <code dir="ltr">CYCLE</code> clause indicates how often the system should examine rows to see if data exceeds the specified <code dir="ltr">LIFETIME</code> value and should be aged out (deleted).</p>
<p>Specify <code dir="ltr"><span class="codeinlineitalic">Num2</span></code> as a positive integer constant.</p>
<p>If you do not specify the <code dir="ltr">CYCLE</code> clause, then the default value is 5 minutes. If you specify 0 for <code dir="ltr"><span class="codeinlineitalic">Num2,</span></code> then the aging thread wakes up every second.</p>
<p>If the aging state is <code dir="ltr">OFF</code>, then aging is not done automatically and the <code dir="ltr">CYCLE</code> clause is ignored.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1277"></a>Description</p>
<ul>
<li>
<p>Two <a id="sthref1278"></a>cache groups cannot have the same owner name and group name. If you do not specify the owner name, your login becomes the owner name for the new cache group.</p>
</li>
<li>
<p>For global cache groups, do not specify special characters for a cache group name, a cache table, or columns of a cache group table. For more information on naming conventions, see <a href="names.htm#i987960">&#34;Basic names&#34;</a>.</p>
</li>
<li>
<p>Dynamic parameters are not allowed in the <code dir="ltr">WHERE</code> clause.</p>
</li>
<li>
<p>Oracle Database temporary tables cannot be cached.</p>
</li>
<li>
<p>Each table must correspond to a table in the Oracle database.</p>
</li>
<li>
<p>In the Oracle database, you can define a parent/child relationship and then insert a null value into the foreign key column of the child table. This means this row in the child table references a null parent. You can then create a cache group and cache the parent/child relationship of the Oracle database tables. However, if you load data from the Oracle database tables into the cache group, the row that contains the null value of the foreign key column is not loaded. TimesTen recommends that you do not create cache groups if the tables you cache define a parent/child relationship in which the foreign key represents a null parent.</p>
</li>
<li>
<p>You cannot use lowercase delimited identifiers to name your cache tables. Table names in TimesTen are case-insensitive and are stored as uppercase. The name of the cache table must be the same as the Oracle database table name. Uppercase table names on TimesTen will not match mixed case table names on the Oracle database. As a workaround, create a synonym for your table in the Oracle database and use that synonym as the table name for the cache group. This workaround is not available for read-only cache groups or cache groups with the <code dir="ltr">AUTOREFRESH</code> parameter set.</p>
</li>
<li>
<p>Each column in the cache table must match each column in the Oracle database table, both in name and in data type. See <a class="olink TTCAC362" href="../TTCAC/oracle_tt.htm#TTCAC362">&#34;Mappings between Oracle Database and TimesTen data types&#34;</a> in <span class="italic">Oracle TimesTen Application-Tier Database Cache User&#39;s Guide</span>. In addition, each column name must be fully qualified with an owner and table name when referenced in a <code dir="ltr">WHERE</code> clause.</p>
</li>
<li>
<p>The <code dir="ltr">WHERE</code> clause can only directly refer to the cache group table. Tables that are not in the cache group can only be referenced with a subquery.</p>
</li>
<li>
<p>Generally, you do not have to fully qualify the column names in the <code dir="ltr">WHERE</code> clause of the <code dir="ltr">CREATE CACHE GROUP</code>, <code dir="ltr">LOAD CACHE GROUP</code>, <code dir="ltr">UNLOAD CACHE GROUP</code>, <code dir="ltr">REFRESH CACHE GROUP</code> or <code dir="ltr">FLUSH CACHE GROUP</code> statements. However, since TimesTen automatically generates queries that join multiple tables in the same cache group, a column must be fully qualified if there is more than one table in the cache group that contains columns with the same name.</p>
</li>
<li>
<p>By default, a range index is created to enforce the primary key for a cache group table. Use the <code dir="ltr">UNIQUE HASH</code> clause to specify a hash index for the primary key.</p>
<ul>
<li>
<p>If your application performs range queries over a cache group table&#39;s primary key, then choose a range index for that cache group table by omitting the <code dir="ltr">UNIQUE HASH</code> clause.</p>
</li>
<li>
<p>If, however, your application performs only exact match lookups on the primary key, then a hash index may offer better response time and throughput. In such a case, specify the <code dir="ltr">UNIQUE HASH</code> clause. See <a href="#i1211666">&#34;CREATE TABLE&#34;</a> for more information on the <code dir="ltr">UNIQUE HASH</code> clause.</p>
</li>
<li>
<p>Use <code dir="ltr"><a href="#i1407906">ALTER TABLE</a></code> to change the representation of the primary key index for a table.</p>
</li>
</ul>
</li>
<li>
<p>For cache group tables with the <code dir="ltr">PROPAGATE</code> attribute and for tables of SWT and AWT cache groups, foreign keys specified with <code dir="ltr">ON DELETE CASCADE</code> must be a proper subset of foreign keys with <code dir="ltr">ON DELETE CASCADE</code> in the Oracle database tables.</p>
</li>
<li>
<p>You cannot execute the <code dir="ltr">CREATE CACHE GROUP</code> statement when performed under the serializable isolation level. An error message is returned when attempted.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<p class="subhead2"><a id="BABBHIFH"></a><a id="TTSQL409"></a><a id="sthref1279"></a><a id="sthref1280"></a>AUTOREFRESH in cache groups</p>
<p>The <code dir="ltr">AUTOREFRESH</code> parameter automatically propagates changes from the Oracle database to TimesTen cache groups. For explicitly loaded cache groups, deletes, updates and inserts are automatically propagated from the Oracle database to the cache group. For dynamic cache groups, only deletes and updates are propagated. Inserts to the specified Oracle database tables are not propagated to dynamic cache groups. They are dynamically loaded into TimesTen Cache when referenced by the application. They can also be explicitly loaded by the application.</p>
<p>To use autorefresh with a cache group, you must specify <code dir="ltr">AUTOREFRESH</code> when you create the cache group. You can change the <code dir="ltr">MODE</code>, <code dir="ltr">STATE</code> and <code dir="ltr">INTERVAL</code> <code dir="ltr">AUTOREFRESH</code> settings after a cache group has been created by using the <code dir="ltr">ALTER CACHE GROUP</code> command. Once a cache group has been specified as either <code dir="ltr">AUTOREFRESH</code> or <code dir="ltr">PROPAGATE</code>, you cannot change these attributes.</p>
<p>TimesTen supports <a id="sthref1281"></a><code dir="ltr">FULL</code> or <code dir="ltr">INCREMENTAL AUTOREFRESH</code>. In <code dir="ltr">FULL</code> mode, the entire cache is periodically unloaded and then reloaded. In <code dir="ltr">INCREMENTAL</code> mode, TimesTen installs triggers in the Oracle database to track changes and periodically updates only the rows that have changed in the specified Oracle database tables. The first incremental refresh is always a full refresh, unless the autorefresh state is <code dir="ltr">PAUSED</code>. The default mode is <code dir="ltr">INCREMENTAL</code>.</p>
<p><code dir="ltr">FULL AUTOREFRESH</code> is more efficient when most of the Oracle database table rows have been changed. <code dir="ltr">INCREMENTAL AUTOREFRESH</code> is more efficient when there are fewer changes.</p>
<p>TimesTen schedules an autorefresh operation when the transaction that contains a statement with <code dir="ltr">AUTOREFRESH</code> specified is committed. The statement types that cause autorefresh to be scheduled are:</p>
<ul>
<li>
<p>A <code dir="ltr">CREATE CACHE GROUP</code> statement in which <code dir="ltr">AUTOREFRESH</code> is specified, and the <code dir="ltr">AUTOREFRESH</code> state is specified as <code dir="ltr">ON</code>.</p>
</li>
<li>
<p>An <code dir="ltr"><a href="#i1055226">ALTER CACHE GROUP</a></code> statement in which the <code dir="ltr">AUTOREFRESH</code> state has been changed to <code dir="ltr">ON</code>.</p>
</li>
<li>
<p>A <code dir="ltr"><a href="#i993508">LOAD CACHE GROUP</a></code> statement on an empty cache group whose autorefresh state is <code dir="ltr">PAUSED</code>.</p>
</li>
</ul>
<p>The specified interval determines how often autorefresh occurs.</p>
<p>The current <code dir="ltr">STATE</code> of <code dir="ltr">AUTOREFRESH</code> can be <code dir="ltr">ON</code>, <code dir="ltr">OFF</code> or <code dir="ltr">PAUSED</code>. By default, the autorefresh state is <code dir="ltr">PAUSED</code>.</p>
<p>The <code dir="ltr">NOT PROPAGATE</code> attribute cannot be used with the <code dir="ltr">AUTOREFRESH</code> attribute.</p>
<p class="subhead2"><a id="TTSQL410"></a><a id="sthref1282"></a><a id="sthref1283"></a>Aging in cache groups</p>
<ul>
<li>
<p>You can implement sliding windows with time-based aging. See <a class="olink TTCAC257" href="../TTCAC/define.htm#TTCAC257">&#34;Configuring a sliding window&#34;</a> in <span class="italic">Oracle TimesTen Application-Tier Database Cache User&#39;s Guide</span>.</p>
</li>
<li>
<p>After you have defined an aging policy for the table, you cannot change the policy from LRU to time-based or from time-based to LRU. You must first drop aging and then alter the table to add a new aging policy.</p>
</li>
<li>
<p>The aging policy must be defined to change the aging state.</p>
</li>
<li>
<p>LRU and time-based aging can be combined in one system. If you use only LRU aging, the aging thread wakes up based on the cycle specified for the whole database. If you use only time-based aging, the aging thread wakes up based on an optimal frequency. This frequency is determined by the values specified in the <code dir="ltr">CYCLE</code> clause for all tables. If you use both LRU and time-based aging, then the thread wakes up based on a combined consideration of both types.</p>
</li>
<li>
<p>Call the <code dir="ltr">ttAgingScheduleNow</code> procedure to schedule the aging process right away regardless if the aging state is <code dir="ltr">ON</code> or <code dir="ltr">OFF</code>.</p>
</li>
<li>
<p>The following rules determine if a row is accessed or referenced for LRU aging:</p>
<ul>
<li>
<p>Any rows used to build the result set of a <code dir="ltr">SELECT</code> statement.</p>
</li>
<li>
<p>Any rows used to build the result set of an <code dir="ltr">INSERT...SELECT</code> statement.</p>
</li>
<li>
<p>Any rows that are about to be updated or deleted.</p>
</li>
</ul>
</li>
<li>
<p>Compiled commands are marked invalid and need recompilation when you either drop LRU aging from or add LRU aging to tables that are referenced in the commands.</p>
</li>
<li>
<p>For LRU aging, if a child row is not a candidate for aging, then neither this child row nor its parent row are deleted. <code dir="ltr">ON DELETE CASCADE</code> settings are ignored.</p>
</li>
<li>
<p>For time-based aging, if a parent row is a candidate for aging, then all child rows are deleted. <code dir="ltr">ON DELETE CASCADE</code> (whether specified or not) is ignored.</p>
</li>
<li>
<p>Specify either the LRU aging or time-based aging policy on the root table. The policy applies to all tables in the cache group.</p>
</li>
<li>
<p>For the time-based aging policy, you cannot add or modify the aging column. This is because you cannot add or modify a <code dir="ltr">NOT NULL</code> column.</p>
</li>
<li>
<p>Restrictions on defining aging for a cache group:</p>
<ul>
<li>
<p>LRU aging is not supported on a cache group defined with the autorefresh attribute, unless it is a dynamic cache group.</p>
</li>
<li>
<p>Aging is disabled by default on an explicitly loaded global cache group.</p>
</li>
<li>
<p>The aging policy cannot be added, altered, or dropped for read-only cache groups or cache groups with the <code dir="ltr">AUTOREFRESH</code> attribute while the cache agent is active. Stop the cache agent first.</p>
</li>
<li>
<p>You cannot drop the column that is used for time-based aging.</p>
</li>
</ul>
</li>
</ul>
<p class="subhead2"><a id="TTSQL411"></a><a id="sthref1284"></a>Cache grid</p>
<p>To cache data in a cache grid, you must create an asynchronous writethrough global cache group. Before you can create this cache group, the TimesTen database must be associated with a cache grid. For more information on creating and using a cache grid and creating and using global cache groups, see <a class="olink TTCAC191" href="../TTCAC/prereqs.htm#TTCAC191">&#34;Configuring a cache grid&#34;</a> and <a class="olink TTCAC261" href="../TTCAC/define.htm#TTCAC261">&#34;Global cache groups&#34;</a> in <span class="italic">Oracle TimesTen Application-Tier Database Cache User&#39;s Guide</span>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1285"></a>Examples</p>
<p>Create a read-only cache group:</p>
<pre dir="ltr">CREATE READONLY CACHE GROUP customerorders
AUTOREFRESH INTERVAL 10 MINUTES
FROM
customer (custid INT NOT NULL,
       name CHAR(100) NOT NULL,
       addr CHAR(100),
       zip INT,
       region CHAR(10),
       PRIMARY KEY(custid)),
ordertab (orderid INT NOT NULL,
       custid INT NOT NULL,
       PRIMARY KEY (orderid),
       FOREIGN KEY (custid) REFERENCES customer(custid));
</pre>
<p>Create an asynchronous writethrough cache group:</p>
<pre dir="ltr">CREATE ASYNCHRONOUS WRITETHROUGH CACHE GROUP cstomers
FROM
customer (custid INT NOT NULL,
       name CHAR(100) NOT NULL,
       addr CHAR(100),
       zip INT,
       PRIMARY KEY(custid));
</pre>
<p>Create a synchronous writethrough cache group:</p>
<pre dir="ltr">CREATE SYNCHRONOUS WRITETHROUGH CACHE GROUP customers
FROM
customer (custid INT NOT NULL,
       name CHAR(100) NOT NULL,
       addr CHAR(100),
       zip INT,
       PRIMARY KEY(custid));
</pre>
<p>Create a user managed cache group:</p>
<pre dir="ltr">CREATE USERMANAGED CACHE GROUP updateanywherecustomers
AUTOREFRESH
       MODE INCREMENTAL
       INTERVAL 30 SECONDS
       STATE ON
FROM
customer (custid INT NOT NULL,
       name CHAR(100) NOT NULL,
       addr CHAR(100),
       zip INT,
       PRIMARY KEY(custid),
       PROPAGATE);
</pre>
<p>Create a cache group with time-based aging. Specify <code dir="ltr">agetimestamp</code> as the column for aging. Specify <code dir="ltr">LIFETIME</code> 2 hours, <code dir="ltr">CYCLE</code> 30 minutes. Aging state is not specified, so the default setting (<code dir="ltr">ON</code>) is used.</p>
<pre dir="ltr">CREATE READONLY CACHE GROUP agingcachegroup
AUTOREFRESH
       MODE INCREMENTAL
       INTERVAL 5 MINUTES
       STATE PAUSED
FROM
customer (customerid NUMBER NOT NULL,
       agetimestamp TIMESTAMP NOT NULL,
       PRIMARY KEY (customerid))
       AGING USE agetimestamp LIFETIME 2 HOURS CYCLE 30 MINUTES;

Command&gt; DESCRIBE customer;
Table USER.CUSTOMER:
  Columns:
   *CUSTOMERID                      NUMBER NOT NULL
    AGETIMESTAMP                    TIMESTAMP (6) NOT NULL
  AGING USE AgeTimestamp LIFETIME 2 HOURS CYCLE 30 MINUTES ON
1 table found.
(primary key columns are indicated with *)
</pre>
<p>Use a synonym for a mixed case delimited identifier table name in the Oracle database so the mixed case table name can be cached in TimesTen. First attempt to cache the mixed case Oracle database table name. You see the error <code dir="ltr">&#34;Could not find &#39;</code><code dir="ltr"><span class="codeinlineitalic">NameofTable</span></code><code dir="ltr">&#39; in Oracle&#34;</code>:</p>
<pre dir="ltr">Command&gt; AUTOCOMMIT 0;
Command&gt; PASSTHROUGH 3;
Command&gt; CREATE TABLE &#34;MixedCase&#34; (col1 NUMBER PRIMARY KEY NOT NULL);
Command&gt; INSERT INTO &#34;MixedCase&#34; VALUES (1);
1 row inserted.
Command&gt; COMMIT;
Command&gt; CREATE CACHE GROUP MixedCase1 from &#34;MixedCase&#34; 
        (col1 NUMBER PRIMARY KEY NOT NULL);
 5140: Could not find SAMPLEUSER.MIXEDCASE in Oracle.  May not have privileges.
The command failed.
</pre>
<p>Now, using the <code dir="ltr">PassThrough</code> attribute, create the synonym <code dir="ltr">&#34;MIXEDCASE&#34;</code> in the Oracle database and use that synonym as the table name.</p>
<pre dir="ltr">Command&gt; AUTOCOMMIT 0;
Command&gt; PASSTHROUGH 3;
Command&gt; CREATE SYNONYM &#34;MIXEDCASE&#34; FOR &#34;MixedCase&#34;;
Command&gt; COMMIT;
Command&gt; CREATE CACHE GROUP MixedCase2 FROM &#34;MIXEDCASE&#34; 
         (col1 NUMBER PRIMARY KEY NOT NULL);
Warning  5147: Cache group contains synonyms
Command&gt; COMMIT;
</pre>
<p>Attempt to use a synonym name with a read-only cache group or a cache group with the <code dir="ltr">AUTOREFRESH</code> attribute. You see an error:</p>
<pre dir="ltr">Command&gt; AUTOCOMMIT 0;
Command&gt; PASSTHROUGH 3;
Command&gt; CREATE SYNONYM &#34;MIXEDCASE_AUTO&#34; FOR &#34;MixedCase&#34;;
Command&gt; COMMIT;
Command&gt; CREATE READONLY CACHE GROUP MixedCase3 AUTOREFRESH MODE
         INCREMENTAL INTERVAL 10 MINUTES FROM &#34;MIXEDCASE_AUTO&#34; 
         (Col1 NUMBER PRIMARY KEY NOT NULL);
 5142: Autorefresh is not allowed on cache groups with Oracle synonyms
The command failed.
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1286"></a>See also</p>
<br/>
<code dir="ltr"><a href="#i1055226">ALTER CACHE GROUP</a></code><br/>
<code dir="ltr"><a href="#i1407906">ALTER TABLE</a></code><br/>
<code dir="ltr"><a href="#i993027">DROP CACHE GROUP</a></code><br/>
<code dir="ltr"><a href="#BABEAGCC">FLUSH CACHE GROUP</a></code><br/>
<code dir="ltr"><a href="#i993508">LOAD CACHE GROUP</a></code><br/>
<code dir="ltr"><a href="#i1046858">UNLOAD CACHE GROUP</a></code></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDDCEDC"></a>
<div id="TTSQL291" class="refsect1">
<h2 class="refsect1"><a id="sthref1287"></a><a id="sthref1288"></a><a id="sthref1289"></a>CREATE FUNCTION</h2>
<p>The <code dir="ltr">CREATE FUNCTION</code> statement creates a standalone stored function.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1290"></a>Required privilege</p>
<p><code dir="ltr">CREATE PROCEDURE</code> (if owner) or <code dir="ltr">CREATE ANY PROCEDURE</code> (if not owner).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1291"></a>SQL syntax</p>
<pre dir="ltr">CREATE [OR REPLACE] FUNCTION [<span class="italic">Owner</span>.]<span class="italic">FunctionName</span><span class="codeinlineitalic"> </span>
     [(<span class="italic">arguments</span> [IN|OUT|IN OUT][NOCOPY] <span class="italic">DataType</span> [DEFAULT <span class="italic">expr</span>][,...])]
     RETURN <span class="italic">DataType</span> [<span class="codeinlineitalic">InvokerRightsClause</span>] [DETERMINISTIC]
     {IS|AS} <span class="italic">PlsqlFunctionBody</span>
</pre>
<p>The syntax for the <code dir="ltr"><span class="codeinlineitalic">InvokerRightsClause</span></code>:</p>
<pre dir="ltr">AUTHID {CURRENT_USER|DEFINER}
</pre>
<p>You can specify <code dir="ltr"><span class="codeinlineitalic">InvokerRightsClause</span></code> or <code dir="ltr">DETERMINISTIC</code> in any order.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1292"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for CREATE MATERIALIZED VIEW." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t26">Parameter</th>
<th class="cellalignment6331" id="r1c2-t26">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t26" headers="r1c1-t26"><code dir="ltr">OR REPLACE</code></td>
<td class="cellalignment6332" headers="r2c1-t26 r1c2-t26">Specify <code dir="ltr">OR REPLACE</code> to recreate the function if it already exists. Use this clause to change the definition of an existing function without dropping and recreating it. When you recreate a function, TimesTen recompiles it.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t26" headers="r1c1-t26"><code dir="ltr"><span class="codeinlineitalic">FunctionName</span></code></td>
<td class="cellalignment6332" headers="r3c1-t26 r1c2-t26">Name of function.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t26" headers="r1c1-t26"><code dir="ltr"><span class="codeinlineitalic">arguments</span></code></td>
<td class="cellalignment6332" headers="r4c1-t26 r1c2-t26">Name of argument or parameter. You can specify 0 or more parameters for the function. If you specify a parameter, you must specify a data type for the parameter. The data type must be a PL/SQL data type.
<p>For more information on PL/SQL data types, see <a class="olink LNPLS003" href="../LNPLS/datatypes.htm#LNPLS003">Chapter 3, &#34;PL/SQL Data Types&#34;</a> in the <span class="italic">Oracle Database PL/SQL Language Reference</span>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t26" headers="r1c1-t26"><code dir="ltr">IN | OUT | IN OUT</code></td>
<td class="cellalignment6332" headers="r5c1-t26 r1c2-t26">Parameter modes.
<p><code dir="ltr">IN</code> is a read-only parameter. You can pass the parameter&#39;s value into the function but the function cannot pass the parameter&#39;s value out of the function and back to the calling PL/SQL block. The value of the parameter cannot be changed.</p>
<p><code dir="ltr">OUT</code> is a write-only parameter. Use an <code dir="ltr">OUT</code> parameter to pass a value back from the function to the calling PL/SQL block. You can assign a value to the parameter.</p>
<p><code dir="ltr">IN OUT</code> is a read/write parameter. You can pass values into the function and return a value back to the calling program (either the original, unchanged value or a new value set within the function.</p>
<p><code dir="ltr">IN</code> is the default.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t26" headers="r1c1-t26"><code dir="ltr">NOCOPY</code></td>
<td class="cellalignment6332" headers="r6c1-t26 r1c2-t26">Specify <code dir="ltr">NOCOPY</code> to instruct TimesTen to pass the parameter as fast as possible. You can enhance performance when passing a large value such as a record, an index-by-table, or a varray to an <code dir="ltr">OUT</code> or <code dir="ltr">IN OUT</code> parameter. <code dir="ltr">IN</code> parameters are always passed <code dir="ltr">NOCOPY</code>.
<p>See <a class="olink LNPLS1573" href="../LNPLS/function.htm#LNPLS1573">&#34;NOCOPY&#34;</a> in <span class="italic">Oracle Database PL/SQL Language Reference</span> for additional information.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r7c1-t26" headers="r1c1-t26"><code dir="ltr">DEFAULT</code> <code dir="ltr"><span class="codeinlineitalic">expr</span></code></td>
<td class="cellalignment6332" headers="r7c1-t26 r1c2-t26">Use this clause to specify a default value for the parameter. You can specify <code dir="ltr">:=</code> in place of the keyword <code dir="ltr">DEFAULT</code>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r8c1-t26" headers="r1c1-t26"><code dir="ltr">RETURN</code> <code dir="ltr"><span class="codeinlineitalic">DataType</span></code></td>
<td class="cellalignment6332" headers="r8c1-t26 r1c2-t26">Required clause. A function must return a value. You must specify the data type of the return value of the function.
<p>Do not specify a length, precision, or scale for the data type.</p>
<p>The data type is a PL/SQL data type.</p>
<p>For more information on PL/SQL data types, see <a class="olink LNPLS003" href="../LNPLS/datatypes.htm#LNPLS003">Chapter 3, &#34;PL/SQL Data Types&#34;</a> in the <span class="italic">Oracle Database PL/SQL Language Reference</span>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r9c1-t26" headers="r1c1-t26"><code dir="ltr"><span class="codeinlineitalic">InvokerRightsClause</span></code></td>
<td class="cellalignment6332" headers="r9c1-t26 r1c2-t26">Lets you specify whether the SQL statements in PL/SQL functions or procedures execute with definer&#39;s or invoker&#39;s rights. The <code dir="ltr">AUTHID</code> setting affects the name resolution and privilege checking of SQL statements that a PL/SQL procedure or function issues at runtime, as follows:
<ul>
<li>
<p>Specify <code dir="ltr">DEFINER</code> so that SQL name resolution and privilege checking operate as though the owner of the procedure or function (the definer, in whose schema it resides) is running it. <code dir="ltr">DEFINER</code> is the default.</p>
</li>
<li>
<p>Specify <code dir="ltr">CURRENT_USER</code> so that SQL name resolution and privilege checking operate as though the current user (the invoker) is running it.</p>
</li>
</ul>
<p>For more information, see <a class="olink TTPLS274" href="../TTPLS/accesscntl.htm#TTPLS274">&#34;Definer&#39;s rights and invoker&#39;s rights&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database PL/SQL Developer&#39;s Guide</span>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r10c1-t26" headers="r1c1-t26"><code dir="ltr">DETERMINISTIC</code></td>
<td class="cellalignment6332" headers="r10c1-t26 r1c2-t26">Specify <code dir="ltr">DETERMINISTIC</code> to indicate that the function should return the same result value whenever it is called with the same values for its parameters.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r11c1-t26" headers="r1c1-t26"><code dir="ltr">IS|AS</code></td>
<td class="cellalignment6332" headers="r11c1-t26 r1c2-t26">Specify either <code dir="ltr">IS</code> or <code dir="ltr">AS</code> to declare the body of the function.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r12c1-t26" headers="r1c1-t26"><code dir="ltr"><span class="codeinlineitalic">plsql_function_spec</span></code></td>
<td class="cellalignment6332" headers="r12c1-t26 r1c2-t26">Specifies the function body.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1293"></a>Restrictions</p>
<p>TimesTen does not support:</p>
<ul>
<li>
<p><code dir="ltr">parallel_enable_clause</code></p>
<p>You can specify this clause, but it has no effect.</p>
</li>
<li>
<p><code dir="ltr">call_spec</code> clause</p>
</li>
<li>
<p><code dir="ltr">AS EXTERNAL</code> clause</p>
</li>
</ul>
<p>In a replication environment, the <code dir="ltr">CREATE FUNCTION</code> statement is not replicated. For more information, see <a class="olink TTREP744" href="../TTREP/alterpair.htm#TTREP744">&#34;Creating a new PL/SQL object in an existing active standby pair&#34;</a> and <a class="olink TTREP745" href="../TTREP/alter.htm#TTREP745">&#34;Adding a PL/SQL object to an existing classic replication scheme&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span>.</p>
<p>When you create or replace a function, the privileges granted on the function remain the same. If you drop and recreate the object, the object privileges that were granted on the original object are revoked.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1294"></a>Examples</p>
<p>Create function <code dir="ltr">get_sal</code> with one input parameter. Return <code dir="ltr">salary</code> as type <code dir="ltr">NUMBER</code>.</p>
<pre dir="ltr">Command&gt; CREATE OR REPLACE FUNCTION get_sal
       &gt;   (p_id employees.employee_id%TYPE) RETURN NUMBER IS
       &gt;   v_sal employees.salary%TYPE := 0;
       &gt; BEGIN
       &gt;   SELECT salary INTO v_sal FROM employees
       &gt;     WHERE employee_id = p_id;
       &gt;   RETURN v_sal;
       &gt; END get_sal;
       &gt; /
 
Function created.
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1295"></a>See also</p>
<p><a class="olink LNPLS" href="../LNPLS/toc.htm"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> and <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1046832"></a>
<div id="TTSQL292" class="refsect1">
<h2 class="refsect1"><a id="sthref1296"></a><a id="sthref1297"></a>CREATE INDEX</h2>
<p>The <code dir="ltr">CREATE INDEX</code> statement creates a range, hash, or bitmap index on one or more columns of a table or materialized view.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1298"></a>Required privilege</p>
<p>No privilege is required for owner.</p>
<p>If not the owner, the system privilege, <code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">INDEX</code>, or the object privilege, <code dir="ltr">INDEX</code>, is required.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1299"></a>SQL syntax</p>
<p>To create a range or bitmap index:</p>
<pre dir="ltr">CREATE [UNIQUE|BITMAP] INDEX [<span class="italic">Owner</span>.]<span class="italic">IndexName</span> ON
[<span class="italic">Owner</span>.]<span class="italic">TableName</span> ({<span class="italic">ColumnName</span> [ASC | DESC]}
[,... ] )
</pre>
<p>To create a hash index:</p>
<pre dir="ltr">CREATE [UNIQUE] HASH INDEX [<span class="italic">Owner</span>.]<span class="italic">IndexName</span> ON
[<span class="italic">Owner</span>.]<span class="italic">TableName</span> ({<span class="italic">ColumnName</span> [ASC | DESC]}
[,... ] ) [ PAGES = <span class="italic">RowPages</span> | CURRENT ]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1300"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for CREATE INDEX." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t27">Parameter</th>
<th class="cellalignment6331" id="r1c2-t27">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t27" headers="r1c1-t27"><a id="sthref1301"></a><a id="sthref1302"></a><code dir="ltr">UNIQUE</code></td>
<td class="cellalignment6332" headers="r2c1-t27 r1c2-t27">You can specify <code dir="ltr">UNIQUE</code> for both range and hash indexes. If you specify <code dir="ltr">UNIQUE</code> each possible combination of index key column values can occur in only one row of the table.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t27" headers="r1c1-t27"><code dir="ltr">BITMAP</code></td>
<td class="cellalignment6332" headers="r3c1-t27 r1c2-t27">Specify <code dir="ltr">CREATE BITMAP INDEX</code> to create an index where the information about rows with each unique value is encoded in a bitmap. Each bit in the bitmap corresponds to a row in the table.
<p>Use a bitmap index for columns that do not have many unique values.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t27" headers="r1c1-t27"><code dir="ltr">HASH</code></td>
<td class="cellalignment6332" headers="r4c1-t27 r1c2-t27">Specify <code dir="ltr">HASH</code> to create a hash index. Specify <code dir="ltr">UNIQUE</code> with <code dir="ltr">HASH</code> to create a unique hash index.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t27" headers="r1c1-t27"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code> <code dir="ltr"><span class="codeinlineitalic">IndexName</span></code></td>
<td class="cellalignment6332" headers="r5c1-t27 r1c2-t27">Name to be assigned to the new index. A table cannot have two indexes with the same name. If the owner is specified, it must be the same as the owner of the table.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t27" headers="r1c1-t27"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code> <code dir="ltr"><span class="codeinlineitalic">TableName</span></code></td>
<td class="cellalignment6332" headers="r6c1-t27 r1c2-t27">Designates the table or materialized view for which an index is to be created.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r7c1-t27" headers="r1c1-t27"><code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code></td>
<td class="cellalignment6332" headers="r7c1-t27 r1c2-t27">Name of a column to be used as an index key. You can specify up to 16 columns in order from major index key to minor index key.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r8c1-t27" headers="r1c1-t27"><a id="sthref1303"></a><a id="sthref1304"></a><a id="sthref1305"></a><code dir="ltr">[ASC|DESC</code><code dir="ltr">]</code></td>
<td class="cellalignment6332" headers="r8c1-t27 r1c2-t27">Specifies the order of the index to be either ascending (the default) or descending. In TimesTen, this parameter is currently ignored.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r9c1-t27" headers="r1c1-t27"><code dir="ltr">PAGES = {</code><code dir="ltr"><span class="codeinlineitalic">RowPages</span></code> <code dir="ltr">| CURRENT}</code></td>
<td class="cellalignment6332" headers="r9c1-t27 r1c2-t27">Optional clause used in the <code dir="ltr">CREATE</code> <code dir="ltr">HASH</code> <code dir="ltr">INDEX</code> statement. If you do not specify the <code dir="ltr">PAGES</code> clause, the default is <code dir="ltr">CURRENT</code>.
<p>Sizes the hash index to reflect the expected number of pages in the table. If you specify <code dir="ltr">CURRENT</code>, the current number of rows in the table is used to calculate the page count value. If you specify <code dir="ltr"><span class="codeinlineitalic">RowPages</span></code>, the number of pages is used. To determine the value for <code dir="ltr"><span class="codeinlineitalic">RowPages</span></code>, divide the number of expected rows in your table by 256. For example, if your table has 256,000 rows, specify 1000 for RowPages (256000/256=1000).</p>
<p>The value for <code dir="ltr"><span class="codeinlineitalic">RowPages</span></code> must be a positive constant and must be greater than 0.</p>
<p>Do not specify <code dir="ltr">PAGES</code><code dir="ltr">=</code><code dir="ltr">CURRENT</code> if there are no rows in your table. This is because when rows are added to the table, the hash index performs poorly.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1306"></a>Description</p>
<ul>
<li>
<p>TimesTen creates a nonunique range index by default. Specify <code dir="ltr">CREATE</code> <code dir="ltr">UNIQUE INDEX</code> to create a unique range index. Specify <code dir="ltr">CREATE BITMAP INDEX</code> to create a bitmap index.</p>
</li>
<li>
<p>To create a nonunique hash index, specify <code dir="ltr">CREATE</code> <code dir="ltr">HASH</code> <code dir="ltr">INDEX</code>. To create a unique hash index, specify <code dir="ltr">CREATE</code> <code dir="ltr">UNIQUE</code> <code dir="ltr">HASH</code> <code dir="ltr">INDEX</code>.</p>
</li>
<li>
<p>You cannot create an index (range, hash, or bitmap) on LOB columns.</p>
</li>
<li>
<p>Specify a bitmap index on each column to increase the performance of complex queries that specify multiple predicates on multiple columns connected by the <code dir="ltr">AND</code> or <code dir="ltr">OR</code> operator. At runtime, TimesTen finds bitmaps of rows that satisfy each predicate and bitmaps from different predicates are combined using bitwise logical operation and then the resultant bitmaps are converted to qualified rows.</p>
</li>
<li>
<p>Bitmap indexes are used to satisfy these predicates:</p>
<ul>
<li>
<p>Equality predicates. For example: <code dir="ltr">&#39;x1 = 1&#39;</code></p>
</li>
<li>
<p>Range predicates. For example: <code dir="ltr">&#39;y1 &gt; 10&#39;</code> and<code dir="ltr">&#39;z1 BETWEEN 1 and 10&#39;</code></p>
</li>
<li>
<p><code dir="ltr">AND</code> predicates. For example: <code dir="ltr">&#39;x1 &gt; 10 AND y1 &gt; 10&#39;</code></p>
</li>
<li>
<p><code dir="ltr">OR</code> predicates. For example: <code dir="ltr">&#39;x1 &gt; 10 OR y1 &gt; 10&#39;</code></p>
</li>
<li>
<p>Complex predicates with <code dir="ltr">AND</code> or <code dir="ltr">OR</code>. For example: <code dir="ltr">&#39;(x1 &gt; 10 AND y1 &gt; 10) OR (z1 &gt; 10)&#39;</code></p>
</li>
<li>
<p><code dir="ltr">NOT EQUAL</code> predicate with <code dir="ltr">AND</code>. For example: <code dir="ltr">&#39;x1 = 1 and y1 != 1&#39;</code></p>
</li>
</ul>
</li>
<li>
<p>Bitmap indexes:</p>
<ul>
<li>
<p><code dir="ltr">COUNT</code> (*) optimization counts rowids from bitmaps.</p>
</li>
<li>
<p>Are used to optimize queries that group by a prefix of columns of the bitmap index.</p>
</li>
<li>
<p>Are used to optimize distinct queries and order by queries.</p>
</li>
<li>
<p>Are used in a <code dir="ltr">MERGE</code> join.</p>
</li>
</ul>
</li>
<li>
<p>The <code dir="ltr">CREATE INDEX</code> statement enters the definition of the index in the system catalog and initializes the necessary data structures. Any rows in the table are then added to the index.</p>
</li>
<li>
<p>If <code dir="ltr">UNIQUE</code> is specified, all existing rows must have unique values in the indexed column(s).</p>
</li>
<li>
<p>The new index is maintained automatically until the index is deleted by a <code dir="ltr"><a href="#g1513769">DROP INDEX</a></code> statement or until the table associated with it is dropped.</p>
</li>
<li>
<p>Any prepared statements that reference the table with the new index are automatically prepared again the next time they are executed. Then the statements can take advantage, if possible, of the new index.</p>
</li>
<li>
<p><code dir="ltr">NULL</code> compares higher than all other values for sorting.</p>
</li>
<li>
<p>An index on a temporary table cannot be created by a connection if any other connection has a non-empty instance of the table.</p>
</li>
<li>
<p>If you are using linguistic comparisons, you can create a linguistic index. A linguistic index uses sort key values and storage is required for these values. Only one unique value for <code dir="ltr">NLS_SORT</code> is allowed for an index. For more information on linguistic indexes and linguistic comparisons, see <a class="olink TTOPR288" href="../TTOPR/globalization.htm#TTOPR288">&#34;Using linguistic indexes&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span>.</p>
</li>
<li>
<p>If you create indexes that are redundant, TimesTen generates warnings or errors. Call <code dir="ltr">ttRedundantIndexCheck</code> to see the list of redundant indexes for your tables.</p>
</li>
<li>
<p>In a replicated environment for an active standby pair, if <code dir="ltr">DDL_REPLICATION_LEVEL</code> is 2 or greater when you execute <code dir="ltr">CREATE INDEX</code> on the active database, the index is replicated to all databases in the replication scheme. The table on which the index is created must be empty. See <a class="olink TTREP693" href="../TTREP/alterpair.htm#TTREP693">&#34;Making DDL changes in an active standby pair&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span> for more information.</p>
</li>
<li>
<p>Indexes can be created on over any columns in the table. This includes compressed columns, even columns that exist in separate compression column groups.</p>
</li>
<li>
<p>To change the size or type of a hash index, drop the hash index and create a new index.</p>
</li>
<li>
<p>A hash index is created with a fixed size that remains constant for the life of the table. To resize the hash index, drop and recreate the index. A smaller hash index results in more hash collisions. A larger hash index reduces collisions but can waste memory. Hash key comparison is a fast operation, so a small number of hash collisions should not cause a performance problem for TimesTen.</p>
<p>To ensure that your hash index is sized correctly, your application must indicate the expected size of your table with the value of the <code dir="ltr"><span class="codeinlineitalic">RowPages</span></code> parameter of the <code dir="ltr">SET</code> <code dir="ltr">PAGES</code> clause. Compute this value by dividing the number of expected rows in your table by 256. For example, if your table has 256,000 rows, specify 1000 for the value of RowPages (256000/256=1000).</p>
</li>
<li>
<p>The maximum number of columns that can be specified for an index is 16.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1307"></a>Using indexes in query processing</p>
<p>Proper indexes can improve query performance. Some queries can benefit from the use of indexes and some queries do not benefit from the use of indexes. Additionally, the choice of indexes for your queries is important.</p>
<p>A range index is ideal for processing range searches and exact matches, especially if most of the values in the index columns are unique. For example, if a range index is defined on columns <code dir="ltr">(C1,C2)</code>, the index can be used to process the following types of predicates. <code dir="ltr"><span class="codeinlineitalic">ConstantOrParam</span></code> refers to a constant value or dynamic parameter and <code dir="ltr"><span class="codeinlineitalic">range</span></code> refers to the operators &gt;,&lt;,&gt;=, or &lt;=:</p>
<ul>
<li>
<p><code dir="ltr">C1</code> = <code dir="ltr"><span class="codeinlineitalic">ConstantOrParam</span></code> <code dir="ltr">AND</code> <code dir="ltr">C2</code> = <code dir="ltr"><span class="codeinlineitalic">ConstantOrParam</span></code></p>
</li>
<li>
<p><code dir="ltr">C1</code> = <code dir="ltr"><span class="codeinlineitalic">ConstantOrParam</span></code> <code dir="ltr">AND</code> <code dir="ltr">C2</code> <code dir="ltr"><span class="codeinlineitalic">range</span></code> <code dir="ltr"><span class="codeinlineitalic">ConstantOrParam</span></code></p>
</li>
<li>
<p><code dir="ltr">C1</code> = <code dir="ltr"><span class="codeinlineitalic">ConstantOrParam</span></code></p>
</li>
<li>
<p><code dir="ltr">C1</code> <code dir="ltr"><span class="codeinlineitalic">range</span></code> <code dir="ltr"><span class="codeinlineitalic">ConstantOrParam</span></code></p>
</li>
</ul>
<p>A range index efficiently processes equality and range predicates and efficiently processes sort and group operations. Use range indexes on index columns with many unique values. The order of columns you specify in a range index is relevant. The order of expressions in the predicate of a query that uses the range index is not relevant. When your query is processed, only one range index is used for each scan of your table even if you have defined multiple range indexes on your table.</p>
<p>A hash index efficiently processes equality predicates. You must size your hash index correctly for optimal performance. Use the <code dir="ltr">PAGES</code> parameter to size your hash index. If you specify a <code dir="ltr">PAGES</code> value that is too small, a large number of hash collisions may result, leading to performance degradation for statements that access the hash index. The order of columns specified in the hash index is not relevant and the order of expressions in the predicate of the query that uses the hash index is not relevant. If either a hash index or a range index can be used to process a particular equality predicate, the hash index is chosen because a lookup in a hash index is faster than a scan of a range index.</p>
<p>A bitmap index efficiently processes equality and range predicates, especially if you have complex queries with multiple expressions using <code dir="ltr">AND</code> or <code dir="ltr">OR</code> operators. Use bitmap indexes for queries where the index columns have few unique values (meaning the index columns have a large number of duplicate values) and where index columns have low cardinality. The index contains a bitmap for each unique index value, rather than indexing each row separately and each bit in the bitmap corresponds to a row in the table.</p>
<p>When you process a query, multiple bitmap indexes can be used for each scan of your table. Bitmap indexes can process equality and inequality predicates as well as range predicates or a combination of these predicates connected by <code dir="ltr">AND</code> or <code dir="ltr">OR</code> operators.</p>
<p>You can influence the indexes used by the optimizer by setting statement level or transaction level optimizer hints. For more information on statement level optimizer hints, see <a href="#BABJFIBC">&#34;Statement level optimizer hints&#34;</a>. For more information on transaction level optimizer hints, see &#34;<a class="olink TTREF271" href="../TTREF/proced.htm#TTREF271">ttOptSetFlag</a>&#34;, <a class="olink TTREF274" href="../TTREF/proced.htm#TTREF274">ttOptSetOrder</a>&#34;, or &#34;<a class="olink TTREF278" href="../TTREF/proced.htm#TTREF278">ttOptUseIndex</a>&#34; in the <span class="italic">Oracle TimesTen In-Memory Database Reference</span>. You can also use the TimesTen Index Advisor to provide recommendations for indexes, given a specific set of queries or a specific workload. For more information on the index advisor, see &#34;<a class="olink TTOPR740" href="../TTOPR/comp.htm#TTOPR740">Using the Index Advisor to recommend indexes</a>&#34; in the <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1308"></a>Examples</p>
<p>Create a table and then create a unique hash index on <code dir="ltr"><span class="codeinlineitalic">col2</span></code>. Do not specify the <code dir="ltr">PAGES</code> clause. If <code dir="ltr">PAGES</code> is not specified, the current table page count is used for the size of the hash table. Use <code dir="ltr">INDEXES</code> to verify the index was created. Insert a row in the table, set <code dir="ltr">SHOWPLAN</code> to 1 and then verify the optimizer uses the hash index.</p>
<pre dir="ltr">Command&gt; CREATE TABLE tab (col1 NUMBER PRIMARY KEY NOT NULL, col2 VARCHAR2 (30));
Command&gt; CREATE UNIQUE HASH INDEX hash1 ON tab (col2);
Command&gt; INDEXES;
 
Indexes on table TESTUSER.TAB:
  HASH1: unique hash index on columns:
    COL2
  TAB: unique range index on columns:
    COL1
  2 indexes found.
 
2 indexes found on 1 table.
Command&gt; INSERT INTO tab VALUES (10, &#39;ABC&#39;);
Command&gt; SHOWPLAN 1;
Command&gt; SELECT * FROM tab where col2 = &#39;ABC&#39;;
 
Query Optimizer Plan:
 
  STEP:                1
  LEVEL:               1
  OPERATION:           RowLkHashScan
  TBLNAME:             TAB
  IXNAME:              HASH1
  INDEXED CONDITION:   TAB.COL2 = &#39;ABC&#39;
  NOT INDEXED:         &lt;NULL&gt;
 
&lt; 10, ABC &gt;
1 row found.
</pre>
<p>Create a table and create a nonunique hash index on <code dir="ltr"><span class="codeinlineitalic">col1</span></code>. Use <code dir="ltr">PAGES = CURRENT</code> to use the current table page count to size the hash index. Use <code dir="ltr">INDEXES</code> to verify the nonunique hash index is created.</p>
<pre dir="ltr">Command&gt; CREATE TABLE tab2 (col1 NUMBER);
Command&gt; CREATE HASH INDEX hash_index ON tab2 (col1) PAGES = CURRENT;
Command&gt; INDEXES;
 
Indexes on table TESTUSER.TAB2:
  HASH_INDEX: non-unique hash index on columns:
    COL1
  1 index found.
 
1 index found on 1 table.
</pre>
<p>Create table and create unique hash index on <code dir="ltr"><span class="codeinlineitalic">col3</span></code>. Use <code dir="ltr">PAGES = 100</code> to specify a page count of 100 for the size of the hash table. Use <code dir="ltr">INDEXES</code> to verify the unique hash index is created.</p>
<pre dir="ltr">Command&gt; CREATE TABLE tab3 (col1 NUMBER, col2 NUMBER, col3 TT_INTEGER);
Command&gt; CREATE UNIQUE HASH INDEX unique_hash1 on tab3 (col3) PAGES = 100;
Command&gt; INDEXES;
 
Indexes on table TESTUSER.TAB3:
  UNIQUE_HASH1: unique hash index on columns:
    COL3
  1 index found.
 
1 index found on 1 table.
</pre>
<p>Create a table and then create a bitmap index on the column <code dir="ltr"><span class="codeinlineitalic">id</span></code>. Use the <code dir="ltr">ttIsql</code> <code dir="ltr">SHOWPLAN</code> command to verify that the bitmap index is used in the query.</p>
<pre dir="ltr">Command&gt; CREATE TABLE tab1 (id NUMBER);
Command&gt; INSERT INTO tab1 VALUES (10);
1 row inserted.
Command&gt; INSERT INTO tab1 VALUES (20);
1 row inserted.
Command&gt; CREATE BITMAP INDEX bitmap_id ON tab1 (id);
Command&gt; COMMIT;
Command&gt; SET AUTOCOMMIT OFF;
Command&gt; SHOWPLAN 1;
Command&gt; SELECT * FROM tab1 WHERE id = 10;
 
Query Optimizer Plan:
 
  STEP:                1
  LEVEL:               1
  OPERATION:           RowLkBitmapScan
  TBLNAME:             TAB1
  IXNAME:              BITMAP_ID
  INDEXED CONDITION:   TAB1.ID = 10
  NOT INDEXED:         &lt;NULL&gt;
 
&lt; 10 &gt;
1 row found.
</pre>
<p>The <code dir="ltr">regions</code> table in the <code dir="ltr">HR</code> schema creates a unique index on <code dir="ltr">region_id</code>. Issue the <code dir="ltr">ttIsql</code> <code dir="ltr">INDEXES</code> command on table <code dir="ltr">regions</code>. You see the unique range index <code dir="ltr">regions</code>.</p>
<pre dir="ltr">Command&gt; INDEXES REGIONS;

Indexes on table SAMPLEUSER.REGIONS:
  REGIONS: unique range index on columns:
    REGION_ID
    (referenced by foreign key index COUNTR_REG_FK on table SAMPLEUSER.COUNTRIES)
  1 index found.

1 index found on 1 table.
</pre>
<p>Attempt to create a unique index <code dir="ltr">i</code> on table <code dir="ltr">regions</code> indexing on column <code dir="ltr">region_id</code>. You see a warning message.</p>
<pre dir="ltr">Command&gt; CREATE UNIQUE INDEX i ON regions (region_id);
Warning  2232: New index I is identical to existing index REGIONS; 
consider dropping index I
</pre>
<p>Call <code dir="ltr">ttRedundantIndexCheck</code> to see warning message for this index:</p>
<pre dir="ltr">Command&gt; CALL ttRedundantIndexCheck (&#39;regions&#39;);
&lt; Index SAMPLEUSER.REGIONS.I is identical to index SAMPLEUSER.REGIONS.REGIONS;
consider dropping index SAMPLEUSER.REGIONS.I &gt;
1 row found.
</pre>
<p>Create table <code dir="ltr">redundancy</code> and define columns <code dir="ltr">co11</code> and <code dir="ltr">col2</code>. Create two user indexes on <code dir="ltr">col1</code> and <code dir="ltr">col2</code>. You see an error message when you attempt to create the second index <code dir="ltr">r2</code>. Index <code dir="ltr">r1</code> is created. Index <code dir="ltr">r2</code> is not created.</p>
<pre dir="ltr">Command&gt; CREATE TABLE redundancy (col1 CHAR (30), col2 VARCHAR2 (30));
Command&gt; CREATE INDEX r1 ON redundancy (col1, col2);
Command&gt; CREATE INDEX r2 ON redundancy (col1, col2);
 2231: New index R2 would be identical to existing index R1
The command failed.
</pre>
<p>Issue the <code dir="ltr">ttIsql</code> command <code dir="ltr">INDEXES</code> on table <code dir="ltr">redundancy</code> to show that only index <code dir="ltr">r1</code> is created:</p>
<pre dir="ltr">Command&gt; INDEXES redundancy;

Indexes on table SAMPLEUSER.REDUNDANCY:
  R1: non-unique range index on columns:
    COL1
    COL2
  1 index found.

1 index found on 1 table.
</pre>
<p>This unique index ensures that all part numbers are unique.</p>
<pre dir="ltr">CREATE UNIQUE INDEX purchasing.partnumindex
ON purchasing.parts (partnumber);
</pre>
<p>Create a linguistic index named <code dir="ltr">german_index</code> on table <code dir="ltr">employees1</code>. To have more than one linguistic sort, create a second linguistic index.</p>
<pre dir="ltr">Command&gt; CREATE TABLE employees1 (id CHARACTER (21),
id2 character (21));
Command&gt; CREATE INDEX german_index ON employees1
  (NLSSORT(id, &#39;NLS_SORT=GERMAN&#39;));
Command&gt; CREATE INDEX german_index2 ON employees1
  (NLSSORT(id2, &#39;nls_sort=german_ci&#39;));
Command&gt; indexes employees1;
Indexes on table SAMPLEUSER.EMPLOYEES1:
  GERMAN_INDEX: non-unique range index on columns:
    NLSSORT(ID,&#39;NLS_SORT=GERMAN&#39;)
  GERMAN_INDEX2: non-unique range index on columns:
    NLSSORT(ID2,&#39;nls_sort=german_ci&#39;)
  2 indexes found.
1 table found.
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1309"></a>See also</p>
<p><code dir="ltr"><a href="#g1513769">DROP INDEX</a></code></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1075286"></a>
<div id="TTSQL293" class="refsect1">
<h2 class="refsect1"><a id="sthref1310"></a><a id="sthref1311"></a>CREATE MATERIALIZED VIEW</h2>
<p>The <code dir="ltr">CREATE MATERIALIZED VIEW</code> statement creates a view of the table specified in the <code dir="ltr"><span class="codeinlineitalic">SelectQuery</span></code> clause. The original tables used to create a view are referred to as <span class="italic">detail tables</span>. The view can be refreshed synchronously or asynchronously with regard to changes in the detail tables. If you create an asynchronous materialized view, you must first create a materialized view log on the detail table. See <a href="#BABBFEFI">&#34;CREATE MATERIALIZED VIEW LOG&#34;</a>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1312"></a>Required privilege</p>
<p>User executing the statement must have <code dir="ltr">CREATE MATERIALIZED VIEW</code> (if owner) or <code dir="ltr">CREATE ANY MATERIALIZED VIEW</code> (if not owner).</p>
<p>Owner of the materialized view must have <code dir="ltr">SELECT</code> on the detail tables.</p>
<p>Owner of the materialized view must have <code dir="ltr">CREATE TABLE</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1313"></a>SQL syntax</p>
<pre dir="ltr">CREATE MATERIALIZED VIEW [<span class="italic">Owner</span>.]<span class="codeinlineitalic">ViewName</span>
      [REFRESH 
        { FAST | COMPLETE } |
              [NEXT SYSDATE[+NUMTODSINTERVAL(<span class="italic">IntegerLiteral</span>,<span class="italic">IntervalUnit</span>)]] 
        |  NEXT SYSDATE[+NUMTODSINTERVAL(<span class="italic">IntegerLiteral</span>,<span class="italic">IntervalUnit</span>) ]
      ]
      AS <span class="codeinlineitalic">SelectQuery</span>
      [PRIMARY KEY (<span class="codeinlineitalic">ColumnName</span> [,...])] 
      [UNIQUE HASH ON (<span class="italic">HashColumnName</span> [,...]) PAGES = <span class="codeinlineitalic">PrimaryPages</span>]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1314"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for CREATE MATERIALIZED VIEW." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t28">Parameter</th>
<th class="cellalignment6331" id="r1c2-t28">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t28" headers="r1c1-t28"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">ViewName</span></code></td>
<td class="cellalignment6332" headers="r2c1-t28 r1c2-t28">Name assigned to the new view.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t28" headers="r1c1-t28"><code dir="ltr">REFRESH</code></td>
<td class="cellalignment6332" headers="r3c1-t28 r1c2-t28">Specifies an asynchronous materialized view.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t28" headers="r1c1-t28"><code dir="ltr">FAST | COMPLETE</code></td>
<td class="cellalignment6332" headers="r4c1-t28 r1c2-t28">Refresh methods. <code dir="ltr">FAST</code> specifies incremental refresh. <code dir="ltr">COMPLETE</code> specifies full refresh.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t28" headers="r1c1-t28"><code dir="ltr">NEXT SYSDATE</code></td>
<td class="cellalignment6332" headers="r5c1-t28 r1c2-t28">If <code dir="ltr">NEXT SYSDATE</code> is specified without <code dir="ltr">NUMTODSINTERVAL</code>, the materialized view is refreshed incrementally every time a detail table is modified. The refresh occurs in a separate transaction immediately after the transaction that modifies the detail table has been committed. You cannot specify a full refresh (<code dir="ltr">COMPLETE</code>) every time a detail table is modified.
<p>If <code dir="ltr">NEXT SYSDATE</code> is omitted, then the materialized view will not be refreshed automatically. It must be refreshed manually.</p>
<p>If <code dir="ltr">NEXT SYSDATE</code> is provided without <code dir="ltr">FAST</code> or <code dir="ltr">COMPLETE</code> specified, <code dir="ltr">COMPLETE</code> is the default refresh method.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t28" headers="r1c1-t28">
<pre dir="ltr">[+NUMTODSINTERVAL(<span class="italic">IntegerLiteral</span>,
<span class="italic">IntervalUnit</span>)]
</pre></td>
<td class="cellalignment6332" headers="r6c1-t28 r1c2-t28">If specified, the materialized view is refreshed at the specified interval. <code dir="ltr"><span class="codeinlineitalic">IntegerLiteral</span></code> must be an integer. <code dir="ltr"><span class="codeinlineitalic">IntervalUnit</span></code> must be one of the following values: <code dir="ltr">&#39;DAY&#39;</code>, <code dir="ltr">&#39;HOUR&#39;</code>, <code dir="ltr">&#39;MINUTE&#39;</code>, <code dir="ltr">&#39;SECOND&#39;</code>.
<p>If <code dir="ltr">[NEXT SYSDATE[+NUMTODSINTERVAL(</code><code dir="ltr"><span class="codeinlineitalic">IntegerLiteral</span></code><code dir="ltr">),</code><code dir="ltr"><span class="codeinlineitalic">IntervalUnit</span></code><code dir="ltr">]</code> is not specified, the materialized view is not refreshed automatically. You can manually refresh the view by using the <code dir="ltr"><a href="#BABEHIEA">REFRESH MATERIALIZED VIEW</a></code> statement.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r7c1-t28" headers="r1c1-t28"><code dir="ltr"><span class="codeinlineitalic">SelectQuery</span></code></td>
<td class="cellalignment6332" headers="r7c1-t28 r1c2-t28">Select column from the detail tables to be used in the view.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r8c1-t28" headers="r1c1-t28"><code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code></td>
<td class="cellalignment6332" headers="r8c1-t28 r1c2-t28">Name of the column(s) that forms the primary key for the view to be created. Up to 16 columns can be specified for the primary key. Each result column name of a viewed table must be unique. The column name definition cannot contain the table or owner component.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r9c1-t28" headers="r1c1-t28"><code dir="ltr">UNIQUE HASH ON</code></td>
<td class="cellalignment6332" headers="r9c1-t28 r1c2-t28">H<a id="sthref1315"></a><a id="sthref1316"></a>ash index for the table. Only unique hash indexes are created. This parameter is used for equality predicates. <code dir="ltr">UNIQUE HASH ON</code> requires that a primary key be defined.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r10c1-t28" headers="r1c1-t28"><code dir="ltr"><span class="codeinlineitalic">HashColumnName</span></code></td>
<td class="cellalignment6332" headers="r10c1-t28 r1c2-t28">Column defined in the view that is to participate in the hash key of this table. The columns specified in the hash index must be identical to the columns in the primary key.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r11c1-t28" headers="r1c1-t28"><code dir="ltr">PAGES</code> = <code dir="ltr"><span class="codeinlineitalic">PrimaryPages</span></code></td>
<td class="cellalignment6332" headers="r11c1-t28 r1c2-t28">Sizes the hash index to reflect the expected number of pages in your table. To determine the value for <code dir="ltr"><span class="codeinlineitalic">PrimaryPages</span></code>, divide the number of expected rows in your table by 256. For example, if your table has 256,000 rows, specify 1000 for <code dir="ltr"><span class="codeinlineitalic">PrimaryPages</span></code> (256000/256=1000).
<p>The value for <code dir="ltr"><span class="codeinlineitalic">PrimaryPages</span></code> must be a positive constant and must be greater than 0.</p>
<p>If your estimate for <code dir="ltr"><span class="codeinlineitalic">PrimaryPages</span></code> is too small, performance may be degraded.</p>
<p>For more information on hash indexes, see <a href="#i1211666">&#34;CREATE TABLE&#34;</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1317"></a>Description</p>
<p>This section describes restrictions, requirements, and other considerations for materialized views, covering the following topics:</p>
<ul>
<li>
<p><a href="#BABGIHAG">Restrictions and requirements for materialized views</a></p>
</li>
<li>
<p><a href="#BABIBBAE">Additional considerations for materialized views</a></p>
</li>
<li>
<p><a href="#BABJAJAJ">Invalid materialized views</a></p>
</li>
</ul>
<p class="subhead2"><a id="BABGIHAG"></a><a id="TTSQL542"></a>Restrictions and requirements for materialized views</p>
<p>The following restrictions and requirements on the defining query apply generally to materialized views, whether synchronous or asynchronous. (In some cases there are further restrictions for asynchronous materialized views with <code dir="ltr">FAST</code> refresh, as noted.)</p>
<ul>
<li>
<p>Each expression in the select list must have a unique name.</p>
</li>
<li>
<p>Do not use non-materialized views to define a materialized view.</p>
</li>
<li>
<p>Do not define <code dir="ltr">CLOB</code>, <code dir="ltr">BLOB</code>, or <code dir="ltr">NCLOB</code> data types for columns in the select list of the materialized view query.</p>
</li>
<li>
<p>The detail tables cannot belong to a cache group and the detail tables cannot have compression.</p>
</li>
<li>
<p>Do not use <code dir="ltr">SELECT</code> <code dir="ltr">FOR</code> <code dir="ltr">UPDATE</code>.</p>
</li>
<li>
<p>Do not reference system tables or views.</p>
</li>
<li>
<p>Do not use nested definitions for a materialized view.</p>
</li>
<li>
<p>Do not use dynamic parameters.</p>
</li>
<li>
<p>Do not use <code dir="ltr">ROWNUM</code>.</p>
</li>
<li>
<p>Do not use analytic functions.</p>
</li>
<li>
<p>Do not use <code dir="ltr">GROUPING</code> <code dir="ltr">SETS</code>, <code dir="ltr">ROLLUP</code>, or <code dir="ltr">CUBE</code>.</p>
</li>
<li>
<p>Do not use the <code dir="ltr">SYSDATE</code> function.</p>
</li>
<li>
<p>Do not use the functions <code dir="ltr">SYSTEM_USER</code>, <code dir="ltr">USER</code>, <code dir="ltr">CURRENT_USER</code>, or <code dir="ltr">SESSION_USER</code>.</p>
</li>
<li>
<p>Do not use <code dir="ltr">NEXTVAL</code> or <code dir="ltr">CURRVAL</code>.</p>
</li>
<li>
<p>Outer joins are allowed but the select list must project at least one non-nullable column from each of the inner tables specified in the outer join.</p>
<p><span class="bold">Note</span>: Outer joins are not allowed for asynchronous materialized views with <code dir="ltr">FAST</code> refresh.</p>
</li>
<li>
<p>Do not use the <code dir="ltr">WITH</code> <code dir="ltr"><span class="codeinlineitalic">subquery</span></code> clause.</p>
</li>
</ul>
<p>The following restrictions (not on the defining query) apply generally to materialized views, whether synchronous or asynchronous.</p>
<ul>
<li>
<p>Do not have a hash-based primary key that contains any aggregate columns of the materialized view.</p>
</li>
<li>
<p>A materialized view cannot be replicated directly using TimesTen replication. You can replicate the detail tables. You must define the same materialized view on both sides of replication. TimesTen automatically updates the corresponding materialized views.</p>
</li>
<li>
<p>You cannot define a foreign key if the referencing or referenced table is a materialized view.</p>
</li>
</ul>
<p>The following restrictions and requirements on the defining query apply to synchronous materialized views and to asynchronous materialized views with <code dir="ltr">FAST</code> refresh. (In some cases there are further restrictions for asynchronous materialized views with <code dir="ltr">FAST</code> refresh, as noted.)</p>
<ul>
<li>
<p>The view definition must include all columns in the group by list in the select list.</p>
</li>
<li>
<p>An aggregate view must include a <code dir="ltr">COUNT (*)</code> or <code dir="ltr">COUNT</code> (non-nullable column) in the select list.</p>
</li>
<li>
<p>Do not use derived tables or <code dir="ltr">JOIN</code> tables.</p>
</li>
<li>
<p>Do not use <code dir="ltr">SELECT</code> <code dir="ltr">DISTINCT</code> or an aggregate distinct function.</p>
<p><span class="bold">Note</span>: Aggregate functions are not allowed for asynchronous materialized views with <code dir="ltr">FAST</code> refresh.</p>
</li>
<li>
<p>Do not use the set operators <code dir="ltr">UNION</code>, <code dir="ltr">MINUS</code>, or <code dir="ltr">INTERSECT</code>.</p>
</li>
<li>
<p>Do not use <code dir="ltr">SUM</code> of nullable expressions.</p>
</li>
<li>
<p>Use only simple columns as group by columns.</p>
</li>
<li>
<p>Group by columns cannot belong to self join tables.</p>
</li>
<li>
<p>Do not use these clauses:</p>
<ul>
<li>
<p><code dir="ltr">HAVING</code></p>
</li>
<li>
<p><code dir="ltr">ORDER</code> <code dir="ltr">BY</code></p>
</li>
<li>
<p><code dir="ltr">DISTINCT</code></p>
</li>
<li>
<p><code dir="ltr">FIRST</code></p>
</li>
<li>
<p><code dir="ltr">JOIN</code></p>
</li>
</ul>
</li>
<li>
<p>Do not use the <code dir="ltr">TT_HASH</code> function.</p>
</li>
<li>
<p>You can use <code dir="ltr">SUM</code> and <code dir="ltr">COUNT</code> but do not use expressions involving <code dir="ltr">SUM</code> and <code dir="ltr">COUNT</code>. Do not use <code dir="ltr">AVG</code>, which is treated as <code dir="ltr">SUM/COUNT</code>.</p>
</li>
<li>
<p>Do not specify <code dir="ltr">MIN</code> or <code dir="ltr">MAX</code> functions in the select list.</p>
</li>
<li>
<p>For joins:</p>
<ul>
<li>
<p>Join predicates cannot have an <code dir="ltr">OR</code>.</p>
</li>
<li>
<p>Do not specify Cartesian product joins (joins with no join predicate).</p>
</li>
<li>
<p>For outer joins, outer join each inner table with at most one table.</p>
<p><span class="bold">Note</span>: Outer joins are not allowed for asynchronous materialized views with <code dir="ltr">FAST</code> refresh.</p>
</li>
</ul>
</li>
</ul>
<p>The following restrictions on the defining query apply only to asynchronous materialized views with <code dir="ltr">FAST</code> refresh.</p>
<ul>
<li>
<p>Aggregate functions are not supported</p>
</li>
<li>
<p>Outer joins are not supported.</p>
</li>
<li>
<p>The select list must include the <code dir="ltr">ROWID</code> or the primary key columns for all the detail tables.</p>
</li>
</ul>
<p>The following restrictions (not on the defining query) apply only to asynchronous materialized views with <code dir="ltr">FAST</code> refresh.</p>
<ul>
<li>
<p>The materialized view log must be created for each detail table in the asynchronous material view with <code dir="ltr">FAST</code> refresh before creating the asynchronous materialized view.</p>
</li>
<li>
<p>The materialized view log must include all the columns used in the asynchronous materialized views.</p>
</li>
</ul>
<p class="subhead2"><a id="BABIBBAE"></a><a id="TTSQL543"></a>Additional considerations for materialized views</p>
<p>The following additional considerations apply generally to materialized views, whether synchronous or asynchronous.</p>
<ul>
<li>
<p>A materialized view is read-only and cannot be updated directly. A materialized view is updated only when changes are made to the associated detail tables. Therefore a materialized view cannot be the target of a <code dir="ltr"><a href="#BABBJCCI">DELETE</a></code>, <code dir="ltr"><a href="#i994046">UPDATE</a></code> or <code dir="ltr"><a href="#g1513888">INSERT</a></code> statement.</p>
</li>
<li>
<p>By default, a range index is created to enforce the primary key for a materialized view. Alternatively, use the <code dir="ltr">UNIQUE HASH</code> clause to specify a hash index for the primary key.</p>
<ul>
<li>
<p>If your application performs range queries over a materialized view&#39;s primary key, then choose a range index for that view by omitting the <code dir="ltr">UNIQUE HASH</code> clause.</p>
</li>
<li>
<p>If your application performs only exact match lookups on the primary key, then a hash index may offer better response time and throughput. In such a case, specify the <code dir="ltr">UNIQUE HASH</code> clause. See <a href="#i1211666">&#34;CREATE TABLE&#34;</a> for more information about the <code dir="ltr">UNIQUE HASH</code> clause.</p>
</li>
</ul>
</li>
<li>
<p>You can use <code dir="ltr"><a href="#i1407906">ALTER TABLE</a></code> to change the representation of the primary key index or resize a hash index of a materialized view.</p>
</li>
<li>
<p>You cannot add or drop columns in the materialized view with the <code dir="ltr"><a href="#i1407906">ALTER TABLE</a></code> statement. To change the structure of the materialized view, drop and recreate the view.</p>
</li>
<li>
<p>You can create indexes on the materialized view with the <code dir="ltr">CREATE INDEX</code> SQL statement.</p>
</li>
</ul>
<p>The following additional considerations apply only to asynchronous materialized views.</p>
<ul>
<li>
<p>If <code dir="ltr">REFRESH</code> is specified, at least one of the refresh options (<code dir="ltr">FAST</code> or <code dir="ltr">COMPLETE</code>) or the refresh interval (<code dir="ltr">NEXT SYSDATE</code>) must be specified. (If you omit <code dir="ltr">REFRESH</code>, the materialized view is updated synchronously.)</p>
</li>
<li>
<p>If you create an asynchronous materialized view with <code dir="ltr">REFRESH FAST</code>, it is recommended that you update the statistics on the materialized view log, materialized view and the base table on which the materialized view is created to increase the performance for the base table and updates on the materialized view.</p>
</li>
<li>
<p>For an asynchronous materialized view with <code dir="ltr">FAST</code> refresh, TimesTen creates a unique index that is refreshed incrementally. The index is created on the primary key or rowid of the detail tables included in the select list.</p>
</li>
</ul>
<p class="subhead2"><a id="BABJAJAJ"></a><a id="TTSQL434"></a><a id="sthref1318"></a><a id="sthref1319"></a>Invalid materialized views</p>
<p>The owner of a materialized view must have the <code dir="ltr">SELECT</code> privilege on its detail tables. The <code dir="ltr">SELECT</code> privilege is implied by the <code dir="ltr">SELECT ANY TABLE</code> and <code dir="ltr">ADMIN</code> system privileges. When the <code dir="ltr">SELECT</code> privilege or a higher-level system privilege on the detail tables is revoked from the owner of the materialized view, the materialized view becomes <span class="italic">invalid</span>.</p>
<p>You can select from an invalid asynchronous materialized view. Refreshing an invalid asynchronous materialized view fails with an error.</p>
<p>Selecting from an invalid synchronous materialized view fails with an error. Updates to the detail tables of an invalid synchronous materialized view do not update the materialized view.</p>
<p>You can identify invalid materialized views by using the <code dir="ltr">ttIsql describe</code> command and by inspecting the <code dir="ltr">STATUS</code> column of the <code dir="ltr">SYS.DBA_OBJECTS</code>, <code dir="ltr">SYS.ALL_OBJECTS</code> or <code dir="ltr">SYS.USER_OBJECTS</code> system tables. See <a class="olink TTSYS" href="../TTSYS/toc.htm"><span class="italic">Oracle TimesTen In-Memory Database System Tables and Views Reference</span></a>.</p>
<p>If the revoked privilege is restored, you can make an invalid materialized view valid again by:</p>
<ul>
<li>
<p>Dropping and then recreating the materialized view.</p>
</li>
<li>
<p>Refreshing an invalid asynchronous materialized view if it was originally specified with complete refreshes.</p>
</li>
</ul>
<p>For more information, see <a class="olink TTOPR262" href="../TTOPR/accesscontrol.htm#TTOPR262">&#34;Object privileges for materialized views&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1320"></a>Examples</p>
<p>Create a materialized view of columns from the <code dir="ltr">customer</code> and <code dir="ltr">bookorder</code> tables.</p>
<pre dir="ltr">CREATE MATERIALIZED VIEW custorder AS
  SELECT custno, custname, ordno, book
    FROM customer, bookorder
    WHERE customer.custno=bookorder.custno;
</pre>
<p>Create a materialized view of columns <code dir="ltr">x1</code> and <code dir="ltr">y1</code> from the <code dir="ltr">t1</code> table.</p>
<pre dir="ltr">CREATE MATERIALIZED VIEW v1 AS SELECT x1, y1 FROM t1
  PRIMARY KEY (x1) UNIQUE HASH (x1) PAGES=100;
</pre>
<p>Create a materialized view from an outer join of columns <code dir="ltr">x1</code> and <code dir="ltr">y1</code> from the <code dir="ltr">t1</code> and <code dir="ltr">t2</code> tables.</p>
<pre dir="ltr">CREATE MATERIALIZED VIEW v2 AS SELECT x1, y1 FROM t1, t2
  WHERE x1=x2(+);
</pre>
<p>Create an asynchronous materialized view called <code dir="ltr">empmatview</code> with incremental refresh. The materialized view will be refreshed immediately after updates to <code dir="ltr">employees</code> have been committed. The columns in <code dir="ltr">empmatview</code> are <code dir="ltr">employee_id</code> and <code dir="ltr">email</code>. You must create a materialized view log before you create an asynchronous materialized view.</p>
<pre dir="ltr">CREATE MATERALIZED VIEW empmatview 
  REFRESH FAST NEXT SYSDATE 
  AS SELECT employee_id, email FROM employees;
107 rows materialized.
</pre>
<p>Create an asynchronous materialized view called <code dir="ltr">empmatview1</code> with complete refresh. A full refresh of the materialized view occurs every 10 days. The columns in <code dir="ltr">empmatview</code> are <code dir="ltr">employee_id</code> and <code dir="ltr">email</code>. You must create a materialized view log before you create an asynchronous materialized view.</p>
<pre dir="ltr">CREATE MATERIALIZED VIEW empmatview1
    REFRESH COMPLETE NEXT SYSDATE+NUMTODSINTERVAL(10,&#39;day&#39;)
    AS SELECT employee_id, email FROM employees;
107 rows materialized.
</pre>
<p>The following example creates a materialized view <code dir="ltr">empmatview2</code> based on selected columns <code dir="ltr">employee_id</code> and <code dir="ltr">email</code> from table <code dir="ltr">employees</code>. After the materialized view is created, create an index on the materialized view column <code dir="ltr">mvemp_id</code> of the materialized view <code dir="ltr">empmatview2</code>.</p>
<pre dir="ltr">CREATE MATERIALIZED VIEW empmatview2
   AS SELECT employee_id mvemp_id, email mvemail 
         FROM employees;
107 rows materialized. 

CREATE INDEX empmvindex ON empmatview2 (mvemp_id);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1321"></a>See also</p>
<br/>
<code dir="ltr"><a href="#BABBFEFI">CREATE MATERIALIZED VIEW LOG</a></code><br/>
<code dir="ltr"><a href="#i1211666">CREATE TABLE</a></code><br/>
<code dir="ltr"><a href="#i992961">CREATE VIEW</a></code><br/>
<code dir="ltr"><a href="#g1513833">DROP VIEW</a></code><br/>
<code dir="ltr"><a href="#BABEHIEA">REFRESH MATERIALIZED VIEW</a></code></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABBFEFI"></a>
<div id="TTSQL294" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref1322"></a><a id="sthref1323"></a>CREATE MATERIALIZED VIEW LOG</h2>
<p>The <code dir="ltr">CREATE MATERIALIZED VIEW LOG</code> statement creates a log in which changes to the detail table are recorded. The log is required for an asynchronous materialized view that is refreshed incrementally. The log must be created before the materialized view is created. The log is a table in the user&#39;s schema called <code dir="ltr">MVLOG$_</code><code dir="ltr"><span class="codeinlineitalic">detailTableID</span></code>, where <code dir="ltr"><span class="codeinlineitalic">detailTableID</span></code> is a system-generated ID.</p>
<p>This statement also creates other objects for internal use:</p>
<ul>
<li>
<p>A global temporary table called <code dir="ltr">MVLGT$_</code><code dir="ltr"><span class="codeinlineitalic">detailTableID</span></code></p>
</li>
<li>
<p>A sequence called <code dir="ltr">MVSEQ$_</code><code dir="ltr"><span class="codeinlineitalic">detailTableID</span></code></p>
</li>
</ul>
<p>The objects are dropped when the <code dir="ltr"><a href="#BABEAIJC">DROP MATERIALIZED VIEW LOG</a></code> statement is executed.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1324"></a>Required privilege</p>
<p><code dir="ltr">SELECT</code> on the detail table <span class="italic">and</span></p>
<p><code dir="ltr">CREATE TABLE</code> or <code dir="ltr">CREATE ANY TABLE</code> (if not owner).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1325"></a>SQL syntax</p>
<pre dir="ltr">CREATE MATERIALIZED VIEW LOG ON [<span class="italic">Owner</span>.]<span class="italic">TableName</span>
  [ WITH 
       { PRIMARY KEY[, ROWID] | 
         ROWID[, PRIMARY KEY } [(<span class="italic">columnName</span>[,...])] 
       | (<span class="italic">columnName</span>[,...])
  ]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1326"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table has descriptions of the parameters for CREATE MATERIALIZED VIEW LOG." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t29">Parameter</th>
<th class="cellalignment6331" id="r1c2-t29">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t29" headers="r1c1-t29"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">TableName</span></code></td>
<td class="cellalignment6332" headers="r2c1-t29 r1c2-t29">Name of the detail table for the materialized view.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t29" headers="r1c1-t29"><code dir="ltr">[(</code><code dir="ltr"><span class="codeinlineitalic">columnName</span></code><code dir="ltr">[,...])</code></td>
<td class="cellalignment6332" headers="r3c1-t29 r1c2-t29">List of columns for which changes will be recorded in the log. You cannot include the primary key columns in the column list when you specify the <code dir="ltr">PRIMARY KEY</code> option.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1327"></a>Description</p>
<ul>
<li>
<p>Use the <code dir="ltr">WITH</code> clause to indicate in the materialized view log which rows have been updated in the detail table. Updated rows can be indicated either by corresponding primary key value or by rowid.</p>
<ul>
<li>
<p>Specify either <code dir="ltr">PRIMARY KEY</code> or <code dir="ltr">ROWID</code> in the <code dir="ltr">WITH</code> clause. However, if the <code dir="ltr">WITH</code> clause is specified without either option, it defaults to <code dir="ltr">PRIMARY KEY</code>. In addition, the materialized view log defaults to use <code dir="ltr">PRIMARY KEY</code> if the <code dir="ltr">WITH</code> clause is omitted altogether.</p>
</li>
<li>
<p>Specify <code dir="ltr">PRIMARY KEY</code> to identify changed rows by the corresponding primary key value. Alternatively, specify <code dir="ltr">ROWID</code> to identify changed rows by rowid. The <code dir="ltr">ROWID</code> option is useful when the table does not have a primary key or when you do not want to use the primary key when you create the materialized view.</p>
</li>
<li>
<p>You can specify both <code dir="ltr">PRIMARY KEY</code> and <code dir="ltr">ROWID</code>. The materialized view log may be used by more than one asynchronous materialized view using the specified table as the detail table. However, you can only specify one <code dir="ltr">PRIMARY KEY</code> clause, one <code dir="ltr">ROWID</code> clause and one column list for a materialized view log.</p>
</li>
</ul>
</li>
<li>
<p>Only one materialized view log is created for a table, even if the table is the detail table for more than one materialized view with <code dir="ltr">FAST</code> refreshes. Make sure to include all the columns that are used in different asynchronous materialized views with <code dir="ltr">FAST</code> refresh.</p>
</li>
<li>
<p>A materialized view log cannot be created using a materialized view as the table or for tables in cache groups.</p>
</li>
<li>
<p>A materialized view log cannot be altered to add or drop columns.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1328"></a>Examples</p>
<p>Create a materialized view log on the <code dir="ltr">employees</code> table. Include <code dir="ltr">employee_id</code> (the primary key) and <code dir="ltr">email</code> in the log.</p>
<pre dir="ltr">CREATE MATERIALIZED VIEW LOG ON employees WITH PRIMARY KEY (email);
</pre></div>
<!-- class="refsubsect" -->
<p>You can create the same materialized view log on the employees table without specifying <code dir="ltr">PRIMARY KEY</code>, which is the default and so is implied, as follows.</p>
<pre dir="ltr">CREATE MATERIALIZED  VIEW LOG ON employees WITH (email);
</pre>
<p>To create a materialized view log on the employees table with only the primary key, execute the following.</p>
<pre dir="ltr">CREATE MATERIALIZED VIEW LOG ON employees;
</pre>
<p>Create a materialized view log on the <code dir="ltr">employees</code> table. Include <code dir="ltr">employee_id</code> (the primary key) and rowid in the log.</p>
<pre dir="ltr">Command&gt; CREATE MATERIALIZED VIEW LOG ON employees WITH primary key, rowid;
</pre>
<p>Create a materialized view log on the <code dir="ltr">employees</code> table. Include rowid in the log.</p>
<pre dir="ltr">Command&gt; CREATE MATERIALIZED VIEW LOG ON employees WITH rowid;
</pre>
<p>Create a materialized view log on the <code dir="ltr">employees</code> table. Include rowid, primary key (<code dir="ltr">employee_id</code>) and <code dir="ltr">email</code> in the log.</p>
<pre dir="ltr">Command&gt; CREATE MATERIALIZED VIEW LOG ON employees WITH rowid, primary key (email);
</pre>
<p>Create a materialized view log on the <code dir="ltr">employees</code> table. Include primary key, by default), and two other columns of <code dir="ltr">email</code> and <code dir="ltr">last_name</code> in the log.</p>
<pre dir="ltr">Command&gt; CREATE MATERIALIZED VIEW LOG ON employees WITH (email, last_name);
</pre>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1329"></a>See also</p>
<br/>
<code dir="ltr"><a href="#i1075286">CREATE MATERIALIZED VIEW</a></code><br/>
<code dir="ltr"><a href="#BABEAIJC">DROP MATERIALIZED VIEW LOG</a></code></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDGJEGG"></a>
<div id="TTSQL295" class="refsect1">
<h2 class="refsect1"><a id="sthref1330"></a><a id="sthref1331"></a><a id="sthref1332"></a>CREATE PACKAGE</h2>
<p>The <code dir="ltr">CREATE PACKAGE</code> statement creates the specification for a standalone package, which is an encapsulated collection of related procedures, functions, and other program objects stored together in your database. The package specification declares these objects. The package body defines these objects.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1333"></a>Required privilege</p>
<p><code dir="ltr">CREATE PROCEDURE</code> (if owner) or <code dir="ltr">CREATE ANY PROCEDURE</code> (if not owner).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1334"></a>SQL syntax</p>
<pre dir="ltr">CREATE [OR REPLACE] PACKAGE [<span class="italic">Owner</span>.]<span class="italic">PackageName</span><span class="codeinlineitalic"> </span>
      [<span class="codeinlineitalic">InvokerRightsClause</span>] {IS|AS}
      <span class="italic">PlsqlPackageSpec</span>
</pre>
<p>The syntax for the <code dir="ltr"><span class="codeinlineitalic">InvokerRightsClause</span></code>:</p>
<pre dir="ltr">AUTHID {CURRENT_USER | DEFINER}
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1335"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for CREATE MATERIALIZED VIEW." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t30">Parameter</th>
<th class="cellalignment6331" id="r1c2-t30">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t30" headers="r1c1-t30"><code dir="ltr">OR REPLACE</code></td>
<td class="cellalignment6332" headers="r2c1-t30 r1c2-t30">Specify <code dir="ltr">OR REPLACE</code> to recreate the package specification if it already exists. Use this clause to change the specification of an existing package without dropping and recreating the package. When you change a package specification, TimesTen recompiles it.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t30" headers="r1c1-t30"><code dir="ltr"><span class="codeinlineitalic">PackageName</span></code></td>
<td class="cellalignment6332" headers="r3c1-t30 r1c2-t30">Name of the package.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t30" headers="r1c1-t30"><code dir="ltr"><span class="codeinlineitalic">InvokerRightsClause</span></code></td>
<td class="cellalignment6332" headers="r4c1-t30 r1c2-t30">Lets you specify whether the SQL statements in PL/SQL functions or procedures execute with definer&#39;s or invoker&#39;s rights. The <code dir="ltr">AUTHID</code> setting affects the name resolution and privilege checking of SQL statements that a PL/SQL procedure or function issues at runtime, as follows:
<ul>
<li>
<p>Specify <code dir="ltr">DEFINER</code> so that SQL name resolution and privilege checking operate as though the owner of the procedure or function (the definer, in whose schema it resides) is running it. <code dir="ltr">DEFINER</code> is the default.</p>
</li>
<li>
<p>Specify <code dir="ltr">CURRENT_USER</code> so that SQL name resolution and privilege checking operate as though the current user (the invoker) is running it.</p>
</li>
</ul>
<p>For more information, see <a class="olink TTPLS274" href="../TTPLS/accesscntl.htm#TTPLS274">&#34;Definer&#39;s rights and invoker&#39;s rights&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database PL/SQL Developer&#39;s Guide</span>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t30" headers="r1c1-t30"><code dir="ltr">IS|AS</code></td>
<td class="cellalignment6332" headers="r5c1-t30 r1c2-t30">Specify either <code dir="ltr">IS</code> or <code dir="ltr">AS</code> to declare the body of the function.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t30" headers="r1c1-t30"><code dir="ltr"><span class="codeinlineitalic">PlsqlPackageSpec</span></code></td>
<td class="cellalignment6332" headers="r6c1-t30 r1c2-t30">Specifies the package specification. Can include type definitions, cursor declarations, variable declarations, constant declarations, exception declarations and PL/SQL subprogram declarations.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1336"></a>Description</p>
<p>In a replicated environment, the <code dir="ltr">CREATE PACKAGE</code> statement is not replicated. For more information, see <a class="olink TTREP744" href="../TTREP/alterpair.htm#TTREP744">&#34;Creating a new PL/SQL object in an existing active standby pair&#34;</a> and <a class="olink TTREP745" href="../TTREP/alter.htm#TTREP745">&#34;Adding a PL/SQL object to an existing classic replication scheme&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span>.</p>
<p>When you create or replace a package, the privileges granted on the package remain the same. If you drop and recreate the object, the object privileges that were granted on the original object are revoked.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1337"></a>See also</p>
<p><a class="olink LNPLS" href="../LNPLS/toc.htm"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> and <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACBHAEB"></a>
<div id="TTSQL296" class="refsect1">
<h2 class="refsect1"><a id="sthref1338"></a><a id="sthref1339"></a><a id="sthref1340"></a>CREATE PACKAGE BODY</h2>
<p>The <code dir="ltr">CREATE PACKAGE BODY</code> statement creates the body of a standalone package. A package is an encapsulated collection of related procedures, functions, and other program objects stored together in your database. A package specification declares these objects. A package body defines these objects.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1341"></a>Required privilege</p>
<p><code dir="ltr">CREATE PROCEDURE</code> (if owner) or <code dir="ltr">CREATE ANY PROCEDURE</code> (if not owner).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1342"></a>SQL syntax</p>
<pre dir="ltr">CREATE [OR REPLACE] PACKAGE BODY [<span class="italic">Owner</span>.]<span class="italic">PackageBody </span>
      {IS|AS} <span class="italic">plsql_package_body</span>
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1343"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for CREATE MATERIALIZED VIEW." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t31">Parameter</th>
<th class="cellalignment6331" id="r1c2-t31">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t31" headers="r1c1-t31"><code dir="ltr">OR REPLACE</code></td>
<td class="cellalignment6332" headers="r2c1-t31 r1c2-t31">Specify <code dir="ltr">OR REPLACE</code> to recreate the package body if it already exists. Use this clause to change the body of an existing package without dropping and recreating it. When you change a package body, TimesTen recompiles it.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t31" headers="r1c1-t31"><code dir="ltr"><span class="codeinlineitalic">PackageBody</span></code></td>
<td class="cellalignment6332" headers="r3c1-t31 r1c2-t31">Name of the package body.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t31" headers="r1c1-t31"><code dir="ltr">IS|AS</code></td>
<td class="cellalignment6332" headers="r4c1-t31 r1c2-t31">Specify either <code dir="ltr">IS</code> or <code dir="ltr">AS</code> to declare the body of the function.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t31" headers="r1c1-t31"><code dir="ltr"><span class="codeinlineitalic">plsql_package_body</span></code></td>
<td class="cellalignment6332" headers="r5c1-t31 r1c2-t31">Specifies the package body which consists of PL/SQL subprograms.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1344"></a>Description</p>
<p>In a replicated environment, the <code dir="ltr">CREATE PACKAGE BODY</code> statement is not replicated. For more information, see <a class="olink TTREP744" href="../TTREP/alterpair.htm#TTREP744">&#34;Creating a new PL/SQL object in an existing active standby pair&#34;</a> and <a class="olink TTREP745" href="../TTREP/alter.htm#TTREP745">&#34;Adding a PL/SQL object to an existing classic replication scheme&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span>.</p>
<p>When you create or replace a package body, the privileges granted on the package body remain the same. If you drop and recreate the object, the object privileges that were granted on the original object are revoked.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1345"></a>See also</p>
<br/>
<a class="olink LNPLS" href="../LNPLS/toc.htm"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> and <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACCAHCB"></a>
<div id="TTSQL297" class="refsect1">
<h2 class="refsect1"><a id="sthref1346"></a><a id="sthref1347"></a><a id="sthref1348"></a>CREATE PROCEDURE</h2>
<p>The <code dir="ltr">CREATE PROCEDURE</code> statement creates a standalone stored procedure.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1349"></a>Required privilege</p>
<p><code dir="ltr">CREATE PROCEDURE</code> (if owner) or <code dir="ltr">CREATE ANY PROCEDURE</code> (if not owner).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1350"></a>SQL syntax</p>
<pre dir="ltr">CREATE [OR REPLACE] PROCEDURE [<span class="italic">Owner</span>.]<span class="italic">ProcedureName</span><span class="codeinlineitalic"> </span>
     [(<span class="italic">arguments</span> [IN|OUT|IN OUT][NOCOPY] <span class="italic">DataType</span> [DEFAULT <span class="italic">expr</span>][,...])]
     [<span class="codeinlineitalic">InvokerRightsClause</span>] [DETERMINISTIC]
     {IS|AS} <span class="italic">plsql_procedure_body</span>
</pre>
<p>The syntax for the <code dir="ltr"><span class="codeinlineitalic">InvokerRightsClause</span></code>:</p>
<pre dir="ltr">AUTHID {CURRENT_USER|DEFINER}
</pre>
<p>You can specify <code dir="ltr"><span class="codeinlineitalic">InvokerRightsClause</span></code> or <code dir="ltr">DETERMINISTIC</code> in any order.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1351"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for CREATE MATERIALIZED VIEW." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t32">Parameter</th>
<th class="cellalignment6331" id="r1c2-t32">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t32" headers="r1c1-t32"><code dir="ltr">OR REPLACE</code></td>
<td class="cellalignment6332" headers="r2c1-t32 r1c2-t32">Specify <code dir="ltr">OR REPLACE</code> to recreate the procedure if it already exists. Use this clause to change the definition of an existing procedure without dropping and recreating it. When you recreate a procedure, TimesTen recompiles it.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t32" headers="r1c1-t32"><code dir="ltr"><span class="codeinlineitalic">ProcedureName</span></code></td>
<td class="cellalignment6332" headers="r3c1-t32 r1c2-t32">Name of procedure.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t32" headers="r1c1-t32"><code dir="ltr"><span class="codeinlineitalic">arguments</span></code></td>
<td class="cellalignment6332" headers="r4c1-t32 r1c2-t32">Name of argument/parameter. You can specify 0 or more parameters for the procedure. If you specify a parameter, you must specify a data type for the parameter. The data type must be a PL/SQL data type.
<p>For more information on PL/SQL data types, see <a class="olink LNPLS003" href="../LNPLS/datatypes.htm#LNPLS003">Chapter 3, &#34;PL/SQL Data Types&#34;</a> in the <span class="italic">Oracle Database PL/SQL Language Reference</span>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t32" headers="r1c1-t32"><code dir="ltr">[IN | OUT | IN OUT]</code></td>
<td class="cellalignment6332" headers="r5c1-t32 r1c2-t32">Parameter modes.
<p><code dir="ltr">IN</code> is a read-only parameter. You can pass the parameter&#39;s value into the procedure but the procedure cannot pass the parameter&#39;s value out of the procedure and back to the calling PL/SQL block.The value of the parameter cannot be changed.</p>
<p><code dir="ltr">OUT</code> is a write-only parameter. Use an <code dir="ltr">OUT</code> parameter to pass a value back from the procedure to the calling PL/SQL block. You can assign a value to the parameter.</p>
<p><code dir="ltr">IN OUT</code> is a read/write parameter. You can pass values into the procedure and return a value back to the calling program (either the original, unchanged value or a new value set within the procedure.</p>
<p><code dir="ltr">IN</code> is the default.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t32" headers="r1c1-t32"><code dir="ltr">NOCOPY</code></td>
<td class="cellalignment6332" headers="r6c1-t32 r1c2-t32">Specify <code dir="ltr">NOCOPY</code> to instruct TimesTen to pass the parameter as fast as possible. Can enhance performance when passing a large value such as a record, an index-by-table, or a varray to an <code dir="ltr">OUT</code> or <code dir="ltr">IN OUT</code> parameter. <code dir="ltr">IN</code> parameters are always passed <code dir="ltr">NOCOPY</code>.
<p>See <a class="olink LNPLS1573" href="../LNPLS/function.htm#LNPLS1573">&#34;NOCOPY&#34;</a> in <span class="italic">Oracle Database PL/SQL Language Reference</span> for additional information.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r7c1-t32" headers="r1c1-t32"><code dir="ltr">DEFAULT</code> <code dir="ltr"><span class="codeinlineitalic">expr</span></code></td>
<td class="cellalignment6332" headers="r7c1-t32 r1c2-t32">Use this clause to specify a <code dir="ltr">DEFAULT</code> value for the parameter. You can specify <code dir="ltr">:=</code> in place of the keyword <code dir="ltr">DEFAULT</code>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r8c1-t32" headers="r1c1-t32"><code dir="ltr"><span class="codeinlineitalic">InvokerRightsClause</span></code></td>
<td class="cellalignment6332" headers="r8c1-t32 r1c2-t32">Lets you specify whether the SQL statements in PL/SQL functions or procedures execute with definer&#39;s or invoker&#39;s rights. The <code dir="ltr">AUTHID</code> setting affects the name resolution and privilege checking of SQL statements that a PL/SQL procedure or function issues at runtime, as follows:
<ul>
<li>
<p>Specify <code dir="ltr">DEFINER</code> so that SQL name resolution and privilege checking operate as though the owner of the procedure or function (the definer, in whose schema it resides) is running it. <code dir="ltr">DEFINER</code> is the default.</p>
</li>
<li>
<p>Specify <code dir="ltr">CURRENT_USER</code> so that SQL name resolution and privilege checking operate as though the current user (the invoker) is running it.</p>
</li>
</ul>
<p>For more information, see <a class="olink TTPLS274" href="../TTPLS/accesscntl.htm#TTPLS274">&#34;Definer&#39;s rights and invoker&#39;s rights&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database PL/SQL Developer&#39;s Guide</span>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r9c1-t32" headers="r1c1-t32"><code dir="ltr">DETERMINISTIC</code></td>
<td class="cellalignment6332" headers="r9c1-t32 r1c2-t32">Specify <code dir="ltr">DETERMINISTIC</code> to indicate that the procedure should return the same result value whenever it is called with the same values for its parameters.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r10c1-t32" headers="r1c1-t32"><code dir="ltr">IS|AS</code></td>
<td class="cellalignment6332" headers="r10c1-t32 r1c2-t32">Specify either <code dir="ltr">IS</code> or <code dir="ltr">AS</code> to declare the body of the procedure.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r11c1-t32" headers="r1c1-t32"><code dir="ltr"><span class="codeinlineitalic">plsql_procedure_body</span></code></td>
<td class="cellalignment6332" headers="r11c1-t32 r1c2-t32">Specifies the procedure body.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1352"></a>Restrictions</p>
<p>TimesTen does not support:</p>
<ul>
<li>
<p><code dir="ltr">call_spec</code> clause</p>
</li>
<li>
<p><code dir="ltr">AS EXTERNAL</code> clause</p>
</li>
</ul>
<p>In a replicated environment, the <code dir="ltr">CREATE PROCEDURE</code> statement is not replicated. For more information, see <a class="olink TTREP744" href="../TTREP/alterpair.htm#TTREP744">&#34;Creating a new PL/SQL object in an existing active standby pair&#34;</a> and <a class="olink TTREP745" href="../TTREP/alter.htm#TTREP745">&#34;Adding a PL/SQL object to an existing classic replication scheme&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1353"></a>Description</p>
<ul>
<li>
<p>The namespace for PL/SQL procedures is distinct from the TimesTen built-in procedures. You can create a PL/SQL procedure with the same name as a TimesTen built-in procedure.</p>
</li>
<li>
<p>When you create or replace a procedure, the privileges granted on the procedure remain the same. If you drop and recreate the object, the object privileges that were granted on the original object are revoked.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1354"></a>Examples</p>
<p>Create a procedure <code dir="ltr">query_emp</code> to retrieve information about an employee. Pass the <code dir="ltr">employee_id</code> 171 to the procedure and retrieve the <code dir="ltr">last_name</code> and <code dir="ltr">salary</code> into two <code dir="ltr">OUT</code> parameters.</p>
<pre dir="ltr">Command&gt; CREATE OR REPLACE PROCEDURE query_emp
       &gt;           (p_id IN employees.employee_id%TYPE,
       &gt;            p_name  OUT employees.last_name%TYPE,
       &gt;            p_salary OUT employees.salary%TYPE) IS
       &gt;         BEGIN
       &gt;           SELECT last_name, salary INTO p_name, p_salary
       &gt;           FROM employees
       &gt;           WHERE employee_id = p_id;
       &gt;         END query_emp;
       &gt;         /
 
Procedure created.
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1355"></a>See also</p>
<br/>
<a class="olink LNPLS" href="../LNPLS/toc.htm"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> and <a class="olink SQLRF" href="../SQLRF/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i992040"></a>
<div id="TTSQL298" class="refsect1">
<h2 class="refsect1"><a id="sthref1356"></a><a id="sthref1357"></a>CREATE REPLICATION</h2>
<p>The <code dir="ltr">CREATE REPLICATION</code> statement:</p>
<ul>
<li>
<p>Defines a classic replication scheme on a participating database.</p>
</li>
<li>
<p>Installs the specified configuration in the executing database&#39;s replication system tables.</p>
</li>
<li>
<p>Typically consists of one or more replication element specifications and zero or more <code dir="ltr">STORE</code> specifications.</p>
</li>
</ul>
<p>TimesTen SQL configuration for replication also provides a programmable way to configure a classic replication scheme. The configuration can be embedded in C, C++ or Java code. Replication can be configured locally or from remote systems using client/server.</p>
<p>In addition, you need to use the <code dir="ltr">ttRepAdmin</code> utility to maintain operations not covered by the supported SQL statements. Use <code dir="ltr">ttRepAdmin</code> to change replication state, duplicate databases, list the replication configuration, and view replication status.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1358"></a>Required privilege</p>
<p><code dir="ltr">ADMIN</code></p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i992049"></a>Definitions</p>
<p>A <a id="sthref1359"></a><span class="italic">replication element</span> is an entity that TimesTen synchronizes between databases. A replication element can be a whole table or a database. A database can include most types of tables and cache groups. It can include only specified tables and cache groups, or include all tables except specified tables and cache groups. It cannot include temporary tables or views, whether materialized or nonmaterialized.</p>
<p>A <span class="italic"><a id="sthref1360"></a>replication scheme</span> is a set of replication elements, as well as the databases that maintain copies of these elements.</p>
<p>For more detailed information on SQL configuration for classic replication, see <a class="olink TTREP314" href="../TTREP/design.htm#TTREP314">&#34;Defining a classic replication scheme&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1361"></a>SQL syntax</p>
<pre dir="ltr">CREATE REPLICATION [<span class="italic">Owner</span>.]<span class="italic">ReplicationSchemeName</span>
{ ELEMENT <span class="italic">ElementName</span>
  { DATASTORE | { TABLE [<span class="italic">Owner</span>.]<span class="italic">TableName</span> [<span class="italic">CheckConflicts</span>]} | 
       SEQUENCE [<span class="italic">Owner</span>.]<span class="italic">SequenceName</span>}
     { MASTER | PROPAGATOR } <span class="italic">FullStoreName</span>
     [TRANSMIT { NONDURABLE | DURABLE }]
     { SUBSCRIBER <span class="italic">FullStoreName</span> [,...]
        [<span class="italic">ReturnServiceAttribute</span>] } [,...] }
     [...]
     [{INCLUDE | EXCLUDE}
          {TABLE [[<span class="italic">Owner</span>.]<span class="italic">TableName</span>[,...]] |
           CACHE GROUP [[<span class="italic">Owner</span>.]<span class="italic">CacheGroupName</span>[,...]] | 
           SEQUENCE [[<span class="italic">Owner</span>.]<span class="italic">SequenceName</span>[,...]} [,...]] 
[ STORE <span class="italic">FullStoreName</span> [<span class="italic">StoreAttribute</span> [... ]]] [...]
[ <span class="italic">NetworkOperation</span>[...]]
</pre>
<p>Syntax for <code dir="ltr"><span class="codeinlineitalic">CheckConflicts</span></code> is described in <a href="#i992387">&#34;CHECK CONFLICTS&#34;</a>.</p>
<p>Syntax for <code dir="ltr"><span class="codeinlineitalic">ReturnServiceAttribute</span></code>:</p>
<pre dir="ltr">{ RETURN RECEIPT [BY REQUEST] |
  RETURN TWOSAFE [BY REQUEST] |
  NO RETURN }
</pre>
<p>Syntax for <code dir="ltr"><span class="codeinlineitalic">StoreAttribute</span></code>:</p>
<pre dir="ltr">  DISABLE RETURN {SUBSCRIBER | ALL} <span class="italic">NumFailures</span> 
  RETURN SERVICES {ON | OFF} WHEN [REPLICATION] STOPPED 
  DURABLE COMMIT {ON | OFF}
  RESUME RETURN <span class="italic">Milliseconds</span> 
  LOCAL COMMIT ACTION {NO ACTION | COMMIT} 
  RETURN WAIT TIME <span class="italic">Seconds</span> 
  COMPRESS TRAFFIC {ON | OFF}
  PORT <span class="italic">PortNumber</span> 
  TIMEOUT <span class="italic">Seconds</span> 
  FAILTHRESHOLD Value 
  CONFLICT REPORTING SUSPEND AT <span class="italic">Value</span> 
  CONFLICT REPORTING RESUME AT <span class="italic">Value</span> 
  TABLE DEFINITION CHECKING {RELAXED|EXACT}
</pre>
<p>Syntax for <code dir="ltr"><span class="codeinlineitalic">NetworkOperation</span></code>:</p>
<pre dir="ltr">ROUTE MASTER <span class="italic">FullStoreName</span> SUBSCRIBER <span class="italic">FullStoreName</span>
  { { MASTERIP <span class="italic">MasterHost</span> | SUBSCRIBERIP <span class="italic">SubscriberHost</span> }
      PRIORITY <span class="italic">Priority</span> } [...]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1362"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for CREATE REPLICATION." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t33">Parameter</th>
<th class="cellalignment6331" id="r1c2-t33">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t33" headers="r1c1-t33"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">ReplicationSchemeName</span></code></td>
<td class="cellalignment6332" headers="r2c1-t33 r1c2-t33">Name assigned to the new classic replication scheme. Classic replication schemes should have names that are unique from all other database objects.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t33" headers="r1c1-t33"><code dir="ltr"><span class="codeinlineitalic">CheckConflicts</span></code></td>
<td class="cellalignment6332" headers="r3c1-t33 r1c2-t33">Check for replication conflicts when simultaneously writing to bidirectionally replicated databases. See <a href="#i992387">&#34;CHECK CONFLICTS&#34;</a>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t33" headers="r1c1-t33"><code dir="ltr">COMPRESS TRAFFIC {ON | OFF}</code></td>
<td class="cellalignment6332" headers="r4c1-t33 r1c2-t33">Compress replicated traffic to reduce the amount of network bandwidth. <code dir="ltr">ON</code> specifies that all replicated traffic for the database defined by <code dir="ltr">STORE</code> be compressed. <code dir="ltr">OFF</code> (the default) specifies no compression. See <a class="olink TTREP200" href="../TTREP/attrib.htm#TTREP200">&#34;Compressing replicated traffic&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span> for details.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t33" headers="r1c1-t33"><code dir="ltr">CONFLICT REPORTING SUSPEND AT</code> <code dir="ltr"><span class="codeinlineitalic">Value</span></code></td>
<td class="cellalignment6332" headers="r5c1-t33 r1c2-t33">Suspends conflict resolution reporting.
<p><code dir="ltr"><span class="codeinlineitalic">Value</span></code> is a non-negative integer. The default is 0 and means never suspend. Conflict reporting is suspended when the rate of conflict exceeds <code dir="ltr"><span class="codeinlineitalic">Value</span></code>. If you set <code dir="ltr"><span class="codeinlineitalic">Value</span></code> to 0, conflict reporting suspension is turned off.</p>
<p>This clause is valid for table level replication.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t33" headers="r1c1-t33"><code dir="ltr">CONFLICT REPORTING RESUME AT</code> <code dir="ltr"><span class="codeinlineitalic">Value</span></code></td>
<td class="cellalignment6332" headers="r6c1-t33 r1c2-t33">Resumes conflict resolution reporting.
<p><code dir="ltr"><span class="codeinlineitalic">Value</span></code> is a non-negative integer. Conflict reporting is resumed when the rate of conflict falls below <code dir="ltr"><span class="codeinlineitalic">Value.</span></code> The default is 1.</p>
<p>This clause is valid for table level replication.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r7c1-t33" headers="r1c1-t33"><a id="sthref1363"></a><a id="sthref1364"></a><code dir="ltr">DATASTORE</code></td>
<td class="cellalignment6332" headers="r7c1-t33 r1c2-t33">Define entire database as element. This type of element can only be defined for a master database that is not configured with an element of type <code dir="ltr">TABLE</code> in the same or a different replication scheme. See <a class="olink TTREP318" href="../TTREP/design.htm#TTREP318">&#34;Defining replication elements&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r8c1-t33" headers="r1c1-t33"><code dir="ltr">{INCLUDE|EXCLUDE}</code>
<p><code dir="ltr">{[TABLE[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">TableName</span></code> <code dir="ltr">[,...]]|</code></p>
<p><code dir="ltr">CACHE GROUP</code></p>
<p><code dir="ltr">[[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">CacheGroupName</span></code> <code dir="ltr">[,...]]|</code></p>
<p><code dir="ltr">SEQUENCE</code></p>
<p><code dir="ltr">[[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">SequenceName</span></code><code dir="ltr">[,...]]} [,...]</code></p>
</td>
<td class="cellalignment6332" headers="r8c1-t33 r1c2-t33"><code dir="ltr">INCLUDE</code> includes in the <code dir="ltr">DATASTORE</code> element only the tables, sequences or cache groups listed. Use one <code dir="ltr">INCLUDE</code> clause for each object type (table, sequence or cache group).
<p><code dir="ltr">EXCLUDE</code> includes in the <code dir="ltr">DATASTORE</code> element all tables, sequences or cache groups except for those listed. Use one <code dir="ltr">EXCLUDE</code> clause for each object type (table, sequence or cache group).</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r9c1-t33" headers="r1c1-t33"><code dir="ltr">DISABLE RETURN {SUBSCRIBER|ALL}</code> <code dir="ltr"><span class="codeinlineitalic">NumFailures</span></code></td>
<td class="cellalignment6332" headers="r9c1-t33 r1c2-t33">Set the return service failure policy so that return service blocking is disabled after the number of timeouts specified by <code dir="ltr"><span class="codeinlineitalic">NumFailures</span></code>. Selecting <code dir="ltr">SUBSCRIBER</code> applies this policy only to the subscriber that fails to acknowledge replicated updates within the set timeout period. <code dir="ltr">ALL</code> applies this policy to all subscribers should any of the subscribers fail to respond. This failure policy can be specified for either the <code dir="ltr">RETURN RECEIPT</code> or <code dir="ltr">RETURN TWOSAFE</code> service.
<p>If <code dir="ltr">DISABLE RETURN</code> is specified but <code dir="ltr">RESUME RETURN</code> is not specified, the return services remain off until the replication agent for the database has been restarted.</p>
<p>See <a class="olink TTREP795" href="../TTREP/attrib.htm#TTREP795">&#34;Managing return service timeout errors and replication state changes&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span> for details.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r10c1-t33" headers="r1c1-t33"><code dir="ltr"><a id="sthref1365"></a><a id="sthref1366"></a>DURABLE COMMIT {ON|OFF}</code></td>
<td class="cellalignment6332" headers="r10c1-t33 r1c2-t33">Overrides the <code dir="ltr">DurableCommits</code> general connection attribute setting. <code dir="ltr">DURABLE COMMIT ON</code> enables durable commits regardless of whether the replication agent is running or stopped.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r11c1-t33" headers="r1c1-t33"><a id="sthref1367"></a><a id="sthref1368"></a><code dir="ltr">ELEMENT</code> <code dir="ltr"><span class="codeinlineitalic">ElementName</span></code></td>
<td class="cellalignment6332" headers="r11c1-t33 r1c2-t33">The entity that TimesTen synchronizes between databases. TimesTen supports the entire database (<code dir="ltr">DATASTORE</code>) and whole tables (<code dir="ltr">TABLE</code>) as replication elements.
<p><code dir="ltr"><span class="codeinlineitalic">ElementName</span></code> is the name given to the replication element. The <code dir="ltr"><span class="codeinlineitalic">ElementName</span></code> for a <code dir="ltr">TABLE</code> element can be up to 30 characters in length. The <code dir="ltr"><span class="codeinlineitalic">ElementName</span></code> for a <code dir="ltr">DATASTORE</code> element must be unique with respect to other <code dir="ltr">DATASTORE</code> element names within the first 20 characters. Each <code dir="ltr"><span class="codeinlineitalic">ElementName</span></code> must be unique within a classic replication scheme. Also, you cannot define two element descriptions for the same element.</p>
<p>See <a class="olink TTREP318" href="../TTREP/design.htm#TTREP318">&#34;Defining replication elements&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span> for details.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r12c1-t33" headers="r1c1-t33"><a id="sthref1369"></a><a id="sthref1370"></a><code dir="ltr">FAILTHRESHOLD</code> <code dir="ltr"><span class="codeinlineitalic">Value</span></code></td>
<td class="cellalignment6332" headers="r12c1-t33 r1c2-t33">The number of log files that can accumulate for a subscriber database. If this value is exceeded, the subscriber is set to the <code dir="ltr">Failed</code> state.The value 0 means &#34;No Limit.&#34; This is the default.
<p>See <a class="olink TTREP205" href="../TTREP/attrib.htm#TTREP205">&#34;Setting the transaction log failure threshold&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r13c1-t33" headers="r1c1-t33"><code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code></td>
<td class="cellalignment6332" headers="r13c1-t33 r1c2-t33">The database, specified as one of the following:
<ul>
<li>
<p><code dir="ltr">SELF</code></p>
</li>
<li>
<p>The prefix of the database file name</p>
</li>
</ul>
<p>For example, if the database path is <code dir="ltr"><span class="codeinlineitalic">directory</span></code><code dir="ltr">/</code><code dir="ltr"><span class="codeinlineitalic">subdirectory</span></code><code dir="ltr">/data.ds0</code>, then <code dir="ltr">data</code> is the database name that should be used.</p>
<p>This is the database file name specified in the <code dir="ltr">DataStore</code> attribute of the DSN description with optional host ID in the form:</p>
<p><code dir="ltr"><span class="codeinlineitalic">DataStoreName</span></code> <code dir="ltr">[ON</code> <code dir="ltr"><span class="codeinlineitalic">Host</span></code><code dir="ltr">]</code></p>
<p><code dir="ltr"><span class="codeinlineitalic">Host</span></code> can be either an IP address or a literal host name assigned to one or more IP addresses, as described in <a class="olink TTREP401" href="../TTREP/attrib.htm#TTREP401">&#34;Configuring the network&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span>. Host names containing special characters must be surrounded by double quotes. For example: <code dir="ltr">&#34;MyHost-500&#34;</code>. Host names can be up to 30 characters long.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r14c1-t33" headers="r1c1-t33"><code dir="ltr">LOCAL COMMIT ACTION</code> <code dir="ltr">{NO ACTION | COMMIT}</code></td>
<td class="cellalignment6332" headers="r14c1-t33 r1c2-t33">Specifies the default action to be taken for a return twosafe transaction in the event of a timeout.
<p><span class="bold">Note</span>: This attribute is only valid when the <code dir="ltr">RETURN TWOSAFE</code> or <code dir="ltr">RETURN TWOSAFE BY REQUEST</code> attribute is set in the <code dir="ltr">SUBSCRIBER</code> clause.</p>
<p><code dir="ltr">NO ACTION</code>: On timeout, the commit function returns to the application, leaving the transaction in the same state it was in when it entered the commit call, with the exception that the application is not able to update any replicated tables. The application can only reissue the commit. The transaction may not be rolled back. This is the default.</p>
<p><code dir="ltr">COMMIT</code>: On timeout, the commit function attempts to perform a <code dir="ltr">COMMIT</code> to end the transaction locally. No more operations are possible on the same transaction.</p>
<p>This setting can be overridden for specific transactions by calling the <code dir="ltr">localAction</code> parameter in the <code dir="ltr">ttRepSyncSet</code> procedure.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r15c1-t33" headers="r1c1-t33"><a id="sthref1371"></a><a id="sthref1372"></a><code dir="ltr">MASTER</code> <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code></td>
<td class="cellalignment6332" headers="r15c1-t33 r1c2-t33">The database on which applications update the specified element. The <code dir="ltr">MASTER</code> database sends updates to its <code dir="ltr">SUBSCRIBER</code> databases. The <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code> must be the database specified in the <code dir="ltr">DataStore</code> attribute of the DSN description.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r16c1-t33" headers="r1c1-t33"><code dir="ltr">NO RETURN</code></td>
<td class="cellalignment6332" headers="r16c1-t33 r1c2-t33">Specifies that no return service is to be used. This is the default.
<p>For details on the use of the return services, see &#34;<a class="olink TTREP183" href="../TTREP/attrib.htm#TTREP183">Using a return service&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r17c1-t33" headers="r1c1-t33"><a id="sthref1373"></a><code dir="ltr">PORT</code> <code dir="ltr"><span class="codeinlineitalic">PortNumber</span></code></td>
<td class="cellalignment6332" headers="r17c1-t33 r1c2-t33">The TCP/IP port number on which the replication agent for the database listens for connections. If not specified, the replication agent automatically allocates a port number.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r18c1-t33" headers="r1c1-t33"><code dir="ltr">PROPAGATOR</code> <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code></td>
<td class="cellalignment6332" headers="r18c1-t33 r1c2-t33">The database that receives replicated updates and passes them on to other databases. The <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code> must be the database specified in the <code dir="ltr">DataStore</code> attribute of the DSN description.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r19c1-t33" headers="r1c1-t33"><code dir="ltr">RESUME RETURN</code> <code dir="ltr"><span class="codeinlineitalic">Milliseconds</span></code></td>
<td class="cellalignment6332" headers="r19c1-t33 r1c2-t33">If return service blocking has been disabled by <code dir="ltr">DISABLE RETURN</code>, this attribute sets the policy on when to re-enable return service blocking. Return service blocking is re-enabled as soon as the failed subscriber acknowledges the replicated update in a period of time that is less than the specified <code dir="ltr"><span class="codeinlineitalic">Milliseconds</span></code>.
<p>If <code dir="ltr">DISABLE RETURN</code> is specified but <code dir="ltr">RESUME RETURN</code> is not specified, the return services remain off until the replication agent for the database has been restarted.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r20c1-t33" headers="r1c1-t33"><a id="sthref1374"></a><a id="sthref1375"></a><code dir="ltr">RETURN RECEIPT</code> <code dir="ltr">[BY REQUEST]</code></td>
<td class="cellalignment6332" headers="r20c1-t33 r1c2-t33">Enables the return receipt service, so that applications that commit a transaction to a master database are blocked until the transaction is received by all subscribers.
<p><code dir="ltr">RETURN RECEIPT</code> applies the service to all transactions. If you specify <code dir="ltr">RETURN REQUEST BY REQUEST</code>, you can use the <code dir="ltr">ttRepSyncSet</code> procedure to enable the return receipt service for selected transactions. For details on the use of the return services, see <a class="olink TTREP183" href="../TTREP/attrib.htm#TTREP183">&#34;Using a return service&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r21c1-t33" headers="r1c1-t33"><code dir="ltr">RETURN SERVICES {ON|OFF} WHEN [REPLICATION] STOPPED</code></td>
<td class="cellalignment6332" headers="r21c1-t33 r1c2-t33">Sets return services on or off when replication is disabled (stopped or paused state).
<p><code dir="ltr">OFF</code> disables return services when replication is disabled and is the default for <code dir="ltr">RETURN RECEIPT</code> service. <code dir="ltr">ON</code> allows return services to continue to be enabled when replication is disabled and is the default for <code dir="ltr">RETURN TWOSAFE</code> service.</p>
<p>See <a class="olink TTREP795" href="../TTREP/attrib.htm#TTREP795">&#34;Managing return service timeout errors and replication state changes&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span> for details.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r22c1-t33" headers="r1c1-t33"><a id="sthref1376"></a><a id="sthref1377"></a><code dir="ltr">RETURN TWOSAFE</code> <code dir="ltr">[BY REQUEST]</code></td>
<td class="cellalignment6332" headers="r22c1-t33 r1c2-t33">Enables the return twosafe service, so that applications that commit a transaction to a master database are blocked until the transaction is committed on all subscribers.
<p><span class="bold">Note</span>: This service can only be used in a bidirectional replication scheme where the elements are defined as <code dir="ltr">DATASTORE</code>.</p>
<p>Specifying <code dir="ltr">RETURN TWOSAFE</code> applies the service to all transactions. If you specify <code dir="ltr">RETURN TWOSAFE BY REQUEST</code>, you can use the <code dir="ltr">ttRepSyncSet</code> procedure to enable the return receipt service for selected transactions. For details on the use of the return services, see <a class="olink TTREP183" href="../TTREP/attrib.htm#TTREP183">&#34;Using a return service&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r23c1-t33" headers="r1c1-t33"><code dir="ltr">RETURN WAIT TIME</code> <code dir="ltr"><span class="codeinlineitalic">Seconds</span></code></td>
<td class="cellalignment6332" headers="r23c1-t33 r1c2-t33">Specifies the number of seconds to wait for return service acknowledgment. The default value is 10 seconds. A value of 0 (zero) means that there is no timeout. Your application can override this timeout setting by calling the <code dir="ltr">returnWait</code> parameter in the <code dir="ltr">ttRepSyncSet</code> procedure.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r24c1-t33" headers="r1c1-t33"><code dir="ltr">SEQUENCE</code> <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">SequenceName</span></code></td>
<td class="cellalignment6332" headers="r24c1-t33 r1c2-t33">Define the sequence specified by <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">SequenceName</span></code> as element. See <a class="olink TTREP318" href="../TTREP/design.htm#TTREP318">&#34;Defining replication elements&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span> for details.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r25c1-t33" headers="r1c1-t33"><code dir="ltr">STORE</code> <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code></td>
<td class="cellalignment6332" headers="r25c1-t33 r1c2-t33">Defines the attributes for a given database. Attributes include <code dir="ltr">PORT</code>, <code dir="ltr">TIMEOUT</code> and <code dir="ltr">FAILTHRESHOLD</code>. The <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code> must be the database specified in the <code dir="ltr">DataStore</code> attribute of the DSN description.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r26c1-t33" headers="r1c1-t33"><a id="sthref1378"></a><a id="sthref1379"></a><code dir="ltr">SUBSCRIBER</code> <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code></td>
<td class="cellalignment6332" headers="r26c1-t33 r1c2-t33">A database that receives updates from the <code dir="ltr">MASTER</code> databases. The <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code> must be the database specified in the <code dir="ltr">DataStore</code> attribute of the DSN description.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r27c1-t33" headers="r1c1-t33"><code dir="ltr">TABLE [</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">TableName</span></code></td>
<td class="cellalignment6332" headers="r27c1-t33 r1c2-t33">Define the table specified by <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">TableName</span></code> as element. See <a class="olink TTREP318" href="../TTREP/design.htm#TTREP318">&#34;Defining replication elements&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span> for details.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r28c1-t33" headers="r1c1-t33"><a id="sthref1380"></a><a id="sthref1381"></a><code dir="ltr">TIMEOUT</code> <code dir="ltr"><span class="codeinlineitalic">Seconds</span></code></td>
<td class="cellalignment6332" headers="r28c1-t33 r1c2-t33">The maximum number of seconds the replication agent waits for a response from remote replication agents. The default is 120 seconds.
<p><span class="bold">Note:</span> For large transactions that may cause a delayed response from the remote replication agent, the agent scales the timeout based on the size of the transaction. This scaling is disabled if you set <code dir="ltr">TIMEOUT</code> to less than or equal to 60 seconds. Also see <a class="olink TTREP820" href="../TTREP/attrib.htm#TTREP820">&#34;Setting wait timeout for response from remote replication agents&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r29c1-t33" headers="r1c1-t33"><code dir="ltr">T<a id="sthref1382"></a><a id="sthref1383"></a>RANSMIT {DURABLE | NONDURABLE}</code></td>
<td class="cellalignment6332" headers="r29c1-t33 r1c2-t33">Specifies whether to flush the master log to disk before sending a batch of committed transactions to the subscribers.
<p><code dir="ltr">TRANSMIT NONDURABLE</code> specifies that records in the master log are not to be flushed to disk before they are sent to subscribers. This setting can only be used if the specified element is a <code dir="ltr">DATASTORE</code>. This is the default for <code dir="ltr">RETURN TWOSAFE</code> transactions.</p>
<p><code dir="ltr">TRANSMIT DURABLE</code> specifies that records are to be flushed to disk before they are sent to subscribers. This is the default for asynchronous and <code dir="ltr">RETURN RECEIPT</code> transactions.</p>
<p><span class="bold">Note</span>: <code dir="ltr">TRANSMIT DURABLE</code> has no effect on <code dir="ltr">RETURN TWOSAFE</code> transactions.</p>
<p><span class="bold">Note</span>: <code dir="ltr">TRANSMIT DURABLE</code> cannot be set for active standby pairs.</p>
<p>See <a class="olink TTREP323" href="../TTREP/design.htm#TTREP323">&#34;Setting transmit durability on DATASTORE element&#34;</a> and <a class="olink TTREP324" href="../TTREP/design.htm#TTREP324">&#34;Replicating the entire master database with TRANSMIT NONDURABLE&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span> for more information.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r30c1-t33" headers="r1c1-t33"><code dir="ltr">TABLE DEFINITION CHECKING {EXACT|RELAXED}</code></td>
<td class="cellalignment6332" headers="r30c1-t33 r1c2-t33">Specifies type of table definition checking that occurs on the subscriber:
<ul>
<li>
<p><code dir="ltr">EXACT</code>: The tables must be identical on master and subscriber.</p>
</li>
<li>
<p><code dir="ltr">RELAXED</code>: The tables must have the same key definition, number of columns and column data types.</p>
</li>
</ul>
<p>The default is <code dir="ltr">RELAXED</code>.</p>
<p><span class="bold">Note:</span> If you use <code dir="ltr">TABLE DEFINITION CHECKING EXACT</code>, use <code dir="ltr">ttMigrate -exactUpgrade</code> if you migrate the database. If you use <code dir="ltr">TABLE DEFINITION CHECKING RELAXED</code>, use <code dir="ltr">ttMigrate -relaxedUpgrade</code> if you migrate the database.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r31c1-t33" headers="r1c1-t33"><code dir="ltr">ROUTE MASTER</code> <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code> <code dir="ltr">SUBSCRIBER</code> <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code></td>
<td class="cellalignment6332" headers="r31c1-t33 r1c2-t33">Denotes the <code dir="ltr"><span class="codeinlineitalic">NetworkOperation</span></code> clause. If specified, enables you to control the network interface that a master store uses for every outbound connection to each of its subscriber stores.
<p>Can be specified more than once.</p>
<p>For <code dir="ltr"><span class="codeinlineitalic">FullStoreName</span></code>, <code dir="ltr">ON &#34;</code><code dir="ltr"><span class="codeinlineitalic">host</span></code><code dir="ltr">&#34;</code> must be specified.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r32c1-t33" headers="r1c1-t33"><code dir="ltr">MASTERIP</code> <code dir="ltr"><span class="codeinlineitalic">MasterHost</span></code> <code dir="ltr">|</code> <code dir="ltr">SUBSCRIBERIP</code> <code dir="ltr"><span class="codeinlineitalic">SubscriberHost</span></code></td>
<td class="cellalignment6332" headers="r32c1-t33 r1c2-t33"><code dir="ltr"><span class="codeinlineitalic">MasterHost</span></code> and <code dir="ltr"><span class="codeinlineitalic">SubscriberHost</span></code> are the IP addresses for the network interface on the master and subscriber stores. Specify in dot notation or canonical format or in colon notation for IPV6.
<p>Clause can be specified more than once.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r33c1-t33" headers="r1c1-t33"><code dir="ltr">PRIORITY</code> <code dir="ltr"><span class="codeinlineitalic">Priority</span></code></td>
<td class="cellalignment6332" headers="r33c1-t33 r1c2-t33">Variable expressed as an integer from 1 to 99. Denotes the priority of the IP address. Lower integral values have higher priority. An error is returned if multiple addresses with the same priority are specified. Controls the order in which multiple IP addresses are used to establish peer connections.
<p>Required syntax of <code dir="ltr"><span class="codeinlineitalic">NetworkOperation</span></code> clause. Follows <code dir="ltr">MASTERIP</code> <code dir="ltr"><span class="codeinlineitalic">MasterHost</span></code> <code dir="ltr">| SUBSCRIBERIP</code> <code dir="ltr"><span class="codeinlineitalic">SubscriberHost</span></code> clause.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div id="TTSQL299" class="refsect2"><a id="BABIGDCE"></a><a id="i992387"></a>
<h3 class="refsect2"><a id="sthref1384"></a><a id="sthref1385"></a><a id="sthref1386"></a>CHECK CONFLICTS</h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1387"></a>Syntax</p>
<p>The syntax for <code dir="ltr">CHECK CONFLICTS</code> is:</p>
<pre dir="ltr">{NO CHECK |
CHECK CONFLICTS BY ROW TIMESTAMP
      COLUMN <span class="italic">ColumnName</span>
      [ UPDATE BY { SYSTEM | USER } ]
      [ ON EXCEPTION { ROLLBACK [ WORK ] | NO ACTION } ]
      [ {REPORT TO &#39;<span class="italic">FileName</span>&#39;
             [ FORMAT { XML | STANDARD } ] | NO REPORT
      } ]
}
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
A <code dir="ltr">CHECK CONFLICT</code> clause can only be used for elements of type <code dir="ltr">TABLE</code>.</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1388"></a>Parameters</p>
<p>The <code dir="ltr">CHECK CONFLICTS</code> clause of the <code dir="ltr"><a href="#i992040">CREATE REPLICATION</a></code> or <code dir="ltr"><a href="#i990933">ALTER REPLICATION</a></code> statement has the following parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for the CHECK CONFLICTS clause of the CREATE REPLICATION and ALTER REPLICATION." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t35">Parameter</th>
<th class="cellalignment6331" id="r1c2-t35">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t35" headers="r1c1-t35"><code dir="ltr">CHECK CONFLICTS BY ROW TIMESTAMP</code></td>
<td class="cellalignment6332" headers="r2c1-t35 r1c2-t35">Indicates that all update and uniqueness conflicts are to be detected. Conflicts are resolved in the manner specified by the <code dir="ltr">ON EXCEPTION</code> parameter.
<p>It also detects delete conflicts with <code dir="ltr">UPDATE</code> operations.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t35" headers="r1c1-t35"><code dir="ltr">COLUMN</code> <code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code></td>
<td class="cellalignment6332" headers="r3c1-t35 r1c2-t35">Indicates the column in the replicated table to be used for timestamp comparison. The table is specified in the <code dir="ltr">ELEMENT</code> description by <code dir="ltr"><span class="codeinlineitalic">TableName</span></code>.
<p><code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code> is a nullable column of type <code dir="ltr">BINARY(8)</code> used to store a timestamp that indicates when the row was last updated. TimesTen rejects attempts to update a row with a lower timestamp value than the stored value. The specified <code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code> must exist in the replicated table on both the master and subscriber databases.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t35" headers="r1c1-t35"><code dir="ltr">NO CHECK</code></td>
<td class="cellalignment6332" headers="r4c1-t35 r1c2-t35">Specify to suppress conflict resolution for a given element.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t35" headers="r1c1-t35"><code dir="ltr">UPDATE BY {SYSTEM | USER}</code></td>
<td class="cellalignment6332" headers="r5c1-t35 r1c2-t35">Specifies whether the timestamp values are maintained by TimesTen (<code dir="ltr">SYSTEM</code>) or the application (<code dir="ltr">USER</code>). The replicated table in the master and subscriber databases must use the same <code dir="ltr">UPDATE BY</code> specification. See <a class="olink TTREP626" href="../TTREP/conflict.htm#TTREP626">&#34;Enabling system timestamp column maintenance&#34;</a> and <a class="olink TTREP627" href="../TTREP/conflict.htm#TTREP627">&#34;Enabling user timestamp column maintenance&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span> for more information. The default is <code dir="ltr">UPDATE BY SYSTEM</code>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t35" headers="r1c1-t35"><code dir="ltr">ON EXCEPTION {ROLLBACK[WORK |NO ACTION}</code></td>
<td class="cellalignment6332" headers="r6c1-t35 r1c2-t35">Specifies how to resolve a detected conflict. <code dir="ltr">ROW TIMESTAMP</code> conflict detection has the resolution options:
<ul>
<li>
<p><code dir="ltr">ROLLBACK [WORK]</code>: Abort the transaction that contains the conflicting action.</p>
</li>
<li>
<p><code dir="ltr">NO ACTION</code>: Complete the transaction without performing the conflicting action (<code dir="ltr"><a href="#i994046">UPDATE</a></code>, <code dir="ltr"><a href="#g1513888">INSERT</a></code> or <code dir="ltr"><a href="#BABBJCCI">DELETE</a></code>).</p>
</li>
</ul>
<p>The default is <code dir="ltr">ON EXCEPTION ROLLBACK [WORK]</code>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r7c1-t35" headers="r1c1-t35"><code dir="ltr">REPORT TO &#39;</code><code dir="ltr"><span class="codeinlineitalic">FileName</span></code><code dir="ltr">&#39;</code></td>
<td class="cellalignment6332" headers="r7c1-t35 r1c2-t35">Specifies the file to log updates that fail the timestamp comparison. <code dir="ltr"><span class="codeinlineitalic">FileName</span></code> is a SQL character string that cannot exceed 1,000 characters. (SQL character string literals are single-quoted strings that may contain any sequence of characters, including spaces.) The same file can be used to log failed updates for multiple tables.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r8c1-t35" headers="r1c1-t35"><code dir="ltr">[FORMAT {XML|STANDARD}]</code></td>
<td class="cellalignment6332" headers="r8c1-t35 r1c2-t35">Optionally specifies the conflict report format for an element. The default format is <code dir="ltr">STANDARD</code>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r9c1-t35" headers="r1c1-t35"><code dir="ltr">NO REPORT</code></td>
<td class="cellalignment6332" headers="r9c1-t35 r1c2-t35">Specify to suppress logging of failed timestamp comparisons.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i1015047"></a>Description</p>
<ul>
<li>
<p>The names of all databases on the same host must be unique for each classic replication scheme for each TimesTen instance.</p>
</li>
<li>
<p>Replication elements can only be updated (by normal application transactions) through the <code dir="ltr">MASTER</code> database. <code dir="ltr">PROPAGATOR</code> and <code dir="ltr">SUBSCRIBER</code> databases are read-only.</p>
</li>
<li>
<p>If you define a classic replication scheme that permits multiple databases to update the same table, see <a class="olink TTREP519" href="../TTREP/conflict.htm#TTREP519">&#34;Resolving Replication Conflicts&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span> for recommendations on how to avoid conflicts when updating rows.</p>
</li>
<li>
<p><code dir="ltr">SELF</code> is intended for classic replication schemes where all participating databases are local. Do not use <code dir="ltr">SELF</code> for a distributed classic replication scheme in a production environment, where spelling out the host name for each database in a script enables it to be used at each participating database.</p>
</li>
<li>
<p>Each attribute for a given <code dir="ltr">STORE</code> may be specified only once, or not at all.</p>
</li>
<li>
<p>Specifying the <code dir="ltr">PORT</code> of a database for one classic replication scheme specifies it for all classic replication schemes. All other connection attributes are specific to the classic replication scheme specified in the command.</p>
</li>
<li>
<p>For replication schemes, <code dir="ltr"><span class="codeinlineitalic">DataStoreName</span></code> is always the prefix of the TimesTen database checkpoint file names. These are the files with the<code dir="ltr">.ds0</code> and<code dir="ltr">.ds1</code> suffixes that are saved on disk by checkpoint operations.</p>
</li>
<li>
<p>If a row with a default <code dir="ltr">NOT INLINE VARCHAR</code> value is replicated, the receiver creates a copy of this value for each row instead of pointing to the default value if and only if the default value of the receiving node is different from the sending node.</p>
</li>
<li>
<p>To use timestamp comparison on replicated tables, you must specify a nullable column of type <code dir="ltr">BINARY(8)</code> to hold the timestamp value. Define the timestamp column when you create the table. You cannot add the timestamp column with the <code dir="ltr">ALTER TABLE</code> statement. In addition, the timestamp column cannot be part of a primary key or index.</p>
</li>
<li>
<p>If you specify the XML report format, two XML documents are generated:</p>
<ul>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">FileName</span></code><code dir="ltr">.xml</code>: This file contains the DTD for the report and the root node for the report. It includes the document definition and the include directive.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">FileName</span></code><code dir="ltr">.include</code>: This file is included in <code dir="ltr"><span class="codeinlineitalic">FileName</span></code><code dir="ltr">.xml</code> and contains all the actual conflicts.</p>
</li>
<li>
<p>The <code dir="ltr"><span class="codeinlineitalic">FileName</span></code><code dir="ltr">.include</code> file can be truncated. Do not truncate the <code dir="ltr"><span class="codeinlineitalic">FileName</span></code><code dir="ltr">.xml</code> file.</p>
</li>
<li>
<p>For a complete description of the XML format, including examples of each conflict, see <a class="olink TTREP631" href="../TTREP/conflict.htm#TTREP631">&#34;Reporting conflicts to an XML file&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span>.</p>
</li>
</ul>
</li>
<li>
<p>If you specify a report format for an element and then drop the element, the corresponding report files are not deleted.</p>
</li>
<li>
<p>Use the <code dir="ltr">CONFLICT REPORTING SUSPEND AT</code> clause to specify a high water mark threshold at which the reporting of conflict resolution is suspended. When the number of conflicts per second exceeds the specified high water mark threshold, conflict resolution reporting (if configured and reported by the report file) and SNMP are suspended and an SNMP trap is emitted to indicate that it has been suspended.</p>
</li>
<li>
<p>Use the <code dir="ltr">CONFLICT REPORTING RESUME AT</code> clause to specify a low water mark threshold where the reporting of conflict resolution is resumed. When the rate of conflict falls below the low water mark threshold, conflict resolution reporting is resumed. A SNMP trap is emitted to indicate the resumption of conflict resolution. This trap provides the number of unreported conflicts during the time when conflict resolution was suspended.</p>
</li>
<li>
<p>The state of whether conflict reporting is suspended or not by a replication agent does not persist across the local replication agent and the peer agent stop and restart.</p>
</li>
<li>
<p>Do not use the <code dir="ltr">CREATE REPLICATION</code> statement to replicate cache groups. Only active standby pairs can replicate cache groups. See the <code dir="ltr"><a href="#i1438072">CREATE ACTIVE STANDBY PAIR</a></code> statement.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1389"></a>Examples</p>
<p>Replicate the contents of <code dir="ltr">repl.tab</code> from <code dir="ltr">masterds</code> to two subscribers, <code dir="ltr">subscriber1ds</code> and <code dir="ltr">subscriber2ds</code>.</p>
<pre dir="ltr">CREATE REPLICATION repl.twosubscribers
       ELEMENT e TABLE repl.tab
         MASTER masterds ON &#34;server1&#34;
         SUBSCRIBER subscriber1ds ON &#34;server2&#34;,
                    subscriber2ds ON &#34;server3&#34;;
</pre>
<p>Replicate the entire <code dir="ltr">masterds</code> database to the subscriber, <code dir="ltr">subscriber1ds</code>. The <code dir="ltr">FAILTHRESHOLD</code> specifies that a maximum of 10 log files can accumulate on <code dir="ltr">masterds</code> before it decides that <code dir="ltr">subscriber1ds</code> has failed.</p>
<pre dir="ltr">CREATE REPLICATION repl.wholestore
  ELEMENT e DATASTORE
     MASTER masterds ON &#34;server1&#34;
     SUBSCRIBER subscriber1ds ON &#34;server2&#34;
  STORE masterds FAILTHRESHOLD 10;
</pre>
<p>Bidirectionally replicate the entire <code dir="ltr">westds</code> and <code dir="ltr">eastds</code> databases and enable the <code dir="ltr">RETURN TWOSAFE</code> service.</p>
<pre dir="ltr">CREATE REPLICATION repl.biwholestore
  ELEMENT e1 DATASTORE
     MASTER westds ON &#34;westcoast&#34;
     SUBSCRIBER eastds ON &#34;eastcoast&#34;
        RETURN TWOSAFE
  ELEMENT e2 DATASTORE
     MASTER eastds ON &#34;eastcoast&#34;
     SUBSCRIBER westds ON &#34;westcoast&#34;
        RETURN TWOSAFE;
</pre>
<p>Enable the return receipt service for select transaction updates to the <code dir="ltr">subscriber1ds</code> subscriber.</p>
<pre dir="ltr">CREATE REPLICATION repl.twosubscribers
  ELEMENT e TABLE repl.tab
     MASTER masterds ON &#34;server1&#34;
     SUBSCRIBER subscriber1ds ON &#34;server2&#34;
        RETURN RECEIPT BY REQUEST
     SUBSCRIBER subscriber2ds ON &#34;server3&#34;;
</pre>
<p>Replicate the contents of the <code dir="ltr">customerswest</code> table from the <code dir="ltr">west</code> database to the <code dir="ltr">ROUNDUP</code> database and the <code dir="ltr">customerseast</code> table from the <code dir="ltr">east</code> database. Enable the return receipt service for all transactions.</p>
<pre dir="ltr">CREATE REPLICATION r
       ELEMENT west TABLE customerswest
         MASTER west ON &#34;serverwest&#34;
         SUBSCRIBER roundup ON &#34;serverroundup&#34;
            RETURN RECEIPT
       ELEMENT east TABLE customerseast
         MASTER east ON &#34;servereast&#34;
         SUBSCRIBER roundup ON &#34;serverroundup&#34;
            RETURN RECEIPT;
</pre>
<p>Replicate the contents of the <code dir="ltr">repl.tab</code> table from the <code dir="ltr">centralds</code> database to the <code dir="ltr">propds</code> database, which propagates the changes to the <code dir="ltr">backup1ds</code> and <code dir="ltr">backup2ds</code> databases.</p>
<pre dir="ltr">CREATE REPLICATION repl.propagator
       ELEMENT a TABLE repl.tab
         MASTER centralds ON &#34;finance&#34;
         SUBSCRIBER proprds ON &#34;nethandler&#34;
       ELEMENT b TABLE repl.tab
         PROPAGATOR proprds ON &#34;nethandler&#34;
         SUBSCRIBER backup1ds ON &#34;backupsystem1&#34;
                    bakcup2ds ON &#34;backupsystem2&#34;;
</pre>
<p>Bidirectionally replicate the contents of the <code dir="ltr">repl.accounts</code> table between the <code dir="ltr">eastds</code> and <code dir="ltr">westds</code> databases. Each database is both a master and a subscriber for the <code dir="ltr">repl.accounts</code> table.</p>
<p>Because the <code dir="ltr">repl.accounts</code> table can be updated on either the <code dir="ltr">eastds</code> or <code dir="ltr">westds</code> database, it includes a timestamp column (<code dir="ltr">tstamp</code>). The <code dir="ltr">CHECK CONFLICTS</code> clause establishes automatic timestamp comparison to detect any update conflicts between the two databases. In the event of a comparison failure, the entire transaction that includes an update with the older timestamp is rolled back (discarded).</p>
<pre dir="ltr">CREATE REPLICATION repl.r1
ELEMENT elem_accounts_1 TABLE repl.accounts
   CHECK CONFLICTS BY ROW TIMESTAMP
      COLUMN tstamp
      UPDATE BY SYSTEM
      ON EXCEPTION ROLLBACK
   MASTER westds ON &#34;westcoast&#34;
   SUBSCRIBER eastds ON &#34;eastcoast&#34;
ELEMENT elem_accounts_2 TABLE repl.accounts
   CHECK CONFLICTS BY ROW TIMESTAMP
      COLUMN tstamp
      UPDATE BY SYSTEM
      ON EXCEPTION ROLLBACK
   MASTER eastds ON &#34;eastcoast&#34;
   SUBSCRIBER westds ON &#34;westcoast&#34;;
</pre>
<p>Replicate the contents of the <code dir="ltr">repl.accounts</code> table from the <code dir="ltr">activeds</code> database to the <code dir="ltr">backupds</code> database, using the return twosafe service, and using TCP/IP port 40000 on <code dir="ltr">activeds</code> and TCP/IP port 40001 on <code dir="ltr">backupds</code>. The transactions on <code dir="ltr">activeds</code> need to be committed whenever possible, so configure replication so that the transaction is committed even after a replication timeout using <code dir="ltr">LOCAL COMMIT</code> <code dir="ltr">ACTION</code>, and so that the return twosafe service is disabled when replication is stopped. To avoid significant delays in the application if the connection to the <code dir="ltr">backupds</code> database is interrupted, configure the return service to be disabled after five transactions have timed out, but also configure the return service to be re-enabled when the <code dir="ltr">backupds</code> database&#39;s replication agent responds in under 100 milliseconds. Finally, the bandwidth between databases is limited, so configure replication to compress the data when it is replicated from the <code dir="ltr">activeds</code> database.</p>
<pre dir="ltr">CREATE REPLICATION repl.r
ELEMENT elem_accounts_1 TABLE repl.accounts
   MASTER activeds ON &#34;active&#34;
   SUBSCRIBER backupds ON &#34;backup&#34;
      RETURN TWOSAFE
ELEMENT elem_accounts_2 TABLE repl.accounts
   MASTER activeds ON &#34;active&#34;
   SUBSCRIBER backupds ON &#34;backup&#34;
      RETURN TWOSAFE
STORE activeds ON &#34;active&#34;
   PORT 40000
   LOCAL COMMIT ACTION COMMIT
   RETURN SERVICES OFF WHEN REPLICATION STOPPED
   DISABLE RETURN SUBSCRIBER 5
   RESUME RETURN 100
   COMPRESS TRAFFIC ON
STORE backupds ON &#34;backup&#34;
   PORT 40001;
</pre>
<p>Illustrate conflict reporting suspend and conflict reporting resume clauses for table level replication. Use these clauses for table level replication not database replication. Issue <code dir="ltr">repschemes</code> command to show that replication scheme is created.</p>
<pre dir="ltr">Command&gt; CREATE TABLE repl.accounts (tstamp BINARY (8) NOT NULL 
PRIMARY KEY, tstamp1 BINARY (8));
Command&gt; CREATE REPLICATION repl.r2
&gt; ELEMENT elem_accounts_1 TABLE repl.accounts
&gt; CHECK CONFLICTS BY ROW TIMESTAMP
&gt; COLUMN tstamp1
&gt; UPDATE BY SYSTEM
&gt; ON EXCEPTION ROLLBACK WORK
&gt; MASTER westds ON &#34;west1&#34;
&gt; SUBSCRIBER eastds ON &#34;east1&#34;
&gt; ELEMENT elem_accounts_2 TABLE repl.accounts
&gt; CHECK CONFLICTS BY ROW TIMESTAMP 
&gt; COLUMN tstamp1
&gt; UPDATE BY SYSTEM 
&gt; ON EXCEPTION ROLLBACK WORK 
&gt; MASTER eastds ON &#34;east1&#34;
&gt; SUBSCRIBER westds ON &#34;west1&#34;
&gt; STORE westds
&gt; CONFLICT REPORTING SUSPEND AT 20
&gt; CONFLICT REPORTING RESUME AT 10;
Command&gt; REPSCHEMES;

Replication Scheme REPL.R2:

  Element: ELEM_ACCOUNTS_1
  Type: Table REPL.ACCOUNTS
  Conflict Check Column: TSTAMP1
  Conflict Exception Action: Rollback Work
  Conflict Timestamp Update: System
  Conflict Report File: (none)
  Master Store: WESTDS on WEST1 Transmit Durable
  Subscriber Store: EASTDS on EAST1

  Element: ELEM_ACCOUNTS_2
  Type: Table REPL.ACCOUNTS
  Conflict Check Column: TSTAMP1
  Conflict Exception Action: Rollback Work
  Conflict Timestamp Update: System
  Conflict Report File: (none)
  Master Store: EASTDS on EAST1 Transmit Durable
  Subscriber Store: WESTDS on WEST1

  Store: EASTDS on EAST1
    Port: (auto)
    Log Fail Threshold: (none)
    Retry Timeout: 120 seconds
    Compress Traffic: Disabled

  Store: WESTDS on WEST1
    Port: (auto)
    Log Fail Threshold: (none)
    Retry Timeout: 120 seconds
    Compress Traffic: Disabled
    Conflict Reporting Suspend: 20
    Conflict Reporting Resume: 10

1 replication scheme found.
</pre>
<p>Example of <code dir="ltr"><span class="codeinlineitalic">NetworkOperation</span></code> clause with 2 <code dir="ltr">MASTERIP</code> and <code dir="ltr">SUBSCRIBERIP</code> clauses:</p>
<pre dir="ltr">CREATE REPLICATION r ELEMENT e DATASTORE
MASTER rep1 SUBSCRIBER rep2 RETURN RECEIPT
MASTERIP &#34;1.1.1.1&#34; PRIORITY 1 SUBSCRIBERIP &#34;2.2.2.2&#34;
    PRIORITY 1
MASTERIP &#34;3.3.3.3&#34; PRIORITY 2 SUBSCRIBERIP &#34;4.4.4.4&#34;
    PRIORITY 2;
</pre>
<p>Example of <code dir="ltr"><span class="codeinlineitalic">NetworkOperation</span></code> clause. Use the default sending interface but a specific receiving network:</p>
<pre dir="ltr">CREATE REPLICATION r
ELEMENT e DATASTORE
MASTER rep1 SUBSCRIBER rep2
ROUTE MASTER rep1 ON &#34;machine1&#34; SUBSCRIBER rep2 ON &#34;machine2&#34;
SUBSCRIBERIP &#34;rep2nic2&#34; PRIORITY 1;
</pre>
<p>Example of using the <code dir="ltr"><span class="codeinlineitalic">NetworkOperation</span></code> clause with multiple subscribers:</p>
<pre dir="ltr">CREATE REPLICATION r ELEMENT e DATASTORE
MASTER rep1 SUBSCRIBER rep2,rep3
ROUTE MASTER rep1 ON &#34;machine1&#34; SUBSCRIBER rep2 ON &#34;machine2&#34;
MASTERIP &#34;1.1.1.1&#34; PRIORITY 1 SUBSCRIBERIP &#34;2.2.2.2&#34;
    PRIORITY 1
ROUTE MASTER Rep1 ON &#34;machine1&#34; SUBSCRIBER Rep3 ON &#34;machine2&#34;
MASTERIP &#34;3.3.3.3&#34; PRIORITY 2 SUBSCRIBERIP &#34;4.4.4.4&#34;;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1390"></a>See also</p>
<br/>
<code dir="ltr"><a href="#i1027059">ALTER ACTIVE STANDBY PAIR</a></code><br/>
<code dir="ltr"><a href="#i990933">ALTER REPLICATION</a></code><br/>
<code dir="ltr"><a href="#i1438072">CREATE ACTIVE STANDBY PAIR</a></code><br/>
<code dir="ltr"><a href="#i1028075">DROP ACTIVE STANDBY PAIR</a></code><br/>
<code dir="ltr"><a href="#g1513799">DROP REPLICATION</a></code></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="i992569"></a>
<div id="TTSQL300" class="refsect1">
<h2 class="refsect1"><a id="sthref1391"></a><a id="sthref1392"></a>CREATE SEQUENCE</h2>
<p>The <code dir="ltr">CREATE SEQUENCE</code> statement creates a new sequence number generator that can subsequently be used by multiple users to generate unique integers. Use the <code dir="ltr">CREATE SEQUENCE</code> statement to define the initial value of the sequence, define the increment value, the maximum or minimum value and determine if the sequence continues to generate numbers after the minimum or maximum is reached.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1393"></a>Required privilege</p>
<p><code dir="ltr">CREATE SEQUENCE</code> (if owner) or <code dir="ltr">CREATE ANY SEQUENCE</code> (if not owner).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1394"></a>SQL syntax</p>
<pre dir="ltr">CREATE SEQUENCE [<span class="italic">Owner</span>.]<span class="italic">SequenceName</span>
       [INCREMENT BY <span class="italic">IncrementValue</span>]
       [MINVALUE <span class="italic">MinimumValue</span>]
       [MAXVALUE <span class="italic">MaximumValue</span>]
       [CYCLE]
       [CACHE <span class="italic">CacheValue</span>]
       [START WITH <span class="italic">StartValue</span>]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1395"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for CREATE SEQUENCE." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t36">Parameter</th>
<th class="cellalignment6331" id="r1c2-t36">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t36" headers="r1c1-t36"><a id="i1065742"></a><code dir="ltr">SEQUENCE</code> <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">SequenceName</span></code></td>
<td class="cellalignment6332" headers="r2c1-t36 r1c2-t36">Name of the sequence number generator.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t36" headers="r1c1-t36"><code dir="ltr">INCREMENT BY</code> <code dir="ltr"><span class="codeinlineitalic">IncrementValue</span></code></td>
<td class="cellalignment6332" headers="r3c1-t36 r1c2-t36">The incremental value between consecutive numbers. This value can be either a positive or negative integer. It cannot be 0. If the value is positive, it is an ascending sequence. If the value is negative, it is descending. The default value is 1. In a descending sequence, the range starts from <code dir="ltr">MAXVALUE</code> to <code dir="ltr">MINVALUE</code>, and vice versa for ascending sequence.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t36" headers="r1c1-t36"><code dir="ltr">MINVALUE</code> <code dir="ltr"><span class="codeinlineitalic">MinimumValue</span></code></td>
<td class="cellalignment6332" headers="r4c1-t36 r1c2-t36">Specifies the minimum value for the sequence. The default minimum value is 1.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t36" headers="r1c1-t36"><code dir="ltr">MAXVALUE</code> <code dir="ltr"><span class="codeinlineitalic">MaximumValue</span></code></td>
<td class="cellalignment6332" headers="r5c1-t36 r1c2-t36">The largest possible value for an ascending sequence, or the starting value for a descending sequence. The default maximum value is (2<sup>63</sup>) -1, which is the maximum of <code dir="ltr">BIGINT</code>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t36" headers="r1c1-t36"><code dir="ltr">CYCLE</code></td>
<td class="cellalignment6332" headers="r6c1-t36 r1c2-t36"><a id="sthref1396"></a>Indicates that the sequence number generator continues to generate numbers after it reaches the maximum or minimum value. By default, sequences do not cycle. Once the number reaches the maximum value in the ascending sequence, the sequence wraps around and generates numbers from its minimum value. For a descending sequence, when the minimum value is reached, the sequence number wraps around, beginning from the maximum value. If <code dir="ltr">CYCLE</code> is not specified, the sequence number generator stops generating numbers when the maximum/minimum is reached and TimesTen returns an error.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r7c1-t36" headers="r1c1-t36"><code dir="ltr">CACHE</code> <code dir="ltr"><span class="codeinlineitalic">CacheValue</span></code></td>
<td class="cellalignment6332" headers="r7c1-t36 r1c2-t36"><code dir="ltr">CACHE</code> indicates the range of numbers that are cached each time. When a restart occurs, unused cached numbers are lost. If you specify a <code dir="ltr"><span class="codeinlineitalic">CacheValue</span></code> of 1, then each use of the sequence results in an update to the database. Larger cache values result in fewer changes to the database and less overhead. The default is 20.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r8c1-t36" headers="r1c1-t36"><code dir="ltr">START WITH</code> <code dir="ltr"><span class="codeinlineitalic">StartValue</span></code></td>
<td class="cellalignment6332" headers="r8c1-t36 r1c2-t36">Specifies the first sequence number to be generated. Use this clause to start an ascending sequence at a value that is greater than the minimum value or to start a descending sequence at a value less than the maximum. The <code dir="ltr"><span class="codeinlineitalic">StartValue</span></code> must be greater or equal <code dir="ltr"><span class="codeinlineitalic">MinimumValue</span></code> and <code dir="ltr"><span class="codeinlineitalic">StartValue</span></code> must be less than or equal to <code dir="ltr"><span class="codeinlineitalic">MaximumValue</span></code>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i1015059"></a>Description</p>
<ul>
<li>
<p>All parameters in the <code dir="ltr">CREATE SEQUENCE</code> statement must be integer values.</p>
</li>
<li>
<p>If you do not specify a value in the parameters, TimesTen defaults to an ascending sequence that starts with 1, increments by 1, has the default maximum value and does not cycle.</p>
</li>
<li>
<p>There is no <code dir="ltr">ALTER SEQUENCE</code> statement in TimesTen. To alter a sequence, use the <code dir="ltr"><a href="#i993089">DROP SEQUENCE</a></code> statement and then create a new sequence with the same name. For example, to change the <code dir="ltr">MINVALUE</code>, drop the sequence and recreate it with the same name and with the desired <code dir="ltr">MINVALUE</code>.</p>
</li>
<li>
<p>Do not create a sequence with the same name as a view or materialized view.</p>
</li>
<li>
<p>Sequences with the <code dir="ltr">CYCLE</code> attribute cannot be replicated.</p>
</li>
<li>
<p>In a replicated environment for an active standby pair, if <code dir="ltr">DDL_REPLICATION_LEVEL</code> is 3 or greater when you execute <code dir="ltr">CREATE SEQUENCE</code> on the active database, the sequence is replicated to all databases in the replication scheme. To include the sequence in the replication scheme, set <code dir="ltr">DDL_REPLICATION_ACTION</code> to <code dir="ltr">INCLUDE</code>. See <a class="olink TTREP693" href="../TTREP/alterpair.htm#TTREP693">&#34;Making DDL changes in an active standby pair&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span> for more information.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BABEFIDB"></a>Incrementing SEQUENCE values with CURRVAL and NEXTVAL<a id="sthref1397"></a><a id="sthref1398"></a><a id="sthref1399"></a></p>
<p>To refer to the <code dir="ltr">SEQUENCE</code> values in a SQL statement, use <code dir="ltr">CURRVAL</code> and <code dir="ltr">NEXTVAL</code>.</p>
<ul>
<li>
<p><code dir="ltr">CURRVAL</code> returns the value of the last call to <code dir="ltr">NEXTVAL</code> if there is one in the current session, otherwise it returns an error.</p>
</li>
<li>
<p><code dir="ltr">NEXTVAL</code> increments the current sequence value by the specified increment and returns the value for each row accessed.</p>
</li>
</ul>
<p>The current value of a sequence is a connection-specific value. If there are two concurrent connections to the same database, each connection has its own <code dir="ltr">CURRVAL</code> of the same sequence set to its last <code dir="ltr">NEXTVAL</code> reference. When the maximum value is reached, <code dir="ltr">SEQUENCE</code> either wraps or issues an error statement, depending on the value of the <code dir="ltr">CYCLE</code> option of the <code dir="ltr">CREATE SEQUENCE</code>. In the case of recovery, sequences are not rolled back. It is possible that the range of values of a sequence can have gaps; however, each sequence value is still unique.</p>
<p>If you execute a single SQL statement with multiple <code dir="ltr">NEXTVAL</code> references, TimesTen only increments the sequence once, returning the same value for all occurrences of <code dir="ltr">NEXTVAL</code>. If a SQL statement contains both <code dir="ltr">NEXTVAL</code> and <code dir="ltr">CURRVAL</code>, <code dir="ltr">NEXTVAL</code> is executed first. <code dir="ltr">CURRVAL</code> and <code dir="ltr">NEXTVAL</code> have the same value in that SQL statement.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<code dir="ltr">NEXTVAL</code> cannot be used in a query on a standby node of an active standby pair.</div>
<p><code dir="ltr">NEXTVAL</code> and <code dir="ltr">CURRVAL</code> can be used in the following.</p>
<ul>
<li>
<p>The <code dir="ltr"><span class="codeinlineitalic">SelectList</span></code> of a <code dir="ltr"><a href="#i1049447">SELECT</a></code> statement, but not the <code dir="ltr"><span class="codeinlineitalic">SelectList</span></code> of a subquery</p>
</li>
<li>
<p>The <code dir="ltr"><span class="codeinlineitalic">SelectList</span></code> of an <code dir="ltr"><a href="#g1513908">INSERT...SELECT</a></code> statement</p>
</li>
<li>
<p>The <code dir="ltr">SET</code> clause of an <code dir="ltr"><a href="#i994046">UPDATE</a></code> statement</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1400"></a>Examples</p>
<p>Create a sequence.</p>
<pre dir="ltr">CREATE SEQUENCE mysequence INCREMENT BY 1 MINVALUE 2 
       MAXVALUE 1000;
</pre>
<p>This example assumes that <code dir="ltr">tab1</code> has 1 row in the table and that <code dir="ltr">CYCLE</code> is used:</p>
<pre dir="ltr">CREATE SEQUENCE s1 MINVALUE 2 MAXVALUE 4 CYCLE;
SELECT s1.NEXTVAL FROM tab1;
/* Returns the value of 2; */
SELECT s1.NEXTVAL FROM tab1;
/* Returns the value of 3; */
SELECT s1.NEXTVAL FROM tab1;
/* Returns the value of 4; */
</pre>
<p>After the maximum value is reached, the cycle starts from the minimum value for an ascending sequence.</p>
<pre dir="ltr">SELECT s1.NEXTVAL FROM tab1;
/* Returns the value of 2; */
</pre>
<p>To create a sequence and generate a sequence number:</p>
<pre dir="ltr">CREATE SEQUENCE seq INCREMENT BY 1;
INSERT INTO student VALUES (seq.NEXTVAL, &#39;Sally&#39;);
</pre>
<p>To use a sequence in an <code dir="ltr">UPDATE SET</code> clause:</p>
<pre dir="ltr">UPDATE student SET studentno = seq.NEXTVAL WHERE name = &#39;Sally&#39;;
</pre>
<p>To use a sequence in a query:</p>
<pre dir="ltr">SELECT seq.CURRVAL FROM student;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1401"></a>See also</p>
<p><code dir="ltr"><a href="#i993089">DROP SEQUENCE</a></code></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABIIJBC"></a>
<div id="TTSQL435" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref1402"></a><a id="sthref1403"></a>CREATE SYNONYM</h2>
<p>The <code dir="ltr">CREATE SYNONYM</code> statement creates a public or private synonym for a database object. A synonym is an alias for a database object. The object can be a table, view, synonym, sequence, PL/SQL stored procedure, PL/SQL function, PL/SQL package, materialized view or cache group.</p>
<p>A <span class="italic">private</span> synonym is owned by a specific user and exists in that user&#39;s schema. A private synonym is accessible to users other than the owner only if those users have appropriate privileges on the underlying object and specify the schema along with the synonym name.</p>
<p>A <span class="italic">public</span> synonym is accessible to all users as long as the user has appropriate privileges on the underlying object.</p>
<p><code dir="ltr">CREATE SYNONYM</code> is a DDL statement.</p>
<p>Synonyms can be used in these SQL statements:</p>
<ul>
<li>
<p>DML statements: <code dir="ltr">SELECT</code>, <code dir="ltr">DELETE</code>, <code dir="ltr">INSERT</code>, <code dir="ltr">UPDATE</code>, <code dir="ltr">MERGE</code></p>
</li>
<li>
<p>Some DDL statements: <code dir="ltr">GRANT</code>, <code dir="ltr">REVOKE</code>, <code dir="ltr">CREATE TABLE ... AS SELECT</code>, <code dir="ltr">CREATE VIEW ... AS SELECT</code>, <code dir="ltr">CREATE INDEX</code>, <code dir="ltr">DROP INDEX</code></p>
</li>
<li>
<p>Some cache group statements: <code dir="ltr">LOAD CACHE GROUP</code>, <code dir="ltr">UNLOAD CACHE GROUP</code>, <code dir="ltr">REFRESH CACHE GROUP</code>, <code dir="ltr">FLUSH CACHE GROUP</code></p>
</li>
</ul>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1404"></a>Required privilege</p>
<p><code dir="ltr">CREATE SYNONYM</code> (if owner) or <code dir="ltr">CREATE ANY SYNONYM</code> (if not owner) to create a private synonym.</p>
<p><code dir="ltr">CREATE PUBLIC SYNONYM</code> to create a public synonym.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1405"></a>SQL syntax</p>
<pre dir="ltr">CREATE [OR REPLACE] [PUBLIC] SYNONYM [<span class="italic">Owner1</span>.]<span class="italic">synonym</span> FOR [<span class="italic">Owner2</span>.]<span class="italic">object</span>
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1406"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="This table describes the parameters for CREATE SYNONYM." summary="This table describes the parameters for CREATE SYNONYM." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t38">Parameter</th>
<th class="cellalignment6331" id="r1c2-t38">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t38" headers="r1c1-t38"><code dir="ltr">[OR REPLACE]</code></td>
<td class="cellalignment6332" headers="r2c1-t38 r1c2-t38">Specify <code dir="ltr">OR REPLACE</code> to recreate the synonym if it already exists. Use this clause to change the definition of an existing synonym without first dropping it.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t38" headers="r1c1-t38"><code dir="ltr">[PUBLIC]</code></td>
<td class="cellalignment6332" headers="r3c1-t38 r1c2-t38">Specify <code dir="ltr">PUBLIC</code> to create a public synonym. Public synonyms are accessible to all users, but each user must have appropriate privileges on the underlying object in order to use the synonym.
<p>When resolving references to an object, TimesTen uses a public synonym only if the object is not prefaced by a schema name.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t38" headers="r1c1-t38"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner1</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">synonym</span></code></td>
<td class="cellalignment6332" headers="r4c1-t38 r1c2-t38">Specify the owner of the synonym. You cannot specify an owner if you have specified <code dir="ltr">PUBLIC</code>. If you omit both <code dir="ltr">PUBLIC</code> and <code dir="ltr"><span class="codeinlineitalic">Owner1</span></code>, TimesTen creates the synonym in your own schema.
<p>Specify the name for the synonym, which is limited to 30 bytes.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t38" headers="r1c1-t38"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner2</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">object</span></code></td>
<td class="cellalignment6332" headers="r5c1-t38 r1c2-t38">Specify the owner in which the object resides. Specify the object name for which you are creating a synonym. If you do not qualify <code dir="ltr"><span class="codeinlineitalic">object</span></code> with <code dir="ltr"><span class="codeinlineitalic">Owner2</span></code>, the object is in your own schema. The <code dir="ltr"><span class="codeinlineitalic">Owner2</span></code> and <code dir="ltr"><span class="codeinlineitalic">object</span></code> do not need to exist when the synonym is created.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1407"></a>Description</p>
<ul>
<li>
<p>The schema object does not need to exist when its synonym is created.</p>
</li>
<li>
<p>Do not create a public synonym with the same name as a TimesTen built-in procedure.</p>
</li>
<li>
<p>In order to use the synonym, appropriate privileges must be granted to a user for the object aliased by the synonym before using the synonym.</p>
</li>
<li>
<p>A private synonym cannot have the same name as tables, views, sequences, PLSQL packages, functions, procedures, and cache groups that are in the same schema as the private synonym.</p>
</li>
<li>
<p>A public synonym may have the same name as a private synonym or an object name.</p>
</li>
<li>
<p>If the <code dir="ltr">PassThrough</code> attribute is set so that a query needs to executed in the Oracle database, the query is sent to the Oracle database without any changes. If the query uses a synonym for a table in a cache group, then a synonym with the same name must be defined for the corresponding Oracle database table for the query to be successful.</p>
</li>
<li>
<p>When an object name is used in the DML and DDL statements in which a synonym can be used, the object name is resolved as follows:</p>
<ol>
<li>
<p>Search for a match within the current schema. If no match is found, then:</p>
</li>
<li>
<p>Search for a match with a public synonym name. If no match is found, then:</p>
</li>
<li>
<p>Search for a match in the SYS schema. If no match is found, then:</p>
</li>
<li>
<p>The object does not exist.</p>
</li>
</ol>
<p>TimesTen creates a public synonym for some objects in the SYS schema. The name of the public synonym is the same as the object name. Thus steps 2 and 3 in the object name resolution can be switched without changing the results of the search.</p>
</li>
<li>
<p>In a replicated environment for an active standby pair, if <code dir="ltr">DDL_REPLICATION_LEVEL</code> is 2 or greater when you execute <code dir="ltr">CREATE SYNONYM</code> on the active database, the synonym is replicated to all databases in the replication scheme. See <a class="olink TTREP693" href="../TTREP/alterpair.htm#TTREP693">&#34;Making DDL changes in an active standby pair&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span> for more information.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1408"></a>Examples</p>
<p>As user <code dir="ltr">ttuser</code>, create a synonym for the <code dir="ltr">jobs</code> table. Verify that you can retrieve the information using the synonym. Display the contents of the <code dir="ltr">SYS.USER_SYNONYMS</code> system view.</p>
<pre dir="ltr">Command&gt; CREATE SYNONYM synjobs FOR jobs;
Synonym created.

Command&gt; SELECT FIRST 2 * FROM jobs;
&lt; AC_ACCOUNT, Public Accountant, 4200, 9000 &gt;
&lt; AC_MGR, Accounting Manager, 8200, 16000 &gt;
2 rows found.
Command&gt; SELECT FIRST 2 * FROM synjobs;
&lt; AC_ACCOUNT, Public Accountant, 4200, 9000 &gt;
&lt; AC_MGR, Accounting Manager, 8200, 16000 &gt;
2 rows found.

Command&gt; SELECT * FROM sys.user_synonyms;
&lt; SYNJOBS, TTUSER, JOBS, &lt;NULL&gt; &gt;
1 row found.
</pre>
<p>Create a public synonym for the <code dir="ltr">employees</code> table.</p>
<pre dir="ltr">Command&gt; CREATE PUBLIC SYNONYM pubemp FOR employees;
Synonym created.
</pre>
<p>Verify that <code dir="ltr">pubemp</code> is listed as a public synonym in the <code dir="ltr">SYS.ALL_SYNONYMS</code> system view.</p>
<pre dir="ltr">Command&gt; SELECT * FROM sys.all_synonyms;
&lt; PUBLIC, TABLES, SYS, TABLES, &lt;NULL&gt; &gt;
...
&lt; TTUSER, SYNJOBS, TTUSER, JOBS, &lt;NULL&gt; &gt;
&lt; PUBLIC, PUBEMP, TTUSER, EMPLOYEES, &lt;NULL&gt; &gt;
57 rows found.
</pre>
<p>Create a synonym for the <code dir="ltr">tab</code> table in the <code dir="ltr">terry</code> schema. Describe the synonym.</p>
<pre dir="ltr">Command&gt; CREATE SYNONYM syntab FOR terry.tab;
Synonym created.
Command&gt; DESCRIBE syntab;
 
Synonym TTUSER.SYNTAB:
  For Table TERRY.TAB
  Columns:
    COL1                            VARCHAR2 (10) INLINE
    COL2                            VARCHAR2 (10) INLINE

1 Synonyms found.
</pre>
<p>Redefine the <code dir="ltr">synjobs</code> synonym to be an alias for the <code dir="ltr">employees</code> table by using the <code dir="ltr">OR REPLACE</code> clause. Describe <code dir="ltr">synjobs</code>.</p>
<pre dir="ltr">Command&gt; CREATE OR REPLACE synjobs FOR employees;
Synonym created.
 
Command&gt; DESCRIBE synjobs;
 
Synonym TTUSER.SYNJOBS:
  For Table TTUSER.EMPLOYEES
  Columns:
   *EMPLOYEE_ID                     NUMBER (6) NOT NULL
    FIRST_NAME                      VARCHAR2 (20) INLINE
    LAST_NAME                       VARCHAR2 (25) INLINE NOT NULL
    EMAIL                           VARCHAR2 (25) INLINE UNIQUE NOT NULL
    PHONE_NUMBER                    VARCHAR2 (20) INLINE
    HIRE_DATE                       DATE NOT NULL
    JOB_ID                          VARCHAR2 (10) INLINE NOT NULL
    SALARY                          NUMBER (8,2)
    COMMISSION_PCT                  NUMBER (2,2)
    MANAGER_ID                      NUMBER (6)
    DEPARTMENT_ID                   NUMBER (4)
 
1 Synonyms found.
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1409"></a>See also</p>
<p><code dir="ltr"><a href="#BABGEEID">DROP SYNONYM</a></code></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1211666"></a>
<div id="TTSQL302" class="refsect1">
<h2 class="refsect1">CREATE TABLE<a id="sthref1410"></a><a id="sthref1411"></a></h2>
<p>The <code dir="ltr">CREATE TABLE</code> statement defines a table.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1412"></a>Required privilege</p>
<p><code dir="ltr">CREATE TABLE</code> (if owner) or <code dir="ltr">CREATE ANY TABLE</code> (if not owner).</p>
<p>The owner of the created table must have the <code dir="ltr">REFERENCES</code> privilege on tables referenced by the <code dir="ltr">REFERENCE</code> clause.</p>
<p><code dir="ltr">ADMIN</code> privilege if replicating a new table across an active standby pair when <code dir="ltr">DDL_REPLICATION_LEVEL=2</code> or greater and <code dir="ltr">DDL_REPLICATION_ACTION</code>=<code dir="ltr">INCLUDE</code>. These attributes cause the <code dir="ltr">CREATE TABLE</code> to implicitly execute an <code dir="ltr">ALTER ACTIVE STANDBY PAIR</code>... <code dir="ltr">INCLUDE TABLE</code> statement. See <a href="#i1333852">&#34;ALTER SESSION&#34;</a> for more details.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1413"></a>SQL syntax</p>
<p>You cannot specify a <code dir="ltr">PRIMARY</code> <code dir="ltr">KEY</code> in both the <code dir="ltr"><span class="codeinlineitalic">ColumnDefinition</span></code> clause and the <code dir="ltr">PRIMARY</code> <code dir="ltr">KEY</code> clause.</p>
<p>The syntax for a persistent table:</p>
<pre dir="ltr">CREATE TABLE [<span class="italic">Owner</span>.]<span class="italic">TableName</span>
(
    {{<span class="italic">ColumnDefinition</span>} [,...]
     [PRIMARY KEY (<span class="italic">ColumnName</span> [,...]) |
     [[CONSTRAINT ForeignKeyName]
        FOREIGN KEY ([<span class="italic">ColumnName</span>] [,...])
        REFERENCES <span class="italic">RefTableName</span>
            [(<span class="italic">ColumnName</span> [,...])] [ON DELETE CASCADE]] [...]
    }
)
[<span class="italic">TableCompression</span>]
[UNIQUE HASH ON (<span class="italic">HashColumnName</span> [,...])
    PAGES = <span class="italic">PrimaryPages</span>]
[AGING {LRU|
         USE ColumnName
             LIFETIME Num1 {SECOND[S] | MINUTE[S] | HOUR[S] |DAY[S]}
               [CYCLE Num2 {SECOND[S] | MINUTE[S] |HOUR[S] |DAY[S]}]
       }[ON|OFF]
]
[AS <span class="italic">SelectQuery</span>]
</pre>
<p>The syntax for a global temporary table is:</p>
<pre dir="ltr"><a id="sthref1414"></a><a id="sthref1415"></a><a id="sthref1416"></a>CREATE GLOBAL TEMPORARY TABLE [<span class="italic">Owner</span>.]<span class="italic">TableName</span>
(
    {{<span class="italic">ColumnDefinition</span>} [,...]
     [PRIMARY KEY (<span class="italic">ColumnName</span> [,...]) |
     [[CONSTRAINT <span class="italic">ForeignKeyName</span>]
        FOREIGN KEY ([<span class="italic">ColumnName</span>] [,...])
        REFERENCES <span class="italic">RefTableName</span>
             [(<span class="italic">ColumnName</span> [,...])] [ON DELETE CASCADE]] [...]
      }
)
[UNIQUE HASH ON (<span class="italic">HashColumnName</span> [,...])
    PAGES = <span class="italic">PrimaryPages</span>]
[ON COMMIT { DELETE | PRESERVE } ROWS 
]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1417"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for CREATE TABLE." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t39">Parameter</th>
<th class="cellalignment6331" id="r1c2-t39">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t39" headers="r1c1-t39"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">TableName</span></code></td>
<td class="cellalignment6332" headers="r2c1-t39 r1c2-t39">Name to be assigned to the new table. Two tables cannot have the same owner name and table name.
<p>If you do not specify the owner name, your login name becomes the owner name for the new table. Owners of tables in TimesTen are determined by the user ID settings or login names. Oracle Database table owner names must always match TimesTen table owner names.</p>
<p>For rules on creating names, see <a href="names.htm#i987960">&#34;Basic names&#34;</a>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t39" headers="r1c1-t39"><code dir="ltr">G<a id="sthref1418"></a><a id="sthref1419"></a><a id="sthref1420"></a>LOBAL TEMPORARY</code></td>
<td class="cellalignment6332" headers="r3c1-t39 r1c2-t39">Specifies that the table being created is a global temporary table. A temporary table is similar to a persistent table but it is effectively materialized only when referenced in a connection.
<p>A global temporary table definition is persistent and is visible to all connections, but the table instance is local to each connection. It is created when a command referencing the table is compiled for a connection and dropped when the connection is disconnected. All instances of the same temporary table have the same name but they are identified by an additional connection ID together with the table name. Global temporary tables are allocated in temp space.</p>
<p>The contents of a global temporary table cannot be shared between connections. Each connection sees only its own content of the table and compiled commands that reference temporary tables are not shared among connections.</p>
<p>When <code dir="ltr">DDL_REPLICATION_LEVEL</code> is 2 or greater, the creation of a global temporary table is replicated in an active standby pair, but the global temporary table is not included in the replication scheme.</p>
<p>Temporary tables are automatically excluded from active standby pairs or when the <code dir="ltr">DATASTORE</code> element has been specified.</p>
<p>A cache group table cannot be defined as a temporary table.</p>
<p>Changes to temporary tables cannot be tracked with XLA.</p>
<p>Operations on temporary tables do generate log records. The amount of log they generate is less than for permanent tables.</p>
<p>Truncate table is not supported with global temporary tables.</p>
<p>Local temporary tables are not supported.</p>
<p>No object privileges are needed to access global temporary tables.</p>
<p>Do not specify the <code dir="ltr">AS</code> <code dir="ltr"><span class="codeinlineitalic">SelectQuery</span></code> clause with global temporary tables.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t39" headers="r1c1-t39"><code dir="ltr"><span class="codeinlineitalic">ColumnDefinition</span></code></td>
<td class="cellalignment6332" headers="r4c1-t39 r1c2-t39">An individual column in a table. Each table must have at least one column. See <a href="#i992776">&#34;Column Definition&#34;</a>.
<p>If you specify the <code dir="ltr">AS</code> <code dir="ltr"><span class="codeinlineitalic">SelectQuery</span></code> clause, <code dir="ltr"><span class="codeinlineitalic">ColumnDefinition</span></code> is optional.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t39" headers="r1c1-t39"><code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code></td>
<td class="cellalignment6332" headers="r5c1-t39 r1c2-t39">Names of the columns that form the primary key for the table to be created. Up to 16 columns can be specified for the primary key. For a foreign key, the <code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code> is optional. If not specified for a foreign key, the reference is to the parent table&#39;s primary key.
<p>If you specify the <code dir="ltr">AS</code> <code dir="ltr"><span class="codeinlineitalic">SelectQuery</span></code> clause, you do not have to specify the <code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code>. Do not specify the data type with the <code dir="ltr">AS</code> <code dir="ltr"><span class="codeinlineitalic">SelectQuery</span></code> clause.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t39" headers="r1c1-t39"><code dir="ltr"><a id="sthref1421"></a><a id="sthref1422"></a><a id="sthref1423"></a>PRIMARY KEY</code></td>
<td class="cellalignment6332" headers="r6c1-t39 r1c2-t39"><code dir="ltr">PRIMARY KEY</code> may only be specified once in a table definition. It provides a way of identifying one or more columns that, together, form the primary key of the table. The contents of the primary key have to be unique and <code dir="ltr">NOT NULL</code>. You cannot specify a column as both <code dir="ltr">UNIQUE</code> and a single column <code dir="ltr">PRIMARY KEY</code>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r7c1-t39" headers="r1c1-t39"><code dir="ltr">CONSTRAINT</code> <code dir="ltr"><span class="codeinlineitalic">ForeignKeyName</span></code></td>
<td class="cellalignment6332" headers="r7c1-t39 r1c2-t39">Specifies an optional user-defined name for a foreign key. If not provided by the user, the system provides a default name.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r8c1-t39" headers="r1c1-t39"><a id="i992736"></a><code dir="ltr"><a id="sthref1424"></a><a id="sthref1425"></a><a id="sthref1426"></a>FOREIGN KEY</code></td>
<td class="cellalignment6332" headers="r8c1-t39 r1c2-t39">This specifies a foreign key constraint between the new table and the referenced table identified by <code dir="ltr"><span class="codeinlineitalic">RefTableName</span></code>. There are two lists of columns specified in the foreign key constraint.
<p>Columns in the first list are columns of the new table and are called the referencing columns. Columns in the second list are columns of the referenced table and are called referenced columns. These two lists must match in data type, including length, precision and scale. The referenced table must already have a primary key or unique index on the referenced column.</p>
<p>The column name list of referenced columns is optional. If omitted, the primary index of <code dir="ltr"><span class="codeinlineitalic">RefTableName</span></code> is used.</p>
<p>The declaration of a foreign key creates a range index on the referencing columns. The user cannot drop the referenced table or its referenced index until the referencing table is dropped.</p>
<p>The foreign key constraint asserts that each row in the new table must match a row in the referenced table such that the contents of the referencing columns are equal to the contents of the referenced columns. Any <code dir="ltr"><a href="#g1513888">INSERT</a></code>, <code dir="ltr"><a href="#BABBJCCI">DELETE</a></code> or <code dir="ltr"><a href="#i994046">UPDATE</a></code> statements that violate the constraint return TimesTen error 3001.</p>
<p>TimesTen supports SQL-92 <code dir="ltr">&#34;NO ACTION&#34;</code> update and delete rules and <code dir="ltr">ON DELETE CASCADE</code>. Foreign key constraints are not deferrable.</p>
<p>A foreign key can be defined on a global temporary table, but it can only reference a global temporary table. If a parent table is defined with <code dir="ltr">COMMIT DELETE</code>, the child table must also have the <code dir="ltr">COMMIT DELETE</code> attribute.</p>
<p>A foreign key cannot reference an active parent table. An active parent table is one that has some instance materialized for a connection.</p>
<p>If you specify the <code dir="ltr">AS</code> <code dir="ltr"><span class="codeinlineitalic">SelectQuery</span></code> clause, you cannot define a foreign key on the table you are creating.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r9c1-t39" headers="r1c1-t39"><code dir="ltr">[ON DELETE</code> <code dir="ltr">CASCADE]</code></td>
<td class="cellalignment6332" headers="r9c1-t39 r1c2-t39">Enables the <code dir="ltr">ON DELETE CASCADE</code> referential action. If specified, when rows containing referenced key values are deleted from a parent table, rows in child tables with dependent foreign key values are also deleted.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r10c1-t39" headers="r1c1-t39"><code dir="ltr"><span class="codeinlineitalic">TableCompression</span></code></td>
<td class="cellalignment6332" headers="r10c1-t39 r1c2-t39">Defines compression at the column level, which stores data more efficiently. Eliminates redundant storage of duplicate values within columns and improves the performance of SQL queries that perform full table scans. See <a href="#BABFGIHD">&#34;In-memory columnar compression of tables&#34;</a> for details.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r11c1-t39" headers="r1c1-t39"><code dir="ltr">UNIQUE</code></td>
<td class="cellalignment6332" headers="r11c1-t39 r1c2-t39"><code dir="ltr">UNIQUE</code> provides a way of identifying a column where each row must contain a unique value.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r12c1-t39" headers="r1c1-t39"><code dir="ltr"><a id="sthref1427"></a><a id="sthref1428"></a>UNIQUE HASH ON</code></td>
<td class="cellalignment6332" headers="r12c1-t39 r1c2-t39">Hash index for the table. This parameter is used for equality predicates. <code dir="ltr">UNIQUE HASH ON</code> requires that a primary key be defined.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r13c1-t39" headers="r1c1-t39"><code dir="ltr"><span class="codeinlineitalic">HashColumnName</span></code></td>
<td class="cellalignment6332" headers="r13c1-t39 r1c2-t39">Column defined in the table that is to participate in the hash key of this table. The columns specified in the hash index must be identical to the columns in the primary key.
<p>If you specify the <code dir="ltr">AS</code> <code dir="ltr"><span class="codeinlineitalic">SelectQuery</span></code> clause, you must define <code dir="ltr"><span class="codeinlineitalic">HashColumnName</span></code> on the table you are creating.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r14c1-t39" headers="r1c1-t39"><code dir="ltr">PAGES</code> = <code dir="ltr"><span class="codeinlineitalic">PrimaryPages</span></code></td>
<td class="cellalignment6332" headers="r14c1-t39 r1c2-t39">Sizes the hash index to reflect the expected number of pages in your table. To determine the value for <code dir="ltr"><span class="codeinlineitalic">PrimaryPages</span></code>, divide the number of expected rows in your table by 256. For example, if your table has 256,000 rows, specify 1000 for <code dir="ltr"><span class="codeinlineitalic">PrimaryPages</span></code> (256000/256=1000).
<p>The value for <code dir="ltr"><span class="codeinlineitalic">PrimaryPages</span></code> must be a positive constant and must be greater than 0.</p>
<p>If your estimate for <code dir="ltr"><span class="codeinlineitalic">PrimaryPages</span></code> is too small, performance may be degraded.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r15c1-t39" headers="r1c1-t39"><code dir="ltr">[ON COMMIT</code> <code dir="ltr">{DELETE|PRESERVE} ROWS]</code></td>
<td class="cellalignment6332" headers="r15c1-t39 r1c2-t39">The optional statement specifies whether to delete or preserve rows when a transaction that touches a global temporary table is committed. If not specified, the rows of the temporary table are deleted.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r16c1-t39" headers="r1c1-t39"><code dir="ltr">[AGING LRU [ON|OFF]]</code></td>
<td class="cellalignment6332" headers="r16c1-t39 r1c2-t39">If specified, defines the LRU aging policy for the table. The LRU aging policy defines the type of aging (least recently used (LRU)), the aging state (<code dir="ltr">ON</code> or <code dir="ltr">OFF</code>) and the LRU aging attributes.
<p>Set the aging state to either <code dir="ltr">ON</code> or <code dir="ltr">OFF</code>. <code dir="ltr">ON</code> indicates that the aging state is enabled and aging is done automatically. <code dir="ltr">OFF</code> indicates that the aging state is disabled and aging is not done automatically. In both cases, the aging policy is defined. The default is <code dir="ltr">ON</code>.</p>
<p>LRU attributes are defined by calling the <code dir="ltr">ttAgingLRUConfig</code> procedure. LRU attributes are not defined at the SQL level.</p>
<p>For more information about LRU aging, see <a class="olink TTOPR348" href="../TTOPR/comp.htm#TTOPR348">&#34;Implementing aging in your tables&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r17c1-t39" headers="r1c1-t39"><code dir="ltr">[AGING USE</code> <code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code><code dir="ltr">...</code><code dir="ltr">[ON|OFF]]</code></td>
<td class="cellalignment6332" headers="r17c1-t39 r1c2-t39">If specified, defines the time-based aging policy for the table. The time-based aging policy defines the type of aging (time-based), the aging state (<code dir="ltr">ON</code> or <code dir="ltr">OFF</code>) and the time-based aging attributes.
<p>Set the aging state to either <code dir="ltr">ON</code> or <code dir="ltr">OFF</code>. <code dir="ltr">ON</code> indicates that the aging state is enabled and aging is done automatically. <code dir="ltr">OFF</code> indicates that the aging state is disabled and aging is not done automatically. In both cases, the aging policy is defined. The default is <code dir="ltr">ON</code>.</p>
<p>Time-based aging attributes are defined at the SQL level and are specified by the <code dir="ltr">LIFETIME</code> and <code dir="ltr">CYCLE</code> clauses.</p>
<p>Specify <code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code> as the name of the column used for time-based aging. Define the column as <code dir="ltr">NOT NULL</code> and of data type <code dir="ltr">TIMESTAMP</code> or <code dir="ltr">DATE</code>. The value of this column is subtracted from <code dir="ltr">SYSDATE</code>, truncated using the specified unit (second, minute, hour, day) and then compared to the <code dir="ltr">LIFETIME</code> value. If the result is greater than the <code dir="ltr">LIFETIME</code> value, then the row is a candidate for aging.</p>
<p>The values of the column that you use for aging are updated by your applications. If the value of this column is unknown for some rows, and you do not want the rows to be aged, define the column with a large default value (the column cannot be <code dir="ltr">NULL</code>).</p>
<p>You can define your aging column with a data type of <code dir="ltr">TT_TIMESTAMP</code> or <code dir="ltr">TT_DATE</code>. If you choose data type <code dir="ltr">TT_DATE</code>, then you must specify the <code dir="ltr">LIFETIME</code> unit as days.</p>
<p>If you specify the AS <code dir="ltr"><span class="codeinlineitalic">SelectQuery</span></code> clause, you must define the <code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code> on the table you are creating.</p>
<p>For more information about time-based aging, see <a class="olink TTOPR348" href="../TTOPR/comp.htm#TTOPR348">&#34;Implementing aging in your tables&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database Operations Guide</span>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r18c1-t39" headers="r1c1-t39"><code dir="ltr">LIFETIME</code> <code dir="ltr"><span class="codeinlineitalic">Num1</span></code> <code dir="ltr">{SECOND[S]| MINUTE[S]|HOUR[S]|</code> <code dir="ltr">DAY[S]}</code></td>
<td class="cellalignment6332" headers="r18c1-t39 r1c2-t39"><code dir="ltr">LIFETIME</code> is a time-based aging attribute and is a required clause.
<p>Specify the <code dir="ltr">LIFETIME</code> clause after the <code dir="ltr">AGING USE</code> <code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code> clause.</p>
<p>The <code dir="ltr">LIFETIME</code> clause specifies the minimum amount of time data is kept in cache.</p>
<p>Specify <code dir="ltr"><span class="codeinlineitalic">Num1</span></code> as a positive integer constant to indicate the unit of time expressed in seconds, minutes, hours or days that rows should be kept in cache. Rows that exceed the <code dir="ltr">LIFETIME</code> value are aged out (deleted from the table). If you define your aging column with data type <code dir="ltr">TT_DATE</code>, then you must specify <code dir="ltr">DAYS</code> as the <code dir="ltr">LIFETIME</code> unit.</p>
<p>The concept of time resolution is supported. If <code dir="ltr">DAYS</code> is specified as the time resolution, then all rows whose timestamp belongs to the same day are aged out at the same time. If <code dir="ltr">HOURS</code> is specified as the time resolution, then all rows with timestamp values within that hour are aged at the same time. A <code dir="ltr">LIFETIME</code> of 3 days is different than a <code dir="ltr">LIFETIME</code> of 72 hours (3*24) or a <code dir="ltr">LIFETIME</code> of 432 minutes (3*24*60).</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r19c1-t39" headers="r1c1-t39">[<code dir="ltr">CYCLE</code> <code dir="ltr"><span class="codeinlineitalic">Num2</span></code> <code dir="ltr">{SECOND[S] |MINUTE[S]|HOUR[S]|</code> <code dir="ltr">DAY[S]}]</code></td>
<td class="cellalignment6332" headers="r19c1-t39 r1c2-t39"><code dir="ltr">CYCLE</code> is a time-based aging attribute and is optional. Specify the <code dir="ltr">CYCLE</code> clause after the <code dir="ltr">LIFETIME</code> clause.
<p>The <code dir="ltr">CYCLE</code> clause indicates how often the system should examine rows to see if data exceeds the specified <code dir="ltr">LIFETIME</code> value and should be aged out (deleted).</p>
<p>Specify <code dir="ltr"><span class="codeinlineitalic">Num2</span></code> as a positive integer constant.</p>
<p>If you do not specify the <code dir="ltr">CYCLE</code> clause, then the default value is 5 minutes. If you specify 0 for <code dir="ltr"><span class="codeinlineitalic">Num2,</span></code> then the aging thread wakes up every second.</p>
<p>If the aging state is <code dir="ltr">OFF</code>, then aging is not done automatically and the <code dir="ltr">CYCLE</code> clause is ignored.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r20c1-t39" headers="r1c1-t39"><code dir="ltr">AS</code> <code dir="ltr"><span class="codeinlineitalic">SelectQuery</span></code></td>
<td class="cellalignment6332" headers="r20c1-t39 r1c2-t39">If specified, creates a new table from the contents of the result set of the <code dir="ltr"><span class="codeinlineitalic">SelectQuery</span></code>. The rows returned by <code dir="ltr"><span class="codeinlineitalic">SelectQuery</span></code> are inserted into the table.
<p>Data types and data type lengths are derived from <code dir="ltr"><span class="codeinlineitalic">SelectQuery</span></code>.</p>
<p><code dir="ltr"><span class="codeinlineitalic">SelectQuery</span></code> is a valid <code dir="ltr">SELECT</code> statement that may or may not contain a subquery.</p>
<p>You can specify a statement level optimizer hint after the <code dir="ltr">SELECT</code> verb. For more information on statement level optimizer hints, see <a href="#BABJFIBC">&#34;Statement level optimizer hints&#34;</a>.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div id="TTSQL303" class="refsect2"><a id="i992776"></a>
<h3 class="refsect2"><a id="sthref1429"></a><a id="sthref1430"></a>Column Definition</h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1431"></a>SQL syntax</p>
<p>You can only use the keyword, <code dir="ltr">ENABLE</code>, when defining columns in the <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> statement.</p>
<p>For all data types other than LOBs, the syntax is as follows:</p>
<pre dir="ltr"><span class="italic">ColumnName</span> <span class="italic">ColumnDataType</span>
 [DEFAULT <span class="italic">DefaultVal</span>]
 [[NOT] INLINE]
 [PRIMARY KEY | UNIQUE | 
 NULL [UNIQUE] | 
 NOT NULL [ENABLE] [PRIMARY KEY | UNIQUE] 
]
</pre>
<p>For LOB data types, you cannot create a primary key or unique constraint on LOB columns. In addition, LOB data types are stored out of line, so the <code dir="ltr">INLINE</code> attribute cannot be specified.</p>
<p>For all LOB data types, the syntax is:</p>
<pre dir="ltr"><span class="italic">ColumnName</span> <span class="italic">ColumnDataType</span>
 [DEFAULT <span class="italic">DefaultVal</span>] [[NOT] NULL [ENABLE]] |
 [[NOT] NULL [ENABLE]] [DEFAULT <span class="italic">DefaultVal</span>]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1432"></a>Parameters</p>
<p>The column definition has the following parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for the column definition of CREATE TABLE." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t40">Parameter</th>
<th class="cellalignment6331" id="r1c2-t40">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t40" headers="r1c1-t40"><code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code></td>
<td class="cellalignment6332" headers="r2c1-t40 r1c2-t40">Name to be assigned to one of the columns in the new table. No two columns in the table can be given the same name. <a id="sthref1433"></a><a id="sthref1434"></a>A table can have a maximum of 1000 columns.
<p>If you specify the <code dir="ltr">AS</code> <code dir="ltr"><span class="codeinlineitalic">SelectQuery</span></code> clause, <code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code> is optional. The number of column names must match the number of columns in <code dir="ltr"><span class="codeinlineitalic">SelectQuery</span></code>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t40" headers="r1c1-t40"><code dir="ltr"><span class="codeinlineitalic">ColumnDataType</span></code></td>
<td class="cellalignment6332" headers="r3c1-t40 r1c2-t40">Type of data the column can contain. Some data types require that you indicate a length. See <a href="types.htm#i1008748">Chapter 1, &#34;Data Types&#34;</a> for the data types that can be specified.
<p>If you specify the <code dir="ltr">AS</code> <code dir="ltr"><span class="codeinlineitalic">SelectQuery</span></code> clause, do not specify <code dir="ltr"><span class="codeinlineitalic">ColumnDataType</span></code>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t40" headers="r1c1-t40"><a id="i1065332"></a><code dir="ltr">DEFAULT</code> <code dir="ltr"><span class="codeinlineitalic">DefaultVal</span></code></td>
<td class="cellalignment6332" headers="r4c1-t40 r1c2-t40">Indicates that if a value is not specified for the column in an <code dir="ltr">INSERT</code> statement, the default value <code dir="ltr"><span class="codeinlineitalic">DefaultVal</span></code> is inserted into the column. The default value specified must have a type that is compatible with the data type of the column. A default value can be as long as the data type of the associated column allows. You cannot assign a default value for the <code dir="ltr">ROWID</code> data type or for columns in read-only cache groups. In addition, you cannot use a function within the <code dir="ltr">DEFAULT</code> clause.
<p>The following are legal data types for <code dir="ltr"><span class="codeinlineitalic">DefaultVal</span></code>:</p>
<ul>
<li>
<p><code dir="ltr"><a href="#i1021670"><code dir="ltr">NULL</code></a></code> (below)</p>
</li>
<li>
<p>Constant expression (an expression that is evaluated to a constant value)</p>
</li>
<li>
<p><code dir="ltr">SYSDATE</code> and <code dir="ltr">GETDATE</code> (<a href="function.htm#i1001775">&#34;SYSDATE and GETDATE&#34;</a>)</p>
</li>
<li>
<p><code dir="ltr">SYSTEM_USER</code> (<a href="function.htm#i1120532">&#34;SYSTEM_USER&#34;</a>)</p>
</li>
</ul>
<p>If the default value is one of the users, the data type of the column must be either <code dir="ltr">CHAR</code> or <code dir="ltr">VARCHAR2</code> and the width of the column must be at least 30 characters.</p>
<p>If you specify the <code dir="ltr">AS</code> <code dir="ltr"><span class="codeinlineitalic">SelectQuery</span></code> clause, optionally, you can specify the <code dir="ltr">DEFAULT</code> clause on the table you are creating.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t40" headers="r1c1-t40"><code dir="ltr"><a id="sthref1435"></a><a id="sthref1436"></a><a id="sthref1437"></a>INLINE|</code><code dir="ltr">NOT INLINE</code></td>
<td class="cellalignment6332" headers="r5c1-t40 r1c2-t40">By default, variable-length columns whose declared column length is greater than 128 bytes are stored out of line. Variable-length columns whose declared column length is less than or equal to 128 bytes are stored inline. The default behavior can be overridden during table creation through the use of the <code dir="ltr">INLINE</code> and <code dir="ltr">NOT INLINE</code> keywords.
<p>If you specify the <code dir="ltr">AS</code> <code dir="ltr"><span class="codeinlineitalic">SelectQuery</span></code> clause, optionally, you can specify the <code dir="ltr">INLINE | NOT INLINE</code> clause on the table you are creating.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t40" headers="r1c1-t40"><a id="i1021670"></a><code dir="ltr">NULL</code></td>
<td class="cellalignment6332" headers="r6c1-t40 r1c2-t40">Indicates that the column can contain <code dir="ltr">NULL</code> values.
<p>If you specify the <code dir="ltr">AS</code> <code dir="ltr"><span class="codeinlineitalic">SelectQuery</span></code> clause, optionally, you can specify <code dir="ltr">NULL</code> on the table you are creating.</p>
<p>If you specify <code dir="ltr">NULL</code>, you cannot specify <code dir="ltr">ENABLE</code>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r7c1-t40" headers="r1c1-t40"><a id="i1021643"></a><code dir="ltr">NOT NULL [ENABLE]</code></td>
<td class="cellalignment6332" headers="r7c1-t40 r1c2-t40">Indicates that the column cannot contain <code dir="ltr">NULL</code> values. If <code dir="ltr">NOT NULL</code> is specified, any statement that attempts to place a <code dir="ltr">NULL</code> value in the column is rejected.
<p>If you specify the <code dir="ltr">AS</code> <code dir="ltr"><span class="codeinlineitalic">SelectQuery</span></code> clause, optionally, you can specify <code dir="ltr">NOT NULL [ENABLE]</code> on the table you are creating.</p>
<p>If you specify <code dir="ltr">NOT</code> <code dir="ltr">NULL</code>, you can optionally specify <code dir="ltr">ENABLE</code>. Because <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraints are always enabled, you are not required to specify <code dir="ltr">ENABLE</code>.</p>
<p>You can only use the keyword, <code dir="ltr">ENABLE</code>, when defining columns in the <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> statement.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r8c1-t40" headers="r1c1-t40"><a id="i1021662"></a><code dir="ltr">UNIQUE</code></td>
<td class="cellalignment6332" headers="r8c1-t40 r1c2-t40">A unique constraint placed on the column. No two rows in the table may have the same value for this column. TimesTen creates a unique range index to enforce uniqueness. So a column with a unique constraint can use more memory and time during execution than a column without the constraint. Cannot be used with <code dir="ltr">PRIMARY KEY</code>.
<p>If you specify the <code dir="ltr">AS</code> <code dir="ltr"><span class="codeinlineitalic">SelectQuery</span></code> clause, optionally, you can specify <code dir="ltr">UNIQUE</code> on the table you are creating.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r9c1-t40" headers="r1c1-t40"><a id="i1021654"></a><code dir="ltr">PRIMARY KEY</code></td>
<td class="cellalignment6332" headers="r9c1-t40 r1c2-t40">A unique <code dir="ltr">NOT NULL</code> constraint placed on the column. No two rows in the table may have the same value for this column. Cannot be used with <code dir="ltr">UNIQUE</code>.
<p>If you specify the <code dir="ltr">AS</code> <code dir="ltr"><span class="codeinlineitalic">SelectQuery</span></code> clause, optionally, you can specify <code dir="ltr">PRIMARY KEY</code> on the table you are creating.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i992813"></a>Description</p>
<ul>
<li>
<p>All columns participating in the primary key are <code dir="ltr">NOT NULL</code>.</p>
</li>
<li>
<p>A <code dir="ltr">PRIMARY KEY</code> that is specified in the <code dir="ltr"><span class="codeinlineitalic">ColumnDefinition</span></code> can only be specified for one column.</p>
</li>
<li>
<p>You cannot specify a <code dir="ltr">PRIMARY</code> <code dir="ltr">KEY</code> in both the <code dir="ltr"><span class="codeinlineitalic">ColumnDefinition</span></code> clause and the <code dir="ltr">PRIMARY</code> <code dir="ltr">KEY</code> clause.</p>
</li>
<li>
<p>For both primary key and foreign key constraints, duplicate column names are not allowed in the constraint column list.</p>
</li>
<li>
<p>If <code dir="ltr">ON DELETE CASCADE</code> is specified on a foreign key constraint for a child table, a user can delete rows from a parent table for which the user has the <code dir="ltr">DELETE</code> privilege without requiring explicit <code dir="ltr">DELETE</code> privilege on the child table.</p>
</li>
<li>
<p>To change the <code dir="ltr">ON DELETE CASCADE</code> triggered action, drop then redefine the foreign key constraint.</p>
</li>
<li>
<p>You cannot create a table that has a foreign key referencing a cached table.</p>
</li>
<li>
<p><code dir="ltr">UNIQUE</code> column constraint and default column values are not supported with materialized views.</p>
</li>
<li>
<p>Use the <code dir="ltr"><a href="#i1407906">ALTER TABLE</a></code> statement to change the representation of the primary key index for a table.</p>
</li>
<li>
<p>If you specify the <code dir="ltr">AS</code> <code dir="ltr"><span class="codeinlineitalic">SelectQuery</span></code> clause:</p>
<ul>
<li>
<p>Data types and data type lengths are derived from the <code dir="ltr"><span class="codeinlineitalic">SelectQuery</span></code>. Do not specify data types on the columns of the table you are creating.</p>
</li>
<li>
<p>TimesTen defines on columns in the new table <code dir="ltr">NOT NULL</code> constraints that were explicitly created on the corresponding columns of the selected table if <code dir="ltr"><span class="codeinlineitalic">SelectQuery</span></code> selects the column rather than an expression containing the column.</p>
</li>
<li>
<p><code dir="ltr">NOT NULL</code> constraints that were implicitly created by TimesTen on columns of the selected table (for example, primary keys) are carried over to the new table. You can override the <code dir="ltr">NOT NULL</code> constraint on the selected table by defining the new column as <code dir="ltr">NULL</code>. For example:</p>
<pre dir="ltr">CREATE TABLE newtable (newcol NULL) AS SELECT (col) FROM tab;
</pre></li>
<li>
<p><code dir="ltr">NOT INLINE</code>/<code dir="ltr">INLINE</code> attributes are carried over to the new table.</p>
</li>
<li>
<p>Unique keys, foreign keys, indexes and column default values are not carried over to the new table.</p>
</li>
<li>
<p>If all expressions in <code dir="ltr"><span class="codeinlineitalic">SelectQuery</span></code> are columns, rather than expressions, then you can omit the columns from the table you are creating. In this case, the name of the columns are the same as the columns in <code dir="ltr"><span class="codeinlineitalic">SelectQuery</span></code>. If the <code dir="ltr"><span class="codeinlineitalic">SelectQuery</span></code> contains an expression rather than a simple column reference, either specify a column alias or name the column in the <code dir="ltr">CREATE TABLE</code> statement.</p>
</li>
<li>
<p>Do not specify foreign keys on the table you are creating.</p>
</li>
<li>
<p>Do not specify the <code dir="ltr">SELECT FOR UPDATE</code> clause in <code dir="ltr"><span class="codeinlineitalic">SelectQuery</span></code>.</p>
</li>
<li>
<p>The <code dir="ltr">ORDER BY</code> clause is not supported when you use the <code dir="ltr">AS</code> <code dir="ltr"><span class="codeinlineitalic">SelectQuery</span></code> clause.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">SelectQuery</span></code> cannot contain set operators <code dir="ltr">UNION</code>, <code dir="ltr">MINUS</code>, <code dir="ltr">INTERSECT</code>.</p>
</li>
<li>
<p>In a replicated environment, be aware of the following.</p>
<p>To include a new table, including global temporary tables, into an active standby pair when the table is created, set <code dir="ltr">DDL_REPLICATION_LEVEL</code> to 2 or greater and <code dir="ltr">DDL_REPLICATION_ACTION</code> to <code dir="ltr">INCLUDE</code> before executing the <code dir="ltr">CREATE TABLE</code> statement on the active database. In this configuration, the table is included in the active standby pair and is replicated to all databases in the replication scheme.</p>
<p>If <code dir="ltr">DDL_REPLICATION_ACTION</code> is set to <code dir="ltr">EXCLUDE</code>, then the new table is not included in the active standby pair but is replicated to all databases in the replication scheme. Any DML issued on that table will not be replicated, as the table will not be part of the replication scheme. To enable DML replication for the table, you must execute the <code dir="ltr">ALTER ACTIVE STANDBY PAIR ... INCLUDE TABLE</code> statement to include the table. In this case, the table must be empty and present on all databases before executing <code dir="ltr">ALTER ACTIVE STANDBY PAIR ... INCLUDE TABLE</code>, as the table contents will be truncated when this statement is executed.</p>
<p>See <a href="#i1333852">&#34;ALTER SESSION&#34;</a> for more information.</p>
</li>
</ul>
</li>
<li>
<p>By default, a range index is created to enforce the primary key. Use the <code dir="ltr">UNIQUE HASH</code> clause to specify a hash index for the primary key.</p>
<ul>
<li>
<p>If your application performs range queries using a table&#39;s primary key, then choose a range index for that table by omitting the <code dir="ltr">UNIQUE HASH</code> clause.</p>
</li>
<li>
<p>If your application performs only exact match lookups on the primary key, then a hash index may offer better response time and throughput. In such a case, specify the <code dir="ltr">UNIQUE HASH</code> clause.</p>
</li>
</ul>
</li>
<li>
<p>A hash index is created with a fixed size that remains constant for the life of the table or until the hash index is resized with the <code dir="ltr"><a href="#i1407906">ALTER TABLE</a></code> statement or when the index is dropped and recreated. A smaller hash index results in more hash collisions. A larger hash index reduces collisions but can waste memory. Hash key comparison is a fast operation, so a small number of hash collisions should not cause a performance problem for TimesTen.</p>
<p>To ensure that your hash index is sized correctly, your application must indicate the expected size of your table with the value of the <code dir="ltr"><span class="codeinlineitalic">RowPages</span></code> parameter of the <code dir="ltr">SET</code> <code dir="ltr">PAGES</code> clause. Compute this value by dividing the number of expected rows in your table by 256. For example, if your table has 256,000 rows, specify 1000 for the value of RowPages (256000/256=1000).</p>
</li>
<li>
<p>At most 16 columns are allowed in a hash key.</p>
</li>
<li>
<p><code dir="ltr">ON DELETE CASCADE</code> is supported on detail tables of a materialized view. If you have a materialized view defined over a child table, a deletion from the parent table causes cascaded deletes in the child table. This, in turn, triggers changes in the materialized view.</p>
</li>
<li>
<p>The total number of rows reported by the <code dir="ltr">DELETE</code> statement does not include rows deleted from child tables as a result of the <code dir="ltr">ON DELETE CASCADE</code> action.</p>
</li>
<li>
<p>For <code dir="ltr">ON DELETE CASCADE</code>: Since different paths may lead from a parent table to a child table, the following rule is enforced:</p>
<ul>
<li>
<p>Either all paths from a parent table to a child table are &#34;delete&#34; paths or all paths from a parent table to a child table are &#34;do not delete&#34; paths. Specify <code dir="ltr">ON DELETE CASCADE</code> on all child tables on the &#34;delete&#34; path.</p>
</li>
<li>
<p>This rule does not apply to paths from one parent to different children or from different parents to the same child.</p>
</li>
</ul>
</li>
<li>
<p>For <code dir="ltr">ON DELETE CASCADE</code>, the following rule is also enforced.</p>
<ul>
<li>
<p>If a table is reached by a &#34;delete&#34; path, then all its children are also reached by a &#34;delete&#34; path.</p>
</li>
</ul>
</li>
<li>
<p>For <code dir="ltr">ON DELETE CASCADE</code> with replication, the following restrictions apply:</p>
<ul>
<li>
<p>The foreign keys specified with <code dir="ltr">ON DELETE CASCADE</code> must match between the Master and subscriber for replicated tables. Checking is done at runtime. If there is an error, the receiver thread stops working.</p>
</li>
<li>
<p>All tables in the delete cascade tree have to be replicated if any table in the tree is replicated. This restriction is checked when the replication scheme is created or when a foreign key with <code dir="ltr">ON DELETE CASCADE</code> is added to one of the replication tables. If an error is found, the operation is aborted. You may be required to drop the replication scheme first before trying to change the foreign key constraint.</p>
</li>
<li>
<p>You must stop the replication agent before adding or dropping a foreign key on a replicated table.</p>
</li>
</ul>
</li>
<li>
<p>The data in a global temporary is private to the current connection and does not need to be secured between users. Thus global temporary tables do not require object privileges.</p>
</li>
<li>
<p>After you have defined an aging policy for the table, you cannot change the policy from LRU to time-based or from time-based to LRU. You must first drop aging and then alter the table to add a new aging policy.</p>
</li>
<li>
<p>The aging policy must be defined to change the aging state.</p>
</li>
<li>
<p>For the time-based aging policy, you cannot add or modify the aging column. This is because you cannot add or modify a <code dir="ltr">NOT NULL</code> column.</p>
</li>
<li>
<p>LRU and time-based aging can be combined in one system. If you use only LRU aging, the aging thread wakes up based on the cycle specified for the whole database. If you use only time-based aging, the aging thread wakes up based on an optimal frequency. This frequency is determined by the values specified in the <code dir="ltr">CYCLE</code> clause for all tables. If you use both LRU and time-based aging, then the thread wakes up based on a combined consideration of both types.</p>
</li>
<li>
<p>The following rules determine if a row is accessed or referenced for LRU aging:</p>
<ul>
<li>
<p>Any rows used to build the result set of a <code dir="ltr">SELECT</code> statement.</p>
</li>
<li>
<p>Any rows used to build the result set of an <code dir="ltr">INSERT ... SELECT</code> statement.</p>
</li>
<li>
<p>Any rows that are about to be updated or deleted.</p>
</li>
</ul>
</li>
<li>
<p>Compiled commands are marked invalid and need recompilation when you either drop LRU aging from or add LRU aging to tables that are referenced in the commands.</p>
</li>
<li>
<p>Call the <code dir="ltr">ttAgingScheduleNow</code> procedure to schedule the aging process immediately regardless of the aging state.</p>
</li>
<li>
<p>A<a id="sthref1438"></a><a id="sthref1439"></a>ging restrictions:</p>
<ul>
<li>
<p>LRU aging and time-based aging are not supported on detail tables of materialized views.</p>
</li>
<li>
<p>LRU aging and time-based aging are not supported on global temporary tables.</p>
</li>
<li>
<p>You cannot drop the column that is used for time-based aging.</p>
</li>
<li>
<p>The aging policy and aging state must be the same in all sites of replication.</p>
</li>
<li>
<p>Tables that are related by foreign keys must have the same aging policy.</p>
</li>
<li>
<p>For LRU aging, if a child row is not a candidate for aging, neither this child row nor its parent row are deleted. <code dir="ltr">ON DELETE CASCADE</code> settings are ignored.</p>
</li>
<li>
<p>For time-based aging, if a parent row is a candidate for aging, then all child rows are deleted. <code dir="ltr">ON DELETE CASCADE</code> (whether specified or not) is ignored.</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="TTSQL512" class="refsect2"><a id="BABFGIHD"></a>
<h3 class="refsect2">In-memory columnar compression of tables<a id="sthref1440"></a><a id="sthref1441"></a></h3>
<p>You can compress tables at the column level, which stores data more efficiently. This eliminates redundant storage of duplicate values within columns and improves the performance of SQL queries that perform full table scans.</p>
<p>You can define one or more columns in a table to be compressed together, which is called a compressed column group. You can define one or more compressed column groups in each table.</p>
<p>A dictionary table is created for each compressed column group that contains a column with all the distinct values of the compressed column group. The compressed column group now contains a pointer to the row in the dictionary table for the appropriate value. The width of this pointer can be 1, 2, or 4 bytes long depending on the maximum number of entries you defined for the dictionary table. So if the sum of the widths of the columns in a compressed column group is wider than the 1, 2, or 4 byte pointer width, and if there are a lot of duplicate values of those column values, you have reduced the amount of space used by the table.</p>
<p><a href="#BABJEFDD">Figure 6-1</a> shows the compressed column group in the table pointing to the appropriate row in the dictionary table.</p>
<div id="TTSQL516" class="figure">
<p class="titleinfigure"><a id="BABJEFDD"></a>Figure 6-1 Table Compression</p>
<img width="468" height="266" src="./img/tablecompress.gif" alt="Description of Figure 6-1 follows"/><br/>
<a id="sthref1442" href="./img_text/tablecompress.htm">Description of &#34;Figure 6-1 Table Compression&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<p>The dictionary table has a column of pointers to each of the distinct values. When the user configures the maximum number of distinct entries for the compressed column group, the size of the compressed column group is set as follows:</p>
<ul>
<li>
<p>1 byte for a maximum number of entries of 255 (2<sup>8</sup>-1). When the maximum number is between 1 and 255, the dictionary size is set to 255 (2<sup>8</sup>-1) values and the compressed column group pointer column is 1 byte.</p>
</li>
<li>
<p>2 bytes for a maximum number of entries of 65,535 (2<sup>16</sup>-1). When the maximum number is between 256 and 65,535, the dictionary size is set to 65,535 (2<sup>16</sup>-1) values and the compressed column group pointer column is 2 bytes.</p>
</li>
<li>
<p>4 bytes for a maximum number of entries of 4,294,967,295 (2<sup>32</sup>-1). When the maximum number is between 65,536 and 4,294,967,295, the dictionary size is set to 4,294,967,295 (2<sup>32</sup>-1) values and the compressed column group pointer column is 4 bytes. This is the default.</p>
</li>
</ul>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1443"></a>Syntax</p>
<p>The syntax for <code dir="ltr"><span class="codeinlineitalic">TableCompression</span></code> is:</p>
<pre dir="ltr">[COMPRESS (<span class="italic">CompressColumns</span> [,...])] OPTIMIZED FOR READ
</pre>
<p>The <code dir="ltr"><span class="codeinlineitalic">CompressColumns</span></code> syntax is as follows:</p>
<pre dir="ltr">{<span class="italic">ColumnDefinition</span> | (<span class="italic">ColumnDefinition</span> [,...])} BY DICTIONARY 
   [MAXVALUES = <span class="italic">CompressMax</span>]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1444"></a>Parameters</p>
<p><code dir="ltr"><span class="codeinlineitalic">TableCompression</span></code> syntax has the following parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" summary="Table compression syntax parameters" dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t41">Parameter</th>
<th class="cellalignment6331" id="r1c2-t41">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t41" headers="r1c1-t41"><code dir="ltr">COMPRESS (</code><code dir="ltr"><span class="codeinlineitalic">CompressColumns</span></code> <code dir="ltr">[,...])</code></td>
<td class="cellalignment6332" headers="r2c1-t41 r1c2-t41">Defines a compressed column group for a table that is enabled for compression. This can include one or more columns in the table. However, a column can be included in only one compressed column group.
<p>Only <code dir="ltr">INLINE</code> columns are supported when you specify multiple columns in a compressed column group. An out-of-line column can be in a compression group only if it is the only column in the group.</p>
<p>Each compressed column group is limited to a maximum of 16 columns.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t41" headers="r1c1-t41"><code dir="ltr">OPTIMIZED FOR READ</code></td>
<td class="cellalignment6332" headers="r3c1-t41 r1c2-t41">When specified on the <code dir="ltr">CREATE TABLE</code> statement, enables the table for compressed column groups. You can add compressed column groups at table creation with the <code dir="ltr">CREATE TABLE</code> statement or later with the <code dir="ltr">ALTER TABLE</code> statement.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t41" headers="r1c1-t41"><code dir="ltr">BY DICTIONARY</code></td>
<td class="cellalignment6332" headers="r4c1-t41 r1c2-t41">Defines a compression dictionary for each compressed column group.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t41" headers="r1c1-t41"><code dir="ltr">MAXVALUES</code> = <code dir="ltr"><span class="codeinlineitalic">CompressMax</span></code></td>
<td class="cellalignment6332" headers="r5c1-t41 r1c2-t41"><code dir="ltr"><span class="codeinlineitalic">CompressMax</span></code> is the total number of distinct values in the table and sets the size for the compressed column group pointer column to 1, 2, or 4 bytes and sets the size for the maximum number of entries in the dictionary table.
<p>For the dictionary table, <code dir="ltr">NULL</code> is counted as one unique value.</p>
<p><code dir="ltr"><span class="codeinlineitalic">CompressMax</span></code> takes an integer between 1 and 2<sup>32</sup>-1.</p>
<p>The maximum size defaults to size of 2<sup>32</sup>-1 if the <code dir="ltr">MAXVALUES</code> clause is omitted, which uses 4 bytes for the pointer column. An error is thrown if the value is greater than 2<sup>32</sup>-1.</p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1445"></a>Description</p>
<ul>
<li>
<p>Compressed column groups can be added at the time of table creation or added later using <code dir="ltr">ALTER TABLE</code>. You can drop a compressed column group with the <code dir="ltr">ALTER TABLE</code> statement, but must drop the entire group.</p>
</li>
<li>
<p>You can create a primary or unique key, where part or all of the columns included in the key are compressed. For compressed columns included in a primary or unique key, you can include columns that exist within a compressed column group, but you do not have to include all of the columns within the compressed column group. In addition, you can include columns from different compressed column groups.</p>
</li>
<li>
<p>Indexes can be created on any columns in the table. This includes compressed columns and includes columns that exist in separate compression column groups.</p>
</li>
<li>
<p>LOB columns cannot be compressed.</p>
</li>
<li>
<p>Compression is not supported on columns in replicated tables, cache group tables, grid tables, or on global temporary tables. You cannot create a table with the <code dir="ltr">CREATE TABLE AS SELECT</code> statement when defining in-memory columnar compression for that table in that statement.</p>
</li>
<li>
<p>You cannot create materialized views and materialized view logs on tables enabled for compression.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1446"></a>Examples</p>
<p>A range index is created on <code dir="ltr">partnumber</code> because it is the primary key.</p>
<pre dir="ltr">Command&gt; CREATE TABLE price
&gt; (partnumber INTEGER NOT NULL PRIMARY KEY,
&gt; vendornumber INTEGER NOT NULL,
&gt; vendpartnum CHAR(20) NOT NULL,
&gt; unitprice DECIMAL(10,2),
&gt; deliverydays SMALLINT,
&gt; discountqty SMALLINT);
Command&gt; INDEXES price;
Indexes on table SAMPLEUSER.PRICE:
 PRICE: unique range index on columns:
    PARTNUMBER
  1 index found.
1 index found on 1 table.
</pre>
<p>A hash index is created on column <code dir="ltr">clubname</code>, the primary key.</p>
<pre dir="ltr">CREATE TABLE recreation.clubs
(clubname CHAR(15) NOT NULL PRIMARY KEY,
 clubphone SMALLINT,
 activity CHAR(18))
UNIQUE HASH ON (clubname) PAGES = 30;
</pre>
<p>A range index is created on the two columns <code dir="ltr">membername</code> and <code dir="ltr">club</code> because together they form the primary key.</p>
<pre dir="ltr">Command&gt; CREATE TABLE recreation.members
&gt; (membername CHAR(20) NOT NULL,
&gt;  club CHAR(15) NOT NULL,
&gt;  memberphone SMALLINT,
&gt;  PRIMARY KEY (membername, club));
Command&gt; INDEXES recreation.members;
Indexes on table RECREATION.MEMBERS:
  MEMBERS: unique range index on columns:
    MEMBERNAME
    CLUB
  1 index found on 1 table.
</pre>
<p>No hash index is created on the table <code dir="ltr">recreation.events</code>.</p>
<pre dir="ltr">CREATE TABLE recreation.events
(sponsorclub CHAR(15),
 event CHAR(30),
 coordinator CHAR(20),
 results VARBINARY(10000));
</pre>
<p>A hash index is created on the column <code dir="ltr">vendornumber</code>.</p>
<pre dir="ltr">CREATE TABLE purchasing.vendors
(vendornumber INTEGER NOT NULL PRIMARY KEY,
 vendorname CHAR(30) NOT NULL,
 contactname CHAR(30),
 phonenumber CHAR(15),
 vendorstreet CHAR(30) NOT NULL,
 vendorcity CHAR(20) NOT NULL,
 vendorstate CHAR(2) NOT NULL,
 vendorzipcode CHAR(10) NOT NULL,
 vendorremarks VARCHAR(60))
UNIQUE HASH ON (vendornumber) PAGES = 101;
</pre>
<p>A hash index is created on the columns <code dir="ltr">membername</code> and <code dir="ltr">club</code> because together they form the primary key.</p>
<pre dir="ltr">CREATE TABLE recreation.members
    (membername CHAR(20) NOT NULL,
        club CHAR(15) NOT NULL,
        memberphone SMALLINT,
        PRIMARY KEY (membername, club))
    UNIQUE HASH ON (membername, club) PAGES = 100;
</pre>
<p>A hash index is created on the columns <code dir="ltr">firstname</code> and <code dir="ltr">lastname</code> because together they form the primary key in the table <code dir="ltr">authors</code>. A foreign key is created on the columns <code dir="ltr">authorfirstname</code> and <code dir="ltr">authorlastname</code> in the table <code dir="ltr">books</code> that references the primary key in the table <code dir="ltr">authors</code>.</p>
<pre dir="ltr">CREATE TABLE authors
    (firstname VARCHAR(255) NOT NULL,
        lastname VARCHAR(255) NOT NULL,
        description VARCHAR(2000),
        PRIMARY KEY (firstname, lastname))
    UNIQUE HASH ON (firstname, lastname) PAGES=20;
CREATE TABLE books
    (title VARCHAR(100),
    authorfirstname VARCHAR(255),
    authorlastname VARCHAR(255),
    price DECIMAL(5,2),
    FOREIGN KEY (authorfirstname, authorlastname) 
    REFERENCES authors(firstname, lastname));
</pre>
<p>The following statement overrides the default character of <code dir="ltr">VARCHAR</code> columns and creates a table where one <code dir="ltr">VARCHAR (10)</code> column is <code dir="ltr">NOT INLINE</code> and one <code dir="ltr">VARCHAR (144)</code> is <code dir="ltr">INLINE</code>.</p>
<pre dir="ltr">CREATE TABLE t1
    (c1 VARCHAR(10) NOT INLINE NOT NULL,
    c2 VARCHAR(144) INLINE NOT NULL);
</pre>
<p>The following statement creates a table with a <code dir="ltr">UNIQUE</code> column for book titles.</p>
<pre dir="ltr">CREATE TABLE books
    (title VARCHAR(100) UNIQUE,
        authorfirstname VARCHAR(255),
        authorlastname VARCHAR(255),
        price DECIMAL(5,2),
        FOREIGN KEY (authorfirstname, authorlastname)
        REFERENCES authors(firstname, lastname));
</pre>
<p>The following statement creates a table with a default value of 1 on column <code dir="ltr">x1</code> and a default value of <code dir="ltr">SYSDATE</code> on column <code dir="ltr">d</code>.</p>
<pre dir="ltr">CREATE TABLE t1
    (x1 INT DEFAULT 1, d TIMESTAMP DEFAULT SYSDATE);
</pre>
<p>This example creates the <code dir="ltr">rangex</code> table and defines <code dir="ltr">col1</code> as the primary key. A range index is created by default.</p>
<pre dir="ltr">Command&gt; CREATE TABLE rangex (col1 TT_INTEGER PRIMARY KEY);
Command&gt; INDEXES rangex;
Indexes on table SAMPLEUSER.RANGEX:
  RANGEX: unique range index on columns:
    COL1
  1 index found
1 index found on 1 table.
</pre>
<p>The following statement illustrates the use of the <code dir="ltr">ON DELETE CASCADE</code> clause for parent/child tables of the <code dir="ltr">HR</code> schema. Tables with foreign keys have been altered to enable <code dir="ltr">ON DELETE CASCADE</code>.</p>
<pre dir="ltr">ALTER TABLE countries
ADD CONSTRAINT countr_reg_fk
         FOREIGN KEY (region_id)
           REFERENCES regions(region_id) ON DELETE CASCADE;
ALTER TABLE locations
     ADD CONSTRAINT loc_c_id_fk
          FOREIGN KEY (country_id)
                    REFERENCES countries(country_id) ON DELETE CASCADE;
ALTER TABLE departments
     ADD CONSTRAINT dept_loc_fk
         FOREIGN KEY (location_id)
           REFERENCES locations (location_id) ON DELETE CASCADE;
ALTER TABLE employees
     ADD CONSTRAINT     emp_dept_fk
         FOREIGN KEY (department_id)
           REFERENCES departments ON DELETE CASCADE;
ALTER TABLE employees
     ADD CONSTRAINT     emp_job_fk
         FOREIGN KEY (job_id)
           REFERENCES jobs (job_id);
ALTER TABLE job_history
     ADD CONSTRAINT     jhist_job_fk
         FOREIGN KEY (job_id)
           REFERENCES jobs;
ALTER TABLE job_history
     ADD CONSTRAINT     jhist_emp_fk
         FOREIGN KEY (employee_id)
           REFERENCES employees ON DELETE CASCADE;
ALTER TABLE job_history
     ADD CONSTRAINT     jhist_dept_fk
         FOREIGN KEY (department_id)
           REFERENCES departments ON DELETE CASCADE;
     ;
</pre>
<p>This example shows how time resolution works with aging.</p>
<p>If lifetime is three days (resolution is in days):</p>
<ul>
<li>
<p>If <code dir="ltr">(SYSDATE -</code> <code dir="ltr"><span class="codeinlineitalic">ColumnValue</span></code><code dir="ltr">) &lt;= 3</code>, do not age.</p>
</li>
<li>
<p>If <code dir="ltr">(SYSDATE -</code> <code dir="ltr"><span class="codeinlineitalic">ColumnValue</span></code><code dir="ltr">) &gt; 3</code>, then the row is a candidate for aging.</p>
</li>
<li>
<p>If <code dir="ltr">(SYSDATE -</code> <code dir="ltr"><span class="codeinlineitalic">ColumnValue</span></code><code dir="ltr">) = 3 days, 22 hours</code>, then the row is not aged out if you specified a lifetime of three days. The row would be aged out if you had specified a lifetime of 72 hours.</p>
</li>
</ul>
<p>This example creates a table with LRU aging. Aging state is <code dir="ltr">ON</code> by default.</p>
<pre dir="ltr">CREATE TABLE agingdemo
       (agingid NUMBER NOT NULL PRIMARY KEY,
        name  VARCHAR2 (20)
       )
       AGING LRU;
Command&gt; DESCRIBE agingdemo;
Table USER.AGINGDEMO:
  Columns:
     *AGINGID NUMBER NOT NULL
     NAME VARCHAR2 (20) INLINE
     AGING LRU ON
1 table found.
(primary key columns are indicated with *)
</pre>
<p>This example creates a table with time-based aging. Lifetime is three days. Cycle is not specified, so the default is five minutes. Aging state is <code dir="ltr">OFF</code>.</p>
<pre dir="ltr">CREATE TABLE agingdemo2
       (agingid NUMBER NOT NULL PRIMARY KEY,
        name  VARCHAR2 (20),
        agingcolumn TIMESTAMP NOT NULL
        )
        AGING USE agingcolumn LIFETIME 3 DAYS OFF;
Command&gt; DESCRIBE agingdemo2;
Table USER.AGINGDEMO2:
  Columns:
     *AGINGID NUMBER NOT NULL
     NAME VARCHAR2 (20) INLINE
     AGINGCOLUMN TIMESTAMP (6) NOT NULL
  Aging use AGINGCOLUMN lifetime 3 days cycle 5 minutes off
1 table found.
(primary key columns are indicated with *)
</pre>
<p>This example generates an error message. It illustrates that after you create an aging policy, you cannot change it. You must drop aging and redefine aging.</p>
<pre dir="ltr">CREATE TABLE agingdemo2
        (agingid NUMBER NOT NULL PRIMARY KEY,
        name  VARCHAR2 (20),
        agingcolumn TIMESTAMP NOT NULL
        )
        AGING USE agingcolumn LIFETIME 3 DAYS OFF;
ALTER TABLE agingdemo2
        ADD AGING LRU;
 2980: Cannot add aging policy to a table with an existing aging policy. Have to
drop the old aging first
The command failed.
DROP aging on the table and redefine with LRU aging.
ALTER TABLE agingdemo2
        DROP AGING;
ALTER TABLE agingdemo2
        ADD AGING LRU;
Command&gt; DESCRIBE agingdemo2;
Table USER.AGINGDEMO2:
  Columns:
   *AGINGID                         NUMBER NOT NULL
    NAME                            VARCHAR2 (20) INLINE
    AGINGCOLUMN                     TIMESTAMP (6) NOT NULL
  Aging lru on
1 table found.
(primary key columns are indicated with *)
</pre>
<p>Attempt to create a table with time-based aging. Define aging column with data type <code dir="ltr">TT_DATE</code> and <code dir="ltr">LIFETIME</code> 3 hours. An error is generated because the <code dir="ltr">LIFETIME</code> unit must be expressed as <code dir="ltr">DAYS</code>.</p>
<pre dir="ltr">Command&gt; CREATE TABLE aging1 (col1 TT_INTEGER PRIMARY KEY, 
         col2 TT_DATE NOT NULL) AGING USE col2 LIFETIME 3 HOURS;
 2977: Only DAY lifetime unit is allowed with a TT_DATE column
The command failed.
</pre>
<p>Use <code dir="ltr">AS</code> <code dir="ltr"><span class="codeinlineitalic">SelectQuery</span></code> clause to create the table <code dir="ltr">emp</code>. Select <code dir="ltr">last_name</code> from the <code dir="ltr">employees</code> table where <code dir="ltr">employee_id</code> between 100 and 105. You see six rows inserted into <code dir="ltr">emp</code>. First issue the <code dir="ltr">SELECT</code> statement to see rows that should be returned.</p>
<pre dir="ltr">Command&gt; SELECT last_name FROM employees 
 WHERE employee_id BETWEEN 100 AND 105;
&lt; King &gt;
&lt; Kochhar &gt;
&lt; De Haan &gt;
&lt; Hunold &gt;
&lt; Ernst &gt;
&lt; Austin &gt;
6 rows found.
Command&gt; CREATE TABLE emp AS SELECT last_name FROM employees
&gt;WHERE employee_id BETWEEN 100 AND 105;
6 rows inserted.
Command&gt; SELECT * FROM emp;
&lt; King &gt;
&lt; Kochhar &gt;
&lt; De Haan &gt;
&lt; Hunold &gt;
&lt; Ernst &gt;
&lt; Austin &gt;
6 rows found.
</pre>
<p>Use <code dir="ltr">AS</code> <code dir="ltr"><span class="codeinlineitalic">SelectQuery</span></code> to create table <code dir="ltr">totalsal</code>. Sum <code dir="ltr">salary</code> and insert result into <code dir="ltr">totalsalary</code>. Define alias <code dir="ltr">s</code> for <code dir="ltr"><span class="codeinlineitalic">SelectQuery</span></code> expression.</p>
<pre dir="ltr">Command&gt; CREATE TABLE totalsal AS SELECT SUM (salary) s FROM employees;
1 row inserted.
Command&gt; SELECT * FROM totalsal;
&lt; 691400 &gt;
1 row found.
</pre>
<p>Use <code dir="ltr">AS</code> <code dir="ltr"><span class="codeinlineitalic">SelectQuery</span></code> to create table defined with column <code dir="ltr">commission_pct</code>. Set default to .3. First describe table <code dir="ltr">employees</code> to show that column <code dir="ltr">commission_pct</code> is of type <code dir="ltr">NUMBER (2,2)</code>. For table <code dir="ltr">c_pct</code>, column <code dir="ltr">commission_pct</code> inherits type <code dir="ltr">NUMBER (2,2)</code> from column <code dir="ltr">commission_pct</code> of <code dir="ltr">employees</code> table.</p>
<pre dir="ltr">Command&gt; DESCRIBE employees;
Table SAMPLEUSER.EMPLOYEES:
  Columns:
   *EMPLOYEE_ID                     NUMBER (6) NOT NULL
    FIRST_NAME                      VARCHAR2 (20) INLINE
    LAST_NAME                       VARCHAR2 (25) INLINE NOT NULL
    EMAIL                           VARCHAR2 (25) INLINE UNIQUE NOT NULL
    PHONE_NUMBER                    VARCHAR2 (20) INLINE
    HIRE_DATE                       DATE NOT NULL
    JOB_ID                          VARCHAR2 (10) INLINE NOT NULL
    SALARY                          NUMBER (8,2)
    COMMISSION_PCT                  NUMBER (2,2)
    MANAGER_ID                      NUMBER (6)
    DEPARTMENT_ID                   NUMBER (4)

1 table found.
(primary key columns are indicated with *)
Command&gt; CREATE TABLE c_pct (commission_pct DEFAULT .3) AS SELECT
         commission_pct FROM employees;
107 rows inserted.
Command&gt; DESCRIBE c_pct;

Table SAMPLEUSER.C_PCT:
  Columns:
    COMMISSION_PCT                 NUMBER (2,2) DEFAULT .3

1 table found.
(primary key columns are indicated with *)
</pre>
<p>The following example creates the <code dir="ltr">employees</code> table where the <code dir="ltr">job_id</code> is compressed.</p>
<pre dir="ltr">Command&gt; CREATE TABLE EMPLOYEES
 (EMPLOYEE_ID NUMBER (6) PRIMARY KEY, 
 FIRST_NAME VARCHAR2(20), 
 LAST_NAME VARCHAR2(25) NOT NULL, 
 EMAIL VARCHAR2(25) NOT NULL, 
 PHONE_NUMBER VARCHAR2(20),
 HIRE_DATE DATE NOT NULL, 
 JOB_ID VARCHAR2(10) NOT NULL, 
 SALARY NUMBER (8,2), 
 COMMISSION_PCT NUMBER (2,2), 
 MANAGER_ID NUMBER(6), 
 DEPARTMENT_ID NUMBER(4)) 
 COMPRESS (JOB_ID BY DICTIONARY) OPTIMIZED FOR READ;

Command&gt; DESCRIBE EMPLOYEES;
 
Table MYSCHEMA.EMPLOYEES:
  Columns:
   *EMPLOYEE_ID                     NUMBER (6) NOT NULL
    FIRST_NAME                      VARCHAR2 (20) INLINE
    LAST_NAME                       VARCHAR2 (25) INLINE NOT NULL
    EMAIL                           VARCHAR2 (25) INLINE NOT NULL
    PHONE_NUMBER                    VARCHAR2 (20) INLINE
    HIRE_DATE                       DATE NOT NULL
    JOB_ID                          VARCHAR2 (10) INLINE NOT NULL
    SALARY                          NUMBER (8,2)
    COMMISSION_PCT                  NUMBER (2,2)
    MANAGER_ID                      NUMBER (6)
    DEPARTMENT_ID                   NUMBER (4)
  COMPRESS ( JOB_ID BY DICTIONARY ) OPTIMIZED FOR READ
 
1 table found.
(primary key columns are indicated with *)
</pre>
<p>The following example shows that there are three dictionary table sizes. The value you specify for the maximum number of entries is rounded up to the next size. For example, specifying 400 as the maximum number of job IDs creates a dictionary table that can have at most 65535 entries. The default size of 2<sup>32</sup>-1 is not shown in the <code dir="ltr">DESCRIBE</code> output.</p>
<pre dir="ltr">Command&gt; CREATE TABLE employees 
 (employee_id NUMBER(6) PRIMARY KEY, 
  first_name VARCHAR2(20), 
  last_name VARCHAR2(25), 
  email VARCHAR2(25) NOT NULL, 
  job_id VARCHAR2(10) NOT NULL, 
  manager_id NUMBER(6), 
  department_id NUMBER(4)) 
 COMPRESS (last_name BY DICTIONARY MAXVALUES=70000, 
           job_id BY DICTIONARY MAXVALUES=400, 
           department_id BY DICTIONARY MAXVALUES=100) 
 OPTIMIZED FOR READ;

Command&gt; DESCRIBE employees;
Table MYSCHEMA.EMPLOYEES:
  Columns:
   *EMPLOYEE_ID                     NUMBER (6) NOT NULL
    FIRST_NAME                      VARCHAR2 (20) INLINE
    LAST_NAME                       VARCHAR2 (25) INLINE
    EMAILS                          VARCHAR2 (25) INLINE NOT NULL
    JOB_ID                          VARCHAR2 (10) INLINE NOT NULL
    MANAGER_ID                      NUMBER (6)
    DEPARTMENT_ID                   NUMBER (4)
  COMPRESS ( LAST_NAME BY DICTIONARY,
             JOB_ID BY DICTIONARY MAXVALUES=65535,
             DEPARTMENT_ID BY DICTIONARY MAXVALUES=255 ) OPTIMIZED FOR READ
 
1 table found.
(primary key columns are indicated with *)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1447"></a>See also</p>
<br/>
<code dir="ltr"><a href="#i1407906">ALTER TABLE</a></code><br/>
<code dir="ltr"><a href="#g1513813">DROP TABLE</a></code><br/>
<code dir="ltr"><a href="#g1514124">TRUNCATE TABLE</a></code><br/>
<code dir="ltr"><a href="#i994046">UPDATE</a></code></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="g1513697"></a>
<div id="TTSQL304" class="refsect1">
<h2 class="refsect1"><a id="sthref1448"></a><a id="sthref1449"></a>CREATE USER</h2>
<p>The <code dir="ltr">CREATE USER</code> statement creates a user of a TimesTen database.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1450"></a>Required privilege</p>
<p><code dir="ltr">ADMIN</code></p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1451"></a>SQL syntax</p>
<pre dir="ltr">CREATE USER <span class="italic">user</span> IDENTIFIED BY {<span class="italic">password</span> | &#34;<span class="italic">password</span>&#34;}
CREATE USER <span class="italic">user</span> IDENTIFIED EXTERNALLY
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1452"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for CREATE USER." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t42">Parameter</th>
<th class="cellalignment6331" id="r1c2-t42">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t42" headers="r1c1-t42"><code dir="ltr"><span class="codeinlineitalic">user</span></code></td>
<td class="cellalignment6332" headers="r2c1-t42 r1c2-t42">Name of the user that is being added to the database.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t42" headers="r1c1-t42"><code dir="ltr">IDENTIFIED</code></td>
<td class="cellalignment6332" headers="r3c1-t42 r1c2-t42">Identification clause, to specify the password for an internal user or that the user is external.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t42" headers="r1c1-t42"><code dir="ltr">BY {</code><code dir="ltr"><span class="codeinlineitalic">password</span></code> <code dir="ltr">|&#34;</code><code dir="ltr"><span class="codeinlineitalic">password</span></code><code dir="ltr">&#34;}</code></td>
<td class="cellalignment6332" headers="r4c1-t42 r1c2-t42">Internal users must be given a TimesTen password. To perform database operations using an internal user name, the user must supply this password.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t42" headers="r1c1-t42"><code dir="ltr">EXTERNALLY</code></td>
<td class="cellalignment6332" headers="r5c1-t42 r1c2-t42">Identifies the operating system <code dir="ltr"><span class="codeinlineitalic">user</span></code> to the TimesTen database. To perform database operations as an external user, the process needs a TimesTen external user name that matches the user name authenticated by the operating system or network. A password is not required by TimesTen because the user has been authenticated by the operating system at login time.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1453"></a>Description</p>
<ul>
<li>
<p>Database users can be internal or external.</p>
<ul>
<li>
<p>Internal users are defined for a TimesTen database.</p>
</li>
<li>
<p>External users are defined by an external authority such as the operating system. External users cannot be assigned a TimesTen password.</p>
</li>
</ul>
</li>
<li>
<p>Passwords are case-sensitive.</p>
</li>
<li>
<p>When a user is created, the user has the privileges granted to <code dir="ltr">PUBLIC</code> and no additional privileges.</p>
</li>
<li>
<p>You cannot create a user across a client/server connection. You must use a direct connection when creating a user.</p>
</li>
<li>
<p>In TimesTen, user <code dir="ltr">brad</code> is the same as user <code dir="ltr">&#34;brad&#34;</code>. In both cases, the name of the user is created as <code dir="ltr">BRAD</code>.</p>
</li>
<li>
<p>User names are <code dir="ltr">TT_CHAR</code> data type.</p>
</li>
<li>
<p>When replication is configured, this statement is replicated.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1454"></a>Examples</p>
<p>To create the internal user <code dir="ltr">terry</code> with the password <code dir="ltr">&#34;secret&#34;</code>:</p>
<pre dir="ltr">CREATE USER terry IDENTIFIED BY &#34;secret&#34;;
User created.
</pre>
<p>Verify that user <code dir="ltr">terry</code> has been created:</p>
<pre dir="ltr">Command&gt; SELECT * FROM sys.all_users WHERE username=&#39;TERRY&#39;;
&lt; TERRY, 11, 2009-05-12 10:28:04.610353 &gt;
1 row found.
</pre>
<p>To identify the external user <code dir="ltr">pat</code> to the TimesTen database:</p>
<pre dir="ltr">CREATE USER pat IDENTIFIED EXTERNALLY;
User created.
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1455"></a>See also</p>
<br/>
<code dir="ltr"><a href="#i1334963">ALTER USER</a></code><br/>
<code dir="ltr"><a href="#BABEFCHB">DROP USER</a></code><br/>
<code dir="ltr"><a href="#g1513872">GRANT</a></code><br/>
<code dir="ltr"><a href="#g1513967">REVOKE</a></code></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i992961"></a>
<div id="TTSQL305" class="refsect1">
<h2 class="refsect1"><a id="sthref1456"></a><a id="sthref1457"></a>CREATE VIEW</h2>
<p>The <code dir="ltr">CREATE VIEW</code> statement creates a view of the tables specified in the <code dir="ltr"><span class="codeinlineitalic">SelectQuery</span></code> clause. A view is a logical table that is based on one or more <span class="italic">detail tables</span>. The view itself contains no data. It is sometimes called a <span class="italic">nonmaterialized view</span> to distinguish it from a materialized view, which does contain data that has already been calculated from detail tables.</p>
<p>In a replicated environment for an active standby pair, if <code dir="ltr">DDL_REPLICATION_LEVEL</code> is 3 or greater when you execute <code dir="ltr">CREATE VIEW</code> on the active database, the view is replicated to all databases in the replication scheme. See <a class="olink TTREP693" href="../TTREP/alterpair.htm#TTREP693">&#34;Making DDL changes in an active standby pair&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span> for more information.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1458"></a>Required privilege</p>
<p>The user executing the statement must have the <code dir="ltr">CREATE VIEW</code> privilege (if owner) or <code dir="ltr">CREATE ANY VIEW</code> (if not the owner) for another user&#39;s view.</p>
<p>The owner of the view must have the <code dir="ltr">SELECT</code> privilege on the detail tables.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1459"></a>SQL syntax</p>
<pre dir="ltr">CREATE VIEW [<span class="italic">Owner</span>.]<span class="codeinlineitalic">ViewName</span> AS <span class="codeinlineitalic">SelectQuery</span>
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1460"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for CREATE VIEW." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t43">Parameter</th>
<th class="cellalignment6331" id="r1c2-t43">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t43" headers="r1c1-t43"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">ViewName</span></code></td>
<td class="cellalignment6332" headers="r2c1-t43 r1c2-t43">Name assigned to the new view.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t43" headers="r1c1-t43"><code dir="ltr"><span class="codeinlineitalic">SelectQuery</span></code></td>
<td class="cellalignment6332" headers="r3c1-t43 r1c2-t43">Selects column from the detail tables to be used in the view. Can also create indexes on the view.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1461"></a>Restrictions on the <a id="sthref1462"></a>SELECT query</p>
<p>There are several restrictions on the query that is used to define the view.</p>
<ul>
<li>
<p>A <code dir="ltr">SELECT *</code> query in a view definition is expanded when the view is created. Any columns added after a view is created do not affect the view.</p>
</li>
<li>
<p>Do not use the following in a <code dir="ltr"><a href="#i1049447">SELECT</a></code> statement that is used to create a view:</p>
<ul>
<li>
<p><code dir="ltr">FIRST</code></p>
</li>
<li>
<p><code dir="ltr">ORDER BY</code></p>
<p>If used, this is ignored by <code dir="ltr">CREATE VIEW</code>. The result will not be sorted.</p>
</li>
<li>
<p>Arguments</p>
</li>
</ul>
</li>
<li>
<p>Each expression in the select list must have a unique name. A name of a simple column expression would be that column&#39;s name unless a column alias is defined. <code dir="ltr">ROWID</code> is considered an expression and needs an alias.</p>
</li>
<li>
<p>Do not use <code dir="ltr">SELECT FOR UPDATE</code> to create a view.</p>
</li>
<li>
<p>Certain TimesTen query restrictions are not checked when a non-materialized view is created. Views that violate those restrictions may be allowed to be created, but an error is returned when the view is referenced later in an executed statement.</p>
</li>
<li>
<p>When a view is referenced in the <code dir="ltr">FROM</code> clause of a <code dir="ltr"><a href="#i1049447">SELECT</a></code> statement, its name is replaced by its definition as a derived table at parsing time. If it is not possible to merge all clauses of a view to the same clause in the original select query to form a legal query without the derived table, the content of this derived table is materialized. For example, if both the view and the referencing select specify aggregates, the view is materialized before its result can be joined with other tables of the select.</p>
</li>
<li>
<p>Use the <code dir="ltr"><a href="#g1513833">DROP VIEW</a></code> statement to drop a view.</p>
</li>
<li>
<p>A view cannot be altered with an <code dir="ltr"><a href="#i1407906">ALTER TABLE</a></code> statement.</p>
</li>
<li>
<p>Referencing a view can fail because of dropped or altered detail tables.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1463"></a>Examples</p>
<p>Create a nonmaterialized view from the <code dir="ltr">employees</code> table.</p>
<pre dir="ltr">Command&gt; CREATE VIEW v1 AS SELECT employee_id, email FROM employees;
Command&gt; SELECT FIRST 5 * FROM v1;
&lt; 100, SKING &gt;
&lt; 101, NKOCHHAR &gt;
&lt; 102, LDEHAAN &gt;
&lt; 103, AHUNOLD &gt;
&lt; 104, BERNST &gt;
5 rows found.
</pre>
<p>Create a nonmaterialized view <code dir="ltr">tview</code> with column <code dir="ltr">max1</code> from an aggregate query on the table <code dir="ltr">t1</code>.</p>
<pre dir="ltr">CREATE VIEW tview (max1) AS SELECT MAX(x1) FROM t1;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1464"></a>See also</p>
<br/>
<code dir="ltr"><a href="#i1075286">CREATE MATERIALIZED VIEW</a></code><br/>
<code dir="ltr"><a href="#i1211666">CREATE TABLE</a></code><br/>
<code dir="ltr"><a href="#g1513833">DROP VIEW</a></code></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABBJCCI"></a>
<div id="TTSQL306" class="refsect1">
<h2 class="refsect1">DELETE<a id="sthref1465"></a><a id="sthref1466"></a><a id="sthref1467"></a></h2>
<p>The <code dir="ltr">DELETE</code> statement deletes rows from a table.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1468"></a>Required privilege</p>
<p>No privilege is required for the table owner.</p>
<p><code dir="ltr">DELETE</code> on the table for another user&#39;s table.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1469"></a>SQL syntax</p>
<pre dir="ltr">DELETE [<span class="italic">hint</span>] [FIRST <span class="italic">NumRows</span>] FROM [<span class="italic">Owner</span>.]<span class="italic">TableName</span> [<span class="italic">CorrelationName</span>] 
[WHERE <span class="italic">SearchCondition</span>]
[RETURNING|RETURN <span class="italic">Expression</span>[,...]INTO <span class="italic">DataItem</span>[,...]]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1470"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for DELETE." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t44">Parameter</th>
<th class="cellalignment6331" id="r1c2-t44">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t44" headers="r1c1-t44"><code dir="ltr"><span class="codeinlineitalic">hint</span></code></td>
<td class="cellalignment6332" headers="r2c1-t44 r1c2-t44">Specifies a statement level optimizer hint for the <code dir="ltr">DELETE</code> statement. For more information on hints, see <a href="#BABJFIBC">&#34;Statement level optimizer hints&#34;</a>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t44" headers="r1c1-t44"><code dir="ltr">FIRST</code> <code dir="ltr"><span class="codeinlineitalic">NumRows</span></code></td>
<td class="cellalignment6332" headers="r3c1-t44 r1c2-t44">Specifies the number of rows to delete. <code dir="ltr">FIRST</code> <code dir="ltr"><span class="codeinlineitalic">NumRows</span></code> is not supported in subquery statements. <code dir="ltr"><span class="codeinlineitalic">NumRows</span></code> must be either a positive <code dir="ltr">INTEGER</code> or a dynamic parameter placeholder. The syntax for a dynamic parameter placeholder is either <code dir="ltr">?</code> or :<code dir="ltr"><span class="codeinlineitalic">DynamicParameter</span></code>. The value of the dynamic parameter is supplied when the statement is executed.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t44" headers="r1c1-t44"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">TableName</span></code> <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">CorrelationName</span></code><code dir="ltr">]</code></td>
<td class="cellalignment6332" headers="r4c1-t44 r1c2-t44">Designates a table from which any rows satisfying the search condition are to be deleted.
<p><code dir="ltr">[Owner.]</code><code dir="ltr"><span class="codeinlineitalic">TableName</span></code> identifies a table to be deleted.</p>
<p><code dir="ltr"><span class="codeinlineitalic">CorrelationName</span></code> specifies an alias for the immediately preceding table. Use the correlation name to reference the table elsewhere in the <code dir="ltr">DELETE</code> statement. The scope of the <code dir="ltr"><span class="codeinlineitalic">CorrelationName</span></code> is the SQL statement in which it is used. It must conform to the syntax rules for a basic name. See <a href="names.htm#i987960">&#34;Basic names&#34;</a>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t44" headers="r1c1-t44"><code dir="ltr"><span class="codeinlineitalic">SearchCondition</span></code></td>
<td class="cellalignment6332" headers="r5c1-t44 r1c2-t44">Specifies which rows are to be deleted. If no rows satisfy the search condition, the table is not changed. If the <code dir="ltr">WHERE</code> clause is omitted, all rows are deleted. The search condition can contain a subquery.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t44" headers="r1c1-t44"><code dir="ltr"><span class="codeinlineitalic">Expression</span></code></td>
<td class="cellalignment6332" headers="r6c1-t44 r1c2-t44">Valid expression syntax. See <a href="express.htm#i996218">Chapter 3, &#34;Expressions&#34;</a>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r7c1-t44" headers="r1c1-t44"><code dir="ltr"><span class="codeinlineitalic">DataItem</span></code></td>
<td class="cellalignment6332" headers="r7c1-t44 r1c2-t44">Host variable or PL/SQL variable that stores the retrieved <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> value.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1471"></a>Description</p>
<ul>
<li>
<p>If all the rows of a table are deleted, the table is empty but continues to exist until you issue a <code dir="ltr"><a href="#g1513813">DROP TABLE</a></code> statement.</p>
</li>
<li>
<p>The <code dir="ltr">DELETE</code> operation fails if it violates any foreign key constraint. See <a href="#i1211666">&#34;CREATE TABLE&#34;</a> for a description of the foreign key constraint.</p>
</li>
<li>
<p>The total number of rows reported by the <code dir="ltr">DELETE</code> statement does not include rows deleted from child tables as a result of the <code dir="ltr">ON DELETE CASCADE</code> action.</p>
</li>
<li>
<p>If <code dir="ltr">ON DELETE CASCADE</code> is specified on a foreign key constraint for a child table, a user can delete rows from a parent table for which the user has the <code dir="ltr">DELETE</code> privilege without requiring explicit <code dir="ltr">DELETE</code> privilege on the child table.</p>
</li>
<li>
<p>Restrictions on the <code dir="ltr">RETURNING</code> clause:</p>
<ul>
<li>
<p>Each <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> must be a simple expression. Aggregate functions are not supported.</p>
</li>
<li>
<p>You cannot return a sequence number into an <code dir="ltr">OUT</code> parameter.</p>
</li>
<li>
<p><code dir="ltr">ROWNUM</code> and subqueries cannot be used in the <code dir="ltr">RETURNING</code> clause.</p>
</li>
<li>
<p>Parameters in the <code dir="ltr">RETURNING</code> clause cannot be duplicated anywhere in the <code dir="ltr">DELETE</code> statement.</p>
</li>
<li>
<p>Using the <code dir="ltr">RETURNING</code> clause to return multiple rows requires PL/SQL <code dir="ltr">BULK COLLECT</code> functionality. See <a class="olink TTPLS145" href="../TTPLS/overview.htm#TTPLS145">&#34;FORALL and BULK COLLECT operations&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database PL/SQL Developer&#39;s Guide</span> for information about <code dir="ltr">BULK COLLECT</code>.</p>
</li>
<li>
<p>In PL/SQL, you cannot use a <code dir="ltr">RETURNING</code> clause with a <code dir="ltr">WHERE CURRENT</code> operation.</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1472"></a>Examples</p>
<p>Rows for orders whose quantity is less than 50 are deleted.</p>
<pre dir="ltr">DELETE FROM purchasing.orderitems
WHERE quantity &lt; 50;
</pre>
<p>The following query deletes all the duplicate orders assuming that <code dir="ltr">id</code> is not a primary key:</p>
<pre dir="ltr">DELETE FROM orders a
WHERE EXISTS (SELECT 1 FROM orders b
WHERE a.id = b.id and a.rowid &lt; b.rowid);
</pre>
<p>The following sequence of statements causes a foreign key violation.</p>
<pre dir="ltr">CREATE TABLE master (name CHAR(30), id CHAR(4) NOT NULL PRIMARY KEY);
CREATE TABLE details
  (masterid CHAR(4),description VARCHAR(200), 
   FOREIGN KEY (masterid) REFERENCES master(id));
INSERT INTO master(&#39;Elephant&#39;, &#39;0001&#39;);
INSERT INTO details(&#39;0001&#39;, &#39;A VERY BIG ANIMAL&#39;);
DELETE FROM master WHERE id = &#39;0001&#39;;
</pre>
<p>If you attempt to delete a &#34;busy&#34; table, an error results. In this example, <code dir="ltr">t1</code> is a &#34;busy&#34; table that is a parent table with foreign key constraints based on it.</p>
<pre dir="ltr">CREATE TABLE t1 (a INT NOT NULL, b INT NOT NULL,
       PRIMARY KEY (a));
CREATE TABLE t2 (c INT NOT NULL, 
       FOREIGN KEY (c) REFERENCES t1(a));
INSERT INTO t1 VALUES (1,1);
INSERT INTO t2 VALUES (1);
DELETE FROM t1;
</pre>
<p>An error is returned:</p>
<pre dir="ltr">SQL ERROR (3001):  Foreign key violation [TTFOREIGN_0] a row in child table T2 
has a parent in the delete range.
</pre>
<p>Delete an employee from <code dir="ltr">employees</code>. Declare <code dir="ltr">empid</code> and <code dir="ltr">name</code> as variables with the same data types as <code dir="ltr">employee_id</code> and <code dir="ltr">last_name</code>. Delete the row, returning <code dir="ltr">employee_id</code> and <code dir="ltr">last_name</code> into the variables. Verify that the correct row was deleted.</p>
<pre dir="ltr">Command&gt; VARIABLE empid NUMBER(6) NOT NULL;
Command&gt; VARIABLE name VARCHAR2(25) INLINE NOT NULL;
Command&gt; DELETE FROM employees WHERE last_name=&#39;Ernst&#39;
       &gt; RETURNING employee_id, last_name INTO :empid,:name;
1 row deleted.
Command&gt; PRINT empid name;
EMPID                : 104
NAME                 : Ernst
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1028075"></a>
<div id="TTSQL307" class="refsect1">
<h2 class="refsect1"><a id="sthref1473"></a><a id="sthref1474"></a>DROP ACTIVE STANDBY PAIR</h2>
<p>This statement drops an active standby pair replication scheme.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1475"></a>Required privilege</p>
<p><code dir="ltr">ADMIN</code></p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1476"></a>SQL syntax</p>
<pre dir="ltr">DROP ACTIVE STANDBY PAIR
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1477"></a>Parameters</p>
<p><code dir="ltr">DROP ACTIVE STANDBY PAIR</code> has no parameters.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1478"></a>Description</p>
<p>The active standby pair is dropped, but all objects such as tables, cache groups, and materialized views still exist on the database on which the statement was issued.</p>
<p>You cannot execute the <code dir="ltr">DROP ACTIVE STANDBY PAIR</code> statement when Oracle Clusterware is used with TimesTen.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1479"></a>See also</p>
<br/>
<code dir="ltr"><a href="#i1027059">ALTER ACTIVE STANDBY PAIR</a></code><br/>
<code dir="ltr"><a href="#i1438072">CREATE ACTIVE STANDBY PAIR</a></code></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i993027"></a>
<div id="TTSQL308" class="refsect1">
<h2 class="refsect1"><a id="sthref1480"></a><a id="sthref1481"></a>DROP CACHE GROUP</h2>
<p>The <code dir="ltr">DROP CACHE GROUP</code> statement drops the table associated with the cache group, and removes the cache group definition from the <code dir="ltr">CACHE_GROUP</code> system table.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1482"></a>Required privilege</p>
<p>No privilege is required for the cache group owner.</p>
<p>If not the cache group owner, <code dir="ltr">DROP ANY CACHE GROUP</code> <span class="italic">and</span></p>
<p><code dir="ltr">DROP ANY TABLE</code> if at least one table in the cache group is not owned by the current user.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1483"></a>SQL syntax</p>
<pre dir="ltr">DROP CACHE GROUP [<span class="italic">Owner.</span>]<span class="italic">GroupName</span>
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1484"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains a description of the parameter for DROP CACHE GROUP." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t45">Parameter</th>
<th class="cellalignment6331" id="r1c2-t45">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t45" headers="r1c1-t45"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">GroupName</span></code></td>
<td class="cellalignment6332" headers="r2c1-t45 r1c2-t45">Name of the cache group to be deleted.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1485"></a>Description</p>
<ul>
<li>
<p>If you attempt to delete a cache group table that is in use, TimesTen returns an error.</p>
</li>
<li>
<p>Asynchronous writethrough cache groups cannot be dropped while the replication agent is running.</p>
</li>
<li>
<p>Automatically installed Oracle Database objects for read-only cache groups and cache groups with the <code dir="ltr">AUTOREFRESH</code> attribute are uninstalled by the cache agent. If the cache agent is not running during the <code dir="ltr">DROP CACHE GROUP</code> operation, the Oracle Database objects are uninstalled on the next startup of the cache agent.</p>
</li>
<li>
<p>You cannot execute the <code dir="ltr">DROP CACHE GROUP</code> statement when performed under the serializable isolation level. An error message is returned when attempted.</p>
</li>
<li>
<p>If you issue a <code dir="ltr">DROP CACHE GROUP</code> statement, and there is an autorefresh operation currently running, then:</p>
<ul>
<li>
<p>If <code dir="ltr">LockWait</code> interval is 0, the <code dir="ltr">DROP CACHE GROUP</code> statement fails with a lock timeout error.</p>
</li>
<li>
<p>If <code dir="ltr">LockWait</code> interval is nonzero, then the current autorefresh transaction is preempted (rolled back), and the <code dir="ltr">DROP</code> statement continues. This affects all cache groups with the same autorefresh interval.</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1486"></a>Examples</p>
<pre dir="ltr">DROP CACHE GROUP westerncustomers;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1487"></a>See also</p>
<br/>
<code dir="ltr"><a href="#i1055226">ALTER CACHE GROUP</a></code><br/>
<code dir="ltr"><a href="#i1228554">CREATE CACHE GROUP</a></code></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACGGIDI"></a>
<div id="TTSQL309" class="refsect1">
<h2 class="refsect1"><a id="sthref1488"></a><a id="sthref1489"></a><a id="sthref1490"></a>DROP FUNCTION</h2>
<p>The <code dir="ltr">DROP FUNCTION</code> statement removes a standalone stored function from the database. Do not use this statement to remove a function that is part of a package.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1491"></a>Required privilege</p>
<p>No privilege is required for the function owner.</p>
<p><code dir="ltr">DROP ANY PROCEDURE</code> for another user&#39;s function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1492"></a>SQL syntax</p>
<pre dir="ltr">DROP FUNCTION [<span class="italic">Owner</span>.]<span class="italic">FunctionName</span>
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1493"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains a description of the parameter for DROP SEQUENCE." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t46">Parameter</th>
<th class="cellalignment6331" id="r1c2-t46">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t46" headers="r1c1-t46"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">FunctionName</span></code></td>
<td class="cellalignment6332" headers="r2c1-t46 r1c2-t46">Name of the function to be dropped.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1494"></a>Description</p>
<ul>
<li>
<p>When you drop a function, TimesTen invalidates objects that depend on the dropped function. If you subsequently reference one of these objects, TimesTen attempts to recompile the object and returns an error message if you have not recreated the dropped function.</p>
</li>
<li>
<p>Do not use this statement to remove a function that is part of a package. Either drop the package or redefine the package without the function using the <code dir="ltr">CREATE PACKAGE</code> statement with the <code dir="ltr">OR REPLACE</code> clause.</p>
</li>
<li>
<p>To use the <code dir="ltr">DROP FUNCTION</code> statement, you must have PL/SQL enabled in your database. If you do not have PL/SQL enabled in your database, an error is thrown.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1495"></a>Examples</p>
<p>The following statement drops the function <code dir="ltr">myfunc</code> and invalidates all objects that depend on <code dir="ltr">myfunc</code>:</p>
<pre dir="ltr">Command&gt; DROP FUNCTION myfunc;
 
Function dropped.
</pre>
<p>If PL/SQL is not enabled in your database, TimesTen returns an error:</p>
<pre dir="ltr">Command&gt; DROP FUNCTION myfunc;
 8501: PL/SQL feature not installed in this TimesTen database
The command failed.
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1496"></a>See also</p>
<p><code dir="ltr"><a href="#CHDDCEDC">CREATE FUNCTION</a></code></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="g1513769"></a>
<div id="TTSQL310" class="refsect1">
<h2 class="refsect1"><a id="sthref1497"></a><a id="sthref1498"></a>DROP INDEX</h2>
<p>The <code dir="ltr">DROP INDEX</code> statement removes the specified index.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1499"></a>Required privilege</p>
<p>No privilege is required for the index owner.</p>
<p><code dir="ltr">DROP ANY INDEX</code> for another user&#39;s index.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1500"></a>SQL syntax</p>
<pre dir="ltr">DROP INDEX [<span class="italic">Owner</span>.]<span class="italic">IndexName</span> [FROM [<span class="italic">Owner</span>.]<span class="italic">TableName</span>]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1501"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for DROP INDEX." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t47">Parameter</th>
<th class="cellalignment6331" id="r1c2-t47">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t47" headers="r1c1-t47"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">IndexName</span></code></td>
<td class="cellalignment6332" headers="r2c1-t47 r1c2-t47">Name of the index to be dropped. It may include the name of the owner of the table that has the index.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t47" headers="r1c1-t47"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">TableName</span></code></td>
<td class="cellalignment6332" headers="r3c1-t47 r1c2-t47">Name of the table upon which the index was created.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i1015063"></a>Description</p>
<ul>
<li>
<p>If you attempt to drop a &#34;busy&#34; index&mdash;an index that is in use or that enforces a foreign key&mdash;an error results. To drop a foreign key and the index associated with it, use the <code dir="ltr"><a href="#i1407906">ALTER TABLE</a></code> statement.</p>
</li>
<li>
<p>If an index is created through a <code dir="ltr">UNIQUE</code> column constraint, it can only be dropped by dropping the constraint with an <code dir="ltr"><a href="#i1407906">ALTER TABLE</a></code> <code dir="ltr">DROP UNIQUE</code> statement. See <a href="#i1211666">&#34;CREATE TABLE&#34;</a> for more information about the <code dir="ltr">UNIQUE</code> column constraint.</p>
</li>
<li>
<p>If a <code dir="ltr">DROP INDEX</code> operation is or was active in an uncommitted transaction, other transactions doing DML operations that do not access that index are blocked.</p>
</li>
<li>
<p>If an index is dropped, any prepared statement that uses the index is prepared again automatically the next time the statement is executed.</p>
</li>
<li>
<p>If no table name is specified, the index name must be unique for the specified or implicit owner. The implicit owner, in the absence of a specified table or owner, is the current user running the program.</p>
</li>
<li>
<p>If no <a id="sthref1502"></a>index owner is specified and a table is specified, the default owner is the table owner.</p>
</li>
<li>
<p>If a table is specified and no owner is specified for it, the default table owner is the current user running the program.</p>
</li>
<li>
<p>The table and index owners must be the same.</p>
</li>
<li>
<p>An index on a temporary table cannot be dropped by a connection if some other connection has an instance of the table that is not empty.</p>
</li>
<li>
<p>If the index is replicated across an active standby pair and if <code dir="ltr">DDL_REPLICATION_LEVEL</code> is 2 or greater, use the <code dir="ltr">DROP INDEX</code> statement to drop the index from the standby pair in the replication scheme. See <a class="olink TTREP693" href="../TTREP/alterpair.htm#TTREP693">&#34;Making DDL changes in an active standby pair&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span> for more information.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1503"></a>Examples</p>
<p>Drop index <code dir="ltr">partsorderedindex</code> which is defined on table <code dir="ltr">orderitems</code> using one of the following:</p>
<pre dir="ltr">DROP INDEX partsorderedindex
   FROM purchasing.orderitems;
</pre>
<p>Or:</p>
<pre dir="ltr">DROP INDEX purchasing.partsorderedindex;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1504"></a>See also</p>
<p><code dir="ltr"><a href="#i1046832">CREATE INDEX</a></code></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TTSQL544" class="refsect1"><a id="sthref1505"></a>
<h2 class="refsect1"><a id="sthref1506"></a><a id="sthref1507"></a>DROP MATERIALIZED VIEW</h2>
<p>The <code dir="ltr">DROP MATERIALIZED VIEW</code> statement removes the specified materialized view, including any hash indexes and any range indexes associated with it.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1508"></a>Required privilege</p>
<p>View owner or <code dir="ltr">DROP ANY MATERIALIZED VIEW</code> (if not owner) <span class="italic">and</span></p>
<p>Table owner or <code dir="ltr">DROP ANY TABLE</code> (if not owner) <span class="italic">and</span></p>
<p>Index owner or <code dir="ltr">DROP ANY INDEX</code> (if not owner) if there is an index on the view.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1509"></a>SQL syntax</p>
<pre dir="ltr">DROP MATERIALIZED VIEW [<span class="italic">Owner</span>.]<span class="italic">ViewName</span>
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1510"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for DROP VIEW." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t48">Parameter</th>
<th class="cellalignment6331" id="r1c2-t48">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t48" headers="r1c1-t48"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">ViewName</span></code></td>
<td class="cellalignment6332" headers="r2c1-t48 r1c2-t48">Identifies the materialized view to be dropped.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1511"></a>Description</p>
<p>When you execute a <code dir="ltr">DROP MATERIALIZED VIEW</code> operation, the detail tables are updated and locked. An error may result if the detail table was already locked by another transaction.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1512"></a>Examples</p>
<p>The following statement drops the <code dir="ltr">custorder</code> materialized view.</p>
<pre dir="ltr">DROP MATERIALIZED VIEW custorder;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1513"></a>See also</p>
<br/>
<code dir="ltr"><a href="#i1075286">CREATE MATERIALIZED VIEW</a></code></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABEAIJC"></a>
<div id="TTSQL312" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref1514"></a><a id="sthref1515"></a>DROP MATERIALIZED VIEW LOG</h2>
<p>The <code dir="ltr">DROP MATERIALIZED VIEW LOG</code> statement removes the materialized view log for a detail table. It also drops the global temporary table that was created by the <code dir="ltr"><a href="#BABBFEFI">CREATE MATERIALIZED VIEW LOG</a></code> statement.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1516"></a>Required privilege</p>
<p>No privilege is required for the table owner.</p>
<p><code dir="ltr">DROP ANY TABLE</code> for another user&#39;s table.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1517"></a>SQL syntax</p>
<pre dir="ltr">DROP MATERIALIZED VIEW LOG ON [<span class="italic">Owner</span>.]<span class="italic">TableName</span>
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1518"></a>Parameters</p>
<div class="inftblinformal">
<table class="cellalignment6330" title="parameter descriptions" summary="This table describes the parameters for DROP MATERIALIZED VIEW." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t49">Parameter</th>
<th class="cellalignment6331" id="r1c2-t49">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t49" headers="r1c1-t49"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">TableName</span></code></td>
<td class="cellalignment6332" headers="r2c1-t49 r1c2-t49">Name of the detail table for which the materialized view log was created.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1519"></a>Description</p>
<p>This statement drops the materialized view log for the specified detail table. The materialized view log cannot be dropped if there is an asynchronous materialized view that depends on the log for refreshing.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1520"></a>Examples</p>
<pre dir="ltr">DROP MATERIALIZED VIEW LOG ON employees;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1521"></a>See also</p>
<br/>
<code dir="ltr"><a href="#BABBFEFI">CREATE MATERIALIZED VIEW LOG</a></code><br/>
<code dir="ltr"><a href="#i1075286">CREATE MATERIALIZED VIEW</a></code><br/>
<code dir="ltr"><a href="#g1513833">DROP VIEW</a></code></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACEJGJC"></a>
<div id="TTSQL313" class="refsect1">
<h2 class="refsect1"><a id="sthref1522"></a><a id="sthref1523"></a><a id="sthref1524"></a><a id="sthref1525"></a><a id="sthref1526"></a>DROP PACKAGE [BODY]</h2>
<p>The <code dir="ltr">DROP PACKAGE</code> statement removes a stored package from the database. Both the specification and the body are dropped. <code dir="ltr">DROP PACKAGE BODY</code> removes only the body of the package.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1527"></a>Required privilege</p>
<p>No privilege is required for the package owner.</p>
<p><code dir="ltr">DROP ANY PROCEDURE</code> for another user&#39;s package.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1528"></a>SQL syntax</p>
<pre dir="ltr">DROP PACKAGE [BODY] [<span class="italic">Owner</span>.]<span class="italic">PackageName</span>
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1529"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains a description of the parameter for DROP SEQUENCE." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t50">Parameter</th>
<th class="cellalignment6331" id="r1c2-t50">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t50" headers="r1c1-t50"><code dir="ltr">PACKAGE [BODY]</code></td>
<td class="cellalignment6332" headers="r2c1-t50 r1c2-t50">Specify <code dir="ltr">BODY</code> to drop only the body of the package. Omit <code dir="ltr">BODY</code> to drop both the specification and body of the package.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t50" headers="r1c1-t50"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">PackageName</span></code></td>
<td class="cellalignment6332" headers="r3c1-t50 r1c2-t50">Name of the package to be dropped.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1530"></a>Description</p>
<ul>
<li>
<p>When you drop only the body of the package, TimesTen does not invalidate dependent objects. However, you cannot execute one of the procedures or stored functions declared in the package specification until you recreate the package body.</p>
</li>
<li>
<p>TimesTen invalidates any objects that depend on the package specification. If you subsequently reference one of these objects, then TimesTen tries to recompile the object and returns an error if you have not recreated the dropped package.</p>
</li>
<li>
<p>Do not use this statement to remove a single object from the package. Instead, recreate the package without the object using the <code dir="ltr">CREATE PACKAGE</code> and <code dir="ltr">CREATE PACKAGE BODY</code> statements with the <code dir="ltr">OR REPLACE</code> clause.</p>
</li>
<li>
<p>To use the <code dir="ltr">DROP PACKAGE [BODY]</code> statement, you must have PL/SQL enabled in your database. If you do not have PL/SQL enabled in your database, TimesTen returns an error.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1531"></a>Example</p>
<p>The following statement drops the body of package <code dir="ltr">samplePackage</code>:</p>
<pre dir="ltr">Command&gt; DROP PACKAGE BODY SamplePackage;
Package body dropped.
</pre>
<p>To drop both the specification and body of package <code dir="ltr">samplepackage</code>:</p>
<pre dir="ltr">Command&gt; DROP PACKAGE samplepackage;
Package dropped.
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1532"></a>See also</p>
<p><code dir="ltr"><a href="#CHDGJEGG">CREATE PACKAGE</a></code></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACDECHH"></a>
<div id="TTSQL314" class="refsect1">
<h2 class="refsect1"><a id="sthref1533"></a><a id="sthref1534"></a><a id="sthref1535"></a>DROP PROCEDURE</h2>
<p>The <code dir="ltr">DROP PROCEDURE</code> statement removes a standalone stored procedure from the database. Do not use this statement to remove a procedure that is part of a package.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1536"></a>Required privilege</p>
<p>No privilege is required for the procedure owner.</p>
<p><code dir="ltr">DROP ANY PROCEDURE</code> for another user&#39;s procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1537"></a>SQL syntax</p>
<pre dir="ltr">DROP PROCEDURE [<span class="italic">Owner</span>.]<span class="italic">ProcedureName</span>
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1538"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains a description of the parameter for DROP SEQUENCE." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t51">Parameter</th>
<th class="cellalignment6331" id="r1c2-t51">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t51" headers="r1c1-t51"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">ProcedureName</span></code></td>
<td class="cellalignment6332" headers="r2c1-t51 r1c2-t51">Name of the procedure to be dropped.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1539"></a>Description</p>
<ul>
<li>
<p>When you drop a procedure, TimesTen invalidates objects that depend on the dropped procedure. If you subsequently reference one of these objects, TimesTen attempts to recompile the object and returns an error message if you have not recreated the dropped procedure.</p>
</li>
<li>
<p>Do not use this statement to remove a procedure that is part of a package. Either drop the package or redefine the package without the procedure using the <code dir="ltr">CREATE PACKAGE</code> statement with the <code dir="ltr">OR REPLACE</code> clause.</p>
</li>
<li>
<p>To use the <code dir="ltr">DROP PROCEDURE</code> statement, you must have PL/SQL enabled in your database. If you do not have PL/SQL enabled in your database, an error is thrown.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1540"></a>Examples</p>
<p>The following statement drops the procedure <code dir="ltr">myproc</code> and invalidates all objects that depend on <code dir="ltr">myproc</code>:</p>
<pre dir="ltr">Command&gt; DROP PROCEDURE myproc;
Procedure dropped.
</pre>
<p>If PL/SQL is not enabled in your database, TimesTen returns an error:</p>
<pre dir="ltr">Command&gt; DROP PROCEDURE myproc;
 
 8501: PL/SQL feature not installed in this TimesTen databaseThe command failed.
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1541"></a>See also</p>
<p><code dir="ltr"><a href="#CACCAHCB">CREATE PROCEDURE</a></code></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="g1513799"></a>
<div id="TTSQL316" class="refsect1">
<h2 class="refsect1"><a id="sthref1542"></a><a id="sthref1543"></a>DROP REPLICATION</h2>
<p>The <code dir="ltr">DROP REPLICATION</code> statement destroys a classic replication scheme and removes it from the executing database.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1544"></a>Required privilege</p>
<p><code dir="ltr">ADMIN</code></p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1545"></a>SQL syntax</p>
<pre dir="ltr">DROP REPLICATION [<span class="italic">Owner.</span>]<span class="italic">ReplicationSchemeName</span>
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1546"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains a description of the parameter for DROP REPLICATION." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t52">Parameter</th>
<th class="cellalignment6331" id="r1c2-t52">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t52" headers="r1c1-t52"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">ReplicationSchemeName</span></code></td>
<td class="cellalignment6332" headers="r2c1-t52 r1c2-t52">Name assigned to the classic replication scheme.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1547"></a>Description</p>
<p>Dropping the last replication scheme on a database does not delete the replicated tables. These tables exist and persist at a database whether any replication schemes are defined.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1548"></a>Examples</p>
<p>The following statement erases the executing database&#39;s knowledge of a classic replication scheme, <code dir="ltr">r</code>:</p>
<pre dir="ltr">DROP REPLICATION r;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1549"></a>See also</p>
<br/>
<code dir="ltr"><a href="#i990933">ALTER REPLICATION</a></code><br/>
<code dir="ltr"><a href="#i992040">CREATE REPLICATION</a></code></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i993089"></a>
<div id="TTSQL315" class="refsect1">
<h2 class="refsect1"><a id="sthref1550"></a><a id="sthref1551"></a>DROP SEQUENCE</h2>
<p>The <code dir="ltr">DROP SEQUENCE</code> statement removes an existing sequence number generator.</p>
<p>If the sequence is replicated across an active standby pair and if <code dir="ltr">DDL_REPLICATION_LEVEL</code> is 3 or greater, the <code dir="ltr">DROP SEQUENCE</code> statement drops the sequence from the active standby pair for all databases in the replication scheme. See <a class="olink TTREP693" href="../TTREP/alterpair.htm#TTREP693">&#34;Making DDL changes in an active standby pair&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span> for more information.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1552"></a>Required privilege</p>
<p>No privilege is required for the sequence owner.</p>
<p><code dir="ltr">DROP ANY SEQUENCE</code> for another user&#39;s sequence.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1553"></a>SQL syntax</p>
<pre dir="ltr">DROP SEQUENCE [<span class="italic">Owner</span>.]<span class="italic">SequenceName</span>
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1554"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains a description of the parameter for DROP SEQUENCE." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t53">Parameter</th>
<th class="cellalignment6331" id="r1c2-t53">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t53" headers="r1c1-t53"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">SequenceName</span></code></td>
<td class="cellalignment6332" headers="r2c1-t53 r1c2-t53">Name of the sequence number generator.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1555"></a>Description</p>
<ul>
<li>
<p>Sequences can be dropped while they are in use.</p>
</li>
<li>
<p>There is no <code dir="ltr">ALTER SEQUENCE</code> statement in TimesTen. To alter a sequence, use the <code dir="ltr">DROP SEQUENCE</code> statement and then create a new sequence with the same name. For example, to change the <code dir="ltr">MINVALUE</code>, drop the sequence and recreate it with the same name and with the desired <code dir="ltr">MINVALUE</code>.</p>
</li>
<li>
<p>If the sequence is part of a replication scheme, use the <code dir="ltr"><a href="#i990933">ALTER REPLICATION</a></code> statement to drop the sequence from the replication scheme. Then use the <code dir="ltr">DROP SEQUENCE</code> statement to drop the sequence.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1556"></a>Examples</p>
<p>The following statement drops <code dir="ltr">mysequence</code>:</p>
<pre dir="ltr">DROP SEQUENCE mysequence;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1557"></a>See also</p>
<p><code dir="ltr"><a href="#i992569">CREATE SEQUENCE</a></code></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABGEEID"></a>
<div id="TTSQL436" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref1558"></a><a id="sthref1559"></a>DROP SYNONYM</h2>
<p>The <code dir="ltr">DROP SYNONYM</code> statement removes a synonym from the database.</p>
<p>If the synonym is replicated across an active standby pair and if <code dir="ltr">DDL_REPLICATION_LEVEL</code> is 2 or greater, the <code dir="ltr">DROP SYNONYM</code> statement drops the synonym from the active standby pair for all databases in the replication scheme. See <a class="olink TTREP693" href="../TTREP/alterpair.htm#TTREP693">&#34;Making DDL changes in an active standby pair&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span> for more information.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1560"></a>Required privilege</p>
<p>No privilege is required to drop the private synonym by its owner. The <code dir="ltr">DROP ANY SYNONYM</code> privilege is required to drop another user&#39;s private synonym.</p>
<p>The <code dir="ltr">DROP PUBLIC SYNONYM</code> privilege is required to drop a <code dir="ltr">PUBLIC</code> synonym.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1561"></a>SQL syntax</p>
<p>To drop a private synonym, use the following syntax:</p>
<pre dir="ltr">DROP SYNONYM [<span class="italic">Owner</span>.]<span class="italic">SynonymName</span>
</pre>
<p>To drop a public synonym:</p>
<pre dir="ltr">DROP PUBLIC SYNONYM <span class="italic">SynonymName</span>
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1562"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="This table describes the parameters for DROP SYNONYM." summary="This table describes the parameters for DROP SYNONYM." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t54">Parameter</th>
<th class="cellalignment6331" id="r1c2-t54">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t54" headers="r1c1-t54"><code dir="ltr">PUBLIC</code></td>
<td class="cellalignment6332" headers="r2c1-t54 r1c2-t54">Specify <code dir="ltr">PUBLIC</code> to drop a public synonym.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t54" headers="r1c1-t54"><code dir="ltr"><span class="codeinlineitalic">Owner</span></code></td>
<td class="cellalignment6332" headers="r3c1-t54 r1c2-t54">Optionally, specify the owner for a private synonym. If you omit the owner, the private synonym must exist in the current user&#39;s schema.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t54" headers="r1c1-t54"><code dir="ltr"><span class="codeinlineitalic">SynonymName</span></code></td>
<td class="cellalignment6332" headers="r4c1-t54 r1c2-t54">Specify the name of the synonym to be dropped.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1563"></a>Examples</p>
<p>Drop the public synonym <code dir="ltr">pubemp</code>:</p>
<pre dir="ltr">DROP PUBLIC SYNONYM pubemp;
Synonym dropped.
</pre>
<p>Drop the private <code dir="ltr">synjobs</code> synonym:</p>
<pre dir="ltr">DROP SYNONYM synjobs;
Synonym dropped.
</pre>
<p>As user <code dir="ltr">terry</code> with <code dir="ltr">DROP ANY SYNONYM</code> privilege, drop the private <code dir="ltr">syntab</code> synonym owned by <code dir="ltr">ttuser</code>.</p>
<pre dir="ltr">DROP SYNONYM ttuser.syntab;
Synonym dropped.
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1564"></a>See also</p>
<p><code dir="ltr"><a href="#BABIIJBC">CREATE SYNONYM</a></code></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="g1513813"></a>
<div id="TTSQL317" class="refsect1">
<h2 class="refsect1">DROP TABLE<a id="sthref1565"></a><a id="sthref1566"></a><a id="sthref1567"></a></h2>
<p>The <code dir="ltr">DROP TABLE</code> statement removes the specified table, including any hash indexes and any range indexes associated with it.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1568"></a>Required privilege</p>
<p>No privilege is required for the table owner.</p>
<p><code dir="ltr">DROP ANY TABLE</code> for another user&#39;s table.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1569"></a>SQL syntax</p>
<pre dir="ltr">DROP TABLE [<span class="italic">Owner</span>.]<span class="italic">TableName</span>
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1570"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains a description of the parameter for DROP TABLE." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t55">Parameter</th>
<th class="cellalignment6331" id="r1c2-t55">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t55" headers="r1c1-t55"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">TableName</span></code></td>
<td class="cellalignment6332" headers="r2c1-t55 r1c2-t55">Identifies the table to be dropped.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1571"></a>Description</p>
<ul>
<li>
<p>If you attempt to drop a table that is in use, an error results.</p>
</li>
<li>
<p>If <code dir="ltr">DROP TABLE</code> is or was active in an uncommitted transaction, other transactions doing DML operations that do not access that table are allowed to proceed.</p>
</li>
<li>
<p>If the table is a replicated table, you can do one of the following:</p>
<ul>
<li>
<p>Use the <code dir="ltr">DROP REPLICATION</code> statement to drop the replication scheme before issuing the <code dir="ltr">DROP TABLE</code> statement.</p>
</li>
<li>
<p>If <code dir="ltr">DDL_REPLICATION_LEVEL</code> is 2 or greater, the <code dir="ltr">DROP TABLE</code> statement drops the table from the active standby pair for all databases in the replication scheme.</p>
<p>If <code dir="ltr">DDL_REPLICATION_LEVEL</code> is 1, stop the replication agent and use the <code dir="ltr">ALTER ACTIVE STANDBY PAIR ... EXCLUDE TABLE</code> statement to exclude the table from the replication scheme. Then use the <code dir="ltr">DROP TABLE</code> statement to drop the table.</p>
<p>See <a class="olink TTREP693" href="../TTREP/alterpair.htm#TTREP693">&#34;Making DDL changes in an active standby pair&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span> for more information.</p>
</li>
</ul>
</li>
<li>
<p>A temporary table cannot be dropped by a connection if some other connection has some non-empty instance of the table.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1572"></a>Examples</p>
<pre dir="ltr">CREATE TABLE vendorperf
   (ordernumber INTEGER,
    delivday TT_SMALLINT,
    delivmonth TT_SMALLINT,
    delivyear TT_SMALLINT,
    delivqty TT_SMALLINT,
    remarks VARCHAR2(60));
CREATE UNIQUE INDEX vendorperfindex ON vendorperf (ordernumber);
</pre>
<p>The following statement drops the table and index.</p>
<pre dir="ltr">DROP TABLE vendorperf;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABEFCHB"></a>
<div id="TTSQL318" class="refsect1">
<h2 class="refsect1"><a id="sthref1573"></a><a id="sthref1574"></a>DROP USER</h2>
<p>The <code dir="ltr">DROP USER</code> statement removes a user from the database.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1575"></a>Required privilege</p>
<p><code dir="ltr">ADMIN</code></p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1576"></a>SQL syntax</p>
<pre dir="ltr">DROP USER <span class="italic">user</span>
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1577"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains a description of the parameter for DROP USER." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t56">Parameter</th>
<th class="cellalignment6331" id="r1c2-t56">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t56" headers="r1c1-t56"><code dir="ltr"><span class="codeinlineitalic">user</span></code></td>
<td class="cellalignment6332" headers="r2c1-t56 r1c2-t56">Name of the user that is being dropped from the database.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1578"></a>Description</p>
<p>Before you can drop a user:</p>
<ul>
<li>
<p>The user must exist either internally or externally in the database.</p>
</li>
<li>
<p>You must drop objects that the user owns.</p>
</li>
<li>
<p>When replication is configured, this statement is replicated.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1579"></a>Examples</p>
<p>Drop user <code dir="ltr">terry</code> from the database:</p>
<pre dir="ltr">DROP USER terry;
User dropped.
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1580"></a>See also</p>
<br/>
<code dir="ltr"><a href="#g1513697">CREATE USER</a></code><br/>
<code dir="ltr"><a href="#i1334963">ALTER USER</a></code><br/>
<code dir="ltr"><a href="#g1513872">GRANT</a></code><br/>
<code dir="ltr"><a href="#g1513967">REVOKE</a></code></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="g1513833"></a>
<div id="TTSQL311" class="refsect1">
<h2 class="refsect1"><a id="sthref1581"></a><a id="sthref1582"></a>DROP VIEW</h2>
<p>The <code dir="ltr">DROP VIEW</code> statement removes the specified view.</p>
<p>If the view is replicated across an active standby pair and if <code dir="ltr">DDL_REPLICATION_LEVEL</code> is 3 or greater, the <code dir="ltr">DROP VIEW</code> statement drops the view from the active standby pair for all databases in the replication scheme. See <a class="olink TTREP693" href="../TTREP/alterpair.htm#TTREP693">&#34;Making DDL changes in an active standby pair&#34;</a> in the <span class="italic">Oracle TimesTen In-Memory Database Replication Guide</span> for more information.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1583"></a>Required privilege</p>
<p>View owner or <code dir="ltr">DROP ANY VIEW</code> (if not owner)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1584"></a>SQL syntax</p>
<pre dir="ltr">DROP VIEW [<span class="italic">Owner</span>.]<span class="italic">ViewName</span>
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1585"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for DROP VIEW." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t57">Parameter</th>
<th class="cellalignment6331" id="r1c2-t57">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t57" headers="r1c1-t57"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">ViewName</span></code></td>
<td class="cellalignment6332" headers="r2c1-t57 r1c2-t57">Identifies the view to be dropped.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1586"></a>Examples</p>
<p>The following statement drops the <code dir="ltr">custorder</code> view.</p>
<pre dir="ltr">DROP VIEW custorder;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1587"></a>See also</p>
<br/>
<code dir="ltr"><a href="#i992961">CREATE VIEW</a></code></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABEAGCC"></a>
<div id="TTSQL319" class="refsect1">
<h2 class="refsect1"><a id="sthref1588"></a><a id="sthref1589"></a>FLUSH CACHE GROUP</h2>
<p>The <code dir="ltr">FLUSH CACHE GROUP</code> statement flushes data from TimesTen cache tables to Oracle Database tables. This statement is available only for user managed cache groups. For a description of cache group types, see <a href="#BABEDHHA">&#34;User managed and system managed cache groups&#34;</a>.</p>
<p>There are two variants to this operation: one that accepts a <code dir="ltr">WHERE</code> clause, and one that accepts a <code dir="ltr">WITH ID</code> clause.</p>
<p><code dir="ltr">FLUSH CACHE GROUP</code> is meant to be used when commit propagation (from TimesTen to Oracle Database) is turned off. Instead of propagating every transaction upon commit, many transactions can be committed before changes are propagated to Oracle Database. For each cache instance ID, if the cache instance exists in the Oracle database, the operation in the Oracle database consists of an update. If the cache instance does not exist in the Oracle database, TimesTen inserts it.</p>
<p>This is useful, for example, in a shopping cart application in which many changes may be made to the cart, which uses TimesTen as a high-speed cache, before the order is committed to the master Oracle database table.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Using a <code dir="ltr">WITH ID</code> clause usually results in better system performance than using a <code dir="ltr">WHERE</code> clause.</div>
<p>Only inserts and updates are flushed. Inserts are propagated as inserts if the record does not exist in the Oracle database table or as updates (if the record already exists). It is not possible to flush a delete. That is, if a record is deleted on TimesTen, there is no way to &#34;flush&#34; that delete to the Oracle database table. Deletes must be propagated either manually or by turning commit propagation on. Attempts to flush deleted records are silently ignored. No error or warning is issued. Records from tables that are specified as <code dir="ltr">READ ONLY</code> or <code dir="ltr">PROPAGATE</code> cannot be flushed to the Oracle database tables.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1590"></a>Required privilege</p>
<p>No privilege is required for the cache group owner.</p>
<p><code dir="ltr">FLUSH</code> or <code dir="ltr">FLUSH ANY CACHE GROUP</code> for another user&#39;s cache group.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1591"></a>SQL syntax</p>
<pre dir="ltr">FLUSH CACHE GROUP [<span class="italic">Owner.</span>]<span class="italic">GroupName</span>
[WHERE <span class="italic">ConditionalExpression</span>];
</pre>
<p>Or:</p>
<pre dir="ltr">FLUSH CACHE GROUP [<span class="italic">Owner.</span>]<span class="italic">GroupName</span>
WITH ID (<span class="italic">ColumnValueList</span>)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1592"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for FLUSH CACHE GROUP." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t59">Parameter</th>
<th class="cellalignment6331" id="r1c2-t59">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t59" headers="r1c1-t59"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">GroupName</span></code></td>
<td class="cellalignment6332" headers="r2c1-t59 r1c2-t59">Name of the cache group to be flushed.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t59" headers="r1c1-t59"><code dir="ltr">WHERE</code> <code dir="ltr"><span class="codeinlineitalic">ConditionalExpression</span></code></td>
<td class="cellalignment6332" headers="r3c1-t59 r1c2-t59">Use the <code dir="ltr">WHERE</code> clause to specify a search condition to qualify the target rows of the cache operation. If you use more than one table in the <code dir="ltr">WHERE</code> clause and the tables have columns with the same names, fully qualify the table names.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t59" headers="r1c1-t59"><code dir="ltr">WITH ID</code> <code dir="ltr"><span class="codeinlineitalic">ColumnValueList</span></code></td>
<td class="cellalignment6332" headers="r4c1-t59 r1c2-t59">The <code dir="ltr">WITH ID</code> clauses enables you to use primary key values to flush the cache instance. Specify <code dir="ltr"><span class="codeinlineitalic">ColumnValueList</span></code> as either a list of literals or binding parameters to represent the primary key values.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1593"></a>Description</p>
<ul>
<li>
<p><code dir="ltr">WHERE</code> clauses are generally used to apply the operation to a set of cache instances, rather than to a single cache instance or to all cache instances. The flush operation uses the <code dir="ltr">WHERE</code> clause to determine which cache instances to send to the Oracle database.</p>
</li>
<li>
<p>Generally, you do not have to fully qualify the column names in the <code dir="ltr">WHERE</code> clause of the <code dir="ltr">FLUSH CACHE GROUP</code> statement. However, since TimesTen automatically generates queries that join multiple tables in the same cache group, a column must be fully qualified if there is more than one table in the cache group that contains columns with the same name. Without an owner name, all tables referenced by cache group <code dir="ltr">WHERE</code> clauses are owned by the current login name executing the cache group operation.</p>
</li>
<li>
<p>When the <code dir="ltr">WHERE</code> clause is omitted, the entire contents of the cache group is flushed to the Oracle database tables. When the <code dir="ltr">WHERE</code> clause is included, it is allowed to include only the root table.</p>
</li>
<li>
<p>Following the execution of a <code dir="ltr">FLUSH CACHE GROUP</code> statement, the ODBC function <code dir="ltr">SQLRowCount()</code>, the JDBC method <code dir="ltr">getUpdateCount()</code>, and the OCI function <code dir="ltr">OCIAttrGet()</code> with the <code dir="ltr">OCI_ATTR_ROW_COUNT</code> argument return the number of cache instances that were flushed.</p>
</li>
<li>
<p>Use the <code dir="ltr">WITH ID</code> clause to specify binding parameters.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1594"></a>Restrictions</p>
<ul>
<li>
<p>Do not use the <code dir="ltr">WITH ID</code> clause on AWT or SWT cache groups, user managed cache groups with the propagate attribute, or autorefreshed and propagated user managed cache groups unless the cache group is a dynamic cache group.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1595"></a>Examples</p>
<pre dir="ltr">FLUSH CACHE GROUP marketbasket;

FLUSH CACHE GROUP marketbasket
WITH ID(10);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1596"></a>See also</p>
<br/>
<code dir="ltr"><a href="#i1228554">CREATE CACHE GROUP</a></code></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="g1513872"></a>
<div id="TTSQL320" class="refsect1">
<h2 class="refsect1"><a id="sthref1597"></a><a id="sthref1598"></a>GRANT</h2>
<p>The <code dir="ltr">GRANT</code> statement assigns one or more privileges to a user.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1599"></a>Required privilege</p>
<p><code dir="ltr">ADMIN</code> to grant system privileges.</p>
<p><code dir="ltr">ADMIN</code> or the object owner to grant object privileges.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1600"></a>SQL syntax</p>
<pre dir="ltr">GRANT {<span class="italic">SystemPrivilege</span> [,...] | ALL [PRIVILEGES]} [...] TO {<span class="italic">user</span> |PUBLIC} [,...]

GRANT {{<span class="italic">ObjectPrivilege</span> [,...] | ALL [PRIVILEGES]} ON {[<span class="italic">Owner</span>.]<span class="italic">object</span>}[,...]} TO
{<span class="italic">user</span> | PUBLIC} [,...]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1601"></a>Parameters</p>
<p>The following parameters are for granting system privileges:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for GRANT." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t60">Parameter</th>
<th class="cellalignment6331" id="r1c2-t60">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t60" headers="r1c1-t60"><code dir="ltr"><span class="codeinlineitalic">SystemPrivilege</span></code></td>
<td class="cellalignment6332" headers="r2c1-t60 r1c2-t60">This is the system privilege to grant. See <a href="privileges.htm#BABECGGB">&#34;System privileges&#34;</a> for a list of acceptable values.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t60" headers="r1c1-t60"><code dir="ltr">ALL [PRIVILEGES]</code></td>
<td class="cellalignment6332" headers="r3c1-t60 r1c2-t60">Assigns all system privileges to the user.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t60" headers="r1c1-t60"><code dir="ltr"><span class="codeinlineitalic">user</span></code></td>
<td class="cellalignment6332" headers="r4c1-t60 r1c2-t60">Name of the user to whom privileges are being granted. The user name must first have been introduced to the TimesTen database by a <code dir="ltr"><a href="#g1513697">CREATE USER</a></code> statement.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t60" headers="r1c1-t60"><code dir="ltr"><a id="sthref1602"></a><a id="sthref1603"></a>PUBLIC</code></td>
<td class="cellalignment6332" headers="r5c1-t60 r1c2-t60">Specifies that the privilege is granted to all users.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" -->
<p>The following parameters are for granting object privileges:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for GRANT." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t61">Parameter</th>
<th class="cellalignment6331" id="r1c2-t61">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t61" headers="r1c1-t61"><code dir="ltr"><span class="codeinlineitalic">ObjectPrivilege</span></code></td>
<td class="cellalignment6332" headers="r2c1-t61 r1c2-t61">This is the object privilege to grant. See <a href="privileges.htm#BABIDBFC">&#34;Object privileges&#34;</a> for a list of acceptable values.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t61" headers="r1c1-t61"><code dir="ltr">ALL [PRIVILEGES]</code></td>
<td class="cellalignment6332" headers="r3c1-t61 r1c2-t61">Assigns all object privileges to the user.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t61" headers="r1c1-t61"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">object</span></code></td>
<td class="cellalignment6332" headers="r4c1-t61 r1c2-t61"><code dir="ltr"><span class="codeinlineitalic">object</span></code> is the name of the object on which privileges are being granted. <code dir="ltr"><span class="codeinlineitalic">Owner</span></code> is the owner of the object. If <code dir="ltr"><span class="codeinlineitalic">Owner</span></code> is not specified, the user who is granting the privilege is the owner.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t61" headers="r1c1-t61"><code dir="ltr"><span class="codeinlineitalic">user</span></code></td>
<td class="cellalignment6332" headers="r5c1-t61 r1c2-t61">Name of the user to whom privileges are being granted. The user must exist in the database.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t61" headers="r1c1-t61"><code dir="ltr">PUBLIC</code></td>
<td class="cellalignment6332" headers="r6c1-t61 r1c2-t61">Specifies that the privilege is granted to all users.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1604"></a>Description</p>
<ul>
<li>
<p>One or more system privileges can be granted to a user by a user with <code dir="ltr">ADMIN</code> privilege.</p>
</li>
<li>
<p>One or more object privileges can be granted to a user by the owner of the object.</p>
</li>
<li>
<p>One or more object privileges can be granted to a user on any object by a user with <code dir="ltr">ADMIN</code> privilege.</p>
</li>
<li>
<p>To remove a privilege from a user, use the <code dir="ltr"><a href="#g1513967">REVOKE</a></code> statement.</p>
</li>
<li>
<p>You cannot grant system privileges and object privileges in the same statement.</p>
</li>
<li>
<p>Only one object can be specified in an object privilege statement.</p>
</li>
<li>
<p>When replication is configured, this statement is replicated.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1605"></a>Examples</p>
<p>Grant the <code dir="ltr">ADMIN</code> privilege to the user <code dir="ltr">terry</code>:</p>
<pre dir="ltr">GRANT admin TO terry;
</pre>
<p>Assuming the grantor has <code dir="ltr">ADMIN</code> privilege, grant the <code dir="ltr">SELECT</code> privilege to user <code dir="ltr">terry</code> on the <code dir="ltr">customers</code> table owned by user <code dir="ltr">pat</code>:</p>
<pre dir="ltr">GRANT SELECT ON pat.customers TO terry;
</pre>
<p>Grant an object privilege to user <code dir="ltr">terry</code>:</p>
<pre dir="ltr">GRANT SELECT ON emp_details_view TO terry;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1606"></a>See also</p>
<br/>
<code dir="ltr"><a href="#g1513697">CREATE USER</a></code><br/>
<code dir="ltr"><a href="#i1334963">ALTER USER</a></code><br/>
<code dir="ltr"><a href="#BABEFCHB">DROP USER</a></code><br/>
<code dir="ltr"><a href="#g1513967">REVOKE</a></code><br/>
<a href="privileges.htm#BABHEBDF">&#34;The PUBLIC role&#34;</a></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="g1513888"></a>
<div id="TTSQL321" class="refsect1">
<h2 class="refsect1"><a id="sthref1607"></a><a id="sthref1608"></a><a id="sthref1609"></a>INSERT</h2>
<p>The <code dir="ltr">INSERT</code> statement adds rows to a table.</p>
<p>The following expressions can be used in the <code dir="ltr">VALUES</code> clause of an <code dir="ltr">INSERT</code> statement:</p>
<ul>
<li>
<p><a href="function.htm#i1000743">TO_CHAR</a></p>
</li>
<li>
<p><a href="function.htm#i1058153">TO_DATE</a></p>
</li>
<li>
<p><span class="italic">Sequence</span> NEXTVAL and <span class="italic">Sequence</span> CURRVAL</p>
</li>
<li>
<p><a href="function.htm#i1000097">CAST</a></p>
</li>
<li>
<p>DEFAULT</p>
</li>
<li>
<p><a href="function.htm#i1001775">SYSDATE and GETDATE</a></p>
</li>
<li>
<p><a href="function.htm#CIHFHCFB">User and session functions</a></p>
</li>
<li>
<p><a href="express.htm#i996218">Expressions</a></p>
</li>
<li>
<p><a href="function.htm#i1120532">SYSTEM_USER</a></p>
</li>
</ul>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1610"></a>Required privilege</p>
<p>No privilege is required for the table owner.</p>
<p><code dir="ltr">INSERT</code> for another user&#39;s table.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1611"></a>SQL syntax</p>
<pre dir="ltr">INSERT [<span class="italic">hint</span>] INTO [<span class="italic">Owner</span>.]<span class="italic">TableName</span> [(<span class="italic">Column</span> [,...])]
VALUES (<span class="italic">SingleRowValues</span>)
[RETURNING|RETURN <span class="italic">Expression</span>[,...] INTO <span class="italic">DataItem</span>[,...]]
</pre>
<p>The <code dir="ltr"><span class="codeinlineitalic">SingleRowValues</span></code> parameter has the syntax:</p>
<pre dir="ltr">{NULL|{?|:<span class="italic">DynamicParameter</span>}|{<span class="italic">Constant</span>}| DEFAULT}[,...]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1612"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for the SingleRowValues parameter." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t62">Parameter</th>
<th class="cellalignment6331" id="r1c2-t62">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t62" headers="r1c1-t62"><code dir="ltr"><span class="codeinlineitalic">hint</span></code></td>
<td class="cellalignment6332" headers="r2c1-t62 r1c2-t62">Specifies a statement level optimizer hint for the <code dir="ltr">INSERT</code> statement. For more information on hints, see <a href="#BABJFIBC">&#34;Statement level optimizer hints&#34;</a>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t62" headers="r1c1-t62"><code dir="ltr"><span class="codeinlineitalic">Owner</span></code></td>
<td class="cellalignment6332" headers="r3c1-t62 r1c2-t62">The owner of the table into which data is inserted.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t62" headers="r1c1-t62"><code dir="ltr"><span class="codeinlineitalic">TableName</span></code></td>
<td class="cellalignment6332" headers="r4c1-t62 r1c2-t62">Name of the table into which data is inserted.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t62" headers="r1c1-t62"><code dir="ltr"><span class="codeinlineitalic">Column</span></code></td>
<td class="cellalignment6332" headers="r5c1-t62 r1c2-t62">Each column in this list is assigned a value from <code dir="ltr"><span class="codeinlineitalic">SingleRowValues</span></code>.
<p>If you omit one or more of the table&#39;s columns from this list, then the value of the omitted column in the inserted row is the column default value as specified when the table was created or last altered. If any omitted column has a <code dir="ltr">NOT NULL</code> constraint and has no default value, then the database returns an error.</p>
<p>If you omit a list of columns completely, then you must specify values for all columns in the table.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t62" headers="r1c1-t62"><code dir="ltr">?</code>
<p>:<code dir="ltr"><span class="codeinlineitalic">DynamicParameter</span></code></p>
</td>
<td class="cellalignment6332" headers="r6c1-t62 r1c2-t62">Placeholder for a dynamic parameter in a prepared SQL statement. The value of the dynamic parameter is supplied when the statement is executed.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r7c1-t62" headers="r1c1-t62"><code dir="ltr"><span class="codeinlineitalic">Constant</span></code></td>
<td class="cellalignment6332" headers="r7c1-t62 r1c2-t62">A specific value. See <a href="express.htm#i1043723">&#34;Constants&#34;</a>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r8c1-t62" headers="r1c1-t62"><code dir="ltr"><a id="sthref1613"></a><a id="sthref1614"></a><a id="sthref1615"></a>DEFAULT</code></td>
<td class="cellalignment6332" headers="r8c1-t62 r1c2-t62">Specifies that the column should be updated with the default value.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r9c1-t62" headers="r1c1-t62"><code dir="ltr"><span class="codeinlineitalic">Expression</span></code></td>
<td class="cellalignment6332" headers="r9c1-t62 r1c2-t62">Valid expression syntax. See <a href="express.htm#i996218">Chapter 3, &#34;Expressions&#34;</a>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r10c1-t62" headers="r1c1-t62"><code dir="ltr"><span class="codeinlineitalic">DataItem</span></code></td>
<td class="cellalignment6332" headers="r10c1-t62 r1c2-t62">Host variable or PL/SQL variable that stores the retrieved <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> value.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1616"></a>Description</p>
<ul>
<li>
<p>I<a id="sthref1617"></a><a id="sthref1618"></a>f you omit any of the table&#39;s columns from the column name list, the <code dir="ltr">INSERT</code> statement places the default value in the omitted columns. If the table definition specifies <code dir="ltr">NOT NULL</code> for any of the omitted columns and there is no default value, the <code dir="ltr">INSERT</code> statement fails.</p>
</li>
<li>
<p><code dir="ltr">BINARY</code> and <code dir="ltr">VARBINARY</code> data can be inserted in character or hexadecimal format:</p>
<ul>
<li>
<p>Character format requires single quotes.</p>
</li>
<li>
<p>Hexadecimal format requires the prefix <code dir="ltr">0x</code> before the value.</p>
</li>
</ul>
</li>
<li>
<p>The <code dir="ltr">INSERT</code> operation fails if it violates a foreign key constraint. See <a href="#i1211666">&#34;CREATE TABLE&#34;</a> for a description of the foreign key constraint.</p>
</li>
<li>
<p>R<a id="sthref1619"></a>estrictions on the <code dir="ltr">RETURNING</code> clause:</p>
<ul>
<li>
<p>Each <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> must be a simple expression. Aggregate functions are not supported.</p>
</li>
<li>
<p>You cannot return a sequence number into an <code dir="ltr">OUT</code> parameter.</p>
</li>
<li>
<p><code dir="ltr">ROWNUM</code> and subqueries cannot be used in the <code dir="ltr">RETURNING</code> clause.</p>
</li>
<li>
<p>Parameters in the <code dir="ltr">RETURNING</code> clause cannot be duplicated anywhere in the <code dir="ltr">INSERT</code> statement.</p>
</li>
<li>
<p>In PL/SQL, you cannot use a <code dir="ltr">RETURNING</code> clause with a <code dir="ltr">WHERE CURRENT</code> operation.</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1620"></a>Examples</p>
<p>A new single row is added to the <code dir="ltr">purchasing.vendors</code> table.</p>
<pre dir="ltr">INSERT INTO purchasing.vendors
VALUES (9016,
       &#39;Secure Systems, Inc.&#39;,
       &#39;Jane Secret&#39;,
       &#39;454-255-2087&#39;,
       &#39;1111 Encryption Way&#39;,
       &#39;Hush&#39;,
       &#39;MD&#39;,
       &#39;00007&#39;,
       &#39;discount rates are secret&#39;);
</pre>
<p>For dynamic parameters :<code dir="ltr">pno</code> and :<code dir="ltr">pname</code>, values are supplied at runtime.</p>
<pre dir="ltr">INSERT INTO purchasing.parts (partnumber, partname)
  VALUES (:pno, :pname);
</pre>
<p>Return the annual <code dir="ltr">salary</code> and <code dir="ltr">job_id</code> of a new employee. Declare the variables <code dir="ltr">sal</code> and <code dir="ltr">jobid</code> with the same data types as <code dir="ltr">salary</code> and <code dir="ltr">job_id</code>. Insert the row into <code dir="ltr">employees</code>. Print the variables for verification.</p>
<pre dir="ltr">Command&gt; VARIABLE sal12 NUMBER(8,2);
Command&gt; VARIABLE jobid VARCHAR2(10) INLINE NOT NULL;

Command&gt; INSERT INTO employees(employee_id, last_name, email, hire_date, 
       &gt; job_id, salary)
       &gt; VALUES (211,&#39;Doe&#39;,&#39;JDOE&#39;,sysdate,&#39;ST_CLERK&#39;,2400)
       &gt; RETURNING salary*12, job_id INTO :sal12,:jobid;
1 row inserted.

PRINT sal12 jobid;
SAL12                 : 28800
JOBID                 : ST_CLERK
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1621"></a>See also</p>
<br/>
<code dir="ltr"><a href="#i1211666">CREATE TABLE</a></code><br/>
<code dir="ltr"><a href="#g1513908">INSERT...SELECT</a></code><br/>
<a href="express.htm#i996218">Chapter 3, &#34;Expressions&#34;</a></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="g1513908"></a>
<div id="TTSQL322" class="refsect1">
<h2 class="refsect1"><a id="sthref1622"></a><a id="sthref1623"></a><a id="sthref1624"></a>INSERT...SELECT</h2>
<p>The <code dir="ltr">INSERT...SELECT</code> statement inserts the results of a query into a table.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1625"></a>Required privilege</p>
<p>No privilege is required for the object owner.</p>
<p><code dir="ltr">INSERT</code> and <code dir="ltr">SELECT</code> for another user&#39;s object.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1626"></a>SQL syntax</p>
<pre dir="ltr">INSERT INTO [<span class="italic">Owner</span>.]<span class="italic">TableName</span> [(<span class="italic">ColumnName</span> [,...])] <span class="italic">InsertQuery</span>
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1627"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for INSERT SELECT." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t63">Parameter</th>
<th class="cellalignment6331" id="r1c2-t63">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t63" headers="r1c1-t63"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">TableName</span></code></td>
<td class="cellalignment6332" headers="r2c1-t63 r1c2-t63">Table to which data is to be added.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t63" headers="r1c1-t63"><code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code></td>
<td class="cellalignment6332" headers="r3c1-t63 r1c2-t63">Column for which values are supplied. If you <a id="sthref1628"></a><a id="sthref1629"></a>omit any of the table&#39;s columns from the column name list, the <code dir="ltr">INSERT...SELECT</code> statement places the default value in the omitted columns. If the table definition specifies <code dir="ltr">NOT NULL</code>, without a default value, for any of the omitted columns, the <code dir="ltr">INSERT...SELECT</code> statement fails. You can omit the column name list if you provide values for all columns of the table in the same order the columns were specified in the <code dir="ltr"><a href="#i1211666">CREATE TABLE</a></code> statement. If too few values are provided, the remaining columns are assigned default values.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t63" headers="r1c1-t63"><code dir="ltr"><span class="codeinlineitalic">InsertQuery</span></code></td>
<td class="cellalignment6332" headers="r4c1-t63 r1c2-t63">Any supported <code dir="ltr">SELECT</code> query. See <a href="#i1049447">&#34;SELECT&#34;</a>. You can specify a statement level optimizer hint after the <code dir="ltr">SELECT</code> verb. For more information on statement level optimizer hints, see <a href="#BABJFIBC">&#34;Statement level optimizer hints&#34;</a>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1630"></a>Description</p>
<ul>
<li>
<p>The column types of the result set must be compatible with the column types of the target table.</p>
</li>
<li>
<p><a id="sthref1631"></a><a id="sthref1632"></a><a id="sthref1633"></a>You can specify a sequence <code dir="ltr">CURRVAL</code> or <code dir="ltr">NEXTVAL</code> when inserting values. See <a href="#BABEFIDB">&#34;Incrementing SEQUENCE values with CURRVAL and NEXTVAL&#34;</a> for more details.</p>
</li>
<li>
<p>In the <code dir="ltr"><span class="codeinlineitalic">InsertQuery</span></code>, the <code dir="ltr">ORDER BY</code> clause is allowed. The sort order may be modified using the <code dir="ltr">ORDER BY</code> clause when the result set is inserted into the target table, but the order is not guaranteed.</p>
</li>
<li>
<p>The <code dir="ltr">INSERT</code> operation fails if there is an error in the <code dir="ltr"><span class="codeinlineitalic">InsertQuery</span></code>.</p>
</li>
<li>
<p>A <code dir="ltr">RETURNING</code> clause cannot be used in an <code dir="ltr">INSERT...SELECT</code> statement.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1634"></a>Examples</p>
<p>New rows are added to the <code dir="ltr">purchasing.parts</code> table that describe which parts are delivered in 20 days or less.</p>
<pre dir="ltr">INSERT INTO purchasing.parts
SELECT partnumber, deliverydays
FROM purchasing.supplyprice
WHERE deliverydays &lt; 20;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i993508"></a>
<div id="TTSQL323" class="refsect1">
<h2 class="refsect1"><a id="sthref1635"></a><a id="sthref1636"></a>LOAD CACHE GROUP</h2>
<p>The <code dir="ltr">LOAD CACHE GROUP</code> statement loads data from Oracle database tables into a TimesTen cache group. The load operation is local. It is not propagated across cache members.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1637"></a>Required privilege</p>
<p>No privilege is required for the cache group owner.</p>
<p><code dir="ltr">LOAD CACHE GROUP</code> or <code dir="ltr">LOAD ANY CACHE GROUP</code> for another user&#39;s cache group.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1638"></a>SQL syntax</p>
<pre dir="ltr">LOAD CACHE GROUP [<span class="italic">Owner.</span>]<span class="italic">GroupName</span> 
[WHERE <span class="italic">ConditionalExpression</span>] 
COMMIT EVERY <span class="italic">n</span> ROWS
[PARALLEL <span class="italic">NumThreads</span>]
</pre>
<p>Or:</p>
<pre dir="ltr">LOAD CACHE GROUP [<span class="italic">Owner.</span>]<span class="italic">GroupName</span>
WITH ID (<span class="italic">ColumnValueList</span>)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1639"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for LOAD CACHE GROUP." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t64">Parameter</th>
<th class="cellalignment6331" id="r1c2-t64">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t64" headers="r1c1-t64"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">GroupName</span></code></td>
<td class="cellalignment6332" headers="r2c1-t64 r1c2-t64">Name assigned to the cache group.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t64" headers="r1c1-t64"><code dir="ltr">WHERE</code> <code dir="ltr"><span class="codeinlineitalic">ConditionalExpression</span></code></td>
<td class="cellalignment6332" headers="r3c1-t64 r1c2-t64">Use the <code dir="ltr">WHERE</code> clause to specify a search condition to qualify the target rows of the cache operation. If you use more than one table in the <code dir="ltr">WHERE</code> clause and the tables have columns with the same names, fully qualify the table names.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t64" headers="r1c1-t64"><code dir="ltr">COMMIT</code> <code dir="ltr">EVERY</code> <code dir="ltr"><span class="codeinlineitalic">n</span></code> <code dir="ltr">ROWS</code></td>
<td class="cellalignment6332" headers="r4c1-t64 r1c2-t64">Use the <code dir="ltr">COMMIT</code> <code dir="ltr">EVERY</code> <code dir="ltr"><span class="codeinlineitalic">n</span></code> <code dir="ltr">ROWS</code> clause to indicate the frequency (based on the number of rows that are loaded into the cache group) at which a commit is issued during the load operation. This clause is required if you do not specify the <code dir="ltr">WITH</code> <code dir="ltr">ID</code> clause.
<p><code dir="ltr"><span class="codeinlineitalic">n</span></code> represents the number of rows that are loaded into the cache group before the transaction is committed. Express <code dir="ltr"><span class="codeinlineitalic">n</span></code> as an integer (where <code dir="ltr"><span class="codeinlineitalic">n</span></code> <code dir="ltr">&gt;= 0</code>). If you specify 0 for <code dir="ltr"><span class="codeinlineitalic">n</span></code>, the <code dir="ltr">LOAD</code> <code dir="ltr">CACHE</code> <code dir="ltr">GROUP</code> statement is executed as one transaction.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t64" headers="r1c1-t64"><code dir="ltr">[</code><code dir="ltr">PARALLEL</code> <code dir="ltr"><span class="codeinlineitalic">NumThreads</span></code><code dir="ltr">]</code></td>
<td class="cellalignment6332" headers="r5c1-t64 r1c2-t64">Provides parallel loading for cache group tables. Specifies the number of loading threads to run concurrently. One thread performs the bulk fetch from the Oracle database and the other threads (<code dir="ltr"><span class="codeinlineitalic">NumThreads</span></code> <code dir="ltr">- 1</code> threads) perform the inserts into TimesTen. Each thread uses its own connection or transaction.
<p>The minimum value for <code dir="ltr"><span class="codeinlineitalic">NumThreads</span></code> is 2. The maximum value is 10. If you specify a value greater than 10, TimesTen assigns the value 10.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t64" headers="r1c1-t64"><code dir="ltr">WITH ID</code> <code dir="ltr"><span class="codeinlineitalic">ColumnValueList</span></code></td>
<td class="cellalignment6332" headers="r6c1-t64 r1c2-t64">The <code dir="ltr">WITH ID</code> clauses enables you to use primary key values to load the cache instance. Specify <code dir="ltr"><span class="codeinlineitalic">ColumnValueList</span></code> as either a list of literals or binding parameters to represent the primary key values.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i1015064"></a>Description</p>
<ul>
<li>
<p><code dir="ltr">LOAD CACHE GROUP</code> loads all new cache instances from the Oracle database that satisfy the cache group definition and are not yet present in the cache group.</p>
</li>
<li>
<p>Before issuing the <code dir="ltr">LOAD CACHE GROUP</code> statement, ensure that the replication agent is running if the cache group is replicated or is an AWT cache group. Make sure the cache agent is running.</p>
</li>
<li>
<p><code dir="ltr">LOAD CACHE GROUP</code> is executed in its own transaction, and must be the first operation in a transaction.</p>
</li>
<li>
<p>For an explicitly loaded cache group, <code dir="ltr">LOAD CACHE GROUP</code> does not update cache instances that are already present in the TimesTen cache tables. Therefore, <code dir="ltr">LOAD CACHE GROUP</code> loads only inserts on the Oracle database tables into the corresponding TimesTen cache tables.</p>
</li>
<li>
<p>For a dynamic cache group, <code dir="ltr">LOAD CACHE GROUP</code> loads cache instances that have been inserted, updated and deleted on the Oracle database tables into the cache tables. For more information about explicitly loaded and dynamic cache groups, see <a class="olink TTCAC127" href="../TTCAC/concepts.htm#TTCAC127">&#34;Loading data into a cache group: Explicitly loaded and dynamic cache groups&#34;</a> in <span class="italic">Oracle TimesTen Application-Tier Database Cache User&#39;s Guide</span>.</p>
</li>
<li>
<p>Errors cause a rollback. When cache instances are committed periodically, errors abort the remainder of the load. The load is rolled back to the last commit.</p>
</li>
<li>
<p>If the <code dir="ltr">LOAD CACHE GROUP</code> statement fails when you specify <code dir="ltr">COMMIT EVERY</code> <code dir="ltr"><span class="codeinlineitalic">n</span></code> <code dir="ltr">ROWS</code> (where <code dir="ltr"><span class="codeinlineitalic">n</span></code> <code dir="ltr">&gt;= 0</code>), the content of the target cache group could be in an inconsistent state since some loaded rows are already committed. Some cache instances may be partially loaded. Use the <code dir="ltr"><a href="#i1046858">UNLOAD CACHE GROUP</a></code> statement to unload the cache group, then reload the cache group.</p>
</li>
<li>
<p>Generally, you do not have to fully qualify the column names in the <code dir="ltr">WHERE</code> clause of the <code dir="ltr">LOAD CACHE GROUP</code> statement. However, since TimesTen automatically generates queries that join multiple tables in the same cache group, a column must be fully qualified if there is more than one table in the cache group that contains columns with the same name.</p>
</li>
<li>
<p>When loading a read-only cache group:</p>
<ul>
<li>
<p>The <code dir="ltr">AUTOREFRESH</code> state must be paused.</p>
</li>
<li>
<p>The <code dir="ltr">LOAD CACHE GROUP</code> statement cannot have a <code dir="ltr">WHERE</code> clause (except on a dynamic cache group).</p>
</li>
<li>
<p>The cache group must be empty.</p>
</li>
</ul>
</li>
<li>
<p>If the automatic refresh state of a cache group (explicitly loaded or dynamic) is <code dir="ltr">PAUSED</code>, the state is changed to <code dir="ltr">ON</code> after a <code dir="ltr">LOAD CACHE GROUP</code> statement that was issued on the cache group completes.If the automatic refresh state of a dynamic cache group is <code dir="ltr">PAUSED</code> and the cache tables are populated, the state remains <code dir="ltr">PAUSED</code> after a <code dir="ltr">LOAD CACHE GROUP</code> statement that was issued on the cache group completes.</p>
</li>
<li>
<p>Following the execution of a <code dir="ltr">LOAD CACHE GROUP</code> statement, the ODBC function <code dir="ltr">SQLRowCount()</code>, the JDBC method <code dir="ltr">getUpdateCount()</code>, and the OCI function <code dir="ltr">OCIAttrGet()</code> with the <code dir="ltr">OCI_ATTR_ROW_COUNT</code> argument return the number of cache instances that were loaded.</p>
</li>
<li>
<p>Use the <code dir="ltr">WITH ID</code> clause as follows:</p>
<ul>
<li>
<p>In place of the <code dir="ltr">WHERE</code> clause for faster loading of the cache instance</p>
</li>
<li>
<p>To specify binding parameters</p>
</li>
<li>
<p>To roll back the load transaction upon failure</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1640"></a>Restrictions</p>
<ul>
<li>
<p>Do not reference child tables in the <code dir="ltr">WHERE</code> clause.</p>
</li>
<li>
<p>Do not specify the <code dir="ltr">PARALLEL</code> clause in the following circumstances:</p>
<ul>
<li>
<p>With the <code dir="ltr">WITH ID</code> clause</p>
</li>
<li>
<p>With the <code dir="ltr">COMMIT EVERY 0 ROWS</code> clause</p>
</li>
<li>
<p>When database level locking is enabled (connection attribute <code dir="ltr">LockLevel</code> is set to 1)</p>
</li>
</ul>
</li>
<li>
<p>Do not use the <code dir="ltr">WITH ID</code> clause when loading these types of cache groups:</p>
<ul>
<li>
<p>Explicitly loaded read-only cache group</p>
</li>
<li>
<p>Explicitly loaded user managed cache group with the autorefresh attribute</p>
</li>
<li>
<p>User managed cache group with the <code dir="ltr">AUTOREFRESH</code> and <code dir="ltr">PROPAGATE</code> attributes</p>
</li>
</ul>
</li>
<li>
<p>Do not use the <code dir="ltr">WITH ID</code> clause with the <code dir="ltr">COMMIT EVERY</code> <code dir="ltr"><span class="codeinlineitalic">n</span></code> <code dir="ltr">ROWS</code> clause.</p>
</li>
<li>
<p>The <code dir="ltr">WITH ID</code> clause cannot be used to acquire a cache instance from another cache grid member.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1641"></a>Examples</p>
<pre dir="ltr">CREATE CACHE GROUP recreation.cache
    FROM recreation.clubs (
        clubname CHAR(15) NOT NULL,
        clubphone SMALLINT,
        activity CHAR(18),
        PRIMARY KEY(clubname))
    WHERE (recreation.clubs.activity IS NOT NULL);

LOAD CACHE GROUP recreation.cache
    COMMIT EVERY 30 ROWS;
</pre>
<p>Use the <code dir="ltr">HR</code> schema to illustrate the use of the <code dir="ltr">PARALLEL</code> clause with the <code dir="ltr">LOAD CACHE GROUP</code> statement. The <code dir="ltr">COMMIT EVERY</code> <code dir="ltr"><span class="codeinlineitalic">n</span></code> <code dir="ltr">ROWS</code> clause is required. Issue the <code dir="ltr">CACHEGROUPS</code> command. You see cache group <code dir="ltr">cg2</code> is defined and the autorefresh state is paused. Unload cache group <code dir="ltr">cg2</code>, then specify the <code dir="ltr">LOAD CACHE GROUP</code> statement with the <code dir="ltr">PARALLEL</code> clause to provide parallel loading. You see 25 cache instances loaded.</p>
<pre dir="ltr">Command&gt; CACHEGROUPS;

Cache Group SAMPLEUSER.CG2:

  Cache Group Type: Read Only
  Autorefresh: Yes
  Autorefresh Mode: Incremental
  Autorefresh State: Paused
  Autorefresh Interval: 1.5 Minutes

  Root Table: SAMPLEUSER.COUNTRIES
  Table Type: Read Only

  Child Table: SAMPLEUSER.LOCATIONS
  Table Type: Read Only

  Child Table: SAMPLEUSER.DEPARTMENTS
  Table Type: Read Only

1 cache group found.

Command&gt; UNLOAD CACHE GROUP cg2;
25 cache instances affected.
Command&gt; COMMIT;
Command&gt; LOAD CACHE GROUP cg2 COMMIT EVERY 10 ROWS PARALLEL 2;
25 cache instances affected.
Command&gt; COMMIT;
</pre>
<p>The following example loads only the cache instances for customers whose customer number is greater than or equal to 5000 into the TimesTen cache tables in the <code dir="ltr">new_customers</code> cache group from the corresponding Oracle database tables:</p>
<pre dir="ltr">LOAD CACHE GROUP new_customers WHERE (oratt.customer.cust_num &gt;= 5000) COMMIT
EVERY 256 ROWS;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1642"></a>See also</p>
<br/>
<code dir="ltr"><a href="#i1280541">REFRESH CACHE GROUP</a></code><br/>
<code dir="ltr"><a href="#i1046858">UNLOAD CACHE GROUP</a></code></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="g1513942"></a>
<div id="TTSQL324" class="refsect1">
<h2 class="refsect1"><a id="sthref1643"></a><a id="sthref1644"></a><a id="sthref1645"></a>MERGE</h2>
<p>The <code dir="ltr">MERGE</code> statement enables you to select rows from one or more sources for update or insertion into a target table. You can specify conditions that are used to evaluate which rows are updated or inserted into the target table.</p>
<p>Use this statement to combine multiple <code dir="ltr">INSERT</code> and <code dir="ltr">UPDATE</code> statements.</p>
<p><code dir="ltr">MERGE</code> is a deterministic statement: You cannot update the same row of the target table multiple times in the same <code dir="ltr">MERGE</code> statement.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1646"></a>Required privilege</p>
<p>No privilege is required for the owner of the target table and the source table.</p>
<p><code dir="ltr">INSERT</code> or <code dir="ltr">UPDATE</code> on a target table owned by another user and <code dir="ltr">SELECT</code> on a source table owned by another user.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1647"></a>SQL syntax</p>
<pre dir="ltr">MERGE [<span class="italic">hint</span>] INTO [<span class="italic">Owner</span>.]<span class="italic">TargetTableName</span> [<span class="italic">Alias</span>] USING
    {[<span class="italic">Owner</span>.]<span class="italic">SourceTableName</span>|(<span class="italic">Subquery</span>)}[<span class="italic">Alias</span>] ON (<span class="italic">Condtion</span>)
    {<span class="italic">MergeUpdateClause</span> <span class="italic">MergeInsertClause</span> |
     <span class="italic">MergeInsertClause</span> <span class="italic">MergeUpdateClause</span> |
     <span class="italic">MergeUpdateClause</span> | <span class="italic">MergeInsertClause</span>
    }
</pre>
<p>The syntax for <code dir="ltr"><span class="codeinlineitalic">MergeUpdateClause</span></code> is as follows:</p>
<pre dir="ltr">WHEN MATCHED THEN UPDATE <a id="sthref1648"></a>SET <span class="italic">SetClause</span> [WHERE <span class="italic">Condition1</span>]
</pre>
<p>The syntax for <code dir="ltr"><span class="codeinlineitalic">MergeInsertClause</span></code> is as follows:</p>
<pre dir="ltr">WHEN NOT MATCHED THEN INSERT [<span class="italic">Columns</span> [,...]] VALUES
    ( {{<span class="italic">Expression</span> | DEFAULT|NULL} [,...] }) [WHERE <span class="italic">Condition2</span>]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1649"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for MERGE." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t65">Parameter</th>
<th class="cellalignment6331" id="r1c2-t65">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t65" headers="r1c1-t65"><code dir="ltr"><span class="codeinlineitalic">hint</span></code></td>
<td class="cellalignment6332" headers="r2c1-t65 r1c2-t65">Specifies a statement level optimizer hint for the <code dir="ltr">MERGE</code> statement. For more information on hints, see <a href="#BABJFIBC">&#34;Statement level optimizer hints&#34;</a>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t65" headers="r1c1-t65"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">TargetTableName</span></code></td>
<td class="cellalignment6332" headers="r3c1-t65 r1c2-t65">Name of the target table. This is the table in which rows are either updated or inserted.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t65" headers="r1c1-t65"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Alias</span></code><code dir="ltr">]</code></td>
<td class="cellalignment6332" headers="r4c1-t65 r1c2-t65">You can optionally specify an alias name for the target or source table.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t65" headers="r1c1-t65"><code dir="ltr">USING {[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">SourceTableName</span></code> <code dir="ltr">| (</code><code dir="ltr"><span class="codeinlineitalic">Subquery</span></code><code dir="ltr">)} [</code><code dir="ltr"><span class="codeinlineitalic">Alias</span></code><code dir="ltr">]</code></td>
<td class="cellalignment6332" headers="r5c1-t65 r1c2-t65">The <code dir="ltr">USING</code> clause indicates the table name or the subquery that is used for the source of the data. Use a subquery to use joins or aggregates. Optionally, you can specify an alias for the table name or the subquery.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t65" headers="r1c1-t65"><code dir="ltr">ON (</code><code dir="ltr"><span class="codeinlineitalic">Condition</span></code><code dir="ltr">)</code></td>
<td class="cellalignment6332" headers="r6c1-t65 r1c2-t65">Specify the condition used to evaluate each row of the target table to determine if the row should be considered for either a merge insert or a merge update. If the condition is true when evaluated, then the <code dir="ltr"><span class="codeinlineitalic">MergeUpdateClause</span></code> is considered for the target row using the matching row from the <code dir="ltr"><span class="codeinlineitalic">SourceTableName</span></code>. An error is generated if more than one row in the source table matches the same row in the target table. If the condition is not true when evaluated, then the <code dir="ltr"><span class="codeinlineitalic">MergeInsertClause</span></code> is considered for that row.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r7c1-t65" headers="r1c1-t65"><code dir="ltr">SET</code> <code dir="ltr"><span class="codeinlineitalic">SetClause</span></code></td>
<td class="cellalignment6332" headers="r7c1-t65 r1c2-t65">Clause used with the <code dir="ltr">UPDATE</code> statement. For information on the <code dir="ltr">UPDATE</code> statement, see <a href="#i994046">&#34;UPDATE&#34;</a>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r8c1-t65" headers="r1c1-t65"><code dir="ltr">[</code><code dir="ltr">WHERE</code> <code dir="ltr"><span class="codeinlineitalic">Condition1</span></code><code dir="ltr">]</code></td>
<td class="cellalignment6332" headers="r8c1-t65 r1c2-t65">For each row that matches the <code dir="ltr">ON (</code><code dir="ltr"><span class="codeinlineitalic">Condition</span></code><code dir="ltr">)</code>, <code dir="ltr"><span class="codeinlineitalic">Condition1</span></code> is evaluated. If the condition is true when evaluated, the row is updated. You can refer to either the target table or the source table in this clause. You cannot use a subquery. The clause is optional.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r9c1-t65" headers="r1c1-t65"><code dir="ltr">INSERT [</code><code dir="ltr"><span class="codeinlineitalic">Columns</span></code><code dir="ltr">[,...]]VALUES</code> <code dir="ltr">({{</code><code dir="ltr"><span class="codeinlineitalic">Expression</span></code> <code dir="ltr">|DEFAULT|NULL} [,...]})</code></td>
<td class="cellalignment6332" headers="r9c1-t65 r1c2-t65">Columns to insert into the target table. For more information on the <code dir="ltr">INSERT</code> statement, see <a href="#g1513888">&#34;INSERT&#34;</a>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r10c1-t65" headers="r1c1-t65"><code dir="ltr">[WHERE</code> <code dir="ltr"><span class="codeinlineitalic">Condition2</span></code><code dir="ltr">]</code></td>
<td class="cellalignment6332" headers="r10c1-t65 r1c2-t65">If specified, <code dir="ltr"><span class="codeinlineitalic">Condition2</span></code> is evaluated. If the condition is true when evaluated, the row is inserted into the target table. The condition can refer to the source table only. You cannot use a subquery.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1650"></a>Description</p>
<ul>
<li>
<p>You can specify the <code dir="ltr"><span class="codeinlineitalic">MergeUpdateClause</span></code> and <code dir="ltr"><span class="codeinlineitalic">MergeInsertClause</span></code> together or separately. If you specify both, they can be in either order.</p>
</li>
<li>
<p>If <code dir="ltr">DUAL</code> is the only table specified in the <code dir="ltr">USING</code> clause and it is not referenced elsewhere in the <code dir="ltr">MERGE</code> statement, specify <code dir="ltr">DUAL</code> as a simple table rather than using it in a subquery. In this simple case, to help performance, specify a key condition on a unique index of the target table in the <code dir="ltr">ON</code> clause.</p>
</li>
<li>
<p>Restrictions on the <code dir="ltr"><span class="codeinlineitalic">MergeUpdateClause</span></code>:</p>
<ul>
<li>
<p>You cannot update a column that is referenced in the <code dir="ltr">ON</code> condition clause.</p>
</li>
<li>
<p>You cannot update source table columns.</p>
</li>
</ul>
</li>
<li>
<p>Restrictions on the <code dir="ltr"><span class="codeinlineitalic">MergeInsertClause</span></code>:</p>
<ul>
<li>
<p>You cannot insert values of target table columns.</p>
</li>
</ul>
</li>
<li>
<p>Other restrictions:</p>
<ul>
<li>
<p>Do not use the set operators in the subquery of the source table.</p>
</li>
<li>
<p>Do not use a subquery in the <code dir="ltr">WHERE</code> condition of either the <code dir="ltr"><span class="codeinlineitalic">MergeUpdateClause</span></code> or the <code dir="ltr"><span class="codeinlineitalic">MergeInsertClause</span></code>.</p>
</li>
<li>
<p>The target table cannot be a detail table of a materialized view.</p>
</li>
<li>
<p>The <code dir="ltr">RETURNING</code> clause cannot be used in a <code dir="ltr">MERGE</code> statement.</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1651"></a>Examples</p>
<p>In this example, <code dir="ltr">dual</code> is specified as a simple table. There is a key condition on the <code dir="ltr">UNIQUE</code> index of the target table specified in the <code dir="ltr">ON</code> clause. The <code dir="ltr">DuplicateBindMode</code> attribute is set to 1 in this example. (The default is 0.)</p>
<pre dir="ltr">Command&gt; CREATE TABLE mergedualex (col1 TT_INTEGER NOT NULL, 
       &gt; col2 TT_INTEGER, PRIMARY KEY (col1));
Command&gt; MERGE INTO mergedualex USING dual ON (col1 = :v1)
       &gt; WHEN MATCHED THEN UPDATE SET col2 = col2 + 1
       &gt; WHEN NOT MATCHED THEN INSERT VALUES (:v1, 1);
Type &#39;?&#39; for help on entering parameter values.
Type &#39;*&#39; to end prompting and abort the command.
Type &#39;-&#39; to leave the parameter unbound.
Type &#39;/;&#39; to leave the remaining parameters unbound and execute the command.

Enter Parameter 1  &#39;V1&#39; (TT_INTEGER) &gt; 10
1 row merged.
Command&gt; SELECT * FROM mergedualex;
&lt; 10, 1 &gt;
1 row found.
</pre>
<p>In this example, a table called <code dir="ltr">contacts</code> is created with columns <code dir="ltr">employee_id</code> and <code dir="ltr">manager_id</code>. One row is inserted into <code dir="ltr">contacts</code> with values 101 and <code dir="ltr">NULL</code> for <code dir="ltr">employee_id</code> and <code dir="ltr">manager_id</code>, respectively. The <code dir="ltr">MERGE</code> statement is used to insert rows into <code dir="ltr">contacts</code> using the data in the <code dir="ltr">employees</code> table. A <code dir="ltr">SELECT FIRST 3</code> rows is used to illustrate that in the case where <code dir="ltr">employee_id</code> is equal to 101, <code dir="ltr">manager_id</code> is updated to 100. The remaining 106 rows from the <code dir="ltr">employees</code> table are inserted into <code dir="ltr">contacts</code>:</p>
<pre dir="ltr">Command&gt; CREATE TABLE contacts (employee_id NUMBER (6) NOT NULL PRIMARY KEY, 
       &gt; manager_id NUMBER (6));
Command&gt; SELECT employee_id, manager_id FROM employees WHERE employee_id =101;
&lt; 101, 100 &gt;
1 row found.
Command&gt; INSERT INTO contacts VALUES (101,null);
1 row inserted.
Command&gt; SELECT COUNT (*) FROM employees;
&lt; 107 &gt;
1 row found.
Command&gt; MERGE INTO contacts c
       &gt;   USING employees e
       &gt;   ON (c.employee_id = e.employee_id)
       &gt; WHEN MATCHED THEN
       &gt;   UPDATE SET c.manager_id = e.manager_id
       &gt; WHEN NOT MATCHED THEN
       &gt;   INSERT (employee_id, manager_id)
       &gt;   VALUES (e.employee_id, e.manager_id);
107 rows merged.
Command&gt; SELECT COUNT (*) FROM contacts;
&lt; 107 &gt;
1 row found.
Command&gt; SELECT FIRST 3 employee_id,manager_id FROM employees;
&lt; 100, &lt;NULL&gt; &gt;
&lt; 101, 100 &gt;
&lt; 102, 100 &gt;
3 rows found.
Command&gt; SELECT FIRST 3 employee_id, manager_id FROM contacts;
&lt; 100, &lt;NULL&gt; &gt;
&lt; 101, 100 &gt;
&lt; 102, 100 &gt;
3 rows found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1280541"></a>
<div id="TTSQL325" class="refsect1">
<h2 class="refsect1"><a id="sthref1652"></a><a id="sthref1653"></a>REFRESH CACHE GROUP</h2>
<p>The <code dir="ltr">REFRESH CACHE GROUP</code> statement replaces data in the TimesTen cache tables with the most current committed data from the Oracle database cached tables. The refresh operation is local and is not propagated across grid members.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1654"></a>Required privilege</p>
<p><code dir="ltr">CREATE SESSION</code> on the Oracle Database schema and <code dir="ltr">SELECT</code> on the Oracle Database tables.</p>
<p>No privilege for the cache group is required for the cache group owner.</p>
<p><code dir="ltr">REFRESH CACHE GROUP</code> or <code dir="ltr">REFRESH ANY CACHE GROUP</code> for another user&#39;s cache group.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1655"></a>SQL syntax</p>
<pre dir="ltr">REFRESH CACHE GROUP [<span class="italic">Owner.</span>]<span class="italic">GroupName</span> 
[WHERE <span class="italic">ConditionalExpression</span>]
COMMIT EVERY <span class="italic">n</span> ROWS
[PARALLEL <span class="italic">NumThreads</span>]
</pre>
<p>Or:</p>
<pre dir="ltr">REFRESH CACHE GROUP [<span class="italic">Owner.</span>]<span class="italic">GroupName</span> 
WITH ID (<span class="italic">ColumnValueList</span>)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1656"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for REFRESH CACHE GROUP." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t66">Parameter</th>
<th class="cellalignment6331" id="r1c2-t66">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t66" headers="r1c1-t66"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">GroupName</span></code></td>
<td class="cellalignment6332" headers="r2c1-t66 r1c2-t66">Name assigned to the cache group.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t66" headers="r1c1-t66"><code dir="ltr">WHERE</code> <code dir="ltr"><span class="codeinlineitalic">ConditionalExpression</span></code></td>
<td class="cellalignment6332" headers="r3c1-t66 r1c2-t66">Use the <code dir="ltr">WHERE</code> clause to specify a search condition to qualify the target rows of the cache operation. If you use more than one table in the <code dir="ltr">WHERE</code> clause and the tables have columns with the same names, fully qualify the table names.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t66" headers="r1c1-t66"><code dir="ltr">COMMIT</code> <code dir="ltr">EVERY</code> <code dir="ltr"><span class="codeinlineitalic">n</span></code> <code dir="ltr">ROWS</code></td>
<td class="cellalignment6332" headers="r4c1-t66 r1c2-t66">Use the <code dir="ltr">COMMIT</code> <code dir="ltr">EVERY</code> <code dir="ltr"><span class="codeinlineitalic">n</span></code> <code dir="ltr">ROWS</code> clause to indicate the frequency (based on the number of rows that are refreshed in the cache group) at which a commit is issued during the refresh operation. This clause is required if you do not specify the <code dir="ltr">WITH</code> <code dir="ltr">ID</code> clause.
<p><code dir="ltr"><span class="codeinlineitalic">n</span></code> represents the number of rows that are refreshed before the transaction is committed. Express <code dir="ltr"><span class="codeinlineitalic">n</span></code> as an integer (where <code dir="ltr"><span class="codeinlineitalic">n</span></code> <code dir="ltr">&gt;= 0</code>). If you specify 0 for <code dir="ltr"><span class="codeinlineitalic">n</span></code>, the <code dir="ltr">REFRESH</code> <code dir="ltr">CACHE</code> <code dir="ltr">GROUP</code> statement is executed as one transaction.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t66" headers="r1c1-t66"><code dir="ltr">[PARALLEL</code> <code dir="ltr"><span class="codeinlineitalic">NumThreads</span></code><code dir="ltr">]</code></td>
<td class="cellalignment6332" headers="r5c1-t66 r1c2-t66">Provides parallel loading for cache group tables. Specifies the number of loading threads to run concurrently. One thread performs the bulk fetch from the Oracle database and the other threads (<code dir="ltr"><span class="codeinlineitalic">NumThreads</span></code> <code dir="ltr">- 1</code> threads) perform the inserts into TimesTen. Each thread uses its own connection or transaction.
<p>The minimum value for <code dir="ltr"><span class="codeinlineitalic">NumThreads</span></code> is 2. The maximum value is 10. If you specify a value greater than 10, TimesTen assigns the value 10.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t66" headers="r1c1-t66"><code dir="ltr">WITH ID</code> <code dir="ltr"><span class="codeinlineitalic">ColumnValueList</span></code></td>
<td class="cellalignment6332" headers="r6c1-t66 r1c2-t66">The <code dir="ltr">WITH ID</code> clauses enables you to use primary key values to refresh the cache instance. Specify <code dir="ltr"><span class="codeinlineitalic">ColumnValueList</span></code> as either a list of literals or binding parameters to represent the primary key values.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1657"></a>Description</p>
<ul>
<li>
<p>A <code dir="ltr">REFRESH CACHE GROUP</code> statement must be executed in its own transaction.</p>
</li>
<li>
<p>Before issuing the <code dir="ltr">REFRESH CACHE GROUP</code> statement, ensure that the replication agent is running if the cache group is replicated or is an AWT cache group. Make sure the cache agent is running.</p>
</li>
<li>
<p>The <code dir="ltr">REFRESH</code> <code dir="ltr">CACHE</code> <code dir="ltr">GROUP</code> statement replaces data in the TimesTen cached tables with the most current committed data from the cached Oracle database tables, including data that already exists in the TimesTen cached tables. For an explicitly loaded cache group, a refresh operation is equivalent to issuing an <code dir="ltr"><a href="#i1046858">UNLOAD CACHE GROUP</a></code> statement followed by a <code dir="ltr"><a href="#i993508">LOAD CACHE GROUP</a></code> statement. Operations on all rows in the Oracle database tables including inserts, updates, and deletes are applied to the cache tables. For dynamic cache groups, a refresh operation refreshes only rows that are updated or deleted on the Oracle database tables into the cache tables. For more information on explicitly loaded and dynamic cache groups, see <a class="olink TTCAC127" href="../TTCAC/concepts.htm#TTCAC127">&#34;Loading data into a cache group: Explicitly loaded and dynamic cache groups&#34;</a> in <span class="italic">Oracle TimesTen Application-Tier Database Cache User&#39;s Guide</span>.</p>
</li>
<li>
<p>When refreshing a read-only cache group:</p>
<ul>
<li>
<p>The <code dir="ltr">AUTOREFRESH</code> statement must be paused.</p>
</li>
<li>
<p>If the cache group is a read-only dynamic cache group, do not use the <code dir="ltr">PARALLEL</code> clause.</p>
</li>
</ul>
</li>
<li>
<p>If the automatic refresh state of a cache group (dynamic or explicitly loaded) is <code dir="ltr">PAUSED</code>, the state is changed to <code dir="ltr">ON</code> after an unconditional <code dir="ltr">REFRESH CACHE GROUP</code> statement issued on the cache group completes.</p>
</li>
<li>
<p>If the automatic refresh state of a dynamic cache group is <code dir="ltr">PAUSED</code>, the state remains <code dir="ltr">PAUSED</code> after a <code dir="ltr">REFRESH CACHE GROUP...WITH ID</code> statement completes.</p>
</li>
<li>
<p>Generally, you do not have to fully qualify the column names in the <code dir="ltr">WHERE</code> clause of the <code dir="ltr">REFRESH CACHE GROUP</code> statement. However, since TimesTen automatically generates queries that join multiple tables in the same cache group, a column must be fully qualified if there is more than one table in the cache group that contains columns with the same name.</p>
</li>
<li>
<p>If the <code dir="ltr">REFRESH CACHE GROUP</code> statement fails when you specify <code dir="ltr">COMMIT EVERY</code> <code dir="ltr"><span class="codeinlineitalic">n</span></code> <code dir="ltr">ROWS</code> (where <code dir="ltr"><span class="codeinlineitalic">n</span></code> <code dir="ltr">&gt;= 0</code>), the content of the target cache group could be in an inconsistent state since some loaded rows are already committed. Some cache instances may be partially loaded. Use the <code dir="ltr"><a href="#i1046858">UNLOAD CACHE GROUP</a></code> statement to unload the cache group, then use the <code dir="ltr"><a href="#i993508">LOAD CACHE GROUP</a></code> statement to reload the cache group.</p>
</li>
<li>
<p>Following the execution of a <code dir="ltr">REFRESH CACHE GROUP</code> statement, the ODBC function <code dir="ltr">SQLRowCount()</code>, the JDBC method <code dir="ltr">getUpdateCount()</code>, and the OCI function <code dir="ltr">OCIAttrGet()</code> with the <code dir="ltr">OCI_ATTR_ROW_COUNT</code> argument return the number of cache instances that were refreshed.</p>
</li>
<li>
<p>Use the <code dir="ltr">WITH ID</code> clause:</p>
<ul>
<li>
<p>In place of the <code dir="ltr">WHERE</code> clause for faster refreshing of the cache instance</p>
</li>
<li>
<p>To specify binding parameters</p>
</li>
<li>
<p>To roll back the refresh transaction upon failure</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1658"></a>Restrictions</p>
<ul>
<li>
<p>Do not specify the <code dir="ltr">PARALLEL</code> clause:</p>
<ul>
<li>
<p>With the <code dir="ltr">WITH ID</code> clause</p>
</li>
<li>
<p>With the <code dir="ltr">COMMIT</code> <code dir="ltr">EVERY</code> <code dir="ltr"><span class="codeinlineitalic">n</span></code> <code dir="ltr">ROWS</code> clause</p>
</li>
<li>
<p>When database level locking is enabled (connection attribute <code dir="ltr">LockLevel</code> is set to 1)</p>
</li>
<li>
<p>For read-only dynamic cache groups</p>
</li>
</ul>
</li>
<li>
<p>Do not use the <code dir="ltr">WITH ID</code> clause when refreshing these types of cache groups:</p>
<ul>
<li>
<p>Explicitly loaded read-only cache groups</p>
</li>
<li>
<p>Explicitly loaded user managed cache groups with the autorefresh attribute</p>
</li>
<li>
<p>User managed cache groups with the autorefresh and propagate attributes</p>
</li>
</ul>
</li>
<li>
<p>Do not use the <code dir="ltr">WITH ID</code> clause with the <code dir="ltr">COMMIT EVERY</code> <code dir="ltr"><span class="codeinlineitalic">n</span></code> <code dir="ltr">ROWS</code> clause.</p>
</li>
<li>
<p>Do not use the <code dir="ltr">WHERE</code> clause with dynamic or read-only cache groups.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1659"></a>Examples</p>
<pre dir="ltr">REFRESH CACHE GROUP recreation.cache COMMIT EVERY 30 ROWS;
</pre>
<p>Is equivalent to:</p>
<pre dir="ltr">UNLOAD CACHE GROUP recreation.cache;
LOAD CACHE GROUP recreation.cache COMMIT EVERY 30 ROWS;
</pre>
<p>Use the <code dir="ltr">HR</code> schema to illustrate the use of the <code dir="ltr">PARALLEL</code> clause with the <code dir="ltr">REFRESH CACHE GROUP</code> statement. The <code dir="ltr">COMMIT EVERY</code> <code dir="ltr"><span class="codeinlineitalic">n</span></code> <code dir="ltr">ROWS</code> is required. Issue the <code dir="ltr">CACHEGROUPS</code> command. You see cache group <code dir="ltr">cg2</code> is defined and the autorefresh state is paused. Specify the <code dir="ltr">REFRESH CACHE GROUP</code> statement with the <code dir="ltr">PARALLEL</code> clause to provide parallel loading. You see 25 cache instances refreshed.</p>
<pre dir="ltr">Command&gt; CACHEGROUPS;

Cache Group SAMPLEUSER.CG2:

  Cache Group Type: Read Only
  Autorefresh: Yes
  Autorefresh Mode: Incremental
  Autorefresh State: Paused
  Autorefresh Interval: 1.5 Minutes

  Root Table: SAMPLEUSER.COUNTRIES
  Table Type: Read Only

  Child Table: SAMPLEUSER.LOCATIONS
  Table Type: Read Only

  Child Table: SAMPLEUSER.DEPARTMENTS
  Table Type: Read Only

1 cache group found.
Command&gt; REFRESH CACHE GROUP cg2 COMMIT EVERY 20 ROWS PARALLEL 2;
25 cache instances affected.
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1660"></a>See also</p>
<br/>
<code dir="ltr"><a href="#i1055226">ALTER CACHE GROUP</a></code><br/>
<code dir="ltr"><a href="#i1228554">CREATE CACHE GROUP</a></code><br/>
<code dir="ltr"><a href="#i993027">DROP CACHE GROUP</a></code><br/>
<code dir="ltr"><a href="#BABEAGCC">FLUSH CACHE GROUP</a></code><br/>
<code dir="ltr"><a href="#i993508">LOAD CACHE GROUP</a></code><br/>
<code dir="ltr"><a href="#i1046858">UNLOAD CACHE GROUP</a></code></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABEHIEA"></a>
<div id="TTSQL326" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref1661"></a><a id="sthref1662"></a>REFRESH MATERIALIZED VIEW</h2>
<p>The <code dir="ltr">REFRESH MATERIALIZED VIEW</code> statement refreshes an asynchronous materialized view manually.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1663"></a>Required privilege</p>
<p>Required privilege on the materialized view log tables:</p>
<ul>
<li>
<p>No privilege is required for the owner of the materialized view log tables.</p>
</li>
<li>
<p><code dir="ltr">SELECT ANY TABLE</code> if not the owner of materialized view log tables.</p>
</li>
</ul>
<p>Required privilege on the materialized view:</p>
<ul>
<li>
<p>No privilege is required for the owner of the materialized view.</p>
</li>
<li>
<p><code dir="ltr">SELECT ANY TABLE</code> if not the owner of materialized view.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1664"></a>SQL syntax</p>
<pre dir="ltr">REFRESH MATERIALIZED VIEW <span class="italic">ViewName</span>
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1665"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for REFRESH MATERIALIZED VIEW." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t67">Parameter</th>
<th class="cellalignment6331" id="r1c2-t67">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t67" headers="r1c1-t67"><code dir="ltr"><span class="codeinlineitalic">ViewName</span></code></td>
<td class="cellalignment6332" headers="r2c1-t67 r1c2-t67">This is the name of the asynchronous materialized view.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1666"></a>Description</p>
<p>This statement refreshes the specified asynchronous materialized view. It is executed in a separate thread as a separate transaction and committed. The user transaction is not affected, but the user thread waits for the refresh operation to be completed before returning to the user. If you have not specified a refresh interval for an asynchronous materialized view, using this statement is the only way to refresh the view. If you have specified a refresh interval, you can still use this statement to refresh the view manually.</p>
<p>Since the refresh operation is always performed in a separate transaction, the refresh operation does not wait for any uncommitted user transactions to commit. Only the committed rows are considered for the refresh operation. This is true for the manual refresh statement as well as the automatic refresh that takes place at regular intervals.</p>
<p>If the <code dir="ltr"><a href="#i1075286">CREATE MATERIALIZED VIEW</a></code> statement for the view specified a <code dir="ltr">FAST</code> refresh, then the <code dir="ltr">REFRESH MATERIALIZED VIEW</code> statement uses the incremental refresh method. Otherwise this statement uses the full refresh method.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1667"></a>Examples</p>
<pre dir="ltr">REFRESH MATERALIZED VIEW bookorders;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1668"></a>See also</p>
<br/>
<code dir="ltr"><a href="#i1075286">CREATE MATERIALIZED VIEW</a></code><br/>
<code dir="ltr"><a href="#g1513833">DROP VIEW</a></code></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="g1513967"></a>
<div id="TTSQL327" class="refsect1">
<h2 class="refsect1"><a id="sthref1669"></a><a id="sthref1670"></a>REVOKE</h2>
<p>The <code dir="ltr">REVOKE</code> statement removes one or more privileges from a user.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1671"></a>Required privilege</p>
<p><code dir="ltr">ADMIN</code> to revoke system privileges.</p>
<p><code dir="ltr">ADMIN</code> or object owner to revoke object privileges.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1672"></a>SQL syntax</p>
<pre dir="ltr">REVOKE {<span class="italic">SystemPrivilege</span> [,...] | ALL [PRIVILEGES]} FROM {<span class="italic">User</span> |PUBLIC} [,...]

REVOKE {{<span class="italic">ObjectPrivilege</span> [,...] | ALL [PRIVILEGES]} ON {[<span class="italic">Owner</span>.<span class="italic">Object</span>}} [,...]
FROM {<span class="italic">user</span> | PUBLIC}[,...]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1673"></a>Parameters</p>
<p>The following parameters are for revoking system privileges:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for REVOKE." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t68">Parameter</th>
<th class="cellalignment6331" id="r1c2-t68">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t68" headers="r1c1-t68"><code dir="ltr"><span class="codeinlineitalic">SystemPrivilege</span></code></td>
<td class="cellalignment6332" headers="r2c1-t68 r1c2-t68">This is the system privilege to revoke. See <a href="privileges.htm#BABECGGB">&#34;System privileges&#34;</a> for a list of acceptable values.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t68" headers="r1c1-t68"><code dir="ltr">ALL [PRIVILEGES]</code></td>
<td class="cellalignment6332" headers="r3c1-t68 r1c2-t68">Revokes all system privileges from the user.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t68" headers="r1c1-t68"><code dir="ltr"><span class="codeinlineitalic">User</span></code></td>
<td class="cellalignment6332" headers="r4c1-t68 r1c2-t68">Name of the user from whom privileges are being revoked. The user name must first have been introduced to the TimesTen database by a <code dir="ltr"><a href="#g1513697">CREATE USER</a></code> statement.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t68" headers="r1c1-t68"><code dir="ltr">PUBLIC</code></td>
<td class="cellalignment6332" headers="r5c1-t68 r1c2-t68">Specifies that the privilege is revoked for all users.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" -->
<p>The following parameters are for revoking object privileges:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for REVOKE." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t69">Parameter</th>
<th class="cellalignment6331" id="r1c2-t69">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t69" headers="r1c1-t69"><code dir="ltr"><span class="codeinlineitalic">ObjectPrivilege</span></code></td>
<td class="cellalignment6332" headers="r2c1-t69 r1c2-t69">This is the object privilege to revoke. See <a href="privileges.htm#BABIDBFC">&#34;Object privileges&#34;</a> for a list of acceptable values.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t69" headers="r1c1-t69"><code dir="ltr">ALL [PRIVILEGES]</code></td>
<td class="cellalignment6332" headers="r3c1-t69 r1c2-t69">Revokes all object privileges from the user.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t69" headers="r1c1-t69"><code dir="ltr"><span class="codeinlineitalic">User</span></code></td>
<td class="cellalignment6332" headers="r4c1-t69 r1c2-t69">Name of the user from whom privileges are to be revoked. The user name must first have been introduced to the TimesTen database through a <code dir="ltr"><a href="#g1513697">CREATE USER</a></code> statement.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t69" headers="r1c1-t69"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">Object</span></code></td>
<td class="cellalignment6332" headers="r5c1-t69 r1c2-t69"><code dir="ltr"><span class="codeinlineitalic">Object</span></code> is the name of the object on which privileges are being revoked. <code dir="ltr"><span class="codeinlineitalic">Owner</span></code> is the owner of the object. If <code dir="ltr"><span class="codeinlineitalic">Owner</span></code> is not specified, then the user who is revoking the privilege is known as the owner.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t69" headers="r1c1-t69"><code dir="ltr">PUBLIC</code></td>
<td class="cellalignment6332" headers="r6c1-t69 r1c2-t69">Specifies that the privilege is revoked for all users.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i1015065"></a>Description</p>
<ul>
<li>
<p>Privileges on objects cannot be revoked from the owner of the objects.</p>
</li>
<li>
<p>Any user who can grant a privilege can revoke the privilege even if they were not the user who originally granted the privilege.</p>
</li>
<li>
<p>Privileges must be revoked at the same level they were granted. You cannot revoke an object privilege from a user who has the associated system privilege. For example, if you grant <code dir="ltr">SELECT ANY TABLE</code> to a user and then try to revoke <code dir="ltr">SELECT ON BOB.TABLE1</code>, the revoke fails unless you have specifically granted <code dir="ltr">SELECT ON BOB.TABLE1</code> in addition to <code dir="ltr">SELECT ANY TABLE</code>.</p>
</li>
<li>
<p>If a user has been granted all system privileges, you can revoke a specific privilege. For example, you can revoke <code dir="ltr">ALTER ANY TABLE</code> from a user who has been granted all system privileges.</p>
</li>
<li>
<p>If a user has been granted all object privileges, you can revoke a specific privilege on a specific object from the user. For example, you can revoke the <code dir="ltr">DELETE</code> privilege on table <code dir="ltr">CUSTOMERS</code> from user <code dir="ltr">TERRY</code> even if <code dir="ltr">TERRY</code> has previously been granted all object privileges.</p>
</li>
<li>
<p>You can revoke all privileges from a user even if the user has not previously been granted all privileges.</p>
</li>
<li>
<p>You cannot revoke a specific privilege from a user who has not been granted the privilege.</p>
</li>
<li>
<p>You cannot revoke privileges on objects owned by a user.</p>
</li>
<li>
<p>You cannot revoke system privileges and object privileges in the same statement.</p>
</li>
<li>
<p>You can specify only one object in an object privilege statement.</p>
</li>
<li>
<p>Revoking the <code dir="ltr">SELECT</code> privilege on a detail table or a system privilege that includes the <code dir="ltr">SELECT</code> privilege from <code dir="ltr">user2</code> on a detail table owned by <code dir="ltr">user1</code> causes associated materialized views owned by <code dir="ltr">user2</code> to be marked invalid. See <a href="#BABJAJAJ">&#34;Invalid materialized views&#34;</a>.</p>
</li>
<li>
<p>When replication is configured, this statement is replicated.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1674"></a>Examples</p>
<p>Revoke the <code dir="ltr">ADMIN</code> and <code dir="ltr">DDL</code> privileges from the user <code dir="ltr">terry</code>:</p>
<pre dir="ltr">REVOKE admin, ddl FROM terry;
</pre>
<p>Assuming the revoker has <code dir="ltr">ADMIN</code> privilege, revoke the <code dir="ltr">UPDATE</code> privilege from <code dir="ltr">terry</code> on the <code dir="ltr">customers</code> table owned by <code dir="ltr">pat</code>:</p>
<pre dir="ltr">REVOKE update ON pat.customers FROM terry;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1675"></a>See also</p>
<br/>
<code dir="ltr"><a href="#i1334963">ALTER USER</a></code><br/>
<code dir="ltr"><a href="#g1513697">CREATE USER</a></code><br/>
<code dir="ltr"><a href="#BABEFCHB">DROP USER</a></code><br/>
<code dir="ltr"><a href="#g1513872">GRANT</a></code><br/>
<a href="privileges.htm#BABHEBDF">&#34;The PUBLIC role&#34;</a></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1440999"></a>
<div id="TTSQL328" class="refsect1">
<h2 class="refsect1"><a id="sthref1676"></a><a id="sthref1677"></a>ROLLBACK</h2>
<p>Use the <code dir="ltr">ROLLBACK</code> statement to undo work done in the current transaction.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1678"></a>Required privilege</p>
<p>None</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1679"></a>SQL syntax</p>
<pre dir="ltr">ROLLBACK [WORK]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1680"></a>Parameters</p>
<p>The <code dir="ltr">ROLLBACK</code> statement enables the following optional keyword:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for ROLLBACK." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t70">Parameter</th>
<th class="cellalignment6331" id="r1c2-t70">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t70" headers="r1c1-t70"><code dir="ltr">[WORK]</code></td>
<td class="cellalignment6332" headers="r2c1-t70 r1c2-t70">Optional clause supported for compliance with the SQL standard. <code dir="ltr">ROLLBACK</code> and <code dir="ltr">ROLLBACK WORK</code> are equivalent.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1681"></a>Description</p>
<p>When the <code dir="ltr">PassThrough</code> connection attribute is specified with a value greater than zero, the Oracle database transaction will also be rolled back.</p>
<p>A rollback closes all open cursors.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1682"></a>Examples</p>
<p>Insert a row into the <code dir="ltr">regions</code> table of the <code dir="ltr">HR</code> schema and then roll back the transaction. First set <code dir="ltr">AUTOCOMMIT</code> to 0:</p>
<pre dir="ltr">Command&gt; SET AUTOCOMMIT 0;
Command&gt; INSERT INTO regions VALUES (5,&#39;Australia&#39;);
1 row inserted.
Command&gt; SELECT * FROM regions;
&lt; 1, Europe &gt;
&lt; 2, Americas &gt;
&lt; 3, Asia &gt;
&lt; 4, Middle East and Africa &gt;
&lt; 5, Australia &gt;
5 rows found.
Command&gt; ROLLBACK;
Command&gt; SELECT * FROM regions;
&lt; 1, Europe &gt;
&lt; 2, Americas &gt;
&lt; 3, Asia &gt;
&lt; 4, Middle East and Africa &gt;
4 rows found.
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1683"></a>See also</p>
<br/>
<code dir="ltr"><a href="#i1440984">COMMIT</a></code></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1049447"></a>
<div id="TTSQL329" class="refsect1">
<h2 class="refsect1"><a id="sthref1684"></a><a id="sthref1685"></a>SELECT</h2>
<p>The <code dir="ltr">SELECT</code> statement retrieves data from one or more tables. The retrieved data is presented in the form of a table that is called the <span class="italic">result table</span>, <span class="italic">result set</span>, or <span class="italic">query result</span>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1686"></a>Required privilege</p>
<p>No privilege is required for the object owner.</p>
<p><code dir="ltr">SELECT</code> for another user&#39;s object.</p>
<p><code dir="ltr">SELECT...FOR UPDATE</code> also requires <code dir="ltr">UPDATE</code> privilege for another user&#39;s object.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i1335554"></a>SQL syntax</p>
<p>The general syntax for a <code dir="ltr">SELECT</code> statement is the following:</p>
<pre dir="ltr">[<span class="italic">WithClause</span>] SELECT [<span class="italic">hint</span>][FIRST <span class="italic">NumRows</span> | ROWS m TO n] [ALL | DISTINCT] <span class="italic">SelectList</span>
  FROM <span class="italic">TableSpec</span> [,...]
  [WHERE <span class="italic">SearchCondition</span>]
  [GROUP BY <span class="italic">GroupByClause</span> [,...] [HAVING <span class="italic">SearchCondition</span>]]
  [ORDER BY <span class="italic">OrderByClause</span> [,...]]
  [FOR UPDATE [OF [[<span class="italic">Owner</span>.]<span class="italic">TableName</span>.]<span class="italic">ColumnName</span> [,...]] 
    [NOWAIT | WAIT <span class="italic">Seconds</span>] ]
</pre>
<p>The syntax for a <code dir="ltr">SELECT</code> statement that contains the set operators <code dir="ltr">UNION</code>, <code dir="ltr">UNION ALL</code>, <code dir="ltr">MINUS</code>, or <code dir="ltr">INTERSECT</code> is as follows:</p>
<pre dir="ltr">SELECT [<span class="italic">hint</span>] [ROWS <span class="italic">m</span> TO <span class="italic">n</span>] [ALL] <span class="italic">SelectList</span>
  FROM <span class="italic">TableSpec</span> [,...]
    [WHERE <span class="italic">SearchCondition</span>]
    [GROUP BY <span class="italic">GroupByClause</span> [,...] [HAVING <span class="italic">SearchCondition</span>] [,...]]
  {UNION [ALL] | MINUS | INTERSECT}
  SELECT [ROWS <span class="italic">m</span> TO <span class="italic">n</span>] [ALL] <span class="italic">SelectList</span>
    FROM <span class="italic">TableSpec</span> [,...]
     [WHERE <span class="italic">SearchCondition</span>]
     [GROUP BY <span class="italic">GroupByClause</span> [,...] [HAVING <span class="italic">SearchCondition</span> [,...] ] ]
     [ORDER BY <span class="italic">OrderByClause</span> [,...] ]
</pre>
<p>The syntax for <code dir="ltr"><span class="codeinlineitalic">OrderByClause</span></code> is as follows:</p>
<pre dir="ltr">{<span class="italic">ColumnID</span>|<span class="italic">ColumnAlias</span>|<span class="italic">Expression</span>} [ASC|DESC] [NULLS { FIRST|LAST }]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1687"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for SELECT." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t71">Parameter</th>
<th class="cellalignment6331" id="r1c2-t71">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t71" headers="r1c1-t71"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">WithClause</span></code><code dir="ltr">]</code></td>
<td class="cellalignment6332" headers="r2c1-t71 r1c2-t71">The <code dir="ltr">WITH</code> clause, also known as subquery factoring, enables you to assign a name to a subquery block, which can subsequently be referenced multiple times within the top-level <code dir="ltr">SELECT</code> statement. The syntax of the <code dir="ltr">WITH</code> clause is presented under <a href="#BABJEGHE">&#34;WithClause&#34;</a>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t71" headers="r1c1-t71"><code dir="ltr"><span class="codeinlineitalic">hint</span></code></td>
<td class="cellalignment6332" headers="r3c1-t71 r1c2-t71">Specifies a statement level optimizer hint for the <code dir="ltr">SELECT</code> statement. For more information on hints, see <a href="#BABJFIBC">&#34;Statement level optimizer hints&#34;</a>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t71" headers="r1c1-t71"><code dir="ltr">FIRST</code> <code dir="ltr"><span class="codeinlineitalic">NumRows</span></code></td>
<td class="cellalignment6332" headers="r4c1-t71 r1c2-t71">Specifies the number of rows to retrieve. <code dir="ltr"><span class="codeinlineitalic">NumRows</span></code> must be either a positive <code dir="ltr">INTEGER</code> value or a dynamic parameter placeholder. The syntax for a dynamic parameter placeholder is either <code dir="ltr">?</code> or :<code dir="ltr"><span class="codeinlineitalic">DynamicParameter</span></code>. The value of the dynamic parameter is supplied when the statement is executed.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t71" headers="r1c1-t71"><code dir="ltr">ROWS</code> <code dir="ltr"><span class="codeinlineitalic">m</span></code> <code dir="ltr">TO</code> <code dir="ltr"><span class="codeinlineitalic">n</span></code></td>
<td class="cellalignment6332" headers="r5c1-t71 r1c2-t71">Specifies the range of rows to retrieve where <code dir="ltr"><span class="codeinlineitalic">m</span></code> is the first row to be selected and <code dir="ltr"><span class="codeinlineitalic">n</span></code> is the last row to be selected. Row counting starts at row 1. The query <code dir="ltr">SELECT ROWS 1 TO</code> <code dir="ltr"><span class="codeinlineitalic">n</span></code> returns the same rows as <code dir="ltr">SELECT FIRST</code> <code dir="ltr"><span class="codeinlineitalic">NumRows</span></code> assuming the queries are ordered and <code dir="ltr"><span class="codeinlineitalic">n</span></code> and <code dir="ltr"><span class="codeinlineitalic">NumRows</span></code> have the same value.
<p>Use either a positive <code dir="ltr">INTEGER</code> value or a dynamic parameter placeholder for <code dir="ltr"><span class="codeinlineitalic">m</span></code> and <code dir="ltr"><span class="codeinlineitalic">n</span></code> values. The syntax for a dynamic parameter placeholder is either <code dir="ltr">?</code> or :<code dir="ltr"><span class="codeinlineitalic">DynamicParameter</span></code>. The value of the dynamic parameter is supplied when the statement is executed.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t71" headers="r1c1-t71"><code dir="ltr">AL<a id="sthref1688"></a><a id="sthref1689"></a>L</code></td>
<td class="cellalignment6332" headers="r6c1-t71 r1c2-t71">Prevents elimination of duplicate rows from the query result. If neither <code dir="ltr">ALL</code> nor <code dir="ltr">DISTINCT</code> is specified, <code dir="ltr">ALL</code> is the default.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r7c1-t71" headers="r1c1-t71"><a id="sthref1690"></a><a id="sthref1691"></a><code dir="ltr">DISTINCT</code></td>
<td class="cellalignment6332" headers="r7c1-t71 r1c2-t71">Ensures that each row in the query result is unique. All <code dir="ltr">NULL</code> values are considered equal for this comparison. Duplicate rows are not evaluated.
<p>You cannot use <code dir="ltr">SELECT</code> ... on a LOB column.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r8c1-t71" headers="r1c1-t71"><code dir="ltr"><span class="codeinlineitalic">SelectList</span></code></td>
<td class="cellalignment6332" headers="r8c1-t71 r1c2-t71">Specifies how the columns of the query result are to be derived. The syntax of select list is presented under <a href="#i1294346">&#34;SelectList&#34;</a>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r9c1-t71" headers="r1c1-t71"><code dir="ltr">FROM</code> <code dir="ltr"><span class="codeinlineitalic">TableSpec</span></code></td>
<td class="cellalignment6332" headers="r9c1-t71 r1c2-t71">Identifies the tables referenced in the <code dir="ltr">SELECT</code> statement. T<a id="sthref1692"></a><a id="sthref1693"></a><a id="sthref1694"></a>he maximum number of tables per query is 24.
<p><code dir="ltr"><span class="codeinlineitalic">TableSpec</span></code> identifies a table from which rows are selected. The table can be a derived table, which is the result of a <code dir="ltr">SELECT</code> statement in the <code dir="ltr">FROM</code> clause. The syntax of <code dir="ltr"><span class="codeinlineitalic">TableSpec</span></code> is presented under <a href="#i1032517">&#34;TableSpec&#34;</a>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r10c1-t71" headers="r1c1-t71"><code dir="ltr">WHERE</code> <code dir="ltr"><span class="codeinlineitalic">SearchCondition</span></code></td>
<td class="cellalignment6332" headers="r10c1-t71 r1c2-t71">The <a id="sthref1695"></a><a id="sthref1696"></a><code dir="ltr">WHERE</code> clause determines the set of rows to be retrieved. Normally, rows for which <code dir="ltr"><span class="codeinlineitalic">SearchCondition</span></code> is <code dir="ltr">FALSE</code> or <code dir="ltr">NULL</code> are excluded from processing, but <code dir="ltr"><span class="codeinlineitalic">SearchCondition</span></code> can be used to specify an outer join in which rows from an outer table that do not have <code dir="ltr"><span class="codeinlineitalic">SearchCondition</span></code> evaluated to <code dir="ltr">TRUE</code> with respect to any rows from the associated inner table are also returned, with projected expressions referencing the inner table set to <code dir="ltr">NULL</code>.
<p><a id="sthref1697"></a><a id="sthref1698"></a><a id="sthref1699"></a>The unary (+) operator may follow some column and <code dir="ltr">ROWID</code> expressions to indicate an outer join. The (<code dir="ltr">+</code>) operator must follow all column and <code dir="ltr">ROWID</code> expressions in the join conditions that refer to the inner table. There are several conditions on the placement of the (<code dir="ltr">+</code>) operator. These generally restrict the type of outer join queries that can be expressed. The (<code dir="ltr">+</code>) operator may appear in <code dir="ltr">WHERE</code> clauses but not in <code dir="ltr">HAVING</code> clauses. Two tables cannot be outer joined together. An outer join condition cannot be connected by <code dir="ltr">OR</code>.</p>
<p>See <a href="search.htm#i994763">Chapter 5, &#34;Search Conditions&#34;</a> for more information on search conditions.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r11c1-t71" headers="r1c1-t71"><code dir="ltr">GROUP BY</code> <code dir="ltr"><span class="codeinlineitalic">GroupByClause</span></code> <code dir="ltr">[,...]</code></td>
<td class="cellalignment6332" headers="r11c1-t71 r1c2-t71">The <code dir="ltr">GROUP BY</code> clause identifies one or more expressions to be used for grouping when aggregate functions are specified in the select list and when you want to apply the function to groups of rows. The syntax and description for the <code dir="ltr">GROUP BY</code> clause is described in <a href="#BABCDBAF">&#34;GROUP BY clause&#34;</a>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r12c1-t71" headers="r1c1-t71"><code dir="ltr">H<a id="sthref1700"></a><a id="sthref1701"></a><a id="sthref1702"></a>AVING</code> <code dir="ltr"><span class="codeinlineitalic">SearchCondition</span></code></td>
<td class="cellalignment6332" headers="r12c1-t71 r1c2-t71">The <code dir="ltr">HAVING</code> clause can be used in a <code dir="ltr">SELECT</code> statement to filter groups of an aggregate result. The existence of a <code dir="ltr">HAVING</code> clause in a <code dir="ltr">SELECT</code> statement turns the query into an aggregate query. All columns referenced outside the sources of aggregate functions in any clause except the <code dir="ltr">WHERE</code> clause must be included in the <code dir="ltr">GROUP BY</code> clause.
<p>Subqueries can be specified in the <code dir="ltr">HAVING</code> clause.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r13c1-t71" headers="r1c1-t71"><code dir="ltr">(+)</code></td>
<td class="cellalignment6332" headers="r13c1-t71 r1c2-t71">A simple join (also called an inner join) returns a row for each pair of rows from the joined tables that satisfy the join condition specified in <code dir="ltr"><span class="codeinlineitalic">SearchCondition</span></code>. Outer joins are an extension of this operator in which all rows of the outer table are returned, whether or not matching rows from the joined inner table are found. In the case no matching rows are found, any projected expressions referencing the inner table are given the value <code dir="ltr">NULL</code>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r14c1-t71" headers="r1c1-t71"><a id="i1167442"></a><a id="sthref1703"></a><a id="sthref1704"></a><a id="sthref1705"></a><code dir="ltr">ORDER BY</code> <code dir="ltr"><span class="codeinlineitalic">OrderByClause</span></code> <code dir="ltr">[,...]</code></td>
<td class="cellalignment6332" headers="r14c1-t71 r1c2-t71">Sorts the query result rows in order by specified columns or expressions. Specify the sort key columns in order from major sort key to minor sort key.
<p>The <code dir="ltr">ORDER BY</code> clause supports column aliases, which can be referenced only in an <code dir="ltr">ORDER BY</code> clause. A single query may declare several column aliases with the same name, but any reference to that alias results in an error.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r15c1-t71" headers="r1c1-t71"><code dir="ltr"><span class="codeinlineitalic">ColumnID</span></code></td>
<td class="cellalignment6332" headers="r15c1-t71 r1c2-t71">Must correspond to a column in the select list. You can identify a column to be sorted by specifying its name or its ordinal number. The first column in the select list is column number 1. It is better to use a column number when referring to columns in the select list if they are not simple columns. Some examples are aggregate functions, arithmetic expressions, and constants.
<p>A <code dir="ltr"><span class="codeinlineitalic">ColumnID</span></code> in the <code dir="ltr">ORDER BY</code> clause has this syntax:</p>
<p><code dir="ltr">{</code><code dir="ltr"><span class="codeinlineitalic">ColumnNumber</span></code> <code dir="ltr">|[[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">TableName</span></code><code dir="ltr">.]</code> <code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code><code dir="ltr">}</code></p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r16c1-t71" headers="r1c1-t71"><code dir="ltr"><span class="codeinlineitalic">ColumnAlias</span></code><a id="sthref1706"></a></td>
<td class="cellalignment6332" headers="r16c1-t71 r1c2-t71">Used in an <code dir="ltr">ORDER BY</code> clause, the column alias must correspond to a column in the select list. The same alias can identify multiple columns.
<p><code dir="ltr">{* | [</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">TableName</span></code><code dir="ltr">.* |</code></p>
<p><code dir="ltr">{Expression</code> <code dir="ltr">| [[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">TableName</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code> <code dir="ltr">|</code></p>
<p><code dir="ltr">[[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">TableName</span></code><code dir="ltr">.]ROWID</code></p>
<p><code dir="ltr">}</code></p>
<p><code dir="ltr">[[AS]</code> <code dir="ltr"><span class="codeinlineitalic">ColumnAlias</span></code><code dir="ltr">]} [,...]</code></p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r17c1-t71" headers="r1c1-t71"><code dir="ltr">ASC|DESC</code></td>
<td class="cellalignment6332" headers="r17c1-t71 r1c2-t71">For each column designated in the <code dir="ltr">ORDER BY</code> clause, you can specify whether the sort order is to be ascending or descending. If neither <code dir="ltr">ASC</code> (ascending) nor <code dir="ltr">DESC</code> (descending) is specified, ascending order is used. All character data types are sorted according to the current value of the <code dir="ltr">NLS_SORT</code> session parameter.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r18c1-t71" headers="r1c1-t71"><code dir="ltr">NULLS { FIRST|LAST }</code></td>
<td class="cellalignment6332" headers="r18c1-t71 r1c2-t71">Valid with <code dir="ltr">ORDER BY</code> clause and is optional. If you specify <code dir="ltr">ASC</code> or <code dir="ltr">DESC</code>, <code dir="ltr">NULLS</code> <code dir="ltr">FIRST</code> or <code dir="ltr">NULLS</code> <code dir="ltr">LAST</code> must follow <code dir="ltr">ASC</code> or <code dir="ltr">DESC</code>.
<p>Specify <code dir="ltr">NULLS FIRST</code> to have rows with NULL values returned first in your ordered query. Specify <code dir="ltr">NULLS LAST</code> to have rows with NULL values returned last in your ordered query. <code dir="ltr">NULLS LAST</code> is the default when rows are returned in ascending order. <code dir="ltr">NULLS FIRST</code> is the default when rows are returned in descending order.</p>
<p>If you specify the <code dir="ltr">ORDER BY</code> clause without the <code dir="ltr">ASC</code> or <code dir="ltr">DESC</code> clause and without the <code dir="ltr">NULLS</code> <code dir="ltr">FIRST</code> or <code dir="ltr">NULLS</code> <code dir="ltr">LAST</code> clause, the default ordering sequence is ascending <code dir="ltr">NULLS</code> <code dir="ltr">LAST</code>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r19c1-t71" headers="r1c1-t71"><code dir="ltr">FOR UPDATE</code>
<p><code dir="ltr">[OF [[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code></p>
<p><code dir="ltr"><span class="codeinlineitalic">TableName</span></code><code dir="ltr">.]</code></p>
<p><code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code> <code dir="ltr">[,...]]</code></p>
<p><code dir="ltr">[NOWAIT | WAIT</code> <code dir="ltr"><span class="codeinlineitalic">Seconds</span></code><code dir="ltr">]</code></p>
</td>
<td class="cellalignment6332" headers="r19c1-t71 r1c2-t71"><code dir="ltr">FOR UPDATE</code>
<ul>
<li>
<p><code dir="ltr">FOR UPDATE</code> maintains a lock on an element (usually a row) until the end of the current transaction, regardless of isolation. All other transactions are excluded from performing any operation on that element until the transaction is committed or rolled back.</p>
</li>
<li>
<p><code dir="ltr">FOR UPDATE</code> may be used with joins and the <code dir="ltr">ORDER BY</code>, <code dir="ltr">GROUP BY</code>, and <code dir="ltr">DISTINCT</code> clauses. Update locks are obtained on either tables or rows, depending on the table/row locking method chosen by the optimizer.</p>
</li>
<li>
<p>Rows from all tables that satisfy the <code dir="ltr">WHERE</code> clause are locked in <code dir="ltr">UPDATE</code> mode unless the <code dir="ltr">FOR UPDATE OF</code> clause is specified. This clause specifies which tables to lock.</p>
</li>
<li>
<p>If using row locks, all qualifying rows in all tables from the table list in the <code dir="ltr">FROM</code> clause are locked in update mode. Qualifying rows are those rows that satisfy the <code dir="ltr">WHERE</code> clause. When table locks are used, the table is locked in update mode whether or not there are any qualifying rows.</p>
</li>
<li>
<p>If the serializable isolation level and row locking are enabled, nonqualifying rows are downgraded to Shared mode. If a read-committed isolation level and row locking are turned on, nonqualifying rows are unlocked.</p>
</li>
<li>
<p><code dir="ltr">SELECT...FOR UPDATE</code> locks are not blocked by <code dir="ltr">SELECT</code> locks.</p>
</li>
</ul>
<p><code dir="ltr">FOR UPDATE [OF</code> <code dir="ltr">[[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code>.<code dir="ltr">]</code><code dir="ltr"><span class="codeinlineitalic">TableName</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code> <code dir="ltr">[,...] ]</code></p>
<ul>
<li>
<p>This mode optionally includes the name of the column or columns in the table to be locked for update.</p>
</li>
</ul>
<p><code dir="ltr">[NOWAIT | WAIT</code> <code dir="ltr"><span class="codeinlineitalic">Seconds</span></code> <code dir="ltr">]</code></p>
<ul>
<li>
<p>This specifies how to proceed if the selected rows are locked. It does not apply to table-level locks or database-level locks.</p>
</li>
<li>
<p><code dir="ltr">NOWAIT</code> specifies that there is no waiting period for locks. An error is returned if the lock is not available.</p>
</li>
<li>
<p><code dir="ltr">WAIT</code> <code dir="ltr"><span class="codeinlineitalic">Seconds</span></code> specifies the lock timeout setting.</p>
<p>An error is returned if the lock is not obtained in the specified amount of time.</p>
<p>The lock timeout setting is expressed in seconds or fractions of second. The data type for <code dir="ltr"><span class="codeinlineitalic">Seconds</span></code> is <code dir="ltr">NUMBER</code>. Values between 0.0 and 1000000.0 are valid.</p>
</li>
</ul>
<ul>
<li>
<p>If neither <code dir="ltr">NOWAIT</code> nor <code dir="ltr">WAIT</code> is specified, the lock timeout interval for the transaction is used.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r20c1-t71" headers="r1c1-t71"><code dir="ltr"><span class="codeinlineitalic">SelectQuery1</span></code>
<p><code dir="ltr">{UNION [ALL] | MINUS | INTERSECT}</code></p>
<p><code dir="ltr"><span class="codeinlineitalic">SelectQuery2</span></code></p>
</td>
<td class="cellalignment6332" headers="r20c1-t71 r1c2-t71">Specifies that the results of <code dir="ltr"><span class="codeinlineitalic">SelectQuery1</span></code> and <code dir="ltr"><span class="codeinlineitalic">SelectQuery2</span></code> are to be combined, where <code dir="ltr"><span class="codeinlineitalic">SelectQuery1</span></code> and <code dir="ltr"><span class="codeinlineitalic">SelectQuery2</span></code> are general <code dir="ltr">SELECT</code> statements with some restrictions.
<p>The <code dir="ltr">UNION</code> operator combines the results of two queries where the <code dir="ltr"><a href="#i1294346">SelectList</a></code> is compatible. If <code dir="ltr">UNION ALL</code> is specified, duplicate rows from both <code dir="ltr">SELECT</code> statements are retained. Otherwise, duplicates are removed.</p>
<p>The <code dir="ltr">MINUS</code> operator combines rows returned by the first query but not by the second into a single result.</p>
<p>The <code dir="ltr">INTERSECT</code> operator combines only those rows returned by both queries into a single result.</p>
<p>The data type of corresponding selected entries in both <code dir="ltr">SELECT</code> statements must be compatible. One type can be converted to the other type using the <code dir="ltr"><a href="function.htm#i1000097">CAST</a></code> operator. Nullability does not need to match.</p>
<p>The length of a column in the result is the longer length of correspondent selected values for the column. The column names of the final result are the column names of the leftmost select.</p>
<p>You can combine multiple queries using the set operators <code dir="ltr">UNION</code>, <code dir="ltr">UNION ALL</code>, <code dir="ltr">MINUS</code>, and <code dir="ltr">INTERSECT</code>.</p>
<p>One or both operands of a set operator can be a set operator. Multiple or nested set operators are evaluated from left to right.</p>
<p>The set operators can be mixed in the same query.</p>
<p>Restrictions on the <code dir="ltr">SELECT</code> statement that specify the set operators are as follows:</p>
<ul>
<li>
<p>Neither <code dir="ltr">SELECT</code> statement can specify <code dir="ltr">FIRST</code> <code dir="ltr"><span class="codeinlineitalic">NumRows</span></code>.</p>
</li>
<li>
<p><code dir="ltr">ORDER BY</code> can be specified to sort the final result but cannot be used with any individual operand of a set operator. Only column names of tables or column alias from the leftmost <code dir="ltr">SELECT</code> statement can be specified in the <code dir="ltr">ORDER BY</code> clause.</p>
</li>
<li>
<p><code dir="ltr">GROUP BY</code> can be used to group an individual <code dir="ltr">SELECT</code> operand of a set operator but cannot be used to group a set operator result.</p>
</li>
<li>
<p>The set operators cannot be used in materialized view or a joined table.</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i1167502"></a>Description</p>
<ul>
<li>
<p>When you use a correlation name, the correlation name must conform to the syntax rules for a basic name. (See <a href="names.htm#i987960">&#34;Basic names&#34;</a>.) All correlation names within one <code dir="ltr">SELECT</code> statement must be unique. Correlation names are useful when you join a table to itself. Define multiple correlation names for the table in the <code dir="ltr">FROM</code> clause and use the correlation names in the select list and the <code dir="ltr">WHERE</code> clause to qualify columns from that table. See <a href="#CIAIGHFD">&#34;TableSpec&#34;</a> for more information about correlation names.</p>
</li>
<li>
<p><code dir="ltr">SELECT...FOR UPDATE</code> is supported in a <code dir="ltr">SELECT</code> statement that specifies a subquery, but it can be specified only in the outermost query.</p>
</li>
<li>
<p>If your query specifies either <code dir="ltr">FIRST</code> <code dir="ltr"><span class="codeinlineitalic">NumRows</span></code> or <code dir="ltr">ROWS</code> <code dir="ltr"><span class="codeinlineitalic">m</span></code> <code dir="ltr">TO</code> <code dir="ltr"><span class="codeinlineitalic">n</span></code>, <code dir="ltr">ROWNUM</code> may not be used to restrict the number of rows returned.</p>
</li>
<li>
<p><code dir="ltr">FIRST</code> <code dir="ltr"><span class="codeinlineitalic">NumRows</span></code> and <code dir="ltr">ROWS</code> <code dir="ltr"><span class="codeinlineitalic">m</span></code> <code dir="ltr">TO</code> <code dir="ltr"><span class="codeinlineitalic">n</span></code> cannot be used together in the same <code dir="ltr">SELECT</code> statement.</p>
</li>
<li>
<p>Use the <code dir="ltr">SELECT...INTO</code> statement in PL/SQL. If you use the <code dir="ltr">SELECT...INTO</code> statement outside of PL/SQL, TimesTen accepts, but silently ignores, the syntax.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="CIABGBBH"></a>Examples</p>
<p>This example shows the use of a column alias (<code dir="ltr">max_salary</code>) in the <code dir="ltr">SELECT</code> statement:</p>
<pre dir="ltr">SELECT MAX(salary) AS max_salary 
FROM employees 
WHERE employees.hire_date &gt; &#39;2000-01-01 00:00:00&#39;;
&lt; 10500 &gt;
1 row found.
</pre>
<p>This example uses two tables, <code dir="ltr">orders</code> and <code dir="ltr">lineitems</code>.</p>
<p>The <code dir="ltr">orders</code> table and <code dir="ltr">lineitems</code> table are created as follows:</p>
<pre dir="ltr">CREATE TABLE orders(orderno INTEGER, orderdate DATE, customer CHAR(20));

CREATE TABLE lineitems(orderno INTEGER, lineno INTEGER, 
  qty INTEGER, unitprice DECIMAL(10,2));
</pre>
<p>Thus for each order, there is one record in the <code dir="ltr">orders</code> table and a record for each line of the order in <code dir="ltr">lineitems</code>.</p>
<p>To find the total value of all orders entered since the beginning of the year, use the <code dir="ltr">HAVING</code> clause to select only those orders that were entered on or after January 1, 2000:</p>
<pre dir="ltr">SELECT o.orderno, customer, orderdate, SUM(qty * unitprice)
FROM orders o, lineitems l
WHERE o.orderno=l.orderno
GROUP BY o.orderno, customer, orderdate
HAVING orderdate &gt;= DATE &#39;2000-01-01&#39;;
</pre>
<p>Consider this query:</p>
<pre dir="ltr">SELECT * FROM tablea, tableb
WHERE tablea.column1 = tableb.column1 AND tableb.column2 &gt; 5
FOR UPDATE;
</pre>
<p>The query locks all rows in <code dir="ltr">tablea</code> where:</p>
<ul>
<li>
<p>The value of <code dir="ltr">tablea</code>.<code dir="ltr">column1</code> equals at least one <code dir="ltr">tableb</code>.<code dir="ltr">column1</code> value where <code dir="ltr">tableb</code>.<code dir="ltr">column2</code> is greater than 5.</p>
</li>
</ul>
<p>The query also locks all rows in <code dir="ltr">tableb</code> where:</p>
<ul>
<li>
<p>The value of <code dir="ltr">tableb</code>.<code dir="ltr">column2</code> is greater than 5.</p>
</li>
<li>
<p>The value of <code dir="ltr">tableb</code>.<code dir="ltr">column1</code> equals at least one <code dir="ltr">tablea</code>.<code dir="ltr">column1</code> value.</p>
</li>
</ul>
<p>If no <code dir="ltr">WHERE</code> clause is specified, all rows in both tables are locked.</p>
<p>This example demonstrates the (+) join operator:</p>
<pre dir="ltr">SELECT * FROM t1, t2
WHERE t1.x = t2.x(+);
</pre>
<p>The following query returns an error because an outer join condition cannot be connected by <code dir="ltr">OR</code>.</p>
<pre dir="ltr">SELECT * FROM t1, t2, t3
WHERE t1.x = t2.x(+) OR t3.y = 5;
</pre>
<p>The following query is valid:</p>
<pre dir="ltr">SELECT * FROM t1, t2, t3
WHERE t1.x = t2.x(+) AND (t3.y = 4 OR t3.y = 5);
</pre>
<p>A condition cannot use the <code dir="ltr">IN</code> operator to compare a column marked with (+). For example, the following query returns an error.</p>
<pre dir="ltr">SELECT * FROM t1, t2, t3
WHERE t1.x = t2.x(+) AND t2.y(+) IN (4,5);
</pre>
<p>The following query is valid:</p>
<pre dir="ltr">SELECT * FROM t1, t2, t3
WHERE t1.x = t2.x(+) AND t1.y IN (4,5);
</pre>
<p>The following query results in an inner join. The condition without the (+) operator is treated as an inner join condition.</p>
<pre dir="ltr">SELECT * FROM t1, t2
WHERE t1.x = t2.x(+) AND t1.y = t2.y;
</pre>
<p>In the following query, the <code dir="ltr">WHERE</code> clause contains a condition that compares an inner table column of an outer join with a constant. The (+) operator is not specified and hence the condition is treated as an inner join condition.</p>
<pre dir="ltr">SELECT * FROM t1, t2
WHERE t1.x = t2.x(+) AND t2.y = 3;
</pre>
<p>For more join examples, see <a href="#CIAIGBBF">&#34;JoinedTable&#34;</a>.</p>
<p>The following example returns the current sequence value in the <code dir="ltr">student</code> table.</p>
<pre dir="ltr">SELECT SEQ.CURRVAL FROM student;
</pre>
<p>The following query produces a derived table because it contains a <code dir="ltr">SELECT</code> statement in the <code dir="ltr">FROM</code> clause.</p>
<pre dir="ltr">SELECT * FROM t1, (SELECT MAX(x2) maxx2 FROM t2) tab2 
WHERE t1.x1 = tab2.maxx2;
</pre>
<p>The following query joins the results of two <code dir="ltr">SELECT</code> statements.</p>
<pre dir="ltr">SELECT * FROM t1 
WHERE x1 IN (SELECT x2 FROM t2) 
UNION 
SELECT * FROM t1 
WHERE x1 IN (SELECT x3 FROM t3);
</pre>
<p>In the following, select all orders that have the same price as the highest price in their category.</p>
<pre dir="ltr">SELECT * FROM orders WHERE price = (SELECT MAX(price) 
FROM stock WHERE stock.cat=orders.cat);
</pre>
<p>The next example illustrates the use of the <code dir="ltr">INTERSECT</code> set operator. There is a <code dir="ltr">department_id</code> value in the <code dir="ltr">employees</code> table that is <code dir="ltr">NULL</code>. In the <code dir="ltr">departments</code> table, the <code dir="ltr">department_id</code> is defined as a <code dir="ltr">NOT NULL</code> primary key. The rows returned from using the <code dir="ltr">INTERSECT</code> set operator do not include the row in the <code dir="ltr">departments</code> table whose <code dir="ltr">department_id</code> value is <code dir="ltr">NULL</code>.</p>
<pre dir="ltr">Command&gt; SELECT department_id FROM employees INTERSECT SELECT department_id 
       &gt; FROM departments;
&lt; 10 &gt;
&lt; 20 &gt;
&lt; 30 &gt;
&lt; 40 &gt;
&lt; 50 &gt;
&lt; 60 &gt;
&lt; 70 &gt;
&lt; 80 &gt;
&lt; 90 &gt;
&lt; 100 &gt;
&lt; 110 &gt;
11 rows found.
Command&gt; SELECT DISTINCT department_id FROM employees;
&lt; 10 &gt;
&lt; 20 &gt;
&lt; 30 &gt;
&lt; 40 &gt;
&lt; 50 &gt;
&lt; 60 &gt;
&lt; 70 &gt;
&lt; 80 &gt;
&lt; 90 &gt;
&lt; 100 &gt;
&lt; 110 &gt;
&lt; &lt;NULL&gt; &gt;
12 rows found.
</pre>
<p>The next example illustrates the use of the <code dir="ltr">MINUS</code> set operator by combining rows returned by the first query but not the second. The row containing the <code dir="ltr">NULL</code> <code dir="ltr">department_id</code> value in the <code dir="ltr">employees</code> table is the only row returned.</p>
<pre dir="ltr">Command&gt; SELECT department_id FROM employees 
       &gt; MINUS SELECT department_id FROM departments;
&lt; &lt;NULL&gt; &gt;
1 row found.
</pre>
<p>The following example illustrates the use of the <code dir="ltr">SUBSTR</code> expression in a <code dir="ltr">GROUP BY</code> clause and the use of a subquery in a <code dir="ltr">HAVING</code> clause. The first 10 rows are returned.</p>
<pre dir="ltr">Command&gt; SELECT ROWS 1 TO 10 SUBSTR (job_id, 4,10), department_id, manager_id, 
       &gt; SUM (salary) FROM employees
       &gt; GROUP BY SUBSTR (job_id,4,10),department_id, manager_id
       &gt; HAVING (department_id, manager_id) IN
       &gt; (SELECT department_id, manager_id FROM employees x
       &gt; WHERE x.department_id = employees.department_id)
       &gt; ORDER BY SUBSTR (job_id, 4,10),department_id,manager_id;
&lt; ACCOUNT, 100, 108, 39600 &gt;
&lt; ACCOUNT, 110, 205, 8300 &gt;
&lt; ASST, 10, 101, 4400 &gt;
&lt; CLERK, 30, 114, 13900 &gt;
&lt; CLERK, 50, 120, 22100 &gt;
&lt; CLERK, 50, 121, 25400 &gt;
&lt; CLERK, 50, 122, 23600 &gt;
&lt; CLERK, 50, 123, 25900 &gt;
&lt; CLERK, 50, 124, 23000 &gt;
&lt; MAN, 20, 100, 13000 &gt;
10 rows found.
</pre>
<p>The following example locks the <code dir="ltr">employees</code> table for update and waits 10 seconds for the lock to be available. An error is returned if the lock is not acquired in 10 seconds. The first five rows are selected.</p>
<pre dir="ltr">Command&gt; SELECT FIRST 5 last_name FROM employees FOR UPDATE WAIT 10;
&lt; King &gt;
&lt; Kochhar &gt;
&lt; De Haan &gt;
&lt; Hunold &gt;
&lt; Ernst &gt;
5 rows found.
</pre>
<p>The next example locks the <code dir="ltr">departments</code> table for update. If the selected rows are locked by another process, an error is returned if the lock is not available. This is because <code dir="ltr">NOWAIT</code> is specified.</p>
<pre dir="ltr">Command&gt; SELECT FIRST 5 last_name e FROM employees e, departments d 
       &gt; WHERE e.department_id = d.department_id 
       &gt; FOR UPDATE OF d.department_id NOWAIT;
&lt; Whalen &gt;
&lt; Hartstein &gt;
&lt; Fay &gt;
&lt; Raphaely &gt;
&lt; Khoo &gt;
5 rows found.
</pre>
<p>In the following, use the <code dir="ltr">HR</code> schema to illustrate the use of a subquery with the <code dir="ltr">FOR UPDATE</code> clause.</p>
<pre dir="ltr">Command&gt; SELECT employee_id, job_id FROM job_history 
       &gt; WHERE (employee_id, job_id) NOT IN (SELECT employee_id, job_id 
       &gt; FROM employees) 
       &gt; FOR UPDATE;
&lt; 101, AC_ACCOUNT &gt;
&lt; 101, AC_MGR &gt;
&lt; 102, IT_PROG &gt;
&lt; 114, ST_CLERK &gt;
&lt; 122, ST_CLERK &gt;
&lt; 176, SA_MAN &gt;
&lt; 200, AC_ACCOUNT &gt;
&lt; 201, MK_REP &gt;
8 rows found.
</pre>
<p>In the following, use a dynamic parameter placeholder for <code dir="ltr">SELECT ROWS</code> <code dir="ltr"><span class="codeinlineitalic">m</span></code> <code dir="ltr">TO</code> <code dir="ltr"><span class="codeinlineitalic">n</span></code> and <code dir="ltr">SELECT FIRST</code>.</p>
<pre dir="ltr">Command&gt; SELECT ROWS ? TO ? employee_id FROM employees;

Type &#39;?&#39; for help on entering parameter values.
Type &#39;*&#39; to end prompting and abort the command.
Type &#39;-&#39; to leave the parameter unbound.
Type &#39;/;&#39; to leave the remaining parameters unbound and execute the command.

Enter Parameter 1 (TT_INTEGER) &gt; 1
Enter Parameter 2 (TT_INTEGER) &gt; 3
&lt; 100 &gt;
&lt; 101 &gt;
&lt; 102 &gt;
3 rows found.
Command&gt; SELECT ROWS :a TO :b employee_id FROM employees;

Type &#39;?&#39; for help on entering parameter values.
Type &#39;*&#39; to end prompting and abort the command.
Type &#39;-&#39; to leave the parameter unbound.
Type &#39;/;&#39; to leave the remaining parameters unbound and execute the command.

Enter Parameter 1 (TT_INTEGER) &gt; 1
Enter Parameter 2 (TT_INTEGER) &gt; 3
&lt; 100 &gt;
&lt; 101 &gt;
&lt; 102 &gt;
3 rows found.
Command&gt; SELECT FIRST ? employee_id FROM employees;

Type &#39;?&#39; for help on entering parameter values.
Type &#39;*&#39; to end prompting and abort the command.
Type &#39;-&#39; to leave the parameter unbound.
Type &#39;/;&#39; to leave the remaining parameters unbound and execute the command.

Enter Parameter 1 (TT_INTEGER) &gt; 3
&lt; 100 &gt;
&lt; 101 &gt;
&lt; 102 &gt;
3 rows found.
</pre>
<p>The following example illustrates the use of <code dir="ltr">NULLS LAST</code> in the <code dir="ltr">ORDER BY</code> clause. Query the <code dir="ltr">employees</code> table to find employees with a commission percentage greater than .30 or a commission percentage that is NULL. Select the first seven employees and order by <code dir="ltr">commission_pct</code> and <code dir="ltr">last_name</code>. Order <code dir="ltr">commision_pct</code> in descending order and use <code dir="ltr">NULLS LAST</code> to display rows with NULL values last in the query. Output <code dir="ltr">commission_pct</code> and <code dir="ltr">last_name</code>.</p>
<pre dir="ltr">Command&gt; SELECT FIRST 7 commission_pct,last_name
         FROM employees where commission_pct &gt; .30
         OR commission_pct IS NULL
         ORDER BY commission_pct DESC NULLS LAST,last_name;
&lt; .4, Russell &gt;
&lt; .35, King &gt;
&lt; .35, McEwen &gt;
&lt; .35, Sully &gt;
&lt; &lt;NULL&gt;, Atkinson &gt;
&lt; &lt;NULL&gt;, Austin &gt;
&lt; &lt;NULL&gt;, Baer &gt;
7 rows found.
</pre></div>
<!-- class="refsubsect" -->
<div id="TTSQL503" class="refsect2"><a id="BABJEGHE"></a>
<h3 class="refsect2"><a id="sthref1707"></a><a id="sthref1708"></a><a id="sthref1709"></a><a id="sthref1710"></a>WithClause</h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1711"></a>Syntax</p>
<p><code dir="ltr"><span class="codeinlineitalic">WithClause</span></code> has the following syntax:</p>
<pre dir="ltr">WITH <span class="codeinlineitalic">QueryName</span> AS ( <span class="codeinlineitalic">Subquery</span> ) [, <span class="codeinlineitalic">QueryName</span> AS ( <span class="codeinlineitalic">Subquery</span> )] ...
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1712"></a>Parameters</p>
<p><code dir="ltr"><span class="codeinlineitalic">WithClause</span></code> has the following parameter:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for the SelectList parameter of SELECT." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t72">Parameter</th>
<th class="cellalignment6331" id="r1c2-t72">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t72" headers="r1c1-t72"><code dir="ltr"><span class="codeinlineitalic">QueryName</span></code> <code dir="ltr">AS</code> (<code dir="ltr"><span class="codeinlineitalic">Subquery</span></code>)</td>
<td class="cellalignment6332" headers="r2c1-t72 r1c2-t72">Specifies an alias for a subquery that can be used multiple times within the <code dir="ltr">SELECT</code> statement.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1713"></a>Description</p>
<p>Subquery factoring provides the <code dir="ltr">WITH</code> clause that enables you to assign a name to a subquery block, which can subsequently be referenced multiple times within the main <code dir="ltr">SELECT</code> query. The query name is visible to the main query and any subquery contained in the main query.</p>
<p>The <code dir="ltr">WITH</code> clause can only be defined as a prefix to the main <code dir="ltr">SELECT</code> statement.</p>
<p>Subquery factoring is useful in simplifying complex queries that use duplicate or complex subquery blocks in one or more places. In addition, TimesTen uses subquery factoring to optimize the query by evaluating and materializing the subquery block once and providing the result for each reference in the <code dir="ltr">SELECT</code> statement.</p>
<p>You can specify the set operators: <code dir="ltr">UNION</code>, <code dir="ltr">MINUS</code>, <code dir="ltr">INTERSECT</code> in the main query.</p>
<p>Restrictions using the <code dir="ltr">WITH</code> clause:</p>
<ul>
<li>
<p>Do not use the <code dir="ltr">WITH</code> clause in a view or materialized view definition.</p>
</li>
<li>
<p>Do not use the <code dir="ltr">WITH</code> clause in global queries.</p>
</li>
<li>
<p>Recursive subquery factoring is not supported.</p>
</li>
<li>
<p>Do not use the <code dir="ltr">WITH</code> clause in subqueries or derived tables.</p>
</li>
<li>
<p>You cannot provide a column parameter list for the query alias. For example, TimesTen does not support: <code dir="ltr">WITH</code> <code dir="ltr"><span class="codeinlineitalic">w1</span></code><code dir="ltr">(</code><code dir="ltr"><span class="codeinlineitalic">c1</span></code><code dir="ltr">,</code><code dir="ltr"><span class="codeinlineitalic">c2</span></code><code dir="ltr">)</code> <code dir="ltr">AS</code> ...</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1714"></a>Example</p>
<p>The following example creates the query names <code dir="ltr"><span class="codeinlineitalic">dept_costs</span></code> and <code dir="ltr"><span class="codeinlineitalic">avg_cost</span></code> for the initial query block, then uses these names in the body of the main query.</p>
<pre dir="ltr">Command&gt; WITH dept_costs AS (
&gt; SELECT department_name, SUM(salary) dept_total
&gt; FROM employees e, departments d
&gt; WHERE e.department_id = d.department_id
&gt; GROUP BY department_name),
&gt; avg_cost AS (
&gt; SELECT SUM(dept_total)/COUNT(*) avg
&gt; FROM dept_costs)
&gt; SELECT * FROM dept_costs
&gt; WHERE dept_total &gt;
&gt; (SELECT avg FROM avg_cost)
&gt; ORDER BY department_name;

&gt; DEPARTMENT_NAME DEPT_TOTAL
-------------------------------
Sales 304500
Shipping 156400
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="TTSQL330" class="refsect2"><a id="BABGIHHE"></a><a id="i1294346"></a>
<h3 class="refsect2"><a id="sthref1715"></a><a id="sthref1716"></a>SelectList</h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1717"></a>SQL syntax</p>
<p>The <code dir="ltr"><span class="codeinlineitalic">SelectList</span></code> parameter of the <code dir="ltr">SELECT</code> statement has the following syntax:</p>
<pre dir="ltr">{* | [<span class="italic">Owner</span>.]<span class="italic">TableName</span>.* | 
  { <span class="italic">Expression</span> | [[<span class="italic">Owner</span>.]<span class="italic">TableName</span>.]<span class="italic">ColumnName</span> |
    [[<span class="italic">Owner</span>.]<span class="italic">TableName</span>.]ROWID | NULL
  }
  [[AS] <span class="italic">ColumnAlias</span>] } [,...]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1718"></a>Parameters</p>
<p>The <code dir="ltr"><span class="codeinlineitalic">SelectList</span></code> parameter of the <code dir="ltr">SELECT</code> statement has the following parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for the SelectList parameter of SELECT." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t73">Parameter</th>
<th class="cellalignment6331" id="r1c2-t73">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t73" headers="r1c1-t73"><code dir="ltr">*</code></td>
<td class="cellalignment6332" headers="r2c1-t73 r1c2-t73">Includes, as columns of the query result, all columns of all tables specified in the <code dir="ltr">FROM</code> clause.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t73" headers="r1c1-t73"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">TableName</span></code><code dir="ltr">.*</code></td>
<td class="cellalignment6332" headers="r3c1-t73 r1c2-t73">Includes all columns of the specified table in the result.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t73" headers="r1c1-t73"><code dir="ltr"><span class="codeinlineitalic">Expression</span></code></td>
<td class="cellalignment6332" headers="r4c1-t73 r1c2-t73">An aggregate query includes a <code dir="ltr">GROUP BY</code> clause or an aggregate function.
<p>When the select list is not an aggregate query, the column reference must reference a table in the <code dir="ltr">FROM</code> clause.</p>
<p>A column reference in the select list of an aggregate query must reference a column list in the <code dir="ltr">GROUP BY</code> clause. If there is no <code dir="ltr">GROUP BY</code> clause, then the column reference must reference a table in the <code dir="ltr">FROM</code> clause. See <a href="#BABCDBAF">&#34;GROUP BY clause&#34;</a> for more information on the <code dir="ltr">GROUP BY</code> clause.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t73" headers="r1c1-t73"><code dir="ltr">[[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">Table</span></code><code dir="ltr">.]</code> <code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code></td>
<td class="cellalignment6332" headers="r5c1-t73 r1c2-t73">Includes a particular column from the named owner&#39;s indicated table. You can also specify the <code dir="ltr">CURRVAL</code> or <code dir="ltr">NEXTVAL</code> column of a sequence. See <a href="#BABEFIDB">&#34;Incrementing SEQUENCE values with CURRVAL and NEXTVAL&#34;</a> for more details.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t73" headers="r1c1-t73"><code dir="ltr">[[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">Table</span></code><code dir="ltr">.] ROWID</code></td>
<td class="cellalignment6332" headers="r6c1-t73 r1c2-t73">Includes the <code dir="ltr">ROWID</code> pseudocolumn from the named owner&#39;s indicated table.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r7c1-t73" headers="r1c1-t73"><code dir="ltr">NULL</code></td>
<td class="cellalignment6332" headers="r7c1-t73 r1c2-t73">When <code dir="ltr">NULL</code> is specified, the default for the resulting data type is <code dir="ltr">VARCHAR(0)</code>. You can use the <code dir="ltr">CAST</code> function to convert the result to a different data type. <code dir="ltr">NULL</code> can be specified in the <code dir="ltr">ORDER BY</code> clause.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r8c1-t73" headers="r1c1-t73"><code dir="ltr"><span class="codeinlineitalic">ColumnAlias</span></code><a id="sthref1719"></a></td>
<td class="cellalignment6332" headers="r8c1-t73 r1c2-t73">Used in an <code dir="ltr">ORDER BY</code> clause, the column alias must correspond to a column in the select list. The same alias can identify multiple columns.
<p><code dir="ltr">{*|</code><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">TableName</span></code><code dir="ltr">.*|</code></p>
<p><code dir="ltr">{Expression</code> <code dir="ltr">|[[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">TableName</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code> <code dir="ltr">|</code></p>
<p><code dir="ltr">[[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">TableName</span></code><code dir="ltr">.]</code><code dir="ltr">ROWID</code></p>
<p><code dir="ltr">}</code></p>
<p><code dir="ltr">[[AS]</code> <code dir="ltr"><span class="codeinlineitalic">ColumnAlias</span></code><code dir="ltr">]} [,...]</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i993927"></a>Description</p>
<ul>
<li>
<p>The clauses must be specified in the order given in the syntax.</p>
</li>
<li>
<p>TimesTen does not support subqueries in the select list.</p>
</li>
<li>
<p>A result column in the select list can be derived in any of the following ways.</p>
<ul>
<li>
<p>A result column can be taken directly from one of the tables listed in the <code dir="ltr">FROM</code> clause.</p>
</li>
<li>
<p>Values in a result column can be computed, using an arithmetic expression, from values in a specified column of a table listed in the <code dir="ltr">FROM</code> clause.</p>
</li>
<li>
<p>Values in several columns of a single table can be combined in an arithmetic expression to produce the result column values.</p>
</li>
<li>
<p><a id="sthref1720"></a><a id="sthref1721"></a>Aggregate functions (<code dir="ltr">AVG</code>, <code dir="ltr">MAX</code>, <code dir="ltr">MIN</code>, <code dir="ltr">SUM</code>, and <code dir="ltr">COUNT</code>) can be used to compute result column values over groups of rows. Aggregate functions can be used alone or in an expression. You can specify aggregate functions containing the <code dir="ltr">DISTINCT</code> qualifier that operate on different columns in the same table. If the <code dir="ltr">GROUP BY</code> clause is not specified, the function is applied over all rows that satisfy the query. If the <code dir="ltr">GROUP BY</code> clause is specified, the function is applied once for each group defined by the <code dir="ltr">GROUP BY</code> clause. When you use aggregate functions with the <code dir="ltr">GROUP BY</code> clause, the select list can contain aggregate functions, arithmetic expressions, and columns in the <code dir="ltr">GROUP BY</code> clause. For more details on the <code dir="ltr">GROUP BY</code> clause, see <a href="#BABCDBAF">&#34;GROUP BY clause&#34;</a>.</p>
</li>
<li>
<p>A result column containing a fixed value can be created by specifying a constant or an expression involving only constants.</p>
</li>
</ul>
</li>
<li>
<p>In addition to specifying how the result columns are derived, the select list also controls their relative position from left to right in the query result. The first result column specified by the select list becomes the leftmost column in the query result, and so on.</p>
</li>
<li>
<p>Result columns in the select list are numbered from left to right. The leftmost column is number 1. Result columns can be referred to by column number in the <code dir="ltr">ORDER BY</code> clause. This is especially useful to refer to a column defined by an arithmetic expression or an aggregate.</p>
</li>
<li>
<p><a id="sthref1722"></a><a id="sthref1723"></a>To join a table with itself, define multiple correlation names for the table in the <code dir="ltr">FROM</code> clause and use the correlation names in the select list and the <code dir="ltr">WHERE</code> clause to qualify columns from that table.</p>
</li>
<li>
<p>When you use the <code dir="ltr">GROUP BY</code> clause, one answer is returned per group in accordance with the select list, as follows:</p>
<ul>
<li>
<p>The <code dir="ltr">WHERE</code> clause eliminates rows before groups are formed.</p>
</li>
<li>
<p>The <code dir="ltr">GROUP BY</code> clause groups the resulting rows. See <a href="#BABCDBAF">&#34;GROUP BY clause&#34;</a> for more details.</p>
</li>
<li>
<p>The select list aggregate functions are computed for each group.</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1724"></a>Examples</p>
<p>In the following example, one value, the average number of days you wait for a part, is returned:</p>
<pre dir="ltr">SELECT AVG(deliverydays)
FROM purchasing.supplyprice;
</pre>
<p>The part number and delivery time for all parts that take fewer than 20 days to deliver are returned by the following statement.</p>
<pre dir="ltr">SELECT partnumber, deliverydays
FROM purchasing.supplyprice
WHERE deliverydays &lt; 20;
</pre>
<p>Multiple rows may be returned for a single part.</p>
<p>The part number and average price of each part are returned by the following statement.</p>
<pre dir="ltr">SELECT partnumber, AVG(unitprice)
FROM purchasing.supplyprice
GROUP BY partnumber;
</pre>
<p>In the following example, the join returns names and locations of California suppliers. Rows are returned in ascending order by <code dir="ltr">partnumber</code> values. Rows containing duplicate part numbers are returned in ascending order by <code dir="ltr">vendorname</code> values. The <code dir="ltr">FROM</code> clause defines two correlation names (<code dir="ltr">v</code> and <code dir="ltr">s</code>), which are used in both the select list and the <code dir="ltr">WHERE</code> clause. The <code dir="ltr">vendornumber</code> column is the only common column between <code dir="ltr">vendors</code> and <code dir="ltr">supplyprice</code>.</p>
<pre dir="ltr">SELECT partnumber, vendorname, s.vendornumber,vendorcity
  FROM purchasing.supplyprice s, purchasing.vendors v
  WHERE s.vendornumber = v.vendornumber AND vendorstate = &#39;CA&#39;
ORDER BY partnumber, vendorname;
</pre>
<p>The following query joins table <code dir="ltr">purchasing.parts</code> to itself to determine which parts have the same sales price as the part whose serial number is &#39;<code dir="ltr">1133-P-01</code>&#39;.</p>
<pre dir="ltr">SELECT q.partnumber, q.salesprice
  FROM purchasing.parts p, purchasing.parts q
  WHERE p.salesprice = q.salesprice AND p.serialnumber = &#39;1133-P-01&#39;;
</pre>
<p>The next example shows how to retrieve the rowid of a specific row. The retrieved rowid value can be used later for another <code dir="ltr"><a href="#i1049447">SELECT</a></code>, <code dir="ltr"><a href="#BABBJCCI">DELETE</a></code>, or <code dir="ltr"><a href="#i994046">UPDATE</a></code> statement.</p>
<pre dir="ltr">SELECT rowid
FROM purchasing.vendors
WHERE vendornumber = 123;
</pre>
<p>The following example shows how to use a column alias to retrieve data from the table <code dir="ltr">employees</code>.</p>
<pre dir="ltr">SELECT MAX(salary) AS max_salary FROM employees;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="TTSQL331" class="refsect2"><a id="CIAIGHFD"></a><a id="i1032517"></a>
<h3 class="refsect2"><a id="sthref1725"></a><a id="sthref1726"></a>TableSpec</h3>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1727"></a>SQL syntax</p>
<p>The <code dir="ltr"><span class="codeinlineitalic">TableSpec</span></code> parameter of the <code dir="ltr">SELECT</code> statement has the following syntax:</p>
<pre dir="ltr">{[<span class="italic">Owner</span>.]<span class="italic">TableName</span> [<span class="italic">CorrelationName</span>] | <span class="italic">JoinedTable</span> | <span class="italic">DerivedTable</span>}
</pre>
<p>A simple table specification has the following syntax:</p>
<pre dir="ltr">[<span class="italic">Owner</span>.]<span class="italic">TableName</span>
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1728"></a>Parameters</p>
<p>The <code dir="ltr"><span class="codeinlineitalic">TableSpec</span></code> parameter of the <code dir="ltr">SELECT</code> statement has the following parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for the TableSpec parameter of SELECT." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t74">Parameter</th>
<th class="cellalignment6331" id="r1c2-t74">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t74" headers="r1c1-t74"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">TableName</span></code></td>
<td class="cellalignment6332" headers="r2c1-t74 r1c2-t74">Identifies a table to be referenced.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t74" headers="r1c1-t74"><code dir="ltr"><span class="codeinlineitalic">CorrelationName</span></code><a id="sthref1729"></a><a id="sthref1730"></a></td>
<td class="cellalignment6332" headers="r3c1-t74 r1c2-t74"><code dir="ltr"><span class="codeinlineitalic">CorrelationName</span></code> specifies an alias for the immediately preceding table. When accessing columns of that table elsewhere in the <code dir="ltr">SELECT</code> statement, use the correlation name instead of the actual table name within the statement. The scope of the correlation name is the SQL statement in which it is used. The correlation name must conform to the syntax rules for a basic name. See <a href="names.htm#i987960">&#34;Basic names&#34;</a>.
<p>All correlation names within one statement must be unique.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t74" headers="r1c1-t74"><code dir="ltr"><span class="codeinlineitalic">JoinedTable</span></code></td>
<td class="cellalignment6332" headers="r4c1-t74 r1c2-t74">Specifies the query that defines the table join. The syntax of <code dir="ltr"><span class="codeinlineitalic">JoinedTable</span></code> is presented under <a href="#CIAIGBBF">&#34;JoinedTable&#34;</a>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t74" headers="r1c1-t74"><code dir="ltr"><span class="codeinlineitalic">DerivedTable</span></code></td>
<td class="cellalignment6332" headers="r5c1-t74 r1c2-t74">Specifies a table derived from the evaluation of a <code dir="ltr">SELECT</code> statement. No <code dir="ltr">FIRST</code> <code dir="ltr"><span class="codeinlineitalic">NumRows</span></code> or <code dir="ltr">ROWS</code> <code dir="ltr"><span class="codeinlineitalic">m</span></code> <code dir="ltr">TO</code> <code dir="ltr"><span class="codeinlineitalic">n</span></code> clauses are allowed in this <code dir="ltr">SELECT</code> statement. The syntax of <code dir="ltr"><span class="codeinlineitalic">DerivedTable</span></code> is presented under <a href="#BABHBBDD">&#34;DerivedTable&#34;</a>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="TTSQL333" class="refsect2"><a id="CIAIGBBF"></a><a id="i1300745"></a>
<h3 class="refsect2"><a id="sthref1731"></a><a id="sthref1732"></a><a id="sthref1733"></a>JoinedTable</h3>
<p>The <code dir="ltr"><span class="codeinlineitalic">JoinedTable</span></code> parameter specifies a table derived from <code dir="ltr">CROSS JOIN</code>, <code dir="ltr">INNER JOIN</code>, <code dir="ltr">LEFT OUTER JOIN</code> or <code dir="ltr">RIGHT OUTER JOIN</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1734"></a>SQL syntax</p>
<p>The syntax for <code dir="ltr"><span class="codeinlineitalic">JoinedTable</span></code> is as follows:</p>
<pre dir="ltr">{<span class="italic">CrossJoin</span> | <span class="italic">QualifiedJoin</span>}
</pre>
<p>Where <code dir="ltr"><span class="codeinlineitalic">CrossJoin</span></code> is:</p>
<pre dir="ltr"><span class="italic">TableSpec1</span> CROSS JOIN <span class="italic">TableSpec2</span>
</pre>
<p>And <code dir="ltr"><span class="codeinlineitalic">QualifiedJoin</span></code> is:</p>
<pre dir="ltr"><span class="italic">TableSpec1</span> [<span class="italic">JoinType</span>] JOIN <span class="italic">TableSpec2</span> ON <span class="italic">SearchCondition</span>
</pre>
<p>In the <code dir="ltr"><span class="codeinlineitalic">QualifiedJoin</span></code> parameter, <code dir="ltr"><span class="codeinlineitalic">JoinType</span></code> syntax is as follows:</p>
<pre dir="ltr">{INNER | LEFT [OUTER] | RIGHT [OUTER]}
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1735"></a>Parameters</p>
<p>The <code dir="ltr"><span class="codeinlineitalic">JoinedTable</span></code> parameter of the <code dir="ltr"><span class="codeinlineitalic">TableSpec</span></code> clause of a <code dir="ltr">SELECT</code> statement has the following parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for the JoinedTable parameter of the TableSpec clause of SELECT." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t75">Parameter</th>
<th class="cellalignment6331" id="r1c2-t75">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t75" headers="r1c1-t75"><code dir="ltr"><span class="codeinlineitalic">CrossJoin</span></code></td>
<td class="cellalignment6332" headers="r2c1-t75 r1c2-t75">Performs a cross join on two tables. A cross join returns a result table that is the cartesian product of the input tables. The result is the same as that of a query with the following syntax:
<p><code dir="ltr">SELECT</code> <code dir="ltr"><span class="codeinlineitalic">Selectlist</span></code> <code dir="ltr">FROM</code> <code dir="ltr"><span class="codeinlineitalic">Table1</span></code><code dir="ltr">,</code> <code dir="ltr"><span class="codeinlineitalic">Table2</span></code></p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t75" headers="r1c1-t75"><code dir="ltr"><span class="codeinlineitalic">QualifiedJoin</span></code></td>
<td class="cellalignment6332" headers="r3c1-t75 r1c2-t75">Specifies that the join is of type <code dir="ltr"><span class="codeinlineitalic">JoinType</span></code>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t75" headers="r1c1-t75"><code dir="ltr"><span class="codeinlineitalic">TableSpec1</span></code></td>
<td class="cellalignment6332" headers="r4c1-t75 r1c2-t75">Specifies the first table of the <code dir="ltr">JOIN</code> clause.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t75" headers="r1c1-t75"><code dir="ltr"><span class="codeinlineitalic">TableSpec2</span></code></td>
<td class="cellalignment6332" headers="r5c1-t75 r1c2-t75">Specifies the second table of the <code dir="ltr">JOIN</code> clause.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t75" headers="r1c1-t75"><code dir="ltr"><span class="codeinlineitalic">JoinType</span></code> <code dir="ltr">JOIN</code><a id="sthref1736"></a></td>
<td class="cellalignment6332" headers="r6c1-t75 r1c2-t75">Specifies the type of join to perform. These are the supported join types:
<ul>
<li>
<p><code dir="ltr">INNER</code></p>
</li>
<li>
<p><code dir="ltr">LEFT [OUTER]</code></p>
</li>
<li>
<p><code dir="ltr">RIGHT [OUTER]</code></p>
</li>
</ul>
<p><code dir="ltr">INNER JOIN</code> returns a result table that combines the rows from two tables that meet <code dir="ltr"><span class="codeinlineitalic">SearchCondition</span></code>.</p>
<p><code dir="ltr">LEFT OUTER JOIN</code> returns join rows that match <code dir="ltr"><span class="codeinlineitalic">SearchCondition</span></code> and rows from the first table that do not have <code dir="ltr"><span class="codeinlineitalic">SearchCondition</span></code> evaluated as true with any row from the second table.</p>
<p><code dir="ltr">RIGHT OUTER JOIN</code> returns join rows that match <code dir="ltr"><span class="codeinlineitalic">SearchCondition</span></code> and rows from the second table that do not have <code dir="ltr"><span class="codeinlineitalic">SearchCondition</span></code> evaluated as true with any row from the first table.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r7c1-t75" headers="r1c1-t75"><code dir="ltr">ON</code> <code dir="ltr"><span class="codeinlineitalic">SearchCondition</span></code></td>
<td class="cellalignment6332" headers="r7c1-t75 r1c2-t75">Specifies the search criteria to be used in a <code dir="ltr">JOIN</code> parameter. <code dir="ltr"><span class="codeinlineitalic">SearchCondition</span></code> can refer only to tables referenced in the current qualified join.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1737"></a>Description</p>
<ul>
<li>
<p><code dir="ltr">FULL OUTER JOIN</code> is not supported.</p>
</li>
<li>
<p>A joined table can be used to replace a table in a <code dir="ltr">FROM</code> clause anywhere except in a statement that defines a materialized view. Thus, a joined table can be used in <code dir="ltr">UNION</code>, <code dir="ltr">MINUS</code>, <code dir="ltr">INTERSECT</code>, a subquery, a nonmaterialized view, or a derived table.</p>
</li>
<li>
<p>A subquery cannot be specified in the operand of a joined table. For example, the following statement is <span class="italic">not</span> supported:</p>
<pre dir="ltr">SELECT * FROM
  regions INNER JOIN (SELECT * FROM countries) table2
  ON regions.region_id=table2.region_id;
</pre></li>
<li>
<p>A view can be specified as an operand of a joined table.</p>
</li>
<li>
<p>A temporary table cannot be specified as an operand of a joined table.</p>
</li>
<li>
<p><a id="sthref1738"></a><a id="sthref1739"></a><code dir="ltr">OUTER JOIN</code> can be specified in two ways, either using the (+) operator in <code dir="ltr"><span class="codeinlineitalic">SearchCondition</span></code> of the <code dir="ltr">WHERE</code> clause or using a <code dir="ltr">JOIN</code> table operation. The two specification methods cannot coexist in the same statement.</p>
</li>
<li>
<p>Join order and grouping can be specified with a <code dir="ltr"><span class="codeinlineitalic">JoinedTable</span></code> operation, but they cannot be specified with the (<code dir="ltr">+</code>) operator. For example, the following operation <span class="italic">cannot</span> be specified with the (<code dir="ltr">+</code>) operator:</p>
<pre dir="ltr">t LEFT JOIN (t2 INNER JOIN t3 ON x2=x3) ON (x1 = x2 - x3)
</pre></li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1740"></a>Examples</p>
<p>These examples use the <code dir="ltr">regions</code> and <code dir="ltr">countries</code> tables from the <code dir="ltr">HR</code> schema.</p>
<p>The following performs a left outer join.</p>
<pre dir="ltr">SELECT * FROM regions LEFT JOIN countries
  ON regions.region_id=countries.region_id
  WHERE regions.region_id=3;

&lt; 3, Asia, JP, Japan, 3 &gt;
&lt; 3, Asia, CN, China, 3 &gt;
&lt; 3, Asia, IN, India, 3 &gt;
&lt; 3, Asia, AU, Australia, 3 &gt;
&lt; 3, Asia, SG, Singapore, 3 &gt;
&lt; 3, Asia, HK, HongKong, 3 &gt;
6 rows found.
</pre>
<p>You can also perform a left outer join with the (+) operator, as follows.</p>
<pre dir="ltr">SELECT * FROM regions, countries
  WHERE regions.region_id=countries.region_id (+)
    AND regions.region_id=3;
</pre>
<p>For more examples of joins specified with the (<code dir="ltr">+</code>) operator, see <a href="#CIABGBBH">&#34;Examples&#34;</a>.</p>
<p>The following performs a right outer join.</p>
<pre dir="ltr">SELECT * FROM regions RIGHT JOIN countries
  ON regions.region_id=wountries.region_id
  WHERE regions.region_id=3;

&lt; AU, Australia, 3, 3, Asia &gt;
&lt; CN, China, 3, 3, Asia &gt;
&lt; HK, HongKong, 3, 3, Asia &gt;
&lt; IN, India, 3, 3, Asia &gt;
&lt; JP, Japan, 3, 3, Asia &gt;
&lt; SG, Singapore, 3, 3, Asia &gt;
6 rows found.
</pre>
<p>The next example performs a right outer join with the (+) operator.</p>
<pre dir="ltr">SELECT * FROM countries, regions
       WHERE regions.region_id (+)=countries.region_id
       AND countries.region_id=3;
&lt; JP, Japan, 3, 3, Asia &gt;
&lt; CN, China, 3, 3, Asia &gt;
&lt; IN, India, 3, 3, Asia &gt;
&lt; AU, Australia, 3, 3, Asia &gt;
&lt; SG, Singapore, 3, 3, Asia &gt;
&lt; HK, HongKong, 3, 3, Asia &gt;
6 rows found.
</pre>
<p>Note that the right join methods produce the same rows but in a different display order. There should be no expectation of row order for join results.</p>
<p>The following performs an inner join.</p>
<pre dir="ltr">SELECT * FROM regions INNER JOIN countries
  ON regions.region_id=countries.region_id
  WHERE regions.region_id=2;

&lt; 2, Americas, US, United States of America, 2 &gt;
&lt; 2, Americas, CA, Canada, 2 &gt;
&lt; 2, Americas, BR, Brazil, 2 &gt;
&lt; 2, Americas, MX, Mexico, 2 &gt;
&lt; 2, Americas, AR, Argentina, 2 &gt;
5 rows found.
</pre>
<p>The next example performs a cross join.</p>
<pre dir="ltr">SELECT * FROM regions CROSS JOIN countries 
  WHERE regions.region_id=1;

&lt; 1, Europe, AR, Argentina, 2 &gt;
&lt; 1, Europe, AU, Australia, 3 &gt;
&lt; 1, Europe, BE, Belgium, 1 &gt;
&lt; 1, Europe, BR, Brazil, 2 &gt;
...
&lt; 1, Europe, SG, Singapore, 3 &gt;
&lt; 1, Europe, UK, United Kingdom, 1 &gt;
&lt; 1, Europe, US, United States of America, 2 &gt;
&lt; 1, Europe, ZM, Zambia, 4 &gt;
&lt; 1, Europe, ZW, Zimbabwe, 4 &gt;
25 rows found.
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1741"></a>See also</p>
<br/>
<code dir="ltr"><a href="#i1211666">CREATE TABLE</a></code><br/>
<code dir="ltr"><a href="#g1513888">INSERT</a></code><br/>
<code dir="ltr"><a href="#g1513908">INSERT...SELECT</a></code><br/>
<code dir="ltr"><a href="#i994046">UPDATE</a></code></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="TTSQL332" class="refsect2"><a id="BABHBBDD"></a>
<h3 class="refsect2"><a id="sthref1742"></a><a id="sthref1743"></a><a id="sthref1744"></a><a id="sthref1745"></a>DerivedTable</h3>
<p>A derived table is the result of a <code dir="ltr">SELECT</code> statement in the <code dir="ltr">FROM</code> clause, with an alias.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1746"></a>SQL syntax</p>
<p>The syntax for <code dir="ltr"><span class="codeinlineitalic">DerivedTable</span></code> is as follows:</p>
<pre dir="ltr">(<span class="italic">Subquery</span>) [<span class="italic">CorrelationName</span>]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1747"></a>Parameters</p>
<p>The <code dir="ltr"><span class="codeinlineitalic">DerivedTable</span></code> parameter of the <code dir="ltr"><span class="codeinlineitalic">TableSpec</span></code> clause of a <code dir="ltr">SELECT</code> statement has the following parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for the DerivedTable parameter of the TableSpec clause of SELECT." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t76">Parameter</th>
<th class="cellalignment6331" id="r1c2-t76">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t76" headers="r1c1-t76"><code dir="ltr"><span class="codeinlineitalic">Subquery</span></code></td>
<td class="cellalignment6332" headers="r2c1-t76 r1c2-t76">For information on subqueries, see <a href="express.htm#i988350">&#34;Subqueries&#34;</a>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t76" headers="r1c1-t76"><code dir="ltr"><span class="codeinlineitalic">CorrelationName</span></code></td>
<td class="cellalignment6332" headers="r3c1-t76 r1c2-t76">Optionally use <code dir="ltr"><span class="codeinlineitalic">CorrelationName</span></code> to specify an alias for the derived table. It must be different from any table name referenced in the query.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1748"></a>Description</p>
<p>When using a derived table, these restrictions apply:</p>
<ul>
<li>
<p>The <code dir="ltr">DUAL</code> table can be used in a <code dir="ltr">SELECT</code> statement that references no other tables, but needs to return at least one row. Selecting from <code dir="ltr">DUAL</code> is useful for computing a constant expression (an expression that is evaluated to a constant value) with the <code dir="ltr">SELECT</code> statement. Because <code dir="ltr">DUAL</code> has only one row, the constant is returned only once.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">Subquery</span></code> cannot refer to a column from another derived table.</p>
</li>
<li>
<p>A derived table cannot be used as a source of a joined table.</p>
</li>
<li>
<p>A derived table cannot be used as a target of a <code dir="ltr"><a href="#BABBJCCI">DELETE</a></code> or <code dir="ltr"><a href="#i994046">UPDATE</a></code> statement.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="TTSQL458" class="refsect2"><a id="BABCDBAF"></a>
<h3 class="refsect2"><a id="sthref1749"></a><a id="sthref1750"></a><a id="sthref1751"></a><a id="sthref1752"></a><a id="sthref1753"></a>GROUP BY clause</h3>
<p>Specify the <code dir="ltr">GROUP BY</code> clause if you want the database to group the selected rows based on the value of expressions for each row and return a single row of summary information for each group. If the <code dir="ltr">GROUP BY</code> clause is omitted, the entire query result is treated as one group. If this clause contains <code dir="ltr">CUBE</code> or <code dir="ltr">ROLLUP</code>, the results contain superaggregate groupings in addition to the regular groupings.</p>
<p>The expressions in the <code dir="ltr">GROUP BY</code> clause can do the following:</p>
<ul>
<li>
<p>Designate single or multiple columns.</p>
</li>
<li>
<p>Include arithmetic operations, the <code dir="ltr">ROWID</code> pseudocolumn, or <code dir="ltr">NULL</code>.</p>
</li>
<li>
<p>Include a date, a constant, or a dynamic parameter.</p>
</li>
<li>
<p>Include <code dir="ltr">ROLLUP</code> or <code dir="ltr">CUBE</code> clauses, where the results produce superaggregate groupings in addition to the regular groupings. Superaggregate groupings are calculated subtotals and totals returned with the regular groupings in the <code dir="ltr">GROUP BY</code> clause.</p>
</li>
<li>
<p>Include <code dir="ltr">GROUPING SETS</code> clause to distinguish which superaggregate groupings to produce.</p>
</li>
</ul>
<p>When you use the <code dir="ltr">GROUP BY</code> clause, the select list can contain only aggregate functions and columns referenced in the <code dir="ltr">GROUP BY</code> clause. If the select list contains the construct <code dir="ltr">*</code>, <code dir="ltr"><span class="codeinlineitalic">TableName.</span></code><code dir="ltr">*</code>, or <code dir="ltr"><span class="codeinlineitalic">Owner.TableName</span></code><code dir="ltr">.*</code>, the <code dir="ltr">GROUP BY</code> clause must contain all columns that the <code dir="ltr">*</code> includes. NULL values are considered equivalent in grouping rows. If all other columns are equal, all NULL values in a column are placed in a single group.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
To identify and potentially eliminate NULL groupings from the superaggregate groupings, use the <code dir="ltr">GROUPING</code> function, as described in <a href="function.htm#BABJEEAH">&#34;GROUPING&#34;</a>.</div>
<div id="TTSQL459" class="refsect3"><a id="sthref1754"></a>
<h4 class="refsect3">SQL syntax</h4>
<p>The general syntax for the <code dir="ltr">GROUP BY</code> clause is the following:</p>
<pre dir="ltr">GROUP BY
 {<span class="italic">Expression</span> | <span class="italic">RollupCubeClause</span> | <span class="italic">GroupingSetsClause</span> }[,...]
 
<span class="italic">GroupingSetsClause</span>::=  GROUPING SETS 
 <span class="italic">GroupingExpressionList</span> | <span class="italic">RollupCubeClause</span> [,...]

<span class="italic">RollupCubeClause</span>
{ ROLLUP | CUBE } ( <span class="italic">GroupingExpressionList</span> ) }

<span class="italic">GroupingExpressionList</span>::=   
{ <span class="italic">Expression</span> | <span class="italic">ExpressionList</span> [, { <span class="italic">Expression</span> | <span class="italic">ExpressionList</span> } ] ...}
 
<span class="italic">ExpressionList</span> :: = ( <span class="italic">Expression</span> [, <span class="italic">Expression</span> ] ...)
</pre></div>
<!-- class="refsect3" -->
<div id="TTSQL504" class="refsect3"><a id="sthref1755"></a>
<h4 class="refsect3">Parameters</h4>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for the DerivedTable parameter of the TableSpec clause of SELECT." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t78">Parameter</th>
<th class="cellalignment6331" id="r1c2-t78">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t78" headers="r1c1-t78"><code dir="ltr"><span class="codeinlineitalic">Expression</span></code></td>
<td class="cellalignment6332" headers="r2c1-t78 r1c2-t78">Valid expression syntax. See <a href="express.htm#i996218">Chapter 3, &#34;Expressions&#34;</a>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t78" headers="r1c1-t78"><code dir="ltr"><span class="codeinlineitalic">RollupCubeClause</span></code></td>
<td class="cellalignment6332" headers="r3c1-t78 r1c2-t78">The <code dir="ltr">GROUP BY</code> clause may include one or more <code dir="ltr">ROLLUP</code> or <code dir="ltr">CUBE</code> clauses.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t78" headers="r1c1-t78"><code dir="ltr"><span class="codeinlineitalic">GroupingSetsClause</span></code></td>
<td class="cellalignment6332" headers="r4c1-t78 r1c2-t78">The <code dir="ltr">GROUP BY</code> clause may include one or more <code dir="ltr">GROUPING SETS</code> clauses. The <code dir="ltr">GROUPING SETS</code> clause enables you to explicitly specify which groupings of data that the database returns. For more information, see <a href="#BABEFAGA">&#34;GROUPING SETS&#34;</a>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t78" headers="r1c1-t78"><code dir="ltr"><span class="codeinlineitalic">GroupingExpressionList</span></code></td>
<td class="cellalignment6332" headers="r5c1-t78 r1c2-t78">The <code dir="ltr">GROUP BY</code> clause can contain multiple expressions or expression lists.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t78" headers="r1c1-t78"><code dir="ltr">ROLLUP</code> <code dir="ltr"><span class="codeinlineitalic">GroupingExpressionList</span></code></td>
<td class="cellalignment6332" headers="r6c1-t78 r1c2-t78">The <code dir="ltr">ROLLUP</code> clause is used to generate superaggregate rows from groups. For more information, see <a href="#BABBJCDI">&#34;ROLLUP&#34;</a>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r7c1-t78" headers="r1c1-t78"><code dir="ltr">CUBE</code> <code dir="ltr"><span class="codeinlineitalic">GroupingExpressionList</span></code></td>
<td class="cellalignment6332" headers="r7c1-t78 r1c2-t78">The <code dir="ltr">CUBE</code> clause groups selected rows based on the values of all possible combinations of the grouping columns in the <code dir="ltr">CUBE</code> clause. For more information, see <a href="#BABJGEIE">&#34;CUBE&#34;</a>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r8c1-t78" headers="r1c1-t78"><code dir="ltr"><span class="codeinlineitalic">ExpressionList</span></code></td>
<td class="cellalignment6332" headers="r8c1-t78 r1c2-t78">A list of one or more expressions, each separated by a comma.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsect3" -->
<div id="TTSQL460" class="refsect3"><a id="sthref1756"></a>
<h4 class="refsect3">Examples</h4>
<p>The following <code dir="ltr">GROUP BY</code> example sums the salaries for employees in the <code dir="ltr">employees</code> table and uses the <code dir="ltr">SUBSTR</code> expression to group the data by job function.</p>
<pre dir="ltr">Command&gt; SELECT SUBSTR (job_id, 4,10), SUM (salary) FROM employees
       &gt; GROUP BY SUBSTR (job_id,4,10);
&lt; PRES, 24000 &gt;
&lt; VP, 34000 &gt;
&lt; PROG, 28800 &gt;
&lt; MGR, 24000 &gt;
&lt; ACCOUNT, 47900 &gt;
&lt; MAN, 121400 &gt;
&lt; CLERK, 133900 &gt;
&lt; REP, 273000 &gt;
&lt; ASST, 4400 &gt;
9 rows found.
</pre>
<p>Query <code dir="ltr"><span class="codeinlineitalic">emp_details_view</span></code> to select the first 10 departments and managers within the department and count the number of employees in the department with the same manager. Use the <code dir="ltr">GROUP BY</code> clause to group the result by department and manager.</p>
<pre dir="ltr">Command&gt; columnlabels on;
Command&gt; SELECT first 10 department_id AS DEPT, manager_id AS MGR,
       &gt; COUNT(employee_id) AS NUM_EMP
       &gt; FROM emp_details_view
       &gt; GROUP BY (department_id, manager_id)
       &gt; ORDER BY department_id, manager_id;

DEPT, MGR, NUM_EMP
&lt; 10, 101, 1 &gt;
&lt; 20, 100, 1 &gt;
&lt; 20, 201, 1 &gt;
&lt; 30, 100, 1 &gt;
&lt; 30, 114, 5 &gt;
&lt; 40, 101, 1 &gt;
&lt; 50, 100, 5 &gt;
&lt; 50, 120, 8 &gt;
&lt; 50, 121, 8 &gt;
&lt; 50, 122, 8 &gt;
10 rows found.
</pre></div>
<!-- class="refsect3" -->
<div id="TTSQL461" class="refsect3"><a id="sthref1757"></a>
<h4 class="refsect3"><a id="sthref1758"></a><a id="sthref1759"></a><a id="sthref1760"></a><a id="sthref1761"></a><a id="sthref1762"></a><a id="sthref1763"></a><a id="sthref1764"></a><a id="sthref1765"></a>ROL<a id="sthref1766"></a><a id="sthref1767"></a>LUP, CUBE and GROUPING SETS clauses</h4>
<p>The following definitions describe how columns can be grouped within the <code dir="ltr">ROLLUP</code>, <code dir="ltr">CUBE</code>, and <code dir="ltr">GROUPING SETS</code> clauses:</p>
<ul>
<li>
<p><span class="bold">Grouping column</span>: A single column used in a <code dir="ltr">GROUP BY</code> clause. For example, in the following <code dir="ltr">GROUP BY</code> clause, <code dir="ltr">X</code>, <code dir="ltr">Y</code>, and <code dir="ltr">Z</code> are group columns.</p>
<pre dir="ltr">GROUP BY X, GROUPING SETS(Y, Z)
</pre></li>
<li>
<p><span class="bold">Composite Column</span>: A list of grouping columns inside parentheses. For example, in the following clause, <code dir="ltr">(C1, C2)</code> and <code dir="ltr">(C3, C4)</code> are composite columns.</p>
<pre dir="ltr">GROUP BY ROLLUP( (C1,C2), (C3,C4), C5);
</pre></li>
<li>
<p><span class="bold">Grouping</span>: Grouping is a single level of aggregation from within a grouping set. For example, in the following statement, <code dir="ltr">(C1)</code> and <code dir="ltr">(C2, C3)</code> are individual groupings.</p>
<pre dir="ltr">GROUP BY GROUPING SETS(C1, (C2,C3));
</pre></li>
<li>
<p><span class="bold">Grouping Set</span>: A collection of groupings inside parentheses. For example, in the following statement, <code dir="ltr">(C1, (C2, C3))</code> and <code dir="ltr">(C2, (C4, C5))</code> are two individual grouping sets.</p>
<pre dir="ltr">GROUP BY GROUPING SETS(C1, (C2,C3)), GROUPING SETS(C2, (C4, C5));
</pre></li>
<li>
<p><span class="bold">Concatenated grouping sets</span>: Separate multiple grouping sets with commas. The result is a cross-product of groupings from each grouping set.</p>
</li>
<li>
<p><span class="bold">Grand Total or Empty set column</span>: A grand total or empty set grouping computes aggregation by considering all rows as one group. Grand totals are automatically provided in the results for <code dir="ltr">ROLLUP</code> and <code dir="ltr">CUBE</code> clauses; however, you request the grand total in the <code dir="ltr">GROUPING SETS</code> clause by providing empty parentheses, <code dir="ltr">( )</code>.</p>
</li>
</ul>
<p>Duplicate grouping columns can be used in <code dir="ltr">ROLLUP</code>, <code dir="ltr">CUBE</code> or <code dir="ltr">GROUPING SETS</code>. However, it does result in duplicated result rows.</p>
<p>Restrictions for <code dir="ltr">ROLLUP</code>, <code dir="ltr">CUBE</code> and <code dir="ltr">GROUPING SETS</code> clauses are as follows:</p>
<ul>
<li>
<p>These clauses are not supported within a materialized view definition.</p>
</li>
<li>
<p>These clauses are not supported for global queries across a cache grid.</p>
</li>
</ul>
<p>The following sections describe the <code dir="ltr">GROUPING SETS</code>, <code dir="ltr">ROLLUP</code>, and <code dir="ltr">CUBE</code> clauses:</p>
<ul>
<li>
<p><a href="#BABEFAGA">GROUPING SETS</a></p>
</li>
<li>
<p><a href="#BABBJCDI">ROLLUP</a></p>
</li>
<li>
<p><a href="#BABJGEIE">CUBE</a></p>
</li>
</ul>
<div id="TTSQL462" class="refsect4"><a id="BABEFAGA"></a>
<h5 class="refsect4">GROUPING SETS</h5>
<p>The <code dir="ltr">GROUPING SETS</code> clause enables you to explicitly specify which groupings of data that the database returns. You specify only the desired groups by enclosing them within parentheses, so the database only generates the superaggregate summaries in which you are interested.</p>
<p>The following statement produces three groups: one group returns results for each gender and year columns, a second for a summary superaggregate for each of the months and the last result for the grand total.</p>
<pre dir="ltr">SELECT GENDER, YEAR, MONTH,
   SUM (NUM_OF_STUDENTS) AS TOTAL
   FROM INSTRUCTOR_SUMMARY
   GROUP BY GROUPING SETS ((GENDER, YEAR),  -- 1ST GROUP
                           (MONTH), -- 2ND GROUP
                           ()); -- 3RD GROUP
 
</pre>
<p>You can combine multiple <code dir="ltr">GROUPING SETS</code> to generate specific combinations between the multiple <code dir="ltr">GROUPING SETS</code>. The following statement contains two <code dir="ltr">GROUPING SETS</code> clauses:</p>
<pre dir="ltr">GROUP BY GROUPING SETS (YEAR, MONTH),
         GROUPING SETS (WEEK, DAY);
</pre>
<p>This is equivalent to the following <code dir="ltr">GROUPING SETS</code> statement:</p>
<pre dir="ltr">GROUP BY GROUPING SETS (YEAR, WEEK), 
 (YEAR, DAY), 
 (MONTH, WEEK), 
 (MONTH, DAY);
</pre>
<p>When a <code dir="ltr">GROUP BY</code> clause has both regular grouping columns and a <code dir="ltr">GROUPING SETS</code> clause, the results are grouped by the regular grouping column as follows:</p>
<pre dir="ltr">GROUP BY a, b GROUPING SETS(c, d);
</pre>
<p>This is equivalent to the following:</p>
<pre dir="ltr">GROUP BY GROUPING SETS((a, b, c), (a, b, d));
</pre>
<p><span class="bold">Example</span></p>
<p>The following example specifies the grouping sets of (<code dir="ltr">region_name</code>, <code dir="ltr">country_name</code>), <code dir="ltr">state_province</code>, and grand totals.</p>
<pre dir="ltr">Command&gt; SELECT region_name AS Region,
       &gt;    country_name AS Country,
       &gt;    state_province AS State,
       &gt;    COUNT(employee_id) AS &#34;Total Emp&#34;
       &gt; FROM regions r, countries c, locations l, departments d, employees e
       &gt; WHERE r.region_id = c.region_id AND
       &gt;    l.country_id = c.country_id AND
       &gt;    d.location_id = l.location_id AND
       &gt;    d.department_id = e.department_id
       &gt; GROUP BY grouping sets((region_name, country_name), state_province, ())
       &gt; ORDER BY region_name, state_province;
 
REGION, COUNTRY, STATE, TOTAL EMP
&lt; Americas, Canada, &lt;NULL&gt;, 2 &gt;
&lt; Americas, United States of America, &lt;NULL&gt;, 68 &gt;
&lt; Europe, Germany, &lt;NULL&gt;, 1 &gt;
&lt; Europe, United Kingdom, &lt;NULL&gt;, 35 &gt;
&lt; &lt;NULL&gt;, &lt;NULL&gt;, Bavaria, 1 &gt;
&lt; &lt;NULL&gt;, &lt;NULL&gt;, California, 45 &gt;
&lt; &lt;NULL&gt;, &lt;NULL&gt;, Ontario, 2 &gt;
&lt; &lt;NULL&gt;, &lt;NULL&gt;, Oxford, 34 &gt;
&lt; &lt;NULL&gt;, &lt;NULL&gt;, Texas, 5 &gt;
&lt; &lt;NULL&gt;, &lt;NULL&gt;, Washington, 18 &gt;
&lt; &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, 106 &gt;
&lt; &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, 1 &gt;
12 rows found.
</pre>
<br/></div>
<!-- class="refsect4" -->
<div id="TTSQL463" class="refsect4"><a id="BABBJCDI"></a>
<h5 class="refsect4"><a id="sthref1768"></a><a id="sthref1769"></a>ROLLUP</h5>
<p><code dir="ltr">ROLLUP</code> is used within the <code dir="ltr">GROUP BY</code> clause. When used with <code dir="ltr">SUM</code>, <code dir="ltr">ROLLUP</code> generates subtotals from most detailed level (all columns specified in the <code dir="ltr">ROLLUP</code> clause) to the grand total level, by removing one column at each level. These are known as superaggregate rows.</p>
<p>The <code dir="ltr">ROLLUP</code> clause returns the following:</p>
<ul>
<li>
<p>Regular aggregate rows that would be produced by <code dir="ltr">GROUP BY</code> without using <code dir="ltr">ROLLUP</code>.</p>
</li>
<li>
<p>Subtotals following the grouping list specified in the <code dir="ltr">ROLLUP</code> clause. <code dir="ltr">ROLLUP</code> takes as its argument an ordered list of grouping columns. Each subtotal is created for the ordered list of grouping columns dropping the right-most grouping column until it reaches the grand total. For instance, if you specify <code dir="ltr">GROUP BY ROLLUP(x, y, z)</code>, the returned superaggregate groups would be as follows: <code dir="ltr">(x,y,z), (x,y), (x), ( )</code>.</p>
<p>The number of subtotals created is <code dir="ltr"><span class="codeinlineitalic">n</span></code><code dir="ltr">+1</code> aggregate levels, where <code dir="ltr"><span class="codeinlineitalic">n</span></code> is the number of grouping columns. For example, if there are three expressions (<code dir="ltr"><span class="codeinlineitalic">n</span></code><code dir="ltr">=3</code>) in the <code dir="ltr">ROLLUP</code> clause, then <code dir="ltr"><span class="codeinlineitalic">n</span></code><code dir="ltr">+1 = 3+1</code>, resulting in four groupings.</p>
</li>
<li>
<p>Grand total row.</p>
</li>
</ul>
<p>You can group columns using composite columns inside parentheses. For example, in the following statement:</p>
<pre dir="ltr">GROUP BY ROLLUP( (a, b), (c, d), e);
</pre>
<p>The (<code dir="ltr">a, b</code>) and (<code dir="ltr">c, d</code>) composite columns are treated as a unit when the database produces the <code dir="ltr">ROLLUP</code> results. In this example, the grouping sets returned are as follows: <code dir="ltr">((a, b), (c, d), e )</code>, <code dir="ltr">((a, b), (c, d))</code>, <code dir="ltr">(a, b)</code> and <code dir="ltr">()</code>.</p>
<p>You can execute several <code dir="ltr">ROLLUP</code> clauses within your <code dir="ltr">SELECT</code> statement, as follows:</p>
<pre dir="ltr">SELECT C1, COUNT(*)
FROM T
GROUP BY ROLLUP(a, b), ROLLUP(c, d);
</pre>
<p>This is equivalent to the following statement:</p>
<pre dir="ltr">SELECT C1, COUNT(*)
FROM T
GROUP BY GROUPING SETS((a, b),(a),()), 
 GROUPING SETS((c, d),(c), ());
</pre>
<p><span class="bold">Examples</span></p>
<p>Query the <code dir="ltr">employees</code> table to select the first 10 departments and return the number of employees under each manager in each department. Use <code dir="ltr">ROLLUP</code> to subtotal the number of employees in each department and return a grand total of all employees in the company.</p>
<pre dir="ltr">Command&gt; SELECT first 10 department_id AS Dept,
       &gt; manager_id AS Mgr,
       &gt; COUNT(employee_id) AS &#34;Total emp&#34;
       &gt; FROM employees
       &gt; GROUP BY ROLLUP(department_id, manager_id)
       &gt; ORDER BY department_id, manager_id;
 
DEPT, MGR, TOTAL EMP
&lt; 10, 101, 1 &gt;
&lt; 10, &lt;NULL&gt;, 1 &gt;
&lt; 20, 100, 1 &gt;
&lt; 20, 201, 1 &gt;
&lt; 20, &lt;NULL&gt;, 2 &gt;
&lt; 30, 100, 1 &gt;
&lt; 30, 114, 5 &gt;
&lt; 30, &lt;NULL&gt;, 6 &gt;
&lt; 40, 101, 1 &gt;
&lt; 40, &lt;NULL&gt;, 1 &gt;
10 rows found.
</pre>
<p>The following query returns the number of employees in each region, country and state or province. The rollup returns superaggregate rows for subtotals of all employees in each state or province and in each country and a grand total for all employees in the company. By combining the region and country as its own unit (within parentheses), the rollup does not return all employees for each region.</p>
<pre dir="ltr">Command&gt; SELECT region_name AS Region,
       &gt;  country_name AS Country,
       &gt;  state_province AS State,
       &gt;  COUNT(employee_id) AS &#34;Total Emp&#34;
       &gt;  FROM regions r, countries c, locations l, departments d, employees e
       &gt;  WHERE r.region_id = c.region_id
       &gt;  AND l.country_id = c.country_id
       &gt;  AND d.location_id = l.location_id
       &gt;  AND d.department_id = e.department_id
       &gt;  GROUP BY rollup((region_name, country_name), state_province)
       &gt;  ORDER BY region_name;

REGION, COUNTRY, STATE, TOTAL EMP
&lt; Americas, Canada, Ontario, 2 &gt; 
&lt; Americas, United States of America, Texas, 5 &gt; 
&lt; Americas, United States of America, California, 45 &gt; 
&lt; Americas, United States of America, Washington, 18 &gt; 
&lt; Americas, Canada, &lt;NULL&gt;, 2 &gt; 
&lt; Americas, United States of America, &lt;NULL&gt;, 68 &gt; 
&lt; Europe, Germany, Bavaria, 1 &gt; 
&lt; Europe, United Kingdom, &lt;NULL&gt;, 1 &gt; 
&lt; Europe, United Kingdom, Oxford, 34 &gt; 
&lt; Europe, Germany, &lt;NULL&gt;, 1 &gt; 
&lt; Europe, United Kingdom, &lt;NULL&gt;, 35 &gt; 
&lt; &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, 106 &gt; 
12 rows found. 
</pre>
<br/></div>
<!-- class="refsect4" -->
<div id="TTSQL464" class="refsect4"><a id="BABJGEIE"></a>
<h5 class="refsect4"><a id="sthref1770"></a><a id="sthref1771"></a>CUBE</h5>
<p>The <code dir="ltr">CUBE</code> clause groups the selected rows based on the values of all possible combinations of the grouping columns in the <code dir="ltr">CUBE</code> clause. It returns a single row of summary information for each group. For example, if there are three expressions (<code dir="ltr"><span class="codeinlineitalic">n</span></code><code dir="ltr">=3</code>) in the <code dir="ltr">CUBE</code> clause, then 2<sup>n</sup> = 2<sup>3</sup>, resulting in eight groupings. Rows grouped on the values of <code dir="ltr"><span class="codeinlineitalic">n</span></code> expressions are called regular rows; all others are called superaggregate rows. You can group using composite columns. For example, a commonly requested <code dir="ltr">CUBE</code> operation is for state sales subtotals on all combinations of month, state, and product sold.</p>
<p>If you specify <code dir="ltr">GROUP BY CUBE(a, b, c)</code>, the resulting aggregate groupings generated are as follows: (<code dir="ltr">a,b,c</code>), (<code dir="ltr">a,b)</code>, (<code dir="ltr">a,c</code>), (<code dir="ltr">b,c</code>), <code dir="ltr">a, b, c</code>, <code dir="ltr">( )</code>.</p>
<p><span class="bold">Example</span></p>
<p>To return the number of employees for each region and country, issue the following query.</p>
<pre dir="ltr">Command&gt; SELECT region_name AS Region,
       &gt; country_name AS Country,
       &gt; COUNT(employee_id) AS &#34;Total Emp&#34;
       &gt; FROM regions r, countries c, locations l, departments d, employees e
       &gt; WHERE r.region_id = c.region_id
       &gt; AND l.country_id = c.country_id
       &gt; AND d.location_id = l.location_id
       &gt; AND d.department_id = e.department_id
       &gt; GROUP BY CUBE(region_name, country_name)
       &gt; ORDER BY region_name;
 
REGION, COUNTRY, TOTAL EMP
&lt; Americas, Canada, 2 &gt;
&lt; Americas, United States of America, 68 &gt;
&lt; Americas, &lt;NULL&gt;, 70 &gt;
&lt; Europe, Germany, 1 &gt;
&lt; Europe, United Kingdom, 35 &gt;
&lt; Europe, &lt;NULL&gt;, 36 &gt;
&lt; &lt;NULL&gt;, Canada, 2 &gt;
&lt; &lt;NULL&gt;, Germany, 1 &gt;
&lt; &lt;NULL&gt;, United Kingdom, 35 &gt;
&lt; &lt;NULL&gt;, United States of America, 68 &gt;
&lt; &lt;NULL&gt;, &lt;NULL&gt;, 106 &gt;
11 rows found.
</pre>
<br/></div>
<!-- class="refsect4" --></div>
<!-- class="refsect3" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="g1514124"></a>
<div id="TTSQL334" class="refsect1">
<h2 class="refsect1"><a id="sthref1772"></a><a id="sthref1773"></a>TRUNCATE TABLE</h2>
<p>The <code dir="ltr">TRUNCATE TABLE</code> statement is similar to a <code dir="ltr">DELETE</code> statement that deletes all rows. However, it is faster than <code dir="ltr">DELETE</code> in most circumstances, as <code dir="ltr">DELETE</code> removes each row individually.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1774"></a>Required privilege</p>
<p>No privilege is required for the table owner.</p>
<p><code dir="ltr">DELETE</code> for another user&#39;s table.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1775"></a>SQL syntax</p>
<pre dir="ltr">TRUNCATE TABLE [<span class="italic">Owner</span>.]<span class="italic">TableName</span>
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1776"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for TRUNCATE TABLE." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t79">Parameter</th>
<th class="cellalignment6331" id="r1c2-t79">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t79" headers="r1c1-t79"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">TableName</span></code></td>
<td class="cellalignment6332" headers="r2c1-t79 r1c2-t79">Identifies the table to be truncated.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1777"></a>Description</p>
<ul>
<li>
<p><code dir="ltr">TRUNCATE</code> is a DDL statement and thus is controlled by the <code dir="ltr">DDLCommitBehavior</code> attribute. If <code dir="ltr">DDLCommitBehavior</code><code dir="ltr">=0</code> (the default), then a commit is performed before and after execution of the <code dir="ltr">TRUNCATE</code> statement. If <code dir="ltr">DDLCommitBehavior=1</code>, then <code dir="ltr">TRUNCATE</code> is part of a transaction and these transactional rules apply:</p>
<ul>
<li>
<p><code dir="ltr">TRUNCATE</code> operations can be rolled back.</p>
</li>
<li>
<p>Subsequent <code dir="ltr">INSERT</code> statements are not allowed in the same transaction as a <code dir="ltr">TRUNCATE</code> statement.</p>
</li>
</ul>
</li>
<li>
<p>Concurrent read committed read operations are allowed, and semantics of the reads are the same as for read committed reads in presence of <code dir="ltr">DELETE</code> statements.</p>
</li>
<li>
<p><code dir="ltr">TRUNCATE</code> is allowed even when there are child tables. However, child tables need to be empty for <code dir="ltr">TRUNCATE</code> to proceed. If any of the child tables have any rows in them, TimesTen returns an error indicating that a child table is not empty.</p>
</li>
<li>
<p><code dir="ltr">TRUNCATE</code> is not supported with any detail table of a materialized view, table that is a part of a cache group, or temporary table.</p>
</li>
<li>
<p>When a table contains out of line varying-length data, the performance of <code dir="ltr">TRUNCATE TABLE</code> is similar to that of <code dir="ltr">DELETE</code> statement that deletes all rows in a table. For more details on out-of line data, see <a href="types.htm#i1029200">&#34;Numeric data types&#34;</a>.</p>
</li>
<li>
<p>Where tables are being replicated, the <code dir="ltr">TRUNCATE</code> statement replicates to the subscriber, even when no rows are operated upon.</p>
</li>
<li>
<p>When tables are being replicated with timestamp conflict checking enabled, conflicts are not reported.</p>
</li>
<li>
<p><code dir="ltr">DROP TABLE</code> and <code dir="ltr">ALTER TABLE</code> operations cannot be used to change hash pages on uncommitted truncated tables.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1778"></a>Examples</p>
<p>To delete all the rows from the <code dir="ltr">recreation.clubs</code> table, use:</p>
<pre dir="ltr">TRUNCATE TABLE recreation.clubs;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1779"></a>See also</p>
<br/>
<code dir="ltr"><a href="#i1407906">ALTER TABLE</a></code><br/>
<code dir="ltr"><a href="#g1513813">DROP TABLE</a></code></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1046858"></a>
<div id="TTSQL335" class="refsect1">
<h2 class="refsect1"><a id="sthref1780"></a><a id="sthref1781"></a>UNLOAD CACHE GROUP</h2>
<p>The <code dir="ltr">UNLOAD CACHE GROUP</code> statement removes data from the cache group.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1782"></a>Required privilege</p>
<p>No privilege is required for the cache group owner.</p>
<p><code dir="ltr">UNLOAD CACHE GROUP</code> or <code dir="ltr">UNLOAD ANY CACHE GROUP</code> for another user&#39;s cache group.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1783"></a>SQL syntax</p>
<pre dir="ltr">UNLOAD CACHE GROUP [<span class="italic">Owner.</span>]<span class="italic">GroupName</span> 
  [WHERE <span class="italic">ConditionalExpression</span>]
  [COMMIT EVERY <span class="italic">n</span> ROWS]
</pre>
<p>Or:</p>
<pre dir="ltr">UNLOAD CACHE GROUP [<span class="italic">Owner.</span>]<span class="italic">GroupName</span> 
WITH ID (<span class="italic">ColumnValueList</span>);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1784"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for UNLOAD CACHE GROUP." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t80">Parameter</th>
<th class="cellalignment6331" id="r1c2-t80">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t80" headers="r1c1-t80"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">GroupName</span></code></td>
<td class="cellalignment6332" headers="r2c1-t80 r1c2-t80">Name assigned to the cache group.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t80" headers="r1c1-t80"><code dir="ltr">WHERE</code> <code dir="ltr"><span class="codeinlineitalic">ConditionalExpression</span></code></td>
<td class="cellalignment6332" headers="r3c1-t80 r1c2-t80">Use the <code dir="ltr">WHERE</code> clause to specify a search condition to qualify the target rows of the cache operation. If you use more than one table in the <code dir="ltr">WHERE</code> clause and the tables have columns with the same names, fully qualify the table names.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t80" headers="r1c1-t80"><code dir="ltr">COMMIT</code> <code dir="ltr">EVERY</code> <code dir="ltr"><span class="codeinlineitalic">n</span></code> <code dir="ltr">ROWS</code></td>
<td class="cellalignment6332" headers="r4c1-t80 r1c2-t80">Use the <code dir="ltr">COMMIT</code> <code dir="ltr">EVERY</code> <code dir="ltr"><span class="codeinlineitalic">n</span></code> <code dir="ltr">ROWS</code> clause to indicate the frequency (based on the number of rows that are unloaded) at which a commit is issued during the unload operation.
<p><code dir="ltr">ROWS</code> refers to the number of rows that are deleted from the cache group. For example, if your cache group has one cache instance and the cache instance consists of 1 parent row and 10 child rows, and you issue <code dir="ltr">COMMIT</code> <code dir="ltr">EVERY</code> <code dir="ltr">2</code> <code dir="ltr">ROWS</code>, TimesTen issues one commit after the entire cache instance is deleted. TimesTen does not commit in the middle of deleting an cache instance. So once the unload operation reaches its threshold (2 rows in this case), TimesTen issues a commit after all rows are deleted for that cache instance.</p>
<p>If you specify this clause, the cache agent must be running and the unload must be the only operation in the transaction.</p>
<p>Express <code dir="ltr"><span class="codeinlineitalic">n</span></code> as an integer where (<code dir="ltr"><span class="codeinlineitalic">n</span></code> <code dir="ltr">&gt;= 0</code>). If you specify 0 for <code dir="ltr"><span class="codeinlineitalic">n</span></code>, the <code dir="ltr">UNLOAD</code> <code dir="ltr">CACHE</code> <code dir="ltr">GROUP</code> statement is executed as one transaction and the cache agent does the delete.</p>
<p>To improve performance, use this clause when you are performing operations on cache groups that affect large amounts of data.</p>
<p>Do not use this clause when you have cache groups with a small amount of data.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t80" headers="r1c1-t80"><code dir="ltr">WITH ID</code> <code dir="ltr"><span class="codeinlineitalic">ColumnValueList</span></code></td>
<td class="cellalignment6332" headers="r5c1-t80 r1c2-t80">The <code dir="ltr">WITH ID</code> clauses enables you to use primary key values to unload the cache instance. Specify <code dir="ltr"><span class="codeinlineitalic">ColumnValueList</span></code> as either a list of literals or binding parameters to represent the primary key values.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1785"></a>Description</p>
<ul>
<li>
<p>The <code dir="ltr">UNLOAD</code> <code dir="ltr">CACHE</code> <code dir="ltr">GROUP</code> statement deletes rows from the TimesTen cache tables without affecting the data in the Oracle database tables.</p>
</li>
<li>
<p>If the cache group is replicated, an <code dir="ltr">UNLOAD CACHE GROUP</code> statement deletes the entire contents of any replicated cache group as well.</p>
</li>
<li>
<p>Execution of the <code dir="ltr">UNLOAD CACHE GROUP</code> statement for an AWT cache group waits until updates on the rows have been propagated to the Oracle database.</p>
</li>
<li>
<p>The <code dir="ltr">UNLOAD CACHE GROUP</code> statement can be used for any type of cache group. For a description of cache group types, see <a href="#i1228554">&#34;CREATE CACHE GROUP&#34;</a>.</p>
</li>
<li>
<p>Use the <code dir="ltr">UNLOAD CACHE GROUP</code> statement carefully with cache groups that have the <code dir="ltr">AUTOREFRESH</code> attribute. A row that is unloaded can reappear in the cache group as the result of an autorefresh operation if the row or its child rows are updated in the Oracle database.</p>
</li>
<li>
<p>Following the execution of an <code dir="ltr">UNLOAD CACHE GROUP</code> statement, the ODBC function <code dir="ltr">SQLRowCount()</code>, the JDBC method <code dir="ltr">getUpdateCount()</code>, and the OCI function <code dir="ltr">OCIAttrGet()</code> with the <code dir="ltr">OCI_ATTR_ROW_COUNT</code> argument return the number of cache instances that were unloaded.</p>
</li>
<li>
<p>If you specify the <code dir="ltr">COMMIT</code> <code dir="ltr">EVERY</code> <code dir="ltr"><span class="codeinlineitalic">n</span></code> <code dir="ltr">ROWS</code> clause, the cache agent performs the unload operation and commits the transaction after unloading the data. Make sure the cache agent is up and running. If you do not specify the <code dir="ltr">COMMIT</code> <code dir="ltr">EVERY</code> <code dir="ltr"><span class="codeinlineitalic">n</span></code> <code dir="ltr">ROWS</code> clause, the unload operation is executed by the application.</p>
</li>
<li>
<p>If you specify the <code dir="ltr">COMMIT</code> <code dir="ltr">EVERY</code> <code dir="ltr"><span class="codeinlineitalic">n</span></code> <code dir="ltr">ROWS</code> clause, you cannot rollback the unload operation. If the unload operation fails when you specify the <code dir="ltr">COMMIT</code> <code dir="ltr">EVERY</code> <code dir="ltr"><span class="codeinlineitalic">n</span></code> <code dir="ltr">ROWS</code> clause (where <code dir="ltr"><span class="codeinlineitalic">n</span></code> <code dir="ltr">&gt;= 0</code>), the cache group could be in an inconsistent state since some unloaded rows are already committed. Therefore, some cache instances may be partially unloaded. If this occurs, unload the cache group again.</p>
</li>
<li>
<p>Use the <code dir="ltr">WITH ID</code> clause to specify binding parameters.</p>
</li>
<li>
<p>The <code dir="ltr">UNLOAD</code> <code dir="ltr">CACHE</code> <code dir="ltr">GROUP</code> operation is executed in its own transaction.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1786"></a>Restrictions</p>
<ul>
<li>
<p>Do not reference child tables in the <code dir="ltr">WHERE</code> clause.</p>
</li>
<li>
<p>Do not use the <code dir="ltr">WITH ID</code> clause on read-only cache groups or user managed cache groups with the autorefresh attribute unless the cache group is a dynamic cache group.</p>
</li>
<li>
<p>Do not use the <code dir="ltr">WITH ID</code> clause with the <code dir="ltr">COMMIT EVERY</code> <code dir="ltr"><span class="codeinlineitalic">n</span></code> <code dir="ltr">ROWS</code> clause.</p>
</li>
<li>
<p>Do not use the <code dir="ltr">COMMIT</code> <code dir="ltr">EVERY</code> <code dir="ltr"><span class="codeinlineitalic">n</span></code> <code dir="ltr">ROWS</code> clause with global queries. If you set the <code dir="ltr">GlobalProcessing</code> optimizer flag, and issue the unload operation with the <code dir="ltr">COMMIT</code> <code dir="ltr">EVERY</code> <code dir="ltr"><span class="codeinlineitalic">n</span></code> <code dir="ltr">ROWS</code> clause, TimesTen throws an error. However, if you set the <code dir="ltr">GlobalProcessing</code> optimizer flag and issue the unload operation without the <code dir="ltr">COMMIT</code> <code dir="ltr">EVERY</code> <code dir="ltr"><span class="codeinlineitalic">n</span></code> <code dir="ltr">ROWS</code> clause, the unload operation is propagated among grid members.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1787"></a>Examples</p>
<p>Use the <code dir="ltr">UNLOAD</code> <code dir="ltr">CACHE</code> <code dir="ltr">GROUP</code>... <code dir="ltr">COMMIT</code> <code dir="ltr">EVERY</code> <code dir="ltr"><span class="codeinlineitalic">n</span></code> <code dir="ltr">ROWS</code> to unload data from cached tables. The cache agent unloads the data because the <code dir="ltr">COMMIT</code> <code dir="ltr">EVERY</code> <code dir="ltr"><span class="codeinlineitalic">n</span></code> <code dir="ltr">ROWS</code> clause is used.</p>
<pre dir="ltr">Command&gt; UNLOAD CACHE GROUP testcache WHERE sampleuser.orders.order_id &gt; 100
       &gt; COMMIT EVERY 100 ROWS;
2 cache instances affected.
</pre>
<p><code dir="ltr">CREATE</code> and <code dir="ltr">UNLOAD</code> a cache group. The application performs the unload operation because the <code dir="ltr">COMMIT</code> <code dir="ltr">EVERY</code> <code dir="ltr"><span class="codeinlineitalic">n</span></code> <code dir="ltr">ROWS</code> clause is not used.</p>
<pre dir="ltr">CREATE CACHE GROUP recreation.cache
    FROM recreation.clubs (
        clubname CHAR(15) NOT NULL,
        clubphone SMALLINT,
        activity CHAR(18),
        PRIMARY KEY(clubname))
    WHERE (recreation.clubs.activity IS NOT NULL);
UNLOAD CACHE GROUP recreation.cache;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1788"></a>See also</p>
<br/>
<code dir="ltr"><a href="#i1055226">ALTER CACHE GROUP</a></code><br/>
<code dir="ltr"><a href="#i1228554">CREATE CACHE GROUP</a></code><br/>
<code dir="ltr"><a href="#i993027">DROP CACHE GROUP</a></code><br/>
<code dir="ltr"><a href="#BABEAGCC">FLUSH CACHE GROUP</a></code><br/>
<code dir="ltr"><a href="#i993508">LOAD CACHE GROUP</a></code></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i994046"></a>
<div id="TTSQL336" class="refsect1">
<h2 class="refsect1"><a id="sthref1789"></a><a id="sthref1790"></a><a id="sthref1791"></a>UPDATE</h2>
<p>The <code dir="ltr">UPDATE</code> statement updates the values of one or more columns in all rows of a table or in rows that satisfy a search condition.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1792"></a>Required privilege</p>
<p>No privilege is required for the table owner.</p>
<p><code dir="ltr">UPDATE</code> for another user&#39;s table.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1793"></a>SQL syntax</p>
<pre dir="ltr">UPDATE [<span class="italic">hint</span>] [FIRST <span class="italic">NumRows</span>] 
{[<span class="italic">Owner</span>.]<span class="italic">TableName</span> [<span class="italic">CorrelationName</span>]}
SET {<span class="italic">ColumnName</span> =
{<span class="italic">Expression</span><span class="italic">1</span> | NULL | DEFAULT}} [,...]
[ WHERE <span class="italic">SearchCondition</span> ]
RETURNING|RETURN <span class="italic">Expression2</span>[,...] INTO <span class="italic">DataItem</span>[,...]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1794"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for UPDATE." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t81">Parameter</th>
<th class="cellalignment6331" id="r1c2-t81">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t81" headers="r1c1-t81"><code dir="ltr"><span class="codeinlineitalic">hint</span></code></td>
<td class="cellalignment6332" headers="r2c1-t81 r1c2-t81">Specifies a statement level optimizer hint for the <code dir="ltr">UPDATE</code> statement. For more information on hints, see <a href="#BABJFIBC">&#34;Statement level optimizer hints&#34;</a>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t81" headers="r1c1-t81"><code dir="ltr">FIRST</code> <code dir="ltr"><span class="codeinlineitalic">NumRows</span></code></td>
<td class="cellalignment6332" headers="r3c1-t81 r1c2-t81">Specifies the number of rows to update. <code dir="ltr">FIRST</code> <code dir="ltr"><span class="codeinlineitalic">NumRows</span></code> is not supported in subquery statements. <code dir="ltr"><span class="codeinlineitalic">NumRows</span></code> must be either a positive <code dir="ltr">INTEGER</code> value or a dynamic parameter placeholder. The syntax for a dynamic parameter placeholder is either <code dir="ltr">?</code> or :<code dir="ltr"><span class="codeinlineitalic">DynamicParameter</span></code>. The value of the dynamic parameter is supplied when the statement is executed.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t81" headers="r1c1-t81"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">TableName</span></code> <code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">CorrelationName</span></code><code dir="ltr">]</code></td>
<td class="cellalignment6332" headers="r4c1-t81 r1c2-t81"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">TableName</span></code> identifies the table to be updated.
<p><code dir="ltr"><span class="codeinlineitalic">CorrelationName</span></code> specifies an alias for the table and must conform to the syntax rules for a basic name according to <a href="names.htm#i987960">&#34;Basic names&#34;</a>. When accessing columns of that table elsewhere in the <code dir="ltr">UPDATE</code> statement, use the correlation name instead of the actual table name. The scope of the correlation name is the SQL statement in which it is used.</p>
<p>All correlation names within one statement must be unique.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t81" headers="r1c1-t81"><code dir="ltr">SET</code> <code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code></td>
<td class="cellalignment6332" headers="r5c1-t81 r1c2-t81"><code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code> specifies a column to be updated. You can update several columns of the same table with a single <code dir="ltr">UPDATE</code> statement. Primary key columns can be included in the list of columns to be updated as long as the values of the primary key columns are not changed.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t81" headers="r1c1-t81"><code dir="ltr"><span class="codeinlineitalic"><a id="sthref1795"></a>Expression</span></code><code dir="ltr"><span class="codeinlineitalic">1</span></code></td>
<td class="cellalignment6332" headers="r6c1-t81 r1c2-t81">Any expression that does not contain an aggregate function. The expression is evaluated for each row qualifying for the update operation. The data type of the expression must be compatible with the data type of the updated column. <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code> can specify a column or sequence <code dir="ltr">CURRVAL</code> or <code dir="ltr">NEXTVAL</code> reference when updating values. See <a href="#BABEFIDB">&#34;Incrementing SEQUENCE values with CURRVAL and NEXTVAL&#34;</a> for more details.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r7c1-t81" headers="r1c1-t81"><a id="sthref1796"></a><code dir="ltr">NULL</code></td>
<td class="cellalignment6332" headers="r7c1-t81 r1c2-t81">Puts a <code dir="ltr">NULL</code> value in the specified column of each row satisfying the <code dir="ltr">WHERE</code> clause. The column must allow <code dir="ltr">NULL</code> values.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r8c1-t81" headers="r1c1-t81"><code dir="ltr">DEFAULT</code></td>
<td class="cellalignment6332" headers="r8c1-t81 r1c2-t81">Specifies that the column should be updated with the default value.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r9c1-t81" headers="r1c1-t81"><code dir="ltr">WHERE</code> <code dir="ltr"><span class="codeinlineitalic">SearchCondition</span></code></td>
<td class="cellalignment6332" headers="r9c1-t81 r1c2-t81">The search condition can contain a subquery. All rows for which the search condition is true are updated as specified in the <code dir="ltr">SET</code> clause. Rows that do not satisfy the search condition are not affected. If no rows satisfy the search condition, the table is not changed.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r10c1-t81" headers="r1c1-t81"><code dir="ltr"><span class="codeinlineitalic">Expression2</span></code></td>
<td class="cellalignment6332" headers="r10c1-t81 r1c2-t81">Valid expression syntax. See <a href="express.htm#i996218">Chapter 3, &#34;Expressions&#34;</a>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r11c1-t81" headers="r1c1-t81"><code dir="ltr"><span class="codeinlineitalic">DataItem</span></code></td>
<td class="cellalignment6332" headers="r11c1-t81 r1c2-t81">Host variable or PL/SQL variable that stores the retrieved <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code> value.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1797"></a>Description</p>
<ul>
<li>
<p>I<a id="sthref1798"></a><a id="sthref1799"></a>f the <code dir="ltr">WHERE</code> clause is omitted, all rows of the table are updated as specified by the <code dir="ltr">SET</code> clause.</p>
</li>
<li>
<p>TimesTen generates a warning when a character or binary string is truncated during an <code dir="ltr">UPDATE</code> operation.</p>
</li>
<li>
<p>A table on which a unique constraint is defined cannot be updated to contain duplicate rows.</p>
</li>
<li>
<p>The <code dir="ltr">UPDATE</code> operation fails if it violates any foreign key constraint. See <a href="#i1211666">&#34;CREATE TABLE&#34;</a> for a description of foreign key constraints.</p>
</li>
<li>
<p>Restrictions on the <code dir="ltr">RETURNING</code> clause:</p>
<ul>
<li>
<p>Each <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code> must be a simple expression. Aggregate functions are not supported.</p>
</li>
<li>
<p>You cannot return a sequence number into an <code dir="ltr">OUT</code> parameter.</p>
</li>
<li>
<p><code dir="ltr">ROWNUM</code> and subqueries cannot be used in the <code dir="ltr">RETURNING</code> clause.</p>
</li>
<li>
<p>Parameters in the <code dir="ltr">RETURNING</code> clause cannot be duplicated anywhere in the <code dir="ltr">UPDATE</code> statement.</p>
</li>
<li>
<p>Using the <code dir="ltr">RETURNING</code> clause to return multiple rows requires PL/SQL <code dir="ltr">BULK COLLECT</code> functionality. See <a class="olink TTPLS145" href="../TTPLS/overview.htm#TTPLS145">&#34;FORALL and BULK COLLECT operations&#34;</a> in <span class="italic">Oracle TimesTen In-Memory Database PL/SQL Developer&#39;s Guide</span>.</p>
</li>
<li>
<p>In PL/SQL, you cannot use a <code dir="ltr">RETURNING</code> clause with a <code dir="ltr">WHERE CURRENT</code> operation.</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1800"></a>Examples</p>
<p>Use the <code dir="ltr">UPDATE</code> statement to update <code dir="ltr"><span class="codeinlineitalic">employees</span></code> with <code dir="ltr"><span class="codeinlineitalic">department_id</span></code> = 110. For <code dir="ltr"><span class="codeinlineitalic">employees</span></code> with <code dir="ltr"><span class="codeinlineitalic">department_id</span></code> = 110, update the <code dir="ltr"><span class="codeinlineitalic">manager_id</span></code> to the <code dir="ltr"><span class="codeinlineitalic">manager_id</span></code> of <code dir="ltr"><span class="codeinlineitalic">employees</span></code> with <code dir="ltr"><span class="codeinlineitalic">job_id</span></code> = &#39;<code dir="ltr">FI_ACCOUNT</code>&#39;. Use the <code dir="ltr">DISTINCT</code> qualifier in the subquery of the <code dir="ltr">SET</code> clause.</p>
<p>First find the <code dir="ltr"><span class="codeinlineitalic">manager_id</span></code> of <code dir="ltr"><span class="codeinlineitalic">employees</span></code> with <code dir="ltr"><span class="codeinlineitalic">job_id</span></code> = &#39;<code dir="ltr">FI_ACCOUNT</code>.&#39;</p>
<pre dir="ltr">Command&gt; SELECT manager_id FROM employees where job_id = &#39;FI_ACCOUNT&#39;;
&lt; 108 &gt;
&lt; 108 &gt;
&lt; 108 &gt;
&lt; 108 &gt;
&lt; 108 &gt;
5 rows found.
</pre>
<p>Next find the <code dir="ltr"><span class="codeinlineitalic">manager_id</span></code> of <code dir="ltr"><span class="codeinlineitalic">employees</span></code> with <code dir="ltr"><span class="codeinlineitalic">department_id</span></code> = 110.</p>
<pre dir="ltr">Command&gt; SELECT manager_id FROM employees WHERE department_id = 110;
&lt; 101 &gt;
&lt; 205 &gt;
2 rows found.
</pre>
<p>Now update the <code dir="ltr"><span class="codeinlineitalic">manager_id</span></code> of <code dir="ltr"><span class="codeinlineitalic">employees</span></code> with <code dir="ltr"><span class="codeinlineitalic">department_id</span></code> = 110. Use <code dir="ltr">SELECT</code> <code dir="ltr">DISTINCT</code> in the subquery of the <code dir="ltr">SET</code> clause. After the <code dir="ltr">UPDATE</code>, verify the <code dir="ltr"><span class="codeinlineitalic">manager_id</span></code> for <code dir="ltr"><span class="codeinlineitalic">employees</span></code> with <code dir="ltr"><span class="codeinlineitalic">department_id</span></code> = 110 was updated.</p>
<pre dir="ltr">Command&gt; UPDATE employees SET manager_id =
       &gt;   (SELECT DISTINCT employees.manager_id
       &gt;    FROM employees
       &gt;    WHERE employees.job_id = &#39;FI_ACCOUNT&#39;)
       &gt; WHERE employees.department_id = 110;
2 rows updated.

Command&gt; SELECT manager_id FROM employees WHERE department_id = 110;
&lt; 108 &gt;
&lt; 108 &gt;
2 rows found.
</pre>
<p>Use subqueries in the <code dir="ltr">SET</code> clause of the <code dir="ltr">UPDATE</code> statement. Update <code dir="ltr"><span class="codeinlineitalic">employees</span></code> with <code dir="ltr"><span class="codeinlineitalic">location_id</span></code> = 1700 or <code dir="ltr"><span class="codeinlineitalic">location_id</span></code> = 2400. Set <code dir="ltr"><span class="codeinlineitalic">department_id</span></code> for these employees to the <code dir="ltr"><span class="codeinlineitalic">department_id</span></code> of <code dir="ltr"><span class="codeinlineitalic">location_id</span></code> = 2500. (This is <code dir="ltr"><span class="codeinlineitalic">department_id</span></code> 80). Set salary for these employees to the maximum salary of their department.</p>
<p>First query the first 5 employees to check their department_id and salary.</p>
<pre dir="ltr">Command&gt; SELECT FIRST 5 employee_id, department_id, salary
       &gt; FROM employees
       &gt; ORDER BY employee_id, department_id, salary;
&lt; 100, 90, 24000 &gt;
&lt; 101, 90, 17000 &gt;
&lt; 102, 90, 17000 &gt;
&lt; 103, 60, 9000 &gt;
&lt; 104, 60, 6000 &gt;
5 rows found.
</pre>
<p>Now use the <code dir="ltr">UPDATE</code> statement to update employees.</p>
<pre dir="ltr">Command&gt; UPDATE employees e1
       &gt; SET department_id =
       &gt;      (SELECT department_id FROM departments
       &gt;       WHERE location_id = 2500),
       &gt;     salary =
       &gt;      (SELECT MAX(salary) FROM employees e2
       &gt;       WHERE e1.department_id = e2.department_id)
       &gt; WHERE department_id IN
       &gt;   (SELECT department_id FROM departments
       &gt;    WHERE location_id = 2400 OR location_id = 1700);
19 rows updated.
</pre>
<p>Query the first five employees again to check that employees with the original <code dir="ltr"><span class="codeinlineitalic">department_id</span></code> of 90 have been updated. The <code dir="ltr"><span class="codeinlineitalic">department_id</span></code> is now 80 and the salary is 24000.</p>
<pre dir="ltr">Command&gt; SELECT FIRST 5 employee_id, department_id, salary
       &gt; FROM employees
       &gt; ORDER BY employee_id, department_id, salary;
&lt; 100, 80, 24000 &gt;
&lt; 101, 80, 24000 &gt;
&lt; 102, 80, 24000 &gt;
&lt; 103, 60, 9000 &gt;
&lt; 104, 60, 6000 &gt;
5 rows found.
</pre>
<p>The following example increases the price of parts costing more than $500 by 25 percent.</p>
<pre dir="ltr">UPDATE purchasing.parts
SET salesprice = salesprice * 1.25
WHERE salesprice &gt; 500.00;
</pre>
<p>This next example updates the column with the <code dir="ltr">NEXTVAL</code> value from sequence <code dir="ltr">seq</code>.</p>
<pre dir="ltr">UPDATE student SET studentno = seq.NEXTVAL WHERE name = &#39;Sally&#39;;
</pre>
<p>The following query updates the status of all the customers who have at least one unshipped order.</p>
<pre dir="ltr">UPDATE customers SET customers.status = &#39;unshipped&#39;
WHERE customers.id = ANY
    (SELECT orders.custid FROM orders
        WHERE orders.status = &#39;unshipped&#39;);
</pre>
<p>The following statement updates all the duplicate orders, assuming <code dir="ltr">id</code> is not a primary key.</p>
<pre dir="ltr">UPDATE orders a set orders.status = &#39;shipped&#39;
    WHERE EXISTS (SELECT 1 FROM orders b
        WHERE a.id = b.id AND a.rowid &lt; b.rowid);
</pre>
<p>This next example updates <code dir="ltr">job_id</code>, <code dir="ltr">salary</code> and <code dir="ltr">department_id</code> for an employee whose last name is<code dir="ltr">&#39;Jones&#39;</code> in the <code dir="ltr">employees</code> table. The values of <code dir="ltr">salary</code>, <code dir="ltr">last_name</code> and <code dir="ltr">department_id</code> are returned into variables.</p>
<pre dir="ltr">Command&gt; VARIABLE bnd1 NUMBER(8,2);
Command&gt; VARIABLE bnd2 VARCHAR2(25) INLINE NOT NULL;
Command&gt; VARIABLE bnd3 NUMBER(4);
Command&gt; UPDATE employees SET job_id=&#39;SA_MAN&#39;, salary=salary+1000,
       &gt; department_id=140 WHERE last_name=&#39;Jones&#39;
       &gt; RETURNING salary*0.25, last_name, department_id
       &gt; INTO :bnd1, :bnd2, :bnd3;
1 row updated.
Command&gt; PRINT bnd1 bnd2 bnd3;
BND1                 : 950
BND2                 : Jones
BND3                 : 140
</pre></div>
<!-- class="refsubsect" -->
<div id="TTSQL337" class="refsect2"><a id="sthref1801"></a>
<h3 class="refsect2">Join update</h3>
<p>TimesTen supports <span class="italic">join update</span> statements. A join update can be used to update one or more columns of a table using the result of a subquery.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1802"></a>Syntax</p>
<pre dir="ltr">UPDATE [<span class="italic">Owner</span>.]<span class="italic">TableName</span>
SET <span class="italic">ColumnName</span>=<span class="italic">Subquery</span>
 [WHERE <span class="italic">SearchCondition</span>]
</pre>
<p>Or:</p>
<pre dir="ltr">UPDATE [<span class="italic">Owner</span>.]<span class="italic">TableName</span>
SET (<span class="italic">ColumnName</span>[,...])=<span class="italic">Subquery</span>
 [WHERE <span class="italic">SearchCondition</span>]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1803"></a>Parameters</p>
<p>A join update statement has the following parameters:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for UPDATE." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t82">Parameter</th>
<th class="cellalignment6331" id="r1c2-t82">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t82" headers="r1c1-t82"><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">Owner</span></code><code dir="ltr">.]</code><code dir="ltr"><span class="codeinlineitalic">TableName</span></code></td>
<td class="cellalignment6332" headers="r2c1-t82 r1c2-t82">Identifies the table to be updated.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t82" headers="r1c1-t82"><code dir="ltr">SET (</code><code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code><code dir="ltr">[,...])=</code> <code dir="ltr"><span class="codeinlineitalic">Subquery</span></code></td>
<td class="cellalignment6332" headers="r3c1-t82 r1c2-t82">Specifies the column to be updated. You can update several columns of the same table with a single <code dir="ltr">UPDATE</code> statement. The <code dir="ltr">SET</code> clause can contain only one subquery, although this subquery can be nested.
<p>The number of values in the select list of the subquery must be the same as the number of columns specified in the <code dir="ltr">SET</code> clause. An error is returned if the subquery returns more than one row for any updated row.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t82" headers="r1c1-t82"><code dir="ltr">WHERE</code> <code dir="ltr"><span class="codeinlineitalic">SearchCondition</span></code></td>
<td class="cellalignment6332" headers="r4c1-t82 r1c2-t82">The search condition can contain a subquery. All rows for which the search condition is true are updated as specified in the <code dir="ltr">SET</code> clause. Rows that do not satisfy the search condition are not affected. If no rows satisfy the search condition, the table is not changed.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1804"></a>Description</p>
<p>The subquery in the <code dir="ltr">SET</code> clause of a join update does not reduce the number of rows from the target table that are to be updated. The reduction must be specified using the <code dir="ltr">WHERE</code> clause. Thus if a row from the target table qualifies the <code dir="ltr">WHERE</code> clause but the subquery returns no rows for this row, this row is updated with a <code dir="ltr">NULL</code> value in the updated column.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1805"></a>Examples</p>
<p>In this example, if a row from <code dir="ltr">t1</code> has no match in <code dir="ltr">t2</code>, then its <code dir="ltr">x1</code> value in the first <code dir="ltr">SELECT</code> and its <code dir="ltr">x1</code> and <code dir="ltr">y1</code> values in the second <code dir="ltr">SELECT</code> are set to <code dir="ltr">NULL</code>.</p>
<pre dir="ltr">UPDATE t1 SET x1=(SELECT x2 FROM t2 WHERE id1=id2);
UPDATE t1 SET (x1,y1)=(SELECT x2,y2 FROM t2 WHERE id1=id2);
</pre>
<p>In order to restrict the <code dir="ltr">UPDATE</code> statement to update only rows from <code dir="ltr">t1</code> that have a match in <code dir="ltr">t2</code>, a <code dir="ltr">WHERE</code> clause with a subquery has to be provided as follows.</p>
<pre dir="ltr">UPDATE t1 SET x1=(SELECT x2 FROM t2 WHERE id1=id2) 
  WHERE id1 IN (SELECT id2 FROM t2);
UPDATE t1 SET (x1,y1)=(SELECT x2,y2 FROM t2 WHERE id1=id2) 
  WHERE id1 IN (SELECT id2 FROM t2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1806"></a>See also</p>
<p><code dir="ltr"><a href="#i1049447">SELECT</a></code></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment6323">
<tr>
<td class="cellalignment6332">
<table class="cellalignment6328">
<tr>
<td class="cellalignment6327"><a href="search.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment6327"><a href="privileges.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2011, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment6334">
<table class="cellalignment6326">
<tr>
<td class="cellalignment6327"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment6327"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment6327"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment6327"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment6327"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment6327"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>