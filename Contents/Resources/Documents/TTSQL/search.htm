<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"/>
<meta charset="utf-8"/>
<a class="dashingAutolink" name="autolink-114072"></a><a class="dashAnchor" name="//apple_ref/cpp/Package/Search%20Conditions"></a><title>Search Conditions</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1040"/>
<meta name="dcterms.created" content="2015-03-12T19:51:47Z"/>
<meta name="robots" content="all"/>
<meta name="dcterms.title" content="TimesTen In-Memory Database SQL Reference"/>
<meta name="dcterms.identifier" content="E21642-12"/>
<meta name="dcterms.isVersionOf" content="TTSQL"/>
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2011, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved."/>
<link rel="Start" href="../index.htm" title="Home" type="text/html"/>
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html"/>

<script type="application/javascript" src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html"/>
<link rel="Index" href="index.htm" title="Index" type="text/html"/>
<link rel="Prev" href="function.htm" title="Previous" type="text/html"/>
<link rel="Next" href="state.htm" title="Next" type="text/html"/>
<link rel="alternate" href="E21642-12.pdf" title="PDF version" type="application/pdf"/>
<link rel="schema.dcterms" href="http://purl.org/dc/terms/"/>
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/header.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/footer.css"/>
<link rel="stylesheet" type="text/css" href="../dcommon/css/fonts.css"/>
<link rel="stylesheet" href="../dcommon/css/foundation.css"/>
<link rel="stylesheet" href="../dcommon/css/codemirror.css"/>
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css"/>
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css"/>
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="/s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet" href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7" type="text/css" media="screen"/>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">9/13</span> <!-- End Header -->
<div id="TTSQL262" class="chapter"><a id="i994763"></a>
<h1 class="chapter"><span class="secnum">5</span> Search Conditions</h1>
<p>A search condition specifies criteria for choosing rows to select, update, or delete. Search conditions are parameters that can exist in clauses and expressions of any DML statements, such as <code dir="ltr"><a href="state.htm#g1513908">INSERT...SELECT</a></code> and <code dir="ltr"><a href="state.htm#i994046">UPDATE</a></code>, and in some DDL statements, such as <code dir="ltr"><a href="state.htm#i992961">CREATE VIEW</a></code>.</p>
<div class="refentry"><a id="i989592"></a>
<div id="TTSQL263" class="refsect1">
<h2 class="refsect1">Search <a id="sthref910"></a>condition general syntax</h2>
<p>A search condition is a single predicate or several predicates connected by the logical operators <code dir="ltr">AND</code> or <code dir="ltr">OR</code>. A predicate is an operation on expressions that evaluates to <code dir="ltr">TRUE</code>, <code dir="ltr">FALSE</code>, or <code dir="ltr">UNKNOWN</code>. If a predicate evaluates to <code dir="ltr">TRUE</code> for a row, the row qualifies for further processing. If the predicate evaluates to <code dir="ltr">FALSE</code> or <code dir="ltr">NULL</code> for a row, the row is not available for operations.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref911"></a>SQL syntax</p>
<pre dir="ltr">[NOT] 
{<span class="codeinlineitalic">BetweenPredicate</span> | <span class="codeinlineitalic">ComparisonPredicate</span> | <span class="codeinlineitalic">InPredicate</span> |
    <span class="codeinlineitalic">LikePredicate </span>| <span class="codeinlineitalic">NullPredicate</span> | <span class="codeinlineitalic">InfinitePredicate</span> | <span class="codeinlineitalic">NaNPredicate</span> |
<span class="codeinlineitalic">QuantifiedPredicate</span> |(<span class="codeinlineitalic">SearchCondition</span>)} 
[{AND | OR} [NOT] 
{<span class="codeinlineitalic">BetweenPredicate</span> | <span class="codeinlineitalic">ComparisonPredicate</span> |<span class="codeinlineitalic"> InPredicate</span> |
    <span class="codeinlineitalic">LikePredicate</span> |<span class="codeinlineitalic"> NullPredicate</span> | <span class="codeinlineitalic">QuantifiedPredicate</span> | (<span class="codeinlineitalic">SearchCondition</span>)}
] [...]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref912"></a><a id="sthref913"></a><a id="sthref914"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Component descriptions" summary="This table contains descriptions of the components of a search condition." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t2">Component</th>
<th class="cellalignment6331" id="r1c2-t2">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t2" headers="r1c1-t2"><code dir="ltr">NOT</code>, <code dir="ltr">AND</code>, <code dir="ltr">OR</code><a id="sthref915"></a><a id="sthref916"></a></td>
<td class="cellalignment6332" headers="r2c1-t2 r1c2-t2">Logical operators with the following functions:
<ul>
<li>
<p><code dir="ltr">NOT</code> negates the value of the predicate that follows it.</p>
</li>
<li>
<p><code dir="ltr">AND</code> evaluates to <code dir="ltr">TRUE</code> if both the predicates it joins evaluate to <code dir="ltr">TRUE</code>.</p>
</li>
<li>
<p><code dir="ltr">OR</code> evaluates to <code dir="ltr">TRUE</code> if either predicate it joins evaluates to <code dir="ltr">TRUE</code>, and to <code dir="ltr">FALSE</code> if both predicates evaluates to <code dir="ltr">FALSE</code>.</p>
</li>
<li>
<p>See <a href="#i989663">&#34;Description&#34;</a> for a description of how these operators work when predicates evaluate to <code dir="ltr">NULL</code>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t2" headers="r1c1-t2"><code dir="ltr"><span class="codeinlineitalic">BetweenPredicate</span></code><a id="sthref917"></a></td>
<td class="cellalignment6332" headers="r3c1-t2 r1c2-t2">Determines whether an expression is within a certain range of values. For example: <code dir="ltr">A BETWEEN B AND C</code> is equivalent to <code dir="ltr">A &gt;= B AND A&lt;= C</code>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t2" headers="r1c1-t2"><code dir="ltr"><span class="codeinlineitalic">ComparisonPredicate</span></code><a id="sthref918"></a></td>
<td class="cellalignment6332" headers="r4c1-t2 r1c2-t2">Compares two expressions or list of two expressions using one of the operators <code dir="ltr">&lt;</code>, <code dir="ltr">&lt;=</code>, <code dir="ltr">&gt;</code>, <code dir="ltr">&gt;=</code>, <code dir="ltr">=</code>, <code dir="ltr">&lt;&gt;</code>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t2" headers="r1c1-t2"><a id="sthref919"></a><code dir="ltr"><span class="codeinlineitalic">InPredicate</span></code></td>
<td class="cellalignment6332" headers="r5c1-t2 r1c2-t2">Determines whether an expression or list of expressions matches an element within a specified set.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t2" headers="r1c1-t2"><a id="sthref920"></a><code dir="ltr"><span class="codeinlineitalic">ExistsPredicate</span></code></td>
<td class="cellalignment6332" headers="r6c1-t2 r1c2-t2">Determines whether a subquery returns any row.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r7c1-t2" headers="r1c1-t2"><code dir="ltr"><span class="codeinlineitalic">LikePredicate</span></code><a id="sthref921"></a></td>
<td class="cellalignment6332" headers="r7c1-t2 r1c2-t2">Determines whether an expression contains a particular character string pattern.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r8c1-t2" headers="r1c1-t2"><code dir="ltr"><span class="codeinlineitalic">NullPredicate</span></code><a id="sthref922"></a></td>
<td class="cellalignment6332" headers="r8c1-t2 r1c2-t2">Determines whether a value is <code dir="ltr">NULL</code>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r9c1-t2" headers="r1c1-t2"><code dir="ltr"><span class="codeinlineitalic">InfinitePredicate</span></code></td>
<td class="cellalignment6332" headers="r9c1-t2 r1c2-t2">Determines whether an expression is infinite (positive or negative infinity).</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r10c1-t2" headers="r1c1-t2"><code dir="ltr"><span class="codeinlineitalic">NaNPredicate</span></code></td>
<td class="cellalignment6332" headers="r10c1-t2 r1c2-t2">Determines whether an expression is the undefined result of an operation (&#34;not a number&#34;).</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r11c1-t2" headers="r1c1-t2"><a id="sthref923"></a><code dir="ltr"><span class="codeinlineitalic">QuantifiedPredicate</span></code></td>
<td class="cellalignment6332" headers="r11c1-t2 r1c2-t2">Determines whether an expression or list of expressions bears a particular relationship to a specified set.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r12c1-t2" headers="r1c1-t2">(<code dir="ltr"><span class="codeinlineitalic">SearchCondition</span></code>)</td>
<td class="cellalignment6332" headers="r12c1-t2 r1c2-t2">One of the above predicates, enclosed in parentheses.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i989663"></a><a id="sthref924"></a><a id="sthref925"></a>Description</p>
<ul>
<li>
<p>Predicates in a search condition are evaluated as follows:</p>
<ul>
<li>
<p>Predicates in parentheses are evaluated first.</p>
</li>
<li>
<p><code dir="ltr">NOT</code> is applied to each predicate.</p>
</li>
<li>
<p><code dir="ltr">AND</code> is applied next, left to right.</p>
</li>
<li>
<p><code dir="ltr">OR</code> is applied last, left to right.</p>
</li>
</ul>
<p><a href="#i1005512">Figure 5-1</a> shows the values that result from logical operations. A question mark (<code dir="ltr">?</code>) represents the <code dir="ltr">NULL</code> value.</p>
</li>
</ul>
<div id="TTSQL264" class="figure">
<p class="titleinfigure"><a id="i1005512"></a>Figure 5-1 Values that result from logical operations<a id="sthref926"></a><a id="sthref927"></a></p>
<img width="363" height="85" src="./img/truthtable.gif" alt="Description of Figure 5-1 follows"/><br/>
<a id="sthref928" href="./img_text/truthtable.htm">Description of &#34;Figure 5-1 Values that result from logical operations&#34;</a><br/>
<br/></div>
<!-- class="figure" -->
<ul>
<li>
<p>When the search condition for a row evaluates to <code dir="ltr">NULL</code>, the row does not satisfy the search condition and the row is not operated on.</p>
</li>
<li>
<p>You can <a id="sthref929"></a><a id="sthref930"></a>compare only compatible data types.</p>
<ul>
<li>
<p><code dir="ltr">TT_TINYINT</code>, <code dir="ltr">TT_SMALLINT</code>, <code dir="ltr">TT_INTEGER</code>, <code dir="ltr">TT_BIGINT</code>, <code dir="ltr">NUMBER</code>, <code dir="ltr">BINARY_FLOAT</code> and <code dir="ltr">BINARY_DOUBLE</code> are compatible.</p>
</li>
<li>
<p><code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">BINARY</code>, and <code dir="ltr">VARBINARY</code> are compatible, regardless of length.</p>
</li>
<li>
<p><code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NCHAR</code>, <code dir="ltr">NVARCHAR2</code>, <code dir="ltr">TT_TIME</code>, <code dir="ltr">DATE</code> and <code dir="ltr">TIMESTAMP</code> are compatible.</p>
</li>
</ul>
</li>
<li>
<p>See <a href="express.htm#i996218">Chapter 3, &#34;Expressions&#34;</a> for information on value extensions during comparison operations.</p>
</li>
<li>
<p>See <a href="types.htm#i1029200">&#34;Numeric data types&#34;</a> for information about how TimesTen compares values of different but compatible types.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDJCGBA"></a>
<div id="TTSQL265" class="refsect1">
<h2 class="refsect1"><a id="sthref931"></a><a id="sthref932"></a><a id="sthref933"></a><a id="sthref934"></a>ALL / NOT IN predicate (subquery)</h2>
<p>The <code dir="ltr">ALL</code> or <code dir="ltr">NOT IN</code> predicate indicates that the operands on the left side of the comparison must compare in the same way with all of the values that the subquery returns. The <code dir="ltr">ALL</code> predicate evaluates to <code dir="ltr">TRUE</code> if the expression or list of expressions relates to all rows returned by the subquery as specified by the comparison operator. Similarly, the <code dir="ltr">NOT IN</code> predicate evaluates to <code dir="ltr">TRUE</code> if the expression or list of expressions does not equal the value returned by the subquery.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref935"></a>SQL syntax</p>
<pre dir="ltr"><span class="codeinlineitalic">RowValueConstructor</span> {<span class="codeinlineitalic">CompOp</span> ALL | NOT IN} (<span class="codeinlineitalic">Subquery</span>)
</pre>
<p>The syntax for <code dir="ltr"><span class="codeinlineitalic">RowValueConstructor</span></code>:</p>
<pre dir="ltr"><span class="codeinlineitalic">RowValueConstructorElement</span> | (<span class="codeinlineitalic">RowValueConstuctorList</span>) | <span class="codeinlineitalic">Subquery</span>
</pre>
<p>The syntax for <code dir="ltr"><span class="codeinlineitalic">RowValueConstructorList</span></code>:</p>
<pre dir="ltr"><span class="codeinlineitalic">RowValueConstructorElement</span> [{, <span class="codeinlineitalic">RowValueConstructorElement</span>} ... ]
</pre>
<p>The syntax for <code dir="ltr"><span class="codeinlineitalic">RowValueConstructorElement</span></code>:</p>
<pre dir="ltr"><span class="codeinlineitalic">Expression</span> | NULL
</pre>
<p>The syntax for <code dir="ltr"><span class="codeinlineitalic">CompOp</span></code>:</p>
<pre dir="ltr">{= | &lt;&gt; | &gt; | &gt;= | &lt; | &lt;= }
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref936"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Component descriptions" summary="This table contains descriptions of the components of an ALL/NOTIN predicate." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t3">Component</th>
<th class="cellalignment6331" id="r1c2-t3">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t3" headers="r1c1-t3"><a id="sthref937"></a><code dir="ltr"><span class="codeinlineitalic">Expression</span></code></td>
<td class="cellalignment6332" headers="r2c1-t3 r1c2-t3">The syntax of expressions is defined under <a href="express.htm#i1028917">&#34;Expression specification&#34;</a>. Both numeric and non-numeric expressions are allowed for <code dir="ltr">ALL</code> predicates, but both expression types must be compatible with each other.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t3" headers="r1c1-t3"><code dir="ltr">=</code></td>
<td class="cellalignment6332" headers="r3c1-t3 r1c2-t3">Is equal to.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t3" headers="r1c1-t3"><code dir="ltr">&lt;&gt;</code></td>
<td class="cellalignment6332" headers="r4c1-t3 r1c2-t3">Is not equal to.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t3" headers="r1c1-t3"><code dir="ltr">&gt;</code></td>
<td class="cellalignment6332" headers="r5c1-t3 r1c2-t3">Is greater than.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t3" headers="r1c1-t3"><code dir="ltr">&gt;=</code></td>
<td class="cellalignment6332" headers="r6c1-t3 r1c2-t3">Is greater than or equal to.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r7c1-t3" headers="r1c1-t3"><code dir="ltr">&lt;</code></td>
<td class="cellalignment6332" headers="r7c1-t3 r1c2-t3">Is less than.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r8c1-t3" headers="r1c1-t3"><code dir="ltr">&lt;=</code></td>
<td class="cellalignment6332" headers="r8c1-t3 r1c2-t3">Is less than or equal to.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r9c1-t3" headers="r1c1-t3"><code dir="ltr"><span class="codeinlineitalic">Subquery</span></code></td>
<td class="cellalignment6332" headers="r9c1-t3 r1c2-t3">The syntax of subqueries is defined under <a href="express.htm#i988350">&#34;Subqueries&#34;</a>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref938"></a>Description</p>
<ul>
<li>
<p>The <code dir="ltr">ALL</code> predicate, which returns zero or more rows, uses a <span class="italic">comparison operator</span> modified with the keyword <code dir="ltr">ALL</code>. See <a href="types.htm#i1029200">&#34;Numeric data types&#34;</a> for information about how TimesTen compares values of different but compatible types.</p>
</li>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">RowValueConstructorList</span></code> is specified only the operators <code dir="ltr">=</code> and <code dir="ltr">&lt;&gt;</code> are allowed.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref939"></a>Examples</p>
<p>Examples of <code dir="ltr">NOT IN</code> with subqueries:</p>
<pre dir="ltr">SELECT * FROM customers 
WHERE cid NOT IN
(SELECT cust_id FROM returns)
AND cid &gt; 5000;

SELECT * FROM customers 
WHERE cid NOT IN
(SELECT cust_id FROM returns)
AND cid NOT IN
(SELECT cust_id FROM complaints);

SELECT COUNT(*) From customers 
WHERE cid NOT IN
(SELECT cust_id FROM returns)
AND cid NOT IN
(SELECT cust_id FROM complaints);
</pre>
<p>Select all books that are not from <code dir="ltr">exclBookList</code> or if the price of the book is higher than $20.</p>
<pre dir="ltr">SELECT * FROM books 
 WHERE id NOT IN (SELECT id FROM exclBookList) OR books.price&gt;20;
</pre>
<p>The following query returns the <code dir="ltr">employee_id</code> and <code dir="ltr">job_id</code> from the job_history table. It illustrates use of expression list and subquery with the <code dir="ltr">NOT IN</code> predicate.</p>
<pre dir="ltr">Command&gt; SELECT employee_id, job_id FROM job_history 
       &gt; WHERE (employee_id, job_id)
       &gt; NOT IN (SELECT employee_id, job_id FROM employees);
&lt; 101, AC_ACCOUNT &gt;
&lt; 101, AC_MGR &gt;
&lt; 102, IT_PROG &gt;
&lt; 114, ST_CLERK &gt;
&lt; 122, ST_CLERK &gt;
&lt; 176, SA_MAN &gt;
&lt; 200, AC_ACCOUNT &gt;
&lt; 201, MK_REP &gt;
8 rows found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDEDFCH"></a>
<div id="TTSQL266" class="refsect1">
<h2 class="refsect1"><a id="sthref940"></a><a id="sthref941"></a><a id="sthref942"></a>ALL / NOT IN predicate (value list)</h2>
<p>The <code dir="ltr">ALL</code> / <code dir="ltr">NOT IN</code> quantified predicate compares an expression or list of expressions with a list of specified values. The <code dir="ltr">ALL</code> predicate evaluates to <code dir="ltr">TRUE</code> if all the values in the <code dir="ltr"><span class="codeinlineitalic">ValueList</span></code> relate to the expression or list of expressions as indicated by the comparison operator. Similarly, the <code dir="ltr">NOT IN</code> predicate evaluates to <code dir="ltr">TRUE</code> if the expression or list of expressions does not equal one of the values in the list.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref943"></a>SQL syntax</p>
<pre dir="ltr"><span class="codeinlineitalic">RowValueConstructor</span> {<span class="codeinlineitalic">CompOp</span> ALL | NOT IN} <span class="codeinlineitalic">ValueList</span>
</pre>
<p>The syntax for <code dir="ltr"><span class="codeinlineitalic">RowValueConstructor</span></code>:</p>
<pre dir="ltr"><span class="codeinlineitalic">RowValueConstructorElement</span> | (<span class="codeinlineitalic">RowValueConstructorList</span>) | 
</pre>
<p>The syntax for <code dir="ltr"><span class="codeinlineitalic">RowValueConstructorList</span></code>:</p>
<pre dir="ltr"><span class="codeinlineitalic">RowValueConstructorElement</span>[{, <span class="codeinlineitalic">RowValueConstructorElement</span>} ... ]
</pre>
<p>The syntax for <code dir="ltr"><span class="codeinlineitalic">RowValueConstructorElement</span></code>:</p>
<pre dir="ltr"><span class="codeinlineitalic">Expression</span> | NULL
</pre>
<p>The syntax for <code dir="ltr"><span class="codeinlineitalic">CompOp</span></code>:</p>
<pre dir="ltr">{= | &lt;&gt; | &gt; | &gt;= | &lt; | &lt;= }
</pre>
<p>The syntax for one element in the <code dir="ltr"><span class="codeinlineitalic">ValueList</span></code> (no parentheses necessary):</p>
<pre dir="ltr"><span class="codeinlineitalic">ConstantExpression</span>
</pre>
<p>The syntax for more than one element in the <code dir="ltr"><span class="codeinlineitalic">ValueList</span></code>:</p>
<pre dir="ltr">({<span class="codeinlineitalic">ConstantExpression</span>} [,...] )
</pre>
<p>The syntax for an empty <code dir="ltr"><span class="codeinlineitalic">ValueList</span></code>:</p>
<pre dir="ltr">( )
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref944"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Component descriptions" summary="This table contains descriptions of the components of an ALL/NOTIN predicate." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t4">Component</th>
<th class="cellalignment6331" id="r1c2-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t4" headers="r1c1-t4"><code dir="ltr"><span class="codeinlineitalic"><a id="sthref945"></a>Expression</span></code></td>
<td class="cellalignment6332" headers="r2c1-t4 r1c2-t4">Specifies a value to be obtained. The values in <code dir="ltr"><span class="codeinlineitalic">ValueList</span></code> must be compatible with the expression. For information on the syntax of expressions, see <a href="express.htm#i1028917">&#34;Expression specification&#34;</a>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t4" headers="r1c1-t4"><code dir="ltr"><span class="codeinlineitalic">ConstantExpression</span></code></td>
<td class="cellalignment6332" headers="r3c1-t4 r1c2-t4">Specifies a constant value or an expression that evaluates to a constant value (such as a number, character string, or date). This includes support for bound values (<code dir="ltr">?</code> or :<code dir="ltr"><span class="codeinlineitalic">DynamicParameter</span></code>), <code dir="ltr">NULL</code>, and calls to functions that return constant values.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t4" headers="r1c1-t4"><code dir="ltr">=</code></td>
<td class="cellalignment6332" headers="r4c1-t4 r1c2-t4">Is equal to.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t4" headers="r1c1-t4"><code dir="ltr">&lt;&gt;</code></td>
<td class="cellalignment6332" headers="r5c1-t4 r1c2-t4">Is not equal to.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t4" headers="r1c1-t4"><code dir="ltr">&gt;</code></td>
<td class="cellalignment6332" headers="r6c1-t4 r1c2-t4">Is greater than.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r7c1-t4" headers="r1c1-t4"><code dir="ltr">&gt;=</code></td>
<td class="cellalignment6332" headers="r7c1-t4 r1c2-t4">Is greater than or equal to.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r8c1-t4" headers="r1c1-t4"><code dir="ltr">&lt;</code></td>
<td class="cellalignment6332" headers="r8c1-t4 r1c2-t4">Is less than.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r9c1-t4" headers="r1c1-t4"><code dir="ltr">&lt;=</code></td>
<td class="cellalignment6332" headers="r9c1-t4 r1c2-t4">Is less than or equal to.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r10c1-t4" headers="r1c1-t4"><code dir="ltr">ALL</code></td>
<td class="cellalignment6332" headers="r10c1-t4 r1c2-t4">The predicate is <code dir="ltr">TRUE</code> if all the values in the <code dir="ltr"><span class="codeinlineitalic">ValueList</span></code> relate to the expression or list of expressions as indicated by the comparison operator.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r11c1-t4" headers="r1c1-t4"><code dir="ltr"><span class="codeinlineitalic">ValueList</span></code></td>
<td class="cellalignment6332" headers="r11c1-t4 r1c2-t4">A list of values that are compared against the <code dir="ltr"><span class="codeinlineitalic">RowValueConstructor</span></code> values.
<p>The <code dir="ltr"><span class="codeinlineitalic">ValueList</span></code> can be an empty list (sometimes generated by SQL generation tools) or consists of <code dir="ltr"><span class="codeinlineitalic">ConstantExpression</span></code> entries.</p>
<p>The <code dir="ltr"><span class="codeinlineitalic">ValueList</span></code> <span class="italic">cannot</span> include column references, sequences, subqueries, <code dir="ltr">ROWID</code> values, or <code dir="ltr">ROWNUM</code> values.</p>
<p>The <code dir="ltr"><span class="codeinlineitalic">ValueList</span></code> can be nested if <code dir="ltr"><span class="codeinlineitalic">RowValueConstructor</span></code> is a list. For example: <code dir="ltr">(x, y) not in ((1+1, 2), (abs(-1), 5+1))</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref946"></a>Description</p>
<ul>
<li>
<p>If <code dir="ltr">X</code> is the value of <code dir="ltr"><span class="codeinlineitalic">Expression</span></code>, and <code dir="ltr">(a,b, ..., z)</code> represents the elements in <code dir="ltr"><span class="codeinlineitalic">ValueList</span></code>, and <code dir="ltr">OP</code> is a comparison operator, then the following is true:</p>
<ul>
<li>
<p><code dir="ltr">X OP ALL (a,b,...,z)</code> is equivalent to <code dir="ltr">X OP a AND X OP b AND...AND X OP z</code>.</p>
</li>
</ul>
</li>
<li>
<p>If <code dir="ltr">X</code> is the value of <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> and <code dir="ltr">(a,b,..., z)</code> are the elements in a <code dir="ltr"><span class="codeinlineitalic">Value&shy;List</span></code>, then the following is true:</p>
<ul>
<li>
<p><code dir="ltr">X NOT IN (a,b,...,z)</code> is equivalent to <code dir="ltr">NOT (X IN (a,b,...,z))</code>.</p>
</li>
</ul>
</li>
<li>
<p>All character data types are compared in accordance with the current value of the <code dir="ltr">NLS_SORT</code> session parameter.</p>
</li>
<li>
<p>See <a href="types.htm#i1029200">&#34;Numeric data types&#34;</a> for information about how TimesTen compares values of different but compatible types.</p>
</li>
<li>
<p><code dir="ltr">NOT IN</code> or <code dir="ltr">NOT EXISTS</code> with <code dir="ltr">ALL</code> can be specified in an <code dir="ltr">OR</code> expression.</p>
</li>
<li>
<p><code dir="ltr">IN</code> and <code dir="ltr">EXISTS</code> with <code dir="ltr">ALL</code> can be specified in an <code dir="ltr">OR</code> expression.</p>
</li>
<li>
<p>When evaluating an empty <code dir="ltr"><span class="codeinlineitalic">ValueList</span></code>, the result of <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> <code dir="ltr">NOT IN</code> is true.</p>
</li>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">RowValueConstructorList</span></code> is specified only the operators <code dir="ltr">=</code> and <code dir="ltr">&lt;&gt;</code> are allowed.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref947"></a>Examples</p>
<p>To query an empty select list for a <code dir="ltr">NOT IN</code> condition:</p>
<pre dir="ltr">SELECT * FROM t1 WHERE x1 NOT IN ();
</pre>
<p>For <code dir="ltr"><span class="codeinlineitalic">ValueList</span></code> examples, see the Examples section in <a href="#CHDDGEDI">&#34;ANY / IN predicate (value list)&#34;</a>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i995268"></a>
<div id="TTSQL267" class="refsect1">
<h2 class="refsect1"><a id="sthref948"></a><a id="sthref949"></a><a id="sthref950"></a><a id="sthref951"></a>ANY / IN predicate (subquery)</h2>
<p>An <code dir="ltr">ANY</code> predicate compares two expressions using a comparison operator. The predicate evaluates to <code dir="ltr">TRUE</code> if the first expression relates to <span class="italic">any</span><span class="italic">row</span> returned by the subquery as specified by the comparison operator. Similarly, the <code dir="ltr">IN</code> predicate compares an expression or list of expressions with a table subquery. The <code dir="ltr">IN</code> predicate evaluates to <code dir="ltr">TRUE</code> if the expression or list of expressions is equal to a value returned by a subquery.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref952"></a>SQL syntax</p>
<pre dir="ltr"><span class="codeinlineitalic">RowValueConstructor</span> {<span class="codeinlineitalic">CompOp</span> ANY | IN} (<span class="codeinlineitalic">Subquery</span>)
</pre>
<p>The syntax for <code dir="ltr"><span class="codeinlineitalic">RowValueConstructor</span></code>:</p>
<pre dir="ltr"><span class="codeinlineitalic">RowValueConstructorElement</span> | (<span class="codeinlineitalic">RowValueConstructorList</span>) | <span class="codeinlineitalic">Subquery</span>
</pre>
<p>The syntax for <code dir="ltr"><span class="codeinlineitalic">RowValueConstructorList</span></code>:</p>
<pre dir="ltr"><span class="codeinlineitalic">RowValueConstructorElement</span>[{, <span class="codeinlineitalic">RowValueConstructorElement</span>} ... ]
</pre>
<p>The syntax for <code dir="ltr"><span class="codeinlineitalic">RowValueConstructorElement</span></code>:</p>
<pre dir="ltr"><span class="codeinlineitalic">Expression</span> | NULL
</pre>
<p>The syntax for <code dir="ltr"><span class="codeinlineitalic">CompOp</span></code>:</p>
<pre dir="ltr">{= | &lt;&gt; | &gt; | &gt;= | &lt; | &lt;= }
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref953"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Component descriptions" summary="This table contains descriptions of the components of an ANY/IN predicate." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t5">Component</th>
<th class="cellalignment6331" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t5" headers="r1c1-t5"><a id="sthref954"></a><code dir="ltr"><span class="codeinlineitalic">Expression</span></code></td>
<td class="cellalignment6332" headers="r2c1-t5 r1c2-t5">The syntax of expressions is defined under <a href="express.htm#i1028917">&#34;Expression specification&#34;</a>. Both numeric and non-numeric expressions are allowed for <code dir="ltr">ANY</code> predicates, but both expression types must be compatible with each other.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t5" headers="r1c1-t5"><code dir="ltr">=</code></td>
<td class="cellalignment6332" headers="r3c1-t5 r1c2-t5">Is equal to.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t5" headers="r1c1-t5"><code dir="ltr">&lt;&gt;</code></td>
<td class="cellalignment6332" headers="r4c1-t5 r1c2-t5">Is not equal to.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t5" headers="r1c1-t5"><code dir="ltr">&gt;</code></td>
<td class="cellalignment6332" headers="r5c1-t5 r1c2-t5">Is greater than.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t5" headers="r1c1-t5"><code dir="ltr">&gt;=</code></td>
<td class="cellalignment6332" headers="r6c1-t5 r1c2-t5">Is greater than or equal to.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r7c1-t5" headers="r1c1-t5"><code dir="ltr">&lt;</code></td>
<td class="cellalignment6332" headers="r7c1-t5 r1c2-t5">Is less than.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r8c1-t5" headers="r1c1-t5"><code dir="ltr">&lt;=</code></td>
<td class="cellalignment6332" headers="r8c1-t5 r1c2-t5">Is less than or equal to.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r9c1-t5" headers="r1c1-t5"><code dir="ltr"><span class="codeinlineitalic">Subquery</span></code></td>
<td class="cellalignment6332" headers="r9c1-t5 r1c2-t5">The syntax of subqueries is defined under <a href="express.htm#i988350">&#34;Subqueries&#34;</a>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref955"></a>Description</p>
<p>The <code dir="ltr">ANY</code> predicate, which returns zero or more rows, uses a <span class="italic">comparison operator</span> modified with the keyword <code dir="ltr">ANY</code>. See <a href="types.htm#i1029200">&#34;Numeric data types&#34;</a> for information about how TimesTen compares values of different but compatible types.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref956"></a>Examples</p>
<p>This example retrieves a list of customers having at least one unshipped order:</p>
<pre dir="ltr">SELECT customers.name FROM customers 
WHERE customers.id = ANY 
(SELECT orders.custid FROM orders 
WHERE orders.status = &#39;unshipped&#39;);
</pre>
<p>This is an example of an <code dir="ltr">IN</code> predicate with subquery. It <code dir="ltr">SELECT</code>s customers having at least one unshipped order:</p>
<pre dir="ltr">SELECT customers.name FROM customers 
WHERE customers.id IN 
(SELECT orders.custid FROM orders 
WHERE orders.status = &#39;unshipped&#39;);
</pre>
<p>This example uses an aggregate query that specifies a subquery with <code dir="ltr">IN</code> to find the maximum price of a book in the <code dir="ltr">exclBookList</code>:</p>
<pre dir="ltr">SELECT MAX(price) FROM books WHERE id IN (SELECT id FROM exclBookList);
</pre>
<p>This example illustrates the use of a list of expressions with the <code dir="ltr">IN</code> predicate and a subquery.</p>
<pre dir="ltr">SELECT * FROM t1 WHERE (x1,y1) IN (SELECT x2,y2 FROM t2);
</pre>
<p>This example illustrates the use of a list of expressions with the <code dir="ltr">ANY</code> predicate and a subquery.</p>
<pre dir="ltr">SELECT * FROM t1 WHERE (x1,y1) &lt; ANY (SELECT x2,y2 FROM t2);
</pre>
<p>The following example illustrates the use of a list of expressions with the <code dir="ltr">ANY</code> predicate.</p>
<pre dir="ltr">Command&gt; columnlabels on;
Command&gt; SELECT * FROM t1;
X1, Y1
&lt; 1, 2 &gt;
&lt; 3, 4 &gt;
2 rows found.
Command&gt; SELECT * FROM t2;
X2, Y2
&lt; 3, 4 &gt;
&lt; 1, 2 &gt;
2 rows found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDDGEDI"></a>
<div id="TTSQL268" class="refsect1">
<h2 class="refsect1"><a id="sthref957"></a><a id="sthref958"></a><a id="sthref959"></a>ANY / IN predicate (value list)</h2>
<p>The <code dir="ltr">ANY</code> / <code dir="ltr">IN</code> quantified predicate compares an expression or list of expressions with a list of specified values. The <code dir="ltr">ANY</code> predicate evaluates to <code dir="ltr">TRUE</code> if one or more of the values in the <code dir="ltr"><span class="codeinlineitalic">ValueList</span></code> relate to the expression or list of expressions as indicated by the comparison operator. Similarly, the <code dir="ltr">IN</code> predicate evaluates to <code dir="ltr">TRUE</code> if the expression or list of expressions is equal to one of the values in the list.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref960"></a>SQL syntax</p>
<pre dir="ltr"><span class="italic">RowValueConstructor</span> {<span class="italic">CompOp</span> {ANY | SOME} | IN} <span class="italic">ValueList</span>
</pre>
<p>The syntax for <code dir="ltr"><span class="codeinlineitalic">RowValueConstructor</span></code>:</p>
<pre dir="ltr"><span class="italic">RowValueConstructorElement</span> | (<span class="italic">RowValueConstructorList</span>) |
</pre>
<p>The syntax for <code dir="ltr"><span class="codeinlineitalic">RowValueConstructorList</span></code>:</p>
<pre dir="ltr"><span class="italic">RowValueConstructorElement</span>[{, <span class="italic">RowValueConstructorElement</span>} ... ]
</pre>
<p>The syntax for <code dir="ltr"><span class="codeinlineitalic">RowValueConstructorElement</span></code>:</p>
<pre dir="ltr"><span class="italic">Expression</span> | NULL
</pre>
<p>The syntax for <code dir="ltr"><span class="codeinlineitalic">CompOp</span></code>:</p>
<pre dir="ltr">{= | &lt;&gt; | &gt; | &gt;= | &lt; | &lt;= }
</pre>
<p>The syntax for one element in the <code dir="ltr"><span class="codeinlineitalic">ValueList</span></code> (no parentheses necessary):</p>
<pre dir="ltr"><span class="codeinlineitalic">ConstantExpression</span>
</pre>
<p>The syntax for more than one element in the <code dir="ltr"><span class="codeinlineitalic">ValueList</span></code>:</p>
<pre dir="ltr">({<span class="codeinlineitalic">ConstantExpression</span>} [,...] )
</pre>
<p>The syntax for an empty <code dir="ltr"><span class="codeinlineitalic">ValueList</span></code>:</p>
<pre dir="ltr">( )
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref961"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Component descriptions" summary="This table contains descriptions of the components of an ANY/IN predicate." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t6">Component</th>
<th class="cellalignment6331" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t6" headers="r1c1-t6"><code dir="ltr"><span class="codeinlineitalic"><a id="sthref962"></a>Expression</span></code></td>
<td class="cellalignment6332" headers="r2c1-t6 r1c2-t6">Specifies a value to be obtained. The values in <code dir="ltr"><span class="codeinlineitalic">ValueList</span></code> must be compatible with the expression. For information on the syntax of expressions, see <a href="express.htm#i1028917">&#34;Expression specification&#34;</a>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t6" headers="r1c1-t6"><code dir="ltr"><span class="codeinlineitalic">ConstantExpression</span></code></td>
<td class="cellalignment6332" headers="r3c1-t6 r1c2-t6">Specifies a constant value or an expression that evaluates to a constant value (such as a number, character string, or date). This includes support for bound values (<code dir="ltr">?</code> or :<code dir="ltr"><span class="codeinlineitalic">DynamicParameter</span></code>), <code dir="ltr">NULL</code>, and calls to functions that return constant values.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t6" headers="r1c1-t6"><code dir="ltr">=</code></td>
<td class="cellalignment6332" headers="r4c1-t6 r1c2-t6">Is equal to.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t6" headers="r1c1-t6"><code dir="ltr">&lt;&gt;</code></td>
<td class="cellalignment6332" headers="r5c1-t6 r1c2-t6">Is not equal to.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t6" headers="r1c1-t6"><code dir="ltr">&gt;</code></td>
<td class="cellalignment6332" headers="r6c1-t6 r1c2-t6">Is greater than.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r7c1-t6" headers="r1c1-t6"><code dir="ltr">&gt;=</code></td>
<td class="cellalignment6332" headers="r7c1-t6 r1c2-t6">Is greater than or equal to.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r8c1-t6" headers="r1c1-t6"><code dir="ltr">&lt;</code></td>
<td class="cellalignment6332" headers="r8c1-t6 r1c2-t6">Is less than.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r9c1-t6" headers="r1c1-t6"><code dir="ltr">&lt;=</code></td>
<td class="cellalignment6332" headers="r9c1-t6 r1c2-t6">Is less than or equal to.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r10c1-t6" headers="r1c1-t6">{<code dir="ltr">ANY</code>|
<p><code dir="ltr">SOME}</code></p>
</td>
<td class="cellalignment6332" headers="r10c1-t6 r1c2-t6">The predicate is <code dir="ltr">TRUE</code> if one or more of the values in the <code dir="ltr"><span class="codeinlineitalic">ValueList</span></code> relate to the expression or list of expressions as indicated by the comparison operator. <code dir="ltr">SOME</code> is a synonym for <code dir="ltr">ANY</code>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r11c1-t6" headers="r1c1-t6"><code dir="ltr"><span class="codeinlineitalic">ValueList</span></code></td>
<td class="cellalignment6332" headers="r11c1-t6 r1c2-t6">A list of values that are compared against the <code dir="ltr"><span class="codeinlineitalic">RowValueConstructor</span></code> values.
<p>The <code dir="ltr"><span class="codeinlineitalic">ValueList</span></code> can be an empty list (sometimes generated by SQL generation tools) or consists of <code dir="ltr"><span class="codeinlineitalic">ConstantExpression</span></code> entries.</p>
<p>The <code dir="ltr"><span class="codeinlineitalic">ValueList</span></code> <span class="italic">cannot</span> include column references, sequences, subqueries, <code dir="ltr">ROWID</code> values, or <code dir="ltr">ROWNUM</code> values.</p>
<p>The <code dir="ltr"><span class="codeinlineitalic">ValueList</span></code> can be nested if <code dir="ltr"><span class="codeinlineitalic">RowValueConstructor</span></code> is a list. For example: <code dir="ltr">(x, y) not in ((1+1, 2), (abs(-1), 5+1))</code></p>
</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref963"></a>Description</p>
<ul>
<li>
<p>If <code dir="ltr">X</code> is the value of <code dir="ltr"><span class="codeinlineitalic">Expression</span></code>, and <code dir="ltr">(a,b, ..., z)</code> represents the elements in <code dir="ltr"><span class="codeinlineitalic">ValueList</span></code>, and <code dir="ltr">OP</code> is a comparison operator, then the following is true:</p>
<ul>
<li>
<p><code dir="ltr">X OP ANY (a,b,...,z)</code> is equivalent to <code dir="ltr">X OP a OR X OP b OR...OR X OP z</code>.</p>
</li>
</ul>
</li>
<li>
<p>If <code dir="ltr">X</code> is the value of <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> and <code dir="ltr">(a,b,..., z)</code> are the elements in a <code dir="ltr"><span class="codeinlineitalic">Value&shy;List</span></code>, then the following is true:</p>
<ul>
<li>
<p><code dir="ltr">X IN (a,b,...,z)</code> is equivalent to <code dir="ltr">X = a OR X = b OR...OR X = z</code>.</p>
</li>
</ul>
</li>
<li>
<p>All character data types are compared in accordance with the current value of the <code dir="ltr">NLS_SORT</code> session parameter.</p>
</li>
<li>
<p>See <a href="types.htm#i1029200">&#34;Numeric data types&#34;</a> for information about how TimesTen compares values of different but compatible types.</p>
</li>
<li>
<p>When evaluating an empty <code dir="ltr"><span class="codeinlineitalic">ValueList</span></code>, the result of <code dir="ltr"><span class="codeinlineitalic">Expression</span></code> <code dir="ltr">IN</code> is false.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref964"></a>Examples</p>
<p>Select all item numbers containing orders of 100, 200, or 300 items.</p>
<pre dir="ltr">SELECT DISTINCT OrderItems.ItemNumber 
FROM OrderItems
WHERE OrderItems.Quantity = ANY (100, 200, 300)
</pre>
<p>Get part numbers of parts whose weight is 12, 16, or 17.</p>
<pre dir="ltr">SELECT Parts.PartNumber FROM Parts 
WHERE Parts.Weight IN (12, 16, 17);
</pre>
<p>Get part number of parts whose serial number is <code dir="ltr">&#39;1123-P-01&#39;</code>, <code dir="ltr">&#39;1733-AD-01&#39;</code>, <code dir="ltr">:SerialNumber</code> or <code dir="ltr">:SerialInd</code>, where <code dir="ltr">:SerialNumber</code> and <code dir="ltr">:SerialInd</code> are dynamic parameters whose values are supplied at runtime.</p>
<pre dir="ltr">SELECT PartNumber FROM Purchasing.Parts 
WHERE SerialNumber
IN (&#39;1123-P-01&#39;, &#39;1733-AD-01&#39;,:SerialNumber, :SerialInd);
</pre>
<p>The following example queries an empty select list for <code dir="ltr">IN</code> condition.</p>
<pre dir="ltr">SELECT * FROM t1 WHERE x1 IN ();
</pre>
<p>The following example uses a list of expressions with <code dir="ltr">IN</code>.</p>
<pre dir="ltr">SELECT * FROM t1 WHERE (x1,y1) IN ((1,2), (3,4));
</pre>
<p>The next three examples, using <code dir="ltr">ttIsql</code>, show the use of constant expressions. Assume a table <code dir="ltr">T</code> with a single column named <code dir="ltr">X</code> of type <code dir="ltr">NUMBER</code>, with the following data:</p>
<pre dir="ltr">Command&gt; select * from t;
&lt; 1 &gt;
&lt; 2 &gt;
&lt; 3 &gt;
&lt; 4 &gt;
&lt; 5 &gt;
5 rows found.
</pre>
<p>This first example uses constant expressions in a query:</p>
<pre dir="ltr">Command&gt; select x from t where x in (abs(1-2), to_number(&#39;1&#39;)+2, 3);
&lt; 1 &gt;
&lt; 3 &gt;
2 rows found.
</pre>
<p>This second example also uses dynamic parameters:</p>
<pre dir="ltr">Command&gt; select x from t where x = any (1+?, 1+3, ?);

Type &#39;?&#39; for help on entering parameter values.
Type &#39;*&#39; to end prompting and abort the command.
Type &#39;-&#39; to leave the parameter unbound.
Type &#39;/;&#39; to leave the remaining parameters unbound and execute the command.

Enter Parameter 1 &#39;_QMARK_1&#39; (NUMBER) &gt; 1
Enter Parameter 2 &#39;_QMARK_2&#39; (NUMBER) &gt; 5
&lt; 2 &gt;
&lt; 4 &gt;
&lt; 5 &gt;
3 rows found.
</pre>
<p>This third example also uses <code dir="ltr">NULL</code>:</p>
<pre dir="ltr">Command&gt; select x from t where x in (null, 1, 3+1, 2);
&lt; 1 &gt;
&lt; 2 &gt;
&lt; 4 &gt;
3 rows found.
</pre>
<p>For the next example, consider a table <code dir="ltr">T_DATE</code> with a single column named <code dir="ltr">MYDATE</code> of type <code dir="ltr">DATE</code>, with the following data:</p>
<pre dir="ltr">Command&gt; select * from t_date;
&lt; 2013-08-13 00:00:00 &gt;
&lt; 2013-08-14 00:00:00 &gt;
&lt; 2013-08-15 00:00:00 &gt;
3 rows found.
</pre>
<p>The example uses constant expressions for dates:</p>
<pre dir="ltr">Command&gt; select mydate from t_date where mydate in (date &#39;2013-08-12&#39;+1, 
date &#39;2013-08-12&#39;+2);
&lt; 2013-08-13 00:00:00 &gt;
&lt; 2013-08-14 00:00:00 &gt;
2 rows found.
</pre>
<p>For the next example, consider a table <code dir="ltr">MYCHARS</code> with a single column named <code dir="ltr">COL1</code> of type <code dir="ltr">VARCHAR2(32)</code>, with the following data:</p>
<pre dir="ltr">Command&gt; select * from mychars;
&lt; abc &gt;
&lt; def &gt;
&lt; ghi &gt;
3 rows found.
</pre>
<p>The example uses a function call that returns a constant expression:</p>
<pre dir="ltr">Command&gt; select col1 from mychars where col1 in (ltrim(&#39;abcdef&#39;, &#39;abc&#39;));
&lt; def &gt;
1 row found.
</pre>
<p>The following example illustrates the use of a list of expressions for the <code dir="ltr">IN</code> predicate. The query returns the <code dir="ltr">DEPARTMENT_NAME</code> for departments with <code dir="ltr">DEPARTMENT_ID = 240</code> and <code dir="ltr">LOCATION_ID = 1700</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The expression on the right side of the <code dir="ltr">IN</code> predicate must be enclosed in double parentheses <code dir="ltr">(( ))</code>.</div>
<pre dir="ltr">Command&gt; SELECT department_name FROM departments 
       &gt; WHERE (department_id, location_id) IN ((240,1700));
&lt; Government Sales &gt;
1 row found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1002929"></a>
<div id="TTSQL269" class="refsect1">
<h2 class="refsect1"><a id="sthref965"></a><a id="sthref966"></a>BETWEEN predicate</h2>
<p>A <code dir="ltr">BETWEEN</code> predicate determines whether a value is:</p>
<ul>
<li>
<p>Greater than or equal to a second value</p>
</li>
</ul>
<p>and:</p>
<ul>
<li>
<p>Less than or equal to a third value</p>
</li>
</ul>
<p>The predicate evaluates to <code dir="ltr">TRUE</code> if a value falls within the specified range.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref967"></a>SQL syntax</p>
<pre dir="ltr"><span class="codeinlineitalic">Expression1</span> [NOT] BETWEEN <span class="codeinlineitalic">Expression2</span> AND <span class="codeinlineitalic">Expression3</span>
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref968"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for BETWEEN." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t8">Parameter</th>
<th class="cellalignment6331" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t8" headers="r1c1-t8"><code dir="ltr"><span class="codeinlineitalic">Expression1</span></code>, <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code>, <code dir="ltr"><span class="codeinlineitalic">Expression3</span></code></td>
<td class="cellalignment6332" headers="r2c1-t8 r1c2-t8"><a id="sthref969"></a>The syntax for expressions is defined in <a href="express.htm#i1028917">&#34;Expression specification&#34;</a>. Both numeric and non-numeric expressions are allowed in <code dir="ltr">BETWEEN</code> predicates, but all expressions must be compatible with each other.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i989837"></a>Description</p>
<ul>
<li>
<p><code dir="ltr">BETWEEN</code> evaluates to <code dir="ltr">FALSE</code> and <code dir="ltr">NOT BETWEEN</code> evaluates to <code dir="ltr">TRUE</code> if the second value is greater than the third value.</p>
</li>
<li>
<p>Consult the following table if either <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code> or <code dir="ltr"><span class="codeinlineitalic">Expression3</span></code> is <code dir="ltr">NULL</code> for <code dir="ltr">BETWEEN</code> or <code dir="ltr">NOT BETWEEN</code>:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="NULL values for expressions" summary="This table shows the results of evaluating BETWEEN predicates if expressions are NULL." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t9">Expression2</th>
<th class="cellalignment6331" id="r1c2-t9">Expression3</th>
<th class="cellalignment6331" id="r1c3-t9">BETWEEN</th>
<th class="cellalignment6331" id="r1c4-t9">NOT BETWEEN</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t9" headers="r1c1-t9"><code dir="ltr">&lt;=</code> <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code></td>
<td class="cellalignment6332" headers="r2c1-t9 r1c2-t9"><code dir="ltr">NULL</code></td>
<td class="cellalignment6332" headers="r2c1-t9 r1c3-t9"><code dir="ltr">NULL</code></td>
<td class="cellalignment6332" headers="r2c1-t9 r1c4-t9"><code dir="ltr">NULL</code></td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t9" headers="r1c1-t9"><code dir="ltr">&gt;</code> <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code></td>
<td class="cellalignment6332" headers="r3c1-t9 r1c2-t9"><code dir="ltr">NULL</code></td>
<td class="cellalignment6332" headers="r3c1-t9 r1c3-t9"><code dir="ltr">FALSE</code></td>
<td class="cellalignment6332" headers="r3c1-t9 r1c4-t9"><code dir="ltr">TRUE</code></td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t9" headers="r1c1-t9"><code dir="ltr">NULL</code></td>
<td class="cellalignment6332" headers="r4c1-t9 r1c2-t9"><code dir="ltr">&gt;=</code> <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code></td>
<td class="cellalignment6332" headers="r4c1-t9 r1c3-t9"><code dir="ltr">NULL</code></td>
<td class="cellalignment6332" headers="r4c1-t9 r1c4-t9"><code dir="ltr">NULL</code></td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t9" headers="r1c1-t9"><code dir="ltr">NULL</code></td>
<td class="cellalignment6332" headers="r5c1-t9 r1c2-t9"><code dir="ltr">&lt;</code> <code dir="ltr"><span class="codeinlineitalic">Expression1</span></code></td>
<td class="cellalignment6332" headers="r5c1-t9 r1c3-t9"><code dir="ltr">NULL</code></td>
<td class="cellalignment6332" headers="r5c1-t9 r1c4-t9"><code dir="ltr">NULL</code></td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">Expression2</span></code> and <code dir="ltr"><span class="codeinlineitalic">Expression3</span></code> constitute a range of possible values for which <code dir="ltr"><span class="codeinlineitalic">Expression2</span></code> is the lowest possible value and <code dir="ltr"><span class="codeinlineitalic">Expression3</span></code> is the highest possible value within the specified range. In the <code dir="ltr">BETWEEN</code> predicate, the low value must be specified first.</p>
<p>Comparisons are conducted as described in <a href="#i989893">&#34;Comparison predicate&#34;</a>.</p>
</li>
<li>
<p>The <code dir="ltr">BETWEEN</code> predicate is not supported for <code dir="ltr">NCHAR</code> types.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref970"></a>Examples</p>
<p>Parts sold for under $250.00 and over $1500.00 are discounted 25 percent.</p>
<pre dir="ltr">UPDATE Purchasing.Parts 
SET SalesPrice = SalesPrice * 0.75
WHERE SalesPrice NOT BETWEEN 250.00 AND 1500.00;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i989893"></a>
<div id="TTSQL270" class="refsect1">
<h2 class="refsect1"><a id="sthref971"></a><a id="sthref972"></a>Comparison predicate</h2>
<p>A comparison predicate compares two expressions using a comparison operator. The predicate evaluates to <code dir="ltr">TRUE</code> if the first expression relates to the second expression as specified by the comparison operator.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref973"></a>SQL syntax</p>
<pre dir="ltr"><span class="codeinlineitalic">RowValueConstructor</span> <span class="codeinlineitalic">CompOp</span> <span class="codeinlineitalic">RowValueConstructor2</span>
</pre>
<p>The syntax for <code dir="ltr"><span class="codeinlineitalic">RowValueConstructor</span></code>:</p>
<pre dir="ltr"><span class="codeinlineitalic">RowValueConstructorElement</span> | (<span class="codeinlineitalic">RowValueConstructorList</span>) | <span class="codeinlineitalic">ScalarSubquery</span>
</pre>
<p>The syntax for <code dir="ltr"><span class="codeinlineitalic">RowValueConstructorList</span></code>:</p>
<pre dir="ltr"><span class="codeinlineitalic">RowValueConstructorElement</span>[{, <span class="codeinlineitalic">RowValueConstructorElement</span>} ... ]
</pre>
<p>The syntax for <code dir="ltr"><span class="codeinlineitalic">RowValueConstructor2</span></code> (one expression)</p>
<pre dir="ltr"><span class="italic">Expression</span>
</pre>
<p>The syntax for <code dir="ltr"><span class="codeinlineitalic">RowValueConstructor2</span></code> (list of expressions)</p>
<pre dir="ltr">((<span class="codeinlineitalic">Expression</span>[,...]))
</pre>
<p><a id="sthref974"></a><a id="sthref975"></a>The syntax for <code dir="ltr"><span class="codeinlineitalic">CompOp</span></code>:</p>
<pre dir="ltr">{= | &lt;&gt; | &gt; | &gt;= | &lt; | &lt;= }
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref976"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Component descriptions" summary="This table contains descriptions of components of a comparison predicate." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t10">Component</th>
<th class="cellalignment6331" id="r1c2-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t10" headers="r1c1-t10"><a id="sthref977"></a><code dir="ltr"><span class="codeinlineitalic">Expression</span></code></td>
<td class="cellalignment6332" headers="r2c1-t10 r1c2-t10">The syntax for expressions is defined under <a href="express.htm#i1028917">&#34;Expression specification&#34;</a>. Both numeric and non-numeric expressions are allowed in comparison predicates, but both expressions must be compatible with each other.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t10" headers="r1c1-t10"><code dir="ltr"><span class="codeinlineitalic">ScalarSubquery</span></code></td>
<td class="cellalignment6332" headers="r3c1-t10 r1c2-t10">A subquery that returns a single value. Scalar subqueries and their restrictions are defined under <a href="express.htm#i988350">&#34;Subqueries&#34;</a>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t10" headers="r1c1-t10"><code dir="ltr">=</code></td>
<td class="cellalignment6332" headers="r4c1-t10 r1c2-t10">Is equal to.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t10" headers="r1c1-t10"><code dir="ltr">&lt;&gt;</code></td>
<td class="cellalignment6332" headers="r5c1-t10 r1c2-t10">Is not equal to.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t10" headers="r1c1-t10"><code dir="ltr">&gt;</code></td>
<td class="cellalignment6332" headers="r6c1-t10 r1c2-t10">Is greater than.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r7c1-t10" headers="r1c1-t10"><code dir="ltr">&gt;=</code></td>
<td class="cellalignment6332" headers="r7c1-t10 r1c2-t10">Is greater than or equal to.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r8c1-t10" headers="r1c1-t10"><code dir="ltr">&lt;</code></td>
<td class="cellalignment6332" headers="r8c1-t10 r1c2-t10">Is less than.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r9c1-t10" headers="r1c1-t10"><code dir="ltr">&lt;=</code></td>
<td class="cellalignment6332" headers="r9c1-t10 r1c2-t10">Is less than or equal to.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref978"></a>Description</p>
<ul>
<li>
<p>All character data types are compared in accordance with the current value of the <code dir="ltr">NLS_SORT</code> session parameter.</p>
</li>
<li>
<p>If <code dir="ltr"><span class="codeinlineitalic">RowValueConstructorList</span></code> is specified only the operators <code dir="ltr">=</code> and <code dir="ltr">&lt;&gt;</code> are allowed.</p>
</li>
<li>
<p>See <a href="types.htm#i1029200">&#34;Numeric data types&#34;</a> for information about how TimesTen compares values of different but compatible types.</p>
</li>
<li>
<p><a id="sthref979"></a>If either side of a comparison predicate evaluates to <code dir="ltr">UNKNOWN</code> or <code dir="ltr">NULL</code>, this implies that neither the predicate nor the negation of the predicate is <code dir="ltr">TRUE</code>.</p>
</li>
<li>
<p>The NULL value itself can be used directly as an operand of an operator or predicate. For example, the <code dir="ltr">(1 = NULL)</code> comparison is supported. This is the same as if you cast NULL to the appropriate data type, as follows: <code dir="ltr">(1 = CAST(NULL AS INT))</code>. Both methods are supported and return the same results.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref980"></a>Examples</p>
<p>Retrieve part numbers of parts requiring fewer than 20 delivery days:</p>
<pre dir="ltr">SELECT PartNumber FROM Purchasing.SupplyPrice 
WHERE DeliveryDays &lt; 20;
</pre>
<p>The query returns the <code dir="ltr">last_name</code> of employees where <code dir="ltr">salary=9500</code> and <code dir="ltr">commission_pct=.25</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The expression on the right side of the equal sign must be enclosed in double parentheses <code dir="ltr">(( ))</code>.</div>
<pre dir="ltr">Command&gt; SELECT last_name FROM employees 
       &gt; WHERE(salary,commission_pct) = ((9500,.25));
&lt; Bernstein &gt;
1 row found.
</pre>
<p>The query returns the <code dir="ltr">last_name</code> of the employee whose <code dir="ltr">manager_id = 205</code>. The employee&#39;s <code dir="ltr">department_id</code> and <code dir="ltr">manager_id</code> is stored in both the <code dir="ltr">employees</code> and <code dir="ltr">departments</code> tables. A subquery is used to extract the information from the <code dir="ltr">departments</code> table.</p>
<pre dir="ltr">Command&gt; SELECT last_name FROM employees 
       &gt; WHERE (department_id, manager_id) =
       &gt; (SELECT department_id, manager_id FROM departments 
       &gt; WHERE manager_id = 205);
&lt; Gietz &gt;
1 row found.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i989952"></a>
<div id="TTSQL271" class="refsect1">
<h2 class="refsect1"><a id="sthref981"></a><a id="sthref982"></a><a id="sthref983"></a>EXISTS predicate</h2>
<p>An <code dir="ltr">EXISTS</code> predicate checks for the existence or nonexistence of a table subquery. The predicate evaluates to <code dir="ltr">TRUE</code> if the subquery returns at least one row for <code dir="ltr">EXISTS</code> or returns no rows for <code dir="ltr">NOT EXISTS</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref984"></a>SQL syntax</p>
<pre dir="ltr">[NOT] EXISTS (<span class="codeinlineitalic">Subquery</span>)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref985"></a>Parameters</p>
<p>The <code dir="ltr">EXISTS</code> predicate has the following parameter:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains a description of the parameter for EXISTS." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t12">Parameter</th>
<th class="cellalignment6331" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t12" headers="r1c1-t12"><code dir="ltr"><span class="codeinlineitalic">Subquery</span></code><a id="sthref986"></a></td>
<td class="cellalignment6332" headers="r2c1-t12 r1c2-t12">The syntax of subqueries is defined under <a href="express.htm#i988350">&#34;Subqueries&#34;</a>.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref987"></a>Description</p>
<ul>
<li>
<p>When a subquery is introduced with <code dir="ltr">EXISTS</code>, the subquery functions as an <span class="italic">existence</span> test. <code dir="ltr">EXISTS</code> tests for the presence or absence of an empty set of rows. If the subquery returns at least one row, the subquery evaluates to true.</p>
</li>
<li>
<p>When a subquery is introduced with <code dir="ltr">NOT EXISTS</code>, the subquery functions as an <span class="italic">absence</span> test. <code dir="ltr">NOT EXISTS</code> tests for the presence or absence of an empty set of rows. If the subquery returns no rows, the subquery evaluates to true.</p>
</li>
<li>
<p>If join order is issued using the <code dir="ltr">ttOptSetOrder</code> built-in procedure that conflicts with the join ordering requirements of the <code dir="ltr">NOT EXISTS</code> subquery, the specified join order is ignored, TimesTen issues a warning and the query is executed.</p>
</li>
<li>
<p>The following table describes supported and unsupported usages of <code dir="ltr">EXISTS</code> and <code dir="ltr">NOT EXISTS</code> in TimesTen.</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="EXISTS/NOT EXISTS support" summary="This table describes supported and unsupported usages of EXISTS and NOT EXISTS." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t13">Query/subquery description</th>
<th class="cellalignment6331" id="r1c2-t13">Not Exists</th>
<th class="cellalignment6331" id="r1c3-t13">Exists</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t13" headers="r1c1-t13">Aggregates in subquery</td>
<td class="cellalignment6332" headers="r2c1-t13 r1c2-t13">Supported</td>
<td class="cellalignment6332" headers="r2c1-t13 r1c3-t13">Supported</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t13" headers="r1c1-t13">Aggregates in main query</td>
<td class="cellalignment6332" headers="r3c1-t13 r1c2-t13">Supported</td>
<td class="cellalignment6332" headers="r3c1-t13 r1c3-t13">Supported</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t13" headers="r1c1-t13">Subquery in <code dir="ltr">OR</code> clause</td>
<td class="cellalignment6332" headers="r4c1-t13 r1c2-t13">Supported</td>
<td class="cellalignment6332" headers="r4c1-t13 r1c3-t13">Supported</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t13" headers="r1c1-t13">Join ordering using the <code dir="ltr">ttOptSetOrder</code> built-in procedure</td>
<td class="cellalignment6332" headers="r5c1-t13 r1c2-t13">Limited support</td>
<td class="cellalignment6332" headers="r5c1-t13 r1c3-t13">Supported</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref988"></a>Examples</p>
<p>Get a list of customers having at least one unshipped order.</p>
<pre dir="ltr">SELECT customers.name FROM customers
WHERE EXISTS (SELECT 1 FROM orders 
WHERE customers.id = orders.custid 
AND orders.status = &#39;unshipped&#39;);
</pre>
<p>Get a list of customers having no unshipped orders.</p>
<pre dir="ltr">SELECT customers.name FROM customers
WHERE NOT EXISTS (SELECT 1 FROM orders 
WHERE customers.id = orders.custid 
AND orders.status = &#39;unshipped&#39;);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i1003234"></a>
<div id="TTSQL272" class="refsect1">
<h2 class="refsect1"><a id="sthref989"></a><a id="sthref990"></a><a id="sthref991"></a><a id="sthref992"></a>IS INFINITE predicate</h2>
<p>An <code dir="ltr">IS INFINITE</code> predicate determines whether an expression is infinite (positive infinity (<code dir="ltr">INF</code>) or negative infinity (<code dir="ltr">-INF</code>)).</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref993"></a>SQL syntax</p>
<pre dir="ltr"><span class="codeinlineitalic">Expression</span> IS [NOT] INFINITE
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref994"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains a description of the parameter for IS INFINITE." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t14">Parameter</th>
<th class="cellalignment6331" id="r1c2-t14">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t14" headers="r1c1-t14"><code dir="ltr"><span class="codeinlineitalic">Expression</span></code><a id="sthref995"></a></td>
<td class="cellalignment6332" headers="r2c1-t14 r1c2-t14">Expression to test.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref996"></a>Description</p>
<ul>
<li>
<p>An <code dir="ltr">IS INFINITE</code> predicate evaluates to <code dir="ltr">TRUE</code> if the expression is positive or negative infinity.</p>
</li>
<li>
<p>An <code dir="ltr">IS NOT INFINITE</code> predicate evaluates to <code dir="ltr">TRUE</code> if expression is neither positive nor negative infinity.</p>
</li>
<li>
<p>The expression must either resolve to a numeric data type or to a data type that can be implicitly converted to a numeric data type.</p>
</li>
<li>
<p>Two positive infinity values are equal to each other. Two negative infinity values are equal to each other.</p>
</li>
<li>
<p>Expressions containing floating-point values may generate <code dir="ltr">Inf</code>, <code dir="ltr">-Inf</code>, or <code dir="ltr">NaN</code>. This can occur either because the expression generated overflow or exceptional conditions or because one or more of the values in the expression was <code dir="ltr">Inf</code>, <code dir="ltr">-Inf</code>, or <code dir="ltr">NaN</code>. Inf and <code dir="ltr">NaN</code> are generated in overflow or division by 0 conditions.</p>
</li>
<li>
<p><code dir="ltr">Inf</code>, <code dir="ltr">-Inf</code>, and <code dir="ltr">NaN</code> values are not ignored in aggregate functions. <code dir="ltr">NULL</code> values are. If you want to exclude <code dir="ltr">Inf</code> and <code dir="ltr">NaN</code> from aggregates (or from any selection), use both the <code dir="ltr">IS NOT NAN</code> and <code dir="ltr">IS NOT INFINITE</code> predicates.</p>
</li>
<li>
<p>Negative infinity (<code dir="ltr">-INF</code>) sorts lower than all other values. Positive infinity (<code dir="ltr">INF</code>) sorts higher than all other values, but lower than <code dir="ltr">NaN</code> (&#34;not a number&#34;) and the <code dir="ltr">NULL</code> value.</p>
</li>
<li>
<p>For more information on <code dir="ltr">Inf</code> and <code dir="ltr">NaN</code>, see <a href="types.htm#i1036375">&#34;INF and NAN&#34;</a>.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDDGGBD"></a>
<div id="TTSQL273" class="refsect1">
<h2 class="refsect1"><a id="sthref997"></a><a id="sthref998"></a>IS NAN predicate</h2>
<p>An <code dir="ltr">IS NAN</code> predicate determines whether an expression is the undefined result of an operation (that is, is &#34;not a number&#34; or <code dir="ltr">NaN</code>).</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref999"></a>SQL syntax</p>
<pre dir="ltr"><span class="codeinlineitalic">Expression</span> IS [NOT] NAN
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1000"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains a description of the parameter for IS NAN." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t15">Parameter</th>
<th class="cellalignment6331" id="r1c2-t15">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t15" headers="r1c1-t15"><code dir="ltr"><span class="codeinlineitalic">Expression</span></code><a id="sthref1001"></a><a id="sthref1002"></a></td>
<td class="cellalignment6332" headers="r2c1-t15 r1c2-t15">Expression to test.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1003"></a>Description</p>
<ul>
<li>
<p>An <code dir="ltr">IS NAN</code> predicate evaluates to <code dir="ltr">TRUE</code> if the expression is &#34;not a number.&#34;</p>
</li>
<li>
<p>An <code dir="ltr">IS NOT NAN</code> predicate evaluates to <code dir="ltr">TRUE</code> if expression is not &#34;not a number.&#34;</p>
</li>
<li>
<p>The expression must either resolve to a numeric data type or to a data type that can be implicitly converted to a numeric data type.</p>
</li>
<li>
<p>Two <code dir="ltr">NaN</code> (&#34;not a number&#34;) values are equal to each other.</p>
</li>
<li>
<p>Expressions containing floating-point values may generate <code dir="ltr">Inf</code>, <code dir="ltr">-Inf</code>, or <code dir="ltr">NaN</code>. This can occur either because the expression generated overflow or exceptional conditions or because one or more of the values in the expression was <code dir="ltr">Inf</code>, <code dir="ltr">-Inf</code>, or <code dir="ltr">NaN</code>. <code dir="ltr">Inf</code> and <code dir="ltr">NaN</code> are generated in overflow or division by 0 conditions.</p>
</li>
<li>
<p><code dir="ltr">Inf</code>, <code dir="ltr">-Inf</code>, and <code dir="ltr">NaN</code> values are not ignored in aggregate functions. <code dir="ltr">NULL</code> values are. If you want to exclude <code dir="ltr">Inf</code> and <code dir="ltr">NaN</code> from aggregates (or from any selection), use both the <code dir="ltr">IS NOT NAN</code> and <code dir="ltr">IS NOT INFINITE</code> predicates.</p>
</li>
<li>
<p><code dir="ltr">NaN</code> (&#34;not a number&#34;) sorts higher than all other values including positive infinity, but lower than the <code dir="ltr">NULL</code> value.</p>
</li>
<li>
<p>For more information on <code dir="ltr">Inf</code> and <code dir="ltr">NaN</code>, see <a href="types.htm#i1036375">&#34;INF and NAN&#34;</a>.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDFJAGI"></a>
<div id="TTSQL274" class="refsect1">
<h2 class="refsect1"><a id="sthref1004"></a><a id="sthref1005"></a><a id="sthref1006"></a>IS NULL predicate</h2>
<p>The <code dir="ltr">IS NULL</code> predicate determines whether an expression has the value <code dir="ltr">NULL</code>. The predicate evaluates to <code dir="ltr">TRUE</code> if the expression is <code dir="ltr">NULL</code>. If the <code dir="ltr">NOT</code> option is used, the predicate evaluates to <code dir="ltr">TRUE</code> if the expression is <code dir="ltr">NOT NULL</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1007"></a>SQL syntax</p>
<pre dir="ltr">{<span class="italic">ColumnName</span> | <span class="italic">Constant</span> | <span class="italic">Expression</span> | <span class="italic">LOBDataType</span>} IS [NOT] NULL
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1008"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for IS NULL." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t16">Parameter</th>
<th class="cellalignment6331" id="r1c2-t16">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t16" headers="r1c1-t16"><code dir="ltr"><span class="codeinlineitalic">ColumnName</span></code><a id="sthref1009"></a></td>
<td class="cellalignment6332" headers="r2c1-t16 r1c2-t16">The name of a column from which a value is to be taken. Column names are discussed in <a href="names.htm#g997409">Chapter 2, &#34;Names, Namespace and Parameters&#34;</a>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t16" headers="r1c1-t16"><code dir="ltr"><span class="codeinlineitalic">Constant</span></code><a id="sthref1010"></a></td>
<td class="cellalignment6332" headers="r3c1-t16 r1c2-t16">A specific value. See <a href="express.htm#i1043723">&#34;Constants&#34;</a>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t16" headers="r1c1-t16"><code dir="ltr"><span class="codeinlineitalic">Expression</span></code><a id="sthref1011"></a></td>
<td class="cellalignment6332" headers="r4c1-t16 r1c2-t16">Expression to test.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t16" headers="r1c1-t16"><code dir="ltr"><span class="codeinlineitalic">LOBDataType</span></code><a id="sthref1012"></a></td>
<td class="cellalignment6332" headers="r5c1-t16 r1c2-t16">Value to test that is in a <code dir="ltr">CLOB</code>, <code dir="ltr">BLOB</code>, or <code dir="ltr">NCLOB</code> data type.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1013"></a>Examples</p>
<p>Use <code dir="ltr">IS NULL</code> to identify the president of the company, who is the only person without a manager.</p>
<pre dir="ltr">Command&gt; SELECT * FROM employees 
 &gt; WHERE manager_id IS NULL;
&lt; 100, Steven, King, SKING, 515.123.4567, 1987-06-17 00:00:00, AD_PRES, 24000, 
&lt;NULL&gt;, &lt;NULL&gt;, 90 &gt;
1 row found.
</pre></div>
<!-- class="refsubsect" -->
<p>The following statement uses <code dir="ltr">IS NULL</code> to identify all locations without a state or province.</p>
<pre dir="ltr">Command&gt; SELECT * FROM locations
       &gt; WHERE state_province IS NULL;
&lt; 1000, 1297 Via Cola di Rie, 00989, Roma, &lt;NULL&gt;, IT &gt;
&lt; 1100, 93091 Calle della Testa, 10934, Venice, &lt;NULL&gt;, IT &gt;
&lt; 1300, 9450 Kamiya-cho, 6823, Hiroshima, &lt;NULL&gt;, JP &gt;
&lt; 2000, 40-5-12 Laogianggen, 190518, Beijing, &lt;NULL&gt;, CN &gt;
&lt; 2300, 198 Clementi North, 540198, Singapore, &lt;NULL&gt;, SG &gt;
&lt; 2400, 8204 Arthur St, &lt;NULL&gt;, London, &lt;NULL&gt;, UK &gt;
6 rows found.
</pre></div>
<!-- class="refsect1" -->
<a id="i990175"></a>
<div id="TTSQL275" class="refsect1">
<h2 class="refsect1"><a id="sthref1014"></a><a id="sthref1015"></a>LIKE predicate</h2>
<p>A <code dir="ltr">LIKE</code> predicate evaluates to <code dir="ltr">TRUE</code> if the source contains a given pattern. The <code dir="ltr">LIKE</code> predicate matches a portion of one character value to another by searching the source for the pattern specified.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1016"></a>SQL syntax</p>
<pre dir="ltr"><span class="italic">Source</span> [NOT] LIKE <span class="italic">Pattern</span> 
 [ESCAPE {&#39;<span class="italic">EscapeChar</span>&#39; | {? | :<span class="italic">DynamicParameter</span>} }]
</pre>
<p>The syntax for <code dir="ltr"><span class="codeinlineitalic">Pattern</span></code> is as follows:</p>
<pre dir="ltr"><span class="italic">Expression</span> [ ||<span class="italic"> Expression</span> ] [ ... ]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1017"></a>Parameters</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Parameter descriptions" summary="This table contains descriptions of the parameters for LIKE." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t17">Parameter</th>
<th class="cellalignment6331" id="r1c2-t17">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t17" headers="r1c1-t17"><code dir="ltr"><span class="codeinlineitalic">Source</span></code></td>
<td class="cellalignment6332" headers="r2c1-t17 r1c2-t17">This source is searched for all occurrences of the pattern. The source may be an expression, column, character string resulting from a function, or any combination of these that results in a character string used for the source on which the pattern is matched. The source can be a <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NCHAR</code>, <code dir="ltr">NVARCHAR2</code>, <code dir="ltr">CLOB</code>, or <code dir="ltr">NCLOB</code>. For more information on expressions, see <a href="express.htm#i996218">Chapter 3, &#34;Expressions&#34;</a>. For more information on searching within a national character string within <code dir="ltr">NCHAR</code>, <code dir="ltr">NVARCHAR</code>, or <code dir="ltr">NCLOB</code>, see <a href="#CHDEIIAI">&#34;Pattern matching for strings of NCHAR, NVARCHAR2, and NCLOB data types&#34;</a>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t17" headers="r1c1-t17"><code dir="ltr"><span class="codeinlineitalic">Pattern</span></code><a id="sthref1018"></a><a id="sthref1019"></a></td>
<td class="cellalignment6332" headers="r3c1-t17 r1c2-t17">Describes a character pattern that you are searching for in the source with one or more expressions. The data type of the pattern should be a character string data type, such as <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NCHAR</code>, <code dir="ltr">NVARCHAR2</code>, <code dir="ltr">CLOB</code>, or <code dir="ltr">NCLOB</code>.
<p>Multiple expressions may be concatenated to form the character string used for the pattern.</p>
<p>The pattern consists of characters including digits and special characters. For example, <code dir="ltr">NAME LIKE &#39;Annie&#39;</code> evaluates to <code dir="ltr">TRUE</code> only for a name of Annie with no spaces.</p>
<p>You can also use the predicate to test for a partial match by using one or more of the following symbols:</p>
<ul>
<li>
<p>The symbol <code dir="ltr">_</code> represents any single character. For example:</p>
<p><code dir="ltr">BOB</code> and <code dir="ltr">TOM</code> both satisfy the predicate <code dir="ltr">NAME LIKE &#39;<a id="sthref1020"></a><a id="sthref1021"></a><a id="sthref1022"></a>_O_&#39;</code>.</p>
</li>
<li>
<p>The symbol <code dir="ltr"><a id="sthref1023"></a><a id="sthref1024"></a><a id="sthref1025"></a>%</code> represents any string of zero or more characters. For example:</p>
<p><code dir="ltr">MARIE</code> and <code dir="ltr">RENATE</code> both satisfy the predicate <code dir="ltr">NAME LIKE &#39;%A%&#39;</code>.</p>
</li>
</ul>
<p>You can use the <code dir="ltr">_</code> or <code dir="ltr">%</code> symbols multiple times and in any combination in a pattern. However, you cannot use the symbols literally within a pattern unless you use the <code dir="ltr">ESCAPE</code> clause and precede the symbols with the escape character, described by the <code dir="ltr"><span class="codeinlineitalic">EscapeChar</span></code> parameter.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r4c1-t17" headers="r1c1-t17"><code dir="ltr"><span class="codeinlineitalic"><a id="sthref1026"></a>Expression</span></code></td>
<td class="cellalignment6332" headers="r4c1-t17 r1c2-t17">Any expression included in the pattern may be a column, a dynamic parameter, or the result of a function that evaluates to a character string. The syntax for expressions is defined in <a href="express.htm#i1028917">&#34;Expression specification&#34;</a>.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r5c1-t17" headers="r1c1-t17"><code dir="ltr"><span class="codeinlineitalic">EscapeChar</span></code><a id="sthref1027"></a></td>
<td class="cellalignment6332" headers="r5c1-t17 r1c2-t17">Describes an optional escape character which can be used to interpret the symbols <code dir="ltr">_</code> and <code dir="ltr">%</code> literally in the pattern.
<p>The escape character must be a single character. When it appears in the pattern, it must be followed by the escape character itself, the <code dir="ltr">_</code> symbol or the <code dir="ltr">%</code> symbol. Each such pair represents a single literal occurrence of the second character in the pattern. The escape character is always case sensitive. The escape character cannot be <code dir="ltr">_</code> or <code dir="ltr">%</code>.</p>
</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r6c1-t17" headers="r1c1-t17">?
<p><a id="sthref1028"></a><code dir="ltr"><span class="codeinlineitalic">DynamicParameter</span></code></p>
</td>
<td class="cellalignment6332" headers="r6c1-t17 r1c2-t17">Indicates a dynamic parameter in a prepared SQL statement. The parameter value is supplied when the statement is executed.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1029"></a>Description</p>
<ul>
<li>
<p>As long as no escape character is specified, the <code dir="ltr">_</code> or <code dir="ltr">%</code> symbols in the pattern act as wild card characters. If an escape character is specified, the wild card or escape character that follows is treated literally. If the character following an escape character is not a wild card or the escape character, an error results.</p>
</li>
<li>
<p>When providing a combination of expressions, columns, character strings, dynamic parameters, or function results to form the pattern, you can concatenate items together using the || operator to form the final pattern.</p>
</li>
<li>
<p>Case is significant in all conditions comparing character expressions that use the <code dir="ltr">LIKE</code> predicate.</p>
</li>
<li>
<p>If the value of the expression, the pattern, or the escape character is <code dir="ltr">NULL</code>, the <code dir="ltr">LIKE</code> predicate evaluates to <code dir="ltr">NULL</code>.</p>
</li>
<li>
<p>The <code dir="ltr">LIKE</code> predicate may be slower when used on a multibyte character set.</p>
</li>
<li>
<p>For more information on searching within a national character string within <code dir="ltr">NCHAR</code>, <code dir="ltr">NVARCHAR</code>, or <code dir="ltr">NCLOB</code>, see <a href="#CHDEIIAI">&#34;Pattern matching for strings of NCHAR, NVARCHAR2, and NCLOB data types&#34;</a>.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1030"></a>Examples</p>
<p>Find each employee whose last name begins with <code dir="ltr">&#39;Sm&#39;</code>.</p>
<pre dir="ltr">Command&gt; SELECT employee_id, last_name,first_name FROM employees
       &gt; WHERE last_name LIKE &#39;Sm%&#39;
       &gt; ORDER BY employee_id,last_name,first_name;
&lt; 159, Smith, Lindsey &gt;
&lt; 171, Smith, William &gt;
2 rows found.
</pre>
<p>Find each employee whose last name begins with <code dir="ltr">&#39;SM&#39;</code>. This query returns no results because there are no employees whose <code dir="ltr">last_name</code> begins with upper case <code dir="ltr">&#39;SM&#39;</code>.</p>
<pre dir="ltr">Command&gt; SELECT employee_id, last_name,first_name from employees
       &gt; WHERE last_name LIKE &#39;SM%&#39; 
       &gt; ORDER BY employee_id,last_name,first_name;
0 rows found.
</pre>
<p>However, by upper casing the source value of the last name column, you can find all names that begin with &#39;<code dir="ltr">SM</code>&#39;.</p>
<pre dir="ltr">Command&gt; SELECT employee_id, last_name, first_name FROM employees 
 &gt; WHERE UPPER(last_name) LIKE (&#39;SM%&#39;);
&lt; 159, Smith, Lindsey &gt;
&lt; 171, Smith, William &gt;
2 rows found.
</pre>
<p>Use a dynamic parameter denoted by <code dir="ltr">?</code> to find each employee whose last name begins with <code dir="ltr">&#39;Sm&#39;</code> at execution time.</p>
<pre dir="ltr">Command&gt; SELECT employee_id, last_name,first_name FROM employees
       &gt; WHERE last_name like ?
       &gt; ORDER BY employee_id,last_name,first_name;
 
Type &#39;?&#39; for help on entering parameter values.
Type &#39;*&#39; to end prompting and abort the command.
Type &#39;-&#39; to leave the parameter unbound.
Type &#39;/;&#39; to leave the remaining parameters unbound and execute the command.
 
Enter Parameter 1 &#39;_QMARK_1&#39; (VARCHAR2) &gt; &#39;Sm%&#39;
&lt; 159, Smith, Lindsey &gt;
&lt; 171, Smith, William &gt;
2 rows found.
</pre>
<p>Use a bind variable denoted by <code dir="ltr">:a</code> to find each employee whose last name begins with <code dir="ltr">&#39;Sm&#39;</code> at execution time.</p>
<pre dir="ltr">Command&gt; SELECT employee_id, last_name,first_name FROM employees 
       &gt; WHERE last_name LIKE :a 
       &gt; ORDER BY employee_id,last_name,first_name;
 
Type &#39;?&#39; for help on entering parameter values.
Type &#39;*&#39; to end prompting and abort the command.
Type &#39;-&#39; to leave the parameter unbound.
Type &#39;/;&#39; to leave the remaining parameters unbound and execute the command.
 
Enter Parameter 1 &#39;A&#39; (VARCHAR2) &gt; &#39;Sm%&#39;
&lt; 159, Smith, Lindsey &gt;
&lt; 171, Smith, William &gt;
2 rows found.
</pre>
<p>For each employee whose last name begins with <code dir="ltr">&#39;Smit&#39;</code>, find the last name of the manager. Display the first name and last name of the employee and the last name of the manager.</p>
<pre dir="ltr">Command&gt; SELECT e1.first_name || &#39; &#39; || e1.last_name||&#39; works for &#39;||e2.last_name
       &gt;    FROM employees e1, employees e2
       &gt;    WHERE e1.manager_id = e2.employee_id
       &gt;    AND e1.last_name like &#39;Smit&#39;;
&lt; Lindsey Smith works for Partners &gt;
&lt; William Smith works for Cambrault &gt;
2 rows found.
</pre>
<p>This query pattern references the <code dir="ltr">last_name</code> column as the pattern for which to search:</p>
<pre dir="ltr">Command&gt; SELECT e1.first_name || &#39; &#39; || e1.last_name||
&gt; &#39; works for &#39; || e2.last_name
&gt; FROM employees e1, employees e2
&gt; WHERE e1.manager_id = e2.employee_id
&gt; AND &#39;Smith&#39; like e1.last_name;
&lt; Lindsey Smith works for Partners &gt;
&lt; William Smith works for Cambrault &gt;
2 rows found.
</pre>
<p>The pattern can be a column or the result of a function. The following uses the <code dir="ltr">UPPER</code> function on both the source <code dir="ltr">last_name</code> column as well as the <code dir="ltr">&#39;ma&#39;</code> search string for which you are searching:</p>
<pre dir="ltr">Command&gt; SELECT last_name, first_name FROM employees
       &gt; WHERE upper(last_name) LIKE UPPER(&#39;ma%&#39;);
&lt; Markle, Steven &gt;
&lt; Marlow, James &gt;
&lt; Mallin, Jason &gt;
&lt; Matos, Randall &gt;
&lt; Marvins, Mattea &gt;
&lt; Mavris, Susan &gt;
6 rows found.
</pre>
<p>The following query demonstrates using a dynamic parameter to request the pattern.</p>
<pre dir="ltr">Command&gt; SELECT first_name || &#39; &#39; || last_name 
 &gt; FROM employees WHERE last_name like ?;
 
Type &#39;?&#39; for help on entering parameter values.
Type &#39;*&#39; to end prompting and abort the command.
Type &#39;-&#39; to leave the parameter unbound.
Type &#39;/;&#39; to leave the remaining parameters unbound and execute the command.
 
Enter Parameter 1 &#39;_QMARK_1&#39; (VARCHAR2) &gt; &#39;W%&#39;
&lt; Matthew Weiss &gt;
&lt; Alana Walsh &gt;
&lt; Jennifer Whalen &gt;
3 rows found.
</pre>
<p>The following query demonstrates combining a character string with a dynamic parameter in the pattern.</p>
<pre dir="ltr">Command&gt; SELECT first_name || &#39; &#39; || last_name 
 &gt; FROM employees WHERE last_name like &#39;W&#39; || ?;
 
Type &#39;?&#39; for help on entering parameter values.
Type &#39;*&#39; to end prompting and abort the command.
Type &#39;-&#39; to leave the parameter unbound.
Type &#39;/;&#39; to leave the remaining parameters unbound and execute the command.
 
Enter Parameter 1 &#39;_QMARK_1&#39; (VARCHAR2) &gt; &#39;%&#39;
&lt; Matthew Weiss &gt;
&lt; Alana Walsh &gt;
&lt; Jennifer Whalen &gt;
3 rows found.
</pre></div>
<!-- class="refsubsect" -->
<div id="TTSQL276" class="refsect2"><a id="CHDEIIAI"></a>
<h3 class="refsect2"><a id="sthref1031"></a><a id="sthref1032"></a><a id="sthref1033"></a><a id="sthref1034"></a><a id="sthref1035"></a><a id="sthref1036"></a>Pattern matching for strings of NCHAR, NVARCHAR2, and NCLOB data types</h3>
<p>The <code dir="ltr">LIKE</code> predicate can be used for pattern matching for strings of type <code dir="ltr">NCHAR</code>, <code dir="ltr">NVARCHAR2</code>, and <code dir="ltr">NCLOB</code>. The pattern matching characters are:</p>
<div class="inftblhruleinformal">
<table class="cellalignment6330" title="Character descriptions" summary="This table contains descriptions of pattern-matching characters." dir="ltr">
<thead>
<tr class="cellalignment6324">
<th class="cellalignment6331" id="r1c1-t18">Character</th>
<th class="cellalignment6331" id="r1c2-t18">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r2c1-t18" headers="r1c1-t18"><code dir="ltr">U+005F SPACING UNDERSCORE</code></td>
<td class="cellalignment6332" headers="r2c1-t18 r1c2-t18">Represents any single Unicode character.</td>
</tr>
<tr class="cellalignment6324">
<td class="cellalignment6332" id="r3c1-t18" headers="r1c1-t18"><code dir="ltr">U+0025 PERCENT SIGN</code></td>
<td class="cellalignment6332" headers="r3c1-t18 r1c2-t18">Represents any string of zero or more Unicode characters.</td>
</tr>
</tbody>
</table>
<br/></div>
<!-- class="inftblhruleinformal" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1037"></a>Description</p>
<ul>
<li>
<p>The escape character is similarly supported as a single Unicode character or parameter.</p>
</li>
<li>
<p>The types of the <code dir="ltr">LIKE</code> operands can be any combination of character types.</p>
</li>
<li>
<p>Case-insensitive and accent-insensitive <code dir="ltr">NLS_SORT</code> is supported with the <code dir="ltr">LIKE</code> predicate.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1038"></a>Examples</p>
<p>In these examples, the Unicode character <code dir="ltr">U+0021 EXCLAMATION MARK</code> is being used to escape the Unicode character <code dir="ltr">U+005F SPACING UNDERSCORE</code>. Unicode character <code dir="ltr">U+0025 PERCENT SIGN</code> is not escaped, and assumes its pattern matching meaning.</p>
<p><code dir="ltr">VendorName</code> is an <code dir="ltr">NCHAR</code> or <code dir="ltr">NVARCHAR2</code> column.</p>
<pre dir="ltr">SELECT VendorName FROM Purchasing.Vendors
WHERE VendorName LIKE N&#39;ACME!_%&#39; ESCAPE N&#39;!&#39;;
</pre>
<p>This example is equivalent:</p>
<pre dir="ltr">SELECT VendorName FROM Purchasing.Vendors
WHERE VendorName LIKE N&#39;ACME!\u005F\u0025&#39; ESCAPE N&#39;!&#39;;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment6323">
<tr>
<td class="cellalignment6332">
<table class="cellalignment6328">
<tr>
<td class="cellalignment6327"><a href="function.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment6327"><a href="state.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2011, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment6334">
<table class="cellalignment6326">
<tr>
<td class="cellalignment6327"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment6327"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment6327"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment6327"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment6327"><a href="../nav/mindx.htm"><img width="24" height="24" src="../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment6327"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>


</body></html>